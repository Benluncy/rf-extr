
 A DBMS for Large Design Automation Databases Mark N Haynie Amdahl Carp 1250 E Argues M/S 213 Sunnyvale, 
CA 94086  Abstract Large capacity Design Automatlon (CAD/CAM) database management systems require spectal 
capa- bIlltIes over and above what commercial DBMSs or small workstatlon-based CAD/CAM systems provide 
 This paper describes one such system, Tacoma, used at Amdahl Corporation for the storage and retrieval 
of LSI and VLSI mainframe computer designs Tacoma IS based on the relational model with additional object-oriented 
database features I Synchronous -SGI and Sun Disk Terminals Workstations 1 Introduction Fig 1 Logic 
design and testing Environment 1 .I Supported Environment 1.2 DA Requirements Tacoma 1s a DBMS oriented 
to large system Design Automation (DA) problems The system 1s m use by Design Automation at Amdahl 1s 
performed differently Amdahl Corporauon for the design and trackmg of LSI, than CAD/CAM operations at 
chip design houses VLSI and system level logic designs of large general Therefore, Amdahl DA database 
management needs are purpose mamframe computers The central database different from the classic custom-VLSI 
CAD shop A repository approach 1s ideal for the sharmg of designs number of factors make this so among 
nearly 150 logic design, design venficatlon and design lmplementahon personnel There are also ap- First, 
logic design 1s emphasized over physical design proxunately 50 software engmeers de&#38;cated to the 
de- ECL LSI gate array design allows logic designers to lay velopment and support of the DA env=omnent 
out their cm~lts usmg standard multi-gate macros, usu- ally without regard to the physical restramts 
of the Amdahl DA activltles are performed under Am+hl s chip Custom VLSI houses concentrate more on com-UTS 
1 operating system, a Umx2 System V based pacting the most onto chip real estate thereby requlrmg system 
The design system runs on Amdahl 5890-300 the designer to worry about the nitty-gritty layout de-and 
5880 complexes, each a dual multi-processor The truls early m the design process The result 1s that our 
systems are configured with 256 MB and 196 MB of DBMS must capture relatively sunple mterconnect m-mam 
memory, respectively Thu conflguratlon delivers formation from the start Physical mformatlon 1s added 
approvlmately 60 MIPS The design database consists later by automatic parntlonmg and routing software 
of up to 40 glgabytes of data Slhcon Graphics and There can be several physlcal Implementations of a 
Sun workstations support design entry, manual routmg smgle logic design and other duties Some logic design 
1s performed on synchronous 3278 termmals attached to UTS Second, designers work on hundreds of chip, 
card, frame or system designs each with several revlslons The bill 1 UTS IS a trademark of Amdahl Corporation 
of materials management becomes crltlcal Each ma- chme level 1s made up of hundreds of parts The lmme- 
2 Umx 1s a registered trademark of AT&#38;T dlate avadablhty of a version (not necessmly the most PermIssIon 
to copy wthout fee all or part of this material is granted pro- recent one) of each design IS important 
to the system wded that the copies are not made or dlstrlbuted for direct commerctal level integration 
slmulatlons that are performed advantage, the ACM copyrlght nc+tce and the tttle of the pubhcatton and 
Its date appear, and notxe 1s gwen that copymg IS by permwon of the Assoclatlon for Computmg Machmery 
To copy otherwse, or to repubhsh, In some ways the above parallel the commercial DBMS reqmres a fee and/or 
speclftc permtsslon requirements of data entry and inventory management 0 1988 ACM O-89791-268-3/88/0006/0269 
$1 50 However, an engmeermg DBMS must perform dlffer-ently from Its commercial counterparts [8] Fnst, 
instead of a large number of short transactmns, DA databases usually see a few very long transacuons 
Some test generation. routmg or speed analysis pro-grams may take hours to complete The user considers 
this as a single transaction Further, there are even longer, conversatronal transacfrons[7] which may 
last several days In thus case, a designer begms workmg on a cucult and doesn t check it m until it 1s 
m a rea- sonable state of completeness (as defined by various consistency checkmg mechamsms) Schema defmlhon 
and cooperative apphcatlons are nnportant to makmg conversational transactlons work m the Tacoma envl- 
ronment Second, since the transactions are necessarily long, massive amounts of data are read and wntten 
during a typlcal transaction Some chip speed analysis models are on the order of tens of megabytes, card 
models m the hundreds %d, a complete revision history of the design hlerar- thy cf a machme level must 
be mamtamed Durmg the hfe of a product, engmeermg changes require that logic cards returned from the 
field be reworked mto the latest revision The DA decomposltlon paradigm IS Inherently object-onented 
Macros (elemental logic parts such as adders) are composed of transistors Chips are composed of macros 
and so on W&#38;m each decomposltlon layer the subcomponents are networked, between layers they are consldered 
a hierarchy If a designer wants to snnu- late his chip function. he need only snnulate that chip and 
the macros it contams If a designer wants to sunulate hu chip s mteractlon with another chip on the same 
card, he simulates at the card level Runnmg a snnulatlon on chips between different cards reqmres complex 
card-stack snnulatlons Card Stack Qil Card Chtp Macro Fig 2 Design Decomposition Hierarchy The decomposltlon 
hierarchy 1s orthogonal to the revl- slon history mechanism This, m turn, 1s orthogonal to the bill-of-materials 
hierarchy Tacoma set out to meet the needs of representmg these various views as close as possible to 
a flat file relatlonal framework What results IS a relational data model with an oblect- onented look 
   2 Data Model 2.1 Dynamic Relations The Tacoma data model used to represent these complex relationstips 
1s fully described m [2] and [3] For pur- poses of discussion, we ll describe a few sunple DA structures 
Pms on a physical part are represented by pm number and posluon Connecnon points (cps) are connections 
between logic components and pms or other components Nets are wnes, a combmatlon of connection pomts 
and/or pms Representmg pm mformatlon of all parts m a machme wlthm a single, physlcal table would be 
unmanageable Instead, we break up what would be a very large pms table mto a number of table mstances 
A table mstance can be considered a complex obJect m the form of a relation The table mstance can be 
created, removed assigned or shared on ZI oblect basis A table mstance can be thought of as bemg an attnbute 
value 111 another table This relation as a data type vlewpomt 1s quite helpful Since a relation data 
type can be part of any table, this provides arbitrary net-working of relatlonal instances Because of 
this, Tacoma s complex objects can be made up of shared SubobJects This approach 1s more general and 
efficient either than slmulatmg objects via encapsulated query procedures, as 1s proposed m [9] or lmked 
records of a large relation as m [7] Relation data type columns are strongly bound to the table they 
represent In other words, d a column repre- sents nets table instances, It can only hold nets table instances 
Referencing a relation data type at-tnbute value causes the table mstance it represents to be referenced 
These column data elements are called relatronal object references The actual mechamcs are Illustrated 
m the next chapter on SQL Extensions cntl 1 pn dl host pms 1048 1 diana Cl> 4740 2 karl <2> <l> <2> pmsl 
pm% x y pinslpin# x y 1 235 456 1 664 223 2 457 897 2 290 460 3 823 487 3 224 551 4 128 490 Fig 3 Static 
control table and dynamic table Instances RelatIonal instances are called dynamrc tables m Tacoma Standard 
relations are also supported Statrc tables are those with only one instance and reqmre no other table 
to supply relatlonal object references to them A handle to a network of dynanuc table types requires 
at least one static table to act as a directory, or a control table (see figure 3) Treatmg relations 
as complex objects has several ad- vantages A known, standard mterface deals with the objects as if they 
were sunple data types Further, the internals of the complex objects can be manipulated with the the 
same user mterface used for snnple oblects Tacoma is not a complete object-oriented database, however 
It does not support user definable methods to deal with these objects as a whole, as others have pro- 
posed for CAD environments [l, 61 It 1s possible to define operations as macros m the extended language 
d they can be wholly specified m terms of SQL state- ments Relation objects can be shared among a number 
of de- signs by msertmg the references to them mto columns declared m like ways This allows true network 
struc- tures to be created Duphcatlcll of the contents of an oblect IS not performed when references 
are mserted 2.2 Revision Relations The relatlonal obJect concept allows an easier classlfi- cation of 
complex objects represented 111 terms of other obJects However. It by itself does not solve the ver- 
slonmg problem mherent m computer aided design sys- tems Each machme level IS made up of relanon m-stances 
representing versions of several parts In a practical sense, version 3 of any given part 1s very much 
hke version 2 of that same design To store them as separate mstances would waste space as well as tune 
by duphcatmg the data Revision relatlons[4] are dynamic relations wfuch con-tam revlslon history mformatlon 
m the form of an orlgmal design and deltas to that design Each new re- vlslon of a table 1s a newly defined 
view of that table All references to the revlslon history of a partuzular de- sign are to the same physical 
table But, they include a revision number m the reference as well The Tacoma query language mterface 
adds predicates to select only those tuples representmg the desired revlslon Thus, to a typlcal apphcatlon 
program (one wishing to view only a smgle revision at a time), It appears that it 1s vlewmg a separate 
table Data mampulatlon language operations such as insert. delete and update act upon revtslon relations 
differently from those of a non-revision nature They preserve the prior versions of the relation by not 
altermg the exat- mg tuples m the table Instead, the changed or deleted tuples are marked as bemg old 
and new tuples (the deltas) are inserted revcntlj pn dl host cps I 1048 1 dlana <1 1> <l> cps , @revIn 
@revout cp# name len 1 null 1 +InO 45 1 null 2 -out0 89 1 null 3 +lnl 48 Hg 4 Hevlslon relation model 
atter one revl- slon Figure 4 shows the uutml version of a table represent- mg logic connection pomt 
mformation This 1s repre- sented m terms of a revlslon relation The column @revln mdxate at what revlslon 
a tuple was mserted Column @revout mdlcates the revlslon a tuple was re- moved (if nu 11, it 1s still 
current) These two columns are normally not prmted by Tacoma select all, but ac- cess to them may be 
gamed by apphcations seekmg changes between revlslons =yiggc&#38; <l> Rg 5 Rewslon relation after updates 
 In the second revlslon of the design, pm number 2 has been modified and pm 3 deleted Pm 4 was added 
dunng revision three Quenes operatmg on the p 1 n s column of the revcnt 1 table s second tuple would 
see a relation with two tuples, representmg pm 1 and a modified pm 2 Note that multiple changes to a 
tuple durmg a single revlslon are not recorded Most design entry tools capture the revlslon mforma-tlon 
automatically The logic gate editor displays the current design. and any changes to the design are tagged 
and entered mto the database under a separate revlslon number for the design Tools that need to dlstmgulsh 
between two different revlslons can make use of the re- vlslon relation m a different way They can look 
at the all revlslon view of the relation rather than at a single revision The tools would use @r e v1 
n and @revout explicitly to. say, rework old boards with new designs by cuttmg and msertmg discrete wires 
reqmres such a faclhty Revlslon relations provide a sunple, smgle-leveled re-vlslon history model To 
represent design alternatives usmg this faclhty, for mstance, would require makmg copies of the smgle 
relation at the pomt the altema- tlves diverge Separate revlslon relations would be controlled separately 
from that pomt for each altema- tlve  2.3 Dictionary Considerations When usmg the data model provided 
by Tacoma, an ex- tenslve design control or bill of materials schema 1s re- qulred to capture the tierarchlcal 
decomposlhon as well as the history structure A typical structure 1s broken mto a two layer model shown 
m figure 6 Part Catalog Revlsron History Model Tables Macros Fug 6 Database Schema leveling using the 
Tacoma Data Model The broad-based part number and design level mforma- tlon 1s stored m a root static 
table A senes of revl-slon history control tables make up the next level of control Typically, one table 
type might exist for each subsystem or DA tool set supported by the database Each tuple would contam 
relahon object references for a number of model tables These two layers make up the control mformatlon 
Below that lies the real data These model tables are defined m a format designed for a speclflc DA tool 
They, m turn, are made up of refer- ences to low level relatlond objects at the macro level These macros 
may be shared across many models The control tables are managed by Tacoma differently from data tables 
because they have dlfferent requue-ments Operations on control tables are record on-ented, whereas data 
tables are relation onented Thus, different lockmg, sharmg and buffermg cntena are per- formed between 
these table classlflcatlons The details are dlscussed below For relational puns&#38; the Tacoma data 
model provides for flat file representations of all relation instances and revlslon relations A system 
table can be queued to obtam all instances of a table type, concatenatmg these tables together Although 
such an operation would be unthmkable m a database of any size, thus capabthty does allow the data model 
to pass certam relational DBMS benchmarks One final note on schemas The system tables (recordmg column, 
mdex, table and prlvllege mforma-tlon) controllmg a Tacoma database are themselves relational Instances 
This allows a great number of table types to be defined and many mstances of those tables to be created 
without any one self defmmg table growmg too large  3 SQL Extensions 3.1 Standard SQL Tacoma supports 
standard SQL m both an ad hoc query environment and appllcatlon program host-language envuonment The 
SQL language had to be extended m order to accomplish these relatlonal data model exten- slons One area 
m which Tacoma 1s lackmg 1s its fourth gen- eration language and screen bmldmg areas Tacoma IS not designed 
for snnple data entry and statlstlcs gather- ing appllcatlons DA apphcatlons contam sophlstr-cated algorithms 
which cannot easily be modeled by such apphcatlon bmldmg systems Each DA tool pro- vldes its own user 
mtelface usmg common wmdowmg and menu bulldmg code Thus code 1s not part of the DBMS services Tacoma 
concentrates less on application bmldmg envl- ronrnents and more on data services provldmg neces-sary 
prlmltlves for extractmg and updatmg massive amounts of DA data This chapter gives a brief overview of 
those extensions which support the Tacoma data model outhned above  3.2 Relation Instance Creation Relation 
instance defmltlon 1s accomplished by a de-f 1 n e statement It has the same syntax as the SQL treat 
e statement The difference 1s that a statement such as, defme table plns(pln"(integer), x(integer), y(lnteger)) 
 makes a data dlcuonary entry for the table wlthout lay-mg aslde space for the physlcal table This statement 
defines the dynamic mstance seen m figure 3 Note that tis d=ectory structure unfortunately requires Relation 
mstances cannot exist without having a refer- some amount of navlgatlon of the database, as m a ence 
to them contained m another table These relation network data model object references are contamed m 
attributes defined with the access data type These columns may be m static (regular) or other dynamic 
(instance) relations They are strongly typed to the relation mstance type they will hold create table 
cntl(pn(integer), dltinteger), hist(char(5)), pins(access(pins)) In the above example, a pins column 
1s a relation ob- Ject of type pins A null value for a relahon obJect reference means, as one would expect. 
thaJ no relation object exists for that value To create a new mstance reqmres that the c re- ate keyword 
be assigned that column either with the Insert or update SQL statement. insert into cntl ~1048, 1, 'John', 
create> update cntl set pins = create where pins = ndll Relation mstance creation reqmres a relation 
object ref- erence to be created to that mstance Two references to the same relation object can be made 
by asslgnmg the same column value to different tuples insert into cntl select 4742, dl, host, pins fr 
'om cntl where <pn, dl> = <4740, l> A relation oblect 1s deleted when all references to it are deleted, 
either by tuple removal or asslgnmg the col- umn the null value  3.3 Relation References The relanon 
name alone 1s sufficient to reference static relations, Just as m SQL To reference a specific dy- namic 
relation mstance, it must be quahfled with the relation object reference found m an access column This 
1s done with the help of the usmg clause For m- stance, to retrteve the second mstance of the pms table 
(figure 3) one would enter, select * from pins using (select pins from cntl where <pn, dl> = <4740, 2>) 
where pir# >= 3 The mner query must select a table of the same type it qualifies If an mner query selects 
no access attnbute then no operation 1s performed on the table The Tacoma data model specifies that when 
more than one relation ObJect 1s retneved by the mner query the ob- Jects are concatenated mto a smgle 
table 3.4 Revision Relation Creation Revision relation mstances are created m the same way as revlslon 
instances, with the create keyword The mltml version number 1 1s asslgned new revlslon rela-tlons A set 
of bmlt-m function calls operate on revl- slon relatia m references to create further versions, or re- 
veal theu :internal revision number Usually, the mter- nal revisioi&#38; llylllVI *l-m% The schema would 
-1s ummportant define an external rev=lon number stored m a control -c ..a,,r.f..-, A.. -^.*.^.^- table 
as the means 01 XWWYM~ UIG IGVMW ansert Into revcntl select pn, dl+l, hlst, nextrevtpins) from revcntl 
where <pn, dl> = <1048,2>, The statement will msert the same revision relational oblect reference. with 
a new revlslon number, mto the r&#38;cn t 1 table Other functions are defined to find the current revision 
of any relational object reference. set the revision to a specific number or find the hghest re-vision 
defined for that relational ObJect Queues are modified by Tacoma to select only those tuples available 
at that level To mcrease retrieval per- formance of queries mvolvmg no other keyed colum.ns. mdexes may 
be defined on the @revIn and @revout columns Refemng back to figure 5. suppose we wish to find all the 
m connection points of part 1048 at design level (revlslon) 2 The predicates added by Tacoma are 111 
ltahcs Note the use of regular expressions m Tacoma, as demanded by our Umx users select cp#, name, length 
using (select cps from where pn = 1048 and dl re= from cps vcntl 2) where name -= ' In *' and (@revln 
<-thlsrev() and Brevout > thlsrev()) The t h 1 s rev function returns the revision currently as-sociated 
with the relation obJect reference usmg an allrevs function on the mner cps reference selection would 
negate the effect of the added predicates In thlS case, programs usually select the @revin and @revout 
columns to deternune their own appllcatlon-specific re-vlslon processing 3.5 Environments To ease the 
burden of navlgatlon though the design and revlslon luerarchy. Tacoma has added a current dlrec-tory 
concept An apphcatlon can build up an erzvl- ronment contammg relational object references to any number 
of table types environment select cps from revcntl where <pn, dl> = ~1048, 2> III the above example, 
any further reference to the c p a table (that Isn t qualrfred with an overrrdmg u a 1 ng clause) would 
use the relatron objects selected durmg the envrronment statement The relation object references are 
stored m aprrvare table (a temporary table spannmg transactrons, but not sessrons, whrch 1s user specrfrc) 
environs 3.6 Application Support Most of the access to a Tacoma DA database 1s through C-language apphcatron 
programs Addmonal support beyond what one would expect to find m SQL host lan- guage support mcludes 
special lmk list and array burld- mg primitives Relation-at-a-time operatrons are stressed 111 thus framework 
fill Into 'J(arr (num%d, nam%s, len%d)) [*I select cpt, name, length from cps, The f 111 statement wrll 
load the memory-resident array arr (wlthfields num,nam and 1en)wlt.h the contents of the current cps 
revrsron The simple Tacoma precom- prier reqmres that hmta on field data types (e g , %d) be grven m 
the statement Remember that DA programs prrmarrly transfer large amounts of data between memory resident 
data structures and drsk resident tables The f 111 statement 1s Ideal for thrs type of access The apply 
statement transfers data m the opposite dr- rechon from the f 111 An application specrfies the key column(s) 
of the table and array or lmked lrst of structures The structure 1s assumed to contam an addr- ttonal 
field act ion mdrcatmg the drsposrtron (msert, update, delete or no actron) of the structure element 
m the table apply v(arr (num%d, nam%d, len%d)) [*I to cps(cp#, name, length) key cp#, These pnmrtrves 
allow apphcatron desrgners to, con- srder dynamrc table mstances as ObJects They allow them to easily 
transfer the object from the database to memory and back Actmg upon the structure the ObJect 111 the 
most convement way (erther wrth C statements or SQL)  4 Implementation 4.1 General The Tacoma DBMS 
mcorporates many of the concepts developed for relatronal systems over the past twenty years B+ trees 
are used as Tacoma s prrme mdexmg mechanism, querres are precompiled, etc Thrs section drscusses deviances 
from standard imple- mentations of general purpose relational systems used m Tacoma  4.2 Locking and 
Transactions Avarlabrhty of data 1s an rmportant quality of systems which support long runnmg transactrons 
Speed analy- SIS or logrc srmulatron programs may run hours and, durmg that tune, need to see a consrstent 
vrew of the database Consistent to themselves, not necessarrly globally consistent across all transactrons 
Because a great number of table mstances are read dur- mg the transactron, transactrons cannot block 
on read locks of design tables they come m contact with In addrtron, another user may wash to make a 
new revrsron of one of those tables Even d rt 1s currently bemg read The wnter cannot block untrl the 
read transactron completes If Tacoma employed the usual transactron locking con-trol of most DBMSs rt 
would be rmpossrble to satrsfy these confhctmg requrrements Instead, Tacoma uses a form of shadow buffermg 
trans- actron management to allow multrple copies of a table to exist at the same time Therefore, a reader 
and a writer of a smgle table can coexrst without lock out The vrew of a table by the reader 1s guaranteed 
to be consistent (non-changmg) durmg the transactron The wnter of the same table mstance sees a different 
vrew of the table, with its changes appbed Even rf the wrrter commrts before the reader, the reader wrll 
continue to see the view before the update of the table A new reader, however, will see the newly commttted 
versron of the table Fig 7 Transactlon time lmes indicate how shadow buff ermg mamtarns dlff erent views 
of the same Instance In figure 7, reader 1 will see view 1 of the table m- stance The wnter ~111 see 
the same view mltmlly, but any changes to the table are unseen by reader 1 When the wnter commrts, any 
new readers will see the new view 2 of the data Vtew 1 of the table 1s discarded once reader 1 comnuts 
A new wrrter (2) would block until the first wrrter commrts. then would begm work- mg on new view of 
the table creatmg a thrrd view At one pomt m thts example (near the completton of reader 1) there are 
three views of the table active Note that these views are hidden from the user and are independent of 
revision relations, which 1s an extemal- Ized, permanent verslomng mechanism A disadvantage of thus 
method of lockmg 1s that the granulanty IS IunIted to the table mstance The de- creased overhead from 
the llmlted amount of lockmg and deadlock detection does increase performance Such a lockmg protocol 
would be useless for control or system (Internal) tables, however For example, d two dlstmct applications 
wished to create new instances of different tables and store their relational object refer- ences m a 
common control table. the second transac- tion would block until the first completed, even if they were 
workmg on different part numbers That 1s why Tacoma has a separate lockmg strategy for these types of 
tables This protocol 1s a record-level locking more commonly found m other systems It obeys the write-blocks-on-read 
philosophy found there To define a table of this type, one would specify the control keywordon the create 
statement  4.3 Server Layout Because a shadow buffermg mechanism 1s used mstead of before and after 
usage Joumalmg, there 1s mmunal data transmlsslon between server and user space Data table I/O can be 
performed directly from the user s server, ellmmatmg I/O server bottlenecks Control table I/O and Joumalmg 
1s handled by a central sener The result 1s that only the lock server has a slgmficant amount of mter-process 
commumcatlon overhead  4.4 Buffer Management Tacoma buffer management 1s mtegrated with the UT S pagmg 
system Buffers are allocated m vlrmal storage Data buffers are not shared m a common pool, but are divided 
between users However, the amount of virtual buffer space avalable IS determined by the percentage of 
buffers allocated by UTS to real storage at any one time The buffermg algorithm allows space to be adjusted 
dy- namlcally. cognizant of other applications competmg for real memory on the system On the other hand, 
durmg penods of relative system mactivity, a transac- tlon can acqmre 200 MB of real memory buffer space. 
If needed ms mechamsm 1s sufficient for cachmg most complex objects referenced by an application durmg 
a transac- bon Small oblects are completely cached Large ob- jects are cached on a page basis 4.5 Table 
Management Dynamic table mstances are managed as separate ob- Jects The system catalogs for table and 
n-dex m-formation contam typical history and usage mforma- tion But physical object mformation 1s contamed 
m a separate table mstance A slmphfied defmltlon of two of these system tables 1s below Tables is a static 
table, one t III s t s table exists for each dynamic table (as referenced by the tlnsts column WAWI tables) 
tables(tablename, deflnedate, deflneuser, , tlnsts) tlnsts (aa, references, credate, creuser, moddate, 
moduser, , phys-placement-Info) Relational object references are unique (wlthm a table type) four byte 
mstance (and possibly. revlslon) num-ber Ths 1s referred to as aa m the above table defml- tlon The one 
level of mdlrectlon imposed by this scheme allows table mstances to be moved by database utlhtles without 
reqmrmg modlflcation to relatlonal ob-ject references A definition of a new table causes the msertlon 
of a new tables tuple and anlhstance of tlnsts tobecre-ated Droppmg a table causes the reverse to occur 
The creafion of a new mstance will cause a tuple to be m- serted m the correspondmg t 1 n s t s mstance 
The r e f -e ren ce s column contams the number of relahonal ob- Ject references to that particular mstance 
throughout the database It 1s mamtamed every tune a relational object reference 1s assigned or mo&#38;fied 
(by overwntmg it with another or the null value) When the reference count drops to zero, the table mstance 
1s removed and the t 1 n s t s tuple removed  5 Conclusion Tacoma effectively manages Amdahl s diverse 
design automation design files The current production databases hold approxunately 200 relation object 
types. Instanuatlons of those types number m the tens of thousands Eventually, the databases ~111 grow 
to over 40 GB Tacoma has demonstrated that to build an engmeermg database management system one should 
start with sound fundamentals, namely, the relational data model and a standard mterfacmg language SQL 
Extensions to the language and data model can then bndge the gap between the commercial environment (for 
which these systems were ongmally mtended) and the engmeermg world References <RefA>[II <SinRef><author>Bapa Rao. K V </author><title>An 
Object-Oriented Framework for Modellmg Design Data Znt l Workshop on Object-Orrented Database Systems</title>, 
<date>1986 </date>(ISBN <isbn>o-8186-0734-3</isbn>)</SinRef> PI <SinRef><author>Hayme, M N</author> <title>The Relational/Network Hybnd Data Model </title><booktitle>Proc 18th Design Automatron 
Conf</booktitle>, <date>1981</date>, pp , <pages>646-652 </pages></SinRef>[31 <SinRef><author>Hayme. M N</author> <title>The Relational Data Model for Design Automanon Databases </title><booktitle>Proc 
20th De- stgn Automatton Conf</booktitle>, <date>1983</date>, pp <pages>559-603 </pages></SinRef>[41 <SinRef><author>Hayme, M N </author>and <author>K W Gohl </author><title>Revulon Rela-tions IEEE 
Techrucal Commtttee on Database Engrneerrng</title><volume> Vol 7, No 2. </volume><date>June 1984 </date></SinRef>151 <SinRef><author>Katz, R H, </author><author>E Change</author>,<author> R Bhateja</author>, 
<title>Version Modelmg Concepts for Computer-Alded Design Databases ACM SIGMOD Conf on Manage-ment of Data</title>, 
<date>1986 </date>(<journal>SIGMOD Record </journal><volume>Vol 15. No 2</volume>), pp<pages> 379-386</pages></SinRef> 161 <SinRef><author>Ketabch, IU </author><title>A Object-&#38;rented Data Models and Management 
of CAD Databases u</title> Int <booktitle>l Workshop on ObJect-Ortented Databare Systems</booktitle>, <date>1986 </date>(ISBN <isbn>o-8186-0734-3</isbn>) </SinRef>171 
<SinRef><author>Lone, R A, </author><author>W Plouffe </author><title>Complex GbJects and their use m Design TransactIona ACM SIG-MOD Conf on Management 
of Data</title>, <date>1983 </date>(<journal>SIGMOD Record</journal> <volume>Vol 13, No 4</volume>) pp <pages>115-122 </pages></SinRef>181 <SinRef><author>Sidle, T W </author><title>Weaknesses of Commercml Data Base 
Management Systems m Engmeermg Ap- plications </title><booktitle>Proc 17th Desrgn Automatron Conf</booktitle>, <date>1980 </date>pp <pages>57-61 </pages></SinRef>191 <SinRef><author>Stonebraker. 
M </author>, <author>J Anton</author>, <author>E Hanson</author>,<title> Extendmg A Database System with Procedures</title>, <journal>ACM Transacttons on Database Systems</journal>, 
<volume>Vol 12. No 3</volume>, <date>Sept 1987</date></SinRef></RefA>  
			
