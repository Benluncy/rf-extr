
 An Implementation-Independent Approach to Teaching Recursion Gary Ford Computer Science Department 
University of Colorado at Colorado Springs Colorado Springs, Colorado 80933-7150 Abstract The principle 
of abstraction, of separating a concept from a particular implementation of that concept, is gaining 
increasingly widespread use in programming and problem solving, and in teaching these subjects. A method 
of teaching the abstract concept of recursion, independent of its implementation, is presented. Introduction 
 Most of the advances in programming languages over the last thirty years can be classified as advances 
in abstraction, meaning ways of expressing concepts in a manner independent of the actual machine ilaplementation 
of that concept. For example, control abstractions such as "if" statements and loops allow the specification 
of the flow of control without resorting to machine addresses and conditional or unconditional transfers. 
Procedural abstractions allow the specification of complex procedures by a single name (subroutines, 
procedures, functions). Data abstractions, such as provided by Modula-2 modules and Ada packages, allow 
specification of very high level data concepts without concern for the machine level representation of 
that data. Hany persons consider abstraction as the single most powerful intellectual tool for dealing 
with complexity. Its ubiquity in programming language development supports this thesis. However, there 
is one area of beginning computer science education where the power of this tool, specifically the separation 
of the concept from any particular implementation of the concept, Permission to copy without fee all 
or part of this material is granted provided that the copies are not made or distributed for direct commercial 
advantage, the ACM copyright notice and the title of the publication and its date appear, and notice 
is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, 
or to republish, requires a fee and/or specific permission. &#38;#169; 1984 ACM-0-89791-126-1/84/002/0213 
$00.75 is rarely used: teaching recursion. Most textbooks, and probably most instructors, still feel 
compelled to try to explain recursion by resorting to detailed discussions of activation records, stack 
frames, and procedure linkage. On the other hand, they do not feel similarly compelled to use such low 
level explanations when describing one "if" statement inside another, or one loop inside another. This 
fact indicates that in the minds of many, these common control structures are indivisible entities, any 
 number of which can be used whenever needed, while procedure invocations are not. To a student who 
has never studied computer organization or assembly language, machine level explanations of procedure 
linkage are marginally understandable at best. A better explanation needs to be based on implementation-independent 
concepts. Such an explanation is described below. Correctness of Recursive Algorithms In [I] it was 
demonstrated that recursion is a control structure, and a generalization of iteration. It was also shown 
that implementing recursion via procedure invocations is an implementation convenience, not an inherent 
requirement of recursion. In fact, some languages have been developed with a "recur" statement that is 
independent of the concept of procedure. That paper also argued that the motivation for recursion is 
found at a very high level of problem analysis. It is the purpose of this paper to argue that the demonstration 
of the correctness of recursive solutions also belongs at the very highest levels. Specifically, it will 
be shown that the correctness of a recursive algorithm can be shown without appealing to implementation 
details. Two fundamental concepts are needed to develop an implementation-independent explanation of 
recursion. The first is procedural abstraction. Students are 213 taught to think of procedure invocations 
as indivisible operations, or in other words, as new primitive statements in the programming language. 
Once such a new statement is defined, it may be used just like any other statement in the language. Procedures 
are designed to solve all instances of a particular problem, and whenever an instance of the problem 
occurs, that new statement (the procedure invocation statement) may be used to solve it. Notice that 
the fact that only one copy of the code for a procedure normally exists, and all invocations of the procedure 
use that same copy of the code, is just an implementation convenience. This fact need not be known by 
the programmer in a high level language; all that needs to be known is that the procedure invocation 
statement solves an instance of a problem. The second important concept is the principle of matilematical 
induction. Unfortunately, in many computer science curricula, a discrete mathematics course that teaches 
this topic comes much too late to be of use to beginning students. This problem is finally receiving 
some attention, as evidenced by the Sloan Foundation grants given recently to six universities to develop 
freshman level discrete mathematics courses for both mathematics majors and computer science majors. 
Since so many concepts in computer science have their foundation in discrete mathematics, rather than 
continuous mathematics (calculus), moving this math to the beginning of the curriculum will allow an 
increase in the level of the science within computer science. In a curriculum in which mathematical 
induction is not already known to computer science students, it will need to be taught. Normally, thirty 
to sixty minutes is adequate to introduce the topic and illustrate it with algebraic examples. First, 
it is suggested that the concept of rule of inference be introduced. Second, the principle of mathematical 
induction is defined, including both the strong and weak principles. This principle is presented as a 
rule of inference, just like modus ponens. It is important that the students understand that these rules 
of inference are neither axioms nor theorems, but more basic entities that are foundations of our system 
of mathematical logic. Third, some simple applications are presented; students usually respond well to 
algebraic examples such as proving the formula for the sum of the first n positive integers is n(n+1)/2. 
 Instructors needing to review these concepts are directed to [3] for a deep discussion of the foundations 
of mathematics, including mathematical induction, and to [I] for a very readable discussion with numerous 
examples suitable for classroom presentation. Once the students are comfortable with the concepts of 
procedural abstraction and mathematical induction, it is possible to demonstrate the correctness of recursive 
algorithms without resorting to any implementation details of any programming language. The following 
is an example of such a demonstration, using two algorithms that together implement a recursive selection 
sort. algorithm: find largest purpose: find the position of the largest element in an array of integers 
 parameters: array (input mode) length (input mode) position (output mode) begin if length > I then 
find largest ( array, length-l, position ) if array[ length ] > array[ position ] then position <--length 
else position <--I end algorithm: selection sort purpose: sort an array of integers into ascending 
order parameters: array (input/output mode) length (input mode) begin if length > 1 then find largest 
( array, length, position ) interchange array[ position ] and array[ length ] selection sort ( array, 
length-1 ) end To demonstrate the correctness of the first algorithm, it must be shown that (I) the 
algorithm is correct for arrays of length I, and (2) if the algorit~n is correct for arrays of length 
n-l, then it is also correct for arrays of length n (where n > I). The first of these cases can be argued 
easily, because for an array of length I, the only possible position of the largest element is position 
I, which is what the algorithm returns as its answer. For the second case, it is argued that the algoritha 
first finds the position of the largest element among the first length-1 elements, using an 214 algorithm 
known to be correct (by induction hypothesis). The element at this position is then compared to the last 
element (at position length), and the algorithm returns the position of the larger. Because the greater 
than relation is transitive, this last comparison is guaranteed to locate the largest element in the 
entire array, as required. Thus the algorithm is correct for arrays Of all sizes. To demonstrate the 
correctness of the second algorithm, it must be shown that (I) the algorithm is correct for arrays of 
length I, and (2) if the algorithm is correct for arrays of length n-l, then it is also correct for arrays 
of length n (where n > I). The first of these cases is established by noting that arrays of length I 
are already sorted, and thus by doing nothing to the array, this algorithm is correct. The second case 
is argued by first noticing that the algorithm uses a known correct algorithm to find the position of 
the largest element in the array, and then interchanges that element with the last. This guarantees that 
the largest element is now last in the array. Then the algorithm uses an algorithm known to be correct 
(by the induction hypothesis) to sort the rest of the array elements. Thus the algorithm is correct for 
arrays of all sizes. Arguing the correctness of algoritlams is quite different from proving the correctness 
of programs. At the freshman and sophomore level, however, the correctness of algorithms is perhaps more 
important. The examples presented above use the weak principle of mathematical induction. Many of the 
most important examples of recursive algorithms need the strong principle of mathematical induction, 
in which the induction hypothesis is that the algorithm is correct for all smaller problem sizes, not 
just the one immediately smaller size. Algorithms such as mergesort, quicksort, and tree traversals involve 
subproblems of a variety of sizes. It is for algorithms such as these that the importance of an induction 
argument can best be seen, since these algoritl%ms really demonstrate the power of recursion. Of course, 
the two examples presented above are not strong arguments for recursion, since there exist better nonrecursive 
algorithms to solve the same problems. As an example of the use of the strong principle of mathematical 
induction, consider the common preorder traversal algorithm for binary trees. We assume a visit procedure 
already exists, which does appropriate processing at a node of the tree. algorithm: preorder traversal 
 purpose: traverse a binary tree in preorder parameters: root (input mode) begin if root is not null 
then visit ( root ) preorder traversal ( left subtree of root ) preorder traversal ( right subtree of 
root ) end To demonstrate the correctness of this algorithm, it must be shown that (I) the algorit~hm 
is correct for the smallest possible tree, a tree with zero nodes, and (2) if the algorithm is correct 
for all trees with 0, I, 2, ..., n-1 nodes, then it is also true for trees with n nodes (where n > 0). 
The first case is argued by noticing that if the tree has zero nodes, then the root must be null, and 
the algorithm does no visiting in this case. In the second case, it is first pointed out that the root 
is not null when there are more than zero nodes, so the "then" clause is executed, and the root is visited 
first, as required by a preorder traversal. The sizes of the left and right subtrees are not known, but 
since neither includes the root, their sizes must be at most one less that the whole tree, and at least 
zero nodes. The induction hypothesis guarantees that the algorit~n works in all these cases, so the nodes 
of the left subtree are visited, then the nodes of the right subtree, as required by the definition of 
preorder. Thus the strong principle of mathematical induction is necessary to establish the correctness 
of this algorithm. Summary As computer science continues to develop as a science, it will become increasingly 
easier to explain computer science concepts in more abstract ways, and to build those concepts on the 
framework of mathematics. The teaching of recursion is one place where a mathematical concept (mathematical 
induction) can be used effectively, allowing a complete separation of the concept of recursion and its 
implementation in a programming language. 215 References <RefA>[I] <SinRef><author>Courant, R. </author><title>Mathematics</title>?, <publisher>Press</publisher>, <date>1941</date>. 
</SinRef> [2] <SinRef><author>Ford, G., </author><title>A Recursion</title>, <volume>14(2), </volume><date>June</date></SinRef>, [3] <SinRef><author>Wilder, R., </author><author>Foundations Wiley</author>, 1952. and <author>If. Robbins</author>, 
<title>What is Oxford University Framework for Teaching </title><journal>ACrl SIGCSE Bulletin</journal>, <date>1982</date>, pp. <pages>32-39</pages>. Introduction 
to the of ~lathematics-~ J0hn </SinRef></RefA>
			
