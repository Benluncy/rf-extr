
 A Parser for a Small Ada-like Language -- A Student Software Engineering Project Joylyn Reed Computer 
Science Department Ohio University Athens, OH 45701-2979 This paper describes an advanced undergraduate 
course taught at Ohio University which provided students with a meaningful introduction to Ada even 
though they had no access to an Ada compiler. The course project was to design and implement a parser 
for an incomplete Ada language. This project effectively united the two course objectives: (i) to understand 
the relation of language design and software design and development, and (2) to gain some degree of competence 
in Ada. Appendices contain material which would be of value to others wishing to teach a similar course. 
Included are useful test programs and a set of syntax diagrams for our Project Ada Languag$. These diagrams, 
suitable for an LL(1) parser, define a language of approprlate size to base a single-term project. This 
language is sufficiently complete to capture the essence of the packaging constructs of sequential Ada. 
 i. Introduction This project was to design and Ada may become one of the predominent implement a parser 
for an incomplete programming languages of the near future. subset of Ada. (It was felt that since a 
At the very least, Ada and its array of parser project for complete Ada is not software development tools 
will have feasible for a single-term course, a parser for a subset of Ada, otherwise lasting influence 
on evolving software development methodologies, languages, and prohibited, is justifiable as an academic 
support tools. For this reason many exercise.) We feel that the course was, universities want to familiarize 
their in general, successful. computer science students with Ada. A problem may be, however, that they 
do not This paper provides general a description of the course. We include a have the facilities for 
developing Ada programs. In this paper we describe how set of syntax diagrams suitable for use in we 
were able to provide our students with the construction of an LL(1) parser. a meaningful introduction 
to Ada, even These diagrams define a language of an though they did not have access to an Ada appropriate 
size to base a parser for a compiler. We include material which would student project. This language, 
though be of value to others wishing to take the relatively small, is rich enough to capture the essence 
of sequential Ada. same approach. Appendices I . and II . contain test During the winter term of 1984, 
the programs for the parser. Computer Science Department at Ohio University offered an experimental 
course 2. Ada as the Course Focus in software design and development. The focus of the course was Ada. 
The two Ada was chosen as the focus for a course objectives were: to understand the course in software 
design and development relation between language design and for a variety of reasons. Primarily, software 
design and development, and (2) to gain some degree of competence in Ada. Ada represents state-of-the-art 
 A course project effectively united these - language design based on soft- objectives. ware engineering 
principles for the development and maintenance Permission to copy without fee all or part of this material 
is granted of large software projects. provided that the copies are not made or distributed for direct 
commercial advantage, the ACM copyright notice and the title of the -The course project of designing 
 publication and its date appear, and notice is given that copying is by and implementing a parser for 
 permission of the Association for Computing Machinery. To copy Ada provided the means for the otherwise, 
or to republish, requires a fee and/or specific permission. students to become "versant" in Ada, even 
though our university did not have an Ada compiler. &#38;#169; 1985 ACM 0-89791-152-0/85/003/0241 $00.75 
Additionally, the course project, for which the students were divided into teams of three, gave the students 
real experience with a large software development project. The specific goals underlying Ada's design 
which were emphasized were the following: (i) to support a clear distinction between specification and 
implementation,  (2) to provide mechanisms for abstraction,  (3) to support modularity, and  (4) to 
facilitate to some degree the use of previously developed software components, and the concurrent but 
separate development of interrelated components.  Those students completing the project had to master 
Ada's declaration structure. The student' s understanding of the differences between a package specification 
and body, as well as between a procedure header and body gained him or her an appreciation of points 
(i), (2), and (3) above. The necessary mastering of Ada's intricate scope rules contributed to the student's 
understanding of a program structure enabling separate compilation of subcomponents. Although the Ada 
subset intended for the parser project did not include generics, we discussed their relevance to software 
reuse. The parser project itself made the student aware of the syntactical requirements for a generic 
construct. The concept of a support environment for software development was unknown to the majority 
of the class, most of whom were undergraduates. Thus, our discussion of an envisioned Ada environment 
including such tools as Ada-based specification and design languages, syntax-directed editors, and debugging 
aids widened their perception of software development. The parser project gave the student a substantive 
introduction to Ada. Of course, the immediate problem for the student was to master the syntax of our 
incomplete Ada language. The serious students naturally became interested in the corresponding semantics. 
We used the Ada text [3] as a reference. Additionally, the project gave the students experience with 
a software development project requiring team co-operation. Even though the subset of Ada chosen for 
the object of the parser was relatively small, the design and implementation of the parser was too large 
an undertaking for an individual. Thus the students became aware of the importance to group intracommunication 
of lucid presentation of the work product at all levels of development. They gained an appreciation of 
specification techniques based on top-down refinement design procedures. 3. Course Requirements The 
course requirements centered primarily around the parser project. Additionally, homework assignments 
and an exam counted for twenty percent of the student grade. The purpose of the homework assignments 
was to acquaint the student in general with Ada and in particular with the incomplete Ada language which 
was to be the object of the parser. The assignments consisted of "hand-parses" of simple Ada programs 
and conversion of a BNF definition of the input language for the parser into syntax diagrams necessary 
for the construction of the parser. The exam was a routine midterm exam covering class discussions. 
For the project, the class was divided into teams of three students each, though some especially hard-working 
students chose to be in groups of two. The project was divided into three parts. The first required document 
was a non-procedural, high-level, structural design of the major components of the parser, which included 
the specification of interfaces. The second required document was a procedural, "PDL" description of 
the parser components which could be step-wise refined into the source code, Pascal. The final required 
document was the source code for the parser, complete with accompanying documentation. Additionally, 
students were required to submit peer evaluations. Roughly, of fifteen groups totaling forty-two students 
, seven groups ultimately produced working final projects. Four groups produced projects which worked 
to some degree. The remaining groups managed only the lexical analysis component of the parser. 4. Problems 
Encountered The only concept of sequential Ada which proved difficult for the students to understand 
fully was the role of packages. While desired separation of a package specification and implementation 
to allow separate compilation was readily understood and appreciated by our students, the notion of data 
encapsulation was difficult to understand for these students whose "first" language was Pascal or PL/i. 
A natural question from our students upon introduction to data encapsulation with Ada was "where does 
this encapsulated data reside?" The programs given in Appendix I. were used in [1 ] to illustrate the 
concepts of visibility, restricted access and interfaces for a block structured language. They additionally 
illustrate that these notions are separate from the question of where data objects reside. These Ada 
programs are valid in our incomplete Ada language. Our most serious problem was that some students deferred 
work on the project until so late in the term that even though they had the desire, they did not have 
the time to produce meritorious projects. In retrospect, our grading policy did not sufficiently discourage 
this sort of effort. For the determination of the course grade, the final executable source version significantly 
outweighed the previous architecture and detailed design documents. Thus, some students used a strategy 
of paying little attention to all but the last source code document. Sadly, they became aware too late 
of the validity of one of the principles we were trying to teach --that well-formulated design documents 
facilitate coding and d ebugg ing. Thus, we suggest that the documents be weighted 30%, 30% and 40% 
for the architecture, detailed design, and the executable version, respectively. We note also that 
for such a large project, an "all or nothing" grading policy is not appropriate. 5. The Ada Input 
Language for the Parser The input language for the parser had to be small enough to base a parser for 
a feasible term project, and yet rich enough to render the exercise meaningful. Our approach was to omit 
as much as possible from Ada without obscuring the essence of the language. Since we were not concerned 
with concurrent programming, we omitted all tasking constructs. To reduce the tedium of parser writing, 
we omitted nonessential constructs such as aggregates, subtypes, etc. To allow for a single pass compiler, 
we required "declaration before use" for identifiers. Otherwise, we retained Ada's scope rules. To simplify 
the table look-up routine for an identifier, we required the complete dot notation name for an identifier 
declared in an external block, i.e., we disallowed the abbreviated names made possible by the USE statement. 
 (In retrospect, disallowing the USE statement did not significantly simplify symbol table routines.) 
 We retained the notion of a computation unit consisting of a package specification, package body, or 
a procedure (or function) header and body. We did not allow the SEPARATE facility because of the bookkeeping 
such separate parsing capability would have required. Likewise, the WITH construct with its implied project 
library was disallowed. Appendix III. contains the syntax diagrams for our project Ada language. These 
diagrams are suitable for the construction of an LL(1) parser. They were adapted from those found in 
[2]. Although these diagrams represent a relatively small subset of Ada, the defined language is not 
small. A typical parser for the project consisted of approximately 3000 lines of Pascal code. Thus it 
is fair to categorize it as one of the more ambitious of our class projects. Appendices I. and If. contain 
sample output listings of test programs submitted to the student parsers. 6. Conclusion We feel that 
the described course did accomplish its objective of illustrating software engineering principles. We 
plan to offer the same course in the future, with some modifications suggested by the first experience. 
Chief among these are: (I) to require the students to make oral, formal presentations to accompany their 
design documents, and  (2) to require an Ada-based PDL document (possibly as a replacement for the Pascal- 
based PDL).  In summary, the course project of a parser for our carefully chosen subset of Ada provided 
the students with real experience with a large software system and, together with class discussions, 
served as a substantive introduction to software development with Ada. Appendix I. Perhaps the best 
example (taken from [i]) illustrating the semanti6s of the package construct as well as the notions of 
abstract data types, data encapsulation and separation of specification and implementation is given 
below. The several presentations (seen by this author) of Ada's approach to these notions do not specifically 
indicate that where data objects reside is an independent concern from data encapsulation. The following 
three programs, valid in our project language, illustrate these separate concerns. It consists of three 
different Ada versions of an array-based stack. In version I, the stack type is exported; thus each served 
module contains their own data objects of type stack, as well as access to the objects' internal structures. 
In version III, the stack type is also exported, but access to the internal structure is prohibited by 
use of the PRIVATE mechanism. In a version II, not the stack type, but only the stack operations are 
exported; thus, the stack data objects "reside" not in the served modules but rather in the server module. 
 I. package STACK is --specification procedure PUSH(X: INTEGER); function POP return INTEGER; end STACK; 
 package body STACK is - -body MAX: constant:= 100; S: array (1..MAX) of INTEGER; TOP: INTEGER; procedure 
PUSH(X: INTEGER) is begin TOP:=TOP+i; S(TOP):=X; end PUSH; function POP return INTEGER is begin TOP:=TOP-I; 
return S(TOP+i) ; end POP; begin --initialisation TOP:=0; end STACK; If. package STACKS is MAX: constant:= 
I00; type STACK is record S: ~rray (1..MAX) of INTEGER; TOP: INTEGER:=0; end record; procedure PUSH(S: 
in out STACK; X in INTEGER); procedure POP(S: in out STACK; X out INTEGER); end STACKS; --The package 
body is omitted. III. package STACKS is type STACK is private; procedure PUSH(S: in out STACK; X: in 
INTEGER); procedure POP(S: in out STACK; X: out INTEGER); function EQUAL(S, T: STACK) return BOOLEAN: 
private MAX: constant:= I00; type INTEGER VECTOR is array (1..MAX) of INTEGER; type STACK is record 
 S: INTEGER VECTOR; TOP: INTEGER:= O; end record; end; Appendix II. Sample Output Listings Produced 
by Student Project Parsers. Z -- PACKAGE LEV[ IS 3 -- PACKAGE LEVZ IS 4 -- PACKAGE LEV3 IS 5 -- X : 
INIEGER; 6 -- ENO LEV3; 7 -- END LEVZ; 8 -- END LEVI; LO -- PROCEOURE TEST [S LI -- ~EGIN LZ -- LEVI.LEV2.LEV3,X 
:= 4; L3 -- END TEST; Z --PACKAGE TEST IS 3--TYPE SEC~<ET IS PRIVATE; 4 --PRIVATE 5--TYPE SECRET IS 
ARRAY(L..[O) [JF INTEGER; 6 --END TEST; 8 --PROCEDURE WRUNG IS 9 --X:TEST.SECRET; I0 --BEGIN IL --~(~) 
:= 4; IiZZ I2 --END wRONG; error [22 --[lle~aI decomposit, lun ~>f $'RIVATE ty|>~; ?2 -- CHESSBOARO°REMOVEQUEEN(J~I); 
73 -- end if; 1~ -- else 75 -- . SUCCESS := IKdE; T6 -- end if; ?T -- end if; 78 -- end loop; 79 -- end 
PLACEQUEE~S; BO -- 81 °- begin -- BODY OF RAIN PROCEDURE EIGHTQUE~NS 83 -- 8~ -- PLACEQUEENS(ltSUCEESSFUL); 
85 -- if SUCCESSFUL then 86 -- CHESS~OARO° PRI~TPOSITIo~S; 81 -- er~d if; 88 -- end EIGHTQUEENS; 2 --PACKAGE 
IO IS 3 --FUNCTION EOF RETURN BOOLEAN; 4 --PROCEDURE READ (X: OUT INTEGER); 5 --PROCEDURE WRITE (X: IN 
INTEGER); 6 --END IO; O --PROCEDURE SELECTION SORT IS MAX: CO:~STANT INTEGER:= tOO0; IO --TYPE LIST 
IS ARRAY(I..MAX) OF INTEGER; II --A: LIST; L2 --COUNTtKtTEHPtXtPOS: INTEGER; I3 -- I~ --PROCEOURE CREATE 
LIST (A:OUT LIST; N:OUT INTEGER) IS I5 --X: INTEGER; I6 --BEGIN L7 --~:= O; I8 --WtllLE NOT IU.EOF() 
LOOP L9 --N:= N+L; 20 --IO.K~AO(X); ZL -- A(N|:= X; 22. --ENO LOOP; Z3 --END CREATE_LIST; Z4 -- 2~ 
-- PROCEDURE PRINT_LIST (A:IN LIST; N:INTEGER) IS Zb -- ~EGIN 27 --FOR I IN [..N LOOP 28 --ID.WRITE(A(1)); 
29 -- END LOOP; 30 --END PRINT LIST; 31 -- 32 --FUNETIO~ ~IN SEARCH (A:LISI;X:I~TEGER; ItJ:I~IEGER) 
RETURN INTEGER IS 33 --FOUND: BOOLEAN; 34 --HItLOtMID: INTE6ER; 35 --0EGIN 3b --HI:= J; LO:= I; FOUND:: 
FALSE; 37 --]HILE NOT FOUND AND HI >= LO LOOP 3d --MID:= (HI*LO)/Z; #9 -- IF X > A(~ID) IHEN 'tO --LO:= 
MID*I; 4[ --ELSEIF X < A(MID) THEN HI:= HID-I; 43 --ELSE 4~ --FOUND:= TRUE; END IF; 46 --END LOOP; h7 
--IF FOUNO ThEN ~8 o-RETURN H|D; ~9 --ELSE 50 --RETURN O; 51 --END IF; 5Z --END BIN SEARCH; 53 -° 5~ 
--BEGIN 55 --CREATE_LIST(A~COuNT); 56 --PRINT LIST(A,COUNT); 57 --FOR I IN L.,COUNT LOOP 5B --K:= I; 
59 --FOR J IN ;,,COUNT LOOP bO --IF A(K) <: A(J) THEN bI --K:= J; b~ --ENO IF; b~ --ENO LOOP; 66 --TEMP:= 
A(I); b5 --A(I):: A(K); 6b --A(K): = TEMP; bT --END LOOP; 68 --PRINT_LIST(A,COUNT); 09 --TO,READ{X); 
70 --POS:= BIN SEARCH(AtX~L~CGUNT) ; 71. --IO.WRITE(~OS'); 7Z --ENO SELECTION_SORT; 73 -- 2 --PACKAGE 
f~EST IS 3 --TYPE INTARRAY IS ARRAY|I.,IO) OF INTEGER; --X: INTEGER; 5 --PACKAGE LEVEL2 IS 6 --Y: INTEGER; 
7 --PROCEDURE NONSENSE; 8 --END LEVEL2; g --PROCEOURE SEtISE(X:{JUT INTARkAY ) ; TO --END NEST; It -- 
1.2 --PROCEDURE NEwPRC~C IS LJ --Y : INIEGER; L6 --YYY:NEST, INTARKAY; 1.5 --BEGIN 1.6 --NEST.LEVELZ.Y 
:= 3; 1.? --NE ST. SE;|SE ( YYY ) ; LB --Y := 6; L9 --NEST LEVL LZ,NU~4SENSc ; 2U --~JESI.X :: b; 21. 
--END NE~PRUC; Appendix III° Syntax Diagrams for the Project Language ---"~ _ k~ _~. ~ ~ _ ~.~-~- 
~.~ 0 C'I-EON .~.l ~ Q. > C~ 251 "i ii i c~:~:~-r~>r~~:~, ...~ t ~ > ..~C5 ~.___J ,~> REFERENCES 
 [13 Barnes, J.G.P., P ro@ramminq i n Ada, Second Edition, Addison- Wesley, 1982, 1984. [2] Boner, R., 
A. Kung, K. Ripken, R. K. Yates, M. Sommer, J. Winkler, "Ada Syntax Diagrams for Top-Down Analysis," 
ACM SIGPLAN, v. 16, n. 9, Sept. 1981. [3] Habermann, A. Nico and Dewayne E. Perry, Ada for Experienced 
Programmers, ~Addison-Wesley, 1983. The author wishes to acknowledge students, Danny Zerkel and George 
Erhart, for the example program listings and syntax diagrams, and to give special appreciation to graduate 
student, Charles Hayford, for his aid in organization and presentation of the course.  
			
