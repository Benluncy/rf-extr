
 A Hybrid Approach to Automatic Programming for the Object-Oriented Programming Paradigm  Nelishia Pillay 
School of Computer Science University of KwaZulu-Natal Pietermaritzburg Campus +27 33 2605644 pillayn32@ukzn.ac.za 
Caryl K. A. Chalmers School of Computer Science University of KwaZulu-Natal Pietermaritzburg Campus +27 
33 2605644 203505622@ukzn.ac.za  ABSTRACT This paper describes a first attempt at automatically inducing 
object-oriented programs. The system implemented for this purpose uses a rule-based expert system to 
firstly derive an object-oriented design (OOD) for the problem instance. Input to the system is a description 
of the entities in the given domain and their corresponding behaviors. The induced OOD is then input 
to a genetic programming (GP) system to automatically generate the programs representing the classes. 
Each class program is evolved in an internal representation language. In order to test the system a translator 
was developed to convert the evolved class programs to Java. The hybrid system was used to induce object-oriented 
programs typical of a first course on object-oriented programming (OOP). The paper presents a comparison 
of the evolved programs to that written by programmers. Categories and Subject Descriptors I.2. [Artificial 
Intelligence]: Automatic Programming General Terms Algorithms, Languages, Theory. Keywords Automatic 
programming, genetic programming, rule-based expert systems. 1. INTRODUCTION  Whereas previous studies 
in this field have investigated evolving class methods for abstract data types ([5] and [9]) and using 
the object-oriented programming paradigm to improve the scalability of GP ([1], [2], [3], [4], [10] and 
[11]), the study presented in this paper examines generating object-oriented designs and the corresponding 
class programs. This paper presents a hybrid approach, combining the use of a rule-based expert system 
and a genetic programming (GP) system, to automatically generate object-oriented programs. The input 
to the system is a problem specification describing each entity in the domain in terms of its characteristics 
and behavior. The rule-based expert system is used to generate an object-oriented design, specifying 
the classes, association and inheritance relationships among classes and abstract classes, for the problem 
instance. This design together with the problem specification forms input to the GP system which evolves 
the class programs for the problem instance. For testing purposes the generated programs are converted 
to Java. The system has been used to induce programs typical of a first course on object-oriented programming. 
The paper compares the quality of the programs generated to that of programs written by programmers. 
Note that in this study object-oriented programs refer to those programs combining the procedural and 
object-oriented programming paradigms such as those written in Java or C++, rather than pure object-oriented 
programs typical of the Smalltalk language. The following section provides an overview of genetic programming 
(GP) and previous studies using GP to evolve object-oriented programs. Section 3 describes the hybrid 
system implemented to generate object-oriented programs. Section 4 discusses the performance of the system 
on four object-oriented programming problems. Finally, section 5 summarizes the findings of this study 
and discusses future work. 2. GP AND OBJECT-ORIENTED PROGRAMMING  Genetic programming is a variation 
of genetic algorithms introduced by John Koza in which each potential problem solution is a program represented 
as a parse tree [8]. Like other evolutionary algorithms, GP is also based on Darwin s theory of evolution 
and hence involves creating an initial population which is iteratively refined until certain termination 
criteria are satisfied. Each refinement step, referred to as a generation, involves firstly evaluating 
the performance of the current population using a fitness function. Based on this evaluation, parents 
of the next generation are chosen using a selection method such as tournament selection or fitness proportionate 
selection. Genetic operators are applied to the chosen parents to create the next generation. Koza [8] 
describes a number of genetic operators that can be used for purposes of regeneration. Genetic operators 
used most commonly include crossover, mutation and reproduction. Research combining the concepts of object-oriented 
programming and GP, have developed in two directions. The first examines the use of the object-oriented 
paradigm as a means of improving the scalability of GP so as to enable it to deal with larger more complex 
problems. When Koza [8] first introduced the concept of GP the evolved programs were essentially S-expressions 
adhering to the functional programming paradigm. As this field progressed the programs generated took 
the form of parse trees implementing the procedural or imperative programming paradigm. Currently the 
effect of evolving object-oriented program solutions is being investigated. Work in this area was initiated 
by Abbott [1]. Abbott implemented an object-oriented GP (OOGP) system to generate solutions to the even-parity 
problem and programs to sum a list of numbers and to determine whether a given integer is odd or even. 
A number of studies followed this initial attempt. Lucas [10] has used OOGP to evolve two methods in 
the domain of evolutionary art. Suarez et al. [11] have applied OOGP to the Robocup domain to evolve 
methods for agent interaction. Agapitos et al. [2] have successfully induced recursive functions for 
the factorial, Fibonacci sequence, exponentiation, even-N-parity and the Nth-3 program, both sequentially 
and concurrently using OOPGP. In all of these studies the evolved programs were in Java and Java reflection 
was used to determine the properties of class instances at runtime. More recent studies include the application 
of OOGP by Agapitos et al. [3] to generate methods for statistical functions to determine the mean, variance 
and standard deviation of a list of numbers and the co-evolution of recursive sorting algorithms using 
OOGP[4]. Permission to make digital or hard copies of all or part of this work for personal or classroom 
use is granted without fee provided that copies are not made or distributed for profit or commercial 
advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, 
or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or 
a fee. SAICSIT 2007, 2 - 3 October 2007, Fish River Sun, Sunshine Coast, South Africa Copyright 2007 
ACM 978-1-59593-775-9/07/0010 $5.00 The second area of research examining a possibly symbiotic relationship 
between OOP and GP is the application of genetic programming for purposes of automatic programming. 
In this case genetic programming is used to induce object-oriented programs. Bruce [5] and Langdon [9] 
have used GP to evolve abstract data types (ADTs) for certain data structures. Bruce implemented a strongly-typed 
GP system to evolve the methods for the stack, queue and priority queue ADTs. A similar approach was 
taken by Langdon to generate methods for the stack, circular queue and list abstract data types. In this 
study the methods were coevolved. The evolved ADTs were used by the GP system to generate solutions to 
the Dyck language and reverse polish notation evaluation problems. In both these studies the class structures 
were built into the system implemented and not evolved. Since these studies in the latter nineties there 
have been no further attempts at evaluating GP as a means of automatic programming for the object-oriented 
programming paradigm. The study presented in this paper uses a combination of a rule-based expert system 
and GP to evolve object-oriented programs. This system differs from previous work in that instead of 
just evolving the methods of a class the system also identifies the different object-oriented aspects 
such as association and inheritance relationships and generates the entire class. 3. THE HYBRID SYSTEM 
  This section describes the hybrid system implemented to induce object-oriented programs. The system 
is comprised of two components, namely, a rule-based expert system and a GP system. The expert system 
is used to generate an object-oriented design from the problem specification, while the GP system is 
used to induce the methods for each class. Input to the system is a problem specification describing 
the application domain in terms of the entities that it is comprised of. Programs are generated in an 
internal representation language and can be translated into a specific object-oriented language. A language 
translator is needed for this purpose. In this study the programs are translated to Java. The overall 
process is depicted in Figure 1.         Figure 2 lists the problem specification for Problem 
1. Each entity is described in terms of its characteristics and its behaviour. For example, the characteristics 
of the entity CHEQUE are account number, balance and profile and the behaviours are deposit and withdrawal. 
The behaviour is specified as an action with its corresponding input and output values. In some cases 
constants maybe used to describe the particular application domain. The system implemented is typed, 
thus the type of each characteristic, input value and output value (i.e. action type) must be included 
in the problem specification. These can be one of the following types, namely, real, integer, boolean, 
string, character and output (i.e. values are output to the screen). 3.1 Rule-Based Expert System  
The rule-based expert system consists of if-then-else statements to identify the following: The different 
classes  Inheritance relationships, i.e. subclasses and superclasses.  Associations (also known as 
compositions).  Abstract classes  Abstract methods   Figure 3 lists the object-oriented design 
generated by the expert system for Problem 1. The OOD lists each of the classes and whether they are 
abstract or not. The attributes of each class and their corresponding types are specified. Figure 1. 
Overall process                      CUSTOMER name address phone id account string 
string integer integer account ACCOUNT accountnumber balance integer real CHEQUE accountnumber balance 
profile integer real character *Deposit* #Input amount Real 100 , 50 , 200 #Input balance Real 1000 , 
2300 , 400 #Output balance Real 1100 , 2350 , 600 *Withdrawal* #Input amount Real 100 , 50 , 200 #Input 
balance Real 1000 , 2300 , 400 #Output balance Real 900 , 2250 , 200 SAVINGS accountnumber balance interestrate 
integer real real *Deposit* #Input amount Real 100 , 50 , 200 #Input balance Real 1000 , 2300 , 400 #Output 
balance Real 1100 , 2350 , 600 *Withdrawal* #Input amount Real 100 , 50 , 200 #Input balance Real 1000 
, 2300 , 400 #Output balance Real 900 , 2250 , 200 LOAN accountnumber balance duration limit instalments 
integer real integer real real *Deposit* #Input amount Real 100 , 50 , 200 #Input balance Real 1000 
, 2300 , 400 #Output balance Real 900 , 2250 , 200 *Withdrawal* #Input amount Real 100 , 50 , 200 #Input 
balance Real 1000 , 2300 , 400 #Output balance Real 1100 , 2350 , 600 Figure 2. Problem specification 
for Problem 1 /*******************************************/ Name: customer Abstract: false Attributes: 
name address phone id account Attribute Types: string string integer integer account Associations: account 
/*******************************************/ /*******************************************/ Name: account 
Abstract: true Attributes: accountnumber balance Attribute Types: integer real Methods: deposit withdrawal 
Abstract: true true Subclasses: cheque savings loan /*******************************************/ /*******************************************/ 
Name: cheque Abstract: false Attributes: profile Attribute Types: character Methods: deposit withdrawal 
Abstract: false false Superclasses: account /*******************************************/ /*******************************************/ 
Name: savings Abstract: false Attributes: interestrate Attribute Types: real Methods: deposit withdrawal 
Abstract: false false Methods: deposit withdrawal Abstract: false false Superclasses: account /*******************************************/ 
/*******************************************/ Name: loan Abstract: false Attributes: duration limit instalments 
Attribute Types: integer real real Methods: deposit withdrawal Abstract: false false Superclasses: account 
/*******************************************/ Figure 3. OOD for Problem 1 Note that in the case of 
subclasses only the additional attributes are listed. The behavior of each class is specified as a method 
and the OOD states whether each method is abstract or not. The OOD is input to the GP system together 
with the problem specification in order to generate the methods for each class. 3.2 GP System  The 
GP system is used to evolve methods for each of the classes. Given the difficulties experienced in [4], 
[5] and [9] with the co-evolution of class methods, it was decided to evolve methods sequentially in 
this study. To allow for the use of functions by other methods in the same class, the methods already 
evolved at each stage are added to the function set when creating a new method for that class. Given 
the input to the method and its corresponding output, as well as a description of the application domain, 
the GP system induces an algorithm for the method. The GP system employs the generational control model 
[8]. The system firstly creates an initial population of potential solution programs by randomly choosing 
elements from the function and terminal sets. In this study the grow method is used for initial population 
generation [8]. This initial population is then iteratively refined by evaluation, selection and regeneration 
to obtain a solution. This process terminates once a solution is found or a preset number of iterations/generations 
has been performed. The size of the population remains fixed from one generation to the next. Each program 
is represented as a parse tree. An example is illustrated in Figure 4. Note that each internal node has 
an arity (i.e number of arguments) of at least one. These nodes are selected from the function set. All 
external nodes have an arity of zero and are selected from the terminal set. The GP system is strongly-typed 
in order to facilitate the translation of the evolved programs into a programming language. Thus, every 
terminal, function and function argument is of a specified type.    In variables of the problem and 
constant values listed for the method in the problem specification. For example, the terminal set for 
the withdrawal method in Figure 2 would be T = {balance, amount}. Algorithms are evolved in an internal 
representation language. The function set is a subset of this language. Elements of this language are 
listed in Table 1. Table 1. Internal representation language Arithmetic Operators + , -, *, / Arithmetic 
Logical Operators <, >, <=, >=, ==, != Conditional Operators if , switch Iterative Operators for, while 
  Arithmetic operators are of type real or integer and their arguments are also real or integer. The 
arguments of the arithmetic logical operators are real or integer and their output type is Boolean. The 
conditional operators and iterative operators have a generic type meaning that each instance of the operator 
in a program can be of a different type. The type of each generic operator instance is set during initial 
population generation. The if operator performs the function of a standard if then-else statement. The 
first argument of the switch operator represents the value being tested and can be of type integer or 
character. The next n arguments are options to match the first argument against. The number of options, 
n, tested by a particular instance of this operator is chosen randomly, where 3<= n <=7. Each option 
consists of a list of values combined by the comb operator. The arity of this operator is randomly chosen 
to be within a preset range. The GP system also randomly chooses whether a particular instance of the 
switch operator should have a default option. Hence, the arity of each switch operator will be n*2+1 
or n*2+2 (if a default option exists). The for operator takes two integer arguments and a third argument 
which can be of any type. Similarly, the while takes a first argument of type Boolean and a second argument 
of any type. In order to prevent infinite and time consuming iterations, a limit is set on the number 
of iterations per iterative operator instance. The evaluation process involves assessing the performance 
of each individual on the set of inputs and corresponding output values, called fitness cases, specified 
for the method in the problem specification. This process involves executing the program on each of the 
given fitness cases. The output produced by the program is compared to the output specified in the fitness 
case.  A fitness function is used to calculate a fitness measure for each program. If the output of 
the method is real, the fitness measure is the sum of the absolute value of the difference in the output 
of the program and output specified in the fitness case, for each fitness case. In the case of all other 
types of output, the fitness measure is the number of fitness cases for which the program produces the 
same output as that specified in the fitness case. These fitness measures are used by the tournament 
selection method to choose parents for the next generation. Tournament selection randomly chooses m elements 
of the population, referred to as a tournament, and returns the fittest element of the tournament as 
the winner of the selection process. This selection method is invoked by the genetic operators to choose 
parents for the offspring of the next generation. Two genetic operators are used by the GP system, namely, 
mutation and crossover. The mutation operator randomly selects a mutation point in a copy of the parent 
returned by tournament selection, and replaces the subtree rooted at this point. This process is depicted 
in Figure 5. Figure 4. Program representation  Figure 5. Mutation Note that node 3 has been chosen 
as the mutation point. The subtree rooted at this point is deleted and replaced with a newly created 
subtree. The crossover operator is applied to two parents and produces two offspring. The overall process 
is illustrated in Figure 6. Crossover points are randomly selected in copies of both parents. The subtrees 
rooted at these points are swapped to create the two offspring. Rules are built into the system to ensure 
that the offspring produced are syntactically correct. For example, the comb operator cannot be inserted 
at any position other than an argume 4. DISCUSSION The hybrid system was implemented in Java and applied 
to the 4 problems in Appendix A. These problems include variations of the problems found in [6] and [7]. 
The system was able to produce solution programs adhering to the object-oriented programming paradigm 
for all 4 problems. Simulations were run on a Windows XP machine with an Intel Pentium M processor and 
512 MB of memory. Appendix B lists the solutions generated by the system. All solutions are in the internal 
representation language. The GP system evolves the body of the method, not including the parameter, assignment 
or return statements. In order to test the class programs a translat implemented to convert the programs 
to Java. The programs for each problem and the corresponding problem specifications can be found at eters 
used by the GP system are listed in Method of in Grow generation Population size 500 Initial tree 
depth limit 3 Maximum offsprin 25 Mutatio 2 Tournament size 10 Bound 0.01 Mutation application rate 
0.5 Crossover application rate 0.5 Maximum nu 50  Number of iterations per Function set + - * / switch 
 Due to the randomness associated with GP and as a precaution against selection noise, a maximum of 
ten iterations per run was set. For all methods one run was problem was more than one iteration needed 
to evolve solutions, namely, the calc_amount methods of the daily_lease and annual_lease classes of Problem 
4. The object-oriented designs induced were found to be basically the same as those specified by programmers. 
The only shortcoming of the system is its inability to identify abstract classes if the identification 
requires an understanding of the entiti requires a comprehension of the relationship between the concepts 
of boat, sailboat and power boat which only a human is capable of. It is evident from the solutions 
presented in Appendix B that the methods evolved by the GP system may contain redundant code. For example, 
the program evolved for the withdrawal method for the cheque class is balance* (balance - amount) / balance. 
 This solution contains a redundant division with both the numerator and denominator being balance. These 
redundancies are called introns a pr ograms. Future work will examine methods for removing th  introns. 
5. CONCLUSION AND FUTURE WORK The study presented in this paper was a first attempt at inducing programs 
for the object-oriented programming paradigm. A hybrid system using an expert system to generate object-oriented 
designs and genetic pro implemented and successfully applied to creating solution programs for 4 object-oriented 
programming problems typical of a first course on OOP. The induced programs differed from those written 
by programmers in that some code. Future work will look at removing these redundancies so as to prevent 
them from having a negative effect on the runtimes of the generated programs. Based on the success of 
this initial attempt, future extensions will apply the system to larger programs. In addition to this 
GP will also be used to evolve programs that u ex tended to include knowledge on other o  such as multiple 
inheritance and interfaces. 6. ACKNOWLEDGMENTS The authors would like to thank the reviewers for their 
helpful suggestions and comments. This material is based on work financially supported by the National 
Research in this material are those of  doe s not accept any liability in regard thereto. 7. REFERENCES 
[1] Abbott R. Ob  Att empt. In Proceedings of the International Conference oMachine Learning: Models, 
Technologies and Applications. 2003, 24-27. [2] Agapitos A., and Lucas S. Learning Recursive Functions 
with Object Oriented Gene  of t he 9th European Conference on Genetic Programming (EuroGP 2006) (Budapest, 
Hungary, 2006), LNCS 3905, Springer, 2006, 166-177. [3] Agapitos A., and Lucas S. Evolving a Statistics 
Class Using  Obj ect Oriented Evolutionary Programming. In Genetic Programming Proceedings of EuroGP 
2007) (Valencia, Spain, April 2007), LNCS 4445, Springer, 2007, 291 300. [4] Agapitos A., and Lucas 
S. Evolving M  Sor ting Algorithms. In Genetic Programming Proceedinof EuroGP 2007) (Valencia, Spain, 
April 2007), LNCS 4445, Springer, 2007, pp. 301 310. [5] Bruce W. S. Automatic Generation of Object-Oriented 
Programs Using Genetic  Pro gramming 1996, Proceedings of the First Annual Conference on Genetic Programming 
(GP  Pre ss, 1996, 267 -272. [6] Deitel H.M. and Deitel P.J. Java How to Program 3rd Edition. Prentice 
Hall, N  ese [7] Doke R.E., Satzinger J.W. and Williams S.R. Object-Oriented Application Development 
Using Java  Lea rning, USA, 2002. [8] Koza J. R. Genetic Programming I: On the ProgramminComputers by 
Natural Selection, MIT, 1992.  [9] L angdon W.B. Genetic Programming and Data Structures: Genetic Programming 
+ Data Structures = Automatic Programming, Kluwer Academic Publishers, 1998. [10] Lucas S. Exploiting 
Reflection in Object-Oriented Genetic  Prog ramming. In Genetic Programming Proceedings of the 7th European 
Conference, (EuroGP 2004) (CoimbraPortugal), LNCS 3003, Springer-Verlag, 2004, 369 378. [11] Suarez 
D.E., Olarte J. Y., and Rojas S. A. Evolving Object Oriented Agent Programs in Robocup Dom  Pr oceedings 
of the Genetic and Evolutionary CoConference (GECCO 05), (Washington DC, US  -29 , 2005). ACM  8. 
APPENDIX A PROBLEM SET 8.1 Problem 1 NRB bank manages a number of customer accounts. A customer can 
have one of three types of accounts, namely, a current account, a savings account or a loan account. 
Details that need to be stored for each customer include the customers ID number, name, address and telephone 
number. Each account has an account number and balance. Money can be withdrawn from an account or deposited 
into the account. In the case of both the savings and cheque accounts a withdrawal results in the balance 
being decreased while in the case of a loan account the balance is increased. Similarly, a deposit results 
in the balance being increased for the cheque and savings accounts and decreased for the loan account. 
For each cheque account the customer s profile, can be gold, silver or bronze. This information needs 
to be stored for each cheque account as accounts in these different categories have different benefits. 
Whenever a deposit is made into a savings account the customer earns interest on the updated balance 
at a given rate. The interes for each savings accouloan account includes  limit, and the monthly instalments. 
8.2 Problem 2 A company requires a payroll system. The company has four types of employees, namely, a 
manager, a commission worker, a piece worker and an hourly worker. A manager earns a fixed weekly salary. 
A commission worker earns a flat monthly salary as well as a percentage of the sales he/she makes for 
the month. Both managers and commission workers get a pension and medical aid contribution as fringe 
benefits. A piece worker s earnings is dependant on the number of pieces sold and is calculated to be 
the number of pieces sold times the wage per piece. An hourly worker gets paid according to the number 
of hours worked. A fixed wage is set per hour. Information that needs to be stored for each employee 
is the employee s first name, surname, and employee number. Earnings must be calculated for each employee. 
Each medical aid instance specifies the employee s name, medical aid n pen sion instance speci  beneficiaries, 
amount and date of retirement. 8.3 Problem 3 An international airport requires a system to keep track 
of flight details for customers. For each flight the system needs to store the flight number, destination, 
departure time, departure gate, airline and flight cost. Some flights are direct flights, i.e. they fly 
non-stop to the destination and some fly via another airport to their destination. We will call the latter 
flights indirect flights. In this case the flight stops at an airport en route to its destination to 
refuel. In the case of indirect flights information regarding the transit airport must also be stored. 
The flight cost is calculated to be the cost charged by the airline per customer plus a percentage of 
this amount (the profit_rate). In the case of indirect flights an additional levy order to cover refuelling 
levies at the transit airport. Furthermore, on some flights additional passengers can board the plane 
at the transit airport. The system needs to keep track of whether boarding will take place at the transit 
airport or mod el and capacity (n  be stored for each aircraft. 8.4 Problem 4 Bradshaw Marina is a 
privately owned corporation that rents boat slips and provides boat services on a lake. Bradshaw s population 
is around 350 sailboats and 75 powerboats, although it has plans to expand these capacities. All boats 
have a state registration number, length, manufacturer, and model year. In addition to this each powerboat 
will have a different number of engines and fuel type and each sailboat will have a keel depth, number 
of sails and motor type. A boat can slip. Each slip is identified by means of a slip number and will 
differ with respect to their width and length. Each covered slip also has a door height. Bradshaw Marina 
would like to have an automated system to track its customers, the slips it leases, and the boats in 
the slips. Bradshaw provides two types of leases, namely, an annual lease and a daily lease. All leases 
specify a lease amount, a start date, and an end date. Annual leases can be paid for monthly, and the 
balance due needs to be tracked. Daily leases must be paid for in advance, so there is no need to store 
a balance due. The number of days of the daily lease is required. The amount for an annual lease and 
a da co per ta  ost 10 20 12 25  16 35 annual_lease a annua  Cost 10 800 12 900  16 1500 Payment 
for an annual lease is made per month. Thus, this value must be divided by 12 to calculate the va lue 
assigned to the balance due will be the ovesystem should maintain standard customer infor  ust name, 
address and telephone number.  9. APPEND .1 Solu rob  count Abstract Attributes true account_number 
balance cheque savings loan Deposit: Input: balance, amount;  amount; Output: balance; abstract  heque 
 Abstract Attributes false profile account Deposit: amount + amount + balance - amount  Class: savings 
Abstract false Attributes interest_rate Superclasses account Methods Deposit: balance + amount Withdrawal: 
balance amount   Class: loan Abstract false Attributes interest_rate Superclasses account Methods 
Deposit: (balance - amount) * amount / (balance - balance + amount) Withdrawal: balance + amount   
Class: customer Abstract False Attributes Name address phone id account Associations account  9.2 
Solution for Problem 2  Class: medical_aid Abstract false Attributes emp_name medical_aid_number dependants 
emp_contribution company_contribution   Class: pension Abstract false Attributes emp_name pension_number 
beneficiaries retirement_amount retirement_date   Class: employee Abstract true Attributes first_name 
surname emp_number Subclasses manager comm_worker piece_worker hourly_worker Methods calc_earnings: 
Output: earnings; abstract   Class: piece_worker Abstract false Attributes wage_per_piece quantity 
 Superclasses employee Methods calc_earnings: quantity * wage_per_piece   Class: manager Abstract 
false Attributes weekly_salary Superclasses employee Associations medical_aid pension Methods calc_earnings: 
weekly_salary / weekly_salary / weekly_salary + weekly_salary   Class: comm._worker Abstract false 
 Attributes salary commission quantity Superclasses employee Associations medical_aid pension Methods 
calc_earnings: salary + quantity * commision   Class: hourly_worker Abstract false Attributes wage 
hours Superclasses employee Methods calc_earnings: wage * hours  9.3 Solution for Problem 3  Class: 
flight Abstract false Attributes flight_number destination departure_time departure_gate airline flight_cost 
 Subclasses indirect_flight Associations aircraft Methods calc_cost: airline_charge + airline_charge 
* profit_rate   Class: indirect_flight Abstract false Attributes transit_airport transit_boarding 
 Superclasses flight Methods calc_cost: airline_charge + airline_charge * profit_rate + levy   Class: 
aircraft Abstract false Attributes make model capacity  9.4 Solution for Problem 4  Class: customer 
Abstract false Attributes name address phone_number Associations boat   Class: boat Abstract false 
 Attributes state_reg_no boat_length manufacturer model_year Associations slip Subclasses sailboat 
power_boat   Class: sailboat Abstract false Attributes keel_depth no_of_sails motor_type Superclasses 
boat   Class: power_boat Abstract false Attributes fuel_type no_of_engines Superclasses boat   
Class: slip Abstract false Attributes slip_number width length Subclasses covered_slip   Class: covered_slip 
Abstract false Attributes door_height Superclasses slip   Class: lease Abstract true Attributes 
amount start_date end_date Associations customer slip Subclasses daily_lease annual_lease Methods 
calc_amount: Input: boat_length; Output: amout; abstract  Class: annual_ lease Abstract false Attributes 
balance monthly_payment Superclasses lease Methods calc_amount: switch(boat_length) { case 1100 : var0=1500; 
case 10 : var0=800; case 14 : var0=1100; case 16 : var0=1500; default: var0=900; } calc_balance: amount 
- (amount - amount) update_balance: monthly_payment * balance / monthly_payment - monthly_payment calc_instalment: 
amount / 12   Class: daily_lease Abstract false Attributes no_of_days Superclasses lease Methods 
calc_amount: switch(boat_length) { case 0 : var0=0; case 16 : var0=35; case 14 : var0=30; case 10 : var0=20; 
default: var0=25; } * no_of_days;   
			
