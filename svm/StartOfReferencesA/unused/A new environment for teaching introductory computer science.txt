
 A NEW ENVIRONMENT FOR TEACHING INTRODUCTORY COMPUTER SCIENCE Maj William E. Ayen Capt Sam Grier Department 
of Computer Science United States Air Force Academy 80840 ABSTRACT In 1973, a great amount of frustration 
was being vented about student inability to formulate and solve problems on a computer; at that time, 
a suggestion was made to separate problem solving from programming--to make problem solving language 
independent [i]. This approach was acknowledged in 1978 as one of four common methods of teaching college-level 
introductory computer science [2]. Finally, in 1981 and 1982, this method, or a variant of it, was widely 
proclaimed [3] [4] [5]. We adopted this approach of instruction in our introductory course in 1977 and 
the results have been less than spectacular. We don't make this point to discredit the approach; its 
existence has made manifest the necessity of teaching problem solving in an intro- ductory course. Rather, 
we believe that the added teaching of a separate problem solving methodology is not by itself sufficient. 
 INTRODUCTION The Air Force Academy requires each the course was changed from strictly a individual 
who graduates to complete an computer programming course to the extensive curriculum oriented towards 
current format, a number of approaches engineering and including courses in have been attempted to better 
teach the other standard academic disciplines. An subject area. A paper at last year's introductory 
course in computer science conference [6] outlined one approach and is one of the required courses. discussed 
the mixed results achieved. Our introductory course has three Based on our own experiences, as primary 
objectives: computer literacy, well as those of others, we have defined problem solving, and computer 
program-a new approach to achieve the three ming in Pascal. In the six years since course objectives; 
this new approach is showing very good results. 258 This approach resulted from what we saw as three 
important areas requiring changes. First, the relationship between problem solving and programming was 
not retained by the students despite its successful introduction in Karel the Robot [7]. Second, we saw 
the need to provide the students with frequent posi- tive feedback using relatively small exercises to 
enable them to identify and resolve their areas of misunderstanding quickly and easily. Third, since 
topics from the three course objectives were taught separately, the students were unable to see the relationships 
between the different discussions; related topics needed to be taught together when feasible. For example, 
discussions of the concept of a variable lacked com- pleteness when computer memory was dis- cussed 
during a lesson or later in the course. sometime earlier Figure course 1 provides syllabus. a synopsis 
of our DISCUSSION I. We believe that four ingredients are necessary to teach programming and prob- lem 
solving successfully to a new stu- dent: a. The structure of a language must be taught before its details. 
 b. Problem solving, though language independent, must be taught in the con- text of a programming language. 
 c. Structured programming tech- niques must be rigidly adhered to.  d. Any text the student uses must 
be easily read.  In the past, we have taught students the details of a programming language first and 
then couldn't understand why, when modules were introduced, students were unable (or perhaps unwilling) 
to reorient their thinking to structure a solution prior to writing the details. Once the pattern of 
details first, structure second, is established, it is difficult to change. To overcome this deficiency, 
we teach procedures "up-front." Nested procedures follow close behind. The student is exposed to simple 
modules to accomplish simple tasks. The modularity of Pascal is emphasized first; simple statements never 
occur in the main pro- gram until well into Pascal. Procedures are taught as building blocks of solu- 
tions and not just as containers of redundant code. When we treated problem solving separately, students 
did the same. Nei- ther flow-charting nor pseudo-coding made any significant difference [6]-- once out 
of the lessons on problem solv- ing, the students put it behind them to get on to the joys of programming 
the computer. This resulted from teaching problem solving prior to ever program- ming a solution. The 
students were required to learn what was essentially a separate "problem solving language;" when we went 
to a text, this problem solving methodology and language were not supported. We taught an entirely new 
language (Pascal) and found ourselves spending unnecessary time translating the problem solving language 
syntax into Pascal. We now develop every programming solution in the context of problem solv- ing; all 
algorithms are developed using a full problem solving methodology, not just a statement of the problem 
and the solution. We gradually lead into the formal approach to problem solving (shown in Figure 2), 
first exposing the student to all of the problem, solving elements before formalizing the process. Structured 
programming techniques are difficult for the introductory stu- dent to understand and adhere to. When 
 their programs are small, they are unable to appreciate the need for using structured techniques. When 
their pro- grams get larger (and the need for structured techniques is paramount), the Student has already 
developed a program- ming style which is generally hard to change. Many texts do not adequately support 
structured programming; if covered, the discussion of these tech- niques is in a chapter near the end 
of the book without support elsewhere in the text. For example, the treatment of global variables is 
often casual or inappropriate and modularity is not enforced as Figure 3 illustrates. We impose some 
constraints on the student to enforce rigid structured pro- gramming. Modules in the outer block initially 
may only be invoked by the main program; nested modules may only be invoked by the module that contains 
them; global variables may only be used by the main program; modules may only use variables that are 
either parameters or local variables. Figure 4 shows the same program given in Figure 3 as it is presented 
to our students. 259 CONCLUSION We have found many Pascal texts to be difficult for the introductory 
stu- dent to read. The simple concepts which must be understood by the s%~dent are made difficult because 
they are embedded in pages of information which, although easy for an experienced programmer to understand, 
are foreign to the novice. Other textbooks inundate the student with vast amounts of new material on 
every page. The result is that students view Pascal as being much more difficult to understand than it 
really is, and the presentation of the material gets in the way of their understanding. To accomplish 
all of the above, we were forced to do the obvious: write our own Pascal text. We incorporated all of 
the above pedagogy and ensured the material was conversational and friendly to the reader. We made it 
tutorial in nature and purposely brief. Overhead is minimized; as an example, integers and characters 
are introduced first, and reals and Booleans are dis- cussed much later in the text. 2. We have also 
modified our approach to exercises. The student is given many short exercises early in the course that 
are completed during class lab time. This provides the student frequent feed- back on how well the material 
was under- stood and where more study is needed; at this point, the exercises are not diffi- cult. (See 
Figure 5 for examples.) Later in the term the exercises increase in complexity and size, but only after 
the student has developed sufficient problem solving and Pascal tools to be able to successfully complete 
the exer- cises. 3. Finally, we saw the need to include a number of the literacy topics in the discussion 
of Pascal and problem solving. Including these topics allows a more complete discussion of the sub- 
 ject matter to take place. It is also more meaningful to the students as they can relate it to something 
they are currently learning about in Pascal, and the questions which are being asked by many in the 
introductory course who have had some computer experience are better answered. This approach makes 
the organization of the course more diffi- cult, but the potential benefits to the student are great. 
 Results are promising. During the first semester, student ability to prob- lem solve, modularize, and 
program solu- tions generally surpassed that of past students; in addition, the number of "snowed" students 
was minimal. Most students were able to complete the large exercises with relatively little diffi- culty. 
Feedback from the students was very positive relative to the overall approach, our text, and the exercises. 
 Perhaps the most interesting conse- quence of this change is some instruc- tors" resistance to adapt 
to this new approach; they insist on trying to teach the course the "way it's been taught for years." 
Gradually, the resistance is lessening as improved student under- standing and performance becomes evi- 
dent. We're encouraged by student results, and we are confident instructors will be comfortable with 
the approach with this first semester behind them. BIBLIOGRAPHY I. Fisher P.; Hankley W.; Wallentine 
V.; "Separation of Introductory Programming and Language Instruc- tion," SIGCSE Bulletin, Feb 73, Vol. 
5, No. i. 2. Gruener, William B.; Graziano, Steven M.; "A Study of the First Course in Computers," SlGCSE 
Bul- letin, Aug 78, Vol. I0, No. 3.  3. Gabrini, Philippe; "Integration of Design and Programming Methodology 
into Beginning Computer Science Course," SIGCSE Bulletin, Feb 82, Vol. 14, No. i.  4. Riley, D. D.; 
"Teaching Problem Solving in an Introductory Computer Science Class," SIGCSE Bulletin, Vol. 13, No. i, 
Feb 81.  5. Behforouz, Ali; Sharma, Oukar P.; "A One-Year Introductory Course for  Computer Science 
Undergraduate Pro- gram," SIGCSE Bulletin, Vol. 13, No. i, Feb 81.  6. Krause, K.; Sampsell, R. E.; 
Grier,  S. L.; "Core Computer Science at the Air Force Academy," SIGCSE Bul- letin, Vol. 14, No. l, 
Feb 82.  7. Pattis, R. E.; "Karel the Robot, a Gentle Introduction to the Art of Programming," John 
Wiley and Sons, N.Y., 1981.  260 LESSON TOPIC(S) LAB 1-7 Karel the Robot Stepwise refinement/Karel 
programs Introduction to text editor Terminal exercises 8 Pascal program introduction Simple output 
module 9 Identifiers, modules, HOL Output name in block letters i0 Variables, computer units Include 
variables in lab 8 ii Value parameters, storage Add value parameters to lab 10 12 Variable parameters 
Conversion program 13 Examination 14 Selection Determine academic performance 15 Case Instructor assigned 
 16 Big Exercise #1 Exercise -determine cost of supply 17 Data representation order Data recording 
media 18 Iteration , Write Draw pyramid 19 Readln Conversion module 20 Header technique Multiple inputs 
for lab 19 21 While Lab 20 with trailer technique 22 Real and boolean Average test scores 23 Formal 
problem solving Instructor assigned 24 Algorithms Instructor assigned 25 Big Exercise #2 Exercise -interactive/iteration 
 26 Computer systems 27 Functions "EVEN" function 28 Constants, type, l-d array Find minimum value 
in a~ray 29 Examination 30 Searching Instructor assigned search 31 Sorting Modify sort module 32 
2-d arrays Sort 2-d array 33 Files, secondary storage Input data in 2-d array and process 34-42 Operating 
systems, security, Big exercise #3 -searching/sorting/ privacy, data structures, comprehensive SPSS, 
DBMS, MIS, computers in society Figure i. Abbreviated syllabus i. Define the problem to be solved. 
 2. Identify tasks.  3. Create the input-process-output diagram for each task.  variable parameters 
parameters  yes l T | module name i I f external external input output parameter definitions 4. 
Refine tasks from step 2.  5. Write Pascal code.  Figure 2. Problem Solving Steps PROGRAM SORTLIST 
(INPUT, OUTPUT); CONST LISTLEN = 50; VAR L: ARRAY [I..LISTLEN] OF REAL; (* L[I..N] IS LIST TO BE SORTED 
*) N, (* ACTUAL LENGTH OF LIST IN L *) M, (* LENGTH OF SUBLIST *) MAXPOS, I: 0..LISTLEN; TEMP: REAL; 
PROCEDURE SORT; BEGIN FOR M := N DOWNTO 2 DO BEGIN (* SET MAXPOS TO POSITION OF MAX IN L[I..M] *) MAXPOS 
:= i; FOR I := 2 TO M DO IF L[I] > L[MAXPOS]THEN MAXPOS := I; (* INTERCHANGE L[MAXPOS] AND L[M] *) 
TEMP := L[M]; L[M] := L[MAXPOS] ; L[MAXPOS] := TEMP END END; BEGIN (* READ AND DISPLAY INITIAL LIST *) 
 READ (N) ; WRITELN(" LIST IN INITIAL ORDER'); WRITELN; FOR I := 1 TO N DO BEGIN READ (L [ I] ; WRITELN(L[I]) 
END; SORT; (* DISPLAY L[I..M] *) WRITELN; WRITELN; WRITELN(" SORTED LIST'); WRITELN; FOR I := 1 TO 
N DO WRITELN (L [ I] ) END. Figure 3. Example Pascal Program with Poor Structure 262 PROGRAM SORTLIST 
(INPUT,OUTPUT); (* Sort a given list of real numbers *) CONST LISTLEN = 50; (* maximum list length *) 
 TYPE NUMBERHOLDER = ARRAY [1..LISTEN] OF REAL; VAR LIST: NUMBERHOLDER; (* List tc be sorted *) LENGTH: 
I..LISTLEN; (* Actual length of the list *) PROCEDURE readin (VAR length: I..LISTLEN; (* length of 
list *) VAR list: NUMBERHOLDER (* list to be read *) ); (* Read and display the initial list *) VAR 
index: I..LISTLEN; (* counter for FOR stmt *) BEGIN (* readin *) WRITELN (" Enter number of values to 
be input: ") ; READLN (length); WRITELN (" You wish to input ", length: 3, " values "); WRITELN; FOR 
index := 1 to length DO BEGIN WRITELN (" Enter real value: "); READLN (list [index]); WRITELN (" value 
= i, list [index]:6:2) END END; (* readin *) PROCEDURE sort (length: I..LISTLEN; (* length of list 
*) VAR list: NUMBERHOLDER (* list to be sorted *) ); (* Sort the given list using a selection sort *) 
 VAR maxpos, (* position of max value *) sublength, (* length of sublist *) index: I..LISTLEN; (* counter 
for FOR stmt *) temp: REAL; (* temporary for switch *) BEGIN (* sort *) FOR sublength := length DOWNTO 
2 DO BEGIN (* Set "maxpos" to position of max value *) maxpos := i; FOR index := 2 TO sublength DO 
IF list [index] > list [maxpos] THEN maxpos := index; (* Interchange list [maxpos] and list [sublength] 
*) temp := list [sublength]; list [sublength] := list [maxpos]; list [maxpos] := temp END END; (* sort 
*) PROCEDURE writeout (* Display the give (length: list: 57 n list " NU5 1..LISTLEN; MBERHOLDER (* length 
of list "5 (* list to be written *) VAR index: 1..LISTLEN; (* counter for FOR stmt *) BEGIN (* writeout 
*) FOR index := 1 TO length DO WRITELN (list [Index]: 15: 2) END; (* writeout *) BEGIN (* main program 
"5 readin (length, listS; WRITELN; WRITELN (" unsorted list: "); writeout (length, list); sort (length, 
list); WRITELN; WRITELN (" ********** "); WRITELN; WRITELN (" Sorted list: "); writeout (length, list) 
 END. Figure 4. Example Pascal Program with Good Structure Write a Pascal program that contains a module 
that: IF WRITE average < = 60 dismissal 60 < average < = 70 academic probation 70 < average < = 90 
average student 90 < average honor student Pass your grade to the module with a value parameter. Invoke 
the module four times so that every statement is written once. Write a Pascal program that will draw 
pyramids of any height: This is an example of a pyramid that is five asterisks high. Figure 5. Examples 
of Short Exercises. 264 
			
