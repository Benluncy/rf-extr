
 Agile Systems Development and Stakeholder Satisfaction: A South African Empirical Study Carlos Ferreira 
Business Systems Group (Africa) 33 Fricker Road Illovo, 2196, RSA +27 11 215 6666 ferreiracali@yahoo.com 
ABSTRACT The high rate of systems development (SD) failure is often attributed to the complexity of traditional 
SD methodologies (e.g. Waterfall) and their inability to cope with changes brought about by today s dynamic 
and evolving business environment. Agile methodologies (AM) have emerged to challenge traditional SD 
and overcome their limitations. Yet empirical research into AM is sparse. This paper develops and tests 
a research model that hypothesizes the effects of five characteristics of agile systems development (iterative 
development; continuous integration; test­driven design; feedback; and collective ownership) on two dependent 
stakeholder satisfaction measures, namely stakeholder satisfaction with the development process and with 
the development outcome. An empirical study of 59 South African development projects (using self reported 
data) provided support for all hypothesized relationships and generally supports the efficacy of AM. 
Iteration and integration together with collective ownership have the strongest effects on the dependent 
satisfaction measures. Categories and Subject Descriptors D.2.9 [Software Engineering]: Software Process 
Models, Software Life Cycle K.6.3 [Software Management]: Software Development  General Terms Management, 
Design, Economics, Performance.  Keywords Agile methods, stakeholder satisfaction, software development 
 1. INTRODUCTION The high rate of systems development (SD) failure is often attributed to the complexity 
and heaviness of traditional SD Permission to make digital or hard copies of all or part of this work 
for personal or classroom use is granted without fee provided that copies are not made or distributed 
for profit or commercial advantage and that copies bear this notice and the full citation on the first 
page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior 
specific permission and/or a fee. SAICSIT 2008, 6 - 8 October 2008, Wilderness Beach Hotel, Wilderness, 
South Africa Copyright &#38;#169; 2008 ACM 978-1-60558-286-3/08/10 $5.00. Jason Cohen Wits University 
Private Bag X3 WITS, 2050, RSA +27 11 717 8164 jason.cohen@wits.ac.za methodologies (e.g. Waterfall) 
[3, 5, 12]. These methods are sharply criticized for their inability to cope with changes brought about 
by today s dynamic and evolving business environment. Agile methodologies (AM) have emerged to challenge 
the traditional, process-oriented, life-cycle based, and plan-driven approaches to SD [4, 8, 17, 28]. 
AM aim to overcome the extensive reliance of the traditional methodologies on upfront planning and heavy 
documentation, as well as their focus on optimized processes [28]. Instead, AM are characterized by short 
iterative cycles of development driven by product features, periods of reflection and introspection, 
collaborative decision making, incorporation of rapid feedback and change, and continuous integration 
of code changes into the system under development [28 pg 75]. AM do not aim to stop or eliminate change 
but instead to better handle and reduce the cost of inevitable changes in requirements, scope and technology 
that will occur during a project s life span [20]. While traditional approaches plan projects around 
tasks and documentation, agile methods plan projects around features where development is evolutionary 
and iterative [28]. Moreover, traditional approaches fix functionality and then adjusts time and resources 
to reach the functionality, agile approaches fix time and resources, and then adjust the amount of functionality 
[2]. Agile methodologies include extreme programming (XP), crystal methods, scrum, dynamic systems development 
methodology (DSDM), feature-driven development, and pragmatic programming among others (see [1, 2] for 
comparisons and reviews of agile methods). AM have enjoyed strong support in the literature [8, 23, 24], 
and studies argue that AM can provide benefits while decreasing SD failure rates [30, 31]. Yet empirical 
research into AM is sparse [10]. The majority of research is of an exploratory nature, consisting of 
case studies predominantly focused on paired programming [12, 21]. AM are also not without their critics 
who are challenging the assumptions underlying agile development and consequent limitations [33]. Concerns 
have been raised over the boundary conditions for agile behaviour [36], the excuse that agility leads 
to cowboy style hacking and limited architectural pre-planning [9], the over-reliance on capabilities 
of developers [9] and on their tacit knowledge and informal communication [15]. It has been described 
that the tight coordination needed for agility might break down in large teams, that AM are inappropriate 
for safety­critical systems, that AM risk over-responding to change, rely too much on customer involvement 
and commitment, and that refactoring efforts can escalate [9]. There is thus an important need for empirical 
research into the efficacy of AM. In an attempt to contribute to and extend empirical research into AM, 
this paper develops and tests a research model that hypothesizes the effects of five characteristics 
of agile systems development (iteration; continuous integration; test-driven design; feedback; and collective 
ownership) on two dependent stakeholder satisfaction measures, namely stakeholder satisfaction with the 
development process and with the development outcome. Results of this study will contribute to the advancement 
of agile methodologies and their penetration into SD practice in South Africa. Results will assist in 
convincing developers to embrace agile methods and philosophies by outlining the key characteristics 
of agility and their implications for systems development outcomes. Results will also help to answer 
questions about the value of agile methods and their ability to improve software development. The following 
sections of this paper present the research model and hypotheses, describe the research methodology, 
present the empirical findings and discuss their implications for both research and practice.  2. CONCEPTUAL 
MODEL AND HYPOTHESES This study draws on existing literature into agile methodologies and systems development 
to derive a model (Figure 1) of how five important characteristics of AM (iterative development, continuous 
integration, collective ownership, test-driven design, and feedback) influence stakeholder satisfaction. 
The arrows in the model denote hypothesized relationships that will be developed in this section. Stakeholder 
satisfaction, a common indicator of systems development success [7, 32, 34], is the dependent variable 
in this study s model. It reflects the objective of any systems development effort to ensure that the 
expectations of organisational stakeholders are met. Within this study, stakeholder satisfaction is considered 
in terms of satisfaction with process (a more immediate consequence of the methods employed) and satisfaction 
with outcome (a higher-order measure of satisfaction with eventual project outcome). This conceptualization 
is consistent with the view that both process excellence and conformance to customer/stakeholder requirements 
are important measures of development success [32]. The independent variables of the study s model are 
five selected dimensions of AM practice. They are intended to capture AM s focus on short iterative cycles 
of test-driven development incorporating frequent feedback, continuous integration of code and an environment 
of close collaboration and collective ownership. The decision to focus on more general AM characteristics 
as opposed to a focus on specific methodologies (such as XP or scrum) allows for a broader focus on the 
efficacy of AM practice. It allows us to better understand general characteristics of AM that lead to 
improved project outcomes rather than details of AM that tend to differ in specifics such as time between 
iterations or the mechanisms employed for feedback. Furthermore, a focus on characteristics rather than 
specific methodologies is consistent with the recognition that organisations are still learning to blend 
or balance the characteristics of AM [28, 36], and are still trying different combinations of AM options, 
e.g. TDD without paired programming, or short delivery cycles without TDD [36]. The study s focus on 
agile characteristics will thus help organisations looking to better synthesize traditional and agile 
methods.  Figure 1. Conceptual Model Each of the five characteristics of AM selected for inclusion 
in the model is briefly explained in Table 1 below and hypotheses are then developed. Table 1. Agile 
characteristics AM Characteristics Description Iterative Development Quick delivery of small working 
(and tested) software releases at regular intervals or cycles [8]. Continuous Integration New code is 
integrated into the production base code continuously, ideally after each task is completed [8, 15]. 
Collective Ownership Any developer has the right to add or maintain the code anywhere in the system at 
any time [8]. Test-Driven Design Developers write tests before they code [8, 11]. This practice aims 
to encourage developers to think before coding [16]. Feedback Frequent feedback loop with customers [20] 
allows developers to ascertain the accuracy of the functionality.  2.1 Iterative Development and Stakeholder 
Satisfaction Iterative development is often considered the cornerstone of agile development [9] and is 
characterized by the delivery of small working (and tested) software releases at regular intervals [8]. 
Iterative development allows for agile developers to focus on features and not tasks [20]. By requiring 
stakeholders and developers to clearly and regularly establish priorities and requirements to be developed 
in each iteration [6, 15], the approach allows priorities and requirements to change when deemed necessary 
[8, 29]. Iteration allows for dynamic reprioritization of features, discarding of originally planned 
features, and the addition of new ones [20] thus permitting adjustments to be made as new information 
emerges. Iterative development excites stakeholders through early and continuous delivery of value [9]. 
This can be a key factor in encouraging early buy-in of users and stimulating them to share more ideas 
[15]. Iterative development also reduces the possibility of developers going down the wrong path [15] 
as working iterations allows developers and stakeholders to see what they really have in front of them 
as opposed to promises of what they will have in front of them [20]. It follows that: Hypothesis 1: The 
more iterative the systems development process, the greater the stakeholder satisfaction 2.2 Continuous 
Integration and Stakeholder Satisfaction Continuous integration aims to integrate new code changes with 
the existing base code as soon as changes are completed [8, 15]. After changes, integration requires 
the system to be built from scratch, this immediately leads into testing [17], and all tests must pass 
or the changes are discarded [8]. Integration thus allows for the detection of system failures as soon 
as possible [15] and may also allow for more frequent demonstration of the status of the development 
effort [33]. However, some suggest that integration is not often used due to the complexity of the software 
needed [14], and full system integration is usually done less frequently than the daily integration specified 
by methodologies such as XP [14]. However, there is enough evidence to suggest that continuous integration 
is a necessary part of any agile development. It is through integration (check-in code, integrate, rebuild, 
compile, test) that the development project can comply with the agile value propositions that progress 
should be measured on the basis of working code rather than activities performed [18] and that the only 
true test of software is to run it [35]. It follows that: Hypothesis 2: The more continuous integration 
is present within the systems development process, the greater the stakeholder satisfaction 2.3 Collective 
Ownership and Stakeholder Satisfaction Interaction and communication between members is a strong feature 
of AM [20]. The basic principle behind collective ownership is that the team owns the system and therefore 
all team members are empowered to make changes and maintain code [14]. Collective responsibility and 
a process of role swapping can be contrasted with the specialization approach to role assignment that 
characterizes traditional development [28]. Arguments in favour of collective ownership suggest that 
the approach: empowers teams and enables them to self-organize and respond to emergent situations [28]; 
fosters and environment of learning where the rotation of team members ensures that knowledge is not 
monopolized by individuals [28]; mitigates the risks associated with the loss of a key individual in 
a development team [26]; stimulates developers to want to understand all parts of the system [15]; allows 
for better allocation of developers by project managers; allows tasks to be worked on based on their 
priority rather than availability of developers [15]; and allows more management flexibility as several 
team members know the code well enough to maintain it [14]. This collaboration, communication and transfer 
of ideas amongst developers can lead to production of better systems than each could produce alone [20]. 
It follows that: Hypothesis 3: The greater the degree of collective ownership during the systems development 
process, the greater the stakeholder satisfaction 2.4 Test-Driven Design and Stakeholder Satisfaction 
Agile methods place a premium on testing [28]. In contrast to the traditional test-last strategies, test-driven 
development (TDD) is characterized by developers first writing unit tests before they code [8, 11]. This 
practice aims to encourage developers to think before coding [16]. TDD is often one of the first agile 
practices with which developers experiment [26]. TDD helps to focus developers on what they want to achieve 
and what is required from the code [26]. TDD allows for earlier, less expensive detection of defects 
[20], and thinking about testing before coding has the potential to make code more understandable and 
maintainable [28]. It follows that: Hypothesis 4: The more test-driven the systems development process, 
the greater the stakeholder satisfaction 2.5 Feedback and Stakeholder Satisfaction Highsmith and Cockburn 
[20] describe that for a process to be considered agile it must have a frequent feedback loop with customers. 
The feedback provides developers the opportunity to ascertain the accuracy of the functionality of each 
integrated­iteration. Feedback not only allows for the identification of errors, but also for the building 
of relationships and trust between the customer and project team [15], and provides stakeholders with 
an opportunity to freely and effortlessly articulate required changes [25]. The amount and opportunity 
for feedback allowed by the methodology is also considered a reflection of the methodology s change tolerance 
[20]. It follows that: Hypothesis 5: The greater the degree of customer feedback within the systems development 
process, the greater the stakeholder satisfaction 2.6 Satisfaction with Process and Satisfaction with 
Outcome The final hypothesis deals with the link between process satisfaction and outcome satisfaction. 
While any perceived problems with the development process are likely to negatively influence stakeholder 
attitudes toward the new system, an effective development processes can lead to high system quality, 
use, and both individual user and organisational benefits [21]. The more satisfied stakeholders are with 
the development process, the more likely the system will reflect their requirements and meet their expectations, 
and consequently the more likely they will accept the system and take ownership [27]. It is thus believed 
that stakeholder satisfaction with the IS development process, will influence stakeholder perceptions 
of the value of the resultant system. It follows that: Hypothesis 6: The greater the stakeholder satisfaction 
with the systems development process, the greater the stakeholder satisfaction with the systems development 
outcome  3. RESEARCH METHODOLOGY 3.1 Data Collection A sampling frame consisting of 280 organisations 
was constructed from an online IT directory. The directory lists leading South African organisations 
(and business units of some large corporate companies) involved in software systems development, either 
for external customers or internal users. A structured questionnaire was constructed to capture information 
from an appropriate key informant within each organisation. The key informant was asked about the extent 
to which they agreed with a number of statements reflecting the use of the five AM characteristics in 
their most recently completed software development project, as well as the level of stakeholder satisfaction 
with that project. The instrument used five-point Likert type scales ranging from 1=strongly disagree 
to 5=strongly agree. Measures, together with corresponding literature support, are presented in Appendix 
A. The questionnaire, accompanied by a covering letter, was emailed to the listed contact in each organisation. 
 3.2 Response Analysis Of the 280 questionnaires administered, 35 were returned undelivered, and 59 
useable responses were received. Each response represented a unique software development project carried 
out within an organisation. This represents and effective response rate of 24%. Respondent job titles 
are shown in Table 2 below. More than 75% of respondents had over 5 years experience in the IT field. 
Table 2. Respondents by job title Job Title Number of Respondents Analyst 10 Developer 11 Project Manager 
9 IT Manager 9 Architect 6 Organisational Stakeholder / Customer 11 Other (e.g. tester, specialist) 3 
  4. EMPIRICAL RESULTS Table 3 shows descriptive statistics, Cronbach alphas, and minimum factor loadings 
for each of the research variables. Cronbach alpha coefficients were all above 0.80 demonstrating acceptable 
scale reliability. To enable subsequent hypothesis testing, composite scores (an equally weighted average 
of each variable s questionnaire items) were then calculated. Table 3. Descriptive statistics n=59 No 
of Items Mean Std Dev Cronbach Alpha Min Factor Loading* Iterative Development 4 3.12 1.38 0.89 0.70 
Continuous Integration 5 3.21 1.25 0.92 0.80 Test-Driven Design 4 3.20 1.39 0.92 0.86 Feedback 5 3.97 
0.96 0.90 0.69 Collective Ownership 5 3.64 1.08 0.89 0.59 Stakeholder Satisfaction with Process 3 3.65 
1.16 0.85 0.86 Stakeholder Satisfaction with Outcome 4 3.77 1.17 0.95 0.88 * Principal component factor 
analysis was used to confirm the unidimensionality of each variable separately. The standard deviations 
illustrate the current degree of variability (diversity) in systems development practice that should 
be expected [18]. The mean scores for each of the agile characteristics were just above the mid-point 
(3) of the 5-point scale, indicating that the use of agile methods is still to be fully embraced. This 
lack of agile adoption highlights possible challenges faced by developers in attempting to blend agile 
with more traditional methods. The feedback characteristic showed the least variation and the highest 
mean, suggesting that the use of frequent feedback is the most commonly applied agile practice and does 
suggest a move toward more user-centered design. Iterative development was particularly limited in terms 
of its application. The average scores for stakeholder satisfaction also suggest that South African software 
development projects have large room for improvement. 83% of respondents were using smaller team sizes 
of less than ten people. To better understand the relationship between agile practice and team size, 
t-tests were used to compare two groups of respondents: those with teams of five or less developers (n=34) 
and those with teams of between 6 and 10 developers (n=15). Statistically significant differences were 
found for all five agile characteristics. Smaller teams are statistically more likely to be agile in 
their approach (see Table 4). These findings confirm that agile development is more suited to smaller 
teams where the opportunities for close collaboration, communication and interaction are more feasible. 
 Table 4. Agility by team size AM Characteristic Team Size Mean Iterative Development (t=4.0, p<0.001) 
1 - 5 6 - 10 3.66 2.08 Continuous Integration (t=3.2, p<0.01) 1 - 5 6 - 10 3.51 2.34 Collective Ownership 
(t=2.2, p<0.05) 1 - 5 6 - 10 3.85 3.10 Test-Driven Design (t=2.5, p<0.05) 1 - 5 6 - 10 3.49 2.45 Feedback 
(t=2.3, p<0.05) 1 - 5 6 - 10 4.12 3.44 Table 5 illustrates the results of a bivariate correlation analysis 
of the relationships between the five AM characteristics and stakeholder satisfaction with project process 
and project outcome. All correlations are significant at p < 0.001 level. The analysed sample demonstrates 
high correlation between the use of all five characteristics of AM practice and stakeholder satisfaction. 
This suggests that those organisations that adopt AM with iterations, continuous integration, allowance 
for feedback, TDD and collective ownership will be rewarded with greater stakeholder satisfaction, with 
the process and with the final outcome. Although still statistically significant, correlations were consistently 
lower between AM and stakeholder satisfaction with process, than between AM and stakeholder satisfaction 
with outcome. This may be due to AM s need for constant involvement and commitment of stakeholders during 
the process, which may result in a degree of dissatisfaction and fatigue being expressed in some cases. 
Table 5. Correlations between AM characteristics and stakeholder satisfaction AM Characteristic Satisfaction 
with Process Satisfaction with Outcome Iterative Development 0.75** 0.81** Continuous Integration 0.65** 
0.74** Collective Ownership 0.75** 0.81** Test-Driven Design 0.66** 0.67** Feedback 0.60** 0.66** ** 
p <0.001 Structural equation modeling using PLS-Graph (version 3.0 build 1130) was used to better understand 
the effect of agile development on stakeholder satisfaction. Agile development was modeled to predict 
stakeholder satisfaction with both project process and outcome. The composite indicators of the five 
agile characteristics were used as the reflective indicators of agile development. As per hypothesis 
6, stakeholder satisfaction with the development process was also modeled to predict outcome satisfaction. 
The results are shown in Figure 2 below. Path coefficients are shown with t-values in brackets (bootstrap 
resampling with 500 resamples was used to produce standard error for calculating t-values). The five 
composite characteristics all loaded significantly on the agile development construct. Agile development 
had strong direct effects on both process and outcome satisfaction. Agile practice explained a significant 
portion of the variance (64%) in reported stakeholder satisfaction with project process, and together 
they explained 78% of the variance in stakeholder satisfaction with project outcome. The results of the 
model provide additional, strong support for all the hypothesized effects of agile practices on project 
process and outcomes. Hypotheses 1 through 6 are thus supported.  5. DISCUSSION AND IMPLICATIONS The 
study found support for hypothesis 1. Iterative development has a strong effect on stakeholder satisfaction. 
Consistent with [9, 15, 20], iterations allows for reprioritization of features and early and continuous 
demonstrations of system value. Iteration does seem to excite stakeholders and keeps developers on the 
right path toward a valued project outcome. Hypothesis 2 was also supported. Continuous integration is 
important for success of AM. Despite its technical complexity [14], the early detection of errors provided 
by continuous integration does appear to keep the development project on track. Support for hypothesis 
3 was obtained. Collective ownership when properly embraced can lead to better developed systems [8]. 
While this may be a difficult move for traditionalists who are accustomed to clear individual roles, 
collective responsibility, role swapping, and empowerment of all team members to own the software code 
can benefit the project process [14, 15, 20]. Findings were also consistent with the suggestion that 
test-driven design can increase the benefits afforded to stakeholders [8]. Hypothesis 4 was thus supported. 
TDD does appear to help focus developers on the delivery of working code that benefits stakeholders. 
Results also supported hypothesis 5. Regular feedback helps organisations to recognise necessary requirements 
changes [13, 20] by allowing customers ample time to voice their desired changes [15], which in turn 
allows customers to get what they want. This assists in decreasing SD failures and increasing stakeholder 
satisfaction. Results also confirmed hypothesis 6, the more satisfied stakeholders are with the development 
process, the more satisfied they will be with the overall project outcome and system quality, and the 
more likely they will find resulting system meets their requirements. Understanding this relationship 
between process and outcome satisfaction is important for developers who ultimately need to ensure that 
the development process leads to the delivery of value for system stakeholders. Any signs of dissatisfaction 
during the development process will likely result in problems down the line for system acceptance. Development 
teams and project managers that are consistently failing to satisfy stakeholders need to review their 
current development practices. In particular, developers may wish to consider how iterative development, 
continuous integration, collective ownership, test-driven design, and feedback can be incorporated into 
their development practice. The adoption of these agile methods and the balancing of agile practices 
with traditional practices can have positive effects, especially for smaller project teams. Traditionalists 
need to be prepared to learn about agile practice and consider the conditions under which their adoption 
will lead to improved project processes and outcomes. Stakeholders (customers and users) also need to 
recognize the role they need to play in the agile process and be prepared to commit and contribute to 
the process if they are to see improvements. Future research may wish to extend this study by including 
other AM practices, such as paired-programming and the use of onsite customers [8]. Future researchers 
may also wish to explore the effects of agile methods on system value and benefits realization as opposed 
to the satisfaction variables used in this study s model. Future research should also explore the determinants 
of AM adoption across South African organisations, e.g. how does developer attitude and knowledge influence 
the use of AM? In addition, how do factors such as the degree of change in the environment of the customer 
influence choice of method. The use of a single key informant and the collection of perceptual data was 
a key limitation of this research study. To avoid similar method bias, future research should attempt 
to collect data from multiple informants and, where possible, obtain objective data. This study was also 
limited in sample size. Case study and longitudinal research into AM practice would also benefit South 
African developers in understanding the contexts in which agile development is most appropriate, as well 
as long-term implications for system quality and maintainability. 6. CONCLUSION This paper has developed 
and tested a model of the effect of five characteristics of agile software development on stakeholder 
satisfaction. Self reported data from 59 development projects was used to test the hypothesized relationships. 
Results show strong positive effects of agile practice (iterative development, continuous integration, 
collective ownership, test-driven design, and feedback) on stakeholder satisfaction with both development 
process and the project outcome. Results will hopefully contribute to the advancement of agile methodologies 
and their penetration into software development practice in South Africa. 7. REFERENCES [1] Abrahamsson, 
P., Salo, O., Ronkainen, J., and Warsta, J. 2002. Agile Software Development Methods. Review and Analysis, 
VTT Publications, Finland. [2] Abrahamsson, P., Warsta, J., Siponen, M. T., and Ronkainen, J. 2003. New 
directions on agile methods: a comparative analysis. Proceedings of the International Conference on Software 
Engineering (Portland, Oregon, USA, May 03 05, 2003). [3] Aguanno, K. 2004. Managing Agile Projects, 
1st Edition. Multi-Media Publications, Washington. [4] Alshayeb, M. and Li, W. 2005. An empirical study 
of system design instability metric and design evolution in an agile software process. J. Syst. Software. 
74 (2005), 269-274. [5] Alshayeb, M. and Li, W. 2006. An empirical study of relationships among extreme 
programming engineering activities. Inform. Software Tech.. 48 (2006),1068-1072. [6] Augustine, S., Payne, 
B., Sencindiver, F., and Woodcock, S. 2005. Agile project management: steering from the edges. Commun. 
ACM. 48,12 (2005), 85-89. [7] Baccarini, D. 1999. The logical framework method for defining project success. 
Project Management Journal. 30,4 (1999), 25-33. [8] Beck, K. 1999. Embracing Change with Extreme Programming. 
IEEE Computer. 32,10 (1999), 70-77. [9] Boehm, B. 2002. Get ready for agile methods, with care. IEEE 
Computer. 35,1 (2002), 64-69. [10] Capiluppi, A., Fernandez-Ramil, J., Higman, J., Sharp, H.C., and Smith, 
N. 2007. An empirical study of the evolution of an agile-developed software system. Proceedings of the 
29th International Conference on Software Engineering (Minneapolis, MN, USA, 2007). [11] Crispin, L. 
2006. Driving software quality: how test-driven development impacts software quality. IEEE Software. 
23,6 (2006), 70-73. [12] Erickson, J., Lyytinen, K., and Siau, K. 2005. Agile modeling, agile software 
development, and extreme programming: the state of research. J. Database Manage. 16,4 (2005), 88-100. 
[13] Fitzgerald, B., Russo, N.L., and O Kane, T. 2003. Software development method tailoring at Motorola. 
Commun. ACM. 46,4 (2003), 65-71 [14] Fitzgerald, B., Hartnett, G., and Conboy, K. 2006. Customising agile 
methods to software practices at Intel Shannon. Eur. J. Inform. Syst. 15 (2006), 200-213. [15] Fruhling, 
A. and De Vreede, G-J. 2006. Field experiences with eXtreme programming: developing an emergency response 
system. J. Manage. Inform. Syst. 22,4 (2006), 39­ 68. [16] George, B. and Williams, L. 2004. A structured 
experiment of test-driven development. Inform. Software Tech.. 46 (2004), 337-342. [17] Germain, E. and 
Robillard, P.N. 2005. Engineering-based processes and agile methodologies for software development: a 
comparative case study. J. Syst. Software. 75 (2005), 17-27. [18] Hansson, C., Dittrich, Y., Gustafsson, 
B., and Zarnak, S. 2006. How agile are industrial software development practices? J. Syst. Software. 
79 (2006), 1295-1311. [19] Hedin, G., Bendix, L., and Magnusson, B. 2005. Teaching extreme programming 
to large groups of students. J. Syst. Software, 74 (2005), 133-146. [20] Highsmith, J. and Cockburn, 
A.A.R. 2001. Agile software development: the business of innovation. IEEE Computer. 34,9 (2001), 120-122. 
[21] Kim, H. and Pan, S.L. 2006. Towards a process model of information systems implementation : the 
case of customer relationship management (CRM). The DATA BASE for Advances in Information Systems. 37, 
1 (Winter 2006), 59­ 76. [22] Kuppuswami, S. and Vivekanadan, K. 2004. The effects of pair programming 
on learning efficiency in short programming assignments. Informatics in Education. 3,2 (2004), 251-266. 
[23] Lindstrom, L. and Jeffries, R. 2004. Extreme programming and agile software development methodologies. 
Inform. Syst. Manage. 23,3 (2004), 41-52. [24] Manhart, P. and Scheider, K. 2004. Breaking the ice for 
agile development of embedded software: An industry experience report. Proceedings of the 26th International 
Conference of Software Engineering (San Diego, California, USA, 2004). [25] Martin, R. 2000. eXtreme 
programming development through dialog. IEEE Software. 17,4 (2000), 12-13. [26] McAnallen, M. and Coleman, 
G. 2005. Tailoring extreme programming for legacy systems: lessons learned. EuroSPI Conference (Budapest, 
Hungary, November 09 - 11, 2005). [27] McKeen, J.D., Guimaraes, T., and Wetherbe, J.C. 1994. The relationship 
between user participation and user satisfaction: an investigation of four contingency factors. MIS Quart. 
18,4 (December 1994), 427-451. [28] Nerur, S., Mahapatra, R., and Mangalaraj, G. 2005. Challenges in 
migrating to agile methodologies. Commun. ACM. 48,5 (2005), 72-78. [29] Pitts, M.G. and Browne, G.J. 
2007. Improving requirements elicitation: an empirical investigation of procedural prompts. Inform. Syst. 
J. 17 (2007), 89-110. [30] Sambamurthy, V., Bharadwaj, A., and Grover, V. 2003. Shaping agility through 
digital options: reconceptualizing the role of information technology in contemporary firms. MIS Quart. 
27,2 (2003), 237-263. [31] Schneider, J-G. and Johnston, L. 2005. eXtreme Programming-helpful or harmful 
in educating undergraduates? J. Syst. Software. 74 (2005), 121-132. [32] Strong, K. C., Ringer, R.C., 
and Taylor, S.A. 2001. The* rules of stakeholder satisfaction (*timeliness, honesty and empathy). J. 
Bus. Ethics. 32,3 (2001), 219-231. [33] Turk, D., France, R., and Rumpe, B. 2005. Assumptions underlying 
agile software-development processes. J. Database Manage. 16,4 (Oct-Dec 2005), 62-87. [34] Turner, J.R. 
2002. The project Manager as change agent. Proceedings of the Australian institute for Project Management 
(AIPM) Conference (Sydney, Australia, 2002). [35] Vanderburg, G. 2005. A simple model of agile software 
processes -or- extreme programming annealed. Proceedings of the 20th Annual ACM SIGPLAN Conference on 
Object-Oriented Programming, Systems, Languages, and Applications (San Diego, California, USA, October 
16 20, 2005). [36] Williams, L. and Cockburn, A. 2003. Agile software development: it s about feedback 
and change. IEEE Computer. 36,6 (2003), 39-43. APPENDIX A  Variable Questionnaire Item and Literature 
Source Iterative Development We did not spend a large portion of time on upfront project planning. [8, 
9] We delivered small workable modules of the project at regular intervals. [6, 8, 29] We evaluated the 
priorities of the project at regular intervals. [8, 15] We used an iterative technique in our approach 
to this project (i.e., we had more than 1 iteration) Continuous Integration We were willing to integrate 
software throughout the development of the project, even if it meant more work. [8] We regularly integrated, 
usually after each iteration. [8, 17,18] We integrated portions of the project more than once during 
the development of the project. [8, 19] We rebuilt the entire code base (more than once during the project) 
in an automated fashion. [8, 18, 19] We used a continuous integration technique in our approach to the 
project. Test-Driven Design We wrote unit tests early on in the project. [8, 11] We used unit tests as 
part of the way we defined our customer s requirements. [8, 36] We retested the entire code base, more 
than once during the project. [8, 16] We used a test-driven technique in our approach to the project. 
Feedback We allowed feedback throughout the development of the project. [15, 20] We met often during 
each week. [13, 20] When the customer s needs changed we allowed the customer to inform us. [20] We had 
direct unrestricted access to our customer. [25] This project involved continuous customer feedback. 
Collective Ownership Individuals were highly interdependent on other team members in this project. [8, 
14, 15] From the beginning of the project, systems developers, analysts and the customer felt that they 
owned the project. [8, 14, 15] We were individually responsible for our own quality on this project. 
[8, 14, 15] We were willing to provide solutions to problems faced by other team members. [8, 14, 15] 
A sense of collective ownership was present in the project. Stakeholder Satisfaction (Process) Stakeholders 
were satisfied with the amount of information relating to the project, which was given to them by the 
developers/analysts. [7, 32] Stakeholders frequently expressed dissatisfaction during the development 
process of the project. (reverse scored) [7, 32] On the whole the stakeholders were satisfied with the 
project development process we used. Stakeholder Satisfaction (Outcome) The stakeholders were satisfied 
that the project met their requirements. [7, 32, 34] The stakeholders were satisfied that the system 
was delivered within the specified timeframe. [7, 32, 34] The stakeholders were satisfied with the quality 
of the delivered project. [7, 32, 34] On the whole the stakeholders were satisfied with the project outcome. 
  
			
