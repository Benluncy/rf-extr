
 A LANGUAGE-ONLY COURSE IN LISP WITH PC SCHEME Kenneth A. Lambert Department of Computer Science Washington 
and Lee University Lexington, Virginia 24450 Abstract This paper describes a course in LISP that introduces 
students to conventional software engineering techniques, contemporary programming paradigms, and an 
artificial intelligence application. 1 Introduction. The traditional view of LISP as a special-purpose 
language for artificial intelligence applications is changing. In the academic setting at least, LISP 
has begun to penetrate into such areas of the college curriculum as graphics, compiler construction, 
and database management. The reason for this change is that people are coming to see that LISP supports 
good software engineering concepts.[ 11 Students have picked up their LISP either on the fly for some 
application or in the form of a language-only course. Very few departments have gone so far as to use 
LISP in CSl. [2] Nevertheless, pressure is building from the upper levels of the curriculum for a language-only 
course in LISP that emphasizes good software engineering concepts. The problem is that traditional dialects 
of LISP and most traditional introductory LISP texts do not support these concepts.[3] Most are AI application-driven, 
without concern for conventional software engineering design. A good language-only course in LISP should 
deal with the following topics: 1.conventional software engineering techniques 2. the distinctive features 
of LISP 3. an AI application  This paper reports on the content of a language-only course that uses 
PC Scheme. Scheme is a dialect of LISP that supports and enforces many of the right conventional programming 
principles. We use Scheme rather than Permission to copy without fee all or part of this material is 
granted provided that the copies are not made or distributed for direct commercial advantage, the ACM 
copyright notice and the title of the publication and its date appear, and notice is given that copying 
is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires 
a fee and/ or specific permission. 0 1989 ACM 0-89791-29%5/89/0002/0236 $1.50 Common LISP because Scheme 
is smaller, cleaner, and easier for an inexperienced student to learn. The twelve weeks of the term in 
which the course is offered are divided into four-week sections on numerical processing, data processing, 
and knowledge processing. Each kind of processing is associated with a different programming paradigm. 
These are, respectively, function-oriented programming, object-oriented programming, and logic- oriented 
programming. Contact with a major programming paradigm supporting each kind of processing both reinforces 
good conventional software design methods and leads students quickly into conventional and AI applications. 
2 Functions and numerical processing. Students are introduced to the simplest kind of programming first. 
According to the function-oriented model, a program is a black box with no side effects. 2.1 Primitives, 
combination, and abstraction. The real black boxes are the primitive operations of the language. Primitives 
can be combined in a uniform way to perform more complex tasks. Once several such black boxes have been 
hooked together, the combination can be hidden away in a new black box. This is accomplished by defining 
new functions or binding names to them. Naming is the principal means of abstraction in LISP. Functional 
composition and abstraction support two important software design ideas: 1. top-down or bottom-up programming 
 2. programming free of side effects  2.2 Recursion. There is no excuse for using a loop in a LISP program. 
Students can learn to recurse almost as soon as they learn how to define their own functions. Beyond 
its ease of use, recursion has enormous instructional value. For example, the difference between tail 
and nontail recursion can serve as a means of introducing the run-time stack. Scheme requires that tail 
recursive functions generate no net growth of the run-time stack; they must execute as iterative processes. 
A discussion of tree recursive functions can serve to introduce the differences among constant, linear, 
and exponential orders of complexity. 2.3 Numbers and lists of numbers. (define (build-object low high 
operation constant) The applications of this section are concerned with numerical processing. Students 
build and manipulate numbers and lists of numbers. They learn that numerical and list processing is well 
supported by function-oriented, recursive programs that are free of side effects. The following two function 
definitions are examples of the kind of ideas presented. The first recursively builds a number by summing 
a series. The second recursively builds a list of numbers in a series: (define (build-number low high) 
(cond ((> low high) 0)(else (+ low (build-number (+ low 1) high))))) (define (build-list low high) (cond 
((> low high) 0)(else (cons low (build-list (+ low 1) high))))) (build-number 2 4) --> 9 (build-list 
2 4) --> (2 3 4) The arrow ( -->I) symbol denotes the execution of the program expressed on the left 
side, with the output expressed on the right side. An important point to be introduced here is that any 
LISP data type can be closed under functional composition. This means that functions which take numbers 
or lists as input can return them as output. For example, we might add together the results of building 
two numbers as follows: (+ (build-number 2 4) (build-number 3 5)) --> 21 Or, assuming we were given a 
function to add two lists of numbers,we might try this: (add-list (build-list 2 4) (build-list 3 5)) 
--> (5 7 9) The closure principle could easily be extended to functions for manipulating symbols, strings 
or user-defined data types such as matrices and polygons. 2.4 Higher-order functions. The function-oriented 
paradigm can be enhanced by the use of functions as parameters. For example, a general build-object function 
might specify the kind of operation to be performed (+ or cons) on each pair of numbers in a series, 
and the kind of value (0 or 0) to be returned at the bottom of the recursive process: (cond ((> low high) 
constant) (else (operation low (build-object (+ low 1) high operation constant)))))  This function could 
then be used to define other functions that build more specific objects: (define (build-number low high) 
(build-object low high + 0)) (define (build-list low high) (build-object low high cons 0)) The idea of 
a higher-order function leads quite naturally into a discussion of mappers. A mapper applies a function 
to every item in a list and returns a list of the results. For example, the following function maps any 
function of two arguments onto lists of arguments: (define (mapper f 11 12) (cond ((null? 11) 0)(else 
(cons (f (car 11) (car 12)) (mapper f (ch 11) (ch 12)))))) (define (add-list 11 l2) (mapper + 11 12)) 
2.5 Lexical scoping. Scheme is a lexically scoped, block-structured dialect of LISP. This means that 
one can control the visibility of information in much the same way as one can with conventional languages. 
For example, the following definition of factorial uses a tail recursive utility function: (define (factorial 
n) (define (fact-iter n result) (cond ((zero? n) result) (else (fact-iter (- n 1) (* result n))))) (fact-iter 
n 1)) Because no function other than factorial needs to use fact- iter, both the definition and the initial 
call of fact-iter can be hidden within the local scope of factorial. 3 Objects and data processing. 
Pure functions map input data into output data without changing the input data. Programs that use pure 
functions are easy to understand and verify. However, much data processing requires us to think of data 
as objects whose original states change as a result of the operations on them. 3.1 Assignment and side 
effects. A function can modify data by means of a side effect. Side effects are accomplished in Scheme 
by a variety of assignment operations. For example, the following variable and function definitions might 
be used to manage a bank account: (define balance 0) (define (deposit amount) (set! balance (+ balance 
amount))) (define (withdraw amount) (cond ((> amount balance) insufficient funds ) (else (set! balance 
(- balance amount))))) balance --> 0 (deposit 20) --> 20 (deposit 20) --> 40 balance --> 40 Provided 
that all of the conditions are satisfied, each function call will have the side effect of changing the 
bank balance. 3.2 Message passing and data encapsulation. The bank balance of the previous section is 
represented by a free, top-level variable. Its state is open to indiscriminate modification from anywhere 
in the program. To enhance the security and reliability of the system, we can build some walls around 
the data for each bank balance. Access to each account will be provided through a well- defined set of 
interface functions. Bank accounts will be the objects of an object-oriented system. An object is a piece 
of data and the code for operating on the data. The following function returns such an object for a bank 
balance: (define (make-balance) (let ((balance 0)) (define (deposit amount) (set! balance (+ balance 
amount))) (define (withdraw amount) (cond ((> amount balance) insufficient funds ) (else (set! balance 
(- balance amount))))) (define (dispatch message) (case message ( deposit deposit) ( withdraw withdraw) 
(else (error make-balance unrecognized message ):))) dispatch)) A bank balance object is a function 
which hides the values of a variable (the data) and three functions (the operations). The program could 
be used with the following results: (define my-account (make-balance)) --> MY-ACCOUNT my-account --> 
#cPROCEDURE DISPATCH> (my-account deposit) --> #<PROCEDURE DEPOSIT> ((my-account deposit) 50) --> 50 
((my-account withdraw) 20) -0 30 The data for each bank account in an object-oriented program are encapsulated 
within distinct objects. Side effects on the data are generated only by sending messages to the objects. 
The capacity of objects to perform operations on their own data helps to reduce the likelihood of unwanted 
side effects. 3.3 Windows, files, and user interfaces. The Scheme interpreter provides interactive program 
input and output. Data processing requires file input and output and text-oriented input and output at 
the console. One way to drive this point home is to ask students to hook two new modules onto their bank 
account system. The first module provides command options to users via windows. The second module permits 
the system to store and retrieve bank account information from permanent files. The following function 
is the first to be written in the program text: (define (hank-manager) (move-console) (let ((window (create-window 
MANAGER WINDOW 5 25 8 30))) (window-popup window) (newline window) (window-writeln window 1 enter a new 
account ) (window-writeln window 2 delete an old account ) (window-writeln window 3 file manager ) (window-writeln 
window 4 start the teller ) s (window-writeln window 5 quit the program ) (newline window) (display enter 
a number: window) (interpret-manager window) (window-popup-delete window)) (restore-console)) Bank-manager 
begins the program by moving the console window out of the way. A top-level window is then created with 
a label and various size and position attributes. After the window has been popped up on the screen, 
the menu is displayed in it to the manager. When the manager has finished entering commands, the window 
is deleted and the console window is restored to its original position on the screen. The next function 
interprets the commands of the bank manager: (define (interpret-manager window) (l;et$el-$ead&#38;.r 
window))) (tf\l (add-account)) (#\2 (delete-account)) (#U (file-manager)) yz trnk-teller)) (else (ring-bell))) 
(when (not (char=? ch #M)) (interpret-manager window)))) Interpret-manager is a typical command loop 
in Scheme. First, a character is read from the window. A case expression then examines the character 
and selects the appropriate action. The principal actions are routines which lead the user into subsystems 
with their own popup windows. The last two actions in the case expression deserve special notice. No 
action is performed if the manager wishes to quit the interpreter (choice &#38;5). If the character is 
not in the command set, the interpreter signals by ringing the bell. Finally, the interpreter recurses 
when the input character is not the quit character. The new bank management system gives students an 
excellent opportunity to work with top-down design and reusable code. Conventional devices such as drivers 
and stubs can easily be used to prototype and test the subprograms rapidly and incrementally. 4 Frames 
and knowledge processing. After software engineering concepts have been introduced with numerical and 
data processing. students can apply them in the domain of artificial intelligence. Traditional LISP texts 
have illustrated this field with pattern matchers, associative database retrieval systems, and rule-based 
expert systems. The application presented in this course is the development of a frame representation 
language (FRL).[4] Several important concepts, such as inheritance, procedural attachment, and pattern 
matching, can be gradually phased in during the final four weeks of the term. 4.1 Organizing concepts 
with inheritance. Students are initially given the interface and code for an FRL that supports simple 
storage and retrieval. For example, frames for John and for persons can be manipulated as follows: (fput 
John hair-color brown) (fget John hair-color) --> (brown) (fput person weight 165) (fget person weight) 
--> (165) (fget John weight) --> 0 When the system is updated to support inheritance, the frame for John 
can inherit the average weight of a person from the frame for persons. A special ako (a kind of) slot 
is added to John s frame to point to the frame for person: (fput John ako person) (fget John weight) 
--> (165) Values can be stored in frames that override any values that might be inherited from the hierarchy: 
(fput sally ako person) (fput sally weight 110) (fget sally weight) --> (110) 4.2 Demons as active data. 
As the previous section demonstrated, frames are high- level data structures. In LISP, data can be stored 
either as values or as functions for computing values. In the frame context, such functions are called 
demons. Demons can be triggered when a user adds, removes or requests a value from a frame. For example, 
one might store a demon rather than an explicit value on the weight slot of persons. When a user asks 
for the weight of an individual person, the system triggers the demon to compute the weight as a function 
of the individuals height. In another case, one might want to keep a record of all of the instances of 
a specific frame on a special instances slot for that frame. This bookkeeping task could be automated 
for the entire database by storing if-added and if- removed demons on the top-most general frame in the 
hierarchy. Whenever one frame is made ako another, the name of the former would automatically be added 
to the instances slot of the latter. The inverse process would be triggered when a value is removed from 
an ako slot. Students quickly learn that almost the entire database can consist of active data in the 
form of attached procedures. Few programming experiences can rival the effect of watching the spreading 
ripples of demon activity generated by some simple database access. 4.3 Pattern matching and intelligent 
database retrieval. A final segment on pattern matching nicely combines database logic with some simple 
inference techniques. Patterns are used to form queries to the database. The system responds to a query 
by returning a list of all of the names of frames that match the pattern. The following query would return 
all of the frames for people with blond hair and blue eyes: (find ((ako person) (hair-color blond) (eye-color 
blue))) --> (john sally mary bill) Removing slots from the pattern amounts to removing constraints from 
the search process: (find ((ako person) (hair-color blond)) --> (john sally mary bill hank) (find ((ako 
person)) --> (sam john sally mary bill hank) Logical operators can be attached to the elements of patterns 
to express conjunction, disjunction or negation of values on a slot. For example, the following query 
would find all of the persons whose hair color is not blond: (find ((ako person) (hair-color (not blond)))) 
--a (sam) The next query would return the persons whose hair color is either brown or blond: (find ((ako 
person) (hair-color (or blond brown)))) --> (john sally mary bill hank) Finally, arbitrary LISP functions 
can be included in patterns to constrain the search. The following example asks for all of the persons 
weighing between 180 and 200 pounds: (find ((ako person) (weight (lambda (x) (and (> (car x) 180) (< 
(car x) 2W))N) --> (Sam) The LISP function in this pattern is expressed as a lambda form. Lambda forms 
provide a way of expressing functions for a special purpose without naming them. 5 Conclusion. We have 
discussed the content of a languagesnly course in LISP that utilizes the PC Scheme dialect of the language. 
Like Pascal, Scheme is both easy to learn and encourages the use of good software engineering methods. 
Moreover, Scheme supports AI applications just like any other dialect of LISP. The use of several major 
programming paradigms to illustrate numerical, data, and knowledge processing gives students a good introduction 
to the most important trends in programming for the coming decade.[5] Notes. 1. Abelson and Sussman broke 
the major ground in this area. See Abelson, Harold, and Sussman, Gerald Jay, with Sussman, Julie, &#38;cture 
and Interprewn of Cow Proerams (Cambridge: The M.I.T. Press, 1985). 2. For an argument in favor of using 
LISP in CSl, see Lambert, Kenneth A., Scheme as a First Language, Proceedings of the Third Annual l?am1 
Calm Comnutine Conference (Marist College,October, 1987), pp. 90-94. 3. The best recent texts are Kessler, 
Robert R., LISP, Objects. and Symbolic Programming (Glenview, IL: Scott, Foresman and Company, 1988); 
Eisenberg, Michael, Prorrramminrr in Scheme, edited by Abelson, Harold (Redwood City, CA: The Scientific 
Press, 1988); Smith, Jerry D., An Introduction to Scheme (Englewood CliffsPrentice-Hall, 1988); and Winston, 
Patrick Henry, and Horn, Berthold Klaus Paul, LIsE, 3rd Edition (Reading: Addison-Wesley.1989). 4. For 
a fine series of articles on frame representation, see Amsterdam, Jonathan, Building a Flexible Knowledge 
Representation Scheme, AI Expert, November, 1986, pp. 19-22; Retrieving Frames from a Frame Data Base, 
91 ExDert, December, 1986, pp, 19-21; Solving SFRL  Problems with a Representation Language Language, 
BT Expert, February, 1987, pp. 15-19. 5. Lab work for this course used PC Scheme 3.0 running on IBM PS/2 
model 50 s. 286-based machines or higher are recommended. Source code and some documentation for the 
course can be obtained by sending a 3 l/2 microdiskette to me.  
			
