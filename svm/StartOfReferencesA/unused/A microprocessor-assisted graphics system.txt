
 A MICROPROCESSOR-ASSISTED GRAPHICS SYSTEM Griffith Hamlin, Jr,, LASL** Thomas Crockett, ICASE ABSTRACT 
 GRAF80 is a small scale graphics system de- signed to demonstrate some of the capabilities offered by 
microprocessor-assisted graphics. As such, it employs both hardware and software tech- niques. The system 
implements in a microprocessor a subset of the features of the SIGGRAPH-ACM CORE (i) graphics package, 
including picture segmenta- tion and a subset of the output primitives and primitive attributes. INTRODUCTION 
 GRAF80 is a graphics system that uses inexpen- sive microprocessors to enhance the capabilities of a 
Tektronix storage tube display. For a frac- tion of the cost of a Tektronix 4014, several features can 
be added that considerably increase its usefulness. These features include a selective erase using the 
segmented display file concept of the SIGGRAPH CORE graphics package, and the ability to display a limited 
number of vectors in refresh mode using a high-bandwidth hardware interface between a microprocessor 
and the Tektronix 4014. HARDWARE The hardware consists of an IMSAI 8080 micro- processor, which forms 
the heart of the system; a Tektronix 4014 direct-view storage tube terminal, which is used as the graphical 
output device; and a host computer. The IMSAI 8080 acts as a dedicated device driver, and has software 
that supports picture refreshing and segmentation. Any one of several other available 8-bit microproces- 
sors could be used as well. Several possibilities exist for interconnecting the microprocessor, Tektronix 
terminal, and host computer. Figure 1 shows one possibility that uses commonly available equipment. 
 The Tektronix 4014 has a built-in serial interface that will support serial communications up to 9600 
baud with the microprocessor. This rate should be sufficient to provide interactive access to images 
stored in the microprocessor's segmented display file. It is not sufficient to refresh images using 
the write-through mode of the 4014. To remedy this, we have constructed a simple parallel interface to 
the 4014 and connected it as shown in Fig. 2. This interface consists of only nine 16-pin integrated 
circuits mounted and wire-wrapped on a blank Tektronix plug-in card. This provides one-way byte parallel 
transmission at the Tektronix 4014 MINIBUS@ speed (9 ~s/byte) from the microprocessor to the Tektronix 
4014. Communication from the Tektronix 4014 uses the normal serial interface in the 4014 and is con- 
nected directly to the host computer. Any machine capable of producing GRAF80 com- mands may be the 
host computer. This could be the same or another microprocessor, a minicomputer, or a large mainframe. 
In our case a PRIME-300 mini- computer is used. SOFTWARE Software for GRAF80 consists of two main com- 
ponents, one on each computer. The microprocessor Serial 9600- Serial Line. ' ' baud Line Data rate 
usually determined by host computer. Fig. i. Basic hardware configuration. Fig. 2. GRAF80 hardware 
configuration. This report was prepared as a result of work performed under NASA Contract No. NASI-14101 
while both authors were in residence at ICASE, NASA Langley Research Center, Hampton, VA 25665. Los 
Alamos Scientific Laboratory of the University of California under U. S. Department of Energy Contract 
No. W-7405-ENG-36. 313 component receives graphic commands, stores them in a segmented data structure, 
and interprets them to produce either a refreshed or a stored image on the 4014. The host computer 
software consists of a package of Fortran subroutines that issue the commands. Microprocessor Software 
Software for the microprocessor is written in PL/M, a high-level language designed for micro-processors 
(2). The software is designed to intercept and interpret a set of primitive graph- ical commands. It 
requires 4000 bytes of micro- processor memory plus buffers for the segmented display data structure 
generated from the commands. These commands consist of move and draw graphic- output primitives, along 
with commands to OPEN, CLOSE, DISPLAY, and ERASE individual image seg- ments. The complete list is given 
in Appendix A. They were selected from the SIGGRAPH-ACM CORE graphics package. The main program consists 
of a loop that con- tinuously monitors an I/0 subtask and a graphics subtask. (The term "task" is used 
to indicate that these two processes could be executed in parallel if properly synchronized, although 
they have been implemented sequentially here. The net effect would be similar in either case.) When the 
main loop determines that a particular task has work to be done, it transfers control to that task, which 
runs to completion and returns to the main loop. Input to the microprocessor is interrupt driven. A 
simple interrupt routine receives a character and stores it in a circular buffer. The job of the I/O 
task is to empty the buffer and evaluate its contents. In order to allow ordinary (nongraphical or graphical) 
use of the terminal, a "transparent" mode is defined. Transparent mode defaults until a special graphics 
notify character (ASCII ETB) is received. The I/0 task examines each character and sends it directly 
to the ter- minal until an ETB is encountered, at which time further data is considered to be graphical. 
The graphical input is filtered according to a pre- defined transmission format (Appendix B) and stored 
as a picture segment. When the input buffer is emptied, control returns to the main loop. The graphics 
task serves as an interpreter, converting the commands stored by the I/0 task into device-dependent instructions 
which are sent to the 4014 to generate the picture. By redefin- ing this task, different devices may 
be handled within the framework of a single system. Each call to this device driver interprets a single 
picture segment; repeated calls with the same segment allow the refresh capability. The graphics task 
returns to the main loop after once interpreting each segment that needs to be dis- played. Picture 
segmentation is handled at a level above the device driver. A number of graphics commands are used for 
manipulating segments. The I/0 task intercepts these and takes appropriate action, such as setting flags, 
allocating storage, etc. The actual picture commands (or "primitives") are stored in the microprocessor's 
free memory as one or more 64-byte blocks, linked together by a forward chain, one chain per segment. 
A set of memory management routines is available to manipu- late this data structure. Memory allocation 
is automatic and dynamic, implying that each segment receives only as much memory as it requires. The 
total amount of information that may be displayed simultaneously is thus limited by the amount of memory 
available to the microprocessor. Although the current implementation uses only real memory, this need 
not be the case; nonrefreshed segments could use an auxiliary disk, but system perform- ance would be 
somewhat degraded. Currently up to 16 segments may be defined. Commands for manipulating segments are 
listed below. OPEN (N, R) Opens segment N. All subsequent graphic primitives become part of the segment 
until a matching CLOSE is encountered. R = refresh status; 0 = no refresh; 1 = refresh. CLOSE(N) Closes 
segment N. No further informa-tion may be added to this segment. DISPLAY(N) Causes segment N to be displayed. 
ERASE(N) Removes segment N from the display, but the segment may be redisplayed later. DELETE (N) Deletes 
segment from microprocessor memory. Open segments may not be nested or overlap- ping; no more than one 
segment may be open at any time. No portion of a segment is visible until an explicit DISPLAY command 
is given, and a currently open segment cannot be displayed. This differs from the SIGGRAPH-ACM CORE system 
which specifies that portions of the open segment become immedi- ately visible as they are defined. Due 
to the existence of both stored and refreshed segments in our implementation, we departed from the SIGGRAPH 
CORE here in order to considerably simplify the microprocessor software. Erasing a segment merely removes 
it from the display; it remains available in the microprocessor memory for further use. A DELETE command 
destroys the segment entirely. Refreshing, as pointed out, is accomplished by the graphics task; successive 
iterations of the main program loop refresh the segment. Since the I/O task usually is not busy, the 
graphics task becomes the limiting factor in providing flicker- free refresh. Within that task two 
considerations limit the refresh capacity: I. the rate at which graphic commands can be interpreted 
into Tektronix code by the micro- processor, 2. the drawing speed of the Tektronix 4014 (about 190 
Ds/in. which is rather slow for refresh purposes). 314 I/0 time is negligible because of the parallel 
interface. Currently the flicker-free refresh capacity is approximately 75 characters or 65 inches of 
2-inch vectors (including both dark and written vectors). This is about half the capacity of the Tektronix 
4014 and is limited in our cur- rent implementation by the microprocessor software. Different software, 
discussed in the last section, should remedy this situation. Nonrefresh segments differ in that they 
are drawn only once, and not on each successive loop iteration. Normally such segments will be drawn 
in storage mode, but this does not have to be true. The primitive attribute REFRESH determines the mode 
the Tektronix 4014 uses when generating characters and vectors; therefore it is possible to draw nonrefreshed 
information that immediately disappears and to draw storage-mode information that is continually refreshed 
[not recommended). The general assumption, however, is that refreshed segments will contain refresh commands 
and non- refresh segments will contain storage commands. Selective erase is implemented somewhat dif- 
ferently for each type of segment. Refreshed segments merely have their display flag turned off. Nonrefresh 
(storage) segments that are erased cause the entire display to be erased, and the display flag for that 
segment is turned off; all other segments are flagged as not having been drawn. The result is that everything 
but the erased segment is redrawn on the next pass of the main loop. The redraw time is very short; the 
only objection being the screen erase flash that precedes it. A typical mesh plot containing about 1500 
i/4-inch vectors takes about 1 second to redraw. Host Software A package of Fortran interface subroutines 
on our PRIME-300 minicomputer allows a user's appli- cation program to generate commands for the GRAF80 
system. Access is allowed to each segment-level and primitive-level command. The subroutines gen- erate 
the proper transmission formats, perform data conversions where necessary, and send GRAF80 commands out 
the communications line to the micro- processor. All coordinates used at this level are integers, which 
run from 0-4095. This corresponds directly to Tektronix 4014 enhanced graphics screen coordinates, although 
any arbitrary units could have been chosen. Appendix C contains doc- umentation of these routines. CONCLUSIONS 
 From the host computer's viewpoint the system appears as a virtual device, with built-in func- tions 
for picture segmentation and refreshing. As such, it would be most useful when interfaced to a higher-level 
graphics system. This higher-level system could he an existing graphics package, modified to accept 
GRAF80 as another device type and to include segment manipulation features, or it could be a new system 
built on top of GRAF80. In the latter case, an implementation of the SIGGRAPH-ACM CORE system would 
be facilitated since GRAF80 has several of the CORE functions already available. Our 8080 microprocessor 
is only lightly loaded with the current GRAF80 software (except when refreshing). Thus we believe that 
much of the CORE system could be handled by the micro- processor with additional software. Currently 
we have designed, but not yet implemented on our microprocessor, the image transformation features of 
the CORE system and most of the input functions. We chose these functions for microprocessor im- plementation 
since they can provide fast inter- active feedback to the user when placed on a processor with a high-speed 
connection to the dis- play device. Also, they involve only fixed point coordinates. Today's microprocessors 
handle floating point computations only slowly in soft- ware. We have left the transformations from floating 
point (world coordinates) to fixed point (normalized device coordinates) to our minicomputer which has 
floating point instructions. As mentioned above, the limiting refreshing rate for GRAF80 could be improved 
through revision of the data structures. The graphics task could be modified to store Tektronix 4014 
code in a sep- arate buffer, rather than display it directly. A third refresh task would then display 
this buffer, with no interpretive overhead. A small test pro- gram on our microprocessor that used 
this tech- nique was able to refresh approximately 140 inches of vectors, about twice as much as GRAF80 
can currently refresh. However, our experience so far has been that the segmenting features (which 
pro- vide selective erase) are more valuable for most users than the refresh capability. The handful 
of users with engineering appli- cations who have been exposed to GRAF80 have generally been quite pleased 
with its capabilities. This is in part due to their previous use of an overloaded mainframe (a not uncommon 
occurrence) with a slow (300 to 2400 baud) data rate line to their terminal. These conditions favor our 
use of local intelligence and sending only changes in images instead of sending the entire image each 
time a small change is made. REFERENCES I. Computer Graphics (11,3) Fall 1977. 2. A Guide to PL/M Programming, 
Intel Corp., Santa Clara, CaTifornia, 1975. 315 APPENDIX A GRAF80 PRIMITIVE COb94ANDS All (X,Y) coordinates 
are assumed to be binary fractions in the range 0 to I, with 12 bits of precision. The coordinate format 
is  I x LO.~ I x HIGH4 I Y LO. 8 I Y HIGH4 I using 4 bytes total. The most significant 4 bits of the 
HIGH bytes should be zeros. The various primitives are listed below, with the following format: N~qEMONIC 
OPERAND(S) BINARY OPCODE REMARKS MOVE X,Y 00010001 Move beam to (X,Y). LINE X,Y 00010010 Draw line 
from current position to (X,Y), using current linestyle, refresh, and boldness. POLYLINE N,XI,YI,X2,Y2,...,XN,YN 
00010011 Draw N connected lines, starting at the current position and ending at XN,YN. Use current linestyle, 
boldness, and refresh.  MARKER N,X,Y 00010100 Place a marker at (X,Y). If N=0, the marker is a point; 
otherwise, N is taken to be an ASCII character, and is drawn using the small- est charsize and the current 
refresh status. TEXT N,STRING 00011000 Place text STRING of N characters at the current position. Use 
the current refresh status, boldness, and charsize. SET ATTRIBUTE TYPE 00100000 Types are: BOLDNESS 
0000000x x=l,bold ** x=O,normal LINESTYLE 000001xx xx=O0,solid xx=01,dotted xx=lO,dot-dashed xx=ll,dashed 
CHARSIZE 0001hhww hh=height ww=width ww is ignored. Character sizes are based on hh, with 00 the largest 
and Ii the smallest. REFRESH 1000011x x=0,no refresh ** x=l,refresh  **On the Tektronix, REFRESH and 
BOLDNESS are not mutually exclusive; REFRESH changes BOLDNESS, and BOLDNESS changes REFRESH. STOP 00001111 
 Signifies the end of a stream of graphic primitives, and causes a return from the graphics task. 
APPENDIX B TRANSMISSION FORMAT FOR GRAFS0 COMMANDS 1. All characters received are passed transpar-ently 
until the special control character ETB is encountered (ETB = decimal 25). 2. Segment-level con~nands 
have the following 3-byte format: I ETB f SEGNO (CODE ( SEGNO is the segment number, 0-1S. CODE is 
further broken down:  iJll l oP) OF= 0 - OPEN * i - CLOSE 2 - DISPLAY 3 -ERASE 4 -DELETE The high 
order four bits of code are appli- cable only with the OPEN command. A "i" in the R bit signifies a refresh 
segment. 3. After an OPEN, all commands have the format:  I CNTRL I LEN I I CLE. bytes~ CTRL~23 -primitive 
graphic commands follow. CTRL=23 -return to segment-levei processing, (2) above. 0 <= LEN <= 255 . 316 
 APPENDIX C PRIME SUBROUTINES The following routines generate segment-level commands as previously described. 
CALL OPEN(N,IR) CALL CLOSE(N) CALL DISP(N) CALL ERASE(N) CALL DELETE(N) Routines listed below generate 
primitive commands. CALL MOVE(IX, IY) Generates a MOVE command to coordinate posi- tion (IX, IY). CALL 
CALL DRAW(IX, IY) Generates a LINE from the ~arrent position to (IX,IY). CALL POLY(IXA, IYA,N) that Produces 
a POLYLINE primitive. IXA and IYA are arrays containing N coordinate values. N must be less than 64. 
CALL CALL MARKER(IX,IY,N) CALL Draws a marker at (IX,IY). N is either O, denoting a point, or an ASCII 
character code. CALL T~XT (ITXT,N) Generate a text string at the current posi- tion. ITXT is an arra 
Z containing N characters, packed two to a word. CALL CALL ATTRIB(IATTR, N ) Generates a SET ATTRIBUTE 
primitive. IATTR is the attribute to be set, and N is its value. IATTR=I -boldness N=0 - normal N=I 
- bold IATTR:2 -linestyle N=0 -solid N=I dotted N=2 - dot-dashed N=3 dashed IATTR:3 -charsize N=0 -largest 
N=3 -smallest IATTR:4 -refresh N=0 - refresh off N=I -refresh on QUIT Generates a STOP command. The 
CLOSE routine automatically generates a STOP code, so QUIT is not normally needed. In addition, several 
routines are available provide higher level features. LINE(IXI,IYI,IX2,1Y2) Draws a line from (IXI,IYI) 
to (IX2,1Y2). RECTAN(IX, IY,IXSIZE,IYSIZE) Draws a rectangle with its lower left corner at (IX,IY). 
IXSIZE and IYSIZE are the length and height, respectively, in GRAFS0 coordinate units. NUM(I,IA,N) 
Converts the integer value I to an ASCII character string which is returned in the array IA. N is the 
number of characters stored in IA. Characters are packed two to a word. IA may be used in a subsequent 
call to TEXT to display the string. 317  
			
