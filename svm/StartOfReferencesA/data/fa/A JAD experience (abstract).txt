
 A JAI) EXPERIENCE Kenneth F. Chin Department of Computer Science and Information Systems, DePaul University, 
Chicago, IL 60604 ABSTRACT Full comprehension of client requirements is needed tcl avoid creating unwanted 
systems. Joint Application Design (JAD) is a group-based meeting technique for gathering their requirements 
and for transferring knowledge throughout the development process. Because of reorganization changes, 
cost considerations, and business demands, a reengineering project was initiated to migrate from the 
maintlme environment to the midrange platform. JAD was selected as a viable method to assist in this 
endeavor. This paper shares the lessons learned from this experience. INTRODUCTION JAD, alsoreferred 
asJoint Application Development, was developed by IBM Canada in the late 1970s. This technique is a structured 
meeting approach that provides an, environment for clients and software engineers to work, together as 
a team to share information and ideas through brainstorming sessions throughout the development life 
cycle. This process helps to breakdown communication, and departmental barriers. Team members are empowered, 
to make joint decisions. Together, thqy identify business needs, retine requirements, explore possible 
solutions, and selecttheappropriateimplementation method. As aresult,, sofhvare engineers increase their 
business knowledge and, clients get more involved with the development process. Potential defects in 
the requirements definitions related to correctness, ambiguitj, and completeness can be reduced. JAD 
meetings are structured and are led by a facilitator who is ideally familiar with group dynamics and 
techniques for managing meetings. In these sessicms,clients explain their policies, procedures, needs, 
and problems. Using, stmctured analysis techniques such as data flow dlagrsms, work flow diagrams and 
data models, software engineers document and transform the business requirements into logical entities. 
Computer Aided Software Engineering (CASE) tools, word processing and graphic sofhwu-e packages may expedite 
this iterative process until a complete picture of the requirements emerge. The amount of preparation 
done prior to these sessions has a direct correlation on their productivity and their quality. TEAM DESIGN 
AND ORGANIZATIONAL STRUCTURE The organization model for this project consists of four functional entities: 
the steering committee, middle management, the project manager, and the JAD teams. Middle management, 
commonly known as the Joint Requirements Planning team, is composed of managers representing interests 
across functional areas. Their responsibilities include resolving interdepartmental conflicts, setting 
priorities, and coordinating their departments activities regarding this project. Like other systems 
development projects, the project manager needs to build a project plan, to define deliverables, to coordinate 
project activities, to organize and to estimate project tasks, to allocate systems and personnel resources, 
to deiegate assignments,to review deliverables, to facilitate meetings, to follow up on outstanding items, 
to establish guidelines, to coordinate changes and to assess their impacts, to monitor andto report progress, 
and to enforce policies and standards. Since upper management has clearly identified the scope of the 
project, the project manager must make sure that all project activities are within the project scope, 
and focus on the quality and the timeliness of the deliverables. Finally, eight JAD teams were created 
to address specific application requirements. The size of a JAD team varies tim five to thirty participants 
depending on the topics discussed. Each team consists of a JAD leader (facilitator) and participants 
(software engineers and clients.) Collectively, they are empowered to make reasonabledezisions and to 
use negotiation skills to obtain consensus when disagreement occurs. Together, team members develop business 
models, explore opportunities for change, and analyze business needs. Since the eff=tiveness of the 
JAD sessions depends on the supporting groups and structures, a matrix organization was formed across 
departments. For this endeavor, a hybrid model of the structured open teamwork model (Constantine 1993) 
is use&#38;an organizational structure that combines different aspects of the closed (formal, rigid, 
and hierarchical) and the open (shared and flexible) models. To promote free flow of information and 
brainstorming activities, JAD team meetings use the open model. JAD leaders report to the project manager 
as in a more traditional hierarchical organization. JAI) IN ACTION Ground rules were established to 
guide the project to its successful implementation with minimal interference and obstacles. The important 
rules are: (1) to maintain Permission to copy without fee all or part of this material is Machin&#38;y.-To 
co~y otherwise, or to republish, requires a fee granted provided that the copies are not mado or distributed 
for and/or specific permission. direct commercial advantage, the ACM copyright notice and the SIGCPR 
95, Nashville, TN, USA 0 1995 ACM 0-89791 -712-x/95/0004...$505o management commitment and involvement, 
(2) to control project scope, (3) to standardize terminology, (4) to obtain the steering committee s 
approval for all changes and enhancements, (5) to formalize client requests, (6) to provide consistent 
and continuous departmental representatio~ (7) to implement procedures for conducting, monitoring and 
managing the process. To ensure that the JAD sessions run effectively and yield maximum benefits, the 
following actions were taken (1) to h-sin clients on how to interpret entity-relationship (E-R) diagrams 
and to train sofhvare engineers on data modeling, on construction of E-R diagrams, and on facilitating 
meetings, (2) to monitor the objectivity of facilitators, (3) to pre-schedule JAD sessions and to distribute 
agendas on every Friday for the following week, (4) to conduct joint JAD sessions when necessmy, (5) 
to encourage free and open discussions using agendas as guides, (6) to use visual aids, and (7) to publish 
meeting minutes. BENEFITS AND OBSTACLES Since team members shwed their visions and information, they 
have gained substantial knowledge from each other. Issues, procedures, and business practices for software 
engineers and clients were discussed, challenged, and resolved. They are proud of the joint authorship 
of the requirements specifwations. Management also realized that their high visibility and their intense 
involvement have motivated all participants and brought everyone together as a cohesive unit. Additionally, 
this exercise convinced team members that JAD indeed helps to reduce errors in defining requirements. 
The final verdict will be determined in part during system testing and in full after implementation. 
On the other han&#38; many negative lessons were also learned that need to be included under the don 
t do column for Mm-e projects. (1) Due to system complexity, the need for non-overlapping schedules, 
and a strenuous target date, pre-scheduled meetings were arranged throughout the days and five days a 
week. There was no available time left for anything else. (2) Unproductive time was spent in resolving 
personnel difilculties, such as unwillingness to work with others, reluctance to accept new techniques 
and methodologies, and conflicts in personalities and egos. (3) Valuable time was wasted because some 
team members did not complete their assignments on time and did not come to the JAD sessions prepared. 
(4) In some cases, group size was larger than necessary, exceeded fifty participants in some JAD sessions. 
CRITICAL SUCCESS FACTORS The following summarizes lessons learned that have had major impact on the success 
of this projech (1) to have the support, involvement, and commitment of upper managernen~ (2) to create 
synergy among participants, (3) to use a consensus approach when resolving problems, (4) to use a familiar 
project management software tool or to provide the necessary training on its use, (5) to limit each session 
to two hours, (6) to avoid excessive JAD sessions and meetings, (7) to demand active participation from 
all team members, (8) to ensure quick responses on assignments, (9) to encourage cross communication 
between departments and JAD groups, (1 O) to focus on topics, (11) to empower team members, (12) to automate 
processes, (13) to use past achievements and failures as a guide, and (14) to anticipate future needs 
and directions. CONCLUSION Undoubtedly, JAD as a meeting technique has proven itself as a viable tool 
for gather client requirements. Because JAD meetings involve multiple personalities and cross fictional 
boundaries, goals and objectives have to be defined and established through consensus. Having consensus 
and cooperation between clients and software engineers are essential, especially to achieve synergistic 
benefit. At the end of the process, clients are happier because they can affect the course of the project. 
Software engineers appreciate the fact that project deliverables are more readily accepted by clients 
and so tolerate client involvement in development to achieve this result. Potential rework can be avoided 
and future maintenance can be sirnpltiled. The real challenge for any corporation is to change its culture 
to adopt this method on an ongoing basis. An organization can select an approach that best fits its own 
environment political or otherwise, and that it feels most comfortable with in terms of control mechanisms, 
structures, and familiarity. REFERENCES <RefA><SinRef><author>Andrews, D. C. </author><title>JAD: A Crucial Dimension for Rapid Applications 
Development</title>, <journal>Journal of Svstems Mana~ement</journal>. <date>March 1991</date>, pp. <pages>23-31</pages></SinRef><SinRef> <author>Constantine, L. L. </author><title>Work Organization 
Paradigms for Project Management and Organization</title>, <journal>Communications of the ACM</journal>, <date>October 1993</date>, pp. <pages>34-42 </pages></SinRef>
<SinRef><author>HouglL D. </author><title>Rapid Delivery: An Evolutionary Approach for Application Development</title>, <journal>IBM Switems Journal</journal>, 
<volume>Volume 32, Number 3</volume>, <date>1993</date>, pp. <pages>397-418 </pages></SinRef><SinRef><author>Kanter, R. M. </author><title>Collaborative Advantage: The Art of Aliiances</title>, <journal>Harvard 
Business Review</journal>, <date>July-August 1994</date>, pp. <pages>96-108</pages></SinRef> <SinRef><author>Senge, P. M. </author><title>The Leader s New Work: Building Learning Organizations</title>, 
<journal>Sloan Management Review</journal>, Fall <date>1990</date>, pp. <pages>7-23 236</pages> </SinRef></RefA>
			
