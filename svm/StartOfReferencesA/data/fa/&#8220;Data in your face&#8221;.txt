
 Data In Your Face : Push Technology in Perspective* Michael Franklin Stan Zdonik University of Maryland 
Brown University franklin@cs.umd.edu sbz@cs.brown.edu 1 Introduction Push technology stems from a vel-y 
simple idea. Rather than requir- ing USCIS to explicitly request (i.e., pull ) the information that they 
need, data can be sent to users without having them specifically ask for it. The advantages of push are 
straightforward. The traditional pull approach requires that users know a priori where and when to look 
for data or that they spend an inordinate amount of time polling known sites for updates and/or hunting 
on the network for relevant sites. Push relieves the user of these burdens. The problems of push are 
also fairly obvious. Push transfers control from the users to the data providers, raising the potential 
that users receive irrelevant data while not receiving the information they need. These potential prob- 
lems can arise due to issues ranging from poor prediction of user interests to outright abuse of the 
mechanism, such as spamming . The in-your-face nature of push technology is the root of both its potential 
benefits and disadvantages. Push technology has been around in various forms for as long as people have 
been communicating. Examples range from news- papers, to telephones, to radio and television, to E-mail. 
Early work on using computer networks for pushing data was performed in the 1980 s. The Boston Community 
Information System at MIT [GiffYO], Teletext systems for distributing data over broad-cast media [Amma85, 
Wong88], and the Datacycle database ma- chine [Herm87], are all examplesof systems that incorporatedsome 
form of push technology. Recently, however, the combination of push technology with the Internet and 
Web (sometimes referred to as Webcasting) has generated a ground swell of excitement, com-mercial activity, 
and controversy.  1 .l The Push Phenomenon In February 1996. PointCast made its client software available 
for free downloading over the Internet, setting ofl a wave of interest in push technology. The idea was 
appealing: rather than using your idle desktop tnachine as a display ground for flying toasters, Point- 
Cast would turn it into an active information terminal that woulddis- *This work has been partially supported 
by Rome Labs agreement nurn- beI F30602.C)7-2.0241 under DARPA ordernumberFO78, by the NSF under grnn, 
IRI-95013.53. and hy research grantsfrom Intel and NEC. Permission to make digital or hard copies of 
all or pert of this work for personal or classroom us.@ is granted without fee provided that copies are 
not made or distributed for profit or commercial sdvan- tage end that copies bear this notice and the 
full citation on the first page. To copy otherwiaa, to republish. to post on servers or to redistribute 
to lists, requires prior specific permission and/or a tea. SIGMOD 98 Seattle, WA, USA 8 1998 ACM 0-89791~995.6/98/006...$6.00 
play headlines, weather forecasts, stock prices, sports scores, etc., with the appearance of having real-time 
updates. By specifying a /,roJla, users could indicate their interests to the system, and the dis- play 
would bc tailored to these interests. For anyone who tried the software, the reaction was immediate; 
this represented a paradigm shift in the way one could think about using the Internet as an information 
delivery tool. Push technology on the Internet represented a new and untapped medium. The com- puter 
trade press became inundated with articles about push technol- ogy and dozens of companies touting push-based 
solutions arrived on the scene. A new jargon of data delivery was developed, with terminology borrowed 
from broadcast media. Users of push tech- nology could lune into channels that contained broadcasts of 
infor- mation on particular topics. By the end of 1996, the excitement had spilled over into the mainstream 
press. A steady stream of articles about push technol- ogy appeared in venues such as the New York Times 
and the Wall Street JournaL1 In February 1997, Business Week magazine pub- lished a Special Report section 
entitled A Way Out of the Web Maze , which argued that Webcasting could solve many of the Web s problems, 
such as information overload and the inability for users to find the data they need. Similar sentiments 
were echoed by numerous vendors and technology pundits. The peak of the media hype for push technology 
was reached in March of 1997 when the cover article of Wired magazine blared: Push! Kiss your browser 
goodbye . This article began by declar- ing: Remember the browser war between Netscape and Microsoft? 
Well forget it. The Web browser itself is about to croak. And good riddance. . While the article was 
certainly provocative and clearly overstated, the argument it made was simply that push technology would 
change the Web from a passive library of information into a networked, immersive medium for information 
and entertainment delivery. Despite this simple message, the article seemed to epito- mize the both the 
promise of push technology and the potential for overselling its virtues 1.2 The Inevitable Backlash 
Around the time of the Wired article, the voices of dissent began to make themselves heard. A March 1997 
New York Times Cyber- Times article by James Gleick stated: ... the promotion of Push is the silliest 
piece of puffery to waft along in several seasons. The railure of Push is preordained. . A July 1997 
article in the on-line net-zinc wehmonkey(published by the samecompany that publishes Wired), was entitled 
simply Why Channels Suck . A somewhat more technical article at the CNET on-line site entitled Networks 
Many ofthese articles had titles such as When Push Comes to Shove , The Pull of Push , or X Gets Pushy 
(where X is some product or com- pany). The observant reader will notice that we have resisted such tempta- 
tions for this paper. Strained By Push , described a study indicating that push technolo- gies were 
using an inordinate portion of corporate network band- width. Finally, a Bytcl magazine article in August 
I997 had the tag line: Weh push technology is exploding -even though there s no such thing. . The Bytearticle 
went on to explain (correctly) that cur- rent push technology is really pull++ . 1.3 The Current Situation 
Recently, the media turmoil over push has settled down and expec- tations for the technology (at least 
for the short term) have lowered to arguably more reasonable levels. Still, the commercial activity in 
the area is impressive. As of January 1998, a register of push tech- nology vendors listed 49 companies 
with announced products (see David Strom s site at http://www.strom.com/imc/t4a.html). Many other companies 
who have not yet announced products are working on push-based solutions. The major web hrowscr vendors, 
Netscape and Microsoft, have both incorporated push into their products. A development indicating a degree 
of maturation of the field is Microsoft s proposal of the Channel Definition Format (CDF) stan- dard 
to the World Wide Web Consortium (W3C). CDF is a language that web publishers can use to turn their content 
into ChanncK that can be exploited by push (or pull++ ) technologies. CDF allows the specification of 
mctadata about a wehsite, including a search- able title and abstract and information about the structure 
and up- date schedule of the site. A number of the major push vendors such as PointCast, BackWeb, and 
AirMedia have expressed support for the proposed standard. Such a standard raises the potential for push 
technology to he more widely integrated into the fabric of the Inter- net. 1.4 Sorting it All Out The 
wide range of opinions on the pros and cons of push technology is understandable, given the fact that 
it is a major departure from the way distributed information systems have traditionally been built. Adding 
to the noise, however, is a wide-spread confusion about the basic principles of push and where it fits 
in to the world of data de- livery. In this short paper we argue that this confusion stems from two fundamental 
causes: First, push is just onedimension ofu larger design spnce of datu delivery mechanisms, We identify 
three dimen- sions for data delivery mechanisms(push vs. pull is one ofthem) and show how different choices 
along these dimensions interact. Sec-ond, networked information .systerns cun employ d$erent data de- 
livery options between different sets of information producers and ~OIULLIII~IJ. Thus, complex systems 
will likely contain mixtures of push and pull (along with the other options) at various points in the 
network, In such a situation, it is inappropriate to identify an entire system as being push-based or 
pull-based . In the following, we present an overview of our ideas on data dissemination in order to 
provide a framework for thinking about push technology in the larger context ofnetworked information 
sys-tems. Our intent is to clarify some of the issues surrounding push technology and to characterize 
the design space for data delivery in dissemination-based information systems and applications.  2 Fundamental 
Properties In this section, we present an overview of data delivery, focusing on how thr notion of data 
push fita in with the other dimensions of the design space for delivery mechanisms. We then describe 
why it is often inappropriate to refer to complex distrihutcd systems as simply push-based or pull-based 
. A more detailed discussionof theses issues can be found in [Fran971. 2.1 Options for Data Delivery 
Support for different styles of data delivery allows a distributed in- formation system to he optimized 
for various server, client, network, data, and application properties. We have identified three main 
char- acteristics that can hc used to compare data delivery mechanisms: (1) push vs. pull; (2) periodic 
vs. aperiodic; and (3) unicast vs. l-to- N. While there are numerous other dimensions that should he 
con- sidered, such as fault-tolerance, ordering guarantees, error proper- ties, network topology, etc.. 
we have found that these three charac- teristics provide a good initial basis for discussing many popularap- 
proaches. In particular, we argue that all three of these characteris- tics must he considered in order 
to make intelligent choices about delivery mechanisms for specific situations. Figure 1 shows these characteristics 
and how several common mechanisms relate to them.  2.1. I Client Pull vs. Server PLtsh We first focus 
on push vs. pull. Current database servers and object repositories managedata for clients that explicitly 
requestdata when they require it. When a request is received at a server, the server locates the information 
of interest and returns it to the client. This request-response style of operation is pull-bused -the 
transfer of information from servers to clients is initiated by a client pull. In contrast, as discussed 
in the introduction, push-baseddata delivery involves sending information to a client population in advance 
of any specific request. With push-based delivery, the server initiates the transfer. 2.1.2 Aperiodic 
vs. Periodic Both push and pull can be performed in either an aperiodic or pe- riodic fashion. Aperiodic 
delivery is event-driven -a data request (for pull) or transmission (for push) is triggered by an event 
such as a user action (for pull) or data update (for push). In contrast, peri- odic delivery is performed 
according to some pre-arranged sched- ule. This schedule may he fixed, or may he generated with some 
degree of randomness.2 An application that sends out stock prices on a regular basis is an example of 
periodic push, whereas one that sends out stock prices only when they change is an example of ape- riodic 
push. 2.1.3 Unicast vs. I-to-N The third characteristic of data delivery mechanisms is whether they 
are based on unicast or I -to-N communication. With unicast com- munication, data items are sent from 
a data source (e.g., a single server) to one other machine, while I-to-N communication allows multiple 
machines to receive the data sent by a data source. Two types of 1 -to-N data delivery can he distinguished: 
multi-cast and broadcast. With multicast, data is sent to a specific subset of clients who have indicated 
their interest in receiving the data. Since the recipients are known, given a two-way communications 
medium it is possible to make multicast reliable; that is, network protocols 2For the purposes of this 
discussion, we do not distinguish between fixed and randomized schedules. Such a distinction is important 
in certain appli- cations. For example, algorithms for conserving energy in mobile environ- ments proposed 
by Imielinski et al. [Imie94] depend on a strict schedule to allow mobile clients to doze during periods 
when no data of interest to them will be broadcast. 3Some systems attempt to implement a I -to-N style 
of datadelivery using umcast (Le., by sending identical, individual messages to multiple clients). As 
discussed in Section 3, this type of pseudo-broadcastcan result in tremen- dous bandwidth nnd server 
overload problems. For this reason, we classify such systems as unicast-based in our taxonomy. Pull Push 
Aperiodic Periodic Aperiodic Periodic Unicast 1 -to-N Unicast 1 -to-N Unicast 1 -to-N Unicast 1 -to-N 
Figure 1: Data Delivery Options can be developed that guarantee the eventual delivery of the mes- sage 
to all clients that should receive it. In contrast, broadcasting sends information over a medium on which 
an unidentified and pos- sibly unbounded set of clients can listen.  2.2 Classification of Delivery 
Mechanisms It is possible to classify many existing data delivery mechanisms using the characteristics 
described above. Such a classification is shown in Figure I. We discuss several of the mechanisms below. 
Aperiodic Pull - Traditional request/response mechanisms use aperiodic pull over a unicast connection. 
If instead, a I-to-N con-nection is used, then clients can snoop on the requests made by other clients, 
and obtain data that they haven t explicitly asked for (e.g, see [Acha97, Akso981). Periodic Pull - In 
some applications, such as remote sensing, a system may periodically send requests to other sites to 
obtain sta- tus information or to detect changed values. If the information is returned over a I-to-N 
link. then as with request/response, other clients can snoop to obtain data items as they go by. Most 
existing Weh or Intcrnct-based push systems are actually implemented us-ing Periodic Pull between the 
client machines and the data source(s). Aperiodic Push -Publish/subscribe protocols are becoming a popular 
way to disseminate information in a network [Oki93, Yan95. Glan961. In a publish/subscribesystem, users 
provide infor- mation (sometimes in the form of a profile) indicating the types of information they wish 
to receive. Publish/subscribe is push-based; data flow is initiated by the data sources, and is aperiodic, 
as there is no predetined schedule for sending data. Publish/subscribe pro-tocols are inherently I-to-N 
in nature, hut due to limitations in cur- rent Internet technology, they are often implemented using 
individ- ual unicast messages to multiple clients. Examples of such systems include Internet e-mail lists 
and some existing push systems on the Internet. True I-to-N delivery is possible through technologies 
such as IP-Multicast, but such solutions are typically limited to in- dividual lntrancts or Local Area 
Networks. Periodic Push - Periodic push has been used for data dissemi- nation in many systems. An example 
of Periodic Push using unicast is Internet mailing lists that send out digests on a regular sched- ule. 
For example, the Majordomo system allows a list manager to set up a schedule (e.g., weekly) for sending 
digests. Such digests allow users to follow a mailing list without being continually inter-rupted by 
individual messages. There have also been many systems that use Periodic Push over a broadcast or multicast 
link. These in- clude TelcText [Amma85, Wong88], DataCycle [Hcrm87], Broad-cast Disks [Acha9Sa, AchaF)Sb] 
and mobile databases [Imic94].  2.3 End-to-End Considerations The second source of confusion about push 
technology is the fact that networked information systems typically contain many inter- connected nodes. 
These nodes may be (logically) organized in vari- ous structures, and different data delivery mechanisms 
may be used between different sets of nodes. Given the potential heterogeneity of delivery mechanisms 
in a complex system, it is often not appropri- ate to describe the entire end-to-end (i.e., data source 
to consumer) system as push-based or pull-based . In general, a distributed information system can be 
though of as having three types of nodes: (1) data sources, which provide the base data that is to be 
disseminated; (2) clients, which are net con- sumers of information; and (3) information brokers, (or 
agents, me- diators, etc.) that acquire information from other sources, add value to that information 
(e.g., some additional computation or organiza- tional structure) and then distribute this information 
to other con- sumers. By creating hierarchies of brokers, information delivery can be tailored to the 
needs of many different users. While the previous discussion has focused primarily on differ- ent modes 
of data delivery, the brokers provide the glue that binds these modes together. In many cases, the expected 
usage patterns of the brokers can drive the selection of which mode of delivery to use. For example, 
a broker that typically is very heavily loaded with requests could be an excellent candidate for a push-based 
delivery mechanism to its clients. As we move upstream in the data delivery chain, brokers look like 
data sources to their clients. Receivers of information cannot detect the details of interconnections 
any further upstream than their immediate predecessor. This principle of network transparency al-lows 
data delivery mechanisms to change without having global im- pact. Suppose that node B is pulling data 
values from node A on de- mand. Further, suppose that node C is listening to a periodic broad- cast from 
node B which includes values that B has pulled from A. Node C will not have to change it s data gathering 
strategy if A be- gins to push values to B. Changes in links are of interest only to the nodes that are 
directly involved. Likewise, this transparency allows the appearance of the data delivery at any node 
to differ from the way the data is actually delivered earlier in the network. This ability to change 
the appearance of data delivery is at the root of much of the confusion surrounding push technology. 
Figure 2 shows a simple example of the importance of consid- ering multiple network components and the 
impact of transparency. The figure shows how data delivery is performed in the initial ver-sions of PointCast. 
To the user sitting at the screen, the system ap- pears to be push-based ; data flows across the screen 
without any user intervention. Due to current limitations of the Internet, how- ever, that data is actually 
brought over to the client machine using a stream of periodic pull requests, delivered in a unicast fashion. 
 Figure 2: Pointcast I .0 Thus, the implementation of PointCast 1 .O between the client and the PointCast 
server is actually the exact opposite of the view that is presenrcd to the user in a// three rlimerlsiorls 
of the hierarchy of Fig- ure I. This situation is not unique to PointCast; in fact, it is true for virtually 
all ofthe Internet-based push solutions, and stems from the fact that current IP and HTTP protocols do 
not adequately support push 01. I -to-N communication. Reexamining Current Push Technology The prcvious 
section identified several of the sources of confusion in the current discussions and debate regarding 
push technology. In particular, the confusion stems from the mismatch between the user s perception and 
the actual data delivery mechanisms used by the system. Furthermore, this mismatch is also at the root 
of many of the performance concerns (particularly bandwidth overload) as-sociated with current push technology. 
The impact of the mismatch on performance can be summarized as follows: PLY// irzste&#38; qfpuslz- Current 
webcasting solutions typically use data pull to obtain information from data sources. This choice is 
due to limitations of the HTTP protocol, which is primarily pull-based. As stated previously, replacing 
push with pull requires that the pull bc done in a /lolling manner. Polling can be quite resource inten- 
sive hecause it generates many requests. These requests consume client, server, and network resources. 
The problems are exacerbated if all clients poll individually, which could result in servers becom- ing 
overloaded due to the high volume of requests. Periodic bzst~nrl of aperiodic - Polling is typically 
done in a pe- riodic manner that is independent of the events (e.g., data modifica- tions) that would 
require data to be transfered. This independence results in a granularity problem: if polling is done 
too frequently, then the overhead can become substantial; if it is done too infre- qucntly, then clients 
may unknowingly be accessing stale data. Urlicast instead qf I-to-N - In the absence of a true broadcast 
or multicast facility, systems that require 1 -to-N behavior must imple- ment it using multiple identical 
messages, one for each intended re- cipienl. The potential bandwidth problems of such an approach are 
obvious. If n clients are interested in the same data item, then that same item must be sent over the 
network IZ times. Fortunately, the concept of Network Transparency can be used 10 ameliorate this situation. 
One solution involves placing a local scrvcr inside an organization s lirewall. All the clients interact 
with the local server in the way that is most appropriate for the local net- work and system configuration. 
The local server can then perform polling of the remote data source cm behalf of the entire organiza- 
tion, which reduces Internet traffic. Likewise, the data source needs only to send a singlecopy ofeach 
data item to the local server, which can then distribute it to all the clients it represents. The local 
server can then multicast the data to its clients, if such capability exists. 4 Conclusions In summary, 
push is currently a hot topic, but it is essential that it be placed in the proper context. Push is one 
choice (among many) for data delivery in distributed information systems. Push is not, for example, the 
same as broadcast. In fact, many existing push-based products are based on periodic pull over unicast 
connections. In our work on data dissemination, we have advocated a new look at the construction of distributed 
information systems that allows a seam- less integration of all data delivery mechanisms including, but 
not limited to the various forms of push. We believe that this is a fertile area of work for the database 
community since the use of careful data management techniques in this context can have a significant 
impact on overall system performance and usability.   References <RefA>[Acha95a] <SinRef><author>S. Acharya</author>,<author> R. Alonso</author>,<author> M. 
Franklin</author>, <author>S. Zdonik</author>,<title> Broad- cast Disks: Data Management for Asymmetric Communication Environments </title>,<journal>ACMSIGMOD 
Con&#38</journal>;, <location>San Jose</location>, <date>May, 1995</date></SinRef>. [Acha95b] <SinRef><author>S. Acharya</author>, <author>M. Franklin</author>, <author>S. Zdonik</author>, <title>Dissemination-based Data 
Delivery Using Broadcast Disks </title>, <journal>IEEE Personal Communicutions</journal>, <volume>2(6)</volume>, <date>December, 1995</date></SinRef>. [Acha97] <SinRef><author>S. Acharya</author>, 
<author>M. Franklin</author>, <author>S. Zdonik</author>, <title>BalancingPush and Pull for Data Broadcast </title>, <journal>ACM SIGMOD Con$</journal>, <date>1997</date>. </SinRef>[Akso98] <SinRef><author>D. 
Aksoy</author>, <author>M. Franklin</author>, <title>Scheduling for Large-Scale On- Demand Data Broadcasting </title>, <booktitle>Proc. IEEE INFOCOM Con$, </booktitle>
<location>San Francisco</location>, <date>March, 1998</date></SinRef>. [Amma85] <SinRef><author>M. Ammar</author>,<author> J. Wong</author>, <title>The Design of Teletext Broad- cast Cycles </title>, <journal>Pert 
Evaluation</journal>,<volume> 5 </volume>(<date>1985</date>). </SinRef>[Fran971 <SinRef><author>M. Franklin</author>, <author>S. Zdonik</author>, <title>A Framework for Scal-able Dissemination-BasedInformation 
Systems ACMOOPSLA Confi,</title> <location>Atlanta</location>, <date>October, 1997</date></SinRef>. [Giff90] <SinRef><author>D. Gifford</author>, <title>Polychannel Systems for Mass Digital 
Com-munication </title>, <journal>CACM</journal>, <volume>33(2), </volume><date>February, 1990</date></SinRef>. [Glan96] <SinRef><author>D. Glance</author>, <title>Multicast Support for Data Dissemination 
in OrbixTalk </title>, <journal>IEEE Data Engineering Bulletin</journal>, <volume>19(3), </volume><date>Sept., 1996</date></SinRef>. [Herm87] <SinRef><author>G. Herman</author>, <author>G. Gopal</author>, <author>K. Lee</author>, 
<author>A. Weinrib</author>, <title>The Datacy- cle Architecture for Very High Throughput Database Systems</title> , <booktitle>Proc. ACM SIGMOD 
Corzj</booktitle>, <location>San Francisco, CA</location>, <date>May, 1987</date></SinRef>. [lmie94] <SinRef><author>T. Imielinski</author>,<author> S. Viswanathan</author>, <author>B. Badrinath</author>, <title>Energy Ef-ficient 
Indexing on Air </title>, <journal>ACM SIGMOD Con&#</journal><volume>38</volume>;, <date>1994</date></SinRef>. [Oki93] <SinRef><author>B. Oki</author>, <author>M. Pfluegl</author>, <author>A. Siegel</author>,<author> D. Skeen</author>, <title>The lnformation 
Bus - An Architecture for Extensible Distributed Systems </title>, <booktitle>Proc. 14th SOSP</booktitle>, <location>Ashville, NC</location>, <date>December, 1993</date>. </SinRef>
[Wong88] <SinRef><author>J. Wong</author>, <title>Broadcast Delivery </title>, <booktitle>Proceedings qf the IEEE</booktitle>, <volume>76( l2), </volume><date>December, 1988</date></SinRef>. [Yan95] <SinRef><author>1 . 
Yan</author>,<author> H. Garcia-Molina</author>,<title> SIFT -A Tool for Wide- area Information Dissemination </title>. <booktitle>Proc. 199.5 USENIX Technical 
Cwference</booktitle>. <date>1995</date></SinRef></RefA>. 
			
