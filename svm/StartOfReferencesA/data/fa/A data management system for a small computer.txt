
 A DATA MANAGEMENT SYSTEM FOR A SMALL COMPUTER Bill Hays, Gordon Stokes, Jim Johnson Brigham Young 
University Prove, i. Introduction A data management system for a small computer is presented, including 
essential algorithms and techniques for implementation. The purpose of this system is to provide high 
level creation, main- tenance, retrieval and updating capabilities for data in a master file residing 
on systems with limited hardware resources. This system includes the capabilities of data management 
operations and a query language. The algorithm and implementation details are based upon actual development 
of a data management system. It is designed as a facility for the reporting of data from a master file. 
However, the integration of data and associated benefits available in a complete data base management 
system [Ross 1978] is not achieved. 2. Data Management System Description The system must be simple 
in order to keep the resource requirements to a minimum and it is designed to be extendable. Extendability 
permits the system to be adapted to different needs and computer resources. The data management system 
allows the creation and maintenance of files. One can create as many files as available disk space allows, 
with each file being processed individually. This approach provides many of the benefits of data base 
systems while keeping the complexity in the range of the small user's hardware resources. The basic set 
of capabilities is: I. Creation of a file 2. Addition of records to the file  3. Deletion of records 
 4. Updating and modification of records  5. Retrieval and reporting capabilities  These operations 
are specified to the computer by means of a query language. This language is the basis for the file management 
system and must support a wide variety of requests. 2.1 Record Management An underlying file structure 
must be a part of the system. The major design points related to record management are: Permission to 
copy without ~e all or part of this material is granted provided that the copies are not made or distributed 
~r di~ct comme~ial advantage, the ACM copyright notice and the title of the publication and is da~ appear, 
and notice is given that copying is by permission of the Association ~r Computing Machinery. To copy 
otherwise, or to republish, ~quires a ~e and/or specific permission.  &#38;#169; 1982 ACM0-89791-083-4/82/008/0076 
$00.75 76 Utah i. Records are managed by means of an indexed non-sequential file system (INSAM). 2. 
When a file is defined, one field is speci- fied as a key. This field is used to specify the order of 
records displayed and used in processing queries to reduce record accesses. 3, A data file contains 
the records for each file. 4. A key file will contain a list of the key values and pointers to their 
corresponding records. This list is ordered on the key values.  5. Each file has a data dictionary associated 
with it. This will describe records con- tained in the file and will be created when the file is defined. 
Each attribute in the record will be given a name, data type and size. The system will use this information 
to perform operations on the file.  6. The definition of the files and data de- scriptions will be performed 
by an inter- active utility procedure.  This file structure is not difficult to imple- ment and provides 
the necessary physical file main- tenance. Also, it is the basis for building file management primitives. 
The indexed non-sequential file structure allows records to be accessed in order of their key values 
and eliminates unneces- sary record accesses when qualifications are placed on the key. The data dictionary 
provides a means of referencing fields by name instead of locations.  2.2 Operations Performed on Files 
 The minimal set of commands and operations selected are: i. Open File -Select a file to manipulate. 
 2. Close File -Request that the file be closed.  3. Create Record -Add a new record to the file. The 
system uses the data dictionary to prompt the user for each field in the record. The record is added 
to the data file and the key and record pointer added to the key file.  4. Delete Record -Specify by 
key a record to be removed from the file.  5. Display Records -Specify qualifications on the key and 
other fields determining  which records are to be displayed for modi- fication. Modifications cause 
the new record to be written over the old one. These six capabilities allow files to be created, maintained, 
and interrogated. Also, groups or classes of records meeting specified requirements need to be examined. 
Tbis permits file analysis at a higher level and is provided by the query language. Figure 1 relates 
these opera- tions in a functional overview. FILE DATA 1 ICTIO:$ARY Figure i. Functional overview 
of the system. Each logical user file must be associated with an underlying physical file structure. 
The physi- cal file structure is based on the type of opera- tions to be performed and how much overhead 
in memory space and performance can be allowed. The indexed non-sequential organization [Martin 1977] 
associates each logical file with two physical files, the data file and the key file. The data file contains 
the records in non-sequential order while the key file contains an ordered list of key values and pointers 
to records in the data file. New records are placed in the first available slot in the data file and 
the key value and record pointers are inserted in the appropriate position in the key file. The operating 
system must allow random access read and write operations in the physical file. When a logical file 
is defined, the corre- sponding physical files must be defined and ini- tialized and a data dictionary 
for records in the file created. This is created by the interactive file creation procedure. The fundamental 
purpose of the data dictionary is the identification and location of information. The data dictionary 
for the system provides: i. The generation of record descriptions in a programatically useful form. 
 2. The mapping of data elements to actual records and structures and vice versa.  3. The information 
for automatic data editing, input validation, report generation and related processes.  4o The translation 
of item or record names to internal names. The data dictionary accomplishes these tasks by containing 
information about record size, number of fields, field names, field position in the record, field maximum 
length, field data type, and the key. The file procedure builds the data dictionary by asking questions 
of the user. The first item is the file name and if it does not exist, the user provides it. Then for 
as many fields as desired, the procedure asks for a field name and type. The user will access the field 
values by this name and the types are used by the system for performing operations on the fields. Also, 
the type informa- tion determines what edit templates to use when outputting field values. Depending 
on the data type, the system may also ask for a maximum field length. Figure 2 shows the user's copy 
of the data dictionary. **** DATA DICTIONARY OF CHECK FILE **~* FIELD ATTRIBUTE NAME TYPE POSITION 
LENGTH ****************************************************** 1 CHECK.NUM N 0 6 2 AMOUNT $ i 6 3 
ITEM A 2 15 4 DATE A 5 8 5 BUSINESS A 7 15 6 CATEGORY A i0 ii ****************************************************** 
 CHECK -~CO~ SIZE = 72 BYTES KEY = FIELD 1 -CHECK.NUM Figure 2. User Data Dictionary The data dictionary 
is stored internally as an array with each row corresponding to a field. Row zero corresponds to the 
record size and the key field number. The row for each field contains the field name, length, type and 
location in the record. Data dictionaries can be placed in a separate file or at the beginning of the 
key file. The dictio- nary is read into the system when the file is opened. The user specified name for 
a logical file is modified for the corresponding physical files. For example, the user names a file "CHECK". 
This name is extended to "CHECK:KY" for the key file, "CHECK:DT" for the data file and "CHECK:DD" for 
the data dictionary [Watson 1970]. This avoids having to maintain a separate file dictionary. The only 
function of the file utility procedure is to create and initialize the physical file and data dictionary 
for each user file. The file utility is independent of the data management sys- tem and can be separated 
from the rest of the sys- tem if available memory space requires it. Once the logical file is created 
by initializing the physical files and creating the data dictionary, the file is ready for use.  4. 
Query Language The design and structure of the query language reflects the user's viewpoint of the system 
and is designed in a user-oriented manner [Schneidermsn 1978]. The commands are simple to use but powerful 
for complicated requests. The language is user- oriented but also system-oriented so that commands can 
be interpreted and executed. The difficulty in designing a query language lies in selecting the appropriate 
balance between the requirements. The small system constraint means the query pro- cessing procedures 
cannot consume extensive re- sources. The language must be minimal but extend- able. If hardware resources 
are added, new features should not require a complete redesign of the sys- tem. The operations of section 
2 have been incor- porated into the following query language. The language is defined in Backus Naur 
form [Lewis 1976].  4.1 Sentence Types Basically there are six command sentence types. The specific 
operation to be performed on the logi- cal file is specified by typing the corresponding sentence on 
the terminal. The syntax definition is: <SENTENCE> : : =<OPEN> ] <CLOSE> ! <ADD> ~ <DELETE> I < LIST> 
~ <UPDATE> A sentence consists of a command verb followed by the appropriate file name, selection criteria, 
attribute value, or output specification. The six command sentence types are next defined and ex- plained. 
 <OPEN> : :=OPEN<FILE NA~IE~ <FILE NAME>::=<QUOTE><LETTER><FN LIST><QUOTE> <FN LIST>: :=<LD><LD><LD>cLD>~LD> 
 <LETTER> : :=AIB CI... Iy~,z <DIGIT .... 01112!31415~6171@19 <QUOTE>: := " ' The OPEN sentence consists 
of the command "OPEN" followed by the name in quotes of the file to open, e.g. OPEN "CHECK". <CLOSE>::=CLOSE 
 Since only one file is open at a time, no other information is necessary. <ADD>::=ADD <DELETE>::=DELETE~VALUE> 
 <VALUE>::=<QUOTE><STRING>,QUOTE> i <ASCII>::=<ANY PRINTING CHARACTER> The DELETE sentence consists 
of the command verb "DELETE" followed by the value of the key attribute of the record to be deleted, 
e.g. DELETE "550". (If the file being accessed was the check file and the key was check number, this 
would correspond to delete the record for check number 550.) <LIST>::=LIST<KEY QUALIF>~RECORD QUALIFY<OUTPUT 
SPEC> <KEY QUALIF>::=<EXPRESSION> ~ ¢EXPRESSION>::=~EXPRESSION> OR <TERM>~<TE~M ~ <TERM>::=<TEPJM> 
AND <PRIMARy>I<PRIMARy~ <PRIMARY~::={<EXPRESSION>)i<p~ELATION> <RELATION>::=<ITEM><RELOP><ITEM> <ITEM>::=<VALUE>F<FIELD> 
 <EXPRESSION>: :=<EXPRESSION> OR <TERM>] <TERM> <TERM> ~:=<TERM> AND ~PRIMARy~ ~PRIMARy> <PRIMARY>: 
:=(<EXPRESSION>) ! <RELATION> <RELATION>: : =< ITEM> <RELOP>< ITEM> < ITEM> : : = <VALUE> I < FIELD> 
 "FIELD> : : =<FL><FLIST> <FL>::=(ANY PRINTING CHARACTERS OTHER THAN <,=,>, OR 5) 11 <FLIST> : :={<FA> 
}i <FA> : : =< FL> 1 <RELOP> : := LEI GEINEI LTI GTI Eel <=i >= ! < > ! IN [ <RECORD QUALIF>: := WITH<EXPRESSION> 
 <OUTPUT SPEC>: :=<FIELD><OUTPUT SPEC>ITOTAL<FIELD><OUTPNT SPEC> I The LIST command sentence consists 
of the com- mand verb "LIST", followed by a key qualification, followed by a record qualification, followed 
by an output specification. The qualifications and spec- ifications are optional. The key qualification 
consists of any number of relational checks on the key in combinations of AND's and OR's. Parentheses 
can be used to change the precedence. The record qualification consists of the word "WITH", followed 
by any number of relational checks on any field in the record in combinations of AND's and OR's, with 
parentheses allowed. The output specification con- sists of any number of field names with any field 
name preceded by the word "TOTAL", e.g. LIST CHECK. NUM LT "600" and CHECK.NUM GT "400" WITH CATEGORY 
EQ "CLOTHING" OR CATEGORY EQ "FOOD" CHECKNUM ITEM CATEGORY TOTAL AMOUNT. Figure 3 lists the results of 
this query. <UPDATE>: :=UPDATE<KEY QUALIF><RECORD QUALIF> *** FIELDS *** CHECK.NUM ITEM CATEGORY AMOIJNT 
 420 GROCERIES FOOD $8.50 425 GROCERIES FOOD $25.00 540 T-SHIRT CLOTHING $9.50 585 GROCERIES FOOD $7.75 
586 SWEATER CLOTHING $28.50 $79.25 Figure 3. Example of a Query Response 5. Structure and Components 
of the System The basic components were shown in Figure i and now these components are described in 
more detail. The main procedure that calls these component modules is: PERFORM INITIALIZATION DO WHILE 
INPUT <> ESCAPE PERFORM DISPLAY MASTER SCREEN REPEAT UNTIL ERROR = 0 PERFORM ACCEPT INPUT PERFORM 
PARSE PERFORM COMMAND The initialization consists of allocating storage for buffers and available memory 
setting initial value and displaying a master screen. 5~i Command Acceptor and Editor The primary purpose 
Qf this module of the sys- tem is to accept the command sentence from the key- board. Editing features 
for flexibility are  provided. These include character deletion, re- placement and insertion. The cursor 
can be moved left, right, up or down and a rubout deletes the last entered character if one exists. 
Also editing features are needed if an illegal command sentence has been entered. The parser passes 
back the string with the cursor position indicating where it failed. The sentence is redisplayed with 
the cursor positioned where the error occurred. Cor- rections can be made with the editing features. 
 5.2 Parser Operations must be recognized and understood before any action occurs. The grammar in section 
4 describes legal command sentences in the data management system. Syntax-directed parsing is used to 
recognize valid sentences [Lewis 1976]. The rules of the grammar are stored in a table and each row represents 
one of the command sentence types allowed in the language. When a sentence is recog- nized, the command 
value and other necessary infor- mation is returned. The table or syntax-directed parsings make modifications 
and extensions imple- mentable. A new command sentence is added by entering the definition in the parse 
table and adding the token recognition procedures if they do not already exist. If the parser is completely 
table-driven, the new token recognition routines would not be necessary. Whenever a key or record qualification 
is entered, each record must be tested to see if it meets the selection criteria. This is accomplished 
by testing the record against an internal structure that represents the qualification expression. Rela- 
tional nodes consist of an operator, operand point- ers and result entry. Figure 4 is an example of a 
relation node. -Result LT -Operator Field #i -Operand one 95 -Operand two I "500" I -Literal CHECK.NUM 
LT "500" Figure 4. Example of a Relation Node The operand pointers in a boolean node are pointers to 
relation nodes. The operand pointers in an "answer" node point to the results of a previous node. Figure 
5 is an example of boolean and answer nodes. A record can then be tested against this list of nodes to 
determine if it meets the qualifi- cations. The OUTPUT SPECIFICATION procedure looks for a field name 
or the word "TOTAL" followed by a field name. Each time a field name is recognized, an output node is 
created. This node contains the field number, maximum length, information about totals and a dynamic 
total. These nodes for fields to be displayed provides the information for spac- ing and values to be 
printed. (RESULT)LT FIELD #i 95 (RESULT) ] GT I FIELD #i (RE9sOuLT) AND 1 5 (RESULT) ANSWER 9 CHECK. 
NUM LT "500 " AND CHECK. NUM GT "300 " Figure 4. Example Boolean and Answer Nodes  5.3 Record Management 
 An indexed non-sequential physical structure (INSAM) has been selected. Because this system is being 
designed for a small computer, it is assumed that there is not an existing file management sys- tem. 
It is assumed the operating system allows the creation and deletion of files, random posi- tioning within 
file, read word, and write word. These operations are used to build a set of INSAM file primitives to 
be used by the data management system. The basic file structure consists of an index file of ordered 
keys and record pointers and a file of records. All accesses to records are made in order of the key 
index, and keys are stored in order. Keys must be added and deleted while still maintaining the ordering. 
The simplest algorithm is to keep a sequential list of the keys and record pointers. This has the advantage 
of requiring little overhead in pointers and access routines. However, the effort to make inserts may 
be unaccept- able. Another technique for the index organization is hashing [Martin 1977]. This makes 
the serach and insert routines extremely fast. However, it nor- mally requires a maximum file size to 
be specified at creation time. For small users with floppy disks, it is better to use a technique that 
allows the physical file to grow as the logical file grows. The solution chosen was to maintain the 
keys in the key file as a binary tree. When a logical file  is defined, the physical key file and data 
file are defined. The set of file primitives can now be discussed.  The first level of a set of file 
primitives is to create read and write procedures for records and key nodes. These primitives accept 
a parameter indicating which record to read or write and a record to read or write. The next primitive 
needed is the "FIND KEY" one. It accepts a key value and searches the key list, returning the results 
of the search. Next is an ADD RECORD primitive. This proce- dure inserts the record into the data file 
and the key with its pointers into the binary tree repre- senting the key file. The DELETE RECORD primitive 
removes records from the file. The free space is added to the appropriate lists for the data and key 
files.   5.4 Command Processor The command processor uses the command value obtained from the parser 
to invoke the correspond- ing command procedure. The basic procedures are open file, close file, add 
record, delete record, list and update. A brief description of these commands is now given. 5.4.1 Open 
File This procedure must open the corresponding physical file and obtain the data dictionary. The Open 
File command is passed a logical file name and creates the physical data file name by append- ing an 
extension to it. The operating system is then requested to open this file. Next the key file name is 
built and opened. The key file pro- vides information about the size and location of the data dictionary. 
Once the data dictionary is in memory, the user can start processing the file.  5.4.2 Close File The 
CLOSE commands close a logical file. The corresponding physical file is closed and all arrays and variables 
cleared. The system is then ready to process other files.  5.4.3 Add Record This command permits the 
addition of new re- cords to the file. The procedure begins with field one, asking for each field value. 
The data dictionary is used for the field name and to check each input value against its defined attributes. 
The record is created and the user asked if the record is correct. If correct, the ADD RECORD file primitive 
places the key and record in the physical files.  5.4.4 Delete Record This command procedure checks 
to ensure a file is currently open and calls the DELETE RECORD file primitive.  5.4.5 Update The update 
command is for modification of existing records. Records are selected by qualifi- cation for update 
similar to the List command. Qualifications on the key and the records can be specified. All records 
meeting the selection cri- teria are displayed, one at a time, and can be modified. 6. Extensions 
This data management system has been designed to include file creation, record addition, record deletion, 
record update, and listing capabilities. Additional machine capacity normally means a desire for additional 
operations. The system design should allow extensions and modifications to be readily made. This is accomplished 
by designing the system in modules [Yourdon 1975] and using generalized syntax-directed parsing techniques 
 [Lewis 1976] in the query processor. Functional components can be changed, rewritten, or replaced without 
affecting other modules of the system. The first and most obvious would be to provide hardcopy reporting 
capabilities. This can be accomplished by adding a "device" to the list command or by adding a new verb, 
"PRINT", to the list of command sentences. Another extension would be a SORT command. This command would 
be similar to the List command also. A row would be added to the command table that included a sort verb, 
key qualification, record qualification, on specifica- tion and output specification. The primary differ- 
ence in the rule is in "ON specification". This command allows the user to specify that the records selected 
be displayed in the order of some second- ary field. Modifications to allow multiple keys require additional 
information in the data dictionary to specify what fields were secondary keys. The allowance of multiple 
keys adds to the complexity of the system and contributes to the overhead required to maintain the files. 
This moves away from the goals of simplicity and smallness. The primary benefit of response time is obtained 
only if the user places a qualification on a key. The second benefit of multiple keys is ordering of 
the output. However, the Sort command would provide this capability since ordering could be on a field. 
 This system could be simplified by replacing the indexed non-sequential physical file with a non-sequential 
file. The system would have to sequentially read and test each record instead of using key qualifications 
to eliminate unnecessary record accesses. Finally, the system could be expanded to inter- face with 
application programs. Programs could be written to access and operate on records in the data management 
system. A user would run appli- cation programs to process the records and use the query facility for 
current inspection. The same operations provided to the user would be provided to application programs. 
 7. Conclusions The operations provided allow the creation, maintenance and query of master files at 
a high level. Requests are specified in simple command  sentences which the system interprets and performs. 
The design provides flexibility for expansion or tailoring to individual needs. The system provides some 
data b~se operations for users with small computer systems. The system has been implemented on a small 
32K-byte system in Express BASIC and is currently being converted to Pascal. REFERENCES <RefA><SinRef><author>Lewis</author>, <author>Phillip 
M</author>;<author> Rosenkrantz</author>, <author>Daniel J.; </author>and <author>Stearns</author>, <author>Richard E. </author><date>1976</date>. <title>C.gmPiler Design Theory</title>. Reading, <location>Mass</location>.: <publisher>Addison-Wesley</publisher>. 
</SinRef> <SinRef><author>Martin, James. </author><date>1977</date>. <title>Computer Dat.a Base Organi- zation. Englewood Cliffs</title>, <location>New Jersey</location>: <publisher>Prentice-Hall</publisher>, 
Inc. </SinRef><SinRef><author>Ross, Ronald G. </author><date>1978</date>. <title>Data Base Systems De si~nt Implementation and Management</title>. <location>New York</location>: <publisher>Amacom</publisher>. 
</SinRef> <SinRef><author>Shneiderman</author>,<author> Ben</author>. <title>Improving the Human Factors Aspect of Database Interactions</title>. <journal>ACM Trans- actions on 
D~.ta Base Systems,</journal> <volume>Volume 3, Number 4</volume>, <date>December 1978</date>, pp. <pages>417-437</pages></SinRef>. <SinRef><author>Watson</author>, <author>Richard W. </author><date>1970</date>. <title>Timesharing 
System Design Concepts</title>. pp. <pages>192, 202-208</pages>. <location>New York</location>: <publisher>McGraw-Hill</publisher>.</SinRef><SinRef><author> Yourdon</author>, <author>Edward</author>. <date>1975</date>. <title>Techniques of 
Program Structure and Design</title>. <location>Englewood Cliffs, New Jersey</location>: <publisher>Prentice-Hall</publisher>, Inc</SinRef>.</RefA>  
			
