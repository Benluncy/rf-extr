
 A Loosely-Coupled Integration of a Text Retrieval System and an Object-Oriented Database System W. Bruce 
Croft, Lisa A. Smith* Computer Science Department University of Massachusetts, Amherst, MA 01003 Howard 
R. Turtle West Publishing Company, St. Paul, MN 55164 Abstract Document management systems are needed 
for many business applications. This type of system would com­bine the functionality of a database system, 
(for de­scribing, storing and maintaining documents with com­plex structure and relationships) with a 
text retrieval system (for effective retrieval based on full text). The retrieval model for a document 
management system is complicated by the variety and complexity of the ob­jects that are represented. 
In this paper, we describe an approach to complex object retrieval using a prob­abilistic inference net 
model, and an implementation of this approach using a loose coupling of an object­oriented database system 
(IRIS) and a text retrieval system based on inference nets (IN QUERY). The re­sulting system is used 
to store long, structured docu­ments and can retrieve document components (sections, figures, etc.) based 
on their text contents or the con­ tents of related components. The lessons learnt from the implementation 
are discussed. 1 Introduction Database systems provide robust, long-term storage of objects and maintain 
the validity of the data through recovery and concurrency control mechanisms. Cir­rent database systems, 
such as those based on the rela­tional model, can represent objects with complex struc­ture only with 
difficulty, and often restrict the type of ·On leave from Digital Equipment Corporation Permission to 
copy without fee all or pert of this material is grantad provided that the copies are not made or dietributad 
for direct commercial advantage, tha ACM copyright notice and the title of tha publication and its date 
appear, and notica is given that copying is by permission of the Association for Computing Maohinery. 
To copy otherwise, or to republish, requires a fee and/or spacific permission. 15th Ann Int 1 SIGIR 92/Denmark-6/92 
01992 ACM 0-89791 -524-01921000610223 ...$1 .50 data that can be stored in an object. In response to 
these shortcomings, object-oriented database systems have been designed specifically to represent complex 
ob­jects and accommodate user-defined extensions such as new data types [22]. The content-based retrieval 
ca­ pability of these systems, however, is typically limited to selection from a database of objects 
using Boolean combinations of simple predicates (for example, [14, 2]), although it is in general possible 
to define additional predicates for specific data types. In order to provide the powerful document manage 
ment facilities that are needed in many business appli­cations, it will be necessary to combine the ability 
of ad­vanced database systems to model, store and maintain documents with complex structure, with more 
effective retrieval strategies based on information retrieval (IR:) models. It may be necessary, however, 
to extend these models to deal with retrieval situations that are not en­countered in databases of simple, 
abstract-length texts, In an object-oriented database, for example, text ob. jects can be composed of 
other text objects, and other types of objects, such as tables and figures, may con­tain little or no 
useful text. The most effective retrieval strategies for such objects are not known. The inference net 
model appears to be a good candi­date for a retrieval model for complex objects. Thk model emphasises 
the role of probabilistic inference, where multiple sources of evidence are used to assess the likelihood 
that an object satisfies the user s information need [20]. In the context of complex object retrieval, 
the inference net model can describe how the meanings of objects are related. The inference net model 
also al­ lows for a great deal of flexibility in formulating a query and relating the query concepts 
to the concepts used to describe objects [6]. In a recent paper [8], we described an approach to using 
the inference net model in an object-oriented en­vironment, particularly for the retrieval of composite 
and multimedia objects. In this paper, we will describe an alternative model, and a prototype implementation 
of the model using a loosely-coupled integration of an object-oriented database system (IRIS [21] ) and 
a text retrieval system based on the inference net model (IN-QUERY [4]). The goals of the implementation 
were to demon­strate the capabilities of the retrieval model, to pro­vide a platform for future experiments, 
and to discover the types of implementation problems that occur with this type of integration. After 
describing the retrieval model and the architecture of the integrated system, we present some retrieval 
examples using the system and then discuss limitations of the implementation. The test database that 
was used consists of dissertations in IAT@ format. We considered this type of document to be representative 
of long, structured documents de­scribed using a markup language.  2 Approaches to Integration 2.1 Database 
Systems and IR A number of proposals have been made for incorpo­rating text retrieval functionalist y 
in database systems. Blair and others [3, 13, 18] have discussed the imple­mentation of text-oriented 
applications using standard relational database systems and SQL. These approaches typically have limited 
representation of complex docu­ment structure and restrict the retrieval model to exact matching of Boolean 
combinations of words. Lynch and Stonebraker[12] use abstract data types to incorporate text retrieval 
in the POSTGRES extended relational database system. Although their work is also restricted to exact 
match searching, the POSTG RES framework could be used to implement more sophisti­cated retrieval models. 
In the database community, related research has been done in the general area of uncertainty in databases. 
Examples of this type of work are systems that deal with extensions to the relational model to handle 
un­ certain data [11] and uncertain queries [15]. The in­ ference net model described in this paper can 
address both of these types of uncertainty through the various probabilities represented. Metro [15] 
discusses an extension to a relational database system for inexact queries. His VAGUE sys­ tem incorporates 
a similar-to comparison operator in queries. The retrieval model is based on the vec­ tor space model 
used in IR [17]. Garcia-Molina and Porter [11] discuss a probabilistic relational data model where probabilities 
are associated with the values of att ribut es. Two other related efforts include our work on the in­ 
teractive retrieval of complex objects [7], and Fuhr s pa­ per on a probabilistic database incorporating 
relevance feedback [10].  2.2 The Inference Net Approach In thk section, we describe how the inference 
net re­trieval model can be used for retrieval of complex ob­jects. This complex object retrieval model 
is the ba­sis for the loosely-coupled architecture described in the rest of the paper. By describing 
this retrieval model, however, we are not solving the whole problem of com­plex object retrieval. There 
remains many other issues, such as integration with a complete query language, integration with structural 
search (e.g. [5] ), query optimization, and interface design. The inference net model is described in 
detail in [19, 20]. It is a probabilistic retrieval model that com­putes P(IIObject), which is the probability 
that a user s information need is satisfied given a particular object. Objects are usuaUy considered 
to contain text, although in the context of complex object retrieval, this is often not the case. We 
consider an information need z a com­plex proposition about the content of an object, with possible values 
true and false. Queries are regarded as representations of the information need. The major difference 
between the inference net model and other probabilistic models is that it emphasizes the use of multiple 
sources of evidence to calculate P(I 10bject ). To apply the inference net model to the retrieval of 
complex objects in object-oriented databases, we must specify how the meanings of an object and its subob­jects 
are related. The first step @ this process is to define our complex object terminology more precisely. 
In an object-oriented database, an object is an instance of an object class. The definition for that 
class of ob­jects will be part of the class hierarchy for that system and application. Tlrat is, a class 
definition will inherit instance variables and operations from its superclass in the class hierarchy. 
The instance variables of an ob­ject may contain references to other objects (called sub­objects). These 
objects may be instances of a number of classes, and may in turn contain references to other objects. 
It is this variability in structure and content that makes such objects complex relative to the simple 
text abstracts stored in many bibliographic databases. Figure 1 shows an example of a complex object, 
which is an inst ante of a Dissertation object type. This doc­ ument has a complex structure made up 
of subobjects of types Chapter, Section, Subsection, Subsubsection, Paragraph, Figure, and Table. As 
part of specifying a query for complex object re­ trieval, users should be able to indicate the required 
object class. That is, any object class whose inst antes can be part of a complex object is a valid result. 
In the case of dissert ations, for example, users could spec­ ify whether they wanted to retrieve chapters, 
sections, paragraphs, figures or tables. Objects that are in­ representing single paragraphs be retrieved. 
In that case, each o, node that corresponds to a paragraph ob­ ject is asserted to be ime (one at a time), 
and the ob­ /- \ Chapter Dissertation \  Chapter Chapter ..... jects fying are the ranked according 
to information need. their probability of satis­ /\ \\ Seciion Seciion Sect;on Section .......  Subsection 
Subsection Subsection ........... /\\ Subsubsection Subsubsection ....... / \\\~ Paragraph Paragraph 
Figure Paragraph Table ..... I Figure 1: A complex document type Dissertation stances of the specified 
class should also be able to be retrieved based on their own content (that is, the values of the instance 
variables that refer to primitive objects, such as numbers, strings and text). Alternatively, their retrieval 
could be based on the content of their sub­objects. These observations suggest possible retrieval models 
for complex objects based on an inference net. Figure 2 shows one such model. The network consists of 
object nodes (Oi S), concept representation nodes (rk s) and a query node (q). Object nodes in this net­work 
correspond to objects with at least some text con­tent (for example, a paragraph or a figure with a cap­tion). 
These objects can be of many different types and information about object type is not part of this net­work. 
It is important to note that the inference net is a separate representation from the object class hierarchy 
and the complex object structure. We represent the assignment of a specific representa­tion concept to 
an object by a directed arc to the repre­sentation node from each node representing an object to which 
the concept has been assigned. A representation node contains a specification of the conditional proba­bility 
associated with the node given its set of parent object nodes. In an advanced IR system, the represen­tation 
nodes are derived by probabilistic indexing, and the nodes are associated with index terms extracted 
from the document texts. The query node corresponds to the event that an information need is met and 
multi­ple roots that correspond to the concepts that express the information need. A set of intermediate 
query nodes may be used to describe complex query networks such as those formed with Boolean expressions 
[6]. By structuring the inference net in this way, objects can be retrieved independently of each other. 
We could, for example, specify that only objects from the class Figure 2: A model for composite object 
retrieval In many cases, we want the retrieval of objects to be influenced by the content of subobjects 
or related objects. For example, in Figure 1, object 01 has been instantiated. All remaining objects 
in the network are set to jalse, except those objects that are subobjects of 01 (03 in this case). We 
assume that all sub objects (i.e. the transitive closure) have evidence attached to them in this way, 
and that each subobject is set to tTue (the strongest form of evidence). This means that when an object 
occurs, all of its subobjects occu~, with cer­tainty, at the same time. The effect of this evidence is 
to raise the probability (or belief) associated with all representation concepts that describe subobjects. 
This effectively adds concepts to 01 s representation and re­inforces belief in concepts that are used 
to describe both the parent object and subobjects. In the example, the addition of 03 adds concepts T3 
and T4 to 01 s repre­sentation, strengthens belief in rz given 01, and leaves belief in T1 unchanged. 
A similar approach can be used for retrieval of ob­jects which have no text content using related objects. 
For example, suppose that a user wants to retrieve all figures that satisfy a particular information 
need. The figure may have a caption, in which case this could be used to retrieve them independently 
of other objects. In the case where there is no caption, or when the caption is not sufficiently informative, 
we can instantiate ob­jects that represent other parts of the article, and this instantiation can be 
done in progressively wider con­texts. We could initially instantiate objects represent­ing paragraphs 
in the same section of the document as the figure. If this did not produce satisfactory results, we could 
widen the context until the whole document is being used to determine the meaning of the figure. Note 
that this instantiation of objects is going in the opposite direction to the instantiation of subobjects 
for composite object retrieval, and the evidence attached to objects from wider contexts may be weaker 
than that attached to objects that are very close to the figure. The disadvantages of th= approach to 
complex object retrieval are the lack of flexibility and computational ef­ficiency. A similar form of 
the inference net was used for citation experiments [19] and was implemented us­ing inverted files. To 
do this, however, beliefs had to be computed for each group of objects (documents) that were going to 
be instantiated at the same time. In the case of complex object retrieval, identifying all these groups 
prior to searching may be difficult. A simpler approach to complex object retrieval is based on treating 
each instantiated object as a sepa­rate piece of evidence, and then combining the beliefs associated 
with this evidence at query time. In other words, each subobject (or related object) is instanti­ated 
one at a time, as is done in typical inference net retrieval. The result of this is a set of belief values 
P(IIoI), P(I]03), etc. These belief values can then be combined to give an overall belief based on all 
evidence P(IIoI, o.,...). This is shown in Figure 3. The combi­nation of the belief values can be done 
in a variety of ways, as is the case in a query net. For example, objects could be ranked according to 
the maximum or average belief associated with its subobjects. The integrated architecture described in 
this paper uses this second approach. Based on some related re­trieval experiments, we compute belief 
values using the maximum belief of subobjects. In addition, we combine this belief value with a belief 
value computed using the whole object. To do this, object nodes are created by taking the union of all 
text in the subobjects. In the case of the dissertation example, sections could be retrieved by the belief 
calculated using all the text in the section, by the maximum belief associated with a paragraph in the 
section, or by a combination of the two. The belief computed using the entire text con­ tent will be 
very similar to the belief calculated using the first approach shown in Figure 2. Preliminary re­ trieval 
experiments show that combining beliefs in this way leads to significant effectiveness improvements, 
but more work needs to be done. This approach is related to that described in [16]. Inference net for 
Inference net for 03 $ ., $ $ ., :> :.: .\.> ,# P(I 103) ;7 I P(II 01,03) I Figure 3: Combining beliefs 
from subobjects  3 The Document Model and IRIS In the prototype system described in this paper, dis­sertations 
are stored as complex objects in a database system (IRIS), and retrieval is performed using both the 
database system and a text retrieval system. The model of dissertations used in the database schema de­scribes 
complex objects similar to that shown in Figure . 1. IRIS is an object-oriented database. management 
sys­tem which was developed at Hewlett-Packard Labora­tories. The version of IRIS that we are currently 
using is a research prototype (DPP 4.0 [9]). The IRIS system is based on a semantic data model which 
contains support for abstract data types (ADTs). The data model is based on the following three con­structs: 
objects, types, and functions. It supports inheritance, constraints, non-normalized data, user­defined 
functions, version control, and extensible data types [21, 9]. The objects within the IRIS system can 
be retrieved (referred to) independently of their attribute values by using a unique object identifier, 
or OID, that is assigned when the object is created. All objects are classified by type, and are associated 
with a specific set of functions. Types are organized into a type graph which supports inherit ante. 
Functions in the IRIS system are used to model all attributes, relationships, and other operations on 
ob­jects. Functions are inherited by subtypes. Figure 4 illustrates the architecture of IRIS. The IRIS 
Kernel implements the IRIS data model described above. There are a number of interfaces, all of which 
are built as clients of the Kernel, including the follow­  4 The INQUERY System .sQLqyr ~L7.ddcd.sQL 
Foreign ~___.__ Iris Kernel Functions ++ I Iris, Storage Manager I Figure 4: The IRIS Architecture 
ing: an object version of SQL (OSQL), the C Language Interface (CLI), a Graphical Editor, and more recently, 
the IRIS Programming Language (IPL) [I]. The Graph­ical Editor is an X Windows-based program which al­lows 
both retrieval and update of both function val­ues and metadata with graphical and forms-based dis­plays. 
The C Language Interface allows access to IRIS in an object-oriented fashion through manipulation of 
C variables which denote the IRIS database, metadata, and objects in the database. The Embedded OSQL 
in­terface is also a programming interface, which allows OSQL to be embedded into various host languages. 
Foreign functions provide alternative methods for computing function values, and are implemented as subroutines 
written in some general-purpose program­ming language and compiled outside of IRIS. The IRIS Storage 
Manager provides concurrency con­trol, recovery, buffering, indexing, clustering, and OID generation. 
Within the context of the IRIS data model, the schema that was defined to model dissertations contains 
a number of type definitions, both atomic and complex. In addition, functions (based on transitive closure) 
are used for determining all subobjects of a particular type (e.g. chaps () for chapters of a dissertation, 
paras ( ) for paragraphs of any non atomic type, etc.). The types described in the schema are: · Atomic 
Types (no subobjects): Equation, Para­graph, Picture, Tabular · Non Atomic Types: Figure, Table, Chapter, 
Doc­ument, Dissertation (subtype of Document), Sec­tion, Subsection, Subsubsectionj Subsubsubsec­tion, 
INQUERY is a text retrieval system based on the infer­ence net retrieval model [4]. It consists of an 
indexing module, an interface module, and a text retrieval en­gine. The indexing module is used to parse 
the input text, do automatic indexing, and build the associated dictionaries and inverted files. The 
text retrieval en­gine uses the inverted files and other data to evaluate query nets described with a 
query language. The query language can be used to represent complex combina­tions of concepts. The interface 
module is currently very simple since INQUERY is primarily designed as a retrieval engine that can be 
integrated with other sys­tems and interfaces. The current interface accepts sim­ple natural language 
queries or queries expressed in the INQUERY query language. The indexing and retrieval engine functionality 
can be accessed using a simple ap­plication programmer s interface (API). The INQUERY system is designed 
for both experi­mental (batch) and interactive use. It has been used in other experiments with test collections 
up to 500 MBytes and is being modified to work with even larger databases. The system is implemented 
in C and runs on a variety of workstations using UNIX. 5 The Integrated System The integrated system 
(COINS) uses the functionality of INQUERY and IRIS to model and store complex ob­jects and retrieve them 
using their text content. COINS accesses the IN QUERY database through a set of C functions, and accesses 
and manipulates the data ftext stored in the IRIS database through C variables. The database used for 
the prototype system con­sists of dissertations written in 14TEX, which have a well-defined, complex 
structure. The IAT# source for the dissertations is scanned, parsed, and used to cre­ate database objects 
in IRIS, and text objects in IN-QUERY. The COINS interface allows a user to enter queries that specify 
the types of objects to be retrieved, the type of retrieval model to use, and the desired contents of 
the objects. Queries in OSQL and the INQUERY query language are also accepted. Objects are retrieved 
as ranked lists. 5.1 Indexing the Dissertations Figure 5 shows the process by which dissertations in 
IATfi are entered into the IRIS and IN QUERY databases. The first step uses lex to define and recognize 
the valid tokens within the source file, and yacc to perform actions based on the type of tokens found. 
Eighteen lex regular expressions and fifty-one yacc production rules are used to recognize the components 
of the document structure in the IATEX source, store objects in the IRIS database, and create a text 
file for input to INQUERY. The parser uses a history stack to keep track of the hi­erarchical document 
structure and to record OIDS for objects as they are stored in IRIS. These OIDS and tran­sitive closure 
functions are used to output text records to a temporary file. The text record for a section, for example, 
consists of the OID for the section and all the text in the section (including all subsections, etc.). 
For a paragraph, the text record consists of the OID for the paragraph and the text of the paragraph. 
LKTEX Dissertation File  ~ ~r;;) h/ objects IRIS database OIDS Text file (OIDS and text) nV::::&#38; 
Figure 5: Processing the J4TEX Source The file of text records is passed to the INQUERY indexing module 
which creates the appropriate indexes and dictionaries for word-and phrase-based retrieval using the 
inference net. The test database contains two dissertations which were parsed into 3,378 objects. Of 
these, 2,169 were stored in IRIS (some objects such as references and citations were ignored), and 1,950 
corresponding text objects were stored in INQUERY (objects such as equation and eqnamay do not have text). 
A total of 3,438 indexes for terms were created in INQUERY. The size of the dissertation files was approximately 
1 MByte, the size of the IRIS files (including system overhead) was approximately 4 MBytes, and the size 
of the IN-QUERY indexes was 2.5 MBytes (proximity and other information is currently stored uncompressed). 
 5.1.1 Retrieval Architecture The COINS retrieval architecture (Figure 6) supports the ret rieval model 
in Figure 3. That is, it allows re­trieval from any level of a a hierarchical object struc­ture, as well 
as supporting retrieval based on subobjects or related objects. In particular, retrieval can be based 
on the text of each object only (normal mode), based on the text of parent objects (super mode), and 
based on the text of subobjects (sub mode). Retrieval based on combinations of these modes is also possible. 
Input menu choice t EE@El input query (OSQL, natural language, or structured) output access to the full 
text from the ranked hst returned from INQUERY. #\ input nl or structured inputi Object IDs query output 
text representation output ranked list of of requested objects object IDs and weights Figure 6: The COINS 
Retrieval Architecture The control module is the central module of the COINS retrieval system, and takes 
the role of the inter­face between INQUERY and IRIS, as well as between the user interface code and the 
rest of the system. This module takes as input the query which has been entered into the user interface, 
and processes it according to the query type. If an OSQL query is entered, the control module simply 
calls IRIS to return the results of that query. If a natural language request or query in the IN-QUERY 
language has been entered, the control module makes a function call to IN QUERY. IN QUERY returns a ranked 
list of objects with their associated probabili­ ties of satisfying the information need (scores) and 
their OIDS. The control module then filters the ranked list based on the specified object type and retrieval 
mode. The OIDS are used to access objects in IRIS as part of the filtering process. Figure 7 shows an 
example of searching in the COINS system. The first screen shows the specification to re­trieve subsections 
using the normal retrieval mode. The amount of text to retrieve specifies that full text is required 
for browsing, as opposed to a short summary. The second screen shows the query, the initial number of 
objects retrieved from INQUERY, and the number of objects after they have been filtered by object type. 
The third screen shows the ranked list of objects re­trieved by INQUERY (including the OIDS, which are 
not intended for end user display). The fourth screen shows the text of the top-ranked subsection, with 
query words highlighted. Figure 8 shows the results of retrieving chapters us­ing the sub retrieval mode 
based on paragraphs. In other words, the rank of the chapter is determined by the maximum probability 
value associated with a para­graph in the chapter. In this case, many more objects are retrieved from 
INQUERY than are eventually dis­played aft er filtering. Finally, Figure 9 shows the results of retrieving 
fig­ures based on the super mode using subsections. The query was to retrieve figures that involve a 
comparison of the inference network model to Fuhr s model. The caption of the top ranked figure, displayed 
in the sec­ond screen, does not contain a critical word in the query (the caption is {inference network 
for the RPI model and the RPI model is another name for Fuhr s model). Because retrieval was based on 
the text of the subsec­tion that contained the figure, it is not necessary to rely on the limited caption 
text.   Implementation Issues The version of IRIS that was used for COINS had a number of limitations 
that forced us into particular de­sign decisions. Most of these limitations have not had an affect on 
the functionality of COINS, but compli­cated the implementation of the system. Initially, we planned 
to use the foreign function ca­pability to integrate the INQUERY functionality with IRIS. The foreign 
functions would simply be INQUERY functions and the entire application could have been written in OSQL, 
with some links to external code seg­ments. The problem with that approach was that for­eign functions 
are not available in the prototype version of IRIS. In a future version of IRIS, it would be of in­terest 
to examine this approach since it would result in a more integrated query language. In the prototype 
system, the object size limit is 4K, which includes some overhead for the system, so the maximum amount 
of data that we are able to store within a particular object is 3996 bytes. When dealing with text, this 
is not very large, and we were only able to store text within IRIS at the lowest object level in which 
it occurred. In this schema, that is the para­ graph level. The database then is created by storing text 
with the object at the lowest level, and creating links between that level and the immediate parent ob­ject. 
The full text of an object such as a section can be retrieved using the transitive closure function provided 
in IRIS. Finally, it should be noted that the prototype sys­tem is very slow. Using IRIS to filter the 
output of INQUERY is a time-consuming operation, and for ef­ficiency reasons, additional indexes were 
created using INQUERY to provide information about object type. The process of creating the database 
is also unaccept­ably ~low (more than io hours for the 2000 objects-in the two dissertations). 7 Conclusion 
The COINS system is a complete implementation of a complex object retrieval model based on inference 
nets. The loosely-coupled integration of an object-oriented database system and a text retrieval system 
was shown to be a feasible platform for this retrieval model, and a variety of queries based on the structure 
and content of the objects that make up long, complex documents can be processed. The implementation 
highlighted a num­ber of problems with the loosely-coupled architecture, primarily related to efficiency. 
This system, however, should only be regarded as a step towards the eventual goal of an integrated database/text 
retrieval system for complex objects. Our main emphasis in future research will be to in­vestigate tightly-coupled 
integrations. In particular, we are interested in developing probabilistic object alge­bras, similar 
to the probabilistic relational algebras dis­cussed in [11]. An algebra of this would support the manipulation 
of object structure and probabilities pro­duced by the underlying retrieval algorithms.  Acknowledgments 
This research was supported in part by AFOSR con­tract 91-0324, Hewlett Packard Corporation, and Digi­tal 
Equipment Corporation. References <RefA>[1] J. Annevelink. Database programming languages: A functional approach. 
In 1991 ACM SIGMOD International Conference on Management of Data, pages 318 327, 1991. [2] J. Banerjee, 
H. Chou, J.F. Garza, W. Kim, D. Woelk, and N. Ballou. Data model issues for object-oriented applications. 
ACM Transactions on Ofice Information Systems, 5(1) :3 26, 1987. wernt ,1 I {Ll 1~. and etum.k f w 
, . . , , , . . and = :,, ,,, = , . xterm . . . . . k,, ~: ~ ~,.4&#38;2 (313> . . Sjc:e,:tion . . . 
.­ :. . . . . . .. 1.1 -. Figure 7: An example of normal mode retrieval 230 . -, + ~  wo~,~:l,?>?,,et-,,1..... 
. . . . . . . . . . . . . . . . . . . . . . . . I Figure 8: An example of suh mode retrieval %il){pIctwe}(575 
.~)(-So,151> wtmo.4w){\0val( 2s.m)} Wlt(2W,4W!{\mab &#38;x(0. O!{fd.r,$}> p.lt(mo.390)(\v? ctw( 0,-1)m}.1 
wt(192,3s0)<\vectcr( -1. -1 !{82}> >Put(212.395 ){\vectw( 2.-1) {1;6>} wt(OiM,3M)bwl(x .xI)} ,M,f(fim. 
<wl}n.. iah.. (h cl\rtf I t>i Figure 9: An example of super mode retrieval 231 [3] David C. Blair. 
An extended relational retrieval [16] model. Information Processing and Management, 24(3):349-371, 1988. 
[17] [4] J. P. Callan, W.B. Croft, and S.M. Harding. The INQUERY retrieval system. Technical report, 
De­partment of Computer Science, University of Mas­sachusetts, Amherst, MA 01003, 1992. [18] [5] M.P. 
Consens and A.O. Mendelzon. Expressing structural hypertext queries in graphlog. In Pro­ceedings of Hypertezt 
89, pages 269-292, 1989. [6] W. use B. of Croft, phrases H.R. and Turtle, and D.D. structured queries 
Lewis. The in informa­ [19] tion retrieval. In proceedings of the ACM SIGIR Conference on Research and 
Development in In­ formation Retrieval, pages 32-45, 1991. [20] [7] W. Bruce Croft, R. Krovetz, and H. 
R. Turtle. In­ teractive retrieval of complex documents. lnjo~rna­ iion I+ocessing and Management, 26(5):593 
6 13, 1990. [21] [8] W. Bruce Croft and Howard Turtle. Retrieval of complex objects. In Proceedings 
of EDB T 92, 1991. (to appear). [22] [9] D.H. Fishman. Overview of the Iris dbms. Hewlett Packard Technical 
Report, HPL-SAL-89-15, 1989. [10]Norbert Fuhr. A probabilistic framework for vague queries and imprecise 
information in databases. In Proceedings of VLDB 90, pages 696-707, 1990. [11] H. Garcia-Molina and D. 
Porter. Supporting prob­abilistic data in a relational system. In Proceedings of EDB T, pages 60-74, 
1990. [12] C. A. Lynch and M. Stonebraker. Extended user-defined indexing with applications to tex­tual 
databases. In Proceedings of the Veq LaTge Database Conference, pages 306-317, 1988. [13] I.A. Macleod 
and R.G. Crawford. Document re­trieval as a database application. Information Technology: Research and 
Development, 2:43-60, 1983. [14] D. Maier and J. Stein. Development and im­plementation of an object-oriented 
dbms. In B. Shriver and P. Wegner, editors, Research Direc­tions in Object-Oriented Programming, pages 
355­ 392. MIT Press, 1987. [15] Amihai Metro. VAGUE: A user interface to relational databases that permits 
vague queries. ACM Transactions of Ofice Information Systems, 6(3):187-214, July 1988. Gerard Salton 
and Chris Buckley. GIobal text matching for information retrieval. Sczen.cc, 253:1012-1015, 1991. Gerard 
Salton and Michael J. McGill. Introduction to Modern Information RetTieva/. hIcGraw-Hill, 1983. H.J. 
Schek. Methods for the administration of tex­tual data in database systems. ln C.J. Van Rljsber­gen, 
R.N. Oddy, and P.W. Williams, editors, Re­seaTch and Development in Information Retrieval, pages 218-235, 
1981. Howard R. Turtle. Inference NeiwoTks for Doc­ument Retrieval. PhD thesis, University of Mas­sachusetts 
at Amherst, 1990. H.R. Turtle and W.B. Croft. Evaluation of an inference network-based retrieval model. 
.4 CM Transactions on Information Systems, 9(3): 187 222, 1991. K. Wilkinson, P. Lyngbaek, and W. Hasan. 
The Iris architecture and implementation. IEEE Transactions on Knowledge and Data Engineering, 2(1):63-75, 
1990. S. B. Zdonik and D. Maier. Readings in Object-Oriented Database Systems. Morgan Kaufmann, San 
Mateo, CA, 1990</RefA>.  232 
			
