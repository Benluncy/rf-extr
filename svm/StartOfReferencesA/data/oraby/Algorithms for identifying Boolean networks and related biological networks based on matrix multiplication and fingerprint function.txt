
 Algorithms for Identifying Boolean Networks and Related Biological Networks Based on Matrix Multiplication 
and Fingerprint Function Tatsuya Akutsu *t§ Satoru Miyano t§ Satoru Kuhara ~§ Abstract Due to the recent 
progress of the DNA microarray technol- ogy, a large number of gene expression profile data are being 
produced. How to analyze gene expression data m an impor- tant topic in computational molecular biology 
Several stud- ies have been done using the Boolean network as a model of a genetic network This paper 
proposes efficient algorithms for identifying Boolean networks of bounded indegree and related biological 
networks, where identification of a Boolean network can be formalized as a problem of identifying many 
Boolean functions simultaneously. For the identification of a Boolean network, an O(mn D+I) time naive 
algorithm and a simple O(mn D) time algorithm are known, where n de-notes the number of nodes, m denotes 
the number of ex- amples, and D denotes the maximum indegree. This paper presents an improved O(rn~-2nD+ 
mn D+~-3) time Monte- Carlo type randomized algorithm, where w is the exponent of matrix multiplication 
(currently, w < 2 376). The algo- rithm is obtained by combining fast matrix multiplication with the 
randomized fingerprint function for string match- ing. Although the algortthm and its analysis are simple, 
the result Is non-trivial and the technique can be applied to several related problems. Introduction 
The DNA mmroarray technology is one of the most impor- tant inventions in recent molecular biology [11] 
A lot of projects are starting using the DNA microarray technology. Some of them aim at revealing gene 
regulation mechanism from time series of gene expression patterns. Expression pro- *Corresponding author 
tHuman Genome Center, Institute of Medical Science, Umverslty of Tokyo, 4-6-1 Shlrokanedat, Mmato-ku, 
Tokyo 108-8639, Japan E- marl {'taku'esu,m~.yano}@ams u-tokyo.ac.3p :~Graduate School of Genetic Resources 
Technology, Kyushu Um- verslty, 6-10-1 Hakozakh Hlgashl-ku, Fukuoka 812-8581, Japan E- mad kuhara@grt.kyushu-u.ac 
jp ~Thm work was partmlly supported by a Grant-m-Aid "Genome Science" from The Mmmtry of Educatmn, Science, 
Sports and Culture m Japan Permtss)on to make digital or hard copies of all or part of this work lbr 
pet sonal or classroom use )s granted without fee pJ o~,)ded that copies are not made or d)stributed 
fol profit or commeloal ad,,antage and that copies bear this notice and the full citation on the first 
page 1 o copy otherwise, to repubh~b, to post on servers or to redmt)~bute to h~ts. ~eqmres prior specd]c 
perm~ssmn and;or a fee RECOMB 2000 Tokyo Japan USA Copyright ACM 2000 1-58113-186-0/00/04 $5 00  8 files 
of several thousands of genes are now being produced for further analyses In order to infer gene regulation 
mechanism and/or ge-netic networks from time series of gene expression patterns, many studies have been 
done Although clustering has been successfully applied [11], information produced by cluster- ing is 
limited and is not enough for reconstructing genetic networks Therefore, other methods have been studied 
[3, 5, 7, 8, 12, 18]. Among them, several studies have been done using the Boolean network as a model 
of a genetic network [3, 18]. Liang, Fuhrman and Somogyi [18] proposed a heuristm al-gorithm for inference 
of Boolean networks of bounded inde- gree. Although they did not analyze the time complexity, it seems 
that the worst case complexity is O(rnnD+l), where m is the number of examples, n is the number of nodes, 
and D is the maximum indegree. We also proposed a simple O(mn D+I) time algorithm in order to analyze 
the sample complexity [3]. Then, we developed an improved O(mn D) time algorithm [4]. On the other hand, 
we can prove that the identification of a Boolean network is NP-hard if D is not a constant (i.e, D is 
included in an input). There-fore, it seems very difficult to design an algorithm for which the exponent 
is much smaller than D. In thin paper, we present an improved O(m~-2n D + mn D+~-3) time Monte- Carlo 
type randomized algorithm, where w is the exponent of matrix multiplication (currently, w < 2.376 [9]) 
The al- gorithm is obtained by reducing the identification problem to matrix multiplication, using the 
randomized fingerprint function [16]. Several related results are shown too. The technique is also applied 
to the Identification offune-twnal relatwns in a fixed domain and the identffication of quahtatzve relatzons. 
These problems are also Important be- cause they are considered as extensions of Boolean networks. In 
the identification of functional relations, the binary do- mmn {0, 1} ts extended to a fixed domain. 
In the identifica- tion of quahtatwe relatzons, functions based on differential equations are considered 
although only functions with one input variable are considered in this paper. These exten-sions are important 
because it is recently recognized that the Boolean network is not sufficient as a model of a ge-netic 
network and thus extensions of the Boolean network is becoming important. Moreover, the identification 
of func- tional relations may be useful for other biologmal problems since many biological data are stored 
m relational databases and extraction of functional relations from the databases is important for analyzing 
the data. Although the proposed algorithms are theoretically bet- ter than previous ones, they are not 
efficient in practice be- cause fast matrix multiplication algorithms are not practical. However, these 
algomthms show the existence of algomthms whzch are better than the nawe algomthms prewously devel- oped 
We hope that this result may lead to development of faster and practical algorithms Since a Boolean network 
can be considered as a set of Boolean functions, previous algorithms developed for infer- ring a Boolean 
functmn [17] might be apphed to the identi- fication of Boolean networks. In particular, the WINNOW algorithm 
[19] is simple and practical for inferring Boolean functions with a few variables. However, in order 
to apply the WINNOW algorithm to the identification of Boolean networks of bounded indegree, some post-processing 
would be required. It seems that post-processing will take O(mn D+I) time m the worst case, using a simple 
algorithm (Note that we are interested in the worst case time com-plexity in this paper). Of course, 
the algorithms proposed m thin paper can also be used for post-processing. Some algorithms were developed 
for inferring functmnal relations or functwnal dependenczes from relational databases [21, 22]. Although 
the developed algorithms are general ones, the worst case time complexities seem to be O(mn D+I) if they 
are modified for inferring functional dependencies with at most D input attrtbutes.  2 Problems and 
Results 2.1 Identification of Boolean Functions/Networks In this paper, we consider three types of problems: 
CONSISTENCY: Decide whether or not there exists a Boolean network (resp. function) consistent with the 
given examples, and output one if it exists, COUNTING: Count the number of Boolean networks (resp. functions) 
consistent with the given examples, IDENTIFICATION: Decide whether or not there exists a unique Boolean 
network (resp. function) consmtent with the given examples, and output it if it exists. Although we present 
algorithms for the counting prob- lem, they can be converted for the consistency problem and the identffication 
problem without increasing the order of the time complexity We formally define the counting prob- lem 
for Boolean networks (resp. functions) as follows. INPUT: yj(k) (3-- 1...1, k = 1.. m), x~(k) (~ = 1...n, 
k ----1...m), and integer D, where x~(k) and y3(k) take Boolean values (i.e., 0 or 1) respectively, OUTPUT: 
for each 3, the number of Boolean functions fj(x~ , . . . ,X~D )'S such that y3(k) = f3(X,l (k) ..... 
x~9 (k)) holds for all k = 1 .m. We call a tuple (yl (k),..., Yl (k), Xl (k),..., x,~ (k)) for each k 
as an example This problem is NP-hard for general D (Le, D is in- cluded in INPUT), whmh can be proven 
as in [2, 20, 22]. Therefore, we are interested in the case where D is a con-stant Particularly, we are 
interested in the case of D --2 since we can reduce higher-dimensional problems to two-dimensional problems 
by using a simple method described in Section 3.1 3 Moreover, we are interested m the case of l ---- 
1 and the case ofl = n For the case ofl = 1, it is the identification problem of a Boolean function. 
For the case of l = n, it is the identification problem of a Boolean network For a general case of the 
problem, there is a trivial algorithm, for each Y3, for all type of 22D Boolean functions f, for all 
combinations of D variables x~l,... , X~D, exam-ine whether or not Y3 (k) = f(x~ 1 (k),...,X~D(k)) holds 
for k = 1 .. m. This algorithm takes O(lmn D) time for a con- stant D. Note that, although we should 
carefully count the number of functzons so that the same function ~s not counted more than once, st can 
be done wzthout affecting the orders of the tzme complex~tzes m all algomthms presented zn thzs paper. 
Recently, we developed an improved O(mn D + Im) time algorithm [3], by using a tree, which is a well-known 
data structure m string matching [1]. In this paper, we further improve the time complexity and we show 
the following al- gorithms. An O(nDm ~-2 q-nD+~-Zm) time deterministic algo- rithm for the case of/= 
1,  An O(nDm ~-2 q- nD+~-3m) time Monte-Carlo type randomized algorithm for the case of I -- n,  where 
w denotes the exponent of matrix multiplication (i.e., matrix multiplication of n × n matrices can be 
done in O(n ~) time) [9]. Note that, for n × m matrices X and Y, matrix product X -Y~ can be computed 
in O(mn ~-1) time if m > n, otherwise It can be computed in O(m~-2n 2) time, by partitioning each matrix 
into small square matrices Note also that, in this paper, Y~ denotes the transposed matrix of Y. Recently, 
some improvement on matrix multiplication was done for the case of m ¢ n [14]. That result might be useful 
for improving the time complexities of the algorithms in this paper for the case of m << n. Although 
Boolean functions are considered in the above, the algorithm for the case of l --n can be extended for 
finding functional relations (or, functional dependencies) in a fixed domain.  2.2 Identification of 
Qualitative Relations In order to analyze gone expression data or other time series data, some studies 
are done on deriving linear differential equations from data [12]. However, linear differential equa- 
tions are not always appropriate. Moreover, in many cases, it is very difficult to decide what kind of 
differential equa- tions should be used. In such a case, deriving functional relations qualitatively 
might be useful [5, 24]. It should be noted that qualitative reasoning has been studied very well m artificial 
intelligence [10]. Although it is assumed in most previous studms that qualitative rules are given, deriving 
qualitative rules from data is also important In order to develop algorithms for deriving qualitative 
rules, we must define a qualitative model But, it is not a easy task to develop a satisfactory model 
although some efforts have been done [5, 24]. In particular, ~t seems very difficult to develop a model 
including qualitative relations w~th multiple inputs. Therefore, we consider a simple qual- itative model 
which is recently developed by us [5] We consider the following simple rules in this paper x~ activates 
(resp. inhibits) yj lff. the current value (level) of x~ is greater than some threshold value %,3, ~ 
dt >Olff x~(t)>%,3 These rules are equivalent if z3(t ) expresses the expression level of gone Y3 and 
d~(t) > 0 means that Y3 ts activated dL AND: xAy, xA~,~Ay,~A~, OR: xVy, xV~, ~Vy,'~V~. In this paper, 
different types of Boolean functions are counted  dt / X i 0 Figure 1: For a monotonically increasing 
function f(x), it holds that dzj/dt > 0 iff. x, > %,3, where dz3/dt = f(x~) Note that one-dimensional 
linear differential equation dz(t) _ ix(t) + b satisfies the second rule if a > 0 (by let- dt ting "y 
= -b/a) Of course, we can treat the case of a < 0 by replacing "x~(t) > %o" with "x,(t) < %j". Moreover, 
dz(t) every differential equation --~ = f(x(t)) also satisfies the second rule if f(x) is a monotomcally 
increasing function (see Fig 1) Based on the above discussion, we define (1-d version of) the counting 
problem for quahtatwe relatwns as follows. INPUT: y~(k) (3 = 1.. l, k= 1 .m), x,(k) (z = 1...n, k = 1...m), 
where x,(k) takes a real value and y,(k) takes either 0 or 1, OUTPUT: for each Y3, the number of x~'s 
for whmh there is a threshold "h,3 such that y3(k) --- 1 iff. x~(k) > %j for allk= 1. m The identification 
problem and the consistency problem can be defined as in Section 2.1. In this definition, "yo(k) = l" 
corresponds to "y~ is activated" or ,dzj(t) > 0", and dt ,,a__~(t) < 0". "Y3 (k) --0" corresponds to 
"Y3 is inhibited" or dt -- For the case of l = 1, there is a simple optimal O(mn) time algorithm: for 
all z, examine whether or not (x~) + > (x~)-, where we let (x~) + = min{x~(k)lyl(k) = 1} and (x~)-= max{x~(k)iyl(k) 
= 0}. Note that there exists a threshold %,I ((x,)- _< %,1 < (x~) +) iff. (x~) + > (x,)-. As in Section 
2.1, we are particularly interested in the case of l --n. Using the algorithm for l --1 repeatedly, we 
can obtain an O(mn 2) time algorithm. For this case, we show the followmg improved algorithms: An O(mnlog(mn)) 
time Monte-Carlo type random-ized algorithm, l+w w--i 2 An O(mn-'r-+m-r-n ) time deterministic algorithm 
 Algorithms for Boolean Networks/Functions In this section, we describe algorithms for the counting prob- 
lem for Boolean functions and Boolean networks. Before describing the algorithms, we note that Boolean 
functions f(x, y) with two input variables are classified into the fol-lowing categories: CONSTANT: 0, 
1, UNARY: x, 5, y, ~, XOR: x@y,x@y, separately. Since the countings of CONSTANT and UNARY functions are 
easier, we only consider AND, OR, XOR func- tions 3.1 An Algorithm for Boolean Functions In this subsection, 
we consider the case of I = 1. First we show an algorithm for counting the number of Boolean functions 
of the form x A ~. The other types of functions in AND and OR categories can be counted in a similar 
way. 3.1.1 Counting of x A ~ functions The algorithm consists of two steps The first step is similar 
to the PAC learning algorithm for monotone Boolean func- tions [17, 25]. It begins with the conjunction 
of all literals Xl Ax2A .AxnA'X"IA~A...Ax--'~, and processes examples one by one (from k = i to k = m). 
If yl(k) = 0, nothing is done If yl(k) = 1, all x~'s such that x,(k) = 0 and all ~7's such that x,(k) 
= 0 (i.e., x, (k) = 1) are deleted from the conj unction respectively. Let x~l,...,x,~,xj'--]',...,x3h, 
be the variables remained in the conjunction after testing all examples. Let kl,k2,..., kin, be the indices 
such that yl(k,) = O. In the second step, we make two matrices X and Y, where X is the h x m' integer 
matrix defined by Xt,s --x,t (ks), and Y is the h' × m' integer matrix defined by Yt.8 = x3, (ks). We 
compute the matrix product Z = X. yr. Then, we count the number of elements Z,,o such that Z,.3 = 0. 
Since (Vk)(yl(k) = x,~(k)A xo~(k)) holds iff. Zs,t = 0, the correct number is output. Now we analyze 
the time complexity. Clearly, the first step takes O(mn) time. The second step takes O(m'°-2n 2 + mn 
~°-1) time since m ~ < m, h _< n and h' < n. Therefore, the total time complexity is O(m'°-2n 2 + r~ 
'°-1) Example 1 Assume that the following examples are given as an input data set: Yl Xl X2 X3 X4 X5 
X6 1 1 1 1 0 1 0 0 0 1 0 0 1 1 0 1 0 1 1 1 1 0 1 1 0 1 1 0 1 1 1 1 0 0 0 0 0 1 0 0 1 1 After the first 
step, we have the following table: Yl Xl X2 X3 X4 x6 0 0 1 0 1 0 0 1 0 1 0 0 0 1 1 0 0 1 0 0 1 0 1 0 
In the second step, we compute the matrix product: 0110 O0 = 21 1011 O1 O0 0100 10 Thus, we have the 
following three Boolean functions consis- tent with the given examples: Vl(k) = Xl(k) Ax4(k), y~(k) = 
x~(k)Ax~(k). 3.1.2 Counting of x @ y functions This case is easier than the above case and we do not 
re-quire matrix multiplication First note that x y = z iff. x E3 z = y. Let 8tr(x,) be the sequence 
of Boolean val-ues of x~(k) (i e., 8tr(x~) = (x~(1),x,(2),...,x~(m))). Let str(x,)' be the sequence of 
Boolean values of x,(k) ~ yl(k) (i.e., str'(x,) = (x,(1) ~) yl(1),x,(2) @ yl(2),...,x,(m) @ yl(m))). 
Then, we count the number of pairs (x,, Xs) such that str(x,) = str'(x3). Of course, it would take O(mn 
2) time if we used a naive algorithm. But, we can reduce the time complexity to O(mn) by constructing 
a tree for str(x~)'s and str'(xs)'s, as in [4]. It is easy to modify the algorithm for counting of ~ 
functions Theorem 3.1 The counting problem for Boolean funetzons of two znputs can be solved zn O(m°~-Un 
2 +mn ~-1) t,me 3.1.3 Extension to D > 2 Using the above mentioned algorithm, we can develop an O(m~-2nD+mnD+~-3) 
time algorithm for any fixed D _> 2. Here, we brmfly describe the method for D = 3. Note that f(x, y, 
z) = (z A -f(x, y, 1)) V (~ A f(x, y, 0)) holds for any Boolean function -f(x,y, z). Thus, we can count 
the number of Boolean functions f(x,, xs, Xh) for fixed xh by multiplying the number of fl (x,, x 3)'s 
such that yl (k) = -fl (x,(k), x3(k)) holds for examples with xh(k) ---- 1 and the number of -f2(x,,x~)'s 
such that yl(k) = f2(x,(k),xa(k)) holds for examples with xh(k) = O. Corollary 3.2 The counting problem-for 
Boolean -functwns o-f D znputs can be solved zn O(m°J-2n D + mn D+~-3) t,me. 3.2 An Algorithm for Boolean 
Networks In this subsection, we consider the case of I = n where the technique can be applied to any 
1. In addition to matrix multiplication, we use the ran-domized fingerprint function developed by Karp 
and Ra-bin [16, 23]. Here we briefly review the function. Let 8 = (sl, s2,..., s, 0 and t = (tl, t2,..., 
tin) be strings of length m over {0, 1}, respectively. Let p be a prime number We define the fingerprint 
function Fp(s) by Fp((St,s2,. . ,sin)) ---- 81"20+82"21+.. +sin.2 "~-1 mod p. It was shown that, by choosing 
a prime number less than T = O(cmlog(cm)) uniformly at random, Prob(Fp(s) = Fp(t)) < ~ holds for any 
s # t. For simplicity, we describe the counting algorithm for Boolean functions of the form x, A x-i3, 
where it can be easily modified for the other functions in AND and OR categories For each y,, we compute 
Fp((y,(1),y~(2), . ,y~(m))). We make two matrices X and Y, where X is the n x m integer matrix defined 
by X,,k = x,(k) -2 k-1 rood p, and Y is the n × m integer matrix defined by Ys,k --x3(k) Next, we compute 
the matrix product Z = X - Y* under modulo p (i.e., under GF(p)). Then, we partition Z,.0's into groups 
so that each group consists of elements having the same value. For each Yh, we output the number of elements 
in the group that has the same value as Fp(yh). It is easy to see that Z,,3 = (x,(1) A xa(1)) -20 + (x,(2) 
A x3(2)). 21 +.. +(x,(m) Ax~(m)) 2 m-1 modp. Therefore, for any triplet (Yh, x,, x 3) satisfying (Vk) 
(Yh (k) ----x,(k)Ax 3 (k)), Fp(yh) = Z,, s always holds, whereas Fp(Yh) Z,j holds with high probability 
for the other triplets (yh, x,, x 3 ) By letting ~-= O(mn 3+a log(mn3+a)), the failure prob- ability 
(i e., the probability that a false number is output for some yh) can be made less than 1. In order to 
treat XOR functions, we can use the following fact: x, ~ x 3 = (x, V xs) -(x, A x3), where we omit details 
here. Now we consider the time complemty. Since we assume the standard RAM model in this paper, each 
arithmetic operation for O(log(nm)) bit integers can be done in con-stant time. Therefore, we can assume 
that each operation in GF(p) can be done in constant time Generation of a random prime number can be 
done in O(poly(log(T))) time using a Monte-Carlo type randomized algorithm [23]. Since all known matrix 
multiplication algorithms are available in any ring [23], Z = X . yt can be computed in O(m°J-2n 2 + 
mn °~-1) time. Since the other parts take O(n 2 logn + ran) time, we have: Theorem 3.3 The counting problem 
[or Boolean networks of D = 2 can be solved in O(m°~-2n 2 +mn ~-1) tzme w,th h,gh probabzhty Using the 
same technique as in Corollary 3.2, we can extend the algorithm for any fixed D. Corollary 3.4 The countzng 
problem for Boolean networks of fixed D can be solved m O(m°~-2n D +mn o+~-3) t,me wzth h,gh probab,hty 
Example 2 Assume that the following examples are given as an input data set:     Yl Y2 Xl X2 0 1 
1 0 0 0 1 1 1 0 0 1 0 0 O 0 0 1 1 0 Then, we compute the following under modulo p' (20210024) (0 1) 
00 ( 020+24 ) 0 21 22 0 0 1 1 0 1 = 22 0 ' 0 1 Since Fp(yl) --- 22 and Fp(y2) : 2 ° + 24 (rood p), we 
know that yl(k) = x2(k) A xl(k) and y2(k) = xl(k) A x2(k) (with high probability) 3.3 Algorithms Robust 
for Noises [n practice, input data may contain noises. In such a case, Boolean functions f(x,t,.. ,x~)) 
whose errors (i.e., I{k[y~(k) ~ f(x,,,.. ,x~,)}l ) are less than some thresh- old should be output A 
trivial algorithm takes O(mn D+~) ~lme for the case of I = n. Matrix mult,plication ~s also useful in 
order to count the error. Using matrix mult~phca- ~hon, we can reduce the time complexity to O(m~-~n 
D+~ + ~rtt'/2D +w-- 2). A simple and well-known random sampling techmque can also be used. Randomly choosing 
~)(log m) samples from m, we can develop an O((logm)n ~+~) time randomized algo- rithm which outputs 
all Boolean functions with errors less l~han the threshold w~th high probability, although Boolean functmns 
with errors shghtly more than the threshold are also output. But, both algorithms are almost trivial 
and are not practical because each algorithm takes more than O(n 3) t,me even for D ----2. Recall that 
even Saccharomyces cerews~ae (budding yeast) has approximately 6000 genes [11] (i e , n ~ 6000) 3.4 
An Approximation Algorithm As mentioned in Section 2, the identification problem is NP- hard if D is 
not a constant However, we can develop a polynomial time approximation algorithm, using the tech- nique 
developed for an approximation algorithm for the min- imum key problem [2] As in [2], we reduce the problem 
to ~;he SET COVER problem Recall that SET COVER is, given a collection of sets S = {S1,...,SM} over a 
set U (S~ C U), to find a minimum cardinality set C C_ $ such ~hat (Js, ec S~ - U For each of y3's, we 
compute a set of variables {x'~l,.. , x~h } as follows. From the given examples, we construct U and S~'s 
by U ----{(k,k')l k < k' and y~(k) #yj(k')}, S~ = {(k,k')l x,(k) Cx~(k')) N U. Then, we apply an apprommation 
algorithm for SET COVER I15] to S~'s and U. Since SET COVER can be approximated within a factor of In 
IU] + 1, we have: Theorem 3.5 Assume that f3(x~ (k), ..,x,D(k)) ---- y~(k) ,~olds for all k Then a set 
of vamables {x¢1, .., xch } such that h ~ (21nm + 1)D and there exists a Boolean ]unctwn .f~ satzs-fymg 
-f~(x~,l (k),... ,x~,h (k)) = y~(k) -for all k can be found ~n polynomzal tzme. Although a set of variables 
can be found in polynomiM time, it seems difficult to determine f~ in polynomial time because there exist 
22~ Boolean functions with d input vari- ables. It should be noted that description of a function needs 
~(2 ~) space unless types of Boolean functions are restricted. 3.5 An Algorithm for Finding Functional 
Relations Although the domain of values is restricted to {0, 1} in Boolean networks, the algorithm in 
Section 3.2 can be ex- tended for other fixed size domains. Since Boolean values may not be adequate 
for representing gene expression levels, this extension is important. As in Section 3.2, we explain the 
algorithm for the case of D = 2. Extension to other D's can be done as in Section 3.1.3. Let E be the 
domain (1 e, x~(k),yh(k) E E), where we let b -- IEI In this case, we use the fingerprint function on 
base b: Fp.b((Sl,S2, ,sin)) = Sl b°+s2 bl+...+sm'b m-1 modp, where it is known that a property similar 
to that of Fp holds for this function [23]. For each function f in E × E --, E, we examine whether or 
not there exists a triplet (Yu, x~, x3) such that yh(k) = f(x,(k),x3(k)) holds for all k. For each (~ 
C E, let X ~ be the n x m matrix defined by / 1, ifx~(k) = a, X,,k = 0, otherwise. For each a E E, 
let ya be the n× m matrix defined by Y3,ak = f(a, X 3 (k)), where we encode each element in E by using 
an element in {0, 1,... ,b- 1). Let Z = EX c'. (y(,)t. Then, c~ Fp,b((yh(1), .,yh(m))) = Z~,3 holds ff 
yh(k) = f(x,(k), xj (k)) holds for all k, and Fp,b((yh(1),.. ,yh(m))) ~ Z,, 3 holds with high probability 
if yh(k) ~ f(x~(k), x o (k)) holds for some k. Theorem 3.6 For a fixed domain, the number of functwnal 
relatwns Y3 = f(x~l ,. . . , X~D) can be computed for all Y3 m O(mW-2n D Jr mn D+~-3) tzme for fixed 
D w~th hzgh proba- bdzty. 4 Algorithms for Finding Qualitative Relations 4.1 Simple Deterministic Algorithms 
As mentioned in Section 2.2, there is a simple O(mn 2) time deterministic algorithm for the counting 
problem for quali- tative relations. Proposition 4.1 The counting problem for quahtatwe re-latwns can 
be solved m O(rnn 2) t~me. Here, we present an O(m2n) time deterministm algo- rithm. Let str(y,) be the 
sequence of y(Q's (i.e., str(y,) = (y(1),y(2),.. ,y(m))) Then, the following is the descrip- tion of 
the algorithm (1) Make a tree for the set of sequences {str(yl), str(y2),...,  str(y~)}, (2) For all 
x~, sort x~(k)'s m the increasing order and let ~(1) < ~(2) < .. < 2~(m) be the sorted sequence, where 
we assume w.l.o.g, x~(k) ¢ x,(k') for k ¢ k', (3) For all x, and for all h E {0, 1,...,m}, construct 
the  sequence str(x h) = (s~gn(x~(1),h),slgn(x~(2),h) sign(~,(m), h)) ..... 1, if x~(k) > ~(h), where 
s~gn( x, ( k ) , h) 0, otherwise, = and we let ~(0) ---c~, (4) For all str(y~), count the number of str(xh)'s 
such that str(y,) = str(x~) Example 3 Let x~(1..5) : (5, 2, 3, 1, 4) and let Y3 (1..5) = (1, 0, 0, 
0, 1). Then, str(xh(k))'s are as follows- str(x~) = (1,1,1,1,1), str(x~) = (1,1,1,0,1), str(x~) = (1,0,1,0,1), 
str(x~) ----(1,0,0,0,1), str(~) = 0,o,o,o,o), str(~) = (o,o,o,o,o). In this case, the threshold %,3 
is between ~(3) and ~(4) because str(x 3) = str(y~). The correctness of the algorithm is obvious. Since 
STEP 3 and STEP 4 take O(m2n) time, the total time complexity is O(m2n). Proposition 4.2 The counting 
problem for quahtatwe re-latwns can be solved m O(m2n) tzme 4.2 A Randomized Algorithm In order to develop 
a near optimal randomized algorithm, we modify the O(m2n) time algorithm, using the randomized fingerprint 
function F v. The modificatmn is very simple and is based on the following observation: when Fp(str(xh)) 
is known, Fp(str(xh+l)) can be computed in constant time by Fp(str(xh+l)) = Fv(str(xh)) -- x,(k). 2 k-1 
mod p, where x~(k) is the element at which str(x~ +1) differs from str(xh). The following is the description 
of the randomized algorithm. (1) For all Y3, compute Fv(str(yo)), (2) For all x~ and for all h E {0, 
1,..., m}, compute Fp( str( x~ ) ),  (3) For all str(y3) , count the number of str(xh)'s such that Fv(y3 
) = Fp( str( x~ ) ). Here we consider the time complexity. Clearly, STEP 1 takes O(mn) time. From the 
observation mentioned above, STEP 2 takes O(mn) time too. STEP 3 takes O(mn log(mE)) time by using an 
appropriate search tree for Fp(str(xh))'s. Therefore, the total time complexity is O(mn log(mE)). As 
in the case of Boolean networks, the failure probabd- ity can be made less than ~ for any fixed constant 
(~ _> 1 under the standard RAM model, without increasing the or- der of the time complexity. Therefore, 
we have: Theorem 4.3 The counting problem for quahtatwe rela- twns can be solved m O(mn log(mn) ) t~me 
wzth h~gh proba- bdzty. 4.3 A Deterministic Algorithm Although we do not yet succeed to develop a near 
optimal deterministm algorithm for the counting problem for qualita- tive relations, we can develop an 
o(mn 2) time deterministic algorithm. Let '*' denote the don't care character That is, ',' matches any 
single character. Then, the following iemma is easily obtained by combining matrix multlphcatmn with 
the idea used m pattern matching with don't care characters [13].  Iololololololololololo'lol I I t 
It Ill~ Iili Ill [  Iolololololololololol*l*l*l*l*lllllllllal Figure 2: Construction of ~r(x~) for 
h = 10, where m = 20, M = 4, and x~(1) < x~(2) < ... < x,(m) in this example. The string above the arrow 
corresponds to str(x~ 2) Lemma 4.4 Gzven strings sl,. . , s n over an alphabet (0, 1, } and stmngs tl,.. 
,t '~ over an alphabet {0,1} each of which has length m, all paws (/,3) such that s ~ matches t 3 can 
be enumerated m O(mn ~-1 + m~-2n 2) t~me. The algorithm consists of two parts: rough matchings are first 
computed and then exact matchings are computed, where a similar technique was already used for pattern 
match- ing of 2-D figures [6]. In order to find rough matchings, for each x~, we make M + 1 strings containing 
don't care char- acters (see Fig. 2), where M is to be determined later and we assume w.l.o.g, that M 
divides m. We define s~r(x h) by s~r(x~) = (s~gn(x~(1)),s~gn(x~(2)),..., s~gn(x~(m))) 2m m(M--l~ where 
 for h = 0,~, M''''' M ' s~gn(x~(k)) { 0, if x,(k) < &#38;,(h), = *, if k,(h) < x,(k) <_ &#38;,(h + -~), 
1, if x,(k) > 5z,(h + ---~). Then, the following is the description of the algorithm. (1) For all s~r(x 
h) and for all str(y3), examine whether or not s'-tr(x h) matches str(y3), (2) For all pairs found in 
STEP 1, examine whether any of  str(xh), s~;r(xh+l), ..., . ] h+~-i. s~r(x~ ) matches str(y 3). Here 
we analyze the time complexity First we assume m > n. Clearly, STEP 1 can be done in O(Mmn ~-l) time, 
using Lemma 4.4 Note that for each pair (x~,y3), at most one ~r(x h) matches str(y3) Moreover, in STEP 
2, we only need to consider a part of 8~r(x h) that con-stats of don't care characters. That is, we only 
examine exact match of two strings with length m/M for at most n 2 pairs From Proposition 4.1, it can 
be done in O((m/M)n 2) time Therefore, the total time complexity is O(Mmn ~-1 + (m/M)n2)). By letting 
M = n'~, the time complexity becomes O(mn L+~). For the case of m < n, the total time complexity is O(Mm~-2n 
2 + (m/M)n2)) because STEP 1 takes 3--w O(Mm~-2n2) time. By letting M ---m"~, the time com- w-1 2 plexity 
becomes O(m-'W'n ). Theorem 4.5 The counting problem for quahtat~ve rela- l+w ~-1 2 tzons can be solved 
m O(mn-~-+ m-'z--n ) tzme Concluding Remarks [10] J. de Kleer and J.S. Brown. Qualitative physics based 
In this paper, we presented improved algorithms for identifi- cation of Boolean networks and related 
biological networks Although most of the proposed algorithms are not efficient in practice, the results 
show the existence of algorithms which are better than the naive algorithms. If an ultimate matrix multiplication 
algorithm (w --- 2?) were developed, the time complexity of the identification al- gorithm for a Boolean 
network of D --2 would be O(n 2 log n +mn), whmh is nearly optimal in the case of m > n How-ever, it 
is still far from optimal when m << n. Therefore, development of faster algorithms, in partmular, development 
of an algorithm for which the exponent of n is less than 2 (for D = 2) is an open problem. In the identification 
of functmnal relatmns, we assumed a fixed domain. Develop-ment of an o(mn D) time algorithm for any domain 
is also an open problem. For the identification of qualitative relations, we only considered functions 
with one input varmble However, func- tions with multiple input variables should be treated Al-though 
we have been trying to make a qualitative model including functions with multiple inputs [5], we do not 
yet succeed to develop a satisfactory model. Therefore, devel- opment of such a model is important future 
work.  References <RefA>[1] A V. Aho. Algorithms for finding patterns in strings. in J Van Leeuwen (ed.) Handbook 
of Theoretzcal Com- puter Science, Vol A, 1990. [2] T. Akutsu and F. Bao. Approximating minimum keys 
and optimal substructure screens Proc 2nd Int Conf. Computzng and Combmatomcs, 290-299, 1996. [3] T Akutsu, 
S. Miyano and S. Kuhara. Identification of genetic networks from a small number of gene expres- sion 
patterns under the Boolean network model. Proc. Paczfic Symposzum on Bzocomputmg '99 (PSB'99), 17- 28, 
1999. [4] T. Akutsu, S. Miyano and S. Kuhara. Fast identifica- tion of Boolean networks. Technical Report 
99-AL-66, Information Processing Society of Japan, 25-32, 1999 [5] T. Akutsu, S. Mlyano and S. Kuhara. 
Algorithms for in- ferring qualitative models of biological networks To ap- pear in Pacific Symposium 
on Bzocomputzng 2000 (PSB 2000). [6] A. Amir and M. Farach Efficient two-dimensional ap- proximate matching 
of non-rectangular figures. Proc. ACM-SIAM Symp on Dzserete AIgomthms, 212-223, 1991. [7] A. Arkin, P. 
Shen and J. Ross. A test case of corre- lation metric construction of a reaction pathway from measurements. 
Sczence, 277:1275-1279, 1997. [8] T. Chen, V. Filkov and S.S. Skiena. Identifying gene regulatory networks 
from experimental data. Proc. 3rd lnt Conf. on Computatzonal Molecular Bzology (RE-COMB'99), 94-103, 
1999. [9] D. Coppersmith and S. Winograd. Matrix multiplica- tion via arithmetic progression. J. Symbohc 
Computa- tzon, 9:251-280, 1990 on confluences. Artzficzal Intelhgence, 24'7-83, 1984 [11] J.L. DeRisi, 
V.R. Lyer and P.O Brown. Exploring the metabolic and genetic control of gene expression on a genomm scale. 
Science, 278:680-686, 1997. [12] P. D'haeseleer, X. Wen, S. Fuhrman and R. Somogyi. Linear modeling of 
mRNA expression levels during CNS development and injury. Proc. Pacific Symposzum on Bzocomputmg'99 (PSB'99), 
41-52, 1999 [13] M.J Fisher and M.S. Paterson. String matching and other products. Proc. SIAM-AMS Conference 
on Com- plexity of Computatwn, AMS, 113-125, 1974 [14] X. Huang and V Pan. Fast rectangular matrix mul- 
tiplication Proc. ACM Syrup. Parallel Algebrazc and Symbohc Computatwn, 11-23, 1997. [15] D.S Johnson 
Approximation algorithms for combi- natorial problems J Computer and System Sezences, 9 256-278, 1974. 
[16] R.M. Karp and M.O. Rabin. Efficient randomized pattern-matching algorithms. IBM Journal of Research 
and Development, 31:249-260, 1985. [17] M.J. Kearns and U.V Vazirani. An Introductzon to Computatwnal 
Learnzng Theory, The MIT Press, 1994. [18] S. Llang, S. Fuhrman and R. Somogyi. REVEAL, a general reverse 
engineering algorithm for inference of genetic network architectures. Proe. Pacific Symposzum on Bwcomputzng 
'98 (PSB'98), 18-29, 1998. [19] N. Littlestone. Learnmg quickly when irrelevant at- tributes abound: 
a new linear-threshold algorithm Ma-ehzne Learning, 2:285-318, 1988. [20] K. Makino. Studzes on posztwe 
and horn Boolean func- tzons wzth apphcatzons to data analysts, Ph.D Thesis, Kyoto University, 1997 [21] 
H. Mannila and K. R~ih~i. Dependency inference. Proc. 13th VLDB Conference, 155-158, 1987. [22] H. Mannila 
and K. R~ih~i. On the complexity of infer- ring functional dependencms. Dzscrete Apphed Mathe- matzcs, 
40:237-243, 1992. [23] R. Motowani and P. Raghavan. Randomized Algo-mthms, Cambridge Univ. Press, 1994. 
[24] D. Thieffry and R. Thomas. Qualitative analysis of gene networks. Paczfic Sympostum on Bwcomputmg'98 
(PSB'98), 77-88, 1998. [25] L.G. Valiant. A theory of the learnable. Communzca-twns of the ACM, 27.1134-1142, 
1984.</RefA>  
			
