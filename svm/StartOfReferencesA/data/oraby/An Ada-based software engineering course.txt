
 An Ada-Based Software Engineering Course Department G. Scott Owen of Mathematics and Computer Georgia 
State University Atlanta, Georgia 30303 Science Abstract Currently, many Computer Science Departments 
have introduced or are considering the introduction of courses in Software Engineering. At the same time 
many departments are considering the use of a language other than Pascal either for an entire Computer 
Science curriculum, or suchat least for some advanced courses, as Data Structures or Software Engineering. 
At Georgia State University, where our program is primarily based on IBM PC compatible microcomputers, 
both our Data Structures and Software Engineering courses are based on Ada. In this paper we will discuss 
the rationale behind our choice of Ada and our experience with using Ada in the Software Engineering 
course. Introduction Some of the major complaints from industry concerning new computer science graduates 
are that they lack communication skills, have no experience in working in groups, and have little understanding 
of the complete software development experience for non-trivial programs. Georgia State University (GSU), 
like many other colleges, has tried to address these issues by establishing a project -oriented course 
in Software Engineering. Prior Student Experience GSU is an urban campus, located in downtown Atlanta, 
and has a somewhat unusual student population in that the Permission to copy without fee all or part 
of this material is granted provided that the copies are not made or distributed for direct commercial 
advantage, the ACM copyright notice and the title of the publication and its date appear, and notice 
is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, 
or to republish, requires a fee and/ or specific permission. 1989 ACM 0-89791-298-S/89/0002/0213 $1.50 
average age of the undergraduate students about 27 and the average age of t:aduate students is 30. Most 
of our students have either part time or full time jobs, and many are already software professionals. 
All of our courses are five hour quarter courses (about 45 actual contact hours) and the Data Structures 
course is the third course for our students. The first two courses primarily use Pascal with 3-4 weeks 
of FORTRAN in the second course. In the data structures course we use Mike Feldman's text "Data Structures 
with Ada" [FELD85] and "Programming in Ada" by J. G. P. Barnes [BARN84]. The Data Structures course is 
the prerequisite for all of our advanced courses. A second prerequisite for the Software Engineering 
course is a course in the Organization of Programming Languages. This course uses [PRAT84] for its primary 
text and [BARN84], [GEBA85], and [ROGE87] as secondary texts. For this course we assume the students 
have a prior knowledge of Pascal, FORTRAN, and some Ada. While proceeding through [PRAT84] the students 
are introduced to the C language, PROLOG, and advanced topics in Ada. Thus, when the students enter the 
Software Engineering course they should have had two quarters exposure to Ada and a general exposure 
to several other languages. The Software Engineering Course is a required course and currently the same 
course is used for both senior level and graduate students (a second, advanced graduate course is planned 
but has not yet been implemented). Thus, the class has a mixture of undergraduates and graduate students, 
and as mentioned above, some of these may actually be @'Software Engineers" in local businesses. This 
makes for rather interesting classes since the students can discuss their own "real world" experiences. 
While it has been suggested that there should be a two quarter Software Engineering sequence, with the 
213 first quarter covering the principles and the second quarter involving a large team project, this 
is not feasible in our program. Obiectives of the Software EnsineerinqCourse The objectives of the course 
are to introduce the students to the rationale for using Software Engineering methods and important aspects 
of Software Engineeringsuch as the software life-cycle, cost estimation, requirements analysis, specification, 
design, implementation, verification, validation, and maintenance. Different methodologies are presented 
for each of the above areas and the students participate in a team project of non-trivial size. The primary 
text is Software Ensineerinq Concents by R. Fairley [FAIR85]. A secondary text is Confisuration Manasement 
by W. Babbich [BABB86] and a suggested text is The Mythical Man-Month by F. P. Brooks, Jr. There is also 
a reading list from the literature, which changes every quarter (Figure I). We also try to acquaint the 
students with current research in Software Engineering methodologies. The basic format of the course 
follows [FAIR851 and the sequence of topics is that of the actual software development process. It is 
necessary to supplement [FAIR851 in some topics,particularly software design. The students are introduced 
to Object Oriented Development (OOD) [B0087a] and [B0087b]for Ada, and use this method for their project. 
There are several objectives of the team project. The first is to give the students a somewhat realistic 
experiencein developing a software system with complete documentation, as opposed to justwriting a program 
as they do in most of their classes. A second objective is to have the students work in teams and to 
learn to cope with the associated groupdynamics problems. The third objective is to improve the students' 
rhetoric skills, particularly in written communication. Improving the students* writing skills is achieved 
in part by the students creating the documents discussed below. To further achieve this objective, the 
class examinations, both the midterm and the final, are take home essay examinations (limited to ten 
single-spaced typed pages). While specific points are not deducted for spelling or grammatical errors, 
the class is told that these errors influence the overall grading of the documents. Team Project The 
team project follows the guidelines in the Appendix of [FAIR851 and the deliverables include the following,which 
are due at different times duringthe quarter: 1. A System Definition (ProductDefinition and Project Plan) 
which includes a preliminary cost estimate 2. A Software Requirements Specification 3. A Design Document 
which includes a final cost estimate. 4. A Test Plan 5. A User's Manual 6. The final report  Each 
group's final report includes a documented, tested, and debugged program,updated versions of the original 
set of documents, plus the following new sections: a discussion of how well the project agrees with its 
original goals an analysis of how good the design is in retrospect: changes that would improve the design 
a description of how the system was tested an analysis of the suitability of Ada for such a system, including 
a discussion of how Ada helped or hindered the project Each group must also make a . -- presentation 
during the final week of classes. Each presentation covers at least the following points: - a synopsis 
of the system requirements -a demonstration of the system's behavior - a sketch of the overall system 
design - an analysis of the design (Would you use the same design if you were doingthe project over? 
Did object-orienteddesign make implementation easier? Did object-oriented design make testingeasier?) 
Project grading is based on the following criteria: Quality of final reportQuality of system design Programming 
style Agreement of project with originalgoals Project scope (in relation to groupsize) System operation 
(lack of errors and system crashes, ease of use, readability of user manual, correctness and completeness 
of user manual) Quality of presentation (organizationand understandability of oral presentation, use 
of visual aids) 214 Comparison of Methodologies and Languages We chose Ada for the course project because 
we felt that Ada was the best current language to illustrate Software Engineering principles. The Ada 
packages allow the teams to agree on the interface specifications and then each team member can implement 
their own packages. Many of the students did not fully understand that once an interface specification 
had been agreed upon it could not be changed without consent of the group. Frequently, students would 
make @@minor'@ changes in their package interface specifications, either accidentally or intentionally, 
without informing the rest of the group. Fortunately, in Ada, these changes will be caught at the system 
integration level compile time. If we had used other languages, except for Modula-2, these changes would 
have escaped notice until runtime. Among the other advantages of Ada are the extreme security which can 
be gained by using exceptions, the fact that more errors are caught at compile time, and the information 
hiding capabilities of the packages. We use the JANUS/Ada compiler from RR Software for the course, which 
is a fully validated Ada compiler for IBM PC compatible machines. It provides good error messages, both 
at compile and runtime. GSU has a site license for the 'D' pack which also includes some tools such as 
a pretty printer, assembler, disassembler, profiler, and a program to determine compilation order. This 
allows the students to gain some experience in using software tools. In addition RR Software maintains 
a bulletin board of user donated Ada software, some of which is used by the students for their projects, 
e.g. a Windows and a B-Tree package. While the team project is done in Ada, we do not limit our discussion 
of languages to only Ada. When discussing aspects of design, implementation, and configuration management 
(as defined and used in [BABB87], i.e., in developing as well as delivering the software product) we 
compare several languages such as FORTRAN, Pascal, C, Ada, COBOL, and Modula-2. One topic which we also 
stress is the production and use of Reusable Software Components (RSC's). We discuss a variety of standard 
specification and design methodologies but, as mentioned above, we concentrate on the OOD methodology 
and have the students use OOD for their project. The students usually have had experience with other 
design methods, e.g. functional decomposition, and so using OOD requires a certain mind shift. Initially 
they don't like the OOD method but by the end of the quarter they usually change their opinions. Experience 
in the Software EngineeringCourse The course has now been taught several times and has gained a reputation 
as a very demanding course. The students spend a large amount of time on the project, up to twenty hours 
per week. The first time we taught the course all of the students did the same project. They implemented 
the Faceted Classification Scheme [PRIE87] for the storage and retrieval of RSCs. The second time the 
course was taught the students chose their own projects which varied from an on-line Ada syntax reference 
to a graphical design aid for OOD. An advantage of having the students choose their own projects is that 
they are more likely to be interested in the project. For example, some students who had computer graphics 
courses did a project on advanced rendering of objects defined by parametric bicubic patches. The disadvantage 
is that the students sometimes underestimate the project difficulty and don't have an operational system 
by the end of the quarter (of course this never happens in the "real world"). Working in a team is a 
very interesting and difficult experience for most of the students. Most of the teams seemed to go through 
a period of dissension until the team members adapted to each other. Teams with several very good students 
sometimes had the most trouble since the good students frequently thought that they were "right" and 
the other team members were "wrong". Hotshot programmers found it difficult to allow others to program 
since "they knew they could do it better". Team members would get upset because some people were not 
doing their share of the work or were very difficult to work with, even to the extent of occasionally 
coming to team meetings slightly drunk. In other words, the students on these teams encountered many 
of the same problems as they will find in the "real world". Fortunately, there was no violence and only 
one person has explicitly dropped the course because of his team. There have been very few instances 
of teams switching personnel so most students eventually adapted. Unlike most courses, in this course 
the instructor sometimes has to act as a counselor and psychologist. 215 Conclusion Fisure I Renresentative 
Readinq List We have been quite pleased with our choice of Ada for the Software Engineering Author Reference 
course. The students have enjoyed (survived?) the team project and feel that <RefA>J. Baskette "Life Cycle 
Analysis of an the project is one of the most valuable Ada Project", -IEEE --ISoftware aspects of the 
course. One current January, 1987, pp. 40-47. weakness is that the students miss the experience of having 
a central machine to B. W. Boehm "A Spiral Model of Software use for their project as all communication 
Development and of software is via diskettes. We plan to Enhancement", ACM SIGSOFT have a 80386 based 
UNIX/DOS machine which Software Ensineerinq Notes, the students can use for their project the Vol. 11, 
no. 4, August, next time the course is taught. 1986, pp. 14-24. B. W. Boehm "Improving Software Productivity", 
IEEE References: Software, September, 1987, pp. 43-57. [BABI86] W. A. Babbich, Software A. Borning "Computer 
System Reliability Confisuration Manaqement -and Nuclear War", Coordination for Team Communications of 
the ACM, Productivitv, Addison-Wesley, Vol. 30, no. 2, February, 1986. 1987, pp. 112-131. [BARN841 J. 
G. P. Barnes, Proaramminq in F. P. Brooks "No Silver Bullet: Essence Ada, Addison-Wesley, 1984. and Accidents 
of Software Engineering", IEEE Computer, [B0087a] G. Booth, Software Enqineerinq April 10, 1987, pp 10-19. 
with Ada, Benjamin Cummings, (second edition), 1987. M. Freedland "What You Should Know About Programmers", 
Datamation, March 15, 1987, pp 91-102. [B0087b] G. Booth, Software Comoonents With Ada E Structures. 
Tools, C. F. Kemerer "An Empirical Validation of and Subsvstems, Benjamin Software cost Estimation Cummings, 
1987. Models", Communications of [BROO82] F. P. Brooks, Jr., The Mvthical the ACM, May, 1987, pp.416 
-Man-Month -Essavs QB Software 429. Ensineerinq, Addison-Wesley, 1982. R. Prieto-Diaz and Classifying 
Software P. Freeman for Reusability", IEEE [FAIR851 R. Fairley, Software Enqineerinq Software, January, 
Concerts, McGraw-Hill, 1985. 1987, pp. 6-16. [FELD85] M. Feldman, Data Structures with R. F. Sincovec 
and "Modular Software Ada, Reston/Prentice-Hall, 1985. R. S. Wiener Construction and Object-Oriented 
Design [GEHA85] N. Gehani, C for Personal Using Ada", Journal of Commuters, Computer Science Pascal, 
Ada, gcJ Press, 1985. Modula-2, March-April, 1984, pp. 29-33. [OWEN871 G. S. Owen, *'Using Ada on Microcomputers 
the J. W. Verity "The OOPS Revolution", Undergraduate CurricZum" The Datamation, May 1, 1987. Papers 
of the Eicrhteenth BIGCSE Technical Svmnosium on Computer Science Education, SIGCSE Bulletin Vol. 19, 
No. 1, pp. 374-377. [PRAT84] T. W. Pratt, Prosramminq Lansuases -Desisn and Imolementation~ Prentice 
Hall, 1984. [ROGE87] J. B. Rogers, A Turbo Proloq Primer, Addison-Wesley, 1987</RefA>. 23.6 
			
