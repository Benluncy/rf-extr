
 ,A New Tool for SGML with Applications for the World Wide Web R. W. Matzen G.E. Hedrick Oklahoma State 
University Computer Science Department, M.S. 218 Stillwater, OK 74078-1053 rmatzen@acm.org KEYWORDS: 
SGML, HTML, exceptions, DTD, WWW ABSTRACT The Standard Generalized Markup Language (SGML) is an international 
standard (ISO 8879) for document defmition and interchange. It is widely used in government and industry~ 
and it has received increased attention from academia since HTML evolved to a formal application of SGML. 
SGML is a meta-language scheme for defining the structure of documents. A Document Type Definition (DTD) 
is a finite set of productions called element declarations; DTDs are similar to context free grammars, 
but the productions are more complex. One important optional feature of element declarations is called 
exceptions. Exceptions add expressive power for DTD authors, and thus are used in most industry and government 
standard DTDs, including HTML. Although exceptions are useful, they significantly add to the complexity 
of DTDs. Existing tools for DTD design and analysis are of limited use, because of the lack of a static 
tbrmal model for exceptions. This paper describes a static model that completely and precisely describes 
the effects of exceptions on DTDs; a soRware tool has been written to implement the theory and to demonstrate 
some practical applications. Results are shown for three versions of the HTML DTD. The results show that 
the language model and its applications are needed for SGML, and that continued development of these 
methods may impact the evolution of HTML and related web publishing standards. 1. INTRODUCTION The 
Standard Generalized Markup Language (SGML) is an international standard for document detinition and 
interchange [3, 4]. It is widely used in government and industry, and it has received increased attention 
from academia since HTML evolved to an application of SGML. In SGML, authors write a Document Type Definition 
(DTD) to def'me the high level syntax of a class of documents. A DTD consists of a finite set of productions 
called element declarations; the left side of each element declaration names an element type and the 
right side is an expression Permission to make digital/hard copy of all or part of this work for personal 
or classroom use is granted without tee provided that copies are not made or distributed for profit or 
commercial advantage, the copyright notice, the title of the publication and its date appear, and notice 
is given that copying is by permission of ACM. Inc. To copy otherwise, to republish, to post on servers 
or to redistribute to lists, requires prior specific permission and/or a fee, &#38;#169; 1998 ACM 0-89791-969-6/98/0002 
3.50 called a model group that defines the content of the element type in terms of other element types 
and text. Within this meta-language framework, authors can define almost any type of document. Although 
SGML has gained widespread acceptance, there are significant problems in its implementation; many of 
these are directly caused by the lack of a formal model for SGML, This is discussed in [10]: "... we 
need a clear fon'nulation of a formal model for SGML. If we get such a formal model, we will be able 
to improve the strength of SGML in several ways". Since this observation, significant progress has been 
made in some areas. Model groups have equivalent regular expressions [4, 6], and thus DTDs (without optional 
features) are a subset of the regular expression grammars [5], which are equivalent to the context free 
grammars [12]. However, the lack of a complete formal model for SGML is still impeding development. One 
important optional feature of DTDs is called exceptions. Exceptions add expressive power for DTD authors 
and thus are used in most standard DTDs, including HTML, However, there are no static formal models for 
DTDs with exceptions (SOML parsers use a run time stack to implement them). Authoring (designing) DTDs 
can be a difficult task: DTDs typically contain over fifty element declarations, and they are often recursive 
in a manner similar to context free grammars. Exceptions add another kind of recursion to DTDs, and thus 
they contribute significantly to the complexity problem. In practice, DTDs are so complex that the author(s) 
may not fully understand them, and because of the lack of static models there are no effective tools 
for viewing the effects of exceptions on DTDs. This paper describes a static formal model for DTDs with 
exceptions; the model provides a foundation for reducing the costs of DTD design and analysis and for 
solving other related problems. A software tool (&#38;#169; 1997 R. W. Matzen) has been developed to 
illustrate the theory and to demonstrate some practical applications. Output from the tool is useful 
for understanding (viewing) DTDs with exceptions. The s~atax of HTML has been def'med by DTDs with exceptions 
since version 2.0. The software tool described above was run on three versions of HTML; the results illustrate 
the growing complexity of the HTML DTD and show the need tbr applications based on the methods in this 
paper. ]'here is ongoing discussion about the future of HTML [7]; one proposal is to replace HTML with 
generalized SGML [7, 11 ]. Successful development of the 752  applications discussed in this paper may 
have a significant impact on the evolution of HTML and related publishing standards for the world wide 
web. Section 2 gives the necessary SGML background with particular attention to exceptions. In Section 
3, new defmitious are given that illustrate the properties of exceptions and that are consistent with 
the ISO standard. Section 4 develops a static language model of DTDs with exceptions and shows examples. 
Section 5 describes some applications of the theory and shows examples to illustrate how it is used. 
In Section 6, results are shown for I-i'TML, and the implications of these results are discussed. Section 
7 states the conclusions drawn from this work. 2. SGML BACKGROUND SGML is a system for def'mmg the syntax 
(structure) of documents; it does not directly address the semantics (processing) of documents. There 
are separate features for defining the high level syntax (parsing) and the low level syntax (token recognition). 
This paper does not consider token recognition; it assumes that an SGME parser can distinguish between 
text and markup. Markup in SGML is the codes (tags) that are added to the text of a document to distinguish 
the logical components (elements). A document type declaration, also called a document type definition 
(DTD), defines the high level syntax (the document type) for a class of documents. A DTD contains a finite 
set of productions called element declarations that def'me the types of elements that can occur in the 
documents and the content of these elements in terms of elements and text. One element type is declared 
as the top level or "DOCTYPE" element. A document that contbrms to the requirements of the DTD is called 
a document instance. A document instance is a single occurrence of the DOCTYPE element and everything 
that occurs within it: a stream of tokens consisting of markup (element begin and end tags) and text. 
Art begin tag is written as "<element_name>" and an end tag is written as "</elementname>." Example 1 
shows a DTD and a conforming document instance. Example 1. A DTD and a corresponding document instance. 
< ! DOCTYPE book [ < ! ELEMENT book (header, (chapter) +) > <! ELEMENT chapter (header?, (para) +) 
> < ! ELEMENT header (#PCDATA) > <!ELEMENT para (ftnref I #PCDATA)* > < ! ELEMENT ftnref EMPTY > ] 
> The first line defmes the document type as a book. The next five lines are element declarations for 
the element types: book, chapter, header, para, and tLrtret: "lqle parenthesized expressions, called 
model groups, define the contents of the element types named on the lelt hand sides. The model group 
operators and their equivalent regular expressions [4, 6] are shown in Table t. This DTD declares that: 
1. a document instance consists of a book element. 2. a book element contains one header, tbllo~ved b~ 
one or more chapters, 3. a chapter element contains an optional header. followed by one or more paras, 
4. a header element contains only text (#PCDATA means zero or more text characters), 5. a para element 
contains any combination of text and ftnrefs, and 6. An flaref element has no content (it is simply a 
marker), Each element that occurs in a document instance is bounded by a begin tag and end tag, except 
for elements declared as EMPTY (these have only a begin tag and no content). This is illustrated in the 
document instance for the above DTD: <bOOk> <header>This is a header for the book</header> <chapter> 
<header>This is a header for the first chapter</header> <para>This is the text<flnref> of a paragraph</para> 
</chapter> </bOOk> Table l. Model Group Operators. SGML Operation Equivalent Operators Regular Expression 
Optional a? = ak)~ Zero or one OCCRIT~q'Ice  + Required and repeatable a+ = aa* " Optional and repeatable 
a* = a* &#38; All must occur in any order a &#38; b = ab ~ ba , All must occur in order a, b = ab [ One 
and only one must occur a [ b = a w b ( ) Precedence of operations (a) = (a) #PCDATA Zero or more data 
characters (data character)* The DTD in Example 1 is a simple but complete example to illustrate the 
meta-language framework of SGML. DTDs can also contain optional features, such as attributes of elements 
and OMITTAG, that do not affect the results of this paper. The important features of DTDs that do affect 
the results are defmed by the following productions, using the same operators as model groups shown in 
Table 1 (white space is not shown): DTD -* "<!DOCTYPE", doctype_name, "[", element_declaration+, "]>" 
element_declaration ~ "<!ELEMENT', elementtype, (declared content I content model) ">" declared_content 
-~ "EMPTY" I"CDATA" [ "RCDATA" content_model ~ model_group, exceptions? Example 1 illustrates all of 
these features of DTDs except [br exceptions, which are described ill Example 2, and CDATA and RCDATA 
which are described below. The element type is the name following the keyword, ELEMENT. The term, element 
type, is a general term that associates a name with an element declaration, as opposed to the term, element, 
which refers to a specific occurrence of that type in some document instance. The content of an 753 
element type may be defined by a content model or by declared content. A content model is a model group 
followed by optional exceptions; model groups define the content of element types in terms of other elements 
and text, and exceptions are discussed in Example 2, Declared content is denoted by one of the three 
keywords: EMPTY, CDATA, or RCDATA. EMPTY denotes an element that has a begin tag only and no content. 
CDATA and RCDATA are equivalent to #PCDATA (zero or more text characters), except that they also denote 
that elements of that type cannot contain any other elements (subelements). Note that header elements 
are not prohibited from containing other elements, even though their model group specifies only text 
(#PCDATA). This is illustrated in Example 2. Example 2. A DTD with exceptions. < ! DOCTYPE book [ < ! 
ELEMENT book (header, (chapter) +)  + (pagebrk) > <!ELEMENT chapter (header?, (para) +) > < ! ELEMENT 
header (#PCDATA) -(pagegbrk) + (bold) > <!ELEMENT para (para I #PCDATA) * +(bold) > < ! ELEMENT bold 
(#PCDATA) -(bold) > < ! ELEMENT pagebrk EMPTY > ] > Exceptions consist of inclusions and exclusions. 
The inclusions are a parenthesized list of elements preceded by '+'. These included elements may appear 
anywhere in a document instance ~ithin an element defined by the element type. For example, a pagebrk 
may appear anywhere in a book element, including anywhere in an element nested within it (subelement). 
The exclusions are a parenthesized list of elements preceded by '-'. Excluded elements may not appear 
anywhere in a document instance within an element defined by the element type, even if the model group 
or inclusions allow it otherwise. For example: example, a pagebrk may not appear anywhere in a header 
element, or within any subelement of a header (an included bold element). Inclusions and exclusions can 
be contradictory. The pagebrk inclusion for a book specifies that a pagebrk can appear anywhere in a 
book, including in a header within a book and in a header within a chapter within a book. However, the 
exclusion for header specifies that a pagebrk element cannot occur anywhere in any header element. The 
standard resolves these contradictions in favor of the exclusions, and the element is not pennitted. 
Thus, pagebrks may occur anywhere in a book, except within a header element (or any subelement of a header), 
Elements with declared content may not contain any subelements. This holds vacuously lbr elements declared 
as EMPTY, because they consist of only a begin tag. Elements with declared content of CDATA or RCDATA 
are not allowed to contain other elements, and thus exceptions do not apply to them. Recursion may be 
introduced into DTDs by model groups. In Exmnple 2, the model group lbr para allows paras nested within 
paras, within paras, and so on. Recursion is also introduced by mchisions. If bold were not an exclusion 
for bold, then because bold is an inclusion for headers, a bold element could occur anywhere within a 
header, a bold within a header could contain a bold, and so on. Exceptions significantly add to the expressive 
powers of authors designing DTDs. Their typical uses are illustrated in Example 2: 1. Inclusions are 
used to define floating elements that may occur anywhere within a document (pagebrk) or within some part 
of a document (bold). 2. Exclusions are used to exclude elements from certain contexts in which they 
are not desired, such the exclusion of pagebrk from headers. 3. Exclusions are also used to control recursion 
(limit nesting), bold is excluded from bold. When element types are defined by a content model, the model 
group defmes the allowed content, and the exceptions modify this definition. However, the exceptions 
for the element type also modify the content of other elements (subelements) when they occur in a document 
instance. Thus, it usually happens that some elements have different sets of exceptions that apply to 
the element type's model group, depending on the context in which the element occurs. In Example 2, this 
is true for only one element type, bold. A bold element within a header has pagebrks excluded (inherited 
from the header); a bold element in a para has no exclusion of pagebrk. In the following section this 
property is formally defined. 3. DEFINITIONS The following defmitions are provided to illustrate the 
properties of exceptions and to provide a foundation for the model described in Section 4. They are consistent 
with the definitions in the standard [4]. Definition I: declared exceptions. The declared exceptions 
for an element A are the exceptions declared in the content model of A. The declared exceptions consist 
of two sets: the declared inclusions and the declared exclusions. Either set (or both) may be empty. 
The declared exceptions are denoted by +( ) and -(). In the DTD in Example 2 the declared inclusions 
for book are +Cnagebrk) and the declared inclusions are -(), the empty set. The declared exceptions for 
chapter are +( ) and -(). The declared exceptions for header are +(bold) and -(pagebrk), for para they 
are +(bold) and --(), and for bold they are +( ) and -(bold). Element type pagebrk has declared content; 
elements with declared content can contain no subelements, and thus can have no declared exceptions, 
wlfich also is denoted as the empty sets, +(), -(). Definition 2. hflaerited exceptions. The inherited 
inclusions of any element A occurring in a document instance, is the union of the declared inclusions 
of all ancestors of this occurrence of A. The inherited exclusions of an occurrence of A is the union 
of the declared exclusions of all ancestors of the A. The notation used for inherited exceptions is the 
same as that used tbr declared exceptions. A sample docanlent instance for the DTD in Example 2 is shown 
in Example 3, to illustrate inherited exceptions. 754 Example 3. A document instance for the DTD in 
Example 2 (the indentation is for illustration only) <book> <header>A <bold>Really</bold> Good Book</header> 
<chapter> <header>Chapter 1 ,:header> <para>lt was a <bold>very</bold> dark night</para> <pagebrk> <para>The 
end</para> </chapter> </book> The inherited exceptions for a particular element depend on the context 
in which the element occurs. In the following description of inherited exceptions we refer to particular 
elements in the above document instance. The same statements apply to any element of the same type that 
occurs in the same context (same ancestors) in any document instance. The inherited exceptions for the 
book element are empty, because it has no ancestors. The inherited exceptions for the header immediately 
within the book are +(pagebrk), -(). The inherited exceptions for the bold in the para in the chapter 
in the book are: +(pagebrk,bold), -( ) Definition 3. Applicable exceptions. The applicable exceptions 
of an element A in a document instance are the inherited exceptions of A tmioned with the declared. exceptions 
of A: applicable exclusions = inherited exclusions U declared exclusions applicable inclusions = inherited 
inclusions U declared inclusions The definition of applicable exceptions does not consider the precedence 
of exclusions over inclusions. This is given in Definition 4. The notation for applicable exceptions 
is the same as for declared and inherited exceptions. For the document instance in Example 3, the applicable 
exceptions for the book element are +(pagebrk), -(). The applicable exceptions for the book level header 
are +(pagebrk, bold), --(pagebrk), and for the bold within the para within the chapter within the book 
are +(pagebrk, bold), --(bold). Definition 4. Net exceptions. The net exceptions are the exceptions that 
are active for a particular element in a particular context. They are the same as the applicable exceptions, 
except that exclusions (either declared or inherited) override inclusions (either declared or inherited). 
Thus, the net exceptions of an element are dethaed by: net exclusions = inherited exclusions U declared 
exclusions = applicable exclusions net inclusions = (inherited inclusions U declared inclusions) -(inherited 
exclusions U declared exclusions) = applicable inclusions -applicable exclusions The notation used for 
net exceptions is curl). braces, +{} and -{}. The net exclusions Ibr all elements in context ,are the 
same as the applicable exclusions. For the DTD in Example 2 and the document instance in Exanlple 3, 
the net inclusions tbr the book element are anc "hanged because there is no intersection between the 
applicable inclusions and the applicable exclusions. The net inclusions for the book level header are 
+{bold} and for the bold within the para within the chapter within the book are + {pagebrk}. For elements 
with content models, the content of the element in some context is defined by the model group and the 
net exceptions. Definitions 5 and 6 name and describe this property of document instances in terms of 
the DTD. Definition 5. Dynamic content model. For a DTD, D, a dynamic content model (DCM) for an element 
type A defined in D, is the model group for A and a set of net exceptions for A that apply to some occurrence 
of an A element in some document instance defined by D. For each context in which an element can occur, 
the DCM (the model group and the net exceptions) completely define the allowed content of the element. 
For the purposes of this definition, all element types are assumed to be defined by a content model: 
for element types with declared content of CDATA or RCDATA, the content definition is equivalent to a 
model group (#PCDATA) with no exceptions. Because exceptions do not apply to elements with declared content, 
the net exceptions for all DCMs with declared content are empty. Therefore element types with declared 
content have exactly one DCM. The model group for element types with declared content of EMPTY is NULL 
(e). Each element in a DTD has a finite number of DCMs. Let I be the set of all possible sets of inclusions 
for a DTD and let E be the set of all possible sets of exclusions, then I and E are both the power set 
of the set of dements defined in the DTD, Therefore they must be finite sets, and (I x E), the possible 
pairs of inclusions and exclusions is also a finite set, Then, since each element type defined in the 
DTD has a finite number of DCMs, the number of DCMs tbr the DTD is also finite. The DCMs for an element 
type are distinguished from each other by their respective sets of net exceptions. A unique version (index) 
is assigned to each DCM to distinguish it from other DCMs of the same element type. This is illustrated 
in Example 4. Each DCM occurs in specific context(s) with the other DCMs. This is illustrated by Definition 
6. Example 4. Dynamic content models (DCMs). The DCMs for the following DTD are shown in Table 2. <!DOCTYPE 
A [ <!ELEMENT A (B I c) > <!ELEMENT B (C) +(X) > <!ELEMENT" C (#PCDATA) > <!ELEMENT X (#PCDATA) -(X) 
> ] > Table 2. Dynamic content models for Examp~ 4. name. model net net version group inclusions exclusions 
 A.I (B I C) {) () B.I (C) (X) t) C.I (#PCDATA) t} {}  C.2 (#PCDATA) iX} {} X.I (#PCDATA) {} {X} 
 755 Definition 6. DCM tree. A DCM tree for a DTD is a tree in which each node represents a DCM of the 
DTD. The root node is the DCM for the document level (top) occurrence of the DOCTYPE element. The children 
DCMs (nodes) are derived from the parent as follows: a. The element types of the children are determined 
by the model group and the net exceptions of the parent DCM. b. Each child's net exceptions are determined 
by the exceptions inherited from the parent and from the child's declared exceptions. A DCM tree shows 
the context in which each DCM can occur in relation to other DCMs of the DTD, The name of each node in 
the tree is the element name plus a version number for the DCM; each node also has labels (attributes) 
for the net inclusions and the net exclusions. Note that the version numbers of each node will vary depending 
on the traversal order. The leaf nodes of a DCM tree are DCMs that have no children. This can occur in 
one of the following ways: a. The element type has declared content. b. The element type has a model 
group that contains no element names, and there are no net inclusions. c. All elements in the model 
group of the element and any included elements are excluded by net exclusions.  Recursion can be introduced 
into DTDs by model groups and also by inclusions; at least some paths of DCM trees for recursive DTDs 
are nonterminating. For the DTD in Example 4, the inclusion of X for B naturally introduces recursion 
(X's within X%), but the exclusion of X for X nullifies it. Because there is no recursion, all paths 
of the DCM tree for this DTD terminate with leaf nodes that have no children. A DCM tree for the DTD 
in Example 4 is shown in Figure 1. This tree was constructed in breadth first order. A depth first construction 
results in exactly the same tree except that the version numbers of the two C nodes (DCMs) are reversed, 
The net exceptions for each DCM are denoted by +{} and -{}. +{} +{x}   ¢.1 -{} +Ix} +{} -{} c]2 x.l 
-{x} +{} -{x} x.1 Figure 1. A DCM tree Ibr the DTD in Example 4, 4. METHODS All DCM trees have abbreviated 
representations in which all paths terminate. This is accomplished by terminating a path whenever a DCM 
occurs that has already occurred somewhere else in the tree. All paths are guaranteed to terminate because 
there are a finite number of DCMs (as shown in the previous section). Terminating paths by this rule 
implies that there is some order for constructing the tree. A depth first traversal will result in a 
different abbreviated tree than a breadth first traversal. The version numbers associated with nodes 
will be different as illustrated in Example 4. Also, for abbreviated trees that terminate some paths 
using the second occurrence rule, the node configurations of the tree will be different. In either case, 
the core DCMs (element names, model groups, net exceptions) are the same. An abbreviated DCM tree for 
the DTD from Example 2 is shown in Figure 2. * denotes a DCM that has already occurred in the traversal, 
DC denotes a DCM that has declared content. Thus, any leaf node that is not marked by DC or * (or both) 
has no children for reasons b or c in Definition 6. Abbreviated DCM trees have the following properties: 
1. The abbreviated tree. shows the correct context for each DCM that appears in the tree. This is direct 
from the SGML defmitious that determine the content of elements 2. There are a finite number of nodes 
in the tree. 3. All DCMs of the DTD will be in the abbreviated tree. This is also direct from the definitions 
of SGML and from the rules for terminating paths. 4. An abbreviated DCM tree completely represents the 
unabbreviated DCM tree. A simple proof shows that the subtree of a DCM node must be the same as the subtree 
of any other node of the same DCM. 5. APPLICATIONS  DTD design is a complex and expensive process; 
DTDs are often limited in size and scope because of this complexity. Exceptions are a significant part 
of the problem, but they are used because they add expressive power for DTD authors. Existing DTD analysis 
tools do not provide a precise and complete view of DTDs when exceptions are considered. Without this 
basic capability it is not feasible to understand the scope of typical DTDs, or to determine whether 
the use of exceptions has caused errors; are any elements included in contexts in which they are not 
intended or excluded from contexts hawhich they are intended? The methods shown in the previous section 
are clearly useful for understanding DTDs with exceptions. The DTD in Example 2 is very small with limited 
use of exceptions, and the results can be computed manually. In practice, most DTDs are much larger and 
the results cannot be computed manually. A software tool has been developed to construct abbreviated 
DCM trees using a depth first traversal; the results in this paper were computed using this tool (the 
graphic trees were manually created from the batch tree output of the tool). The DTD in Example 5 is 
still very small compared to DTDs actually in use. We assume that the author of this DTD intended to 
implement the following: Revisions (rev) elements are used to mark sections of a document that have been 
revised. Revisions can occur at the chapter level and 756 +{ bold } -{ pgbrk } +{} -{ pgbrk, bold } 
 +{ pgbrk } ' book.1 -{ } DC pgbrkl head.l +{ pgbrk } cha ter.1 -{ } bold } "~ DC ~ -~l -{ } head. 
1 pgbr~l DC " para.1 bold.2 -{ bold } pbgrk.l DC " pgb ri~ 1 Figure 2. Abbreviated DCM tree for the 
DTD in Example 2. rev. 1 para.2 list.2 i item. 1 para.3 book.1 cha ~ter. 1 para.1 list.l l 1 rev.2 
item.3 list.3 paras4 item.2 -{rev. list, rev.3 para } Figure 3 Abbreviated DCM tree tbr the DTD m Example 
5. 757 also inside paragraphs; nested revisions (revisions within revisions at any level of nesting) 
are not allowed. Nested lists and nested paras are also not allowed. Paras are allowed within items within 
lists, but any other nesting of lists with paras is not allowed. The exclusion of para ~om para was used 
to prevent this; unfortunately it has undesirable side effects. Example5. A DTD with exceptions. < ! 
DOCTYPE book [ < ! ELEMENT book (chapter+) > < ! ELEMENT chapter (rev I para I llst)+ > < ! ELEMENT 
para (rev } #PCDATA) * -(para) > < ! ELEMENT list ( itexa+ ) -(list) > < ! ELEMENT item (para*) > 
 < ! ELEMENT rev (para I list I #PCDATA)  -(rev) > l> There are many ways that DCM trees can be useful 
in DTD design and analysis. A graphic version of the abbreviated DCM tree is one of the most useful. 
The abbreviated tree for the DTD in Example 5 is shown in Figure 3. It ilhtstrates how these methods 
can be effectively used to understand the DTD, and to quickly locate one kind of error that occurs frequently. 
For brevity, the net exceptions are not shown for any nodes except for the one node that illustrates 
the error: the unintended side-effect in this DTD. The item.2 DCM has revs, paras, and lists excluded; 
the rev and list exclusions are correct (to prevent nesting), but the exclusion of paras li'om items 
means that some items (item.2 in Figure 3) cannot contain any content (paras). The DTD parses correctly, 
but a user would not be able to complete any paras in the item.2 context (and would probably be frustrated). 
In this particular tree, all paths terminate at leaf nodes that contain no children, although they do 
contain #PCDATA. The error in Example 5 could be detected manually by a knowledgeable DTD author. However, 
even at this level the tool is helpful. In practice, DTDs are much more complex; writing correct DTDs 
(and understanding them) is difficult, and depending on the size of the DTD and the use of exceptions 
may not be feasible. 6. HTML The initial version of HTML was loosely modeled on SGMU HTML 2,0 [1] was 
the first version that was formally defined by an SGML DTD. The current W3C recommendation, HTML 3.2 
[81, and the current working draft for extending HTML, HTML 4.0 [9], are also detined by DTDs with exceptions. 
The HTML DTDs have been growing to support the processing needed bv the various parties publishing on 
the web: more sophisticated formatting (s~le/presentation), interactive forms, Java applets, etc. New 
features tbr the web require increased representation of structure in the DTDs. Demand tbr increased 
processing is grooving rapidly, and the resulting DTDs are becoming correspondingly more complex. This 
growing complexity has implications for publishing on the web. Individuals will fred it increasingly 
difficult to ere, ate correct HTML documents (without suitable tools), and browsers will have more trouble 
displaying incorrect documents in some reasonable form. In particular, the number of different contexts 
that certain elements can occur in is increasing, For example, in HTML 2.0 paragraphs can occur at the 
top level of the body, as well as in list items. Tables are added to HTML 3.2, and paragraphs can occur 
within tables and within list items within tables. In each of these different contexts the paragraph 
elements require different processing. Because of this increasing complexity, individuals will need to 
rely more on sophisticated tools to create their web documents, and the tools for creating and displaying 
web documents will need a more complete method of understanding the HTML DTD. There is currently no good 
description given for the different contexts for elements in HTML, because this is beyond the capabilities 
of existing methods. The methods and tool in this paper provide this capability. The soRware tool described 
in the preceding section was run on these three t-l'12dL DTDs and statistical results are shown in Table 
3. Results from the DTD in Example 5 are shown to provide a flame of reference. HTML 2.0 and HTML 3.2 
have a variety of options for elements in the DTD. The options used for this paper did not significantly 
affect the results in Table 3. The values in rows 1-3 of Table 3 are a measure of the size of the DTD 
and the use of exceptions. Rows 4-5 provide a rough measure of the overall complexity of the DTD and 
the effects of exceptions on it Table 3. Statistics/Results for HTML DTDs. HTML 2.0 HTML 3.2 HTML 4.0 
1. Number of 46 67 89 element types inthe DTD 2. E,~t 8 7 I0 with declared exceptions 3. Total number 
35 44 75 of declared exceptions 4. Number of 15 148 282 2887 I)CMs in the DTD 5. Nodes in the 1759 5902 
82236 abbreviated DCM tree The results in Table 3 show that the complexity of the HTML DTD is increasing 
rapidly, and that it is approaching (or has exceeded) manageable limits given the current tools for designing, 
analyzing, and understanding DTDs. Similar results hold for DTDs used in industry and government. There 
is clearly a need tbr powerful applications for DTD design and analysis; the model in this paper provides 
a foundation for these. The values in rows 4-5 of Table 3 are linearly proportional to the complexity 
of the DTDs, but not necessarily directly 758  proportional. Future work should include a study of refining 
the methods shown in Table 3 to develop more accurate metrics for DTD complexity. This would be useful 
in estimating costs for SGML applications. There are several proposed alternatives for the expansion 
of web based publishing. 1. Continue expanding the HTML DTD in response to demands for new processing 
[7, 9]. Given the rapid growth of HTIvlL, this scenario requires the development of new applications 
for understanding and processing SGML. The methods in this paper should help sieguficantly. Eventually 
with an infinite number of possible document types (structure) and corresponding opportunities for new 
processing, the size of the HTML DTD will become unmanageable. 2. Adopt generalized SGML as the publishing 
standard for the web [7, 11], rather than a specific HTML DTD. For this scenario the results in this 
paper would become more important due to the increased need tbr tools for DTD design. Also, there has 
not yet been a widely accepted mega-standard for generalized SGML processing, due to the same problems 
described in # I. The results in this paper may be helpful in solving tiffs problem. For example, the 
Department of Del~nse standard Ibr del'ming SGML processing specifications, FOSIs, attaches processing 
requirements to elements in particular contexts. However, FOSIs do not provide a method tbr finitely 
specifying all possible contexts tbr elements; the model m this paper provides this finite specitication. 
 3. XML is a recent proposal tbr moving the web to SGML [2]; it maintains the meta-language capabilities 
of arbitrary DTDs, but it eliminates many of the features of SGML that contribute to its complexity. 
It does not include exceptions, because of the problems with understanding their effects on DTDs. The 
methods in this paper provide an alternate solution to this problem; they provide a strong argument tbr 
keeping the expressive power of exceptions in XML, and this in turn may contribute to its success.  
8. CONCLUSIONS The lack of lbrmal models has been limiting the development of SGML [10l. The examples 
and results in this paper illustrate the complexity of DTDs with exceptions, which in turn implies high 
costs Ibr DTD design and corresponding problems with quality. Thus, there is strong motivation lbr automated 
tools to assist in DTD design. This paper presents a lbrmal model lbr DTDs with exceptions that solves 
some important problems: the model and the sottw'are tool to implement them are clearly useful tbr tmderstm~ding 
(viewing) D'lq)s, and they provide some specific methods tbr detecting errors caused by incorrect use 
of exceptions, llle software tool described in this paper also implements other uselul features tbr DTI) 
analysis that are not shown here. Although the methods described here arc asethl, given the size of the 
problem (sho~ in Section 6 ) there is clearly a need tbr extending them. All of the outpttt or" the software 
tool is batch output: interactive access to the results would be much more productive. Interactive traversals 
of abbreviated DCM trees would be particularly useful. However, the size of these trees for typical DTDs 
indicates that the traversals should be focused; the user should be allowed to limit or choose paths 
based on a particular exception or on a particular element type. The development of applications based 
on the model and tool described in this paper, and their success in managing the complexity problem of 
DTDs with exceptions, could be a significant factor in the future of SGML. In particular, this could 
affect the evolution of HTML and other document interchange standards for the world wide web. No one 
can yet predict the evolution of the web, but in all of the currently proposed scenarios, the methods 
in this paper can be an important part of the solution. REFERENCES <RefA>1. Connally D. W., HTML 2.0., June 
6, 1995: http://www,w3.orglMarkUp/html-spec/html-s.dtd. 2. Flynn P., XML FAQ Draft Version 1.0, May 
1, 1997:  http://www.ucc.ie/xml/#FAQ-DTD. 3. Goldfarb C. F., The SGML Handbook. Clarendon Press, Oxford, 
1990. 4. International Standard ISO 8879 Information Processing -Te~ and office systems -Standard Generalized 
Markup Language (SGML), International Organization for Standardization, Switzerland, 1986. 5. Matzen 
R. W., George K. M., Hedrick G. E., A Formal Language Model for Parsing SGML. Journal of Systems and 
Software, Volume 36, 147-166 (February, 1997). 6. Matzen R. M., George K, M., and Hedrick G. E. A Model 
for Studying Ambiguity in SGML Element Declarations. Proceedings of the 1993 ACM/SIGAPP Symposium on 
Applied Computing. (February 14-16, Indianapolis, Indiana), ACM, N.Y., 1993, pp. 668-676. 7. Press L., 
The Internet is Not TV: Web Publishing. Communications of the ACM, Volume38(3) (March 1995), pp. 17-23. 
 8. Raggett D., HTML 3.2. January 14, 1997: http-//wvcw.w3.org/MarkUp/Wilbttr/htm132.dtd. 9. Raggett 
D., [-rl2dL 4.0. July 8, 1997: http://www.w3.org/Ttb'Wl~html40/sgml/html4.dtd.  10, Sperberg-McQueen 
C. M., Closing Remarks at SGML '92: the quiet revolution. (October 25-29, 1992, Boston MA, Graphics Communications 
Association). 11. Sperberg-McQueen C. M., Goldstein, R. F., HTML to the max: A manifesto for adding SGML 
intelligence to the world wide web. In Proceedings of the Second Web Co,ference, (Chicago, Oct. 1994): 
 12. Woods W. A., Augmented Transition Networks for Natural Language Analysis. Report No. CS-I, The Aiken 
Computation Laboratory, Harvard University, Dec. 1969</RefA>.  759   
			
