
 A Multi-Purpose Dataflow Simulator David D. Langan School of Computer and Information Sciences University 
of South Alabama Mobile, AL 36688 (205)-460-6390 e-mail: F4TB@USOUTHAL.BITNET ABSTRACT Dataflow is a 
data-driven, parallel, functional execution model. Datatlow machines are being investigated as an alternative 
approach to high performance machines. Dataflow machines, while being designed and built, are not widely 
available for testing purposes. This paper briefly deseribes a dataflow simulator and discusses several 
educational uses for this simulator. This simulator was designed with flexibility and extension in mind 
and as a result supports individual computations representing primitive machine level operations or more 
complex process level computations. With different sets of operations the simulator can be used to simulate 
a variety of parallel operations. ABCD EF IIII II v v v v v v * / MOD Y Y INTRODUCTION TO DATAFLOW The 
dataflow model of execution [Ackerman 82, Veen 86] is based on the principle that an operation can be 
executed when the data required for that operation becomes available. This exeeution model works nicely 
for functional computations and permits the potential parallelism in such computations to be exploited. 
The semantics of dataflow progmms are usually presented in terms of dataflow graphs. Such graphs make 
the parallelism clear, representing operations as nodes in the graph, representing data paths between 
the operations by direeted arcs and representing data as tokens that flow along the arcs from one operation 
to the next. In such graphs (see Figure 1) the potential parallelism is clear as are the data dependencies. 
In pure dataflow models all node executions are side-effect free computations where the only consequence 
of a node firing is the set of tokens produced. Permission to copy without fee all or part of this material 
is granted provided that the copies are not made or distributed for direct commercial advantage, the 
ACM copyright notice and the title of the publication and its date appear, and notice is given that copying 
is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires 
a fee and/or specific permission. ACM-24 thCSE-2/93-lN, USA @ 1993 ACM ()-89791 .566.6 /93/() 0()2/0087,.. 
$1 ,50 (A* B)+(C/D)-(Sqr wt(E Mod F)) Figure 1: A Sample Dataflow Graph Researchers have investigated 
the dataflow model, looking at both architectural as well as linguistic issues. Several dataflow machines 
have been built [Srini 86, Arvind 86] and serious efforts continue in the investigation of such machines 
[Koppel 91]. These machines represent an attempt to capture fine-grain parallelism realized at the machine 
instruction level, A different approach, referred to as coarse-grain dataflow, views the parallelism 
at a higher level where the operations are characterized by process level operations. The simulator discussed 
in this paper is independent of the grain, as the user determines which operations to use and may extend 
the simulator to add new operations and data types [Langan 92]. Several linguistic approaches have been 
used to create dataflow languages. These approaches include: 1. Smarter compilers for standard languages. 
Such compilers generate dataflow programs from imperative languages such as Fortmn. 2. Specialized textuat 
based languages with new constructs such as for all . These include languages like VAL, ID and LUCID 
[Ackerman 79, Arvind 78, Wadge 85]. 3. Textual languages that are based on the single­assignment principle. 
The best known of these is SISAL [McGraw 851.  SIMULATOR OVERVIEW The simulator discussed in this paper 
executes a dataflow graph, independent from the particular high level dataflow language used to describe 
the program. The graph could be created by a language translator for one of the textually based dataflow 
languages, but currently the only interface to the simulator is a graph-description editor. This editor 
allows the user to describe the underlying graph by specifying the nodes, the arcs and any initial or 
constant tokens that may be used in the graph. At invocation the user is prompted to provide values for 
the input tokens to the graph. The simulator supports a variety of tracing features to assist the debugging 
process. Users can follow individual node firings and terminations while watching the values of input 
tokens used and output tokens produced. As a dataflow program executes a virtual clock is incremented. 
The use of a virtual clock allows for comparisons of timings for different algorithms that might be used 
for the same computation. The semantics of the operations involved in the dataflow program can be realized 
as either a primitive node or as a dataflow graph node. In the caseof primitive nodes the opemtion is 
viewed as an indivisible computation. A collection of primitive node types (e.g., multiply, add) is provided 
with the simulator, but this collection may easily be extended. The simulator was designed based on object­oriented 
principles Langan 92] and was implemented using Turbo Pascal 6.0. As a consequence, the addition of new 
primitive-node types is fairly simple as it only requires that a new subclass be created (i.e., a subclass 
of an abstract node-class ). When a dataflow gmph is created and saved, for example XYZ.DFP, then that 
graph may be used to provide the semantics of a dataflow graph node. In essence, this provides the feature 
of dataflow-function calls and allows for recursion. In a similar vein, the dataflow simulator comes 
with support for the usual collection of data token types (i.e., integer, real, boolean, etc.). The collection 
of supported token types can also be extended by adding new subclasses to the abstract class token for 
any new token types required. There are a variety of Computer Science courses that can benefit from the 
use of the dataflow simulator. A few of these courses are identified here along with potential uses in 
those courses. In a comparative programming languages course (CS8) the dataflow simulator can play any 
one of several roles. It can be used as a tool to present either functional languages or parallel languages. 
The purity of functional languages can be nicely illustrated by focusing on the side­effect free natwe 
of each of the node computations. One can also discuss the potential corruption of this functional­purity 
that is introduced if the semantics of primitive nodes permit an access to a global shared data value 
or if one or more local variables is treated as a static variable. The computation of the dataflow model 
when presented with a stream of input tokens can be compared to Lisp functions that operate on a list. 
In this case, however, one can easily show the pipelined effect of such a dataflow computation. The simdator 
itself can also be used as a reasonably sized concrete example of an object oriented program. Allowing 
students to add new data and node types nicely illustrates the easeof extendibility that is a touted 
feature of the object oriented paradigm. Such an extension has proven in classroom experience to be a 
reasonably short homework exercise even for student with no prior experience in object­oriented programming. 
The abstract class NODE provides all operations needed for general use by the simulator (e.g., (a) determining, 
upon receipt of a new input token, if all tokens needed to fire are present, and (b) outputting trace 
information). Any primitive node in a dataflow graph must be an object of a subclass of NODE. Each of 
the subclasses need only give a new specific meaning to the operation of Fire . The power of inheritance 
is made clear by such an exercise. Computer Science courses that focus on the comparison of algorithms 
(e.g., CS13) can profit from the dataflow simulator by using it as a vehicle by which the quality of 
various parallel algorithms can be assessedvia compared timings. With the trace data output by the simulator, 
one can also easily compute a sequential­execution time of an equivalent algorithm for the computation. 
Such an analysis can be extremely enlightening. In some cases it may serve to illustrate the potential 
huge gains to be had via parallel architectures. In other cases it may serve to illustrate the point 
that only modest gains are available through parallelism when computations are constrained by substantial 
data dependencies. Computer Science courses that introduce the concept of simple combinatorial circuits 
(e.g. CS4) can use the simulator to help students to test their cimuits. By providing a tailored collection 
of primitive nodes, for example AND versus MULTIPLY, the simulator can easily be targeted for specific 
domain applications. Arcs that loop Inputs Weights &#38; Training Thresholds Data from a node back to 
itself can be used to provide a form of local memory, hence with additional efforts the simulator might 
be used to simulate the execution of sequential circuits. Courses in Artificial Intelligence (CS 12) 
usually present the concept of neural networks. A dataflow graph can provide the same functionality as 
a neural net (see Figure 2). At the highest level of abstraction the neural net takes as its inputs (a) 
the input data values, (b) a set of weights and threshold values, (c) an indication if the current run 
is for training purposes or not, and (d) for training runs the expected output value to be produced and 
training thresholds or limits. Inputs Weights and Thresholds Training or Not Training: Target Output 
&#38; Threshold/Limit I * v Training: New Weights Output Result Figure 2: Abstract View of Neural Net 
A closer look at a simplified version of the semantics of neural networks (see Figure 3) shows how these 
can be implemented based on the dataflow model. In the case of training runs, the code loops until the 
training threshold or limit is reached and a new set of weights is produced. In the case of non-training 
runs the looping is skipped and a desired output result is produced. Figure 3 shows the typical approach 
taken to implementing neural networks. It is clear in examining the data dependencies involved that potential 
parallelism is somewhat constricted as layer N must await the outputs of layer N-1 before proceeding 
and that the backward propagation for weight adjustments must be completed before the next iteration 
of a given training run can be initiated. The question of what is possible if the underlying neural-network 
model is modified can be addressed with a dataflow simulator that allows for modifications to the given 
model. Thus the simulator allows both standard neural networks to be simulated as well as allowing for 
non-standard models to be investigated. I .~ Merge &#38;  Distribute r I IIJ I - F Training Arbitrator 
1­ &#38; Weight Adjustments 4 --rv v 1- Output Result Training: New Weights Figure 3: Neural Net Simulation 
EVALUATION AND CONCLUSIONS TheUSA-Dataflow-Simulator hasbeensuccessfully class-tested by several classes 
at the University of South Alabama. Students, some of whom were not well versed in object-oriented programming, 
found the extensibility of the simulator to be straightforward. The graphdescription editor, while not 
ideal, has proven to be adequate for moderate sized graphs. The tool has been successful in simulating 
parallel data-driven execution on a PC platform. It has already been put to several uses and other potential 
uses are being investigated. There are several was in which the simulator has been found lacking and 
thus improvements are under way. Currently the virtual time for a given primitive node to fire is picked 
out of the air be the designer of that node-type. Thus, there are no provisions for assuring that a multiply 
node takes longer than an add node. This will be addressed in future versions by creating a test bed 
so that a programmer can reasonably estimate a virtual tim(e of execution. Another convenience to be 
added is the computation of the virtual time to execute an equivalent sequential version of the program 
(with some simplifying assumptions). The execution tracing provides the nti:ded debugging data, but lacks 
the visual impact that a graphical display might provide. Addressing this problem is likely to be a major 
project. The USA-Dataflow-Simulator was based on a dataflow simulator developed at the University of 
Southwestern Louisiana in the late 70s lhmdry 81]. That simulator was a large Multics-PL/I program that 
expired when USL abandoned the Multics Operating System. That simulator ran slowly and was fairly difficult 
to modify. The USA-Dataflow-Simulator was based on an object-oriented design. That choice proved to be 
a good one with respect to the ease of modification. The PC platform was chosen so as to make the simulator 
available to as wide an audience as possible. Anyone interested in getting a copy of the simulator is 
invited to contact the author. ACKNOWLEDGEMENTS The author would like to thank Dr. Bruce Shriver, Dr. 
Steve Landry and the graduate students at USL, who in the late 1970s developed the University of Southwestern 
Louisiana Dataflow Simulator. Many of the ideas in this project derived from the USL data.flow simulator. 
REFERENCES <RefA>[Ackerman 1979] Ackerman, W. B. and Dennis, J. B., VAL --A Value-Oriented Algorithmic Language, 
Preliminary Reference Manual , MIT, Cambridge, Massachusetts, February 8, 1979. [Ackerman 1982] Ackerman, 
W. B., Data Flow Languages , Computer, Vol 15, No. 2, February 1982, pp. 15-25. [Allan 1980] Allan, S. 
and Oldehoeft, A., A Flow Analysis Procedure for the Translation of High-Level Languages to a Data Flow 
Language , IEEE Transactions on Computers, Vol. C-29, No. 9, September 1980, pp. 826-831. [Arvind 1978] 
Arvind, Gostelow, and Plouffe, The Id Repcxt An Asynchronous Programming language and Computing Machine 
, TR 114, Dept. of Computer Science, U. C. Irvine, California, Sept. 1978. [Arvind 1986] Arvind and Culler, 
D. E., Dataflow Architectures , MIT/LCS/TM-294, February 1986. [Landry 1981] Landry, S. P., System Oriented 
Extensions to Dataflow , Ph. D. Thesis, Department of Computer Science, Univ. of Southwestern Louisiana, 
Lafayette, Louisiana, May 1981. [Langan 1992] Langan, D. D., An Object-Oriented Design for a Dataflow 
Simulator , Proceedings of the 30* Annual SoutheastRegional ACM Conference, pp. 417-420, Raleigh, N. 
C., April, 1992. [Koppel 1991] Koppel, T., profile Supercomputer Solo , Scientific American, March 1991, 
pp. 3436. [McGraw 198S] McGraw, J. R., Skedzielewski, S., Allan, S., Oldehhoeft, R., Glauert, J., Kirkham, 
C., Noyce, W., and Thomas, R., SISAL Streams and Iteration in a Single-Assignment Language . Language 
reference Manual M-146, Lawerence Livermom Laboratory, Livermore, CA, March 1985. [Srini 19861Srini, 
V. P., An Architectuml Comparison of Dataflow Systems , Computer, Vol. 19, No. 9, March 1986, pp. 68-88. 
[Veen 1986] Veen, A. H., Dataflow Machine Architecture , ACM Computing Surveys, Vol. 18, No. 4, December 
1986, pp. 365-396. [Wadge 1985] Wadge, W. W. and Ashcroft, E. A., Lucid, the Dataftow Programming Language, 
Academic Press, London, ISBN 0-12-729650-5, copyright 1985, 312 pages.</RefA> 
			
