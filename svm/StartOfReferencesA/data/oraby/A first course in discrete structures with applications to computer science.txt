
 A FIRST COURSE IN DISCRETE STRUCTURES WITH APPLICATIONS TO COMPUTER SCIENCE by J.P. Tremblay Department 
of Computational Science and R. Manohar Department of Mathematics University of Saskatchewan, Saskatoon 
Abstract This paper describes an introductory course in discrete structures for the undergraduate computer 
science student that has evolved at the University of Saskatchewan, Saskatoon. The philosophy of suth 
a course and certain problems encountered in preparing and teaching it are discussed. Introduction Computer 
science is primarily concerned with the study of information structures and their transformations by 
mechanical means. The theoretical basis of computer science rests on logic, sets, functions, and relations 
which are frequently called "discrete structures". Initially, few computer science programs offered a 
course in discrete structures. This, however, has changed substantially in recent years with the emergence 
of a well-defined body of relevant material for such a course. A recent report by Engel [4] indicates 
that departments offering a c~urse in ~ information structures also offer a course in discrete structures. 
The importance of discrete structures is recognized in the ACM's "Curriculum 68" report [l]where the 
course is entitled "Introduction to Discrete Structures" (also called B3)~ A prerequisite structure of 
courses from the report is given in Figure I. The goals of course B3 are: I) to introduce the student 
to those aspects of discrete structures which are required in subsequent computer science courses, and 
2) to motivate the student by illustrating the,key concepts with various examples in computer science. 
The goals of this course, as described in the report, are difficult to achieve for the following reasons: 
I) Course B3 is properly a prerequisite to so many computer science courses that it must appear no later 
than at the sophomore level. 2) The course catalogue description of B3 begins with "Review of set algebra 
including mappings and relations", Very few students at this level have any fluency in these topics since 
the first mathematics courses in set theory and logic are often given at the junior or senior level. 
3) It is very difficult to motivate the students properly in this course. This motivation could be realized 
if some knowledge of non-numeric computation were assumed. Course BI (Introduction to Computing) is the 
only prerequisite to B3 which is mentioned in the ACM's curriculum recommendations, and B1 has little 
in the way of non-numeric computation. 4) Few suitable textbooks are available at present for such a 
course. Most texts that attempt to cover the material are either too advanced or have very little relevance 
to computer science. 5) B3 contains far too much material for a one-semester course. This is the setting 
for the remainder oR the paper which:des- cribes our efforts ~o overcome some of these difficulties. 
Curriculum and Background of Students The Department of Computational Science at the University of Saskatchewan, 
Saskatoon, offers computer science programs in a number of colleges. At the present time, students from 
the Colleges of Arts and Science, Commerce, and Education can major in computer science. The curriculum 
dis- cussion in this section applies to the Arts and Science part of our program. Some of the courses 
(with their ACM's cur- riculum equivalent, if applicable) in our program, along with the prerequisite 
structure, are shown in Figure 2. In the interest of simplicity, only those courses that are directly 
related to the discrete structures course are given. Let us briefly discuss some of these courses. Course 
CMPT 180A is an introductory course in computer science and algorithmic processes. The emphasis in the 
course is placed on problem sol- ving. The properties and construction of numerical algorithms are examined. 
A number of algorithms are programmed and executed on a computer. 1HE CORE COURSES OF THE PROPOSED UNDERGRADUATE 
PROGRAM \ \\ I I I I /"i \\ \ \ \ \ Infor it,on Orga~ I~ I B ,nd,cates a Basic Computer Sclen~ Cour~ 
| ,°d,c,,o, J i~,cates an Intermed,ale Computer Sc,enceCourse Deslr ble i ,~,c°,o, OefinCte A indicates 
an Advanced Computer Science Course PrerequisitePrerequisite M ir~lcates a CUPM Mathemat,cs Course I 
J FIG, 1. Prerequisite structure of courses 156 CMPTIBOA (BI) J I CMPT 181B (II-PARTLY) CMPT 210A 
(B3) CMP(~54)41A [ CMPT(A471)9B ~ Ii CMP;I221)5B ] [GRCA;PHTT4H2E7oARy I CMPT 429A I \ J CMPT 417A i 
CMPT 428B (Al) (A9) [II-PARTLY) Figure 2. Partial Prerequisite Structure of Courses. NOTE: All courses 
are of one semester duration. A denotes fall semester B denotes winter semester As mentioned, a major 
problem with course Loglc is indispensible in the study of automata B3 is being able to motivate students 
properly theory and artifical intelligence. It thereforeand relate the course to the remainder of the 
follows that a course in discrete structures must program. Because a significant degree of appear no 
later than at the second year level. motivation can be achieved if some knowledge of non-numeric computation 
is assumed, course Several advanced books in computer science CMPT 181B (Introduction to Data Structures 
begin with a chapter consisting of a selection of and Non-Numeric Computing) in the program is mathematical 
topics that the reader is assumed to a prerequisite to course B3. A portion of the know. The exposition 
of such topics is usually subject matter in CMPT 181B is similar to that brief and the principal results 
that are summa- in course II (Information Structures) in rized become prerequisites for the remainder 
of Figure I. In particular, a number of possible the text. It is not possible to learn these storage 
structures for certain data structures topics from such a brief treatment, nor is it such as arrays, 
stacks, queues, and trees are possible for undergraduate students in computer discussed. science to study 
all the topics one is required to know by attending courses dealing with each Predicate logic and set 
theory play an individual topic as given by Mathematics depart- important role in the area of information 
ments. In general, the trend is to select sev-organization and retrieval (CMPT 441A). eral topics in 
mathematics that are essential to Logic and Boolean algebra are the foundations the study of many computer 
science areas and of a course in computer organization and switching expose the students to the mathematical 
prerequi- theory (CMPT 320A). Grammars and relations are sites in some other way. A similar development 
central to the study of formal languages and syn- has occurred in most engineering curricula. Intactical 
analysis, Relations, sets, and functions the same spirit, this course discusses certain are required 
in graph theory and computer graphics. selected topics in discrete structures. NoA comparison of programming 
languages (CMPT 215B) mathematical prerequisites except the mathematical invariably reduces to discussing 
the various maturity of a high school student is assumed. mathematical structures which are permitted. 
Although many students taking this course may have had a course in freshman calculus, this is by no means 
a prerequisite. However, any additional mathematical courses taken by a student will aid in the development 
of his mathematical maturity. It is not our intention to cover all topics in discrete structures. Topics 
such as counting techniques, permutations, and probability have been omitted since they are discussed 
in other courses. We have assumed that many high school students will have had some exposure to these 
topics. P.hiloso~hy and 0rganizationof Course In addition to the goals mentioned in the introduction, 
the aim of the course should be to increase the students' intuitive understanding of basic concepts. 
New concepts should be intro- duced in a modular manner, i.e., in terms of previously understood concepts 
and in a way which permits the student to view computer science as a unified field. This cohesiveness 
can be achieved by trying to touch as many advanced courses as possible that require a knowledge of the 
basic mathematical structures introduced. Well chosen applications can facilitate the real- ization of 
this goal and also greatly motivate the student. The course should attempt to intro-duce the student 
to the terminology used in later courses. This approach will tend to generate a sense of familiarity 
at the beginning of such courses. We wish to emphasize that concepts and terminology should be introduced 
well before they are used. Otherwise, a student must invari- ably struggle both with the basic tools 
and the subject matter to which the tools are applied. The mathematical topics discussed are logic, set 
theory, algebraic structures, Boolean alge- bra, graph theory, and introductory computability theory. 
It is our aim to introduce these topics while keeping in mind that the student will eventually apply 
them to certain practical applications, particularly those related to computer science, We have strived 
to introduce the theoretical material in a mathematically precise manner whenever possible while avoiding 
long philosophical discussions, questions or paradoxes, and axiomatic approaches to certain theories. 
The mathematical and abstract ideas are applied in two different senses; namely by I) showing their application 
to a topic in some area of computer science. 2) demonstrating how abstract entities or structures can 
be represented on a computer. In this way, the student is made aware of the fact that both numeric processes 
and various mathematical notions and steps including proofs can be programmed on a computer. It is hoped 
that this approach will allow students to use abstract structures fully in any application, first as 
theoretical notions, but with the under- standing that they can be manipulated mechanically in complex 
situations. Algorithms, in a notation similar to that popularized by Knuth [5], are developed for most 
applications and programs are given in a number of instances. The computer representation and manipulation 
of discrete structures such as strings, trees, and graphs are not discussed in great detail but only 
to the extent which permits the formulation of a solution to a particular application. The first part 
of the course discusses mathematical logic. A discussion of logic at the beginning of the course provides 
a vehicle for formulating proofs in the remainder of the course. We have found that most students are 
very uncertain of what constitutes a proof. An ideal way of maintaining some rigour in the course is 
by ini- tially discussing terms such as proofs, arguments, contradictions, etc. Propositional calculus 
is discussed in some detail and its immediate appli- cation to two-state devices is also given. Decision 
elements can be combined to form a signif- icant portion of a general-purpose computer. The inference 
theory of the propositional calculus is covered in some detail and serves not only to formulate the idea 
of valid arguments, but also to introduce the student to the basic notions of mechanical theorem-proving. 
Predicate logic is also given a reasonably detailed treatment. After the introduction of truth tables, 
we suggest how the students can obtain them by using programming techniques. Similarly, they are asked 
to obtain tests for well-formed formulas and the equivalence of formulas using Polish notation, or to 
generate canonical normal forms, etc. In summary, with logic covered in the first part of the course, 
most proofs in the remainder of the course come much more easily. The second part of the course deals 
with set theory. Some mathematical rigour is maintained in the discussion and proofs are sometimes given 
but we do not raise the question of paradoxes and the axiomatic approach to set theory. Sets, relations, 
orderings, induction, and recursive functions are discussed. Inductive proofs on strings or words rather 
than on the set of natural numbers are emphasized throughout the course. The computer representation 
and manipulation of certain structures are introduced in this chapter. An example of the inter- relationships 
of set theory and logic is given in an inverted file application. The topic of recursion (and its implementation) 
is dealt with in some detail since many programming languages permit its use. The student is familiar 
with the concept of stacks, linked lists, and recursion since these topics are covered in a previous 
course, data structures and non-numeric computing (CMPT 181B). The third part of the course is concerned 
with algebraic structures. Most books in modern algebra devote almost all of their attention to group 
theory while little is said about semi- groups and monoids. The latter are emphasized rather than the 
former since it is semigroup and monoid theory which is very important in certain areas of computer science 
such as in formal language theory and syntactic analysis. A num- ber of applications such as phrase-structure 
grammars, compilation and Polish formulas, multiple precision arithmetic, the theory of residues and 
fast addition, and error detecting and correcting codes are discussed. The fourth part of the course 
is concerned with lattices, Boolean algebra, and their application to sequential machines and switching 
theory. A brief introduction to the minimization of Boolean functions and its use in the logical design 
of digital computer systems is given. The application of lattices and Boolean algebra to data base systems 
and the formal specifications of programming languages respectively are briefly discussed. Part five 
of the course gives a brief intro- duction to graph theory and its applications. Elements of graph theory 
are indispensible in almost all computer science areas. Graph theory is covered in much more detail in 
a subsequent course entitled Combinatorics and Graph Theory (course CMPT 427A in Figure 2). Finally, 
the concept of an effective procedure or algorithm is introduced. The Turing machine and the less powerful 
pushdown store are briefly discussed. These concepts are important in autom- ata and computability theory. 
The duration of the course is one semester which consists of fourteen weeks of instruction; each week 
has three hours of lectures and two hours of labs. The number of weeks devoted to each of the six parts 
of the course are as follows: I) Logic --3 weeks 2) Sets --3 weeks 3) AIgebraic structures --3 weeks 
4) Lattices and Boolean algebra -° 3 weeks 5) Graph theory --l week 6) Computability --l week Most of 
the applications are discussed in the laboratory part of the course. Laboratories and Exercises The exercises 
~n the course are of both a theoretical and a programming nature and are meant to :further the understanding 
of the application of the~concepts.tov~rious areas of computer science. The course has a scheduled two 
hour laboratory period each week. A number of possible laboratory projects include generating proofs 
for theorems in the propositional calculus, determining whether or not two logic statements are equiv-alent 
(without the use of truth tables), designing simple informatiQn organization and retrieval systems, searching 
and sorting, compiling simple languages, formulating minimal path problems, applying techniques for asserting 
program correctness, performing formal syntax analysis, simulating'a machine, etc. The laboratory problems 
discussed are meant to touch on as many areas of computer science as possible. However, an equally important 
goal is to emphasize the problem-solving process. Most students will be employed by firms that require 
problem solvers. The student that does mathematics for the sake of mathematics alone will find it difficult 
to formulate a problem by examining a particular situation within an organization. Frequently such a 
student, upon finishing his studies, is unable to structure a problem and he expects it to be already 
formulated. Indeed, if a person could formulate the problem, it is quite likely that he could also solve 
it! The problem solving aspects of certain applications are examined in three stages as follows: l) the 
selection of an appropriate mathemat- ical model 2) the fomulation of algorithms based on the choice 
made in l) 3) implementation considerations on a computer. The grade associated with each lab is based 
on analysis, documentation, and implementation consid- erations; not just on getting some program that 
produces the correct results. Most students use a programming language which has most of the following 
features: l) Character strings of dynamically varying length 2) Recursive procedures 3) Nested procedures 
and blocks Suitable programming languages are ALGOL, PL/I, and SNOBOL (although it lacks nested block 
structures). FORTRAN is the antithesis of the language to be used since its lack of string manipulation 
and recursion facilities is a serious handicap for the class of problems that must be programmed. Conclusions 
One of the most challenging aspects of teaching the course is to provide a smooth and effective co-existence 
of theory and applications. This has been achieved to a certain degree. The students found the course 
and its associated lab to be a heavy work load. Lab projects were found to be useful and were a sig- 
nificant factor in achieving student motivation. The a~proaGh ~o the course has worked out rather well. 
The mathematically oriented student began to see the practical relevance of math- ematics in ~ne discussion 
of applications. The nonmathematical student appeaPed to become interested in mathematics when directly 
applied to computer science. It is highly desirable to have the same instructor teach both the math- 
ematics and the applications. In this way, the abstract can be related to concrete practical situations. 
Also,the students seem to favour such an approach. It was observed that even students who supposedly 
knew set theory had only a skin-deep understanding of it. They had difficulty in thinking in set theoretical 
terms. From a pract- ical viewpoint, the theory and applications should not be integrated too closely. 
The cohesiveness of certain mathematical topics should not be weakened by the introduction of applications. 
On the other hand, weeks of continuous development of mathematical theory can quite understandably bore 
the student. A reasonable compromise is to use a modular approach. Modules of theory and applications 
are intermixed when it is logical or natural to do so. It is difficult to decide whether the course should 
be given by the Mathematics or the Computer Science department. No matter what choice is made according 
to local circumstances, it is important to emphasize on the one hand that too much rigouris likely to 
turn a majority of students away from other theoretically oriented courses. On the other hand, a complete 
lack of rigour and a shallow grasp of ideas with too much concentration on programming skills may defeat 
the purpose of the course. As mentioned above, the theoretical and practical should be taught by the 
same person. If this cannot be done, it should be treated as a joint venture. Even a mathematically mature 
student should see the relevance of the theoretical concepts and therefore be stimulated. On the other 
hand, an application oriented computer science student may find that some abstraction is helpful and 
necessary. He should not feel shaky with anything that is symbolic, abstract, and rigourous. In the absence 
of a suitable text, it was necessary to prepare lecture notes [8] and material for the laboratory. The 
selection of topics had to be made from several books and articles. Of late, there is some literature 
available ([3], [6], [7]) which partly satisfies the requirements of the course. There is far too much 
material for a one semester course. Our plans are to expand this course to a full year. This approach 
will permit a more detailed discussion of algebraic structures, computability, and graph theory. Our 
experience in teaching this course has convinced us that it requires a considerable amount of preparation 
and planning. It is our belief that the course must be taught by a person who has a clear understanding 
of its objectives; namely, to prepare students to learn other topics in computer science.' If a single 
person finds it difficult to handle the material, it should be made a joint effort, but in no case should 
it become another course in mathematics~ or for that matter, a course in programming with some mathematics 
thrown in. The answer to the question whether the course should be given by the Mathematics or Computer 
Science Department appears to depend very much upon local conditions. References <RefA>I. Association for Computing 
Machinery, "A Report of the ACM Curriculum Committee on Computer Science", CACM Vol. II, No. 3, pp. 151-197. 
2. Berztiss, A.T., "Data Structures: Theory and Practice", Academic Press, 1971. 3. Birkhoff, G. and 
Bartee, T.C., "Modern Applied Algebra:, McGraw-Hill, 1970. 4. Engel, G.L. "Input from the ACM Curriculum 
Committee", SlGCSE Bulletin, Vol. 3, No. 4, pp. 30-39. 5. Knuth, D.E., "The Art of Computer Programming, 
Vol. I: Fundamental Algorithms", Addison-Wesley, 1968. 6. Preparata, F.P. and Yeh, R.T., "Introduction 
to Discrete Structures", Addison-Wesley, 1973. 7. Stone, H.S., "Discrete Mathematical Structures And 
Their Applications", Science Research Associates, Inc., 1973.  8. Tremblay, J.P. and Manohar, R., "Introduction 
to Discrete Mathematical Structures with Applications to Computer Science", McGraw-Hill, due for publication 
in 1974.</RefA> 
			
