
 Always One More Bug: Applying AdaWise to Improve Ada Code 0 TM-94-0026 Cheryl Barbasch and Dan Egnor 
Odyssey Research Associates 301 Dates Drive Ithaca, NY 14850 Abstract AdaWise, a set of tools currently 
under development at ORA, performs automatic checks to verify the ab­sence of common run-time errors 
affecting the correct­ness or portability of Ada programs. The tools can be applied to programs of arbitrary 
size, and they are conservative that is, the absence of a warning guar­antees the absence of a problem. 
If AdaWise issues a warning, there is a potential error that should be investigated by the programmer. 
AdaWise checks at compile-time for such potential errors as incorrect or­der dependence and erroneous 
execution due to im­proper aliasing. These errors are not detected by typ­ical compilers. We ran two 
of the tools on several publicly available Ada software products to determine if the tools issue useful 
warnings without bombarding the user with false positives. We found that Ada-Wise generated a small number 
of total warnings, and that false positives usually indicated areas of weakness in the products tested. 
This paper describes our preliminary tests using the AdaWise toolset, and analyzes the warnings that 
were issued. Keywords: formal verification, Ada, portability, Lint-for-Ada  Introduction Ada is a high-level 
language with features to support program reliability and maintenance. An Ada com­piler will detect many 
potential programming errors or non-portabilities that other languages would require a P.-1.. to copy 
wtho.t fee all or part of this material is granted provided that the copies are net made or dwtributed 
for dirsct comnxmial advsmage, the ACM copyright nohce and the title of the pubkation and its date appear, 
and notm is given that copying is by permission of the Association for Computing Machme~. To copy otherwise 
or repubhsh, require a fee .md/or specific permission. separate analysis tool to detect. However, the 
Ada language definition includes rules that Ada programs are required to obey, but that compilers are 
not required to enforce, either at compile-time or at execution-t i me. Two categories of error that 
re­sult from the violation of these rules are erroneous execution and incorrect order dependence (see 
[Ada83], section 1.6), An Ada program that violates one or more of these rules can have unpredictable 
be­ havior, or can have different effects with different com­ pilers or in different execution environments. 
 ORA is developing a set of tools, called AdaWise, which will check Ada Programs at compile-time for 
the absence of some of these errors, including im­proper aliasing, incorrect order dependence (includ­ing 
in elaboration of compilation units), and use of undefined variables. Input to AdaWise can be any legal 
Ada program; users are not restricted to a sub­set of Ada. The AdaWise checks are performed auto­matically, 
without requiring the user to write formal specifications or carry out proofs. Although running AdaWise 
is automated, human analysis by programmers is required to make use of the results. The warnings that 
AdaWise issues are conservative that is, the absence of a warning guar­antees the absence of a problem. 
If AdaWise issues a warning, it points out a specific place in the program in which a problem may occur. 
The programmer then has a localized region in which to look for a potential violation. AdaWise is written 
in Ada, using ASIS (Ada Se­mantic Interface Specification) to access the static se­mantic information 
in an Ada library ([AS194]). An AdaWise user must first compile the input source to be analyzed with 
a compiler that supports ASIS. How­ever, while the toolset is built using ASIS, the user is not required 
to have the ASIS product itself to run the checks, and the checking done is compiler­ oT&#38; ~Ork is 
~DOn~ORdbv ARPA and Rome Lab Or~orv under contract nu~ber F196&#38;-93-C-0130 and k part of th~ STARS 
program. @1994 ACM 0-89791 -529-1 /92/0011-0228 3.50 independent. As a preliminary test of our evolving 
AdaWise tools, we ran two of them on a variety of publicly avail­ able Ada software products. We then 
examined the code in those places that AdaWise had warned might be incorrect, to see if the code in fact 
contained errors. Since the tools are conservative, we were particularly interested in what percentage 
of the total warnings is­ sued by them were actual errors. We did not attelmpt to find whether the tools 
missed any errors in the code. We used this exercise to determine the practical value of using AdaWise 
on real-world code. The results of our tests indicate that AdaWise finds ac­tual errors, without reporting 
too many false wi~rn­ings. We discovered in some cases that the tools issued warnings for programs that 
technically contained no errors, but these warnings provided useful red flaLgs for programmers and future 
maintainers for situations in which slight modifications could cause errors later. For this reason, we 
envision AdaWise being useful clur­ing both software development and maintenance: pro­grammers can use 
the tools on code as they develop it and use the tools again every time they make fixes to existing code. 
The following sections give more details on our test­ing. We reformatted some quoted code and output 
from AdaWise to fit on the page for this report, but we did not change the actual text of the input product 
source to perform the checking. 2 The Software Products Tested with AdaWise To exercise the AdaWise tools 
fully and to demon­strate their applicability, we ran them on diverse pub­licly available software. We 
analyzed the following products. Arcadia s Aflex, a version of the flex lexical an­alyzer generator 
in Ada.  A publicly available Dining Philosophers pro­gram that exercises the tasking features of Acla. 
 Dhrystone, a common benchmark of computa­tional performance.  Ada Standard Repository (ASR) code from 
SIM-TEL20 (now called the Public Ada Library (PAL)):  Integer Calculator, a utility that makes infix 
integer calculations,  Line Editor, a line-oriented file editor.  Expert System, a configurable goal-driven 
expert system.   Forms Generator, a product to create screen input forms for use in other products. 
 Menu Manager, a product to make and use system menus,  Plotter, a product that reads data points and 
generates video or printed output. . Portable Text Formatter, the text pro­cessor and formatter used 
for ASR and other documents.  Spelling Corrector/Checker, an interac­tive spelling tool with a dictionary. 
 Of the eleven products analyzed, four of them re­ceived warnings about potential incorrect order depen­dence 
during elaboration and three received warnings about potential improper aliasing. No one product generated 
more than four total warnings. 3 Elaboration Order Checking In general, an Ada program s compilation 
units may be elaborated in more than one order. Chapter 10 of the Ada Reference Manual (ARM) constrains 
the possible orders; any order meeting these constraints is legal. If there are two different legal elaboration 
orders that have different observable effects, then the program has an incorrect order dependence. The 
elaboration order checking tool, elab, analyzes an Ada main program and all its dependent units for incorrect 
order dependence in the elaboration of the compilation units. If no potential errors are reported by 
elab for this program, then any legal elaboration order can be chosen by the compiler (or by another 
program analysis tool) without affecting execution. If elab issues a warning, then the programmer can 
use pragma ELABORATE to eliminate the potential incor­rect order dependence. 3.1 Results We ran elab 
on all of the products. If a product in­cluded more than one main program, we ran elab on each program. 
Four products caused warnings, and all of the warnings indicated actual incorrect order dependence in 
elaboration. Table 1 shows more de­ tailed statistics. The Source Lines column contains the total number 
of lines in the original source code for each product, including comments and whitespace. The Source 
Units column contains the total num­ber of Ada compilation units compiled into the Ada library for each 
product. 229 Table 1: Statistics for elab. Source Product Lines Units Warnings Aflex 11,351 50 2 Philosophers 
1,093 18 2 Dhrystone 1,110 6 none Calculator 486 7 none Line Editor 2,646 9 none Expert System 1,048 
3 none Forms Generator 14,198 33 none Menu Manager 3,907 17 1 Plotter 1,094 21 none PTF 10,423 34 1 Spelling 
Checker 9,258 49 none  3.2 Warnings Table 1 shows that eiab generated a total of six warn­ings in four 
products; all six warnings were for a subprogram being called from the initialization sec­tion of a package 
body before the subprogram s body was guaranteed to be elaborated. All of the prob­lems would be soIved 
by including pragma ELABORATE statements. The elab tool guarantees only that there is no incor­rect order 
dependence. If all IegaI elaboration orders will result in a subprogram being called before its body 
is elaborated, then e/ah will not report the error. Once all legal elaboration orders are shown to have 
the same effect (no warnings are issued by elab), another tool that checks for definedness of objects 
can be used to check for potential raising of PROGRAM_ ERROR. Here is one example of the warnings issued 
by elab and a discussion of the potential error. 3.3 Example: Portable Text Formatter 3.3.1 Warning: 
>> WARNING: Compilation Units are NOT independent: >> Subprogram: d.string >> is DEFINED in dyn(A_PACKAGE_BODY) 
>> and CALLED in f ormatted_output_f i.le(A_PACKAGE-BODY)  3.3.2 Explanation: The partial order determined 
by context clauses does not define the order in which package body Dyn and package body Forxnatted_Output_ 
File are to be elab­orated. A compiler may choose either order. The package body of Formatted_ Output_File 
initializes one variable using the D_St ring function defined in package Dyn: Header_Footer_De fault: 
constant HF_LINES := (others => (others => Dyn. D_ String( ))); This results in an unrecoverable PROGRAM_ERROR 
if (and only if) the implementation elaborates the body of Formatted_ Output_Fi.le before elaborating 
the body of Dyn. 3.3.3 Solution: Insert pragma ELABORATE(Dyn) before the package body of Formatted_ 
Clutput_File to guarantee th~t no compiler generate code leaving this exception to be raised.  4 Alias 
Checking in Subpro­gram Calls Two program variables are aliased if their storage over­laps, so that modifying 
one of the variables may af­fect thevalue of the other. Unintentional or improper aliasing is a well-known 
source of programming errors. For example, the body of a subprogram often relies on the fact that the 
actual parameters matched with distinct formal parameters will not be aliased, and a subprogram call 
violating that assumption may be­have surprisingly. These problems are compounded because, in general, 
the compiler may choose the or­der in which actual parameters are evaluated and the method by which they 
are passed. As a result, im­proper aliasing may lead not only to non-portabilities (incorrect order dependence) 
but also to completely undefined behavior (erroneous execution). (See the Ada Reference Manual, sections 
1.6, 6.2(13), 6.4, and 12.3( 17).) The alias checking and incorrect order dependence checking tool, aiod, 
finds all subprogram calls and generic instantiations in a given compilation unit and checks the actual 
parameters (depending on mode and type) for potential aliasing with global variables, for aliasing with 
each other, and for independence. If no potential errors are reported by aiod, then neither the choice 
of parameter passing mechanism nor the or­der of parameter evaluation by the compiler can affect the 
visible behavior of the program during execution. Note that even though aiod is conservative and the 
warnings generated may not in fact indicate an er­ror, the warnings can alert programmers to a potential 
problem that could lead to future bugs or problems in maintenance or portability. Table 2: Statistics 
for aiod. Source Product Lines Units Warnings Aflex 11,351 50 4 Philosophers 1,093 18 none Dhrystone 
1,110 6 none Calculator 486 7 none Line Editor 2,646 9 none Expert System 1,048 3 none Forms Generator 
14,198 33 1 Menu Manager 3,907 17 none Plotter 1,094 21 none PTF 10,423 34 none Spelling Checker 9,258 
19 3 4.1 Results We ran the aiod tool on all of the units in each product. It issued warnings for three 
of the products. -Table 2 shows more detailed statistics.  4.2 Warnings The aiod tool issued a total 
of eight warnings in three products. This section shows those warnings and gives explanations of and 
solutions for each kind of warning. 4.3 Example: Aflex The aiod tool issued four warnings for the Afiex 
prod­uct: 2 warnings of potential incorrect order depen­dence because of aliasing of actual parameters, 
and 2 warnings of potential erroneous execution because of alissing of an actual parameter with a global. 
4.3.1 Warning of Incorrect Order Depen­dence: >> WARNING: potential parameter error in >> clfa: line 
496: mA. EPSCLOSURE(NsET, NUMSTATEs, AcCsET, NACC, HASHVAL , NSET) >> WARNING: Parameters: 6 and 1 are 
potential ALIASES (potential ORDER of COPY OUT error) 4.3.2 Explanation: The aiodtool reports that incorrect 
order dependence can occur. The parameters are scalar or access type, so aioddoes not warn ofpotential 
erroneous execution. DFA. EPSCLOSURE has the following specification: procedure EPSCLOSURE( T : in out 
INT.PTR; NS_ADDR : in out INTEGER; ACCSET : i.n out INT_PTR; NACC.ADDR, HV.ADDR : out INTEGER; RESULT 
: out INT_PTR)  The reported alias involves using the same variable for the first and last (sixth) parameter. 
However, the last statement of the DFA. EPSCLOSURE procedure body sets the last (out) formal parameter 
equal to the first (in out) parameter: RESULT := T; Therefore, in this case, using thesame variable for 
both parameters is not a problem since both are set to the same value on exit. Thus, the order of copy 
back chosen bythecompiler makes no difference. This coding practice is confusing, not only to AdaWise, 
but to human readers. 4.3.3 Solution: Add a comment in DFA. EPSCLOSURE that the exit val­ ues of RESULT 
and T are identical; or, perhaps safer, change the code to make T mode IN or do not use aliased actual 
parameters. Note that the first of these solutions does not stop aiod from issuing warning messages when 
you rerun aiod. 4.3.4 Warning of Erroneous Execution >> WARNING: potential parameter error in >> main_body: 
lime 365: EXTERNAL.FILE_MANAGER . GET_BACKTRACK_FILE ( BACKTRACK_FILE) >> WARNING: Parameter 1: is aliased 
with a global. >> (potential ERRONEOUS EXECUTION)  4.3.5 Explanation: The azodtoo] warns that analias 
of BACKTRACK_FILE is updated during the call (other than by using the formal parameter). The called procedure 
does not directly access BACKTRACK_FILE, but calls MISC. AFLEXFATAL in ex­ception handlers, which calls 
MAIN_ BODY. AFLEXEND di­rectly, which uses BACKTRACK_FILE: procedure GET_BACKTRACK_FILE( F: in out FILE_ 
TYPE) is begin CREATE(F, OUT_FILE, 231 aflex.backtrack ) ; exception when USE.ERROR I NAME-ERROR => 
MISC.AFLEXFATAL ( could not create backtrack file ); end GET_BACKTRACK_FILE; -­ at lexfatal -­ report 
a fatal error message -­ and terminate procedure AFLEXFATAL(MSG : i.n VSTRING) is use TEXT_IO; begin 
 TSTRING.PUT(STANDARD_ERROR , aflex: fatal internal error &#38; MSG); TEXT_IO.NEW_LINE (STANDARD_ERROR) 
; MAIN_BODY.AFLEXEND (l); end AFLEXFATAL; MAIN_BODY.AFLEXEND contains the following code: if 03AcKTRAcK_REp0RT) 
then if (NtJM_BACKTRACKING = o) then TEXT_IO.PUT_LINE(BACKTRACK_FILE , No backtracking. ); else if (FULLTBL) 
then INT_IO.PUT(BACKTRACK_FILE , NUM.BACKTRACKING, O); TEXT_IO.PUT_LINE ( BACKTRACK_FILE , backtracking 
. .. ). else TEXT_IO.PUT_LINE ( BACKTRACK_FILE, Compressed tables . .. ). end if; end if; CLOSE(BACKTRACK-FILE) 
; end if; The predefine type TEXT_IO.FILE_TYPE is an implementation-dependent limited private type. 
The aiod tool treats it as a non-scalar, without regard to a particular compiler implementation of the 
type. Thus, the calls to PUT and PUT_LINE potentially up­date BACKTRACK_FILE. If an exception occurs 
attempting to create BACKTRACK_FILE, the resulting action will include at­tempting towrite to thesamefilethat 
failed, nodoubt raisingan unhandled exception. This exampleshows aproblem thatis both difficult to find 
(it is obscured by several layers of procedure calls) and not likely to appear in testing (it happens 
only under error conditions), yet is potentially serious. The example also indicates that cases of aliasing 
tend to be trouble spots ingeneral, and even ifthe situation isnot erroneous execution in the ARM sense, 
it can bean actual bug. 4.3.6 Solution: Remove the call to AFLEXEND from AFLEXFATAL, or eliminate the 
global alias in the call to GET_BACKTRACK_FILE,  4.4 Example: Forms Generator Aiodissues one warning 
ofpotential aliasing ofactual parameters that could result in either incorrect order dependence or erroneous 
execution. 4.4.1 Warning: >> WARNING: potential parameter error i.n >> form_executor: lines 128 to 130: 
FORM_MANAGER.GET_FIELD_INFO ( FIELD, NAME, POSITION, LENGTH, RENDITION, CHAR_LIMITS, VALUE, VALUE, MODE) 
 >> Parameters 7 and 8 are potential ALIASES >> (potential ORDER of COPY OUT error) and >> (potential 
ERRONEOUS EXECUTION) 4.4.2 Explanation: Aiod warns that parameters 7 and 8 are potential aliases. The 
modes of thematching formal parameters are both output parameters. (If both modes were IN, aiodwould 
not have issued a warning.) The messages accompanying the warning also give an indication of the types 
oferror caused by the aliasing. We can use the error information to inspect the code. First, potential 
ORDER of COPY OUT errortek us there couldbe dependence on the order chosen by a compiler to copy formal 
variables back to actuals after execution of the body of GET_FIELDJNFO (see Ada Reference Manual, 6.4(6)). 
Second, potential ERRONEOUS EXECUTICINtellsus that the types of both aliased parameters are non­scalar 
(and non-access type) and that theeffectofex­ecuting the program may depend on the parameter passing 
mechanism chosen by the compiler (see the Ada Reference Manual, 6.2(7)). We inspect the code to see if 
there is an ac­tual error. The procedure call listed occurs in FORM_EXECUTOR.GET_INFO. The procedure 
FORM-EXECUTOR.GET_FIELD_INFO references the abstract FIELD_ACCESS pointer type of the first parameter 
and returns some information stored in it in 8 output parameters: procedure GET_FIELD_INFO ( FIELD : 
FIELD-ACCESS; NAME : out FIELD_ NAME; POSITION : out FIELD_ POSITION; LENGTH : out FIELD_LENGTH; RENDITION 
: out FIELD_RENDITIONS; CHAR_LIMITS : out CHAR.TYPE; INIT_VALUE : out FIELD_VALUE; VALUE : out FIELD.VALUE; 
MODE : out FIELD_MODE) i.s begin NAME := FIELD.NAME; POSITION := FIELD.POSITION; LENGTH := FIELD.LENGTH; 
RENDITION := FIELD.RENDITION; CHAR_LIMITS := FIELD.CHAR_LIMITS; INIT_VALUE := FIELD.INIT_VALUE ; VALUE 
:= FIELD.VALUE; MODE := FIELD.MODE; exception ... end GET_FIELD_INFO; The type FIELD_VALUE is defined 
in package FORM_MANAGERae subtype FIELD_VALUE is STRING(I . . MAX_FIELD_VALUE ); The value of FIELD.INIT_VALUE 
wil]presumab[y differ from the value of FIELD.VALUE in some cases where FORM-EXECUTOR.GET-INFO is called. 
This inn­plementation depends on the returned VALUE being set to the FIELD.VALUE field. since the parameters 
are non-scalar, two compiler implementations coulld produce different results, depending onthe parameter­paesing 
mechanism chosen, orthe order chosen tocopy the formals back totheactuals. In this case, inspection shows 
that aiodhasdiscov­ered an actual error. 4.4.3 Solution: If infact the value of the FIELD.INIT_VALUE 
fieldis unwanted, one solution is to use a scratch variable to receive its value, to prevent corrupting 
the crucial VALUE variable.  4.5 Example: Spelling Checker The aiodtoolgenerated threewarningsfor the 
Spelling Corrector/Checkerproduct: one ofaliasing oftwoa~c­tual parameters causing potential incorrect 
order de­pendence and two ofaliaeing with a global causing potential erroneous execution. 4.5.1 Warning 
for HELP_UTILITY >> WARNING: potential parameter error in >> help_utility.pri,nt_topic_text:, lines 36 
to 37: IiELP_INFO_SUPPORT .APPEND_TO_DISPLAY ( CURRENT_LINE.TEXT_LINE , CURRENT_LINE.LINE_LENGTH ) >> 
Parameter 1: is aliased with a global. >> (potential ERRONEOUS EXECUTION) 4.5.2 Explanation: The potential 
ERRONEOUS EXECUTION warning te]k ustolookin the body ofAPPEND_TO_DISPLAY toseeif the parameter passing 
mechanism makes a difference in the results of the execution. HELP_UTILITY.PRINT_TOPIC_TEXT is a separately 
defined compilation unit: separate (HELP_UTILITY) procedure PRINT_TOPIC_TEXT ( NODE: in HELP_UTILITY.HELP_LINK) 
is CURRENT_LINE: HELP_INFO_SUPPORT.TEXT_LINK; begin CURRENT_LINE := NODE.TEXT_LINES; while CURRENT_LINE 
/= null loop HELP_INFO_SUPPORT .APPEND_TO_DISPLAY( CURRENT-LINE.TEXT_LINE , CURRENT-LINE.LINE-LENGTH) 
; CURRENT_LINE := CURRENT_LINE.NEXT_LINE; end loop; exception when others => raise; end PRINT_TOPIC_TEXT; 
At first glance, CURRENT_LINE appears to be a locally declared variable and thus could not be aliased 
with a global. But, on inspection, we see that the type of HELPJNFO_SUPPORT.TEXT_LINK is access TEXT_LINE. 
This means that the local CURRENT_LINE.TEXT_LINEis an object on the heap (i.e., equivalent to CURRENT_LINE. 
all. TEXT_LINE). Thus, aiod considers the actual parameter tobe po­ tentially aliased with anything else 
of the same type on the heap. HELP-INFO-SUPPORT.APPEND-TO-DISPLAY does in fact reference a global object 
of the same type (TEXT-LINE) on the heap: 233 procedure APPEND_TO_DISPLAY( LINE : in STRING; CHAR.COUNT: 
in natural) is begin if LINE~length <= FILE_TEXT_LINE length then CURRENT_LINE. TEXT_LINE := FILE_TEXT_LINE 
(others => ); CURRENT_LINE.TEXT_LINE (1. .LINE length) := LINE; CURRENT_LINE.LINE_LENGTH := CHAR_COUNT; 
else CURRENT_LINE. TEXT_LINE := LINE(l. .FILE_TEXT_LINE length); CURRENT_LINE. LINE_LENGTH := FILE_TEXT_LINE 
length; end if; PREVIOUS_LINE.NEXT_LINE := CURRENT-LINE; CURRENT_LINE.NEXT_LINE := null; PREVIOUS-LINE 
:= CURRENT_LINE; CURRENT_LINE := new TEXT_LINE; exception when others => raise; end APPEND-TO_DISPLAY; 
The CURRENT_LINEin HELP_INFO_SUPPORT isdif­ferentfrom the CURRENT-LINE in PRINT_TOPIC_TEXT. They are 
not alia.sed, but the objects they point to (and that are referenced) are potentially aliased. Inspection 
of the body of APPEND_TO_DISPLAY shows that it never references the formal IN param­eter, LINE, after 
updating the potential global alias. That means that even ifthe parameter were aliased with a global, 
(i.e., the access variables had the same value), the body indeed does not have an erroneous execution 
because the undefined value is not subse­quentlyused (see section 6.2(13)of the Ada R,eference Manual). 
This example is a common false warning, since aiod does not know the values ofthe access variables. 
 4.5.3 Solution: In this case, aiod is being overly conservative. Note the warning, perhaps leavinga 
comment about it,but there is no problem. 4.5.4 Warning for UTILITIES.MERGE >> WARNING: potential parameter 
error in >> speller: line 483: UTILITIES.MERGE (INPUT_FILE_A, INPUT_FILE_B, INPUT_FILE_A) >> Parameters: 
1 and 3 are potential ALIASES >> (potential ORDER of COPY OUT error) and >> (potential ERRONEOUS EXECUTION) 
  4.5.5 Explanation: The listed procedure call occurs in part of the main procedure Speller. The called 
procedure UTILITIES.MERGE ha.s the following specification: ------------------------____________________ 
--Algorithm: This process will merge -- DICTIONARY_A and -­ : DICTIONARY_B into DICTIONARY_C -----------------­ 
-----­--------­ ______ _____ procedure MERGE ( DICTIONARY_A, DICTIONARY_B, DICTIONARY_C: in out TEXT_IO.FILE_TYPE) 
Nowhere is it stated that the output dictionary may be the same as one of the input dictionaries, as 
is the case when it is called above, The code reads DICTIONARY_A and DICTIONARY-B into inter­nal storage, 
then using the internal storage calcu­lates the merged output and writes the results to DICTIONARY_C. 
All three files are closed at the end of MERGE: TExT_Io.cLosE (DICTIONARY_C); if TExT_Io.Is_opEN (DICTIONARY_A) 
then TExT_Io.cLosE (DICTIONARy_A); end if; if TExT_Io.Is_opEN (DICTIONARy_B) then TExT_Io.cLosE (DICTIONARy_B); 
end if; Superficially there appears tobe no actual error. An obvious danger might be that another programmer 
working on the same code (or the same programmer later) might deem the current implementation ineffi­cient, 
and rewrite the routineto write theoutput asit reads the input files. Adding internal comments will alert 
future programmers to that danger. However, even the existing program may produce unforseen results because 
of the aliasing. Ada s OPEN and CLOSE are not necessarily equivalentto theop­erating system s open and 
close operations. For ex­ample, closing of the file DICTIONARY_C might have some unforseen effect on 
the subsequent closing of DICTIONARY-A depending on whether the parameters were passed by reference or 
by copy, or on the im­plementation s association of an external file with an internal file.  4.5.6 Solution: 
Change the actual parameters to MERGE so that they are not aliased.   Conclusions We expected a small 
number of warnings for and pos­sibly no actual errors in the products we analyzed be­cause the products 
have been in use for some time. AdaWise in fact generated only a small number of warnings. These warnings, 
however, indicated that there were actual errors in some products. Some warn­ings were (false positives 
. It is impossible to estimate the percentage of false positives that would be gen­erated for code under 
initial testing. An important point, though, is that almost all of the false positives in fact indicated 
areas of weakness in the code. We suspect that even lengthy unguided code inspections would not have 
revealed most of these errors and the potential bugs. References <RefA>[Ada83] ANSI. Reference Manual for 
the Ada Pro­gramming Language, 1983. ANSI/MIL-STD­1815A. [AS194] ASIS Working Group, AJPO. ASIS: Detailed 
Semantics and Implementation Ada Senaan­ tic Interface Specification, May 1994. </RefA> 
			
