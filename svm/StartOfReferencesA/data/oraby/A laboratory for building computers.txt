
 A LABORATORY FOR BUILDING COMPUTERS Richard J. Reid Computer Science Department Michigan State University 
E. Lansing, MI 48824 (517) 355-8389 reid(j!jcps.msu.edu Abstract -A workstation laboratory allows undergraduate 
students to build complete, functioning computers--in simulation. The simulation extends down to the 
gate and signal levels, with eftlxxive modeling of delays and transi­tions, so reasonable assurance of 
the validity of the designs can be obtained The computers constructed in this labora­tory are complete 
with peripheral equipment including tapes and disks, and the students furnish a mdimentary operating 
system. The student operating-systems receive executable binary objects on the tapes, transfer them to 
the disk, and initiate their execution. The executable objects and the operating system are produced 
by a standard C compiler. Students must limit their C-language source code and data types used so the 
compiled binaries will be executable on the 16-bit wide, Motorola 680X04ike com­puter they construct. 
The computers are constructed in an hierarchical manner from the gates and medium-scale components available 
in the digital simulator used in this laboratory. INTRODUCTION The labomtory created with this NSF matching 
grant con­sists of Sun Microsystems SPARCst8tion 2 s. These workstations have sufficient power to allow 
building rela­tively large computer systems in simulation. Modem digital-design laboratories commonly 
use simula­tion to evaluate digital networks and proposed computer architectures [1], [2], [3]. Simulation 
is an economical method for gaining confidence that a proposed design will function as intended. When 
potential ditlkxdties are discoverecL they arc often easily remedied, and incur minimal costs compared 
to rectifying problems in hardwme prototypes. Designs created for simulation have outstanding documentation 
and portability characteristics. Permission to oopy without fee all or pert of thie meterial is granted 
provided that the copies are not made or distributed for direct commercial adventage, the ACM copyright 
notice and the title of the publication and ite dete appear, and notice is given that copying is by permission 
of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee andlor 
specific permiaeion. @1992 ACM Q.8979J-468-6/92/0002JQ J92...$J .SO Design information is text-oriented 
and amenable to text­processing and data-base capture and control. A design can be ported to any computer 
on which the simulator is available. In an educational setting, simulation allows us to keep the laboratories 
up to date, adding new components to the simulator whenever appropriate, as opposed to furnishing new 
equipment in the laboratory. Students can work on their computer projects using any of the facilities 
provided for programming instruction. The superior facilities of this laboratory are available for students 
to validate their designs and demonstrate them to the architecture-course teachings assistants in an 
expeditious manner. The digital simulator used in this course uses an event­driven [4] mechanism to allow 
for the asynchronous rela­tions among the many signrds. That is, gates or higher­level components are 
called on for evaluation when any of their inputs change. An invoked component posts any of its changed 
oulput signals along with the time the output change is to take efikct. By stepping time through the 
events posted in a priority queue, computation is only required to process changes. A realistic appraisal 
of components dynamic reactions to their input signals is obtained by modeling signals with the four 
levekx zero, one, transition or unknown, and high­impedance [5], [6]. While simulation isn t the complete 
educational answer to tmining computer science and computer engineering stu­dents, it is a setting that 
will provide reasonable assurance that a proposed design witt function as intended. Any benefits of direct 
hardware interaction at the computer architecture course-level are foregone in lieu of the larger-scale 
designs that simulation will allow in the amount of time available in our courses and laboratories. Using 
interactive simulation can preserve the experimental nature of the laborato~. Signals are changeable 
during simulation time in response to network-behavior observa­tions. This interactive coupling between 
excitations, responses and network modification is the essence of the laboratories. The graphical interactions 
possible with simulation give an animate character to networks being designed and tested. Components 
providing special features and design challenges extend the simulator to enhance this interactive mode 
of simulation. These special components provide powerful diagnostic tools, multi­element displays, and 
animated devices. The power of the computers available relates directly to the size of systems that 
can be simulated in a reasonable amount of time. A reasonable amount of time in our case has tmnslated 
tcx The student computers must be initiated from their composing ASCII files and be executing their user 
code segments within one hour. This limits simulated computers to a few tens of thousands of components. 
The computers that are built are microcode [7] with the micro­code running at about 10 microinstruction 
per second, and the macro machine running about 3 instructions per second. BACKGROUND Computer Architecture 
is an undergraduate course and is a degree requirement for all students in Computer Engineer­ing (an 
EE option) or in Computer Science. Undergraduate students commonly take this course either in their junior 
or senior year. About a third of newly entering computer sci­ence graduate students take this course 
also, as their under­graduate backgrounds may not adequately have prepared them for graduate work in 
architecture. The course has a single, two-hour, scheduled laboratory and three hours of lecture per 
week. During the scheduled laboratory times the TA s guide students in solving implementation prob­lems, 
and receive demonstrations of completed projects. Students must spend considerable amounts of time beyond 
the scheduled lab in implementing their designs. Students come to this computer architecture course with 
a background in computer organization and assembly­language programming as well as high-level language 
experience. This background and the simulation tools pro­vided allow them to embark on substantial projects 
in com­puter construction. Me textbook [8] used in the course includes sufficient support material for 
all the project work so students do not have any supplemental library work. DIGITAL SIMULATOR The digital 
simulator is the backbone of this environment, The simulator gives each architecture student the neces­sary 
power to produce his/her,own working computw. An example of the lowest level modeling capability is shown 
in Figure 1. This shows a simple two-input nand gate, excited by manual switches (shown on the left and 
operated by keyboard keys) and driving a digital probe (shown on the right). This is a replication of 
the normat icreen presentation. II Figure 1, Wo-irtput Nand in a Manual Test Setup The mled insets of 
one Switch and the Probe indicate a logical one in both those positions. Networks are specified by netlists, 
ASCII files of comp­onent placements and their interconnections, having the following generic form: dypexlayout>sitionXinputsxoutputsxinitialization>; 
The netlist required to specify the network of l%gure 1 ix Switch la SW.X ONE; Switch 3a SW.Y ZERO, Nand 
2b SW_X SW_y Ollv Probe 2C out Component placements are specified by giving the row and column coordinates 
of a virtual grid overlaying the display space, e.g. la,3a,2b,2e above, specifying row 1 column&#38; 
row 3 column a, etc. The grid is virtual in the sense that the maximum extent of placements in the netlkst 
is mapped to the full screen of the display. Hierarchical collections of components can be formed as 
shown in Figure 2. This definition capability is imple­mented as a macro definition/use language facility. 
Net.One ;P Figure 2, Hieramhical Network The corresponding netlist defining this network would lxx Define 
Net_One input[3-01 output Nand la input[3-2] intemal_node_l; Nand 3a input[l-0] intemal_node_Q Fk+nd 
2b internal_node_l interntd_nde_O OUQUC Ende~ After this definition, the four-input, single-output com­ponen$ 
Net_One, could be used in the same manner as any primitive components. Note that Net_One isn t given 
a placement field here in the definition, but would be in each of its instances of use. The use of subscripted 
signal names is also illustrated, e.g. input[3-0] specifies four signal lines: input[3], input[2], etc. 
in a bus-like manner. The signal names chosen for nodes within a definition is arbitrary. The names chosen 
me distinguished from the same signal names that might be used elsewhere, by the scoping pro­vided by 
the Detine...Endef block-structure organization. The names used at the interface have the same interpreta­tion 
as the formal arguments in a macro. Similarly, the graphical placements within a definition are relative 
to the ultimate placements of instances of the defined network s positions of use. THE PROJECT The objective 
of this course, in so far as the laboratory is concerned, is to build a working computer. l%e design 
is carried out in a top/down manner [9], and starts with the students being assigned a demonstration 
component for their validation work. In a given term, this might be a droid as shown in Figure 3, ;omputer 
)roid Figure 3. Computer Controlled Droid The droid is an animated stick-man that has the 10 inputs for 
control. The rotational-joints and translations are con­trolled by these inputs. The demonstration component 
is varied from term to term, and in other terms the hexobot shown in Figure 4 might be used. Domputer 
Hexobot Q 1 Figure 4. Computer Controlled Hexobot In addition to the controlling inputs shown, there 
are out­puts from the Hexobot. The six outputs are activated by switches on the hexobot s skim These 
switches close when the hexobot s skirt extends beyond its playing field. These demonstration components 
are brought into their student-individualized actions, using a functional-level version of the computer 
to be built in a given term. Stu­dents complete a program for the functional computer that will drive 
the droid through an exercise of their own choosing--somersaul~ hopskip-and-jump, broad jump, etc., or 
the hexobot through an assigned angular path. The student s program that accomplishes this robot motion 
is preserved for later in the term when the same program is required to execute on the equivalent computer 
that the student builds from the gate level up. Figure 5 shows the overall organization of a micro­programmed 
computer. Three levels of the hierarchy that : 1sto be used in completing the computer are shown. Computer 
ALU Man-I/0 Disk Unit Disk Rom EE 1 u [ Disk Gnttrol Gmrrol ~ 1 .4 2 n Ports ZECl n u I ---- - Figure 
5. Computer Organization Here we see three levels displayed, superimposed. For example, the Computer 
contains an ALU (arithmetic­logic unit) which contains an IR (instruction register). The actual screen 
display on the workstation would only display a single level at a time. The interconnecting signal lines 
are not shown here, but can be optionally displayed. The next lower level of detail for the Alu Slice 
shown in Figure 5 appears in Figure 6. Shift-in-L Shift-in-R , 4 t i 4 Bin 16x4 write Re&#38;File B+ 
4 2-port A B Latch 1I4, R 1 DAO 1BA02 s 2 44 4i Rs  mr ~ Cout Alu-c - F 1 Y Figure 6. Alu-Slice There 
are some primitive-level components shown in Fig­ure 6, but the Register File, Shifter and ALU-Circuit 
have additional levels of detail not shown here. At the lowest level it is possible to see the values 
of bits stored in single register cells and the outputs of individual gates. Any of these levels can 
be chosen for workstation-screen display. The students create this hierarchical arrangement and some 
of the individualization comes by assigning diffkrent rela­tive placements of components at the various 
levels. The computem built have a register file, a stack for func­tion linking. and a single-level interrupt 
system. The addressing modes included are: immediate, register direct, memory direct, and register indirect. 
To date, only CISC type amhitectures have been built, but plans are underway to do a RISC version. A 
sequence of graded steps or milestones through the term leads to completion of the computer. These steps 
include: providing the high-level code for controlling the demons­tration device; completing a validation 
test fixture for the ALU bit-slice component.ty using the bit-sliced microcon­tml sequencer in a demonstration 
environmenl~ and joining the sub-units and completing the micmcode implementa­tion. ADVANCED PROJECTS 
 Additional projects have been done in this laboratcuy either associated with other courses or independent 
study options. These have included Building a pipelined adder or multiplier. Eight-bi~ unsigned integer 
operands, with two pipeline seg­ments, and including automatic generation of operands in a test fixture 
that keeps the pipe filled and allows verification of the results.  Constructing a parallel machine 
with 16 processing elements and one control processor. Applying this parallel machine to the solution 
of Laplace s equa­tion.  Developing asynchronous local and bus communica­tions among three processors. 
Using ready/reply protocol for asynchronous communication and bus request/grant protwol for bus communications. 
 Completing an associative processor design, with the implementation ofi write, multiple-match read, 
and other associative operations.  COMPONENTS For the most part, the primitive components available 
in the simulator are closely related to standard component types. Most of the classes and particular 
components dwectly available are shown in the functional listing below. Functional Index Category Elements 
Gates And Nand Nor Not Or I Schmitt-trigger T-gate Tfi-state-bttflkr Xnor Xor Multiplexer MUX2 MUX4 MUX8 
Mux16 MUX2X4 MUX4X4 Mux16x4 Registers I Latch Register Shift Ram s I Ram16x4 ... RaIn16384x8 1 Rem s 
I Rom16x4 ... Rom4096x64 Timing Cable Clock Gate One-shot Power-on Sync InrW/Outtmt I Disk-unit Printer 
Manual Inputs Pulser Switch Instrumentation Byte-probe Byte-probe-h I Hex-probe Hex-probe-h I ProbeLogic-anahzer 
Scm Seven-segment Time-probe Micros Microcomputer Microprocessor Animation Cubix Disk Droid Gantry-robot 
Gemini Hexobot Links Taurus X-stepper Y-stepp Miscellaneous I Byte-in Byte-out File-in File-out Pipe-in 
Pipe-out Sound Standard-out Tape Pseudo Alias Define End Endef I Function Module Some of the functional 
components are significantly higher level than the gate and register levels. These include the microprocessor, 
microeompttter, disk-unit and function components. The Disk-unit is an asynchronous device that provides 
262,144 bytes of disk space. The Disk-unit allows random access among the tracks and sectors provided, 
and sequen­tial access within seetors. The Disk-unit has 13 inputs and 13 outputs, and accommodates up 
to five, tape-like, exter­nal files. The Function components are used when it may neither be feasible 
nor desirable to define networks down to the prim­itive component level. Instead, it may be desirable 
to specify the component in a programming language. CONCLUSIONS Engineering workstations coupled with 
simulation give students an opportunity to complete sophisticated designs. l%e tools we currently have 
provide some powerful charaeteristies, but many additional tools await develop­ment or integration into 
this computer-assisted design environment. This laboratory demonstrates the eflkctiveness of using simulation 
on general purpose comptttem to give unrivaled laboratory experiences. This demonstration can be a step 
towards supplanting future requests for specialized labora­tory equipment, substituting instead, the 
flexibility and visualization atlbrded by a computer-assisted design and validation environment. ACKNOWLEDGMENT 
 The author would like to thank Dr. John Fonsyth for his contributions to the NSF proposal and to the 
continued development of the course this laboratory supports. REFERENCES <RefA>1. <SinRef><author>D. Skrien </author>and <author>J. HoSack</author>, 
<title>A Multilevel Simulator at the Register Ransfer Level for Use in an Introductory Machine Organization 
Class</title>: <journal>ACM SIG(XE Bul­letin</journal>, <volume>Vol. 23, No. 1</volume>, pp. <pages>347-351</pages>, <date>Mamh, 1991</date></SinRef>. 2. <SinRef><author>F. Tango</author>~ <title>The Role of the Computer 
Architecture Simulator in the Laboratory</title>, <journal>ACIU SZGCSE Bul­letin</journal>, <volume>Vol. 22, No. 2</volume>, pp. <pages>5-10</pages>, <date>June, 1990</date>. 
</SinRef> 3. <SinRef><author>M. Singh</author>, <title>Role of Circuit and Logic Simulators in EE Curriculum</title>, <journal>IEEE Trans. Educ</journal>.,<volume> vol. E-32, No. 
43 </volume>pp. <pages>411-414</pages>, <date>August 1989</date></SinRef>. 4. <SinRef><author>J. G. Vaucher </author>and <author>P. Duval</author>, <title>A Comparison of Simula­tion Event List Algorithms</title>, 
<journal>Comm. ACM</journal>, <volume>vol. 18, No. 4 </volume>pp. <pages>223-230</pages>, <date>Apd 1975</date></SinRef>. 5. M. H. McDougall, Simulating Computer Systems--Techniques 
and Tmlsv The MIT Press, Cambridge, Massaehttsetts, 1987. 6. A. Miczo, D@tl Logic Testing and Simulation, 
I-kuper &#38; Row, New York, 1986. 7. P. Thomas, MICROM A Microprogrammed Com­puter: ACM SIGCSE Bulletin, 
Vol. 23, No, 3, pp. 11-20, September, 1990. 8. J. P. Hayes, Computer Architecture and Organization, 
2nd cd., McGraw-Hilt, New York, 1988. 9. G. Scragg, Most Computer Organization Courses are Built Upside 
Down; ACM SIGCSE Bulletin, Vol. 23, No. 1, pp. 341-346, March, 1991.  </RefA>
			
