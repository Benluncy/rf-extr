
 A Layoul Slralcgy for VI,SI Which Is Provably Good t I Extendcd Abstract) Frank Thomson l.eighton 
Laboratoo' for Computer Science Massacht,selts Institute of TechJ~ology Cambridge, Massachusetts 02139 
 Abstract: In this paper, we introduce a new framework 2) tile upper bounds do not appear to be achievable 
in within which to study VI.S1 layout problems. The frame- practice without tile use of exponential-time 
work is based on a straightforward generalization of the algorithms. l.ipton-Tarjan notion of a phmar 
separator and, tmlike In this paper, we attempt to resolve these deliciencies previous approaches, leads 
to universally close upper and by introducing a new framework (not to be confused with lower bounds on 
the layout area and crossing number of a new model) within which to study VLS1 layout problems. an arbitrary 
network. In addition, the framework permits The framework we propose is based on a straightforward simple 
proofs of results previously thought to be difficult generalization of tile Lipton-Tarjan notion of a 
planarand is suitable for use with good bisection width heurisitcs. separator and is an improvement over 
existing frameworks in that it leads to universally close upper and lower bounds 1. Introduction for 
the layout area and crossing number of an arbitrary network. In addition, tile framework permits simple 
The problem of embedding a graph in a 2-dimensional proofs of results previously thought to be difficult 
and is grid with minimum area, minimum number of edge suitable for use with good bisection width heuristics. 
crossings and/or minimum maximum edge length has gained a great deal of attention in the recent literature 
The paper is divided into 8 sections. In section 2, we [IW79, T79, MR79, BK80, l_80a, MC80, V80, B81a, 
review some basic definitions and present a brief history of KLLM81, L81b, LM81, LSS1, PRS81, RSS1, V81]. 
As a some of tile recent advances made on the layout problem. result, much has been learned about the 
design and For the purposes of illustration, we include an example of analysis of efficient chip layouts 
for Very Large Scale an N-node graph with layout area O(NlogN) but for which Integration (VLSI) circuits. 
In addition, this work has the best general procedures known produce layouts with provided insights into 
such fields as models of area at least ~2(N2/log4N). It was the discovery of such graphs that led us 
to consider alternate frameworks for computation, analysis of algorithms, information theory, computing 
the layout area of VLSI networks. combinatorics and topology. Considering the widespread application 
of this research, it is unfortunate that much of In section 3, we define the notions of a decomposition 
it has been plagued by at least two important deficiencies: tree and a 21/2-bifurcator, and show that 
the layout area A 1) the lower bounds are often existential in nature and of any N-node graph G satisfies 
hence, although they may not be improwlblc in ~2(F 2) <_ A <_ O(F21og2(N/F)) general, they may be very 
bad in specific instances, and where F is the minimtnn 21/2-bifurcator for G. In addition, we show how 
to improve the upper bound in order to prove that A = O(F 2) for large classes ofgraphs. +This research 
was supported in part by a Bantrell Fellowship and in Such an improvement in the upper bound is not always 
part by I)ARPA contract #N00014-80-C-0622. possible, however. In fact, by extending the lower bound techniques 
which we developed in [L81a,L81b], we will (in Permission to copy without fee all or part of this material 
is granted section 4) construct graphs for which A = O(F21og2(N/F)) provided that the copies are not 
made or distributed for direct commercial advantage, the ACM copyright notice and the title of the for 
any N and F. Thus the O(log2N) gap between the publication and its date appear, and notice is given that 
copying is by upper and lower bounds for the layout area of graphs with permission of the Association 
for Computing Machinery. To copy O0Â¢"/2)-separators observed by Leiserson [LS0a] and otherwise, or to 
republish, requires a fee and/or specific permission. Valiant [V81] is actually an O(log2(N/19) gap which 
occurs throughout the entire spectrum of graphs (at least as measured by 21/2-bilhrcators)! &#38;#169; 
1982 ACM0-89791-067-2/82/005/0085 $00.75 85 In section 3c, we show how to embed any N-node graph G with 
an (/~ 21/2)-bifurcator in an O(t:21ogF)-node tree of meshes. This result lms implications both for configurable 
layouts (see [RSI,SS/,BL82]) and for crossing number arguments. For example, we will show that the crossing 
number C of any N-node graph G satisfies fl(F 2) < N + C <_ O(F2log(N/F)) where F is the minimum 2t/2-bifurcator 
of G. These bounds will be shown to be tight in section 4, thus conth'ming the close relationship between 
area and crossing number observed in [t.81a,gSlb]. In section 3d, we prove universal upper and lower 
bounds for the maximum edge length of any layout of an arbitrary graph. Although these bounds are also 
existentially tight, they are not nearly as close to one another as are the corresponding bounds for 
area and crossing number. In fact, close bounds are not even known for the special case of trees. In 
section 4, we define the e.xpander-comlected mesh and the expander-connected mesh of trees. The expm~der- 
connected mesh will be shown to achieve the universal lower bounds on layout area, crossing number and 
m~Lximum edge length for any N and F while the expandcr-connected mesh of trees will be shown to achieve 
the corresponding universal upper bounds. In section 5, we will show how to use a provably good bisection 
width heuristic in order to produce layouts with provably good area and crossing number. Although there 
are no bisection width heuristics which are known to be provably good, there are several which are known 
to do quite well in practice [KL70,B77,SCC77,B82,FM82,R82]. It is hoped therefore, that these results 
will eventually lead to the development of good heuristics for laying out VLSI networks. We conclude 
in sections 6 through 8 with some remarks, acknowledgements and references. 2. Preliminaries (2a) Definitions 
The la.)'out problem for a gr~,ph G is the problem of Iinding an embedding of G in a rectangular grid 
which has minimum: l) area, 2) nunfl~cr of edge crossings, 3) maxinmm edge length, and 4) total edge 
length. By a rectangular grid, we mean a collection of horizontal and vertical tracks which are spaced 
apart at unit intervals. An embedding or layout of a graph G in a grid is an assignment of the nodes 
of G to points in the grid where horizontal and vertical tracks intersect, together with an assignment 
of d~e cdges of G to paths in the grid. The patios are restricted to lbllow along grid tracks and are 
not allowed to overlap for any distancc (although a vertical path segment may cross a horizontal path 
segmen0. In addition, paths are not allowed to cross nodes to which they are not incident. The constraints 
are similar to those found in the Manhattan or Thompson models of routing and are consistent with 2 or 
3-layer VLSI technology. The layout area of an embedding is the product of the number of vertical tracks 
and the number of horizontal tracks which contair, a node or path segment of the graph. The cross#lg 
number of an embedding is the number of points at which two edges cross. The max#hum edge length of a 
layout is simply the length of the longest edge in the layout. (This is measured in terms of unit grid 
segments.) The total edge length or wire area is the sum of all the individual edge lengths. For exaraple, 
the embedding of the complete graph on 4 nodes shown in Figure 1 has area 15, crossing number 3, maximum 
edge length 8 and wire area 18. Figure 1: A layout of the complete graph on 4 nodes. We shall often find 
it convenient to refer to tile minimum amount of layout area required to embed a graph in the grid as 
the layout area of the graph. Similar interpretations will be assumed for the crossing number, max#hum 
edge length and wire area of a graph. We will also make reference to the bisection width of a graph. 
The bisection width of a graph is the minilnum number of edges which must be removed fi'om the graph 
in order to disconnect it into t~vo equal-sized subgraphs. (Two subgraphs are said to be equal-sized 
if the number of nodes in one differs by atmost one from the number of nodes in the other.) Throughout 
the paper, we shall be concerned solely with graphs with maximum node degree 4. This restriction is solely 
for the purpose of simplicity as all of the results in the paper can be proved for graphs with arbitrarily 
bounded node degree as well. In addition, several of the results .dso hold for graphs with unbounded 
node degree provided that an appropriate model for embedding such graphs in a grid is chosen. 12b) Background 
The layout problem is motivated by the need to build small, inexpensive chips which are capable of doing 
a large amount of computation quickly and reliably. Although the model for VLSI chip design used in this 
and other papers has been greatly abstracted and simplified, it still retains several of the most imporlant 
constraints and cost measures that chip designers must face in practice. Thus the layout problem is potentially 
important from both a theoretical and a practical point of view. In what follows, we review some of the 
recent progress made on this problem by theoreticians. In 1977, Lipton and TaJjan [LT77] proved that 
any N- node planar graph can be partitioned into two subgraphs of approximately the same size by removing 
at most O(N t/2) nodes. Sholtly thereafter, both Leiserson [L80a] and Valiant [V81] noticed that tiffs 
result could be exploited by divide-and-conquer techniques to produce area-efficient VLSI layouts for 
planar graphs. In particular, they showed that any N-node planar graph can De elnbcdded in a grid of 
area at most ()(Nh~gZN). In addition, Leiserson generalized tile notion of a Lipton-Tarjan planar separator 
to encompass larger classes of graphs. In particular, he defined lhe notion of a separator for more general 
classes of grvphs as follows. l lcfi,fition I (Leiserson [[.80a]): Let S be a class of graphs closed 
ureter the sulw'aph relatiov; that is, if G is" an element of S, and G' is a subgraph of G. thcn G' is 
also an element of S. An fOO-separator theorem for S is a theorem of the following form. There exLs't 
constants a S and c S where G< aS, < 112 and c S > 0 such thai ifGis'an n-vertex graph in S, then by 
removing at most cJ'(n) edges. G can be partitioned hlto disjo#,t subgraphs G l and G 2 having ~,n and 
(l-a)n vertices respectiveb" where a S < a < l-a S . Since it is usually difficult, if not impossible, 
to satisfy the clostlre constraint when S contains nonplanar graphs (e.g., a cubc-connected-cyclcs graph 
[PV79]), this definition is not the one which is commonly used throughout [L80a] nor in late/" papers 
[BL81,L81a,I.81b,I.R81]. In Pact, tile definitions used or assumed for separators appear to vmy widely 
from paper to paper, depending on the application. For example, a definition such as the following is 
fi'equcntly assumed. Definition 1 ': An N-node graph G is said 1o have an J(.O-separalor if. by removing 
at most f(N) edges, it can be partitioned into two (N/2)-node subgraphs, each of which also has an f(x)-seTarator. 
Although the two definitions are both generalizations of lhe [.ipton-Tarjan separator for planar graphs, 
they are subsianlially different in general. For example, the first definition is more usefifl for proving 
layout-related theorems (see [B1.82], for example) while tile second is more useful lor establishing 
separators for specilic classes of graphs. (For clarity, we assume the latter definition throughout the 
remainder of this paper.) Although tile application of divide-and-conquer strategies to wire routing 
problems Js not difficult, the notion of a separator appeared to be fundemcntal in that it could be used 
to produce good layouts for certain graphs and in that it seemed to capture tile essence of the divide- 
and-conquer paradigm (as least as it pertains to VLSI). For example, Leiserson showed that ifa class 
of graphs has an .flag-separator theorem, then any N-node graph in the class has layout area at most 
A(N) where A(x) depends on f&#38;9 as shown in Table 1. Table 1 Upper Bounds on Layout Area j~x) A(x) 
O(xa), ~x > 1/2 O(x 2a) O(xl/~ O(xlog2x) O(xa), a < 1/2 O(x) Thompson [T80] and Leighton [L81a,L81b] 
have found examples of graphs for which the tipper bounds in Table 1 are tight. Thus the worst-case performance 
of the divide- and-conquer layout algorithm developed by Leiserson in [L80a] cannot be improved by more 
than a constant factor when applied to tile entire class of graphs with a specified separator. Further, 
it has been widely believed (although it has never been specifically stated in the literature) that the 
layouts produced by the divide-and-conquer algorithm are optimal (to within a constant factor or, in 
the case of O(xl/2)-separators, to within an O(log2N) factor) provided that tile separator which is provided 
as input is, itself, optimal. This belief is obviously true for graphs with O(x~)-separators where a 
< 1/2 and seemingly straight- forward for graphs with larger separators. Indeed, it is certainly tree 
that an N-node graph with layout area A(N) has an A(N)t/:-bisector (just cut the layout along the shorter 
dimension) and it appears at first glance as though an inductive repetition of this process could produce 
an O(A&#38;)t/2)-separator for the graph. Thus one might easily conlcude that the separator results are 
universally tight and theretbre that they describe, as well as possible, the layout results obtainable 
from divide-and-conquer algorithms. ]his is not file case, however. A closer look at tile seemingly stniighlforward 
argument just mentioned reveals that, a priori, the separator of a graph could be much larger than tile 
square root of the area. For example, consider the N-node graph S N which consists of N/logN disjoint 
(logN)-node expander graphs. (An m-node expander graph is a graph for which any subset of k nodes is 
linked via O(min(k.m-k)) edges to the m-k nodes outside the subset. That such graphs exist is well-known 
[V75,GG79,B81b].) Since each (logN)-no.de expander graph can be trivially laid out in O(log2N) area, 
it is clear that the layout area of S N is at most O(NlogN). In what follows, however, we will show that 
the class of graphs {S N} does not have an O(x/log2x)-separator and thus tile best layout which could 
be produced for S N by separator-based divide-and-conquer techniques lntlst have more than ~(N2/log4N) 
area. (A weaker version of this result was initially discovered jointly with Jim Saxe.) Theorem 1: The 
class of graptts {S N} does not have an O( x/Iog2 x)-separator. Proof: Assume for the purposes of contradiction 
that {SN} has an O(x/loJx)-separator. Then there is some constant c such that for every N, the graph 
S N has an (cx/loJx)-separator. Thus by the removal of at most cN/log2N edges, S N can be partitioned 
into two (N/2)-node subgraphs, each of which can be pai-titioned (by the removal of cN/[21og2(N/2)] edges 
apiece) into two (N/4)-node subgraphs, and so on. At the ith step in the partitioning or s N, 2 i-I subgraphs 
each with N/2 il nodes are partitioned into 2 i subgraphs each with N/2 i nodes by the cumulative remow~l 
of cN/log2(N/2 i-1) edges. Thus for any k, it is possible to partition S N into 2 k subgraphs each with 
N/2 k nodes by the removal of at most k ~;~ cN/log2(N/2 i-l) edges. i=# For k = logN -loglogN+ 1, this 
number must be at least (N/IogN) (fllogN) = fiN where ,8 is a constant such that any partition of an 
m-node expander graph into subgraphs with am and (l-a)m nodes for 1/3 < a < 2/3 lnust cut at least ,sin 
edges. This is due to the fact that any partition of S N into (Io~:N/2)-node subgraphs must partition 
each (logN)-node c, xpander graph into pieces such that tile union of some of those pieces has between 
logN/3 and 21ogN/3 nodes. Thus -~ cN/log2(N/: il) > 'SN iiz t jo] a,- I,,,Jo~,v Ã· l ~_, "(logN -i+l) 
-2 > ,8/c d=tt z~, j-2 > ,8/C ~.~ j-2 > ,8/c This is untrue for large N, however, since ,~-2 = O(l/loglogN) 
which tends to zero as N incre~s~7?'Thus S N does not have an O(x/logex)-separator [] By bisecting as 
many of the (logN)-node expander graphs of S N as possible at each step in the recursive separation of 
S N, it is easy to prove an O(xilogx)-separator theorem for {SN}. (In fact, wc could even do slightly 
better but it is not worth the effort.) This is a factor of O(logx) smaller than the corresponding O(x)-separator 
theorem which can be derived from a naive separation of S N. (By a naive separation, we mean one which 
does not cut any edges at all in the top levels and only when absolutely necessary in the lower levels.) 
The layout area corresponding to a naive separation is substantially smaller, however. Thus it is apparent 
that the notion of a separator is not entirely adequate for use with divide-and-conquer techniques in 
VLSI. In the next section, we propose a new fi'amcwork within which divide- and-conquer techniques can 
be used to iliad provably good (up to a tiactor of O(log2N) in area) layouts for any graph. 3. The New 
Approach 311e recursive decomposition of a graph into smaller and smaller subgraphs as defined by a separator 
motivates the definition of a decomposition tree. In particular, we say that a graph G has an (F 1, F 
2 ..... Fr)-decomposition tree if G can be decomposed into two subgraphs G O and G 1 by removal of at 
most F 1 edges from G, both G o and G! can bc decomposed into two subgraphs by removal o1" at most k 
2 edges li'om each, and so on mail each subgraph is either empty or an isolated node. For example, see 
Figure 2. /,\  / \ ,, /,\ a'Â°W~" . t s # I t i*o lcx+ed node i, _ --_.-.v ~._,o , 6;...,, 'F Figure 
2: An (F 1, F 2 ..... F~)-decomposition tree. As we might expect, the notion of a decomposition tree 
is very similar to that of a separator. For example, it is easily checked that an N-node graph has an 
f(x)-separator if and only if it has an (J(N), f(NI2) ..... f(4), f(2))- decomposition tree. The "only 
if" chitin follows from Definition 1' while the "if" claim follows fiom the observation that such a decomposition 
tree has precisely r=logN levels. Although we have not placed any constraints on the size of the non-leaf 
subgraphs in an arbitrary decomposition, it is not difficult to see that subgraphs in the ith level of 
a logN-level decomposition tree must have precisely N/2 i nodes and thus each subgraph in the tree is 
decomposed into two equal-sized subgraphs. (We will consider "balanced" decompositions further in section 
3m) The notion of a decomposition tree is substantially more flexible than that of a separator, however, 
since it allows consideration of many other kinds of graph decompositions. For example, in this paper 
we will be particularly interested in graphs which have an (F, F/2 It2, F/2, 1.'/23/2 ..... 2, 2I/2)-decomposition 
tree. Henceforth, such graphs will be said to have an 2 I/2- b~u'calor of size F or, more simply, an 
(F,21/2)-b~treator. Since the decomposition tree of an N-node graph must have at least logN levels, it 
is clear that F >_ N 1/2. For convenience, we shall also assume that F < N/2 for every graph. By setting 
F = O(N t/2) and f(x)-= O(xt/2), it becomes clear that the notions of an (Â£ 2t/2)-bifurcator and an f(x)-sepan~tor 
both generalize that of a planar separator. For larger values of F and f(~x), however, the notion of 
an (F, 2t/2)-bifurcator differs substantially from that of an J(a)-separator. This difference can be 
observed for f(x) )) ~(x 1/2) by setting F=J(N) and checking that f(N)/2 V2 )) f(N/2 i) for large I". 
 Thus we should not be surprised to learn that there are N-node graphs (such as S N in section 2) which 
have (f(N), 2t/2)-bifllrcators but which do not have f(x)-separators. As we demonstrate in section 3b, 
however, N-node graphs with (fiN), 2t/2)-bifilrcators can be laid out in nearly the same amount of area 
as N-node graphs .vith J(x)-separators! Before proving this result, however, it is worthwhile to consider 
the problem of transforming an arbitrary decomposition tree into one which is balanced. (3a) Balanced 
Decomposition Trees A decomposition tree of a graph G is said to be balanced if each subgraph in the 
tree G w is the father of two equal-sized subgraphs Gco o and G~o I. Moreover, the decomposition tree 
is said to be full), bahmced if, in addition, the number of edges of G incident to precisely one node 
in Gee o differs by at most an additive constant from the number of edges of G incident to precisely 
one node in Gee 1. Similar definitions are assumed for 2 t/2- bifurcators. In what follows, we will examine 
the cost of translbrming an arbitrary decomposition tree into one which is fully balanced. Surprisingly, 
we will find that such a transformation can usually be accomplished at little or no cost. We commence 
with somc useful combinatorial lemmas. The first is a recent result due to Goldberg and West. Lemma I 
(Goldberg and West [GW82]): Given any ordering of n balls in a line, n i of which ate colored i for l<i<k, 
it is possible to break the lhte in at ntost k places so that the union of the halls conta#wd #1 every 
other segment co,,tains precisely [nil2 J or [~,i/27 balls which are colored i for l<_i<k. Proof sketch: 
The proof for the case when k<2 is straightl0rward and appears in [BL82]. The proof for the general case 
k>2 is substantially more difficult and can be found in [GW82] [] It is worth noting that the proof of 
Lemma 1 in [GW82] is constructive and suggests fast algorithms for finding the break points. For example, 
there are linear-time solutions when k = 2 and 3. It is also worth noting that the result is tight. For 
instance, it is easily checked that the sequence of balls b l,b 2 ..... b2k where balls b2i. l and b2i 
are colored i for l<i<k requires at least k breaks. In the following lemma, we recast the Goldberg-West 
result in terms of complete binary trees. Once in this form, it will be a simple matter to apply the 
result to balancing decomposition trees. Lemma 2: Consider a forest of complete binary trees whose leaves 
are colored arbitrarily with k colors. Let n i be the number of leaves colored i for l<i<k and let h 
be the height of the largest tree. Define the level era node v in the forest to be h re#ms the length 
(in edges) of the shortest path from v to a leaf Then by removing at most k nodes(as well as the 2k #mident 
edges)from each non-leaf level of the forest, it is possible to produce a new forest of complete binary 
trees, some subset of which contains precisely ~ni/2 j or 1~i/27 leaves colored if or l<i<k. Proof." 
Order the trees from left to right in a line. (Any ordering will suffice.) Order the leaves of each tree 
from left to right in a line to be consistent with the canonical leveled drawing of a complete binary 
tree. (For example, see Figure 3.) By af, plying Lcmma 1 to the induced lell-to-right ordering on the 
leaves of the forest, it is possible to break the line in at most k places such that the union of the 
leaves contained in every other segment contains the desired number of leaves of each color. For each 
break, remove the nodes (and incident edges) which are (simultaneously) ancestors of the leaf immediately 
to the left of the break and the leaf immediately to the right of the break. It is easily seen that at 
most one node is removed from each non-leaf level of the forest for each break and thus at most k nodes 
are removed from each non-leaf level in total. In addition, the removal of the common ancestors of the 
leaves neighboring a break divides the associated tree into two complete binary trees, one on each side 
of the break. Thus the removal of all such nodes produces a forest of complete binary trees, subsets 
of which correspond precisely to the sets of leaves between pairs of adjacent 89 break points. Thus the 
union of the subsets of trees corresponding to every other segment of leaves contains the desired number 
of leaves of each color [] As an aide in deciphering the proof of Lemma 2, we have included an illustration 
of the procedure in Figure 3. In this example, the forest initially consists of 4 complete binary trees 
with 7 leaves colored 1, 4 leaves colored 2 and 4 leaves colored 3. Figure 3a shows a leveled drawing 
of the forest together with 3 breaks (denoted by dashed vertical lines) in the line of leaves. It is 
easily checked that the union of the first and third intervals of leaves (counting fiom left to righ0 
contains 3 leaves colored 1, 2 leaves colored 2 and 2 leaves colored 3. In Figure 3b, we have marked 
the internal nodes which are to be removed with an X. After those nodes (and the incident edges) are 
removed, we have the forest of complete binary trees shown in Figure 3c. This forest can then be easily 
partitioned into two subforests of complete binary trees, each of which contains half of the leaves of 
each color. (a6 I 2, 2 3 I I | ! 2 gl I 3 112., I 3 / I / 1 e0 aI  (b) , , ,:, ,,I$ ll2., 3 /e 1 I| 
jI I I I | e $ Figure 3: An illustration of the procedure described in Lemma 2. Theorem 2: Let G be any 
N-node graptl with an (F I , F 2 ..... Fr)-decomposition tree T. It is possible to construct a fidly 
balanced (F 1' , F 2' , .... FlogN')- decomposition tree T' for G where F i' = 6 ~. F s for l<_i<_logN 
. s=,. Proof sketch: Let F be a forest of complete binary trees initially consisting of the decomposition 
tree T. Color the leaves of T in two colors according to whether or not the associated subgraph of G 
is empty. Apply Lemma 2 to F, removing the indicated nodes and edges of T. For each node that is deleted 
from T, remove the associated v- edges from (3. Note that at most 2~,F s < F 1' edges are $=1 removed 
from G by this process. Also note that G is divided into two disjoint and equal sized subgraphs by the 
removal of these edges. Further, each subgraph corresponds in a natural way to a subset of complete binary 
trees in F. Consider one such subgraph G o and color the leaves of the associated forest of binary trees 
F 0 in 6 colors as follows: color 1 if the subgraph corresponding to the leaf is empty, and color 2+i 
if the subgraph corresponding to the leaf is an isolated node which is incident to i edges which have 
been previously removed (0<__i_<4). By applying 1.emma 2 to 1" o, it is clear that G o can be decomposed 
into two disjoint and equal-sized subgraphs Goo and GOl such that the number of edges of G incident to 
precisely one node in Goo differs by at most 1+2+3+4 ----I0 from the number oredges of G incident to 
precisely one node in Go/. Since at most 6 nodes were removed fiom each level of F o and since l" o contains 
no nodes in the top level of 7; we can conclude that at most v" 6~f s = F 2' edges were removed fl'om 
G 0. By applying the preceding argument recursively, the desired result is quickly obtained. The only 
subtlety is to observe that a complete binary tree in a forest corres-ponding to a subgraph in the ith 
level of T' has precisely 2r+ I-i leaves and thus can have height at most r+ 1 -L v- Thus at most 6~F 
= F i' edges are removed fi'om any s". subgraph in the ith level of T' in order to produce subgraphs 
in the (i+l)st level [] Theorem 3: If a graph G has a 2t/2-bifureator of size F, then G has a fully balanced 
2l/Lbifurcator of size 6(2 + 21/2)F. We are now ready to prove the balancing theorems for Proof" The 
result follows immediately from Theorem 2 decomposition trees. These rest,Its were obtained in and the 
observation that ~o. 2 "i/2 <_ 2+21/2 [] collaboration with Bhatt and Leiserson and are generali-zations 
of results found by Leighton in [LSla, L81b] and by It is worth pointing out some facts about Theorems 
2 Bhatt and Leiserson in [BL82]. and 3 before proceeding. Filet, the results are completely constructive 
(i.e., there is a fast algorithm for transforming an arbitrary decomposition tree into one which is fully 
balanced). Second, the results could have been proved without the full use of Lemma 1, even for graphs 
with an arbitrarily bounded maximum node degree. In particular, Theorem 2 could have been proved using 
a modified version of the 3-color result while Theorem 3 needs only a modified version of the 2-color 
result. Third, Theorems 2 and 3 can be substantially generalized by considering larger classes of decomposition 
trees and broader notions of balancing (e.g., we might require that an initial coloring of the nodes 
of the graph also be "balanced" by the decomposition). Finally, the results are very useful. Not only 
do they facilitate the proofs of several of the results in this paper, but they are also crucial to the 
three-dimensional layout strategies recently developed by Leighton and Rosenberg in [LR82]. (3b) Universal 
Bounds on Layout Area Using a straightlbrward divid:-and-conquer strategy, it is not diflicult to construct 
an ~trca-eflicient layottt for a graph given its decomposition tree. We state this result more formally 
in the Ibllowing theorem. Theorenl 4: Given a graph G and an (F 1 ..... Fr)-decomposition tree fi~r G. 
it is possible to construct a layout for G requir#tg area at most Theorem 5: If F is the size of the 
m#t#num 2 I/2- bifurcwtor of an N-node graph G, then Ihe m#limum layout area A of G satisfies ,':2 <_ 
A <_ O(F2log2(N//9). Proof." The lower bound follows fiom the straight-forward obscrv:ltion that any 
graph with layout area d can be partitioned into two (not necessarily equal-sized) subgraphs, each with 
layout area at most A/2 by the removal of at most A(/2 edges. (Just cut the layout in half along the 
shorter dimension.) By applying this fact repeatedly, it is clear that a graph with layout area A has 
an (A t/2' (A/2) 1/2, (A/4) I/2 ..... 2t/2)-decomposition tree. By defnition, this means that G has an 
(A t/:, 21/2) - bifurcator. If F is the minimum 2t/Lbifurcator for 6',, then clearly A 1/2 >_ F and thus 
d >_ F 2 , as claimed. ]he upper bound can be established as a consequence of Theorems 3 and 4. For example, 
if G has a 2 t/2- bifi~rcator of size F, then by Theorem 3, G has a balanced 2l/:-bifurcator of size 
6(2+fl/':)F. Thus G has an (F t ..... FlogN)-decomposition tree where F i = 6(2 + 21/2)F/2 (i'1)/2 for 
i < 2log(N/F) and F i = 0 for i > 21og(N/F) 'his observation follows from the fact that the subgraphs 
on the ith level of a balanced decomposition tree have at most N/2 i'l nodes and 4N/2 i edges. Thus for 
4 (.~2~) 2. Proof." We will show by induction on r that the side length of the constructed layout is 
at most 2 ~21.i/2JFi. The result is clearly true for r=/and 2. In what follows, we assume that the result 
is tree for r-2 in order to prove it true for r. By removing at most Ft+2~ ) edges from G, it is possible 
to decompose G into 4 subgraphs, each of which has an (F 3, F 4 ..... Fr)-decomposition tree. By induc- 
tion, each of these subgraphs can be laid out in a square grid with side length at most 1"-2 . I,~ 2 
~2Li/2JFi+2 = Z2Li/2Jri . t~l i=3 By embedding the 4 subgraphs in a 2 by 2 fashion and inserting the 
Fi+2F 2 edges that were originally deleted from G (at most two new horizontal and vertical tracks are 
needed to insert each edge), it is possible to construct a square layout for G with side length at most 
~ ' 2 2(Fi+2F2) + 2 ~,2LV2JFi = 2 Z2 t'i/ JF i . This completes the induction [] By restricting our 
attention to 21/2-bifurcators, it is possible to prove universally close upper and lower bounds on the 
layout area of a graph. This result is stated formally in the following theorem. i=21og(N/F), the proposed 
value of F i = 6(2+21/2)F/2(i'1)/2 = 12(I+2Z/2)F2/N > 4F2/N = 4N/2 i is large enough to allow removal 
of all the edges in the subgraphs on that level. Values of F i for i > 2log(N/F) can thus be set to zero. 
Applying Theorem 4, we can now conclude that the layout constructed for G has area at most O(F21og2(N/F)) 
[] It is worth noting that the preceding proof is constructive in that once an (F,21/~-bifurcator for 
G is known, it is possible to efficiently construct a layout for G requiring at most O(F2/og2(N/F)) area. 
We can often do better, however. For example, an N-node graph which has an O(x")-separator for a)I/2 
also has an (F,21/2) - bifurcator for F=O(N a) but, by Theorem 4, requires only O(F 2) area to be embedded 
in a grid. Similarly, an N-node graph with an O(xa)-separator for a<l/2 has an (F,21/2)-bifurcator for 
F= O(Nt/2) and can be laid out in linear area. These cases have been studied in detail by Leiserson in 
[L80] but represent only two of the many classes of graphs which can be laid out in O(F2) area. Such 
improvements are not always possible, however. For example, in section 4 we will describe a class of 
N-node graphs with (F,2t/2)-bifurcators which require at least fa(F2loge(N/F)) area for every N and F. 
Thus the O(log2N) gap between the upper and lower bounds for the layout area of graphs with O(xt/2)-separators 
observed by Leiserson and Valiant is actually an O(log2(N/F)) gap which occurs throughout the entire 
spectrtun of graphs (at least as measured by 21/2-bifilrcators)! (3c) l:hnheddings in the Tree of Meshes 
In [I,81a], we showed how to embed any N-node planar graph in an O(NIogN)-node tree of meshes. In Theorem 
6, we generalize tiffs result to arbitrary graphs. First, however, we review the notion of a tree of 
meshes. The tree of meshes is tbrmcd by replacing each node of a complete binary tree ~ith a mesh and 
each edge by several edges which link the meshes together. More precisely, the root of the binary tree 
is replaced by an nxn mesh (where n is assumed to be a power of 2), its sons are replaced by n/2 x n 
meshes, their sons are replaced by t~2 x n/2 meshes, and so on until the leaves are replaced by lxl meshes. 
In the place of each right edge of the binary tree (i.e., one which links a node to its right son), we 
link the rightmost column of nodes in the mesh corresponding to the father to the topmost row of nodes 
in the mesh corresponding to the right son. Similar replacements are made for left edges of the binary 
tree. In both cases, the connections are made so as to preserve the column and row order of the nodes 
and to insure that the resulting graph is planar. It is not difficult to see that the resulting graph 
(which we call the nxn tree of meshes Tn) has N= 2n2lognÃ· n 2 nodes. For example, we have drawn T 4 in 
Figure 4. Figure 4: The 4x4 tree of meshes T 4. Theorem 6: Any graph with an (F, 21/2)-bifurcator can 
be embedded in an O(l:2logF)-node tree of meshes, Proof sketch: Let G be an N-node graph with an (F,21/2)-bifurcator. 
In what L llows, we will show that G can be embedded in T n for n=O(F) by assigning the nodes of G to 
the bottom levels of 7"t~ and using the meshes of T n as switching networks to link up the edges of G 
in the correct manner. Before doing the embedding, however, we must invoke Theorems 2 and 3 in order 
to find a fully balanced (F 1 ..... FlogN)-decomposition tree for Gwhere /:) = 6(2+21/2)F/2 ql)/2 for 
I < i < loiN. By fully balancing the decomposition, we have made it possible to find good upper bounds 
on the number of edges incident to pred.isely one node in a subgraph in the decomposition. [:or example, 
let H i denote the maximum number of edges incident to precisely one node in G' where G' is allowed to 
range over all subgraphs in the ith level of the decomposition. It is easily seen that Hi=O, 1t2<F 1 
and (applying the analysis in Theorem 2) that Hi~_ I <__ (Hi+lO)/2 + F i for D2. Substituting for F i 
and solving the recurrence, we find that H i < cF/2 i/2 for some constant c and l<i<logN. It is now a 
simple matter (o show that G can be embedded in Tt~ where n=2l/2cF. The first step is to embed the nodes 
of G in the mushes of the (logN)th level of T~. The nodes are embedded in a one-to-one fashion among 
the meshes so that a node contained in the ith leaf (counting from left to right) of the decomposition 
tree is embedded in the ith mesh on the (logN)th level of T n for l<i<logN. The edges of G can then be 
embedded in a natural way by using the upper level meshes of T n as switching networks. It is easily 
observed that any mesh in the flh level of Tt~ is entered from the left by at most Hi4_ 1 edges, from 
the top by at most H i edges and from the right by at most Hi+l edges. The proof is completed by observing 
that the meshes in the ith level of T n have side lengths at least n/'2 i/2 = 21/2cF/2i/2 > 2Hi+ 1" Thus 
the meshes of T n are sufficiently large to serve as switching networks for the edges passing through 
them. As an illustration of this procedure, we have included Figure 5 [] By modifying the standard H-tree 
layout for complete binary trees [MR79], it is possible to lay out (without edge crossings) an O(F21og~)-node 
tree of meshes in at most O(F21og21 ,) area. Thus a good embedding of a graph in the tree of meshes can 
be used to find a good layout for the graph on a chip. In addition, such layouts are interesting because: 
1) they are configurable, and 2) they have a relatively small number of crossings. Configurable layouts 
may play an important role in the automation of VLSI chip fabrication. (For example, see [R81,S81,BL82],) 
Minimizing the number of wire crossings on a chip is also important when designing layouts for VLSI networks. 
Note that any embedding in an O(F2logb)-node tree of meshes can have at most O(F21ogF) wire crossings. 
We state the relationship between crossing number and 2t/2-bifurcators more precisely in the following 
theorem. Theorem 7: If F is the size of the minimum 2 l/2- bifurcator of an N-node graph G, then the 
crossO~g number of C of G satisfies ~2(F 2) < C + U < O(F21og(N/F)). length of an arbitrary graph. In 
fact, such bounds are not Proof sketch: The upper bound follows naturally from even known for the special 
case of trees, the analysis in Theorems 5 and 6. The lower bound follows fi'om the Lipton-Tarjan planar 
separator theorem [LT77]. In particular, the Lipton-Tarjan result can be used to show that the (C+N)-node 
planar graph formed by the introduction of artificial nodes at edge crossings in an optimal drawing of 
G has a 21/2-bifurcator of size O((C + N) t/:') [] The bound in Theorem 7 can often (but not always) 
be improved. For example, we will show that both tile lower and upper bounds are existentia!ly tight 
in section 4. in addition, we will study the crossing number of an arbitrary graph more closely in section 
5. 1   ll-ii switching "F' -ll i' 5+ F' (.F' "- ~,~.=+ 0~) t:) Fs ~l Figure 5: Embedding an arbitrary 
network &#38; the tree of meshes. (3d) Edge Length Considerations Recent work by Bilardi, Pracdli pnd 
Preparata [BPP81] and Chazelle and Monier [CMSII suggests that wire length considerations are very important 
to the design of efficient chips using current (as well as future) VLSI fabrication technology. In particular, 
it is often useful '.o minimize the length of the longest edge in a VLSI layout. Unfmlunately, we do 
not know how to prove universally close upper and lower bounds on the maximum edge We can, however, prove 
universal upper and lower bounds which are existentially tight These bounds are stated in the following 
theorem. The upper bound is a generalization (and a simplification) of a result proved by Bhatt and Leiserson 
in [BLS1]. Theorem 8: If F is the size of the m&#38;imum 2 l/2- bifurcator of an N-node graph G, then 
the max#hum edge length L of G satisfies S2(F2/N) <_ L <_ O(Flog(N/F)/Ioglog(N/F)). Proof sketch: The 
lower bound follows from the observation that W >_ C+N where W is the minimum wire area of G. In Theorem 
7, we proved that C+N > ~(F2). Since there are at most O(N) wires in (7, we can quickly conclude that 
L > ~2(W/N) >_ 9.(Fe/N). The upper bound is more difficult The key idea is to partition the chip into 
channels through which the wires will be routed, q%e chamaels are formed by expanding an O(loglog2(N/F))-node 
H-tree layout so that each edge of the H-tree becomes a channel with width O(Flog(N/F)/loglog(N/F)). 
The nodes of G are then placed in the channels in groups spaced apart by intervals of size O(Flog(N/F)/Ioglog(N/F)). 
Nodes are assigned to groups in a breadth-first menner starting from edges removed in the top levels 
of a balanced decomposition tree for G. (A more precise formulati.3n of the embedding will be inchlded 
in the final draft of the paper.) [] 4. Existential Bounds In this section, we describe classes of graphs 
which achieve tile universal upper and lower bounds descibed in section 3. In section 4a, we define the 
expander-connected mesh and show that it achieves (simultaneously) the universal lower bounds on area, 
crossing number and maximum edge lengtl1 for any N and F. In section 4b, we define the expander-connected 
mesh of trees and show that it achieves tile universal upper bounds on area, crossing number and edge 
length for any N and F. (4a) Upper Bounds for the Expa,der-Co,meeted Mesh Let P, tn denote the graph 
formed by superimposing n 2 copies of an m-node expander graph on m copies of an nxn mesh. More precisely, 
define Pm.n to be the graph consisting of m disjoint nxn meslles which are interlinked with additional 
edges so that for each i and j (l<i,j<_n), the subgraph induced on the m nodes which are in the (i,j) 
position of some mesh is an expander graph. We will call such a graph an expander-connected mesh. For 
example, we have drawn 1"2.4 in Figure 6. The dotted lines represent edges in the expander graphs while 
the solid lines represent edges in the meshes "l " ~Q t Â°A t o.~ ., 1F l k Ik ~, ~.~, e I e +1  l 
Â° [ Qe 6eeJ Figure 6~ The expander-connected mesh P2,4" It is easily seen that P,~, has N=nm 2 nodes. 
In what follows, we will show that the size of the smallest 2 I/2- bifurcator F of P,~., is at least 
f~(mn). We will accomplish this by extending the lower bound techniques developed O , O in [I.,:~la,l.oll)] 
in order to prove ihat the bisection width o1" P, ua is at least $~(inn). Lemma 3: The bisection wMtk 
of l'm.,~ is at least f](mn). Pro,S" Let (i.j.k) denote the (i,j) node of the kth lnesh of Pro.,' In 
addition, let Pma~' denote the graph formed by extending each expander graph of Pro., to a complete graph 
(i.e., to the graph folmed by inserting the edges between nodes (i..].k) and (i.j.k') [br every I<i,j<n 
and l<k.k' <m). In what lbllows, we will use the methods of [L81a,l.81b] to find a lower bound on the 
bisection width of Pm.n" This, in turn, will be used to find a lower bound on the bisection width of 
P,,.n" Consider the embcdding of the complete graph on mn 2 nodes Kin, / ill P,,.,a which links node 
(i.j.k) to node (i' ,j' ,k') via the path (i,j, k) --~(iÂ±l ,j, k) + (iÂ±2,j, k) ..... (i' ,j, k) (i' 
,jÂ±l, k) ---,, (i' ,jÂ±2, k) ..... (i' ,j' , k) -, (i' ,j' ,k') (Note that the notion of an embedding 
used here is different than that defined in section 2a where edges were mapped to edge-disjo#u paths 
in the grid.) A simple counting argument reveals that each mesh edge of Pm.n' is utilized at most O(mn 
3) times by the embedding of K,,m2 while each complete graph edge is used at most 0(tl 2) times. Since 
at least m2n4/4 edges of Kmn2 must cross ally bisection of Kin.e, we Call thus conclude that any biseclion 
of Pm, n' must cut at least ~(mn) mesh edges or at least ~2(m2n 2) complete graph edges. Clearly, any 
bisection of Pm,,~' which cuts ~2(mn) mesh edges must also cut ~2(mn) edges of Pro, n" In what follows, 
we will show that an)' bisection of Pm, n' which cuts s complete graph edges must cut at least ~2(s/m) 
expander graph edges of P.~., thus completing the proof. Consider a bisection of Pnut' which cuts s complete 
graph edges. Let s i denote the number of edges cut in the ith complete graph of P.~n' for l<i<n 2. Clearly, 
s =Sis i. As each node in an m-node conlplcte graph is incident to at most m-I edges, we know that the 
bisection of P ' divides the ith complete graph into subgraphs Ill, I1 which contain at least si/m nodes 
each. Thus at least fl(si/m) edges of the ith expander graph of 1' Dl. ll are cut by tile bisection. 
Summing, we find that the bisection cuts at least ~2(s/m) expander edges of Pm.n in total [] By setting 
tr---O(N/l:) and m=O(F2/N), it is possible to construct an expander-connected mesh with N nodes ) . . 
 and lnininmm 2t/~-bl[urcator F for any N and F such that Q(Nl/2) < F< O(N). Ill what lbllows, we will 
show how to construct a layout for Pm.n ill the grid which achieves (up to a constant) the universal 
lower bounds for area, crossing number and lnaximunl edge length proved in section 3. Theorem 9: 771ere 
is a layout for Pm.n which has area and crossing number at most O(m2n2) = O(F2) and nlaximum edge length 
at most O(m) = O(F2/N). Proof sketch: Embed each expander graph in an O(m) x O(m) grid so that the node 
in the kth mesh is in the (k,k) position of the grid. Position the layouts in a mesh-like pattern '~.3 
be consistent with the meshes in Pro.,' It is now a simple matter to insert the mesh edges without increasing 
the total area by more than a constant factor. It is also easily seen that each wire in the completed 
layout has length at most O(m). The crossing number result follows trivially fi'om the area bound [] 
(4b) Lower Bounds for the Expander-Connected Mesh of Trees Before defining the expander-connected mesh 
of trees, it is usefld to review the definition of a mesh of trees 9 [L81a,L81b]. The Â°-dimensional 
nxn mesh of trees M2, n (where n is assumed to be a power of 2) is defined as follows. Starting with 
an nxn matrix of nodes and adding nodes wherever necessary, construct a complete binary tree in each 
row and colunm of the matrix. The trees should be constructed so that 1) the leaves in each tree are 
precisely the nodes in the 94 corresponding row or cohlmn of the original matrix, and 2) the subgraph 
induced on the nodes in each quadrant is MZ~Â¢2. For example, we have drown MZ4 in Figure 7. The nodes 
in the original 4x,l matrix are represented by dots. The nodes which were added in order to form row 
trees are drawn as small uianglcs while those added to lbrm column trees are shown as small squares. 
Solid lines indicate row tree edge-s while dashed lines indicate column tree edges. i I it I i Â¢ i I 
  d # d I I I I | I I s t / ,, , , , ------~-------~ Figure 7: The 4x4 mesh of trees MZ4 " The expander-connected 
mesh of trees is similar to the expander-connected mesh P,u~ except that the meshes are replaced by meshes 
of trees. More precisely, the expander-connected mesh of trees (denoted by Q,na~) is defined to be the 
graph consisting of m disjoint nxn meshes of trees which are interlinked with additional edges so that 
for each i and j (l<i,j<n), the subgraph induced on those leaves in the (i,j)-position of some mesh of 
trees is an expander graph. For example, we have drawn Q2.2ill Figure 8. The dotted lines represent edges 
ill lhe expander graphs while the dashed and solid lines represent edges in the meshes of trees. it is 
not difficult to check that Qm, n has N=O(mn 2) nodes and a 21/2-bifurcator of size F=mn. In the following 
theorem, we will show that Qm, n has layout area at least fl(m2n21og2n) = g(F21og2(N/l~)), crossing number 
at least ~2(men21ogn) = f~(F2log(F/N)) and maximum edge length at least f~(mnlogt~loglogn) = ~2(Flog(F/N)/loglog(N/F)). 
Thus the univelsal upper bounds proved in section 3 are existentially tight for every N and F. Theorem 
10: The expander-connected mesh of trees Q,r~n r has layqut area O(m2n21og2n), c ossing number O(m 22n 
Iogn) and maximum edge length O(mnlogn/Ioglogn). Proof sketch: The upper bounds follow trivially from 
the universal upper bounds proved in section 3. The lower bounds are substantially more difficult and, 
unfortunately, we do not have space for them here. As in [L81a,L81b] (where the special case when m=l 
is considered), the bounds are proved by induction on n. The techniques which we developed in [LSla,L81b] 
must be extended, however, in order to deal effectively with the expander graphs in Qn~n [] _...........~.........~ 
~Sr~- ~xt::,,::x.dev ~de a-e / I! I I I Figure 8: The expander-comwcled mesh of trees Q2.2. 5. Use 
of Bisection Width Heuristics As we demonstrated in sectior, s 3 and 4 of this paper, it is a simple 
task to lind a near!y optimal layout for" a graph given an optimal 21/2-biftncator for the graph. The 
problem of finding a minimum 2//Lbifurcator seems to be very difficult, however. Indeed, even the problem 
of linding good heuristics or approximation algorithms seems to be hard. Thus it appears thin, like previous 
strategies, the layout strategy developed in section 3 is only usefill for certain highly structured 
networks. In this section, we will describe a slightly different layout strategy for which good heurislics 
do exist. In particular, we will show how to get provably good algorithms for the crossing number problem 
given provably good algorithms for the bisection width problem. These, in turn, can be used to find prow~bly 
good layout algorithms. Although the bisection width and crossing number problems are known to be NP-complete 
[GJ79,GJS1] and there are no known provably good algorithms for either problem, there are several heuristics 
for the bisection width problem which appear to do very well in practice [KL70,B77,SCC77,B82,FM82,R82]. 
'l]lus it is hoped that this analysis will eventually lead to good heuristics for crossing number and 
layout problems. 95 Theorem I1: Given an algorithm which finds a v(N)B- bisection of any N-node graph 
with bisection width B (where y(N) is some nondecreasing fimctional measure of error), it is possible 
to construct an algorithm which produces a drawing for any graph G which has at most Â¢p(N)(C Ã· N) crossings 
where C is the crossing number of G and Â¢p(N) = O(T2(N)log2N). Proof sketch: Use the bisection width 
algorithm to produce a decomposition tree for G by recursively bisecting each subgraph in the tree. As 
in Figure 2, define G~o and Go/ to be the left and right sons of G o in the decomposition tree. Further 
define B,o to be the bisection width of G~, C~0 to be the crossing number of G~0 and N o to be the number 
of nodes in G o . Clearly, N o = N/2H. In [LSla,L81b], we showed that C+N > f~(B 2) for any graph and 
thus Co+N~o > ~2(BJ) for every ~. Since G,o contains G~, o , for every to', we also know that C~0 _> 
Coo, and thus that Cu+N~o > f~(B~o~, 2) for every to '. 'lhe algorithm lbr drawing G is recursive. At 
each step, we will use drawings of Gwo and Gut to construct a drawing of G,o. In addition, we will store 
a palh fiom each node to the exterior face of the drawing which has a small nmnbcr of crossings. These 
paths are used when inserting edges at eacia rccursive step, but are otherwise only remcmbered and updated 
(i.e., they do not count in the crossing totals), l.ct C~' be the number of crossings in the constructed 
drawing of G~ and let P~, be the maximum number of edges that would have to be crossed to draw an cdgc 
fi'om any ntMe in the constructed drawing of G o to the exterior of the drawing. Using a straight- lbrward 
divide-and-conquer analysis, we can see that C~' < Cto 0 ' + Cca I ' + y2(N)BÂ¢o 2 + y(N)B~pco and Pro 
~ ma.~(P,oo, P~,I) + 7(N)B~o for every to. Solving the latter recurrence, we find that P~ _< "t(N)[,,~ 
B&#38;o, )llogN, o and thus that C~o' < Coo' + C~o I ' + O(y2(N)(C~ Ã·N,o)logN~). It is now a straightforward 
matter to prove by induction on Iwl (Narting with Ito]=logN and decreasing) that C ~o ' _< O( y2(N)(C~o 
Ã· No) log2 N~o), thus proving the theorem [] Although we feel strongly that a similar result should 
hold for layout area, we do not know how to prove it directly. (The preceding technique fails when it 
is called upon to combine two layouts with widely differing areas.) We can, however, use the crossing 
number algorithm to construct a layout algorithm which is provably good. qqais idea is exploited in the 
following theorem. Theorem 12: Given an algorithm which finds a y(N)B- bisection for any N-node graph 
with bisection width B, it is possible to construct an algorithm which produces a layout for any N-node 
graph G which has area at most ~b(N)A where A is the m#1#num layout area of G and ~(N) = O(y2(N)log4N). 
Proof" First use the algorithm constructed in Theorem 11 to find a drawing for G with at most q~(N)(C+N) 
crossings where C is the crossing number of G and to(N) = O(y2(N)log2N). Convert the drawing into a planar 
graph by replacing each crossing with an artificial node (as in [L81a,L81b]). Using the algorithm developed 
independently by I,eiserson [LS0a] and Valiant [V81], this graph can be laid out using at most O(~(N)(C+N)Iog2N) 
area. The construction is completed by replacing the artificial nodes with their original edge crossings. 
Since ,4 > C+ N, it is clear that the layout has area at most q/(N)A where q,(N) = O(v2(N)log4N) [] 6. 
Remarks (a) It is easy to generalize the notion of a 21/2 bifurcator to include larger classes of decomposition 
trees. For example, we say that a graph has an (F, 7)-bifurcator if it has an (F, Fly, F/72 ..... y)-decomposition 
tree. It is not difficult to check that an N-node graph has an xa-separator if and only if it has an 
(N a, 2a)-bifurcator. More importantly, however, generalized bifurcators are instru mental in finding 
good layouts for graphs in multi- dimensional grids. For example, Leighton and Rosenberg [LR82] have 
recently shown that the minimum volume V needed to embed an arbitrary N-node graph G into a 3-dimensional 
grid satisfies ~(F 3/2) <_ V <_ O(F3/2log3/2(N/F)) where F is the minimum 22/3-bifurcator for G. (b) 
In [L81a, L81b], we descibed several O(logN)-fime parallel algorithms using the mesh of trees. Since 
writing those papers, we have become aware of several other papers which describe parallel computation 
algorithms using the mesh of trees. For example: 1) Nath, Maheshwari and Bhatt [NMB81] have used the 
network (which they call the orlhogondf trees network) for sorting, discrete Fourier transform, minimum 
spanning tree, and connected components (as well as many other) problems, 2) Cappello and Steiglitz [CS81] 
have used the net- work (which they call the orthogonal forests) for integer multiplication, and 3) Gannon 
[G81] has used the nctwork to find approximate solutions Lo systems of partial differential equations. 
 (c) As of this writing, the following layout-related problems are still open: 1) How much area is needed 
to lay out an N-node planar graph? (The best universal upper bound is O(Nlog2N) while the best existential 
lower bound is ~2(NlogN). ) 2) What is the maximum edge length of an arbitrary tree? (l'he best tree 
layout algorithm known pro- duces layouts with edges of length O(N//2/IogN). Although this is optimal 
for some trees, it is way off for others.) 3) Is there a provably good heuristic for the bisection width 
problem? (Although the bisection width problem is known to be NP-complete, there are many heuristics 
which do quite well in practice. Analysis of these or the development of others may help solve the layout 
problem.) 4) Is there a provably good heuristic for the crossing number problem? (Although this problem 
was recently shown to be NP-complete by Garey and Johnson [GJ81], their proof does not rule out the existence 
of approximation algorithms.) 7. Acknowledgements We would like to thank the following people for their 
helpful remarks and suggestions: Sandeep Bhatt, Dennis Gannon, Charles Leiserson, Tom Lengauer, Gary 
Miller, Franco Preparata, Ron Rivest, Arnie Rosenberg, Jim Saxe and Clark q~ompson. 8. References <RefA>[B77] 
M.A. Breuer, "Min-cut placement," ,h~urnal of Design Automation and Fault "lblcrant Computh~g, Vol. 1, 
No. 4, October 1977, pp. 343-362. [B81a] G.M. Baudet, "On tt, e area required by VLSI circuits," Proceedings 
of the CMU Conference on I/LSI Systems and Computation.i; Edited by H. T. Kung, B. Sproull and G. Steele, 
Computer Science Press, Rockville, Maryland, October 1981, pp. 100-107. [BSlb] S. Bhatt, "On Concentration 
and Coluteclio/1 Networks, Master's Thesis, l)epartment of Electrical Engineering and Computer Science, 
Massachusetts Institute of Technology, 1981. [B82] T. Bui, ".Bisecting ranaom graphs," unpublished manuscnpt, 
1982. [BK80] R.P. Brent and H. T. Kung, "O1] the area of binary tree layouts," Information Processing 
Letters, No. 11, 1980, pp. 44-46. [BL81] S.N. Bhatt and C. E. Leiserson, "Minimizing the longest edge 
in a VLSI layout," unpublished manuscript, 1981. [BL82] S.N. Bhatt and C. E. Leiserson, "How to assemble 
tree machines," Proceedings of the 14lh Annual Symposium on Themy of Comput#Tg, May 1982, to appear. 
[BPP81] [CM811 [cs811 [FM82] [G811 [GG79] [G J79] [G J81] IGW82] [KL70] [KI.I.M81] [L80a] [L80b] [L81al 
 [l.81b] [LM81] G. Bilardi, M. Pracchi and F. P. Preparata. "A critique and appraisal of VLSI models 
of computation," Proceedings of the CMU Conference on VLSI S)'stems and Computations, Edited by H. T. 
Knng, B. Sproull and G. Steele, Computer Science Press, Rockville, Maryland, October 1981, pp. 81-88. 
B. Chazelle and L. Monier, "A model of computation for VLSI with related complexity results," Proceedings 
of tile 13th Annual ACM S)'mposium on Theory of Computation, May 1981, pp. 318-325. P. R. Cappello and 
K. Steiglitz, "Area-efficient VLS1 structures for multiplying at clock rate," Technical Report #289, 
Department of EECS, Princeton University, September 1981. C. M. Fiduccia and R. M. Mattheyses, "An almost 
linear algolilhln for partitioning networks," unpublished manuscript, 1982. D. Gannon, personal communication, 
November 1981. O. Gabber and Z. Galil, "Explicit constructions of linear size superconcentrators," Proceedings 
of the 20th Ammal IEEE ,S)'mposium o/1 Foundations of Computer Science, October 1979, pp. 364-370. M. 
Garey and D. Johnson, Computers and hmactabilio,." A Guide to the Theory of NP- Completeness, W. 11. 
Freeman and Company, San Fransisco, 1979. M. Garey and D. Johnson, unpublislled manuscript, December 
1981. C. Goldberg alld D. West, "Even splitting of circle colorings,' unpublished manuscript, 1982. B. 
W. Kernighan and S. Lin, "An efficient heuristic procedure for partitioning graphs," The Bell Syslem 
Technical Journal, February1970, pp. 291-307. D. Kleitman, F. T. Leighton, M. Lepley and G. L. Miller, 
"New layouts for the shuflle-exchange graph," Proceedings of the 13th ACM Symposium on 27woo, of Computhlg, 
May 1981, pp. 278-292. C. E. Leiserson, "Area-efficient graph layouts (for VLSI)," Proceedings of the 
21st Annual IEEE Symposium on Foundations of Computer Science, October 1980, pp. 270-281. C. E. Leiserson, 
Area Efficient VLSI Computation, Ph.D. dissertation, Department of Computer Science, Carnegie-Mellon 
University, November 1980. F. T. Leighton, Layouts for the Shuffle-Exchange Graph and "Lower Bound Techniques 
for VLSI, Ph.D. dissertation, Mathematics Department, Massachusetts Institute of Technology, August 1981. 
F. T. l.eighton, "New lower bound techniques for VLSI," I'rocecdi, tgs qf Ihe 22,d Annual IEEE Symposium 
on /:oundalions of Computer Science, October 1981, pp. 1-12. F. T. Leighton and G. 1.. Miller, "Optimal 
layouts fi)r small shu['llc-exchange g'aphs, I'roceedings of the VI.SI 81 Confi,rence, Edited by J. P. 
Gtav. Acaderaic Press, I.ondon, August 19)81, pp. 289-299. [LR821 [LS811 [LT771 [MC80I [MR79] [NMB811 
[PRS811 [PV791 [R811 F. T. Leighlon and A. L. Rosenberg. '"ll~ree- dimensional circuit layouts," unpublished 
manuscript, 1982. R. J. Lipton and R. Sedgewick, "t.ower bounds lbr VLSI." Proceedings of the 12th Ammal 
ACM 5),mposium on Theoo of Computing, May 1981, pp. 300-307. R. 1. Lipton and R. E. Tarjan, "A separator 
theorem for planar graphs," A Conference on "l'heoretical Computer Science, University of Waterloo, August 
1977. C. Mead and L. Com~ay, Introduction to VLSI Systems, Addison-Wesley Publishing Company, Reading, 
MassachuseUs, October 1980. C. Mead and M. Rem, "Cost and performance of VLSI computing structures," 
IEEE Journal of Solid State Circuits, Vol. SC-14, No. 2, 1979. D. Nath, S. N. Maheshwari and P. C. P. 
Bhatt, "Efficient VLSI nctworks for parallel processing based c.n orthogonal trees," unpublished manuscript, 
1981. M. S. Patterson, W. L. Rnzzo and L. Snyder, "Bounds on minimax edge length for complete binary 
trees." Proceedings of the 13th Annual ACM Symposium on Theory of Computing, May1981, pp. 293-299. F. 
P. Preparata and J. E. Vuillemin, "The cube- connected-cycles: a vm~atile network for parallel computation," 
Proceedings of the 20th Annual IEEE Symposium on Foundations of Computer Science, October 1979, pp. 140-147. 
A. Rosenberg, "Routittg with pcnuuters: toward rcconfigurable and fimlt-toIerant networks," Technical 
Report CS-1981-13, l)uke University, 1981. [R821 [RS811 [s811 [SCC771 [7"791 IT801 [v751 [vs0] [v81] 
R. Rivest, "The 'Pl' (placcment and inter-connect) system," Proceedings of the 19th Annual Design ,4utomation 
Conference, 1982, to appear. W. L. Ruzzo and L. Snyder, "Minimum edge length planar embedd;ngs of trees," 
Proceedings of the CMU Confere~;ce on VLS1 Systems and Computatiotls, Edited by H. T. Kung, B. Sprou[l 
and G. Steele, Computer Science Press, Rockville, Maryland, October 1981, pp. 11% 123. L. Snyder, "Overview 
of the CHiP computer," VLS1 81, edited by J. Gray, Academic Press, New York, August 1981, pp. 237-246. 
A. Sangiovanni-Vincentelli, L. Chert and L. Chua, "An efficient heuristic cluster algorithm for tearing 
large-scale networks," IEEE Transactions on Circuits and Systems, Vol. CAS- 24, No. 12, December 1977, 
pp. 709-717. C. D. Thompson, "Area-time complexity for VLSI," Proceedings of the llth Annual ACM 5),mposium 
on Theory of Computing, May 1979, pp. 81-88. C. D. Thompson, A Complexity Theory for VLSI, Ph.D. dissertation, 
Department of Computer Science, Carnegie-Mellon University, 1980. L. G. Valiant, "On non-linear lower 
bounds in computational complexity," Proceed#lgs of the 7th Annual ACM Symposium on Theory of Computing, 
May 1975, pp. 45-53. J. E. Vuillemin, "A combinatorial limit to the computing power of VI..SI circuits," 
Proceedings [(o the 21st Annual IEEE Symposium on undations of Computer Science, November 1980, pp. 294-300. 
L. G. Valiant, "Universality considerations in VLSI circuits," IEEE Transactions on Computers, Vol. C-30, 
No. 2, February 1981, pp. 135-140.</RefA>   
			
