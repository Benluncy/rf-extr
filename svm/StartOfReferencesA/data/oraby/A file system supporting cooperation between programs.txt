
 A File System Supporting Cooperation between Programs Loretta Guarino Reid and Philip L. Karlton Xerox 
Corporation Palo Alto, California 1. Introduction File systems coordinate simultaneous access of files 
by concurrent client processes. Although several processes may read a file simultaneously, the file system 
must grant exclusive access to one process wanting to write the file. Most file systems consider processes 
to be antagonistic: they prevent one process from taking actions on a file that have any chance to harm 
to another process already using the file. If several processes need to cooperate in a more sophisticated 
manner in their use of a file, they must communicate explicitly among themselves. The Mesa file system 
views processes as cooperative. This view allows it to support a more sophisticated sharing of files 
among independent processes. If one process wishes to use a file in a way that conflicts with the way 
that a second process is using the file, the process that is using the file may be asked to relinquish 
it. For example, if a process wants to write a file being read by another process, the process that is 
reading the Permission to copy without fee all or part of this material is granted provided that the 
copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the 
title of the publication and its date appear, and notice is given that copying is by permission of the 
Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific 
permission. &#38;#169; 1983 ACM 0-89791-115-6/83/010/0020 $00.75 file is asked to stop. A process may 
ask to be notified when a file becomes available for a particular use. The processes that share files 
need neither communicate explicitly nor know one another's identities We have exploited the file system 
support for cooperative processes in the design of the Xerox Development Environment, an integrated multi-window 
programming environment. This support for cooperation in sharing files makes it possible to write sophisticated 
tools, such as windows that load themselves with the new version of an error log each time it changes. 
Since the cooperation is provided by the file system instead of by the client programs (clients) themselves, 
we can add new clients to this environment that participate in file sharing without having to change 
the other clients. The Mesa file system facilitates inter-process cooperation by asking clients to provide 
procedures that the file system can call to ask the client to give up a file (PleaseReleaseProc) or tell 
the client that a file is available (NotifyProc). We call such procedures call-back procedures because 
the file system will call back to the client at the file system's discretion via these procedures. 20 
The Mesa file system is written in the Mesa programming language [8]. Mesa supports procedures as first-class 
data types; that is, procedure variables can be declared and procedures can be passed as parameters. 
Clients provide call-back procedures by passing them as parameters. The examples in this paper are written 
in Mesa. Mesa supports' multiple processes [3]. Synchronization and interprocess communication is provided 
by monitors and condition variables rather than by message passing [5]. The next three sections describe 
the file system procedures used by clients for using and sharing files. Section Two discusses how a client 
gains access to a file and how a client can respond if the file system asks it to give up a file it is 
using. Section Three discusses the mechanism by which a client might ask to be notified that a file is 
available for some access. Section Four discusses a controlled type of file access that lets clients 
read and write the same file at the same time. Section Five comprises three examples of the cooperative 
features of the file system taken from the Xerox Development Environment. Section Six discusses the subtleties 
of writing the call-back procedures that clients provide to the file system to Acquire: PROCEDURE [ name: 
LONG STRING, access: Access, release: ReleaseData, mightWrite: BOOLEAN, initialLength: LONG CARDINAL, 
type:Type] RETURNS [Handle]; Release: PROCEDURE [file: Handle]; implement interprocess cooperation. 
Section Seven discusses the implementation of this file system. 2.File Access To use a file, a client 
must have a handle on the file which identifies the file in other calls to the file system. To obtain 
a handle, the client calls the procedure Acquire (see Figure 1 ). When a client finishes its use of a 
file, it must release its handle and relinquish its use of the file by calling Release. The access parameter 
indicates how the file is to be used: anchor access is used both to keep a file from being deleted or 
renamed and to change some file properties; readOnly, writeOnly, readWrite, delete, and rename are self- 
evident; append will be discussed below; null is used only for client initialization purposes and not 
to acquire a file. The release parameter, used for asking the client to relinquish its use of the file, 
is discussed below. The file system Checks that the requested use of the file does not conflict with 
other current uses of the file. If it does conflict, the file system will ask each current owners of 
a conflicting handle on that file to release its handle. It does this by calling the PleaseReleaseProc 
associated with the conflicting handle (see Figure 2). If all the clients possessing conflicting handles 
release Access: TYPE [anchor, readOnly, readWrite, writeOnly, append, delete, rename, null}; Type: 
TYPE [unknown, text, binary}; Figure 1: Procedures for acquiring and releasing files PleaseReleaseProc: 
TYPE ffi PROCEDURE (file: Handle, instanceOata: LONG POINTER] RETURNS [ReleaseChoice]; ReleaseData: TYPE 
= RECORD [ proc: PleaseReleaseProc, clientlnstanceData: LONG POINTER]; ReleaseChoice: TYPE = {:later, 
no, goAhead, allowRename}; Figure 2: PleaseReleaseProcdeclarations their handles, the request is honored 
and the new use is granted. Otherwise, the request is denied : When a client's PleaseReleaseProc is called, 
the client can do one of four things. The client can refuse to relinquish its use of the file, returning 
the value no, in which case the conflicting request cannot be honored. If it returns allowRename, it 
refuses to relinquish its use of the file, but allows the file to be renamed. If it returns goAhead, 
it relinquishes the file, and the file system will release its handle. (It is a client error if it uses 
this handle thereafter.) If it returns later, it promises to release the file in the near future, so 
the file system should delay processing the new request until that handle has been released. Let us consider 
how the different return values might be used. If a client's PleaseReleaseProc were called in the middle 
of writing a file, it would return no. A file cache client would return the value goAhead after it removes 
the requested file from the cache. If a client notes that it is already in the process of releasing a 
file when its PleaseReleaseProc is called, it would return later. If a client were concerned only with 
the contents of a file and not with the name of the file, it would return allowaename from its PleaseaeleaseProc. 
A loader is such a client; it does not want the contents of a loaded program to change, but does not 
care if the program is renamed. A client can acquire a new handle on a file for each use it makes of 
that file. Alternatively, a client can change the use associated with a given handle by calling the procedure 
SetAccess (see Figure 3). For instance, a client can acquire a file with readOnly access and change the 
access to readWrite only when it determines that it must write into the file. SetAccess provides a quicker 
way to release and reacquire a file with a new access. In particular, PleaseReleaseProcs are called if 
required to obtain the new access, and file notifioation takes place if appropriate (see Section Three). 
 3. Notification A client can ask the file system to notify it whenever a file (or class of files) becomes 
available for some particular access. For example, when a client is denied SetAccess: PROCEDURE (file: 
Handle, access: Access]; Figure 3: SetAccessdeclaration 22 AddNotifyProc: PROCEDURE [ proc: NotifyProc, 
filter: Filter, clientlnstanceData: LONGPOINTER]; RemoveNotifyProc: PROCEDURE [ proc: NotifyProc, filter: 
Filter, clientlnstanceData: LONG POINTER]; Filter: TYPE ffi RECORD[name: LONG STRING, type: Type, access: 
Access]; NotifyProc: TYPE - PROCEDURE [name: LONG STRING, file: Handle, clientlnstanceData: LONG POINTER] 
RETURNS [removeNotifyProc: BOOLEAN]; Figure 4: NotifyProcdeclarations access to a file, it might want 
to be awakened when that file is available so it could try again. The procedure AddNotifyProcis called 
to register such a request with the file system, and the procedure RemoveNotifyProc is called to remove 
it (see Figure 4). The filter parameter determines the class of files of interest. The name field of 
the filter is a pattern to be matched against file names. Patterns can include wildcard characters that 
match zero or more characters in a file name. The type field of the filter is the type of the files that 
the client is interested in; if type is unknown, all types match. The access field of the filter ensures 
that the client is notified only when a file with the needed access becomes available, such as when a 
file that was being written becomes available for reading. When the file system determines that the conditions 
of a filter have been satisfied, it calls the NotifyProc passed in with the filter. The name parameter 
is the name of the file; file is a handle on the file; and clientlnstanceData is the value passed to 
the file system when AddNotifyProc was called. The NotifyProc returns TRUE when it wishes to be removed 
from the file system's notification list. Because a client can acquire a file for a conflicting access 
before other interested clients have been notified that the file is available for some weaker access, 
there is no guarantee that a client will be called for every state change of a file. For instance, clients 
to be notified that a file is available for readOnly access will not be notified if another client acquires 
the file for readWrite access in the interim. When a client is notified, however, it is guaranteed that 
it can acquire the file for its desired access. 4. Append files A client may request append access to 
a file for typescript applications where a file can be concurrently read and written. In such an application, 
the file can always be divided into two parts: an unchangeable initial portion, and a final portion that 
may still be changed. The read length of the file divides these two sections. A client with append access 
to a file may change either the contents of the final portion of the file or the size of the file. This 
client is also responsible for setting the read length of the file when it has finished writing a new 
section of the file. The read length may never decrease. The file system always honors requests to read 
a file for which another client has append access. It will appear to the reader, however, that the file 
is only s8 long as its read length at the time it. was ~uirecL To encourage a client with appendaccess 
to let the reader read as much as possible, the file system will call the PleaseReleaseProc of the append 
client, ignoring the result returned. This allows the append client to set the read length from the PleaseReleaseProc, 
since the PleaseReleaseProcmay have been called because some client is trying to read the append file. 
Appendfiles are particularly useful for applications in which a client is continually adding information 
to the end of a file, but another client needs to read the current contents. For instance, a command 
executive program may write a typescript of commands typed by the user together with their output. One 
of the commands of the executive may store a file. It is useful to store a copy of the typescript file 
itself. If the typescript file is an append file and the command executive sets the read length to the 
end of the output from the previous command, the executive can store the contents of its own typescript 
file up to the point at which the command was issued. Section Five gives another example of appendfiles. 
5. Examples The Xerox Development Environment uses the cooperative features of the file system to solve 
several problems that can be quite awkward to deal with otherwise. Three illustrations of this are windows 
that display files, file managers, and append files for processing data. 5.1 File Windows While a file 
is loaded in a window so the user can read or edit it, the file window program has a handle on it. Some 
other client may need to acquire that file to write into it. For instance, a user loads the compiler 
error log into a window to look at his compilation errors while he edits his source file. If, after finishing 
the edits, he recompiles the source file without unloading the compiler log, the compiler will need to 
write into the log if it encounters additional errors. If the user is not editing the file in a file 
window, the file window program will unload the window and relinquish ownership of the file. When the 
PleaseReleaseProc is called for the file window's file handle, the file window program checks the state 
of the window. If the file is being edited, it refuses to release the handle. Otherwise, it unloads the 
window, registers a NotifyProc for read access on the file, and relinquishes ownership of the file. When 
the client that was writing the file completes and releases its handle, the file system notices that 
read access has become available on the file. Since it can satisfy the file window's notification request, 
it calls the file window's NotifyProc.The file window program acquires the file for read once more and 
reloads it into the window. Hence, a client will not be blocked if a file that it needs has been left 
loaded in a window, and file windows automatically update themselves to the most recent version of whichever 
files they contain. 5.2 File Managers Some clients cache file handles expected to be needed again, some 
of which may be in use. This saves looking up the file in the file system each time it is needed and 
remapping the file contents into memory. When another client needs a file maintained by the file manager, 
the PleaseReleaseProc for the file manager checks its reference counts to see if the fileis in use. If 
not, the file manager clears the file from its set of file handles and relinquishes ownership. Hence, 
the PleaseReleaseProc facility allows a client to gain the performance advantages of a file cache without 
interfering with other clients that need to use the files in the cache. (Another solution to this problem 
is provided by the XDFS file system [7].) 5.3 Append file processing Consider a data analysis system 
in which one process continuously gathers data that several other processes analyze as the data is gathered. 
These processes can be coordinated straightforwardly using an append file. As data comes in, the data-gathering 
process appends it to an append file and sets the new read length for the file. Setting the read length 
causes file notification to take place for read access. The analysis processes have a NotifyProc on the 
append file. When the file is extended with new information, the NotifyProc is called. The NotifyProc 
performs a broadcast on a condition variable to awaken the analysis processes blocked waiting for data. 
Each analysis process loops, checking to see whether there is more data by comparing the current read 
length of the file with the last length processed. If there is no new data, the process again waits on 
the condition variable. If there is more data, the process acquires the append file for read access and 
processes the data starting from where it last left off, continuing to the end of the file. Note that 
the data gathering process does not need to know the identity of or even the number of analysis processes. 
It simply provides a service to whatever clients may be interested. Analysis processes can be added or 
removed dynamically without affecting other processes. Only one copy of the data need be produced, since 
it can be freely shared among the analysis processes. The analysis processes can read any available data 
at any time, not just the previously unseen data. 6. Concurrency Problems in Writing Call- Back Procedures 
Writing call-back procedures correctly is often difficult because the client must be prepared to have 
its call- back procedures invoked at any time. Although clients that use PleaseReleaseProcs and NotifyProcs 
may appear to be simple, sequential programs, subtle synchronization issues are involved in the interprocess 
communication between the client, the file system, and (indirectly) other clients. The difficulties are 
inherent in writing multi-process programs. As the means of communication, the call- back procedures 
expose these difficulties. Note that clients need not master the subtleties of call-back procedures to 
use the file system. They can choose instead not to cooperate in their use of files, using a system-provided 
PleaseReleaseProc that always returns no. Often, tools are first written with little or no cooperation 
and they gradually evolve to allow more cooperation. The rest of this section discusses the difficulties 
in writing call-back procedures. As an example of the type of locking that the client must do, the client 
monitors data accessed by its PleaseReleaseProc and carefully synchronizes which process has released 
the file. To see how this might be done, consider the code fragments in Figure 5. In this FileState; 
TYPE = {busy, beingReleased, released}; file: Handle; state: FileState <-- released,; ChangeState: ENTRY 
PROCEDURE [newState: FileState] -- BEGIN state <-- newState; END; -- PleaseReleaseProc for file MyReleaseProc: 
ENTRY ReleaseProc = BEGIN SELECT state FROM busy = > RETURN[nO]; beingRelease, released = > RETURN{later]; 
ENDCASE; END; -- code to acquire file ChangeState[busy]; file <-- MFile.Acquire[ FileName , readWrite, 
[]]; -- code to release file when done ChangeState [ beingReleased]; MFile.Release[file]; ChangeState[ 
released]; Figure 5: Example PleaseReleasePro¢ example, the PleaseReleaseProc will return later if the 
client is done with the file and is in the process of releasing it. Otherwise, it will return no. The 
state of the file, state, is always changed by the client and examined by the PleaseReleaseProc from 
within the client monitor.  Note that this is an extremely simple PleaseReleaseProc. The only difference 
between providing this and no PleaseReleaseProc at all is that later will be returned during the small 
interval after the client has decided to release the file but before that operation is complete. If some 
other client requests the file in that interval, that second client will succeed when otherwise it would 
not. Since many clients may be calling it simultaneously, the file system must lock some of its internal 
data structures while it calls the client-provided PleaseReleaseProc or NotifyProc. Although essential 
to preserving the consistency of its data structures and to provide some guarantees on its behavior, 
this means that there are file system operations that cannot be invoked from a PleaseReleaseProc or NotifyProc 
without causing deadlock. As an example of the type of locking that the file system must do, the file 
system guarantees that once a client has released a file, the file system will not call the associated 
PleaseReleaseProc. Thus, while the file system is calling the PleaseReleaseProc for a file, it blocks 
all attempts to call Release on that file. This blocking guards against the case where the call on the 
PleaseReleaseProc is blocked on a client monitor while the client has called Release on that file. If 
the file system executes the Release before the 26 Client File System 1. enter monitor to release file 
 2. call PleaseReleaseProc(blocks on client monitor) 3. call Release  4. process call of Release and 
return to client 5. leave monitor 6. process call of PleaseReleaseProc  7. call from 2 completes Figure 
6: Race condition if file system permitted Releaseto execute while calling a PleaseReleaseProc. PleaseReleaseProc 
completes, it will appear to the client that the PleaseReleaseProc was called after the Release comt~leted, 
as seen in Figure 6. A PleaseReleaseProcshould not wait on a monitor that may be held by a process that 
may be waiting on the file system. In Figure 5, it is important that the actual release of the file was 
done outside the client monitor. Instead, only the state change of the file is protected by the monitor, 
and Release is called from outside the monitor. Otherwise, the deadlock sequence in Figure 7 mightoccur. 
Some of the file system procedures may not be called from within a PleaseReleaseProc; these include Acquire, 
Release, or SetAcce'ss. If the PleaseReleaseProc calls one of these procedures, the process will deadlock 
on the file system's monitor for that file. flit must call one of these procedures, it must Client 1 
Client 2 1. enter monitor to release file X fork another process to perform the call and must not wait 
for that process to complete, since the process will not complete until the PieaseReleaseProc returns. 
The return value later from a PleaseReleaseProc may indicate that a process has been forked that will 
release the file. We have provided examples and guidelines for writing PleaseReleaseProcsand NotifyProcs, 
but writing these procedures still requires very careful thought and attention and a good understanding 
of the principles of multi-process programs. Hence, the facilities available for clients to cooperate 
are more difficult to use than we would have liked. 7. Implementation The Mesa file system is used by 
the Xerox Development Environment, a programming environment that runs on a personal workstation. The 
Xerox Development File System 2. call Acquire on file X 3. lock data structure for file X 4. call Client 
rs PleaseReleaseProc for 5. call Release(blocks on file file X (blocks on Client l's monitor) system's 
lock on file X's data structure) Figure 7: Client caused deadlock in PleaseReleaseProc Environment is 
written entirely in the Mesa programming language [8] and runs on the Pilot operating system [9]. Pilot 
provides the facilities that manage the storage and retrieval of data on physical media, such as magnetic 
disks. Pilot presents its clients with a flat space of capabilities for files. The Mesa file system builds 
upon Pilot, providing a directory facility (that is, a name-to-file mapping), file protection, support 
for file properties, and control of simultaneous access. The file system is implemented by fourteen 
Mesa modules, consisting of approximately 6500 lines of Mesa code and 20,000 words of object code. It 
was implemented in six months by two people, and it has been successfully running as part of the Xerox 
Development Environment since January 1982. The implementation consists of a general BTree [1] package, 
a directory system built using the BTree package, a directory scavenger package, and a package for managing 
access control, file properties, and file notification. The implementation permits maximum concurrency, 
locking out processes only when necessary to protect the file system data structures. This file system 
was designed for use on a personal workstation with only limited features for protection and resource 
allocation [9]. As a result, the file system does not try to protect itself against many client errors. 
In particular, misuse of the file system facilities can cause deadlock. If the user runs a client that 
breaks the file system, he must restart the workstation. (This would not be tolerable on a multi-user 
time-sharing system.) The file system does provide a file system scavenger [2, 4, 6, 10] to regenerate 
its data structures on the disk.  As discussed in the previous section, the programmer must exercise 
extreme care to ensure that interactions between the client's process and file system processes' are 
properly synchronized. The authors were too often reminded of this both in designing the file system's 
synchronization strategy and in helping others use call-back procedures in a wide variety of tools. The 
tools include file windows, a tool for executing the compile-bind-run loop, the symbol file caches used 
by the compiler and debugger, and the user profile management tool. The richness of the cooperation in 
the Mesa Development Environment is constantly repaying that initial investment. 8. Conclusions The 
Mesa file system is novel in the way that it supports cooperation between clients that do not know about 
one another. This cooperation is provided via procedures to request clients to release files or to tell 
clients files are available. These facilities allow design strategies that would be impractical under 
other circumstances, secure in the knowledge that if an optional use of a file is interfering with other 
work, the offending program will be informed. This cooperation supported by the file system was essential 
in designing the Xerox Development Environment as an interactive integrated programming environment. 
Acknowledgements. The authors designed and implemented the Mesa file system. Keith Marzullo implemented 
the BTree package. Hal Murray pointed out deficiencies in the original synchronization strategy of the 
file system, and Hal Murray, Roy Levin,  and David Redell helped redesign the file system synchronization. 
David Elliott and the SOSP program committee made many helpful comments and suggestions about this paper's 
organization and contents. References. <RefA>[1] Bayer, R. and McCreight, E.M. "Organization and Maintenance 
of Larger Ordered Indexes". Acta Informatica 1,3, 1972, 173-189. [2] Farber, D.J. and Heinrich, F.R. 
'~rhe Structure of a Distributed Computer System: The Distributed File System". In Proc. 1st Int. Conf. 
Computer Communication, 1972, 364-370. [3] Lampson, B.W. and Redell, D.D. ~Experience with Processes 
and Monitors in Mesa". Comm. ACM 232, 1980, 105-117. [4] Lampson, B.W. and Sproull, R.F. "An Open Operating 
System for a Single User Machine". Presented at the ACM 7th Syrup. Operating System Principles (Operating 
Syst. Rev. 13,5), 1979, 98-105. [5] Lauer, H.C. and Needham, R.M. "On the Duality of Operating System 
Structures". Second colloque international sur les systemes d'exploitation. IRIA, October 1978. [6] Lockemann, 
P.C. and Knutsen, W.D. "Recovery of Disk Contents after System Failure". Comm. ACM 11,8, 1968, 542. [7] 
Mitchell, J.G. and Dion, J. "A Compariso n of Two Network-Based File Servers". Comm. ACM 25,4, 1982, 
233-245. [8] Mitchell, J.G., Maybury, W., and Sweet, R. Mesa Language Manual. Tech. Rep., Xerox Palo 
Alto Research Center, 1979. [9] Redell, D.D., Dalai, Y.K., Horsley, T.R., Lauer, H.C., Lynch, W.C., McJones, 
P.R., Murray, H.G., and Purcell, S.C. '~Pil0t: An Operating System for a Personal Computer", Comm. ACM 
23,2 {February 1980), 81-92. [10] Stern, J.A. Backup and Recovery of On-line Information in a Computer 
Utility. Tech. Rep. MAC- TR-116 (thesis), MIT Lab. for Computer Science, 1974.   </RefA>
			
