
 Amortizing 3D Graphics Optimization Across Multiple Frames Jinl Dut-bin Naval Research Lab Code 5580.455 
Overlook Avenue SW Washington, D.C. 20375 +1-202-767-6025 dttrbin @ait.nrl.navy.mil ABSTRACT This paper 
describes a mecban istm for improving rendering rates dynamicall~ during runtime in an interactive three­ 
dimensional graphics application. Well-known techniques such as transforming h lerarcbical geometry into 
a flat list and removing redund;tn[ graphics primitives are Often performed off-l ine on i[at ic databases. 
or continuously every rendering frame. In :~clciition. these optimizations are usually performed over 
tbe whole database. We observe that much of the database remains static for a fixed period of time. while 
other porti{)ns are modified continuously (e.g. the camera position). [Jt-w-e repeatedly modified during 
some finite interval (e.g (luring user interaction). We have implemented a runtime optimization mechanism 
which is sensitive to repeated. local database changes. This mechanism employs timing strategies which 
optimize only when the cost of optimization wil I be amortized over a sufficient number of lrames. LIsing 
this optimization scheme. we observe a rendering speedup of roughly 2.5 in existing applications. Wc 
discuss our initial implementation of this mechanism. the 1mpmved tlnling measurements. the issues and 
assumptions u r tna~ie. and future improvements. KEYWORDS three-dimensional graphics. interactive graphics, 
real-time. optimization. rendering. \ lrtttal reality INTRODUCTION In 1976 Clarke suggested that a hierm-chical 
data structure would have several characteristics which are useful for manipulating and rendering graphics 
objects [4]. One pow­erful advantage of a tree \tructure for the application pro­grammer is that matr]cm 
a[ each node in the tree can represent Individual coorci inate systems. When the pro­ grammer manipulates 
ii gl-apilics object, its children will inherit the chan:es implicitly [ 13]. However, for the renderl 
n: engine. a hierarchical data struc­ture is not optimal. To keep the highiy pipelined architecture I 
Th[s work Pld(lllllll; ltdy l (M1l@L![L l! :1[ lIIL UIIIVWWV of VIrgmm Permission to make digitrd/hard 
copies of all or part of [his material for personal or classroom use is granted without fee provided 
that the copies are not made or distributed for profit or commercial advantage, the copy­ m.ght notice, 
the title .Of the pll~licati~ll and its date appear, and notice is gwen that copyright M by permission 
of {he ACM, Inc. To copy otherwise. to republish, to post on servers or to redistribute to lists. requires 
specific permission and/or fee. UIST 95 Pittsburgh PA USA @ 1995 ACM O-89791-709-x/95/l 1..$3.50 Rich 
Gossweilec Randy Pausch University of Virginia, School of Engineering Department of Computer Science 
Charlottesville, VA 22903 +1-804-982-2289 [rich I pausch] @Virginia.edu of modern graphics hardware 
from stalling, we would prefer to make few, if any calculations while traversing the graph­ics database. 
To that end, afiat list of graphics primitives is preferable, because it requires no combination of transfor­mations 
(e.g. matrix multiplications). Flat lists also offer the opportunity to perform compiler-like peephole 
optimiza­tion (e.g. removing redundancies), and is efficient for pipe­lining graphics. Existing Solutions 
The use of optimization techniques to improve rendering speeds is well-established, in both research 
(e.g. the Berke­ ley and UNC Walkthrough projects [7] [ 1] [2]) and commer­cial systems (e.g. SGI Performer 
[11]). These two systems exemplify both ends on the spectrum of when to optimize. The Berkeley Walkthrough 
assumes that the database is static, and can perform aggressive off-line optimization to restructure 
the database for improved runtime performance. Performer, on the other hand, supports very dynamic envi­ronments 
and cannot make assumptions about the static nature of the database. Performer employs global database 
optimization~or every frame. Since optimization takes time, Performer users prefer to execute these mechanisms 
on an auxiliary CPU to minimize impact on the rendering CPU. Both techniques apply optimization globally 
over the data­base. In this paper, we present optimization that occurs qfter higher-level techniques 
such as culling objects which are not in view, or using multiple representations of objects stored at 
various levels of detaii [12]. Our Approach We have observed that in many applications some portions 
of the database remain unchanged during the entire run, and other portions change repeatedly. but during 
brief intervals (e.g. when the user is directly manipulating the object). and still other portions change 
continuously (e.g. the camera Iocation). Since we have constructed a rendering system which is application 
independent [8]. we, like Performer, cannot make assumptions that a given portion of the database will 
remain static. We must analyze the database during runtime. Instead of attempting to transform the enure 
database dur­ing each frame, our mechanism records the frequency with which portions of the database 
change, and uses this in for-mation to predict h[~w t requently the object will be changed in the neal-future. 
The mechanism determines or predicts the cost clt performing an optimization and uses a simple utility 
function to determine the value of optimizing those pt)rl]ons (Jt the database. The algorithm collects 
data abou{ the average frequency for which each object gets altered It the object does not get altered 
frequently, then the C(M( to optimize the object may be worth the savin~s rec{~uped over later frames. 
However, if the object is con~tantl> changing. then there is less incentive to perform the optimization, 
as the benefits will be fleeting. Our approach is a hybrid. as shown in Figure 1: Figure 1: When 10 optimize 
The Tree Structure We implemented ou] optimization mechanism as part of the Alice graphics s\\tenl I 
10]. Alice supports a variety of applications ran:t n: from immersed virtual environ­ments. to rapid 
expl(}ration of three-dimensional inter­faces. to a teach! n: tool for graphics classes. The rendering 
subsystem \8] li based on a hierarchical data structure. All graph lc:ll {)l~jects in the rendering sub-sys­tem 
are represented m nodes in the tree. Nodes contain transformation matrices and may also contain geometry 
consisting of polygoils. polylines or polypoints. When rendering from this d~ta structure, there are 
two basic forms ot inefficiency: 1) matrix multipllc:itions to combine the implicitly chained transformat 
ions (in order to render a leaf node. we must first apply L!I1the transformations from the root node 
to that Ieatj. 2) redundant calls (() set state in the graphics pipeline; for example. in tnt)ii ~>bjects. 
a large number of poly­gons are the same cOIOI-. Repeatedly calling the graphics setColor ( ) >Ubroutine 
(the OpenGL glColor3f ( ) call) [9] disrupts the pipeline. In addi­tion, even using a Iocai i f statement 
in the inner render­ing loop also disl-upts the hardware pipeline [5], degrading renderi n: performance. 
This is partially because the i f st:ltenlent to compare with, for exam­ple, the current nol mal vectot-. 
needs to compare three floating point valuei The most efficient mechanism is to produce the list of g] 
aph[cs calls which will be stream­lined into the graphics pipeline. and to remove the redundant calls. 
Thl\ IS ex:Ktly what Performer does on an extra CPU for CUICI1ir.ilne. OUR TECHNIQUE Our technique involves 
several optimization phases and a separate mechanism for analyzing the benefit of per­forming the optimization. 
The phases are: streamlining each individual node in the tree by cre­ating an array of graphics calls 
without any interven­ing computations. This is done for each node in the tree, so that if the node is 
altered, only that particular node s streamlined array needs to be re-constructed streamlined hst of 
grapnlcs C/% -t G  peephole optimization to the streamlined list, removing redundancies flattening 
the hierarchical tree structure --coalescing nodes so that each subtree node has a single cache list 
representing all of its children at one trans­formed level. We call this list the streamlined array. 
 c cuun peephole optimization of the flattened list for the entire subtree Since invoking these optimization 
mechanisms requires time. we need a guideline to determine if it is worth per­forming these operations. 
The algorithm must evaluate the time needed to perform the optimization, how long the object has remained 
unaltered and how much of a predicted improvement will be achieved. Optimization Phases Converting Each 
Node into a Rendering List Each node in the tree may be thought of as a container holding a set of properties 
describing the object or sub­object at that level. For example, in a hierarchical model of a bunny, the 
bunny s foot may be a child of the bunny s leg. As a node, the foot contains geometry, color information 
and inherits the transformation matrix from its parent (the leg). When traversing the foot s node, the 
rendering engine may have to perform several conditional statements to determine how to draw the foot. 
The color may be inherited from the parent (the leg), set for all of the polygons, be specified for each 
~ndividual polygon. or specified for each individual ver­tex of each polygon. Evaluating tihese conditional 
state­ments every frame (Iisrupls the pipeline. If the graphics calls are the same 1r{)m triune to frame. 
these calls can be cached into an al-ray Then the rendering engine can iterate through the :Irro! rather 
than making repeated conditional ev:~lttatl(]ni. lt bile it is surprising that seem­ ingly minor conditlc)nal 
tests have a strong impact on rendering performance. this is due to the highly pipe­lined nature of 
high-end graphics hardware. To quote the authors of SGl l (:l-f(JrnleI-: Peephole Optimization When rendering 
an (~hiect. there are many polygons which are the same L {)[ol Instead of resetting the color for every 
vertex or t(lr every polygon. the color call can bef:lcti)redout:ltl~l lll:l~leo[lly(>llce. This redttndancy 
I,l,[c)ritlg c:in occur for many of the properties which ch~i;lclel-ize the object (e.g. the color, theverte~ 
normal \cclt)r\. and the textures). Forthe ini­tiai implementation. OUI-optimization removes redun­dant 
color and norIIIal information This operatiott is performe(i during IIIL construction of the streamlined 
array, Eariy peephoie compliers useci a simiiar method to track the source of a register s value and 
remove redundant load commands [6] Lforc sopilisticated peephole opti­mizers perform incrcmlngiy c~~tnpiex 
pattern matching and even rem-r:mge c(xic in an attempt to minimize the number of instructlon~ and register 
manipulations: we hope touseanumbel (lfthe~erechniciue stofurtheropti­mize renciering. Flattening the 
Tree Since tile optinlizatl~)n mecilanism is traversing the hier­archical ~tructure III(i cre:ltitl: 
cacile arrays for each node. the cost to :lc~umul:ltc the transformation matrices is triviai. This ali(lii~ 
tile optimization mechanism to effectively flatten ~~lhtrees into a single node with a longer cache arrtiy, 
Figure 2: Tree flattening Note tixit the origlll:ll Ilicr:irci]y is not discarded. since aitet-ationstothe 
n(dc~ In the tree reqttir ethatthecache be invalidated and the (lriglnal hierarchy be available. Fattening 
the hici-,11-cll! into a rendering iist is an explicit iuncti(ln c<lll [n l cldoinncl. and thm+orc makes 
it the responsibility> (JI [iw ai~i~iication programmer to perform this operation. Our optimization mechanism 
engages automatically when optimization is cost-effec­ ti ve. Analysis Mechanism The important distinction 
of our mechanism is how it determines when optimization should be done. and to which portions of the 
database. Performer does optimi­zation giobaily to the entire hierarchy every frame, Our approach is 
to perform a utility measurement. compar­ing the cost/benefit of flattening subtrees and factoring out 
redundant calls. We measure how long an object remains unaltered, how long it takes to optimize. and 
the value of performing the optimizations. Waibciock Time v. Frame Time Because we are interested in 
how many times an object is modified versus how many times it is rendered, it is more appropriate to 
use rendering frame counts rather than wali-ciock time. For example, if we used wail­ciock time. and 
the system pauses momentarily (perhaps due to other users on the machine) a single frame couid take arbitrarily 
long to render. The ratio of how fre­quently the object is modified to how frequently it is rendered 
is what is importan~. While frame-counting is necessary to determine when to opmmze. wall-clock time 
is necessary to compute the effective~less of the optimizations. We measure the ren­dering times of objects 
in both their unoptimized and optimized states. important Information for the Aigorithm AUT --Average 
Unaltered Time: the ratio of the num­ber of frames where an object is not altered to the totai number 
of frames (This is a running total average. but other options are discussed later). TTRU --Time to Render 
Unoptimized: the amount of time to render an object without any optimizations. TTRO --Time To Render 
Optimized: the amount of time to render an object once it has been optimized. OT --Optimization Time: 
the time it takes to perform the optimization on the object. Computing Variables Since there already 
is a penaity for loading an object from the disk we expend slightly more time to obtain timing information. 
We load the object and render it several times without performing a swapbuf f er ( ) tail. During this 
time we gather the TTRU. the TTRO and the OT. We also create the streamlined array for each node. The 
performance cost of gathering this infor­mation is not observable, as it is dominated by the time to 
read the object from the disk. Dynamically Created Objects During the execution of the program. subtrees 
may be reparented. effecti \cly creating new objects. and the timing variables ce:lw to be lrepresentative. 
In this case, we use a simple. C(J:IIX predictive function based cm the numbet-of polyg(Jn\ in ,1iubtree 
Based on tirnin:s tal,ell;)n a la[-ge number of subtrees on an ~~JI Reality Eng] ne-[~]. we find for 
an N polygon subtree, the represen[ariw t[mes are: EstimatedTTRU = ~() ()()(K)127 K.N) seconds EstimatedTTRO 
= (().(XXKN)3X : N) >econds EstimatedOT = (0.( HMX)879 h N) seconds The Utility Function For each node, 
we ~tcll-ethe TTRU. TTRO. and OT. The utility function compu[es the amount of savings we will obtain 
over the avem:e unaltered time (AUT) and adds the cost of perfomling the optimization. The total is compared 
to the co~t of rendering unoptirnized over the same ALTT if (TTRO KAUT -+ OT < TT1<U ;:AUT) then optimize... 
This simple algorithm dots not prevent arbitrarily bad hitches. For example. it the object has not changed 
for a very long time. bul the optimization time (OT) is five seconds. the algorl[ hm WOLIkl perform the 
optimization, and the system would stall for tive seconds. This prob­lem can be solved thy placing a 
hard upper limit on the allowable OT. Invalidating the Optimization Since our system iupports a dynamic 
tree. we must invalidate the caches when an object s characteristics change (e.g. colol. translucence). 
texture), when the object s matrix un(lergoes a transformation. and when reparenting occurs The c:iches 
are marked dirty and the rendering engine trilverses the unoptimized hierarchy instead. Since each nmle 
n~wntaims its own streamlined array, any unaltered node keeps its streamlined array:  PEa+!jyJ (111$:Illcl 
cd. ncxk \va\ so Its Wr:ly 1. lll\ :Illd:llc(l Figure 3: in\alidatlng the optlmizations i MEASUREMENTS 
The effectiveness of tbls optimization mechanism depends on how Irequen[ly an application alters an object. 
It the object is :~ltet-ed continuously, then no opti­mization are performed. It :in obiect is never 
altered. then it is optimize[l once :Ind rem:uns in the optimized state for the duration of the application. 
To establish that these optimization produce a worth­while savings, we measured the time to render a 
variety of objects when they are optimized and when they are unoptimized. The results are shown in Table 
1. The graphical objects in the table represent several contrived and actual objects to explore variations 
on tree configu­rauons and redundancy removal. Note that these speed­ups are greater than 2.5; actual 
day-to-day use achieves roughly a 2.5 speedup because of constant cost opera­tions per frame such as 
clearing and swapping the frame buffer. which dilutes the speedup somewhat. Now m the reviewers: the 
enclosed video tape shows the amusement park simulation rendering at 12 frames per second without optimization 
and 29 fratnes per second with the optimizalions engaged. As future work we would like to gather statistics 
about how frequently objects are optimized and how long they remain optimized. CONCLUSION The graphics 
database is accessed by both the applica­t~on program and the rendering engine. but the usage patterns 
and frequency of access dictate very different internal representations. Transforming a subtree into 
a render-optimized list steals rendering time which may be recouped over future frames. The question 
of utility becomes, 1s it worth the time to optimize now, to speed up the application for the future? 
By observing that some parts of the tree are active for discrete periods of time, we have implemented 
a runtime optimization mechanism which optimizes only local portions when the utility of optimization 
appears worthwhile. The results are dependent on usage patterns, but initial tim­ing experiments indicate 
that this mechanism is useful for improving runtime efficiency. Our initial measure­ments indicate a 
factor of 2.5 increase in rendering speeds when the optimization mechanism is employed. HIGH LEVEL OBSERVATIONS 
We have two high level observations based on this implementation. The first is that preliminary results 
of employing this mechanism look promising. Alice was recently used in a graphics class project where 
ten stu­dents built an amusement park (each student built indi­vidual rides). This was a fair test, involving 
an application written by a ten person team, unaware of the underlying optimization techniques. The optimization 
mechanism improves the rendering by a factor of 2.5. Our second observation is that trees are typically 
con­structed with very little depth --on the order of five lev­els or less. FUTURE WORK The following 
is a brief list of issues we intend to con­sider as we continue this work. Spatial Coherency REFERENCES 
The rendering eng] nc. by computing the bounding vol­umes of subtrees, l.nt~ws which objects in the tree 
are 1. located neat each ()(her al (er the matrix transformations. This may not be i[icn(lc:il to the 
way the user has con­structed the parent-child lrelationships of the tree. For portions of tht dat:lhase 
which do not change over long periods ot tin}c. thcl-cndering engine could tiatten 2. the application 
tret and (hen reconstruct aditferent tree based on spatial locality. This would allow for more effi­cient 
high-level cull Iny Timing Across Runs 3. We currently cotnpute a]l variables for the optimization at 
runtlm.e. There l])ay he some benefit in storing the timing ciataacrm+ I-( In\ This information might 
be use­ful when determinlny the IItility (~t flattening and may serve as a second-order statistic shout 
the nature ot the 4. object (e.g. the -lal]]p f]l~ject is used by many applica­tions as static deco[ 
,Itlon I Averaging Differently 5. we currently compute the Average Unaltered T]me (AUT)overtheenlirc 
run. An alternate approach is to weight the timin:~. so that over tjme the more recent 6. a!teration~ 
intluencr (he avet-age more than alterations having occurred a long tlmc ago. The general problem is 
similar to the page replacement problem in operating systenl\. 7. Application Hints and/or Explicit Control 
It might be prLIdem In w)me ca~e~ to allow the applica­tion to explicitly express g~md moments to perform 
opti­mization. For ex:ltnple, if the application knows that the user has paLise[l or gone into another 
mode, then that might be a good tl!l~e to (~pt!mize. 8. Progressive Flattening For example, if ~!c tlattcn 
a bunny object which has children nodes of head. b(xly and arms, and then we rotate the head. the ent]l-c 
head tree will be unflattered. If, instead, we proyres\)\ely llatten each subtree into larger and larger 
Ii.1i. wc can unflatten only the portions 9. which have been :iltcre[l. rather than the whole subtree. 
Combine with Other Optimization Techniques Using this optimirati~)n mechan]sm does not preclude 10. off-line 
optimizatl[]n For example. with a static data­ base such as the Btt keley W alkthrough. off-line optimi­zation 
can providr a great dea\ of effective visibility cullin:. During runfime :1given cell of visibility may 
still have a large number of objects. Our mechanism may then be effecllic t(~l-lmprovitlg the cell. ACKNOWLEDGEMENTS 
11. We would like to (h:lnk :111of the members of the User Interface Group al lbe l.~nliersity of Virginia 
for their valuable help ancl IdeJ\ (luring the completion of this work. <RefA>John M. Airey. John H. Rholf 
and Frederick Brooks Jr., Towards Image Realism with Interactive Update Rates in Complex Virtual Building 
Environments, ACM SIGGRAPH Special Issue on 1990 Symposium on Interactive 3D Graphics, 24 (2). 1990. 
pp. 41-50. Frederick Brooks Jr, Wafkthrough -A Dynamic Graphics System for Simulating Virtual Buildings, 
Proceedings of the 1986 Workshop on Interactive 3D Graphics. Kurt Akeley, Reality Engine Graphics, ACM 
Annual Proceedings of SIGGRAPH 93 (Anaheim California), August 1-6. 1993, .Addison-Wesley, pp. 109-116. 
James H. Clark, Hierarchical Geometric Models for Visible Sur-jace Algorithms, Communications of the 
ACM. 19( 10), October 1976. pp. 547-554. Sharon Clay, member of SGI Perfomer Group. Personal conversation, 
April 25.1995. Jack W. Davidson and Christopher W. Fraser, Register Allocation and Exhaustive Peephole 
Optimization, Software --Practice and Experience, 14(9), John Wiley &#38; Sons, September 1984, pp. 857-865. 
Thomas A. Funkhouser, Carlo Sequin and Seth J. Teller, Management of Large Amounts of Data in Interactive 
Building Walkthroughs. 1992 Symposium on Interactive 3D Graphics, ACM flG&#38;FtAPH. Cambridge Mass. 
April 1992, pp. Rich Gossweiler. Chris Long, Shuichi Koga, Randy Pausch, DIVER: A Distributed Virtual 
Environment Research Platjorrn, IEEE Symposium on Research Frontiers in Virtual ~;_;~ October 25-26, 
1993, San Jose, CA, pp. Jackie Neider, Tom Davis and Mason Woo, Open GL Programming Guide, Addison-Wesley, 
Reading. Mass. 1993. Randy Pausch, Tommy Burnette. A.C. Capehart, Matthew Conway, Dennis Cosgrove, Rob 
DeLine, Jim Durbin, Rich Gossweiler, Shuichi Koga, Jeff White, Alice: A Rapid Prototyping System for 
3D Graphics, IEEE Computer Graphics and Applications, 15(3), May 1995, pp. 8-11. http://www.cs.virginia. 
edu/-alice/ John Rohlf and James Helman, IRIS Performer: A High Pe~ormance Multiprocessing Toolkit for 
Real-Time 3D Graphics, ACM Annual Proceedings of SIGGRAPH 94, (Orlando F18~~~;; July 24-29. 1994, Addison-Wesley, 
pp. 12. Bruce Schilc ll[cr (Ed.), Computer Imuge Ge/?erc/~i{~//.JtJllll Wiley and Sons, New York, NY. 
1983. </RefA>Table 1: Optimization Timing Measurements pl,-optlmld [Rx pre-optirnized optimized Lhatllcterls(lcs 
 hl<m calls to Cill IS to culls to cd Is to poly-time to ob]ect Ill < Ilo[lw Set Set tl me Set set t]me 
mtlo gons opti m]ze I)Cplll color Normal Color Normal bunny 3 13 389 389 I683 0.00500 36 389 0.00144 
0,02964 3.47 cow I x 3263 3263 12330 0.04557 1 12255 0.01626 041885 2.80 01d demo1[)oltl , 7 609 609 
2462 0.00744 82 609 0.00213 0.04448 3.50 to,llll , 12 196 f 9($ 792 000240 38 254 0.00080 001691 3,00 
ne\\ delm> U][llll I Q .55 55 220 0.00067 7 55 0.00016 000417 4,19 10 levels dwp 10 I () 20 20 80 0.00027 
1 20 0.00008 0.00187 3.38 20 Ievcls deep 2() 20 40 40 160 0.00064 1 40 0.0Q013 000371 4.92 30 levels 
deep .10 30 60 60 240 0.00093 1 60 0.00019 000536 4.89 10 levels wide I 10 20 20 80 0.00027 I 20 0.00008 
0.00183 3.38 20 Iuds Wldc I ?() 40 40 160 0.00054 1 40 0.00012 0.00361 4.50 30 levels WI(1C 1 30 60 60 
240 000085 1 60 0.00019 0.00545 447 8 t llli bln:u> x 256 512 51~ 2048 0.00978 1 512 0.00198 004649 494 
10 full bln;u) 10 1024 2048 2048 8192 003285 1 2048 0.00834 0.20341 3.94 i ~ fll]l blwy 12 4096 8192 
8192 32768 0.16171 1 8192 0.04178 084584 3.87 200 node Colol I 200 200 200 800 0.00370 200 1 0.00096 
0,02164 3.85 300 ]IcldeColw I 300 300 300 1200 0.00563 300 1 0.00133 0.03298 4.23 200 node 1101Illli 
I 200 200 200 800 0.00385 I 200 0.00082 0.022 I 9 4.70 300 node norn]al 1 300 300 300 1200 0.00596 1 
300 0.00120 0.03381 4.97 \t:l Iic 3? 3X5 3490 3490 14596 0.06366 1842 2269 0.01696 0.00728 3,75 amUsenwlt 
pal L j? WI11121LXI 3X5 3490 3490 14596 0.06366 varl -vari-0.02232 040113 2,85 ctmlb~lll~llt pmi able 
able opt. time is the Optimization Time, OT ratio is the T]me To Render Unoptimized (TTRU) / Time To 
Render Optimized(TTRO) # levels deep i, a 1 node wide, # levels deep tree # levels wide ii ;i I n(xie 
deep. # levels wide tree # t LIII binary is u # Ie\el deep. full binary tree # node color I\ J I level 
deep. # level wide tree, with every polygon set to a different color # node normal I\ a I level deep. 
# level wide tree, with every polygon rotated to produce a different normal 19 November 14-17, 1995 
UIST 95 
			
