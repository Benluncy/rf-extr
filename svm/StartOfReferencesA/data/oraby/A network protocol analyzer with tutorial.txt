
 A NETWORK PROTOCOL ANALYZER WITH TUTORIAL Susan Mengel, Salman Ali University of Arkansas Computer Systems 
Engineering 313 Engineering Hall Fayetteville, AR 72701-1201 Voice: (501) 575-5728 Fax: (501) 575-5339 
E-Mail: sam@engr.uark.edu Keywords: Hypertext, Computer Aided Instruction, Workstation A[ I Workstation 
B [ Network Protocol Analyzers ABSTRACT I Local Area Network I As part of the effort to build a network 
lab at the Univer- sity of Arkansas, several hypertext tutorials are under I development to facilitate 
the introduction of network- LAN Protocol ] ing concepts to students. The topics of these tutorials include 
network protocol analyzers, installing commer- Analyzer cial networks, and videoconferencing. The prototype 
tutorial for the network protocol analyzer is written in i[i Ntergaid's HyperWriter[7] and includes 
a small proto- col analyzer program called PROTAN for the TCP/IP Suite [2]. Network Fault ComponentThe 
network protocol analyzer tutorial takes the stu- Administration Detection Testing dent through the 
functions of a typical protocol an-alyzer, such as network monitoring, specific condition testing, filtering 
based on specific criteria, and data col- Fig. 1. Using Protocol Analyzers on a LAN. lection and analysis. 
The tutorial discusses PROTAN and its code, contains a glossary of networking terms, Protocol analyzers 
(see Figure 1) are tools capable of and presents a short tutorial on hypertext. PROTAN is nonintrusive 
attachment to a network in order to inter- also compared to the functions available in commercial cept 
packets and may be packaged as software only or protocol analyzers. a hardware/software combination. 
They provide help in monitoring and analyzing a network, and may even . INTRODUCTION construct a graphical 
map of the network. They can generate alarms when the number of packets rises above Many network packages 
have a limited means for trou- a certain level or when specific packet types are present bleshooting 
network problems. Cable problems, bad on the network. They also point out increased errornetwork interface 
cards, or packet floods are difficult to levels in packet delivery. trace to the source without patiently 
disconnecting var- ious subnets or even individual workstations from the To help students learn more 
about protocol analyzers as network. Instead, it would seem to be better to attach a tool they might 
use on the job, a prototype protocol a tool to the network able to intercept packets, break analysis 
tutorial has been written in Ntergaid's Hyper- them apart, and collect statistics on the source and type 
Writer [7]. The tutorial can be temporarily exited to run of packets without interrupting normal network 
opera- a small protocol analyzerprogram called PROTAN [2] tion. Using the statistics, network administrators 
would written in C for the TCP/IP Suite on an Ethernet net- immediately become aware of who is broadcasting 
pack- work. In addition, the tutorial has been used in class ets and where the source of floods are located. 
Also, the with success in helping students understand the func- absence of a workstation's statistics 
would indicate that tionality and importance of protocol analyzers. Owing it may have a bad network connection. 
to the students liking the interactive nature of the tu- torial, other hypertext tutorials are being 
designed to support the continuing development of a network lab at "Permission to make digital/hard copy 
of all or part of this material without the University of Arkansas. The tutorials are on such fee is 
granted provided that copies are not made or distributed for profit or topics as network protocol analysis, 
installation of com- commercial advantage, the ACM copyright/server notice, the title of the mercial 
networks, and videoconferencing. publication and its date appear, and notice is given that copying is 
by permission of the Association for Computing Machinery, Inc.(ACM). To PROTOCOL ANALYZER FUNCTIONS 
copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific 
permission and/or a fee." In order to understand the basis for the information in &#38;#169; 1996 ACM0-89791-820-7 
96 0002 3.50 the tutorial and the functionality of PROTAN, it is use- ful to discuss protocol analyzer 
functions. The functions 115 1 Software Only 2 Software Plus LAN Adapter 3 Self-Contained Unit 4 Capture 
with Multiple LAN Adapter 5 Detailed Capture Filtering 6 Capture Triggering Based on Message Content 
7 Capture to Disk 8 User-Definable Decodes 9 Real-Time Display of Codes 10 Message Filtering at Decode 
11 Translate Addresses to Symbolic Names vary with the sophistication level of the analyzer and are shown 
in Table I. The functions have mostly to do with capturing all packets or using a filter, saving packets 
to disk for a later replay of the network traffic for a cer- tain time period, displaying statistics 
to show network utilization and error rates, and alerting operators to un- usual conditions. The more 
functions an analyzer is able to perform, the greater its cost [5]. The functions are explored in more 
depth in the following subsections and a brief look at commercial protocol analyzers is given. Network 
Monitoring The protocol analyzer is often used to monitor network performance by providing a graphic 
display of the net- work's current state. Color-coded graphs illustrate the network's traffic, the number 
of collisions, the number of bad frames, and so on. Some protocol analyzers, such as Novell's LANalyzer, 
have a station monitor screen that enables a network manager to check network activity at the workstation 
level. Using this screen, it is easy to see if a particular station is generating unusual amounts of 
traffic, particularly during peak traffic hours. A user might be trying to print large graphic files 
thereby caus- ing a traffic jam. The protocol analyzer will reveal the -culprit. Monitoring a token 
ring network enables a network man- ager to pinpoint defective stations quickly. By running an error 
monitor program on a protocol analyzer, it is possible to identify which stations are sending BurstErr 
(Error monitor command) messages, indicating that a problem exists between the station sending the message 
and a station upstream from it. The protocol analyzer can run a map application to generate a list of 
users on the token ring in sequential order. This list reveals which stations are upstream from the station 
sending the error message and can quickly narrow down the "suspects" to a few stations. Sometimes all 
that is needed at this point to restore normal network oper- ation is the tightening of a loose connection. 
Network managers can customize a protocol analyzer's monitoring function so that it displays alarms for 
a num- ber of conditions; for example, a user-defined load level has been exceeded, a user-defined error 
level has been exceeded, a station does not transmit any traffic dur- ing certain times, and a new station 
has started trans- mitting or receiving on the network. Another condition may be to detect packets with 
certain designations, such as "secret", or with a particular protocol type. TABLE I: PROTOCOL ANALYZER 
ATTRIBUTES 12 Decode Selectable by Protocol Layers 13 Multiple Levels of Decode 14 Display Interframe 
Timing 15 Dual/Multiple Display Windows 16 Support Encapsulated :Protocols 17 Display Overall Network 
Utilization 18 Display Utilization by Station 19 Display Network Maps 20 Display Error Conditions 21 
Display Error Rates 22 Preprogrammed Operator Alert  Specific Condition Testing Some protocol analyzers 
can transmit frames on a net- work to simulate certain conditions. This feature is use- ful for benchmarking 
the network as well as for capacity planning. Using this technique, a network manager can send certain 
types of frames and check the operation of specific bridges and routers. Filtering Based on Specific 
Criteria Network Interface Cards (NIC) can become defective and start to transmit packets erroneously; 
for example, instead of transmitting to the desired destination, they end up broadcasting the packet. 
Such NICe can cause congestion on the network. Network administrators can detect defective cards by filtering 
packets based on ad- dresses. Another example is using the protocol analyzer to check for frames that 
have timed out or taken too long to reach their destination. By examining these frames, it is possible 
to discover whether the time-out has been set too low or whether the traffic congestion on the net- work 
simply makes it impossible for frames to reach their destination in the maximum time allotted. The network 
manager might use the results of this analysis to justify segmenting the network by adding bridges to 
reduce traffic congestion. A protocol analyzer is an ideal tool for detecting broad- cast storms since 
it can filter out broadcast packets. A quick look will reveal that a specific station is initiating these 
broadcast packets. After turning off this station, the manager can have the protocol analyzer display 
the percent of network utilization to determine whether the traffic congestion problem has been solved. 
While protocol analyzers can perform real-time filtering for managers who need to know just how many 
pack- ets are being transmitted at that very moment, such an approach is not very practical given the 
limited amount of buffer space on most of these units. A more practical approach is to direct the filtered 
packets to a disk file and then to examine the results. Many protocol ana- lyzers have export functions 
that enable the files to be exported into spreadsheet or database files [6].  Data Collection and Analysis 
Protocol analyzers most often are used for data collec- tion and analysis. The data is usually time stamped 
as it is collected. The "burst rate", or maximum rate 116 at which the device can collect data without 
losing any information, Is an important feature of protocol ana- lyzers. Network General's "The Sniffer" 
has a traffic generator feature that permits traffic to be collected to a file and then replayed using 
a playback feature. The data is replayed as if it were occurring in real time. Commercial Protocol Analyzers 
As a contrast to PROTAN and for instructional infor- mation in the tutorial, it is expedient to look 
at com- mercially available protocol analyzers. Protocol analyz- ers are widely available tools, and 
many vendors design protocol analyzers for different types of networks. The prices of these commercial 
analyzers range from $399 to $100,000 [3] (this issue lists 53 commercially available protocol analyzers). 
The prices reflect the sophistica- tion of the protocol analyzers in terms of the number of functions 
they support from Table I and the number of networks on which they can operate. For example, Tekelec 
Chameleon Open and Open-X support 15 net- work protocols (such as TCP/IP, AppleTalk, and OSI) on nine 
networking platforms (such as Ethernet, Token Ring, and FDDI). These hardware/software analyzers are 
priced from $30,000 to $100,000. On the other end of the spectrum, AC Group Localpeek is a software-only 
analyzer supporting only Appletalk and is priced at $495. PROTAN PROTAN, an acronym for Protocol Analyzer, 
is a tool to analyze the Ethernet network. PROTAN reads Eth- ernet packets and, after determining what 
network pro- tocol is at work, displays the important fields: the source and destination addresses, protocol 
type, func- tion (such as telnet or ftp), and port numbers. It does not display the data in the packet 
in order to preserve network security and individual privacy. PROTAN has the ability to filter packets 
by address or protocol type. PROTAN also keeps statistics on the number of packets read and which protocol 
was used in what percentage. A graph of the number of packets read as a function of time gives the user 
an idea of the network load during the time PROTAN was used. The user can specify the time interval to 
gather statistics. Statistics can also be written to a file for later viewing in addition to display- 
ing the statistics on the screen as shown in Figure 2. The networking protocols that can be read with 
this program are IP (Internet Protocol), TCP (Transmis-sion Control Protocol), UDP (User Datagram Protocol), 
FTP (File Transfer Protocol), Telnet, ARP (Address Resolution Protocol), ICMP (Internet Control Message 
Protocol), SNMP (Simple Network Management Proto- col), NFS (Network File Systems), SMTP (Simple Mail 
Transport Protocol), Routing, and SUN-RPC (SUN-Remote Procedure Call). The protocols have their own formats 
and methods of communicating; i.e., sending and receiving data. PROTAN has the ability to test if a workstation, 
in- cluding the workstation running PROTAN, is on the network. PROTAN can "send" and "receive" packets 
to and from one or more workstations of a certain pro- tocol type. The sending and receiving of packets 
with a certain protocol type allow the network manager to test Packets received: 48 IEEE 802£: 0 = 0.000 
% Novell: 0 = 0.000 % Others: "~ 0 = 0.000 % Loopback: 0 = 0.000 % ARP: 0 = 0.000 % IP: 48 = 100.000 
% ICMP: 0 = 0.000 % TCP: 23 --47.917 % FTP: 0 = 0.000 % Telnet: 0 = 0.000 % SMTP: 0 = 0.000 % UDP: 25 
= 52.083 % NFS: 0 = 0.000 % SNMP: 0 = 0.000 % Routing: 3 = 6.250 % SUN-RPC: 0 = 0.000 % Fig. 2. Network 
Statistics Generated by PROTAN. hardware and software on a desired piece of equipment; for example, by 
using IGP (Interior Gateway Protocol), gateways can be tested. It is desirable to compare PROTAN with 
the attributes in Table I. PROTAN is not a sophisticated analyzer and runs on a single platform; i.e., 
Ethernet. It sup- ports one protocol family, TCP/IP, and runs only on DOS. PROTAN does not map the network, 
nor does it calculate error rates or display timings with the packets. PROTAN, however, fulfills all 
of the basic attributes, such as real-time decoding, user- defined filtering, dis- playing network load, 
displaying filtered packets, and supporting most protocols. It is also packaged with a hypertext tutorial 
on protocol analysis. Protocol An- alyzers on the market do not have such a tutorial and undoubtedly 
will not since they are intended solely for network troubleshooting and analysis. Restriction The restrictions 
in using this program are the Network Driver and the Network Interface Card (NIC). Network drivers are 
the software interface between the machine on which the protocol analyzer is running and the net- work 
interface card. The netv~ork interface card is the piece of hardware that needs to be attached to a ma- 
chine in order to put the machine on the network. Every network card manufacturer provides the user with 
a net- work driver that is designed and written for that partic- ular brand of card. PROTAN 4oes not 
use any partic- ular brand of network driver, it uses Crynwr Network Drivers [4] as the software interface. 
Crynwr Drivers support a number-of brands, such as Western Digi- tal and 3Com. The advantage of using 
these network drivers is that any brand of card can be used to run PROTAN with the condition that the 
network driver is written by Crynwr drivers, Currently PROTAN has only been tested with the Crynwr driver 
for the Western Digital NIC: PROTOCOL ANALYZER TUTORIAL The tutorial provides students who have an introduc-tory 
networking or no networking background the op- 117 "  tion on the protocols recognized by PROTAN and 
their formats. The Crynwr drivers are discussed as well as the PROTAN configure file. Discussion of Code 
covers the functionality of the code. Several links are set up to go to the specific code files ~ comprising 
the program. The include and configure files are discussed as well.  In-Class Evaluation The students' 
reactions to the tutorial were favorable from a survey given to a graduate networking class. On a scale 
of one (disagree) to ten (agree), their average response for agreeing that the tutorial was useful was 
eight and for agreeing that the tutorial added to their technical expertise was also eight. Seventy-five 
percent of the students did not know about protocol analyzers. The students were given the opportunity 
to write down how they would like the tutorial improved and how it could be used in the curriculum. Many 
of their com- ments were incorporated into the tutorial as described in this paper. They were most interested 
in studying the code more to see how it worked so they could un- derstand how to write it for themselves. 
 FUTURE WORK Although useful in their present form, neither PROTAN nor the tutorial are completely suitable 
for long-range expansion plans. The reasons include: limitation to DOS platforms and a large number of 
links and screens in the tutorial. Thirty-two bit operating systems are widely available and soon many 
users will have no need of DOS. A more logical progression of material in the tutorial is needed to facilitate 
updates and instruction. Currently, plans are underway to utilize Adam's [1] de- sign technique for hypertext 
based instruction systems tO improve the tutorial. His technique pools several re- search efforts together 
to make a comprehensive design package that takes the user through an object-oriented breakdown of the 
instructional material. The user even- tually creates a system flowchart of the potential paths through 
the material that the student can take. The system flowchart is scripted to include review, test, and 
activity nodes. Metrics are given to test the instruc- tional validity of the system. The DOS-based version 
of HyperWriter does enable competent instructional systems to be implemented. Notable complaints about 
the system are that it tends to hang on Windows 95, does not seem to support high resolution images, 
and has an unfriendly user's manual. Because of this, the tutorial will be moved to a new au- thoring 
platform called SIMPLE developed by Marion Hagler and Bill Marcy from Texas Tech University un- der a 
grant from NSF. SIMPLE is free, but registration is requested to track its usage. SIMPLE is written in 
Visual Basic and runs on all Windows platforms. It pro- vides a means to shell out to execute external 
programs and to create hot buttons, buttons, and text windows. Specific changes to the tutorial other 
than its restruc- turing include eliminating the Read Me First and Hy-pertext menu choices. The tutorial 
is targeted toward college students in computer engineering who should be quite familiar with the World-Wide 
Web and hypertext navigation. Long range plans are to add the ability to shell out to a commercial network 
protocol analyzer as well as PROTAN and add material on the commercial analyzer so the ,students can 
learn how to use it. PROTAN wilthave more functionality added to it and be ~noved to'2 Windows platform. 
Some of the added functions will be to record the time a packet is received, to show color-coded graphs, 
to enable multiple graphs to be seen on the screen, to create a map of the network on the screen, to 
translate addresses to symbolic names, and to change parameters interactively. PROTAN may be rewritten 
in C++ and will be tested to work with the other Crnwyr drivers. ACKNOWLEDGEMENTS All known trademarks 
are capitalized. This work was supported in part by the University of Arkansas College of Engineering. 
 REFERENCES <RefA>[1] Adams, W.J. Application of Object-Oriented De- sign Principles and Graphical Design Techniques 
to Computer Aided Hypertext Based Instruction. Master's Thesis, Computer Systems Engineering, University 
of Arkansas, December 1994. [2] All, S. PROTAN: A DOS-Based Protocol Analyzer for Ethernet Networks 
with a Hypertext-Based Tu-torial. Master's Thesis, Computer Systems Engi- neering, University of Arkansas, 
May 1995. [3] Buyer's Guide Issue. LAN, The Network Solutions Magazine, vol. 10, no. 10, 1995, pp. 236-241. 
[4] Crynwr Software, FTP site: ftp.clarkson.edu, /pub/ka9q/drivers. zip.  [5] Haugdahl, .J.S, "Software-Only 
Protocol Analyz- ers." Network Computing, vol. 8, no. 5, May 1993, pp. 126-138. [6] Miller, M.A. LAN 
Troubleshooting Handbook, 2nd Edition. New York, New York: M&#38;T Books, 1993. [7] Ntergaid Inc. The 
HyperWriter Reference Manual, Fairfield, Connecticut, 1993</RefA>. BIOGRAPHIES Susan A. Mengel received her 
Ph.D. in Computer Sci- ence from Texas A&#38;M University in 1990. She joined the Computer Systems Engineering 
Department at the University of Arkansas in Fayetteville in 1991 as an Assistant Professor and became 
an Adjunct Assistant Professor in the EIectrical Engineering Department in 1993. She is currently developing 
multimedia tutorials to help students learn networking and robotic concepts. She also has interests in 
object-oriented software en- gineering and intelligent systems. She is a member of IEEE, ACM, International 
Neural Network Society, and ASEE. She is active in Engineering Education being the Newsletter Editor 
of the ASEE Educational Research and Methods Division. Salman All received" his MSE from the UAF Computer 
Systems Engineering Department in 1995. He has writ- ten a technical report on high-speed network protocols 
in addition to authoring PROTAN and the protocol an- alyzer tutorial. 119 "  
			
