
 A Logical View of Composition and Refinement Martfn Abadi Gordon D. Plotkint Abstract We define two 
logics of safety specifications for reac­tive systems. The Iogics provide a setting for the stud y of 
composition and refinement rules, and a framework for the use of the modular specification methods that 
these rules underpin. The two logics arise naturally from extant specification approaches; one of the 
logics is intuitionistic, while the other one is linear. 1 Introduction Modular, hierarchical methods 
for specifying reactive systems [HP85] include rules for composing and re­fining specifications (e.g., 
[dBdRR90]). The form of the rules suggests a possible specification logic. In it, the propositions would 
be system specifications; the notations for combining specifications would be­come logical connective; 
and the rules for compo­sition and refinement would be formulated as sound inference rules. The logic 
would thereby provide a setting for the study of composition and refinement rules. It should also provide 
a framework for develop­ing specifications and for verifying them using these rules. In this paper, we 
define and develop such a logic. In fact two logics arise naturally. One of the logics is an intuitionistic 
logic, while the other one is lin­ear [Gir87]. In the intuitionistic logic, a specification is a set 
of allowed behaviors, as in [Lam83a, BKP84]. *Digital Equipment Corporation, Systems Research Center, 
130 Lytton Avenue, Palo Alto, California 94301, USA, tDePt. of GomPuter Science, University of Edinburgh, 
King s Buildings, Edinburgh EH9 3JZ, UK. This work was completed while at Digital Equipment Corporation. 
 Permission to copy without fee all or part of this material is granted provided that the copies are 
not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the 
publication and its date appear, and notice is given that copying is by permission of the Association 
for Computing Machinery. To copy other­wise, or to republish, requires a fee and/or specific permission. 
@ 1990 ACM 089791-419-8/90/0012/0323 $1.50 In the linear logic, a specification is a set of al­lowed 
processes, much as in the sense of Abraham­son [Abr79]. Composition rules and refinement rules typically 
apply to safety properties, and also, sometimes with significant complication, to certain liveness proper­ties. 
Here we treat only safety properties. With this restriction, the logics provide a new understand­ing 
of some current specification methods, and sug­gest extensions. They are intended as a basis for Lamport 
s transition-axiom method for reactive sys­tems [Lam89]. A reactive system can be expected to operate 
cor­rectly only when its environment operates correctly. For example, a concurrent program module can 
be expected to exhibit desirable behavior only when its inputs are of the proper types. The environment 
can­not be required to operate correctly, but the system s obligations are void when the environment 
operates inco~rectly. An assumption-guarantee specification states that a reactive system satisfies a 
specification itf if it operates in an environment that satisfies an assumption E; this specification 
is sometimes written EaM. A Composition Principle gives a way of combining assumption-guarantee specifications 
while discharg­ing their assumptions [MC81, Pnu84, Sta85, AL90]. A simple version of the Principle, applied 
to two re­active systems pl and pz, says: If pl satisfies M2 ~ Ml and pz satisfies Ml + M2, then when 
they are run in parallel pl satisfies Ml and p2 satisfies iM2. As stated, the Composition Principle 
is not sound in general. The underlying propositional reasoning is obviously (and intriguingly) circular. 
However, the Principle is sound when Ml and Mz are safety properties, and under some additional hy­potheses. 
For instance, consider two processes PI and pz that communicate by the distributed, integer vari­ables 
xl and *2; it is assumed that only pl writes Z1 and that only pz writes X2. Let AIl be (Z1 never de­creases 
and h42 be the corresponding assertion for X2, and suppose that pl and p2 satisfy M2 ~ ibfl and Ml + 
M2, respectively. Then it is sound to conclude that Ml and iW2 both hold, that is, that neither xl nor 
%2 ever decreases. An important test for a logic of specifications is whether it can be used to express 
and to illuminate the Composition Principle. Both of our logics are designed to satisfy this criterion. 
For example, the intuitionistic formulation of the Principle just given is: (M2 ~ Ml) A(Ml ~ M2) FMl 
AiVIZ with a proviso to guarantee that Ml and M2 are speci­fications of separate processes. The Iogics 
can express also other variants of the Composition Principle; they serve in comparing these variants 
and, occasionally, in discovering new ones. Internal, hidden variables make the writing of spec­ifications 
easier. In the specification of a buffer, for instance, it may be convenient to mention the se­quence 
of elements that the buffer contains, which is not directly observable. Unfortunately, hidden vari­ables 
can complicate the proof that one specification implements another, weaker specification. Various re­finement 
rules have been proposed for these proofs; they are all based on instantiating internal variables. Logically, 
hiding is represented by existential quantifi­cation (e.g., [Lam89]). In order to prove that 3y. JV implements 
%E. M, one gives an instantiation g(y) for the variable z, and then proves that N implements M under 
this instantiation. The function g is known as a refinement mapping. For specifications of special forms, 
the basic refinement mappings have been com­plemented by the use of history and prophecy vari­ables [AL88], 
and they have been generalized to mul­tivalued mappings [LT87, Mer90]. In our logics, hiding is exactly 
existential quantifi­cation, and a simple refinement-mapping rule follows easily from the usual logical 
laws for quantifiers. It reads: N 1-M[g(y)/x] 3y.N t ~x.kf As we consider only safety properties, which 
are closed sets, we obtain an intuitionistic logic. In this we follow Hennessy and Plotkin [HP89] and, 
less di­rectly, Abramsky with his proposal of a general logic of open sets [Abr89]. Parallel composition 
can be represented by conjunction, as in works of Lamport and Pnueli. Dam [Dam88] and Abramsky [Vic88] 
pointed out that in general parallelism will give ex­tra, quantalic structure. This indeed happens when 
we take specifications to be sets of processes, and then the logic of specifications is linear. Our work 
may yield some evidence for the relevance of linear logic to concurrency. Other evidence can be found 
in work on Petri Nets (e. g., [MOM89]) and testing equivalence [AV90]. We introduce our logics in the 
following overview. Sections 3, 4, and 5 give formal definitions and de­velop the material further. The 
usual intuitionis­tic and linear Iogics need to be enriched in order to support the assumption-guarantee 
specification style. And they need to be enriched again, for example with prefixing and fixpoint operators, 
in order to obtain a basis for a complete specification language. The spec­ification formalism is considered 
in section 6. Sec­tion 7 compares the logics.  2 Overview We review the basic propositional intuitionistic 
and linear calculi. We describe the usual connective, and motivate the addition of new constructs. The 
logic fragments covered are those needed for the study of composition rules. 2.1 A calculus of sets of 
behaviors The intuitionistic logic is inspired by the work of Lamport, Pnueli, and others, where the 
specification of a system is a set of allowed behaviors. In turn, a behavior is a sequence of states, 
and a state is an as­signment of values to state components, or variables. Each state transition is attributed 
to an agent, the environment process or system process that caused the state change. Thus, a behavior 
is a sequence SO% S1-%S2JZ . . . where each si is a state and each ai is an agent, and the sequence is 
either infinite or else ends in a state smfor some m>0. The use of agents is motivated by the obvious 
need to distinguish between actions performed by the en­vironment and those performed by the system. 
In any particular specification, it suffices to consider two agents: the environment and the system. 
However! it is preferable to allow arbitrary sets of agents, in order to ease the composition of specifications. 
Since we are concerned only with safety proper­ties, we restrict attention to finite behaviors. A safety 
property is then a prefix-closed set of behaviors. In the logic, the propositions denote safety properties, 
and F simply stands for ~. The collection of safety properties forms a complete Heyting algebra [Joh82] 
and so the intuitionistic logical operations A, V, and ~ are available. The first two are intersection 
and union. Conjunction serves its usual logical role: a process p satisfies ~A&#38;f if and only if it 
satisfies both M and M . Further, conjunction represents parallel compo­sition: if pl satisfies Ml and 
pz satisfies M2 then pl and p2 in parallel satisfy Ml A M2. Disjunction corre­sponds to nondeterministic 
choice: if pl satisfies AKl and pz satisfies M2 then a processes that acts like either pl or p2 satisfies 
Ml V M2. Implication turns out to be a familiar and handy operation: E -+ M is the set of all behaviors 
that satisfy M at least as long as they satisfy E. The connective ~ has arisen in works on the Composi­tion 
Principle (in [ALWJ], and implicitly in [MC81] and [Pnu84]). Under reasonable hypotheses, the spec­ifications 
E ~ M and E + M have the same imple­mentations, and hence ~ can be replaced with ~. It is encouraging 
that the logical formulation naturally yields this connective. The specification of a system cannot require 
the environment to work properly, and so any environ­ment action should be allowed. More precisely, if 
a property M is intended to specify the process rep­resented by an agent (or set of agents) p, then any 
behavior not in M should end with a p state change. When this condition holds, we say that M constrains 
at most p, and write M ~ p. With this notation, the Composition Principle reads: for any Ml and M2, provided 
Ml ~pl, M2 dp2, and the sets pl and pz are disjoint The proviso expresses the requirement that Ml and 
M2 describe different processes. (The Principle is not sound otherwise, for example if Ml and M2 are 
the same.) Note how the logical approach obviates the need for explicit reference either to processes 
(as in [hIC81, Pnu84]) or to the realizable parts of prop­erties (as in [AL90]). hlany variants of the 
Composition Principle can be treated in this framework; for example, we easily obtain: EAM2k E1 EAM1FE2 
(EI +M1)A(Ez-+ Mz)I-(E+ M, AMz) where Ml a pl, M2 a p2, and pl and p2 are disjoint. Some of these variants 
are well known, while others seem to be new. All of them can be proved equivalent using propositional 
reasoning and a few rules about the constrains relation.  2.2 A calculus of sets of processes In the 
linear calculus, a proposition denotes a set of processes. We take a process to be a set of sequences 
of state pairs. Intuitively, a process that contains (sl, tl)(~2, ~2)(s3, ~3) . . . can change the state 
from S1 to tl, and later from S2 to tz,and later yet from Ss tots,.... In the study of safety, it suffices 
to consider finite sequences of state pairs. We require also that pro­cesses be prefix-closed. It turns 
out that the set of safety properties is isomorphic to the set of processes; thus, we may identify safet 
y properties and processes. The logical operations A, V, and ~ are still mean­ingful. They arise as before 
from the complete Heyt­ing algebra structure of the partial order of safety properties. The property 
ill AM allows the processes that are allowed both by M and M ; conjunction does not have any particular 
relation with concurrency. Dis­junction corresponds to nondeterministic choice, as before. Finally, M 
--+ M includes the processes that behave like a process in M at least as long as they behave like a process 
in M. Intuitionistic linear logic arises when we consider the parallel composition of two processes. 
The par­allel composition of pl and pz is the set of shuflies of pl sequences with pz sequences. At the 
level of spec­ifications, this gives rise to a new logical operation, @, which is the multiplicative 
conjunction in linear logic. A process satisfies Ml @ M2 if it is the parallel composition of an Ml process 
with an M2 process. Thus, if pl satisfies Ml and p2 satisfies M2 then the parallel composition of pl 
and p2 satisfies Ml @ M2. Associated with the connective @ is a linear impli­cation operation, -o. The 
property Ml -o M2 is the largest N such that Ml @ N is a subset of M2. Thus, p E Ml -O M2 if and only 
if the parallel composition of p with any q E Ml satisfies M2. Conjunction and disjunction are then the 
additive connective of linear logic. The exponential ! is triv­ial, but instead a ( )* construct can 
be added to rep­resent the parallel composition of a number of like processes. In the next subsection, 
we propose an in­terpretation of the classical constructs. The standard intuitionistic linear connective 
do not suffice as a basis for assumption-guarantee speci­fications. In particular, p G E -o M is not 
equivalent to the desired p satisfies M in any environment that satisfies E. The assertion p ~ E -O M 
means only that the composition of p with any E process q is an M process. It is possible that g is not 
the whole envi­ronment of p-there could be a third process running in parallel; it is also possible that 
p does not satisfy M in this environment the parallel composition of p and q does. To remedy this deficiency, 
we introduce a connec­tive -o. The property All -o M2 consists of the pro­cesses that, when run in parallel 
with an Ml process (and with nothing else), behave like Af2 processes. The special case of Afl -o M2 
where Ml contains only the null process 1 is of particular interest; {1} ~ M is the set of all processes 
that behave like a process in M when run by themselves, with no interference from the environment. We 
denote this property by MO. Now the Composition Principle goes: This formula is valid in our model, 
without any addi­ tional proviso. As in the intuitionistic case, a number of variants of the Composition 
Principle are available, and for example we have also the more general:  2.3 Testing The linear logic 
described so far is an intuitionistic one. It does not include a constant 1 that resembles falsehood, 
or a negation-like involution ( )1. The no­tion of testing suggests useful 1 and ( )1 constructs, and 
gives rise to a different account of assumption­guarantee specifications. We can view the environment 
of a process as a tester for the process. We distinguish a state fail to represent the result of failed 
tests. A process p passes the test of q if q and p do not yield the state fail when they run in parallel, 
and q fails p otherwise. A pro­cess succeeds if it does not yield fad when it runs in isolation. Thus, 
p passes the test of q if the parallel composition of p and q succeeds. Success is a safety property, 
and we write 1 for the set of all processes that succeed. A sort of negation can also be defined: lvl~ 
is the set of all processes that do not fail A4 processes. Naturally, we are par­ticularly interested 
in the propositions Af such that M = (M 1 )L, which are called facts. These are the specifications that 
have sound and complete testers; they can be characterized explicitly with a simple set of closure conditions. 
Certain expressions in this classical linear logic are reminiscent of assumption-guarantee specifications. 
In particular, (E A ML)L is the set of processes that pass all of the tests that M processes pass, provided 
these tests are from E. In other words, (E A Ml) 1 includes all of the processes that cannot be distin­guished 
from Af processes in E environments (by E tests). It is analogous to the assumption-guarantee specification 
E ~ M, but the obvious analogues of the Composition Principle do not hold. A small correction solves 
this problem. Let E+ = EU{u(s, fail) Iu GE, sastate} The processes in E+ behave like processes in E, 
ex­cept that they may fail the testee at any point. If E and Af are facts, then E+ M=(E+n AfL)L and the 
expected Composition Principle follows.  3 Intuitionistic Logic The model that underlies the intuitionistic 
logic is a small variant of that in [AL90]; we refer the reader to this and previous works for additional 
motivation. We assume given a nonempty set of states, S, and a nonempty set of agents, A. These sets 
are disjoint. A behavior is a finite sequence where each Si is a state and each a< is an agent. If s 
is a state then (s) denotes the sequence with s as its sole element. If a is a sequence, a an agent, 
and s a state, the u. (a, s) denotes the concatenation of a and s at the end of a. The set of all behaviors 
is denoted by l?. A safety property is a set of behaviors closed under prefixes. The set of all safety 
properties is denoted by sb. Safety properties, as we have defined them, are isomorphic to the safety 
properties of [AL90], for ex­ample, with the caveat that we have not yet treated invariance under stuttering. 
It is quite natural, and desirable, to add a straightforward condition of in­ variance under stuttering 
to our definitions, as first advocated by Lamport [Lam83b]. For simplicity, we do not do so at this point. 
The length la I of a behavior a is the number of agents that occur in a. If O < m s Ial then al~ is the 
prefix of a of length m; if m > \crl, then Ulm = u. Proposition 1 sb is a complete Heyting algebra, where 
A as (1, V as U, and the associated -+ a s M~M ={u lVn~O. ifuln~Mthenaln EM } Hence, the algebra of 
safety properties is a model for intuitionistic logic. The next two subsections dis­cuss composition 
and refinement in this intuitionistic setting. Composition We say that the safety property Al constrains 
at most the set of agents p, and write M~p, if (i) ifs E S then (s)cM; and (ii) ifucM, scS,and a E ~, 
then m.(a, s)6M. Note that if Mapthen(lV~M)ap for every N, and that if,u ~ v and Map then MCIV. Further, 
let MP be the smallest superset of M that constrains at most p. The definition of constrains at most, 
 in the form of a monotone closure condition, guarantees that such an MP exists. In fact, a behav­ior 
in MP is either a behavior in M extended with arbitrary ~ steps, or simply a behavior that consists exclusively 
of ji steps. We now have enough machinery for formulating the Composition Principle. As an example, we 
briefly study two variants. Many other variants are possible. In particular, some of them take initial 
conditions into account; initial conditions are useful, but pose no major problem in this calculus. The 
most basic law that we call a Composition Principle applies to a single specification: (MP+M) I-M (1) 
where Map. The soundness of this law can be proved by induction on the length of behaviors. Clearly, 
if s E S then (s) E M, because M 4 p. As an induc­tion hypothesis, assume that if u E (Mp -+ M) then 
u c M, and suppose that u . (a,s) E (MP -+ M), in order to prove that u. (a,s) E M. Since M is a safety 
property, r c (MP + M), and the induction hypoth­esis yields cr c M. In the case where a E p, it follows 
that u .(a, s) G ME, and then a .(a,s) c (MP --t M) implies a . (a,s) c M. In the case where a E ji, 
we obtain a , (ajs) c M from M ~p. An apparently more general law applies to two specifications: where 
Ml a pl, Mz ~ PZ, and the sets PI and P2 are disjoint. This yields (1) as a special case, by letting 
MI = M, LJI = p, M2 = Mp, PZ = ji, and observing that Ml 1-M2. Somewhat surprisingly, the converse holds 
as well: (2) can be derived from (l). Suppose that Ml 4 pl and M2 4 P2, with PI and p2 disjoint, and 
assume that (M2 + Ml) A(Ml + M2). Let N=(Ml + M2) * M2. Since M2 CIp2 and p2 ~ @l, N dfll. Moreover, 
Ml 1-N, by propositional reasoning, and hence (lvfl )Jl t- N. Therefore, N + Ml E Ml fol­ lows by (1), 
and then Ml follows from the assump­tion. The proof of Mz is exactly analogous. There­fore, (Mz -+ Ml) 
A (Ml -+ M2) 1-Ml A M2. This logical style of proof is pleasant, we found. It has helped us in deriving 
all of our variants of the Composition Principle for safety properties from (l), which is the simplest. 
 3.2 Refinement To discuss refinement, we need to particularize the choice of the set of states. Let 
Var be a countably infinite set of variables, let V be a set of values, and let S be (Var +-V), the functions 
from Var to V. For two states s and s , we write s =X s if s(y) = s (y) for all y different from x. The 
relation =C is extended to behaviors by requiring the behaviors to have the same length and the corresponding 
states to be in the relation =Z. A safety property M is x-invariant if for every u E M if u =C r then 
T E M. Further, the exis­tential quantification 3x.M of M along x is the least x-invariant safety property 
containing M. Clearly, if N is x-invariant, then we have: MI-N (3) 3x.Mt N and the converse rule is sound 
too. In a specification logic, the z-invariance hypothesis would be signalled syntactically by a free-variable 
proviso. Taking N to be 3X .M, the converse yields that: M } 3x,M (4) Now we need substitution in order 
to derive a re­finement rule. Let f : S -+ S be any function from states to states, and extend it to 
behaviors in the ev­ident way so that ~(a (a, s)) = f(m) . (a, f(s)). Then we have f-l : Sb + Sb. Let 
g : V ~ V; the substitu­tion of g(y) for x in a safety property M is defined by M[g(y)/x] = f 1 (M), 
where f(s)(z) equals g(s(y)) if z = y, and s(z) otherwise. As any f-1 is monotone, we get in particular 
that for any safety properties M and N, MI-N M[g(y)/x] 1-N[g(y)/x] If N is x-invariant then N[g(y)/z] 
= N, that is, N is unchanged by substitution for x. We apply this in (4) and get: M[g(y)/z] !-2x.M Then 
combining this with (3) we obtain a refine­ment rule: N R M[g(y)/m] (5) 3y.lV } 3Z.M There is an evident 
generalization to multiple quan­tifications. Refinement principles in the literature deal with properties 
ofspecial forms. Forexample, in[Lam89], these properties aregiven byaninitial condition and a next-state 
relation (and a progress property, which relates only to liveness). Our intention is that such principles 
can be derived from the treatment of ex­istential quantification above, plus considerations re-Iating 
to the definition ofl.fusing the prefixing con­struction and recursion, treated below. Refinement functions 
are not enough in general: even if the conclusion of (5) holds, it may be that no suitable g exists. 
The various known remedies for this incompleteness rely on auxiliary variables, on multivalued mappings, 
or on a combination of these. In a logical setting, auxiliary variables can be in­troduced with the help 
of two more general forms of semantic substitution. A certain jorward substitu­tion enables the use of 
history variables and a baclc­ ward substitution enables the use of prophecy vari­ables. Some complications 
arise as unlike the stan­dard kind of substitution dealt with above the new substitutions can only be 
approximated in the syn­tax of the specification logic (given in section 6). For practical applications, 
one should also take account of stuttering and, perhaps, other closure conditions suggested by the work 
on classical linear logic (sec­tion 5). We intend to treat these issues in more detail in the full version 
of this paper.   Intuitionistic Linear Logic In this section we develop the intuitionistic linear logic 
proposed in the overview. The study of clas­sical linear logic is postponed to the next section. We assume 
given only a set of states S; there is no notion of agent in this calculus. A transition is a pair of 
states. A process is a prefix-closed set of sequences of transitions. (Note that the empty sequence c 
is allowed.) The set of all processes is denoted by P. A set of processes ill is lefi-closed if q c M 
when­ever there exists p E M such that q ~ p. A safety property is a set of processes which is both left-closed 
and closed under arbitrary unions. The set of all safety properties is denoted by Sp. Every safety property 
has a largest process, and in fact: Proposition 2 The function from SP to P that maps a safety specification 
to its largest element is an iso - morphism of partial orders. Below, then, we define some operations 
on T rather than on SP. The complete Heyting algebra operations A and V are intersection and union, and 
the associated -+ is M~M ={u lVn~O. ifuln EMthenuln~ M } where the prefix u In is defined as usual for 
sequences. The empty set (falsehood) is written O. Ifpl and PZ are two processes, their parallel compo­sition 
is PI \\PZ, where II is the language shuflle opera­tor. Since processes and specifications are identified, 
the parallel composition of specifications is defined as shuffle too: itl @ ~ = L1 II Al . Proposition 
3 (SP, U, 1, B) is a commutative quan­taie, where 1 = {c}. The associated quantalic implication is then 
given by MI+ M2={UI ({U} \\Ml)~M2} It follows immediately that the algebra of safety specifications provides 
a model of intuitionistic linear logic [Yet90]. Parallel composition is the multiplica­tive conjunction 
operation, while A and V are the additives. The exponential ! can be treated too, but it is not interesting: 
!A4 = 1 for all Al # O, and !0 = O. Instead, a ( )* operation is available; M* is defined as Vi ibfi, 
where Ali is the i-fold parallel composition of Al with itself, and it represents an arbitrary number 
of A4 processes running in parallel. We have only started to consider existential quan­tifiers and refinement 
in a linear logic; they seem to pose no new problems, We omit their discussion here. Composition A transition 
sequence is chained if it is of the form (s1, Sz) (s2, Ss) . ..(sn-?, sn-l)(sn-l, sn) (The sequences 
e and (sl, S2) are chained,) Intu­itively, chained transition sequences correspond to runs of a system 
by itself, with no interference from the environment. tVe write u =-v (and say that u runs with v) if 
u and v have a chained shuilie. Assumption-guarantee specifications are made pos­sible by a new connective 
-o. We set: Mt={u13v EM. uwv} and Ml -0Adz=Ml ~ A[2 The definition says that if a prefix u of a sequence 
in All *A112 has a chained shuffle with a sequence in MI, then u is in 112. Hence, the sequences in Ml 
-O Af2 cannot be distinguished from sequences in M2 by an Ml environment. Various formulations of the 
Composition Principle are now available. One of the most powerful ones we have considered is: E8M2k M14El 
E8MII-M2-UE2 (Q -oM1)@ (E2 +M,) 1-(-E-oMl C3M2) Another variant applies to the composition of an ar­bitrary 
number of like processes that depend on one another, in an environment E: (E@ M*+ M)* E*M* As in the 
intuitionistic calculus, the Composition Principle can be extended to handle initial conditions. This 
extension is less elegant than in the intuitionistic calculus, however, as it requires a generalization 
of the -o connective. Classical Linear Logic With a notion of testing, the linear logic of specifi­cations 
goes from intuitionistic to classical. The no­tion of testing we adopt is an internal one: a dis­tinguished 
state fail represents the result of failed tests. As fail represents a fatal failure, we restrict attention 
to transition sequences that do not contain fail except possibly as their last state. In particular, 
the shuffle operation is redefined to respect this re­striction; when we shuffle the sequences (sO, fail) 
and (sl, S2), for example, we drop (sl, S2) from the shuffle (s., fail)(sl, S2), and say that (s., fail) 
is a shuffle of (sO, fail) and (sl, S2). For simplicity, we also assume given a fixed initial state start 
# fail, and require chained transition sequences to start at start. A chained transition sequence succeeds 
if it does not end with fail, and fails otherwise. A process suc­ceeds if all of its chained transition 
sequences suc­ceed. The set of processes that succeed is left-closed and closed under arbitrary unions, 
and hence it is a safety property; we denote this safety property by 1. A process p passes a test q if 
p II q succeeds. Note that p passes q if and only if q passes p, and there is no formal distinction between 
tester and test ee. Abramsky has suggested related but opposite def­initions in a GCS framework [Vic88]. 
He proposed taking 1 as the set of processes that fail. Our choice of 1, the processes that do not fail, 
is more appropri­ate for a calculus of safety properties; in our model, Abramsky s -L is not left-closed. 
A negation-like connective ( )1 is habitually de­fined from 1. For an arbitrary set of processes M, the 
standard definition gives: M1={pl VqCM. (pllq) El} In other words, Ml is the largest (the hardest) set 
of tests that M processes pass, and it equals M-o 1. clearly, Ml is always a safety property. When M 
is a safety property, it is easy to understand Ml as a process: M1={ul VvEM. notu=v} where we write u 
_ v (and say that u crashes with v) if u and v have a chained shuffle that fails. As usual, we focus 
on the facts the propositions M such that (M1 )1 = M. A useful characterization of the facts can be given 
in terms of a relation ~. The relation ~ is defined to be the smallest preorder such that: UVJU u(r, 
s)(s, t)v ~ u(r, t)v Uv g U(S> S)v (start, siart)u ~ u u(s, faii) ~ u(s, t)v A safety property M is 
downward-closed if v E M whenever there exists u E M such that u ~ v; as we shall see, M is a fact if 
and only if it is downward­closed. Given a transition sequence u = (sl, tl) . . . (sn, tn), let Ub = 
(t~,sz) . . .(tn-l, sn) if SI = start, and u~ = (start, SI)(il, S2) . . . (tn_l, Sn) otherwise. Now let 
U[ = Ubif tn = fail, and U! = ~b( n, fa2~) oth­erwise. These definitions apply when n = 1, and for example 
(sl, tl)bequals either c or (start, Sl), depend­ing on whether start = S1. In the special case n = O, 
let ~b = c and d = (start, fail). The operations ( )b and ( )! have some convenient properties: Proposition 
4 If w v u then w ~ Ub. Proposition 5Ifw~ uflthen w~u.Ifu_ vand w ~ v then u _ w. Moreover, u _ u!. It 
follows that ( ) ~ behaves almost like set-theoretic complementation: Proposition 6 If M is a downward-closed 
set of transition sequences, then un @ ML if and only if UEM. We obtain also the desired characterization 
of facts: Proposition 7 The set of transition sequences M is a fact if and only if it is downward-closed. 
In classical linear logic, the product @ is required to map facts to facts. Thus, from now on, All @ 
&#38;f2 denotes ((lvfl Ij M2)1)L. Similarly, 1 is ({c}l)l. A redefinition is not needed for the additives. 
If ill and M are facts then ill fl M{ is a fact, and A4 A M is still defined to equal M n M . It follows 
from propo­sition 7 that (( MU M )*)L = (M1)l U(M i)L, and hence we can keep M v ill{ = M U M!. These 
proper­ties of the additives, together with proposition 6, are interestingly reminiscent of the set-theoretic 
models of relevance logic [Dun86]. This concludes the definition of a model of classi­cal linear logic. 
Actually, the model can be viewed in two ways, as a quantale of safety properties or as a phase space 
of processes. The latter option makes us consider sets of processes which are not safety prop­erties, 
but only safety properties are facts; thus, the choice of viewpoint seems unimportant. Composition As 
suggested in subsection 2.2, let E+= EU{u(s, fa21) IuEE, sES) Note that E+ is not a fact in general, 
even when E is a fact. We obtain: Proposition 8 If E and M are facts then E+ M=(E+n M1)L This description 
of + leads to a general Composi­tion Principle for the classical linear calculus: where E, El, E2, Ml, 
and M2 are facts. The Princi­ ple follows from its analogue in the intuitionistic lin­ ear logic (but 
is not identical to its analogue, because B has been redefined slightly). In particular, the Composition 
Principle says that (E+ M)c3(M-oE) t (E63M) . If E63M t-l then it also follows that (E -o M) @ (M -o 
E) 1-1, and hence (E+ M) 1-(M+ E)&#38;. Since the converse can be proved too, ifE@M t-l then (E-+M) = 
(M-oE)l. When E = M, this implies that if M @ M fl then (M --e M) = (M+ M)L, and so (M -o M) is self­ 
dual. Furthermore, all self-duals arise thus: if iV is self-dual, then N @ IV I-J-and IV -o N = N. 6 
A Specification Language Here we give a language for specifying safety proper­ ties. The language is 
rather minimal, and is intended as a basis for more practical languages. For exam­ple, certain temporal 
operators are expressible in the language, and it would be quite natural to add ab­breviations for them. 
Similarly, state machines can be coded and some syntax for them might be useful. We treat the calculus 
of behaviors first. As in [Lam90], we assume a fixed first-order signature and assume that there are 
two kinds of first-order vari­ables, primed and unprimed, with a one-to-one cor­respondence x H x between 
the two; these serve for writing act ions. The unprimed variables are those used in section 3.2 above 
to define states. We let A range over the formulas in this language, X over a countably infinite set 
of specification variables, and p over sets of agents. Formulas are ranged over by P and Q, and are given 
by the following grammar: P::= ttlfl]PAQIPVQIP+Ql PP 13x. PI(P:A).P IA-D PIXIPX.P Here we have first 
the propositional connective, then a p-closure operator, then a hiding operator (the quantification 3X 
binds x as well as z), then an agent­action prefix construction, then a guarding construc­tion (where 
no primed variable appears in the guard formula A), and finally, after specification variables, a least 
fixpoint expression (where it is assumed that all occurrences of X are positive, that is, within an even 
number of (. + Q) s). The notation M a p could be adopted as part of the formal logic, but here it remains 
in the metalanguage. All expressions denote safety properties, given val­ues for their free variables. 
Rather than define the semantics formally, we just point out the semantic operations corresponding to 
the syntactic ones. The denotations of the propositional connective are ob­tained by the appropriate 
Heyting operations, and that of p-closure as in section 3. Existential quantifi­cation is as in subsection 
3.2. For prefixing, we define for any p, R~ S2, and M ESa: (P:R).M = {(s) Is= s}U{(s,a,s ) I a ~p, sRs 
} U{(s, a,s ) . u I a c p,sRs , u ~ M begins with s } where (s, a, s ) . (u . (a , s )) = ((s, a, s ) 
. a) . (a , s ) and (s, a, s ) . (s ) = (s) . (a, s ). For guarding, we define for any G~ Sand M ~&#38;.: 
G + M = {C G M Iu begins with an element of G} Finally, pX.P[X] is interpreted as the least M such that 
P[M] = M. There is no difficulty in giving a similar language for process safety properties. For example, 
one may simply add the linear operators @ and -o, plus -+; one drops the p-closure operator and also 
the reference to p in prefixing. 7 Comparisons Corporation Systems Research Center, 1988. To appear 
in Theoretical Computer The intuitionistic logic and the linear logic are based Science. A preliminary 
version appeared on different connective, and on different semantic in Proceedings of ihe Third Annual 
Sym­ models, yet there is a fairly straightforward trans­ posium on Logic In Computer Science, lation 
between them. Let u be a behavior pages 165-177, IEEE Computer Society, Edinburgh, Scotland, July 1988. 
Soasl=+ . ..$n_l Jl!+!+ &#38; [AL90] Martin Abadi and Leslie Lamport. Com- Let tP(a) be the subsequence 
of (so, Sl) . . . (sn-l, s~) posing specifications. Research Re­ such that the transition (si 1, si) 
appears in tp(u)if port 66, Digital Equipment Corporation and only if ai E p. The runs of p with identity 
p are Systems Research Center, 1990. A pre­ the behaviors a such that tp(u)E p. This yields a liminary 
version appeared in [dBdRR90]. map rP : SP -t sb. It has a left-inverse S@ : &#38; --+ SP, which maps 
a set of behaviors to the most general [AV90] Samson Abramsky and Steve Vickers. process that implements 
this set of behaviors, The Quantales, observational logic, and pro­ operations of the two calculi can 
then be related, and cess semantics. Technical report, Impe­ for example rial College, January 1990. 
ibf~ -0 ~~ = s,(rp(kf~) + rp(M~)) [BKP84] Howard Barringer, Ruurd Kuiper, and Amir Pnueli. Now you may 
compose where p is any nontrivial set of agents. temporal logic specifications. In Six- The intuitionistic 
logic captures an external view teenth Annual ACM Symposium on The­ of processes, via their behaviors. 
The notation J4 a p ory of Computing, pages 51 63. ACM, makes it possible to express who is the subject 
of April 1984. a specification. Linear logic specifications describe a process at a time, and hence the 
notion of constrains at most is unnecessary. On the other hand, it be­comes more difficult to express 
that one process is the complete environment of another, and that the sys­ <RefA>[Dam88] Mads Dam. Relevance 
logic and concur­rent computation. In Proceedings of the Third Symposium on Logic in Computer Science, 
pages 178-185. IEEE, July 1988. tem that they form is closed, Such closed systems are [dBdRR901 J. W. 
de Bakker. W.-P. de Roever, and essential in the notion of testing, which then helps in G. Rozenberg, 
editors. Step wise Re­ the analysis of assumption-guarantee specifications. finement of Distributed Systems: 
Mod­ els, Formalism, Correctness, volume 430 </RefA>Acknowledgements of Lecture Notes in Computer Science, Berlin, 
1990. Springer-Verlag. Luca Cardelli encouraged this work in its initial phase, and tried some of the 
ideas in a CCS setting. [Dun86] J. Michael Dunn. Relevance logic and Cynthia Hibbard provided editorial 
help. entailment. In D. Gabbay and F. Guen­ thner, editors, Handbook of Philosophical Logic, volume 3, 
pages 117 224. D. Rei- References del Publishing Co., 1986. [Abr79] K. Abrahamson. Modal logic of con­ 
[Gir87] J.-Y. Girard. Linear logic. Theoretical current nondeterministic programs. In Computer Science, 
50:1-102, 1987. International Symposium on Semantics of Concurrent Computation, Evian-les­ [HP85] David 
Harel and Amir Pnueli. On the de- Baines, July 1979. velopment of reactive systems. In K. R. Apt, editor, 
Logics and models of concur­ [Abr89] Samson Abramsky. Domain theory in rent systems, volume F13 of NATO 
ASI logical form. Annals of Pure and Applied Series, pages 477 498. Springer-Verla.g, Logic, 1989, 1985. 
[AL88] Martin Abadi and Leslie Lamport. The [HP89] Matthew Hennessy and Gordon Plotkin. existence of 
refinement mappings. Re- Finite conjunctive nondeterminism. In search Report 29, Digital Equipment Petri 
Festschrijl, 1989. [Joh82] [Lam83a] [Lam83b] [Lam89] [Lam90] [LT87] [MC81] [Mer90] [MOM89] [Pnu84] 
P. T. bridge 1982. Johnstone. University Stone Spaces. Cam-Press, Cambridge, [Sta85] Leslie Lamport. 
Specifying concurrent program modules. ACM Transactions on Programming Languages and Systems, 5(2):190-222, 
April 1983. Leslie Lamport. What good is tempo­ral logic? In R. E. A. Mason, editor, Information Processing 
83: Proceedings of the IFIP 9th World Congress, Paris, September 1983. IFIP, North Holland. [Vic88] ~et90] 
Leslie Lamport. A simple approach to specifying concurrent systems. Commu­nications of the ACM, 32(1):32 
45, Jan­uary 1989. Leslie Lamport. A temporal logic of actions. Research Report 57, Digi­tal Equipment 
Corporation Systems Re­search Center, April 1990. Nancy Lynch and Mark Tuttle. Hi­erarchical correctness 
proofs for dis­tributed algorithms. In Proceedings of the Sixth Symposium on the Principles of Distributed 
Computing, pages 137-151. ACM, August 1987. Jayadev Misra and K. Mani Chandy. Proofs of networks of processes. 
IEEE Transactions on Software Engineering, SE-7(~:417-426, July 1981. M. Merritt. Completeness theorems 
for automata. In J. W. de Bakker, W.-P. de Roever, and G. Rozenberg, editors, Stepwise Refinement of 
Distributed Sys­tems: Models, Forma lismf Correctness, volume 430 of Lecture Notes in Computer Science, 
pages 544-560. Springer-Verlag, 1990. Narciso Marti-Oliet and From Petri nets to linear cal Report SRI-CSL-89-4R2, 
national, December 1989. Jos&#38; Meseguer. logic. Techni-SRI Inter- Amir Pnueli. In transition from 
global to modular temporal reasoning about pro­grams, In Krzysztof R. Apt, editor, Log­ics and Models 
of Concurrent Systems, NATO ASI Series, pages 123 144, Berlin, October 1984. Springer-Verlag. Eugene 
W. Stark. A proof technique for rely/guarantee properties. In S. N. Maheshwari, editor, Foundations of 
Soft­ ware Technology and Theoretical Com­puter Science, volume 206 of Lecture Notes in Computer Science, 
pages 369­391, Berlin, 1985. Springer-Verlag. Steve Vickers. Samson Abramsky on lin­ear process logics. 
Foundation Workshop Notes, October-November 1988. David N. Yetter. Quantales and (non­ commutative) linear 
logic. Journal of Symbolic Logic, 55(1):41 64, March 1990.   
			
