
 A MICROPROGRAMMING DESIGN LABORATORY Christopher Vickery Queens College of CUNY ABSTRACT Sophisticated 
design aids are available to help automate microprogram development both - for large, complex computers 
and for microprocessor-based systems. These aids include procedures for source code verification, object 
code generation, microprogram simulation, and interactive debugging. For various reasons, such aids 
are generally not well-devel- oped for microprogrammable minicomputers. This paper describes a microprogramming 
lab- oratory developed for the Interdata 85 minicomputer which uses both the minicomputer itself as 
well as the time-sharing and batch facilities of a large computer center. Experience with the laboratory 
has shown that the facility for interacting with a micro- program is as important as the availability 
of complete diagnostic information. The argument is made that design automation aids for microprogramming 
minicomputers could be produced efficiently from standardized assembly and simulation programs. INTRODUCTION 
 The emergence of microprogramming as the preferred method for implementing the control function of 
computers has often been attributed to technological improvements which have produced low-cost read-only 
and read/write control memories. Actually, the state of the art in microprogramming is determined as 
much by the development of good computer-based design aids for firmware generation as it is by the advent 
of inexpensive hardware. In fact, when microprogramming first came into widespread use, memory technology 
lagged behind design automation. Husson reports that microprogramming for the IBM System/360 series 
was done with the aid of the Control Automation System (CAS), which included modules for flow-diagram 
verification and translation, microprogram documentation, and system Simulation, all running on the 
IBM 7090. Yet Husson also reports that at the same time it was the lack of proper ROS technology which 
necessitated that the model 75 be designed with conventional hardware control (Husson, 1970). CAS was 
a sophisticated system even by the standards of a decade later; the simulation system, for example, 
 accepted description files for both hardware and microinstruction formats, and thus could be used to 
serve various microprogrammed machines without modification. A more recently reported design automation 
system for large-computer microprogramming is the MIKADO system at Siemens (Rottman, 1974). Although 
MIKADO is very similar in function to CAS, it has the advantage Of supporting an interactive update 
procedure, whereas CAS was batch oriented. Like the large computer systems supported by CAS and MIKADO, 
microprogrammable micro- processors are also being graced with effective design automation tools. The 
Intel Microprocessor Development System (MDS), for example, allows support hardware and the firmware 
for a microprocessor to be developed concurrently; engineers and microprogram- mers operate interactively 
with the system under development. While the complexity of microprogramming large machines justified 
the development of good design aids for them, at the microprocessor level, "the semiconductor manufacturer 
produces programmable LSI in high-volume, standardized components, (so) he has been able to underwrite 
the high cost of developing automation aids for the industry at large" (Davidow, 1975). Microprogrammable 
minicomputers are caught in the middle ground between high complexity and large production volume, and 
as a result are served by relatively unsophisticated design automation systems compared both to large 
computers and to microprocessors. This paper discusses currently available design aids for microprogrammable 
minicomputers, describes the aids developed at Queens College for microprogramming the Interdata 85 
 (I-85) minicomputer, reports on experience using these aids in undergraduate courses on Computer Organization 
and Microprogramming, and suggests a direction in which development of design aids for microprogrammable 
minicomputers might proceed. APPLICATION AREAS AND DESIGN AIDS AVAILABLE The applications for microprogrammable 
minicomputers include (i) emulation of existing or hypothetical computers, (2) "tuning" a computer to 
a particular application, (3) compilation and/or execution of high-level languages, (4) installation 
of security- sensitive algorithms or data, and (5) laboratory support for education in computer arch- 
 itecture. Design aids discussed below include (i) translators, assemblers, and compilers for generating 
microcode from source documents, (2) loaders and ROM programmers for get- ting the microcode into a 
machine's control memory, (3) test sets, simulators, and debug programs for verifying the correctness 
and efficiency of the microcode. Despite the diversity of applications for microprogrammable minicomputers, 
the choice of the design aids used ina particular situation is normally determined simply by what aids 
are avail- able rather than by the nature of the application. Unfortunately, the availability of design 
aids is more often a matter of what is most economical to produce rather than of which facilities would 
best serve the needs of microprogrammers working in the diverse areas. TRANSLATORS, ASSEMBLERS t AND 
COMPILERS The form of microprogram source code often depends on the nature of the microinstructions themselves. 
Machines with a small degree of parallelism, such as most minicomputers, are well served by a modified 
assembly language with argument fields added to the regis- ter specifications for specifying operations 
such as main memory control that might occur in parallel with the basic register transfers. Flow diagrams 
are usually reserved for more highly parallel machines where the microcode is horizontal in nature. High-level 
languages may provide a more convenient way to represent microinstructions than assembly language; high-level 
microprogramming languages are not, however, necessarily machine independent. An example of the successful 
application of a high-level language format to microprogramming is "Translang," an ALGOL-looking language 
used by Burroughs for microprogramming the D Machine (Bingham, et al., 1970). All the registers, tests, 
and operations available on the machine are keywords in the language, so the user must be thoroughly 
familiar with the architecture of the host machine to write programs. Rauscher (1973) discusses the subject 
of high-level languages for microprogramming further. LOADERS AND ROM PROGRAMMERS The means for getting 
user-written microprograms into control store should be determined by the permanence of the code. Many 
microprogrammable minicomputers give the user com- plete flexibility in this regard: the same object 
tape that can be loaded into read/ write control memory during microprogram development may also be used 
to program pROMs or ROMs when the code is to be installed permanently. TEST SETS, SIMULATORS, AND DEBUG 
PROGRAMS The tools available for microprogram verification are perhaps the most critical in assuring 
an efficient microprogram development cycle. In the verification stage, subtle errors must be located 
quickly and corrections made easily if the microprogrammer's efforts are to be used effectively. The 
need for sophisticated debugging aids contrasts with the acceptability of simple (but correct) aids for 
program preparation and loading; macro-assemblers and relocating/linking loaders are usually superfluous 
because mini- computer microprograms seldom exceed several hundred instructions. The microprogram verification 
tools available to minicomputer users are relatively primitive for two reasons. One is that the manufacturers 
of minicomputers typically write only a small amount of microcode themselves, often just the emulator 
for a machine's native instruction set. A simple hardware test set built for a machine and a diagnostic 
program to exercise the instruction set are all a vendor needs to develop, test, and maintain a resident 
microprogram. Any other microprogramming support is developed as a 114 result of marketing decisions. 
The second reason is that the vendor may underestimate the amount of microprogramming to be done for 
the machine. Dramatic increases in the performance of a computer can be realized by the one-time judicious 
addition of a fairly small amount of microcode (Reigel &#38; Lawson, 1973). If the vendor anticipates 
this type of application for his machine, he is likely to develop inappropriately rudimentary microprogram 
development systems compared to those needed by the user who is engaged in an ongoing effort to develop 
generalized microcoded routines, such as for high-level language processing (Moulton, 1974), or by a 
large number of computer science students. MICROPROGRAMMING LABORATORY FOR THE INTERDATA 85 The microprogramming 
laboratory was developed in the Computer Science Department of Queens College to support instruction 
in both computer architecture and in microprogram- ming. The university environment justified the development 
of a more sophisticated microprogramming system than is normally available for minicomputers. The 1-85 
is equipped with 1024 32-bit words of Dynamic Control Store (DCS) in addition to the 1024 word ROM implementing 
the native instruction set. Microcode can be loaded into DCS through user memory and executed by means 
of special native-mode instructions. The 1-85 at Queens has a card reader, serial printer, industry-standard 
magnetic tape drive, 2.5 Mb disk, and a TTY operator's console. User memory is currently being expand- 
ed from 16 to 32 Kb. The Computer Science Department also has use of the campus Computer Center. There, 
two Xerox Sigma 7s support student jobs in the batch mode with high-speed card reader and line printer 
for input and output; in addition a time-sharing system with sophisticated file capabilities is available 
to faculty and some students. The micro- programming laboratory relies on both the 1-85 minicomputer 
and on the Computer Center facilities for its effectiveness. Approximately half of the programs running 
at the Computer Center (Queens) are also operating at the City university Computer Center's dual IBM 
168 system; the other half are in the process of being brought up there also. The laboratory developed 
over a period of time in an effort to remove successive bottle- necks from the microprogram production-verification 
sequence. The vendor delivered the 1-85 with a stand-alone interactive debug program and a microassembler 
which ran under the supervision of the vendor's operating system (OS). Because the debug program re- 
quired constant reloading of the OS and also because it had fatal bugs in it, the first design aid developed 
was our own interactive debug program, MICROD, which runs under the Interdata OS. MICROD can be used 
to debug both user and microprograms, and it provides the standard repertoire of interactive debugging 
features: memory and register examin- ation and modification, program execution with breakpoints, memory 
search, relative addressing, and address arithmetic. The program operates in either the user (U) or micro 
(M) mode, and the same command codes are used in both modes; the programmer switches modes simply by 
typing "U" or "M." Subroutines, which more than double the size of MICROD from its basic 4Kb size, may 
be linked to provide formatted memory dumps, disassembly, and to load DCS form I/O devices. When the 
DCS loader was written, the vendor's microassembler was modified so that it generates object code more 
convenient for DCS loading than the origanal ROM-programmer format. Once MICROD was operational, the 
bottleneck in the system proved to be the assembly process; the available printer on the minicomputer 
was simply too slow to produce long listings in a reasonable amount of time. For this reason, cross-assemblers 
(user and micro) were written to run at the Computer Center. These assemblers are source and object 
code comparable with their counterparts on the 1-85. Object code can be output on magnetic tape at the 
Computer Center and physically mounted on the 1-85 for loading into the memories. In addition to the 
benefit of using the Computer Center's high-speed peripherals, other advantages result from having the 
cross-assemblers: A large number of users (students) can go through the syntax-error stage of program 
development using the Computer Center's efficient batch system, thus freeing the minicomputer itself 
for interactive debugging purposes. Also, source code can be written and edited easily by those with 
access to the Computer Center's time-sharing system, with syntax checking done online, but with assembly 
listings and object tapes produced by jobs submitted to the batch system from the user's terminal. 
The bottleneck then shifted back to the debugging process, since only one person can use MICROD at a 
time. In addition, the architecture of the 1-85 makes certain of MICROD's facilities less than optimal. 
Various registers of significance to the microprogrammer cannot be examined through MICROD, such as the 
Memory Address Register, User Instruction Register, ALU flags, Control Store Address, etc., and other 
registers have to be destroy- ed any time a breakpoint is encountered in DCS. About 50 words of DCS are 
reserved by MICROD for controlling execution and intercepting breakpoints; furthermore, it was felt that 
the facility for having more than a single breakpoint resident in a microprogram at any one time would 
have encroached prohibitively on available DCS space (user programs are allowed up to 8 breakpoints simultaneously 
active). To solve these problems, a com- plete simulation of the 1-85 CPU and I/O system was written 
to run at the Computer Center. The simulator was written in Fortran so that it might be used at other 
computer centers, despite the price paid in execution efficiency. It supports use in both the batch and 
time-sharing modes, and its features include full timing information, micro and user instruction disassembly, 
a printed trace of micro registers, floating-point registers, and formatted dumps of control store and 
user memory. The execution-time trace of these data can be controlled as a function of simulated execution 
time, the value of the microprogram counter, and the value of the user program counter. A control language 
preprocessor, which can be invoked during simulation if the user is under the time-sharing system, builds 
tables to turn the various trace options on and off at the desired points in the simulation run. To save 
execution time, the simulator detects and promptly exits I/O wait loops in either micro or user code. 
A special loader puts any combination of microprograms and user programs into the simulator's memories 
from the Xerox system's files, which contain object code generated by the cross-assemblers. Real- to-simulated 
execution time ratios depend on how much formatting of printed output is required for the trace options 
in effect and on the number of I/O wait loops in the simulated code. For example, simulation of a compute-bound 
microprogram runs with a speed ratio of approximately i0,000:i if no trace display is output at all, 
but about 400,000:1 if a full trace (all register values shown for each microinstruction executed) is 
required. With no trace, 25,000 microinstructions can be simulated in less than one minute of Sigma 7 
execution time. Simulation of I/O bound programs, on the other hand, may run in near real time because 
of the wait-loop exits mentioned above. A simulation run terminates either when a chosen simulated execution 
time limit is reached, when a "Power Down" microinstruction is encountered, when a wait loop is entered 
with no I/O operation pending (endless loop), or when a simulated I/O device controller requests input 
data after the simulator has exhausted the input data set. EXPERIENCE WITH THE LABORATORY The microprogram 
development laboratory has been used by students in undergraduate courses on microprogramming for two 
semesters. The students have been able to use MICROD interactively on the 1-85, and could use the cross-assemblers 
and simulator in the batch mode at the Computer Center." (The 1-85 is in the room next to where batch 
 jobs are submitted to the Sigma 7.) Projects in these courses have included emulators (Sigma 7, System 
360, PDP-8, Nova-2, etc.) and special instruction sets for the 1-85 (symbol table manipulations, string 
operations, vector arithmetic, etc.) among others. Students in the Computer Architecture course have 
had "hands on" use of a computer studied in class by emulating that computer on the 1-85 and providing 
a simple inter- active debug program to drive the emulator. One architecture handled this way has been 
 the hypothetical SIC computer described by Hill and Peterson (1973). Students doing microprogramming 
have been generally free to use the various resources of the laboratory as they wished, and a common 
pattern has developed: to use the cross- assemblers to get listings, to reassemble on the 1-85 with 
no listing just to get the object code on disk, and to debug using MICROD. Two factors msy account for 
the pref- erence for MICROD over the more-informative simulator: (i) this course is the students' first 
chance to use any computer hands on, and they enjoy doing so, and (2) the simulat- or has been cumbersome 
to use in the batch mode, with the control language processor under revision and poorly documented at 
the time. Those people who have had access to the simulator on-line, however, generally prefer using 
it to MICROD. MICROD can be run on the simulator, but no one takes advantage of this very often. We 
conclude that the amount of information available to the persondebugging is less important than the 
 ability to interact with the program being tested. Also, there is no evidence that the 116 nature 
of the microprogram being developed, emulator or instruction set extension, affects users' preference 
for the debug program or the simulator. The debug program required roughly 25% of the programming time 
to produce compared to the simulator, and would thus normally be the preferred type of verification 
tool for eco- nomic reasons. However, this preference holds only if three conditions can be met: (i) 
 the architecture of the machine should make it possible to save all elements of the processor state 
relevant to the microprogram at breakpoints or interrupts, (2) the machine must be available for dedication 
to single-user program development, and (3) timing statistics mus£ not be of importance in verifying 
the satisfactory performance of the microprogram. A carefully built simulator lifts these three conditions 
from the microprogram development environment, but has its own constraints: (i) a large computer system 
must be available to host the simulator, (2) the poor real-to-simulated execution ratios in such a system 
must be tolerable, and (3) the simulator must be good enough to assure that a microprogram which runs 
correctly on the simulator has a very high prob- ability of running correctly on the minicomputer hardware. 
These constraints, in turn, could be relaxed by developing a simulator which operates interpretively 
on the mini- computer itself, but then the considerations listed for an interactive debug program reappear. 
 The main hindrance to building effective simulators is the costly time necessary to implement the detailed 
structure of the computer of interest. To this end, efforts to h advance the state of the art, "user 
microprogramming of minicomputer," s2uld be directed toward the development of generalized compilers, 
assemblers, and simulators which may be tailored to each particular microinstruction repertoire and hardware 
configuration by means of appropriate declarative information. Advances in high-level-like languages 
 for microprogramming and in compilable hardware description languages will be the keys to this development. 
 REFERENCES <RefA>Bingham, H. W., Davis, R. L., Faber, U., Fisher, D. A., McGonagle, J. D., Reigel, E. W., 
 and Zucker, S. "Microprogramming manual for interpreter based systems" Paoli, Pa., Burroughs Corp., 
1970. Davidow, W. "The coming merger of hardware and software design" Electronics, May 29, 1975, 91-94. 
 Hill, F. J. and Peterson, G. R. Digital Systems: Hardware Organization and Design, New York: wiley, 
1973. Husson, S. S. Microprogramming: Principles and Practices, Englewood Cliffs: Prentice- Hall, 1970. 
 Moulton, P. "Microprogrammed subprocessors for compilation and execution of high-level languages" Preprints 
of the Seventh Annual Workshop o__nn Microprogramming, 1974, 74-79. Rauscher, T. G. "Towards a.specification 
of syntax and semantics for languages for horizontally microprogrammed machines" Proceedings of the ACM 
SigFlan-Sigmicro Inter- face Meeting, 1973, 98-112. Reigel, E. W. and Lawson, H.W. "At the programming 
language - microprogramming inter- face" Proceedings of the ACM Sigplan-Sigmicro Interface Meeting, 
1973, 2-22. Rottman, W. "MIKADO: A system for computer aided microprogram design" Preprints o__~f the 
Seventh Annual Workshop o__n_n Microprogramming, 1974, 74-79</RefA>. 
			
