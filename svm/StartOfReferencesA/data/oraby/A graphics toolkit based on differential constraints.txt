
 A Graphics Toolkit Based on Differential Constraints Michael Gleicher School of Computer Science Carnegie 
Mellon University Pittsburgh, PA 15213-3891 gleicher@cs. cmu. edu ABSTRACT This paper describes Bramble, 
a toolkit for construct­ing graphical editing applications. The primary focus of Bramble is improve support 
for graphical manipula­tion by employing differential constraint techniques. A constraint engine capable 
of managing non-linear equa­tions maps interactive controls and constraints to object parameters. This 
allows objects to provide mathemati­cal outputs that are easily composed, rather than exposing their 
internal structure or requiring special purpose inter­action techniques. The model of interaction used 
with the differential approach has a continuous notion of time, which provides the continuous motion 
required for graphi­cal manipulation, Bramble provides a LISP-like extension language and support for 
other application features such as windows and buttons, The paper concludes with ex­amples of interaction 
techniques defined in Bramble and applications built with Bramble. KEYWORDS: toolkits, graphical editors, 
constraints, in­teraction techniques 1. INTRODUCTION The range of graphical editing applications continues 
to ex­pand as hardware to support them becomes more widely available. In addkion to common applications 
such as drawing, others such as architectural layout, scene com­position, solid modeling, simulation 
and animation will also become available to users. As graphical applications Permission to copy without 
fee all or part of this matwial is granted provided that the copies are not made or distributed for direct 
commercial advantaga, tha ACM copyright notice and the title of the publication and its date appear, 
and notice is given that copying is by permission of the Association for Computing Machinery. To copy 
otherwise, or to republish, requires a fee and/or specific permission. .. ~ 1993 ACM 0.89791 .628 -)(/93/~01 
1...$1.50  become more available, they will need better interfaces. Advances in computer hardware offer 
opportunities for such improvements. For example, advanced graphics sys­tems allow realistic images to 
be generated fast enough for use in interactive settings. Similarly, the numerical performance of new 
processors make the use of constraint techniques practical, Constraints make a powerful addition to the 
interaction techniques available in graphical editors. They can also impact how interactive systems are 
constructed and in­teraction techniques developed. However when adding constraints to systems, the essential 
character of direct manipulation editing must be preserved. Systems must be smooth, fast, responsive 
and reactive. This paper describes Bramble, a toolkitdesigned to support the development of graphical 
editing applications, with features ,such as geometric constraints, snap-dragging, dif­ferential controls, 
and animation, Bramble is designed to explore how numerical constraint techniques can effect the construction 
of graphical editors and the development of interaction techniques. Figure 1 shows MechT y a Bramble 
application. Mech-Toy allows the user to sketch planar mechanisms and ex­periment with their behavior. 
Its direct manipulation in­terface is similar to that of a drawing program; however the graphical objects 
are designed to look like the symbols that appear in mechanics textbooks. The interface infers connections 
between pieces as they are sketched. Bram­ble s non-linear constraint techniques permit the user to play 
with and animate the gadgets once they are drawn. 1.1. The Differential Approach The core of graphical 
editing applications is the manipu­lation of graphical objects. The desired interface for this is typically 
direct manipulation: interactions where ob­jects move with continuous motion that is coupled to the 
November 3-5, 1993 UIST 93 ~lgure 1: The Mechlby application permits user to sketch a planar mechanism 
and experiment with its behavior. user s actions, such as dragging. Bramble s focus is on supporting 
this graphical manipulation, although it does provide support for other parts of applications such as 
dis­play lists, views, hierarchies, buttons, and windows. To support graphical manipulation, Bramble 
take a a defer­ential approach, in which constraint techniques are used to support direct manipulation. 
Graphical objects have many real-valued aspects in which a user may be interested. Even a simple line 
segment has a range of aspects which a user may want to specify, such as the positions of the endpoints 
or midpoint, or its length or orientation. Users may also be interested in aspects of groups of objects, 
for example the distance between the centers of two circles. Controls are the aspects which the user 
directly specifies or manipulates. The configurations of each graphical object is represented by a vector 
of real-valued parameters called its state vector There is typically a choice in how objects are represented. 
For example, we might represent the configuration of a line segment by the positions of its endpoints, 
by the location of its center, its length, and its angle. The choice of representation is an implementation 
concern, but ideally should make no difference to the user. The basic idea of the differential approach 
is that objects are manipulated by constraining and controlling their as­pects. Objects provide a variety 
of aspects as potential controls. The user can choose which to specify, either by constraining their 
values or by interactively dragging them. These constraints and controls can be combined arbitrarily. 
The differential approach gives the user more flexible and task specific controls, which can be mixed 
and matched as convenient for their problems. The constraint engine used in the differential approach 
maps the constraints and controls into changes in the ob­jects parameters. The use of the engine allows 
all access to the objects configuration to be accomplished via their aspects. Because the interface is 
in terms of aspects, rather than representation, programmers have the freedom to se­lect object representations 
based on implementation con­cerns, yet still provide desired interfaces. System pieces are designed in 
terms of generic aspect types rather than specific objects. Simply permitting the user to specify values 
for aspects is not a practical basis for interaction. Instead, we prefer that aspects are controlled 
so that objects move with con­tinuous motion, This appears to be important for usability concems[l 1]. 
It also permits implementations using sim­pler numerical techniques[14]. Therefore the differential approach 
takes a continuous view of time, unlike most approaches to graphical interaction. Discrete events alter 
the way objects move, rather than directly altering their configurations. Interaction techniques are 
defined by ap­plying constraints and controls to aspects at appropriate instants, and permitting these 
actions to operate on objects over a duration of time. Benefits of the differential approach are demonstrated 
by the example shown in Figure 2. Consider the task of aim­ing the light from the Luxo lamp. The user 
of a traditional 3D system would do this by adjusting the joint angles of the lamp. However, an application 
built with Bramble permits the user to directly manipulate the light direction, for example by dragging 
the place on the ground where the light points. As the user drags this control, Bramble s differential 
constraint engine adjusts the lamp s joints ac­cordingly. The floor target is just one of the many aspects 
 *, Figure 2: A lamp is manipulated by dragging the point at the center of where its light hits the floor. 
The joint angles are adjusted based on the manipulation of the light s target. of a directional light 
source which can be used for man­ipulation. The developer of the light source object need only provide 
aspects, as Bramble s constraints and control techniques connect to these. In fact, since aspects can 
be defined in terms of other aspects, the directional light con­trols were defined in terms of the bulb 
s position and tip, so the light can be manipulated in any fixture in which it is placed. The Bramble 
toolkit was built to explore applying the differential approach to interactive graphical applications. 
This paper examines this approach, and describes some relevant aspects of the toolkit. Following a brief 
revie w of related work, the differential approach will be introduced in more detail, and its notion 
of time will be discussed. Pieces of Bramble will be described, including its embed­ded interpreter and 
standard set of graphical objects. The paper concludes with examples of how interaction tech­niques can 
be defined with Bramble s differential approach and of applications built with Bramble. 2. RELATED WORK 
Since the earliest interactive graphical editors, systems have attempted to provide sophisticated editing 
featnu es. Sketchpad[33] introduced not only direct graphical in­teraction, but also constraints and 
snapping. Since this ground-breaking application, direct graphical interactions have been continually 
refined and have become commonp­lace in systems. Although constraint techniques have been limited to 
research systems such as [27], there is now a renewed interest in combining constraints with direct manipulation 
interfaces [l, 2, 9, 11, 23]. Several toolkits have been developed to support the devel­opment of graphical 
editors at a higher level than low level graphics toolkits such as GL[21] or PHIGS[8]. Tools such as 
Garnet [26], Coral [34], Unidraw[35], ArtKh [ 16] and Inventor[32] provide services for graphical applications. 
Like Bramble, such tools allow developers to work with abstractions which correspond directly with components 
of editors, such as graphical objects and views. Several of these toolkits contain support for advanced 
interface techniques, such as ArtKit s snapping or Inventor s 3D manipulators. However, unlike Bramble, 
none of these toolkits provide non-linear constraints or support for both 2D and 3D applications. Previous 
toolkits have attempted to aid in the develop­ment of interaction techniques, and their incorporation 
into systems. For example, Garnet provides a basic set of interactors[25] from which more complex behaviors 
can be constructed. Inventor s manipulators[32] prcwide a method for coupling predefine interaction techniques 
with graphical objects. UGA[ 10] allows prototyping 3D interaction techniques procedurally. Like Bramble, 
GITS [28] defines interaction techniques with constraints; how­ever it is limited to the design of 2D 
widgets and it precom­piled constraint solutions. In [37], interaction techniques are interactively linked 
together in a constraint-like fash­ion to build more complex 3D widgets. Graphics toolkits such as Garnet, 
Coral, MEL[l 8], and ThingLab 11[24] have employed constraints to aid pro­grammers, for example by maintaining 
consistency be­tween program data structures. Bramble, in contrast, tar­gets constraints as a user service. 
Therefore, the type of constraints Bramble provides is quite different than that of these other toolkhs. 
Bramble provides support for gen­eral non-linear equations, whereas other toolkits have em­ployed propagation 
solvers which solve restricted classes of equations, but with potentially better scalability and performance 
characteristics. The differential constraint methods used in Bramble are discussed in [13] and [14]. 
Providing an embedded interpreter in an interactive ap­plication is not an uncommon technique. Well known 
examples of such systems are Gnu-Emacs and AutoCAD, which provide LISP interpreters for extensions. Graph­ics 
toolkits which center around such interpreters include Tk[30] and ezd[3]. Like Tc1[29], the Whisper interpreter 
used in Bramble is designed as a language specifically to be embedded in interactive systems. 3. USING 
THE DIFFERENTIAL APPROACH The differential approach aims to provide more flexible methods for the manipulation 
of graphical objects by per- rnitting constraints and controls on aspects of objects, rather than just 
directly on their parameters, and permitting these constraints and controls to be combined. Aspects are 
determined by functions of the state vector. Sometimes these functions are defined directly, but of­ten 
they are composed of other aspect functions, This composition affords an important modularity by allow­ing 
constraints and interaction techniques to be defined in terms standardized connectors, rather than individual 
objects. For example, graphical objects can provide the positions of points as outputs without knowing 
what will be connected, and interaction techniques can be defined in terms of point positions, without 
knowing what types of objects these points come from. An example is illustrated in Figure 3. 3.1. Interaction 
Via Constraint Switching The differential approach permits users to control how combinations of aspects 
evolve over time. Interactions are defined by altering the set of controlled aspects, then letting this 
control alter the objects over a period of time. Two basic actions are used to describe the rate of change 
in the aspect. Aspects can either be driven towards a particular value, or forced to follow a moving 
target. These basic differential interactors serve as building blocks for interaction techniques. The 
follow differential interactor is used to tie an aspect to an input device or animated path. The g~towatis 
interactor is used to set an aspect to a desired value and constrain it to stay there once it achieves 
that value. The configurations of graphical objects are changed by the effects of the differential interactors 
over time, as dis­cussed in section 3.3, At discrete instants, the set of acting differential interactors 
is altered, but not the values in the state vectors. Interactions are created by connecting dif­ferential 
interactors to aspects in response to particular cues, and permitting time to advance so that the inter­actors 
can affect the variables. For example, dragging is accomplished by creating afollow differential interactor 
between a point position aspect and the mouse when a but­ton is pressed, and removing this interactor 
upon release. More examples are provided in section 8. More complex differential interactors are created 
by rules which switch a basic interactor on and off as needed. For example, an inequality constraint 
on an aspect can be cre­ated by turning on a basic interactor which forces the aspect into the allowed 
region when the boundary is exceeded. Another compound interactor turns on a constraint which forces 
an aspect to a precise value when it is close, but releases the constraint when another interactor opposes 
it enough, This snapping interactor gives the feel of gravity seen in Snap-Dragging[S]. The set of differential 
interactors is small and somewhat fixed. The set used in Bramble is go towanis, follow bound, snap, and 
click. The interactors may be attached to any aspect. The range of interaction techniques results not 
from extending this set, but rather from the aspects to which they are applied and how they are switched 
on and off. 3.2. Aspects and Snap-Together Math Aspects are the subobjects which Bramble s graphical 
ob­jects provide for other objects to refer to. They provide the numerical values of some feature of 
an object. The two types of connections to these ports are differential interactors and other aspect 
producing objects. Aspects, therefore, must provide sufficient means for solving differ­ ential constraints 
and for composing other aspects. Meth­ ods providing the values and derivatives with respect to the state 
variables are sufficient. Bramble is built with a mathematical toolkit called Snap­TogetherMathematics[l 
5] which permits the dynamic def­inition of mathematical functions and rapid evaluation of these functions 
and their derivatives. Aspects correspond exactly to the functional outputs of Snap-Together Math. Functions 
are built by composing other functions together. At a low level, one might consider building functions 
out of basic mathematical primitives such as addition; how­ever, composition occurs at higher levels 
of abstraction when aspects are defined as functions of other aspects. Briefly, Snap-Together Math permits 
functional elements to be connected together to form larger functions, effec­tively wiring the blocks 
into an expression graph. Indi­vidual functional elements need only compute their local functions and 
derivatives, and the global values are com­puted by a composition process which traverses the graph. 
Functions for local derivatives can be generated automat­ically by code generating tools, These smaller 
derivative matrices are assembled into the larger results by a process called automatic differentiation 
[22]. For performance, Snap-Together Math exploits sparsity in the derivatives and employs caching. Snap-Together 
Math also provides support for managing sets of state variables. This is important since principles of 
object-oriented encapsulation suggest distributing the state among the objects to which it belongs, while 
the nu­merical algorithms require the state to be in a single vector. Snap-Together Math addresses this 
dichotomy by permit­ting objects to maintain their own local state vectors, but Deferential Interactors 
DonJt ,--------.........---  Change -. ---- .-...­ c=lpl-p21 --%. .a - Distanee -----­ .,,:> Aspects 
... ,,: -ix Distance ..-,, ! .- ,~ ,., -., Follow Mouse ,<-,., ,., [ AA : .,<. ,,  I W4J ,. X=S2 
X=(XI +s2)/2 x=x x=xF y.y2 y=(yl +y2)/2 >~c y=y y=y+r Endpoint Midpoint : Center 1. Top Point ~ Line 
m~l .. J ![ Circle q) ..... ----;.. .­ ------..-- -.... ---.,./---­ .... : ...------­ --------~--: -... 
! ...=­ -.<---Graphical Objects State Variables figure 3: Aspects permit defining constraints independently 
of the objects they relate. In the example, the distance constraint graphical object is defined in terms 
of genetic 2D points. The differential interactors are similarly defined to connect to a variety of aspects, 
gathers these variables into a global vector for computa-associated aspects. It determines how the state 
variables tions. Selectively gathering variables permits limiting the should be altered to achieve the 
effects specified by the in­scope of computations for perforrnance[12]. teractors. All of the variable 
dependencies are determined via the derivatives of the aspects. The mathematics for It is important to 
emphasize that aspects are the interface such calculations are described in [13] and [14]. for how objects 
are controlled. Differential interactors and aspects only need to inquire the value and derivatives The 
differential interactors specify how values should be of aspects that they connect to. This is very important 
changing at a given moment, their time derivatives. This from the standpoint of modularity. Objects can 
provide is integrated over time by an ordinary differential equation aspects of various types, without 
concern for what will be (ODE) solver. Snap-Together Math makes a variety of connected to them. Interaction 
techniques and compcmnd solvers available. aspects can similarly be defined in generic terms. For example, 
a dragging interaction or distance constraint can Bramble uses a single differential engine for controlling 
all objects in the system. Viewing parameters, lighting, objectbe defined in terms of the positions of 
points on objects and can be connected to any aspect of any object that configurations, material surface 
properties, and animation reports a position. Connections for such art arrangement motion paths are all 
treated uniformly. The engine merely sees mathematical functions of state variables, without are depicted 
in figure 3. regard for what they do. 3.3. Brambie s Differential Engine To Bramble, the differential 
solving engine is a black box. The developer of an application need not understand the mathematics inside 
it. In fact, application developers The Snap-Together Math library provides a differential rarely need 
to concern themselves with derivatives. In constraint enginel which is used by Bramble. The en­cases 
where new functions need to be defined to com­ gine keeps a list of active differential interactors and 
their pute new types of object aspects, the derivatives can be generated automatically. 1we (ti~l~eusingthetermsolver, 
astbe enginedoesnotsimplysolve systemsof non-linearequations. the center of the object, a vertex, or 
a point on its surface. In addition to providing its position, a Distinguished-Point object may provide 
many other aspects, such as the surface normal and tangents at the point. Although these quantities are 
affected by the transformation hierarchy, Drawable objects need only define aspects of Dist in­gui shedPoint 
in local coordinates as hierarchy mecha­nisms automatically perform the required transformations. Some 
less obvious aspects for points are discussed in sec­tion 5.1. Interaction techniques and constraints 
are typ­ically defined in terms of Dist inguishedPoints, so they can be applied to any object. Rather 
than their own manipulation techniques, objects merely need to provide these aspects. Bramble predefine 
a variety of basic object types, along with standard aspects with which to manipulate them, For example, 
the 2D set includes lines, circles, rectangles, ellipses, and polygons, as well as a general parametric 
curve class which only requires providing the parametric function (see [13]). Standard 3D objects include 
cones, tori, cylinders, etc. Polyhedra can be defined in several ways, including readers for several 
data file formats. Geometric constraints are represented by Drawable ob­jects which create associated 
differential interactors on some of their aspects. For example, a connection con­straint would take two 
Di.st in~i shedPoint position aspects, and compute the difference as an aspect. When created, it would 
also create a go towards interactor on the distance aspect to maintain the constraint, as well as providing 
a method for drawing itself. Bramble includes many basic constraint objects in two and three dimensions, 
including point connection, distance, collinearity, normal or tangent alignment, and parallel. Inequality 
constraints in the basic set include constraints to keep points inside many of the basic shapes. All 
of these constraints op­erate generically on Dist ingui shedPoint aspects so they can be attached to 
many types of objects. Cameras are a special subclass of Drawable. They pro­vide special aspects which 
define a viewing transformation matrix. For perspective transformations, the position, of the camera 
in worldspace can be determined from this mat­rix, so the camera can be drawn and manipulated as a scene 
object. Cameras can also provide a variety of aspects for controls, many of which are examined in [14]. 
Bramblle s basic object set includes many varieties of cameras, in­cludlng orthographic transformations 
(which are required for viewing in 2D), and many of the standard perspective representations. 5.1. Objects 
for 3D interaction Bramble provides a standard set of objects and aspects to support basic 3D interaction. 
The goal is to provide a fast and easy interface for 3D experimentation. The basic interface has a particular 
style, which derives from systems we have built in our lab over the past few years and is shown in Figure 
4. Applications can use or ignore these interface elements. An important part of Bramble s 3D interface 
is a floor called the groundpkme and an optional back wall. This reference object defines the coordinate 
system and gives the user a reference frame called a stage[ 17]. To further aid the user s perception 
of 3D objects, Bramble can draw shadows on these reference objects. These plane shadows can be easily 
generated with the available hardware using techniques described in [6]. Bramble s shadows can either 
be simple drop shadows, or shadows computed from the positions of the light sources, The positions of 
shadows are computed as aspects, so they can be directly constrained and manipulated, an interaction 
technique shown in [ 17]. In Bramble, shadow manipulation can be used to control light sources as well 
as objects. The follow interactor permits the user to couple the motion of an aspect to the motion of 
an input device. An aspect which represents a position in 3 space could be connected to a 3D input device, 
although we typically only have a mouse. Bramble s standard 3D input technique uses the mouse along with 
a special graphical object called the mousepole. The mousepole is a vertical line which extends from 
the floor to the mouse position. The line is used to provide feedback of the 3D location. As the mouse 
is moved, the pole tracks it, with the top point moving parallel to the groundplane. When a designated 
elevator button is held down, the pole top moves in a vertical plane instead of front-to back. The tip 
of a mouse pole can be tracked by a differential interactor. Another method for controlling 3D objects 
with the mouse is via Through-the-Lens (TTL) controls. Through-the-Lens controls are special aspects 
of Distinwished-Point objects which compute where the point appears on the screen in a given view. In 
[14], these controls are discussed for manipulating cameras. However, by con­straining the camera s configuration, 
the controls can also be used to manipulate objects. Because they only specify 2 dimensions, TTL controls 
are not sufficient to form a 3D interaction technique. However, they serve as a building block, which 
when combined with other constraints, can be used to describe 3D interactions. An example is the axis 
translation handle described in Section 8. IHgure 4: The Tinkertoys application demonstrates Bramble 
s standard 3D interface. The user manipulates the point objects using the mousepole. A groundplane and 
shadows are provided to help depth perception. Lights are special Drawable objects. Like cameras, lights 
often have positions in the world and can be de­picted in the scene (exceptions being distant and ambient 
light sources). Light objects provide aspects fortheirpo­sition, orientation, and intensity which Bramble 
uses to configure the hardware lighting support for drawing. We have been exploring different aspects 
to provide useful lighting controls. For example, spotlights can be manipu­lated by dragging the ellipse 
of their umbra on the ground plane, as shown in Section 1.1 and Figure 2. Another experimental control 
is providing the result of the light­ ing calculation at points as an aspect, allowing a user to directly 
control the color that a point appears, Bramble also has special mirror objects. Using a tech­nique similar 
to that used for shadows, Bramble can draw reflections in a planar mirror. Like shadows, the positions 
of objects in the mirror are aspects which can be directly controlled and constrained. Reflection aspects 
affect the mirror, the reflected object, and the camera. Although Bramble cannot draw reflections on 
curved surfaces, it can generate input for renderers which can. Bramble therefore contains some special 
aspects to aid in positioning reflec­tions. Dist inguishedPoints can compute an aspect which, based on 
camera position, computes the reflection ray. By constraining an object to lie along this ray, what appears 
in the reflection can be controlled. By attach­ing a light source to the ray, a specular highlight can 
be positioned. Bramble s facilities to manipulate reflections are unlikely to provide a standard 3D 
interaction technique. They are described here to give an example of how aspects can be created to provide 
unusual, experimental interactions. New aspects can be defined which permit the user to di­rectly control 
some quantity of interest. Similarly, if new methods for position points are developed, they can not 
only be applied to points on objects, but also to other points such as those on reflections and shadows. 
6. AN EMBEDDED INTERPRETER Bramble contains an embedded interpreter for a LISP-like programming language 
called Whispe~ Applications can use the interpreter to provide services to the user, such as customization 
scripts and as a save and load format. The interpreter also facilitates the process of constructing the 
applications, helping to alleviate some of the drawbacks of the environment in which Bramble was constructed. 
Whisper is a programming language akin to Scheme and LISP. The Whisper interpreter is specifically designed 
to be embedded in interactive applications, and is constructed as a toolkit to facilitate incorporation. 
Like Scheme, Whis­per supports dynamic types and lexical closures. It has an extensible type system which 
allows it to manipulate pointers to C++ objects without the need to access their internals. 2Bramblewasconstructedin 
C++ instead of a more dynamic envi­ronment, such as Common LISP or Scheme, because available compilers 
failed to provide the needed numerical performance. Whisper supports first class environments as an 
object sys­tem and a module mechanism. An environment in Whisper is a name space, or a pairing of names 
and values. In order to support Scheme-like lexical closures, environments are hierarchical, shared, 
and automatically memory managed. Whisper allows programmers to directly refer to these ob­jects, and 
to pass them around. Environments are used as objects in Whisper, providing a flexible communication 
mechanism with C++ data structures. The C++ objects in Bramble keep an associated environment with them. 
Often, rather than using C++ fields, objects will store ele­ ments, including parameters, aspects, and 
methods, inside of their carried environment. This permits these elements to be accessed from Whisper 
code and dynamically al­ tered. It also provides a concise and clean protocol for objects to inquire 
about one another. For example, it is possible to determine if an object has defined a particular aspect. 
Hooks in Bramble are pointers to either a C++ function or a Whisper closure. Many parts of Bramble s 
behavior are defined by hooks, allowing them to be altered dynamically. This permits, for example, a 
configuration file to alter the behavior of objects so that new interaction techniques can be prototype. 
7. WINDOWING SUPPORT Most of Bramble is concerned with providing support for the graphical objects which 
the user will actually place into models. However, there are other supporting objects, such as windows 
and buttons, which applications require and Bramble supports. Many other toolkits provide sinni­lar support 
for these things; relevant aspects of how they are handled in Bramble will be mentioned briefly. The 
emphasis in the development of these objects is in provid­ing tools which will allow these parts of applications 
to be built quickly, so that more effort can be concentrated on the development of graphical manipulation 
techniques with the differential approach. Bramble contains an object type called a Frame which represents 
a window system window object. A frame can contain many subwindows. One of these subwindows may be a 
View which is where Bramble draws a depiction of the current state of the graphical objects. Each View 
has an associated camera and attributes which determine how the image is rendered. There can be many 
views at once, but each must have its own camera and frame. A Frame can contain other subwindows besides 
a View. These are used to provide buttons and other widgets around the edges. Examples can be seen in 
the applications de­ picted in the figures. Like the graphical objects, the wid­gets are designed to 
automatically update themselves to maintain a consistent view of the values that they access. For example, 
a button can be created to watch a whisper variable, or a slider can be placed on any aspect to track 
its value. The slider interactor can also control the aspect to which it is connected by creating differential 
interactors in response to mouse clicks. These sliders permit not only dragging an aspect s value, but 
also nailing or bounding it. 8. INTERACTION EXAMPLES With the differential approach, interaction techniques 
are defined by attaching differential interactors to object as­pects at appropriate times. This section 
introduces some of Bramble s mechanisms for defining when to perform these actions by providing examples 
of how interaction techniques are defined. A Distance Constraint: Graphical objects can create associated 
differential interactors when they are created. For example, the distance constraint used as an example 
throughout this paper would be implemented as a graphical object which creates a go towards interactor 
attached to its distance aspect. Dragging: Differential interactors can be created in di­rect response 
to user events. For example, to implement dragging, afollow interactor is created between the mouse and 
the grabbed point when the mouse button is pressed. When the button is released, the interactor is destroyed. 
Constrained Dragging: Differential interactors are used in combination to create more complex behaviors. 
For ex­ample, to rotate an object, the same technique as dragging would be used, except that a differential 
interactor would be used to fix the center of rotation. These additional in­teractors could be created 
and destroyed with the follow, or at the time when rotation mode is selected, or at some other time depending 
on the desired interface. Handles: Aspects can provide hooks to be called when they are grabbed or released 
for dragging. This permits, for example, different points to have different behaviors. This can be applied 
to create special handle objects. As an example, consider creating an axis translation handle like those 
seen in [32] and [10]. These handles are special objects which attach to scene elements and drag them 
along a particular direction when grabbed. To create such a handle, a graphical object is created which 
has an aspect that is some offset from the point it is meant to control. When it is grabbed, it creates 
constraints which force the Figure 5: This application allows users to edit box and ar­row diagrams. 
Constraints not only keep connections, but also prevent boxes from overlapping. point to move only along 
the desired axis. Because the motion is restricted, the two dimensions of the mouse are sufficient to 
specify the translation, so a through-the-lens control can be used. When the point is released, the axis 
constraint is removed. 9. APPLICATIONS IN BRAMBLE This section describes some of the initial applications 
which have been constructed with Bramble. These ap­plications consist of two parts: C++ definitions of 
new object types and aspects, and a Whisper driver. The driver creates some windows and objects, binds 
actions to events, and begins the interactive loop. Boxes and Arrows: Figure 5 depicts a box and ar­row 
diagram editor. This is a popular demonstration for constraint-based toolkits because constraints can 
keep the diagram together as pieces are moved. Because the Dis ­t inguishedPoint aspects to which the 
arrows are con­nected provide curve normal information, the arrows can connect correctly. Unlike systems 
created with most other constraint-based toolkits, Bramble permits non-linear con­straints, such as distance 
and orientation, in addition to simple connections. A special differential interactor uses constraints 
to prevent boxes from overlapping, instead causing them to collide and push one another away as they 
move. Curve Modeling: The program depicted in Figure 6 is a new version of the modeler described in [13]. 
This tool aims to demonstrate how differential methods permit a uniform interface to a wide variety of 
object types. All objects can be grabbed by their points and dragged. The application provides a range 
of objects including not only the typical ones like lines and circles, but also things like spirals. 
New object types can be defined simply by pro­viding their parametric functions and a small amount of 
auxiliary information. Special interfaces do not need to be defined for each object. This applications 
also provides a variety of constraint types. A Mechanism Simulator: The MechToy application, de­scribed 
in Section 1 and seen in Figure 1 is a variant on basic drawing programs. Variants of basic objects have 
been defined so they appear as in textbook illustrations; for example connectors appear as bolts, lines 
appear as linkage rods, and nail constraints appear using the stan­dard grounded point symbol from textbooks. 
The interface is tuned to infer connections between pieces, and to pro­vide motor objects which animate 
when enabled. These features are simple to create with Bramble s abstractions. 3D Tinkertoys: Figure 
4 depicts a simple 3D construc­tion toy which permits users to connect point objects to­gether with distance 
constraints. The intent was to recreate the functionality shown in the system presented in [36]. Tinkertoys 
uses the standard Bramble 3D interface to place and adjust points, and to create constraints. For this 
application, we attempted to design an interface with a minimum set of command keys. In fact, the entire 
application can be used with only the left mouse button and the elevator button for the mousepole. We 
use a simple view control. When the selector button is set to spin, the left mouse button becomes a world 
rotator. Upon mouse down, the center of the universe is pinned down, and a tracking interactor is created 
between the through-the-lens position of the grabbed point and the mouse. This provides an interaction 
similar to the virtual sphere of [7]. A similar control is used for panning. Differential Control Demos: 
To demonstrate experi­ mental interaction techniques, such as reflection and light­ ing control, we often 
need to build small dedicated demon­ strations. Showoflis a Bramble application designed to aid in this 
process. Unlike other applications, Showoff does not create windows or fill the scene with graphical 
objects. Instead, it defines Whisper functions which make it easy for scripts to do these tasks. For 
instance, it defines a func­ tion which automatically creates a framed view, complete with a standard 
camera and buttons along the side to set various viewing modes. Showoff creates commands for finding 
and manipulating object aspects. An example use of Showoff is depicted in Figure 2. The script merely 
creates a window, the pieces of the Luxo Figure 6: This curve modeler allows a variety of objects and 
constraint types. lamp, and the background blocks. Showoff s interface permits the user to control any 
of the aspects provided by the objects. For example, it can create sliders for the bulb s color, or allow 
the umbra circle to be dragged along the floor. In contrast to Tinkertoys, Showoff s interface was designed 
to maximize the number of functions it provides, even though this was done at the expense of usability. 
10. CONCLUSION Graphical editing applications have much common func­tionality. Whh Bramble, it is possible 
to easily create variants of applications. For example, a drawing pro­gram can become a mechanism simulator 
by adding a few new object types and making some minor alterations to the interface. Once a basic application 
is in place, new functionalities can be explored. We believe that there are advantages to exploring interactive 
functionalities in the context of applications, rather than in isolation as is typi­cally done in user 
studies such as [7, 19]. Bramble is good enough to build applications which push the limits of the differential 
approach. Scalability and per­formance are two of the greatest concerns. Integrating the differential 
approach with more common techniques also poses some new issues. However, our main concern now is how 
to use the differential approach. Good interfaces for 3D and constraint-based graphical editors are challenging 
to design. Tools like Bramble make it easier to develop and test interaction ideas, but ultimately are 
merely aids in addressing the issues of application interfaces. The differential approach employed in 
Bramble facilitates experimentation with new interaction ideas. Aspects can be defined easily. Because 
they can be almost arbitrary non-linear functions of one another, there is substantial flexibility to 
define aspects which directly control quan­tities of interest. These aspects can be constrained and controlled 
in combination. Bramble provides mechanisms for employing these controls in the design of interaction 
techniques. It also makes it possible to create frameworks for their evaluation, or to place them in 
realistic settings so they can be used. References <RefA>[1] Aldus Corporation. Intellidraw. Computer Program, 
1992. [2] Sherman R. Alpert. Graceful interaction with graphical constraints. IEEE Computer Graphics 
and Applications, pages 82-91, March 1993. [3] Joel Bartlett. Don t fidget with widgets, draw! Technical 
report, DEC Western Research Laboratory, May 1991. [4] Enc Bier. Snap-dragging in three dimensions. Computer 
Graphics, 24(2): 193-204, March 1990. Proceedings 1990 Symposium on Interactive 3D Graphics. [5] Eric 
Bier and Maureen Stone. Snap-dragging. Computer Graphics, 20(4):233-240, 1986. Proceedings SIGGRAPH 86. 
[6] James Blinn. Me and my (fake) shadow. IEEE Computer Graphics and Applications, pages 82 86, January 
1988. [7] Michael Chen, S. Joy Mountford, and Abigail Sellen. A study in interactive 3d rotation using 
2d input devices. Com­puter Graphics, 22(4): 12 1 1 30, August 1988. Proceedings SIGGRAPH 88. [8] PHIGS+ 
Committee. Phigs+ functional description, revi­sion3.O. Computer Graphics,22(3):125 215,1988. [9] ComputerVision 
Corporation. DesignVlew. Computer Pro­gram, 1992. [10] D. Brookshire Conner, Scott S. Snibbe, Kenneth 
P. Hem­don, Daniel C. Robbins, and Andries van Dam, Three­dimensional widgets. In Proceedings of the 
1992 Workshop on Interactive 3d Graphics, pages 183 1 88, March 1992. [11] Michael Gleicher. Integrating 
constraints and direct ma­nipulation. In Proceedings of the 1992 Symposium on In­teractive 3D Graphics, 
pages 171-174, March 1992. [12] Michael Gleicher. Practical issues in graphical constraints. In PPCP-93: 
Workshop on the Principles and Practice of Constraint Programming, April 1993. [13] Michael Gleicher 
and Andrew Witkin. Differential manip­ulation. Graphics hzte~ace, pages 6 1 67, June 1991. [14] Michael 
Gleicher and Andrew Whkln. Through-the-lens camera control. Computer Graphics, 26(2):33 1 340, July 1992. 
Proceedings Siggraph 92. [15] Michael Gleicher and Andrew Witkin. Supporting numer­ical computations 
in interactive contexts. In Tom Calvert, editor, Graphics Inte~ace, pages 138 145, May 1993. [16] Tyson 
R. Henry, Scott E. Hudson, and Gary L. Newell. In­tegrating gesture and snapping into a user interface 
toolkit. In Proceedings of the ACM SIGGRAPH Symposium on User Interface Software and Technology, pages 
112 121, October 1990. [17] Kenneth P. Hemdon, Robert C. Zelenik, Daniel C. Robbins, D. Brookshire Conner, 
Scott S. Snibbe, and Andnes van Dam. Interactive shadows. In Proceedings of the 1992 ACM SIGGRAPH Symposium 
on User Interjkace Software and Technology, pages 1 6, November 1992. [18] Ralph D. Hill. A 2-d graphics 
system for multi-user interac­tive graphics based on objects and constraints. In E. Blake and P. Weisskirchen, 
editors, Advances in Object Oriented Graphics I: Proceedings of the 1990 Eumgraphics Work­shop on Object 
Oriented Graphics, pages 67 92. Springer Verlag, 1991. [19] Stephanie Houde. Iterative design of an interface 
for easy 3-d direct manipulation. In Proceedings CHI 92, pages 135 142, May 1992. [20] Scott E. Hudson. 
Adaptive semantic snapping-a technique for semantic feedback at the lexical level. In Proceedings CHI 
90, pages 65 70, April 1990, [21] Silicon Graphics Inc. Graphics Libra~ Programming Guide, 1991. [22] 
Masao Iri, History of automatic differentiation and round­ing error estimation. In Andreas Gnewank and 
George Corliss, editors, Automatic Dz~erentiation of Algorithms: Theory Implementation and Application, 
pages 3 16. SIAM, January 1991. [23] Solange Karsenty, James A. Landay, and Chris Weikart. In fernng 
graphical constraints with Rockit. In HCI 92 Conference on People and Computers VII, pages 137-153. British 
Computer Society, September 1992. [24] John Harold Maloney. Using Constraints for UserInte~ace Construction. 
PhD thesis, University of Washington, 1991. Appears as Computer Science Technical Report 91-08-12. [25] 
Brad Myers. A new model for handling input. ACM Trans­actions on Information Systems, 8(3):289-320, July 
1990. [26] Brad A. Myers, Dario Guise, Roger B. Dannenberg, Brad Vander Zanden, David Kosbie, Ed Pervin, 
Andrew Mickish, and Phillipe Marchal. Comprehensive support for graphical, highly-interactive user interfaces: 
The garnet user interface development environment. IEEE Computer, November 1990. [27] Greg Nelson. Juno, 
a constraint based graphics system. Computer Graphics, 19(3):235-243, 1985. Proceedings SIGGRAPH 85. 
[28] Dan R. Olsen and Kirk Allan. Creating interactive tech­niques by symbolically solving geometric 
constraints. In Proceedings of the ACM SIGGRAPH Symposium on User Inte#ace Software and Technology, pages 
102-107,1990. [29] John K. Osterhout. Tel: An embeddable command lan­guage. In 1990 Winter Usenix Conference 
Proceedings, 1990. [30] John K. Osterhout. An X 11 toolkit based on the Tcl lan­guage. In 1991 Winter 
Usenix Conference Proceedings, 1991. [31] William Press, Brian Flanne~, Saul Teukolsky, and William Vetterling. 
Numerical Recipes in C. Cambridge University Press, Cambridge, England, 1986. [32] Paul S. Strauss and 
Rikk Carey. An object-oriented 3d graphics toolkit. Computer Graphics, 26(2):341-349, July 1992. Proceedings 
SIGGRAPH 92. [33] Ivan Sutherland. Sketchpad: A Man Machine Graphical Communication System. PhD thesis, 
Massachusetts Insti­tute of Technology, January 1963. [34] Pedro A. Szekely and Brad A. Myers. A user 
interface toolkit based on graphical objects and constraints. In OOP-SLA 88 Proceedings, pages 36-45, 
September 1988. [35] John M. Vlissides and Mark A. Linton. Unidraw: A frame­work for building domain 
specific graphical editors. In Proceedings of the 1989 ACM SIGGRAPH Symposium on User Interface Software 
and Technology, November 1989. [36] Andrew Witkin, Michael Gleicher, and William Welch. Interactive dynamics. 
Computer Graphics, 24(2): 11-21, March 1990. Proceedings 1990 Symposium on Interactive 3D Graphics. [37] 
Robefi C. Zeleznik, Kenneth P. Hemdon, Daniel C. Rob­bins, Nate Huang, Tom Meyer, Noah Parker, and John 
F. Hughes. An interactive 3d toolkit for constructing 3d wid­gets. Computer Graphics, 27:81-84, August 
1993. SIG-GRAPH 93 video paper. 120 UIST 93 Atlanta, Georgia </RefA>
			
