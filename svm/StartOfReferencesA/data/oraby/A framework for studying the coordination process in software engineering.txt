
 A Framework for Studying the Coordination Process in Software Engineering Claudine Toffolon Littoral 
University, LIL Laboratory, Calais France Te1:+33-1-48-97-28-29 Claudine.Toffolon@dau phine.fr ABSTRACT 
Software engineering is based on many interdependent processes involving many interacting stakeholders 
with conflicting interests and points of view. The management of dependencies between stakeholders activities 
corresponds to the coordination process. This process plays a key role in software engineering notably 
because of the large use of networks, distributed computing and groupware technology. Nevertheless, coordination 
activities are neglected by well established methods and tools in software engineering, which stress 
in particular the technical aspects related to development and maintenance of software systems. In this 
paper, we propose a framework for studying the foundations and the basic activities of the coordination 
process. Since the coordination process consists in managing dependencies between software engineering 
activities, our framework has two major objectives. The first objective consists in identifying the different 
categories of stakeholders and characterizing their interactions and the dependencies between their activities 
resulting from these interactions. The second objective is the description of the appropriate coordination 
activities that can be used to manage these dependencies. Keywords Coordination process, organizational 
procedure, project actor, project space, software model. 1. INTRODUCTION [2] defined software engineering 
as the application of tools, methods and disciplines to produce and maintain an automated solution to 
a real-world problem, called software system. Despite the economic and functional importance of software 
systems in modem organizations, activities related to software engineering are still regarded as complex 
and high-risk activities. The complexity inherent in the software engineering discipline originates from 
three aspects. Permission to make digital or hard copies of all or part of this work for personal or 
classroom use is granted without fee provided that copies are not made or distributed for profit or commercial 
advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, 
to republish, to post on servers or to redistribute to lists, requires prior specific permission and 
or fee. SAC'00 March 19-21 Como, Italy (c) 2000 ACM 1-58113-239-5/00/003>...>$5.00 Salem Dakhli Paris-Dauphine 
University, CERIA Laboratory, France Te1:+33-1-48-97-28-29   Salem.Dakhli@dauphine.fr On the one 
hand, the organizations business processes supported by software are complex and continuously evolving. 
On the other hand, software engineering exists in a larger environment of entire systems involving various 
technical, economic, human and organizational factors. Finally, software engineering is based on many 
interdependent processes involving many interacting stakeholders with conflicting interests and points 
of view. The management of dependencies between stakeholders activities corresponds to the coordination 
process. This process plays a key role in software engineering notably because of the large use of networks, 
distributed computing and groupware technology. Nevertheless, coordination activities are neglected by 
well established methods and tools in software engineering, which stress in particular the technical 
aspects related to development and maintenance of software systems. In this paper, we propose a framework 
for studying the foundations and the basic activities of the coordination process. Since the coordination 
process consists in managing dependencies between software engineering activities, our framework has 
two major objectives. The first objective consists in identifying the different categories of stakeholders 
and characterizing their interactions and the dependencies between their activities resulting from these 
interactions. The second objective is the description of the appropriate coordination activities that 
can be used to manage these dependencies. This framework is based on the software model proposed by the 
authors [7]. The paper is organized as follows. In the first section, we present synthetically the global 
software model used as foundation of our work. Section 3 provides a typology of dependencies between 
software project actors and describes the coordination process we propose to cope with them. In section 
4, we present the workflow system we develop to validate our framework. In section 5, we conclude our 
paper by listing lessons learned from this experience and future research directions. 2. THE GLOBAL SOFTWARE 
MODEL The global software model proposed by the authors [7] is a framework which uses the economic agency 
theory [1] [9] to identify the stakeholders involved in software systems development and operation, and 
describe the relationships between them. Applying agency theory in analyzing information technology role 
in modern organizations demonstrates that software engineering is governed by a set of contracts among 
actors concemed with the software system to be developed or maintained. At a given time, each project 
actor plays the role of consumer (principal) or producer (agent) under the contracts 851 which link 
him to the other project actors. So, a software development or maintenance project is a nexus of contracts 
among different actors with conflicting interests and points of view. The discrepancies between the project 
actors objectives are partly the source of software engineering inconsistencies and related agency costs. 
A preliminary condition to cope with these inconsistencies is to identify the different actors concerned 
with the software project as well as their objectives (e.g. what they expect from the project). By another 
way, the global software model refers to the software dimensions theory [8] to represent all the aspects 
of software in particular economic, organizational and human aspects. [8] has identified ten major aspects 
of software or dimensions. These dimensions has been determined on the base of a deep analysis of the 
effects of the software crisis and organizations, that mean interrelations between all organizational 
components (structural, tasks, individual, technical), environment and information technology. Those 
ten dimensions concern altogether the software process and the artifacts produced by this process. The 
process' dimensions (cost dimension, delay dimension, technical dimension, communication dimension and 
organizational dimension) and the product's dimensions (functional dimension, human dimension, economic 
dimension, organizational dimension and temporal dimension) demonstrate that a same software may reflect 
many different realities which depend on the organizational, social and economic contexts of its use 
and exploitation. The software dimensions theory explains the software crisis and provide an a priori 
decision oriented analysis tool which permits a classification of dimensions on the basis of the nature 
of the software and the characteristics of its use and operation contexts. This theory provides also 
an a posteriori analysis and evaluation tool based on the software components evaluation in relation 
to dimensions, which permits setting off an iterative improvement process of software artifacts and preliminary 
choices. To build the global software model, [7] notice that software development methodologies in use 
make a confusion between four businesses: the customer's business, the end user's business, the developer's 
business and the architect's business. Elimination of this confusion leads to identify four different 
spaces representing respectively these four businesses: The problem space where are defined the customer/end 
user's problem and its organizational solution. This space represents the customer's business. The solution 
or architectural space where are defined computer solutions of the customer/end user's problems. This 
space represents the architect's business. The construction space where these solutions are implemented. 
This space represents the developer's business. The operation space where are evaluated the software's 
usability from the end user's perspective as well as its contribution to the organization's competitiveness. 
This space represents the end user's business. Besides, each software project is represented in the 
four spaces by a static part, a dynamic part and actors. In each space, project's dynamic part relates 
to the software engineering process, project's static part is composed of software artifacts issued from 
this process, while project's actors are human resources concerned with this project. Each actor may 
have two categories of roles: producer (agent) or consumer (principal) of software artifacts. A role 
played by a project's actor in one of the four spaces is either principal or secondary. In each space, 
it is possible that a project has many actors assuming secondary roles, but there can be only one project 
actor involved in a principal role. Moreover, an actor can play a secondary role in many spaces, but 
a principal role only in one (every actor play the principal role in some space). The project actors 
and the four spaces interrelations are illustrated by a tetrahedron (USAD) where each face represents 
one space and each vertex represents a type of user (Figure 1). Each line of the tetrahedron (USAD) shows 
the interaction between two project actors belonging to the same space and each space is designated by 
a three letters acronym where the second letter corresponds to the project's actor playing the principal 
role in this space. According to this figure, the correspondences between spaces and actors are the following 
: In the problem space (USA), the stakeholder/customer (S) plays the principal role while the user 
(U) and the architect (A) play secondary roles.  In the solution (architectural) space (SAD), the architect 
 (A) plays the principal role while the stakeholder/customer (S) and the developer (D) play secondary 
roles.  In the construction space (ADU), the principal role is played by the developer (D) and the secondary 
roles are played by the architect (A) and the end user (U).  In the operation space (DUS), the principal 
role is played by the user (U) and the secondary roles are played by the developer (D) and the stakeholder/customer 
(S).  The correspondence between the four spaces and the tetrahedron's (USAD) sides originates from 
the iterative progress of the software development process, designated by the acronym ~ PACO ~ (Problem-Architecture-Construction-Operation): 
the definition of a computer solution of an organizational problem permits the transition from the problem 
space to the solution space, the implementation of this solution expresses the transition from the solution 
space to the construction space, the installation of the software artifacts built in the construction 
space results in the transition from this space to the operation space, the description of problems and 
needs generated by the use of the software installed permits the transition from the operation space 
to the problem space. The human interface between two spaces is carried out by the project's actors who 
play a principal role at once in these two spaces. So: the human interface between the problem and the 
solution spaces is carried out by the stakeholder/customer (S) and the architect (A),  the human interface 
between the solution and the construction spaces is carried out by the architect (A) and the developer 
(D),  the human interface between the construction and the operation spaces is carried out by the developer 
(D) and the end user (U),  the human interface between the operation and the problem spaces is carried 
out by the end user (U) and the stakeholder/customer (S).  To be complete and efficient, any software 
development process must take into account all the aspects of the software as well as all the conflicting 
interests and points of view of the project's actors. 852 So, each project space is associated with 
a subset of the ten software dimensions. Consequently, the economic agency theory and the software dimensions 
theory play complementary roles in modeling software engineering. Indeed, the agency theory underlines 
the conflicting interests and points of view of the organization's actors concerned with the software 
system, and provides an instrument to model software engineering in terms of contracts between the consumers 
(or principals) and the producers (or agents); while the software dimensions theory permits identifying 
all the software engineering aspects and facilitates the expression of the organization's priorities 
and constraints according to the Simon's Bounded Rationality Principle [6]. In addition to the project's 
actors and businesses identification, the four software project's spaces provide tools to analyze deeply 
and describe the various contracts between the software project's actors, and the inconsistencies inherent 
in software engineering. a D Figure 1: The four project's spaces and the associated actors 3. THE SOFTWARE 
ENGINEERING COORDINATION PROCESS The software model is used to determine the dependencies between the 
stakeholders. We distinguish two kinds of dependencies, intra-space (vertical) dependencies and inter-spaces 
(horizontal) dependencies, related to contracts between the software project actors. In addition to the 
producer/consumer relationship, such contracts may result in sharing common limited resources (computer 
resources, human resources,...). Horizontal dependencies take place between stakeholders belonging to 
at least two project spaces and express the producer/consumer relationship. Vertical dependencies take 
place in one project space and reflect the producer/consumer relationship and/or the sharing common resources 
relationship. Indeed, actors playing the principal role in one project space, have the same business 
and their activities are strongly dependent. So, in order to realize the goals related to their business, 
e.g. to build software artefacts delivered to the other project actors, they may need to share the same 
limited resources. For example, software developers share the same software engineering environment, 
the same human resource may be at the same time software designer and software programmer within the 
same software project. By another way, producer/consumer relationship between two project actors belonging 
to the same project space means that artefacts produced by one project actor are consumed by another 
project actor belonging to the same category. For example, there is a producer/consumer relationship 
between the software programmer and the software designer who belong to the developer category. Indeed, 
to carry out its coding tasks, the programmer consumes design artefacts built by the designer. The producer/consumer 
relationship reflect prerequisite and transfer constraints. Prerequisite constraints means that the producer 
activity must be completed before the beginning of the consumer activity. Prerequisite constraints result 
in notification, sequencing and tracking processes while transfer constraints are related to transporting 
and storing problems [5]. Prerequisite constraints are source of transfer constraints. Figure 2 presents 
the coordination process metamodel. generate   generxt JlL~ Figure 2: the coordination metamodel 
As we noted above, the coordination process in software engineering permits managing dependencies between 
the stakeholders involved in the software development and maintenance processes. The coordination process 
rests on formal and informal organizational models which determine the distribution of roles among interdependent 
stakeholders. So, it aims to answer the question: who do what? when? According to the global software 
model, since dependencies between stakeholders result in contracts, the coordination process in software 
engineering describes the formal and informal organizational procedures needed to carry out these contracts. 
Each organizational procedure points to one or many operational procedures. An operational procedure 
is a set of ordered activities associated with a stakeholder's role. In other words, an operational procedure 
describes the concrete actions undertaken by a stakeholder involved in a contract. To manage vertical 
and horizontal dependencies, we propose a coordination process composed of two sub-processes. The vertical 
coordination sub- processes aims to manage vertical dependencies while the horizontal coordination sub-process 
permits managing horizontal dependencies. Each coordination sub-process is composed of two 853 layers. 
The first layer relates to the informal coordination activities while the second layer corresponds to 
the formal coordination activities which are supported by formal organizational procedures stored in 
a repository, called the coordination repository. Since the coordination process in software engineering 
supports the software development and maintenance process, it must be integrated to this process. So, 
the software engineering coordination process depends on the lifecycle model of the software development 
and maintenance process it supports. Besides, according to the software model presented above and the 
software engineering process described in [7], the software engineering coordination process lifecycle 
is based on five spirals: four vertical spirals and one horizontal spiral. The horizontal coordination 
spiral supports the horizontal coordination sub-process and permits communication, artefacts exchange 
and navigation between the four project spaces. The four vertical coordination spirals, which support 
the four vertical coordination sub-processes associated with the four project spaces, are: The problem 
coordination spiral associated with the problem spiral which supports the problem space,  The architecture 
coordination spiral associated with the architecture spiral which supports the solution space,  The 
construction coordination spiral associated with the construction spiral which supports the construction 
space,  The operation coordination spiral associated with the  problem spiral which supports the operation 
space. The five coordination spirals are interdependent. So, representing these processes using a lifecycle 
based on the spiral model is a difficult task. Firstly, each coordination spiral has two aspects: formal 
and informal. Secondly, coordination tasks and software development tasks are intertwining. Thirdly, 
the horizontal coordination process between two project spaces is preceded by a nexus of software development 
and vertical coordination tasks and generates new coordination and development tasks taking place in 
the two spaces. Finally, according to a previous work [7], since the software development process is 
iterative, the coordination processes supporting this process are also iterative. So, a clear representation 
of the software engineering coordination process requires: the description of the meta-lifecycle supporting 
the five coordination spirals,  the description of the relationships between the five coordination spirals. 
  3.1 The coordination rneta-lifeeycle The horizontal and vertical coordination sub-processes rest on 
a meta-life cycle called (INFO) composed of four phases: Initialization, Negotiation, Formalization an 
Operation. The Initialization and the Operation phases permit shifting between the coordination activities 
and the software engineering activities while the Negotiation and the Formalization phases support the 
two layers of the coordination horizontal and vertical sub-processes. The Initialization nhase The Initialization 
phase consists in identifying the scope of coordination problem to be solved. During this phase, the 
three following tasks are carried out. 1. Identification of the project actors involved in the coordination 
process, 2. Identification of the software artifacts concerned with the coordination process, 3. Description 
of the coordination requirements related to the software artifacts concerned with the coordination process. 
  The Negotiation phase In our framework, the first layer of each coordination sub-process is supported 
by a Negotiation phase. It consists to cope with coordination topics which are not carried out by the 
formal procedures stored in the coordination repository. The Negotiation phase consists in eliminating 
conflicts and discrepancies between producers and consumers of artifacts needed to build a software system. 
For example, the requirements to be satisfied by a software version are generally negotiated by the project 
actors in order to take into account all the aspects of software (economic, temporal, technical, organizational, 
functional) and organization's priorities and constraints. The Win-Win negotiation process proposed by 
[3] provides an implementation of the Negotiation phase. By another way, to be implemented the Negotiation 
process requires communication among the project actors. Information related to communication is provided 
by various approaches and techniques in particular interviews, software rapid prototyping, cost/benefit 
analysis and risk analysis. The Negotiation phase consists in interpreting and implementing the informal 
aspects of the contracts linking the project actors. So, it provides more information about the software 
artifacts related to those aspects, to be exchanged between the project actors. This phase permits determining 
the tasks needed to make possible this exchange. Informal coordination activities constitute generally 
a preliminary step before formal coordination activities. So, the negotiation process may lead to three 
possible alternatives: 1. Information obtained may be sufficient to coordinate the software engineering 
activities related to the aspects related to the negotiation. This alternative may correspond to some 
vertical informal coordination activities among project actors playing the same role in a software project. 
For example, many informal coordination problems between software developers are solved using negotiation 
on the basis of information provided by software rapid prototyping. 2. Because of the complexity of 
the coordination tasks identified by the Negotiation phase, a formal coordination procedure is needed 
to carry out these tasks. Such procedure is built either from scratch or by customizing an existing formal 
procedure stored in the coordination repository. 3. The use of an existing formal procedure stored in 
the  coordination repository without modification. So, the organization of the coordination repository, 
the searching method used to select formal procedures play a critical role at the end of the Negotiation 
phase. Indeed, since the coordination process is iterative, the coordination repository is continuously 
and repeatedly improved and enriched. The Formalization phase The formalization phase supports the formal 
layer of the coordination sub-process. This phase rests on formal 854 organizational procedures needed 
to carry out contracts among project actors. A formal organizational procedure is associated with a goal. 
The definition of a formal organizational procedure consists in identifying its goal, the actors concerned 
with this goal, the roles played by these actors, the organizational activities and the information flows 
they exchange. An organizational activity transforms an input information flow into an output information 
flow used by another organizational activity. Organizational activities indicate the steps needed by 
a project actor to play its role. So, an organizational activity is carried out by only one actor. The 
coordination nature of the formal organizational procedures results from the organizational models which 
describe the information flows and artifacts exchanged between project actors. Generally, an organizational 
activity corresponds to a sequence of operational tasks needed to implement it. Therefore, it can be 
viewed as an abstraction of a set of operational tasks. An operational task is an atomic action which 
takes place without interruption in order to built an intermediary product. As noted above, each organizational 
procedure points to one or many operational procedures. An operational procedure is a set of ordered 
activities associated with a stakeholder's role. In other words, an operational procedure describes the 
concrete actions undertaken by a stakeholder involved in a contract. A software development method guide, 
a tool user's manual are examples of operational procedures. The operational procedures are stored in 
an operational repository. Nevertheless, because of the significant number of operational procedures 
used within an organization, it seems better to definea classification of the operational procedures 
in order to manage them in many repositories according to this classification. The basic rules to built 
such repositories are described by [4]. The following example illustrates the concepts defined in this 
paragraph. The analysis of a reusable artifact customization demand is an organizational activity implemented 
by many operational tasks like impact analysis, cost/benefit and configuration management techniques. 
This organizational activity forms part of an organizational procedure called "demand management" which 
points out to the various operational procedures: configuration management guide, software maintenance 
and evolution guide,...Let us note that the ISO9001 norm provides examples of procedures that can be 
used to support formal coordination activities. The Operation phase The Operation phase links the coordination 
activities to the software engineering activities. It rests on the operational procedures associated 
with the formal organizational procedures supporting the coordination sub-process layer. The Operation 
phase stresses the coordination process role in supporting software development and maintenance activities. 
Indeed, the coordination activities handles software artifacts and provides control and scheduling mechanisms 
to manage the flow of information required by the producer/consumer contracts linking the project actors. 
Figure 3 illustrates the coordination meta- lifecycle. Coordination activities activities AddittonaJ 
infm'mati~ Information about new formalprocedures ACtOrS Artifacts I Coordina~on requirements New cmr~ 
needs Selected formal ovganizati~al organ~ationaJ procedures Pc/ntsrs to ~rational procedures --.--.u...----. 
i i i b Informal layer Formal layer Figure 3: the coordination meta-lifecycle 3.2 The relationships 
between the five coordination spirals To describe the relationships between the five coordination spiral, 
more details related to spirals cycles are needed. A cycle of the horizontal coordination spiral is composed 
of four parts. Each part links two actors playing the principal role in two different project spaces. 
The other project actors also involved in the horizontal coordination activities linking two project 
spaces since they may play secondary role in these spaces. So, a cycle of the horizontal coordination 
spiral includes the coordination tasks related to the customer-architect interaction, the architect- 
developer interaction, the developer-end user interaction and the end user-customer interaction. Each 
part of the horizontal coordination spiral linking two project spaces is associated with a set of vertical 
coordination sub-processes taking place in these spaces. We note C[ the part of the horizontal coordination 
spiral linking the project spaces S i and Sj. C/ is described using an information vector composed of: 
" Actors A~ (vs. Aj) playing the principal role in the project space A i (vs. Aj), 855  The horizontal 
coordination tasks [Hk(St, Si) ] (k= l ..... K~tj) associated with C~,  The vertical coordination tasks 
Vt(S ~) (l=l,...L~) associated with C/and taking place in the project space  St, The artifacts P"~w 
(n=l ..... Naj ) exchanged by the project actors during the implementation of C[. Consequently, we define 
the horizontal coordination spiral by the following formula: H_Spiral=[C/, l_q<j~4]. Vertical coordination 
tasks taking place in a project space S t have three main characteristics.  On the one hand, they are 
interdependent. So, the software engineering process supporting a project space generates a nexus of 
vertical coordination sub-processes taking place according to the Boehm's spiral model.  On the other 
hand, they reflect aspects of software engineering materialized by software dimensions associated with 
S t  Finally, they include the point of view and interests of actors playing the principal role in St. 
  4. THE FRAMEWORK VALIDATION : A CASE STUDY To validate this framework, we use it in a French insurance 
company to implement the software coordination process inherent in the software development and maintenance 
process. In addition to the computer solutions department, this company is composed of four departments: 
business department, risk department, litigation department and administration department. To meet the 
four departments requirements, the software engineering environment is organized according to the global 
software model. In the problem space, each department of the company is represented by a customer who 
synthesizes the department's needs in terms of software products. The solution space is divided into 
three interdependent domains: methodology domain, quality domain and architecture domain. Methodology 
domain is dedicated to the management of software development and maintenance methods and tools used 
within the organization (design, coding, test, evaluation, configuration management methods and tools). 
Methodology domain manages the operational procedures repository. Quality domain provides norms and standards 
to support activities related to quality control and sofftware engineering processes improvement (ISO9001, 
ISO9126, CMM, in-house standards,...). Quality domain manages the formal organizational procedures repository. 
Architecture domain is concerned with management of architecture resources. In particular, the management 
of the reusable components library is carried out by this domain. Actors who play the principal role 
in the solution space belong to the "architect" category composed of method engineers, quality engineers 
and software architects. The construction space is divided into four functional domains corresponding 
to the four department of the company. In tum, each functional domain is divided into many project areas. 
A project area is the set of software and human resources dedicated to a software project. Actors who 
play the principal role in this space belong to the "developer" category composed of project managers, 
software designers, software programmers and software maintainers. Operation space is composed of all 
the end users of software products to support the company's business processes. The software development 
and maintenance process used in this company is an iterative process based on the "five spirals" development 
framework described in [7]. Within this framework, four spirals support the four project spaces while 
the fifth spiral represents the inter-spaces navigation and communication processes according to the 
(PACO) loop. To define the formal organizational procedures a deep analysis of the business and operational 
processes within the company has been completed. On the basis of the obtained results, two categories 
of formal organizational procedures are defined: inter-spaces (horizontal) procedures and intra-spaces 
(vertical) procedures. "Demand management", "Contracts management", "Claim management" are examples of 
horizontal organizational formal procedures. "Tools selection", "Software tests", "Development process", 
"Maintenance process", "Evolution process", "Reusable artifacts library management", "Quality control" 
are examples of vertical organizational formal procedures. As we noted above, these procedures are based 
on organizational models which describe the information flows and artifacts exchanged between project 
actors. They point to operational procedures which provide the list of concrete actions to be done. Technical 
guides, methods guides are example of operational procedures. To be efficient, the coordination process 
must be, at least partly, automated. Indeed, complexity of the software engineering discipline is constantly 
growing, and the number of actors and organizational procedures involved in the coordination process 
is significant. So, the company staff has decided to develop of workflow tools supporting the organizational 
formal procedures. Nowadays, the first version of a "Demand management tool" supporting the "Demand management" 
is delivered to the project actors. This procedure permits customer to send a development/maintenance/evolution 
demand to the software architect. The end users send a message to the customer to express their needs 
(development or evolution of a computer solution, bug correction). The customer demand describes synthetically 
its requirements as well as its costs and delay constraints. After analyzing the demand, software architect 
decides either to accept the demand or to reject it. The demand acceptation decision generates a message 
sent to the developer. This message includes information related on the one hand, to computer solution 
selected and on the other hand, to the cost and delay estimations from the point of view of the architect. 
After analyzing the information provided by the architect message, the developer replies by sending a 
message describing the development constraints (human resources, technical needs,...) and provides new 
estimations of the development cost and delay. The architect and the developer may exchange many messages 
and work together to improve the solution to be developed and the development cost and delay estimations. 
The definitive estimations, which reflect the point of view of the people involved in the development, 
maintenance and management of computer resources, are sent to the customer. If he accepts the proposed 
solution, then he informs the end users and notifies his acceptation to the software architect and the 
software developer. If he refuses the proposed solution, another, he modifies his demand before sending 
it to the architect. 856   5. CONCLUSION The use of the framework proposed in this paper permits identifying 
many problems to be solved in order to optimize the coordination process and the software development 
process it supports. Firstly, a formal procedure language is needed. Such language have two advantages: 
on the one hand, it minimizes the negative effects of procedure misinterpretations, on the other hand, 
it improves the transition between software engineering activities and coordination activities by mapping 
organizational procedures and operational procedures. Secondly, to facilitate traceability of software 
engineering, the coordination process must standardize the information flow (messages, meeting reports, 
evaluation reports,...) exchanged by the project actors during the coordination process. Thirdly, because 
of the significant number of organizational and operational procedures, an important effort must be dedicated 
to the organization of the coordination and operational repositories. Such organization includes the 
definition of a searching algorithm and the configuration management of the procedures stored in the 
repositories. Finally, the transition from the Negotiation phase to the Formalization phase need to be 
described formally. Indeed, this transition is related to procedure reuse, procedure creation and procedure 
configuration management. 6. REFERENCES <RefA>[1] AIchian A.A, Demsetz H.: "Production, Information Costs 
and Economic Organization", American Economic Review, Voi.62, No.5, December 1972, pp. 777-795. [2] Blum 
B. L.: "'Software Engineering: A Holistic View", Oxford University Press, t 992. Salem DAKItLI received 
the Statistician Economist Diploma from the National School of Statistics and Economics Administration 
(ENSAE -France), and holds DEA and PhD. degrees in Computer Science from the Paris-Dauphine University 
(France). He is Department Software Engineering Manager since 1991 and an Associate Professor of Statistics, 
Mathematics and Software Engineering with the Paris-Dauphine University where he is member of the CERIA 
Laboratory His current research interests include software prototyping, software architecture, software 
process and software economics. Dr DAKHLI is member of the IEEE Computer Society since 1990. [3] Boehm 
B.W., Bose P., Horowitz E., Lee M.J: "Software Requirements As Negociated Win Conditions ", Proceedings 
of the First International Conference on requirements Engineering, pp. 74-83, IEEE Computer Society Press, 
April 1994. [4] Dakhli S., Toffolon C. : <cA Three Layer Software Development Method: Foundations and 
Definitions >>, in Proceedings of the IEEE Conference on Engineering of Complex Computer Systems (ICECCS'97), 
Como, Italy, September 8-12, 1997, pp. 162-172. [5] Malone T.W., Crowston Kevin: "The Interdisciplinary 
Study of Coordination', ACM Computing Surveys, Vol 26, N°I, March 1994, pp. 87-120. [6] Simon H.A.: << 
Models of Bounded Rationality >~, (2 volumes), MIT Press, Cambridge, 1983. [7] Toffolon C., Dakhli S.: 
"A Framework for Software Engineering Inconsistencies Analysis and Reduction % Proceedings of the 22 
"d Annual International Computer Software &#38; Applications Conference (COMPSAC 98), August 19-21, 1998, 
Vienna, Austria, IEEE Computer Society Press, pp. 270- 277. [8] Toffolon C.: "The Software Dimensions 
Theory ", Proceedings of the ICEIS'99 Conference, Setubal, Portugal, March 27-30, 1999. [9] Williamson 
O.E.: "'The Modern Corporation: Origins, Evolution, Attributes", Journal of Economic Literature, Vol. 
19, December 1981, pp. 1537-1568. Claudine TOFFOLON holds a Master's degree in Mathematics from the University 
of Paris VII- Rend Diderot (France), a DEA in Econometrics from the Paris-Sorbonne University (France), 
a DEA and PhD. degrees in Computer Science from the Paris- Dauphine University (France). She is lecturer 
in software engineering with the Littoral University (Calais-France) where she is member of the LIL Laboratory. 
Besides, Dr TOFFOLON is member of the Paris-Dauphine University CERIA Laboratory. Her current research 
interests include software prototyping, software architecture, software process and software economics. 
Dr TOFFOLON is member of the Association for Computing Machinery since 1990 and the IEEE Computer Society 
since 1996</RefA>. 857  
			
