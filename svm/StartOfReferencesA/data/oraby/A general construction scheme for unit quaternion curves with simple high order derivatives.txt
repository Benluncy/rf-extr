
 A General Construction Scheme for Unit Quaternion Curves with Simple High Order Derivatives1 Myoung-Jun 
Kim2, Myung-Soo Kim, and Sung Yong Shin32 2Korea Advanced Institute of Science and Technology (KAIST) 
3Pohang University of Science and Technology (POSTECH) ABSTRACT This paper proposes a new class of unit 
quaternion curves in SO 3 . A general method is developed that transforms a curve in R3 (de­.ned as a 
weighted sum of basis functions) into its unit quaternion analogue in SO 3 . Applying the method to well-known 
spline curves (such as B´ ezier, Hermite, and B-spline curves), we are able to construct various unit 
quaternion curves which share many im­portant differential properties with their original curves. Many 
of our naive common beliefs in geometry break down even in the simple non-Euclidean space S3 or SO 3 
. For exam­ple, the de Casteljau type construction of cubic B-spline quaternion curves does not preserve 
C2-continuity [10]. Through the use of decomposition into simple primitive quaternion curves, our quater­nion 
curves preserve most of the algebraic and differential properties of the original spline curves. CR Descriptors: 
I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling Curve, surface, solid, and object 
representation, Geometric algorithms. Keywords: Quaternion, rotation, orientation, SO 3 ezier, Hermite, 
B-spline ,B´ 1 INTRODUCTION In computer animation, it is very important to have appropriate tools to 
produce smooth and natural motions of a rigid body. A rigidmotionin R3 can be represented by a Cartesian 
product of two component curves: one in the Euclidean space R3 and the other in the rotation group SO 
3 [3, 12]. The curve in R3 represents the center position of the rigid body, and the other curve in SO 
3 represents its orientation. Often, techniques for specifying a rigid motion construct the two curves 
independently. It is relatively easy to produce smooth curves in the Euclidean space. B-spline, Hermite, 
and B´ ezier curves exemplify well-known techniques for constructing position curves in R3. However, 
smooth orientation curves in SO 3 are much more dif.cult to construct. 1This research was partially supported 
by the Korean Ministry of Science and Technology under the contract 94-S-05-A-03 of STEP 2000 and TGRC-KOSEF. 
2Computer Science Department, KAIST, Taejeon 305-701, Korea. 3Dept. of Computer Science, POSTECH, Pohang 
790-784, Korea. E-mail: fmjkim, syshing@jupiter.kaist.ac.kr and mskim@vision.postech.ac.kr. Permission 
to make digital/hard copy of part or all of this work for personal or classroom use is granted without 
fee provided that copies are not made or distributed for profit or commercial advantage, the copyright 
notice, the title of the publication and its date appear, and notice is given that copying is by permission 
of ACM, Inc. To copy otherwise, to republish, to post on servers, or to redistribute to lists, requires 
prior specific permission and/or a fee. &#38;#169;1995 ACM-0-89791-701-4/95/008 $3.50 The spline curves 
in R3 are usually de.ned in two different but equivalent ways: i.e., either as an algebraic construction 
using basis functions or as a geometric construction based on recursive linear interpolations [2]. This 
paper proposes a general framework which extends the algebraic construction methods to SO 3 . Most of 
the previous methods are based on extending the linear interpolation in R3 to the slerp (spherical linear 
interpolation) in SO 3 [14, 16, 17, 18]. The two (i.e., algebraic and geometric) construction schemes 
generate identical curves in R3; however, this is not the case in the non-Euclidean space SO 3 [10]. 
Many of our commonplace beliefs in geometry break down in the non-Euclidean space SO 3 . When the recursive 
curve construction is not based on a simple closed form algebraic equation, it becomes extremely dif.cult 
to do any extensive analysis on the constructed curve. For example, consider the problem of computing 
the .rst derivative of the cubic B´ ezier quaternion curve or the squad curve generated by a recursive 
slerp construction [17, 18]. Though Shoemake [17, 18] postulates correct .rst derivatives, the quaternion 
calculus employed there is incorrect (see [9] for more details). Kim, Kim, and Shin [9] developed a correct 
quaternion calculus for the .rst derivatives of unit quaternion curves; however, an extension to the 
second derivatives becomes much more complex (also see [11] for a related quaternion calculus on blending-type 
quaternion curves). More seriously, the C2-continuity of a spline curve in R3 may not carry over to SO 
3 . Furthermore, the curve conversion be­tween two different spline curves, e.g., from a cubic B´ ezier 
curve to the corresponding cubic B-spline curve, may not work out in SO 3 [10]. Kim, Kim, and Shin [10] 
show that there is no C2-continuity guaranteed for the cubic B-spline quaternion curves which are gen­erated 
by the recursive slerp construction of Schlag [16]. Similarly, the B-spline quaternion curve of Nielson 
and Heiland [13] also fails to have C2-continuity (see [10] for more details). In this paper, we take 
an important step toward generalizing the algebraic formulation of spline curves in R3 to similar ones 
in SO 3 . In the new algebraic formulation, the computation of high order derivatives becomes almost 
as easy as that of the spline curves in R3. We show that the quaternion curves generated in this way 
preserve many important differential properties of their original curves in R3. They are de.ned in simple 
closed algebraic forms of quaternion equations, and they have the same degrees of geometric continuity 
as their counterparts in R3. As a demonstration of the feasibility of our proposed method, we .rst construct 
a B´control unit ezier quaternion curve with nquaternions. Then, the cubic B´ ezier quaternion curve 
is used to construct a Hermite quaternion curve. We also construct a k-th order B-spline quaternion curve 
which is Ck-2-continuous and lo­cally controllable. There are many other spline curves which can be de.ned 
by weighted sums of control points; our construction method is general in that all these spline curves 
are extendible to their corresponding quaternion curves. Since it is possible to ma­nipulate the position 
curve as well as the corresponding orientation curve in a uni.ed manner, the modeling and manipulation 
of rigid motions can be managed more conveniently. The key to the success of our construction method 
is that the quaternion curve is formulated as a product of simple primitive quaternion curves: qit=exp 
wifit, i=1,,n,for some .xed angular velocity wi2R3 and real valued function fit, where exp : R3 -SO3 
is an exponential map [3]. Each primitive curve, qit, represents a rotation about a .xed axis, wi2R3, 
for which the derivative formula has an extremely 000 simple form: qit=exp wifitwifit=qitwifit. Since 
the chain rule can be applied to the quaternion product: qt=q1 tqnt, the resulting differential formula 
has the simplest expression that one can expect for unit quaternion curves. Furthermore, a similar technique 
can be used to obtain high order derivatives of our quaternion curves. There have been many other methods 
suggested for the construction of quaternion curves, in­cluding the CAGD approaches based on constructing 
rational curves on the 3-sphere S3 [8, 20]. Nevertheless, no method has provided such a simple derivative 
formula. The only exception is the method of Pobegailo [15] which constructs a Ck-continuous spherical 
curve as a product of k+1 rotation matrices: Rk+1RkR1. The gen­erated curve is, however, essentially 
restricted to the B´ ezier type quaternion curve of our method. The development of closed form equations 
for the second order derivatives provides an important step toward solving the important problem of torque 
minimization for 3D rotations [1, 6, 7]. How­ever, the torque minimization problem requires much more. 
The optimal solution is given as a critical path in the problem of cal­culus of variations among a set 
of quaternion paths which satisfy the given conditions. For this purpose, we may need to extend the quaternion 
curve construction scheme of this paper to that of quaternion surfaces and volumes. This is currently 
a dif.cult open problem. Therefore, the important problem of torque minimization for 3D rotations has 
not been solved in this paper. Nevertheless, the basic algebraic approach taken in this paper provides 
an important conceptual framework for future research toward this goal. The rest of this paper is organized 
as follows. In Section 2, we brie.y review some useful concepts and de.nitions related to unit quaternions. 
Section 3 describes the main motivation of this work. Section 4 outlines our basic idea for constructing 
unit quater­nion curves. Section 5 constructs the B´ ezier, Hermite, and B-spline quaternion curves and 
discusses their differential properties. Sec­tion 6 shows some experimental results with discussions 
on possible further extensions. Finally, in Section 7, we conclude this paper. 2 PRELIMINARIES 2.1 Quaternion 
and Rotation Given a unit quaternion q2S3, a 3D rotation Rq2SO3 is de.ned as follows: -13 Rqp=qpq,for 
p2R, 1 where p=x,y,zis interpreted as a quaternion 0,x,y,zand the quaternion multiplication is assumed 
for the products [3, 17, 18]. Let q=cos 0,v sin 02S3, for some angle 0and unit vector v 2S2,then Rqis 
the rotation by angle 20about the axis v.The multiplicative constant, 2, in the angle of rotation, 20, 
is due to the fact that qappears twice in Equation (1). Also note that Rq=R-q; that is, two antipodal 
points, qand -qin S3, represent the same rotation in SO3. The two spaces S3 and SO3 have the same local 
topology and geometry. The major difference is in the distance measures of the two spaces SO3 and S3. 
A rotation curve Rq(t)2SO3 is twice as long as the corresponding unit quaternion curve qt2S3.When a smooth 
rotation curve Rq(t)has an angular velocity 2wt2R3, the unit quaternion curve qt2S3 satis.es: 0 qt=qtwt 
2 In this paper, we construct the unit quaternion curves in S3, instead of SO3 ; therefore, we interpret 
the velocity component wtof 0 qtas the angular velocity, instead of 2wt. The unit quaternion multiplication 
is not commutative; the or­der of multiplication is thus very important. Let q1,q2,,qnbe a sequence of 
successive rotations. When each qiis measured in the global frame, the product qnqn-1q1 is the net rotation 
of successive rotations. However, when each qiis measured in the local frame, the .nal product q1q2qnrepresents 
the net rota­tion. Note that the latter is the same as the successive rotations of qn,qn-1,,q2,q1 in 
the global frame. Here, we assume each rotation is speci.ed in the local frame. This is simply for notational 
convenience; in the local frame, we can write the multiplications in the same order as the rotations. 
By reversing the order of quaternion multiplications, the same construction schemes can be applied to 
the quaternion curves de.ned in the global frame. 2.2 Exponential and Logarithmic Maps Given a vector 
v=0v 2R3, with v2S2, the exponential: X 1 exp v=v i=cos 0,v sin 02S 3 , i 0 becomes the unit quaternion 
which represent the rotation by angle 20about the axis v,where v iis computed using the quaternion mul­tiplication 
[3, 11, 18]. The exponential map exp can be interpreted as a mapping from the angular velocity vector 
(measured in S3)into the unit quaternion which represents the rotation. When we limit the domain of exp 
so that j0j, the map exp becomes 1-to-1 and its inverse map log can be de.ned for unit quaternions. (See 
[9] for more details on exp and log.) The power of a unit quaternion qwith respect to a real valued exponent 
ais de.ned to be a unit a quaternion: q=exp alog q. Given two unit quaternions q1 and q2, the geodesic 
curve ,q1 ,q2 2 S3 (which connects q1 and q2) has constant tangential velocity -1 log q1 q2 . The geodesic 
curve equation is given by: -1 -1 t ,q1,q2 t=q1 exp t log q1 q2 =q1 q1 q2 3 The geodesic ,q1,q2 is also 
called the slerp (spherical linear inter­polation) between q1 and q2.  3 MOTIVATION For a translational 
motion in R3, the position curve ptis repre­sented by: Z pt=vtdt+p0, 4 where vtis the velocity and p0 
is the initial position. This relation can also be represented by the following linear differential equation: 
0 pt=vt 5 However, as shown in Equation (1), the relation between qtand 0 wtis non-linear: qt=qtwt. One 
of the most important problems in aero-space engineering is how to .nd a torque optimal rotational path 
which connects the start and target orientations [7]. Many numerical methods have been suggested to .nd 
the optimal path, in which Equation (1) plays an important role as governing equation [6]. Barr et al. 
[1] also raised torque optimization as a signi.cant problem in computer animation, and they constructed 
a torque optimal piecewise slerp quaternion path (i.e., as a sequence of discrete unit quaternions) by 
using a non-linear optimization technique. There still remains the important open problem of how to construct 
such a torque optimal path with piecewise spline quaternion curves which have simple closed form equations. 
An immediate open problem concerns the computation of high order derivatives of a unit quaternion curve. 
In this paper, we resolve the crucial problem of how to formulate the quaternion curves and their high 
order derivatives as closed form equations. For a unit quaternion curve qt2S3, we may reformulate the 
curve in the following equivalent form: qt=exp log qt By applying the chain rule to this equation, we 
obtain the .rst derivative formula: d 0 qt=dexp log(q(t))log qt, dt where dexp log(q(t))is the differential 
(i.e., Jacobian matrix) of exp. Kim, Kim, and Shin [9] used this formula to provide simple C1-continuity 
proofs for various previous methods [11, 17, 18]. The second and high order derivative formulas, however, 
become extremely complex even with this representation. Moreover, for general quaternion curves qt, their 
logarithmic curves, log qt, also have very complex formulas. In this paper, we exploit simple primitive 
quaternion curves qtwhich allow simple formulas for both the high order derivatives and the logarithmic 
curves. Shoemake [18] used the formula: aaa-1 dq=qlog qda+aqdq 6 In general, this formula is incorrect. 
For example, Equation (6) claims that: dq2 =2qdq. However, we have: 2 dq=dqq=dqq+qdq=62qdq since the 
quaternion multiplication is not commutative (also see [9] for more details). Nevertheless, there is 
a special case where this formula works. When the quaternion curve qtis restricted to the rotation around 
a .xed axis w2R3: i.e., qt=exp wat, 0 for a real-valued function at, qthas a simple form: 0 00 qt=exp 
watwat=qtwat, which is equivalent to the formula of Equation (6) in this special case. Higher order derivatives 
of qtare also easy to compute by the chain rule. To make good use of this simple differential property, 
all the unit quaternion curves of this paper will be constructed as the products of primitive quaternion 
curves: qit=exp wiait, i=1,,n, for a .xed angular velocity wi2R3 and a real valued function ait. Since 
the chain rule can be applied to the quaternion prod­uct: qt=q1 tqnt, the quaternion curve derivative 
can be obtained in an extremely simple form. Furthermore, applying a similar technique recursively, high 
order derivatives can also be obtained in simple forms. In this paper, we construct each com­ponent quaternion 
curve qitto be Ck-continuous by choosing Ck-continuous basis function ait. Therefore, their quaternion 
product qt=q1 tqntbecomes Ck-continuous. q 1 .1 q . n 2 q 0 . n q 2 Figure 1: Piecewise Slerp Interpolation 
of fwig.  4 BASIC IDEA 4.1 Cumulative Form Given a sequence of points p0,p1,,pn2R3, the simplest C0­continuous 
curve pt2R3, which interpolates each point piat t=i, is given by the following linear interpolation: 
pt=p0 +a1 t.p1 +a2 t.p2 ++ant.pn P n = p0 +ait.pi, i1 where .pi =pi-pi-1 i 0 if ti ait=t-iif i:ti+1 1 
if t i+1 Similarly, given a sequence of unit quaternions q0 ,,q2S3, we can construct a C0-continuous 
unit quaternion curve qtn2S3, which interpolates each unit quaternion qiat t=i, as follows: qt=q0 exp 
w1a1 texp w2a2 texp wnant Q n =q0 exp wiait, i1 where -1 wi =log qi-1qi This is a piecewise slerp (spherical 
linear interpolation) of fqig(see Figure 1). In the rotational space, a slerp implies a rotation with 
a constant angular velocity (around a .xed rotation axis). The slerp curve segment joining qiand qi+1 
is the geodesic interpolation, which is given by: qiexp wiait, based on Euler s theorem of principal 
rotation. At this point, we may generalize faigto other functions, rather than a piecewise linear function, 
so that the resulting quaternion curve becomes Ck-continuous while interpolating the given se­quence 
of unit quaternions. The two sequences faigand fwigcan be viewed as basis functions and their coef.cients, 
respectively. Q We call q0 exp wiaithe cumulative form of qtwith their co­ef.cients fwig. The cumulative 
form has several advantages over other quaternion curve representations: 1. It has a simple closed form 
equation, which simpli.es the evaluation of curve points and reduces the numerical errors.  2. It facilitates 
straight-forward computations of high order deriva­tives. 3. Using Ck-continuous basis functions faig, 
we can easily construct Ck-continuous quaternion curves, which are further controlled by the coef.cients 
fwig. 4. A well-chosen set of basis functions makes the constructed quaternion curves locally controllable. 
 5. Since kexp awk=1, the quaternion curves are in S3.   4.2 Cumulative Basis In the Euclidean space 
R3, there are many well-known spline curve construction schemes such as B´Most ezier and B-spline curves. 
of the spline curves are represented as the sums of basis functions with their control points as the 
coef.cients. Let fBigbe the basis functions and fpigbe the control points. Then, the spline curve pt, 
determined by fpig, is given by: X n pt=piBit, i0 which is called the basis form of pt. We present a 
general scheme that converts the basis form to the cumulative form of the quaternion curve. Using this 
method, we can easily construct various unit quaternion curves from their analogues in the Euclidean 
space R3. The basis form can be .rst converted into the following form: X n pt=p0Be0 t+.piBeit, i1 where 
.pi =piP -pi-1 , n Beit= ji Bit Then, the corresponding quaternion curve is obtained as follows: Y n 
Be(t) 0 qt=qexp wiBeit, 7 0 i1 -1 by converting ptto qt, p0 to q0, .pito wi =log qi-1qi, and vector addition 
to quaternion multiplication. Equation (7) is given in a cumulative form. One needs to be extremely careful 
in -1 the order of multiplication: qi-1qi. If the angular velocities are -1 given in the global frame, 
the quaternion multiplication: qiqi-1 -1 should be used, instead of qi-1qi. The new basis fBeigis called 
the cumulative basis of fBig. The cumulative form is the basic tool for our quaternion curve construction 
in SO3 .Simply by deriving a cumulative basis fBeig, we can easily obtain a quaternion curve which shares 
many important differential properties with its counterpart in the Euclidean space R3.  5 A NEW CLASS 
OF QUATERNION CURVES 5.1 B´ezier Quaternion Curve We can represent an n-th order B´ezier curve with Bernstein 
basis pe n-ii !i,nt= ni 1 -ttas follows: X n pt=pi!i,nt, 8 i0 where pi s are the control points. For 
the B´ ezier curve given in a basis form, we can apply our quaternion curve construction method. We .rst 
reformulate Equation (8) as follows: X n pt=p0! 0,nt+.pi! i,nt, i1 where the cumulative basis functions 
are given by: X n ! i,nt=!i,nt 9 ji Then, by converting it to the cumulative form, we can obtain the 
n-th order B´as follows: ezier quaternion curve with control points fqig Y n qt=q0 exp wi! i,nt, 10 i1 
where -1 wi =log qi-1qi Note that ! 0,nt1. This B´ =ezier quaternion curve has a different shape from 
the B´ ezier quaternion curve of Shoemake [17]. 5.2 Hermite Quaternion Curve A cubic Hermite curve is 
de.ned by two end points, paand pb,and two end velocities, vaand vb. Alternatively, the Hermite curve 
can be represented by a cubic B´ ezier curve: 3 X pt=pi!it, 11 i0 with the condition: p0 =pa,p1 =pa+va/3,p2 
=pb-vb/3,p3 =pb,12 where !it=!i,3 tfor i=0,1,2,3. Similarly, a cubic B´ ezier quaternion curve can be 
used to de.ne a Hermite quaternion curve which interpolates two end unit quater­nions, qaand qb, and 
two end angular velocities, waand wb. From Equation (10), the cubic B´ ezier quaternion curve is given 
by: 3 Y qt=q0 exp wi! it, 13 i1 where ! it=! i,3 tfor i=1,2,3. The quaternion counterpart of Equations 
(12) is given by: -1 q0 =qa,q1 =qaexp wa/3 ,q2 =qbexp wb/3 ,q3 =qb These four identities determine the 
three coef.cients wiof the cubic B´ ezier quaternion curve in Equation (13) as follows: -1 -1 w1 =log 
q0 q1 =log qaqaexp wa/3 =wa/3 -1 -1 -1 -1 w2 =log q1 q2 =log exp wa/3 qaqbexp wb/3 -1 -1 w3 =log q2 q3 
=log exp wb/3 qbqb =wb/3 Using these three angular velocities, we can construct a cubic Her­mite quaternion 
curve from Equation (13). Note that we can assign arbitrarily large angular velocities at the curve end 
points. The angular velocity w2 provides an extra degree of freedom in choos­ing the number nof revolutions 
while not losing the end point interpolation property. That is, instead of w2,we may use w2 +wb2 nfor 
an integer n, where wb2 =w2/kw2k. The curve shape changes, depending on the number of revolutions. (Note 
that the angular velocity is measured here in S3; therefore, the magnitude is half the rotation in the 
physical space.) Figure 2 shows the graphs of basis functions ! i s. Figure 3 shows Hermite quaternion 
curves with the same control points, but with different angular velocities wb s. Since it is dif.cult 
to visualize the quaternion curves in S3, they are projected onto a unit sphere in R3. Now, we will show 
that the cubic Hermite quaternion curve interpolates the two orientations, qaand qb, and the two angular 
0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 Figure 2: Graphs of !i. 1 qa  Figure 3: Examples of Hermite Quaternion 
Curves. velocities, waand wb, at the curve end points. It is easy to show that: q0 =q0exp0 exp0 exp0 
=q0 =qa, q1 =q0 exp w1 exp w2 exp w3 -1 -1 -1 =q0 qq1 qq2 qq3 012 =q3 =qb The .rst derivative of qtis 
given by: 0 . . qt=q0 exp w1!1 tw1!1 texp w2!2 texp w3!3 t +q0 exp w1!1 texp w2!2 tw2!2 texp w3!3 t 
 . +q0 exp w1!1 texp w2!2 texp w3!3 tw3!3 t where 3 23 3 !1 t=1 -1 -t,!2 t=3t-2t,!3 t=t, . 2. . 2 !t=31 
-t,!t=6t1 -t,!t=3t 123 Thus, we have: 0 q0 =q0 exp 0 w13 exp0 exp0 +q0 exp w1!1 texp 0 w20 exp w3!3 t 
+q0 exp w1!1 texp w2!2 texp 0 w30 =q0wa =qawa 0 q1 =q0 exp w1 w10 exp w2 exp w3 +q0 exp w1 exp w2 w20 
exp w3 +q0 exp w1 exp w2 exp w3 w33 -1 -1 -1 =q0qq1qq2qq33w3 012 =q3wb =qbwb, which means that the quaternion 
curve qthas its angular velocities -1 0-1 0-1 0-1 0 wa =qq0 =q0 q0 and wb =qq1 =q1 q1 ab at the curve 
end points. 5.3 B-spline Quaternion Curve The B-spline curve is very popular in computer graphics because 
of its extreme smoothness and local controllability. By moving a control point, we can selectively modify 
the B-spline curve without losing its geometric continuity. In this section, we consider how to convert 
a B-spline curve in R3 into its quaternion analogue with a cumulative form. Then, we investigate the 
properties such as Ck-continuity and local controllability. A B-spline curve is de.ned by a weighted 
sum of B-spline basis functions Bi,kt, which are Ck-2-continuous k-1 -th order piecewise polynomials. 
Given a set of control points fpig,a B-spline curve ptis given by: X n pt=piBi,kt i0 The B-spline basis 
functions Bi,ktare de.ned by the following recurrence relation [4]: 1if titti+1 Bi,1 t= 0 otherwise 
and t-ti ti+k-t Bi,kt= Bi,k-1 t+ Bi+1,k-1 t ti+k-1 -ti ti+k-ti+1 It is easy to show that Bi,k s are 
Ck-2-continuous piecewise poly­nomials of degree (k-1). They are Ck-2-continuous every­where, and may 
not be Ck-1-continuous only at the knots ftig. Each Bi,kthas a non-zero support on the interval [ti,ti+k], 
i.e., Bi,kt=0for ttior tti+k. The B-spline curve may be reformulated in the following cu­mulative form: 
X n pt=p0Be0,kt+.piBei,kt, i1 where .pi =pi-pi-1 and P n Bei,kt=Bj,kt 8 ji P i+k ji Bj,ktif titti+k-1 
=1 if tti+k-1 0 if t:ti By converting ptto qt, p0 to q0, .pito wi, and summation to quaternion multiplication, 
the corresponding quaternion curve is obtained in a cumulative form as follows: n Y Be 0 k(t) qt=q0 exp 
wiBei,kt, i1 -1 where wi =log qi-1qi. This gives our B-spline quaternion curve, which is Ck-2-continuous 
and locally controllable with the control points fqigand the angular velocities fwig. The B-spline quater­nion 
curve also allows arbitrarily large angular velocities between two consecutive control points fqig. Figures 
4 and 5 show the graphs of basis functions Bi,4 tand Bei,4 t, respectively. Note that Bei,ktis non-constant 
only in the interval [ti,ti+k-1], whereas Bi,ktis non-constant in [ti,ti+k]. Figure 6 shows examples 
of B­spline quaternion curves. The local shape controllability is shown with dashed curves. 0.7 B0 4 
t 0.6 B1 4 t 0.5 B2 4 t 0.4 0.3 0.2 0.1 0 0123456 Figure 4: B-spline Basis Functions. 1.2 1 e B0 4 t 
0.8 e B1 4 t 0.6 e B2 4 t 0.4 0.2 0 0123456 Figure 5: Cumulative B-spline Basis Functions. Now, we can 
investigate some interesting differential and ge­ometric properties of the B-spline quaternion curve: 
i.e., Ck­continuity and local controllability. It is easy to show that Bei,kt is Ck-2-continuous since 
it is a weighted sum of Ck-2-continuous functions fBi,kg. Therefore, the k-th order B-spline quaternion 
curve is Ck-2-continuous as well. Since the cumulative basis func­tion Bei,ktis non-constant in the interval 
[ti,ti+k-1], the quater­nion curve qton the interval tl:ttl+1 can be represented by: QQ l-k+1 l e qt=q0expwi1 
expwiBi,kt i1 il-k+2 pQe n expwi0 il+1 Q l =ql-k+1 expwiBei,kt il-k+2 This equation shows that the quaternion 
curve qtdepends only on the quantities: ql-k+1, wl-k+1,,wl, that is, only on the k control points: ql-k+1,ql-k,,ql. 
In other words, by moving the control point ql, the curve shape is in.uenced only on the interval [tl,tl+k]. 
0 Furthermore, the derivation of qtis extremely simple due to the B-spline differentiation formula [4]: 
XX dai-ai-1 aiBi,kt=k-1 Bi,k-1t, dt ti+k-1 -ti where ai s are constants. Therefore, we have: e 0 k-1B= 
Bi,k-1t i,kt-t t i.k.1i In the case of a uniform B-spline, there is a further reduction to: 0 Bei,kt=Bi,k-1t. 
q4 q6 q5 q3 q1 q2 Figure 6: B-spline Quaternion Curve with Six Control Points.   6 EXPERIMENTAL RESULTS 
6.1 Torque Computation The spline interpolation in R3 produces a path pwhich minimizes the energy: Z 
2 kp¨kdt, while satisfying given constraints. Thus, the spline interpolation path does not generate unnecessary 
force (or acceleration). The energy minimization property makes the spline interpolation very useful. 
As far as rotational motion is concerned, it is important to minimize torque (or angular acceleration). 
Most of the previous results on quaternion interpolation have concentrated on improving the computational 
ef.ciency rather than attacking the more chal­lenging problem of energy minimization. Barr et al. [1] 
took an important step toward the energy min­imization. The quaternion path is approximated by discrete 
unit quaternions and a time-consuming non-linear optimization is em­ployed in the algorithm. There still 
remains an important open prob­lem concerning how to construct an energy minimization quaternion path, 
ideally with a closed form equation and without using a time­consuming optimization technique. In this 
paper, we have provided a useful step toward the resolution of this problem by introducing a new class 
of spline quaternion curves for which high order deriva­tives can be obtained in simple closed form equations. 
Although the problem of how to deal with these closed form equations is still unsolved, our quaternion 
curves exhibit promising behaviors by generating relatively small torque compared with those generated 
by the previous methods. Our cubic quaternion curves generate a similar amount of torque (in the range 
of ±5%) to that of Shoemake [17] when the control unit quaternions have small angular variations. However, 
our curves perform much better when the variations are large. The meth­ods based on recursive slerp constructions 
may generate twisted curves when the spherical control polygon on S3 has edges of rel­atively large lengths. 
This effect can be explained as follows. The slerp-based methods generate a sequence of intermediate 
quaternion curves qi,kt s, and blend each pair of two consecutive curves qi,ktand qi+1,ktto generate 
another sequence of quaternion curves qi,k+1t s: -1 qi,k+1t=qi,ktexpfitlogqi,ktqi+1,kt, for some blending 
function fit. When the variations of con­trol quaternions are large, the two quaternion curves qi,ktand 
qi+1,kthave large curve lengths. They may have complex wind­ing shapes in the compact space S3 . The 
difference quaternion curve -1 qi,ktqi+1,ktwould also wind many times. However, the -1 measure, log qi,ktqi+1,kt, 
is always bounded by ,which totally ignores the large amount of winding. As a result, the blend­ing curve 
qi,k+1 texperiences large bending, which produces large torque. As the intermediate curves with bending 
shapes are blended recursively, the resulting quaternion curve has a twisting shape. Our quaternion curves 
do not suffer from such a degener­acy. This is because our primitive quaternion curve qit= exp wiaitmay 
accommodate arbitrarily large angular velocity wi. The resulting curve has a large number of winding; 
however, the curve does not produce extraordinary bending and/or twisting. Therefore, our curves perform 
much better when the angular varia­tions are large. Furthermore, our curves have C2-continuity, which 
means that there is no torque jump at the curve joint. The piecewise cubic quaternion curves (based on 
the de Casteljau type construc­tion) are not C2-continuous; they have torque jump at each curve joint. 
High degree rational spherical curves have C2-continuity [19]; however, their speeds are less uniform 
than the curves based on the de Casteljau type construction. Therefore, the rational curves generate 
redundant tangential accelerations, which has undesirable effect.  6.2 Animation Examples We present 
some examples to demonstrate the feasibility of our quaternion curves. Figure 7 shows an animation of 
a .ying boomerang. In this example, the motion path is composed of a Hermite curve for the translation 
and a Hermite quaternion curve for the rotation. Using the Hermite quaternion curve, we can specify arbitrary 
ori­entations and angular velocities of the boomerang at the start and end of the animated motion. Note 
that the boomerang experiences many revolutions. This effect is obtained by assigning large angular velocities 
at both ends. Our cubic B-spline quaternion curve produces extremely smooth motions. Figure 8 shows a 
motion path, which is speci.ed by a B-spline curve with six control points. A rigid motion path can be 
used to specify the sweeping of a 2D cross section. Figure 9 shows a sweep object generated from the 
same motion path given in Figure 8. Figure 10 shows an example of B-spline quaternion interpolation for 
a rigid body, where the position and orientation interpolation curves are constructed by the B-spline 
interpolation curves in R3 and SO3 , respectively. Six keyframes are used in this example, and they are 
shown in dark tints.  7 CONCLUSIONS A general construction method is proposed for unit quaternion curves. 
Given a spline curve in R3, the spline curve is reformulated in a cumulative basis form and the corresponding 
quaternion curve is constructed by converting each vector addition into the quater­nion multiplication. 
The quaternion curve is formulated as a .nite product of simple quaternion curves, which makes the evaluation 
of high order derivatives quite straightforward. The constructed quaternion curves preserve many important 
differential properties of their counterparts in R3. Furthermore, the quaternion curves and their high 
order derivatives are given by simple closed form equations. Experimental results are quite promising 
in that our quaternion curves use small torque compared with the previous quaternion curves, especially 
when the control quaternions have large varia­tions. Although the important torque minimization problem 
has not been solved in this paper, our approach provides an important initial step toward this goal. 
Figure 7: Boomerang Animation using one Hermite Quaternion Curve. Figure 8: Rigid Motion by a Cubic B-spline 
Quaternion Curve. Figure 9: Sweeping with Cubic B-spline Quaternion Curves. Figure 10: Example of B-spline 
Quaternion Interpolation.  REFERENCES <RefA>[1] BARR,A., CURRIN,B., GABRIEL,S., AND HUGHES, J. Smooth interpolation 
of orientations with angular velocity constraints using quaternions. Computer Graphics (Proc. of SIGGRAPH 
92) (1992), pp. 313 320. [2] BARRY,P., AND GOLDMANN, R. A recursive evaluation algo­rithm for a class 
of Catmull-Rom splines. Computer Graphics (Proc. of SIGGRAPH 88) (1988), pp. 199 204. [3] CURTIS,M. Matrix 
Groups, Springer-Verlag, 1972. [4] DE BOOR,C. A Practical Guide to Splines, Springer-Verlag, 1978. [5] 
HAMILTON,W. Elements of Quaternions (Volume I, II), Chelsea Publishing Company, 1969. [6] JUNKINS,J., 
AND TURNER, J. Optimal continuous torque attitude maneuvers. J. Guidance and Control 3, 3 (1980), pp. 
210 217. [7] JUNKINS,J., AND TURNER,J. Optimal Spacecraft Rotational Maneuvers, Elsevier, 1986. [8] JUTTLER, 
B. Visualization of moving objects using dual quaternion curves. Computers &#38; Graphics 18, 3 (1994), 
pp. 315 326. [9] KIM,M.-J., KIM,M.-S., AND SHIN, S. A compact differential formula for the .rst derivative 
of a unit quaternion curve. To appear in J. of Visualization and Computer Animation (1995). [10] KIM,M.-J., 
KIM,M.-S., AND SHIN,S. A C2-continuous B­spline quaternion curve interpolating a given sequence of solid 
orientations. Proc. of Computer Animation 95 (1995), pp. 72 81. [11] KIM,M.-S., AND NAM, K.-W. Interpolating 
solid orienta­tions with circular blending quaternion curves. To appear in Computer-Aided Design (1995). 
[12] NIELSON, G. Smooth interpolation of orientation. Models and Techniques in Computer Animation (Proc. 
of Computer Animation 93) (1993), N. Thalmann and D. T. (Eds.), Eds., Springer-Verlag, pp. 75 93. [13] 
NIELSON,G., AND HEILAND, R. Animated rotations using quaternions and splines on a 4D sphere. Pro­grammirovanie(Russia) 
(July-August 1992), Springer-Verlag, pp. 17 27. English edition, Programming and Computer Soft­ware, 
Plenum Pub., New York. [14] PLETINCKS, D. Quaternion calculus as a basic tool in computer graphics. The 
Visual Computer 5, 1 (1989), pp. 2 13. [15] POBEGAILO, A. Modeling of Cnspherical and orientation splines. 
To appear in Proc. of Paci.c Graphics 95 (1995). [16] SCHLAG, J. Using geometric constructions to interpolate 
orien­tation with quaternions. Graphics GEMS II, Academic Press, 1992, pp. 377 380. [17] SHOEMAKE, K. 
Animating rotation with quaternion curves. Computer Graphics (Proc. of SIGGRAPH 85) (1985), pp. 245 254. 
[18] SHOEMAKE, K. Quaternion calculus for animation. Math for SIGGRAPH (ACM SIGGRAPH 91 Course Notes 
#2) (1991). [19] WANG, W. Rational spherical curves. Presented at Int l. Conf. on CAGD, Penang, Malaysia 
(July 4-8, 1994). [20] WANG,W., AND JOE, B. Orientation interpolation in quater­nion space using spherical 
biarcs. Proc. of Graphics Interface 93 (1993), pp. 24 32.</RefA> APPENDIX In this appendix, we provide the 
pseudo codes for the construction of quaternion curves presented in Section 5. ezier Quaternion Curve 
B´ // q0,,qn: control points Ppe nnn-ii double ! i,nt= jii1 -tt quaternion Bezier q0,q1,qnt Q n -1 return 
(q0 i1 exp log qi-1qi!i,nt; end Hermite Quaternion Curve // qa,qb: the start and end orientations // 
wa,wb: the start and end angular velocities 3 23 3 double ! 1 t=1 -1 -t, !2 t=3t-2t, !3 t=t quaternion 
Hermite qa,qb,wa,wbt q0 =qa; w1 =wa/3; -1 -1 w2 =log exp w1 qaqbexp w3; w3 =wb/3; return (q0 exp w1! 
1 texp w2! 2 texp w3! 3 t); end B-spline Quaternion Curve // ti: knot sequence double Bi,kt= B-spline 
basis of order k double Bei,kt= Pi+k Bj,kt ji quaternion B-spline q0,q1,qnt l=maxfijti+k-1 :tg; if (l0) 
then e B0 k(t) fl=0; q=qg 0 else q=ql; for (i=l+1; i:n&#38;&#38; tit; i++) -1 q=qexp log qi-1qiBei,kt; 
return (q); end  Uniform B-spline Quaternion Curve // ti =i-2: uniform knots // 0 :t:n // uniform-B-spline 
0 =q0 // uniform-B-spline n=qn // uniform-B-spline i.qi quaternion uniform-B-spline q0,q1,qnt -1 q-1 
=q0q1 q0; //phantom -1 qn+1 =qnqn-1qn;// control points l=bt-1c; q=ql; for (i=l+1; it+2; i++) -1 q=qexp 
log qi-1qiBei,kt; return (q); end  
			
