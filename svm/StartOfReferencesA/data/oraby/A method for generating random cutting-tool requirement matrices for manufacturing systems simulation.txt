
 A METHOD FOR GENERATING RANDOM CU ITING-TOOL REQUIREMENT MATRICES FOR MANUFACTURING SYSTEMS SIMULATION 
 Dharmaraj Veeramani Moshe M. Barash School of Industrial Engineering Purdue University West Lafayette, 
Indiana 47907 ABSTRACT In detailed shop-floor simulation applications, data concerning the cutting-tool 
requirements of the parts being machmed in the manufacturing system are often necessary to drive the 
simulation model. While there are merits associated with the use of real data, such data are sometimes 
not readily available, and it is therefore desirable to have a method for generating hypothetical, yet 
realistic, tool requirement data. In this paper, we describe a two-stage procedure for gen­erating random 
tool requirement matrices (part type vs. tool type O-1 incidence matrices) on the basis of expert opinions 
about the characteristics of such data. In the first stage, we sample row-sums and column-sums of the 
tool requirement matrix from two user-specified multivariate normal distributions sub­ject to the feasibility 
condition that the row-and column-sums yield the same grand total. In the second stage, we determine 
the binary values of the matrix elements by means of a heuristic. The resultant matrix reflects the desired 
characteristics, such as part type similarities and tool usage dependencies. INTRODUCTION The management 
of cutting-tools in advanced manufacturing systems, particularly Flexible Manufac­ turing Systems (FMSS), 
is becoming an increasingly studied area in both academia and industry. Simula­tion is often used to 
evaluate the impact of tool management strategies on the performance of manufacturing systems, In such 
simulation applica­ tions, information concerning the tool requirements for the family of parts being 
machined in the manufac­turing system is necessary to drive the simulation model. One approach for providing 
such input to the simulation model is to sample from an empirieal dis­854 James R. Wilson Department 
of Industrial Engineering North Carolina State University Raleigh, North Carolina 27695 tribution which 
has been constructed using data col­lected from existing process plans. However, this approach has several 
drawbacks as noted by Law and Kelton (1991). First, it is often very dfiicult and time consuming to collect 
complete and accurate data on tool requirements for each operation and each part which is machined in 
the manufacturing system. Second, this approach cannot be applied when data are unavailable (for example, 
in the case of new/projected systems). Third, the data that are col­lected constrain the range of the 
distribution. Random variables which fall outside this range will never be generated. These shortcomings 
of using empirical dis­tributions become very relevant when the user desires to consider alternative 
(often speculative) scenarios for evaluating tool management strategies. The alternative approach to 
modeling the tool requirement data is to sample from theoretical distri­ butions that display the characteristics 
of real data. In this paper, we describe a two-stage procedure for generating tool requirement matrices 
based on the latter approach. In the first stage of the procedure, we sample row-sums and column-sums 
from two user­ specified multivariate normal distributions so that the sum of the row-sums equals that 
of the column-sums. In the second stage, we determine the binary values of the matrix elements by means 
of a heuristic that takes into consideration both inter-row and inter-column correlations. This facility 
to generate realistic tool requirement matrices provides the user with a great deal of flexibility and 
ease in developing tooling related input models for manufacturing system simula­ tion applications. In 
the next section, we examine some of the characteristics of cutting-tool requirement matrices that illustrate 
why the generation of such matrices is not trivial. In $3 and $4, we describe the two stages of our procedure. 
The paper concludes with a discussion in 55. CHARACTERISTICS OF CU ITING-TOOL REQUIREMENT DATA We are 
primarily interested in generating O-1 matrices having p rows and t columns in which each column corresponds 
to a particular type of cutting tool and each row corresponds to a particular part type. (For example, 
one of the columns might represent a I/4 jobbers length, general purpose, high speed steel, straight 
shank, twist drill.) If part type i requires tool type j for processing then element xv of the matrix 
has value 1; otherwise, Xti equals O. We denote the row­sums Ri, where Ri = ~j=lXv for i = 1, 2, . . 
..P. Similarly, the column-sums are denoted by Cj, where C j=~~=~xo for j =1,2, .... t. Clearly, {Cj 
} and {Ri} are integers; and we must have ~j Cj = ~iRi for a feasible assignment of tool types to part 
types. Matrices of this type often mirror salient features of the manufacturing system. For example, 
h is com­mon for some part types to have processing require­ments similar to those of other part types. 
Such simi­larity in processing requirements is often used as a basis for formation of part families. 
In our context, this implies that parts belonging to a family have a high degree of tool commonality 
(that is, they require a similar number of tools of similar types). This implies that the rows of the 
matrix are correlated. If R. and R~ denote the row-sums corresponding to row a and row b, then similarity 
between these two part types (a and b) would be reflected in a high degree of correla­tion between R. 
and Rb. Another feature of cutting-tool requirement matrices relates to dependencies among the usage 
of tools of different types. For example, in order to pro­duce a threaded hole, it is necessary (in the 
simplest case) to first drill the hole and then tap it. Let columns c and d denote a drill and a tap 
(of corresponding size) respectively. For the part types under consideration, if it is known that the 
holes of the dimension produced by the drill are usually threaded, then xiC = 1 would imply that it is 
very likely that xid = 1. Extrapolating this argument, the number of times, CC, that the tap is used 
is strongly related to Cd, the number of times that the drill is used. Therefore, there exists a correlation 
between the columns of the matrk, and thk is reflected in the correlation structure between the column-sums 
Cc and Ca. Similarities between processing requirements for related parts and dependencies between usages 
of different tools appear as clusters in the tool requh-e­ ment matrix. The presence of tool clusters 
in real tool requirement matrices is common (see Stecke (1989) for instance) and corresponds to the partitioning 
of the parts into part families. To summarize, the scheme for generating a tool requirement matrix should 
yield randoml row-sums (that is, tool counts for each part type) whose correla­tions accurately represent 
similarities (probabilistic dependencies) between part types; simultaneously, the generation scheme should 
yield random column-sums (that is, part counts for each tool type) whose correla­tions accurately represent 
similarities (dependencies) between tool usages. These considerations form the basis for the matrix generation 
scheme described in the next two sections 3 GENERATING ROW-AND COLUMN-SUMS In the first stage of the 
procedure for generating a tool requirement matr~ the objective is to generate a p x 1 random vector 
R of row-sums and a t x 1 random vec­ tor ~ of column~sums Zj=[R1, ..., RP] and ~ = [CI,..., C,] . 
We assume that ~ (respectively, ~ is normally distri­ buted with user-spec~led mean vector j@ (respec­ 
tively, ~) and covariance matrix ~~ (respe~tively, ~). .-We must sample ~ and ~ subject to the feasibility 
con­ dhion ~~.1 Cj = ~~=1 Ri. We Wrhe ~ -Np(~R, ~R) and C -Nt(pc, ~); and we let T denole the com­ponentwise 
gr;nd total for each of these vectors. 3.1 Preliminaries Our approach to the problem of generating ~ 
and ~ is based on a linear transformation R==H~, (1) where ~ is any nonsingular p xp matrix whose last 
row consists of 1 s. For simplicity, we will consider First we seek to determine the distribution of 
~ * in terms of the analogous properties of ~. To clarify the development, we introduce some addhional 
notation that emphasizes the dependence of the random vectors under consideration on their respective 
dlmensionalities. Let us rewrite R as E(P) = [E (P-l), RP] where ~ (p 1) = [R1, R2, . . .. RP.l]. Similarly 
we define corresponding mean vectors w?(p) =~[g(p)] = [Pi(p-1), /+] , where Pfio.l) -E[~ (p 1)] = [l.J1, 
M,... ,~_l]. We also-define the corresponding covariance matrices where 7P = [ UI,P, c72,p9 .. t P-LP 
] and al, 1 U1,2 . . ~l,p-1 % u2,p -1 02,2 .. ~R@-l)=cc@(p-Q] = : : :: : . . ... . up_l,l UP 1,2 -. ffp-1,p-1 
II For the transformed random vector (l), we define the andOgOUS qUi311th3S ~ (~) = 11~~ II, ~R*(p) = 
II ~~ II, ?R (p) = l]~;,ill, and~j = [~;,p, a;,p, . . . ,~j-l,p]-. We derive the relevant properties 
of R*(p) in terms of those of Z?(p). In view of Equations (1) and (2), isp-variate normal so that its 
dktribution is completely determined by its mean vector and covariance matrix. Recall that T -~zj =1 
Cj = ~~= ~Ri. Taking expecta­tions in Equation (3), we have . fR*(p) = ~fR(p) = [@p-Q, /.@ (4) 1 where 
PTs E [T] = ~f = ~A. Computing the covari­ance matrix corresponding to Equation (3), we have .P ?R(p-1)!p-1 
7P = ficl,i> ~U2,i,... , ~vp-l,i . j=l j=l j=l -[ 1 We make the key observation that given a fixed value 
of R; = T, the conditional distribution of R *(p 1) is (p I)-variate normal with mean E[~*(p -1) I 
R; =T] = flR*(p-1) + 7;(T-P;)/U;,p; (6) see pp. 135 136 of Johnson and Wichern (1982). We can rewrite 
Equation (6) elementwise in terms of the original quantities {A} and {~h,i } as follow~  p ~ - EIR; 
IR; =T]=A+ ~-(T p,) m=l T [1 fori=l,2 ,..., p 1. In additio~ the condkional covariance matrix of ~ 
* (p -1), given R; = T,is cov[l$ (p 1) I R;=T] = gR*(p-1) 7;(7;) /~;,p. (7) In terms of the original 
covariances {~h,i}, we can rewrite Equation (7) as forh, i=l,2,...,l l. 3.2 Algorithm for generating 
row-and column-sums To generate each row-sum Ri (i = 1, 2,..., p) and each column-sum (Cj for j = 1, 
2, ..., t), we perform the following steps. 1. Generate ~(t) -N,(w, ~). 2. Round off the colu~n-sums 
{Cj : j = 1, ..., t} to the nearest nonnegative integer and compute  T = ~;=lCj. 3. Given ~ generate 
~* (p 1) from a (p 1)-variate normal distribution whose mean vector and covariance matrix are given 
by Equations (6) and (7) respectively. 4. Round off the variates {R; : i = 1,..., p-1} to the nearest 
nonnegative integer values and recover the desired row-sums from Equation (2) as follows:  p-1 Ri=R~, 
i= l,... ,P-U RP=T-XR; . i-l 4 GENERATING THE TOOL REQUIREMENT MATRIX In the second stage of the procedure, 
our objective is to assign O s and 1 s to the tool requirement matrix Ilmatrix(i,j) II so that (a) matrix(i,j) 
= 1 when part type i requires tool type J and (b) the row-sums and column-sums of IImatrix(i,j) II respectively 
match the values of {Ri } and {Cj } that were generated by the procedure given in 33.2. Ideally, the 
user-specified correlation corr(cj,ck) between Cj and ck should ako be the correlation between the jth 
and kth elements of each row of the tool requirement matrk, similarly, corr(Rh,Ri) should be the correlation 
between the hth and ith elements of each column of the tool require­ment matrix. 4.1 The Assignment Heuristic 
The following heuristic begins by assigning the target row-sums and column-sums to the corresponding 
rows and columns respectively. On each iteration, a row, ihestrow, is chosen. For this row, a column, 
ibestcol, is selected, and the element matrix(ibestrow, ibestcol) is assigned a 1; and the corresponding 
row-and column­sums, R iktw and Ci&#38;tml, are each decremented by 1. If the resultant R ,&#38;t,w is 
positive, then another column is assigned to ihestcol. This procedure of assigning 1 s to the elements 
of row ibestrow in the tool requirement matrix continues until R iw~t~w has been decremented to zero. 
Then, the next iteration begins with the assignment of another row to ibestrow. The procedure terminates 
when all the row-sums have been reduced to zero. In the algorithmic statement given below, s.t. is an 
abbreviation for the phrase such that and # (E) denotes the number of elements in the set E. Input: The 
sampled row-sums and column-sums and the user-specified inter-row-sum and inter-column­sum correlations. 
Output: The tool requirement matrix II matrix(i,j) II. Step (0): [Initialize.] Initialize {Ri} and 
{Cj } to the sampled row-and column-sums. Setmatrix(i,j)+O fori = 1,..., p;j = 1,..., t. Step (l): [Select 
current row and column.] ibestrow+i s.t. Ri =maX{Rk I k = 1,2, . . ..p} ihestcol t-j s.t. Cj = max{Cm 
] m = 1,2, . . ..t} matrix(ibestrow, ihestcol) -1 R ibt~w + R ikt~w _ 1 Ci&#38;t~ + Ci~~l -1 If (Ribt~w 
>0 ) then go to Step (2) Else go to Step (3) Endif Step (2): [Select next column for current row.] If 
( there is nextcol s.t. corr(Cmfiml,Ci~t@l) = max {corr(Cm, CiMtil) I m ~ ibestcol, Cm > O} &#38; COrr(CE*l,Ci~~J 
~ 0.5 &#38; matrix(ibestrow, nextcol) = O ) then ihestcol + nextcol  [In case of a tie, choose the candidate 
column with the irtrgest current column-sum.] Else nextcol i-j s.t. Cj = max {Cm I matrix(ihestrow,m) 
= o} ihestcol + nextcol Endif matrix(ibcstrow, ihestcol) + 1 R ikt~w + R ikt~w 1 Ci~~~l -Ci&#38;t~l 
 1 If ( Rikhw >0 ) then go to Step (2) Else go to Step (3) Endif Step (3): [Select next row for assignment.] 
If(Ri=O fori=l, 2,..., p) then go to Step (5) Endif Check the exception condition: CmaX+maX{Cj I j = 
1,2,..., t} Ibum~#{Ri I Ri>O, i =1,2,..., P) If ( Cmax > Rnum ) then go to Step (4) Endif If ( there 
is nextrow s.t. corr(R ~tirW,R i&#38;trOW) = max { corr(Rk,R i~trW )IR, >O} &#38; corr(R ~tirwjRiktim) 
z 0.5 ) then iprevrow + ibestrow ibestrow + nextrow [In case of a tie, choose the candidate row with 
the largest current row-sum.] If (there isj s.t. Cj =max{Cm I Cm> O; matrix(iprevrow,tn) = 1 } ) then 
ibestcol + j Else ibestcol +-1 s.t. Cl = max {Cm} Endif matrix(ihestrow, ibestcol) + 1 R ikt~m + R ibtrw 
 1 Ci&#38;,t~l + Ci~t~l 1 If ( Ribtrm >0 ) then go to Step (2) Else go to Step (3) Endif Else go to 
Step (1) Endif Step (4): [Eliminate exception condition.] Undo the assignment of values to the elements 
of ibestrow that is, set all elements in the row to zero and reinstate the row-sum and column-sums to 
the values prior to this row s iteration. Let E = {Cj I C j satisfied exception condition in Step (3)} 
 If (#(E) >R,~ )then Find i s.t. Ri = max{Rk I k ~ ibestrow} ibestrow 4-i ibestcol+j s.t. max{Cm I m 
= 1,..., t} Cj = matrix(ibestrow, ibestcol) + 1 Riktm +Rlm- 1 C,~~~ + Ci~~* 1 If ( Ri&#38;tw >0 ) then 
 go to Step (2) Else go to Step (3) Endif Else Do for every q s.t. CqEE matrix(ibestrow,q) t 1 Ri%tim 
+ Ribtw 1 Cqi--c q-l nextcol 4-q Endo If (Ri~trw = O) then go to Step (3) Else Let iprecrow denote 
the row that pre­ceded ibestrow in assignment procedure. If ( corr(R iPrecrow,R iktrW) z 0.5) then If 
( there exists j s.t. Cj =max{C. ICm >@ matrix(iprecrow,m ) = 1} ) then ibestcol + j Else ibestcol + 
1 s.t. Cl =max{Cm Im =1, 9 t} Endif matrix(ibestrow,ibestcol) + 1 R itxstrow+ R it.estrow 1 Ci~t~l * 
Ci~t~* 1 If ( Ri~trw >0 ) then go to Step (2) Else go to Step (3) Endif Eke ibestcol 4-nextcol go to 
Step (2)  Endif Endif Endif Step (5): [Exit the procedure.] Return II matrix(i,j) II. The only source 
of complication in this heuristic is the exception condition. This arises when, at the beginning of any 
iteration, the number of utillled rows remaining is less than the largest (current) column­sum. This 
implies that some element in each column having the largest column-sum will need to be assigned a value 
greater than 1 in order to satis~ the column­sum constraints. This problem is avoided in step (4) of 
the heuristic by giving these columns a higher priority for assignment over other columns than would 
other­wise be more desirable. 42 Sample Results Figures la, lb, and lC illustrate three sample 20x25 
matrices generated on the basis of the user-specified data shown in Table 1. The inter-row-sum correla­tions 
{corr(Rh,Ri)} for 1< h, i <10 and for 11< h, i <20 were specified as 0.9. All other inter­row-sum correlations 
were set at 0.1. The inter­column-sum correlations {corr(Cj, Ck)} for 1< j, k < 12 and for 13< j, k <25 
were specified as 0.8, and all other inter-column-sum correlations were set at 0.1. The row-sums and 
column-sums were generated based on this input by the first stage of the procedure that is described 
in $3. The values of the matrix ele­ments were determined by the heuristic in S 4.1. All the three sample 
matrices reflect the desired tool commonality among rows 1-10 and rows 11-20. The desired tool usage 
dependencies are also evident in these matrices. These examples illustrate that, sub­ject to the above 
input conditions, the desired matrix may have more than one form of clustering (compare Figure la and 
lc). Also note that deviations from per­fect cluster formation is sometimes necessaxy to satisfy the 
row-sum and column-sum constraints (See Figure la rows 15 and 20, for example). 5 DISCUSSION In this 
paper, we have described a two-stage method for generating cutting-tool requirement matrices based upon 
user-specified information on the distributions of the row-sums and column-sums. The matrices that are 
generated not only satisfy the row-sum and column­sum constraints but also reflect part similarities 
and tool usage dependencies that are characteristic of real tooling data. This facility to generate random, 
yet real­istic, cutting-tool input data will be of use in detailed shop-floor simulation applications, 
such as for the evaluation of cutting-tool management strategies. Table 1: Target row-sums and column-sums 
1111111110001000000000000 10 1111101111111000000000000 12 Row-Sum R, Column-Sum Cj 000000000111110011001 
10011 10 1110011111111000000000000 11 00000001111110001000000011 8 2 12.0 1.0 10.0 2.0 1001111111111000000000000 
11 3 10.0 2.0 : 8.0 1.0 1111111111111100000000000 14 4 5 6 10.0 8.0 10.0 Lo 1.0 1.0 4 5 6 8.0 10.0 10.0 
1.0 2.0 2.0 0111111111110000000000000 111100000000010011001100:1 11 10 7 12.0 2.0 7 8.0 1.0 000011100000010011001 
1001 9 8 10.0 2.0 8 8.0 1.0 000000000000011111111111:1 12 9 10.0 1.0 9 10.0 2.0 010011000000011111111 
111:1 15 10 11 8.0 10.0 1.0 1.0 10 11 10.0 8.0 2.0 1.0 11000000000001111111111 11 14 12 12.0 2.0 12 1.0 
000000000000011111111111 1 12 13 10.0 2.0 13 I?lo 2.0 000111000000011011001 1001 10 14 10.0 1.0 14 10.0 
2.0 000000000000011111111111 1 12 15 8.0 1.0 15 8.0 1.0 111010000100011111111 1111 17 16 17 10.0 12.0 
1.0 2.0 16 17 8.0 10.0 1.0 2.0 000010000101011111111 1111 15 18 10.0 2.0 18 10.0 2.0 0010000000000111111111 
111 13 19 10.0 1.0 19 8.0 1.0 0000000000000111110111 111 11 20 8.0 1.0 20 8.0 1.0 21 22 10.0 10.0 2.0 
2.0 000010000000011011001 1001 23 8.0 1.0 8987087779787409438933994 24 8.0 1.0 25 10.0 2.0 Figure lb: 
Cutting-tool requirement matrix #2 1111111110001000000000000 10 0000000000000111111011 111 11 1110111111111000000000000 
12 0000000000001111111111111 13 0011111111100000000000000 9 000000000000011111111 1111 12 1111111000011000000000000 
9 0000000000000111110111111 11 0001111111100000000000000 8 000000000000011010011 1111 9 1110000111111000000000000 
9 0000000000000111111111 101 11 0011111111111000000000000 11 0000000001000111111111111 13 1111110001111000000000000 
10 000000000000011111111101 1 11 1100101111111000000000000 10 0000000000000111111011111 11 1111110000011000000000000 
8 000000000000010111111 1001 9 0000000000000111111011 101 10 1111101101111000000000000 11 0000000000000111111111111 
12 1111111111011000000000000 12 000000000000011111101 1001 9 1110111111111000000000000 12 000000000000010111011 
1111 10 1100111111111000000000000 11 000000110000000000011 1111 8 0000001011111100100000000 8 000000000000011111101 
1101 10 1111111000111000000000000 10 0000000000000111111111111 12 1111111111011000000000000 12 000000000000011101011 
1111 10 1111111111001000000000000 11 000000000000010011111 1111 10 1111000111111000000000000 10 0000000011111000000000000 
5 000011010000010010001011 1 9 7787988888889867786699869 000000000000110010001 1001 8876878879680299298810991 
 Figure la: Cutting-tool requirement matrix #1 Figure lC Cutting-tool requirement matrix #3 One direction 
for future research in this area is the incorporation of information related to processing times within 
the tool-requirement matrix. This is per­tinent in applications where information on the pro­cessing 
times associated with each cutting-tool for every part is required. Processing times, thus, would add 
another dimension to this variate generation prob­lem. Another extension of this problem is related to 
the notion of processing flexibility. In the machining con­text, it is often possible to process a part 
with alternate tool types (not necessarily with the same efllciency). For example, a part may require 
tool types 1, 3, 4, and one of 5, 6, and 7. Therefore, this part can be pro­cessed with three possible 
tool sets. A method is necessary to capture this feature of tool type substitu­tability when generating 
cutting-tool requirement data. An additional complication arises in the case of a tool type that requires 
two or more tool types to substitute it. For example, if the shape generated by tool type 4 can also 
be generated by using both tools 7 and 9, then we are faced with a situation where one tool type can 
be substituted by two different tool types. Thus, not only can a particular part type have more than 
one set of (alternative) tool requirements, but also these sets may contain different number of tools. 
In conclusion, the problem of generating realistic cutting-tool requirement data is not trivial. It is 
hoped that the methodology presented in this paper will stimulate more research in this area that will 
lead to the development of robust input modeling techniques for detailed manufacturing simulation applications. 
ACKNOWLEDGMENTS The authors would like to thank Professor Bruce Schmeiser, Professor Vijaya Chandru, 
and Vispi Bul­sara for their helpful suggestions and observations. This research was supported by the 
National Science Foundation under grant CDR 8803017 to the Engineering Research Center for Intelligent 
Manufac­turing Systems at Purdue University. It was also par­tially based upon work supported by the 
National Sci­ence Foundation under Grant No. DMS-8717799. REFERENCES <RefA>Johnson, R. A. and D. W. Wichern. 
1982. Applied multivan ate statistical analysis. Englewood Cliffs Prentice-Hall, Inc. Law, A. M. and 
W. D. Kelton. 1991. Simulation modeling and analysis. 2d ed. New York: McGraw-Hill Book Company. Veeramani, 
Barash and Wilson Stecke, K E. 1989. Algorithms for efficient planning and operation of a particular 
FMS. International Joumat of Fle-n ble Manufacturing Systems 1: 287­ 324</RefA>. AUTHOR BIOGRAPHIES DHMWARAJ 
VEERAMANI is a Ph.D. candidate in the School of Industrial Engineering at Purdue University. He holds 
a Bachelor s degree in Mechani­cal Engineering from the Indian Institute of Technol­ogy, Madras, Indi~ 
and a Master s degree in Industrial Engineering from Purdue University. His research interests include 
the design, analysis, and control of manufacturing systems, concurrent engineering, and applications 
of operations research to manufacturing. He is a member of SME, ORSA, TIMS, and IIE. His membership in 
honor societies includes Tau Beta Pi, Alpha Pi Mu, Omega Rho, and Phi Kappa Phi. He will be joining the 
University of Wisconsin at Madison in January 1992 as Assistant Professor of Industrial Engineering. 
JAMES R WILSON is a Professor in the Department of Industrial Engineering at North Carolina State University. 
His current research interests are focused on the design and analysis of simulation experiments, inchdng 
modeling and generation of probabilistic input processes, output analysis, variance reduction techniques, 
and simulation optimization. He also has an active interest in applications of operations research techniques 
to all areas of industrial engineer­ing. He currently serves as Associate Edhor of ZIE Transactions, 
Departmental Editor of Management Science for Simulation, and Associate Program Chair­man of the 1991 
Winter Simulation Conference. MOSHE M. BARASH is Ransburg Professor of Manufacturing and Professor of 
Industrial Engineer­ing at Purdue University. He received the B.SC. and DipLIng. degrees in electrical 
engineering at the Technion, Israel Institute of Technology, Haifa, and the Ph.D. degree in mechanical 
engineering at the University of Manchester, England. He had design and research experience in industry, 
and his academic experience includes positions at the University of Manchester Institute of Science and 
Technology and Purdue University. Dr. Barash has published numerous research and technical papers in 
design, manufacturing processes, process modeling and automatic planning, manufacturing systems and other 
topics.  
			
