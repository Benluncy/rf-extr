
 A NEW 'BUILDING BLOCK' FOR PERFORMANCE EVALUATION OF QUEUEING NETW O RKS W ITH FINITE BUFFERS* Rajah 
~ and gregorgFf . D~hl Harvard University Division of AppHed Sciences ABSTRACT W e propose a new 'building 
block', for analyzing queueing networks. This is a model of a server with a %~iab/e buffer-s/ae. Such 
a model enables effident analysis of certain queueing networks with bloddng due to limited buffer spaces, 
since it uses only product-form submodels. The technique is exten-.~ively tested, and found to be reasonably 
amumte over a wide range of parameters. Several examples ~e giver~ illustmthN practical situations for 
which our model would prove to be a useful performance analysis tool, spedally since it is ~rnple to 
under-~and~ and e_~w/ to implement using st~dard software for dosed queueing networks. Key W on/x Blocking, 
queueing networks, product form networks, approximate analysis, performance modelling, perfonnanoe predictiorL 
L INTRODUCTION In the performance analysis of queueing net-~ orks, product form solutions occupy a central 
role. his is because of their ability to represent a wide variety of situations_[l-6J, their susceptibility 
to effident computation [7-9J, and more impor~t, the fe~-% that they have worked well in practice [I0,1 
I]. Howeven an aspect of practical networks which is commonly encountered, and for which the product 
form solution breaks down, is thai. of limited buffer space at servers. (In some very special cases, 
the product form does hold, es discussed later.) A detailed M arkov chain model for such a system is 
usually intractable to solve. However, in system design, buffer size decisions play an important role. 
For these masons, analysts have searched for approximate ways to evaluate the performance of networks 
with finite buffers many such approxima- tions can be found in the literature [13-29,34,36,38,40], and 
an overview will be given in the next seetiorL 'This work was pardy supported by the U.~. Office of Naval 
Research Contract N00014-79-C-0776, and by a Gift from D igi- tal Equipment Corporatior~ The authors 
acknowledge u,.~ful k,_-puts and commits from Jeff Buzen, Peter D ennin~ and Subhash A grawal. Permission 
to copy without fee all or part of this material is granted provided that the copies are not made or 
distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. &#38;#169; 
1984 ACM 0-89791-141-5/84/008/0134 $00.75 The differences between the current paper, and others in the 
li~, are mainly two. The first relates to cormep~ our model is quite simple to explalr~ both mathematically, 
and in algorithmic form. The second concerns ~ our method can use existing software for solving product 
form networks, and its time/space computation re~ ments are low --facts which conserve both program- 
mer resources and hardware resources, These two points should appeal to the performance evaluation oommunity. 
Of course we hope that the model itself would be of interest to the theoretical community too. W e begin 
with some ba~und on analy~s of bloc/ring problems (§2). Then, §§ 3-5 motivate the new building block, 
define it, and use it to analyze a particular class of networks. In §6 we test our model over a wide 
range of parameters. Applications to a variety of practical networks are demonst~ted in §7, along with 
additional tests of accuracy. W e conclude with some extensions and other considerations. Z BACKGROUND 
ON FINITE BUFFER SYS-TEMS 2.1. D~miUc~ ¢l'Blcrkin~ Finite buffers affect a system by causing a server 
to be blocked when the queue at another server reaches a certain size. Formally them are at least two 
definitions of blocking. The 'das~cal' defLnition, motivated by production systems, defines blocking 
as occurring when a job which finishes ser- vice cannot be moved to another queue because the destination 
queue is full. An alternative definitior~ motivated by computer and communication systern~ defines blocking 
as oocuni~g when a job is denied service because the queue to which it will go next is (xmrentiy full. 
In the first case, blodKing occum after U%e sen/c~ i~ corqz/eL-~ whereto in the seoond case blocking 
occurs before serv/ce s/ar/a W e will refer to the classical definition of blocki~ as the transfer b/oddng 
definition since the transfer of the job is being blockecL The alternative definition we use here and 
in computer systems in genera[ we call the ~vioe bloct~N definition ~nce the service of the job is being 
blockecL In order to provide an intuitive explanation of the difference in def~tions, as well as to more 
effectively model systems, we reinterpret what oc~cs during service. In the transfer blocking definition, 
servers work on customers and the ~ee is there to allow for ~nooth operation. In the ser-vice blocking 
definition, servers just move customem between spaces, and do no other work on then-L Thus in this case 
the lack of downstream space must force the server to shut down. If the servers have infinite buffer 
space, the interpretations of service are indistinguishable. However this is not so in the rose of finite 
buffers. This paper will focus on systems which are d~araderized by the service bloe/dr~ definittor~ 
Two spednrac areas wlJch give rise to these types of models am computer systems and communication networks 
[12]. W ithin the area of computer systems we indude the central server type of models where we are modelling 
a computer and its major subws- terns, and also detailed models of subsystems them- selve~ Communication 
networks indude the badi-tional computer-con~nmfication networks as well as temJnal ooncentrators. One 
other area of interest is 'Real-Time' systems (e.g. data gathering) and we include an example of this 
type. 2.2. Previous W m~k The area of finite buffer queueing systems has been of interest for a number 
of years [13- 29,34,36,38,40]. Most of the earlier work was motivated by production systems [13-21,34,36] 
and thus used the transfer blocking definition. M ore recently the area of computer and communication 
systems has lead to a strong interest in the service blocking definition [22.-29,36,38,40]. It has been 
noted lhat even with redefinition of buffer-sizes, the two definitions are not equivalent in general 
[19], and not behlg careful about this distinction can lead to poor results. A s already mentioned, this 
paper uses the service blocking deflmition, which is of interest to the S1Gme~cs audience. A companion 
paper [34] extends the analysis here to the transfer blockir~g case, which is of interest in rnanufadndng 
systems. Previous worlq using the service blocking definition, falls into three groups. The first group 
[22,23,40] gives exact answers for some limited topologies via a markov clmin, in the last paper a product 
form solution is found. These were motivated by a computer model and h~clude both open s3%ierr~ [22,23]-arld 
closed systems [40]. The second group of models [24-26J are motivated by open communication networks. 
They exploit and model [l~e stmcltue of the specific problem to be dealt with, to give a local view, 
and then iterate over the servers until the algorit|~nconverges. The third group of papers is characterized 
by the spedfie solu- tion method. They assume that each of the possible states in the network is of preduc[ 
form [27-29]. This is equivalent to the reversible routing assump- tion, which differs from the definition 
we are considering here. For most of the previous papers dted above, one or more of the followh~g remarks 
is true: the paper involves a lot of analysis; the solution tech- niques require dexterity with numerical 
method~, and iterations must continue unlJl a convergence cri- terion is s&#38;isfied. In conlras[ with 
these, the current paper is simple to traders[and and implement~ and involves solving a lin~ted sequence 
of product form networks wilhout open-ended iteration. The ba-~c model we solve is a dosed t~dem network, 
but we apply the solution to open networks, as well as dosed networks, with limited generalizations of 
the tandem topology.  &#38; MOTIVATION FOR THE NEW BUILDING BLOCK W e motivate our approach by considering 
the pezfornmnce analy~s of a closed network with tan- dem f~fite buffers, shown in Fig.l, and henceforth 
referred to as network TFB. The network has m servers, St through S~, e~d the following are the ehameheristic~ 
of the servers: /~ service rate at &#38; (independent of number of jobs present); we make the usual exponential 
service times assumption throughout the paper b~ buffer size at 51 (includes space at the server itself); 
bl through b~_l are finite (depicted by dosed boxes), .and b.~ is inCmite (depicted by open boxes) N* 
maximum population in the network, that is, it is desired to estimate the throughput of the network for 
populations N: t,2 ..... N*; we will deal only with a sin- gle dass of jobs. Notice in particular, that 
in the definition of network TFB, b,~ is infinite. It turns out that many practical situations can be 
modded by such a repmsentation~ see §7. bm ~m bm-I ~m-1 b2 ~2 bl ju-I ----2-(>C3<>-- Sm Sm-I $2 SI 
 solutionfor N=I,2,-..,N*jobs Fig. i: Network TFB --A Closed Network with Tandem Finite Buffers The 
main perforrrrmm rnaasures we will be con-cemed with here will be throughput (denoted by X), and queue 
size distribution at server i (denoted P/d, for the probability that j jobs are present there). Also, 
all performance me&#38;~res will be qualhqed by N in parentheses, to indicate tim population at which 
they are calculated. Other perfonnonce measures, if desired, can be derived from theso two using dmn- 
dmd identities (Liltle's law, operational ident/t/e&#38; etc). Now consider the approach that would analyze 
this network using "flow-equivalent" approximations [81-{33,35]. Such a method would replace a subne~ 
work by a single flow-eq1~ivalent server. However, there is a problem with this approach that is easily 
seen when we consider lhe flow-equivalent server viewed fzom its immediately preceding server. To make 
the discussion precise, censider the %q.c'4v seen. ~n.7 Senmr ~; and suppose ~ could view all the downstream 
servers in terms of a single server with some buffer size, and a queue-dependent ser-vice rote. This 
service rote could be the rate of the fiow-equivaleig server, obtained by well known methods [39,35]. 
However, what buffer size should be used to represent this composite serveF? Suppose we use a buffer 
size of B = ~at t b/, which represents the total downstream capacity. This would certainly "ORB(N) = 
E ~(N Ik) p(k IN) (3) blocked in the actual network with less than B jobs /t=l downstream On the other 
hand, ff we use the immediat~ down~ buffer size b~_,, this underes- timates U~oughput~ since when there 
are b~_, jobs downstream from 51, not all of them need be in the buffer of &#38;_a in the actual network, 
and hence ~ can often continue serving, while in this representation it could get blocked. In practical 
terms, the view seen by S~ is that when there are k jobs in total at the downsgrean~ servers, sometimes 
S~ is blocked and sometimes it is not Thus 5~ "seeg' a finite buffer of size k in the equivalent server, 
for some pmper//on of the time. Our vm/able buffer s/m ~rodel is precisely an attempt to capture this 
view seen by ~. Having motivated the model, we will now describe it in detail.   4. 11 VARIABLE BUFFER-SIZE 
NODEL Our proposed new model is shom~ in Fig.2. Note in partioalar the '~ariable buffer size', indicated 
by an ~zow in the buffer for S~. W e also have a 'load dependent" server at &#38;, again indicated by 
an arrow in the cirele for the server, with rates/*~(n) : n = 1 ..... N, where ~**(n) is the mean service 
rate when n jobs am present at S~. The model is essentiallv a conceptual tool, in that it represents 
a composite structure which is a weighted average of simpler models, as now explalne&#38; Let ~,( *IN),p(21N) 
..... p(N IN) be ggenweights assedated with model VB, with N E P(/: IN) = t and p(~ IN) __a o for~ ~c. 
(1) k=l Conccptually, the weights p(k IN) represent "the pro- portion of time the model behaves like 
a model with 5t=k, given that there are N jobs in the network". P(btlN) /Jq(n) /~2 $2 S] N jobs Fig. 
2: Model VB --A Variable Buffer-size Model For this model, we define the values of the per- fom~ance 
measures XV~(N) and Pg](N) by N xVZ~(N) = E XFB( N ]k ) p(lc IN) /e=l (e) N Pit~(N)= E P~.~(N Ik ) p(k 
IN) k=t fori= l,2 and j=O:...,N . where Xm(Nltc) denotes throughput for a model sii~lar to Fig.~, but 
with fitted bzCfer size of b,-=Ic, and smnflar], J y fo m the use of " rFT'.j(NII¢). (Note su~r-~ripls 
VB for the w~iable buffer model and FB for Lhe f~.'ed buffer model.) ]n other words we am using tl.~e 
rule that for any of these performance measures, ag.y .~, where ,tC~ ( N )Ic ) is the corresponding performance 
measure in a fixed buffer size model with b,=k. Other perronmance measures (e.g. response time, queue 
lengths) are derived from these by the usual identities. It is easily verified from (1)-(2) that the 
P(,~(N)values sum (over j) to unity, and are thus consistent for each i and each N. Since p(kN) represents 
a proportion of time, we see that 4 "B is a time average of ~vB values. W e also essurne that each of 
the 4 'B values is obtained from a steady state solutior~ This is reminiscent of approxinkate decomposition 
[35]. Indeed, as this paper goes to press, we have been able to derive (3) using approximate decomposition 
ideas and this is discussed elsewhere [36]. W e are able to show that p(k N) can be interpreted as the 
probab////y the Se "seeff' a buffer size of k, given N jobs are down-stream of the server. Therefore 
in the remainder of rigs paper we will use the term Nffffer-s/~ proba/n~ instead of weights for the p(kN)-values. 
Now we turn to a most tuneful fact which is that the FB model, even though it has a finite buffer, has 
a product form solution [40]! Consider the case where N > b,. It is easy to see that for this ease the 
state transition diegmm for the FB model is isomorphic to that for a model with infinite buffers and 
p ~ of 51 --a standard product form cyclic network Alm, for lower N, no blocking occurs, and we again 
have a standard product-form cyclic network. M ore precisely, let IB denote performance measures for 
an infinite buffer model, specifimlly, the network in Fig.2 but with b~=~. Then the solution to the FB 
model is given by Far N < bl: xFIt(N) = X~(N) (4) For N > bl: xFB(N) = Xm(bl) /~,(bl) for0< jZ b, { PI~J(N) 
= 0 forj > bl P~/~(N)--- P~_j(N) Since the IB model is a simple producLform dosed network, we assume 
that the reader is familiar with means for solving IB (e.g. see [%9]); indeed, many efIicieng software 
packages am available to solve such models, so this can be considered an elementary [ask. Finally, from 
(2) and (4) we see that the solu- tion to model VB is easily constructed from the solu- tions to a ~imple 
product form nlodel.  5. ANALYSIS OF THE TANDEM FINITE BUFFER NETW ORK  W e now returrt to solving 
(approximately) the TFB network described in §3. In the terlr/nology of that section, suppose that we 
have already obtained values for the view seen by 4, Specifically, suppose that x~-1 (n) and ~-1(k IN) 
(for n,N,k = 1,2 .... N*) are the (queue-dependent) service Fates and buffer ptt¢>.abilities for the 
model representing S~_1 tkut)ugh $1 (i.e the view seen by 5[). W e would hke to use these values, alorN 
with the given valu~ of p~ and b~, to obtain the view seen by S~.t. that is. the values ~.~(~) ~d ~(~ 
IN). 136 For derivation of Xdn) values, we use a tech-nique analogous to the flow-equivalent method, 
modified to &#38;ake into account our. new building block.We need to find the tlm)ughput of the subneL- 
work consisting of 51 through S,, which requires camb'mh~ s~ along with the model for ~_~ through Sv 
Therefore, we solve the dosed network VB/ in Fig.&#38; The form of this model is the same as that. in 
Fig.2, wi[h solution as defined in §4. Le~ XV~(N) be the ti~ughput of tSis networl< with N jobs in ik 
Then, as in the usual flow-equivalent approach~ we let 2~(N) = XV~(N) forN=L...,N* . (5) P,.I(WIN) >,i.l(N) 
" " H . Si Si. 1 through S! t-t  Solution f~r N t 1,2F.,,N e iobs~ Fig. 3: The Closed Network VBi Deriving 
the probabilities ~(klN ) is more involved. These are the probabilitias for the buffer s~ze "seen" by 
8i+~. Now, when S~+I is blod<ed~ there are b~ jobs at fl in the actual network Suppose, when this happens 
there are k-b~ jobs at S[_, tIgough &#38;. Then this con~a~ponds precisely Ix) a buffer size of k in 
the view seen by Ai+i, since there are a total of k jobs downstman~ and ~:+, is being blocked. Next, 
we must es[.mmle the probability that this buffer size occurs. This is sO~Jghtforward from model VB/-- 
it is simply the probability that there are k-b~ jobs in server i (the r'ighkhand s~tver) in that model. 
In other words, we estimate that/~(klN) = pv~,.~_~.,N,/. Tiffs e~te does not, however, consider the boun- 
dary ~es, whirl] we now analyze. In the cases where k < b~, them can be no bloekiz N at 51+~when there 
are k jobs downstrea~r~ or A(k IN) ShoLfld be zero. If we use the acx2epbed oonven~ion that P~ is zero 
whenever j< O, then these cases am subsumed into the expression above, and pose no further problem. 
Next., consider the ease when k= N, which means them are N-b{ jobs downstream (at :}_, through S,). This 
shows that the rangeof values we oonsidered, i.e. k= i tftrough k: N, did not consider the cases where 
there are N-b~+l, N-b~+~,...,N jobs dowDsheearn. Now, with N-bi+j jobs downs~oeam, (j > 0), and N jobs 
in the subnetwork being modeled, there c~ only be bi-j jobs upstream, so that the buffer of ,N cannot 
block N+t when j > 0. In these cases then, ~}seems to have a~ inl]nil~ buffer. such behavior is modeled 
by the term A(N IN), since with N jobs in the l~etwofl{, a buffer of size N and an infinite buffer give 
rise to the same state transition diagr~n. Hence we should add these cases into the h;r'm for A(NIN ). 
P~tUng together the above argu-men ls, we get Lhe full expression for the new proba- bilities: P[B~-~(N) 
forN=l,...,N* mdk=l,....N-1  (k #v) = ~op v~ IN j l,...,N* and k=N (6)l.N-~.it ~ for N= The reader can 
verify that these new probabilities "also sum to unity. (The above relation tins reoently been rederived 
using approximate decompositior~ see [36J for details). Now we have completely specified the manner of 
obtah~ng the "view seen by ~+{', given the '~¢iew seen by ~". In order to solve the entire tandem net- 
work, we simply repeat this pmces~ over and over, sLaditN from the view seen by &#38;. The parameters 
for this view are lmown bivia]Jy, since Sz ju~ sees &#38; as an mdinary (non-vanable) finite buffer model. 
So /c~l(n) = ~ (n= 1 ..... N*), andp~@lN) = 1 fork=b1 and N= 1 ..... N*, otherwise pl(klN) = 0. With 
these given values, we ~-a solve netwmk VB~. Continuing in this manner, we solve VB3, VB4 ..... and finally, 
solve the network VBm to geLXVe'~(N), N= 1 ..... N*. TNs is our estirna½ of the throughput of the original 
network (Fig. 1) for varying levels of population. The above solution ~ehnlque can be written in algoritlma 
fotrn as shown in Fig.4. Note the ~npli- ally of our algorithm when compared with some of the other techniques 
in the literature --as discussed in ~e.e. /*ALGORITHM TO SOLVE TFB NETWORK "i/ begin /* INPUT *,/' 
input(~ N*, ~, thrum, % thru o~_,); /* INITIALIZE FIRST VIEW */ forN = iroN*do begin X,(Sr) = ~zt; fork 
= 1 to N do if k= b~ thenpt@ IN) = i else p,(k IN) = 0; end; /* MAIN LOOP: COMPUTE VIEW S 2 THRUm */ 
fori= 2 to redo benin solve network V]3i, obtaining XVm(N) and P[j~(N); forN= 1 to N* do begin fork= 
ltoN-ldon(krN) = Pl.k-~ ( e~ N) ; $~(N tN) b, vm . = ~j=o Pt,v-~+j(N), end; end; /* OUTPUT */ output(x~(1) 
0m~ X~(N*)); enck Fig. 4: Solution Algorithm for TFB Network 6. A COMPREHENSIVE TEST EXAMPLE Our approach 
using the variable buffer model is approximate one, besed originally on heuristic arguments (in §5), 
and more recently on apprexi-decomposition [36]. The "proof" of the model would lie in its simplidty 
and accuracy. The former can be seen from Fig.4. To check the latter, in this section we first condueL 
a compreher~ve set of bests on one simple network. A fber verifying the accuracy for this si~uaUon, various 
more complex networks  will be considered in §7. The bes~ network cor~sists of a TFB network with three 
servers, and two £mJ.tebuffers (Fig.5). For the set of tests, /~t and ~e were varied by an order of rr~gnit~de 
in each direction, around the /~ value, Buffer sizes b~ a~d b e were also varied, as was the population. 
Due to space limitations, only a few ms~.flts mn be presented, but these will be represen- tative of 
the performance of the model. b3 P3 b2 P2 b~ Ft N jobs Fig. 5: Network for the Comprehensive Tests Tablb 
1 considers a network with bt= 3, bz = 3, N= 6, and contains 25 best cases with service time combinaUons 
covenng the r~lge mentioned. The table con~ins three (nlculatiork~ of response times: 1) exaeL solution, 
by solving the detailed markov d~Mn; 2) variable buffer sdu~ion, using otto method of Fi&#38;4, and 3) 
ing~fi~ buffer solution, obtained by ignoring the blockirlg, i.e. sekUr~ b~= b2 = oo and u~ng the st~ldard 
product form solution. The lasL two columns show the ermr~ of estimates 2 and 3, relative to exacL soluUOrL 
It is seen thaL while the infinite buffer esLimabe is off by over 12% in some cases, implying signifimnL 
blocking, our model is within 3% in all e~nses. Tables 2, t[u'ough 5 show tests for still smaller buffer 
sizes. For ex~lpte, in 'Fable 4- the last. column shows thaL ~ere is a good deal of blocldDg, giving 
up to 37% emor in the mfinibe buffer esLirnaLe, while our model performs m&#38;~onably over Lhe entire 
range in thaL Table. In table 5 we do see some errors on the po~tive side (Lc. the predict.ions are opt.imishie 
rather Lhan pessimtsUe). 1'he soumes of error are from Lwo asrsuunplions relaLir~ to the decomposition 
app~oach and are discussed in[ 36J. W e have ram Lests for' m~ny other eombinaUons of b t, be, and N, 
flora wlfich iL seen~ thai. errors of 0%-2% am L vpi¢~ of our i~etllod, while ,3%-5% are (xx.'~.:~ion'd. 
]~a:-ed on these tests, and given I]~e siin- plicrily of our approach, we feel itis r~.'a~sonable as 
a p,', elical Loot for analyzing the effects of fkute buA'c~s. TABLE 1 M e~u Servic~ Tirn~ M ema Re~t~ 
ThTe Pe~'umtage En, erm Exact, V m-. ln£~te V m-. In~te Secv 3 Serv 2 Serv 1 Solution Buffer Buffer Buffer 
..Buff~ I0.0 L0 1.0 B0.1 60.1 60.0 0.0 0.I 10.0 1.0 5.0 60.6 83.7 60.5 -0.I 0.2 10.0 1.0 10.0 70.4 70.4 
70.2 -0.1 0.3 I0.0 LO g0.0 121.1 131.1 121.0 0.0 0.1 10.0 1.0 183.0 600.0 600.0 683.0 O.O 0.0 I0.0 5.0 
1.0 64.3 64.3 60.5 0.0 5.8 10.0 5.0 5.0 65.2 65.6 6LB -0.6 5.3 I0.0 5.0 I0.0 75.0 75.6 7L9 -0.9 4.1 10.0 
5.0 20.0 12~.9 123.1 121.4 -0.2 1.2 10.0 5.0 183.0 800.1 800.1 800.0 0.0 0.0 10.0 lO.O 1.0 80.0 80.2 
70.2 -0.B 12.3 1O.0 10.0 5.0 60.9 B2,1 71.9 -1.5 11.I I0.0 10.0 10.0 83.9 91.0 80.0 -2.3 i0.0 i0.0 10:0 
20.0 130.4' 131.4 123.5 -0.6 5.3 i0.0 10.0 183.0 600.5 800.5 600.0 0.0 0. I 10.0 20.0 1.0 12B.6 128.9 
12LO -0.~ 5.9 10.0 20.0 5.0 129.1 131.1 121.4 -1.5 5.9 10.0 20.0 10.0 133.6 137.4 1~5 -2.7 7.7 10.0 20.0 
20.0 181.7 164.8 143.7 -1.9 11.1 10.0 20.0 100.0 809.9 803.9 600.1 0.0 0.8 i0.0 183.0 1.0 600.5 600.6 
600.0 0.0 0.I 10.0 100.0 5.0 ~0.6 800.9 600.9 -0.1 0.1 10.0 100.0 10.0 601.0 601.8 600.0 -0.1 0.2 10.0 
100.0 83.0 604.2 806.1 600.1 -0.3 0.7 I0.0 i00.0 183.0 800.0 802.1 70L9 -0.3 12.3 Bu~ersize9 : bB= w 
, b2= 3, bt = 3 PoDal.e~.on : 8 TABLE 2 M ~ 8ervio= Tirn~ M ~m Re~aonse Time Pem~tage Errm~ Exaat Vet. 
Inf~te Vat. Infinite Sew3 Sorv2 Serv Solu~on Buffer Buffer Buffer Buffer 1O.0 1.0 1.0 40.4 40.4 40.0 
0.0 0.9 10.O L0 5.0 41.9 42.0 41.5 -0.3 1.0 i0.0 1.0 10.0 50.7 50.8 50.3 -0.2 O.B 10.0 L0 20.0 B3.1 83.1 
ORB O.O 0.3 I0.0 1.0 183.0 400.1 400,1 400.0 0.0 0.0 10.0 5.0 I,O 46.7 48.8 41.5 -0.2 11.1 5.0 48.5 49.1 
4~B -1.3 9.5 10.0 5.0 10.0 5.0 10.0 58.9 57.8 5P-7 -1.6 7.5 87.4 88.0 84.0 -0.7 3.9 10.0 5.0 20.0 ,401.0 
401.0 400.1 0.0 0.2 10.0 5.0 183.0 J.O.O 10.0. 1.0 83.0 60.3 50.3 -0.5 16.2 10.0 10.0 5.0 61.7 63.9 
52.7 -2.5 14.6 -3.2 13.3 10.0 69.2 71.4 60.0 I0,0 10.0 20.0 I0.0 10.0 96.9 98.6 87.7 -LB 9.5 40&#38;7 
403.8 400.2 0.0 0.9 10.0 10.0 183.0 1.0 93.3 93.9 82.6 -0.6 11.3 10.0 20.0 5.0 94.7 97.3 64.0 -2.8 
11.3 -3.9 12.9 10.0 20.0 10.0 183.6 104.6 87.7 10.0 20.0 20.0 123.4 127.1 105.3 -3.0 14.6 10.0 20.0 
 413.5 413.8 400.9 -0.i 3.0 11:}.0 100.0 1.0 483.6 4O4.0 400.0 -0.I 0.9 10.0 20.0 183.0 10.0 100.0 5.0 
404.1 405.9 40O, 1 -0.4 1.0 10,0 183.0 10.0 406.1 409.4 400,2 -0.8 1.5 10.0 100.0 ~),0 414.9 420.1 400.9 
-1.2 3.4 10.0 100.0 i00.0 600.2 604.0 502.9 -O.fl 16.2 Buffer sizes : ba = ~, bz = 2, bl = 2 Population 
: 4 138 TABLE 3 TAE~E 5 Mema~ Me~m R ~.,-=,~ Time M e~ ~¢vice Tinm~ M e~ Respome Time ~11~3 mo 10.0 
10-0 10.0 ~'~2 1.0 LO 1.0 LO ~t, vl 1.0 5.0 15.0 20.0 Exact i~lutlon 33.3 3~0 48.0 73.0 V~r. Buffer 3~3 
3~2 4~4 7~4 Infirdt~ Buffe¢ 30.1 32,5 40.4 6¢6 Vie. -0.1 -0.6 -0.8 -0.6 In~ril~ 9.5 14,8 15.9 11.8 Serv 
3 15.0 10.O 10.0 lO.O Se~ 2 LO 1.0 1.0 LO Seer 1 1.0 5.0 10.0 20.0 Exit Solution 00.5 61.6 T&#38;7 122.2 
V~ Buffer 60.4 81.5 7~6 122.2 lnfmlte Buffer 60.0 60.5 70.~ 121.0 O.E 0,3 0.1 0.0 Vnr. Buffer 0.9 1,8 
:t4 1.0 Inflrdt~ BuYer 10,0 10-0 10.0 1110 10-0 !1).0 10.0 10,0 10.0 10.0 10,0 mo 10.0 11).0 10.0 10,o 
_ 1-0 RO 5.0-50 50 5.0 10.0. I0.0 10.0 15.0 10.0 25.0 E0.O ~0.0 ~O.O 2ao 100,0 1.0 5.0 10.0 ~O.O 100-0 
1.0 5.0 10.0 20.0 100.0 1.0 5.0 10.0 20-O lOO.O 30~7 4~3 50.0 80.0 85.0 317.7 00.3 85,0 75.0 105.0 3~7 
gO.3 ~0.0 106.0 130.0' 352.7 306.0 45.7 51.4 82.0 87.1 .~18.8 51.2 57.9 7~8 104,0 334~8 91.8 99.9 111.4 
137.0 366.5 3O0.3 3~5 35.5 43.2 8~4 3O0.5 40.4 4.22 ~0 70.9 301.0 64,6 65.4 ?0.9 58.5 303.3 -0.1 -0.9 
-2.9 -3.3 -2.5 -0.3 -1.5 --4.4 -5.0 -4.0 -0.6 -I,7 -5.1 -6.1 -5.4 -1.2 L8 28.3 29.1 2"/,9 ~1.8 5.4 33.0 
33.5 3~3 29.1 9,5 28.5 30.1 3~5 33.5 I~4 10.0 10.0 10.0 10.0 10.0 10.0 , 15.0 15.0 10.0 10.0 10.0 10.0 
10.O 10.0 10.0 100 LO ,, 100.0 5.0 1.O 5.0 5.0 5.0 10.0 5.0 20.0 50 100.0 10.0 1.0 10.0 5,0 10. O 10.0 
10.0 20.0 10.0 .,. 100.0 20.0 1.0 20.0 5.0 20.0 15.0 20.0 20.0 20.0 100.0 600.0 70,0 70.9 79.9 1P-~9 
600.1 gO. 0 90.5 96.7 133.7 , 600.6 140.0 140.2 143.4 167.0 604.0 800.0 70.0 70.1 79.5 125.0 600.1 90.4 
92.0 90.5 135.1 600.6 140.6 144,9 151.2 174.3 604.2 600.0 60.5 6L6 7L9 1~1.4 500.0 70.~ 71.9 80.0 123-5 
600.0 121.0 121.4 123.5 14~7 600.1 0.0 -0.1 1.0 0,4 -5.1 O.O -0.5 -1.7 -1.9 -1.1 0.0 -0.6 -3.3 -5.4 -4.4 
0.0 0.0 13.5 12.8 15.0 2.8 0.0 22.0 20.8 17.3 7.8 0.1 13.6 13.4 13.9 13.9 0.6 1(10 10.0 15.0 1110 10.0 
100.0 100.0 10(10 10110 100.0 1.0 5.0 10.0 20.0 100.0 330.3 33~0 34~0 370.0 60~7 332.7 34~8 357,3 385,1 
515.4 300.3 300.5 30L0 30~3 403.8 -0.7 -2.5 -3.8 -4.1 -2.1 9.1 10.3 12.8 18.0 ~0.0 15.0 10.0 10.0 I0.0 
10.O 100.0 200.0 100.0 100.0 21~0 1.0 5.0 10.0 ZS. 0 100.0 606.5 6~.5 605.7 6110.4 800.9 605.9 808.7 
613.7 6,36.9 82[L6 600.0 600.0 600.0 000.1 701.9 -5.1 -0.5 -1.3 -3-1 -3.5 0.9 0.9 0-9 1.4 12.4 l]u~'m-m 
: be=**, bi = L bt= 1 BuJTecdzes : bs = ~ , be = 2, bz --3 PolF~o. :3 Pvpulnfion : 6 7. EXAMPLES OF PRACTICAL 
NETW ORKS W e now consider a representative seL of exam- ples to show the effeddveness of Lhe variable 
buffer method, as well as the pervasiveness of the finite buffer in computer-communication systems. 7.1. 
Use ofTFB Netwva'k Represe~liation Before proceeding with the actu~/ examples, we consider how the TFB 
neLwozk, as deEe~ed by us, proves useful in representing eerC~n sTstems, M any TAI~E 4 of the examples 
considered below can be thought of as op6vt l~dem networks wiLh finite buffers, as in Fi&#38;6. Here 
k ~ is the arrival m[e (Poisson), and M enn Se=.vice Timm M ewa Re~9orn~ Time sewers S1 t~DL~h -~-1 (~ld 
their par~arneter.~) are as Sm~,3 Se~2 ~a'vl gxad~ Solution V ~-. Buffm" Infinite Bu/fer Wr. Buffer InflnitB 
BtaTec before. W e assume LhaL if ~_1 is full, Lhe arrival pro- oess shuts down, or that a~rivals are 
lost (boLt are 11}.0 10.0 10.0 10.0 1.0 L0 L0 1.0 1.0 5.0 10.0 20.0 45.1 42.1 52.2 I]6.2 40.2 42.7 52.9 
5&#38;5 40.0 41.5 50.3 6~8 -0.2 -1,4 -1.4 -0.4 0.1 1,4 3.7 3.9 equivMent due to the memo,yless arrival 
process). Now, we cea: aaalyze the behavior of this open neb work by analyzing the closed network TFB, 
if we set 10.0 10.0 1O. 0 15.0 L0 5.0 5,0 5.0 100,0 1, O 5.0 i0.0 404.0 43.4 49.5 54.0 404.0 44.1 51.6 
66.0 400.0 41.5 43.8 52.7 0.0 -1.5 -4.3 -3-~ 1.0 4.4 11.4 17.7 /z., = a ~ and use a population N > .,-1 
,~j=, bj. ]o see this equivalence, with tbJs value of N there will always be a job aL S,., and lhe operation/shutting- 
10.0 10.0 10.0 15.0 5.0 5.0 15.0 10.0 20.0 105.0 1.0 5.0 101.0 4~0.0 54.9 64,1] 102.1 4Z0.0 55.0 07.2 
84.0 400.1 50.3 52.7 -1.0 0.0 -1.5 -3.6 16.9 4.7 8.4 15.8 down of &#38;, will predsely mimic the arrival 
process in the open network. Also, since b,~ = ~, &#38; will never be blocked and so will not expezience 
~y differenoes 10.0 15.0 10.0 10.0 10.0 20.0 ~...0 120.5 54.2 121.7 60.0 87.7 -2.{$ -1.O ~6.8 27.2 between 
the open and dosed models. 10.0 10.0 1(10.0 440.0 440.1 400.2 0.0 9.1 10.0 EO.O 1.0 88.5 89.~ 82.8 -0.8 
5.4 10.0 10.0 20.0 25.0 5,0 10.0 101.9 120.8 103-6 122.4 8¢0 87.7 -i.7 -1.3 17.5 27.4 X° brad /'t'm-I 
bin-2 ftm-2 b 2 ]d. 2 b! //.! 15.0 25.0 20.0 165.~ 181.2 105.3 -0.8 34.3 10.0 20.0 100.0 480.0 480.1 
400.9 0.0 18.5 10,0 |00,0 1.0 404.3 404.4 400.0 0.0 1.0 15.0 100.0 5.0 420.I 420.3 400.1 0.0 4.8 10.0 
10(10 15.0 445.0 440.3 400.2 -5.1 9.1 10.0 10.0 100.0 . 100.0., ~l 0 1(10.0 480.0 500.0 480.2 400.9 1300.0 
.502.9 0.0 o.o, 16.5 .37.1. Fig. 6: An 0pen Tandem Network with Finite Buffers Thus we see thaL network 
TF/3 can be used to analyze netwo2i~s as in Fi&#38;6. In the examlgles that. ]klltat"~ : bl---®,bl=3- 
bl= 1 follow, we show the ae{~ual (open) repres~.ntation,-4~, l%lxanlima : 4 buL the reader can easily 
translate this into Lhe TFB netwozk that we are solving. 139 7.?_ Peff~,3~ Evaluation eft Same Pradical 
In the examples below, exact solution would consume a lot of computer resources, so we compare our method 
with simulations instead. The simula-Lions were run with regeneration points, and the ranges shown represent 
95% confidence intervals. Also, all the fNure.s below are labelled with recipro- cals of mean service 
t~r~a and not rotes, since the times relate directly to device speeds encountered in pracLice, and are 
more familiar. ~ra 1: This is a disk to tape backup model, composed of three servers, and two finite 
buffers (Fig.?). The firsL server is the disk and channel which transfers blocks from the disk to the 
main memory. The second server transfers data from the main memory to the tape drive. The last server 
represents the tape drive itself. The figure gives the design parameter values. W e are to find the backup 
rate. The results in Table 6 show that one can nuake an error if one does not account for the finite 
buffers. Even if one accounts for them by just drop- ping the population in the infinite buffer model, 
to be the sum of the buffer sizes (N= 4 column) the error is still significant. However, our model predicts 
the backup rote quite well. Sg~ierrz 2: The next example is motivated by a simple M ass Storage Sysbeni 
(M SS) as might be used in data processing envimtm~ent The system consists of a first M SS, a sl~ging 
disk, a central proce~or, an outstaging disk and finally another M SS (Fig.as). The blocking is primanly 
occurring between the dislcs and M SS devices. The buffers are relatively small and the service times 
are of similar size. From the resnalts in q' able 7, we see our approximation reason- ably models the 
M SS. W e also note the infinite buffer asmmlpLion does pooHy for this systerrL Sy~_Len~ 3". This is 
a simple terminal concentmtnr. W e include a number of terminals, a cencentrator and a ch~mel which tronsfers 
data to a main memory area (Fig.9). Table 13 contains the results of this eonuJmnications model W e see 
that the approximation is good, and assuming infinite buffers cause elTors. S y~-tern4: This is a simplistic 
view of a mmputer cornmunication systen,1 (Fig. 10). The overall popula- tion consh~tnt (N := 5) is caused 
by a window flow control mech~fism [30]. The individual buffers represent the finite ~ace which is available 
for inter- mc.diatP, stamge. The model itself is justa tandem network and not a fully cotmeete.d systen~ 
From the resaJlts in 'Fable 9, we see the drop in throughput due to the ftnite buffers. 5: This is a 
real-Lime data gathering sys- terr~ W e have seen no other examples analyzing such a s~sLem in the literature. 
The problems in this area have not yet been addrex~ed by queueing models. We include a generic type 
of system (Fig.it) which centains a data gathering componen~ a local buffer, and a D kvct Memory Access 
(DM A ) device which moves data from the loc~l buffer to the m'..fm memory. Also included are a CPU and 
a disk dlive for tiivi~ data analysis and sbomge of informa- tion. The res~alts in 'Fable lO show our 
appmxima-bon models the generic system quite well. One should not ,~ssume infinite buffers in this case 
or b~;licve Lhe 'theoretic' maxirn~un tiu~ughput wNch sinaple analysis gives. O.isk CPU Tope x = b~ /~z 
b~ F, Fig.7: D isle to Tape Backup System  M$~ Disk CPU Disk MSS x= b,~ F4 b~ F3 b z FZ b t /'~ 1/45ms 
3 ~/30ms 2 1/tZms 3 1/30rns 2 1/45m Fig.e A M ess Stor~e System Concentrator Channel CPU xo b z /z2 
bl ~1 I~.9". A Terminal Concentrator b4 'u'4 b3 /as b z FZ b) P-~ . ; ,oo. ; ,;,2o. : ,,=. 5 Jobs t Fig. 
I~. Communimt[on Network with Window Flow Conkm[  Locat Main D~k Dato Buffer DMA Memory CPU Buffer Disk 
 X° b3 /"L3 Fig.lI: Real-Time D ate Gathering System TABLE 6." Disk to T~oe Backup System Red.up Rate 
( BIodcs per sea ) 4- 2Z New InfnL BuL InfntBuf. A ppro~ ( N = ~ ) (N= 4). 28.84 26.73 33.33 29.88 
~ (%) 60.4) (24.2) (n.3) TABLE 7: A M a~s Storage System Processing R~e ( Blocks per se~ ) Sirr~ ± 2Z 
New Infnt Bur. InfntBuf. Approx. (N= ~ ) (N= 10) 16.36 16.13 22.22 19.16 error (%) (-1.4) (aS.B) (17,1) 
TABLE 8: A T=n/nal Concenfrator Communication Rate ( M ess~es per see. ) Sln% + 2Z New lnfnh Bur. InfnL 
Bur. Appro~ (N= ~ ) (N= 4) 72-,.30 7~.10 83.33 73.87 error (~) (-0.3) (15.3) (za) TABLE 9:. Communication 
Neh~rork with W indow Flow Conh"ol Communication Rate ( Blocks per sea ) ± E~ New InfnL Bur. InfnLBuf. 
Approx. (N= oo) (N=5~ 53.15 50.33 100.00 62.50 ~,-(r~) (-~.3) (88.0) 07.6) TABLE 10: Real-Tinm Data Gathering 
System Data G atherir~ Rate ( Blocks per sea ) Kn~ ± ~Yo New InfnL BuL InfntBuf. . Approm (N= ~ ) (N= 
8) 60.38 60.39 83.33 79.27 ~o~ (~) (0.o) Oa0) (a.3) 8. EXTENSIONS AND CONCLUSIONS &#38;l. M~e Ge~.cral 
T~lo~es The approach here is readily used without any modifications to analyze a~y open/closed network 
where ftnite buffers occur only in tandem subneb works, e.~. the computer-communloation network in FiR. 
12. Our m~alysis fLrs[ ~duces each such subnet-work to a single flow-equivalent server, with infinite 
buffer, and service Pates ;%.(n) obtained from the algorithm in FJg.i This reduces the original network 
to one which has a pmduch form soluUon (Fig.13), which can now be solved by the usual algorittm~s. (Of 
caurse, we reolize the flow-equivMent repres~n- taUon of the subneLworks will not be exact because the 
ouLput proce~ of the s~bnetwork is not Poisson, and indeed this is the limitation of flow-equivalent 
methods in general.) Still, test examples on tiffs approach, for larger networks with several finite 
bt ~ffer subnetworks, a~n M~ow tiroL our approach is within 2%-3~ of simulated values. ,,. -SYSTEM I 
---~ " - / Disk~ CPU Network ~ Network Network Network Network / Network CPU -i. t Interface I Znterfoce 
~ Disks /' -SYSTEM W Fig.12: Co~umc~tion Network between Two Computer Sys<err~ The variablc buffer 
idea appears to extend to networks with s'plitLb~ and metzb]g topologies as well, sc~ [3(]]. W e am cu~x~ntly 
investigati~ exten-sions to quite general k~polo~ies. SYSTEM I. t~T~-+ iN~ ~C,6S Y i~ SYSTEM ]I Pig.13: 
Flow-equivalent (product from) Represent~ion for Network &#38;2. Cc~putational C,msid, rations The complexity 
of our method is shown in [36] to be O(MN~). (W e note that, in Fig.4, calculations for network VBi(N) 
can use the ealollations already done for VBi(N-1).) Exact solution of the TFB neU work, by inverting 
the tpan~tion matrix of the corresponding markov chain, would typically require ~everal orders of maRTfitude 
more calculations. The difference gets even more pronotuiced when we con- ~der the genepal topologies 
of Lhe above sectiorL Also useful from a computational poinL of view is the fact that. our algorithm 
can use standard routines to :~olve product fo~m models. The analyst can implement our approach just 
by writing a simple pro- gram which calls such routines. 8.3. Re~a~itmship to Si,radk~neaus Resotm~ 
Pas-sess~a (SRP) Finite buffer networks resemble those with SRP [37] because a job needs to hold both 
a buffer space and a server while being served. It is tempting to extend SRP approximatiorL% (e.g., 
i37]) to this case. W e oli~inally [tied to do this [38J, but subsequen- ti'aily found that the method 
in [37] stlffered from various drawbacks of continuity [36]. In additior~ when multiple f-h~ite buffers 
ace involved the SRP ~¢mlogy becomes' far too complex to use [36]. On the other hand, a Ificx~ conceptual 
analogy for our work is to note thai. our VB model essenti~ly factors in the effects of blocking via 
TJopulalio'n. cYgralra~nl~ and Lb[s is else the teehifique used (albeit with dJffe~eiff, details) in 
a more reoent approximation for SI{P [39]. 8.4-. Condtu~vns D uring flle desi~, stages of a computer 
system or cornnmnicalion network, d~oices of bLUffer sizes may sigrfifie.~Lly affec~ Z~tem peffom~mce. 
We hope that Lifts p~per gives file pmddcal system de:~gner a readily used tool to evahmte such buffer 
~ize decisions, along wifl~other decisions such as ser- vice Limes. We also hope we have demonstrated 
the effectiveness of this tool in analyzi~g several practi-cal situaUor~. Finally, we have suggested 
a general building block, to be added to the various techniques available for modelling queueing networks. 
 9. RE~'~RENCES <RefA>[1] Jackson, J.R. , "JobshopJike Queueing Sys- ten~", Ma~g. Sc~ 10, No. i, October 1963, 
pp. 131-14,:3. [2] Go~don, W.J. and G.F. Newell, "Closed Queue- ing Sys±ems with ]~xponen[[alServers", 
O/a Rex 75, No. 2, April 1967, pp.254-365. [3] Ba'~ketL F., K.M. Chandy, R.R. M untz a~d F.G. Palacios, 
"Open, Closed, and Mixed Networks of Qucues w ilb D ifl'em~ fl, C lasses of C ustoFtlel~', d ACM, VoI.G% 
No.2, \pril 1975, 248-260. [4] Spedel Issue on Computer Performance Model-ling, Carrp Stnve~ 10, 3 (Sept 
1978). [5] Spedel Issue on Analytical Queueing Modela IEEE Corr~ 13, 4 (April 1980). [8] Koenigsberg, 
E., 'Twenty Five Years of Cyclic Queues and Closed Queue Networks: A Review", J. OI~L Res Soc 33, pp. 
605-619, 1982. [7] Buzen, J.P., "Computational Algorithms for Closed Queueing Networks with Exponential 
Servers," C. ACM, Vol. 16, #9, September 1973, 527-531. [8] Reiser, M. and H. Kobayashi, "Queueing NeU 
works with Multiple Closed Chains: Theory and Cornputationel Algorithmg', IBM J. Rea Deu 19, May 1975, 
283-294. [9] Reiser, M. and Lavenberg, S.S., '~ean Value Analysis of Closed Multidnain QueueLng NeE works", 
J. ACM 27, 2, April 1980, 313-323. [10]Spragins. J., "Analytical Queueing Models: Guest Editor's Introduction," 
IEEE Co'rrpuler, Vol. 13, No.4, April 1980, 175-194. [tl]Suri, R., '~obustness of Queueing Network Formulae", 
J. ACM, Vol, 30, No.a, July 19133, 564-594. [12] Schwartz, M., Corr!oufer-Co~ Netaork Designm~dAral!&#38;~ 
Prentice Hall, 1977. [13]Hunt~ G. C., 'Sequential Arrays of Waiting Line~" Ota Rea 4, 674-683, 1956. 
[14]Avi-Itzhak; B. and Yadin, M., "A Sequence of Two Servers with No Intermediate Queue," Mcm~. Sci, 
Vol. 11, No. 5, 553-564, March 1965. [15] Hillier, F. S. and Boling, R. W., 'TiniLL Queues in Series 
with Exponential or" Erlang Service Times-- A Numerical Approach," Oin Rex 15, 286-303, 1967. [16] Buzacot~ 
J.A., '~kutornatic Transfer Lines with Buffer Stock~', Ir~ J. /~ot Rea 5, 3, 1967, 183-200. [17] Takahashi, 
Y., Miyahar~ H., and Hasegaw&#38; T., "An Approximation Method for Open Restricted Queueing Networks," 
Oin Rea, Vol. 28, No. 3, Part I, 594-602, M ay-June 1980. [18] Altiok, T., 'IApproxirnate Analysis of 
Exponen- tial Tandem Queues with Blocking," Eza:. J. Oper. Res 11, 390-398, 1982. [19] Altiok, T. M. 
and Stidharr~ S. S., "A Note on Transfer Lines with Um~liable Machines, Ran- dom Processing Time~ and 
Finite Buffers," IIE Tw.z~.ctim~ 14, No. 4, 125-127, 1982. [gO] Gershwin, S.B. and Sehick, I.C., 'Modeling 
and Analysis of Three-SLLge Transfer Lines with Unreliable Machines and Finite Bufferff', Oin Rex 31, 
2, Mam_h-April 1983, 354-380. [21]Yao, D. D. W. and Buzacotk J. A., '~ odeling a Class of Flexible Manufacturing 
Systems with Reversible Routh~," Tech. Rep. 83-02, DepL of IE, Univ. of Toronto, August 1983. [22] Konhein~ 
A. G. and Reiser, M. "A Queueing Model with Finite Waiting Room and Blocking," J..ACM, Vol. 23, No. 2, 
320-341, April 1976. [23] Konhein~, A. G. and Reiser, M., '~qniLL Capa- city Queueing Systems with Applications 
in Computer Modeling," SIAM J. Corrpuli~, Vol. 7, No. 2, 210-229, May 1978. [24] Labetoulle, J. and 
Pujolle, G., '~isolelion Method in a Network of Queues," IE£~7 TT~s. Sodl E~g., V ol. SE-6, N o. 4, 373-381, 
July 1980. [2_5] Labetoulle, J. and Pujolle, G., 'ff-ID LC Throughput and Res~)onse Time for Bidimc-Lionel 
Data Flow with Nonuniform Frame , i [ ~1 Sizes, IEL'E T~tms Co~ Vol. C-30, No. 6, 405-413, June 1981. 
 [26]Boxm&#38; O. J. and Konheim, A. G., "Approxi- mate Analysis of Exponential Queueing Sysbems with 
Blocking,"Ac/~I~fo~Ta/icct 15, 19-66, 1981. [ZT] Lain, S. S., 'Store-mad-Forward Buffer Require- ments 
in a Packet Switching Network," I/~'E T~s C~. Co'rr~24, No. 4, 393-403, April 1976. [PAB]PitLL1, B., 
"Closed Exponential Networks of Queues with Blocking", IBM Research Report No. 26548, Yorktown Heights, 
NY, 1976. [29] ]3elsamo, S. and Iazeoll~ G., 'Some Equivalence Properties for Queueing Networks with 
and without Blocking" in PERFO RMA .ArC E,'83, A .K. Agmwela and S.K. 'rripaU~i (e~s.), i~orm Holland 
1983, 351-360. [30]Ve~ghese, G., Chou, W., and Nilamr~ A.A., a Sliding Window Flow Control Scheme', 
ACM Perf~rmcmce Ezn/ua//on Ret/eu~ August 1983, 275-281. [31]Chandy, K.M., U. Heczog, and L. Woo, '~arametric 
Analysis of Queueing Network~'i IBM J. Rea Deu, Vol.19, January 1975, 36-42. [32] Chandy, K.M., U. Herzog, 
and L. Woo, "Approximate Analysis of Generel Queueing Networks", IBM J. Res Deu, Vol.19, January 1975, 
48-49. [S8]Chandy, K.M. and C.H. Sauer, "Approximate Methods for Analyzing Queueb~g Network Models or 
coTp2 } s 10, 3, 281-317 (SepL 1976). [34] Suri, R., and DiehI, G.W., "A Variable Buffer- Size Model 
and its Use in Analyzb~g Manufac- Ruing Networks with Blocking", subrnitLLd to Managerrent Sdence [35]Courtois, 
P.J., Deco~r~osibility Qeueb~ c~d Computer S~s'k..r,z A ~iic'affo'~ Acaderr~c Press, New York, N.Y., 
1977 [86] Diebl, G .W ., A BuffeT-E~bxder~y Decorqmsi~n Appnach. fo F~fflz 13vffl~" Q~eue#Tg Nelzu~ks 
Ph.D. Thesis, Diviuion of Applied Sciences, Harvard University, Cambz~clge M ass., 1964. [37] Jacobson, 
P.A., a~d Lazowska~ E.D., '~ nalyzing Q ueueing N eLworles with Simultaneous Resource Po~s~on", C. ACM, 
Vol. 25, #2, February 1982, 14,9-151. [38]Dietfl, G.W., and Suri, R., 'Gffident Anelysis fo Bloeldng 
in Finite Btfffer Queueing Sys~ern~', unpublished manuscript, 0 c~ber ] 982. [39] Jaoobson, P.A., aad 
Lazowska~ E.D., "A Reduc-tion. Technique for Evaluating Queueing NeE works with Seriaization D days", 
in PENFOR-MANCE '83 A.K. Agmwela au~d S.K. 'rripami(eds.), North Holland 1983, 45-59. [40] Gordon, W 
.J. and G.F. Newell, "Cyclic Queuing Systen~ with Restricted QueueW', Ola Rea 15, lqo. 2, April 1967, 
pp.266-277.</RefA>  
			
