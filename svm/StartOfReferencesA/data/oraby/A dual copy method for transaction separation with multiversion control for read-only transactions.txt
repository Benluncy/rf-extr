
 A Dual Copy Method for Transaction Separation with Multiversion Control for Read-only Transactions 
Baojing Lu Research Assistant Qinghua Zou Research Assistant William Perrizo Professor Computer Science 
Department North Dakota State University (1)-701-231-6257 Computer Science Department University of California, 
Los Angeles (1)-310-206-4561 Computer Science Department North Dakota State University (1)-701-231-7248 
Baojing_Lu@ndsu.nodak.edu zou@cs.ucla.edu perrizo@plains.nodak.edu Keywords Transaction separation, 
read-only transaction, query, multiversion, Concurrency Control  Abstract There is much research suggesting 
separating transactions from update transactions to improve the performance of database systems. But, 
how to separate them is still a problem. Some modern database applications, such as data mining and web 
publication, require a DBMS for huge read-only transactions, i.e. queries. We propose a dual copy method 
to separate read-only transactions from update transactions to achieve global high efficiency. The idea 
is to make the DBMS reserve two copies of data, a master copy and a slave copy. The master copy is for 
update transactions only; the slave copy is for read-only transactions only. Any concurrency control 
method can be used for the update part. But for the slave copy, data are stored in a customized number 
of versions. The master copy sends updated data to synchronize the slave copy at appropriate times. In 
the proposed method, updates write to one version and then publish this version after a given version 
period. The other versions are used for reading. The updating and reading do not interfered with each 
other. This method is especially appropriate for reading intensive DBMS. 1. INTRODUCTION Transactions 
can be divided into two classes: update transactions and read-only transactions [3, 6]. The main differences 
among them are listed below in table 1: Because there are so many differences between read-only and update 
transactions, many research efforts suggest separating them to avoid unnecessary conflicts between them. 
But there is not much research on how to separate them effectively [2, 8, 11]. Permission to make digital 
or hard copies of part or all of this work or personal or classroom use is granted without fee provided 
that copies are not made or distributed for profit or commercial advantage and that copies Permission 
to make digital or hard copies of all or part of this work for bear this notice and the full citation 
on the first page. To copy otherwise, to personal or classroom use is granted without fee provided that 
copies are republish, to post on servers, or to redistribute to lists, requires prior not made or distributed 
for profit or commercial advantage and that specific permission and/or a fee. copies bear this notice 
and the full citation on the first page. To copy SAC 2001, Las Vegas, NV otherwise, or republish, to 
post on servers or to redistribute to lists, &#38;#169; 2001 ACM 1-58113-287-5/01/02 $5.00 requires 
prior specific permission and/or a fee. SAC 2001, Las Vegas, NV. Copyright 2001 ACM 1-58113-324-3/01/02 
$5.00 Table 1: Comparison between update transactions and read-only transactions Update transactions 
Read-only transactions Conflict with each other Yes No Number of affected tuples Small Large Requirement 
for real time operation Strong Not strong Data recovery requirement Possible Not Possible Concurrency 
control [3] Yes No From here on, we use txns to stand for transactions. A lot of research on multiversion 
concurrency control mechanisms, such as [3,4,6], show that read-only txns can be made independent of 
the underlying concurrency control method and thus can be executed very efficiently. Some modern database 
applications, such as data mining and web publication, require a DBMS for large read-only transactions, 
i.e. queries. There is usually a data warehouse system to support such applications [5, 13, 15], and 
some related research work have been done on data warehouses [9, 10, 12, 14]. Read-only transactions 
are simple but critical for response time. But, sometimes they are blocked by update transactions which 
are time consuming. For such application environments, we propose a dual copy method to separate readÂ­only 
txns from update txns. And, for read-only parts, a multiversion concurrency control method is applied 
with flexibility in number of versions and the update period. The rest of the paper is organized as follows: 
Section 2 gives an overview of related work on multiversion algorithms. Section 3 contains the transaction 
separation method and the problem that needs to be solved. Section 4 introduces the solution model. The 
main parts of the model are discussed in section 5 and 6. Finally, in section 7 we will draw a conclusions. 
 2. RELATED WORKS ON MULTIVERSION ALGORITHM There is much previous work on multiversion algorithms. 
Among them, [4] introduced an algorithm maintaining only a small fixed number of versions up to three 
 for a modified datum. Each version corresponded to the state of the datum at the end of anexternal predefined 
version period. [11] also defined versions corresponding to the end of externally defined version periods. 
In this paper, the data copy for queries are stored in a flexible number of versions, e.g. 5 versions 
as customized. And versions have the same meaning as in [4, 11]. Unlike [4, 11], at any time we use one 
version for updating purposes and N-1 versions for reading. 3. TRANSACTION SEPARATION AND THE PROBLEM 
In the paper, message channel refers to a connection oriented message channel. It is reliable and FIFO 
based. 3.1 Transaction Separation The way we separate read-only txns from update txns is shown in Figure 
1. (1) Update txns operate on the master copy of data through some concurrency control method. (2) Read-only 
txns access the slave copy. (3) Updates are sent from the master to the slave by a message channel to 
synchronize the slave.  Update txns Read-only txns  Figure 1. Dual Data Copies The two data stores 
are physically separated but belong to the same DBMS. Updates are a flow of update units. Each update 
unit has the following format: Update_Unit = {Item_Number, Item_List, Value_List} Item_List = {I1, I2, 
I3, , Ik}, k = Item_Number Value_List = {V1, V2, V3, , Vk}, k = Item_Number Value(Ij) = Vj, 1<j<Item_Number, 
i.e. Item Ij has value Vj For example, an update unit can be {4, {D2, D4, D5, D8}, {34, 20, 45, 67}}. 
Each txn has a write set (WS). When the txn commits, it produces an update unit by listing its WS and 
new values. Update_Unit is atomic. It can interleave with consistent txns.  3.2 The Problem to Solve 
As shown in Figure 2, our next concern in this paper is how the updates interact with a huge number of 
read-only txns efficiently, i.e. how to update the data copy of the slave part quickly without interfering 
with read-only txns. There are two kinds of read-only txns: 1) Consistent reading txns 2) Non-consistent 
reading txns To ensure consistent reading, one way can use conventional CC methods, such as standard 
locking, time stamp, or optimistic CC. However, these methods are proposed for general CC problem and 
not for this special situation. There are some potential efficiencies because read-only txns here will 
not conflict with each other. Read-only txns Figure 2. Focus on the slave part  4. SOLUTION MODEL We 
propose a model to solve this problem. As shown in Figure 3, there are three major parts in our model: 
1) TM: transaction manager. It manages a group of txns and represents them to read data and version information. 
We can have many TMs. A TM can be hosted in a computer with three types of connections: (a) Very quick 
message channel to TM; (b) Quick message channel to VM; (c) Network access for read-only txns. 2) DM: 
Data Manager. This is the central part of our model. It has three main functions: receive incoming updates, 
respond to TM data requests by sending data, publish version information. DM can be hosted on a group 
of centralized computers with three kinds of message channels: (a) very quick update channel; (b) Quick 
message channel to each TM; (c) quick message channel to VM. VM: Version Manager. It receives version 
information from DM and serves the information to TMs. The VM can be hosted in a computer with two kinds 
of message channels: (a) Quick message channel to DM; (b) Message channel to each TM. The messages listed 
in Figure 3 are: 1) UPDATE: sending from the data master to DM to inform DM of recent updates. Its three 
parameters are number of data items, data item list, and corresponding data values, e.g. UPDATE{4, {D2, 
D4, D5, D8}, {34, 20, 45, 67}}. 2) READ: sending from TM to DM to request data on a certain version. 
It has two parameters number and item list, e.g. READ(3, {D2, D4}). It means a TM want to read version 
3 values of D2 and D4. 3) DATA: sending from DM to TM to respond to a READ. Its three parameters are 
version number, item list, and corresponding data values, e.g. DATA(3, {D2, D4}, {34, 20})-it means the 
values of D2 and D4 are 34, 20 respectively in version 3. 4) V_DATA: sending from DM to VM to version 
information. It has two parameters: version number and updated item list, e.g. V_DATA(3, {D2, D4, D6, 
D7})-it means D2, D4, D6, and D7 are updated in version 3. 5) V_CHANGE: sending from VM to TM to indicate 
available versions. The two parameters are bottom version number Lbm and top one Ltp, e.g. V_CHANGE(1,4)-it 
means versions 1 to 4 available and oldest version will no longer be in service. 6) V_CHECK: sending 
from TM to VM to check whether some items in a version are updated in later versions. It has three parameters: 
version number, later version number, and item list, e.g. V_CHECK(2, 4, {D2, D4, D5, D6}). 7) V_CHKINFO: 
sending from VM to TM to response V_CHECK. It has four parameters: the three parameters of V_CHECK and 
updated item list, e.g. V_CHECKINFO(2, 4, {D2, D4, D5, D6}, {D2, D4})-it means D2 and D4 are updated 
in version 3 or version 4 while D5 and D6 not. Huge number of Read-only Txns DM VM Figure 3. N-Version 
Solution Model 5. DATA MANAGER Data manager receives updates from the master and provides data for read-only 
txns. It has pre-customized N versions of the data. One version, called Lup, is used for updating only. 
Updates are stored on this level. It can be read by non-consistent txns but not by consistent txns. The 
other N-1 versions, from the bottom version, Lbm, to the top version, Ltp, are for reading. After a given 
version period, t0, the three system parameters, Lup, Ltp, and Lbm will be changed by the following rules: 
Ltp = Lup Lup = (Lup+1) MOD N Lbm = (Lbm +1) MOD N 5.1 An Example We use version number N=5 as an example 
to show how it works. At time t = t1, referring to Figure 4, we have Lup=4, Lbm=0, and Ltp=3. Incoming 
updates are stored in the layer of version 4 that is not accessible to consistent reading txns. For example, 
UPDATE(1, {D2}, {31}) comes, the value will be stored in layer 4. The four layers of data from version 
0 to 3 can be read by consistent reading. All data items have their value at the bottom layer, Lbm; In 
other layers, some data items may have no values. After t0, as shown Figure 5, the Lup, Ltp, and Lbm 
are changed. Now we have Lup=0, Lbm=1, and Ltp=4. Incoming updates will be stored in layer 0. For example, 
UPDATE(1, {D3}, {48}) arrives, the value is stored in layer 0. Layer 1 to layer 4 can be read by consistent 
reading. In Figure 3, We notice that version 1 data replace corresponding data in version 0. LNo t = 
t1 4 Lup=4 3 Ltp=3 2 1 Lbm=00 Figure 4. t=t1 system staus 18 53 20 5 31 22 17 19 23 9 22 D1 D2 D3 D4 
 Dn 4 3 2 1 0  5.2 DM Algorithm In DM, we have a main process called DM_MAIN, one process for update 
called DM_UPDATE, and one reading process DM_READ for each TM. So if there are m TMs, we ll have m+2 
processes in DM. We give DM_MAIN algorithm below: 1). System initialization 2). Sleep(t0), DM_MAIN sleeps 
t0 to change layers. However, DM_UPDATE and DM_READ continue their work. 3). Set signal LEVEL_CHANGING=BEGIN, 
and build up a temp layer Ltmp for updating. When DM_UPDATE notices LEVEL_CHANGING=BEGIN, it will direct 
new incoming updates to the layer Ltmp. And it will set LEVEL_CHANGING=READY as soon as it finish current 
atomic update unit. When DM_READ gets this message, it will arrange readings for the incoming layer change. 
4). Wait for LEVEL_CHANGING=READY. If yes, DM_MAIN set Ltp=Lup and send V_DATA(Lup, Update_Item_List) 
to VM to indicate the layer Lup is ready for reading. 5). Use data on level Lbm to fill up Level (Lbm 
+1)%N and Assign Ltmp to Level Lbm; then set Lup = Lbm , Lbm = (Lbm +1)%N 6). Set LEVEL_CHANGING=FALSE, 
go to 2. DM_READ is a process to receive TM data request messages and serve data to TM. If a message 
READ(Vno, ReadList) is received, its response: 1). if Vno=NULL, i.e. non-consistent reading, DM_READ 
will get the latest version of data for the ReadList including the data at layer Lup. 2). If Vno is a 
number in Lbm~Ltp, DM_READ will get the latest version of data for the ReadList at or below layer Vno. 
3). Otherwise, DM_READ will set null value set for ReadList to inform the TM that it is unavailable reading. 
 6. VERSION MANAGER AND TRANSACTION MANAGER 6.1 Version Manager Version Manager gets version information 
from DM and serves the information to TMs. Its procedures are: 1). If V_DATA(Vno, Update_Item_List) received 
from DM, it will broadcast message V_CHANGE to each TM. The new version info will be stored. 2). If V_CHECK(Vno1, 
Vno2, Item_List) received from TM, it will calculate the list of items, Updated_List, that have been 
updated in versions after Vno1 and up to Vno2. Then send a message V_CHKINFO(Vno1, Vno2, Item_List, Updated_List) 
to TM. 6.2 Transaction Manager Transaction manager manages a group of txns and represents them to read 
data and check version information. Struct TXN_Info_Type { bool state; //active: true; otherwise: false 
bool type; //consistent:true;non-consistent: false time arriveTime; //txn arrive time int vNo; //read 
version number int readList[]; //read item list bit[2] readMark[]; //corresponding item status // 0: 
not read // 1: already read // 2: need to update Int itemNumber; //read item number }; TXN_Info_Type 
txn_info[MAX_NUMBER_OF_TXN]; Its main steps are listed below: 1) When a txn T arrives, TM assigns a number 
id, 0<id< MAX_NUMBER_OF_TXN, for T. Then txn_info[id].state = true; txn_info[id].type = true if T is 
a consistent txn; else false; txn_info[id].arriveTime = T s arrive time; txn_info[id].vNo = Ltp; txn_info[id].readList 
= null; txn_info[id].readMark = 0; txn_info[id].itemNumber = 0; 2) When a txn T finishes, TM will set 
txn_info[id].state = false. 3) When a txn T want to read a list of data, RL, TM will I. Calculate update 
read list URL, i.e. those data items having readMark=2. Inform the txn its URL. II. add RL to txn_info[id].readList 
and set corresponding txn_info[id].readMark to 0. III. TM gets the data values of URL and RL for T from 
DM 4) When TM receives data from DM, TM will transfer data to the txn and set the corresponding readMark 
to true. 5) When TM get message V_CHANGE(Lbm_new, Ltp_new), TM will check if Lbm_new= (Lbm+1)%N and Ltp_new 
=(Ltp+1)%N. if not, report error. If yes, then I. For every txn T at level Lbm, TM will send message 
to VM to check their read data. If a data item is updated, set corresponding readMark to 2. Set T s version 
number to Lbm_new. II. Lbm = Lbm_new and Ltp = Ltp_new.  7. CONCLUSIONS We propose a new method to separate 
read-only transactions and update transactions. A slave copy of data is used for reading purpose and 
the master copy is for update tasks. When an update txn commits, data updates will be sent to the slave 
copy. The slave data for reading have N versions. One is for accepting updates; the other N-1 versions 
are for reading. The proposed algorithm has several important advantages. First, DBMS capability for 
handling update txns can be greatly increased because queries are handled separately. Second, our method 
can support huge numbers of read-only txns efficiently. Third, the proposed model is well suitable for 
non-sharing computers system. Thus it is easy to implement economically. Finally, it has flexible control 
mechanisms. For example, it can support long read-only txns by updating some reads. 8. REFERENCES <RefA>[1] 
D. Agrawal, A. El Abbadi, A. Singh, and T. Yurek. Efficient view maintenance at data warehouses. Proceedings 
of the ACM SIGMOD international conference on Management of data May 11 - 15, 1997, Tucson, AZ USA, Pages 
417-427 [2] Divyakant Agrawa, and Soumitra Sengupta. Modular Synchronization in Multiversion Databases: 
Version Control and Concurrency Control. Proceedings of the 1989 ACM SIGMOD International Conference 
on Management of Data, Pages 408-418,Portland, OR, June 1989. [3] D. Agrawal and V. Krishnaswamy. Using 
multiversion data for non-interfering execution of write-only transactions;; Proceedings of the 1991 
ACM SIGMOD international conference on Management of data , 1991, Pages 98 107 [4] Paul Ammann and Sushil 
Jajodia. An efficient multiversion algorithm for secure servicing of transaction reads. Proceedings of 
the 2nd ACM Conference on Computer and communications security, 1994, Pages 118-125 [5] Charles Bontempo 
and George Zagelow. The IBM data warehouse architecture. Communications of the ACM, September 1998/Vol.41, 
No.9, Pages 38-48 [6] Albert Burger and Vijay Kumar. Performance of multiversion concurrency control 
mechanism in partitioned and partially replicated databases. Proceedings of the 1992 ACM Computer Science 
20th annual conference on Communications , 1992, Pages 189 195 [7] Barbara Dinter, Carsten Sapia, Gabriele 
Hfling and Markus Blaschka. The OLAP market: state of the art and research issues. Proceeding of the 
ACM first international workshop on Data warehousing and OLAP, 1998, Pages 22 - 27 [8] G.M. Hector, and 
W. Gio, Read-Only Transactions in a Distributed Database. ACM Transactions on Database Systems, Vol. 
7, No. 2, June 1982, Pages 209-234. [9] Yannis Kotidis and Nick Roussopoulos. DynaMat: a dynamic view 
management system for data warehouses. Proceedings of the 1999 ACM SIGMOD international conference on 
Management of data, 1999, Pages 371-382 [10] W.J. Labio, J. Yang, Y. Cui, H. Garcia-Molina, and J. Widom. 
Performance Issues in Incremental Warehouse Maintenance. Technical Report, Stanford University, October 
1999. [11] C. Mohan, Hamid Pirahesh, and Raymond Lorie. Efficient and flexible methods for transient 
versioning of records to avoid locking by read-only transactions. Proceeding of ACM SIGMOD International 
Conference on Management of Data, Pages 124-133, San Diego, CA, June 1992. [12] D. Quass and J. Widom. 
On-Line Warehouse View Maintenance. Proceedings of the ACM SIGMOD International Conference on Management 
of Data, pages 393-404, Tucson, Arizona, May 1997. [13] Franck Ravat, Olivier Teste and Giles Zurfluh. 
Towards data warehouse design. Proceedings of the eighth international conference on Information knowledge 
management , 1999, Pages 359 366 [14] S. Samtani, V. Kumar and M. Mohania. Self maintenance of multiple 
views in data warehousing. Proceedings of the eighth international conference on Information knowledge 
management , 1999, Pages 292-299 [15] Jennifer Widom. Research problems in data warehousing. Proceedings 
of the 1995 conference on International conference on information and knowledge management November 29 
- December 2, 1995, Baltimore, MD USA, Page 25-30  </RefA>
			
