
 A Model and an Implementation of a Logic Programming Environment Henryk Jan Komorowski Shigeo Omori 
Aiken Computation Laboratory Harvard University Cambridge, MA 02138 (817) 495-5073 ABSTRACT It has been 
claimed that logic programming offers outstanding possibilities for new concepts in programming environments. 
But with the exceptions of the pioneering work of Shapiro on algorithmic debugging, Pereira's rational 
debugging and early work on expert systems from Imperial College, there has been little progress reported 
in the field of logic programming environments. This summary describes our current work on a generic 
software engineering shell for logic programming. We use reflection and the amalgamation of meta-level 
language with the object level to express and support the ~nerementn.I character of specifying/programming. 
An important facet of the shell is that we formalize some aspects of programming methodology and provide 
heuristics for avoiding errors. These heuristics formalize what experienced programmers may already know. 
The shell bears similarities to an expert system since it has explanation mechanisms and provides programming-knowledge 
acquisition. Currently, it supports single user Prolog programming and runs in C-Prolog. The shell is 
generic in that it provides sup- port for activities ranging from artificial intelligence programming 
to formal specification development. This research has been supported in part by the IBM Young Faculty 
Development Award and in part by the NSF grant ~ MCS-84-05079. Permission to copy without fee all or 
part of this material is granted provided that the copies are not made or distributed for direct commercialadvantage, 
the ACM copyright notice and the title of the publication and its date appear, and notice is given that 
copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, 
requires a fee and/or specific permission. &#38;#169; 1985 ACM 0-89791-165-2/85/006/0191 $00.75 1. INTRODUCTION 
This is a report of our current work on the new concepts in programming environments for logic pro- gramming. 
Our approach is related to reflection [Weyhrauch], [Smith] and to the amalgamation of the object theory 
(a conventional Prolog interpreter) with its meta-theory (a meta-lnterpreter of an extended Prolog) [Bowen, 
Kowalski]. It includes aspects of knowledge-based automatic programming (e.g., [Barstow]) and elements 
of acquiring skills by a computer (e.g., [Sussman]), and it is reminiscent of the integrity constraints 
as in relational databases. The goals of this work are multifold. Our short term goal is to correct some 
of the flaws and mistakes made in the design of the existing Prolog environ- ments. Our long term goal 
is to try to codify what the human programmers seem to know about pro-gramming. Since much of this knowledge 
is rather abstract and programming language independent (trees, lists, numbers, dataflow dependencies, 
recur° sion, termination, etc.), it appears that the choice of Prolog is rather fortunate. It is organized 
around specifications, yet it is now used more as a program-ming language than as a theorem prover. It 
has the computational power (of a Taring machine) and many of the programmer's tools available in a programming-language 
environment (the trace facil-ity, i/o, editor, compiler, etc.). At the same time its specification character 
alleviates many of the mun-dane problems of a programming language and helps formalize the abstract knowledge. 
One could say that while automatic programming is concerned with a development of correct programs from 
some kind of specifications, we focus on the computer-aided debug- ging of specifications. Our ultimate 
goal is a programmer's automatic advisor, not an automatic programmer. The rest of the paper is organized 
as follows. We shed some light on the issues of building a program-ming environment for a logic programming 
language. Following that we sketch a basic recta-interpreter of Prolog and show how it can be amended 
to, for example, account for local definition spaces, discover redundant information, etc. Then, we discuss 
the different sorts of support currently offered by the shell and illustrate them with the example sessions. 
Finally, we discuss the related research and future directions of this work. It is assumed that the reader 
is acquainted with the foundations of logic program- ming (see [Kowalski] and [van Emden, Kowalski] or 
[Apt, van Emden]) and has some knowledge of the Prolog programming language [Roussel], (for a good tutorial 
text, see [Hogger], [Kluzniak, Szpakowicz], etc). The logic programs considered in this paper are sets 
of definite clauses (also known as positive Horn clauses) with the depth-first search execution mechanism. 
This will not impede generality since tools to handle other models and aspects of logic pro- gramming, 
eg. Concurrent Prolog [Shapiro 83], can be added. 2. BACKGROUND Rather than build a number of facilities, 
tools, and extensions to Prolog which would support pro-gramming in Prolog along classical lines (exemplified 
by Interlisp-D, or Lisp Machine Lisp), we explore the theoretical foundations of logic programming. We 
attempt to create logic-specific methods and princi-ples supporting the incremental development of specifications/programs. 
(For the matter of building an extension we tried the embedded approach and implemented an experimental 
Prolog environment in Interlisp, the so called Qlog [Komorowski 7g], the idea of which has been put into 
application by [Carlsson, Kahn 83] in their commercial implementa- tion of Prolog on Lisp Machines.) 
The works which influenced us most are Shapiro's algorithmic debugging and Sergot's Query- The-User facility, 
[Shapiro 82], [Sergot]. Shapiro con- centrated on the debugging aspect of algorithms by defining (partial) 
program correctness with respect to an interpretation where a human oracle decides about the interpretation. 
He developed algorithms for finding insufficient and incorrect procedures if a pro- gram terminates with 
an incorrect output or does not terminate at all. The work reported here is similar to Shapiro's in the 
sense that we try to mechanize this part of his oracle which would correspond to the logic programming 
methodology and would recognize common sources of errors in logic program writing. The Query-The-User 
system suggested the syntactic explanation mechanism. We also adopted some com- mand names from that 
system. 3. A LOGICAL MODEL OF PROGRAM DEVELOPMENT  The purpose of programming is to describe some existing 
world. The description can be then used to simulate and interact with this world. Incidentally, logic 
provides an elegant paradigm of program development. Broadly speaking, a world to be described can be 
associated with a model M and a program with a tlleory T corresponding to this model. Consequently, the 
process of constructing a program/theory compares closely with the coding part of programming. Since 
the construction is usu- ally imperfect the actual model M' for the theory T is different from the initial 
one. Hence one has to debug theory T in order that M = M' (see Fig. 1). Pr~gramrnin g/0 ebuggin9 3 M~M' 
1 ,< Prggremmtno¢Codtng  Ftg. 1  Interestingly enough, this paradigm can be used to describe product 
verification. Let us assume that T is a theory of a VLSI chip manufactured by a company D. Each chip 
leaving the production line is tested by T to see whether it conforms to the specifications. Hence, in 
this case, the chip is a model to be verified against the theory (see Fig. 2). How-ever, should incompatibilities 
between the model and the theory be found the model, not the theory, is rejected because a faulty product 
has been found. Verifgtng model =C 2 1  Fig. 2 Logic programming coincides particularly well with this 
picture. We see developing a logic program as adding, modifying and deleting axioms of a theory. Since 
a recta-interpreter expressing these operations can be formalized in the object language, this approach 
is known as an amalgamation of a meta-language with the object level language. It was inves- tigated 
by Weyhrauch and Bowen with Kowalski ([Weyhrauch], [Bowen, Kowalski]). Fortunately for the programmers, 
it does not seem possible to com-pletely axiomatize the program development process. In languages which 
do not provide proof- and model-theoretic semantics it is even more difficult to describe, for example, 
the meaning of adding one more statement to an existing program, with the pos- sible exception of type 
definition statements; how-ever, these seem to have well developed semantics and_ at least permit inconsistencies 
to be checked. In the logic programming framework it seems to be feasible to go beyond type checking 
and formalize to a large extent the incremental character of program- ming. Of course, doing this entails 
more than merely technical problems. We all know of the problems connected with, for example, deletion 
of an axiom and keeping track of all dependent information. However, before solving these outstanding 
problems, we believe we can already provide powerful and very useful support. 4. META-INTERPRETATION 
A meta-interpreter for Prolog can be written in the language itself. The simplest (and still meaning- 
ful) interpreter takes just three clauses. prove(true). prove( (riB, BE)) *-- ~o To prove a sequence 
of goals prove(B), prove the 1st one and prove(BE), prove the rest. prove(1t) ~o To prove a single goal 
clause( 1t, Body), ~o find a matching clause and prove(Body). ~o prove its body. This implementation 
inherits, among other things, unification, backtracking, and the built-in predicate clause of the host 
Prolog system. It also inherits all of its problems such as a failure to distin- guish between undefined 
and not provable. However, it is a good starting point since it is amenable to modifications, while the 
host (eg. C implemented) interpreter is effectively sealed from the user. For instance, it is straightforward 
enough to have an explicit representation of the database of clauses: prove( true, DB). prove( (B, BE), 
ns) prove( B, DB), prove( BE, DB). prove( 1t, DB) *-" clause(H, Body, DB), prove( Body, DB). The added 
parameter, DB, represents the current database. This definition lends itself to an implementation of 
a block-like structure for the predicate definition space (a la Algol), further exten- sions to accommodate 
constrained-filtered assertion of new unit clauses, and several other applications. This modified assertion 
can be defined as follows. addClause( UnitCl, OldnB, [UnitCl ] O!dDB]) ~.- not prove( UnitCl, OldDB). 
Here, the meta-interpreter is used to ascertain whether the clause to be asserted can already be deduced 
from the database. It is reasonable to assume that usually the user doesn't want redundant information. 
An exception is redundancy for improved efficiency, but in such a case the user should at least be warned. 
Similarly, the debugging tools like single-stepper and a variety of constraints can be easily implemented. 
For an example of the latter see a Prolog implementation of Query-by-Example [Zloof] by [ieves et al.]. 
This short technical digression is an illustration of the relative ease of implementing a Prolog environ- 
ment in the language itself. To a large extent it draws upon the Lisp experience. In the rest of the 
paper we refrain from the implementation details. 5. THE SOFTWARE ENGINEERING SHELL The shell is presented 
in an informal way by means of examples. The scripts are taken from ses-sions with the currently operational 
shell. The presently supported paradigms are: simple forms of recursion, the open-world assumption, functional 
specifications, explanations, types, datafiow, func-tional dependencies and integrity constraints. 5.1. 
Redundant and Under-defined Clauses When a clause is added to an existing program one can determine whether 
it is redundant in that it can be deduced from the program, or in that it gen- eralizes some of the existing 
clauses. Consider the following program: ancestor( X, Y) *-- parent(X, Y). ancestor(X, Z) *-- parent(X, 
Y), ancestor( Y, Z). parent(A, 13)*--mother(A, B) ," father( A, B). mother( ev~, kain), mother( eve, 
abel). father( adam, kalE), father( adam, abel). father( kain .... ) .... In principle, but for a quite 
high price, it can be determined that a clause ancestor( adam, X) is redundant. It may be reasonable 
(and up to the user) to add it. We feel that an appropriate warning from the system would be very helpful. 
(Actually, depending on the intended use one probably should add a cut to limit multiple answers. Partial 
evalua- tion addresses some of these issues, too. [Komorowski 82].) From teaching logic programming (and 
from our own mistakes) we learned that the non-deterministic character of logical specifications often 
escapes the programmer's attention. Consider the following example where the first clause is in the database 
and the second one is to be added: factorial( O, I). factorial( N, R) *- subtract( N, 1, N1), factorial( 
N1, R1), times( N, R1, It). First, since the specification of the first argu-ment in the second clause 
says "for all N's", and since there is no qualification for the range of N, (viz., no condition like, 
e.g., N ~ 0) then, in particu- lar, N could be equal to 0. This is contrary to the meaning intended by, 
say, the inexperienced or inat- tentive Prolog programmer. Second, although such a redundancy might be 
not immediately discovered, it will sooner or later create a problem (an infinite recursion upon backtracking). 
The shell attempts to provide support in such cases. We briefly describe the underlying principles. In 
an inductive definition with the termination condi- tion N ffi C (where C is a constant) there is a descent 
function, say, sigma such that for every N there exists an i such that the ith application of sigma to 
N equals C. Hence, during the analysis of the definition the descent function and the constant must be 
discovered, and it must be established whether getting "below the floor" is possible. This is a fairly 
simplified picture that accounts for only one induction schema. Consider, for example, another definition 
which is like factorial but also has this clause: factorial(-17, 55). not speaking about double recursion, 
or more complicated descent functions. Indeed, it is a complex but rather interesting area and will be 
addressed in the future research. Presently, the shell deduces the types from the built-in constraints 
of arithmetic operators and from the (polymorphic) type-consistency hypothesis, and it learns that N 
is an integer. From the dataflow infor- mation and functional dependencies (to be discussed later) it 
learns about the use of the parameters and discovers that N and 0 are not mutually exclusive. Hence, 
N can be zero. It explicitly checks that no constraint like N ~ 0, N \------ 0 (ie "not equal" in the 
Prolog jargon), or N < 0, (or cut ('T')) is present in the body of the second clause (or the first clause), 
and it warns the programmer. We expect to improve upon this crude heuristic after more research is done. 
Similarly, the shell is able to detect some obvi-ous non-termination cases by checking whether the basic 
case, like a case for the empty list or a list with a finite number of elements, is specified for recursive 
procedures on lists. These and other rules of a similar nature give, in fact, a heuristic description 
of logic programming methodology and errors made by both experienced and inexperienced programmers. 5.2. 
The Open-world Assumption Another particularly important' property of the program development process 
is that the programmer works under the open-world assumption. This directly contradicts the mechanism 
of most of the existing interpreters of Prolog. Only a few of them will stop and let the user know that 
a call to an undefined procedure has been made, but rarely, if ever, is a correction possible. None of 
the interpreters allow, specifying the: "you told me that I should know it, but I don't" situation. To 
this end the shell provides an open-world interpreter. Informally, it assumes that if it knows nothing 
about a specific question, then it should learn about it. Hence, we have implemented a form of a three-value 
logic inter- preter: true, false and unknown. Consider the case of developing a very simple family relationship 
database with an example of the parent relation. Let us assume that initially the database is empty and 
each question which cannot be answered is redirected to the user. Thus after ask- ing the query ?- parent(X, 
jan). the shell passes the control to the user and asks for more information. The user then tells the 
shell that parent is a father or a mother, closes the world for the parent relation by saying "close", 
and continues the development of the father and mother relations, probably leaving these relations open. 
A closed relation roughly corresponds to the notion of a module whose develop- ment is completed. Script 
started on Wed Mar 13 12:02:45 1985 <1~ SES C-Prolog version 1.5 [ Restoring file ses ] what can I do 
for you? <?> e. What would you like to execute? de>parent(X, jan). ??parent(_22,jan) /* at <e-def> you 
can type info, backtrack, retry, or cloec */ (e-def~ ? Please answer info, backtrack, retry, or close 
~e-def~ info. Please define a clause for parent(_22,jan) <~e-def~parent(X, Y) :- father(X, Y);mother(X, 
Y). ??father(_22,jan) (e-def~ back. ??mother(_22,jan) (e-def') info. Please define a clause for mother(_22,jan) 
<~e-def~ mother(violette, jan), only. -~> parent(violette,jan) /* at <e-eze> you can type nezt, why, 
or enongh */ ~e-exe~>next. ??parent(_22,jan) <e-def> close. that's all What would you like to execute? 
<e>return. 5.3. Functional Specifications While defining the mother of jan we have said mother( violette, 
jan), only. In this way the system learned that mother is, in fact, a function of a child (but not necessarily 
the other way around), and if at any time in the future an attempt is made to assert anything like mother( 
anna, jan), the shell will object. This scheme roughly corresponds to the con-cept of functional dependency 
in relational database. Once we declare that in relation R(tl, t2), tl is func- tionally dependent on 
t2, and that R(x, y) exists in the database, the system automatically rejects any attempt to add R(z, 
y) where x =/: y. This concept is readily generalized for more than binary relations. We can have R'(T1, 
T2) where T1 and T2 are set of tuples and T1 is functionally dependent on T2. The system correctly deals 
with such functional depen-dency on multiple values. The dependency informa-tion is deduced from the 
dataflow information as represented by the current goal. For more details see [Maluszynski, Komorowski]. 
what can I do for you? <?:> remember. What rules would you like me to remember? <r> parent(X, jan). I 
was told that parent(X,jan) is a closed relation Would you like to open it ? <r:> no. What rules would 
you like me to remember? <r> return. what can I do for you? <?> show all. parent(X,Y) :- father(X,Y), 
mother(X,Y). mother(violette,jan). what can I do for you? <?:> remember. What rules would you like me 
to remember? <r> mother(anna, jan). I was told that mother(anna,jan) cannot be true  What rules would 
you like me to remember?  <r> mother(Anybody_else, jan). I was told that mother(Anybody_else,jan) cannot 
be true  What rules would you like me to remember? <r> mother(violette, start). Your rule has been 
added to the database. What rules would you like me to remember? <r> return. what can I do for you? 
<?> show all. parent(X,Y) :-father(X,Y), mother(X,Y). mother(violette,j an). mother(violette,st an). 
what can I do for you? <?> e. The mother example was trivial, but it illus-trates that an important class 
of logic programs specifies relations which are functions. We shall return to some aspects of the functional 
specifications after introducing the explanation feature. 5.4. Explanations If a human expert is to 
trust a computerized expert system explanations must be available. This is no less true for knowledge-based 
computer aided software development, The shell provides a mechan-ism of explanations by replaying the 
clauses used in the proof. There are two basic modes available: a wall-paper type which replays all the 
clauses used in the proof, and a more intelligent one which knows what is potentially interesting to 
the user and skips all the rest. Currently, the heuristics for the intelli-gent display are very simple, 
but reasonably effective. Once the user decides that a particular collection of clauses has been debugged 
(this roughly corresponds to the notion of a block of procedures which have been debugged), they are 
removed from the focus of attention. Then, they behave in a similar way to block-compiled procedures 
of Interlisp and are invisi-ble to the standard debugging package. The explanations can be positive and 
negative with the latter answering to "why not" questions if a computation finally fails [Apt, van Emden]. 
We will illustrate the (positive) explanation mechanism with the development of a functional specification 
of the greatest common divisor. what can I do for you? <?> e. What would you like to execute?   <e>gcd(12, 
8, K). ??gcd(12,8,_22) <e-def> info. Please define a clause for gcd(12,8~_22) <e-def> gcd(I, J, K) :- 
I>J, I1 is I-J, gcd(I1, J, K). ***WARNING*** Your clause does not have a termination case ??gcd(4,8,_22) 
<e-def> |nfo. Please define a clause for gcd(4,8~_22) <e-def> gcd(I, J, K) "- I<J, J1 is J-I, gcd(I, 
J1, K). ***WARNING*** Your clause does not have a termination case ??gcd(4,4,_22) <e-def> info. Please 
define a clause for gcd(4,4,_22) <e-def> gcd(K, K, K). -> gcd(12,8,4) <e-exe>why. ==> we know that gcd(12,8,4) 
 because 12>8 AND 4 is 12-8 AND gcd(4,8,4) <e-exe>why. ffi=> we know that gcd(4,8,4) because 4<8 AND 
4 is 8-4 AND gcd(4,4,4) <e-exe>wh¥. ==> we know that gcd(4,4,4) because it is a fact. <e-exe>next. ??gcd(4,4~_22) 
<e-def> close. that's all What would you like to execute?  <e>return. what can I do for you? <?> show 
all. parent(X,Y) :- father(X,Y), mother(X,Y). mother(violette,jan). mother(violette,stan). gcd(I,J,K) 
:- I>J, I1 is I-J, gcd(il,J,K). gcd(I,J,K) :- I<J, J1 is J-I, gcd(I,J1,K). gcd(K,K,K). what can I do 
for you? <?> bye. Bye bye, nice talking to you. 5.5. Constraint-Orlented Support Several authors have 
recognized that program-ming in logic is very similar to working with a data-base system. For instance, 
an implementation of Query-by-Example [Zloof] is a rather minor modification to the basic assertion and 
execution mode of Prolog [Neves et al.]. The shell expires this rad by unifying the notions of integrity 
constraints and type checking. There is a type sub-shell in which the user can define polymorphic types 
of predicates. Following the two-level grammar approach to logic programming of [Maluszynski 84], we 
use a CF-grammar to describe polymorphic types of predicates. Since the typing is implemented in the 
formalism of Definite Clause Grammars [Pereira, Warren] all com-putable constraints, rather than just 
context-free constraints, are expressible. We are currently experi- menting with integrity constraints 
in relational data-base applications. This experience will be reported separately. 5.6. Other Facilities 
There are a number of other facilities in the shell. Some of them rely on the underlying UNIX operating 
system; others are of a bookkeeping nature:, like keeping track of unfinished, ie open pro- cedures, 
etc. These are standard and well-known tools and we will not discuss them here. A careful reader may 
have noticed that the clauses pretty-printed by the shell have the names of the variables preserved rather 
than substituted by meaningless, system generated numbers. This may seem obvious but, unfortunately, 
most of the Prolog systems have adopted this incredible convention and we had to remedy it. 6. CONCLUSIONS 
AND FUTURE RESEARCH We have designed and implemented an experi- mental programming environment for 
logic program development. The shell already provides very useful support in the C-Prolog environment, 
but our goal is a personal work-station with an advance window and graphics facility. There are problems 
with efficiency because meta-interpretation slows execution by a factor of 10. The overall performance 
is, however, acceptable since as soon as a procedure is "closed" its execution moves from the meta-level 
to the object one. Further and more substantial improvement will come from a compiler (by a factor of 
20-25). The main research topic is to provide a large set of generic heuristics which support general 
principles of programming, viz detection of simple non-termination (the problem in general is undecidable, 
but there are some reasonable heuristics), or com-pleteness and mutual exclusion of specifications. The 
next step will be to investigate domain dependent heuristics. For example in the develop- ment of specifications, 
the type information is a very good source. Using an approach similar to [Gaudel] we should be able to 
automatically generate exhaus- tive functional tests and use the programmer as an oracle. Consider a 
recursive procedure on the list data type. The tests to generate are the empty (or the other finite element) 
list expressed in the base condition and some "longer" list to check the opera- tional character of the 
recursive definition. The vir- tue of automatic test generation is its completeness and its ability to 
keep records for use by the mechanized oracle in future releases of the same software. At present, programming 
knowledge is acquired by writing definite clause programs which are like rules. This is not always feasible, 
since it requires the programmer to know about many internal details of the shell in order to write them 
correctly. We see the acquisition of such knowledge in a more user-friendly manner as an important issue. 
An important and rather difficult subject is that of explanations. At present there are tools for a selective 
replaying of the proofs, but the shell has only limited knowledge about what is interesting to the user. 
More intelligence must be put there. We'. are currently investigating to what extent the work on algorithm 
animation [Brown] could be used in the explanatory part of the shell. We are also investigating the object-oriented 
extensions of Prolog [Zaniolo 83] and the equational variants of logic programming [Fribourg]. On the 
theoretical side we are closely following the research in non-monotonic logic and probabilistic logic 
(e.g., [Moore]). However, currently we need to learn how much or how little support can be gained within 
the monotone first-order logic.   7. RELATED RESEARCH Some of the related research has been mentioned 
along the text. We should add that the Programmer's Apprentice [Waters] is perhaps a sys-tem with some 
similar goals, but we take a different approach. Our shell supports the development of a specification 
which eventually will be compiled to some low-level language. In the Apprentice much effort is spent 
on recognizing certain constructs of programs written in a low-level language. Then the programs can 
be decompiled into specifications. In another work Shapiro showed how Con-current Prolog can be used 
for system programming of a conventional environment [Shapiro 84]. Pereira's work joining intelligent 
backtracking with algo-rithmic debugging explores Prolog specific tools and is very promising [Pereira 
84]. Acknowledgements We profited from discussions with Daniel Bobrow, Lynette Hirschrnan, Glenn Holloway, 
Ken- neth Kahn and Harry Lewis. Thank you! Appendix 1 Structure of Logic Programming Software Engineer- 
ing Shell Top Level (?~> ..... ~> Eval Shell (e~> I--> Execute Mode (ex> I--> Define Mode (def~ I..... 
> Remember Shell (r> I..... ~ Forget Shell <f') i I...... ~ Type Shell ~t> I----~ Show Shell (s> I........ 
~ Store Shell ~st>  1. General Description: SES is the command to invoke LPSES. Once you are at Top 
Level, you can call any of the shells by typing appropriate charac- ters. List of legal commands can 
be displayed by typing '?'. Show shell can be called from any level. 2. Eval Shell: E-shell allows the 
user to evaluate prolog clauses. 3. Remember Shell: R-shell allows the user to assert prolog clauses. 
 4. Forget Shell: F-shell is used to retract prolog clauses. 5. Type Shell: T-shell is used for defining 
types for the clauses that are either already defined or to be defined in future. 6. Show Shell: S-Shell 
displays the clauses that are already defined. 7. Store Shell: St-Shell allows the user to save the 
current database and restores the stored database when resumed.  BIBLIOGRAPHY <RefA>[Apt, van Emden], Apt, 
K. R., van Emden, M. H., Contributions to the Theory of Logic Programming, July 1982, JACM, 841-862, 
vol. 29, :/]:3. [Barstow], Barstow, D., An Experiment in Knowledge-Based Automatic Programming, in [Webber, 
Nilsson I. [Bowen, Kowalski 82], Bowen, K,. Kowalski, R. Amal-gamating Language and Meta-Language in 
Logic Pro- gramming, in: Logic Programming, Clark and Tarn- lund, ds., Academic Press, 1982 [Brown, Sedgewick], 
Brown, M., Sedgewick, R., A System for Algorithm Animation, Brown University, Dept. of C.Sc., Technical 
Report No CS-84-01. [Carlsson, Kahn 83], Carlsson, M., Kahn, K., LM-PROLOG User Manual, Uppsala University 
1983. [van Emden, Kowalski], van Emden, M.H., The Semantics of Predicate Logic as a Programming Language, 
J. of ACM, 733-742, vol. 23, ~-4, 1983. [Fribourg] Frlbourg, L., Oriented Equational Clauses as a Programming 
Language, Proc. of ICALP, Bar- celona, 1984. [Gaudel], Gaudel, M-C., private communication, Laboratoire 
Marcoussis, CGE, 91460 Marcoussis, France. [Hogger], Hogger, C., Introduction to Logic Program- ming, 
Academic Press, 1984. [Kluzniak, Szpakowicz], Kluzniak, F., Szpakowicz, S., Prolog for Programmers, Academic 
Press, 1985. [Komorowski 79], Komorowski, H. J., QLOG interac- tive environment -the experience from 
embedding a generalized Prolog in Interlisp, Linkoping University, LiTH-MAT-R-79-19, 1979. [Komorowski 
82], Komorowski, H. J., Partial Evalua- tion as a Means for Infereneing Data Structures in An Applicative 
Language: A Theory and Implementation in the Case of Prolog, in: Proc. of the IXth Confer- ence on Principles 
of Programming Languages, Albu- querque, 1982. [Maluszynski 84], Malnszynski, J., Towards a pro-gramming 
language based on the notion of two-level grammar, Theoretical Computer Science, 28 (1984) 13-43. [Maluszynski, 
Komorowski], Maluszynski, J., Komorowski, H.J., Unification-free Execution of Horn-clause Programs, to 
appear in: Proc. of the 2nd Logic Programming Symposium, Boston, IEEE, July 1985. [Moore], Moore, R. 
C., Semantical Considerations on Nonmonotonic Logic, in: Proc. of the 8th IJCAI, August 1983, Karlsruhe, 
West Germany. [Myeroft], Myeroft, A., O'Keefe, R.,A., A Polymorphie Type Systemq for Prolog, Proe. of 
Logic Programming Workshop, Algarve, Portugal, 1983. [Neves et all, Neves, J. C., Anderson, S.O., Williams, 
M.H., A Prolog Implementation of Query-by-Example, in: Proc. of the International Computing Symposium 
1983 on Application Systems Development, West German Chapter of ACM, Schneider, H. J., Ed. [Perelra 84], 
Pereira, L-M., Rational Debugging of Logic Programs, submitted for publication. [Pereira, Warren], Pereira, 
F., Warren, D., Definite clause grammars for language analysis, AI 13 (1980), 231-278. [Rousssel], Roussel, 
P., PROLOG -Manuel de Refer- ence et D'Utilisation, Unlversite de Marseille-Luminy, 1975. [Sergot], Sergot. 
M., A Query-the-User Facility for Logic Programming, in: "Integrated Interactive Com- puting Systems", 
P. Degano and E. Sandewall, Eds., North-Holland 1983. [Shapiro 82], Shapiro, E. Y., Algorithmic Program 
Diagnosis, in: Proc. of the IXth Conference on Princi- ples of Programming Languages, Albuquerque, 1982. 
[Shapiro 83], Shapiro, E. Y., A Subset of Concurrent Prolog and Its Interpreter, Technical Report, Weizmann 
Institute of Science, 1983. [Shapiro 84], Shapiro, E. Y., Systems Programming in Concurrent Prolog in: 
Proc. of the Kith Conference on Principles of Programming Languages. [Smith], Smith, B. C., Reflection 
and Semantics in Lisp, ACM 0-89791-125-3/84/001/0023, also in '~Interim 3-Lisp Reference Manual", XEROX, 
PARC, June 1984. [Sussman], Sussman, G.J., A Computer Model of Skill Acquisition, American Elsevier, 
1975. [Webber, Nilsson], Webber, B. L., Nilason, N. J., Readings In Artificial Intelligence, Tioga Publ. 
Co., Polo Alto, California, 1981. [Weyhrauch], Weyhraueh, R., Prolegomena to a Theory of Mechanized Formal 
Reasoning, in: [Webber, Nilsson]. [Zaniolo], Zaniolo, C., Object-oriented Programming in Prolog, in: 
Proc. of the 2nd Logic Programming Symposium, Boston, IEEE, July 1985. [Zloof], Zloof, M. M., Query-by-Example: 
A Data Base Language, IBM Systems Journal 16 (1977) 324-343</RefA>. 198  
			
