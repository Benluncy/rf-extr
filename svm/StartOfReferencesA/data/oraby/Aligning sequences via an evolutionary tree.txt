
 Aligning Sequences via an Evolutionary Tree: Complexity and Approximation (Extended Abstmct) Tao Jiang* 
Eugene L. Lawlert Lusheng Wang$ McMaster Univ. U.C. Berkeley McMaster Univ. Abstract between the approximabtity 
of tree alignment and gen­ eralized tree alignment shows that a phylogenetic tree We study the following 
fundamental problem in com-can indeed help in multiple alignment. The approxima­putational molecular 
biology: Given a set of DNA se-tion algorithms may be useful in evolutionary genetics quences representing 
some species and a phylogenetic practice as they can provide a good initial alignment for tree depicting 
the ancestral relationship among these the iterative method in [24]. species, compute an optimal alignment 
oft he sequences by the means of constructing a minimum-cost evolution­ary tree. The problem is an important 
variant of mul-1 Introduction. tiple sequence alignment, and is widely known as tree alignment. A more 
generalized version of the problem, Multiple sequence alignment (or comparison) is one of called generalized 
tr ee alignment in this paper, is that the fundamental and most challenging problems in com­we are given 
the DNA sequences only and still have to putational molecular biology [16, 18]. It plays an essen­construct 
a minimum-cost evolutionary tree. The paper tial role in two related areas: finding highly conserved 
presents some hardness results as well as approximation subregions among a set of biological sequences, 
and in­algorithms. It is shown that tree alignment is NP-hard ferring the evolutionary h~tory of some 
species from and generalized tree alignment is MAX SNP-hard. On their associated sequences. A huge number 
of papers the positive side, we design an etiicient approximation have been written on effective and 
efficient methods for algorithm with performance ratio 2 for tree alignmen-constructing multiple alignment, 
For a comprehensive t. The algorithm is then extended to a polynomial- survey, see [5, 30]. time approximation 
scheme. The construction actu-An important approach to multiple sequence align­ally works for Steiner 
trees in any metric space, and ment is the tTee alignment approach [1, 12, 22, 24, 29]. thus implies 
a polynomial-time approximation scheme Here, we are given k sequences representing some genet­for planar 
Steiner trees under a given topology (with ically related species. The ancestral relationship among any 
constant degree). To our knowledge, this is the first the species is decribed by a phylogenetic tTee 
or, simply, polynomial-time approximation scheme in the fields of phylogeny. The tree is rooted and has 
k leaves, each is computational biology and Steiner trees. The contrast labeled with a unique input sequence. 
The internal n­odes of the tree correspond to the hypothetical ancestral *Supported in part by a grant 
from SERB, McMaster Univer­sity, and NSERC Operating Grant OGPO046613. Address: De-species and are unlabeled. 
We compute an alignmen­partment of Computer Science, MeMaster University, Hamilton, t by reconstruct 
each ancestral sequence and optimally Ont. LSS 4K1, Canada. E-msil: .@@maccs.mcxnaster.ca align each 
pair of sequences induced by the edges of the t supported in p=t by us Dcp~trncnt of Energy Grant DE-FG03-90ER6099. 
Address: Computer Science Division, tree. Hence, the input sequences are compared indirectl- University 
of California, Berkeley, CA 94720, USA. Email: y through their common ancestral sequences. To be lawler@cs 
.berkele y. edu different from phylogentic trees, call the resulting fully $supported in pmt by NSER.C 
operating Gr~t C) GPO046613. labeled tree an evo/utzonaTy tree. Define the cost of an Address: Department 
of Electrical and Computer Engineering, McMaster University, Hsrnilton, Onterio L8S 4K1, Canada. B  
edge (u, v) as the edit distance between the sequence mail: lwsng@maccs .mcmaster .ca labels of nodes 
u and W. In thk sense, tree alignment Permission to copy without fee all or pari of thk material is is 
actually the problem of constructing a minimum-cost granted provided that the copies are not made or 
distributed for evolutionary tree for a given phylogeny. We assume that direct commercial advantage, 
the ACM copyright notice and the the degree of the given phylogenetic tree is bounded by title of the 
publication and its date appear, and notice is given that copying is by permission of the Association 
of Computing some small constant d. (The degree of a node is its Machinery. To copy otherwise, or to 
republish, requires a fee number of children.) In fact, d = 2 in most cases in and/or specific permission. 
practice [12, 22, 24, 29]. STOC 94-5/94 Montreal, Quebee, Canada @ 1994 ACM 0-89791 -663-8/94/0005..$3.50 
There is a more general and seemingly more difficult 1.2 Our Results. variant of tree alignment, which 
will simply be called generalized tree alignment in this paper. Here, we are only given a set of DNA 
sequences and have to construct the hypothetical sequences as well as the phylogeny [10, 20, 21, 27]. 
While tree alignment can help judge the goodness of a given phylogenetic tree, generalized tree alignment 
can help create initial phylogenetic trees [10]. 1.1 Previous Results. Sankoff proposed an algorithm 
to compute an optimal tree alignment using dynamic programming [22, 25]. The time complexity of this 
algorithm is 0(m(2n)k), where n is the length of an input sequence, m is the number of internal nodes, 
and k is the number of leaves. The algorithm also assumes that the score between two letters is either 
1 or O. An algorithm that can handle more general score schemes is reported in [12]. Some heuristic algorithms 
have also been considered in the past. Altschul and Lipman tried to cut down the com­putation volume 
required by danamic programming [1]. Sankoff, Cedergren and Lapalme gave an iterative im­provement method 
to speed up the computation [24, 25]. It is claimed that the algorithm usually produces a rea­sonable 
alignment in 5 iterations. Waterman and Perl­witz devised a heuristic method when the sequence are related 
by a binary tree [29]. Their method computes an average sequence for each pair of related input se­quences, 
from bottom to top, and then constructs an overall alignment by aligning each input sequence a­gainst 
the average sequence constructed at the root. The running time of this algorithm is 0(kn2 ). Hein proposed 
an ethcient algorithm based on the concept of a sequence graph [12]. Nevertheless, none of these al­gorithms 
have a guaranteed performance bound. Also, the computational complexity status of tree alignment remained 
open. Foulds and Graham proved that a variant of general­ized tree alignment, where the distance between 
two se­quences is defined as Hamming distance, is NP-hard [8]. Sweedyk and Warnow recently showed that 
generalized tree alignment is NP-hard [28]. The problem can be easily formulated as a Steiner tree problem 
on graph­s [13] so that the existing approximation approaches for Steiner minimal trees are applicable 
[15]. Gusfield has shown that minimum-cost spanning tree construction yields an approximation ratio 2 
[10]. Using the recent results of Zelikovsky, and Berman and Ramaiyer [4, 31], it is easy to improve 
this ratio to 1.747 [15]. But can we make the approximation ratio arbitrarily close to 1? We will answer 
this question negatively by showing that the problem is MAX SNP-hard. In this paper, we show that tree 
alignment is NP-hard even if the given phylogeny is a binary tree, and gener­alized tree alignment is 
MAX SNP-hard. By the result in [2], this implies that we cannot hope for a polynomial­time approximation 
scheme (PTAS), for generalized tree alignment, unless P = NP. (A problem has a PTAS if for every fixed 
e >0, it can be approximated with ratio 1 + e in polynomial time.) Efficient approximation algorithms 
with guaranteed performance bound for tree alignment are presented for the first time. We first give 
a simple algorithm which produces an evolutionary tree by elaborately lifting the input sequences from 
the leaves to their ancesters. It is shown that the evolutionary tree has a cost at most twice the optimum. 
The time complexity of this al­gorithm is 0(k3 + k2n2). Augmenting the construction with a local optimization 
technique, we then extend this algorithm to a PTAS. More precisely, we devise an al­gorithm which, for 
each t> 1, has a performance ra­ d - + 2M(d, t l>n))~ tio 1 + ~ and runs in time O(k where JZ(d, t 
1, n) is the time needed to optimally align a tree of depth t 1 and is upper-bounded by qn(d - -(d/l)-l) 
). The result is interesting since (i) to our knowledge, this is the first PTAS in the field of computational 
biology and (ii) it sho,ws a great con­trast with the MAX SNP-hardness of generalized tree alignment 
and demonstrates that a given phylogeny can indeed help in computing a tree alignment. 1.3 Applications 
in Steiner Trees. As mentioned above, generalized tree alignment is a spe­cial case of the Steiner tree 
problem, i.e., the Steiner tree problem in the space of sequences where the distance is edit distance. 
Tree alignment can be vewied as a special case of the problem of-Steiner trees under a given topol­ogy 
[13, 23]. It is known that a Steiner minimal tree can be computed in polynomial time for a given topology 
in the rectilinear (I.e., Manhattan) space [7, 23]. This im­plies that the variant of tree alignment 
where the space is V and the distance is Hamming distance is solvable in polynomial time. The same result 
trivially holds if the space is a graph. (Here the graph is part of the input and the running time is 
polynomial in the size of the graph.) For the Euclidean plane, the Steiner mini­mal tree can be found 
in 0(n2 ) time if the degree of the topology d < 2 [14]. For d > 2, no exact algorithm is known and an 
iterative dynamic programming algorith­m is given in [23]. The construction of our approximaticm algorithms 
in fact works for Steiner trees under a given topology in any metric space. As a corollary, we obtain 
a PTAS for the problem in the Euclidean plane (for any d). It is worth mentioning that, when the topology 
is not giv­en, the best we know is that planar Steiner minimal trees can be approximated with ratio ~ 
c, for some e > 0 [6]. At the moment, it is open whether the pla­nar Steiner problem has a PTAS. It has 
been observed that Karp s p? obababilistic c-approximation scheme for the traveling salesman problem 
can be modified to work for the planar Steiner problem [13, 17]. We note in pass­ ing that the Steiner 
problem on graphs is MAX SNP­ hard [3].  1.4 Applications in the Study of Molec­ular Evolution. Our 
algorithms may also be practical for the analysis of molecular evolution in the following sense: they 
can help set up a good initial alignment for the iterative method of Sankoff, Cedergren and Lapalme [24]. 
The combined algorithm will always produce an alignment that has a cost not greater than 1 +C times the 
optimum and is hopefully satisfactory to geneticists. To illustrate the iterative method in [24], consider 
the phylogeny in Figure 1, which contains 9 given species on its 9 leaves. To construct an evolutionary 
tree, we first assign one of the 9 given sequences (chosen ar-Wltrarily) to each internal node. Then 
we divide the phylogeny into 7 3-components as shown in Figure 1, where a 3-component is a star with 
a center and at most 3 terminals. Local optimization is done for every 3-component as follows. From the 
labels of the three terminals, we can compute a label of the center using dy­namic programming to minimize 
the cost of the compo­nent [22, 11]. The new center lable can then be used to update the center label 
of an overlapping 3-component. The algorithm converges since each local optimization reduces the cost 
of the tree by at least one. Thus, if the process is repeated long enough, every 3-component will become 
optimal. However, this does not necessar­ily result in an optimal evolutionary tree. Nonetheless, it 
seems the algorithm can produce a reasonably good evolutionary tree after 5 iterations [24]. We include 
some standard definitions in sequence alignment in Section 2 for completeness. Section 3 con­tains the 
hardness results. The ratio 2 approximation algorithm and the PTAS are presented in Sections 4 and 5, 
respectively. Due to the space limit, the details of some proofs are omitted. 2 Basic Definitions in 
Sequence Alignment. A sequence is a string over some fixed alphabet 22. For DNA sequences, the alphabet 
X contains four letters A, C, G, and T representing four distinct nucleotides, and for protein sequences, 
X contains 20 letters, each Table 1: Score scheme I. Olab A o 01111 1 10111 a 11022 b 11202 A 11220 
m represents a unique amino acid. An alignment of two sequences x and y is obtained by inserting spaces 
into or at either end of x and y such that the two resulting sequences z and I/ are of the same length. 
That is, every letter in x is opposite to a unique letter in y . A space is viewed as a new letter and 
is denoted A. Suppose that n is the length of the sequences x and ~. The value of the alignment is defined 
as ~~=1 P(z (i), Y (i)), where z (i) and y (i) denote the two letters at the i-th column of the alignment, 
and p(z (i), ~(i)) denotes the score of these two opposing letters under some given score scheme p. There 
are several popular score schemes for amino acids and for nucleotides [10]. A standard assumption about 
the s­core scheme p is that it satisfies triangle inequality, i.e., for any three letters a, b, and c, 
p(a, c) < p(a, b) + ~(b, c) [10, 26]. An optimal alignment of two sequences is one that minimizes the 
value over all possible align­ments. The edit distance dist (z, y) between sequences z and y is defined 
as the minimum alignment value of z and y. The edit distance is often called the muta­ tional distance 
in the study of molecular evolution [22]. dist(z, y) can be easily computed in time O([Z[ , Iyl) using 
dynamic programming [26]. 3 The Hardness of Tree Align­ment. Among the many possible phylogenetic structures, 
bi­nary tree is the most popular one in the literature. We can prove that tree alignment under a given 
phylogeny is NP-hard even when the phylogeny is a binary tree. Theorem 1 It is NP-haTd to constmtct an 
optimal evo­ lutionary tTee even when the given phylogeny is a binaTy tTee. The proof is a reduction 
from the shortest common supersequence problem, which is NP-hard [9]. In the proof, the alphabet X = 
{O, 1, a, b} and the score scheme is as in Table 1, which satisfies triangle inequality. Theorem 2 Generalized 
-tTee alignment is MAX SNP­ haTd. T. utilis ,-----., S. carlbergensis / / / I I //I 1 I I I \ \ \ \ 
\ \, \, \, \ al :< ~. . . - ----- E. coli B. stearotherrnophilus Figure 1: A phylogeny with 9 species, 
Table 2: Score scheme II. To prove the theorem, we first L-reduce Vertex Cover-B, which is shown MAX 
SNP-complete in [19], to the following more restricted version of itse~ Triangle-free Vertex Cover-B: 
Given a triangle-free graph G = (V, E) with degree bounded by B, find the smallest vertex cover. Then 
we L-reduce Triangle-free Vertex Cover-B to a restricted version of generalized tree alignment: Restricted 
GenerWlzed Tree Alignment: Given t­wo sets of sequences X and Y, find an evolutionary tree whose leaves 
are labeled with sequences in X and whose internal nodes are labeled with sequences in Y, with the smallest 
cost. Finally this problem is L-reduced to generalized tree alignment. The alphabet Z used in the reduction 
is {O, 1} and the score scheme, again satisfying triangle inequality, is shown in Table 2. 4 An Approximation 
Algorithm wit h Ratio 2. As mentioned earlier, our basic idea is to construct an evolutionary tree by 
elaborately lifting the given se­quences from the leaves to their ancesters. Before giving the details 
of the algorithm, we need some notations and a crucial lemma. -.. --------~ Chlorela which is divided 
into seven 3-components. For a tree T, let T(T) be the root of !Z , c(T) the cost of T, L(T) the set 
of the leaves of T, and I(T) the set of the internal nodes in T. The parent of a node v is represented 
as p(v). For each node v in tree T, T. denotes the subtree of T rooted at v. A leaf that is a descendant 
of node v is called a descendant leaf of v. Denote the Pightmost and leftmost descendent leaves of node 
v as j(v) and g(v), respectively. Also, define S(v) to be the set of labels of all descendant leaves 
of v. Note that the label of a leaf never changes during an alignment process. To simplify the presentation, 
we wiJl assume without loss of generalit y that each internal node in T has exactly d chddren in our 
discussion.  From now on, let X = {sl, . . .,sk} be a set of se­quences and T a phylogeny for X (i. 
e., the leaves of T are uniquely labeled with the sequences S1, . . . . sk ). Let T in denote an optimrd 
evolutionary tree for T. For each node v in T in, the closest descendant leaf of v, denoted l(v), is 
a descendant leaf of v such that the path from v to l(v) is the shortest among all descendant leaves 
of v. For convenience, let s1(v) denote sequence label of l(v). Define an evolutionary tree TZ as follows: 
for each internal node v in T, assign the sequence s1(v) to v. Lemma 3 C(TZ) ~ 2c(T i ). Proof. Consider 
a counter-clockwise walk along the outside of the optimal tree pi which traverses every edge twice, once 
in each direction. The total cost of this walk is clearly 2c(~in ). The walk can be also thought of as 
a path that links all the leaves into a chain, from left to right. Take an arbitrary node v and consider 
the subtree ~n rooted at v. Let V1, . . . . Val be the children of v. These children induce d subtrees 
y, . . . . *. For each i = 1 ,..., d 1, to connect the two leaves ~(vi) and g(vi+l ), the walk uses 
a path P~,i : f(~a) -Wi ~ 0 ~ ~~+1 + g(~~+l), (See Figure 2(a).) It is easy to see that d-1 Define o! 
1 new pathes P~,a : 1(w) -w -vi ~ l(vi), where 1 < i < d and l(vi) # l(v). (See Figure 2(b).) Obviously, 
(1) I<i<d i=l r(vi)#r(v)  where C(PW ,i) and c(P~,i) are the lengths of PU ,i and PJ,i, respectively. 
Now consider the tree T . The edges between v and its d chddren cost totally  fdist(sr(v)j S l(Vi)). 
i=l By triangle inequality, we have dist(sl(v), sl(vi )) < .( PJ,i). It follows from the above that 
d C(T1) = ~ ~ dist(sl(v), sl(vi)) VET i=l Therefore, C(TZ) < 2c(Vin). An evolutionary tree is called 
a lifted tree if the label of each internal node equals the label of some child of the node. Obviously, 
TZ is a lifted tree. From the above discussion, we can immediately conclude Corollary 4 There exists 
a lifted -tTee with cost at most 2c(r~-). Computing T1 is not easy since it is derived from the optimal 
tree P in. However, in the following we de­scribe a simple algorithm that constructs an optimal lifted 
tree T*, i.e., one that has the smallest cost among all the lifted trees. From the above corollary, c(T* 
) ~ C(TJ ) ~ 2c(~i 7. The idea is to use dynamic programming. Foreach vET, i= l,..., k su.h that si 
E S(V), let D[v, si] denote the cost of an optimal lifted tree for T. with v being assigned the sequence 
si. It is pos­sible to compute D[v, si] recursively. For each leaf v, we define D[v, si] = O if the label 
of v is si. Let v be an internal node, and V1, . . . . vd its children. Sup­pose that si E S(VP), where 
1 < p < d. Clearly p isunique. Then D[v, si] can be computed as follows: For each q = 1,..., d and q 
# p, find a jq such that Sjq E S(V9 ) and ~[vq, Sjq] + did(si, Sjq ) is minimized. Then D[V, Si] = LIIVP, 
Si] + ~ D[vg, Sj,] + disi(si, sj, ) I<g<a 9#P (See Figure 3.) The full algorithm, is described in Fig­ure 
4. Let n be the msximum length of any sequence in X. Line 3 of Algorithm 1 takes 0(k2n2 ) time. Each 
execu­tion of line 7 takes O(k) time. Since line 7 is executed 0(k2) times, Algorithm 1 requires O(ks 
+ k2n2) time in the worst case. Hence, we have the following theorem. Theorem 5 Algom thm 1 outputs an 
evolutionary tTee with cost at most 2c(T in) in time 0(k3 + k2n2). 5 A Polynomial-Time Approxi­mation 
Scheme. We extend Algorithm 1 to a PTAS by considering constant-size components of the tree and augmenting 
the lifting technique with local optimization, which is used in the iterative improvement method in Section 
1.4. Recall that, if we label each node v in the tree T with the sequence s1(v), we obtain an evolutionary 
tree T1 with cost at most twice the cost of the optimal evolu­tionary tree pin. Let t > 0 be an integer. 
For each v c T, define the depth-t component T. ,t as the subtree of TV containing only the top t+ 1 
levels. Clearly, TV ,t have at most &#38; leaves and at most (dt 1)/(d 1) inter­nal nodes. For a subtree 
TV ,t, v # T(T), we can obtain an evolutionary subtree T~,t by assigning to each node u E L(T*,t) U {v} 
the sequence assigned to u in the tree T1, which is s1(u), and constructing the sequences for the other 
nodes in Tv ,t such that the cost of the subtree is minimized. Obviously, c(TJ,t) < c(T~,t), where T~,t 
is thedepth-t subtree of T1 rooted at v. This hints us to partition the tree T into depth-t components, 
and construct an optimal evolutionary subtree T~,t for each component TV,t. By choosing the partition 
carefully, this will in fact produce an evolutionary tree with cost at most (1 + $)c(Tin). We first develop 
some results useful for the design of the algorithm. These results will establish upper bounds on the 
the cost of the special evolutionary trees obtained vv vi Vi W+l .. .. . . . . . . . . . . . . . . 
. . . . . .0. ..--0 f(v,) g(?),+,) l(v) l(v~) (a) (b) Figure2: (a) Thepath lJv,iin the walk. (b) Thepath 
F J,i. v D[V, Si] $~ vl D[vl, sl] D[v2, si] D[v:3, J13] (a) (b) Figure 3: (a) The subtree T.. (b) The 
lifted subtree, where S1 E S(VI ), S, c S(vz), and Sa E S(vs). 1. begin 2.for eachpair (z,j), 1~i<j~k,do 
3. compute di.d($~, Sj ).  4. for each level of T, with the bottom level first, do 5. for each node 
v at the level do 6. fori=ltok  7. if si c S(v) then compute D[v, S1]. 8. Select an s E X such that 
II[r(T),s] is minimized. 9. Compute the lifted tree with cost D[T(T), s] by back-tracking. 10. end. 
  Figure 4: Algorithm 1. . as above. For each node v, let p(v) be the length of the path from v to l(v), 
h(v) the total length of the edges from v to its children, and s(v) be the sequence label assigned to 
v, in the optimal tree T in. In particular, if v is a leaf, then p(v) = O and h(v) = O. The following 
lemma holds. Lemma 6 Let v # r(T) be a node in T and have chil­dren VI, . . ., Vd, then c(T;,J < x ~( 
) + ~ P(u)+ Ua(!rw, t) Ueq z =,:) d (2) i=l h(v) + ~ P(w). Proof. Let T~t be the evolutionary subtree 
ob­ tained by labeling each node u E L(TV,~) u {v} with the sequence sl(u) and each other node u in TV 
,t with the se­quence s(u). (See Figure 5.) By the triangle inequality, we have for each node u c L(Tm,t), 
W(s(p(u)), 81(U)) < dist(s(p(u)), s(u))+ p(u). Thus, c(T;J < ~ dist(sl(v), s(vi)) + i=l ~ h(u) + ~ 
P(u). (3) UeL(!z .,*) UE~(Te, t)-{U} An explanation of this inequality is given in Figure 5(b). Again, 
by the triangle inequality, dist(sl(v), S(va)) < dist(s(vi), s(v)) + p(o). Moreover, ~dist(s(va), (V))= 
(v). i=l Hence, we can conclude Since p(v) < dist(s(vi), s(v)) + p(vi) for each i = 1,. ... d, W t) < 
x Xu)+ ~ P(u)+ wer(Tm,t) UEL(T.,*) ~did(s(vi)j s(v))+ P(vi) i=l < ~ ~(~)+ ~ P(v) + uEI(Tm, i) uEL(Te, 
J i=l Since the cost of T~,t is minimized, we have c(Tj,i) < c(T;J. Note that, if the node v is near 
the bottom level of T, the real depth t of T.,t could be less than t.In this case, the above inequality 
(2) becomes d h(v) + ~ p(vi). (4) i=l For each i = O,..., t 1, let T~fT),i denote the evo­lutionary subtree 
obtained by assigning to each node v E L(Tr(~),i) the sequence s1(w) and each other node in T,(T),l a 
sequence so that the cost of T~(T),i is min­ imized. Similarly, T~(~),i denotes evolutionary subtree 
obtained by assigning to each node v E L(TT(T),$ ) the sequence sl(v) and each other node v the sequence 
s(v). Note that, now the root T(T) is labeled with s(r(T)) instead of s/(r(T)) in the subtree T~(T),i. 
Then inequal­ity (3) becomes c(T:(T),t ) < C(T<T),,) UEI(Tm(T),i) u&#38; L(Tr(T), i) Sum up inequalities 
(2) or (4) for all v G T, and inequality (5) for i = O, . . . ,t 1, we have t-1 ~ c(CJ + ~C(T:(T),i) 
tI#r(T) i=o ~ (t+ 1) ~ h(v) +2 ~p(v). (6) VET v6T The coetlicients in the above inequality are established 
from the following observations: -­ 1. The term h(v) in inequality (2) is counted once for every v. 
2. The term ~U~~[Tw,) h(u) in ~equfities (2), (4), and (5) totally contributes at most t h(v) s for each 
 v. 3. The two terms ~=~~(Tm,) P(U) and ~~el P(vi ) h  inequality (2) contributes at most two p(v) 
s for each v. Now, we want to upper-bound the right-hand side of inequality (6) in terms of c(~in ). 
Obviously, ~ h(?))= C(lr i ). (7) w6T d(v) . ------­ S(U1) S(V2) Sl(ul) S1(U2) (a) S1(U3) S1(U4) S(ul) 
L?(UJ I 1 1 : 1 I I i S1(U2) (b) I 1 1 : S1(U3) S(U4) 1 1 t : S1(IL4) Figure 5: (a) Thesubtree T (v,2). 
(b) Thesubtree~n. To establish the relation between ~V~~ p(v) and c(~;n ), we need the following lemma, 
which is a vari­ation of Lemma 3.2 in [6]. Lemma 7 Let U be a tvee such that every internal n­ode has 
at least two children. The? e exists a one-to-one mapping e from the internal nodes of U to the leaves 
such that (i) foT each inte?nal node v, e(v) is a descen­dant of v and, (ii) the paths from internal 
nodes v to e(v) are edge-disjoint. Let e be such a mapping for tree T. For each node v, let T(v) denote 
the length of the path from v to e(v) in T * . (r(v) = O if v is a leaf.) It follows from the above lemma 
that ~ .(v)< C(r ). WET By the definition of p(v), (8) VET WET The above inequality is crucial for our 
result, The in­ equalities (6), (7), and (8) immediately imply the fol­ lowing lemma Lemma 8 t 1 X c(Z,t) 
+ ~c(T.~fT1,a) < (t + 3)c(~ ). u#r(T) i=O Let set W contain all nodes at level i of T. (The root is at 
level O.) We can partition the internal nodes (excluding the root) of T into t groups Go,..., Gt-1, where 
Gi =  u Q. jsi( mod t) Thus, t-1 x~ c(%)= ~ c(T ,,). i=O VEGi tI#r(T) By Lemma 8, there exists an i, 
O < i < t 1, such that Foreachi= O,..., t 1, the set of subtrees {T~,t Iv G Gi} u {T~(~),i} forms an 
evolutionary tr~:e, which W~ be denoted as T:. From the above discussion, we know that for some i, T; 
approximates T i with the desired ratio. The difficulty is again that it is not easy to compute T;. An 
evolutionary tree is called a dej~th-t component -tTee with respect to some fixed Gi if, every node v 
G Gi is assigned a sequence which labels some node in L(T. ,t). Note that, in the tree T:, every node 
v E Gi is assigned the sequence sI(v). Hence it is easy to verify that T/ is a depth-t component tree 
with respect to Gi, for each i=O ,..., t 1, and the following lemma holds. Lemma 9 The? e exists a depth-t 
component tree with cost at most (1 + $)c(~i ). Now, we describe an algorithm t: construct a minimum-cost 
depth-t component tree T, i.e., the cost of ~ is the smallest among all the depth-t componen­ t trees 
(with respect to some Gi). The basic idea is to combine dynamic programming with local optimization. 
Consider a Ta,t. Let u be a child of v and L(TU,~_l) = {wI,... , Wm} be the set of leaves in Tti,t_l. 
(Note that the component T.,t may not be full.) For each i=l ,....m, let si E S(wi ) be a sequence. Then 
for ,. each sequence s, T(v, t, u, s, Sl, . . . . Sm) denotes the evo-Theorem 10 FOT any t, Algom thm 
2 has a per­lutionary subtree obtained from Tw,t-l U {(v, u)} by la-formance ratio Rt < 1 + ~ and runs 
in time beling v with sequence s and each node Wi with sequence O(kd - +2 M(d, t l,n)). Si, and constructing 
a sequence for each other node in Tu,t-l so that the cost of $(v, t, u, s, Sl, . . . . Sm) is min- Corollary 
11 !l%ee aiignment has a PTAS. imized. The top subtree Tr(T],i, O < i < t 1, is treated sim- It is 
unclear whether Corollary 11 holds for phylo­~arly and the resulting evolutionary subtree is denoted 
 genies with unbounded degrees. Interestingly, we can T(~(T), i,u, s,sl, . . ., Sin). show that for a 
score scheme that does not satisfy tri-Let vbeanode atlevel iofT, and sES(v). De­ angle inequality, constructing 
an optimal evolutionary fine ~(v, s) as the minimum-cost evolutionary subtree tree is MAX SNP-hard even 
when the given phylogeny obtained horn Tv such that the node v is labeled with is a star. the sequence 
s and the evolutionary subtree itself form­s a depth-t component tree with respect to Gj, where j s i( 
mod t). We use D[v, s] to denote the cost of References $(v, s). Similar to the previous section, D[v, 
s] can be computed recursively from bottom to top. <RefA>[1] S. Altschul and D. Lipman, llees, stars, and multiple 
sequence alignment, SIAM Journal on Arwlied Math. If v is a leaf, D[v, s(v)] = O. Let v be an internal 
node .­ 49, pp. 197-209, 1989. and U1, ....ud the children of v. For each i = 1, .... d, [2] S. Arora, 
C. Lund, R. Motwani, M. Sudan and M. let L(TU,,t-l) = {~i,l, . . . . Wi,m}. Suppose that s c Szegedy, 
Proof verification and hardness of approxima­S(wp,q), where 1 S P < d and 1 < q< m are unique. tion 
problems, Proc. IEEE Mrd FOCS, 1992. Then D[v, s] can be computed as follows: For each i = [3] M. Bern 
and P. Plassmann, The Steiner problem with 1 ,..., dand each j = l,..., m, find ansi,j such that edge 
lengths 1 and 2, Information Processing Letters si,j G S(wi,j ) if i # p or j # q, and si,j = s otherwise, 
32, pp. 171-176, 1989. and moreover [4] P. Berman and V. Ramaiyer, Improved approximation m for the Steiner 
tree problem, Manuscript, 1993. ,. C(T(V, tj Ui$ S, si,lj . . . . si,m ))+ ~ ~[wi,j, Si,j] [5] S.C. Chan, 
A.K.C. Wong and D.K.T. Chiu, A survey j=l of multiple sequence comparison methods, Bulletin of Mathematical 
Biology 54(4), pp. 563-598, 1992. is minimized. Then [6] D.Z. Du, Y. Zhang and Q. Feng, On better heuristic 
for Euclidean Steiner minimum trees, Proc. IEEE S2nd FOCS, pp. 431-439, 1991. D[v, s] = fc(~(v,t,%tstsi,l, 
. . .,si,nb)) + [7] J.S. Farris, Methods for computing Wagner trees, Sys­ i=l tematic Zoology 19, pp. 
83-92, 19970. dm L.R. FouMs and R.L. Graham, The Steiner problem in ~~D[w*,j,si,jl. [8] phylogeny is 
NP-complete, Advances in Applied Math­ i=l j=l ematics 3, pp. 43-49, 1982. Foreachi= O,..., t 1, let 
D[i] be the cost of the [9] M.R. Garey and D.S. Johnson, Computers and optimal depth-t component tree 
with all the heads in Intmctability: A Guide to the Theory of NP-Completeness, W. H. Freeman, 1979. 
Gi. .D[i] can be computed from the top subtree Tr(~),i and the values D[v, s] of the nodes at level i 
of T in a [10] D. Gusfield, Efficient methods for multiple sequence alignment with guaranteed error bounds, 
Bulletin of wa~ similar to above. Clearly, min{D[i] ]0 < i < t 1} = Mathematical Biology 55, pp. 141-154, 
1993. c(T). [11] J.J. Hein, A tree reconstruction method that is econom- The ac­ ical in the number 
of pairwise comparisons used, Mol. tual algorithm for computing !i? ais given in Figure 6. Bio/. hoi. 
6(6), pp. 669-684, 1989. Supp~se that computing each c(T(v, t, u,s, s1,. . . . s~)) [12] J.J. Hein, A 
new method that simultaneously aligns or c(T(~(!Z ), i, u, s, s1, . . . . s~ )) (i.e., local optimization) 
and reconstructs ancestral sequences for any number requires at most hf(d, t 1, n) time. Clearly ilf(d, 
t of homologous sequences, when the phylogeny is given, Mol. Bioi. hoi. 6(6), pp. 649-668, 1989. 1, 
n) is upper-bounded by O(n(d -*-l)t(d-l)) [22]. Thus [13] an execution of line 5 takes &#38;d - lbf(d, 
t 1, n) time. F.K. Hwang and D.S. Richards, Steiner tree problems, Networks 22, pp. 55-89, 1992. Line 
5 is repeated a total of 0(k2) times. Line 7 is exe­ [14] F.K. Hwang and J.F. Weng, The shortest network 
un­cuted ttimes, each taking at most kd - +1 &#38;f(d, t-2, n) der a given topology, Journal of Algorithms 
13, pp. 468­time. Therefore, the time complexity of Algorithm 2 is 488, 1992. O(kd - +2 M(d, t 1, n)). 
(In fact, it is easy to show T. JianK and M. Li, ODtimisation nroblems in molecu­that the algorithm runs 
in time O{(k/&#38;)d *- + ZM(d, t_ [15] lar biol;gy, to appek ~ Advances ;n Optimization and 1, n)).) 
Approximation, D.Z. Du and J. Sun (eds.), 1993. 1. begin  2. for each level, with the bottom level first, 
do 3. for each node II at the level do 4. for each s c S(W) do 5. compute D[v, s]. 6. fori=Otot ldo 
 7. compute D[z].  8. Select an z to minimize D[z]. 9. Compute the evolutionary tree $ from D[z] by 
back-tracking. 10. end.  Figure 6: Algorithm 2. [161. R.M. Karp, Mapping the genome: some combinatorial 
577, 1984. . problems ~ising k rnolec&#38;r biology, ACM STOC 93, [30] M.S. Waterman, Sequence alignments, 
in Mathetnati­ pp. 278-285, 1993. cal Methods for DNA Sequences, M.S. Waterman (cd.), [17] R.M. Karp, 
Probabilistic analysis of partitioning algo-CRC, Boca Raton, FL, pp. 53-92, 1989. rithms for the traveling 
salesman problem in the plane, [31] A.Z. Zelikovsky, The 11/6 approximation algorithm for Math. Opemtions 
Research 2, pp. 209-224, 1977. the Steiner problem on networks, Algorithrnicu 9, pp. [18] E.S. Lander, 
R. Langridge and D.M. Saccocio, Map-463-470, 1993. ping and interpreting biological information, Commun­ications 
of the ACM 34(11), pp. 33-39, 1991. [19] C.H. Papadimitriou and M. Yarmakakis, Optimiza­tion, Approximation, 
and complexity classes, Journal of Computer and System Science* 43, pp. 425-440, 1991. [20] D. Penny, 
Criteria for optimizing phylogenetic trees and the problem of deterrninin g the root of a tree, J. Mol. 
Euot. 8, pp. 95-116, 1976. [21] P. Pevzner, Multiple alignment, communication cost, and graph matebing, 
SIAM J. Applied Math. 56(6), pp. 1763-1779, 1992. [22] D. Sankoff, Minimal mutation trees of sequences, 
SIAM J. APPL. Math. 28(l), pp. 35-42, 1975. [23] D. Sankoff and P. Rousseau, Locating the vertices of 
a Steiner tree in zm arbitrary metric space, Mathematical Programming 9, pp. 240-246, 1975. [24] D. Sankoff, 
R. Cedergren and G. Lapalrne, Frequency of insertion-deletion, transversion, and transition in the evolution 
of 5S ribosomal RNA, J. Mol. Evol. 7, pp.133­149, 1976. [25] D. Sankoff and R. Cedergren, Simultaneous 
compar­isons of tlmee or more sequences related by a tree, in D. Sankoff and J. Kruskal (eds), Time Warps, 
String Edits, and Macromolecules: the Theory and Practice of Sequence Comparison, pp. 253-264, Addison 
Wesley, Reading Mass., 1983. [26] D. Sankoff and J. Kruskal (Eds), Time Warps, String Edits, and Macromolecules: 
the Theory and Pmctice of Sequence Comparison, Addison Wesley, Reading Mass., 1983. [27] N. Saitou and 
M. Nei, The neighbor-joining method: a new method for reconstructing phylogenetic trees, Mol. Bid. Evol. 
4-4, pp. 406-425, 1987. [28] E. Sweedyk and T. Warnow, Manuscript, 1992. [29] M.S. Waterman and M.D. 
Perlwitz, Line geometries for sequence comparisons. Bull. Math. BioL 46, pp. 567</RefA>­  
			
