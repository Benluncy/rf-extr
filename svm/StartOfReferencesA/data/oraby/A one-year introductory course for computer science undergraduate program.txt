
 A ONE-YEAR TNTRODUCTORY COURSE FOR COMPUTER SCIENCE UNDERGRADUATE PROGRAM All Behforooz Onkar P. Sha~ma 
Computer Science Department Moorhead State University Moorhead, MN 56560 ABSTRACT The nppro~ch t~ken 
to teach the first undergraduate course in computer science varies a gre~t deal. The one that places 
major emphasis on the teaching of a programming language is still widely used. We find many drawbacks 
with this approach. In our opinion, the discussion of introductory computer concepts and problem-solving 
techniques should precede the coverage of the syntax of a programming language. Tt is also our belief 
that basic data structure concepts should be presented in the first course and discussed independently 
of any particular programming language considerations. Finally, we don't subscribe to the view that teaching 
of programming styles should be delayed until later courses. With these ideas in view, we present in 
this paper the outline of a one-year beginning course for the computer science undergraduate degree program. 
 INTRODUCTION It may be worthwhile to first briefly describe the environment in which we are presently 
working. This is to establish that our environment is typical of most other environments in which a computer 
science undergraduate degree program is conducted. The computer science department at Moorhead State 
University was established in the fall of 1970. The enrollment in this program is constantly growing 
and it presently stands at 220 majors and 80 minors. The department offers 38 courses including the equivalent 
of fifteen, 4-credit courses required of all the majors. There are six full time faculty members in the 
department. This number is expected to increase to eight in the year 1981. The department has been authorized 
to offer a masters degree program starting the fall of 1981. Permission to copy without fee all or part 
of this material is granted provided that the copies are not made or distributed for direct commercial 
advantage, the ACM copyright notice and the title of the publication and its date appear, and notice 
 is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, 
or to republish, requires a fee and/or specific permission. &#38;#169; 1981 ACM 0-89791-036-2/81/0200/0046 
$00.75 The set of required courses contain the following core courses: COMS 150 Introduction to Computers 
and Programming I COMS 151 Introduction to Computers and Programming II CON[S 152 Assembly Language Programming 
COMS 220 Computer Organization COMS 305 Logic Design I COMS 405 Logic Design II COMS 370 Information 
Structures COMS 380 Operating Systems I COMS 410 Theory of Language Translation As can be seen, COMS 
150 and COMS 151 are the introductory courses which are generally taken by freshmen and sophomores. Previously 
these courses covered some basic computer concepts and taught two programming languages namely BASIC 
and FORTRAN. Students who completed these courses with good grades were found to have difficulty in persuing 
the follow-up software-oriented courses. This difficulty seemed to be related to either insufficient 
or complete lack of coverage of the following topics in COMS 150 and COMS 151: - Problem-solving techniques 
-Introductory Computer Organization Concepts -Basic Data Structure Concepts -Program Development Process 
 In our opinion the difficulty faced by students in this department typifies the situation existing in 
most other places where a similar approach was or still is being followed in the offering of their introductory 
courses. We are convinced that there is a strong need for the revision of such curriculum at the earliest 
possible opportunity in the interest of better training for the computer science majors. At Moorhead 
State, this is already being done by revising the outline of COMS 150 and COMS 151. It is expected that 
these courses will now do a much better job of preparing entering students well for follow-up courses. 
 A literature review of the recent work in this area [1,3,4,5,6,8,9] gives strong support to the curriculum 
and methodology presented here which is also, in content, very similar to the recommendations of the 
C3S of the ACM [2]. 46 There are some differences in the emphasis given to the coverage of different 
topics. But this is to bp expected because what we are presenting here is a framework rather than a rigid 
formula. Some minor variations in light of the local requirements are expected. The curriculum presented 
here is expected to be used as a model for reviewing existing programs as suggested by Powell [7]. THE 
RATTONALE An introductory course in computer science should aim to lay down a solid foundation for the 
future courses. This aim may be achieved by providing a broad picture of what it means to use the computer 
for problem solving. In particular, such a course should minimally include the following topics: -Problem-Solving 
Skills -Introductory Computer Organization -Basic Data ~tructures -Program Development Process Development 
of problem-solving skills It has been our experience that most of the students who complete introductory 
courses that teach programming languages only, learn the syntax of the language well but still don't 
know where to begin when it comes to writing a program. The main problem appears to lie in their inability 
to distinguish between the planning and design phase on one hand and the coding phase on the other. This 
is probably so because they are invariably being prompted in the class to write programs without first 
being required to plan and design a solution. Students sit down to write code without a clear understanding 
of the problem definiton and/or requirements. Introductory ,computer organization concepts It is important 
for students taking introductory courses to understand the functions of and interaction between various 
computer components. For example, if students don't have a clear picture of the organization and function 
of internal storage, it is difficult for them to visualize how data can be efficiently represented and 
stored within computers. Can we then expect that in their programs they will try to minimize the number 
of variable names or try to use an integer rather than real representation for data whenever possible? 
Without an introduction to CPU and System software, it will be difficult for students to write efficient 
programs. For example, why in their program should they try to mix I/O and computation instructions for 
operational efficiency? Such efficiency considerations will make sense to students only when they have 
been introduced to the concept of I/O-bound and compute-bound programs. Also, without a good understanding 
of the characteristics and the operations of secondary storage units, students will not be able to select 
proper organization and processing methods. For instance, how do they know that for an airline reservation 
system or an inventory system, direct nccess organization and processin~ shou]d he splected? In short, 
we would n~v~r expect a student to even think in terms of writinz a "better" program if these introductory 
concepts are not covered before the learning of m pro£ramming ].anguaF, e, Bas~e d.~t~ strllctlIre enneepts 
 It is important to recogniz~ that programming ~s not a straip, htforward process of writing code from 
an nIzorithm. Of particular interest in any problcm-so!vin~-~ process is the organization of data. This 
topic is sel. dom covered in an introductory programming course. As a result, the students ,~re led to 
believe that the only data orKanization possible are those provided by the language they are learning 
~nd they don't see any need or justification for any other type of orgmnizatJon. For example, sequentia] 
allocation is the limit of imagination for those who stuart with FORTRAN. In our opinion, basic data 
organization and processing concepts should be d~scussed along with but independently of a programming 
language. This approach has additional advantages of facilitating presentation of nontrivial 'programming 
problems, bringing out intricacies of the language and preparing the students well for the follow-up 
courses. Program development process Along with the presentation of programming concepts and techniques 
in introductory courses, it is also necessary to include discussion of important programming topics such 
as program structure, readability, testing, documentation, maintenance, etc. Furthermore, good programming 
styles should be learned in the early phase of programming rather than be left to a later time since 
a habit (bad programming) learned as a result of long practice becomes difficult to eliminate. It is 
equally important that concepts and techniques not only be discussed but illustrated through the presentation 
of some major examples. Ideally, these examples should additionally bring out important aspects of a 
good program development process. THE CURRICULUM In the previous section, the rationale for the development 
of a one-year introductory course for a computer science undergraduate program has been discussed. In 
this section, the curriculum for such a course in outline form, and the methodology for its teaching 
are presented. The detailed outline for the course could be obtained from the authors. In this outline 
the percentage shown next to the section heading indicates allocation of time for that section. This 
allocation is intended to serve as 8 guideline for the instructor. Curriculum outline I. Computer Systems 
(15%) 47 Number System and Basic Arithmetic Information Representation in Computer Comp~tcr System 
Organization Secondary Storage Media and Devices Computer Languages and Software Past, Present and Future 
of Computers 2. Structured Prob]em So]ving (15%) Problem-Solving Techniques and Al£orithms Problem Solution 
Structures 3. ProEramming Language(s) (see below)  4. Data Representation ~nd Processing (see below) 
Basic Dat~ Elements and Operations Elementary Data Structures and Operations String Data Elements and 
Processing 5. Computer Program Development (15%) Program Development for Computer Solution Case Studies 
 6. Examinations (5%) Sections three and four are to be covered simultaneously and is expected to take 
about 50% of the total curriculum time. This curricul.m does not assume any prior knowledge of the comp.ter 
on the part of students. As regards number of credits required to cover the material, it is recommended 
that for best results, two four-credit semester courses or three four-credit quarter courses be devoted 
to this purpose. In no case should the contact hours be reduced to less than those provided in two three-credit 
semester courses or two five-credit quarter courses. When used for eight semester-credit hours or twelve 
quarter-credit hours, it is recommended that two programming languages be covered. The first one should 
be covered in detail and only the syntax of the second should be discussed. However, the coverage of 
the second language should begin only after completing the presentation of the first. The Computer Systems 
section contains basic hardware and software concepts. This section should be the first section to be 
discussed. The Structured Problem Solving section concentrates on the learning of tools and techniques 
used to develop problem solutions. The outline of a structured methodology and some basJc patterns of 
problem solution logic that can be used to plan, design and represent structured solutions to most problems 
are included here. This section is intended to be the second section to be presented. The first two 
sections contain introductory and conceptual material and their teaching should in no way be linked to 
the idiosynchracy of any particular computer system or programming language. However, it is highly recommended 
that the concepts covered here be used as the cornerstone for teaching of the rest of the curriculum. 
 It is recommended that the teaching of the syntax of a programming language should start at this point. 
Language discussion should then be continued in conjunction with the teaching of sections four and five. 
In other words, complete coverage of the programming language syntax before starting sections four and 
five is strongly discouraged. There seems to be no uniformity with regard to the programming language 
used in an introductory course [I]. We realize that the selection of a language by an instructor may 
depend on various factors such as the local computing environment, instructor's preference and experience, 
community needs, etc. Wherever possible, the use of PASCAL, PLI or Standard FORTRAN 77 is, however, recommended 
for the following reasons: -they provide for structured programming -they are procedure-oriented -they 
are widely used or expected to become so -they provide for flexible I/O operations -they provide for 
adequate data management capability required at this level The fourth section on Data Representation 
and Processing is intended to provide the information most helpful to organize and process data associated 
with the problem to be solved. In the coverage of this section, it is of paramount importance that the 
concepts presented here should be taught as independent topics and not be limited by the facilities available 
in the programming language. However, extensive examples from the language should be cited to illustrate 
concepts being taught as well as to bring out the capability and limitation of the language. The objective 
of the last section on computer program development is to provide an integraton of concepts, facts and 
techniques covered in the previous sections. In addition, it is intended to include a discussion of programming 
style considerations and methodology for developing correct and proper computer programs. The coverage 
of this section should start at the point when the first major programming problem is assigned to students 
and should be continued throughout the rest of the curriculum. CONCLUSION There is great similarity 
between the curriculum outline discussed here and the outline of the first two introductory courses, 
CSI and CS2. proposed by the curriculum committee on Computer Science of the ACM [2]. Howew)r, there 
are two major differences between the two approaches. First the curriculum presented here places greater 
emphasis on the coverage of computer organization concepts, and second, it strongly recommends that probl(~-solving 
tools and techniques be covered independently of and prior to the coverage of any specific programming 
language. We believe that the outline presented here will provide the students with a better learning 
environment and a solid foundation for persuing further study in the computer science area. 48 REFERENCES 
<RefA> I. T. Furogori and P. Jalice "First Course in Computer Science, A Sm~ll Survey", SIGCSE Bulletin Vol. 
9, No. I, Pages 119-122. 2. ACM Curriculum Committee on Computer Science, "Recommendations for the Undergraduate 
Program in Computer Science", Communications of ACM Vol. 22, No. 3, March 1979. Pages 147-165.  3. William 
M. Conner, "A Concept- oriented Approach to Introductory Computer Science", SIGCSE Bulletin Vol. 9, No. 
I, Feb. 1977, Pages 162-164.  4. D.C. Hyde, B.D. Gay and D. Utler, "Integration of a Problem Solving 
Process in the First Course", SIGCSE Bulletin, Vol. 11, No. I Feb. 1979 Pages 54-60.  5. Asad Kheilany, 
"Alternative Teaching Strategy For An Introductory Computer Science Course", SIGCSE Bulletin, Vol. 9, 
No. I, Feb. 1977, Pages 93-95.  6. R.R. Oldehoeft and R.V. Roman, "Methodology for Teaching Introductory 
Computer Science", SIGCSE Bulletin, Vol. 9, No. I Pages 123-128.  7. James D. Powell, "Use of Model 
Curricula in Reviewing Established Programs", SIGCSE Bulletin, Vol. I0, No. 4 D.C. 1978, Pages 12-15. 
 8. S.D. Stoddard, R.L. Sodlmeyer and R.G. Lee, "Breath or Depth in Introductory Computer Courses", 
SIGCSE Bulletin, Vol. 11, No. I Feb. 1979, Pages 41-44.  9. W.S. Szalagka and Philip Walch, "Integrated 
Theory and Practice- an Approach to the First Computer Science Course", SIGCSE Bulletin, Vol. 11, No. 
I, Feb. 1979, Pages 45-48.</RefA>  
			
