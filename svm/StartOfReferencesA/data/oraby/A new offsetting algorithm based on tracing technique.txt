
 A New Offsetting Algorithm Based On Tracing Technique Shi-Nine Yang Institute of Computer Science National 
Tsing Hua University Hsinchu, Taiwan 30043 Republic of China Abstract In this paper we propose a new 
offset curve con­ struction algorithm for a piecewise interpolation curve. One of the most dif?icult 
problems of offset construction is the loop problem caused by the interference of offset curve segments, 
By investigating some geometric prop­erties among offset curve segments, we develop several criteria 
for loop validation. Then, baaed on these cri­teria, we proposed an efficient offset algorithm by trac­ing 
the individual offset segments and eliminating all invalid loops. Moreover, we show that under some ap­propriate 
assumptions, the proposed algorithm runs in O(n) time in average, where n is the number of curve segments. 
Another advantage of our algorithm is that it involves no bisector computation, therefore it is ap­plicable 
to all piecewise interpolation curves provided the offset of each curve segment is available. General 
Terms: algorithms Additional Key Words and Phrases: offset, computer­ aided design, piecewise interpolation 
curve 1 Introduction Offset curve generation is an important application of computer-aided design and 
manufacture. For exam­ple, NC pocket machining [19, 25], VLSI circuit design [2], robot path planning 
[15], and modeling solid fuel combustion [27], all involve the computation of offset curves. Recently 
many research efforts have been de­voted to the study of offset construction algorithms [3, 4,6,7,8, 
10, 11, 12, 13, 14, 17, 19,20,23,24,25,26, 27]. One of the most difficult problems of the offset Penmssjon 
[o copy without fee all or pan of (his material is granted provided that [he copies are not made or distributed 
for direct commercial advantage, the ACM copyright notice and the title of the publication and its date 
appear, and notice is given that copying is by permission of the Association fur Computing Machinery. 
To copy otherwise, or [o republish, requires a fee and/or specific permission, Ming-Liang Huang Dept. 
of Computer Science &#38; Engineering Tatung Institute of Technology 40 Chungahan N. Rd., 3rd Sec Taipei, 
Taiwan, 104, Republic of China A B c L D 2s5 (a) (b)  < E-B < P--B (c) (d) Figure 1: Offset example: 
a input polygon (bold lines) and its primitive offset b loops in primitive off­ [1 set (c) result by 
Suh and Lee s method (d) valid result. construction is the loop problem caused by the interfer­ ence 
of offset curve segments. For example, Figure lb, obtained by directly connecting all offset curve seg­ 
ments with respect to (w.r.t. ) the polygon (bold lines) in Figure la, introduces some invalid loops 
if we com­ pare with the final offset curves in Figure ld. Several algorithms [3, 12, 19, 25, 26, 27] 
have been proposed to cope with the loop problem eliminating the invalid loops. For curves being composite 
of lines and arcs, the notion of Voronoi diagram has been proposed to avoid the creation of invalid loops 
[3, 19125]. For cubic parametric curves, this approach becomes rather diffi­ cult because the computation 
of the bisector between two parametric curves is complicate. In [10] and [1 1], an algebraic approach 
to represent offset surfaces and Voronoi surfaces has been proposed but it involvea a system of nonlinear 
equations. Furthermore, the ex­isting offsetting algorithms for cubic parametric curves [12, 26,271 can 
only handle curves with relative simpler structure or shape, e.g. an invalid loop L shown in Fig­ ure 
lC can not be removed by the method introduced in [26]. In this paper we will develop a new offset algorithm 
specially to deal with the loop problem when the com­putation of bisectors among curve segments are not 
available. Our algorithm will generate the correct offset curve of a simple closed piecewise interpolation 
curve in the plane. Since our major intereat is in the loop prob­lem, we assume the offset curve of each 
piece (curve segment) is available. Then by applying a flat data structure and examining geometric properties 
of loops we merge adjacent offset curve segments and eliminated invalid loops to obtain the final offset 
curve. The new offsetting algorithm can be completed in O(n) time in average under some appropriate assumptions, 
where n is the number of curve segments. Moreover our alg~ rithm involves no bisector computation, therefore 
it can be readily extended to variea spline curves as long as the offset curve of each single piece is 
available. The remainder of this paper will be presented in the following order. Some preliminary definitions 
and no­tations are given in Section 2. Then in Section 3, the in­tersecting behaviors between offset 
curve segments are investigated. Baaed on these geometric properties, in Section 4, a new offset algorithm 
is proposed and then its correctness and proformance are discussed. Further­more examples will be given 
to demonstrate the quality of the proposed algorithm. The final conclusion is pre­sented in Section 5. 
2 Notations and definitions Before proceeding, we introduce some preliminary notations and terms. Let 
S = {PjlO<j Sn}beamt of given ordered points and let ~ be a family of curves with Cl-continuity. A piecewise 
interpolation curve, PI curve for short, w.r.t. S and F is a continuous curve I which is compose of curve 
segments yi E ~, i = O, .... n-1, such that p. = 7.(0), p~ = 7.-1(1) and pi+l = %(l) = Yi+l(o) forO~ 
i~ n 2. There are several methods to generate a piecewise interpolation curve satisfying certain continuity 
requirement at the interpolating points Pj, O ~ j ~ n [5, 9, 16]. For each curve segment ~i of I , i 
= O,..., n 1, we sssume its offset (or approximated offset) curve ~: is available. For example, if I 
is a piecewise interpolation B6zier or Hermite curve, then there are several methods to compute its offset 
segment [13, 14]. A PI curve I (a) (b) (c) Figure 2: Primitive offset l? w.r.t. a close curve I (thin 
curve): (a) I is G1-continuous, (b) I is Co-continuous and (c) l? w.r.t. a Co-continuous curve in (b). 
is called G1-continuous curve if every adjacent curve segments have the same tangent direction at the 
joint pj(l <j < n). That is I satisfies ii(l) = ~i~i+l(0) for O ~ i ~ n 2, where ai are constants. Now 
let us consider the set I = Ug-1~;. If 1 is G1-continuous, then I is a continuous curve, see Figure 
2(a). If I is Co-continuous, then l? may be a disconnected curve, see Figure 2(b). In order to cope with 
this disconnected problem, some circluar arcs can be used to connect the disjoint curve segments, shown 
as the Figure 2(c). For simplicity, in this paper we will assume I to be simple, closed and G1-continuous. 
That is I can not be self­intersected, 7.(0) = ~n-l(l) and -jo(0) = an-l~n-l(l). To avoid possible stationary 
points, we further require each Yi to be regular, i.e. ii # Ofor i = 0,. ... n 1. Moreover, since we 
confine ouraelf to the study of interferences among different offset segments of {7:}, we assume each 
7$ is simple. For convenience, the curve I is called the primitive offset curve of 1? and each To of 
I is called an offset segment. Definition: The offset O@ ) of a PI curve 17 w.r.t. a given offset distance 
d >0 is defined as follows: O@) ={p E R2 : dis(p , r) = d}, where dis(p , I ) is the Euclidean distance 
between point p and the curve l?. From the offset definition, O@?) is composite of two components, one 
is in the interior of I , refered as inner offset O; (I ), and the other one, refered as outer oihet 
0$ (I ), is located outside of I . For convenience, we allow d to be negative and define Od(r) = o;(r) 
if d >0 and O@ ) = 0~(1 ) if d <0. We also note that unless the context indicates otherwise, we concentrate 
our study on the construction of O; (I ). This because their constructions are quite similar. Since the 
primi­tive offset curve r is compose of all offset segments, therefore VpO E Od(r), p 6 I . Thus the 
offset 0~(1 ) can be found within I . Hence we have the following observation. @ (!!!!!! Q (a) (b) 
(c) XA Figure 3: The set Cq* and the set Lq.. Observation: o~(r)= {p ~ r : dis(p , r) = Ial}, Moreover, 
since 7: E I is an offset curve segment ~.~.t. yi, therefore 7; = 0d(7i ). By definition, if a point 
p EO@) then p c ~~ for some i E [0, n 1]. Therefore we have the following. Lemma 1 The oflset o~17 is 
contained in the pn mitive oflset Oj r, thaf is, o~(r)c r . An offset point p E l? is valid if p E Od(r) 
other­wise it is invalid. Then from Lemma 1, I = Od(I ) iff every point in I is valid. Therefore the 
offset Od(r) can be obtained by tracing the curve I and prune all invalid points. In the following section, 
we will intro­duce several criteria for pruning the invalid subcurves in ro.  3 Geometric behavior of 
I Before the discussion of geometric behavior of I , some terms are defined as follows. Let q E r then 
q is the offset point of a point qc E I . For convenience, we will call qc as a corresponding point of 
q and define Cq. = {qclq E I and q is the offset point of q } to be t~e set of corresponding points of 
q . The notion of the corresponding point is addressed as the orthogonal projection in [18]. For example, 
in Figure 3(a), (b) and (c) Cq. is a set of one point, two points and a subcurve of I respectively. Let 
Cqo = uq.~cqo {PIP ~ ~ and p # q }, see Figure 3 d~hed (include bold) area, then the set 77+. = Uq. ~TO~q 
is called as the corresponding region of 7° see Figure 4. It is clear that, if p El and p ~ Zq. for 
some q Er then p is invalid. Therefore we have the following lemma. Lemma 2 If p . r and p cRv. for some 
y c r then p is invalid. A curve segment y; c I is locally valid if it is valid w.r.t. a subcurve of 
I . Then, from Lemma 2, we have the following. !,, (a) (b) Figure 4: Intersection point S and corresponding 
re­gions (dashed areas): (a) tangent point and (b) cross point. Corollary 1 If7: and 7; are tangent at 
a point s and 7: n 7; = {sO} (see Figure /a) then 7; and 7; are locally valid. IfsOE-y#f17fands 0 is 
not a tangent point, we say that y; and y; cross each other and s is a cross point. Corollary 2 If s 
is a cross point of y; and 7;, shown as Figure /b, then 7; and 7! are neither valid nor in­ valid W.F.t. 
~i and Yj, that is they are partia[[y valid.  3.1 Paths and loops An offset path P is defined to be 
a simple contin­uous sub curve of 17°. Then P is valid if every point of PO is valid and PO is invalid 
if every point of PO is invalid, i.e. P c Od(r) = r \od(r). In the following, we will show that P is 
valid iflPO has at least one vaiid point and P does not be crossed by ~, where ~ = l? \ P . Lemma 3 Ij 
P is not crossed by ~ then P is either valid or invalid, that is PO can not be partially valid. Proof. 
Suppose P is neither valid nor invalid w.r.t. I . That is P haa some valid parts and some invalid parts. 
Then, without loss of generality, there exist two points pf and p$ belong to the same offset segment 
7: c P , for some i, such that p; is invalid and P; is valid w.r.t. 1? and up: < up;, where UP; for j 
= 1,2 is the parameter value of the point p; for j = 1,2in ~Y. Since P is a continuous path, then there 
exists a point q G 7:, up: < uq. < up;, such that dis(q , ~) = Idl and there exists a real number c >0 
such that dis(s , ~) < Idl when uq. c< US. < uq.. From the offsetting definition, we know that the point 
q E ~. That is q is the intersection point of P and ~. From Corollary 1, PO must be crossed by ~. . From 
the Lemma 3, we have the following corollary. Corollary 3 IfP is neither valid nor invalid then P will 
be crossed by ~. Lemma 4 IfPO is valid then P has at least one valid point and P* is not crossed by ~. 
Proof. Assume 7: c P is croaaed by 7; c ~ at point s . From the continuity of 7;, there is a real number 
6>0 such that either the neighbor point 7~(us. +6) or 7;(tis~ $) is in the corresponding region of 7:. 
Hence, by the Lemma 2, P* is not valid. a By the Lemma 3 and Lemma 4, we can obtain The­orem 1 33 follows. 
Theorem 1 An ofiset path P is valid if and only if P has at least one valid point and P is not crvssed 
by ~. Suppose all self-intersection points of l? have been found, then all loops of I can be identified 
[26]. Since all these loops are simple, that is they are not creased by other loops, we can apply Lemma 
3 and Theorem 1 to check the validity of each loop. Therefore a simple offset algorithm can be derived. 
To be more precisely, if p c L , where L is a simple loop, and P is not a aelf­interaection point, then, 
by Theorem 1, the validity of p implies the validity of L . Moreover, from Lemma 3, p is invalid then 
Lo is invalid. In other words, if all simple loops of I are found, then loop validation can be replaced 
by point validation. For point validation, we need to compute dis(p , I ). Since the dktance computation 
between a point and a curve is not easy, we replace the computing of dis(p , I ) by the intersection 
checking of C$! and 17, where C!! is the circle with radius ldl and center p . Hence if I crosses C$ 
then dis(p , I ) < Idl otherwise dis(p , I ) ~ Idl. In summary, a direct algorithm can be obtained as 
follows. Algorithm: Offset-1; Input: A PI curve I and its primitive offset curve I ; output: o~(r); Step 
1: Find S: the set of all intersection points and Z: the set of all loops from I ; Step 2: Do the following 
substeps until C is empty: Step 2-1: Select a loop Lo from L; Step 2-2: Select a p E L such that p f! 
S; End of Offset-1. Step 2-3: Compute the circle C~!; Step 2-4: Nofound := TRUE; Step 2-5: i := O; Step 
2-6: While i ~ n 1 and Nofound do the following: Step 2-6-1 If ~i crosses C~! or 7i lie in Did! then 
Nofound := FALSE, where D$f is the disk of the circle C$!; Step 2-6-2 i := i +1; Step 2-7: If Nofound 
then output Lo otherwise discard L ; A similar method has been proposed by Roasignac [22]. He found 
all self-intersection points in I and split each one of offset segments by their intersection points. 
Then the validity of each subsegment can be examined by checking its mid point against original curve. 
Since I and I have n curve segments, the numbers of intersection points and loops will grow up to 0(rz2) 
in worst case. Moreover the inner loop of Step 2 will spend up to O(n) time. Therefore the time complexity 
of the above algorithm is 0(n3) in worst case. To reduce the time complexity, a tracing technique will 
be introduced in Section 4. The basic notion of tracing algorithm is to develop new validation crite­ria 
such that some loops can be determined when it is traced. Therefore, except for those indeterminate loops, 
all determined loops can either be output or dis­carded immediately to avoid the complexity caused by 
possibly intersecting the untraced segments. Hence the time for intersection checking and loop validation 
can be reduced. Furthermore, we apply the notion of uni­form grid technique introduced in [1] to improve 
our average performance. In order to facilitate the tracing algorithm, we intro­duce two new validation 
criteria in the following sub­sections. 3.2 Orientation test Let P be an offset path, we define P = upo~p. 
CPO and refer Pe as the corresponding path of P . It is clear that P C I . Since P may be formed by several 
offset segments, P may not be continues. For convenience, if P is disconnected, we add arc seg­ments, 
with radius Idl, to obtain a continuous corre­sponding path (see Figure 5). By the Jordan curve theorem, 
the plane R2 will be separated by a loop L into two disconnected regions, int(L) and ezt(L) where int(L) 
is the interior of L and ezt(L) is the exterior of L. That is R2 = int(L) UL U eict(L). It is clear that 
if Lo is a valid offset loop then dis(p, I ) > ]dl, Vp E int(LO). Therefore the following lemma can be 
derived easily. Lemma 5 An oflset loop L is valid w.r.t. L if and only if dis(p, L ) > Idl, Vp E int(LO). 
Lemma 6 An oflset loop L is invalid then dis(p, l?) < Idl, Vp . int(LO). For convenience, assume the 
direction of each curve segment is directed in accord with the increasing of its parameter value and 
the orientation of I is clockwise when viewed from above. In [26], the notion of orientation test has 
been intro­duced to check the validity of loops. It can be formu­lated as follows and the proof can be 
found in [28]. Theorem 2 /Orientation test] If the orientation o~LO ~s the reverse orientation of LC 
then Lo is an invalid loop. Since the orientation of a loop is clockwise if and only if its interior 
region is always in the right hand side w.r.t. loop tracing, the orientation checking of a loop is the 
same as the interior checking of a loop. In other words, if the interior of a loop always in the right 
hand side of the loop then its orientation haa to be clockwise. For the region checking, we can select 
one point, always lie in the right hand side w.r.t. the region boundary, and then determine whether the 
point is in­side the loop. Hence the orientation checking can be transfered to the point location problem. 
Several so­lutions have been proposed to solve the point location problem [21]. The single-shot approach 
[21, pages 41 42] can be adopted to check the orientation of a loop. This notion can be incorporated 
into the following pro­cedure. Procedure O.Test; Input: an offset loop L ; Output: TRUE for invalid and 
FALSE for valid; { invalid means orientation of L is in reverse } { suppose the orientation of I? is 
clockwise } Step 1: Select one point p from Lo such that the slope of L at p is not equal to zero; 5 
3 A; R 1 2 Figure 5: The corresponding path and corresponding arc segments. Step 2: Emit a horizontal 
half line MP. from P to the right; Step 3: Enumerate the number n of the intersection points of M;. and 
Lo; Case 1: n is odd then output TRUE; { orientation of Lo is counterclockwise } Case 2: n is even then 
output FALSE; { orientation of L is clockwise } End of O.Test;  3.3 Circle test From the above subsection, 
we know that the ori­entation test offers a simple procedure to check the validity of a loop. As the 
orientation test only checks the local behavior of the loop, a loop L is valid to its corresponding path 
LC may not be valid to the en­tire curve I , see Figure 1c. For simplicity, we refer a loop passing the 
orientation teat as a temporarily valid loop. In what follows, we will introduce the notion of circle 
test which provides a further test to classify a temporarily valid loop into valid or indeterminate. 
Let Lo be a loop contained in 1 . Since Lo is formed by multiple offset segments, we define p; . L , 
1 < i < n, ordered according to the tracing order, to be the intersection points of offset segments forming 
I . As described in previous section, the correspond­ing path of Lo may not be continues, we have to 
create the corresponding arc segment A; for each p: (see Fig­ ure 5) to connect the corresponding path. 
Now suppose that L is a partially valid loop, the following lemma can be derived. Lemma 7 lf L is not 
a valid loop then there is a curve segment ~ E L , Lc = l \Lc, such that 7 crosses A;, for some i. Proof. 
Since L is not valid, L is either invalid or partially valid. For the invalid case, dis(p , ~) < Idl 
 VpO E L . That is there is a path P c~ and a point p E L such that dis(p , P) < ldl. Since L is a loop, 
p E int(Lc). Furthermore, I is a simple closed curve, therefore there exists a curve segment y E ~ and 
an arc segment A: such that 7 crosses A;. Next, from Theorem 1, there is an offset segment . To c LO, 
LO = I \ L , such that L is crossed by ~ . Let q be the intersection point of 7° and L . Then q has two 
corresponding points q: and q; such that q; E L and q; E ~. Since q is valid w.r.t. L and L is a loop, 
q; E int(L ). From the Jordan curve theorem, there exists a curve segment ~ E ~ and an arc segment A: 
such that 7 crosses A: because r is a simple closed curve. c1 Since p: are ordered, p; can be called 
as the last intersection point w.r.t. Lo. From Lemma 7, we have the following lemma. Lemma 8 1~ L is 
not a valid loop then there is a curue segment 7 E ~ such that T crosses A;. Proof. Since Lo is not valid, 
L is either invalid or partially valid. For the invalid case, dis(p , ~) < ldl VpO E L . Since dis(p~, 
~) < ld[, there exists a curve segment y c ~ such that 7 crosses A:. Next, suppose there is no curve 
segment 7c ~ crossing d;. From the Lemma 7, there exists a curve segment -y c~ and an arc A:, for some 
i < n, such that 7 crosses A:. Let ~1, -y2 c L= such that p; c~1 and p; E 72. Since 1 is a simple closed 
curve and offset segments is traced according to segments order of I , there exists a subpath P c ~ such 
that P is between 71 and 72 and P crcmma L . Suppose the intersection points of P and Lo are q: and q;. 
Then the subpath, between points q; and qj, of P will be a portion of Lo. That is p: @ Lo. This is a 
contradiction. . Let C~l be the circle with radius [dl and center p. It is clear that A: C Cp, d . From 
Lemma 7 and Lemma 8, we have the following theorem. Theorem 3 [Circle test] If there is a curve segment 
7 E G such that 7 crosses Cp. d then L is indetermi­  nate. Otherwise L* is valid. From the Theorem 
3, we have a procedure Cir­cle-Test as follows. Procedure Circle-Teat; Input: A loop L and the last intersection 
point p$ G L ; Output: TRUE for valid, FALSE for indeterminate; Step 1: Compute the circle C!!; Step 
2: Nofound := TRUE; Step 3: While ~ not empty and Nofound do the fol­lowing: Step 3-1: Select a curve 
segment 7 from E; Step 3-2: If y crosses C$~ or 7 lie in Cp% Idl then Nofound := FALSE; Step 4: If Nofound 
then output TRUE otherwise out­put FALSE; End of Circle.Test; A Offsetting algorithm In this section 
we will present an improved offset algorithm based on tracing the primitive offset and ex­tracting the 
valid part. The basic notion of the alg~ rithm is to classify the loop by testing criteria as soon as 
it is traced, so that the traced loops can be removed as many as possible. By removing the processed 
loops, the time complexity caused by computing intersections can be reduced. Moreover, a uniform grid 
is imposed on the offset curve to implement the bucket method, so the computation of intersections can 
be performed locally. 4.1 Improved algorithm Let P be a path. Then we denote BP as the small­ est upright 
square region that contains P. Let 1 be the side length of BP. For simplicity, we sssume the fol­lowing 
preprocessing before our algorithm starts. We first project Br into a unit square and scale the of&#38;et 
distance ldl with the same proportion. Let [ be the average length of segments in r. Then place G x G 
grids over the unit square, where G = [c/~] and c is a fin~tuning constant [1]. Since I need to be exam­ined 
by the procedure Circle_Test, finally, we add all curve segments of I into grids which intercepts curve 
segments. Suppose there is a curve segment passing through more than one grids, the curve segment must 
be added into every grids respectively. To reduce the intersection checking, offset segments of I doea 
not be placed into grids until they have been processed. The processing order of the offset segments 
of I is grid by grid and segment by segment according to the order w .r.t. I . That is we trace offset 
segments according to their order w.r.t. I and follow the curve from grid to grid. Step 4 1: Select 
one intersection point p . S such that its parameter value is small­e8t among all intersection points 
w.r.t. -y, . Let y; be the offset segment which contain point p ; Step 4 2: From p , split 7$ and 7; 
into two o D subsegments y: ~, 7:,2 and 7j ,1, T;,z respec­ (b)(a) Figure 6: Intersect with indeterminate 
loop. As a tracing segment adding into a grid, we check intersections ofthis segment against all offset 
segments which already placed in the grid. If there is no any intersection point or no other offset segment 
has been there, we proceed into next grid or process next off­set segment. Otherwise, prune all intersection 
points which do not lie in this grid and sort the remain points by the order of their parameter values.. 
If the inter­sected segment is a segment of an indeterminate loop, we will split the loop at the intersection 
point and join it into the tracing path, see Figure 6b. This process will be called split and join. For 
the other case, we can extract a loop and sepa­rate it first, see Figure 6a. Then test this loop by two 
procedures, O.Test and Circle-Test. Finally, discard the loop if it is invalid or output the loop if 
it is valid. Otherwise, save it temporarily since the loop is inde­terminate. After processing the loop, 
go to the next grid or the next offset segment and execute the above procedure until the end point of 
I . From the above discussion, our algorithm is de­scribed as follows. Algorithm: Offset.2; Input: A 
closed simple P1 curve I and its primitive offset curve ro;  output: o~(r); Step 1: Let i := O and 
let the current grid contains the starting point of y;; Step 2: Place 7: into the current grid and update 
S: the set of all intersection points in the current grid; Step 3: If S is empty then go to Step 5; Step 
4: Process the following substeps until S is empty: tively; Step 4 3: Append the subsegment 7~,1 and 
7~,1 to the tail of the subsegment 7~z and 7~lz respectively; Step 44: If 7; is a segment of indeterminate 
loop L:, for some k, then go to Step 4 (see Figure 6b) otherwise extract a loop Lo; (see Figure 6a) Step 
4 5: If 7; has an indetermhate marker then go to Step 4 7 otherwise O-Test(L ); { since orientation of 
L is the same as ori­entation of L~ which contain the segment 7;, O-Test(L ) is unnecessary } Step 4 
6: If L is invalid then discard L and go to Step 5; Step 4 7: Circle.Test(L , p ); Step 4 8: If L is 
valid then output Lo other­wise mark Lo; { if Lo is not valid, Lo is indeterminate } Step 5: If 7: does 
not enter another grid then i := i + 1 otherwise replace the current grid by the next grid; Step 6: Go 
to Step 2; Step 7: Discard all indeterminate loops; End of Offset-2. 4.2 Correctness In our algorithm, 
intersection point finding, intersec­ tion point processing and loop classifying are three key­ steps 
deserving further discussion. Hence, in the fol­ lowing, we will concentrate on the correctness of these 
key-steps. It is clear that if one segment may be intersected by another segment then these two segments 
must si­multaneously lie in a grid. Thus, in the Step 2, all discarded intersection points will appear 
in either the processed grid or the grid that will be processed. More­over the curve is traced grid by 
grid according to the offset segments order. Therefore we do not missing in­tersection point in our algorithm. 
 (d) (e) Figure 7: The intersection of the tracing ot%et path and an invalid loop, where shade areas 
are areas that for any point p locate in then dis(p, I ) < d!, and points p; and p; are duplicate points 
of p an d q! and q; are duplicate points of q . From the Step 4 4 of the above algorithm, there are two 
types after intersection point finding (shown as the Figure 6). Since the offset path is drawn out from 
the continuous curve I and then we join the split­ ted subsegments appropriately into the tracing path 
in the Step 4-3, the tracing path will be a continuous curve after the execution of algorithm. Hence, 
when the tracing path self-intersects, a loop will be caused and separated (see Figure 6a). For the other 
intersec­tion case, the spliting and joining subsegments in the Step 4 2 and Step 4-3 cause a new tracing 
path (shown as the Figure 6b). Because we do not discard any off­set segment in these steps. Thus the 
number of the intersection points does not change in these steps. After the loop checking, a loop Lo 
can be classi­fied into three types namely, invalid, valid and indeter­ minate. If L is invalid, we discard 
it immediately. Although its offset segments may be intersected by the hereafter tracing path, see Figure 
7. However off­ set segments of an invalid loop are invalid. Hence all intersection points with discarded 
segments must be invalid. Moreover, from Lemma 6, dis(p, I ) < Idl, Vp E int(LO). That is all offset 
path P C int(LO), P is invalid. For example, in the Figure 7, since the valid­ ity of the subpath between 
the point p: and the point q! in the Figure 7(d) is the same as the subpath bs­ tween the point p and 
the point q in the Figure 7(e), therefore these two intersection detections are unnec­ essary. Thus the 
invalid loop deletion does not affect the correctness of our algorithm. For a valid loop, we output and 
discard it from the data structure. From Theorem 3, these segments can (a) (b) Figure 8: Shape examples: 
(a) uniform case (b) excep­tion case. not be intersected by the hereafter tracing path. Thus we can output 
and discard it immediately. Since an in­determinate loop may be intersected by untraced path, we keep 
it waiting for future intersection checking. If there is an intersection then we split and join it into 
the tracing path, as discribed in the above. Otherwise, from the Corollary 3, this loop is invalid and 
discard it in the final stage. Therefore, from the above discussing, we have the following theorem. Theorem 
4 Od(r) can be found by the Oflsetg a~go­m thm completely. 4.3 Algorithm performance This work was supported 
partly by Mechanical In­dustry Research Laboratories of Industrial Technology Research Institute, Taiwan. 
Our algorithm has been implemented in IBM PC and tested for many examples given by MIRL of ITRI. It runs 
reasonable fast. For theoretic analysis we give the following assumptions which are satisfied by most 
of our testing examples, except some examples as the Figure 8b. We assume the curve I satisfies the following 
assumptions. (a) T= c/@, for some constant c >0, and (b) Idl= k~ for some constant k >0. For the complexity 
analysis, we first prove that I go through O(n) grids totally in the frame of G x G grids. Then we show 
that the total cost of the intersecting op erations is O(n) in average. Moreover two procedures O.Test 
and Circle.Test can be executed completely in O(n) time in average. Therefore, during our algorithm executing, 
the complexity of our algorithm bounding by O(n) in average. Let 7 be a segment. And let /7 be the length 
of ~. Then the maximum area of B7 can be shown in the following lemma. Lemma 9 The mazimum area of B7 
is 1~/2. More­over its side length is 17/&#38;. From the above lemma, the average number of grids that 
covered by the bounding box B7 of a segment ~ can be derived as follows. Lemma 10 The number of grids 
crossed by 7 is 0(~G2) in avemge. From the Lemma 10, it is clear that the total time to place segments 
of I and I into grids are 0(n~G2). Since G = lc/~J, we can simplify O(n~G2) to ()(n). That is there 
are only O(n) segments are needed to place into G x G grids. Therefore the number of seg­ments per grid 
will be O(n/G2) in average. However, from the assumption, 1 = clfi for some constant c > 0. Thus the 
number of segments per grid can be simplified to 0(1). Hence the times of intersec­tion checking is constant 
per grid. Moreover I will go through O(n) grids. Therefore the time complex­ ity of the Step 2 in the 
0ffset_2 algorithm is O(n) in average. Since the time of intersection checking is constant per grid, 
the element number of S in the Step 2 is constant. Hence Step 4 1, Step 4 2, Step 4 3 and Step 4-4 can 
be completed in O(n) time. In the Step 4 5, we know that the O-Test proce­dure will not be executed for 
the indeterminate loop. Hence the time complexity of the Step 4-5 in the OtT­aet -2 algorithm is O(n). 
That is the singkshot vector was checked O(n) times during the 0ffset_2 algorithm executing. From the 
assumption, Idl = kl for some constant k, the circle Cldl ~% in the procedure Circle-Teat will cover 
[(k + 1)21 grids. Hence the intersection testing of the Step 3 in the Circle-Test can only concentrate 
on seg­ments of I in constant grids. Thus the Circle-Test can be completed in constant time complexity 
in aver­age since there are constant curve segments per grid. Moreover, from the above discussions, the 
number of all intersection points is O(n). Therefore the time com­ plexity of the Step 4-7 in the Offset-2 
algorithm is C)(n) in average. From the above discussing, the complexity of our algorithm can be described 
in the following theorem. Theorem 5 The Oflset-2 algorithm can be completed in (1(n) time in avemge provided 
the curve satisfies conditions (a) and (b). Furthermore some examples shown in Figure 9 to illustrate 
the quality of our algorithm. \ G &#38; %(5 Figure 9: Offsetting examples.   5 Conclusions and remarks 
The loop problem is one of most difficult problems of the offset construction. In this paper we propose 
an ef­fective algorithm which can generate the correct offset curve of a closed PI curve in the plane. 
In our alg~ rithm, we first introduce a flat data structure to reduce the number of intersection checking 
among offset seg­ments. Then by examining the geometry among offset segments, we develop two new criteria 
for loop valida­tion such that the desired offset curve can be obtained by tracing the offset segments 
and eliminating all in­valid loops. Under some appropriate assumptions, the offset of a closed PI curve 
can be constructed in O(n) time in average. Since our algorithm involves no bisec­tor computation, therefore 
it can be readily extended to all PI curves provided the offset curve of each curve segment is available. 
Finally we note that the major numerical computa­tion involved in our algorithm is the curve/curve in­tersection. 
Therefore the numerical sensitivity of our algorithm depends on how well the intersection alg~ rithm 
are implemented. Acknowledgements This work was supported in part by the National Science Council of 
R.O.C. under grant number NSC 80-0408-EO07-15 and by the Mechanical Industry Re­search Laboratories of 
Industrial Technology Research Institute, Taiwan R. O. C.. The authors acknowledge the referees for their 
many helpful comments on this paper.  References <RefA>[1] Akman, V., Franklin, W. R., Kankanhalli, M. and 
Narayanaawami, C., Geometric computing and uniform grid technique. Computer Aided Design 21, 7 (1989), 
410-420. [2] Barton, E. and Buchanan, I., The polygon pack­age. Computer Aided Design 12, 1 (1980), 3-11. 
209 [3] [4] [5] [6] [7] [8] [9] [10] [11] [12] [13] [14] [15] [16] Chou, J. J. and Cohen, E., Computing 
Offsets and Tool Paths with Voronoi Diagmms. Technical re port, UUCS 89-017, University of Utah, 1989. 
Coquillart, S., Computing offsets of B-spline curves. Computer Aided Design 19, 6 (1987), 305­ 309. Farin, 
G. E., Curves and Surfaces for Computer Aided Geometric Design. Academic Press, Inc., 1988. Farouki, 
R. T., Exact offset procedures for sim­ple solids. Computer Aided Geometric Design 2, (1985), 257-279. 
Farouki, R. T. and Neff, C. A., Analytic properties of plane ot%et curves. Computer Aided Geometric Design 
7, (1990), 83-99. Farouki, R. T. and Neff, C. A., Algebraic proper­ ties of plane offset curves. Computer 
Aided Geo­ metm c Design 7, (1990), 101-127. Faux, I. D. and Pratt, M. J., Computational Ge­ometry for 
Design and Manufacture. Ellis Hor­wood, Chicheater, 1979. Hoffmann, C. M., A dimensionality paradigm 
for surface interrogations. Computer Aided Geometric Design 7, (1990), 517-532. Hoffmann, C. M. and Vermeer, 
P., Eliminating extraneous solutions in curve and surface opera­tions. lnt. J. Comput. Geom. ,4pp/ic. 
1, 1 (1991), 47-66. Hoschek, J., Offset curves in the plane. Computer Aided Design 17, 2 (1985), 77-82. 
Hoschek, J., Spline approximation of offset curves. Computer Aided Geomefric Design 5, (1988), 33­ 40. 
Klaaa, R., An offset spline approximation for plane cubic splinea. Computer Aided Design 15, 5 (1983), 
297-299. L-perez, T. and Wesley, M., An algorithm for planning collision-free paths among polyhedral 
obstacles. Comm. ACM (1979), 560-570. Lee, J. H. and Yang, S. N., Shape preserving and shape control 
with interpolating B6zier curves. J. of Computational and Applied Mathematics 28, (1989), 269-280. [17] 
Patrikalakis, N. M. and Bardia, L., Offsets of curves on rational B=pline surfaces. Engineering with 
Computers 5, (1989), 39-46. [18] Pegna, J. and Welter, F. -E., Designing and map ping trimming curves 
on surfaces using orthogonal projection. In Proceedings of 1990 ASIUE Design Technical Conferences -Presented 
at the 16th De­sign Automation Conference, (Chicago, Sept. 16 19 1990) ASME, New York, 1990, pp. 235-245. 
[19] Persaon, H., NC machining of arbitrarily shaped pockets. Computer Aided Design 10, 3 (1978), 169-174. 
[20] Pham, B., Offset approximation of uniform Bsplines. Computer Aided Design 20, 8 (1988), 471-474. 
[21] Preparata, F. P. and Shames, M. I., Compu­tational Geometry: an Introduction. Springer-Verlag, 1985. 
[22] Rossignac, J. R., Blending and Offsetting Solid Models. PhD dissertation, Unversity of Rochester, 
July 1985. [23] Rossignac, J. R. and Rechicha, A. A. G., Off­setting operations in solid modelling. Computer 
Aided Geometric Design 9, (1986), 129-148. [24] Saaeed, S., de Pennington, A. and Dodsworth, J., Offsetting 
in geometric modelling. Computer Aided Design 20, 2 (1988), 67-74. [25] Spur, G., Krause, F. L., Germer, 
H. J. and Rieger, R., NC programming and dynamic sim­ulation based on solid models in a CIM strategy. 
Robotics &#38; Computer Integrated Manufacturing 4, 3/4 (1988), 471-481. [26] Sub, Y. S. and Lee, K., 
NC milling tool path gen­eration for arbitrary pockets defined by sculptured surfaces. Computer Aided 
Design 22, 5 (1990), 273-284. [27] Tiller, W. and Hanson, E. G., Offsets of two­dimensional profiles. 
IEEE Computer Graphics and Applications 4, (Sept. 1984), 36-46. [28] Yang, S. N. and Huang, M. L., A 
Study on Off­setting Operators. Technical report, Institute of Computer Science, National Tsing Hua Univer­sity, 
Taiwan, Republic of China, 1992</RefA>.  
			
