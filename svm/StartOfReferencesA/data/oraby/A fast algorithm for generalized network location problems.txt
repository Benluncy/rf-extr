
 A FAST ALGORITHM FOR GENERALIZED NETWORK LOCATION PROBLEMS Dipti S. Joshi, Sridhar Radhakrishnan, and 
Chandrasekheran Narayanan t School of Computer Science University of Oklahoma t Department of Computer 
Science University of Central Florida ABSTRACT Location models on networks typically have a set of clients 
who have demand for services or commodities, and facilities to serve the clients. Location problems have 
many applications in the area of operations re­search. Various problems arise while imposing con­straints 
on the clients and/or the facilities. One of the constraints could be to use a minimum number of re­sources 
and yet satisfy the clients need. One of the classical location problem is the domination problem. Domination 
problems on graphs are the optimization versions of the facility location problems on networks. The domination 
problem seeks to determine a mini­mum number of vertices D (client regions) such that every other vertex 
is adjacent to at least one member in D. The set D of vertices are the client locations where the facilities 
would be placed. In this paper, we consider a general domination problem on graphs which is defined below. 
The (k, r)-domination prob- Jcrn is the problem of selecting a minimum cardinality vertex set D ofagraph 
G= (V, E) such that every vertex z not in D is at a distance r or 1sss from at least k vertices in D. 
This gives the solution to the location problems where the clients need at least k facilities within 
a distance of r. if we impose the con­ dition that for each vertex in D there exist another vertex in 
D at a distance of at moat r, then the set D is a total (k, r)-dominating set, and if for each vertex 
in D there exist another vertex in D adjacent to it, then the set D is a reliable (k, r)-rfominating 
set. In this Pern&#38;iin to cwpj withoutfee Difor pmt of ti -**I k granted pmwidrdthat tbe a?#w . C 
riot -de or d-ti for direct mmmwdd mtmnt8grAtbe ACM copyri@t notice.d tbetitleof tbe prrbtidotrsodib&#38;k 
a~r, todootimb~~tmpybgmby k= mkrimofti~tifm~~ Mm. TO COPY Orbs wii or rrl reputdkh requira a fee .luor 
IpeAficpermission. ACXR3AC 9W93/fBL USA @ 1993 ACM G89791-S6$~MlNMr701.Jl~ paper, we present algorithms 
which run in O(k -N) time for solving the generalized location problems on interval graphs, given its 
interval representation in sorted order. Keywords: computers, facilities, location, graphs, networks. 
INTRODUCTION Location models on networks typically have a set of clients who have demand for services 
or commodities, and facilities to serve the clients. Location problems have many applications in the 
area of operations re­search; see [8, 12]. Various problems arise while im­posing constraints on the 
clients and/or the facilities. One of the constraints could be to use a minimum number of resources and 
yet satisfy the clients need. For example, given a network of computers, we want to place information 
which is to be shared by the computers in the network. Clearly, as the number of computers storing the 
information increases, the problems due to updatea increases. Hence it is pru­dent to keep the information 
on a minimum number of machines such that every machine has an access to the information stored. We can 
model the location problem by considering a graph G = (V, E) whose vertices represent client locations 
and edgea represent pairs of client locations that are adjacent. One of the classical location problem 
is the domination problem. Domination problems on graphs are the optimization versions of the facility 
location problems on networks. The domination problem seeks to determine a mini­mum number of vertices 
D (client regions) such that every other vertex is adj scent to at least one member in D. The set D of 
vertices are the client locations where the facilities would be placed. In this paper, we consider a 
general domination problem on graphs which is defined below. The (k, r)-domination prob­ lem is the problem 
of selecting a minimum cardinality vertex set D of a graph G = (V, E) such that every vertex z not in 
D is at a distance r or leas from at least k vertices in D. This solves the location prob­lems where 
the clients need at least k facility loca­tions within distance r. We can handle the network failure, 
by imposing different conditions on the place ment of the facilities. Following are three different condiditons 
imposed depending upon the kind of the services expected in case of a network failure. In case of failure 
of a facility location a, a should be able to find another facility location b within distance r from 
itself so that it can get the fa­cility from b and supply to its clients. The gen­eral (k, r)-domination 
problem will require each member of D to have another member of D within distance r from it to incorporate 
this con­straint. The dominating set so constructed will be called total (k, t-)-dominating set. . In 
case of failure of a facility location a, a should be able to find another facility location b adjacent 
to a so that it can get the facility from 6 and sup ply to its clients. The general (k, r)-domination 
problem will require each member of D to have another member of D adjacent to it to incorp­rate this 
constraint. The dominating set so con­structed will be called reliable (k, r)-dominating set. . In case 
of failure of a facility location a, a should be able to find another facility location b adja­cent to 
it or if the adjacent facility location is also failed then from a facility location which can be reached 
traveling only thorough the facility lo­cations. The general (k, r)-domination problem will require the 
graph induced by D to be con­nected to incorporate this constraint. The domi­nating set so constructed 
will be called connected (k, r)-dominating set. Due to space limitations we have not included the algorithm 
to compute connected (k, r)-dominating set in this paper.  Let Z be a family of non-empty sets. A graph 
G = (V, E) is called an intersection graph with a model 1 if there is an one-t~one correspondence between 
1 and V and two vertices are adjacent if their cor­responding sets have non-empty intersection. If 1 
is a set of intervala on the real line, then G is an in­terval graph with an interval model I. In his 
book [7], Golumbic said that interval graphs are amongst the most useful mathematical structures for 
modeling real-world problems, and gave many applications of interval graphs in archeology, biology, job 
schedul­ing, and storage and information retrieval. In this paper, we present O(k.JV) algorithm to mlve 
various (k, r)-domination problems on interval grapha given its interval representation in sorted order. 
Given an interval graph the interval representation can be ob­tained in linear time; see [7]. Our algorithms 
have a linear-time complexity for the value of r == 1. In recent time there has been a growing interest 
in the development of efficient sequential algorithms for domination problems on graphs. An entire issue 
was dedicated to domination problems on graphs contain­ing a wealth of results and references; see [9]. 
It is known that the dominating set problem on arbitrary graphs is NP-complete [6]. The k-neighbor domi­nation 
problem was first introduced in [5]. Hwang and Chang [1OJpresented a linear-time sequential al­gorithm 
for (k, 1)-dominating set problem on block graphs. Algorithms exists for solving several (1, l)­dominating 
set problems on interval graphs [1-3]. As mentioned earlier, the problem of determining the (k, r) dominating 
set on arbitrary grapha is NP­complete. Solving these problems on special graphs are of great importance 
due to the following motivat­ing factors: . Solution to a problem on special classes of grapha might 
shed new light on the solution for the problem on general graphs. Also, solutions to problems on special 
grapha can be used to ap­proximate solutions to the problems on gen­eral graphs. Johnson [6] suggests 
restricting the graph classes as a means of coping with in­tractability. Many real-world problems can 
be modeled as special graphs (such as problems in DNA se­quencing) and hence simpler solutions are needed 
compared to the onea on general graphs. . Oftentimes, problems on special graphs are stud­ied for their 
intrinsic combinato~ial-interest. In this paper, we are interested in computing vari­ous dominating sets 
discussed previously for the in­terval graphs. Interval grapha find many applications in scheduling, 
biology, archeology, information stor­age and retrieval [71. The well known two proeea­sor scheduling 
problem correaponda to the matching problem on the interval graphs. The following prob­lem in DNA sequencing 
[11] is related to the domin­tion problem on a set of intervals. A DNA molecule is represented as a 
sequence of char­acters chosen from a restricted alphabet. A clone is a contiguous portion of the DNA 
molecule. Clones are chosen or isolated (detected) to study various proper­ ties of the DNA molecule. 
Two clones Cl and C2 are said tobea representative of each other if they share some portion of the DNA 
molecule. Now, given a set of clones (isolated by researchers), it would be useful to construct a cofony 
of clones which are representa­tives of the set of clones. That is, each clone should have a representative 
member in the colony. In [11] it is said that the colony is the true representative of the set of clones 
and that properties that are de tected on the members of the colony on certain tests holds for the clones 
they be desirable to choose a mum for reducing testing clone by an interval, then for the above problem 
is represent. Hence, it would colony whose size is mini­costs. If we represent each the solution that 
is sought the minimum dominating set. By imposing several constraints on the clones in the colony various 
problems which seeks solutions to various domination problems can be generated. This paper is organized 
as follows. Section 2 contains definitions and terminology. The algorithm for (k, r)­dominating set problem 
is given in section 3. We will show how the algorithm for (k, r)-dominating set can be modified to compute 
the total and reliable (k, r)­dominating set in sections 4 and 5, respectively. DEFINITIONS AND TERMINOLOGY 
In this section we introduce some basic definitions and relevant terminology used in this paper. ,1-, 
}5::7: :10,  Definition 1 (fnterua/ Craphs): An interval set I is a set of intervals al, az, .... a~ 
where ai is an interval defined by a line segment with left endpoint Si and right endpoint Ei. A graph 
G = (V, E) is the interval graph of 1, if there is an on~to-one correspondence between Z and V, and (ai, 
ai) c E iff the intervals corresponding to ai and aj overlap. . Figure 1 shows an interval set and its 
graph represen­tation. Definition 2 (First, Right, Nezt, Last, Rmosi): First(I) for an interval set Z 
is defined as the interval which ends first, i.e. First(l) = j, Ej = min {Em, am E 1}. Similarly, Last(Z) 
is defined as the interval which ends the last, i.e. Last(l) = j, Ej = max {Em, am E 1}. First(Z) and 
Last(l) is set to zero if Z is empty. Rmost(D) is defined as Last(D). Right(i) is the rightmost end­ing 
interval which contains the right end point of i and IVezt(i) is the leftmost ending interval beginning 
after the right endpoint of i, i.e.,  j if Ej = max{E~&#38; < Ei ~ Em} night(i) = ~ otherwise. { (1) 
j if Ej = min{E~[Ei < .$m} Nezt(i) = ~ (2) otherwise. {   IJ41J41. .. ,. I I 17   E-&#38;---a-l 
* 7 3 Figure 1-A ~t of Imcrvsls and its Intcrvsl Graph al 1 2 34 567 89 1011 1213 14 15 16 17 RkJht(ai) 
34 55 6 8 8 10 11 1112 1414151717t) Next(al) 4 5 6 6 7 9 9 11121213 15 1516() o 0 Fusr(I) = I and Lx@)= 
17 Figure 2-The value of functions Fret, Righ~ Next and Last for the se-t of intervals in Figure 1. 
 The functions First(I), Last(I), and for all i, the func­tions llighi~i), and Nezt{i) can be easily 
computed in linear-time given a sorted set of intervals. In Figure 2 we present a table which givea the 
values for the functions Right, Next, Last, and First for the intervals in Figure 1. Definition 3 (Right 
(i), Right-7kce): The Right (i) is defined as folIows: Temp := i; For j :=1 Tor Do Temp := Right(Temp); 
Right (i) := Temp; We define the Right-fie of a set of intervals I as follows: It is a tree whose nodes 
correspond to the intervals in 1. The root of the tree corresponds to the interval Last (1). The parent 
of each node i in the tree is Right(i). (We use the terms node and intervaI interchangeably). We now 
sketch how to compute Right (i) for all in­tervals in O(N) time. Note that from the Definition 3, Right(i) 
for an interval i is the parent of the node corresponding to i in the Righi-fie. Thus, Rightr (i) for 
an interval i is the rth ancestor of the node cor­responding to i in the Right-me. Dietz [4] presents 
an algorithm for computing the rth (for an arbitrary integer r) ancestor for any node in a tree in constant 
time after O(N) time preprocessing. Hence we have the following result. -Lemma 1: llightr (i) computation 
for all intervals i in 1 can be done in O(N) time. _ THE (k, r)-DOMINATING SET PROBLEM ALGORITHM AND 
COMPLEXITY An algorithm to solve the (1, 1)-domination problem using functions Right, Next, and First 
is given in [1]. We will now present an algorithm for computing the (1, r)-dominating set. 1. Initially, 
the dominating set D is empty and First(l) is the candidate interval. 2. If Right (candidate) = nil 
Then D:=DU candidate Else D:= DU Right (candidate)  3. i := Rightr-l (Rightr(candidate)) and candidate 
:= Next(i) 4. If candidate # nil, Them Goto Step 2. Using the proofs given for (1, I)-dominating set 
prob­lem in [1] and in [2] we can show that the above steps computes a minimum cardklity dominating set 
D for the (1, r)-dominating set problem. Also, the above steps can be executed in linear time. Before 
we proceed to show how the (k, r)-dominating set problem on an interval graph can be solved, we need 
the following definitions. An interval i is said to be k-dominated (or simply dominated) if there are 
at least k intervals in D which dominate i. An inter­val iis unsatisfiable if there are not enough intervals 
ending after i ends and which can be placed in D to dominate it. The k-value of an interval i (denoted 
by k-value(i)) is k minus the number of intervals in D within distance r of i. We now sketch the ideas 
of the algorithm briefly. At any iteration of the algorithm, the minimum (k, r)­dominating set D for 
the set of all intervals (call it Z) which ends before the end of an interval c is already computed. 
The interval c is called the candidate in­terval. To begin with, c = First(I) and D is empty. A set of 
intervals is selected to dominate c. The se lection process proceeds as follows. First, a setP of intervals 
is selected to dominate c such that IPl = k-value(c) and the intervals in P dominate the maxi­ mum number 
of intervals that starts after c starts. In other words, the intervals in P are within a distance r from 
c and extends the moat to the right. If such intervals are not available, then c is wwaiisjiable and 
c is placed in D. Otherwise, c is satisfiable and we proceed with the following computations. Start pr~ 
cessing from left those intervals which overlap with c until either c is dominated or an interval in 
P is reached. For each interval i encountered, if i is sati~ fiable, then process the next interval, 
else place i in the minimum dominating set and update the k-value of the intervals within a distance 
r from it. Dur­ing the process of adding unsatisfiable intervals if c is satisfied, then choose the next 
candidate (an interval with k-value >0 and which begins the first among aIl such intervals), and continue 
the process. If c is not satisfied and an interval in P is reached, then choose from P, k-value(c) number 
of intervals which extend the most to the right. This process is continued until the entire interval 
set 1 is (k, r)-dominated. We now state the following lemmas which are con­structive in nature for building 
the minimum (k, r)­dominating set D. . Lemma 2: All intervals which start after interval i starts and 
are not in D have a k-value greater than or equal to k-value (i). . Let R be the set of intervals within 
distance r from the candidate c. Let Zi denote the set of all intervals which end before interval i ends. 
Let D be a minimum (k, r)-dominating set for Zc. Let PCD beaset of intervals with cardinality k-value(c) 
that extends the most to the right among all intervals within distance r ofcand not in D. In other words, 
let Pc CR\D _ such that IPCDI = k-value(c) and for all i E PCD, for allj 6 R\ {DU Pc~}, Ei > Ej. The 
existence of set PCD with respect to the candidate c implies that c is satisfiable. Note that the superscript 
D in P= D indicates the current members of the dominating set and that the k-value(c) = k number of intervals 
in D which are within a distance r from c. Lemma 3: Ifforalli c {R \JD U pcD}}, k­value(i) = k-value(c) 
then D U Pt is a minimum (k, r)-dominating set for {D U ZcU R U c). ~ Let q be the first ending unsatisfiable 
interval in {R\ {D U P.D}}. That is, Eq = min {EjIj E R\ {D U PCD}, k-value(~) > k-value(c), and PjD 
does not exist, where D = D U PCD}. Let S ~ R such that for all i E S, k-value(i) = k-value(c). Lemma 
4: {DU Pc~ Uq} \ First(PCD) is a minimum (k, r)-dominating set for D UZ, USU {c,q}U {Pc~ \ First(PCD)}. 
m Lemma 5: I: for all p E {R\ {D U P. D}} such that -k-value(p) z k-value(c) and PPD exists then, DUP~D 
is a minimum (k, r)-dominating set for D U Zc U S U {c} UP.D. m Lemma 6: If PCD does not exist then D 
U c is the minimum (k, r)-dominating set for {D UZ. Uc}. _ The following theorem is based on the algorithm 
KR-Domination and its implementation which is given in [11]. Theorem 7: The aigorithm KR-Domination cor­rectly 
computes the minimum (k, r)-dominating set for a given set of N intervals in sorted order of their end 
points in O(kN) time using linear space. Proof As our algorithm follows Lemmas 2-6 it is clear that it 
correctly computes minimum (k, r)­dominating set. Next we show that the algorithm KR-Domination takes 
O(kiV) time. In order to show this we will show that each interval is processed at most O(k) times. Let 
j be an interval. 705  Algorithm KR-Domination; Begin 1. Compute Right(i) for all i C 1; 2. Set k-value(i) 
:= k for all i C Z; 3. I := z; 4. While (f # 0) Do Begin 5. candidate c := First(l ); 6. If there 
are not enough intervals to (k, r)-dominate c Then  Begin Place c in D; Update the k-value of intervals 
within distance r from c, i.e set k-value(c) = O and decrement the k-value by one for those intervals 
which are within distance r from c; End 7. Else Begin Process from left to right all intervals i within 
distance r from c (i.e those intervals which ends after i ends and within distance r) in steps 8-10; 
 8. If interval i does not have enough intervals on its right to (k, r) dominate it Then Begin  9. 
Place i in D; Update the k-value of intervals within distance r from i; 10. If c is (k, r)-dominated 
Then Go To step 12; End  11. If k-value(c) >0 Then  Begin Select k-value(c) intervals which extends 
the farthest to the right of c and are within distance r from c and not in D; Update k-value of intervals 
within distance r from these selected intervals; End End  12. Delete those intervals from Z whose k-value 
is O; Endwhile End of Algorithm KR-Domination. (i) Ifj is First(I) then it is processed at most once. 
 (ii) If j is an interval between the candidate interval c and Right (c) then, if all the intervals i 
between c and Rightr (c) have k-value(i) = k-value(c), then the interval j is  processed k-value(c) 
times in the procedure Up­date. Otherwise, let k-value(j) > k-value(c) (as k-value(j) cannot be less 
then k-value(c) from Lemma 1) and there exists an interval p between the interval c and the interval 
j such that k­value(p) > k-value(c). In that case interval j is processed once during the calculation 
of Cl and C z for interval p. If interval p is not sat­isfiable then k-value(j) is decremented by one 
(processed once) since, p will be placed in D and the distance(p, j) ~ r. If interval p is sat­isfiable 
then after c is satisfied the k-value(p) is decremented by k-value(c). In later step when p becomes candidate 
the k-value(j) will be decre­mented by (processed) k-value(p) in procedure Update. Once the k-value(j) 
becomes zero (i.e. it is (k, r) dominated) it is deleted from Z , hence, it is not processed more than 
k times in procedure Up­date. Thus, interval j is processed at the most O(k) times during entire execution 
of the algorithm KR-Domination. So, the algorithm takes O(kN) time. From the implementation it can be 
easily seen that the algorithm requires linear space. . In Figure 3 we show a set of intervak and the 
(3,2)-dominating set computed by the algorithm KR-Domination. THE TOTAL (k, r)-DOMINATING SET PROBLEM- 
A minimum total k-neighbor r-dominating set re­ferred as the total (k, r)-dominating set for a graph 
is a minimum cardinality vertex set D of the graph such that every vertex z not in D is at a distance 
r or less from at least k vertices in D and every vertex y in D is at a distance r or less from at least 
one other vertex in D. That is, a total (k, r)-dominating set of a graph is a (k, r)-dominating set of 
the graph such that, each dominating member in D has another member in D dominating it. 1C* - In the 
case of (k, r)-domination problem we do not find another member within distance r to dominate a member 
of D. Hence, while updating the intervals within distance r of the dominating member being added, we 
deleted this member from the graph by setting its k-value to zero. But, to compute the &#38; tal (k, 
r)-dominating set, the k-value of an interval j added to the dominating set is set to 1, if j is the 
only interval added to the dominating setto domi­nate the candidate interval, and the k-value(j) = k. 
Care is taken when the interval to be added to the dominating set is Last(Z). Let c, S, Zi, R be as defined 
in section 3. Let MTDS be a minimum total (k, r)-dominating set. Let D be the MTDS for Zc. We have the 
following lemma for the total (1, r)-dominating set problem. Lemma 8: Let c be the candidate interval 
and T be an interval at a distance z (Z < r) from c and far­thest from c. Let y be the dom~nated interval 
which extends the most. (a) Ifz < r then, (i) If D# O then DU{y} is a MTDS for 1. (ii) Otherwise, any 
two arbitrary intervals in 1 forms a MTDS for Z. Clearly, in this case 7 = Lsst(l).  (b) Ifz = r then 
we have the following, (i) If T= Last(Z), then if the distance between y and T is less than or equal 
to r, then DU{y} is a MTDS for Z, otherwise DU {T} U {T } is a MTDS for 1, where T is an interval which 
overlaps T and not in D. (ii) If T# Last(l), then D U {T} U {T } is a MTDS for D U Z{T,,], where ~ is 
an in­terval within distance r of T such that it is the first ending unsatisfiable interval among all 
such intervals if any exist, otherwise, is the last ending interval among all such in­tervals. m   
lo*, Figure 3-The (3, 2)dominating set computed for the above intervals by the algorithm KR-Domination 
For the total (1, r)-dominating set problem the algo­rithm KR-Domination can be modified based on the 
above Lemma. We have the following lemma for the total (k, r)-dominating set problem with k >1. Lemma 
9: Let Z emp be the set of intervals to be added to D in order to dominate the candidate c de termined 
by the algorithm KR-Domination, in steps 6-11. (a) If ]Z empl > 1, then the members of Temp are within 
distance r from one another. So, D u Temp is a MTDS forZe U{c] U S U D U Temp (b) If lTempl = 1 and 
k-value(Temp) < k, then there exists a y E D such that distance between v and Temp is less than or equal 
to r. If Temp = {c} then DU7 emp is a MTDS for 2. U {c} u D, otherwise, D U Temp is a MTDS for D UZC 
U {c} U S U Temp. (c) If ITempj = 1 and k-value(Temp) = k, then for all yc D, the distance between y 
and Temp is  greater than r. (i) If Temp = Last(I), then D U Temp U {T } is a MTDS for 1, where TI iaan 
interval overlapping Temp and not in D, (ii) Otherwise, Temp is added to D and the k-value(Temp) is 
setto one and the next candidate ia determined as in Lemma 8 and Lemma 9-(a),(b),(c)-(i). .  For the 
case-of total (k, r)-dominatin~ set problem with k > 1, the update procedure giv&#38; in-[l 1] for the 
KR-Domination problem can be easily modified. The new UpdateXor.total procedure to be used along with 
the implementation of the algorithm KR-Domination is presented in [llJ. Theorem 10: The algorithm KmDomination 
cor­rectly computes the total (k, r)-dominating set using the procedure UpdateXor-total for a setofN 
in­tervals given in sorted order of their end points in O(k.lV) time using linear space. R-oot Can be 
easily shown using Lemma 8, Lemma 9 and the proof in Theorem 7. . s In Figure 4 we show a set of intervals 
and the total (3, 2)-dominating set computed by the algorithm KR-Domination using the Update_for-total 
procedure. THE RELIABLE (k, r)-DOMINATING SET PROBLEM A minimum reliable k-neighbor r-dominating set 
re­ ferred as a reliable (k, r)-dominating set for a graph is a minimum cardinality vertex set D of the 
graph such that every vertex z not in D is at a distance r or less from at least k vertices in D and 
every ver­ tex yin D is adjacent to at least one vertex in D. That is, a reliable (k, r)-dominating set 
of a graph is a (k, r)-dominating set of the graph such that each dominating member in D has another 
member in D adjacent to it. Note that a reliable (k, 1)-dominating set is also a total (k, 1)-dominating 
set and vice-versa. INFORMAL DESCRIPTION OF AN ALGO- RITHM TO COMPUTE A RELIABLE (k, r)- DOMINATING 
SET The following is the informal description of an al­ gorithm for determining a reliable (k, r)-dominating 
set. This algorithm is similar to the algorithm KR-Domination and whenever an interval is added to the 
dominating set and it is not adjacent to any member in D an interval which overlaps with it is also added 
to the dominating set. Call the interval which is to be added to the dominating set as dom interval. 
All intervals which overlap with the dom interval are ex­amined. If there is an interval u which overlaps 
with the dom interval and cannot be satisfied then the in­terval u is added to the dominating set. If 
all the intervals which overlap with the dom interval can be sati;fied then the interval which overlaps 
with dom and extends the moat to the right is selected to be in the dominating set. As in the case of 
total (k, r)­dominating set problem, we have to take care of the FI~ 4-The Total (3, 2)dominating set 
computed for the above intervals Figtuw 5 -The Reliable (3, 2)-dominating set ~mputed for the above intexvals. 
3. special case when the dom interval is Last(l). Due to space limitation we are not presenting the detailed 
al­gorithm to compute a reliable (k, r)-dominatingset of an interval graph. The detailed algorithm is 
given in [11]. The complexity of the reliable (k, r)-domination 4. algorithm is also O(k. N). In Figure 
5 we show a set of intervals and the reliable (3, 2)-dominating set computed using an algorithm similar 
to the algorithm KR-Reliable-Domination. 5. Theorem 11: For a value of r = 1, all our algorithms have 
a time-complexity of O(min(klV, Af)), where M is the total number of interval overlaps (or edges in the 
interval graph), given the interval representation in sorted order of their end points. Proojl From Theorem 
7 and the algorithms presented 6. and it is clear that an interval is processed at most k times. That 
is, when an interval i is placed in the dominating set its k-value is set to zero or if an in­ terval 
overlapping with i is placed in the dominating 7. set its k-value is decremented by one. Also, when the 
k-value of an interval becomes zero, the interval is never processed again. S~nce the number of neigh­bors 
(N[il) of each interval i is equal to the number 8. of intervals overlapping with it (for r= 1), its 
k-value can be decremented by at most equal to the minimum (N[iJ, k). Hence the theorem. = 9. REFERENCES 
<RefA>10. 1. Bertossi, A.A. and Bonuccelli, M.A., Some Par­allel Algorithms on Interval Graphs, Discmie Applied 
Mathematics, vol. 16, pp. 101-111, 1987. 11. 2. Booth, K-S. and Johnson, J. H., Dominating Sets in Chordal 
Graphs, SIAAU J. Comput., vol. 11, pp. 191-199, 1982. 12. . Chang, G.J., Labeling Algorithms For Domi­nating 
Problems in Sun-Free Chordal Graphs, Discneie Applied Mathematics, vol. 22, pp. 21-34, 1988/89. Dietz, 
P. F., Finding Level-Ancestors in Dy­ namic llees, Xn Proceedings O! the ~nd Workshop on Algorithms and 
Data Structures (WADS 91), vol. 519, pp. 32-40, Springer-Verlag, August 1991. Fink, J.F. and Jacobson, 
M. S., On n­ nomination, n-Independence and Forbidden Subgraphs, in Gmph Theory with Applications to 
Algorithms and Compuier Science, Proceed­ings of the 5th lntermational Conference, pp. 301­311, Wiley, 
New York, 1984. Garey, M.R. and Johnson, D.S., Computers and Intractability: A Guide to the Theory of 
NP-Completeness, W.H. fieman and Company, San Fhn8isco, 1979.. Golumbic, M.C., Algorithmic Gmph Theory 
and Perfect Gmphs, Academic Press, New York, 1980. Handler, G.Y. and Mirchandani, P. B., Location on 
Neiworks Theory and Algorithms, MIT Press, 1979. Hedetniemi, S.T. and Laskar, R.C., Special Volume: Topics 
on Domination, Disctvte Math­ ematics, vol. 86, no. 1-3, December, 1990. .Hwang, Shiow-Fen and Chang, 
G.J., The k-Neighbor Domination Problem, European lour­nal of Opemtions Reseamh, vol. 52, pp. 373-377, 
1991. Joshi, IXpti S., Radhakrishnan, Sridhar and Narayanan, Chandrasekheran, The k-Neighbor r-Domination 
Problem on Interval Graphs, Technical Report, School of I%ECS, fJniversiiy of Oklahoma, OK-79019, December 
1991. Tanzel, B.C., lhncis, R. L., and Lowe, J.J., L­cation on Networks: A Survey. Parta 1, II, hfan­ 
agement Science, vol. 29, pp. 482-511, 1983.  </RefA>
			
