
 ALGORITHMS FOR EDGE COLORING BIPARTITE GRAPHS Harold N. Gabow % Computer Science Department University 
of Colorado Boulder, Colorado 80309 Abstract A minimum edge coloring of a bipartite graph is a partition 
of the edges into A matchings, where A is the maximum degree in the graph. Coloring algorithms are presented 
that use time O(min(IE I A log n, IEI/n log n, n21og A)) and space O(nA). This compares favorably to 
the previous O(IEl~n log A) time bound. The coloring algorithms also find maximum matchings on regular 
(or semi- regular) bipartite graphs. The time bounds com- pare favorably to the O(IEl/nn) matching algorithm, 
 /nn ~ A ~ ~n log n. except when log n 1. Introduction We investigate the problem of finding a mini- 
mum edge coloring on a bipartite graph (or multi- graph). Here an (edge) coloring is an assignment of 
a color to each edge of the graph so the colors occurring at any given vertex are distinct; equiv- alently, 
each color forms a matching. A minimum coloring uses the fewest number of distinct colors possible. 
Many scheduling problems can be formulated in terms of edge coloring. One example is open shop scheduling 
with preemptions [GS]. Another is the class-teacher timetable problem [Go]. Here the bi- partite multigraph 
contains vertices representing classes and teachers; there is an edge joining a class and a teacher for 
each required meeting of the two. A coloring gives a schedule, i.e., all meetings of a given color occur 
during the same time slot. A minimum coloring gives a schedule with the fewest number of time slots. 
In practice t This work was supported in part by National Sci- ence Foundation Grant DCR75-09972. 
*%This work was done while O. Kariv was with the Dept. of Computer Science of SUNY at Albany, N.Y., 
 and his work was supported in part by that depart- ment. Oded Kariv %t Department of Mathematics Drexel 
University Philadelphia, Pennsylvania 19104 there are additional constraints that make the prob- lem 
quite difficult. For instance, if some teachers are available only during a restricted set of hours, 
the timetable problem is NP-complete [E]. In contrast, the basic problem of finding a minimum edge coloring 
can be solved efficiently. Let n, IEl,and A represent the number of vertices (1) , the number of edges, 
and the maximum degree of any vertex, respectively. The KSnig-Hall Theorem [B] leads to an algorithm 
that constructs a minimum coloring by finding A matchings; the run time is O(IEIA/nn). A second approach 
derived from classic graph theory uses augmenting paths; the time is O(IEln) [O]. A third algorithm, 
based on divide- and-conquer, is superior to these two; it uses time O(IEl/nn log A) [Ga]. This paper 
presents several improved coloring algorithms. The first algorithm uses augmenting paths, organized in 
stages to pre- vent duplication of effort; it uses O(IEIAlog n) time. The second algorithm applies the 
first to the divide-and-conquer strategy of [Ga]; it uses O(IEl/nn log n) time. The third algorithm elabor- 
ates on the divide-and-conquer approach, and uses O((En log A)/A), or O(n 2 log A), time. Figure I compares 
these asymptotic run times (for simpli- city, we assume all constant coefficients are one). It shows 
that collectively the algorithms are strictly better than [Ga], and each of our three algorithms is best 
over some interval. The third algorithm has broadest range; it also gives the best estimate in terms 
of n alone, O(n 2 log n). Any coloring algorithm finds a maximum cardi- nality matching on a regular 
(or semi-regular) graph. Our algorithms improve the general o(Iml~nn) matching algorithm [HK], on (semi-)regular 
graphs, except when'~ogFn n ~ A ~ ~n log n. 184 - I f I ._.-~ ~-- J EJ/nn logA f J time axis / / f // 
n JEJn logA A I .... I I ~n log n A n axis Fig. 1 Asymptotic times of coloring algorithms 2. Known 
Methods This Section introduces terminology and re- views previous coloring algorithms as a basis for 
the algorithms in Sections 3-4. Throughout this paper, G denotes a given bi- partite graph, and A denotes 
its maximum degree. (More generally, G may be a multigraph, containing duplicate edges but no self-loops,) 
A coloring of G that uses exactly k colors is a k-coloring. Recall these basic facts from graph theory 
[B]. Fact i: G has a matching that covers all vertices of degree A. Fact 2: A minimum coloring of G is 
a A-coloring. Fact i follows from the Konig-Hall Theorem. It justifies line i in the following procedure, 
that finds one color in a A-coloring. ~ one-color; i. find a matching M that covers all vertices of 
maximum degree; 2. assign a new color to the edges of M;  3. remove the edges of M from the graph; 
  To find a A-coloring, it suffices to call one-color A times. This proves Fact 2, and gives the first 
coloring algorithm. In procedure one-color, line 1 can be imple- mented in time O(JEI/nn). The approach 
is to find two matchings MI,M2: if G has vertex sets VI,V 2, (so each edge joins V 1 to V 2), matching 
M.z covers all maximum degree vertices in V i. These match- ings are combined to give M, the desired 
matching, using a construction of Mendelsohn and Dulmage [L]. The time is dominated by finding each 
M i, 0(JEJ/nn) [HK]. With this implementation of one-color, a minimum edge coloring is found in time 
0(JEI/nnA). Gonzalez and Sahni [GS] use a similar ap- proach to color bipartite multigraphs with large 
edge multiplicities. The time is 0(JEJ 2) or better, where JEJ is the number of distinct edges. A second 
algorithm is based on augmenting paths, resembling algorithms for network flows and matchings [L]. We 
begin with some definitions. Suppose a subset of the edges of G are k-colored, for some k ~ A. A color 
e is missing at vertex x if no edge colored ~ is incident to x. An un- colored edge e has type ~B if 
color e is missing at one end of e and color B is missing at the other end. (Note an edge may have more 
than one type.) Ifeistype~, an ~B path (from e)is a path that starts at one end of e, has edges that 
alter- nate between colors e and B, and has maximal length. (Note there are two ~ paths from e, one starting 
with an ~ edge, the other with a B edge.) An ~B path starts at a vertex of e, but it never -185 - ends 
at a vertex of e. (If it did, G would contain an odd cycle). This justifies the following proce- dure 
to color e: augment (e); i. let e be of type ~8; 2. let P be an e8 path from e comment if = B, let 
P be empty;  3. interchange colors ~ and 8 on the edges of P comment now a color y, y = ~ or 8, is missing 
at both ends of e;  4. color edge e comment use color y; end; (Note the comment in line 3 follows since 
P does not end at e.)  With the appropriate data structure, augment works in time O(n). For example, 
we can maintain a vertex-color incidence matrix: for vertex v and color ~, this matrix specifies the 
edge, if any, incident to v with color ~. Then line 1 is O(A), and line 2 is O(n); thus augment is O(n). 
Starting with all edges uncolored, we can use augment to color each edge e. This gives a coloring algorithm 
using time O(IEIn), and space O(nA). A third approach [Ga] uses divide-and-conquer. Recall an euler 
partition is a partition of the edges of G into open and closed paths, so that each vertex of odd (even) 
degree is the end of exactly one (zero) open path. Any graph has an euler partition, which can be found 
in time O(n+IE I) [B,Ga]. The partition can be used to divide G into two edge-disjoint subgraphs, G 1 
and G2: traverse each path of the partition, placing edges alternately (2) in G 1 and G 2. It is easy 
to see G 1 ^ and 02 have maximum degree either ~ or I~ I. This suggests the following coloring algorithm 
(Note the algorithm is incomplete, since it does not always produce a minimum coloring; insertions will 
be made at labels A,B,C to remedy this). procedure euler-color (G); I. let A be the maximum degree 
in G; 2. if A = 1 then color all edges in G, using ~wv a new color else A: 3. divide G into edge-disjoint 
subgraphs GI, G2, each with maximum degree at most [~] (use an euler partition); 4. euler-color(Gl) 
; C: 5. euler-color(G2) ; B: end e~nd; Before discussing how to complete this algo- rithm, we define 
a useful way to represent a com- putation of euler-color. The partition tree T for G is a binary tree. 
Its nodes represent subgraphs passed to euler-color as arguments. The root node represents G. A node 
representing a subgraph G' with maximum degree at least two has two sons in T; they represent subgraphs 
G i and G~ of line 3. A node representing a subgraph G' with maximum degree one is a leaf in T. Consider 
a node on level i (3) of the partition tree representing subgraph Gi, with edges E i and maximum degree 
A.. It is easy to see 1 Further, there are at most 2 i nodes on level i; the edges of G are partitioned 
among the nodes on level i, and T has at most FlogA~ +1 (4) levels. Now we discuss how to complete euler-color. 
First suppose the original graph G has maximum de- gree a power of two, i.e., A = 2 k. Then euler- color 
finds the desired A-coloring. This is true because all subgraphs in the partition tree (except leaves) 
have A even. Thus in line 3 both G 1 and G 2 have maximum degree A/2; the A/2-colorings of GI, G 2 give 
a A-coloring of G. It is easy to see the time required is O([EllogA), i.e., O(IE I) on each level of 
the partition tree. The difficulty arises when A is odd. In this case subgraphs G 1 and G of line 3 
can both have degrees as large as V~ ~. If we r~] -color each subgraph, we get a (A+l)-coloring of G. 
something must be done to eliminate the extra color. In [Ga], we eliminate this color before div- iding 
the graph. Thus, at label A, if A is odd, procedure one-color (given above) is called. It assigns a new 
color to a matching that covers all maximum degree vertices. Then line 3 only 186 - partitions the 
remaining edges of G, which form a graph with A even. So the algorithm finds a mini- mum coloring on 
any graph. The time is O(IE I ~n logA), since one-color may be called at each node of the partition tree, 
using time O(IEI~n) on each level. Now we present our algorithms. Section 3 gives two algorithms that 
eliminate the extra color after dividing and coloring the graph (at label B). Section 4 gives an algorithm 
that repartitions the graph (at label C), and also eliminates the extra color at B. 3. Recoloring Methods 
 This section presents reeoloring methods that, used in procedure euler-color of Section 2, give edge 
coloring algorithms. The best times for these algorithms areO( IEIA~ n) and o(Iml/~n). A recolorin$ 
method solves this problem: Given is a bipartite graph G, with maximum degree A, and a (A+l)-coloring 
of G. The problem is to derive a A-coloring of G. To do this, the recoloring method chooses a color, 
whose edge set is denoted by M; these edges are uncolored, and then recolored with the remaining A colors. 
If R is a recoloring method, we get a minimum edge coloring algorithm by inserting in procedure euler-color 
at label B the statement B: if G is (A+l)-colored then R; (Note R is never executed when A is even). 
 The first method uses augmenting paths to reeolor edges one-by-one. procedure sequential-reeolor ; 
 beg~e~in i. let the color with the fewest edges have edge set M; 2. for each edge eeM do ausment (e) 
 enid; Lemma I: Procedure sequential-recolor is a correct recoloring method that uses time O(IEIn/A) 
and space O(nA). Proof: The method is obviously correct. For the resource bounds, note auBment is 
called at most LIE, / (A+I)J times. [] Procedure euler-color, with sequential-re- color, gives an edge 
coloring algorithm that runs in time O(IEIn). To show this, note the time spent recoloring all subgraphs 
on level i of the partition tree is (by (1)-(2)) 2i0([[E[/2i]n) = 0(2 i EIn). [ A/2 i ~ A Thus the 
time in levels 0 through k is k (3) ~ 0(2 i IEIn) = 0(2k;Eln). i=O A A Taking k = log A shows the total 
recoloring time is 0(IEln), which dominates the run time. This result does not improve known methods. 
However (3) is a good bound if k<<log A. We use this fact below. A source of inefficiency in sequential-recobr 
is that two ~8 paths can overlap. Thus an edge can change colors many times. Now we eliminate this inefficiency, 
by coloring all edges of one type, ~8, together. To do this, define the subgraph H Bcontaining all edges 
involved in e8 augments: More precisely, edge e is in H 8 when either (i) e is an uncolored ~B edge, 
or  (ii) e is on an ~ path starting at an  uncolored e8 edge. H 8 is a disjoint union of paths and 
cycles since each vertex has degree at most two. This leads to the following algorithm for coloring all 
~8 edges. procedure TR(e,B);  ~sin i. form subgraph H 8 ; 2. four each connected component C of H 
8 d~o  be_rod 3. let el,...,ekbe the sequence of ~8edges in C; let Pi be the e8 path joining eito 
 ei+l,l~i<k; let Pk be the ~8 path starting at ek' Pk ~ Pk-l; 4. for i :=i st~ 2 ~ k do  be~Am  5. 
interchange colors in Pi;  6. color eiand ei+l(if ei+ 1 exists); end end ended;  187 - le2 e I 
8 (a) (b)  Fig. 2. Recoloring a cycle e I  8 S " CL C¢ f Y e 2 Y (b) f (a) Y y Y y e 3  
Fig. 3 Recoloring paths In Figure 2, component C is a cycle. In Fig- path joining the ends of the ~8 
edge e k. This ure 2(a), edges e I and e 2 are uncolored. Figure 2(b) gives an odd length cycle in G, 
the desired con- shows the recolored cycle. In Figure 3(a), C is a tradiction. path, containing edges 
el,e2,e 3. Note f is an un- For the time bound, first note the time is colored edge, but not type =8. 
Figure 3(b) shows O(IE BI) , where Ee8 is the edge set of H 8. This the recolored graph.  is clear 
for lines 2-6. For line i, we shall see In the time estimates in Lemmas 2-3 below, we (in Lemma 3) that 
T_RR is called with a list of type use this notation: a8 edges available to it. Using this list and 
the c = the number of edges colored ~; vertex-color incidence matrix, H 8 is formed in u 8 = the number 
of (uncolored) edges in M of O(IE 8l time. type eS. Note IE B I = 0(Cs+Ues) , since the number of Lemma 
2: TR(~,8) colors all ~8 edges in M in time e edges in H 8 is at most Cs+U 8. The time bound O(cs+u 
8) and space O(nA). now follows. The space is dominated by the ver- Proof: First we prove correctness. 
T__RRIs clearly tex-color incidence matrix. D correct if C is a path or a cycle with an even Note T_RR 
can he appreciably better than se-- number of =8 edges. Now we show C is not a cycle quential-recolor. 
In Figure 3, suppose sequen- with an odd number of ~8 edges, by contradiction. tial-recolor colors edges 
e3, e2, el, in that Suppose k tin llne 3) is odd. After lines  order, always choosing an augmenting 
path that 5-6 are executed for i = 1,3,...,k-2, the edges in goes clockwise. The edges between e 2 
and e 3 are the sequence Pk' el' Pl'""ek-i ' Pk-i form an e8 -188 - traversed twice, and those between 
e 3 and f are Z ~]M[ Thus the total time in lines 4-5 for a  B uaB  traversed three times. But in T 
R, all edges are traversed once. Extending this example with edges e i increases the disparity between 
the algorithms. We use TR to get a second recoloring method. It is not sufficient to apply T__RR to 
every color pair eB. For consider Figure 3. Edge f is type BY in Figure 3(a), and ey in Figure 3(b). 
So the sequence T R(~,y), TR(~,B), TR(B,y) does not color f. The following algorithm handles this problem 
correctly. procedure typed-recolor; i. let M be the edge set of any color; 2. ~ there are uncolored 
edges in M d~o  3. ~ each color ~dd~o  4. ~f°r each color B dd~oo  5. if there is an edge of type 
~B then TR(~,B);  end ended; Lemma 3: Procedure typed-reeolor is a correct recoloring method that uses 
time 0([E]Alog n) and space O(nA). Proof: Correctness is obvious. To prove the time bound we first note 
an implementation detail. The algorithm maintains lists of ~B edges, for every pair of distinct colors 
~B. These lists are used by TR(in line i, to form Hog). They are also used to do the test of line 5 (of 
typed- recolor) in 0(i) time. The lists are initialized when M is chosen, in time 0(A2+n). They are up- 
dated by TR(line 6), when an edge f changes type (see discussion above); the updates do not change the 
time estimate of Ler~na 2. Now we show an execution of the loop in lines 4-5 for a fixed ~ is 0([El). 
The time to loop through all colors 8 is 0(A). A call TR(~,B) takes time 0(c8+u B), where these quan- 
tities are calculated immediately before the call (Lemma 2). When TR(~,B) is called for any Bma, the 
B edges have not changed since the be- ginning of the loop (in lines 4-5). Thus ~e 8 ~ [E[. When T__R 
(~,B) is called there may he new e8 edges, created in previousexecutions of T_~R (e.g., when T R(e,y) 
is called a BY edge can become ~B). However, it is easy to see fixed ~, Z 0(cS+u B) = O([E[). B  It 
follows that the loop in lines 3-5 is exe- cuted once in 0([E[A) time. So it suffices to show lines 3-5 
are executed at most log n times. To do this, we show each execution of lines 3-5 colors at least half 
of the edges that are uncolored when the loop begins. Suppose an uncolored edge e is not colored by 
the loop. It must be that e changes type, say from BY to ~y, before TR(B,y) is called but after TR(~,y). 
The change occurs in T R(e,B) when an ~8 path Pk gets recolored. Edge e is at the end of Pk' and so becomes 
an ~y edge. At the beginning of Pk is an edge e k that gets colored. Associate edge e with e k. Then 
every edge that does not get colored is associated with one that does. So at least half the edges get 
colored. The space is dominated by the vertex-color incidence matrix. (The lists of ~B edges only re- 
quire 0(A 2) extra space for list heads, and A2~nA) D Now we estimate the time to color a graph using 
this method. Theorem i: Procedure euler-color with typed-re- color finds a minimum coloring in time 0([E]81og 
n) and space 0(nS). Proof: The total time for recoloring graphs on level i of the partition tree is 0([E[A 
log n). 2 i  So the time for all levels greater k is  Flog A~  (4) E O([E[A log n) = 0([E[A log n). 
i = k+l 2 i 2 k Taking k = -i gives the desired time bound. Since sequential-recolor works well for 
large A and typed-recolor works well for small A, we can combine them to get another efficient algorithm. 
 ~ e combined-recolor; eg~_  I. ~ &#38;~l o~-~n ] then sequential-recolor elj~typed-recolor e~;  Theorem 
2: Euler-color with combined-recolor finds a minimum coloring in time O([E[dn log n) and space O(nA). 
 -189- Proof: Consider a graph on level i of the partition tree. If i -< log i(A/~~), the maximum degree 
is at  least L~i]>-r~ ~; thus sequential-recolor is used. Otherwise, typed-recolor is used. The bound 
now follows from (3) -(4). 4. A Repartitionin$ Method This Section presents a version of euler-color 
that partitions each graph twice. The run time is 0(n21ogA). This is usually the best of our algor- ithms. 
 The idea is to take advantage of the fact that graphs with maximum degree a power of two can be colored 
fast. As noted in Section 2, the unmodi- fied procedure euler-color works in time 0(IEllogA) on such 
graphs. Suppose the graph G, with maximum degree A, is partitioned into G., i = 1,2, each with maximum 
A degree [~], and Iz! G1 lFAt is|~|-colored. Subgraph G 2 can be colored in time 0(IElmin (Alog n, 
~ n log n)),using the algorithms of Section 3. However, we can do better, by enlarging G 2. Suppose we 
make G 2 a graph with maximum degree a power of two, by transferring the correct number of colors from 
G 1 to G 2. The enlarged G 2 can be colored in time 0([EllogA), faster than the original G 2. This coloring, 
plus the coloring of the remainder of G I, combine to give a coloring of G. This gives the following 
algorithm. pr~ocedure binary-color (G) ;  i. let A be the maximum degree in G; 2. ~ A = 1 th~en color 
all edges in G, using a new color else  3. divide G into edge-disjoint subgraphs G I and G~, each with 
maximum degree at most  where O 1 has no more edges than 02 (use an euler partition);  4. binary-color 
(G I) ;  5. C: transfer the edges of 2 i- ~ colors  from G I to G2," where i = og comment now G 2 has 
maximum degree a power of two;  6. binary-color (G 2) ;  7. B: "if G is (A+l)-colored then sequential- 
recolor;  Labels B and C show the relationship of this algor- ithm to euler-color. Figure 4 illustrates 
binary-color. It shows the "spine" of the partition tree for a graph G with maximum degree 13. Line 3 
divides G into sub- graphs GI, G2, with maximum degree 7. G 1 is re- presented by the left son of the 
root. In line 4, recursive calls to binary-color divide G 1 into sub- graphs of degree 4, etc. Eventually 
G 1 is 7-col- ored. Then line 5 transfers one color from G 1 to G 2. The maximum degree of G 1 becomes 
6, while that of G 2 becomes 8 (a power of two). Line 6 8-colors G 2. This gives a 14-coloring of G. 
Finally line 7 finds a 13-coloring. 7(8) Fig. 4 Partition tree spine  Theorem 3: Procedure binary-color 
finds a minimum edge coloring in time 0((IEIn logA)/A) = 0(n21ogA) and space O(nA). Proof: First we discuss 
the correctness. We begin by noting that in line 5, G 2 contains enough colors to do the transfer. For 
G 2 has maximum degree at leastL~J , and Now we check binary-color finds a A-coloring. Let 6. be the 
maximum degree of subgraph Gi, l i = 1,2. Although the transfer in line 5 changes Ai, the quantity A 
1 + A 2 stays the same. So if A is even, the coloring of G after line 6 is mini- mum. If A is odd, this 
coloring uses one extra -190 - color, which is eliminated in line 7. In either case, binary-color 
finds a minimum coloring. For the time bound, we refer to the spine of  the partition tree,as illustrated 
in Figure 4. (De- fine the spine as follows: The root represents the given graph G. A node representing 
a G I subgraph is a left son, and a G 2 subgraph is a right son. All descendents of G 2 subgraphs in 
the partition tree are omitted from the spine.) We break the time into two parts: that spent in the 
G I sub- graphs, and that spent in the G 2 subgraphs, of the spine. Consider a G I subgraph on level 
i. We esti-  mate the time spent in all lines of binary-color, excluding the recursive calls. Let A. 
and E. re- 1 i present the maximum degree and the edge set of G~, respectively. Lines 1-3 and 5 are 
0(IEil) ; line 7 is 0(IEiln/Ai) , by Lemma I. Since n>Ai, line 7 dominates. By (1)-(2), line 7 is O(IEIn/A). 
Sum- ming over all levels of the spine gives a total time of O((IEIn logA)/A). Now consider a G 2 subgraph 
on level i. We  estimate the time spent by binary,color to color the enlarged graph, with maximum degree 
a power of two. Let &#38;i and E i represent the maximum degree and the edge set of G2, before it is 
enlarged. After enlarging, the maximum degree is at most 2Ai, and the number of edges is at most 21Eil(see 
 line 3). The time for binary-color to color a graph with A a power of two and edges E is 0~IEIlogA) 
(Lines 5 and 7 do nothing, so the algor- ithm works identically to euler-color). So by (1)-(2), the 
time to color all G 2 subgraphs is  Flog&#38;-] +1 r'~EL' ~ F__~ ) . Z 0( --log =  O(lEllogA)) i 
= i |2i [  Adding the times for the G I and G 2 subgraphs gives the time bound. The space is dominated 
by the vertex-color incidence matrix. D 5. An Application to Matchin$ A graph is resular if all vertices 
have the  same degree. A bipartite graph is semi-regular if all vertices in one vertex set have degree 
A, while the vertices in the other vertex set have degree at most A. In a regular or semi-regular graph, 
 each color of a minimum edge coloring is a maxi- mum matching. So any coloring algorithm finds a maximum 
matching. This gives the following result Theorem 4: If G is a regular or semi-regular bi- partite 
graph, a maximum matching can be found in time O(min(nA21og n, n&#38; ~n log~,n21ogA)) and space O(nA). 
D Except in the narrow range n-- / NA~ n~--log n,  log n this improves the general 0(~EI) matching 
algor- ithm of [HK]. For since IEI = nA/2 in a regular graph, the first term of the min is an improvement 
 r--- when A<¢~og n' and the third term is an improve- ment ,.Then A>~n log n. When G is regular or 
semi-regular and A is a  power of two, euler-color can be simplified to find a maximum matching in linear 
time, 0(IEl) [Ga]. When A is close to a power of two, we can also improve the above bounds. Lemma 4: 
If G is regular or semi-regular and A = 2~±c, where c is a constant, a maximum matching can be found 
in time O(n2+IEllogA) and space O(nA). Proof: If A=2k+c, proceed as follows: First form a subgraph H 
with A~2 k, by removing c or more edges from each vertex. Then use euler-color to 2k-color H. Finally 
use au$ment for the edges in G-H. The time is O(IEllogA) for euler-color, and 0 (n 2) for at most cn 
augments. If &#38;=25c, proceed similarly: First 2~color  G; then use augment to eliminate the e extra 
colors. D Footnotes (1)All time bounds in this paper remain valid if n is taken as the number of vertices 
in the smaller vertex set of the bipartite graph. (2)By "alternately", we mean that if the last edge 
of one path is in GI, the first edge of the next path is in G2, and vice versa. Our results hold if we 
do not alternate "across paths", but this convention simplifies the presentation. (3)By convention, 
a node on level i is at distance i from the root. Thus the root is on level 0, its sons are on level 
i, etc. (4)Throughout this paper, log denotes logarithm to the base two. -191 - References <RefA>[B] Berge, 
C., Graphs and Hypergraphs, North- Holland, Amsterdam, 1973. [E] Even, S., Itai, A., and Shamir, A., 
"On the complexity of timetable and multicommodity flow problems," SIAM J. Comput. 5, 4, Dec. 1976, pp. 
691-703. [Ga] Gabow, H., "Using euler partitions to edge color bipartite multigraphs," International 
Journal of Computer and Information Sciences ~, 4, Dec. 1976, pp. 345-355. [Go] Gotlieb, C.C. "The construction 
of class- teacher time-tables," Proe. IFIP Congress 62, Munich, North-Holland, Amsterdam, 1963, pp. 73-77. 
 [GS] Gonzelez, T., and Sahni, S., "Open shop scheduling to minimize finish line," J.ACM 23, 4, Oct. 
1976, pp. 665-679. [HK] Hopcroft, J.E. and Karp, R. "An n 5/2 algo- rithm for maximum matchings in bipartite 
graphs," SIAM J. Comput. 2, 4, Dec. 1973, pp. 225-231. [L] Lawler, E.L., Combinatorial Optimization: 
Networks and Matroids, Holt, Rinehart and Winston, New York, 1976. [0] Ore, 0., Theory of Graphs, Amer. 
Math. Soc. Colloq. Publ. 38, Providence, R.I., 1962.</RefA>  -192 -  
			
