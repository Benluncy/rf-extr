
 A Microprocessor Display Controller for Combining Refresh and Storage Tube Graphics Steven G. Satterfield 
 Francisco Rodriguez David F. Rogers Computer Aided Design and Interactive Graphics Group Division 
of Engineering and Weapons Annapolis, Md. 21402 ABSTRACT This paper describes a stand alone graphics 
system utilizing a microprocessor based display controller with the capability of combining refresh with 
storage tube graphics. This combination is accomplished by utilizing the Write-Thru feature of a Tektronix 
4014 display terminal. The display controller is a typical Z-80 microprocessor system interfaced to the 
4014 by a standard Tektronix parallel interface. A portion of the Z-80 memory is used as the display 
buffer, allowing it to be divided into store and non-store (refreshed) segments. The microprocessor performs 
the conversion from the simple integer X,Y coordinates in the display buffer to actual Tektronix drawing 
commands. A second Z-80 microprocessor is used to perform graphical transformations and transfer the 
data from the PDP-11 host to the Z-80 display controller. The operations performed by the second microprocessor 
include translation, rotation and scaling. These operations are implemented by matrix multiplication 
of the user data by a user specified transformation matrix. The stand alone capabilities of the graphics 
system is made complete with interactive devices such as a tablet, analog dials, and function switches 
interfaced directly to the host computer. Key words: Refresh Display, Storage Tube Display, Microprocessor 
Display Controller, Vector Graphics CR Classifications: 6.22, 8.2 I. Introduction Two types of CRT 
(cathode ray tube) devices for calligraphic or line drawing graphics are the storage tube and the refresh 
display tube. Traditionally, these displays have been separate devices each having their own particular 
advantages and disadvantages. Complete discussions of these and other graphical display devices may be 
found in references I, 2 and 3. However, it is possible to combine the two types of graphics into a single 
system utilizing a feature of the storage tube known as Write-Thru. Normally, graphics drawn on a storage 
tube display remains visible until the entire screen is erased. Write-Thru is a display option thaÂ£ prevents 
vector storage while not disturbing the previously stored information. To make Write-Thru mode graphics 
visible requires that the data be "refreshed' or repeatedly re-drawn. Thus a graphics system can be developed 
that has the high density graphics capability of a storage tube and the dynamic motion capability of 
a refresh display. This paper describes a stand alone graphics system with Write-Thru capability developed 
by combining a general purpose mini-computer, two microprocessors, and a storage tube display. Interactive 
devices Providing various forms of user input are interfaced to the host mini-computer to complete the 
stand alone capabilities. The intended use for the refresh/storage (R/S) graphics system is applications 
involving a limited amount of refresh 117 graphics overlaying a fixed (store mode) background. II. 
Background The Tektronix 4014 display terminal (ref. 4) is a large screen (approximately 14 inches by 
10 inches) storage tube with Write-Thru capability. The 4014 has sufficient Write-Thru capacity to justify 
its use in applications that normally require a refresh display. The specific capabilities of the 4014 
Write-Thru mode are discussed in section IV of this paper. This section will discuss previous methods 
of combining refresh and storage tube graphics utilizing the 4014 display terminal and why an alternative 
approach has been taken. Tektronix offers an optional display buffer (ref. 5) that will allow the local 
storage and retrieval of 1024 characters sent to the terminal from a host computer. This buffer allows 
graphics data to be sent to the terminal at a slow rate, stored locally and then repeatedly displayed 
at the terminal's maximum writing speed. This capability is most useful for Write-Thru graphics in a 
timesharing environment where a dedicated computer is not available to maintain the required refresh 
rate. Since the control of the display buffer is by special characters from the host computer, the utility 
of the Tektronix display buffer is for graphics output. A paper by Basil (ref. 6) describes a scheme 
for adding a microprocessor to the internal hardware of the Tektronix 4014. The microprocessor thus adds 
local intelligence to the terminal for controlling Write-Thru graphics. This modified terminal is also 
used in a timeshared environment and provides capabilities similar to the optional Tektronix buffer. 
An additional capability provided by the microprocessor is to display characters entered by the keyboard 
in Write-Thru mode. This feature is useful in a timeshared environment since the storage tube display 
does not become cluttered with the dialogue between user and program. A third approach to combining 
 refresh and storage tube graphics is the Tektronix 4081. This graphics system differs from the two 
previous approaches because it is a completely integrated stand alone system utilizing a mini-computer 
to run the application program. The hardware and software design of the 4081 is described in reference 
7. The display tube used by the 4081 is a variation of the 4014 using Write-Thru to achieve the desired 
 refresh capability. The actual refreshing is done by a special purpose display controller that shares 
a portion of the mini-computer's memory for display list storage. The function of the Computer Aided 
Design and Interactive Graphics group at the U. S. Naval Academy is to provide technical support to midshipmen 
and faculty members in the areas of computer graphics and computer aided design. This support includes 
both hardware and software develonment. The hardware facilities include several storage tube displays 
driven from a timesharing system, a stand alone mini-computer driven refresh graphics system with graphical 
transformation hardware and a large flat bed plotter. The choice for acquiring additional refresh graphics 
capabilities was affected by the following guidelines: I) The desire to combine both storage tube and 
refresh graphics into a single system, 2) The desire for a stand alone system for maximum refresh performance, 
 3) The desire for comDatability with existing mini-computers, 4) The desire for a system that would 
allow future expansion and modification. The Tektronix 4081 comes closest by meeting two of the guidelines. 
The existing computers maintained by CADIG are Digital Equipment Corporation PDP-11's which are not used 
in the 4081. Since the 4081 is a fully integrated system, it would not be easily adapted to any future 
expansion or modification. Therefore, it was decided to build a graphics system utilizing a PDP-11 host, 
a Tektronix 4014 as a display and a microprocessor based display processor. III. A Functional Hardware 
Description .Figure I shows a block diagram of the R/S graphics system hardware components and interfaces. 
The hardware of the system may be categorized into the following three groups: I) The mini-computer 
host and associated peripherals, 2) The microprocessor display controller and storage tube display, 
 3) The microprocessor matrix multiplier and direct memory access (DMA) interface from the host mini-computer. 
 The host mini-computer may be any Digital Equipment Corporation PDP-11 118 R/S GRAPHICS SYSTEM BLOCK 
DIAGRAM EXPANSION BOX SWITCHES LIGHTS DIALS TABLET  I INTERFACE iii I MATRIXI I OISPLAYI TEKTRONI~ 
  l INTERFiCE MULTIPLIER PROCESSOR 4014 l I I I FIGURE I UNIBUS configuration. The specific configuration 
used is a PDP-11/34 with 32K words memory, two RKO5 disk drives and a Decwriter. The integrity of the 
computer system from a maintenance point of view is achieved by placing all interfaces in a standard 
expansion box which is connected to the PDP-I] through a single UNIBUS cable. Thus the expansion box 
provides a logical extension to the PDP-11 and a mechanical framework for hardware development. The 
interactive peripherals consisting of a digitizing tablet, control dials, function switches and function 
lights are also part of the host functional group since they are interfaced directly to the PDP-II. The 
function lights and switches simply consist of a set of sixteen lights representing sixteen bits of output 
data and a set of sixteen switches representing sixteen bits of input data. This set of input and output 
data is made available to the PDP-11 by a standard DR-11C parallel interface (ref. 8) from Digital Equipment 
Corporation. Eight control dials are interfaced to the PDF-II through an analog/digital converter. The 
dials generate a binary number that increases positively until it wraps around to most negative then 
continues to increase. Finally an eleven inch digitizing tablet surface with pen and control box are 
interfaced to the PDP-11 with a third parallel interface. The purpose of the host PDP-11 is to provide 
the tYDical capabilities of graphics aDPlication proKramming. It also provides control of the interactive 
peripherals at the user software level and master control of the DMA interface for passin~ graphical 
data to the display. The common uses for the interactive devices follow: I) Dials -Rotation, scaling, 
and translation. 2) Switches -Initiating/terminatin~ program action and entering any YES/NO type of 
input. 3) Lights -Reflecting the current state of the corresponding switch position. 4) Tablet and 
pen -X,Y digitizing, menu selection and cursor control. A Z-80 microprocessor system (ref. 9 and 10) 
is used for the display processor. This Z-80 system may be further broken down into a set of smaller 
hardware components as shown below: I) Z-80 CPU microprocessor, 2) PROM -permanent storage for control 
Drogram, 119 3) RAM -read/write memory for control program data and the display buffer, 4) Real time 
clock -refresh interval timer, 5) Input/output ports -hardware interfacing.  The purpose of this Z-80 
display processor is to transfer the graphical data from the display buffer to the Tektronix display 
screen. This transfer process requires that the Z-80 perform a conversion from the simple binary data 
of the display buffer to the special drawing codes required by the 4014. The display processor (Z-80) 
is also responsible for refreshing the data drawn in Write-Thru mode. The Z-80 and the 4014 communicate 
through a Z-80 I/O port connected to an optional Tektronix parallel interface (ref. 11). As previously 
discussed, the 4014 is a large screen storage tube display with Write-Thru capability. The particular 
4014 used has an optional enhanced graphics module that expands the normal screen resolution of 1024 
by 1024 to 4096 by 4096. Other features provided by this option include a point plot mode and a hardware 
dashed line mode. The matrix multiplier is implemented with a second Z-80 microprocessor connected between 
the DMA interface and the display processor. A standard DR11-B (ref. 8) from Digital Equipment Corp. 
is used as the DMA interface. The purpose of the matrix processor is to perform graphical transformations 
on the data as it is passed to the display processor. These graphical transformations are implemented 
by multiplying the user data by a user specified transformation matrix. References I and 2 have complete 
discussions concerning the application of matrix operations to perform graphical transformations. Both 
the matrix multiplier and the display processor are discussed further in Section V. IV. Limitations 
of Write-Thru T ...... ~--m ....  The number of possible refreshed vectors using the Write-Thru mode 
of the Tektronix terminal is determined by the following three factors: I) The rate at which the interface 
can operate, 2) A hardware limitation within the 4014 of 10,000 centimeters per second, 3) The rate 
at which the display controller can generate and output the 4014 display codes. The first limitation 
is an important factor in the more typical circumstances of connecting the 4014 to a host computer through 
a serial interface. The baud rate (bits per second) of serial communications usually limits the number 
of characters and graphics codes significantly. However, the parallel interface used in the R/S graphics 
system allows eight bit codes required by the 4014 to be directly transferred without the delay of a 
parallel-to- serial and then serial-to-parallel conversion. By also providing certain handshaking signals, 
the interface effectively allows direct communication to the internal electronics of the 4014 terminal. 
Consequently, the interface speed is not a limitation in the R/S graphics system implementation. The 
I0,000 centimeters per second limitation of the 4014 vector generation hardware must be accepted. Therefore, 
to gain full usefulness of the Write-Thru mode, the display controller must be able to generate and output 
the 4014 drawing codes at a rate approaching this limitation. Since the display controller used in the 
R/S graphics system is a Z-80 microprocessor, the speed of the display controller is dependent upon the 
Z-80 programming and the particular type of hardware used. The R/S implementation uses a Z-80 CPU chip 
having a clock rate of 2.5 megahertz (Mz). This clock rate yields a basic clock time (T cycle) of .4 
microseconds. Each Z-80 machine instruction has a specific number of T cycles (basic clock time) required 
for complete execution. Therefore, the speed of the Z-80 display controller is the sum of all T cycles 
required by the set of Z-80 instructions used to generate and transfer the 4014 display codes. A straight 
forward scheme which gets a binary number from the display buffer, converts it to 4014 codes, and then 
transfers it to the 4014 reauires approximately 330 T cycles. Thus the maximum number of vectors per 
second is 7575. A stable, flicker free picture drawn in Write-Thru mode requires that the picture be 
refreshed at least 30 times per second. So the Z-80 display controller has the capacity for generating 
stable Write-Thru mode picture containing 252 vectors at a refresh rate of 30 frames per second. For 
comparison purposes, if the I0,000 centimeter limitation is that also divided by 30, then the vector 
generator limit becomes 333 centimeters of non-flickering vectors. Since the time required by the Z-80 
display processor to convert the display buffer data to Tektronix graphics commands is independent of 
vector length, it is difficult to precisely compare the display processor rate with the vector  120 
 generator rate. However, the implication of the comparison is the the Z-80 can fully utilize the 4014 
capabilities if the average length of the vectors drawn is greater than 1.3 centimeters (333/252=1.3). 
 The above figures for the capabilities of the Z-80 display controller can be improved significantly 
by utilizing faster hardware. Z-80 hardware is available with a 4.0 Mz system clock which is approximately 
twice the speed of the Z-80 hardware previously discussed. V. Matrix and Display Processors Figure 
2 is a more detailed diagram showing the connections and various components of the matrix multiplier 
and the display processor. The mechanism for interconnecting the PDP-11, the 4014 and the two microprocessors 
is with the Z-80 parallel input output (PIO) port (ref.12). This technique allows each processor to independently 
perform its task. The primary task of the matrix multiplier is to apply graphical transformation in 
the form of matrix multiplications. The number of individual multiplications required for a matrix multiplication 
cannot be handled by a Z-80 alone. So a special 12 bit multiplier-accumulator chip (ref. 13) is added 
to the Z-80 matrix processor. The ability of the chip to perform a multiplication and to accumulate the 
results makes it well suited for matrix multiplication. The function of the associated Z-80 is to simply 
replace hard logic for moving the data between the PDP-11, the multiplier-accumulator chip and the other 
Z-80. In order to reduce the number of I/O operations, the multiplier-accumulator chip has access to 
data directly from the DMA interface. Thus the Z-80 can get data either directly from the DMA interface 
 (unchanged) or by way of the multiplier-accumulator chip (transformed). This data is then either 
passed along to the display or cycled back through the multiplier-accumulator chip to continue a matrix 
multiplication. The task of the display processor  Z-80 is to cycle through its display buffer, drawing 
refresh mode graphics or any new store mode graphics. Both store mode and Write-Thru mode data are 
stored in the display buffer providing a complete record of the visible graphics independent of the 
host computer. The display buffer is actually part of the Z-SO memory which allows it to be easily 
 manipulated and accessed. It is logically separated into a double buffer scheme that allows one buffer 
to be written into while the other buffer is drawn. Data is stored into the displav buffer on an interrupt 
basis by a PIO interrupt service routine. This allows the display processor to freely cycle through the 
current refresh buffer while filling the other buffer with transformed data passed bv the matrix processor. 
The PIO interrupt service routine also performs certain functions such as start/stop buffer cycling, 
switch the current display buffer and read the current display buffer back to the host. The display 
buffer is also logically segmented into refresh and store mode segments. The refresh segments are continually 
re-drawn by the Z-80 microprocessor in Write-Thru mode. The store mode segments are also saved in the 
display buffer, but are drawn only once when initially generated. Using this segmentation scheme allows 
a display to be composed of several logical segments such that only changing segments need to be re-generated 
 (transferred from host). This concept of segmentation is useful in store mode graphics in that after 
a complete screen erase, all the store mode segments can be automatically re-drawn by the Z-80 without 
the attention of the PDP-11 host. Using a fixed display buffer does provide a disadvantage for applications 
 requiring more store mode vectors than the buffer will hold. To relieve this problem a bypass mode 
is used where once the graphical data in a segment of the display is output to the display screen, 
 the segment is released to accept other graphical data. This mode is equivalent to the repeated re-generation 
of a store mode segment without an intermediate screen erase. VI. Software Overview The software 
of the R/S graphics system falls into three categories consisting of the PDP-11 user routines, Z-80 
matrix multiplier program, and the Z-80 display controller program. Each of these categories will be 
discussed in the following paragraphs. The PDP-11 software provides the lowest level of user interface 
to the R/S graphics system. This interface is a set of efficient user callable routines to perform 
the various system functions. These routines fall into the five following groups: I) Interactive peripheral 
routines, 2) Graphicsdisplay routines, 121  MATRIX MULTIPLIER AND DISPLAY PROCESSOR A .,, %.  e.~ 
PDP-ll U3 ms OMA --, INTERFACE   tNULTIPLIER~ F-~~ I ~' q_JINTERACTIVE  ,2 eITS I-l |PERIPHERALS 
' I i HOST COMPUTER MATRIX PROCESSOR ' I DISPLAY PROCESSOR FIGURE 2 Since the Z-80 is a Keneral  3) 
Display buffer segmentation routines, purpose microprocessor, it must contain a program to perform the 
desired 4) Display buffer control routines, function. Each of the Z-80 microprocessors contain their 
 5) Matrix processor control routines. corresponding Drograms stored permanently in read only memory 
such The interactive peripheral  that execution begins when power is routines allow the user program 
to read applied. This technique is often  appropriate values from the digitizing referred to as "firmware" 
since it tablet, analog control dials, and the effectively reduces the ~eneral purpose function switches. 
Visible graphics microprocessor to a specific hardware such as vectors, dots, and text are controller. 
 produced with the graphics display The firmware associated with the routines. The display routines 
also Z-80 matrix processor controls the flow include the ability to set dash line of data through 
the Z-80 system to mode and set blink mode for refresh type perform the matrix multiplication. The 
 graphics. The display buffer  following list summarizes the operations segmentation allows the user 
program to performed by the Z-80 system:  configure the display buffer into the desired number of store 
mode and refresh I) Pass data from the DMA interface to mode segments. These routines also the display 
processor,  provide for subsequent re-generation and deletion of existing segments. Display 2) Control 
the data path through the buffer control routines are used to multiplier-accumulator to effect a request 
the display processor to switch matrix multiplication,  the display buffer and to request that the 
current display buffer be 3) Load a new transformation matrix from transferred back to the PDP-11. 
The the DMA interface,  matrix processor control routines are used to specify the graphical data 4) 
Concatenate a matrix from the DMA manipulation to be performed by the interface with the current  
matrix processor. These routines are transformation,  used prior to the graphics output routine to 
transfer a desired matrix to 5) Save the current transformation the matrix multiplier. matrix. 122 
 6) Restore a previous transformation matrix. The provision to pass data unchanged is necessary to 
allow the host to communicate directly to the display processor or to pass control information. Display 
list control words must be passed unchanged to organize the display buffer into a list of moves and draws 
to form the picture. ASCII data must be passed unchanged to allow the 4014 to display text. Also, commands 
to the display processor such as to read the display buffer back to the host and set the refresh rate 
must be passed. The transformation matrix to be applied to the user data is loaded from the DMA interface 
under the control of the Z-80 firmware. This transformation matrix may either replace the existing matrix 
or be concatenated with the existing matrix. This concatenation capability allows complex transformations 
to be built from a series of simpler matrices. Finally, the ability of the firmware to save and restore 
a transformation is implemented in firmware as a push-down~pop-up stack. A matrix stack pointer is used 
within the firmware to point to the current transformation. The firmware associated with the Z-80 display 
processor is separated into two parts. The first part is the display list cycling routine that interprets 
the current display list to produce the visible graphics. The second part is the PIO interrupt service 
routine that receives data passed from the matrix and fills the alternate display buffer. Graphical 
data is stored in the display buffer as a list of command codes and associated values. The command codes 
determine what the Z-80 does as it cycles through the current display list. The command codes indicate 
actions such as draw a vector, move to a point, display text, erase the screen (store mode), and wait 
for the next refresh interval. In order to avoid flicker of the Write-Thru mode graphics, the refresh 
segments of the current display buffer must be drawn at least 30 times per second. The real time clock 
(a Zilog CTC, ref. 14) of the Z-80 system is used to determine the passage of each refresh interval. 
The drawing of the refresh segments is given highest priority. To provide time for drawing the store 
mode segments and to provide a consistent brightness of Write-Thru mode graphics, a display wait command 
code is used. When the display processor finds this command in the refresh segment, it suspends drawing 
of Write-Thru mode graphics until the next refresh interval controlled by the CTC. During this off time 
the store mode segments are output to the 4014. This displav wait controls the display intensity by maintaining 
a constant cycle time independent of the segment length. VII. Conclusion This paper has described the 
design of a stand alone graphics system that has the capability of combining storage tube graphics with 
refresh graphics. This capability becomes very useful for applications involving a small amount of dynamic 
motion (refresh) overlaying fixed (storage) background graphics. The feasibility of using microprocessors 
as a mechanism for distributing the tasks of an interactive system has been shown. Also, the use of generally 
available hardware provides a foundation for future development, including the adaptation to other host 
mini-computers. VIII. References  <RefA>I. Rogers, D. F., and Adams, J. A., Mathematical Elements for Computer 
  ~p--6"-f~'~T-i~F~-~i"I'~-E6'o--"~-~panv, New York, 1976. 2. Newman, W. M., and Sproul, R., Principles 
of Interactive Computer Graphics, McGraw Hill Book-Company, New ~, 1971.  3. Grover, D., "Hardware for 
Visual Information", Computer Aided Design, volume 9, number 4, October, 1977.  4. 4014 Computer Display 
Terminal Users Guide, Tektronix, Inc., Beaverton, O-regon, 1974.  5. Display Buffer Instruction Manual, 
CMO18-0109-O0, T@ktronix, inc~, Beaverton, Oregon, 1975.  6. Basil, M., "A Microprocessor Based Refreshing 
Buffer for Storage Tube Graphics Terminals', Computers and Graphics, volume 9, pp. 205-208.  7. Thanhouser, 
Ned, "Intermixing Refresh and Direct View Storage Graphics ~', Computer Graphic@ volume 10, number 2, 
Proceedings of SIGRAPH '76.  8. PDP-11 Peripherals Handbook , Digital Equipment corporation, Maynard, 
Massachusetts, 1976.  9- Z-80 Technical Manual, Zilog, Inc., Cupertino, California, 1977.  123 10. 
Z80-MCB Hardware User's Guide, Zilog, Inc., Cupertino, California, 1977.  11. 4014 MOD 941Z Parallel 
Interface, Tektronix, Inc., Beaverton, Oregon, 1975.  12. ZSOTP~IO_Tecehn~Â£a~_Manua!, Zilog, Inc., Cupertino, 
California, 1977.  13. TRW LSI Multiplier-Accumulator Technical Description, Model: TDCIO03J, TRW LSI 
Products, Redondo Beach, California, 1977.  14. ZSO-CTC Product Specification, Zilog, Inc.,Cupertino, 
Califo~6i&#38;, 1977.</RefA>   
			
