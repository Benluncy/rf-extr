
 A Laborator for Teaching the Development of Rea -Time 1Software Systems John W. McCormick Computer Science 
Department State University of New York Plattsburgh, NY 12901 mccorrnjw@snyplava. bitnet Abstract A major 
problem with teaching real-time software development to undergraduate students is finding suitable equipment 
for assignments and projects. Such equipment must provide problems that are exciting, challenging, cover 
a broad range of real-time topics, and yet have solutions that can be completed within the time constraints 
of the semester. This paper describes a successful laboratory for an undergraduate course in real-time 
software development based on a computer controlled model railroad. Introduction Computers have been 
used for real-time systems for a long time. In these systems, the correctness of the solution depends 
not only on the logical result of the computation, but also the time at which the results are produced. 
As con­trol computers have become more powerful and less expensive their use has increased dramati­cally. 
The number of skilled real-time pro­grammers and software engineers has not been able to keep pace with 
this increase in appli­cations. Aside from a few comments in Operat­ing Systems and Software Engineering 
courses, most undergraduate computer science majors receive no training in real-time system develop­ment. 
In addition, most computer science gradu­ates have little or no knowledge of physical systems. As a result, 
it is not uncommon to have the software for a real-time system be developed Permission to copy without 
fee all or part of this material is granted provided that the copies are not made or distributed for 
direct commercial advantege, the ACM copyright notice and the title of the publication and its date appear, 
and notice is given that oopying is by permission of the Association for Computing Machinery. To copy 
otherwise, or to republish, requires a fee and/or specific permission. @ 1991 ACM 0-89791-377-9/91 10002-0260 
. ..$+1 .50 by hardware engineers with little formal training in computer science. The software produced 
by such engineers is similar to their hardware designs, often characterized by clever tricks using as 
few lines of code as possible with little concern for program clarity. The maintenance of such code is 
usually costly, sometimes accounting for more than 80% of the overall life cycle cost for the software 
portion of the product (Wiener &#38; Sincovec, 1984). Most real-time sys­tems therefore require a team 
composed of both hardware and software engineers. To work effectively together, each team member must 
be familiar with the other s craft. An introductory undergraduate course in real-time software development 
can provide computer science students an exposure to both the fundamental scientific issues of real-time 
computing and practical skills in developing software needed to work on a team. While the theoretical 
issues can be covered without a labo­ratory, real-time programming skills can only be obtained through 
actual experience. There are two approaches for creating a real-time systems laborato~. One approach 
uses software to sim­ulate a physical system. Such simulations, how­ever, will not provide many of the 
frustrating problems associated with actual physical systems. Having to diagnose and deal with sticking 
motors, dirty contacts, and noisy trans­mission lines is a valuable experience for soft­ware developers. 
The lack of such practical experience is a primary reason for not including software engineers on development 
teams. Gaining this experience requires the second approach, creating a laboratory in which students 
can develop software to control a true physical system. A problem for faculty wishing to give their students 
such a laboratory experience is finding a physical system for them to control. For the past 5 years I 
have successfully used a computer controlled model railroad to give my students practical real-time software 
develop­ ment experience. The advantages of using a model railroad in such a laboratory include: 1. Both 
discrete state problems (modeled with state machines or Petri nets) and continuous state problems (modeled 
with differential equations) are available. 2. The railroad is versatile enough to enable students to 
work on a large variety of potential projects. 3. It is not difficult to obtain the necessary equipment. 
Compared to most mechanical equipment, model railroad components are quite inexpensive. 4. Students 
are highly enthusiastic about a course which teaches them to use the computer to control model trains. 
 The remainder of this paper describes the train laboratory and experiences using it in an under­graduate 
course in real-time software development. Hardware It is not necessary to have a knowledge of model railroad 
hardware to setup an adequate system for a laboratory. I had little experience with model railroading 
prior to this project. A visit to a local hobby shop can yield contacts with modelers who are happy to 
offer their advice and assistance. HO scale was selected for the model railroad. While smaller scales 
would permit more equipment in the laboratory, they are more expensive, more difficult to modify and 
maintain, and less readily available. Our layout has 27 independently powered blocks of track. These 
blocks are necessary to run multiple trains and to implement reversing loops. There are 49 train sensors 
strategically placed throughout the layout. The sensors are Hall effect switches that detect small magnets 
mounted on the front and rear of each train. The layout has 25 turnouts powered by screw drive motors 
rather than the more commonly used solenoids. Screw drive motors were selected because of their lower 
electrical current demands and longer switching times. The last piece of equipment is a radio transmitter 
mounted in a box car that sends a pulse every time a wheel completes a rotation. Originally, students 
developed their control software on a Digital Equipment Corporation (DEC) multiuser PDP 11/24 computer 
and executed it on a DEC PDP 11/23 computer connected to the layout through numerous home brewed interface 
circuits. Recently I received funding through the National Science Foundation s (NSF) Instrumentation 
and Laboratory Improvement Program to purchase a DEC MicroVAX II to develop control software and a DEC 
rtVAX 1000 to run it. In addition to the normal I/O hardware (console, network, and disk), the rtVAX 
has a 16 channel A/D converter, a 4 channel D/A converter, 15 programmable counter/timers, and 384 bits 
of TI L level I/O. These are connected through various custom built interface circuits to the layout. 
Since space does not permit a more detailed discussion on how all of this model railroad and computer 
hardware is constructed, connected, and utilized in satisfying the course goals, I will be happy to supply 
further information and schematic drawings to anyone interested, Software Tools When the PDP 11 s were 
used, students wrote control software in C. The only software tools were the UNIX tools available on 
the PDP 11/24 development system. There were no tools available on the target PDP 11/23 until one stu­dent 
wrote a real-time executive, TOS (Train Operating System), for an operating systems class project. TOS 
supported multitasking, memory management, and I/O. The only debug­ging tool available was the resident 
ODT debugger which allowed access to the machine s registers and memory locations. To examine the value 
of a variable, students were obliged to use the octal load map produced by the linker to determine the 
address or offset into the stack. Address determination was further complicated in multitasking applications 
where each task has its own stack. With the funding from the NSF last semester, students developed control 
programs under VMS in Ada and executed them under DECS VAXELN real-time executive. In addi­tion to all 
of the typical services provided by a real-time executive, VAXELN has a remote debugger which allows 
the programmer to debug their Ada program at the source level from the development machine. VAXELN also 
allows the programmer to write device drivers in Ada rather than assembly language. VAXSet (DECS suite 
of CASE tools) will be incorporated into future course offerings. Laboratory Assignments In addition 
to the normal class meetings, the students met for a three hour structured labora­tory every week. During 
these weekly labora­tory meetings, students worked on short assign­ments. With an instructor present, 
small obsta­cles encountered by the students were rapidly overcome. Therefore, most assignments were 
completed by the end of the laboratory meeting. The purpose of these assignments was to give students 
the basic skills required for the major project which will be described later. These assignments included: 
1. Assorted programs designed to teach the student the sequential aspects of Ada and the VAX Ada development 
environment. These ranged in difficulty from a five line Hello World program to generic stack and queue 
packages. 2. Assorted programs designed to teach the student the concurrent aspects of Ada. These ranged 
from matrix multiplication problems to a buffered producer -consumer problem (simulation of a jukebox). 
Addi­tional lab time is used learning to use the debugger with multiple tasks. 3. Polling and interrupt 
based device drivers for an A/D device. 4. A package to control the power to track blocks on the layout 
(additional device drivers needed are supplied). 5. A package to control the turnouts on the layout. 
Turnouts are electromechanical devices which sometimes fail to move correctly. Software written for this 
assign­ment was supposed to detect and report fail­ures and then attempt to correct them by  262 moving 
the offending turnout back and forth until it reached the desired position. 6. A program that uses feedback 
from a radio link to maintain the speed of a train as it goes up and down hills and over track with varying 
degrees of cleanliness. Students use various combinations of proportional, inte­gral, and differential 
control algorithms and observe the behavior. Control parameters are tuned for best control. Laboratory 
Project A major portion of the students efforts in the course is directed to a large (5,000 -10,000 lines) 
real-time control project. Allowed to work either on an individual projector as a member of a team, students 
were free to formulate their own projects or work on one suggested by the instructor. An example of a 
suggested project follows. Write a control program that allows two trains to be controlled through hand 
held controllers. Each hand controller has a potentiometer for a throttle, buttons for a brake and whistle, 
a switch to indicate forward or reverse, and a switch to indicate the desired direction at the next turnout. 
Reversed turnouts should be thrown to the proper direction before a train reaches them. The program should 
simulate acceleration and deceleration realistically. Only blocks of track beneath a train should be 
powered. The system should stop a train for any of the following reasons: (1) to prevent collision with 
the other train, (2) if a turnout fails, or (3) if cars are lost. Trains should be restarted when the 
error condition has been corrected. Early in the semester (before they have learned all the details of 
the model railroads hardware), each student or team was asked to prepare a brief System Concept Document 
(Pressman, 1987) describing what their system should be able to do. These documents were reviewed by 
the instructor in an attempt to insure that the project would be feasible. Projects or portions of projects 
were rejected if they required additional hardware or more time than was available. Typically, students 
proposed overly ambitious projects given the time available. After their System Concept Document was 
approved, students were required to prepare a functional narrative of their proposed system. Students 
then began to design the software for their system using Booth s methodology (Booth, 1986). Early into 
these designs, they found their functional narratives to be inadequate. At this point, Hatley s method 
for real-time system specification (Hatley &#38; Pirbhai, 1987) was introduced and students prepared 
more formal specifications of their projects using a CASE tool that supported the methodology. When I 
used to teach specification methodology before students started their designs, they complained that the 
specification techniques were too tedious to have any practical value. However, they learned that a good 
specification methodology is essential when I switched to a more Socratic teaching strategy. Specifically, 
students were enthusiastic about learning the specification methodology after they tried to design a 
system without it. Discussion The computer controlled model railroad has proven to be a successful tool 
for teaching the development of real-time systems. It has func­tioned as a vehicle for the integration 
of informa­tion from numerous other courses (computer science, mathematics, and physics). Students were 
highly motivated to learn new material. Many of my students continued to work on pro­jects after they 
had received their final grade and some had to be reminded to attend other classes instead of spending 
all of their time in the laboratory. Some students have returned after graduating to add a new feature 
to their system. A growing number of studies by social scientists suggest that undergraduates experi­enced 
more anger, frustration, and confusion in computer science courses than in comparable courses in other 
fields such as mathematics or the physical sciences (Sproull, Kiesler, &#38; Zubrow, 1984; Sproull, Zubrow, 
&#38; Kiesler, 1986). Undergraduates negative experiences with computer science has been attributed in 
part to encountering an alien culture in the typical university computer science laboratory in which 
students faced stringent tests of competence and harsh initiation rites (Sproull et al., 1986, pp. 257; 
273). In contrast, our college s real-time systems laboratory was viewed by students as a warm, socially 
and intellectually stimulating environment. Frequently, the excitement of undergraduates who were working 
on course projects in the laboratory would spill out into the adjacent Academic Computing Center, the 
loca­tion of the majority of student terminals and numerous microcomputers. Often, students not enrolled 
in the course were often found working in the lab with those who were. Eventually, the real-time software 
system laboratory became an intellectual hangout, a meeting place where undergraduates discussed and 
collaborated on computer science projects instead of harassing one another electronically as they might 
some­times do in the Academic Computing Center or limiting their interactions to the exchange of gossip 
(McCormick &#38; McCormick, 1990). Moreover, the train laboratory has also helped us recruit good students 
to the college and the major. A Biochemistry major who wandered into a laboratory bull session volunteered 
to build scenery for the layout. The next semester he applied to minor in Computer Science. Tours of 
the laboratory have become a regular feature of Open House at our college. Numerous stu­ dents enrolled 
in the train course commented they came to SUNY Plattsburgh after seeing the trains at an open house. 
The laboratory has appeared in local newspapers and on television, presenting a good image of the computer 
science program to the public. The computing equipment and software made available this past semester 
through NSFS Instrumentation and Laboratory Improvement Programs made a remarkable change in the course. 
Most of the software development problems discussed in an earlier paper (McCormick, 1988) have been solved. 
Ada s strong typing, packaging, exception handling, tasking abilities, and integral separate compila­tion 
facilities permitted students to produce working code significantly faster than in past years when C 
was used. I was pleasantly surprised to be able to spend less class time dealing with run time problems 
encountered by novice C programmers and more time to the science of real-time systems. VAXELN S source 
level debugger, while not used as frequently as I had anticipated, eliminated the frustrations encountered 
when debugging with the PDP environment. In general, the morale of the student software developers was 
higher than in the past. While the new equipment eliminated many of the problems and frustrations in 
the labora­tory, there are still a number of difficulties in using a computer controlled model railroad 
to teach real-time software development. Some of the model railroad equipment is rather fkagile. Track 
must be clean for locomotives to run well. Every student in the class is now assigned sec­tions of track 
to maintain. The trucks (wheels) and particularly the couplers on the rolling stock become misaligned 
after derailments or rough handling. I now require students to purchase an HO car kit. These are assembled 
in the first lab so that students learn how to adjust them for optimum performance. While the students 
now maintain the rolling stock and track, there is still much maintenance work for the instructor. Motors 
in locomotives and turnouts bum out because of improper use (such as setting speed records). Track is 
sometimes deformed by a careless student s book bag. Thus I must devote several hours every week to fixing 
broken equipment. Ironically, the new hardware purchased for the lab introduced a new pedagogical problem. 
The rtVAX 1000 is significantly faster than the PDP 11/23 it replaced. It is fast enough that all the 
time critical events in the projects can be handled without much thought on the student s part. Thus, 
this past semester, task scheduling was more theoretical than in past years. In future semesters I may 
modify some of the device drivers supplied to the students to insure that they have first hand experience 
with scheduling problems. Conclusion A model railroad can bean exciting and inexpensive way to teach 
real-time software development. State of the art software development tools like Ada and VAXELN allow 
the instructor to spend less class time on the implementation of assignments and projects and reduce 
student frustration. The railroad laboratory can provide students with an exposure to both the fundamental 
scientific issues of real­time computing and practical development skills necessary to work on a multi-disciplinary 
team in the development of real-time systems. Partial support for this work was provided by the National 
Science Foundation s Instrumentation and Laboratory Improvement Program through grant #USE-8852686. References 
<RefA>Booth, G., Software Emzineerhm with Ada 2nd cd., Benjamin/Cummings, Menlo Park, CA, 1986. Hatley, D. 
J. and Pirbhai, I. A., fhat egies for eal T e Svste ;ou;e~;ew Yort McCormick, J. W., Using a Model Railroad 
to Teach Digital Process Control, sIGCSE -, 2Q>304-308, 1988. McCormick, N. B., &#38; McCormick, J. W. 
r Friends and Foes: Content of I-J de ?adu ates Electronic Mail. M~n~script submitted for publication, 
1990. Pressman, R. S., Software Emzineerimz. A Practitionerfs Atmroach 2nd cd., McGraw-Hill, New York, 
NY, 1987. Sproull, L. S., Kiesler, S., &#38; Zubrow, D. Encountering an Alien Culture, Journal of ocial 
Issu es, Q 31-48,1984. Sproull, L., Zubrow, D., &#38; Kiesler, S. Cultural Socialization to Computing 
in College, rs in Human Behavior, ~, 257-275, Wiener, R., &#38; Sincovec, R., software Emzineerinz with 
Modu la-2 and Ada, John Wiley &#38; Sons, New York, NY, 1984.</RefA>
			
