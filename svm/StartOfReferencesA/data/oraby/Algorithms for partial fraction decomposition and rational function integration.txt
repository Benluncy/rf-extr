
 ALGORITHMS FOR PARTIAL FRACFION DECOMPOSITION AND RATIONAL FUNCTION INTEGRATION BY Ellis Horowitz 
 Abstract Algorithms for symbolic partial fraction decomposition and indefinite integration of rational 
functions are described. Two types of partial fraction decomposition are in- vestigated, square-free 
and complete square- free. A method is derived, based on the solution of a linear system, which produces 
 the square-free decomposition of any rational function, say A~B. The computing time is shown to be 
O(n (in nf) 2) where deg(A)<deg(B) =n and f is a number which is closely related to the size of the 
coefficients which occur in A and B. The complete square-free partial fraction decomposition can then 
be directly obtained and it is shown that the computing time for this process is also bounded by O(n4(in 
nf)2). A thorough analysis is then made of the classical method for rational function inte- gration, 
due to Hermite. It is shown that the most efficient implementation of this method has a computing time 
of O(k3n5(in nc)2) where c is a number closely related to f and k is the number of square-free factors 
of B. A new method is then presented which avoids entirely the use of partial fraction decomposition 
and instead relies on the solu- tion of an easily obtainable linear system. Theoretical analysis shows 
that the computing time for this method is O(n5(in nf) 2) and extensive testing substantiates its superi- 
ority over Hermite's method. INTRODUCTION The idea of using computers to do symbolic mathematics has 
been with us now for almost two decades. Many computer systems have been developed, some of which concentrate 
on a particular task (e.g. symbolic integration) while others provide a wide variety of opera- tions 
on large classes of mathematical ex- pressions. A rather complete list of these systems can be found 
in [9] and [i0]. The classical method for symbolic rational function integration is due to the 19th 
 century mathematician Charles Hermite, [5]. Several systems, such as Engelman's MATHLAB, [3], and 
Moses' SIN, [8], have relied on Hermite's method to perform partial fraction decomposition and rational 
function integra- tion. Tobey, in [Ii] undertook a detailed study of possible implementations resulting 
 from Hermite's method, expressed these strategies in algorithmic form and then pro- ved their correctness. 
 More recent people such as Collins [i] and Knuth [7] have developed analysis techniques which can be 
applied to algorithms which per- form complex, symbolic mathematical operations, Section 2 will lay the 
theoretical framework for the development of partial fraction de- composition and symbolic integration 
algorithms. Also, the basic theorems for performing a computing time analysis of these algorithms will 
be presented. In Section 3, several algorithms for partial fraction decomposition, including a new method, 
will be derived and their computing times will be analyzed. In Section 4, algorithms which implement 
Hermite's method for rational function integration will be developed and analyzed. These algorithms will 
then be compared to a new method. Both a theoretical and an empirical analysis will be done. In Section 
5, several extensions of this new method for integration will be discussed. DEFINITIONS AND THEORY 
In order to analyze the efficiency of algorithms it is necessary to develop the computing time for all 
subparts of the algorithm. Moreover, we require that these computing times shall be independent of the 
particular computer on which these algorithms may be implemented. Let us assume that integers are represented 
in radix form with arbitrary base B. Then compu- ting times for the arithmetic operations can be expressed 
as functions of the number of 8- digits of the numbers which occur in the algorithms. Hoever, since the 
number of 8- digits of N is [logsN]+l and since logBN= (in N)/(in 8) where~"in '' is the natural loga- 
rithm function and since we will usually ig- nore constant multipliers, the computing times are given 
in terms of In N. Also, these con- ' stant multipliers are dependent upon the paTti- cular computer 
of implementation, the data representation and numerous other details. It is, therefore, useful to ignore 
them uniformly and provide an analysis which is independent of any particular computer. I will now state 
several theorems which give the computing times for operations on integers and univariate polynomials. 
For proofs of these theorems, see [i]. These results will be used in analyzing the algorithms which occur 
in the latter sections. Definition: f(x)=O(g(x)) means that there exists a constant c such that f(x)Jc.g(x) 
for all sufficiently large x. The following theorems present computing times for algorithms which can 
be found in [7]. Theorem 2.1. Let t(a,b) be the time required to compute a+b (or a-b). Let T(d) = max 
{t(a,b): lal, Ibl < d}. Then T(d) = O(in d). Theorem 2.2 Let t(a,b) be the time required to compute a,b. 
Let T(d,e)=max{t(a,b) :lalj d, Ibl!e}. Then T(d,e)=O((in d)(In e)). Theorem 2.2 refers to a classical 
multSplication algorithm, Although recently developed algori- thms for multiplication of large integers 
are much faster, see [7], we will assume in this paper that the above computing time applies. Theorem 
2.3 Let t(a,b) be the time required to compute q and r given a and b, such that a=bq+r,0<Irl~ ~. ,ar>0,abq>0. 
Let T(d,e)= max{t(a,b) : d,lqI~ e}~ Then T(d,e)=0((In d) (in e)). i Definition: Let A(x) =~--m aix 
be a uni- ~i= 0 variate polynomial with integer coefficients. ~m Then, deg(A) = m and norm (A) = fail 
. 441 i=O Norm(A) is a norm for the ring of poly- nomials over the integers and hence satisfies the 
following rules: norm(A+B)~norm(A)+norm(B) norm(A.B)inorm(A)'norm(B). Definition: U(d,m)={A(x): norm(A)~d,deg(A) 
! m#. Theorem 2.4. The time to compute A(x)~B(x) for A,B6 U(d,m) is O(m(in d)). Theorem 2.5. The time 
to compute A(x)'B(x) for A6 U(d,m), B 6 U(e,n) is O(m n(In d)(in e)). Theorem 2.6. The time to compute 
A(x)/B(x) for B 6 U(d,m),A/B 6 U(e,n) is O(m n(in d) (in e)). The foundation for the analysis of more 
com- plex algorithms dealing with polynomial mani- pulation has now been presented. Before begin- ning 
a discussion of the algorithms for partial fraction decomposition and rational function integration, 
it is necessary to define cert- ain notions. A rational function R(x) will be regarded as a numerator 
-denominator pair of polynomials A(x)/B(x) where A(x) and B(x) have integer coefficients, are relatively 
prime and the leading coefficient of B(x) is positive. Definition: A rational function R(x)=A(x)/ 
B(x) is called resular if deg(A)<deg(B). We note that every rational function can be uniquely expressed 
as a polynomial plus a regular rational function. Since symbolic integration of polynomials is a comparatively 
 easy process, we will concern ourselves pri- marily with regular rational functions. Let I denote 
the integral domain of the in- tegers and Q(1) its quotient field, the rational numbers. Definition: 
Let B(x) be a polynomial of positive degree. Then B(x) is said to be square-free if it cannot be written 
in the form B(x)=C(x)D2(x) where D(x) is a poly- nomial of positive degree. It follows that a polynomial 
which is square- free has only roots of multiplicity one. k i Definition: Let BE l[x] and suppose 
B=bIli=iBi where each B.6 l[x], B. is primitive and has i a positive leading coefficient for l<i<k. 
Also, be l,deg(B k)>0 and the B. are pairwise k I relatively prime. Then b~i=iB i is called the square-free 
factorization of B. We now define two forms of partial fraction decomposition which will be investigated 
in later sections. Both of these decompositions are necessary in connection with the classi- cal method 
of rational function inte'gration. Definition: Let A(x)/B(~) be a regular ration- f~nctional and B(x)=bH.~ 
~B.i(x) the square- free faetorizatlon of B(x~. Suppose also that there exist polynomials A i with coefficients 
 in Q(1),l<i<k such that A(x)/B(x) = L k i=l Ai(x)/B~(x), deg(Ai)<deg(B~) or if deg(Bi)=0, A.=O. Then, 
this sum is called a square-free l partial fraction decomposition of A(x)/B(x). Definition: Let A(x)/B(x) 
be a regular rational funetio k i and B(x~=bH..B. (x) the square-free factori- zation of B~. I Suppose 
also that there exist polynomials Ai,j(x)(l!j!i,l<i<k) with~coeffi- cients in Q(1) such that A(x)/B(x) 
=~k Z_ i=l j=lAi,j(x)/B~(x),de~i,j)<deg(Bi) or if deg (Bi)=0 ' Ai,j=O for l<j<i. Then this sum is 
called a complete, square-free partial fraction decomposition of A(x)/B(x). For an example of these 
decompositions see Figure i. Let A(x)/B(x)=i/(x2+l)(x-l)2(x-2)3(x-3) 3. The Square-Free Partial Fraction 
Decompostion of A(x) -(x+~) 7x-5 B~-I000(xZ+i) + 32(x_i)2 +(871x 5 + l1944x4-65567x3+180458x2-24979x 
+ 139864.)/4000 (x-2)3(x-3) 3  The Complete Square-Free Partial Fraction Decomposition of A(x) -(x+l) 
+ 7 + i B(x) = 1000(x2+l) 32(x-i) 16(x-l) 2 -871x+3234 -1000x+ 3540 + 4000(x-2)(x-3) + 4000(x-2)2( 
x-3)2 -700x+220 + 4000(x-2)3(x-3) 3 Figure 1  In [6] the uniqueness of both of these decompo- sitions 
is established. The method of Hermite depends first upon obtaining these two decom- positions, successively. 
In Section 4 it will be shown how the integral is obtained from the terms of the complete square-free 
partial frac- tion decomposition. Let us now look at some theoretical results about the form of the 
integral of a rational function. The proofs of these theorems have appeared several times and so I 
have omitted some of them here for the purposes of brevity. Theorem 2.7. ([4], pp. 12) Let R(x)=A(x)/B(x) 
 be a regular rational function. Then / R(x)dx=S(x)+ I mi=ldi log(x-bi) where S(x) is a regular rational 
function, b i are in the eomlpex number field, ~ , and the b i are the 442 distinct roots of B(x),di6 
~ for l<i<m. Proof: We can write B(x) as B(x)=b0(x-bl)nl, n .. (X_bm) m where big ~,b i are the distinct 
 roots of B(x) and the n. are their multiplici- ties. Then, expanding ~(x) into a complete partial fraction 
decomposition where the denominators are the linear factors of B(x) we get constants ~ii,~12,... 6 ~ 
such that R(x) = i,i/(x-bi)+~i,2/(x-bi )2+...+ i=l ~. /(x-bi) . It then follows that/R(x) l,n i dx= 
 Im Ic~i i [°g (x-bi)-c~i, 2/ (x-bi)-" " "-C~i / i=l ' 'ni  (ni_l)(x_bi) n'-i I . let i Hence,  S(x) 
=Im i=l i -c~i' 2/(x-bi) ..... ai 'ni/ (ni-1 ni-i } (x-bi) and di=~i, 1 for l<i<m. Theorem 2.8. ([4],pp.14) 
let bl,...,b m be distinct elements of ~ and C~l,...,C~m6 ~. If X m c~.log(x-bi) is a rational functionp 
i=l z then ct.=0 for l<i<m. l  Theorem 2.9. Given a regular rational function A(x)/B(x) where B(x) 
is square-free, then f A(x)/B(x)dx= i=l c~il°g(x-bi) where the b i are the distinct roots of B(x),C~i,bi~ 
~. Proof Since B(x) is square-free, let bl,... ,b m be the distinct roots of B(x). We can write B(x) 
as B(x)=b0(x-bl)... (X-bm). Then there exists constants c~i, I for l<i<m such that A(x)/B(x)= i,i/(x-b 
i) . It follows i=l that fA(x)/B(x)dx =I m c~i,llOg(x-bi ) . By i=l the previous theorem, no part of 
this sum can be equal to a rational function. We can now make the following definitions. Definition: 
Let R(x) be a rational function such that fR +C m (x)dx=S(x) ¢~ilog(x-bi), where b i J L_~ i=l are 
the distinct roots of the demoninator of R(x). Then S(x) is called the rational part V m and ~ilog(x-bi 
) is called the transcen-L_..~i=l f% dental part of jR(x)dx. Theorem 2,10. It R(x)is a rational function, 
then the rational and transcendental parts of R(x)dx are unique. Proof Suppose R(x)dx=S(x) ~_~ i=l 
~i l°g (x-bi) =T(x)+ where S(x), I~ l~il°g(x-ci ) =  T(x) are rational functions. Then S(x)-T(x) 
= In ~ilog(x-ci ) ailog(x-bi). i=l i=l Then by Theorem 2.8, we have the right-hand side of this equation 
equal to a rational function only if that rational function is equal to zero. Therefore, S(x)=T(x) and 
 ! n I m i=l ~il°g(x-ci)= i=l~il°g(x-bi)" We now have defined two types of partial frac- tion decomposition 
which will be needed to implement Hermite's method. Also, the rational and transcendental parts of the 
integral of a rational function have been defined and shown to be unique. Then, what does Hermite's 
method really do. It gives us a constructive means of obtaining exactly the rational part of the integral 
of a rational function. Moreover, this method re- quires only rational operations and not a priori knowledge 
of the roots of the denominator. The method has two main phases. The first consists of obtaining the 
complete square-free partial fraction decomposition of the integrand. The second phase applies a reduction 
scheme to these partial sums, producing two rational functions. One of these is the rational part of 
the integral while the integral of the other is the transcendental part of the original inte- gral. 
 Section 3 will develop and analyze algorithms for finding partial fraction decompositions. Section 4 
will combine the partial fraction decomposition algorithms of Section 3 with an algorithm that implements 
the second phase of Hermite's method, This resulting procedure will be compared to a new method for obtaining 
the same results as Hermite's method. Both theoretical and empirical computing time analyses of the two 
methods will be presented. PARTIAL FRACTION DECOMPOSITION  There are two distinct types of decompositions 
we wish to obtain, square-free and complete square-free partial fraction decomposition. The latter should 
be recognized as a refinement of the former. The first algorithm which will be presented is one which 
computes the square- free factorization of a given polynomial. These factors will constitute the denominators 
for both of these partial fraction decompositions. This algorithm will be followed by a theorem which 
bounds its computing time. Then, to obtain the numerators i~ the square-free partial fraction decomposition, 
I will first describe and analyze the approach suggested by Hermite [5] and implemented by several others, 
e.g. [3]. A new method for square-free partial fraction decomposition will then be derived and shown 
to be computationally more efficient than the previously used method. An algorithm based on this new 
method will be formally presented and analyzed. In ~deriving a method for producing the complete square-free 
partial fraction decomposition, two sub-algorithms are needed. The first actually reduces the partial 
sums of the square-free decomposition while the second controls its application. Several theorems will 
be presented which establish the exist- ence of a certain type of polynomial with integer coefficients 
which occurs in the re- duction to the complete square-free decomposi- tion. The existence of these polynomials 
allows for a more efficient algorithm. Let us now begin with the algorithm which computes the square-free 
factorization of a primitive polynomial. A univariate polynomial with integer coefficients, A(x) is 
primitive if the greatest common divisor of its coeffic- ients is one, [7]. Similarly, the content 
of A(x), abbreviated cont(A), is equal to the greatest common divisor of the coefficients of A. Given 
an arbitrary polynomial A(x)~ l[x] such that A~U(f,n), then the time to compute its content and primitive 
part (abbreviated pp(A)) is O(n(In f)2). For a proof of this result see [i]. Throughout the remainder 
of this paper, let idcf(A) stand for the leading coefficient of A(x). Algorithm PSQFRE (B) Input 
BEI[x],B#O,B primitive,deg(B)>0, idcf(B)>0; Output A list L=(Bi,...,B k) where Bi61[x] for l<i<k and 
 B= H k B.i is the square-free i i=l factorization of B; I) I+0 ;Q÷0 ;D÷O ;P÷i ;A÷B ; 2) E÷gcd(A,A') 
; If deg(E)#O,do(F+A/E;go to (4)) 3) F÷A; 4) If I=0, go to (7); 5) If deg(D)#deg(F),do(Adjoin D/F 
to Q; go to (7)); 6) Adjoin P to Q; 7) If deg(E)#O,do(l+l;A÷E;D÷F;go to (2)); 8) Adjoin A to Q; 
9) L÷INVERSE(Q) ; i0) Return; Note that if k>l, then D=IIi=iB i k for J=l ,..., k-i at successive 
executions of step (7) and _ k i-j+l E-Hi=jB i for j=2,...,k at successive executions of step (2) 
in the algorithm. If the polynomial B is initially square-free, then the gcd(B,B') in step (2) has degree 
zero and hence Algorithm PSQFRE(B) performs only one greatest common divisor calculation and then terminates. 
If BeU(f,n), then the minimum computing time for PSQFRE(B) is O(n3(in nf)2). In any case, step (2) is 
 executed k times, where B is the square-free factorization k i B=Hi=iB i Theorem 3.1. Let BEl[x],B#0,n=deg(B) 
and [li=iBi and factorization of B. ik square-free k i Let fi=norm(Bi)for l<i<k and f=Ili=ifi . Then 
 the computing time for PSQFRE(B) is bounded by O(kn3(In nf)2). Proof: The times for steps (1),(3),(4),(6), 
 (7),(8), and (9) are bounded by O(k). The successive values of A at step (2) are . 2 B k 2 k-i B k 
iB~,Bk Each of BiB 2. . k,B2B3  .B k ,... , _ ~ these polynomials belongs to U(f,n) and hence their 
derivatives belong to U(nf,n). The time for one execution of step (2) is O(n3(in g)2) and hence the total 
time for step (2) in O( n3(ln nf)2)=0(kn3(ln nf)2). i=l In step (5), the successive values of D belong 
to U(f,n) and the values of D/F belong to U(f,ni) , where ni=deg(Bi). Hence, the total time for step 
(5) is 2~-- k- i 0 "n(in f)2)=O(n(in f) hi< i=ini --, i=l O(n2(in f)2). Now that we have investigated 
the determination of the square-free factorization of B, let us examine how we might determine the polynomials 
 A. such that l Ik i is the square-free A/B = Ai/B i i=l partial fraction decomposition of the regular 
 rational function A/B. Assume that the Bi, l<i<k have already been calculated. Hermite has suggested 
that we use the following proce- dure: i) F0÷A; C0+B; 2) For i=2,...,k do  444 2.1) Ci_ I + Ci_ 2 
/ Bi-l; i-i 2.2) Find Fi_ I, Ai_ 1 such that i-i + Ci-where Fi-i Bi-i Ai-i 1 =Fi-2' deg(Fi_ I) < 
deg(Ci_ I) , i-I deg(Ai_ I) < deg (Bi_l) ; 3) A k + Fk_l;  The difficulty is in step (2.2). We know 
that in general Fi_ 1 and Ai_ 1 will have rational number coefficients. One method of solution would 
be to equate coefficients. If ii-1 n = deg(B _i ) + deg (Ci_ I) this approach would produce n linear 
equations in as many un- knowns. It is known that the time.needed ~o D  solve such a system exactly 
is 0(n (in nf) ), where the elements of the matrix and the right- hand side are integers bounded by the 
postive integer f. This computing time applies if we use either the exact division method over the integers 
or Gaussian elimination over the rationals. Also, the numerators and denomi- nators of the elements of 
the solution vector will be bounded by (nf) n. This follows dir- ectly by applying Hadamard's theorem, 
 1  det(E) <_ IIn {I n e 2 }2 to any matrix i=l J=l i,j  E = (el,j) nxn where [ei,jl <_ f. We can 
apply these results to solving for Fi_ 1 and Ai_ 1 in (2.2). However before wedo we realize that to 
obtain all the numerators, the A i, we must perform step (2.2) for 2 < i < k. It must be noted that 
one of the outputs--of step (2.2) is Fi_ I. Then, Fi_ 1 is used as input to step (2.2) in the next 
iter- ation. If f. = norm (B.) and 1 1  f =ilk i i=l fi' then f is a bound for the co- i-I and C 
for all iterations.  efficients of Bi_ 1 i-i However, if the numerators and denominators of the coefficients 
of F are bounded.by f, O  then the coefficients of F i (which are elements of the solution vector 
of a linear system) will be bounded by (nf)n and the corresponding bound for F 2 will be (n(nf)n) n. 
If we continue the analysis we will find that the total com- puting time for solving step (2.2) for 
 2 < i < k using an algorithm for solution of linear--systems is an exponential function of n and k. 
 Suppose instead that we consider an alternative way of implementing step (2.2), namely by using the 
extended Euclidean algorithm for poly- nomials, see [7] pp. 377. A new, fast al- gorithm has~been developed 
which has a computing time of 0(nJ(in g)Z) where n bounds the degree of the inputs and g bounds their 
norms. Initially, this would seem to be better than using the linear systems approach. However, if we 
use the bound for the coefficients of Fi_ 1 and Ai_ 1 that was obtained in the analysis of the extended 
Euclidean algorithm, we would again arrive at a total computing time which is an exponential function 
of n and k. This growth of the coefficient bound leads us to consider a non-iterative approach for deter- 
mining the numerators of the square-free par- tial fraction decomposition. Given the regular rational 
function A/B, let Ai/B be the square-free partial  i=l fraction decomposition of A/B, the coefficients 
of A. being rational numbers. Let n = deg(B), 1 n. = deg(B.) and E = B/B. i for i < i < k. i 1 l ---- 
 Then, if we consider the equation k I A.E  A = I=i i i where the coefficients of the A. are undeter- 
mined, we can equate the corresponding coef- ficients on the two sides of this equation. This will produce 
an nXn linear system of equations whose solution contains the coef- ficients of the numerators in the 
square-free decomposition of A/B. Let us examine more closely what this system will look like. ~-'~in.-i 
~--~n-in i If Ai(x) => i jx j El(X)= ) e i , ai, f___jJ=O 'JxJ L__,j=0  then Ai(x) Ei(x) =)n-l~--c. 
.x j where 1,3 j=0 y ini-i  Ci,k= L--"J=k-n+ini ai,jei,k_ j for 0 < k < n-l, where j < 0 or k-j < 
0 implies aij ei,k_j = O. The coefficient of x j in A i E i is given b c i . If we i=l f__,i= I 'J 
 consider the matrix which is formed from these coefficients, we see tha~ we have k distinct groups of 
columns, the i ~h group consisting of the coefficients of E.. Thus we are able to derive the following 
imatrix: LA B~I where 0, . . . . . , 0, el, n-n I' el, n-nl-l' el, n-n I, . e I, n-n I-I'. el, 
n-nl' el, I' el, n-nl-l' A = el, O' el, I (3 .I) 0 el, 0 0 . el, I 0 0 , .. .... el, o , k V J 
n I columns ek, n_kn k, 0 ..... O ek, n-knk-l'ek, n-knk. ek, n_knk_ 1 , 0 ek, n-kn k = B (3.1) 
 ek, 1 "ek, n-knk-i ek, 0' ek, I' 0 ek, 0 4 ek, 1 0 0 , ek' 0 k V" kn k columns If this matrix 
is called E and if A(x) = i n-i "x j we obtain the linear system a 3 , j=0 Ey = F where y=(al,nl_l,...,al,O,... 
,  Examining E columnwise, we see k distinct groups, the i th group consisting of in i ad- jacent columns, 
for i < i < k. The i th group consists of columns which contain the coefficients of E. with possibly 
 i leading and trailing zeros Hence, we see that to form the matrix E, we need only compute E i = B/B~ 
for 1 ~ i ~ k. Also, if fi = n°rm(Bi) k i then f is a bound for the  and f = ~i= 1 fi ' elements of 
E. Morever, the elements of the solution vector, which are the coefficients of the Ai, have numerators 
and denominators which are bounded by (nf) n provided f is also a bound for the coefficients of A. Thus, 
this provides a good bound for all of the coef-ficients of the A i. Furthermore, we now have a new method 
for obtaining the square-free partial fraction decomposition and the comput-ing time will be the time 
needed to solve a single linear system, O(n5(ln nf)2) Suppose instead that we reconsider using the extended 
Euclidean algorithm with the new bound we have just derived. Substituting (nf)n for g and applying the 
algorithm k -1 times we have that the computing time is k 0 ( I n3(n in nf) 2) = 0(kn5(in nf)2). i=2 
This is clearly not superior to 0(nb(ln nf) 2) which we obtain by solving a linear system. In [2], a 
more efficient algorithm for the exact solution of linear systems has been developed which is based on 
modular arithmetic. The computing time for this new algorithm is 0(n4(in nf) + n3(in nf)2). Therefore, 
I will now present an algorithm for square-free partial fraction decomposition which is based upon solving 
the matrix E. A subprogram, MUSSLE has been developed which takes as input an n by n non-singular matrix, 
E, and an n element vector F, both with integer entries. The n+l vector of integers, (go,gl,...,gn) is 
returned such that go= det(E) and EG=F where G=(gl/go,...,gn/go). The integers gi are bounded by (nf) 
n for o ~ i ~ n, if f bounds the elements of E and F. The computing time for MUSSLE is O(n4(ln nf) 
+ n3(ln nf)2). For the precise specifications of MUSSLE, see [2]. ak,knk_ 1 ..... ak, 0) and F=(an_l,an_ 
2 ..... a 0) . (3.2)  446 Algorithm RSQDEC(A/B) Input: A non-zero, regular rational function A/B, 
where deg(B) > 0 and idcf(B) > 0; Output: A list L = (X,Y,Z) where X= (A 1 ..... Ak), Y= (B 1 ..... 
B k) and Z = (v I ..... Vk). Ai,B i 6 l[x] v E I and A/B = ' i ~k Ai/viB ~ is the square-free i=l partial 
fraction decomposition of A/B. If B i = i, then A i = 0 and v i = i. Otherwise, deg(A i) < deg(B~), 
v i > 0 and gcd(v i, cont(Ai)) = i;  i) b ÷ cont(B) ; B ~ pp(B) ; X~ Z ~0; 2) Y ~ PSQFRE (B) obtaining 
Y = (B 1 ..... Bk) ; k ÷ LENGTH(Y); 3) If k = i, do (L = ((A), (B), (i)) ; return); 4) For i = i,..., 
k-i do (If deg(Bi) ~ 0, go to (5)); 4.1) Adjoin A to X, b to Z; 4.2) For i = l,...,k-i do (Adjoin 0 
to X, 1 to Z); 4.3) L = (X,Y,Z) ; return; 5) Create the matrix E as defined in (3.1); Create the vector 
F as defined in (3.2); 6) Use MUSSLE(E,F) to solve for the vector G: EG = F where E is nxn, G = (gl/go 
..... gn/go ) and = (go,gl ..... gn); 7) w ÷ b.go, 8) For i = l,...,k do 8.1) m + deg(Bi) ; If m = 0, 
do (Adjoin 0 to X, 1 to Z; go to (8.6)); 8.2) n ÷ im; Take the next n elements of G and create polynomial 
A.. i  8.3) h ÷ gcd(w,cont(Ai)) ; 8.4) v ÷ w/h ; A i ÷ Ai/h ; If v < 0 do (v ÷ - v; A i + -Ai) ; 
 8.5) Adjoin A. to X, v to Z; i  8.6) Continue; 9) X + INVERSE(X); Z + INVERSE(Z) ; L ÷ (X,Y,Z) : 
 i0) Return; Theorem 3.2 Let A/B be a non-zero, regular rational function, deg(B) > 0 and k B i the 
square-free factorization of B. b Hi= 1 i Let fi = norm (B i), n i = deg(Bi) for l <_ i <_ k, and let 
f = max {norm(A), bll'~1=l fi'}'l Then, the computing time for RSQDEC(A/B) is 0(kn3(in nf) 2 + n4(in 
nf)). Proof: Step (1) takes 0(n(In nf)2) . By Theorem 3.1 step (2) takes 0(kn3(in nf)2). The time for 
steps (3) ,(4) ,(9) , and (i0) is bounded by 0(n). The time to form the matrix and right-hand side in 
step (5) is 0(n2(in nf) 2) and the elements of E, F are bounded by f. Hence, the time for step (6) is 
O(n4(in nf) + n3(in nf) 2) and the elements of G are bounded by (nf) n. Step(7) takes 0(n(in nf) 2) . 
Steps (8.1) , (8,2) , and (8.5) are bounded by 0(n) and the time for steps (8.3) and (8.4) is O( inin2(ln 
nf) 2) = O(n3(ln nf)2). i=l Hence, the total time for RSQDEC(A/B) is 0(kn3(in nf) 2 + n4(in nf)). I 
have now presented an algorithm for obtaining the square-free partial fraction decomposition of a regular 
rational function, i ~k the com- A/B = Ai/v i Bi, where i=l  puting time is bounded by 0(n4(in nf)2) 
. This algorithm is faster by at least one order of magnitude then the algorithms which resulted from 
iteratively applying either the extended Euclidean algorithm or the solution of a linear system to the 
determination of the A i. Before we can apply Hermite's reduction process, the partial fractions Ai/B 
~ for i > 2 must be 1 -- decomposed further into a sum of partial fractions Ai/B~ = ~i=i Ai,3"/B~'i 
In this'case, either Ai. j = 0 or deg(Ai,j) < deg(B i) for i ~ j ~ i. We know that in general, the 
coefficients Ai, i ~ are rational numbers. The following of bin-n-i+!(i-l)_ n qm-i+l Dj-m+n+i-I j x theorems 
will show that sition over I exists in in fact a decompo-the form Ai/B = = m-i ~J=0 _m-n-i+l On (i) j 
qj x . (i/b m-n+l) Ai,j/BJ i where b = idcf(B i) Theorem 3.4 Let A and B be non-zero poly- nomials 
over an integral domain I, with j=l m = deg(A), n = deg(B) and m > n > 0. n i Z Let B(x) li=0bi x and 
A(x) = m = deg(Ai), n = deg(B i) and Ai, j E l[x] such that either Ai, j = 0 or ~=0ai(bnX) i where 
ai,bi E I. Then, there deg(Ai, j) < deg(B i) for i < j < i. exist Q and R over I such that A = BQ + 
R, either R = 0 or deg(R) < n, and Q is of the Theorem 3.3. Let A and B be non-zero poly-m-n i form 
Q(x) = li=oqi(bn x) where qi 6 I. nomials over an integral domain I, with m = deg(A), n = deg(B), m 
> n > 0. Let Q and R be the unique polynomials o--ver I such that vm-i (i)xJ  Proof: Suppose Ai(x) 
= Lj=0a j for b m-n+l A = BQ + R, with h = idcf(B) and n n  either R = 0 or deg(R) < n. Then there 
 0 j i J m-n+l, and let Ao,Ai, .... Am+n_ 1 exist qo,...,qm_n E I such that Q(x) = he defined by A° 
= A, Ai(x) = m-n i li=0 qi (bnX) "a(i-l)/b ) , B(x)- x m-n-i+l Ai-l(X) -~ m-i+l n x i Proof; Let B(x) 
= ~n b i , Q(x) = for 1 j i ~ m-n+l. Then we define Q(x) = i=O m-n--a(i~/bn li=oqi xi where qm-n-i 
= m- I m-n- i im-i (i)xJ i=0qi x and Ai(x) = aj , for  for 0 < i < m-n. If we can show that A. j=0 
0 <_i<m-n+l and let A0,Al,...,Am_n_i+ 1 be m-i ~i) J is of the form Ai(x) = [J=0 q (bnX) ' defined 
by A 0 = bm-n+lAn 'Ai(x) = q i) E I , for o _ < i _ < m-n . Since m-n-i+l  Ai-i (x) (a(i-l)/bm-i+ln 
)" B(x) " x , for m -i > m -(m-n) -I = n -1 > O, it follows that Q is over I and has the form a (i) 
/b for 1 _< i <_ m -n+l. Then q m_n_i = m-i n vm-n *, i+n-i i vm-n (bnX) i Q(x) = Li=oqiDn x =Li=oqi 
We 0 _< i _< m -n. If we can show that A i is of proceed by induction. the form Ai(x) = Lj=oVm-ibm-n-i+in 
qj(i)xJ' qj(i) E I m i Case (i) : Ao(x) = A(x) = [i=oai(bnX) 0 <_ i < m-n, it follows that q m-n-i = 
 by hypothesis. bm-n-i (i) q for 0 < i< m-n and hence Q(x)  Case (i) : Assume that Ai_ I is of the 
form is of the desired form. We proceed by Ai l(X) = im-i+l (i-l) j  -j=0 qj (bnX) induction. Then 
Ai(x) = Ai_l(X) - Case (i): A0(x) = bm-n+iA(x)n = (a(i-l)/bn) ~n h J +m-n-i+l_ ~m bm-n+l i m-i+l LJ=o-jX 
- x so A0(x) is in the a i , i=O n ~m-i+l q(i-l) Ai-l(X) -~j=m-n-i+l m-i+l desired form.  bm-i 
Case (i) : Assume Ai_lhaS the form Ai_l(X) = n b J-m+n+i- ixJ~ ~m-j (i) j J=0 qJ (bnX) "" im-i+l bm-n+2-i 
q~i-1)xJ J=O n  Theorem 3.5. Let A and B be non-zero poly- Then Ai(x) = Ai_l(X) -(b~ -n-i+2  nomials 
over an integral domain I, with m = deg(A), n = deg(B) and m > n > 0. Let (i-l) Ib II n b x j+m-n-i+l 
 b = idcf(B) and k = [m/n] + i. Then there qm-i+l" n" j=0 j =  exist polynomials Ai,...,A k over I 
such that ~m-i+l.m-n+2-i (i-l)xJ im-i+l A/B k = (i/hm-n+l) ~ k1=.1 Ai/Bi and where either j=O Dn qj 
-j =m-n-i+l A i = 0 or deg(A i) < n for i j i ~ k. 448 Proof: By Theorem 3.3. there exist poly- nomials 
Qi' A k over I such that bm-n+in A=BQi + A k an~ either A k = 0 or deg(A k) < n. Also, Q1 is of the 
form Ql(X) = Im-n ° .. i=O qi (bx)i Now assume that Qi' "'Qi and Ak,Ak_l,...,Ak_i+ 1 have been defined, 
that deg(Qi) = m -in and that Qi has the form Qi(x) = ~m-in (i) J=0 qj (bx)J If i + 2 j k, then i + 
i > [m/n]. m > (i+l)n and m-in>n. We then define Qi+l' Ak-i' using Theorem 3.4 by Qi = BQi+l+Ak-i where 
either Ak_i=0 or deg(Ak_ i) < n. If i+l = k, then i = [m/n], m < (i+l)n and m-n < n. We then define 
Ak_ i = A 1 = Qi = Qk-l" Then b m-n+l A = BQ I + A k and Qi = BQi+i + Ak-i for i ~ i j k-2. It follows 
that A/B k = (i/b m-n+l) [~=l(Ai/Bi) and either A i = 0 or deg(A i) < n. Theorems 3.3, 3.4, and 3.5 
establish the fact that we can decompose A/B k in the form A/Bk=(i/b m-n+l) ~=I(Aj/BJ) where k = [m/n] 
+ 1 and either Aj -0 or deg(Aj) < deg(B) for i ~ J ~ k. In general, one needs a decom- position of the 
form A/B i = (I/b m-n+l) [k (Aj/B j+i-k) so we take Aj -- J=l can = Aj+k_ i for i -k + 1 j j ~ i and 
Aj = 0 for i ~ j ~ i -k and obtain the required decom- position. We will apply this procedure to the 
partial fractions in the square-free partial fraction k i  decomposltion A/B = ~i=l (Ak/viBi). We will 
 then obtain the complete square-free partial fraction decomposition in the form A/B =  Ll(I/wi) where 
either Ai,j° 0  or deg(Ai~ j) < deg(B i) for 1 j J J i, l<i<k. An algorithm is now given which performs 
this decomposition. Algorithm PCDEC(A,B) Input: A,B E l[x], A,B # 0, m = deg(A), n = deg (B), m ~ 
n > O; Output: The list (X,b) where X = (Ak,...,Ai) and b is an integer such that k = 449 [m/n] + 
1 and A/B k = (l/b)" ~=iAj/B j. Also, b = idcf(B) m-n+l and either Aj = 0 or deg(Aj) < deg(B) for 
i < j _< k; I) m÷deg(A) ; n~--deg(B); b+ Idcf(B)m-n+l; X÷0 ; 2) Q÷ b,A; 3) Obtain Q,A E I[x] : Q 
= BQ + and either A = 0 or deg(A) < n; 4) Adjoin A to X; 5) If deg(Q) ! n, do (Q÷ Q; go to (3)); 
6) Adjoin Q to X; x÷ INVERSE(X); 7) Return;  Theorem 3.6. Let A,B E l[x], m = deg(A), d = norm(A), 
n = deg(B) , e= norm(B) , m > n > 0 and i = [m/n] + I. Then, the computing time for PCDEC(A,B) is O(i2n2(ln 
e) {in d + i2n(In e)}). Proof: The time for step (i) is 0(m2(in e)2). The time for step (2) is o(m2(ln 
d)(in e)) and norm (Q) < de m-n+l. Steps (3) -(5) are executed i-I times. At the jth execution, Q E 
U(d(l + e) j(m-n+l) , m -(J-l)n). The time to obtain Q,A is o(n(m-n+l)(In e)(In d + (m-n+l)(in e))), 
see [2]. Letting m -(J-l)n replace m and d(l+e)J(m-n+l)replace d we have that the total time for step 
(3) is n(m-jn+l)(in e) {In d(l+e)J(m-n+l)+ .=   0( ili (m-jn+l)(in e)}). Now, m = 0(in) and m-jn+l 
_< J(m-n+l), so the time for step (3) is 0(i n2(in e) {In d + j(m-n+l)(in e)}) i -1 j=l = 0(i n2(In 
e){i(in d) + i3n (in e)})." Steps (4), (5) and (6) are bounded by O(i). If we view PCDEC as a subpart 
of the complete algorithm for partial fraction decomposition then empirical tests have shown that the 
time spent on PCDEC is a small fraction of the time for the entire algorithm. We can combine RSQDEC and 
PCDEC to produce an algorithm which obtains the complete, square-free partial fraction decomposition 
in the form A/B = ~ k ~i . /BJi where (i/wi) Ai, 3 , i=l j=s i  if Bi = i, Si = i, Ai, i = 0 and wi 
= i. Otherwise 1 < si _< i, wi > 0 and either Ai,j=O or deg(Ai, j) < deg(B i) for s. < J < i. The 
two main steps would be: i) applying RSQDEC(A/B) to produce A/B = 'k i Y A~/v.B. with a computing time 
of L_~i=l i 1 1 0(n4(In nf)2); 2) applying PCDEC iteratively i to Ai/B i thus giving a computing time 
of 0( i ni (in f) {n(in nf) + =2 k  2 f)}) O(n(in nf) 2Ii i ni(in < (i2n2i+i3ni2)) =2  = 0(n(in 
nf)2(n 2 + kn2)) = 0(kn3(in nf)2). Therefore, the time for square-free decomposition bounds the computing 
time for complete square-free decomposition. For a precise statement of this final algo- rithm see [2]. 
 Before leaving this section it is necessary to derive good bounds for the sizes of the coefficients 
in the complete square-free partial fraction decomposition. This is so because these coefficients are 
manipulated by Hermite to obtain exactly the rational part of the integral. Therefore let A/B = I Ai,j/B 
~ where Ai, j E Q[x], i=l j=l  Ai, j = 0 or deg(Ai, j) < deg(B i) for i _< J _< i be the complete 
square-free partial fraction decomposition over the rationals of A/B. We wish to have bounds for the 
numerators and denominators of the coefficients of the Ai, j. For a given i, considers the rational 
function i-i i (Ai, i + Ai,i_lBi + ... + Ai,iB i .)./B i" If ni = deg(Bi) ' fi = norm(B i) and if we 
 consider the coefficients of Ai, ~ as undetermined, we then have ini indeter- minates. Hence, if we 
consider \ A/B = Ai,jB'-J . B/B /B i=l j=l 0  we can construct a linear system of order n = deg(B) 
by equating the corresponding coefficients in yhe numerator. If f = max k i  {n6~m(A) ; Hi= I fi}, 
then the elements of this linear system will be bounded by f. The the coefficients of the Ai, j and 
so the numerators and denominators of these coef- ficients are bounded by (nf)n. In order to empirically 
compare the efficiency of these algorithms several classes of rational functions were used as test data. 
Consider the following class of rational functions: poly- nomials Bi(x) with random integer coefficients 
 bi, j were generated such that deg(B i) = 1 and Ibi,jl ! 29 for j = 1,2, i ! i ! n; then n i (x) is 
a Bn(X) = Hi=IBi(x) is formed. An random polynomial such that deg(An)= deg(Bn)- and the coefficients 
of An(X), an, j , satisfy ]an,j[ ~ 29; then the rational functions Rn(X) = An(X)/Bn(X) are formed for 
n = 1,2,... In Figure 2 below the rational functions R (x) n were used as input to two algorithms 
RDEC and QRDEC. RDEC obtains the complete square-free partial fraction decomposition of A/B in the form 
I (i/wi) Ai,j/B ~ and it uses i=1 j=l the algorithms RSQDEC and PCDEC. The second algorithm, QRDEC obtains 
a decomposition in k i the f°rm A/B =I I Ai'j/B~' where the i=l j=l coefficients of Ai, j are rational 
numbers. The method QRDEC uses is the one suggested by Hermite with all computations over the rationals. 
 Func. RDEC. QRDEC R1 .009 .406 R2 .218 .361 R3 1.193 3.488 R4 3.761 18.782 R5 17.929 100.406 FIGURE 
2. (seconds) 4. Rational Function Integration Given the complete square-free partial fraction decompositon 
of A/B = (i/wi) Aij/B ,we are now i=1 j=l ready to apply Hermite's reduction process to the partial 
fractions Ai,j/B l~ for T elements of the solution vector are simply "~-Jj=l 450 2 < i < k. Since 
B. is square-free, we know that deg(gcd(Bi,Bi)) = 0 and hence that there exist polynomials Ci, Di E Q 
[x] such that I  CiBi + DiB i = Ai, i. For proofs of these assertions see [7], pp. 377. If deg(Bi) 
= 0, then Ci = 0, Bi = Ai,i/Bl.. Otherwise, ")  deg(C i) < deg(B~) and deg(Di) < deg(B i . Ci and 
Di may be obtained by the extended Euclidean algorithm for polynomials. Then by substitution am+ 
 7 DiB I dx. Using integration by parts on the second term of the right-hand side of this for- mula 
we get that I{Ai,i/Bii}dx = 7{Ci/B~-l}dx -Di/(i_l)Bii-i  + I D J(i l>dx = + + Hence we see that by 
using this procedure we have reduced by one the power of B i  which is within the integral sign. If 
 we continue in this manner we would next find polynomials Ci_l, Di_ 1 such that Ci_iBi + Di_iB i = 
(Di' + (i-1)C i + (i-l)Ai,i_ I) = Ai,i_ I. We would then * 7 {Ai,i_i/B ii-l}dx  substitute for Ai,i_ 
1 in * and perform integration by parts again. Eventually we arrive at { Ai,j/B~}dx = -Dj/(i-l)... 
J=l =2 (j-i)B~ -I + 7{Ti/Bi}dx where Ti is a polynomial either zero or deg(T i) < deg(Bi). By Theorem 
2.9 we know that Ti/B i is f stricly transcendental and thus we have exactly found the rational part 
of { Ai,j/B ~ } dx. If we apply j=l this process for 2 < i < k, then we will obtain two rational--funCtions 
S,T such that rational part of this integral. Note that k-i S,T are of the form S = U/B2B ...Bk and 
 T = V/BiB 2. ..Bk. I will now present two algorithms which represent an implementation of Hermite's 
method. The first algorithm applies the reduction process Just described to a sum of rational functions 
of the form i /B~. The second algorithm takes Ai,j J=l  as input a regular rational function and 
determines its rational part exactly. It does this by first performing partial fraction decomposition 
and then applying the previous algorithm iteratively. The computing time analysis for this last algorithm 
and hence for this implementation of Hermite's method is presented. Afterwards, a new method for determining 
the rational part of the integral of a rational function will be derived and analyzed. Algorithm HERM(A,B,il 
 Input: A non-null list of polynomials = (A1.....Ak), B E I[x] and an integer i > 2 such that 1 < k 
< i, deg(B) > 0, B is square-free and either Aj = 0 or deg(Aj) < deg(B) for 1 J J j k;  Output: (R,T) 
where R,T are regular rational functions such that k 7{ ~ Aj/Bi+l-J}dx = R J=l + J T dx and R is 
the rational part of the integral;  i) R~0; h~l; S~Ai; 2) Z~-PEGCD(B ,B') obtaining C,D E l[x], r 
E I such that CB + DB' = ~. (Polynomial Extended Euclidean Algorithm);  3) For J = i..... 2 do 3.1) 
Z ~EGCD(S,B,B',C,D,r) obtaining C,D 6 I[x], r E I such that CB + DB' = rS; 3.2) Z~---INTPTS(C,D,r.h,j) 
obtaining G,H 6 I[x], g,h E I such that  f{A/B}dx = S(x) + ~T(x) and S(x) is the ~',{S/h BJ}dx = G/g 
B j-I + {H/h B j-l} dx; 3.3) R~R + G/gBJ-i; 3.4) If A is empty or A i = 0 do (S~H; go to (3.6);) 3.5) 
S~H + h'A.; i  3.6) If A is empty and S = O, go to (4);  4) T+S/h'B; 5) Return; The exact specifications 
of algorithms PEGCD, EGCD and INTPTS are not given here because of their length. The operations they 
perform can be easily understood from the algorithm description of HERM. A computing time analysis of 
HERM produced the result that if A.i E U((nc) n , n i) B E U<(c,n i) the com- puting time for HERM((A 
i ..... Ak),B,i) is O(in3(in ne) 2 + n 7 -n2(in nc)2). This result will be used in the next algorithm, 
RHERM, which represents an implementation of Hermite's method. Algorithm RHERM(A/B) Input: A non-zero 
regular rational function A/B, with deg(B) > O, idcf(B) > 0 and gcd(A,B) = i; Output: (R,S) where R is 
a regular rational function, S is a list of regular rational functions, S = (S I ..... Sk) such that 
 AIB}dx = R i=l and R is the rational part of {A/B} dx; i)R~- S~- 0 ; 2)Z~ RDEC(A/B) obtaining Z = (Li, 
L2, L3), Li = ((Al,l), (A2,2, A2,m2 ) ..... (Ak, k ..... Ak,mk)), L2 = (B I ..... B k) L3 = (Wl,...,w 
k) such that A/B k   =y (1/w i) Ai,j/B ; i=l j=m. 1  3)If k = I, do (St--A/B; return); Otherwise, 
adjoin Ai,i/WlBi to S; 452 4) For i = 2,...,k do 4.1) If B i ffi l, do (Qi÷0; go to (4.4)); 4.2) Z 
~HERM(Ai,Bi,i) where A i = (A i i,...,Ai ) obtaining Pi,Qi , ,m i such that =m i Qidx; 4.3) Pi 
÷Pi/wi ; Qi ÷ Qi/wi ; 4.4) Adjoin Qi to S;  5) For i = 2,...,k do (R÷ R + P.); i  6) S÷ INVERSE(S); 
Return; Theorem 4.1. Let A/B be a non-zero regular function and (i/wi) Ai, /B 7 the complete i=l =i 
J  square-free partial fraction decomposition of A/B. Let n = deg(B), fi = n°rm(Bi)' k fi i f = Hi= 
1 and D/E the rational part of f{A/B}dx. Let c = max{norm(A), norm(D),f}. Then, the computing time for 
RHERM(A/B) is O(k3n5 (in nc)2) . Proof: Step (i) takes 0(i) and by Theorems 3.2 and 3.6, step (2) takes 
O(n4(In nc)2). Also, Ai, j e U((ncln,ni ) , Iwil <_ (nc) n Step (3) takes O(n2(in nc)2). Steps (4.1), 
 (4.4) are bounded by O(k). Step (4.2) takes Ik 3 2 2 O( {i n3(in nc) 2 + nin (in nc) }) = i=2  0(n5(ln 
nc)2). Also, at the i th iteration, the numerators and denominators of Pi,Qi E U((nc)(i+l)n+2,ini ) . 
Therefore, step (4.3) takes O( i n. i n2(in nc) 2) = 1 i=2 0(k n3(ln nc)2) . The time for step (5) 
is bounded by the time to reduce the rational function R to lowest terms which is i k 2( 2) O( (i n. 
i n In nc) = i .= 1 2 ~k 5 3 O(n2(ln nc) 2 i n i) = 0(k3n5(ln nc)2). i=2 Hermite's method has been 
intensively studied, algorithms specified and computing time analyses done. In searching for better bounds 
for the coefficients of the outputs of this method an entirely new method was discovered. Moreover, the 
algorithm which is derived from this method will be at least one order of magnitude faster than this 
efficient implementation of Hermite's method This method is now presented Let A/B be a non-zero regular 
rational function, deg(B) > 0 and let A/B = ~k ~i Ai, /B~ constitute the complete i=l j=l j square-free 
partial fraction decomposition of A/B over the rationals Then, by Hermite's method we are able to obtain 
polynomials C,D such that 2 k-i  A/B}dx = C/(B2B 3. ..B k ) + fD/(B I. . .B k) }dx, (4.1) k-i  where 
C/B2...B k is the rational part of the integral. Suppose C and D are undeter- k-i mined and note that 
B2...B k and B1...B k are easily calculated from B, see Section 3. Then, differentiating both sides of 
(4.1) we get  C,(B 2 . k-I k-i A = "'Bk ) -C(B2"''Bk ) + D B (B2"" "B~--'L i)2 Bl'''bk k-i  = {C'(B 
l"'-Bk) (B 2. ..B k ) - k-i k-i 2  C(B I. .Bk)(B 2 ..B k )' + D(B 2 .... B k ) } _k-l. 2  /(Bi" 
" "Bk) (B2" " "Bk ) (4.2) We now prove a theorem about the form 2 Bk-l) , of (B2B3... k Theorem 4.2 
Let B k i = ]li=iBi, k > 2. Then k i-I B ' = (Hi=2B i ) (I k i B 1 i=l "" "Bi-iBi Bi+ I" "'Bk)" Basis: 
k = 2 and B = BiB22. , 2 Then B' = BiB 2 + 2BIB2B 2 = B2(BiB 2 + 2BiB~). 2 k Induction : Let k > 
2, B = BiB2 ..B k and 2 k-i suppose that (BiB2...Bk_i)' 2 k-2 = (B2B3...Bk_i) k (~i=l I Bi'''Bi_iB~Bi+i''.Bk_i). 
 2 k-l,k Then B' = (B1B2...Bk_i) B k + (BiB~. k-I k-I .Bk_l)kB k Bkl 2 k-2 k-l- = (B2B3. .Bk_iB 
k ) (~k-i i B I i=l "''Bi-iBiBi+l ..Bk_iB k) + (B2B ~ k-2 k-I ''Bk_ I B k ) (k BIB2...Bk_iB~) 
= (B2B23" " "Bk-l)k (Iki=l i Bi...Bi_iB~Bi+ I. ..Bk)  It follows immediately that, for k > 2, 2 .B 
k k-i ) , = (B3B~. Bkk-2)  (B2B 3 . . . . k ( .. , . (~i=2 i-l)B2" Bi-IBiBi+l" " "Bk) Then, applying 
Theorem 4.2. to equation (4.2) we get A/B = {C'(B I. .Bk)(B 2. B k-l) - " " k  CBi(B2B2 3 Bk-l) (~ki=2 
(i-l) B 2 "'" k "'"  Bi_iB~Bi+ I.-'B k) + k-i 2 D(B 2. .Bkk-l)2}/(Bl...B k) (B 2. .B k ) ={6'(Bi.. 
B k) c(~ki=2(i-l)Bl  "Bi_IB~Bi+l.. "B k) k-I (Bi...B k) (B2...B k ) k-i  + D(B 2. ..B k } (4.3) k-l) 
 But B = (Bi...Bk)(B2. .B k and so we can equate coefficients of like powers in the numerators of 
(4.3) This will produce an n x n linear system where n = deg (B) and so we can solve for C and D. In 
Sectfon 3 it was stated that the computing time for solving such a system is O(n4(in nf) + n3(lnnf) 
2) where n is the order of the system and f is a bound for the elements of the matrix and the right- 
 hand side. Therefore, this algorithm should be at least one order of magnitude faster than Hermlte's 
method Let us now take a closer look at the linear system which is formed under this new procedure. 
 Given A/B, the non-zero let n ~- deg(B) regular and B rational ki i= l[ =iBi function the + Cm_2Wn_m_ 
I + dn_m_3V m + square-free ~m i = i=o vix i [n-m uix i=0 factorization of B. k i-i Ilk= 2 B i , U(x) 
= Ill= 1 Bi, and W(x) = Let V(x) = dn_m_2Vm_l + dn_m_iVm_ 2, ...°.,.........o......°,.... n-m-i i=O wixi 
= k -Zi=2 {(i-l)B ...B .B'B I i-± i i+l a 2 = 3c3u 0 + 2c2u I + ClU 0 + c2w 0 + ...Bk}, We will determine 
the polynomials C and D by equating coefficients in the ClW I + c0w 2 + d2v 0 + dlV I + d0v 2, expression 
A= Since c:u÷ cw+ 7{A/B}dx Dv. = C/V +J{D/U}dx, C/V and a I = 2c2u 0 + ClU 1 + ClW 0 + CoW i + D/U are 
regular rational functions and we dlV 0 + dov I , can write C(x) = m-i -~i=O i c=xx , D(x) = [n-m-Ii=0 
i dix , and C' (x) = a 0 = ClU 0 + CoW 0 + dov O. m-2 i [i=O (i+l) ci+ix . in-2Then C'U = i=O ieix and 
Hence and F vector if X = (c ... e 0 .. ,do)m-l' ' ' dn-m-l' " = (an_l,...ao) , then X is the unique 
satisfying EX = F, where E is the ei = I m-z J=O (j+l) Cj+lUi-j' following 8 i = m-i, matrix: then let 
e i = n-m-i and CW = n-2 Zi=0 i fi x and fi = m-I Zj=0cjwi-j' and and DV = rn-i i Li=ogi x and ---A = 
gi = m Zj=0di-jvj " 0 j ° . . . . . . . . Therefore a i , = if A(x) = m Zj=o{(J+l) vn-i iLi=0ai x , then 
Cj+lUi_ j + cjwi_ j Wal+BlUa 0 Wc~2+~ lUcK 1 " 0 w +u el C~o + di_jv j } . % % In particular, we have 
~W +U W an_ 1 = dn_m_iV m, w +BlU n-m C~n-m-i W ?2 an_ 2 = Cm_lWn_m_ 1 + (m-1) Cm_lUn_m + dn_m_iVm_ 1 
+ dn_m_2V m, 0 ~lUc~ n-m. . ~o+U I Wl a n-3 = (m-l) Cm_lUn_m_ I + 0 .......... , " u 0 w 0 (m-2)Cm_2Un_ 
m + Cm_lWn_m_ 2 454 m columns B = Vjn~ O, ...... O, O, Vm-l' Vm' vm -Z Vm -1' " @ O. O, @ @ v , O, 
m Q Vm_ l v m v I , v 2 , VIn -1 v 0 , v I , 0 Vo, o V 2 , G, "'v I. v 2 O, O, v O, v 1 O, 0 ...... 0 
Vo) n-~columns  Algorithm RINTG(A/B) Input: A non-zero regular rational function A/B, deg(B) > 0 and 
gcd(A,B) = i; Output: (R,S) where R,S are either zero or regular rational functions, R is the rational 
part of ~{A/B}dx and ~ dx; fA/B}dx = R +  i) b ÷cont(B) ; B÷ pp(B) ; U ÷ i; 2) Z ÷ PSQFRE(B); returning 
Z = (Bi, .... Bk) where B = ~i=lk Bii is the square-free factorization of B; 3) If k=l, do (R+O; S+A/B; 
return); 4) For i = l,...,k do (U+U'Bi) ; VeT/U; i÷deg(V)-l; j÷deg(U)-l; 5) Form the matrix E previously 
defined; Form the vector F previously defined;  6) G<-MUSSLE(E,F) obtaining G = (go,gl,...,gn) where 
n = deg(B), go = det(E) and EG = F where G = (gl/go .... ,gn/go ) 7) The first i elements of G are the 
coefficients of the numerator of R 8) The next j elements of G are the coefficients of the numerator 
of S 9) R÷R/b,V; S+S/b.U; i0) Return; Theorem 4.3 Let A/B be a non-zero regular rational function, 
n = deg(B) > 0, k i B = ~i=iBi the square-free factorization of B. Let fi = n°rm(Bi) and f = max {norm(A), 
k i bHi=ifi}. Then, the computing time for RINTG(A/B) is 0(n5(ln nf)2) o Proof: Step (i) takes 0(n(in 
f)2). By Theorem 3 step (2) takes 0(kn3(ln nf)2) . Steps (3),(4) and (5) are all bounded by 0(n2(ln 
f)2) . The time for MUSSLE is 0(n4(in nf) + n3(in nf)2). Now the numerators of R and S are polynomials 
in U((nf)n,n). Therefore, in step (9) when we reduce the rational functions to lowest terms, the computing 
time is bounded by the gcd operation. This takes 0(n3(n(ln nf)) 2) = 0(n5(ln nf)2) . The theoretical 
computing time for Hermite's method was shownkto be 0(k3n5(ln nc)2). Remember, n =F in i where n i = 
deg(Bi) L--Ji=l and so in general all we can say about k is that is is bounded above by n. For the rational 
functions used in the table below, 1 2  k ~ n . In any case, the theoretical com- puting time for the 
new method, 0(n5(in nf)2), is clearly superior. The empirical studies which were done agree with these 
theoretical bounds. Below, present the results from one set of rational functions which were input to 
both algorithms. R i is a rational function of the form R i = 2 i  Ai/Bi,iBi, 2 ...B. .where Ai,B i 
j E I[x] and they have random coefficients in the range [-29,29]. Also, deg(Bi, j) = i for fTl(X) 
dx.  I ! J ~ i and deg(A i) = B 2 .B i  deg(Bi,l" i,2"" i,i ) -i. Comparsion of Computing Times for 
the New Method vs. Hermite's Method (RHERM) in Seconds Function RINTG RHERM R 1 .001 .017 R 2 .034 
.542 R 3 .886 3.432 R 4 4.412 22.246 R 5 82.684 271.523 5 , Extensions There are three questions 
which arise in connection with the previous work. Can the new partial fraction decomposition and integration 
methods be extended to multi- variate rational functions? What results can be derived for iterated integrals? 
How can the transcendental part be exactly ob- tained? In this section I will mention some results and 
outline some approaches which apply to the solution of these questions. In a natural way we many extend 
the notions of square-free factorization to poly- nomials in n variables. Both of these definitions will 
then make reference to a specific variable. The notion of the rational part of the integral of a multi- 
variable rational function can also be defined. Then, the final methods of Section 3 and 4 will apply 
to n variable rational functions for all n > I. The only difference is that instead of--matrices with 
integer entries, the entries will be polynomials in n-i variables. These poly- nomials are easily obtainable 
when the machine representation for polynomials is in recursive canonical form (i.e. given A(xl, ... 
:x the coefficients of x i are polynomlals in n) Xl,... ,xi_ 1 for. 2 < i < n) . A capability for solving 
exactly a linear system with multivariable polynomial entires is needed. Algorithms for this operation 
are currently being developed. Suppose we wish to find the m th iterated integral ['...~ R(x)dx...dx 
 m m  for some univariate rational function R(x) . We can apply our method iteratively e.g. 7R(x)dx 
= Sl(X) +bTl(X)dx ~7R(x)dx dx = S2(x) +~T2(x) dx + Finally we have that   i Smf:+ dx + ... + . l(X) 
dx...dx.  The computing time for determining S m,Tm,.. . ,T 1 would be lm 2) O( n5(ln nf) = 0(mn5(ln 
nf) 2) i=l if R(x) = A(x)/B(x), n = deg(B) and f bounds all of the coefficients in the numerators and 
denominators of Sm,Tm,...,T I. We can go further if we recognize that the denominators of the T i are 
~3=iBj for 1 < i < m < k where B(x) has the square-free k i factorization Ki=iBi . In fact, we can 
 generalize the method of Section 4 to produce a single linear system whose solution vector contains 
the coefficients of Sm,Tm,...,T I. The consequences of this result are twofold. First, a single bound 
for these coefficients in terms of the coefficients of R(x) is produced. Secondly, the total computing 
time bound for determining Sm,Tm,...,T 1 is reduced to 0(n5(ln nf)2) . Let us return to the one dimensional 
case of R(x)dx = where S(x) is  S(x) +bT(x)dx  the rational part of the integral. There are two 
approaches which can be followed to obtain a more precise answer than fT(x)dx, one numeric and one 
symbolic. T(x) has the form T(x) = U(x)/B](x)...Bk(X), where Bi(x) is square-free-for i < i ~ k. If 
we are given a range of integration, [a,b], we can use a numerical integration technique and apply 
it to a b T(x) dx. Care must be taken if the  poles of T(x) lie within [a,b]. In any case this method 
will work quite well to provide us with a numerical result for the transcen- dental part of the integral. 
 If we try to continue our symbolic approach, we must do the following: i) factor the de- nominator, 
2) perform a partial fraction decomposition and 3) check if the numerators are constant multiples of 
the derivative of their denominators. If (3) is satisfied for all partial fractions, then we are done. 
If not, we continue these three steps, factor- ing first into irreducibles over Q(1) and then factoring 
over successively larger algebraic extensions fields of Q(1). Tobey, in [ii] has given a more thorough 
treatment of these problems. At this time, algorithms for per- forming these operations are extremely 
time consuming and suffer from exponential growth. 456 <RefA>i) Collins, G. E., "Computing Time Analyses 
for Some Arithmetic and Algebraic Algorithms," Proceedings of the 1968 Summer Institute on S~mbollc Mathematical 
Computation, I.B.M. Corp., June, 1969. 2) Collins, G. E. and Horowltz, E., "The SAC-i Partial Fraction 
Decomposition and Rational Function Integration System," Computer Sciences Department, University of 
Wisconsin, Technical Report No. 80, February, 1970. 3) Engelman, C., "MATHLAB: A Program For On-line 
Assistance in Symbolic Computa- tions," Proceedings 1965 F.J.C.C., Spartan Books, Washington, D'C. 4) 
Hardy, G. H. The Integration of Functions of a Single Variable, second ed., Cambridge University Press, 
Cambridge, England 1916. 5) Hermite, Charles, Oeuvres de Charles Hermite, edited by Emll Picard, Vol. 
TII, Paris, Gauthier-Villars, Imprlmeur- Libraire, 1912. 6) Horowitz, Ellis. Algorithms for Symbolic 
Integration of Rational Functions, Ph.D. Dissertation, University of Wisconsin, Madison, Wisconsin, Nov. 
1969. 7) Knuth, D. E., The Art of Computer Pro- grammln~, Vol. II: Semi-Numerlcal Algorithms, Chapter 
IV, Arithmetics, Addlson-Wesley, 1969. 8) Moses, Joel. Symbolic Integration. Ph.D. Dissertation, Massachusetts 
Institute of Technology, Cambridge, Mass., Sept. 1967. 9) Sammet, J. E. An annotated descriptor- based 
bibliography on the use of computers for doing non-numerlcal mathematics. Computing Reviews 7(1966), 
Bi-B31.  i0) Sammet, J. E. Modification No. i to an annotated descrlptor-based bibliography on the use 
of computers for doing non- numerical mathematics. ACM SIGSAM Bulletin, No. 5(Dec. 1966) Appendix, pp. 
1-19. Ii) Tobey, R. G. Algorithms for Anti- Differentiation of Rational Functions, Ph.D. thesis, Harvard 
University, 1967.</RefA>  
			
