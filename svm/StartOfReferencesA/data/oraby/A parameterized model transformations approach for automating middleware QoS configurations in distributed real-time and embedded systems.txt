
 A Parameterized Model Transformations Approach for Automating Middleware QoS Con.gurations in Distributed 
 Real-time and Embedded Systems Amogh Kavimandan and Aniruddha GokhaleDept. of EECS, Vanderbilt University{amoghk,gokhale}@dre.vanderbilt.edu 
ABSTRACT Model transformation is a key requirement of model-based soft­ware development processes, such 
as middleware quality of service (QoS) con.guration which involves mapping domain-speci.c re­quirements 
onto the right set of middleware-speci.c con.guration options. There exists a signi.cant opportunity 
to factor out com­monality patterns from individual platform-speci.c transformation mappings to develop 
general-purpose transformations. Although existing model transformation tools provide support for develop­ing, 
testing and debugging transformation rules using a variety of approaches, the development of templatized, 
reusable (patterns of) model transformations is not well supported. We introduce the con­cept of transformation 
template specialization that:(1) allows de­velopers to specify variability points in their transformation 
project, (2) automatically creates a modeling language that captures mid­dleware platform variabilities, 
and (3) accommodates these varabil­ities in the transformation project such that platform-speci.c model 
transformations can be instantiated. 1. INTRODUCTION A common requirement of a large number of applications 
found in domains such as avionics mission computing, total shipboard computing, .nancial, healthcare 
and intelligent transportation sys­tems is their need for multiple quality of service (QoS) properties, 
such as timeliness, fault tolerance and security. These applications, their hosting infrastructure, and 
the environments they operate in are often collectively referred to as distributed real-time and em­bedded 
(DRE) systems. Realizing the capabilities of these DRE systems requires deploying and con.guring the 
application mix of the DRE systems on the platforms that host them. The increasing scale and complexity 
[13, 4] of modern DRE sys­tems has prompted developers of DRE systems to move away from traditional stovepiped 
architectures to more open architectures that leverage newer software development paradigms, which include 
object-and component-oriented middleware platforms. These plat­forms help address a number of software 
development and QoS provisioning challenges of DRE systems. The promise held by these platforms has led 
middleware developers to design their mid- Permission to make digital or hard copies of all or part of 
this work for personal or classroom use is granted without fee provided that copies are not made or distributed 
for pro.t or commercial advantage and that copies bear this notice and the full citation on the .rst 
page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior 
speci.c permission and/or a fee. ASE 07, November 5 9, 2007, Atlanta, GA. Copyright 2007 ACM ISBN: 978-1-59593-878-7 
/07/11 ...$5.00. dleware to support a large class of applications from multiple do­mains. Contemporary 
middleware platforms provide a rich set of con­.guration mechanisms including different concurrency and 
syn­chronization models, prioritized handling of requests, buffering re­quests using release guards, 
different connection management mod­els, among others to allow customization of the middleware plat­forms 
that are tailored to the application requirements. Moreover, to promote dynamic recon.gurations and loose 
coupling between applications and middleware, these platforms provide declarative approaches in the form 
of con.guration options to control these con.guration mechanisms. Achieving the desired QoS properties 
of DRE systems now re­quires that the DRE developers perform middleware QoS con.g­uration i.e., determining 
how their domain-speci.c QoS require­ments map onto the right set of middleware-speci.c QoS con.gu­ration 
options. Even with the many bene.ts offered by contempo­rary middleware, the con.guration activity forces 
the developers to possess a comprehensive knowledge of various con.guration op­tions supported by the 
middleware, how individual con.guration options impact the resulting QoS delivered to the applications, 
and the inter-dependencies including tradeoffs between these options. This is further complicated by 
the fact that DRE systems are usually deployed on heterogeneous middleware platforms, each of which may 
provide their own con.guration mechanisms and options. Existing research in con.guring DRE systems has 
focused on:(1) application functional speci.cation and analysis [6, 7] to capture and analyze application 
structure and behavior, (2) QoS analysis, optimization and adaptation [25, 15] to allocate resources 
to ap­plications, provide for application QoS optimization and adapta­tion in multiple QoS dimensions 
(for example, RT-CORBA, pub­lish/subscribe services, security), and (3) schedulability and tim­ing analysis 
[24, 11] to determine exact priorities and time periods for applications. However, there is a need for 
newer approaches that overcome middleware QoS con.guration challenges described above such that domain-speci.c 
QoS requirements are correctly translated into con.guration options of the underlying middleware. Model 
driven engineering (MDE) [9] has shown signi.cant pro­mise and success in different facets of software 
development in­cluding veri.cation of correctness properties [7], dynamic applica­tion QoS monitoring 
and adaptation [16], and functionality, inter­face and interaction modeling [6]. In this paper we investigate 
the applicability of MDE to address the middleware QoS con.guration challenge described above by automating 
the process of mapping the domain-speci.c QoS requirements onto the right middleware­speci.c con.guration 
options. In particular we are interested in how model transformations [20, 23], which is one important 
facet of MDE, can be used to transform domain-speci.c QoS require­ments to middleware-speci.c con.guration 
options. Our model transformation-based approach begins with doma­in-specific, platform-independent 
models (PIMs) of DRE system QoS requirements that are transformed iteratively to more re.ned and detailed 
middleware platform-speci.c models (PSMs). Using PIMs at the domain-speci.c level provides DRE developers 
with notations that are intuitive and eliminates largely the need for them to have a comprehensive understanding 
of the low-level con.gu­ration options provided by the middleware. Using platform-ind­ependent modeling 
abstractions to enable speci.cation of DRE sy­stem-speci.c QoS requirements and transforming these speci.ca­tions 
using automated semantic mappings to a subset of the tar­get middleware con.guration space (where con.guration 
space en­compasses all possible con.guration mechanisms of target middle­ware and their corresponding 
value-boundaries) can lead to sub­stantial bene.ts [10] in terms of scalability, productivity and trace­ability. 
A signi.cant challenge in our approach stems from the need to develop the automated transformations from 
the PIM to the con.g­uration space of every hosting middleware platform used for assur­ing QoS for that 
DRE system, which comprises model transforma­tions for all platforms and for all combinations of QoS 
properties desired by the DRE system. Our solution to resolve this challenge is based on the observation 
that middleware technologies exhibit some commonalities in QoS con.gurations across various QoS di­mensions. 
Thus, there exists a signi.cant opportunity to factor out common­ality patterns from individual PIM to 
PSM rules/mappings such that general-purpose, platform-independent model transformations can be developed. 
The variabilities in the middleware con.gura­tion spaces can be then captured in the form of parameterization 
of mapping rules of the above platform-independent model trans­formations. Subsequently individual platform-speci.c 
transforma­tions can be instantiated by specializations, such as by providing exact values of these parameters. 
Our transformation parameterization and specialization approa­ch: (1) allows developers to specify variability 
points in their trans­formation project, (2) automatically creates a modeling language from transformation 
project that captures the middleware platform variabilities, and (3) accommodates these varabilities 
in the trans­formation project such that specialized, platform-speci.c model transformations can be instantiated. 
The rest of the paper is organized as follows: We give an over­view of our approach and discuss supporting 
technologies we have used in Section 2; We discuss details of our solution and illustrate the use of 
our templatization technique in Section 3; We compare our work with related research in Section 4; We 
conclude mention­ing future work and lessons learned in Section 5. 2. AUTOMATING QOS CONFIGURATIONS 
FOR DRE SYSTEMS Section 1 argued for parameterized model transformations and specializations to automate 
the QoS con.gurations for DRE sys­tems. Our notion of parameterized transformations and specializa­tions 
is similar in concept to C++ templates and Java generics. Un­like C++ template specialization where specialization 
is based on presence (or absence) of certain characteristics of the parameter­ized type, however, our 
idea is applicable to a complete QoS con­.guration dimension where specialization is applicable to a 
mid­dleware platform type. Figure 1 shows our overall approach which comprises the fol­lowing steps: 
 Figure 1: Addressing System QoS Con.guration Variability through Transformation Parameterization. a. 
Identifying con.guration variability points. Transforma­tion rules are developed by developers as search-and-replace 
patterns using source and target modeling languages of trans­formation. Using our approach, transformation 
developers develop platform-agnostic, parameterized model transforma­tions and identify points of variation 
in transformation rules where the transformation can be specialized in later steps. b. Specifying con.guration 
variabilities. Once variation points have been identi.ed, in order to specialize the model trans­formations, 
transformation developers need to specify pla­tform-speci.c con.guration variabilities. Our approach 
al­lows intuitive speci.cation of con.guration variabilities us­ing transformation-specific modeling 
abstractions automati­cally generated from points of variabilities identi.ed in ear­lier step. c. Accommodating 
con.guration variabilities. Finally, con­.guration variabilities from the previous step are accomo­dated 
into transformation algorithm such that the algorithm can be specialized for a speci.c middleware platform. 
 In the remainder of this section we describe the design and im­plementation of our technique. 2.1 Overview 
of Supporting Technologies Although our transformation parameterization idea has been re­alized using 
a number of existing modeling and transformation en­vironments, the concepts we introduce in this paper 
for supporting con.guration variabilities in transformation rules are generic and can be re-applied to 
other model transformation toolsuites. We in­troduce these supporting technologies below. We use the 
Generic Modeling Environment (GME) [14] as the meta-programmable modeling environment. GME provides a 
ge­neral-purpose editing engine, a separate view-controller GUI, and a con.gurable persistence engine. 
GME is meta-programmable, and thus the same environment used to de.ne modeling languages is also used 
to build models, which are instances of the meta-models. We have used Graph Rewriting And Transformation 
(GReAT) [8] language for de.ning various general-purpose transformations in our tool. GReAT is developed 
using GME and can be used to de.ne model-to-model transformation rules using its visual modeling lan­guage. 
It also provides GReAT Execution Engine (GR-Engine) for execution of these transformation rules for generating 
target mod­els. It should be noted, however, that existing model transformation tools and techniques 
[8, 3, 5, 22] lack support for developing pa­rameterized model transformations, which is critical for 
writing reusable (patterns of) model transformations. In the rest of the discussion we demonstrate how 
we are enhancing these tools to support parameterized model transformations.  3. DESIGN OF PARAMETERIZED 
MODEL TRANSFORMATIONS AND SPECIALIZA-TIONS We now describe the design principles of our transformation 
parameterization and specialization approach, and how we imple­mented it within existing tools. In this 
section, we (1) describe how variabilities in the transformation process are classi.ed, and (2) dis­cuss 
each step of our parameterized transformation approach. 3.1 Taxonomy of Variabilities In middleware QoS 
con.guration using model transformations, the same high-level domain requirement may be satis.ed using 
different subset of con.gurations on two separate platforms and the identi.cation of this subset (along 
with appropriate values for subset elements) is performed by platform-speci.c transformation rules. As 
shown in Figure 2, middleware platforms exhibit com­monalities in con.gurations across various QoS dimensions. 
For example, both Web Services (WS) and CORBA Component Model (CCM) provide asynchronous event .ltering 
based on event type, event producer, and mechanisms for managing event subscriptions, grouping of events 
etc. However, the exact details of con.gura­tions for satisfying domain requirements vary based on the 
underly- Figure 2: Middleware QoS Con.guration Challenge. Direct Value Assignments: Since source models 
are typically at a higher level of abstraction compared to target models, develop­ers would not necessarily 
be able to de.ne mappings for all of the target model objects. Instead, as part of the transformation 
process, developers use their knowledge of the target modeling language semantics to directly assign 
values to target objects that cannot be mapped from some source objects. We call this direct value assign­ments. 
Conditional Value and Creation Mappings: We de.ne condi­tional mappings as implication relations between 
source and target objects i.e., association relationships between the source objects (x . X) and target 
objects (y . Y ). These associations may be one­to-one, one-to-many, or many-to-one and apply to both 
value-and (target) object creation-based relations: 1. A one-to-one association between a pair (x,y) 
of source and target objects respectively is de.ned as an injective function: x . a X,y . Y . f (x) .-. 
f (y) such that if f (x)= f (y) then x = y. 2. A one-to-many association between pairs (s,t) of source 
and target objects respectively is de.ned as: f s .-. t, where s . X and t = {(t1 .t2 . .. .tn) | ti=1..n 
. Y }. 3. A many-to-one association between pairs (s,t) of source and target objects respectively is 
de.ned as: . s .-. t, where t . Y and s = {(s1 . s2 . .. . sn) | si=1..n . X}. 3.2 Step 1: Identifying 
Con.guration Vari­ability Points Context. Mappings of source objects to target objects are well understood 
by transformation developers and are encoded in terms of transformation rules. In order to separate points 
of variation in transformation rules necessary for developing platform-independent transformations, developers 
should be able to easily identify these variabilities. Solution. We have introduced a simple constraint 
notation using which transformation developers identify variability points in their transformations. 
The notation is given in Listing 1 and consists of three blocks that separate the types of variabilities 
i.e., direct, conditional_value, and conditional_creation. Di­rect block lists names of direct value 
variability points i.e., target objects that are directly assigned in the transformation. condit­ional_value 
and conditional_creation blocks identify variability points as pairwise listing of source and target 
objects, respectively, i.e., {s : t | s . X, t . Y }. More than one source (tar­get) objects may occur 
in the same pair and are comma-separated as shown in the Listing 1. Each of the three blocks discussed 
above can individually have more than one mappings. Each of these map­pings occur on separate lines in 
the corresponding blocks as shown in Listing 1. Additionally, sequencing block decides the code points 
i.e., source code or model transformation locations where con.guration variabilities would be accommodated. 
We will explain accommo­dation of con.guration variabilities in detail in Section 3.4. Using our approach, 
transformation developers insert constraint notation blocks as special comments in the source code of 
their parameterized transformation project using the syntax described above. This notation is opaque 
to the transformation toolchain (source and target meta-model) interpretation logic or translation engine 
and does not place any extra computational overhead on the toolchain. 3.3 Step 2: Specifying Con.guration 
Variabil­ities Context. Parameterization of the transformation project itself helps greatly towards reuse 
of transformation patterns such that the same transformation can later be specialized for individual 
middle­ware platforms. Thus, it is desirable for transformation develop­ers to specify platform-speci.c 
variabilities in the parameterized transformation project such that these variabilities can evolve and 
change independently of the transformation leading to rapid soft­ // Identifies code points where current 
// variability will be accommodated. sequencing { block_name:preceding_rule_name } // Identifies direct 
value variability // points. direct { y1 y2 ... } // Identifies conditional value mappings. conditional_value 
{ // one-to-one association. x5:y7 // one-to-many association. x1:y1,y2,... // many-to-one association. 
x1,x2,...:y9 ... } // Identifies conditional creation // mappings. conditional_creation { x1:y11,y22,... 
x1,x2,...:y10 ... } Listing 1: Constraint Notation for identi.cation of Con.guration Variability Points 
ware development. Solution. We have developed a general-purpose transformation that auto-generates a 
variability modeling language (VarML) to be used by developers for instantiating con.guration variabilities 
iden­ti.ed in previous step. Figure 3 shows how VarML is generated from (1) transformation project being 
developed, and (2) source and target modeling lanaguages. Our general-purpose transforma­tion uses the 
parameterized transformation project to .nd all vari­ability points i.e., direct assignments and conditional 
mappings, and source and target languages used in the above project to .nd the type information for all 
these variability points. As shown in Figure 4, our general-purpose transformation instantiates variabil­ity 
points as name-value pairs and associations between source and target objects. Transformation developers 
use their transformation project-sp­ecific instance of VarML as the modeling language for specifying 
variabilities in their project. Using our approach, the three types of variabilities listed earlier in 
Section 3.1 are automatically mod­ularized and are now exposed to the developer as VarML modeling abstractions 
(as opposed to being tightly coupled with the transfor­mation itself). Models of VarML can now vary independently 
of the transformation project being developed. Figure 4: Associations in VarML. 3.4 Step 3: Accommodating 
Con.guration Vari­abilities Context. Individual VarML models capture con.guration vari­ability information. 
Note however, that the transformation project under development still has general, platform-independent 
map­pings from source to target model objects. Thus, as a .nal step, in order to instantiate platform-speci.c 
transformations, variabil­ity information in VarML models needs to be incorporated in the transformation 
project. It is desirable for transformation develop­ers who are concerned with development of transformation 
rules that this step be automated. Solution. We have de.ned transformations that modify the trans­formation 
project being developed to use VarML as an additional source language, and insert rules that create and 
populate tempo­rary data structures from VarML models. Recall from Section 3.2 that the sequencing block 
speci.es the code points where mid­dleware con.guration variabilities would be incorporated. For each 
constraint blocks in the transformation project, we accommodate the variabilities speci.c to that block 
by creating additional rule(s) in transformation project. As shown in Figure 5, the srcObj-Value:trgtObjValue 
variability in conditional_value block at Rule2 is instantiated (by the transformation developer) in 
VarML model. The sequencing block gives the location of accommo­  Figure 5: Accommodating Con.guration 
Variabilities.  4. RELATED WORK MDA [17, 10] development process centers around de.ning ap­plication 
PIMs and applying (typed, and attribute augmented) trans­formations to PIMs to obtain application PSMs. 
In the context of MDA, requirements and challenges in generating specialized trans­formations from generic 
transformations are discussed in [12]. Re.ective MDE approach [1] proposes a two dimensional MDA process 
by expressing model transformations in a tool-or platform­independent way and mapping (i.e., transforming) 
this expression into actual tool-or platform-speci.c model transformation expres­sions. There is return 
of investment (ROI) associated with develop­ing and maintaining mappings from platform-independent transfor­mations 
(PIT) to platform-speci.c transformations (PST) in terms of reuse, composition, customization, maintenance 
etc. and the au­thors argue that ROI in two dimensional MDA process is greater than conventional one 
dimensional MDA. Although re.ective MDE focuses on having durable transfor­mation expressions that naturally 
facilitate technological evolution and development of tool-agnostic transformation projects, map­pings 
still have to be evolved (i.e., modi.ed) with change in PST or technologies. Transformation parameterization 
on the other hand, is concerned with managing and evolving con.guration variabil­ity in systems developed 
using MDA process within single dimen­sion. Parameterization technique can be highly effective in man­aging 
variability of mappings from PIT to PSTs in the context of above work. Asset variation points discussed 
in [21] uses the hotspot nota­tion [19] for expressing variability in models of Product Line Ar­chitectures 
(PLAs) [2, 18]. A variation point is identi.ed by several characteristics (e.g. point reference, context 
and use of variation point, rationale of the variation point) that uniquely identify that point in the 
product lines. These asset variation points capture vari­ation rules of implementation components of 
a product line mem­ber. Our notion of variability points on the other hand, is more speci.c to addressing 
variability concerns in highly con.gurable middleware platforms. 5. CONCLUSION In this paper, we discussed 
our approach to address the chal­leges in middleware con.guration of DRE systems and explained the design 
of transformation parameterization framework that ad­dresses this challenge by (1) allowing developers 
to specify vari­ability points in their transformation project, (2) automatically cre­ating a modeling 
language that captures middleware platform vari­abilities, and (3) accommodating these varabilities in 
the transfor­mation project such that platform-speci.c model transformations can be instantiated. We 
showed how direct assignment, conditional value and conditional creation con.guration variabilities are 
sup­ported in our framework. Using our approach platform-speci.c con.guration variabilities are extracted 
from transformations for middleware con.guration promoting reusability and rapid software development. 
As next steps in this project, we plan to (1) measure the reduc­tion in model transformation development 
effort using transforma­tion parameterization and (2) extract variability in graph patterns composition 
in model transformation. In addition, we are investi­gating how parameterization can be used in presence 
of multiple, cross-cutting dimensions of non-functional middleware con.gura­tion properties. 6. REFERENCES 
<RefA>[1] J. Bézivin, N. Farcet, J.-M. Jézéquel, B. Langlois, and D. Pollet. Re.ective model driven engineering. 
In Proceeding of The 5th International Conference on Uni.ed Modeling Language, Modeling Languages and 
Applications, pages 175 189, Oct 2003. [2] P. Clements and L. Northrop. Software Product Lines: Practices 
and Patterns. Addison-Wesley, Boston, 2002. [3] G. Csertán, G. Huszerl, I. Majzik, Z. Pap, A. Pataricza, 
and D. Varró. VIATRA: Visual Automated Transformations for Formal Veri.cation and Validation of UML Models. 
In Proceedings of 17th IEEE International Conference on Automated Software Engineering, pages 267 270, 
Edinburgh, UK, 2002. IEEE. [4] S. Curtis. The Magnetospheric Multiscale Mission...Resolving Fundamental 
Processes in Space Plasmas. NASA STI/Recon Technical Report N, pages 48257 +, Dec. 1999. [5] J. de Lara 
and H. Vangheluwe. Atom3: A tool for multi-formalism and meta-modelling. In Proceedings of 5th International 
Conference on Fundamental Approaches to Software Engineering, pages 174 188, 2002. [6] A. Gokhale, B. 
Natarajan, D. C. Schmidt, A. Nechypurenko, J. Gray, N. Wang, S. Neema, T. Bapty, and J. Parsons. CoSMIC: 
An MDA Generative Tool for Distributed Real-time and Embdedded Component Middleware and Applications. 
In Proceedings of the OOPSLA 2002 Workshop on Generative Techniques in the Context of Model Driven Architecture, 
Seattle, WA, Nov. 2002. ACM. [7] J. Hatcliff, W. Deng, M. Dwyer, G. Jung, and V. Prasad. Cadena: An Integrated 
Development, Analysis, and Veri.cation Environment for Component-based Systems. In Proceedings of the 
25th International Conference on Software Engineering, Portland, OR, May 2003. [8] G. Karsai, A. Agrawal, 
F. Shi, and J. Sprinkle. On the Use of Graph Transformations in the Formal Speci.cation of Computer-Based 
Systems. In Proceedings of IEEE TC-ECBS and IFIP10.1 Joint Workshop on Formal Speci.cations of Computer-Based 
Systems, Huntsville, AL, Apr. 2003. IEEE. [9] S. Kent. Model Driven Engineering. In Proceedings of the 
3rd International Conference on Integrated Formal Methods (IFM 02), pages 286 298, Turku, Finland, May 
2002. Springer-Verlag LNCS 2335. [10] A. Kleppe, J. Warmer, and W. Bast. MDA Explained: The Model Driven 
Architecture(MDATM): Practice and Promise. Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 
Apr 2003. [11] S. Kodase, S. Wang, Z. Gu, and K. G. Shin. Improving Scalability of Task Allocation and 
Scheduling in Large Distributed Real-time Systems using Shared Buffers. In Proceedings of the 9th Real-time/Embedded 
Technology and Applications Symposium (RTAS 2003), Washington, DC, May 2003. IEEE. [12] J. Kovse. Generic 
model-to-model transformations in mda: Why and how? In Proceeding of 1st OOPSLA Workshop on Generative 
Techniques in the context of Model Driven Architecture, Nov 2002. [13] P. Lardieri, J. Balasubramanian, 
D. C. Schmidt, G. Thaker, A. Gokhale, and T. Damiano. A Multi-layered Resource Management Framework for 
Dynamic Resource Management in Enterprise DRE Systems. Journal of Systems and Software: Special Issue 
on Dynamic Resource Management in Distributed Real-time Systems, 80(7):984 996, July 2007. [14] A. Ledeczi, 
A. Bakay, M. Maroti, P. Volgysei, G. Nordstrom, J. Sprinkle, and G. Karsai. Composing Domain-Speci.c 
Design Environments. IEEE Computer, pages 44 51, November 2001. [15] C. Lee, J. Lehoczky, D. Siewiorek, 
R. Rajkumar, and J. Hansen. A Scalable Solution to the Multi-Resource QoS Problem. In Proceedings of 
the IEEE Real-time Systems Symposium (RTSS 99), pages 315 326, Phoenix, AZ, Dec. 1999. [16] S. Neema, 
T. Bapty, J. Gray, and A. Gokhale. Generators for Synthesis of QoS Adaptation in Distributed Real-time 
Embedded Systems. In Proceedings of the ACM SIGPLAN/SIGSOFT Conference on Generative Programming and 
Component Engineering (GPCE 02), Pittsburgh, PA, Oct. 2002. [17] Object Management Group. Model Driven 
Architecture (MDA), OMG Document ormsc/2001-07-01 edition, July 2001. [18] D. L. Parnas. On the Design 
and Development of Program Families. IEEE Transactions on Software Engineering, SE-2(1):1 9, 1976. [19] 
W. Pree. Design Patterns for Object-oriented Software Development. Addison-Wesley, Reading, MA, 1995. 
[20] G. Rozenberg. Handbook of Graph Grammars and Computing by Graph Transformation, Volume 1: Foundations. 
World Scienti.c Publishing Company, jan 1997. [21] S. Salicki and N. Farcet. Expression and usage of 
the variability in the software product lines. In Proceeding of The 4th International Workshop on Software 
Product-Family Engineering, volume 2290 of Lecture Notes in Computer Science, pages 304 318. Springer, 
2002. [22] A. Schürr. Introduction to the speci.cation language progres. In IPSEN Book, pages 248 279, 
1996. [23] S. Sendall and W. Kozaczynski. Model transformation: The heart and soul of model-driven software 
development. IEEE Software, 20(5):42 45, 2003. [24] J. A. Stankovic, H. Wang, M. Humphrey, R. Zhu, R. 
Poornalingam, and C. Lu. VEST: Virginia Embedded Systems Toolkit. In Proceedings of the IEEE Real-time 
Embedded Systems Workshop, London, UK, Dec. 2001. IEEE. [25] J. A. Zinky, D. E. Bakken, and R. Schantz. 
Architectural Support for Quality of Service for CORBA Objects. Theory and Practice of Object Systems, 
3(1):1 20, 1997.   </RefA>
			
