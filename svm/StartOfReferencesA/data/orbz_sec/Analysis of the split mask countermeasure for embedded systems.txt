
 Analysis of the Split Mask Countermeasure for Embedded Systems Jean-Sébastien Coron Ilya Kizhvatov 
Université du Luxembourg 6, rue Richard Coudenhove-Kalergi L-1359 Luxembourg {jean-sebastien.coron, ilya.kizhvatov}@uni.lu 
 ABSTRACT We analyze a countermeasure againstdi.erentialpower and electromagnetic attacks that was recently 
introduced under the name of split mask. We show a general weakness of the split mask countermeasure 
that makes standard DPA attacks with a full key recovery applicable to masked AES and DES implementations. 
Complexity of the attacks is the same as for unmasked implementations. We implement the most e.cient 
attack on an 8-bit AVR microcontroller. We also show that the strengthened variant of the countermea­sure 
is susceptible to a second order DPA attack indepen­dently of the number of used mask tables. Categories 
and Subject Descriptors E.3[Data Encryption]: CodeBreaking;Standards(AES, DES); C.3[Special-Purpose and 
Application-Based Systems]: Real-time andembedded systems; Smartcards General Terms Security, Algorithms, 
Measurement, Experimentation  Keywords cryptanalysis,countermeasures,DPA, masking,sidechannel analysis 
1. INTRODUCTION Masking intermediate values of a cryptographic algorithm with random data is a widely 
adopted method for reinforc­ing its implementation in an embedded device against side­channel attacks. 
Originally introduced into the scienti.c community by Goubin andPatarin[14] andChari et al. [6], masking 
makes the side-channel leakage of a device running the implementation independent of the processed sensitive 
data at individual moments. It is an e.ective way of coun­tering the di.erential power analysis introduced 
by Kocher Permission to make digital or hard copies of all or part of this work for personal or classroom 
use is granted without fee provided that copies are not made or distributed for pro.t or commercial advantage 
and that copies bear this notice and the full citation on the .rst page. To copy otherwise, to republish, 
to post on servers or to redistribute to lists, requires prior speci.c permission and/or a fee. WESS 
09, October 15, 2009, Grenoble, France Copyright 2009 ACM 978-1-60558-700-4 ...$10.00. et al. [17]. Using 
multiple masks for a single intermedi­atevariablecanalsocounterhigherorderDPA attacks, .rst described 
in detail by Messerges[19]. Masking however notably increases implementation foot­print and decreases 
performance, as additional variables are introduced into computations. To maintain proper data processing 
one must keep track of these variables (masks) during the algorithm execution. This involves precomputa­tions 
of intermediate masking values from a set of randomly generated masks. Speci.cally, masked lookup tables 
must be recomputed when a mask changes. Results of pro.ling a masked AES implementation reported by Mangard 
et al. [18]indicatethat mostpartof theintroduced overhead orig­inates from the precomputations. Hence, 
various resource-saving masking schemes for con­strained devices are of great practical interest. Ways 
of re­ducing the amount of precomputations and memory while keeping resistance to higher order DPA are 
a target of re­cent research. For example, Itoh et al. [16]suggested using a limited set of masks, so 
that all possible masked lookup tablescanbeprecomputed onceand storedin memory,thus avoiding recomputations 
at all. The split mask countermeasure analyzed in this work has been proposed by Gebotys et al. in [10, 
11, 12, 13]. The general idea of this variant of resource-saving masking is to mask each entry of a lookup 
table with a di.erent output mask. These output masks are split into several shares that are stored in 
additional mask tables. The input of the ta­bles is masked with a value that is .xed for a single key. 
Recomputation of the tables under a single key is either not performed at all or involves simple operations 
for modifying the output masks. The countermeasure is applied to AES [8] andDES[9] andis claimedtothwartDPA 
attacks1 of order N when N mask tables are used. We show that the approach followed in the split mask 
countermeasure exhibits a general weakness. By exploiting this weakness, AES andDESimplementations with 
the split mask countermeasure can be defeated by a standard DPA leading to a full key recovery in the 
known plain-or cipher­text model. Several attack paths are possible. The comple­xity of theattacksisthesame 
asfor unprotectedimplemen­tations. We implement the most e.cient attack on an AES implementation with 
the split mask countermeasure for an 8-bitAtmelATmega16microcontrollerformthewidely-used AVR family. 
The attack requires about 400 traces for the 1 Throughoutthispaper,we usethetermDPA also with the electromagnetic 
side-channel in mind. full key recovery. In[11] itwas mentionedthatthesplit mask countermea­sure can 
be strengthened by changing table input masks after a number of encryptions. We sketch a DPA attack of 
order 2 against this strengthened variant that works for any number N of mask tables. 2. THE SPLIT MASK 
COUNTERMEASURE We outline the general idea of the split mask by showing howasinglelookup tableis maskedbased 
onthedescription inthe recentwork ofGebotys[11]. x .nS(x).rx S ' rx .m M Figure 1: S-box with the split 
mask countermeasure Let S be an S-box with input x and output S(x) imple­mented as a lookup table. The 
split mask implementation of S, shown in Figure 1, consists of a masked table S ' and a mask table M. 
These tables are de.ned as follows: S ' (x .n)= S(x).rx, (1) M(x .n)= rx .m. This means that the input 
of the S-box is masked with n, and each output value is masked with an individual random value rx. This 
gives the masked table S ' . The set of output masks rx is also stored in the mask table M so that S 
' (x .n).M(x .n)= S(x).m (2) holds for every input x. In other words, m can be viewed as the output mask 
of S that is split into two shares rx and M(x.n),thesplittingbeingindividualfor eachtableentry. Masks 
m and n are .xed: they are randomlsy generated whentables(1) areprecomputedfor agiven encryptionkey and 
then remain constant for di.erent plaintexts. The set of output masks rx is also randomly generated during 
table precomputationandcanbe refreshedfordi.erentplaintexts, as the table recomputations in this case 
are simple and fast. Thus,theperformance overheadintroducedby the counter­measure is small. Memory overhead 
can also be small if a single masked implementation is shared by several identical S-boxes of the algorithm, 
which is allowed by the original description of the split mask. The split mask countermeasure with a 
single mask table is claimed to thwart the1-st orderDPA attack. For this, the originaldescription requiresthat(2) 
should neverbe com­puted directly(i.e. appear as an intermediate value) during analgorithmexecution. 
Ageneralizationofthe method uses N mask tables for splitting m into N+1 shares. In this case a DPA of 
order N is claimed to be thwarted under a similar condition. InconcreteAESandDESimplementationsthe.xed 
masks attheinput of theS-boxesoriginatefromthe masked round keys. Other details of concrete implementations 
can be foundin[10,11,12,13]. Inthesepapers the countermea­sureisproposedfor an optimizedAESimplementation 
with 8×32-bit lookup tables that are used to compute the S-box and the di.usion simultaneously. We stress 
that this fact does not in.uence our analysis and the considerations pre­sented in the following sections 
are independent from these implementation details. 3. WEAKNESS OF THE SPLIT MASK First, we recall some 
details of the original DPA attack of Kocher et al. [17]. To mount it against an implementation of an 
encryption algorithm, one selects an intermediate bit b such that: 1. this target bit b can be expressed 
as a function D(C,b,Ks)of a known plaintext or ciphertext C and a part Ks of the encryption key that 
one is willing to recover; 2. the size of the subkey Ks on which b depends is suf­.ciently small, commonlyless 
than32bits(otherwise the attack is rendered impractical mainly by a large numberof traces required todistinguish 
acorrectsub­key guess); 3. calculating D for an incorrect value of Ks yields the correct valuefor the 
targetbit b withprobability about  1 ; 2 4. power consumption of the device depends somehow at some 
time on the value of b. The selectionfunctionD is then usedas a criterion to clas­sify the collected 
power traces under all possible hypotheses for Ks.Foreachhypothesis, adi.erential traceiscalculated as 
a di.erence of means of the two sets of power traces, one corresponding to D =1, another to D =0. For 
an incorrect guess of Ks, D is uncorrelated to the actual value of the tar­get bit b computed by the 
device, and the di.erential trace is close to the zero line. For the correctly guessed key, the classi.cation 
of power traces is performed based on the ac­tual value of the targetbit. Therefore, thedi.erentialpower 
trace should exhibit distinguished peaks at the time when the power consumption of the device depends 
somehow on the value of the target bit. Now, it is easy to see that if a target bit is masked with some 
.xed value then DPA still works. Mask 1 inverts the classi.cation,whichjust changesthesignof thepeaks; 
mask 0 does not a.ect anything at all. For the split mask countermeasure this means that if we are able 
to .nd a target bit at the input of some layer of S­boxes that is expressed as a function of a su.ciently 
small number ofkey bits and aknownplaintext or ciphertext,the original DPA will immediately apply without 
any respect to the number of shares into which the output mask is split. In the next section, we describe 
concrete attacks on AES and DES implementations with the split mask countermea­sure that exploit this 
weakness.  4. ATTACKS DEFEATING THE SPLIT MASK Here we propose attacks on AES and DES implementa­tions 
with the split mask countermeasure described in Sec­tion2. Wewilldescribe2general attacks,2 attacksforAES, 
1 attack for DES. An attack on the strengthened variant of split mask is described in Section 6. We consider 
a common security model in which an adver­sary is allowed to access the cryptographic device and aims 
to recoverthesecretkey storedinit. Sheregistersthepower consumptionor electromagnetic emanationsof thedeviceat 
the time it processes data. She also either passively regis­ters the inputs or outputs (known plaintext 
or ciphertext model) orsubmitsherowninputs(chosenplaintext model). An example of such scenario is when 
a smartcard of some le­gitimate ownerfallsintothehandsof atechnically equipped villain. Inthedescriptions 
of theDPA attacksbelow, we willgive a number of di.erential traces that have to be calculated in order 
to mount an attack. Complexity of calculating a single di.erential trace is proportional to the number 
of pointsin apower trace andto the number of collectedpower traces, which strongly depends on the properties 
of the de­vice and on measurement conditions. For simple microcon­trollers without hardware countermeasures 
a standard DPA typically requireshundredsof acquisitions[7,5] to makethe success probability of the attack 
close to 1. Our experimen­tal resultspresentedinSection5 showthe same complexity. 4.1 General Attacks 
4.1.1 Brute force against short mask First, there is a general attack that applies to both AES andDESimplementationsin 
case allS-boxes share the same l-bit .xed input mask n. We recall that in our case .xed means that it 
is the same for all plaintexts encrypted under a single key. This .xed mask for the input of the .rst 
round S-boxes in DES and AES originates from the .rst round key. This means that the .rst round key k0 
is masked with the con­catenation of identical l-bit masks: k ' 0 = k0 .{n|n|... |n} Therefore, there 
are only 2l possible values for the mask of the .rstroundkey(28 for AES and 26 for DES). We can recover 
k0 ' by performing a DPA on XOR of k0 ' with the known plaintext as described by Chari et al. [5]. In 
this attack, a single key bit is determined per target bit by computing a single di.erential trace. Thus, 
the total number of di.erential traces needed to recover k0 is equal to the number of bits in k0 , so 
post-processing complexity is 128 calculations of di.erential traces for AES and 48 for DES. In case 
of AES k0 ' isthefullkey masked with oneof the28 possible masks, so we can determine the full key by 
a brute force of 28 encryptions. In case of DES, the .rst round key yields only 48 bits of the full 56-bit 
key and the brute force 214 complexity is 26 × 28 = . This attack is practical until the e.ective size 
l of the key mask is made su.cient enough (by increasing the number of di.erent S-box input masks) to 
make brute force complexity too large. 4.1.2 Side-channel collision attacks This is is another class 
of attacks that apply both to AES and DES implementations with the split mask countermea­sure. They can 
be considered as a kind of simple power analysis rather than as DPA and are based on the possi­bility 
of detecting the equality of intermediate variables us­ing a small number of power traces. The fact that 
the S­box input mask is .xed for di.erent plaintexts allows one to detect collisions at the inputs of 
S-boxes just as in an unmaskedimplementation(and with the same complexity). Original collisionattacks 
.rst addressedindetailinthework of Schramm et al. [22] and employing byte collisions that occur at the 
single S-box input in a pair of algorithm exe­cutions, are possible if the masks at the inputs of di.erent 
S-boxes are not necessarily the same. This scenario also en­ables impossible and multiset collision attacks 
proposed by Biryukov and Khovratovich [2]. In case single .xed mask is shared by di.erent S-boxes, more 
e.cient attacks with the generalized collisions, introduced by Bogdanov [3] and improved by Bogdanov 
et al. [4], are even possible. Now we describe other attacks speci.c to AES and DES. The attacks do not 
require all S-box input masks to be the same. They require only that these possibly di.erent in­put masks 
remain .xed for all plaintexts under a single key, which is the case of the split mask countermeasure. 
  4.2 Attacks on AES 4.2.1 Attack 1 This attack aims at the .rst two rounds. It is a DPA attack attheinputsof 
second roundS-boxesthat are masked with a .xed mask. The scheme of this attack is shown in Figure 2. 
We view an input byte so to a second round S-box as a XOR of a second round key byte k1,o masked by a 
.xed mask no with a known function of the 4 plaintext bytes ta,. . .,td and corresponding4bytes k0,a,. 
. .,k0,d of thefull encryption key k0 : so = k1,o .no.F(k0,a .ta,k0,ß .tß,k0,. .t.,k0,d .td). (3) In 
Figure 2 we denote t . k0 by x, and to be precise, use m¯to denote .xed mask m transformed by SubBytes 
and MixColums. Values of k1,o and no are unknown but .xed for di.erent plaintexts. So F isinfact masked 
with the.xed value k1,o . no. We select target bit b from so (i.e. at the input of the second round S-box 
layer) and perform a standard DPA as described in Section 3 to recover the bytes k0,a,. . .,k0,d of thefull 
encryptionkey. Byfurther selecting targetbitsfrom another3S-boxes(chosenfromdi.erent columns according 
to di.usion properties of the AES round) we recover the remaining parts of the key. But in this way we 
have to guess 4 bytes of the key at a time, which demands a large number of traces and long post-processing. 
To make this attack practical, we employ the linearity of AES MixColumns transformation that allows representing 
F as as a XOR of the4knownfunctionsofindividual.rst round S-boxinputbytes, sothat(3) becomes so = k1,o 
.no .F1 (k0,a .ta). F2 (k0,ß .tß).F3 (k0,. .t.).F4 (k0,d .td). (4) Now we choose the plaintexts that 
are .xed, say, in bytes tß, t. and td (in terms of di.erentialcryptanalysis, we leave one activeS-box). 
Then(4) canbe viewed as so = u .F4 (k0,a .ta) where u is some unknown value that is .xed for di.erent 
chosen plaintexts. We apply DPA as above, selecting a tar­getbitfrom so,buthave toguess now only a singlebyte 
k0,a of the initial key. By repeating this step another 15 times  Figure 2: First AES rounds with the 
split mask ni)= ri,x . m  Figure 3: Last AES round with the split mask with the target bits sequentially 
chosen at di.erent second roundS-boxinputs and appropriately chosenplaintexts, we recover the remaining 
15 bytes of the full key byte by byte. If plaintexts are chosen in a more sophisticated way to have all 
the bytes in a single column active and all the remaining bytes .xed, we can reuse them and thus reduce 
the total number of required chosen plaintexts by a factor of 4. A 212 total of 16×28 = di.erential traces 
are calculated in this attack. WenotethatAttack1worksinthechosenplaintext model. In the following, we 
describe another more powerful (and actually simpler) attack that works in the known ciphertext model 
only.  4.2.2 Attack 2 Thisattack aimsatthelastroundS-boxinputand recov­ers the last round key. Figure 
3 illustrates the attack. We recall that the last AES round does not include Mix-Columns transformation. 
Therefore, a byte xa at the input of the last S-box layer can be viewed as an XOR of the .xed mask na 
with the known function of a last round key byte kR,ß and a corresponding ciphertext byte cß, xa = na 
.S-1 (kR,ß .cß). Again, na is constant for di.erent plaintexts. So choosing the target bit from xa enables 
one to perform DPA in a straightforward manner and obtain the last round key byte by byte as if the implementation 
was not masked at all. As 212 in theprevious attack,16×28 = di.erentialpowertraces have to be computedin 
total, but choosingplaintexts at the stage of collecting acquisitions is not required.  4.3 Attack on 
DES For DES implemented with the split mask, we simply ex­ploit the same approach as described for AES. 
See Figure 4 that showsthe attackpath(dashedline) onthescheme of the DES implementation with the split 
mask. We view a 6­bit input s of a second round S-box as a XOR of a .xed 6-bit part k2 of the second 
round key masked with a .xed mask n, 6 bits of the left plaintext part L and a known function of 6 bits 
k1,a,. . .,k1,. of the .rst round key entering one of the .rst round S-boxes and corresponding bits Ra,. 
. .,R. of the right plaintext part: s = k2 .n .L.F(k1,a .Ra,. ..,k1,. .R.). In Figure 4, k1 . R = x. 
As k2 . n is .xed for di.erent plaintexts and L is known, we can mount a DPA attack with the target bit 
from s to recover 6 bits of the .rst round key. By attacking the inputs of di.erent second round S-boxes 
in a sequential way, all 48 bits of the .rst round key can be recovered by 6-bit chunks at a time. In 
total we have to compute 8×26 =29 di.erential power traces. Remaining 8 bits of the full key can be determined 
by an exhaustive search. The attack works in the known plaintext model. Note that all attacks described 
above do not depend on the number of mask tables used(i.e on the number of out­put mask shares). They 
are also independent of dynamic updating of the output masks rx that suggestedin[11] to strengthenthe 
countermeasure. This updatingisperformed after accessofdatafromboth S ' (x)and M(x)byremasking of these 
two entries with a newly generated random value. In Section 6 we will show that another strengthened 
version  Figure 4: First 2 rounds of DES with the split mask x 10-3 Di. erence of means 4 3 2 1 0 -1 
-3 -2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 T i m e , S -B o x n u m b e r c o r r e c t k e y b y 
t e g u e s s s a m p l e p o w e r t r a c e w r o n g k e y b y t e g u e s s e s Figure 5: DPA on 
the last AES round with the split mask countermeasure of the countermeasure is not as secure as it is 
supposed in [11]to be.  5. PRACTICAL ATTACK IMPLEMENTATION We performed the experimental veri.cation 
of our attack forthecaseofAES-128 with thesplit mask countermeasure. The known-ciphertext Attack 2 on 
the last AES round was implemented. ThetargetdeviceisAtmelATmega16[1]. Thisisa mi­crocontroller from 
the 8-bit AVR family. AVR is a RISC core with most instructions taking 1 clock cycle. It follows a Harvard 
architecture, having separate data and program memories. ATmega16has16KBytesof.ashprogram mem­ory, 1 
KByte of SRAM and 512 Bytes of EEPROM. 8-bit AVR microcontrollers are widely used in embedded devices 
and smart-cards. We added the split mask countermeasure to RijndaelFu­rious AES-128 implementation of 
Poettering [20]. Both masked and mask tables were stored in the program mem­ory and accessed with the 
LPM instruction. SRAM was used to store intermediate mask values. A trigger signal was set by the implementation 
on a microcontroller s pin at the be­ginning of the last round. The microcontrollerwasclockedat3.68MHzand 
supplied with an operating voltage of 5V from a standard laboratory power source. A shunt resistor of 
5.6 Ohm was inserted into the ground line of the microcontroller to observe the varia­tions of the power 
consumption. The target board with the microcontroller, the quartz oscillator and the shunt resistor 
wasplacedintoaFaraday cage madeof copperfoil to reduce the electric .eld noise from the surrounding devices. 
Com­munication with the controlling PC was performed via the ATmega16built-inUSARTcontroller and aMAX232-based 
voltageconverteratthetransfer rateof9600baud. Wenote that this measurement setup is just a reference 
one and is neither noise-nor speed-optimized. The measurements were performed with a LeCroy Wa­veRunner104MXi 
DSO equipped withZS1000 activeprobe. TheDSOhas8-bitresolution,1GHzinputbandwidth(with thespeci.edprobe) 
and maximumsampling rateof10GS/s. We captured thedata at10GS/s to reduce the triggerjit­ter, following 
suggestions from [23] and decimating traces afterwards. Vertical resolution was set to 160 mV peak-to­peak. 
With the given shunt resistor, variations of the con­sumed current as small as 110 µA couldberegistered(while 
theaveragepowerconsumptionof the microcontrollerinthe givencon.guration was about12 mA).TheDSO,thepower 
source and the target device shared the common ground, also connected to the Faraday cage. Data acquisition 
was controlled by a host PC. LeCroy s ActiveDSOActiveXcomponent was usedto controltheDSO remotely via 
100 Mbit Ethernet connection, and serial in­terface was used to communicate with the target microcon­troller. 
Theacquisitionrate was about12 tracespersecond. The number of acquired traces was 400, so the total acqui­sition 
time was about half a minute. Following the acquisition, the traces were decimated by a factor of 100 
to reduce the amount of processed data. The sampling ratewasthusreducedto100MS/s. Thedecimation included 
low-pass .ltering to avoid aliasing in the frequency domain. Figure 5 shows the result of Attack 2 on 
the input of the 1-st maskedS-Boxof thelastAES round. Di.erentialtraces for all 256 guesses of the corresponding 
last round subkey byte are shown. The di.erential trace for the correct guess ishighlighted; adistinctDPApeak 
canbe seeninit. Marks on the horizontal axis locate individual S-Box executions withinatrace. EachS-Boxtakes4 
clock cycles,1for setting the lookup address with the MOV instruction and 3 for the lookup itself with 
the LPM instruction. A reference power consumption traceis also shown above tohelplocating clock cycles. 
Remaining last round S-boxes are attacked in the same way (reusing the power traces) to recover the full 
128-bit last round key, from which the full 128-bit AES encryption key is easily derived. Thus, the attack 
can be performed in practice with the success probability very close to 1 with about 400 power traces. 
It requires about half a minute for data acquisition, less than 1 MByte of memory for trace storage and 
about a minute for post-processing. 6. ATTACKS ON THE STRENGTHENED METHOD Inthe mostrecent work[11] 
onthesplit mask countermea­sure the existence of a chosen-plaintext Attack 1 for AES is brie.y mentioned 
and a solution to thwart it is suggested. This solution extends the original split mask countermea­suresothatthe 
masksattheinputsofS-boxesarenolonger .xed. They are generated randomly or selected from a pre­generated 
set of masks as in [16] after a large number of algorithm executions, which is less than the number of 
ac­quisitions required for the successful DPA attack. WenotethatchangingtheS-boxinput masksinfrequently 
still allows for collision attacks that require only a small numberof side-channel signal acquisitions[4]. 
Thereforeit is reasonable to consider the modi.ed split mask with the S-box input masks modi.ed for each 
plaintext, i.e. new random masks for the S-box inputs are generated and the tables are recomputed in 
the beginning of each encryption run. First,this eliminatestheperformance advantage of the split mask 
countermeasure over other existing masking tech­niques. Second, in the following we show that this modi.ed 
method can be attacked with a second-order DPA attack without respect to the number of mask tables used 
for split­ting the S-box output mask. Second order DPA attacks [19] exploit the fact that the unmasked 
internal variable can be correlated to some com­binationof twopowerconsumptionvalues: onecorrespond­ing 
to processing of the masked variable and the other cor­responding to the processing of the mask. To cope 
with the noise, second order DPA attacks typically require more powertraces comparedto a common(.rst-order)DPA 
at­tack. To attack the input of an S-box that is masked according to the modi.ed split mask countermeasure 
with a mask n, we should look for points in a power trace that depend only on the value of the mask n. 
Such points exist at the times when the mask is generated by the device and when the tables are recomputed. 
So the second order DPA attack can be performed to recover the subkey byte corresponding to that S-box 
entry. Even if there were no points depending on the mask n (imaginethatthe maskand theprecomputed tablesarejust 
loaded into the device prior to the algorithm execution), we could create them by choosing proper plaintexts 
in the following tricky way. We assume that S-box input masks within one round are all not necessarily 
the same, but all AES rounds share same maskedS-boximplementations(asthe originaldescription [11] allows). 
In other words, i-th S-box in any round has the same input mask ni that is randomly chosen in each execution 
as we are considering now the modi.ed method. We choose plaintexts that are .xed in i-th byte so that 
one byte at the input of i-th S-box in the .rst round is .xed. ThatmeansthatthepowerconsumptionforthisS-boxinput 
depends only on the value of the mask ni. Thus, it can be chosen as one of thepointsfor the second orderDPA 
attack. Theotherpoint,corresponding tothe masked variable,isat the input of the i-th S-box of the second 
round, as it uses the same input mask. To be able to guess only one byte of the key at a time, we choose 
plaintexts with the additional restrictions described in Attack 1 on AES. Complexity of such second order 
DPA attack against the strengthened variant of the split mask countermeasure is higher than that of the 
standard DPA attacks described in Section 4 for the original split mask method. It would re­quire thousands 
of traces to be acquired. But we stress that this attack does not depend on the number of mask tables 
used. It has the same complexity for any number of shares theoutput maskissplitinto. Thus,theclaimin[11] 
that the split mask countermeasure using N mask tables thwarts an N-th order DPA attack does not hold. 
This supports a general consideration that in order to properly protect an implementation from an N-th 
order DPA attack, everyintermediate variableshouldbesplitinto N +1 shares. 7. CONCLUSION We showed that 
the split mask countermeasure does not provide anyprotection againstthe standardDPA attackin­dependently 
of the number of mask tables and of the pos­sible modi.cations of the output masks. Several attack paths 
were presented for the AES and the DES implemen­tations protected with this countermeasure. The most 
ef­fective DPA attacks require nothing more than selecting an appropriate attack point, the technique 
and complexity of these attacks being the same as for the attacks on the un­masked implementations. We 
veri.ed this by implementing the attack on the last round ofAES against theAESimplementation withthe 
split mask countermeasure running on an 8-bit AVR microcon­troller. Thispracticalfullkeyrecovery attack 
requiresabout 400 power traces acquired with a non-optimized measure­ment setup. The suggested attack 
paths should be true not only for AES and DES, but also for the other cryptographic algo­rithms protected 
with the split mask. Though for more complex hardware like 32-bit platforms the complexity of the attacks 
will increase, they will still work. This is due to thefactthattheattacks are causedby thegeneral weakness 
of thecountermeasure. Theweaknessisinusing.xedmasks that do not change for di.erent plaintexts. Modifying 
the countermeasure by introducing frequent updatesof the maskscancelsitsperformanceadvantageover other 
maskingproposalsandprovidesprotectiononly against 1-st order DPA attacks. We have outlined a way to mount 
a second-order DPA attack on this strengthened variant of split mask with any number of mask tables. 
To .x the weakness, any .xed masks should be avoided and for N-th order DPA resistance every sensitive 
interme­diate variable within theimplementation shouldbe splitinto N +1 shares. This will increase the 
performance overhead, so a trade-o. between security and performance should be carefully chosen and combination 
with other countermea­sures should usually be considered. Examples of the re­cent practical masking schemes 
combined with hiding can befoundin[15] and[21].  8. REFERENCES <RefA>[1] ATmega16: 8-bit AVR microcontroller 
with 16K bytes In-System Programmable Flash, revision S, May 2009. Available from http://www.atmel.com/dyn/ 
resources/prod_documents/doc2466.pdf, accessed 6 August 2009. [2] A. Biryukov and D. Khovratovich. Two 
new techniques of side-channel cryptanalysis. In P. Paillier and I. Verbauwhede, editors, Cryptographic 
Hardware and Embeded Systems CHES 2007, volume 4727 of Lecture Notes in Computer Science, pages 166 
180. Springer, Heidelberg, 2007. [3] A. Bogdanov. Improved side-channel collision attacks on AES. In 
C. Adams, A. Miri, and M. Wiener, editors, The 14th Annual Workshop on Selected Areas in Cryptography 
(SAC 2007), volume 4876 of Lecture Notes in Computer Science, pages 84 95. Springer, Heidelberg, 2007. 
[4] A. Bogdanov, I. Kizhvatov, and A. Pyshkin. Algebraic methods in side-channel collision attacks and 
practical collision detection. In D. R. Chowdhury, V. Rijmen, and A. Das, editors, INDOCRYPT 2008, volume 
5365 of Lecture Notes in Computer Science, pages 251 265. Springer, Heidelberg, 2008. [5] S. Chari, C. 
S. Jutla, J. R. Rao, and P. Rohatgi. A cautionary note regarding evaluation of AES candidates on smart-cards. 
In Second Advanced Encryption Standard Candidate Conference: AES2, Rome, March 1999. Available from 
http://csrc.nist.gov/archive/aes/round1/conf2/ papers/chari.pdf, accessed 6 August 2009. [6] S. Chari, 
C. S. Jutla, J. R. Rao, and P. Rohatgi. Towards sound approaches to counteract power-analysis attacks. 
In M. J. Wiener, editor, Advances in Cryptology CRYPTO 99, volume 1666 of Lecture Notes in Computer 
Science, pages 398 412. Springer, Heidelberg, 1999. [7] C. Clavier, J.-S. Coron, and N. Dabbous. Di.erential 
power analysis in the presence of hardware countermeasures. In ¸c and C. Paar, editors, C. K. Ko¸ Cryptographic 
Hardware and Embedded Systems CHES 2000, volume 1965 of Lecture Notes in Computer Science, pages 252 
263. Springer, Heidelberg, 2000. [8] FIPS PUB 197: Speci.cation for the Advanced Encryption Standard, 
2001. Available from http://www.csrc.nist.gov/publications/fips/ fips197/fips-197.pdf, accessed 6 August 
2009. [9] FIPS PUB 46-3: Data Encryption Standard, 1999. Available from http://csrc.nist.gov/ publications/fips/fips46-3/fips46-3.pdf, 
 accessed 6 August 2009. [10] C. H. Gebotys. A split-mask countermeasure for low-energy secure embedded 
systems. ACM Trans. on Embedded Computing Systems, 5(3):577 612, August 2006. [11] C. H. Gebotys. A table 
masking countermeasure for low-energy secure embedded systems. IEEE Trans. on VLSI, 14(7):740 753, July 
2006. [12] C. H. Gebotys, S. Ho, and C. C. Tiu. EM analysis of Rijndael and ECC on a wireless Java-based 
PDA. In J. R. Rao and B. Sunar, editors, Cryptographic Hardware and Embedded Systems CHES 2005, volume 
3659 of Lecture Notes in Computer Science, pages 250 264. Springer, Heidelberg, 2005. [13] C. H. Gebotys, 
C. C. Tiu, and X. X. Chen. A countermeasure for EM attack of a wireless PDA. In International Conference 
on Information Technology: Coding and Computing (ITCC 2005), volume 1, pages 544 549, April 2005. [14] 
L. Goubin and J. Patarin. DES and di.erential power analysis: The duplication method. In ¸c and C. K. 
Ko¸ C. Paar, editors, Cryptographic Hardware and Embedded Systems CHES 99, volume 1717 of Lecture Notes 
in Computer Science, pages 158 172. Springer, Heidelberg, 1999. [15] C. Herbst, E. Oswald, and S. Mangard. 
An AES smart card implementation resistant to power analysis attacks. In J. Zhou, M. Yung, and F. Bao, 
editors, Applied Cryptography and Network Security ACNS 2006, volume 3989 of Lecture Notes in Computer 
Science, pages 239 252. Springer, Heidelberg, 2006. [16] K. Itoh, M. Takenaka, and N. Torii. DPA countermeasure 
based on the masking method . In K. Kim, editor, Information Security and Cryptology ICICS 2001, volume 
2288 of Lecture Notes in Computer Science, pages 440 456. Springer, Heidelberg, 2002. [17] P. C. Kocher, 
J. Ja.e, and B. Jun. Di.erential power analysis. In M. Weiner, editor, Advances in Cryptology CRYPTO 
99, volume 1666 of Lecture Notes in Computer Science, pages 338 397. Springer, Heidelberg, 1999. [18] 
S. Mangard, E. Oswald, and T. Popp. Power Analysis Attacks: Revealing the Secrets of Smart Cards. Springer, 
2007. [19] T. S. Messerges. Using second-order power analysis to attack DPA resistant software. In ¸c 
and C. K. Ko¸ C. Paar, editors, Cryptographic Hardware and Embedded Systems CHES 2000, volume 1965 of 
Lecture Notes in Computer Science, pages 238 251. Springer, Heidelberg, 2000. [20] B. Poettering. AVRAES: 
The AES block cipher on AVR controllers, 2006. Available from http://point-at-infinity.org/avraes, accessed 
6 August 2009. [21] M. Rivain, E. Prou., and J. Doget. Higher-order masking and shu.ing for software 
implementations of block ciphers. In C. Clavier and K. Gaj, editors, Cryptographic Hardware and Embedded 
Systems CHES 2009, volume 5747 of Lecture Notes in Computer Science, pages 171 188. Springer, Heidelberg, 
2009. [22] K. Schramm, T. Wollinger, and C. Paar. A new class [23] H. Seuschek. DPA-Analyse von Implementierungen 
of collision attacks and its application to DES. In symmetrischer kryptographischer Algorithmen. T. Johansson, 
editor, Fast Software Encryption Dimplomaarbeit, TU M¨ FSE unchen, April 2005.(In 2003, volume 2887 
of Lecture Notes in Computer German.) Available from Science, pages 206 222. Springer, Heidelberg, 2003. 
http://www.torsten-schuetze.de/reports/diplom_ seuschek.pdf, accessed 6 August 2009.  </RefA>
			
