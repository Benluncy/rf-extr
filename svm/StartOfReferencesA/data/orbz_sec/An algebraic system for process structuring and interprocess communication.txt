
 AN ALGEBRAIC SYSTEM FOR PROCESS STRUCTURI~G AND INTERPROCESS COMMUNICATION Takayuki Kimura University 
of Delaware Newark, Delaware 19711 ABSTRACT An extension of regular expressions is introduced to represent 
the activities of synchronizing concurrent processes. A communication link is defined as an automaton 
(infinite) with one-to-one partial transformations, and communication protocol as an assignment of events 
to actions of a communication link. A synchronization problem is defined as a problem of concurrent decomposition 
of a process into a deadlock-free family of processes sharing a communication protocol. It is shown 
that it is decidable whether a finite family of sequential processes, communicating through a finite 
link, is deadlock-free or not. 1. Introduction This is a preliminary report of an algebraic study of 
interprocess communi- cation problems. The objective of the study is to identify the communication problems 
with the notions in automata theory and further with the notions in semigroup theory. The work of Riddle 
[ll], Peterson [i0], Lipton [8], and Hack [6] has inspired the current study. The basis of the study 
stems from the following three simple observations: (i) The 'shuffle' operation of Ginsburg  [4] in 
automata theory plays an important role in the study of concurrent processes. Hack [6] called it 'concurrent 
operation.' Riddle [ii] defines the same operation and its closure for the message transfer expressions. 
 (2) Most of synchronization operations compared in Lipton [8, 9] are one-to- one partial transformations 
on sema- phore values and, therefore, can be embedded in the symmetric inverse semigroup on semaphore 
values.  (Clifford &#38; Preston [3]). (3) Communications in a hierarchically structured community 
are hierarchical by nature and different levels of the hierarchy involve different communi-cation protocols. 
A communication model is better if it is applicable to communications in any level of hierarchy. This 
necessitates that each communicating party be defined by its behavior rather than by its structure. For 
interprocess communi-cation, this means defining 'process' and 'event' extensionally without any assumption 
about the internal struc-ture of the process (e.g., 'actions' or 'states'). In Section 2, we extend the 
regular expressions to include the shuffle opera- tion and its closure for representing non- synchronizing 
concurrent processes. (C- Expressions). In Section 3, we define a generalized shuffle operation and 
its closure for representing synchronizing concurrent processes. (SC-Expressions) . In Section 4, a 
communication link is defined as an automaton with one-to-one partial transformations, and a communi- 
cation protocol as an assignment of events to actions of a communication link. In Section 5, a community 
of processes is defined as a family of concurrent processes sharing a communication protocol. The property 
of being deadlock-free for a family of processes is defined algebrai- cally. Based on the result of Ginsburg 
&#38; Spanier [5], it is shown that it is decidable whether a finite family of sequential processes, 
communicating through a finite memory, is deadlock-free or not. In Section 6, we define a synchroni- 
zation problem as a problem of concurrent decomposition of a process into a dead- lock-free family of 
processes. In Section 7, we list problems to be solved. 92 2. Extensional Definition of Process and 
C-Expressions A process P is a collection of activities each of which is a finite se- quence of occurrences 
of finite events E. Let E* be the set of all finite sequences of events from E including the null se- 
quence (activity) I. Then P ~ E*. Possible interpretations of E are firings of transitions in a Petri 
net, initiations and terminations of operations, and simply executions of operations. Define the following 
operations on processes: (i) Sequential composition: pQ~{pqlpeP&#38; qcQ}, where pq is the conca{enation 
of sequences p and q.  (2) Nondeterministic composition: PvQ~{r[reP or rcQ}.  (3) Concurrent composition: 
p+Q~{p//q[pep &#38; pcQ}, where ~//I~I//~{~}, a~//b~a(~//bS)ub(a~//B), a,beE,~,SeE*.  (4) Closure of 
sequential composition (Star operation): p*~^vpvppvpppv..., where ^~{I}.  (5) Closure of concurrent 
composition  (Sharp operation): p~AVpV(p+p) v(p+p+p)v... The family S of structured sequential processes 
is the smallest family of processes containing the finite processes and closed under (i), (2) and (4). 
The family C of structured concurrent processes is the smallest family of processes containing the finite 
processes and closed under (i) -(5). S is the family of regular sets and each member of S represents 
a control structure of a structured sequential pro- gram (a program which uses only WHILE-DO, IF-THEN-ELSE, 
and sequencing constructs). The operation + is an abstraction of concurrency among non-communicating 
processes. The operation # is an abstrac- tion of repeated creation of concurrent processes. The following 
lemma shows that the operation + alone does not enlarge S: Lemma i: (Ginsburg &#38; Spanier) If P is 
context-free (regular) and Q is regular, then P+Q is context-free (regular). Proof: Theorem 3.2, Corollary 
1 in Ginsburg &#38; Spanier [5]. For representing the members of C, the C-expressions are defined as 
follows: (i) all regular expressions are C-expres- s ions. (ii) if ~ and 8 are C-expressions, then 
so are eS, (evE), (e)*, (~+B), and (~)# An axiom system for C-expressions is given in Appendix I. 
Lemma 2: (Properties of #) ~11 ~PvQl # = P# + Q#, (2~ (P#~ # = p#. Proof: (i) Since (^vR) # = R # 
for any R by Ax~ 17, without loss of generality we can assume that both P and Q do#not con- tai~ the 
empty word I. Let Y~P and Z~Q ~. Then by Axiom 18, y=Av~Y+p) and Z=^v (Z+Q) . Therefore, Y+ (Z+Q) = 
(Z+Q)v(y+p) + (Z+Q) and Z+ (Y+P) = (Y+P) v(Z+Q) + (Y+P) . Then Y+Z=(AV(y+P))+(^v~Z+Q)) =^v (Z+Q) v 
(y+p) v(Y+Z+P+Q) =Av (Y+Z+Q) v (Z+Y+P) =^v (Y+Z) + (pvQ) . Since PvQ does not contai~ I, by the in- 
ference rule 3, Y+Z=(PvQ) ~. (2) Similar to (i). Ommitted. Q.E.D. The power of C-expressions is indi- 
cated by the next theorem. Theorem 1 : Let a,b,c¢~. (i) (a) # is regular,  (2) (ab) # is not regular 
but context- free,  (3) (abc) # is not context-free but context-sensitive.  Proof: (i) (a)#=(a) * 
By induction, ak+a=a k+l  (2) (ab)#=D(2)=the Dyck language with two letters, with the grammar {S+aSb, 
S÷SS, S÷X}.  First, we s~ow D(2)C(ab) #. If u,SE(ab)~, then - X¢ (ab)~, e~eu+Sc(ab) #+.Cab) #= (abvab) 
#= (ab) #. aebce+ab_c (ab) #+ab6(ab) #. Note that for any P,Q,RCE*, PQcP+Q, PQRcQ+PR. Second, we show 
(abide_D(2). Since X~(ab)#=AV(X+ab) , we have to show that if-u is derivable from S, then u+ab is also 
derivable from S. By induction on 93 the depth of the derivation tree, it is introduced 'synchronizing 
symbols' and enough to show that for each rewriting special interpretation rules, for the same rule, 
S+ab can be generated from S. purpose. aSb+ab={aSbab,aSabb,aaSbb,aabSb,abaSb}, SS+ab ={SSab,SaSb,aSSb,aSbS,abSS}, 
 X +ab ={ab}, and all of them are derivable from S by inspection. (3) (abc)#-{X} can be generated by 
the context-sensitive grammar {S+abcS, S+abc, ba÷ab, ca÷ac, cb+bc}, by the similar argument to (2). 
S. n+l. n+l n+l n .n. n n_n n ince a D c =a aD DC c~a D C +abc; for any n>l, ~nbncnc(abc)#. Since any 
member of (abc)~ has the same number of a's, b's and c's, by the xuwv~-theorem of context-free languages, 
(abc)" is not context-free. Q.E.D. It is conjectured that C is a sub- family of context-sensitive sets 
and not compatible with the family of context- free sets. Consider the language generat- ed by the grammar: 
{S+aSa, S+bSb, S+X}. The activities defining the first reader-writer problem (Coutois [2]) can be represented 
by the following C-expression: ( ((ab) #+c) d) *(ab) # , where a = reader initiation, b = reader termination, 
c = writer request, d = writer initiation &#38; termination, and d can occur only when all readers are 
 terminated. Note that the readers' community process is (ab) #, and the writers' community process 
is (cd)* because writers are mutually exclusive with each other. Even though this process is context- 
free, Chen [1] showed that this process cannot be generated by any Petri net. 3. Interprocess Communications 
(SC-Expressions) A process P communicates with a process Q when an occurrence of an event in P has some 
effect on an occurrence of an event in Q, and vice versa. The concurrent composition +, as it is defined 
now, does not necessarily represent the concurrent composition of communicating processes. We investigate 
two different mechanisms to represent such a composition. One is a generalized + operator, and the other 
is a 'communication link' defined in the next section. First we generalize the + operator. Under this 
new operation, two occur- rences of the same event in different processes can be identified. Riddle [ii] 
 Partition the set of the events E into synchronizing events S and non- synchronizing events E-S. The 
t of E is a pr~e~on of E* on S*, i.e., a homomorphism t:E*÷S* defined by: t(e)~e if e~S, t(e)~X if eeE-S. 
Let P,QCE*. The concurrent composition P~ Q of synchronizing processes P and Q is: P f9 Q~{P/~qlPeP&#38;qeQ&#38;t(p)=t(q) 
}, where ~/-/~.l~aT{~}, a~/Tbs~a(a/~bS) ub(aa/~8) if aLS,b~S, ~a (a/Ybs) if aLS,beS, ~b(aa/~S) if 
aeS,b~S, ~a (a/~8) if aeS,beS, a,beE and a,SeE*.  Example: Let E={a,b,c,d,e,x,y}, S={x,y}. Then t(axbyc)=t(dxye)=xy, 
and axbyc ~ dxye =(a+d)x(b+X)y(c+e)={adxbyce, adxbyec, daxbyce, daxbyec}. The operation ~ is identical 
with the operation + when S is empty, and with the intersection operation when S=E. Denote by ~ the 
closure of operation, i.e, P ~AVpV(p~p)v(p~pep)v... Example: (axbxc)~={anxbnxcnln~l}u^. We extend the 
C-expressions to include and ~ , and call them SC-Expressions: (i) all C-expressions are SC-expressions, 
 (2) if s and 8 are SC-expressions, then so are  a~,C~v~),(a)*, Ca+S), Ca) #, (aeS)&#38;Ca) @.  In 
order to show the power of SC- expressions, the synchronization problems from Lipton [8] and Kosaraju 
[7] are represented by SC-expressions below. All synchronizing events are underlined. (i) Four Dining 
Philosopher's Problem (DP) DP=((a0b0VA)+(a2b2VA)V(alblVA)+(a3b3v^)) * where a.=initiation of philosopher 
i, i b.=termination of philosopher i. l  (2) First Reader-Writer Problem (FRW) FRW=((ab)#~)*(ab) 
# ~ (cxd Z)* Recall that this problem can be represented by a C-expression, 94 ( ((ab) #+c) d) * (ab) 
#  (3) Second Reader-Writer Problem (SRW) SRW= ( ( (a+ (ab) #) xb)~y~_z) * (ab) # ~ (cx~d£) * a,b,c,d=same 
as in FRW with additional constraint that once c occurs a cannot occur until d occurs. Another SC- expression 
for SRW is ( ( (a+ (ab) #) cb)~d) * (ab) #.  (4) Bounded-Reader Writer Problem (BRW) BRW=((ab)k#x~)*(ab)k# 
~ (cxdz) where pk#~^vPv(P+P)V...v(P+P+-.-+P), %k times / a,b,c,d=same as in FRW with additional constraint 
that the number of readers active in the system is k or less.  (5) Kosaraju's Producer-Consumer Problem 
 (KPC) # KPC=((ab)#x~)*(ab) # ~ (cxd Z) where a=producer l, b=consumer i, sharing buffer i, c=producer 
2, d=consumer 2, sharing buffer 2, and d can occur only when the buffer 1 is empty. Another SC-~xpressign 
for KPC is ((ab)~d)*(ab)~ ~ (cd) ~.  4. Communication Link Now we investigate the second mechanism 
to represent the concurrent composition of communicating processes. Let X be an arbitrary set. Denote 
by I X the set of all one-to-one partial transformations on X, i.e., the symmetric inverse semigroup 
of X. (Appendix II). Note that I x has the zero element which is the vacuous transformation on X. A 
communication link L is a deter- ministic infinite state machine in which only nonvacuous one-to-one 
partial transformation is allowed as an action on the states: L~(S,A), where S (semaphore values): 
a possibly infinite set ~ states, ACI~-{~} (semaphore o~erations) : a -~finite set of actlons.  Each 
semaphore operation is invertible in the sense that the previous state of the link is uniquely retrievable 
from the current state when the action taken is known. Without this retrievability some information 
may be lost in a link which is supposed to convey all information. A communication protocol ~ is an 
assignment of events to the semaphore operations on a communication link L=(S,A): 0:E÷A~I S  Since 
In is a semigroup of transformations, can b~ extended to a homomorphism ~:E*÷Is, where ~I~i S (the identity 
transformation of S), ~(~B)~(~)o~(~), ~,8~E*. Call ~(E*) the semigroup of the communi- cation protocol'~. 
A prot~oi--~s ba~nced, ~-~ semigroup is an inverse semlgroup. A protocol is standard, if it is a bijection. 
 A protocol o:E*+l_ defines an action of E* on S; o:E*×S+S a~ ~s=s'<~><s,s'>E~(~).  Each activity ~E* 
designates an opera- tion on S under ~. A standard protocol as an action corresponds to the next- 
state function of the communication link viewed as a state machine. Denote by ~ the ordered pair of 
~ and 8, and by N the set of all nonnegative integers. Examples: ~Communication Links) ~l~ Dijkstra's 
Simple Semaphore p .n+l Lpv~ (N, {P,V}) where ~i-~--l neN},  V~{n~In~N} Note that VP=iN, PV=iN-{0}, 
P-i=v and V-i=P. A standard protocol for Lpv is balanced and its semigroup is isomorphic to the bycyclic 
semigroup. (Appendix If)  (2) Petri Net (m places, k transitions) LpN~(Nm,{tl,t2,...,tk}) where tielNm, 
and (n+a],n+a2,...,n+a m) ti={(n+bl,n+b2 , ,n+bm) IncN}'l~i~k' ? q for some ap,bqeN, lip, q~m.  95 
 (3) Let V be an arbitrary finite alphabet. For each aeV, let x ~a~{~ Ix~v*}' ~a -l=~xa I  ~'x ,x~V*}, 
 I - X " . -i ~ax, a~{~ Ix~v*}' ~a ~t~ -Ix~v*}" Note that pa(la) is an inner right (left) transl~£ion 
of V*. The following devices are communication links. (i) STACK: = * { , LSTACKA(V , pa,pallaeV}) 
 (ii) QUEUE(FIFO): LQUEUE~ (V*, {pa, la I I aeV}) , (iii) DEQUE: LDEQUE~(V*,{pa,p~I,Ia ,l~IIaev}) 
A standard protocol for LSTAC K is balanced and its semigroup is iso- morphic to the polycyclic monoid 
generated by V. (Appendix II). A standard protocol for LDEQU E is also balanced. Note that not every 
finite automaton is a communication link, e.g., is not a communication link. 5. Community of Processes 
 In this section we define the con- current composition of processes communicating through a communication 
link (protocol). Let P~E* be a process. Denote by @P the set of all partial activities of P; i.e., @P~{~EE* 
I BcP;e<8}, where ~<8<~>3yEE*;~y=B, (0. is a left divisor of 8 in the free monoid E*) . Note: @P is 
called INIT(P) in Ginsburg [4]. Lemma 3: If P is context-free (regular), then so is @P. ( Ginsburg 
[4], p. 107.) (i) PC@P and IE@P. (2) @x=x. (3) @(pvQ)=@pv@Q.  (4) @(pQ)=@pvp(@Q).  (5) @ (P*) =P* 
(@P) .  (6) @ (P+Q) =@P+@Q.  (7) @ (P#) =(@P) #  Proof: Immediate from the definition. Let u:E*+l 
s be a protocol of a link L=(S,A), and let s,s'eS. s/ Denote by ~-r ~ the set of activities whlch are 
admls%lble under u from s to s': i.e., ~{eeE*lus=s'}. Similarly, denote by Isl~ the set of activities 
which are admissible under a from s: i.e., Isl~{~E*l~s~S;~s=s} A process P is deadlock-free under (~,s), 
a protocol with an initial state scS, if any partial activity of P admis- sible under (~,s) can be completed 
to an activity of P: i.e., eP~Islo~@(P~Islo). A family of processes {PilieI} sharing a protocol (s,s) 
is a communi£[ if +{P=} is deadlock-free under (~,s). All activities in the community make the community 
ro~s denoted by {Pi; (~,s)}~+{Pi}nlsl~. Note that a community process is deadlock-free by definition. 
 Examples: (Communities) (1) Community sharing a binary semaphore: Ci~{Pi,P2 ; (~l,Sl) } Bs U0 Pl~(ab)*, 
P2~(cd)*, Ul: a,c ~ p, b,d ~ v, Sl~l. ~i as an action on {0,i} 9, 9, Cl= (abvcd) * Pi+P2 = (ab) *+ 
(cd) *, [ 1 I ~i = (abvcdvadvcb) * (^vavc) ,  96 Cl=Pl+P2n I 11 $i = (abvcd) *. @ (Pl+P2) = (ab)*(^vavab) 
+ (cd) *(^vcvcd) , by Lemma 4, @ (Pi+P2) n I ii ~i = (abvcd) * (^vavc) , @ ((Pl+P2) n I lip I) = (abvcd) 
*(^vavcvabvcd) =(abvcd)*(Avavc)=@(pl+P2 ) nIiI~ I. Therefore, Pi+P2 is deadlock-free under (~I,i), and 
{Pi,P2 } is a community with the community process C 1  (2) Community sharing two binary sema- phores: 
C22{Pi,P2; (~2,s2) } L2BS~({0,1}x{0,1},{p(1) ,v(1) ,p(2) ,v(2) }) , where 10 ii. 00 01 p (i) ~{UU,Sy~, 
v (i) ~{y~,yy}, .01 ii. 00 i0 p(2) ~i~,~), v(2) ~{~,~}. pl =(ab)*, P2 =(cd)*. ~2: a~ v(1) , c~ p(1) 
, b~-~ p(2), d~-~ v(2). s2~00 a ~2 as an action on {0,1} 2 C 2 = (acdb) * C2=Pl+P2nI001~2=(acdb) *, 
@(Pl+P2)nl001a2=(acdb)*~Avavacvacd), @((Pl+P2)nI001a2) = (acdb)*(Avavacvacdvacdb) . Therefore, P~+P2 
is deadlock-free under (~2,00~. 97 A SC-expression for C 2 is (ax~b) * ~ (xcdy) *= (axcd~b) *  (3) 
Communication with deadlock : {Qi,Q2 } under (s3,s3) L2BSC~({0,1}x{0,1}, {p(1) ,p(2) ,v(l,2) }) , where 
p(1),pC2)=same as in L2BS, v(l,2)~{~}. Qi~ abc, Q2~ def, ~3: a~-~ p(1) , d~-~ p~2) , b~-~ pC2) , e~-~ 
p(1) , c,f~-~ v(l,2) . s3~ll a,~ e3 as an action on {0,1} 2 i not a co--unity Ql+Q2=abc+def, @ (Qi+Q2) 
= (^vavabvabc) + (^vdvdevdef) , @(Ql+Q2) nllll~3={l,a,ab,abc,d,de,def, ad,da,defa,defab,abcd,abcde, 
abcdef,defabc}, [Ql+Q2) nllll~3={abcdef,defabc}, @((Ql+Q2)nlllIa3)={l,a,ab,abc,abcd, abcde,abcdef,d,de,def,defa,defab, 
defabc}. Since ad, da~@(~Q1+Q2 ) nIlll~3) , and ad, da~@(Ql+Q2)nl~iIa~, Qi+Q2 is not deadloCk-free under 
(~3,Ii)? Therefore, {Qi,Q2 } does not form a community under ~3,11). (End of Examples)  The decision 
p3~oblem of process community is to decide whether a given family of processes form a community or not 
under a given communication protocol. The following result is not sur- prising, but has practical importance. 
 Theorem 2: It is decidable whether a finite family of sequential processes form a community or not 
when they share a finite communication link.  Proof: For any protocol (~,s) of a finite communication 
link, Isl~ is regular because the link is a finite automaton. Let Pi,P2,...,PneS, then by the lemma i, 
P~Pi+P2+...+P n is regular. Therefore, by the lemma 3, @P is regular. Since the regular sets are closed 
under intersection, the following sets are all regular: Pnlsl~ , @Pnlsl~ and @ (Pals|p). Since the inclusion 
problem for regular sets is decidable, @Ps Isl6(~l[~nls|~) is decidable. (Ginsburg [4], Corollary 4.1.1) 
Q.E.D. 6. Concurrent Deco~position of Process A process P is concurrently decomposable into a family 
p of processes, if there exists a protocol (~,s) under which p forms a comrsunity and its community process 
is P: i.e., P={p; (~,s) } and @(+p)nlsl~@P.  A synchronization problem (P,p) is to find a protocol 
under w~[c~--is concurrently decomposable into p. A synchronization problem ~P,p) is internal if P=+Fn@P- 
 Examples: (Internal Synchronization P rob i ems ]i (i) (DP,{ (aibi)*lie~}) ,  (2) (FRW,{(ab) #, (cd)*}), 
 (3) (SRW, { (ab) #, (cd], * }) ,  (4) (BRW,{(ab) #, (cd]l*}) ,  (5) (KPC,{(ab)#, (cd],#}) .  Let 
(~,s) be a protocol. A process P is realizable b~ (~,s) if @P=Is|~. Lemma 4: Let (P,p) be an internal 
synchroni- ration problem. If P is realizable by (~,s), then (~,s) is a solution of (P,p)  Proof: 
Let Q~+p. From the assumptions, p=Qn@p and @P=Isl~. Then @enlsl~=@On@P~@P=@(Onlsl~). So Q is deadlock-free 
under (s,s) . Q.E.D. Lemma 5 : Let ~ be a balanced protocol of a link L=(S,A). (i) As an action on 
S, ~ partitions S (into the orbits [s]~ of s~S) by the equivalence relation: sEs'<~> ~eE*;es=s'.  
(2) For any sES, @[l~l~)=Isl$. Proof: (1) Since ls=s and e(Bs)=(~8)s for any ~,SeE*, the relation is 
reflexive and transitive. But since ~ is balanced, if ~s=s', then for some ~eE*,~s'=s, i.e., the relation 
is symmetric. I I S  (2) By deflnltlon @(,~.~)Clsl~. Assume eelsl~ , then ~s=~land ~s'=s, there- 
fore,~s=s and ~e@(l~l~). Q.E.D.  L~a6: (1) (ab)* is realizable by a standard protocol of LBS.  (2) 
(ab) # is realizable by a standard protocol of Lpv.  Proof : 1  (i) Let a~v={~--} and b~p={~} in 
 LBS= ({0, i}, {p,v}) . Then * 0 (ab)*=(vp)*={~} =I~I Since a standard prot6col of L~e is balanced, 
by the lemma 5, @((ab) ~=I01. n , b-P- .n+l,  (2) Let a~V={n~InEN} and ~ -i-~--IneN} in Lpv=(N,{P,V}). 
Also let X~I00--1, Y~I~I under this protocol. Then X=^vaYb, Y=XvbXa, therefore, X=^vaXbvabxab, and 
X can be generated by the grammar {X÷l, X÷aXb, X+~bXab}. From the theorem i, (ab)~ can be generated by 
 {S÷I, S÷SS, S+aSb}. Since laX, XX=I~I l~ICI~I=x, and aXb£X,  98 (ab)#cX. On the other hand, s~nce 
le(ab[~, a(ab)~bc(ab)~+~b~(ab) , and ab (ab) ~bc(ab) ~,-MC(ab) ~.-- Therefore, (ab)~=l~l~ and by {he 
lemma 5, @((ab)~--]O[ . Q.E.D.  Let Li=(Si,A l) and L2=(S2,A 2) be communication links. Denote by I 
1 and I2, the identity transformation of S 1 and S 2 Define L]+L2~(SixS~,Ai+A~), (asynchronous composition) 
 where Al+A2~{alxI2,IlXa21aleAl&#38;a2eA2} ClSlxS2, and alxa 2(s l,s 2)~(a l(sl ) ,a 2(s 2)) .  Theorem 
3: (FRW,{(ab)#, (cd)*}) is solvable by a standard protocol of Lpv+LBs.  Proof: Let q be a standard 
protocol of Lpv+LBs defined by: Lpv+LBs=(Nx{0,1},{Pxi,Vxi,Ixp,Ixv}), i~lN ' i~{0 1 ~,i},  o: a~Vxi, 
c~lxv, b~Pxi, d~Ixp.  Then (i) ac=(Vxi) (Ixv)=(VIxiv)=(Vxv) , ca= (Ixv) (Vxi) = (IVxvi) = (Vxv) , 
hence ac=ca. (2) Similarly bc=cb, and ab=cd=(Ixi).  Therefore, FRW=(((ab)#+c)d)*Cab) # =((ab) #cd)*(ab) 
#( "." ca=ac, cb=bc ) =((ab)#)*(ab) #=(ab) # under the protocol ~.  By the lemma 6, FRW=(ab)#=' (0~I. 
Since is balanced, @FRW= I (0,0) I~'Y;.~ , FRW is realizable by (q, (0,0)) . Since the FRW synchronization 
problem is internal, by the lemma 4, (~, (0,0)) is a solution. Q.E.D.  7. Conclusion We have demonstrated 
that the extensional definition of, and its algebraic manipulation of 'process is sufficient for specifying 
various synchronization problems and their solutions. The following problems are to be  solved: (i) 
Consistency and completeness proof of the axiom system for C-expressions. Characterization of C by Chomsky 
hierarchy, and comparison with other languages such as Petri net languages L~ and Path Expressions (Habermann 
 [13]).  (3) Similar characterization of the family SC of processes that can be represented by SC-expressions. 
 (4) The inclusion problem for C and SC to extend the theorem 2 for non-regular sets.  Our next work 
will be on the algebra of link composition. One of such compositions is the asynchronous composi- tion 
defined for the theorem 3. With this algebra of link composition, any general Petri net can be expressed 
as a composition of Lpv. References: <RefA>(i) Chen, R. C., Representation of process synchronization, Proc. 
of ACM Inter- process Communications Workshop, March 1975.  (2) Courtois, P. J., Heymans, F. &#38; Parnas, 
D. L., Concurrent control with "readers" and "writers," CACM 14, i0, October 1971.  (3) Clifford &#38; 
Preston, The Algebraic Theory of Semigroups, Vol. l, Math. Surveys, No. 7, American Math. Society, 1961. 
 (4) Ginsburg, S., The Mathematical Theory of Context-free Languages, McGraw- ~iI, 1966.  (5) Ginsburg, 
S., Spannier, E. H., Mappings of languages by two-tape devices, JACM 12, 3, July 1965.  (6) Hack, M., 
Petri net languages, MIT Project MAC memo 124, June 1975.  (7) Kosaraju, S. R., Limitations of Dijkstra's 
semaphore primitives and Petri nets, 4th ACM Symp. on OS Principles, October 1973.  (8) Lipton, R. J., 
Limitations of synchronization primitives with conditional branching and global variables, 6th ACM Symp. 
on Theory of Computing, May 1974.  (9) Lipton, R. J., Snyder, L., Zalostein, Y., A comparative study 
of models of parallel computation, 15th ACM Symp. on Switching and  Aud~dma~e~y~--19/4. ,99  (i0) 
Peterson, J. L., Bredt, T. H., A comparison of models of parallel computation, IFIP Information Processing 
74.  (ii) Riddle, W. E., ~?he modelling and analysis of supervisory systems, Ph.D. thesis, Stanford 
University, March 1972.  (12) Salomma, A., Axiom systems for algebra of regular events, JACM 13, i, 
1966.  (13) Habermann, A. N., Path expressions, Computer Science Department, Carnegie-Mellon University, 
June 1975.  (14) Nivat, M., &#38; Perrot, J., Une generalisation du monoide bicyclique,  C. R. Acad. 
Sc. Paris, t271, 1970, pp. 824-827.  (15) Kimura, T., Inverse semigroups of context-free languages: 
Application to language completion problem. Department of Statistics and Computer Science, University 
of Delaware, August 1975.</RefA>  Appendix I. Axiom System for C-Expressions:  This is an extension of F 
1 system in Salomaa [12] for regular expressions. (i) Axioms: i. (pvQ) vR=Pv(QvR) , 2. pVQ=Qvp, 3. 
pvp=p, 4. pv~=p, 5. (PQ)R=P(QR) , 6 P(QvR)=PQvPR, 7. (PvQ)R=PRvQR, 8 ^P=P, 9. ~P=:~. I0 (P+Q)+R=P+(Q+R) 
, ii. P+Q=Q+P, 12 P+(QVR)=P+Q\,P+R, 13. ^+P=P, 14 @+P=@, 15. p*=(AVP)*, 16. p*=AVP*p, 17 P#=(^vP) 
#, 18. p#=^v(P#+P) , 19 aP~bQ=a(P+bQ) vb(aP+Q) , for any alphabet a,b (axiom schema).  (ii) Inference 
Rules: i. Substitution 2. X=QvXP=~X=QP*  3. X=Qv(X+P)~X=Q+P #,  where P does not have the empty 
word pro~y-~.w.p.).  Note: P has the e.w.p, if P=Q* for some c-expression Q, or P=QvR with Q or R 
having the e.w.p., or l  P=QR with Q and R having the e.w.p, or P=Q+R with Q and R having the e.w.p., 
or P=Q# for some C-expression Q. Appendix II. Inverse Semigroups (Clifford &#38; Preston [3]) Definitions: 
 Let S be a semigroup. An element aeS is regular if BxcS; axa=a. S is regular if VaES; a is regular. 
An element beS is a regular conjugate of aeS, if aba=a and bab=b. S is an inverse semigroup if S is regular 
and each element has a unique regular conjugate. Let X be a non-empty set. A trans- formation tCXxX 
is one-to-one art~ if <a,b>,<c,d>et implies that a=c~b=d. The symmetric inverse semigroup on X,Ix, is 
the set of all one-to-one partial transforma- tions on X. Theorem: For any inverse semigroup S there 
is an isomorphism h from S into I x for some X.  Examples: (Inverse Semigroups) (i) Bycyclic Monoid 
 (NxN,o,<0,0>) where N~{0,1,2,...}, and <n,m>o<n',m'>~<n+n'-min(m,n') , m+m' -min (m,n ' ) >.  (2) 
Polycyclic Monoid (Nivat [14], Kimura [15]) (X*xX*v{~},o,<l,l>) where X* is the free monoid generated 
by a finite set X including I, and <a,b>o~o<a,b>~ go~, <a,b>O<Cld>~<a,de> if b=ce, ~<af,d> if c=fb, 
 ~ otherwise.  i00  
			
