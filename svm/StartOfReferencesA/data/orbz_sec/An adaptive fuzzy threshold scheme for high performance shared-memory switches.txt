
 An adaptive fuzzy threshold scheme for high performance shared-memory switches Giuseppe Ascia Vincenzo 
Catania Daniela Panno Dip. di Ingegneria Informatica e Dip. di Ingegneria Informatica e Dip. di Ingegneria 
Informatica e delle Telecomunicazioni delle Telecomunicazioni delle Telecomunicazioni Viale A. Doria, 
6 Viale A. Doria, 6 Viale A. Doria, 6 95125-Catania-ltaly 95125-Catania-ltaly 95125-Catania-ltaly Phone: 
+39-095-7382353 Phone: +39-095-7382352 Phone: +39-095-7382369 gascia@iit.unict.it vcatania@iit.unict.it 
dpanno@iit.unict.it ABSTRACT. In this paper we propose a new buffer management scheme for shared-memory 
ATM switches. The philosophy behind it is adaptation of the threshold for each output logical queue to 
the real traffic conditions by means of a system of fuzzy inferences. The performance of our system is 
very close to that of an ideal mechanism such as the push-out mechanism, and at any rate much better 
than that of the threshold schemes based on conventional logic. In addition it is simple to implement 
and above all inexpensive when implemented using VLSI technology. General Terms Management, Performance, 
Design Keywords ATM switches, Shared-memory, Fuzzy Logic, Buffer management. 1. INTRODUCTION One of 
the most significant problems in ATM packet-switched architectures is buffer management. The various 
policies investigated in the literature include input queuing, output queuing and shared buffering[I][2]; 
the best performance in terms of delay-throughput is obtained by schemes based on output queuing with 
completely shared buffering: each output port has its own logical queue but shares the same memory area 
with the other ports. Permission to make digital or hard copies of all or part of this work for personal 
or classroom use is granted without fee provided that copies are not made or distributed for profit or 
eon-anereial advantage and that copies bear this notice and the full citation on the first page. To copy 
otherwise, to republish, to post on servers or to redistribute to lists, requires prior speeilie permission 
and/or a fee. SAC 2001, Las Vegas, NV &#38;#169; 2001 ACM 1-58113-287-5/01/02...$5.00 There are still, 
however, a number of open issues to be addressed in these schemes when specific buffer management policies 
are not adopted. One of these is performance degradation due to hot spot load conditions on an output 
port. In these conditions, the port takes up most of the memory, with a consequent loss of packets headed 
to other, less heavily loaded, ports and a reduction in the total throughput of the switch. To tackle 
this problem, various buffer management schemes operating on a shared memory have been proposed [3][4][5][6]. 
The schemes that various studies have shown to provide the best performance are those based on push-out 
policies. In this paper we consider a version, simply called Push-Out (PO), which, if the shared memory 
is full on the arrival of a packet, scans the various output queues in the shared buffer and pushes out 
the packet at the head of the longest queue. The advantage of this scheme is that it is extremely efficient 
because no space is wasted (an arriving cell will never be rejected, if there is free space) and guarantees 
fairness between the various output ports (by letting shorter queues grow at the expense of longer ones). 
This implies minimum loss probability and high total switch throughput. The push-out also is robust because 
it maintains the best performance in different traffic scenarios and is scalable because no parameters 
have to be tuned with different switches and buffer sizes. Unfortunately push-out is extremely complex 
to implement in high-speed switches as the longest queue search for any slot time requires too much computation 
time. In general, a great drawback of all push-out policies is that they require a great amount of queue 
processing, thus making them impossible to use in high-speed switches. Hence the presence in the literature 
of other schemes based on non-push-out policies. A scheme which is much simpler to implement, for example, 
is one based on a fixed threshold. It sets a threshold value for each output logical queue in the shared 
memory and a packet arriving is discarded if the length of the relative output queue exceeds this threshold 
value, regardless of whether there is any free space in the shared buffer or not. However, the performance 
of this scheme is poor as it is not possible to determine a threshold value which works well in different 
traffic conditions as we have shown in [7]. In order to overcome this limit, in [5] Choudhury et al. 
propose a Dynamic Threshold (DT) mechanism in which the threshold value is at any time proportional, 
with a proportionality coefficient ct, to the unused buffering in the switch. Unfortunately, in different 
traffic conditions the optimal values for a vary, as we will see in the following section. In this paper 
we propose a new buffer management scheme that can be applied in ATM switches with a shared memory, based 
on fuzzy logic. Our scheme is based on a non-push-out policy as we believe that speed in control response 
and simplicity of implementation are of fundamental importance in high speed switch. The philosophy behind 
the scheme presented here is adaptation of the threshold for each output logical queue to the real traffic 
conditions by means of a system of fuzzy inferences. Fuzzy logic is proving to be increasingly successful 
at solving traffic control problems when flexibility and versatility to different traffic conditions 
are required, as has been widely documented in relevant literature [8][9][ 10][ 11 ][ 12]. The performance 
of our system is very close to that of an ideal mechanism like the push-out mechanism, and better than 
that of the threshold schemes based on conventional logic. In addition it is simple to implement and 
above all inexpensive when implemented using VLSI technology. The paper is organised as follows: in Section 
2 we present an analysis of dynamic threshold mechanisms; Section 3 describes the fuzzy threshold mechanism; 
Section 4 presents an assessment of the performance of the fuzzy system compared with PO and DT; and 
finally, our conclusions are drawn in Section 5. 2. A BRIEF ANALYSIS OF THE DYNAMIC THRESHOLD SCHEME 
In this section we demonstrate that once we have assigned the dimensions of a switch, in terms of the 
number of ports, Np, and the size of the shared memory, B, it is a complex task to determine the optimal 
value of ct for the Dynamic Threshold mechanism (DT). The difficulty lies in the fact that different 
traffic conditions require different values for this parameter. In the Dynamic Threshold mechanism the 
threshold value T(t) varies in time according to T(t) = (~ [ B -Q(t) ], where B is the buffer size, Q(t) 
the buffer occupation in time t, and ct is the buffer sharing degree. The latter is a very important 
parameter for the performance of the DT scheme.Unfortunately, the best ct value for hot spot traffic 
conditions is different from that for a uniform load and it is difficult to choose the right ct value 
when the switch and buffer sizes vary, as demonstrated by the brief analysis below. In the simulations 
outlined below, we assumed a 16 x 16 switch with B=200 cells; each input port is fed by a link offering 
bursty traffic featuring periods of activity, in which cells are transmitted at the link rate, and periods 
of silence. The duration, in time slots, of the activity and silence periods is geometrically distributed. 
The cells contained in a burst are addressed to a single output port and successive bursts can be directed 
towards different outputs. We evaluated the performance of the static threshold mechanism in terms of 
cell loss probability in varying traffic conditions: uniform load, i.e. all the output ports are equally 
loaded; non-uniform load, in which some output ports are more heavily loaded than others; and hot-spot 
load, in which a single output port is overloaded and the others only moderately loaded. Fig. 2.1 shows 
the cell loss probability versus ct values assuming uniform traffic conditions. It is evident that with 
light loads, to keep the loss probability down it is convenient to set a higher ct value. Fig. 2.2, which 
refers to hot-spot conditions in which a single port is overloaded, shows the cell loss probability for 
moderately loaded ports (p = 0.45) at varying threshold values. Here, to prevent the overloaded port 
from taking up all the available buffer memory it is necessary to keep the ct values around 3. This difficulty 
in defining the best ct value becomes even more evident when operating with the lower loss probabilities 
required for a network to function well. Let us consider a 16 x 16 switch with a buffer size of 700 cells. 
From an analysis of the results given in Figs. 2.3 and 2.4 it emerges that choosing ct=2 as the optimal 
value in hot-spot conditions leads to a loss probability that is almost one order of magnitude higher 
than the optimal choice of ct=6 in uniform load conditions. This brief analysis shows that the incapacity 
of static threshold scheme of adapting to variations in traffic conditions is a limit that the DT partly 
overcomes. However, the implementation simplicity of threshold schemes makes them interesting. The aim 
of our investigation was therefore to search for an adaptive mechanism in which the value of the threshold 
for each logical output queue could be adapted to the real traffic conditions by means of a system of 
fuzzy inferences. 1.000 .-.A-~&#38; .... ~ ---&#38;~- .... .---&#38;..- /I I 2"~ 0.100 "'-X":--~"~:~ 
...... :':0~--:---: '---~0:~:-'7;-':-~--~:-'0" ..... 1~ ..... ~-'-: :"~-:::-:--:--::::::-:::: :.--" :::-.:|l:II 
--,,-...., Ii | '~" ...... ~x--x ~ ~. ~-tl I 0.001 0,5 1 2 3 4 5 6 7 8 a Fig.2.] Cell loss probability 
versus ct for various uniform loads p. 0.5 I 2 3 4 5 e 7 e a Fig.2.2 Cell loss probability of moderately 
loaded output ports (p =0.45) versus a for various loads Ph~ offered to a single overloaded output ports. 
1, .-_ . O.t. .+-, -:+ + + + + + + *t,., O, Ol :~ -"I --I ---I I X I--I i. ~-~._ X'~"~"X-.~._.. X 0,00t 
~.,., '" ...... X----X------X--- ---X ..... X ~ 0,~1 ---I 0,00001 4~'-'-~., i . .... ~l.~ __41,__ .... 
0,000001 2 3 4 5 6 7 8 0. Fig.2.3 Cell loss probability versus cc for various uniform loads p. ! o.ol 
C ..... ': -! " -:: ..... -~"l Fig.2.4 Cell loss probability of moderately loaded output ports (p --0.45) 
versus ct for various loads Phs offered to a single overloaded output ports. 3. A NEW FUZZY THRESHOLD 
SCHEME The shared-memory buffer management model is shown in Fig. 3.1. An arriving cell is admitted and 
queued in the destination output ports, Ok, if the length, Lk, of the associated virtual queue, VQk is 
smaller than a threshold value S. The latter is computed by a fuzzy system according to the overall occupation, 
Q,of the shared memory where: Ne Q=ELk k=l If the value of Lk exceeds that of the threshold S, the cell 
is discarded. Choosing whether to accept a cell in a queue or reject it can be performed by a simple 
comparator block which compares the threshold S with the state of occupation, Lk., for each queue. The 
threshold value S is determined at each time slot by means of the system of fuzzy rules shown in Fig. 
3.2. It is a set of 7 rules with a single antecedent and a single consequent. Figs. 3.3 and 3.4 respectively 
show the membership functions of the linguistic values the input variable Q and the output variable S 
can take. B represents the size of the buffer, while Np is the number of ports in the switch. s _1 ",-I 
Q i l ColpllllOl ................ Q I--, ,-q _Pr--........H...i...r....,o, I \ / VQI '. _l __.~ Co........ 
~__ "",'T',"v",'"I : o, / block I / ..... i'~i~;"l'"L'i "" INp i U I losses i Fig. 3.1. The switch model. 
IF Q is VeryLow THEN S is VeryHigh IF Q is Low THEN S is High IF Q is LowMedium THEN S is MediumHigh 
IF Q is Medium THEN S is Medium IF Q is MediumHigh THEN S is LowMedium IF Q is High THEN S is Low IF 
Q is VeryHigh THEN S is VeryLow Fig. 3.2. The fuzzy rules. L LM M MH H VH Pe-0.7$B P,=0,8$B P~-P,+a 
Pj-Pl*2ct P,=Pl+3a P~-Pt+4a P,-P,+4,Sa B Fig. 3.3. The term set of the input variable Q. s ,-l ~ P~=6~ 
P,'PJ+T Ps-PI÷3T B Fig. 3.4. The term set of the output variable S The parameters of the membership functions 
and the control rules are initially set on the basis of intuitive considerations and then tuned through 
simulations. In Figs. 3.3 and 3.4 it is shown the resulting term set that can be expressed as a function 
of the parameters ~c,13,y, where: c~---0.03B; 13=B/Np; y=B*(1-6/Np)/10. The resulting fuzzy system performed 
well in different traffic scenarios, both when the ports had a uniform load and when one or more of them 
was heavily loaded. In addition, as will be shown below-, it can be successfully applied to switches 
with Np=16 and different shared memory sizes, thus demonstrating the flexibility of the system. Analysis 
of the fuzzy system rules shows that with low occupation values (Q is VL ) the threshold is Very High 
(S is VH). As the buffer occupation grows, the threshold regulating the acceptance of cells in a port 
tends to decrease progressively, and if the state of occupation is very high (Q is VH) the threshold 
is Very Low. The fuzzy system thus makes it possible to adapt the threshold dynamically according to 
the extent to which the buffer is occupied. Lowering the threshold S when the total buffer occupation 
increases means preventing a port that is more heavily loaded than the others, and so whose virtual queue 
is much more heavily occupied than that of the others, from monopolising the shared memory. In this way 
the free memory space can be distributed fairly between the other ports, thus guaranteeing that ports 
with a low buffer occupation will be able to accept new cells and insert them in their virtual queues. 
3.1 Implementation issues Besides its good performance, this control mechanism is simple and therefore 
inexpensive to implement. It only requires a counter and a comparator per output port to accept or reject 
a cell, and a digital device to execute the fuzzy inference. As the fuzzy system only has one input variable, 
a good way to implement it with limited costs and a high level of performance is to use a memory with 
a number of locations equal to B, the number of cells that can be stored in the shared memory, the size 
of each of which is W, i.e. the number of bits needed to represent the fuzzy threshold, W=log2B. This 
memory stores all the possible values of the output S for the various states of occupation of the buffer, 
calculated offline by means of the control system proposed. 4. PERFORMANCE EVALUATION In this section 
we will compare the performance of the Fuzzy Threshold mechanism (FT) with that of the Push-Out (PO), 
a mechanism which exhibits ideal performance in terms of efficiency and fairness, and No Control (NC), 
i.e. no kind of control is activated to regulate the level of buffer sharing. In addition, we will also 
consider the behaviour of the Threshold mechanisms, namely static (ST) and dynamic (DT) mechanisms; the 
threshold value T chosen for ST will be the optimal one for traffic conditions that can be considered 
nominal, i.e. uniform with a load of 0.55. For the DT mechanism, the value of ct chosen will be the one 
that represents the best trade-off between the uniform load and hot spot load conditions. To assess the 
performance of the buffer management mechanisms, software simulators were developed in C language. More 
specifically, to evaluate the fuzzy inferences an inferential engine was implemented using MAX-MIN as 
the inference method and Yager's Level Set Method [13] as the defuzzification technique. The simulation 
results given were obtained with a 95 per cent confidence interval. The performance measurement is the 
Cell Loss Probability measured in varying traffic conditions (Uniform, Non-Uniform, Hot-Spot load). The 
metric we use for hot-spot and non-uniform traffic conditions is the cell loss probability experienced 
by moderately loaded output ports. We first considered a 16x16 switch with a buffer of 200 cells; the 
traffic on all the input lines is bursty, with the same average burst length of 20 cells. Analysis of 
the results given in [7], obtained in uniform load conditions of p=0.55, henceforward referred to as 
nominal load, shows that the cell loss probability is minimal when T=70; however, we chose T=60 because 
with a nominal load the cell loss probability is very close to minimum and this value gives rise to 
better performance in overload conditions. As far as the DT mechanism is concerned, the analysis in Section 
2 shows that a trade-off value for ct is 4. Let us examine the first traffic scenario, i.e. uniform load; 
Fig.4.1 shows the loss probability as a function of the offered load p using the four shared buffer management 
strategies. As can be seen, the performance of FT is very close to that of PO and slightly better than 
that of the DT mechanism. The performance of ST, on the other hand, is even worse than that of NC when 
the load is very low (0.40). This is due to the fact that the threshold value chosen for the load is 
too low and it means that losses are substantially due to discarding by the control mechanism (since 
the length of the output queue exceeds the static threshold established) and not because the buffer is 
full. Let us now consider a non-uniform load: some output ports have a heavy load (0.95), while others 
are moderately loaded (0.55). Fig. 4.2 gives the cell loss probabilities for the moderately loaded ports 
with varying numbers of heavily loaded ports. Cell loss probabilities tend to grow as the number of heavily 
loaded ports increases, but while the performance of FT is constantly close to those of PO and DT, the 
performance of ST gets steadily worse. Finally, in the third traffic scenario, hot-spot conditions, we 
assume the presence of a single overloaded port (Phs = 2,.,6) while the others are moderately loaded 
(p = 0.55); the aim is to analyse the effect of the Hot-Spot port on the remaining 15. Fig. 4.3 gives 
the cell loss probabilities for the moderately loaded ports with varying loads on the Hot-Spot port. 
1,000 --<lk~ --A--X Dinamic Threshold [ NO Control Push-Out t ~" ...... ""--"t" --~" O, lOO Q. = 0.010 
................................................. 0,001 0,4 0.45 0.5 0.55 0.6 0,65 0.7 0.75 0.8 0.85 
0,0 Offered load p Fig.4.1 Cell loss probability versus offered uniform load p (B=200). s.00 Ik NO Control 
" ~--Push-Out i i .... I @ ............... ..... l i. O.Ol o 2 4 6 s Number of Heavily Loaded Output 
port (p=0.95) Fig.4.2 Cell loss probability of moderately loaded output ports (p --0.45) versus numbers 
of heavily loaded ports (p =0.95) (B=200). With this kind of traffic, the absence of a buffer management 
mechanism would greatly limit the performance of the switch, as is shown by the curve referring to NC; 
the overloaded port tends to occupy the buffer and the other ports rarely manage to insert a cell in 
the buffer as they almost always find it full. Here again, the fuzzy mechanism's performance is close 
to that of the Push-Out mechanism and slightly better than that of DT. This means that the FT mechanism 
recognises and adapts to the load conditions, keeping the fuzzy threshold values low. ~.00 -"-4~ "-- 
Dinamic Threshold A NO Control J ----)(-- Push-Out ~' Fuzzy ThresholO L00 . ] 2 4 6 Offend Loid p to 
Sa~e Ovedoaded Port Fig.4.3 Cell loss probability of moderately loaded output ports (p =0.55) versus 
offered loads Phs to a single overloaded output ports (B=200). 1.00000 ~ -4P Dinamic Threshold .___J 
---I--Static Threshold l NO Control .,__. O,10O00 ~ Push-Out --~ ~ ''-- .~--/ .,-~ll; "~ X FuZzy Thresho 
d ~:,~. ~ Q. ~ 3 O,00100 0 0.00010 /" 0,00001 0.55 0.60 0.65 0.70 0.75 0.60 0.85 0.90 Offered Load p 
Fig.4.4 Cell loss probability versus offered load p (B=700). 1,0000 "--4~-- Dinamic Threshold - No Control 
+ Push-Out o,looo .... I, __ FuzzyThmshokl a. . o, : . i ~ 1 2Number of H~avily Loaded4Outpul POd (Sp 
=0,95 ) S ;' Fig.4.5 Cell loss probability of moderately loaded output ports (p =0.55) versus numbers 
of heavily loaded ports (p =0.95) (n=700). 460 10.0000 ---~-- Dinamtc Threshold Static Threshold L- 
1.0000 A, + -X NO ConVd Push-Out FUZZy Threshold J A ± ~L g 0,1003 .... = : "~ 0,0010 X--..... ~ -~--~'T 
--" ----T---~'X ~'-'~--:::---%~'~ " ~: o. e ------~ ~ o o,oooi 2 3 4 5 6 Offered Load p to single Overloaded 
Port Fig.4.6 Cell loss probability of moderately loaded output ports (p =0.55) versus offered loads Phsto 
a single overloaded output ports (B=700). It should be pointed out that the loss probability values obtained 
are quite high; this is specifically linked to the size of the switch being examined. To test the robustness 
of the FT even further, we varied the size of the shared memory. More specifically, we considered a 16x16 
switch but with B=700; with this buffer size the losses in various traffic conditions are much lower 
than those experienced with B=200 (even by a few orders of magnitude). As regards the choice of the threshold 
for ST, we again took the value that minimises cell loss probability in nominal traffic conditions; the 
value obtained via simulation is T=430. Also the ct value for the DT equal to 4 is a good trade-off value 
(see section 2.2). Let us reconsider the first traffic scenario, i.e. uniform load; Fig. 4.4 gives the 
loss probability as a function of the offered load p using the four buffer management strategies. When 
the load is less than 0.55 losses are extremely low (less than 10 3) even when no control policy is applied. 
As the load increases, especially when it reaches p=0.65 to p=0.9 a degradation in performance is observed 
for both NC and ST. The performance of the FT mechanism, on the other hand, is still close to those of 
the Push-Out and DT mechanisms. The buffer management mechanisms were also compared on a 16x16 switch 
with B=700 in non-uniform and Hot-Spot traffic conditions. The relative loss probabilities are shown 
in Figs. 4.5 and 4.6. In these more critical traffic conditions, where the gap between the ideal performance 
of PO and that obtained with no control widens, the robustness of the fuzzy mechanism is even more evident. 
It can be observed that, above all in hot spot load conditions, the performance of the FT mechanism is 
significantly better than that of the dynamic threshold. This is essentially due to the fuzzy mechanism's 
greater capacity to adapt to different working conditions as compared to the dynamic threshold mechanism. 
At this point, it is important to emphasise a crucial aspect affecting the practical use of a control 
mechanism. When the buffer size of the switch vary the traditional threshold mechanisms require tuning, 
whereby the best ct value to be used is determined on a case-by-case basis. As this tuning has to be 
done via simulation, it may well be excessively onerous. With the FT mechanism, on the other hand, as 
pointed out in Section 3, we have succeeded in rendering the fuzzy sets parametric according to buffer 
size, keeping the control rules unaltered. This gives our mechanism a flexibility and level of performance 
that are very close to those of the Push-Out mechanism. 5. CONCLUSIONS In this paper we have proposed 
a fuzzy system as a buffer management scheme in shared-memory ATM switches. It is an adaptive threshold 
scheme in which the threshold value is computed by a fuzzy system according to the overall occupation 
of the shared memory. The performance of the fuzzy mechanism has been evaluated and compared to that 
of an ideal mechanism, like Push-Out, and traditional threshold schemes, such as Fixed or Dynamic Threshold 
mechanisms. The results obtained show that the performance of our fuzzy scheme is very close to that 
of PO and is significantly better than that of the DT. This is essentially due to the fuzzy mechanism's 
greater capacity to adapt to different working conditions as compared with the dynamic threshold mechanism. 
With our fuzzy system, on the other hand, we have succeeded in rendering the fuzzy sets parametric according 
to buffer size, keeping the control rules unaltered. This gives our mechanism a flexibility and level 
of performance that are very close to those of the PO mechanism. Finally, the implementation issues addressed 
in this paper show that the Fuzzy Threshold scheme, unlike PO, can easily be realized in hardware, thus 
enhancing both cost and processing performance. 6. REFERENCES <RefA>[1] M. G. Hluchyj and M. J. Karol, "Queueing 
in high-performance packet switching", IEEE J. Selected Areas Commin., vol. 6, pp. 1587-1597, Dec. 1988. 
[2] T. Kozaki, Y. Sakurai, O. Matsubara, M. Mizukami, M. Uchida, Y Sato and K. Asano, "32x32 shared buffer 
type ATM switch VLSI's for B-ISDN", in Proc. IEEE ICC'91, Denver, June 1991, pp. 711-715. [3] S.X.Wei, 
E.J. Coyle, and M.-T. Hsiao, "An optimal buffer management policy for high-performance packet switching," 
Proc. Giobecom, Phoenix, AZ, Dec. 1991. [4] I. Cidon, L. Georgiadis, R. Guerin, and A. Khamisy, "Optimal 
buffer sharing", Proc. Infocom, Boston, MA, Apr. 1995. [5] A.K. Choudhury, and E. L. Hahne, " Dynamic 
queue length threshold for shared-memory packet switches", IEEE/ACM Transactions on Networking, Vol. 
6, n. 2, April 1998. [6] S. Sharma, Y. Viniotis, "Optimal buffer management policies for shared-buffer 
ATM Switches", IEEE/ACM Transactions on Networking, Voi. 7, n. 4, August 1999. [7] G. Ascia, V. Catania, 
S. Lombardo, D. Panno, " A buffer Management scheme for Shared-Memory ATM Switches", Proe. ofAI2000, 
Innsbruck, Feb. 2000, pp. 857-863. [8] V. Catania, G. Ficili, S. Palazzo, D. Panno: "A Comparative Analysis 
of Fuzzy versus Conventional Policing Mechanisms for ATM Networks", IEEE/ACM Transactions on Networking, 
Vol. 4, n. 3, June 1996. [9] R. G. Cheng and C. J. Chang, "Design of a Fuzzy Traffic Controller for 
ATM Network", IEEE/ACM Transactions on Networking, Vol. 4, n. 3, June 1996. [10]C.Douligeris, G. Develekos, 
"Neuro-Fuzzy Control in ATM Networks", IEEE Communications Magazine, May 1997. [11 ]N. Pedrycz, A. Vasilakos, 
"Computational Intelligence in Telecommunications Networks" Catalog no. 1075, ISBN: 0- 8493-1075-x CRC-Press/September 
200. [12]A.Pitsillides, Y. A. Sekercioglu, and G. Romamurthly, "Effective Control of Traffic flow in 
ATM networks using Fuzzy Exolicit Rate Marking (FERM)", IEEE Journal on Selected Areas in Comm., vol. 
15, n.2, Feb. 1997. [13]M.Figueiredo,F.Gomide,A.Rocha &#38; R.Yager, "Comparison of Yager's Level Set 
Method for Fuzzy Logic Control with Mandami's and Larsen's Methods", IEEE Trans. on Fuzzy Systems, vol. 
1, no.2, pp 156-159, May 1993.  </RefA>
			
