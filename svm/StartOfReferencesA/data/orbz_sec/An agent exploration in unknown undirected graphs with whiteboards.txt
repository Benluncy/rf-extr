
 An Agent Exploration in Unknown Undirected Graphs with Yuichi Sudo Graduate School of Information Science 
and Technology, Osaka University y-sudou@ist.osaka­u.ac.jp Fukuhito Ooshita Graduate School of Information 
Science and Technology, Osaka University f-oosita@ist.osaka­u.ac.jp  Whiteboards Daisuke Baba Graduate 
School of Information Science and Technology, Osaka University d-baba@ist.osaka­u.ac.jp Hirotsugu Kakugawa 
Graduate School of Information Science and Technology, Osaka University kakugawa@ist.osaka­u.ac.jp Junya 
Nakamura Graduate School of Information Science and Technology, Osaka University junya-n@ist.osaka­u.ac.jp 
Toshimitsu Masuzawa Graduate School of Information Science and Technology, Osaka University masuzawa@ist.osaka­u.ac.jp 
 ABSTRACT We consider the exploration problem with a single agent in undirected graphs. Starting from 
an arbitrary node, the agent has to explore all the nodes and edges in the graph and return to the starting 
node. Our goal is to minimize both the number of agent moves and the memory space of the agent, which 
dominate the amount of communication during the exploration. In our setting, the agent is allowed tousethelocal 
memory called thewhiteboard oneach node (the whiteboardmodel), while most of existing exploration algorithms 
do not use the whiteboard (the no-whiteboard model). In the no-whiteboard model, the agent must mem­orize 
in its memory all information needed to explore the graph, and thus designing an exploration algorithm 
of small agent memory is di.cult. In this paper, by allowing the agent to use whiteboards, we present 
four exploration algo­rithms such that both the number of agent moves and the agent memory space are 
small.  Keywords graph exploration, mobile agent, whiteboard 1. INTRODUCTION We consider the exploration 
problem with a single agent in undirected graphs. The agent has to explore all the nodes and edgesinthegraph 
and returntoitsstarting node. No a prioriknowledge aboutthegraph(e.g. the numberof nodes andtopology)isgiven 
to the agent. Graphexplorationis one of the most fundamental and important problems in agent Permission 
to make digital or hard copies of all or part of this work for personal or classroom use is granted without 
fee provided that copies are not madeordistributedforpro.t or commercial advantage and that copies bearthisnoticeand 
thefull citation onthe .rstpage.Tocopy otherwise,to republish, topost on servers or to redistribute tolists, 
requiresprior speci.c permissionand/or afee. WRAS 10Zurich,Switzerland Copyright20XXACMX-XXXXX-XX-X/XX/XX 
...$10.00. systems. For example, in a computer network, the agent can search data at unknown computer 
nodes by visiting all the nodes, or can .nd broken communication channels by traversing all the channels. 
Ourgoalis todesign an exploration algorithm witha small number of moves and a small memory size of an 
agent. We achieve this goal by adopting the whiteboard model. In the whiteboard model,every nodeisequipped 
with alocal mem­ory called the whiteboard, and the agent can freely read and write the content of the 
whiteboard while it stays at the node. On the contrary, the no-whiteboard model does not assume the existence 
of whiteboards. In the no-whiteboard model, the agent must memorize in its memory all informa­tion needed 
to explore the whole graph, and thus designing an exploration algorithm of small agent memory is di.cult. 
On the other hand, in the whiteboard model, the informa­tion can be stored distributedly on nodes of 
the graph, and thus there is a possibility to explore the whole graph with small memory of the agent. 
In this paper, we present four exploration algorithms in the whiteboard model. By us­ing whiteboards, 
these algorithms reduce the agent memory space of two existing algorithms which guarantee a small number 
of moves but require a relatively large agent mem­ory space. Thus, our proposed algorithms realize both 
a small number of moves and a small memory of the agent. Related Works. Graph explorationhasbeen widely 
studiedintheliterature. The study of graph exploration can be loosely classi.ed by the anonymity and 
the topology of the graph. If all the nodes in a graph have unique identi.ers, the graph is called labeled. 
On the contrary, if any node has no identi.er, the graph is called anonymous. When the graph is labeled, 
the exploration problem can be easily solved. For example, the agent explores all nodes and edgesinthegraph 
with2m moves by the simple depth­.rst search (We denote the number of edges in the graph by m. In what 
follows, we denote the depth-.rst search by DFS).Panaite andPelc[10] improve DFS and proposed faster 
algorithm, with which the agent explores an arbitrary undirectedgraph within m+3n moves(Wedenote the 
num­ber of nodes in the graph by n. In what follows, we denote this algorithm by PP). When the agent 
moves through al­ready traversed edge,the moveissaid tobea penalty move. AlgorithmPP achieves O(n)penaltymoves,whichisasymp­totically 
optimal: Consider the case that the agent begins the exploration at the center node of a line graph. 
The ex­ploration oflabeleddirectedgraphsis studiedin[1,5,7]. Exploring an anonymous graph is more demanding 
task. Budach[3] proves that the agent cannot explore an arbi­trary anonymousgraph withouttheability to 
mark nodesin some way. Therefore, anonymousgraph explorationis stud­ied with assuming that the agent 
can mark nodes in some way[2, 4, 8] or with restricting the topology of the graph[6, 9]. In the model 
where the agent can put and retrieve a .nite number of pebbles on nodes, Bender et al.[2] analyze a necessary 
and su.cient number ofpebbles to explore any ar­bitrary directed graph with a polynomial number of moves. 
Fraigniaud et al.[8] proposed an algorithm with a constant­size agent memory which explores any arbitrary 
directed graphs in the whiteboard model. Their interest is to mini­mize the size of agent and whiteboard 
memory, and they do not care the number of agent moves (although their algo­rithmterminatesinpolynomial 
time). Daset al.[4] consider the exploration by k agents in the whiteboard model. They propose an exploration 
algorithm that costs only O(m logk) agent moves. Here the agents have to accomplish not only graph exploration 
but also constructing the same maps of the graph. Hence, the size of agent memory is not the au­thors 
concern. Our Contribution. In this paper, we present four algorithms WDFS1, WDFS2, WPP1 and WPP2 in whiteboard 
model. Algorithms WDFS1 and WDFS2 are designed based on DFS, and algorithms WPP1 and WPP2 are designed 
based on PP [10]. Generally, it is not an easy task to simulate an algo­rithm designed in no-whiteboard 
model with an algorithm of smaller agent memory in whiteboard model. Let A be an algorithm that is designed 
in no-whiteboard model and re­quires large agent memory. In the execution of A, the agent can rememberglobalinformationaboutthegraphinitssuf­.ciently 
large memory. Hence, at any node, the agent can determine the next move depending on the global informa­tion. 
On the other hand, in the execution of the simulating algorithm, the agent cannot remember such global 
informa­tion in its memory due to the lack of space. Hence, at node v, the agent has to determine the 
next move depending on only local information stored on v s whiteboard. The performances of these algorithms 
are summarized in Table1. The two existingalgorithmsguarantee a small num­ber of moves without using 
whiteboards but require rela­tively large spaces of the agent memory. In algorithm DFS, the agent use 
T(m + n logn)bits of its memory to remem­ber allthe already visited nodes and allthe alreadytraversed 
edges. In algorithm PP, the agent use T(MAP) bits of its memory to remember the map of the explored parts 
of the graph, where MAP = min(m logn,n 2). Our proposed al­gorithms reduce these relatively large spaces 
of the agent memory by utilizing whiteboards. Algorithms WDFS1 and WDFS2 simulate DFS with no agent memory, 
and algorithms WPP1 and WPP2 simulate PP withT(n)andT(nlogn)bits of agent memory respectively. The algorithms 
other than Table 1: Performances of algorithms. (d(v) is the degree of node v. MAP = min(m logn,n 2).) 
#moves agent memory memory of node v DFS 2m T(m + n logn)­PP[10] m +3n T(MAP) - WDFS1 2m 0 T(d(v)) 
WDFS2 4m 0 T(logd(v)) WPP1 m + 3n T(n) T(n) WPP2 m + 3n T(nlogn) T(d(v)+ logn) WDFS2 keep the same number 
of moves as the original ex­isting algorithms while the number of moves of WDFS2 is at most twice as 
those of DFS.Algorithms WDFS1 and WDFS2 have a trade-o. relation, and so do WPP1 and WPP2. Algo­rithm 
WDFS2 has a smaller whiteboard memory but costs a larger number of moves compared to WDFS1. Algorithm 
WPP2 has a smaller whiteboard memory but requires a larger agent memory compared to WDFS1. All our algorithms 
do not require labels of nodes while the two existing algorithms require them. In DFS1 and DFS2, the 
agent do not use the labels, and in PP1 and PP2, the agent can easily assigns unique labels to all nodes 
using O(logn)space ofboth theagent and thewhiteboard of each node. However, for simplicity, the existence 
of label on each node is assumed as the model. (we shall see in the next section.) 2. PRELIMINARIES 
The environment is represented by a simple undirected con­nectedgraph G =(V,E,p)where V is the setof 
nodes and E isthesetof edges. Wedenote|V|and |E|byn and m respec­tively. The set N(v) of neighboring 
nodes of v and the set I(v)of edgesincident to v isde.nedby{u . V |{v,u}.E} and {{v,u}. E | u . V} respectively. 
We denote |I(v)|, the degree of v, by d(v). A port labeling p is a collection of functions(pv)v.V where 
each pv : I(v).{1,2,...,d(v)} uniquely assigns port number to every edge incident to node v. The agent 
needs these port numbers to distinguish edges in I(v) when located at v. The port labeling p is locally 
independent: two port numbers pu(e)and pv(e)may di.er for edge e = {u,v}. E. The node u neighboring to 
node v such that pv{v,u}= q is called the qth neighbor of v and is denoted by N(v)[q]. All nodes v . 
V have the unique identi.ers id(v). N. The size of theidenti.erspaceispoly­nomial, that is, maxv.V id(v). 
O(n c)is assumed for some constant c. An agent A=(P,M)consists of a constant-sizeprogram (algorithm)P 
and a .nite memory M. The agent exists on exactly one node v . V at any time, and moves through an edge 
incident to v. Program P has complete control over the move of the agent. The current node that the agent 
currently exists on is denoted by vcur. The previous node that the agent existed before moving to vcur 
is denoted by vpre. Port pin is de.ned as pvcur ({vpre,vcur}), via which the agent comes to vcur. For 
simplicity, we suppose vpre = null and pin = 0 at the beginning of exploration. Every node v . V has 
awhiteboard w(v), whichthe agentcan accessfreely at the visit of v. The content of M and w(v)are bit 
sequences. Initially, M = e and w(v)= e hold for any v . V where e represents the null string. Program 
P is invoked every time the agent .nishes its move or when the exploration begins. Ittakes5-tuple(d(vcur),pin,M,w(vcur),id(vcur))as 
theinput, and returns3-tuple(pout,M ' ,w ' )as the output. Here pout is a port number of v, and both 
M ' and w ' are arbitrary bit sequences. Obtaining the output from P, the agent performs two substitutions 
M := M ' and w(vcur):= w ' , and then, moves to the next node through port pout. The agent terminates 
when pout =0. Exploration Problem. The starting node, denoted by vst, is the node on which the agent 
exists atthebeginning of exploration. Thegoal of the agent is to traverse all edges1 in the graph and 
return to the starting node. More precisely, we say that algorithm P solves the exploration problem if 
the following conditions hold regardless of graph G and starting node vst: (i) agent A =(P,M) eventually 
terminates, (ii) the agent traverses every edge atleast once untilitterminates, and(iii) vcur = vst holds 
when the agent terminates. We measure the e.ciency of program (algorithm) P by three metrics: the number 
of moves, the (agent) memory space, and the whiteboard memory space. The .rst one is de.ned as the number 
of the moves that the agent made during the exploration. The memory space of the agent and the whiteboard 
on node v are de.ned as the maximum numbers of bits, during the exploration, of M and w(v) respectively. 
All theabove metricsisevaluatedintheworst­case manner with respect to G and v. Inwhatfollows, anode(oredge) 
iscalled explored when the node (edge) is already visited (traversed) at the time. Otherwise,the node(edge) 
is called unexplored. A node v is saturated if all edges in I(v)are explored.  3. ALGORITHMS BASED ON 
DFS In this section, we present algorithms WDFS1 and WDFS2, both of which are based on algorithm DFS. 
The original DFS, illustrated in Algorithm 1, is simple. Here, we call a move invoked by Line 7 a forward 
move and call a move invoked by another line a backward move (or backtracking). The agent keeps on making 
a forward move to a new node as long as an unexplored edge exists in I(vcur)(Line7). However,if thenewnodeisalready 
visited, the agentbacktrackstothelast visited node(Line4), and resumes moving forward. If the new node 
is not visited be­fore, the agent remembersport pin in a variable port(v) return ofagent memory(Line2),andcontinuesto 
moveforward. The agentbacktracks throughport port(vcur)when the return agent cannot .nd any unexplored 
edge in I(vcur)(Line 9). Eventually, vst is saturated and then the agent terminates the exploration. 
The number of agent moves is exactly 2m since the agent makes exactly one forward move and exactly one 
backward move over every edge in the graph. WDFS1. In WDFS1, the agent completely simulates the move 
of DFS with no memory space of agent by using T(d(v)) space of w(v). To this end, it is su.cient for 
the agent to get the following information locally at node v: (i) whether v is vis­ 1Then, it is guaranteed 
that all nodes are also visited. Algorithm 1 DFS Variable in Agent port(v).{1,2,...,d(v)} return Program 
1: if vcur is not visited before then 2: port(vcur):= pin //pin =0 when vcur = vst return 3: else if 
the last move is performed in Line 7 then 4: Move through pin //Backtrack to vpre 5: end if 6: if unexplored 
edge e . I(vcur)exists then 7: Move through edge e 8: else 9: Move through port port(vcur) return // 
Whenvcur = vst, the agent stops since port(vcur)must be 0 return 10: end if ited or not,(ii) whether 
every e . I(v)is visitedor not,(iii) the value of port(v)and(iv) whetherthelast moveis return forward 
or not. The agent can easily records on w(v) the information of (i), (ii) and (iii) with O(d(v)) space. 
Fur­thermore, the agent can evaluate the condition of(iv) with only local information: the last move 
is forward if and only -1 if edge pv (pin)(={vpre,vcur}) was unexploredjustbefore the last move. WDFS2. 
InWDFS2, only O(logd(v))spaceis available on whiteboard w(v). With O(logd(v))space,theagent canstill 
storeinfor­mation(i) and(iii) on w(v)but cannot record information (ii). To explore all edges in I(v) 
without knowing which edges in I(vcur) are explored, the agent maintains a white­board variable port(v), 
which memorizes the most re­ recent cently used port to move forward from v. By using vari­able port(v),theagentmovesforward 
through all edges recent e . I(v)other than {p -1(port(v))}in ascending order v return of port numbers 
pv(e). Variable port(v) are also used recent toevaluatecondition(iv):thelast moveisforwardifand only 
if pin .portholds or v is not visited before. =(vcur) recent In DFS (andWDFS1),theagentperformsaforwardmove 
only through an unexplored edge. On the other hand, in WDFS2, the agent may move forward through an explored 
edge. Letting pw({v,w}) = 5, consider the situation that the agent makes a forward move from node v to 
w when port(w)=3. Atthistime,theagent cannot record that recent edge {v,w}(port 5) is already explored, 
and consequently, the agent will eventually make a forward move from w to v. Thus, the agent makes an 
additional move in WDFS2. However, the number of agent moves is bounded above by 4m (The proof is omitted 
due to the lackof space). 4. ALGORITHMS BASED ON PP In this section, wepresentalgorithms WPP1 and WPP2 
both of which are based on algorithm PP developed by Panaite andPelc[10]. Firstof all,weintroducetheoriginal 
algorithm PP. 4.1 Algorithm PP [10] The algorithm PP solves the exploration problem in any undirected 
graph with no whiteboard and O(MAP) agent memory (MAP = min(m logn,n 2)). During the execution Algorithm 
2 PP Main Routine: 1: Saturate(vcur) //Saturate the start node vst 2: while true do 3: if .u . N(vcur), 
u/. Vs then 4: Move through edge {vcur,u} //Move to u 5: portparent (vcur):= pvcur ({vpre,vcur}) 6: Saturate(vcur) 
//Incorporate vcur = u into S 7: else if vcur .= vst then 8: Move through port port(v) parent 9: else 
10: STOP() //At this time, S is a spanning tree 11: end if 12: end while Saturate(r): 13: while not (vcur 
= r and vcur is saturated) do 14: if non-visited edge e . I(vcur)exists then 15: GetForward(e) 16: else 
17: GoBack() 18: end if 19: end while {The conditions in Lines 3, 13 and 14 are evaluated with map H.} 
of PP, the agent memorizes the map H =(VH,EH)ofgraph G. The map H consists of explored nodes and edges, 
that is, VH = {v . V | v is explored} and EH = {e . E | e is explored}. The agent can easily construct 
the map H thankstoidenti.ersof nodes. Weomitthe mapconstruction part of algorithm PP from thepseudo code(Algorithm2). 
The algorithm PP, illustrated in Algorithm 2, tries to sat­urate all the nodes in V. Obviously, all edges 
are explored if all the nodes are saturated. To saturate a node r, PP uses subroutine Saturate(r). This 
subroutine guarantees that, when the execution .nishes, node r is saturated and the agent exists on r 
again. During exploration, the agent con­structs and keeps the saturated tree S =(VS,ES), consists of 
all the nodes v where the agent .nishes Saturate(v). The saturated tree S is maintained by variable port(v) 
of parent the agent, which stores a port number that points to v s parent in S. That is, saturated tree 
S is de.ned as fol­lows: VS = {v . V | Saturate(v).nished already} and -1 ES = {pv (port(v)) | v . VS}. 
When all the nodes parent are included in S, the exploration .nishes. Allinstructionsof the mainroutineiswellde.ned:Inline 
3, since node vcur has been already saturated, the agent eas­ily evaluates the condition .u . N(vcur), 
u/. Vs using the map H. The agentdoes notbacktrack(Line8) unless all neighboring nodes belong to S. Consequently, 
S is a span­ning tree when the agent stops at node vst. This means that all nodes are saturated. Hence, 
PP solves the exploration problem correctly. Let us observe how Saturate(r)saturates node r. During the 
execution ofSaturate(r), the agentkeeps thereturn path RP =(v0,e1,v1,e2,...,ek,vk),v0 = r, vk = vcur 
in its memory M. The initial value of RP is(r). All the moves are performed by invoking two subroutines, 
GetForward(e) and GoBack(). When GetForward(e) is invoked, the agent moves through edge e, and then adds 
(e,vcur) to the tail of RP. If this addition makes a cycle in RP, the agent deletes the cycle. More precisely, 
if vcur = vi holds for some i, 0 = i = k,thenthe agent assigns(v0,e1,v1,e2,...,ei,vi) to RP. When GoBack() 
is invoked, the agent retrieves the lasttwo elements(ek,vk)from RP and moves through edge ek. The agent 
keeps on traversing an unexplored edge e by invoking GetForward(e) as long as unexplored edges exist 
in I(vcur) (Line 15). The agent backtracks along RP by invokingGoBack()when no unexplored edge existsin 
I(vcur) (Line 17). By de.nition, it is guaranteed that r is saturated when Saturate(r).nishes. Note that, 
during the execution of Saturate(r), another nodev may be saturated. However, v is not included in saturated 
tree S at that time. Such v is included in S when Saturate(v)is executed. We consider the number of 
moves required for exploration by PP.Note that the agentinvokesGoBack() only when vcur is saturated. 
Considerthe casethatthe agenthasjustper­formed GoBack() and backtracked from a node v. Then, v is saturated, 
and RP does not include v. Hence, after that, the agent never visits v during the execution of any Saturate(u)for 
any node u . V. This means that the num­berofinvokingGoBack()isatmost n in all the executions of Saturate(). 
Clearly, the number of invoking GetForward() is at most m. (Every invocation consumes one unexplored 
edge). Hence, the number of moves performed during the execution of Saturate() is at most m + n. And, 
the num­berof movesduring theexecutionof main-routineisexactly 2(n -1)(This routine makes depth-.rst 
search on the satu­rated tree S). Summing up these upper bounds, we see that the number of moves of PP 
is at most m +3n. Theorem 1 (Panaite and Pelc[10]). Without whiteboards, an agent A =(PP,M) completes 
ex­ploration for any undirected graph G =(V,E)and any start­ing node v . V with at most m +3n moves. 
 4.2 Algorithms WPP1 and WPP2 In this section, we present our two algorithms, WPP1 and WPP2. Using whiteboard, 
these two algorithms simulate the move of PP with less (agent) memory space. Algo­rithm WPP1 uses O(n)memory 
space on the agent and every whiteboard while algorithm WPP2 uses O(n logn)memory space on the agent 
and O(d(v)+logn)space on every white­board w(v). In both the two algorithms, we assume that all id(v)sat­is.es 
1 = id(v)= n. This assumption does not matter since theagent can easily reassignsthelabels1,...,n to 
all nodes by using O(logn) space of both the agent and each white­board w(v). In addition, O(d(v)) space 
of w(v) also makes it possible that the agent records on w(v)whether v has al­ready been visited and 
whether e has already been explored or not for every e . I(v). Hence, we also assume that, at any time, 
the agent knows whether it already visited vcur before or not and which edges in I(vcur)are explored. 
In the rest of this section, we illustrate how WPP1 and WPP2 simulate the subroutine Saturate(r) (Section 
4.2.1) and the main routine of PP (Section 4.2.2). 4.2.1 Saturate(v) with Whiteboards The Di.culty of 
simulating Saturate(r)exists only in main­taining the returnpath RP in the subroutinesGetForward() and 
GoBack(). Remind that the return path RP is the path from r to vcur, where r is the node that has invoked 
Saturate(r). Other instructions can be easily performed: The agent can easily evaluate the condition 
vcur = r (Line 13) bymarking the node r initially, and the other conditions are also easy to evaluate. 
Clearly, the simulation succeeds if the agent maintains the return path correctly. Procedure in WPP2. 
As for WPP2, the solution is easy. In WPP2, the agent can memorize the entire return path in its memory 
M. The agent remembers the return path RP =(v0,e1,...,ek,vk) as a sequence of pairs of a node label and 
a port number RP2 =(id(v0),q1,...,qk,id(vk)). Here, qi = pvi (ei) holds for every i, 1 = i = k. Since 
the length of the return path is at most n - 1, available agent memory space O(n logn) is su.cient to 
keep RP2. Since the agent have RP2 in its memory, the agent can maintain RP2 in exactly the same way 
as the agent obeying PP maintains RP. Lemma 1. The subroutine Saturate(r) of WPP2 simu­lates Saturate(r) 
of PP. It uses O(n logn) memory space of the agent and O(logn + d(v))memory space of w(v). Procedure 
in WPP1. In the rest of this section, we describe how WPP1 main­tains the return path. Due to the lack 
of memory space, the agent cannot memorize the entire return path RP = (v0,e1,v1,...,ek,vk) in its memory 
M. However, WPP1 maintains RP by storing it separately on the agent memory and the whiteboards of all 
the nodes in RP. The agent only remembers the set of identi.ers {id(vj) | 0 = j = k} on the variable 
RP1 instead of the sequence of the identi.ers. Each whiteboard w(vi)contains the port number pvi (ei)in 
the variables port(vi). The set RP1 is used to detect a return cycle in RP in GetForward(e), and port(v) 
is used to return come back along RP in GoBack(). In addition, the set of identi.ers {id(vj) |0 = j = 
i} is stored in the whiteboard variable hist(vi) of node vi. This variable is used to delete a cycle 
when the agent detects the cycle in RP. Thepseudo codes of GetForward(e) and GoBack() are given in Algo­rithm 
3. When GetForward(e) is invoked, the agent moves through edge e, and then checks whether this move makes 
a cycleonthe returnpath. Thischeckiseasilydone: acycleis created if and only if thedetecting condition 
id(vcur). RP1 holds. If the condition does not hold, the agent extends the return path by updating RP1 
and port(vcur)(Lines 5 return and 6). At the same time, the agent stores the copy of RP1 in hist(vcur). 
If the detecting condition holds, the agent assigns hist(vcur) to RP1 (Line 7). Then, the return path 
RP equals to the path that RP1 and port(vi)together return represent. When GoBack() is invoked, the agent 
removes node vcur (= vk) from RP1, and then moves through port port(vcur)(=pvk (ek)). return We have 
the following lemma. Note that the variables RP1 and hist(v)can be implemented as n-bit array. Lemma 
2. The subroutine Saturate(r) of WPP1 simu­lates Saturate(r) of PP. It uses O(n) memory space of the 
agent and O(n) memory space of w(v).  4.2.2 Main Routine with Whiteboards Both algorithms WPP1 and WPP2 
simulate the main rou­tine in the same way. In this section, we call them WPP collectively. Algorithm 
3 GetForward(e)and GoBack() of WPP1 Variable in Agent 2{1,2,...,n} RP1 . : Initially RP1 = {id(r)} Variables 
in v s Whiteboard port(v).{1,2,...,d(v)} return hist(v). 2{1,2,...,n} : Initially hist(r)= {id(r)} GetForward(e) 
1: Move through edge e 2: if id(vcur). RP1 then 3: RP1 := hist(vcur) //Delete a detected cycle 4: else 
5: RP1 := RP1 .{id(vcur)} //Extend the return path 6: port(vcur):= pin return 7: hist(vcur):= RP1 //Store 
the current RP1 on w(v) 8: end if GoBack() 9: RP1 := RP1 \{vcur} 10: Move through port(vcur) return 
The goal of the main routine is to incorporate all the nodes into the saturated tree S with 2n agent 
moves. The original PP achieves this goal in a simple way: If node u . N(vcur)\ VS exists then node u 
and edge {vcur,u} is selected to be incorporated into S (Lines 3-6); Otherwise, the agent backtracks 
to the parent node of vcur in S (Line 8). However, in the execution of WPP, the agent cannot evaluate 
the condition u/. VS for any u . N(vcur)because the agent cannot have any map of G. Therefore, another 
mechanism is needed to incorporate all the nodes into S with 2n agent moves. Oursolutionisasfollows. 
DuringtheexecutionofSaturate(), the agent constructs a directed spanning tree D and stores its edges 
on whiteboards. In the execution of the main rou­tine, the agentincorporates all the nodesinto S with2(n-1) 
movesbyperformingdepth-.rst traversal over spanningtree D. Directed tree D =(VD,ED)is constructed in 
the follow­ing way: (i) Initially, VD = {vst}and ED = Ø, and(ii) Ev­ery time the agent visits unexplored 
node v, node vcur (=v) and directed edge (vcur,vpre) is added to VD and ED re­spectively. We say that 
node u is a child of node v if edge (u,v) exists in ED, and de.ne the children port set of v as CD(v)= 
{p |(N(v)[p],v). ED}. In WPP, the agent keeps CD(v) in a variable chi(v) of whiteboard w(v), and selects 
from chi(vcur) a port to move through in Lines 3 and 4. More precisely, WPP alters Lines 3 and 4 in Algorithm 
2 as follows. 3 : if .q . (chi(vcur)\portused (vcur))then 4-1: portused (vcur):= portused (vcur).{q} 
4-2: Move through port q  Here, portused (v)is a variable on w(v), whichrepresents the set of ports 
that are already used in the depth-.rst traver­sal over D. Initially portused (v)= Ø for all v . V. All 
theotherinstructions(Lines1-2 and5-12) remainthesame as the main routine of original PP. Note that the 
variable port(v)used in Lines 5 and 8 occupies only O(logd(v)) parent space on each whiteboard w(v). 
The agent does not remem­ber D itself, but performs depth-.rst traversal over D with whiteboard variables 
chi(v)and portused (v). Algorithm 4 ConstructTree Variables in Agent .ag : {1,...,n}.{0,1}: Initially, 
.v . V, .ag(v)=0 labelpre .{1,...,n} Variables in v s Whiteboard port(v).{1,2,...,d(v)} recent chi(v). 
2{1,2,...,d(v)} : Initially, .v . V, chi(v)= Ø Before leaving via pout 1: port(vcur):= pout recent 2: 
labelpre := id(vcur) After Arriving at vcur 3: if vcur is not already visited before then 4: .ag(labelpre 
):= 1 5: end if 6: if .ag(id(vcur))=1 then 7: chi(vcur):= chi(vcur).{port(vcur)} recent 8: .ag(id(vcur)):= 
0 9: end if To maintain the variable chi(v), algorithmWPP executes asubroutineConstructTree(),inparallel 
with the mainrou­tine and Saturate(). The pseudo code of ConstructTree is illustratedinAlgorithm4. This 
subroutineisinvokedjust before and just after every move of the agent. And, this subroutine does not 
trigger any move of the agent directly. The idea of ConstructTree is simple. Consider the case thattheagenthasjust 
movedtonode v from node u, and v is unexplored before the move. Then, by raising a .ag on u (agent variable 
.ag(u)), the agent remembers thatu has a new child(Line4). Whenthe agent visits u again after that, the 
agent knows from the .ag that the current node has a new child, and then adds pu({u,v}) to chi(u) (Line 
7). To realize this addition, the agent stores port number pu({u,v}) on whiteboard w(u) every time before 
it moves from u to v (Line 1). By de.nition, the following lemma trivially holds. Lemma 3. When the agent 
exists on node v, chi(v)equals to CD(v). That is, chi(vcur)= CD(vcur)holds at any time. We denote D at 
the end of the exploration by D.nal = ). Note that Line 3 is reached only after (VDfinal ,EDfinal Saturate(vcur).nished. 
Clearly, CD(vcur)= is CDfinal (vcur)guaranteed after Saturate(vcur) has .nished. Therefore, by Lemma 
3, chi(vcur) = holds when Line 3 is CDfinal (vcur) reached. Consequently, the agent performs the depth-.rst 
traversal over D.nal during the main routine in WPP, which leads to the following lemma. Lemma 4. S = 
D.nal holds when the agent terminates. Lemma 5. D.nal is a spanning tree. (i.e. = V). VDfinal Proof . 
Assume that D.nal is not a spanning tree. Then, two nodes u,v . V must exist such that u/, v . . VDfinal 
, and u . N(v) holds. However, by Lemma 4, edge VDfinal {u,v} is explored because v . VDfinal = VS holds. 
This means that node u is also explored, and thus u . VDfinal . This leads to a contradiction. By Lemmas 
4 and 5, S is a spanning tree at the end of the exploration. This means that the agent explores all the 
edges in G. In the main routine, the agent performs depth-.rst search over the spanning tree D.nal. Hence, 
the number of moves during the execution of the main routine is exactly 2(n-1). And,by Lemmas1 and2,thenumberof 
moves during the execution of Saturate() is at most m + n. Consequently, the following two theorems hold. 
 Theorem 2. WPP1 solves the explorationproblemfor any undirected graph. The number of moves, the agent 
memory space, and the whiteboard memory space of node v is m+3n, O(n), and O(n) respectively. Theorem 
3. WPP2 solves the explorationproblemfor any undirected graph. The number of moves, the agent memory 
space, and the whiteboard memory space of node v is m+3n, O(n logn), and O(d(v)+logn) respectively. 
 5. CONCLUSION In this paper, we proposed four exploration algorithms. By using whiteboards, they solve 
the exploration problem for any undirected graphs with a small number of moves and a small agent memory. 
 6. ACKNOWLEDGEMENTS This work is supported in part by Grant-in-Aid for Scien­ti.cResearch((B)20300012,(B)22300009) 
ofJSPS. 7. REFERENCES <RefA>[1] S. Albers and M.R. Henzinger. Exploring unknown environments. In Proceedings 
of the twenty-ninth annual ACM symposium on Theory of computing, pages 416 425. ACM New York, NY, USA, 
1997. [2] M.A. Bender, A. Fern´andez, D. Ron, A. Sahai, and S. Vadhan. The power of a pebble: Exploring 
and mapping directed graphs. Information and Computation, 176(1):1 21, 2002. [3] L. Budach. Automata 
and labyrinths. Math. Nachrichten, 86:195 282, 1978. [4] S. Das, P. Flocchini, S. Kutten, A. Nayak, 
and N. Santoro. Map construction of unknown graphs by multiple agents. Theoretical Computer Science, 
385(1-3):34 48, 2007. [5] X. Deng and C.H. Papadimitriou. Exploring an unknown graph. Journal of Graph 
Theory, 32(3):265 297, 1999. [6] K. Diks, P. Fraigniaud, E. Kranakis, and A. Pelc. Tree exploration 
with little memory. Journal of Algorithms, 51(1):38 63, 2004. [7] R. Fleischer and G. Trippen. Exploring 
an unknown graph e.ciently. Lecture Notes in Computer Science, 3669:11 22, 2005. [8] P. Fraigniaud and 
D. Ilcinkas. Digraphs exploration with little memory. Lecture notes in computer science, pages 246 257, 
2004. [9] L. Gasieniec, A. Pelc, T. Radzik, and X. Zhang. Tree exploration with logarithmic memory. In 
Proceedings of the eighteenth annual ACM-SIAM symposium on Discrete algorithms, page 594. Society for 
Industrial and Applied Mathematics, 2007. [10] P. Panaite and A. Pelc. Exploring unknown undirected graphs. 
Journal of Algorithms, 33(2):281 295, 1999.  </RefA>
			
