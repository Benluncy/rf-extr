
 AN AGENT-BASED FLEXIBLE ROUTING MANUFACTURING CONTROL SIMULATION SYSTEM Grace Y. Lin IBM T.J. Watson 
Research Center P.O. BOX 218 Yorktown Heights, NY 10598, U.S.A. ABSTRACT In this paper, we present a 
manufacturing simula­tion system based on autonomous agents and a dy­namic price mechanism that explores 
routing flex­ibility and provides a programming language for modeling manufacturing environments, based 
on au­tonomous agents and a dynamic price mechanism. The simulation system contains a control simulation 
module and a manufacturing environment simulation module. The control simulation module consists of a 
collection of autonomous agents who negotiate with each other to reach job processing decisions based 
on negotiation protocols and built-in price adjust­ment algorithms. The manufacturing environment simulation 
module is an event-based simulation sys­tem that couples with an input simulation language called Flexible 
Routing Adaptive Control Simulation Language. The language can be used to model com­plicated manufacturing 
environments and to specify flexibility in part process plans. By integrating the control framework with 
the FRACS simulation sys­tem, a sophisticated test bed is created for research of different cent rol 
and negot i at ion st rat egies. The simulation system allows quick turn around time for software protot 
yping, and the modeling language en­ables easy model adjustment and performance tun­ing. Many experiments 
in the control and scheduling of manufacturing systems have been conducted using this simulation system. 
Several of these experiments are discussed in this paper. Key Words: Manufactzwing Control, Scheduling, 
Simulation, Flexible Routing. INTRODUCTION Modern manufacturing environment is complex and uncertain. 
In order to stay competitive in the mar­ket place, the decision-making tools need to have the ability 
to adapt to the changing environment and to James J. Solberg School of Industrial Engineering, Purdue 
University West Lafayette, IN 47905, U.S.A. handle the system complexity. The ability to make use of 
the system flexibility and to retain flexibility itself is a primary requirement for the decision tools 
to be effective. To meet this requirement, we pro­posed an agent-based real time adaptive control and 
scheduling framework [Lin and Solberg, 1992]. Under the framework, both decision making and information 
flow are distributed so that it is flexible and can adapt quickly to the changes. All possible sequencing 
and processing of a job are considered in real time during the decision making process to make use of 
the system routing flexibility and to improve system throughput. The global and local system states are 
captured using a price mechanism. The price mechanism is used as an invisible hand to guide the negotiation 
and ensure harmonious system operation. Due to the complexity of the manufacturing en­vironment, it is 
very expensive and time consuming to setup a manufacturing floor to do experimental testing and comparison 
of different control strate­gies, negotiation protocols, or factory setups. On the other hand, software 
prototyping by simulation offer a quick, controllable, tunable environment for per­formance the above 
tasks before applying the con­trol system to real manufacturing environments. The software prototyping 
system must offers a good mod­eling tool for modeling the manufacturing environ­ments. Important system 
entities need to be included in the model so that the modeling is realistic. It also needs to provide 
flexible interface so that chang­ ing control strategies, negotiation protocols, and fac­tory setup can 
be accomplished easily. Furthermore, our framework requires that unexpected events, such as machine breakdowns, 
order changes, supply prob­lems, and objective changes, be modeled in the simu­ lation. None of the existing 
simulation systems as we noted provide these functionalities. In this paper, we will present an integrated 
shop floor control and sim­ulation system that models the proposed framework. The simulation system supports 
the modeling of sys­tem resources such as machines, automatic guided ve­ 970 Control Simulation hicles 
(AGVS), tools, buffers, etc., and part process plans that contain alternative processing sequences or 
operations. The system resources and parts can be controlled by simple dispatching rules or autonomous 
agents that employ sophisticated control protocols. The system supports an extensive set of debugging 
and trace facilities and visualization tools for ana­lyzing experimental results. The system is carefully 
designed so that by decoupling the control and sched­uling system from the simulation module and linking 
the former to the real time control and monitoring in­terface of a manufacturing environment, a real 
time manufacturing control system can be created. This is accomplished by separating the simulation system 
into two modules, a control simulation module and a manufacturing environment simulation module, and 
integrating the two simulation modules with three in­terface modules: the control interface, the monitoring 
interface, and the communicant ion interface. By using the built-in negotiation protocols, we were able 
to implement new negotiation algorithms in days rather than months. Our experiences in applying the simulation 
system show that software prototyping can shorten development cycles and provide quick turn around time 
for system design and changes. The rest of this paper is organized as follows: in Section 2, we will 
briefly describe the flexible routing control framework. The detailed simulation system will be presented 
in Section 3. In Section 4, we will describe some experiments performed using the sim­ulation system. 
A summary will be given in Section 5. 2 AN AGENT BASED REAL TIME CON- TROL AND SCHEDULING FRAME- WORK 
 Under our framework, the control and scheduling sys­tem is modeled as a marketplace. Each system entity 
is equipped with a software agent who controls the functioning of the entity and represents the entity 
to negotiate with other agents. A part equipped with a part agent enters the system with some (fictional) 
currency, an objective function, and a flexible pro­cessing process plan (see [Lin and Solberg, 199 l]). 
It tries to fulfill its processing requirement to achieve its objective by bargaining with resource agents. 
Each resource agent labels its processing charge according to its status and tries to sell its service 
to maximize its profit. That is, the manufacturing system is con­sidered as a collection of intelligent 
system entities. The entities negotiate with each other by message passing for task sharing to achieve 
their individual goals. Mutual selection and mutual agreement are System 971 a=+ Figure 1: A general 
negotiation protocol made through multiple-way communication. The sys­tem functions based on the equilibrium 
of the price system and the part s objective. The high currency part will be able to achieve a better 
objective value and the critical resource which may change over time will play a major role in decision 
making. Therefore, the decision making process is called a dynamic crit­ical resource centered decision 
making scheme. The general negotiation protocol is depicted in Fig­ure 1. Under the protocol, both parts 
and resources have the capability to initiate the negotiation pro­cedure. They will then collect information 
from the network and select the entities to submit their con­structed bids using their own evaluation 
schemes. The negotiation procedure is completed when both part and resources commit to a deal. The agent-based 
real time control and scheduling framework has several advantages over conventional control and scheduling 
systems. First, global states are usually unavailable in real manufacturing environ­ments; this makes 
centralized decision making unreal­istic. The dynamic price mechanism captures the sys­tem status and 
reflects the priority and bottlenecks in price fluctuation. The distributed decision making by cooperation 
among agents can utilize local states and the price mechanism to improve system perfor­mance by improving 
performance of each individual entity. Second, the agent-based negotiation frame­work is robust and can 
cope with sudden environment changes. Third, different entities can have different objectives. The behavior 
of the agents can be con­trolled by changing objectives, price adjustment algo­rithms, audience selection, 
bid construction methods, Lin and Solberg etc. Fourth, the framework supports plug and play different 
negotiation protocols, and price adjustment algorithms can be used. Deriving new negotiation algorithms 
based on built-in generic negotiation pro­tocols is fairly straight forward. 3 AN AGENT BASED SIMULATION 
SYS-TEM We designed an agent based control simulation sys­tem to model the agent based real time control 
and scheduling framework. The system contains a control simulation module and a manufacturing environment 
simulation module. The control simulation module consists of a collection of autonomous agents who ne­gotiate 
with each other to reach job processing de­cisions based on the negotiation protocols and the built-in 
price adjustment algorithms. The manufac­turing environment simulation module is an event­based simulation 
system that couples with an in­put simulation programming language called Flexible Routing Adaptive Control 
Simulation Language. The language has provisions to model components of man­ufacturing environments such 
as machines, AGVS, tools, tool storage units, stamping stations, central buffers, etc. It also allows 
the part process designer to express flexibility in part process plans. The inte­gration of the two modules 
is based on three interface modules: the control interface, the monitoring inter­face, and the communication 
interface. The control interface provides a set of functions for controlling the activities of part entities 
and re­sources in the manufacturing simulation system. The monitoring interface module supports a set 
of queries for obtaining states of part entities, resources, or the global states of the environment. 
By integrating the control framework with the FRACS simulation system, we created a sophisticated testbed 
for experimenting with different control and negotiation strategies. By decoupling the control and scheduling 
system from the simulation system and linking it to the real time control and monitoring in­terface of 
a manufacturing environment, a real time manufacturing control system can be created. This arrangement 
allows us to test the proposed concepts in the controlled simulation system and also allows the control 
system to be easily ported to real time control of manufacturing systems. All communication between agents 
in the con­ trolled system or between the control system and the controlled units and sensors goes through 
a communi­cation interface module which is an abstraction of the underlying communication network and 
provides util­ities for sending and receiving messages, broadcasting FRAcs control 6 Schacluli%! Sr.tom 
!=RACS mumorrn(l *gf..t Imnll.xl g *sent mcm. I------II I Wnkd I OPmrm L&#38; OC.sot,. Figure 2: The 
agent based control simulation system messages, and transmit ting commands and bids, etc. The simulation 
system and the control system are both event driven. The simulation system is driven by the time-dependent 
events generated by the simu­lator. And the control system is driven by the events caused by receiving 
messages from other agents or from interface modules. The modular system descrip­ tion is shown in Figure 
2. In the following section, we will first describe the manufacturing environment simulation system and 
the control simulation system. The monitoring, con­ trol, and the communication interface modules will 
then be discussed.  3.1 The Manufacturing Environment Simu­lation System The manufacturing environment 
simulation system contains a very high level programming language called the FRACS programming language, 
a parser for the FRACS language, an event-driven simulator, a data and statistics collection system, 
a trace facil­ity, a visualization interface, and an interface to the control system (Figure 3). Simulation 
Control The functioning of the simulation system can be controlled through the input FRACS program or 
command line options. The following global simu­lator variables can be set in the FRACS program: buffer-size 
-default size of central buffer. run -run the simulator for this many times. seed -seed for the random 
number generator. rule -negotiation methods or dispatching rules. Control Simulation Figure 3: The manufacturing 
environment simulation system trace -time period for generating trace information. in-buffer.size -default 
machine in buffer size. out-buffer.-size -default machine out buffer size. report_period -time period 
between intermediate statistical results are generated. Other control variables for the simulated manufac­turing 
system are set based on the resource and part specifications in the FRACS program. FRACS pro­grams specify 
the factory setup, capabilities of the resources, part process plans, and the control and simulation 
options. Input FRACS Program The very high level programming language ap­proach of FRACS provides a flexible 
and easy way for the user to model and define the manufacturing envi­ronments. The FRACS language contains 
constructs to model manufacturing environments, part process networks, and the control structure and 
strategies. The modeling of the environment includes the def­inition of machines, transporters, central 
and local buffers, machine breakdowns, factory layout geome­try, initial system states and prices, and 
price adjust­ment parameters. Parts description, objective func­tion, arrival rate, and price setting 
are also specified. The part process network is represented by operation nodes and the precedence arcs. 
The operation nodes contain the desired operations, constraints of the op­ erations, and the types of 
precedence arcs originat­ ing from the nodes. The precedence arcs determine the execution orders of the 
operation nodes. The specifications of the control include the control al- System 973 gorithm and strategies, 
dispatching rules, evaluation functions, and predefine optimization options. in Appendix. Simulator Logic 
The logic of the simulator is as follows: new part entities arrive at the system at a rate defined by 
the arrival functions specified in the FRACS program. At any instant, the state of a part entity inside 
the system is one of the following: being served by a ma­chine, waiting to be served in the input buffer 
of a ma­chine, waiting for transportation in the central buffer or output buffer of a machine, or being 
moved. A new part entity or a part entity whose operation is just finished by a machine sends a status 
report to the control simulation module to determine its action; it will either initiate a negotiation 
process or collect resource information and participate in an existing resource initiated negotiation 
process depending on the control module. Part and machine controls then negotiate with each other according 
to their control protocol and evaluation functions to match a ready operation (or several operations 
if look ahead control is invoked) of a part entity to a machine taking con­sideration of the transporter 
availability. Once the desired operation and machine matches are done, if the required immediate service 
machine has a space to hold the part entity, the part entity requests a transporter and waits to be moved 
to the input buffer of the designated machine. By default, part enti­ties in the local input buffer of 
a machine get ser­vice based on the first-come-first-served dispatching rule. When a part is served, 
an end-of-service event is scheduled to simulate the completion of the oper­ation. Upon completion of 
the operation, the part entity requests a transporter to move it elsewhere unless the next operation 
will be processed by the same machine. If the machine has space in the out­put buffer, the part entity 
whose operation was just finished will be moved to the local output buffer of the machine; otherwise, 
the machine is blocked by this part entity and cannot resume operation until the part entity is moved. 
When the transporter ar­rives, if the part entity has not found a machine or the assigned machine has 
no place to hold it, it will be temporarily moved to the central buffer to free up the output buffer 
of the machine to avoid block­ing. This process continues until the part entity is finished processing. 
Breakdown events are scheduled according to the up-time functions of the machines specified in the FRACS 
program. When a machine is down, parts that were assigned to the machine (being processed by the machine, 
in the local input buffer of the machine, being moved to the machine by a trans­porter, or in the central 
buffer or local output buffer of other machines waiting for transporter assignment or arrival) are rescheduled 
and moved to a new des­tination machine or central buffer (if no machine is available). And a fixed event 
is scheduled accozd­ing to the down-time function specification. When a machine is up again, it resumes 
its operation by de­claring its status to be idle and invokes the machine control routine to look for 
parts. Command Line Options The simulation system also provides command line options to overwrite or 
ignore some of the options defined in the FRACS program for convenience in conducting experiments. For 
examples, -i flag allows the user to input the part program interactively, -C flag allows the user to 
specify the central buffer size. Other options include the specification of look ahead time, bidding 
strategies, number of operations to announce at a time, and the output format. System Output The output 
of the system includes the trace infor­mat ion, debugging information, statistical informa­tion, and 
final results. All the output can be con­trolled with an extensive set of options. Trace Information 
Trace information can be generated for monitor­ing and understanding the control and simulation systems. 
The simulation system generates a human readable trace for understanding the behavior of the system. 
The example listed in Figure 4 shows a trace file produced by the FRACS system during the spec­ified 
ten minute period. The trace data provides de­tailed information about selected events in the sys­tem. 
The system also generates a different status and statistical trace that can be fed into an X-window visualization 
package to give a detailed graphical view of the progress of the system. Figure 5 contains an X-Window 
dump of some graphical displays showing the statistical data. Currently, this tool shows the graphs in 
postmortem mode only. Debugging Information The system has a built-in debugger so that it can be used 
to trace system problems or improve setups in a user s program. A flag can be set so that the system 
does a sanity check periodically to uncover inconsistency in the system. The system will out­ put debugging 
information when the debugging flag is set to a positive number (that is less than 10). The larger the 
value of the flag, the more output will be produced. As with all debugging processes, using the debug­ger 
is an involved job. The granularity of the debug­ging information is based on functions and is much finer 
than the trace facility. Typically, the system F.., -. Figure 4: The trace output window generates multiple 
megabytes of debugging informa­tion for small programs. The user should start with a small setting of 
the debugging flag, narrow the prob­lem to a small time interval, and then set the debug­ging flag to 
generate detailed information to actually find the problem. In Figure 6, we list a fragment of the debugging 
information that was produced with the debugging flag set at 2. get debug output from file ndebug.out 
Statistics and Results The result of simulation is summarized in a sum­mary report that includes a list 
of options and sum­marized information about parts and resources such as part mean flow time, throughput, 
price, objective value, machine price, utilization, and maximal and minimal central queue size. Figure 
7 shows a frag­ment of a typical report that is generated.  3.2 A Negotiation-Based Adaptive Control 
System The negotiation-based adaptive control system is composed of a set of autonomous agents who ne­gotiate 
with each other to direct the activities in the manufacturing environment. A part-resource ne­gotiation 
process begins when a new part equipped with a part agent enters a loading station, a task of the part 
entity is near completion, or when the previous negotiation process fails to yield any bind­ing bids. 
Agents in the control module are equipped with event handlers. Each can invoke needed sys­tem knowledge 
such as price adjustment scheme, bid ! ..*,., 7.... , ,:,, ....... ................... . ---------.......... 
.. .. . ... : :-. ..: . I ,+ ,,: ,,p +-. I --: J m : ,I:! K. &#38;i5izi $-?. Figure 5: The window dumps 
of the graphic ization of trace data construction, and submission for decision Each event handler is 
supported by a timer event queue. The event handler paces the and decides when to generate and handle 
visual­ making. and an agents certain events. Examples of the events include INITIATE-BIDS, EVALUATE-BIDS, 
BID-CONFIRMATION-TIMEOUT, RE-NEGOTIATION, etc. Options are provided in FRACS language to control the 
schedul­ing of these events. The system currently supports the following differ­ent multi-stage negotiation 
protocols. See [Lin, 1993] for detailed descriptions. Part-initiated, resource-centered negot iat ion 
protocol.  Part-initiated, resource-centered negot iat ion protocol with multiple bid ahead.  Resource-initiated, 
part-centered negotiation protocol.  Resource-initiated, part-centered negotiation protocol with multiple 
bid ahead.  Resource-initiated, tion protocol.  Resource-initiated. tion protocol with  The current 
protocol trol-method and the bottleneck-centered negotia­ bottleneck-centered negotia­multiple bid ahead. 
­ is set by the variable con­number of bids to bid ahead is I Figure 6: Sample debugging information 
with clebug­ging flag set at 2 I *,.u.iim 0,!!.. .,: -x-:r, c,.i., ,.--,,.,,. .,,,,.:,. * . or ,8,, mm-u, 
Figure 7: Sample summary report for the simulation results determined by the variable number.bid=head. 
Our experiments show that excessive bid ahead can cause agents of parts and resources to make premature 
com­mitments and hurt the performance. A one or two bid ahead is recommended for most cases. The framework 
of the system also provides hooks for using different algorithms for price adjustments and resource selections. 
Several different price ad­justment strategies and methodologies for selecting resources or selecting 
parts to serve are also sup­ported. Each of the price adjustment and select­ing algorithms can be used 
by each of the negoti­ation protocols thus creating many different combi­nations of algorithms and effects. 
The price adjust­ment method can be adjusted by using the FRACS variable charge-adjust-method. The resource 
selec­tion criterion used by the part is set by the vari­able resource -selection met hod. The part selection 
criterion used by resources is set by the variable part-selection-method. The price adjustment algo­rithms 
and different selection algorithms for each negotiation protocol are discussed in detail in [Lin, 1993]. 
The system also supports part-initiated negotiation protocols that do not rely on the price mechanism. 
It also supports dispatching rule controls. This allows the user to compare the performances of different 
ne­gotiation protocols and access the effectiveness of the price mechanism. 3.3 Monitoring Interface 
The monitoring interface module is used either by the job shop entities to inform the control system 
of the events which occur in the shop or by the control system to query the states of the entities. Upon 
receiving an event, the corresponding entity in the control system either updates the information or 
triggers actions corresponding to the event. When the snap_shot command is executed, all job shop entities 
report their states to the control module. 3.4 Cent rol Interface The control interface is used to control 
the activities of resources in the manufacturing syst em. The inter­face module includes the functions 
to load the part entity to machine, to move the entity from the ma­chine to the output buffer, to load 
a part to an AGV, etc. The control simulation system uses these interfaces to control the operations 
of the system entities. And the manufacturing environment simulation module uses these interfaces to 
simulate the handling and functioning of the system entities. 3.5 Communication Interface The communication 
module is decomposed into two layers; the upper layer corresponds to the commu­nication protocols that 
are used in the control and simulation system. The lower layer corresponds to the actual communication 
protocols of the underly­ing network (such as TCP/IP). The upper layer in­terface includes the functions 
such as send-message, receive .message, broadcast -message, etc. The lower layer protocol depends on 
the actual communication package used. Possible targets in­clude parallel communication systems such 
as ISIS, Presto, MPI, or loosely coupled communication sys­tems such as TCP/IP. To port the communication 
module to a new type of communication system, one only needs to implement the upper layer communi­cation 
modules based on the lower layer which is the interface that the target communication system provides. 
In our implementation of the simulation system, we simulated the lower layer communication with a simulated 
virtual network which transfers mes­sage among entities through an object-oriented inter­face. The communication 
interfaces in the control and the simulation systems convert messages into events that take certain actions 
or redistribute the messages to entities in their domain (such as a resource agents). For example, when 
a part announces a ready opera­tion, it issues a broadcasting message to all machines that are capable 
of performing that operation. A copy of the broadcasted message is distributed to all agents of the machines 
in the group which would in turn trigger an event in each agent, causing the agent to process the message. 
4 EXPERIMENTS WITH THE AGENT-BASED CONTROL AND SIMULATION SYSTEM The agent-based control and simulation 
system can be used for different purposes. In particular, we have used it to test 1. the performances 
of the proposed agent-based control framework, 2. the comparison of different negotiation protocols, 
 3. the comparison of negotiation control and dis­patching rule control, 4. the effectiveness of different 
types of input process plans.  !5. the effect of look ahead in negotiation, and 6. the performance comparison 
of different look ahead schemes. Our results show the the proposed framework pro­vides a coordinated 
information flow and physical flow and can cope with the machine failures and parts object ive changes. 
They also show that the price mechanism reacts to the part s priority, machine ca­pability, and system 
loads. We also see the resource­centered negotiation scheme achieves a slightly better overall system 
performance, and the part-centered ne­gotiation scheme reacts better to the part s objective function. 
We also observed that the use of the flexibil­ity embedded in the flexible processing process plan improves 
system performance, and a small degree of look ahead helps system performance. However, too much look 
ahead causes system degradation under the dynamic manufacturing environment [Lin, 1993]. The simulation 
system provides us with a flexi­ble testbed such that new experiments can be easily setup. For example, 
when we decided to compare our negotiation protocols to that of Maley s [Maley and Solberg, 1987] which 
only uses part intelligence and does not use the price mechanism, we were able to implement Maley s algorithm 
in a few days (as op­posed to months) based on the simulation system. The simulation system allows the 
user to concentrate on control algorithms and significantly shortens the required development time. SUMMARY 
In this paper, we have presented a generic agent based control simulation system. The system consists 
of a collection of agents who make routing and processing decisions in real time through negotiation 
protocol and price and objective control algorithms. Changes in the environment, objectives, or the system 
itself can be incorporated quickly and smoothly. Resource failures will not disrupt operation of the 
system. The system also allows heterogeneous job objectives, ad­ mits job priorities, recognizes multiple 
resource types, and allows multiple step negotiation between parts and resources to ensure system effectiveness. 
The system can model generic manufacturing en­ vironment including machines with different types, capability, 
and input and output buffers, system lay­ out, transporters, central buffers, different part types, multi-objective, 
arrival rat es, and different types of input process plans. It also supports different negoti­ ation 
protocols and simple dispatching control rules. Therefore, the control and simulation system can also 
be used to model and test different manufacturing en­ vironments, input process plans, negotiation proto­ 
cols, control schemes, and price adjustment schemes. When linked with real manufacturing systems, it 
can also be used as a real time manufacturing control sys­ tem. ACKNOWLEDGMENTS This work was supported 
in part by the Engineering Research Center for Intelligent Manufacturing Sys­tems under a grant from 
the National Science Foun­dation, number CDR 8803017, with additional fund­ing from the Defense Advanced 
Research Projects Agency (DARPA). REFERENCES <RefA>Lin, Grace Y., and James J. Solberg. 1991. Effec­tiveness 
of Flexible Routing Control. hternatiomd Journal of Flexible Manufacturing Systems, Vol. 3, No. 3/4, 
189-212. Lin, Grace Y., and James J. Solberg. 1992. In­tegrated Shop Floor Control Using Autonomous Agents. 
Special Issue for Integrated &#38;fanufaciur­ing Systems, IIE !llansactions, Vol. 24, No. 3, 57-71. Lin, 
Grace Y. 1993. Distributed Production Control for Intelligent Manufacturing Systems. Ph.D. The­sis, Purdue 
University, May 1993. Maley, James G. and James J. Solberg. 1987. Part Flow Orchestration in CIM. Proceedings 
of the International Conference on Production Research, Cincinnati, OH, 1987, 17-20.</RefA> AUTHOR BIOGRAPHIES 
GRACE Y. LIN is working in the Manufacturing Research Department of IBM T.J. Watson Research Center. 
She Received her Ph.D. degree in Industrial Engineering from Purdue University in 1993. Her re­search 
interests include Production Planning, Sched­uling, and Control, Computer Integrated Manufac­turing, 
and Supply Chain Management. She was one of the recipients of the 1994 IIE Doctoral Dissertation Award. 
Her publications have appeared in the Jour­nal of Flexible Manufacturing Systems, IIE Transac­tions, 
and some major conference proceedings. She is a member of IIE, ORSA, and TIMS. JAMES J. S OLBERG is the 
Director of the Engi­neering Research Center for Intelligent Manufactur­ing Systems and Ransburg Professor 
of Manufactur­ing and Industrial Engineering at Purdue University in West Lafayette, Indiana. He received 
his degrees from Harvard and The University of Michigan. In addition to several teaching awards, Dr. 
Solberg won the Book of the Year Award in 1977 and the David F. Baker Distinguished Research Award from 
the In­stitute of Industrial Engineers in 1982. He is member of the National Academy of Engineering. 
As direc­tor of the Engineering Research Center for Intelligent Manufacturing Systems since its formation 
in 1985, Dr. Solberg manages a cross-disciplinary program in research, education, and t ethnology transfer 
involv­ing some 60 companies, 40 professors and 200 stu­dents.  
			
