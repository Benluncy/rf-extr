
 An Object-Oriented Design and hnplementation of Reusable Graph Objects with C++: A Case Study Wing Ning 
Li, Ravi Kiran University of Arkansas email: wingning@uafsysb.uark.edu Keywords: Reusability, Object-Oriented 
Design, Graphs, Data Structures, C++ language. ABSTRACT: In its basic form, a graph consists of a set 
of vertices and a set of edges. Infinitely many variations, however, can be defined from it. One may 
associate any set of attributes with the set of vertices and edges (resulting directed and undirected 
graphs, flow networks, finit e state diagrams, vertex weighted graphs, etc.), or associate any set of 
restrictions with the set of vertices and edges (resulting acyclic graphs, bipartite graphs, planar graphs, 
interval graphs, etc.). Various graphs have been implemented and embedded in today's software sys- tems. 
In this paper, we study the issues of reusable design and propose a design and implementation of reusable 
graph objects using object-oriented concepts so that graph objects can be adapted to new or revised applications. 
INTRODUCTION Object-oriented design has attracted increasing attention over the past few years and is 
now a major interest. Object-oriented analysis and design methodologies are constantly evolving, and 
the field is by no means fully mature [1]. It remains to be seen whether object-oriented methodology 
is always better than all conventional methodologies, such as structured analysis and design, which turn 
to a process-oriented view. Nevertheless, object-oriented paradigm has achieved excellent results in 
many problem domains (e.g. [2] and [3]). In the era of software engineering, a design methodology is 
use- . less unless, among other things, it has the support of a program- ming language. There are many 
programming languages that support object-oriented computing, and the popular C++ pro- gramming language 
(a super set of C programming language) is one of them. One of the main advantages of object-oriented 
pro- gramming is that it supports software reuse [4]. Clearly, this does not mean that any code or program 
or software written in C-t+, or any object-oriented programming language, automati- cally uses the object-oriented 
design methodology and can be reused. Software reuse is not a by-product of any object-oriented design 
and programming, but of those designs and pro- grammings that explore software reuse. The concept of 
software reuse is not new and is used in many techniques, methods, and processes. These include portability 
in the classical sense, code-sharing in successive release, common subsystems, common routines (subroutines 
and functions of language constructs), and repeated exploitation of algorithms. "Permission to make 
digital/hard copy of all or part of this material without fee is granted provided that copies are not 
made or distributed for profit or commercial advantage, the ACM copyright/server notice, the title of 
the publication and its date appear, and notice is given that copying is by permission of the Association 
for Computing Machinery, Inc.(ACM). To copy otherwise, to republish, to post on servers or to redistribute 
to lists, requires prior specific permission and/or a fee." &#38;#169; 1996 ACM0-89791-820-7 96 0002 
3.50 We can classify reuse in terms of reuse of code, of test cases, of design, of specifications, and 
(rather abstractly) of concepts [5]. In this paper, we shall concentrate on the reuse of code (as well 
as test cases) of graph objects. Reusable building blocks and reusable patterns are the two gen- eral 
approaches which promote reusability [6]. The former approach consists of passive components which are 
used through composition (combination of components, parameteriza- tion, and inheritance). The later 
approach consists of active components output from program generators, through which reusability is achieved 
[7] and [8]. In this paper, we shall apply the first approach to the design and implementation of our 
reus- able graph objects. The second approach may be applied to reuse of our design of reusable graph 
objects so that similar object class libraries are generated for other object-oriented pro- gramming 
languages. The reuse of a reusable component to suit the needs of a new project without ever modifying 
the existing code is the funda- mental question which this work addresses. Instead of modify- ing the 
existing code of a reusable component, we propose to augmenting (which does not temper the existing code) 
the exist- ing code of the reusable component to suit the new needs. Using this approach, we have successfully 
designed and imple- mented a basic reusable graph object around which a "com-plete" graph object library 
can be built by augmenting the exist- ing code of currently available graph objects. Our design uses 
the concept of object inheritance and nested object (generic object) from object-oriented programming. 
The corresponding constructs in C++ are derived class and template class [9] and [10]. MOTIVATION AND 
INFORMAL REQUIREMENTS Graphs are well known concepts and objects in both mathemat- ics and computer science. 
They can be very simple and, at the same time, very complex. Graph theory, which is rich and com- plex 
cross between mathematics and computer science, is applied in such diverse areas as business, engineering, 
informa- tion sciences, linguistics, physical sciences, and social sciences. Graphs have been used in 
a wide variety of applications, includ- ing analysis and synthesis of electrical circuits, placement 
and interconnection of circuit components in chips and circuit boards, finding the shortest routes, project 
planning, and artificial intelligence. In its basic form, a graph consists of a nonempty, finite set 
of vertices and a finite, possibly empty set of edges. The abundance of graph variations and richness 
of graph structures make the mathematicians fascinated because of so many puzzles to solve and theorems 
to discover (e.g. researchers continue to discover simpler proofs of the well known four color theorem), 
and make the software engineers frustrated because the code already developed for one class of graphs 
cannot be reused for another almost identical e/ass of 510 graphs. implementation and representation 
of the graph objects. Due to the lack of consideration and strategy for software reuse during the development 
of the existing types of graphs (software), now when a new type of graphs is needed, the software engineers 
are left with two options of either modifying much of the existing code of a related graph type or designing 
and implementing a new graph type from scratch. These two options are neither simple nor economical. 
We believe that a better strategy of handling the awkward situation lies in software reuse. To answer 
some of the "how to" aspects of software reuse, we choose graphs as an example of our case study. The 
rationals for choosing graphs are as follows. a) Graphs are well understood, important, and practical 
data structures; b) Graphs are used in many important applications or subsystems of software; c) Graphs 
and graph algorithms are in general difficult to understand and implement; d) Different classes of graphs 
share a lot of common properties, including common data elements, operations, and usages. Since we could 
not predict all the potentially needed classes of graphs and all the potential operations on each class 
(the classes of graphs are growing and so are the operations as new graph models are discovered), one 
of the crucial requirements of the design is to support reuse for future expansion. Let A be a existing 
graph object (which represents an abstraction or a type of a class of graphs) and B be a new graph object 
to be built. There are nine possible relationships between A and B. Two examples are given below. In 
deriving the set of relationships, we consider the association of attributes to the sets of vertices 
and edges only. The various properties that the sets of vertices and edges should satisfy are part of 
the operations. (1) The set of vertex attributes of B is the same as that of A, the set of edge attributes 
of 8 is the same as that of A, and some operations of B already exist in A and the other opera- lions 
of 8 cannot be found in A ; (2) The set of vertex attributes of A is a proper subset of that of ~, the 
set of edge attributes of A is a proper subset of that of B, and some operations of B already exist in 
A and the other operations of B cannot be found in A ;  To support code reuse, when we add object B 
to the existing set of graph objects, we should be able to reuse (augment) the code of A for developing 
the code of B without making any changes to the code of A. For relationship (1) between A and B, the 
realization of a design that meets the challenge of the reuse requirement is straight forward. For relationship 
(2), how- ever, such a design is no longer obvious; it is not even clear whether such a design is always 
possible. Nevertheless, for all nine relationships, the graph objects should be designed so that those 
operations of B already existed in A are reused in B with no change to the code of A at all. In addition 
to the reuse requirement, graph objects should have an implementation independent interface. Thus, graph 
objects are treated as black boxes. The implementation independent interface allows the reuse of the 
applications that involve graph objects even if, in the future, graph objects are implemented dif- ferently 
(e.g. using newly discovered, more efficient data struc- tures and algorithms). The implementation independent 
inter- face also allows easy implementation of additional new func-tions for graph objects by programmers 
who do not know the A DESIGN FRAMEWORK We propose a design framework which is based on the object- oriented 
paradigm and explores code reuse. In what follows, we shall consider directed graphs only. Since undirected 
graphs can be transformed to directed graphs by replacing each undirected edge (a, b) with two directed 
edges <a, b > and <b, a >, the framework applies to both directed and undirected graphs alike. In the 
design, we consider that any graph consists of three criti- cal pieces of information: a nonempty, finite 
set of vertices; a finite, possibly empty set of edges; and the adjacency relation which allows efficient 
accesses to the set of vertices (edges) adjacent to/from some vertex. In order to handle the nine relationships 
uniformly so that it is possible to reuse (augment) existing graph objects for develop- ing new graph 
objects, vertices and edges are also treated as objects. Hence, in addition to designing graph objects, 
we shall also design vertex objects and edge objects. To support an implementation independent interface, 
we shall design another set of objects which are called iterators. As the name suggests, iterators will 
enumerate edges and vertices in a graph. Let n and m be the number of vertices and edges of a graph respec- 
tively. Vertices are indexed from 0 to n-l, and each vertex has a unique index. Similarly, edges are 
indexed from 0 to m- l. A Basic Edge Object The basic edge object which we design consists of three 
dam members: e_index, s_vetx, and d_vetx. An edge's index is stored at e index. The index of the source 
(starting) vertex of an edge is stored at s..vetx. The index of the destination (end- ing) vertex of 
an edge is stored at d..vetx. The basic edge object also consists of two member functions for each data 
member. These member functions are: get_eindexO, set_e index(x), get..s..vetxO, set..s,.vetx(x), get..d_vetxO, 
and set_d_vetx(x) and provide an implementation independent inter- face to data members. Member function 
get e_indexO returns the value of e.jndex, and set..e.jndex(x) sets the value of e index to x. The operations 
of get..s_vetxO, set_s_vetx(x), get..d_vetxO, and set_d_vetx(x) are defined similarly. Other member functions 
that the basic edge object has are: init(...) which initializes the three data members of a basic edge 
instance, read..edge(..3 which reads an edge's data from a graph input file, write_edge(...) which writes 
an edge's data to a graph output file, and display_edgeO which displays an edge's data on the standard 
I/O for debugging purposes. The conaructor and destructor of an object will be described in the next 
section because they are C++ concepts and constructs. A Basic Vertex Object The basic vertex object which 
we design consists of three data members: v jndex, togis:, and fromJist. A vertex's index is stored at 
v index. The indices of the set of edges entering into a vertex are stored at toJi~ (a fan-in list of 
edges). The indices of the set of edges leaving from a vertex are stored at from list (a fan-out list 
of edges). Note that from these two edge index sets of a vertex, the set of vertices which are adjacent 
to/from the vertex can be determined. 511  The basic vertex object consists of two member functions 
for data member v_index, four member functions for to list, and another four for from_list? These member 
functions are: get_v_index(), set_v_index(x), insert..to_list(x), delete_totist(x). getsize_to_listO, 
getsize.from_listO,, insert from_list(x), delete_from_list(x), get_to_listO, and get..from listO. Other 
member functions that the basic vertex has are: read_vertex(...), write_vertex(...), and display_vertexO 
whose operations are similar to that of basic edge. A Basic Graph Object The basic graph object is designed 
using the basic edge object and the basic vertex object. In other words; in this design the graph object 
depends upon the given edge object and vertex object. This dependency is important and is used to achieve 
the design of reusable graph objects. The basic graph object comprise four data members: edge_size, vertex_size, 
edge_set, and vertex_set. For a given graph, vertex_size stores the number of vertices in the graph, 
and edge_size stores the number of edges in the graph. The set of vertices is stored in vertex_set. The 
set of edges is stored in edge_set. Technically speaking, each element in vertex_set is an instance of 
the given vertex object and in edge_set is an instance of the given edge object. For the basic graph 
object, the given vertex object is the basic vertex object which we have just defined, and the given 
edge object is the basic edge object. The basic graph object has four member functions for vertex_size, 
edge_size, vertex_set, edge_set. They are get vertex_size(), get_edge_size(), get_vertex_setO, and get_edge_setO. 
The purpose of these functions is to provide an interface to the graph object and a mechanism to various 
graph object iterators for enumerating vertices and edges. Four member functions are used to manipulate 
vertices and edges in a graph object. They are insert_edge(x), insert_vertex(x) (where x is the edge 
or vertex), deleteedge(x), and delete_vertex(x) (where x is the index). Other member functions that the 
basic graph object has are: readgraph(...) (this member function will also be implemented as a constructor 
in C++ in the next section), write.graph(...), and display..graph(). Iterator Objects Six iterator objects 
are designed. These iterator objects provide an implementation independent interface to graph objects 
and enumerate vertices and edges in them. These objects are called Vertex.from iterator, Edge..from_iterator, 
Vertex_to_iterator, Edge_to_iterator, Vertex,.iterator, and Edge_iterator. Each iterator object has some 
data members which may depend upon the implementation of the basic graph object. We delay the description 
of these data members until the next section because they are related to implementation issues. Each 
iterator object also has a member function called next(). Edge_iterator instances are associated with 
basic graph instances, and so are Vertex_iterator instances. For an instance of Edge.jterator, every 
time next() is called it returns an edge in the associated graph that has not yet returned by it. If 
no such an edge exists, then it returns a special value indicating no more edges to enumerate. For an 
instance of Vertex iterator, function next() is similarly defined. The nextO functions of these two iterators 
allow a user (programmer) to develop code which examines the edges and vertices in a graph one by one 
even though the implementation and representation of the graph is unknown to the user. An instance of 
the rest four iterator objects is associated with a graph and a vertex of the graph. For an instance 
of Edge_to_iterator, each time next() is called, it returns an edge coming into the associated vertex 
that has not yet returned by it. If no such an edge exists, then it returns a special value. The nextO 
function for the rest of the iterators is similar to that of Edge_to_iterator, and it differs in the 
item which it enumerate. Code Reuse through Inheritance and Generic Object Now, we shall illustrate how 
this design framework allows code reuse in future development. Obviously, the objects we have just designed 
may seem to be of little use so far as real graph applications are concerned. These objects are the basic 
building blocks that will be used and reused to develop more useful objects and applications. Suppose 
we want to have a new graph object called Graph_A, which is the basic graph object plus a new member 
function. This new function is called is_acyclicO and returns true if the graph has no cycles and false 
otherwise. To develop this new graph object, we make Graph_A inherit everything from the basic graph 
object and acquire a new member function is..acyc licO. Similar to the basic graph object, Graph A also 
depends upon the given edge object and vertex object (both the basic graph object and Graph_A are generic 
objects). Since the vertex attri- butes of Graph_A are the same as that of the basic graph object, and 
the edge attributes are also the same as that of the basic graph object, then the input edge object of 
Graph_A is the basic edge object, and the input vertex object is the basic vertex object. During the 
inheritance, input edge object and input ver- tex object of Graph_A are passed to the basic graph object 
as its input edge and vertex objects. Function is acyclicO can be developed using either breadth first 
search or depth first search and iterator objects and is the only code need to be developed for Graph_A. 
The rest of the code in Graph A is obtained through code reuse of the basic graph object. Note that using 
iterator objects, the creator of is.,acyclicO does not need to know how graphs are implemented or represented, 
and is acyclicO continues to work even if the implementation of the basic graph object is modified. These 
two properties make graph objects more reusable. To illustrate how the nine relationships of the p~vious 
section are handled, let us assume that we want to have a new graph object called Graph_B. In Graph_B, 
a vertex fias two more attributes than that of Graph_A, and an edge has one more attri- bute than that 
of Graph_A. Object Graph B ne, eds all the member functions of Graph A including is_acyclicO plus, pos- 
sibly, a few more member functions of its own. The new ver- tex attributes are gate_type and value, and 
the new edge attri- bute is de/ay. The new member functions of Graph B may need to use these new attributes. 
One may consider that Graph._B models logic circuits. 5!2 To develop the new graph object Graph_B, we 
first define a new vertex object Vertex_B and a new edge object Edge B. We make Vertex_B inherit everything 
from the basic vertex object, with functions read vertex(...), write_vertex(...), alad display_vertexO 
being redefined, and acquire new member func- tions get gate_type(), set gate_type(x), get_value(), and 
set value(x). The read vertex(...), write_vertex(...), and display_vertexO functions in Vertex_B are 
developed by first calling the corresponding functions (code reuse) of the basic vertex object and then 
adding the code to handle the new attri- butes. Similarly, we make Edge B inherit everything from the 
basic edge object, with read_edge(...), write_edge(...), and display_edgeO being redefined, and acquire 
new member func- tions get delayO and set_delay(x). As can be seen, code reuse is applied to the development 
of both Vertex_B and Edge B. Once Vertex..B and Edge_B are developed, we are ready to develop Graph B. 
We make Graph_B inherit everything from Graph_A and acquire the small number of member functions of its 
own. Similar to GraphA, Graph_B is also a generic object and depends upon the given edge object and vertex 
object. The input vertex object of Graph_B is Vertex_B, and the input edge object is Edge_B. During the 
inheritance, Vertex_B and Edge_B are passed to Graph_A as its input vertex object and input edge object 
respectively. Since Vertex_B and Edge_B inherit every- thing from the basic vertex object and the basic 
edge object respectively, then with the new input vertex and edge objects, Graph_A behaves the same as 
before, and all the member func- tions of Graph A still work. Hence, Graph B has everything that Graph 
A has. The small number of member functions of Graph B can be developed using the appropriated algorithms 
and the iterator objects. It should be pointed out that iterator objects continue to work for Graph_A 
and Graph_B because both graph objects are inherited from the basic graph object. Note also that it is 
possi- ble to introduce new data members to Graph_B when it is inherited from Graph A, In general, when 
the vertex and edge attributes of a new graph object to be developed do not match that of the existing 
graph objects in the class library, the following steps are taken. (a) Identifying an existing graph 
object that best matches the requirement of the new graph object. (b)Using inheritance to derive the 
needed vertex object and edge object respectively from the vertex object and edge object of the existing 
graph object identified in (a). (c) Using inheritance to derive the new graph object, with the input 
vertex and edge objects created in (b), from the exist- ing graph object identified in (a).  We would 
like to emphasize that users of the graph objects can and is allowed to develop new functions in their 
code that mani- pulate graph objects. These non-member functions are reusable (continue to work) even 
if the implementation of the graph objects and/or their member functions is modified. Of course, these 
functions are less reusable to others. C++ IMPLEMENTATION To demonstrate the design framework in the 
previous section, we develop a small prototype class library written in C++ which implements the basic 
edge object, the basic vertex object, the basic graph object, and the six iterator objects. Basic Edge 
Object Implementation The code of the basic edge object in C++ is shown below. class Basic_edge { protected 
: int e index, s.vetx, d..vetx ; public : Basicedge(); "Basic edge(); int get_e indexO, int get s_vetxO; 
int get d_vetxO; int isused(); void set_e index( int ); void set_svetx( int ); void set d_vetx( iut ); 
void init( int e=-l, h~t s=O, htt d=O ); void reset_used(); virtual void read_edge( fstream &#38; ); 
virtual void display edgeO; virtual void write_edge( fsrream &#38; ); };  In Basic_edge, all three data 
member ate protected because we do not want the general program to access them except for the member 
functions of those objects that are derived from it. All member functions of Basic_edge are public and 
are available to the general program. In Basic_edge, member functions display_edge(), read edge( fstream 
&#38; ), and writeedge( fstream &#38; ) are chosen as virtual functions because many edge objects will 
be derived from it, and these derived objects will have their own definitions of these member functions. 
Note that member functions Basic edgeO (with the same name as the object) and "Basic_edgeO (by prefacing 
" to the name of the object) are called constructor and destructor respectively in C++. For Basic_edge, 
no dynamic allocation of storage is needed. The constructor simply initializes each data member to -1, 
and the destructor currently does nothing and is used for testing the implementation. Member functions 
/sused() and reset..used() are needed for the current implementation of the basic graph object. If the 
e.jndex of an edge is -1, then the edge is not used, and is_used() returns false. Function reset..usedO 
simply assigns -1 to e_index. The implementation of read_edge( fstream &#38;) and write_edge( fstream 
&#38; ) depends on the graph input file format and will be described later. The implementation of the 
rest member functions is straight forward and will not be discussed. Basic Vertex Object Implementation 
The name of the basic vertex object is Basic_vertex. Data member from list is implemented as an array 
of integers (each integer is an index of an edge) and so is to,lisr The termination of both lists is 
signaled by having -1 in the next available slot. The reader is referred to [11] for more details. Basic 
Graph Object Implementation The code of the basic graph object in C++ is shown below: template <class 
ETYPE, class NTYPE> class Basicgraph { private: int next_e ; protected: ETYPE *edgeset ; NTYPE *vertex_set 
; int vertex_size, int edge_size ; public: Basic..graph O; 513 Basic_graph ( char * ); "Basic_graph 
0 ; int get_edge_sizeO; int get_vertex_sizeO; ETYPE * get_edge_set(); NTYPE * get_vertex_ setO; void 
insert_edge( ETYPE ); void insert_vertex( NTYPE ); void delete_edge( int ); void delete_vertex( int ); 
virtual void read..graph( char * ); virtual void display_graphO ; virtual void write..graph( char * ); 
};  The name of the object is Basicgraph. Basicgraph is a gen- etic object, and in C++, the keyword 
template defines a generic object (a template class in C++ terminology). Basic..graph has two type parameters 
in its formal parameter list: ETYPE and NTYPE. They specify the type of the edge object and the type 
of the vertex object respectively. They are used in defining data members edge_set and node_set and in 
declaring member func- tions getedge_set, getnode_set, insert..edge, and insert_node. Data member edge_set 
is currently implemented as an array of instances of the given edge object (the actual parameter for 
ETYPE). The size of the array is dynamically determined and automatically adjusted to the new graph size. 
Similarly, node_set is implemented as an array of instances of the given vertex object, and the size 
of the array is adjusted dynamically to the increase of the graph size. Basic..graph has two constructors. 
One is the default constructor which simply initializes the data members for a null graph. The other 
is a special constructor which takes in an argument as a file name and sets up (initializes) the graph 
from the input data file. Its function is identical to readgraph( char *) but is automatically performed 
upon the creation of the graph. The reader is referred to [11] for more details. Iterator Object Implementation 
The implementation of the six iterator objects depends on the implementation of the basic graph object. 
Should the imple- mentation of the basic graph object be modified, the implemen- tation of the iterator 
objects may need to be changed accord- ingly. Each iterator is implemented as a template class (a gen- 
etic object). In each iterator, the formal parameter list following the keyword template is identical 
to that of the basic graph object whose edges or vertices will be enumerated by it. The reader is referred 
to [11] for a more complete description. Graph Data File Format The reader is referred to [11] for more 
details. EXAMPLES In this section, we illustrate how the ideas in Section Code Reuse through Inheritance 
and Generic Object are realized in the C++ implementation. Again, the reader is referred to [11]. CONCLUSIONS 
An object-oriented design and implementation of reusable graph objects with C++ is proposed. Our design 
and implementation demonstrates that, for graphs, it is possible to reuse reusable components to suit 
the needs of a new project without ever modifying the existing code. The new needs are met by aug- menting 
(i.e. without tempering) the existing code. Based on the proposed design and implementation, we are developing 
a easily extensible and reusable graph object library. The reusable design makes the development faster, 
more reliable, and more manageable. The reusable graph object library is intended to support the software 
development using the abstract data type programming paradigm. The development of the library is based 
on the object-oriented programming paradigm. The implementation of the member functions of a reusable 
graph object is based on procedural programming paradigm. It seems that we are living in a multi-paradigm 
universe, and each paradigm handles certain tasks in the software development better than the others 
do. As a hybrid language, C++ provides support for procedural, abstract data type, and object-oriented 
paradigms. Both the relationships is-a (e.g. Graph_B is a Graph A with additional...) and has-a (e.g. 
a graph has a set of vertices) are present in graphs and are treated differently in the reusable design. 
The reuse of is-a sub-type relationship is handled by class derivation (inheritance), and the reuse of 
has-a subtype relationship is handled by tem- plate class (generic object or nested object). REFERENCES 
<RefA>[1] R.G. Fichman and C. F. Kemerer, "Object-oriented and conventional analysis and design methodologies," 
IEEE Computer, vol. 25, no. 10, pp. 22-39, Oct. 1993. [2] P.K. Egbert and W. L Kubitz, "Application graphics 
modeling support through object orientation," IEEE Com- puter, vol. 25, no. 10, pp. 84-91, Oct. 1993. 
[3] B. Meyer, Object-Oriented Software Construction. Cam-bridge, England: Prentice-Hall International. 
1988. [4] R.J. Wirfs-Brock and R. E. Johnson, "Surveying current research in object-oriented design," 
Comm. ACM, vol. 33, no. 9, pp. 104-124, Sept. 1990. [5] P. Freeman, "Reusable software engineering: Concepts 
and Research Directions," Proc. Workshop Reusability in Programming, ITT, pp. 2-16, Stratford, Conn. 
1983. [6] C.V. Ramamoorthy, V. Garg, and A. Prakash, "Support for reusability in genesis," IEEE Trans. 
Software Eng., vol. SE-14, pp. 1145-1153, Aug. 1988. [7] J.M. Boyle and. M. N. Muralidaran, "Program 
reusability through program transformation," IEEE Trans. Software Eng., vol. SE-10, pp. 574-588, Sept. 
1984. [8] T. E. Cheatham, Jr., "Reusability through program transformation," IEEE Trans. Software Eng., 
vol. SE-10, pp. 589-594, Sept. 1984. [9] S.B. Lippman, C++ Primer. 2nd. Ed. Addison-Wesley, 1992. [10] 
B. Stroustrup, The C++ programming language. 2nd. Ed. Addison-Wesley, 1992. [11] W. N. Li and R. Kiran, 
"An Object oriented design and implementation of reusable graph objects with C++: A Case Study," CSCI-TR-94-03, 
Computer Science Depart- ment, University of Arkansas. 514   </RefA>
			
