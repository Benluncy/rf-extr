
 An Introduction to Haskell with Applications to Digital Signal Processing David M. Goblirsch The MITRE 
Corporation Keywords: HaskeU, Functional Programming, Digital Signal Processing Abstract This paper provides 
an introduction to the functional language HaskeU and shows how it can be used for programming digital 
sig- nal processing algorithms. We demonstrate this by implementing a number of common filmmrir~g operations. 
Our purpose in writing this paper is to introduce the digital signal processing community to functional 
programming. Introduction The most popular computer languages, e.g., C, FORTRAN, Pascal, etc., are imperative 
(also called procedural) languages: programs consist of a detailedsequence of instructions to be performed. 
The programmer is responsible for controlling memory usage and for the proper sequencing of instructions. 
For these reasons, these languages are not convenient for either rapid prototyping or large- scale systemdevelopment. 
In functional programming, computation consists of evaluating ex- pressions to obtain values. The basic 
language construct is function application, where "function" is meant in its mathematical sense: a mapping 
fIom inputs to outputs. Purely functional languages do not provide any imperative language features, 
e.g., there is no as- signment statement Examples of purely functional languages are Miranda (Miranda 
is a trademark of Research Software Ltd.) [1], Hope [2], FL [3], and, most recently, Haskell [4--6]. 
HaskeU is a lazy functional language: no expression or any part of an expression is evaluated until its 
value is needed, including function arguments. This simple concept has a profound effect on programming 
style [7]. Although most signal processing software has been developed in FORIRAN or C, we wanted to 
explore using Haskell for a number of reasons (many of which hold for other lazy languages too). First, 
Haskell allows programmers to work at a higher level of abstraction. For example, it is ofmmn possible 
to develop and modify code using algebraic manipulations. Second. Haskell makes software reuse easier 
by providing a polymorphic type system and higher-order functions. Third, lazy evaluation enhances modularity 
[7]. Fourth, HaskeU is strongly and statically typed so many programming er- rors are discovered at compile 
time. Finally, Haskell programs Permission to copy without fee all or part of this material is granted 
provided that the copies arc not made or distributed for direct commercial advantage, ~e ACM copyright 
notice and the title of the publication and its date appear, and notice is given that copying is by permission 
of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or 
specific permission. O 1994 ACM 089791.-647-.6/ 94/04)03 S3.50 are usually shorter and" easier to understand 
than their imperative counterparts. There are other advantages as well. Programming in Haskell has two 
disadvantages. First, HaskeU programs are often---but not always--significantly slower than their FORTRAN 
or C counterparts, although they are ofmn fast enough for prototyping purposes. Second, they usually 
require a lot more memory. However, advances in compiler technology should make these disadvantages less 
troublesome in the future. HaskeU was designed by an international committee of computer scientists to 
provide a common lazy functional language suitable for teaching, research, and applications. A formal 
report was published in May 1992 [5]. The language is named for the mathematician Haskell Curry [8]. 
Compiler developmentis ongoing at three sims: Yale, Glasgow University (Scotland), and Chalmers University 
of Technology (Sweden). These compilers are available by anony- mous ftp from any of the simms.The interact 
addresses are nebula.cs.yale.edu ftp.cs.chalmers.se ftp.dcs.glasgow.ac.uk  At all three simms, the compilers 
appear in subdirectories of the directory pub/haskell. There is an electronic mailing list for HaskeU. 
To join, send a request to haskell-request @ca. yale. edu. References [4] and [6] provide more detailed 
introductions to Haskell. The Yale system has an excellent on-line tutorial. How- ever, those unfamiliar 
with functional programming will probably need to consult more general textbooks first [9-11]. A Brief 
Introduction to Haskell In this section, we provide an introduction to HaskeU that is suf- ficient for 
understanding the rest of the paper. Many interesting . features of Haskell have been omitmmd. Basic 
Types The basic types are listed in Table 1. Haskell provides the data types provided by FORTRAN and 
C except for the "short integer." In addition, Haskell provides unbounded integers (Integer), and rational 
numbers (Rational). HaskeU also allows user-defined types, but those will not be discussed in this paper. 
Lists Most nontrivial programs require more complicated data structures than the basic types. One of 
the most useful structures is the list. 425 Table 1: Basic types FORTRJdq 7 7 ~ ~laskel 3 logical Bool 
character char Char integer*2 short integer int "]nit Integer Rational real i float Float real*8 Double 
complex Complex Float complex* 16 Complex Double Lists can be programmed in C using linked Lists, but 
they are built- in in Haskell. Haskell lizts are like sequences in mathematics: all elements must have 
the same type. Lists can be defined by explicitly listing the elements between square brackets. For example: 
" [1, 2, 3] ['a', 'b', 'c', 'd'] ["I", "like", "Haskeli"] However, lists are more often built up from 
the "empty list" denoted by [], and the "cons" operator, denoted by a colon. For example, [I, 2, 3] 
is equivalent to I : [2, 3] which is ultimately equivalent to 1:2:3: [] since ":" associates to the fight. 
Note that lists are either empty or the result of"cons-ing" something to the front of another list. This 
idea will be exploited when we show how to define functions using pattern matching. Tuples Values having 
the same 3r different types can be combined in tuples. Tuples are similar to ~zructs in C except that 
their elements are accessed by pattern matching. For example, (True, ' H' ) is a two- tuple (or "pair") 
of tyl~e (Bool, Char). The Standard Prelude Haskell's Standard Prei~de is a library of data types and 
functions that are automatically available to all programs. This section de- scribes those functions 
from the Standard Prelude that are used later in the paper. We include Haskel! definitions for some of 
the func- tions in order to introduce certain critical concepts. Usually the definition given will be 
that of [5], but occasionally a simpler one is used. The simplest function we will need is not, the negation 
function of mathematical logic. This function can be defined by completely listing the different cases: 
D~-~ : : Bool -> Bool not True = False aot False -True The first line is a type declaration. The double 
colon is read as "is a" and the arrow "->" indicates that not is a function. This line is read as "not 
is a function that maps a boolean to a boolean." Bool is one of the basic types provided by Haskell (see 
Table 1). It has two values, True and False. The remaining two lines are defm/t/ons. Observe that function 
application is denoted by simply juxtaposing the function name and its argument. The first definition 
reads "not applied to True returns False." The funcfion null applied to a list returns True ff its argument 
is the empty list and False otherwise. It can be defined usingpattern matching: null :: [a] -> Bool 
 null [] = True null (x:xs) = False The "a" in the type declaration is a type variable and stands for 
any type. Thus, null is apolymorphicfunction: it can be applied to lists of integers, booleans, strings, 
etc. Since lists are either empty or the result of cons-ing a value to another list, there are two definitions, 
one for each pattern. When the function null is invoked as part of the evaluation process, the actual 
argument is matched against each pattern until one applies and the value of the corresponding right~ 
hand side is returned. (If the actual argument doesn't match any pattern it is an error and evaluation 
stops. Because Haskell checks types at compile time, this can only happen ff the programmer has omitted 
definitions for some of the possible cases.) If the second pattern matches, then x is bound to the first 
element of the list and xs is bound to the rest of the list. The function tail returns the portion of 
a list following the first element. Like null, it is defined using pattern matching. tail :: [a] -> [a] 
 tail [] =, error "tail of []" tail (_:xs) = xs The underscore in the pattern is a wildcard character. 
We use it whenever we don't want to give the matched value a name. We could have used it in the definition 
of null. The Standard Prelude function error stops execution and prints the given message. The function 
length returns the number of elements in a list. It is defined using pattern matching and recursion. 
length :: [a] -> Int length [] = 0 length (_:xs) = I + length xs The function map applies a function 
to each element of a list It is our first example of a function that takes two arguments. It is also 
a higher-order function because one of those arguments is a function. Mathematically, map f [zo, zl, 
x2 .... ] = [f z0, f xl, f z2, ...] The code follows im~nediately from the mathematical description: 
map :: (a-> b) -> [a] -> [b] map f [] = [] map f (X:XS) = f x : map f xs  The type statement says 
that the first argument is a function that maps values of type a to values'of type b (these types can 
be the same). The second argument is a list of values of type a. The result is a listof values of type 
b. We could have defined aap as a function of an ordered pair, which would more closely resemble the 
definition that would be given in a conventional language: map' : : ((a -> b), [a]) -> [b] map' (f, []) 
= [] map' (f, (x:xs)> = f x : map (f, xs) However, map ' is not really a function of two arguments; 
rather, it is a function of one argument that is a compound object. The first definition has a significant 
advantage over the second. The type statement for lap suggests that it can be applied to a function f 
to produce a function that maps lists of values of type a to lists of values of type b, and this is indeed 
the case C'->" associates to the right in type statements). A function such as map is a curried function, 
named for Haskell Curry. New functions can be created from curried functions bypartial application. For 
example, a function that takes a list of lists and returns a list of the lengths of each sublist can 
be defined as follows: sublist_lengths : : [[all -> [Int] sublist_lengths = map length  A useful HaskeLl 
construct is the lambda abstraction, which is used to define a function without giving it a name. The 
syntax is \identifiers -> expression The ideraifiers are the bound variables of the lambda abstraction 
and expression defines the return value. The baekslash 'V is read "the function of" and the arrow '->' 
is read "that returns." Thus, \x -> x'2 + 2 is "the function of x that returns x squared plus two." 
If f : .,4 ---, B and g : S ~ C, then we can define a function h = 9 o f called the composition of g 
with f, by seuLng h(x) = g(f(z)). In Haskelk composition is denoted by an infix period. It can be defined 
using a lambda abstraction: (.) :: (b -> c) -> (a -> b) -> (a -> c) g . f = \ x -> g (f x) Because Haskell 
is a lazy language, it is possible to define infinite lists since elements of such lists are evaluated 
only as needed. The next two functions provide useful ways of building infinite lists. The function iterateproduces 
an infinite list by iteratively apply- ing a function starting from a given initial point. Mathematically, 
iterate f z = [x, f z, f (f x), f (f (f x)) .... ] Like map, its definition follows immediately from 
the mathematical description. iterate :: (a-> a) -> a-> [a] iterate f x -x : iterate f (f x)  The function 
repeat takes a value and returns an infinite list of repetitions of that value. Mathematically, repeat 
z = Ix, x, z .... ] The definition: a-> [a] repeat x = xs where xs ,, x:xs repeat :: The where clause 
is used to introduce local definitions. Here it is used to create a cyclic structure that represents 
the infinite list in a small, constant amount of space. The function takeWhile returns the longest initial 
portion of a list that satisfies a predicate. Its definition uses pattern matching, recursion, and guards. 
Guards are introduced by a '1' and are evaluated fromtop to bottom. The first guard that evaluates to 
True causes the value of the corresponding right-hand side to be returned. takeWhile :: (a -> Bool) -> 
[a] -> [a] takeWhile p [] = [] takeWhile p (x:xs) p x = x : takeWhile p' xs I otherwise = [] We have 
now provided examples of the programming concepts required to understand the rest of the paper. We finish 
this section by describing the remaining functions we need from the Standard Prelude but without providing 
definitions. The function reverse reverses the order of the elements in a finite list. The function splitAt 
divides a list into a pair of sublists, making thebreak at a specified position. For example, splitAt 
3 [1,2,3,4,5,6] would produce ( [i, 2,3], [4,5,6]). The function sum takes a finite list of numbers 
and returns their sum. The function take takes two arguments. The first is an integer specifying how 
many elements to retrieve from the front of the second argument, a list. The function zip takes two lists 
and returns a list of pairs of corre- sponding elements. For example, zip [1,2,3,4], ['a','b','c','d'] 
 evaluates to [(1,'a'),(2,'b'),(3,'c'),(4,'d')]. If the two lists have different lengths, the resulting 
list is only as long as theshorter list. We conclude this subsection by describing three useful binary 
op- erators. The operator ++ catenates two lists. The operator ! ! is the list subscripting operator. 
If xs is a list, xs ! ! n returns the element at position n provided that xs has at least n+l elements 
(lists are indexed from zero). Finally, \\ is the list differencing operator. In xs \\ ys, the first 
occurrence of each element of ye is removed from xs. 427 Summary We have described many features of 
Haskellin ~is section, enough to understand the examples presented in the rest of this paper. How- ever. 
there are many language features of interest to scientific pro- grammers that we have not talked about, 
such as a.,rays. Intormation about these features can be found in [4] or [5]. Applications to Digital 
Signal Processing In the rest of the paper we assume some familiarity with digital sig- nal processing 
so we provide only minimal backgrourA information; see [12] or [13] for more details. A discrete-time 
signal is a (possibly infinize) sequence of numbers. The elements of the sequence are called samples. 
Since H askell lists are like sequencesin mathematics, Haskell has a built-in mechanism for representing 
discrete-time signals. Haskell allows us to define type synonyms, which are useful for producing readable 
type expressions For example, the statement type Signal = [Float] makes Signal a synonym for a "list 
of Floats." The identifier Signal can now be used in type expressions. Filtering is the process of transforming 
a signal into a new signal. A fdter is a function that performs filtering. Filters can be divided intotwo 
categories,linear and non//near. Linear Filtering Linear filters can be divided into two groups,finile 
impulse response (FIR) and/nfm/te impulse response (I/R). Finite Impulse Response Filters An FIR filter 
f" is characterized by a finite sequence of numbers called the impulse resporde of the filter. We use 
5rto filter a signal by convolving the signal with the impulse response of ~'. To define convolution, 
let [x,] denote the input signal (i.e., the signal to be filtered), [y,] the output signal (i.e., the 
result of the filtering operation), and [h,] the impulse response of the filter. Suppose the length 
of the impulse response is M samples. The formula for y, is M--1 y. = ~ h~,z.-k, (1) k=O To define values 
for Yo, Yt,  , YM-2, we need to assume values for z-i,  , z-N+l. It is often convenient (but not always 
correct) to assume they are zero. To illustrate, suppose we have a filter with the impulse re-sponse 
[ho, hz, h2, h3]. Suppose the input signal has four values [z0, xl, z2, x3]. The seven values of the 
output sequence are given by: go = h3*O+hz*O+hl*O+ho.xo Yl = h3*O+h2*O+hl*zo+ho*zl Fz = h3 * O + hz * 
xo + hl * xl + ho * z2 = h3*z~ ~-h2*zlWht,xz+h0,x3 y4 = /-3*Zl +h2*x2-+'ht*z3 ~/$ "~ h3 * z2 + h2 * z3 
./j~ .I' h3 * z3 ? From these equations it is easy to define a Haskell function for general FIR filtering: 
" - gfirI :: Signal -> Signal -> Signal gfirf hs xs = map (iprod hsb) ( takeWhile (not . null) xss9 
 where h~b = reverse hs xs' = take (length hs -I) (repeat O) ++ xs xss -iterate tail xs' The where 
clause defines t/tree local values: hsb is the impulse response "backwards," xs' is the result of concatenating 
a list of (length hs -l) zeros to the front of the signal to be filtered, and xss is the infinite list 
[ [0, 0, 0, zo, z,. z~, z3], [0,0, zo, zl, z2, z3] ..... [~2. ~], [~], [], [] ..... ] Applying takeWhile 
(not . null) to this list returns the first seven nonempty sequences. The filtering is performed by map- 
ping the function (iprod hsb) over this list. The function iprod computes the inner product. It can be 
defined using a list compre- hens/on: iprod xs ys = s,~ [x*y I (x,y) <-zip xs ys] This says that iprod 
is the sum of the products of the corresponding elements from the two lists. If the lists have different 
lengths, then on ly that portion of the longer list that corresponds to the shorter List is used because 
of the Standard Prelude function zip. Because of this, we do not need to pad the end of the signal with 
zeros. Since iprod takes two arguments, (iprod hsb) is a partial application, fixing the first argument 
to be the reversed impulse response. The definition of gfirf uses eleven functions from the Haskell Standard 
Paelude: iteiate, length, map, not, null. repeat, reverse, "call, take, takeWhile, and ++, nicely demonstrating 
how Haskell encourages software reuse. Furthermore, this code will work even if the input signal is"infinite," 
e.g., on-line measurements from an A;D converter. Becauseof lazy evaluation, the elements of the output 
sequence are generated as needed by whatever function calls gf i rf, and the input sequence is only evaluated 
as needed. Autoregres:;ive Filters The simplest IIR filter is the autoregressive (AR) filter. An AR filter 
is characterized by a list of numbers [a2, a2 ..... aM] called the autoregression coefficients and a 
single number b called the gain. M ix rbe filter orde,. Letting [z,] denote the input signal and [y,] 
the ouq:ut signal, the formula for y, is M yn = ~ akyn--k + bzn. (2) k=i We now defane a function arf 
to implement autoregressive filtering. Our implementation uses two auxiliary functions, arf ' and arf 
' ' The main function arf sets up some initial conditions and then calls the auxiliary function arf ', 
which recursively calls itself as long as there are input samples to process. Once the input signal is 
ex- hausted (if ever) the auxiliary function arf ' ' takek over. arf takes three arguments. The first 
is the list of autoregression .coefflcients ("as" in the definition), the second is the gain ("b"), and 
the third is the signal to be filtered ("xs"). The definition depends critically on lazy evaluation because 
ys appears on both sides of the equal sign in the last equation of the where clause. arf as b xs = ys 
 where zs ffi take (length as) (repeat O) ys = arf' (reverse as) b (zs ++ ys) xs arf' ash b ys (x:xs) 
= (iprod asb ys + b,x) : arf' asb b (tail ys) xs arf' asb b ys [] = arf'' asb ys arf'' asb ys = iprod 
asb ys : arf'' asb (tail ys) Since the output of an AR filter is infinite---even when the input signal 
is finite--ar:f returns an infinite list. To obtain a finite-length output signal, we could use one of 
the Standard Prelude functions like take or takeWhile to get what is needed. Autoregresslve Moving-Average 
Filters An autoregressivemoving average (ARMA) filter combines the two filter types just discussed. Again 
letting [z,] denote the input signal and [y,] the output signal, the formula for y, is M N--1 (3) k=l 
i=0 By defining the intermediate sequence [z,] by the formula N--1 Zn = ~ blZn-i, i=0 we can rewrite 
(3) as two equations N-1 M Zn = E bizn-i, and y. -.~ ~ akYrt-k "t- Zn. i=O k=l Hence, the ARMA filter 
can be defined as the composition of an FIR filter having the impulse response [be, bl ..... bN-1 ] and 
an AR filter having the regression coefficients [al, a2 ..... aM] and a gain of 1. armaf ba as -arf as 
I . gfirf bs Nonlinear Filtering In the next two sections we will define functions that perform some 
simple nonlinear filtering operations. Scalar Nonlinearities The simplest nonlinear filtering operation 
is to apply a scalar non- linear function to each signal sample. To implement such a filter, we can just 
use the Standard Prelude function map. A simple example of this is a square-law device, which, as the 
name implies, simply computes the square of each signal value. squareLaw : : Signal -> Signal squareLaw 
= map ('2) Note that there are two partial appfications here, one for map and one for th6 exponentiation 
operator ..... . Another simple example is a half-wave rectifier, which passes pos- itive samples untouched 
but converts negative samples to zero. halfWaveRect : : Signal -> Signal haliWaveRect = map (\s -> i~ 
s > 0 then s else 0)  This function illustrates the use of the if expression.. For a more complicated 
example, consider a center clipper. Center clipping is a useful technique in calculating speech pitch 
periods using the autocorrelation method [14, pages 150-154]. Samples having an absolute value larger 
than a given threshold are reduced in amplitude by an amount equal to the threshold, while those having 
an absolute value smaller than the threshold are set equal to zero. centerClip :: Float -> Signal -> 
Signal centerClip t xs ffi if t>O then let gx I X > t ffi X -t I x<-t =x+t I otherwise = 0 in map g 
xs else error "centerClip: threshold <= 0" The "let ... in ...'" construct is an expression whose value 
is that of the expression following the keyword in, given the local definitions following the keyword 
let. Median Filtering A median falter is useful in image processing because it removes noise but doesn't 
smear edges the way a linear low-pass filter does. The filter operates by moving a small window along 
the signal and outputting the median of the samples within the window. We now define a function mediaaf 
to perform median filmring. The function takes two arguments. The first specifies the length of the window 
over which the median is to be calculated; if the first argument is n, then the length of the window 
is 2n + 1. The second argument is the signal to be filtered. The calculation involves maintaining an 
internal state which is a pair of buffers. The first buffer contains the 2n + 1 samples over which the 
median is to be calculated. The second buffer is the same set of samples but in sorted order. The first 
buffer is needed to know which sample value to drop from the window when a new sample value is obtained, 
and the second buffer is used to quickly obtain the median. The function ledianf initializes the buffers 
and then invokes an auxiliary function medianf ' 429 type Buffer = [Float] medians :: Int -> Signal 
-> Signal medlanf n.x$ - medianf' n (we, sort ws) xrest where (We, xrest) m splitAt (2.n+1) xs medianf' 
:: Int -> (Buffer, Buffer) ~-> Signal -> Signal ledian:f' It ( _, s) [] = [s!!rt] medianf' n (xO:xbuf,s) 
(xn:xrest) = s!!n : yreat where new_state I (xbuf ++ [xn], insert xn (s \\ [xO])) yrest = medianf' 
n new.state xrest The above definition makes use of two functions not provided by the Standard Prelude, 
but which are easily defined: sort which sorts a list, and insert which inserts an item into a sorted 
list at the proper position. Summary In this paper we presented an introduction to the lazy functional 
language Haskell and showed that it could be a useful tool for prototyping digital signal processing 
algorithms. The examples showed how Haskell encourages software reuse and how programs often readily 
follow from an equational description of the desired output. We saw that Haskell programs are often quite 
short, making it an excellent tool for rapid prototyping. Acknowledgment The author would like to thank 
Mark Jones of Yale University for his careful review of this paper. References <RefA>[1] D. Turner, "An overview 
of Miranda," in Research Topics in Func- tional Programming (D. A. Turner, ed.), pp. 1-16, Addison-Wesley, 
1990. [2] R. Bailey, FunctionalProgramming with Hope. Ellis Horwood series in computers and their applications, 
.ELlis Honvood Ltd., 1990. [3] J. Backus, J. WtlIiams, and E. Wimmers, "An introduction to the programming 
language FL," in Research Topics in Functional Pro- gramming (D. A. Turner, ed.), pp. 219-247, Addison.Wesley, 
1990. [4] P. Hudak and J. H. Fasel, "A gentle introduction to Haskell," ACM $IGPLAN Notices, voL 27, 
May 1992. [5] R Hudak et al, "Report on the programming language Haskell, a non-strict, purely functional 
language, version 1.2," ACM SIGPLAN Notices, vol. 27, May 1992. [6] A.J.T. Davie, An Introduction to 
Functional Programming Systems using HaskM/. Cambridge Texts in Computer Science, Cambridge Univeristy 
Press, 1992. [7] J. Hughes, "Why functional programming matters." in Research Top ics in FunctionalProgramming 
(D. A. Turner, ed.), pp. 17-42, Addison- Wesley, 1990. [8] J.P. Scldin, "In memorium: Haskell Brooks 
Cun'y," in Perspectives on the History of Mathematical Logic (T. Drucker, ed.), pp. 169-175, Birkh~user, 
1991. [9] R. Bird andP. Wadler, introductiontoFunctionalProgramming. Pren-tice Hall international series 
in computer science, Prentice Hall, 1988. [10] B. J. MacLennan, Functional Programming: Practice and 
Theory. Addison-Wesley, 1990. [11 ] C. Reade, Eler,~nts of Funct ;onal Programming. International Com- 
puter Science Series, Addison-Wesley, 1989. [12] A. Oppenheim and R. Schafer, Dig;tal SisnalProcessing. 
Prentice-Hall, 1975. [13] .J.G. Proakis and D. (3. Manole, kis, Digital Signal Processing: Prin- ciples° 
Algorithms, ar, d Applicado~s. Macmillan, second ed., 1992. [14] I... R. Rabiner and R. VI. Schafer, 
Digital Proce csing of Speech Signals. Prentice-Hall Signal Processing Series, Prentice-Hall, 1978. 
430   
			
</RefA>