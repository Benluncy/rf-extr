
 An Interactive Graphics Editor for Document Preparation by V. Joloboff Bull Corporate Research Center 
 BP 68 38402 SAINT-MARTIN D'HERES Cedex -FRANCE Abstract This paper describes an Interactive graphics 
edl- tor for deslgnlng lllustratlons to be inserted in documents (diagrams, flow-chartst functional 
schemas, ...). The maln feature of thls editor is the possibility to establish relatlonshlps between 
graphics objects at creation time. Those rela- tlonshlps are retained for further use In edltlng operations. 
The editor has been Implemented on a PERQ machine running the Perq Operating System. I. INTRODUCTION 
 Graphics language Is divided Into different Idioms, each corresponding to a particular techni-cal or 
professional area, for example the Idiom of technical drawing in mechanics, the Idiom of VLSI design 
in computer technology. All graphics belonging to an Idiom have a similar layout because they rely on 
common semantics A graphics editor can provide greater help to its users if it knows about them. This 
is why there are mainly specialized graphics editors, each de- voted to a particular idiom. As document 
preparation Is becoming an Important application in computer science, we investigated the graphics idiom 
for document preparation. The range of this idiom is not easy to determine but we mean by document preparation 
graphics, all gra- phics designed for illustrating text In business administration or in graphical design 
(diagrams, flow-charts, etc ). One would imagine that this kind of graphics could be readily designed 
with a "general purpose" editor [Grafedit[, yet we belle- ve that one should take advantage of the proper- 
ties of document illustrations for the design of a specific "document preparation" graphlcs editor. 
Permission to copy without fee all or part of this material is granted provided that the copies are not 
made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. &#38;#169; 
1983 ACM 0-89791-123-7/83/012/0045 $00.75 This Idea of graphics for documents was originally explored, 
to our knowledge, in the MarkUp system [MarkUp[ developed at Xerox PARCo MarkUp worked within the pencil 
and rubber metaphor to Insert drawings into documents in the Press File format [Newman]. But there was 
no underlying representa-tion of the graphics that could be used by the editor for further manipulations. 
This paper pre-sents an interactive editor In which the graphical designs are modelled by an abstract 
representation Incorporating some of the document graphics semantics It turns out that the following 
principles are re-levant to the design of document graphics : document graphics are two-dimensional diagrams 
and objects in these graphics are common geome- tric figures (circles, triangles). The editor should 
know about elementary geometry In order to help users In their design ; aesthetlcs are more important 
than mllllmetrlc precision. The editor should Incorporate rules for 'pretty deslgn'. For example if the 
user draws an arrow between two rectangles, the sys-tem should perform such functions as centering and 
alignment automatically. objects In document graphics have strong rela-tionships (relationships between 
positions or dimensions). For example text boxes should be aligned horizontally or vertically The editor 
should allow specification for relationships among objects ; document graphics are frequently modified. 
This Implies that the edltor be fully interactive, that Is, everything done Is questionable and the answer 
Is immediate. In the graphics world thls implies three requirements : any object drawn can be freely 
:  . deleted  . moved  . modified   It should be easy to point at objects ;  relationships among 
objects are predicates  that should be always verified during manipu-lation. 45 We have already developed 
in our laboratory an in- teractive editor for mathematical formulas [Oulnt]. The successful experience 
we gained from the formulas editor led us to the same approach : to deflne an abstract representation 
for graphics objects and operate through this representation. The maln advantage of this approach Is 
that users operate in a "what you see Is what you get" manner, meanwhile the system is working on a data 
structure which reflects the semantics of the edl- ted objects. Thls means that the editor actually 
knows more than the user sees, and can use this knowledge to alleviate the user's task. The editor has 
been implemented on a PERQ personal computer, with the following equlpment : - a blt map screen (1024 
x 768) with hardwired Raster-Op. The reader may refer to [Rosenthal] for a discussion about Raster-Op 
graphics sys-tems versus GKS [GKS] ; - a magnetic table on which a small device called 'puck' slldes. 
The puck has four buttons that can be pressed Independently ; - the editor is implemented in extended 
PASCAL from Carnegie-Mellon University [PASCAL], and Is running on the Perq Operatlng System. The paper 
is illustrated with figures, gathered In the appendix. Most of those figures have been pro-duced using 
the "hardcopy" command, and printed on a Canon laser printer. The paper first describes the user interface 
of the editor and then the underlying representation. 2. USER INTERFACE  2.1. Getting Started When 
the user starts running the editor, he (she) Is presented with a screen as shown In Figure I. The lowest 
part of the screen consists of a commu- nication window. The mlddle part of the screen is the graphics 
wlndow. The upper part consists of : - a menu llne at the very top of the screen ;  - a brush menu 
(in French PINCEAU). This window is crossed by a line drawn with the current brush width ;  - a font 
menu (In French FONTES). Three fonts are avallable called small, usual, and big ;  - a line style menu 
(In French STYLE DE TRAIT). 6 styles are allowed. The brush, font and style menu are called the parameters 
windows In the sequel ;  - the command window which will specify the actual active command ; - the 
puck representation window. Thls window shows four black squares representing the four buttons on the 
real puck. Pressing a particular button is interpreted according to the current meanlng specified In 
the window. JQUIT TEXTE LIGNE l~iIil~ml~l~ PRTATE LIEN FIGURE CCIMMANDE I Figure I  The operator is 
then prompted for defining the graphics window (if reading from a file, the win- dow is defined automatically). 
This window Is the clipping window for subsequent drawings. Then the operator may choose one of the 
mode from the menu line, using any of the puck buttons. The- re are eight posslbllitles : - quit ; - 
text box processing (in French 'TEXTE') ; - open curves drawing (in French 'LIGNE') ; polygon drawing 
(in French 'POLYGONE') ; - closed spline curves drawing (in French 'PATATE') ; - relationship manipulation 
(in French 'LIEN') ; - figure (window) management (in French 'FIGURE') ; - command mode (in French 
'COMMANDE') to execute operations on graphics (copy, delete, move, edit). 46 AS soon as a mode Is selected 
a Pop-Up menu ap-2.2. Drawing pears in the active window. This menu contains all possible commands within 
the correspondinq mode. The different commands for drawing curves (one Figure I shows the menu associated 
with the Poly-command for each common geometric shape) make it gon mode. Once the operator has selected 
a posslble to take full advantage of the editor's command, it appears in the command window knowledge 
about simple geometry. For example, only ("Rectangle" in fiqure 2). From now on, the user three points 
are necessary to enter a may apply fhls command as many times as he (she) parallellogram, since the fourth 
one is computed wishes. by the editor. To exit from this status, he (she) may either When creatlng an 
object, one may establish rela-click another mode in the menu line or recall the tionships with existing 
objects by pointing at pop-up menu. those objects, F gure 3 shows the puck buttons when in drawing mode. 
The choice of e pop-up menu for selecting a com-mand was not the best.., In the next release we IQUIT 
TEXTE LIGNE POLYGDN'E I~LIEN FIGURE EOMMANDE I are preparing s all commands will appear permanent- I 
PINCEAU 1 ~ ~ONTES J ly in the command menu. ,.,,, Gros At any time, the operator may click a parameter 
window to change either line style, font, brush ........ Cercle meme po int la vert icale wldth, or filling 
pattern (in the next release). In Figure 2, the operator has clicked the brush window to increase brush 
width. The puck window shows how to increase (decrease) line width by ei- ther I or IO points. IQUIT 
TEXTE LIGNE ~4mi'~I~ PATATE LIEN lFIGURE COMMANOE ........ .. Rectsngle -18 I Fig ure 3  The operator 
has drawn a rectangle and an isocele- se trlangle. Now he has selected the closed curve mode (PATATEi 
to draw a circle. The editor is wai- ting now for the center of the circle and the puck window offers 
the following choices : -'Exact', -'Same Point' (in French "Meme Point"), -'Horizontally' (in French 
"A l'horlzontale"), -'Vertically' (In French "A la vertlcele"). That Is possible to establish a relationship 
bet- Figure 2 ween one exlsting point in the graphics and the new point which is to be entered next. 
To determi- ne the already existing point, the editor consi- ders the nearest object from the cursor 
when one 47 puck button is pressed and the nearest point wi- thin that object. The relations hip depends 
upon the clicked button. According to the button pressed the result will be the following :  - 'Exact': 
the entered point Is at the actual cur- sor position (no relatlonshlp) ; - 'Same Point' : The entered 
polnt Is at the same location as the existing polnt ; - 'Horizontally' or 'Vertically': The new point 
is to be aligned vertically or horizontally with the existing point. But there still exists one degree 
of freedom to set the point definitively. So the editor displays a new cursor (a black box) projecting 
the real cursor onto the specl- fled horizontal or vertical line and waits for a final click. IQUIT 
TEXTE IIIIII~I~POLYGONE PRTATE LIEN FIGURE CDMMANDEI .,,, Gros ~FYLE DE TRA-~ R1 .... +.icale ----~./ 
.... t U- /L F ig ure 4  In figure 4, a triangle has been drawn first and the user now wishes to draw 
an horizontal line segment whose right end is vertical to the tri- angle left corner. To do this, the 
user switched to line segment mode, entered the left end point of the segment and then picked the horizontal 
op- tion near of this point. Thus, he is asking for a horizontal segment. The puck window now shows the 
two remaining options 'Exact' and 'Vertically'. The black box cursor is shown at the location of the 
segment extremity, but the operator can still select this extremity to be set vertically to the triangle 
vertex by cllcklng around, and the final result is shown In Figure 5. IQUIT TEXTE LIGNE POLYGONE PATATE 
LIEN FIGURE _- /L Figure 5 The relationships set when drawlng are saved Into the abstract representation 
that the edltor builds meantlme. They will be subsequently used when ap- plying commands, as explained 
later on (~ 2.6). 2.4. Text Boxes Since our Idiom is document preparation, we need a great flexibility 
for text box processing. Text mode is devoted to this purpose. Most of the gra- phlcs edltors provide 
facilities for placing text within graphics, but they do not permlt further editing of this text, which 
Is absolutely necessa- ry for document preparation. When entering text mode, the lower window of the 
screen becomes the text edl~or wlndow, Unfortuna-tely the standard text editor on the Perq Opera-ting 
System cannot be called within such a predefined wlndow. So we deslgned a mlnlmal edltor whlch is not 
as comfortable as deslred. 48 Withln the text editor, the user may apply any command for typing and 
editing text. When it is flnlshed (quit command from the text editor), the operator Is asked to show 
a box on the screen whe-re the text is to be placed. The text box is drawn with the current parameters 
: the frame box is drawn with the current llne style and the current llne width, and text is displayed 
wlth the current font. Note that the invisible llne style allows text to be dlsplayed even though the 
surrounding box does not appear. The commands available in text mode offer different posslblltles for 
dls- playing the text inside the frame box : free, Justified, centered. The available software for text 
processing on the P.O.$ did not allow us to quickly design what we actually deslred. We think that the 
user should show a rectangle In the graphics for text Insertion. Then the text editor would be called 
within this wlndow. The text editor should manage fonts, justlfylng, and doing everything relevant to 
text. Since we did not want to spend much time on developing software for text processing, we chose 
an intermediate solution... Once a text box Is Inserted, it ls always possible to modify Its contents, 
uslng the modify command within the text mode. The text editor Is then cal- led again, its buffer being 
filled with the con- tents of the text box. After editing, the contents are redisplayed. If the box Is 
too small the ope- rator Is asked to create a new frame and the old one Is deleted. 2.5. Relationships 
 The relationship mode (In French LIEN) allows re-lationships other than positional ones to be created. 
There are four available commands within this mode 'See', 'Glue', 'Arrow', and 'Destroy'. 'See' materializes 
all relationships wlth blinking lines and circles among linked objects or points, so that the user can 
see them. 'Glue' allows several objects to be glued together, or unglued. When gluing (unglulng), ob-jects 
can be pointed at and they are added to (removed from) a list. 'Arrow' provides for arrows to be drawn 
between objects. 'Destroy' ensures the destruction of a relations- hip other than a glue relatlonship. 
 The arrow command wai,s for the user to click the puck. Then it takes the closest point to exlsting 
graphics as the origin of the arrow. The next puck depresslon will determine its extremity. The closest 
point to existing graphics may not ha- ve been deflned explicitly by the user, slnce the editor automatically 
builds points according to the geometric nature of flgure (this is detailed In § 3.2). For example, 
if the cursor is along the edge of a polygon, the middle of the edge will be chosen as the end point 
of the arrow. If the cursor is near- by a circle, the nearest point on the circle will be selected,.. 
 1Quit TEXTE LIGNE POLYGONE PRTRTE LIEN FIGURE .. Jl~ Gros ~LE DE T::IT I I PINEEAu [ SBuvRr I J ( 
une autre boite centr@e une boite de texte I verticalement h ..... E Figure 6  Figure 6 shows a tree 
text consisting of two boxes and two arrows starting from a point. The text boxes have been set with 
an horizontal relationship. 2.6. Commands The four commands 'Move', 'Delete', 'Copy', 'Edit' are used 
to act on existing objects within the graphics. They all operate on a selection of ob- j acts in the 
same way. Interpretation of the the puck buttons for a com-mend Is as follows (flgure 7) : - Select 
in box (in French "Select Bolte").  - Select nearest (in French "Plus proche").  -Cancel selection 
(in French "Annule selection"). -Do It, 49 The 'select in box' option Is the same as in DP [DP], the 
operator Is required to show a rectangle and everything inside this rectangle is selected. The Do It 
option executes the command  IQUZT TEXTE LIGNE POLYGONE PATRTE LIEN FIGURE lll]ilIIB ii| I PINCEAU 
I ~ FONTES ~=wJa==mm Gros ,.,,, ........ Deplacer Annul, sel. Deplactlr _re boite centr@e  verticalement 
\ l une boite de texte Figure 7 iHove When moving, the selection is moved and follows the cursor on 
the screen until a puck button Is pressed. This movement is achieved accordlng to the non-blinking, "moving 
over" algorithm as des- cribed in [Loveluck]. Pressing a button stops moving. All objects are examined 
and possibly re-drawn such that all the relationships are still true : - Glued objects or objects with 
'same point' rela- tionships are moved from the same translation vector. - Objects linked by horizontal 
or vertical rela- tionshlps are moved if necessary: the transla- tion vector is projected onto an horizontal 
(vertical) axis. If this projection is not null, then objects linked by a vertical (horizontal) relationship 
are translated horizontally (vertically). - Arrows are deleted and re-drawn. Figure 7 shows the action 
of moving one of the text boxes of figure 6 (both text boxes are linked by a horlzontal relationship 
and two arrows have been drawn towards them) Figure 8 shows the final result of the movement : the second 
text box has been automatically moved and the arrows redisplayed.  IQUIT TEXTE LIGNE ,,POLYGONE PRTRTE 
LIEN FIGURE lUl~ I PINEEAU I I normal FONTES j~ p, llt  I une autre boite centr@e une boite de texte 
verticalement F ig ure 8 When movinq a single object, the operator is first asked to point at a speclflc 
polnt of the object. This point is called the anchor point. When movlng the object, the cursor stays 
bound to this polnt and the puck window again offers optlons : 'Exact', 'Horizontally', 'Vertically', 
'Same point'. The option chosen is applied to the new position of the anchor point. Thus it Is posslble 
to add new relationships to an object when moving it. Copy Copying is the same as Moving except that 
it imme- diately creates a copy of the selection. Figure shows, the process of copying a text box. Unfortunately, 
the anchor point is not vlslble since the cursor is not visible on hardcopies.  50 IQUIT TEXTE LIGNE 
POLYGONE PRTRTE LIEN FIGURE IW|~llmi~]~  Ip,,CEAU I normal 'ON,E,=== motll ........ ~opier Meml point, 
la vertic=le Persona[ Personal Iv 7 Workstation I DataBase Machine ~ Personal Workstation Persona[ 
I Workstation ersona[ orkstation Data Base  Machine F igure 9  Delete, Edit Delete simply deletes 
the current selection, next deletes arrows pointing to objects in the selec- tion and then destroys 
pending relationships. Edit only allows for modifying the layout of cur- rent selection The selection 
is then re-drawn with the current parameters. We did not introduce the possibility of modifying the 
shape of objects since it would take a longer time for the user to modify an object rather than create 
a new one. 2.7. Figures The editor works on one window at a time. Each window Is known as a figure A 
figure has a name and the editor can switch back and forth among figures. The figure mode in the menu 
allows figures to be processed. During a session, the editor maintains a library of figures. Commands 
available in the figure menu are : - Create or Kill a figure, - Insert, - Modify, Read, Write on 
disk storage. "Insert" allows insertion Of figures into other ones. Whenever a figure is inserted into 
another one, it is considered as an object by the Impor-tlng figure and the insertion mechanism is the 
sa-me as for the copy command : the user is first required to set the posltlon of the anchor point in 
the inserted figure, then he must indicate the location of the anchor in the graphlcs while mo- ving 
it, In figure 9, the "data base machines" are actually two insertions of the same flgure. The "Modify" 
command switches the editor to opera- te on the specified figure. An interesting feature Is that insertions 
are sa- ved in the abstract representation. Thus when mo- dlfylng a figure all modifications through 
this figure are applied wherever this figure has been inserted. To Insert a figure that should stay in- 
dependent from the original, one should copy the original figure, because copies are independent of the 
original object. 3. DATA STRUCTURE  The described implementation relies on the manage- ment of graphlcs 
units, defined by a clipping rectangle, and known as figures. A figure is an abstract data structure 
reflecting the semantics of the visible lay out. The display on the screen Is always obtained by interpreting 
this representation. Users never act directly on the display, though they thlnk they are. All directives 
from users are interpreted by the editor as modification of the underlying representation, which is displayed 
again. The process of editing is actually a closed loop : - read user directive, - modify the abstract 
representation, - display modifications from the previous graphics. The advantages of this abstract 
data structure are : - it allows for storing relationships amongst ob- jects ; - it provides a very 
compact disk representation. The storage requirements of a figure are far  less than a pixel storage, 
even when the struc- ture is complex ;  - it provides a devlce-independent kernel of the editor The 
only device dependent part of the editor is the displaying code.  The drawback of this approach is 
the need for a greater amount of computing power. A fiqure is a set of objects associated with a set 
of relationships. 51  3.1. Objects operator, but many of them are added by the system automatically 
;  An object Is characterized by : The idea involved here Is the same as in the PIC -Its position in 
the figure ; system [Kernlghanl, where all objects are cha- racterlzed by the 8 cardinal points and 
rela-  -a set of points which belonq to the o'~ect tlonshlps can be established between polnts. In 
our system, the number of points Is dependent  -a line width and a line style ; upon the object type 
(segments have 3 points, circles 13) and most of these points are compu- - a class. ted from the geometric 
nature of the object. For example, the operator needs only provide two Our notion of class Is slmllar 
to the Smalltalk points for an lsocelese triangle, and four more class [Smalltalk]. A class determlnes 
the proper-points are computed ; ties common to all objects from the class and the set of routines used 
to operate on them, particu- - a 'spllne' flag. In the set of points characte- larly routines to create, 
remove, draw and erase rizing an object, only some of them are Involved them. In the computation necessary 
for drawing the curve,  So far, we distinguish three classes : For example, only two points In the 
set of  -open curves : this class contains all curves points representing a circle are necessary to 
 starting at one point in the object set and en- draw the circle. dlng at another one. This class is 
divided Into two subclasses according to the curve type : straight line, spllnes ;  3.3. Relationships 
 -Surfaces : all objects from the surface class Relationships are binary relationships between two 
have a contour and may be filled with some  objects, except for the 'glue' relationship. There pattern. 
This class divides into two subclasses  are three klnd of blnary relatlonshlps : : polygons and splines. 
The polygon class enco- des geometric knowledge about common polygons ;  - positional : this relationship 
involves two points, one In each object, linked vertically,  -Imported : this class groups all objects 
whose horizontally or as same point ; Internal properties cannot be directly manipulated. For the 
graphics editor, Imported  -dimensional : this relationshlp has not yet been objects are deflned by 
a clipping surface con- Implemented. It would bind the distance between talnlng the object and an 'expert'. 
The expert two points within each object by a fixed carlo, Is the process that must be called for modifica- 
 for example the longer edge of a rectangle and tions of the object. the shorter edge of another rectangle 
in ratio I (equal) ; In our current implementation, the only kind of imported objects Is text box. 
A text box is clip- arrow : there exists an arrow from one point of  ped by a rectangle and the expert 
associated with - the first object to one point of the second.  text boxes is the text editor. The 
glue relationship consists of a llst of ob- In further extensions of the editor, we shall in-  jects 
which have a constant distance among their troduce other kinds of imported objects namely : origins. 
 - Images obtained from a scanning device, CONCLUSION -mathematical formulaes from our maths editor. 
 We presented in this paper an Interactive graphics 3.2. Points  editor Intended to be used In the context 
of docu-ment preparation. Two goals directed our work : A point Is an entity which belongs to an object. 
 The notion of point ls very Important for -we thought It was absolutely necessary that the relationships. 
When the operator clicks for a po- system be really Interactive, that Is, every- sltional relationship, 
the system slmply searches thing done could be undone or modified. In the set of all points within 
the flgure, the  nearest from the cursor and the relationship Is -It seemed to us that the important 
polnt concer- established with this point. A point may have re- nlng document illustration was the 
numerous re- lationships with other points and it has some pro- latlonshlps between objects, and that 
the editor pertles of its own : should maintain consistency of those relatlons- hips ;  - Its coordinates 
within the object ; The experience we galned from the formula editor -a 'computed' flag. Within the set 
of points cha-  led us to the same approach : define an abstract racterlzlng an object, some of them 
have been  representation of graphics and operate through entered by the operator, but many of them 
are  this representation. This representation plays the 52 same role as the 'display file I or 'segment' 
no-tion used in standard graphics systems like GKS [GKS]. But we wanted to incorporate into the ab-stract 
representation the semantics of the kind of graphics used for document illustration. Thus we have defined 
an abstract representation capturing more than purely graphical information. This con-cerns particularly 
relationships between objects : they are captured into the representation and their consistency is maintained. 
 Also we have encoded naive geometric knowledge to help users in the design of curves commonly used In 
document illustration.  We intend to generalize this approach to build a generalized document preparation 
system that will Integrate several kind of data : text, images, graphics, formulas and tables. The 
underlying abstract representation also favo- rlzes the development of a proper user interface, though 
this is still not easy to design. The system is still experimental, but early expe- rience with a few 
users leads to contradictory results. Some would prefer a confirming click when establishing a link among 
points, other users hate it... Thus it seems that the user interface should be parameterlzed when startlng 
the editor. Those Interface options would be used to set flags which would drive towards different user 
interfaces. Acknowledgement I do wish to thank Pierre Martin, a student who contributed significantly 
to this project. BIBLIOGRAPHY <RefA>[DP] Giuse D. Drawing Package Reference Manual Carnegie Mellon Unlversity 
Computer Science Department, 1983 [GKS ] Graphical Kernel System Functional Description ISO DP 7942, 
1982 [Grafedit] Magnenat-Thalmann N., Thalmann D., Larou-che L., Lorrain L. Grafedit : An interactive 
general purpose graphics editor Computer and Graphics, Volume 6, Number I Pergamon Press, Great Britain, 
1982 [Kernighan-81] Kernighan B.W. PIC : A language for typesetting graphics In Proc. ACM SIGPLAN SIGOA 
Symp. on Text Manipulation Sigplan Notices 16/6 June 1981  [Loveluck ] Loveluck J.M. The PERQ workstation 
and the distributed computing environment ICL technical journal, November 1982 [Harkup] Hewman W.N. 
Markup User's Manual Alto User's Handbook Xerox PARC, 1979  [Newman] Newman W.N. PRESS : a file format 
for document re-presentation and printing Proceedings of Journ&#38;es Manlpulation de documents INRIA, 
Rennes, May 1983  [PASCAL] ICL Perq -Pascal Guide international Computers Limited, May 1982  [Ouint] 
Quint V. An interactive system for editing mathe- matlcal documents In Integrated Interactive Computing 
Systems North Holland Publishing Company, 1983 [Rosenthal] Rosenthal D.S. Managing Graphical Resources 
Computer Graphics, Volume 17, Number I, 1983  [Smalltalk] Smalltalk 80 BYTE August 1981 53  </RefA>
			
