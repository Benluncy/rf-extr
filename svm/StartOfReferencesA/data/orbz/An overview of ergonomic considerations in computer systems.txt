
 An Overview of Ergonomic Considerations in Computer Systems M.L. Schneider, F.B. Arble, N. O/son, and 
D. Wolff Sperry Univac Blue Bell, Pa. 19424 The ergonomic considerations in computer systems in- volve 
an examination of hardware and software com- ponents. This paper examines some of the topics that must 
be considered in the design of a useful system. The state of the art in this area is underdeveloped. 
Thus, there is little hard data upon which to base design decisions. Introduction There are three major 
aspects in every data processing environment: hardware, software, and people. People utilize the computer 
components, employ the system to solve their problems, and interpret meaningfulness in both the input 
and output. As technology becomes more sophisticated, it is also becoming less expensive, resulting in 
the computer forming an integral part of the working environment. Software applications are increasing 
in complexity, sophistication and scope. However, as the components become more sophisticated and more 
commonplace, there will be an increasing number of people interacting with these systems who are technologically 
naive. Accountants, printers, and clothing manufacturers who have developed their own terminology and 
methods for their particular occupations come face to face with data-processing specialists, who maintain 
a different vocabulary, and who have a different approach to the very same task. We all know the sometimes 
unpleasant outcome of such a situationl Computer systems can be considered as tools that aid others in 
performing their jobs. Not only is there a need for the availability and reliability of these services, 
but there is also a need to consider the eventual users of the system. In addition to the traditional 
hardware and software engineering, system designers need to consider the interaction of humans with computers 
in their design. Solutions to these problems are available from the field of ergonomics, which is sometimes 
known by its older term, human factors. Ergonomics is the study of the anatomical, physiological and 
psychological aspects of people in their working environments. It is concerned with the relations between 
people and their occupation, equipment and environment. The study of how users interact at various levels 
with a computer in order to perform a task, or human-computer interaction, is a subset of ergonomics. 
Maximal efficiency, productivity and job satisfaction in the TOTAL human-computer system are desired 
objectives. The computer, therefore, is only one component of this system. A user-centered design of 
the system assumes the needs of the user as the starting point (Shackel, 1979). This ensures that the 
design requirements of the system, and the facilities provided, appropriately match the user's tasks, 
or work structure. Knowing the users' needs includes their physical requirements, such as the ability 
to detect, --and therefore be annoyed by, --certain refresh rates on CRTs. It also includes their psychological 
requirements, such as how people respond to certain types of motivation. While it is important to understand 
the requirements that would apply to all users, it is also necessary to recognize the differences between 
users. These differences could be due to differing amounts of experiences, motivation, and the requirements 
of different tasks. Therefore, it is important to know your users. Knowledge obtained from the study 
of human-computer interactions can be used to improve the user interface, which is defined as 'any hardware 
or software feature with which any human may have to interact' (Shackel, 1979, p. 302). The user interface, 
therefore, includes everything from CRT displays and operating system commands, to documentation, and 
to maintenance assistance as well. Those involved in the study of human-computer interaction recognize 
the problems involved in providing appropriate user interfaces, and promote the consideration of human 
needs in computer system design. HARDWARE ERGONOMICS The understanding of human behavior, computer behavior, 
and the interaction of these two is still not enough to guarantee success. However. The acceptance of 
a particular interface or performance on a particular system may be affected by the workspace or the 
environment in which the human-computer system exists. Much of the well-publicized occurrence of eyestrain 
and fatigue associated with CRT operation may be due to poor workplace design. Desk heights not appropriate 
for keyboarding also contribute to fatigue. Improper CRT placement may result in excessive glare and 
reflections in CRTs, causing eyestrain and headaches. Excessive noise in the work environment is not 
only distracting, but also contributes to psychological stress. Teletype printers often operate above 
acceptable noise levels. This is one problem area that the laser printer technology hopes to eliminate. 
An additional noise problem, occasionally found in CRTs and in your TV set at home, is the emission of 
a high-frequency noise. This sound is extremely annoying and illustrates the importance of the consideration 
of human physical characteristics. People can only hear frequencies in a limited range (20HZ to 20KHZ), 
and it may be possible to change the frequency of the emitted noise so that it is no longer heard even 
if it is difficult to eliminate completely. The workplace criteria for paper-based clerical tasks are 
really not much different than the environmental range permitted for the CRTterminals. It istemptingly 
easy, therefore, to merely place the terminal into the same location as the paper-based activity. 117 
 Unfortunately, however, this near-correspondence in physical limits is not true for the total working 
environment when the terminal operator is added to the equation. Among the factors which now must be 
considered are: The types and locations of illumination sources as related to both the CRT and source 
documents  Height relationships for keyboard and CRT  Prolonged versus casual usage of CRT  It is 
also important to note that, although introduction of a CRT terminal is probably accompanied by a host 
of changes in job content, methods, and procedures, the terminal is the most noticeable new ingredient. 
There will be a tendency on the part of the user to consider the terminal as the cause of discomforts 
that may actually stem from the job itself. Although modular office designs offer efficient utilization 
of floorspace, those designs that isolate each operator in a barrel-like enclosure are undesireable. 
If windows are present, it is important to avoid placing the terminal so that the operator faces the 
window. A right-angle orientation, with the window at the left, is preferred, but placing the operator's 
back to the window is not as desirable. An angular compromise between these two orientations would also 
be acceptable. A workspace of at least 48" in width should be provided, with a depth sufficient to allow 
the keyboard (if separate) to be angled from the CRT. Assuming a nominal 21/2 '' keyboard height at the 
homerow location, a 26" high worksurface is recommended for any but casual activity. A shelf, or preferably 
a drawer, should be provided for storage of both personal and job-related items. The CRT screen and source 
documents will typically end up somewhere in the range of 16 to 22 inches from [he operator's eyes, which 
is well within comfortable close-up accommodation. Some people with bifocals, however, may have difficulty 
because all or part of the screen will be above the visual field delimited by the close-up correction. 
This results in extra movement of the head to bring the screen into view. Full reading glasses rather 
than bifocals may be a solution, but the inability to view distant objects without removing the glasses 
is a considerable annoyance. Working with CRT terminals is not in itself any more fatiguing than equivalent 
keypunch, typewriter or other clerical activity. In any machine-paced environment, however, it is desirable 
to provide for scheduled operator breaks. A two-hour work period followed by 10-15 minutes rest time 
should be satisfactory. Well-formatted source documents eases the operator's task. Coordination of forms 
layout with CRT screen presentation is also recommended. Holding the source document in the hand or special 
device permits a more comfortable viewing angle. If the task cycle is long enough to warrant the extra 
insertion/removal time involved, use of a document holder can be of great help, especially if both hands 
are needed for keyboard activity. This also reduces the amount of head movement involved when scanning 
from document to screen. SOFTWARE ERGONOMICS Interactions with the hardware components of a computer 
system primarily involve physical features of the human being, while those with the software components 
involve, in addition, cognitive skills. Cognitive skills include the ability to process and remember 
information, and make decisions. Screen design, for example, involves both perceptual and cognitive skills. 
The number of items in a screen lay-out affects both the amount of time and the number of errors in conducting 
a visual search to extract information. If the number of items becomes too large, it may also cause cognitive 
overload, or the inability to integrate information and make decisions (Ramsey and Atwood, 1979). When 
people process the information provided by the computer, it usually requires decisions about the subsequent 
input that they will supply to the system. This interaction results in communication, or a dialogue, 
between the human and the machine. There are, however, some inherent difficulties in this process. One 
basic difference between humans and machines is the number of input and output channels (the methods 
of information transfer, such as visual, auditory, taste, etc.) available to each. People use all their 
senses to acquire information, and can transmit information both verbally and in writing. Computer input/output 
channels are fairly limited at this time. The speed of input/output is also very different for humans 
and machines. Humans acquire and transmit information very slowly compared to the capabilities of machines. 
The actual processing of information also differs. People are relatively slow in processing information, 
but they are quite flexible in changing situations. Although computers process information extremely 
fast, their flexibility is quite limited (Shackel, 1979). Learning to use a system is a consideration 
in its design. When a system is easy to learn, user acceptance is improved and perceived ease of use 
increases. The ideal approach is one that actually leads the user to employ the software properly; there 
would be a high probability that a user would correctly guess or intuit how the system operates. There 
are several design characteristics that have been shown to increase learnability: Congruence  Consistency 
 Simplicity  Congruence means that a system operates in the way a user expects, based on past experience. 
The psychological basis for this is a principle known as Transfer of Training (Gage and Berliner, 1973). 
According to this principle, if a person is faced with a new situation that is similar to a previous 
one, and the required action is similar to what was required in the previous one, learning is accelerated. 
This is positive transfer. On the other hand, if a person is faced with a new situation that is similar 
to a previous one, and the required action is different from that required in the previous one, learning 
is inhibited because an old habit must first be unlearned. This is negative transfer. When performing 
the overall design of the system, it is important to provide functions that duplicate the "old" way of 
doing things. It has been observed that users still tend to view screens of information as pages of output, 
scanning the text rather than employing the more powerful searching commands. The principal of an analog 
between the old and new methods should be followed, whenever possible, in output formats. The terms employed 
for objects and operations should also be familiar to the user. Early in the design process, it is advisable 
to determine how users may expect a system to operate, which will be based upon their past experiences. 
All other considerations being equal, it is advisable to maintain operations that are the same as those 
previously followed. If this is not expedient, negative transfer may be partially reduced by clearly 
denoting the differences between the operating characteristics of the old, familiar system and the new 
one. Consistency means that a function, which a user would perceive belonging to a set of essentially 
similar functions, operates in the same way as all the other functions in the set. The psychological 
basis for this is referred to as principle learning, i.e., if one learns a single principle that governs 
a number of similar operations, learning of the individual operations is expedited. An early step in 
system or machine design should be to identify functions a user would be apt to group into sets and determine 
what operational principles would govern each set. Simplicity means that when operating a system the 
user need attend to only a small number of discrete elements at any given time. Psychological studies 
of memorization generally indicate that the more discrete things that have to be memorized at the same 
time, the slower learning occurs. Usually, if the items are broken into blocks of a small number of items, 
learning proves to be easier. Other studies on attention generally show that if potentially distracting 
elements are present in a learning situation, learning is hindered. The designer should keep two questions 
in mind as a guide in the development of each segment of a system: "Is the user being faced with more 
information than is really required? .... Can the procedures be broken down into reasonably small modules?" 
Two factors which have been shown to have definite negative effects are fatigue and anxiety. Fatigue 
reduces the ability to attend to a task. The most common causes in office environments are: eyestrain, 
e.g., from watching a display due to poor contrast, small characters, poor resolution, or reflection; 
muscle tension from assuming a position that stresses a muscle or, by engaging in tasks that require 
bending or stretching to perform; and noise pollution which produces a general insidious physical debilitation. 
No matter how motivated a user may be or how well designed the system is, if the user must operate under 
fatigue-inducing conditions, acceptance of the system will be hindered. Anxiety is a painful psychological 
state that occurs when an individual feels a situation which should be under control is not. It tends 
to cause task avoidance in the individual. Frequent symptoms include increased distractibility, daydreaming 
and "goofing off." Some common anxiety generating situations are: when success of an operation is dependent 
on highly automatic procedures and no operator override is provided; when inadequate or confusing information 
about one's operational status is received, e.g., through ambiguous or intimidating error messages; or 
when no user aids are provided for an infrequently used or highly complex procedure. Familiarity with 
a system often prevents a designer from recognizing its potential for producing anxiety. Pretesting with 
users is necessary to become alert to these aspects. Of course if one has the attitude that users should 
think and act the same way as the designer does, it will be virtually impossible to appreciate the stress 
users actually experience. Whereas hardware ergonomics addresses a relatively static situation, software 
ergonomics involves a dynamic, changing environment (Schneider, Wexelblat, and Jende, 1980). A software 
interface that satisfies first-time or occasional users may be unsuitable for more experienced individuals. 
Thus, it is important to identify not only the initial user population of the software system but also 
the "steady-state" users. In order to be able to do this, the command and option utilization together 
with the mode of operation employed by a typical user must be determined. It has been demonstrated in 
a command language that ten commands (about 25% of the total available) accounted for over 90% INPUT 
of those acted upon (Huckle, 1980). This phenomna has also been observed in an analysis of machine instructions 
executed in computers. It is not unreasonable that these observations will remain valid in other software 
systems. It is important to identify these subsets since they can influence presentation techniques. 
For inexperienced users, self-documenting statements or commands, user assistance features, and a high 
degree of prompting improve software ease of use. The concept of self-documenting commands is not new; 
it was one of the prime factors in the design of COBOL. The use of full-word identifiers satisfies, in 
part, this requirement. Yet, the term used to denote an object or operation must be carefully considered. 
It must relate not only to the task performed, but conform to the accepted vocabulary of the application 
area, and should not be confused with other terms in the command reperetoire. User assistance enables 
an individual to obtain information regarding the functional capabilities of the software, command syntax, 
statement semantics, and system usage. At the present time, assistance systems are local to a specific 
segment of software, but in user-oriented applications they should be examined on a system-wide basis. 
This requires a high degree of cooperation between the different software segments; this is possible 
in large application systems. Prompting takes a variety of forms (Martin, 1973). A dialog is one of the 
basic prompting structures. This technique can be best applied when the information to be entered can 
not be predetermined. Although there is a tendency for a user to supply a single item of data to the 
prompt, based upon psychological studies in information chunking, multiple, related items should be requested. 
Menus are best applied when the responses can be determined in advance. Care must be taken in the placement 
of menu opportunities; people read from top to bottom, thus the most frequently used responses must be 
placed at the head of the list. This requires a pilot study of the system in order to optimize the menu 
choices. Once a menu has been fixed, it is unwise to modify it; individuals become used to the position 
of items in the menu. By scanning a known segment of the menu, a user will increase the speed of item 
choice. Fill in the blanks is a form of prompting that relies on a full screen presentation. This approach 
can vary from a simple format applicable to data entry (only column headings are provided), to commands 
with the keywords and default conditions displayed. The frequency of command utilization is important 
in employing this technique. The number of keystrokes (including tabs) used in this approach can be large. 
Thus, fill-in-the-blanks should be used for infrequently used commands or as an intermediate step in 
developing expertise in a traditional statement oriented system. The more experienced user will require 
a terser form of command structure. Abbreviations are one method that can be used to reduce keystrokes. 
Although there have been few studies in abbreviation construction, the latest (Moses and Potash, 1979) 
indicates that contraction or truncation of words allows the user to most easily form the abbreviation 
from a written word. The use of positional parameters produces highly terse constructions (Gilb and Weinberg, 
1977). If it is assumed that default values are provided by the system, a useful order begins with those 
parameters that can not be defaulted. They are followed by the most commonly overridden defaulted parameter; 
the last parameter is the most commonly defaulted. There is no consensus by experts on the maximum number 
of positional parameters that should be used in any statement; the frequency of use, relation between 
parameters (chunking), and amount of information required in the command may be factors. Single letter 
options provides the shortest possible constructions. This approach is best used in statements with a 
very high utilization rate. tn the choice of command names or multiple character responses, a number 
of ergonomic factors should be considered in order to reduce errors. The following list is not inclusive, 
but can serve as an indication of the topics that should be considered in a good design. They have been 
derived from studies in visual perception and motor skills; these areas are not generally considered 
in software interface design. Errors can arise from the transposition of characters. This becomes increasingly 
important when short constructions are used. For example if there are two commands; one for editing, 
the other for deletion. And, if they are abbreviated: ED and DE, then it is possible to delete a segment 
of text, by transposition, when the intention was simply to edit it. Keyboard considerations impact the 
rate of errors and speed of entry. In touch typing, the closer the keys are to the home row, the lower 
the error rate and the faster the speed. Shifted keys are slower; this includes control and escape sequences. 
Confusion can exist between two similar characters. This is normally considered in the zero vs. "'oh" 
case. However, it can also be a factor in (, .), (' "), and (: ;) among others. Critical keys should 
be located in different segments of the keyboard. For example a delete key should not be located near 
the transmit key. The easiest key to find on any keyboard is the space bar, it is unique in both shape 
and location. This makes it useful as a general purpose separating delimiter. Software responses are 
a potential source of user dissatisfaction. All commands should have adequate responses, both for the 
successful and unsuccessful comple- tion of the function. In the latter situation a good error message 
should produce, whenever possible, a description of the error, the source of the error, and methods for 
its solution (if possible). More advanced users may only require a notification of the error. The location 
of error messages is dependent upon the application. An important requirement is that errors be easily 
recognized, and associated with their cause. The format and location (either adjacent to or separated 
from the source of the error) will depend upon where they are displayed, who identifies them, where and 
when they are identified, and how they are corrected. When a process is successful it is important to 
notify the user of this fact. A user when new to the system has little confidence in its ability to perform 
correctly. By having these messages, the user can rely on the system to perform the correct task; this 
increases confidence (Hilgard and Bower, 1966), and from the user's perspective makes the system easier 
to use. Software ergonomics does not require that all operations be easy to perform. Some functions or 
their options have a critical nature. They may produce drastic results if executed. These commands must 
be made "hard to use" if they are to be provided to a general user. The common method of protection is 
the use of an enabling instruction. Other techniques can include the lack of abbreviations, the lack 
of default values (for the entire command), or a different statement syntax. When a user is prevented 
from making errors in an unobtrusive manner, the system becomes easier to use. Conclusion Ergonomics 
can provide guidelines for the design of useful systems. By understanding the needs of the potential 
user group, having the necessary ergonomic data, and a willingness to be placed in the position of the 
target user, a designer can begin to produce quality systems, both hardware and software. However, two 
basic problems continue to exist: the lack of well documented and conducted software studies  the failure 
of designers to acquire an ergonomics background  The first can be overcome by increased research or 
documentation of of successful systems. Cooperation between industry and universities produces both practical 
and theoretical results. Once the field is understood (parts are now known) they should become part of 
the education of computer scientists in the future. 123  ACKNOWLEDGEMENT The authors wish to thank 
Maureen Frein for her assistance in the preparation of this manuscript. References <RefA>Gage, N.L. and Berliner, 
D.C. (1973), Educational Psychology, Rand McNally College Publishing Co. Glib, T. and Weinberg G.M. (1977), 
Humanized Input, Winthrop Publishers Hilgard, ER. and Bower, G.A. (1966), Theories of Learning, Appleton-Century-Crofts 
Huckle, B.A. (1980), Designing a Command Language for Inexperienced Computer Users, in Command Language 
Directions (D. Beech ed.) North Holland Publishing Company: New York, N.Y. Martin, J. (1973), Design 
of Man Computer Dialogues, Prentice-Hall Inc. Moses, F.L. and Potash, L.M. (1979), Assessment of Abbreviation 
Methods for Automated Tactical Systems, U.S. Army Research Institute for the Behavioral and Social Sciences, 
Technical Report 398. Ramsey, H. and Atwood, N.E. (1979), Human Factors in Computer Systems: A Review 
of the Literature (Technical Report SAI-79-111 -DEN). Englewood, Colorado: Science Applications, Inc., 
September, 1979. (NTIS No. AD-A075679). Schneider, M.L., Wexelblat, R.L., Jende, M.S. (1980), Designing 
Control Languages from the User's Perspective, in Command Language Directions (D. Beech ed.) North Holland 
Publishing Company: New York, N.Y. Shackel, B. (1979), The Ergonomics of the Man/Computer Interface, 
in Man/Computer Communication, Vol. 2, Infotech International Limited: Maidenhead, England. 124</RefA>  
			
