
 Analysis of superposition of Streams into a Cache Buffer Robert J, T. Morris I.B.M. Almaden Research 
Center, San Jose, CA 95120 rjtnn~almaden.i bm.com Abstract 1 Introduction We consider the superposition 
of address streams into We consider models which can be used to predict the a cache buffer which is managed 
according to a Least behavior of a cache buffer when it is subjected to the combining, or superposition, 
of I streams of requests, Recently Used (LRU) replacement policy. Each of the each of which has a known 
stack depth distribution. streams is characterized by a stack depth distribution, This cache buffer is 
assumed to be managed according i.e., the cache hit ratio as a function of the cache size, a Least Recently 
Used (LRU) replacement policy, and if that individual stream were applied to a LRU cache. We seek the 
cache hit ratio for each stream, when the from this point on will be referred to as a buffer. While a 
combined trace of the I streams, or timestamped tracescombined stream is applied to a shared LRU cache. 
This of each of the streams, contains the complete informa­problem arises in a number of branches of 
computer tion needed for an exact analysis, stack depth distribu­science, particularly in database systems 
and processor tions provide a much more compact, manageable, and understandable represent ation. Traces 
can be processed We provide two techniques to solve this problem and into these stack depth distributions 
with a single pass of demonstrate their effectiveness using database 1/0 re-the data [1]. 1/0 device 
drivers have been constructed, quest streams. The first technique is extremely simple for example [2], 
which automatically collect this infor­and relies on an assumption that the buffer is well­ architecture. 
mation for individual streams. If it is desired to collect mixed , The second technique relaxes this 
assumption such information for a number of streams in a man­and provides more accurate results. We evaluate 
the ner which is more compact than a trace, but to retain performance of the two techniques on realistic 
data, the identity of streams, then these stack depth distri­both in a lab environment and a large database 
instal-butions must be collected on an individual basis. If one then wishes to design buffering strategies 
which combine lation. We find that the first simple technique provides more than one stream into a buffer, 
then the problem of accuracy which is sufficient for most practical purposes. characterizing the superposed 
stream must be solved. It By investigating sources of error and trying various im­should be clear that 
further assumptions must be made provements in the model we obtain some insight into about how these 
two streams will be combined in order the nature of database 1/0 request streams. to obtain the effect 
of the superposed stream, however as we will see in the experimental results section a sim- Permission 
to copy without fee all or part of this material is ple assumption can be made which results in effective 
granted provided that the copies are not made or distributed for direct commercial advantage, the ACM 
oopyright notica and the predictions, at least in certain database environments. title of the publication 
and ite date appear, and notice ie given that copying ie by permieeion of the Association for Computing 
We now illustrate by example the practical appli-Machinery. To copy ctherwise, or to republish, requires 
a fee cation of solving this superposition problem. The first end/or apacific permission. 1993 ACM SIGMETRICS-51931CA, 
USA example arises when separate (non-timestamped) traces @1993 ACM O-8979 ~.58~.X/93jOOO~ /0229 ...$J 
.50 or depth distributions are collected, on different ma­chines or at different times, and the effect 
of a combined workload or stream needs to be analyzed for purposes of system re-configuration or analysis. 
The second exam­ple concerns the allocation and sizing of buffer pools. It is relevant to the tuning 
of database management systems (e.g., [5]) in which different objects (e.g., ta­ bles, indexes) may be 
assigned to separate buffer pools to improve performance. Given a set of streams, it is relatively easy 
to solve an optimization problem which determines the size of each member of a set of individ­ ual buffer 
pools, one for each stream, which maximizes the overall hit ratio, subject to an overall buffer size 
constraint 1. However, this approach cannot simply be applied to a set of streams consisting of a stream 
for each object, since this would imply a number of buffer pools which is larger than can be practically 
implemented on a system, or would result in a poor degree of resource sharing and therefore poor performance. 
The question arises as to how these streams can be combined to share a smaller set of (perhaps 2 or 3) 
buffer pools. By solv­ing the superposition problem efficiently, we can pro­vide procedures which determine 
which streams should be combined to optimize performance. This problem, including extensions to the superposition 
method de­scribed here, are described in [7]. Consider I streams, S1,. . . . S1, having stack depth distributions 
dl(n), . . . , d~(rz). That is, when stream i is applied to a LRU-managed buffer, the probability that 
the current reference finds the element that it references at depth n (n = 1 is the most recently used 
element in the buffer) is CZi(n), i = 1,...,1. Note that di(n) is a defective distribution in that it 
may not sum to unity: elements that are have never previously been accessed will be assumed to be found 
at an infinite stack depth. For modeling purposes, we will assume that the streams actually obey the 
stack reference model, that is, they are stochastic processes which choose their next reference according 
to independent samplings of the stack depth distribution. This is one of several simple models for reference 
streams, and it has been reported, for exam­ ple [3], that this model tends to be quite successful in 
capturing temporal locality of references within a trace, and is superior to the so called independent 
reference model. 1See [6] for a method for miss ratios which m-e a convex func­tion of buffer size, [7] 
for a method in the general case. There does not seem to be much in the literature on this superposition 
problem. One paper is [4] in which a model is developed based on a variation of the in­dependent reference 
model and used to compute the effect of composition of workloads. This model is in­tended for use in 
transaction processing environments in which data accesses are quite random, and is not rec­ommended 
for workloads in which sequential access or looping is present. The form of the models adopted in [4] 
are limited to modeling streams in which the hit ra­tio curves (cumulative depth distributions) are concave 
(equivalently the miss ratio curves are convex). Because the models of the present paper are based on 
the stack reference model rather than the independent reference model, we will not confront this limitation. 
An analy­sis of processor caches containing two types of elements (instruction and data) is described 
in [6], and simple models are given to determine equilibrium conditions and optimal allocation. In order 
to carry out the analysis it is necessary to make some assumptions about how the streams com­bine, or 
mix, into a single stream. We will assume that a I-way Bernoulli process chooses the stream for each 
access. Thus, according to an independent random trial, with probability Ai, the element accessed is 
drawn from stream i. Throughout the paper we will also adopt the steady state assumption that none of 
the buffer posi­tions are empty. 2 A Simple Model We now describe a simple model based on flow conser­vation 
which will be shown to capture the essence of the effect of combining streams. We will define the data 
elements referenced by stream i as type i elements and, for simplicity, we assume that elements referenced 
by the individual streams are disjoint. The rate of flow into the buffer of type i elements is the type 
i miss rate, which can be approximated by Ai (1 D{ (Xi)), where Di(n) = d (l) + . . . + di(n) and Xi 
is the mean steady state contents in the buffer of type i elements. This is an approximation since the 
population of type i elements in the buffer is a random variable, and the mean may not be integral, but 
as reported below this is not a significant source of error. The rate of flow of type i elements out 
of the buffer is taken to be z~nl ~j (1 -Dj (Xj))Xi/N, where N is the size of the fi- A transparent 
special case occurs for I = 2. In this nite buffer. This is an approximation of the miss rate of case, 
the balance equations become all types, multiplied by an estimate of the probability of a type i element 
being replaced. This estimate SS­ Al(l  D1(X1))(N Xl) = Az(l D2(N X1))X1. sumes a well-mixed buffer 
property, namely that the type of element of the buffer that is replaced is chosen in proportion to the 
buffer population of each particular type. Under a LRU replacement strategy, this is equiva­lent to the 
assumption that the population distribution by type in the last buffer (least recently used) position 
coincides with the entire buffer distribution. This is a mean-value version of a similar assumption made 
in [6]. We will have more to say about this assumption, and correct for it, in the next section. Now, 
over the long run, the rate of inflow to, and outflow from, the buffer of type i elements must balance 
so we have that I A~(l Di(Xi)) = ~Aj(l O(Xj))XJN, i = 1,. ..1, j=l or, I Ai(l Di(Xi))N/Xi = ~Aj(l O (Xj)), 
i = 1,..1. j=l These 1 nonlinear equations in I unknowns are easily solved numerically, since the right 
hand side is ir~depen­dent of i. It will also become clear that this solution is unique. To see how, 
define hi(z) = &#38;(l Di(z))N/z. For simplicity, extend the definition of Di () to allow any positive 
argument using any nondecreasing, continuous interpolation. Now we need to find C and Xl, . . . . X1 
to solve hi(xi)=c, i=l,...,l, and I Xi =N. E i=l Now noting that h~() is strictly decreasing (while 
pos­ itive), it has an inverse h; 1() which is also strictly de­ creasing and so the single equation 
~~=1 h; 1(C) = N is easily solved numerically for a unique C. Once C is obtained, the Xi are obtained 
from Xi = hj 1(C). The individual miss rate of stream i is then CXi/N, and its miss ratio is mi = 1 
Di(Xi) = CXi/(NAi). Ncjte that C has the interpretation of being the total miss ratio for the combined 
stream. The left hand side decreases, and the right hand side increases, in Xl thus resulting in an easily 
found unique solution. 2.1 Discussion While this model will be shown to be remarkably accu­rate for our 
database buffer management applications, it is worth discussing its sources of error. Besides the assumption 
of the stack reference model, errors in the model can arise from three sources: 1. The Bernoulli assumption 
of mixing of the streams. 2. The use of means Xi as constant buffer contents in the miss rate expressions. 
 3. The well-mixed buffer assumption that the last element in the LRU buffer is populated according to 
the entire buffer population.  The main purpose of the first assumption is to provide that arriving 
references see the time average contents of the buffer, and so that flow balances on a per-arrival basis. 
A minor violation of this assumption can be tol­erated without damaging the accuracy of the model, but 
if a stream of one type of references is active for so long that it significantly upsets the equilibrium 
con­tents of the buffer poor accuracy will result. For the database buffer problems we consider below 
consisting of, for example, index and data accesses to a buffer man­ager, this does not turn out to be 
a significant source of error, even though we do observe noticeable bursts of index-or data-only access. 
The second assumption seems, on the surface, capa­ble of introducing errors. The model can be enhanced 
to constitute a multidimensional Markov Chain, and cor­rect for fluctuation in the buffer population 
by type. In doingthis,theBernoulli mixing assumption is explicitly needed for the process to be Markovian. 
We found neg­ligible effect on any of our answers by using this Markov Chain model, and therefore we 
will not take up space in this paper for its description. Apparently, for all our database workloads, 
there is not a great deal of fluctua­tion in the buffer population (by type). Furthermore the apparent 
validity of the mixing process mentioned in the last paragraph further contributes to non-volatility. 
It is interesting to note that in [6], in the different context of mixing of instruction and data streams 
into a proces­sor cache, relatively small variance in the occupancy of the cache by one of these entities 
was observed. The third assumption provided the greatest source of errors in our studies. As a simple 
idealized stress-test case, we constructed a uniform independent reference model test trace with 250 
distinct data elements chosen according to a uniform i.i. d. process for each of two types, and mixing 
probabilities Al = .9, AZ = .1. Note that this is a special case of the stack reference model. For a 
buffer of size 300, this resulted in an overall occu­pancy of the first type of 78%, whereas the occupancy 
in the last place in the buffer was 4470. Although this is an extreme case, it does cause the model to 
break down. This effect is corrected for in the next section.  3 A More Accurate Model We now present 
a more accurate model which obtains estimates of the population of each type of element at each position 
in the buffer. For an arbitrary data ele­ment D, let t(n) denote the type of the data element, i.e., 
the index of its originating stream. Consider a sec­tion of the buffer, consisting of positions 1, ..., 
j, (po­ sition 1 is the Most Recently Used end of the buffer) and occupied by data elements D1, . . . 
. Dj, where Dj is the least recently used. Let the currently arriving el­ement be denoted D. In order 
for the new arrival to cause a change in the buffer population, it must be that D#Di, i=l, . . ..j. A 
net flow of one element of type k into this buffer section then results if the additional conditions 
hold t(D) = k, t(Dj) # k. The corresponding conditions for a net flow of one ele­ment of type k out of 
the buffer are t(D) # k, t(Dj) = k. Thus the net inflow of type k elements into the buffer section for 
one arrival can be written Pr{D#D,, i= l,.., ,j; 4D) = k; t(Dj) # k}. But since arrivals are not dependent 
on buffer contents, this can be written Pr{D#Di, i= l,..., ~ lt(D)=k; t(Dj)#k}x Pr{t(D) = k} Pr{t(Dj) 
# k} =Pr{D#Di, i= l,... ,j 1 /t(D)=k; t(Dj)#k}x A~Pr{t(Dj) # k} The net outflow of type k from the buffer 
section due to arrivals of type m, m # k, can be written Pr{D#Di, i=l, . . ..j. t(D) =m; t(Dj)=k} =Pr{D#Di, 
i= l,... ,j 1 It(D) = m; t(Dj)=k}x AmPr{t(Dj) = k}. Now we make an independence assumption that the contents 
of each level of the buffer are independently populated. Flow balance can then be written Pr{D#Dj, i=l, 
. . ..j 1 I t(D) = k}hPr{t(Dj # k} =~Pr{D# Di, i=l,.. j-llt(D)=m}x rn#k AmPr{t(Dj) = k}. Let G~ (i) 
denote the probability that the buffer section 1,... , j is occupied by i type k elements, i = O, ..-, 
j. Define the related function p! to be the probability that position j in the buffer is occupied by 
a type k element. We can now write this flow balance (using the stack reference model) as  j ] h(l Pj)~Gj_l(z)(l 
 Dk(i)) i=o = p} ~ &#38; ~G~_l(i)(l -D (i)). m#k i=o This yields the direct expression We obtain the 
G;(i) expressions from the recursion G$(i) = Gf_l(i l)p$ + G~_l(i)(l p;), with the initial condition 
G$ (0) = 1. Thus, using the last two equations, p} can be calculated recursively in j. Note that these 
recursions require a total of O(IV21) operations in order to the compute p} distribution, k = 1,. ... 
I;j=l,..., N, Once the p$ values are obtained, we can compute the mean occupancies xk = ~~=1 p?. Although 
a dis­tributional analysis can be carried out, we have found it sufficient to obtain the miss ratio of 
stream i as m~ = 1 D~(xi). While we defer the results of this model to Section 4, at this point we will 
just report that for the test described at the end of Section 2.1, this model predicts the correct occupancy 
(4470) of the first type of element in the last buffer position. Experimental Results In evaluating 
the performance of these two methods, a number of database traces were used. These traces con­sisted 
of all the logical 1/0 requests placed by a database management system with its buffer pool manager. 
In these experiments, we will consider a simple partition of these requests into two types (streams), 
namely, re­quests for data pages and requests for index pages. These will be referred to as Types O and 
1, respec­tively. Traces were collected from two environments: a large commercial installation, and also 
from a lab sys­tem under the control of the experimenters. Two other commercial installations were also 
traced and studied, with similar results, The lab environment was purposely configured to be simultaneously 
running a large query application (which included repeated sequential scans of tables) and a large transaction 
application (which made random accesses to large tables). Each of the traces con­sisted of several million 
1/0 requests. As an indication of the advantage of working with stack depth distri­ butions rather than 
traces, the depth distributions were thousands of bytes in length versus hundreds of millions of bytes 
for the traces. Both sets of results are presented in the attached figures. Method 1 denotes the simple 
model of Section 2, and Method 2 the enhanced model of Section 3. It is seen that in both cases Method 
1 is quite accurate, in fact accurate enough for most practical purposes. Method 2 does improve the accuracy 
considerably. It is interesting to observe that in the commercial instal­ lation, the miss ratio curve 
is decidedly non-convex,2 so methods which are based on assumptions which imply convex miss ratio curves 
would not be applicable. It should also be noted that the accuracy of these meth­ods is lower at very 
low buffer pool sizes (note that buffer pools of less than 1000 buffers are rarely used in DBMS). This 
is because the Bernoulli mixing assump­tion is more of a problem for these small buffer sizes. In fact, 
eyeballing the traces, runs of several hundred of one type of access could be observed. This is sufficient 
to start to upset the equilibrium conditions assumed of the buffers in the model. 5 Conclusions A simple 
flow balance model based on the stack ref­erence model appears adequate to predict the effect of combining 
cache buffer streams, at least for the data and index streams in a database management system. The remaining 
errors in the model can be significantly reduced by using a model which takes into account pop­ulation 
distribution differences at various depths in the buffer. A more accurate analysis would need to ex­plicitly 
account for the combining process by assuming something more elaborate than Bernoulli mixing. This is 
pursued further in [7] for purposes of solving the op­timal buffer assignment problem described in the 
intro­duction. A rule of thumb that requires that: over a number of references somewhat less than the 
buffer size, the streams are mixed according to their long term pro­portions would appear to assure good 
accuracy of the present models. 6 Acknowledgements The author would like to thank T. G. Messinger and 
R. L. Mattson for collecting and post-processing the traces on which the experimental work was based. 
2since the abscissaof the graph is on a log scale, t~s tight not be immediately obvious, but is borne 
out by closer examination. : &#38; $ 0.4 0.3 + Exact Type O x Exact Type 1 Method 1 Type O 0 Method 1 
Type 1 0 Method 2 Type O 0.2 a Method 2 Type 1 ,. 0.1 0.( 24 I 2048 I 4096 1 8192 I 16364 I 32768 I 6S536 
Buffer Size Figure 2: Miss ratio versus buffer size for a lab workload consisting of a mixture of transaction 
and query work. References <RefA>1992 ACM Sigmetrics and Performance 9$, New­ port, Rhode Island, pp. 251-252, 
June 1-5, 1992, [1] R. L. Mattson, J. Gecsei, D, R. Slutz and 1, L, IBM Research Report No. RC-17436, 
9/19/91. Traiger, EvaluationT echniques for Storage Hier­ [5] J. Z. Teng and R. A. Gumaer, Managing IBM 
archies, IB114Systems Journal, Vol.9, No,2,1970, 78-117. Database 2 Buffers to Maximize Performance, 
IBM Systems Journal, Vol. 23, No. 2, 1984. [2] B. Samadi, TUNEX: A Knowledge-based System for Performance 
Tuning of the UNIX Operating [6] H. S. Stone, J. Turek and J. L. Wolf, Optimal System, IEEE Transactions 
on Software Engi-Partitioning of Cache Memory, IEEE Transaction neering, Vol. 15, No. 7, July, 1989, 
861-874. on Computers, Vol. 41, No. 9, Sep. 1992, 1054­ 1068. [3] E. G. Coffman and P. J. Denning, Operating 
Sys­ [7] H. Levy, T. G. Messinger and R. J. T. Morris, Im­ tem Theory, Prentice-Hall, 1973. proved Performance 
of Database Systems by Buffer </RefA>
			
