
 Analysis of Queueing Network Models with Population Size Constraints Alexander Thomssian Burroughs Corporate 
Center for Performance Modeling  3519 West Warner Ave. Santa Aria, CA 92704  Abstract Queueing Network 
Models -QNM's with population size constraints and delayed blocked customers occur due to MultiProgramming 
Level -MPL constraints in computer systems and window flow-control mechanisms in Computer Communication 
Networks -CCN's. The computational cost of existing algorithms is unacceptable for large numbers of chains 
and high population sizes. A fast approximate solution technique based on load .concealment is presented 
to solve such QNM's. The solution procedure is non-iterative in the ease of fixed rate Poisson arrivals, 
while iteration is required in the case of quasi-random arrivals. Each iteration requires the solution 
of a single chain network of queues comprised of stations visited by each chain. We then present an algorithm 
to detect saturated chains and determine their maximum throughput. A fast solution algorithm due to Reiser 
for closed chains is also extended to the case of quasi-random arrivals. The accuracy of the proposed 
solution techniques is compared to previous techniques by applying it to a test case, reported in the 
literature, and a set of randomly generated examples. 1. Introduction Queueing network models -QNM's 
have been used extensively in the modeling and analysis of computer systems and networks. The very low 
computational cost and, adequate accuracy of QNM's in predicting the performance of multiprogrammed computer 
systems has been generally established. Permission to copy without fee all or part of this material 
is granted provided that the copies are not made or distributed for direct commercial advantage, the 
ACM copyright notice and the title of the publication and its date appear, and notice is given that copying 
is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires 
a fee and/or specific permission. &#38;#169; 1984 ACM 0-89791-141-5/84/008/0202 $00.75 and Delayed Blocked 
Customers Paul Bay T.R.W. Defense Systems Group One Space Park Redondo Beach, CA 90278 A class of QNM's 
known as product-form or separable QNM's [2], has been of particular interest due to their low solution 
cost made possible by the convolution and Mean-Value Analysis (MVA) algorithms and their variations [15] 
(referred to hereafter as exact methods). Solution time and space requirements can be reduced substantially 
in QNM's when chains visit a small subset of the stations in the network (sparseness property) and/or 
chains are clustered in certain parts of the network (locality property) by using the Tree Convolution 
Algorithm -TCA [13]. In addition, fast approximate solutions have been developed for product- form networks 
[1, 5, 6, 15, 21, 25], when the cost of exact solutions is excessive, but the QNM does not have any special 
properties. A specialized iterative method was developed in [7] to analyze QNM's with large numbers of 
remote and local chains in the context of a distributed system. Assumptions resulting in analytical tractability 
of QNM's, do not allow for representation of certain important characteristics typical of many systems 
[4]. In this paper we are interested in developing efficient solution methods to take into account blocking 
constraints representative of fixed memory size in multiprogrammed computer systems and fixed population 
constraints due to window flow control mechanisms in Computer Communication Networks CCN's. In a multiprogrammed 
computer system (window flow controlled network) when the maximum MPL (window size) is reached, jobs 
(messages) are queued pending activation. This situation differs from the case with population size constraints, 
where blocked customers are lost [10]. Generally, solutions taking into account customer blocking are 
necessary when one is interested in user level performance measures (rather than the performance of a 
subsystem, e.g., the communication subnet). Approximate solutions of Single Chain Population Constrained 
Queueing Networks -SCPCQN's are readily obtained using a combination of hierarchical decomposition and 
flow-equivalence techniques [15, 17]. The queueing network is substituted by a Flow-Equivalent Service 
Center -FESC (state-dependent exponential server}. The resulting system can be represented by a single-dimensional 
birth-death process when the arrival process is random or quasi-random and solved accordingly. However, 
the application of this technique to Multiple Chain Population Constrained Queueing Networks MCPCQN's 
is not as straightforward. For the MCPCQN problem the solution can be obtained by first solving the network 
consisting of a set of K chains and M stations (K ~-~ IK[ and M ---- ]M I are the number of chains and 
stations) for all possible population combinations n ~--- [nl,...,nK] up to the maximum population size 
vector W ---~ [W.,...,W. ] using an exact method The resulting 1 /% composite queue with throughputs 
Tk(n), 0 ~ n ~ W and V k e K, is then substituted for the subnetwork. A multi-dimensional Markov chain 
incorporating the arrival process to the network then need be constructed and solved for steady-state 
probabilities (queue-length distribution) to compute the performance measures for the system. The drawback 
of the above approach is that the time and space requirements for the solution of the Markov chain (for 
the higher level model) grow rapidly with the number of chains in the QNM (for a detailed discussion 
the reader is referred to [22]), making the approach infeasible except for very small models. For this 
reason several approximate solution methods have been proposed for efficiently solving such models. Brandwajn 
[31 and Menasce and Almeida [18] (B-MA, for short) independently developed a non-iterative approximate 
solution technique for solving MCPCQN's. Their approach is based on a mmanifold application of equivalence 
and decomposition" [3]. The approximate solution technique requires the solution for throughputs Tk(n 
) for all 0 _~ n ~. W and V k e K. This requirement alone incurs a computational cost K proportional 
to O(KM I-I [Wk+l ] ), when the k~---I throughputs are obtained using a general purpose exact method. 
A second approximate solution technique based on iteration was independently developed by Brandwajn [3] 
and Lazowska and Zahorjan [16] (B-LZ for short). The technique is similar in spirit to [3, 18] in that 
the multi- dimensional Markov chain representing the MCPCQN is solved "one-dimension-at-a-time1. The 
approach differs from the first approach primarily in that it doesn't require complete decomposition 
(i.e., computation of throughputs for all possible states). Specifically, in computing the queue-length 
distribution for chain j, we use throughputs obtained by solving a multi-chain QNM where the effect of 
the other chains is represented by their mean active population, Ti(nl,n2,...,ni,...nK) , 4 J 1 ~ nj 
~ Wj. Note that for n. > W. the throughput J J remains constant at the value for W.. Since the mean 
J queue-lengths for other chains are unknown a priori, an iterative technique is suggested. The iteration 
is started by setting all other chain populations at a reasonable value, e.g., min(Wk, nk) , V k e K, 
where ..~ is obtained ignoring population size constraints. The computational cost of the above technique 
is largely dependent on the method used for obtaining the throughputs --Ti(nl'n2'""nJ'"'nK)" Exact solution 
K techniques would incur a per-iteration cost of O(KM l'I k-----1 [W, +1] ). Variations of exact techniques 
have to be use~ when other population sizes are non-integral, resulting in increased cost [8]. Computational 
cost is reduced significantly by using either of two approximate techniques based on MVA. The first technique 
is the Bard-Schweitzer algorithm [1, 25] which has computational complexity of O(K2M), where M is the 
number of queues (servers) and K is the number of chains. The second is the Linearizer algorithm, an 
improved version of the Bard-Schweitzer algorithm developed by Chandy and Neuse [5], which gives more 
accurate results at slightly higher computational cost of O(KVM). Assuming that W k -~ W, V k e K, per- 
iteration cost is then O(K3MW) and O(K4MW) when using the Bard-Schweitzer and Linearizer algorithms, 
respectively. The accuracy of the B-LZ solution technique was verified in 13 , 16] using simulation. 
It tends to be less accurate than the first technique and its accuracy depends on the underlying algorithm 
used, i.e., greater accuracy is obtained using the Linearizer versus the Bard-Schweitzer approximation. 
While the above two methods provide substantial savings over "exact m decomposition, it is clear that 
for MCPCQN's consisting of a large number of chains computational cost can still be quite significant. 
These costs become even more significant when the maximum population constraint (e.g., MPL for high capacity 
transaction processing systems) for each chain is quite large. We illustrate this point in Table 1-1. 
We first give the computational complexity of the algorithms discussed above, followed by the computational 
complexity of the three procedures we present in Sections 4 and 5. For those algorithms which are iterative, 
the cost given is per iteration. Computational costs are expressed in terms of: K ~ IKI -~- number of 
chains, M = IMI ~-~ number of stations, [Hkl ---~ H k ---- H ---~ number of stations visited by chain 
k (assumed to be equal), and W k ~-~ W ----- population constraint of each chain (assumed to be equal), 
V k ~ K. Consider a QNM consisting of 32 closed chains (i.e., virtual routes) and 64 stations (i.e., 
channels), similar to the network studied in [13]. However, we now assume that there are external arrivals 
to each chain and there is blocking due to flow control window size constraints. We first consider a 
QNM in which arrival processes to all chains are fixed rate (for which we propose Procedure "1"), and 
then consider a QNM in which arrivals to all chains are quasi-random (for which we propose Procedures 
"2 = and =3°). Letting H ---~ W ----3, gives the computational costs shown in the last column of Table 
1-1. As can be seen in Table 1-I, Procedures 1, 2, and 3 achieve considerable reductions in computational 
cost. Note that for this particular example (with sparsity and locality properties) the application of 
TCA would result in substantial savings in computational cost especially when using the B-MA solution 
method (refer to [13] for details). However, the solution cost would still be significantly higher than 
the proposed procedures. The need for such efficient algorithms to solve very large QNM's with population 
constraints (particularly large QNM's of CCN's) provides the primary motivation for presenting the computational 
procedures in this paper. We present a solution procedure for solving such QNM's at a very low computational 
cost compared to the aforementioned techniques and with acceptable accuracy. As with the above approaches, 
our technique reduces computational costs by decomposing a multi-chain problem into a set of single chain 
problems. Interaction at stations between interfering user chains is taken into account by using load 
concealment [17], which has been previously used in solving various QNM's arising in computer system 
modeling [12, 17, 26, 27]. It is interesting to note an "inverse' problem. Due to the high cost of solving 
closed QNM's with large numbers of chains, there have been several attempts to replace closed chains 
with open chains with equal throughputs [19, 21]. In [11] the accuracy of such methods is estimated by 
varying the delay in a 'source" node and it is shown that this approach becomes relatively inaccurate 
when this delay tends to zero.  Algorithm Computational Cost Numerical Example B-LZ with I 0 (K4~) 
per iteration 0 (2.0 108) Linearizer I per iteration .................................................................. 
 B-LZ with Bard-Schw I I 0(K3~) per iteration 0(6.3 per iteration 106 ) B-MA I K O(KM~ [Wk+l]) 0(3.8 
 1022) k=l .................................................................. Algorithm I I O(KWH)excluding 
iteration 0(2.9 102) I or Pros la, when required .................................................................. 
 Algorithm 2 I 0 (KWH) 0 (2.9. 10 2) I per iteration per iteration .................................................................. 
 ^Igorithm 3 [ O(K2W2H) 0(2.8 10 4 ) [ per iteration per iteration .................................................................. 
 Table 1-1: Comparison of Computational Costs for a Large QN model Our paper is organized as follows. 
In Section 2 we present a generalized MCPCQN model and define the necessary parameters. In Sections 3 
and 4 we present procedures for solving several variations of the basic MCPCQN. In Section 5 results 
obtained using our procedures are compared against results obtained using the approximate solution techniques 
mentioned earlier and against simulation results when available. We present our conclusions in Section 
6. 2. Multiple-Chain Population Constrained Model The general MCPCQN model used in this paper consists 
of a set of M service stations and a set of K job-types or chains [15]. The number of stations and chains 
is denoted by M and K, respectively. Each chain is specified by it's arrival process to the network and 
it's service demands at each service station in the network. Service times at all stations are assumed 
to be exponentially distributed with parameter Pkh -----Ph' h e Hk, where H k is the set of stations 
visited by chain k. These assumptions are necessary when the queueing discipline at all stations is FCFS 
and can be relieved for a PS discipline. Service demands are given as Dkh ----- Vkh Pkh' where Vkh is 
the mean number of visits of a chain k customer to station h. In the case of quasi- random arrivals, 
this is relative to one visit to the source. In the context of computer communication networks Vkh ---~ 
1, assuming loop-free routing algorithms. Arrival processes are either Poisson with arrival rate k k 
for chain k or quasi-random. A quasi- random process might be due to a set of sources (interactive terminals), 
which is typically specifigd as follows, kk(nk) ---- (L k -nk) / Z k where L k is the number of sources 
(terminals) and Z k is the mean source delay (user think time), and n k is the number of outstanding 
requests in chain k. Lastly, Wk, is the population constraint parameter for chain k. 3. Solution Procedure 
for a Multiple Chain QNM with Population Constraints and Fixed Rate Arrivals In this section we present 
a procedure for solving a MCPCQN in which all chains are characterized by fixed rate arrivals according 
to a Poisson process. Our method is based on using decomposition such that the queueing network is represented 
by a FESC for each chain. The key point is to represent the effect of all other chains in a suitable 
manner. It is a well-known result in mixed networks, that in solving closed chains the effect of all 
open chains can be substituted by their contribution to station utilizations [15]. This result was proven 
in [19] in solving a mixed QNM for studying congestion control in a tandem channel network with interfering 
.traffic and has been derived by others under more general contexts [14, 20, 24]. The derivation based 
on MVA is particularly simple and is given in the Appendix for the case of open chains sharing a single 
server. We apply this result by "inflating m the service demands of the chain under consideration by 
the utilizations of all other open chains at all stations visited by the chain, i.e., the load concealment 
method [17]. The modified service demands of this chain are then used to compute the throughput characteristics 
of its corresponding FESC. This is an approximation since the other chains are not truly open (i.e., 
the distribution of the number of customers is affected by population size constraints). The utilizations 
due to other chains will remain unaffected, however It should be noted that if none of the chains are 
detected to be saturated then Procedure 1 is non- iterative. However, if a chain k is classified to he 
saturated then the contribution of chain k to station h utilization is Ukh ----- Dkh Tk(Wk) , h E H k. 
We are assuming that a closed chain can be treated as an open chain [11]), which is just a reapplication 
of the load-concealment method we used for open chains with population-size constraints. The detection 
of chain k saturation is tantamount to invalidating results obtained for all preceding chains. It should 
he noted that false initial classifications are possible, e.g., a chain is classified to be saturated 
due to the fact that station utilizations by other chains, which are later determined to be saturated, 
were overestimated. Also Tk(Wk) is an under-estimate for all chains classified tentatively to be saturated, 
except for the last chain to be detected saturated (in this case it is an overestimate). An iterative 
scheme can be adopted such that the iteration stops when consecutive iterations result in no chain re-classifications 
from the previous iteration and the effective chain throughputs converge. When none of the chains is 
saturated, W k -~-- W and H k ---- H, V k e K, and excluding the computation of state probabilities (Pn'S) 
and performance measures, the computational cost is O(KHW). The previous procedure becomes inefficient 
when solving MCPCQN's consisting of many saturated chains since several iterations will be required. 
The following procedure obviates the need for iteration through the use of a one-pass algorithm for classifying 
chains. This procedure may he invoked only when Procedure 1 detects saturation. In turn, Procedure la 
invokes Procedure 1 after resetting the throughputs of closed chains to their maximum value. Procedure 
1. Analysis of a Multiple Chain Population Constrained Queueing Network with Fixed-Rate Arrivals. Input 
the arrival rate to chain k, kk, V k e K, service demands for all chains at all stations Dkh , h e Hk, 
V k e K (H k is the set of stations visited by chain k), and the population constraints for all chains 
Wk, Y k e K.  Compute Ukh , the chain k utilization at station h, given by Ukh = k k * Dkh , h e Hk, 
V k e K (* Note: All chains have been implicitly classified to be unsaturated. *)  repeat  for V 
k E K do begin  Account for effect of other open chains by ainflating ~ service demands at the stations: 
D[h ~-Dkh / (1- U[h), where U[h -----j~l~h , h~ H k.  Obtain Tk(n), n = l,..,Wk, by using an exact method 
for solving chain k in isolation using D~ch, h ~ H k.  If )'k > Tk(Wk)' then classify chain as saturated 
(this classification is not final}, set )'k = Tk(Wk), and update Ukh = Tk(Wk) * Dkh, h e Hk, V k e K. 
Else classify chain k as non-saturated. (* Alternately call Procedure la as a co-routine the first time 
a chain saturation is detected *)  Use decomposition by substituting the set of stations visited by 
chain k {h e Hk) with a FESC with throughputs Tk(n), n ~-~ 1,...,W k. Solve the corresponding M/M/I model 
(with load-dependent server) for the queue- length distribution, Pn" Use following equations to obtain 
chain k  performance measures.  Mean number of customers in chain k: N k ~--- n~;0p n (1}  Mean number 
of customers blocked: m k ~--- ~ (n - Wk) Pn (2) n>W k  Mean number of customers active: nk = N'k" ~ak 
(3)  Mean throughput for chain k (this value is equal to k k unless the  chain is saturated): T k -~ 
)-~'k Tk(n)Pn, where ----" ~ Pn (4) n~l PWk n~_.W k Mean waiting time for ehain k using Little's law 
(should be ignored for saturated chains): D k -----~n k / T k (5)  Mean active time for chain k: A 
k ~--- n k / T k (6)  Mean response time for chain k (should be ignored for saturated  chains): R k 
~-N k / T k (7) end until (No chaine reclassified and convergence obtained on Tk'e) End of Procedure 
1. 206 Procedure la. Algorithm to Determine Saturated Chains in a MCPCQN with Fixed Rate Arrivals. Classify 
all chains to be saturated: S ~--- K, N ---- { }, where S and N denote the sets of Saturated/Non-saturated 
chains. repeat Solve closed QNM consisting of all S chains with the population size of each chain set 
to the window-size and their service-demands adjusted by the complement of the sum of utilizations by 
all non-saturated chains (none in the first iteration). Compute Ts(e), the maximum throughput for chain 
s, assuming all other chains are saturated. Use Linearizer or the TCA [13] to reduce computational cost. 
 for s e S do if )~s < Ts(e) then classify chain s as non-saturated: N = N U {s}, S ~--s-{s} until (All 
re~aining chains in the last pass were all classified to be in the same category)  if S ~ { } then )'s 
----" Ts(e)' V s e S (* Adjust chain throughputs for saturated chains *)  Call Procedure 1 with adjusted 
throughputs for saturated chains. Only active time is computed for such chains. Ignore statements with 
(*) when Procedure la is executed in conjunction with Procedure 1.  End of Procedure la. In case we 
have saturation we are in effect substituting a closed (saturated chain) in carrying out the computations 
in Procedure 1. This is in fact the 'inverse m problem noted in Section 1, which has been shown to have 
relatively low accuracy when the delay at the source station (equivalent to user think times) is negligible 
[13]. Validation results for Procedure 1 and la are given in Section 5. In Table 3-1 we illustrate the 
manner in which Procedures 1 and la determine whether a chain is saturated or non-saturated. The given 
classification sequences were performed during the solution of a QNM consisting of 4 chains and 5 stations, 
where all chains visit all stations, and Dkh ~ 0.5 time units, V k e K. Arrival rates are given by k 
I ~--- 0.40, )~2 ---~ 0.55, )~3 ~-~ 0.30, and k 4 -~ 0.45 arrivals/time unit. In Table 3-1 the letters 
mS' and "N m are used to form a classification vector (for chain 1 through chain 4) to specify whether 
the chain has been classified as Saturated or Non-Saturated, .respectively. As can be seen, each procedure 
begins with different initial classifications of the four chains, however, both eventually converge to 
identical classifications and produce the same performance results (not shown). Estimates of maximum 
throughput obtained for saturated chains compare very favorably against those obtained using the B-MA 
algorithm (e.g., typically errors of less than three percent}. 4. Solution Procedures for a Multiple 
Chain QNM with Population Constraints and Quasi-Random Arrivals In this section we present two solution 
procedures [Procedures 2 and 3) for solving a MCPCQN in which all chains have quasi-random arrivals (i.e., 
there are a finite number of sources with given source delays generating requests for each chain}. Both 
procedures rely on the decomposition and load concealment approach used in Procedure 1, however, since 
the arrival rate is variable it is not possible to compute a priori the utilizations due to chains at 
the stations, i.e., Ukh. Instead, a solution can be obtained by starting with an initial estimate of 
Ukh and iterating until convergence is obtained. 207 Algorithm 1 Algorithm la Classi-Classi-Step fication 
Comment fication Comment I  S S N N Chains 1 ~ 2 S S N 8 Initial saturation classified as check: chains 
1,2,4 saturated => iterate, saturated. Verity in next step. 2 N S N S Chains I &#38; 4 re- N S N S Chain 
1 re-classified classified => iterate. => verify classi-fication of saturated chains 2 &#38; 4. 3 NSNS 
No change in clansi-N S N S No change in classi-fication. No T k fication => STOP. convergence => iterate. 
4 NSNS No change in classi-fication and T k convergence => STOP. Table 3-1: Comparison ofAlgorithm 1 
and la Classification.Algorithms  Case 1: Moderate Case 2: Heavy B-LZ with B-LZ with Algorithm 1 Linearizer 
Alg 1 Linearizer All LF<0.8 C1) C2) C3) C4) (s) Dk S Mean Err 25.90 1.84 ...... 5.21 Max Err 72.10 22.14 
...... 20.70 Ak I Mean Err 0.94 0.32 1.95 7.71 0.93 ~i Max Err 8.45 1.76 8.50 81.17 3.10 Rk ~ Mean Err 
1.58 0.38 ...... 1.20 S Max Err 9.62 1.94 ...... 3.80 Table 5-1: --Algorithm 1 Validation Results Except 
for the required iteration, Procedure 2 is a computed. Instead of directly using the inflated service 
direct extension of Procedure 1 for the solution of demands to obtain Tk(n), as in Procedures 1 and 2, 
the MCPCQN's with quasi-random arrivals. Procedure 3, inflated service demands are used to compute estimates 
on the other hand, is developed within the framework of of chain k queue-length statistics which are 
incorporated Reiser's approximate~MVA algorithm for the solution of into Reiser's MVA-based heuristic 
for computing Tk(n ). product-form QNM's with a very large number of chains The reader is referred to 
[21] for a detailed description [21]. However, since Reiser's algorithm also solves each of Reiser's 
algorithm. chain in isolation, using load concealment to account for the effect of interfering chains 
at a given queue, the overall approach is very similar in spirit to that of Procedure 2. The major difference 
is the manner in We now procedures. present formal descriptions of both which the FESC load-dependent 
throughputs, Tk(n), are Procedure 2: Analysis of a Multiple Chain Population Constrained Queueing Network 
with Quasi-Random Arrivals. Input service demands for all chains at all stations Dkh , h E Hk, V k e 
K, the population constraints for all chains Wk, V k E K, the number of sources for chain k, Lk, V k 
E K, and the source delays Zk, V k e K.  Initialize utilizations of all stations due to all chains: 
Ukh = 0, h e Hk, V k E K and all mean response times: R k = 0, V k E K.  repeat R~ = R k, V k E K 
(* Save previous values for checking eo,vergence *) for V k e K do begin  Compute utilization at station 
h E H k by all other chains besides k: U~h -----j~Ujh, h e Hk  Account for effect of other open chains 
by ~inflating" service demands for chain k at the stations: D~h = Dkh / (1- U~h), he H k.  Obtain 
Tk(n ) by solving chain k in isolation using an exact method for n = 1,...,Wk, and using D[h , h e H 
k-  Compute chain k queue-length distribution, Pn' by solving M/M/1//M queueing system, using specified 
variable-rate arrival process and Tk(n), n ---~ I,...,W k.  Obtain Tk, mean throughput for chain k, 
using equation 4.  Obtain station utilizations due to chain k, Ukh = T k Dkh , h e H k.  end until 
(IR~r -Rkl / R k < e0 V k ¢ K)  Compute performance measures using equations 1 to 7 in Procedure 1. 
End of Procedure 2. 209 Procedure 3: Analysis of a Multiple Closed Class Population Constrained Queueing 
Network using Reiser's Algorithm.  Input service demands for all chains at all stations Dkh , h E Hk, 
V k E K, the population constraints for all chains Wk, V k ~ K, the number of sources for chain k, Lk, 
V k E K, and the source delays Zk, V k ~ K.  Initialize: Utilizations of all stations due to all chains: 
Ukh -----0, h E Hk, V k c K, all mean response times: R k ---- 0, V k E K, and mean queue-lengths of 
all  chains at all stations: Lkh[N ] ---: 0, h E Hk, V k ~ K, where IN]----[nl,...,nk,...,nKl repeat 
 ' ---- Rk, V k E K (* Save previous values for checking convergence *) R k for V k E K do begin  
Compute utilization at station h E H k by all other chains besides k: U~(h ---- j~?jh, h ~ Hk  Account 
for the effect of other open chains by =inflating = service demands for chain k at the stations: D~h 
~ Dkh / (1- U~h), hE H k-  Compute chain k load-dependent throughputs Tk[n], n ~ 1,...,Wk, using Procedure 
3a (Reiser's heuristic [21]).  * Compute chain k queue-length distribution, Pn' by solving M/M/1//M 
queueing system, using specified variable-rate arrival process and Tk(n), n --1,...,W k. Obtain Tk, 
mean throughput for chain k, using equation 4.  Obtain chain k station utilizations, Ukh -~ T k Dkh, 
h E H k.  Obtain mean queue-lengths Lkh[N] for chain k:  k ~kh(n) Pn' where = Lkh[N] ---- n----1 PWk 
Compute mean chain k response time, Rk, using equation 7. end until (IRkP -Rk[ / R k < ~. V k) Compute 
final performance measures using equations 1 to 7 in Procedure 1. End of Procedure 3. 210 Procedure 
3a: Computation of chain k throughputs Tk[n], n ----1,...,W k. Input Parameters: Ljh[N], he 5' Y je 
K- (k}.  Solve chain k in isolation with single chain MVA using D~ h' h e Hk, and obtain queue-lengths: 
~kh[n], h e Hk, n ----- 1,...,W k.  Compute ekh[n ] ~ ~kh[n] - ~kh[n-1], he HK, n ---- 1,...,W k  for 
n = 1 ..... Wk do begin repeat  Compute chain k residence time at station h using Arrival Theorem [15,17]: 
 Rkh[n l = Dkh(1 + i~ Ljh[N] + ~khtn] -ekhtn]), he H k.  Compute total Chain k residence time (used 
for testing convergence): Rk[n ] = h~R:h[n]  Compute chain k throughput: Tk[n ] ~-- n / Rk[n ].  Compute 
chain k mean queue-length at station h:  ~kh[n] ~--- Tk[n] * Rkh[n], he H k- until (Convergence on R 
kin]) end End of Procedure 3a. Assuming W k = W, H ----- Hk, V k e K, and excluding that Procedure 
3, unlike the iteration in the B-LZ algorithm, does not require any complete solutions of a the computation 
of state probabilities (Pn'S) and K-chain QNM for obtaining the load-dependentperformance measures, the 
computational cost for throughputs Tk[n l. Rather, Procedure 3 only requires Procedure 2 per iteration 
is O(KHW). Under the same the "partial" single chain computation required inassumptions the computational 
cost for Procedure 3 is Procedure 3a. This partial solution £pproach aloneapproximately the equivalent 
of solving Reiser's reduces the per-iteration computational cost ofalgorithm W times. The computational 
cost of solving Procedure 3 by a factor of K (approximately} withK respect to a comparable B-LZ method 
using Reiser Reiser's algorithm is given by [211: O[KH (2 + Y] Wk) ] k-~l approximate*MVA rather than 
the Bard-Schweitzer or Linearizer approximate solution methods at the lower ,~ O[K2HW]. Thus the per 
iteration computational level. We assess the accuracy of this procedure in cost of Procedure 3 is O[K2HW2]. 
It should be noted Section 5. 5. Procedure Validation 5.1. Procedure 1 Validation In this section we 
validate Procedure 1 against the B- MA approximate solution technique based on manifold equivalence and 
decomposition [3, 18]. Although the B- MA approach is also approximate, its high degree of accuracy should 
provide a reliable mbenchmark ° against which our procedure can be tested and verified. Furthermore, 
based on experience using the B-MA approach, we observed that the most accurate results are obtained 
by permuting the order in which the chains are solved. Specifically, for a QNM consisting of the chains 
K ----- {1,...,K}, the QNM is solved K times where the order in which the chains are solved are specified 
by t(he following s.~}ence: K (1) = {I,...,K-I,K}, K (2) = 2,...,K,1},...,K = {K,1,..,K-1}, i.e., the 
order of a set is obtained by cyclically shifting the members of the =predecessor" sequence. The most 
accurate results of each sequence are obtained for the first chain (which is the last chained solved 
in the B-MA algorithm), and are the only results saved for that solution. B-MA results for validation 
are obtained in this manner. Our validation consists of solving a QNM consisting of K -~ 4 chains and 
M = H ----- 5 stations (all chains visit all stations). We consider two sets of fixed arrival rates (Case 
1 and Case 2): (I) Moderate network load with )'1 = 0.3, )~2 = 0.25, )'3 ~--- 0.2, )'4 = 0.15 arrivals 
per time unit, and (2) Heavy network load with )`1 ----" 0.4, )`2 ----- 0.4, )'3 ----- 0.2, )`4 = 0.15 
arrivals per time unit. All population size constraints are equal, W k ----- 4, V k e K and service demands, 
Dkh , at each device are randomly generated from a uniform distribution over [0,11. For each QNM generated, 
we obtain the mean response time, Rk, mean active time, Ak, and mean waiting time, D k = R k -Ak, for 
all 4 chains. For Dk, Ak, and R k we compute the Mean Error (relative error with respect to results obtained 
using the B-MA algorithm} and the Maximum Error over all chains using Procedure 1 and the B-LZ algorithm 
(for fixed rate arrivals). For Case I, error statistics were computed from 50 randomly generated sets 
of service demand data. As can be seen in Table 5-1, results obtained using Procedure 1 (column 2) were 
very accurate when compared against B-MA results. Mean errors for Procedure 1 averaged less than 2 percent 
for all performance measures, outperforming the B-LZ algorithm (column I). For Case 2, error statistics 
were computed from 25 randomly generated sets of service demand data. Most of the 25 cases contained 
at least one chain operating near saturation, while in 6 cases at least one chain was actually saturated. 
In Table 5-1 we show results only for A k {since statistics for D k and R k are not particularly meaningful 
when saturated chains exist). From Table 5-1 (column 4) it can be seen that the mean error for Procedure 
1 is still quite acceptable, however, the procedure is susceptible to large errors when there are chains 
at or near saturation, as indicated by the large maximum error obtained. Results (column 3) using the 
B-LZ algorithm are far more robust. The last result shown in Table 5-1 (column 5), represents statistics 
for a special group of Case 2 results. The subset of Case 2 results used in computing these error statistics 
are selected as follows. First we define the chain k Load Factor as LF k = )`k / (Maximum Chain k Throughput). 
We then only use results obtained from those sets of data in which LF k < 0.8, V k e K. Using this screening 
procedure we filter out results which produce abnormally high errors due to saturation/near-saturation 
conditions, while retaining those results which still stress Procedure 1 under more realistic heavy load 
conditions {from a CCN modeling point of view}. Under such conditions, results obtained using Procedure 
1 are still quite acceptable. 5.2. Procedure 2 and 3 Validation In this section we validate Procedures 
2 and 3 by comparing them against simulations performed by Sauer [23] for a timesharing QNM consisting 
of a CPU (queue 1), four equally loaded disks (queues 2 through 5), and two interactive customer classes 
with independefit memory constraints. The service demands for customer classes 1 and 2 are given by Dlh 
= (0.1, 0.0875, 0.0875, 0.0875, 0.0875) and D2h = (2.0, 0.175, 0.175, 0.175, 0.175), respectively. Mean 
user think times are Z 1 = 5 and Z 2 --~ I0 time units. Simulations were conducted for 9 models, varying 
in the number of terminal users, Lk, and memory size constraints, Wk, for each class, as shown in Table 
5-2. Models were chosen such that examples of low, moderate, and high memory contention were represented. 
Each simulation was terminated when the relative width of the 90~ confidence interval for class-independent 
mean response time was 5%. Tables 5-3, 5-4, and 5-5 summarize results for class 1 and 2 response times, 
and CPU utilization, respectively, as obtained using decomposition, simulation, Procedure 2, and Procedure 
3. Decomposition results were obtained by Sauer [23] by solving the underlying Markov process of a flow-equivalent 
model using a recursive technique due to Herzog, Woo, and Chandy [9]. In addition, for comparison purposes, 
we indicate results obtained using the B-LZ algorithm (with Linearizer), the B-LZ algorithm (with Bard-Schweitzer) 
and the B-MA algorithm. Results pertaining to this Sauer'e Simulation B-LZ w/ B-LZ w/ No. Decomp C.I. 
Linear Bd-Sch Alg 2 Alg 3 B-MA 1 0.80 ( 0.77, 0.80) 0.798 0.808 0.820 0.803 0.795 2 0.93 ( 0.90, 0.95) 
0.928 0.935 0.984 0.931 0.922 3 4.83 ( 4.68, 4.93) 4.922 4.948 4.981 4.950 4.830 4 1.06 ( 1.03, 1.08) 
1.066 1.091 1.165 1.079 1.061 5 1.17 ( 1,13, 1.19) 1.173 1.190 1.314 1,184 1.171 6 4.10 ( 3.97, 4.17) 
4.155 4.202 4.445 4.189 4.102 7 1.50 ( 1.47, 1.54) 1.528 1.559 1.741 1.541 1.504 8 1.69 ( 1.87, 1.74) 
1.704 1.750 1.919 1.727 1.683 9 2.33 ( 2.30, 2.42) 2.338 2.368 2.735 2.354 2.333 Table 5-2: Comparison 
of Class 1 Mean Response Time Sauer's Simulation B-LZ w/ B-LZ w/ No. Decomp C.I. Linear Bd-Sch Alg 2 
Alg 3 B-MA 1 4.66 ( 4.49, 5.09) 4.701 5.267 4.727 4.590 4.675 2 5.08 ( 4.71, 5.31) 5.135 5.756 5.142 
5,534 5.096 3 4.09 ( 3.88, 4.31) 4.099 4.352 4.191 4.252 4.090 4 7.59 ( 6.70, 7.64) 7.793 9.269 7.608 
8.625 7.599 5 9.13 ( 8.42, 9,69) 9.396 11.413 9.020 11.114 9.139 6 6.44 ( 6.08, 6.95) 6.464 7.280 6.499 
7.127 6.443 7 13.30 (12.16, 14.10) 14.087 18.279 12.698 15.520 13.303 8 12.48 (11.98, 13.28) 12.803 14.909 
12.115 14.117 12.484 9 14.47 (13.48, 15.15) 14.551 18.161 13.552 17.890 14.474 Table 5-3: Comparison 
of Class 2 Mean Response Time Sauer'e Simulation B-LZ w/ B-LZ w/ No. Decomp C.I. Linear Bd-Sch A1 g 2 
AIK 3 B-MA 1 0.62 (0.60, 0.63) 0.617 0.806 0.615 0.613 0.618 2 0.60 (0.59, 0.81) 0.802 0.581 0.800 0.595 
0.603 3 0.49 (0.48, 0.50) 0.485 0.480 0.482 0.481 0.487 4 0.84 (0.83, 0.88) 0.832 0.804 0.827 0.818 0.838 
5 0.80 (0.79, 0.81) 0.795 0.785 0.791 0.789 0.800 6 0.69 (0.89, 0.71) 0.692 0.673 0.681 0.677 0.696 7 
0.98 (0.98, 0.97) 0.945 0.914 0.946 0.926 0.958 8 0.95 (0.95, 0.96) 0.948 0.914 0.940 0.927 0.954 9 0.87 
(0.87, 0.88) 0.871 0.827 0.857 0.830 0.872 Table 5-4: Comparison of Total CPU Utilization 213 example 
using a "delay technique" are reported in [28] and shown to be more accurate than the mean population 
technique (the B-LZ algorithm} however are not discussed in this paper. For Procedure 2, all of the class 
2 response times obtained were within the simulation confidence intervals, while class 1 response times 
were all slightly outside the given confidence intervals (i.e., results for cases with low to moderate 
CPU utilizations were 1 to 8 percent outside their confidence intervals, while results for cases with 
high CPU utilizations were slightly further outside their confidence intervals}. Over half of the values 
obtained for CPU utilization were within their confidence intervals, while the maximum distance of those 
outside their confidence intervals was less than 1.5%. Results obtained using Procedure 3 show that results 
were comparable to those results obtained using the 13- LZ algorithm with Bard-Schweitzer, with Procedure 
3 giving slightly better results for class 2 performance measures. Over half of the mean response times 
obtained for class 1 were within their respective confidence intervals; all other class 1 mean response 
time results were within one percent of their confidence intervals. For class 2 mean response times, 
results for cases 1 and 3 were within their confidence intervals, with deviations ranging from 2 to 18 
percent for the remaining cases. Using a convergence criteria of e 0.001 (see Procedure 2 and 3 descriptions} 
for solving the nine models, both Procedures 2 and 3 required approximately 4 to 5 iterations for convergence, 
while the B-LZ approaches required approximately 3 to 4 iterations. 6. Conclusions We presented three 
procedures for solving multiple class population constrained QNM's, Our emphasis was on developing computationally 
efficient procedures for solving very large QNM's associated with computer communication networks. Procedure 
1, which is based on load concealment, was shown to be a fast and accurate procedure for solving MCPCQN's 
in which there are fixed rate arrivals to all chains. The procedure was observed to be comparable in 
accuracy to computationally more expensive techniques using manifold equivalence and decomposition. Largest 
deviations occurred when the QNM contained chains which were at or near saturation. Procedures 2 and 
3 were proposed for solving MCPCQN's in which all chains are characterized by quasi-random arrivals. 
Procedure 2 was a direct extension of Procedure 1, while Procedure 3 was an adaptation of Reiser's approximate 
MVA algorithm for solving product-form QNM's [21]. Results obtained using both procedures compared favorably 
against techniques [3, 16, 18l having significantly higher costs. Procedure 2 has the lower computational 
cost of the two procedures, while Procedure 3 tends to be more robust. Acknowledgements The first author 
wishes to acknowledge a discussion with Dr. Alexandre Brandwajn, which motivated him to write this paper. 
Terminals MPL Constraint Case Class 1 Class 2 Class 1 Class 2 ................................ 1 20 
2 4 2 2 3 1 3 1 1 4 30 3 7 2 5 5 1 6 2 1 7 40 4 14 4 8 9 3 9 5 I Table 5-1: Parameters for Sauer's Simulation 
Test Cases 214 I. Appendix Consider a single-server station with a PS queueing discipline, which services 
K chains with Poisson arrivals. The arrival rates are k k and the mean service times are Xk, k ~ I,...,K. 
The utilization of the server by each ctiain is denoted by Pk ---~ )~k Xk' k ~--- 1,...,K. The total 
K server utilization is p ---- i~ pk and p < 1, i.e., none of the chains is saturated. Since Poisson 
arrivals see time averages, the mean response time for chain k is, i( C0) k=l = X k (1 + n), k= 1 ..... 
K where nk is th'e mean population of chain k, n is the total population, and the second factor expresses 
the expansion of service time due to the presence of other chains. Multiplying the above equations by 
~k and summing the equations we obtain: h'--~ (1 + ~ p. It follows that: n----p/(1 -p). Substituting 
into equation 8 we have: n k = pk/(1 -p) (9) The same result could have been obtained by inflating the 
service times by dividing them by the remaining capacity of the server, i.e., using X~ = Xk/(1- E Pj)" 
 References <RefA>1. Bard, Y. Some Extensions to Multi*Class Queueing Network Analysis. In Performance of 
Computer Systems, M. Arato et al., Eds., North-Holland, Amsterdam, 1979, pp. 51-62. 2. Baskett, F., 
Chandy, K.M., Muntz, R.R., and Palacios, J. Open, closed and mixed networks of queues with different 
classes of customers. Journal of the ACM 22, 2 (April 1975), 248-260.  3. Brandwajn, A. Fast Approximate 
Solution of Multiprogramming Models. Proc. ACM/SIGMETRICS Conf. on Measurement and Modeling, September, 
1982, pp. 141-149. 4. Chandy, K.M. and Sauer, C.H. Approximate methods for analyzing queueing network 
models of computer systems." Computing Surveys 10, 3 (September 1978), 281-317. 5. Chandy, K.M., and 
Neuse, D. mLinearizer: A Heuristic Algorithm for Queueing Network Models of Computing Systems. Commun. 
ACM 25, 2 (February 1982), 126-134. 6. Chow, W.M. Approximations for Large Scale Closed Queueing Networks. 
 Performance Evaluation 3, 1 (February 1983), 1-12. 7. de Souza e Silva, E., Lavenberg, S.S., and Muntz, 
 R.R. A Perspective on Iterative Methods for the Approximate Analysis of Closed Queueing Networks. Proe. 
International Workshop on Applied Mathematics and Performance/Reliability Models of Computer/Communication 
Systems, Pisa, Italy, September, 1983. 8. Dowdy, L.W. and Gordon, K.D. Algorithms for Nonintegral Degrees 
of Multiprogramming in Closed Queueing Networks. Tech. Rept. CS-82-04, Vanderbilt University, April, 
1982. 9. Herzog, U., Woo, L., and Chandy, K.M. Solution of Queueing Problems by a Recursive Technique. 
 IBM J. Res. Develop. 19 (May 1975), 295-300. 10. Lam, S.S. UQueueing Networks with Population Size 
Constraints." IBM J. Res. Develop. 21, 4 (July 1977), 370-378. 11. Lam, S.S. and Lien, Y.L. Modeling 
and Analysis of Flow Controlled Packet Switching Networks. Proc. 7th Data Communications Symposium, 1981, 
pp. 98-107. 12. Lam, S.S., and Wong, J.W. "Queueing Network Models of Packet Switching Networks, Part 
2: Networks with Population Size Constraints." Performance Evaluation 2 (1982), 161-180. 13. Lam, S.S. 
and Lien, Y.L. "A Tree Convolution Algorithm for the Solution of Queueing Networks. Commun. ACM 26, 
3 (March 1983), 203-215. 14. Langer, A. and Shum, A. Product-Form Queueing Networks Containing Mixed 
Customer Classes. Harvard University, 1982. 15. Lavenberg, S.S. (Ed.). Computer Performance Modeling 
Handbook. Academic Press, 1983.  16. Lazowska, E.D., and Zahorjan, J. Multiple Class Memory Constrained 
Queueing Network. Proc. 1982 SIGMETRICS Conference on Measurement and Modeling of Computer Systems, ACM, 
Seattle, Washington, August, 1982, pp. 130-140. 17. Lazowska, E.D. et al. Quantitative System Performance: 
Computer System Analysis Using Queueing Network Models. Prentice-Hall, 1984. 18. Menasce, D.A. and Almeida, 
V.A.F. "Operational Analysis of MultiClass Systems with Variable Multiprogramming Level and Memory Queueing." 
Computer Performance 3, 3 (September 1982), 145-159. 19. Pennotti, M. and Schwartz, M. "Congestion Control 
in Store and Forward Tandem Links." IEEE Trans. Comm. COM-23, 12 (December 1975), 1434-1443. 20. Reiser, 
M. and Kobayashi, H. "Queueing Networks with Multiple Closed Chains: Theory and Computational Algorithms." 
IBM J. Res. Develop. 19, 23 (May 1975), 283-294. 21. Reiser, M. "A Queueing Network Analysis of Computer 
Communication Networks with Window Flow Control." IEEE Trans. Comm. COM-27, 8 (August 1979), 1199-12Q9. 
 22. Sauer, C.H. Numeric~.l Solution of Some Multiple Chain Queueing Networks. Tech. Rept. RC 8986, 
IBM T.J. Watson Research Center, August, 1981. 23. Sauer, C.H. "Approximate Solution of Queueing Networks 
with Simultaneous Resource Possession." IBM J. Res. Develop. 25, 6 (November 1981), 894-903. 24. Sauer, 
C.H. "Computational Algorithms for State- Dependent Queueing Networks." ACM Trans. Computer Systems 1, 
1 (February 1983), 67-92. 25. Schweitzer, P. Approximate Analysis of Multiclass Closed Networks of Queues. 
Proc. of International Conf. Stochastic Control and Optimization, Amsterdam, 1979. 26. Thomasian, A. 
and Bay, P. "Analysis Techniques for Queueing Network Models of Multicomputer Systems with Shared Resources." 
Computer Performance 4, 3 (September 1983), 151-166. 27. Thomasian, A., and Bay, P. Analytic Solution 
of an Integrated Performance Model of a Computer Communication Network with Window Flow Control. Proc. 
1984 SIGCOMM Symp: Communication Architectures and Protocols, ACM, Montreal, Canada, June, 1984. 8 pages. 
 28. Zahorjan, J. Workload Representations of Queueing Models of Computer Systems. Proe. ACM/SIGMETRICS 
Conf. on Measurement and Modeling of Computer Systems, Minneapolis, MN., August, 1983, pp. 70-81.  
 </RefA>
			
