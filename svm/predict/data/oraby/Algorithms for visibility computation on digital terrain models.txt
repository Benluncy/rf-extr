
 . . Algoritllnls for Visibility Conlputation on Digital Terrain Models ~Leila De Floriani, tPaola Magillo 
~University of Geneva, Computer ancl Information Science Department Abstract In the paper, we consicler 
the problem of computing vis­ibility information on cligit al terrain models. Visibility problems on 
polyhedral terrains are classified according to the kind of visibility information computed into point 
visibility, line visibility and region visibility. A survey of the stateof-the-art of the algorithlns 
for computing visibility is presented, according to the chssification in­ troduced. Introduction Describing 
a terrain through visibility iuformatiou, such as, for instance, the portion of the terrain surface visible 
from a selected point of view, has a variety of applica­tions, such as geomorphology, navigation, terrain 
explo­ration. Problems which can be solved based on visibility are, for instance, the computation of 
the minimum num­ber of observation points needed to view an entire region, the computation of paths with 
specified visibility char­acteristics, the computation of optimal location for the minimum number of 
television transmitters or the op­timal locations for receivers [3,4]. In terrain navigation problems, 
the profile of the horizon is an irle.al tool which can be used from an observer to locate hisfher position 
on a map. In this paper, we consider the problem of computing vis­ibility information on models of natural 
terrains. Two points on a terrain are considered mutually visible when they can be joined by a straight-line 
segment lying above the terrain (and intersecting it only at its two extreme points). We present a new 
classification of visibility problems based on the kind of visibility information com­puted. We consider 
point visibility problems, which con­sist of computing intervisibility between pairs of points, and produce 
discrete visibility models which ACU-SACWMMUUSA e 1993Afx Odml-sbMMNWMMa.slm consist of collection of 
points selected in a candidate set w]]ich are visible from a predefine set of observation points. Then, 
we examine visMity problems related to the computation of curves with specified visibility char­acteristics, 
like the horizon with respect to a point of view. Finally, we consider the problem of computing continuous 
visibility models, which require the compu­tation of that portion of a terrain visible from a point of 
view located on the terrain (that we will call visibility model of the terrain with respect to the specified 
point of view). Visibility problems considered in this paper operate on the basis of a point of view 
located on the terrain (which will be termed Visibility on a terrain) to distinguish them from problems 
related to the visualization of a terrain, that we will call Visibility of a terrain. In this latter 
case, the point of view lies outaide the domain of the ter­rain (possibly at infinity) and a projection 
plane (called a view plane) is given. The visibility problem of a ter­rain is related to the problem 
of computing the visible surfaces in a three-dimensional scene and has been ex­tensively studied in the 
literature [20,19,14,18,15,16,5]. Moreover, some algorithms are more of a theoretical in­terest than 
of practical applicability. Here, we will focus on the problem of computing visibility on a terrain. 
 Digital terrnin models A natural terrain can be described as a continuous func­tion z = ~(z, y), defined 
over a connected subset D of the x -y plane. Thus, a Mathematical Tenuin Model (MTM) can be defined ss 
a pair M E (D, f). A Digiial Tenuin Model (DTM) is defined as a planar subdivision ~ of the domain D 
into a collection of pla­nar regions 7?= {Rl, Rz,... Rk} and by a family F of continuous functions z 
= ~i(~jv), ~ = 1,2,. ..m, each defined on &#38; and such that ~i(~$ y) = fj(~j for ev­ v), ery (z,y) 
c @ n R; (where R; denotes the closure of region ~). Thus, a DTM can be expressed as a pair M s (Z, F). 
According to the above definition, a DTM is a special case of mathematical terrain model. lVe will call 
jaw of a DTM the graph of each function f,, ~d~cand Mrt cr of the DTM the restriction of each fnncf.ion 
j, to an edge and a vertex, respectively, of ~. For simplicity, we will denote by 6 the projection on 
the z !/ plane of a generic geometric entity o in the 3D space. DTMs can be classified into Itrgtilar 
.$quon Grids (RSGS), and Polyhedml Terrain Afodcl.s (PThls). In all RSG, the domain subdivision is a 
regular rectmlgular grid, while each function ii is a qna(iratic function ob­tained by linear interpolation 
along the edges of the sub­division. PTMs are characterized by a domain subdivi­sion consisting of a 
straight-line pltane grnph and by lin­ear interpolation functions. The graph of a polyhedral terrain 
model consists of a network of polygonal fzces. A special class of PTMs is that consisting of TrranJuh 
hi Irregular Networks (TINs), in which the domain subdivi­sion is a triangulation. Often, a Delaunay 
triangulation is used as domain subdivision for a TIN because of its good behaviour in numerical interpolation 
problems [7]. A Delaunay triangulation h a-san important property re­lated also to visibility computations. 
It belongs to the class of acyclic subdivisions of the plane, i.e., subdivisions on which it is possible 
to define a partial order relation, called lrejore/behiurf relation, with respect to any point inside 
the domain of the subdivision [6]. A DT?d based on an acyclic subdivision is called an acyclic cfi~ifaf 
tcr­ruin model Such models have a special interest relatecl to visibility application, since their faces 
and edges can be radially sorted arouncl any prefrxecl poi IIt of view. In such a way, visibility information 
can be incrementally com­puted for each face or edge by only taking into account the configuration of 
the portion of the terrain formed by those faces and edges which come before them in the order, with 
a considerable increrse in efficiency. Classification of visibility problenls on terraius Given a mathematical 
terrain model M-(D, j), that, for brevity, we will simply call a termrn, we call a cana i­date point 
any point P s (z, y,z) belonging to or above the terrain, i.e., such that (z, y) c D and ; ~ J(z, y). 
Two candidate points PI and Pz are mutually visible (or intemisible) if, for every point. Q s (z, ?/,=) 
= tP1+(l t)Pz, with OC t <1, z > f(~,y). We will call point of view (or ohervation point) any ar­bitrarily 
chosen candidate point, and ui.wul ray any ray emanating from a point of view. Given a point of view 
V and a spheric coordinate system centered at V, a vi­sual ray r is identified by the pair (0, o), called 
a view dimcfion, where O is the angle Iwtweetl the projection F of r on the z y plane and the positil 
e r-axis, and cr is the angle between r and the positive :-axis. Visibility problems on m terrain can 
be cltassifiwl based on the dimensionality of their output ill forlnat ion into Point visibility Given 
a terrain, a point of view and a finite set Q of candidate points, we want to compute the subset Q of 
Q containing all the points visible from V. Q is called the rfi.srrrtr visible rvgion of V in Q. In practice, 
we consider a DTX1 and the candidate points form a subset of the vertices of tile terrain; often also 
the point of view is at a vertex. A generalization of the problem stated above consists of computing 
a discrete visibility model of a terrain. Given a terrain M, a finite set S1 of observation points, and 
a set SZ of points belonging to M, the discrete visibility modef of .&#38;l with respect to S1 and S2 
is a collection of sets {Qi I Pi E S1}, where Qi = {P E S2 I P is visible from ~}. Line visibility The 
well-known visible-line reconstruction problem for general 3D scenes can be formulated as a line visibility 
problem for a terrain, by taking a point of view inside the domain, ,and requiring the computation of 
the visi­ble portions of the edges of the DTM. A line visibility problem of practical relevance in geographic 
applications consists of computing the horizon of an observation point on a terrain. Given a terrain 
M and a point of view V, the horizon of tlw terrain with respect to V is a function a = /r(O), de­fined 
for O E [0, 27r] such that, for every radial direction 0, h(d) is the maximum value a such that each 
ray em­anating from V with direction (0, B), with ~ < a, does not intersect the terrain. In a polyhedral 
terrain the horizon ia a radially sorted list of labeled intervals [01, 82]. If an interval [dl, 02] 
has label s, then the visual ray defined by a direction (0, /1(0)) with 01 < @< &#38; hits the terrain 
at a point belonging to edge s. An example of horizon on a polyhedral terrain is represented in figure 
1. Region visibility Given a terrain M= (D, f) and a point of view V, we define visible region of V the 
subset D of D formed by the points (z, y) E D such that (Z) y, ~(z, y)) is visible from V. The invisible 
region of V is clearly the comple­ment of D in D. An example of visible and invisible region is shown 
in figure 2. In aDTM M= (~, f), visibility with respect to a point of view can be coded .as a map, called 
continuous visibil-Itg map, which consists of a partition of the domain D into maxi mal connected regions, 
each of which is labeled as invisible, if it is a subset of the invisible region, or witl] a face of 
t!m terrain in such a way that, if a region Figure 1: Horizon of an observation point on a polyhe­dral 
terrain, projected on the z -y plane. The location of the view-point is the marked point. , Figure 2: 
An example of visible and invisible region on a TIN (the invisible region is shaded). R is labeled with 
face ~, then all points of ~ whose ver­tical projection belongs to R are visible from the point of view. 
Given a set S of observation points, we call the collection of visibility maps of the points in S as 
the continuous visibilitymodel of the terrain with respect to S. Algorithms for poht visibility Point 
visibility computations can be reduced to deter­mining the mutual visibility of two candidate points. 
In this section, we present a bruteforce approach as well as an approach based on a preprocessing of 
the terrain which builds a hierarchical query structure. Given a DTM M= (~, F) and two candidate points 
PI and P2, the bru te-force approach reduces to computing the intersection of the projection on the z 
-y plane of segment s S ~, denoted 5, with the edgea of ~. At each intersection point ~ between ii and 
an edge e of ~, we test whether s lies above or below the edge of M corresponding to e. This process 
has a linear time complexity, in the worst case, in the number n of vertices of M. For a regular grid, 
the time complexity reduces to 0(~. To compute the discrete visibility region with respect to a single 
point of view V, we need to determine the mutual visibility of V and the points belonging to a candidate 
set S2. The second approach preprocesses the terrain model with respect to the point of view V and builds 
a data structure on which the problem of computing the visibility of a point P from V cnn be solved in 
logarithmic time. The data structure has been proposed by Cole and Sharir [4] to solve a ray shooting 
problem on a polyhedral terrain. Given a DTM M-(~,F), a point of view V and a view direction (d, rY), 
the ray shooting problem consists of determining the first face of A4 hit by a ray emanating from V with 
direction (O, a). The mutual visibility of two pointa V and P reduces to solve the ray shooting problem, 
since we have just to consider as view direction that defined by segment ~ and, when obtained the first 
face of M hit by the corr~ spending visual ray, we have just to determine whether P and V lie on the 
same or on opposite sides of the plane of such a face. The data structure of Goie and Sharir, that we 
call horizon tree, has size O(na(n) Iogn), where a(n) is the inverse of Ackermann s finction, and thus 
ahnost­constant; ray shooting queries can be answered in time O(log? n) on such structure. Given a point 
of view V, the horizon tree can be built for any acyclic polyhedral terrain, since it needs to sort the 
edges of the terrain aromid the viewpoint. A horizon tree is a balanced binary tree in which the whole 
set of edges of the terrain is associated with the root. If S is the set of edges associated with a uode 
U, then the closest half of the edges of S me associated with the left child of v, the other half with 
its right child. The partial horizon computed on the eclges associated with the left child of a node 
v is attached to v. A horizon tree can be computed in optimal 0( mr(n) log n) time. A ray shooting query, 
represented by a visual ray r, can be answered by descending the horizon tree T until two consecutive 
horizons are found such that the visual ray r passes above the first one, but not above the second. This 
identifies two edges /1 and 12 of tile DTM such that r passes above !1, but below Iz. It can be proved 
that !1 and 12 bound the same face ~, and that ~ is the first face encountered by r. In descending T 
one node is visited at each level. For each node u the interval of the horizon associated with v containing 
ray r must be located. This leads to a time complexity of 0(log2n), which reduces to 0(/ogn) by using 
a fractional cascading technique. Computing the discrete visible region of a model M with respect to 
a point of view V and a set Sz of k candidate points is thus equivalent to computing the horizon tree, 
with a computational cost equal to 0( no(n) log n), plus k interviaibility computations wit h a cost 
of 0(k/og2n), which is clearly less than the direct intervisihility com­ putation, if k = O(n). Horizon 
computation algorithms The horizon computation problem reduces to the com­putation of the upper envelope 
of a set of possibly inter­secting segments in the plane. Given p segments in the plane, i.e., p linear 
functions Y=ji(z), i= l.. . p, each defined on an interval [a:,b;], the upper envelope of such segments 
is a function y = F(z), defined over the union of the intervals [ui, bi], and such that F (z) = ~~~ilz~[a,,~,](fi(~)). 
 We express the edges of the terrain in a spherical coor­dinate system centered at the point of view 
and consider only the two angular coordinates. This transformation produces a set of segments in the 
p 6 plane. By com­puting the upper envelope of such segments, we obtain a function which associates 
with each direction 8 the seg­ment (if it exists) having maximum azimuth in direction p, i.e, the horizon 
(according to the given definition). It has been shown [10] that the complexity of the upper en­velope 
of p segments in the plane is O(po(p)), and thus the complexity of the horizon of a polyhedral terrain 
with n vertices is equal to O(rw(n)). The upper envelope of p segments in the plane can be computed 
either by a dynamic, or by a divide-and-conquer approach. The dynamic approach computes the upper envelope, 
de­noted ,Env, starting from an initially empty structure and ~dding a segnmut at a time to it, in any 
order. For each new segment s, we locate those z-intervals, related to Enu, which properly intersect 
the z-interval defined by s, and update the upper envelope in each of these intervals. The worst-case 
time complexity of such algo­rithm is equal to 0(p2). The first divide-and-conquer algorithm for computing 
the upper envelope of a set of segments in the plane is due to Atallah [1] and achieves a worst-case 
time complexity of O(pr@) log p). The algorithm recursively partitions the set of segments in two halves, 
and pairwise merges the results. The merging step of two upper envelopes is performed by using a sweep-line 
technique for intersect­ing two monotone chains of segments. The algorithm proposed by Hershelberg [13] 
is still based on a divide-and-conquer strategy, but computes the up per envelope of a set of p segments 
in optimal O(p log p) time. The b~ic idea is to subdivide the given set of segments in such a way that 
the upper envelope of any subset of the generated groups is linear in the num­ber m of segments, and, 
thus, it can be computed in time O(m log m), by using the algorithm previously dis­cussed. Since such 
subdivision generates O(log n) sub­sets, Atallah s algorithm is used to pairwise merge all partial envelopes 
according to a divide-and-conquer ap­proach. This operation again has a O(p log p) time com­plexity, 
thus leading to O(p log p) time complexity for the entire algorithm in the worst crws. Algorithms for 
region visibility In this Section, we present first a brief survey of alg~ rithms for computing visibility 
of a terrain, i.e., for hid­den surface removal on polyhedral terrains. Then, we de­scribe in more detail 
specific algorithms for computing a continuous visibility model, i.e., algorithms for visibility on a 
terrain. Hidden surface removal on a polyhedral terrain The algorithms for hidden surface elimination 
in a 3D polyhedral scene (possibly a polyhedral terrain) give the visible portions of each object of 
the scene projected on the view plane, that form a visible image. The worst case space complexity of 
the visible image is 0(n2) for a polyhedral scene with n vertices, but in practical cases its size may 
be much smaller. For this reason, output sen­sitive algorithms are more convenient than worst case optimal 
algorithms. In the following, we review some output sensitive algorithms for hidden surface elimina­tion 
in polyhedral terrains, which can be adapted to the computation of a continuous visibility model. Reif 
and Sen [16] propose an output sensitive algorithm for hidden line elimination on acyclic polyhedral 
terrains, whose time complexity is equal to O((n + d) log2 n). The point of view is located at infinity 
in y direction, and the z-z plane is used w view plane. The algorithm con­sists of two basic steps. In 
the first step, the edges of the terrain are grouped to form O(n) monotone chains with respect to the 
y =is. In the second step, the chains are projected on the view plane one at a time, in incre=ing distance 
order. The upper envelope L?nv of the chains projected so far is maintained, representing the current 
horizon. When a chain u is projected, the intersections between u and Env are founcl. Then the portions 
of a, that Iie above the current horizon Env, as visible from the viewpoint, are marked. Those portions 
of faces ad­ jacent to the visible portions of the edges of a, and lying on the nearer side to the observation 
point are also vis­ ible. The update operation consists of the computation of the new horizon. A structure 
is used to store Env for representing monotone polygons. This makes possible to compute the intersections 
and the subsequent uprlatings in O((m+ k) log m) time, where m is the number of edges and k the number 
of intersections. The same approach is followed by Preparata and Vit­ter [17], who, however, use a different 
data structure for storing Env, The structure proposed by Preparata and Vitter is easier to implement, 
and consists of a sub­tree of the balanced binary tree whose leaves are the vertices of the terrain. 
The subtree is obtained by col­lecting only those leaves which correspond to vertices in Erw. The structure 
allows intersections and updat­ings in O((m + k) log m) time, where m is the number of edges and k the 
number of intersections, thus leading to an O((n + d) log2 n) algorithm. De Berg, Hslperin, Overmars, 
Snoeyinti and Van Kreveld [5] propose an output sensitive algorithm which works in O(nl+*@ time, where 
d is the output size, and c ia any arbitrary integer value. The algorithm computes the visible image 
of a generic 3D scene composed of quasi­disjoint triangular faces by using a sweepline technique (in 
particular, it can be applied to a TIN). A distance order is not required. The observation point is located 
at z= -co. The approach proposed by Katz, Overmars and Sharir [12] is more a schema of an algorithm, 
which can be applied to three-dimensional scenes formed by quasi­d)sjoint objects sorted by increasing 
distance from a point of view (which can be in any position with respect to the scene: inside, outside 
or at infinity). In particu­lar, the schema can be applied to an acyclic polyhedral terrain model, with 
observation point located on it. A description of this algorithm is presented in the subsec­tion dedicated 
to continuous visibility algorithms. Computing the lower envelope of a set of triangles An approach to 
the computation of the visibility model of a point of view on a dibtital terrain model consists of transforming 
the problem of computing the visibility model into the problem of computing the lower envelope of a set 
of disjoint triangles in the space. The lower envelope of a set T of triangles in space defines a partition 
of the * -y plane into maximal connected regions, each of which is labeled with a triangle of T in such 
a way that, if a region R is labeled with triangle t, then t is the triimgle with minimum height over 
R. It has been shown [10] that such a partition has an 0(n2) complexity (since ail the triangles are 
disjoint). When computing the visibility model with respect @ a point of view V, we associate as height 
to a triangle ti a function ~i(z, y) that maps into a point ~ s (z, y) in the plane the distance from 
V of the point P on fi whose projection on the plane is P. The same approach could be used for hidden 
surface removal on a terrain, pro­videcl that, the projection plane is the view plane. The algorithms, 
which compute the upper envelope Enu(T), compute a first finer subdivision, denoted A(T), obtained by 
projecting all the triangles on the z -y plane and extending the projected segments to infinity. A(T) 
has still an 0(n2 ) complexity and is formed only by convex regions. A brute force approach to determine 
A(T) consists of computing for each region R, the triangle whose height is minimum with respect to the 
values of all the height functions associated with the trianglea overlapping R. The worst case time complexity 
would be 0(n3), since the projection of n trianglea can cover a single region. An optimal approach to 
computing the lower envelope of a set of triangles has been proposed by Edelabrun­ner, Guibaa and Sharir 
[9]. Such algorithm is based on the classical divide-and-conquer paradigm, since it re­cursively partitions 
set T in two equally-sized subsets T1 and T2, separately builds A(T1 ) and A(Z 2), and, finally, merges 
A(T1 ) and A(7 2) into A(T) by resigning the labels in the regions at which A(T1) and A(T2) intersect. 
The worst case time complexity of the algorithm is equal to O(n2); Env(T) can be computed from A(T) in 
0(n2) time. An incremental randomized algorithm has been pr~ posed by Boissonat and Dobrindt [2]. The 
algorithm inserts a triangle at a time in the lower envelope con­structed for the already examined triangles. 
Instead of the current lower envelope llnu(T), a finer subdivtilon, caNed the trapezoidal decomposition 
of Enu(T), and de noted Trap(T), is maintained. In Env(? ) we can distin­guish two types of vertices: 
projected triangle vertices and intersection points between projected triangIe edges. Trap(T) is obtained 
from 13rav(T) by drawing through every vertex of the first type a vertical segment to the first edge 
above and below this point, and repeating the same process for every vertex of the second type, but only 
in one direction (see figure 3). Trap(T) has the Figure 3: Trapezoidal decomposition of the lower enve­ 
lope of a set of three triangks. same space complexity than Env(T), but it is formed by trapezoidal regions, 
i.e., regions with fixed number of edges. Z rap(? ) is stored in a speciai data structure which allows 
an easy localization of the regions which are properly in­tersected by the projection of the new inserted 
triangle on the z-y plane. The data structure mxintains the cur­rent trapezoidal decomposition pius the 
history of its construction in a directed acyclic graph whose nodes cor­respond to trapezoids that have 
been regions of Trap(T) at some stage of the algorithm, and whose leaves are the trapezoida of the current 
Trap(T). At each step the newly created trapezoids become children of those trape­zoids, leaves at the 
previous step, which they properly intersect. A randomized analysis shows that, for a set of non-intersecting 
triangles, the i-th triangle can be in­serted in O(i) randomized expected time, leading to a 0(n2 log 
n) complexity for the the entire algorithm. An algorithm based ou acyclic TINs h the following, we briefly 
describe an algorithms for the computation of the visibility model on acyclic TINs (like those baaed 
on a Delaurray triangulation of the domain) [6,11]. Given an acyclic TIN M= (~, %) and a point of view 
V on M, the algorithms operates in two steps: 1) sorting the triangles of ~ by increasing distance with 
respect to the projection V of the point of view Vonthez -y plane (radial sorhng phase). 2) computing 
the visible portions of each triangle of M with respect to V (visibility computation phase). Radiai sorting 
is-performed by building a star-shaped polygon around V by incrementally adding a triangle at a time 
to a starting polygon formed by the triangles of ~ incident in ~. The acyclicity property of ~ ensures 
that at each step we can always ad~i a new triangle while maintaining the star shape of the resulting 
polygon. The visibility computation step consists of incrementally computing successive horizons, each 
horizon I.x=ing re-Figure 4: Con I@rat ion of ABESS and of the already ex­amined triangles in an intermediate 
step at the aigorithm (the viewpoint is the marked vertex). stricted to the set of edges of the terrain 
examined so far. A face fi of M, defined by a linear function z = aiz + bi~ + ci, determines two (open) 
half-spaces: an upper half-space (locus of the points (z, y, z) such that z > ai~ + biy+ ci) and a lower 
half-space (1OCUS of the points (z, y, z) such that 2 < ai~+biy+ci). A face fi is said to be face down 
with respect to V if V lies in its lower half­space , is said jace up if V lies in the upper half-space. 
An eclge e of M is a blocking edge when, if f, denotes the closest face incident in e and f2 the furthest, 
then fl is face up and fz is face down. The visibility algorithm constructs an active sequence of blocking 
edges, called Active Blocking Edge Segment Sequence (A BESS). ABESS contains ail those block­ing edges 
portions belonging to triangles zdready visited which can cast a shadow on triangles not yet examined 
(see figure 4). At the beginning of the algorithm, ABESS is initialized as an empty list of intervais. 
To compute the visibility of the current triangle t, we have just to compute the shad­ows cast on t by 
the vertical trapezoids hang at segments of ABESS. If t is face down with respect to V, then t is totaily 
invisible. Otherwise, we consider ail segments in ABESS intersected by any visuai ray which hits t.We 
compute the portion of t hidden by each segment and insert it into the set of the invisible portions 
oft. When thas been examined, ABESS is updated by considering the edges oft never examined before. For 
every edge b of t which has not yet been examined, and is a blocking edge, we update ABESS with a similar 
procedure to the incremental updating of the upper envelope. Radial sorting the triangles of ~ requires 
O(n) time. The visibility computation step has an 0(n2cr(n)) worst­case time complexity, since O(ncr(n)) 
is the size of ABESS in the worst case. Implementation issues and experiments on real data me discussed 
iu [1 1]. A general algorit lml for sortable scenes We describe now an approach to the computation of 
the visibility model on a polyhedral terrain that cousists of the application of the already mentioned 
schelna , pro­posed by Katz, Overmars and Slmrir [12], to the specific case of an acyclic polyhedral 
terrain with point of view located on the terrain. The promssing of a scene composed of n objects is 
per­formed as follows: 1) The n objects are sorted by dist ante from the view­point. 2) The sorted objects 
are stored in a balanced tree T with log n levels, by associating the n objects to the root, the n/2 
closest objects to its left child, the n/2 farthest object to its right child, and so on. 3) For each 
node v of T, the union U(v) of the pro­jections on the view plane plane of the objects as­sociated with 
v is computed. The computation is performed by ascending T from the leaves to the root, since U can be 
easily obtained by merging the regions corresponding to the two children of u. 4) For each node v, the 
visible portion V(u) of U(V) is computed; V(v) is the portion of U(v) not hid­den by objects closest 
to the viewpoint than those associated with u. The objects, which can possibly hide portions of 2/(v), 
are those associated with the left children of the nodes on the path from the root to v. This computation 
proceeds by descending T from the root to the leaves, and each region V(v) is obtained by considering 
U(v) and the region V of its parent. 5) The regions V(u) associated with the leaves are col­lected to 
find the visible portion of each object in the scene. It can be shown that the global size of rdl regions 
U, stored at any level of T, is equal to 0( U(n)) and, simil­arly, the total size of all regions V stored 
at any level of T is less or equal to d (= size of the final result). The space complexity of T is O((fJ(n) 
+ d) log(n)), and, for a polyhedral terrain, O((rm(n) + d) log(n)), since in this case U(m) = ma(m). 
The storage cost can be reduced to O(U(n) log(n)) by computing regions V with a sweepline technique [12]. 
The worst case time complexity of the algorithm for acyclic polyhedral terrains can be evaluated as follows. 
The time complexity is dominated by the cost of steps 3 and 4, which involve boolean operations among 
polyg­onal regions. For a polyhedral terrain, such regions are monotone polygons with respect to any 
radial di­rection from ~. Thus, the boolean operations on such regions can be performed in linear time 
in the out­put size, i.e., O(rm(n) log n) for step 3, and O(d log n) 386 for step 4. The colnplexity 
of the whole algorithm ia 0((/Ict(n) + d) log(n)), where d is the output size. ., Divide-and-conquer 
Atallnh O(ncr(n) log n) Optimal, Hershe]berg O(nlogn) divide-and-conquer HIDDEN SURFACE ALGORITHMS AUTHORS 
TIME TERRAIN COMPLEXITY DeFloriani, Fal-0(n3a(n)) Acyclic cidieno, tri~gulated Pienovi I Terrain I Reif, 
Sen O((n +d) log n) Acyclic Preparata, Vit-O((n+d) Iogz n) Acyclic ter I I DeBerg, I O(nl+ #d) I Triangulated 
Halperin, Over­mms, Snoeyink, I I VanKreveld­ 1 TRIANGLE ENVELOPE ALGOIUTHMS ALGORITHM AUTHORS TIME 
Complexity Brute force O(n3) [incremental, Boissonat, O(nz log n) randomized Dobrindt Optimal, divide-Edelsbrunner, 
O(nz) and-conquer Guibss, REGION VISI131LITY ALGORITHMS AUTHORS I TIME I TERRAIN  I COMPLEXITY I DeFloriculi, 
Fal-I O(nZa(n)) I Acyclic Tabel 1 Comparative table of the algorithms for terrain vtilbility presented 
in the paper. Conclurling Remarks We have presented an overview of visibility problems on terrains, and 
a survey of algorithms for solving such problems. We have classified viibility computations in point, 
line and region visibility, and we have followed such classification in the description of the algorithms 
which compute them. Table 1 describe algorithms for horizon computation, algorithms for visibility of 
a ter­rain, algorithms for computing the lower envelope of tri­angles and region visibility algorithlns. 
An open research problem consists of colnput.ing visi­bility information on hierarchical terrain inodcls. 
SIIch models have encountered a lot of interest ill the C;lS cotl)­munity because of their capability 
of representing a sur­ face at levels of ditTerent specificntioll. It will he inl­ portant to develop 
algorithms for point, line and region visibility on such a model [7].   References <RefA>[1] M.Atallah, 
Dynamic Computational Geometry, Proceedings 2~th Symposium on Foundations of Computer Science, 1989, 
pp.92-99. [2] J .D.Boiasonnat, K .Dobrirrdt, On-Line Construction of the Upper Envelope of Triangles 
in ~~, Acts of Jth Canadian Conference on C ompntational Ccanwty, August 1992. [3] M. Cazzanti, L.De 
Floriani, E. Puppo, G. Nagy, Visi­bility Computation on a Triangulated Terrain, Pro­ceedings 8th International 
Conference on Image Analysis and Prvcess~ng, Como, September 1991. [4) R. Cole, M. Sharir, Visibility 
Proldems for Polyhe­dral Terrains, Technlcai Itcport X?, ConrnnL Insti-Me, New York University, 1986. 
[5] M.De Berg, D. Halperin, M. Overlnars, J .Snoeyinli, M.varr Kreveld, Efficient Ray Shooting and Hidden 
Surface Removal, Proceedings 7th ACM Symposium on Computational Geomety, 1991, pp.21-30. [6] L.De Floriani, 
B. Falcidieno, G. Nagy, C. Pienovi, Polyhedral Terrain Description Using Visibility Cri­teria, Institute 
for Applied Mathematics, National Resemvh Council, Technical Report n. 17, October 1989. m L.De Floriani, 
E.Puppo, A hierarchical triangle­based model for terrain description, Prucecdings ln­temational Conferxmce 
on GIS, Piss, 21-23 Septem­ber 1992. [8] F. Devai, Quadratic Bounds for Hidden Line Elimin­ation, Proceedings 
?nd ACM Symposium on Com­putational Geometq, 1986, pp.26!)-275. [9] H. Edelsbrunner, L.J .Guibas, M .Sharir, 
The Upper Envelope of Piecewise Linear Functions: Algorithms and applications, Discrete and Compuictional 
Ge­ometry, 4, 1989, pp.31 1-336. [10] H.Edelsbrunner, The Upper Envelope of Piecewise Linear Functions: 
Tight bounds on the number of faces, Discrete and Cornput ution al Gromc try, 4, 1989, pp.337-343. [11] 
D. M.Jung, Comparisons of Algorithms for Terrain Visibility, Master Thesis, Rfnsselurr Polgtcchnic institute, 
Troy, New York. Augilst l$Ng. [12] M.J .Katz, M.11.Overmars, M. Sharir, Efficient Hid­den Surface Removal 
for Objects with Small Union Size, Prw(erflngs 7th AChf Symposium on Compu­taiionrd Geowctry, 1991, pp.31-40. 
[13] J, Hershel berg, Finding the Upper Envelope of n Line Segnwnts in O(n log n) time, Information Pro­ccssmy 
Lettf rs, 33, 1989, pp.169-174. [14] M. McKenna, Worst C=e Optimal Hidden Surface Removal, A Chl I Fans. 
on Gmphics, 1987, n.6, pp.19-28. [15] K.h[rrlmuley, An Efficient Algorithm for Hidden Surface Removal, 
Computer Gmphics, Vol. 23, n.3, July 1989, pp.379-388. [16] M .Overmars, M. Sharir, Output-Sensitive 
Hidden Surface Removal, Proceedings 90th IEEE Sympo­sium oa Foundations oj Computer Science, 1989, pp.598-603. 
[17] F. P. Preparata, J .S.Vitter, A Simplified Technique for IIidden-Line Elimination in Terrains, Proceed­ings 
STA CS W?, Paris, February 1992. [18] J. H. Reif, S.Sen, An Efficient Output-Sensitive Hidden-Surface 
Removal Algorithm And Its Par­allelization, Proceedings Jth A CA4 Symposium on Computational Geometry, 
1988, pp. 193-200. [19] A. Schnlitt, Time and Space Bounds for Hidden Line and Hidden Surface Algorithms, 
Proceedings Eur-o­gruphics, 81, 1981, pp.43-56. [20] K. Weiler, P. Atherton, Hidden Surface Removrd Using 
Polygonal Area Sorting, Proceedings SIG-GRAPH 77, J Uly 1977.</RefA> 
			
