
 0501 A LANGUAGE AND SYSTEM FOR SYMBOLIC A DIGITAL COMPUTER* by W. S. Brown .lEAN g. SAIViMET Bell Telephone 
LaboratorieB, Incorporated Murray Hill, New ~ersey ABSTRACT This paper aescribes the ALPAK system and 
the ALTRAN language for symbolic algebra on a digital computer. The ALPAK system is specifically designed 
for the efficient handling of large scale algebraic computations, and has been applied to ~ wide variety 
of practical problems. The ALTRAN language is a dialect of FORTRAN for describing algebraic manipulations. 
Although ALTRAN is still being developed, a useful subset has been implemented. A programming system 
called OEDIPUS, which serves as a foundation for the second and newest version of ALPAK, is briefly described. 
The past investment in, present availability of, and future plans for ALPAK and ALTRAN are outlined. 
 *Based on a paper presented at the IBM Scientific Computing Symposium on Computer-Alded Experimentation, 
October, 1965. 050 ;- ~,~ ) iC', ~" .lEAN E. SA,",,4~,iET CONTENTS Pad le Introduction 1 2. Polynomial 
s 4 3. Rational Functions 5 4. Truncated Power Series 5 5. Matrices 7 6. Side Relations 7 7. ALTRAN lO 
8. OEDIPUS 12 9. ALPAK Applications I0. Past Investment, Present Availability, and 17 Future Plans 0503 
A LANGUAGE AND SYSTEM FOR SYMBOLIC ALGEBRA ON A DIGITAL COMPUTER* by W. S. Brown Bell Telephone Laboratories, 
Incorporated Murray Hill, New Jersey i. INTRODUCTION In his recent book on numerical analysis, R. W. 
Hamming Ill set forth the motto that "the purpose of computing is insight, not numbers." Scientists have 
always sought insight through the development of formulas showing the relationships of relevant variables. 
Sometimes the derivation of formulas consists of straightforward but tedious algebraic manipulation, 
and this is a kind of work at which computers certainly ought to excel. This paper describes the ALPAK 
system [2'3] and the ALTRAN language [4S for symbolic algebra on a digital computer. ALPAK is specifically 
designed for the efficient handling of large scale computations, and has been applied to a wide variety 
of practical problems. ALTRAN is a new language which provides the convenience of FORTRAN style programming 
to ALPAK users. Although ALTRAN is still being developed, a useful subset has been implemented. *Based 
on a paper presented at the IBM Scientific Computing Symposium on Computer-Aided Experimentation, October, 
1965. 0504 -2 - The kinds of algebraic quantities which ALPAK can deal with are (see Figs. I and 2) 
integers, rational numbers, polynomials in several variables, rational functions of several variables, 
truncated power series with rational- function coefficients, and matrices of rational functions. Besides 
the usual operations of addition, subtraction, multiplication, division, and integral exponentiation, 
ALPAK permits substitution, differentiation, computation of greatest common divisors, and simplification 
with the aid of side relations. As a general rule polynomials and rational functions are not permitted 
to have real (i.e., floating-point) coefficients. If real coefficients were permitted, the occurrence 
of roundoff error would cause zero to be nonunique and would thereby give rise to a host of very difficult 
problems. It is usually feasible and desirable to replace the nonrational numbers which occur in an expression 
by literal symbols. These symbols can be treated by ALPAK as ~ariables. Results will then involve no 
roundoff error, and the dependence on these symbols will be explicitly displayed. ALPAK is not a "sophomore 
imitator" or "elementary mathematics system." There are many elementary mathematical operations (e.g., 
simple integration) which are beyond its present capabilities. However, when faced with appropriate 
0505 -2a - Integer -17 Rational Number 3/5 ,Polynomial 17ax 2 + 2bxyz + 3cy 2 -4yz 3 Rational Function 
 (2a2bx) (30y2) "1 ( a2+b2- 02) ( a2-b2+c2 ) -2 Figure I. ALPAK data types 0506 -2b - Truncated Power 
Series a 0 + alx + a2x2 + ... Matrix I a21 a22 a23 1 Figure 2. In these ALPAK data structures the 
coefficients may be rational functions 0507 -3- problems its speed (one man-hour = one 7090-second) 
and capacity (the available space in core can accommodate up to 8000 polynomial terms) are impressive. 
 Neither is ALPAK a "symbol manipulation system," because it views a polynomial as an array of coefficients 
and exponents rather than as a string of numbers, variable names, operation symbols, and parentheses. 
 The representation of polynomials and the polynomial operations are discussed in Section 2, and the 
extension to include rational functions is described in Section B. This much has been fully operational 
since early 1963. Further possible extensions to include truncated power series and matrices and to take 
account of certain classes of side relations are outlined in Sections 4, 5, and 6. At present ALPAK contains 
useful but primitive facilities corresponding to each of these extensions. Section 7 describes the ALTRAN 
language, and Section 8 discusses the OEDIPUS programming system, which serves as a foundation for the 
second and newest version of ALPAK. Finally Section 9 surveys the applications of ALPAK through 1965, 
discussing a typical one in some detail, and Section I0 outlines the past investment in, present availability 
of, and future plans for ALPAK and ALTRAN. 050S 2. POLYNOMIALS Figure 3 shows a simple polynomial in 
three variables and its representation as an array of coefficient~ and exponents. Each term consists 
of a coefficient and a set of exponents. To save space and time, the exponents are usually packed into 
one or a few words. The variable names and packing information are kept conveniently off to the side 
in a layout. The terms are kept in a canonical order, so that all combinations and cancellations can 
be recognized quickly and automatically. Figure 4 shows schematically how this polynomial might appear 
inside the computer. (The actual representation depends on which version of ALPAK is under discussion.) 
 The permitted polynomial operations (see Fig. 5) are addition, subtraction, multiplication, division, 
integral exponentiation, substitution, differentiation, and calculation of the greatest common divisor. 
Notice the simplicity of the corresponding ALTRAN statements. The first statement means "Set A equal 
to B + C", where B and C are already- existing polynomials. The sixth means "Set G equal to the result 
of replacing X by A and Y by B in F", where A, B, and F are already-exlstlng polynomials, and where X 
and Y are variables in the layout of F. This is a very powerful operation. The last statement means "Replace 
A by the greatest common 0509 -4a - 3x 2 + 2xyz -5yz 2 xxz_ -50Z2 2 iii 3 ZOO Figure 3. Representation 
of a polynomial as an array 0.510 -4b -- I Poln er X -s Jo i 2 12 2 II 1 1 H . i Y 3 2 0 0 i 12 Coefficients 
Exponents Z 12 Layout Figure 4. Representation of a polynomial inside the computer   0Sll -hC - Figure 
5. POLYNOMIAL OPERATIONS Addition A=B+C Subtraction A=B-C Multiplication A = B*C Division A = B/C 
Exponentiation A = B**K Substitution G = F(X=A,Y=B) Differentiation G = DIFF(F,X) Greatest Common A = 
GCD(B,C) Divisor Polynomial operations and the corresponding ALTRAN statements _ 0512 divisor of 
B and C." We shall return to this seemingly innocent operation in a moment. B. RATIONAL FUNCTIONS A 
rational function is represented most simply as a pair of polynomials--the numerator and the denominator. 
The extension of ALPAK to include rational functions would be perfectly straightforward except for the 
GCD (greatest common divisor) problem. To reduce a rational function to lowest terms, it is necessary 
to find the GCD of its numerator and denominator, and remove it from both. At present we use a generalization 
of Euclid's algorithm for thls purpose. In the general case this algorithm causes the computer to generate 
a tidal wave of exponentially growing intermediate expresslons until its working space is over- whelmed. 
Fortunately most practical problems exhibit special characteristics which can be exploited to simplify 
the computation. However, the general difficulty of the GCD problem leads us to adopt the strategy of 
keeping polynomials in factored form whenever the factors become known. We do not attempt to factor each 
polynomial into its irreducible factors, but we do preserve all of the factoring information that is 
discovered during the course of computation.  4. TRUNCATED POWER SERIES It frequently happens, in applied 
mathematics, that a given problem cannot be solved exactly, but can be solved -6 -OS1S approximately 
by taking advantage of the fact that some parameter orcombinatlon of parameters is very small or very 
large. The technique is often called perturbation theory. Such problems can almost always be reformulated 
in terms of truncated power series. Suppose x is the small parameter. The first step is to expand all 
the known quantities as power series in x, and to represent the solution as a power series with undetermined 
coefficients. Usually it is not possible to find a general formula for the n-th of these, and one must 
be con- tent with explicit formulas for, say, the first k. Therefore, one truncates all of these power 
series to order k and computes with them--always dropping terms in which x appears to a power greater 
than k. (Actually it's sometimes a little more complicated than this.) It turns out that truncated power 
series can be treated mathematically in the same way as formal power series. [5] Several rather surprising 
operations are possible. For example, if y = f(x), with f a truncated power series, it is possible to 
express both y-i = Kf(x).]-I and x = f-l(y) as truncated power series by straightforward algorithms. 
These operations are called inversion and reversion respectively. In the case of inversion the constant 
term must be nonzero (unless negative powers of x are acceptable). In the case of reversion the constant 
term must be zero. 0514 -?- Only the addition, subtraction, and multiplication operations for truncated 
power series have been implemented in ALPAK, but a complete package is planned.  5. MATRICES Another 
very common situation in applied mathematics is that a system of linear equations with rational function 
coefficients must be solved. Such problems can always be expressed in terms of matrices, and the corresponding 
mathematical theory is well developed. All of the operations which apply to rational functions are also 
relevant for matrices. Furthermore one can compute the determinant, the trace, the characteristic polynomial, 
and other interesting functions. Most of these operations have not yet been implemented in ALPAK. However 
a subroutine is available for solving systems of linear equations with rational-function coefficients; 
and a program has been written to evaluate determinants through order approximately 6.  6. SIDE RELATIONS 
 In computing with rational functions it is often necessary to be aware of certain side relations. Let 
us consider several examples: If a computation involves V~, one can introduce 2 a variable s satisfying 
s = 2. This side relation can be applied after each multiplication to eliminate all powers of s higher 
than the first. -8 -05i5 If a computation involes sin x and cos x, one can introduce variables s and 
c satisfying s 2 + c 2 = i. This side relation can be applied after each multiplication to eliminate 
all powers of s or c (but not both) higher than the first. If a computation involves x and e x, one 
can introduce a variable q satisfying q = e x. If either differentiation with respect to x or substitution 
for x is requested, the side relation must be taken into account. In the case of substitution it may 
be necessary to create a new variable q' = e x~. These examples suggest several classes of expressions 
which might be handled by the efficient techniques of ALPAK, with side relations being applied when 
necessary, and otherwise kept out of the way. First, any field of algebraic functions can be defined 
by a set of polynomial side relations. An example of an algebraic function is ~~y. Fields of algebraic 
 numbers are included as a special case. S. L. Klelman [6] has provided a theoretical framework for 
dealing with algebraic functions, but no attempt has yet been made to program his algorithms. Many 
people say that the computer should be programmed to deal with the class of elementary functions. I 
believe this goal is too ambitious, at least for the 0516 -9- present. The elementary functions can 
be generated, starting from a number field and some variables, by the ~ rational operations together 
with exp and log. The number field must include the integers, and therefore the rationals. To permit 
trigonometric functions it must also include ~ and i. The simplest choice is therefore the field obtained 
by adjoining ~ and i to the rationals. In order to compute with elementary functions we would llke 
to have a procedure for deciding whether or not a given elementary function is identically zero. Unfortunately 
no such procedure is known, and it seems likely that none exists. A smaller and much simpler class of 
functions is generated by the rational operations together with exp but not log. I call these the rational 
exponential functions. An example is sin(x 2 + exp(cos x)). Again it is not known whether a procedure 
to test for zero exists, but in this case it seems very hopeful and well worth investigating. At present 
ALPAK has only one subroutine pertaining to side relations. With this subroutine one can simplify a 
 given rational function by applying a side relation of the 2 form x = r, where x is a variable and 
r is a rational function independent of x. 0517 -lO - 7. ALTRAN We have discussed several classes 
of expressions, and the operations that can be applied to them. ALPAK is a package of subroutines for 
performing these operations. ALTRAN is a new programming language for ALPAK users. Roughly speaking, 
ALTRAN is obtained by adding rational numbers, polynomials, rational functions, and in the future other 
classes of expressions to the data types of FORTRAN. Both ALTRAN and FORTRAN are algebraic in the sense 
that they include statements which may contain algebraic expressions in several variables. ALTRAN is 
also algebraic in the sense that it includes variables whose values may be algebraic expressions in several 
variables. Since both the language and the data contain expressions, variables, and constants, we shall 
refer to language expressions, language variables, and language constants on the one hand, and data expressions, 
data variables, and data constants on the other. Thus the value of a language variable is, in general, 
a data expression in several data variables. It is natural to expect that a language which included 
variables with nonnumerlcal values should also include nonnumerlcal constants, and this is indeed the 
case for ALTRAN. When a data variable (that is, one of the symbols from which data expressions are composed) 
appears -n-OSi8 explicitly in an ALTRAN program, it represents only itself; so it is in fact a language 
constant. Such language constants are sometimes called symbolic constants (see Section 3). If X is a 
data variable, the statement X = 2 would be illegal for the same reason that the statement 2 = 0 would 
be illegal; namely one cannot assign a value to a c onst ant. Every ALTRAN language variable must be 
declared explicitly. For example POLYNOMIAL P, Q, R declares that P, Q, and R are language variables 
of the type polynomial. That is, the values of P, Q, and R will always be polynomials. An array of variables 
may be introduced whenever convenient. For example INTEGER A,B(3,5),C(4) declares that A is an integer 
variable, B is a two-dimensional array of integer variables with maximum subscripts 3 and 5 respectively, 
and C is a one-dimensional array of integer variables with maximum subscript 4. Language expressions 
are constructed as in FORTRAN except that ALTRAN includes a notation for substitution. For example, suppose 
F, P, and Q are language variables of algebraic type, and X and Y are data variables. Then F (X=P, Y=Q) 
 0519 -12 - represents the result of simultaneousl [ replacing the data variables X and Y by the data 
expressions represented by P and Q respectively in the data expression represented by F. As a special 
case F (X=Y, Y=X) represents the result of interchanging the data variables X and Y in the data expression 
represented by F. As another special case F(X=2, Y=3) represents the result of evaluating the data 
expression represented by F at the point (2,3) in the XY plane. If the only data variables in the layout 
of F are X and Y in that order, then the above expressions can also be written as F(P,Q), F(Y,X), and 
F(2,3) respectively. 8. OEDIPUS Now let us discuss briefly some of the programming problems which were 
encountered in the implementation of ALPAK. In the first place polynomials and rational functions must 
be put somewhere inside the computer, and this is clearly the sort of problem that the ALPAK user should 
not have to think about. The amount of space required for a particular expression cannot usually be 
predicted in advance, 0520 -13 - and space must also be found for intermediate expressions whose existence 
the user may not even be aware of. This problem is solved by writing a dynamic storage allocator which 
finds and frees blocks of space on request. The storage allocator must also be able to handle lists 
and trees, since our data structures--e.g., products of polynomials--are often fairly comp]i~ated. 
 A second problem is that many algebraic procedures are recursive. For example, to divide two polynomials 
in n variables, it is necessary to call a procedure for dividing polynomials in n-1 variables. If n 
> l, the second procedure is the same as the first, which therefore must be able to call itself. A 
third problem is that the introduction of complex data structures, dynamic storage allocation, and recurslon 
 has necessitated a new approach to the problem of post mortem analysis. When a run is terminated because 
of insufficient space or time or because of a programming error, how can we get the computer to tell 
us in a problem oriented way what it thinks it was trying to do, where it was, and how it got there? 
 Finally there is the ever present problem of book- keeping for subroutines. The facilities for dynamic 
storage allocation, recurslon, and post mortem analysis impose so many requirements on the writer of 
a subroutine that he needs the help of a computer to survive.  052i -14 - These problems are all more 
general than ALPAK, ~md they led us to develop an operatin 6 environment called OEDIPUS (Operating E__nvironment 
with D_ynamlc Storage Allocation, I_nput-Output, Public Pushdown List, U_nhurried Diagnostics, and Symbolic 
Snaps). [7'8] This serves as a foundation for ALPAKB, [3] a new version of ALPAK, and can also be used 
to implement other systems (e.g., [9]) having similar requirements. In the near future dynamic storage 
allocation, recursion, and appropriate bookkeeping facilities will all be readily available, since they 
are provided by the new programming language, PL/I. However, I fear that adequate post mortem analysis 
will not be made similarly available until several years of general suffering go by. 9. ALPAK APPLICATIONS 
 I want to emphasize that ALTRAN is a very recent development, and only a subset has been implemented. 
How- ever, ALPAK, with a more primitive language, has been in widespread use at BTL since early 1963. 
Several of the earliest applications are discussed in [2]. Other applications which have led to publication 
are described in [lO] -[17]. Successful applications through 1965 are summarized in Figs. 6 - 8. 0522 
 -l~a - QUEUEING THEORY Single-server queue with feedback Multi-server queue with priorities Single-server 
queuewith random service order Three sources, two servers Many-server pure-loss system DIFFERENTIAL 
EQUATIONS Constants for numerical solution technique STATISTICS Asymptotic expansions Permutation-symmetric 
matrices CODING THEORY Cyclic codes Polynomial rings PROBABILITY Zeros of Gaussian noise Figure 
6. Mathematics Applications 0523 l~b CRYSTAL PHYSICS Wave propagation under stress Third-order elastic 
coefficients QUANTUM FIELD THEORY Triskelion diagram Vacuum polarization tensor MAGNETIC THEORY Antiferromagnetic 
ground state ORBIT THEORY Accuracy of prediction UNDERWATER PHYSICS Detection of signals in noise 
Figure 7. Physics Applications 0524 -14c - CIRCUIT THEORY Power spectra Flow graphs Varactor frequency 
doublers Transformer characterization Resonant frequencies Multi-wind transformer CHEMICAL PHYSICS 
Phase transition theory Rigid disks at high density Modified $radient process Laminar flow PSYCHOACOUSTICS 
 Auditory detection of signals in noise Figure 8. Other Applications 0525 -15 - Let us now discuss 
one of the mathematical applications, the single server queue with feedback, in more detail. The purpose 
of introducing this example is to provide a feeling for the kinds and sizes of expressions which are 
involved at various stages in a typical application, not to convey any understanding of the mathematics 
which is involved. Figure 9 shows the general situation. The server might be a computer at an electronic 
central office or a ferris wheel operator at an amusement park. The customers, whose paths are represented 
by the arrows, might be telephone calls in need of switching service or small children in need of a round 
trip to the sky. The service time, that is the time required to serve one customer, may vary from customer 
to customer. The probabilities are given by a distribution function, which can be characterized completely 
by an infinite sequence of moments, al,~2, e3, .... It can be shown that the average service time is 
simply the first moment, e I . The variance can be computed easily from the first two moments; and the 
skewness, f~om the first three. The remaining moments are more difficult to interpret. We assume that 
new customers arrive randomly at the average rate ~. Each customer waits in the queue until it is his 
turn to be served. When he has been served, he returns to 0526 -15a - 1 iSERVER q ~,y~-p ,,, i Moments 
a I, a2, u 3, ... P Figure 9. Single-server queue with feedback  0S27 -16 - the queue with probability 
p or departs with probability l-p, which we shall call q. Thus a particular customer may be served several 
times before he is finally satisfied and departs. The problem is to compute the moments ~1,62,B3,... 
of the distribution function for total time in the system. That is, we want to know how much time will 
elapse between the initial arrival of a customer and his final departure--in the sense of knowing the 
average, the variance, the skewness, and so forth. Professor L. Takacs [lO] of Columbia University studied 
the problem and derived the equations shown in Figs. lO and ll. These equations, which I shall not attempt 
to explain or justify, serve as a starting point for the calculation of ~l' "'"~n" for any fixed n. After 
a few easily described operations the computer arrives at a set of linear equations, which must then 
be solved. The equations which determine ~I are shown in Fig. 12. The additional equations which are 
required to determine ~2 are shown in Figs. 13 and 14. The complete computation of B 1 can be done with 
pencil and paper in less than an hour, provided that it is carefully rehearsed. With the computer a few 
seconds of run time are sufficient. Hand computation of B 2 would require about lO0 hours, exclusive 
of checking. The computer time was only lO0 seconds, and the results are beautifully simple (Fig. 15). 
 0528 -16a - SINGLE SERVER QUEUE WITH FEEDBACK POISSON ARRIVAL DENSITY, ~. ARBITRARY SERVICE MOMENTS, 
(Z n FEEDBACK PROBABILITY, p (q= 1- p) FIND THE MOMENTS /~n OF TOTAL TIME.   19n : (-')n +no @(~,0: 
E ~Lj sUt J L,j (I, (s, t) = (q,->,=,) w (s,t) + pV, (s + xt) ,I, (s,oo (s, t) ) Figure i0. Basic equations 
for the single-server queue with feedback 0529 -16b - QUANTITIES IN THE FORMULA FOR ¢(s~t) (_l)rurs 
r $(s) = r, r-O ,~(8,t) = i -(1-pt)~(,+~t) wC,,t) -,pC,+~t) + s(, + ~t,~C,,t))T(®(,,c)) s(x,y) $(x) 
-~(y) " x'y T(®) -i -~ -{i-~)'~,(~) Figure Ii. Quantities in the formula for ¢(s,t) 0530 -16c - The 
equations for 4,0, and 4',0, obtained by setting the coemcients of t and s to zero, are 2A4,o,+ B = 0 
 (58) 2C4,,o + 2/)4'o, ÷ E = 0 where A = (q -a,)[q: -q(a, + 2) + a,]. B = -(:~1 ~ -2a, -a2)iq' q(a, + 
2) + a,l C ffi -q(q -a,)" (59) D = -a,{q -l)(q -a,) E = ~2a, "~ - 2a, -a:)l{a, + i)q --a,~. Figure 12. 
Equations for B I  053X -16d - The equations for 4,~, @,,,aud @:~,obtai,ied by ..,etting tim ,~oeffi-cie.ts 
of r', st, and s ~ to ze,'o ~and replacing @,o hy @o,), are :l,~d~..; + B,4,., + (', = 0 .-I.-.4',, + 
.-I~.~,,: + B:4'o, + f'.~ = 0 (tblJ .1:,@:~, + .'1~,, + A.~4'~ + B3@0, + ('3 = 0 where |1:, = 6(*q --ai):[¢l 
3 --/l'~(2a! J¢- :4) -t-q(al: "t-4o, i "4" :4) --al{al "4" 2)1 .I.*: ----121q --aei~[q: --q(al -{- 2) 
4" ~l] .1:.:, = --12adq --! |(q --cq|:lq --al --l) { G5I .I.~, = 6'1{ q -a, I "~ .la: := 12al(q --l){q 
--at) ~" 1~3 = 6af~[q --l)(q --ai) ~ and B, = 6(q --l)(q --a,)'[4qoq --('2o, ~ + 4a, + a~)] B: ,= 12(q 
-l)(q -al~[2qat -{2a," + :4at q- a:~] {66) Bz = -6(q --l)(q o'1)'~(2a1: "~ 2cq + a:) Figure 13. Equations 
for ~2 0532 16e C, = - 2q~(6a, 8 - 60,*. -6a~,, + 30,, + aa) + 3q~Sa, * -8~L'a. --80,*' --(~,a,, + 
2alaz --a~ + 6or, + 2oz) --2q*'(6ats + 120, 4 -t" 6a,aa,. _ 60, a _ 21at=a,, + :ial-~a3--12o,*' -30,o~' 
+ 7o,0~-:~a,,*' + 90,,+ 30.0 + q(12a, ~ (67) --lga,Sa,, + 2a,~aa --$alZa,. ~" --12a,"a,. + iOa,*'a~ --12as*. 
--'f)a,a~ "~ + 120102 + iOasaa --6a~ ~) i o . $ . ., + as (. 6al2a.. --2al'a~ + .40soo. --6asa.~ --4asa3 
+ .la,,-) CS '= 2qs(120s* -18as ~ - 12ai'~a.~ + ha( + 60102 + 2aia~ + 30: + aa) -q*'(240s s + 12at 4 
--' 240,'a,, -480s ~ - 480s'~a~ + 80~"0~ + 12o,~ --6a~a,.*' + 30a,a*. + 12a,a~ + 30~ q-180,, q- 60~) 
+ q(24as ~ --12at ~ --:]6a~a,, -~-40~'0~ (68) --1201: --6ai*'a~ z --12at:ot~ 4" 14a~:a: ~-Oa|a,.'* q- 
30asa~  + 120~0~ --30=*') q-at(12a~*'a~ --40~*'0~ + 00,0,; --12a,a,, --60~0.~ + 30**') .) 4 C~ .= --q'~( 
120, '~ --l.a, 12a,'a.~ *. ----60, a, +. 2a,:a, + 6a,a, + 2a,a~ + :~a2~ + 60, + 203) + qa,(12a,~ --120,' 
 (69) -18a,'a, + 20,0,-30,02' + 40,03 + 120, + 40~, +o,*'~6o,o~ -2a,a~ + 30.*.-- 60: -Oa.~). Figure 
14. Constant terms in the @quations for B 2 0533 -16f -   RESU LTS (X.: I) 1-oI I ) (;(2 ,8, =~ ~.-~;, 
+ ~'(~L-(~,)  ~2q F-G} (q2_ 2(::[) /32- ! II 6 (,~-,,,) ~ [~-q (,,, + 2) +,,,] F = 6~,3- 6~, 2 -6~,= 
2 +s~ 2 +~3 G= 12~,3-12~, 2 -6~, ~2 +2~,=3-3~ Figure 15. Results (~ = i) 0534 -17 - Let us review the 
entire computation quickly. Figures i0 and ii show the starting point. By following a very simple program, 
the computer first generated the rather frightening equations shown in Figs. 12 through 14, and then 
solved them exactly, obtaining the simple results shown in Fig. 15. I0. PAST INVESTMENT, PRESENT AVAILABILITY, 
AND FUTURE PLANS In conclusion I should llke to describe the invest- ment that has been made in two 
versions of ALPAK (called ALPAKA and ALPAKB) and several related projects, the availability of these 
programs outside of BTL, and some of our plans for the future. During the four year period starting 
in September, 1961, the following programs (Fig. 16) were planned, developed, and put into service: 
ALPAKA OEDIPUS Compiler OEDIPUS Subroutines ALPAKB Compiler ALPAKB Subroutines ALTRAN Compiler (first 
version) The total investment, including research, development, documentation, maintenance, and consulting 
has been about 0535 -17a - Man Years ALPAKA 4 OEDIPUS Compiler ½ OEDIPUS Subroutines 2 ALPAKB Compiler 
½ ALPAKB Subroutines 2 ALTRAN Compiler Figure 16. Total investment -18- 9½ man years--4 for ALPAKA, 
2 each for the OEDIPUS and ALPAKB subroutines, and ½ each for the three compilers. ALTRAN is not yet 
fully implemented, and nothing has been written about ALPAKB. With the partial exception of the ALTRAN 
compiler, all of these programs are closely tied to the IBM 7090/7094 computers and BESYS~ (including 
BEFAP). Both ALPAKA and BESYS4 can be obtained by sending a letter and 2 reels of tape to Mrs. C. L. 
Winter, Program Librarian, Bell Telephone Laboratories, Murray Hill, New Jersey. Programs for the IBM 
1401 computer with advanced programming hardware, required by BESYS4 for blocking and unblocking tapes, 
are available as a deck of cards. I must caution you that the use of a foreign monitor system is rarely 
welcomed by the manager of a computation center, and moreover the documentation of BESYS4 is less than 
adequate. On a more optimistic note, I can report that J. D. Babcock of Allen-Babcock Computing, Inc., 
1800 Avenue of the Stars, Los Angeles, California, and N. Gilbreath of The RAND Corporation, 1700 Main 
Street,° Santa Monica, California, are in the process of converting ALPAKA and ALTRAN to run under the 
IBJOB monitor and IBMAP. Also A. D. Hall and R. J. Loane of the Department of Electrical Engineering, 
Princeton University, Princeton, New Jersey, 0537 -19 - are converting ALPAKA (but not ALTRAN) to run 
under the FMS monitor and IBFAP. If and when these conversions are completed, they may be offered to 
SHARE. For the future we are planning a new version of ALPAK, to be programmed in PL/I. Also, we hope 
it will become possible to develop a new version of ALTRAN based on PL/I rather than FORTRAN. Art. 
References 0538 REFERENCES <RefA>I. Hamming, R. W. 1962. Numerical Methods for Scientists and engineers. 
New York: McGraw-Hill. 2. Brown, W. S., Hyde, J. P., and Tague, B. A. 1963-4. The ALPAK System for Nonnumerlcal 
Algebra on a Digital Computer. B.S.T.J., 42:2081-2119; 43:785-804; 43:1547- 1562.  3. Brown, W. S., 
and Leagus, D. C. To be written. ALPAKB -- A New Version of ALPAK.  4. McIlroy, M. D., and Brown, W. 
S. To appear. The ALTRAN Language for Symbolic Algebra on a Digital Computer.  5. Bochner, S., and Martin, 
W. T. 1948. Several Complex Variables. Princeton: Princeton University Press.  6. Kleiman, S. L. Unpublished. 
A Canonical Form and Some Computational Procedures for Rational Functions of Several Variables Satisfying 
Polynomial Side Relations.  7. Brown, W. S. 1965. An Operating Environment for Dynamic  RecursiveComputer 
Programming Systems. Comm. ACM, 8:371-377.  8. Brown, W. S., and Leagus, D. C. 1964. OEDIPUS Reference 
Manual. Copies may be obtained from the authors.  9. Brown, W. S., and Leagus, D. C. 1964. VPRPAK --A 
Computer Programming System for Variable Precision Rational Arithmetic. Copies may be obtained from the 
authors.  R-2 0539 lO. Takacs, L. 1962. A Single-Server Queue with Feedback. B.S.T.J., 42:505-519. 
ll. Slepian, D. 1963. On the Zeroes of Gaussian Noise. New York: John Wiley and Sons, Inc. Ch. 6 of Proc. 
of Symposium on Time Series Analysis. See esp. Page ll5. 12. Thurston, R. N., and Brugger, K. 1964. Thlrd-0rder 
Elastic Constants and the Velocity of Small Amplitude Elastic Waves in Homogeneously Stressed Media. 
Phys. Rev. 133:A1604-A1610. See esp. Tables I -III and Pages A160~,A1609. 13. Nalker, L. R. 1964. Perturbation 
Calculatlons for the Antiferromagnetic Ground State. Proc. of the International Conference on Magnetism, 
Nottingham. (Also to be published in Phys. Rev.) ALPAK was used to differentiate the perturbation series. 
14. Stillinger, F. H., Jr., and Helfand, E. 1964. Crltical Solution Behavior in a Binary Mixture of Gaussian 
Molecules. J. Chem. Phys. 41:2495-2502. See esp. Page 2500. 15. Brugger, K. 1965. Determination of Third-0rder 
Elastic Coefficients in Crystals. J. Appl. Phys. 36:767-773. See esp. Section III. 16. Sleplan, D. 1965. 
Some Asymptotic Expansions for Prolate Spheroidal Functions. J. Math. and Phys. ~:99-140. See esp. Tables 
I-VI and Pages 109, ll8, 120 and 131. a-3 05aO. 17. Stillinger, F. H., Jr., Salsburg, Z. W., and Kornegay, 
R. L. 1965. Rigid Disks at High Density. J. Chem. Phys. 43:932-943.</RefA> See esp. Table I and Page 940. 
   
			
