
 A Lower Bound for Sorting Networks Based on the Shuffle Permutation C. Greg Plaxton* Torsten Suel t 
Department of Computer Science University of Texas at Austin Abstract We prove an fl(lgz permutation. 
This technique employed n/ lg lg n) lower bound for the depth of sorting networks based on set ties an 
open question posed by Knuth, up to a @(lg lg n) factor. in the lower bound argument may be of separate 
interest. the shuffle The proof Introduction A variety of different classes of sorting networks have 
been described in the literature. Of particular inter­ est here are the so-called AKS network [1] discovered 
by Ajtai, Kom16s and Szemer6di, and the sorting net­ work proposed by Batcher [2]. The AKS network is 
the only known sorting network with O(lg n) depth. However, the topology of the network is highly ir­ 
regular, and the multiplicative constant hidden by the O-notation is impractically large [1, 8]. On the 
other hand, the network proposed by Batcher has a relatively simple interconnection structure and a small 
constant. This makes it the network of choice in many practical applications, although the network has 
depth @(lg2 n) and is thus asymptotically worse than AKS. This situation has motivated attempts to con­struct 
O(lg n)-depth sorting networks with sim­pler, more regular topologies, and/or a consider­ably smaller 
constant. For sorting networks based * Supported by NSF Research Initiation Award CCR­9111591, and Texas 
Advanced Research Program (TARP) Award #003658480. ts~pp~rted by an MCD Fellowship of the University 
of Texas at Austin. Permission to copy without fee all or part of this mater-d is granted provided that 
the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and 
the title of the publication and its date appear, and notice is given that copying is by permission of 
the Association for Computing Machine~. To copy other­wise, or to republish, requires a fee and/or specific 
permission. on Shellsort with monotonically decreasing incre­ments, this question was answered in the 
negative by Cypher [3], who shows an f2(lg2 n/ lg lg n) lower bound for this class of networks. Another 
class of particular interest are small-depth sorting net­works based on hypercubic networks (e.g., the 
hyper­cube, butterfly, cube-connected cycles, and shufHe­exchange). In this context, Cypher [4] has shown 
that the AKS network cannot be emulated on the cube-connected-cycles in o(lg2 n) time. This paper focuses 
on sorting networks based on the shuffle permutation, a notion that is for­malized below. We will establish 
a lower bound of f2(lg2 n/ lg lg n) for any sorting network in this class. Before elaborating any further 
on this result, we will briefly describe the comparator network model and define the class of shuffle-based 
sorting networks. Most commonly, a comparator network is de­fined as an acyclic circuit of comparator 
elements, each having two input wires and two output wires. One of the output wires is labeled as the 
max-output, which receives the larger of the two input values; the other output is called the rein-output, 
and receives the smaller value. We will use this model of a comparator network throughout most of the 
paper, but will also briefly look at the following alternative model. In this definition, a comparator 
network on n registers is determined by a sequence of pairs (lIi, ;i), O ~ i < d, where IIi is a permutation 
of {o,..., n 1} and ;i is a vector of length in/2] over {+, , O, 1}. The network gets as input a permuta­tionof 
{O,..., n 1} that is initially stored in the registers, and then operates on the input in d consec- 
utive steps. In step i, O ~ i < d, the register contents are permuted according to IIi, and then the 
opera­tion stored in the kth component of ?; is applied to registers 2k and 2k + 1. For a + operation, 
the values stored in the two registers are compared, and the smaller of the values is stored in register 
2k, the larger one in 2k + 1. For a - operation, the values are stored in the opposite order. A O means 
that no operation takes place on the corresponding pair of registers. A l operation simply exchanges 
the values of the two registers. A comparator network is called a sorting network if it maps every possible 
input permutation to the same output permutation. It is well known that the two models of compara­tor 
networks described above are equivalent. While the first model often appears more intuitive, we can use 
the second one to define some interesting special classes of networks by restricting the lpossible choices 
for the permutations IIi. For n = 2d where d is a nonnegative integer, the shufle permutation r may be 
defined as follows. If i&#38;l . . . io denotes the binary representation of some integer i, O < i < 
2d, then the shuffle of i has binary representation i~_2 sssioid_l. We say that a network is based on 
the shuffle permutation if Ifj = x holds for all i. In this paper, we show an fl(lg2 n/ lg lg n) lower 
bound for the class of networks based on the shuille permutation, thereby answering a question posed 
(as an open problem) by Knuth in Exercise 5.3.4.47 of [5], up to a @(lg lg n) factor. The best previously 
known lower bound for this class was the trivial f?(lg n) bound, while the best known upper bound contin­ues 
to be given by Batcher s 61(lg2 n)-depth sorting network. In fact, our lower bound holds for a slighly 
more general class, the so-called delta networks (see, for example, [6]). Interestingly, the result cannot 
be extended to the case where both the shuffle permu­t ation n and the unshuffle operation ~r l are allowed 
in the network. For that case, the %andomized con­struction of Leighton and Plaxton [7] has been shown 
to imply the existence of sorting networks (in the usual sense) with nearly logarithmic depth [9]. Thus, 
one way of viewing the ]Iower bound of this paper is that it establishes a non-trivial separa­tion between 
the power of ascend-descend machines (e.g., the shuffle-exchange when both shuffling and unshuffling 
are permitted) and strict ascend ma­chines (e.g., shuffle only). Of course, it must be em­phasized that 
our lower bound for sorting on the di­rected shuffle-exchange graph only applies to sorting algorithms 
that correspond to shuffle-based sorting networks. On the other hand, this class of algorithms cannot 
be easily dismissed as being overly restrictive. After all, the primary motivation ~or considering hy­percubic 
networks in the context of parallel compu­tation is that they admit elegant and efficient strict ascend 
algorithms for a wide variety of basic opera­tions (e.g., broadcast, parallel prefix, FFT). The remainder 
of the paper is organized as fol­lows. Section 2 contains an informal overview of the lower bound argument. 
In preparation for the actual proof, Section 3 states a number of useful definitions and basic lemmas. 
Section 4 contains the proof of the lower bound. Possible extensions of the lower bound are discussed 
in Section 5. Finally, Section 6 lists some open questions for future research. 2 An Overview of the 
Proof A simple observation concerning comparator net­works is that a sorting network has to make a com­parison 
between all pairs of adjacent values in every input, i.e., any pair of values {m, m + 1} must ap­pear 
on the input wires of some comparator element. Thus, one might attempt to prove a lower bound by maintaining 
a large set {m,. . . , m +1} of values such that no two elements of the set have been compared up to 
a given level of the network, for some appro­priately chosen input. However, if we apply this idea to 
a network with multidelta topology (i.e., several delta networks concatenated together), starting with 
the set of all values, and, whenever two elements of the set get compared, removing one of them from 
the set, then we can lose up to half of the elements in any given level. So using this simple approach, 
we could only show a trivial lower bound of fl(lg n) for the depth of a sorting network. The key idea 
to overcome this problem is to try to maintain a collection of k >>1 sets of incompara­ble elements (in 
our case, k = @(lg3 n)). Because of the specific topology of our networks, in every level we recursively 
have two different collections of sets com­ing from two disjoint subnetworks. We will then show the existence 
of a partial matching between these two collections of sets such that, if we recombine the sets according 
to the matching and remove one element from every pair of elements that get compared, we only lose a 
small fraction of our elements in any level of the network. With this idea, we can show that after passing 
through an entire delta network, the total number of elements in our collection of sets is still large, 
and the number of sets in our collection has not increased significantly. We can then iterate this result 
over con­ secutive delta networks, where after every delta net­ 71 work we pick the largest of the sets 
in our collection, partition it into k sets, and proceed with this new collection of sets. To formalize 
this proof idea, we introduce the notion of an input pattern representing a class of sim­ilar inputs. 
We construct a class of inputs with the desired properties (existence of large sets of mutu­ally uncompared, 
adjacent values) by st epwise re­finement of a given input pattern in every level of the network.  3 
Definitions In the following, unless explicitly stated otherwise, the set of input wires of a comparator 
network will be denoted by W. An input to a comparator network is a total mapping from W to a set V of 
possible input values. We will restrict our attention to inputs T that are permutations of {O,... ,n 
 1}, i.e., lW/ = n, v={o,..., n 1}, and T is 1-1. The set of all 1­1 functions from a set A to a set 
B will be denoted by (A H B), and so the set of all inputs of a given comparator network may be written 
as (W H V). Furthermore, for a function f on a set A and a subset B of A, let ~1~ denote the functional 
restriction of ~ to B. For two functions $0 and fl on disjoint sets A. and Al, we write j. @ jl for the 
union of f. and fl: fo(~) for all z in Ao, and (fo @ fl)(~) = fl (z) for all z in Al. { 3.1 Input Patterns 
and Refinement In the following definitions, we will introduce the no­tions of input patterns and input 
pattern refinement, which will be fundamental to understanding our proof technique. An input pattern 
specifies a set of inputs with certain common properties. Input pattern re­finement is the process of 
imposing additional condi­tions on such a set of inputs. Definition 3.1 Let P be a set and <p be a total 
ordering on P. (a) An input pattern is a total mapping from W to P. (b) Let p., pl be two input patterns. 
We say that  p. can be refined to pl (written p. Ow pl) if (Po(W) <p PO(W )) + (PI(W) <p PI(~ )) holds 
for all wand w in W. (c) Let p be an input pattern and ~ bean input. We say that p can be refined to 
n (written p >W m) if (p(w) <p p(w )) ~ (n(w) < T(zo )) holds for all wand w in W. The set P will be 
referred to as the pattern alpha­bet, and the elements of P are called pattern symbols. Throughout this 
paper, pattern symbols will be de­noted by script letters. Example 3.1 Let P ~f {S, M, Z}, S <P M <P 
L, and W ~f {w. ,, . . . W6 }. Then the input pattern p assigning L to W. and W1 and M to all other wires 
can be refined to all inputs that assign the two largest values (in this case, {5, 6}) to W. and WI. 
We could also refine p to other input patterns, for example to a pattern p such that C is assigned to 
W. and W1, S is assigned to W2 and M is assigned to all other wires. The new pattern p can itself be 
refined to all inputs that assign the largest values to W. and WI, and the smallest value (O in this 
example) to W2. The relation >W defined above is a partial or­dering on the set of input patterns. Note 
that the set V of input values can be regarded as a special case of a pattern alphabet with the ordering 
of the natural numbers. Every pattern can be refined to some in­put, and we could assume that the pattern 
alphabet P is always a subset of V. The pattern-to-pattern refinement in Part (b) of Definition 3.1 would 
then become a special case of the pattern-to-input refine­ment in Part (c). However, in the following 
we will not restrict our choice of P to subsets of V. We will see that this gives us more power of expression 
and, thus, simplifies the proof of our lower bound. We usually think of an input pattern p as a description 
of the set of inputs that p can be re­fined to. This set will be denoted by p[V] Sf {m I T is an input 
such that p Iw n}. When we refine a pattern p. to pl then we are imposing additional constraints on this 
set of inputs. Formally, we have (Po ~w PI) @ (Po[v] 2 p,[v]). Alternatively, the reader may also view 
an input pattern p as a shorthand for a logical predicate on the set W that holds for exactly the inputs 
in p[V]. Definition 3.2 Let p and q be input patterns on W and let U be asubse~ of W; -­ (a) The input 
pattern plu on U is the restriction of p to u. (b) We say that p can be U-refined to q (written  p 
3U q) if p 3W q and p(w) = q(w) holds for all win W\U. Definition 3.3 Let U. and UI be disjoint subsets 
of W, let p. be an input pattern on UO, amd let pl be an input pattern on U1. Then q = p. @ pl is the 
input pattern on U. U 271 such that qluO = pcI and qlul = P1. If for two patterns pO and PI both PO 3W 
PI and pl Ow p. hold, then we say that p. and pl are equivalent. In this case, we have p. [v] = pl [V], 
and the refinement steps from p. to pl and vice versa can be achieved by simply renaming the pattern 
symbols in a way that preserves the ordering <p. Hence, we call this special case of a refinement step 
an or-der­preserving renaming. Example 3.2 Let W ~f {wo,... , W,l l} and P Af {P; Ii 2 O} with Pi <p 
P~+I for all i z O. Then any input pattern p is equivalent to the input pattern pk, k > 0 obtained from 
p by substituting xl pattern symbols pi in p by Pi+k, for all i. 3.2 Comparator Networks We will now 
formalize our notion of a comparator network, and explain how its domain of operation can be extended 
from the set of inputs to the set of input patterns. A network is a mapping from a set of possible inputs 
to a set of possible outputs. In particular, a comparator network A on input wires W and output wires 
W is a mapping from (W t-i V) to (W H V) such that every input r : W H V is mapped to an output # : W 
H V that is a permutation of r. Let A;, A; be two sets of n-input comparator networks. Then A; @ A;, 
the serial composition of A; and A;, denotes the set of all metworks A that can be obtained by connecting 
the output wires of a network from A; to the input wires of a network from A;. We place no restrictions 
on this mapping from output wires to input wires, except that it be one­to-one. As it happens, we will 
often make use of the serial composition operator in the context of singleton sets A; and A;. In such 
a case, we may write, for example, A. @Al (where A., Al are networks) rather than {Ao} B {Al}. Given 
two comparator networks A. and Al on disjoint sets of input and output wires, we obtain the parallel 
composition of A. and Al M the union of the two networks, written Ao Q Al. The set of input (output) 
wires of A. @ Al is the union of the sets of input (output) wires of A. and Al. Definition 3.4 A 2~-input 
comparator network A is called an l-level delta network if 1 = O and A contains no comparator elements, 
or  / > 0 and A is an element of (A. @ Al) @ I?l, where  (i) AO and Al are (1 I)-level delta networks, 
and (ii) 171 consists of one level with at most 21-1 comparator elements,  and such that every comparator 
in rl takes one input from an output wire of AO and the other input from an output wire of Al. Note 
that we do not require the ith level to have exactly 2i 1 comparator elements. This corresponds to allowing 
the delta network to contain O (do noth­ing) and l (exchange) circuit elements, as intro­duced in the 
register model of a comparator net­work. We will call a network a (k, 1 )-multidelta network if it consists 
of k consecutive l-level delta networks, or, formally, if A belongs to AO @...8 &#38;_l where every Ai 
is an i-level delta network, It should be pointed out that this allows an arbitrary fixed permutation 
between any two consecutive delta networks, due to the definition of serial composition. It has been 
shown that any permutation can be routed by two consec­utive forward butterfly networks [10]. Thus, elimi­nating 
the permutations between the delta networks would only increase the depth of the circuit by at most a 
constant factor. A comparator network A was defined as a map­ping from the set of inputs to the set of 
outputs. The following definition extends A to a function from the set of input patterns to the set of 
output patterns (an output pattern is a mapping from the set of output wires to the set of pattern symbols). 
Definition 3.5 Given a comparator network A, an input pattern po, and an output pattern pl, we define 
A(po) = p~ + A(po[V]) = pl[V]. Note that this definition characterizes the behav­ior of a comparator 
network on an input pattern in the way that we would expect: If two pattern symbols PO and PI arrive 
on the input wires of a comparator gate, then the symbol that is larger according to the ordering <p 
will appear on the max-output of the gate, and the smaller one will appear on the min-Output . 73 Definition 
3.6 We say that two input wires WO and wl collide in a network A under an input ~ if the input values 
m(wo) and n(wl ) are compared in A when r is given as input. Note that according to the above definition, 
two values that meet in a noncomparator element, that is, a O (do nothing) or l (exchange) element, are 
not regarded as being compared. In the rest of the pa­per, we do not have to distinguish between the 
differ­ent circuit elements any more, since the entire lower bound argument is based on the notion of 
collision introduced above and extended in the following. Given a network A and an input ~ we can always 
determine whether two input values are compared or not. This is not the case for input patterns, since 
an input pattern can contain several occurrences of the same pattern symbol. This motivates the following 
definition of collision for input patterns: Definition 3.7 Let A be a comparator network, p be an input 
pattern for A, and W. and W1 be two input wires of A. (a) We say that W. and WI collide in A under p 
if they collide in A under all inputs x with p 3 w T. (b) We say that W. and WI can collide in A under 
p if there exists an input n with p o w T such that W. and W1 collide in A under ~. (c) We say that 
W. and WI cannot collide in A under p if there is no input n with p o w T such that W. and WI collide 
in A under r. (d) A set U C W is called noncolliding in A under p if any two wires in U cannot collide 
in A under  P. Obviously, if two wires collide (resp., cannot col­lide) in A under p, then they also 
collide (resp., cannot collide) in A under any refinement p of p. Similarly, if a set U is noncolliding 
in A under p, then it is also noncolliding in A under p . The property can collide is not preserved under 
arbitrary refinement. In the following we restrict our attention to a fixed pattern alphabet P which 
will be used through­out the lower bound argument: Pd&#38;f {&#38;,A?~,j,M~,L~ [ i,j > O}. The ordering 
<p on P is defined by Si <p Si+l, s; <p Xo,rl, /Ki,~ <p cti,j+l , x Z,j <p Mi, Mi <p Xi+l,o, Mi <p .Cj, 
and Li+~ <P l;, for all nonnegative integers i, j. Finally, for a pattern p and a pattern symbol P we 
define the [P]-set ofp as the set {w c W I p(w) = P}. We can now formally express the idea of our lower 
bound argument: To prove that a network A is not a sorting network, we will show the existence of a pattern 
p such that its [Me]-set is noncolliding in A under p and contains at least two elements. We can then 
easily infer that A does not sort all in~uts in p[V]. The pattern p will be constructed usin~ step­wise 
refinement, starting with a pattern containing only the symbol MO.  3.3 Basic Lemmas The following lemmas 
will be used in our lower bound argument. Their proofs are fairly straight forward and we will only sketch 
some of the proof ideas. Readers who are familiar with comparator networks, and who have followed the 
definitions and explanations up to this point, should be able to quickly convince them­selves of the 
validity of these lemmas. Lemma 3.1 Let p be an input pattern on W such that only the pattern symbols 
So, M., and Co appear in p. Let W. and W1 be disjoint subsets of W with W = W. U WI and let A be the 
[MO]-set of p. Let qO and gl be input patterns on W. and WI, respectively, with qo(w), ql(w) not in {S., 
Lo } for all w in A. Then from PIWO ~AnWO qo and PI ~, II AnW1 ql, we can infer p~AqO@q10 This lemma 
ensures that, given an input pattern p for a network A = A. @ Al, we get a refinement of p if we separately 
refine the input patterns plWO for A. and plw, for Al in the way described, where W. and WI are the sets 
of input wires of A. and Al, respectively. Lemma 3.2 Let A be a d-level delta network, p be an input 
pattern for A, and To and T1 be pattern symbols in P. Let A. be the [To]-set ofp, and let Al be the [Tl 
]-set of p. If A. and Al are each noncollid­ing in the first d 1 levels of A under p, then any two wires 
W. in A. and WI in Al either collide in level d under p, or they cannot collide in that level. 74 To 
prove the correctness of this lemma, note that and t(l) ~fk3 + lk2 sets Mo, . . . , Mt(l)-l of input 
an input value on a wire w in A. or Al will follow wires such that the following properties hold: the 
same path through the first d 1 levels of the network under all inputs m with p Ovr n. Hence, we (1) 
Every M, is the [Mi]-set of q, can identify the locations of all input values in A. (2) Every kf~ is 
noncolliding in A under q, and Al in level d. This is also the underlying idea in the next lemma, which 
shows a 1-1 correspondence (3) BcA,and between the Mi on the input wires and those on the output wires 
of a network, provided th~at the [Mi]-set (4) IBI z IAI -~, is noncolliding. where B ~f Uo<i<t(l) i. 
 Lemma 3.3 Let A be a comparator network in AO @ Al, let i be a nonnegative integer, and let p be an 
Proofi We will prove the lemma by induction over input pattern for A. such that its [Mi]-set A is non­ 
1, the number of levels in the delta network. colliding in A. under p. Let q ~f A.(p) be an input pattern 
for Al and let B be the [Mi]-set of q. Then Base Case: 1 = O for every q with q >B q there exists a p 
with p 2A p We define the sets Mo,... , M~to) -1 by setting M. such that q = A. (p ). Furthermore, if 
the [Mi]-set to A and all Mi, 1 ~ i < t(0), to the empty set. of q is noncolliding in Al under q , then 
the [Mi]-set If we set q = p, then Properties (1) to (4) are of p is noncolliding in A under p . satisfied. 
In particular, Property (2) is satisfied since a O-level delta network does not contain any To verify 
the validity of the final lemma, note comparators, and hence every set is noncolliding that the paths 
taken by the Mi-sym~bols through a in the network under every pattern. network are not changed if we 
rename the rest of the symbols in the way described in the lemma. Induction Step: 1 A 1 + 1 An (1+1)-level 
delta network A consists of two 1-Lemma 3.4 Let A be a comparator network, let p level delta networks 
A. and Al, and an (1+ l)th be an input pattern for A, and let A be the [Mi]-set level rl+l satisfying 
the conditions of Defini­ of p. Let pi(p) be the input pattern obtained from tion 3.4. The input wires 
W of A can be par­ p by changing all pattern symbols ? with P <p Mi titioned into the sets Wo and WI 
of input wires def to $0 and all pattern symbols P with M ~ <p P to of A. and Al, respectively. Let PO 
= PITVO and LO. If A is noncolliding in A under p, then A is also pl ~f plwl. Then A. ~f A fl WO is the 
[Me]-set noncolliding in A under pi(p). of p. and Al ~f A n W1 is the [Me]-set of P1. Applying the induction 
hypothesis to AO, PO, and  The Lower Bound A. we can infer the existence of an input pattern This 
section contains the proof of the lower bound qo with PO ~AO qo, and of t(l) disjoint sets Mo,i,, O S 
i < t(l), such that for sorting on multidelta networks. The argument is divided into three major steps: 
First, a lemma will every Mo,i is the [Mi]-set of qo, be established that shows the existence of a pattern 
 every Mo,i is noncolliding in AO under qo, with a (large [Me]-set that is noncol]iding in a single delta 
network. This is the main part of our proof, and I?. c Ao, and also the one that employs the novel proof 
ideas. A IBO[ z IAOI -~, subsequent theorem iterates the result of the lemma, thus showing how to maintain 
a large noncolliding def where B. = Uo<i<f(l) M(),i. [Me]-set over several stages of a multidelta network. 
Finally, a corollary establishes the lower bound. Correspondingly, for Al, PI, and Al we get an input 
pattern ql, disjoint sets Ml ,i, O < i < t(l), and a set B1, with the same properties. Lemma 4.1 Let 
Abe an l-level delta, network, 1>0, and let p be an input pattern for A such that only the We will now 
construct the sets MiJ O ~ i < t(l -t pattern symbols So, &#38;, and Mo occur in p. Let A 1), by combining 
the sets Mo,i of AO with the sets be the [Me]-set of p, and let k be a positive integer. Ml ,j of Al, 
according to some partial matching Then there exists an input pattern q with p 3A q to be determined 
in the following. Note that, due to the topology of a delta net­work, no element of a set Mo,i can collide 
in A with any element of a set Ml ,j before level 1 + 1. Also, because of Lemma 3.2, any two elements 
W. in Mo,i and WI in Ml ,j either collide in level (1+ 1) of A under go @ gl, or they cannot collide 
in that level. For O ~ i,j < t(l), we define C;,j as the set of all W. in Mo, i such that W. collides 
with some WI in Ml ,j in level 1+ 1 of A under qO@ ql. For 0<i<k2and O~j<t(l+ l), we define ( Mo<i O~j 
<i, Z(i ;j) i ~ j < t(l), M(i, j) ~f M1,j_i t(l) s j < t(l) + i, and 0 t(l)+ i<j<t(l+ l),{ where Z(i, 
j) = (Mo,j \ C j,j-i) u ~l,j i- By their construction, the sets M(i, j) are non­ colliding in A under 
q. @ ql. If we let Li ~f  uig<t(l)Cij-i)osi <~21then IJ M(i,j) = (~o\&#38;)UBI. O<j<t(l+l) The C i,j 
are pairwise disjoint and contained in B.. Thus, the Li s are also pairwise disjoint and contained in 
Bo. Hence, there must be an io, O ~ i. < lc2, such that lLiO I ~ ~. This i. de­ termines the partial 
matching between the Mo,i and the Ml,j. We now define our sets Mj, O~ ~ < t(l + 1) as Mj ~f M(io, j) 
and show that this choice satis­ fies Properties (3) and (4). We have B Gf Mj u O<j<t(l+l) = (B. \I&#38;)UB1 
C BoUBI C AoUIil = A. This establishes Property (3). Verifying Prop­ erty (4) is also straightforward: 
IBI = \Bol + \Bll -IL,OI l.IAOI y -l~iol > lAol ~+llu = (IAOI + IAII) (1 -~) -IL,OI To complete our 
proof, we have to construct a refinement g of p such that Properties (1) and (2) hold for q and the sets 
Mj. We do this by Ao-refining qo to some q; and Al-refining ql to some q{. Then PO 3 AO q~ and P1 ~A1 
qj, and by Lemma 3.1 the pattern q ~f q: 6 q( is an A-refinement of p. We refine q. to q; in the following 
steps: 1. First change all pattern symbols M i and Xi,j with i ~ t(l) to M~+kZ and Xi+kz,j> respectively. 
 2. Then change the pattern symbols of all wires in Ci,i_iO with io < i < t(l) to Xi,jO, where j. is 
chosen such that before this step only symbols Xi,j with j < j. appear in the pattern.  The steps for 
the refinement of ql to q; are: 1 . First change all pattern symbols Mi and Xi,j with i > t(l)+io to 
kfi~.kz and Xi+kz,j> respectively. 2 . Then change all pattern symbols M ~ and Xi,j with O< i < t(2)toMi+io 
and Xi+io,j, respectively. All refinement steps described above are order­preserving renamings and, thus, 
valid refinement steps. Steps 1 and 1 remove all symbols M ~ and Xi,j with t(l) ~ i < t(l + 1) from the 
pattern. Then Steps 2 and 2 can be executed to perform the matching between the sets Mo,i and Ml ,j. 
Note that Steps 1 and 1 are not really necessary since we can assume that the patterns qo and ql themselves 
have been constructed using the above refinement steps, and that, therefore, no symbols Mi and Xi,j with 
t(l)< i < t(l+l) exist in the pattern. However, we have chosen not to make this assumption a part of 
our induction hypothesis. The pattern q = qj @ q~ has been constructed such that the sets A/fi are the 
[M ~]-sets of q, so Property (1) is satisfied. To see that Property (2) holds, note that Ci,j, the set 
of input wires of Mo,i that collide with an input wire of Ml ,j in rl+l under qo @ ql, also contains 
the same colliding wires with respect to q = q( @ q~. The sets M. ,i are noncolliding in A. under q&#38; 
and, thus, also noncolliding in A under q. By analogy, the sets Ml ,j are noncolliding in A under q. 
Hence, Alj = \ u Ml,j io (M(),j Cj,j io) is noncolliding in A under q. 1 Theorem 4.1 Let A be a (d, 
1 )-mulkidelta network with d, 1 ~ O. Let W be the set of input wires of A, and let n = ]W[ ~ 8 be the 
number cif input wires of A. Then there exists an input pattern p such that the following properties 
hold, where D is the [MO]-set of P: (1) Only the symbols So, M., and Lo occur in p, (2) D is noncolliding 
in A under p, and (3) IDI >~.  Proofi We will prove the theorem by induction over d, the number of 
consecutive delta networks in A. Induction Start: d = O Choose D = W and p such that p(w) = M. for all 
win W. Induction Step: d ~ d + 1 A (d + 1,1 )-multidelta network A consists of a (d, 1 )-multidelta 
network A. followed by a single delta network A, or, formally, A c AO @A. By the induction hypothesis 
there exists a pat­tern p such that the following properties hold, where D! is the [Me]-set of p : Only 
the symbols So, M., and Lo occur in P >  D is noncolliding in A. unlder p , and  ID 1 z ~.  Then the 
input pattern q ~f A,l (p ) for A con­tains only the symbols So, M., and LO. The [Me]-set 1? of q has 
size [l? \= ID [ ~ ~. We can now apply Lemma 4.1 with A, q , and 1 = k = lg n. By the lemma, there exists 
an input pattern q with q >Bf q and t(lg n) = 2 lg3 n disjoint sets Al.,... , Mtflg ~J.-l clf input wires 
of A such that Every &#38;fi is the [Mi]-set of 9 ,  Every AIi is noncolliding in A under q ,  B cB 
, and  Ii? \ > IB I -Ig,j: 1 ~ &#38;-(1 *),  77 where B gf UOSi<t(Ign) i. By averaging, there must 
be a set .MiO, O s i. < 2 lg3 n, of size at least n 1n l ~ ~g4(d+l) n ~ 2 lg4d+3 n () lg n where the 
last inequality follows from the fact that ~(1 l/lgn) ~ l/lgn for all n ~ 8. By Lemma 3.3, there exists 
an input pattern p for A with p ODI p such that q = A. (p ). The set &#38;liO is noncolliding in A, hence 
the [MiO ]-set D of p is noncolliding in A G A. @JA under p . Then, by Lemma 3.4, D is also noncolliding 
in A under p ~f ~io (p ). By renaming in p all pattern symbols Mio to MO we get a pattern p with [Me]-set 
D such that only the symbols So, MO, and LO occur in P, D is noncolliding in A under p, and  [Dl = 
l~iol ~ ~g4(d $1)~.  This concludes the induction step. 1 Corollary 4.1.1 All n-input sorting networks 
with multidelta topology have depth Q ~ . () Proofi Let A be a (d, lg n)-multidelta network with d < 
&#38;I&#38;. Then by Theorem 4.1 there exists an input pattern p and a set D c W such that D is the 
[Me]-set of p,  D is noncolliding in A under p, and  IW~  > ,g(l+ik)n =1 Since ID[ is an integer, 
D must contain at least two elements, wo and WI. Since p(wo) = p(wI) = Mo, we can refine p to an input 
n such that the wires W. and W1 have adjacent input values, that is, n(wo) = m and n(wl) = m + 1 for 
some integer m. Since D is noncolliding in A under p, the input values n(wo) and m(wl ) never get compared 
in A under input T. Let x be the input obtained from r by exchang­ing the input values n(wo) and T(W1 
), Then the net­work A performs the same permutation on input m and on input n . Hence, the network cannot 
sort both T and T . o 5 Extensions of the Result This section discusses a few implications/extensions 
of our lower bound. First, we point out that the proof of the lower bound still holds if the network 
is allowed to be adaptive , in the following sense: If we write the net­work as a sequence of pairs (IIi, 
;i), then the labeling ;i of the ith level with elements from {+, , O, 1} can depend on the outcome of 
all the comparisons made in all previous levels. Note that in our lower bound argument, it was never 
assumed that the labeling is fixed beforehand; instead, in every level, we allowed the adversary to choose 
the labeling in an arbitrary way. Hence, the validity of the argument is not af­fected by allowing the 
construction of the network to be adaptive. Leighton and Plaxton [7] have designed a shuffle­unshuffle 
comparator network (i. e., a comparator net­work in which the permutation between successive levels can 
be either shuille or unshuffle) of depth O(lg n) that sorts all but a superpolynomially small fraction 
of the inputs. Their technique can be ap­plied to construct a shufie-based network of depth O(lg n lg 
lg n) that sorts all but a polynomially small fraction of the inputs. This implies that we cannot hope 
to prove a lower bound close to f2(lg2 n/ lg lg n) for the average case complexity of shuffle-based net­works, 
where the average case complexity is defined in the following manner. First, determine for ev­ery possible 
input the depth of the first level of the network at which the input becomes sorted (i.e., agrees with 
an appropriate fixed assignment of ranks given to the nodes at that level). Then define the av­erage 
case complexity as the average of this depth over all inputs. It is not difficult to see that the O(lg 
n lg lg n) network mentioned above, followed by a bitonic sorter (say), achieves an average sorting depth 
of O(lgnlglg n). A similar argument can be used to show that we cannot hope to extend the lower bound 
to the randomized complexity of shuffle-based sorting net­works. In order to construct a randomized shuifle­unshuffle 
network that sorts all inputs with high prob­ability, Leighton and Plaxton [7] use an additional randomizing 
circuit element that interchanges the input values with probability 1/2, and leaves them unchanged otherwise. 
This new element can be used to construct a shuffle-based randomized sorter of depth O(lg n lg lg n). 
For the class of shuffle-based networks, our lower bound also rules out a seemingly attractive way of 
de­signing small-depth sorting networks. The O-1 princi­ple says that every comparator circuit that sorts 
the 2 inputs in {O, l}n is a sorting network. One might hope to strengthen this result by showing that 
there exists a relatively (small subset of the O-1 permu­tations such that every network that sorts these 
per­mutations would be nearly a sorting network. We formalize this idea by defining a representative 
set (with respect to the class of shuffle-based networks) as a subset of {O, I}n such that for any network 
17 that sorts these permutations, there exists a shuffle­based network A of depth o(lg2 n/ lg lg n) such 
that 17@ A contains a true sorting network. Assuming the existence of a representative set of polynomial 
size, and using Corollary 4.2.1 of [9], the existence of an O(lg n lg lg n)-depth shuffle-based network 
for sorting all but a polynomially small fraction of the inputs im­plies the existence of a o(lg2 n/ 
lg Ig n)-depth shuffle­ based sorting network. Since this would contradict our lower bound, we can conclude 
that there does not exist a representative set of polynomial size. This argument can be strengthened 
somewhat. The technique of Leighton and Plaxton [7] can also be used to construct a o(lg2 n/ lg lg n)-depth 
shuffle­based sorting network that sorts all but an ~ dgf 2 Z.(lg n/ Is ISn) fraction of the inputs. 
Arguing as in the preceding paragraph, there cannot exist a representative set of size less than I/e. 
 6 Concluding Remarks In this paper, we have shown an Q(lg2 n/ lg lg n) lower bound on the depth of sorting 
networks based on the shuffle permutation. It would certainly be interesting to close the @(lg lg n) 
gap that remains between the upper and lower bounds. Another possible direction for future research would 
be to consider other classes of networks based on restricted sets of permutations. For instance, it would 
be interesting to prove a w(lg n) lower bound for the class of sorting networks based on the shuf­fle 
and unshuflle permutations. Of course, we cannot discount the possibility that depth O(lg n) may be achievable 
within that class. Other interesting classes could be obtaine d by restricting the number of dif­of incomparable 
sets to other problems in connection with lower bounds. ferent permutations We might ask, for sorting 
network emutation. that can appear example, whether xists that is based in the network. any small-depth 
on a single per- Finally, one nique of maintaining might try to apply and recombining our proof tech­a 
large number  References <RefA>[1] M. Ajtai, J. Kom16s, and E. Szemer6di. An O(n log n) sorting network. Combinatorics, 
3:1­19, 1983. [2] K. E. Batcher. Sorting networks and their ap­plications. In Proceedings of the AFIPS 
Spring Joint Computer Conference, vol. 32, pages 307­314, 1968. [3] R. E. Cypher. A lower bound on the 
size of shell­sort sorting networks. In Proceedings oj the Ist Annual ACM Symposium on Parallel Algorithms 
and Architectures, pages .58-63, June 1989. [4] R. E. Cypher, Theoretical aspects of VLSI pin limitations. 
Technical Report R.J7115, IBM Al­maden Research Center, November 1989. [5] D. E. Knuth. The Art of Computer 
Program­ming, volume 3. Addison-Wesley, Reading, MA, 1973. [6] F. T. Leighton. Introduction to Parallel 
Algo­rithms and Architectures: Arrays, Trees and Hy­percubes. Morgan-Kaufmann, San Mateo, CA, 1991. [7] 
F. T. Leighton and C. G. Plaxton. A (fairly) sim­ple circuit that (usually) sorts. In Proceedings of 
the 3 lst Annual IEEE Symposium on Founda­tions of Computer Science, pages 264 274, Oc­tober 1990. [8] 
M. S. Paterson. Improved sorting networks with O(log n) depth. Algorithmic, 5:75-92, 1990. [9] C. G. 
Plaxton. A hypercubic sorting network with nearly logarithmic depth. In Proceedings of the Zdth Annual 
ACM Symposium on Theory of Computing, May 1992. To appear. [10] F. Sovi5. On rearrangeable networks of 
the shufile-exchange type. Computers and Artificial Intelligence, 7:359-373, 1988.</RefA> 
			
