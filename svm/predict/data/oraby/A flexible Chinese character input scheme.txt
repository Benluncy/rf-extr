
 A Flexible Chinese Character Input Scheme S.C. Hsu Computer Laboratory University of Cambridge New Museum 
Site Cambridge CB2 3QG United Kingdom ABSTRACT A very flexible and easy-to-use scheme which possesses 
unique advantages over existing systems is presented in this article. The scheme is based on the partitioning 
of a character into parts, A character is inputted by specifying the sequence of character parts descriptions, 
which is then matched against the standard sequences of the characters in the character set. A character 
part is either described with a unique key or its stroke count. The matching algorithm allows the characters 
to be partitioned flexibly and in­putted in many different ways. An automatic binding mechanism offers 
very high adaptability to the input style of the user. The user need not remember all the key bindings 
before he can in­put Chinese and the scheme is also capable of tolerating many variations in character 
style and/or errors. CR Categories and Subject Descriptors: H.5.2 [Information Interfaces and Presentation] 
:User Interfaces; 1.7.1 [Text Processing] :Text Editing. Generat Termx Human Factors, Languages, Performance 
Additional Keywords and Phrases: Chinese input system, Ctt­nese text processing. INTRODUCTION The large 
number of Chinese characters (there are over 5000 com­monly used characters) and the fact that there 
exists no simple structural pattern across the characters make it difficult to design an easy-to-use 
and efficient input scheme for the Chinese language. More than 100 methods (30 in Taiwan alone) have 
been released [7, 8]. These input methods can be generally classified into three categories: 1. Arbitrary 
Codes Under these schemes, some arbitrary codes or key sequences are assigned to the characters. The 
Big­keyboards[~ 3] 1, Telegraph Code[6], or the Two Strokes Input Method [3, 11] are examples of these 
schemes. 2. Phonetic Systems These systems are based on the pronuncia­tion of the characters. The almost 
universally adopted pho­netic system is the Pinyin system based on the Mandarin dialect[2, 3, 10].  
Although the characters on the Big-keyboards are. usuatly grouped into families, the relation betwam 
the key and the character is of practicality no significance at atl. Permission 10 copy wiIhouI fee all 
or part of this material IS granted provided that the copies are not made or distributed for direct commercial 
advantage, the ACM copyright notice and the title of the publication and its date appear, and notice 
is given that copying is by permission of the Association for Computing Machinery. To copy otherwlsa, 
or to republish, requires a fee and/or specific permission. @ 1991 ACM O-89791 -451 -l/91 /0010 /0195 
. ..$5CICI 3. Structural Schemes These are based upon the form, the struc­ture and the shape of the characters 
;nd the arrangement of strokes within a character etc. Examples include Three-Comer Coding Method[7], 
Tsang-Chi and Dragon Input Method[4] and Six-Digit Coding Method[9]. Of the three categories, arbitrary 
coding schemes require the user to memorize the code for each character by rote and are obviously not 
good candidates for general use. Phonetic systems are quite competent input methods for gen­eral use 
for speakers of the particular Chinese dialect. Not much training is required if the romanization scheme 
or the use of pho­netic symbols have been learnt. The users need not know how to write the characters 
in order to enter them, though this also im­plies that it would not be possible for a user to key in 
a manuscript without knowing how to pronounce the characters. However, pho­netic ambiguities have always 
been the major problem with these systems. Statistics showed the number of ambiguities for a par­ticular 
pronunciation in the Pinyin system ranges from 3 to over 100 with an average of 17 [9]. The use of secondary 
indexing or selections by the user is almost unavoidable. Structural schemes are potentially the best 
choice because the form of the characters obviously provides an unambiguous spec­ification of the characters 
themselves. Also, these schemes are independent of the dialect spoken by the user. However, the exist­ing 
structural input/selection schemes often suffer from the serious problem of having complicated and incoherent 
rules with lots of exceptions which made them inefficient and/or very hard to learn. 2 AN IDEALSTRUCTURALSCHEME 
Structural schemes require the user to supply a description of the characteristic features of the character 
to be typed. The main problem with structural schemes is that the way in which the characteristic features 
described by the users is quite subjective. For example, The character fi could very reasonably be broken 
downinto:~+~+u;~+~+l.h 01 %+ U. In fact any of these descriptions is good enough to speci~ the original 
character clearly. Therefore an ideal structural scheme should allow the user to describe the character 
parts in any reasonable ways and still be able to select the character by recognizing that the description 
is a valid one for that particular character. This ideal can be achieved if the description of the character 
Pam undc.r an input .mheme satisfies the following property: D(a) @D(b) = D(ab) where a and b are some 
Chinese characters or character parts and ab is the character or character part formed by combining a 
and b, D(a) is an unambiguous description of a and @ is an operator on two descriptions.  November 11-13, 
1991 UIST 91 195 The user can specify the sequence of DQJ i) of the parts of the character artd the system 
should evaluate D@,) cBD(w) CEI . 9D(pn) to get the unambiguous description of the character itself. 
 Of course the descriptor D(p) has to be simple enough to be specified by the users for the scheme to 
be useful. We are going to describe an input scheme which aims towards this direction. 3 S-SCHEME S-Scheme 
is a new structural input scheme for Chinese characters. It is designed with the aim of allowing the 
user to describe the structure of a character in a very flexible way. Under S-Scheme, a Chinese character 
is specified by a se­quence of descriptions of the parts or the description of the com­plete character 
itself directly. The system then determines from the sequence what character would match such a sequence. 
It would be ideal to have a simple and yet unambiguous de­scription for all character parts or even characters 
themselves. Of course this is unrealistic or the input problem would have been solved. However, it is 
still practical to assign a set of unique keys to a small set of character pwts or characters. The keys 
will then be the unambiguous descriptions for them. For the rest of the character parts or characters 
which have not been assigned keys, we use an ambiguous description to describe them the number of strokes 
in a character part or character (woke cowl in short). 3.1 STROKE COUNT AS DESCRIPTORS A stroke is the 
smallest unit in composing a character. The most complex Chinese character has 64 strokes, while there 
are two characters with only one stroke. Over 99% of the characters have the number of strokes in the 
range 1 29. Stroke Count= 10Stroke Count.5 Figure 1: Stroke Counting Stroke count provides a hint to 
the complexity of the character part or character we are describing. Using the stroke count of the whole 
character alone is obviously quite inadequate and the process of counting the number of strokes in each 
character is also quite tedious when the character is complicated. More information about the structure 
of the character can be supplied by specifying the stroke count of each part of Ihe character. There 
are natural partitions for most Chinese characters. Many of the parts are physically detached from others 
and some of the parts are valid characters themselves and therefore can be easily identified as a distinguished 
part. . - . . , ..  . Parts of a Character Figure 2: Natural Partitioning of Characters Therefore 
if the characters are partitioned reasonably consis­tently, the sequence of stroke counts alone will 
be able to give a reasonably good description of the structure of the complete character.  3.2 UNIQUE 
KEYS FOR PRIMITIVES It is obvious that a more precise description of the character can be made if more 
parts are described unambiguously. Therefore we have chosen a set of most frequently used character parts 
and have assigned a set of unique keys to each of them. We call a character part or character in the 
set a primitive. The selection of the set of primitives in our implementation is based on the statistics 
from [8i and it is listed bel~w. Keys: a z Keys: A-Z Keys: 1 0 Keys: ; <I>~ etc. (Punctuation symbols) 
There is also a set of extended keys which the user may bind to any characters in the character set to 
suit his/her character de­composition style. This allows expert users who are willing to remember a larger 
set of primitive keys to further increase the input speed. In our implementations, these keys are actually 
realized as the physical key strokes on a normal ascii keyboard. 3.3 OTHER ALTERNATIVE DESCRIPTORS Traditional 
stroke count might not be the only possible or the best alternative descriptor for character parts. In 
fact, any descriptions that satisfy the properties stated in section 2 could be employed. An alternative 
to the traditional way to count the number of strokes in a character might be to employ a modified stroke 
count­ing method. Traditionally two edges forming an angle pointing to the top-right bottom-left directions 
are always written as a single brush stroke and therefore count as one stroke (stroke 2 and 3 of the 
character on the left stroke 3 and 5 of the character on the right in figure 1). This could be very confusing 
for anyone who is not familiar with written Chinese. We propose to actually count all smooth edges separated 
by shq turns as individual strokes (except those optional small aesthetic upward ticks at the end of 
downward strokes which are not counted). Stroke Count=7 Stroke Count=13 Figure 3: Modified Stroke Counting 
Mettrod The use of this modified stroke counting system has the ad­vantages of being intuitive and uniform. 
Symmetrical parts will always have the same number of strokes under this system. Boxes can also be easily 
seen as having 4 strokes instead of 3 as in the  UIST 91 Hilton Head, South Carolina traditional system. 
However, to accommodate for those who are used to the traditional way of stroke counting in employed 
in Chinese dictionaries, a switch has been provided in our newest implementations to specify the stroke 
counting system the user would like to employ. The stroke counts in the examples shown in this paper 
are in the traditional system. The discussions are valid for both systems however. 4 DESCRIPTOR SEQUENCE 
The sequence of descriptions of character parts (descriptor) joined together with additive operators 
+ for specifying a character under our scheme is called a Descriptor Sequence (DS). The descriptors can 
either be a key of a primitive or a stroke count. The ordering of the keys or stroke counts in a DS is 
significant. The ordering is used for distinguishing characters with the same character parts but arranged 
in different ways. This is specified in an up-down left-right order. To specify a character, the user 
partitions the character into parts. The DS is then composed by entering the keys of the parts. If a 
part is not a primitive of the system or the user forgets that it is one, a stroke count can be entered 
instead. %: DS= U+* ~:DS=*+U %!i:DS=S+++U; =+2+LI; 7+y+3 etc. 4.1 THE VALUE OF A DESCRIPTOR We have classified 
the strokes of Chinese characters into eight types. A feature array of the types of strokes (i.e. features) 
present in the primitives is also stored with the primitives. This is represented as an array of eight 
bits. Figure 4 Feature Array The value of a descriptor is a structure consisting of a stroke count and 
a character feature range which is represented by an upper bound feature array and a lower bound one. 
The description of a primitive, i.e. a key, carries an upper bound feature array which represents the 
possible features it would possess in all variated forms it would appear in standard written styles; 
while the lower bound feature array represents the features it would at least possess for that primitive 
no matter which form it appears as. For example, the character ~ is often written in the form J~~~. 
Therefore the upper bound feature array of it has the , ~ and \ bits set while the lower bound feature 
array has only the bit set. Since a stroke count could be a description of all character parts with 
the particular number of strokes, the upper bound feature array is therefore a fully set bit pattern 
while the lower bound is a null pattern. The descriptors in a DS can be summed together. The result is 
a value with a stroke count which is the sum of all the stroke count of the descriptors, and a feature 
range which is the bitwise­OR ed value of the upper and lower bound feature arrays. For example, E: 
El+ n+ u + x( =~J~~) Stroke count 13 4 2 3 4 Upper bouud 11111100 Olloollxl Ixiololco O1lIXIIIYI 10011OOO 
Lower bound 11111100 Olloolal 00010100 O111111oo 1000OOOO Two descriptors are said to be compatible to 
each other if they have the same stroke count and the intersection of two feature ranges are not empty, 
i.e. there exists a feature array pattern that is within the range of both of them. 5 COMPATIBILITY OF 
DS S A startdard DS, which is a well-formed DS describing the structure of a character completely, has 
been defined for each of the 5401 Chinese characters of the part 1 (more frequently used) of the BIG5 
characters set[5]. They are organized as a directed acyclic graph. The significance of this structure 
is discussed in section 9. A DS specified by the user will be matched against those standard DS s with 
the same value. The character associated with the best matched standard DS will be selected. The user 
does not have to supply a DS exactly the same as the standard one to input a character. The keys or stroke 
counts in a DS can be matched with either (i) another key or stroke count with the same value; or (ii) 
a sequence of keys and/or stroke counts the values of which sum up to one that is compatible to the value 
of the original one.  For example, 1 +2+3+4 is compatible with 3 + 1 + 2 + 4 but notl +3+2+4. The latter 
fails because neither rule (i) nor (ii) applies for the 2 in the upper DS or the 3 in the lower DS. 6 
AN ADDITIVE CODING SCHEME Here is the main difference between the S-Scheme and most other systems. The 
descriptors in our scheme carry some accumulative information about the part of the structure they represent. 
A se­quence of descriptors in our scheme can be replaced by a code of the combined form and vice versa. 
For example, the character J&#38;\ can be coded as U + 1+I~\ but ~ -&#38; will be just as good (or even 
better) to select the character. The reason why this is possible is that the codes cany additive information 
in contrast to rather arbitrary or not very well defined featural information in most other structural 
coding schemes. Because of this property, new primitives can be defined which will work just as well 
as the standard ones. Also, any additive opera@rs cuo be defin~ for composing DS s. A subtraction operator 
has been implemented in our prototype system which is quite useful in modifying a primitive to a sim­ 
ilar form of it. For example, {% can be coded as A + 3-1 or A + % -~ flhe subtraction operator has been 
assigned a higher precedence over the addition operator to avoid the use of parentheses). A multiplication 
operator would be an interesting one which might be used to represent some repeated structures. However, 
it has not been introduced because of the limited number of such cases. The syntax of the DS will also 
become more complicated as parentheses will have to be introduced to resolve the precedence. The extra 
keystrokes for the operators and brackets could make it even more inefficient. 7 FAULT TOLERANCE Though 
there are national standard dictionaries which defines the correct or approved form of the characters 
and the strokes com­posing them, it is still not unusual for people to write characters in some alternative 
forms or to have some parts of the charac­ters wrongly written. It would be nice to have the input system 
  November 11-13, 1991 UIST 91 which is able to accept these alternative forms and to tolerate the recorded 
will be used for matchktg against the subsequent input common writing errors and still have the character 
the user has in DS s in exactly the same way as with the standard DS s. In this mind selected correctly. 
way the system will soon adapt to the particulw DS composition The S-Scheme by its nature will be able 
to tolerate alternative style of the user. In our implementations, the most recently stored character 
parts with the same number of strokes and with the same or successfully re-matched 1000 DS s are stored. 
This buffer is feature array. Therefore the use of ~ instead of d for the top saved under the user s 
name after each session and can be carried along to other sites if needed. part of R ; ~ instead of 
~ for the lower part of ~ etc. are perfectly ahight as long as they are not the characteristic features 
The standard DS of the characters is stored as a directed acyclic which distinguish the characters obviously, 
correct character graph (DAG in short), with the root or intermediate nodes being the Chinese characters 
in the character set and the primitives as However, there also exist quite a few character parts which 
the led-nodes. The links of the graph makeup the decomposition parts have to be used for characteristic 
features. pattern of the characters, i.e. the partitioning of the characters. have alternative forms 
with different features and/or stroke counts. These are illustrated in figure 5. Some of the most common 
ones are listed below: Alternative forms Example \/ 1[ the top part of E4 7J( >< the h-ttom part of Eli 
J the left part of?* ;L the right part of ~ ] l\ / P the lower part of ~ In our implementations, a 
list of these alternative forms or common mistakes have been stored. Once a component of the input DS 
has been found to be one of those in the list, the DS will be replicated and the the part concerned will 
be replaced by the alternative in the replica. The DS s generated in this way will be used for the matching 
against the standard DS s. It seems that the number of replicas will grow exponentially with the number 
of components in the input DS. However it is very unlikely to have characters which are composed mostly 
of these fuzzy parts. Moreover, the length of an input DS is usually quite short. Although the ordering 
of the keys or stroke counts is used for distinguishing characters with the same character parts but 
ar­ranged in different ways, some characters have components that are relatively jumbled together and 
the user might find it difficult to decide which parts should come before the others. We have introduced 
an extra piece of grouping information in the stan­dard DS s. The structures with ambiguous ordering 
are grouped together. On matching with the user s DS, the ordering of the QLeaves Nodes (Primitives) 
components inside the group is no longer significant. Only the Dhmmncdiate N odes (Chinese characters) 
 existence of the components and features are compared. Examples: R: ( A*A ) %:(=A )13 *:(t-uu)-lK 5E(~IE))L 
Figure 5: Directed Acyclic Graph Stmcture of the Standard DS storage EXAMPLES The use of a DAG structure 
for the Database has a few very import~t advantages Input Selected Top 10 Matched 1. Redundancy in descriptions 
of characters repeatedly ap- DS char. characters peared as components of other characters is eliminated. 
This 6+7 [WHM.MM$%H%%25R] Vague DS also minimizes inconsistencies in descriptions of the same components 
in different characters. *+ 7 %3 [%?%%%% -----] More detaits %% s% [%---------] Unsmblguow 2. The matching 
of user s DS can be performed in greater ac­curacy, because the DAG contained not just information of,% 
(t,, + 3 .% [a%%IUl$3!@atkW%iE] the lowest breakdown level of the components but also how [,J\---------] 
)( I 4 Polymorphism the components are grouped to form intermediate level sub­ ------ [Jj. ­ \ 1. 41 
of Ji components. Therefore the system can recognize any grain-2+AB 7$ [%wEH imwmw; CrOupcd iness of 
component partitioning from the coarsest chunks to the finest details. Taking the characters shown in 
figur~ 5 as an example, if the user has, by any chance, bound @ as a user defined h= B % [amtmimmfmmwt] 
top part 9 ADAPTING TO THE USERS STYLE primitive to a certain key, the character % can be typed out 
in absolute accuracy with a simple DS of 2 components: When the user uses a very vague DS to spcxify 
a character and receives a list of best matched ones all with not very high certain!y, w + 9 the user 
may select the intended one with a mouse click or a key This might look obvious but t$e reason why this 
is possible press. This DS will then be memorized in a buffer we call the is because the components /% 
 &#38; ~ matched exactly DS Memory together with the selected character itself. The DS so with the the 
first level decomposition of the character ~# . UIST 91 Hilton Head, South Carolina If the user does 
not have %$ in hand as a primitive but ~ and used the SSE: ti+; +m+Y1- instead, the system still recognizes 
with absolute confidence that the user is looking for the character ~# .  3. Highly responsive adaptability 
can be achieved with this complete knowledge of-the ch~acter structure. Say the user has used a very 
innovative way to selwt the character ~ . The system will then save this DS with the character R in the 
DS Memory. This will cause the system to recognize the new DS style for not just the character ~ but 
all other characters with the component )% under their structural hierarchy in the DAG. Therefore characters 
like fi~ , g~ , W etc. can all be selected using the new DS style for the $$ part. Of course the original 
Standard DS style can still be used because the orginal definition in the DAG is never replaced. 10 
ADVANTAGES OF THE S-SCHEME To summarize, the S-Scheme has quite a lot of desirable properties and some 
of them are unique in comparison to most other coding schemes: Most well composed DS s can speeify a 
character unam­biguously. Very simple and uniform rules make it very easy to learn. Input code, i.e. 
the DS s, can be easily determined by look­ing at a character. This fulfills the so called See the Char­acter 
Know the Code (SCKC) property [9]. Flexible scheme which does not require the user to type in an exact 
input code (DS) in order to select a character. The user does not have to remember all the primitives 
to use the system. Multiple Codes for Each Characterz with no corresponding increase in storage. This 
is even better than the objectives of many other systems which strive to achieve the One Code One Character 
[7, 9] property. Highly adaptable. The DS Memory buffer is not a simple cache of the entered DS s but 
actually used in the same way as the standard DS s to match against the subsequent input DS S. This mechanism 
together with the standard DS DAG provides very good adaptability to the user s input style. It is much 
better for the system to adapt to the user than to ask the casual user to learn complex rules. Graceful 
degradation of performance. Poorly specified DS s might be ambiguous and thus unable to select exactly 
the intended character, but it can still narrow down the search a lot to a limited number of possible 
choices. With the adaptability of the scheme, vague DS s can actually be used to specify the more commonly 
used characters at a higher speed. Extensible. New primitives can be introduced when appro­pnate. The 
constructed primitives will work just as well as the standard primitives of the system. 11 UNRESOLVABLE 
AMBIGUITIES UNDER THE S-SCHEME Under the present S-Scheme described above, there are characters which 
cannot be distinguished with the standard DS s. Some of these characters are listed below. From the user 
s view. %8 ~ilt$ &#38;a The characters in each of the groups above are composed of exactly the same 
parts and the parts are encountered in exactly the same order though the positions or sizes are different. 
The fact that the S-Scheme takes into account only the ordering of the parts but not the positional information 
of the parts makes it impossible to distinguish them with a DS. However, these characters can still be 
specified correctly as long as the user consistently uses different DS s to specify them beeause the 
DS Memory mechanism will be able to distinguish them. Moreover, the number of characters with this property 
is small and a lot of these ambiguities cars also be resolved using word combinations statistics[3]. 
12 PERFORMANCE OF THE S-SCHEME Standard DS s have been assigned to the 5401 more freauentlv used characters 
in the BIG5 ~haracter set[5]. We have aske-d some subjects to type in some news passages with a total 
num­ber of about 5500 characters using our implementation for the X windowing system and MSDOS. The average 
length of input key sequences (excluding the + operators which need not be typed and the terminator) 
for each Chinese character is found to be about 3.5 with a minimum of 1 and maximum of 9 key sequences. 
The length of input sequences varied because of the difference in the users character partitioning strategy. 
The author has typed out a poem X % (the poem of swallows)[ 1] as a test piece for typing speed. A total 
number of 678 key strokes (including the termination keystrokes) are used. The poem contains 180 Chinese 
characters (30 of them are Chi­nese style punctuation symbols) out of 115 distinct ones. The poem has 
been typed in a non-optimized normal character com­position style. The average number of keystrokes per 
character is 3.8 and the average speed achieved is 27 characters per minute. If we take a trained typist 
under the system with an estimated speed of 3 keystrokes per second and an average key strokes per Chinese 
character of 4, a speed of 45 Chinese characters per minute can be achieved. For comparison, an ordinary 
typist of Roman characters with a speed of 60 words per minutes types at 5 key strokes per second. The 
conservative estimate of a speed of 3 key strokes per second is to take into account of the fact that 
mixed-case key sequences have to be entered. Experiments with newcomers to the system have shown that 
after a fifteen minutes introduction of the basics of the scheme and the use of the keyboard (a standard 
Qwerty computer keyboard with stickers of the primitives), the users can start to type in all the Chinese 
characters from the test passage. The ease of learning of the scheme makes it praticularly suitable for 
applications like library catalogue system, dictionary lookup etc. Yet the number of input key strokes 
required is still reasonably small for professional use. 13 COMPARISON WITH OTHER STRUCUTRAL INPUT SYSTEMS 
 The following is a comparison with two of the most popular and well-known structural input schemes, 
namely the TsangJei Input Method [4, 5] and the Three Corner Input Method [4, 7]. TsangJei Input Method 
is also the Structural Input Scheme that received the highest rating in the evaluation described in [4]. 
Most of the data for the two input schemes are from [4, 5] and the followings are some notes on the 
comparison:  November 11-13, 1991 UIST 91 1.The average learning times are taken as (a) the average 
time to understand the basics and the rules and be able to type the characters; and (b) the average time 
for a green-hand to become a professional operator[4]. 2. The Unresolvable ambiguity rate is the ratio 
of the number of distinct input codes that map to more than one Chinese characters against the total 
number of distinct input codes. The data is obtained from the coding tables of the two input schemes. 
S-Scheme does not have a fixed input code for any characters, the standard DS s are therefore used in 
this comparison.  Input Scheme TsangJei 3-COmer S-Scheme Avenge No, of key-strokes I 4.6 6 (fiX@ I W4 
pa chaactar (user dependent) No. of primitive forms or mdicak 25t15 99/201 I 75 /(user defined) Basic/Auxillary~otal) 
(loo) Avg. leaning time (a) (to type) <1 week[5] Avg. learning time (b) (full speed) 14.6 days Haveto 
rememberatt primitive forms Yes No. of ways to enter a character unambigumsly 1 1 Many Gracefut degradation 
of performance No N Yes Input speed (Char. per Mm.) 57 3: 45 (estimated) Unresolvable ambiguity rate 
4.O~o 14 ACKNOWLEDGEMENTS The research is supported by a U.K. Commonwealth Scholarship. The author would 
like to express his deepest thanks to Ka-lok Chau for his support and help throughout the project. The 
author would also like to thank Ka-lok Chau, Saimond Ip, Irene H.H. Lee and my supervisor Neil E. Wiseman 
for their comments and reviewing of the drafts of this paper. REFERENCES <RefA>[1]EflWiH (Editor) BE35!% ( 
) T&#38;Z?Ri (1979) pg. 19. [2] Archer, N.P., Chan, M.W.L., Huang, S.J., and Liu, R.T. A Chinese-English 
Microcomputer System. Commun. ACM31, 8 (Aug. 1988), 977 982. [3] Becker, J.D. Typing Chinese, Japanese 
and Korean. IEEE Computer 18, 1 (Jan. 1985), 27-34. [4] Chen, C.K. and Gong, R.W. Evaluation of Chinese 
Input Methods. Computer Processing of Chinese &#38; Oriental Lan­guages 1, 4 (Nov. 1984), 236 247. [5] 
ETen Information System Co. Appendix 2 &#38; 3. ET Chinese system Manual, 1987. [6] Fan, C. and Zini, 
P. Chinese Character Processing sys­tem based on character-root combination and graphics pro­cessing. 
Document Martipulation and Typography, Proc. of the Int. Conf. on Electronic Publishing, Dec. Manipulation 
and ~ography, Nice (France), Cambridge University Press, 1988. [7] Huang, J.K. The Input and Output 
of Chinese and Japanese Characters. IEEE Computer 18, 1 (Jan. 1985), 18-24. [8] HWA H.R. and Chung, 
C.Y. A New Chinese Coding Method for Information Processing. Computer Processing of Chinese &#38; OrientaJ 
Languages 1, 4 (Nov. 1984), 248 267. [9] Qiao, J., Qiao, Y. and Qiao, S. Sk-Digit Coding Melhod. Commun. 
ACM 33, 5 (May 1990), 491-494. [10] Sheng, J. A Pinyin Keyboard for Inputting Chinese Charac­ters. IEEE 
Computer 18, 1 (Jan. 1985), 60-63. [11] Yu, W.C.P. and Chen, T.C. Two-Level Encoding ,for Chinese Input 
Systems Computer Processing of Chinesi-&#38; Oriental Languages 1, 4 (Nov. 1984) UIST 91 Hilton Head, 
South Carolina </RefA>
			
