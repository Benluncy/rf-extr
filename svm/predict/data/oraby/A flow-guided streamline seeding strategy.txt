
 Copyright and Reprint Permission: Abstracting is permitted with credit to the source. Libraries are 
permitted to photocopy beyond the limit of U.S. copyright law for private use of patrons those articles 
in this volume that carry a code at the bottom of the first page, provided the per-copy fee indicated 
in the code is paid through Copyright Clearance Center, 222 Rosewood Drive, Danvers, MA 01923. For other 
copying, reprint or republication permission, write to IEEE Copyrights Manager, IEEE Service Center, 
445 Hoes Lane, P.O. Box 1331, Piscataway, NJ 08855-1331. All rights reserved. Copyright 2001 by the Institute 
of Electrical and Electronics Engineers, Inc. All rights reserved.Copyright 2001 IEEE. Personal use of 
this material is permitted. However, permission to reprint/republish this material for advertising or 
promotional purposes or for creating new collective works for resale or redistribution to servers or 
lists, or to reuse any copyrighted component of this work in other works must be obtained from the IEEE. 
A Flow-guided Streamline Seeding Strategy Vivek Verma., David Kao., and Alex Pang. . Computer Science 
Department, UCSC . NASA Ames Research Center vivek@cse.ucsc.edu, davidkao@nas.nasa.gov, pang@cse.ucsc.edu 
www.cse.ucsc.edu/research/avis/seed.html Abstract This paper presents a seed placement strategy for streamlines 
based on .ow features in the dataset. The primary goal of our seeding strategy is to capture .ow patterns 
in the vicinity of critical points in the .ow .eld, even as the density of streamlines is reduced. Sec­ondary 
goals are to place streamlines such that there is suf.cient coverage in non-critical regions, and to 
vary the streamline place­ments and lengths so that the overall presentation is aesthetically pleasing 
(avoid clustering of streamlines, avoid sharp discontinu­ities across several streamlines, etc.). The 
procedure is straight for­ward and non-iterative. First, critical points are identi.ed. Next, the .ow 
.eld is segmented into regions, each containing a single critical point. The critical point in each region 
is then seeded with a template depending on the type of critical point. Finally, additional seed points 
are randomly distributed around the .eld using a Pois­son disk distribution to minimize closely spaced 
seed points. The main advantage of this approach is that it does not miss the features around critical 
points. Since the strategy is not image-guided, and hence not view dependent, signi.cant savings are 
possible when examining .ow .elds from different viewpoints, especially for 3D .ow .elds. Key Words and 
Phrases: seed placement, streamline, critical point, Voronoi diagram, Poisson disk distribution.  INTRODUCTION 
There are a number of methods for streamline placement that mostly address the aesthetic aspects of a 
.ow visualization using streamlines. These methods [10, 16] describe how the streamlines should be placed 
in a .ow .eld so that the visualization does not appear to be cluttered and there are no artifacts introduced 
in the visualization process that might lead to a misinterpretation of the .ow .eld. In our work we address 
an important issue that has been largely neglected by these methods. Namely, whether the stream­lines 
placed by these methods result in a visualization that captures all the important features (e.g. critical 
points) of the .ow .eld. Our streamline seeding strategy guarantees that important features like critical 
points are not missed. If the streamlines are not seeded ap­propriately (e.g. using regular or random 
seeding), or using image­guided streamline placement alone, important details of the .ow can be missed. 
This problem is illustrated in Figure 1. We can see that without proper seed placement, some details 
of the .ow can be missed by the streamline visualization. The saddle critical point is not suf.ciently 
captured by the streamlines in Figure 1a and Figure 1b. Streamlines generated using our method adequately 
highlights the critical points as shown in Figure 1c. There are some important goals to consider in order 
to generate an effective streamline visualization. In particular, a good seeding strategy should have 
the following characteristics: gions in the vector .eld. The interesting regions are those that we would 
like to study in the vector .eld, e.g. critical points, separation, and re-attachment lines. In addition, 
streamlines should cover the entire region of the .eld. Hence, even if the .eld is more or less uniform 
in a region, some streamlines should indicate the uniform nature of the .ow in these regions. This goal 
is easier to achieve than other goals because one can always generate a lot of streamlines such that 
nothing im­portant is missed. However, simply populating the .eld with more streamlines is not acceptable 
because some areas in the .ow .eld, such as convergent regions, will force streamlines to cluster together, 
making it dif.cult to distinguish among individual streamlines. More importantly, it defeats the char­acteristic 
of uniformity as described next. Uniformity: The streamlines should be more or less uniformly distributed 
over the .eld. This is a more challenging goal to achieve because while we can control where to place 
the seeds, we do not know how the resulting streamlines will be­have. Uniformity is directly related 
to the density of stream­lines crossing a unit area of the .ow .eld. Hence, density of streamlines is 
an important parameter. Continuity: It is desirable from the point of view of aesthetics that the streamlines 
show continuity in the .ow. Hence, one would prefer fewer long streamlines over many short stream­lines. 
The latter tend to give the impression of choppiness while the former tend to give an impression of smooth 
contin­uous .ow. In general, given an arbitrary .ow .eld, the longer the streamlines, the higher the 
likelihood that they will tend to crowd together in some areas and disperse in other areas, thereby making 
it dif.cult to meet both the uniformity and continuity criteria simultaneously. Therefore, this parameter 
needs to be balanced against the uniformity criterion. Since most .ow .elds are de.ned over a grid, 
a popular seeding strategy is to seed at the grid points so that no important features are missed. This 
is usually an overkill and requires that more stream­lines be traced than is necessary to capture all 
the desired details of the .ow. Furthermore, the streamlines tend to clutter in ways that are dif.cult 
to predict. Even if the grid is sub-sampled to reduce the density of streamlines, cluttering is still 
dif.cult to avoid. Finally, regular seeding may also produce visualization artifacts that are not present 
in the .ow .eld. Figure 2 shows streamlines with regu­lar seed placement for two datasets. These images 
show that the streamlines placed on a regular grid can generate artifacts because the underlying regular 
grid can be perceived in the visualization (top image in Figure 2) and also create clutter if the streamlines 
are too long (bottom image in Figure 2). Cluttering is of course dependent on the .ow .eld. Blindly seed­ing 
on a regular grid results in a streamline visualization where the individual streamlines can be dif.cult 
to distinguish in important regions (e.g. regions where a critical point is present). If one does  Coverage: 
The streamlines should not miss any interesting re-not seed all the grid locations and seed only every 
other grid point Figure 1: (a) Effects of regular seeding (49 streamlines), (b) effects of image-guided 
seeding (47 streamlines), (c) effects of .ow-guided seeding (47 streamlines). Regular and image-guided 
seeding strategies may miss important .ow features, especially when seeding is sparse. Both image-guided 
and .ow-guided streamlines were generated such that the minimum separating distance of streamlines is 
3% of the image width. Figure 2: Streamlines are seeded on a regular grid for these two datasets. Top: 
the underlying regular grid can be perceived in the visualization. Bottom: streamlines can create clutter 
if their lengths are long. (for instance) then the streamlines might miss some interesting fea­tures. 
Regular seeding on a grid does not satisfy the requirements of coverage and uniformity for a good streamline 
visualization. Image-guided techniques focus on the problem of cluttering. These methods also enforce 
a uniform spatial distribution of streamlines. However, they ignore coverage criterion, a scientif­ically 
important aspect of the .ow visualization. The work pre­sented in this paper attempts to alleviate this 
problem. We consider the coverage goal to be of greatest importance because from a sci­enti.c point of 
view the information content of any visualization is the most important. The goal of a uniform spatial 
distribution of streamlines is important only to the extent that it does not interfere with the most 
important goal of achieving a good coverage. The goal to achieve an aesthetically pleasing visualization 
has its mer­its but it should not compromise the other two goals (coverage and uniformity), hence it 
is lowest on our priority list. Another problem with image-guided techniques is that they are view dependent 
and do not permit interactive manipulation of viewpoint when studying .ows over non-planer surfaces. 
Our approach starts with the assumption that if we know how the .ow behaves and the location of the important 
features in the .ow are known, then we can place seeds to trace streamlines more clev­erly than the naive 
approach to place seeds at the grid locations, or to use an optimization strategy to reduce clutter. 
In fact, there has been signi.cant research done to extract the important features we are interested 
in looking at. See [2, 6] for a de.nition and classi.­cation of critical points. These points are also 
used extensively in topological presentation of .ow .elds [6, 7, 8]. In this paper, we take advantage 
of the knowledge about the .ow features in decid­ing how to place streamlines more intelligently. In 
particular, the type and location of the critical points are used to design and ori­ent seeding templates 
that capture the .ow patterns of these critical points. We are con.dent that our strategy can be easily 
extended to use information about other features like .ow separation and re­attachment lines, .ow topology 
lines, etc. to further improve the .ow-guided seed placement for streamlines. For example, informa­tion 
about automatically extracted separation and attachment lines [11] can be used to improve seeding to 
highlight those regions. 2 RELATED WORK There are very few methods that address the problem of generating 
visualizations with good streamline placement strategies. It should be noted that placing seeds uniformly 
does not result in uniformly spaced streamlines. Hence methods like Dovey s [4] to generate a uniform 
density of glyphs are not very useful for streamline place­ment. Max et al. [14] use particle traces 
on a 3D surface that are terminated when they come too close to the path of other particles. Turk and 
Banks [16] use the minimization of an energy function to guide the placement of streamlines at a speci.ed 
density. Their method uses a low-pass .ltered version of the current image to mea­sure the difference 
between the current image and the desired den­sity value. The energy is reduced iteratively by changing 
the posi­tions and lengths of streamlines, merging streamlines, and creating new streamlines. The resulting 
placement has a hand-placed ap­pearance and the streamlines appear to be neither too sparse nor too crowded. 
Computation time for their method is signi.cant. Jo­bard and Lefer s method [10] creates evenly spaced 
streamlines that match the quality of streamlines generated using the image guided approach of Turk and 
Banks [16]. Furthermore, Jobard and Lefer s method is non-iterative and is about 25 times faster than 
the image guided method. Recently, Mao et al. [13] have extended the image­based method of Turk and Banks 
to place streamlines on curvilin­ear grid surfaces for a .xed view point. A major drawback of all these 
methods is that they do not take guidance from the important features of the .ow. None of the existing 
methods for streamline placement guarantee that the resulting streamlines will capture all the essential 
features of the .ow .eld. If the streamline separation distance chosen in Jobard and Lefer s method is 
not small enough, the streamlines could miss a critical point or the critical point might not be suf.ciently 
captured by the streamlines. Our strategy guar­antees that all the essential features will be captured 
by the resulting streamlines because we use the information about the location and type of critical points 
to seed the streamlines.  3 FLOW-GUIDED STREAMLINE PLACE-MENT Before we begin discussing our strategy 
to place seeds in a .ow .eld, let us look at the different types of critical points in 2D .ows. Figure 
3 shows the different types of critical points that can be found in 2D .ows. center source sink  repelling-spiral 
attracting-spiral saddle Figure 3: Different types of critical points possible in 2D .ows. If the .ow 
.eld contains only one critical point (of any type) and if we know the location and nature of the critical 
point, then we can easily decide where to place the seeds to trace streamlines. Figure 4 illustrates 
the seeding pattern for different types of critical points. We have studied the different critical point 
types and have come up with the following strategy to place seeds in the vicinity of the critical points 
so that the streamlines traced from these seeds bring out the nature of the .ow around the critical points. 
We call these seeding patterns to be seed templates for critical points. 1. Center, spiral: place seeds 
along a straight line emanating from the critical point location. Figure 4a shows the seed tem­plate 
for center and spiral type of critical points. 2. Source, sink: place seeds along the perimeter of a 
circle around the critical point. Figure 4b shows the seed template for this type of critical point. 
 3. Saddle: place seeds along the lines that bisect the principal eigen directions. Figure 4c shows the 
seed template for sad­dles.  In the following discussion, we will refer to the .ow patterns around 
critical points, as depicted in Figure 3, as being ideal. That is, the .ow pattern is representative 
of the .ow that one might ob­serve in the vicinity of these types of critical points. The .ow pat­tern 
is the identifying characteristic that distinguishes one type of critical point from another. For example, 
we expect to see rotating .ow around a center type of critical point. An important parameter to decide 
for placing seeds along the template is the proximity of the seeds to the critical point. We have used 
some heuristics to decide how to choose the size of the tem­plate for a given critical point and other 
parameters like the distance between adjacent seeds on a template. The details of parameter se­lection 
are discussed in sections 3.1 and 3.2. The view of .ow .elds presented above is however very simplis­tic. 
In general, multiple critical points may be present in the .ow and they interact with each other to give 
rise to patterns that deviate from the above presented simplistic notion of a .ow .eld. Looking at Figure 
5, we note that the .ow near critical points is very similar to the ideal .ow pattern for that type of 
critical point. As we go further and further from a critical point location, the .ow pattern is in.uenced 
by other critical points. That is, the ideal .ow pattern is most prominent in the immediate vicinity 
of the critical point. Con­sequently, for any general .ow, we can always .nd a neighborhood around each 
critical point where the .ow behaves as if other critical points were not present in the .ow. If we can 
.nd this neighborhood then it will be easier to place seeds close to the critical points for a streamline 
visualization that highlights the critical points nicely . Hence, we proceed to determine a suitable 
partition of the .ow such that only one critical point lies inside each partition. We have found that 
such a partition can be approximated by the Voronoi diagram constructed using all the critical point 
locations of the .ow .eld. Given a set Sof ndistinct points in Rd, the Voronoi diagram is the partition 
of Rdinto npolyhedral regions(p),(pES). Each region(p), called the Voronoi region of p, is de.ned as 
the set of points in Rdwhich are closer to pthan to any other point in S [5]. For our purposes, the set 
Sis the set of critical point locations in R.. Since some of the Voronoi regions will be unbounded, we 
also compute the intersection of the Voronoi diagram with the .ow data s grid boundary. We chose to use 
Voronoi partitioning because the Voronoi regions are convex polygons with the property that ev­ery point 
in the Voronoi region around a critical point is closer to that critical point than to any of the other 
critical points. This means that the .ow at the points in each Voronoi region is primarily in.u­enced 
by the critical point it contains. This is an important heuristic 0 1 00 11 0011 01 0011 0011 00 11 
 0001 11 01 0011 00 11 0 1 1 00011 00 11 00 11 11 001 0001 1 00 11 (a) (b) (c) Figure 4: Seed templates 
for various critical points. The seeds are placed along the solid lines. The bold dots represent the 
seed template and the dashed lines are the streamlines traced using the seeds from the template. (a) 
center, spiral; (b) source, sink; (c) saddle. Figure 5: A .ow can be partitioned using Voronoi diagram 
of the critical point locations. Each Voronoi region contains only one crit­ical point that represents 
the .ow in that region. because we have observed that the .ow pattern at any point is in.u­enced by its 
proximity to a critical point. The size of each Voronoi region is an approximation of the extent of the 
in.uence of the crit­ical point it contains. In the following discussion, the boundary of a Voronoi region 
will be called its Voronoi boundary. Figure 5 shows a Voronoi partition of the dynamic vortices dataset. 
Notice that each Voronoi region contains exactly one crit­ical point and the .ow within a region is characterized 
by the type of critical point it contains. The Voronoi regions are an approxima­tion of the boundaries 
that partition the .ow into different regions of .ow types. Also important to notice is that around each 
critical point the .ow would be close to ideal for that type of critical point. However, as you move 
away from the critical point, the .ow will start to show in.uences from the .ow around the neighboring 
criti­cal points. It seems that the only critical points that might in.uence the .ow near the boundary 
of a Voronoi region are those that are its neighbors because the .ow patterns near the edges of the Voronoi 
regions depend on the critical points on both sides of each edge. Given the above background, we can 
now outline a strategy to place seeds based on critical point location and types: 1. Compute critical 
point locations and determine their types. 2. Compute Voronoi partition of the set of critical points. 
 3. Use template patterns around each critical point to place seeds and trace streamlines from these 
seeds. 4. Place some random seeds to .ll blanks and trace streamlines using them.  We use FAST [1] 
to compute the critical point locations and to classify them. To compute the Voronoi diagram of the set 
of criti­cal point locations, we use Jonathan Shewchuk s publicly available software called triangle 
[15]. For step 3 in the procedure described above, we need to make the following decisions:  How big 
should the template pattern be? How far apart should the seeds be placed in the template? How long 
should the streamlines be? We will discuss these issues in sections 3.1, 3.2, and 3.3, respec­tively. 
After seeding streamlines using templates for critical points, we add some random seeds that are distributed 
according to Poisson disk distribution. There are two important consequences of seeding with the seed 
template before the random seeds. By giving priority to seed templates, we ensure coverage of .ow patterns 
near criti­cal points. Furthermore, because we terminate a streamline when it comes close to an existing 
streamline (see Section 3.3), earlier streamlines will tend to be longer than later streamlines. Hence, 
streamlines traced from the seed templates are longer than those traced using seeds placed randomly to 
.ll in blank spaces (see Sec­tion 3.4). Such a strategy ensures that the regions in the .ow .eld close 
to critical points are given more importance than other re­gions. 3.1 Deciding size of seed templates 
We are assuming that the .ow inside each Voronoi region is char­acterized primarily by the type of critical 
point it contains. This means that each critical point should have its template constrained to lie completely 
within that critical point s Voronoi region. We use the following strategy to decide the size of the 
seed tem­plates for the various critical points. center, spiral: For center and spiral type of critical 
points, we .nd the line segment that joins the critical point to the closest point on the Voronoi boundary 
and seed along this line seg­ment. One might ask what is so special about this particular line segment? 
We could have chosen many other line seg­ments, for instance one that joins the critical point to the 
far­thest point on the Voronoi boundary. We have experimented with many such possibilities and most of 
them resulted in too many streamlines and hence clutter. Basically, the ideal .ow pattern of these critical 
points fade rather quickly. source, sink: For source and sink types of critical points, we seed along 
a circle s perimeter. This circle has its center at the critical point and we chose it to be the largest 
circle that would .t completely inside the critical point s Voronoi region. Hence, the radius of this 
circle is equal to the distance between the critical point and the closest point on the Voronoi bound­ary. 
In contrast to centers and spirals, the ideal .ow pattern of sources and sinks seem to extend further 
out. saddle: For a saddle we place seeds along two lines. These lines are the bisectors of the principal 
eigen vector directions. The extent of these lines is decided by their intersection with the Voronoi 
boundary. We have found that the saddles are the trickiest to seed because if the the seed closest to 
the saddle s location along the bisectors is not close enough then the sad­dles are not captured properly. 
For this reason, we decided to seed two special streamlines very close to the saddle. The seeds for these 
two streamlines are chosen to lie on the same bisector but on the opposite sides of the saddle s center. 
The distance of these special seeds from the center is chosen to be equal to one half the cell size of 
the grid. An additional note is that the seed templates for saddles presented in this paper assume index 
zero saddles which result in separation of .ow into 4 regions around the critical point. Other types 
of sad­dles, e.g. index of -1, may result in more than 4 .ow regions around the saddle point, and would 
require a different type of seed template. However, they would still be based on bisector lines. Figure 
6: Seeds placed using templates for the various critical points. Left: dynamic vortices dataset. Right: 
5 critical points dataset. These datasets are the same as those shown in Figure 2. Also see Color Plate 
1. The size (i.e. extent) of the seed template is adjustable. In prac­tice, we .nd that half of full 
size of the seed template is suf.cient because the observed .ow patterns are ideal only in the vicinity 
of the critical points. This means that for source and sink critical points, we seed along the perimeter 
of a circle centered at the crit­ical point. The radius of this circle is equal to half the distance 
of the critical point to the closest point on the Voronoi boundary. Fig­ure 6 shows the template patterns 
for various critical points in two datasets. The red lines show the directions along which the seeds 
are placed in the saddle, center, and spiral templates. The bold red points represent the critical point 
locations and the blue points are the actual seed locations that form the seed template. Also note that 
if the size of the seed template was set to zero, then there will be no streamlines seeded based on .ow 
information, and the resulting streamlines will all be seeded randomly with a Poisson disk distri­bution 
(see Section 3.4).  3.2 Controlling streamline density The density of streamlines is determined to a 
large extent by the distance between the seeds. Once we have decided on the template patterns, it is 
straight forward to place seeds along these templates. We allow the user to control the density of the 
streamlines using a single parameter Æseedwhich is the minimum distance between seeds. Seeds along the 
template are placed Æseedapart from each other. Figure 6 shows the seeds along the templates for various 
critical points.  3.3 Terminating Streamlines Our heuristic of seed placement according to templates 
works well to highlight the .ow patterns around all the critical points present in the .ow. If the streamline 
lengths are not chosen properly, then in some regions of the .ow they will come too close to each other 
and create distracting clutter. We terminate a streamline when it comes close to an existing streamline 
by a user speci.ed distance. Let the user de.ned minimum separating distance desired between any two 
streamlines be Æstreamiine. The streamlines are represented as control points of a line strip. To check 
whether a given stream­line is close to an existing streamline we determine whether the next control 
point during a streamline construction comes closer than Æstreamiineto any control point of an already 
existing stream­line. If the next control point of the current streamline is closer than Æstreamiinefrom 
any control point of previously traced streamlines, then the current streamline is terminated. For this 
test to be valid, it is required that the distance between successive sample points along a streamline 
be closer than Æstreamiine. To ef.ciently implement this streamline proximity test, we su­perimpose a 
cartesian grid over the .ow .eld. Each cell of this grid contains a list of pointers to sample points 
of streamlines that fall in that cell. The width and height of each cell is equal to the desired separation 
Æstreamiinebetween the streamlines. To check whether a sample point on a streamline is close to an existing 
streamline, all we need to do is to .nd the cell in which the sample point lies, and check whether it 
comes within distance Æstreamiineof the points stored in the cell and its eight neighbors. If the current 
control point is closer than Æstreamiineto the points stored in the cell and its eight neighbors, then 
the streamline is terminated. Although a user can specify a value of Æstreamiinedirectly, through experiments 
with several .ow .elds we have found that a value of 0.3xÆseedfor Æstreamiineworks well in practice. 
During our investigation of streamline placement, we have ex­perimented with several other streamline 
termination criteria but found the strategy to terminate a streamline based on its proximity to other 
streamlines to work the best. We have tried terminating streamlines based on a winding angle test to 
prevent clutter around a spiral or center type of critical point. We have also experimented with terminating 
streamlines when they exit the Voronoi region from which they were initiated, but found that the streamlines 
cre­ate distracting artifacts when many streamlines are terminated very close to straight edges of the 
Voronoi regions. Although the tests based on winding angle and crossing of Voronoi edges work well to 
reduce clutter, they do not generate evenly spaced streamlines. 3.4 Random Seeds The placement of seeds 
according to templates for various critical points basically captures the location and behavior of the 
most in­teresting features of the .ow. However, the strategy outlined above can leave blank spaces in 
our visualization where no streamlines are displayed. The .ow in these regions is almost uniform and 
more or less parallel to their boundary. Figure 7 shows an example of streamlines generated using only 
the seed templates. The .ow in these blank regions does not contain any additional features, hence we 
can afford to be less careful about the seed placement in these regions. Based on the observation that 
if the .ow is uniform then we can place seeds arbitrarily as long as the streamlines do not crowd together 
to form distracting clusters, we chose to distribute seeds in these blank regions using a Poisson disk 
distribution [3]. Pois­son disk distribution guarantees that these random seeds will be at least Æpoissondistance 
apart, where Æpoissonis chosen to be equal to Æseed. Choosing Æpoissonto be equal to Æseedensures that 
all the streamlines will be evenly distributed. We do not actually .nd these blank regions. Instead, 
we de.ne a region of in.uence for all critical points and place random seeds according to a Poisson disk 
distribution outside the region of in­.uence. The region of in.uence of a critical point is de.ned as 
a circle around the critical point location. The radius of this cir­cle is decided based on the type 
of critical point and the size of its template seeding pattern. We choose the radius of the circle of 
in.uence to be a fraction of the size of the seed template. We exper­imented with several values of this 
fraction for different .ow .elds and found that the value of 0.8 works well in practice. The yel­low 
disks in Figure 8 show the regions of in.uence for each critical point. We have found that a few very 
short streamlines also result from tracing streamlines from the above introduced random seeds. Although 
they do not cause any artifacts, we chose to not draw them for aesthetic reasons. Excluding these few 
short streamlines does not result in poor visualizations. Figure 7: Streamlines generated using only 
the seed templates. The interesting features are captured by the streamlines but there are some blanks 
left that need to be .lled by adding more streamlines. Figure 8: Regions of in.uence for each critical 
point are shown as yellow disks. The dataset is the same as the one shown in Figure 1. Also see Color 
Plate 2.   RESULTS The .rst comparison is whether the .ow-guided approach is any better than regular 
seeding or random seeding. For this, we placed seeds according to Poisson disk distribution and traced 
streamlines that were terminated using the proximity test. We found that while the strategy of placing 
seeds according to Poisson disk distribution works better than placing seeds on a regular grid, it still 
generates streamlines that do not suf.ciently capture the .ow close to criti­cal points (especially saddles). 
As demonstrated in Figure 9, there Figure 9: These images were rendered by using seeds whose loca­tions 
were generated randomly using a Poisson disk distribution. Figure 10: Streamlines generated using our 
.ow-guided seeding strategy. The .ow .eld contains six critical points. are both aesthetic problems as 
well as missing critical .ow infor­mation with random seeding strategy. Figure 10 shows streamlines generated 
using our .ow guided approach. The next comparison is on how the .ow-guided approach fared against the 
image-guided approaches. Figure 11 shows stream­lines generated using our method for different values 
of Æseedand Æstreamiine. These images show the critical points clearly at differ­ent streamline densities. 
The output using Turk and Banks s image­guided streamline approach is also presented side by side for 
com­parison. Efforts are made to bring the number of streamlines for corresponding densities as close 
as possible. The streamline sepa­rating distance Æstreamiinewas chosen to be 0.3xÆseed. The values of 
Æseedand Æstreamiinewhich controls the density of streamlines roughly corresponds to the separating distance 
for Turk and Banks s method. On the top row, where the number of streamlines is very dense, the .ow-guided 
approach captures the critical points better than the image-guided approach. This is the case even as 
we de­crease the number of streamlines on the bottom row particularly for saddles. The aesthetic quality, 
especially the uniformity of how the streamlines are distributed, seem to be better when using the image-guided 
approach as the number of streamlines is increased. This is attributed primarily to the effects of random 
Poisson disk streamlines. Note however, as the number of streamlines increases, the computation cost 
of the image-guided streamline placement in­creases signi.cantly. Our observation is that streamline 
images generated using our .ow-guided approach are comparable in aesthetic quality to those produced 
using image-guided method of Turk and Banks [16] and the method of Jobard and Lefer [9]. Furthermore, 
our strategy guar­Figure 11: Left: images produced using Turk and Banks s image-guided streamline placement 
method. Right: our .ow-guided streamline seeding method. The streamlines separation is chosen to be 1% 
of image width for images in the .rst row, 1.67% for the images in the second row, and 3% for images 
in the third row. antees that all the critical points present in the .ow are highlighted by streamlines. 
Finally, the computational cost for seed placement is less using our method, especially as the number 
of streamlines increases.  DISCUSSION AND FUTURE WORK We have presented a technique for .ow-guided seeding 
strategy that ensures coverage of important .ow features, produces stream­lines that are more or less 
uniformly spaced, and a greedy approach to producing long streamlines. The advantage over image-guided 
placement strategy is most obvious as the number of streamlines decreases. There are a number of extensions, 
improvements, and applications of this work that we are pursuing. One of the motivations behind our research 
on streamline place­ment is to use as few streamlines as possible to represent the .ow such that no important 
.ow features are missed. Streamlines gener­ated by our method can be used in texture synthesis techniques 
like PLIC [17]. PLIC uses texture mapped streamlines to generate vi­sualizations that look like LIC images. 
However, due to the regular placement of the streamlines, the visualizations can have some dis­tracting 
Moir´e patterns. Generating streamlines using our method will eliminate the artifacts from PLIC images. 
Streamlines are hard to use for studying 3D .ow patterns because in three dimensions it becomes dif.cult 
to perceive the .ow even if a moderate number of streamlines are used. The usual method is to use a rake 
to trace streamlines. While the rake approach is useful because the visualization is not very cluttered, 
the exploration of the .ow using rakes is still quite ad hoc. The ideas in this work can be carried to 
three dimensions by identifying the critical points, partitioning the .ow, and using suitable seed templates 
for three dimensional critical points. We also believe that a similar strategy to place streamlines in 
3D will pave way for extending PLIC to 3D as well. We have observed that saddles can be better seeded 
if the seeds are placed along the bisectors of the topology lines of the saddle. This would increase 
the quality of seeding in the vicinity of the saddles. Sometimes the distinction between sinks and attracting 
spirals, and sources and repelling spirals may become obscure us­ing the parameterization reported in 
[12]. In this case, additional checks are necessary to determine which type of seed template is most 
appropriate. Our method currently does not handle higher order critical points but can be easily extended 
to place seeds intelligently in the vicinity of higher order critical points. The template for a higher 
order crit­ical point will also be based on bisector lines. For instance, one can place seeds along lines 
that bisect the six regions around a saddle of index -1. We also do not take into account cycles present 
in the .ow. Our strategy can also be extended to place seeds intelligently in the vicinity of .ow separation 
and re-attachment lines. Although our heuristic to determine the size and shape of the seed templates 
works well for most cases we feel that it is not the most optimal and can be improved further. We are 
currently ex­ploring ways to use the ...space parameterization of critical points [12] to determine the 
shape and size of seed templates. We are also exploring ways to use topology lines of a .ow .eld along 
with critical point information to determine the shape of the seed templates. One of the limitations 
of our method is that the seed templates are not sensitive to the spatial distribution of the critical 
points and hence not sensitive to the strengths of critical points (e.g. how tight or loose a spiral 
is, and also how a source or sink may transition into a spiral). We believe that using the ...space parameterization 
of critical points to determine the shape and size of seed templates will help in overcoming this limitation. 
Multiple levels-of-details, either in a zooming in/out operation or as required by some rendering quota, 
can be easily supported by using seed templates with higher seed density Æseed, and smaller streamline 
separation distance Æstreamiine. The idea is that only some of the seeds are traced if the viewpoint 
is far away (or the average number of streamlines per unit area of the screen is low). As the user zooms 
in for a closer inspection, more detail of the .ow are presented by tracing out the other seed points 
and ramping up their alpha values to minimize popping.  ACKNOWLEDGMENTS We would like to thank Chris 
Henze for his Zplane .ow data generator, Jonathan Shewchuk for making the code for computing Voronoi 
diagrams publicly available, Greg Turk and David Banks for their image-guided streamline placement code 
so that we can run some comparisons, and the anonymous reviewers for their helpful com­ments and suggestions. 
We would also like to thank the members of the Advanced Vi­sualization and Interactive Systems laboratory 
at UC, Santa Cruz for their feedback and suggestions. This project is supported by NASA grant NCC2-5281, 
LLNL Agreement No. B347879 under DOE Contract No. W-7405-ENG-48, DARPA grant N66001-97­8900, and NSF 
grant ACI-9619020. References <RefA>[1] G. V. Bancroft, F. J. Merritt, T. C. Plessel, P. G. Kelaita, R. K. 
McCabe, and Al Globus. FAST: A multi-processed environment for visualization of compu­tational .uid dynamics. 
In Proceedings of Visualization 90, pages 14 27, San Francisco, CA., October 1990. IEEE. [2] M. S. Chong, 
A. E. Perry, and B. J. Cantwell. A general classi.cation of three­dimensional .ow .elds. Physics of Fluids 
A (Fluid Dynamics), 2(5):765 777, May 1990. [3] Robert L. Cook. Stochastic sampling in computer graphics. 
ACM Transactions on Graphics, 5(1), January 1986. [4] Don Dovey. Vector plots for irregular grids. In 
Proceedings of Visualization 95, pages 248 253. IEEE Computer Society, 1995. [5] Komei Fukuda. www.ifor.math.ethz.ch/ifor/staff/fukuda/polyfaq/node14.html. 
[6] A. Globus, C. Levit, and T. Lasinski. A tool for visualizing the topology of three-dimensional vector 
.elds. In Proceedings of Visualization 91, pages 33 40, October 1991. [7] J. L. Helman and Lambertus 
Hesselink. Surface represenations of two and three­dimensional .uid .ow topology. In Proceedings: Visualization 
90, pages 6 13. IEEE Computer Society, 1990. [8] J. L. Helman and Lambertus Hesselink. Visualization 
of vector .eld topology in .uid .ows. IEEE Computer Graphics and Applications, 11(3):36 46, 1991. [9] 
B. Jobard and W. Lefer. The motion map: Ef.cient computation of steady .ow animations. In Proceedings 
of Visualization 97, pages 323 328. IEEE, October 1997. [10] Bruno Jobard and Wilfrid Lefer. Creating 
evenly-spaced streamlines of arbitrary density. In W. Lefer and M. Grave, editors, Visualization in Scienti.c 
Computing 97, pages 43 55. Springer, 1997. [11] D.N. Kenwright, C. Henze, and C. Levit. Feature extraction 
of separation and attachment lines. IEEE Transactions on Visualization and Computer Graphics, 5(2):135 
144, April June 1999. [12] Yingmei Lavin, Rajesh Batra, and Lambertus Hesselink. Feature comparisons 
of vector .elds using earth mover s distance. In Proceedings of Visualization 98, pages 103 109, 524, 
October 1998. [13] X. Mao, Y. Hatanaka, H. Higashida, and A. Imamiya. Image-guided stream­line placement 
on curvilinear grid surfaces. In Proceedings of Visualization 98, pages 135 142, October 1998. [14] N. 
Max, R. Craw.s, and C. Grant. Visualizing 3D velocity .elds near contour surfaces. In Proceedings of 
Visualization 94, pages 248 255, October 1994. [15] Jonathan Shewchuk. Triangle: Engineering a 2D Quality 
Mesh Generator and Delaunay Triangulator. In Ming C. Lin and Dinesh Manocha, editors, Applied Computational 
Geometry: Towards Geometric Engineering, volume 1148 of Lecture Notes in Computer Science, pages 203 
222. Springer-Verlag, May 1996. www.cs.cmu.edu/afs/cs/project/quake/public/www/triangle.html. [16] Greg 
Turk and David Banks. Image-guided streamline placement. In Proceed­ings SIGGRAPH, pages 453 460, New 
Orleans, LA, August 1996. ACM SIG-GRAPH. [17] Vivek Verma, David Kao, and Alex Pang. PLIC: Bridging the 
gap between streamlines and LIC. In Proceedings of Visualization 99, pages 341 348, Octo­ber 1999.</RefA> Color 
Plate 1: Seeds placed using templates for the various critical points. Left: dynamic vortices dataset. 
Right: 5 critical points dataset. These datasets are the same as those shown in Figure 2. Color Plate 
2: Regions of in.uence for each critical point are shown as yellow disks. The dataset is the same as 
the one shown in Figure 1. 
			
