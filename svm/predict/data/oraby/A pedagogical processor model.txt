
 A PEDAGOGICAL PROCESSOR MODEL by Will D. Gillett Eric B. Muehrcke Department of Computer Science 
Washington University Box 1045 St. Louis Mo. 63130 Abstract This paper presents a pedagogical processor 
model, intended for teaching fundemental concepts about yon Neumann machines. A general discussion of 
the desirable pedagogical properties is given, and a specific one address machine is defined. The machine 
has a simple architecture, supports four addressing modes, and uses a s~all number of hierarchically 
organized, flxed-field instructions. Debugging capabilities are included in the definition and can be 
accessed by executable instruction. I. Introduction In an introductory computer science course, a student 
is introduced to a number of new concepts which must be mastered in order to comprehend and integrate 
the more complex ideas encountered in subsequent courses. The concepts must be simple and easy to teach 
and learn. The processor model [STE74] [REI73] presented to students while learning fundamental concepts 
significantly affects the ease with which they learn and retain these concepts. A processor which introduces 
extraneous concepts (not being taught) tends to confuse the student by introducing unneeded complexity. 
On the other hand, a processor which is not powerful enough to allow simple things to be expressed concisely 
hinders the student by forcing him to express simple ideas in verbose ways. This paper discusses the 
general properties of a pedagogical processor model and defines a specific processor which is powerful 
enough for the student to use easily but does not introduce unneeded complexity. Section 2 presents 
the pedagogical properties that a processor model should have and discusses the objectives of an introductory 
course that might use it. Section 3 discusses a new processor, SNORE, designed and implemented (simulated 
in software) to replace NIP, the machine previously used in introductory computer science courses at 
 Permission to copy without fee all ,~or,part of this material is granted provided that the copies are 
notanade or distributed for direct commercial advantage, the ACM copyright notice and the title of the 
publication and its date appear, and notice is given that copying is by permission of the Association 
for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. 
 &#38;#169; 1983 ACM 0-89791-091-5/83/002/0159 $00.75 Washington University. Section 4 analyzes and compares 
SNORE, NIP [aTE70], and MIX [KNU69].  2. Goal and Properties of a Pedagogical Processor Model The goals 
of developing a pedagogical processor are relatively simple. In general, the purpose of the processor 
is to teach the fundamental concepts of yon Neumann machines. The concepts should be encapsulated so 
that they are easy to teach and learn. Simplicity and consistency should be the primary criteria used 
during development; ease of expression is another important criteria, but it is secondary. The design 
of most systems is a process of balancing the importance of often inherently conflicting design criteria; 
The design here is no exception. 2.1 Pedagogical Properties  The processor model should hsve certain 
pedagogical properties. It must be simple to understand but complex enough to be realistic and easy to 
use. The basic structure of the model should be derived by considering only fundamental concepts of interest. 
Other more complex concepts may be included if their incorporation does not require a change in that 
basic structure. The model must be simple enough to be easily learned but be applicable to a wide variety 
of applications. These properties influence the architecture, data types, instruction set, and debugging 
facilities of the model. The architecture should have a simple structure. Index registers should be 
included  because these take part in the fundamental concepts of address modification. The four addressing 
modes of immediate, direct, indirect, and indexed should be included to provide addressing options 
and allow address modification without instruction  modification. Concepts such as virtual memory and 
 parallel processing should not be included because of the unneeded conceptual complexity that they 
 introduce.  0nly elementary data types should be included. Complex data types, such as stacks, queues, 
or arrays, should be excluded.  The instruction set should be organized in a hierarchical manner, in 
which there are only a few primary instructions (e.g., arithmetic), each having a number of sub-instructions 
(e.g., add); this fosters easy comprehension and retention. The entire instruction set should be as symmetrical 
as possible and contain as few exceptions as possible. 159 Execution-time debugging facilities should 
be included as executable instructions. These debugging facilities should provide dynamic information 
about storage, registers, and the current status of the processing. The instructions that invoke these 
facilities should be able to be inserted anywhere in the program without disrupted execution or using 
processor resources.  Any processor model which satisfies these pedagogical properties may be used. 
There are two major directions that can be taken during development: design a completely new processor 
or select an augmented subset of an existing processor, such as a PDP-11. Most existing processors do 
not have the desired properties, and it is difficult to select an appropriate subset of a machine, augment 
it (e.g. with debugging facilities), and obtain a consistent, well-structured machine having the desired 
properties. Although it may be possible to do a design based on an existing machine, we take the alternative 
approach in this paper. A pedagogical processor model could be implemented in hardware. However, such 
an implementation would be difficult to produce and modify. A simulated processor model, on the other 
hand, can be made to appear as hardware, but has the advantage of being more easily produced and modified. 
Also, it is more portable. 2.2 Objectives of the Course  The objectives of a course using such a model 
can significantly affect the properties of the processor model to be employed; these objectives affect 
the particular components included in the model. These components include the data types, the architecture, 
the data operations, and the debugging capability. An introductory course might teach a broad range 
of computer science concepts, among which are fundamental algorithms, the architecture of machines, possible 
alternatives in problem solving, and computing in general. Some common algorithms presented might employ 
numeric manipulation, character manipulations, array manipulations, subroutine linkage conventions, and 
recursion. Concepts useful in the implementation of such algorithms are numeric and character data types, 
index registers, alternative Jump to subroutine instructions, and stacks. Another objective might be 
to show possible alternative solutions to various problems. These alternatives might deal with subroutine 
linkages, different addressing methods, character manipulation, and linear lists (e.g., queue, stack). 
We consider all of these to be potential primary objectives of an introductory course. Any general processor 
should be capable of addressing concepts such as these in a reasonable way. Special computer architectures, 
such as virtual, memory and parallel processing capabilities need not be addressed in an introductory 
course. They introduce extraneous concepts that are not fundamental to computing.  2.3 Data Types 
Four fundamental data types might be included in the pedagogical processor: integer, real, character, 
and Boolean. Integer data is intrinsic to every binary machine and should be available. Character data 
is useful for nonnumeric algorithms and formatted outputs, and therefore it is a primary candidate for 
inclusion. Real and Boolean data optionally can be included depending on the applications to be addressed. 
  2.4 Architecture A simple, well-designed architecture can significantly enhance the ease with which 
the student comprehends fundamental concepts. Such an architecture should include the concepts of user 
manipulable register, processor manipulated registers, and different addressing modes. These concepts 
are basic to yon NeL, nann machines and exist in real machines. In general, the overriding criteria 
in selecting architecture options should be to reduce conceptual complexity. The instruction format should 
be simple and straightforward. Multiple length instruction formats increase the complexity of the machine 
in an attempt to conserve space; however, these goals are less relevant to a pedagogical model. Thus, 
a fixed instruction length format with statically defined instruction fields should be chosen. This increases 
the ease of understanding and allows a hierarchically organized and symmetrically defined instruction 
set. Historically, between 16 and 32 bit word lengths have proven adequate for most processors. Larger 
word lengths tend to waste storage; shorter word lengths require multiple word data coupling and multiple 
word instructions. The addressing schemes of processors range from zero address to three address. All 
are available on the market, and all are appropriate in a pedagogical processor. However, for simplicity 
we will concentrate on one address machines which use an accumulator. In order to perform multiplication, 
a double word length accumulator is needed. This can be accomplished by allowing two one-word-length 
registers to be coupled to act as a single accumulator for a specific class of instructions. Index registers 
are needed to implement the indexed addressing mode. Supplying the student with a large number of index 
registers does not add anything conceptually and does not force the student to make effective use of 
scarce resources. Supplying only a few registers encourages the student to effectively utilize the resources 
 available to him. Basic addressing modes should be available: immediate, direct, indirect, and indexed. 
Other addressing modes are generalizations of these, and although they are of pragmatic interest, they 
do not introduce fundamentally new concepts (e.g., autoincrement modes). 2.5 Primitive Data Operations 
The primitive data operations should include: arithmetic, logical, shift, data movement, Jump to subroutine, 
conditional and unconditional branching, and input/output. Additional operations may be included if they 
do not interfere with the goals previously stated. For example, character manipulation operations might 
be included. However, character operations have been excluded because our application deals mostly with 
numeric algorithms, and we use character manipulation as a vehicle for expounding bit manipulation. 
 2.5.1 Arithmetic The arithmetic operations should include addition and subtraction; multiplication 
and division are optional. Addition is a fundamental operation and must be included. Subtraction can 
be simulated by complementation and addition, but it is normally considered a primitive operation. Both 
multiplication and division can be achieved by using repeated addition and subtraction. Although these 
algorithms are conceptually important, forcing the student to use such simulation often distracts him 
from concentrating on the problem being implemented. (If the operations are available, the student could 
be asked to demonstrate mastery of the simulated multiplication and division algorithms and then be allowed 
to use the operations in the processor.) Also, with multiplication and division as primitive operations, 
other arithmetic functions (e.g., modulus) easily (and efficiently) can be built. 2.5.2 Logical The 
logical operations should be performed either on Boolean data or bitwise on an entire word. The logical 
operations should constitute a complete set. There are several singleton complete sets (e.g., NAND); 
however, it is difficult to express complicated logical expressions with such singleton operators. The 
best set for human use is AND, OR, and NOT. This set constitutes a quick, easy, and natural Boolean algebra 
for implementing algorithms.  2.5.3 Shift While the shift operation is not a primary one, it is useful 
in many different algorithms. It is often used for simulation of character manipulation, multiplication, 
and division. The inclusion of shift operations allows bit manipulation algorithms to be addressed in 
a straightforward manner. The shift operations should include all types of shifting (logical, arithmetic, 
and circular) in either direction (left and right).  2.5.4 Data Movement The movement of data is classically 
considered two separate operations: loading data into a register and storing data into a storage location. 
Both operations constitute movement of data, and a symmetric instruction set would not make a distinction 
between the two.  2.5.5 Jump to Subroutine The Jump to subroutine operations depends on the processor 
architecture. This instruction normally constitutes a save and branch operation; a return address is 
saved (in a storage location, index register, or on a stack), and a branch is performed to the invoked 
subroutine. Although the affect of the jump to subroutine can often be realized by a sequence of other 
instructions, the importance of the concept and the frequency of its occurrence suggests that a separate 
construct should exist.  2.5.6 Branching Testing of data and transferring program control can be considered 
to be two separate operations or one unified operation. The separate abilities to test data and transfer 
program control based on the results of that comparison tend to increase programmer error. Combining 
the two into a unified operation is preferable. Comparison between data should include all  combinations 
of the relations less than, greater than, and equal. Given these primitive relations, any type of arithmetic 
comparison can be made.  2.5.7 Input/Output Only simple input and output operations are  necessary 
for a pedagogical processor model. These operations should allow the input and output of all basic 
data types available. The I/O devices should not introduce new  concepts (such as disks, which involve 
tracks, seeks, etc.). Only a single input and output device is necessary. Although multiple I/O devices 
 are needed in practice, their inclusion in a pedagogical model only increases the complexity for the 
student. The student should not be forced to address concepts such as timing of peripheral devices. 
 2.6 Debugging The processor should contain easy to use debugging facilities, invokable by executable 
 instructions that do not disrupt execution and do not use processor resources. The facilities should 
 report the dynamic state of the processor resources (storage, registers, etc.) and the current process 
 taking place. Debugging machine language programs is very difficult. Subtle changes in the state of 
the processor may cause an error which is undetectable without the ability to interrogate the complete 
state of the machine. The user should be able to interrogate all or any portion of the state of the processor, 
and he should have several methods of accessing this information. Different access methods may be based 
on time, the instruction being executed, or location referenced. 3. The Definition of a Pedagogical 
Processor In this section, we define a pedagogical processor model, called SNORE (something no one remembers 
easily), for use in introductory computer science courses. This processor was developed based on the 
goals and properties of Section 2. A batch oriented software simulation of this processor has been implemented 
in PL/I, and an interactive version has been written in PASCAL which runs on the IBM Personal Computer. 
 3.1 General Architecture SNORE is a one address, 32-bit machine. Primary storage is restricted to 65,536 
32-bit words; each word is divided into four 8-bit bytes. No distinction is made between instructions, 
numerical data, and alphabetic data in storage (i.e., not a tagged architecture). SNORE has ten registers 
(see Figure 3.1). The registers directly modifiable by the programmer are three 16-bit index registers 
and two 32-bit accumulators which can be concatenated to form a 64-bit register. The registers not directly 
modifiable by the programmer are the 16-bit program counter, the 32-bit storage data register, the 16-bit 
storage address register, and the 32-bit instruction register. SNORE also has an overflow indicator. 
 LAC(~2 bits) UAC(R2 bits) Ittt ..... tit ..... tt ..... It .... t, I Ittt .................. ttttt 
..... I   I I I I RI(16 bits) R2(16 bits) Rq(16 bits) Itlt ....... tlllt I l,,'t .... t .... It Ill 
.... t .... lit, I  I I 1 I, ,I 0VFL pc(16 bits) SAR(16 bits) I I I'''°' ..... '"" I"'"'''"""'I II I 
I I IR(B2 bits) SDR(~2 bits) I .... ' ...... ' ...... " ........... I I"' .... ' ............ ' .......... 
I I I I I Figure 3.1 INSTRUCTION FORMAT code: OP MOD D R/AC S/D M I ADDR # bits: 4 4 I I 2 2 2 16 
R/AC  OP M0D D I S/D M I ADDR I'''I'''I I I' I' I' I' .............. I I I III I I I I Abbreviations: 
OP - operation code MOD - instruction modifier D - direction of data flow R/AC -indicator of register/accumulator 
S/D -source/destination field (which register 1,2,or 3) M - addressing mode I -index register ADDR -storage 
address Figure 3.2 SNORE has statically defined instruction fields, which are the same for all instructions 
(i.e., a fixed instruction formatting). The OP field (see Figure 3.2) specifies the primary instruction 
(e.g., arithmetic) while the MOD field indicates the specific sub-instruction (e.g., add). The D field 
specifies the direction that data will flow (between the operands) during the operation. The R/AC and 
S/D fields specify operandl (a register). The R/AC field specifies that either an index register or an 
accumulator is to be used. The S/D field specifies the exact index register or portion of the accumulator 
to be used. The M, I, ADDR fields specify operand2 (a storage location). The M field specifies the addressing 
mode (immediate, direct, and indirect) to be used. The I field specifies the index register to be used. 
The index register is added to the ADDR field to determine an effective address for direct and indirect 
addressing. The ADDR field specifies either the date item itself, the address of the operand, or the 
address of a storage location which specifies the address of the operand. If sn instruction only requires 
one operand, operand2 is used and operandl is ignored. 3.2 Data Types SNORE has two basic data types: 
integer and character. Integer data can have a length of 16, 32, or 64 bits depending on the register 
holding the data. Character data is stored one character per 8-blt byte; four characters can be stored 
contiguously in one storage location.  3.3 Primitive Data Operations  SNORE has 8 primary instruction 
(see Table 3.1). The JSR instruction allows the programmer to halt execution, execute a secondary instruction, 
 branch and set index register, or branch and set storage. The ARI instruction has addition, subtraction, 
multiplication, and division as sub-instructions. The LOG instruction incorporates NOT, AND, OR, and 
EXCLUSIVE OR. The TT instruction supports branching on overflow or any combination of comparisons (less 
than, greater than, and equal) with zero. The MOV instruction allows moving data from a register to storage 
or vice versa. The SHF instruction allows logical, arithmetic, and circular shifting in either direction. 
The IO instruction allows input and output of data in either hexadecimal or character formats; when transferring 
character data, the number of characters to be transferred is specified in the MOD field. Line feed or 
form feeds may be specified for formatting. Except for the IO instruction, the rest of the instructions 
use the instruction fields in a symmetric manner. Table 3.1 outputs the last "n" instructions executed. 
SNORE INSTRUCTION SET JSR (OP:0000) ; Jump to Subroutine HLT(MOD:O000) ; Halt EX (MOD=0001) ; Execute 
the instruction (operand2) BSX(MOD:0010) ; Branch (operand2) and set index register (operandl) BSS(MOD=0100) 
; Branch (operand2+1) and set storage (operand2) ARI (OP=0001) ; Arithmetic ADD(MOD=0001) ; operandl+operand2 
SUB(MOD=0010) ; operandl-operand2 MLT(MOD=0100) ; AC*operand2 DIV(MOD:I000) ; AC/operand2 LOG (OP=0010) 
; Logical NOT(MOD:0001) ; Bitwlse NOT of operand2 OR (MOD=O010) ; Bitwise operandl OR operand2 XOR(MOD:0100) 
; Bitwlse operandl XOR operand2 AND(MOD:I000) ; Bitwise operandl AND operand2 TT (OP:0011) ; Test and 
Transfer NOP (MOD:0000) ; Perform no operation < (MOD=IXXX) ; If operandi<0 then branch (operand2) = 
(MOD:XIXX) ; If operandi:0 then branch (operand2) > (MOD:XXIX) ; If operandi>0 then branch (operand2) 
OVFL(MOD:XXXl) ; If overflow then branch (operand2) BRU (MOD=1111) ; Branch (operand2) MOV (OP:0100) 
; Moves data from one resource to another No modifier is used SHF (0P:0101) ; Shift SLL(MOD=0010) ; 
Shift left logical SRL(MOD=0011) ; Shift right logical SLA(MOD:0100) ; Shift left arithmetic SR~(MOD:0101) 
; Shift right arithmetic RL (MOD=I000) ; Rotate left RR (MOD:I001) ; Rotate right IO (0P:0110) ; Input/Output 
hex (R/AC : 0,MOD = 0000) line feed (R/AC : 0,MOD = 0001) form feed (R/AC = 0,MOD = 0010) char (R/AC 
= I,MOD = # of char) DBG (0P=0111) ; Debug SD (MOD=0000) ; Storage dump RD (MOD=0001) ; Register dump 
ST (MOD=O010) ; Storage reference trace FT (MOD=0011) ; Instruction flow trace IT (MOD:0100) ; Instruction 
execution trace DT (MOD=0101) ; Storage location reference trace TT (MOD=0110) ; Time trace  3.4 Debug 
 An interesting aspect of SNORE is the debug instruction, which allows storage and register dumps and 
five traces for reporting the current state of the processor. The storage (SD) and register (RD) dumps 
immediately print the content of the corresponding resource. Four of the traces have delayed effects; 
they activate upon the occurrence of specific events. The instruction trace (IT) is activated when a 
specific type of instruction is executed. The data trace (DT) is activated when a particular storage 
location is referenced. The storage trace (ST) is activated when any storage location is referenced. 
The time trace (T~) is activated when the internal clock is between specified limits. The flow trace 
(FT) 4. Analysis and Comparison In this section, SNORE is compared with NIP [STE70] and MIX [KNU69]. 
SNORE has the pedagogical properties stated in Section 2 and the technical properties stated in Section 
3. The instruction set is hierarchically organized and is easy to teach and learn; it is well-organized 
and, for the most part, symmetric. It has two accumulators, three index registers and an overflow bit. 
It has 8 primary instructions and 46 sub-instructions. Its architecture is simple and easy to understand; 
there is no anomalous use of the processor resources or aliases. NIP is a one address, 32-bit machine. 
Primary storage is restricted to 65,536 32-bit, nontagged words; each word is divided into four 8-bit 
bytes. The data types available are 16, 32, and 64 bit integers and 8-bit characters. The architecture 
has 5 user manipulable registers (3 index registers and two accumulators) and an overflow indicator. 
It uses a fixed length instruction format and four addressing modes (immediate, direct, indirect, and 
indexed). It has 73 instructions. MIX is a one address, variable size byte machine. Primary storage 
is restricted to 3999 words. A word is a sign bit and 5 contiguous bytes. The data types available are 
integer, real, and character. The architecture has 9 registers: 6 index registers, a J register, an accumulator, 
and an extension register. It uses a fixed length instruction format and 4 addressing modes (immediate, 
direct, indirect, and indexed). It has 93 instructions. MIX was developed from a composite of 16 real 
machines and from additional instructions generated through exceptions. The complexity of the instruction 
set makes MIX difficult to use as a teaching processor. This problem is compounded by inconsistencies 
in the instructions. The value of certain fields of the instructions must be determined before the meaning 
of other fields can be determined. A programmer trying to encode certain MIX instructions must perform 
complicated algorithms for determining the values of fields in the instruction. No debugging facilities 
exist; testing and branching are performed in separate instructions; and data paths are inconsistent 
across instructions. The low-level structure of this machine is not defined. Error conditions may be 
dependent on the machine being used to implement MIX. Thus, implementations may not be portable. NIP 
also has some inconsistencies. The M field is not used consistently; it can designate the source or destination 
device, a register, or it can be used as an extension of the OP field or the A field. SNORE and NIP 
allow all the basic logical operations including EXCLUSIVE OR. These operations operate bitwise on the 
entire word. The EXCLUSIVE OR was included because it was easy to implement without increasing the complexity 
of the model. MIX, however, does not support any logical operations. SNORE allows the three basic shift 
operations (logical, arithmetic, and rotate) in either direction. MIX allows arithmetic and circular 
shifting in either direction, but the arithmetic shift operation can be performed in one of only two 
specific registers, and the circular operation combines both registers. NIP allows only two basic  163 
shift operations: arithmetic and logical shifts (in both directions). SNORE has only one move instruction 
for transferring data between a register and a storage location. MIX and NIP have two different instructions 
for performing these two operations: loading to registers, and saving to storage locations.  SNORE and 
NIP have two different unified save and branch instructions: the branch and set storage and the branch 
and set index register. This allows multiple implementations of subroutine linkages. MIX does not have 
an explicit instruction for subroutine jumps. SNORE encodes the halt instruction to be the instruction 
containing all zeros. This encodement reduces the damage done when a beginning student inadvertently 
branches to an unused region of storage. SNORE and NIP support unified test and transfer operations 
based on comparisons of the AC with zero. NIP also supports decrement and branch instructions, which 
increases the conceptual complexity. MIX supports separate compare and branch operations based on comparison 
of two operands. SNORE and NIP support hexadecimal and character input and output. Hexadecimal I/O was 
chosen to encourage the student to perform number conversion and allow more concise input and output. 
SNORE only allows I/O to a card reader and llne printer. While the capability to extend the model to 
support more peripheral devices exists, we have chosen not to increase the complexity by doing so. In 
contrast, MIX supports integer, real, and character data, but when data is read from the card reader 
or written to the llne printer all data is assumed to be character. However, when data is read from or 
written to devices other than the line printer and card reader, the data is transmitted in its internal 
machine form. Instructions to convert from numeric t5 character and vice versa were added to reduce the 
problem of the programmer performing the conversion. MIX allows for complex peripherals and, as a result, 
requires additional instructions to perform data transmission. The complexity of multiple I/O devices 
and the different methods of transmission thrust unnecessary concepts upon the student. There are reasons 
why MIX and NIP do not meet the pedagogical properties we have stated. MIX was primarily developed as 
a model for implementing complex system-orlented algorithms; it was not designed to introduce students 
to computing. Thus, itls not surprising that it does not meet our goals. NIP was developed under similar 
goals to ours but it was developed incrementally. As a result, it is not well organized and does not 
use fields co~sistently. 5. Summary A properly designed pedagogical processor  model can be an important 
tool in teaching an introductory computer science course. The processor should be easy to use as both 
a teaching tool and learning device. It should have a simple  architecture, and the instruction set 
should be as symmetric as possible. The machine should have the minimal data types of integer and character, 
and the operations should include: arithmetic, logic, shifting, assignment, Jumps to subroutines, testing 
and transferring, input/output, and debug. SNORE has all of these properties. In the past, Washington 
University has used NIP for its introductory computer science courses. We have found NIP to be complicated 
to use as a teaching tool and difficult for the beginning student to understand. SNORE has been developed 
to replace it. SNORE has a similar architecture, but the instruction set has been refurbished. The instruction 
set is hierarchical in nature and uses consistently defined, fixed fields; this makes the instruction 
set easier to understand and remember. Major built-ln debugging facilities have been added. A software 
simulation Of SNORE has been implemented in PL/I (about 3,000 lines of code). An interactive version 
and an assembler have been developed in PASCAL; we are currently using them in our introductory courses 
which utilize the IBM Personal Computer. We also are developing a compiler for a subset of PASCAL that 
generates code for SNORE. This will offer the student the capability to see three different levels of 
computing (machine language, assembly language, and high-level language) and how they relate to one another. 
SNORE will be incorporated into the sequel to [STE70]. REFERENCES <RefA>[KNU69] Knuth, D. E., Tb~ Art of 
Computer (Reading, Mass.: Addlson-Wesley, 1969). [REI73] Reisman, S., "A Survey of Pedagogical Programming 
Languages," SIGCSE (5,2), June 1973, pp. 8-13. [STETO] Sterling, T. D., Pollack, S. V., Comnutln~ and 
Comnuter Science: ~ First Course Wlth Fortran IV (London: Macmillan Company, 1970). [STE74] Sterling, 
T. D., Pollack, S. V., "Ideal Teaching Machines- A Solution to the Pedagogic Language Problem," CACM 
(17,4), April, 1974, pp. 207-8.  </RefA> 
			
