
 AN INVERSION ALGORITHM FOR GEOMETRIC MODELS Martti M~intyl~i Helsinki University of Technology ABSTRACT 
Instead of storing boundary models of solids directly into a data base, it would be advantageous to map 
them first into a simpler form. This approach calls for a procedure called in this paper the inversion 
al- gorithm of a geometric model. We present and analyze an inversion algorithm which constructs a se-quence 
of Euler Operators capable of creating a given boundary representation. The algorithm is com-pletely 
based on the use of Euler Operators enabling us to keep the algorithm simple and to hide imple-mentation 
and data structure details. CR Categories and Subject Descriptors: 1.3.5 [Com-puter Graphics]: Computational 
Geometry and Object Modeling -sofid representations; 3.6 [Computer-Aided Engineering] -computer-aided 
design (CAD) General Term: Algorithms Additional Key Words and Phrases: Geometric Model-ling, Engineering 
Data Bases, Euler Operators 1. Introduction A computer-aided design (CAD) system can be characterized 
as a collection of design tools, which are based on a computational model of the physical artifact designed. 
In application areas of CAD deal-ing with three-dimensional physical solids, geometric data form the 
core of such a model. These data are refered to as geometric models of solids. A geometric model should 
form a sufficient source of data for all parts of a CAD system such as engineer-ing analysis, drafting 
and computer-aided manufactur-ing (CAM). To allow this, we demand a geometric model to be unambiguous 
]9], i.e. the data structures Permission to copy without fee all or part of this material is granted 
provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright 
notice and the title of the publication and its date appear, and notice is given that copying is by permission 
of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or 
specific permission. &#38;#169; 1982 ACM0-89791-076-1/82/007/0051 $00.75 used in the model must designate 
unique physical ob- jects. There are two main approaches to unambiguous geometric models of solids, namely 
(I) the Construc- tive Solid Geometry (CSG) approach /I0/ and (2) the Boundary Representation (BR) approach. 
In a CSG model, solids are described by Boolean combinations of basic solids, while in a BR model solids 
are described by a collection of faces. Faces, in turn, are represented in terms of their bounding edges 
and vertices. To perform certain tasks, also geometric modellers based on the CSG approach transform 
the original definition into a kind of a BR model. In any geometric modelling system the computational 
model has several levels of representation. Initially the user describes it by a definition languag% 
which is mapped into computationalIy suitable internal representations. The definition language text 
is, of course, a model in its own right. A CAD data base is intended to store a computation-al model 
during the design cycle of the object. Of course, also data base representations must be unam-biguous. 
It seems appropriate to consider internal representations and data base representations of geometric 
models as independent of each other. This view leads to the following main alternatives for data base 
representations of geometric models: (1) Store the original definition of the object into the data base. 
Such a definition can be stored into a sequential form by a log of definition opera-tions used. (2) 
Store also the internal representation derived. We consider this approach being equal to storing boundary 
representations into a data base. (3) Transform the internal representation into a sim-ple form, preferably 
into a linear sequence (i.e. string of characters), which then is stored into the data base. Of course, 
it must be possible to re-evaluate the internal data structure based on the derived representation. 
 Let us discuss the pros and cons of these approaches. The first one leads to concise data base formats, 
which serve also as a documentation of the object. To perform analyses or create drawings of the object, 
the definition must be re-evaluated, however. This may be computationally expensive. Boundary models 
of solids are often rather complex network data structures /I/. This means that the second approach can 
lead to difficulties in mapping a complex data structure into a data base format; for instance, physical 
pointers must be mapped into data base references, ultimately secondary storage ad-dresses. Furthermore, 
this approach leads to large data bases, which are difficult to maintain. The re-evaluation of internal 
representations from the data base format is also a nontrivial operation. The third approach is clearly 
advantageous, provided that re-evaluation of internal representations can take place efficiently. This 
motivates the study of the inversion problem: (Inversion Problem) Given a boundary representation, construct 
a linear string of characters such that the string forms an unambiguous mode] of the object de-fined 
by the original representation. To be useful at all, an inversion algorithm must be accompanied by a 
regeneration algorithm~ which is defined by the following: (Regeneration) Given a string of characters 
constructed by an inversion algorithm, construct a boundary representation which unambiguously models 
the same object as the string. Note that we do not require that exactly the original representation is 
constructed. It is sufficient to gen-erate any consistent representation of the object. From the user's 
point of view, this approach is not harmful, because in an unambiguous model all proper-ties of distinct 
representations of an object are equal. 2. An Informal Introduction to the Algorithm Any boundary representation 
is a data structure con-sisting of a finite number of faces, edges and ver-tices. For instance, a cube 
is represented by six faces, twelwe edges and eight vertices such as shown by Figure 2-1. Our algorithm 
will be based on modi-fying the model into simpler forms in a stepwise fashion and recording the incremental 
changes. Figure 2-1 A Cube separated by the edge are joined and we have a col-lection of five faces, 
eleven edges and eight vertices, i.e. a simpler model. Of course, the geometry of the combined face is 
no more planar. Obviously, by re-peating the same operation still thrice we may pro-duce the object depicted 
in Figure 2-2. Figure 2-2 A transformed cube Let us introduce another removal operation, which deletes 
a vertex and an edge such that the vertex is adjacent to no edges except the one to be removed. By this 
operation we can remove the four edge-vertex pairs marked in Figure 2-2. The result of this operation 
is shown in Figure 2-3. i~ ~ I Figure 2-3 A further transformed cube Obviously, by applying once the 
first removal opera-tion and thrice the second, we are left with just one vertex and no edges at all. 
The basis of our algorithm is the fact that a set of modification operations such as those described 
infor-mally above can be identified. These operations are called the Euler Operators /2, 3/. Euler Operators 
are invertible, i.e. each "removal" operator has a "creation" counterpart. This property means that if 
we are able to find a sequence of Euler Operators, which modify a given boundary representation into 
a null object, we can reconstruct it by applying the corresponding inverse operators in the reverse order. 
Thus the inverse sequence can ac-tually be considered an unambiguous model of the ob-ject. Since the 
sequence can be represented by a concise linear data structure, we may conclude that an algorithm capable 
of generating a sequence of Euler Operators corresponding to a given boundary representation is actually 
a solution to the inversion problem defined in chapter 1. Consider the effect of removing the edge marked 
in the figure. In the resulting object~ the two faces 3. Modelling Space and Model Representations Following 
Requicha ]9/, any geometric modelling framework should be based on rigorously defined se-mantics of the 
modelling operations and data struc-tures. This semantics is expressed by the notion of a modelling space. 
The modelling space considered in this paper is the family of "three-dimensional rectilinear polyhedra". 
From now on the term "solid" is used to denote these objects. Solids may have "holes" and multiconnected 
faces. Hollow or disconnected objects are not includ-ed, however. A rigorous definition of solids can 
be found in /6/. In the modelling space chosen, faces can include internal cavities. Thus the boundary 
of a face can consist of several disconnected components or "loops" in our terminology. One of the loops 
represents the outer boundary of the face; the others (if any) represent the cavities and will be called 
"rings". Boundary representations store explicitly certain topo-logical relations between faces, edges 
and vertices /I/. If the model is unambiguous) all other meaning-ful relations can be derived from these. 
In essence) a boundary data structure must be capable of answer-ing any meaningful geometric ("is the 
point <x,y,z> in the interior of the solid?") or topological ("list the neighbour faces of face F") query 
in order to be feasible. Because of the above property, we shall quite freely use topological queries 
in our algorithm. First, we assume the ability of scanning through the edges of a given solid. Given 
an edge E, we assume the availa-bility of its neighbouring faces (denoted E.left face and E.right_face), 
loops (E.left_loop and E.rightjoop) and vertices (E.vertexl and E.vertex2). Furthermore, we assume that 
the edges attached to each vertex are available. 4. Euler Operators Revisited In order to make this paper 
more self-contained we include an introduction to Euler Operators. Euler Operators have derived their 
name from the well-known Euler's Law: in any simple polyhedron) the numbers of faces (f), edges (e) and 
vertices (v) must satisfy the equation (1) v -e + f = 2. In simple polyhedra for which (1) is valid faces 
must be simply-connected and no holes are possible. For-mula (l) may be generalized to solids defined 
in the preceding chapter by introducing three other parame-ters, namely the total number of rings (r) 
in the faces of the object, the number of holes through the object (h) and the number of connected surfaces, 
"shells" (s) in the object. In our modelling space s normally equals unity. The general formula is writ-ten 
(2) v -e + f = 2*s -2*h + r or by setting s = 1) (2") v -e + f = 2 -2*h + r. As noted by Braid, Hillyard 
and Stroud 151, five operators are sufficient to describe all objects satis-fying (2). While these five 
may be chosen in several ways, considerations of modularity and mutual in-dependence have lead to only 
small variations in the collections appearing in the literature /2, 4) 5/. The set of basic operators 
chosen for this work is listed below with an informal definition of the semantics of each operator. mvsf(~ 
Z) Make Vertex) Shell, Face Makes an "initial solid" consisting of one face (f) and one vertex (v) only. 
mev(vl, v2, e) Make Edge, Vertex Adds a new edge (e) connecting an existing ver-tex (vl) and a new vertex 
(v2). Following Baer, Eastman and Henrion [1/, we shall call such an edge a strut. mef(vl, v2, fl, ~ 
_e) Make Edge, Face Splits an existing face (fl) with a new edge (e) between two existing vertices (vl 
and v2) and creates a new face (f2). Note that the vertices may be equal. kemr(e) Kill Edge, Make Ring 
Splits a boundary of an existing face into two components by removing an edge (e). Kemr is applicable 
only if the edge is adjacent only to the face or is a strut and the face remains connected. kfmrh(fl, 
f2) Kill Face, Make Ring, Hole Joins two faces so that the boundary of one (f2) becomes a component (ring) 
in the boundary of the other (fl). For simplicity, we assume that face f2 has no rings. We assume that 
identifiers for faces, edges and ver-tices are assigned by the operators creating them. Above these output 
parameters were underscored. For explanatory purposes the particular parameteriza-tion above is somewhat 
simplified. To represent the effects of the Euler Operators graphically) we may think of them operating 
on a planar graph. In this graph analogy, nodes) arcs and areas of the graph have a natural correspondence 
with the vertices, edges and faces of the model. The mvsf, for instance) creates an "initial" graph with 
one node only. The meanings of Euler Opera- tors can be defined mathematically rigorously by em-ploying 
so called incidence matrices /6/. As an example of Euler Operators, we depict the de-finition of the 
cube with a hole in Figure 4-I by the graph analogy. For brevity, parameter lists are ex-cluded. ! x 
\ /'~ I i I \ i I i | t i ! %" I %. / \ ~ \" mvsf mev mev mef II "ll II/~" II I/ %1 , ,l, ,,cJ--ci,, 
', k / mev mef mev mev mev mef mev mev mef mev mev mef mef ~k~inr mev m~ef kfmrh mev mef mev mef mev 
mef Figure 4-i Euler Operators Note that Euler Operators are not restricted to the case of rectilinear 
objects. For instance, a topologi-cally minimal representation of a torus can be con-structed by Euler 
Operators as depicted in Figure 4- 2. In the resulting object, face fl has two loops sharing edge e. 
Thus v = e = f = r = h = ! and for-mula (2~ is satisfied, as expected. mvsf(fl, vl) mef(vl, vl, fl, f2, 
e) kfmrh(fl, f2) @ Figure 4-2 Construction of a Torus by Euler Operators The operators introduced so 
far are "constructive" in that they are useful for creating boundary models of solids from scratch. For 
the purposes of this paper, their inverse "removal" operators are also interesting. Their names and informal 
meanings are as follows: kvsfO Kill Vertex, Shell, Face Removes a solid such as that created by mvsf. 
kev(e, v) Kill Edge, Vertex Removes an edge (e) and a vertex (v). Kev is applicable only if v has no 
edges except e. kef(e) Kill Edge, Face 3oins two faces by removing the edge (e) separating them. mekr(vl, 
v2, e) Make Edge, Kill Ring 3oins two loops by adding an edge (e) between two vertices (vl, v2), one 
from each of the loops. mfkrh(fl, f2, e) Make Face, Kill Ring, Hole Transforms a ring of face fl into 
a new face (f2). The ring is specified by an edge (e) be-longing to it. The graph models of these operators 
are exactly the inverses of those of the ordinary Euler Operators represented in Figure 4-1. The reader 
may note that the three removal operations of chapter 2 actually equal kef, key and kvsf. Formula (2) 
can be considered the equation of a 5-dimensional hyperplane in the 6-dimensional (grid) space with axes 
<% e, f, h, r, s> /4/. From this point of view, Euler Operators can be thought of as transition vectors 
in the 5-dimensional subspace of the grid defined by (2). For instance, mev operator adds one edge and 
one vertex, thus corresponding to the transition vector <I, I, O, O, O, 0>. The transitions of the ordinary 
Euler Operators are combined into a 6x6 transition matrix M given in Figure 4-3. The last line of M is 
simply formula (2). v e f h r S mev II I 0 0 0 mef ki 01 1 1 0 0 mvsf 0 kfmrh 0 -1 l 1 kemr -I 0 0 1 
 -1 1 2 -1 Figure 4-3 Operator Displacement Matrix  54 5. Derivation of The Algorithm Our algorithm 
is based on the idea of transforming the solid to a null object by Euler Operators. While this is rather 
easy for simple models, holes pose a problem. Obviously, to remove holes the mfkrh operator should be 
used, but how? To derive an algorithm capable of handling the case of holes, let us define the skeleton 
of a boundary model by the following: A SKELETON is a boundary model, where for each edge it is true 
that its faces equal, but its loops do not. The concept of a skeleton is useful in that each edge (if 
any) in a skeleton necessarily bounds a torus-like hole (see Figure 4-2). This means that holes can easily 
be identified and removed in a skeleton. In essence, the definition means that the surface of a skeleton 
can be torn along the skeleton edges while restoring its connectedness -a property characteriz-ing toroidal 
surfaces. Any boundary model can be transformed into its skeleton by inducing a topological classification 
on the edges of the solid and removing each edge violat-ing the definition of a skeleton. In this process, 
if both the faces and loops of an edge equal, it can be removed with either a key or a kemr. If the faces 
differ, it can be removed with a kef. The construc-tion of a skeleton is implemented by the algorithm 
represented in Figure 5-1. makeskeleton(S: solid) begin for all edges E of S do /~ classify E ~/ if E.right_face 
= E.left face then if E.right loop = E.left_loop then if E.vertexl is adjacent only to E then key(E, 
E.vertexl)  else if E.vertex2 is adjacent only to E then key(E, E.vertex2) else kemr(E) else ignore 
E else kef(E) end; Figure 5-1 The Skeleton Construction Algorithm After one make skeleton() step, skeleton 
edges can be removed by transforming holes one by one into new temporary faces by mfkrh. Edges occurring 
in their boundaries are removed by a new make_skeleton0 step. The algorithm for hole removal is represented 
in Figure 5-2. After these steps there remains one vertex for each ring in the original solid or generated 
during the pre-vious steps. Each but one of these vertices may be removed by a mekr followed by a key. 
The last remaining vertex may be removed by a kvsf. The last step is represented in Figure 5-3. The sequence 
of Euler Operators constructed by the algorithm is simply the backward inverse of Euler remove_holes(S: 
skeleton) begin while edges left in S do begin E := any edge of S; F := E.left_face; mfkrh(F, F2, E); 
make_skeleton(S) end end; Figure 5-2 Hole Removal Algorithm remove_rings_and the .object(S: skeleton) 
begin V := any vertex of S; for all other vertices V" in S do begin mekr(V, V, g); key(E, V~  end; kvsf0 
 end; Figure 5-3 Ring Removal Algorithm Operators applied during the algorithm consisting of these steps. 
For simplicity, construction of the se= quence is not explicitly written in the algorithms. Noticing 
that each hole can as well be removed im-mediately when it has been reduced into a skeletal form, all 
three steps can be accommodated in a sin-gle algorithm represented in Figure 5-4. invert(S: solid) begin 
for each edge E of S do if E.right_face = E.left face then if E.right_loop = E.left_loop then if E.vertexl 
is adjacent only to E then key(E, E.vertexl) else if E.vertex2 is adjacent only to E then key(E, E.vertex2) 
else kemr(E) else begin mfkrh(E.left face, F2, E); kef(E) end else kef(E) end; V := any vertex of 
S; for all other vertices V" of S do begin rnekr(V, V, E); key(E, V~  end; kvsf0 end; Figure 5-4 
The Inversion Algorithm The algorithm generates a representation of the to- v8 pology of the object. 
Of course, also the geometry must be stored. In the case of our simple modelling space, it is sufficient 
to store vertex coordinates as a part of each mev and mvsf operator. Face and edge geometries can be 
stored in a similar fashion in the context of the operators creating new faces or edges. In the more 
general case, the geometry of a curve might be defined implicitly as the intersection of two surfaces. 
In this case our algorithm should be con-sidered to invert only the representation of the topol-ogy. 
Note that any implicit geometry representation is invertible, since the definition graph must be acy-clic 
and thus has a partial order. fl: vl v2 v3 v4   v~'~ v'~ f2: vl v5 v6 v2 f3:v2 v6 v7 v3 IS: vt$ vg 
v5 vl f6: vg v7 v6 v5 v~l~l~1~ vl. kef(el2) ~ kemr(e7) " "'~i~] kef(el0) kemr(e2) kef(e9) kemr(el) 
kef(eg) kef(e$) 6. Analysis To be useful, an inversion algorithm should lead to a data representation, 
which is concise as compared to the original data structure and can be transformed more efficiently than 
the original definition language into internal representation. Starting with the second point above, 
we assume that each Euler Operator runs in constant expected time. This can be achieved by using an internal 
symbol table mechanism enabling names for faces, edges and vertices to be mapped into model entities 
in constant time and by storing explicitly certain topological re-lations in the internal model. This 
means that the length of the Euler Operator se-quence is the most important factor. The length of the 
sequence of operators generated is determined by the ordering of edges used during the make skeleton() 
step. In the worst case, Lv/2J rings may be generat-ed, as exemplified in Figure 6-1. Let v, e, f, r 
and h denote the numbers of vertices, edges, faces, rings and holes. The worst case length of the sequence 
may be counted as follows: - each face except the last one takes one kef and the last one one kvsf - 
each vertex except the last is removed by a kev; the last is removed by the kvsf already counted - each 
original ring not removed by kfkrh takes one mekr  - in the worst case, Lv/2J rings may be generated 
by the removal of all edges; they take at most Lvl2j kemr's and mekr's - each hole takes one mfkrh, which 
adds one face and removes one ring. Thus we count for faces h+f-1 kef's i kvsf for vertices v-i kev's 
for rings Lv/2j kemr's r-h + Lv/2J mekr's for holes h mfkrh's. kev(ell,vg) .~r--_ mekr(vl, v2, e) .'P-~ 
kev(e6, v6) ~'[ ) "'~ kev(e, v2) ~ i -~ kev(eS, vS) I ~r~ mekr(vl, v3, e) ' I i"~I " [ t I ! ' t [ l 
 kev(e3, vt$) , ' ' kev(e, v3) --t I .-'~"" i-' mekr(vl, v7, e) ~. , 2--..... ~. =.i~kev(e, v7) .... 
- kvsfO Figure 6-1 Worst Case Example  By the operators listed above, a total of h+f-i + v-i + Lvl2J 
-(r-h+Lvl2J) = v + f -2 + 2*h -r edges are removed. Since this equals e by (23, all edges are removed 
and these operators are sufficient to purge the object. Thus a total of h+f + v-I + r-h+2*Lv/2J+ h = 
 (3) f+2*v+r+h-I (v even) f+2*v+r+h-2 (v odd) operators are generated by the derived algorithm in the 
worst case. 7. The Enhanced Algorithm The simple algorithm derived and analyzed in the preceding chapters 
has the unpleasant property that it may generate new rings during its first phase only to remove them 
during the second one. This results in a longer sequence of operators than would intuitively seem necessary. 
What we would prefer to do is to avoid applying kemr operators in the first phase of the algorithm. This 
can be accomplished by replacing the simple one-pass scan of edges by a more complex algorithm. For simplicity, 
let us use only the list of edges of a solid as the basis of the scan algorithm. While the simple algorithm 
just takes the first edge of the list and classifies it, we now scan the list to locate strut edges. 
As long as struts are found, they are re-moved with a key. Note that the removal of a strut can transform 
some other edge into a strut. If there still remain edges after this process, the al-gorithm tries to 
pick up an edge for which kef is ap- plicable. If no such edge exists, a kemr is applied. Then the first 
process is started again in order to re-move edges possibly transformed to struts. This two-phase scanning 
process is depicted by Figure 7-1 (a-d). The object of Figure 7-1(a) has only two struts el and e2 which 
are removed by key's in Fig-ure 7-1(b). After the second kev, edge e3 is transformed into a strut and 
can also be removed, which gives us the object of Figure 7-t(c). No struts remain and a kef is performed 
onto, say, edge e6 giving the object of Figure 7-1(d). Edges e5 and e7 become struts and the process 
can continue. e4 v e} (a) C b) Co) Cd) Figure 7-1 Edge Scanning Process  It can be seen that removal 
of holes can also be in-cluded into the strut removal phase of the algorithm. Draft for the strut scanning 
algorithm is given in Figure 7-2. It has been written in the form of a boolean function returning true 
as long as a strut or a hole is removed. /* remove one strut or hole-edge */ scanl0: boolean begin for 
all edges E of S do begin if E.left face = E.right_face then if E.~ft_loop = E.right_loop then if E.vertexl 
is adjacent only to E then begin key(E, E.vertexI); return(true) end else if E.vertex2 is adjacent only 
to E then begin key(E, E.vertex2); return(true) end else ignore E else begin /* remove a hole */ mfkrh(E.left_face, 
F, E); kef(E, F); return(true) end else ignore E end; return(false) end; Figure 7-2 The Refined Scanning 
Algorithm  or a kemr. After all edges have been removed, the remaining steps are the same as in the 
simple algo-rithm. The revised inversion algorithm is given in Figure 7-3. invert'(S: solid) begin /* 
step 1" remove edges */ while edges left in S do begin /* remove struts or skeleton holes */ while scant0 
do; /* perform a kef or a kemr */ if edges left in S then scan20 end; /* steps 2 &#38; 3 as in Figure 
5-# */ end; /* perform a kef or a kemr */ scan20 begin /* try to apply a kef */ for all edges E of S 
do if E.left_face != E.right_face then begin kef(E); return end /* apply a kemr */ E := any edge of S; 
kemr(E) end; Figure 7-3 The Revised Inversion Algorithm How good is the revised algorithm? Consider 
again the operator displacement matrix M of Figure #-3. Inverting M we get another 6x6 matrix Minv given 
in Figure 7-g. I I~3 -55 2-2 -22 3-3 1-I 1 - X -3 7 2 -2 3 1 12 2 4 8 -6 2 5 -2 2 9 -I -2 8 # -6 -2 
Figure 7-# The Inverse Displacement Matrix Considering Euler Operators a set of spanning vectors in 
the 6-space <v, e, f, h, r, s>, Minv represents ac-tually a coordinate transformation from the counts 
of the elements of a boundary model (i.e. v, e, f, h, r, s) into numbers of operators needed to generate 
it. For instance, since a tetrahedron has four vertices, six edges, four faces and one surface, we can 
calcu-late the product <% 6, 4, O, O, I> x Minv = <3, 3, I, O, O, O> to infer that to create the tetrahedron, 
at least three mev's, three reef's and one mvsf are needed I#I. Calculating the product The main algorithm 
simply applies the scanning algo-<v, e, f, h, r, s> x Minv rithm until a false is returned and then applies 
a kef and taking into account formula (21 and that s = 1, the following operator counts can be derived: 
(~,a) v-1 mev's (t~b) f+h-1 mef's (t~c) 1 mvsf (4d) h kfmrh's (t~e) r-h kemr's or a total of v+f+r+h-I 
operators. Since in a nonempty model v, f > 0, quantities (t~a) -(4d) are positive numbers. (4e), however, 
may be negative. This indicates that there are models which cannot be constructed without the mekr operator. 
An example is shown in Figure 7-5. Figure 7-5 A Model Needing the Mekr Operator The calculation above 
says nothing of whether a se-quence with exactly these amounts of operators ex-ists, since inverse operators 
contribute to the counts as -1. With regard to mev's~ mef's, mvsf's and kfmrh's, however, our algorithm 
shows that any model can be constructed without the corresponding inverse operators. By the analysis 
of chapter 6 it can be seen, that the enhanced algorithm generates exactly the desired amounts of these 
operators. With regard to the kemr/mekr operators, no similar result exists. Further analysis shows that 
mekr operators can be generated only when holes are present, which gives us at most h mekr~ and by (t~e) 
r kemr's. Thus the refined algorithm generates at most v-1 + f+h-1 + 1 + h + h + r = (5) v+f+r+3*h-1 
operators, which is a better result than (3). The enhanced algorithm is the best that can be ex-pected 
in the sense that if a model can be construct-ed without mekr~ they will not appear in the inver-sion 
generated. In this case the algorithm generates exactly v+f+r+h-I operators. Mekr's will be included 
in the inversion only when strictly needed. Interestingly, restricting the modelling space and the set 
of Euler Operators to simply-connected faces, the lower bound deriveable from the corresponding inverse 
transition matrix would be achieved by the simple al-gorithm. Result (5) is achieved by spending more 
time in the scanning process: while the simple version runs in linear time in terms of the number of 
edges (e), the enhanced version takes a O(e*e) time. A more ela-borate scanning algorithm based on "winged-edge" 
queries can avoid this, however. 8. Discussion Result (5) should be compared against the more con-ventional 
data base formats for boundary models. To give some practical flavour, let us discuss various representations 
of a cube. An inversion for a cube is represented by Figure 8-1. The parameterization used is slightly 
different from that of chapter 4. Calculating 2 bytes for each pointer (object name) and 4 bytes for 
each real number, the inversion would take a total of 182 bytes in the secondary storage. mvsf(vl, fl, 
0.0, 0.0, 0.0); mev(fl, vl, v2, I0.0, 0.0, 0.0); mev(fl, v2, v3, I0.0, i0.0, 0.0); mev(fl, v3, v% 0.0, 
I0.0, 0.0); mef(vl, v4, fl, f2); mev(f2, vl, v5, 0.0, 0.0, 10.0); mev(f2, v2, v6, 10.0, 0.0, 10.0); 
mef(v5, v6, f2, f3); mev(f2, v3, v7, 10.0, 10.0, 10.0); mef(v6, v7, f2, f4); mev(f2, vt~, v8, 0.0, 10.0, 
10.0); mef(v7, vS, f2, f5); reef(v8, v5, f2, f6); Figure 8-1 Inversion of a Cube  In contrast, one 
of the most compact ways to store a boundary model directly is to store vertex coordinates in a list. 
Faces are represented by listing the ver-tices occurring in their boundaries. This vertex-based representation 
would occupy 168 bytes. If ob-ject data on edges is desired, face boudaries should be represented as 
lists of edges. Edges, in turn, have pointers to two vertices. This edge-based representation would take 
192 bytes. This overly simplified comparison shows that Euler Operator se-quences are roughly on the 
same level of verbosity than the more conventional representations. Euler Operators are currently used 
in a number of geometric modelling systems as the basic definition operations. So is the case in the 
Geometric Work-bench (GWB) system under development at the Hel-sinki University of Technology /7, g/. 
In GWB, all definition operations are eventually REFERENCES evaluated into operator sequences. These 
sequences can be evaluated very quickly; for instance, re-evaluation of the inverted results of a set 
operation takes a fraction of the time spent in performing the (i) set operation. The inversion algorithm 
makes GWB a "closed" system in the sense that all object manipula-tion algorithms can be viewed as functions 
mapping operator sequences to operator sequences. (2) Certain operations can be performed directly based 
on the sequences; for instance) to generate a line figure of an object, we need to evaluate only the 
(3) wire-frame corresponding to its inversion, not the whole boundary representation. Linear transforma-tions 
can be applied to objects just by scanning through the sequence and transforming all vertex (4) coordinates. 
There are also other potential uses of the inversion algorithm. It seems to be useful for the important 
problem of transmitting data from one boundary modeller to another. By adding an inversion algo-(5) rithm 
and a regeneration algorithm into both modell-ers, models can be exchanged by inverting the inter-nal 
representation of one modeller into an operator sequence and evaluating it into to internal represen-tation 
of the other one. In the case of N modellers) (6) N such interfaces will be needed as compared to the 
fully connected case of N*(N-I)/2 interfaces. (7) 9. Conclusions We have represented an inversion algorithm 
for boun-(8) dary models of solid objects. The Euler Operator se-quence constructed by the algorithm 
is an unambigu-ous representation of the object modelled by the ori-ginal boundary model; an equivalent 
boundary model can be easily generated based on it. Being a linear data structure, the sequence can easily 
and efficient-(9) ly be used as a secondary storage format for boun-dary representations. The operator 
sequence generat- ed by the algorithm is of minimal length. The usefulness of the algorithm is not restricted 
to (10) the problem of the secondary storage format. It fa-cilitates the separation of the logical data 
represen-tation from the actual representation chosen in geometric modellers based on the BR approach. 
We suggest that operator sequences might be considered models of solids in their own right in geometric 
modelling systems. This approach should enhance their modularity and flexibility. Baer) <RefA>A., C.M.Eastman 
and M.Henrion: "Geometric Modeling: A Survey") Computer Aid-ed Design) Vol. Ii No. 5 (1979), pp. 253-272 
Baumgart, B.G.: "Geometric modeling for com-puter vision", Ph.D. Thesis, Rep. No. CS-463, Computer Science 
Dept.) Stanford Univ. (197t0 Baumgart, B.G.- "A polyhedron representation for computer vision", AFIPS 
Conf. Proc. Vol. t*t 4 National Computer Conf. (1975), pp. 589-596 Braid, I.C.) R.C.Hillyard and l.A.Stroud: 
"Stepwise Construction of Polyhedra in Geometric Model-ing") in-Brodlie, K.W.: "Mathematical Methods 
in Computer Graphics and Design", Academic Press, New York (1980), pp. 123-141 Eastman, C.M. and K.Weiler--"Geometric 
Model-ing Using the Euler Operators") Res. Report No. 78, Institute of Physical Planning, Carnegie-Mellon 
Univ. (1979) M~intylti, M.: "Methodological Background of the Geometric Workbench", Report No. HTKK-TKO-B30, 
Laboratory of Inf. Proc. Science) Helsinki University of Technology (198I) Mtintyl~i, M. and R.Sulonen" 
"GWB -A Solid Modeller With Euler Operators") to appear in IEEE Computer Graphics &#38; Applications 
M~ntyl~i, M. and T.Takala; "The Geometric Work-bench (GWB) -an Experimental Geometric Modeling System", 
in- Encarnacao, 3. (ed.): "EU-ROGRAPHICS "81", North-Holland, Amsterdam (1981), pp. 205-215 Requicha, 
A.A.G.-"Representations of Rigid Solids -Theory, Methods) and Systems", ACM Computing Surveys, Vol. 12 
No. 4 (1980), pp. 437-z¢-64 Requicha, A.A.G. and H.B.Voelcker: "Constructive Solid Geometry", Production 
Automation Project, Tech. Memo. No. 25, Univ. of Rochester (1977)</RefA> ACKNOWLEDGEMENTS Thanks are due to 
Reijo Sulonen and Markku Tam-minen, who gave valuable comments during the preparation of this paper. 
The work described in the paper has been supported by the Academy of Finland and the Helsinki Universi-ty 
of Technology Foundation.  
			
