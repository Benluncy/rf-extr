
 A Database Driven Server For An Internet Based Plant Layout Presentation Jürgen Gausemeier Prof. Dr.-Ing. 
Heinz Nixdorf Institut Rechnerintegrierte Produktion Universität Paderborn Fürstenallee 11 33102 Paderborn 
Germany Tel.: +49 5251 606267 gausemeier@hni.uni-paderborn.de Peter Ebbesmeyer Dr. Ing. UNITY AG Riemekestraße 
160 33106 Paderborn Germany Tel.: +49 5251 69090 0 ebbesmeyer@unity.de  ABSTRACT The EPR (European 
Pressurized Water Reactor) Project is based on an innovative design concept for a new type of pressurized 
water re­actor. The development of this concept will be carried out by a con­sortium of international 
partners and customers based in Germany and France. During the development of the EPR large amounts of 
up-to-date engineering data (i.e. CAD data, planning documenta­tion) have to be made available to all 
project partners for presenta­tion and development. The following paper describes the database of a web-based 
tool named Virtual Web Plant (VWP) , a tool to integrate 3D models from various CAD plant design tools 
and to display them interactively. The tool receives the data through the internet. In the document the 
special advantages of an object orient­ed database for the storage of the graphical data are shown. Through 
the application of object-oriented databases, it is possible for exam­ple, to define various views of 
the logical plant structure. The user is hereby able to navigate easily through both the plant structure 
and the project documentation. Permission to make digital or hard copies of part of all of this work 
or personal or classroom use is granted without fee provided that copies are not made or distributed 
for profit or commercial advantage and that copies bear this notice and the full citation on the first 
page. To copy otherwise, to republish, to post on servers, or to redistribute to lists, requires prior 
specific permission and/or a fee. VRML 2000, Monterey, CA USA &#38;#169; ACM 2000 1-58113-211-5/00/02 
 $5.00  System Holger Krumm Dipl. Inform. Heinz Nixdorf Institut Rechnerintegrierte Produktion Universität 
Paderborn Fürstenallee 11 33102 Paderborn Germany Tel.: +49 5251 606233 hok@hni.uni-paderborn.de Thorsten 
Molt Dipl. Inform. Heinz Nixdorf Institut Rechnerintegrierte Produktion Universität Paderborn Fürstenallee 
11 33102 Paderborn Germany Tel.: +49 5251 606235 molt@hni.uni-paderborn.de Peter Gehrmann Dipl. Ing. 
UNITY AG Riemekestraße 160 33106 Paderborn Germany Tel.: +49 5251 69090 0 gehrmann@unity.de The work 
presented in this paper is part of a Virtual Reality Re­search Project of the Heinz Nixdorf Institut 
and the Siemens AG KWU. 1 INTRODUCTION The EPR project represents a completely new beginning in the de­velopment 
of nuclear power stations. The Design concept combines a high degree at redundancy with special safety 
details. This con­cept guarantees that the already very low probability of the occur­rence of serious 
accidents is further reduced. Even a core melt­down, today most consequence-fraught incident, becomes 
control­lable by the new safety characteristics of the EPR. The EPR will possess a high economic efficiency, 
the capacity of which will amount to around 1,500 megawatts. The draft of the EPR is led by a design 
consortium. The partners are Siemens AG KWU (Germa­ny), Framatome (France) and Nuclear Power International 
(NPI) as well as German and French power supply utilities as clients. Each team is specialized in the 
designing of a sub-unit of the plant e.g. reactor building or the safe-guard buildings. The individual 
teams are further divided into working groups, which work on different disciplines of the plant. Examples 
of these are building architecture, piping routing, ventilation system engineering etc.. For the design 
review process drawings are used for the communi­cation between the several engineering groups. Within 
the interna­tional consortium, communication based on drawings is very difficult therefore the idea was 
conceived of using Virtual Reality to visualize in one scene the complete plant assembly (figure 1). 
Af­ter the implementation of Virtual Reality in the whole design pro­cess the management of the enormous 
quantity of plant objects was performed with a object orientated data base management system. In order 
for the VR-Models must be available to several locations the data must be readily available for information 
and design review through the internet. Using the standard VRML and shareware VRML viewer in an internet 
browser we are now able to present the graphical plant object in 3D in a Virtual Reality environment. 
 1.1 The Scenario Due to the enormous quantity of components in a nuclear power plant, the design phase, 
the administration and/or processing the en­gineering logistics of the plant data becomes one of the 
most com­plex tasks in the engineering range. The following table shows the number of power station objects 
in an overview: The administration of this data sets high demands on the engineering work. Particularly 
important under the criterion is the fact that in the today s market the design quality improves constantly, 
and at the same time design time and - costs must clearly be reduced. These requirements can be only 
achieved, if new and progressive development processes are used on basis of CAX-technologies. The cooperation 
of all techni­cal designers is a very important part of the whole design process. To give an impression 
of the capacity, the following table shows the quantities of the major EPR plant objects. Construction 
Area 850.000 m3 Thermal Elements 1.000 Electrical Elements 5.000 Piping 17.000 Pipe Fixtures 30.000 Catalogue 
Elements 3.000 Plumbing 2.000 The efficient management of such complexities is still a very chal­lenging 
task. This is extremely important, because todays markets demand that development time and overall costs 
must be reduced markedly. This can only be achieved when new and more advanced development processes 
are applied which use the latest CAx tech­nologies. Thereby the cooperation of all of the designers is 
an im­portant part in the design process. In every cooperative development it is a necessity that all 
of those people involved can communicate with each other and share their results. This becomes even more 
important when the complexity of the product being de­veloped and the number of people involved in the 
development pro­cess increases. The exchange of information becomes even more difficult when the individual 
design tools being used are incompat­ible to one another. In this case the design data is no longer inter­exchangeable, 
it must first be converted into a common format to achieve a single database which gives the developers 
a method of communicating with one another. In the EPR project, the different co-designer are working 
with different CAD-Programs that do not allow direct data transfer. 1.2 Motivation At the present time 
the development of the EPR ensures that various design information (drawings, data sheets etc.) are delivered 
to the utilities in set and defined cycles. The number of pages involved for the complete documentation 
can easily reach several thousand. A large part of the documentation is not available in electronic form. 
Experience has shown, that the drawings are not easily understand­able to the non-technically minded. 
The access to the associated data sheets is therefore inconvenient and very time consuming, while many 
pages of information must be searched through. A di­rect access to the desired information is not possible. 
The installation of dedicated CAD workplaces by the utilities for design reviews did not lead to the 
expected success. The foremost reason being is that non-technical staff are incapable of operating the 
highly specialized CAD systems. The revision workplaces introduce enormous costs due to the fact that 
special graphical workstations and the CAD software neces­sary must be purchased. Furthermore an ex- 
change of the complete design data is required to ensure that the design state is up to date. This demands 
great amounts of physical memory in each of the re­vision systems. For easier understanding and simplified 
readability of the drawings, additional views of the pow-er plant are required, this entails an increase 
in both cost and work for the designer. One example: For one delivery stage approximately 200 additional 
isometrical views are required, this leads to costs to the sum of 2 Million DM. It is therefore highly 
desirable to have a tool that has some features of a CAD tool but is simpler in handling. It should be 
capable of dis­playing CAD models but not allow the manipulation of data. Due to the great distances 
between the partners of the design consortium, a tool is desired that can use the Internet as a transfer 
medium. At the same time however, the safety of the data must be guaranteed. The following requirements 
can be derived from this: Interactive display of 3D CAD models  Identification of plant object IDs 
in a 3D viewer  Access to planning documentation for plant objects  Easy to use interface  No local 
data storage  Internet capabilities  High data security  Standard computer as hardware platform  
To fulfill these requirements an approach was chosen which is based on currently available technologies 
like VRML, object-ori­ented databases and Internet Security Standards (SSL).  2 SYSTEM OVERVIEW The 
Virtual Web Plant is designed as a Client-Server system. The basic idea is to give users access to a 
database that holds the com­plete design data. The requested data is transmitted over the Internet to 
the client. The Virtual Web Plant is made up of several different subsystems. Figure 2 shows a simplified 
structure of the complete system. A standard Internet browser acts as the client, that requests data 
from a webserver. Queries are redirected to the database server by the webserver which then sends the 
desired information back. To meet the requirements of the stored engineering data an object-ori­ented 
database was considered, because of its flexibility. We chose a complete object oriented approach for 
the system, including the communication. This means, that the objects are taken from the da­tabase and 
copies of them are send through the internet to the client. The client handles exactly the same object, 
as it is stored in the da­tabase. Encryption technology was applied to ensure the safety of the data 
during transmission over the Internet. The individual parts of the sub-systems and their tasks are explained 
below. 3 DATABASE The request to build up the displayed scenes in the presentation sys­tem dynamically, 
forces the designers to instantiate a file for each single component in the plant. The result will be 
a huge amount of files. Since the development of such complex systems, what a nu­clear power plant indeed 
is, several developers have to work close to another. Even with strong restrictions in the naming of 
the files, the overview will be lost soon. To guarantee data integrity and correct relations, a data 
manage­ment system has to be used. The typical solution will be a database. Facing these problems, an 
object-oriented database is the core ele­ment of the VWP server. In the upcoming chapters, the special 
needs of the storage of VR­data is discussed and the realized solutions are sketched. 3.1 General Advantages 
of the Object-Oriented Database Beside the special advantages an object oriented database will give the 
server, a lot of general problems can be solved by using such a database: The usage of transactions guarantees 
that a VR object cannot be changed by two engineers at the same time. On a file sys­tem, data may get 
lost after saving, because the changes of the engineer saved a file first are then deleted by the engineer 
who saves the same file afterwards. Direct relations help finding technical dependencies between objects. 
They give the engineer a hint, which objects must also be changed after having made the changes in an 
object.  The central data pool gives several advantages for backup and versioning.  The clustering 
of the data speeds up the data access, since each engineer can get the required information on his local 
workstation. This is quite important for international distrib­uted projects.  3.2 The Storage of the 
VR-Data in the Database The modelling of the database structure seems to be quite easy in an object oriented 
data-base. Normally all objects which may have persistent data, are inherited from a special class which 
is defined in the database libraries. This causes the database management sys­tem to store these objects 
in the database. Even if this is a correct approach, it makes sense to build up a special database object 
mod­el. This model should be optimized to the requirements of the appli­cation. One of the requirements 
for the VWP-Project was, to separate the objects which store VR data from the objects which define the 
structure and the engineering information of the plant. This separa­tion enables us to define views in 
the database (see also chapter 3.3). Figure 3 shows the VR-object of the VWP database in the Unified 
Modelling Language (UML, see [3]) format. The VR object is the parent class for every class which is 
used to store VR data in the da­tabase. In this example two classes, VR room and VR equip­ment , inherit 
from this class. The VR room class is used to store the presentation of the civil structure of a room 
in the plant. The VR equipment includes the VR representation of the equipment in the plant, like pumps, 
valves or lines. This separation classifies the VR objects, which also supports the definition of views. 
 On the right side of the diagram in figure 3 two classes, OpenFlight binary and VRML binary are located. 
It seems very curious that these two classes are related one to one to the VR ob­ject class. One to one 
relations are normally superfluous, since the two classes they connect can be combined. There are two 
main rea­sons why we haven't used this combination. The first reason can be already seen in figure 3. 
In this model we added two different VR data representations into the database. The OpenFlight format 
and the VRML data format. The OpenFlight format is used to generate and modify the model, the VRML is 
used to transfer the model through the internet. Dividing the binary data from the VR object class allows 
the addition of further VR data formats to the model. This enables us to use different tools to handle 
these data. Since the models have a similar structure, the different formats can be adapt­ed automatically 
after changing one format. This is often a one way transformation. It is for example not expected in 
this scenario to modify the VRML representation and generate an OpenFlight rep­resentation from it. Another 
imported reason for the extraction of these data classes can be explained with the requirement of the 
transmission of the VR data through a network (Internet for VRML and Intranet for OpenFlight). As described 
in chapter 2 we always transmit the whole object through the network. If we include the complete VRML 
data into the VR object object, we would have no chance to filter special data or to get an overview 
of the possible VRML files. If we apply this separation, only the very small VR object objects are transmitted, 
and the VRML binary file are only trans­mitted if they are requested by the client user. This speeds 
up the data transfer through the internet by reducing the amount of super­fluous data. 3.3 Views The 
possibility to define views is probably the most considerable advantage of an object- oriented database. 
The views are stored in the database next to the VR data. They represent the structure of the plant, 
seen from different points. A view is described by a network of objects, which make it possible to navigate 
through the data. In our example, the VWP, different views have been realized (figure 4). The first, 
and probably most understandable, view is the presen­tation of the plant by locations. The locations 
are defined hierarchi­cally so as not to loose the overview. In this view the user selects a building 
out of a list, from which several rooms must be selected. The presentation system will show the equipment 
belonging to these rooms. In this way it is possible to view systems in the context of rooms. This view 
gives the most realistic picture of the plant. It can be used to check the civil specifications or to 
demonstrate the plant to the public The second view is the system view in which the user can call up 
a model of complete systems within the plant. The system view al­lows direct access to all plant objects 
belonging to a specific sys­tem. The systems are displayed independently of the location. This view can 
be used to check or demonstrate the functions of systems. The third view allows the access to all system 
objects that belong to a certain discipline, independent of systems or buildings. The usage of object-oriented 
databases gives the possibility to add new views without changing or even influencing the old ones. This 
is realized due to the division of the VR data classes and the view defining classes (see chapter 3.2). 
 3.4 Caching and Server Side Computations Having built up a running client server application for a VR 
presen­tation system, the next step is to think about optimization for the en­hancement of the performance. 
In the de-scribed VWP application, the main stumbling block was the network. In this chapter we present 
two possible ways to optimize the dataflow through the in­ternet. Since it is impossible to define or 
select a special route through the internet, an enhancement of the bandwidth of the net­work is also 
impossible. The first optimization influences only the client, the second one influences mostly the server 
and the client (less). The first way is to do this is to initiate a cache on the client side. During 
the time, the user looks into one room, the client load the scenes which shows the adjacent rooms into 
the cache. This princi­ple is based on the assumption that the user normally walks through the plant 
room by room. This assumption is however only correct when using certain view points. The second possible 
way doesn't change the amount of data which is transmitted. The idea is to minimize the amount of connections 
through the internet. Our investigations showed that the generation of a connection wasted a lot of time. 
For a small VRML object, it takes about ten times longer to build up the connection than to trans­fer 
the data itself. After seeing this, we bundled the requested VRML objects to one bigger VRML object on 
the server, and trans­ferred this bigger VRML object through the net. This speeded up the application 
remarkably.  4 VWP CLIENT The VWP Client consists of two graphical user interface modules. The first 
component displays a hierarchical view of the database model, the second component is a VRML browser, 
which is neces­sary for the displaying of the 3D graphical plant models. By selecting one or more objects 
from the plant object hierarchy, the selected objects will be displayed in the VRML browser. The user 
can identify system objects, display detailed information or call up the design documents by interacting 
with the VRML brows­er. This scenario is outlined in figure 5. On the left-hand side the user has chosen 
a subsystem of the EPR, as a result the corresponding 3D objects are displayed in the VRML browser on 
the right-hand side. The two windows below contain detailed information about the selected component 
in the VRML browser and an associated CAD drawing. A standard Internet browser forms the basis of the 
client. The graphical user interface was implemented in Java for several rea­sons. The most important 
one being that standard browser technol­ogy in combination with Java offers a good platform independence. 
On top of that, the Java Virtual Machine is supplied with most of the standard browser products. For 
the display of 3D models the CosmoPlayer plugin [5] was chosen because it can display models in both 
versions VRML 1.0 and VRML 2.0. The External Author­ing Interface (EAI) [8] is used as an interface between 
the Cos­moPlayer and the Java applet. This allows bidirectional communication between the VRML objects 
and the Java applet in use. The display of design data is made possible by the use of a series of commercial 
plugins which can display the different types of docu­ments in the database (i.e. DXF, TIF, etc.).  
Figure 5: VWP Client, the presentation system working on the database. The example shows beside the VR 
model, the structure of the views (upper left), special equipment information (right) and the corresponding 
technical draft (bottom left). 5 SECURITY One of the most important requirements was to guarantee that 
the design documents and the VRML objects could be transmitted safe­ly over the Internet. Access by unauthorized 
third parties should not be possible under any circumstances. The securing of data transfers is made 
possible with Secure HTTP [11]. This protocol enables the encryption of communications between the VWP 
Client and the webserver. Webserver certificates are used in order to identify the client. These certificates 
must be installed on the client computer in order to access the webserver. To prevent programs which 
could endanger the security by accessing the webserver from the Internet, a secure operating system called 
Virtual Vault from Hewlett Packard has been installed. The principles of the secure data trans­missions 
are shown in figure . Due to the high security requirements a solution to the data transfer based on 
CORBA [4] had to be discarded, since previous CORBA implementations offered no acceptable security concepts. 
 6 CONCLUSIONS The VWP system has been in productive use for several months among the consortium partners. 
The feedback from the users can be rated as more than positive. This is especially related to the easy 
and quick to learn application of the VWP Client. At the same time the display speed of 3D models has 
been proven to be sufficiently fast on a standard equipped PC. The system has already led to consider­able 
financial savings, since drawings that until now had to be ad­ditionally produced, are no longer necessary. 
The actual state of the project can be accessed by the customers of the EPR at any time. This makes the 
clarification of which stage the project has reached much simpler. Virtual Web Plant was designed to 
support the communication between customers and engineers in the project consortium. It therefore fits 
in smoothly in the current design environment without any further adjustments. The database system works 
reliably and handles the amounts of data correspond­ingly fast. In future Virtual Web Plant will be a 
part of a global commercial system named GCS (Global Cooperation System), which is devel­oped at UNITY 
AG in Paderborn.The focus of GCS is to manage customer supplier communication. It serves product or project 
in­formation via the internet for supporting sales, sale services, mar­keting processes, engineering 
data exchanges. Distinguishing marks are the dynamical data modelling information cernel and the customer 
orientated session manager and for individual web design the presentation manager. Finally the project 
Virtual Web Plant has more than fulfilled all ex­pectations and future work will be built on these results. 
 7 REFERENCES <RefA>[1] <SinRef><author>Ames, L.A., </author><author>Nadeau, D.R. </author>and <author>Moreland, J.L., </author><title>The VRML 2.0 sourcebook</title>, <publisher>John Wiley &#38; 
Sons</publisher>, <location>New York</location>, <date>1997</date>. </SinRef>[2] <SinRef><author>Bell, G., </author><author>Parisi, T., </author>and <author>Pesce, M. </author><title>The Virtual Reality Mod­eling Language 
(VRML) </title>Version <volume>2.0</volume>, <date>August 4, 1996</date>. In VRML repository: <url>http://www.vrml.org/VRML2.0/ FINAL/spec/index.html</url>. 
</SinRef>[3] <SinRef><author>Booch, G., </author><author>Rumbaugh, J., </author><author>Jacobsen, I.: </author><title>The unified model­ing language user guide, </title><volume>Addison-Wesley</volume>, 
Reading, <location>Mas­sachusetts</location>, <date>1999 </date></SinRef>[4] <SinRef><title>CORBA/IIOP 2.1 Specification</title>. In OMG Web Site: <url>http://www.omg.org/corba/corbi­iop.htm</url>. </SinRef>
[5] <SinRef><title>Cosmo Player VRML Browser</title>. In Cosmo Web Site: <url>http://www.cosmosoftware.com/ products/player</url></SinRef>. [6] 
<SinRef><author>Duan, N. N. </author><title>Distributed database access in a corporate environment using Java</title>. <booktitle>Proc. Fifth Int. World 
Wide Web Conference</booktitle>, <location>Paris, France, </location><date>1996</date></SinRef>. [7] <SinRef><author>Hartman, J. </author>and <author>Wernecke, J. </author><title>The VRML 2.0 Handbook: Building 
Moving Worlds on the Web</title>.<publisher> Addison Wesley Publisher</publisher>, <location>Menlo Park, Ca</location>. <date>1996</date></SinRef>. [8] <SinRef><author>Marrin, C. </author><title>External Authoring 
Interface Reference</title>, <date>Janu­ary 21, 1997</date>. In: <url>http://www.cosmosoftware.com/developer/moving­worlds/spec/External-Interface.html</url>. </SinRef>
[9] <SinRef><author>Ressler S.</author> <author>et al. </author><title>Using VRML to access manufacturing data</title>. <booktitle>Proc. VRML </booktitle><volume>97</volume>, <publisher>ACM Press</publisher>, <location>New York</location>,<date>1997</date>, 
pages <location>111-118</location>.</SinRef> [10] <SinRef><author>Roher, R. M., </author><author>Swing, E.. </author><title>Web-based information visualiza­tion</title>. <journal>Comp. Graph. and Appl</journal>., 
Vol. <volume>17</volume>, <date>July/Aug. 1997</date>, pages 52 59</SinRef>. [11] <SinRef><title>Socket Secure Layer (SSL) </title>In: <url>http://www.netscape.com/products/security/ssl/refer­ence.html</url>. </SinRef>
[12] <SinRef><author>Stiles, R., </author><author>Tewari, S., </author>and <author>Mehta, M. </author><title>Adapting VRML 2.0 for Immersive Use</title>. In <booktitle>Proceedings of VRML 
97 Second Symposium on the Virtual Reality Modeling language</booktitle>, <location>Monterey, CA</location>, <date>Feb. 1997</date>.</SinRef> [13] <SinRef><author>Wernecke, 
J. </author><title>The Inventor Mentor: Programming Object Oriented 3D Graphics with Open Inventor</title>. <publisher>Addison Wes­ley Publisher</publisher>, 
<location>Menlo Park, Ca. </location><date>1994</date></SinRef>.</RefA>  
			
