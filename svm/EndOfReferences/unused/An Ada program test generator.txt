
 An Ada Program S M Austin, D R Wilkins National Physical Teddington, Middlesex, Introduction This Ada 
Program Test Generator (APTG) is a facility to assess the correctness and robustness of an Ada compiler. 
Ada users can run the APTG to determine how reliable a compiler is before using it on critical applications. 
Ada compiler vendors can use the APTG to improve the qual­ity of their product. There are significant 
dangers in errors in delivered code produced by compiler faults since locating such faults can be very 
expensive. Hence future standards in this area are seeking to minimise such problems by requir­ing an 
evaluation of a compiler for critical applications [6, 9]. Tools such as this one are clearly relevant 
to giving greater assurance to compilers. Independent of standards, one would think that developers of 
highly critical systems written in Ada should use tools like the ACEC and the APTG. For an example of 
current practice in this area, see [1]. The APTG is based upon a similar tool for Pascal which has proved 
very effective in finding faults in Pascal compiler (absence of correctness) and in showing defects in 
compilers handling of complex programs (absence of robustness) [12]. Although the generated Pascal test 
pro­grams were unlike user-written code, the faults found in one compiler were all thought to be reproducible 
with ordinary, simple user-like code. The idea behind the APTG is to generate self-checking, correct 
Ada programs by using a random number gener­ator, The programs thus generated are very unlike or­dinary 
programs since constructs are chosen at random, Also, the generator has parameters to control the com­plexity 
of the code. BY increasing thm+e parameters, pro­grams can be generated which are beyond the capacity 
of the compiler. Thus it is possible to stress-test a compiler to determine how robust the compiler is. 
1991 ACM 0-89791-445-7/91/1000-0320  Test Generator and B A Wichmann, Laboratory, TW11 OLW, UK The 
testing that the use of the APTG allows is com­plementary to that of the ACVC. Since the ACVC tests are 
fixed, compilers are soon repaired to pass the tests. However, the APTG can generate many millions of 
dif­ferent programs by use of different seeds to the random number generator. This means that it is always 
possi­ble to generate tests which have not been presented to a compiler before. The APTG is designed 
to check the back-end or code-generator part of the compiler. In con­trast, the ACVC performs very comprehensive 
checks on the front-end of an Ada compiler. The APTG does not generate tests whose semantics might be 
controversial the only issue being the size and complexity of the code. 2 Method The basic concept of 
the APTG is quite simple. The main technique used is to generate very complicated constructs by recursive 
descent. These constructs may be far more complicated than could be sensibly written by hand, and could 
cause the compiler to generate incorrect code. The basic simplicity of the technique, however, allows 
compli­cated constructs to be generated which can be guaranteed to be correct. It is important to generate 
semantically correct pro­grams which check their execution as much as possi­ble. Although avoiding syntactically 
incorrect programs is quite easy (and, in any case, compilers would reject such programs), it is more 
difficult to ensure the program must execute as intended. Vendors would not thank us for producing a 
very intricate program which was sup­posed to locate a bug when the fault was with the APTG itwlf. The 
method is essentially syntax driven, in that given a synt attic choice, a random decision amongst the 
alterna­tives is made. The difficulty is to ensure that syntactically complex programs are nevertheless 
semantically correct. The main features of the APTG are as follows: 2.1 Expressions The APTG contains 
a package which generates arbitrar­ily com~lex expressions of anv tvDe. This ~ackaze is used  ?+20 
 toprovide much of thecomplexity in the generated code, since it is called wherever any value of any 
type is re­quired. The relative complexity of the generated expres­sions it produces may be easily adjusted 
by the user to suit requirements, from the very simple (small number of tokens and low nested depth) 
right up to the very com­plex (large number of tokens and high nested depth). This package is the largest 
in the APTG, and embodies much of the complexity. 2.2 Random Numbers Since syntactic choices are made 
at random, random number generators are required [3, 2]. The APTG has two random number generators, which 
may either be ini­tialised by the user via the parameterisation facility, or automatically by the APTG 
itself at runtime. A feature of the APTG which should not be overlooked is that the seeds to the random 
number generator are all that is re­quired to generate any particular program. If the APTG is run twice 
with the same seed values both times, then exact /y the same program will be generated. Thus if two separate 
people each have a copy of the APTG, and one encounters a problem, then all the information that must 
be exchanged is the seed values. To the limits of accuracy on particular machines, the programs will 
be identical on different hosts, too. The APTG was developed simulta­neously on a VAX1 and a SUN2, and 
generated programs with the same seed values were almost identical on both systems. (The differences 
were due to the parametrizat­ion, see the next section.)  2.3 The Parameters The APTG as a whole is 
parameterised. The APTG is designed to read a file when it is run, and to alter its behaviour depending 
on this file. The seed values dis­cussed in the previous section, as well as many other fea­tures, may 
easily be changed by altering this file. All the other parameters are to ensure that the generated code 
mat ches the characteristics of the compiler under test. For instance, the APTG may be set for one s 
or two s complement arithmetic, for integers of different sizes, or for whatever floating point attributes 
the target machine happens to have. In the absence of these specifications, the defaults are for the 
host machine to be equivalent to the target machine (i.e., the program is self-targeted). Non system-dependent 
features of the generated program may also be altered via the parameters mechanism, in­ cluding the complexity 
of expressions and the maximum sizes of certain objects. This makes the APTG a very 1Digital VAX/VMS 
Ada compiler, version 2.1-28, VAXStation 3100 2Verd1x VADS 6.0.3. Sun 3/260 flexible tool, since it 
can test all kinds and all sizes of implement ations. One potential problem with the parameterization 
mechanism is that it is quite easy to generate a program which makes an incorrect assumption about the 
charac­teristics of the target machine (say, FLOAT DIGITS=5). To prevent this, a special program is provided 
which gener­ates a program to test all the assumptions. This program must be used prior to testing any 
new target machine. 2.4 Types and Subtypes The idea of random generation extends to generating ran­dolm 
types and subtypes. Care must be taken that such random choices produces semantically correct programs. 
Discrete ranges used for array indexing are chosen to have a modest number of values in order to ensure 
that the program does not require excessive storage. (~urrently, the APTG only generates the simpler 
types and there is no plan to generate task types. 2.5 Values Given a specific declaration, within the 
scope of the dec­ laration a value of a specific type will be defined. For inst ante, the declaration 
 type Til i.s (EO, El, E2, E3, E4); implies that T11 FIRST is available, and equal to EO. The APTG has 
a package to preserve such values so that if the value EO is required, T11 FIRST can be generated in­stead. 
As well as attributes, the values of constants and variables (and their components) which are not changed 
are handled in this way. The same package within the APTG also retains details of identity functions 
which return the parameter value as the result. 2.6 Ensuring program correctness The key to ensuring 
that the Ada program generated is semantically correct is the handling of values for any of the generated 
types. In order to handle these kinds of objects, the APTG miips types and values on the target machine 
onto an in­ternal (APTG) representation. These internal represen­tations are then stored and retrieved 
by the APTG. To ensure the correctness of this mapping, it was modelled in VDM [7, 8]. A complete description 
of this modelling is outside the scope of this document, but a summary is in order. [f we consider a 
part of an APTG-generated program which is, schematically: tvwe T is Some TvDe: 321 v :T:= Some_Value; 
... if V /= Some_Value then put( fail ); end if; The APTG needs to know the value V has for any type 
 T. It does this by having a model of the set of values T can have recorded as an integer (of type Int) 
within the APTG. We are now into the area ofsets and maps which VDM can handle with ease. This allowsus 
to an­swer questions about themapping, and to ensure that the operations and the mapping between Int 
and T interact correctly. If we briefly consider an example, where the APTG is generating a floating 
point type F. All the properties of F cannot directly be found in the APTG, since the APTG may well be 
running on a different computer than the tar­get Ada implementation under test. The values oft ype F 
are recorded in the APTG as values of type Int. However, only a restricted subset of F is being used 
by the APTG, namely the integer-valued ones which are both within the range of Int and also within the 
mantissa range of F. The restrict ion here is essential, to ensure accurate arithmetic on the target, 
and also to ensure that the APTG does not generate an internal arithmetic error. Given an operation on 
type F, then there is a corresponding operation on type Int. This is illustrated by the diagram in Figure 
1. 2.7 Target Machine Code A single package and main program is provided for the target machine. The 
package provides a reporting mech­anism which can be easily adapted for systems without full Chapter 
14 input-output, or to log any errors auto­matically. It is expected that vendors having access to the 
source code would wish to modify the system to generate implementation-specific code. A good example 
would be representation specifications, since they are difficult to test by other means and are largely 
untested by the ACVC. 2.8 Generated packages A key decision was taken not to generate numerous pack­ages 
but to concentrate upon the internal complexity of packages. The reason for this choice was that another 
tool GROW was known to test the capacity of a compila­tion system to handle multiple packages (see the 
paper in these proceedings). This implies that the APTG is mainly a test for the comDiler itself rather 
than the linker. 2.9 Documentating and Testing the APTG The APTG is a quite intricate program which needs 
to be carefully documented. On the other hand, the program is monolithic in the sense that re-use of 
the code is not expected, due to its specialised nature. The documentation has been produced with the 
code using Knuth s ideas of literate programming [10] by using an Ada version of the WEB system. Although 
WEB is not as portable as the Ada language itself, we felt it im­portant to provide good documentation 
for those having access to the source code. (Much simpler documentation is available to those merely 
wishing to test a compiler using the APTG as it is,) Code reviews have been undertaken of all the system. 
The development has been via incremental additions to a very basic system, rather than by a single top-down 
design process. The reason for this approach is to ensure that a minimal system is available at an early 
point to give confidence that the method can be successfully applied to an Ada compiler. The code also 
attempts to avoid the known insecurities in the language [11]. Full Fagan-style reviews have not been 
undertaken due to the level of effort needed [5]. The testing of the APTG has been undertaken by two 
methods. For several free-standing packages, a special test progam has been written. For the APTG itself, 
mon­itoring points have been introduced using the Ada WEB system. Execution of these monitoring points 
has either been undertaken or reasoning developed to ensure that no such execution is feasible/needed. 
The use of the VDM specification method combined together with the execu­tion tests (which we can demonstrate 
have been under­taken), seems to reduce the risks of any errors to an ac­ceptable minimum. We have to 
state that the possibility of errors remaining in the generator cannot be eliminated completely. 3 Conclusions 
Writing the APTG has proved substantially more difficult than developing the Pascal version. There are 
several reasons for this: The design is more ambitious;  The design includes detailed parameterization 
to re­flect the characteristics of the target (which also makes testing more difficult );  Several language 
features in Ada which are tested are not present in Pascal such as aggregates and sub­tvDes:  w Alt 
bough the APTG has a good modular design, this has taken longer to develop. It has not always been easy 
to provide the level of test­ing that is necessary and yet avoid the known semantic difficulties of part 
of the language. For instance, problems have arisen over the decision to generate null ranges. Currently, 
experience in using the generator to locate compiler faults is too limited to give a realistic assessment. 
This issue will be reported in a subsequent paper.  Acknowledgements This work has been supported by 
the Department of Trade and Industry as part of its programme on Software Quality, and by the British 
Standard Institution (Quality Assurance).  References [1] G J K Asmis, H O Tezel and J D Kendall. The 
Cana­dian process for the regulatory approval of safety critical soft ware in nuclear power reactors. 
Interna­tional Conference on Control &#38; Instrumentation in Nuclear Installations. Glasgow. May 1990. 
[2] I D Hill and B A Wichmann. Building a random­number generator. Byte March 1987 pp127-128. [3] I D 
Hill and B A Wichmann. An efficient and portable pseudo-random number generator. Applied Statistics AS183. 
Vol 31, No 2. pp188-190, 1982. [4] J D Ichbiah et al: Reference Manual for the Ada pro­gramming language. 
ANSI/MIL-STD 1815A, US De­partment of Defense, February 1983. also 1S0-8652. [5] Software Inspection 
Handbook. IEE ISBN O 86341 2254.1990. (Commonly known as the Fagan inspec­tion method, see Fagan M E. 
IBM Systems J. 15(3) 1976. pp182-211.) [6] Information Technology Security Evaluation Crite­ria , Harmonised 
Criteria for France, Germany, the Netherlands and United Kingdom. Version 1. 2nd May 1990. (UK contact 
point: CESG Room 2/0805, Fiddlers Green Lane, Cheltenham, Glos, GL52 5AJ.) [7] C B Jones, Software Development 
: A Rigorous Approach , Prentice-Hall, 1980. [8] C B Jones, Systematic Software Development Using VDM 
, 2nd edition, Prentice-Hall, 1986. [9] Interim Defence Standard 00-55, Requirements for the Procurement 
of Safety Critical Software in De­fence Eaui~ment . Ministrv of Defence. Armil 1991. [10] W Sewell. Weaving 
a Program Literate program­ming in WEB Van Nostrand Reinhold. 1989. [11] B A Wichmann. Insecurities 
in the Ada program­ming language. NPL Report DITC 137/89, January 1989. [12] B A Wichmann and M Davies. 
Experience with a compiler testing tool. NPL Report DITC 138/89. March 1989.  A Typical APTG Output 
Figures 2 and 3 show typical output from the APTG. It has been simplified in the interests of clarity 
 there is no point reproducing a 10-line expression when a simple out­line would do. The appearance of 
this code is, however, typical of APTG output when set to low complexity. B Biographical Notes Mr Steve 
Austin obtained his computer science de­gree at the Polytechnic of Wales (UK) two years ago. Since then, 
he has worked at the National Physical Lab­oratory (NPL) in the software engineering group. Apart from 
developing the Ada Program Test Generator, he has been responsible for the maintenance of a Unix system. 
IMr Rhys Wilkins is studying for a computer science degree at Hatfield Polytechnic (UK). Unlike many 
stu­dents, he has been taught Ada and hence has been able to make a significant contribution to the Ada 
Program Test Generator during his one year industrial experience at NPL. He is employed by BSI-QAS during 
his period at NPL since BSI-QAS is responsible for marketing the APTG. 13r Brian Wichmann heads the software 
engineering group at NPL. He was a member of the original Ada 83 design team, responsible for the numerical 
facilities. Testing compilers has been his special concern and was co­dev(eloper of the Pascal Validation 
Suite. He was founding ChaLirman of Ada-Europe. 323 Figure 1: Use of VDM to model the APTG x (= 2) x 
(= 2.0) APTG Target x (= 2.0) x (= -.2) x (= 2.0) The correctness of the model of the target program 
is assured by checking that the above diagram commutes, ie, that the mappings give the same results either 
way round. The example above is for the unary minus operation with floating point types, applied to the 
value 2.0. Figure 2: A typical example of the Checking package with TYPES. AND.OPS, REPORT; use TYPES_ 
AND_OPS; package body CHECKING is procedure CHECK is begin while V40 /= (+ (-610529652.0) * 1.0 -0.0 
+ abs 0.0) -0.0 * (+ 1.0 + 0.0 -0.0) + 0.0 * 1.0 loop REPORT.TESTI(FALSE, 1); exit;  end loop; if T35 
FIRST /= (T35 VAL((-594878772) rem (-594878773) + O)) then REPORT.TESTI(FALSE, 5); end if; case V31 
=-4is when TRUE => null; when FALSE => REPORT.TESTI(FALSE, 7); end case; end CHECK; procedure PASS 
is begin REPORT.INFO_MESSAGE( Test Completed ); end PASS; end CHECKING; 324 Figure 3: TYPES_AND.OPS 
package package TYPES. AND-OPS is --constant object declarations  VI : constant BOOLEAN := not BOOLEAN 
PRED( TRU~E ) ; V2 : constant INTEGER := (-1143424228 ) ; V3 : constant FLOAT := (-330832223.0 ) ; --object 
declarations V4 : FLOAT := (-342633335.0 ) ; V5 : INTEGER := 979630625 ; V6 : BOOLEAN := FALSE ;  --number 
declarations V7 : constant := ( -2147483647 -1 ) ; --type declarations type T9 is digits 15 + abs O ; 
--assumes preldefined type with --digits 15, part of parameteri.zation type TiO is INTEGER; type Tiiis(EO, 
Ei,E2 ,E3, E4, E5, E6,E7, E8, E9, EIO); type Ti2 is array ( Tii) of TIO; --subtype declarations subtype 
T12 is FLOAT; subtype Ti3 is Tii range El ,. E7 ; subtype T14 i.s T9; subtype Ti5 is Ti2 range 1125295971,0 
. . 1303633915.0 ; subtype Ti7 is T9 range 558753597.0 . . 558753579.0 ; --null subrange type T7 is 
record Fi : INTEGER := (((237809138))); F2 : Ti range Ti SUCC(Ti SUCC((Tl VAL(+ (-594878768) * 1)))) 
. . Ti WCC( Ti VAL(+ ((-594878755)))) := ((((-594878756)))); F3 : FLOAT := ((((-948914218.0)))); F4 : 
Ti range (T1 VAL((-594878769) * abs (-i))) . . TI SUCC(TI VAL(-(( 594878755 * i -Orem i)))) := ((((-594878758)))); 
 F5 : FLOAT range (-657436229.0* abs 1.0) / 1.0 + (0.0 + 0.0 * abs ((­1.0)) + 0.0 + 0.0 + 0.0) ,, + ((-6574362,09.0) 
-(0.0 + 0.0)) := ((­657436210.0)); end record; type TiO is --array of record array (1300LEAN) of T7; 
 vi2 : constant TIO := ((((TIO (T 7 (F4=> (-594878758), F2 => (-594878756), F5 => (-657436210,0), Fi 
=> 237809138, F3 => (-948914218.0)), T7 ( 237809138, (-594878756), (-948914218.0), (-594878758), (-657436210.0)) 
 ))))); --complex aggregate end TYPES-AND-OPS; A simple example of the TYPES_AND_OPS specification (the 
comments are not part of the generated package). This package has its specification generated by the 
APTG. Currently, it has nobody. 325 
			
