
 A Network Architecture Providing Host Migration Transparency Fumio Teraoka, Yasuhiko Yokote, and Mario 
Tokoro Sony Computer Science Laboratory Inc. 3-14-13 Higashigotanda, Shinagawa-ku, Tokyo 141, Japan. 
{tera,ykt ,mario}@csl. sony. co. jp Abstract The continued expansion of computer networks and the miniaturization 
of computers increase the desire to use one s computer in a consistent computational envi­ronment, regardless 
of location and time. In this sit­uation, host migration transparency is very important. This paper introduces 
a new network architecture which provides host migration transparency in large intercon­nected networks 
and proposes a protocol based on the propagating cache method. We introduce the concept virtual network 
and divide the conventional network layer into two sublayers to realize host migration trans­parency. 
Virtual Internet Protocol, or VIP for short, is derived from DARPA-IP as an example of the ar­chitecture. 
We estimate the overhead of VIP. Host mi­gration transparency can be realized without significant processing 
and traffic overhead. This architecture also preserves host migration transparency across virtual cir­ 
cuits in radio networks.  Introduction In recent years, computers have become smaller and more powerful. 
Although current small computers have limited functionality and poor communication facilities, in the 
near future, workstations functionally equiva­lent to current desk top machines will be small enough 
to carry. Also, computer interconnection will be so widespread that the various networks will constitute 
a world-wide distributed computing environment. Users will be able to use computers and networks from 
any lo­cation: campus, office, or home. The continued growth of computer networks and the miniaturization 
of com-Permission to copy without fee all or part of this material is granted provided that tho copies 
are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of 
the publication and its dete appaar, and notice is given that copying is by permission of the Association 
for Computing Machinery. To copy otherwise, or to republieh, requires a fee and/or specific permission. 
@ 1991 ACM 0-89791-444-9191 /0008 /0209 . ..$1 .50 puters will increase the desire to carry one s own 
com­puter and experience the same computational environ­ment regardless of their location within the 
large inter­connected network. In such an environment, when a user moves, he un­plugs the computer from 
the local area network, trans­ports it, and plugs it in to the local area network at the destination. 
If radio networks, such as the digital cellular phone system, become widely available as data links, 
it will be possible to communicate with other com­puters even while moving. One of the most important 
features of such an environment is that it provides users with the same computational environment no 
matter where a user plugs in his computer. Even if a computer is small enough to carry, a user will not 
carry it if it requires reconfiguration or significant recompilation to achieve the same computational 
environment after con­nection to a different network. From the user s point of view, host migration transparency 
allows the same com­ putational environment on the computer regardless of where he migrates with his 
computer. There are telephone systems for moving entities, such as automobiles, vessels, trains, and 
planes. These sys­tems all rely on a similar mechanism, i.e. the radio cellular mechanism, For example, 
in an automobile cel­lular telephone system, the range of the radio cell is 3-5 km in an urban area or 
10 15 km in a suburb. The mo­bile station registers its location with the home memory station so that 
other stations can call the mobile sta­tion by accessing the home memory station, Channel switching during 
a call is supported in all systems ex­cept that of the vessel. The services provided in these systems 
correspond to those of the data-link layer in the 0S1 seven-layer model. In order to use these systems 
as data links in large interconnected computer networks, a new network architecture, especially the network 
layer architecture, is necessary. Neither the 0S1 network architecture [1S0 84] nor the existing protocols 
such as those in the DARPA protocol suite, take host migration into consideration. Although several distributed 
systems, such as Mach [Accetta 86], V-system [Cheriton 88], and Chorus [Rozier 88], pro­vide network 
transparency, these systems also do not support host migration.l In these distributed systems, users 
must consider the locations of roaming hosts when communicating with them. Host migration can be de­fined 
as changing the network to which a host is con­nected. Host migration results in a change in the host 
address. From the system s viewpoint, host migration transparency can be defined as the service that 
provides migration independent host identifiers. There are sev­eral possible methods to trace migrating 
hosts, e.g. the name server method and the broadcast method; how­ever, these methods have some problems. 
According to the network architecture based on the 0S1 seven-layer model, the network layer is responsible 
for being aware of host locations within the interconnected networks; thus it is this layer which should 
provide host migration transparency. This paper introduces a new network architecture providing host 
migration transparency and gives an overview of a protocol based on this architecture. Sec­tion 2 discusses 
what host migration transparency is and which layer should provide it. In Section 3, we intro­duce the 
concept of a virtual network to implement host migration transparency and divide the network layer into 
two sublayers to efficiently realize the virtual net­work. In Section 4, we propose a virtual network 
pro­tocol based on the propagating cache method. Section 5 gives an overview of VIP derived from DARPA-IP, 
as an example virtual network protocol. In Section 6, we compare methods for providing host migration 
trans­parency and estimate the overhead of VIP. Section 7 describes the transport layer protocol which 
preserves virtual circuits for moving hosts. Section 8 concludes this paper. 2 Host Migration Transparency 
2.1 What is Host Migration Trans­parency ? It can be assumed that a large interconnected net­work consists 
of many connected subnetworks, or local area networks (LANs) and that a host is connected to one subnetwork 
at a time. In such an environment, host migration can be defined as the migration of a host from one 
subnetwork to another. Host migration results in a change of the network address of the host. Because 
unplugging a host from a subnetwork (or an area in the 0S1 IS-IS routing model) and plugging it in to 
an­ other point in the same subnetwork does not change the network address of the host, this kind of 
move is 1Amoeba supports host migration only within subnetworks reachable by a broadcast packet [Tanenbaum 
91]. not thought of as host migration. We classify host mi­gration into two types: ofl-line and on-line. 
In off-line migration, the host is unplugged from the network be­fore moving and can be used as a standalone 
machine during transport. On-line migration, in contrast, allows a host access to the network communication 
channels and reliable connection-oriented mode communication even during actual movement. In conventional 
wired networks, only off-line migration is possible due to phys­ ical restrictions. However, if radio 
networks, such as the digital cellular phone system, become widely available as data links, on-line migration 
will also be possible. In this paper, hosts which can migrate on-line are called mobile hosts and hosts 
which can only migrate off-line are called portable hosts. For the user, host migration transparency 
means that his machine offers the same computational environment regardless of where he chooses to connect 
his machine to the networks. For example, whether a user plugs his computer in to a network in Tokyo 
or in New York, he should be able to receive his e-mail on his com­puter. Such services are offered to 
the user by appli­cation entities, which must communicate with other ap­plication entities to continue 
their computation. If a host migrates, application entities on the host also mi­grate.2 If the network 
can conceal this migration, users can communicate with each other without any modifi­cations. From a 
program s viewpoint, host migration transparency means that application entities are not conscious of 
host migration, and can communicate with­out modifications. 2.2 Who Should Provide Host Migra­tion Transparency 
? There are several methods to keep track of migrat­ing hosts. For users, name servers provide a kind 
of migration transparency: an application entity can get the new address of a migrating peer entity through 
a query to the name server, after which it can commu­nicate with that peer. However, this method has 
sev­eral problems. First, it is impossible to provide on-line migration transparency without modifying 
application programs. If a host with a radio data link roams into another radio network, the address 
of the host changes. The peer application entity needs to know that the host, has moved and must get 
the new address of the roam­ing host to preserve communication channels. Second, this method increases 
network traffic. It requires com­munication both between name servers and application entities for queries 
and possibly among name servers themselves to update the local data caches. Third, it is not clear when 
to update local caches at each host. 2proce~s/object migration, i.e. the migration of a pro­cess/object 
from one machine to another, is beyond the scope of this paper. A broadcast mechanism offers users another 
kind of host migration transparency. For example, a host which wants to send a packet to a migrating 
host broadcasts a query packet. The migrating host receives the query and returns its current address 
to the sender. The sender can then send the packet to the migrating host. One of the most serious defects 
of this method is that it cannot be used in large interconnected networks, where broadcasting causes 
a prohibitive increase in traffic. In both methods, application entities must be aware of the host location. 
Even if the library routines can conceal the host location, the application layer must still trace the 
migrating hosts. That is, application entities must be aware of changes of target location for every 
transmission and get the new address of the target if it haa moved. According to the network architecture 
of the 0S1 seven-layer model, host-to-host communication is a net­work layer service, while end-to-end 
communication is the responsibility of the transport layer. In other words, the transport layer and upper 
layers do not perceive the notion of hosts and it is up to the network layer to be aware of host location 
in the interconnected networks. In conformance with that architecture, the concealment of host location 
should occur in the network layer. If the network layer provides the upper layers with host mi­gration 
transparency, application entities do not need to be modified and on-line migration is possible. 2.3 
What are the Key Services ? End-to-end services are provided by the transport and lower layers. To offer 
host migration transparency in end-to-end services, the transport layer must provide the following four 
services in addition to the normal services. (T-1) Migration transparent transport entity ad­dressing: 
provides the upper layer with the migra­tion independent identifier of the transport entity.  (T-2) 
Migration transparent connectionless mode communication: offers the transport level connec­tionless mode 
communication regardless of migra­tion.  (T-3) Migration transparent connection establish­ment: establishes 
a transport level connection re­gardless of migration.  (T-4) Migration transparent connection-oriented 
mode communication: preserves the transport level connection during actual movement and offers the transport 
level connection-oriented mode commu­nication.  Off-1ine migration transparency, which must be pro­ 
vided to both portable and mobile hosts, is provided by T-1 through T-3. On-line migration transparency, 
required by mobile hosts, requires all four services. To support these services in the transport layer, 
the network layer must offer the following six services in ad­dition to the normal services. We assume 
connectionless mode network services. @ (N-1) Migration transparent host addressing pro­vides the upper 
layer with a migration independent identifier of the host. The transport layer can spec­ify the target 
host by the same host identifier re­gardless of the host s location. e (N-2) Migration transparent connectionless 
mode communication: offers the network level connec­tionless mode communication regardless of migra­tion. 
 (N-3) Disconnect request: prepares to leave a sub­network when a host is to be unplugged.  (N-4) Disconnect 
indication: called by the lower layer to prepare to leave the current radio network and enter another 
in on-line migration.  (N-5) Connect request: prepares to join a network when a host is plugged in. 
 (N-6) Connect indication: called by the lower layer to prepare to join a new radio network in on-line 
migration.  T-1 is supported by N-1. T-2 and T-3 are supported by N-1, N-2, N-3, and N-5. T-4 is supported 
by N-2, N-4, and, N-6. In the network layer, N-3, N-4, N-5, and N-6 are supported by the lower layer. 
Therefore, N-1 and N­2, migration transparent host addressing and migration transparent connectionless 
mode communication, are pe­culiar to the network layer and can be thought of as key services. The next 
section introduces a new network architecture to provide these two services.  3 Virtual Network 3.1 
Concept In the existing network architectures, host addresses have a hierarchical structure, for example: 
(a) area address + ID + SEL (b) network number + host number  In 0S1 [1S0 90], the network layer address 
has format (a), where area address indicates the routing domain, ID is a unique number in the area, and 
SEL is a selector for the transport entity which is to receive the packet. In XNS [Xerox 81] and DARPA-IP 
[SRI 81a], the host address has format (b). In XNS, the host number is unique across the system and the 
network number is added to facilitate the routing. In DARPA-IP, the net­work number is unique across 
the system and the host number is unique in the network. In general, it can be assumed that a host address 
has the two level hierarchy as in (b). In networks employing such host addresses, if a host migrates 
to another network, the host address changes. Since application entities must be conscious of changes 
in the host address, host migration trans­parency cannot be offered under present conditions. We introduce 
the concept of a virtual network to en­able host migration transparency in the network layer. Virtual 
networks are logical networks which exist virtu­ally on the actual, or physical, networks. Virtual net­works 
logically construct interconnected networks above the physical networks. Only the virtual networks are 
visible from the transport layer. Each host is connected to a virtual network just as it is connected 
to a physical network. A host never migrates in the virtual networks even if it migrates in the physical 
networks. That is, each host is always connected to the same virtual net­work, called the native network 
of the host. A host has a virtual network address ( VN-address) in the virtual network and a network 
address, which can be called the physical network address (PN-address), in the physical network. Since 
a host never migrates in the virtual net­works, its VN-address never changes. The PN-address of a host 
indicates the location of the host in the physi­cal networks and is used for packet routing. The trans­port 
layer specifies the target host by its VN-address no matter where it migrates in the physical networks. 
Basically, the PN-address is invisible from the transport layer. The VN-address and PN-address have the 
same format. The relationship between the virtual network address and the physical network address of 
a host is analogous to that between the virtual address and the physical address in the virtual memory 
system. In the virtual memory system, the virtual address used in a program never changes no matter where 
the program is located in physical memory. Similarly, a host can be indicated by its virtual network 
address no matter where the host migrates in the physical networks. 3.2 Protocol Layering Since the transport 
layer specifies the target host by its VN-address, the network layer must convert the VN­address of a 
host to the corresponding PN-address in order to deliver packets. The network layer is respon­sible for 
host-to-host communication, including packet relaying, routing control, and so on. Since this address 
conversion is not in the traditional category of basic net­ work layer functions, we divide the network 
layer into two sublayers as follows (see Figure 1): The virtual network sublayer ( VN-sublayer) con­teals 
the physical location of hosts in the physi­cal networks. A host is assigned a virtual network address 
(VN-address), which this layer converts to the corresponding physical network address (PN­address). The 
physical network subiayer (PN-sublayer) is the conventional network layer. According to the 0S1 model, 
this sublayer consists of the subnetwork independent sublayer, the subnetwork dependent sublayer, and 
the subnetwork access sublayer. This sublayer is responsible for packet relaying, routing information 
exchange, and so on. A host is assigned a physical network address (PN-address). According to this separation, 
the VN-sublayer header is added between the (physical) network layer and trans­port layer headers. If 
the (physical) network layer header of a incoming packet specifies the VN-sublayer as the next upper 
layer, the packet is passed to the VN-sublayer. Otherwise, the packet bypasses the VN­sublayer and is 
passed to the transport layer. Thus, the VN-sublayer can be bypassed if a incoming packet does not have 
the VN-sublayer header or if the receiving host does not have the VN-sublayer. Transport Layer Transport 
Layer I Physical Layer I I Physical Layer Figure 1: Protocol Layers  4 The General Virtual Network 
 Protocol This section gives an overview of the general pro­tocols of the virtual and physical network 
sublayers which do not depend on specific network layer proto­cols. In [Teraoka 91a], the general protocol 
is defined using Pascal-like language and a state transition dia­gram. One of the main services in the 
VN-sublayer is address conversion aa described in Section 3.2. We make the following assumptions about 
the PN-sublayer: it is the conventional connectionless mode network layer, routing control is executed 
in the PN-sublayer using the PN-address of a host, and conventional error control oc­curs in the PN-sublayer, 
 4.1 The Propagating Cache Method There are several possible methods for address con­version, such as 
conversion server method and broad­cast method. In the conversion server method, the VN-sublayer of the 
sender host converts the target VN­address before transmission using a query to the conver­sion server. 
In the broadcast method, the VN-sublayer of the sender broadcasts the target VN-address. The target host 
receives this broadcast packet and replies with its PN-address. These methods, however, have the same 
defects described in Section 2.2. To make the overhead of address conversion as small as possible, we 
introduce the propagating cache method. This method falls under the category of lazy evalua­tion. In 
this method, each gateway/host (or IS/ES in 0S1 terms) holds a cache for address conversion. If the sender 
host does not know the destination PN-address, it assumes that the target host is physically connected 
to its native network, i.e. the sender assumes that the target s PN-address is equal to its VN-address. 
The packet transmitted then travels to the native network of the target. If a gateway on the path holds 
a cache for the target host, the address conversion is done at that gateway. Then, the packet is forwarded 
to the actual physical location of the target. Basically, the relationship between the VN-address and 
the PN-address of a host is maintained by the hosts or gateways in its native network. In the worst case, 
the packet sent to the migrating host is forwarded by its na­tive network. Many packets, however, are 
forwarded by gateways before they reach their native network, since cache information propagates to other 
gateways aa com­munication progresses (see Section 4.2). In addition, the sender learns the PN-address 
of the migrating host when it receives a reply from that host. Then, it can send packets directly to 
the migrating host. The propagation of cache information is due to two causes: transmission of control 
packets of the VN-sublayer and transmission of normal data packets. Control packets are transmit­ted 
when a host is connected to or disconnected from a network. Since the virtual and physical network ad­dresses 
of the sender are included in the headers of both packet types, gateways snoop the header and update 
lo­cal caches when relaying packets. The cache held in each distinct gateway or host is called an address 
mapping table (AMT). When a gate­way or host receives a packet whose source PN-address is different from 
its source VN-address, the AMT entry for the source host is created/updated. An AMT entry consists of 
the following four fields: virtual network address (d&#38;fT~nAdd~ ): acts as the key to the entry. 
 Physical network address (AMTpnAd&#38;): the re­quested value.  Source address timestamp (AMT,SrCTS): 
used to determine whether thk entry is obsolete.  Idle time (AMTidze): used to delete unused entries. 
 Since the network layer is divided into two sublayers, the network layer header includes both the VN-sublayer 
header and the PN-sublayer header. The mandatory fields of the VN-sublayer header are as follows: Source 
and destination virtual network address (VNs,A~~, and VNLWAW,).  Packet type (VNtYPe). This field specifies 
whether the packet is a data packet or a control packet.  Source address timestamp (VN.S,CTS). The source 
host sets the transmission start time in this field. The value of this field is copied into the A.MTSTCTS 
field of the AMT entry for the source host.  Destination address timestamp (VNDesmS). This field is 
filled or modified when the destination VN­address is converted to its PN-address. If the value of this 
field is older than that of the AMT.sVCTs field of the AMT entry for the destination, the PN­address 
field in the PN-sublayer header is overwrit­ten with the value held in the AMT entry.  In order to determine 
whether the AMT entry for the destination is obsolete, the virtual network protocol compares two timestamp 
fields: the VNDe*tTS field of the packet and the AMT,S.CTS field of the local cache entry. This does 
not imply that the clocks of the hosts in the system must be synchronized because these two timestamps 
originate from the same host. If the clock of each host in the system increases monotonously, this obsoleteness 
check works correctly. Transmission, reception, and relay procedures are as follows. If the source host 
has the AMT entry for the target, it sets the destination PN-address field of the packet the value held 
in the AMT entry. Otherwise, the source assumes that the target PN-address is equal to its VN-address. 
The transmitted packet travels by hopping from gateway to gateway. At each gateway, the AMT entry for 
the source host is created/modified if necessary, the destination PN-address in the packet header is 
modified, if necessary, according to the AMT entry for the destination, and the gateway relays the packet. 
The destination host creates/updates the AMT entry for the source if necessary. 4.2 Host Migration Figure 
2 depicts packet flow at the time of host mi­gration. In the figure, an ellipse is a subnetwork, a small 
circle is a host, and a rectangle is a gateway. The figure shows Host-X migrating from Net-A to Net-G. 
Assume that the native network of Host-X is Net-A. In this migration, the PN-address of Host-X changes 
while its VN-address remains constant. After migra­tion,3 Host-X sends a ConnectionNotification packet 
to its native network, Net-A. This packet includes its VN­address and its new PN-address. It travels 
via Net-G, Net-C, and Net-B. Thus, Gw-CG, Gw-BC, and Gw-AB learn the new PN-address of Host-X. The packet 
finally reaches Net-A and then is broadcast within Net-A to notify hosts in Net-A of the new PN-address 
of Host- X. Gw-AB returns an acknowledgment (ack) packet to Host-X. In the figure, a rectangle marked 
with a cross represents a gateway which knows the new PN-address of Host-x. .:. Host-X ~ Gw-BF &#38; 
Gw-CG II Gw-AH 6 * Host-Y Net-H Host-Z 0 Figure 2: Plug-in to a network The packet forwarding procedure 
is depicted in Fig­ure 3. In the figure, Host-Y knows the VN-address of Host-X but does not know its 
new PN-address. There­fore, Host-Y sets the PN-address field of the packet equal to the VN-address of 
Host-X. The pack~t heads for Net-A since Net-A is the native network of Host-X. When the packet reaches 
Gw-BC, Gw-BC converts the VN-address of Host-X to the corresponding PN-address. Then, the packet is forwarded 
to Host-X. Similarly, if Host-Z does not know the new PN-address of Host-X, the packet reaches Net-A 
and then is forwarded to Host- X. In the figure, a thin dotted line shows the path of a packet with an 
incorrect destination PN-address, and a thick dotted line shows the path of a packet with a cor­rect 
destination PN-address. If Host-X sends a packet to Host-Y, Gw-CD and Host-Y both learn the PN-address 
of Host-X. Thus, as communication between Host-X and hosts in other networks progresses, the cache in­formation 
for Host-X propagates more widely. Both the AMT entry and the VN-sublayer header have times­tamp fields, 
so obsolete AMT entries do not convert a destination VN-address to an obsolete PN-address. This prevents 
routing loops. Figure 4 illustrates packet flow when a host is un­plugged from a network. In the figure, 
Host-X is about to be unplugged from Net-G. Host-X broadcasts a Dis­ 3procedures ~XeCUt~dat the time 
a host is about to be Un­plugged from a network are described below. Gw-AH &#38; G + Host-Y A .. . . 
Host-Z et- Figure 3: Packet forwarding connectionNotifica tion packet in Net-G. This packet in­cludes 
the VN-address of Host-X. When Gw-CG re­ceives this packet, it deletes the AMT entry for Host-X and broadcasts 
the packet in Net-C because Gw-CG had an AMT entry for Host-X. Similarly, Gw-BC broadcasts the packet 
in Net-B. Gw-B.F, however, does nothing when it receives the packet because it does not have an AMT entry 
for Host-X. Thus, most AMT en­tries for Host-X are deleted when Host-X is about to be unplugged. This 
control packet does not travel un­related networks. The state transition diagram of the VN-sublayer is 
shown in Appendix A. -  m ost-x ~:~Host-X d Gw-BF &#38; Gw-CG L Gw-AH b Host-Y W os -z Figure 4: Unplug 
from a network 4.3 Obsolete Cache Entries When a host is about to be unplugged from a network, the DisconnectionNoti 
fication packet is sent and most AMT entries for the host are deleted. Some obsolete cache entries, however, 
might remain. A gateway or host which finds a packet with an obsolete PN-address returns an ObsoleteCache 
control packet to the source. As the ObsoleteCache packet travels, any gateway or host along its path 
with a corresponding AMT entry deletes that entry. Also, if an AMT entry at a gateway or host is not 
accessed for a certain time, it is deleted from that cache, with the exception of AMT entries in the 
native network of the host, which are never deleted. 4.4 Tolerance against Network Parti­tion In the 
worst case, a packet sent to a migrating host is forwarded by its native network. The failure of a gate­way 
which partitions the current location of the migrat­ing host from its native network (e.g. Gw-AB in Figure 
3), might cause a problem. There are two cases: Gw-AB may either crash before or after Host-X is plugged 
in to Net-G. In the first case, since connection has already completed, information for Host-X has already 
propa­gated to Gw-CG and Gw-BC when the partition occurs. In the second case, the ConnectionNotification 
packet transmitted by Host-X cannot reach its native network. However, some gateways, e.g. Gw-CG and 
Gw-BC, do receive the packet. Therefore, hosts on the same side of the network partition can communicate 
with the mi­ grating host.4 However, the native network cannot learn the new PN-address of the migrating 
host. This prob­ lem can be solved by having the migrating host continue to retransmit the ConnectionNotification 
packet at cer­ tain intervals until an ack is received.  5 The Virtual 1P An Example This section gives 
an example of the virtual network protocol. Virtual IP (VIP, for short) [Teraoka 91b] is derived from 
DARPA-IP. The conventional 1P layer is divided into two sublayers: the VIP sublayer and the IP sublayer 
(see Figure 5). The functionality of the 1P sublayer is the same as that of the conventional 1P layer. 
The VIP sublayer provides host migration transparency. RPC, ... FTP, ... RPC, ... FTP, ... UDP TCP UDP 
TCP 3 M VIP 1P =) 1Pm theme FDDI etc. Figure 5: VIP layering 5.1 1P address and VIP address As described 
in Section 3.1, a host has two addresses: a VN-address and a PN-address, The VIP address is int reduced 
as the VN-address. The conventional 1P ad­dress acts as the PN-address. The format of both is the same. 
If a host migrates, the 1P address changes while the VIP address is constant. The transport layer spec­ifies 
the target host using the VIP address so that it 41n the Inter net, routing cent rol protocols such as 
EGp must be modified. can communicate with the target regardless of the tar­get s migration. The 1P address, 
as the PN-address, is invisible from the transport layer in the VIP environ­ment. Each host has a network 
to which it is normally connected, the native network of the host. The VIP ad­dress is orignally set 
to the physical host address in the native network. Thus, orignally the 1P address and the VIP address 
have the same value in the native network. When a host is plugged in to a network other than its native 
network, it requires a new 1P address. The proto­col for such 1P address allocation is not described 
in this paper. This allocation can be done with a reverse-ARP like protocol. That is, each local area 
network has an allocation server to which a migrating host broadcasts an address request. The allocation 
server then allocates an 1P address from the address pool. 5.2 Header Format The VIP packet header proposed 
in this paper is im­plemented as an option of the 1P packet header. There­fore, even if a gateway does 
not implement VIP, it can relay VIP packets. The VIP header consists of the fol­lowing eight fields (see 
figure 6): Option type (VIPOPt~vP.) and Option length (VIPOPt~~~). These fields are defined in 1P for 
op­tions. The VIPoP~~vPe field is set to a value speci­fying VIP. The VIP@tLe~ holds the length of the 
VIP header including these two fields (= 20 bytes).  Protocol (VIPProto). This field indicates the upper 
layer protocol, i.e. TCP or UDP.  VIP type (VIPtvP~). This field indicates the type of the VIP packet. 
There are five types:  VipData A normal data packet.  VipDisc This packet announces that the source 
is about to be unplugged from the net­work. VipConn: This packet announces that the source has just 
been plugged in to the net­work. VipConnAck: This is an ack packet of the Vip-Conn packet. VipErrObs 
This is an error notification packet specifying that an AMT entry is ob­solete. Source VIP address (VIPsrc.4~d.) 
and Destination VIP address (VIPDe~tAddr). b Source address timestamp (VIP.S~.~s). This field indicates 
the transmission start time at the source host. When an AMT entry for the source host is updated, this 
value is copied to the cache en­try s AMTsVCTs field. The AMT is updated if the value in this field is 
newer than the value in the AMTsVCTs field of the AMT entry. Destination address timestamp (VIPDe.t~s). 
When the destination VIP address is converted to its 1P address, this field is copied from the value 
in the AMT,SVCTS field of the AMT entry for the destination host. Address conversion occurs only if the 
value in this field is older than the value in the AiWTSvCTS field of an AMT entry for the destination. 
 In 1P, when a packet is sent to a subnetwork, the packet might be split into small fragments if its 
size exceeds the maximum transmission length of the sub­network. These fragments are reassembled at the 
des­tination host. This processing is called fragmentation and reassembly. When fragmentation occurs, 
the VIP header must be copied aa an option into the 1P header for each fragment. Although the source 
and destination 1P addresses and the ID field are used to identify frag­ments in 1P, the source and destination 
VIP addresses are used instead of 1P addresses in VIP. 1P defines eight options, all of which are consistent 
with VIP, except for Loose/Strict Source Routing. Since the notion of source routing is incompatible 
with that of migration transparency, these options should not be used. These two options can be used 
only for fixed hosts whose 1P addresses are always equal to their VIP ad­dresses. Eleven message types 
are defined in the ICMP [SRI 81b] to report control messages to the source host of an 1P datagram. When 
a gateway forwards a packet, if the outgoing subnetwork and the incoming subnet­work are the same, an 
ICMP redirect packet is sent to the source host. In contrast, a VIP gateway performing address conversion 
might send a packet to the same sub­network from which it was received. An ICMP redirect must not be 
sent in such case since such forwarding is normal. destination VIP address source address timestamD I 
destination address timestamD I Figure 6: VIP header format  6 Estimation This section compares the 
availability, traffic and pro­cessing overhead, and tolerance against network par­tition of the name 
server, broadcast, and propagating cache methods. This section also quantitatively esti­mates the overhead 
of VIP using the propagating cache method. The overheads of VIP compared to 1P is neg­ligible. 6.1 Comparison 
of the Three Methods Table 1 shows the availability of the three methods. As described in Section 2.2, 
the name server and broad­cast methods cannot offer on-line host migration. The broadcast method cannot 
be used in large intercon­nected networks. The propagating cache method can offer off-line and on-line 
host migration transparency and it can be used in large interconnected networks. Table 1: Method availability 
~ Table 2 shows the traffic and processing overhead of the three methods. The traffic overhead of the 
name server method is due to the registration/modification of the entry and query/reply of the destination 
address. In addition, if the name server holds the local cache, the cache consistency control among name 
servers causes traffic overhead. The traffic overhead of the broadcast method is due to the query/reply 
of the destination ad­dress at packet transmission time. In these two meth­ods, it is possible that queries 
and replies take place at every transmission. The traffic overhead of the propa­gating cache method is 
due to the three types of con­trol packets sent at disconnection and connection time. This method does 
not cause traffic overhead at packet transmission time. This method does cause processing overhead at 
gateways and the destination host while the other two methods do not, but this overhead is negligi­ble 
as described in Section 6.2. The broadcast method is omitted from our estima­tion of tolerance against 
network partition since it can­not be used in large interconnected networks. In the name server method, 
the name server maintains the re­lationship between the host name and its address. It can be assumed 
that the host name has a hierarchical structure as in the Domain Name System [SRI 87]. In such a naming 
system, the host name and address are maintained by the name server in its naming domain. If a network 
partition occurs between the current location of the migrating host and its naming domain, the host cannot 
register its new address with the name server. Thus, the name server method is not tolerant against network 
partition. The propagating cache method is tolerant against network partition as described in Sec­tion 
4.4. Table 2: Comparison of overhead traflic at traflic at traflic at processing processing processing 
plug-in time unplug time packet xmit at source at gateway at destination name server registration deletion 
of query &#38; reply query &#38; reply to name server the entrv. broadcast  query &#38; reply query 
&#38; reply propagating 2 control 1 control  AMT entry AMT entry AMT entry cache packets packet search 
search search 6.2 Overhead Estimation of VIP In VIP using the propagating cache method, the over­head 
of packet transmission from source host to desti­ nation host in the stable state, To.$ata, can be shown 
as follows: To-data = TSTC+ T~~ x Niwp + l de,t where, T8~c, Tgw, and Tde~t are the processing overhead 
at the source host, the gateway, and the destination host, respectively, and NhOP is the number of hops 
be­tween the source and the destination. T8.C, TgW, and Tde,t can be defined as follows: T..c = T.mt-...rch 
+ Th-const Tgw = Tamt-...r.h x 2 + Tarot-update T~e.t = Tamt_.ea..h i-Tamt-uP~ate i-Th-check Th-..t,t, 
 where, Tamt_.....h,ff amt.update, and Th.check are the time taken for the AMT entry search, the con­struction 
of the VIP header, the update of the AMT entry, and the check of the VIP header, respectively. At the 
source host, AMT entries are searched for the ad­dress conversion of the destination address. At the 
gate­way, they are searched for the address conversion of the destination address and for the possible 
update of the AMT entry for the source host. At the destination host, they are searched for the possible 
update of the AMT entry for the source host. Th-COn~t and Tamt.UPd~t~ con­sist of several valuable assignments. 
Th-check consists of several valuable comparisons. A hash function can optimize the AMT entry search 
time Tamt-.....h, Wdhg Tamt.sea.ch = T hash + Tcompa.e x Ncompa.e + Tkey x (~compa.e 1) where, Tha~h 
is the time taken to calculate the lookup key, Tc.mpa.e is the time taken for the key comparison, Ncompare 
is the m-n number of comparisons, and Tkev is the time taken for the generation of the next key if collision 
occurs. The mean number of comparisons, Ncompare ~ is M follows: ~ompa,e = @#N where, a is the load 
factor, the fraction of the hash table which is filled. Using linear probing for collision resolu­tion, 
then a values of 0.25, 0.5, and 0.9 yield IVcornpar. values of 1.17, 1.50, and 5.50, respectively. We 
Assume that the host address addr, the hash function ll(addT), and the function generating the next key 
hk+l from hk are as follows: addT = A1,A2.A3.A4 (1P s dotted notation) H(addT) =Al +A2+A3+A4(modS) hk+l 
= hk + 1(mod S) where S is the number of the entries in the AMT. If the MC68030 CPU with 25MHz clock 
is used, a is 0.5, and the hop count between the source and the des­tination is 20, then the data packet 
transmission over­head To-data is 0.3-0.4 msec.5 The order of the trans­mission time in the Internet, 
e.g. between Tokyo and the East Coast of the U. S.A., is 100 msec. Therefore, the transmission overhead 
in the stable state, ToAata, is negligible. The memory usage overhead for VIP compared to conventional 
1P is due to the area for the AMT and the extra area for the VIP header in the packet buffer. The size 
of an AMT entry is 16 bytes. If a thousand AMT entries are prepared, they occupy only 16 Kbytes. The 
size of the VIP header is 20 bytes. If a hundred packet buffers are prepared, the memory usage overhead 
is only 2 Kbytes. Therefore, the extra memory usage of VIP is negligible. The traffic overhead of VIP 
is due to control packets. There are three kinds of control packets in the VIP sub-Iayer besides the 
error packet: VipConn, VipConnAck, and VipDisc. The VipConn and VipConnAck packets are transmitted once 
when a host is plugged in to a network. These packets travel between the current lo­cation of the migrating 
host and its native network, The bli or ~Xample, the hop count between SonYCSL in Tokyo and MIT is about 
20. VipConn packet is broadcast within the native network. Only two control packets are transmitted when 
a host is plugged in to a network. Therefore, the traffic over­head at plug-in time is negligible. The 
VipDisc packet is broadcast within the network from which a host is about to be unplugged. The gateways 
with AMT en­tries for the host relay that packet. In a broadcast type network such as Ethernet, the cost 
of broadcast is equal to that of unicast. The VipDisc packet is propagated only to those networks which 
were on the communica­tion route to/from the migrating host. The VipDisc packet is not propagated to 
unrelated networks. Thus, the traffic overhead at disconnect time is negligible. 7 Mobile Host Support 
 In radio networks, off-line migration transparency can be achieved in the network layer by the method 
de­scribed in Section 4. To achieve on-line migration trans­parency, the transport layer must preserve 
the estab­lished connections while moving. This section describes the transport layer procedures which 
preserve the trans­port connection in on-line migration. It can be assumed that radio networks consist 
of many radio cells, each of which can be thought of as equivalent to a conventional (wired) subnetwork 
as shown in Figure 7. Each cell is assigned a network number. In the figure, a dotted circle is a radio 
network and the small rectangle at the center of each radio network is a base station or gateway. These 
gateways are connected by wire. A small circle is a host migrating in the radio networks. We can also 
imagine the dotted circles in the figure as a cellular phone system consisting of many cells. Such a 
cellular phone system can be thought of aa equivalent to a conventional (wired) subnetwork. ,--­   
1--* Figure 7: Host migration in radio networks In addition to the normal control packet types in the 
transport layer, there must be four extra types of control packets to preserve transport connections: 
TconnSuspend, TconnSuspendAck, TconnResume, and TconnResumeAck. In on-line migration, the data-link layer 
is responsible for notifying the network layer when the host enters the common area between the current 
radio cell (or cellular phone system) and the adjacent cell. The procedures to preserve the transport 
connec­tions are as follows: 1. When a host enters the common area of adjacent cells, the data-link layer 
notifies the network layer. The network layer then notifies the transport layer. The transport layer 
changes the state of each con­nection from Active to Suspend. 2. The transport layer sends the TconnSuspend 
packet to the peer entity of each transport con­nection and waits for TconnSuspendAck packets. After 
all acks are received, the transport layer is­sues the migration request to the network layer. 3. The 
network layer processes the migration proce­dures described in Section 4.2. 4. The transport layer sends 
the TconnResume packet to the peer entity of each transport connection and waits for TconnResumeAck packets. 
After all acks are received, the transport layer changes the state of each connection from Suspend to 
Active.  The state transition diagram of the transport connec­tion is shown in Appendix B. 8 Conclusion 
Telephone systems for moving entities such as auto­mobiles are already available. Also, the construction 
of local area radio network is underway. In these sys­tems, however, the usage of radio is limited within 
the subnetwork. That is, the corresponding protocol tech­niques are part of the data-link layer. The 
near fu­ture will bring the construction of large interconnected radio networks. Because host migration 
transparency is paramount in such an environment, a new network architecture for radio networks which 
can handle mo­bile/portable hosts will be essential. This paper proposes that host migration transparency 
should be provided in the network layer according to the 0S1 seven-layer model and introduces the concept 
of a virtual network. This concept divides the network layer into two sublayers: the virtual network 
sublayer and the physical network sublayer. Each host has two identifiers: a migration independent identifier 
(the vir­tual network address) and a migration dependent iden­ tifier (the physical network address). 
To minimize the overhead of address conversion, we int reduce the prop­agating cache method. This method 
falls under the category of lazy evaluation. This paper also proposes VIP derived from DARPA-IP by applying 
the concept of the virtual network. The overhead of VIP versus 1P is negligible. If radio networks become 
widely avail­able as data links, a host migrating to another network can continue connection-oriented 
mode communication. VIP is being implemented on the Muse operating sys­tem [Yokote 91]. Acknowledgments 
We give our thanks to Dr. Hideyuki Tokuda of Carnegie Mellon University, Dr. Jun Murai of Keio University, 
the members of the WIDE project, and the members of Sony Computer Science Laboratory Inc. Discussions 
with them helped us refine the concept of virtual network and its adaptation to the 1P. References [Accetta 
86] Mike Accetta, Robert Baron, David Golub, Richard Rashid, Avadis Tevanian, and Michael Young. Mach: 
A New Kernel Foundation For UNIX Development. Technical Report, Depart­ment of Computer Science, Carnegie-Mellon 
Univer­sity, August 1986. [Cheriton 88] David R. Cheriton. THE V DIS-TRIBUTED SYSTEM. Communications 
of the ACM, VO1.31, No.3, pp.314-333, March 1988. [1S0 84] 1S0. Information processing systems -Open 
systems Interconnection -Basic Reference Model. 1984. 1S07498. [1S0 90] 1S0. Intermediate System to Intermediate 
Sys­tem Intra-Domain Routeing Exchange Protocol for use in Conduction with the Protocol for Providing 
the Connectionless-mode Network Service (ISO 8,/73 ). February 1990. 1S0 DP 10589, [Rozier 88] M. Rozier, 
V. Abrossimov, F. Armand, I. Boule, M. Gien, M. Guillemot, F. Herrmann, C. Kaiser, S. Langlois, P. L60nard, 
and W. Neuhauser. Chorus Distributed Operating Systems. Computing Systems, Vol.1, No.4, Fall 1988. [SRI 
81a] J. B. Postel. Internet Protocol. September 1981. RFC 791. [SRI 81b] J. B. Postel. Internet Control 
Messag Proto­col, September 1981. RFC 792 [SRI 87] P. V. Mockapetris. Domain names -concepts and facilities. 
November 1987. RFC 1034. [Tanenbaum 91] Andrew S, Tanenbaum. In his lecture in Sony Computer Science 
Laboratory Inc. January 1991. [Teraoka 91a] Fumio Teraoka. A GeneraZ Protocol Spec­ification of the Virtual 
Network Sublayer. Techni­cal Memo SCSL-TM-91-001, Sony Computer Science Laboratory Inc., January 1991. 
[Teraoka 91b] Fumio Teraoka. The Virtual IP Proto­col Specification. Technical Memo SCSL-TM-91-O07, Sony 
Computer Science Laboratory Inc., February 1991. [Xerox 81] Xerox. Internet Transport Protocols. XE-ROX 
CORPORATION, December 1981. XSIS 028112. [Yokote 91] Yasuhiko Yokote, Fumio Teraoka, Atsushi Mitsuzawa, 
Nobuhisa Fujinami, and Mario Tokoro, The Muse Object Architecture: A New Operating System Structuring 
Concept. Operating Systems Re­view, VO1.25, No.2, April 1991. also available as SCSL­TR-91-002 of Sony 
Computer Science Laboratory Inc. Appendix A The state transition diagram of the virtual network sublayer 
is depicted in Figure 8. In the figure, S-n is a state. ~ means the state is changed by the event E-n 
and t%-emoutput O-m is issued. The states, events, and outputs are as follows: States:  S-1: Disconnected 
disconnected from the net­work.  S-2: Wait VnConnReq waiting for the VN­sublayer connect request.  
S-3: Wait VnConnDoneInk waiting for the VN-sublayer connect done indication.  S-4: Wait VnPeerConnAck: 
waiting for the VN-sublayer connect notification ack from peer.  S-5: Connected: connected to the network, 
 S-6: WaitVnDiscReq waiting for the VN­sublayer disconnect request.  S-7: WaitVnDiscDoneInk waiting 
for the VN-sublayer disconnect done indication,   Events:  E-1: VnConnReq the VN-sublayer connect 
request is called by the transport layer.  E-2: VnConnInd the VN-sublayer connect indication is called 
by the PN-sublayer.  E-3: VnConnDoneInd the VN-sublayer con­nect done indication is called by the PN­sublayer. 
 E-4: VnDiscReq the VN-sublayer disconnect request is called by the transport layer.  E-5: VnDiscInd 
the VN-sublayer disconnect indication is called by the PN-sublayer.  E-6: VnDiscDoneInd the VN-sublayer 
dis­connect done indication is called by the PN­sublayer.  E-7: VnPeerConnAck the VN-sublayer con­nect 
notification ack is received from peer.   o outputs: O-1: TConnInd: calls the transport layer con­nect 
indication.  O-2: TConnDoneInd calls the transport layer connect done indication.  O-3: TDiscInd calls 
the transport layer dis­connect indication.  O-4: TDiscDoneInd calls the transport layer disconnect 
done indication.  o-5: VnPeerConn transmits the VN­sublayer connect notification to peer. O-6: VnPeerdisc: 
transmits the VN-sublayer disconnect notification to peer.  O-7: PnConnReg calls the PN-sublayer con­nect 
request.  O-8: PnDiscReg calls the PN-sublayer dis­connect request.  Figure 8: State transition diagram 
of the virtual net­work sublayer Appendix B The state transition diagram of the transport connec­ tion 
related to host migration is depicted in Figure 9. In the figure, S-n is a state. ~ means the state is 
changed by the event E-n and output O-m is issued. The states, events, and outputs are as follows: States: 
 S-1: Connected the transport connection is connected and available to transmit/receive packets.  S-2: 
WaitTconnSuspendAck waiting for the TconnSuspendAck packet from the peer trans­port entity.  s-3: Wait 
TDiscDoneInk waiting for the TDisconnDoneInd to be called by the lower layer.  S-4: Suspended the transport 
connec­tion is suspended and unavailable to trans­mit/receive packets.   S-5: WaitTConnDoneInd waiting 
for the TConnDoneInd to be called by the lower layer. . S-6: WaitTconnResumeAck: waiting for the TconnResumeAck 
packet from the peer trans­port entity. Events: E-1: TDiscInk the transport disconnect indi­cation 
is called by the VN-sublayer.  E-2: TDiscDoneInd the transport disconnect done indication is called 
by the VN-sublayer.  E-3: TConnInd: the transport connect indi­cation is called by the VN-sublayer. 
 E-4: TConnDoneInd the transport connect done indication is called by the VN-sublayer.  E-5: TconnSuspend 
the TconnSuspend packet is received.  E-6: TconnResume: the TconnResume packet is received.  E-7: TconnSuspendAck 
The TconnSus­pendAck packet is received,  E-8: TconnResumeAck the TconnRe­sumeAck packet is received. 
 outputs: O-1: TconnSuspend transmits the TconnSus­pend packet. O-2: TconnResume: transmits the TconnRe­sume 
packet. o-3: TconnSuspendAck transmits the TconnSuspendAck packet. O-4: TconnResumeAck transmits the 
Tcon­nResumeAck packet. O-5: VnDiscReg calls the VN-sublayer dis­connect request. O-6: VnConnRey calls 
the VN-sublayer con­nect request. Figure 9: State transition diagram of the transport con­nection 
			
