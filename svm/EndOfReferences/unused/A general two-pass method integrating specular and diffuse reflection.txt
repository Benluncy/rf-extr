
 ~ Computer Graphics, Volume 23, Number 3, July 1989 A General Two-Pass Method Integrating Specular and 
Diffuse Reflection. Francois Sillion, Claude Puech Laboratoire d'Informatique de l'Ecole Normale Sup~rieure 
U.R.A. 1327, CNRS Abstract We analyse some recent approaches to the global illumination prob- lem by 
introducing the corresponding reflection operators, and we demonstrate the advantages of a two-pass method. 
A generaliza- tion of the system introduced by Wallace et al. at Siggraph '87 to integrate diffuse as 
well as specular effects is presented. It is based on the calculation of extended form-factors, which 
allows arbitrary geometries to be used in the scene description, as well as refraction effects. We also 
present a new sampling method for the calculation of form-factors, which is an Mternative to the hemi-cube 
technique introduced by Cohen and Greenberg for radiosity calcu- lations. This method is particularly 
well suited to the extended form-factors calculation. The problem of interactive display of the picture 
being created is also addressed by using hardware-assisted projections and image composition to recreate 
a complete specular view of the scene. CR Categories and Subject Descriptors: 1.3.3 [Computer Graph-ics]: 
Picture/Image Generation -Display Algorithms. 1.3.7 [Com- puter Graphics]: Three-Dimensional Graphics 
and Realism. Additional Key Words and Phrases: radiosity, interreflection, two-pass method, extended 
form factors, z-buffer, progressive re- finement, global illumination, ray tracing.  Introduction The 
problem of light interreflection has been one of the main issues for realistic image synthesis during 
the last few years. It is now widely known that local lighting models are not sufficient to corn- LIENS 
: 45, rue d'Ulm. 75230 Paris Cedex 05. FRANCE. Tel : (33) (1) 43 29 12 25 ext. 32-16. Fax : (33) (1) 
46 34 05 31. e-mail : sillion~fl'uhn63.bitnet, puech@fruhr163.bitnet. Permission to copy without fee 
all or part of this material is granted provided that the copies are not made or distributed for direct 
commercial advantage, the ACM copyright notice and the title of the publication and its date appear, 
and notice is given that copying is by permission of the Association for Computing Machinery. To copy 
otherwise, or to republish, requires a fee and/or specific permission. &#38;#169;1989 ACM-0-89791-312-4/89/007/0335 
$00.75 pute an accurate distribution of light within an environment [13] [1] [5]. The multiple reflections 
of light on the objects in the scene ac- count for a large part of the total distribution of light, and 
a global solution must therefore be computed, for the intensity of light at some point may depend on 
the intensity at any other point. The first global models, ray tracing and radiosity, made strong assump- 
tions about the reflection process, namely that it is either purely specular or purely diffuse. During 
the last three years, some advanced models have been introduced that allow arbitrary reflection modes 
to be used. We review these models briefly in section 2, and show how to describe them using a common 
formulation, similar to the one introduced by Kajiya with the renderin 9 equation [111. This leads to 
a new com- putational system (section 3) extending the work of Wallace el el. [16]. It is a general two-pass 
system that permits the inclusion of refraction among the effects modeled, and removes the previous restriction 
that all specular surfaces must be planar mirrors. We then present a sampling method using adaptive subdivision 
(sec- tion 4) particularly suited to our two-pass method, and show that it is an interesting alternative 
to the classical hemi-cube technique [3] in the diffuse radiosity case as well. Finally, we show in section 
5 how to produce pictures integrating a complete specular behavior at interactive rates, using multiple 
hardware z-buffers. 2 A reformulation of previous models us-ing the rendering equation At the $iggraph 
'86 conference, Kajiya introduced an equation de- scribing the transfer of light between surfaces in 
an environment [11]. We shall here reformulate some recent models within this framework, and introduce 
different kinds of reflection operators, corresponding to the assumptions made by these models. 2.1 The 
equation Kajiya's rendering equation is the following : l(x, x') = g(x, ~')[c(x, x') + f p(~, ~', x")J(x', 
x")dx"]. JS (We use here the exact formulation of Kajiya's paper, and we shall not discuss this formulation. 
The reader is invited to refer to [11] for further details and a discussion of its validity). Let us 
just recall what the different terms of this equation mean : The domain S, over which the integral is 
calculated, is the union of the surfaces of all objects composing the scene. [(x,x r) is the transport 
intensity from point x t to point x, g(x, x ~) is a visibility function between x and x r, which value 
is 0 if x and x%annot see    ~~~SIGG RAPH '89, Boston, 31 July-4 August, 1989 each other, and 7rzJzT-r~ 
otherwise, ee(z,a .I) is the transport ernit- ~(z,~') tance from x' in the direction of z. p(x, z', z") 
is a bi-directional reflectance function at point z'~, with respect to the directions of z and x'. 2.2 
The global reflection operator As Kajiya states it in his paper, one can define a reflection operator 
7g as an integral operator which describes the effects of the reflec- tion on all surfaces on a given 
light distribution, and express the rendering equation as : l=ge+7~I (please note that the visibility 
term is integrated in the reflection operator. This means that the reflected light appears only at points 
that can see the reflector). The rendering equation can then be formally inverted to give an expression 
which makes apparent the contributions of the successively scattered terms. on 1= ~ 7~9 ~ n=0 2.,3 Direct 
solution using Monte-Carlo integration Stochastic sampling, as introduced in the computer graphics field 
by Cook et al. [4], gives a way to actually evaluate the reflection integral, which was further investigated 
by Kajiya, in the same paper where he coined the rendering equation. This is an elegant solution because 
it solves the entire equation, for all directions converging to the viewpoint, but it involves sampling 
a huge number of directions, if complex reflective behaviors are to be modeled. Furthermore, the solution 
is dependent on the light sources in the scene. The problem is to find a general law for the choice of 
the samples, solving the tradeoff between accurate sampling and computation time. The method introduced 
by Ward el al. [17] at Siggraph '88 can be used to reduce the number of samples at each stage, as it 
concentrates on specular, rapidly-varying effects, calculating the slowly-varying "ambient" effects less 
often. 2.4 Radioslty-based solution At the same '86 conference, Irrnrnel et al. ['10] presented another 
general solution of a similar equation, based on the previous radios- ity method. The basic idea of radiosity 
is to discretize the space of variables in the transfer equations, thus transforming the integral equation 
into a system of linear equations. This involves computing the matrix elements of the reflection operator. 
The solution of the linear system is inherently a global solution, and the good points of radiosity are 
that the geometric dependency of the matrix elements needs not to be recomputed if only lighting conditions 
are changed, and that the solution is independent from the viewpoint, as it gives an intensity value 
for each discretized sample. In the classical radiosity method [8],[3], the discretization is performed 
by defining an intensity value (radioslty) for each of a number of surface patches, It is then assumed 
that the directional distribution of the emitted light is larnbertian (diffuse). The method of Immel 
ctal. is more general, because it removes the restriction that surfaces must be larnbertlan reflectors. 
This is done by taking as a discrete unit a couple (patch, direction), with a finite number of patches, 
and a finite number of directions. The matrix coefficients of operator 7~ are calculated during the solution 
process, using the visibility information provided by the usual hemi- cube [3, see also section 4.1 for 
a definition of the herni-cube]. Immel's solution is thus a complete solution, like Kajiya's path tracing, 
but it involves computing and solving a gigantic linear sys- tem of equations, Even if the matrix is 
very sparse, the CPU power needed makes it unpractical for application purposes. Therefore, some hybrid 
solutions have been proposed, which attempt to capi- talize on ray tracing or radiosity strengths. 2.5 
Shao's progressively refined form-factors At Siggraph '88, Shao et al. [15] presented a method allowing 
ren- dering of specular effects, while maintaining a relatively low CPU cost. Their method is a simplification 
of Imrnel's one where, in- stead of keeping track of the energy emitted by each patch for each direction, 
one only considers the energy emitted from a patch to an- other patch (thus grouping together all corresponding 
directions). Recall that for the diffuse radiosity this reduces further to one en- ergy value per patch, 
since the distribution of this energy among the other patches is entirely specified by Lambert's law 
(plus the visibility information from the hemi-cubes). Shao's idea is to use the geometrical information 
provided by the herni-cube as energy transfer information. The percentage of energy leaving a given patch, 
say i, for another patch j is estimated by considering the geometrical relationships between patch i 
and all other patches in the scene, which allows a directional analysis of the impinging light on i. 
In other words, one determines where the incoming light comes from, in order to decide whether it is 
reflected toward patch j or not. Shao's use of the terminology "form factor" is somewhat misleading, 
although the definition matches the one for the usual form factors, since it depends on the current distribution 
of light in the scene, and not only on geometrical aspects. Another way to express this idea is to introduce 
the reflection operator modeled by such form factors. It is easy to see that each step of Shao's iterative 
procedure computes a "current" light distribution lk, such that Ik =gE+~klk ¢* Ik = ~7~gE ~0 by performing 
a radiosity solution with a current reflection operator "K~k. The initial operator 7g0 is a diffuse (Lambertian) 
operator, which corresponds to the usual diffuse form factors. The form fac- tors are re-computed at 
each stage, producing a new reflection op- erator based on the current light distribution, and the whole 
process is started again. The crucial point in the method is the derivation of ?~k (the improved form 
factors at step k), from a given light distribution lk-i. The convergence of the process towards the 
correct distribution of light is established using a subtle argument in Shao's paper, and can be intuitively 
guessed (but not proved) since each step basically adds to the description of the light leaving a given 
patch the light reflected from the directions where "new" light has arrived. Thus specular propagation 
of light is simulated, and the contribution of each step is decreasing as the process runs. One important 
thing to note is that, even if I~ successfully converges towards the correct distribution, this is not 
the case for "/~-k. The final operator "/'~-oo is different from the global reflection operator 7g, as 
it models only light transfers that actually occur under the given lighting conditions. In other words, 
the effets of ~oo and of "/~ on the limit distribution I~o are the same. This implies that the form factors 
must be re-computed when lighting conditions change, in contrast to conventional radiosity. Although 
this method, like Immel's one, produces directional information about the light leaving each patch, the 
authors had to add a finM ray tracing pass in order to accurately render the rapid changes in the specular 
effects across the surfaces, as seen from the eye. However, this method is not inherently a two-pass 
method like the ones studied later in this paper (see discussion in section 3.3). 336  ~ Computer Graphics, 
Volume 23, Number 3, July 1989 2.6 Two-pass naethods First introduced by Wallace et ol. [16] in a specific 
case, the two- pass approach is based on a distinction of reflection modes. The essence of the approach 
is to have a radiosity program calculate the diffuse part of light, and a ray tracing program calculate 
the specular part. Unfortunately, one cannot completely separate the computation of the diffuse and the 
specular components for the light, because the light itself is not diffuse nor specular; these qual- 
ifications apply in fact only to the reflection modes of the light. In other words, some quantity of 
light can be specularly reflected by a surface ,-ql, then diffusely reflected by a surface $2, and so 
on... (figure 1). Figure 1: Light traveling along the path R becomes successively "specular" (from $1 
to $2), "diffuse" (from $2 to $3), and "spec- ular" again (after $3). 3 The extended two-pass method 
We present a two-pass method, referred to as the extended two-pass method in the sequel, which allows 
all types of reflection modes to be simulated, removes the restriction in [16] that specular surfaces 
must be planar mirrors, and includes refraction among the set of lighting effects modeled. 3.1 The basic 
equations In our method, we separate light reflection into two modes : A diffuse reflection : some part 
of the incident light is re- emitted according to Lambert's law.  A specular (directional) reflection 
(and refraction) : some other part is re-emitted around the directions associated with the incident direction 
by Snell's laws.  In other words, we express the reflectance function as a sum : p(z, ~', ~") = pd(x') 
+ p"(x, x', z") pd is the diffuse reflection coefficient at point x I, and p~ is the specular (anisotropic) 
reflection function, which depends on the positions of points x and x" relative to point x I. For fixed 
points x and x t, this specular function, as a function of x II, exhibits a peak around the mirrored 
image of point x by the surface at point x I (and another peak around the refracted direction). The exact 
form of this function needs not to be specified at this point. Furthermore, we shall assume that all 
self-emission of light in the scene is purely diffuse (i.e. c(x, x') _= e(x')). Under these assumptions, 
we can, by replacing p by its full expression, rewrite Kajiya's rendering equation as : I(x, x') = g(x, 
x')Nx') + T]fx, x') where/3 dependsonly on x I : ~(z') = c(-~') + pe(z')[ r(x', x")~." JS and T, the 
specular reflection-refraction operator; is such that : TI(x, a") = g(x, z')fsP'(x, x', z")I(x', x")d:c" 
 '~ iS a linear operator, transforming the light distribution l into the distribution obtained by allowing 
one specular reflection and refraction on all surfaces in the scene (figure 2). The new equation states 
the relationship between the directional (1) and isotropic (~) distributions, and it can be formally 
inverted to yield : up [=[1-T]-tgfl = [~7klff,~ = S.gfl (1) k=O where ,5' = ~=o 7"'~, the global specular" 
operator represents the ~--,~. ~tl[ b NxN ,"' \ \ f t f "y/////~///× (a) Operator "7" (b) Operator S 
(c) Operator 7) Figure 2: Effects of the operators 7-(specular refiec-tion-refraction), S (global specular 
reflection-refraction) and 79 (diffuse reflection) on a single light ray. effect of all possible specular 
reflections on distribution 1. We can be sure that the infinite sum converges, as the eigenvalues of 
T have a module strictly less than one. Indeed, the energy balance within the enclosure states that the 
total reflected intensity is less than the incident intensity, the difference being absorbed by the various 
materials. The distribution ,~ may be expressed in the same manner as : 3=E+7~.I. (2) where D is the 
diffuse reflection operator, defined by : DI(x') = pd(x') fs I(x', x")dr". The operator 'D represents 
the effect of a single diffuse reflection (on all surfaces), on distribution I. It is the operator used 
in the conventional radiosity method. Finally, replacing I by its value given by equation (1) in equa- 
tion (2), we find an equation on the isotropic distribution ft. [,~ = ~ + v.s.~,~.] (3)  3.2 How to 
use these equations We shall now discuss how the above formulation of the rendering equation leads toa 
calculation algorithm. Until now, we only dealt with integral equations. By dividing the environment 
into patches of finite size, we can turn these integrals into summations over the 337 '89, Boston, 31 
July-4 August, 1989 patches. Let us assume for now a purely specular behavior, which means that the function 
pS actually equals zero everywhere but in the exact reflected and refracted directions. This assumption 
is not really necessary here, we merely use it for sake of clarity, as it permits the use of a conventional 
ray-tracing algorithm. The two passes of the algorithm will first estimate the isotropic distribution 
/3, and then derive the complete distribution 1, for the directions reaching the eye. It is important 
to see that none of these two passes can be omitted. The result of first pass is a distribu- tion of 
light where each patch acts as a diffuse illuminator, even if the amount of energy emitted depends on 
the specular interactions within the environment (see figure 13, and comments in section 6). It should 
be stressed here that the discretization of the objects into patches is necessary only for the radiosity-like 
calculation, and not for the ray-tracing calculation. We can thus use a simpler, more compact representation 
of objects, to be used in all the ray-tracing part of the process. First pass : diffuse light. Equation 
3 gives us a way to calculate the "isotropic" distribution of light ~. In fact, this is a radiosity equation, 
like the one introduced by Goral et al., with the diffuse reflection operator being replaced by the product 
~) S. The usual radiosity method solves this equa- tion by computing geometrical form-factors, which 
represent the relationships between all patches in the scene. These form-factors are used to build the 
matrix of the diffuse reflection operator, and this matrix is then numerically inverted. This suggests 
that a ra- diosity method, in which only the form-factor calculation needs to be modified, will give 
us the distribution ft. More precisely, the notion of form-factor will be extended to include specular 
effects. The extended form-factors have a slightly different meaning, compared to the usual ones : Fij 
is the proportion of the energy leaving surface element i and reaching surface element j, after any number 
of specular reflections or refractions. Wallace el al. also use some extended form factors, but they 
only allow one reflection on planar mirrors. Our extended form factors are more general because they 
allow an arbitrary number of specular interactions, with patches of any geometry. The calculation of 
these extended form-factors can be derived just by closer examination of the equation. We want to model 
the action of the operator ~. S, which is equivalent to determining where the light received by some 
point - or surface element - comes from, after having been operated on by this operator. The operator 
~) means that we must consider all the surface elements visible from that point, as in a classical form 
factor computation, and the operator S that, for each of these elements, we have to study a tree of reflected 
and refracted rays. The process is summarized in figure 3. We can use these extended factors in a classical 
radiosity pro- cess : we form the matrix relating the distributions E and fl by multiplying the form-factors 
by the diffuse reflectance values for For each surface element i { For each direction in space d { Trace 
a ray in direction d. Distribute the elementary form-factor of the direction among the objects in the 
ray-tracing tree. } Figure 3: Calculation of the extended form-factors. each wavelength band [8] , and 
we invert the matrix using an it- erative Gauss-Seidel algorithm [9] (the actual matrix to be built and 
inverted is in fact the matrix of the operator [1 -Z)Sg], as ,~ = [] -Z)Sg] -1 ~. It is worth noting 
here that the diffuse reflection coefficients can be changed very easily, as in the classical radiosity 
process, since they have no impact on the extended form-factors. Conversely, the specular coefficients 
are used in the computation of the extended form-factors, and thus can not be changed without re-calculating 
these factors. Second pass : directional distribution The directional distribution of light, 1, must 
be computed for all di- rections of space converging to the observation point. We calculate this distribution 
with equation (I) derived above. The distribution fl has been calculated by the extended radioslty process, 
so that we just have to evaluate the effects of applying operator ,S to it. Let us recall that S represents 
the effect of any number of specu- lar reflections-refractions. In order to compute I for all directions 
reaching the eye, it i~ sufficient to use a classical ray-tracing algo- rithm from the eye position, 
with only the following modifications : No shadow rays are needed, which makes the process faster than 
conventional ray-tracing. Also the computation time is not dependent on the number of light sources. 
 The "shading model" is trivial. It is simply the value of the distribution fl calculated at the given 
point.  The general case for specular reflection We modeled the global specular reflection operator 
as a ray-traci~g operalor because of the pure specular behavior assumption. It is possible to use a more 
complicated reflectance function, as long as there is a way to compute the effect of the operator S. 
A dis- tributed ray-tracing algorithm [4] could be used for this purpose, both in the computation of 
the extended form-factors, and in the second pass. Wallace's method, which uses z-buffer computations 
and simulates distributed ray tracing, could be used as well. It is important to note, however, that 
the same computational method should be used in the extended form factor computation (first pass), and 
in the final rendering (second pass), if true light transfer simula- tion is wanted. Otherwise we can 
obtain images with a very realistic rendering, including non-mirror specular reflectance functions, but 
with an incomplete "diffuse" solution, if pure ray tracing was used in the first pass. 3.3 Discussion 
The two-pass approach is certainJy a good compromise between image fidelity and CPU cost, as it uses 
the respective strength of ray tracing and radiosity to compute the different components of light. Although 
it involves the computation of extended form fac- tors, which requires more CPU than the computation 
of diffuse form factors, this method has a number of advantages against Shao e~ al.'s method : It is 
independent of light distribution. If the extended form factors are stored in a file, a new picture can 
be generated with new lighting conditions, at the only expense of the radiosity solution and the second 
pass (see last section of this paper for a method to display the final images more quickly).  There 
is no need to store the hemi-cubes for the specular patches.  ~ Computer Graphics, Volume 23, Number 
3, July 1989 Specular patches do not have to be finely subdivided. A problem that appears when studying 
the reflection of light on a specular surface is that directions of interest vary rapidly on the surface 
(fig. 4). Therefore, all specular patches should be finely subdivided in order for Shao et al.'s method 
to produce accurate results. Figure 4: Precision in specular reflection. On, the other hand, Wallace's 
"image method" (though re-stricted to plane mirrors) and our ray tracing technique, allow specular patches 
to be treated as a whole, without further substruct uring. This lack of precision for specular reflection 
is precisely the reason that makes Shao et al. use a ray-traced second pass, and one can wonder if the 
precision of specular transfers is not as important during the first pass than during the sec-ond. Actually, 
it would make more sense to either use Shao's method as one pass, with finely subdivided specular patches 
(but then there will be a huge number of hemi-cubes to store), or a complete two-pass method like the 
one presented here. However, Shao's method could prove very useful for simple en- vironments, if a complex 
reflectance function is to be used. 4 An alternative to the hemi-cube sampling technique. A new sampling 
method using adaptive subdivision is introduced for the calculation of form-factors, which is an alternative 
to the hemi- cube technique [3]. The use of an adaptive subdivision scheme proves especially useful when 
extended form-factors are to be com- puted, as it reduces the number of rays to be shot, but our statis- 
tics show that the approach is efficient even for the diffuse case, especially for high sampling resolutions. 
We shall first explain the method in the diffuse case, and then show hew it can be used for extended 
form factors. 4.1 Adaptive sampling of the half-space In a radiosity program, the form-factor calculation 
requires a sam- pling of the solid angle visible from a given surface element. We should therefore analyse 
a whole half-space above the tangent plane at this point, in order to account for all possible transfers 
of light. Cohen and Greenberg suggested to replace the sampling hemisphere by a hemi-cube of unit size, 
and to project the environment on its faces [3]. The faces are subdivided in "pixels" and a fast classical 
algorithm (z-buffer) is used to solve the visibility problems (fig- ure 5). A surface element is thereby 
associated with each pixel, and the corresponding component of the form-factor (which has been pre-calculated) 
is added to the form-factor between the two elements. We present here a different method, where we project 
the environment only once, on a plane parallel to the tangent plane at the given point. We then choose 
to consider only a restricted area on this plane, thus neglecting all the portion of the half-space that 
projects itself out of the selected area. This approximation is ~Z3 1 (a) (b) Figure 5: By using a 
single projection, the five images of the hemi-cube become a unique, very.deformed image. made possible 
by the angular dependency of the form-factor : in the calculation of the form-factor, one must integrate 
a numerical function depending on the cosine of the angle between the direction of sight and the surface 
normal. The contribution of directions that are nearly tangential to the surface considered is thus much 
smaller than the one of almost perpendicular directions. More precisely, the energy diffused through 
the differential cone shown on figure 6 is given by : AP = /90 sin 20d8 [8] (./90 is the total radiated 
power). We can estimate an upper bound for the energy fraction that is neglected when we analyse the 
energy being diffusely emitted through a square area of size 2D, centered in a projection plane at a 
distance H from the emitting surface (with H << D, see figure 6). Actually, the "lost" energy is less 
than the energy radiated in the directions with 0 C [-~ - ~, -~]2, if tan c = ~. The neglected energy 
fraction is such that : AP -- < sin 2~ P0 E is small compared to one, so that we can write tall~ ~ ~ 
and sin 2~ ~ 2~. Finally we get --~ 262 ~ 2( )2P0 If, for example, we decide that an error of 1% is 
acceptable, we calculate the value of tile ratio @: -~ ~ ~-l ~ V/~ ,~ 1,1. (We used this value in our 
implementation of the radiosity method). The above estimation relies on a lambertian distribution for 
the emitted light, but this condition is met even for the extended form factors, since light distribution 
fl is lambertian. : dO Figure 6: The differential solid angle is dw = 27r sin OdO. SIGGRAPH '89, Boston, 
31 July-4 August, 1989 We now have to analyse the projection of the scene on our "screen". Due to the 
perspective distortion induced by the projec- tion, it seems unreasonable to sample uniformly the inside 
of the square. This would lead to oversampling the external regions, in order to obtain a sufficient 
resolution at the center. We divide the screen in variable-size "proxels" (projection elements), each 
proxel contributing for about the same amount to the form-factor. The elementary form-factor associated 
from the origin with a rectangular area, bounded by xl, x:2, Yl, Y2 (see figure 7) is given by [8113] 
: ~2 y2 H 2 ~Fx ..... yl,~ = Li ~, (x2 + y2 q_ l/~)2 dxdy. H Figure 7: Geometry for the calculation 
of the elementary form-factors. We want to find a sequence of integers (xl)i=o...g, N being a fixed resolution, 
such that x0 = 0, XN = D, and 1 Vi,j ~F~,~.~+~,~,=j+ I ~ N---~. Practlca[ly, due to the radial symmetry 
of the integrand, the above requirement is impossible to meet. We chose the values so that all AF along 
the axes have approximately the same value, by numer- ically estimating the integral (see figure 8). 
We obtain a partition of the plane in rectangular regions, by a number of axis-parallel lines. The location 
of these lines (the (x~)i=0...N) needs only to be calculated once, for a given resolution. They are stored 
in a file, and will be used as proxel coordinates. For each patch in the scene, we want to analyse the 
projection of the environment on this rectangular grid, and associate another patch to each proxel. Figure 
8: Subdivision of the screen in "proxels". We want to obtain regions with equal contributions to the 
form-factor. In order to capitalize on the spatial coherence of the projection, we use an adaptive subdivision 
scheme to analyse the image on the screen, as introduced by Warnock [18]. The principle of this algorithm 
is to analyse the projected image in a rectangular region of the plane, or window. If the content of 
the window is "simple enough", or in other words, if the visibil- ity problem is solved, the algorithm 
stops. In all other cases, the window is subdivided, and the process applied to the sub-windows. Once 
the contents of a window have been identified as corre- sponding to a given surface element, we should 
add to the form- factor of this element the contribution of the window. The con-tribution of the different 
proxels, which are not all equal, are pre- calculated and stored in a table, but still, as a window could 
(and should) contain many proxels, we do not want to sum all the proxel contributions within the window. 
We therefore store in the table, in place of the (i,j) proxel contribution, the sum of the contribu- 
tions of all proxels (p, q)p_<i,q_<j, following an idea used for example by Crow [6] to store textures. 
In this way, the contribution of any window can be estimated in constant time, with only one addition 
and two subtractions : if the integrals are stored in a bi-dimensional array T, we have : LxFx, ,~j,yk 
,u, = T[j, l] - T[j, k] - T[i, l] + T[i, j]. 4.2 Generation of the extended form factors The above algorithm 
is able to associate an elementary form factor to any rectangular region of the projection plane, corresponding 
to diffuse emission towards this window. While for traditional radiosity the regions are simply patch 
visibility regions, this is no longer true for the extended form factors, since we want to follow the 
light along specular reflections. Actually, when Warnock's algorithm detects a window, and an associated 
patch, rays are shot at the corners of the window, and the ray trees are compared. A subdivision criterion 
is tested, which basically states that the first few levels of the tree should be the same. If this is 
not the case, the window is subdivided and new rays are shot. We see that the algorithm is only modified 
by a post-process to be executed for each Warnock window. Once a window is subdivided enough so that 
the ray-tracing trees at the corners match, the elementary form factor associated with the window is 
distributed among the objects in the tree. In order to avoid shooting the same rays several times during 
the subdivision, a storage algorithm has been developed, that only requires 2N storage locations, where 
N 2 is the number of proxels [7]. 4.3 Comparison to the henri-cube method An analysis of running times 
has been performed with the two algo- rithms, for different sampling resolutions (figure 9). Times were 
obtained on a Bull DPX-5000 minicomputer, and represent the time needed to compute a whole set of diffuse 
form factors, for the scene shown on figure 15. The resolutions of the hemi-cube and the proxel plane 
can be compared because they correspond to the same sampling cell size at the center of the plane. However, 
both programs were software implementations. There is little doubt that a hardware-assisted hemi-cube, 
as suggested in [16], would be much faster. We see that the two methods are comparable in time consump- 
tion, but that the hemi-cube times seem to increase more rapidly with the resolution. This is predictable, 
since a depth test must be performed at each pixel, while the subdivision in Warnock's al- gorithm depends 
mainly on the projected image. Asymptotically, for a given scene, the time needed by our algorithm is 
bounded by a linear growth, as the subdivision occurs only on "edges" in the 340 ~ Computer Graphics, 
Volume 23, Number 3, July 1989 200C CPU tirae (m£n) 180C x 160C x 140C x o 120C o x o 100C o x o 800 
 600 9 400 o x o ~2 200 o × x 5 o 0 Resolution ~- 64 96 :?@ !(~ 97 22,~ 256 28P 320 352 384 416 448 480 
5]2 Figure 9: Colnparison of running times (11..52 patches). A resolution of N means a. N x N grid. 
(o) stand for our unique projection method, and (x) for the hemi-cube program. image plane. Therefore, 
in the diffuse case, it can be interesting to use our method for large resolutions (which provide more 
accurate form factors). When extended form factors are to be computed, for the ex-tended two-pass method, 
our algorithm allows a strong decrease in the number of rays to be shot, and should therefore be preferred 
to the hemi-cube. 5 One step further towards interactivity Cohen et al. [2] presented at Siggraph '88 
a reformulation of the radiosity solution which allows the display of intermediate images, that gracefully 
converge towards the correct solution. This is a sig- nificant advance in the process of making realistic 
rendering prac- tical for designers, because it makes the interaction loop shorter between the human 
and the machine. It is important to notice that the first pass of our extended two-pass method can be 
adapted in the same way. Our experiments show that for a "typical" scene such as the room shown on figure 
15, progressively refined images integrating specular reflections and refractions of "diffuse" light 
are generated at a speed which is only 20 % less than that of Cohen ct al.'s method (see table 1 and 
comments). The problem remains, however,to interactively display a com- plete solution, including the 
eye-related specular effects (action of the operator $). We present a method, based on hardware-assisted 
z-buffer and image composition, which solves this problem for pla- nar mirrors. This method is not meant 
to replace the second pass completely, as it is limited to such mirrors, but instead the goal is to quickly 
display a picture incorporating some important specular effects. It should be stressed that the solution 
process as expressed by Cohen el al, is still independent of the viewpoint, so that a per- son sitting 
in front of a workstation is able to move through the scene while the solution progresses. We show how 
to accelerate the rendering of mirror effects when viewing conditions are allowed to change. 5.1 Quick 
generation of a picture with mirrors If a particular patch is a planar mirror, one can view the intensity 
coming from a point on the patch towards the eye as a composition of the (diffuse) radiosity of the patch, 
and of the intensity arriving from the reflected direction. If a picture has been computed, with the 
viewpoint transferred to its reflected position relative to the mirror, one can easily retrieve this 
reflected intensity (figure .10). ~ff(Of Vidual //*~ viewpoi~././ -- Figure 10: Calculation of a reflected 
image. Care must be taken of a few points while computing the re-flected image : Reflection on the mirror 
changes the orientation of the coor- dinate system.  An additional clipping plane (the mirror itself) 
should be con- sidered.  On most modern graphics workstation such as the Hewlett-Packard 835-SRX used 
in our implementation, an off-screen portion of the frame buffer can be used to compute the reflected 
image. Displaying the complete picture then only involves masking (to ex- tract the portion of the picture 
where the mirror is seen) and a frame buffer to frame buffer copy of a block of pixels. Thus the extra 
time required to display the final picture, including first re-flection on planar mirrors, is about the 
number of mirrors times the time needed for a z-buffered projection, For a simple scene like the one 
shown in figure 14, the display time is roughly doubled, which allows interaction with the picture (the 
complete display must be done each time the radiosity values are updated by the solution process). 5.2 
Moving tile viewpoint When the viewpoint is to be moved "continuously", and for complex scenes, even 
a factor two in the display time is too much. On the other hand the precision required for displayed 
images is less, because each frame is displayed only for a very short time. To reduce the time spent 
for each picture, we actually store a reflected 341    
			
