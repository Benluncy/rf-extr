
 An Application Oriented Introductory Computer Science Sequence by James D. Powell North Carolina State 
University Introduction: Today's computer science programs are in an excelleht growth position. Many 
high school stu-dents and guidance counselors believe that the term "computer': implies high paying jobs 
in an exciting field, ffigh schools are also beginning to introduce computing into their programs. The 
use of computing in these schools ranges from formal programming courses, to computer literacy courses, 
to the use of computers as a tool in such courses as math and physics. Because of this interest, the 
enrollments in computer science departments are increasing at a rapid rate. This new influx of students 
presents some interesting challenges to our departments. On one hand, our introductory courses must accommodate 
students who have been exposed to computing. The amount of exposure ranges from some simple lessons in 
how to write BASIC programs to three or four years of computing experience involving several programming 
languages. On the other hand, our introductory courses must accommodate those students who have no prior 
experience with computing. Many of these students have no concept of computer science as an academic 
discipline. They are in the program for such reasons as the current glamor of computing or the potential 
for a high paying job. Neither of these reasons are bad in themselves; however, they do pose an additional 
challenge for our introduc-tory courses. We need to help these students understand what is meant by the 
term "computer science". Very early in their education the stu-dents need to be exposed to the major 
areas of computer science. Our introductory sequences must therefore be capable of introducing comput- 
ing to those students with no prior background and at the same time handle students with a wide range 
of previous computing experience. At North Carolina State University, we are meeting the above described 
challenges with three major approaches: An introductory sequence for students with no background in 
computing,  An introductory sequence for students with computing backgrounds, and  Advanced placement 
activities.  The purpose of this paper is to discuss the first approach. Overview. The introductory 
sequence for students inter-ested in computer science is a two semester set of courses. These courses 
are an extremely important part of our program since they provide a founda- tion for the students' development. 
The concepts and techniques developed during this period will follow the students through the next three 
years. As indicated earlier, one of the objectives of this sequence is to introduce the student to a 
variety of applications in order to assist him/her in making a career choice. A conscientious effort 
is made throughout the sequence to make the stu- dents aware of computer applications; however, the second 
semester is designed to facilitate these discussions. For this reason an overview of the year sequence 
will be given with emphasis on the second semester. We shall then discuss the dif- ferences of this approach 
with other techniques presented in the literature. Several problem areas and future plans will also be 
discussed. First Semester. The major objectives of the first semester are: to develop algorithms using 
structured concepts,  to develop effective programs for the implementation of algorithms,  to understand 
the elementary concepts of machine architecture.  During this semester, the major language features 
discussed are control structures, arrays, procedures and simple character strings. The structured concepts, 
as such, are not formally discussed; but these are the only constructs introduced in class and the only 
constructs allowed in the algorithms. The initial assign-ments are small and frequent with the emphasis 
on specific isolated concepts. As the semester progresses, the assignments increase in complexity 49 
with the final assignment requiring the use of several procedures. It is also important that students 
understand the basic simplicity of current computing machines in terms of the "fetch-execute cycle." 
However, the lack of global control structure in the machine language is a deterrent to "structured thinking." 
Thus, this material is now taught near the end of the course, after the students have been indoctrinated 
to the structured techniques for algorithm development. Second Semester. The major objectives for the 
second semester are: to develop experience with the features of high level programming languages,  
to expose students to various applications of computer science, and  to provide an introductory understanding 
of operating system facilities.  The emphasis of the course is on the use of the language facilities 
and not how they are implemented. At this stage of development, the student should become comfortable 
with the lan-guage as a tool. The concept of spiral learning--introduce a concept in one course and review 
it in subsequent courses--is an important part of our program. As indicated above, a second major objective 
of the course is to expose the student to some of the important problems in and applications of computer 
science. In most cases a discussion of why the problem is important is presented along with one or more 
simplified solutions. The stu- dent's programming assignments frequently revolve around these solutions 
and, thus, we are able to blend the understanding of language features with the simplified solution to 
major computing prob- lems. The following is a brief outline of this semester's material. Except for 
the first sec-tion, the review, each section has two major parts. The first part indicates application 
areas that can be used to introduce the area and facilitate the discussion. These examples both illustrate 
an area of computer science and pro- vide a background for utilizing the language features discussed 
in the second part of each section. I. Review (2 weeks) A. Documentation and programming style B. Use 
of procedures C. Testing and debugging D. Internal data representation E. Stream I/0 II. String Processing 
(2 weeks) A. Typical applications I. Stacks and Polish strings 2. Compilers and interpreters 3. Machine 
simulation  B. Language features--Concatenation, LENGTH, SUBSTR, INDEX, TRANSLATE, VERIFY III. Data 
Processing (3 weeks) A. Typical applications I. File merging 2. File maintenance 3. Edit and verification 
of data 4. Report generation 5. Information storage and retrieval  B. Language features I. Memory 
devices--sequential access, blocks and records 2. Structures 3. Editing capabilities 4. Record I/0 
 IV. List processing (3 weeks) A. Typical applications I. Stacks and trees 2. Cross reference tables 
 3. Sorts  B. Language features I. Facilities for developing linked lists (arrays vs. pointers) 2. Techniques 
to manipulate linked lists 3. Dynamic storage allocation 4. Recursion  V. Numerical processing (2 
weeks)  A. Typical applications I. Root finding 2. Gauss elimination B. Language features I. Effects 
of finite word length 2. Floating point round-off error 3. Array operations 4. Built-in functions 
 Several points should be mentioned. First, all applications are not discussed in detail by each instructor. 
The important point is that the student should be familiar with several appli-cations or problems from 
each of the four major areas--string processing, data processing, list processing, and numeric processing. 
The student should also have a major programming assignment from each of these areas. This assignment 
should require the majority of language features dis-cussed in that section. (See appendix for some sample 
problems.) 50 The second point concerns the language used in the course. Before developing this sequence, 
our students had been introduced to several lan-guages during their initial year. Because of the slight 
differences in syntax for the same concepts, the students found the transition from one lan- guage to 
another confusing. This confusion decreased the number of concepts that could be presented. The faculty, 
thus, decided to use a single language throughout the first year. We needed a language that would provide 
the variety of features discussed in the outline. We also wanted a language with good input/output facili-ties 
and one that would interface well with the operating system (this requirement was primarily based on 
future coursework). The language cur-rently being used is PL/I. Differences between this sequence and 
other introducto{y sequences. As might be surmised, the major difference between this introductory sequence 
and other sequences described in the literature is the emphasis on major computing problems and applica- 
tions. While most of the published descriptions cover several of the areas, they normally do not provide 
the variety presented in this sequence. Their emphasis is also on the language features as opposed to 
the applications. ~see ACM 77, Epley 78, and Kerr 78]. One course described in the literature is based 
on a philosophy which is different from that used for our course [Flon 78, Hilfinger 78]. The philosophy 
for this course is "the conviction that programming should be an engineering disci- pline, and that engineering 
disciplines must be grounded in engineering science." A review of these articles will indicate that their 
second course presents some of the underlying science involved in programming. This approach is quite 
different from that previously described. Our current approach is to establish why the facili- ties are 
available in the language and how to use them. An understanding of the underlying concepts and how they 
are implemented is delayed until later courses. The major reason for this delay is to allow the students 
an opportunity to become acquainted with the programming language as a tool to be used in implementing 
their algorithms. The beginning student should be primarily concerned with the use of the language as 
an instrument to try out the algorithms they have developed. An understanding of the "science" associated 
with the language will be taught in other courses. Current Considerations. The course as described has 
been taught for several years. Our experience indicates that the students are well prepared for their 
future courses. The major problem with the course is the lack of a suitable text. The course is now being 
taught based on lecture notes prepared by the faculty. Several changes are being considered. The first 
is a change in language from PL/I to PASCAL. This decision will probably be made within the next year. 
Another possible change would involve the incorporation of more software engineering concepts into the 
sequence. This would include more information on program verification and test- ing, team development, 
and maintenance. Some of this material can be accommodated by moving a major portion of the string processing 
to the first semester course and eliminating several sec-tions from the first semester. Conclusion. The 
above described introductory sequence accommodates students who have no prior computing experience, it 
provides them with a solid founda-tion for their future courses and, at the same time, it exposes them 
to several broad areas of computer science. When the student finishes this sequence, he/she is in a better 
position to decide whether computer science is a possible career path. References: [ACM 77] "Curriculum 
Recommendations for the Undergraduate Program in Computer Science", SIGCSE Bulletin 9, 2 (June 1977). 
[Epley 78] Donald Epley and Ted Sjoerdsma. "A Two-Semester Course Sequence in Introductory Programming 
using PL/I," SIGCSE Bulletin, I0, 3 (August 1978). [Flon 78] Lawrence Flon, Paul V. Hilfinger, Mary Shaw 
and Wm. A. Wulf. "A Fundamental Computer Science Course that Unifies Theory and Prac- tice." SIGCSE Bulletin, 
I0, 1 (February 1978). [Hilfinger 78] Paul Hilfinger, Mary Shaw, Wm. A. Wulf. "Introducing 'Theory' in 
the Second Programming Course". SIGCSE Bulletin, I0, 3 (August 1978). [Kerr 78] Douglas Kerr. "Programming 
and Algor- ithms II: A Second Course in Computer Science." SIGCSE Bulletin, I0, 3, (August 1978). 5]- 
Appendix The input will be stored in the data set: The following problems are illustrations of the type 
of exercises the students are given in the course. A. Inverted Files Write a program to create an inverted 
file from a set of document titles. An inverted file (similar to an index) is a list of all of the unique 
words which appear in all of the titles. With each word is a list of document#-position# pairs. The document# 
identifies the document in which the word appears and the position# tells where in the title the word 
appears. (That is, whether the word is the first word in the title, the second, etc.) If a word appears 
in more than one title, then its list will contain more than one document#-position# pair. The input 
deck will consist of one card for each document. Each card will contain a document identification number 
(a number between 1 and 999) followed by the title, with at least one blank separating the ID number 
and the title. All the data on the card will be enclosed in single quote marks. The output should consist 
of a listing of the input followed by the words and their lists of document#-position# pairs. Example: 
INPUT: DOCUMENT# TITLE 216 INTRODUCTIONTO PROGRAMMING 12 SYSTEMATICPROGRAMMING AN INTRODUCTION 900 AN 
INTRODUCTION TO ABSTRACT ALGEBRA OUTPUT: WORD DOCUMENT#-POSITION# PAIRS INTRODUCTION 216-I, 12-4, 900-2 
TO 216-2, 900-3 PROGRAMMING 216-3, 12-2 SYSTEMATIC 12-I AN 12-3, 900-I ABSTRACT 900-4 ALGEBRA 900-5 
The output shows, for example, that the word PROGRAMMING appears as the third word of document #216 and 
the second word of document #12. To simplify the problem, you may make the following assumptions: I. 
The input titles contain no punctuation marks. 2. There will be no more than 50 unique words in all of 
the titles, 3. No word will appear more than I0 times in all of the titles. 4. The words do not have 
to be kept in alphabetical order. 5. No word will contain more than 12 characters.  NCS.CSC.FIO24.POWELL.INVERT. 
B. Master File Update. Part I. You are to write two PL/I programs. The first program will use two input 
files, a master file and a transaction file, to produce a new master file. This new master file will 
then be used in the second program to produce a report. The format of the records in the master file 
is: column content format I-5 account number PIC'99999' 6-25 name CHAR(20) 26-35 balance PIC'S9999999V99' 
36-80 address Each block in the master file contains I0 records. The master file is in ascending order 
by account number. The last record in this file is a dummy whose account number is 99999. The format 
of the records in the transaction file is: column content format I-5 account number PIC'99999' 6 transaction 
code PIC'9' 1 indicates deposit 2 indicates withdraw 7-15 amount of deposit PIC'9999999V99' or withdraw 
16-35 new name CHAR(20) if not blank, use this to replace the old name 36-80 FILLER (blanks) Each block 
in the transaction file has 15 records. Records in this file are sorted so that the account numbers form 
a non-decreasing sequence. The transaction file contains trans-actions for new accounts. The first program 
will read records from the master file (file I) and the transaction file (file 2) and will write master 
records into the new master file (file 3). The second program will print a report on the basis of the 
new master file. The report format is ACCOUNT NUMBER NAME BALANCE REMARKS 9 ..... 9 A .... A $*,***,***.99 
print NEGATIVE BALANCE if the balance is negative 52 Part II. Restrictions: Use based and pointer variables 
to implement the linked lists. The basic problem is as described in part I. As indicated, you are to 
assume two input files, a master file, and a transaction file. The master file is in ascending order 
by account number and is catalogued under the name: NCS.CSC.FIO24.POWELL.MASTER The transaction file, 
however, is now in random order and must be sorted. This file is stored in: NCS.CSC.FIO24.POWELL.TRANS 
Additional requirements: I. The system sort should be used 2. Record I/O is required C. Dorm scheduling 
routine. You are to design and implement a simple dorm scheduling system. The following assumptions should 
be made: I. There are two dorms each holding ten students, one dorm is for males, the other for females. 
 2. The dorm lists should be maintained in alphabetical order, by last name.  3. A waiting list should 
be maintained for all students who have requested a dorm but placement has not been made.  4. Students 
may request to be removed from consideration. In this case, their name should be removed from the system. 
 5. Student should be assigned dorm space on a first in basis.  6. A list of all students in the dorm 
should be maintained. This list should be in alphabetic order by last name.  In order to try out your 
system, the following input card formats are defined: A. Insert student cols. l-lO : Student ID II : 
The letter "I" 12 : Sex 13-33 : Last name B. Delete student cols. l-lO : Student ID II : The letter 
"D" 13-33 : Last name C. Print Out: (Print both dorm lists, the waiting list) col. II : The letter 
"P" D. Print Out2 (Print alphabetic list of all students in dorm) col. II : The letter "A" A mixture 
of these cards will be the input stream for your program. After your program is debugged, run it against~e 
following data set: NCS.CSC.FlO24.POWELL.DORM 53
			
