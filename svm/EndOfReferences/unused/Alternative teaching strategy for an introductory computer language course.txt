
 ALTERNATIVE TEACHING STRATEGY FOR AN INTRODUCTORY COMPUTER LANGUAGE COURSE Asad Khailany D.Sc. Department 
of Operations Research and Information Systems Business School Eastern Michigan University ABSTRACT 
Many consider that the best strategy to teach an introductory computer language course is to start programming 
very early in the semester. This paper discusses the drawbacks of such a strategy and presents an alternative 
way to teach such a course. Based on experiments the alternative strategy appears to be more effective. 
The advantages and outline of the alternative strategy are discussed. Furthermore, the course outline 
to teach a FORTRAN language based on the alternative strategy is presented. Introduction: In many colleges 
and universities the main goal of an introductory computer language course is to teach a specific computer 
language. This course may be offered by the computer science, information systems, mathematics or any 
other department. The prerequisites for such a course is some knowledge of or a course in algebra, or 
it may be none. Any student who wants to learn the specific language which is taught can take such a 
course including the graduate students. FORTRAN or BASlC and in a few cases PL/I or COBOL are taught 
in such a course. In some places this course covers two languages such as BASIC and FORTRAN. The course's 
credit hours vary from one to three. Because of the nature of the communication with computer systems 
and the academic back- ground of such students, the instructor soon realizes that in addition to the 
language materials, some information about computers and computing systems should be offered. Let us 
call such topics secondary topics. Their discussion may cover, briefly, subjects such as different hardware 
and software components, algorithms, program and system flowcharting, system design and debugging, documentation, 
duties and qualifications of data processing professionals, computers and computing indus-tries, etc.. 
Then the question rests on how much and when such information should be offered. The answer to this lies 
in the follow-ing pages. Early Programming Strategy: It is almost an unquestioned theory that the best 
strategy to teach such an introductory language course is to force the students to start programming 
in the earliest part of the semester. This time period varies from between one to six one hour lectures. 
As a matter of fact, in many schools, one reason for praising languages such as PL/I, BASIC and FORTRAN 
...etc., and avoiding a language such as COBOL as an introductory com-puter language course is that the 
students can program sooner in PL/I, BASIC, and FORTRAN than in a language such as COBOL. The early programming 
strategy can be summarized as follows: The student starts programming very early in the semester. The 
algorithms and language materials are emphasized and covered in detail. Very little information about 
secondary topics are covered. In many cases no more than the discussion of the functions of the card 
reader, the line printer and the concept of program flowcharting are introduced. The outline of the very 
first few lectures may be: a. The first lecture covers computers in general and the activities of input, 
processing and output. If there is time left, a journey to the computer center or slides or a film strip 
about the computer center is presented. b. Then the minimum required information to make the students 
able to start programming is offered. Perhaps this is done by giving the students an already written 
program and asking them to keypunch and run the program. C. After that, some language elements such 
as how to create variable names, and simple input and output state-ments are presented. d. That is followed 
by the discussion of simple assignment statements and flowcharting concepts. At this point, it is thought 
the time to start programming and they are on the road.  In the eleven out of fourteen terms which I 
taught an introductory computer language course in computer science within the Arts and Science College 
and Information Systems department within the Business School, I followed a strategy similar to the one 
which has been outlined above. There were many reasons why such a strategy was followed for those eleven 
terms. 93 I. I believed that many of the secondary techniques. topics belonged to a data processing course; 
therefore there was no need to spend time on such topics. 2. If the students program sooner they will 
be more excited and enthusiastic about the language and will learn it better. 3. This strategy gives 
an opportunity to cover many language elements in depth. 4. I~ the students learn the language well, 
they will be able to pick up and learn the secondary topics on their own.  However, reexamining the 
goals of such a course and the impact of the Early Programming Strategy on the students, many reasons 
(outlined below) were discovered which made me shift to a different strategy. In the last three terms 
I have followed an alternative strategy to cover such a course. It appears that this new strategy is 
more effective than the Early Programming Strategy. The reasons which led me to shift the strategy were: 
I. This course may be a terminal course for many students in the computer field. They may never get a 
chance to get a reasonable knowledge about the secondary topics although they may continue pro-gramming 
in the future. 2. I estimated that between 25 to 35% of the class were frustrated at the begin- ning 
of the semester because they did not have sufficient information about the secondary topics. The normal 
withdrawal rate was between II and 27% of the initial enrollment. Of these, more than 50% withdrew because 
they were confused and discouraged at the beginning of the semester. 3. Since they had to start programming 
very early and the secondary topics were not yet covered, they had to get some of the essential knowledge 
about the secondary topics from sources other than the classroom. They usually asked the student consultants 
and other people in the computer center work area. Many times they received wrong answers and they picked 
up many bad programming habits that may stay with them for a long time. 4. Most of the students do not 
have any idea about the qualifications, functions, or the job market for computer pro-fessionals. Therefore, 
they may not seriously consider majoring in an area related to computers. Thus the students may bypass 
a chance for a better employment opportunity, and the computer industry loses some potential pro-fessionals 
in the field. 5. I noticed that the majority of the students who had a course with such a strategy can 
be characterized as follows: a. They know programming well, provided that it does not involve disk, 
tape or other mass storage devices. b. They have a good knowledge about algorithms and problem solving 
  c. Many of them have none and very few have even a little information about the concept of records 
and files. Indeed, most of them know nothing about file organization and large integrated systems. d. 
Either they have none or very little information about the CPU and differ- ent input/output and storage 
devices and their organization. e. They can design an efficient single program but they are unable to 
design a system with several interacting programs. Many of them do not know system flowcharting. f. 
Their programs lack even an adequate programming style and they are deficient in terms of documentation. 
Because of poor documentation many of their programs soon become obsolete and many of them cannot follow 
their own programs after awhile.  After thorough examination of the above reasons, I was convinced that 
before programming, it is essential to cover many of these secondary topics in the early part of the 
semester. There-fore, in the last three terms I have followed the following alternative strategy: Alternative 
Strategy: I. At the beginning of the semester, take approximately I/3 of the time of the semester to 
cover topics such as: Inter-nal data representation; Functions of computer system components; the usage 
and role of computers; some unit record equipment; storage devices, Input/Output devices; central processing 
units; Problem solving procedures; Algorithms, program flowcharting, system flowcharting and design. 
2. After that, teach the computer language and programming. This takes half or slightly more than half 
of the time of the semester. Besides the elements of the language, topics such as program style, program 
and system documentation should be well covered. 3. For the remaining time (which will be approximately 
I/6 of the semester) present topics such as the computer Hardware and Software market, Computer packages; 
the business environment of data processing professionals; the duties and qualifications of programmers, 
programmer analysts, systems analysts, project leader, and data processing manager.  Advantages of the 
Alternative Strategy: I. Students were more relaxed and confident of themselves and the withdrawal rate 
dropped below the previous rate. 2. Once we reached the point of covering the language I was able to 
cover it at a faster rate and the students were able to comprehend and digest the materials in 94 more 
depth and in a relaxed environment. 3. The quality of students' programs in terms of style and documentation 
was improved. 4. The concepts of records, files and systems are discussed and students comprehended 
them well. 5. Students run less often to seek the help of consultants and developed faith in themselves 
and tried to debug most of the programs by themselves. 6. Students' grades scored in the exami- nations 
became better than before. 7. Topics such as disk, tape and CPU are no longer like the black box and 
unknown phrases to them. 8. As a result of this course, I felt many thought seriously of majoring in 
computer science or in a field related to computers or decided to take at least one other course in the 
computer field. 9. For those who took this course as a terminal course in the computer field, they gained 
some knowledge about com-puting besides the language, which may improve their employment prospects in 
the future.  Course Outline. My last three-term experiment is with a three credit hour core course which 
teaches the FORTRAN language in the department of Operations Research and Information Systems within 
the Business School. This course is required £or all business students and computer majors within our 
department. However, students from other departments, such as Biology, Political Science, and Industrial 
Science are also taking the course as an elective. Below is the course outline in the order of presentation 
and required time. Part I. I. Introduction (I to 1.5 hours) Internal data representation; EBCDIC, ASCII, 
BCD card punch format; Functions of computers system components; the capabilities, usage and roles of 
computers. 2. Unit record equipment (I hour) Keypunching machines, verifier, collator, sorter, reproducer 
and interpreter. 3. Input-Output and storage devices (3 to 4 hours) Card reader, paper tape reader; 
optical char-acter reader, Console typewriter, terminal units, Line printer, on-line paper tape, plotter; 
Sequential Access Storage devices, Magnetic tape, tape drive, Direct Access Storage devices, Disk drive, 
Disk pack, Disk storage, Drum, Magnetic Strip Storages. 4. Central Processing Unit (I to 1.5 hours) 
Main memory; Arithmetic and Logical section, Control section; Organization of Computing Systems. 5. 
Problem Solving Tools (4 to 5 hours) Problem identification, Algorithms, Program flowcharting; System 
flowcharting; System design.  Part II. FORTRAN. 6. Introduction to FORTRAN (2 to 3 hours) Character 
Set; variable, constant, different parts of the FORTRAN statements, Coding FORTRAN program, predefined, 
IMPLICIT and EXPLICIT declaration.  7. Input/Output and FORMAT statements (4 to 5 hours ) READ, WRITE, 
I, F, L, A, G, X, T, E, D, H and single quotes formats; Logical Unit numbers, Carriage control, Comments, 
documentation. Writing the first complete program with column headings. 8. Arithmetic assignment and 
some control statements (1.5 hours) Arithmetic statements, GO TO, STOP and END statement; built-in functions. 
 9. Logical IF, Arrays and some specification statements (2 hours) Logical expression, Logical IF; Compui:ed 
and Assign GO TO statements; declaring dimension and manipulating subscripted variables.  I0. Arithmetic 
IF and DO loop statements (2 hours) II. More about Input/Output (I hour) Implied DO in READ and WRITE 
12. Subprograms and more specification statements (3 to 4 hours) Statement function, FUNCTION Subprogram; 
Subroutine Subprograms; COMMON, EXTERNAL and EQUIVALENCE Statements. 13. Using FORTRAN to Create Sequential 
and Random Files (4 hours) 14. System design and cases (5 hours) A Simulation program; One of the following 
Integrated systems: Inventory, Finance, l, ccounting, Statistical, Management, Marketing. 15. Software 
(;cmponents (I to 2 hours) Different computer languages; Oper,~ting systems, Computer packages. 16. 
Computer Industries and Computer Markets (2 hours) 17. Data processing professionals add the Business 
Environment (2 to 3 hours) Programmer, Programmer analyst, Systems analyst, Project leader, Data Processing 
Manager.  95
			
