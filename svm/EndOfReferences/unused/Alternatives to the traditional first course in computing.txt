
 ALTERNATIVES TO THE TRADITIONAL FIRST COURSE IN COMPUTING John G. Meinke John A. Beidler Department 
of Math/Computer Science University of Scranton Scranton, PA 18510 KEYWORDS: algorithm development, 
structured programming, top-down design, stepwise refinement ABSTRACT The first course in Computer 
Science at the University of Scranton has evolved over a number of years as a course in problem solving 
utilizing the computer. Bearing in mind that such a course should provide relatively standard programming 
tools, the course uses a structured derivative of FORTRAN promoting top-down stepwise refinement in programming 
methodology as well as encourages the utilization of "packaged programs". We now have a course that provides 
a solid foundation for computer science majors as well as offers an excellent introduction to computing 
to those students for whom the course has a service purpose. This has been accomplished with a minimal 
faculty at a small university. BACKGROUND The University of Scranton is a small, private (Jesuit) university 
located in Northeastern Pennsylvania. The Computer Science program is part of the College of Arts and 
Sciences with over 200 Computer Science majors constituting 11% of the college's full time enrollment. 
Six Computer Science faculty members maintain the 18 courses that serve as major courses as Well as service 
courses to both the College of Arts and Sciences and the School of Management. Small class sizes (25-30 
students per class) have given us extensive experience with the first course in Computer Science. The 
first course in Computer Science is offered under two different course titles: Introduction to Computing 
for Science and Permission to copy without fee all or part of this material is granted provided that 
the copies are not made or distributed for direct co~ereial advantage, the ACM copyright notice and 
the title of the publication and its date appear, and notice is given that copying is by permission 
of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or 
 specific permission. &#38;#169; 1981 ACM 0-89791-036-2/81/0200/0057 $00.75 Mathematics Majors and 
Introduction to Computing for Business Majors. Botl] courses are technically the same, but one offers 
more science and mathematics oriented programming assignments while the other utilizes more business 
oriented programming assignments. Neither course can be diluted as a service course since both provid~ 
us witu Cot~ipu ter ,5c i ctlce majors, the fi~'st as t~Lc mJ,~datory introductory course in the Computer 
Science degree program and the second as a course prompting numerous changes of major to Computer Science. 
Both courses provide a solid foundation in problem solving utilizing the computer. PRINCIPLES OF PROGRAMMING 
The emphasis of the first course in Computer Science at the University of Scranton is algorithm development. 
We are firm advocates of top-down structured programming utilizing stepwise refinement. We emphasize 
solution design and avoid traditional flow charts. The student is strongly encouraged to utilize plain 
old English as pseudocode in first stating his problem, then breaking it down into subproblems, and further 
refining each of those subproblems repetitively until a pseudocode solution that is easily (if not trivially) 
implemented in a programming language is obtained. Our choice for a programming language in the first 
course is PLUS (Programming Language of the University of Scranton), a derivative of FORTRAN utilizing 
control structures that emphasize the principles of structured programmSng. (A basic description of PLUS 
appears in the Appendix.) There are two reasons for using PLUS. The first is that we f@el it is imperative 
that students learn a relatively common programming language. The transition from PLUS to FORTRAN is 
straightforward. Furthermore, since PLUS is implemented as a preprocessor with sbudent programs being 
translated into FORTRAN and then processed by the FORTRAN compile[, students can be exposed to the FORTRAN 
version of their programs about half way through the semester. The second reason for utilizing PLUS 
in 57 the first course is of a political nature. PLUS %J~ls introduced in our Computer Science program 
several years ago in a sophomore level course due to its rich data structures features and its ability 
to handle dynamic storage allocation (Beidler and Meinke, 197~, A Software 'fool for T~aching Data Structures.) 
It subsequently became ti,e language utilized in our second course in Computer Science with much success. 
We felt that structured programming features in the language taught in tt, e first course would greatly 
enhance that course. However due to the extensive service nature of the first course there was a great 
d~al of opposition in other departments at the University to our changing the language taught in the 
first course. Utilizing the fact that PLUS is a derivativ~ of FORTRAN we were able to accomplish the 
transition from FORTRAN to a structured language. (We would still be using FORTRAN.) Students are required 
to write between ten and twelve programs in the introductory course. To accomplisi, the transition from 
PLUS to FORTRAN students are required to obtain the FORTRAN version of each of their PLUS programs beginning 
about half way through tl]e course. They are then required to compare their PLUS code with the generated 
FORTRAN code. We have found that when they are required to write straight FORTRAN code (as is the case 
for those students who obtain part time employment with the university computing center) the code produced 
is much better according to measur eme,~ts proposed by Fi tzsimmons and Love (1978) than is the code 
produced by students without the PLUS exposure. A major component of the first course is an introduction 
to "canned software packages". Non-Computer Science majors for whom an introduction to computing is terminal 
must be offered the hope that they need not sit down and write a program whenever they wish to utilize 
the computer. They must feel that they are able to write their own programs comfortably but they must 
be aware of the volume of off-th~-shel f software capable of satisfying their needs painlessly. This 
can easily be accomplished by introducing them to some of the statistical packages available to them. 
 During the course one of the programs the students are required to write utilizes SPSS (Statistical 
Package for the Social Sciences.) While this does not directly involve "programming", it does require 
an ability to interpret a manual, setting up of data files, and specification of data fo rmats. The 
need to be aware of "canned packages" is certainly not restricted to non-Computer Science majors. We 
have been made painfully aware of this through our required Senior Projects course. We were amazed at 
the number of students who received approval to write statistical packages for faculty members in other 
departments to satisy their senior project requirement in Computer Science when software needed to accomplish 
this project was already available on the computer system. Consequently, an introduction to "canned software 
packages" has become an important component in our first course in Computer Science. FOLLOWUP Our second 
course is a spiral approach to the study of Computer Science covering such topics as number systems and 
representations, computer arcaitecture, introduction to assembly level programming using MIXAL, data 
structures, analysis of algorithms, operating systems, Keyed files and compilers. As such, tills course 
cannot "teach" a programming language per se. However, all programming assignments must be solved utilizing 
PASCAL. With the foundation on algorithm development and problem solving using PLUS built in the first 
course, students are able to solve substantial programming problems utilizing PASCAL with a two week 
introduction to the new language. We feel this is significant. RESUL t'S We have found that our first 
(one semester) course in Computer Science gives students a solid foundation in algorithm development 
and problem solving with the computer. The choice of tile programming language PLUS helps to build that 
foundation as well as serves to avoid political problems within the University community. The introduction 
to available software packages helps majors and non-majors alike. The success of our first course has 
presented us with a significaJ]t problem in that there is a constant and overw~elming increase in the 
number of students desiring to chang e to a Computer Science major. With this dramatic increase we are 
finding that the number of Computer Science faculty is not sufficient to adequately handle the growth 
of our program. This is a positive indication of the valuable experience students are encountering in 
our first course in Computer Science. BIBLIOGRAPHY Austing, R. and Engel, G. 1973. A Computer Science 
Course Program for Small Colleges. Communications of the ACM, 16" 139-147. Beidler, J. and Meinke, J. 
1979. Effects of Structured Programming in an Introductory Service Course. Proceedings of the AEDS Workshop 
on College Curriculum in Computer Sclence, Data Processing and ~fo--{~on Systems, Orlando, Florida, 1-2 
 February 1979. 58  Beidler, J. and Meinke, J. 1978. A Software 'fool for Teaching Data Structures. 
SIGCSE Bulletin, 10, 3 (Proceedings of the ACM SIGCSE Ninth Technical Symposium on Computer Science Education, 
Pittsburgh,, Pennsylvania, 14-15 August 1978): 120-125. Beidler, J. and Meinke, J. 1977. PLUS -An Approach 
to Structured Programming with Program Analysis and Documentation  Proceedings of the Computer Science 
and Englneering Curricula Workshop, Williamsburg, Virginia, 6-7 June 1977: 83-87. Curriculum 68 -Recommendations 
for Academic programs in Computer Scfence. 1968. A Report of the ACM Curriculum Committee on Computer 
Science. Communications of the ACM, ii: 151-197. Fitzsimmons, A. and Love, T. 1978 A Review and Evaluation 
of Software Science. Computing Surveys, 10, i: 3-18. Friedman, F. and Koffman, E. 1976. Some Pedagogic 
Considerations in Teaching Elementary Programming Using Structured FORTRAN. Joint Bulletin -SIGCSE Bulletin, 
8, 1 / SIGCUE Topics, 2 (Proceedings of the ACM SiGCSE -SIGCUE Joint Symposium - Computer Science and 
Education, Anaheim, California, 12-13 February 1976): i-i~. Meinke, J. and Beidler, J. 1979. A Software 
Emphasis in the Second Course in Computer Science SIGCSE Bulletin, ii, 1 (Proceedings ~ the ACM Tenth 
SIGCSE Technical Sympo--~ium on Computer Science Education, Dayton, oh-fo, 22-23 February 1979): 192-194. 
 Meinke, J. and Beidler, J. 1978. Experience with a Software Oriented Computer Science Curriculum at 
a Smaller Institution. Fifth Joint College Curricula Workshop in Computer Science, Engineering, and Data 
Processing, Orlando, Florida, 2-3 February 1978: 107-112. MeinKe, J. and Beidler, O. 1977. The Second 
Course in Computer Science. Proceedings of the Computer Science and Englneerlng Curricula Workshop, Williamsburg, 
Virginia, 6-7 June 1977: 88-92. APPENDIX A SYLLABUS FOR SECOND COURSE i. Structured Programming and 
PASCAL 2. Number Systems and Representations, and Computer Arithmetic A. Conversions between bases 
 B. Representations within the computer i. Integer 2. Floating Point 3. Character C. Computer Arithmetic 
 i. n's complement 2. n-l's complement  3. sign-magnitude  D. Errors i. Roundoff 2. Truncation 
 3. Representation  3. Basic Computer Architecture A. Processor/Memory/Switch Level B. Register 
Structure of CPU C. Instruction Cycle D. Introduction to assembly language - MIXAL 4. Random Number 
Generation and Simulation Principles  5. Data Structures and Sorting and Searching Techniques  A. Arrays, 
tables, and linear lists B. Stacks, queues, and deques C. Linked Lists i. Singly 2. Doubly  3. Circularly 
 4. Trees  D. Data management and transmission E. Keyed files  6. Elementary operating systems and 
Compilation tecnniques  A. Multiprogramming B. Buf[ering C. Infix and Polish prefix/suffix  D. Problems 
involved in code generation APPENDIX B PLUS PLUS is a preprocessor which takes FORTRAN-liKe input 
and translates it into standard FORTRAN. A programmer using PLUS uses all valid FORTRAN statements except 
the IF, GOTO (computed and non-computed) and DO statements. These statements are replaced by other statements 
which introduce block structure into your programs and provide loop and conditional control statements 
which follow tile trend of structured programming. The conditional or alternate control structure is 
provided by the IF, ELSEIF, and ELSE statements. The most basic form of an IF block is IF [sn] (condition) 
 [sn] ENDIF  59 where the brackets indicate that the statement number is unnecessary but if you feel 
more comfortable using it, then do so. An IF structure can contain several blocks of code. The order 
of a general IF block is IF [sn] (condition i) block 1 ELSEIF (condition 2) block 2 ELSEIF (condition 
3) block 3  ELSE block n [sn] ENDIF where exactly one of the blocks executes. Tlle block corresponding 
to the first true condition executes. An IF structure can contain as many ELSEIFs as you need. Naturally, 
an IF structure can contain at most one ELSE block and this block executes only when all the conditions 
on the IF and ELSEIF statements are false. Loop control is provided by DO and REPEAT blocks. The difference 
between DO and REPEAT blocks is that thecondition in a DO block is tested before the block executes while 
the condition in a REPEAT block is tested after the block executes. Other then that their forms are similar. 
 There are four forms of the DO statement. The first of these is similar to the FORTRAN DO statement 
except that the condition is tested before the .loop executes. The actions occurring with each form should 
be obvious. Form i: DO [sn] var=init,term,incr [sn] ENDDO Observe that none of the usual FORTRAN restrictions 
hold for "var", "'init", "term", and "incr". The index variable can be any valid FORTRAN variable. The 
others can be any expressions and "incr" can be positive or negative. If the increment is negative then 
the loop executes if the index variable is greater than or equal to "term". Form 2: DO [sn] WHILE (condition) 
 Form 3: DO [sn] UNTIL (condition) [sn] ENDDO  Form 4: (one you nave used often) DO [sn] FOREVER [sn] 
ENDDO  All ~orms of the DO structures can also be written with the word REPEAT . ENDDO or ENDLOOP can 
used to end both DO and REPEAT loops. For those who are not structured programming purists, two controlled 
GOTO statements are provided. These statements can only be used in conjunction with loop statements, 
DO and REPEAT. These statements are NEXT sn and EXIT sn  where "NEXT sn" transfers to the top of the 
loop corresponding to statement number "sn. The "EXIT sn" transfers control to the statement immediately 
following the ENDDO or ENDLOOP with statement number sn. Several complementary switches have been added 
to PLUS. These switches are set and reset by comment cards With the form C$ $ where the underscore can 
be replaced by--a single letter of the alphabet. The letters and their corresponding meanings are L 
-turn listing on and off F -turn FORTRAN code generations on and off X -create a cross reference listing 
of your program S - Insert code to produce a statistical evaluation of your program during execution. 
When a C$ $ is used, you must load 'PLUS-STAT --in the LIBRARY account along with your program. PLUS-STAT 
contains the module which helps keep the statistics. R -This works in conjunction with the statistics 
mode. It allows you to specify the point(s) in your program where you wish to see the statistics listed 
and reset. [sn] ENDDO 60¸  
			
