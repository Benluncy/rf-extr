
 A Parallel Processor Architecture for Graphics Arithmetic Operations John G. Torborg Raster Technologies, 
Inc. Two Robbins Road Westford, Mass. 01886 ABSTRACT Interactive 3D graphics applications require significant 
arithmetic processing to handle complex models, par-ticularly if realistic rendering techniques are used. 
Current semiconductor technology cannot provide the necessary performance without some form of multi-processing. 
This paper describes a graphics processor architecture which can be configured with an arbitrary number 
of identical processors operating in parallel. Each of the parallel processors can be programmed identically 
as if it were a single processor system, substantially simpli- fying software development and allowing 
complex ren- dering functions to take advantage of the multiple proc- essors. The architecture described 
is able to achieve extremely high performance while allowing the price/performance of the system to be 
optimized for a given application. Techniques are described for handling graphics com-mand distribution, 
sequencing of commands which must be processed in order, parallel processing of graphics primitive picking, 
and handling inquiry (read- back) commands. CR Categories and Subject Descriptors: B.2.1 [Arith-metic 
and Logic Structures]: Design Styles -Parallel; C.1.2 [Processor Architectures]: Multiprocessors -Par-allel 
processors; 1.3.5 [Computer Graphics]: Computa- tional Geometry and Object Modeling -Geometric al- gorithms, 
languages, and systems. Additional Key Words and Phrases: parallel process-ing, arithmetic processing, 
graphics command process- ing. Permission to copy without fee all or part of this material is granted 
provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright 
notice and the title of the publication and its date appear, and notice is given that copying is by permission 
of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or 
specific permission. &#38;#169; 1987 ACM-0-89791-22%6/87/007/0197 $0O.75 INTRODUCTION Multiprocessor 
architectures have been used for sev-eral years to meet the demanding computational re-quirements of 
interactive 3D graphics. Simple graph- ics operations such as 3D wireframe manipulation can easily be 
divided into a sequence of pipelined opera-tions. If independent processors are used to handle these 
operations, very high performance can be at-tained [Clark 1982]. However, more complex opera-tions such 
as surface tesselation and lighting calcula- tions can not easily be handled by a highly pipelined architecture 
because of the difficulty in reconfiguring the pipeline to execute a wide variety of different graphics 
operations efficiently. Although parallel processing architectures have been explored by many researchers 
for performing drawing operations [Fuchs 1981, Niimi 1984, Fuchs 1986], rela- tively little work has 
been done to take advantage of parallel processing for front end geometric and arith- metic operations. 
A graphics processor architecture is presented which employs an arbitrary number of iden- tical graphics 
arithmetic processors. This architecture is currently being implemented in a high performance graphics 
system which can be configured with one to eight processors. The graphics system has been designed to 
run an ex-tended version of the ANSI proposed Programmer's Hi- erarchical Interactive Graphics Standard 
called PHIGS+. PHIGS+ has been jointly developed by sev-eral industrial and university contributors to 
provide a standard for high performance 3D graphics systems. Extensions to the ANSI proposed PH/GS are 
provided for shading and hidden surface removal, lighting mod- els, arbitrary clipping planes, 3D curves 
and surfaces, depth cueing, segment extents, and several other exten- sions. Many of these capabilities 
have been available on a smattering of high performance graphics systems although no attempt has been 
made to standardize them. [van Dam, et. al. 1987]. While some of the specifics of the graphics processor 
implementation are unique to PHIGS+, most of the concepts can be easily applied to other graphics com-mand 
sets. A parallel processing architecture for graphics must provide two basic attributes to be effective. 
First, graphics commands must be adequately distributed be- tween the processors for efficient processor 
utilization. And second, the multiple processors must produce the same apparent results as a single processor 
performing ~ SIGGRAPH '87, Anaheim, July 27-31, 1987 the same operations. In other words, as additional 
processors are added, the user should notice no differ- ences in the operation of the system other than 
an al-most linear improvement in graphics performance. ORDER INDEPENDENCE OF GRAPHICS COM- MANDS An order-independent 
series of graphics commands is defined as a list of graphics primitives (polylines, poly- gons, etc.) 
in which the order in which the primitives are drawn has no effect on the display. For example, consider 
a series of vectors which define an arbitrary wireframe object. As long as all of these vectors are drawn 
into the frame buffer with the same pixel value (color), the order in which they are actually drawn has 
no effect on the resultant image. Analysis of a shaded surface representation of the same object indicates 
that if depth buffering is used to perform hidden surface removal, the resultant image will be determined 
by the depth priority of each pixel on each patch and is again independent of the order in which the 
primitives (patches in this case) are drawn. The order-independent nature of the most frequently encountered 
graphics primitives allows a parallel proc- essing architecture to be used very efficiently. There are, 
however, some graphics primitives and other op- erators which may be encountered in a display list which 
are not order-independent. The parallel process- ing architecture should also handle these operations 
with minimal degradation to the overall system per-formance. Sequential Commands A sequential graphics 
command is defined to be one which must be processed (written into the frame buffer if it is a drawing 
primitive) after all preceding graphics commands, and must be processed before any succeed- ing graphics 
commands. An example of a sequential command is one which changes the pixel value with which succeeding 
drawing primitives will be written. A simple approach to handling sequential commands would be towait 
until all graphics processors are idle, process the command by a single processor, then con-tinue the 
distribution of order-independent commands to the parallelprocessors. This approach dramatically reduces 
system performance if the command stream contains a significant percentage of sequential com-mands dispersed 
throughout. The inefficiencies which result from this situation can be greatly minimized by providing 
a mechanism which can reorder the sequential commands as they are drawn into the frame buffer. There 
will still be a de- gree of inefficiency due to the forced delay of the proc- essors which are processing 
other commands (to wait for the sequential command to be transferred), but this will be shown to be minimal. 
GRAPHICS SYSTEM ARCHITECTURE AND DATA FLOW The overall architecture of the graphics display system is 
split into three main sections as shown in Figure 1. The display list manager contains a dual-ported 
mem- ory system and memory management processor. Graphics commands are stored in this memory system as 
a hierarchical structure of linked blocks. The mem- ory management processor reads graphics commands 
from a particular structure (as specified by the applica- tions processor) and sends each command to 
a graph- ics arithmetic processor as shown in Figure 2. The graphics arithmetic processors handle all 
of the complex computational functions such as transforma-tions, clipping, tesselation, lighting models, 
picking, and general command processing. After processing, the graphics arithmetic processors transfer 
low-level drawing primitives (points, vectors, triangles, etc.) to the image memory units (as shown in 
Figure 2). The uniqueness of this architecture is in determining the order in which these low-level drawing 
primitives are transferred. The image memory units contain a frame buffer and video output section, as 
well as a VLSI drawing proces- sor which directly handles vectors, triangles, rectan-gles, and bitblts. 
By offloading the low-level drawing operations to the image memory units, the processing time for each 
graphics command (by the graphics arithmetic processors) is independent of the number of pixels that 
are modified, thereby increasing the uni-formity of command processing time and improving the efficiency 
of parallel processing of order dependent commands. The VLSI drawing processor has been designed to al- 
low very fast update of image memory. A master con- troller IC and four scan line processor ICs make 
up the drawing processor. The master control parses the low-level drawing command stream and performs 
setup calculations for the various operations. Each scan-line processors each control one quarter of 
the scan-lines using a four-way interleaved organization. The image memory is five-way interleaved to 
each scan-line processor allowing the entire system to ac-cess twenty pixels every memory cycle. This 
allows a peak drawing performance of over 60 million pixels per second including full intensity interpolation 
and depth buffering. The master controller IC directly controls vector and triangle operations and performs 
the necessary setup calculations. The setup calculation.~, as well as the pix- el drawing performance, 
can limit the primitive draw- ing rate. The vector setup time is 1 microsecond allow- ing 1 million short 
vectors/second to be rendered. The triat)gle setup time is 3 microseconds allowing 330,000 small triangles/second 
to be rendered (including inter- polated shading and depth buffering). Substantial floating point arithmetic 
power is necessary to fully utilize the drawing performance of this processor. COMMAND DISTRIBUTION The 
display list manager interfaces with the graphics arithmetic processors over a unidirectional 32-bit 
syn- chronous bus (called the CMD Bus). Data will be transferred to the arithmetic processors whenever 
data is available and the appropriate arithmetic processor is ready. Graphics commands are distributed 
to arithme- tic processors in one of four ways as determined by information in the first word of each 
command. | || | i , i GRAPHICS SYSTEM IMU BUS I I APPLJCACATIONS PROCESSOR AND PERIPHERALS ;4 CMD BUS 
DISPLAY LIST MANAGER ' GRAPHICS ARITHMETIC PROCESSOR 4 ,I GRAPHICS ARITHMETID PROCESSOR (OP~ONAL} f 1 
IMAGE MEMORY UNIT I I I I I L I ! I J VME BUS VIDEO OUTPUT FIGURE 1 GRAPHICS SYSTEM ARCHITECTURE GRAPHICS 
ARITHMETIC PROCESSOR DISPLAY LIST MANAGER -i -I GRAPHICS ARITHMETIC PROCESSOR GRAPHICS ARITHMETIC PROCESSOR 
IMAGE MEMORY UNIT H, oTI LEVEL GRAPHICS COMMANDS GRAPHICS ARITHMETIC PROCESSOR LEVEL DRAWING COMMANDS 
FIGURE 2 GRAPHICS COMMAND PROCESSING DATA FLOW 1) The command is not sent to any arithmetic proces- 
sor. This command type is used to insert labels and other non-graphics information into the dis-play 
list. 2) The command is sent to all arithmetic processors. This is used for commands that affect state 
on the arithmetic processors, such as the transformation matrix, the clipping planes, or the light sources. 
 3) The command is sent to the arithmetic processor which is most ready to accept the command. This is 
determined by a command arbitration mecha-nism described later. This command type is used for all graphics 
drawing primitives and all other graphics commands which only affect the image memory units. 4) The command 
is sent to a specific arithmetic proc- essor. In this case, the first word in the command specifies a 
particular processor number. This mode is currently not used but could allow special- ized processors 
to be incorporated into the archi- tecture for certain command types in the future. ~~ SIGGRAPH '87, 
Anaheim, July 27-31 1987 Command Format The first word of each command is called the com-mand header 
and is used to indicate how the command should be distributed between the parallel processors. An eight 
bit field in the header indicates the command type. The remainder of the header bits provide com-mand 
dependent information to the arithmetic proces- sors. The command type field in the header is defined 
as follows: Mode Dependence Command 3 bits 3 bits i bit 1 bit The distribution mode field is used by 
the display list manager and graphics arithmetic processors to deter-mine how the command should be distributed. 
The or-der dependence field is used by the arithmetic proces- sor in determining whether the command 
must be proc- essed sequentially. The hidden command bit and pick mode bits are used for graphics primitive 
picking and are described later. Order Dependence Classification Parallel command processing falls into 
two categories -order-independent and sequential. The order depend- ence field in the command header 
is used to determine how the command will be processed by the arithmetic processors. All commands fall 
into one of six classifi- cations as described below. 1) Non-shaded Drawing Primitive Command. This classification 
includes all drawing primitives which use preset value registers (registers on the image memory unit 
which have been loaded by a previ-ous command) to determine the pixel value in which the primitive will 
be drawn. Examples of these commands are vectors (other than depth-queued vectors), circles, arcs, and 
poly-gons. This command type is order-independent and therefore can always be processed in parallel and 
transferred to the image memory unit in any order. 2) Shaded Drawing Primitive Command. All drawing primitives 
where the value of the pixel data is computed using tight source calculations or where the value is included 
in the command (other than image transfers) fall into this category. Examples of these commands are shaded 
patches, 3D sur-faces, and depth-queued lines. This type of com- mand is order-independent if depth buffering 
is used to determine depth priority. If depth buffer- ing is not enabled, this command is sequential 
and must be transferred to the image memory unit in the same order as the command appeared in the original 
command stream. 3) Sequential Image Memory Unit Command. All commands of this type must be transferred 
from the arithmetic processor(s) to the image memory unit in the same order in which it occurred in the 
original command stream. Examples of these commands are set value register, set area pattern, and set 
vector pattern. 4) Inquire Image Memory Unit Commands. All in- quire commands are sequential commands 
to in-sure that the application will receive the inquire responses in order and to insure that the data 
is current. This command category is used for in-quire commands which read data from the image memory 
units. Inquiries to the image memory unit will occur in the same order as the command appeared in the 
original command stream. Like-wise, data transfers back to the application proces- sor must occur in 
order. Examples of these com-mands are inquire value register, inquire pixel data, and inquire look-up 
table entry. 5) Inquire Arithmetic Processor State. This classifi- cation is used for inquire commands 
which re-spond with state contained on the arithmetic proc- essors. As described above, all inquire commands 
are sequential commands requiring response data to be transferred to the application processor in order. 
Examples of this command category are in-quire transformation matrix, inquire clipping plane, and inquire 
light source. 6) Order-Independent Image Memory Unit Com-mand. This command type is used to specify a 
command which accesses the image memory unit and is order independent. This command type is not currently 
used. Command Arbitration Command arbitration is used to determine which arith- metic processor should 
receive the command if it can be processed in parallel. This arbitration mechanism attempts to fairly 
distribute commands between proces- sors and gives priority to processors which are most ready to accept 
the command. Each processor has a command input FIFO which is used to buffer commands from the display 
list man-ager. This FIFO is 512 long-words deep so that it can contain several commands simultaneously. 
The proc-essor will request commands on two priority levels based on the amount of data in its input 
FIFO. If the FIFO is empty, it will request a command using the high priority request. If the FIFO is 
not empty but is less than half full, the lower priority request will be used. No request will be made 
if the input FIFO is more than half full. This insures that the processor will not re-quest a command 
if it cannot buffer the entire com-mand in the remaining space in the FIFO (at least for the vast majority 
of commands). This prevents one processor from tying up the bus when another proces-sor may be idle. 
A fair arbitration mechanism is used to insure that all processors requesting a command on a given arbitra- 
tion level will be serviced before any other processor can request. If all commands took the same amount 
of processing time, this would result in a round-robin command distribution. However, since command proc- 
essing time is usually not evenly distributed, distribu-tion priority is given to the processors executing 
the commands which take the least amount of time to proc- ess. GRAPHICS ARITHMETIC PROCESSOR ARCHI-TECTURE 
A simplified block diagram of the graphics arithmetic processor is shown in Figure 3. This diagram shows 
the basic blocks that are necessary for graphics draw- ing operations. The programmable element of the 
graphics arithmetic processor is designated the proces- sor core. This is implemented using a horizontally 
microcoded 32 bit processor running at 12.5 Mhz pro- viding a peak performance of 12.5 MIPs and 25 MFLOPs 
(using independent multiply and ALU pipe-lines). Graphics Command Input Controller The graphics command 
input controller includes the CMD Bus interface and the command input FIFO. This controller determines 
which commands and which command headers need to be clocked into the input FIFO, based on the result 
of the command arbitration and the information in the command header. All com- mands (including headers) 
to be executed by the proc- essor core are clocked into the FIFO. In addition, com-mand headers are clocked 
into the FIFO for commands which are sequential or potentially sequential (for ex-ample, shaded drawing 
primitives are sequential if depth buffering is disabled, but are otherwise order-in- dependent). During 
pick mode (described later), all command headers are clocked into the FIFO. In addition to the data, 
two control bits are clocked into the FIFO. These two bits indicate whether the data is a header and 
whether the header is part of a command to be executed by this particular arithmetic processor. The processor 
core only executes commands which are so indicated. Graphics Command Tag FIFO As each command header 
is fetched from the com-mand input FIFO, an entry is loaded into another small tag FIFO (64 x 2). This 
FIFO is used to keep track of the ordering of all sequential commands being proc-essed by all arithmetic 
processors and all commands being processed by this processor. The two bit entry in the tag FIFO indicates 
whether the command is being processed by this arithmetic processor and whether the command is a sequential 
command. The appropriate mode bits are checked to determine if a potentially se- quential command is 
actually sequential before loading the tag FIFO. (A potentially sequential command which is determined 
to be order-independent and is not being processed by this arithmetic processor will Computer Graphics, 
Volume 21, Number 4, July 1987 This tag FIFO is the key to providing optimum per-formance for parallel 
commands and insuring sequen- tial processing of order dependent commands. The output of this FIFO is 
used to control the order in which image memory unit commands are transferred over the image memory unit 
bus (IMU Bus). Drawing Command Output Controller This controller is used to transfer data from the proces- 
sor core to the image memory units over a 32-bit mul- timaster synchronous data bus (IMU Bus). Included 
in this logic is a 512 x 36 output FIFO and the mecha-nism used to maintain proper ordering of sequential 
commands. The processor core writes image memory unit com-mands into the output FIFO as required. The 
first 32-bit word of each command is a command header which indicates the destination of the command 
as well as certain command specific information. In addition to the data word, the FIFO contains several 
control bits which indicate the first word (header) and last word of each image memory unit command. 
If the entry is the last word, control bits indicate whether the command is the last of a sequence of 
indivisible commands, and whether it is the last of a group of commands spawned by a single high-level 
graphics input command. The control information allows multiple image memory unit commands to be associated 
with a single high-level graphics input command. These commands may be divisible in which case the output 
controller will release the IMU Bus between commands (assum-ing that the graphics input command was not 
sequen-tial), or may be indivisible in which case all the image memory commands will be sent as a group 
before re-leasing the bus. The output of the tag FIFO is used to control arbitra- tion for the IMU Bus. 
If the two control bits indicate that the command is not sequential, then the output controller Will 
request the IMU Bus as soon as a com- plete _command block is available. In this case, the order in which 
commands are transferred to the image memory unit will depend on the processor load and command distribution 
of all processors. The tag FIFO output will be clocked after each command group asso- ciated with a single 
graphics input command is trans- ferred over the IMU Bus. If the tag FIFO indicates a sequential command, 
the output controller will wait until all other arithmetic processor output controllers have reached 
the same point in the original command stream. Since every processor places an entry into its tag FIFO 
for every not cause an entry to be loaded into the tag FIFO). IMU BUS   cMus .RocEsso DRAWING GRAPHIO8 
COMMAND COMMAND CORE OUTPUT INPUT CONTROLLER CONTROLLER I ,71 TAG FIFO FIGURE 3 GRAPHICS ARITHMETIC 
PROCESSOR SIMPLIFIED BLOCK DIAGRAM ~ SIGGRAPH '87, Anaheim, July 27-31, 1987 sequential command (even 
if the command is not exe- cuted on that processor), all processors' tag FIFOs will indicate a sequential 
command but only one will indi- cate that the command was processed by that proces- sor. The processor 
which has processed the sequential command will then request the bus and send the group of commands associated 
with the graphics input com-mand. Once this command transfer has completed, the tag FIFO output on all 
arithmetic processors will be clocked. Since the processor core can still continue to transfer commands 
into the output FIFO, processor perform- ance is usually not affected when the 1MU interface is held 
up to maintain sequentiality. GRAPHICS COMMAND PREFETCHER The command headers of all potentially sequential 
commands are transferred to all arithmetic processors. If a significant number of potentially sequential 
com-mands (such as 3D patches) are being processed in a large configuration (several processors), each 
proces- sor will receive many more command headers than commands. A command prefetcher is added to elimi- 
nate the overhead associated with these extra com-mand headers. This prefetcher will fetch data out of 
the FIFO before it is required by the processor core. If the data is a header which is not to be processed 
by the processor core, it is handled directly by the prefetcher. The tag FIFO is also controlled by the 
prefetcher, al-lowing the processor core to completely ignore the par- allel processing aspects of the 
architecture. SEQUENCING OF RESPONSE DATA Response data is sent to the application processor over the 
VME bus. This allows inquiry commands to be processed without interrupting the command pipeline from 
the display list manager. All response data is written back to the application processor in the same 
order as the high-level graphics commands occurred in the command stream. As with the IMU Bus, some mechanism 
must be pro- vided to insure that response data transfers are per-formed sequentially. The mechanism 
provided for the VME Bus is the same as the IMU Bus with two excep- tions. First, the response commands 
are always se-quential so no distinction is made between sequential and order-independent commands. Second, 
some commands do not always have response data to send (such as drawing primitives in pick mode) so a 
mecha- nism must be provided to allow processing to continue without requesting the VME Bus. The VME 
Bus interface incorporates a small (64 x 1) tag FIFO to keep track of sequential inquiry com-mands. This 
FIFO is clocked whenever a command header is fetched from the command input FIFO which potentially has 
response data to transfer back to the application processor. The FIFO input bit is set if the command 
will be processed by the processor core and is cleared if the command will be processed by a dif- ferent 
arithmetic processor. The output of the tag FIFO is used to control arbitra- tion for the VME Bus. If 
the FIFO is not empty, a VME response transfer is pending from some proces-sor. A mechanism is provided 
to suspend VME arbitra- tion until all processor VME bus controllers have reached the same point in the 
command stream (indi-cated by a tag FIFO not-empty condition). If the proc- essor executing the command 
has response data to send to the application processor, it can then request the VME Bus and transfer 
the data. After the proces- sor has transferred all its response data, or if no data is to be sent, all 
processor VME bus controllers will clock their tag FIFO outputs. Two enhancements are added to this basic 
mechanism to improve parallel processing performance. The VME Bus controller will assume that the processor 
core did not require the VME Bus if another command is fetched from the input FIFO. This eliminates the 
need for the processor to inform the bus controller. Further, the VME Bus controller incorporates a counter 
which keeps track of the number of potential response com-mands which did not require VME Bus access. 
This counter allows the processor core to continue process- ing potential response commands without waiting 
for the VME Bus sequential transfer mechanism to catch up. Only when the processor actually needs to 
transfer data over the VME Bus wilt it wait for the other arith- metic processors (which are performing 
response trans- fers from commands earlier in the command stream). These enhancements are particularly 
important when the system is operating in pick mode (described below) because all primitive drawing commands 
are poten-tially response commands although only a small per- centage of commands actually transfer data 
over the VME Bus. GRAPHICS PRIMITIVE PICKING Primitive picking performance is as important as dis-play 
performance in an interactive system. The arith- metic processors operate in a special mode for primi- 
tive picking operations. This pick mode is controlled by the display list manager and causes drawing 
primi- tives to be handled differently. As the display list is traversed, all geometry is transformed 
and clipped nor. really, and is also clipped to the pick aperture. The pick aperture is a small 2D window 
(or 3D cube) which surrounds the pick point (normally the pointing device position). Primitives which 
intersect the pick aperture cause a pick hit. When this occurs, the arithmetic processor will inform 
the application processor with in- formation identifying the picked primitive. All drawing primitives 
are potentially response com-mands when the system is in pick mode. This requires that all command headers 
for pickable commands be loaded into the input FIFO of all arithmetic processors. (Note that all command 
headers must be clocked in to support the primitive counting mechanism described below). Only those primitives 
which are picked will actually generate a response to the application proces- sor. Some commands, such 
as segment ID, are only needed by the arithmetic processors when in pick mode. The command header contains 
a bit, called the Pick Mode bit, which is set for commands required only during pick mode. These commands 
are not transferred to the arithmetic processors unless the system is in pick mode, thus reducing processor 
overhead when the sys- tem is not in pick mode. PRIMITIVE COUNTING MECHANISM When a pick hit is detected 
by the arithmetic processor, information is returned to the application processor identifying the location 
in the structure of the primitive. The PHIGS graphics standard includes a primitive count as part of 
this information. The primitive count specifies the number of the primitive within the struc-ture. A 
24-bit counter is provided on each arithmetic proces- sor. This counter is incremented for each command 
header as it is fetched from the command input FIFO except for those headers with the hidden bit set. 
The hidden bit allows non-PHIGS commands (such as dis-play list labels) to be inserted in the command 
stream transparently to the primitive count and the application program. Since all headers are clocked 
into the input FIFO of all arithmetic processors when the system is in pick mode, each arithmetic processor 
can maintain a count of the PHIGS primitive which is being processed. The primitive count is pushed onto 
a stack and the counter is reset when a segment reference is encoun-tered. The primitive count is restored 
when the seg-ment ends. A latch is loaded with the primitive count when a head- er is fetched from the 
input FIFO which is to be exe-cuted by the processor core. This allows the command prefetcher to continue 
prefetching headers from the in- put FIFO while the processor core is testing the primi- tive against 
the pick aperture. If the processor core determines that the primitive is a valid pick hit, it can then 
write the primitive count and appropriate tree (structure) information to the application processor. 
PERFORMANCE At the time that this paper was written, the system was in debug and was unavailable for 
system benchmark- ing. The image memory unit and VLS[ drawing proc- essor has been fabricated and the 
performance of this part of the system has been validated. Detailed simu- lation software has been developed 
to allow accurate system analysis. A wireframe and shaded patch repre- sentation of an automobile (shown 
in Figure 4 and 5) have been run through this simulator to show the per- formance of the parallel processing 
architecture. The expected performance is shown below. Wire Frame Database of Chrysler Laser courtesy 
of Chrysler Corporation Number of Vectors: 99,236 Average Vector Length: 4.8 pixels Shaded Patch Database 
of Chrysler Laser courtesy of Chrysler Corporation Number of Time to Process Processor Processors Image 
Efficiency 1 690 ms 100% 2 345 ms 100% 3 230 ms 100% 4 176 ms 98% 5 143 ms 96% 6 124 ms 93% 7 109 ms 
90% 8 104 ms 84% Number of Triangles: 64,696 Average Triangle Size: 19 pixels Number of Time to Process 
Processor Processors Image Efficiency 1 5.7 see 100% 2 2.9 sec 100% 3 1.9 sec 100% 4 1.4 see 100% 
 5 1.1 ms 100% 6 950 ms 100% 7 820 ms 100% 8 720 ms 100%  Perspective transformations were applied to 
both the wireframe and surface models. Approximately half of the triangles were culled because the normal 
vectors were facing away from the viewer. Diffuse, ambient, and specular terms were calculated at each 
vertex of the remaining triangles to determine the colors to be interpolated. The efficiency of this 
architecture when processing a large number of the same command is extremely high (until other system 
constraints are reached). This makes the system well suited for interactive manipula- tion of complex 
models. Processor efficiency degrades as the processing time for each command becomes less uniform and 
as the percentage of sequential commands increases. Our simulations have shown that this be- comes a 
factor only when the total drawing command output rate (from all graphics arithmetic processors) starts 
to exceed 50% of the drawing processor bandwidth. Below this level, the output FIFOs of the graphics 
arithmetic processors are never filled so the processor core never has to wait. On the current im-plementation, 
the maximum vector drawing perform- ance of 104 ms (for the given example) is reached with just over 
seven processors. The maximum shaded patch rendering performance of 150 ms is not reached with the maximum 
complement of processors. SUMMARY A parallel processing architecture has been presented which allows 
an arbitrary number of identical proces- sors to be applied to graphics arithmetic calculations. This 
system provides the necessary floating point com- putational power to handle sophisticated tesselation 
and lighting models, while still operating very effi-ciently and cost effectively for simple operations 
such as transformations and clipping. The processors are each programmed identically and each processor 
is programmed as if it were a uniprocessor system, thus substantially simplifying software development. 
The number of processors can be optimized for the computational requirements of the problem, allowing 
a cost effective system to be imple- mented for a wide range of applications. Also, since all processors 
are identical, systems in the field can be upgraded to higher performance by simply plugging in additional 
processor boards.   
			
