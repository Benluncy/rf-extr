
 A FACULTY DEVELOPMENT PROGRAM Keith Harrow CIS Department Brooklyn College, CUNY ABSTRACT  The Computer 
and Information Science (CIS) Department at Brooklyn College is unable to use full-time CIS faculty 
for most sections of the introductory programming course. Instead of using adjuncts, the administration 
of the College would like to use full-time faculty from over- staffed departments to teach these courses. 
In an attempt to certify these people, the CIS De- partment launched a two part Faculty Development 
 Program in the Summer of 1981. Program I was an intensive introduction to computing for those with 
no previous experience. Program II was de- signed to enable those with some previous com- putting experience 
to teach computer programing. Both programs were successful. The participants in Program I gained quite 
a bit of programming experience. Almost half of those in Progr~n II have taught in the CIS Department 
in the Fall of 1981, with others planning to do so next year. Based in part on the information gathered 
from this model, the entire City University is offer- ing a Faculty Development Program in computer 
 science as well. Background  Brooklyn College is a large liberal arts college, and at the same time 
a unit of the City University of New York (CUNY). The Computer and Information Science (CIS) Department 
has been an autonomous department for about i0 years (originally it was part of the Mathematics  Department). 
There are currently 500 or more undergraduate computer science majors, a number of students in joint 
programs with other depart- ments, and a small graduate program. The under- graduate program is particularly 
rich, with a variety of courses in programming, operating systems, compilers, file processing, micro- 
 processors, and theoretical computer science. The undergraduate major is PL/I based; in  addition, 
there are a large number of courses (in BASIC) for non-majors.  Despite these impressive course offerings, 
 there are only 16 full-time faculty members in the department. Many of the faculty have admin- istrative 
responsibilities, plus released time to work on grants and research projects. There- fore, only a little 
over a third of the sections, usually graduate courses and advanced electives, can be taught by full-time 
faculty; adjunct or part-time faculty must be used for the remaining Permission to copy without ~e 
all or part of this martial is granted provided that the copies are not made or distributed ~r direct 
comme~ial advantage, the ACM copyright notice and the title of the publication and i~ da~ appear, and 
notice is given that copying is by permission of the Association ~r Computing Machinery. To copy otherwise, 
or to republish, requi~s a ~e and/or specific permission. &#38;#169; 1982 ACM0-89791-067-2/82/002/0170 
$00.75 170 sections, especially the introductory programm- ing courses. In the past, most of the adjuncts 
were graduate students and professionals who worked as programaners or systems analysts during the day, 
then taught at night. However, the supply of graduate students who are available to teach during the 
day has decreased dramatically. At the same time, because of the recent shift in enrollments, many other 
departments in the college have found that they have more faculty than courses to teach. In the last 
few years, a few qualified faculty members from other departments have volunteered to teach computer 
science courses in their own areas of interest, e.g., a scientist teaching a course in real-time systems. 
But the number of these volunteers has always been rather small. At the same time, the CIS Depart- ment 
has been under pressure from the Brooklyn College Administration to increase our use of faculty from 
other departments. Obviously, the administration prefers that we use full-time faculty from overstaffed 
departments instead of paying for adjuncts. Rather than rely on self- appraisals of what these faculty 
knew, the CIS Department decided that it would be better if we ourselves certified that these instructors 
were qualified to teach our introductory courses. In the Summer of 1980, another CIS instructor (Pro- 
fessor Pat Sterbenz) ran a small test project with a few faculty members from some of the science departments 
(notably Chemistry and Psychology). This program concentrated on teach- ing PL/I to those who were familiar 
with FORTRAN. Several of these people have been teaching in our department since that time, with varying 
degrees of success. Over the past few years, we have also found that a number of faculty members" from 
other departments have voluntarily audited computer science courses, to gain some computer literacy. 
 The Faculty Development Program In the Spring of 1981, the Chairman of the CIS Department (Professor 
Frank Beckman) proposed a more ambitious plan, with two major aims: teaching introductory programming 
to faculty in other departments and retraining faculty members to teach computer science courses. A two 
part program for faculty development was proposed. Program I would be for those faculty members who had 
no previous knowledge of programming; Program II for those with some experience. The goal of Program 
I was to give a brief introduction to computer programming; the goal of Program II was to teach other 
faculty members how to teach computer science. In early May, people were invited to apply for the Faculty 
Development Program. The admin- istration offered those in Program II a modest stipend of $750, while 
those in Program I were offered knowledge as its own reward. In late May, the participants in the two 
programs were selected (by the administration, not by our department). In most cases, self-assessment 
was used to de- termine if a person qualified for Program I or Program II. From the administration's 
point of view, Program II provided a cheap source of new computer science faculty, since these people 
were already on the college payroll. In fact, all nine applicants for Program II were accepted. About 
40 faculty members were initially interested in Pro- gram I, but this number was cut in half when the 
scheduling details were announced. As coordinator of our introductory programming courses, I was chosen 
to supervise the two programs. Programl The participants in Program I had a varied background. There 
were two full professors from Chemistry and several other senior faculty from Education, English, and 
Speech. There were also a number of junior faculty from Health Science, Psychology, Education Services 
(a department serving poorly prepared students), and one former member from Mathematics who had not been 
rehired for budgetary reasons. Most of them were inter- ested in learning something about computers, 
with the ultimate goal of applying it to their indi- vidual fields. A few had a more practical inter- 
est~ wanting to learn another skill in case they had to look for a job in the near future. Program I 
met for 15 sessions, 5 days per week for three weeks, in between the end of the Spring semester and the 
start of the Summer session, with a slight overlap on either side. Each day there were 3 hours of intensive 
class meetings in the morning, with an afternoon session devoted to writing and debugging pro- gramming 
assignments. Standard student facil- ities were used; keypunches and a remote job entry system to the 
CUNY Central Computer Facility. Because of the timing of the course, there was little competition for 
the normally overworked computing resources. In essence, each faculty member had a private keypunch machine 
and almost instantaneous turn-around time. We felt that it would be better to use these primitive facilities 
instead of terminals, in order to avoid problems in learning our text- editing system, and to allow everyone 
to be in one place instead of dispersed at individual terminals. This aspect of the program worked very 
nicely. There was a growing sense of camaraderie as the scholars struggled with a machine that seemed 
at first to be illogical but which they gradually came to realize behaved in a most infuri- atingly logical 
way. The course was run the same way that I teach our introductory programming course, which meets 4 
hours per week for 14 weeks. In particular, all faculty members were cajoled into participating in  
class discussions on problem-solving and pro- gramming. No examinations were given, but I was able to 
gauge everyone's knowledge through their participation in class and the programming assignments. A total 
of 9 programs were assigned, covering slightly more material than the average undergraduate section, 
despite the fewer hours (of course, no time was wasted on exams). Two of the participants, one from Mathematics 
and one from Educational Services, were outstanding, equal to the best undergraduate in a given class. 
Another four or five were good, and probably would have received an A in a normal section, especially 
if they were given the added incentive of a grade, in addition to their own self- motivation. Two or 
three others were able to survive, but had problems keeping up with the rapid pace. Finally, a few were 
simply unable to learn programming. I am not sure if it was for lack of time, lack of interest, or lack 
of aptitude, since I was somewhat embarrassed to discuss it with them. I personally found it fascinating 
to teach these people. At first, I was a little nervous about the propriety of being a "professor" to 
"students" who were my colleagues, in some cases of higher rank. However, we agreed to use first names, 
and soon developed a very pleasant class- room atmosphere. At one point, I was baffled by their misunderstanding 
of certain PL/I terms (e.g., factor, variable, attribute), until I realized that they were assigning 
these terms a meaning from their own disciplines. Once this problem was cleared up, the course went very 
smoothly. To summarizer it is quite nice to teach a group of extremely intelligent, highly- motivated 
adults. Most of the participants who completed the entire set of programs were pleased with the results 
of the course. They worked very hard, devoting up to 5 or more hours per day to writing and debugging, 
in addition to our classes. Some of them were teaching in Summer school, and had that additional burden 
for the last few meetings. One person (from Educational Services) did so well that she was chosen to 
fill a vacant slot in Program II. Program II As noted above, the Program II people rated their own 
knowledge of computer programming. This led to some difficulties because of the wide disparity in background. 
One person had the equivalent of a masters degree in computer science (his field was Economics-Accounting). 
Two of the others had taken a programming course or two and had some experience using the computer for 
pro- cessing laboratory data. A few had audited the introductory course in our department. Finally, two 
people had only a slight acquaintance with FORTRAN, from a course taken a number of years ago. If our 
department had done the screening, these two would have been directed to Program I, but at this point 
we had to accept the fact that they were misplaced. In total, three were from Chemistry, two from Economics, 
one each from Educational Services, English, Physical Education, and Physics. Our department had decided 
that in addition to whatever pedagogic ideas were discussed, all 171 Program II participants should 
take the equiv- alent of a second course in PL/I, even though they would be teaching the introductory 
course. There were a number of reasons for this. First, we thought that this extra knowledge would help 
 them feel that they knew more than the students. Second, they would get a better appreciation of what 
a student would need to know in the next level course, especially in terms of subpro- cedures, structures, 
and prograrmning style. Finally, a number of the ideas presented in a more advanced course might be helpful 
in a low level course. Therefore, we asked each Program II faculty member to audit (i.e., do everything 
except take exams) a standard Summer session intermediate programming course. Unfortunately, there were 
three possible courses that they could choose: one in program design and analysis, one in data structures 
(the second term of the program design course), and a third course that covered both areas in one semester. 
Each one of these sections ended up with two or three faculty members. The two with the weakest background 
audited a graduate-level introduction to pro- gramming that I taught in the summer session. This course 
covered essentially the same material as Program I. I had originally planned to meet once a week with 
the entire Program II group. The combination of disparity in background together with the disparity in 
the section that people were auditing meant that I might have to abandon my plan in favor of almost private 
conferences. We finally compromised on four groups, corresponding to the four classes that were being 
audited. In each group, we discussed the style and presentation of material, the problems students seemed 
to be having and what could be done about them, the differences between teaching computer science and 
teaching their own disciplines, etc. In addition, I met once or twice with the instructors of the under- 
graduate courses, to monitor the performance of the faculty members. While some of the people in Program 
I had problems, all of the participants in Program II were able to handle the course work. Perhaps this 
is because they all had at least some pre- vious computer experience, which insured that they all had 
some aptitude for the subject. Also, the stipend may have made them a little more committed than the 
dropouts from Program I. Overall Assessment of the Prosram First, let me note that a faculty retraining 
program is no substitute for recruiting computer scientists. We would love to hire 5 to i0 new Ph.D's, 
or even better, 5 to i0 senior computer scientists. However, given the current job market, it is almost 
impossible to attract more than one or two new people per year. Also, given the ever-present threats 
of firing non-tenured staff members, it is foolish to expect the admin- istration to give us an unlimited 
number of new computer science faculty. Therefore, we must be more realistic. Although only half the 
faculty members in Program I completed the entire set of assignments, almost all of the participants 
were pleased with the amount of material that they learned and were optimistic about using it in the 
future. I was  even more pleased with the enthusiasm that they showed for our field. Many of them have 
promised to take more computer science courses in the future. One faculty member from the Speech Department 
has taught himself BASIC, purchased a microcomputer system, and is using it to control laboratory experiments. 
He told me that he had been thinking about doing this for some time; the faculty course gave him the 
final push. He is impressed at how much of what we studied can be used in his environment. Also, as mentioned 
above, one star pupil was "promoted" from Program I to Program II. As the final indication of the value 
of the course, many colleagues of the participants have asked us to run another program in the Surmmer 
of 1982. Program II was also a success. From the administration's point of view, it succeeded because 
four of the participants are teaching in our department in the Fall semester (and are expected to continue 
in the Spring). Several others were unable to teach this year because of previous commitments, but plan 
to do so in the future. Naturally, we are closely monitoring the progress of the new computer science 
teachers. Every person from another department who is teach- ing an introductory course in our department 
has been observed at least twice in the Fall semester. In addition, we have distributed course outlines, 
sample programming assignments, and exams. The Appointments Committee has discussed each such instructor 
individually. In general, we are satisfied with the job done by the four people from Program II, especially 
in comparison to some of the "uncertified" people from other disciplines. Meanwhile, they are excited 
about teaching a new subject. They are also pleased to be teaching computer science instead of the alternative 
faculty development area: remedial mathematics. By the way, the Program I person who went on to Program 
II is one of the four (although it was somewhat accidental, since she is teaching a section that was 
added at the last minute). In addition, she has registered for (not audited) a course in COBOL and a 
course in file processing. Perhaps a new computer scientist has been born. CUNY-wide Program Of course, 
the problems that we faced at  Brooklyn College are by no means unique to our school. Most coleges 
are desperately short of computer science faculty while oversupplied with people in certain fields. 
In particular, the other units of the City University have similar staffing problems. Therefore, the 
entire university is planning  a faculty retraining program, including computer science. At a recent 
meeting, several people from our department, together with two of the participants from Program II, 
met with Vice Chancellor Ira Fuchs, Dean Mary Rothlein, and other representatives of the CUNY Administration. 
 We analyzed our program and how it could be improved. Some of the topics discussed were previous experience 
of the participants, screening procedures, facilities, and staffing. Naturally, the problems for the 
CUNY-wide  program will be magnified because of the large number of colleges (over 15 campuses, including 
 172 senior colleges, community colleges, and technical schools), plus the diversity of lan- guages 
used in the introductory courses. Each of the following languages is used at one or more schools for 
the first computer science course: assembler, BASIC, COBOL, FORTRAN, Pascal, and PL/I. However, we are 
hopeful that our success can be repeated and expanded in a university-wide program. Note: since the 
original paper was submitted, further details on the CUNY faculty retraining program have been announced. 
Professor Michael Barnett, from the Brooklyn College CIS Department, has been selected to head the computer 
science portion of the project. More information will be available at the conference. 
			
