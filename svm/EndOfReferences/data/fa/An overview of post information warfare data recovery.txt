
 An Overview of Post Information Warfare Data Recovery Brajendra Panda Joe Giordano Computer Science 
Department Information Warfare Team University of North Dakota Rome Laboratory Grand Forks, ND 58202-9015 
Rome, NY 13441 Emaih panda@cs.und.edu Emaih giordanoj@rl.af.mil Key Words: Information Warfare, Data 
Dependency, Damage Assessment, Recovery. ABSTRACT This research presents a synopsis of a method to make 
an assessment of the damage made to the database in an information warfare situation. The protocol requires 
a modified log to store necessary information to re-compute the affected operations of benign transactions. 
After an attack is detected, the algorithm presented in this paper scans the log to assess the damage 
and then recovers the damaged data to a consistent state. I. INTRODUCTION An attack on an organization's 
information resources can have significantly devastating impact on the ability of the organization. Such 
an attack through electronic media is called Information Warfare. Defensive information warfare consists 
of three major phases: prevention, detection, and recovery from attacks. Various preventive measures 
to protect the databases from intruders in a defensive information warfare environment have been discussed 
in [1]. There are several ways to detect an intrusion in a system [5]. Sometimes an attack may go unnoticed 
for a while, and as a result, the damaged data may spread and corrupt other undamaged data through other 
users. Traditionally, the database log registers the write operation of transactions [2], [3], [4]. During 
a system failure, the effects of all write operations of non-committed transactions that are already 
written into the stable database are undone. Furthermore, the effects of all write operations of committed 
transactions are redone if they are not in the stable database. The log is also temporarily purged when 
it is determined that the stable database reflects the updates of all committed transactions (thus requiring 
no redo) and no effects of any of the non-committed transactions (thus requiring no undo). The recovery 
method does not require any read operations for any of the transactions. The transactions are also never 
stored entirely as only the before images and after images are required during the undo and redo processes. 
Permission to make digital/hard copy of all or part of this work for personal or :lassroom use is granted 
without t~e provided that copies are not made or distributed for profit or commercial advantage, the 
copyright notice, the title of the publication and its date appear, and notice is given that copying 
is by permission of ACM. Inc. To cop), otherwise, to republish, to post on servers or to redistribute 
to isls, requires prior specific permission and/or a fee. &#38;#169; 1998 ACM 0-89791-969-6/98/0002 3.50 
However, this traditional approach does not work for database recovery in the information warfare environment. 
The system treats the attacker as any other valid transaction. Therefore, after the attacking transaction 
commits its updates are made permanent. Later, when the attack is detected, all the updates made by the 
attacker must be undone including the updates of the transactions that directly or transitively read 
from the attacker. Then, these valid transactions must be re-executed to return the database to a consistent 
state. Therefore, it is necessary to store both read and write operations in the log, and also to store 
the complete transactions in a separate log. Nevertheless, it is not efficient to re-execute all transactions 
from the point of attack. Moreover, the system remains unavailable to users during the recovery process, 
and thus yields to denial of service. Therefore, development of an efficient algorithm to recover the 
system after an information attack is crucial. This research presents an overview of a method for damage 
assessment and recovery in the database in an information warfare situation. The next sec_tion presents 
the recovery model. Section 3 offers the damage assessment and recovery algorithm, and Section 4 concludes 
the paper. 2. THE RECOVERY MODEL This research is based on the following assumptions: (I) the scheduler 
produces a strict serializable history, (2) the log stores all operations of transactions, (3) the order 
of operations in the log is the same as that in the history, and (4) the log is not modifiable by the 
users (so that an attacker will not be able to damage the log). Definition 1: A write operation wi[x 
] of a transaction T i is dependent on a read operation riD, ] of T i if ri[y ] must be scheduled before 
wi[x ]. Definition 2: A data value vl is dependent on another data value v2 if the write operation that 
wrote vl was dependent on a read operation on v2. As the log does not reflect all the partial orders 
among operations in the history, the exact dependencies are hard to compute from the log. However, as 
per our requirement (assumption (3) above), the modified log does maintain the order of all conflicting 
operations. So, it is safe to consider that a write operation of a transaction depends on all read 253 
 operations of the same transaction that precede the write operation. Assume that S is the set of read 
operations of a transaction, say T i, on which a write operation, say wi[x ] of T i depends on. Scanning 
the log, we find that the set of read operations that appears before wi[x ] is S 1. Then S is a subset 
of $1, i.e., S c S1. From SI, we would be able to recalculate the value ofx although some of the operations 
in SI will not be needed in the calculation. Definition 3: A write operation is called a valid-write 
if the operation belongs to a benign transaction and the value written is independent of any contaminated 
data. Note: A valid write on a damaged data refreshes the data. 3. THE ALGORITHM In the following algorithm, 
fresh_list and read_list_T/ are lists of records with two fields: data item field and value field. The 
structure damage_item_list includes the list of damaged data as concluded by the algorithm. The value 
of each damaged data in the damaged_item_list which would have been in the database if the attacking 
transaction would have not been executed, is calculated and stored in the fresh_list. The read_list_T/contains 
the data items that are read by T i. Notation: Let [Ti, x, vl, v2] denotes the write operation of T i 
in the log where vl and v2 are respectively the before and after images of x. This notation is used in 
[3]. A read operation of T i is denoted by [T i, x, v] which indicates that the value ofx read by T i 
is v. The algorithm is presented below. 1. Set damage_item_list = {}. /* Empty set */ 2. Set fresh_list 
= {}. 3. Scan the log until the end  3.1 For every write operation [T i, x, vl, v2] of an attacker, 
if x ~ damage item list, add x to damage_item_list, and add the record (x, vl) to fresh list. /* vl is 
the before image ofx */ 3.2 For any other transaction 7) appearing after a write operation of the first 
attacker, set read list Tj = { }. 3.3 For every read operation [Tj-, x, v] of Tj, add record (x, v) to 
read list_Tj 3.3.1 Ifx ~ damage_item_list, replace value v of record (x, v) in read list_Tj by value 
ofx in fresh_list 3.4 For every write operation [Tj, x, vl, v2] of Tj, 3.4.1 If the set of data items 
in read_list_Tj damage_item list ~ d~, recalculate new value v2 of x by using values in read_list_Tj 
3.4.1.1 Ifx ~ damage_item_list, replace value ofx in fresh_list by new value v2 3.4.1.2 Else add record 
(x, v2) to fresh_list, and add x to damage_item list 3.4.2 Else 3.4.2.1 Ifx ~ damage_item_list, remove 
x from damage_item_list remove the record ofx from the fresh list. 4. For each item in damage_item list, 
replace its value in the database by the value in the fresh list. Explanation of Step 3.4.1: The new 
recalculated value is the correct value ofx that should have been in the database if the attacking transaction 
was not executed. To recalculate the new value of x, we need to know the logical operation, say o that 
was initially used to calculate the after image of x. The information on this logical operation o may 
not be derived from vl and v2 only. There are several ways to solve this problem, one of which would 
be to embed o in the log, for example [Tj, x, o, vl, v2]. Once the list of contaminated data is determined, 
all data items in the list are blocked from being read by other transactions. This will stop further 
spread of the damage in the database. However, while recovering the damaged data, overwrites on them 
by any active transaction must be allowed. Such an overwrite will be a valid-write and will refresh the 
damaged values. Once a damaged data is refreshed it will be made available for read/write purposes. 4. 
CONCLUSIONS This research offers a recovery algorithm that restores the database, after an electronic 
attack to the database, to a consistent state by re-computing the affected operations of all benign transactions 
that follow the attacker. For this purpose the log is modified to store the read operations of all transactions 
in addition to their write operations. Instead of using the traditional transaction based approach, this 
method uses the data dependency based approach to determine the spread of damage in the database. ACKNOWLEDGMENT 
The work of Brajendra Panda was supported, in part, by the US AFOSR Summer Faculty Research Program. 
 REFERENCES <RefA>[11 <SinRef><author>Ammann, P.</author>, <author>et al</author>, <date>1997</date>, "<title>Surviving Information Warfare Attacks on Databases</title>", In <booktitle>Proceedings 
of the [EEE Symposium on Security and Privacy</booktitle>, p. <pages>164-174</pages></SinRef>. [21 <SinRef><author>Bemstein, P. A., </author><author>Hadzilacos, V., </author>and <author>Goodman, 
N., </author><date>1987</date>, "<title>Concurrency Control and Recovery in Database Systems</title>", <publisher>Addison-Wesley</publisher>, <location>Reading MA</location></SinRef>. [31 <SinRef><author>Elmasri, 
R., </author>and <author>Navathe. S. B., </author><date>1994</date>, "<title>Fundamentals of Database Systems</title>", <volume>Second</volume> Edition, <publisher>Addison-Wesley</publisher>, <location>Menlo 
Park, CA</location></SinRef>. [4] <SinRef><author>Gray, J., </author>and <author>Reuter, A., </author><date>1993</date>, "<title>Transaction Processing</title>." <journal>Concepts and Techniques</journal>", <publisher>Morgan 
Kaufmann</publisher>, <location>San Mateo, CA</location></SinRef>. [5] <SinRef><author>Lunt, T. F., </author><date>1993</date>, "<title>A Survey of Intrusion Detection Techniques</title>", <journal>Computers 
&#38; Security</journal>, <volume>Vol. 12, No. 4</volume>, p. <pages>405-418</pages></SinRef></RefA>. 254  
			
