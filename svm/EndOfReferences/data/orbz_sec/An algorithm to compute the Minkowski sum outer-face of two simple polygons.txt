
 An Algorithm to Compute the Minkowski Sum Outer-face of Two Simple Polygons G.D. Ramkumar* Department 
of Computer Science Stanford University Stanford, CA 94305, USA. E-maiI:rarnkumar@ cs. stanford. edu 
Abstract We use the concept of the convolution of two poly­gons as a tool for computing the outer-face 
of their Minkowski sum. Our method consists of travers­ing each cycle of the convolution, detecting self­intersections, 
and snipping-off the loops thus cre­ated. In order to detect self-intersections, we adapt the geodesic 
triangulation ray-shooting data struc­ture to answer ray-shooting queries on a dynamic polygonal line 
of size n, in 0(log2 n) amortized time. We find the outer-face of the Minkowski sum of two simple polygons 
of size m and n respectively in time O((k+ (m+n)ti) log2(m+rz)) where k is the size of the convolution 
and 2 is the number of cycles in the convolution. Although k can be O(rrzn) in the worst case, it is 
much less for realistic input instances. If one of the polygons is convex, then the convolu­tion has 
only one cycle, and the algorithm runs in O(k log2 (m + n)) time. Existing methods to find the Minkowski 
sum outer-face rely on general algo­rithms to compute a single face in an arrangement of k line segments 
which take O(k log ka(k)) time. Our algorithm exploits a new insight into the re­lationship between convolution 
and Minkowski sum and, though asymptotically slower, has practical ad­vantages for realistic polygon 
data. *Supported by NSF Grant #s NSF-CCR-921-5219, NSF­ IRI-930-6544 Permission to make digital/hard 
copies of all or part of this material for personal or claaaroom use ia granted without fee provided 
that the copies are not ~de or distributed for profit or co~ercial advantage, the copy­ right notice, 
the title of the publication and its date appear, and notice ia given that copyright ia by perrnisaion 
of $e ACM, Kc. To copy otherwise, to republisb, to peat on serversor to redlatributeto lists, requiresspecific 
permissionandlor fee. Computational Geometry 96, Philadelphia PA, USA @1996 ACM @s979 l_gOLI_5/9tj/05..$3.50 
1 Introduction Minkowski sums arise commonly in robotics under the name of configuration space obstacles 
[9], when the robot motion is restricted to translation. The Minkowski sum QN @ P of a Robot Q reflected 
through the origin with obstacle P is the the set of placements of Q with respect to P which cause the 
two polygons to intersect. The outer-face of the Minkowskl sum is the infinite component of the complement 
of the Minkowskl sum and represents the set of free placements of Q that can be reached by translation 
from infinity. In most robotics appli­cations interior cavities of the Minkowski sum are uninteresting 
parts of the free space what really matters is the region bounded by the outer-face. Given two simple 
polygons P and Q, we present in this paper an algorithm to compute the outer-face of the Minkowskl sum 
of P and Q using the con­volution of the two polygons made into tracings as the key tool. Planar tracings 
and their convolutions were in­troduced as generalizations of ordinary polygons by Guibas, Ramshaw, and 
Stolfi [6] as part of the ki­netic framework for computational geometry. One of the consequences of that 
framework is that con­volution and Minkowski sum are closely related. In this paper, we show how to use 
convolution to find the outer-face of the Minkowski sum in time O((k+ (m+n)ti) log2(m+n)), where m and 
n de­ note the sizes of P and Q respectively, k is the size of the convolution P *Q, and 1 is the number 
of cy­cles in the convolution tracing (we assume m < n, and of course 1 < k). Note that the convolution 
is always of size O(mn), while the Minkowski sum can be of size 0(rn2n2). We use an algorithm presented 
in [6] to compute the convolution of planar polyg­onal tracings in optimal time O(m + n + k). The outer-face 
of the Minkowskl sum can be computed by applying the general algorithm of [3] to compute a single face 
in an arrangement of k line segments in time O(ka(k) log k). It is shown in [7] that the complexity 
of a single face in the Minkowski sum can in fact be ~ (mna(rrm)) in the worst case. Unlike this approach, 
which only needs the edges of the convolution as a set of line segments, our al­ gorithm exploits the 
way the segments are linked together into cycles in the convolution. The key idea is to detect self-intersections 
and excise the loops thus formed in the convolution. To detect self-intersections, we provide a novel 
scheme for per­forming ray-shooting against a dynamic polygonal line, using the geodesic triangulation 
structure of [2]. Our scheme relies on dividing the polygonal line into blocks of contiguous segments 
and storing a geodesic triangulation for each block. Ray-shooting queries are answered in amortized time 
0(log2 k), where k is the size of the polygonal line. The prob­lem of dynamic ray-shooting has been studied 
in a more general setting in [4], where the authors obtain a worst-case time bound of O (log2 (n) ) for 
ray-shooting against a dynamic planar subdivision of size n. Our technique only works for polygonal lines, 
but it is simpler and sufficient for our needs. Our outer-face algorithm, though again slightly in­ferior 
in asymptotic complexity to the single face method, is easy to implement and helps illuminate some new 
aspects of the connection between convo­ lution and the Minkowski sum. This paper is organized as follows. 
Section 2 in­troduces basic terms and outlines the relationship between convolution, fiber product, and 
Minkowski sum. In Section 3 we describe how to traverse a cy­cle of the convolution, detecting self-intersections, 
excising loops, and computing its outer boundary. In section 4, we discuss how to connect multiple cy­cles 
of the convolution together and traverse them in sequence using the algorithm of Section 3 to find the 
outer-face of the Minkowskl sum. Section 5 con­cludes the paper. 2 Convolution and Minkowski sum We recall 
briefly some terms introduced in the kk netic framework [5]. A state is a pair consisting of a position 
A in the plane and a direction 3. A move is a set of states with constant direction and position varying 
along a line segment parallel to the direc­tion. A turnis a set of states with constant position and 
direction varying along an arc of the circle of directions. A polygonal trip consists of a continuous 
sequence of moves and turns; the trip is closed if it starts and ends at the same state. A polygonal 
tracing is a collection of closed polygonal trips. We think of each loop of a tracing as being traversed 
by a car which always faces in the direction of the state it is currently in. The winding number of a 
point with respect to a tracing has the traditional meaning. Given a simple polygon P we denote as P 
the tracing corresponding to a counterclockwise traver­sal of its boundary with the car always moving 
for­ward (for details, see [5]). Let P, Q bae two ;imple polygons with c~rresponding tracings P and Q. 
The convolution of P an! Q is ~efined as follows. If p and q are states in P and Q such that @ = <, then 
the state c = @+ g, P5 is a state in the convolution. In other words, t~e conv~lution is a set of vector 
sums of states in P and Q where the two cars face in the same direction. A convenient way to visualize 
the convolution is to depict it as the jiber product FP(P, Q) defined as follows. Lay out the perime­ter 
of P on the horizontal axis and the perimeter of Q on the vertical axis, and plot all pairs of bound­ary 
points that produce a state in the convolution (note that this representation collapses information about 
matching states in turns). A vertical edge of the fiber product corresponds to a convolution move derived 
from Q while a horizontal edge is de­rived from an edge of P (see Figure 1). P Q P.c) F (BQ FP(P, Q) 
.cakd by 1/2 \ Figure 1: The convolution, Minkowskl sum, and fiber product of two simple polygons. The 
Minkowskl sum P @ Q of polygons P and Q consists of pair-wise vector sums of zdl interior or boundary 
point~ of P and Q. Note that thk includes all pairs used in the definition of the con­ volution. From 
the fundamental theorem on con­volutions [5], it follows that the winding number of a point x with respect 
to P * Q is the number of connected components in the intersection of PN translated by x and Q. The Minkowski 
sum PA@Q is thus the non-zero winding number region of P*Q. From this it follows that the convolution 
pairs cover the boundary of the Minkowskl sum; other pairs must be inside or can be on the boundary, 
but they cannot be outside. On the other hand, edges of the convolution can be interior, wholly or in 
part, to the Minkowski sum, e.g., when they separate regions of non-zero winding number. A key advantage 
of the convolution is that it is stored as a collection of edge cycles without regard to how these cycles 
might intersect themselves or each other. This is the reason why the convolution is O(mn) in size regardless 
of the geometry of the input polygons. The Minkowskl sum, on the other hand, can be combinatorially much 
larger, since in­tersections of different convolution edges that are on the Minkowski sum boundary must 
be explicitly stored. A worst-case example of a Minkowski sum with complexity @(m2n2) is provided in 
[8]. P (2 # *Q FP(P, Q)   Ef;i$?jiq b.. -....?.. ?+-..+; Figure 2: A larger example of the convolution 
and the fiber product (the fiber product is scaled to fit within the page). 2.1 Cycles of the convolution 
The convolution consists of a number of closed polygonal trips that we call cycles. They may over­lap 
in the plane, producing intersections. In the fiber product, however, the cycles are spatially sep­arated 
out. This is because a pair of boundary fea­tures of P and Q can only produce a single feature in the 
convolution. This property makes the fiber product a convenient tool for visualizing the con­volution, 
without the clutter introduced by its ac­tual embedding in the plane. Figure 3 shows two simple polygons 
which produce a convolution con­taining two cycles. Each cycle contributes to the outer-face of the Minkowski 
sum, requiring our al­gorithm to consider both in order to find the outer­face. Figure 2 shows a large 
example of a convolu­tion with cycles separated out in the corresponding fiber product. P*eJ v Figure 
3: The convolution of these two polygons contains two cycles and each cycle contributes to the outer-face 
of the Minkowski sum. Lemma 2.1 If Q is a convex polygonal tracing and P is a simple polygonal tracing, 
the convolution ~ * Q consists of a single cycle. Proofi Consider any pair of matching states, say (P1, 
gl), (P2, q2) in the convolution. Move the P car from pl continuously along P (in either direction) till 
p2 is reached. Since Q is convex, the Q car al­ways match any arbitrary (left or right) turn the P car 
makes, simply by moving (forwards or back­wards) along Q from its current state. Thus any two states 
on the convolution can be connected and therefore there can be only one cycle.  2.2 Computing the convolution 
Guibas and Seidel [6] show how to compute {he con­volution of two simple polygonal tracings P and Q in 
optimal time -O(Am+ n + k)l where m, n, and k are the sizes of P, Q, and P * Q respectively. They compute 
the set of moves and turns comprising the convolution and sort them using radix sort to find the order 
in which they are traversed in the convo­lution. We recall below an alternative way to find the traversal 
order using signs assigned to turns. In the kinetic framework of [5] it is shown how to assign signs 
to moves and turns of tracings so that the convolution derives consistent signs for its moves and turns 
(positive moves are forward and positive turns are to the left). The sign of a move of the convolution 
is then the product of the signs of the move and turn that paired to cause it. For coun­ terclockwise 
simple polygonal tracings, all moves are positive, left turns are positive, and right turns are negative. 
Hence the convolution of a move with a left turn is a positive (i.e. forward) move and that with a right 
turn is a negative (i.e. backward) move. It is then possible to traverse the convolution start­ing from 
any move, going forward or backward de­pending on its sign, and so on. Since we need to compute the outer-face, 
we start the traversal with a convolution vertex that contributes to the outer-face. We do this by choos­ing 
to start with a vertex that is extreme in some direction: for instance the convolution of the two left-most 
turns of P and Q. Let us now see how the traversal of a single cycle of the convolution is performed. 
 3 Outer boundary of a convo­lution cycle In this section, we focus on the computation of the outer boundary 
of one cycle of the convolution, and show that the outer boundary of a cycle composed of k moves can 
be computed in time O(k log2 k). The algorithm works as follows: starting from an outer-face vertex, 
we grow a simple polygonal chain, one move at a time, keeping a ray-shooting data structure that allows 
us to detect self-intersections. When a self-intersection occurs, we add the inter­section point as a 
new vertex, and then pinch off and excise the edge cycle thus formed. We describe the algorithm in more 
detail below and show that it correctly computes the outer boundary of a cy­cle. We then show how the 
geodesic triangulation data structure of [2] can be adapted for efficient dy­namic ray-shooting towards 
a growing simple polyg­onal chain. 3.1 Description of the algorithm The algorithms works as follows: 
Start from an outer vertex and grow the chain one edge at a time. The new endpoint of the next edge added 
becomes the current active end of the chain where the next Figure 4: Snap shots of the running of the 
algo­rithm: left picture depicts the ray-shooting, and the middle and right pictures show excised clock­wise 
and counterclockwise loops in dotted lines. edge will go. For each edge being added, we shoot backwards 
from the free endpoint of the new edge towards the active vertex of the polygonal chain, to see if the 
edge intersects the polygonal chain grown so far see Figure 4. If it does not, the edge is accepted 
and added to the chain. If it does, we break both the new edge and the polygonal chain at this first 
intersection found. Because we shot backwards, we are guaranteed to find the last inter­section between 
the chain and the edge (ijf we were to imagine the new edge growing out of th en active vertex). The 
part of the original chain between the intersection and the active vertex is removed (this is the cycle 
being pinched off), and then the remain­ing fragment of the new edge is added to give us a new active 
vertex. 3.2 Convolution loops The proposed algorithm relies on an important ob­servation, which justifies 
the pinching OR if the polygonal line starts from a point that lies on the outer face of the Minkowskl 
sum, then ncl edge (or part of an edge) in a loop can lie in the outer face. For the argument below, 
recall that we have ori­ented all our polygons in a counterclockwise man­ner. Lemma 3.1 Let T be a path 
following a cycle of the convolution and starting from a point O known to lie on the outer face. If T 
self-intersects, then no point on the loop thus created can be on the outer face of that cycle. Proofi 
Clockwise loops are completely enclosed within the convolution because the interior of the convolution 
is always to the left of a convolution edge according to the way the edge is traversed in going around 
the cycle. Thk means that the region enclosed by the clockwise loop is completely within the outer-face 
of the Minkowski sum. /0 .. .. . Figure .5: A counterclockwise loop of the convolu­tion with the excised 
loop shown in grey. -.? Figure 6: Placements Q! and Q~ of QN corre­sponding to intersections A and B 
of Figure 5. Let us now consider a counterclockwise loop /? created by the first self-intersection of 
T at the point A. We can assume that A itself is on the outer face, for if ~ had already entered inside 
the convolution by crossing in at an earlier point X, then X it­self defines another loop whose set of 
edges includes those of/? and to which our argument below can be applied: if no portion of that cycle 
can be on the outer face, a fortion the same applies to 4. Now around A the loop cannot contribute to 
the outer-face, for it separates regions of winding num­ber 1 and 2 respectively see Figure 5. So the 
only way for 1 to appear on the outer face is for n to cross again into / so as to bring the lowest of 
these winding numbers down to O. Let the such a cross­ing be B. By reasoning as above, we can assume 
that B is on the outer face as well (if not, keep go­ing till such a B is found). Points A and B are 
double points in the convolution: each of them de­notes a placement of QN that causes it to touch the 
boundary of P in two places. Let us denote these placements as Q~ and Q: respectively, and the tangenecy 
points as al, az and bl, b2 respectively. The portion rs of the boundary of P of that gener-Figure 7: 
A counterclockwise loop cannot be on the outer-face. ates the portion of m seen so far visits these points 
in the order al, bl, az, bz, as depicted in Figure 6. Since the cycle is counterclock wise, the interior 
of P must locally always be as depicted in Figure 6. Note also that, since A and B are on the outer 
face by assumption, the boundary of P cannot enter the interior of Q: of Q:. But now we have a topological 
impossibility: there is no way to connect the points al, bl, az, bz into a cycle in the order given, 
without either self intersections or going through the regions Q: or Q:. Some of the possibilities are 
shown in Figure 7. But this contradicts the assumption that there is a simple counterclockwise oriented 
polygon P passing through these points and avoiding regions Q~ and Q:. It is worth noting that the proof 
relies on the in­put tracings representing simple polygons with only forward moves. This is the only 
case which is of rel­evance to robotics. 3.3 Dynamic ray-shooting structure A geodesic triangulation 
based ray-shooting data structure for a simple polygon in the plane was presented in [2]. The data structure 
is computed in linear time and supports ray-shooting queries in O(log k) time where k is the size of 
the polygon. This technique can be extended for polygonal lines by computing geodesic triangulations 
that stay to the left and to the right of the lines respectively. Ray-shooting queries can be made to 
the left as well as the right of the polygonal line. The ray-shooting data structure must handle updates 
of the polygonal line at one end. In or­der to efficiently process these updates we divide the polygonal 
line into contiguous blocks of seg­ments and store a static ray-shooting structure for each block. The 
number of blocks is chosen to be O(log k), where k is the size of the polygonal line. The ray-shooting 
cost summed over all the blocks is 0(log2 k). We now show how to choose the lengths of the blocks such 
that the amortized cost of up-tial for each bit position L dates of the polygonal line is minimized. 
;+ .-_-_._-.......~+_-_-___*:+ .-J .,, h h-l L-2 Figure 8: Dividing the polygonal line into blocks of 
segments. Suppose t~e curre~t length of the polygonal line isj. Let~=(b~, ..., bo) be a r~dundant binary 
rep­resentation of j: where each bi is O, 1, or 2, and j = E(&#38;2i). The polygonal line is divided 
into blocks of length &#38;2i with the active end stored in the smallest block. Since a bit is allowed 
to be 2, a number can have redundant representations: for in­stance 5 can be either 101 or 21. Addition 
involves carry propagation and subtraction involves borrow propagation using the following table. For 
example incrementing 1222 yields 2111 and decrementing 200 yields 111. Let us now look at what happens 
when an insert (or delete) happens at the active end of the polygonal line of length The current representation 
~ is incremented (or decremented) and for each bit position bi that changes the corresponding block is 
reconstructed or destroyed. Since the length of ~his block is $~2i, the cost of changing bit position 
bi is O (2i ). We now show that the amortized cost of updates is O(log k). j. 3.4 Amortized analysis 
of the redun­dant binary counter We perform an analysis of the redundant binary counter in an abstract 
setting in which the cost of flipping bit z is O(2i). Let us assume that the total number of increment 
and decrement operations is k (bounded by the size of the convolution), so that the number of bits in 
the counter is bounded by A = (log k]. We show that the amortized cost of each operation on the counter 
is O(log k). For a representation j = @X,. ... 60) of j, the value of the counter at time t, we associate 
a poten-An increment that flips v+ 1 bits causes the follow­ing change in representation: (..., iv,2,..., 
2)+(...,6V +1,1,1).,1) Before the increment, we have, for all l? s v, #e(t) = ~ 2.2 2! O<i<t = 2e 2 
 After the increment, the potential at the same po­sition becomes: 1.2~ 2e #l(t+ 1)= x osz<e  1 All 
potentials associated with positions higher than v simply increase or decrease by 1. Thus tlhe differ­ence 
in the total potential @= ~i &#38; is: @(t+1) -~(t) = ~ g$(t + 1) -q%(t) v<i<A + ~ dl(t+ 1) 41(0 oses~ 
<= A v+ ~ (-2 + 1) oses. ~ y+l+l  The cost of flipping v bits is 0(2 ). The change of potential pays 
for all but ~ of the cost. Hence amor­tized cost of each operation is ~+ 2. The decrement operation, 
if it flips v + 1 bits, causes the following change: (..., iv, o,... ,0)+ (... ,61,1,1,1).,1) and the 
exact same analysis carries through. Although the total potential function can be negative, it reaches 
its minimum when the l:ounter is aJl 2 or all O: namely the potential is 2X+:Z = @(k), adding only a 
constant cost per operation. Thus, the redundant counter dynamizes the gec~desic tri­ angulation data 
structure with an amortized cost of O(log k) per operation.  4 Connecting multiple cycles The algorithm 
of Section 3 hinges on ray-shooting against a connected polygonal line and no obvious extension seems 
possible to within a comparable time bound when multiple disjoint cycles can be present. In order to 
apply our technique on multi­ple cycles of the convolution we attempt to connect these cycles together 
and form a single cycle. If the paths connecting the cycles are known to lie inside the Minkowski sum, 
then the outer-face will remain unchanged when we apply the loop excising process to this composite cycle. 
The running time of the algorithm thus depends on the total length of this path, namely the size of the 
convolution plus the length of the connecting paths. Let us now see how to connect the cycles of the 
convolution visualized on the fiber product. If the input polygons P and Q are of sizes m and n the fiber 
product FP(P, Q) is on a rectangle of size m x n. A grid point in the rectangle is a pair of vertices 
(p, q) of P and Q, and corresponds to their vector sum (p+ q). By definition, (p-i-q) lies in the Minkowski 
sum of P and Q. Thus, a path connect­ing two points in the fiber product corresponds to a path in the 
Minkowski sum. Connecting cycles of the fiber product hence amounts to connecting cycles of the convolution 
using paths that lie in the Minkowski sum. L 1 n Figure 9: Shows two polygons and their convolution fiber 
product and a superimposed comb to connect the cycles. Let us now see how to connect cycles of the fiber 
product. Suppose there are 1 cycles in the fiber product. Overlay a comb with &#38; horizontal teeth 
and a vertical spacing of 3, as in Figure 9. Now connect each cycle of the fiber product to its nearest 
tooth using a vertical segment. This construction connects together all the cycles. Let us now com­pute 
the length of the connecting paths. There are ~ teeth in the comb each of length m yielding a to­ tal 
comb length of m~. Each of the 1 cycles can be connected to a tooth with a vertical segment smaller than 
$, yielding a total length of at most na. The final length of all the added paths is therefore (m+ n)/Z. 
It can be shown that this is optimal to within a constant factor for the length of connecting paths that 
lie on the fiber product. In particular, if the fiber product cycles are arranged in a regular a x &#38; 
subgrid of the m x n fiber product grid, (m+ n)~ is a lower bound for the length of any set of interconnecting 
paths. Using these connect­ing paths (and possibly doubling them over), we can now easily form a single 
cycle whose edges include all the original edges of the convolution cycles. We can now compute the total 
running time of our loop-cutting algorithm for a convolution with multiple cycles. The length of the 
polygo­nal line traversed is O(k + (m -t n) ~). Amortized cost of ray-shooting and updating the polygonal 
line is 0(log2 (k + (m + n)~)) which simplifies to 0(log2(m + n)) since k s mn. Hence the total cost 
of finding the outer-face of the Minkowskl sum is O((k + (m + n)ti) log2(m + n)). Note that this bound 
remains roughly quadratic even when 1 = @(k) = Cl(inn). Though a quadratic number of cycles is possible, 
we expect that in most practical situations 1 will be quite small.  5 Conclusion In this paper we have 
presented a method to use the convolution of two simple polygons to find the outer-face of their Minkowskl 
sum in time O((k + (m+ n)ti) log2 (m + n)), where m, n are the sizes of the polygons, k is the size of 
their convolution, and 1 is the number of cycles in the convolution. Three key ingredients went into 
our algorithm. We adapted the geodesic triangulation data structure for ray-shooting queries against 
a polygonal line of size k to work in amortized time O(log2 k) in a dy­namic context. If one of the input 
polygons is con­vex, then the convolution has a single cycle. We proved a topological lemma that allows 
us to com­puter the outer face by traversing this cycle and discarding any loops formed by self-intersections; 
the loops are discovered using the dynamic ray shooting structure and the total running time is O(k log2 
(m+n)). In the general case, our algorithm uses an additional technique to connect the cycles of the 
convolution into a single cycle using paths in­[5]side the convolution of total length O((rn + n) ~), 
and then applies the single cycle technique. An interesting open problem here is whether the cycles 
can be connected using paths of length O(m + n + 1). Our method only considers paths [6] in the fiber 
product, which correspond to pairs of points on the boundary of P and Q. For such pairs the lower bound 
example mentioned earlier applies, [7]but it may be possible to do better if we allow pair­ing of points 
inside P and Q. Another problem raised is whether ray-shooting queries against a dy­namic polygonal line 
of length k can be performed in O(log k) time. A theory of polyhedral tracings and their convo-[8] lution 
is introduced in [1]. An interesting question there is whether the relationship between the con­volution 
and the Minkowski sum explored in this paper can be extended to three dimensions, and [9]whether a similar 
algorithm can be formulated to compute the outer-face of the Minkowski sum. Acknowledgments I would like 
to thank my advisor Leonidas Guibas for his contributions to these results, and my col­league Julien 
Basch for many helpful discussions. References <RefA>[1] J. Basch, L.J. Guibas, G.D. Ramkumar, and L. Ramshaw. 
Polyhedral tracings and their con­volution. Submitted.  [2] B. Chazelle, H. Edelsbrunner, M. Grigni, 
L. Guibas, J. Hershberger, M. Sharir, and J. Snoeyink. Ray shooting in polygons using geodesic triangulations. 
In Proc. 18th Internat. Colloq. Automata Lang. Program., volume 510 of Lecture Notes in Computer Science, 
pages 661 673. Springer-Verlag, 1991.  [3] B. Chazelle, H. Edelsbrunner, L. Guibas, M. Sharir, and J. 
Snoeyink. Computing a face in an arrangement of line segments and related problems. SIAM J. Comput., 
22:1286-1302, 1993. [4] M. T. Goodrich and R. Tamassia. Dynamic ray shooting and shortest paths via 
balanced geodesic triangulations. In Proc. 9th Annu. ACM Sympos. Comput. Geom., pages 318-327, 1993. 
L. J. Guibas, L. Ramshaw, and J. Stolfi. A ki­netic framework for computational geometry. In Proc. 24th 
Annu. IEEE Sympos. Found. Com­put, Sci., pages 100-111, 1983. L. J. Guibas and R. Seidel. Computing convo­lutions 
by reciprocal search. Discrete IComput. Geom., 2:175-193, 1987. Sariel Har-Peled, Timothy M. Chan, Boris 
Aronov, Dan Halperin, and Jack Snoeyink. The complexity of a single face of a Minkowski sum. In Proc. 
7th Canad. Conf. Comput. Geom., pages 91-96, 1995. A. Kaul, M. A. O Connor, and V. Srinivasan. Computing 
Minkowski sums of regular poly­gons. In Proc. %d Canad. Conf. Oomput. Geom., pages 74-77, 1991. T. Lozano-P&#38;ez. 
Spatial planning: A configu­ration space approach. IEEE Trans. Comput., C-32:108-12O, 1983.  
			
</RefA>