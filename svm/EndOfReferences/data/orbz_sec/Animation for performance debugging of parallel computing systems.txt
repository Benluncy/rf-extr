
 Animation For Performance Debugging Of Parallel Computing Systems Noritaka OSAWA, Hisaya MORITA and 
Toshitsugu YUBA* Graduate School of information Systems The University of Electro-Communications** Abstract 
Visualization is a useful first step in performance debugging, that is, performance tuning of a parallel 
program if it shows the balance between computation and communication. In visualizing performance data 
it is important to exploit the human cognitive ability of recognizing slight differences in shapes, positions 
and velocities of fhrniliar objects. We have proposed animation for performance debugging that utilizes 
this human cognitive ability and made a prototype system of our proposed animation. It animates performance 
data based on dynamic system modeling where the data is mapped to a dynamic system model, the model is 
simulated and the result of simulation is made visible and audible in 3 dimensions using Virtual Reality 
Modeling Language (VRML) 2.0. New features such as interaction support, animation support, scripting 
and prototyping of VRML 2.0 are very helpful when making our animation system. Exchange of animation 
written in VRML 2.0 through networks enables us to perform distributed and cooperative performance debugging 
using animation easily. CR Categories and Subject Descriptors: 1.3.6 [Computer Graphics]: Methodology 
and Techniques -Interaction techniques; 1.3.7 [Computer Graphics] Three-Dimensionrd Graphics and Realism 
-Animation; 1.6.3 [Simulation and Modeling]: Applications. Additional Keywords: performance debugging, 
parallel program, dynamic system, VRML 2.0 {osaw~morit~yuba} @uba.is.uec.ac.jp . * ~.5.1 chofigaok~Tokyo 
182, JAPAN Chofu.shi, } emlission to make digiL?lfiard copies ot all or part of this material for personal 
or clmmmm use is granted without fm pmvid~ that IIle eopi= are not made or distributed for profit or 
commercial advantage, the copy. right notice, the title oftbe publication and its date appear, and notice 
is given ttml copyright is by permission of the ACM, Inc. To copy otherwise, to republish, to post on 
servers or to redistribute to lists, requires specific pemiwion andlor fee VRML 97, Monterey CA (ISA 
Copy-ight 1997 ACM 0-89791 -t786-x197/02 ..$3.50  1 INTRODUCTION Parallel computers, multi-processor 
workstations and workstation clusters have become widespread. Wide use of parallel computing hardware 
makes parallel programming popular. However, development of a parallel program is more difficult than 
that of a sequential program. Inappropriate programming makes a parallel program slower than a sequential 
one because overhead of communication cancels speedup obtained by using parallelism. It is important 
to schedule distribution of computation and data appropriately in addition to using a suitable parallel 
algorithm in parallel programming. In a parallel computing environment, good balance between computation 
and communication leads to high performance. Visualization helps us to see the balance. The first step 
of performance tuning (performance debugging) is to find locations of bad balance (performance bugs). 
Visualization is usefitl to help fmd performance bugs. Visualization of behavior and performance of parallel 
programs have been studied[7][l 0][ 13]. They directly map state values or their statisticrd values, 
which represent states of a parallel program or a parallel computer, to graphical attributes like coordinates 
in a coordinate system, shapes, color and brightness in order to visualize the states. Typical examples 
of static visualization for performance tuning include the Gantt Chart[5], the Time-Space Diagram and 
the Kiviat Figure[9], which represent states in 2 dimensions. Three-dimensional visualization that introduces 
a time-axis into a 2-dimensional figure (for example, the Kiviat Figure) have been performed as well 
as the simple animation of states[7]. However, it is rare to exploit the human cognitive ability of familiar 
objects in visual@ion. ChemofPs face[3] is an example of figures that utilize the human ability to recognize 
slight differences in facial expressions. In the case of Chemoffs face, familiar images are facial expressions. 
We propose animation of parallel processing states utilizing this human ability. Our proposed animation 
does not directly map the states into graphical attributes but maps them to bodies and forces in a dynamic 
system model that is familiar to human beings. A prototype system for our proposed animation has been 
constructed using Virtual Reality Modeling Language (VRML)2.0[2]. Oursystem utilizes 3-D object description, 
dynamic behavior description using interpolators and scripts, and 3-D sound. 2 ANIMATION BASED ON MAPPING 
TO A DYNAMIC SYSTEM MODEL A goal of visualization of data is to give a man states that are represented 
by tuples composed of a lot of values so that he can utilize his human visual cognitive ability and understand 
the states easily. The presentation of a lot of values by simply mapping data into graphical attributes 
does not make full use of a man s cognitive ability and that means the failure of effective visualization. 
It is important to present data in a form that a human being is familiar with and easily understands. 
A human being lives in a dynamic world microscopically and is familiar with motion in a dynamic system. 
Thus we have considered utilizing or exploiting the humihr ability to recognize easily balanced states, 
imbalance states and natural (unforced) movement in a dynamic system. We propose an animation method 
of state values where we map the values into quantities of states in a dynamic system model, then simulate 
the dynamic system, and make the result of simulation visible and audible. This animation shows changes 
in balance between computation and communication as movement in a familiar dynamic system where balance 
is important in tuning the performance of a parallel program. Animation is performed as shown in Figure 
1. We will explain the procedures of animation in turn. I Modeling I 1 2.1 Modeling First, we need to 
determine the dynamic system to be used, and mapping of elements and structures in a parallel computer 
to bodies and forces in the dynamic system. We can model a parallel computer based on its network topology. 
For example, processor elements (PEs), computational load of a PE, a communication network and amounts 
of communication in a parallel computer can be mapped to bodies, mass of a body, a spring among bodies 
and attractive forces among bodies respectively. In this mapping, as the computational load of a PE grows, 
mass of the body corresponding to the PE becomes larger and the movement of the body becomes smaller. 
This behavior lets us confirm visually whether the load of computation and the amount of communication 
are balanced or not in a parallel computing environment. Table 1 shows examples of forces and their effects 
which are used in mapping a PE into a body. Mapping to a dynamic system does not necessarily refer to 
 precise mapping to the real world. We use forces that are impossible in the real world if they are appropriate 
to visualization. For example, one-directional force between bodies violates the law of action and reaction, 
nevertheless, one-directional force can be used. Table 1: Examples of forces used in mapping a computing 
node to a body in a dynamic system Communication status can be shown as distance between bodies if attractive 
(external) External Force force between bodies is exerted depending upon the amount of communication 
Repulsive Repulsive force is used to avoid bodies from Force overlapping Frictional Friction smoothes 
movement and reduces Force oscillation of a body without external force Elastic Force Elastic force is 
used to maintain structures of Inetwork topology in such a way as to exert al I spring-like force along 
a communication linkl between computing nodes. 2.2 Simulation Next, we formulate equations of motion 
to simulate the dynamic system model. The equations of motion can be derived from energy and dissipation 
function of the system, or   fR5bE Figure 1: Procedure of Animation can be formulated directly using 
forces among bodies, The motion in the system is simulated by solving the equations of motion (that is, 
an initial value problem of ordinary differential equations) numerically. The dynamic behavior of the 
system depends on the parameters of equations of motion. The appropriate selection of values to the 
parameters can emphasize the kind of movement of a body that the user is interested in. That can be regarded 
as customization. 2.3 Visualization The simulation result can be visualized using usual visualization 
techniques. Not only visualization techniques for performance debugging but also scientific visualization 
techniques can be used. We have used VRML 2.0 and its browser to visualize and animate the result of 
simulation. A body and a link in simulation are represented by a sphere (or a cube) and a cylinder (a 
line) respectively. The motion of an object is controlled by interpolators and scripts. 2.4 Auralization 
Orientation of sound in 3-D space is used to locate the sound source. A human being carsdistinguish an 
angle of 3 degree between the sound source and the center line of his face where the distance between 
the source and him is large[ 12]. Sound from an object in animation informs a user of where it is and 
how it is moving. Sound is helpful to inform the user of notable changes that may be occurring to objects 
that are invisible because they are hidden by an object in front. Sound nodes in VRML 2.0 are used to 
give orientation of sound in 3-D space. We refrain from using continuous sound because a human being 
cannot distinguish a lot of different kinds of sound simultaneously. A lot of different kinds of continuous 
sound cancel the merit of using sound orientation. We basically use sound when changes of data (derivatives 
of data) exceed a range or reach a value. 2.5 Interaction The viewpoint can be changed easily using 
the navigational commandsof a VRML browser. A user can choose a favorite browser that is suitable to 
his needs. Scripts in VRML 2.0 are used to accept user operations and control graphical objects. In the 
following sections, we will describe our system using snapshots of animation. 3 A PROTOTYPE ANIMATION 
SYSTEM USING VRML 2.0 We developed a prototype animation system that simulates a dynamic system and 
visualizes the result in 3-D with sound. A simulator that solves equations of motion based on the trace 
data of parallel program execution is written in the C programming language. The numerical result of 
simulation is converted into a tile in VRML 2.0 format using a Perl[ 14] script program. Animation is 
performed by a VRML 2.0 browser (SGI Cosmo Player 1.0 ~2). We will show snapshots of animation in the 
following sections. Examples that we show are animation of communication imbalance caused by load distribution 
methods and animation of communication state in a network with 3-D topology. ,.-.\ ,,--,, (a) Random 
Distribution (b) Ring-like Distribution  Figure 2: Load Distribution Methods  4 COMMUNICATION IMBALANCE 
CAUSED BY LOAD DISTRIBUTION METHODS We show snapshots of animation based on trace data when the Fibonacci 
function is executed on a parallel computer. On a parallel computer, a subtask or child function of the 
Fibonacci function is executed on a different PE from the parent fimction PE is executed. Snapshots in 
this section show differences of communication balance by load distribution methods. A load distribution 
method is determined by a node that is used to execute a child function of the Fibonacci function in 
a parallel computer. We show the result of random load distribution and ring-like load distribution. 
These load distribution methods are shown in Figure 2 where a circle and a line represent a PE and a 
communication link respectively. We took trace data every 0,1 second while the Fibonacci function with 
the argument 22 is executed on an NEC Cenju-3 parallel computer with 8 PEs. Communication latency among 
PEs is uniform, thus, two load distribution methods can be applied naturally. 4.1 Modeling We model a 
dynamic system to investigate how communication imbalance differs depending on load distribution methods. 
APE in a parallel computer is mapped to a body in the dynamic system. The repulsive force, attractive 
force and frictional force are used to model the dynamic system. The mass of bodies is constant in this 
case. First, the repulsive force that is inversely proportional to the square of distance between bodies 
is applied to separate bodies in a stable state. Unless the repulsive force is used, all bodies may gather 
at a single point and no more movement can be distinguished. Secondly, the attractive force (external 
force) of a sender towards a receiver is exerted. The strength of the attractive force is proportional 
to the amount of transferred data. Force at the sender and force at the receiver is different and asymmetric. 
This asymmetry affects the motion of a body, and the motion of bodies shows differences of communication 
quantities among PEs. Bodies move to a center of balance where the quantities of mutual communication 
are equal. If one direction of communication is greater than the other, the motion of bodies loses their 
balance. If bodies are placed in a balanced state and the attractive force is exerted, the bias of the 
result shows the bias of communication. Lastly friction is caused that is proportional to the velocity 
of a body. Friction reduces the oscillation of a body and prevents the energy of the system from increasing 
indefinitely. If friction is not used but external forces are exerted, the movement in the system becomes 
greater and greater. This makes it diftlcult for us to recognize the movement and balance of bodies in 
the system. That leads to failure of performance debugging. Equations of motion in the case of this modeling 
are given by the next formula. Terms on the right hand side are repulsive forces, attractive forces and 
frictional forces from the left in that order. x, is a coordinate of body i. Fti(t) represents external 
force exerted from body i to body j at time t. Let N be the total number of bodies. R and ~ are constants. 
1x, -XjIrepresents the distance between x, and xj ~=R~ -X 3 +~q,(t).fl~ ,=] x, Xj ,=] j++ J#i (a) Initial 
State (b) Random Load Distribution (c) Ring-like Load Distribution  Figure 3: Snapshots of Animation 
Based on Traces of Two Load Distribution Methods: The disc with a hand in the right of figures is a clock 
representing simulation time. 4.2 Snapshots Snapshots of animation based on the above modeling and trace 
data are shown in Figure 3. Each PE is represented by a sphere. In this example, sizes of spheres are 
the same. The apparent size of a sphere depends on the distance from the viewpoint. It is possible to 
change the size and color of a sphere based on the computational load of a PE, however, that change of 
size and color obscures distance in this figure. Therefore we did not change the size and color of spheres 
in these snapshots. A disc with a hand in the right of figures as in Figure 3 is a clock representing 
simulation time. Clicking the disc controls TimeSensor in VRML 2.0, and stops and starts passage of simulation 
time alternately. This control is programmed by TouchSensor nodes, Script nodes (vrrnlscript). Sensor 
nodes and Script nodes are essential for interaction. Objects in animation are defined using prototyping. 
Prototyping reduces the amount of description required when using objects. Motion of objects is described 
by interpolator nodes and transformation nodes. Basic parts of description of this animation are compact. 
The basic parts are comprised of less than 150 lines. The rest of the description consists of definitions 
of objects (DEF), interpolators and ROUTE statements. The basic parts are the same in this type of animation 
and modeling. The rest is generated by our system and is based on the result of simulation. Figure 3(a) 
shows the initial state. Spheres are arranged at vertices of a cube. When a PE where a child function 
to be executed is selected randomly (random load distribution), communication among PEs is almost uniform 
and attractive forces among bodies is exerted uniformly. Therefore bodies converge on a center of balance 
of the initial state as shown in Figure 3(b). When a PE for a child function to be executed is fixed 
and the relationships between a PE for a parent function and a PE for a child fimction constitute a ring, 
attractive force is exerted only between neighbors and communication is imbahtnced in both time and space. 
Thus the snapshot of a ring-like load distribution is not balanced as shown in Figure 3(c). We can understand 
easily that random load distribution is more appropriate than ring-like load distribution. We can see 
spatial imbalance of communication by looking at a snapshot. Moreover we can see that there is temporal 
imbalance of communication by looking at the change of size of the whole system. 5 COMMUNICATION STATES 
IN A NETWORK WITH 3-D MESH TOPOLOGY Let us consider a parallel computer that takes 3 x 3 x 3 computational 
nodes and communication links in 3-D mesh topology as shown in Figure 4 (a). Elastic force is exerted 
(a) Initial State (b) Balanced Communication Load (c) Imbahutced Communication Load (Light Computational 
Load) (d) Imbalance Communication Load (Heavy Computational Load)  Figure 4: Snapshots of Animation 
Based on Pseudo T! ace Data on a Parallel Computer with 3-D Mesh Topology Network. between neighbor 
nodes to maintain the structure. Communication between nodes applies attractive force to them. The attractive 
force is symmetrical and obeys the law of action and reaction, Symmetrical forces are used to simplifi 
the equations of motion. Asymmetrical force can also be used as the attractive force. Weak repulsive 
forces are exerted among bodies. Unless repulsive forces are used, the structure is not restored to its 
original form when external forces are not exerted. This is because there are some stable forms which 
are different from the initial form if repulsive forces are not exerted. Repulsive forces are used to 
restore the structure. Frictional force is caused that is proportional to the velocity of a body. As 
in the previous example, frictional force smoothes the movement of bodies and prevents oscillation of 
the system. The mass m,(t) of body i depends on its computing load. Equations of motion are given in 
the next formula. Ci represents a set of neighbor nodes of node i. Let L be a natural distance between 
neighbor nodes where no elastic force is exerted. FtiIt) represents external (attractive) force exerted 
from body i to body j at time t. k, R and P are constants. I x, -Xj I represents the distance between 
xl and j. d2xi 1 Xt Xj = k L X1 X, +FJ(t) z ( dt2 ~i (f) j<f x, Xj [{II 1 1 Figure 4 shows snapshots 
of animation based on the above modeling and pseudo trace data. A sphere and a cylinder represent a processor 
element and a communication link respectively. Volume of a sphere is proportional to the mass of it. 
 Figure 4(a) shows the initial state where spheres are arranged at intersection points of 3-D Mesh. When 
communication load is balanced, the shape of the 3-D mesh structure is almost maintained as shown in 
Figure 4(b). We can see that the communication is imbalance by looking at the distortion of the 3-D mesh 
structure in Figure 4 (c) and (d). Similar to Figure 3, objects in the figure are defined using prototyping. 
Therefore basic parts of this VRML 2.0 world are also small, however, description of motion of this animation 
is more complex than Figure 3 because motion control of a cylinder needs more interpolators than that 
of a sphere. The size of description sometimes becomes fairly large. We think that scripts to calculate 
length, orientation and rotation of a cylinder will reduce the size of description, and we have a plan 
to do it. 6 DISCUSSION It is possible to display amounts of communication among nodes in line graphs. 
If nodes can communicate with one another, the number of links grows quadratically as the number of nodes 
increases. It is difflcuh to understand the balance of the whole system from a lot of graphs. It is also 
possible to have nodes and links of a parallel computer arranged in 2-D or 3-D depending on its topology, 
and graphical attributes like width and color of a link can be varied by the amounts of computational 
load and communication. This type of visualization also has difficulties when the number of nodes is 
large. Conventional 3-D visualization for performance debugging does not filly utilize the human cognitive 
ability of recognizing slight differences in familiar objects. Our proposed animation helps to understand 
the spatial and temporal imbalance of communication in a parallel computing system broadly even when 
the number of PEs is large. If one wants to analyze details, one can use conventional figures such as 
a line graph and a pie chart. We consider animation where the number of PEs is very large. First, we 
consider the computational complexity of dynamic system simulation. The complexity of computation of 
forces among bodies is 0(N2) where N is the number of bodies. However, Barnes-Hut algorithm [l] can reduce 
the complexity to O(N log N) with reasonable accuracy where force between PEs decreases inversely proportionally 
to the square of distance between them like gravitational force. The algorithm makes simulation of a 
dynamic system practical where more than one thousand bodies are contained. Next, we consider visualization. 
When N is very large, it may be difficult to distinguish the slight movement of bodies clearly and to 
recognize the balance of the whole system. We think the system can be visualized as clouds and smoke 
effectively[l 1] if display of individual bodies is inappropriate because there are a lot of bodies. 
Mappings used in modeling in this paper are just examples. Other mappings would be possible and useful. 
In addition to mapping into a dynamic system, we think that the use of color and trail of movement are 
useful in visualizing the simulation result. Our method shows change of states by movement of objects. 
This enables us to animate not only performance data but also execution status or control flow of a program 
In other words, our method can be applied to algorithm animation. Moreover, if frictional force is strong 
in algorithm animation, movement is averaged, particulars of each movement are not distinguished, and 
frequently moved parts can be easily distinguished by looking at the averaged variation of the move. 
Most performance visualization systems use specialized graphical software. They do not often work on 
different environments. Our system uses a VRML 2.0 browser as an animation player and thus it works on 
various hardware and operating system platforms. This makes it possible to do performance debugging cooperatively 
in remote and distributed environments.  7 RELATED WORK Spring model[8] and Force-directed placement[4] 
have studied static planar graph drawing. They are similar to our method in relation to visualization 
by use of a dynamic model. Their drawings are based on a stable solution of the system, however, our 
animation is based on solving equations of motion. This is one of the differences between graph drawing 
and our animation. Furthermore, our proposed method changes external force and mass of objects depending 
on trace data of message transfer and computational load on nodes. This is another of the differences. 
Sequential display of stable solutions of the system at some interval can not express natural movement 
because a stable solution is independent of time. A slight force can affect a stable solution largely. 
Therefore simple animation of stable solutions may cause unnatural and sudden movement thus losing track 
of movement. The method solving equations of motion does not cause such unnatural movement. 8 CONCLUDING 
REMARKS This paper proposed animation for performance debugging of a parallel program that utilizes the 
human cognitive ability, described a prototype animation system, and showed snapshots of animation examples 
for performance debugging and the effectiveness of our proposed animation. Animation of the system is 
based on dynamic system modeling, simulation, visualization and auralization. The system uses VRML 2.0 
to make performance data visible and audible. Interoperability and compatibility of VRML helps us to 
do performance debugging cooperatively in distributed environments. New features such as interaction, 
scripting and prototyping of VRML 2.0 enable us to make a prototype system quickly and present animation 
based on our modeling. We have a plan to develop an integrated visual performance debugging system for 
distributed and cooperative performance debugging. The system allows us to specifi modeling and mapping 
interactively, it then simulates a model and it animates the result of simulation in real-time. Furthermore, 
the system is written in VRML 2.0 and the Java programming language[6]. Java enables the system to be 
distributed easily via the Internet, and VRML 2.0 helps us to share animation in distributed environments. 
Thus the system makes it easier to cooperate when doing performance debugging in remote and distributed 
environments.   References <RefA>[1] Barnes, Josh and Piet Hut, Hierarchical O(N log N) Force-Calculation 
Algorithm, Nature, VOI.324, pp.446­449, Dec. 1986. [2] Bell, Gavin, Rikk Carey and Chris Marnn, The Virtual 
Reality Modeling Language Spect$cation Version 2.0, WD ISO/IEC 14772, Aug. 1996. [3] Chernoff, Herman, 
The Use of Faces to Represent Points in k-Dimensional Space Graphically, Journal of the American Statistical 
Association, VOI.68, No.324, pp.361 ­368, June 1973, [4] Fruchterman, T, M. J. and E. M. Reingold., Graph 
Drawing by Force-directed Placement, Sojiiare -Practice and Experience, Vol. 21, No. 11, pp. 1129-1164, 
1991. [5] Gantt, H. L., Organizing for Work: Machine Record Charts, Progress Charts and MarI Record Charts 
Show What to Do to Get Production, Industrial Management, VO1.58, No.2, Aug. 1919, pp.89-93. [6] Gosling, 
James, Bill Joy and Guy Steele, The Javaw Language Specljkation, Addison-Wesley, 1996. [7] Heath, Michael 
T., Allen D. Malony and Diane T. Rover, Parallel Performance Visualization: From Practice to Theory, 
IEEE Parallel &#38; Distributed Technology, Winter, 1995, Vo]. 3, No. 4, pp. 44-60. [8] Kamad~ T., and 
S. Kawai, Algorithms for Drawing General Undirected Graphs, Information Processing Letters, Vol. 31, 
No. 1, pp. 7-15, 1989. [9] Kolence, Kenneth W. and Philip J. Kiviat, Software Unit Profiles &#38; Kiviat 
Figures, Performance Evaluation Review, VO1.2, No.3, pp.2-12, Sept. 1973. [10] Reed, Daniel A., Keith 
A. Shields, Will H. Scullin, Luis F. Tavera and Christopher L. Elford, Virtual Reality and Parallel Systems 
Performance Analysis, IEEE Computer, VOL28, No. ] 1, pp.57-67, NOV. 1995. [11] Reeves, William T., Particle 
Systems: Techniques for Modeling a Class of Fuzzy Objects, Computer Graphics (SIGGRAPH), VOL17, No.3, 
pp.359-376, 1983. [12] Schmidt, Robert F. (cd.), Fundamentals of Senso~ Physiology, Springer-Verlag, 
1986. 13] Waheed, Abdrd, Bemd Kronmuller, Roomi Sinha, Diane T. Rover, Toolkit for Advanced Performance 
Analysis, Proc. of IEEE International Workshop on Modeling, Analysis, and Simulation of Computer and 
Telecommunication Systems, pp.376-380, 1994. 14] Wall, Larry and R. L. Schwartz, Programming Perl, O 
Reilly &#38; Associates, 1991.  </RefA>
			
