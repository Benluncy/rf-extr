
 Permission to make digital or hard copies of part or all of this work or personal or classroom use is 
granted without fee provided that copies are not made or distributed for profit or commercial advantage 
and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, 
to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee. &#38;#169; 
1980 ACM 0-89791-011-7 $5.00 we define the safety of pointel rotation when applied to linear lists and 
trees. Then, we extend this definition to arbitmry pointer data structures and show a decision procedure 
to check safety. In section 7 we show two examples, list marking and list copying programs written using 
rotations and slides. We examine how we can directly code the algorithms using these operations and safety 
checking algorithms are useful. passing parameters by VAR parameters is crucial to the definition. This 
ensures that all the arguments are evaluated in parallel, before any assignments take place. Therefore, 
these operations can also be defined by multiple assignments: Rotate: procedure(var xl, x2, ... . xn:T) 
= begin x1+x2, x2+x3, ... . Xn+-xl end Slide: procedure(var xl, x2, ... . xn:T) = begin X1+X2, x2+x3, 
... . Xn.,l+xn end. 2. History The first time I was exposed to pointer rotation was when Jefferson told 
me [Jefferson] that pointer swapping is a nice opemtion for structuring complex operations. Flon [Flon] 
showed me an example of a priority queue, where insertion and deletion are implemented by a set of pointer 
swaps. Later I wrote a program for the Deutsch-Schorr-Waite algorithm [Schorr&#38;Waite] in 1978 and 
discovered that the pointer manipulations in the program can be fully described by three-way pointer 
rotation, a generalization of pointer swapping. I asked Peter Deutsch whether he knew this, and he told 
me that he realized this fact when he invented the marking algorithm but he never published it. Since 
rotation is a kind of permutation, the question arises whether rotation should really be defined as a 
composition of swaps. (There is a well-known theorem that any permutation can be represented by a composition 
of swaps.) However, Rotate(x, x?.Next, y) is not equal to Swap(x, xt.Next); Swap(xT.Next, y) as shown 
in Fig. 1. This is because the value of x in the first Swap is not the same as the value of x in the 
second Swap, In a recent conversation, Jim Horning told me that Gries [Gries] and Dijkstra had been studying 
multiple assignments, but almost all of their examples can be described by rotations. The results in 
this paper are, therefore, applicable to their examples, 4, Deutsch%chorr~Waite marking algorithm We 
will observe how these operations make this marking algorithm compact. The original algorithm using pointer 
assignments is (comments are placed between bmces): 3. Definition We which will are analyze defined the 
following in terms of two pointer operations, equivalent procedures: Romte: procedure(var xl, x2, ... 
. xn:T) = begin ~ar w:T; w: =x1; xl: =x2; ,.. ; Xn: =W end Slide: procedure(var xl, x2, ... . xn:T) begin 
Xl: =X2; X2: =X3; ... ; Xn-l:=xn = end where locations of variables xl, X2, ... , Xn are all distinct 
from each other for both operations. We note here that 2 { Deutsch-Schorr-Waitealgorithm ] begin z:=aO;x: 
=NIL; whiletrue dobegin { left descend} while z#NIL A zt.m= Odo beginz?.m:= 1;w:= z?.hd;z?.hd:=x; x: 
=z; Z:=W end; { right ascend} while x#NIL A x?.fl= 1do beginw:=x?.tl; xt.tl:=z; z:=x; x:=Wend; if x = 
NIL thenexit; { lcft$~=h: } .:; W: =x?.hd; x?.hd:= Z; Z: =xT.tl; xT.tl: = W end; end. The version written 
using pointer rotations is: { Improved D-S-W algorithm} begin z:=aO:x: =NI~. whiletrue dobegin while 
z#NIL A zt.m=O do beginmm: =1; Rotate(z?.hd,x, z) end; while x#NIL A xt,fl= 1doRotate(x,xt.tl, z); if 
x = NIL thenexit; xt.fl: = 1;Rotate(xr.hd,z,x?,tl) end; end. Twelve pointer assignments are replaced 
by three pointer rotations. Each node is visited three times corresponding to: top-to-left scan, left-to-right 
scan, right-to-top scan of preorder traversing. In the abi ve program each rotation accomplishes one 
scan of a node. The first rotation is the top-to-left scan, the second rotation is the right-to-top scan, 
and the third rotation is the left-to-right scan. This example is reviewed again in section 6. 5. Properties 
of Rotations I wondered why pointer rotation is convenient in writing algorithms such as list marking. 
I conjectured that there must be some measures associated with the graph structures of pointers that 
remain invariant over rotation operations. obviously, a single pointer assignment will change most such 
measures. If I could find such measures, and show that their invariance would guarantee the safety of 
a class of prograins like marking algorithms and balanced wee algorithms, this would be strong mathematical 
evidence of the safety of pointer rotation. The first conjecture was that the number of loops in the 
graph would remain invariant under rotation, Even though this conjecture looks promising and attractive, 
a counter-example was quickly found. Suppose y points to a linear list, then Rotate(y, y?.lyext) will 
introduce a loop such that the previous pointer yt.Next will point to itself (Fi:g. 1). 3 )0  C/ $ 
Fig. 1 Effect of Rotate(y, yt.Next) However, some properties that do hold are; Property 1: (Invariance 
of reference counts) The number of pointers to a record will remain the same no matter how many rotations 
are performed. Therefore, if every record has a reference count field, the value of which remains constant. 
Property 2: (Non-circularity of trees) Rotations are often applied to linear lists and trees. What is 
unique about these structures is that the reference counts of all the records are always one. Therefore, 
from property 1, after any number of rotations, the reference count of each record is still one. Hence, 
the structures reachable from the roots remain non-circular and nonÂ­sharing. What will happen is that 
some records will form loops and become unreachable from roots (see the example of Fig. 1). (It is easy 
to show that if the reference counts of all records are one and there is a loop, no records in the loop 
are reachable from outside pointers.) A moral here is that always u:serotations when yoL~are manipulating 
linear lists and tr~. Sketch of proofi We will prove here that if all the records reachable from a pointer 
x have reference counts of one, then the data structure is a tree. Suppose it is not a tree, then there 
is a cycle or a sharing. If there is a cycle then either any member of the cycle is not reachable from 
x or there is a record with reference count more than one. We will enumerate the values of pointers (address 
of records) along all the possible paths. This enumeration may terminate because we took the path on 
which we hit a record from which no pointers are emanating. in this case there is no circularity. If 
it does not terminate, there are addresses which appear more than once. Then the first address in this 
enumeration which appears more than once is the record with reference count more than one. I EM.!QLM 
Consider two linear lists which are pointed to by x and y. To move one record from the head pointed 
by x and to the list pointed by y is var w; w : = xt.Next; xt.Next : = y; y ;= x; x := w;  but the program 
with rotation is Rotate(x, xT.Next, y). Similarly, reversing a linear list is succinctly written as: 
Y := NIL; while x#NIL do Rotate(x, xT.Next, y) { y points to the reverse of the original list } Property 
3: (Rotatability of arguments) Furthermore, the arguments can be rotated without changing the effect, 
For example, in 3-way rotations, Rotate(x,y,z), Rotate(y,z,x), and Rotate(z,x,y) all have the same effect. 
As you can see, we can partition n-way rotations into equivalence classes according to their effects. 
For n-way rotations there are n! syntactically different rotations and (n-l)! equivalence classes, each 
of which consists of n rotations. Therefore, even though there are 6 syntactically different rotations 
of three arguments, there are only two distinct classes of 3-way rotat m. Once we decide that we can 
create an algorithm by rotation, there is very little chance of introducing bugs. We will see why this 
is particularly useful in the case of the D-S-W marking algorithm in section 7. Property 4: (Closure) 
Here we mean by closure that some number of applications of rotations will restore the original data 
structures. If all the arguments of rotations are simple variables, it is easy to show that this property 
is true using simple facts from combinatorics. However, the application of Rotate(y, yt.Next) to a linear 
list damages the data structure permanently and no rotations will restore the original data structures. 
Therefore, we need some premise about kinds of rotations which we can operate, in order to assert that 
there are applications of rotations to restore the original data structures. We need some more definitions 
in order to express the closure property, In particular the safety property to be introduced in section 
6 is closely related. We state the theorem without the definition of safety and prove it in the appendix. 
(This property was conjectured and suggested to me for investigation by Al Perlis.) Theorem Suppose we 
have operated rotations on some data structures, and they are all safe rotations. Then, there is a sequence 
of rotations, such that the applications of them will restore the original data structures. Property 
5: (Completeness of pointer rotation) Finally, we would like to know what can be done by pointer rotation 
and what cannot be done. Facts essential to this question are: If a straight-line part of an algorithm 
reciuires that the reference counts be the same at the entry and at the exit, and no new records are 
introduced, the part is implemented by one n-way rotation. Furthermore, if the number of records reachable 
from pointer variables is the same at the beginning and at the end of computation, and if the reference 
count of each record is the same, then there is an equivalent program which uses only pointer rotations. 
 Pointer rotations, however, cannot do all pointer manipulations. Using pointer assignments to augment 
the power is not desirable. For example, X:=y; y:=z; z;=w; w;=u cannot be written using rotations unless 
one compromises efficiency and writes Rotate(x,y,z,w); w:= u, An operation which is both universal and 
compact is the pointer slide operation. The above example can be written as Slide(x,y,z,w,u). This is 
as powerful as primitive pointer assignment, since x:= y is equivalent to Slide(x,y). 6.Safety of Rotations 
Properties investigated in the previous section are mostly facts invariant under rotations. What we will 
see in this section are facts not necessarily be invariant, but facts easily checkable whether it holds 
or not and furthermore they will increase the reliability of programs. As we observed in the previous 
section, if rotations are applied to trees, some records previously reachable from the roots will become 
unreachable. In most of the cases losing a record in such a manner is a bad practice. These unreachable 
records have to be eventually reclaimed by garbage collector, and in many reference counting garbage 
collection schema they are simply forever lost. Both of them add to the cost of computation. In the case 
such as Rotate(y, yt.Next), a conscious programmer will write Rotate(y, yt.Next, FreeList) instead to 
free the record explicitly. Since losing a record by rotation over trees is a bad practice, other caused 
by some program errors, we call rotations to be @ if no records are lost. There is also a simple method 
to check whether a given rotation is safe simply write a graph representing pointers. This method does 
not work unless every pointer operation is a rotation, since it is impossible to check whether a given 
structure is a tree. Let us analyze what we meant by safety of rotations on arbitrary data structures. 
Consider the operation Rotate(x, z, xt.tl) on an arbitrary data structure. In the case where x#z#x?.tl#x, 
the data structures before and after the rotation are shown in Fig. 2. Note that only the pointers and 
records appearing in the arguments of Rotate(x, z, xt.tl) are shown in this figure, If there are no other 
pointers, this operation is unsafe since the record A is lost. Fig. 2 Effect of Rotate(X, Z, X*.tl) 
In arbitrary data structures there may be many other pointers to A, B, and C. Therefore, it may be possible 
to still reach A from some other pointers. However, checking whether there is a pointer to a certain 
record in an arbitrary data structure is intractable. Therefore, we will only consider pointers and records 
explicitly mentioned in the arguments of rotation. We define that a record is lost in rotation if it 
is not reachable from any program variable appearing in the arguments through pointers mentioned in the 
arguments. We say a rotation is safe if it does not lose a record in the above sense. We will observe 
in the next section whether this definition of safety is a useful one. We will see that all the rotations 
are safe, and all the mistakes by rearranging arguments are unsafe. Therefore, simple errors are detectable. 
7. Verification Method of Safety We will show in this section an algorithm to decide whether a pointer 
rotation is safe. This corresponds to research in array bound overflow checking [Suzuki&#38;Ishihata]. 
These data structures require some invariant to be maintained over operations on them, which gives rise 
to semantic checking-verification of the correctness of operations without user supplied assertions. 
 7.1 Notation Graphical representation used in Fig. 2 is a very convenient way to capture two important 
attributes of pointers values of pointer expressions and locations where these values are stored. In 
this paper all the pointer values are addresses of records, and locations of these values are ag~in addresses 
of records or of program variables. Therefore, we will give tmique names to records (denoting addresses 
of records) and invent notations to capture the meaning of pointers. We use capital letters for these 
names of records. The following notation is used to represent a pointer variable x: x-B which states 
that the pointer variable x points to record B. If the value of x is NIL, it is represented as x+NIL. 
 When B denotes a record which has two fields hd and tl, we can use B.hd+C /l B.tl-iD which states that 
the value of hd field is C and the value of tl field is D. Combined with x-+B, we can infer that x~.hd 
has value C. The following facts are direct consequence of the notation: 1) x-iB = (3C)[X+B A B.s+C] 
for all valid selectors .s of xt. 2) x-tBAy+D?x=y*B=D 3) A.s+B A C.S+D /l A=C ==) B=D We are not going 
to address expressibility of this notation for arbitrary programs. However, this notation is sufficient 
for describing the effect of one rotation on finite number of poiriters and records. We say that record 
B is reachable from a program identifier x if x+B is true, or there is a sequence of records Al, A2, 
... , Ai such that x--iA~ A .Il~.s~+A2 A A2.s2+A3 A ... A Ai.si~B. 7.2 Representation of Rotation Using 
this notation, we can represent data structures before and after rotations. Consider the application 
of Rotate(xt.hd, z, xt.tl). Pointers involved are: x, z, x~.hd, and x?,tl. We introduce record names, 
B, C, D, and F, and can describe a state before the rotation: x-tB A B.hd+C A B.tl+D A ZAF. Then the 
result state of the rotation is: x+B A B.hd+F /l B.ti+C A z-tD. We say that the rotation is safe if 
all the records are reachable from program identifiers, or the rtcord is the origin of a program identifier. 
In the above example we assumed that all the pointers have distinct values; that is x#z ~ x#xt.tl A x#z 
A z#x?.hd A z+x t ,tl A xT.hd#xA.tl. In order to say that this Pointer rotation does not lose a record 
we have to show that it does not lose a record for all the cases. For example, if we assume X#Z A x#xT.tl 
A z#x~,hd A z+x~.tl /? x?.hd#x~.tl but x=x~.hd, then the state before the rotation is: x+B A B.hd+A A 
B.tl+D A z+F. The result state of the rotation is: x+B A B.hd+F /f B.tl >A A z-+D and again this is 
safe. 7.3 The Decision Procedure The example in the previous section suggests an afgorithm, which check 
whether the rotation is safe using the notation for all the cases of equality and inequality relations 
among pointers. The number of distinct cases can be defined by all the different partitions of pointer 
values. The number of partitions of n objects is Bn, the Bell number of n, which is asymptotically close 
to the factorial of n. The algorithm is shown below: Step 1: Enumerate all the pointer expressions appearing 
in the arguments of rotation. Assume there are n expressions. Step 2: Obtain all the partdions of n 
expressions. For each partition do the following steps 3 to 7, Step 3: Obtain the conjunction of equalities 
and inequalities among expressions according to the partition. If two expressions are in the same set 
make them equal, if they are in different set make them unequal. Step 4: Because pointer expressions 
are not independent (x and xt.hd are examples of dependent expressions), some of the conjunctions of 
these equalities and inequalities are unsatisfiable. For example, x = y A xt.hd#y$.hd is unsatisfiable. 
Check to see if the obtained conjunction is unsatisfiable. If so, go to step 3 and repeat with the new 
partition. Step 5: Construct the conjunction representing reachability like the one at the end of section 
6.2. Step 6: Operate rotation on this conjunction and obtain the result conjunction. Step 7: Check if 
the formula indicates safety of rotation. If safe and exhausted all the partitions, terminate with the 
result safe. Othelwise go to step 3 and repeat with the new partition, If it is not safe, terminate with 
the result w-@e. There are two simplifications of this algorithm. First, it is not necessary to consider 
the partition where all the pointers take the same value. Since any rotations will keep the values of 
pointers the same, they are always safe. The other simplification is observed by the fact that if all 
the arguments are simple variables the change of the value of any pointer expression does not affect 
the values of the other pointers. However, it is possible that some variable x is an alias of another 
variable y, the change of x will affect y even though they are syntactical] y distinct. This is avoided 
by the fact that all the locations of pointers must be distinct. Actually, we can state a little stronger 
fact. For the rotation Rotate(el, e2, ... . en) if any argument ei is not an initial section of all the 
other arguments and there are no aliasing, the rotation is safe. For example, Rotate(xt.hd, xt.tl, z) 
is a safe rotation, assuming x is not an alias of z.  7.4 Application of Safety Check We will examine 
how these definitions of safety are useful in actual example. The following is the D-S-W marking algorithm. 
Let us look at ibis example again and see how the decidability results we obtained can be applied: begin 
z:=aO;x:=NIL; 100D while z#NIL A z,m=O (to begin zt.m: = 1; Rotatc(zr.hd, x, z) end: whilex#NII. Ax.fl=1doRotate(x,x?.tl,z); 
if x = NIL then exit; xt.fl: = 1; Rotate(xT.hd,z,:v.tl) endloop; end. For the first rotation Rotate(z*.hd, 
x, z), there are five cases to consider depending 0[1 partitions of x, z, and z~,hd. Case 1. <x>, <z>, 
<z~.hd> x+A A z+B /l B.hd+C The result is x+B A z-c A B.hd-+C Case 2. <X>, <Z, z?,hd> x+A A z-B A B,hd~13 
The result is x*B A z+B A B.hd.+A Case 3. <Z>, <X, z~.hd> x+B A z+A A A.hd-.)B The result is x+A A z+B 
A A.hd-+B Case 4. <zt.hd>, <x, z> x+B A z+B A B.hd+A The result is x+B A z+A A B.hd--iB Therefore, in 
all cases all the records are reachable from x or z and the rotation is safe. Another advantage of using 
rotation here is that the only different rotation is Rotate(z~,hd, z, x), which is unsafe. Therefore, 
there is very little freedom of what one can do to make the algorithm work. Furthermore, verification 
becomes simple, Each record is scanned three times by rotations in the order: Rotate(z~,hd, x, z), Rotate(x, 
xt.tl, z), Rotate(xt.hd, z, xt.tl). But it is very easy to see that successive applications of these 
three operations will restore the values of x, z, z$,hd, and z~.tl. Therefore, it is not difficult to 
show that all the pointers have the same values as at the beginning when the program terminates, Finally 
we see that the definition of safety is actually very useful in locating bugs. Consider all the rotations 
of the above example: Rotate(zt.hd, x, z), Rotate(x, xt,tl, z), and Rotate(xt.hd, z, x?.tl). Kinds of 
bugs which might occur are wrong ordering of arguments. Because of rotatability of arguments, there are 
only two cases for each rotation. They are Rotate(zt,hd, z, x), Rotate(x, z, x~.tl), and Rotate(xt.hd, 
X 1 .tl,z). Except for the last case, which is safe no matter what is the order of arguments, they are 
all unsafe. 8. Example (Robson s List Copying Algorithm) We will show how a more complex algorithm than 
marking algorithm can be written using rotations and slides, The algorithm we examine is a list copying 
algorithm invented by Robson [Robson]. The major characteristics of this algorithm are that no extra 
storage is the computation time is linear. The algorithm consists of two phases: left-to-right scan phase 
and right-to-left scan phase. The first phase creates a copy cell for each cell and divides cells into 
four classes according to kinds of pointers they have, f!his information is stored in the right pointer 
field of the original cell. The classification of cells according to types of cells is as follows: O 
-> L: back pointer, R: back pointer 1-> L: back pointer, R: forward pointer 2-> L: forward pointer, R: 
back pointer 3-> L: forward pointer, R: forward pointer The second phase scans the tree right-to-left 
and rewrites pointers to the correct values. Therefore, each cell is scanned six times three times in 
the first phase and three times in the second phase. The program for this algorithm is shown below. A 
phenomenal fact is that, just like D-S-W marking algorithm, pointer operations for scanning once cell 
on one direction are described by one rotation or one slide, except when a new copy cell is created. 
{ Robson salgorithm } type node = record l,r: T node end; var markO, markl, mark2, mark3: tnode; function 
markof = (n: ? node): integer; { ~&#38;ns 4 if its unmarked, otherwise returns the mark } markof: = 
4; if n = markO then markof: = O else if n =-markl then rnarkof: = 1 else if n = mark2 then markof: = 
2 else if n=mark3 then markof: = 3  end; function marked = (n:tnode): Boolemr; { returns true if and 
only if n is mark.-d } begin marked: = markof(n)<4 end; function copyof = (n:vmode): *node begin if n=nil 
then copyof: = nil else copyof: = nt.1 end; procedure mark = (n: Tnode, I: integer); begin case markof(n) 
+ I of O:n?.r: = markO; 1: n?.r: = markl; 2: rm,r: = mark2; 3: n?.r: = mark3 end end; procedure copy 
= (n: Tnode): ?node; begin newf, gf, f, s:mode; down: Boolean; gf:= nil; f:= n; copy := nil; { gf, c 
ands correspond to grandfather, father, and son } if f= nil then return; {Phase 1} down: = trne; do 
down and f#nil and not marked(f) -> new(new~; Slide(newf?.r, ft.r, mark2); Rotate(newft.l, gf, f, f?.l, 
newo jl { top to left } down and (f= nil Or marked(f)) and even(markof(gf)) -> mark(gf,-1): Rotate(gf?.l?.1, 
f, gfT.l?.r) D { top to right } down and (f= nil Or marked(t)) and odd(markof(gf)) -> down : = false; 
mark(gf,-l); Rotate(f, gf, gf?.lt.r) D { left to top } not down mrd cvcn(marko~g~) -> down : = true; 
mark(gf,l); Rotate(gfr.lT.1, t gfi.1 r.r) U { left to right } no~down and odd(marko[gf)) -> Rotate(f, 
g~ gfT.lT,r) { right to top ] od; { Phase 2 } down : = true; do down and odd(marko~~) -> Rotatc(gf, 
L gf?.l?.r) II { top to right } down and markof(t)= 2-> Slide(f?.r, ft.lt.r, copyof(ft.lt.r)); Rotate(gf, 
~ ft.l?.1) o { top to right to left} down and marftof(f)= 0-> Slide(f?.r, f?.lT.r, copyof(f?.lt.r)); 
Slide(s, fT.], ft.lT.i, copyof(fT.lT.l)); down: = false D { top to right to top} not down and gf# nil 
and marked(gf) -> Slidc(gfT,r, f, gf?.l?,l, gf?.lt.r, f?.l); down: = true B { right to left ] not down 
and gf#nil and not marked(gt) -> Rotate(gf, gft.l?.l, s, gft.1, f) { left to top } od; copy := s; end; 
 ncw(markO); new(markl); ncw(mark2); lnew(mark3); { body of the program} end 9. Conclusion We reviewed 
methods to increase reliability and readability of pointer operations, We analyzed pointer rotations 
and slides as operations to implement tricky pointer manipulations such as lisl: marking, list copying, 
and balanced tree manipulations. We found several properties are invariant under rotations, In particular 
the number of pointers to each record remains constant. We then defined the safety of rotation to be 
not losing a record amd showed that there is a decision procedure for finding out whether a rotation 
loses a record. We finally examined carefully how rotations and slides can be used in list copying algorithm. 
IIere are several other advantages of rotations over assignments. One is that we can execute rotation 
more efficiently than pointer assignment. In particular, for a system using a reference counting memory 
management, rotation can avoid most housekeeping associated with reference counting [Deutsch&#38;Bobrow]. 
Another advantage is that the Rotate operation can be executed fast, For example, Rotate(x,y,z) can be 
realized by a multiple assignment x ~ y, y~z, z~x. It will be a challenge to ~lnd other structuring 
operations and checkable properties so that we can write more reliable and efficient programs without 
using expensive optimizers and verifiers. Acknowledgements I appreciate comments from Peter Deutsch, 
Ed Fiala, Jim Horning, and Alan Perlis. Appendix: Closure of Rotations We will prove the theorem about 
closure property introduced in section 5. qleorem (The same as the one in section 5) Suppose we have 
operated rotations on some data structures, and they are all safe rotations. Then, there is a sequence 
of rotations, such that the applications of them will restore the original data structures. We first 
need a couple of lemmas. Lemma 1 Let el, ... , en be program expressions such that their values are Bl, 
... , Bn. If we apply a safe rotation which takes only the subset of el, .,. , en as its arguments, then 
we can still reach Bl, ... . Bn from some program variables in el, ... , em -f Without loss of generality, 
we assume that we apply Rotate(el, ... . ei) (i<n) and this is a safe rotation. Then, Bl, ... . Bi are 
reachable from some program variables in el, ,.. , ei from the definition of safety. We will consider 
how Bj (i+ l~~n) is still reachable from some program variable. Before the rotation, Bj is pointed by 
tj, whose explicit form is X~.sl~.s2 ... Sk. Therefore, there are k+ 1 pointers x, xt.sl, X t.Slt.s2, 
. . . . xt.slt.sz C.) Sk. which form a chain leading from x to Bj. There are k+ 1 pairs of locations 
and values to represent these pointers: x: location Cl, value D1 X?.sl: location C2, value D2 X?. S1?.S2 
... Sk: location Ck + 1, valLle Dk + 1 If none of these pointers change value, then Bj is still reachable 
from x. Suppose some of these pointers change values. Let Cl (l<l~k + 1) be the location, which has the 
largest subscript among all locations whose contents changed. Since D1 is one of Bl, ... , Bi, we can 
assume without loss of generality, that D1 = Bm. Since the rotation is safe, tAere is an expression f 
such that f= Bm after the rotation. Since there is a path from D1 to Bj, ft.sl + l-? ... sk is pointing 
to Dk + 1 or Bj after the rotation. H Lemma 2 If Rotate(el, ... . ei) is a safe rotation, tk ere is another 
rotation P~otate(fl, .. , fi) such that the data structure after the applications of Rotate(el, ... . 
ei); Rotate(fl, .. . fi) is the same as the data structure before the rotation. In other words, every 
safe rotation has an inverse. -f Suppose ej (l<<i) is stored at location Aj and its value is Bj. After 
the rotation the value contained at the location Aj is Bj + 1 (l~<i) and B1 is contained at the location 
Ai. Because the rotation is safe, there are pointer expressions which denote pointers at the locations 
Al, ... , Ai. We name these pointers fi, fi.1, ... . fl. In other words fl is stored at Ai and its value 
is Bl, f2 is stored at Ail and its value is Bi, ,.. , and fi is stored at Al and its value is B2, Then 
Rotate(fl, ,.. , fi) will certainly restore the values at locations Al, ... . Ai. Furthermore, this operation 
is safe since all the data structure is exactly the same as the original and all the records Bl, ... 
. B1 have to be reachable from some program variables. I Proof of the theorem Now, the proof of the theorem 
should be easy. Suppose we have applied safe rotations. Let us name these rotations as rl, r2, ... . 
rm. From the lemmas 1, the data structure after these applications is still safe. Then apply the inverses 
of these rotations in the reverse order: -1 -1 namely, apply rm , . ,q . Then after each application, 
the data structure is safe and inverse cancel with the original from lemma 2. Therefore, we obtain the 
exactly the same data structure at the end. I References <RefA>[Deutsch] Private communication, 1978. [Deutsch 
&#38; Bobrow] Deutsch, L,P., and Bobrow, D. G,, An efficient, incremental, automatic g~bage collector. 
Comm.ACM 19, 9(Sept, 1976), 522-526. [Flon] FIon, L., On the Design and Verification of Operating Systems 
Ph.D. Th. Carnegie-Mellon U., May 1977. [Gries] Gries, D., The multiple assignment statement. IEEE Trans. 
on Software Eng. SE-4, 2(March 1978), 89Â­ 93. [Jefferson] Private communication, 1977, [Robson] Robson, 
J.M., A bounded storage algorithm for copying cyclic structures. Comm.ACM 20, (1977), 431Â­ 433. [Schorr&#38;Waite] 
Schorr, H., and Waite, W. M., An efficient machine-independent procedure for garbage collection in various 
list structures. Comm.ACM 10, (1967), 501Â­506, [Suzuki&#38;Ishihata] Suzuki, N., and lshihata, K., Implementation 
of an array bound checker. Conf. Rec. of the Fourth ACM Symp. on Print. of Prog. Lang. (Jan. 1977), 132-143. </RefA>
 
			
