
 ADESSA - An Ada* Expert System Style Advisor J.E. Gaffney, Jr. T. M. McKeever  ABSTRACT The development 
and widespread use of the Ada programming language is aimed at decreasing the cost of large, complex 
software development by providing one language that is powerful enough to handle many different types 
of applications, yet is tightly structured, highly standardized and allows modular system construction. 
The ultimate goal is to produce systems of higher quality, meaning they are more understandable, easier 
to maintain and more portable or adaptable to changing operating environments. However, the Ada language 
itself is only a vehicle to achieve software quality improvement. Unless it is used properly, and advantage 
is taken of the embedded software engineering concepts, no real gain will be realized. Unfortunately, 
because of its size and many concepts that push the boundaries of current software technology, 'proper 
use' of Ada often requires a high level of expertise that is a very rare and valuable commodity. ADESSA 
(the Ada Expert System Style Advisor) is a technical initiative that is aimed at expanding the concept 
of software quality and providing a structured means for instilling 'quality' into the software lifecycle. 
This tool will be used by software developers to assess the style quality of their designs and programs 
with respect to project standards, port- ability guidelines and software engineering concepts. OVERVIEW 
The traditional measures of software quality quantify the degree to which a software design or implementation 
meets the functional objectives specified for it. They do not deal with various other matters of great 
importance, such as the ease with which the software can be understood (which relates to how complex 
maintenance might be) or changed. These matters may be defined as aspects of 'style' in software design 
and code. Software developers and maintainers recognize various, essentially heuristic, quality factors 
that can be grouped under the general category of style; some of these factors are: (17) maintainability 
portability understandability module coupling module strength *Ada is a registered trademark of the U.S. 
Government (Ada Joint Program Office). COPYRIGHT 1986 BY THE ASSOCIATION FOR COMPUTING MACHINERY, INC. 
Permission to copy without fee all or part of this material is granted provided that the copies are 
not made or distributed for direct commercial advantage, the ACM copyright notice and the title of 
the publication and its date appear, and notice is given that copying is by permission of the Association 
for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. 
 Most of these quality factors have not been quantified, or even formal- ized. A tool is needed that 
will implement measures of these factors, established from the opinions of various expert sources, people, 
docu- ments, and standards. Such a tool will greatly enhance a developers ability to produce 'better' 
Ada software products, where better is with respect to enhanced maintainability, etc. ADESSA (the Ada 
Expert System Style Advisor) is aimed at being just such a tool. It will provide 'intelligent' style 
guidance to developers of Ada programs and will be a knowledge-based software 'assistant'; such assistants 
are thought to offer considerable "promise of dramatic improvements in software productivity, reliability 
and flexibility". (IB) A basic objective of ADESSA will be to more effectively combine the paradigms 
for good design with a tool to make programmers more effective. This is in keeping with Bobrow's observations 
about making computational [development] environments more effective. (19) Toward this, AUESSA will contribute 
strongly to broadening the purview of inspections to include a greater coverage for the term 'quality' 
to include aspects of 'goodness'. Yet, the manner in which ADESSA will provide guidance and broaden a 
programmers ability will decrease, rather than increase, the level of training and expertise required 
of an individual programmer. The intelligent style guidance that ADESSA will provide is being structured 
in recognition that, according to Frederick Hayes-Roth, "As the amount of relevant information has multiplied, 
the capacity of humans to store and sort the data has become increasingly taxed and in some cases overwhelmed. 
These data based systems augment the power and range of the professional's grasp, providing him with 
a kind of auxiliary electronic memory that, for the present, appears to heighten rather than diminish 
his importance." The development of ADESSA is completely compatible with work being done elsewhere on 
automating the software development cycle. Indeed, much current research is: "directed toward providing 
knowledge-based tools to support the entire software development life cycle, from high-level design to 
low-leYel code generatlon". (14) We have in mind that ADESSA will perform in a manner analogous to" EPISTLE 
(Z), which addresses grammar and style checking of English texts. In the case of EPISTLE; "Grammar checking 
deals with such errors as lack of number agreement between subject and verb; style checking points out 
such problems as overly complex sentences". (2) ADESSA will be implemented as a knowledge system, one 
that represents, reasons with and explains expert knowledge. The knowledge base will comprise the basis 
for ADESSA'S intelligence. ADESSA will examine the code or design with respect to these rules. Then, 
it will point out to the user the location and divergence from these rules, which are divergences from 
a desired style. The user can then take action to adhere to the style goals of his particular group, 
thus increasing the quality of his code and saving valuable code inspection time that can be used to 
address other issues. The knowledge base will be such that its knowledge can vary from project to project 
and many levels of rules may be represented. This makes ADESSA sufficiently adaptable to be used by a 
large organization on many projects that may have varying style needs. The ADESSA Ada development support 
tool will be applied to Ada design and code after successful compilation. It is meant to begin where 
a compiler leaves off with the objectives of enhancing the level of goodness of Ada code, increasing 
the scope of inspections to include style, facilitating the enforcement of Ada programming standards 
and helping Ada software engineers to take full advantage of Ada's vast potential. PROGRAM STYLE, PORTABILITY, 
AND ADA ADESSA will facilitate the broadening of the concept of software quality beyond that related 
to various measures of structural and functional error content to include measures related to software 
desig~ and code style. Enhanced levels of style in the design and/or code text are desirable as they: 
o facilitate a reader's comprehension of the text and therefore the maintainability of this software 
 o support the ,ilnimization of the propagation ot functional changes o facilitate portability o increase 
the likelihood of higher levels of performance on the host computer  Now, we consider the nature of 
software style and of a particular aspect of it, portability. "Style is the manner of writing as opposed 
to the matter to be expressed .... Style here has nothing to do with the syntax and semantics of the 
Ada language, which are well defined. Rather...[it]...is concerned with how Ada should be used to contribute 
towards legibility, maintainability, [portability]...of the program. ''(1) One should note that the generally 
acknowledged tenets of good design, such as maximizing module strength, etc., go hand-in-hand with good 
style. Indeed; "...design and style cannot be divorced, and good design should lead to good style". ~I;'' 
The initial version of ADESSA will focus on issues of 'portabilit%'. 'Portability' may be defined in 
a number of ways. One definition (9) is simply: "Effort [required] to correct the software for use in 
another operating environment". Three software criteria that dimension the portability quality factor 
may be defined (9): independence, modularity, and self- descriptiveness. Definitions for these criteria 
are: Indepenoence - [hose attributes of the software which determine its non-dependency on the software 
environment". Modularity -"Those attributes of the software which provide a structure of highly cohesive 
modules with optimum coupling". Reference 12 provides a quantitative definition of coupling, an originally 
qualitative notion developed by Glenford Myers. ~13)" " Such a definition exemplifies the type of mathematical 
formulation of a non-mathematical concept that can be applied here. Self-descriptiveness -"Those attributes 
of the software which provide explanation of the implementation of a function". Very importantly, these 
criterias are also identified as pertinent to the reusability quality factor. (9) Hence, satisfying the 
objectives of portability should support the objective of reusability, a major thrust for an Ada Component 
Library effort. Essentially, portability is a qualitative judgment on how easy (or if you're pessimistic, 
how difficult) it is to change a given program such that "...it can be recompiled by a different compiler 
and then run with the required behavior, generally on a different target [host]." Portability is a key 
issue for systems within the intended domain of the Ada language. Expert System Formulation For ADESSA 
ADESSA will include a knowledge-based system, and other expert system functional components. They willbe 
used both to represent expert knowledge about what constitutes good style and to make interences about 
the style of Ada design/code, based on applying this knowledge to measure d aspects of the Ada statements 
that have run through a parser. This section presents a sample of several possible elements of a rule- 
based system relating to the style aspects of Ada loops. One might con- ceive of a set of style filters, 
each of which deals with some aspect of Ada text. For example, reference 1 considers style with respect 
to various major topics such as: "lexical elements"; "declarations and types", "statements", etc. "Loop 
Statements" is a category under "statements". We now consider the nature of a possible implementation 
of some rules for a "loop statement style filter" We can consider Nissen and Wallis (1), pgs. 110-111, 
to be a source of expert knowledge of what constitutes good Ada loop style. Unfortunately, this knowledge 
is not immediately usable in an expert system. We have to translate it into a format appropriate to the 
quantitative evaluation of Ada statements, in particular measurements taken on them, such as parameter 
list size, etc. One piece of knowledge from this source is provided in the following sentence: "Whenever 
possible the range of the control variable should be given as a complete type or subtype, or as the index 
range of an array" That is, the range for a loop should no tbe hardcoded, rather, some pre- defined type 
such as '!CONTROL_RANGE" should be used, and may even be defined in some other module, where various 
other global definitions are stated (which may be used in many modules). Having the definitions of types 
and constants that are global in nature to the problem be present in only one place facilitates making 
changes, and hence should enhance the reliability and maintainability of the Ada software being developed. 
Now, we will demonstrate a translation of some of this textual knowledge to several rules, which are 
meant to be based in concept on MYCIR (20). One background source for examples of MYCIN rules is reference 
4, pg 74-75. MYCIN, written in LISP, is used to diagnose infectious diseases and recommend treatment. 
In the case of ADESSA, the symptoms are certain measures on the Ada statements; the disease could be 
a bad loop in the broad, and perhaps, a stylistically poor loop range in particular, MYCIN associates 
a certainty factor, or CF, in the interval <-1,+1> to represent the degree to which each fact or rule 
is believed to hold. CFs of -Z and +1 indicate absolute knowledge (of being not true or true, respectively). 
We expand on this interpretation of CFs to include their representing a score for the presence of an 
attribute. Now, returning to what constitutes good style for composing ADA loops, we pose the following 
"For Loop Goodness Rule": (G1) THE INDEX VARIABLE IS NOT OVERLOADED, (G2) THE LOOP RANGE IS PROPERLY 
DEFINED, (G3) NO EXIT CONDITIONS INTERNAL TO THE LOOP EXIST, (G4) THE NUMBER OF STATEMENTS WITHIN THE 
LOOP IS WITHIN AN ACCEPTABLE RANGE, (GN) THEN THE FOR LOOP STYLE IS SATISFACTORY Thisoverall rule for 
establishing what a good for loop is may be written symbolically as: IF G1 AND G2 .... AND GN THEN GFL 
(C.F. = 1) where G1 stands for "The number of cycles is determined before loop entry" and GFL stands 
for "Good For Loop", or "the for loop style is satisfactory". Note that the certainty factor attributed 
to this rule is "1". This signifies that we ascribe 100 percent validity to this rule; thus, if all 
of the sub-rules G1, .. GN are satisfied, with CF's = 1, the loop style is 100 percent perfect, with 
respect to the desired style represented in the knowledge base. In the example above, the sub-rules 
are boolean in nature, thus the CF for this rule is either I or O. In other cases however, it may be 
appropriate that the sub-rules are values anywhere in the interval <-1, +1>, and thus the cumulative 
CF could also fall anywhere in this range. This rule is (numerically) evaluated as follows: (Minimum 
CF(G1), CF(G2),...,CF(GN)) *CF rule. But, CF rule = i, therefore, the value of the rule is minimum (CF(GI), 
CF(G2)...,CF (GFN)), where CF(GI) is the certainty factor for the variable GI, which itself is the result 
of firing another rule that applies to the loop, as described below. We have based our concept of knowledge 
base structure on MYCIN, as stated earlier in this section. However, we have made some departures from 
or different interpretations of MYCIN structure. One is that a fact may be given a certainty factor value 
that really signifies the degree to which the style used in composing an actual loop approaches the ideal 
paradigm. Another departure is that a fact may be a variable, with its certainty factor actually quantifying 
its degree of ideality, or a function of some other variable (say the way in which the loop range is 
defined). Also, the certainty factor of a rule (conclusion) might be a variable, which is the output 
(CF) of some other rule. For example, in the case of software development, the certainty factor (here, 
a credibility index) might be a variable for a rule relating errors discovered early in development to 
those projected in the delivered software, depending upon the number of labor hours applied during design 
inspections. It is of interest to note that there is at least one currently available expert system development 
tool that provides for arbitrary function calls on both the condition and action sides of a rule. It 
is called ART, Automated Reasoning ~ooI, produced by the Inference Corporation, Los Angeles. COMPUTATION 
OF STYLE SCORES ADESSA provides for the computation of style scores at the various levels of abstruction 
just alluded to, depending upon what mode of operation (see section, ADESSA OPERATION) the user selects. 
These scores may be obtained for each module (or other appropriate element of the Ada soft- ware submitted 
for analysis), or for the software as a whole at any level of analysis abstraction. A simple weighting 
of attributes at any such level is probably the function that will be used. For example, suppose the 
overall style score for module j (any j) is given by the function: n sj =~ wi* vii, i=1 where; Vij is 
the score for a quality factor such as 'portability' for any module j; and W i is the weight to be attributed 
to that factor in calculating the overall style value, Sj for any module j (or element) of Ada to be 
evaluated. In matrix notation, this equation may be written as: sj = w x vj lxl lxi ixl (the figures 
under the matrices are the number of row and columns, respectively in each; Si, a lxl, is a scalar, of 
course). We could then develop an overall style score for the total piece of software, say composed of 
'n' modules; n S=~ S. 3 j=l or, in matrix form; S= Ix S; where S i is the column matrix ixl lxn nxl 
of module 'style' scores. Alternatively, if the style scores are weighted by the number of statements 
in each module, L~, then we would have: J S = Lj x Sj Ixl ixn nxl  ADESSA OPERATION ADESSA will be composed 
of five principal components: O knowledge base o inference mechanism o Ada parser  375 o metrics data 
base o user interface  Figure I portrays the logic configuration of these elements. Figure 2 summarizes 
the ADESSA processing flow which is described in the balance of this section. The user will direct ADESSA 
to perform one of several options. A complete style review with respect to the attributes of good structure 
that relate to portability, maintainability, etc., can be elicited. Alternatively, only those attributes 
that relate to one major category, such as portability, can be called upon to be looked at by ADESSA. 
Further, ADESSA may be requested to check out one or a few specific constructs, such as loops. User I 
User ADA Statements Interface 1 Metrics Inference I Parser Data Base Mechanism Knowledge Base Figure 
1. AOESSA Structure vse, s ...... i Luse ovides I ADESSA Analysis AOA :0 be Opt=on Analrze(i ADA  I 
Parse State ~enI~ Oevelo¢ Metric J Value c and Entel tnto Data Base ~ Oevelop Analysis 1 I I J IAnalvs's 
TO User LOgJC Detads Figure 2. ADESSA Processing Flow FINAL OBSERVATIONS ADESSA is a knowledge-based 
Ada software development tool. Its principal objectives are to: o enhance the level of 'goodness' of 
Ada designs and code, support increasing the scope of coverage of inspections to include style and performance 
aspects of software, in particular Ada designs and code, o facilitate the enforcement of ADA programming 
standards, support a rapid acquisition and increase in the level of Ada programming skills; it is desired 
to take full advantage of Ada's potential and to not simply 'develop COBOL programs in Ada,' for example. 
 ADESSA will provide the following principal functions: o parse Ada statements locate certain constructs 
measure the constructs  o apply knowledge (rule) base to construct measurements o provide a style assessment 
to user  present an overall score per software element evaluated present a score for each style category 
provide qualitative argument to support quantitative evaluation (at various levels of software element 
abstraction to which the user may wish to zoom in on). o provide advice to the user about rectifying 
the style discrepancies that ADESSA identified.  The ADESSA Ada development support tool will be applied 
to Ada design and code after successful compilation. It is nO_m~tmeant to usurp the compiler's role in 
detecting syntactic/semantic violations. Rather, it is meant to start where the compiler stops. It will 
quantify the degrees of adherence of design and/or code to various basically heuristic style objectives. 
It will also provide qualitative (prose) support for its analyses, in the sense expected of any expert 
system; this output of ADESSA would be expected to be similar to the text of a style manual, such as 
reference 1, but with the important additional feature of providing a logical argument that will support 
the judgment it presents to the user based upon the individual project style represented in the knowledge 
base. It is anticipated that ADESSA will perform these functions for both individual software developers 
checking over their own designs or code as well as groups of people, such as found in inspection situations. 
REFERENCES <RefA>1. Nissen, J.. and Wallis, P., "Portability and Style in Ada"; Cambridge University Press; 
1984. 2. Heidurn, G. E., et al.; "The EPISTLE text-critiquing system", IBM System Journal; Vol. 21; 
No. 3; 1982; pg. 305.. 3. Kehler, T., presentation on "At Industry Overview" at the Third FSD Conference 
on Artificial Intelligence, June 24, 1985, Gaithersburg, Maryland. 4. Nau, D., "Expert Computer Systems"; 
IEEE COMPUTER; February, 1983; pg. 63. 5. Kurzweil, R., "What Is Artificial Intelligence Anyway?", American 
Scientist; May-June, 1985; pg. 258.  6. Gaffney, J. E., Jr., "On Predicting Software Related Performance 
of Large-Scale Systems", Conference Proceedings of CMG XV, International Conference on the Management 
and Performance Evaluation of Computer Systems, Computer Measurement Group; pg. 20; December, 1984, San 
Francisco. 7. Cruickshank, R. D., and Gaffney, J. E., Jr., "Software Design Assessment Program"; IBM 
Technical Disclosure Bulletin;. Vol. 23, No. 11, April, 1981. 8. Sof Tech, Inc., "ADA Portability Guide]ines"; 
September, 1984; developed for the U. S. Air Force Systems Command, Hanscom AFB, Massachusetts. 9. Boeing 
Aerospace Company, "Software Interoperability and Reusability Guidebook for Software Quality Measurement", 
July, 1983; developed for the U. S. Air Force Systems Command, Griffiss AFB, New York. 10. Hall, N. 
R., and Preiser, S., "Combined Network Complexity Measures"; IBM Journal of Research and Development; 
Vo]. 28; No. 1, January, 1984. 11. Miara, R. J., et al.; "Program Indentation and Comprehensibility"; 
Communications of the ACM; November, 1983; Vol. 26, No. 11, pg. 861. 12. Cruickshank, R. D., and gaffney, 
J. E., Jr.; "Software Design, Coupling, and Strength Metrics"; Fifth Annual Software Engineering Workshop; 
NASA, Goddard Space Flight Center; November, 1980. 13. Meyers, G. J., "Reliable Software Through Composite 
Design"; Petroce]li/Charter, 1975.  14. Frenkel, K. A., "Toward Automating the Software-Development 
Cycle"; Communications of the ACM; Vol. 28, No. 6; June, 1985. 15. Hayes-Roth, F., "The Machine as Partner 
of the New Professional"; IEEE Spectrum; June 1984; pg. 28.  16. Kahn, S., "An Overview of Three Relational 
Data Base Products", IBM Systems Journal, Vol. 23, No. 4, 1984, pg. 100.  17. Gaffney, Jr. J.E., "Metrics 
In Software Quality Assurance".. 1981 ~CM National Conference, Los Angeles, November, 1981. 18. Mostow, 
J., "What is AI? And What Does it Have to Do with Software Engineering?", IEEE Transactions on Software 
Engineering, Vo]. SE-11; No.11; November, 1985, pg. 1263. 19. Bobrow, D.G., "If Prolog is the Answer, 
What is the Question? or What it taken to Support AI Programming Paradigms", IEEE Transactions on Software 
Engineering, Vol. SE-11; No. 11, November 1985. 20. Shortcliffe, E.H., "Computer-based Medical Consultation: 
MYCIN"; E|sevier; 1976</RefA>.  
			
