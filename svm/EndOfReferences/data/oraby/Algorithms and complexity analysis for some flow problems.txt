
 Chapter 14 Algorithms and Complexity Analysis for Some Flow Problems Edith Cohen* Abstract, Several 
network flow problems with additional constraints are considered. They are all special cases of the linear 
programming problem and are shown to be P-complete. It is shown that the existence of a strongly polynomial 
time algorithm for any of these problems implies the existence of such an algorithm for the general linear 
programming problem. On the positive side, strongly polynomial algorithms for some parametric flow problems 
are given, when the number of parameters is fixed. These algorithms are applicable to constrained flow 
problems when the number of additional constraints is fixed. 1. Introduction An algorithm for the linear 
programming problem over the real numbers is called strongiy polynomial if it per­forms no more than 
a polynomial number of elementary operations (additions, subtraction, multiplications, di­ .. vmons, 
comparisons, an d data transfers) in terms of the number of variables and constraints. If the problem 
is posed over the rationals, then it is also desirable that the algorithm be polynomial in the usual 
sense. Strongly polynomial algorithms are known only for special cases of the linear programming problem. 
For example, Megiddo [21] gave a strongly polynomial algo­rithm for linear programming problems with 
inequality constraints, where the objective function and each of the constraints depend on at most two 
variables. Tar­dos [24] gave a strongly polynomial algorithm for linear programming problems where the 
entries of the con­straints matrix (but not necessarily those of the objec­tive function and the right-hand 
side vector) are integers bounded by a polynomial in terms of the number of vari­ables and constraints. 
Her algorithm applies to many network flows problems. It is still not known, however, whether the generalized 
max-flow problem [15] can be solved in strongly polynomial time. Since the general linear programming 
problem is known to be in the class P, it is not interesting any­ ~artment of Computer Science, Stanford 
University, Stan­ford, CA 943o5, and IBM Ahnaden Research Center. Research partially supported by NSF 
PYI Grant CCR-8858097. t IBM Re~em&#38;, Almaden Research Center, S= Jose, CA 95120-6099, and School 
of Mathematical Sciences, Tel Aviv University, Tel Aviv, Israel. Nimrod Megiddot more to consider polynomial 
reductions of the general problem to various special cases [1, 9, 18], unless the reduction runs in strongly 
polynomial time. It is inter­esting to consider strongly polynomial reductions of the general linear 
programming problem to various special cases. Also, since the linear programming problem is known to 
be P-complete [8], it is interesting to consider NC reductions. In this note we consider the following 
network flows problems, and give NC and strongly poly­nomial reductions from the general linear programming 
problem to these problems. On the positive side, we give strongly polynomial algorithms to some parametric 
flow problems with a fixed number of parameters, and dis­ cuss strongly polynomial special cases of the 
problems described below. Problem 1.1. [Balanced Costs Circulation] Given is a digraph G = (V, E) with 
real costs per unit of flow c. 6 R (e E E) associated with the edges. Find a nontrivial circulation ~ 
= (~~)~~E, i.e., $.>0 (e e ~), z # O,and for every v~ V, xi~ = z z .~ i:(a,u)GE i:(u, i)c E such that 
the cost is balanced at the vertices, that is, for every vertex v 6 V, x~v c~u = xu~cu~ . Ex i:(i,v)~E 
i:(v,i)cE The set of feasible circulations is invariant under the operation of adding the same constant 
to each of the costs. The problem of a flow in a network with pairs of homologous edges is defined as 
follows. A set of pairs of edges is given and one haa to find a flow where members of each pair carry 
equal amounts of flow. The latter problem and a related one of networks with bundles were studied by 
Berge and Ghouila-Houri [2], Ghouila- Houri [13, 14], and Hoffman [2]. The result of [24] implies that 
these problems are solvable in strongly polynomial time. The problem of a flow in a network with pairs 
of homologous edges can be generalized as follows into a problem for which it still not known whet her 
a strongly polynomial time algorithm exists. Problem 1.2. [Fixed Ratios Circulation] Let G = (V, E) be 
a digraph, let ?., u. 6 R+ (e G E) be lower 120 and upper bounds, respectively, on the flow in an edge 
e,and let a:S--+R+, where SCExE. Find a nontrivial circulation 25 = (Ze)ee E, i.e., le s ice s u=, and 
for every vc V \ {s, t}, such that for every pair (el, e2) E s, Zel = a(el, ez)zez. Remark 1.3. The constraints 
of the form Ze, = a(el, ez)z~z imply by transitivity more constraints of this type, so we may assume 
without loss of generality that S is closed transitively, so that if {(el, e2), (ez, e~)} c S, then (el, 
e~) E S and a(el, e~) = a(el, e2)@(e2, e3). Similarly, we may assume without loss of generality that 
if (el, e2) c S, then (e2, el) E S and a(ez, el) = l/a(el, e2). Thus, we assume S is an equivalence relation 
over E. Problem 1.4. [Circulation with Fixed Forks] Given is a digraph G = (V, E), where V is partitioned 
into three sets U, Fin and FoUt. The vertices in Fin (resp., Fout) have in-degree 2 and out-degree 1 
(resp., out-degree 2 and in-degree 1). Also given is a function a : Fin U Fout + [0, 1]. The vertices 
Fin (resp., FOUt) are called in-forks (resp., out-~orks). Find a nontrivial circulation a such that 
(i) ifv E FOU, and{(i, v), (v, j), (v, k)} c E, andj < k, then (ii) ifv~Finand{(v,i),(j,v),(k,v)}cEa~dj<k, 
then  Xjv Z (1( v)x~i and Xkv = (1 a(v))zv~ . Problem 1.5. If the graph G is bipartite and all the 
edges are between U and F = Fin U F,,Ut, then we refer to the problem as the bipartite version of Problem 
1.4. We show that the existence of a strongly polynomial al­ gorithm (resp. an NC algorithm) for any 
of the lproblems stated above implies the existence of a strongly polyno mial algorithm (resp. an NC 
algorithm) for Problem 1.5. This is clearly the case for Fixed Forks. It is also easy to see that a circulation 
with fixed forks is a special case of a circulation with fixed ratios. In Section 2 we give a strongly 
polynomial time and NC reduction from Prob­ lem 1.5 to the Balanced Costs problem. In Section 3 we show 
that the existence of a strongly polynomial algo­ rithm or an NC algorithm for Problem 1.5 implies the 
existence of such algorithms, respectively, for the gen­ eral linear programming problem. The combination 
of these results implies the following theorem. PROBLEMS 121 Theorem 1.6. For each of the following: 
(z) Cir­ culation with Balanced Costs (Problem 1.1), (ii) Circu­ lation with Fixed Ratios [Pro blem 
12?), and (iii) Circu­ lation with Fixed Forks (Problem 1.4), the problem has a strongly polynomial algorithm 
if and only if the gen­ eral linear programming prob!em has one. Moreover, a!! these problems are P-complete. 
A preliminary version of Section 4 appeared in [6]. We discuss parametric flow problems, and give strongly 
polynomial algorithms when the number of parameters is fixed. These algorithms are based on a technique 
developed by the authors in [4] (see also [6, 5]). If the number of parameters is not fixed then these 
parametric problems are P-complete, and the existence of a strongly polynomial algorithm for any of them 
is equivalent to existence of such an algorithm for the general linear programming problem. The existence 
of strongly polynomial algorithms for parametric problems with a fixed number of parameters has consequences 
as follows. If either the number of forks in Problem 1.4 is fixed, or the number of equivalence classes 
in S of Problem 1.2 is fixed, then the respective problems can be solved in strongly polynomial time. 
Moreover, similar generalizations of the maximum flow and the minimum-cost flow problems also have strongly 
polynomial algorithms. Some of the results of Section 4 also follow from a scheme very similar to that 
of [4], which was introduced later by Norton, Plotkin, and Tardos [22]. 2- ~~~~~ ~~~d Forks s educible 
0 Proposition 2.1. The Bipartite Fixed Forks pro b­lem is reducible both in strongly polynomial time 
and in NC to the Balanced Costs problem. Proof, Consider an instance of Problem 1.4 on a graph G = (V, 
E) with costs c, (e E E), where V = /7 U Fin U FOUt. We reduce the problem to an inst ante of Problem 
1.1. Define G = (V , E ) as follows. Let V1 and V2 be two copies of V, and let W1 and W2 be two copies 
of E. Let v =vlu@(_l@lJ@ For every vEV we denote by V1E V1 and V2E V2 the corresponding vertices. For 
every e E E we denote by w; E W1 and w: E W2 the vertices which correspond to e. We now associate weights 
c: (e ~ E) with the edges of G. Consider a vertex v c Fin (resp., v 6 FOvt ) with in­cident edges (v, 
i), (j, v), and (k, v) (resp., (i, v), (v, j), and (v, k)), where j > k. Let c~i = 1, c~v = a(v), 1 Q~ 
COHEN AND MEGIDDO and c~v = 1 +CX(W) (resp., c~V = 1, c~j = a(v), and C:k = 1 + a (v)). If u c U, then 
all the edges of E incident on either U1 or U2 have zero cost, and hence every flow has bal-To each edge 
e c E there correspond five edges in E . anced costs at the vertices U1 and U2. Ife=(i,v)where icUandvcF=FinUFOUt 
,then the corresponding edges are (See Figure 1.): Consider a vertex v E Fin (resp., v c Fout) with inci­ 
(i) el = (w:, vI) with cost c:, dent edges e = (v, i), e = (j, v), and e = (k, v) (resp., e = (i, v), 
e = (w,j), and e = (w,k)), where j > k. (ii) ez = (VZ, w:) with cost c:, A flow z has balanced costs 
at the vertices V1 and V2 if  (iii) es= (il, w,!) with cost O, and only if (iv) e~ = (z&#38;, i2) with 
cost O, x(el) = cr(v)x(e~) + (1 a(v)) z(e~) and (v) es = (w:, to:) with cost 2c:. z(e2) = a(v)z(e~) 
+ (1 a(v)) z(e~) .  It is easy to see that a flow z = (z.) is feasible for Problem 1.4 in G if and 
only if the flow Z defined by x: ~ = Ze (e c E) has balanced costs in G . 3. The general linear programming 
problem reduces to Bipartite Fixed Forks In this section we present the following theorem. e=(i, v), 
vCF, iEU Theorem 3.1. The Bipartite Fized Forks problem (Problem 1.5) has a strong!y polynomial algorithm 
if and only if the general linear programming problem has one. Moreover, the former is P-complete. For 
the proof of the theorem, we show that all the following problems have NC and strongly polynomial time 
reductions to each other: (i) Given a matrix A E RmXd and a vector b E Rm, decide whether there exists 
an w such that Ax s b.  J----J&#38; o (ii) Given A and b as above, decide whether there exists an z 
such that Ax < b. L ~2 e=(v, i), v~F, i6U (iii) Given A as in (~), where for i = 1,..., m, ~~=1 A~j 
= O, decide whether there is an ~ such that AZ <0. (iv) Given A as in (iii), where in addition, for i 
= Figure 1: The replacement in G of an edge e c E. 1 ,. ..> m, maxlcjz~-. lAijl = 1, and each row has 
at most three nonzero entries, decide whether there is an xsuch that AZ < 0. (v) Given A as in (iv), 
decide whether there is a y such If e= (v,i) with i E U and v E F, then the corre­that ATy = O,y ~ O,and 
y# O. sponding edges are: (i) e, = (Vi, WJ) with cost c%, (vi) The Bipartite Fixed Forks problem (Problem 
1.5). Problem 1.4 is a linear programming problem, and (ii) e2 = (w:, V2) with cost c;, hence (vi) is 
reducible to (i). Proposition 3.2 gives the  (iii) es= (.:, il) with cost 0, reduction from (i) to (ii), 
Proposition 3.3 reduces (ii) to (iv) e, = (i2, w:) with cost O, (iii), Proposition 3.4 reduces (iii) 
to (iv), Proposition 3.5 reduces (iv) to (v), and Proposition 3.6 reduces (v) to (vi). (v) e5 = (w:, 
.:) with cost 2c~. It is easy to see that a flow z has balanced costs at the vertices w; and w: if and 
only if Xez = Xe, and Proposition 3.2. The problem of deciding feasibil­1 Ze~ = ~~~ = Xes = ~~el . ity 
of a system of weak linear inequalities AX s b can be reduced both in strongly polynomial time and in 
NC to the prob!em of deciding feasibility of a system of strict linear inequalities. Proof. Given A E 
RmXd and b E Rd, denote P = {x c Rd ~ Ax < b]. Suppose we have an ora­cle which decides for any matrix 
A and any vector b whether A x < b is feasible. We use the oracle to de­cide whether AZ ~ b is feasible. 
Consider the following iterative step. If AZ < b is feasible then obviously so is A,a ~ b. otherwise, 
there exists a row Aj, such that AjO z = bj for all z E P, which can be found as follows. For every k 
(k = 1 , . . . . m), consider the system Sk, con­sisting of the inequalities Ai, m < b; (i = 1, . . . 
. k). Let j be the first index such that Sj is infeasible. Let A G R(m-l)x(d-l) and b! E Rd-1 be the 
system generated when one variable is eliminated , using the equality Aj. x = bj. The system A x ~ b 
is feasible if and only if the system A% ~ b is. We repeat the same process with A and b . If only one 
variable remains, we test the feasibility of the system directly. Other­ wise, repeat the iterative step. 
This process takes O(d) steps, so it is not in NC. On the other hand, the prob­ lem of deciding a system 
of strict linear inequalities is also P-complete by a simple adaptation of the proof of [8]. Hence, there 
is an NC reduction from the problem of weak inequalities to that of strict ones. Proposition 3.3. Given 
are a matrix A E Rmxd and a vector b E Rm. In O(md) time (and in NC) we can compute a matriz A E R(m+1)x(d+2) 
with the following properties: (i) Z~~Aij= Ofori=l,..., m, (ii) There ezists an z E Rd~2 such that A 
% ~: O if and only if there exists an x G Rd such that Az < b. Proof. Let F C Rd+2 be the d-dimensional 
flat d+-2 F= {z ~ Rd+2 I ~d+z $d+l = 1, z~= l}. E i=l Let M : Rd * F be the ailine transformation defined 
by if l~i~d i=d ( (m))i = jl~~ if l ~eTw if i=d+ 1 { Denote by M-1 : F -Rd the inverse transformation, 
i.e., (A4-l(z))i = xi (i= 1,..., d). Let L : Rd x R ~ Rd+z be defined ~ follows. ai+;w ;b if l~i~d (L(a, 
b)), = if i=d ~b if i=d+l { PROBLEMS 123 where w = b &#38;eTa. It is easy to verify that L(a, b) TM(z) 
= a=z b, and eTL(a, b) = O. Therefore, for all vectors Z, a E Rd and bE R we have aTz < bif and only 
if (L(a, b))TM(a) < 0. Define A as follows. Fori= l,..., m, let A;* = (L(A~., hi))=. The (m + l)­st row 
of A is defined so as to represent the constraint ~~+z > @d+l. Denote P={&#38;~Rd]Az <b} P ={ZGRd+21A 
Z <O}. We need to show that P = (!Jif and only if P = 0. It is easy to verify that P = 0if and only 
if P rl F = 0. It remains to beshown that ifP # 0then FnP ~0. Note that if z E P , then for every a >0, 
aZ E P , and for any a, z ae E P . Suppose that y E P , itfollows that for y = l/(yd+z yd+l)y, Y~+2 
 Y~+l = 1. It is easy to verify that y = y + ((eTy 1)/d)e E P , eTY = 1, and Y~+2 Y~+l 1.Hence, y 
E P (1 F. Proposition 3.4. Suppose A G Rmxd is a matrix where ~~=1 Aij = O, fori = 1,. ... m. In O(md) 
time (and in NC) we can compute a matriz A E Rm d where m = O(md) such that: (i) L ~=lAlj = O (i= 1,...,),), 
 (ii) each row of A have at most three non~ero entries,  (iii) for every row of A , the maximum absolute 
va[ue of an entry in the row is 1, and (iv) there exists an x such that A x <0 if and only if there exists 
an z such that AZ <0. Proof. We first show how to convert the system to an equivalent one where all constraints 
have at most three variables and the sum of the coefficients is O. Consider a constraint of the form 
~~=1 ai~i <0 where k >3. It is easy to see that there exists an x such that aTz < 0 if and only if there 
exists a scalar y such that k alxl+a2XZ+y~Ui<0 i=3 and kk y~ai>~CliXi. i=3 i=3 These two latter inequalities 
have 3 and k 1 variables respectively, and the sum of the coefficients in each of them is O. Hence, 
by considering all constraints with k >3 variables and repeating this step k 3 times we get an equivalent 
system with properties (i) and (ii), This can be done in a poly-logarithmic number of phases, To conclude, 
we note that multiplying a row by a positive constant, or omitting rows where all entries are O, does 
124 not alter the feasibility of the system. Thus, we may divide any row by the largest absolute value 
of an entry in the row. Proposition 3.5. For any A E Rmxd, there exists anm~O,z#O,such that AZ = O,ifand 
only ifthere is no y such that ATy >0. Proof. There exists an z ~ O, x # O, such that AZ = Oif and only 
if there exists an i, (1 ~ i g d) such that the problem Pi, defined by Maximize xi subject to AZ = O 
23>0, is unbounded. The problem Pi is unbounded if and only if there is a y such that ATy ~ ei. Hence, 
the problems PI, . . . . pd are bounded if and only if every system of the form ATy ~ ei has a solution. 
The latter condition is equivalent to the existence of a y such that ATy >0. Proposition 3.6. Suppose 
A E Rmxd satisfies (i) (ii) each column of A have at most three nonzero entries,  (iii) the largest 
absolute value of an entry in each COL umn is 1. Under these conditions, we can construct in linear time 
an instance of Fixed Forks (Problem 1.4) where there is a one-to-one correspondence between the nontn 
viai Circulations (which solve Problem 1.4) and vectors z > 0 such that Ax = O. Proof. Consider the matrix 
A as the adjacency matrix of a bipartite digraph G where U is the set of vertices corresponding to the 
rows, and Fin U FOUt is the set of vertices corresponding to the columns. For each column of A with exactly 
one positive entry, the corresponding vertex is in FOUt. Otherwise, the corresponding vertex is in Fan. 
Consider a column A,j with the corresponding vertex v E F;n U FOUt. Let ~(v) = A~j where k is the smallest 
number such that lA~j [ @ {O, 1}. If such a k does not exist, then the column has two nonzero entries 
{ 1, 1}, and we choose a(v) = 1. Given a nontrivial circulation z : E ~ R+ which solves Problem 1.4, 
we can construct a point y ~ O such that Ay = O as follows. Consider a row A.j. Each row contains at 
least one entry with absolute value 1. If there exists a k such that A~j = 1, denote bye the edge which 
corresponds to the entry Akj. Otherwise, let k be such that 1 and denote by e the edge Akj = which corresponds 
to this entry. Choose Yj = z(e). lt is easy to verify that y satisfies our claim. Moreover, for any given 
vector y ~ O such that Ay = O, we can construct a corresponding nontrivial circulation which is consistent 
with a. COHEN AND MEGIDDO 4. Algorithms for parametric flow problems In [4] (see [6] for a full version) 
the authors introduced a scheme with which a strongly polynomial time algo­ rithm was obtained for the 
parametric minimum cycle problem. This scheme is applicable to many other prob­lems. Norton, Plotkin, 
and Tardos [22] used a similar scheme to achieve strongly polynomial time algorithms for various other 
problems. In particular, they show that under certain conditions, a strongly polynomial al­ gorithm for 
some problem stated as a linear program can handle a fixed number of additional constraints and variables. 
When additional variables are considered, both the scheme of [22] and a direct application of the scheme 
of [4], require a strongly polynomial algorithm for arbitrary right-hand side vectors. The scheme of 
[22] requires in addition a strongly polynomial algorithm for the dual problem for any right-hand side 
vector of the dual, i.e., any objective function of the primal problem. If a fixed number of constraints 
is added, the scheme of [4] also requires a strongly polynomial algorithm for the dual problem. Consider, 
for example, the linear programming formulation of the max-flow problem. An arbitrary right-hand side 
vector can be interpreted as a set of arbitrary supplies and demands associated with the vertices. If 
one uses an arbitrary objective function then one is looking at the general rein-cost flow problem. In 
subsection 4.1 we summarize the scheme of [4] as pre­sented in [6]. In subsection 4.2 we apply this scheme 
to get strongly polynomial time algorithms for some para­metric extensions of flow problems, when the 
number of parameters is fixed. The linear programming formula­tions of these parametric problems give 
flow problems wit h additional variables. However, in general there is no solution for all right-hand 
side vectors, i.e., arbitrary vectors of supplies and demands. We demonstrate how to overcome this problem. 
These extensions have in­teresting implications with regard to the Fixed Ratios and the generalized flow 
problems. In subsection 4.3 we show that strongly polynomial algorithms exist for the generalized flow 
and rein-cost generalized flow prob­lems, when the number of edges with gains or losses is fixed, and 
for the Fixed Ratios and rein-cost with Fixed Ratios problems, when the number of equivalence classes 
of edges is fixed. The max-flow with a fixed number of forks is a special case of the max-flow with fixed 
ratios problem. These problems can be expressed as a linear programs of max-flow with a fixed number 
of additional variables. Strongly polynomial time al­gorithms for these problems can also be derived 
using Theorem 3.1 of [22]. 4.1 A scheme for strongly polynomial algorithms We review parametric extensions 
of problems for which the scheme of [4] applies. Definition 4.1. An algorithm that COrnlpUkS a function 
g : Rd -+ Rt is called piecewise afine, if all the operations it performs on expressions that, depend 
on the input vector are additions, multiplications by constants, and comparisons. Definition 4.2. (i) 
A problem S : P + R~ is a mapping from a set 7 of instances into t?-tuples of real numbers. We say that 
S(P) is the soiution of the problem for the instance P E P. Suppose that every instance P E P has a size 
[IPII associated with it. The size of an instance is not necessarily defined to be the number of bits 
in its representation. It may be any natural parameter (for example, the number of edges in a weighted 
graph). (ii) Let Abe an algorithm that computes S(P). Denote by TA (P) the number of elementary operations 
the algorithm performs on the instance P. The algorithm A is potgnomial if TA(P) = O(p(llPll)) for some 
polynomial p(o). (iii) Define the d-parametric extension P = (M, Q) of P as follows. Let Q c Rd be a 
polyhedron given as an intersection of halfspaces. Let M : Q -~ P be a mapping from points A ~ Q c Rd 
to instances of P. An instance Pd e Pd corresponds to a subset of instances {M(A) ] A E Q} c P. We say 
that M(A) E P is the instance induced by A. By a solution of the parametric problem for an instance Pd 
= (M, Q) G Pd we mean as follows. Consider the maximum, relative to the lexicographic order, over all 
possible values of the parameters .X c Q, of the solutions of the induced instance M(A). If it is finite, 
a solution consists of the maximum and a vector A s Rd that belongs to the relative interior of the set 
of parameter values which maximize S. Formally, a solution of Pd E Pd is as follows. If Q is empty, or 
if S(M (A)) is unbounded on Q then these facts have to be recognized. Otherwise, a pair (nz, A*) E R 
x Rd, where m = max~,~ S(M(A)), and A E relint{~ [ S(M(A)) = m} has to be computed, Given an instance 
Pd, c[efine g : Q ~ R1 by g(~) = S(M(A)), and aJso T = max~~Q TA(M(A)). Theorem 4.3. Let S : P + Re 
be a problem in the sense of Definition 4.2. Let A be an algorithm thai eualuates S7 and let Pd = (M, 
Q) c Pd be an instance of the corresponding parametric problem. Assume that PROBLEMS 125 (i) The function 
g is concave with respect to the lexico­graphic order (i. e., for every a ~ [0,1] and z, Y ~ Q, ag(z) 
+ (1 -a)g(y) <1,, g(az + (1 -a)g)), (ii) the mapping M is computable by a piecewise afine algorithm 
AM (see Definition 4.1) in a polynomial number of operations in terms of T, and  (iii) the combined 
algorithm, consisting of a computa­tion of an instance AM(A) c P and an application of A to solve the 
problem, is piecewise afine. Under these conditions, if the number of parameters d is fixed, then the 
d-parametric extension Pd of P can be solved in a polynomial number of operations in terms of T and the 
number of halfspaces which define Q. For some instances of the parametric problem, the complexity can 
be improved vastly by exploiting the parallelism of the algorithm A. In general, as in the case of the 
parametric minimum cycle algorithm, it is advantageous to find a piecewise affine algorithm where all 
comparisons can be grouped into a small number of phases, where each phase consists of independent comparisons. 
Remark 4.4. If the conditions of Theorem 4.3 hold for an instance Pd = (M, Q) of some parametric problem, 
then they also hold for an instance (A-t, Q ) where Q is the intersection of Q with a polynomial number 
of halfspaces. Remark 4.5. When trying to apply Theorem 4.3 to achieve strongly polynomial time bounds, 
we may encounter the following difficulty. Sometimes we have a problem that satisfies the conditions 
of Theorem 4.3, but the polyhedron Q (i.e., the domain of g) is either not given explicitly or has a 
superpolynomial number of facets. Such a situation is encountered in the parametric minimum cycle problem. 
A simplified version of the parametric minimum cycle problem used in [4] is as follows. Let G = (V, E) 
be a digraph where affine forms of d-parameters are associated with the edges. The corresponding function 
g maps sets of values for the parameters (A c Rd) to the value of the minimum weight cycle in the graph 
with the induced scalar weights. Compute A ~ Rd for which the value of the minimum weight cycle relative 
to the induced scalar weights is maximized. The function g is not defined on vectors A for which the 
graph has negative cycles relative to induced weights. The weight of a cycle c c E is an affine form, 
hence, we can compute a halfspace H. such that the weight of the cycle relative to A is nonnegative if 
and only if A c H.. The domain of g is the intersection of the halfspaces H., where c is a simple cycle 
in G. We show that the number of facets in the domain of g may be nnflOg 1. P. Carstensen [3] gave a 
construction of a family of 126 acyclic graphs, with affine forms of one parameter ~ associated with 
the edges, such that the parametric shortest (.s, t)-path function has nn(logn) breakpoints. We consider 
the graphs of Carstensen s construction, with an additional edge (t,s), with the affine form p + c (where 
c is some constant) associated with it. The resulting graphs have two-parameter affine forms associated 
with the edges, and cycles which consist of an (s, t)-path and the edge (f,s). For each graph, consider 
the polygon consisting of all values of A, p for which there are no negative cycles. It is easy to see 
that we can choose a large enough constant c, independently for each graph, such that these polygons 
have n ( gn) edges. Gusfield [16] showed that the number of facets in a parametric shortest (s, t)-path 
function is n (log ). Using a similar argument, it can be shown that the same holds for parametric minimum 
cycle. Obviously, we want to avoid computing the domain of g. In order to overcome this problem we extended 
the domain of the function g to R(d 1,. Recall that in [4] we asked for a minimum cycle of at most n 
edges in the graph. This parametric problem is well defined for any A c Rd. The corresponding function 
g coincides with g on the domain of g and is concave. Moreover, g is maximized of the domain of g if 
the latter is not empty. It follows that we can apply Theorem 4.3 to maximize g . Below we consider concave 
extensions of functions where the extended domains are polyheda with polynomial numbers of facets. Another 
way to optimize a function g with a domain of a superpolynomial complexity is to find a separation subroutine, 
that is, an algorithm that for a given A returns a halfspace that (i) contains the domain of g and (ii) 
A is on its boundary. The use of a separation subroutine is required by the scheme of [22] and can be 
incorporated into the scheme of [4] in a straightforward way. 4.2 Parametric extensions of flow problems 
The max-flow problem [11] has well-known strongly polynomial algorithms [7, 10]. We consider parametric 
extensions of the max-flow problem where the capacities and the supplies and demands at the vertices 
are replaced by affine forms of d parameters. A vector A c Rd corresponds to a set of values of the parameters. 
We refer to the resulting capacities as the capacities induced by A. We discuss problems such as finding 
A c Rd which (i) maximizes the max flow relative to the induced capacities, or (ii) allows for a feasible 
circulation subject to the induced capacities. Parametric flow problems were previously considered by 
Gusfield [16], and by Gallo, Grigoriadis and Tarjan [12]. We first consider the max-flow problem where 
the capacities are afline forms with d parameters and we COHEN AND MEGIDDO want to find a A c Rd that 
maximizes the max-flow relative to the induced capacities. Problem 4.6. [Max-Flow with Parametric Capac­ities] 
Let G = (V, E) be a digraph, let s, t E V be two distinguished vertices, and let c. (e c E) be d-parameter 
affine forms ( capacities ) associated with the edges, Find a A E Rd which maximizes the maximum (s, 
t)­flow relative to the induced capacities. Proposition 4.7. When d is jixed, the parametric max-flow 
problem (Problem 4.6)has a strongly polyno­mial time algorithm. Proof. Let g(A) be the value of the maximum 
flow relative to the capacities induced by A. The domain of g is the intersection of the halfspaces guaranteeing 
that all edges have nonnegative capacities. Denote the domain of g by Q. We show that the function g 
is concave. The maximum flow equals the minimum capacity of a cut. The capacity of each cut is an affine 
form of A. Hence, the minimum cut is a piecewise linear and concave function of A. It is easy to verify 
that conditions (ii)-(iii) of Theorem 4.3 are satisfied as well. Consider a network with both upper and 
lower bounds on the flow in each edge. Both bounds are replaced by affine forms. As in Problem 4.6, the 
goal is to find a vector A c Rd relative to which the max-flow in the induced network is maximized. This 
problem is called maz-f?ow with parametm c bounds. We wish to find a strongly polynomial time algo­ rithm 
for the problem that is based on a piecewise affine max-flow algorithm. However, this problem suf­ fers 
from similar difficulty to the one described in Re­ mark 4.5. The domain of the search consists of A 
E Rd for which the induced network has a feasible circulation. We require that for all edges, the upper 
bounds are not smaller than the lower bounds and they are both non­ negative. To guarantee feasibility 
we need the following additional requirements due to Hoffman [17]. We need to assure that all (s, i)-cuts 
allow nonnegative flow, and all other cuts allow a zero flow. The number of cuts and hence the number 
of halfspaces whose intersection defines the domain of g may be exponential. The way we overcome this 
problem is by considering a concave extension of the function g to a domain of polynomial complexity. 
Later in this subsection we define the para­ metric rein-discrepancy max-flow problem which is a generalization 
of the problem of max-flow with para­ metric bounds. We then proceed to show that the latter has a strongly 
polynomial time algorithm. Definition 4.8. Let G = (V, E) be a digraph, let u. c R+ (e ~ E) be capacities 
on the edges, and let a. E R (v E V) be supplies or demands at the vertices. A vector z = (~~)~~E such 
that O ~ x. ~ u. (e ~ E) is called a pseu doflow. The excess of the pseudoflow x at  a vertex v C V 
is excess(v) = ~ $iu x u~ i:(i, u)el? i:(u,i)cE The discrepancy of the pseudoflow x is A(z) = ~ IUV 
 excess . UEV A minimum discrepancy pseudojlow is a pseudoflow which minimizes the discrepancy. The 
minimum dis­ crepancy of a network is the discrepancy of a minimum discrepancy pseudo flow. Problem 4.9. 
[Min Discrepancy Pseudoflow] When given a network G = (V, E), with capacities Ue c R+ (e E E) on the 
edges, and supplies or demands u 6 R (W G V) at the vertices, find a minimum discrepancy pseudoflow (see 
Definition 4.8) in G. Remark 4.10. For a given instance of Prob­lem 4.9, we construct a corresponding 
instance of the max-flow problem on a network G = (V , E ) with capacities u: (e E E )and two distinguished 
vertices S1, t E V . The network G) is such that v = Vu{s , t } , E = {( V,t ) [V E V,Oi < O}U{(S , 
V) IV G V,Ui > O}UE, u~=ueife~E, uj=aVif e=(s , v), andu~= au if e = (v, t ). It is easy to verify that 
the sum of twice the value of the max-flow in G plus the minimum discrepancy in G equals ~i~ ~ lo; 1. 
Furthermore, it is easy to compute a rein-disc pseudoflow in G from a max­ flow in G . Consider the parametric 
version of prclblem 4.9, Where capacities, supplies, and demands are replaced by afine forms. The algorithm 
which for a given ~ computes the minimum discrepancy of the induced network, is piecewise affine. This 
follows from the fact that the construction of G is piecewise affine and leads to a max-flow network 
with capacities that are affine forms of A. The final step is to apply the parametric max-flow algorithm 
which is piecewise affine as well. The domain of X s for which the problem is defined has a polynomial 
number of facets. It follows from Theorem 4.3 that the parametric problem has a strongly polynomial algorithm 
when the number of parameters is fixed. One corollary of this claim is the existence of a strongly polynomial 
algorithm for the feasible circulation with parametric bounds problem when the number of parameters is 
fixed. We now consider a generalization of Problem 4.9 where we want to compute a max-flow as well as 
tcj minimize the discrepancy. PROBLEMS 127 Definition 4.11. Suppose a network G is as in Definition 4.8, 
and s, tE V are two distinguished vertices. The discrepancy of a pseudoflow in a network with distinguished 
vertices, is redefined to be A(a) = ~ IUV excess . vGv\{s,t} A rein-disc maximum (s, t)-fiow in G is 
a pseudoilow % = (xe)e~E such that excess(s) + excess(t) = O and z maximizes, relative to the lexicographic 
order, the pair ( A(z), ~(iz)) where ~(~) = excess(s). The value of the rein-disc maximum (s, t)-flow 
is the pair ( A, ~) which corresponds to the optimal pseudoflow. Problem 4.12. [Min-Disc Max-Flow] Let 
G be a network as in Definition 4.11. Compute a rein-disc maximum (s, t )-flow in G. Remark 4.13. Problem 
4.12 can be solved by two applications of a max-flow algorithm. First compute a minimum discrepancy pseudoflow 
z in the network G with the edge (t,s) added to E (see Remark 4.10). Consider the pseudoflow x on the 
network G. It is easy to verify that (i) excess(s) + excess(t) = O, and (ii) the pseudoflow z minimizes 
A(z). Construct the residual network G with residual capacities relative to the pseudoflow z. Compute 
a maximum (s, t)-flow z in G1. The combined pseudoflow x + x is a rein-disc maximum (s, t)-flow in G. 
The claim made in Remark 4.10 carries over to Problem 4.12. When capacities and demands are replaced 
by d-parameter affine forms ~ the algorithm which for A c Rd computes the solution of Problem 4.12 on 
the induced network is piecewise affine. See [20] for a related problem as follows. When given a network 
and k pairs of sources, and sinks (ai, ti)(i= 1, ...k) compute a pseudoflow z such that (i) excess(v) 
= O if V<{al, . . ..(rk. tl, . . ., t~}, (ii) f2XCWS(Uj) +excess(ti) = Oforeveryi= l,..., k, and (iii) 
z maximizes the k-tuple (excess(al), . . . . excess(m)) relative to the lexicographic order. Consider 
the parametric version of the problem, where the capacities and the supplies and demands at the vertices 
are replaced by affine forms: Problem 4.14. [Parametric Min-Disc Max-Flow] Let G = (V, E) be adigraph, 
let u, for e~ E and UU for v c V be d-parameter affine forms which correspond to capacities on the edges, 
and to demands or supplies at the vertices. Find a A c Rd which maximizes the value of the rein-disc 
maximum (s, t)-flow in the induced network. Proposition 4.15. The problem of parametric rein-disc max-jlow 
(Problem 4.14) has a strongly poly­nomial time algon thm when d is fixed. Proof. We limit the domain 
of the search to A E Rd for which the induced capacities are nonnegative. The polyhedron Q is the intersection 
of the m halfspaces u.~O(e~ E). Denote by g : Q -+ R2 the function which maps A E Q to the solution of 
Problem 4.12 on the induced network. We apply Theorem 4.3. It follows from Remark 4.13 that conditions 
(ii) -(iii) of Theorem 4.3 are satisfied. To complete the proof we need to show that the function g is 
concave. Suppose that {Al, ~z} C ~. Let z!) @ R +, (e G E, i = 1, 2) be the rnin-disc max (s,t)-flows 
in the induced network relative to &#38;, with values ( Ai, ~i), Let a$) (i = 1,2, v s V \ {s, t}) be 
the demands induced by &#38;, and u!) (e ~ E, i = 1,2) be the capacities induced by Ai. Choose a ~ [0, 
1]. Let A = a~l + (1 a)A2. The capacities induced by A are uj = au, (1) + (1 a)uy), and the induced 
demands are a: = au~l) + (1 a)a~2). We need to show that g(~ ) &#38;.X ag(~l) + (1 cr)g(X2). Let x: 
(e E E) be the pseudoflow x: = az. (1) + (1 a)ziz). Denote by excess (v), excessl (v), and excess2 (v) 
the flow excesses at a vertex v E V relative to the pseudoflows x , x (1), and X(2) respectively. Let 
g(~l) = ( AI, ~1), g(~z) = ( A2, j2), A = Z~cv\{s,,} 14 excess (v)[ and j = excess (s). It is easy to 
verify that z is a feasible pseudoflow relative to the capacities u and that excess (s) = excess (t). 
Hence, g(~ ) 21,X ( A , ~ ). Note that excess (v) = a excessl (v)+ (1 a) excess2(v), and f = excess 
(s) = ajl + (1 cr)~z. It follows that A = ~ IuL -excess (v)l wEv\{s,t}  -~ ]Cd +(l -c+: ) uGv\{s, 
t} aexcessl (v) (1 a)excessz(v)l s x (d ) -f=es%(~)l+ 9Jcv\{s, t} (1 cY)\C7L2) excessz (v) 1) = crA1 
+ (1 a)A2 . Now we can show that g is concave g(A ) ~,,. (-A , j ) ~,eX (-aA, -(1 -@) A2, afI + (1 -a)~,) 
cYg(Al) + (1 a)g(A2) . CoroHary 4.16. The following problems have strongly polynomial time a!gon thms 
when the number of parameters is fixed. (i) Problem 4.14 when we allow some vertices to be distinguished 
as demand vertices or supply COHEN AND MEGIDDO vertices, and we limit the search to A c Rd such that 
the induced demands are nonnegative and the induced supplies are nonpositive. (ii] Max-flow with parametric 
bounds. (iii) Feasible circulation with parametric bounds. Proof. Part (i) follows immediately from Re­mark 
4.4. We need to replace the search domain Q by its intersection with the O(n) halfspaces ISw >0 if v 
is a demand vertex, and UV < 0 if v is a supply vertex. It is easy to see that the intersection of these 
halfspaces equals the set of vectors relative to which the induced demands are nonnegative and the induced 
supplies are nonposit ive. To prove part (ii), consider an instance of the para­metric bounds max-flow 
problem. Let G = (V, E) be a network, s, tG V be two distinguished vertices, and 1., u. (e c E) be d-parameter 
affine forms. Assume without loss of generality that the edges incident to the source and the sink have 
zero lower bounds on the flow. We define a corresponding instance of the min­ disc max (s, t)-flow problem 
on a network G = (V, E) where u; and OV are capacities and demands. The capacities are u; = Ue /. (e 
E E), and the de­mands are UU = x{ul(u,.)EE}~~. -Z{U,(.,U)EE} ~.~ (?J E v\{s, t}). The search domain 
is the intersection of the halfspaces guaranteeing that U: > /. >0 (e c E). Consider Prob­lem 4.14 on 
the network with capacities u: and demands UV. Suppose that A c Q maximizes the rein-disc max­imum (s, 
t)-flow in the induced network, and ( A, ~) is the optimal value. Consider the original parametric bounds 
max-flow problem. It is easy to see that there exists a vector A ~ Q for which the induced network has 
a feasible flow if and only if A = O. Furthermore, if A = O then A is the solution of the original problem, 
and f is the value of the corresponding max flow. Part (iii) is a special case of part (ii), where we 
con­sider only the first coordinate of the tin-disc max-flow pair. There exist a A which induces capacities 
allowing a feasible circulation if and only if A = O. 4.3 Applications to Fixed Ratios and generalized 
flow In this subsection we discuss the relation of the para­metric extensions given in the previous subsection 
to the fixed ratios flow and the generalized flow problems. We give strongly polynomial reductions from 
these prob­lems to Problem 4.14. It follows that the subclasses of the fixed ratios flow and generalized 
flow problems, which correspond to instances of Problem 4.14 with a fixed number of parameters, have 
strongly polynomial time algorithms. Fixed Ratios Flow Problem 4.17. [Fixed Ratios Flow] Consider a 
network G = (V, E) where /, u, a and S are as in Prob­lem 1.2. Suppose s, tG V are two distinguished 
vertices. A maximum jixed ratios jlow is an (s, t)-flow of maxi­mum value, which sat isfies the additional 
constraints of a fixed ratios circulation (see Problem 1.2). Problem 4.18. [Flow with Fixed Forks] Consider 
a network G = (V, E) where a and V are as in Prob­lem 1.4. Suppose s, tc V are two distinguished vertices. 
A maximum flow with fixed forks is an (s, t)-flc,w of max­imum value, which satisfies the additional 
constraints of a circulation with fixed forks (see Problem 1.4). It is easy to see that Flow with Fixed 
Forks is a special case of the Fixed Ratios Flow problem. Proposition 4.19. Given an instance o,f the 
fixed ratios flow problem, we can construct in linear time an instance of the max-flow problem with parametric 
bounds such that (i) there is a trivial correspondence between the solutions of the two problems, and 
(ii) the number of parameters equals the number of equivalence classes reiaiive to S. Proof. Assume we 
are given an instance of a fixed ratios flow problem. Define the corresponding instance of the max-flow 
problem with parametric bounds as follows. We use the same network G and the same pair of distinguished 
vertices s, t.Let t:, u: (ec E) be the afline forms which define the lower and upper bounds. If an edge 
e is not a member of any of the pairs in S we define f; = l., u: = Ue. Otherwise, we associate a parameter 
with each equivalence class of edges. Suppose that {eil, . . . . ea~} is an equivalence class. Let J 
be the parameter associated with this set. The flow values on these edges are related. Hence, we can 
find a vector a E R$ with the following property. For every feasible fixed ratios flow z, (e c E) there 
exists /3 6 R+ such that (x,,,,..., zei~ ) = ,L?a. Define the parametric bounds UjA. U:i = Y:,, = Restrict 
the domain of the search Q ;O its intersection with the O(m) halfspaces given by /.ij ~ UjA < Ue,j . 
It follows from Remark 4.4 that Theorem 4.3 still holds when we intersect the domain with polynomially 
many halfspaces. To conclude the proof note the following. A fixed ratio flow exists in G if and only 
if there exists a A c Q relative to which the induced network has a feasible flow. Moreover, if A is 
the solution of the parametric problem, and a is the max-flow in the network induced by A, then x is 
a maximum fixed ratios flow in G. Corollary 4.20. If the number of equivalence classes relative to S 
is fixed, then the Fixed Ratios Flow problem has a strongly polynomial algorithm. PROBLEMS 129 Corollary 
4.21. When the number of forks is jixed, the Flow with Fixed Forks problem has a strongly polynomial 
algorithm. Generalized Flow The generalized flow problem [19, 15] is as follows. Given is a network G 
= (V, E) with lower and upper bounds 1., u. (e c E), respectively, on the flow, a distinguished vertex 
s E V, and a gain vector -j = (Ye)e~~. Find a pseudoflow z that maximizes under the generalized flow 
conservation conditions It is not known whether the generalized flow problem can be solved in strongly 
polynomial time. We show that when the number of edges with ye # 1 is fixed, the problem has a strongly 
polynomial time algorithm. This result still holds when vertices have supplies or demands and edges have 
lower bounds on the flow. Proposition 4.22. Let G be an instance of the generalized flow network problem 
where d edges have gains or losses, We can construct in linear time an instance G of the parametric rein-disc 
max (s, t)­flow network problem, with d parameters that has the fol!owing properties. If A and ( A, f) 
constitute the soiution of the parametric problem and z is the min ­disc max (s, t)-pseudoflow relative 
to the capacities and demands induced by A then: (i) A = O, (ii) f is the value of the maz-flow in G, 
and (iii) given A and Z, a max-flow in G can be constructed easily. Proof. Consider an instance of the 
generalized flow problem on a network G = (V, E), with capacities Ue E R+ (e E E), and two distinguished 
vertices s,t~ V. Letei =(vi, wz) eE (i= 1,. ... d) be the edges with gains or losses, and let ~i be the 
gain factor associated with ei. Define the corresponding instance of the parametric rein-disc max-flow 
problem on a network G = (V, E ) with s, t being the distinguished vertices, where the capacities u. 
(e E E ) are scalars, and the demands av (v E V ) are affine forms. Associate a pa­ rameter &#38; with 
the edge ei (i = 1, . . . . d). The network G is such that (i) E = E \ {el, . . . . cd}, (ii) the capac­ 
ities are u: = Ue (e 6 E ), and (iii) the demands au for v ~ V are ~V = z{ilu,c~} Replace et Z{ilw, =u} 
72A.i. Q by its intersection with the halfspaces /!i < U.i. The correctness is implied by the following 
claim. Con­sider A c Q. Let ( A, f) be the value of the rein-disc max-flow, and let Ze (e 6 E ) be a 
feasible rein-disc pseudoflow (i.e., A(z) = A), relative to the capacities and demands induced by A. 
Let z be a pseudoflow in G,where z~=x,(ecE ), andz:,=Ai(i=1,....d). It is easy to see that A = O if and 
only if Z is a gener­ alized flow in G. Corollary 4.23. The generalized flow problem, where only a fixed 
number of edges have gain factors other than 1, has a strongly polynomial time algorithm. Remark 4.24. 
Tardos [23] gave a strongly polyno­mial time algorithm for the rein-cost circulation prob­lem. Consider 
the parametric extension of the problem where the bounds on the flow on some edges are param­etrized. 
Tardos s algorithm is piecewise affine in these bounds. Hence, the parametric extension of the min­cost 
flow problem, where the number of parameters is fixed, has a strongly polynomial time algorithm. Inter­esting 
applications are strongly polynomial time algo­rithms for the rein-cost generalizations of (i) the fixed 
ratios flow problem, where the number of equivalence classes of edges is fixed, and (ii) the generalized 
flow problem, where only a constant number of edges have gain factors other than 1. References <RefA>[1]G. 
M. ADEL SON-VELSKII, E. A. DINIC, AND A. V. KARZANOV, Flow algorithms, Science, Moscow, 1975. in russian. 
[2] C. BERGE AND A. GHOUILA-HOURI, Programming, games and transportation networks, Wiley and Sons, New-York, 
1965. [3] P. J. CARSTENSEN, The complexity of some problems in parametric, linear, and combinatorial 
programming, PhD thesis, Department of Mathematics, University of Michigan, Ann Arbor, Mich., 1983. [4] 
E. COHEN AND N. MEGIDDO, Strongly polynomial and NC algorithms for detecting cycles in dynamic graphs, 
in Proceedings of the 21th Annual ACM Symposium on Theory of Computing, ACM, 1989, pp. 523 534. [5] 
, Maximizing concave functions in fixed dimen­sion, Tech. Rep. RJ 7656 (71103), IBM Almaden Re­search 
Center, San Jose, CA 95120-6099, August 1990. [6] , Strongly polynomial time and NC algorithms for detecting 
cycles in periodic graphs, Tech. Rep. RJ 7587 (70764), IBM Almaden Research Center, San Jose, CA 95120-6099, 
July 1990. [7] E. A. DINIC, Algorithm for solution of a problem of maximum jlow in networks with power 
estimation, Soviet Math. Dokl., 11 (1970), pp. 1277-1280. [8] D. P. DOBKIN, R. J. LIPTON, AND 3. P. REHS, 
Linear programming is Log-Space hard jor P, Information Processing Letters , 8 (1978), pp. 96 97. [9] 
D. P. DOBKIN AND S. P. REISS, The complexity of linear programming, Theoretical Computer Science, 11 
(1980), pp. 1-18. COHEN AND MEGIDDO [10] J. EDMONDS AND R. M. KARP, Theoretical improve­ments in algorithmic 
eficiency for network flow prob­lems, J. Assoc. Comput. Mach. , 19 (1972), pp. 248­ 264. [11] L. R. 
FORD JR. AND D. R. FULKERSON, Flows in networks, Princeton Univ. Press, Princeton, NJ, 1962. [12] G. 
GALLO, M. D. GRIGORIADIS, AND R. E. TARJAN, A fast parametric maximum flow algorithm, Tech. Rep. CS-TR-105-87, 
Princeton University, July 1987. [13] A. GHOUILA-HOURI, Recherche da flot maximum duns certains r.&#38;-eaux 
lorsqu on impose une condition de bouclage, in Proc. of the 2nd Int. Conf. on Oper. Res., London, American 
Mathematical Society, 1960, p. 156. [14] Une g&#38;.4ralisation de t algorithme de Ford­Fulke;son, C. 
R. Acad. Sci., Paris, 250 (1960), p. 457. [15] A. V. GOLDBERG, E. TARDOS, AND R. E. TARJAN, Network jlow 
algorithms, Tech. Rep. STAN-CS-89­1252, Stanford University, 1989. [16] D. GUSFIELD, Parametric combinatorial 
computing and a problem of program module distribution, J, Assoc. Comput. Mach. , 30 (1983), pp. 551-563. 
[17] A. J. HOFFMAN, A generalization of max-jlow rein-cut, Mathematical Programming , 6 (1974), pp. 352 
359. [18] A. ITAI, Two-commodity flow, J. ASSOC. Comput. Mach. , 25 (1978), pp. 596 611. [19] E. L. 
LAWLER, Combinatorial optimization: networks and matroids, Holt, Reinhart, and Winston, New-York, NY, 
1976. [20] N. MEGmDO, A good algorithm for lexicographically optimal flows in multi-terminal networks, 
Bulletin of the AMS , 83 (1977), pp. 407 409. [21] Towards a genuinely polynomial algorithm for linear- 
programming, SIAM Journal on Computing, 12 (1983), pp. 347-353. [22] C. H. NORTON, S. A. PLOTKIN, AND 
E. TARDOS, Using separation algorithms in fixed dimension, in Proceedings of the 1st Annual ACM-SIAM 
Symposium on Discrete Algorithms, ACM-SIAM, 1990, pp. 377 387. [23] E. TARDOS, A strongly polynomial 
minimum cost circu­lation a~gorithm, Combinatorics, 5 (1985), pp. 247-255. [24] A strongly polynomial 
algorithm to solve com­binatorial linear programs, Operations Research, 34 (1986), pp. 250-256.</RefA>  
			
