
 A METHOD OF AUTOMATIC PROOF FOR THE SPECIFICATION AND VERIFICATION OF PROTOCOLS Ana R. CAVALLI L.I.T.P., 
Universit~ Paris VII 2, Place Jussieu 7525! Paris Cedex 05 France Abstract : In this paper we apply 
a method of automatic proof to verify some properties of a computer net- work protocol. The methode used 
is defined as an extension of classical resolution to temporal ope- rators D, O, 0 and Until. We define 
a Precedes operator that is very useful for the specification of protocols. The method has the form of 
a set of recursive rules. The examples that we give are FIFO and LIFO queues and the alternating bit 
proto- col, and the properties that we verify are livennes properties of the Sender and Receiver processes 
in order to prove a liveness property of the global system. Key words : Temporal logic, resolution, 
automatic proofs, queue, protocols, specifications, liveness, safety. I. INTRODUCTION In this paper 
we apply a decision method ba- sed on temporal logic to the specification and verification of protocols 
of communication. Our goal is to give specifications and to prove automatically using the method that 
we have defined in [Ca-FAI,2] that specifications satisfy some properties of safety and liveness. We 
can consider out method as an axiomatic method where the specifications are the axioms. We construct 
them having in mind some of the safety and liveness properties that we want them to verify. But there 
will be some others not: obvious that will be deduced automatically from axioms. The method is defined 
as an extension of classical resolution to temporal operators. It has the form of a set of recursive 
rules. This n~thod, which has already begun to be implemented [Fa-La] by un interpreter in Prolog, will 
allow us to do an automatic proof of properties. In the recent past temporal logic was used as a specification 
langaKe in order to describe the Permi~ion ~ copy wi~o~ ~e all or part of ~is ma~nal is granted prodded 
that the copes a~ not made or distributed ~r direct commercial advan~ge, the ACM copyright notice and 
the title of the behavior of concurrent programs [MP], [MSSch l], [LaOwi] and some authors tried to define 
decision methods based on this logic [MW], [EC], [LaOwi]. Some define more elaborated models of temporal 
logic but specifications are very difficult to understand [MSSchVo]. Two principal problems are met 
when temporal logic is used as a specification language : I) how to define a method of specifi- cation. 
This means, for example, either using temporal logic in order to give high level speci- fications describing 
the expected behavior of the entities [MSSchVo], or being oriented by the pos- sible implementations 
using modular specifica- tions [La ]] ; 2) how to prove that specifications ar~orrect,i.e., have the 
properties that you want them to verify. In our case, protocols are defined by speci- fying the external 
visible behavior of entities. And we prove thatthey >erify some liveness proper- ties such as : "if a 
message is dequeued from the Input Queue it will be transmitted" ; "if a messa- ge is received, it will 
be enqueued in the output queue", in order to prove the following liveness property of the global system 
: "if a message is dequeued form the input queue then it will be trans- mitted, receivedand enqueued 
in the output queue". In both cases, the protocol system is modeled on a set of interacting processes 
such as the communication medium, the Sender and the Receiver. Previously, we gave the specification 
of unreliable FIFO and LIFO queues, because we can consider the behavior of the communication medium 
as un unreliable FIFO queue. We believe that the contribution of this paper can be summarized by the 
following three points : - we give a formal specification for a compu- ter network protocol in order 
that any implementation that satisfies the specifi- cation can guarantee the communication betwenn the 
different entities of the network, - the specifications describe the characteris- tics of a standard 
protocol in a general way. They don't restrict implementations, i.e., they allow different equivalent 
implementa- tions that satisfy specifications, publication and its date appear, and notice is given 
that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, 
requires a fee and/or specific permission. I00 &#38;#169; 1984 ACM 0-89791-136-9/84/006/0100 $00.75 
-we give a method of automatic proof of live- ness and safety properties. The last point above is the 
most important con - tribution. We follow the idea of [MSSch I] in using tempo- ral logic to speficy 
protocols. However, we use another logic system [MP I] which permits us to develop an original method 
for automatic proof not present in previous work.  The paper is organized in the following way : in 
2 we give a short introduction to temporal logic; in 3, the definition of the resolution method ; in 
4, the specification of FIF0 and LIFO queues ; in 5, a description and the specification of the AB protocol 
; and finally, in 6, we give the proof of the properties. 2. TEMPORAL LOGIC In this section we will 
give the necessary defi- nitions from temporal logic [Mp |]. A temporal formula is obtained from propositions, 
predicates, functions, individual constants, varia- bles, logical symbols, quantificators and temporal 
operators : ~ A (D A mean~ "henceforth A"), OA (OA means "next A"), A Until B (A Until B means "A until 
B"). O is defi--~ as usual as 7 D (O A means "eventually A") and A Precedes B as (7 A Until B), (A Precedes 
B means "A precedes B"),  where A and B are formulas. The system of temporal logic that we will use, 
having Barcan's formula and its contrary as theo- rems, i.e., O ~ x A(x) o @ x O A et x O A(x) ~ O @ 
x A(x), is obtained by adding to the usual formalizations of first order predicate calculus the following 
axioms and inference rule : A l D(A m B) m D A m ~ B O-IA ~30A  A 2 O(A ~ B) m OA o OB  A 3 OA~AAO[]A 
 A 4 A a[l (A m OA) m Q A  A 5 A 6 A Until B -(B v (A ^ O(A Until B) A Until B o <> B  A 7 A 
 El. DA A model U for a temporal formula is a set of situations (worlds) S and a binary relation (accessibility 
relation~ on S..N is a total order relation on S. Each situation has a domain and a classical interpretation 
over this domain of all first order symbols. The interpretation of temporal operator over a situation 
S (A/S denotes that the truth value of the formula --A over the situation is true), is the following 
: D A/S i if and only if A/Sj, ¥ j e i O A/Si if and only if A/Si+ 1 A Until B/S. if and only if @ 
j e i B/Sj and i A/S k ¥ k~.j The truth value associated to a temporal for- mula over a situation is 
obtained by repeating the rules above mentionned for temporal operators and evaluating in the usual way, 
in the same si- tuation, the classical sub-formulas. A valid formula is a formula that is true in each 
universe and each state and a formula is unsatisfiable if it is the negation of a valid formula. (Hugues 
and Cresswell). In the following, we will refer to a particu- lar set of formulas : the formulas that 
don't have quantificators under the scope of a temporal operator. All these formulas have a conjunctive 
normal form [Ca-Fa 1,2]. 3. RESOLUTION METHOD FOR TEMPORAL LOGIC The rules are applied to formulas, 
governed by modal operators, which are comparable in a linear model in order to find a world in which 
two formulas are simultaneously true. For example, the formulas governed by ~ and O operators are comparables 
and the corresponding rule d) ~ send us into the world in which they are simultaneously true, i.e., 
O Ei[E ; F] where E. is the recursive application of the rules 1 which can still be applied to the 
formulas E and F. Application of the rules stops when one finds two formulas that are not comparables 
or a clas- sic contradiction.  3.| Elementary rules a) ~I [(DI v D2) ; F] = (~i[D| ; F]) v D 2 b) 
E l [(C| ^ C 2 ; F] = (Ei[c I ; F]) ^ C 2 3.2 Extending rules c) E 2 [O (E A F)] = O Ei[E ; F] d) E 
2 [D E ; A F] = A E i [E ; F] e) E 2 [D E ; F A B] = Ei[E;F] A B where A = Until, Precedes f) E2[[3 
E ; F] = Ei[E ; F] g) E2[O E ; O F] = O E.I[E ; O F] v O Ei[O E ; F] h) E2[OE ; OF] = O Ei[E ; P] i) 
~2[E Until B ; F f~ B'] = (7 B' Until B) v E.[E ; F] A B' A B' ~ B 1 where A = Until, Precedes or the 
empty symbol, in this case ( B~Un~II B) is remplaced by B. 3.3 Extending (Bound Rules) j) E2[D E ; F 
~ B] = F ~ E.[E ; B] i where A = Until, Precedes k) ~2[E Precedes B ; F] = ~.[7 B ; E] i i) E2[E Precedes 
B ; F Precedes D] = (7 B Until F ^ B # F) v ~i[E Precedes D]  IO1  3.4 Extendin~ Elementary Rules 
 m) ~3[O n E Until O m B] = (n > m) v ¢ Zi[E ; B] n) ~3[D E Until B] = B v O ~.[EI ; B] o1 ~3[D E Precedes 
B) = O E.[EI ; B] p) ~3[E Precedes E] =  3.5 Classical Rule q) Z4[p ; 7 p] =  3.6 Elimination of 
r) 71[~ ^ F] ffi s) 71[~ v F] = F t) yl[~ ~] = ~ where A = 0, 0 or 0 u) 71[E A ~] ffi ~ where A ffi Until, 
Precedes v) yl[~ Precedes B] = x) yl[~ Until B] = B  3.7 Simplification of conjunctions y) 72[A ^ B 
^ C] = (EllA ; B]) ^ C 3.8 Transformations Rules z) Z3[D E ; F] ffi Zi[D D E ; F] w) Z310 E ; F] = E 
Precedes n v Z3[O(TE Until n A OnE) ; F] To complete the rules' system we must add the following definitions 
: 3.9.1 Let C and C' two formulas, we say that C and C' are resolvable if ~I[C;C'] is defined.  3.9.2 
Let C be a £ormula, we say that C is re- solvable if 7i[C] is defined. 3.9.~ Lat-(C v C I) and (C' v 
C 2) be two clauses without common variables. The inference rules C v C 1 ; C' V C 2 oZi [C;CX]-v U 
C 1 v O C 2 C v C l v C l o Ti [C] v uC l will be applied if C and C' are resolvable and is the simplest 
unificator for classical reso- lution. 3.9.4 Let S be a finite set of clauses. A deduc- tion of C from 
S is a finite sequence CI, .... ,C n such that -C is C n -and each C. (I ~ i s n) is obtained from 
a 1 sCj or two sCj, s'C k j < i, k < i, applying  one of the resolution rules. And s and s' are the 
results of applying one of the transformation ~11eR. 3.9.5 A refutation of S is a deductloL~ of tlne 
empty clause ~ from S. 102 3.9.6 Let C' and C'^ be two instances of clauses C l a~d C 2 without common 
variables. If C' is the clause obtained by resolution  3 from C' I and C'2, then there is a clause 
C 3 obtained by resolution from C[ and C 2 such that C'3 is an instance of C 3. 3.9.7 A set S of clauses 
is unsatisfiable if, and only if, there is a refutation of S.  We have a completeness proof for the 
rules without ~he UxU;il operato~ [Ce-Fa 2] and anot~her proof for rules including it [Ca-Fa I]. This 
latter proof is a prelimlnar~ version.  4. SPECIFICATION OF A FIFO QUEUE  In this section we give 
the specifications of a FIFO (first-in-first-out) and a LIFO (last-in- first-out) queues. There are two 
operations perfor- med on the queue : Enq, which inserts an element at the tail of the queue, and Deq, 
which removes an element from the head of the queue. The opera- tions Enq and Deq are asynchronous. 
We assume in this specification that the queue is unbounded and requires that values enqueued must be 
distinct. In order to make a specification of a communi- cation protocol with an imperfect communication 
medium, i.e., that can lose messages, we will give a specification of a unreliable queue. If elements 
can be lost from the queue, the infinite repetition of the Enq operation will ensu- re that the Deq operation 
returns. The following clauses give the FIFO queue specification : F I) D (O O (Deq (a) Precedes Deq(b)) 
= Enq(a) Precedes F 2) D (Enq(a) Precedes Deq (a)) F 3) D (Enq(a) Until Deq(a)) ~ O Deq(a)) F 4) D 
(~ O Enq(a) ~ ¢ Deq(a))  To obtain a LIFO queue specification it suffi- ces to change F 1 in the following 
way : F'I) [~@O(Deq (a) Precedes Deq(b)) = Enq(b) Precedes Enq~'a)) Clause F 1 requires that, if we 
dequeue a be- fore dequeuing b then we must have previously enqueued a before enqueuing b. Clause F^ 
requires that a value must be en- queued before ~eing dequeued. Clause F 3 requires that the Enq operation 
be terminated. Clause F&#38; expresses the constraint that infi- nitely often repeated Enq will ensure 
that the Deq operation will be realized. 5. THE ALTERNATING BIT PROTOCOL The Alternating Bit Protocol 
(AB protocol) is used to coordinate the flow of messages between a Sender process and a Receiver process 
which are linked by a transmission medium that can lose, de- lay or repeat messages but not reordering 
the sequence of submitted packets. The protocol provi- acknowledgment with sequence number v i. des 
reliable communication over an unreliable transmission medium by repeated transmission. It is also assumed 
that, by repeated retransmission of a packet, it will be delivered uncorrupted at some time. For the 
specification, we assume the protocol layer structure given in the following figure : I I I I   II 
', ,l i We can model, in order to gzve a complete specification of protocol, the network that con- tains 
the Sender and the Receiver processes in the following way : the Sender and the Receiver com- municating 
by means of two unreliable queues. The Sender's interface and the Receiver's inter- face with the upper 
layer are two reliable queue called respectively the input queue and the out- put queue. In this way, 
we can represent the service provided by the protocol such as a reliable queue, associating to Send(m) 
the operation of Enq(m) in the Input queue and to Receive(m) the operation of Deq(m) from the Output 
queue. The predicates that we use to specify the operations of the Sender process, the Receiver process 
and the transmission medium are : Deq(m i) : to obtain from the input queue the next message to be sent. 
 Trans (mi,v i) : to transmit a packet consisting of a message m i and a sequence number v i. Receive 
ack(v i) : to receive an acknowledgment with a sequence number v i. Receive (mi,vi) : to receive a 
packet consisting of a message m i and sequence number v i. Transack(vi) : to transmit an acknowledgment 
with sequence number v i- Exp(vi) : v i is the expected sequence number. Enq(mi) : to add a message 
m i in the receiver (output) queue. m. : i-th message of the Input queue.  v. : v. + 1 (rood 2)  
 --i l 1  Sender Process Specification The specifications of the Sender process des- cribe the interface 
between the Sender and the transmission medium, and the interface between the Sender and the Input queue. 
 The first operation of the first interface is Trans(m:,v=) used by the Sender to transmit a packet 
c~ns~sting of message m. and the cur- rent sequence number v. to the ~ransmission i .  medium. The 
second operatzon is Receiveaek(v i) used to receive from the transmission medium an Initial clause 
Deq (m o) ^ (Deq (m o) ~ (TranS(mo,V o) A v ° initial = value)) Clause S 1D((Deq(mi) Precedes Trans 
(mi, vi)) A Deq(mi) ~ (Trans(mi,v i) Until Receive ack (v i) ^ Receive ack(v~ ~ ((Deq(mi+ I) A vi+ 
I = v i) A (Trans(mi,vi) Until Deq(mi+l)) A (Receive ack(v i) ~ ~ 7 Trans(mi,vi) Clause S 2 D (Receive 
ack(v i) = ((Deq(mi+ I) O Trans((mi+],Vi+l) ^ vi+ I = vi)) The initial Clause states the conditions 
of initialisation for the transmission service. It states that no transmission occurs before the first 
message is dequeued and when the removal from the queue is completed it is the first message of the input 
queue. The Sender transmits a packet consis- ting of the initial value of sequence number and the message 
dequeued. S 1 requires that the operation of dequeuing a message precedes the transmission of the packet 
consisting of the message and the current sequence number ; and that once the Sender dequeues a message 
mi, he transmits a packet consisting of the message m. and the current sequence number 1 v. until 
he recezves an acknowledgment with the i corresponding sequence number. When the Sender receives an 
uncorrupted acknow- ledgment v:, he dequeues the next message to be sent and ma~es the current sequence 
number equal to v. plus one modulo 2. l If the Sender never attemps to dequeue another message, he 
continues transmission of the current packet (mi, vi). When the Sender receives an uncorrupted acknow- 
ledgment vi, he stops forever transmitting the corresponding packet. S 2 requires that if the Sender 
receives an acknowledgment and, then, dequeues the next messa- ge to be sent, he will transmit this_message 
in a packet with sequence number vi+ ! =v..i Receiver Process Specification In a analogous way to the 
Sender process, the specifications of the Receiver process describe the interface between the Receiver 
and the trans- mission medium by means of the Receive (mi,v i) operation and Transack(v.) operation 
; and the 1 interface between the Recelver and the Output queue by means of the Enq(m i) operation. 
 Initial Clause Receive(mo,Vo) = ¢ (Transack(vo) A Enq(mo) AExp(~o) R I) D ((Receive(mi,v i) ~ Transack(vi)Until 
Receive Receive(mi+l,Vi))  103 ^ (Receive(mi+l,Vi+ I) ; 0 ~ Transack(vi))) R2) ~ ((Receive(mi,vi) ^ 
Exp(vi) = O Enq(mi) ) ^(Receive(mi,vi) = O Transack(vi) ) A(Enq(mi) ~ Exp(~i))) R 3) 0 ((Receive(mi,v 
i) Precedes Transack(vi)) n (Receive(mi,vi) Precedes Enq(mi))) The Initial Clauses states : when the 
first packet is received an acknowledgment with it~ se- quence number is transmitted, the message is 
enqueued and the expected sequence number is equal to v O (i.e., v incremented modulo 2). O R l requires 
that to receive a packet in,lies transmission of an acknowledgment with the corres- ponding sequence 
number until receipt of a new packet with sequence number v. . = v.. When the 1+1 new packet is received 
the Recelver s~ops to send the acknowledgement. R 2 requires receipt of a packet with the expected 
sequence number and implies that at the same time or in the future the corresponding mes- sage will be 
enqueued. Further, to receive the packet implies that at the same time or in the future the Receiver 
transmits an acknowledgment with the corresponding sequence number. To enqueue mi, that came in packet 
with sequence number _vi, implies that the expected sequence number is v.. i  R 3 requires that receipt 
of a packet prece- des transmission of acknowledgment and the enqueu- ing of the corresponding message. 
 Transmission Medium Specifications The specifications describe the expected behavior of the transmission 
medium, which is an unreliable queue. Clause M I) 0(00(Receive(mi,v i) Precedes Receive (mj ,vj) Trans(mi,vi) 
Precedes Trans(mj,vj)) Clause M 2) 0 (Trans(mi,v i) Precedes Receive(mi,vi)) Clause M 3) D (00 Trans(mi,vi) 
= O Receive(mi,vi) ) MI, M2, M 3 requires that the transmission medium has the same behavior as an 
unreliable queue. In particular, M 3 states that we obtain reliable communication by repeated transmission. 
 In analogous way we define specifications M'], M' 2 and M' 3 for the acknowledgments trans- mission 
medium.  6. PROOF OF PROPERTIES We will prove a liveness property of the Sender process and a liveness 
property of the Receiver process in order to prove a liveness pro- perty of the global system Liveness 
property of Sender From the initial axiom we can deduce (by Mo- dus Ponens) that the first message is 
transmitted. Then we can affirm : Initial Clause = O TranS(mo,Vo) , at least the first message is transmitted. 
 We will prove that 0 (Deq(mj) ~ O Trans(mj,vj)) i.e., each time that a message will be dequeued (from 
the Input queue) it will be transmitted. If the negation of these clause and the set of precedent specifications 
constitutes an unsatis- fiable set then we can assert that the specifica- tions verify the property. 
The negation of the clauses is : O (Deq(mj) ^ D ~ rrans(mj,vj) operatorPr°mweS~av~nd by definition of 
the Precedes 0(-] (Deq(m i) Precedes Trans(mi,Ji)) v O Trans(mi,vi) ) Now, we apply the method in the 
following way : O (Deq(mj) ^ D q Trans(mj,vj)) ~ D (-](D/.eq(mi)PrecedesTrans(mi,v i) v OTrans(mi,vi)) 
/i÷j Rule 3.2. d) O(Deq(mj) [ ~(Deq(mj)P_rrec__eed~s Trans(mj,vj))) 7(APrecedes B) E 7 A Until B O(Deq(mj) 
^ ~ Deq(mj) Until Trans(mj,vj) ~ (mi)Precedes Trans(mi,vi)) (from S|)  i+j Rule 3.2. d) O (Deq(mj) 
^ ~Deq(mj) Until Trans(mj,vj) ^ (Deq(mj) Precede_____s Trans(mj,vj)) I Rule 3.2. i) ¢ (Deq(mj) A (Deq(mj) 
^ 7 Deq(mj)) Precedes Trans(mj,vj)) I Rule 3.5. q) O (Deq(mj) ^ (6 Precedes Trans(mj,vj))  ¢ I (Deq(m~) 
^ 6) Rule 3.6. v) [ J Rule 3.6. r) O (6) I Rule 3.6. t) 6 104 Liveness Property of Receiver We want 
to prove that O(Receive(mj,vj) A gxp(vj)) = O gnq(mj)) i.e., that each time that the Receiver receives 
a packet with the expected sequence number then it enqueues the corresponding message in the Output 
queue. This can deduced directly from specification Rp. Now, we can deduce a liveness property of the 
global system : System Liveness Property ~(Deq(mj) ~ O gnq(mj)) The negation of the clause is : O (Deq(mj) 
A D 7 Enq(mj)) We have proved 0 (Deq(mj) ~ ¢ Trans(mj,vj)) and we use the following specifications of 
the Receiver process and communication medium : D (D O Trans(mi,vi) ~ O Receive(mi,vi) ) D ((Receive(mi,v 
i) A Exp(vi) b 0 Enq(mi) ) We will give below the resolution tree corres- ponding to this deduction 
: D(7 Deq(mj) v O Trans(mj,vj)) I D(O0 7 Trans(mi,vi)vOReceive(mi,vi)) t(0 ~Deq(mj)vOTrans(mj,vj)))l 
=/ D D (7 Deq(mj)vOTrans(mj,vj)) i ÷ j Rule 3.2. d) D(7Deq(mj)vORecelve(mj,vj)) t(Q(7 (Receive(mi,v 
i) A Exp(vi) ) v Enq(m i) = 0 D~Receive(mi,v i) A Exp(vi)) v~ (mi)) i ÷ j Rule 3.2. d) D~Deq(mj) v 
O Enq(mj)) O (Deq(mj) A Q 7 Enq(mj)) ule3.2. d) 0((7 Deq(mj) ^ Deq(mj)) vO(Enq(mj) A 7 Enq(mj)) I Rule 
3.5. q) o (~, v o ~) I Rule 3.6. t) o(~ v ~) I Rule 3.6. s) ¢ (~) Rule 3.6. t)  7. CONCLUSIONS Formal 
proofs are known to be typically long and difficult to follow. Thus, to be of practical use, they must 
be automated, and it is for this reason that we have developed the method discussed here. The application 
of this method to a simple communication protocol gives us reason to expect that this method can also 
be applied to realistic more complexe protocols ; we are currently working on one such protocol. The 
system of rules without the Until operator has been implemented and an implementation of the complete 
system is in progress. Acknowledgments This paper owes much to numerous suggestions of G. Berthelot 
and to the helpful comments on a earlier draft of this paper of R. Scwartz. Bibliographic <RefA>[Bar-ScaWi] 
Bartlett, K.A., Scantlebury R.A., and  Wilkinson P.T. : "A note on reliable transmission over half-duplex 
links", CACM 12 (1969) 260-261. [Both] Bochmann G.V., "Logical Verification and implementation of protocols", 
Proc. Fourth Data Communications Symp. CACM/IEEE, 1975, 7.15-7.20. [Ca-Fa I] Cavalli A.R., Farinas del 
Cerro L., "Resolution for Linear Temporal Logic", LITP, Universit~ Paris VII, October 1982. [Ca-Fa 2] 
Cavalli A.R., Farinas del Cerro L., "A decision method for linear temporal logic", Proceedings of the 
Seventh International Conference on Automata Deduction, Napa, 14-16 may 1984, [Ca-Fa 3] Cavalli A.R., 
Farinas del Cerro L., "Specification and verification of networks protocols using temporal logic", Proceedings 
of the Sixi~me Colloque International sur la Programmation, Toulouse 17-19 Avril 1984. [Fa-La] Farinas 
del Cerro L., Lauth E., "Raisonnement temporel : une m~thode de d~duction", LSl, Universit~ Paul Sabatier, 
Novembre 1982. [EC] Emerson E.A., Clarke E.M., "Synthesis of Synchronization Skeletons from branching 
time temporal logic", Procee- dings of the Workshop on Logic of Pro- grams, Yorktown-Heights, N.Y., Springer 
Verlag, LNCS, 1981. [Ha] Hailpern B., "Verifying Concurrent Pro- cesses Using Temporal Logic", Springer 
verlag, Berlin-Heidelberg-New York, 1982. [LaO] Lamport L., Owicki Susan, "Proving Live- hess Properties 
of concurrent programs", ACM Transactions on Programming Languages and Systems, Vol. 4, n ° 3, July 1982. 
 105  [La] [La] [vm ]] [HW] [MSSc 13 tri [MSSCh 2] [MSSchVo] Lamport L., 'JSpecifiying Concurrent 
Programs Modules", Computer Science Laboratory, SRI International, June ]981. Lamport L., "What good 
is temporal  logic ?", Proceedings of Cong. IFI]? 83, Paris, North Holland, 657-667.  Manna Z., Pnueli 
A., "Verification of Concurrent Programs, Part I : The Tempo- ral Framework', Department of Computer 
Science, Stanford University, June ]98]. Manna Z., Pnueli A., "Verification of Concurrent Programs, 
Part II : Te~)o- ral Proof Principles", Department of Computer Science, Stanford University, Sept. 
]98]. Manna Z., Wolper P., "Synthesis of  Communication Processes from Temporal Logic Specifications", 
Department of Computer Science, Stanford University, Sept. ]981.  Melliar Smith M.P., Schwarts R.L., 
"Temporal Logic Specifications of dis- tributed systems", Communication au Congrbs Parall~lisme et Syst~mes 
distri- bu~s, Versailles, Avril 1981. Melliar Smith M.P., Scwartz R., "From state machines to temporal 
logic speci- fications : specifications methods for protocols standards", IEEE Transactions on Communications, 
Vol. Com. 30, N = ]2, December ]982. Schwartz R., Melliar-Smith P.M., Vogt Friedich H., "An Interval 
Logic for higher level Temporal Reasoning", Report Computer Science Laboratory, SRI International, June 
]983.</RefA>  
			
