
 A Device-Independent Network Graphics System Deborah U. Cahn Albert C. Yen Computer Science and Mathematics 
Department lawrence Berkeley Laboratory University of California Berkeley, California 94720 Abstract 
The design and implementation of a basic graphics system for a heterogeneous network environment is described. 
The design has been influenced by the SIG- GRAPH Core System, GKS, and proposals being con-sidered by 
the ANSI Technical Committee on Computer Graphics Programming Languages. It permits hierarchi- cal object 
definition, direct and indirect attribute specifi- cation, screen window management and complex styles 
of interaction. Important parts of the implementation include a device-independent database for graphical 
objects, a workstation driver which produces device code, and a device kernel which manages the display 
list. Prob-lems relating to device independence and network parti- tioning are discussed. CR Categories 
and Subject Descriptors: 1.8.2 [Computer Graphics]: Graphics Systems--distributed/net~oork graphics; 
].3.4 [Computer Graphics]: Graphics Utilities-- graphics pczckages; 1.3.6 [Computer Graphics]: Methodol- 
ogy and Techniques--device inc~pendence, interact/on techniques General Terms: Design, Standardization 
Additional Key Words and Phrases: Core System, Graphi- cal Kernel System, symbol system, workstation, 
attri-butes, graphics input 1. Introduction This paper describes the development of a new graphics system 
called the Network Graphics System (NGS) [6] which is intended to support interactive, distri- buted 
applications. In its design we have drawn from our experience with other systems; for example, we partici- 
pated in the George Washington University implementa- tion [7, 20] of the SIGGRAPH Core System [9]. We 
have also been heavily involved with the work on Core-like sys- tems of ANSI X3H3, the Technical Committee 
on Com-puter Graphics Programming Languages [1] and GKS, the ISO standard [i0]. The computing environment 
which supports com-puter science research at Lawrence Berkeley Laboratory is characterized by diversity. 
It includes several dif-ferent host computers, using different operating systems and utility software, 
connected in a local area network. Many types of graphics hardware are in use, including both calligraphic 
and raster devices, color and mono-chrome, storage tube and display-list, interactive and hardcopy, with 
or without local intelligence. Two aspects of this environment have been particu- larly critical to the 
NGS project. First is the existence of the local area network and the possibility of distributed computing. 
A network graphics system should allow dev- ices attached exclusively to a single host to be used by 
applications which run exclusively on other network nodes (due to database location, host configuration, 
software requirements, etc.). A number of operating systems are found on the net- work, in particular 
UNIX, VMS and RSX-11M. Many software packages have different versions to run on dif- ferent operating 
systems and host machines, but this graphics system potentially must deal with multiple operating systems 
in the context of a single distributed application. For example, a mapping application, using a large 
census database which resides on disks available only to a VAX-11/780 running VMS, may need to use a 
Megatek 7255 which is connected to a VAX-11/750 run-ning UNIX. A network graphics system should use inter-process 
communications in such a way that it not only hides operating system differences, but also supports a 
flexible configuration of resources, including graphics devices, host processors and file servers, according 
to applic ation requirements. The second critical feature of our computing environment is that the graphics 
devices to be supported have a wide range of capabilities. Current developments in standards for user 
interfaces to computer graphics, such as the Core System, GKS, and the ANSI XSH3 work in progress, assume 
that general-purpose, medium to high- level graphics functions can be made available in a device-independent 
way. However, existing implementa- t.ions of these standards have set some pragmatic limits, by allowing 
only a single workstation, or only homogene- ous workstations, and by not dealing with a network environment. 
One aspect of this project is a deliberate attempt to test new ideas in device-independent graphics standards 
in a particularly diverse and challenging environment. Applications anticipated for NGS include: display 
and analysis of scientific data, presentation and "business" graphics and picture editors [19, 4]. We 
explicitly did not consider applications such as CAD/CAM modeling and oth- ers in which application-specific 
hierarchical modeling or database systems are included in the non-graphics appli- cation. ~. The Design 
The Core System and our previous Grafpac package [ii] were the two starting points for the design of 
NGS. But we added major new functionality to meet the needs of evolving applications and chaxtging computing 
environ- ments. The following sections describe some significant aspects of this design.  2.1. Object 
Definition and Display Graph/ca/ objects, in NGS, are ca/led structures. The body of a structure is 
a sequence of output primi- tives ~ines, markers, polygons, test, and rester sequences), attribute selection 
.functions, and references to other structures. A reference to another structure can hove one of ttvo 
forms, one macro-like, COPY, which i~2er- polates a copy of the named structure into the ccdging structure, 
and the other subroutine-like, EXECUTE, which is a cagl by reference. Both COPY and EXECUTE can refer 
to structures which have not yet been defined (a null struc- t~zre is referenced). A structure can be 
extended or deleted at any time. Since structures can contain other structures, NGS supports hierarchical 
picture definition. Hierarchical picture definition is needed to help users compose non- trivial pictures, 
especially for applications such as pic-ture editors, chartmaking, and scientific data display which 
do not already include database systems for hierarchical models. Furthermore, dynamic picture modification 
is needed since the picture composition pro- cess is seen as a dynamic interaction between a user and 
a set of pictures displayed at workstations. These requirements meant that a simple method of picture 
definition, the one-dimensional segmentation model of Core-like systems, was inadequate. Hierarchy can 
be built on top of a Core-like system, but dynamics cannot. NGS conceptually includes a database system, 
that is, it provides procedures to create, retrieve, modify and destroy structures. This kind of simple 
modeling facility is frequently called a symbol system [6]. It does not pro- vide for inclusion of application 
data in the graphical database. The two structure invocation facilities, coPY and EXE- CUTE, support 
different application needs. Copied struc- tures lose their separate identity and are not affected by 
changes to the original; sometimes this is the desired effect. On the other hand, all instances of a 
structure called by EXECUTE imrnediateiy reflect chart~;es to the ori- ginal. tn addition to its body, 
a structure also has a header. The header initializes the attribute stale when the sbructure is ~rwversed; 
it may held a specific aftra-bute value or specify that ~rL at~'i, bute value is "inhev- ited" from its 
caller. The current att~bute sta2e is saved when a structure is called and restored when it exits. The 
structure header (and only the header) may be d~rmzmi- cally edited at any time. The separate structure 
header allows structure con- tent to be modified dynamically in a limited way. For the applications NGS 
is to support, we felt that a more ela- borate modeling system which permitted generalized dynamic editing 
of structure elements was not necessary. Attributes in NGS include the modeling and viewing transformations, 
so that the geometry of an image, as well as its appearance, can be affected by the hierarchi- cal relationships 
and dynamic interaction. The process of picture definition is independent of picture displczy. A picture 
is displayed by explicitly post- ing one or more sbructur~s to a workstation. This con- ceptually sends 
a copy of the named structures and all their hierarchical descendants to the workstation for display. 
As with the other structure invocations, a StTUC- tare can be posted before it is definzd. Orthogonality 
of object definition and picture display facilitates a very spontaneous interaction style in multi- workstation 
applications, since the creation of objects and the use of them to compose and display pictures on devices 
is completely independent. The application has completely flexible control over what image or combina- 
tion of images is displayed on each display surface. Since structures can be referenced before definition, 
top-down or other structured approaches to hierarchical object definition are permitted; the picture 
can be displayed in real-time as created. In NGS, storage of structures in a device-independent form 
is implicit and is performed above the workstation level. This differs from GKS, which stores device-independent 
segment definitions on a special kind of workstation. Both approaches contrast with that of the Core 
System, in which no device-independent t~ormation is retained and the association between segments and 
devices is determined by the state of the system at seg- ment creation time. t~ctures can also include 
non~etained or unstruc-tured data. These are output primitives, attribute selec-tions, and structure 
invocalions which exist outside of any structure. Unstructured data is not kept in any device-independent 
display file, and may disappear from a workstation when a picture regeneration is performed. Unstructured 
data allows an application to bypass the complexity and overhead associated with storage in a device-independent 
database. 168 2.2. Attributes NGS has a two tier attribute model, allou~nll an application both to 
select (or set) attribute values and, when ~p,rotm~zte , to define the ~orkstation-dependent moanings 
of those values. Each workstation maintains its mun set of attribute registers, one register for each 
of the many attributes. The value in any register can be set globally, by an explicit function which 
applies to all workstations, or locally, using a stack discipline, during traversal of a st~cture. Most 
attributes can be specified either directly, by giving a particular value, or indirectly by giving an 
index into a table of values. Each workstation has its men table for each indexed attribute. The table 
entries, ~hich can be workstation-dependent, are initialized by NGS and may be redefined by the application 
at any time. Indirect specification of attributes allows the defini- tion of an object to be device-independent, 
but permits its interpretation to vary on different devices so that the final visual effect can be the 
same (or different, when that is desired!). For example, the interpretation of color specifications could 
be workstation-dependent to com-pensate for differing hardware renditions of identical RGB coordinates. 
Polygons on one workstation could be filled with solid colors, while being filled with hatch patterns 
on another. Core-like systems only permit device- independent picture specification, not device- independent 
rendering. In addition, any interpretation, traversal, or binding of a structure to a device-specific 
image is conceptually postponed until the latest possible moment, when the device is actually displaying 
the pic- ture. Thus an image can be modified by dynamic redefin- ition of the workstation attribute tables. 
 GKS and the work of ANSI XSH3 also use indirect specification through the use of index tables, but NGS 
combines this with direct specification. Direct specifica- tion presents a simpler user interface, especially 
when index tables can vary greatly in size between devices. The mechanism of bundling can be used to 
compose additional attributes jerom a set of independent basis attributes. Each workstation has a bundle 
table whose entries are selected by the attribute bundle.J.ndex. Each bundle specifLes a selection of 
basis attributes and the values they are to assume, overriding their individual settings, when that bundle 
is selected. This bundling mechanism is similar to that included in GKS and proposed by ANSI X3H3. It 
could be used, for example, to compose an attribute called density, specify-ir~g how visually dense a 
primitive appears. This attribute would be "bundled" on each workstation as a workstation-dependent combination 
of the attributes linewidth and color. In NGS, the color attributes them-selves are bundled, permitting 
a variety of color models at the user interface. 2.~ Workstations The NGS application interfaces to physical 
devices through the abstract virtual v#orkstation. Each worksta- has at most one logical display surface 
for outtmt and may have one or more logical input devices. A workstation may have one or more "hardcopy" 
devices slaved to it, such as a paper copier or a camera. Some workstatiems are perw~znently de, ned; 
each of these is associated w~th a particular device, and is the default mechanism by which an application 
would access that device. In addition, vJorkstalions can be created dynami- caily. Several of these can 
be assigned to a single terrfti- hal and each allocated a portion of its display surface or other resources. 
The NGS workstation model is an enhanced version of the GKS workstation. "Virtual" workstations allow 
an output surface to be partitioned into different functional areas or screen windows, each controlled 
by an indepen- dent application or subprocess. Such a cEpability helps to support high-quality interactive 
systems [16]. 2.4. Interaction Graphicat intyut is performed by interaction tasks. l~z interaction task 
has an externally visible state con-s/sting of/is value and its trigger. The value is a vari- able which 
can be read by other interaction tasks, and the t~ger is a signal which can be delivered to other tasks 
on request. Interaction tasks m~J exist at several levels. At the "terminal" or physical device level 
are the tm~mitive interaction tasks which are abstractions of physical input devices. A terminal-level 
task may serve several workstations, one at a t~me or simultaneously. For exam- ple, a terminal equipped 
~ith a keyboard has an interac- tion task of type "keyboard". This task J~res a trigger ~henever a key 
is depressed, and its value is that of the key. Above the terminal level, interaction tasks are application-dependent; 
these could be at either the "workstation" or "application" levels. Input devices are much more diverse 
than output devices. Earlier graphics systems have attempted to impose some order on this diversity by 
dividing input devices into logical classes, such as "pick", "valuator", "locator", etc. In these systems, 
detailed control of phy- sical devices and simulation of absent ones is provided by the graphics system's 
input device driver, and is beyond the control of the application [ 18]. Although this model allows an 
application to be tran- sported easily from one device to another, this device independence has a high 
price. Since the way in which a user perceives an interactive system depends primarily on its pragmatics 
or ergonomics [5], an application's user interface is frequently dependent on one particular input device 
or set of devices. Transporting an application sub- stitutes a new set of devices. Because the application's 
designer has no control over the pragmatics of these new devices, the quality of its user interface may 
change dramatically. Therefore, NGS provides a model in which an applica- tion can conceivably access 
physical input devices at a low level. Furthermore, simple abstract input devices can be combined into 
more complex ones in a hierarchi- cal manner. This allows interaction styles to be individu- ally tailored 
for each terminal, while isolating the device dependencies. The NGS design does not define any specific 
logical devices or interaction styles. Rather, it provides a framework on which may be built many dif-ferent 
models of interaction, including the logical input classes of the Core or GKS. Interaction tasks communicate 
through connec-tions, a~td a task may be connected to several client tasks simultaneously. Once a connection 
is established, it must be enabled in order for data to pass across it. Ena-bling a contraction to a 
task starts its measure process, -a/t/cA is respons/b/e/or maintaining the task's value and trigger. 
NGS manages an application-level in2eraction task as a coroutine of the parent program. To define each 
such task, the application supples seven f'uncticns, ~oh/ch are invoked, through NGS, to establish or 
break a connection, to enable or disable the task, to read ttm task's value, or to perform other task-specif/c 
actions. One function serves as the task's meaxwre process, Con-trol is transferred to a measure process, 
by NGS, when the main application calls the AWAIT INTERACTION function. Until the main program's request 
is satisfied, NGS switches control between active measure processes in response to AWAIT INTERACTION 
or FIRE TRIGGER calls. Though it runs synchronously with the main application, a-n appl/cation-level 
measure process has an independent flow of control. The concept of interaction tasks is similar to ideas 
proposed by van den Bos [17] and Anson [2, 3]. While these authors each proposed special languages for 
defin- ing input devices, we wanted NGS to work within the lim- its of existing languages and programming 
systems. Thus, rather than being definitional in nature, our model is procedural, involving explicit 
communications between independent tasks. Because an interaction task is a coroutine of the parent application, 
it may reference glo- bal program variables as well as call on any NGS function. Using coroutines allows 
the establishment of multiple threads of control within a single host operating system process. In general, 
device-independent graphics systems find it very difficult to avoid placing limits on the use of dev- 
ices so that the hardware appears more homogeneous to the device-independent software. Workstation level 
interaction tasks are one way of bypassing these limita- tions. They can be used to perform complex functions, 
including echoing, local image transformations, and modification of workstation attribute definitions. 
NGS also includes another mechanism, escape functions, which allow access, when needed, to the device- 
dependent capabilities of workstations. Reasons for their use include improved performance, more precise 
control over the appearance of the image, and use of the works- ration for special purposes.  3. The 
Implementation Internally, NGS is divided into several major com-ponents (Figure 1). As well as partitioning 
the work of implementatior~ the divisions represent cleavage points at which the code could be divided 
in a distributed sys-tem. These components include: user interface func-tions, device-independent structure 
database, worksta-tion driver, and device kernel. 3.1. Device-Independent Structure Database Structure 
data is kept in the Device-Independent Structure Database (DISDB). The interface to the DISDB is procedural, 
and is used by both the workstation-independent and workstation layers. The workstation-independent layer 
creates, modifies, and deletes informa- tion in the database, while the workstation-dependent layers 
read structure information in order to update their displays. The DISDB provides a means of hiding the 
detailed characteristics of the workstations from the workstation-independent layers. This makes it easier 
to implement new workstation types. Since the upper layers cannot anticipate the requirements of each 
works- tation, transmission of data from the DISDB to a workstation is controlled from below by the workstation 
driver itself. APPLICATION   APPLICATION INTERFACE LAYER  WORKSTATION- ] INDEPENDENT  LAYER DEVI 
CE- INDEPENDENT STRUCTURE DATABASE  I wORKSTATION ] DRIVER DEVICE K£RNEL J  TERMINAL Figure 1. Flow 
of Control in NGS A primitive locking mechanism is a part of the DISDB. The entire database is locked 
during a major res- tructuring (such as caused by the DELETE ALL STRUCTURES command), but ordinarily 
workstation drivers are allowed to read a structure body (for example if posted or other- wise needed 
at that workstation) concurrently as the workstation-independent layer is extending it. To sim- plify 
synchronization of writing and reading, the workstation-independent layer notifies the appropriate workstations 
when it sends a packet of data to the data- base. A flexible approach to dynamic storage allocation has 
been taken, since NGS will be running in various environments. The manager of the DISDB accepts data 
descr/~vtors rather than data itself. Storage is usually allo- cated or deallocated dynamically by the 
process which is controlling the generation of the data to fill the storage. This technique is less cumbersome 
than requiring the application to use fixed length blocks only, making multi- ple requests until all 
the information has been passed. 3.2. Workstation Driver The workstation driver is responsible for converting 
device-independent structure definitions into device-specific graphics instructions. A major source of 
com- plexity at this level is the implementation of attributes. At the user level, each attribute corresponds 
to a rag~ster in the workstation; the value in this register can be set in a structure header, structure 
body, or directly by the applications program. The attribute registers are saved when a structure is 
invoked and restored upon exit. This view is a generalization of the way real graphics dev- ices work. 
However, different devices have widely differ- ing sets of hardware registers while the graphics system 
is required to present to the user a uniform set of attri- butes. If there is no hardware register corresponding 
to a specific abstract attribute, then it must be simulated. Usually this means that the value of the 
attribute must be bound within the body of a structure when it is translated into device code. For example, 
NGS defines separate color attributes for different contexts, "vector color", "text color", etc.; however, 
real devices com-monly have only one register to control color. Therefore, it is necessary to incorporate 
code, which sets this regis- ter, into the body of a translated structure whenever a primitive in one 
context is followed by one belonging to another. Other attributes, such as linewidth or text precision, 
may cause the output code to contain different combinations of primitives depending on their values. 
Such artificial bindings must take place when a structure is translated, even though they are not contained 
in its device-independent structure definition. The requirements for hierarchical picture definition 
and device-independent attribute specification compli- cate the design of the driver. A structure can 
be invoked by several callers and inherit a different set of attribute values from each. Therefore, for 
each structure, the driver maintains one or mere incarnations, each of which binds a different set of 
attribute values in its body. An incarnation need not occupy real physical storage. For devices that 
are refreshed from the host machine's memory (non-display-list or "unbuffered" devices) each incarnation 
can be generated "on the fly". On the other hand, with display list devices, each incarnation must be 
computed and stored separately. The driver processes a structure only when it is immediately going to 
be displayed, since at this point the attribute environment is fully known. This attribute environment 
is compared with those of the existing incar- nations of the structure to find a match. If a new incar- 
nation is required, it can be generated in one of two ways depending on the properties of the mismatched 
attri- butes. An attribute may be controlled by a specific device register, but that register is shared 
by other attributes, e.g. vector color or text color if both are used in the same structure. In this 
case, the attribute is set by a specific device instruction. If there is an existing incar- nation such 
that all mismatched attributes fall in this category, the workstation driver makes a new incarnation 
by replacing the required instructions in the existing one. An attribute may be expressed by different 
combina- tions of primitives depending on its value, for example viewing, modeling, and depending on 
the device, polygon fill style. ~uch attributes must be bound during code generation. To change these 
attributes, the driver retrieves a device-independent copy of the structure and retranslates it. The 
workstation driver operates in the context of a virtual workstation. However, it also performs the trans- 
lation from device-independent virtual workstation func- tions to specific device instructions. This 
translation, whose parameters are obtained from the device kernel when the virtual workstation is opened, 
includes convert- ing from virtual screen to physical screen coordinates, and changing references to 
virtual index tables into references to physical ones, 3.3. Device Kernel The device kernel manages a 
single physical worksta- tion, or terminal. This includes creating virtual worksta- tions and allocating 
device resources among them; such resources include display screen space and hardware index tables. Since 
it controls regeneration of the displayed pic- ture, the kernel is responsible for managing display list 
memory for the workstation drivers. In this, it deals only with device-code translations of structures, 
which the drivers transmit. The driver stores these structures, controls their visibility, and also implements 
the struc-ture invocations, COPY and EXECUTE. Computer Graphics Volume 17, Number 3 July 1983 3.4. Network 
Interface NGS accesses the local area network with the set of user-level functions described in [12] 
and [13]. These are built on top of the ARPA TCP/IP [i4, 15] communications protocols. The interface 
functions support network-wide address space, plus name services which can translate a logical resource 
name to a specific network address. A server process may be associated with a network address; then a 
client process can, by opening a connection to the designated address, rendezvous with the server. When 
two processes rendezvous, a virtual c/reu/t is established between them. This is a reliable bi-directional 
link which can handle an indefinite amount of data. A single server process can converse with many clients 
at once and can control the order in which clients' messages are received and processed. Each graphics 
terminal is known on the network by a unique logical resource name. While a terminal can also be addressed 
by its specific network address, use of the resource name insulates user programs from changes in device 
configuration. Thus, to use the terminal as a graphics workstation, a user program opens a connection 
using the terminal's resource name, which activates a server process. This server always includes the 
device kernel, but since the network partitioning may depend on device type, it may also include higher 
levels of NGS. When a user program wants to create a virtual workstation, the server process obtains 
a new network address and returns it to the client while associating itself as the server. The new workstation 
can then be used by any process which has obtained its address. In addition, the virtual workstation 
can be associated with a resource name, so that its specific network address need not be known. We have 
assumed that programs using vir- tual workstations will cooperate; thus, access control and other protection 
mechanisms are outside the scope of NGS. 4. Conclusions NGS is a high-level device-independent graphics 
sys- tem which supports hierarchical object definition and dynamic picture changes. It also allows an 
application to sacrifice device-independence for close centre[ of a specific device if so required. To 
implement these func- tions on a wide range of graphics devices requires a com- plex implementation, 
which is made easier by clearly separating the device-independent and device-dependent parts. Another 
division separates the functions of device code generation from display list management. The net- work 
interface allows a single device to host several vir- tual workstations, each controlled by a separate 
process. At this time, NGS is in the implementation stage, with drivers initially planned for the Tektronix 
4014 and Megatek 7255 graphics devices. We plan to instrument this implementation for performance analysis. 
With information on the amount of data passed to and from each module, we will be able to refine the 
interfaces between NGS subsystems in order to reduce the amount of network overhead. 5. Acknowledgements 
The authors wish to acknowledge the contributions of the membership of ANSI X3H81 and the participants 
in the ACM-SIGGRAPH Workshop on Graphical Input Interac- t.ion Techniques. We would also like to thank 
Bill Johnston for many valuable discussions and general encourage-ment. This work was supported by the 
Applied Mathemati- cal Sciences Program of the Office of Energy Research, U.S. Department of Energy under 
Contract DE-AC03-76SF00098 and by the U.S. Defense Advanced Research Projects Agency under Order 4306. 
 References <RefA>1. ANSI X3H31. Functional specification of the Programmer's Hierarchical Interactive Graphics 
System. Working Document ANSI X3H31 / 82-45 (1982). 2. Anson, E. The semantics of graphical input. Corn-~rut. 
Gr. (Prec. Siggraph '79) 13, 2 (Aug. 1979), 113-120. 3. Arisen, E. The device model of interaction. 
Cornput. Gr. (Proc. Siggraph '82) 18, 3 (July 1982), 107-114. 4. Benson, W.H. and Kitous, B. Interactive 
analysis and display of tabular data. Comput. Or. (Proc. Siggraph '77) 11, 2 (1977), 48-53. 5. Buxton, 
W. Lexical and pragmatic considerations of input structures. Comlrut. Gr. 17, I (Jan. 1983), 31-37. 
6. Cab_n, D.U., Johnston, W.E., and Yen, A.C. Network Graphics System Design Document, Version 1.0. Techni-cal 
Report LBID-644, Lawrence Berkeley Laboratory (Nov. 1982). 7. Foley, J]D. and Wenner, P.A. The George 
Washington University Core System implementation. Corn/mr. Gr. (Prec. Siggraph '81) 15, 3 (Aug. 1981), 
123-132.  B. Foley, J.D. and van Dam, A. Fund~me~als of Interactive Computer Graphics. Addison-Wesley 
(1982). 9. GSPC (SIGGRAPH-ACM). Status Report of the Graph- ics Standards Planning Committee. Cornput. 
Gr. 13, 3 (Ang. 1979). 10. IS0. Graphical Kernel System (GKS): Functional Description. ISO TC97/SCS/WG2 
Nl17 (Jan. 14, 1902). 11. Johnston, N.E., Cahn, D.U., and Johnston, W.E. Graf- pac. LBL Report UCID-8094, 
Lawrence Berkeley Labora- tory, Berkeley (Jan. 1979). 12. Joy, W. et. al. 4.2 BSD System Manual. Draft 
Report, Department of Electrical Engineering and Computer Sci- ence, University of California, Berkeley 
(Sept. 1982). 13. O'Dell: M.D. The CSS programmer's network seman- tic model. Internal Report, Lawrence 
Berkeley Labora- tory (Nov. 1982).  14. Postel, J. DoD Standard Internet Protocol. RFC 760, IEN 128, 
USC Information Sciences Institute (Jan. 1980). 15. Postel, J. DoD Standard Transmission Control Proto- 
col. RFC 761, IEN 138, USC Information Sciences Insti- tute (Jan. 1980).  18. Rosenthal, D.S.H. Managing 
graphical resources. Cbrnput. Gr. 17, i (Jan. 1983), 38-45. 17. van den Bos, J. Definition and use of 
higher-level graphics input tools, Comp~i Gr. (Proc. Siggraph '78) la 3 (Aug. 1978), 38-42, 18. Wallace, 
V.L. The semantics of graphics input dev-ices. Comput. Gr. 10, 1 (Spring 1976). 19. Yen, A., Holmes, 
H., and Wood, P. Moving interactive thematic mapping from mainframe to mini: some design possibilities 
and development experience. Proc. IntBrn~- l'ional Symposium en Computer-Assisted Cartography  (AUTO-CARTO 
IV), Vol. II (1979), 379-389. 20. Yen, A.C. DI/DD Interface Proposal. Internal Report, Lawrence Berkeley 
Laboratory (Nov. 1980).  </RefA>
			
