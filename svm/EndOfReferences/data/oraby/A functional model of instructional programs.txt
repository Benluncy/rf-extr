
 A Functional Model of Instructional Programs Abimbola Salako Computer Science Department University 
of Pittsburgh Pittsburgh, Pennsylvania 15260 ABSTRACT A functional model of instructional programs 
(for Computer Assisted Instruc- tion -CAI) that describes all program types as being essentially composed 
of a set of primitive building blocks is pro- posed. The variables that account for the apparent distinguishing 
character- istics of these programs are then inter- preted in the light of this model and a procedure 
is provided for reducing the different program types to their ele- mentary building blocks. Starting 
with the primitive building blocks, it is shown how programs of varying descrip- tions can be generated 
by an appropriate choice of parameter values. This model provides better insight on the require- ments 
and structure of application- oriented CAI languages, software, and systems. Furthermore, the model pro- 
vides an easy means of generating CAI synthetic programs for the purpose of simulation modeling directed 
towards instructional systems design, analysis, and performance evaluation. i. INTRODUCTION The Computer 
Assisted Instruction (CAI) application system can be divided into three interconnected subsystems, namely: 
the designer, the author, and the student subsystems. The designer subsystem plays a supporting role 
by providing the tools needed by the author to convert his instructional specifi- cations into working 
programs and those required by the student to communicate with the system in taking his lessons. However, 
the pattern of interactions and resource utilization (i.e. the applica- tion workload) is determined 
by the be- havior of the student at his terminal and the structure of the instructional program (henceforth 
program) with which he interacts. The model developed here is a characterization of this program- student 
combination. The next section gives a brief over- view of instructional programs and iden- tifies the 
parameters that account for the differences among them. Through the use of an analogous model, the following 
section proposes a functional structure suggesting that all programs are com- posed of a basic set of 
building blocks. The parameters accounting for program diversity are then interpreted in the light of 
this model and the final sec- tion discusses an example. 2. CLASSIFICATION OF INSTRUCTIONAL PROGRAMS 
 The origin of CAI can be credited to the work done by SkinnerI5], and Crowder[3]. These two psychologists 
are credited with the concepts of linear and non-linear programming leading to programmed instruction 
and scrambled texts (the precursor of CAI) which were limited in scope and application. How- ever, since 
the advent of the digital 393 computer, there has been an explosion in the number, scope, and diversity 
of instructional systems and languages (see Bitzer[2], Suppes[6], and Zinn[7]. A study of these programs 
would show that there are three factors accounting for differences among them, namely: the level of 
interaction afforded the student by the system, the means by which the instructional content presented 
to the student is obtained, and the decision algorithm by which subsequent instruc- tional steps are 
selected. The level of interaction is constrained by software and hardware factors (lack of voice communication, 
problem of pattern recognition, slow slide access mechanisms, expensive student terminals, speed and 
memory size --see Adams[l]). Of interest here are the software limitations typi- fied by constrained 
response formats and teaching logics. Response formats fall into two classes--constructed (which is 
more desirable but hitherto unachievable in its full generality) and fixed format (Yes-No, True-False, 
or Multiple Choice). Instructional logic, on the other hand, can be class- ified into three levels based 
on level of interaction they permit. At the top is problem solving; followed by drill and practice, and 
tutorial logic; and at the bottom are games, simulation, and inquiry logic. There are two methods for 
selecting the instructional content --selective and generative method. In the selective method, system 
actions and reactions are pre-programmed so that the computer serves essentially as an information storage 
and retrieval medium without actively participating in the instruc- tional process. As opposed to the 
pas- sive role played by the computer in the selective method, the generative ap- proach attempts to 
develop adaptive programs with algorithms for making de- cisions of a dynamic nature throughout the instructional 
process. Unfortu- nately, the technological limitations of the present-day computer systems impose a 
great barrier to the full implementation of such systems. Control of instructional sequencing can reside 
with the student, with the system, or both. There are two levels of sequencing. At the higher level is 
the inter-sequence branching with pro- gression from introduction to main les- son, to practice sequence, 
and termina- ting with a review sequence. At the lower level is intra-sequence branching which could 
be either linear or non- linear (see fig. i). In linear branching, there exists only one subsequent step 
to any given step (Skinnerian logic) while the non-linear branching selects the subsequent step from 
an array of alternatives based on a set of tested conditions. These branching conditions can be classified 
as either intrinsic (restricted to the immediate environment of the instructional step) or extrinsic 
(derived from variables beyond the im- mediate environment). From the above discussion emanate certain 
characterizers in terms of which an instructional program may be described; content generation mechanism, 
branching control and conditions, program linearity, response formats, and teaching logic. x i-x >x 
> Linear Sequence f f X ~ X, >x >x ) / ~x Non-Linear Sequence Figure 1 Branching Modes 3. A FUNCTIONAL 
STRUCTURE Functionally, an instructional program or system can be compared to a manufacturing shop where 
some product is fabricated by routing the unfinished pro- duct through different processes at dif- ferent 
stages of its fabrication. Each machine group representing these stages may add new components, refine 
a compon- ent, or correct specific defect so that a perfect product comes out of the shop. Such a shop 
would have a supply of ma- terials and machine tools designed to perform specific functions. Figure 2 
represents the essential details of such a shop. The arrows represent alternate paths a product may take 
during the course of its fabrication. Fach T i is a machine tool which remains idle until the arrival 
of a product; T 1 is the starting machine that must be activated to initiate the manufacturing process; 
 and T n is the last machine to check that the product comes off the assembly line without any defect. 
The analogy with an instructional program may be obvious -- the initial setup before activation rep- 
resents the program; each tool represents a program unit; the store of materials represents the memory; 
and activation of the process a lesson in which the pro- An instructional Unit, U is a pair: duct represents 
the student. U := {X, F} T Jl /4----I T3 ~ / i k ~ Finished  TI ;I T6-. Figure 2 An Instructional 
Program Model From the above analogy, three distinct functional entities emerge: an information source, 
a collection of certain entities that are capable of being activated, and a distinct member of this group 
through which the entire system must be activated. Formally then, an instructional program, PROG can 
be defined as a triplet: PROG i= (S, U0, M}  where S is an unordered set of units (Ui, i = i, 2, ..., 
n), U 0 e S (U 0 is the starting unit), and M is the memory system. Members of S are independent entities 
each having a set of potential links, some of which are activated upon activation of the member. In 
the rep- resentation of PROG in fig. 3, both the inter-unit and unit-to-memory links are inactive in 
the program structure but are activated when the corresponding unit becomes active. M may be viewed as 
an information net containing packets of information at its nodes and links be- tween the nodes represent 
paths for the exchange of information. M stores and organizes the information in a way that would facilitate 
ease of access. \\ \\ "-. Uo /  I \\ \\ "~ .. \ I / I ', \". / I \. \ \ I / I \\ ul ~ "x \ / / / ! 
/ / I \ / / \\ / \ \  uj / Figure 3 An Instructional Program where X is an ordered set of frames, 
and F is a decision function such that the domain of F, F D is a set of parameters; and its range, F 
R is a set of instruc- tional units (simply, units) such that F R ~ S. Let a unit U i = {Xi, F i} where 
 X i is the set of frames constituting Ui, and F i is the decision function for unit Ui, then, F~ = 
{Uil , Ui2,...,Uij} = S U i where Uik e S for K = 1,2,...,j and F~ = {Pij, Pi2,-.-Pik } = Pi is the 
total set of parameters associated with frames which are elements of X i. When the above relationship 
holds, U i is called the predecessor unit to the set U~(F~) while each member of U~ is called a successor 
 unit to U i. Effectively, F, the decision function is a selection operator that selects a successor 
to a given unit based on the values assigned to the parameter set in the given unit. We shall denote 
 the cardinality of F~ (or U~) as C(F~) or S . , , C(Ui). Thls cardlnallty is an important property 
of a program as will be shown below. Fi, as an operator, establishes a relationship between U i and 
members of U~ Let us represent this relationship b~'"รท" (we shall call "+" the branching operator). 
Then, U i รท Uij iff U i e U~ 3 i" It may be obvious that the branching operator is neither transitive 
nor reflexive, thus: U i + U i is a non-valid operation, and U i รท Uj and Uj รท U n #> U i + U n however, 
U i + U n iff U n e U i s Now that we have introduced the concept of frames and parameters, it is necessary 
that we explain what they are. A frame is the primitive element of an instructional program consisting 
of the tripletz {C, P, a} where C is the core of the frame, P is a set of parameters, and a is an activation 
pointer. The core is further divided into the nucleus and peripheral. Frames belong to certain classes 
as defined by the contents of their nuclei. A lesson is the path traversed through an instructional 
program. For- mally, a lesson, L is a quadruple: {T, U0, M,-รท*} where T is an ordered set of units 
such that T~S, U o e T, U 0 is the starting unit, M is the memory system as defined for program, and 
-รท* is a transitive operator called the sequencing operator. -รท* selects and activates a successor to 
a given unit at each decision point in the lesson. Let a lesson L i = {Ti, Uoi , M, -+*} where  Ti = 
{Ui I, Ui2, Ui3,...,Uim} then U0 = Uil (identity) and Ulj รท Ui']+l for j = 1,2, ..., m -i. Thus a lesson 
is a threaded sequence of predecessor/suc- cessor units through a program. In this light the sequencing 
operator can be defined as a path finding operator. Further, a path exists between two units A and B 
if either: (i) B e A s (i.e. A รท B holds or B is a successor of A) or (ii) There exists an ordered set 
of units UI, U2, U3, ..., U n such that A+ U I, U i รท Ui+ 1 for i = I, 2, ..., n -i, and U n รท B. Using 
a graphic representa- tion, with nodes as units, one-pointer arrows (--%) representing the existence 
of "รท" relationship between two units, and a full arrow representing a path, a lesson (without the memory 
system) may be represented as in Figure 4. 4. DISCUSSION Instructional programs are made up of an unordered 
set of units which con- stitute the building blocks while lessons contain ordered set of units. Again, 
the importance of activation cannot be over- emphasized--a program is only a sequence of computer codes 
that exist as passive entities; however, upon activation they become processes that perform certain functions. 
The memory system remains in the background with inactive links to the units. However, once a unit becomes 
active so does its link to the memory system and the exchange of in- formation begins to take place. 
This information can be divided into three classes: instructional data base, instructional procedures, 
and student and instructional records. The data A uny B  Figure 4 A Lesson (Path between units A 
and B) base contains such information as the curriculum, course indexes, dictionaries, tables, and algorithms. 
The instructional procedures contain the application pack- ages such as common routines, and general 
procedures. The student records contain permanent student history, student active records, and current 
performance records. The motivation for the unit structure as an ordered collection of frames is based 
on the concept of a complete inter- action on a single entity of an instruc- tional material. The entity 
(frame) may be textual or operational material or it may be a question or a simulation or gaming submodel 
to be studied. By a com- plete interaction is meant the exchange of information between the system and 
the student until it becomes obvious that the concept introduced by the material is understood. The 
frame has been defined above as the primitive constituent of an instruc- tional program consisting of 
a core, set of parameters and an activation pointer. The core is a sequence of com- puter codes (in any 
language) which needs an activation pointer to indicate the point at which execution must commence. The 
parameters on the other hand, are registers through which the frames com- municate with the memory system 
and other frames. They also serve as the para- meters of the unit decision function. Functionally, the 
parameters fall into three classes--those that transmit in- structional information, those that transmit 
curriculum and student perfor- mance data, and those that are local to the frame, i.e. are set and reset 
by the frame. Parameters from the first two classes are called extrinsic parameters while those from 
the third are called intrinsic parameters. To further elucidate the concept of a frame, consider the 
common operation of accepting input from a student, pro- cessing the input, and giving a response. The 
sequence of operations required include: input preprocessing (editing, format changing, etc.), content 
(sem- antic) analysis, and checking correctness of the answer. System response might be to give the student 
some cues and hints, answer the question for him, supply ad- ditional information to him, or alter- natively, 
give him some reinforcement if he answered correctly. Each of these operations may constitute a frame. 
 The rest of this section deals with the variables identified in the first section in the light of the 
above struc- ture. The content generation mechanism, the response format, and the teaching logic are 
all determined by the content and type of units in the program. For example, in a selective program, 
the frame core is a sequence of pre-defined  computer steps (codes) and there are few Branching mode 
-Non-linear frame parameters since few instructional Teaching logic -Tutorial, drill  parameters are 
required. Furthermore, and practice, and inquiry  the memory is small and compact since the data base 
and instructional procedure Response format -Fixed and will be large. Further, a great number constructed 
 of student and instructional records will be needed for efficient decision making. The frame core would 
consist of instruc- tion prototypes and a larger number of parameters would be required for each frame 
to transmit information between itself and the memory. Branching Control--This determines the procedure 
by which a unit is termi- nated and the subsequent unit selected. For strict student control, C(F R) 
= 1 but C(F D) > i. However, for computer control, the values of C(F R) and C(F D) will depend on program 
linearity. Instructional Sequences--This is strictly a function of the unit type. Certain units are 
predominant for particular types of sequences. Program Linearity--As earlier stated, program linearity 
is a function of the cardinality of F R and F D. Let PROG = {S, Uo, M} where S = {Uo, Ui,... , U n} 
 and Uj = {Xj, Fj} for Uj c S then if for every j , C(F~) = i, then PROG is a linear program. On the 
other hand, if C(F~), > 1 we have a non-linear program. 3 Also, there are different types of alter- 
native paths that can be traversed in a non-linear program. In figure 5,a is the conventional remedial 
branch, b is the path for the normal sequence, and c is a skip (for the smart students). Figure 5 Paths 
in a Non-Linear Program 5. AN EXAMPLE An example representing a fairly general and relatively common 
instruc- tional program will be discussed in order to lend further clarification to the con- cept and 
structure of frames and units. In addition, the example will show the alternative representational forms 
for depicting the instructional model as developed above. The program to be modeled has the following 
characteristics: Content generation mechanism - selective Branching control -Both system and student 
controlled A discussion of the detailed pro- cedure for program reduction and genera- tion of the unit 
forms is beyond the scope of this paper; for further details, see [4]. The result of the analysis of 
the example is the derivation of two basic unit prototypes from which individual and unique units protraying 
different instruc- tional characteristics can be generated. In essence, the program definedconsists of 
two basic types of units--a Textual unit, and a Question unit (see figures 6 and 7). The Textual unit 
corresponds to the sequence of frames presented by the system, the first of which consists of textual 
information (presentation of a concept, definition, example, or pro- cedural instruction) as opposed 
to a question. The Question unit, on the other hand, has a question that must be answered as the major 
frame in the unit. Notice that in each of the unit types, the sequence and ordering of frames differ 
widely. Further, the two unit types are also applicable to programs for simulation and gaming if we view 
the Textual unit as presenting the description of a model to be simulated or a move step in the implementation 
of a gaming problem while the Question unit requests values for certain model parameters or equiva- lently, 
a game move by the student.  Textual unit ~---~REQ. ANS. ~ Question Unit Figure 6 Unit Charts  In 
the unit chart (fig. 6) units are represented by the paths (and the inter- mediate nodes) between the 
root and each terminal node (where all backward di- rected branches are treated as loops). Each node 
and the associated arrow cor- responds to a frame while the terminal node denotes a pointer or branch 
to another unit. Though terminal communi- cation descriptors have been used to identify frames, it must 
be emphasized that frames are composed of these com- munications and the processing functions (response 
analysis, prototype gener- ation, I/0 formatting, data collection, library searches, etc.) associated 
with them. The arrows leading to the identi- fiers may be interpreted as representing these processing 
functions. While the unit chart provides a graphical description~of the unit, it does not accentuate 
eh~theimportant char- acteristics of the units. ~FxI{ this reason, an alternative representation-- the 
compact unit prototypes is proposed (see Fig. 7). The procedure for gener- ating the compact forms 
from the unit charts is presented in [4]. In the unit prototype, all loops are enclosed in a common 
circle and loops inside loops are similarly identified by concentric circles. Further, variations in 
units TEXT I R~Q. INFO.'~ t \ \ ~SERV. REO./j 5   ~-~GOAHEAD QUI.~STION /( ;\  E glZ 227 / 
REQ. INFO. k SERV. REQ. / /  Figure 7 Compact Unit Prototypes represented by the absence of certain 
frames are depicted in this new form by the same circles. Thus, an encircled set of frames represents 
a loop that can be executed n times, for n = 0, i, 2, 3,... Generally, there will be an upper limit on 
n (for each possible loop) conditioned by student variables or other instructional parameters. Using 
the derived textual unit chart in figure 6 one could generate a unit starting from the root and following 
the leftmost branches that eventually termi- nate at the node marked TEXT. This unit corresponds to a 
system controlled unit in which the system presents textual ma- terial (definition, example, explanation) 
to the student (chart root) who responds by keying in a code indicating that the system should go ahead 
and present the next material. The keying in of a "GO AHEAD" code by the student indicates that he understands 
or is satisfied with the material presented to him. Suppose this were not the case, then we would be 
taking the rightmost branch from the root to the node marked "REQ. INFO.". Here the student will request 
additional infor- mation on the material presented. After the request is answered, the student may request 
further information (leftmost branch looping back to node marked "REQ. INFO."), key in a "GO AHEAD" 
 (middle branch), or select the next ma- terial he would like to learn (rightmost branch) . The first 
case we considered above (i.e. taking the leftmost branches on the chart) can be obtained from the Textual 
unit prototype of fig. 7 by going through the loop zero times (i.e. skipping the loop completely) and 
then taking the right branch from the bottom of the loop to the node marked "GO AHEAD". The second case 
corresponds to going through the loop more than once, i.e. performing the sequence~ "REQ. INFO.", "SERV. 
REQ.", "REQ. INFO.", "SERV. REQ.",... and the last time through the loop take a left or right branch. 
 6. CONCLUSION In conclusion, it should be pointed out that the selection of paths to be followed in 
a unit are functions of student and instructional parameters and for each node, probabilities will be 
spec- ified for the alternative branches. Also, the different frames have certain resource usage characteristics 
which are quanti- fiable. A detailed discussion of value assignment for the branching probabilities and 
the resource usage distributions of the frames is given in [4]. In con- clusion, the reader's attention 
is drawn to the implications of the model structure on the design of a data structure and the control 
structure of a programming lan- guage for instructional systems.  ACKNOWLEDGEMENT  The author would 
like to express his gratitude to Prof. Richard L. Venezky of the University of Wisconsin Computer Sciences 
Department for his valuable suggestions and guidance through the research work reported in this paper. 
The work was partially supported by the National Science Foundation under re- search grant No. GP7069. 
 REFERENCES <RefA>[i] E. N. Adams, Technical Considera- tions in the Design of a CAI Computer System. IBM 
Research Report No. RC2557, IBM Research Division, Yorktown Heights, New York, July 29, 1969.  [2] D. 
L. Bitzer, and D. Skapadas, The Design of an Economically Viable Large Scale Computer Board Edu- cational 
System. Computer Based Educational Research Laboratory Report No. EERL X-5, University of Illinois, Urbana, 
Feb., 1969. [3] N. A. Crowder, Intrinsic vs Extrin- sic Programming, In Coulson,  J. E. (Ed.), Programmed 
Learning and Computer-Based Instruction, John Wiley, N. Y., 1962. [4] A. Salako, An Approach to the 
Total Design of Instructional Systems by Simulation, Ph.D. Thesis, University of Wisconsin Computer Sciences 
Department, 1972. [5] B. F. Skinner, Teaching Machines, Science, Oct. 1958, 969 -977. [6] P. Suppes, 
The Uses of Computers in Education, Scientific American 215, 3, Sept. 1966, 207 -220. [7] K. L. Zinn, 
A Comparative Study of Languages for Programming Interactive Use of Computers in Instruction, Final Report, 
OMR Contract N00014-68-C-0256, Center for Research on Learning and Teaching, University of Michigan, 
Feb. 1969.</RefA>  
			
