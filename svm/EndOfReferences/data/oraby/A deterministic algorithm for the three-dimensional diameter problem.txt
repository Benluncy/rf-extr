
 A Deterministic Algorithm for the Three-Dimensional Diameter Problem* Jiii Matouiek Katedra aplikovan~ 
matematiky, University Karlova, Malostransk6 nim. 25, 11800 Praha 1, Czechoslovakia and Institut fur 
Informatik, Freie Universitat Berlin Arnimallee 2-6, W 1000 Berlin 33, Germany Otfried Schwarzkopf Vakgroep 
Informatiea, Universiteit Utrecht, Postbus 80.089, 3508 TB Utrecht, the Netherlands Abstract We give 
a deterministic algorithm for computing the diameter of an n point set in ti~ree dimensions with O(n 
log n) running time, c a constant. 1 Introduction We consider the following problem: Given an n-point 
set P in three-dimensional space, compute its diameter diam(~), defined as the maximum distance between 
a pair of points in P. This problem was solved by Clark­son and Shor [CS89] by a randomized algorithm 
with optimal expected running time O(n log n). However, it seems quite difficult to construct a deterministic 
algo­rithm with a comparable asymptotic efficiency. Chazelle et al. [CEGS92] applied Megiddo s paranlet­r-ic 
search [Meg83] in connection with the Clarkson-Shor algorithm and further techniques and obtained a de­terministic 
O(nl c ) algorithm, where c > 0 is an ar­bitrarily small constant. In this paper, we improve this running 
time to O(n polylog n) (we use polylog n as a generic notation for a function of the form (log n) , c 
>0 a constant). Our basic approach is the same as that of [CEGS92]. Also the basic scheme for achieving 
the improvement has appeared in previous works: While Chazelle et al. *This research was supported by 
the Netherlands Organiza­tion for Scientific Research (N WO) and partially by the ESPRIT Basic Research 
Action No. 7141 (project ALCOM It). J. M. ac­knowledges support by Hunlboldt Research Fellowship. Part 
of this research was done while he visited U trecht University. Permission to copy without fee all or 
part of this material is granted provided that the copies are not made or distributed for direct commercial 
advantage, the ACM copyright notice and the title of the publication and its date appear, and notice 
is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, 
or to republish, requires a fee and/or specific permission. 25th ACM STOC 93-51931CA,USA a 7993 ACM O-8979 
J-~9J-7/93/0005 /047~... +~0~O divide the problem into a constant number of subprob­lems, we refine the 
divide step and use a larger num­ber of subproblems (na for a small but positive con­stant a). With this 
change, some computations which are trivially done for a constant number of subprob ems become more demanding. 
In order to apply parametric search in this situation, it is helpful to change the usual approach to 
para lnet­ric search. In many presentations and application, s of the parametric search technique, the 
need for designing a parallel algorithm is emphasized. What is reall,y re­quired, however, is a sequential 
algorithm, only with comparisons involving the value of the unknown pa­rameter collected into batches 
of independent c ~m­parisons. This has already been pointed out by various authors, and we consider it 
an important part &#38; the parametric search rnethocl, which is very easy to over­look. It is this slight 
shift of attention which enables us to solve problems which we could not overcome beicre. Theorem 1 &#38;ven 
a set P of n points in three­ dinten.stonal space, the diameter of P can be determined by a deterministic 
algorithm in time O(n polylog n ]. The algorithm is too complicated and has too large constants hidden 
in the asymptotic notation to he of any practical value; it is only a theoretical contrib~cion to the 
problem of deterministic asymptotic complfi.xity of the diameter problem. And, one must ask, ar,~ all 
these heavy tools really necessary, or are we just blinded by the various techniques available to overlook 
a simple elementary solution ? 2 Diameter and Parametric Search Let P be a given set of n points in 3-space. 
A quadratic algorithm for computing dianl(P) is trivial. Using ;m­domization, Clarkson and Shor [CS89] 
have obta Il!ed an algorithm whose expected running time (ovel the internal randomizations that it performs) 
is O(n log n). They first transform the problem to the following ball problem: Given n unit-balls and 
n points in 3-space, determine whether any point lies outside the common intersection of the balls. 
This problem is then solved using a randomized incre­mental algorithm. In their algorithm, both the trans­formation 
to the ball problem, and the solution of the latter involve randomization. Chazelle et al. [CEGS92] considered 
the prob­lem of making this algorithm deterministic. Fortu­nately, the transformation to the ball problem 
can be made deterministic by applying Megicldo s paramet­ric search [Meg83]. Unfortunately, this transformation 
adds some additional requirement on the solution of the ball problem, and Chazelle et al. [CEGS92] could 
only give a deterministic solution to the latter with running time O(nl+ ), for an arbitrarily small 
e >0. As stated in the introduction, we will be able to get closer to the complexity of the randomized 
algorithm. Matching the randomized complexity remains as a challenge for fu­ture research. Let us start 
by describing the application of paramet­ric search (see e.g., Megiddo s original work [Meg813] or the 
paper of Chazelle et al. [CEGS92] for a more de­tailed explanation of the parametric search paradigm): 
We assume that we are given an algorithm A that solves the following fixed-size problem: Given n points 
P, and a parameter 6 > 0, determine whether diam(P) is less than, equal to, or greater than d. (Observe 
that this is a restricted version of the ball problem mentioned above, since we have to determine whether 
any point in P lies outside the intersection of the balls of radius d around the points in P). The algorithm 
A plays a dual role in the overall al­gorithm for diameter computation. First, it serves as a oracle 
which, given a specific value d of 6, decides whether d < diam(P), J* = diam(P) or d > diam(P). Second, 
it serves as so-called genervc algor-~thm (let us remark that in general, these roles can be played by 
dif­ferent algorithms in parametric search applications, but for us it is suitable to use A in both roles). 
For this sec­ond role, we require that A uses the information about the parameter d in a restricted manner. 
That is, we as­sume that r5 is not explicitly available to A, but rather that A has access to an oracle 
that allows it to test whether d is less than or equal to some value d > 0. Note that this allows the 
algorithm d to test the sign of arbitrary polynomials of constant-bounclecl clegree in d (it finds the 
roots of the polynomial, which is considered as a constant-time operation in the model of computat­ ion 
we use, and then it locates the position of J among them). When describing the algorithm d in the sequel, 
we will usually first explain its oracle function, with a specific value of d, and then we will comment 
on the way the use of the actual value of d is restricted to a small number of oracle calls, in the generic 
algorithm role of A. Let us denote the number of calls to the oracle made by A for an input of size n 
in the worst case by Q(n), and the running time of A (with each oracle call charged by one time unit 
only) by T(n). This makes sense for the case of explicitly given J, when an oracle call is reduced to 
a single comparison of real numbers. We are now ready to apply parametric search to the diameter problem. 
We run our algorithm A in the generic role on the set P and with parameter 6 = diam(P ). This definition 
of 6 may seem strange, since diam(P) is exactly what we intend to compute in the end, but recall that 
A cannot access J directly. The only thing it can do is to ask the oracle whether d < 15* for some specific 
values d > O; these values are com­puted from P and the previous answers of the oracle. Since we can 
implement the oracle by A in the oracle role, it follows that the total running time of the generic d 
including the oracle calls is T(n) + Q(n)7 (n) = O(T(n)Q(n)). Finally, the generic algorithm A will 
stop and answer EQ[JAL . This is not surprising, since this is the ap­propriate answer for d = diam(P). 
However, it is not difficult to verify that in order to be able to answer EQUAL , one of the calls to 
the oracle must also have returnecl EQUA L . By keeping track of the values 6 used in the calls to the 
oracle, we find diam(P). (Ac­tually, we can stop the whole computation as soon m a call to the oracle 
returns with answer EQUAL ). We summarize our exposition of parametric s~arch for the diameter problem 
in a lemma. Lemma 2 Let A be a determznzstzc algorithm for the ball problem on n potnts which uses at 
most Q(n) tails to the oracle descr~btng the parameter b and with run­ntng tame bounded by T(n). Then 
the dzameter of a set of 71 poants zn three dtmenstons can be computed by a deiermznastac algortthm tn 
ttme O(T(n)Q(n)). 3 A deterministic algorithm for the ball problem We want to give an algorithm for the 
following (slightly generalized) problem: Given a set P of 71 points, a set Q of m points, and a parameter 
d >0 (in the form of an oracle), determine whether Q C k := ~P6p ~(i), ~), where B(p, p) denotes the 
ball around p with radius p, Note that the intersection set K is a convex body, bounded by spherical 
facets (supported by a ball B(p, d) for some p E P). The facets are bounded by circu­lar edges (circular 
arcs in three dimensions, arising as the intersection of the boundaries of two balls of radius d). Since 
all balls have equal radius, the combinatorial complexity of K is only linear in n (see [CS89]). Fur­thermore, 
the facets of K are convex in the following sense [CS89]: Let f be a facet of K, z and y be points in 
the facet f. Then the shorter one of the two great circle arcs connecting z and y lies completely in 
f (note that z and y cannot be antipodes of each other, unless there is only one ball). Clarkson and 
Shor s randomized algorithm [CS89] works as follows: It computes the body K by a ran­domized incremental 
construction, picks some point, o in the interior of K, and centrally projects the edges of K from o 
on a unit-sphere around o. This results in a planar map for which a planar point location structure is 
constructed. It then locates every point of Q using this structure. On the top level of the algorithm, 
one has P = Q; the above generalized version of the ball problem will be a typical subproblem appearing 
in a recursion in our algorithm. The part which appears difficult to do determinis­tically is the construction 
of K. Instead of an incre­mental construction, we will use a divide-and-conquer approach. It will also 
be convenient to combine the re­cursive construction of K with the location of the points ofQin K. In 
the first step, we will identify a subset R of P. We will compute KR := (_)PER l?(p, J). The surface 
of KR consists of vertices, edges (circular arcs) and facets (portions of unit spheres bounded by circular 
arcs). The total number of these features is O(IRI). We form a decomposition T(R) of KR into O(IRI) cells, 
each cell u c 7(R) being described by a constant number of real parameters. We call these cells (for 
a lack of a better name) bricks. A natural way to produce such a decom­position would be as follows: 
for every facet f of KR, choose a point vf E f, and subdivide f into spherical triangles by connecting 
vf to the vertices off by great circle arcs. Then choose a point o in the interior of KR and for every 
spherical triangle r on the surface of KR, connect each its point with o by a segment, forming a brick 
( spherical tetrahedron ) corresponding to ~. This is essentially the way which is used (and works) in 
Chazelle et al s method [CEGS92] (although their definition contains some formal imprecision). It turns 
out, however, that this decomposition method is not good enough for our purposes, and we have to choose 
another one, analogous to vertical decomposition in the plane. The precise definition will be given in 
Section 4, for time being we suppose that we have the subdivision 7(R) of KR into O(IRI) bricks of some 
kind. For every brick a E T(R) we compute the set QO of points in Q lying in u, and also the set PO of 
p ~ P such that a is not completely contained in 13(p, d). If any point of Q turns out to lie outside 
KR, we are done. Otherwise, we proceed by solving the subproblems de­fined by the sets P., Q. and by 
6 for every u G T(R). When the cardinality of either P. or Q. drops below some constant, we solve the 
problem naively. Thus, we obtain the following recursion for the time T(n, m) necessary to solve the 
ball problem. T(?1, m) = s(n) + S (n, m) + ~ T(no, m.), u6 T(R) Here, S(n) is the time necessary to identify 
a proper subset R, triangulate it and identify the subsets P, for all a c 7(R). S (n, m) is the time 
necessary to identify the subsets QC; and n. and m. are the cardinalities of Pa and Q., resp. Note that 
~Oe7(R) ma = m. Let r >1 be a parameter bounded by a constant. Us­ing c-net theory and results from [Mat9 
la], it is possible to find, in time S(71) = O(n log r), a subset R C P of size O(r log r) with the property 
that no < n/r for ev­ery u c T(R). With these values and S (n, r-n) = O(m), the above recurrence solves 
to O(rn log n + nl+ ), for a constant e >0 which can be made arbitrarily small by increasing r. This 
is essentially the solution by Chazelle et al. [CEGS92]. To get rid of the polynomial factor O(nC ), 
however, we want to find a suitable subset R of larger size, as in the following lemma. Lemma 3 There 
extsis a positive constant a, such that for an 71 point set P zn three dimensions, and a pa~am­eter b 
> 0 gtven as an oracle, we can zdentify in time O(n log 71) a subset R of P, satwfying the following 
con­ditions: (i) IRI <r:= na, (ii) for all m E T(R) we have no < cl(n/r) log r, and  (iii) for constants 
c1, C2 >0. Furthermore we can compute ihe iwterseciion I(R of the balls B(p, d) and identify the sets 
PO for all u c T(R) within the same time bound. The number of calls to the oracle describing &#38; is 
in o(log2 71). Given another r-n point set Q, we can compute QO for every u E T(R) tn O(rnlog n) time 
and with O(log m log n) additional oracle calls. This lemma will be proved in the next section. Using 
this result as the divide step of our algorithm for the ball problem, our recurrence becomes q??, m) 
= 0((72 + m) log n) + ~ T(?t., n%) 0 E -r(R) < czn and ~c~T(R) nl. = m. It is straightforward to check 
that the solution of this re­currence satisfies T(n, m) E O((n + m) polylog n) (the power of the logarithm 
is determined by the constants a and C2). It remains to analyze the total number of oracle calls. We 
note that the computations in the subprob­lems are independent of each other and they can thus be executed 
in a pseudo-parallel fashion. Specifically, the depth of the recursion is O(log log 71), and every subproblem 
appearing in the recursion needs at most 0(log2 n) oracle calls. Thus, the oracle calls in this com­putation 
can be grouped into 0(log2 n log log n) rounds of independent calls (that is, the values of J* for the 
calls in one round do not depend on the outcome of the other calls in that round). [Jsing binary search, 
each round can be answered using only O(log 71) actual ora­cle calls (this is the standard trick to reduce 
the number of evaluations of the oracle, when the generic algorithm is fully parallel, [Meg83] ), resulting 
in 0(log3 n log log 71) calls altogether (this is a crude bound, a more refined analysis is possible). 
In view of Lemma 2, this proves Theorem 1. It remains to describe the divide step in detail. with EO~T(R) 
na ~ 4 The divide step In this section we give a proof of Lemma 3. First we establish several auxiliary 
results. Canonical decomposition. We will need that the decomposition T(R) of ~~R defined in Section 
3 is a canonical deco?npositzon in the sense of [CS89, CF90]. Let ~ be a facet of k R and s = B(pl, d) 
its support­ ing sphere. We define the poles of s as the points of s with the largest and with the smallest, 
z-coordinate, and through every vertex w of the facet f, we pass the great circle through v and the polesi. 
Each such circle intersects j in a connected arc, and these arcs subdivide ~ into spherical trapezoids 
. If ~ does not contain a pole, then these spherical trapezoids look analogously to trapezoids in the 
plane; if it does, then a spherical trapezoid has a bowtie shape its two sides formed by the great circle 
arcs cross at the pole. 1If v happens to be a pole itself, we introduce no great circle for it. We then 
pick a point o in the interior of KR. A clever choice for o is the center of the smallest enclosing ball 
for the point set P, which can be precomputed in linear time using a deterministic algorithm by Dyer 
[Dye92]. Note that ~~R must contain this point, unless ~{ is empty. In the latter case we are done2. 
We extend all spherical trapezoids on the surface of ~fR to bricks by taking the union over all line 
segments connecting o with a point in the spherical trapezoid. This finishes the definition of the decomposition 
7-(R) of ~fR. It is straightforward to check that this decom­position has O(lR/) bricks. Let Z denote 
the set of all bricks that appear in a decomposition T(R) for some subset R ~ P. Lemma 4 The decomposzizon 
T(R) dejined abovt is a canontcal decomposition of I<R tn the following sense: Every brtck o ts defined 
by at most five po~nts, I.e. u appears trL T(U) for some subset U <-I P wzth ]Ul <5. A brack u c F appears 
zn T(R) exactly zf the defin­ang potnts are zn R, and no pozni of PO is tc R. (Recall that P w the set 
of potnts p E P such that B(p, 6) does not contatn u.) Proofi Consider a brick u appearing in some decom­position 
7(R) for R ~ P. It is completely defined by its spherical trapezoid, which lies in some facet f on the 
bounclary of a sphere B(pl, J). The spherical trapezoid is defined by at most two arcs -y bounding ~ 
and by at most two vertices on them. The bounding arcs ~1, 72 are defined by intersections of B(pl, 6) 
with some balls B(pz, ~) and I?(p3, c!) (if there is onl~ one arc we may formally put, p3 = p2). The 
vertices 01 the arcs are defined by intersections of -yl or 72 with some other two balls B(p4, d) and 
13(p5, d) (again, we nay put p5 = p4 if there is only one defining vertex). We se [J = {Pi, P2, . ..1P5 
} Consider now the decompo­sition T(U). It is easy to check that u will appear in this decomposition, 
so we have proven (i) and can low define u as u(J, pl, p2, . . . . p5) (note that although 7 (U) consists 
of several bricks, the ordered 5-tuple of points determines a unique u). To prove (ii), imagine that 
we start from the decomposition T(U) and then add the points of R \ [J one by one. It is easy to check 
that the brick CTdoes not disappear from the current decompo­ sition by adding a new point p unless the 
complement of the ball B(p, d) intersects u. I 2D yer s algorithm is one of sophisticated subroutines 
i i our algori tluu, but we can avoid this one rather easily. We formulate the algori tlun with its use 
mainly for simplicity of exposi tit m. Linearization lemma. On several places of the proof of Lemma 3, 
we will deal with rather complicated pred­icates involving nonlinear polynomial inequalities. The main 
example will be the predicate is u contained in B(p, 6)? , where a is a brick, p E P is a point and d 
>0 is a real parameter. Using an observation of Yao and Yao [YY85], we can nevertheless deal with such 
predi­cates using techniques for linear objects (points and hyperplanes), by lifting the problem into 
a suitable space of higher dimensions. A precise formulation is given in the following lemma. Let us 
call a subset of II!d a linear-cell, if it can be expressed as a union of 0(1) sets, each of which is 
an intersection of 0(1) halfspaces in Rd. Lemma5 Let ll(zl, zz, . . ..z~. al, az, a~), a~) be a first-order 
predicate m the theory of real c[osed jields (one formed from poiynornia! tnequahtzes using Boolean connectiues 
and quantifiers). Then there ezzsts a con­ stant d (depending on II) and mappings p, ~ as follows: 
The mapping p assigns to every k-tuple x = (x*,..., Xk) a poznt p(z) E Rd. The mappmg is given by bounded-degree 
polynomials in xl, . . . . zk.  The mapping IJ asstgns to every l-hqle a = (al; ..., al) a iinear ceii 
~(a) ~ Rd. The functions describing the coeflczents in equations of the half­spaces defining @(a) are 
gzven by bounded-degree polynomials in al, az, . . . . al.  For any a, x, ll(x, a) holds 2ff the point 
p(x) belongs to the Jinear cell ~(a).  Proofi The procedure for obtaining such mappings pl * is based 
on Yao and Yao s observation and it is discussed in [Mat9 1]. First, we convert the formula for II into 
an equivalent quantifier-free formula (one com­posed of polynomial inequalities using Boolean connec­tive) 
using a quantifier elimination method, see e.g., [Ren92]. This formula can be rewritten as a ciisjunction 
of several conjunctions of polynomial inequalities. We view the polynomials occurring in these inequal­ities 
as polynomials in the z~ variables with coefficients being polynomials in the ai variables. We let M 
be the set of all monomials p = p(z) in xl, . . . . z~ occurring in these polynomials. Then we set d 
= IM 1, we imagine that the coordinates in IRid are indexed by the monomi­als of M, and we define the 
mapping p as follows: given a k-tuplez = (xl, ...] Zk) of real numbers, the point V(X) = (VP)PCM E IRd 
is defined by y~ = Ii(zl, . . . . *k) (the value of the monomial p evaluated at the given k­tuple x). 
If we consider one polynomial inequality oc­curring in our formula, of the form ~L~M 9J, (a)p(z) > 0 
(each gP a polynomial in al, . . . . al), it is satisfied for given x, a iff the point p(x) lies in the 
halfspace {(YU)KM E ~d; XPW gp(a)?h 2 0}. A conjunction of several inequalities then corresponds to a 
member­ship of p(x) in an intersection of several halfspaces, and a disjunction of several conjunctions 
corresponds to a union of several such intersections. The equations of the halfspaces are given by the 
gfl polynomials in the ai variables and they can also be read off from the for­mula. Q1 Point location 
method. As a first application of the above linearization lemma, we will discuss a way the subsets Pa 
as in Lemma 3 can be computed efficiently, when we already have the decomposition T(R) of the body KR 
into bricks. A brick u can be described by specifying IS and a vec­tor Z1, . . . . .Z15 of real parameters, 
expressing the five points defining u. We write u = u(d, z). A point p E R3 is given by its three coordinates 
(u1, uZ, us). Then the predicate u ~ B(p, ~) can be written as a first-order predicate in the variables 
6, Ui and ~i {this is somewhat laborious but possible). Using Lemma 5 for this predicate, we get mappings 
q, @ as follows: P = P(J, ul, u2, u3) assigns to a value of d and a point p = (UI, u2, u3) a point in 
IRd (for some perhaps large but constant-bounded d), @ = V(Z) assigns to a palam­eter vector z a linear 
cell in IRd, and c(J, z) ~ ll(p, $ is equivalent to P(J, U1, uz, u3) ~ +(z). We use these mappings for 
computing the set~ Po (given the set P and the decomposition T(R)) as fol­lows. For every brick u ~ 7(R), 
u = u(6, z), we com­pute the set ~(z) (note that this is independent of d). Then we preprocess the arrangement 
of these sets in IRd for all u E T(R) for fast point location. This can be clone by preprocessing the 
full arrangement of all hy­perplanes defining our sets for point location (several methods for point 
location in hyperplane arrangements are known, see e.g., [Cha92]). This yields a data struc­ture with 
space and preprocessing time polynomial in [ T(R) 1, thus, for a small enough, no more than hnear in 
n. The query time will be O(log n), Then, for e /cry point p E P, we locate the point p(d, p) using this 
data structure, which tells us to which sets Pa does p belong. The total time will be O(n log 71). As 
for the oracle calls, each step of a point location query with some point p involves a comparison of 
the point P(J, p) against some (explicitly known) hyperplane, and such a comparison can be decided by 
a bounded number of oracle calls. Since the 71 point location queries are independent and can be executed 
in a pseudo-parallel fashion, the total number of oracle calls is 0(log2 71). A quite similar approach 
can be used to compute the subset Q.. Here we neecl a data structure for location of points in the decomposition 
T(R). We apply Lemma 5 on the predicate q E u (for a point q and a brick u = u(J, z)), and we build a 
point location structure in the same manner as above. The set Q~ can thus be detected in O(rn log n) 
time with O(log m log n) oracle calls. Let us remark that an alternative and perhaps more natural way 
is to use a planar point location structure for point location in T(R), and then discuss how such a data 
structure is parameterized with d, so that the preprocessing and point location queries only need a small 
number of oracle calls. Computing a good sample in polynomial time. It remains to describe how to compute 
the good sample R. First we prove a weaker statement, namely that a suitable R can be found in polynomial 
time. Lemma 6 Let P beaset ofnpoints, T< n beagzuen parameter and let the parameter d >0 be gtven as 
an or­acle. We can identify tn polynomial determintstac tame a subset R of P such that (ii) for all u 
G T(R) we have na < Cl(n/T) logr, and (iii) for constants cl, C2 >0. The number of calls to ihe ora­cle 
describing b is in O(log n). Withtn the same bounds we can compute the combtnator~al structure of I<R. 
Proof: We appeal to the usual randomization results ([CS89]) to conclude that when an r-element subset, 
R is chosen randomly from P, the bounds in the lemma will hold with a positive probability. Applying 
derandom­ization techniques (i.e. the Raghavan-Spencer method) as in [CF90, Mat91a], we can then find 
a subset R that fulfills the requirements of the lemma in polynomial time. To be more specific, let us 
use the result from [CF90]. To this end, we consider the hypergraph (P, S), where S is the set of all 
subsets S of P which can be defined as s={p EP; IYgl?(p,d)}, for some brick u which occurs in the canonical 
decom­position T(R) for some subset R ~ P. Lemma 4 im­plies that the number of such u is only polynomial 
in \PI (since each one is determined by an at most five-element subset of P). Given this hypergraph (explicitly), 
[CF90] shows that a sample R satisfying (i) (iii) can be com­puted in polynomial time. We thus only need 
to com­pute the hypergraph (P, S) in polynomial time and with O(log n) oracle calls. This is not difficult, 
as we do not care for the exponent of the polynomial bounding the running time. Namely, we list all at 
most five-element subsets U of P, and for every such U we determine the bricks in the canonical decomposition 
corresponding to it. For every such brick, we then compute the subset of points of P defined by it. All 
the comparisons in­volving 6 are independent and can be done in a single round, thus O(log n) oracle 
calls suffice to resolve all of them. The rest of the calculations only deals with the hypergraph and 
requires no more information about 6. The combinatorial structure of ~<R and its decom­position T(R) 
can be determined by one more round of polynomially many (in r-) independent oracle calls. This proves 
Lemma 6. g Computing an approximation. Now that we can compute a suitable sample in polynomial time, 
we first compute a sufficiently small subset A of P that ap­ proximates P so well that it will be sufficient 
to apply Lemma 6 to A instead of P. This trick has been used in several previous works, see [Mat91a]. 
We consider a set system (P, S), where S is defined similarly as in the proof of Lemma 6; a set S ~ P 
belongs to S if it can be expressed as the subset of points of P whose balls of radius p do not completely 
contain a certain brick u. The difference to the above proof is that we consider all radii p simultaneously, 
instead of a single value p = c!. Hence the set system (P, S) does not depend on d. A subset A ~ P is 
called a ( l/r) -approximatio.~ for (P,S), iffor any SESwehave Suppose that A is a ( l/r)-approximation 
for (P S), where r:= n isasinLemma 3. Let R~Ahea subset with at most T elements satisfying the condi­ 
tions (ii), (iii) of Lemma 3 with P replaced by A (and for some value of 6), that is, lAal < c1 (lAl/r) 
logr for every u G T(R) and ~O~~(R) IAol < c21AI, cl, c2 CfJn­ stants. For any brick a, we have P. E 
S (by the defini­ tion of the set system (P, S)), and A. = A n PO. It is then straightforward to verify, 
using the definition of a (1/r)-approxirnation, that the subset R ~ A ~ P also fulfills the conditions 
(ii) ,(iii) of Lemma 3 for P, only with somewhat larger constants c1, cz. To prove Lemma 3, we proceed 
as follows. First, given P, we compute a (l/r) -approximation A for the set sys­ tem (P, S), with IAI 
much smaller than n = IPI. Then we apply Lemma 6 with A in the role of P, and we ind a good sample R. 
By the above considerations, this R will also be good with respect to P. However, since A is small enough, 
we can afford to spend time bounded 483 by a polynomial in IAI. The proof of Lemma 3 is fin­ished by 
computing the decomposition T(R) (all the combinatorial information needed for this can be gained by 
a single round of independent oracle calls, thus by O(log n) actual oracle calls) and detecting the subsets 
PO and Q. for every a c T(R); this has already been discussed above. It remains to describe how the ( 
l/r)-approximation A is computed. Here we again apply the linearization method, Lemma 5. Our predicate 
will be a ~ B(p, p) , u = a(p, z) a brick and p a point. This time, however, we will regard only the 
coordinates of the point p in the role of the xi variables in Lemma 5, both z and p will be regarded 
as the ai variables. We thus obtain a mapping y assigning to a point p E R3 a point p(p) E Illd (for 
some constant d) and a mapping @ assigning to every z and p a linear cell in Rd, in such a way that for 
any P, P, Z, U(P, Z) ~ % P) iff P(P) G +(z> P). Ret~lrning to our set system (P, S), we see that every 
S c S can be expressed as those points of P whose p-image lies in a certain linear cell in Rd. Since 
every linear cell can be written as a disjoint union of at most C sim­plices (C a suitable constant), 
it suffices to compute a (1/Cr)-approximation for the set {p(p); p E P} with all its subsets definable 
by simplices. For this last prob­lem, we can directly use the results of [Mat92], and we get that if 
a > 0 is a small enough constant, our (l/r) -approximation A of size 0(r2 log r) can be com­puted in 
0(71 log 71) time. This calculation does not in­volve the parameter J at all. This finishes the proof 
of Lemma 3. l References <RefA>[Cha92] B. Chazelle. Cutting hyperplanes for divide­and-conquer. Dtscrete @ 
Computational Ge­ometry, 1992. To appear. Preliminary ver­sion: Proc. 3.%d IEEE Syntpo.stunL on Foun­dations 
of Computer Science (1991). [C!EGS92] B. Chazelle, H. Edekbrunner, L. Guihas, and M. Sharir. Diameter, 
width, closest line pair, and parametric searching. In Proc. $th Annu. ACM Sympos. Comput. Geom., pages 
120-129, 1992. [CF90] B. Chazelle and J. Friedman. A determinis­tic view of random sampling and its use 
in geometry. Combinatortca, 10:229-249, 1990. [CS89] K. L. Clarkson and P. W. Shor. Applications of random 
sampling in computational geom­etry II. Dzscrete &#38; Computational Geometry, 4:387-421, 1989. [Dye92] 
M. Dyer. A class of convex programs with applications to computational geometry. In Proc. 8th Annu. ACM 
Sympos. Comput. Geom., pages 9-15, 1992. [Mat91] J. Matouiiek. Cutting hyperplane arrange­ments. Discrete 
@ Computational Geometry, 6(5):385-406, 1991. [Mat91a] J. Matouiek. Approximation and geometric divide 
and conquer. In Proc. 2?3rd Annu. ACM ,$ympos. Theory Comput., pages 505­511, 1991. [Mat92] J. MatouSek. 
Efficient partition trees. Dis­crete @ Computational Geometry 8:315--334 (1992). [Meg83] N. Megiddo. 
Applying parallel computation algorithms in the design of serial algorit .lms. Journal of the ACM, 30:852-865, 
1983. [Ren92] J. Renegar. On the computational conlplex­ity and geometry of the first order thee, y of 
the reals. Journal of Symbohc Computation, 1992. [YY85] F. F. Yao and A. C. Yao. A general ap­proach 
to geometric queries. In Proc. 1? . ACM Symposium on Theory of Compumng, pages 16:3-168, 1985.</RefA>  
			
