
 Chapter 20 A Faster Deterministic Maximum Flow Algorithm V. King* S. Raot R. Tarjan$ Abstract We describe 
a deterministic version of a 1990 Cheriyan, Hagerup, and Mehlhorn randomized algorithm for com­puting 
the maximum flow on a directed graph with n nodea and m edges which runs in time O(mn + n2+C), for any 
constant c. This improves upon Alon s 1989 bound of O(mn + n8J3 Iogn) [A] and gives an O(mn) deterministic 
algorithm for all m > nit . Thus it ex­tends the range of m/n for which an O(mn) algorithm is known, 
and matches the 1988 algorithm of Goldberg and Tarjan [GT] for smaller valuea of m/n. Introduction The 
maximum flow problem is se follows: Given a directed graph with a non-negative capacity on each edge, 
and with two distinguished nodea, the source and the sink, compute the maximum value of flow from the 
source to the sink, where flow is a function which assigns each edge a number between O and the capacity 
so that for all nodes except the source and the sink, the total flow of edges directed into a node must 
equal the flow of edges leaving the node. The value of a flow is the total flow over all edgea leaving 
the source. Two recent Surveys of work in this area are [AMO, GTT]. In 1988, Goldberg and Tarjan [GT] 
devised a generic max flow algorithm in which flow was pushed from one node to the next along the current 
eligible edge incident to each node. The specific choice of which eligible edge to choose next, after 
a current edge be­came ineligible, wss left open. They made use of dy­namic trees to keep track of paths 
of current edges so that flow could be pushed down a long sequence of cur­rent edges efficiently. In 
1989, Cheriyan, Hagerup and Mehlhorn introduced randomization ae a means of de tiding from among the 
eligible edges incident to a node which to choose next, and they gave a clever framework to enable the 
analysis of this strategy. The randomized strategy was simple: each node randomly numbers ita edgea and 
the loweat numbered edge which is eligible goes first. The [GT] remdt pushed the running time down to 
O(mn log(raa/m)) where n is the number of nodea and m is the number of edgea. The [CHMl result is an 
algorithm which with high probability haa coat O(mra + (TI log ra)a), This meant an O(rnra) algorithm 
for all but sparse graphs. We describe a deterministic algorithm to compute the maximum flow on a directed 
graph with n nodea and m edges which runs in time O(mn + n2+e), for any constant c. This improves upon 
Alon s 1989 bound of 0(mn+n813 log n) [A] and gives an O(mn) deterministic algorithm for all m > nl+c. 
Thus it extends the range of m/n for which an O(mn) algorithm is known, and matches the 1988 algorithm 
of Goldberg and Tarjan [GT] for smaller values of m/n. Our algorithm ia essentially a deterministic veraion 
of the 1990 Cheriyan, Hagerup, Mehlhorn [C?HM J ran­domized algorithm. They reduce the problem of solving 
a maximum flow to executing a strategy in a certain two person combinatorial game where the payoff reflects 
the coat of the computation. Randomization ia used to choose a successful strategy. In 1989, Alon found 
the fastest deterministic algorithm for maximum flow, by derandomizing their strategy, but at a cost 
of a fac­tor of n2i3/ log n in the payoff. By slightly modifying the rules of the game, we are able to 
find a determinii tic strategy which improves the bountin the payoff to within an nc factor of the randomized 
version. 2 The Game Cheriyan, Hagerup, and Mehlhorn [CHM] reduced the cost of finding a maximum flow 
to O(mn + n3i2m1f2 + P(n2, nm) logn + C(n2, inn)) where P(n, m) is the msximum number of points that 
can be collected by the adversary in the following game and C (n, m) is the coat of implementing the 
algorithm s strategy: Let G=(U,V,E) be any undirected bipartite graph, with Itll =IV!=nandIEI=m. The 
first player ie the algorithm, who for each node u c U, orders the edges adjacent to u. Aa the game proceeds, 
the highest remaining edge adjacent to each node u E U which is still in the graph is called u s designated 
edge. The remaining moves are by the adversary. She may either (i) remove a node u c V and 157 all its 
adjacent edges from the graph, scoring a point for every designated edge adjacent to v; or (ii) remove 
only an edge, but scoring no points for this move. Cheriyan, Hagerup, and Mehlhorn analyzed the strategy 
in which the algorithm chooaea a random ordering for each node u. We vary the rules of the game, by permitting 
the algorithm to act adaptively, and permitting the algorithm to redesignate edges. We state this game 
more precisely as follows. Ini­tially, the algorithm designate an edge for each node in U. Then the game 
proceeds in rounds until all the nodes in V are removed. The adversary makes one of the following moves. 
 It can remove any edge from the graph. When the adversary removes a designated edge we call it an adversary 
edge kill. It scores zero points for this move.  It can remove any node in V and its incident edges, 
It scores a point for each designated incident edge.   The algorithm can make any sequence of the fol­lowing 
moves.  It must designate an edge for each node u c U that is not currently designated to a node in 
v. - It may redesignate an edge, i.e., it may shift a designation from one edge incident to a node u 
E U to another. The adversary scores a point for each redesignation. Here, we redefine P(n, m) to be 
the number of points scored in this version of the game, and C(n, m) to be the overhead incurred by the 
algorithm. With small modifications of [CHM] we can prove the following relationship between the game 
above and the running time of a maximum flow algorithm based on [CHM]. THEOREM 2.1. Afazirnwn flow in 
a n-node m-edge graph can computed in time C(n2, WI)+ O(mlogn + nsi2m1i2 + P(n2, nm) log n). Our main 
result is to bound the P(n, m) where the algorithm is deterministic. We prove the following theorem. 
LEMMA 2.1. There is a deterministic algorithm where p(n, m) = O ( nl/2+ ml/2 + #adversaw-edge-kiUs/(n2 
)), KING ET AL. and C(n, m) = O ( m + m1i2n1i2- + #adversary-edge-kills). By appropriately bounding #adversary-edg~killa 
in section 7, we can show that P(n, m) < qn112+cml/2 ), and C (n, m) = O(n + m). This gives the desired 
running time for a deterministic maximum flow computation. In the next section, we sketch the intuition 
behind our game strategy. In Section 4 we describe it more tech­nically. For those readers unfamiliar 
with the [CHM] maximum flow algorithm, we include a description of it in Section 5. Section 6 explains 
how our version of the game fits into the maximum flow algorithm, and Sec­tion 7 contains the cost analysis 
of the game, following [CHM]. 3 The Idea To illustrate the main idea, we make two simplifying assumptions: 
that the adversary may only make moves of the second kind, that is, edgea may be removed only when their 
endpoint is removed, and that each node u e U has degree at least 1. We prove the following, which given 
our aasump tions, yields a bound of mnC/l on the number of points scored by the adversary. If we set 
1 = ~, we can see the relation to lemma 2.1. For each v c V, let r(v) be the ratio of the number of designated 
edges incident to v to the initial degree of v. Let Ur= { edges which are designated to nodes with ratios 
at least r}. Claim: The strategy of designating the edges to the node with the smallest ratio keeps all 
ratios below nc/l. We observe that since no designated edgea to v are removed before v is removed, r(v) 
never decreasea. Thus, half the edges designated to v were designated when the ratio of v was greater 
than r(v)/2. Since a node u only makes such a d=ignation when all its other edges are incident to nodes 
with ratios at least as high, and each has, by assumption, degree 1, we know that at Ieest 11U. 1/2 edges 
are incident to nodea of ratio r/2, and therefore: IU,,ZI ~ (lUrl/2)(i)(r/2). Suppose that for some v, 
r(v) exceeds n /l. By induction, this implies For c > 2/6, there exists a j such that the number of nodes 
is greater than n, giving a contradiction. l 4 The Edge Designation Strategy In this section, we describe 
the full details of the edge designation strategy and then we prove that it is correct. Recall that the 
game is played on a graph G = (U,V,E) with IUI=IVI=nandIEI=m. The algorithm plays the game using the 
following concepts. We maintain a subset U of U containing all nodea with degree greater than 1, in the 
remaining graph. Each node u in V keeps track of the ratio r(u) of the number of designated incident 
edgee, (tJ, w), where u c U , to v s initial degree. Each node in U keeps track of the ratioa of its 
neighbors. However, to keep the algorithm s overhead down, the possible range of ratios is divided into 
discrete levels. A node in V is considered to be in the bottom level (or level O) if its ratio lies below 
ro. Level i contains nodea whose ratio lies in the interval [ri, ri+l), where ri = 2fr0.. Thus, a node 
in U} has only an estimate, erl, of the ratio level of each of its neighbors to within one level. When 
an edge must be designated for a node u G U}, the algorithm chooses the edge incident to the v with the 
minimal erl(v). The idea of this strategy (as above) is that no node v can ever be removed with a ratio 
as high as the ratio of a certain top ratio level, t. Unlike the simplified case in Section 3, r(u) may 
drop, from the one-time removal of a node from U , and from the adversary edge kills. The latter factor 
complicates matters; we cannot prove that a node in V does not enter the top ratio level. Thus, to prevent 
a node, v E V, from being removed when it is in the top ratio level, the algorithm redesignates edgea 
so that v s ratio drops. We can show that the number of redesignation needed to drop W S ratio level 
is small compared to the number of edge kills that have recently occurred. Thus, the total number of 
redesignation is small when compared to the total number of edge kills. We can prove the following theorem. 
THEOREM 4.1. Then? is an algorithm strategy when P(n, m) = O ( n112+ rn112) + 8#adversary-edge-kills/(n2 
), and C(n, m) = O ( m + ml/2n1/2- -1/2 + *(P(m, n)) + #adversary-edge-kills). We proceed by stating 
the algorithm s strategy in section 4.1, bounding the number of pointa scored by the adversary in section 
4.2, and bounding C(n, m) in section 4.3. 4.1 The Strategy Let U ={uEUI degree of u>1};and r(v) = I{designated 
edges{ti, V}IU 6 lY}l/(d(v), where d(u) is the initial degree of v. We will use the following subroutine 
UPDATE.ERL(V) if v is in level i and erl(v) # i then do erl(v) := i; inform all u 6 U incident to v. 
 1. {Initialize} For all v, erl(v) := O. For each node u E W: designate an edge {u,v} such that erl(v) 
is minimal over all v incident to u; UPDATEXRL(V); if erl(v) = t, RESET.  2. If a node v c V is removed 
by the adversary, then for each u E U such that {u, v} was a designated edge do  designate an edge {u, 
v}} such that erl(u} ) is minimal over all nodea incident to u in the remaining graph; UPDATE-ERL(V ); 
if erl(t?) = t, RESET. If, as a consequence, the degree of u falls below 1, then the edge designated 
from u is killed by the algorithm. (See step 3 and 4,) 3. If the degree of u is below 1, u may designate 
any edge incident to it, as needed. 4. If {u, v} is the victim of an adversary or algorithm edge kill 
and the level of v falls to erl(v) 2 then  UPI)ATEXRL(V). The RESET proceeds as follows. Denote by 
v the nodea in V that lie in or above ratio level i. Denote by Ui the nodes in U} whose designated edges 
are incident to nodes in ratio level i or above. 1. k:= t. 2. While the lUk-Zl z (rk-ll) Iilbl /2 do 
 k := k-2. 3. a. For each uin level k 2, UPDATE-ERL(V). b, Foreachu EUk, undesignated its designated 
edge, C. For each v c Vk, UPDATE-ERL(V); {Since r(v) = O, seterl(v) := O }. d. Foreachu~Uk,do designate 
the edge (u, v) such that erl(v) is minimal over all v incident to u in the remaining graph; UPDATE_ERL(v). 
 (It can be shown using a similar argument as in the previous section that this procedure must terminate 
above level t -log,01/22n + 1.) In the following analysis, we show that the level ~ at which the RESET 
procedure stops must have suffered many edge kills. 4.2 Point analysis In this section, we analyze the 
number of points scored by the adversary. The main point of the analysis is that the RESET must work 
as required. Then, the argument proceeds as in the case prmented in section 3. The following crucial 
lemma for the point analysis ensures that the reset will find a level that suffered many edge kills. 
LEMMA 4.1. At any point in the algorithm, at every level k 23, either 1. luk:21 > (rk-1) ]Ukl /4, or 
 ,$?.there were at least (rk-1~) Ivk I /8 edge kills at level k 2 or higher since the previous time 
step 5 of the RESET procedure occurred at or below level k. (We consider a RESET to happen at level h 
if that is the value of k when step 3 of the RESET procedure is performed.) Proofi We will show that 
the above lemma is true by using the following fact. FACT 4.1. At any point-in the algorithm, f~r all 
k >0 such that vk + 0, ~UIj C Uk such that. Iukl ? Iuklfz and every v incident to a node u G Uh there 
was a time afler the previous RESET (or the start of the algorithm, if there was none) during which v 
was in Vk-1. To prove the lemma, we assume that condition (1) is false for a level k and show that condition 
(2) must hold. Since each node u G Uk h= degree at le~t 1, F~t 1 implies that ilvk 1/2 edges are incident 
to nodes in Vk_ 1 at points of time since the previous RESET. Hence, there must have been at least ? 
k-l~l~k l/2 designated edgea over this period to nodes in vk -1. But the nega­tion of condition (1) implies 
that l~&#38;zl < r&#38;l~lU&#38; 1/4. Thus at least rk-l~l~k [/4 designated edges were r­moved by the 
adversary from nodes which are or had been in Vk-1. A node that drops from level k -1 or higher to below 
k -2 must lose at lead half its designated edges at level k -2. This implies that at least ?l-l~l~&#38; 
11/8 designated edgea were removed when they were incident to v s whose ratios were at level k 2 or 
higher. That is, there were at least rk-1 l~k-1 I /8 edge kills since that last RESET, satisfy­ ing condition 
(2) of the lemma. Proof ofAfact: We let Uk be the union over all u 6 uk such that (u, v) is a designated 
edge, and the edge was designated after at least half the currently designated edges incident to v were 
designated. Consider a node u such that (u, v) is designated and v c vk. The algorithm designated that 
edge when: 1. the node that u was previously designated for was killed by the adversary or 2, when u 
is redesignated by the RESET procedure of the algorithm, In either caae, v must have been the node with 
the minimal erl of NY of u s neighbors. For u C Uk, and u s designated edge is (u, v), then er~(v), 
and, consequently, the eri s of each of u s neighbors were at least k -1 right before the time of the 
designation. We must show that u s neighbors were in ratio level k 1 since the previous RESET on level 
k. We accomplish this by induction on the number of RESETS. This is clearly true before there were any 
RESETS. Consider that the previous RESET was on level k(R). For levels k ~ k(R)+ 1, any node in uk 
that entered level k -1 entered after the RESET, thus the claim is trivially true. For levels k < k(R), 
the claim is inductively true. For level k = k(R), the claim holds since the RESET updatea the erl for 
all v who might have erl(v) = k -1, but have a lower r(v), i.e., those v in level k -2, and no edge kills 
occur during the RESET. Thus, if a node, v, keeps its erl(v) = k 1 throughout the RESET, it is at level 
k 1 afterwards. Any node, v, that attains an erl(v) = k 1 after the RESET must have been at level k 
 1 since an er~(v) is never raised to a level until the v actually attains that level. o End of proof 
of lemxna 4.1 Given the lemma above, we can bound the number of points scored by the adversary as follows. 
LEMMA 4.2. The number of points scotvd by or given to the adversary is bounded by rt-lrn + nl + 8#edge-k:Us/(rol), 
 where #edge-kills denotes the number of algon thm edge kills (which is at moai n 8ince each node s degree 
only decreases below 1 once) plus the number of adversary edge kills. Proofi We consider designated edges 
incident only to nodes in U , i.e., of degree greater than i, in the ratio computation, and assume that 
the adversary gets 1 pointa for each node after it leaves U . This is bounded by nl. Now recall that 
every node the adversary kills has ratio at moat rt -1. This implies that when the adversary removes 
a node, she can score no more than l/r~-l points per edge removed, or no more than rnrt-1 points total, 
from edges incident to nodes in U . Finally, when the algorithm redesignates edges a point must be given 
to the adversary. All the redes­ignation are done in the RESET procedure of the al­gorithm. In step 3 
of the RESET procedure we know that luk I redesignation are performed. At this level we know condition 
1 of lemma 4.1 doesn t hold by step 2 of the algorithm. Thus, there must have been at least r~-ll l~k 
I /8 edge kills at level k 1 since the previous RESET at level k or below. We assign the coat of re­designation 
to these edge kills. By the lemma, we know that these edge kills will never be assigned the cost of any 
more redeaignations. There are at least (r&#38;li)/8 edge kills per redes­ignation so that the total 
number of redesignation is bounded above by 8#edg&#38;kills/rOl. We have shown that the total number 
of points the adversary gains is bounded above by the expression in the lemma. 1 Now if we plug some 
numbers in, we get the following corollary: COROLLARY 4.1. The game can be played so that the number 
of points scored by or given to the adversary is bounded by 0(n112+CmIIa + #adversaq-edge-kills ~2e )! 
 where #adversary-edge-kills denotes the number of ad­versa~ edge kills: -Proofi Set ro = ncl~y ~d 1 
= ne~ and t = 0(1/e) and plug in to the lemma. o 4.3 Cost of Implementing the Strategy Now we will show 
that C (n, m) = O(rn + n + (n + P(n, rn))/ro#adver8ary edge -kW8/ro). Consider that the algorithm needs 
to take the following actions, P(n, m)+n times some node in u needs to designate an incident edge, (u, 
v), where v has minimal eri(v) over u s neighbora. The algorithm must keep track of edge removals. UPDATEERL(U) 
informs the neighbors of v of a new erl(v) when the ratio level of v rises (step 1 or 2 or RESET step 
3(d)) or drops two levels (step 4), UPDATEERL(U) also informs the neighbora of u when the ratio level 
of u drops and UPDATE-ERL(v) is called by the RESET (RESET step 3(a) and 3(c)). To minimize the overhead 
for these actions, we maintain the following data structure, For each u E U and each level i = 0,1 ,.,,, 
t -1 we maintain a linked list containing all edges between u and the v s with erl = i which are still 
in the graph, With this data structure, each designation requirea O(t) time. Thus, item 1 above requirm 
a total of O(tP(n, m) + tn) time. The removal of an edge, e = (u, v) takea constant time to maintain 
the linked lists of u, and if e is designated to recompute the ratio level of v. Thus, item 2 above requires 
a total of O(m) time. Now we consider item 3. This occurs when the ratio of a node v rises to a new level, 
and the erl(v) reflects the old level, or v falls two levels below the erl(v). Thus, these revisiona 
can only occur after at least ro(initial degree of v) edge removals or designations involving v have 
occurred. The cuet per revision is no greater than the current degree of u, so that total coat of these 
revisiona per node is no greater than (degree of v)(#edg~kills involving v + #designations involving 
v)/ro(initial degree of v). When summed over all nodes v, this is < (n+P(n, m)+ #edge-kills)/rO. Finally, 
we analyze item 4. Steps 3a and 3C involve the revision of the er! of nodes at or above level k -2. The 
total number of edges to nod-at or above level k -2 is < lUk_sl/r~-~. At the time of the RESET, lU&#38;zl 
< r&#38;lzlUkl/2, so the tOtd number Of edges to nodes at level k -2 is leas than i]tlk 1/2. But each 
such RESET occurs after r&#38;l~lUk 1/8 edge kills at level k-1 since the previous RESET. So the coat 
of updating all these edgea per edge-kill is 0(# edg&#38;killa/(rO)). Thus, C(n, m) is O(rn + n + P(n, 
rn)/ro + #edgddls/ro). Since the number of algorithm edge kills is at most n, we obtain C(n, rn) = O(rn 
+ n + (n + P(ta, rn))/ro#aduersary edge kWs/ro). 5 The Maximum Flow Algorithm We describe the [CHM] 
algorithm here. Our only mod­ ification to it is the implementation of the currentedge procedure, which 
is described in following sections. We assume that the reader is familiar with the generic max­ imum 
flow algorithm and the use of dynamic trees [ST] to implement it, aa described by Goldberg and Tarjan 
[GT]. The terms cap, link, cut, d(u), 8aturaie, residual capacity rj, ezcess flow are essentially the 
same in [GT] and [CHM] and are used here without definitions. The incrementally strong polynomial algorithm 
in [CHM] may be viewed as an extension of the generic algorithm, with a few modifications. Unlike the 
[GT] algorithm, the maximal flow is computed in stages with an incomplete graph (V, E* ) into which each 
pair of directed edges is added one by one (using an Addedge operation). In order to allow one of the 
edges of the pair to be saturated upon its addition, visible excess flow into a node, e * (v), rather 
than excess flow e(u) is used to determine the maximum flow that may be pushed from v, where e * (v) 
= rfaaz{e(u) -cap(v, u), 0}. x (U, ) GE\E* As in [GT], dynamic tree structures are used to maintain information 
about a forest F of edges, so that a sequence of pushes along a path in the forest may be done quickly. 
The edgee in the forest must be eiigible for a push, that is, they must have residual capacity and the 
labels of their tails must be one higher than the labels of their heads, Each node in the forest has 
at most one such edge emanating from it, Upon saturation of an edge, the edge is cut from the forest. 
Upon relabeling of a node, the edges directed into that node must be cut from the forest. When a new 
eligible edge is picked for a node, that edge is added to the forest with a link operation. When there 
is more than one eligible edge emanat­ing from a node in the graph, the [GT] algorithm does not specify 
which edge should be added to F, A ma­ jor contribution of the [CHM] paper is show how these choices 
can be turned into a two-person game between the algorithm and an adversary, where the number of cuts 
induced by node relabelings is the payoff to the adversary. This number is used to bound not only the 
number of these cut operations but also the number of saturating pushes The [CHMJ algorithm randomly 
chooses among the eligible edgee. The contribution of this paper is to make this choice deterministically, 
with only an ne gain KING ET AL. in coat. We allow the algorithm to make its choice adaptively and to 
change its choice while the edge is still eligible and before it is saturated. Both the [GT] and [CHM] 
algorithms use the opera­tions treepush, cut, and link. The treepush in [CHM] is different in that the 
trees may grow as high as needed m that each tree operation has amortized cost bounded by O(log n). Also, 
because of the Addedge operation, vie­ible excess flow may accumulate in a non-root node, in the [CHM] 
version and therefore, treepushea may start from a non-root node, Below, we state the main routines of 
the [CHMJ algorithm. procedure current edge (v) { This will be described in the next section} procedure 
treepush (v) let (u, w) = currentedge(u). If (v, w) is not in F then link (v,w) Find the first edge (x, 
y) on the path to the root with residual capacity <= ex(v), if there is one. Cut (x, y) and saturate 
it. Send e*(v) units of flow along the rnaxirnal path f rorn v in F. procedure relabel(v) For all u with 
current edge(u) (u, v), (u, v) in F, do cut(u,v) d(v) =d(v)+l. main algorithm initialize as in [GT] 
For all edge pairs (u, v) and (v,u) of G, in order of decreasing size of cap(u, v) + cap (v,u), do add 
(u, v) and (v, u) to F and saturate (u, v) if d(v) < d(u). while some node v has e*(v) >0, if v has no 
eligible edge then relabel(v) else treepush(v). This algorithm may be viewed, for the most part, as a 
version of the generic maximum flow algorithm, and thus, the proof of its correctness follows from [GT1. 
 6 Determining current edges how the game fits in The game is played on a bipartite graph G = (U , V 
, E ) such that for each node win the max flow problem and each possible label k between 1 and 2n 1, 
there is a node ?&#38;,k in U , and a node v~,k-1 in V , for a total of O(n2) nodee. For each edge (w, 
w ) in the max flow problem, there are 2n -1 copies of edgea (uuI,kI,v~ ,~-1) fork= 1,...,2n-1. The designated 
edge from each Uw,k determines the max flow algorithm s choice of current edge for w when w haa label 
k. Thus we have: procedure current edge(w) Let k be the current label of w. Let V.{W , k-l} be the endpoint 
of the des@nat ed edge from U-{W ,k}. Then the currentedge(w) = (w, w ). We relate the adversary s strategy 
to the max flow computation as follows. When the max flow algorithm sets the label of a node w to k, 
all game edges incident to u~,k exeept those which are currently eligible are removed by the adversary 
from G . When the max flow algorithm relabels a node w from k to k + 1, it must cut its incoming edges 
from the forest F. These edges are the current edges of nodes incident to w in F. In the game, the adversary 
removes the node vW,k and collects a point for each designated edge incident to VW,k. That :s, each edge 
cut from F corresponds to a point gained by the adversary. When an edge is saturated, the corresponding 
edge (with the current endpoint labels) is removed from G , by the adversary. That is, each adversary 
edge-kill corresponds to a saturating push. Finally, when the game algorithm performs a redes­ignation, 
the max flow algorithm changes the current edge and therefore must cut the old current edge from F if 
it ia there. Again, each edge cut corresponds to u point gained by ihe adversary. The number of points 
scored by the adversary P(n2, rnn) is an upper bound on the number of edgee that were cut from the foreet 
before the edge was saturated. The number of saturating pushes is the number of adversary edge-kills 
in the game. 7 Analysis of the cost In this section, we prove the following bound on the running time 
of the algorithm using the analysis in [CHM]. THEOREM 7.1. The running time of the maximum jlow algorithm 
is O(mn + n3i2t m112) for any constant c. The proof follows from the lemmas below. They are similar to 
those proved in more detail in [CHM]. Here, we highlight the modifications required for our analysis. 
LEMMA 7.1. The running time of the maximum f70w algorithm is C(n2, mfa)+O(rnlogn+n2 +(#treepush+#cat8) 
logn), where C a sthe total cost of computing the current edges, m log n is the cost of sorting the capacities 
of the new edges, and na is the cost of relabeling. LEMMA 7.2. a #trcepu8he8 ~ #link8 + #cuts + #saturating. 
pushe8 + 2m b #linkss #cuts+ n c #cuts < ~(T12, ?TJn)+ #saturating-pushes Proof: a) Each treepuah results 
in either a link, a cut, or it reduces the visible excess of a non-root node to O. But a non-root node 
gets positive visible exeeae only from a saturating push which tiects one node or from the addition of 
a new edge which results in at meet two nodee gaining excess. c) Each cut is eaueed by a saturation or 
results in a point being scored. 1 LEMMA 7.3. #saturating-pushess 0(n312m112) + m + P(n2, mn) Proofi 
We say that an edge is saturated by a regular push bundle if at come point the flow equals the capacity 
in one direction and all subsequent pushes are in the opposite direction, until the edge is saturated. 
CLAIM 7.1. The number of saturations by non­regular push bundles is ~ m + P(n2, inn). The direction of 
pushes maybe interrupted before an edge is saturated when an edge is cut from a tree in a point-scoring 
event (i.e., a relabeling or redesignation). Also, when new edgce are added, the sequence begins with 
a flow of O. CLAIM 7.2. The number of regular push bundles is 0(n9/ Jml/2). The analysis is in [CHM] 
and is independent of changes to that algorithm made here. o From Section 4 and the fact that the #adversary­edge-kiils 
is #8iItUmting-pU8he8, we have: #/2+~mVz)P(n2, mn) < 0( + 8/n2C#8aturating-pu&#38;?hes. Therefore, we 
have the following corollary of lemma 7.3. COROLLARY 7.1. #saturating. pushes ~ 0(n3f2t m112) Theorem 
7.1 follows from this corollary, lemmas 7.1 and 7.2, and our bound on C(n2, tarn) from section 4.3. References 
<RefA>[AMO] .K. Ahuja, T. L. Magnanti, and J.B. Orlin, Net­work flows, in Handbook in Opemtions Research and 
Management, Volume 1: Optimization, G. L. Nemhauser, A.H. G. Rinnooy Kan, and M.J. Todd, eds,, North-Holland, 
Amsterdam, 1990, 211-360. [A] N, Alon, Generating Pseudo-Random Permutations and Maximum Flow Algorithms, 
manugcm pt. [CH] J. Cheriyan and T. Hagerup, A Randomized Maximum-Flow Algorithm? Prac.IEEE FOCS (1989), 
118-123. [CHM] J. Cheriyan, T. Hagerup, K. Mehlhorn, Can a Maximum Flow be Computed in o(nm) Time? ICALP 
(1990). [GTl A.V. Goldberg and R. E. Tarjau, A New Approach to the Maximum Flow Problem, Journal o~ the 
ACM 95 (1988), 921-940. [GTTj A.V. Goldberg, E. Tardos, and R. E. Tarjau, Net­work flow algorithms, in 
Paths, Flowu, and VLSI-LuyotIt, B. Korte, L. Lovisz, H. J. Pr6mel, and A. Schriver, eds., Springer-Verlag, 
Berlin, (1990), 101-164. [STl D, Sleator and R. E. Tarjau, A Data Structure for Dynamic Trees, Journal 
of Computer and System Sciences (26) (1983), 362-391. </RefA>
			
