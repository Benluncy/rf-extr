
 A Hypertext Module for Teaching User Interface Design Martin L. Barrett Computer Science Department 
Penn State Harrisburg 777 W Harrisburg Pike Middletown, PA 17057-4898 E-mail: mlb6 @ psuvm.psu.edu ABSTRACT 
The need to teach user interface design concepts is shown both in recent computer science curricu­lum 
proposals and from experience with student pro­grams. This paper describes an individual study hy­pertext 
module called UID Tutorial which surveys interface design principles and provides examples of good and 
bad interfaces. The module includes a hands-on tutorial and demonstration of the basic topics of user 
interface design in a way that cannot be accomplished by lecture alone. Experience using the module is 
reported and future needs are discussed. 1. INTRODUCTION As computers have become faster and more pow­erful, 
user interfaces have become more sophisti­cated. Software libraries, graphical packages, and object-oriented 
systems have made it easier for stu­dent programmers to create unique interfaces for their programs. 
While computer science students, by virtue of their exposure to various programming environments, usually 
will have reasonable ideas of what comprises a good user interface, there is no guarantee that this is 
the case. Moreover, teach­ing the principles of user interface design is called for in the ACM/IEEE report 
Computing Curricula 1991 [11 under the Human-Computer Communica­tion common requirement. This paper describes 
an individual study hypertext module called UID Tu­torial designed to survey interface design principles 
and show examples of good and bad interfaces. Most everyone agrees on the need for good user interface 
design (UID, also referred to as Human- Permission to copy without fee all or part of this materiel is 
granted provided that the copies are not made or distributed for diract commercial advantage, the ACM 
copyright notice and the title of the publication and its date appear, and notice is given that copying 
is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires 
a fee and/or specific permission. ACM-24 thCSE-2/93-lN, USA O 1993 ACM 0.8979 J.566-6/93/0002 /0 J07... 
$J .5(J Computer Interaction (HCI) or as Computer-Human Interaction (CHI)). As with structured programming 
and good documentation, UID is a mom-and-apple­pie issue. A more immediate motivation for educa­tors 
is putting up with dreadful interfaces in student programs. When students learn how to change text colors, 
for example, or turn blinking text on and clff, they do it-often with poor effect. There are several 
problems that need to be ald­dressed when teaching user interface design. First, the field is multidisciplinary. 
It involves several as­pects of computer science, such as computer archi­tecture (inputioutput methods 
and interrupts), c~p­erating systems (device management, communica­tions, and event handling) and computer 
graphics (bitmapped displays). Other subjects are also in­volved, such as psychology (human perception 
and learning ability), physiology (reaction time and color sensation), and graphic design. This implies 
the sec­ond difficulty, that the topic does not fit easily irlto any one course. In the ACNUIEEE sample 
curric­ula, UID is often found in the introductory course (such as the Program in Computer Science curricu­lum), 
but UID also appears in a special course on Computer Systems and Interfaces in the Theoretical curriculum, 
and even in a programming languages course in the Liberal Arts curriculum. The author used the UID Tutorial 
module in a capstone Softwawe Engineering senior project course. A third problem is the need to demonstrate 
UID topics; lecturing is not sufficient due to the visual and interactive rla­ture of the subject. The 
UID Tutorial attempts to solve some of these problems. It surveys the field, discussing both the basic 
principles and specific methods and examples of good user interface design. Graphic design, h~u­man factors, 
and programming issues are integrated into the presentation. The module is self-contained, so it can 
be used at any level from introductory through advanced courses, and is appropriate for either a Computer 
Science or Information Systems curriculum. It contains both static and interactive examples as illustrations. 
The tutorial itself serves as an example, using both the hypertext metaphor of navigation through the 
material and a graphical interface with separate windows, pull-down menus, and dialog boxes. In sum, 
the module provides a hands-on tutorial and demonstration of the basic topics of user interface design 
in a way that cannot be accomplished by lecture alone. 2. OTHER SOURCES There are a number of books and 
articles that provide introductions to user interface design. Perl­ man s article [5] gives an overview 
of his Software Engineering Institute curriculum module [6] on the subject. The module gives suggestions 
for a course on the subject and lists many references from the literature. The text by Brown and Cunningham 
[31 covers most important UID topics, and contains lists of do s and don t s on each subject, collected 
in an ap­ pendix. This concise statement of design principles is quite useful. Both this text and Shneiderman 
s [81 contain material on interfaces for the physically challenged. The Shneiderman book contains mate­ 
rial on the psychology of human computer interac­ tion, both on cognitive styles and on physiological 
issues. The article by Rettig [7] notes that it takes time to develop a good user intetiace. He suggests 
consulting a graphic designer during development and sticking to established standards. The UID Tutorial 
was developed using Toolbook by Asymetrix [2]. This hypertext software contains a number of examples 
and guidelines for producing a good Toolbook application, including tips on inter­face design specific 
to Toolbook. 3. THE UID TUTORIAL The primary goal of the tutorial is to provide an overview of the major 
principles of user inter­face design. These principles are presented through textual descriptions, through 
static examples (some from existing software), and through dynamic, inter­active examples. Since the 
module is designed to be explored by individuals at their own pace, the ma­terial is removed from lecture 
format and offloaded into laboratory time or into non-class time. The re­mainder of this section describes 
the chapters of the tutorial. Several sample screens are shown in the appendix. The first chapter is 
an introduction to using Toolbook and using the tutorial. The book may be navigated using hypertex links 
to various sections, or its pages may be read sequentially. Most pages contain both text and either static 
or small interac­ tive examples. Some pages contain links to study questions. Others contain links to 
static examples from existing software that illustrate the topic on that page. Still other links exist 
to more elaborate interactive examples. Chapter two is an introduction to human com­ puter interaction 
and communication. The front end (interface) -back end (functionality) mapping of pro­ grams is discussed, 
emphasizing the need not only to implement those functions required in a system s specifications, but 
to represent that functionality to the user. Metaphors for interaction are also exam­ ined, such as the 
Desktop metaphor and the Ledger Sheet style. Finally, psychological and physiological issues are discussed. 
Laying out the screen to improve clarity and effi­ ciency is the topic of chapter three. The principles 
of consistency, simplicity, and readability are outlined. Three different layout styles are discussed: 
whole screen, where grouping and sequencing are impor­ tant; formatted screen, where areas of the screen 
are reserved for certain operations; and overlapping windows, where direct manipulation is used. The 
use of color in design is also discussed. Chapter four covers input devices and methods. Control input 
is distinguished from data input. The former includes menus, icons, command line pro­cessing, and query 
languages, while the latter in­cludes text processing, numeric processing, and for­matting issues specific 
to data. Output methods, chapter five s topic, overlaps with both input methods and with screen formatting 
in some areas. Unique to output are issues of feed­back and error messages, text formatting (particu­larly 
scrolling), and graphical versus textual output. Chapter six discusses exception handling, error recovery, 
and online help. The latter includes con­text sensitive help, indexed help, experience factored help, 
and task oriented help. Chapter seven covers both programming issues and evaluation issues. Event oriented 
programming -common to object oriented systems -is often new to students. Graphics topics such as display 
lists, windowing systems, and bitmapped displays are dis­cussed. Tools for interface design are presented, 
such as user interface management systems and rapid prototyping tools. Evaluation issues include definitions 
of successful interfaces and how to mea­sure user performance. The last chapter contains a bibliography, 
Later pages contain the study questions, static program interface examples, and the interactive examples, 
which are referenced from previous chapters. 4. RESULTS AND DISCUSSION The UID Tutorial was tested in 
a senior Soft­ware Engineering project course. The course is the capstone of the undergraduate Computer 
Science program, so that the students have been exposed to many interfaces and have a good deal of program­ming 
experience, This section discusses the results of using the tutorial and some future directions. One 
very good result was the class time saved by making the tutorial an out-of-class assignment. This allowed 
more time for class discussion on user interface ideas in a busy semester. As noted earlier, the presentation 
of this material is not well suited to lecture format, since it requires interaction and ex­perimentation. 
The tutorial s interactive examples were appreciated by the students. Three types of informal feedback 
were received from the students: answers to study questions on the material, an evaluation of the tutorial, 
and an evaluation of the students term projects with regard to the tutorial material. Overall, the tutorial 
was well received other than some mistakes and faulty interactive examples. The timing of the tutorial 
was somewhat later than ideal to affect the outcome but not the evaulation of the projects interfaces. 
Students found the examples to be at least as interesting as, if not more than, the text of the tu­torial. 
The interactive examples were singled out as attention-getters, even to the point of detracting from 
the text. This may reflect either a less than serious attitude to the tutorial or only the novelty of 
the examples. Having watched a colleague review the tutorial suggests the latter conclusion. Most stu­dents 
admitted to learning new concepts, but per­haps not as many as a less experienced class might have learned. 
Several students commented that many of the ideas were familiar but were brought together in an orderly 
structure for the first time, providing good rules of thumb for future inter­face design decisions. Using 
the tutorial earlier in the curriculum might be wiser, as several students noted. Although one student 
said the material was not useful since we don t have a need for graphical user interfaces in college 
, the content was generally judged useful. Several types of interfaces were used in stu­dents projects, 
including icon menus with point-and­drag symbols, standard pull-down menus, fill-in-the­form using tabbing 
between fields, and a modified ledger sheet. It appeared that the students chose the programming tools 
first, usually based on lan­guage and availability, and then built an interface that was supported in 
the tools, rather than thinking about the kind of interface they wanted and choc}s­ing the tools accordingly. 
Most students agreed that their interfaces could be better if they had followed the tutorial s guidelines 
more closely. In particular, directions to the user and error handling were seen as needing work. Based 
on this experience with the UID Tutorial, several points are noted. The tutorial might be bet­ter used 
earlier in the curriculum, although it did integrate past experiences and ideas. The novelty of the interactive 
examples was both good and bad; some balance of play and work needs to be achieved. New technologies 
should be incorporated into the tu­torial, including the use of sound for both input and output, and 
perhaps speech recognition and other types of input devices besides mouse and keyboard. This is related 
to a need for providing more and vam­ied tools for student project development, which is outside the 
scope of this discussion. In summary, the UID Tutorial achieved its in­tended purpose by filling a need 
to teach user in­terface design. It can be used in various places in the undergraduate computer science 
curriculum. It also raises the question of the use of Toolbook and other hypertext material. Other disciplines 
seem to be ahead of computer science in the use of this tech­nology. Only a few such applications exist 
in the field (notably Decker and Hirshfield s textbook The Analytical Engine [41), while chemistry, physics, 
history and soon have used hypertext and multime­dia applications to a much greater extent. Future efforts 
in this area need to be encouraged. 5. REFERENCES <RefA>[11 AChOIEEE-CS Joint Curriculum Task Force, Computing 
Curricula 1991, Feb. 1991. [21 Asymetti Corporation, Using Toolbook, 1991. [3] Brown, Judith R., and 
Cunningham, Steve, Pro­ gramming the User Interface, John Wikey and Sons, New York, 1989. [41 Decker, 
Rick and Hirshfield, Stuart+ The An­alytical Engine, Wadsworth Pubhshing Co., Belmont, CA, 1992. [51 
Perlman, Gary, Teaching User Interface Devel­opment to Software Engineering and Computer Science Majors 
, SIGCHI Bulletin, July 1990, Vol. 22, No.1, pp. 61-66. [61 Perlman, Gary, User Interface Development, 
SEI-CM-17, Software Engineering Inst., Carne­gie Mellon University, Pittsburgh, PA, 1989. [71 Rettig, 
Marc, Practical Programmer: Interface Design When You Don t Know How , Commu­nications of the ACM, Jan. 
1992, Vol. 35, No. 1, pp. 29-34. [81 Shneiderman, Ben, Designing the User Inter­ face, 2nd Ed., Addison-Wesley, 
Reading, Mass., 1992.</RefA> 6. ACKNOWLEDGEMENTS Many thanks to Lance Haldeman for helping in the development, 
and to Cliff Wagner, Peggy Hunter, Marilynne Stout, and the students who reviewed UID Tutorial. Asymetrix 
and Toolbook are registered trademarks of Asymetrix Corporation. 7. APPENDIX Sample screens horn UID 
Tutorial Sample screens from UID Tutorial be robust in the tiresence of er;ors, and chat the designer 
has thought through how Che program should work from the U.Ser S point of view. The former falls into 
the category of error handling, while the latter involves providing help -in our case, on llne help. 
This chapcer takes a brief look at ~he implica~lons of these two subjects on user interface design. A 
complete discussion is beyond this tutorial , b ~ the topics are pare of the software A*A Engineering 
curriculum, so the gentle reader can refer to the bibliography A for sources. The Swan computer Lab here 
on campus has its own menu displayed at boot UP. This menu allows easy access to most of the software 
packages available to the Swan Lab. Note the borders drawn around the various areas for grouping. . 111
			
