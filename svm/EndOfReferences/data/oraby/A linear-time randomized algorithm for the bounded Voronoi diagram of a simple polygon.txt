
 A Linear-Time Randomized Algorithm for the Bounded Voronoi Diagram of a Simple Polygon Rolf Klein * 
Andrzej Lingas FernUniversitat Hagen Lund University January 4, 1993 Abstract For a polygon P, the bounded 
Voronoi diagram of P is a partition of P into regions assigned to the vertices of P. A point p inside 
P belongs to the region of a vertexv if and onlyifv is the closest vertex of Pvisible from p. We present 
a randomized algorithm that builds the bounded Voronoi diagram of a simple polygon in linear expected 
time. Among other applications, we can construct within the same time bound the generalized Delaunay 
triangulation of P and the minimal spanning tree on P s vertices that is contained in P. 1 Introduction 
The Voronoi diagram and its dual, the Delaunay trian­gulation, belong to the most useful structures in 
compu­tational geometry, due to the variety of problems they help to solve; see [2] and [14] for surveys. 
Computing the diagram of n points in the Euclidean plane is well known to be a problem of complexity 
@(n log n). But since the Voronoi diagram is so useful it is natural to ask if faster algorithms are 
available if more information about the sites is given. A famous open problem has been solved by Aggar­wal, 
Guibas, Saxe, and Shor [1] in 1987. By means of a general theorem on the convex hull of certain point 
sets in 3-space they proved that the Voronoi diagram of the vertices of a convex polygon can be computed 
in linear time, in the worst case. Djidjev and Lingas [6] showed that the same holds for the vertices 
of a monotone his­togram (i. e. for sites sorted by their x-coordinates that *This work was partially 
supported by the Deutsche Forschungsgemeinschaft, grant 1{1 655/1-2. It was done during the first auth.ds 
visit at Lund University in November 1991. Permission to copy without fee ell or part of thie material 
ia granted providad that the copies are not made or dietributad for diract commercial advantage, the 
ACM copyright notica and the titla of the publication and ite date appaar, and notice is given that copying 
is by permiaaion of the Aaaociation for Computing Machinary. To copy otherwisa, or to republish, raquires 
a fee and/or epecific permission. 9th Annual Computational Geometry,5/93/CA, USA 01993 ACM 0-89791-583-6193/0005101 
24... S1 .50 have, in this order, monotone ~-coordinates), but that it takes time fl(n log n) to compute 
the Voronoi diagram of the vertices of a non-monotone histogram (i. e. of a set of sites sorted by one 
coordinate.) Inside the area confined within a simple polygon, the Euclidean distance applies only to 
points that are mutu­ally visible. This fact is taken account of by the notion of the bounded Voronoi 
diagram independently intro­duced by Wang and Schubert [17] and Lingas [13]. Here each point inside the 
polygon belongs to the region of the closest vertex it can see. The same approach applies to a general 
planar straight line graph. The dual of its bounded Voronoi diagram is the core of the generalized Delaunay 
triangulation of the graph, where no circum­circle of a triangular face contains a vertex visible from 
all of the three vertices of the face. However, the com­plexity of constructing the bounded Voronoi diagram 
of a general planar straight line graph is G3(n log n); see Lee and Lin [10], Chew [5], Wang and Schubert 
[17], and Linga.s [13]. Can we expect faster algorithms for the bounded Voronoi diagram (resp. for the 
generalized Delaunay triangulation) of a simple polygon? It has recently been shown by Klein and Lingas 
[8] that the answer is pos­itive if the Euclidean metric is replaced by the compu­tationally simpler 
LI (or: Manhattan) metric, where in fact a linear worst case time algorithm is available. In this paper 
we present a linear time randomized algorithm for the bounded Voronoi diagram of a simple polygon P in 
the Euclidean metric. We can derive in linear time the generalized Delaunay triangulation of P. We also 
obtain linear time randomized algorithms for constructing, among others, the following objects: the minimum 
length spanning tree on the vertices of P that is contained in P, the closest pair of covisible vertices, 
all nearest visible vertices, and the point inside P farthest away from any visible vertex. The organization 
of this paper is as follows. In Section 2 we state some basic properties of the bounded Voronoi diagram 
of a simple polygon. Then we prove a key lemma on merging bounded diagrams of subpolygons within linear 
time. In Section 3 we present and analyze, by means of backward analysis, a linear time randomized algorithm 
for constructing the bounded Voronoi diagram of a his­togram. This procedure is the core of the whole 
algo­rithm. It is totally different from the approach taken in Klein and Lingas [8] for the Manhattan 
metric which cannot be adapted to the Eulidean case. Then, in Section 4, we attack general polygons. 
First, we provide a method of decomposing a simple pcJy­gon into pseudo-histograms within linear time. 
Whereas pseudo-histograms are but a slight generalization of his­tograms, our decomposition technique 
is considerably more powerful than the decomposition into histograms due to Levcopoulos [11] which works 
only for rectilin­ear polygons. Both methods use Chazelle s linear time trapezoidation algorithm [3]. 
We prove that the de­composition into pseudo-histograms can be computed in linear time, by a deterministic 
algorithm. Using a merging technique based on our key lemma we are able to compute, in linear time, the 
bounded his­togram of the polygon from the diagrams of the pseuclo­histograms in the decomposition. Section 
5 contains the applications mentioned above. Instead of using Chazelles ingenious but rather in­volved 
linear triangulation algorithm we could apply the O(n log* n) algorithm by Seidel [16]. Also, the line­ar 
worst case result by Aggarwal, Guibas, Saxe, and Shor [1] could be replaced by a simple linear randomized 
algorithm for constructing the convex hull of certain polygons in 3-space, that is described in the full 
pa­per [9]. So, we can also provide a practical randomized O(n log* n) algorithm for the bounded Voronoi 
diagram of a polygon.  Bounded Voronoi Diagrams We start with a formal definition of the bounded Voronoi 
diagram of a simple polygon. Here, two points in the closure of a simple planar polygon P are called 
mutually visible iff their connecting line segment is con­ tained in the closure of P. Definition 2.1 
Let P be a simple polygon, For each vertex w of P, the bounded region of v consists of all points p inside 
P for which v is the closest vertex of P visible from p. The bounded Voronoi diagram o,f P (VB(P), for 
short) is is the union of the boundaries of the regions. We distinguish between Voronoi edges that are 
segments of bisectors of two vertices, and cent our edges that are segments of edges of P. The endpoints 
of the Voronoi edges are called Voronoa vertices. The properties of bounded Voronoi diagrams were first 
studied in [13, 17]. If P has n vertices then VB(P) is of complexity O(n). The boundary of a bounded 
re­gion contains at least two contour edges that emanate from the vertex site which may be a reflex vertex 
of P (i. e. one whose internal angle is greater than 180°.) Otherwise, the boundary is convex. Consequently, 
if two mutually visible points lie in a bounded region, so does the line segment connecting them. The 
following, so called Merging Lemma, will be used in a simpler form in Section 3 and in its general form 
in Section 4. Here, a subpolygon of a simple polygon P is a simple polygon whose boundary consists of 
edges and (inner) diagonals of P. Lemma 2.2 Let d be a diagonal of the subpolygon Q of P. For i = 1,2 
let Qi (resp. Pi) be the two subpolygons resulting from splitting Q (resp. P) along d. Finally, assume 
the following notation: (i) for i = 1,2, ki is the number of regions in VB(Pi) fl Qi supporting d ( 
support cost ),  (ii) m is the number of edges in VB(P) fl Q separating regions of vertices placed on 
opposite sides of d in P ( merge line cost ). Then, given VB(Pl)flQl and VB(Pz)flQz, the bounded diagram 
VB(P)nQ can be computed in time O(kl+kz+ m).  Proofi First, we compute the Voronoi diagram U of those 
sites of Pi whose regions in VB(Pi) (l Qi support d, within the halfplane on the other side of d. This 
diagram has the structure of a binary tree. Due to [1], it can be computed within time O(k~). Now we 
merge WI = (VB(P1) (l Ql) U VI with W 2 = (VB(P2) n Q2) U V2 within Q as in the classical divide+ and-conquer 
algorithm cf. [7]. To find a starting segment for the merge line we follow d from its upper vertex, p, 
downwards until the region boundaries of p in both VB(P1) and VB(P2) are found. Suppose they are detected 
in this order, as shown in Figure 1. These p-boundaries are both scanned coun­terclockwise for their 
intersection point, z. Here the first merge line edge originates (unless z lies outside the boundary 
of Q2.) The construction of the merge line is continued using counterclockwise boundary scans on the 
regions of W2, and clockwise scans on WI. As usual, the merge line is a d-monotone chain, but it can 
take excursions at the boundary of Q. Whenever this hap­pens (e. g. at edge e of Q2) it must return into 
Q through the same edge it left from, because each vertex is a site. The returning merge line is found 
by clock­wise scanning the boundaries of the regions of V1 that support e, between their respective intersections 
with e. Within Qz, the clockwise boundary scans on V1 in­volve O(kl) many edges. To estimate the time 
spent on the counterclockwise scans in VB(P2 ) (l Q2, observe that the scanned edges are cut off from 
their former re­gion. Since each cut off face haa at least one edge on the merge line, these scans can 
be performed in time O(m), by planarity. This proves the time bound. P 11 12 13 14 15 16 ~ Figure 1: 
Constructing the merge line. Indicated are the clockwise scans on the boundaries of VI. By the boundary 
of QZ, a point in a region of VI could be prevented from seeing its site in PI. The following lemma can 
be used for proving, by induction on the con­struction of the merge line, that nevertheless the a hove 
algorithm correctly computes the bounded Voronoi dia­gram of P within Q. The details are contained in 
the full paper [9]. 0 Lemma 2.3 Let x be a point in Q2 that belongs ta the regions of I and r in VI and 
VB(P2) n Qz, correspond­ingly. If x cannot see vertex 1 in Q then x belongs to the region of r in VB(P) 
n Q. The symmetric fact holds if 1 and 2 are exchanged. Proof: Otherwise, x would belong to the region 
of some site 1 of PI in VB(P) n Q. Since it sees 1 but does not see 1, there must be a vertex r of P2 
in the in­terior of the triangle (1, 1 , z), belonging to a chain that intersects ~, such that r is visible 
from z. Clearly, d(z, 1) ~ d(z, 1 ) holds for the Euclidean distances. This implies d(z, r ) < d(z, i 
), a contradiction. 0  Histograms The bounded Voronoi diagram of a convex polygonl, P, is just the standard 
diagram of its vertices, restricted to P. This is no longer true for histograms which will be considered 
in this section. Nevertheless, we are able to generalize Chew s randomized algorithm [4] for the De­launay 
triangulation of a convex polygon to histograms. Definition 3.1 A simple polygon H given by the ver­ 
tex sequence qo, ql, . . . . qn+l is called a normal his­ togram if the q~ have sscending x-coordinates, 
if qo and qn+l have the same y-coordinates, and if all other ver­ tices have larger y-values. We call 
q. and qn+l the base vertices of H. A non-base vertex q is a local minimum if each of the two vertices 
adjacent to q haa larger y­ coordinate than q. Algorithm 1 Input: A normal histogram H. Output: VB(H). 
1. If H hss only three vertices then construct VB(H) directly. 2. If H has more than three vertices 
then randomly pick a vertex q of H that is neither a base vertex nor a local minimum, let p and r be 
its two neighboring vertices, and let H be the histogram resulting from cutting off the triangle (p, 
q, r). 3. Recursively compute VB(H ).  4. Transform VB(H ) to VB(H). Lemma 3.2 The transformation 
of VB(H ) into VB(H) in Step 4 in Algorithm 1 can be done in time O(a + b), where a is the number of 
regions adjacent to the region of q in VB(H) and b is the number of regions which cover or support an 
edge of the triangle (p, q, r) in VB(H). Proof: Case 1: The angle (p, q, r) is reflex, We as­sume that 
p is the leftmost and lowest point of the tri­angle, as shown in Figure 2, (i). To continue, we need 
the following lemma. Lemma 3.3 Let x be a point of H that lies in the region of vertex v in VB(H ). If 
x cannot see v in H then it belongs to the region ofq in VB(H). Proofi By assumption, the line segment 
FiF cuts both ~ and p. If vertex v lies to the left of q then x is to the right of and above q. Thus, 
z is closer to q then to v. Also, z sees q because it sees v in the histogram H . If v lies to the right 
of r then it must be above q. Again, q is visible from z and closer than v. 1 This implies that inserting 
the reflex corner q does not change region membership except for those points that are going to be in 
the region of q anyway (note that this is wrong if q is a local minimum!) Thus, we only need to construct 
the Voronoi region of q. We start from r and traverse, on the side of the triangle, the boundaries of 
the regions cut by edge W, as shown in Figure 2, (i). Eventually, we arrive at a point z on n. The region 
currently scanned (here: of vertex t) need not contain q. But the point z must belong to the region of 
q in VB(H), because it is closer to q than to t and sees q. We move along ~ from z towards p until we 
hit the bisector of q and the current region in VB(H ), Now we construct the region of q as usual, traversing 
only the region boundaries of VB(H ) within the region of q. By planarity, this can all be done within 
time O(a + b). Case 2: The angle (p, q, r) is convex; see Figure 2, (ii). Here we apply the Merging Lemma 
2.2 to the triangle and to H along d= ~. 1 Lemma 3.4 If q is randomly choosen among the ver­tices of 
H that are neither base vertices nor local min­ima then the expected value of a + b is O(l). Proof: Suppose 
that H = (qo, ql, . . . . q~, q~+l), and consider the subsequence (qj~,.... q~~) of (ql, ....qn) con­sisting 
of all vertices which are not local minima. Since no two local minima are adjacent and neither ql nor 
q~ is a local minimum the subsequence length k is at least [%1. Now choose j in {O, 1, 2}. For each m 
where 1~ m ~ k, jm = j (mod 3) and the angle i) Figure 2: The triangle (p, q, r): (!?jm-l,qjm,%m+l ) 
is convex from inside of H, draw the diagonal (qj~-l, qj~+l ) within H. Suppose that the re­gion R of 
a site ql is intersected or touched by one of the above diagonals (qj~_ 1, qj~+l ) where 1< j~ 1 or 
I > j~ + 1. Then, at least one of the vertices of R is cut off by or included in the diagonal. Hence, 
since the diagonals lie in disjoint vertical strips, the total sum of all the numbers b over all the 
convex triangles is O(n). Consider in turn the m s where 1 ~ m s k, jm = j (mod 3) and the triangle 
(qj~-l, qjm, q~m+~) is reflex. In this case the number b for (q~~ 1, qjm, qjm+l ) 1Sequal to the number 
of the straight-line boundary segments of the regions in VB(H) supporting the edges (qj~ 1, qj~) and 
(qj~, qj~+l ). It follows by the linear size of VB(H) that the total sum of all these numbers b is also 
O(n). Clearly, the total sum of the numbers a of Voronoi neighbors of qj~ over mwherel~m~kandj~ =j (mod 
3) is also O(n), by the linear size of VB(17). This shows that the total sum of the numbers a + b over 
all vertices q that can be picked in step 2 of Algo­rithm 1 is O(n). Since there are Q(n) many of them, 
each one being chosen equally likely, the assertion fol­lows. 1 Theorem 3.5 Algorithm 1 constructs the 
bounded Voronoi diagram of a histogram in linear expected time. Proofi Steps 1 and 2 take constant time. 
Step 4 can be done in constant expected time by Lemmata 3.2 and 3.4. Since all steps in Algorithm 1 but 
for the recursive computation of VB(II ) take constant expected time and I-I has one less vertex than 
If the whole algorithm runs in linear expected time. 1 /\ \ 0\ H /\ P w reflex case (i), and convex 
case (ii). Figure 3: An example of a pseudo-histogram. For the purpose of the next section we introduce 
here a generalization of histograms called pseudo-histograms. Definition 3.6 A pseudo-histogram H with 
base e is a simple polygon H which, by adding at most two right triangles flush with e, can be transformed 
into a his­togram whose base is the extention of e by the colinear edges of the triangles. See Figure 
3. The edges of H which are incident to e and are also edges of the aug­menting triangles are called 
pseudo-base edges of H. The following theorem is a straight-forward generaliza­tion of Theorem 3.5. Theorem 
3.7 The bounded Voronoi diagram of a pseudo-histogram can be constructed in linear expected time. 4 Polygons 
Levcopoulos, in his PhD thesis [11], presented a useful method of partitioning simple rectilinear polygons 
into Figure 4: The decomposition of a polygon into pseudo­histograms. rectilinear histograms. Here we 
generalize the metlhod to include partitioning of general simple polygons into pseudo-histograms. Definition 
4.1 Let P be a simple polygon witlh a distinguished edge e. The partition of P into the set SH(P, e) 
of pseudo-histograms is defined as follows. Let H be the largest pseudo-histogram within P which has 
as the base e and as the pseudo-bases these of the two edges of P incident to e that form an angle be­tween 
90° and 180° with e inside P. If H = P then SH(P, e) = {H}. Otherwise, let PI, P2) . . . . l k be the 
subpolygons of P into which the rest of P is partit­ioned by H, and let ei be the edge of H adjacent 
to Pi. Then SH(P, e) is the union of {H} with the :jets SH(Pi, ei), i= 1, ..., k; see Figure 4 for an 
example. In fact, if the input polygon P is rectilinear, Definition 4.1 is equivalent to the definition 
due to Levcopoulos. In the rectilinear case, he was able to show that the to­tal number of vertices in 
the histograms in SH(P, e) is O(n). All reflex vertices in the histograms are original reflex vertices 
of P. Given the vertical and horizon­tal trapezoidations of P and an arbitrary edge e of P, SH(P, e) 
can be computed in linear time. This is no longer true for non-rectilinear polygons (e. g. if P is a 
triangle whose upper vertex lies to the right of its horizontal base, e, then the decomposition process 
fails to terminate.) But by resorting to pseudo­histograms we can prove the following generalization. 
Theorem 4.2 Let P be a simple polygon on n vertices, and let e be a vertical or horizontal edge of P. 
The total number of vertices in the pseudo-histograms in SH(P, e) is O(n). All reflex vertices in the 
pseudo-histograms are original reflex vertices of P. Given the vertical and horizonta[ trapezoidations 
of P and an arbitrary ed!ge e of P, SH(P, e) can be computed in linear time. Proofi The histograms and 
pseudo-histograms in SH(P, e) form an oriented multiway tree whose root is the figure with base e. Each 
pseudo-histogram Hi with base ei is the part of P that is illuminated by parallel light emanating into 
Hi from Hi s pseudo-base, perpen­dicular to ei. The edges of Hi that are not edges of P will be bases 
in the next step. There are two differ­ent types: light rays touching reflex vertices that cast shadow, 
and light rays originating from the endpoints of the (pseudo-)base of Hi. More precisely, if there is 
a pseudo-base edge attached to ei then its endpoint is an original vertex of P that emits a ray. If there 
is no pseudo-base edge attached to the endpoint, q, of ei then either the next edge of P forms an angle 
less than 90° with ei about q, in which case no ray originates from q, or the angle is greater than 180°. 
The latter can only happen if ei equals e, the first base edge of the decom­position. In this case, there 
is a ray emanating from 9. It follows by induction that for each base ei # e the endpoint closer to the 
base of the father of Hi is an original vertex of P. This shows that the decompo­sition process terminates 
and creates only O(n) many additional vertices (none of which is reflex since it re­ sults from a ray 
hitting an edge of P.) 0 We are using the following notations; as seen from the base of H, the bases 
of H s children are vertical. Definition 4.3 A child F of H is a left neighbor of H if its base is illuminated 
from the right by the light that emanates from the base of H. Otherwise, it is a right neighbor. The 
pseudo-histogram If itself is called the base neighbor of F. By s(F) we denote the part of P illuminated 
by parallel light emanating perpendicular from F through H. Actually, s(F) is a histogram but we shall 
rather call it the strip of F, to avoid confusion with the histograms of the decomposition. The following 
observation is illustrated by Figure 5. Lemma 4.4 Let F and F be two left neighbors of H. Then s(F) 
rl s(F ) =0. The next lemma bounds the possible extension of a bounded Voronoi region in the pseudo-histogram 
de­composition SH(P, e). Lemma 4.5 Let H be the base neighbor of F in SH(P, e), and let v be a vertex 
site of F. Then the bounded Voronoi region, U, of v is contained in the union of F, the left and right 
neighbors of F, and the strip s(F) that passes through H and possibly enters some neighbors of H opposite 
to F (unless v is a base vertex of H). Proofi Suppose a point x of U lies in the base neigh­bor, H, of 
F, but outside the strip; see Figure 5. The \ / bass of H Figure5: Strips generated by the left neighbors 
of H. segment ~ belongs to U, but the point of intersection (b) the diagram LVB(F), if H is a right neighbor 
with the vertical line through the lower base vertex, 1, of F, of F is closer to 1 than to v, a contradiction. 
The other of the base neighbour F of H into the diagram assertions follow similarly. 1 VBI(H). 6. Glue 
together all diagrams VBI (H) into the dia-Algorithm 2 gram VBI. Input: A simple polygon P with horizontal 
edge e. 7. While there is a region in VBI belonging to a site Output: The bounded Voronoi diagram VB(P). 
s which is not an original vertex of P, replace the region by its intersection with the Voronoi diagram 
1. Compute the pseudo-histogram decomposition of the sites whose regions share boundary with the SH(P, 
e). region ofs. 2. For each H compute VB(ll). 8. Output the resulting diagram. 3. For each H merge VB(.H) 
with the diagrams VB(F) of the left neighbors F of H into the dia­gram LVB(H). Also, merge VB(fZ) with 
the dia-  Theorem 4.6 Steps 1-6 of Algorithm 2 correctly pro­ grams of its right neighbors into RVB(17). 
 duce the bounded Voronoi diagram of P, enriched by the extra vertices that result from the decomposition 
process. 4. For each II merge LVB(fI) with the diagrams These steps can be performed in linear expected 
time. VB(F) of the right neighbors F of H into the diagram RLVB(H). In the following, let IF] denote 
the total number of vertices (original and extra ones) of pseudo-histogram!5. For each H merge RLVB(H) 
with F in SH(P, e). (a) the diagram RVB(F), if H is a left neighbor Proof: The correctness of Steps 3-6 
is due to Lemma of F, 4.5. A linear worst-case time implementation of Step 1 is provided by Chazelles 
s algorithm [3] combined with Theorem 4.2. Step 2 can be carried out in linear ex­pected time, dueto 
Theorem 3.7. In Step 3, let Pi with basefi, 1 s i ~ m, be the left neighbors of If. For each i we apply 
the Merg­ing Lemma 2.2 with its notations to PI = Q1 = Fi, Pz = Q2 = H, and d = fi. Trivially, kl ~ ]Fil 
holds. Due to Lemma 4.5 we have kz < l~(Fi) n H1. Since the strips s(Fi ) are disjoint (Lemma 4.4), the 
total support­ing cost, taken over all i, is bounded by IHI + ~&#38; lF~ 1. Moreover, these m merge operations 
do not interfere and correctly result in VB(H UF1 U.. .UFm). Since each of the m merge lines is part 
of this diagram, their total size (= merge line cost) is also bounded by the number of vertices of H 
and of all its left neighbors Fi. Sum­marizing over all pseudo-histograms H, we still obtain a linear 
bound because each F can be a left neighbor of at most one H its base neighbor. In Step 4, let Fi, 1 
~ i ~ m, denote the right neigh­bors of H. In applying the Merging Lemma we extend QI and Qz to the union 
of Fi and H with all their left neighbors, respectively. During these m merge steps we compute, within 
H U F1 U . . .U Fm, the Voronoi diagram of H, the Fi, and all their left neighbors, and the total cost 
is bounded by the sum of the number of vertices of these pseudo-histograms. Again, taking the sum over 
all H leads to a linear bound. In Step 5, (a), QI is the union of F with its right neighbors while Q2 
consists of H and both the left and the right neighbors of If. The reason for using RVEI(F) rather than 
RLVB(F) is to avoid an echo from H. Altogether, we have, in Step 5, to merge the diagrams of each F into 
the diagrams of its left (a) and right (b) neighbors. The total cost is still linear in IPI. 0 It remains 
to get rid of the extra vertices introduced in the histogram partition. Lemma 4.7 Step 7 of Algorithm 
2 is correct and can be performed in linear iime. Proof: Let 1-l be a pseudo-histogram in SH(P, e). Ob­serve 
that the only vertices in H that are not original vertices of P belong to the set of the upper endpc~ints 
of the bases of the left and right neighbors of H, plus possibly one of the endpoints of the base of 
H. Let L(H) be the set of extra vertices of H which belong to the bases of the left neighbors. Because 
of the presence of the lower base vertices, no two vertices in L(H) can have adjacent regions in VB1 
(H). The analogous fact holds for the set R(H) of extra vertices of the bases of the right neighbors 
of H. Finally, if the base clf H has as an endpoint a non-original vertex then its re,gion cannot touch 
the region of any site in L(H) because of the presence of the other original vertex of the inci­dent 
pseudo-base, nor of any site in R(H) because of the presence of the other original vertex of the base; 
see Figure 5. Now we apply the following coloring scheme. Suppose that H is on the j-th level of the 
pseudo-histogram de­composition tree. If H is at the root or is a left child of its parent then we color 
the regions of the sites in L(H) with the color LLj (mod ~, and the regions of the sites in R(H) with 
the color RLj (mod 3). Otherwise, we color L(H) with the color LRj (~~d 3) and WH) with the color RRj 
(mod 3). By the above observation and Lemma 4.5, no two regions with the same color are adjacent. Now, 
for each of the 12 colors we perform the following procedure. For each region U colored with the i-th 
color deter­mine all sites whose regions are adj scent to U. Compute the (standard) Voronoi diagram of 
these sites and its in­tersection with U. Replace U with the intersection. That this procedure correctly 
computes the bounded Voronoi diagram is due to the fact that the site being removed lies on an edge of 
P (and is not e. g. a re­flex vertex), and that no further edge of P intersects U. By [1], and by the 
linear size of the bounded Voronoi diagram, the regions of color i can be removed in total linear time. 
Afterwards, adjacent regions will still have different colors, by definition of the coloring scheme and 
the separation properties. c1 Combining Theorem 4.6 and Lemma 4.7 we obtain our main result. Theorem 
4.8 The bounded Voronoi diagram of a sim­ple polygon can be computed in linear expexted time. 5 Applications 
Corollary 5.1 The generalized Delaunay triangulation of a simple polygon can be computed in linear expected 
time. Proof: First, we compute VB(P) in linear expected time. Next, for each edge e of the polygon P 
we com­pute the Voronoi diagram V(e) of the vertices of P whose regions in VB(P) support the edge e, 
on the other side of the straight-line induced by e, and extend VB(P) by these diagrams. Due to [1] and 
the linear size of VB(P) this takes linear time. Now it is sufficient to compute the straight-line dual 
of the resulting extended diagram with possibly overlapping regions to obtain the generalized Delaunay 
triangulation [2, 151. c1 In particular, vertices whose regions in VB(P) are ad­jacent are mutually visible. 
This fact and the following were shown in [8] for the L1-metric, but the same proofs work for the Euclidean 
metric, too. Corollary 5.2 In linear expected time we can build up [6] a search structure that allows 
the nearest visible vertex to a given query point inside P to be found in logarith­mic time. [7] Corollary 
5.3 In linear expected time we can jind a nearest visible vertex to each vertex of P and, conse-[8] quently, 
a closest pair of co-visible vertices. Corollary 5.4 A point inside P that maximizes its minimum distance 
to the visible vertices can be found [9] in expected linear time. Obviously, VB(P) equals the geodesic 
Voronoi dia­gram of the vertices of P that is defined with respect to [10] path length within P. Thus, 
we could drop the notion of visibility in the above facts, and instead refer to the geodesic distance. 
[11] The closest pair of co-visible vertices could define an edge of P, rather than a diagonal. However, 
the next corollary is implied by [12, 13]. [12] Corollary 5.5 A shortest diagonal of a simple polygon 
can be found in expected linear time. [13]Corollary 5.6 A spanning tree on the vertices of P that is 
contained in P and has minimum edge length can be computed within linear expected time. [14] In fact, 
each edge of this tree belongs to the general­ized Delaunay triangulation. All of these applications 
are linear worst-case deriv­able from the bounded Voronoi diagram. In the con­ [15] struction of the 
latter, only the histogram case was solved by randomization. Thus, the question left open for future 
research is: How fast can we compute the bounded Voronoi diagram of a histogram in the worst [16] case? 
It would be particular nice to have a way of de-randomizing Step 2 of Algorithm 1.  References <RefA>[17] 
[1] A. Aggarwal, L.J, Guibas, J. Saxe, and P.W. Shor. A Linear-Time Algorithm for Computing the Voronoi 
Diagram of a Convex Polygon. Discrete and Compu­tational Geometry 2, 1987, Springer Verlag. [2] F. Aurenhammer. 
Voronoi Diagrams A Survey. Tech. Rep., Graz TechnicaJ University, 1988. [3] B. Chazelle. Triangulating 
a Simple Polygon in Linear Time. Proc. 31st IEEE FOCS Symposium, 1990. [4] P. Chew. Building Voronoi 
Diagrams for Convex Poly­gons in Linear Expected Time. Manuscript (1986). [5] P. Chew. Constrained Delaunay 
Triangulations Proc. 3rd ACM Symposium on Computational Geometry, 1987. H. Djidjev and A. Lingaa. On 
Computing the Voronoi Diagram for Restricted Planar Figures. Proc. WADS 91, pp. 54-64, LNCS, Springer 
Verlag. R. Klein. Concrete and Abstract Voronoi Diagrams. LNCS 400, Springer Verlag, 1989. R. Klein and 
A. Lingas. On Computing Voronoi Di­agrams for Simple Polygons. Proc. 8th ACM Sym­posium on Computational 
Geometry, Berlin, 1992, pp. 312-319. R. Klein and A. Linga.s. On Computing the gen­eralized Delaunay 
triangulation of a Simple Polygon. Manuscript, Lund University, 1992. D.T. Lee and A. Lin. Generalized 
Delaunay Triangula­tions for Planar Graphs. Discrete and Computational Geometry 1, 1986, Springer Verlag, 
pp. 201-217. C. Levcopoulos. Heuristics for Minimum Decomposi­tions of Polygons. Linkoping Studies in 
Science and Technology, PhD thesis, no. 155. C. Levcopoulos and A. Lingas. Fast Algorithms for Greedy 
Triangulation. Proc. SWAT 90, Lecture Notes in Computer Science 447, Springer Verlag, pp. 238 250. A. 
Lingas. Voronoi Diagrams with Barriers and the Shortest Diagonal Problem. Information Processing Letters 
32, 1989, pp. 191-198.  F.P. Preparata and M.I. Shames. Computational Ge­ometry: An Introduction. Texts 
and Monographs in Theoretical Computer Science, Springer Verlag, New York, 1985. R. Seidel. Constrained 
Delaunay triangulations and Voronoi diagrams with obstacles. In Rep. 260, IIG-TU Graz, Austria, pp. 178-191. 
 R. Seidel. A simple and fast incremental and random­ized algorithms for computing trapezoidal decomposi­tions 
and for triangulating polygons. Computational Geometry: Theory and Applications, vol. 1, no. 1, 1991. 
 C. Wang and L. Schubert. An Optimal Algorithm for Constructing the Delaunay Triangulation of a Set of 
Line Segments. Proc. 3rd ACM Symposium on Com­putational Geometry, Waterloo, pp. 223-232, 1987.   </RefA>
			
