
 A METHOD FOR TEACHING PROGRAMMING Jeffrey W Smith; SP&#38;D Inc; Raleigh, NC ABSTRACT: A ctassroom 
method for programming instruction which emphasizes the evolution of correct algorithms by try, test, 
repeat is presented. The method is simple, reasonably obvious, and serves to illustrate many of the concepts 
of introductory programming. No special equipment or background is needed. The objective of the introductory 
programming course is the introduction of the concepts and techniques of programming to the uninitiated. 
However, this introductory course is such a culture shock to the majority of the instructed that this 
goal is met marginally or not at all in many cases. Programming is perhaps taught best in a workshop 
environment where access to interactive facilities and instructional help are both present. Facilities 
and equipment can do much to improve the learning environment --those with some graphic capability are 
especially interesting [I]. In the absence of such facilities, results from the classroom lecture/listen 
format can be improved, I think, by the method outlined below. This method is for chalk-and-blackboard 
presentation of the introductory concepts of programming. It allows straightforward presentation of the 
evolutionary development of algorithms and programs, and this makes it specially suitable for the introductory 
course. Much of the expository difficuIty in the teaching of programming arises from the scope of the 
material that must be mastered before the programming process itself can properly begin. This means that 
the novice can be bewildered by the information received, lose sight of its significance and interdependences, 
and Permission to copy without fee all or part of this material is granted provided that the copies 
are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of 
~.he publication and its date appear, and notice is given that copying is by permission of the Association 
for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. 
 &#38;#169; 1981 ACM 0-89791-036-2/81/0200/0252 $00.75 become discouraged. The use of a "real machine" 
or simulator for assignments is often the final straw in a bale of confusion [2]. Another difficulty 
is the geometry-like axiom/theorem presentation from which many courses suffer, among them programming 
courses. Presenting material in this way can be convenient and well-organized, but often motivation 
(w~ny) and technique (how __tÂ°) are obscured by this approach. Such omissions are especially telling 
in a design course, and design is the crux of any programming instruction. What is needed is a method 
shorn of complexity and curios for the presentation of the basic concepts of programming. Below is one 
such method; the demonstration of motivation and technique are retained by evolving the required functions 
from a given population of primitive operations. I used this method to present material on the procedures 
and tools of algorithms -- flowcharting, subprograms, operations, operands, data representation --with 
ease, some elegance and success. The milieu was an introductory-level course given in an after-hours 
industrial environment. As the presentation will attempt to make clear, this method relies on demonstration, 
teaching-by-example, intuition, and reasonableness. Unwanted detail (eg., the canonical shapes used for 
flowcharting symbols) are suppressed or ignored. The goal is the presentation of algorithms and the associated 
techniques and concepts as they influence and abet the design processes so vital to programming, he~ctorial, 
flowchart form is preferred to the textual, pseudocode method at this instructional level because some 
relationships are more clear with an added dimension for depiction. The gist of the programming process 
can be characterized as: GIVEN: a limited set of" operations and procedures --to combine them in useful 
or meaningful ways to accomplish some function not present in the limited set. As a device for the teaching 
of algorithms, we posit a 252 machine, the ALGORITHM MACHINE (AM) which is capable of the following 
operations: branch (or fall thru) <--goto test(compare) assignment <== increment/decrement +I enter/start 
WE) exit/return (X) call [ ] This is not an overly capable machine as computers go --much suppression 
of detail has already occurred --however, the function present is adequate to construct more powerful 
capabilities. This process provides a demonstration of the central mystery of computing and the primary 
activity of the programmer: building complexity from simplicity using repetition and hierarchy. As any 
abbreviation does, this notation relies for effectiveness on the assumptions of its user; and in particular 
the fact that reasonable and familiar extensions and combinations will be honored. Variables are handled 
exactly as in geometry and algebra, the details of addressing are suppressed, and the assumptions of 
the user are counted on to steer usage in the correct direction. When the system is consistent, such 
assumptions will be borne out and the system is "easy to learn"; this appears to be the case with this 
notation. For the record, the AM is not presented even this formally until several examples have been 
worked. After some exposure to the machine, the students were prepared for a more formal characterization 
which may have been difficult to absorb early on. The first action in presenting algorithms is naturally 
enough to define algorithm as: [3] A set of rules giving a sequence of operations for the solution of 
a specific type of problem and possessing finiteness, definiteness, input, output, and effectiveness. 
The analogous recipe was mentioned. The example used was the algorithm of multiple-operand addition given 
the binary (two-operand) arithmetic operator for addition: (Refer to ALGORITHM IA) An explanation of 
accumulator-oriented machines, and the notions of operator, operand, source, and destination arise naturally 
in the discussion of this algorithm. The notation used in the diagram, while obvious to the experienced, 
was explained as well. The representation of the algorithm by a flowchart has pedagogical advantage since 
relationships are more graphic in two dimensions than in one. The flowchart is equivalent to a pseudo-code 
representation, of course, and this equivalence is pointea ou~ in the sequel. The step-by-step operation 
of the algorithm is easily TRACEd. With each of the algorithms discussed, the testing and verification 
procedure by the use of a variable TRACE was initially insisted upon, then strongly encouraged. This 
avoided the difficulty which many students experience with the assignment statement, in addition to screening 
out logical errors. Algorithm IA was presented to the class much as has been done here; it was the only 
one so giveh. All subsequent development was done in class by the class as a design comm-Tttee. A--{ter 
presentation of the problem, a short work session produced several proposals for a solution. These proposals 
were evaluated by TRACEing and flaws (if any) exposed. We could then repair or redo the proposal as necessary. 
The participation of the class in these developments is crucial to the success of the learn-by-doing 
approach. This procedure for the development of the algorithms will be exemplified in the evolution 
of Algorithm 2. This process, evolving the algorithm by design-test-TRACE-redesign is fundamental to 
both the teaching and performance of programming. The primary usefulness of the AM and its associated 
notation is the clarity with which it can represent this important development. We note that the AM cannot 
perform AIA, since there is no capability for addition of two numbers, only +I. Our next challenge, then, 
is to build--the general (positive) digit addition out of only increment/decrement. For this introductory 
portion, single positive digits only are considered; again this removes complexity and detail from the 
discussion. (Refer to ALGORITHM 2A) This algorithm, the first pass at single-digit bcd addition, illustrates 
the fundamental loop structure: ~INITIAL~TEST~PROCESS~INCREMENT~REPEAT~ and the operation of the algorithm 
serves as a demonstration of this vital concept. A verification/TRACE of the algorithm leads to discovery 
of flaws, which we proceed to repair: Since single-digit bcd addition has been specified, if the result 
would be >9, we will observe either erroneous output (wraparound) or some other error will occur (the 
error modes of the AM are unspecified). We learn that the algorithm must be tested over the full range 
of valid inputs for the proper outputs. We modify A2A to account for the possibility of a carry out from 
the addition of the two digits and we then have Algorithm 2B: 253 (Refer to ALGORITHM 2B) Next we 
notice upon operation that the algorithm has some side effects, since the values of N2 and NI can be 
changed by the action of the procedure. The actual operation performed is: [ Co,N3 <== N2+NI N2 <== 
0 NI <== N3 ] These side effects can be eliminated by the use of internal(local) variables which can 
be modified without any effect on the external (global) variables. Incorporating this fix yields Algorithm 
2C, where Co (the carry) has also been properly initialized. The rules for the algorithm's proper treatment 
of variables are now apparent:do not modify any input variables, do not assume any value to output or 
internal variables. The point here is this: these are not cold, remote, or abstract rules to the :students; 
they have been made up-close. They have seen why these are the rules, and may even have the feeling 
of having (re)discovered the rules via this evolutionary development. This method involves the class 
in the development of the material, giving high interest and some skill development. (Refer to ALGORITHM 
2C) In order to show the definition procedure for programs, and to further reinforce the building up 
of function from primitive operations, we combine AI an~J A2 to show that multiple-digit addition can 
be plausibly constructed from only binary operations and from only ZI. To accommodate the restriction 
to single-digit variables, AIA is modified to AIB: (Refer to ALGORITHM IB) This illustrates a correct 
algorithm for the addition of multiple operands; but the primitive operations actually in use allow only 
+I. This disparity in the arithmetic ~apability of the algorithms we have developed and the operations 
of which the (bare) machine is capable is illustrative of both the utility and the procedures of programming. 
The major difficulty experienced by the students in the design of algorithms was that of beginning the 
process --usually caused by having no thoughts on an-approach. When an approach was suggested by guided 
questioning, by hints, or by a neighbor, the students had good capability in the implementation of the 
algorithm with the techniques presented, which included the top-down approach with stepwise refinement 
of detail. An appreciable increase in this capability was observed as the course developed; but the base 
was quite high, reinforcing a belief that the algorithmic procedure is largely conceptual rather than 
mechanical. By this I only mean that once one "gets the hang of it", the entire process becomes familiar 
at once. This suggests that intuition is a major factor in the internalization of these techniques [4]. 
It is for this reason that exposition by example is effective. The penultimate assignment (given in an 
examination environment) was to be able to perform all of the algorithms developed, but on a machine 
with a reduced capability: the nature of the reduction being that the "test operation could test only 
for =0 or ~0. The hint given was that all the algorithms need not be rewritten. In the 'event, this 
problem was more difficult than intended and several additional hints were given; again, once the students 
got started their implementation was good. This particular problem was also a suitable lead-in to the 
"black box" design procedures which are so prevalent in properly hierarchical programming systems. From 
this point the effects of negative numbers were incorporated into the algorithms and a complete repertoire 
of arithmetic operations based upon signed magnitude bcd numbers was developed. This was the preferred 
representation for this course, whose vehicle is COBOL; another course might go another way. This collection 
formed an interacting system of algorithms, so systems concepts could be introduced. The result of 
these procedures, which consumed less than 15 hours of classroom time, were very positive. Many of the 
more conceptual aspects of computing had been presented and a notation and dommon background established 
without the specific features of a particular language or machine to distract. # Aspects of arithmetic: 
 operators/operands/number codes # Variable assignment: local/global # Testing/verification of algorithms 
# Flowcharting &#38;.algorithm notation # Hierarchy: call/return A more informal exposure to modularity, 
the principles of design, some discussion of algorithmic efficiency and esthetics (understandability) 
also emerged naturally from the discussion. Additionally, as no simple lecture can do, an appreciation 
of the limitations of computers and the role of programming in overcoming these limitations was given 
the students by this development. Both the limitations and capabilities of the computational automaton 
were understood by the class in general. The disparity in background and vocabulary found in any introductory 
~ourse was overcome by this exposure to the fumdamentals of the Computagional process. This presentation 
 !. 254 served as a referent and launching point for subsequent developments in the course. This framework 
served to develop the concepts of computation without naive simplicity but also without misdirecting 
complexity. The representation is clear, requires no special equipment, and is efficient and accurate. 
It has had good results in limited use; I will without reservation recommend its trial in any introductory 
programming course. ACKNOWLEDGEMENT: for aid and support, to H Walker of NCSU Continuing Education, 
to M Johnson of BCBSNC, and to M Loeb of NCSU EE Dept, "Thanks". <RefA>[I] Thalmann, "Introduction to programming 
concepts with graphical objects", SIGCSE BULLETIN, 12:1, 2/80, pp 105-9. [2] Ulloa,M, "Teaching and 
learning computer programming", SIGCSE BULLETIN, 12:2, 7/80, pp 48-64. [3] Knuth, FUNDAMENTAL ALGORITHMS, 
Addison-Wesley, 1975. </RefA>[4] Wales, "Improve your teaching..." ENGN EDUC 66:5, 2/76 AIA: [ A <== B+C+D+E 
] O. (E) V I. A <:: B 2. A <== A+C  3. A <== A+D  4. A <== A+E  5. (X)  V A2A: [ N3 <:: N2+NI 
] O. (E) ...... >J V = I. N2:0 ...... i<> V 2. NI <== NI+I  3. N2 <== N2-I  4. I  ; V 5. N3 
<== NI  6. (X)  V A2B: [ Co,N3 <== N2+NI ] O. (E) ..... >; V : I N2:0 ...... I<> V 2. N2 <== 
N2-I  NI <== NI+I  3.  < V  4. <-- NI:10  I>: V  5. Co <== I  6. NI <== 0  I V 7.  8. N3 <== 
NI  (X)  9.  V A2C: [ Co,N3 <== N2+N ] O. (E) V I . A <:: N2 2. B <== NI Co <:: 0 3.  I..... 
>I V = 4. A:O ......  ;<> 5. A <== A-I  6. B <== B+I  < V 7. <---B:IO  ;>: V 8. Co <== I  9. 
B <== 0  10. V  11. N3 <:: B  ', V  12. (X)  AIB: [ Co,A <== B+C+D+E ] O. (E) V I A <:: B 2 
[Co,A <== A+C] 3 [ k,A <== A+D] 4 [k,Co <== Co+k] 5 [ k,A <== A+E] 6 [k,Co <== Co+k] V 7. (X) 255 
			
