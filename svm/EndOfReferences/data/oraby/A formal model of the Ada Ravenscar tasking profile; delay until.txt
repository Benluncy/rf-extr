
 A Formal Model of the Ada Ravenscar Tasking Profile; Delay Until* Kristina Lundqvist, Lars Asplund Uppsala 
University, Information Technology Dept. of Computer System~ P.O. Box 325, S-751 05 Uppsala, Sweden Krist 
Â±na. Lundqvist@docs. uu. se, Lets. Asplund@docs. uu. se Abstract The definition of the Ravenscar Tasking 
Profile for Ada 95 provides a definition of a tasking runtime system with deter- ministic behaviour and 
low enough complexity to permit a formal description and verification of the model. A complete run-time 
system is being modeled using the real-time model checker UPPAAL,and this work describes the handling 
of delay until Since scheduling is not yet modelled a simple non-preemptive scheduler has been used when 
verifying the delay queue.  Introduction High Integrity systems traditionally do not make use of high- 
level language features such as concurrency. This is in spite of the fact that such systems are inherently 
concurrent. The traditional approach has been to declare concurrency to be a system issue, and to develop 
alternative methods, such as cyclic executive approaches to solve concurrency issues. The net result 
has been the creation of non-cohesive systems that are very difficult to analyse, let alone attempt any 
formal proofs of correctness. The static properties of the Ada language, the strong typing facilities, 
and the relatively few occurances of imple- mentation-dependent and unspecified behaviour can help in 
the development of provably correct program~ in Ada. In-deed the existence of SPARK [Bar97], AVA [Smi92] 
and Penelope [GMP90] for Ada 83 showed that this was possible, although the proof technologies and Ada 
83 itself made the provable subset somewhat limited. It is also common belief that these proof methodologies 
could be extended to Ada tasks if a sufl~ciently predictable and precise tasking subset was specified. 
Ada 95 introduce a number of new tasking-related ca-pabilities that improve the specification of concurrent 
be- *This work is funded by Swedish National Board for Industrial and Technical Development, Swedish 
Nuclear Power Inspection, and Swedish Dofence Material Administration Permission to make digital or hard 
copies of all or part of this work for personal or classroom use is granted without fee provided that 
copies are not made or distributed for profit or commercial advantage and that copies bear this notice 
and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute 
to lists, requires wior specific permission and/or a fee. SIGAda'99 10/99 Redondo Beach, CA, USA (~)1999 
ACM 1-58113-127-5/99/0010...~;5.00 haviour, and give explicit permission to restrict language features 
to improve performance, predictability or correct- ness. At the 8tli International Real Time Ada Workshop, 
a concurrency model was developed called the Ravenscar Tasking Model [DB98] [WB97] which could make the 
verifi- cation of tasks in Ada a reality. 2 The Ravenscar Profile The Ravenscar model eliminates nearly 
all of the Ada task- ing constructs that contain implementation dependencies and unspecified behaviour. 
The specification of the l~aven- scar tasking model significantly advances the way of prov- ing concurrent 
programs in that one can also prove that the tasking runtime system correctly implements the mode]. To 
date there has been one implementation~ Raven [DB98 L of the Ravenscar model. This implementation can 
be certified in conjunction with an application program, but there has not yet been any attempts to formally 
analyse ei- ther the kernel itself, or an application using this kernel. In Raven some emphasis is put 
on suspension objects, which fits very well into the Ravenscar model. There has been some previous work 
done to formally verify different run-time systems e.g. [To195] [Hut94]. The development process described 
in [FNV9?] attempts to cap- ture all of the temporal properties of a preemptive kernel, and show how 
an implementation of them can be developed. The formal development of the kernel is done for a simple 
real-time operating system, designed to support a restricted Ada 95 tasking model. The kernel is specified 
using the logic of the Prototype Verification System (PVS) [CO+95], with the temporal properties of the 
system expressed us-ing Real-Time Logic (RTL) [JM86] embedded in PVS. The work is based on a previous 
work on specifying real-time kernels [FW96], the used subset of Ada" is similar to the Ravenscar profile. 
 2.1 Ravenscar Limitations One of the major capabilities that the l~venscar model adds to high integrity 
concurrent systems is a deterministic inter- task communication and synchronisation capability. This 
capability is provided by a "limited" form of Protected Ob- jects (PO). The l~venscar Profile limits 
Protected Objects and tasking in several ways that dramatically simplify PO behaviour, and in conjunction 
with restrictions on tasks, vir- tually all of the non-deterministic behaviour in an Ada Run Time System 
(ItTS) are eliminated. Besides the two main features, limited forms of tasks and POs, in the Ravenscar 
Profile, there are the delay until, sup-port for nser defined interrupts and a preemptive scheduler using 
a priority ceiling protocol as per Annex D (Real-Time Systems) [ALUM95].  2.2 A Ravenscar-compliant 
Ada Run Time System The restrictions imposed by the l~venscar profile on an Ada Run Time System, gives 
a simplified kernel. The computa- tions] mode] that the kernel supports is made up of a fixed set of 
concurrently executing tasks, which can communicate asynckronously by means of Protected Objects. Each 
task should be structured as an infinite loop within which is a single invocation event. This is either 
a call to delay until or a call to a protected entry. Periodic tasks can be imple- mented by using the 
delay until, allowing a task to suspend itself until a fixed point in the future. Function Entry "oonl~aue" 
l~lsy until Figure I: Control-fiows between Protected Objects, the De- lay Queue and the Scheduler. 
There are five basic kernel operations, corresponding to the four operations that the application can 
invoke (i.e. call to a protected procedure, protected entry, protected func- tion, or a delay until operation). 
The fifth kernel operation is response to external interrupts. Figure 1 shows some of the control fiows 
between Protected Objects, the delay queue and the scheduler. For all four application operations there 
is a decision taken hy the scheduler which task to run, in-dicated as 'continue' in figure 1. The External 
Interrupts has not yet been modelled and are not included in figure 1. The three calls to the PO, and 
a formal model of a PO is described in [LAM99], and the delay until is described in this paper. 2.3 
The Mana-project The Man~-project is aimed at developing and modeling a complete Ravenscar-compliant 
Ada ~Lun-Time System (RTS) using forms] development methodologies. The tool used for proving the correctness 
of the RTS by formal description and formal verification is UPPAAL [LPY97]. UPPAAL is still under development, 
and the Maria-project is working close with its development team. One important factor for choosing UPPAAL 
is that UP- PAAL is baaed on the theory of Timed Automata (TA), and these timed automata allow lower 
and upper time limits to be specified for transitions in the state machines. This fea- ture allow for 
modelling a complete systems with not only its state transitions but also the execution times in the 
ap- plication tasks. The lower limit can be taken ~rom the Best Case Execution Time (BCET) and the upper 
limit f~om the Worst Case Execution Time (WCET) of the tasks. Out of the basic kernel operations, a previous 
paper [LAM99] described and analysed the Protected Object. This paper describes a model of the delay 
queue. The model is complete, but in order to do the verification there is a need for a scheduler. The 
tests in this paper are performed with a very simple non-preemptive model of the scheduler. The design 
of a fully prioritized scheduler that implements the priority ceiling and inheritance protocol has been 
completed and published in a technical report [LA99]. 3 The UPPAAL Tool Box UPPAAL is a tool box for 
modelling [LPY97], simulation and verification of real-time systems, based on constraint-solving and 
on-the-fly techniques, developed jointly by Uppsaia Uni- versity and As]borg University. It is appropriate 
for systems that can be modelled as a collection of non-deterministic processes with finite control structure 
and real-valued clocks, communicating through channels and (or) shared variables. UPPAAL consists of 
three main parts: a description lan- guage, a simulator, and a model-checker. The description language 
is a non-deterministic guarded command language with data types. It serves as a modelling or design language 
to describe system behaviour as networks of timed automata extended with data variables. The simulator 
and the model checker are designed for interactive and automated analysis of system behaviour by manipulating 
and solving constraints that represent the state-space of a system description. The simulator enables 
examination of possible dynamic execu- tions of a system during early modelling or design stages and 
thus provides an inexpensive mean of fault detection prior to verification by the model-checker which 
covers the exhaustive dynamic behaviour of the system. There has been some previous work concerning Ada 
and UPPAAL [Bjo95], where the relation between the Ada task- ing model and the formal mode] timed automata 
is given, and also some guidelines for translating Ads tasking con- structs into timed automata and vice 
versa. 3.1 Timed Automata and UPPAAL A timed automaton (TA) lAD90] is a finite automaton [HU79] extended 
with time by adding real-valued docks to each automaton, and for each transition adding guards as enabling 
conditions. A system model in UPPAAL consists of a collection of timed automata modelling the finite 
control structures of the system. In addition the model uses a finite set of docks and integer variables. 
Consider the model in f~mre 2. The model consists of 2 components, A and B, with control nodes A0, A1, 
A2 and B0, B1, B2, and uses two clocks x, y, and one channel c. The edges of the automata are decorated 
with three types of optional labels; A guard, expressing a condition on the values of docks and integer 
variables that must be satisfied in order for the edge to be taken. For eyample, the edge between A 
Config O x>:2, c!, x:=0 - >a ~ clock x, y; 0 AI A2 int i;x<=lO) chan c; system A, B; B i:=l y>--4, 
c7, y:=O i:--i+l ,&#38;#169;    O ,-&#38;#169; B0 BI B2 (y<=6) Figure 2: An example UPPAAL model. 
A0 and A1 can only be taken when the value of the clock is greater than or equals 2. A synchronisation 
action, which is performed when the edge is taken. In figure 2, the two processes may com- municate via 
the channel c. When the edge is taken the action c! is performed thus insisting in synchroni- sation 
with B on the complementary action c?. That is for A to take the edge between A0 and A1, automa- ton 
B must simultaneously be able to take the edge from B0 to B1.  A number of clock resets and assignments 
to integer variables. In figure 2, the clock is reset to 0 when the transition between A0 and A1 is 
taken, similarly the integer variable i is increased by one whenever the transitions between nodes B1 
and B2 is taken.  In addition to this, the control nodes may be decorated with invariants. Invariants 
are conditions expressing con-straints on clock values in order for control to remain in a particular 
node. For example, in figure 2, control can only remain in A0 as long as the value of is less than 10. 
The initial state of an automaton is indicated graphically by a double circled node. To prevent a network 
of automata from delaying in a situation where two components are already able to syn-chronise, a channel 
may be declared as being urgent, i.e. as soon as it can be taken, no further delay is allowed before 
communication takes place. In order to model atomicity of a transition sequence in an automaton, i.e. 
without time delay or interleaving of tran- sitions in other automata, a state can be marked as being 
a committed state 1. For example the atomicity of the ac-tion sequence ltesumQ?Suspend?0! in the task 
automaton, figure 6, is achieved by insisting that the committed loca- tions in between must be left 
in zero time. 3.2 New Features in UPPAAL98 There has been a number of improvements in UPPAAL98 compared 
to the version of UPPAAL used in our previous work [LAM99]. New features used in this paper are an ar- 
ray of integers (DO), and a template automaton (T). Through instantiating a template automaton it is 
possible to get a variable number of automata. Finally there has been a ma- jor revision of the graphical 
interface, which makes the job of modelling complex systems easier. XA committed state is graphically 
indicated by a dot in the middle of the node. 4 Formalisation of a Delay Queue in UPPAAL We start with 
an overview of the components and their in- teraction via channels and shared variables. The modelling 
of the delay queue and its environment is separated into 4 diifereut parts. The model of the queue (Queue), 
the system clock (Clock), a simplified model of a scheduler (Scheduler) and the tasks in the system (T). 
Figure 3 shows a flow-graph of the resulting model. Nodes represent automata, edges represent synchronisation 
channels, and clocks are shown in italics. TI Queue Q _ "1  I! , [ Tm,! a ~ QE [ Figure 3: A Flow-Graph 
of the Delay Queue and its Envi- ronment. In the following subsections we give a detailed description 
of the clocks, variables and automata of the system. 4.1 Clocks Two different clocks are used to model 
the system clock and the WCET for the task. C].k Models the system time. Once every Time_Unit (i.e. when 
Clkffiffil) the value of variable Time will be in- creased by one, figure 5. Tau Every task, figure 6, 
has its own Tau-clock which is u~ed to model that task's WCET. 4.2 Variables and Arrays DUntil A task 
is blocked f~om further execution until the specified expiration time (DUntil) is reached. DO The array 
used to model the delay queue. Every task in the system has an unique place ,in this array where its 
delay until time is stored. Go A variable used only to make sure that a task does not start executing 
before all system elaborations are done. i Index number in the array DQ. j When searching through the 
array DQ, this variable is used to keep track of the task with the shortest/closest delay ~ntii time. 
len How many tasks are at the moment queued in the delay queue. max A variable used to make sure that 
the array index never exceeds the array size. max has the value of one less than the maximum number of 
tasks in the system. Pid Id of the queued task with the shortest delay until time. PidNa Every task has 
a unique number (Process id number). PE Variable used to guarantee that the correct task is re- leased 
when a delay until time is reached. t The shortest delay until time of all tasks at the moment queued. 
Time The value of Time t represents the real time interval that start with txTime_Unit and ends with 
(tÃ·l)~ Time_Unit. Time_Unit is the time taken by the clock Clk to get the value of 1.  4.3 System Model 
To model and test the delay queue a system with four dif- ferent automata is needed. Scheduler The automaton 
for the simple non-preemptive scheduler, figure 4 has two channels Resume and Sus- pend. Both channels 
are urgent channels, which means that as soon as the processor is free, and there is a task ready to 
execute, the task will synchronise with the Scheduler on channel Resume. Only one task at the moment 
can execute. When a task has finished executing, it synchronises on channel Suspend. process Scheduler 
0 ]tempe ! SmlF~4! Figure 4: The Scheduler Automaton. Clock The Clock automaton, figure 5, models the 
system clock and the variable Time, and also makes a number of initialisations/elaborations. The state 
Stop is only needed to make verifications stop, and has been chosen to be at Time=siS0. Task A suspended 
task will be suspended at node $3, fig- ure 6. When the task is removed from the delay queue it gets 
suspended at node S4 until the processor is free and the task will synchronise on cha--el Resume and 
stay at node $5 for the time corresponding to that tasks WCET. As soon as the task has finished exe- 
cuting, it synchronises on Syne, calculates a new de-lay until time, gets queued, and suspends at node 
$3. INCUS CrOCk O Â¢~ttz~z~ Â¢tb==t, ~=u= ~,=, . \s,:// .ir-~ ~-_l, im :~8. m.~ ~3 T _~m(~,, .-r t~ Go=,,l 
Cl'==O " -=l~pm=; Figure 5: The Clock Automaton. To get an automaton the template automaton in fig- ure 
6, should be iustantiated as e.g. TI := T(Delayl, PidNol, Templ, 28, 1, 8, Taul), which gives a task 
with id number 1, delay until 28, and a WCET of 8. Queue The Queue automaton in figure 7 can be partitioned 
into two parts. Nodes $2 to $4 handling queueing of tasks, and nodes $5 to $10 handling the releasing 
of tasks. After elaboration, synchronising on channel Elab the automaton is waiting at node $I until 
a task makes delay until The first task to make delay ~ntil will synchronise with Q (node Queue.S2) and 
set t to its delay until time, set Pid to its id number, and return to node $1. The next task to make 
a delay until will also synchronise with q, this time ending up in state Queue.S4. If the new tasks delay 
until time is smaller than the active time (t), the active task will be queued, and the ,rariables t 
and Pid will be assigned the new tasks DUntil and PidNo. If the new tasks delay until time is later than 
the active time, this new task will be queued and we return to state $1 again. As soon as the delay until 
of the active task agrees with the variable Time that task should be removed from the queue and the queued 
task with the shortest delay time should be found. If the active task is the only one in the queue the 
task is at node S5 removed from the queue, and synchronisation with the task on channel QE takes place. 
If there are tasks queued, the active task will be removed, synchronise on QE at state $6 and there after 
going through the array in order to find the task with the shortest delay time. When found, the variables 
t and Pid are instantiated mad we are back at state S1. If there are more than one task with the same 
delay until time, they will all be removed from the queue at the same time (since all states $5 to $10 
are committed states). 5 Validation and Verification of the Model In this section we formalise informal 
requirements to test the modelled queue, and .prove correctness using the symbolic model-checker of UPPAAL. 
UPPAAL is able to check for reachability properties [LPY97], in particular whether certain combinations 
of con- trolnodes and constraints on clock and data variables are reachable from an initial configuration. 
The properties that can be analysed are of the forms: := VDp I 3op P ::= " I Pl A ~= I "~ Where a is 
an atomic formula being either an atomic clock/data constraint or a component location. Atomic clock 
process T (i.t !); mt I~l; I.t Tqm~p; cgcst Dval; crest Pval; ~.-~| W(I:T; clock Ta-) IS ~,--I PR'~= 
Pt,al. il~=D~h Si_..,,..s-r.~.. ~ , SZ S)~ ~,,,D,.~, SS q~1 $4 ~mmeo_,,a,.q.s~m-.=s'~_~..t,z=.m_,,a,. 
~,m,,. ~ ~lrr D p, Tem~,D S&#38; m, Figure 6: The Task Automaton. IWOC~.S Guetm so ez \ m=z~mo,l Ik~,e. 
nm,tl~.t ,,,~-~ I / I \ ~ ~ / ~'~s- m~sqd.., ~, Im nQ(q,,,=r'-'-.-~--,,,~ mI(n4.-tl,... |,  ik,,14-1 
l ~ St F Q|! i(uma. ]Rdpd.(J, --~ li,si~l  ~']O~Jl -m,~l.// ,~v. j=.~q nupl.~,  I,um&#38;u Figure 
7: The Queue Automaton, or data constraints are either integer bounds on individual can be at state T.55 
at the same time. This is stated as clock/data variables, or integer bounds on differences of two follows; 
clock/data variables. AD (T1.S5 imply not(T2.S5 or T3.S5)) Intuitively, for VB~ to be satisfied all 
reachable states AD (T2.$5 imply not(T1.S5 or T3.$5)) must satis~ ~. Dually, for 30~ to be satisfied 
some reach- AO (T3.$5 imply no~(TI.SS or T2.$5)) able state must satisfy ~. The first property to show 
is that when a task T,figure 6, 5.1 Verification Results reaches node S4 (i.e. when the task is removed 
from the queue and ready for rescheduling), the variable T~ will The 6 properties mentioned above have 
all been verified us- always be larger than what the tasks delay until time was. ing UPPAAL and when 
the model checker is invoked it for all This is formulated by the following three logical statements. 
6 properties returns All (T1~$4 imply checked A[.] (T1.$4 imply ((Time > Delay1) or ((Time Delayl) or 
(Time == Delayl))) (Time = Delay1))) A[] (T2.S4 imply Requirement is satisfied ._ ((Time Delay2) or 
(Time =--Delay2))) checked A I] (T2.S4 imply ((Time Delay2) or A 0 (T3.S4 imply (Time == Delay2))) ((Time 
 Delay3) or (Time == Delay3))) Requirement is satisfied The second property is that never more than one 
t~sk  can execute at the same time, i.e. at most one of the tasks That is all six logical statements 
are satisfied. 5.2 Extended Test of the Model There is no way of showing properties for a general number 
of tasks in UPPAAL, and indeed not in any other approach based on model checking. We can not make a statement 
that the delay queue model is valid for any other number of tasks than the three used in the model above. 
As an experiment we have created a model with 10 tasks. The same kind of tests as above are made, and 
also this time all properties are satisfied. Nm. ..n. il I Rink  ,, AB C DE F m Figure 8: A Schedule 
for three tasks with delay until times 25, 60, 70, and WCET 10, 14, 22. The grey areas show where the 
tasks actually are executing Consider the schedule shown in figure 8. It shows three periodic tasks with 
dela# until times of 25, 60, 70 and Worst Case Execution Times of 10, 14, and 22. The grey areas show 
where the tasks actually get to execute on the proces- sor, the "white boxes" show where the tasks actually 
would have executed if the tasks were alone on the processor. The shown schedule is the expected schedule 
for a perfect non-preemption scheduler, that follows the del,~y until times and the execution times. 
We have done verifications for all time steps between 0 and 170 to verify that the model follows this 
expected schedule. In this paper we only present tests at 6 different times (Time==45, 55, 72, 82, 90 
and 112) in order to show that our model manages to follow the given schedule. The letters A. B, C, D, 
E, F show where the tests are made. For example at time 45 (A), all three tasks are queued, i.e. in state 
T.53. At time 72, task 1 is in the delay queue, task 2 is executing, and task three is ready to run, 
but waiting for the processor to be f~ee. These tests are formulated as follows; All ((Time==4S) imply 
(TI.S3 and T2.$3 and T3.$3)) A[] ((Time==S5) imply (TI.S5 and T2.$3 and T3.$3))) A [] (CTime==72) imply 
CTI.S3 and T2.$5 and (T3.$3 or T3.84))) A[] (CT~e==82) imply ((T1.$3 or T1.$4) and T2.$3 and T3.$5)) 
A [] (CT~==90) imply (T1.85 and (T2.$3 or T2.S4) and T3.S3)) A[] ((Timo==ll2) imply CTI.S5 and T2.S3 
and T3.S3)) All six statements are satisfied.  6 Results and Future Work To model a full Ada 95 Itun-Time 
System using Formal Methods is not possible today. This and previous [LAM99] works show that it is leasable 
to model the complete run- time system of the P~venscar subset of Ada 95. In both [LAM99] and this work 
there are no restrictions on the func- tionality of either the Protected Objects or the Delay Queue. 
Still the cpu-time to do the verifications only take roughly one second to compute on a pentium-class 
processor. The complexity is thus low enough to encourage future extensions of the model. How this complexity 
will increase by adding more functionality is not known, but the goal of the Mana project is to have 
full functionality of a Ravenscar- compliant Itun-Time System in conjunction with a moderate sized application 
program. The next natural step to take is to make the model of the kernel complete with a priority sensitive 
scheduler using the Immediate Ceiling Priority Inheritance Protocol, and handling of interrupts. The 
new model of the kernel should also be verified together with a more complex application. References 
<RefA>[AD90] It. Alur, and D. Dill, ~Automata for Modeling Real- Time Systems", Proceedings of the 17th International 
Colloquium on Automata, Languages and Program-ruing, vol. 443, Springer-Verlag, 1990. [AItM95] Intermetrics, 
"Ada95 Reference Manual", ISO/IEC-8652:1995, 1995. [Ba~97] J. Barnes, "High Integrity Ada -The SPARK 
Ap- proach", Addison Wesley, ISBN 0-201-17517-7, 1997. [Bjo95] L. BjSrnfot, "Ada and Timed Automata", 
In proc. Ada Europe, Frankfurt, Germany, LNCS 1031, pp. 389- 405, Springer-Verlag, Oct 1995. [Cha98] 
Pierre Chapront, "Ada+B The Formula for Safety Critical Software Development", Ada Europe, Uppsala, Sweden, 
LNCS 1411, pp. 14-18, Springer-Verlag, June 1998. [CO+95] J. Crow, S.Owre, J. Rushby, N. Shankar, and 
M. Srivas, "A tutorial introduction to PVS", "VVIFT'95: Workshop on Indus~.rial-Strength Formal Specification 
Techniques, Boca Itaton, Florida, April 1995. [DB98] B. Dobbing and A. Burns, "The Itavenecar Task- ing 
Profile for High Integrity Real-Time Program-q", SIGAda'98, Nov 8-12, 1998. [FW96] S. Fowler and A. Wellings, 
"Formal Analysis of a Real-Time Kernel Specification", FTItTFT'96, 1996 [FW97] S. Fowler and A. Wellings, 
"Formal Development of a Real-Time Kernel", 19th IEEE Real-Time Systems Symposium, Dec .1997. [GMP90] 
David Guaspari, Carla Marceau, and Wolfgang Polak. Formal Verification of Ada Progr~m.q. IEEE Transactions 
on Software Engineering, vol. 16, no. 9, September 1990, pp. 1058-1075. [H~LG98] ISO/IEC PDTR 15942, 
Guidance on the Use of the Ada Programming Language in High Integrity Sys- tenlfl, [HU79] J.E. Hopcroft 
and J.D. Ullman, "Introduction to Automata Theory, Languages and Computation", ISBN 0-201-02988-X, Addison-Wesley, 
1979. [Hut94] A. Hutcheon, "Safe Nucleus Formal Specification", Project Reference CI/GNSR/27: The Design 
and De- velopment of Safety Kernel, Aug 1994. [IRT99] To be published in Aria letters, spring 1999. [JM86] 
F. Jahanian and A. K. Mok, "Safety analysis of tim- ing properties in real-time systems", IEEE Transactions 
on Software Engineering, 12(9):890-904, Sept. 1986. [LA99] K. Lundqvist, and L. Asplund, "A Formal Model 
of a Ravenscar-Oompliant Run-Time Kernel and Applica- tion Code = , Technical Report 1999-002, Department 
of Information Technology, Uppsala University, May 1999. [LAM99] K. Lundqvist, L. Asplund, and S. Michell, 
"A For- real Model of the Ada Ravenscar Tasking Profile; Pro- tected Object", Reliable Software Technologies 
- Aria-Europe'99, Santander, Spain, LNCS 1622, Springer- Verlag, June 1999. [LPY97] K.G. Larsen, P. Pettersson, 
and W. Yi, "UPPAAL in a Nutshell", Int. Journal on Software Tools for Tech- nology Transfer, Springer-Verlag, 
vol 1, number 1-2, pp. 134-152, Oct 1997. [Smi92] M.K. Smith, The AVA Reference Manual: Derived from 
ANSI/MIL-STD-1815A-1983, Computa- tional Logic Inc., Feb. 1992 [To195] R.M. Tol, "Formal Design of a 
Real-Time Operating System Kernel", Ph.D. thesis, University of Groningen, 1995. [WB97~ A. Wellings and 
A. Burns, '%Vorkshop Report", The Eighth International Real-Time Ada Workshop (II~TAW8), Ada User Journal, 
vol 18, number 2, June 1997'.  </RefA>
			
