
 Chapter A Fast Algorithm for Connecting Nonintersecting Yitzhak Birk* Abstract We consider the problem 
of determining whether it is possible to connect a given set of N pointsin an (m x n) rectangular grid 
to the grid s boundary using N disjoint straight (horizontal or vertical) lines. If this is possible, 
we find such a set of lines. Our yalgorithm can have either O(nz + n) or O(IflogN) complexity. We then 
extend our algorithm to accommodate an additional constraint, namely forbidding connections in opposite 
directions that run next to one another. A solution to this problem is equivalent to providhg a set of 
processor substitutions which reconfigure a fault-tolerant rectangular array of processing elements t 
o avoid the fault y processors while retaining its important properties. We have also shown that the 
problem is NP­complete for 3-D grids as well as for partitioned 2-D grids. Introduction. Problem Statement 
and Main Results. Consider an (m x n) rectangular grid, and a given subset of IV grid points. (See Fig. 
1.) Problem 1. Connect each point to the grid bound­ary using a straight (horizontal or vertical) line 
such that different lines do not intersect, or indicate that there is no solution. Problem .2. The same 
problem, with the additional constraint that connections in opposite directions in adjacent rows (columns) 
may have at most one common column (row) position. For example, if point (i, j) is connected to the left 
and point (i + 1, k) is connected to the right then k ~ j. A violation of this constraint is called a 
near miss. We provide an efficient algorithm for solving both problems. It ia linear in iV once the points 
are sorted by row and by column. We have also considered a variety of partitioned grids. Here, the connections 
are made to subgrid bound­aries, but the boundaries are shared among neighboring subgrids, so any given 
position on the boundary can ac­ ·IBM Research Division, Almaden Research Center, 650 Harry Road, San 
Joze, CA 95120-6099. bkk@ibm.tom, lotspiech@Xbxn.com. 52 Grid Points to the Boundary with Straight Lines 
 Jeffrey B. LotspiecW cept a connection from a point in either of two subgrids but not from both. We 
showed that the problem is NP-Complete for most types of partitions, w well as for 3-D grids [1]. Applications. 
Problems 1 and 2 for 2-D grids were introduced by Kung et al [2][3]. They considered a rectangular processor-array 
which haa spare processors along its boundary. A faulty processor is replaced by its neigh­bor, say on 
its right, which in turn is replaced by its right neighbor; this substitution cent inues until a pro­cessor 
in the rightmost column is replaced by a spare processor. The advantage of such a reconfiguration is 
that the logical structure of the array is preserved and the connections remain short. They proposed 
a sim­ple hardware design for the switches which helps im­plement this substitution strategy, and showed 
how a solution to Problem 2 can be mapped directly to switch settings that implement a legal reconfiguration 
of the array. (The points to be connected correspond to the faulty processors, and the direction of the 
connection for a point corresponds to the choice of substituting neigh­bor.) See Fig. 2. An actual array 
may consist of interconnected discrete processors, VLSI or Wafer-Scale Integration (WSI). In the two 
latter cases, reconfiguration is an important way of increasing the manufacturing yield, since simple 
replacement is essentially impossible. The importance of efficient reconfiguration algorithms is in reducing 
the mean time to repair a failing opera­tional system and increasing the cost-effectiveness of the reconfiguration 
stage of a manufacturing process (in VLSI/WSI). Applications of large rectangular arrays include pixel 
processors for high-performance displays, which can have in excess of lM processors, systolic arrays, 
large multiprocessors (e.g. the intel Touchstone), etc. The interest in partitioned grids stems from 
the fact that, as the number of processors increases, a decreasing fraction of them may fail and still 
permit reconfiguration. (Circumference/Area.) 465 BIRK AND LOTSPIECH (a) Figure 1: (a) A legal set of 
assignments; note that the connections jointly marked A do not constitute a near miss. (b) Violations 
of the connection rules. B: intersection; C: connection through another point; D: near miss. In section 
2 we present an algorithm for solving problem 1. In section 31 this is extended to solve problem 2, and 
section 4 concludes the paper. 2 Finding Non-Intersecting Straight Paths in a Rectangular Grid (Problem 
1). 2.1 Preliminaries. Every instance of Problem 1 is equivalent to one in which there are no empty rows 
or columns in the grid. Similsrly, every Problem instance is equivalent to one in which consecutive empty 
rows (columns) are represented by a single empty row (column). Throughout the remainder of the paper, 
we will therefore assume that the problem instance is provided in compact form. Once all the results 
are derived, we will adapt them to the case of non-compact inst antes. DEFINITION 2.1. A partitionable 
solution is one in +-++ -+­ which it is possible to pass a straight (horizontal or Figure 2: A rectangular 
grid of PEs with single-track vertical) line through the grid without intersecting any of switches and 
with spare PEs along the perimeter. A the connections. A k-Blocked-Side Problem @-BSP) compensation path 
for a faulty processor is also shown, is one in which connections to k sides of the grid are as are the 
permissible settings of the switches. forbidden. When necessary, we identify the blocked sides. For example, 
an LB-BSP is a 2-BSP wherein the left and bottom sides are blocked. An active pointPrevious Work. is 
one which has yet to be connected; initially, all A number of researchers have attempted to find points 
are active. An active row (column) is one that efficient algorithms for problems 1 and 2: in [3], the 
contains an active point(s). An extremal point in a problem was translated into that of finding a maximum 
column is the lowest or highest one; other points are independent set of vertices in a graph, which is 
NP­interior; similarly for rows. Lastly, we say that a Complete, and a heuristic algorithm was provided. 
problem instance is solvable if and only if all its pointsOzawa [4] provided an 0(IV3) algorithm. Roychowhury 
can be connected. and Bruck, who also studied related problems [6] [7], developed an O(IV2) algorithm 
[5][6]. A direct, greedy approach to solving the problem, The remainder of the paper is organized as 
follows. such as the one used in [5], appears to lead to quadratic complexity. Instead, we adopt a tw~step 
approach. 1. We attempt to find a partitionable solution. 2. If no partitionable solutions exist, we 
use this knowledge to facilitate the search for non­part it ionable solutions.  2.2 Maintaining the 
Blocking Information. Our goal is to develop an algorithm with O(N) com­plexity. In developing such an 
algorithm, nothing can be taken for granted. In particular, the data structures holding the blocking 
information and the algorithms for updating them must be carefully integrated into the main algorithm. 
In this section, we explain how the information is created and maintained. The integration will become 
apparent as we develop the algorithms. The connection of a point in a given direction can be prevented 
either by another point residing on the prospective connecting line or by an earlier connection whose 
line intersects it. Information pert aining to the two forms of blocking is kept in separate data st 
ructures. Point Blocking. This information is stored per point, and is com­puted as follows. Initially, 
all points are considered blocked in all directions. We sort them by column (bucket sort), find the highest 
and lowest point in each column, and mark them unblocked for upward and downward connections, respectively. 
Similarly for rows and right fleft connections. Since the prob­lem is compact, this takes O(N) steps. 
LEMMA 2.1. Point-blocking information that is based on the entipe grid may be used in determining a point 
s connectability in an LB-BSP containing only the points to the right and above a given grid position, 
(Sjmilarly for other k-BSPs.) Proof. The point-blocking information for a given point, say p, also reflects 
blocking by points that are not part of the subproblem; as such, it is incorrect. However, such points 
are always to the left of p or above it, and connections in those directions are not permit ted anyhow. 
 Connection Blocking. For each side of the grid, we keep the blocked row (for left and right sides) and 
column (for top and bottom sides) positions. Initially, all positions are unblocked. This information 
is updated as we assign connections to points, and applies to the remaining active points. (We always 
treat entire rows or columns, moving away from a side into the grid.) The only connections that can prevent 
a remaining active point from being connected to a given side are parallel to that side and always reach 
the perimeter of the grid. Therefore, for each side of the grid, at most two sets of contiguous positions 
are blocked by connections, and each set includes one of the ends of the side. We consequently only need 
to keep two numbers per side. Whenever connectability to a side is tested, two numbers must be checked 
in addition to the local point-blocking information, and only one (different) number needs to be updated 
when a connection is made. This observation is critical to the construction of an efficient algorithm. 
Data Organization. We maintain three doubly-linked lists of the points: sorted by row, sorted by column, 
and arbitrarily­ordered master copies of the points. There are bidirectional pointers among the different 
copies of each point. The master copy of a point also con­tains the connectability information (point 
block­ing), as well as the direction in which the point hzs been connected (initially nil). The delimiters 
of the two blocked intervals for each side are kept separately. 2.3 A 2-BSP with Adjacent Blocked Sides 
(A Corner Problem). Throughout the development of our algorithm, we rely heavily on properties of 2-BSPS 
with adjacent blocked sides. We now establish these properties. Without loss of generality, we consider 
an LB-BSP, but all the results derived here apply to other such BSPS and will be used without further 
comments. LEMMA 2.2. In an LB-BSP, connecting a point in the rightmost active column or one in the lowest 
active row to the right can never interfere with subsequent connections. Proof. Obvious. LEMMA 2.3. 
Any upward connection that is made in solving an LB-BSP from right to left or from bottom to top with 
preference to rightward connections must be part of every solution to the LB-BSP. Proof. Consider a point, 
say p, that is connected upward. Since there is preference to rightward connec­tions, it follows that 
p could not be connected to the right. This, in turn, could be due to the existence of another point 
to the right of p in the same row. Alter­natively, a point to the right of p and lower than it, say p 
, wss connected upward. We proceed recursively to determine why p could not be connected to the right. 
However, this recursive argument chain must end with BIRK AND LOTSPIECH point-blocking, since we keep 
moving to the right and points in the rightmost column can all be connected to the right. Thus, the inability 
to connect p to the right can always be traced to point-blocking, which is deter­mined strictly by the 
problem instance. THEOREM 2.1. Solving an LB-BSP from right to lefi or from bottom to top with preference 
to rightward connections yields a solution if and only if there is one. Moreover, such a solution minimizes 
the restrictions on connections of points that may be added in columns to the lefl of the current grid. 
Lastly, the problem can be solved with O(N) complexity. Proof Consider a point, say p, which cannot be 
connected. Since this is an LB-BSP and we are solving from right to left, the inability to connect p 
upward can only be due to point blocking. The inability to connect it to the right is also due to point 
blocking (Lemma 2.3). Since point-blocking is determined only by the problem inst ante, there is indeed 
no solution. The second claim follows from Lemmas 2.2,2.3 and the fact that upward connections are the 
only ones that affect the connectability of the new points. The complexity follows directly from the 
description of the algorithm. 1 2.4 Searching for a Part it ionable Solution. Initially, we attempt to 
construct a vertically­partitionable solution by constructing the largest solv­able R-BSP and L-BSP. 
If these overlap, we are done; otherwise, we attempt to construct a horizontally­partitionable solution 
in a similar way. Without loss of generality, we describe the determination of the largest solvable L-BSP 
and the construction of a solution for it. A straightforward incremental approach (column by column) 
fails, since the connection of a point in a single­point column is undecidable if it can be connected 
up­ward or downward but not to the right. Instead, we take a different approach, which is based on two 
obser­vations: 1. In an L-BSP, interior points in a column may only be connected to the right. Making 
such a connection partitions this column and the ones to the right of it into an LB-BSP and an LT-BSP. 
 2. In an L-BSP solved from the right, there is always a solution if every remaining active column has 
at most two points.  As illustrated in Fig. 3, we begin by setting the right side blocking intervals 
to nil. Next, we use the list of points sorted by column and scan it from right to left in search of 
a point that is interior in its column (this 1The f=t that an LB.BSP can be solved in hear time Was established 
in [5] (Lemma 3). I r I I 1, Ill 1 I I Ill  Figure 3: Incrementally finding and solving the largest 
solvable L-BSP. We proceed from right to left and solve bands , each of which consists of an (LB-BSP, 
LT-BSP) pair. Note the passing of the blocked intervals from one band to the next. is easily determined 
from the point s point-blocking information); this point must be connected to the right. We make the 
connection and go on to solve the resulting LB-BSP and LT-BSP from right to left with preference to rightward 
connections. Before making a connection, we always check the right side blocked intervals as well as 
the point-blocking; whenever a vertical connection is made, we update the appropriate right side blocked 
interval. Once this is completed, we repeat the process beginning at the column to the left of the current 
one and without reset ting the blocked intervals; in each iteration, we only connect the points in the 
current band (no backtracking). If we fail to find a legal connection, then the largest solvable L-BSP 
is the one whose leftmost column is immediately to the right of the one whose interior point was used 
for partitioning in the current iteration. THEOREM 2.2. The above algorithm jinds the largest solvable 
L-BSP and solves it with linear time and space complexity (linear in the number of points). Proof. The 
partitions into LB-BSPS and LT-BSPS due to connections of interior points are clearly correct 2Le~ 4 
in [5] ~tate~ that any given bBSP is solvable in linear time. However, the algorithm presented there 
starts at the blocked side and progresses away from it. It therefore does not lend itself to an incremental 
determination of the l~est solvable L-BSP. If that algorithm were used, this determination would require 
O (MogN) steps (binary search). Since we use a different algorithm, we also furnish a proof for the complexity 
claim. and unavoidable, and the use of the original point­blocking information is correct (Lemma 2.1). 
This, along with Theorem 2.1, guarantees that each (LB-BSP,LT-BSP) pair ia solved correctly. Applying 
this theorem in a simple induction on subproblem pairs also proves that any interference of connections 
made for an early pair with connections desired in later pairs is unavoidable. The complexity of the 
solution to a subproblem pair is linear in the number of points in that pair; this follows from the algorithm 
and Lemma 2.1. Finding the columns with more than 2 points is also linear. Lastly, we have not created 
any new data structures. Thus, the L-BSP hss linear time and space complexity. . The remaining largest 
solvable 1-BSPS are found Figure 4: A clockwise pinwheel configuration. and solved in a similar manner. 
If the union of the largest solvable L-BSP and R-BSP or that of the largest solvable T-BSP and B-BSP 
cover all points, this is our 2.5.2 Finding Candidate Pinwheels. In this solution, Otherwise, we must 
cent inue. section, we find a small number of candidate pinwheels, such that any solution must contain 
at least one of them. 2.5 Searching for a Non-Partitionable Solution. We begin by considering the violating 
row (the one im- We use the fact that there is no partitionable solution mediately above the largest 
solvable T-BSP), and note to characterize any solutions that may exist. All the that it must contain 
at least three points. Clearly, if connections made in solving the 1-BSPS are discarded; there is no 
partitionable solution, then the violating row we retain only the identity of the row immediately cannot 
be part of a solvable B-BSP either. Therefore, if above the largest solvable T-BSP, and refer to it aa 
the an interior point in the violating row is connected down­ violating row. This is used in the search 
for a solution. ward (upward) in a solution to the problem, then there must be a point in this row or 
in a lower (higher) one 2.5.1 Implications of the Absence of a Parti­which must be connected upward (downward) 
in that tionable Solution. . . DEFINITION 2.2. A Clockwise Pinwheel is a set of olution We pick one (arbitrary) 
interior point, say PI, in the four points, each connected in a diflerent direction, such violating row. 
Without loss of generality, we initially that the connections resemble a clockwise pinwheel (see assume 
that it is connected downward. The process will Fig. 4). be repeated with an upward connection. The downward 
Formally: the point that is connected to the right is connection of pl partitions its row and the ones 
below above and not to the right of the one connected to the it into two similar 1-BSPS. Without loss 
of generality, left; the point connected upward is to the left of and not we examine the right-hand 
one, which is an L-BSP, and higher than the one connected downward. A counter. try to find a point that 
must be connected upward. clockwise pinwheel can be defined similarly. We begin solving this L-BSP from 
left to right, with LEMMA 2.4. If there is no partitionable solution preference to downward connections. 
As long aa we are then any solution must contain a pinwheel. able to make downward connections, Lemma 
2.2 applies, assuring us that these connections do not interfere with Proof. The inability to place a 
horizontal (vertical) partition implies that any solution must include at subsequent ones. Moreover, 
these connections cannot interfere with those of points in higher rows than the violating row. Finally, 
the left subproblem is isolated least one pair of points, one point connected downward (leftward) and 
the other connected upward (rightward), from the right one by the downward connection of pl. If such 
that the union of the row (column) positions we can connect all points downward, we conclude that spanned 
by the two connections is the entire range of the right subproblem does not yield the sought-after rows 
(columns). If neither a horizontal partition nor a vertical one is permissible, then both types of pairs 
must mandatory upward connection and repeat the process for the left subproblem (which must therefore 
yield a be part of any solution, but such a pair of horizont ally­forced upward connection). If we do 
find a point, say connected points and a pair of vertically-connected ones PZ, which cannot be connected 
downward, we must can only coexist if they form a pinwheel. consider severaI cases: 1. P2 cannot be connected 
in any direction. We con­clude that there can be no solution in which pl is connected downward, and proceed 
to look for a so­ lution in which it is connected upward.  2. p2 can only be connected upward. Since 
we are solving from left to right and p2 is the first point that cannot be connected downward, this can 
only be due to point-blocking. It follows that if pl is connected downward as part of a solution to the 
entire original problem then p2 must be connected upward in that solution. We declare (pl, p2) to be 
a candidate pair. 3. P2 can only be connected rightward. We make  the connection, thereby partitioning 
the right-hand subproblem into an LB-BSP and an LT-BSP. We attempt to solve the L-BSP consisting of this 
subproblem-pair from right to left with preference to rightward connections until we discover a point, 
say p;, which must be connected upward or cannot be connected at all. If pj cannot be connected at all, 
we conclude that there is no solution to the original problem in which pl is connected downward. If pi 
must be connected upward, we declare (pl ,p~) to be a candidate pair. If we can solve the L-BSP without 
finding a point with the above constraints, we conclude that the right-hand subproblem does not yield 
the sought­-after mandatory upward connection and proceed to examine the left-hand subproblem. 4 p2 
can be connected either upward or rightward. We again connect PZ to the right and try to solve the L-BSP 
from the right with preference to rightward connections until we discover a point, say pj, which either 
must be connected upward or cannot be connected at all. If there is no such point, we declare no candidate 
pairs and move on the left­hand subproblem. If p; cannot be connected at all, we conclude that there 
is no solution to the original problem in which pl is connected downward and p2 is connected to the right. 
We therefore pick the upward connection for p2 and declare (pl ,p2) to be a candidate pair. If pi must 
be connected upward, we declare (pi ,p2) aa well as (pl ,p\) to be candidate pairs. The meaning of two 
candidate pairs is that if pl is connected downward as part of a solution to the original problem then 
PZ, p; or both of them must be connected upward in that solution. If the right-hand problem and the 
left-hand one both yield candidate pairs, it follows that there is no solution (conflicting pinwheels 
are required to accom­modate a pair from each subproblem). Once the right-BIRK AND LOTSPIECH hand problem 
yields a pair, we therefore need not ex­amine the left-hand one; if there is no solution, we will discover 
this later. The above process thus provides us with up to four candidate pairs (including those for an 
upward connection of pl ). If there is a solution, it must contain at least one of those connection pairs. 
We discard the tentative connections made in the process of discovering the candidate pairs and, for 
each pair, we attempt to complete the pinwheel and solve. If we fail at any point, we discard the connections 
made and begin again on the next pair. We now describe the process for a single pair. Consider a candidate 
pair (P1, PZ) with PI connected downward and p2 connected upward so aa to form part of a clockwise pinwheel. 
Let us focus on the L-BSP bounded on the left by the upward connection of p2 and on the bottom by the 
row containing PI (the shaded area in Fig. 5). We begin at the leftmost column and solve .  P.2L Figure 
5: Finding the top point of a candidate clockwise pinwheel. right ward with a preference for upward connections. 
(Lemma 2.2 guarantees that the upward connections do not interfere with any subsequent connections.) 
LEMMA 2.5. The first point, say p3, that cannot be connected upward, must be connected to the right 
if there is a solution with this candidate pair; i.e., p3 is the top pinwheel point. Proof. The only 
alternative is downward. However, if p3 is connected downward then no points to the right of p3 can be 
connected to the left. (They are blocked by the vertical connection of p2 or by that of p3. ) Thus, any 
solution would permit a vertical partition immediately to the right of p3 s column, which contradicts 
our knowledge that there is no partitionable solution. The fourth member of the pinwheel is found simi­larly. 
The computational complexity of the pinwheel­finding step is clearly linear in the number of points. 
The arguments are similar to ones already used, and are not repeated. 2.5.3 Solving a Problem with a 
Specific Pin­wheel. As illustrated in Fig. 6 for a clockwise pin­wheel, we identify 13 subproblems of 
four types and note that they all have at least two blocked sides. (In some degenerate pinwheels, subproblem 
A and some of the type B subproblems do not exist, but this makes no difference.) We begin by picking 
a preferred direc­tion for each 2-BSP, as depicted by the solid arrows in the figure. The other direction 
is marked with a dashed arrow, as is the only possible direction for each of the 3-BSPS. (The latter 
choice is consistent with the fact that any connection in this direction is mandatory.) The choice of 
preferred directions is solely a function of the orient at ion of the pinwheel, Next, we solve the sub­problems 
in the following order of types: D,C,B ,( A). Within each type, we solve in increasing index order. Each 
subproblem is solved from the appropriate side with preference to connections in the direction of the 
solid arrow, as was done for 2-BSPS in earlier sections. In solving a subproblem, we consider the blocked 
inter­vals presented to it by earlier subproblems and update the blocked interval for later ones. D4 
cl! DI ~: t .........$B1 .........*1/ ~ j c2 .-- l --+ --- - --; t :/ +--------:1 \A\I ~B2  B41 [:---- 
----­ r --T;----)----------j---- --- IC4 _ j \+.. ......B3 ~... ...... 1 N :, D3 Figure 6: A pinwheel 
solution partitioned into 13 subproblems of 4 types, each with at least two adjacent blocked sides. The 
solid arrows denote the preferred directions. Two connections in different subproblems can only intersect 
if both are in the respective non­preferred directions. THEOREM 2.3. The algorithm will find a (correct) 
solution containing a given pinwheel if and only if there is one, and has linear (in the number of points 
to be 471 connected) time and space complexity. ProoJ Correctness. The solution to each subproblem with 
given blocked intervals is correct (Theorem 2.1, Lemma 2.1). The problems are solved in sequence, and 
the blocked intervals are updated. Conse­quently, no blocking is overlooked. Finding a solution if there 
is one. This is guaran­teed by Theorem 2.1 for each subproblem given the blocked intervals. In examining 
Fig. 6, we observe that two (permissible) connections in different sub­problems can interfere with each 
other only if both are in the non-preferred directions of the respec­tive subproblems. Lemma 2.3 states 
that any such connections made by our algorithm are mandatory; consequently, any resulting interference 
could not be avoided. Complexity. In each subproblem, we examine each point once. Since the number of 
subproblems is fixed, the time complexity is O(N) steps even if we do not sort the points by subproblem 
to which they belong. Since we did not create any new data structure, other than a fixed number of blocked­interval 
delimiters, the space complexity is also O(N). 2.6 Summary. We first attempt to solve the prob­lem assuming 
that the solution can be partitioned by a straight line. If this fails, we have gained the knowledge 
that any solution must contain a pinwheel configuration. Furthermore, we have identified one point that 
must be part of such a pinwheel. Although the exact direction in which this point is connected and the 
identity of the remaining three pinwheel points are not yet revealed, there are at most four possibilities. 
We try every one. All steps have linear time and space complexity. 3 Solutions Without Near Misses (Problem 
2). 3.1 Relating the Solutions of Problem 1 and Problem 2. In relating the two problems, we assume that 
the problem is presented as a compact instance. (Compactness in the sense of Problem 2.) LEMMA 3.1. If 
them is no solution to Problem 1 for a given instance, then there is no solution to Problem 2. Similarly, 
if there is no partitionable solution to 1 then them is no such solution to 2. Lastly, any solution to 
Problem 1 which contains a pinwheel is also a solution to Problem 2. Proof. Adding the no near miss requirement 
only constrains the connections, so anything that was impos­sible in Problem 1 remains impossible in 
2. A pinwheel and a near miss are mutually exclusive. LEMMA 3.2. If a 1-BSP instance of Problem 1 is 
solvable with one of the points in the row (column) closest to the blocked side connected away from that 
side, then the solution is also valid for Problem .2. Proof Without loss of generality, let us consider 
a T-BSP. A near miss of vertical connections is impossible, since there are no upward connections. The 
downward connection of a point in the top row partitions the problem into an LT-BSP and an RT-BSP. In 
each of those, only one horizontal direction is permitted, so there can be no horizontal near miss. LEMMA 
3.3. If a Problem 1 instance is solvable with a partition and the overlapping region of the rel­evant 
1-BSPS contains a row (column) with mom than 2 points, then this instance of Problem 2 also has a so­lution. 
Proof By construction. Without loss of generality, we assume a horizontal partition. We pick a row with 
more than two points in the overlapping region, and solve the T-BSP and the B-BSP with this as the top 
and bottom row, respective y. Last 1y, we make the actual connections for the points in this row per 
their assignments in the T-BSP. The claim follows from Lemma 3.2. From the above, it follows that the 
only case that must be considered is an inst ante for which Problem 1 has a partitionable solution, but 
the two largest 1-BSPS have no common row (column) with interior points. 3.2 Finding a Partitionable 
Solution. We begin by attempting to construct a horizontally-partitionable solution. If this fails, we 
try to construct a vertically partitionable solution in a similar manner. We will only describe the search 
for a horizonta]]y-partitionable solu­tion. In Problem 1, we could always enlarge a T-BSP to include 
rows that cent tin at most two points by sim­ply connecting those points horizontally. However, such 
haphazard connections may lead to near misses, so this approach cannot be used for Problem 2. Instead, 
we characterize configurations of points that are trouble­some in this respect, detect such configurations, 
and use them to restrict and prioritize the connections in a similar manner to the use of rows with interior 
points in Problem 1. 3.2.1 The Horizontal Near-Miss Sequence (H-NMS). DEFINITION 3.1. A Horizontal Near-Miss 
Se­quence , H-NMS, is a sequence of points, one per row and ordered by row, such that the column positions 
of BIRK AND LOTSPIECH its members constitute either a monotonically increas­ing or a monotonically decreasing 
sequence. Moreover, the only possible horizontal connection of the rightmost (Ieflmost) member of the 
sequence is to the left (right). We use pL (pR) to denote the leftmost (rightmost) mem­ber (See Fig. 
7). A V-NMS is defined similarly. Figure 7: A horizontal near-miss sequence (H-NMS). LENIMA 3.4. The 
leftmost and rightmost points of an H-NMS, pL and pR, cannot both be connected hori­zontally. Proof This 
would lead to a near miss. LEMMA 3.5. If there is a 2-point row between that of pL and that of pR, then 
either its lefl point (pi) forms an H-NMS with pL or its right point (p,) forms one with pR or both. 
Proof. At least one of the two points in this row must be a member of any given p~-pR H-NMS. If pl can 
be a member of the sequence, it immediately follows that the pL-p/ subsequence is an H-N MS. Similarly, 
if pr can be a member, it immediately follows that Pr-pR is an H-NMS. COROLLARY 3.1. An H-NMS is minimal 
if and only if all but the extreme rows contain exactly one point. (Fig. 7 depicts a minimal H-NMS,) 
DEFINITION 3.2. The lowest-roof H-NMS with re­spect to row R is the minimal H-NilIS with the lowest top 
row and a bottom row that is not lower than R. Based on Lemma 3.5 and Corollary 3.1, the lowest­roof 
H-NMS with respect to row R can easily be found in linear time [1]. Let p~ (~) denote the lowest (highest) 
point in an H-NMS. LEMMA 3.6. If pB cannot be connected downward as part of a solution to the T-BSP containing 
its row and the ones below it, then the largest T-BSP cannot include the row of pT. Proof By contradiction. 
If it did, pB would also be part of the T-BSP and would thus have to be connected horizontally. However, 
this would prevent pT from being connected downward (intersection) or horizontally (would lead to a near 
miss). The H-NMS thus plays a role similar to that played immediately above them; if there is a choice, 
pick by the rows with interior points in Problem 1. an arbitrary direction. THEOREM 3.1. The foregoing 
+st ep algorithm is 3.2.2 Constructing the Largest Solvable T­ correct. BSP. Proof. DEFINITION 3.3. 
The upper (lower) fence is the lowest (highest) row which is part of the largest B-BSP Correctness of 
the claim that there is no horizontally­(T-BSP) that is known to be solvable for Problem 2. partitionable 
solution (step 3). Given the situa-Initially, the upper (lower) fence is the lowest (highest) tion, it 
follows from Lemma 3.6 that a partitionrow with anterior points which is part of the largest can only 
be located between the extreme rows ofsoluable B-BSP (T-BSP) for Problem 1. The two fences the H-NMS. 
(We apply the lemma twice, reversingare separated by a band of rows. Since there is a the roles of top 
and bottom.) However, if the parti­horizon tally-pa rtitionable solution to Problem 1, each tion is between 
those rows it follows that PB and p~ row in the band contains at most two points. must both be connected 
horizontally, which would The solution obtained in the construction of the lead to a near miss. Lastly, 
it follows from Lemmalargest T-BSP for Problem 1, except for rows above 3.2 and Theorem 2.1 that our 
construction of the T­the uppermost one with interior points, is also a partial BSP aa we cycled through 
steps 1 and 2, discovering solution for Problem 2; moreover, it constrains the new minimal H-N MS s, 
could not have unnecessar­connections of points in higher rows to a minimum ily prevented us from connecting 
the lowest H-NMS extent (Lemma 3.2 and Theorem 2.1). We therefore member downward. start out with the 
solution obtained in Problem 1 for the T-BSP whose top row is the initial lower fence, and Correctness 
of the claim that we are done. As we loop try to grow this T-BSP upward, i.e., to raise the lower through 
steps 1 and 2, we keep solving additional fence. Since we are dealing with a horizontal partition, bands 
of a T-BSP. By Lemma 3.2, we are guaran­ we are only concerned with horizontal near misses. teed that 
the T-BSP below the lowest row of the }\ e proceed as follows: most recent H-NMS (this is the last one 
we solved) 1. Find the lowest-roof H-NMS with respect to the is also a valid solution to Problem 2. The 
remaining lower fence. If one is not found before reaching the active rows, which contain no more than 
2 points top fence, go to step 4; otherwise, per row, are connected aa described in step 4. The fact 
that there is no H-NMS involving those or the 2. Try to connect the lowest member of the H-NMS current 
fences guarantees that step 4 is completeddownward and solve the T-BSP consisting of its successfully 
without near misses. row and the ones below it. (This is an incremental solution, by bands, as in Problem 
1.) If successful,   3.3 Constructing a Pinwheel. Consider the H­ move the lower fence to the roof 
of the H-NMS and NMS that stopped the construction of the largest solv­ go to step 1. Otherwise, able 
T-BSP. From the proof of Theorem 3.1 it follows 3. Try to connect the H-NMS member in the roof of that 
at least one of the two extreme members of this NMS must have a vertical connection; moreover, this connection 
may not lead to a solvable T-BSP or B-BSP the H-NMS upward and to solve the B-BSP whose  lowest row 
is the roof of the H-NMS. If successful, there is a solution; go to step 4 to complete it. cent aining 
this member s row. If such a point is con­ nected downward (upward), some point in the same rowOtherwise, 
there is no solution to Problem 2 which or in lower (higher) one must therefore be connected up­ward 
(downward) as part of any solution. This brings permits a horizontal partition. 4. Connect points in 
the remaining band using only us back to the situation we had in Problem 1, except horizontal connections, 
as follows: make a pass that we have up to eight candidate pairs since there are from bottom to top (of 
the band), connecting two pot ent ial anchors for the pinwheel. The near miss points in 2-point rows 
to the appropriate side; constraint no longer comes to play, since a pinwheel pre­points in subsequent 
single-point rows are con-cludes a near miss. nected so aa not to create a near miss with the previous 
row; if there is a choice, they are not con-3.4 Summary. nected at this stage. Then, make a pass from 
top THEOREM 3.2. For a compact instance, we can to bottom of the band, connecting the remaining solve 
the connection problem with the near miss con­points so as not to create a near miss with the row straint 
(Problem 2) requiring time and space which are linear in the number of points to be connected. Proof. 
We find a partitionable solution or decide that there are none in linear time, If there is no partitionable 
solution, we proceed as in Problem 1. 4 Conclusions. We have presented a practical, efficient algorithm 
for connecting a given subset of points in a rectangular grid to its boundary using straight, nonintersecting 
lines and without near misses whenever possible. This algorithm was recently shown by (reduction from 
Element configurations, we showed Complete. This algorithm can ration assignment for a elements in the 
event of M. Sarrafzadeh to be optimal Uniqueness [9]). For other in [1] that the problem is NP­ be used 
rectangular processor ful both for failures of previously and for increasing the yield of to provide 
a reconfigu­array of processing failures. This is use­functioning processors multi-processor wafers 
by reconfiguring them to avoid defective parts. Our al­gorithm constitutes a significant improvement 
over the previous ones. For example, in the case of a square ar­ray of pixel processors with one million 
PEs, which is very realistic, our algorithm is up to 1000 times faster than the O(lV2) algorithm. Throughout 
the discussion, we assumed compact instances of the problem, i.e., O(N) rows and columns. For those, 
the time and space complexities are both O(IV). Non-compact instances can be solved directly, with time 
and space complexity O(rn + n); alternatively, the given instance can be compacted O(NloglV) steps with 
space complexity IV,rn and n are all known, we can desirable option. (An asymptotically (O(NlogIY/loglogN)) 
sorting algorithm but the constants make it impractical.) by sorting in O(iV). Since choose the more 
more efficient is available [8], We have thus far implicitly assumed that there is a spare processor 
at both ends of every row and column. However, the algorithm extends easily to the case of an arbitrary 
subset of those locations containing spares (or faulty spares). This is done by simply updating the point-blocking 
information to reflect the inability to connect to the unavailable spares. Taking a non-greedy approach 
in developing an almost linear algorithm is somewhat counterintuitive, yet was key to our success. We 
used this in two ways: (i) added a dummy constraint to the original problem, looking for solutions that 
adhere to this constraint; whenever such solutions were knowledge to establish a true which any solution 
(if there handled undecidable situations and continuing to scan the not found, we used this additional 
constraint to is one) must adhere; (ii) by deferring the decision input until an additional BIRK AND 
LOTSPIECH constraint was established which decided the situation. We recommend that this approach be 
tried whenever a greedy one fails, Acknowledgment. J. Bruck told us about the problem and advised us 
of the existence of a quadratic­ complexity algorithm. References <RefA>[1] Y. Birk and J.B. Lotspiech, On 
Finding iVon-Intersecting Straight-Line Connections of Grid Points to the Boundary, Tech. Rep. RJ 7217 
(67984), IBM, Almaden Research Center, San Jose, CA Dec. 1989. [2] S.N. Jean and S.Y. Kung, Necewary 
and Suficient Conditions for Reconfigurability in Single-Track Switch WSI Arra~s, in Integration, Jan. 
[3] S.Y. Kung, S.N. Array Processors Trans. Computers, [4] T. Ozawa, An Systolic Arrays E2ernents, Proc. 
Proc. Int. Conf. on Wafer Scale 1989. Jean and C.W. Chang, Fault-Tolerant Using Single-Track Switches, 
IEEE C-38:4, pp. 501-514, Apr. 1989. E&#38;cient Algorithm for Constructing from VLSI/ WSI Containing 
Faulty 1990 IEEE Intern. Symp. on Circuits and Systems, May 1990. [5] V.P. Roychowdhury and J. Bruck, 
On Finding Non-Intersecting Paths in a Grid and its Application in Reconfiguration of VLSI/WSI Arrays, 
in Proc. Symp. On Discrete Algorithms, San Francisco, CA, Jan. 1990. [6] V.P. Roychowdhury, J. Bruck 
and T. Kailath, I?jicient Algorithms for Reconfiguration in VLSI/WSI Arrays, IEEE Trans. 1990. [7] J. 
Bruck and ing in Parallel (67688), IBM, CA, Dec. 1989. [8] M.L. Fredman the Information in Proc. ACM 
Baltimore, MD, [9] M. Sarrafzadeh, Computers, C-39:4, pp. 480-489, Apr. V.P. Roychowdhury, How to Play 
Bowl­ on the Grid???, Tech, Rep. RJ 7209 Almaden Research Center, San Jose, and D.E. Willard, Blasting 
Through Theoretic Bound with Fusion Trees , Symposium on Theory of Computing, May 1990. A Lower Bound 
of the Point Connec­ tion Problem, unpublished note, Sep. 1990.  
</RefA>			
