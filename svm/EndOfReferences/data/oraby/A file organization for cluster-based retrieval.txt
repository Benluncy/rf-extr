
 A FILE ORGANIATION FOR CLUSTER-BASED RETRIEVAL W. Bruce Croft University of Cambridge Computer Laboratory 
 Corn Exchange Street CAMBRIDGE. CB2 3QG England ABSTRACT A file organization for cluster-based retrieval 
is presented and tested. This file organization is based on the bottom-up search which, in contrast to 
the more usual top-down search, starts at the lowest level of a cluster hierarchy (the documents) and 
looks at progressively larger clusters. This approach enables most of the efficiency problems previously 
associated with clustered file organizations to be avoided. There are two parts to this file organization 
-a compact cluster hierarchy representation which does not store cluster representatives and a compact 
inverted file which is used to provide a starting point for the bottom-up search. Retrieval experiments 
show that the bottom-up search using this file organization can be more effective than a serial search, 
especially if high precision results are required. Acknowledgement This work was done while the author 
was in receipt of a C.S.I.R.O. Post-graduate Studentship. Introduction Nearly all of the commercially 
available document (or reference) retrieval systems use the inverted file organization. This file organization 
consists of a set of lists, one for each index term that is used to describe the documents. For each 
index term, the list consists of a set of documents whose descriptions contain that term. A query is 
input to the system in the form of a Boolean combination o~ index terms. The inverted file lists corresponding 
to the query terms are used to produce the set of documents whose descriptions satisfy the Boolean condition. 
 An alternative organization that has been used in experimental systems is the clustered file organization. 
This organization clusters or groups the documents using a clustering algorithm which is usually based 
on a measure of document-document similarity. Each cluster has a representative which can be looked at 
as an average or typical document for that cluster, and it is this cluster representative that is compared 
to the query at search time. The comparison is done with a similarity measure which treats both the query 
and the representative as sets of index terms with no Boolean structure. The clusters can be organized 
in a hierarchy or tree structure where the lowest level or leaves are the documents and the higher level 
nodes are clusters. One approach to clustered files as put forward by Salton <i> is simply to use the 
clusters to limit the search (compared to a serial search) and thereby improve efficiency. A serial search 
compares the query to each document in the file and ranks them in decreasing order of similarity. The 
performance obtained by this search, which is obviously too inefficient for practical use, is often used 
as a benchmark of retrieval performance for searches based on similarity measures. Instead of comparing 
each document to the query as with a serial search, a clustered search picks out the clusters whose 
representatives are highly similar to the query and ranks the documents in those clusters. The clustering 
algorithms used in this approach are heuristic and produce relatively simple hierarchies with few levels. 
The approach favoured by Van Rijsbergen <2> (known as cluster-based retrieval) uses a clustering algorithm 
with a theoretical basis which produces a hierarchy of much greater complexity and many more levels. 
The aim here is to improve the effectiveness (retrieval performance) of the searches by exploiting similarities 
between documents to overcome some of the defects of the indexing. The clusters chosen by a search are 
retrieved in their entirety with no document ranking done. If the clusters retrieved are small enough, 
this is a similar process to choosing a cut-off position for a document ranking. Experiments with cluster-based 
retrieval <3,4> have shown that good performance can be obtained and that the complex hierarchy permits 
very flexible searches. Some searches commonly used were the narrow top-down search (selecting the highest 
ranking cluster at each level in the hierarchy, starting at the root of the hierarchy), the broad top-down 
search (choosing a number of clusters at each level, starting at the root) and the bottom-up search (which 
uses a given relevant document to start at the document level of the hierarchy and search upwards). 
A common objection to cluster-based retrieval has been that the clustering algorithm used (single-link) 
takes at least O(n 2) operations for n documents and is therefore unsuitable for practical use. A recent 
paper by Croft <5> demonstrates that large collections can be clustered by single-link. There are, however, 
two valid criticisms of cluster- based retrieval. Firstly, one of the main aims of this type of clustering, 
which is to improve retrieval performance above that possible using a serial search, has never been achieved. 
Secondly, the experimental cluster- based retrieval systems have not dealt with a number of efficiency 
problems 67 such as hierarchy storage and the updating and storage of cluster representatives. This 
paper presents a cluster-based file organization which overcomes these difficulties. It was observed 
in <3,4> that, if a relevant document was available as a starting point, the bottom-up search had a superior 
performance to other cluster-based searches, especially in obtaining high precision results. It was also 
the most efficient search in terms of the number of query-cluster representative comparisons that were 
required. Therefore, it was decided to design the file organization specifically for the bottom-up search. 
Obviously we cannot rely on getting a relevant document from every user of the system so some means of 
finding a starting point for the search must be provided. The experimental systems which used top-down 
searching for cluster- based retrieval needed the entire cluster hierarchy and the cluster representatives 
stored explicitly. This permits quick comparison of large numbers of cluster representatives with the 
query on the downward search path. With the bottom-up search however, very few clusters are looked at 
and these usually overlap considerably in content. Figure 1 illustrates the difference between the two 
searches. In the case of the bottom-up search it should be possible to store the cluster hierarchy in 
a compact form with no cluster representatives. As long as clusters can still be easily identified, the 
cluster representatives can be calculated at search time. This method has the obvious advantage of reducing 
storage overhead and, because any new documents added to the hierarchy will be automatically included 
in the representative at search time, the problem of updating is avoided. Therefore, there are two main 
components of the proposed file organization. They are: i. The compact hierarchy representation. 2. 
The means of finding a starting point for the bottom-up search. These will be discussed in separate 
sections. s ta~intt node /~ (l~uster node c /~I)~ocument nodes a b d e f g h a b ~d e starting f g 
h point Top-down search Bottom-up search (i) Compare first two cluster nodes (i) Get first cluster above 
to query, choose highest similarity. starting point, calculate  (2) Compare descendants of previously 
similarity to query. chosen cluster, again choose most (2) Get next cluster up and similar. compare similarities. 
Stop when highest similarity value Stop when similarity value is less than the previous level or drops 
or root reached. when document level reached.  Figure 1 : Top-down and bottom-up searching The compact 
hierarchy representation The explicit cluster hierarchy used by Van Rijsbergen and Croft <3,4> has two 
types of nodes -document nodes and cluster nodes. The information contained in a cluster node consists 
of a descendant pointer, a brother pointer, a pointer to the cluster representative for that node and 
a level. This level is the dissimilarity value at which the cluster forms (see Jardine and Sibson <6> 
for a detailed explanation). A document node has 69 a pointer to the full document description rather 
than a pointer to a representative. If there are N documents to be clustered then there is a maximum 
of N-I cluster nodes in the hierarchy. Assuming one word of storage is used for each piece of information 
in the node, then the total storage requirement for this explicit hierarchy (not including the cluster 
representatives or document descriptions) is 4 x 2N = 8N words (approximately) A part or all of a large 
hierarchy would reside on disc storage. The document nodes (and document descriptions) would be stored 
in groups as specified by the clusters to save disc accesses when examining or retrieving clusters. However, 
the cluster nodes are separate from the document nodes and a search that goes through many levels of 
clusters and documents (such as a top-down narrow search) would involve many disc accesses. The compact 
hierarchy representation that is presented here has been mentioned by Sibson <7>. He calls this the packed 
representation. For each document, two pieces of information are stored. These are i. The position of 
the document in the hierarchy (relative to the other documents). 2. The level at which this document 
is no longer the last (right-most) in a cluster. This shall be referred to as the packed level. Figure 
2 shows a single-link hierarchy, the explicit representation and the packed representation. Root L4 
i descenda~~ pointer/" q~ ~ l~st brother L3 Br0ther ~ointer points b pointer to parent L2 --- --I 
 i d e c a b f g -documents 1 2 3 4 5 6 7 -position (a) A single-link hierarchy (b) The explicit representation 
 documents -a b c d e f g position in hierarchy -4 5 3 1 2 6 7 packed level -L4 L4 L3 L1 L1 L2 - (c) 
The packed representation Figure 2 : Various representations of a hierarchy The storage requirement 
for the packed representation is 2N words and n~eluster representatives are stored. The information for 
the packed representation would be stored with the document descriptions. As mentioned before documents 
in the same cluster would be stored near each other on disc for efficiency reasons. Since the packed 
representation relies on knowing the hierarchy order, this order could be made implicit iN the storage 
order thus saving N words of storage. However, because of the possibility of updates and deletions, pointers 
must be used to connect 71 the documents in hierarchy order. Since a search can move in both directions 
through the hierarchy, the documents should be stored in a doubly-linked list. This adds N words to the 
storage overhead. It is a simple matter to do a bottom-up search of the packed representation when it 
is stored with the document descriptions. Given a starting point (some document), successive cluster 
boundaries are located by moving outwards from that document in the packed representation (in both directions) 
and noting the changes in the packed levels. Cluster representatives are formed cumulatively by adding 
in the index terms from each document as it is examined. These representatives are compared with the 
query and the search stops when the similarity value drops or when the cluster being formed is getting 
too large. Figure 3 gives an example. A search of the packed representation will in general involve less 
disc accesses than were done with the top-down search of the explicit hierarchy because no cluster nodes 
are accessed. documents in hierarchy order -d e c a b f g packed levels (from Figure 2) -L1 L1 L3 L4 
L4 L2 - ) 3 1,2,3 are successive clusters i(--.---)Ii~2 found by bottom-up search, given starting point 
 Figure 3 : Finding cluster boundaries Finding a starting point The most critical part of a bottom-up 
search is to find a starting point at the document level of the hierarchy. Once this starting point has 
been found, the bot£om-up search simply looks at~ clusters in that section of the hierarchy and decides 
which one to retrieve. The Cluster Hypothesis <2, pg. 37> says that relevant documents tend to be in 
the same clusters. Therefore the ideal starting point would be a relevant document. Occasionally, a 
user will know a relevant document before he does a search. In this case, the system's task is easy. 
However, when this relevant document is not available, some means of using the query formulation to find 
a starting point must be provided. The assumption behind ranking documents in a serial search is that 
relevant documents tend to be highly similar to the query. This implies that a good starting point would 
be a document which is highly similar to the query. An obvious way to find this highly similar document 
is to use the inverted file. By storing some extra information with the documents in the index term lists, 
a similarity function can be computed between the query and the document (see Murray <8, pg. II-12>). 
The main disadvantage of using the inverted file to find the most similar document is the large storage 
overhead. Other file organizations with less storage overhead have been proposed which perform the same 
task as an inverted file <9,10,11>. However none of these organizations are suitable for a system in 
which the records (documents) are described by a highly variable number of index terms chosen from a 
very large term vocabulary. This of course is just the situation in document retrieval systems. Since 
a collection of documents with a structure defined on it (the cluster hierarchy) is being used, it seems 
reasonable to use this structure to reduce the amount of work needed to find a starting point. The suggestion 
is that the starting point should be a cluster which is highly similar to the query rather than a document. 
To find this cluster, a compact inverted file of clusters could be set up as follows; for each document, 
record a pointer to the lowest level (smallest) cluster that contains it. These clusters can easily be 
found from the compact hierarchy. The number of these clusters (after eliminating duplicates) will be 
less than the number of documents. Then the cluster representatives for each of the clusters are formed 
and an inverted file is generated from these representatives. The index term lists in this compact inverted 
file contain pointers to the clusters in the compact hierarchy. The compact inverted file will have fewer 
index term lists and they will be shorter than those in the conventional inverted file. Therefore both 
the storage overhead and the list intersection time should be significantly less for the compact inverted 
file. The starting point for the bottom-up search is now found by using the compact inverted file. If 
the inverted file is used in the simple manner, the term lists corresponding to the query terms will 
be intersected and the result is a pointer to the cluster whose representative has the highest number 
of terms in common with the query. In practice this biases the results in favour of representatives of 
larger clusters having many index terms. Therefore the number of terms in the cluster representative 
is stored along with the pointer to the cluster in the inverted file. This enables the output to be that 
representative with the highest number of term matches normalized by the number of terms in the representative. 
 Updating the file organization with new documents could be handled by the following method. The incoming 
documents are treated as queries and a highly similar cluster is found from the compact inverted file. 
The document is added to that cluster in the compact hierarchy and the compact inverted file is updated, 
either for each new document or after a specified amount of updating the hierarchy. When the updating 
of the compact inverted file is considered, it is obvious that some modifications to its construction 
are necessary. Consider Figure 4(a). If the compact inverted file is constructed from this hierarchy, 
the five documents are replaced by three cluster representatives. However, if a document is added to 
the hierarchy as in Figure 4(b) , then all three cluster representatives should be changed. This would 
be too time-consuming in a large system. So, instead of generating the cluster representatives using 
all of the documents in the cluster, only documents that are in the same lowest level cluster are used. 
Figure 4(c) demonstrates this. If a document is added as before, only one new representative has to be 
generated (Figure 4(d) ). This restricted type of cluster representative is only used in the compact 
inverted file. Another obvious modification is to specify a limit on the size of the cluster that should 
be entered into th inverted file. This modification reduces the size of the compact inverted file but 
should not greatly affect retrieval performance. I i I I....I I I t l I I a b c d e a b f c d e 
~l~ ~//c t~l'l / /  ~3-~ luster ~2''~ boundaries 3' (a) Lowest level clusters (b) After new document 
is added I E i f Il ili a b c d e a b f c d ~i¢# ~2 / 3 ~. I~/ ~2~/ (c) Modified groups (d) Modified 
with added document Figure 4 : Modification of compact inverted file Experiments Experiments have 
been performed with the proposed file organization using two document collections. The first is a subset 
of 11,613 documents derived from a 27,360 document collection from the United Kingdom Chemical Information 
Service (UKCIS). Its derivation is described in <5>. The other collection is the C1400I collection of 
14OO documents <12>. Table 1 compares some statistics for the two collections. No. No. Rel.Docs Terms 
Terms Collection Docs Qrys per Qry per Doc per Qry UKCIS 27,360 182 58.9 6.6 7.0 CI4OOI 1,400 225 7.2 
29.9 7.9 Table 1 : Collection statistics The measure used for the effectiveness of the retrieval method 
is as follows (Van Rijsbergen <2> describes and justifies this measure); given the precision P and recall 
R for the set of documents retrieved by the query, the measure (E) is a weighted combination of P and 
R 1 E = O < ~ < 1 ~ (i/P) + (I-~) (l/R) ---- where ~ is a parameter giving the relative weight a 
user may attach to recall and precision. For convenience e has been transformed by = 1/(82+ i) so that 
the values of 8 range from O to ~.B = 1 corresponds to attaching equal importance to recall and precision, 
and B = ½ or 2 corresponds to attaching half or twice as much importance to recall as to precision respectively. 
Also, note that the smaller E the more effective the retrieval. The actual E values for a particular 
search will be summarised by plotting them as a cumulative frequency distribution. The higher and more 
skewed to the left the distribution is, the more effective the retrieval. The E measure has been used 
for the simple reason that precision-recall graphs are not appropriate for searches which retrieve 
clusters and do not rank the documents within them. The compact inverted files for the two collections 
were constructed using the log 2 representative. This representative is formed by only including index 
terms which occur in more than log2N documents, where N is the cluster size. Table 2 compares the statistics 
for the compact and conventional inverted files. The comparison shows that a considerable storage saving 
(85% in the case of UKCIS) can be achieved by using the compact inverted file. In both cases the index 
term lists from the compact inverted file are considerably shorter. The savings are not as great for 
the Cl4OOI collection because the hierarchy had a higher proportion of smaller clusters which need entries 
in the inverted file. Collection UKCIS CI4OOI Conventional inverted file Number of index term lists 
12,0OO 2,683 Number of postings 78,662 41,841 Av. no. of documents/list 6.5 15.6 Compact inverted file 
Number of index term lists 3,200 1,185 Number of postings 10,764 8,806 Av. no. of documents/list 3.4 
7.4 Ratio of size of compact to size of conventional .14 .21 Table 2 : Compact and conventional inverted 
 file statistics The starting points for the bottom-up search were selected from the compact inverted 
file using Dice's coefficient D. 2 QnR I D = IQI + Rl where Q is the set of query terms, R is the 
set of representative terms and I-I is the set magnitude. Figures 5(a) and (b) compare the bottom-up 
searches on both collections with the serial searches for 8 = ½ (precision-oriented evaluation). The 
serial search was evaluated in both cases by using an optimal cutoff on the ranked documents. That is, 
the first X documents are retrieved from the ranked list, where X is the number which gives the best 
average effectiveness as measured by the E value. ~umulative i i.O ?requency UKCIS CI4OOI 0.5 ser 0.5 
Bottom- J~ ~ bottom-up ~ serial O 0.5 1.O O 0.5 1.O E B =0.5 E 8 =0.5 Average E Serial O.92 Average E 
Serial O. 79 Bottom-up 0.92 Bottom-up O. 76 (a) (b) The comparison for UKCIS (Figure 5(a)) is complicated 
by the fact that the absolute value of retrieval performance for all searches, including the standard 
benchmarks, was low. This was due to problems with the data, especially the lack of exhaustive relevance 
judgements. However the bottom-up search does perform at least as well as the serial search, which is 
a very good result for a clustered search. For the CI4OOI collection (Figure 5(b)) the bottom-up search 
does significantly better than the serial search at the low E end of performance. That is, the bottom-up 
search tends to retrieve small highly relevant clusters. The average number of documents per retrieved 
cluster was 8 for UKCIS and 15 for CI4OOI. The number of hierarchy levels for the CI4OOI collection 
was 37. The number of levels involved in a search (that is, the number of representatives that were compared 
to the query) averaged 2.3 (maximum 12) for CI40OI. This means that, although cluster representatives 
are calculated at search time, so few are required that this process would not hinder fast retrieval. 
 Figures 6(a) and 6(b) compare the results of bottom-up searches on both collections which use starting 
points from the compact inverted file and from the conventional inverted file. The starting points from 
the compact inverted file perform slightly better than those from the conventional inverted file. This 
could be explained by the difference in the type of starting point chosen. The conventional inverted 
file chooses a highly ranked document. Some of these highly ranked documents may be only loosely connected 
to the other documents in the hierarchy, that is, they cluster at a high level. This type of document 
would give a high E value cluster if used for retrieval. On the other hand, the compact inverted file 
chooses a highly ranked group of documents as a starting point. This means that the documents chosen 
tend to be connected at lower levels to other documents and thus could more readily bring in more relevant 
documents on the bottom-up search. 1.O frequency UKCIS Cumulative 0.5 compacJ . r ~ conventional 
 0.5 I.O O  K S =0.5 with conventional inverted file 0.95 Average E with compact inverted file 0.92 
 (a) Cumulative i.O frequency C14OOI O.5 J -~ conventional I O O.5 i.O  B=o.5 E Average E with 
conventional inverted file 0.80 --with compact inverted file 0.76 (b) Figure 6 : comparison of starting 
points from compact and conventional inverted files 8O Conclusion The file organization presented 
consisted of two parts -the compact hierarchy representation and the compact inverted file. The compact 
hierarchy representation was chosen for use with a bottom-up search and no cluster representatives or 
explicit cluster nodes were stored. This means that the cluster hierarchy adds little storage overhead 
 to the file of document descriptions. Because very few cluster representatives are required (about 
2 for an average search), they may be calculated at search time without a large time penalty. The compact 
inverted file which is used to provide a starting point for a bottom-up search was shown to give considerable 
storage savings compared to the conventional inverted file. The starting points obtained from the compact 
file are slightly better than those from the conventional file. Finally, the retrieval experiments showed 
that the bottom-up search using the compact inverted file starting points has a similar performance to 
the serial search in terms of the average E value, but it is definitely superior in retrieving clusters 
with high precision values. Barraclough <13> points out that most users of on-line systems require a 
few relevant references and are not concerned about the recall of the search. This file organization 
can provide fast searches with high precision and quite reasonable recall. The searches can be modified, 
as in all cluster-based systems, to change the emphasis more to recall. References <RefA>I. G. Salton, Dynamic 
information and library processing. Prentice-Hall, New Jersey (1975). 2. C.J. Van Rijsbergen, Information 
Retrieval. Butterworths, London (1975). 3. C.J. Van Rijsbergen, Automatic information structuring and 
retrieval. Ph.D. Thesis, University of Cambridge (1972). 4. W.B. Croft, Document clustering. Melbourne 
(1975). M.Sc. Thesis, Monash University 5. W.B. Croft, Clustering large files of documents using the 
single- link method. JASIS (to appear). 6. N. Jardine and R. Sibson, Mathematical Taxonomy. Wiley, London 
(1971). 7. R. Sibson, SLINK: An optimally efficient algorithm for the single- link cluster method. Comp. 
j.1973, 16, 30-34. 8. D.M. Murray, Document retrieval based Thesis, Cornell University (1972). on clustered 
files. Ph.D. 9. C.T. Abraham, S.P. Ghosh and D.K. Ray-Chaudhuri, File organization schemes based on finite 
geometries. Information and Control. 1968, 12, 143-163. i0. J.L. Bentley, Multidimensional binary search 
trees used for associative searching. CACM. 1975, 18, 509-517. ii. W.A. Burkhard, Partial match retrieval. 
BIT. 1976, 16, 13-31. 12. C.W. Cleverdon, J. Mills and M. Keen, Factors determining the performance of 
indexing systems, Vol. i, ~SLIB Cranfield Project (1966). 13. E.D. Barraclough, On-line searching in 
information retrieval. J.Doc. 1977, 33, 220-238.</RefA>  
			
