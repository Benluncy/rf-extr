
 An Online Scalable Algorithm for Average Flow Time in Broadcast Scheduling Sungjin Im* Benjamin Moseley 
Abstract In this paper the online pull-based broadcast model is considered. In this model, there are 
n pages of data stored at a server and requests arrive for pages online. When the server broadcasts page 
p, all outstanding requests for the same page p are simultaneously satis.ed. We consider the problem 
of minimizing average (total) .ow time online where all pages are unit-sized. For this problem, there 
has been a decade-long search for an online algorithm which is scalable, i.e. (1 + E)-speed O(1)-competitive 
for any .xed E> 0. In this paper, we give the .rst analysis of an online scalable algorithm. 1 Introduction 
We consider the pull-based broadcast scheduling model. In this model, there are n pages available at 
a server and requests arrive for pages over time. The server must satisfy all requests. When the server 
broadcasts a page p, all outstanding requests for the same page p are satis.ed simultaneously. This is 
the main di.erence from standard scheduling settings where the server must process each request separately. 
The broadcast model is motivated by several applications such as multicast systems and wireless and LAN 
networks [31, 1, 2, 25]. Besides the practical interest in the model, broadcast scheduling has seen growing 
interest in algorithmic scheduling literature both in the o.ine and online settings [5, 2, 1, 6, 25]. 
Work has also been done in stochastic and queueing theory literature on related models [16, 15, 29, 30]. 
 In this paper we concentrate on the online model with the goal of minimizing the total (or equivalently 
average) .ow time 1 . This is one of the most popular quality of service metrics. The ith request for 
page p will be denoted Jp,i. The request Jp,i arrives at time *Department of Computer Science, University 
of Illinois, 201 N. Goodwin Ave., Urbana, IL 61801. im3@illinois.edu. Par­tially supported by NSF grants 
CCF-0728782, CNS-0721899, and Samsung Fellowship. Department of Computer Science, University of Illinois, 
201 N. Goodwin Ave., Urbana, IL 61801. bmosele2@illinois.edu.  Partially supported by NSF grant CNS-0721899. 
1 Flow time is often referred to response time or wait time ap,i and, in the online model, this is when 
the server is .rst aware of the request. Time is slotted and a single page can be broadcasted in a time-slot. 
Notice that this implies that all pages can be broadcast in the same amount of time. Unit (or similar) 
processing time pages is popular in practice. This model also captures the algorithmic di.culty of the 
problem and this is almost exclusively the model addressed in previous literature. The total .ow time 
of a given schedule can be written as Lp Li(fp,i - ap,i), where fp,i is the time when Jp,i is satis.ed. 
It was shown that without resource augmentation any online deterministic algorithm is O(n)-competitive 
[27]. Further, any randomized online algorithm has v a lower bound of O(n) [3]. Due to these strong lowerbounds 
we focus on the resource augmentation model [26] where an algorithm A is given s = 1 speed and is compared 
to an optimal o.ine solution that has 1 speed. We will let As be the .owtime accumulated for an algorithm 
A when given s speed; sometimes we will allow As to denote the algorithm itself with s speed if there 
is no confusion in the context. In the resource augmentation model, we say that A is s-speed r-competitive 
if As = rOPT for all request sequences, where OPT is an optimal o.ine solution given 1 speed. The algorithmic 
di.culty in broadcast scheduling is that two algorithms may have to do di.erent number of broadcasts 
to satisfy the same set of requests. For exam­ple, consider the algorithm most-requests-.rst (MRF) which 
broadcasts the page that has the largest number of unsatis.ed requests. This algorithm may seem like 
the most natural candidate for the problem. However, it was shown that MRF is not O(1)-competitive even 
when given any .xed extra speed [27]. A simple ex­ample shows that MRF may repeatedly broadcast the same 
page, while ignoring requests which eventually ac­cumulate a large amount of .owtime. The optimal so­lution 
can take advantage of the broadcast setting and satisfy the requests MRF was busy working on by a sin­gle 
broadcast. This leaves the optimal solution free to work on other requests that are unsatis.ed under 
MRF s schedule. Further adding to the di.culty of algorithmic devel­opment, previous work has shown that 
the existence of a O(1)-speed O(1)-competitive online algorithm cannot be proved using standard techniques. 
An algorithm A is said to be locally competitive if the number of requests in A s queue is comparable 
to the number of requests in the adversary s queue at each time. In [27] it was shown that no online 
algorithm can be locally competi­tive with an adversary. Local competitiveness has been one of the most 
popular methods of analysis in standard scheduling [26, 7, 27].  Even though broadcast scheduling has 
been studied extensively over the last decade, the complexity of the problem is yet to be well understood. 
In the o.ine set­ting, minimizing average .owtime was .rst studied us­ing non-trivial linear programming 
techniques coupled with resource augmentation [27, 22, 23, 24]. It was not until later that a complex 
reduction showed that this problem was in fact NP-Hard [21]. Recently, a simpler proof of this fact was 
found [9]. Following this line of work, a (1+E)-speed O(1)-approximation algorithm was eventually given 
in [3]. Here, resource augmentation was used even though it is still open if the problem admits an O(1)-approximation. 
The problem is substantially more di.cult without resource augmentation. No non-trivial analysis was 
shown without resource augmentation un­ v til Bansal et al. gave a O(n)-approximation in [3]. More recently, 
a O(log2 n/ log log(n))-approximation was shown in [4]. We note that this result relies on highly non-trivial 
algorithmic techniques. In the online setting, the strong lowerbound without resource augmentation has 
led previous work to focus on .nding O(1)-speed O(1)-competitive algorithms. The ultimate goal of this 
line of work is to .nd a (1 + E)­speed O(1)-competitive algorithms (for any .xed E> 0). That is, to show 
an algorithm that achieves O(1)­competitiveness with the minimum amount of extra resources. For this 
reason, an online algorithm, which is (1+ E)-speed O(1)-competitive, is said to be scalable. For problems 
which have strong lowerbounds without resource augmentation, .nding a scalable algorithm is the best 
positive result that can be achieved using worst­case analysis. Previously, there have been two main 
approaches used to avoid a local argument, however both lines of work do not seem to suggest a way to 
obtain a scal­able algorithm. The .rst was given by Edmonds and Pruhs in [18]. They showed a non-trivial 
reduction from the problem of minimizing average .owtime in broad­cast scheduling to a non-clairvoyant 
scheduling prob­lem. Their reduction takes an algorithm A that is s-speed c-competitive for the non-clairvoyant 
schedul­ing problem and creates an algorithm B that is 2s­speed c-competitive for the broadcast scheduling 
prob­lem. Using this reduction, they were able to show an algorithm which is (4 + E)-speed O(1)-competitive 
for minimizing the average .owtime in broadcast schedul­ing [17, 18]. More recently, the same authors 
used this reduction to show another algorithm is (2 + E)-speed O(1)-competitive [20]. Both of these algorithms 
can be extended to the case where pages have varying sizes. Notice that a factor of 2 in the speed is 
lost in the re­duction and, therefore, the reduction cannot be used to show a scalable algorithm. The 
algorithm longest-wait-.rst (LWF) was .rst introduced in [27]. LWF uses a natural scheduling policy which 
always schedules the page with the highest .owtime. Edmonds and Pruhs showed that LWF is 6-speed O(1)-competitive 
using a direct analysis that avoided the use of the reduction [19]. In this work, new novel techniques 
were introduced to avoid a local argument. The techniques presented in the paper were quite complex. 
In joint work with Chekuri, we were able to simplify these techniques to make the key ideas more transparent. 
Using this, we were able to show LWF is (3.4+ E)-speed O(1)-competitive [11]. In this paper, a generalization 
of these techniques will be presented which was made possible by our previous simpli.cation. However, 
LWF was shown to be nO(1)-competitive when given speed less than 1.618 [19]. Results: For the problem 
of minimizing total .owtime in broadcast scheduling, we give the .rst online scalable algorithm LA-W. 
We prove that LA-W is (1+ E)­speed O(1/E11)-competitive for any 0 <E = 1, giving a positive answer to 
a central open problem in the area. Our algorithm LA-W is similar to LWF in that it prioritizes pages 
with large .owtime, however LA-W also gives preference to requests which have arrived recently. Favoring 
requests which have arrived recently has been shown to be useful in [20]. The algorithm LA-W focuses 
on pages which have requests that arrived recently. This is fundamentally di.erent from the algorithm 
given in [20], which focuses on requests that arrived recently without considering the page they are 
requesting. Unfortunately, in the broadcast setting it is di.cult to categorize which pages have requests 
that arrived recently, since the arrival of requests can be scattered over time. To counter this, we 
develop a novel and robust way to compare the arrival time of requests between two di.erent pages. Overview 
of the Algorithm: Let Fp(t) be the total waiting time of unsatis.ed requests for page p at time t and 
let Fmax(t) = maxp Fp(t). LWF schedules a page p such that Fp(t)= Fmax(t). Notice that LWF schedules 
the page without considering the number of outstanding requests for the page. Due to this, LWF may broadcast 
a page with a relatively small number of unsatis.ed re­quests which have been waiting to be scheduled 
for a long period of time. However, a page with a small num­ber of requests does not accumulate .owtime 
quickly. In some cases, pages which have a large number of unsatis­.ed requests should be broadcasted 
since these requests will rapidly accumulate .owtime. Using this insight,  [19] was able to show a lower 
bound of 1.618 on the speed LWF required to be O(1)-competitive. Our algorithm LA-W keeps the main spirit 
of LWF by always broadcasting pages with .owtime comparable to Fmax(t) at each time t. However, amongst 
the pages with .owtime comparable to Fmax(t), LA-W prioritizes pages with requests which have arrived 
recently. By prioritizing recent requests, we avoid the potentially negative behavior of LWF. This is 
because a page with requests that arrived recently must have a large number of outstanding requests to 
have .owtime similar to Fmax. As mentioned, we develop a new way to compare the arrive time of requests 
for two di.erent pages. Using this technique, we will be able to break up time into intervals and show 
when requests arrive on these intervals. Thus allowing us to determine how LA-W and the optimal solution 
must behave on these intervals. The algorithm LA-W broadcasts pages with unsat­is.ed requests that arrived 
recently to potentially .nd pages which have a large number of outstanding re­quests. The reader may 
wonder why we chose pages in this manner when we could simply broadcast the page with many outstanding 
requests. In fact, we have considered an algorithm which schedules the page with the largest number of 
outstanding requests amongst the pages with .owtime comparable to Fmax(t). For this al­gorithm, we have 
established that it is scalable for the problem of minimizing the maximum weighted .owtime in broadcast 
scheduling [12]. Further, we have prelim­ inary evidence that this algorithm is O(1) competitive for 
average .owtime when given more than 2 speed. We however were unable to determine its performance for 
average .owtime when given less than 2 speed. Other Related Work: Charikar and Khuller consid­ered a 
generalization of average .owtime where the goal is to minimize the average .owtime for a fraction of 
the requests [10]. Besides work on minimizing the total .ow­ time, other objective functions have been 
considered in the broadcast model. In [6, 9, 12] a 2-competitive al­ gorithm was given for the problem 
of minimizing the maximum response time. When each request has a deadline, constant competitive algorithms 
were given by [28, 8, 32, 14] with the the objective of maximizing the number of requests satis.ed by 
their deadlines. For the problem of minimizing maximum weighted .owtime, a (1+E)-speed O(1)-competitive 
algorithm was been given by [12]. The delay factor is a metric closely related to weighted .owtime. For 
the problem of minimizing the maximum delay factor a (2 + E)-speed O(1)-comeptitive algorithm was given 
by [13] and this was improved to a (1+ E)-speed O(1)-competitive algorihtm in [12]. For the problem of 
minimizing the Lk-norms of .owtime and the delay factor [11] gave O(k)-speed O(k)-competitive algorithms. 
2 Time Model and Algorithm We assume that all requests have unit processing time and without loss of 
generality this is 1. In our time model we assume that requests arrive only at non­negative integer times. 
Any scheduling algorithm A with speed s = 1 schedules a page every 1/s time-steps starting from time 
0. When A broadcasts a page p at time t, all alive (unsatis.ed) requests for page p which arrived strictly 
earlier than t are immediately satis.ed by the broadcast. If Jp,i is a request satis.ed by a broadcast, 
it has .ow time t - ap,i. Note that under the schedule produced by the optimal solution with 1­speed, 
every request has .ow time at least 1. On the other hand, A with speed s> 1 may .nish some requests within 
a delay less than one. Though it would seem fair to force A to schedule requests after at least one time 
step, we do not assume this because our analysis will hold in either case and this assumption improves 
the readability of the analysis. Before introducing our algorithm, we state notation that will be used 
throughout the paper. For any time interval starting at b and ending at e, we let |I| = e - b. For a 
set of requests R, we will let F (R) be the .owtime accumulated for the requests in R by our algorithm. 
For a page p we will let Fp(t) be the total .owtime accumulated at time t for unsatis.ed requests for 
page p. We will let F (R, t) be the total .owtime accumulated by our algorithm for requests in the set 
R at time t. Note that if some requests in R arrive after time t then these requests do not contribute 
to the value of F (R, t). We let F *(R) denote the total .ow time OPT accumulates for a set of requests 
R. We now introduce our algorithm, denoted by LA-W for Latest Arrival time with Waiting. We as­sume that 
LA-W is given s = 1+ E speed where 0 <E = 1 is a .xed constant. Our algorithm is pa­rameterized by constants 
c> 1 and ß< 1 depending on E, which will be de.ned later. For each page p and time t, let Rp(t) denote 
the set of alive requests for page p at time t. Let L(p, t) be the last time before time t that our algorithm 
broadcasted page p. If there  Figure 1: Rp(t) denotes the alive requests of page p at time t, i.e. 
the requests of page p which arrived during [L(p, t),t]. as the latest arrival time of any unsatis.ed 
request for page p after discounting requests that arrived recently that have small .owtime. Since the 
arrival of requests for the same page p can be scattered over time, we will use tß(t) as the representative 
arrival time of those p requests. Notice that if all requests for page p arrive at time t' then tß(t)= 
t' for any 0 <ß = 1. We remark p that we do not know if Rule 2 is needed for LA-W to be (1+ E)-speed 
O(1)-competitive. Rule 2 will play a crucial role in our analysis, but we do not have a proof ßp (t)) 
denotes the requests which arrived during Likewise, Rp(t [L(p, t),t ßp (t)]. that Rule 1 alone performs 
poorly. 3 Analysis is no such time then L(p, t) = 0. Note that Rp(t) is equivalent to the set of the 
requests for page p which arrived during [L(p, t),t]. For a page p and time t let t ß (t)= argminL(p,t)=t:=t(F 
(Rp(t'),t) = (1 - ß)Fp(t)). p In other words, t ß(t) denotes the earliest time t' no p later than time 
t and no earlier than time L(p, t) such that the requests in Rp(t') have total .owtime at least (1 - 
ß)Fp(t) at time t. By this de.nition, if R [L(p,t),t ßp (t)] Figure 2: Events for page p. is the set 
of requests for page p that ar­ rive on the interval [L(p, t),tß(t)] and R p [L(p,t),t ßp (t)) is the 
set of requests for page p that arrive on the interval Let s be a .xed sequence of requests. OPT [L(p, 
t),tß(t)) then F (R p ,t) = (1 - ß)Fp(t) [L(p,t),t ßp (t)] denotes a .xed o.ine optimal solution. We 
assume and F (R ,t) < (1 - ß)Fp(t). See Figure 1. LA-W1+E is always busy scheduling pages for the [L(p,t),t 
ßp (t)) Algorithm: LA-W Let t be a time where our algorithm is not broadcasting a page.  Let Fmax(t) 
= maxp Fp(t).  Broadcast one page according to Rule 2 every l10  J broadcasts, and broadcast one page 
E according to Rule 1 otherwise. Rule 1: broadcast the page p = ß argmaxt: (t), p:.Q(t)p1 where Q(t)= 
{q | Fq(t) = Fmax(t)} c breaking ties arbitrarily. Rule 2: broadcast a page p where Fp(t)= Fmax(t) breaking 
ties arbitrar­ily. Our algorithm LA-W broadcasts pages mainly according to Rule 1 while occasionally 
broadcasting a page according to Rule 2. The second rule uses LWF s scheduling policy which broadcasts 
a page with the highest .owtime. The .rst rule chooses a page p with the latest time tß(t) among the 
pages with .owtime p close to Fmax(t). The value of tß(t) can be interpreted p sequence s. Otherwise, 
our arguments can be applied to each maximal time interval where LA-W1+E is busy. Following the lead 
of [19, 11], time is partitioned into events for each page p. Events for page p are de.ned by LA-W1+E 
s broadcasts of page p. Each time LA-W1+E broadcasts a page, an event begins and an event ends. An event 
Ep,x = (bp,x,ep,x) begins at time bp,x and ends at time ep,x. Here, LA-W1+E broadcasts page p at time 
bp,x and at time ep,x. These are the xth and (x + 1)st broadcasts of page p by LA-W1+E. The (x + 1)st 
broadcast of page p starts a new event Ep,x+1 and ep,x = bp,x+1. On the time interval (bp,x,ep,x) LA-W1+E 
does not broadcast page p. The optimal solution can broadcast page p zero or more times during an event 
Ep,x. See Figure 2. For an event Ep,x, let Rp,x denote the set of requests satis.ed by the (x+1)st broadcast 
of page p. Notice that all requests in Rp,x arrive during Ep,x, formally during [bp,x,ep,x). Let Fp,x 
= F (Rp,x) be the total .owtime LA-W1+E accumulates for requests in Rp,x. Likewise * let F = F *(Rp,x) 
be the .owtime OPT accumulates p,x for requests in Rp,x. We refer to Fp,x as the .owtime of Ep,x. Similarly 
to requests, for a set E of events we let F (E)= LEp,x.E Fp,x. For any event Ep,x, the next lemma will 
be used to bound the .owtime accumulated for page p at di.erent  times during Ep,x. This will help us 
to compare the .owtime of Ep,x to the .owtime of events ending during Ep,x. The proof of this lemma follows 
easily by de.nition of .owtime. Lemma 3.1. For any event Ep,x, let R ' . Rp,x. Let t be such that bp,x 
= t<ep,x. Suppose that all requests in R ' arrive no later than time t. Then for any 0 = .< 1, F (R ' 
,t + .(ep,x - t)) = .F (R '). Further, if F (R ') = .Fp,x, then F (R ' ,t + .(ep,x - t)) = ..Fp,x. Our 
goal is to show that LLFp,x = O(1)OPT. px We start by partitioning events into two groups. An * event 
Ep,x is called self-chargeable if Fp,x = .F where p,x . = 1 is a constant to be .xed later. Let S be 
the set of all self-chargeable events. The other events are called non-self-chargeable and are in the 
set N . By de.nition of self-chargeable events, we can easily bound F (S) by OPT. Lemma 3.2. F (S) = 
.OPT. We now concentrate on non-self-chargeable events. Notice that for a non-self-chargeable event Ep,x, 
the optimal solution must broadcast page p during Ep,x, * formally during (bp,x,ep,x). Otherwise, F = 
Fp,x and p,x the event is self-chargeable. We further partition non­self-chargeable events into two classes. 
Consider a non­self-chargeable event Ep,x. Let a and k be constants to be .xed later such that a< 1, 
k> 1 and ßk < 1. Ep,x is in the set N1 if for some ß = . = ßk it is the case that at least Ias(ep,x - 
t .(ep,x))l self-chargeable events p end on the interval [tp.(ep,x),ep,x). Notice that the time tp.(ep,x) 
exists because .< 1. A non-self-chargeable event not in N1 is in N2. The sets N1 and N2 are similar to 
how [11] parti­ tions non-self-chargeable events. Bounding the .owtime of events in N1 by OPT is not 
too di.cult and follows easily by combining the analysis given in [11] and the de.nition of t. We do 
this by bounding F (N1) by the .owtime of the self chargeable events ending during the events in N1. 
Knowing that F (S) = .OPT we will be able to bound F (N1) by OPT. A formal proof of the following lemma 
can be found in Appendix B. Lemma 3.3. F (N1) = O( 1 E11 )OPT. The most interesting events are those 
which are in N2. Since each event Ep,x in N2 has a relatively small number of self-chargeable events 
ending during Ep,x, we cannot directly bound F (N2) by OPT. Instead, we will show that the total .owtime 
of events in N2 accounts for only a fraction of LA-W1+E s total .owtime, i.e. F (N2) = dLA-W1+E for some 
constant d< 1 which is independent of E. In [12] and [19] speed greater than 3.4 was needed to bound 
F (N2). Our goal is to ensure d< 1 with only (1 + E) speed. Showing this will complete our analysis as 
follows. Using this, Lemma 3.2 and Lemma 3.3, we have that LA-W1+E = F (S)+ F (N )= F (S)+ F (N1)+ F 
(N2) = .OPT + O( 1 which simpli.es E11 )OPT + dLA-W1+E, .+O( 1 to LA-W1+E = 11 ) OPT. This will imply 
the 1-d following theorem. Theorem 3.1. For 0 <E = 1, the algorithm LA-W is (1 + E)-speed O( 1 E11 )-competitive 
for minimizing average .ow time in broadcast scheduling with unit sized pages. Before continuing, we 
show some properties of 1 events in N2. Say that we set . = . Then it is ß not hard to show that OPT 
must broadcast page p during I =[tpß(ep,x),ep,x) for any non-self-chargeable event Ep,x. Indeed, the 
requests for page p that arrive during the interval I have total .owtime at least ßFp,x in LA-W1+E s 
schedule by de.nition of t ß . If OPT does not broadcast page p during I this implies that these requests 
also have total .owtime ßFp,x in OPT s * 1 schedule. However, then Fp,x = ßFp,x = Fp,x, . contradicting 
the fact that Ep,x is non-sef-chargeable. The proof of the lemma is deferred to Appendix B. 1 Lemma 
3.4. Suppose that . = . Then, for any non­ ß self-chargeable event Ep,x, the optimal solution must broadcast 
page p during the interval [tpß(ep,x),ep,x). 10000 Now say that we set . = ßE2 . Using similar ideas 
as in Lemma 3.4, we will be able to show that 10000 |[tpß(ep,x),ep,x)|= E2 . This will be used to ensure 
that the intervals considered in our remaining argu­ments are su.ciently long. The proof of the following 
lemma can be found in Appendix B. 10000 Lemma 3.5. Suppose . = E2ß . Then, for any non­self-chargeable 
event Ep,x, |[tß(ep,x),ep,x]|= 10000 . p E2 We start by giving intuition on why F (N2) = dLA-W1+E. As 
in [19, 11], we use a global charging scheme built on Hall s theorem. We generalize charging techniques 
used in [19, 11] in the following lemma. This lemma shows how to charge the .owtime of some events to 
the total .owtime LA-W1+E accumulates. The proof of the lemma can be found in Appendix A. Lemma 3.6. 
Let A be a set of events. Let µ,. > 0 be some constants. Let . = 1 be an integer. For each event Ep,x 
.A, suppose there exists an interval Ip,x and a set of events Bp,x such that The optimal solution broadcasts 
page p at least . times during the interval Ip,x. Further, Ip,x is ' disjoint with Ip,x: for any Ep,x: 
.A s.t. x = x.  |Bp,x|= µ|Ip,x| and Eq,y .Bp,x only if eq,y . Ip,x and Fq,y = .Fp,x. Let B = (p,x):Ep,x.A 
Bp,x and d = minEp,x.A |Ip,x|. 2 Then, F (A) = ( )( d+1 )F (B) = ..µ d ( )( d+1 )LA-W1+E. ..µ d This 
lemma can be interpreted as follows. For a set of events A.N2, we charge the .owtime of each event Ep,x 
.A to some events ending during Ip,x. In our analysis, Ip,x will always be a subinterval of Ep,x; thus 
for any .xed page p, {Ip,x | Ep,x . A} are disjoint. If the following conditions hold for each event 
Ep,x .A, then F (A) « LA-W1+E. (1) There are at least . broadcasts by OPT of page p during Ip,x. (2) 
We can .nd a su.ciently large fraction of events ending during Ip,x, denoted by µ, such that each of 
these events have .owtime at least .Fp,x. (3) Ip,x is su.ciently long for all Ep,x .A. The bound we get 
on F (A) improves by either .nding many broadcasts of page p by OPT during Ip,x or by .nding su.ciently 
many events with very large .owtime ending during Ip,x. To exploit Lemma 3.6, N2 is partitioned into 
three disjoint sets T1, T2 and T3. To discuss the high level interpretation of the sets T1, T2 and T3 
we .x an event Ep,x .N2 and page p and drop the subscript p, x. For the event E we will consider di.erent 
subintervals of E de.ned by t . Let Ii =[t ß( 10 i+1)(e),e) for i . N. Notice that Ii is a subinterval 
of Ii+1 for all i. We will concentrate on the intervals Ii for di.erent values of i. Concentrating on 
these intervals will allow us to break up the event E so that we can better understand when the requests 
for page p arrived during E and how the optimal solution and LA-W1+E behaved during E. The event E will 
be in the set T1 if for some i it is the case that page p is not in the queue Q for a su.ciently large 
number of broadcasts by LA-W1+E during Ii . By de.nition of Q, if p is not in Q(t) then there exists 
another page q such that Fq(t) > cFp(t). Rule 2 of LA-W broadcasts a page with the highest .owtime every 
l10 J broadcasts. Using this, we will E be able to .nd su.ciently many events ending during E with .owtime 
much larger than the .owtime of event E. Then Lemma 3.6 can be used to show that F (T1) « LA-W1+E. Intuitively, 
the requests in T1 cannot account for most of LA-W1+E s .owtime since there exists other events with 
.owtime much larger than those in T1. If the event E is not in the set T1 and if the length of Ii+1 is 
su.ciently longer than the length of Ii for many di.erent values of i then the event E will be in the 
set T2. For such an event E, the requests for page p that arrive during E will be grouped according to 
when they arrived. We will show that each of these groups contributes to a substantial amount of event 
E s .owtime. Knowing that E is non-self-chargeable, we will show that OPT must perform a unique broadcast 
of page p for each of these groups during E. This allows us to show that F (T2) « LA-W1+E using Lemma 
3.6. Intuitively, since the optimal solution has to perform a lot of broadcasts for each event in T2, 
there cannot be many events in T2. Therefore the events in T2 do not account for a large portion of LA-W1+E 
s .owtime. Finally T3 will consist of all events in N2 that are not in T1 or T2. Using the de.nitions 
of T1, T2 and t we will be able to show that no events can be in T3 and this will complete our analysis. 
Showing that T3 = Ø is the most di.cult part of the analysis and this is where Rule 1 and resource augmentation 
plays a crucial role. We now formally de.ne the sets T1, T2 and T3. For ß( 10 i+1) simplicity of notation, 
let t ß,i = tp (ep,x). A N2 p,x event Ep,x is in T1 if and only if for some 0 = i = I1000cl+2 the page 
p is not in Q for at least I Es |[tß,i ,ep,x)|l broadcasts by our algorithm 10 p,x on the interval [t 
ß,i ,ep,x). p,x T2 if and only if Ep,x ./T1 and for all 0 = - tß,i+1 E - t ß,i i =I1000cl, tß,i = (ep,x 
) p,x p,x 10 p,x T3 otherwise. We note that if ß and c are chosen such that ß( 10 (I1000cl + 2) + 1) 
< 1, then the time tß,i must E p,x exist for all 0 = i =I1000cl + 2. The rest of the paper is organized 
as follows. In Section 3.1 we will show that F (T1) « LA-W1+E. Then in Section 3.2 we will show that 
F (T2) « LA-W1+E. Finally we will show that T3 = Ø in Section 3.3. Before continuing, we .x our constants, 
so that our arguments can be E 10000 10000 veri.ed. Let ß =( )4 , c =, . =, 1000 E3 E2ß E 10 a = and 
k =(I1000cl + 2) + 1. Note that 100 E ß,.1000c1+2 = tßk tp,x (ep,x) for any page p by de.nition of p 
k and tß,i . Recall that our algorithm is parameterized p,x by ß and c. Here we have chosen c and ß so 
that the analysis is readable and easy to verify and not to optimize the analysis. 3.1 Bounding T1 events. 
In this section we bound F (T1). By de.nition of T1, for each event Ep,x . T1 the page p is not in Q 
for at least I Es |[tp,x,ep,x)|l broadcasts 10 by LA-W1+E on the interval [tp,x,ep,x) where tp,x = tß,i 
p,x for some .xed 0 = i =I1000cl + 2. Recall that our goal is to show that there are many events ending 
during Ep,x with .owtime much larger than Fp,x. After .nding these events, we will charge Fp,x to these 
events. We begin by actually .nding such events in the next lemma.  Lemma 3.7. For an event Ep,x . T1 
there exist at least ( E2 s )|[tp,x,ep,x)| events ending on the interval [tp,x,ep,x) 205 with .owtime 
at least cE (1 - ßk)Fp,x. 20 Proof. Let S[bp,x] be the requests for page p which ,tp,xarrive during [bp,x,tp,x]. 
By the de.nition of tp,x and t , we have F (S[bp,x,tp,x]) = (1 - ß( 10 i + 1))Fp,x = E E (1 - ßk)Fp,x. 
Let I =[tp,x +(ep,x - tp,x),ep,x). For 20 any time t . I, by Lemma 3.1, E (3.1) F (S[bp,x,tp,x],t) = 
(1 - ßk)Fp,x. 20 By de.nition of T1, there are at least I Es (ep,x - 10 tp,x)l broadcasts by our algorithm 
on the interval [tp,x,ep,x) where page p is not in Q. At most I Es (ep,x - 20 tp,x)l of these broadcasts 
end on the interval [tp,x,tp,x + E (ep,x - tp,x)). Therefore, there are at least I Es (ep,x - 20 10 tp,x)l-I 
Es (ep,x - tp,x)l=l Es (ep,x - tp,x)J broadcasts 20 20 by our algorithm on the interval I where page 
p is not in Q when these broadcasts were scheduled. Now consider a time t . I where page p is not in 
Q(t). By de.nition of Q, at time t there must exist some page q such that Fq(t) = cFp(t). Our algorithm 
schedules the page with the largest .ow time every l10 J broadcasts according to Rule 2. Using this and 
E (3.1), there exists an event Eq,y with .owtime at least cE l10 Fq,y > (1 - ßk)Fp,x such that eq,y . 
[t, t + 1 J). 20 sE Using Lemma 3.5 to ensure the interval [tp,x,ep,x) is su.ciently long, we conclude 
that there exist at least l(l Es (ep,x - tp,x)J/l10 J)J= ( E2 s )|[tp,x,ep,x)| events 20 E 205 cE ending 
during I with .owtime at least (1 - ßk)Fp,x. 20 We can now easily bound F (T1) by LA-W1+E using lemmas 
3.6, 3.7, 3.4 and 3.5. 83 Lemma 3.8. F (T1) < LA-W1+E. 100 Proof. We apply Lemma 3.6 using the notation 
given in the lemma. Consider any Ep,x . T1. Let Ip,x = [tp,x,ep,x). We know that the optimal solution 
must broadcast page p at least once on the interval [tp,x,ep,x) by Lemma 3.4, since [tpß(ep,x),ep,x) 
is a subinterval of [tp,x,ep,x). So we can set . = 1. By Lemma 3.7 we have that for any event Ep,x . 
T1 there exist at least E2 s |[tp,x,ep,x)| events ending on the interval [tp,x,ep,x) 205 of .owtime at 
least cE (1 - ßk)Fp,x. If we let the set 20 E2 s Bp,x consist of these events, we can set µ = and 205 
cE . = (1 - ßk). Using Lemma 3.5 we know that 20 |Ip,x|= 10000/E2 and therefore d = minEp,x.A |Ip,x|= 
10000/E2 . Thus we have 2 d +1 F (T2) = LA-W1+E .µ. d 41 1 d +1 =( )() LA-W1+E 50(1 + E)1 - ßk d 83 < 
LA-W1+E. 100 3.2 Bounding T2 events. In this section, we bound F (T2). Recall that our goal is to show 
that for any event Ep,x . T2, the optimal solution must broadcast page p many times during Ep,x. To .nd 
these broadcasts by the optimal solution, we break up each event Ep,x . T2 into the time intervals [tß,i+2,t 
ß,i ). By de.nition of p,x p,x t, we know that the requests for page p that arrive during [t ß,i+2,tß,i+1] 
account for a substantial portion p,x p,x of the .owtime of event Ep,x. Knowing this and that the length 
of [t ß,i+1,tß,i ) is su.ciently long by de.nition p,x p,x of events in T2, we will be able to show that 
the optimal solution must broadcast page p during [t ß,i+2,tß,i ). p,x p,x Otherwise, these requests 
wait for a su.ciently long time to be scheduled by OPT and, therefore, OPT must 1 accumulate .owtime 
at least Fp,x for these requests. . This contradicts the fact that events in T2 are non-self­chargeable. 
 Figure 3: For any event Ep,x in T2, OPT must broadcast page p during [t1,t3). Lemma 3.9. Let Ep,x be 
an event in T2. For any integer i s.t. 0 = i =I1000cl, the optimal solution must broadcast page p during 
the interval [tß,i+2,tß,i ). p,x p,x Proof. For any .xed integer i such that 0 = i =I1000cl, tß,i+2 tß,i+1 
tß,i let t1 =, t2 = , and t3 = . Note p,x p,x p,x E that t3 - t2 = (ep,x - t3) and t1 <t2 <t3, since 
10 Ep,x . T2. See Figure 3. Let ), ) S[t1,ep,xS(t2,ep,x and S[t1,t2] be the set of requests for page 
p which arrive on the intervals [t1,ep,x), (t2,ep,x) and [t1,t2], respectively. By de.nition of t1 and 
t2, we have that )) >ß( 10 (i + 2) + 1)Fp,x and F (S(t2,ep,x)) = F (S[t1,ep,xE ß( 10 (i + 1) + 1)Fp,x. 
Thus we have, E (3.2) F (S[t1,t2])= F (S[t1,ep,x)) - F (S(t2,ep,x)) 10 > ßFp,x. E E With the fact t3 
- t2 = (ep,x - t3), the fact that 10 the requests in S[t1,t2] arrive by time t2, and (3.2), by applying 
Lemma 3.1 we have  E 10 (3.3) F (S[t1,t2],t3) = ( )( )ßFp,x = ßFp,x. 10 E For the sake of contradiction, 
suppose that the optimal solution does not broadcast page p on the interval [t1,t3). Then 1 * (3.4) F 
= F (S[t1,t2],t3) = ßFp,x = Fp,x. p,x . This is a contradiction to Ep,x being non-self­chargeable. Corollary 
3.1. For each event Ep,x . T2, the op­timal solution broadcasts page p at least I500cl times during the 
interval [tßk ,ep,x). p,x At this point, we have shown the most interesting property of events in T2 
and we are almost ready to bound F (T2). Before bounding F (T2), we .rst .nd events to charge to. For 
each event Ep,x . T2, we want to charge Fp,x to some events ending during [t ßk p,x,ep,x) because we 
know OPT broadcasts page p many times during this interval. Knowing that LA-W always broadcasts the page 
with .owtime close to the highest .owtime, we can easily .nd events ending during [t ßk ,ep,x) with su.ciently 
large .owtime. p,x Lemma 3.10. Consider any event Ep,x . T2. Let =[tßk ,ep,x). There exist at least 49 
(1 + E)|Ip,x| Ip,x p,x 100 1 events ending during Ip,x with .owtime at least (1 - 2c ßk)Fp,x. ' - t ßk 
Proof. Let I =[tßk + 1 (ep,x ),ep,x). Note that p,x p,x 2 p,xthere are at least l(1 + E) 1 |Ip,x|J = 
(1 + E) 49 |Ip,x| 2 100 ' events ending during I ; the inequality is due to p,xLemma 3.5 to ensure |Ip,x| 
is su.ciently long. Let Eq,y ' be an event such that eq,y . I . We now show that p,x 1 Fq,y = (1-ßk)Fp,x. 
By Lemma 3.1 and the de.nition 2c 1 of tßk we have Fp(eq,y) = (1 - ßk)Fp,x. Since our p,x 2 algorithm 
chose page q over page p at time t, according 1 to either Rule 1 or Rule 2, Fq,y = Fp(eq,y). Hence c 
1 we conclude that Fq,y = (1 - ßk)Fp,x. 2c Finally we bound the .owtime of T2 events by charging an event 
Ep,x . T2 to the events we found in Lemma 3.10. Notice that the events we are charging to can have .owtime 
less that Fp,x, but we counter this by .nding many broadcasts of page p by OPT during Ep,x. 2 Lemma 3.11. 
For 0 <E = 1, F (T2) < LA-W1+E. 100 Proof. We apply Lemma 3.6. Let Ep,x . T2 and Ip,x =[tßk ,ep,x). By 
Corollary 3.1 we can set . = 500c. p,xBy letting Bp,x be the set of events found for Ep,x in 1 49 Lemma 
3.10, we can set . = (1-ßk) and µ = (1+ 2c 100 E). Using Lemma 3.5 we know that |Ip,x|= 10000/E2 and 
therefore d = minEp,x.A |Ip,x|= 10000/E2 . The desired result follows by simple calculation. 3.3 There 
are no events in T3. In this section we show T3 = Ø. For the sake of contradiction suppose that T3 is 
non-empty. Fix an event Ep,x . T3. For - t ß,i+1 some .xed 0 = i =I1000cl we have that tp,xß,i p,x < 
E - tß,i = tß,i+1 (ep,x p,x) because Ep,x ./T2. Let t1 p,x and 10 t ß,i t2 = . Let t3 = t2 + E (ep,x 
- t2). Let E be all the p,x9 non-self-chargeable events ending during [t3,ep,x) which were scheduled 
by Rule 1 when page p was in Q. Our goal is to show that OPT must make a unique broadcast for each event 
in E on the interval [t1,ep,x). Then it will be shown that |E| > |[t1,ep,x)| + 1 by showing |E| c (1 
+ E)|[t3,ep,x)| > |[t1,ep,x)| + 1. Since OPT has 1 speed, this will show that OPT cannot complete these 
broadcasts on the interval [t1,ep,x). This contradiction will imply that T3 = Ø. See Figure 4.  Figure 
4: For an event Ep,x in T3, during [t1,ep,x) OPT must make a unique broadcast for most events which end 
during [t3,ep,x). Recall that by Lemma 3.4, for any Eq,y .E, the optimal solution must broadcast page 
q on the interval [tqß(eq,y),eq,y) because Eq,y is non-self-chargeable. Fur­ther, note that such broadcasts 
are unique to Eq,y, i.e. ' not contained in Eq,y: for any y = y because Eq,y: and Eq,y are disjoint by 
de.nition. For any Eq,y .E, if we show that tß(eq,y) . [t1,ep,x) then we will know that q OPT performs 
these broadcasts on [t1,ep,x). This is where Rule 1 will play a crucial role in our analysis. We will 
.rst show that tß(t) = t1 for all times t . [t3,ep,x). p By de.nition, if page q was scheduled by Rule 
1 and page p was in Q(t) then tß(t) = t ß(t). Hence, for any pq Eq,y .E we will have that t1 = tpß(eq,y) 
= tqß (eq,y) and OPT broadcasts page q on [t1,ep,x). Lemma 3.12. For the event Ep,x . T3, at any time 
t . [t3,ep,x), tpß(t) = t1. Proof. For the sake of contradiction assume that tß(t) <t1. Let t ' = t ß(t). 
Note that t ' <t1 = t2 <t< pp  ep,x. Let S[t1,ep,x), S(t2,ep,x) and S[t1,t2] be the set of re­quests 
which arrive for page p on the intervals [t1,ep,x), (t2,ep,x), and[t1,t2], respectively. By de.nition 
of t1 and t2, we have F (S[t1,ep,x)) >ß( 10 (i + 1) + 1)Fp,x and E )) = ß( 10 F (S(t2,ep,xE i + 1)Fp,x. 
Hence, (3.5) F (S[t1,t2])= F (S[t1,ep,x)) - F (S(t2,ep,x)) 10 > ßFp,x. E By the de.nition of t ' = t 
ß(t), we have F (S(t:,t2],t) = p F (S(t:,t],t) = ßFp(t) = ßFp,x. Since t = t2 + E (ep,x -t2), 9 E by 
Lemma 3.6, F (S(t:,t2],ep,x) = F (S(t:,t2],t). Thus 9 we have, 9 (3.6) F (S(t:,t2])= F (S(t:,t2],ep,x) 
= F (S(t:,t2],t) E 9 = ßFp,x. E Knowing that F (S(t:,t2]) = F (S[t1,t2]), this is a contra­diction to 
(3.5). Finally we are ready to show that T3 = Ø. This lemma follows by using the previous lemma and 
count­ing the number of broadcasts the optimal solution must do on the interval [t1,ep,x). It is in the 
next lemma that we rely strongly on resource augmentation. Lemma 3.13. It must be the case that T3 = 
Ø. Proof. Recall that E is the set of all the non-self­chargeable events ending during [t3,ep,x) which 
were scheduled by Rule 1 when page p was in Q. We 34 .rst show |E| >s(1 - E)(ep,x - t2) by a simple 100 
counting argument. We know that at least ls(1 - E )(ep,x - t2)J events end during [t3,ep,x) by de.nition 
9 of t3 and t2. Among these events we know that at most as(ep,x -t2) events are self-chargeable, since 
Ep,x .N2; - t2)l/l10 Es 101 at most Is(ep,x J +1 = (ep,x - t2) E 900 broadcasts are scheduled by Rule 
2, since our algorithm performs according to Rule 2 every l10 J broadcasts E (the inequality is due to 
Lemma 3.5); and at most Es (ep,x - t2) events were scheduled when p is not in 10 the queue Q, since Ep,x 
./T1. By subtracting these ' numbers from the number of events ending during I p,x - t2) = 10000 and 
knowing that (ep,x E2 by Lemma 3.5, we have 34 (3.7) (1 - E)(1 + E)(ep,x - t2) = |E|. 100 E Knowing 
that t2 - t1 < (ep,x - t2), we have 10 E (3.8) |[t1,ep,x]| < (1+ )(ep,x - t2). 10 As discussed previously, 
Lemma 3.12 implies that OPT must make a unique broadcast for each event in E during [t1,ep,x). Since 
the optimal solution has 1 speed, with Lemma 3.5, it must be the case that E (3.9) |E| = |[t1,ep,x)| 
+1 = (1+ )|[t1,ep,x)|. 10000 By combining (3.7), (3.8), and (3.9), we have that E (1- 34 E)(1+E) < (1+ 
E )(1+ ). For any 0 <E = 1 100 10 10000 this is not true, so we obtain a contradiction. This competes 
our analysis. By lemmas 3.8, 3.11 85 and 3.13 we have that F (N2) = LA-W1+E. The 100 proof of Theorem 
3.1 follows easily by combining this and lemmas 3.2 and 3.3. 4 Conclusion In this paper we have given 
the .rst (1 + E)-speed O(1)-competitive algorithm for the objective of min­imizing the total .owtime 
in broadcast scheduling with unit sized pages. It is still open if there exists a O(1)-competitive algorithm 
with (1 + E)-speed for varying sized pages. It is also important to note that the algorithm LA-W is parameterized 
by E. It would be interesting to show a (1 + E)-speed O(1)-competitive algorithm which scales with E 
without knowledge of E. It would be worth exploring a simpler algorithm with better competitive ratio. 
Acknowledgements: We thank Chandra Chekuri for many helpful discussions and his encouragement. References 
<RefA>[1] S. Acharya, M. Franklin, and S. Zdonik. Dissemination-based data delivery using broad­cast disks. 
Personal Communications, IEEE [see also IEEE Wireless Communications], 2(6):50 60, Dec 1995. [2] Demet 
Aksoy and Michael J. Franklin. rxw: A scheduling approach for large-scale on-demand data broadcast. IEEE/ACM 
Trans. Netw., 7(6):846 860, 1999. [3] Nikhil Bansal, Moses Charikar, Sanjeev Khanna, and Joseph (Se.) 
Naor. Approximating the average re­sponse time in broadcast scheduling. In SODA 05: Proceedings of the 
sixteenth annual ACM-SIAM sym­posium on Discrete algorithms, pages 215 221, 2005. [4] Nikhil Bansal, 
Don Coppersmith, and Maxim Sviri­denko. Improved approximation algorithms for broad­cast scheduling. 
In SODA 06: Proceedings of the sev­enteenth annual ACM-SIAM symposium on Discrete algorithm, pages 344 
353, 2006.  [5] Amotz Bar-Noy, Randeep Bhatia, Joseph (Se.) Naor, and Baruch Schieber. Minimizing service 
and opera­tion costs of periodic scheduling. Math. Oper. Res., 27(3):518 544, 2002. [6] Yair Bartal and 
S. Muthukrishnan. Minimizing max­imum response time in scheduling broadcasts. In SODA 00: Proceedings 
of the eleventh annual ACM-SIAM symposium on Discrete algorithms, pages 558 559, 2000. [7] Luca Becchetti, 
Stefano Leonardi, Alberto Marchetti-Spaccamela, and Kirk Pruhs. Online weighted .ow time and deadline 
scheduling. J. Discrete Algorithms, 4(3):339 352, 2006. [8] Wun-Tat Chan, Tak Wah Lam, Hing-Fung Ting, 
and Prudence W. H. Wong. New results on on-demand broadcasting with deadline via job scheduling with 
cancellation. In Kyung-Yong Chwa and J. Ian Munro, editors, COCOON, volume 3106 of Lecture Notes in Computer 
Science, pages 210 218, 2004. [9] Jessica Chang, Thomas Erlebach, Renars Gailis, and Samir Khuller. Broadcast 
scheduling: algorithms and complexity. In SODA 08: Proceedings of the nineteenth annual ACM-SIAM symposium 
on Discrete algorithms, pages 473 482. Society for Industrial and Applied Mathematics, 2008. [10] Moses 
Charikar and Samir Khuller. A robust max­imum completion time measure for scheduling. In SODA 06: Proceedings 
of the seventeenth annual ACM-SIAM symposium on Discrete algorithm, pages 324 333, 2006. [11] Chandra 
Chekuri, Sungjin Im, and Benjamin Moseley. Longest wait .rst for broadcast scheduling. CoRR, abs/0906.2395, 
2009. [12] Chandra Chekuri, Sungjin Im, and Benjamin Moseley. Minimizing maximum response time and delay 
factor in broadcasting scheduling. In ESA 09: Proceedings of the seventeenth annual European symposium 
on algorithms (to appear), 2009. [13] Chandra Chekuri and Benjamin Moseley. Online scheduling to minimize 
the maximum delay factor. In SODA 09: Proceedings of the Nineteenth An­nual ACM -SIAM Symposium on Discrete 
Algorithms, pages 1116 1125, Philadelphia, PA, USA, 2009. Society for Industrial and Applied Mathematics. 
[14] Marek Chrobak, Christoph D¨urr, Wojciech Jawor, Lukasz Kowalik, and Maciej Kurowski. A note on scheduling 
equal-length jobs to maximize throughput. J. of Scheduling, 9(1):71 73, 2006. [15] R. K. Deb. Optimal 
control of bulk queues with com­pound poisson arrivals and batch service. Opsearch., 21:227 245, 1984. 
[16] R. K. Deb and R. F. Serfozo. Optimal control of batch service queues. Adv. Appl. Prob., 5:340 361, 
1973. [17] Je. Edmonds. Scheduling in the dark. Theor. Comput. Sci., 235(1):109 141, 2000. [18] Je. Edmonds 
and Kirk Pruhs. Multicast pull schedul­ing: When fairness is .ne. Algorithmica, 36(3):315 330, 2003. 
[19] Je. Edmonds and Kirk Pruhs. A maiden analysis of longest wait .rst. ACM Trans. Algorithms, 1(1):14 
32, 2005. [20] Je. Edmonds and Kirk Pruhs. Scalably scheduling processes with arbitrary speedup curves. 
In SODA 09: Proceedings of the Nineteenth Annual ACM -SIAM Symposium on Discrete Algorithms, pages 685 
692, Philadelphia, PA, USA, 2009. Society for Industrial and Applied Mathematics. [21] Thomas Erlebach 
and Alexander Hall. Np-hardness of broadcast scheduling and inapproximability of single­source unsplittable 
min-cost .ow. In SODA 02: Pro­ceedings of the thirteenth annual ACM-SIAM sympo­sium on Discrete algorithms, 
pages 194 202, 2002. [22] Rajiv Gandhi, Samir Khuller, Yoo-Ah Kim, and Yung-Chun (Justin) Wan. Algorithms 
for minimizing re­sponse time in broadcast scheduling. Algorithmica, 38(4):597 608, 2004. [23] Rajiv 
Gandhi, Samir Khuller, Srinivasan Parthasarathy, and Aravind Srinivasan. Depen­dent rounding in bipartite 
graphs. In FOCS 02: Proceedings of the 43rd Symposium on Foundations of Computer Science, pages 323 332, 
2002. [24] Rajiv Gandhi, Samir Khuller, Srinivasan Parthasarathy, and Aravind Srinivasan. Depen­dent 
rounding and its applications to approximation algorithms. J. ACM, 53(3):324 360, 2006. [25] Alexander 
Hall and Hanjo T¨aubig. Comparing push­and pull-based broadcasting. or: Would microsoft watches pro.t 
from a transmitter?. In Proceedings of the 2nd International Workshop on Experimental and E.cient Algorithms 
(WEA 03), pages 148 164, 2003. [26] Bala Kalyanasundaram and Kirk Pruhs. Speed is as powerful as clairvoyance. 
J. ACM, 47(4):617 643, 2000. [27] Bala Kalyanasundaram, Kirk Pruhs, and Mahendran Velauthapillai. Scheduling 
broadcasts in wireless net­works. Journal of Scheduling, 4(6):339 354, 2000. [28] Jae-Hoon Kim and Kyung-Yong 
Chwa. Schedul­ing broadcasts with deadlines. Theor. Comput. Sci., 325(3):479 488, 2004. [29] J. Weiss. 
Optimal control of batch service queues with nonlinear waiting costs. Modeling and Simulation, 10:305 
309, 1979. [30] J. Weiss and S. Pliska. Optimal policies for batch service queueing systems. Opsearch, 
19(1):12 22, 1982. [31] J. Wong. Broadcast delivery. Proceedings of the IEEE, 76(12):1566 1577, 1988. 
[32] Feifeng Zheng, Stanley P. Y. Fung, Wun-Tat Chan, Francis Y. L. Chin, Chung Keung Poon, and Prudence 
W. H. Wong. Improved on-line broadcast scheduling with deadlines. In Danny Z. Chen and D. T. Lee, editors, 
COCOON, volume 4112 of Lecture Notes in Computer Science, pages 320 329, 2006. </RefA> A Proof of Lemma 3.6 
 Here we prove Lemma 3.6. The proof of this lemma relies on a generalization of Hall s theorem. This 
generalization of Hall s theorem was implicitly used in [19], and later formalized in [11]. Definition 
A.1. [11][g-covering] Let G =(X . Y, E) be a bipartite graph whose two parts are X and Y , respectively. 
Let £ : E . [0, 1]. We say {£u,v} is a g-covering if L£u,v =1 and L£u,v = g. v.Yu.X The following lemma 
follows easily from either Hall s Theorem or the Max-Flow Min-Cut Theorem. Lemma A.2. [11][Fractional 
Hall s theorem] Let G = (V = X . Y, E) be a bipartite graph whose two parts are X and Y , respectively. 
For a subset S of X, let NG(S)= {v . Y | uv . E, u . S}, be the neighborhood of S. For every S . X, if 
|NG(S)|= 1 |S|, then there g exists a g-covering for X. Now we are ready to prove Lemma 3.6. Proof of 
[Lemma 3.6] We start by creating a bipartite graph G =(X . Y, E). There is one vertex up,x . X for each 
event Ep,x .A and there is a vertex vq,y . Y for each event in Eq,y .B. Let up,x . X and vq,y . Y . There 
is an edge connecting up,x and vq,y if and only if Eq,y .Bp,x. For any set Z . X, let I(Z) be the set 
of intervals corresponding to events in Z, i.e. I(Z)= { Ip,x | up,x . Z}. We let I(Z) denote the union 
of intervals in I(Z). We denote the sum of length of maximal subintervals in I(Z) by | I(Z)|. We will 
now show that G has a (( 2 )( d+1 ))-covering for X. .µ d Consider any .xed set Z . X. Notice that d 
+1 (1.10) .|Z|= | I(Z)|. d This is because the optimal solution must perform . unique broadcasts for 
each event in Z during I(Z), the optimal solution has 1 speed, and there are at most d+1 | I(Z)| integral 
time steps during I(Z) where d OPT can broadcast. From now on, for simplicity, we assume that I(Z) is 
one continuous interval; otherwise our argument can be applied to each maximal subinterval in I(Z). Let 
' I .I(Z) be such that for any two intervals Ip,x,Iq,y . ' I it is the case that Ip,x is not completely 
contained in ' Iq,y, and also I = I(Z). By de.nition, (1.11) | I ' | = | I(Z)|. ' We order all intervals 
in I in the increasing order ' of starting points. We pick intervals from I one by one and label them 
by the order they are picked; the ith selected interval is denoted by Ii. Starting with I1, we pick Ii+1 
so that Ii+1 the least overlaps with Ii; here we will say Ii+1 overlaps with Ii even when Ii+1 '' starts 
exactly where Ii ends. Let I and I be the odd even odd indexed and even indexed intervals, respectively. 
'' WLOG, assume that | I |=| I|. Since oddeven '' ' I and I are a partition of I , we know that odd 
even '' | I| + | I |=| I ' |. Thus we have oddeven 1 ' (1.12) | Iodd|= | I ' |. 2 Let NG(Z) be the 
neighborhood of Z. We now show ' that |NG(Z)|= µ| I|. Note that up,x, correspond­ odd ' ing to Ip,x 
in I , has at least µ|Ip,x| neighbors. Also odd ' note that all intervals in I are disjoint by construc­ 
odd ' tion of I Hence, by summing up all neighbors of odd. ' vertices corresponding to intervals in I 
, we have odd ' (1.13) |NG(Z)|= µ| Iodd|. From (1.10), (1.11), (1.12) and (1.13), We have d |NG(Z)|= 
( .µ )( )|Z| and G has a (( 2 )( d+1 ))­ 2 d+1 .µ d covering using Lemma A.2. Let £ be such a covering. 
F (A)= L Fp,x up,x.X = L £up,xvq,y Fp,x up,xvq,y.E [By de.nition of the covering] Fq,y L = £up,xvq,y 
. up,xvq,y.E [By Fq,y = .Fp,x] 2 d +1 = ()( ) L Fq,y ..µ d vq,y.Y [Change order of the summation and 
£ is a (( 2 )( d+1 ))-covering] .µ d 2 d +1 =()( )F (B) ..µ d [Since Y is the set of vertices corresponding 
to events in B] 2 d +1 = ()( )LA-W1+E ..µ d [Since B is a subset of all events] D B Omitted Proofs Proof 
of [Lemma 3.3] We apply Lemma 3.6 using the notation given in the lemma. Let A be the set of all  N1 
events. Consider any event Ep,x .A. Let Ip,x = [tp.(ep,x),ep,x) for some .xed ß = . = ß( 10 (I1000cl 
+ E 2) + 1) such that at least Ias(ep,x - t .(ep,x))l self­chargeable events end on Ip,x. Note that . 
exists by de.nition of N1 events. By Lemma 3.4, the optimal solution must broadcast page p during Ip,x. 
Due to this 10000 we set . = 1. Since |Ip,x|= by Lemma 3.5, we E2 have d = minEp,x.A |Ip,x|= 10000 . 
E2 Let Bp,x be the self-chargeable events ending dur­ ' ing Ip,x =[tp.(ep,x)+ a (ep,x - tp.(ep,x)),ep,x). 
Note 2 that there are at most Ias |Ip,x|l events ending during 2 ' Ip,x \ I . Therefore there exist at 
least Ias|Ip,x|l - p,xIas |Ip,x|l = las |Ip,x|J = as |Ip,x| self-chargeable events 2 24 ' ending during 
I . Hence, |Bp,x|= as | and we can p,x4 |Ip,xas set µ =. 4 Let Eq,y .Bp,x. By Lemma 3.1 and the de.nition 
 ' of tp.(ep,x) we know that at anytime t . Ip,x it is the a case that Fp,x(t) = (1 - .)Fp,x. Since our 
algorithm 2 ' chose to broadcast page q at time ep,x . I over page p,xa p, we have Fq,y = (1 - .)Fp,x. 
Therefore we can set 2c a . = (1 - .). 2c In sum, by Lemma 3.6, F (N1) = 2 ..µ d + 1 d F (S) = ( 16c 
a2s )( 1 1 - . ) d + 1 d (.OPT) = O( 1 E11 )OPT. D Proof of [Lemma 3.4] For the sake of contradiction 
assume the lemma is false. The event Ep,x is non-self­chargeable therefore the optimal solution must 
broad­cast page p at some time during (bp,x,tpß(ep,x)). Let t be the latest broadcasting time of page 
p by the op­timal solution during (bp,x,tpß(ep,x)). Let S[bp,x,t] and S(t,ep,x) be the set of requests 
for page p which arrive during [bp,x,t] and (t, ep,x), respectively. We know that F (S[bp,x,t]) < (1 
- ß)Fp,x by de.nition of tpß(ep,x) and t<tpß(ep,x). Thus F (S(t,ep,x))= F (Rp,x \ S[bp,x,t]) > ßFp,x. 
Since the optimal solution does not broad­ * cast page p during (t, ep,x), it follows that F = p,x F 
*(S(t,ep,x)) > ßFp,x = . 1 Fp,x, which is a contradiction to Ep,x being a non-self-chargeable event. 
D Proof of [Lemma 3.5] For the sake of contradiction, assume that there exists a non-self-chargeable 
event 10000 Ep,x such that |[tpß (ep,x),ep,x]| < E2 . Let S be the set of requests for page p which arrive 
on the interval [t ß(ep,x),ep,x). By de.nition of tß(ep,x) it must be the pp case that F (S) > ßFp,x. 
We now want to bound the number of requests in S. Since each request in S can 10000 accumulate .ow time 
at most |[tpß(ep,x),ep,x]| < E2 , we have that F (S) < |S|10000 , thus ßFp,x < |S|10000 . E2 E2 E2 Hence 
we have that |S| > ßFp,x. The optimal 10000 solution must accumulate at least |S| .owtime for the E2 
* requests in S, therefore F =|S| > ßFp,x = p,x 10000 1 Fp,x. This is a contradiction to Ep,x being 
non-self­ . chargeable. D  
			
