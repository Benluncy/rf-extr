
 An Only Undergraduate Course in Object-Oriented Technology Martin Osborne and JamesL. Johnson Western 
Washington University Introduction The purported advantages of an object-oriented approach to software 
development are widely documented. From an educational standpoint, one of the most usefid benefits is 
that the model of cooperating objects is intuitively close to human experience and expectation. Object-Oriented 
Technology (OOT) also offers a fresh perspective on the long-sought grail of software reuse, and it encourages 
a development trajectory in which upper level abstractions must be properly addressed before detailed 
implementation is broached. Of course, some experience with the method places these promises into a realistic 
context, and reveals that there is still no mechanical path to good software design. Many decisions remain 
informed judgments based primarily on previous contact with similar situations. Nevertheless, in the 
judgement of the authors, 00T provides a superior organizational framework for managing the complexity 
of the software development process. Despite this promise, computer science departments have been reluetant 
to integrate 00T into their curricula in any substantive role. In their defense, we note that a certain 
level of inertia is appropriate for curriculum revision because the consequences are siguitlcant for 
a large number of students. Western Washington University (WWU) maybe properly counted among the cautious. 
In our department a few faculty are enthusiastic about the promise of 00T, but support is lacking for 
any initiative which would raise 00T to a fimdamental role in the teaching of software design. Hence, 
as is the case with other peripheral or tentative topics, one elective course is made available for students 
who choose to become involved with 00T. This paper presents our thoughts on how to use a single course 
window of opportunity to expose the central themes of 00T. It is likely that many schools find themselves 
in situations similar to our own. We hope that our comments will prove useiid to them. Permission to 
copy without fee all or part of this material is granted provided that the copies are not made or distributed 
for direct commercial advantage, the ACM copyright notice and the title of the publication and its date 
appear, and notice is given that copying is by permission of the Association for Computing Machinery. 
To copy otherwise, or to republish, requires a fee andlor specific permission. ACM-24 thCSE-2/93-lN, 
USA @1993 ACM 0-89791-566-6/93/0002/0101 ...$1.50 We will first consider the choices forced by the time 
constraints and by the backgrounds of the students. Then, a brief outline of the course will be followed 
by some discussion of the problems encountered as we experimented with various presentation techniques 
over the past several years, The reader is referred to 0sbome[4] for a detailed account of the overall 
rol[e which 00T should play in the computer scienc~ undergraduate curriculum. Hard Choices One of the 
first choices must be the selection of a suitable programming language. It is important ito realize, 
and to impress upon students, that OOT is much more than yet another programming syntax. Smalltal!k is 
to OOT as a wordprocessor is to Shakespeme. Nevertheless there must be some concrete vehicle for discussing 
the abstract concepts, Verbal explanations about the behavior of hypothetical objects simply do not carry 
the same pedagogical value as hands-on experience with the tools of the trade. As this course is to be 
a self-contained entity, there can be no assumption that the students are familiar with objeetaientcd 
programming. Therefore, we reluctantly concede that more than one-half of the course must be devoted 
to teaching the rudiments of an object-oriented programming language, Any school proposing an only course 
in 00T wound have to face the hard reality of spending a large porticm of the available time on programming 
topics, At WWU several other issues also intluence the choice of a proper language. We position the course 
after the introductory offerings, allowing us to assume student familiarity with a bloclc­structured 
procedural language (Modula-2 or Pascal). While the object-oriented approach has little in cormncm with 
the mode of thinking encouraged by the proceduml languages, the student will nevertheless be familiar 
wilb the editors, operating systems, and debugging methods which must be taught in the first course. 
A further consideration is that the procedural language training of the students will have been pursued 
in a systematic manner, extending eventually to all of the features of that language. This approach is 
necessary because the language will be used for many succeeding courses. In choosing a language for the 
GOT course we have the luxury of choosing some revealing subset of its features, without the burden of 
preparing the student for a variety of subsequent courses. The major contenders are hybrid languages, 
such as C++ and TurboPascal, and the pure object-oriented languages, such as Smalltalk and Actor. Hybrid 
languages have the advantage that they seem familiar. If one already knows C, then how much harder can 
it be to learn C++? The answer is not very, but the wrong question is being asked. The real issue should 
be if one knows the procedural programming paradigm, then how much harder can it be to learn the object-oriented 
model? The answer is plenty. Learning to program using the object-oriented approach is not primarily 
about learning some new syntax. It is really about learning to think in a completely new way, and these 
new thought processescan be established most quickly by immersing oneself in a pure object-oriented language. 
Moreover, in our case, the students will not yet know C. At some later stage in their development, the 
transition from the relatively safe terrain of Pascal to the slippery slopes of C would present little 
ditllcuky. But without the mature appreciation of pointers engendered by several more quarters of programming, 
they could not be expected to be cotiortable with C. Consequently, Smalltalk was chosen as the language 
vehicle for the course. In addition to being the most well-known of the pure object-oriented languages, 
Smalltalk has the advantages of a simple, though unusual, syntax, and a powerfid development environment. 
Furthermore, because Smalltalk is untyped, it relieves the programmer of the burder of composing declarative 
code. Because of its widespread popularity, there is some regret that C++ is not a more appropriate vehicle. 
However, C++ is a complex language to learn in comparison with Smalltalk. With C++ the course could easily 
get mired down in syntactic and semantic ditKculties. And, precisely because of its popularity, it is 
likely that a student who becomes enthusiastic about GOT will learn C++ on his own at some later time. 
From among the commercially available Smalltalk implementations, Digitalk s version was chosen for several 
reasons. Digitalk has reasonable rates for site licenses. The manual is complete, well written and tiordable, 
and, having many 286/386 based PC laboratories on campus, WWU meets Digitalk s hardware requirements, 
Within Digitalk s product line, Srnalltalk V/Windows was chosen over Smalltalk V/286 because it provides 
the opportunity for the student to work with a modem graphical user interface (GUI). GUI is actually 
an orthogonal technology to GOT, so there might be some question of overkill by attempting to manage 
both of them in the same course. However, in addition to neglecting GOT, our curriculum also gives very 
limited exposure to GUI concepts. So a further need is addressed by including GUI capability. Moreover, 
a windowing environment adds a certain excitement and an increased measure of entertainment to the programming 
process. Having conceded a large portion of the available time to acquiring some facility with the Srnalltalk 
language, a second dMcult decision must then be taken concerning the extent of exploration into the library 
of classes and methods. Much of the power of GOT, and of Smalltalk in particular, derives from the ready 
availability of predefine classes of varying levels of generality which may be adapted to specific uses 
within an application. However, a fill term, devoted exclusively to the library resources, could not 
exhaustively demonstrate the available fkatures and their interlocking relationships. Hence some appropriate 
subset must be selected as exemplary of the capabilities inherent in the library. As the library constitutes 
the equivalent of the native data types of a prmedural language, this decision is tantamount to abbreviating 
the language itself. Our compromise in the matter is as follows. The students are introduced to a limited 
yet powerful subset of the library (see course outline section below). Then, when making laboratory assignments, 
the instructor includes a list of the standard classes and methods, beyond the introductory material, 
which are needed to solve the problem. Attention is thus fased on the new problem­specitic classesand 
methods which need to be created to complete the assignment. This latter activity is, after all, the 
heart of object-oriented analysis and design. The final choice which needs to be exercised is the selection 
of appropriate material to illustrate GOT in the context of software development. Object-oriented analysis 
(OOA) and object-oriented design (GOD) are the significant components of GOT. It is with these methods 
that the aforementioned benefits of GOT are to be realized. Software development is, above all, an issue 
of management. Management of resources, management of complexity, and management of communication are 
some of its many facets. Combinatorial explosions, a bewilderment of special cases, temporal ordering 
of processes, levels of generality and code re-nse, packaging of sub­components. In these details lies 
the devil. Bringing control of these details within the compass of a human mind is the true challenge 
of soflware engineering. In this spirit, the primary objective of a course in GOT, particularly if the 
course is to constitute the student s sole exposure to the topic, should be to instill an appreciation 
for the organizational power inherent in the methodology. Following the text by Rumbaugh et. al.[5], 
the following topics should receive due emphasis. Graphical not&#38;ion for capturing (1) the static 
relationships among objects, (2) the dynamic evolution of states within objects, and (3) the flow and 
functional transformation of data among objects. . Analysis of the application specification to determine 
the appropriate classes and relationships to be used in the abstract model.  Design of the communications 
protocols among the classes which will support the required functionality.  Implementation of the design 
in a suitable language.  Full development of a reasonably-sized application.  Clearly this agenda is 
ambitious, even for a term which has not been emasculated by the need to learn the basics of a programming 
language. However, some etliciency can be obtained by using Rumbaugh s graphical notation as part of 
the explanatory material related to the language phase of the course. Another opportunity for abbreviation 
arises from the interplay between intuition and formal procedure in the GOT strategy. Much of the analysis 
and design activity consists of certain mechanical checks to guide the intuition. For example, nouns 
appearing in the application speciilcation are likely candidates for objects, while verbs may designate 
associations among the objects or state transitions within an object. Such guidelines are intended, to 
the extent possible, to turn the art of analysis and design into the science of analysis and design. 
Successin this endeavor will follow, more or less, to the measure that the rules buttress native intuition 
about the application. Hence, while some elaboration of the guidelines is worthwhile, it should s@lce 
for the student to retain the notion of mapping intuitive object entities within the application to their 
equivalents within the model. This approach, i.e. concentrating on the correspondence between application 
object and model object, will permit the essential flavor of GOT to be appreciated by the student, and 
at the same time, it will make him aware that there is a wide range of available techniques which may 
be used to facilitate the process. Given the schedule, it is not possible to implement an application 
of an interesting size. The compromise taken in this regard is to have the student practice implementation 
techniques in connection with language acquisition skills through a series of graded exercises. The development 
of an application through the point of the graphical documents is undertaken as a final project, in lieu 
of a final exam. Outline of the Course In light of the goals and compromises noted above, the authors 
know of no suitable textbooks for this course, not even for the programming portion of it. Consequently, 
it is taught from a set of class notes, the contents of which borrow heavily from materials developed 
by Wilf Lalonde and John Pugh at Carleton University[3], Concepts of Object-Oriented Programming by Smith[6], 
and Digitalk s Tutorial and Programming Handbook[l]. The course can be taught at either the lower or 
upper undergraduate level. There are advantages and disadvantages to each choice. When taught at the 
lower level, the disadvantage is that the course must proceed more slowly, which is achieved by assigning 
simpler programs and exploring the material in less depth. The advantage is that the students will have 
more time to work with the material on their own before graduating. Hopefully, they will choose object-oriented 
languages to complete assignments in other classes when given the opportunity to do so. Similarly, they 
maybe encouraged to experiment fi.uther with graphical interfaces in subsequentclasses. Also, there will 
be more time for the GOT enthusiasts among them to transfer their appreciation to other students. A complementary 
set c~f advantages and disadvantages is associated with teaching the material at a higher level. While 
the concepts can be explored at a greater depth, there will be less opportunity for the students to practice 
their newly found skills before graduating. An additional advantage of teaching the material as an upper 
level course is that the more mature students are better prepared to survive shortcomings in pedagogy. 
Much more care is required with lower division students. They do not yet have the maturity to work through 
gaps and rough spots in the presentation on their own. They make more programming mistakes and experience 
much greater furstration trying to find them. Our opinion is that until the presentation of the material 
has been perfkcted, the course will be more effective when taught to higher level students WWU being 
on the quarter system, the course must be contained within ten weeks, allowing approximately thirty hours 
of lecture.. The time is apportioned as follows: sevenweeks on programming,  two seekson analysis and 
design, and  one week on other 00 languages and on the overall importance of GOT. The programming portion 
consists of an introductory explanation of the object-oriented paradigm (classes, objects, messages),followed 
by an abbreviated exposure to the libr~, essentially the number, character, boolean, and collection classes. 
Messages associated with flow of control are illustrated, allowing the stndem totouch base with the familiar 
branching and iteration structures from his procedural programming background. Finally, special classes 
and methods associated with the GUI are explored. Care must be taken at this juncture, as one could easily 
spend the balance of the term on the graphical interface. An application, a simple telephone book example, 
suflices to introduce examples of the windows and panes which will be needed in future assignments. 
Two weeks for analysis and design seems ridiculously short, but in addition to being a forced constraint 
following from the necessity to teach the programming language, some telescoping of the material can 
be accomplished by using the appropriate modeling and design diagrams during the language phase. Examples 
of applications which can be used to illustrate GOT development include a simplified airline resewation 
system (borrowed from Carleton), and a university student registration process. In general, an appropriate 
application will exhibit easily identifiable real-world objects, e.g. pilots, flights, passengers, schedules, 
which behave according to expectation. We would not want to use an application where some effort is required 
to identfi the underlying entities. This latter activity would lead to the equivalent of normalization 
operations as practiced in database design. There is no time for such an excursion. The course is graded 
pass/fail. There are no exams during the quarter. In place of a final exam, the students prepare a design 
project. This activity is pursued through the construction of the object model, the state transition 
graph which captures the dynamic behavior of the interacting objects, and the flow diagrams which detail 
the flow of information through the system. Actual implementation under Smalltalk is not required. Assessment 
of the Experience The graphical interface of Smalltalk V/Windows presents both an opportunity and a problem. 
As mentioned earlier, the GUI is peripheral to the central concepts of GOT, and it is included because 
of its potential for enriching the student s programming experience. On balance, we feel that it should 
be retained, as it provides a level of motivation for the student which is impossible to achieve with 
a vanilla command line interface. However, some precautions must be taken to ensure that the GUI does 
not consume an inordinate amount of class time. It is difticnlt to decide how much of the GUI to teach 
the students. The classeswhich control windows and panes are complex to use and take weeks to explain 
adequately to the point where students can use them with confidence. It is tempting to skip them, but 
doing so means that programs must use prompters and menus for input and must write to the transcript 
window or use notifiers for output. Students form a very pm impression of the power of the object-oriented 
approach when they must write programs with such a limited user interface. The compromise taken was to 
show students how to usethe windowing classesbut not in great detail. They get to the point where they 
can understand code which uses windows and panes, but they are not expected to be able to write it. Problems 
which involve the use of windows and panes naturally break down into two communicating parts: an interface 
class and classes which model the application. On laboratory assignments involving this sort of problem, 
the instructor supplies the skeleton of the interface class. Someone familiar with the excellent manual 
which accompanies Smalltalk V/Windows might wonder about its value as a textbook for the course. While 
we have used the manual as a textbook in earlier versions of the course, we conclude that, for the students 
which we have encountered, it is not suitable. The manual begins with a Ixvelve chapter tutorial which 
one might reasonably expect to be a good substitute for a textbook. However, the goal of the tutorials 
seems to be to introduce the reader to as many classes and methods as possible, rather then to teach 
the concepts of object-oriented programming. Most students get hopelessly confused by the bewildering 
number of classes and methods. They form the mistaken impression that every new task requires searching 
in the library of classesfor heretofore unknown classes and methods. This criticism is not meant to imply 
that the tutorials are badly presented. On the contrary, after mastering the progrdng concepts in a more 
limited context, students can profitably return to the tutorials to gain more extensive familiarity with 
the class library. Another potential problem is the Smalkalk V/Windows debugger. With sufficient experience 
the debugger can be seen as a powerfid and helpful tool. However, students new to the GUI protocols find 
it frustrating. It appears that the best approach to this problem is to show the students numerous examples 
of errors and how to use the debugger to detect them. Achieving a comfort level with the debugger is 
a matter of practice. A final minor problem is concerned with removing instances from classes. If instances 
of a class exist, then instance variables may not be added to or removed from the class definition. Students 
have problems with this constraint. When attempting to modi&#38; the list of instance variables within 
a class, the student is informed by the error notifier that instances exist. The student has no idea 
where the instances reside, or how to remove them. Fortunately it is easy to add an instance method to 
class Class which can remove instances of a specified class. The course has been offered twice in the 
past, and will be presented again in the coming academic year. Some reflections on these past experiences 
follow. The first offering used the Digitalk manual as a textbook. The tutorials were followed quite 
closely, supplemented with some materiat to help the students understand the GUI. We explored graph panes 
to some degree and introduced a primitive but eff&#38;tive method for implementing constrained data entry 
screens. A text pane used in the normal manner is not very suitable becauseit allows the entry of arbitrary 
text. A data entry form, on the other hand, imposes structure and control on the incoming data, e.g. 
a salary field rejects the en~ of an alphabetic character. By the conclusion of the quarter, most students 
could create software which used components of the GUI beyond rote imitation of the examples in the book. 
As a programming class, the course succeeded rather well. The students had a fairly good grasp of a major 
portion of the class library, and they were reasonably effkctive at finding new features which could 
be adapted to the application at hand. We attribute this success to hvo factors: a great deal of class 
time was spent reitiorcing what the students were learning in the tutorials, and, somewhat accidentally, 
most of students had progressed through the data structures courses which are subsequent to the introductory 
programming experience. Later we concluded that the course had failed in an important sense. The students 
developed no meaningfid facility for object-oriented software design. Even when they wrote fairly complex 
programs for their final project, they developed no new classes other than the interface class. The full 
complexity of a program was contained in this class, with no attempt to factor the solution into cooperating 
objects, each of which embodied portions of the overall behavior of the system. There were, of course, 
many methods in the interface class, and many messages addressed to self . The students were, in effect, 
programming in the same manner as they would have done in Pascal. The decomposition of a problem was 
procedural rather than object-oriented. They enjoyed the experience. They learned a new programming language 
with a strange syntax. They appreciated the power of the library and the excitement of a GUI. But they 
learned little about object-oriented sotlware development. In the second version of the course, we made 
a different set of mistakes. More class time was spent on the basic concepts of object-oriented programming, 
and problems were investigated whose solutions were realized through systems of cooperating objects. 
Only the first six tutorials from the Digitalk manual were assigned, although, of course, the students 
were encouraged to explore finther. Less of the GUI material was presented, and the instructor assumed 
the burden of providing the necessary interface material for the assignments. One immediate problem was 
that the students were less advanced than those who took the first offering. Most had only the bare prerequisite 
of the intmductoly programming course. However, the real mistake was the introduction of abstract concepts 
(inheritance, polymorphism, etc.) before the students had seen thelm in action. The students were frustrated 
by the tension of assimilating the material from the tutorials both as examples of the abstractions and 
as concrete models lto guide their own programming efforts. The next version of the course will not 
use the Digitallk tutorials. A small subset of the class library has beem selected for the working environment. 
The features of Smalltalk will be introduced in a more gradual and controlled manner. In particular, 
abstraction will be presented only after the students have had concrete experience with the underlying 
concepts. The student will solve many trivial but helpfil debugger exercises [at the beginning of the 
course. The class presentations will emphasize decomposition into cooperating, communicating objects. 
All of the GUI interface details will be supplied by the instructor. Hence there will be more emphasis 
on software design throughout the term, although, as before, only two weeks will be formally devoted 
to the topic. An outline of the latest version of the course is available from the authors. Conclusions 
 We have explored some of the concerns associated with the challenge of presenting a meaningful exposure 
lto 00T within the contlnes of a single undergraduate course. The assessmentof the experience has dwelt 
iat some length on the problems encountered. It is clear that proper presentation of the material is 
ditlicult, even under more relaxed circumstances. Despite the many difficulties, we emphasize that the 
experience was a successful one. The students felt that they had learned a new paradigm, and they could 
appreciate, to some extent, its promise for controlling software development costs. Of course, most of 
the students had yet to be confronted with a large project, so their admiration for 00T may be somewhat 
tempered by this lack of experience. We plan to continue to present the material as a sideline course 
until the balance of the faculty gain sutlicient confidence in the methodology to consider 00T for a 
more prominent role in the curriculum. We hope thiat our comments may be of assistance to other faculty 
{at other schools where the level of enlightenment is similarly murky. Bibliography <RefA>1. Digitalk, Inc. 
Smalltalk V7Windows: Tutorial and Programming Handbook, Digitalk Corporation, 9841 Airport Boulevard, 
Los Angeles, CA 90045, 1991. 2. LaLcmde, W. and Pugh, J. Smalltalk as the First Programming Language: 
the Carleton Experience , in Journal of Object-Oriented Programming, NoviDec 1990, vol. 3, no. 4, pp. 
60-65. 3. LaLonde, W. and Pugh, J. Course notes for CS 105 and CS 106 at Carleton University. 4. Osborne, 
Martin. The Role of Object-Oriented Technology in the Undergraduate Computer Science Curriculum , in 
Proceedings of the 00PSLA Conference, Vancouver, B.C., October, 1992. 5. Rurnbaugh J., Blaha M., Premerlani 
W., Eddy F., and Lorensen, W. Object-Oriented Modeling and Design, Prentice-Hall, Englewood Cliffs, NJ, 
1991. 6. SmitlL David N. Concepts of Object-Oriented Programming, McGraw-Hill, 1991.  
			</RefA>
