
 Proceedings of Sixth ACM Symposium on Operating Systems Principles (November 1977) 125-131. ANALYSIS 
OF DEMAND PAGING POLICIES WITH SWAPPED WORKING SETS Dominique Potier IRIA-LABORIA BP 105 78150 Le Chesnay 
 FRANCE The performance improvements brought by demand paging policies with swapped working-sets depend 
on several f=ctors, among which the scheduling policy, the behaviour of the programs running in the system 
and the secondary memory latency characteristics are the more noticeable. We present in this paper a 
modelling approach to quantify the effects of these factors on the performance of a system running with 
a swapped working-sets policy. A preliminary analysis, conducted in the virtual time of the programs, 
shows their influence on the paging behaviour of programs. The results of this analysis are then used 
within a detailed queueing network of a multiprogranmned system. Computationnaly simple expressions for 
the CPU time spent in user state and in supervisor state are obtained for a class of paging policies 
ranging from pure demand paging to demand paging with swapped working-sets. Numerical examples illustrate 
the analysis, and these results are compared with measurements made on a real system running with swapped 
working-sets policies. Key words and Phrases : paging algorithms, demand paging algorithms, working-set 
memory management, swapping, program behaviour, virtual memory, semi-Markov model, queueing network model. 
 CR categories : 4.32, 4.35, 8.1. Introduction. In time-sharing multiprogrammed systems using a nothing 
as it was proved by Mattson et al. [8] and pure demand paging policy a page is loaded into main Aho, 
Denning and Ullman [3]. On the contrary, in memory only after the occurence of a page fault. An systems 
using sequential access secondary memories important part of the page traffic is thus incurred such as 
drums, the average time to load a page will when the working pages of a process are loaded on be reduced 
since preloading a working set may demand at the start of its execution. This effect require only one 
access to the drum rather than as is enhanced by the influence of such factors as the many as pages for 
pure demand paging. scheduling policy and slow input-output requests It remains to analyse and quantify 
these effects which cause the execution of a process to be split according to the environment in which 
the SWS into several memory residence intervals, thus giving policy is implemented. It is the approach 
followed rise to as many initial loading phases. Experimental in this paper. evidence [I] indicates 
that more than fifty percent of the page traffic comes from these page faults The performance analysis 
of demand paging and the results of an analysis on the influence of policies with swapped working-sets 
that we present process loading on the page fault presented in [9] has two startpoints : the analysis 
presented in [9] also points out the importance of this effect. which provides the basic modelling framework 
for our study ; the demand paging policy with swapped An obvious solution to this drawback of a pure 
 working-sets currently implemented in the Edinburgh demand paging memory management policy is to Multi-Access 
system (EMAS) [2]. This policy proved preload the process active pages or working-set to be successful, 
and we shall refer to it in the when the process is reactivated in the multipro- remainder of this 
paper. grammed set. We shall call these policies demand paging policies with swapped working sets or, 
The study of SWS policies that we shall develop more briefly, SWS policies. is based on a simple probabilistic 
model of the paging behaviour of a program. The analysis proceeds The main advantages associated with 
these in two steps. A preliminary analysis conducted in policies are to reduce the number of page faults 
and the virtual time of the programs shows how SWS to generate bulk requests to the secondary memory 
 policies reduce the average page fault rate and (however, the volume of pages moved remains generate 
bulk requests to the secondary memory device. unchanged, and may even increase because of unused These 
results are then used within a multiclass preloaded pages). Since reducing the number of page queueing 
network model of a multiprogrammed system faults has a direct effect'on the amount of supervi- where 
programs are divided into classes according sor time spent in processor switching, a gain is to to 
the number of their pages present in main memory. be expected there. The gains brought by the bulk 
The memory management policy represented in the requests depend on the secondary memory device model 
follows the one implemented on EMAS and the characteristics. Preloading from a device with no latency 
(e.g. core-to-core transfers) would gain paging drum service time characteristics and the overheads 
involved in the different operations are taken into account in detail. Expressions for the Central Processing 
Unit (CPU) time spent in user state and supervisor state are obtained for a class of demand paging policies 
ranging from pure demand paging (PDP) to demand paging with SWS. These results are illustrated by numerical 
examples and compared to the observations made on the EMAS system. Process time analysis. In the context 
of multiprogrammed page on demand computer systems, the execution of a program consists of a sequence 
of memory residence intervals (MRI), the number and the duration of which depend on factors such as the 
I/0 behaviour of the program and the memory management and scheduling policies implemented in the system. 
Within each memory residence interval, the execution is interrupted by page faults, the interval of time 
between two conse~ cutive page-faults depending on the internal behaviour of the program, the paging 
policy and the number of pages of the program present in main memory. Let X(t) be the number of pages 
of a program present in main memory at the instant t of its virtual time. The behaviour of X(t) can be 
described in two steps. We specify in the first place the variations of X(t) within a MRI and then the 
transitions of X(t) between two consecutive MRI's. The first step consists in representing the paging 
behaviour of the program under a page on demand policy ; the second step in describing the swapping policy. 
 The analysis of the process X(t) follows closely the one developped in [9] and we shall recall it briefly. 
It is conducted under the following assumptions : H 0 : the programs executing on the system have identical 
behaviour. H I : the length of the consecutive memory residence intervals are i.d.d, exponential random 
variables with mean T. H 2 : the maximum number M of main memory page frames allocated to a program 
is fixed and, unless otherwise specified, pages are loaded in main memory on a page on demand basis. 
 H 3 : the intervals of time between two consecu- tive page faults of a program are i.i.d. exponential 
random variables with mean qi when i pages of the program are present in main memory. H 4 : the transitions 
between the number i of pages of a program present in main memory at the end of given MRI and the number 
j of pages of the same program in main memory at the beginning of the next MRI are described by a first 
order Markov chain with transition matrix (~ij). Thus (~ij) characterizes the swapping policy implemented 
by the system. The set of states E of the process X(t) is then: E = {1,2,... M}. An example of a realization 
of X(t) is represented in figure I. M unused  PJ//l page frames f//////  X(t) f f ff ff fff ff ff 
ff J \ / ~. .MRIk MRI k+l MRIk+2 Figure 1. Under assumptions Ho-H4, X(t) is a semi-Markov process. Let 
p =(Pij) be its transition matrix which is computed as follows. The probabilityOi that the interruption 
which occurs is a page fault when the process is in state i is given by ~__ll~i  and the mean uninterrupted 
CPU interval £. in state i is z (2) £i = 7T7~-$-T7~7 ~ T(, -O i) , Prom equation (I) and assumption 
H4, we obtain i=l,...,M-! ; j=i+l (l - Oi) ~ij i=l,...,M-I ; j=!,...,i (3) Pij= (I Oi) ~Mj i=M ; j=~ 
.... ,M-I i=j =M (l OM) C~MM + % Let mi represent the equilibrium probability that a program is activated 
on the CPU in state i. Denoting by z the vector : (4) ~ = (~l .....iN) I we have, from the definition 
of P ~=gp (5) zM gi = l i=l  The mi can be simply computed using the following recursive equation obtained 
from (3) and (5) and starting with 0JM -1 [g. M -...... .~.(l-Oi)c~ij~ i] , c0j_ ] Oj_] J 1=3 j=2,... 
,M-I  (6) -l - °~M-I = ~---L°M (I - OM)(I -eMM ). M-I  The vector of steady-state probabilities 
F = (71,...,YM), where 7i is the equilibrium probability that X(t) = i, is obtained from g and %i, i=l,...,M, 
by z i i=l ,M (7) 7 i = M ' "'" j=] o J Hence, in the virtual time of the process, we can now compute 
the average time r M between two consecutive page faults for a given memory allocat- ion of M pages, 
and the memory utilization ratio eM" We have M  (8) I/r M = Z Ti/q. , i=l l 1 M  = __Z i 7 i .  
(9) eM M i 1 The mode] of swapping policy. We consider the following class of SWS policies, A program 
which has i pages in main memory when it is swapped out at the end of the current memory residence interval, 
has i pages preloaded at the beginning of the next memory residence interval with probability 1-8 , and 
only one page with probability 8, (0 _< 8 -<l). The parameter 8 takes into account different factors 
such as the proport ~ ion of new processes for which no preloading can be achieved and the way the active 
pages of the process are identified. For 8=I., pure demand (PDP) is followed, whereas for 8=0., the SWS 
policy is always successful Thus B defines a continuum of paging policies ranging from pure demand paging 
to demand paging policies with swapped working sets. It should be noted that more complex models of 
swapping policies could be used. Indeed, any policy which can be described in terms of a first order 
Markov chain (assumption H4) may be imbedded in the model. However, for the sake of clarity, we shall 
restrict our attention in the remainder of the paper to the class of SWS policies with one parameter 
defined above. Numerical examples. Figures 2 and 3 present E M and r M for different values of 8 and 
T. The function qi has been estimated by qi = aik with a = 10-7 , k = 6, using the experimental results 
reported in [7]. Unless otherwise specified, the unit of time is O.O01 sec.. The graphs show the effect 
of the paging policy on the memory utilization ratio gM and on the average interval of time between page 
faults r M for two values of the mean residence time (obviously, for T = ~, we have r M = qM and e M 
= I). The improvements brought by a SWS policy are clearly pointed out in figures 2a and 3a. There improvements 
are the more noticeable the larger the memory allocation M. This illustrates why in paged systems using 
a PDP policy, allocating main memory to a process beyond a certain point does not improve its paging 
behaviour very muc~. r M £M (msec.: ~ pp.p (B=. l) %% T = 1OO. T~ X X pRp (8=1 .) k ~ T = l O0 T 
= 100. \ ~'~ s 2~ e % %% .5 i i | 32 :32 M FiSure 2a Ffsure 2b rM ~f  (=see.) T ~ ~"~,_ PRP 
([~=. 1) ~ T = 200. PRP (8:. I) T = 200. \ "-, PDP(~=I .) %% T = 200. \ ~k \ \  25 ! ! I I y~ 
pDe(8=i.) t T : 200. 3'2 32 H Fisure 3a Fisure 3b  An other way to illustrate the effects of a SWS 
policy is to compare the rate u r of I/0 requests generated to the rate u_ of pages transfered. For a 
 P  demand paging policy with no SWS we have u r = Up, whereas for a SWS policy we expect, as noted 
in the introduction, to have u r < Up. Thus, the comparison of u r and Up gives an indication on the 
gain which can he obtained by the reduction of device accesses. Following [5],we shall draw an u r -Up 
plot in order to provide a visual comparison of the-performance of the SWS policies we have defined. 
The derivation of u r and u_ is straight forward. Assuming that no page ° ~ o Is modlfzed durxng an 
MRI, we have 1 1 = ----+ ~,  (10) u r rN (II) = I_ + ![~ + U t MCM(I-~) ] rM T .S o7 ,,6 Up.5 (ITISeC-1 
) .4 .3  M=32 ,1 Figure .2 ,S Ur (msec "1 ) 4. .4 ,S .6 .7 The ur -ut plot is represented in figure 
4 for different values of 6 and ~. The others parameters are set to the same values as above with T = 
100. The graph shows clearly that as 6 increases the rate ur decreases significantly whereas ut increases. 
 These observations indicate how an SWS policy which recorded the set of active pages of program when 
it is suspended and preloaded this set of pages at the reactivation of the program, reduces the page 
fault rate of the programs, increases the usage of main memory and reduces overheads due to latency owing 
to bulk requests. It remains to evaluate the effects of a SWS policy on system performance such as throughput 
and supervisor activlty. This will be done in the next section. Real time analysis. The model of the 
system. The model of the system is represented in figure 5. It consists of a central processing unit 
(CPU) station and a secondary memory (SM) station. A new program is queued at the SM station to have 
its first page loaded into main memory and then put in the CPU queue. A page fault causes the execution 
of the running program to be suspended, and the program to be queued at the SM station to have its missing 
page transfered. At the end of a memory residence interval, the execution of the program is suspended 
and the program leaves the CPU-SM loop and the multiprogramming set. system interruption ' ' ' , ,, 
, The memory management policy follows the one currently implemented in the EMAS system, with the main 
simplification that all programs have identi- cal behaviour. The analysis is performed under the assumption 
that the degree of multiprogramming N is fixed : a program which leaves the CPU-SM loop due to a system 
interrutpion is immediately replaced by another program. When a'program enters the multiprogrammed set, 
it is allocated a fixed number of main memory page frames m = M/N, where M is the total number of main 
memory page frames. The working-sets of programs belonging to the multiprogramming set are periodically 
recorded so that when a program is reactivated in the multiprogran~ning set to start a new MRI its working 
set can be preloaded into main memory by the SM station. It should be noted that a new program which 
replaces a terminating program will have an empty working set and only its first page can be loaded. 
Moreover, due to fact that working sets are measured at relatively large periods of time if no proper 
mechanism is available, some fraction of the preloaded pages will not actually be used. In order to take 
into account these two factors, we assume that when a program is suspended with i pages present in main 
memory, the program which immediately replaces it is preloaded with one page with probability 6 , and 
with i pages with proba- bility 1-6. This define (vii) and the ~i as above. We now define a classification 
of the programs being multiprogrammed according to their state (number of pages in main memory), the 
station where they are queues or serviced, and the kind of service they are receiving (page transfer, 
swapping out, preloading) from the SM station. i) a program is in class (1,i) if it is in state i, i=l,...,M 
and in the CPU station, ii) a program is in class (2,i) if it is in the SM station after having page 
faulted in state i, iii) a program is in class (3,i) if it is in the SM station to have its pages swapped 
out after having completed the current MRI in state i. Only modified pages are swapped out on the SM 
and we define Pmod as the proportion of pages which have been modified during the current MRI, iv) a 
program is in class (4,i) if it is in the SM station to have its pages preloaded after having completed 
the previous MRI in state i. With each SM service is associated a CPU time cverhead. Let (2,i)', (3,i)', 
(4,i)' denote the alass of a program suspended in state i and receiving services from the supervisor 
for proces- sing a page fault, a swap out, a preload. We denote by r2, i, T3,i, and T4, i the length 
of the correspon- ding overheads. Figure 5.  i28 x a = me n access time,  0 D~ x t = mean transfer 
time.  S.M. &#38;%p.[l.  C.P.U. SRRVI CE USER SUPERVI~'OR Solution of the model. $ERVICE SERFICE 
 ~)~ PRKLOADING I( i~ DEELOAD[ 1.  Nc $,4), ,o 0¢ , (~, I) ' @II/" (2,4) ' I, Figure 6. From 
these definitions and previous assumptions, the class of a program is a Markov chain whose transition 
diagram is represented in figure 6. The relative arrival rates Xk, i of a program (k,i) are simply obtained 
by noting that we have from definition (i) (12) Xl, i = Cg i, i=1,M, where C is a multiplicative constant. 
The transi- tion diagram yields : M ~X +B l 4,1 = X3,i i=l X3, i = OiX], i i=1,...,M, X2,i (13) 
X3, i = (I - Oi)Xl, i i=l,...M, X4, i = (1 -8)X3, i i=2, M, and the overheads associated with a page 
fault, a swap out, and a preload occur with the respective frequencies X2,i, X3, i and X4, i. In the 
context of multi-class queueing networks [4] , the Xk, i represent the relative arrival rates to the 
different stations of the network. It remains to characterize the mean service times of the different 
classes of program at each station. At the CPU station, the mean service time of programs of class (I,i) 
is obviously £i given by equation (2). Processes asking for supervisor services when they are in classes 
(2,i)', (3,i)' and (4,i)' require a mean CPU service time r2,i, ~3,i and r4,i.  At the SM station, 
we denote by s(j) the mean time to access and transfer j pages. The function s(j) takes into account 
service time characteristics of the SM station. For a typical paging drum, s(j) would be approximated 
by .~ (14) s(j) = X + j x a t )  where We assu~-e that the discipline of service is processor-sharing 
at the CPU and the SM station. Although the processor-sharing assumption is not realistic for the SM 
station, experiments we have conducted indicate that in a closed two server queueing model, the utilization 
factors of the servers are not sensitive to this assumption. Let PCPU be the CPU utilization rate, including 
overheads, 06pu utilization rate, overheads not included, and PSM the SM utilization rate. Following 
 [4] , we then have : 1 -A N  (15) PCPU ffi I - A N+I ) (16) ' = ~CPU OCPU '  (17) PSM l - A N+I 
 where M Z {X. .~.+X~ .T~ .+X..T~ .+X..z. .} (18) M i~l{S(1)X2,i+X3,iS(Pmod.1)+X4,is(i)} M M  (19) 
~ = i=E1 Xl,i~i/i=Z1[Xl,i£i+X2,iz2,i + + X3,iT3,i+X4,iT4,i ].  The derivation of equations (15) and 
(17) is straightforward. The coefficient A can be simply interpreted as the ratio of the average CPU 
service time for all classes requiring a service from the CPU to the SM average service time for all 
classes requiring a service from the SM. It can be noted that the parameter Pmod is used in the computation 
of the average SM servlce time in order to determine the number of pages actually swapped out. The para- 
meter ~ is the ratio of the CPU time spent in user state to the CPU time spent in user state and super- 
visor state. Without further computations, provides an important indication on the performance of the 
memory management policy. To summarize, the model has been built in order to take into account the main 
factors which determine the performance of a prepaging policy : - the intrinsic program behaviour described 
by the function qi,  - the mean memory residence interval T,  - the probability 8 of not being able 
to preload,  - the proportion Pmod of modified pages during an MRl,  - the overheads associated with 
the SM service. These overheads take explicitly into account the number of page transfers demandedby 
each  request,  - the service time characteristics of the SM. Since bulk requests generated by a SWS 
policy result in reduced access time on the drum for each transfer, the dependence of the service time 
to the number of pages j to be transfered is explicitly considered by the function s(j). The influence 
of these factors is illustrated in the next section by several numerical examples. Numerical examples. 
 The model has been run using measurements made on the EMAS system [I]. The EMAS system makes use of 
a SWS policy but this policy can be easily turned off so that data on the performance of the system running 
the same benchmark with SWS turned off and on are available for a variety or hardware configu- rations. 
These measurement indicate that the runs using SWS show consistently that the CPU time spent in the user 
state is significantly increased by more than I0 % and that the time spent in supervisor state is decreased. 
It has also been observed that the utilization of the drum channel is greater with SWS. Although the 
model does not describe the actual EMAS configuration, since it is mostly restricted to the description 
of the operations associated with the memory management policy, we shall see that, as far as the influence 
of SWS is concerned, it satisfactorily reproduces the performance impro- vements brought by SWS as they 
have been observed on the real system. Moreover, it will allow us to investigate the effects of the variation 
on some factors such as overheads or SM service time characteristics. Input parameters have been obtained 
from measurements made on the EMAS system. The following values have been estimated T2, i = 4.5 (msec.) 
 ~3,i = ~4,i = 1.5 + 1.7 i (msec.) s(j) = I0(.66 + .33 i) (msec.), T = IO0 (msec.) Pmod = I/3 For 
all the experiments we have assumed that M = 9'6 main memory pages are available to users. The degree 
of multiprogramming has been varied from l to 5. For each set of parameters the performance ! measures 
6, 0CPU, 0SPV = OCPU -0~PU and 0S~ have been computed as a function of the degree of multiprogramming 
N. The parameter B has been set to I. for pure demand paging and .I for demand paging with SWS. ~ °cPv 
°~eu %PV [ %~ N M PDP ] l StJ~ PDP S~¢N PDP EWe PDP ~ . 2 .44 .59 ,57 ,54 .25 .32 .3l . 76 .7.~ 3 4 I 
1"44.44 .57.47 .63.67 .61.62 .28.29 ,35,29 .35.37" ,~34 . 5 .8'=.~2 5 .35 ,36 .63 .59 .22 ,21 .4[ .39 
~9 ,96 Table 7" Table 7 shows the way the measures of performance are influenced by the paging policy. 
The main obser- vation is that the ratio ~ is steadily increased by more than lO % with SWS as long as 
the system is not thrashing. Depending on the degree of multiprogramming and the utilization factor of 
the SM, this causes the CPU time spent in user state to increase by 2 % to 6 %. It can be noted that 
the maximum improvement is obtained for the optimum values of the degree of multiprogrannning, i.e. the 
degree which maximizes 0~pu . As already observed on measurements made on the EMAS system, the optimum 
degree of multiprogramming is smaller with SWS(N=3) than with PDP (N=4). Despite the service time characteristics 
of the SM, the utilization factor of the SM is slightly increased with SWS, which indicates that the 
total amount of page transfers is greater with SWS than with PDP. PCPU N --F~f-_sws -- PD? ]_XL~$ I 
2 3 4 .55 .55 .55 .55 .70 .69 .67 .58 ,38 .49 .54 56 .37 .48 .54 .52 .21 .27 ,30 .31 .26 .33 .36 .30 
J I .IY .22 .24 .26 .II .14 .17 .22 .~2 i ~[.~ii'81 .SO .94 .63 .~3 .9'? .96 5 .51 .48 .23 .21 .28 .26 
.98[.9~I Table 3 The effect of overheads has been investigated in more detail by setting r~ = 3 msec., 
T 3 ~ = L,l . ,~ = T4, i = |+i (msec.). The results obtazned from this new set of experiments are presented 
in table 8. We can observe that the reduction of overheads causes an increase in the SM utilization. 
This is an indirect consequence of the increase of CPU time spent in user state, although the total CPU 
utilization is significantly decreased by 5 % to 10 %. This observation partly explains why SWS which 
causes a reduction of the amount of supervisor activity, also causes an increase of the SM utilization,. 
As in table 7, it can be noted that the improvements brought by SWS vanish when the system starts running 
in a thrashing zone. The explanation is that in this case programs are allocated a small number of page 
frames so that the influence of the initial loading phases (see figure 2) on the paging activity diminishes. 
 Preloading is then more useful since the supplemen- tary page transfers brought by SWS are not compensa- 
ted by a sufficient decrease of the supervisor activity. | ..55 .70 .39 .42 .2, .29 .17 .13 .61 .5S 
2 .555 .6q .51 .55 .28 .39 .23 ~17 .~3 .77 5 .67 .56 .61 .3l .41 .25 .20 .E9 .@$ 4 .55 [ .58 .58 .57 
.32 .32 .26 .24 .q~ .~  Table 9 As already noted, service time characteristics of the SM play an important 
part in the improvements brought by SWS policies. Table 9 presents the results obtained by setting s(j) 
= 10(.5 + .5i). The measure of performance ~ is not modified since it does not depend on the SM service 
time characteris- tics. Since the new function s(j) gives a more favourable treatment to bulk requests 
generated by SWS, the performance of these policies are increased.  More detailed observations reveal 
that the SM utilization is then smaller with SWS than with PDP. This indicates that in this case the 
increase of the number of page transfers is compensated by the reduction of the mean service time per 
page of the SM due to bulk requests. As a whole, these results illustrate how the different factors 
which have been listed above interact and influence the performance of a SWS policy. As observed from 
the experiments we have presented, no factor is in itself determinant, but it is their combination which 
defines the final result. The observations we have made on the results obtained from the model corroborate 
the measurements made on the EMAS system. Moreover, they provide some understanding of the behaviour 
of a SWS policy, and indicate how this policy would work with other hardware configurations and in other 
situations. As an application, it is intended to use the model to study the performance of a SWS policy 
between the disks and the drum in the EMAS system. Although the model involves only one category of 
users, it could be readily extended to take into account different categories of users by associating 
with each cate- gory a different life-time function and mean resi- dence time. This would merely enlarge 
the number of classes involved, and the derivation of the solution would remain unchanged. Conclusion. 
We have presented a model for the analysis of the performance of a variety of swapping policies in page-on-demand 
multiprogramming systems. This analysis is based on a detailed characterization of the paging behaviour 
of programs and of the system and hardware configuration. The model is computatio- nally simple, and 
we have shown that it can be used. to evaluate the "trade-offs" involved in the implementation of a class 
of swapped working-sets policies. ~oreover, the approach we have followed provides a framework for analysing 
the influence of program behaviour on global performance and it should be useful for the performance 
analysis of other memory management policies. Acknowledgements. We wish to thank Colin Adams, from the 
Computer Science Group at the University of Edinburgh, for many helpful discussions on the EMAS system. 
 References.<RefA> [I] ADAMS, J.C., "Evaluation of performance of the EMAS System", S~minaires Mod~lisation 
et Mesures IRIA-LABORIA (1976). [2] ADAMS, J.C. , MILLIARD, G.E., "Performance mea- surements of the 
Edingburgh Multi-Access System", Proceedings of the International Computing Symposium 1975, ACM/AFCET, 
Antibes (June 1975). [3] AHO, A.V., DENNING, P.J., ULLMAN, J.D., "Principal of Optimal Page Replacement", 
J.ACM 18, I (January 1971), 80-93. [4] BASKETT, F., et al., "Open, Closed and Mixed Networks of queues 
with different classes of customers", J.ACM 22, 2 (April 1975). [5] CHOY, D.M., "A graphical tool for 
the evaluation of prepaging and of paging with non-uniform pages", Report RJ -1789, IBM Research Labora- 
tory, San Jose, Calif. (May 1976). [6] DENNING, P.J., "Virtual memory", Computing Surveys 2, 3 (September 
1970). [7] LEROUDIER, J., BURGEVlN, P., "Characteristics and models of program behaviour", Proceedings 
of the Annual Conference ACM'76, Houston, (October |976). [8] MATTSON, R.L., et al., "Evaluation techniques 
for storage hierarchies", IBM Sys. J. 9, 2 (1970), 78-117. [9] PARENT, M., POTIER, D., "A note on the 
influence of program loading on the page fault rate", 2nd International Workshop on Modelling and Performance 
Evaluation of Computer Systems, EURATOM-ISPRA, Stresa (October 1976), North- Holland Publishing Company 
(to appear in Acta Informatica).</RefA>   
			
