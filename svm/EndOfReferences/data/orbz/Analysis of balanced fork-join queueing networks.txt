
 Analysis of Balanced Fork-Join Queueing Networks Elizabeth Varki Lawrence W. Dowdy Department of Computer 
Science Vanderbilt University Nashville, TN 37235 email: [varki,dowdy]@vuse. vanderbilt.edu Abstract 
This paper presents an analysis of closed, balanced, fork-join queueing networks with exponential service 
time distributions. The fork-join queue is mapped onto two non-parallel networks, namely, a serial-join 
model and a state-dependent model. Using these models, it is proven that the proportion of the number 
of jobs in the different subsystems of the fork-join queueing network remains constant, irrespective 
of the multiprogramming level. This property of balanced fork-join networks is used to compute quick, 
inexpensive bounds for arbitrary fork-join networks. 1 Introduction Multiprocessor systems greatly influence 
the design of soft ware processes. In uniprocessor systems, perfor­mance is limited by the speed of the 
single processor. This limitation is removed in multiprocessor systems by dividing a job into a number 
of tasks which are exe­ cuted concurrently on the processing units. The par­allel program has a simple 
fork-join structure. A job arriving at the system forks into various independent tasks. On completing 
execution, a task waits at the join Permission to make digital/hard copy of part or all of this work 
for personal or classroom use is granted without fee provided that copies are not made or distributed 
for profit or commercial advantage, the copyright notice, the title of the publication and its data appear, 
and notice is given that copying ia by permission of ACM, Inc. To COpy otherwise, to republish, to post 
on servers, or to redistribute to lists, requires prior specific permission and/or a fee. SIGMETRICS 
96 5/96 PA, USA a 1996 ACM 0-89791 -793 -6/96 /0005 . ..$3.50 point for its sibling tasks to complete 
execution. A job leaves the system once all its tasks complete execution. Although the job structure 
is simple, the synchroniza­tion constraints introduced by the forking and joining of tasks makes the 
modeling and analysis of multiprocessor systems complicated. Performance analysis of parallel programs 
is impor­tant as is the development of tools for analyzing their performance. Exact solutions for the 
steady state dis­tribution have been provided only for simple cases ([1], [3]). An exact response time 
analysis of a two server fork-join queue is given in [8]. Due to the difficulty of an­ alyzing fork-join 
models exactly, many studies on fork­join queues concentrate on approximation techniques. This paper 
introduces a quick and inexpensive bounding technique for obtaining performance measures of fork-join 
systems. The bounding technique is referred to as ba/anced job bounds for fork-join (BJB-FJ) systems 
and is analogous to balanced job bounds developed for product form networks [9]. The analysis given here 
is specific to 2-server fork-join systems but could be ex­tended to more general fork-join networks. 
The main contributions of this paper are: (1) an exact analysis of the fork-join model using two non-parallel, 
equivalent models of the fork-join network, (2) a proof that the proportion of jobs in each of the subsystems 
of a bal­anced fork-j oin model remains constant, irrespective of the multiprogramming level, and (3) 
the introduction of a balanced job bounds technique for fork-join syat ems. The remainder of the paper 
is organized as follows. Section 2 introduces the fork-join system under consid­eration, state the assumptions, 
and give the notation. In Section 3, a detailed analysis of the fork-join model is given. Section 4 explains 
the balanced job bounds Each service center in a parallel subsystem is visited I Parallel Subsystem(PS) 
I  LGZqTQ-p Jom paint P Fork point ~=J@--J w Figurel: Balanced Fork-Join Queueing Network Model 
technique for fork-join systems. Further research prob­lems and extensions are discussed in Section 5. 
2 The Balanced Fork-Join Queueing Network Model The fork-join queueing network model studied in this 
paper is shown in Figure 1. A fixed number of identical jobs (referred to as the multiprogramming level) 
circu­late in the network, The network consists of two inter­connected subsystems, where each subsystem 
consists of one or more independent queueing systems. Each queueing system consists of a single service 
center and an infinite capacity queue. All servers have a first-come­first-served (FCFS) queueing discipline 
and all demands at the service centers have a negative exponential dis­ tribution with mean p-1. There 
are two types of sub­ systems: 1) a serial subsystem consisting of a single queueing system, and 2) a 
parallel subsystem consisting of two identical queueing systems. Upon arrival at a parallel subsystem, 
a job instantaneously forks into two independent and identical tasks, where task k, k = 1,2, is assigned 
to the kth queueing system. On complet­ing execution at the kt h service center, the task waits at the 
join point for its sibling task to complete execu­tion. A job leaves the subsystem as soon as all its 
tasks complete execution (i.e., arrive at the join point). A queueing network with serial and parallel 
subsystems is referred to as a fork-join queueing network (FJQN). A queueing network with only serial 
subsystems is referred to as a serial network. A customer in the FJQN refers to a job/task waiting for, 
or receiving, service at one of the service centers. Therefore, a customer at a service center in a serial 
subsystem refers to a job, while that at a service center in a parallel subsystem refers to a task. by 
exactly one task of every job arriving at the subsys­tem. Thus, the visit ratio of a task to a service 
center in a parallel subsystem is equal to the visit ratio of the job to the subsystem. For the FJQN 
shown in Figure 1, the visit ratios of a job to each of the two subsystems are equal and, therefore, 
the loadings at all service cen­ters are equal to p-1, the mean service time at a server. A network, 
where the loadings at all service center are equal, is called balanced. Definition A balanced FJQN is 
one in which all jobs exhibit balanced resource usage (i.e., networks in which the loadings at all service 
centers are equal). For the model shown in Figure 1, the serial subsys­tem is referred to as SS, and 
the parallel subsystem is referred to as PS. The notation used in this paper is: nk: Number of tasks 
at the kth queueing station of a subsystem. s, s = (nl, nz): Vector representing the state of the parallel 
subsystem. t, t = (m): Vector representing the state of the serial subsystem. S, S = (t,s): Vector representing 
the state of the network. J(s): Number of jobs in the parallel subsystem, given subsystem state s. J((nl, 
nz)) = maximum {nl, nz}. j(s): Number of jobs having a task waiting at the join point, given subsystem 
state s. j((nl, nz)) = [n~-n~l. pi(j): Probability that a job arriving at subsystem i sees j jobs in 
the subsystem just before arrival. The arriving job does not see itself in the subsystem. l?T~(m): Mean 
response time at subsystem i when the multiprogramming level is m. STi (m): Mean service time at subsystem 
i when the multiprogramming level is m. Qi(m): Mean queue length at subsystem i when the multiprogramming 
level is m. Ui (m): Average utilization of subsystem i when the multiprogramming level is m.  TPUT(m): 
Mean system throughput when the multiprogramming level is m.  r B w h. pint Hk: The kth harmonic number 
defined as ~~=1 ~. Note that since the system is analyzed at steady state, time is factored out of the 
notation. The set of states of the underlying queueing model of the FJQN forms an irreducible Markov 
process which is analyzed in the next section.  3 Analysis of Balanced FJQNs In this section, a simple 
analysis of a fork-join network is presented. The fork-join network is mapped onto two serial networks, 
namely, a serial-join model and a state­dependent model. Each of the these models, taken sep­arately, 
is difficult to solve. However, the three models are equivalent and this equivalence is used to prove 
some properties of the fork-join queue. 3.1 A Serial-Join Model of the FJQN A job arriving at the parallel 
subsystem forks into two tasks, one of which spends its entire time at the service center it is assigned 
to; while its sibling task spends only a certain percentage of time at its service center and the rest 
of its time waiting at the join point. Since both service centers are identical, either one could serve 
the first task of the job completing execution (or equiv­alently, the last task of the job completing 
execution) with equal probability. Hence, the average job queue length of a service center in the parallel 
subsystem is equal to the average of the queue lengths of the service centers serving the first task 
and the last task of the job completing execution. The parallel subsystem can be mapped onto two se­rial 
subsystems, P. and Pj, as shown in Figure 2. The service center of Pa is equivalent to a service center 
in the parallel subsystem of the original fork-join model. The performance measures at P. correspond 
to the av­erage statistics of the two service centers of the original Saial Subsystem Parallel Sub@r,m 
Figure 2: Equivalent Serial-Join Model of the FJQN fork-join model. The service time at the second serial 
subsystem, Pj, is equal to the average delay encoun­tered by a job at the join point of the original 
fork­join model. This equivalent model is referred to as the se~ial-join model. In the serial-join domain, 
a job arriv­ing at the equivalent parallel subsystem does not fork into tasks. Instead, an arriving job 
spends some time in subsystem Pa, and then moves to the join point Pj. The queue length at Pa is equal 
to the average queue length at a service center of the original fork-join system, and this center services 
jobs at rate p. The join point, Pj, is modeled as a delay server, and its service time varies ac­cording 
to the multiprogramming level. The join point, Pj, is analyzed in the following sections.  3.2 Markov 
Analysis While the serial-join model allows one to view paral­lel subsystems without the forking of jobs 
into tasks, it doesn t simplify the analysis, since the service time at the join point is not known. 
Markov analysis is used here to identify and understand the properties of the fork-join network. First, 
consider the origi­nal fork-join queueing model when the multiprogram­ming level of the network is set 
to 1. The correspond­ing Markov process of the network has state space {(1,(0,0)), (O, (1,1)), (0,(0,1)), 
(0,(1,0))}. Figure 3(a) shows the state-space diagram of the Markov process. States (O, (O, 1)) and (O, 
(1, O)) represent the network when there are no jobs at the serial subsystem, and the job at the parallel 
subsystem has one task at a service center while its sibling waits at the join point. These states have 
identical steady state probabilities and, hence, can be aggregated into a single state. The corresponding 
state-space diagram of the Markov pro­cess is given in Figure 3(b). State S1 represents the network when 
there is one s! S2 1(00) k 0(1 1) w w w Y L 0(10) o (o 1) S3   !2f$ (a) (b) Figure 3: Markov Diagram 
of the Fork-Join Model at Multiprogramming Level 1 job in the serial subsystem. States S2 and S3 represent 
the network when there is one job at the parallel sub­system; S2 represents the state when there are 
no tasks of the job waiting at the join point, and S3 represents the state when one task of the job is 
at a service center while its sibling is at the join point. Transition arc S between states SI and S2, 
represents the movement (at rate p) of a job from the serial subsystem to the parallel subsystem. The 
transition arc p; between states S2 and S3, represents the movement (at rate 2P) of the first task of 
the job from a service center to the join point; while the transition arc p% between states S3 and S1, 
represents the movement (at rate p) of a job from the parallel subsystem to the serial subsystem. Now 
consider the fork-join network when the multi­programming level is set to 2. Figure 4 shows the state­space 
diagram of the underlying Markov process. Arcs F and p; represent movement between the two subsys­tems, 
while pi represents movement within the parallel subsystem. % ates 5 2, 5 3, S4, 5 5, and SG represent 
the network when there is at least one job in the parallel subsystem. Amongst these, states S2 and S4 
represent the network when there are no jobs with a task wait­ing at the join point; states S3 and S5 
represent the network when there is one job with a task at the join point; and state &#38; represents 
the network when there are two jobs which have a task waiting at the join point. The rates along transition 
arcs F and ~z are equal top, as in the case when the multiprogramming level was set to 1. These rates 
are state independent. However, the transition arc pi between states S5 and &#38;j has rate p, instead 
of 2P. Thus, the movement of tasks to the join point slows down to rate p whenever there are one or more 
jobs with tasks waiting at the join point, r \l T2PI % Figure 4: Markov Diagram of the Fork-Join Model 
at Multiprogramming Level 2 The time spent by a job in the parallel subsystem can be factored into two 
phases. In phase 1, both tasks of the job are waiting for, or receiving, service at the service centers 
of the subsystem (i.e., there are O tasks of the job at the join point). In phase 2, only one task of 
the job is waiting for/receiving service at the service center while its sibling task waits at the join 
point. 3.3 State-Dependent Model of FJQNs The properties of the parallel subsystem can be studied by 
viewing the subsystem from the perspective of the two phases of a job s response time. During the first 
phase, both tasks of the job are in the queues of the service centers. This phase ends with the movement 
of one of the tasks to the join point. In the remainder of the response time (i.e., phase 2), only one 
task of the job is at a service center, while its sibling waits at the join point. Movement out of phase 
1 is depicted by downward transition arc p<, and movement out of phase 2 is depicted by upward transition 
arc p<. The time spent completing phase 1 and phase 2 of a job s response time in the parallel subsystem 
can be viewed as the time spent getting service at two service centers (or, serial subsystems), PI and 
P2. Service time at server P2 represents the time spent by a job in phase 2 of a job s response time. 
This server has a service time drawn from a negative exponential distribution with mean p-1. Service 
time at server PI represents the time spent by a job in phase 1 of a job s response time. The rate at 
which P1 services jobs is dependent on the number of jobs in PZ. Service center P1 services jobs at rate 
2P when there are no jobs in the queue of server P2. 3.4 Comparison of the Models II This section summarizes 
properties of the subsystems of the three equivalent models and shows the relationship w between them. 
All equations stated here are direct con­ p or2P v Serial Subsystem 1 I sequences of the equivalence 
of the three models, and Parallel Subsystem they link the models. Figure 5: Equivalent State Dependent 
Model of the All of the models contain the serial subsystem, SS. FJQN This subsystem services jobs at 
rate p, and its utiliza­tion U,Ss(rn) equals 1 ~UT(m) * p-l. The other sub­systems of the three models 
are: .$1 S2 P (1oo) (o 1o) s State-Dependent Model (Figure 5): m w Up,(m) = U,SS-(m), Vm (1) (001) 
? S3 QP2(1) = Qss(l) (2) up,(l) = 0.5* Uss(l) (3) Up,(m) > 0.5* UsS(m), Vm >1 (4) Up, (m) < Uss(m), 
Vm (5) Figure6: Markov Diagram of the Equivalent State De­pendent Model at MPL of 1 and 2 Original Fork-Join 
Model (Figure 1): The equa­ tions given below relate the original fork-join model to the state-dependent 
model. However, the presence of one or more jobs at P2 slows the service rate of PI to p. Uss(m) < Ups(m), 
Vm (6) Viewing the parallel subsystem from the perspective ups(l) = UP,(1) + UP,(1) (7) of the two service 
centers PI and P2 is similar to map- Ups (m) < Upl (m)+ Up,(m), Vm >1 (8) ping the network to a different 
domain, one in which the fork-join model consists of three serial subsystems. The QPs(m) = QP~ (m)+ QP, 
(m), Vm (9) first serial subsystem in this domain is equivalent to the Serial-Join Model (Figure 2): 
The equations givenserial subsystem, SS, of the original fork-join model. below relate the serial-join 
model to the state-The second and third serial subsystems are equivalent dependent model and the fork-join 
model. In par­to subsystems with service centers PI and P2, respec­ticular, equations 12 and 13 link 
the three models tively, and they model the parallel subsystem. Since of the fork-join network. service 
time at service center PI is dependent on the number of jobs in service center P2, the network is state­dependent. 
In this model, as in the case of the serial-Upa (m) = UsS(m), Vm (lo) join model, a job does not split 
into tasks in the parallel QP.(1) = Qss(l) (11) subsystem. The state-dependent model shown in Fig- Q~. 
(m) = 0.5( Qps(m) + Qpl (m)), Vm(12) ure 5 is equivalent to the fork-join queueing network. The Markov 
diagram of the state-dependent model at Upa (m) = 0.5(i7ps(m) + Up, (m)), Vm (13) multiprogramming levels 
of 1 and 2 is shown in Fig­ Qps(m) = QP. (m)+ QPj (m), Vm (14) ure 6. A state, (nj, (nl, nz)), of the 
fork-join model QP, (m) = Qps(m) QP. (m), Vm is equivalent to the state (n~, J(S) j(S), j(S)) of the 
state-dependent model. = 0.5 * QP2(m) (15) 3.5 Analysis of the Parallel Subsystem In this section, the 
equivalent models are used to ana­ lyze the parallel subsystem of a FJQN. The service cen­ ters of the 
network are not necessarily balanced. How­ ever, all service centers of the parallel subsystem must be 
homogeneous. Lemma 3.1 The mean service time of subsysi!em PI, STP1 (m), is non-decreasing as the multiprogramming 
level, m, increases. In particular, STP1 (1) < STP, (m) forallm>l. Proofi The service center in subsystem 
PI services jobs at rate 2p when there are no jobs in subsystem P2. The presence of one or more jobs 
in subsystem P2 slows the service rate of PI to p. Thus, the mean service time at PI, STP1 (m), is non-decreasing 
as the multiprogram­ming level increases. In particular, STP, (1) < STP, (m] for allm> 1. 0 Lemma 3.2 
The mean service time of parallel sub­system PS, STPs (m), is non-increasing for increasing multiprogramming 
!evei m. In particular, STPS (1) > STPs(m) for all m >1. Proof: This result is proven in [8]. However, 
it can also be proved as follows. Equation 13 states that Upa (m) = 0.5* (UP,S (m) + UP, (m)). This implies 
that ups (m) = 2 * Upa Up, (? n). Lemma 3,1 shows that STP, (m) is non-decreasing for increasing multiprogram­ming 
level m. The mean service time of Pa, STPa, is invariant of the multiprogramming level. The desired result 
follows directly. 1 The following lemma is a direct consequence of lem­mas 3.1, 3.2, and the equivalence 
of the fork-join and state-dependent model. Lemma 3.3 Consider the FJQN at any multiprogram­ming level 
m > 1. The increase in the service time of subsystem PI is proportional to the decrease in the ser­vice 
time of parallel subsystem PS. Proposition 3.1 If ail service centers of a closed queueing network (not 
necessarily a FJQN) have ser­vice -times drawn from a negative exponential distribu­tion, then Ui(m) 
< Uj (m) + Qi(m) ~ Qj(m); where i and j are subsystems/service centers of the network, and m, is the 
multiprogramming level of the network. Proof: Assume that the visit ratios to subsystems i and ~ are 
equal. Then, Vi(m) < Uj (m) + STi (m) .: STj (m). It is also given that service times for botlh servers 
are drawn from the same distribution. The re­ sult follows. [1 Note that if utilizations at two subsystems 
are equal,, nothing can be said about their queue lengths in com­parison to each other. Lemma 3.4 Qp, 
(m) s 2 * Qpl (m), for all m. Proofi The lemma is proved by first showing that Qp,(m) S QP. (m), and 
then Proving that QP. (m) :; 2 * QP, (m). At multiprogramming level 1, QP~ (1) = Qp, (1), For higher 
multiprogramming levels, Equation 8 states that Ups(m) < UP,(m) + Up,(m). This is equivalent to Ups(m) 
< Upl (m) + Upa (m). From Proposition 3,1, it follows that QPS (m) < QP1 (m) + QP. (m). But, by Equation 
9, QpS(m) = Qpl (m) + Qp, (m). Thus, Qp,(m)s QP. (m). By Equation 12, QP@(m) = 0.5* (QPS(m) + QP, (m)). 
It follows that QP,(m) = QPC(m) 0.5 * QP, (m) 2 0.5 * QP~ (m). The result follows. c1 Theorem 3.1 Consider 
the fork-join queueing network at multiprogramming levei m > 1. The overall queule length at parallel 
subsystem, PS, is unaffected by the decrease in mean service time of PS (i. e., the increase in mean 
service time of PI). Proofi First, consider the network at multiprogram­ming level 1. Since P1 is twice 
as fast as P2, therefore, QPZ(l) = 2 *QG(l). Now, consider the network at m >1. Lemma 3.4 shows that 
QP2 (m) S 2 * Qp, (m). Lemma 3.3 proves that the increase in mean service time of subsystem PI is pro­portional 
to the decrease in the mean service time of parallel subsystem PS. These two lemmas and Equa­tion 9 (QPS(m) 
= QP, (m) + Qp.(m)), imply that the percentage increase in the queue length of PI is propor­tional to 
the percentage decrease in the queue length of Pz, for m > 1 (i.e., the increase in the percentage queue 
length of PI is offset by a proportional decrease in the percentage queue length of P2). Hence, the over­all 
queue length at the parallel subsystem is unaffected by the decrease in mean service time of PS as the 
mul­tiprogramming level increases beyond 1. 0  3.6 A Property of Balanced FJQNs In balanced product-form 
networks, the utilizations at all service centers are equal, implying that the queue lengths at all service 
centers are equal, irrespective of the multiprogramming level. However, in balanced fork­join systems, 
the utilizations at parallel and serial sub­systems are unequal. It follows that the queue lengths at 
serial and parallel subsystems are unequal. However, the utilizations at all the individual service centers 
of the FJQN are equal at all multiprogramming levels (i.e., there are no bottleneck service centers). 
The absence of bottleneck service centers in the balanced FJQN re­sults in these networks satisfying 
the following interest­ ing property: In balanced fork-join systems, the propor­tion of number of jobs 
in each of the subsystems of the FJQN remains constant, and is invariant of the multi­programming level, 
This property of FJQNs is proved here using Theorem 3.1 and Lemma 3.5 given below. Lemma 3.5 There are 
no bottleneck servzce centers in the three equivalent models. Proof: This lemma holds trivially. The 
utilizations of the service centers in the serial and parallel subsys­tem of the FJQN are equal. Hence, 
there are no bot­tleneck service centers in the original fork-join model. The serial-join model and the 
state-dependent model are equivalent to the FJQN. It follows that there are no bottleneck servers in 
either of these models. 0 all service centers are equal. However, this need not be the case for non product-form 
systems. Theorem 3.2 For balanced fork-join queueing net­works, Q~(m) = m * Qi(l)j for al! multiprogramming 
levels m, and for ail subsystems i. Proofi Consider the network when multiprogramming level is set to 
m >1. Theorem 3.1 shows that the increase in the percentage queue length of PI is offset by a proportional 
decrease in the queue length of P2. Alternatively, the overall queue length at the parallel subsystem 
PS is not affected by the decrease in its mean service time as the multipro­gramming level increases. 
Also, Lemma 3.5 proves that there are no bottleneck service centers in the fork-join queueing network. 
Theorem 3.1 and Lemma 3.5 imply that the mean queue length of serial subsystem, SS, and the parallel 
subsys­tem, PS, remains constant, regardless of the multipro­gramming level m. 0  3.7 A Conjecture about 
the Arrival In­stant Distribution For closed FJQNs, it has been observed that the aver­age number of 
jobs seen by a job arriving at a serial subsystem is less than the average queue length at the serial 
subsystem when the multiprogramming level of the network is one less. Conjecture 3.1 For a fork-join 
queueing network at multiprogramming level m, Qss(m 1) > ~~jol k* pss(k), where pss(k) is the probability 
that an arriving customer sees k jobs ahead of it in the serial subsystem. Equivalent@, Qps(m 1) < ~~~~ 
k * pps(k), for the para[!e[ subsystem PS. Note that a bottleneck service center is one in which the 
queue length grows at a faster rate than at any of the other centers. The presence of a bottleneck service 
center implies that as the multiprogramming level in­ creases, the majority of customers will be found 
at this bottleneck center. The absence of bottleneck centers in product-form networks implies that the 
queue length at The observations shown in Table 1 refer to the balanced FJQN shown in Figure 1. The figures 
were obtained by solving the Markov diagram for the FJQN at various multiprogramming levels. The maximum 
difference be­tween the arrival instant queue length and the queue length at multiprogramming level one 
less, is observed m Q,w(m 1) x:: k * Pss(k) Difference % 2 0.4 0.3846 4.00 3 0.8 0.7785 2.76 4 1.2 
1.1769 1.96 5 1.6 1.5778 1.41 6 2.0 1.9969 0.16 7 2.4 % 2.4 % 0.0  Table 1: Observations backing 
the Conjecture in case of the balanced FJQN at multiprogramming level 2. This difference decreases with 
increasing multiprogramming levels, and, in the limit, the difference between the two values approaches 
zero. An intuitive argument for the validity of the con­jecture is as follows. Suri, in [7], analyzes 
performance measures when the homogeneous service time assump­tion of product-form networks is violated. 
It is proven that an increase in the mean service time of a service center results in an increase in 
the proportion of cus­tomers at this center, and the steady state distribution of the network reflects 
this increase. Sevcik and Mi­ trani, in [6], show the relationship between an arriving customer s distribution 
and the steady state distribu­tion of a closed arbitrary network. Thus, it seems to imply that an increase 
in the steady state probability would also result in an increase in the arrival instant distribution. 
We have also observed that Conjecture 3.1 is valid for general K-sibling FJQNs (K ~ 2), not just for 
balanced, 2-sibling FJQNs. For networks with more than one serial and parallel subsystems, Qi(rn 1) 
> ~~~~ k *pi(k), for all serial subsystems i. This implies that there exists at least one parallel subsystem 
j, such that Qj (m 1) < ~~~~ k * pss(k). We are currently working on a formal proof of Conjecture 3.1, 
 3.8 Implications of the Mapping to Se­rial Systems From the viewpoint of the underlying stochastic pro­cess 
of a queueing system, the main difference between serial networks and fork-join networks is the size 
of the step function of the state process. In serial net­works, the number of customers in any of its 
subsys­tems can increase/decrease by at most one during an arrival/departure instant. In fork-join networks, 
the number of customers in a parallel subsystem increases by more than one at a job arrival instant. 
An important theorem in queueing theory states that: in any sys­tem (the actual nature of which is unimportant), 
and provided that the number of customers it contains varies by at most one at a time, the probability 
y distri­bution of the number of customers in the system is the same just prior to an arrival and just 
after a departure. This theorem was proved by P.J. Burke in 1968 (un­published), and can also be found 
in [2]. Burke s proof shows the generality of the result, which is not limited to queueing systems, but 
holds for any stochastic pro­cess in which realizations are step functions with only unit jumps. By mapping 
the fork-join network to serial networks, the theorem becomes valid for fork-join net­works. (Alternatively, 
Burke s proof can be extended to directly show the equality of the arrival and departure instant distributions.) 
 4 Balanced Job Bounds for FJQNs Balanced job bounds for product-form networks were developed by Zahorjan 
et. al. [9] as a technique for obtaining performance bounds efficiently, requiring few arithmetic operations. 
A brief explanation of the BJB solution technique is given here. A balanced product form network is one 
in which all jobs exhibit balanced resource usage. Because the service centers are all (ef­ fectively) 
identical, they have the same queue lengths, regardless of the multiprogramming level, If the multi­programming 
level of the system is m, and if there arle K service centers, then the queue length at each service 
center is equal to m/K. By applying the Arrival Theo­rem [5] and Little s Result, the throughput of a 
balanced network can be calculated as: TPUT(m) = D(K~m_ 1,, where D is the demand at each service center. 
This property of easily computing the performance of bal­anced networks is used for obtaining quick bounds 
for arbitrary product-form networks. The throughput of any given product-form network is bounded by th,e 
throughput of two systems: (1) lower bounds are ob­ tained when the loadings at all service centers are 
raised to the maximum loading at any service center in the net­ work, and (2) upper bounds are obtained 
when the load­ings at all service centers are reduced to the minimum loading at any service center in 
the network. Tighter upper bounds are obtained using the average loading instead of the minimum loading. 
The two properties of balanced product-form net­works that are used to obtain performance bounds are: 
(1) the queue lengths at all service centers are equal at all multiprogramming levels, and (2) the average 
num­ber of jobs seen by a job arriving at a service center is equal to the average queue length at the 
service cen­ter when the multiprogramming level of the network is one less [6], [4]. (This property is 
also referred to as the Arrival Theorem. ) The corresponding proper­ties of balanced fork-join queueing 
networks that can be used to obtain performance bounds are: (1) the per­centage of the number of jobs 
(queue lengths) at each of the subsystems remains constant, irrespective of the multiprogramming level, 
and (2) the average number of jobs seen by a job arriving at a serial subsystem is less than the average 
queue length at the subsystem when the multiprogramming level is one less. The dif­ference between the 
arrival instant and the steady state queue lengths decreases with increasing multiprogram­ming levels, 
and approaches zero in the limit (improving the accuracy of the bounds). These two properties of balanced 
fork-join queueing networks are used to com­pute performance measures of the balanced FJQN, at a given 
multiprogramming level m, in the following man­ ner: 1. The mean queue length at each of the subsystems, 
at multiprogramming level 1, can be calculated ex­actly as follows: For serial subsystem SS, RTs,s ( 
1) = ~. For the parallel subsystem PS, response time is equal to the time taken to execute both tasks, 
which is equal to the second order statistic of the service time ran­dom variables. Thus, RTPs(l) = ~. 
The throughput and queue lengths can then be cal­culated as: TPUT(l) = RTss(l) + RTps(l) Qss(l) = TPUT(l) 
X RTss(l) Qps(l) = TPUT(l) X RTFs(l) 2. The mean queue length at a multiprogramming level m is given 
by: Q,s,s(m) = m x Qss(l) Qps(m) = m x QPS(l) 3. Close approximate values for throughput and re­sponse 
time at multiprogramming level m can be calculated using the exact queue length measure­ments computed 
at multiprogramming level (m 1). As shown in the previous section, it is observed that the Arrival theorem 
[5] is a close approxima­tion for the response time of serial subsystems. RTss(m) <N ~ (1 + Qss(m -1)) 
Qss(m)TPUT(m) = RTss(m) Qp.s(m) RTps (m) = TPUT(m) The performance measures of the balanced FJQN obtained 
using the Arrival theorem approximation are quite close to the actual performance values. Table 2 shows 
that the error between the approximate and the actual values is within 1.2Y0. This small error margin 
is not surprising, since the arrival instant queue length is very close to the queue length for the network 
at multi­programming level one less (Refer to Table 1). Performance measures for balanced fork-join net­works 
can be easily computed at any given multipro­gramming level using the method shown above. As in the case 
of product-form networks, performance bounds for an arbitrary fork-join queueing network, QiV, can be 
obtained by constructing balanced FJQNs that bound the performance of QIV, and solving these balanced 
net­ works [9]. In particular, the throughput (response time) arriving at the serial subsystem is less 
than the average \ MPL I Actual I Approximate I %Error I queue length at the subsystem when the multiprogram- 
T Throughput Throughput ming level is decreased by one. These two properties of 2 0.5778 0.5714 1.10 
 balanced FJQNs are used to compute quick bounds for 3 0.6747 0.6667 1.19 arbitrary fork-join networks. 
The bounds are referred 4 0.7359 0.7273 1.16 to as balanced job bounds for fork-join (BJB-FJ) net­ 5 
0.7776 0.7692 1.08 6 0.8080 0.8000 0.99 works since the bounding technique is similar to that of 1 7 
0.8250 0.8235 0.18 balanced job bounds for product-form networks. I While the analysis given here is 
specific to the model Table 2: Actual and Approximate Throughput Values shown in Figure 1, it can be 
generalized to more general for the Balanced FJQN FJQNs of the type shown in Figure 7. A formal proof 
of the conjecture regarding the arrival instant distribution at subsystems of a FJQN is also required. 
Suhyti z  References<RefA> [1] Baccelli, F. Two parallel queues created by ar­rivals with two demands: The 
M/G/2 symmetrical case , Report INRIA, 426, July 1985. [2] Cooperj R. B. Introduction to Quetieing Theory, 
Figure 7: A General Fork-Join Queueing Network Mercury Press/Fairchild Publications -a Capital Model 
Cities/ABC, Inc. company, MD, 3rd edition, 1990. [3] Flatto, L., Hahn, S. Two parallel queues created 
of any given network, QIV, is bounded by the through­ by arrivals with two demands I , SIAM J. Appl. 
 put (response time) of two related systems, one in which Math., 44, Oct. 1984, pp. 1041-1053, the loadings 
at all service centers is raised to the maxi­ [4] Lavenberg, S.S., Reiser, M. Stationary state prob­ 
mum loading at any service center in QN, and another in which the loadings at all service centers is 
reduced to abilities at arrival instants for closed queueing net­the minimum loading at any service center 
in QN. works with multiple types of customers) , Journal of Appl. Prob., 17, Dec 1980, pp. 1048-1061. 
[5] Reiser, M,, Lavenberg, S.S. Mean-value analysis 5 Conclusions and Future Work of closed multichain 
queueing networks , Journal of the ACM, 27, 2, April 1980, pp. 313 322. This paper gives an exact analysis 
of a closed, balanced [6] Sevcik, K. C., Mitrani, I. The distribution of FJQN. Two equivalent serial 
models of the FJQN are queueing network states at input and output in­used in conjunction with the original 
fork-join model stants , JACM, 28, 2, April 1981, pp. 358 371, to analyze the parallel subsystem of 
the FJQN. It is [7] Suri, R. Robustness of queueing network formu­ shown that the probability distribution 
of the number las , JACM, 30, 3, July 1983, pp. 564-594. of jobs in the system is the same just prior 
to an ar­ rival and just after a departure. One contribution of [8] Varki, E., Dowdy, L. W. Response 
time analysis of this paper is the proof of the following property: the two server fork-join systems 
, MASCOTS, 1996. proportion of the number of jobs in each of the subsys­tems of a balanced FJQN remains 
constant, regardless [9] Zahorjan, J., Sevcik, K, C., Eager, D. L., Galler, of the multiprogramming level. 
In addition, it is ob-B. Balanced job bound analysis of queueing net­served that the average number of 
jobs seen by a job works , Comm. of ACM, 25, 2, 1982, pp. 134 141.  </RefA>
			
