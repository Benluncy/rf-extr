
 1981 Winter Simulation Conference Proceedings ]4] T.I. Oren, C.M. De]fosse, C.M. Shub (Eds.) AN ON-LINE 
SIMULATOR AND DATABASE SYSTEM FOR ~[ANAGEMENT OF A COMMERCIAL FISH FARM A. Neil Arnason, Carl J. Schwarz 
and David H. Scuse Department of Computer Science University of ~nitoba Winnipeg, Manitoba, R3T 2N2 
Canada ABSTRACT We have developed an on-line system to aid in the management of enclosed, multi-tank 
fish farms with water filtration, heating and recirculation, where fish are grown from fingerling through 
to market size (about 250 gr.). The manager has a high degree of control over tank loadings and fish 
rearing con- ditions, but he must maintain high production rates within biological con- straints on water 
quality and fish density and within system constraints imposed by the physical plant. A multi-level interactive 
simulator permits exploration of management strategies, with nested levels of constraints. A database 
is used for storage of both real and simulated data on management interventions and their consequences 
on fish growth and water quality. Interaction between the simulators and the database aids model calibration 
and validation and permits storage of promising management strategies. I. INTRODUCTION Since April, 
1980, we have been developing a sys- tem of programs and a database designed to aid in the management 
of commercial fish farms. The work has been carried out in conjunction with the Aqua- culture project 
of the Freshwater Institute, Fisheries and Oceans Canada. This research sec- tion of a Canadian Federal 
Government ministry operates the Rockwood Experimental Hatchery near Winnipeg, Manitoba. One of the purposes 
of the hatchery is to demonstrate the commercial feasi- bility of enclosed, environment-controlled fish 
 rearing facilities for the production of market size (200-250 gr.) salmonid fish reared from 5-10 gr. 
fingerlings. Such facilities, of which Rockwood is a small- scale prototype, have several tanks, each 
of a given size and shape, each holding a given volume of water in which the fish are reared. The water 
temperature and quality are maintained by the water flow system. Water from tanks is partly discharged, 
but the majority passes to a filter (usually one to each tank) where pollutants (fish metabolites and 
particulate matter such as feces and excess food) are removed by mechanical filtra- tion and bacterial 
action. This action also removes oxygen from the water, beyond what has already been removed by the fish 
in the tank. The filtered water is then reclrculated back into the tank after mixing it with heated 
make-up water. The make-up water, which replaces any discharge, is heated by mixing unheated ground water 
with water heated by low-grade (solar or waste) heat. Large holding tanks of heated and unheated water 
are maintained, and this can be fed in any combi- nation to provide make-up water of different temp- 
eratures to individual tanks. The combined make-up and reclrculated water is fed back into the rearing 
tanks through venturies and spray heads which partly or completely re-oxygenate the water (depending 
on flow rates, fish densities, etc.). Typically the turnover rate in a tank (i.e. the time to input 
one tank volume of water) is around a half hour but there may be considera- ble variation in this variable 
among hatcheries or hatchery configurations. The size of the filter, in combination with the turnover 
(flow) rate may place limits on the loadings of fish and food that can be placed in the tank. In any 
case, filters gradually decline in their efficiency of pollutant removal and must periodically (every 
few weeks) be flushed in a process called backwashing. While this is being done, the fish in the tank 
are main- tained on straight flow-through of make-up water with no recirculatlon. The process requires 
15-30 minutes per tank. Many variations on this physical system are possi- ble: variations in numbers 
and volumes of tanks, in filter sizes, in the degree of temporal and  81CH1709-5/81/0000-0141500.75 
(~) 1981 IEEE 142 A.N. ARNASON, C.J. by-tank control of flow, temperature, filtration, etc., in the amount 
of water and heat available. Our management programs and database are designed to incorporate information 
about this physical configuration and to adapt their functions to existing or hypothetical configurations, 
different from, but of the same general design as that at Rockwood. The salient feature of the facilities 
that we are considering is that the manager has a high degree of control over the rearing conditions. 
Rearing conditions are those variables which have a direct effect on the growth and death rate of fish. 
They include water temperature, feeding variables (food type, feeding rate and method), and water quality 
variables (mainly oxygen level, toxic metabolite levels such as N-NH3, N-N02 and pH as it affects equilibria). 
Growth rates also differ among spec- ies and among genetic strains of the same species. At Rockwood, 
most of the rearing experiments have been done using various strains of rainbow trout (Salmo galrdnerl), 
but work is also beginning on arctic charr (Salvelinus alpinus). Many of the system variables have no 
appreciable effect on growth or death except at extremes of high fish density or low water quality but 
these limits, which we call blolo~ical constraints, depend on fish size, growth rate, and temperature 
(among other things). Biological constraints can be con- sidered, for the moment, to be the maximum density 
and minimum water quality conditions that are tol- erable by the fish. We shall need to define this term 
more precisely when we introduce the various levels of growth models. In an actual hatchery, the manager 
has varying degrees of direct or indirect control over the environmental variables which affect rearing 
con- ditions and determine if biological constraints are exceeded. Changes to such variables, over which 
the manager can exercise direct and indepen- dent control are called interventions. The easi- est changes 
to make involve tank loadlngs of fish and the feeding variables. Each tank can be stocked with a given 
number of fish, of a given weight or distribution of weights. A feeding reg- imen for each tank is carried 
out: a certain amount of a specified food is distributed to each tank in a set way daily. Amounts are 
specified as a certain feeding percent, typically aimed at or just under maximum ration which is the 
(size and temperature dependent) amount just needed to achieve maximum growth rate. We will also refer 
to a parameter called feeding level which is the actual feeding percent as a fraction of this maxi- mal 
ration. Feeding level thus varies from star- vation (feeding level = 0) to maximum ration (feeding level 
= i). Tanks are censused or sam- pled on a regular basis (usually weekly) to deter- mine their current 
total weight and mean weight per fish so that the feeding regimen can be updated. As the fish grow, tank 
loadings (kg./tank) generally increase and so the tank loadlngs must be re-distributed. Some or all of 
the fish in a given tank may be moved randomly (i.e. not size selectively) or by grading (usually larger 
fish are moved or "promoted") to an empty tank or to a tank with other fish already in it. Three types 
of movements are distinguished: an ADD of fish from outside the farm into a tank, a MOVE of fish from 
one tank to another, and a R~VE of  SCHWARZ, D.H. SCUSE fish from a tank for sale or discard. All such 
movements can potentially be done at any given time, from or to any given tank, on a numbers or percentage 
by weightclass basis. In practice, movements are usually kept as simple as possible, since the consequences 
of all but the most regular interventions are difficult to foresee and because there is a need to keep 
fish sizes within tanks fairly uniform. A typical strategy is to empty out tanks with (mostly) market 
size fish every 6 to 8 weeks and to use the spare tanks to split the fish in the remaining most heavily 
loaded tanks. If any tanks remain, a new batch of fingerlings is started. The water variables are also 
subject to interven- tions by altering the percentage and temperature of the make-up water, possibly 
on a tank-by-tank basis. Flow rates are usually fixed by pumping rates, but may be variable in some systems. 
Changes to any of these will produce new equilib- rium levels for the water quality varibles which must 
be kept within the biological constraints for the current tank loadings. The interventions must also 
be within the range of system constraints that are imposed by the availability of heated and unheated 
water in the holding tanks, maximum pump- ing rates, filter capacities etc. Two points should be evident 
from this brief out- line of hatchery management practices. The first is that the system generates a 
large amount of data that is important both for day-to-day opera- tions and for planning purposes. The 
manager must keep track of tank censuses and the interventions carried out. Measurements of water temperature 
and quality (pH, oxygen concentration, ammonia levels) are made regularly, possibly in any or all of 
the tank-, the recirculation- and the make-up- water. Data is also collected on the various flow rates 
and on the volume and temperature of water in the holding tanks as well as ambient air temp- erature. 
These data permit monitoring for deteri- oration of environmental conditions, checking how close the 
system was run to the biological and system constraints, resetting of feeding regimens, and historical 
reporting of the consequences of interventions on growth, deaths and environmental conditions. In a production 
commercial facility, a considerable amount of data on costs and ben- efits will also be required. The 
second point is that, even with ready access to this information, management is a complex and difficult 
task. ~ile the manager has a high degree of control, he is also subject to complex and inter-dependent 
con- straints. Horeover, he must balance the interven- tions open to him now against the possible conse- 
quences of each at some point down the road, and these consequences can range from the merely sub- optimal 
through to the irreversibly disastrous. He must make a trade-off between production and risk: at lower 
loadings and slower growth rates, the fish are less stressed, there is less need to worry about exceeding 
biological constraints, more leeway for error and more time to correct mis- takes. At high tank densities 
and growth rates, he is subject to higher risk, yet it is precisely at such levels that the facility 
should be run if  the higher capital and operating costs (relative to simpler open-pond systems) are 
to be compen- sated for. AN ON-LINE SIMULATOR AND DATABASE SYSTEM FOR MANAGAEMENT OF A COMMERCIAL FISH 
FARM Despite the higher fixed costs and greater demands for skilled management, there are considerable 
advantages, over open-pond systems, to controlled environment systems. They provide managers with more 
opportunities to optimlse operations and to maintain production at high, year-round yields, with minimal 
and foreseeable risk. Moreover, their efficiency is high because up to 90% of the water can be recycled 
and because heating can be provided by solar heat or waste heat from generat- ing plants, refineries 
and compressor stations. There is an increasing interest in Canada in using such low-grade but non-transportable 
heat sources to produce high value, easily marketed food resources. We have developed a database to 
meet the data storage and reporting needs of management and a set of simulator programs that permit the 
manager to simulate the growth and water quality condi- tions that would result from arbitrary interven- 
tions, starting from specified initial conditions, within a specified physical configuration. In Sections 
3 and 4 of this paper, we will describe the simulator capabilities and the database capa- bilities as 
independent entities. In fact, how- ever, their individual usefulness is greatly enhanced by integrating 
these two capabilities to support one another. The reasons and means for doing so are the subject of 
Section 5. As a pre- liminary to these discussions, the next section describes the software developments 
implemented to support the on-line interactive simulation and database query systems.  2. INTERACTIVE 
SOFTWARE SUPPORT PROGRAMS Most of the programs used by hatchery management (the user) are on-line interactive 
programs where the user is either prompted for specific inputs (of names, numeric values, responses such 
as yes/no, or lists of names or values) or he is issued a command prompt. At this point the user can 
enter a command directing the system to carry out an operation from the repertoire of specific actions 
that are appropriate at that point in the simulation or database query system. Each command type begins 
with a specific keyword (such as RUN, LIST, MOVE, etc.) and is followed by a definite syntactic structure 
for that command. The syntax is designed to be simple and natural and to make a reasonable English sentence. 
 The parser interface for handling this dialogue is sufficiently general and self-contalned that it can 
be used with almost no modifications in any similar system where a powerful, user-orlented command language 
must be supported. The parser interface contains features that make both the development of an interactive 
system by applica- tion programmers and the use of the system by inexperienced users quite simple. The 
parser interface was patterned on the parser used in the SIMSCRIPT system (Kivlat et al. 1975). The parser 
accepts both iteratlve and recurslve specifications of grammars so that recurslve lan- guages are supported 
hut Iterative languages are not complicated unnecessarily with recurslve defi- nitions. Also, the parser 
interface handles error recovery in ways that are not possible in batch systems such as SIMSCRIPT. 
To use the parser interface, the administrator of the parser, in consultation with the users, first defines 
the language to be used in the application system. The administrator then creates the formal BNF (Backus-Normal 
Form) grammar for the language, defining basic keywords and their operands as primitives and grouping 
primitives together to form the commands of the language. Instructions for defining a command grammar 
are given by Kara- sick (1981) in terms that can be understood by programmers with no experience of parsers. 
A notation in the BNF specification permits choices among alternatives at any point in the command and/or 
repetition factors for parsing lists or repeating phrases within commands. Repetition factors also control 
whether primitives are optional or compulsory in the command. (The administrator normally includes optional 
descrip- tive phrases in the language that act as documen- tation for the inexperienced user but which 
may be omitted by the more sophisticated user.) After the administrator has defined the grammar for 
the language, the grammar is read and analyzed by a batch program, the parser generator. This program 
ensures that the language is valid; if no errors are detected by the parser generator, a set of tables 
that define the language is created. The processing of user commands is performed by the scanner and 
parser routines; these routines are included with the other routines in the appli- cation system. The 
scanner prompts the user for each command llne and then reads the command llne and breaks the llne up 
into the component tokens. Using the table produced by the parser generator, the scanner determines the 
type of each token (keyword, operand, etc.). Each token and its type are then passed to the parser routine 
which builds a parse tree consisting of the operands entered by the user. The parser front-end then passes 
the parse tree to an application program, referred to as an action routine, which performs the process- 
ing for that command. There is one action routine for each command in the language; however, since much 
of the processing for each command is common to other commands, each action routine normally consists 
of CALL statements to subordinate rou- tines which perform the actual processing. If the language is 
non-recurslve, register variables can be specified in the grammar as being associated with particular 
keywords or operands in the parse tree. This facility allows a "window" directly into portions of the 
parse tree so that the pro- grammer knows exactly where user-entered operands are located without having 
to perform a search of the parse tree. If a register variable is associ- ated with an operand that can 
be repeated, the register variable points to a llst of pointers into the parse tree. Since both the 
scanner and the parser are driven by the tables produced by the parser generator, almost no modifications 
are required in order to use the scanner and parser routines in a different application. The scanner 
should never need to be modified, and the only change to the parser that is required is the addition 
of a front-end that contains a CALL statement to invoke the associated action routine for each command 
in the language.  A.N. ARNASON, C.J. SCHWARZ, D.H. SCUSE In order to make it as easy as possible for 
the user to enter a command correctly, the parser gen- erator automatically abbreviates keywords as much 
as possible. (For example, "TANKTEMPERATURE" was abbreviated to "TANKT".) However, the administra- tor 
may over-ride this feature for a keyword and specify explicitly the number of characters that must be 
entered before a keyword can be recog- nized. This feature ensures that certain major commands (for example, 
the END command that termi- nates a session) are not executed as the result of a typing error. As a 
part of the grammar, the administrator may also define aliases for keywords and frequently used operands. 
These aliases are automatically abbreviated by the parser generator. (For exam- ple, "FTYPE" was defined 
as an alias for "FOODTYPE"; "FTYPE" was then automatically abbre- viated to "FT" by the parser generator.) 
As part of its processing of a grammar, the parser genera- tor examines the abbreviations and aliases 
to ensure that there are no ambiguities. If an ambi- guity is found, the parser generator issues a warning 
message and indicates how the ambiguity will be resolved. The administrator may either accept the parser 
generator's resolution of the ambiguity or make the appropriate change to the grammar to remove the ambiguity. 
At the end of processing, the parser generator prints a llst of the abbreviations and aliases that have 
been defined for each keyword and operand. The scanner also supports a text-substltution fea- ture (similar 
to SIMSCRIPT's "DEFINE TO MEAN") and sophisticated command retrieval and editing fea- tures that allow 
the user to reduce the typing of long inputs. The scanner performs all of the manipulations of abbreviations, 
aliases, and sub- stitutions in order to keep the parser independent of the grammar. As a result, abbreviations 
and aliases can be changed by regenerating the parser tables without having to modify the action rou- 
tines. Because of the latitude allowed by the parser sys- tem in accepting abbreviations, aliases, and 
sub- stitutions, the user should not have much diffi- culty in entering commands correctly. However, 
should he make a mistake in entering a command, the parser generates a detailed error message (as opposed 
to the message "ERROR, RE-ENTER INPUT" produced by many systems) that tells him which part of the command 
is invalid and the reason why it is invalid. For many errors, the user is prompted to re-enter only 
the portion of the com- mand that is invalid and the remainder of the com- mand does not have to be re-entered. 
 The parser interface removes much of the tedious work involved in implementing an application sys- tem 
that requires a complex command language. The parser can be installed quickly and easily because almost 
no changes need be made to the source code for the parser. Because of the work performed by the parser 
generator in determining how each com- mand must be parsed, the parser routine is able to parse each 
command very efficiently. 3. THE SIMULATOR PROGRAMS Two fish growth programs are available to the user. 
They are referred to as the "single-flsh" program and the "multl-tank" program.  3.1 The Single-fish 
Program  This simulator uses a deterministic differential growth equation model to simulate the growth 
of a single (representative) fish without density, biological or system constraints. Specifying tank 
or system information is thus unnecessary. The program is designed to permit the user to explore the 
properties of the underlying model (which is also the basis of the multi-tank model) in response to various 
sets of initial conditions and rearing conditions. Rearing condition variables are: species (or strain), 
food type, feeding rate (either percent or level) and temperature. Inl- tial conditions are the initial 
weight and time interval increment (DT or WITH time), reporting interval (BY time) and elapsed time (FOR 
time). Species and foodtype are generally chosen in response to prompts and then the user will gener- 
ate tables of results by using the three main com- mands to SET rearing conditions, RUN the model, and 
LIST various growth consequences. For exam- ple: SET INITIALWEIGHT=(.05,.I) SET TEMPERATURE=(8,10,12) 
FEEDLEVEL=(.5,.75,1.O) RUN FOR 4 WEEKS BY i ~EK WITH DT=I DAY LIST INITIALWT, FINALWT, INSTGROWTH, 
FEEDPERCENT  will produce a table of the variables in the LIST command that result from the first week's 
growth using daily (but unreported) updating. The table has 18(=3x3x2) lines, one for each possible combi- 
nation of rearing conditions. Initial weight is then automatically re-assigned the final weight and the 
table is regenerated for the second week's growth, and so on. The differential equation for growth is 
based on that given by Sparre (1976). Sparre's model includes an explicit relationship between feeding 
percent and feeding level so that the user can specify ration in absolute or per- centage amounts or 
by feeding level. These con- versions are recomputed every update interval (DT), as are oxygen consumption 
and ammonia pro- duction rates as these change with increasing fish weight. The model in fact has an 
analytic solu- tion for fixed feeding level, but it is not real- istic to use this as it would imply 
continuous adjustment of feeding percent as the fish grow. When feedweight or feedpercent is specified, 
the updates provide a finite approximation to continu- ously changing feeding level. The results turn 
out to be fairly insensitive to the choice of DT, provided DT is kept fairly small, generally less than 
I week, but possibly smaller at very high growth rates. Auxiliary equations (currently also from Sparre) 
predict oxygen consumption and ammo- nia excretion over the growth interval, but we are in the process 
of revising these equations (see McLean 1979 and Paulson 1980 for recent reviews). We are also revising 
Sparre's model, which was developed for open ponds at relatively low temper- atures, to give more realistic 
temperature respon- ses. Sparre's model gives monotone increasing growth rates as temperature increases 
(for fixed rearing conditions other than temperature), but AN ON-LINE SIMULATOR AND DATABASE SYSTEM 
FOR MANAGAEMENT OF A COMMERCIAL FISH FARM salmonlds generally show an optimum growth rate at around 16 
degrees centigrade, dropping off steeply above that, and more slowly below that. The nature of the response 
is highly specles-specific, but most salmonids can grow at temperatures in the range 5-20 degrees. The 
parameters of the growth model are species and food-type specific; these are provided by matching the 
species and food name to labelled entries in the species file. Orig~- nally we had also hoped to have 
a food-type file that would permit the conversion of one type of food into equivalent units of a standard 
food, but fish physiologists have convinced us that this hope may be illusory. Species file entries are 
 thus each specific to a particular food and strain, and some entry must match both the user- supplied 
names before simulation can proceed; that entry then supplies the parameters for the growth and auxiliary 
equations. 3.2 Model Calibration Entries to the species file require calibration (fitting) of the model 
to experimental data. The data is generated in carefully planned experiments over a factorial combination 
of rearing condi- tions. Variation in growth response at each level of conditions is used for weighting 
the mean response and for fitting an auxiliary equation for variation about the mean required by the 
multi- tank programs. However, calibration is largely a process of finding those parameters that make 
the predicted growth at those levels most closely cor- respond to the observed mean growth. Some of the 
parameters can be found by using weighted multiple linear regression on transformed growth and level 
variables. Particularly useful are experiments at maximum ration and at starvation since each of these 
causes some of the growth parameters to drop out of the model (see Sperber et al. 1976). How- ever the 
remaining parameters will have to be cho- sen by non-linear optimisation; i.e. a directed iterative search 
for the parameters that minimize the distance between the observed mean response and the predicted responses. 
The slngle-fish pro- gram factorial tabulations have been designed to provide those predicted responses 
in the same form as actual mean responses. We are in the process of developing programs that will automate 
this calibration process as much as possible, by extracting data from the database, checking it for completeness, 
formatting it into tables, and invoking the slngle-fish routines and regression routines to carry out 
the job. As we shall see, there are many other auxiliary equations that must also be fitted before the 
higher level multi- tank models can be used. 3.3 The Multl-tank Program This simulator is intended 
to allow the user to simulate, in a single session, every significant action and observation that could 
be carried out at a real or hypothetical production facility over an extended period of time. Here the 
population is structured by weight classes and by tanks. The underlying model is a second-order Markovian 
model: Markovian in that the current state of the system, but not its history prior to the current time, 
determines its future course; it is second- order in that it accounts not only for average growth but 
the variability (in fact the entire distribution) about that average. The model is nevertheless still 
entirely deterministic, in that we make no use of random numbers or variables. For a group of fish, 
all of identical initial weight at time t, grown for a known time (dr) under identical rearing conditions, 
the mean final weight (at time t+dt) can be computed from the single-fish model. An auxiliary equation 
predicts the variance as a function of dt and mean final weight w(t+dt). This completely specifies the 
final weight distribution if one assumes a Normal distribution, which can reasonably be assumed over 
short growth intervals. However, the multl-tank program does not keep track of individual fish, nor the 
complete distribution of groups of fish, but only of counts of fish per weight class. This can be obtained 
by integrating the Normal distri- bution in each weight class J, from say UB(j-I) to UB(j) where UB is 
the upperbound of the j-th weight class. This gives p(jlw), the probability that the fish are in class 
j given that they began at weight w. The numbers of fish out of n, in each class are, in expectation, 
n(j)=n.p(jlw). The p(jlw) are multiplied by a further auxiliary equation to model survival, as a function 
of ini- tial weight and dt, giving n(j) = p'(jlw) = n.s(w,dt).p(jlw) where s is the survival func- tion. 
The n(j) are, in fact, the expected values of observations from a multinomial distribution with parameters 
n and p'(jlw) and this implies independence of growth and constant assignment probabilities for all fish. 
There is some evidence (Thorpe 1977) that this may not be so; it shows up in bimodality in the distribution 
of fish grown together over several months, and there is some controversy as to whether it is due to 
genetic variation, or behavioural interactions (e.g. dominance) among the fish. It is to avoid such 
problems that hatchery management tries to keep the weights of fish within tanks fairly homo- geneous. 
This practice also keeps the growth model accurate without the need to model depen- dence and non-Markovlan 
effects. The p'(jlw) do not completely specify the growth dynamics, because we do not record the weight 
w for all fish at time t, but only have a count n(i) of the number of fish in class i at time t. The 
distribution of weights within classes also con- tributes to the variation in the final weight dis- tribution. 
Sparre (1976) solves this problem by assuming the n(i) fish are uniformly distributed within their weight 
class and integrates out ini- tial weight w(i) over UB(I-I) to UB(i) in the equation for p'(jlw(1)) to 
produce the transition probabilities p(i,j), the proportional contrib- ution per fish in class i at time 
t to class j at time t+dt. The sum of the elements in row i of this matrix can be seen to give the average 
sur- vival rate of class i fish. We found Sparre's approach too expensive to implement, as the trans- 
ition matrix is large and must frequently be recomputed, and both the uniform and Normal inte- grations 
must be done numerically. We replaced the uniform assumption by a two point discrete distribution within 
class i at wm(i)+g and wm(i)-g where wm(i) is the midpoint weight of class i, (UB(i) + UB(i-I))/2, and 
g is chosen to give the same within class variance as a uniform distribu- tion. Thus the resultant distribution, 
induced by growth of the n(1) class i fish, is the mixture of  A.N. ARNASON. C.J. SCHWARZ, D.H. SCUSE 
two equally weighted multinomlal distributions. One of the numeric integrations has been replaced by 
the sum of two (vector) terms, giving a row of the transition matrix. Multiplying the vector of initial 
counts n(t) by the transition matrix T(p(i,j) I dr,R) for specific rearing conditions R, gives the final 
expected structure n(t+dt). This procedure works well if the class boundaries are fairly narrow. We 
have implemented it using some 50 background classes where class width is never more than 10% of the 
lower class bound. It produces growth runs, under fixed rearing condi- tions starting with fish all in 
one weight class, which are very close in expectation to the pre- dicted mean weight from the single-flsh 
model using the same rearing conditions and initial weight. This correspondence is vital if the cali- 
brations of the single fish model are to have any relevance to the multl-tank simulations. The user does 
not want to see the census in every tank for every background class however. We have therefore allowed 
the user to define up to 20 foreground classes whose cut-points align with a subset of the background 
classes. Whenever a census is dis- played, the background counts are aggregated up and displayed rounded 
to integers. For accuracy, background class counts are kept as reals. The user can also display the background 
census if he wishes. The foreground cutpoints can be RESET at any time and all simulations are invariant 
to the current foreground definition. The multi-tank model permits much more than simple growth runs 
under fixed rearing conditions. The user is prompted to specify the level of con- straints he wishes 
imposed, the number of tanks, and his foreground class definitions. For each tank, he specifies a label 
(tank name) and, if necessary, a type which refers to tank configura- tion parameters (volume, filter 
capacity, flow capacities, re-oxygenation parameters, etc.) stored in a tank-type file similar to the 
species file. He is then prompted for the species, food and initial (by weight class) vector of fish 
load- ings. After the initial prompts, the system issues the command prompt which is the current period 
(P= ) and time (T= ), both initially 0. Period is a counter of the number of run itera- tions that have 
been reported (BY increments in the RUN command). The user can now SET rearing conditions (including 
changes to species in empty tanks) such as temperature and feeding regimen (by feed weight, percent or 
level) for each tank. He can then RUN FOR a certain elapsed time, saving results BY given intervals WITH 
updating every DT time units. Results for the census and conditions in each tank are saved out to a file 
or to the database at each BY period. When the RUN is done, the updated period and time prompt is displayed 
and the user can LIST census, growth and related variables in some or all of the tanks at the cur- rent 
time. He can then ADD new fish into tanks, MOVE fish between tanks, provided he does not attempt to mix 
fish of different species, and REMOVE fish from tanks, all by numbers or percent- ages by welghtclass. 
These movements can be done by reference to either foreground or background classes. The rules for how 
a given number of fish in foreground are distributed over background will not be given here, but the 
ability to specify foreground classes makes the movement commands more succinct and powerful. Now the 
user can again SET rearing conditions, or use LIST to see the effects of his movements and SETs, and 
then RUN again. In this way, the user simulates an actual or hypothetical strategy of interventions and 
conditions. If the simulation runs into infeasible loadings or environmental conditions, the user can 
BACKUP to a previous period and try a different strategy. One can, in fact, BACKUP and ADVANCE freely 
through the saved tank structures file, and this will re-locate the user to some previously generated 
time and re-establlsh the conditions, at that time. He can then try another strategy from that point, 
using SET, MOVE, RUN etc. Depending on whether he is saving to a stand-alone flat file or to the database, 
a RUN may or may not obliterate all saved structures after the current time. Detailed instructions for 
using the simulators are given in Arnason et al. (1981). Levels of multi-tank modellinK. To help the 
man- ager cope with the difficulties of planning inter- vention strategies that will keep within biologi- 
cal and system constraints, we are permitting use of the multi-tank programs at one of 5 different constraint 
levels. A sixth level, that keeps track of the costs and benefits of interventions, is planned. The 5 
constraint level models are listed below in order of increasingly strict biol- ogical constraints. These 
levels are also in decreasing order of the directness of control over the environmental conditions provided 
by the interventions which are at his disposal at this level. (Recall that interventions are variables 
which are always immediately and independently manipulable by the manager.) Thus finding feasi- ble strategies 
becomes more difficult at higher levels. The multi-level system permits him to find promising strategies 
quickly at a lower con- straint level and then to test if they are viable at a higher constraint level, 
or conversely, to find additional or less direct-actlng interven- tions that will keep conditions within 
the higher level constraints while preserving a lower level growth strategy. Having specific growth 
models and auxiliary models for environmental effects permits a more explicit definition of rearing conditions 
and biological constraints. Rearing conditions are those vari- ables which are needed to completely define 
the growth, death and auxiliary equations for a given level model. The biological constraints are the 
range of environmental conditions within which the rearing condition variables give valid model pre- 
dictions and acceptable growth and survival rates according to user-set limits. A variable, such as oxygen 
in the tank water, may enter only into the biological constraint equations at one level, but at a higher 
level, may become a rearing condition variable where its effect on growth must be explicitly modelled. 
The range of values over which the model is valid remains part of the blol- ogical constraints. When 
biological constraints are exceeded, the user is warned and the RUN ter- minated at the last feasible 
(BY) time. Of the following levels, 1 is fully implemented, and 3 are partly implemented and 4 and 5 
have been allowed for in the program and command structure but are not yet started.  AN ON-LINE SIMULATOR 
AND DATABASE SYSTEM FOR MANAGAEMENT OF A COMMERCIAL FISH FARM 147 I. The Basic (unconstrained) model: 
This model is analogous to the slngle-flsh model. The user must specify for each tank a valid species/fo- 
odtype that exists on the species file. Tank names, but not types, are specified merely as identifiers 
of individual tanks for use in movement and SET commands. The rearing condi- tions are feeding rate and 
temperature and these are also the permissible interventions (in addition to movements). Death rate 
is independent of rearing conditions. This model calculates, in response to interventions, the new census, 
total weight, instantaneous growth rate, and keeps track of total food fed, oxygen consumed and ammonia 
produced on a tank by tank basis. 2. The Tank Effects model: The user must now specify a valid tank-type 
for each tank so that tank volume and filter parameters are known. He must SET recirculation and makeup 
rates but temperature can be either directly set or indi- rectly set by setting air temperature and makeup 
temperature. No restrictions are placed on flow rates. Tank levels for oxygen and ammonia concentrations 
are computed and these can be checked to see if they are within biolo- gical constraints given the current 
density, mean fish weight, growth and feeding rate. Warnings are issued, but the rearing conditions are 
as for the Basic model and deaths, within the constraints, are still independent of rear- ing conditions. 
 3. The Tank Constraints model: The user has the same level of intervention control as in level 2 but 
now oxygen and density become rearing conditions in that they affect the death rate. There is some evidence 
(M. Papst, pers. comm.) that they should also begin to affect growth rate long before there is an appreciable 
effect on deaths. The biological constraints are adjusted to operate on the death rate instead of on 
oxygen level directly. Ammonia levels are still checked directly. Recirculation and make-up rates must 
be within maximum tank capacities. Declines in filter efficiency will be modelled and backwash interventions 
must be made. If temperature is specified directly, it must be in the range that can be delivered by 
the make-up water and will determine the make-up percentage needed to achieve that temp- erature. If 
any constraint is exceeded, simu- lation stops.  4. The System Effects model: This model will com- pute 
the total simultaneous demands made by all the tanks on the physical plant. A system file will specify 
volumes available in the holding tanks and maximum replacement rates. Tempera- tures in the holding tanks 
will be set by the user, and volumes and rates can be exceeded by the fish tank settings with only a 
warning.  5. The System Constraints model: Here, demands on the system that exceed the specifications 
in the system file entry will halt simulation. In addition, water and air temperatures and avail- ability 
of heated water will not be under direct user control, but will vary according to seasonal averages. 
Simulations must therefore  begin at a user-specifled absolute date (e.g. January I) within the year. 
 We are only just beginning to develop the many auxiliary equations needed to model environmental effects 
and to establish biological constraint equations. A second year's cycle of production runs at the Rockwood 
hatchery and a set of special calibration runs will permit us to judge the validity and relevance, for 
these purposes, of the many models and relationships that have been put forward in the massive literature 
on fish growth, physiology and tank filtration systems. Ini- tially, we will use literature values and 
the experience of hatchery personnel to set con- straints very conservatively. AS the data in the database 
and the means to manipulate it and report it increase, the constraints can be fine tuned to permit more 
daring strategies. 4. THE DATABASE SYSTEM The database system programs have received as much attention 
as the simulator programs. They include programs to edit hatchery data and load it to a structured database; 
batch programs to create, structure or restructure, and preserve backups of, the database; batch reporting 
programs to produce large, time ordered, collated reports on database contents; and an on-line QUERY 
program for inter- active interrogation and display of database con- tents. Perhaps the most interesting 
program fea- ture is a database interface, which facilitates the development of applications programs 
which need to access the database. 4.1 Data Collection and Entry Hatchery data forms have been designed 
in collab- oration with hatchery management personnel. Cur- rently, data is transcribed to these forms 
from an existing paper records system, but we shortly expect to revise the forms and develop regularised 
procedures for what data is to be collected, and when, and then switch to direct recording on the data 
forms. These procedures are beneficial in their own right as they tend to formalize the data collection 
process, help to ensure data is com- plete, correct, encoded according to uniform and well documented 
standards. The very process of designing the forms and procedures forces hatchery managers and database 
analysts to clarify the pur- poses to which the data will be put and to ensure that all associated measurements 
are made so that those purposes can be met. For example, to assess the effect of movement and flow interven- 
tions on environmental variables it is vital that the latter variables be recorded just before the intervention 
and just after equilibrium conditions are re-established (usually within the time taken for one tank 
turn-over of water). In general, the proper time sequencing of all records is crucial, but this can be 
difficult to ensure with irregular procedures. The following data forms are currently used. i. Group 
form: this identifies a given production cycle at a specific hatchery. It is not necessary to identify 
system configurations and constraints, but simply to identify a system (hatchery) name that exists on 
the system file (like the species  A.N. ARNASON, C.J. SCHWARZ, D.H. SCUSE and tank~type files, whose 
entries are created by the system developers). 2. Tank forms: identifying each of the tanks by name 
and tank type (which must exist on the tank- type file).  3. Species in tank form: identifies the date, 
tank, and species name whenever a new species is placed into an (empty) tank. The database will not permit 
mixing of different strains or species in a tank.  4. Intervention forms: records the time, tank and 
new settings whenever feeding regimen (foodtype, method or amount), flow rates (recirculation or makeup), 
or backwash frequency are altered.  5. Environmental Variables Forms: record oxygen levels, pH, temperature, 
and metabolite levels (ammonia, nitrate, nitrites) in tank, filter out- flow, and recirculation inflow 
water. Air temper- ature is also recorded.  6. Census forms: these are the most complicated as they 
may specify varying amounts of detail about the number and size distribution of fish in a tank at a given 
time. It may give only a total count, or an estimated count and mean weight per fish based on a small 
(25-100 fish) random subsample, and may include length data on individual fish in the subsample. The 
latter data provide the only means by which an actual weight distribution can be inferred (after transforming 
to weights using a log-linear weight-length relationship). Census data rarely contains a complete census, 
except when an empty tank is initially loaded with fin- gerlings. It should be noted that real census 
data is by no means as complete or as conveniently summarized as a multi-tank simulation census. With 
some care to ensure data completeness, and a good deal of "massaging", the weightclass distri- bution 
can be estimated from the census data in the database.  7. Movement forms: are a census form for the 
fish being moved with the time, from-tank, and to-tank specified as well. (ADDs are from special tanks 
called BUY or NE~J and REMOVEs are to SELL or DESTROY). A special null census is recorded for the from-tank 
if the move has emptied out the tank. In other cases, it can be difficult to infer if a random or a size 
selective sample was taken from the from-tank, but movement forms always report, at least, the total 
count and total weight of fish moved.  8. Death forms: record the tank, fish length, and removal time 
of individual dead fish.  The differences between real and simulated data, mentioned here, are relevant 
to the discussion of the simulator/database interaction discussed in Section 5. Once data forms are 
key punched, they are run against a batch program that does range and type checks on all fields. When 
this program runs without error, the data cards are sorted so that group forms and tank forms precede 
all other forms. These database segments must be created first as the database load program rejects forms 
 that refer to tanks for which database segments do not exist. The load program is run against the sorted 
input data and writes out an error log for any forms that need corrections. The level of consistency 
checks on the data is still fairly rudimentary. We do not check for correct time ordering and associations 
among segments (e.g. that a census is present for each interven- tion), nor that census or movement 
data are con- sistent with past census, death and movement records for that tank (e.g. that a movement 
seg- ment does not remove more fish than are actually in the tank). Many of these checks will be possi- 
ble when an interactive UPDATE database loading program is developed. 4.2 Database Structure and Interface 
 The fish farm database is manipulated using IBMts Information Management System (IMS) database sys- 
tem. The IMS database is quite complex , involving logical relationships and special indicators in the 
segments. All of the information from the input forms is stored in IMS segments, with each segment containing 
the information about a partic- ular entity (for example, a tank, a temperature change, etc.). The organisatlon 
of the segments in the database is shown in Fig. I. GROUP I I F I I i I ~ I0 segment types for 
02 T~P pH NO2 NO3 NH3 SPCINFO I ~ ~ I CENDAT I BACKWASH FLOWS DEATH and FEEDING FIGURE 1 The GROUP 
segment contains the description of an experiment at a hatchery, including the date on which the experiment 
was started, and any con- straints that apply to the hatchery. Subordinate to each GROUP segment is one 
TANK segment for each tank being used in the experiment. The TANK seg- ment identifies the tank and contains 
any con- straints that apply to that tank. Subordinate to each TANK segment are the segments that describe 
the contents of the tank and the events that have occurred during the experiment. The database rou- tines 
automatically insert the BUY, SELL, NEW, and DESTROY tank segments. A SPECIES segment defines the type 
of fish in the tank and the major  AN ON-LINE SIMULATOR AND DATABASE SYSTEM FOR MANAGAEMENT OF A COMMERCIAL 
FISH FARM ]49 characteristics of that species. The remaining segments store information directly off 
the corre- sponding input forms. All of the segments subor- dinate to the TANK segment (except TANKINFO) 
are stored in date-tlme order so that accessing the segments provides a picture of what happened in the 
tank as the experiment progressed. The MOVEMENT (MOVES in Fig. I), ADD, and REMOVE (REM) segments require 
extra processing by IMS because they participate in an IMS logical relationship. Whenever fish are removed 
from (or added to) a tank, the corresponding number of fish must be added to (or removed from) another 
tank in the group. This processing is required in order to keep the database consistent and to simplify 
the processing in the application programs. The complexity of the IMS database used to store the fish 
farm information necessitated the inclu- sion in the system of a routine that would sim- plify access 
to the database. This routine, called the database interface, controls all access to the database: any 
application program that requires information stored in the database issues a request to the database 
interface and the inter- face then issues the appropriate command to IMS. The interface was used not 
only to make it easier to extract information from the database but also to provide data management facilities 
that are not provided by IMS. All information that is required to issue a request to the interface is 
included in a data structure that the application programmer copies into the application program from 
a system library. This data structure defines the format of the segments that can be accessed and also 
con- tains command and key fields that are set in the application program, and status fields that are 
interrogated by the application program. The application programmer sets the command field for each type 
of segment to be processed (more than one segment type can be processed with each request), and, if a 
particular segment is to be retrieved randomly, sets the key field of the seg- ment. Special commands 
were defined to permit the application programmer to retrieve the first seg- ment with a key greater 
than or the first segment with a key less than the specified key since much of the processing is in date-tlme 
order and the application programmer may not know the exact time (field) of the desired segment. This 
is particu- larly important for the QUERY programs described in the next section. The system, tank 
and species information segments indicated in Fig. 1 are not, in fact, stored in the IMS database, but 
in the flat (random access) files which we have been calling the system configuration, tank-type and 
species files. This permits easier modification of the information, and reduces the complexity of the 
IMS database since the information in the files could not have been stored there without significant 
redundancy. Nevertheless, the programmers" view of the data- base is as if it were structured as in Fig. 
I. The interface handles the access to these files and the programmer does not need to be concerned 
with how they are structured or where they are stored, even if these should change. The use of the database 
interface has made the development of the fish farm system much easier because the application programmers 
have been able to concentrate on the high-level manipulation of the information in the database instead 
of having to be concerned with the low-level details of how the information had to be accessed using 
IMS or the flat files. Some additional ways in which the interface simplified the writing of application 
programs are given in Sections 4.3 and 5. The database interface reduces the time and coding required 
to implement the database functions of the fish farm system and to ensure that they are operating correctly. 
A more detailed discussion of database interfaces is given by Scuse (1981). 4.3 Database Reports Information 
from the database can be generated using batch programs for large printed reports or using an on-llne 
QUERY program for selectively exploring the database and producing short compar- ative reports. There 
are 2 main batch programs written using EASYTRIEVE/IMS (Pansophlc Systems Inc.). The first is a dump 
of the complete database in stor- age order that is convenient for checking the information fields against 
the original records. Thus the information fields are listed, in the following nested order (slowest 
changing variable first): for every group, for every tank, for every segment type, from first to last 
time. The second, and most useful report, is the withln-tank merged information report, which produces 
a list- ing of the following form, for each tank and with times in increasing order: TIME SPECIES MOVE 
CENSUS EVENT ETYPE date data data (removes to) date data (empty tank) date data (new species) date 
data data (added) date data FEED date data 02 date data date data FEED Now, for the first time, 
the manager can see a log of everything that happened in a tank, in the order it happened or was reported. 
He can see how water quality variables change in response to tank loadlngs and other interventions (feeding, 
flow, temperature). He can easily identify "growth- sets": time intervals when a group of fish are subject 
to given rearing conditions during which no fish are added to or removed from the tank, apart from deaths. 
With adjustments for any deaths, the census and feeding data within such intervals can be used to compute 
actual growth rates and conversion ratios (kg. food fed/kg. growth produced). The merged reports also 
facili- tate comparisons between tanks or groups and will be altered to permit comparisons of SAVEd simula- 
 tion results within a group (see Section 5). The on-llne QUERY program has a DISPLAY command that produces 
a succinct table of contents of the database (group and tank names and descriptive comments). A very 
powerful LIST command then  A.N. ARNASON, C.J. SCHWARZ, D.H. SCUSE permits the user to specify a group 
or set of groups, a tank or set of tanks (which must be com- mon to the groups if more than one group 
is speci- fied) and a time or range of times, and finally a list of variable names. Currently, all 
the vari- able names identiEy various segment information fields. A table of these variable values 
is then given for all groups, tanks, and times. However, QUERY also remembers your "position" (group, 
tank, time) in the database, and this allows the user to use LIST sequentially, in an exploratory way, 
by specifying the TIME keyword within the LIST com- mand as NEXT, PREVIOUS, FIRST, LAST, etc. Fea- tures 
in the database interface support the multi- positioning (if more than one tank is specified), the backwards 
and forward searches within seg- ments, and merges among segments required to do this. Presently, we 
will also add variable names for derived variables (e.g. growth rate and con- version ratio), and the 
action routines to compute them from database entries at 2 or more times, checking that these times are 
within a "growth set". The LIST command within QUERY will then produce information in every way comparable 
to the LIST command within the multi-tank simulator, but with allowance for the additional complications 
of real data. It will then be a powerful investiga- tive tool for monitoring growth performance, and 
extracting the data needed to fit and validate the various auxiliary equations of the models. 5. INTERACTION 
BETWEEN DATABASE AND SIMULATORS Despite the already proven value of the database and simulation systems 
as independent entities, neither system is adequate, by itself, for devel- oping optimal management procedures 
for fish farms. No amount of actual data, or generated reports, can predict the effect of untried strat- 
egies, while the simulators" predictions are of little value unless the growth models and auxil- iary 
equations are fitted to, and validated against, real data. There are two main applica- tions where the 
simulators must access the data- base. First, it is desireable to SAVE simulated interventions and results 
(censuses, etc.) to the database; and secondly, one would like to be able to extract real initial census 
and rearing condi- tions from the database, and then use subsequent real interventions to drive the simulators. 
We will describe what can be achieved by these appli- cations, and how we are going about achieving them. 
As a preliminary, it should be pointed out that such applications would he very much easier to implement 
if simulated and real data were iden- tical in form and quality. They are not, and this creates formidable 
difficulties that must be resolved by compromises from both ends: by alter- ing the applications programs 
to make them cope with less than complete (real) data, and by devel- oping more stringent protocols on 
the way actual data is collected to ensure it is more complete.  5.1 Saving Simulation Results to the 
Database There are considerable advantages to saving a com- plete record of the results of a simulation 
run to the database, above and beyond what can be saved without using the database. Even without the 
database, a session can be saved and/or regener- ated. This is because the multi-tank programs maintain 
an echo and a prompts file. The echo file lists every user input and system response and can be directed 
to the printer at the end of a session to preserve a hardcopy of the complete session at the terminal. 
The prompts file con- tains a list of every prompt response and command entered by the user. It can 
be used to regenerate the session automatically until the end-of-file is hit, at which point input 
is sought from the ter- minal. The user can then resume the session where he left off in the earlier 
session when the prompts file was saved. (This is particularly useful when the session terminates abnormally; 
the user simply edits out the last few lines of the prompts file and then uses it to regenerate the 
 session up to the point where the error occured.) Variations on a past strategy can be explored by 
 resuming the session in this way and using BACKUP to locate to a past period and re-RUNnlng from that 
point. As we pointed out in Section 3.3, this obliterates the previous simulation from that point on 
and no direct comparisons can be made between the variations. Saves to the database do not have this 
consequence (within limits) so that one can bring to bear the full power of the data- base reporting 
system to produce comparative reports, although this must be done in a separate batch report or QUERY 
session. Second, saves to the database are not in the form of a sequence of prompts, commands and system 
responses (as are the echo and prompts files), but are formatted into structures, passed to the database 
interface, and stored as database segments whose structure and organisation are (virtually) indistinguishable 
 from real data. Thus comparisons between real and simulated data are also possible. Some of the database 
and interface design features that make this possible will now be discussed. One of the design objectives 
of the database was to achieve non-redundant storage of real and simu- lated data, where these might 
share common move- ment and event segments (i.e., for interventions) hut possibly different census segments 
and event segments for environmental variables (i.e., system responses). This has obvious applications 
for validating simulated runs against equivalent real runs. Similarly one might wish to store varia- 
tions on a basic simulation strategy, where these might share common intervention and response seg- ments 
up to some period and then diverge. Two features help to achieve this. The first is that the simulators 
share with the database, the spec- ies, tank-type and system configuration files. This ensures that whenever 
two or more real and/or simulated segments refer to the same entry in any one of these files, they are 
guaranteed to provide the same information. The database interface han- dles these references automatically 
without the applications programmer needing to know anything about how they are stored. Secondly, each 
segment (except the GROUP and TANK segments -see Fig. I) contains a 4-byte simulation mask enabling the 
interface to determine which simulations the seg- ments belong to. This mask field has 32 bits, the 
rightmost indicating whether or not the segment represents real data, the remaining 31 bits repre- senting 
simulations (variations) 1 to 31. Now, when in response to a prompt, the user indi- cates he wishes 
to SAVE to the database, he is asked if he wishes to create a new GROUP segment.  AN ON-LINE SIMULATOR 
AND DATABASE SYSTEM FOR MANAGAEMENT OF A COMMERCIAL FISH FARM 15] If he does, he supplies the group and 
tank infor- mation and the simulation number is set to I. Multi-tank simulation now proceeds exactly 
as described in Section 3.3, but all interventions and results are stored out to the database as seg- 
ments. We also allow full use of BACKUP and ADVANCE. If at any point, however, he does a RUN from a period 
other than the last, the simulation number is incremented by I. The past history seg- ments shared with 
the previous simulation number are indicated by simply flipping to ON the simula- tion bit corresponding 
to the new simulation num- ber for all segments of the old simulation up to that period. This is handled 
automatically by the interface. From this period on, the two simula- tions will have distinct segments, 
even if some of these happen to coincide. Groups created in this way have no real data, except possibly 
for real species, tank-types and system configurations. A FETCH command permits the user to locate to 
an existing group in the database, automatically positioning him to the last period of the highest simulation 
number. Comparison reports of simula- tion variations and reversion to lower simulation numbers cannot 
be done from the simulate programs. Implementation of the features described to this point are near completion. 
Those that follow are just being begun.  5.2 Using Real Data to Drive the Simulator. The structure 
of the database and the properties of the interface make this a fairly straightfor- ward application, 
but problems arise from inade- quacies in the real data. In principal the proce- dure will work as follows. 
The user is prompted for the name of an existing group containing real data. If it exists and has real 
data in it (the group segment contains a single bit flag for indi- cating this without the need to check 
for segments with the simulation bit 0 turned on), the user is prompted with the time of the first and 
last cen- sus and asked to choose a starting time between the two. The system must then search back from 
that time to find the preceding census, and the relevant conditions and system settings that per- tain 
at those times, depending on the simulation level in force. For example, if the Basic model is in use, 
only the species-in-tank, tank-tempera- ture, feeding regimen, and census segments are needed to establish 
initial conditions. The tank segments are needed only to inform the user of the number of tanks and their 
names. If the simula- tion is at the Tank Effects or Tank Constraints level, the oxygen and metabolite 
concentrations, and flow rate conditions must be determined, as well as each tank-type. The database 
interface is now set up to handle this backward search, even though IMS, which is used to structure the 
data- base, does not support backward processing. The structuring of the database, by date-time order 
within tanks for every segment type also facili- tates this, and the extraction of interventions. Having 
established initial conditions, the system then determines which segments are relevant inter- ventions 
at this level of modelling (e.g., feed- ing, ten~erature and movements for the Basic model) and gets 
the next segment of each of these for every tank. The interface is set up to handle this with very little 
coding on the part of the applications programmer. The first of these interventions is presented to 
the user and he has the chance to modify it before implementing it. Implementation involves doing a RUN 
up to the time of the next intervention (if this time is not neg- ligible), carrying out the intervention 
(e.g., a MOVE or SET), and storing out the relevant simu- lated response variable segments (e.g., CENSUS, 
EVENT segments of Fig. I). This process is then repeated for the next intervention. Real tank censuses 
would also be considered as interventions for this purpose so that one could compare each one with the 
corresponding simulated census as one went along. However, more complete comparisons would be done using 
the reporting features of the database system (Section 4.3). When the user ter- minates this process, 
or comes to the end of the group segment data, he can either continue simu- lating (to plan future strategies 
or alternative strategies after the termination point), or use BACKUP to relocate back to an earlier 
time, and then explore (as described in the previous subsec- tion) for alternatives that might have improved 
on the real strategy. This provides a local optimi- sation feature by means of gaming. The difficulties 
in doing this are not inherent in the mechanics of accessing the database or driving the simulator, but 
in the inadequacies and ambigu- ities of the real data. Extensive checks must be done to ensure that 
the real data are complete enough to provide all the initial conditions and interventions required at 
the desired level of simulation. As we mentioned in Section 4.1, not all census and movement segments 
give reasonably complete weight distribution information. Those that don't will have to be handled differently 
from those that do; the former by additional prompting or extrapolation, the latter by massag- ing to 
reconstruct a distribution over the stan- dard background weightclasses of the simulator. To prevent 
having to do this repeatedly, the cen- sus segment has been given a flag to indicate this has been done 
and a child segment (CENDAT in Fig. i) for storing the count vector. Derivation of the vector requires 
the use of (length-weight relationship) parameters which are currently stored in the species file. However, 
these param- eters are not really invariant even within strains, and may have to be refitted from the 
cen- sus data within each group. There are also incon- sistencies between real and simulated time that 
will have to be resolved. Simulated interventions can be carried out instantaneously, but real interventions 
are spaced out in time. Often the recorded time intervals are more notional than real, intended to preserve 
the actual ordering of events rather than their actual time of occur- rance. This creates problems in 
determining whether, for example, given census and rearing condition segments for the same tank are close 
enough in time to be considered contemporaneous. Such problems can only be resolved by refining the 
data gathering and encoding protocols. 6. CONCLUSIONS ~e validity of this system as a management tool 
depends strongly on the accuracy with which the growth equations and the auxiliary equations (for environmental 
effects and biological constraints)  A.N. ARNASON, C.J. SCHWARZ, D.H. SCUSE reflect reality. For that 
reason we have put con- siderable facilities at the disposal of the man- ager for examining his real 
data and making com- parisons between comparable simulated and real outcomes. With use, the manager will 
soon get a feel for the reliability of the models" pre- dictions. We have only just put in place most 
of the database and database/simulator interaction facilities, so it is a bit too soon to report on the 
adequacy of our models and calibrations. This will be the main focus of our work over the next year, 
and can proceed more quickly given this sys- tem support. Nevertheless, the system becomes useable even 
at this stage because of the imple- mentation of successively higher levels. The man- ager can use his 
experience, and the feedback from the database, to confine his simulations to sub- sets of the rearing 
conditions or to lower levels of models (which use fewer auxiliary equations) that appear to produce 
valid results. For exam- ple, before the growth model was modified to reflect optimal temperature, simulations 
at above 14 or 15 degrees gave unrealistically high growth rates. The Basic model was still useable and 
use- ful, but only for lower temperature simulations. Similarly, if the Tank Constraints model seems 
to give unrealistic or restrictive biological con- straints, one can revert to the Tank Effects model 
until one's experience with the model, and the refinement of the model itself, increases. One serious 
and unresolved limitation in the use of this system for managing real commercial hatch- eries is the 
possible need to recalibrate for every different food type. The variation between and within commercially 
available foods is the subject of current research at Rockwood. The degree to which differences might 
affect growth rate and fish physiology (e.g. ammonia excretion rates) is being evaluated. Should it be 
neces- sary, our system makes it very much easier to recalibrate, but there is still a considerable cost 
in time and effort to do so. Finally, the system has potential for a number of applications not yet 
discussed in this paper. Once a cost level model is implemented, and the database is modified to record 
costs (and benefits from sales), one can begin to think about forming an objective function and using 
dynamic program- ming methods for formal optimisation. Sparre (1976) has shown that while global optimisation 
is not feasible, local optimisation about a promising initial strategy can lead to significantly improved 
production strategies. Our system is structured in a way that would easily permit extension to include 
such optimising capabilities. ACKNOWLEDGMENTS This work has been supported for two years by a subvention 
grant from the Canada Department of Fisheries and Oceans. Algas Resources Ltd. has provided reseach funds 
for the biological research associated with system development. The Natural Sciences and Engineering 
Research Council has pro- vided operating grants to A.N.A. and D.H.S. We wish to acknowledge the considerable 
contrib- ution to the system development made by some unus- ually bright and productive students: Robert 
Day for work on the calibration and tank effects pro- grams, Bruce Jones for general project co-ordina- 
tion and development of the database QUERY system, Mike Karasick for the parser/scanner system, Gary 
Karasiuk for developing the database creation, interface and batch reporting programs, Norm Kozusko for 
the SAVE/FETCH routines integrating simulators and database, and Gerard Meszaros for extensions to the 
simulator programs. This system could not have been developed without the constant help and guidance 
of the people in the FWI Aquaculture project and the Rockwood Hatchery. Of these, special thanks are 
due to Burton Ayles who initiated and guided the project, and most of all, to Michael Papst, who gave 
gener- ously of his time and extensive knowledge of fish and hatchery behaviour. We thank Irmgard Wiebe 
for help with text entry of this paper. REFERENCES <RefA>Arnason A.N., C.J. Schwarz and G.G. Meszaros (1981), 
FISHDAMS: A database management system and growth simulator for optimal planning of a commercial-type 
fish rearing facility, Version 2, Technical Report, Com- puter Science Department, University of Man- 
itoba, Winnipeg, Canada, September, 70 p. Karasick, H. (1981), EASYPARSE: A generalized, easy-to-use 
parser interface for user-ori- ented systems, Technical Report, Computer Science Department, University 
of Manitoba, Winnipeg, Canada, in ~. Kiviat, P.J., R. Villanuevs and H.M. Markowitz (1975), SIMSCRIPT 
11.5 Programming Language, C.A.C.I., Los Angeles, 384 p. McLean, W.E. (1979), A Rearing Model for Salmon- 
ids, Ph.D. Thesis, University of British Columbia, Vancouver, 134 p. Paulson L.J. (1980), Models of 
Ammonia Excretion for Brook Trout (Salvelinus fontinalis) and Rainbow Trout(Salmo gairdneri), Can. J. 
Fish. Aquat. Sci., Vol. 37, pp. 1421-1425. Scuse, D.H. (1981), Database Interfaces, submit- ted to: 
Australian Computer Journal. Sparre, P. (1976), A Markovian Decision Process Applied to Optimization 
of Production Plan- ning in Fish Farming, Medd. Danm. Fisk-og Havunders., Vol. 7, pp. 111-197. Sperber, 
0., J. From and P. Sparre (1976), A Method to Estimate the Growth Rate of Fishes as a Function of Temperature 
and Feeding Level Applied to Rainbow Trout, Medd. Danm. Fisk-og Havunders., Vol. 7, pp. 275-317. Thorpe, 
J.E. (1977), Bimodal Distribution of Length of Juvenile Atlantic Salmon (Salmo salar) under Artificial 
Rearing Conditions, J. Fish Biol., Vol. Ii, pp. 175-184. </RefA>  
			
