
 An Object-Oriented View of Backtracking Robert E. Noonan Dept. of Computer Science College of Willam 
and Mary PO Box 8795 Williamsburg, VA 23187-8795 noonan@cs.wm.edu Abstract In this paper we explore 
Wirth's[ll] backtracking algo- rithm from the perspective of algorithm reuse and sep- aration of concerns. 
We explore treatment of this prob- lem in object-oriented data structures and algorithms texts. Finally, 
we present a reusable backtracking (or depth-first search) class. Introduction Over the years, I have 
developed a catalog of algo- rithms that I believe every computer science student should know. ! have 
tried to incorporate teaching these algorithms into many of my courses. One of my fa- vorite algorithms 
has always been backtracking or depth-first search. I was first introduced to this algorithm in Wirth's 
marvelous book on data structures[ll, p. 137]: A particularly intriguing programming endeavor is the 
subject of "general problem solving." The task is to determine algorithms for finding solutions to specific 
problems not by following a fixed rule of computation, but by trial and error. The common pattern is 
to decompose the trial-and-error process into partial tasks. Often these tasks are most nat- urally expressed 
in recursive terms and consist of the exploration of a finite number of subtasks. In this paper we examine 
Wirth's original solution to the backtracking problem and explore how it serves as an example of algorithm 
reuse. Next we sur-vey how data structure and algorithms texts treat Permission to make digital or hard 
copies of all or part of this work for personal or classroom use is granted without fee provided that 
copies are not made or distributed for profit or commercial advant -age and that copies bear this notice 
and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute 
to lists, requires prior specific permission and/or a fee. SIGCSE 2000 3/00 Austin, TX, USA &#38;#169; 
2000 ACM 1-58113.213-1/99/0003...$5.00 procedure try next move; begin initialize selection of moves; 
repeat select next candidate from list of moves; if acceptable then begin record move; if board not full 
then begin try next move; if not successful then erase previous recording end end until (move was successful) 
Y (no more candidates)  end Figure 1: Wirth's Backtracking Algorithm this subject. Finally, we present 
an object-oriented ver- sion that emphasizes reuse. 2 Wirth's Backtracking Algorithm Wirth develops his 
general backtracking algorithm in order to solve the problem of the knight's tou~ll, p. 137]: Given is 
a n x n board with 4n 2 fields. A knight-- being allowed to move according to the rules of chess--is 
placed on the field with initial coordinates x0, Yo. The problem is to find a covering of the en- tire 
board, if there exists one, i.e., to compute a tour of n 2 - 1 moves such that every field of the board 
is visited exactly once. The general solution that Wirth presents to this prob- lem is given in Figure 
1[11, p. 138]. Wirth then goes on to specialize this algorithm using carefully selected data structures 
to solve the knight's tour problem. Having solved the problem, Wirth goes on to ask: What abstractions 
can now be made from this ex- ample? Which patterns does it exhibit that is typ- ical for this kind 
of "problem-solving" algorithm? What does it teach us? The final backtracking algorithm that Wirth presents 
is identical in structure and quite similar in terminology to the original. Wirth then proceeds to use 
this same algorithm to solve the eight queens problem[ll, p. 143]. 3 Backtracking and Reuse At the time 
that Wirth's book appeared, we were in the midst of the Structured Programming revolution. In-deed another 
of Wirth's texts[10] from the same era is entitled Systematic Programming: an Introduction. Superficially, 
structured programming could be viewed as an attempt to outlaw the goto statement[5]. More importantly, 
it was an attempt to solve problems by using stepwise decomposition of abstract instructions. An important 
feature of this method was the explicit recognition that some problems could be solved using the same 
basic pattern. Backtrack programming or depth-first search exactly fits this pattern. As Wirth had shown, 
the same basic algo- rithm could be instantiated or specialized to solve both the knight's tour and the 
eight queens problems. But these problems seemed too similar; both involved chess pieces and moves on 
a chess board. Was the pattern more general than that? Indeed it was. Wirth's algorithm could be used 
to solve any trial and error problem using a depth-first search across the possible solution space. In 
Wirth's presenta- tion of the solution of these problems, he tended to spe- cialize the abstract instructions 
directly into the evolv- ing program. A variant of such specializations is to make each abstract instruction 
into a separate proce- dure or function, thereby highlighting the reuse of the overall algorithmic solution 
to these problems. However, one dissatisfaction remained. Structured pro- gramming did not solve the 
problem of reusing the al- gorithm without having to resort to manually cutting- and-pasting it into 
each new backtracking program. 4 Survey of Object-Oriented CS2 Books One of the advantages of object-oriented 
programming is the ability to separate an algorithm from its special- ization within a particular context. 
A good example of this is the use of the iterator pattern[6] and its support in Java by means of the 
Enumeration interface. Al-though not as general, the backtracking problem could be presented in the same 
way in data structures or al- gorithms texts based on either C++ or Java. An examination of such texts 
was disappointing. One text[8] makes no mention of either backtracking or Place Queens (Column ) if (Column 
> 8) The problem is solved else { while (unconsidered squares exist and the problem is unsolved) { Determine 
the next square in column Column that is not under attack if (such a square exists) { Place a queen in 
the square Place Queen( Column + 1) if (no queen is possible in Column+l) Remove queen from Column and 
consider next row   }//end if } //end while }//end if Figure 2: Carrano's Eight Queens Solution depth-first 
search. A number of texts[3, 4, 7, 9] present depth-first search only in the context of graph traversal. 
Yet another presents eight queens as a single example of backtracking. A few texts[l, 2] present both 
traditional backtracking problems and depth-first search but make no attempt to relate them. An examination 
of the text by Carrano, et. aZ.[2], is instructive. It presents both the eight queens problem (pp. 216-220) 
and a depth-first search of a graph (pp. 287-291). Neither solution is related to the other. Al-though 
the eight queens solution is presented as a class, the benefit of using a class is not clear. The equivalent 
of Wirth's try procedure for eight queens is presented as pseudo-code in Figure 2. 5 An Object-Oriented 
Version In perusing data structures and algorithms texts based on object-oriented languages, it was disappointing 
that none of them presented a completely general version of Wirth's backtracking algorithm. In this section, 
we will present such a version. The major motivation for this is to emphasize reuse of algorithms and 
separation of concerns. Our version of Wirth's algorithm is presented in Fig- ure 3. This version was 
derived by a straight-forward, manual translation of Pascal to Java, giving specific method names to 
the abstract instructions given in Fig- ure 1. Other changes to Wirth's original algorithm in- clude: 
 1. The method name had to be changed in Java since try is a reserved word.  2. The variable successful 
is implicit in Wirth's gen-  import java.util.Enumeration; public class Backtrack { Backtracker b; 
 public Backtrack (Backtracker b) { this.b = b; } public boolean attempt (int level) { boolean successful 
= false; Enumeration e = b.moves(level); while (!successful a&#38; e.hasMoreElements()) { Object move 
= e.nextElement(); if (b.valid(level, move)) { b.record(level, move); if (b.done(level)) successful= 
true; else { successful = attempt(level+l); if (!successful) b.undo(level, move); } // if done } // 
if valid } // while return successful; } // attempt  } // class Backtrack Figure 3: Object-Oriented 
Backtracking Algorithm eral algorithm and explicit in both knight's tour and eight queens; the variable 
is passed as a var parame-ter to Wirth's try procedure. 3. Similarly, our variable level appears explicitly 
in both of Wirth's implementations as the variable i. 4. We chose to specialize the Backtrack class 
using Java interfaces rather than inheritance. For a fuller discus- sion of this issue, see Gamma[6]. 
 5. The current move has to be passed to each method called; this is consistent with the separation of 
the backtracking code from its application and was also used in our structured programming version of 
Wirth's algorithm. 6. We find it useful to pass the variable level to all the Backtracker methods, which 
simplifies using a stack to simulate the use of local storage within the attempt method (Wirth's try 
procedure), 7. We choose to use Java's Enumeration interface to process all the moves for a particular 
backtracking algorithm. This helps emphasize to students both reuse and separation of concerns.  Implementing 
the interface methods to solve the eight queens problem following Wirth[11] is straightforward: * The 
variable level from the method attempt maps to the current column number, which varies from 0 to n -1 
(n corresponds to the variable MAXROW). This differs slightly from Wirth since the Pascal solution uses 
1-based arrays, while Java uses 0-based arrays. A move also varies from 0 to n -1 to accommodate Java's 
0-based arrays; a trial move corresponds to a potential row position within a column.  A potential move 
is valid if the row, left diagonal, and right diagonal are all empty.  Recording a move corresponds 
to marking the row, left diagonal, and right diagonal as occupied; undoing a move corresponds to make 
them unoccupied. The variable rowPos is used to record for each column the row position of the queen 
within the column; this can later be used for display purposes.  Enumerating the potential moves of 
a queen within a column corresponds simply to incrementing a variable through all the potential row numbers. 
 Having implemented the Backtrack class and its associ- ated Backtracker interface, the process of implement- 
ing a particular algorithm is simply a matter of filling in the details of the five methods in the Backtracker 
in- terface. For example, to implement knight's tou~ll, p. 364 import java.io.*; import java.util.Enumeration; 
 public class Queen extends Object implements Backtracker { int MAXROW = 8; // board size boolean leftDiag[]; 
// Wirth's b boolean rightDiag[] ; // Wirth's c boolean row[]; // Wirth's a int rowPos[]; // Wirth's 
x public Queen(int n) { MAXROW = n; leftDiag = new boolean[2*MAXROW+l]; rightDia g = new boolean[2*MAXROW] 
; row = new boolean[MAXROW+l] ; rowPos = new int[MAXROW+I] ; private void setPosition(int rowNo, int 
colNo, boolean status) { row[rowNo] = status; leftDiag[rowNo+colNo] = status; rightDiag[rowNo-colNo+MAXROW-l] 
= status; } public boolean valid(int level, Object move) { int rowNo = ((Integer)move).intValue(); 
int colNo = level + 1; return (!row[rowNo]) &#38;&#38; (!leftDiag[rowNo+colNo]) &#38;&#38; (!rightDiag[rowNo-colNo+MAXROW-l]); 
 public boolean done(int level) { return level + 1 >= MAXROW; } public void record(int level, Object 
move) { int rowNo = ((Integer)move).intValue() ; int colNo = level + 1; rowPos[colNo] = rowNo; setPosition(rowNo, 
colNo, true); } public void undo(int level, Object move) { int rowNo = ((Integer)move).intValue(); int 
colNo = level + i; rowPos[colNo] = O; setPosition(rowNo, colNo, false); ) public void display( ) { 
for (int i = i; i <= MAXROW; i++) { for (int j = i; j <= MAXROW; j++) if (rowPos[j] == i) System.out.print("Q"); 
else System.out.print(" "); SysZem.out.println(); } } // display public Enumeration moves(int level) 
{ return new QueenEnumeration( ); } private class QueenEnumeration implements Enumeration { int cursor 
= O; public boolean hasMoreElements( ) { return cursor < MAXROW; } public Object nextElement( ) { 
return new Integer(++cursor); } } // QueenEnumeration public static void main(String ares[]) { Queen 
q = new Queen(4); Backtrack b = new Backtrack(q); if (b.attempt(O)) q.display( ); } //main } //class 
Queen Figure 4: Object-Oriented Eight Queens 137], the code for method done merely checks the level 
against n 2 -1, as described in our earlier citation of the problem description. A complete solution 
to the eight queens problem is given in Figure 4. In this solution we chose more descriptive variable 
names than the more cryptic ones of Wirth and allow for a chess board of arbitrary size greater than 
one. As explained by Wirth[ll, p. 144]: rowPos [i] (Wirth's variable x) denotes the row po- sition bf 
the queen in the ith column.  row[j] (Wirth's variable a) means no queen lies in the jth row.  leftDiag[k] 
(Wirth's variable b) means that no queen occupies the kth left diagonal. In Pascal this array has valid 
subscripts in the range 2... 16 for an 8 x 8 board. In Java the low end subscript positions of the array 
are simply ignored.  rightDiag[k] (Wirth's variable c) means that no queen occupies the kth right diagonal. 
In Pascal this array has valid subscripts in the range -7... 7 for an 8 x 8 board. In Java the subscripts 
must be shifted by the board size (variable HAXROW).  We have also implemented all of the following: 
knight's tour~11], maze, and reachability[1]. Note that the maze problem is basically the same as reachability 
within a graph applied to a game. Similarly, generating a span-ning tree of a graph is really just a 
variant of reachabil- ity. Conclusions We have shown how an object-oriented programming language can 
be used to provide a general solution to Wirth's backtracking problem. Such a solution can be used to 
motivate to students both reuse and separa- tion of concerns. We hope that future editions of data structure 
and algorithms texts will incorporate this ap- proach. References<RefA> [1] Budd, T. A. Classic Data Structures 
in C++. Addison-Wesley, 1994. [2] Carrano, F. M., Helman, P., and Veroff, R. Data Abstraction and Problem 
Solving with C++, 2nd ed. Addison-Wesley, 1998. [3] Dale, N. C++ Plus Data Structures. Jones and Bartlett, 
1999. [4] Decker, R., and Hirshfield, S. Working Classes. PWS Publishing, 1996. [5] Dijkstra, E. W. Go 
to statement considered harm- ful. Communications of ACM 11 (March 1968), 147-148. [6] Gamma, E., Helm, 
R., Johnson, R., and Vlissides, J. Design Patterns. Addison-Wesley, 1995. [7] Goodrich, M. T., and Tamassia, 
R. Data Structures and Algorithms in Java. John Wiley, 1998. [8] Headington, M. R., and Riley, D. D. 
Data Abstrac- tion and Structures using C++. D. C. Heath, 1994. [9] Sedgewick, R. Algorithms in C++, 
3rd ed. Addison-Wesley, 1998. [lO] Wirth, N. Systematic Programming: an Introduc- tion. Prentice-Hall, 
1973. [11] Wirth, N. Algorithms ÷ Data Structures = Pro-grams. Prentice-Hall, 1976.   
			
</RefA>