
 An Upper Level Computer Science Curriculum Y. S. Chua and C. N. Winton University of North Florida 
University of South Florida i. Introduction Curriculum planners in computer science generally look 
to the model curricula published by ACM (ACM '68 [i], ACM '78 [2]) and IEEE-CS (IEEE-CS '77 [8]) for 
guidance. Availability of equipment, staff, and even textbooks may heavily influence the mapping of model 
curricula to a particular program. When the program must be compressed into the Junior/Senior years as 
well, additional considerations of prerequisite chains and offering patterns become critical. This is 
basical- ly the case in the Florida State Univer- sity System, where the nine state universities rely 
on widely scattered community colleges to provide the majority of their enrolled Juniors/Seniors (four 
of the universities presently do not offer the Freshman/Sophomore year at all or are only just now starting 
to do so). In particular, in response to national curric- ular trends, the computer science curricu- 
lum at the University of North Florida has undergone three iterations since its incep- tion in 1972. 
Experiences with the devel- opment of the North Florida curriculum coupled with recent exposure to the 
current thinking of the IEEE-CS Curriculum Committee motivate this paper. The curric- ulum as outlined 
in this paper owes its origins to the earlier ACM and IEEE-CS model curricula. It is also heavily influenced 
in its organization and selec- tion of courses by the following three considerations: a) an increasing 
tendency in computer science programs to produce "strictly hardware," "strictly software," or "strictly 
applica- tions" graduates; Permission to copy without fee all or part of this material is granted provided 
that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice 
and the title of the publication and its date appear, and notice is given that copying is by permission 
of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or 
specific permission. &#38;#169; 1983 ACM 0-89791-091-5/83/002/0077 $00.75 b) availability of low cost 
equipment to supplement the study of computer hardware organization and computer architecture; c) increased 
"mainstreaming" of computer graphics and data base systems with reasonable hands-on opportunities.  
2. The Curriculum The basic organization of the curric- ulum is presented in Figure i. Each level generally 
presumes completion of the one above it, with flow lines represent- ing strongest prerequisite considerations. 
There are five distinct components: prerequisites, the foundation, support courses, the nucleus, and 
the core. These will be described in turn. Prerequisites An upper level computer science curriculum 
meeting the major objectives of the model curricula requires a base of problem-solving mathematics; namely, 
calculus. Calculus is the obvious choice due to fairly universal perceptions of just what Freshman/Sophomore 
calculus is, and its evident application to subjects such as analysis of algorithms, mathemat- ical statistics, 
numerical analysis, and information theory. Alternatives to calculus have been proposed [3,7,9], but 
generally at the expense of providing a solid mathematics foundation for a broadly based program such 
as is presented in this paper. The Foundation The proposed curriculum builds on two essential foundational 
courses, neither of which belongs in the general educa- tional arena; i.e., both are major offerings, 
designed and offered for the computer science major. The first of these, "Introduction to Computer Science," 
is best exemplified by treatments such as in Graham [16]. Course emphasis is on algorithm design with 
an underlying discussion of computer architecture, 77  o o op. 0J E) cjo or~ e~e~ . : j 1 I1~ ,--t 
14 D o~ 3 1 ~-I L) 0-,4I,'~ 4J ~ o~ o ~.~ ~',,Q .,-I ~LI -~ o ~ ~ ON o ~ ,~SJ ~gg 0 ~-~I ,-I ~l,IJ O-la~ 
4J 14a g o8 78 systems software, and data structures. Learning a programming language such as PASCAL 
is a function of the course, but only as a by-product of implementing algorithm designs in the available 
machine/ software environment. Examples and exer- cises drawn from computer architecture, systems software, 
and data structures serve to emphasize the role of the course as a foundation for the nucleus with 
a strong common thread of algorithm design running through the presentation. It is vital that the course 
lay a base of principles as opposed to emphasizing current technology. Foundational courses which emphasize 
learning a particular language or a particular architecture do not well-serve students in the long 
run. Such material is better broached only as a by-product of a broader-based discussion. The issue 
of where courses emphasizing current technology belong in a computer science curriculum is discussed 
in Section 4. The remaining foundational course is "Discrete Structures." A much discussed course [9], 
often indifferently taught as a service course by mathematics depart- ments, its content is nonetheless 
vital background. To serve this curriculum well, the course should emphasize finite mathematics (as required 
for computer architecture), combinatorics (as required for algorithm analysis), graph theory (as required 
for data structures), and automata and formal languages (as required for language translation). Instructional 
staff unsympathetic to, or ignorant of, these objectives should not be assigned to the course. Support 
Courses Mathematical statistics is fundamental background for material in the areas of operating systems, 
information theory, and systems performance. Linear algebra is basic to computer graphics, simulation 
and modeling. These two courses also widen the student's mathematics perspec- tive as acquired from calculus, 
a desirable maturing factor. The growing importance of this material and the reliance of identified senior-level 
computer science core courses on such background justifies its inclusion in the overall curricular design. 
 The Nucleus The organizational focus of the proposed curriculum rests in the nucleus. The three courses 
in the nucleus build on the foundation laid via Introduction to Computer Science/Discrete Structures 
in each of the computer architecture, systems software, and data structures areas. The intent is to de-emphasize 
hardware/soft- ware/application curricular divisions by providing a common base (or nucleus) of background 
for the more topic-oriented coursework of the senior-level core. This approach is an evolutionary step 
from the model curricula. The first of the courses in the nucleus, "Introduction to Computer Hardware 
Organization," presents compon- ent organization of the CPU and memory la Sloan [20]. A further exploration 
of the hardware related aspects of the curriculum and attendant hardware facili- ties is the subject 
of a second paper [6]. The second course, "Introduction to Systems Software," examines basic systems 
software such as an assembler, macro facility, linker, and loader. It is suggested that exercises be 
carried out in the assembly language of an available system. Again, in contrast to courses emphasizing 
learning a specific technol- ogy, a specific technology (in this case, a particular machine language 
and hard- ware organization) is learned as a by- product of study of material emphasizing principles. 
The University of North Florida has experienced considerable success with this approach employing texts 
by Donovan [14] and Overbeek and Single- tary [19]. The remaining course in the nucleus, "Introduction 
to Data and File Structures," is intended to provide a basis of experience for dealing with secondary 
storage media. Fundamental data structures such as strings, graphs, trees, arrays, and linked lists are 
considered to be foundational, and as such introduced via Introduction to Computer Science/Discrete Structures. 
In this course, implementing such structures for data storage purposes becomes a salient topic. Data 
modeling as employed in data base systems is introduced, laying the groundwork for subsequent study. 
An earlier text by Tremblay and Sorensen [22] approaches data structures somewhat along these lines. 
Hopefully, others will follow. The Core Up to this point, the coursework pro- posed is material which 
should be required of all computer science majors. Moreover, it is highly desirable that most of it be 
completed prior to pursuing senior-level core courses. For the senior level core, the following eight 
courses distributed over four areas are proposed: 1. Hardware : Microprocessors and Interfacing Computer 
Architecture  2. Software: Operating Systems Language Translators  3. Theory: Formal Languages and 
Automata Analysis of Algorithms  4. Applications: Computer Graphics Data Base Systems.  The hardware 
courses are explored in [6].  79 Descriptions of the software and theory courses essentially proceed 
along the lines of the detailed course discussions of the model curricula and so are omitted. Com- puter 
sciences majors should be expected to complete at least six of the eight core courses with at least one 
course from each of the four areas. [21] and [17] are text selections appropriate for the two hard- ware 
courses, [13] and [i0] for the two software courses, [18] and [ii] for the two theory courses, and [15] 
and [12] for the two applications courses. Assuming a semester system, a four term pattern for the curriculum 
is as follows: Term 1 Term 2 Junior F 1 N 1 F 2 N 2 S 1 N 3 S 2 Senior C 1 C 4 C 2 C 5 C 3 
C 6 F = foundation coursework S = support courses N = nucleus courses C = core courses This pattern 
demonstrates the feasibility of the curriculum within a two year span (remembering that a sound base 
of calculus is a prerequisite). Assuming a student load of five courses per term, there is still room 
for up to seven minor/elective choices. 3. Facilities  Successful presentation of this (or any other) 
curriculum requires appropriate instructional delivery systems. For com- puter science a variety of hardware 
and software resources are implied, there being no substitute for actual "hands-on" experience. For the 
foundation, an instructional micro computer laboratory serves nicely. Both the University of North Florida 
and the University of South Florida successfully employ networked APPLE II's utilizing PASCAL in this 
context Properly equipped, these machines also provide adequate, low-cost support for a first course 
in computer graphics. The hardware courses of the nucleus and the senior-level core require a dedicated 
laboratory. A reasonably priced, compre- hensive facility for this purpose is described in [6]. The 
remaining courses in the curriculum (excluding theory) at present imply minicomputer or mainframe support. 
Only here are found complex operating systems, extensive system soft- ware, full file systems, and data 
base management systems. The latter deserves special comment due to relative scarcity of DBMS software 
suitable for the instruc- tional environment. DBMS software util- ized at the University of North Florida 
and the University of South Florida includes EDBS, UNIBASE and INGRES. EDBS [23] running under APL provides 
three data base models for experience in mapping a general data model to a data base model, data base 
administrator functions, and navigational~specification data manipula- tion languages for a comprehensive 
(if somewhat unrealistic) hands-on experience. UNIBASE [25] running under COBOL, though not generally 
available, provides for CODASYL-compliant experience. INGRES [24] running under UNIX, provides state-of- 
the-art relational data base modeling experience. Overall, it is desirable that facilities for computer 
science instruction provide a broad range of exposure to various hardware/software resources. 4. Curriculum 
Extension The curriculum as laid out in Figure 1 is deliberately arranged to imply pro- gression into 
computer engineering as one proceeds to the left from the hardware- oriented courses and progression 
into information systems as one proceeds to the right from the application-oriented courses. The central 
courses of the core represent well-established computer science principles. The courses on the wings 
(microprocessors and interfacing, data base systems) represent important evolutionary developments in 
computer science with undeniable impact potential for the future. Omissions (such as numerical analysis, 
artificial intelli- gence, information and coding theory, or data communications) are generally more 
appropriate to other disciplines, or graduate-level treatment, or are too technologically oriented. There 
is an obvious appeal to providing students with courses which provide immediately appli- cable skills. 
The nature and content of such courses are inevitably determined by available resources, instructional 
staff, and local demand. So long as providing such coursework does not impact the computer science curriculum 
adversely by diverting resources and staff, it makes great sense. Its correct place in the curriculum 
coursework is sup as por elective tive of coursework, a minor. or References <RefA>Articles i. ACM Curriculum 
Committee on Computer Science, "Curriculum '68, Recommen-  80 dations for Academic Programs in Compu- 
 ter Science," Comm. ACM ii, 3 (March, 1968), 151-197. 2. ACM Curriculum Committee on Computer Science, 
"Curriculum '78, Recommenda- tions for the Undergraduate Program in Computer Science," Comm. ACM 22, 
3  (March 1979) 147-166.  3. Atchison, W. F. "Computer Education- Past, Present, and Future," SIGCSE 
Bulletin 13, 4 (December 1981), 2-6.  4. Austing, R. H., Barnes, B. H., and Engel, G. L., "A Survey 
of the Litera- ture in Computer Science Education since Curriculum '68," Comm. ACM 20, 1  (January, 
1977), 13-21.  5. Austing, R. H., and Engel, G. L., "A Computer Science Course Program for Small Colleges," 
Comm. ACM 16, 3(March, 1973), 139-147.  6. Chua, Y. S., and Winton, C. N., "Hard- ware Component of 
an Upper-Level Computer Science Curriculum," SIGCSE Bulletin, (February, 1983).  7. Huitz, J. C., "Undergraduate 
Computer Science Education: Alternatives to the Mathematics Core Requirements and Effects on a Minor 
in Computer Science," SIGCSE Bulletin 12, 2 (July, 1980), 45-47.  8. IEEE-CS Education Committee (Model 
Curriculum Subcommittee), "A Curric- ulum in Computer Science and Engi- neering: Committee Report," IEEE 
Publication EH0119-8 (January, 1977).  9. Ralston, A., and Shaw, M., "Curriculum '78-Is Computer Science 
Really that  Unmathematical?," Comm. ACM 23, 2 (February, 1980), 67-70. Texts: 10. Aho, A. V., and 
Ullman, J. D., Principles of Compiler Design, Addison- Wesley (1978). ii. Baase, S., Computer Algorithms: 
Intro- duction to Design and Analysis, Addison-Wesley (1978). 12. Date, C. J., An Introduction to Data- 
base Systems, Addison-Wesley (1983).  13. Deitel, H. M., An Introduction to  Operation Systems, Addison-Wesley 
(1983).  14. Donovan, J., Systems Programming, McGraw-Hill (1972).  15. Foley, J. D., and Van Dam, 
A., Fundamentals of Interactive Computer Graphics, Addison-Wesley (1982).  16. Graham, N., Introduction 
to Computer Science: A Structured Approach, West Publishing Co., (1982).  17. Hamacher, Y. C., Vranesic, 
Z. G., and Zaky, S. G., Computer Organization, McGraw-Hill (1978).  18. Hopcroft, J. E., and Ullman, 
J. D., Introduction to Automata Theory, Languages and Computation, Addison- Wesley (1979).  19. Overbeek, 
R. A., and Singletary, W. E.,  Assembler Language with ASSIST, SRA (1976).  20. Sloan, M. E., Computer 
Hardware and Organization, SRA (1976).  21. Stone, H. S., Microcomputer Interfac- ing, Addison-Wesley 
(1982).  22. Tremblay, J. P., and Sorenson, P. G., An Introduction to Data Structures with Applications, 
McGraw-Hill (1976).  Software Products: 23. EDBS (Educational Data Base System), Computer Systems 
Research Group, Uni- versity of Toronto (1975).  24. INGRES, Electronics Research Labora- tory, University 
of California at Berkeley (1981).  25. UNIBASE, Data Base Management Center, University of South Florida 
(1981).   81 
</RefA>			
