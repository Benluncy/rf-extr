
 AN OBJECT-ORIENTED APPROACH TO SOFTWARE PROCESS MODELING AND DEFINITION John D. Riley SBSEngineering 
18333EgretBayBoulevard Suite340 Houston,Texas 77058 MPRS52A@mdigy.COM Abstract This paper &#38;scribes 
an approach to So@are Procew Modeling that uses DRAGOON, an object-oriented programming language with 
AaWike synt~ to capture Sofiiare Process Mo&#38;ls. These moa%!s share the advantages of object-oriented 
softiare Thqv can be easily modifted or &#38;en&#38;d They ah aw the modeled process to be viewed at 
appropriate levelk of abstractiott The use of a compilable programming language allows automated consistency 
checking and can help support automated enactment DRAGOON is a particularly appropriate language for 
this task It supports both fuU object-oriented programming, and concurrency. INTRODUCTION Ilk paper applies 
Object-Oriented Systems Analysis (OSA) (Embley et al. 1992), and DRAGOON (Atkinson 1991a), an Object 
Oriented Programming Language with clear, Ada-like syntax, to software process modeling. Models are developed 
which utilize encapsulation and inheritance to reduce complexity and enhance clarity. The use of an Object-Oriented 
Programming language lends the power of polymorphism, inheritance and dynamic binding to the process 
descriptions. Most software process modeling methods adopt a functional orientation. Control and data 
flows are depicted through a method and notation similar to functional techniques ( e.g. structured rmalysis/design) 
used in software development (Curtis et al. 1992). These techniques exhibit many of the same deficiencies 
when applied to process modeling that they exhibit when applied to sotlware development. In particular 
these Permission to mpy without fee all or paxt of this material is grsntsd nmvided that the mows sm 
not made or distributed for direct commercial ;dvantage, the ACM copyight naicw and the ttle of the pubhcatlon 
and Its date appsar, and notice is given that copying is by penmsslon of the As.xmation for Computing 
Machinery. To copy otherwise or mpubhsh, mquks a fss and/or speafIc Psnmsslon. methods otlen do not lead 
to models which effectively encapsulate precess steps and the data they act on. They lack a mechanism, 
such as inheritance, to effectively exploit the ecmunonality which exists among various process steps. 
These deficiencies result in a model which is more complex than is neeessary and difficult to reuse and 
modi~. Many methods poorly represent the potential concurrency and iteration present in the process. 
Other methods utilize specirdized programming techniques (Peuschel et al. 1992). Others use techniques 
tlom classical process control, such as system dynamics, feedback control, or steady state crdculations 
(Weber 1973) which are not widely understcxxl in the software engineering community or not directly applicable 
to software development. I attempt to use a notation which, as tie strong thrwst toward 00A/OOD continues, 
should beeome easily accessible to most practicing software engineers and technically competent managers. 
The development of expertise in 00A/OOD and object-oriented process modeling would be mutually re-enforcing. 
SOFTWARE PROCESS MODELING AND ENACTMENT Interest in software processmedeling and enactment is inspired 
by two related factors. First, software development organizations have a great interest m defting their 
software development process in order to unprove productivity and quality, and to demonstratea maturity 
and capability level which is acceptable to their customers (Humphrey 1989). Secondly, there is a recognizedneed 
for processdriven software lifeeycle support environments providing some measure of automated process 
enactment(bfi and Scacehi 1992). Effective prwess modeling techniques are an essential precursor to the 
production of such environments. Currently there is often a lack of fidelity between actual behavior 
and an organization s stated process. This is caused by high level processes, mandated by customers or 
management outside the actual development organization, that are unrelated to actual activities. Descriptions 
of processes are imprecise, ambiguous, incomprehensible, or unusable and are not updated as processes 
change (Curtis et al. 1992). Process Enactment is implementing a procas model to produce a product or 
service. Process Enactment Support c+in range from manual document based process descriptions to active 
process enactment support, including proactive process management of prccess artifacts and activities 
based on understanding of user roles and knowledge of software process (Over 1993). The benefits of highly 
automated support can include greater standardization of process among individuals and teams, enforcement 
and verification of the process, and the unobtrusive collection of metrics allowing the study and improvement 
of the process. Strict, detailed process enactment through exclusively manual means is difficult, cmstly, 
time consuming, and distracts developers from their main task of developing or maintaining sotlware. 
A Process Driver, which maps the process model to the physical support environment, can greatly reduce 
the burdens of exclusively manual enactment. An ideal modeling technique would produce models which .wamIessly 
interfam with the Process Driver and project data objects allowing easy implementation of automated enactment. 
Various approaches to sotlware process modeling are described in (Fernstrom et al. 1992), (Mi and Scacchi 
1992), (Cap Gemini 1992), (Bradfield 1992), (Sutton et al. 1990), (Osterweil 1987), (Gorlick 1991), (Dutton 
1993), and (Aoyama 1993). DRAGOON DRAGOON is a programming language, developed by a European Esprit project, 
which attempts to combine the best features of Ada and object-oriented programming to provide a practical 
vehicle for encouraging reuse and distribution in largeÂ­scale software systems (Atkinson 1991b). This 
language enriches Ada with the main features of the object-oriented paradigm presented in a style conforming 
to Ada s syntactic conventions. It can be transformed automatically into standard Ada 83 thus offering 
all the advantages of Ada portability and stability. DRAGOON extends the traditional view of inheritance 
to handle aspects of concurrency and distribution. Dragoon is a mixed paradigm language. It uses all 
of Ada s typing facilities, as well as packages, subprograms, exceptions, and many other features. This 
allows the programmer to take advantage of existing Ada software not necessarily witten according to 
the object-oriented approach. The design of the object-oriented f=tures of DRAGOON has been inspired 
by the language Eiffel developed by Meyer (1989). DRAGOON provides multiple, static inheritance with 
facilities for deferring and redefining methods, and relies on the subclass hierarchy to determine assignment 
compatibility, It also supports generic classes, which can be parametensed with res~ct to data or class 
types, and allows inheritance of generic classes. DRAGOON differs more significantly from Eiffel and 
other object-oriented Ada extensions such as Classic-Ada, Innovada, and Ada++, in its support for concurrency 
and distribution. DRAGOON classes may be either active or passive. AU object of an active class has an 
independent thread of control which allows it to execute concurrently with other objects. Synchronization 
is achieved through behaviors which are imposed through a form of inheritance, eliminating the need for 
low-level mechanisms such as semaphores. Ditibution is achieved through the use of executable objects 
and the concept of virtual nodes (Atkinson et al. 1988). More details of the language artd its implementation 
can be found in (DiMai 1988). A description of Object-Oriented System Analysis may be found in (Embly 
1992). MODELING BASIC LIFE CYCLE CONCEPTS Figure 1 presents an object relationship model &#38;scribing 
some essential life cycle concepts. A SLCM consists of 1 or more Phases. Each Phase is composed of 1 
or more Teams (sets of Roles) and 1 or more Activities. Artifact Templates are created by a Phase and 
stored in the Artifact_Base. Each Artifact is produced by an Activity. An Activity may or may not produce 
an Artifact. Teams Frform Activities. Teams are composed of m Artifact Phase CreateWodifles, Views 1 
T 1 isAssigned Il. Employee ~kl Figure 1. Essential Life Cycle Concepts Roles, and to each Role M assigned 
an Employee. By remaining limited to a restricted number of basic classes and creating other classes 
and objects from them, it is possible to maintain a strongly typed structure and still minhize complexities 
of analysis and manipulation. For example all artifacts mav be stored in and retrieved from an object 
base as artifacts but then be used based on the properties of the subclass to which they belong. 17 We 
now extend the basic conceptsos necessmyto allow the representation of a simple development model, and 
then demonstratethemodel sextendibility tomorerealisticmodels. SIMPLE DEVELOPMENT MODEL Figure 2 provides 
extensions to the flmdamental concepts necessary to present a simple life cycle model. This simple model 
is composed of 3 phases: design, code, and test (Figure 3). (Note This is a grossly simplified example 
for illustrative purposes, NOT a proposal for actual software development) Each phase will be performed 
exactly once. The purpose of the model is to design, code and test one unit of code. &#38;&#38; nTeam 
@ &#38; *-] Ac Artifact T nit Destgn Cade Unil 1 II I Figure 2. Extensions to Simple Model Each team 
will consist of one member, SLCM Activity Flow C9*n CcUmg }4 Figure 3. Behavior Model of Development 
, Combining these extensions with the fimdamental concepts,we may now construct a simple developmentmodel. 
A complete, high-level implementation of this model in DRAGOON was developed and runs on a SUN workstation. 
ADDING FEATURES TO THE SIMPLE DE~LOPMENT MODEL One obvious deficiency of the simple model is the absence 
of explicit quality assurance activities apart tkom the testing activity. Tle following DRAGOON C1OSWSadd 
a design eview:z:T classDE31GN_REVlEW is tiuits ACTIVITY, intrcducu thrca&#38;- Procedure RECEIVE.ARTIFACT(A 
UNIT_DESIGN); .J:::yrc WILII TE~_IO, TYPES, class bedY DESIGN 1S CURRENT.ARTTFACT : UNIT_DESIGN, R3VlEW_PASSED 
: BOOLEAN:= FALSE, Procedure RECEIVE_ARTIFACT(A UNiT_DESIGN) is m CURRENT_ARTIFACI = A, end RECEWE_ARTIFACT, 
 Funcuon PASSED is begin return REVIEW_PASSED; end PASSED, thread Lf(ACTIVITY_READY = FALSE) th.n raise 
EN rRY_ERROR. end W, TEXTJOPtJ_LIiWS-(T erforrniog DESIGN REVIEW ), CURRE~_cUITIFACT CHANGE_BODY . (73esign 
rewew stcred in template ). REVIEW_PASSED = TRUE, ACTIVITY.COMPLETE = TRUE, cxceptlon when ENTRY_ERROR 
=> TEXT_IO PUT( Entry conditions not met ), when others => TEXT_IO.PUT~ Error during process execution 
] Llw I mw7 -EMS end DESIGN. (modified DESIGN_PHASE, additions in boldf~) witi UNIT_DESIGN, class DESIGN_PHASE 
is mknts PNASE, introduces thre@ Fumtlon DESIGN_DOCUMH4T return UNIT_DESIGN, end DESIGN_PHASE, with DESIGN, 
DESIGN_W TYPES, classbody DESIGN_PHASE is CURRENT_DESIGN : UNIT_DESIGN, CURRENT_ACTTVITY : DESIGN, CURRE~_TEAM 
: DESIGN_T13M, CURRENT_REVIE.W : DESIGNJU?NTEW, REVIEWERS : DESIGN_REVIEW_T~, Function DESIGN_DCCUMENT 
return UNIT_DESIGN is begin return CURRENT_DESIGN, end DES IGN_DOCUME~, thread CURRENT_ACTIVITY crcatq 
cuRRENT_TEAM Creatq CURRENT_TEAM.ASSIGN_NAME( Dcsign Team 1 } CURRE~_TEAM.ASSIGN_ACTIVITY(CURRE~_ACTTVITY), 
CURRENT_TEAM.ASSEMEtLE_TEAM, --create 8 dtwign review activity object cuRRENT_REVEw.creatq -create and 
initialize the DESIGN_REVIEW_TEAM object REvxEwERs.cmt&#38; REVIEWERS.ASSIGN_NAME( Design Team 1 k REVIRWERS.ASSIGN_ACTMTY(C~ 
_REvm~, REVIEWERS.ASSEMBLE_TEAM; -create and uutiahze the desgn ARTIFACT CURRENT_DESIGN.create, CURRENT_DESIGN. 
SET_U2( I ~ CURRE~_DESIGN SET_CREATOR(CURRENT_TEAh4,NAME), -itemte through design and review until the 
review --is passed while not CURRENTJUWTEW.PASSED IOIJP CURRENT_ACTIVITY.RECEIVE_ARTIFACT(CURRENT_DESIGN) 
CURRENT_ACTIVITY. SET_ENTRY_CONDITION (TRUE) CURREFW_ACTI VITY.stiut while not CURRENT_ACTIVIT Y. EXIT_CONDITION 
Imp delay 1.@ end l-, -pass ARTIFACT to ACTIVITY cURRENTJUWTEW.REC EIVE_ARTIFACT(CURRENT _DESIG~, -begin 
REVIEW cuRRENT-REVIEW. SET_ENTRY_CONDllTON ~~, cuRRENT_REYTEw.sta@, . wit for ACTIVITY to complete while 
not CURRENT_REVIEW.EXIT-CONDIITON loop &#38;lay 1.0; end loop, end loop, PROJEH_BASE.STORE@JRRE~_DESIGN) 
COMPLETE .= TRUE end DESIGN_PHASE, We assume for simplicity that review tiormation is recorded in the 
UNIT_DESIGN artifact. We also must create a class DESIGN_REVIEW_TEAM to petiorm the review. An alternative 
would be to create a class REVIEW which inherits ACTIVITY and then define DESIGN_REVIEW as a subclass 
of REVIEW. This would allow the commomlity of all types of reviews to be abstracted and captured in one 
class. Then specific reviews (design, code, etc.) would speci~ information unique to that class of review. 
A major requirement for improving process maturity is the collection of metrics describing the efficiency 
of process activities and the quality of products produced. DRAGOON can readily be used to define and 
instrument metric collection points. DRAGOON provides substantial support for describing necessary or 
potential concurrency in the execution of active objects. Synchronization may be provided by normal progr 
amming constructs or through behaviors which allow inheritance of fimctionrdity and synchronization to 
be separated. Many SLCM S are iterative. Sothvare maybe deliberately developed in increments. Errors 
or requirement changes may require the re-iteration of an earlier phase or activity. The ability to create 
and maintain multiple objects of an activity or phase class provides an original way of representing 
iteration. PROCESS EXAMPLE PROBLEM In this section the modeling approach is applied to the analysis and 
description of a Domain Analysis and Design Process. The process is described in (Softech 1993). 19 Function 
ANALYSIS_PRODUCTS rctum ARTIFACT, Function DESIGN_PRODU~ rctum ARTIFA~, Artifact Functias METRICS return 
ARTIFACT, end EOM_ANALYSIS_PHASE, Base clc?sDOh4.MN_ANAL YSIS_AND_DESIGN_PHASE_fQITTFACT is mhcrstsDOMAIN-ANALYSIS_AND.DESIGN_PHASE, 
ARTIFACT end ~M_ANMYSIS_AND_DESIGN_ARTIFAw, Crest s, This analysis is now extended to a lower level for 
the Read Domain Identification activity. Modif s ! m Domain Analysi 1rea . and l?%.%. Design Process 
Dcxnc# Ana$6 Oeslgn Process 1 Figure 5. Object-Relationship Model  At the highest level, this phase 
class is shown interacting with the world by reading, creating, and mcdi@ing Artifacts which are stored 
in the Artifact_Base. Figure 5 is a high-level Object-Behavior Model for the class Domain Analysis and 
ORM for Domain Identification Figure 6. High-Level Activity Flow with ARTIFACT_BASE, M?TIFACT, cks IDENTIFY-DOM41N_ACTIVITY 
is kkrrts ACTIVITY, Design Process. It is followed by a DRMOON specification for mmdxes this class. 
Fmcedurc IDENTtFY_INFORMATION_SOuRCES, Rocedurc GATHER_DOMAIN_KNOWLEDGE, Pmccdure DESCR3EE_DOMAII% wmh 
ARTKFACT.BASE, ARTIFACT, N, Prcccdure VERIFY.DESCRPTION, CkS DOh@JN_ANALYSIS_AND_ DESIGN-PHASE IS Function 
DOMAIN-CATALOG return ARTIFACZ inherits PHASE, Function DOMAIN_DESCRIPTION return ARTIFACT, mtr0ducc9 
THREQ cnd JDENllFY_DCMA3N_ACTIVITY. ., -- hd tiii iltlpkmcnt the follovn~ llMJOr Actwmcs -1. Ident@ 
@main class DE~12=Y_LX)WUN_ARTIFAGT B -2. Scope DOmsm dents IDENTIFY-DO MA.lN_ACTIVITY, ARTIFACT, -3, 
Analyze Dumsln end IDENTLFY_DOW-ARTIFACT, -4 Dmgn Domain 20 CONCLUSIONS and POTENTIAL APPLICATIONS 
The approach to sotlware process modeling presented in this paper appears to be an effective way to develop 
clear and useful models. These models share the advantages of objectÂ­oriented software. They can be easily 
moditied or extend~ and can be viewed at appropriate levels of abstraction. A fidl-f=tured, executable 
programmingg language is an excellent tool for modeling the software promss. This is particularly true 
when the language, such as DFL4GOON, has high level constructs that allow the overall process structure 
to be clearly viewed. Using a progr runming language to model processes facilitates the development of 
automated simulation and analysis, as well as automated enactment. The Object-Oriented nature of the 
model facilitates the gradual development of precise models as the analysis of individual activities 
becomes more mature. A four step approach of is advocated in this paper: 1, Develop Object Relationship 
Model, 2. Develop DRAGOON specifications of each class, 3. Develop Object-Behavior Models and DRAGOON 
bodies to a level of detail appropriate for the particular modeling task, 4. Develop Object-Interaction 
Models to analyze the overall process and revise if necessruy. This approach may by applied recursively 
from the highest level view, to as detailed a representation as required.  Four areas in which the Object-Oriented 
analysis methcd may be applicable include the development of an abstract theory of software process, 
formal methods of sothvare process deftition and analysis, simulation of sdtware process, and the development 
of automated enactment support. There is no universally recognized theory of software process. The SEI 
CMM as well as work by the Sotlware Productivity Consortium and the STARS program have been widely read 
and followed. None of these organizations, however, has produced what might be called a comprehensive 
theory of software process. The Object-Oriented Approach provides an excellent tool for the abstract 
analysis of software process. The essential life cycle features identified represent one attempt at beginning 
such an analysis. Generally a field of study is developed by amassing a large body of practical knowledge 
and experience, analyzing it, forming and testing hypotheses, and finally developing an overall abstract 
theory which accounts for the observed data. Occasionally, as in the application of certain abstract 
mathematical ideas, a general theory is developed which later is found to be directly applicable to a 
practical situation. Much software process work seems to have been done in a strange middle-out approachbasedneither 
on detaded analysis of actual experience, nor on a sound abstract theory. Rather, it is based on a general, 
non-rigorous examination of anecdotal experience. Rigorous Object-Oriented Analysis may help alleviate 
tis deficiency. OSA and DRAGOON provide a rigorous, though informal, notationforexpressingandanalyzingsoftwareprocess; 
Capturing processknowledge in this rigorous format can provide a basis for analysis which may lead to 
a distillation of features which are amenableto formal analysis, and provide a basis for a formal notationtocapturethesef=tures. 
An implementation of an SLCM captured in DRAGOON is readily amenable to graphical animation or to the 
simulated enactment of potential scenarios. Such animation or simulations can allow the analysis of propaed 
models prior to their enactment. The potentird exists for linking DRAGOON mcdels to existing process 
drivers. Tools providing automated traceability between OSA models and DRAGOON code could be developed 
to facilitate the capture and maintenance of process models, The choice of the particular tools, OSA 
and DRAGOON, was somewhat arbitrary. The intent was to demonstrate the feasibility of an Object-Oriented 
approach in contrast to previous fimctioml approaches. Other analysi.ddesign methods, particularly newer 
methods such as Fusion, may have additional advantages when applied to SoRware Process Mcdeling. An obvious 
candidate for a deftition capture language is Ada 9X although the author believes DRAGOON has several 
advantages over 9X for this application. BIBLIOGRAPHY <RefA>Atkinson, C,, 1991a. Obiect-Qkmked RÂ­ . . . ~. 
ACM Press. New York. Atkinson, C., GoldSack, S., Di Maio, A., Bayan, R., 1991b. Object-Oriented Concurrency 
and Distribution in DWV300N, of Obiect-Ori@ed Pro~. March/April 1991. Vol 4, No. 1. Atkinson, C., Moreton, 
T., Natrdi, A., 1988. -Cambridge University Press. Cambridge Aoyama, Mikio, 1993. Concurrent Development 
Process Model, ~. JUIY 1993. Bradfield, Julian C., 1992. WE TÂ­rties of SvsJQIJ.$Birkhauser. Boston. 
Cap Gemini Innovation, 1992. J%cess Weaver Proce* ~. Author. Curtis, B., Kellner, M. I., and Over, J. 
1992. Process Mtieling , ~. September 1992 VO1.35* ~OC9 21 Dutton, James E., 1993. Commonsense Approach 
to PRocess Modeling , ~. J~Y 1993. Embley, D. W., Kurtz B. D., and WorxMeld, S. N. 1992. .. Obiect-~ 
. A Model Dn v~ Yourdon Press. Englewood Cliffs, New Jersey. Fermstrom, C., Narfelt, K., Ohlsson, O. 
1992. Software Factory principles, Architecture, and Experiments , ~ SOftWSre.March 1992. Gorlick, M. 
M., andRazouk, R.R., 1991. Using Weaves for Software Constructing and Analysis , ~ocee&#38;gs 13th .. 
!i%nfmenw on Sothvare@meang , IEEE Computer Scwiety. Humphrey, W.S. 1989. ~ the Software m. Addison-Wesley, 
Reading Mass. IEEE Standards Board, 1992. ~.F.E S~ De v(=[o&#38; Software Li&#38; Cvcle Pr~. JEEE Computer 
Society. Kellner, M. I., Feiler, P. H., Finkelstein, A. et. al. 1991. Software Process Modeling Example 
Problem , @xee_ b s~ Software P132GQSS Wor=. IEEE Computer Society. McKay, C.W., Brown, P., Weiskopf, 
M., Dasanaike, D., Shanbhag, V 1992. ~ ethodol QQW, RICIS. February 28, 1992. Meyer, B., 1988. Mel Release 
2.2 Overview, Interactive Soflware Engineering Inc. Mi, P., and Scacchi, W. 1992. Process Integration 
in CASE Environments ~. March 1992. Over, J. W. 1993. Motivation for Process-Driven Development , f roc. 
STARS 92 Osterweil, Leon 1987. Software Processes are Software Too > ~ 1987. Paulk, M. C., Curtis, B., 
Chrissis, M. B., Weber, C,V. 1993. Capability Maturity Model, Version 1.1 , ~ Sofhv~ July 1993. Peuschel, 
B., Schafer, W. 1992. Concepts and Implementation of a Rule-based Process Engine , f@c. 14th onal C@ 
~. w ACM 1992 Riley, J.D. Applying Object-Oriented Analysis to Sothvare process Modeling rmd Deftition 
, ~OOLS USA 9$ Prentice-Hall, Englewood Cliffs, N.J., 1994 Rogers, K., Bishop, M., McKay, C. 1991. h 
Overview of the Clear Lake Life Cycle Model (CLLCM) , ~ Ada Tecm. ACM March, 1991. Softech. ~ Prowx+s. 
DOD Center for SotlwareReuseOperations,March 1993. Suttom S., Heimbigner, D., Osterweil, L. 1990. LanguageConstructsfor 
Managing Changein Process-Centered Environments , ~. ACM 1990. Vessey, I. V., 1993. Software Engineering 
Notes , ~ SQPWUE,September1993. Weber, T.W., 1973. ~ to Process~ and CQU@L John Wiley&#38; Sons. New 
York. </RefA>
			
