
 A Lower Bound on the Size of Shellsort Sorting Networks Robert Cypher Department of Computer Science, 
FR-35 University of Washington Seattle, WA 98195 Abstract The central result of this paper is that all 
Shellsort sorting networks based on monotonically decreasing in- crements require ~t(N log 2 N/log log 
N) comparators. This result is significant because previously only the trivial fl(N log N) bound was 
known for this class of networks. Thus this paper provides the first proof that such networks cannot 
be of optimal size. The lower bound obtained in this paper nearly matches the upper bound of O(N log 
2 N) that was proven by Pratt.  Introduction Shellsort is a sorting algorithm that was first proposed 
by D. L. Shell in 1959 [12]. Shellsort is based on a sequence of integers S = (sk, sk-1,..., sl) called 
an in-crement sequence. Different increment sequences result in sorting algorithms having different complexities, 
so a great deal of effort has been devoted to finding the best possible increment sequence. Given an 
unsorted array of items A = A[1],..., A[N] and an increment sequence S = (sk, 8k--1 ..... Sl), Shell-sort 
operates by si-sorting A for j = k,k-1 ..... 1. An array A is said to be s/-sorted if for all i where 
sj < i L~ N, A[i] >_ A[i -sj]. It is required that sl = 1, so that at the end of the algorithm the file 
is completely sorted. In general, the increment sequence used for sort- ing N items can depend on N. 
One common technique is to define a single infinite sequence and to use, in de- creasing order, those 
elements in this sequence that are less than N. Increment sequences that are created in this manner are 
said to be uniform. The technique used for performing the sj-sort is in- sertion sort [6]. A set of adjacent 
items is sorted with Permission to copy without fee all or part of this material is granted provided 
that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice 
and the title of the publication and its date appear, and notice is given that copying is by permission 
of the Association for Computing Machinery, To copy otherwise, or to republish, requires a fee and/or 
specific permission. &#38;#169; 1989 ACM 0-89791-323-X/89/0006/0058 $1.50 insertion sort by processing 
the items from left to right. Each item y is processed by comparing it to the items to its left until 
an item x is found that is smaller than or equal to y. Then y is inserted to the right of x and the items 
that were between x and y are moved one position to the right. Thus for any item y, if there are c items 
to the left of y that are larger than y, c + 1 comparisons will be required in order to insert y in its 
proper place. Shellsort has been studied both as a sequential sorting algorithm and as a technique for 
creating sorting net- works. A sorting network is a collection of comparators that are wired together 
in such a way that when a set of items is placed on the input wires, the items appear in sorted order 
on the output wires. A comparator is a box which takes two inputs and produces two outputs, where the 
smaller input is placed on the first output and the larger input is placed on the second output. The 
size of a sorting network is the number of comparators that it contains, and the depth of a sorting network 
is the max- imum number of comparators through which an item may pass. Sorting networks are important 
because their non-adaptive nature allows them to be implemented di- rectly in hardware, and also because 
of a result due to Leighton [8]. Leighton has shown that any small depth sorting network can be used 
to create a fast sorting al- gorithm for a bounded degree parallel computer. An O(log N) depth sorting 
network was created by Ajtai, Komlos and Szemeredi [1]. Their sorting network is very complex, and it 
has an extremely large constant of proportionality associated with the O(togN) depth. A number of researchers 
have suggested that Shellsort might provide a simple O(log N) depth sorting network that would be practical 
for realistic values of N [11, 4]. This paper will prove that a fundamentally new type of increment sequence 
will be needed if this goal is to be obtained. Shell proposed using the increments LN/2J, [g/4J, LN/8J, 
[N/16],..., 1. ttowever, when N is a power of 2 this sequence requires ®(N 2) compar- isons. Modifications 
to this sequence were suggested by Lazarus and Frank [7], nibbard [3], and Knuth [6]. An upper bound 
on the comparisons needed for Hibbard's 58 sequence was obtained by Papernov and Stasevitch [9], who 
showed that at most O(N ~/2) comparisons are re- quired. All of these sequences have the property of 
being within an additive constant of a geometric se-quence. Pratt [10] proved that many such nearly ge- 
ometric sequences result in @(N 3/2) time algorithms. Pratt also proposed using the uniform increment 
se-quence consisting of all numbers of the form 2i3 j where i and j are integers, and he showed that 
these increments yield a sorting network with size O(N log 2 N) and depth O(log 2 N). Sedgewick [11] 
then proposed a uniform increment se- quence that requires O(N4/~ comparisons. Although this is greater 
than the O(log ~N) comparisons required by Pratt's sequence, Sedgewick's sequenee~has O(log N) increments 
while Pratt's sequence has ®(log 2 N) incre- ments. The restriction to using O(log N) increments is required 
if an O(N log N) time algorithm is to be ob- tained. Incerpi and Sedgewick [4] then developed a uni- 
form increment sequence with O(log N) increments re- quiring O(N 1+eli~T) comparisons for any e > 0. 
Fi- nally, Weiss and Sedgewick [14] proved that Sedgewick's sequence does require f~(N 4/3) comparisons 
in the worst case. In addition, Weiss and Sedgewick make a conjec- ture which, if true, would imply that 
f~(Nl+~/v/FgFff) time is required by Incerpi and Sedgewick's sequence and by any sequence for which sj 
= ®(a j) for any o~>i. All of the increment sequences mentioned above have the property that the increments 
are used in monoton- ically decreasing order. The central result of this paper is that all Shellsort 
sorting networks with monotonically decreasing increments require f2(N log 2 N/log log N) comparators 
to sort N inputs. Previously, only the triv- ial f~(NlogN) lower bound was known for this class of increment 
sequences. In addition, although the re-sults of this paper apply to sorting networks, they also provide 
insight into sequential applications of Shellsort. Specifically, all of the recently published upper 
bounds rely on the use of templates to bound the time require- ments of the insertion sorts. This paper 
proves that if this technique is used and if monotonically decreasing increments are chosen, the resulting 
time bound will be Q(N log ~ N/log log g). This paper is organized as follows. Section 2 contains definitions 
and notation that are used throughout the paper. Section 3 proves a connection between template costs 
(defined in Section 2) and the number of com- parators that a sorting network must have. Section 4 proves 
a lower bound on the number of elements miss- ing from a template. Section 5 proves a lower bound on 
the total template costs of any Shellsort algorithm with monotonically decreasing increments and Section 
6 gives a lower bound on the number of comparators required when monotonically decreasing increments 
are used. 2 Definitions and Notation The set of nonnegative integers will be denoted by I. An I-set 
is any subset of I. Uppercase letters will be used to name I-sets and lowercase letters will be used 
for arbitrary members of I-sets. An uppercase letter with the subscript i, where i > 1, will be used 
to indicate the i-th smallest member of an I-set. For example, if S is an I-set, then $1 is the smallest 
member of S. Given a nonempty I-set S, Min(S) = $1, and if S is finite, Max(S) = Sis I. Given an I-set 
S, the complement of S, written if, is I- S. Given an I-set S and a real number r, Low(S,r) = {s C Sis 
< r} and High(S, r) = {s C S I s > r}. Given an I-set S, a positive integer x, and an integery, Slice(S, 
x, y) --{sESIs~_y (modx)}. An I-set T is a ~emplate if 0 E T, if for all x E T and y E T, x+y E T, and 
ifT is finite. Given a template T, a positive integer x, and an integer y, Cap(T,x,y) = z if z is the 
smallest member of Slice(T, x, y) such that for all a e Slice(F, x, y), a < z. Also, Lack(T, x, y) --ISlice(~, 
x, Y)I, Height(T, x, y) = [Cap(T, x, y)/x] and Ave(T, x, y) = (l/z) ~u=o Height(T, x, y). ~-1 Finally, 
the cost of x with respect to template T, written Cost(T, x), is Lack(T, x, 0). Given a finite sequence 
of nonnegative integers D --(dl, d2,..., dk) and an I-set S where ISI _> k, the product k of D and S, 
written D ® S, is ~i=1 diSi. An integer x is representable by an I-set S if there exists a finite sequence 
of nonnegative integers D = (dl,d2 ..... dR) where D ® S = x. The span of an I-sequence S, written Span(S), 
is the I-set consisting of the integers that are representable by S. The weight of a finite sequence 
D = (dl, d2,..., dR), written Weight(D), is ~=1 di. If m is representable by S, then Size(S, m) is the 
minimum, over all sequences D where D (9 S = ¢, of Weight(D). The input to a Shellsort sorting network 
will be an array of registers A ---A[1]... A[N] of N items. The comparators will be viewed as performing 
compare- exchange operations on fixed pairs of registers. Unless otherwise stated, the comparators will 
be ordered se-quentially. The comparators are divided into a sequen- tial set of stages, where each stage 
contains the compara- tors that implement the x-sort for a given increment m. For any I-set S, the array 
A is said to be sorted by S if for all s E S, A is s-sorted. For any I-set S, T is the template generated 
by S if T --Span(S U High(I, N)) (it is easily verified that T is in fact a template). 3 Template Costs 
and Com-parators This section will establish a lower bound on the number of comparators required to implement 
an z-sort. This bound will be based on the cost of the increment x with respect to the template that 
describes the sorts that 59 have been done previously. For the remainder of this section let S be an 
I-set, let T be the template generated by S, and let x be a positive integer. It will be shown that after 
performing the s-sorts for each s E S, an additional ~(N. Cost(T, x)) comparators are needed to implement 
an z-sort. Lemma 1. For any integer L, 1 _< L _< N, there exists an assignment of values to the array 
A such that A is sorted by S and for all i, 1 < i < L where L- i ~ T, A[i] > A[L]. Proof: Let E = {i 
I 1 < i < LandL-i E T}, let F={il 1< i< LandL-ieT},andletG= {i] L < i < N}. Assign values to A as follows. 
For each Ei E E let A[Ei] = i, for each Fi E F let A[Fi] = i+IEI, and for each Gi E G let A[Gi] = i + 
L. Note that for alli, 1_< i < L whereL-i q~T, g[i] > ]Z I = A[L]. Therefore, all that remains to be 
shown is that A is sorted by S. Assume for the sake of contradiction that A is not sorted by S, then 
there exists i and j where i < j, A[i] > A[j] and j -i E S, which implies that j -i E T. Note that because 
i < j and A[i] > A[j], i and j cannot both be in E, they cannot both be in F, and they cannot both be 
in G. Also, j ~ G because this would require that A[j] > L and A[i] < L. Furthermore, i ~ E because this 
would require that A[i] _< IEI and A[j] > IEI. Finally, i ~ G, because this would require that i > L 
and j < L. Therefore, i E F and j E E. However, j E E implies that L- j E T, and it was shown that j-i 
E T, so (L - j) + (j -i) = L -i E T (because T is a template and is closed under addition), which is 
a contradiction because i E F implies that L -i ~ T. [] Theorem 1. If A has been sorted by S, x < N/2 
and C = Cost(T, z), then at least NC/24 comparators are needed to implement an x-sort of A. Proof: If 
C = 0 the proof is trivial. Otherwise, let m = Max(Slice(Y, x, 0)). There are two cases based on the 
value of m. Case 1: m < 3N/4. Let L be any integer where 3N/4 < L < N. From Lemma 1, all C registers 
i where 1 < i < L and L-i E Slice(T, z, O) can be such that A[i] > A[L], so at least C comparators are 
needed in order to insert A[L] by using an insertion sort. Because there are at least N/4 such integers 
L, and because C comparators are required for each L, at least NC/4 com-parators are needed. Case 2: 
m > 3N/4. Let U = Slice(I,x,O) and let V = {i E U I rn/4 < i < 3m/4}. Note that Max(V) < 3N/4. Let p 
= mix. If p=- 0 (mod4), then IV] = p/2+ 1. Ifp ~ 1 (rood 4), then IV] = Lp/2j. Ifp~ 2 (rood 4), then 
IV] = p/2. Ifp _= 3 (rood4), then Igl = [p/21. Therefore, Igl _> l_d2J _> LCI2J. Because x ~ N/2 and 
rn > 3N/4, C > 2 and IVJ > C/3. Let W = V-T. Because m ~ T and T is closed under addition, for any i 
C V where i E T, m -i ~ T and m-i E V. Therefore, IW! >_ IVI/2 > C/6. Let L be any integer where 3N/4 
< L _< N. From Lemma 1, all Iwt > c/6 registers i where 1 < i < L and L-i G W can be such that A[i] > 
A[L], so at least C/6 comparators are needed in order to insert A[L] by using an insertion sort. Because 
there are at least N/4 such integers L, and because C/6 comparators are required for each L, at least 
NC/24 comparators are needed. []  4 Missing Elements in Tem-plates This section will prove a lower 
bound on the number of missing elements in a template. Throughout this sec-tion, let S be a non-empty 
I-set with Min(S) > 1 and Max(S) < N, let T be the template generated by S, and let z = Min(S). Lemma 
2. For any integer w and for any integers y and z where 0 _< y < w and 0 < z < w, Height(T, w, y+ z) 
< Height(T, w, y) + Height(T, w, z) + 1. Proof: Assume for the sake of contradiction the the claim is 
false. Then there exist w, y and z such that Height(T,w,y + z) > Height(T,w,y) + Height(T, w, z) + 2. 
Therefore, [Cap(T, w, y+ z)/wJ > Height(T, w, y) +Height(T, w, z) + 2 and Cap(T, w, y+ z) >_ w(Height(T, 
w, y) + Height(T, w, z) + 2). As a result, there exists an integer v such that v =_ y + z (mod w), v 
¢ T and v > w(Height(T,w,y)+ Height(T, w, z) + 1). Let j = Cap(T,w,y) and let k=v-j. Becausej+k=v, jETandv~T, 
itfol-lows that k ~ T. However, j = w. Height(T, w, y) + y < w(Height(T, w, y) + 1) so k > w. Height(T, 
w, z) and k =_ z (mod w). Therefore k E T, which is a contra- diction. [] Lemma 3. For any integer w 
and for any integer y where 0 < y < w, Height(T, w, y) < 2Ave(T, w) + 1. Proof: From Lemma 2, w-1 Height(T, 
w, y) _< (l/w) E(Height(T,w,z) + z-~0 Height(T, w, y - z) + 1) w--1 = (l/w) E(2Height(T, w, z) + 1) z~0 
= 2Ave(T,w) + 1 which completes the proof. [] Lemma 4. For any integer y where 0 < y < x, Height(T, 
x, y) _< 4Ave(T, x). Proof: Because sc = Min(S), Height(T,x,z) > 1 for all z where 1 ~ z < x. Therefore, 
Ave(T,x) > (x -1)/x > 1/2 (because x > 2). From Lemma 3, fIeight(T, x, y) < 2Ave(T, x) + 1 so Height(T, 
x, y) < 2Ave(T, x) + 2Ave(T, x) = 4Ave(T, x). o Lemma 5. For all i E [, if i < Cap(T,x,i) then ieT. 60 
Proof." Assume for the sake of contradiction that the claim is false, then there exists an i E I such 
that i < Cap(T,x,i) and i E T. Let j = Cap(T,x,i) and let k =j-x. Becausei < j and i=- j (modx), k-> 
0. From the definition of Cap(T,x,i), k ~ T and k < N. Therefore, k cannot be represented by S and i 
can be represented by S. Let the sequence A = (az, a2,..., a,,) be such that A ® S = i. Then the sequence 
B = (al + (k-i)/x, a2 ..... a,~) is such that B®S = i+(k-i) = k, so k is representable by S, which is 
a contradiction. [] Lemma 6. Let h be any integer where 0 < h _< Ave(T,x), let E = Low(T, hx) and let 
F = High(T, hx). Then IE[ _> hx/5. Proof: Assume for the sake of contradiction that the claim is false, 
so IE[ < hx/5: ..... Let G = {i E I I i < x and Height(T,x,i) _> h}. Note that for any y E I, if y ~ 
T then Height(T,x,y) > y/x. Note that for each i E G, [Low(Slice(I,x,i),hx)l = h, so from Lemma 5, [now(Slice(T,z,i),hz)[ 
= h. Therefore, hlG I _< [E I < hx/5 so IGI < x/5. Let m = max~_~01Height(T,x,i). Note that if f E F, 
then f _> hx and f ~ T so Height(T,x,f) -> h and (fmodx) E G. Therefore IFI _< mlG I. It was shown above 
that [G I < x/5, and from Lernma 4, m _< 4Ave(T, x), so IFI < (4/5)x. Ave(T, x). There-fore ITI = [EI+IFI 
< hx/5 + (4/5)x. Ave(T,x) _< (1/5)x Ave(T, x) + (4/5)x Ave(T, x) = x.Ave(T,x) However, it follows from 
Lemma 5 that ITI = x--1 ~=o Height(T, x,i) = x Ave(T, x) which is a con-tradiction. O Lamina 7. For 
any k such that Tk < N, Tk > x logk/log(IS I + 1). Proofi Assume for the sake of contradiction that the 
claim is false, then there exists a k such that Tk < N and Tk < zlogk/log(ISl+l). Let E= {7~ I 1 <i< 
k}. For each ~ 6 E, ~ < N so ~ E Span(S). Let j be such that Tj E E and for all i where 1 < i < k, Size(S, 
7~) _< Size(S, 7~). Let p = Size(S, 7~). Note that there are at most (IS] + 1) p integers i E Span(S) 
such that Size(S, i) _< p. Therefore, k = IEI _< (ISl+l) P sop_> log k / log( ISl + l ) and x log k / 
log( IS[ + l ) _< xp < Tj _< T~, which is a contradiction. [] Theorem 2. IfN _> 2 ~6, 1 _< ISI <_ logan 
and N ~/2 < x < N/logN, then ITI > xlogN/1501oglogN. Proof: Let h = [log x/2 log(ISl+ 1)-lJ. First, it 
will be shown that h _< Ave(T, x). Let y be such that for all z, 0 <_ z < x, Cap(T, x, y) _> Cap(T, x, 
z). Note that Cap(T, x, y) -> T~. Because x _< N~ log N, x log x < N and xlogx/log([SI + 1) < N. Therefore, 
either T~ > N > x logx/log(ISI + 1) or Tx < N and from Lamina 7, Tx -> x logx/log(IS] + 1). Therefore, 
Height(T, x, y) > Cap(T,x,y)/x-1 _> T~/x- 1 >_ logx/log(IS I + 1) - 1. From Lemma 3, 2Ave(T, x) + 1 -> 
Height(T,x, y) > log x/ log(IS I + 1)-1 which implies that Ave(T, x) > log x/2 log([SI + 1) - 1 >_ h. 
 Note that h < log N and h > log N/4 log(log2 N + 1)-2. Because N > 4, log2N + 1 < log2hN and h > logN/101oglogN-2. 
Because logN > 256, logN/loglogN > 32, logN/lOloglogN-2 > logN/301oglogN and h > IogN/301oglogN. Let 
E = Low(T, hx). Because h is an integer and 0 < h < Ave(T, x), from Lemma 6, IEI >_ hx/5. Therefore, 
IYl -> IEI > logN/X501oglogN. [] 5 Template Costs for Monotonic Increments This section will prove a 
lower bound on the total tem- plate costs incurred when monotonically decreasing in- crements are used. 
Throughout this section, let S be an I-set where Min(S) = 1 and Max(S) < N. Let k = ISI. For all i where 
1 < i < k + 1, let R i = High(S, Si), let T i be the template generated by R i and let bi = [Til. For 
all i where 1 < i < k, let ci = Cost(T I+1, Si). Lemma 8. For all i where 1 < i < k, bi+l -bi _< Sici. 
 Proof: Assume for the sake of contradiction that the claim is false, and let g be such that bg+l -bg 
> Sgcg. Let x = Sg, let E = {i E T 9 I i ~ T g+l} and note that [E I = bg+l -bg > xcg. Therefore, there 
must exist a y where 0 _< y < x and [Slice(E,x,y)[ > cg. Let F -- Slice(E, x, y). It will first be shown 
that for each f E F, there exists a t E Slice(Tg+l,x,y) where t < f. This is because f E E, so f is not 
representable by R 9+1 but f is rep- resentable by R g. Let the sequence D = (dl ..... dj) be such that 
D® R g = f. Note that dl > 0 be- cause f is not representable by R g+l. Let the sequence H = (O, d2,...,dj), 
and let t = H®Rg. Then t < f, t is representable by R g+l and t _= f (mod x). Therefore, t E Slice(T 
9+1, x, y) and t < f. Because [FI >_ 1, and for each f E F there exists a t E Slice(Tg+Z,x,Y) where t 
< f, Slice(Tg+l,x,y) is not empty. Let m = Min(Slice(T 9+1, x, y)). Clearly, Min(F) > m. For anyi, 1<i< 
IFl, ri-m~T g+l because F/ ~ T g+l and T g+z is closed under addition. ButF/-m~0 (modx),soIF[<iack(T 
g+l,x,O)= Cost(T g+l, x) = cg, which is a contradiction. [] Lemma 9. For alli, 1 < i < k, ifN 1/~ _< 
Si _< N~ log N then ci > (bi+l/bi -1)(log N/150 log log N). Proof: From Lemma 8, ci > (bi+l -bi)/Si. 
It fol- lows from Theorem 2 that bi -> Si log N/150 loglogN and therefore Si _< 150bi log log N/log N 
and ci -> (bi+l-bi)logN/15ObiloglogN = (bi+l/bl- 1)(log N/150 loglog N). [] Lamina 10. For anyy and z 
where N 1/2 _< Sy < 61 S~_~ < N/log N, z-1 >_ (logN/150 log log N ) ( z -y ) . i=y Proof." From Lemma 
9, z-1 z-1 > E(bi+t/bi 1)(logN/1501oglogN) - i=y Z--1 = (tog g/150 log log g)(y -z + E bi+l/bi) i=y 
Note that z-1 H bi+l/bi = b~/b u Because the arithmetic mean is always greater than or equal to the 
geometric mean,  (1/(z y)) ~ z-1 bi+i/b, _> (L/bl,)*l('-~') - i=y and z-1 b,+~/b, > (~ y)(b,/b~)~/(z-~) 
- i=y Therefore z-1  _> (log NIl50 log log N)(z -y). i=y which completes the proof. [] k Theorem 
3. If N > 2256 then ~i=tci > log 2 N/1350 log log N. Proof: Let y and z be such that S~ is the smallest 
member of S that is greater or equal to N 1/2 and Sz is the largest member of S that is less than or 
equal to N/log N. There are two cases. Case 1: by > N 1/2 log 2 N. From Lemma 8 N ll=log 2N < by y--1 
 = ~(b,+~ -b,) i=l y--1 < ~ ci&#38; i=1 y--1 < EeiNll2 i=1 y-1 so ~i=1 ei > log 2 N. Case 2: b~ < N 
1/2log ~N. Note that ifz = k then b~+l = N-1, while ifz < k then because S~+ 1 > N/logN, bz+t > N/logN-2, 
so in either case, b~+l > N~ log N -2 > N/log 2 N. From Lemma 10, z Ec, > (logN/15OloglogN)(z-y+ l). 
i=y ((bz+l/by) I](*-y+D -1) Let L=z-y+landnotethatL<k<log 2N. Then (log N/150 log log N)(L)((b,+l/b~) 
l/(z-v+D -1) > (log N/15o log log N)(L)((Nll2/log 4 N) llL _ 1) > (logN/150 log log g)(L)(g 116L - 1) 
Because L(N U6L -1) = L(e InN/6L -1) and e ~ = ET:0 ~i/i!, L( e~"m6L- 1) > L(lnN/eL) = ln N/6 > log N/9. 
Therefore k z i=1 i=y   _> 0og N/150 log log N)(L)(N ~/6L - 1) >_ log2 N/1350 log log N which completes 
the proof. D Because of Theorem 3, it is clear that any upper bound on the sequential running time that 
is based on template costs and that uses monotonically decreasing increments will be at least ~(N log 
2 N/log log N). 6 Network Sizes for Monotonic Increments This section will establish a lower bound on 
the size of Shellsort sorting networks when monotonically de- creasing increments are used. The proof 
is based on Theorems 1 and 3. Theorem 4. Shellsort sorting networks that are based on monotonically decreasing 
increments require ~2(N log 2 N/log log N) eomparators to sort N items. Proof: It will be shown that 
when N > 2256, at least N log 2 N/32400 log log N comparators are required. Let S be the set of increments 
that are used and let k = IS[. For all i where 1 < i < k "b 1, let R i = High(S, Si) and let T / be the 
template generated by R i. For all i where 1 < i < k let ci = Cost(Ti+l,Si). It will be assumed that 
for all i where 1 < i < k, cl > 1 because increments that have no cost have no effect on the order of 
the data items. Two cases will be considered. Case 1: k > log 2 N. Because for each i where 1 < i < k, 
ci >_ 1, from Theorem 1 at least N/24 comparators are required to perform each Si-sort. Therefore a total 
of at least ~=1 N/24 > N log 2 N/24 comparators are required. 62 Case 2: k < log 2N. From Theorem 1, 
at least (N/24) ~=,ci comparators are required, and from Theorem 3, ~k i=l ci > log = N/1350 log log 
N, so at least N log 2 N/32400 log log N comparators are required. O   Acknowledgements This research 
was supported in part by an NSF Gradu- ate Fellowship.  References <RefA>[1] M. Ajtai, ]. Komlos, E. Szemeredi, 
"An O(n log n) Sorting Network", in Proc. 15th. ACM Syrup. on Theory of Comput., 1983, pp. 1-9. [2] W. 
Dobosiewicz, "An Efficient Varig~ion of Bubble Sort", Information Processing Letters, vol. 11, pp. 5-6, 
Aug. 29, 1980. [3] T. Hibbard, "An Empirical Study of Minimal Stor- age Sorting", Comm. of the ACM, vol. 
6, no. 5, pp. 206-213, May 1963. [4] J. Incerpi, R. Sedgewick, "Improved Upper Bounds on Shellsort", 
J. of Computer and System Sciences, vol. 31, pp. 210-224, 1985. [5] J. Incerpi, R. Sedgewick, "Practical 
Variations of Shellsort", Princeton U. Tech. Rep. CS-TR-027-86. [6] D. Knuth, The Art of Computer Programming, 
Vol. 3, Addison-Wesley, Reading, MA, 1973. [7] R. Lazarus, R. Frank, "A High-Speed Sorting Pro- cedure", 
Comm. of the ACM, vol. 3, no. 1, pp. 20- 22, 1960. [8] T. Leighton, "Tight Bounds on the Complexity of 
Parallel Sorting", IEEE Trans. on Comput., vol. C-34, no. 4, pp. 344-354, Apr. 1985. [9] A. Papernov, 
G. Stasevich, "A Method of Informa- tion Sorting in Computer Memories", Problems of Information Transmission, 
vol. 1, no. 3, pp. 63-75, 1965. [10] V. Pratt, "Shellsort and Sorting Networks", Ph.D. Dissertation, 
Stanford U., Feb. 1972. Tech. Rep. STAN-CS-72-260. [ii]R. Sedgewick, "A New Upper Bound for Shellsort", 
J. of Algorithms, vol. 7, pp. 159-173, 1986. [12] D. Shell, "A High-Speed Sorting Procedure", Comm. 
of the ACM, vol. 2, no. 7, pp. 30-32, 1959. [13]M. Weiss, "Lower Bounds for Shellsort", Ph.D. Dis- sertation, 
Princeton U., June 1987. Princeton U. Tech. Rep. CS-TR-098-87. [14] M. Weiss, R. Sedgewick "Tight Lower 
Bounds for Shellsort", Princeton U. Tech. Rep. CS-TR-137-88, Feb. 1988. [15] A. Yao, "An Analysis of 
(h,k,1)-Shellsort" Stanford U. Tech. Rep. STAN-CS-79-726, March 1979.</RefA> 63  
			
