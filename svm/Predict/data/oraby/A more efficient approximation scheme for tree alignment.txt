
 A More Efficient Approximation Scheme for Tree Alignment Lusheng Wang* Tao Jiangt Dan Gusfieldt City 
U. of HK McMaster U./U. of Washington U.C. Davis Abstract We present a new polynomial time approximation 
scheme (PTAS) for tree alignment, which is an im-portant variant of multiple sequence alignment. As the 
existing PTAS s in the literature, the basic ap-proach of our algorithm is to partition the given tree 
into overlapping components of a constant size, and then apply local optimization on each such compo-nent. 
But the new algorithm uses a clever partition-ing strategy, and achieves a better efficiency for the 
same performance ratio. For example, to achieve approximation ratios 1.6 and 1.5, the best existing PTAS 
has to spend time O(kdn5) and O(kdng) re-spectively, where n is the length of each leaf sequence and 
d, k are the depth and number of leaves of the tree, while the new PTAS only has to spend time O(kdn4) 
and O(kdn ). Moreover, the performance Work done at UC Davis. Supported in part by Dept. of Energy grant 
DE-FG03-90ER60999. Address: De- partment of Computer Science, City Umversity of Hong Kong, Tat Chee Avenue, 
Kowloon, Hong Kong. E-mail Iwnng~cs.cltyu.edu.hk Supported m part by NSERC Operating Grant OGPOO46613 
and a Canadian Genome Analysis and Tech-nology (CGAT) Research Grant Address: Department of Computer 
Science, McMaster University, Hamilton, Ont L8S 4K1, Canada E-mail: jiangQmaccs.mcmaster.ca. Work done 
while visit,ing at University of Washington $Supported in part by Dept. of Energy grant DE-FG03-90ER60999. 
Address, Department of Computer Science, IJniversity of California, Daws, Cahfornia 95616, USA. E-mail 
gusfield@cs.ucdavis.edu Permission to make digital/hard copies ot nll or part ofthis material for personal 
or classroom use is granted without fee provided that the copies are not made or distributed for profit 
or conunercinl advantage, the copy right notice, the title orthe publication nnd its date nppear. and 
notice is given that copyright is by permission of the ACM, Inc. 7 0 copy otherwise, to republish, to 
post on servers or to redistribute to lists. requires specific permission and/or fee. RECOMR 97, Santa 
Fe New Mexico (ISA Copyright 1997 ACM O-X9791-882-8/97/01 ..$3.50 of the PTAS is more sensitive to the 
size of the components, which basically determines the running time, and we obtain an improved approximation 
ra-tio for each size. Some experiments of the algorithm on simulated and real data are also given. Key 
words: approximation algorithm, computa- tional biology, evolutionary tree, multiple sequence alignment, 
phylogeny. 1 Introduction Multiple sequence alignment is one of the fundamen-tal and most challenging 
problems in computational molecular biology [l, 2, 51. It plays an essential role in the solution of 
many problems such as search-ing for highly conserved subregions among a set of biological sequences 
and inferring the evolutionary history of a family of species from their molecular sequences. For example, 
most practical methods for phylogeny reconstruction based on sequence data as-sume a given multiple sequence 
alignment. An important approach to multiple sequence align-ment is the tree alignment method. Suppose 
that we are given k sequences and a rooted phylogenetic tree containing I; leaves, each of which is labeled 
with a unique sequence. The goal is to construct a sequence for each internal node of the tree such that 
the cost of the resulting fully labeled tree is minimized. Here, the cost of the fully labeled tree is 
the total cost of its edges and the cost of an edge is the mutational distance (or weighted edit distance) 
between the two sequences labeling the ends of the edge. The biological interpretatZion of the model 
is that the given tree represents the evolutionary history (known from means other than sequence analysis) 
which has created the molecular (DNA, RNA or amino acid) sequence written at the leaves of the tree. 
The leaf sequences are ones found in organisms existing today and the sequences to be determined for 
the internal nodes of the tree represent inferred sequences that may have existed in the ancestral or-ganisms. 
It should be emphasized that the tree is almost always binary in biological applications. Tree alignment 
is known to be NP-hard [14]. Many heuristic algorithms have been proposed in the lit-erature [l, 7, 8, 
10, II] and some approximation algorithms wit,h guaranteed relative error bounds have been reported recently. 
In particular, a poly-nomial time approximation scheme (PTAS) is pre-sented in [15] and an improved version 
is given in [16]. Both PTAS s partition the tree into overlapping con-stant size components, label the 
leaves of each such component in some way, and then apply local opti-mization on each component, i.e. 
compute an opti-mal tree alignment for each component. The PTAS in [16] achieves an approximation ratio 
1 + 2 -*, i.e. it produces a fully labeled tree with cost at most 1 + + -&#38; times the optimal cost, 
when the run-ning time is O(kdr~~ - ~ ), where Ic is the number of the given sequences, n is the length 
of each given sequence, d is the depth of the given phylogeny, and t is a parameter to control the number 
of sequences involved in a local optimization as well as the per-formance ratio. For any fixed t, a local 
optimization aligns a tree with 2t-1 + 1 leaves (i.e. sequences), which takes O(nz - +I) time [9]. Thus 
the more ac-curate the algorithm is, the more time it consumes. Since in practice n is at least 100, 
the bottleneck of the time efficiency is the time spent on local opti-mization. At present, we can expect 
to optimally align up to 8 sequences of length 200 at a time, as demonstrated by the software package 
MSA for a similar multiple alignment problem [4]. Thus, the above PTAS s are still far from being practical. 
In this paper, we further improve the PTAS in [16]. The new approximation scheme adopts a more clever 
partitioning strategy and has a better time efficiency P-Z(t+l)-q for the same performance ratio. For 
any fixed r, where r = 2 - +l-qand0 <q 5 2 - -1, thenew PTAS imation runs in ratio t,ime of O(lcdnP)zt--1 
and achieves an approx-Here the parameter r represents the size of local optimization. In par-ticular, 
when r = 2t-1 + 1, its approximation ratio is simply &#38;. A comparison of the performance of the new 
PTAS and the PTAS in [16] for small val-ues of t and r is given in Table 1. Note that the new PTAS yields 
an improved approximation ratio for every size of local optimization, whereas the pre-vious PTAS does 
not. This is because the previous partitioning and analysis method works only when the size of local 
optimization has the form of one plus some power of two and new method works for any size. Hence, to 
achieve a ratio 1.5, the new PTAS requires running time O(/cdn ) while the old PTAS would require running 
time O(kdns). Although the new PTAS is only a small improve-ment to the previous PTAS s in terms of the 
feasible approximation ratios it can provide, it still repre-sents a concrete step towards constructing 
a practi- cal approximation algorithm for tree alignment with provable performance bounds, which could 
be ex-t,remely useful in sequence analysis. The new parti-tioning strategy is also much more flexible 
and has the potential of leading to even better analytical bounds than what reported here. We observe 
that the bounds listed in Table 1 do not appear to be tight for either PTAS, and a better analysis tech-nique 
may also reduce the approximation ratio by a significant amount. The paper is organized as follows. We 
review the uniform lifting technique developed in [lS] in section 2. Sections 3 and 4 present the new 
approximation scheme and its analysis, respectively. Finally we de- scribe an imple mentation of the 
PTAS and perform some tests on simulated and real data in Section 5. Because of space constraints, sections 
4 and 5 are omitted from this abstract. Remark. There are many ways to define the muta-tional distance 
D(s, s ) between sequences s and s . In this paper, we need only assume that the distance is a metric. 
2 Uniformly Lifted Trees and the General Approach Before we discuss the new algorithm, let us intro-duce 
some useful concepts and results. Let T be a binary (phylogenetic) tree such that each of its leaves 
is labeled with a given sequence. For conve-nience, convert T to an ordered tree by specifying the children 
of each internal as left and child chil-dren arbitrarily. A loaded tree for T is a tree in which each 
internal node is also assigned a sequence label (not necessarily a given sequence). A loaded tree is 
called a lifted tree if the sequence label of every 311 r 3 4 5 6 7 8 9 t 2 3 4 running time O(kdn3) 
O(kdn4) 0(/c&#38; ) O(lcdn6) O(kdn7) O(kdn ) O(kdng) old ratio 1.75 1.58 1.47 new ratio 1.67 1.57 1.50 
1.47 1.44 1.42 1.40 Table 1: A comparison of the new PTAS and the best previous PTAS internal node u 
equals the sequence label of some child of ZI. Figure l(a) exhibits a lifted tree. A lifted tree is called 
a vniformlylifted tree if, for each level, either every internal node at that level receives its sequence 
label from its left child or every internal node at that level receives its sequence label from its right 
child. In other words, the lifting choices for the internal nodes at the same level are uniform. Figure 
l(b) exhibits a uniformly lifted tree. Let d denote the depth of the tree T. Then there are 2d different 
uniformly lifted trees for T. We use a vector V = (~1,. , rd) to denote the uniform hft-ing choices for 
all levels, where z, = R or L cor-responding to lifting the sequence of the left child or the right child 
at i-th level. For any vector V, T(V) denotes the uniformly lifted tree for T speci-fied by V. For each 
internal node u, the path from u to the leaf whose sequence label is lifted to v is called the laflingpath 
of ~1. Observe that, every node on the lifting path of u (including w) is assigned the identical sequence. 
The following results are proven in [16]. Let T m n denote an optimal loaded tree for T. Theorem 1 The 
average cost of the 2d uniformly lifted trees for T is at most twice the cost of T . Corollary 2 There 
exist.9 c1 uniformly lifted tree for T with a cost at most twice the cost of T . A direct proof of the 
corollary appears in [6]. An optimal uniformly lifted tree can be computed in O(kd + kdn2) time by a 
straightforward bottom-up dynamic programming, where k is the number of leaves in T and n is the length 
of each given se-quence [16]. Observe that given any lifted tree, we may fur-ther reduce its cost by 
keeping the lifted sequences on some nodes and reconstructing the sequences on the other (internal) nodes 
to minimize the cost of the edges incident upon these (latter) nodes. For example, based on the lifted 
sequences 2,3,5, we can compute a sequence for the dark circled node in Figure l(a) such that the total 
cost of the three thin edges is minimized. The new sequence should in general yield a loaded tree with 
a smaller cost. This suggests the idea of partitioning a (uniformly) lifted tree into a collection of 
overlapping compo-nents, keeping the lifted sequences at the leaves of these components intact, and optimally 
reconstruct-ing the sequences for the internal nodes in each com-ponent, i.e. doing a local optimization 
on each com-ponent. The computation can be done in polynomial time as long as each component has a constant 
size. Both PTAS s in [15, 161 are based on this idea and partition the tree simply by cutting at levels 
separated by a fixed constant distance. Our new al-gorithm also follows the same general approach, but 
we use a more sophisticated and flexible partitioning strategy. 3 The New Partitioning Stratgey and Algorithm 
Our algorithm involves partitioning a uniformly lifted tree into many overlapping components, each of 
which is a binary tree by itself. Let us first describe the structure of the component,s used in a partition. 
For a fixed constant r, we consider components of r terminals. If ate2 + 1 5 r < 2 - + 1 for some positive 
integer t, a component contains t levels of nodes, where the top level contains only one ter-minal, called 
the head, the other t -1 levels form a complete binary tree, and the bottom two levels contain r -1 leaves. 
(See figure 2.) Such a com-ponent will be referred to as a basic component of a partition, to avoid ambiguity. 
The terminals (i.e. the head and leaves) of a basic component are called its boundary nodes. Note that, 
the child of the head could be either the left or right child. A basic com-ponent is of L-type (or R-type) 
if it uses the left (or 312 Figure 1: (a) A lifted tree. (b) A uniform lifted tree. (4 w (4 Figure 
2: The L-type basic components for (a) r = 3, (b) r = 5, and (c) r = 4. The boundary nodes of a basic 
component are dark circled. right, respectively) child of the head. nary tree with r -1 leaves instead. 
Figure 3 gives an example of the partition PO when r = 4. Let T be a phylogeny, V a uniform lifting choice 
vector, and T(V) the corresponding uniformly lifted Given a partition P,, if we preserve the sequences 
tree. Suppose that r is an integer such that 2t--2 + uniformly lifted to all the boundary nodes and opti-1 
5 r 5 gtml + 1. We can obtain t partitions mally reconstruct the sequences on rest of the nodes PO, PI, 
. . , Pt-1 of T(V) as follows. Observe that to (i.e. the internal nodes of each basic component) define 
a partition, it suffices to specify the heads of to minimize the cost of each basic component, we the 
basic components involved and the type of each obtain a loaded tree, which will simply be called an basic 
component. First consider i = 0, 1, . . . , t -2. (r,i)-tree. We use T(V),,, to denote the (r, i)-tree 
obtained from the uniformly lifted tree T(V). An 1. P, has a (deformed) basic component at the optimal 
r-tree is some (r, i)-tree T(V),,, with the top of T(V), which consists of 2 leaves. (See smallest cost 
among all possible i and V. For any Figure 3). loaded tree TI, C(Tl) denotes its cost. For any tree Tl, 
denote the set of internal nodes of Tl as Z(Tl) 2. All nodes on the lifting path of each leaf and and 
the set of leaves of TI as L(TI ), and for eacheach head of every basic component are heads. a E L(Tl), 
Tf denotes the unique (r,O)-tree for TIthe leaves of the basic components are heads. such that t,he sequence 
label of leaf a is lifted to the 3. The type of each basic component is identical root of Tl. to the 
lifting choice at its head as given in V. Now let us begin to describe our algorithm. We In other words, 
the basic component is of L-will first assume that T is a full binary tree, and then type iff its head 
receive its sequence from the extend the construction to arbitrary binary trees. left child. Let v 
be a node of T. The subtree of T rooted at v consisting of all descendants of u is denoted as T,. The 
partition Pt-1 is defined similarly except Note that, since we assume that, T is a full binarythat its 
top basic component part is a complete bi- 313 Figure 3: The partition PO when r = 4. The uniform lifting 
choice is (R, R, , R). The dark circled nodes are boundary nodes of the basic components. tree, lifting 
the sequence of a, for any a E L(T, ), to u uniquely determines a uniform lifting choice for TV. Let 
T be the top basic component of T, and o the child of 21 that is on the lifting path of u in T, . Observe 
that a uniquely determines the sequences lifted to the boundary nodes of T . The cost of the (r, 0)tree 
for Tt can be computed using the follow-ing recurrence equation C(T, ) = C(T ) + x C(T, ( )) + C(T$), 
(1) GL(T ) where a(u) is the leaf whose sequence is lifted to u and Q(U) is uniquely determined by a. 
(See Figure 4.) Hence we can compute the values C(T, ) for all v and a inductively by traversing the 
tree bottom-up. Note that, for each pair u and a computing the equation ( 1) requires O(r + nr) time, 
where n is the lengt,h of the sequences, given the value of C(Tz ) for each u E L(T ) and the value 
of C(Tz,). . Thus, computing C(T, ) for all pairs v and a requires O((r + n ) xVET IL(T,)I) time. Since 
each leaf a appears in at most d different L(T,) s, where d is the depth of T, totally we need O(rkd 
+ kdn ) time. Similarly, the cost of an (r, i)-tree T,?, obtaiued by lifting the sequence label of leaf 
a to the root of T can be computed as follows: XC:,) = CCC ) + c C(Ti+)), (2) vGL(T, ) where T: is the 
the top basic component of partition P, and a(~) is the leaf whose sequence is lifted to v as determined 
by the choice of a. The above algorithm only works for full binary trees since in general lifting from 
a leaf a to a node u does not completely determine the uniform lifting choice for the subtree T, if a 
is not at the bottom level of T,. In particular, in arbitrary binary trees, lifting from leaf a to node 
u does not uniquely de-termine the leaf Q(U) being lifted to the node ZI for any internal node u that 
is lower than U, hence in-validating the recurrence equation (1). To extend the algorithm to arbitrary 
binary trees without losing any time efhciency, we need the no-tion of an estension of a phylogeny. An 
unlabeled (ordered) tree TI estendsanother unlabeled (ordered) tree Tz if Tz can be obtained from TI 
by contracting some subtrees to single leaves. Clearly, if Tl extends T2 then each leaf of Tz uniquely 
corresponds to a subtree of Tl The minimal eatension of a set of un-labeled trees is the (unique) unlabeled 
tree with the fewest edges that extends every tree in the set. A (partially) leaf-labeled tree Ti extends 
another (par-tially) leaf-labeled tree TJ if (i) the structure of 7 1 extends the st,ructure of Tz; (ii) 
for each leaf u of T2, the subtree of Ti corresponding to u has all its leaves assigned the same label 
as that of II. Now we are ready t,o generalize the algorithm to an arbitrary binary tree 7 . Let u be 
an internal node of T. Denote as Tu,t-l the tree consisting of the top t levels of the subtree T,. To 
compute C(Tt) for each a E L(T,), we first extend the tree ? v,t-l, which is general a partially leaf-labeled 
tree, to a full 314 Figure 4: An illustration for the recurrence equation (1) bimary (partially leaf-labeled) 
tree with 2t- leaves. Let vr , , ~t--l be the leaves of this extended tree. For each oI, i = 1,. , 2t-1, 
we extend T,, to ob-tain a leaf-labeled tree T:, such that the structure of T:, is the minimal extension 
of the structures of all Tu,,...,Tuz,-,. Denote the tree formed by combing all Tv,t-I , Td,, , Tdatel 
as ET(u). We compute the cost C(ET(u) ) for each a E L(ET(u)) first. Suppose that C(Tz) has been computed 
for each u E T,,,,-1, where u # v, and a E L(T,). We can easily compute the cost C(ET(u)z) of the (r, 
0)-tree ET(w): for each u E TV,t-r, where u # V, and a E L( ET( u)~) as follows: C(ET(u)t) = C(Tj), where 
a E J%(ET(ff)b). (3) Observe that the subtrees T:, , , Td2t:gt--l of ET(u) all have the same structure. 
Thus, lifting the se-quence of a, for any a E L( ET(u)), to w uniquely determines from where each node 
of ET(v),,~-I re-ceives its lifted sequence. Since ET(v),,t-1 extends the top basic component of ET(u) 
, lifting the se-quence of leaf a, a E L(ET(u)), to w uniquely deter-mines from where each leaf of the 
top basic compo-nent of ET(V) receives its lifted sequence. There-fore, we can compute the cost C(ET(V) 
) for each a E L(ET(v)) using the recurrence equation (1). Once we have the cost C(ET(u) ) for each a 
E L(ET(u)), we can compute C(Tt) easily for each a E L(T,) by reversing equation 3 as follows: (4) The 
complete algorithm is summarized in Fig-ure 5. The time complexity of the algorithm of can be analyzed 
as follows. Since the structure of T,, extends the structure of all subtrees T,, , . . , Tzi2,--l, IL(T:,)I 
5 IL(T,)I for each i, 1 5 i < 2 - . Thus, the extended tree ET(u) can be computed in O(rlL, (T,,)I) time. 
for each u E T. Hence totally it re-quires at most O(CUeT rlL(T,)I) time to construct all the ET(v) s. 
Since each leaf of T appears in at most d L(T,) s, O(CVcT rlL(T,)I) = O(rdJL(T)() = O(rkd). Computing 
equations 3 and 4 takes merely a traversal of ET(v) each. Hence the algorithm still runs in time O(rkd+kdn 
) on arbitrary binary trees. 4 The Analysis of the Algorithm Given an arbitrary binary phylogeny T, we 
can ex-tend T into a full binary tree i? . Obviously, any loaded tree for T can be extended to a loaded 
tree with the same cost for ?. Conversely, given any loaded tree for ?, we can obtain a loaded tree for 
T with equal or smaller cost by pruning appropriate subtrees and contracting nodes with only one child. 
The last operation will not increase the cost by the triangle inequality. Thus, for the analysis we may 
assume that the given tree T is in fact a full binary tree. For convenience, we number the levels from 
top to bottom. That is, the root is at level 0, and the level under level i is level i + 1. First, let 
us find a good upper bound for the cost of an (r, i)-tree T(V),.,, for an arbitrary uniform lift-ing 
choice V. Again let T be an optimal loaded tree for T. For each node 21 E T, let s(u) denote the sequence 
label of w in T . We can modify T(V),,, by replacing the sequence label of each non-terminal node with 
the sequence s(w) to obtain a loaded tree T(V):,, . Clearly, the cost of T(V):,, is at least that of 
T(V),,;. So, it suffices to upper bound the cost of T(V):,, . There are four types of edges in the loaded 
tree 315  1. begin  2. for each level i, with the bottom level first 3. for each node v at level i 
 4. begin  5. Construct the extended tree ET(u). 6. for each u E T,,t-l  7. Compute C(ET(w)z) for 
each a E L(ET(zl),) using equation 3. 8. for each leaf a E L( ET( w)) 9. Compute C(ET, ) using equation 
1. 10. for each leaf a E IQ(w))  11. Compute C(T, ) using equation 4. 12. end 13. for each i = 0, 
1, , t -1  14. Compute C(T:,) for every a E L(T). 15. Find i,a so that C(T,?,) is minimized. 16. Compute 
a loaded tree from C(T,?,) by back-tracing. 17. end.  Figure 5: The algorithm to compute an optimal 
r-tree. T(V):,,: 1. The edges whose both ends are assigned an identical lifted sequence. 2. The edges 
with ends assigned distinct lifted sequences. 3. The edges whose both ends are assigned se-quences from 
T 4. The edges with one end assigned a sequence from T and the other assigned a lifted se-quence. 
 (See again Figure 3.) Obviously each type 1 edge costs zero and each type 3 edge (u, w) costs D(s(rc), 
s(w)). Let (u,w) be a type 4 edge, where u is as-signed a sequence from T and w is assigned a lifted 
sequence according to V. The cost of the edge (u, w) is upper bounded by D(s(u), s(w)) + C(P ,V), where 
Pv,v denotes the lifting path of node w in the uniformly lifted tree T(V) and C(Pu,v) is the cost of 
the path P,,v in the optimal tree T . Ob-serve that type 2 edges may only appear at the bot-tom level 
of the tree. Hence, a type 2 edge can be viewed as a degenerate type 4 edge, with the lower end (which 
is a leaf) of the edge being the node as-signed a sequence from T , and can be treated similar to the 
type 4 edges. For convenience, call D(s(u), s(w)) and C(Pv,v) the firstand secondparts of the cost of 
edge (u, w) in TV, respectively. Call each internal node on a lifted path of some node w a lifted node. 
A lifted node is heavy if it is involved in two type 3 edges, and is light if it is involved in one type 
3 edge. For a light node v, the cost of the lifted path I ,, is charged once in the above upper bound 
as the second part, whereas for a heavy node w, the cost of the lifted path P,,v is charged twice. A 
maximal lifted path is a lifted path which can-not be further extended. Notice that each maximal lifted 
path contains exactly one heavy node at the upper end of the path. Since every edge in a max-imal lifted 
path has type 1 and thus zero cost, we can charge one of the C(P,,v) s for a heavy node w to C(Tm ,), 
obtaining the following upper bound for the cost T(V):,, C(T(V)r,t) 5 C(Tmzn) + x C(Pv,v) (5) II is a 
lifted node To further bound t,he total cost of the lift,ing pat,hs, we need the following lemmas. Lemma 
3 [15, 161 Let T be a binary tree such that every internal node has exactly two chzldren. For 316 each 
leaf 1 E L(T), there exists a mapping ~1 from the internal nodes of I to its leaves such that (i) for 
c,ach internal node u, x(t)) is a descendant leaf oj u. (hi) the paths from nodes v to thczr images ~(21) 
rlr( r,dye-disjoint, and (izi) moreover. thert 2s an UINSCYI path from the root of T to the leaf 1 that 
is edge-disjoint from all the paths in (ii). In other words, Lemma 3 says that a binary tree can be decomposed 
into a set of edge-disjoint paths from internal nodes to leaves, with one path for each non-root internal 
node and two paths for the root. Let C(X) denote the cost of the paths induced by mapping x in the tree 
T . Lemma 4 There exist mappings (~111 E L(T)} such that c c C(Pv,v) I c C(m) 5 2dC(T ), v UCl(T) ICL(T) 
 where cl is the depth of T. Since, there are 2d distinct uniform lifting choices, the average cost of 
each ~VEI(Tl C(PV,v) is at most C(Tmln). Observe that Theorem 1 follows immedi-ately from inequality 
(5) and Lemma 4, since in a uniformly lifted tree T(V), every internal node is a lifted node. Now we 
are ready to derive the required upper bound for an optimal r-tree and hence the performance ratio of 
our approximation algorithm. To simplify the presentation, consider first the case when r = 2t-1 + 1 
for some t 2 1. 4.1 The Performance Ratio When r = 2 - + 1 Let y,(j) denote the number of boundary nodes 
at level j of an (r, i)-tree, where 0 5 i 5 t -1 and 0 < j 5 d. It is easy to see that ye(j) can be computed 
by the following recurrence equation z/o(j) = yo(j -1) + 2 - yo(j -t), (6) where t 5 j 5 d. The initial 
values are ye(O) = . . . = yo(t -1) = 1. Let xi(j) = % be the fraction of the nodes on level j of an 
(r, i)-tree that are boundary nodes, where 0 5 i 2 t -1 and 0 5 j 5 d. From equation 6, we have x0(j) 
= xo(j -1) + x0t.i -t) (7) 2 where t 2 j 5 d. The initial values are x0(j) = 2-3 for each j = 0, 1, 
, t -1. Moreover, it is easy to see that Z,(J) = 2,-,(,J -1) = f. = 2o(J -i), (8) for any i 5 j 5 d and 
x,(j) = 0 for any 0 < j < i. The next lemma is a key to our bound. This gives a complete recurrence relation 
for all x,(j). Lemma 5 t-1 2X0(j) + xx,(j) 5 2. i=l Combining inequality (5) and Lemmas 4 and 5, we 
have Lemma 6 (h-3) (R,...,R) 2. (&#38;..,R) . ..+ c C(T(V)r,t-1) V=(L,...,L) 5 (t + 1)2%(T ) + 2.2%(T 
 ). The left-hand side of the above inequality con-sists of (t + 1)2d distinct (r, Q-trees. That is, 
the av-erage cost of each of these (r, i)-trees is l+&#38;C(T ). Thus, we can conclude that there exists 
an (r, i)-tree with cost at most 1 + &#38;C(T ). Theorem 7 When r = 2t-1 + 1, the preformance ratio 
of the algorithm in Figure 5 is 1 + 6. 4.2 The Preformance Ratio for an Arbitrary r Assume that r = 
2 - + 1 -q for some integer q, 0 5 q < 2f-2. Define variables y,(j) and x1(j) as before, and consider 
ye(j) and xo (j), j 1 t first. There are three types of boundary nodes at level j. Recall that each basic 
components consists of a head and a complete binary tree with r -1 leaves. 1. There are (2t-1 -2q)yo(j 
-t) boundary nodes which are at the lowest level of some basic com-ponents. 2. There are qyo (j -t + 
1) boundary nodes which are at the second lowest level of some basic components.  317 3. There are ye(j 
-1) remaining boundary nodes which are on some lifting paths. The above three types of boundary nodes 
are dis- joint. (Note that, each node in classes 1 and 2 is always shared by two adjacent basic components, 
whereas each node in class 3 is only involved in one basic component.) Therefore, we have recurrence 
equation !/o(j) = yo(j-1)+svo(j-t+1) + (2t-l -%)YO(.i -t)> for j 2 t. Hence. x0(j) = ;xo(j -1) + $ro(j 
-t + 1) (9) 2+1 -2q + xo(j -t), (10) 2f for j 2 t. The initial values are 2.0(j)=&#38; forj=O,l,..., 
t-2, cl+1 xo(t -1) = -. p-1 Again, it is easy to see that x,(j) = 2t-l(j -l), (11) for any i = 1,. . 
, t -2, and Y&#38;l(j) = pt-l -2q)yo(j -t + 1) + qyo(j -t + 2). From the last equation, we have 2 - -2q 
Z&#38;l(j) = xo(j-t+1) (12) 2t-1 2q +-xo(j -t + 2). p-1 (13) Observing that x.(j) = 0 for any j < i, 
the above gives a complete recursive definition of all x,(j). Lemma 8 2 xo(j) + 2+-l Xl(j) + + 2f-1xt-3(j) 
+@-I -2q)xt-2(j) + 2t-1xt-l(j) 5 2 . Similar to Lemma 6, we have Lemma 9 CR,. .,R) zf c wwr,o) V=(L,...,L) 
 CR, ,R) +2f-1 c C(T(V),,l) V=(L,...,L) (R....,R) + + p-1 C(T(V),,t-3) C V=(L,...,L) (R,...,R) +(2f- 
-2s) C(T(V),,t-2) c V=(L,...,L) (R,...,R) +2 - c C(T(V),,t-1) V=(L,...,L) 2 (2 - (t + 1) -2q)2dC(T 
 ) + 2 2dC(Y ). Noting that the left-hand side of the above in-equality consists of (2f-1(t+1)-2q)2d 
distinct (r, i)- trees. we have the main theorem of this section. Theorem 10 Suppose that r = 2 - + 1 
- q, where 0 2 q < 2t-2. The performance ratio of the algo-rithm in Figure 5 is 1 + 2,-,f{ti:)-o. References 
<RefA>S. Altschul and D. Lipman, Trees, stars, and 111 multiple sequence alignment, SIAM Journal on Applied 
Math. 49, pp. 197-209, 1989 S. Chan, A. Wong and D. Chiu, A survey of PI multiple sequence comparison 
methods, Bul-Ietin of Mathematical Biology 54(4), pp. 563-598, 1992. D. Feng and R. Doolittle, Progressive 
sequence[31 alignment as a prerequisite to correct phyloge-netic trees, J. Mol. Evol. 25, pp. 351-360. 
S. Gupta, J. Kececioglu and A. Schaffer, Mak-[41 ing the shortest-paths approach to sum-of-pairs multiple 
sequence alignment more space effi-cient in practice, Proc. 6th Combinatorial Pat-tern Matching Conj., 
pp. 128-143, 1995. D. Gusfield, Efficient methods for multi-ple sequence alignment with guaranteed error 
bounds, Bulletin of Mathematical Biology 55, pp. 141-154, 1993. [51 D. Gusfield and L. Wang, New uses 
for uni-form lifted alignment, submitted for publica-tion. 1996. k31 318 [7] J. Hein, A new method that 
simultaneously aligns and reconstructs ancestral sequences for any number of homologous sequences, when 
the phylogeny is given, Mol. Biol. Evol. 6(6), pp. 649-668, 1989. [8] R. Ravi and J. Kececioglu, Approximation 
al-gorithms for multiple sequence alignment under a fixed evolutionary tree, Proc. 6th Combinoto- rial 
Pattern Matching Conj., pp. 330-339, 1995. [9] D. Sankoff, Minimal mutation trees of se-quences, SIAM 
J. Applied Math. 28(l), pp. 35-42, 1975. [lo] D. Sankoff, R. J. Cedergren and G. Lapalme, Frequency of 
insertion-deletion, transversion, and transition in the evolution of 55 ribosomal RNA, J. Mol. Evol. 
7, pp. 133-149, 1976. [ll] D. Sankoff and R. Cedergren, Simultaneous comparisons of three or more sequences 
related by a tree, In D. Sankoff and J. KruskaI, editors, Time warps, string edits, and macromolecules: 
the theory and practice of sequence comparison, pp. 253-264, Addison Wesley, 1983. [12] D. Swofford and 
G. Olson, Phylogenetic recon-struction, in Molecular Systemtics, D. Hillis and C. Moritz (eds), Sinauer 
Associates, Sunder-land, MA, 1990. [13] M.S. Waterman and M.D. Perlwitz, Line geometries for sequence 
comparisons , Bull. Math. Biol. 46, pp. 567-577, 1984. [14] L. Wang and T. Jiang, On the complexity of 
multiple sequence alignment, Journal of Com- putational Biology 1, pp. 337-348, 1994. [15] L.Wang, T. 
Jiang and E.L. Lawler, Aligning se-quences via an evolutionary tree: complexity and approximation, Algorithmica, 
to appear; also in the Proc. 26th ACM Symp. on Theory of Computing, 1994. [16] L. Wang and D. Gusfield, 
Improved approxima-tion algorithms for tree alignment, 7th Combi-natorial Pattern Matching Conf., pp. 
220-233, June 1996.</RefA>  
			
