
 A FAST AND ECONOMIC SCAN-TO-LINE-CONVERSION ALGORITHM Gerd Woetzel Gesellschaft fHr Mathematik und 
Datenverarbeitung (GMD) D-5205 St. Augustin 1 West-Germany ABSTRACT In order to generate cartographic 
data bases, it is necessary to digitize a large number of existing base maps. One way of replacing 
the error-prone and very time- consuming manual digitization by an automa- tic method is scanning the 
map and extract- ing the linework from the resulting binary matrix. A sufficiently fast and economic 
 scan-to-line-conversion algorithm has to be developed for the line extraction. The algorithm presented 
operates with a skeletonization technique which is further developed from known line thinning methods, 
so that the scan lines are now skeletonized in a single pass and that only a small number of scan lines 
has to be held in core storage. The result of this process is equivalent to a multi-pass skeletonizat- 
ion which utilizes a quasi-parallel line thinning in four partitions of the binary matrix for each pass. 
 The data produced by the extraction algorithm following the skeletonization have two important advantages 
over data produced by manual digitization: First, the nodes corresponding to the line end points are 
exactly determined and, second, the correction phase is shortened since the automatic process is less 
error-prone. Time and storage requirements of the im- plemented algorithm applied to some typi- cal 
scan data show that the conversion for even a complex line structure can be carried out within the 
time of scanning and the economic use of core storage makes it possible to implement the algorithm 
on a minicomputer with an on-line scanner. KEY WORDS AND PHRASES: automatic digiti- zation, raster 
scanning, skeletonization, scan-to-line-converslon, line following, pattern recognition. CR CATEGORIES: 
3.14, 3.63. INTRODUCTION In order to generate cartographic data bases, it is often necessary to digitize 
a large number of existing base maps, i.e. to code the line structure of a map in coordinate form. Conventionally 
this is done by manually following the lines on a digitizer. This process is error-prone and very time 
consuming, especially with irregularly shaped lines. One way of replacing manual digitization by an 
automatic method is scanning a map and extracting the linework from the re- sulting binary matrix. The 
problem here is to develop a sufficiently fast and economic scan-to-line-conversion algorithm. Such an 
algorithm is to encode the various lines and nodes in the map as lists of line and node coordinates. 
The nodes are relevant for reconstructing the global connectivity of the line structure. In addition, 
this facilitates the generation of polygons in land use maps and the detection of errors in contour maps. 
 In the past, various scan-to-line-convers- ion algorithms have been developed (see e.g. chapters 6,7 
and 16 of (9)). Most of them are similar to the one described in this paper in that they apply local 
image transformations prior to the actual line extraction. The advantage of our algo- rithms shows in 
the quality of its results which is due to the application of a skeletonization technique, and in the 
swiftness of its operation. A comparison between the different scan-to-line-con- version algorithms is 
difficult because the necessary information is not readily found in the literature. SUMMARY OF THE ALGORITHM 
 The method we have developed divides up into three processes which are applied to consecutive scan 
lines (Fig.l). I. The scan lines coming from a scanner tape or from an on-line scanner are read in by 
a skeletonization program. They are prepared for the real feature extraction by skeletonizing the objects 
in the binary matrix, i.e. reducing them to one pixel 125 width. Simultaneously each pixel is marked 
according to its significance: O=background 1=end point (of a line), 2=(inner) line point, 3=node point. 
In order to make this process efficient, known line thinning methods were further developed so that the 
scan lines are now skeletonized in a single pass and that only a small number of scan lines has to be 
held in core storage. This number depends on the thickness of the lines in the binary matrix. The program 
does not operate on more than k+3 consecu- tive scan lines, where k is the maximal line thickness in 
raster points. The result of this process is equivalent to a multi- pass skeletonization which utilizes 
a quasi-parallel line thinning in four parti- tions of the binary matrix for each pass. 2.The skeletonized 
and marked scan lines are turned over to the node extraction program. Connected sets of node points 
are recognized as nodes of the underlying line structure. The sets of coordinates of the adjoining line 
points are the output of the node extraction and represent the nodes. The adjoining line points are then 
marked as end points and the node points themsel- ves are erased, i.e. marked as background. 3. The 
scan lines are then passed to the line extraction program. Apart from back- ground points they contain 
only end points (one neighbour) and line points (two neighbours). In this way an unambiguous line extraction 
is ensured, which results in strings of line coordinates from end point to end point. SKELETONIZATION 
 The process of skeletonization will be described first as it is applied to the whole raster matrix 
in a quasi-parallel fashion. The sequential equivalent of this process will be treated later. To allow 
for the desired marking, every pixel of the raster matrix A may take on four possible values, i.e. 
aije{O,1,2,3 ~. The skeletonization starts with a matrix which contains only O-pixels (background) 
and 3-pixels (linework). This matrix repre- sents the result obtained by scanning the original line 
drawing. A skeletonization process which is to prepare such a matrix for the real line and node extraction 
should have the following properties (apart from efficiency): -- Preservation of connectivity. The 
connectivity of a line structure re- presented in a raster matrix can be de- fined in terms of neighbourhood 
relat- ions for pixels, e.g. (7,10): Two pixels aij and aiJ j, are neighbours, iff (i) aij=O , ai,jFO 
and li-i'i + lj-j'~1, or  (ii) aij+O, afj~O and li-i'l~ I, lj-j'l~1-  IMap with I Drum Scarme: } 
rows of raster matrix ~ Skeletoni-I  zation , I rows of skeleton ~0de ile (~0 rows of node extracted 
skeleton  Line ine Extraction ~ "I free memory Fig.1 Scan-to-line-conversion How this and other 
neighbourhood relations lead to the notion of connectivity can be found in the literature (2,7,8,10). 
 -- Generation of a marked skeleton. The skeletonization should produce a raster matrix with the following 
properties: (i) has less than two neigh- ai3=1~ aij bours (end point of a line).  126 (ii) has exactly 
two neigh- aij=2 <=> aij bouts, which are not neighbours of each other (inner llne point). (iii) aij=3 
~--> aij has more than two neighbours, and eras- ing aij (i.e. putting aij=O) alters the connectivity. 
(point of a node). Such a raster matrix is called a marked skeleton. -- Recognition of end points of 
lines. End points of lines in the marked skeleton should correspond as much as possible to end points 
of lines in the original line drawing. The skeletoniza- tion should neither produce "spikes" (additional 
short lines) nor should it shorten lines. -- Lines in the skeleton should correspond to the centre of 
the lines in the origi- nal. The first requirement leads to the use of known line thinning algorithms 
for the skeletonization (2,6). These algorithms have been developed for binary matrices and operate with 
local transformations,i.e. the transformation of a pixel uepends only on its neighbourhood. The preservation 
of connectivity is guaranteed. A local trans- formation for raster matrices A with a..6 {O,I,2,3,) can 
be defined in a similar 13 fashion, so that the global connectivity is preserved under this transformation 
and the desired marking of the raster ma- trix is carried out. For the definition of f we need a classification 
of the possible neighbourhoods of a 3-pixel, which is repre- sented in Fig.2 (apart from symmetry). 
f(aij):=aij ~ aij#3 or aij has a neigh- bourhood of class K or I. ~> a..=3 and a.. has a neigh- f(aij):=2 
 13 13 bourhood of class L. f(aij):=1 <=> aij=3 and aij has a neigh- bourhood of class E 2 or P. -<=> 
a..=3 and a.. has a neigh- f(aij):=O 13 13 bourhood of class E 3 or U. XOX XXO XXO XOX OXO XOX XOX 
XXO XXO XOX K: X30 030 030 030 X30 030 X3X X30 030 X30 OOO OXO OOX OOX OOX OXO OOO OOX OXX OOX OXX 
XOX XXO XXX XXX XXX XXX XXX XXX XXX X30 030 O3X 030 030 X30 030 030 O3X 030 OOX XOX XOX OOX OXO OOX OXX 
XOX XOX XXX OXO XXO XXX XXO XXX XXX XOX OXO OXO I: X3X X3X X3X X3X X3X X3X L: 030 030 030 OXO OXO OXO 
OXX OXX XXX 000 OOX OXO XOO 020 200 OOO 030 030 E2:030 030 P: 030 E3:030 OOX O00 OOO OOO OOO 300 XXO 
OXO XXO XXX OXX OXO XXX XXO 030 U: 030 X30 X30 030 X30 X3X X30 X3X 000 0OO OO0 000 O00 O00 000 000 O00 
 XXX XXO OXO XXX XXX XXO OXO XXX XXX XXX x3x 03x x3x 03x x30 x3x x3x x3x x30 x3x ~0 oox oox oox oxo 
oox xox oox oxx xox  x~{2,3~ Fig.2 Classes of neighbourhoods. Just as in the case of binary matrices 
one can prove that the application of the local transformation f to a pixel does not change the global 
connectivity. Therefore this holds also for the sequential applica- tion of f to different pixels. Moreover, 
it can be shown if all pixels of a raster matrix remain constant under f, this raster matrix is a marked 
skeleton in the above sense. The last two requirements for a skeletoni- zation process are therefore 
criteria for the order in which f should be applied to the plxels of the raster matrix. A quasi- parallel 
procedure (10) has proved parti- culary favourable. The pixels are divided up into four partitions so 
that pixels of one partition cannot be neighbours of each other: P1={aijli odd, j even} 2121212121 .... 
4343434343 P2={aij|i odd, j odd ~ 2121212121 P3={aij~i even, j even} P4=[aijli even, j odd 7- Within 
a partition the order of applica- tion of f is arbitrary. For a skeletoniza- tion step, f is applied 
first to the pixels of PI' the to P2' P3 and P4" These skele- tonization steps are repeated until no 
pixel has been changed in a step, i.e. the number of 3-pixels has remained the same. It can be shown 
that the number of skele- tonization steps which are necessary for the production of a skeleton is bounded 
by half the maximal line width in raster points. The order of the partitions within a skeletonization 
step influences the re- sulting skeleton. Our experience shows that other orders produce more "spikes" 
and zig-zag-lines.  127 SEQUENTIALIZING THE SKELETONIZATION The above akeletonization algorithm is 
not suited for practical purposes, since the raster matrix is so large (up to 25 million pixels) that 
it has to be read in or stored intermediately several times. However the order in which the local transformation 
f is applied can be changed without changing the result of the whole skeletonization process. First, 
the processing of partitions PI' P2 and P_, P. respectively within one row (scantling) ri=(aij,aij 
.... ain) of the raster matrix is combined to a row skele- tonization F: F(ri): DO FOR j=l TO n STEP2 
BEGIN ai,j+ I := f(ai,j+1); aij := f(aij ) ; END  According to this, f is applied consecuti- vely 
to ai2 , all , ai4 , ai3 .... If F is applied first to all odd numbered rows and then to all even numbered 
rows, the result is the same as with one of the above skeletonization steps. Moreover, one gets the same 
skeleton also with a row or- dering rl;r 3 r 2 r1! r 5 r 4 r 3 r 2 rl; ....  for the row skeletonization 
F because the mutual dependence is preserved. The number of row transformations which must be applied 
to a row to achieve a complete skeletonization, is not greater than the number of skeletonization steps 
necessary for the same purpose. Therefore, rows with smaller indices don't have to be transformed after 
a certain time. In this way a maximal number of k+3 consecutive rows have to be kept in main storage 
for the skeletonization, where k is the maXi- mal line width (Fig. 3). The skeletoni- zation algorithm 
now looks like this: skeletonize: k:=1; 1:=I; r 0 :=(O,O,O..O); DO WHILE (l~k) BEGIN read rows rk,rk+l; 
DO FOR i=k TO 1 F(ri); IF r I complete THEN BEGIN put row rl; 1:=1+I; END IF not end of file THEN 
 k:=k+2; END OOO O OOO OO O!O OOO 020 O10 020 020 row~l rows put 020 020 out to 020 020 node 
or 020220 line ex- 00300 traction o_Ioo 020 0020 rows currently 00300 processed 032O20 by the 
 030 030 skeletoni- 333 333 \ zation 333 333 \ \program row#19 333 333 Fig. 3 Sequential skeletonization 
 NODE AND LINE EXTRACTION The node extraction program gets the rows of the skeleton from the skeletonization 
program. To simplify the node extraction, all pixels in a row which belong to class I (Fig. 2), are erased. 
To avoid lines which consists of one point only all 1- pixels without neighbours are erased and all 2-pixels 
with two 3-pixel neighbours are themselves transformed into 3-pixels. OOO OOO 300 300 O10 -POOO 020 
~ 030 OOO OOO 003 003 The node extraction proceeds for a given row in five steps. In previous rows the 
program may have started the extraction of nodes which have to be continued or completed by further 3-pixels 
of the given row. (i) For every node whose extraction has not yet terminated neighbouring 2- pixels 
are searched. These are set to I and the corresponding coordina- tes are put in a list, which is associated 
with this node.  (ii) For every node the neighbouring 3- pixels are searched. The coordina- tes are 
stored for the continuation of the node in the following row. The pixels themselves are erased.  (iii) 
The extraction of every node which did not receive additional coordina- tes in step (ii) is terminated 
and the list of line end points, which is associated with such nodes, is put out to the node file. Nodes 
which received equal coordinates for con- tinuation in step (ii) are united.  128 (iv) The remaining 
3-pixels in the row are erased and their coordinates are attached to newly created nodes, de- pending 
on connectivity.  (v) All nodes which were created during step (iv) are treated as in step (i).  After 
having been processed by the node extraction program, a row is transfered to the line extraction program. 
This program works similarly to the node extraction program. First, all lines which are alrea- dy known 
to the program are continued, connected, or put out to the line file, the latter when the line following 
is termina- ted for a certain line. Then the row is scanned for starting points of new lines (1-pixels). 
The new lines are continued and put out if possible. When following lines the corresponding pixels are 
erased. Finally, the remaining 2-pixels are extrac- ted, creating additional new lines. After this the 
storage for this row can be used again by the skeletonization program for reading in new rows of the 
raster matrix. PROGRAM PERFORMANCE The data produced by this algorithm have two important advantages 
over data produ- ced by manual digitization: First, the nodes are exactly determined by the corresponding 
line end points and, second, the correction phase is shortened because the automatic process is less 
error-prone (4,3). On the other hand, a new error type is characteristic of the raster scan method: 
The introduction of nodes by merg- ing of lines which nearly touch in the original and the introduction 
of small gaps. The latter errors can be corrected automatically, but it is preferable to have good quality 
in the original line drawing and to avoid this type of error. The programs have been executed for about 
 20 maps. For some typical examples storage requirement, CPU-time,and computing costs are listed in 
Table I. The results presen- ted are taken from an implementation on a SIEMENS 4OO4/151 computer (same 
instruc- tion set as for an IBM/360-50, and roughly twice the sFeed). The tasks were run in a time 
sharing environment. Sanning was done off-line with an OPTRONICS P-IOOO scanner with a 5Ox52 cm drum. 
 CONCLUSION Tests of the whole program have shown that the conversion for even a complex line structure 
can be carried out within the time of scanning. Moreover, the economic use of core storage makes it 
possible to implement our algorithm on a minicomputer with an on-line scanner. Yype of nap =ont.ouz" 
28x48 SO 62.60 5096 1017 93 110.20 (169) =ounty ~OUndaz'¥ 30x4S 100 12.90 1026 235 53 25.50 (517) ~unty 
40x43 100 13.00 984 27S 56 29.80 boundary (687) :o~lunlty SOxSO 100 65.20 16616 1115 67 120.80 ~oundary 
(10500) land ume 50x46 100 28.60 1930 393 59 42*60 (1225) 1SIRENS 4004/151 ¢~ter (8~e instructions 
met as an I8M/360-50, an roughly twice the 8pe~) 2£ncl, pz~ (35 ~¥te) wit~ut ~lay, Table l:Results 
of scan-to-line-conversion algorithm. REFERENCES <RefA>I. Boyle,A.R., The present status of auto- mated cartography. 
Computer Graphics (ACM-Siggraph), 9(1975), pp.260-266 2. Gray,S.B., Local properties of binary images 
in two dimensions. IEEE Trans. Computers C-20(1971), pp. 551-561  3. Kansy,K., Capture and encoding 
of area- oriented geographic maps. To appear in: the 3 rd Jerusalem Conference on Infor- mation Technology 
(JCIT) 1978.  4. Klein,K.H., Kreifelts,Th., Pick,K., Woetzel,G., Erfahrungen mit der Digi- talisierung 
von rasterm~Big erfa~ten Linienstrukturen II. GMD-Mitteilungen Nr. 37, St.Augustin,West Germany,1976. 
 5. Kreifelts,Th., Pick,K., Wisskirchen,P., Woetzel,G., Erfahrungen mit der Digi- talisierung von rasterm~Big 
erfaBten Linienstrukturen I. GMD-Mitteilungen Nr. 30, St.Augustin, West-Germany,1974.  6. Kreifelts,Th., 
Woetzel,G., Extraktion yon Linienmustern aus Bin~rbildern. To appear in: Kazmierczak,H.(ed), Maschinelle 
Bildverarbeitung, Springer Heidelberg-Berlin-New York.  7. Mylopoulos,J.P., Pavlidis,T., On the topological 
properties of quantized spaces I. J.ACM 18 (1971) pp.239-246.  8. Rosenfeld,A., Connectivity in digital 
pictures. J.ACM 17(1970), pp.146-160.  9. Tomlison,R.F.,(ed.),Geographical Data Handling. Int.Geographical 
Union Second Symposium on Geographical Information  Systems,Ottawa,Canada, 1972.  10. Woetzel,G.,Linien- 
und Knotenextraktion aus Rasterbildern, GMD-Mitteilungen Nr. 44,St.Augustin, West-Germany,1978.</RefA>  129 
   
			
