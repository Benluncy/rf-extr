
 Advanced Placement in Computer Science: A Summer Workshop James R. Comer Kurt A. Schember Computer 
Science Department Texas Christian University Ft. Worth, Texas 76129 A discussion of an in-service course 
designed to give high school teachers the background needed to teach an Advanced Placement course in 
Computer Science is presented. The discussion outlines the decisions made regarding equipment and other 
facilities, support personnel, and textbooks. Course outlines are presented, along with an evaluation 
of the course. I. INTRODUCTION Since 1955, the Advanced Placement(AP) Program, under the auspices of 
the College Board, has offered secondary school students an opportunity to study college-level courses 
and then, depending on examination performance, to receive college credit or advanced standing upon acceptance 
at a participating college or university. The Advanced Placement Program is then one way for a secondary 
school to provide its academically stronger students with an opportunity to study course material that 
should not need to be repeated at the college level. With the announcement of the College Board's intention 
to offer a Computer Science AP Examination in May 1984, the first edition of a Teacher's Guide was prepared 
by the Advanced Placement Computer Science Development Committee[l]. The proposed course is intended 
to be the equivalent of a two semester, first-year college course in computer science. Realizing that 
many of the secondary school teachers who would be involved in teaching such a course would not have 
had formal training as computer scientists, the Committee recommended that appropriate in-service summer 
institutes be offered to assist such teachers in becoming proficient in the topics covered in the proposed 
AP course outline. Permission to copy without fee all or part of this material is granted provided that 
the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and 
the title of the publication and its date appear, and notice is given that copying is by permission of 
the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific 
permission. &#38;#169; 1984 ACM-0-89791-126-1/84/002/0119 $00.75 In an attempt to respond to this need, 
Texas Christian University, under the direction of the authors, conducted an intensive three-week summer 
workshop from June 20 to July 8, 1983. The intention of the workshop was to introduce students, comprised 
entirely of secondary school teachers from the Fort Worth Independent School District (FWISD), to a broad 
range of computer science topics. Topics included the Pascal programming language, program development 
and methodology, data structures, numerical analysis, and searching/sorting techniques. This paper presents 
an outline of the AP Summer Workshop held at TCU this past summer and evaluates its effectiveness in 
light of the proposed Teacher's Guide to Advanced Placement Courses in Computer Science. II. COURSE 
RATIONALE The strategy adopted for teaching the course was dictated by a variety of constraints, including: 
scheduling contraints for both students and faculty/staff available computing resources the ambitious 
outline for the course, as proposed by the College Board Scheduling constraints dictated that the course 
be started and completed during a very rigid timeframe. FWISD teachers had to complete the 1982-83 school 
year and required in-service training prior to being able to start the course. Additionally, due to very 
early summer school scheduling committments, TCU faculty and lab assistants had to complete the course 
by July 8 (the end of the first summer school session). Consequently, a 3-week course format was chosen, 
to run from June 20 through July 8. Daily lectures were conducted from 8:30 to 11:30  119 with an afternoon 
workshop and lab running from I:00 to 5:00. Computing facilities controlled by the TCU Computer Science 
Department did not include a personal computer laboratory of sufficient size to administer the course. 
Consequently, the decision was made to use the University's VAX 11/780 for all programming exercises. 
This proved to be a good decision, since at least one of the Fort Worth high schools represented had 
its own VAX 11/750. In addition, a terminal lab, scheduled exclusively for the AP course and having one 
CRT terminal per student, was made available every afternoon in a programming workshop environment. 
All programming exercises assigned during the course were standardized, and students were expected to 
complete every assignment. Programming support was provided by four senior computer science majors assisting 
during each of the four-hour afternoon programming sessions. Thus, at all times, extremely competent 
programming assistance was available to each student enrolled in the course. It was felt that the AP 
Course outline, as proposed by the Computer Science Development Comm{ttee, was terribly ambitious for 
a short term summer course. Lacking the time to present all topics from the outline in a quality fashion, 
it was decided to concentrate on those skills and topics that were most central to the course, that might 
be the most difficult to teach, and that would be the most valuable to a freshman in a university level 
program in computer science. The major thrust was to cover Pascal and structured programming (60%), data 
structures (30%), and numerical methods (10%). Topics other than Pascal, including a variety of applications, 
were interspersed with the coverage of the Pascal programming language. This permitted a team teaching 
approach and allowed more meaningful topics for programming assignments. Peripheral topics such as literacy 
and architecture were covered in conjunction with other areas, partially due to time constraints and 
the students' background. III. TEXTBOOK SELECTION Two textbooks were adopted for use in the course. 
Oh! Pascal! by Cooper and Clancy [2] was selected for the Pascal language portion of the course. Data 
structures and numerical methods were covered using An Introduction to Computer Science by Tremblay and 
Bunt [3]. The adoption of two separate texts was dictated by the diversity of the topics that were to 
be covered. In addition, priority was given  to selection of texts that would provide the teachers with 
good reference material. While these textbooks proved to be successful, the authors would advocate careful 
consideration of other textbooks as they become available. Since programming experience was a prerequisite 
for the course, the selection of an appropriate Pascal language text centered on ensuring adequate coverage 
of the entire language. Oh! Pascall was selected for this reason. Additionally it was felt that the text 
did not spend an inordinate number of pages on beginning programming concepts ("this is a computer", 
etc.). It should be noted that the text had been used with relatively good success within the department 
for three semesters. This clearly aided in course planning and preparation. The introductory computer 
science text was selected after examining a wide range of books of that general ilk. None was found that 
had the range of coverage and completeness of coverage that the Tremblay  and Bunt text has. In fact, 
it proved extremely difficult to find adequate coverage of both data structures and numerical methods 
in a single text. IV. COURSE OUTLINE As mentioned previously, non-Pascal topics were interspersed within 
the framework of the Pascal programming language (see Appendix II). The first week o~ the course consisted 
of four days of Pascal followed by one day of numerical methods. Topics covered during this period consisted 
of an introduction to Pascal, Pascal procedures and functions, and control structures. The numerical 
methods section investigated error analysis and approximation, zeroes of functions, and numerical integration. 
Week two was spent in the examination of Pascal arrays and records. This section was concluded with a 
lecture on sorting and searching using arrays. Algorithms that did not require an understanding of trees 
or pointers for implementation and analysis were studied. The remainder of the second week and the first 
part of the third week were spent covering the remaining structured types in Pascal (namely: files, sets, 
and pointers). This material established the framework for the final block of lectures on trees (both 
general and binary) and their applications. Major exams were scheduled for Friday of each week. The 
exams, coupled with daily programming exercises, were used to determine final grades for the course. 
 120 Lecture #5  V. PROGRAMMING ASSIGNMENTS Programming exercises were assigned each afternoon with 
the instructions that they were to be solved and solutions turned in at class time on the following day. 
As noted before, all programming was performed in a workshop environment under the supervision of several 
senior computer science students. Each programming assignment was coordinated with the morning's lecture 
topic. As such, it was felt that each student needed to complete the day's assignment prior to undertaking 
any new material. Accordingly, complete programming solutions were provided to those students unable 
to finish the preceeding day's assignment satisfactorily. Following are brief abstracts of the programming 
exercises assigned during the three week workshop and their relationship to the lecture topics as shown 
in Appendix II. Lecture #I Lab la -Edit an existing text file to correct all grammatical mistakes. 
 Lab Ib -Convert a Pascal program that contains errors into a correct program and execute it. Lab Io 
- write a Pascal program that will convert a temperature reading in Farenheit to celsius. Lecture #2 
 Lab 2a - Write a Pascal program that will compute a class average for a given student. Use a procedure 
to perform the necessary calculations and a CASE statement to yield letter grades (A = 90-100, etc.). 
 Lab 2b -Change your Lab Ic program to handle multiple input values using a FOR statement. Modify the 
program to convert and display Farenheit temperatures in both Celsius and Kelvin and Celsius values in 
both Farenheit and Kelvin.  Lecture #3 Lab 3 -Process a text file, computing the average number of words 
in a sentence, the average number of letters per word, and the total word count in the text.  Lecture 
#4 Lab 4a -Calculate the square root of an integer value and compare your answer with the built-in SQRT 
function. Lab 4b -Convert Lab 4a to calculate the Nth root of a given value. Data consists of multiple 
input records, each record containing a value and the desired root. Lab 5a -Given a function f(x), write 
generalized functions to solve for its roots. Use the bisection, secant, and Newton methods. Lab 5b 
-Given a function f(x), write generalized functions to evaluate its integral. Use the rectangle, trapezoid, 
and Simpson methods.  Lecture #6 Lab 6 -Using procedures, user-defined ordinal types, and arrays construct 
a program to maintain an inventory for a hypothetical company. Process transactions to update and manipulate 
the inventory. Lecture #7 Lab 7" -Rewrite Lab 6 using records and record variants. Develop a sequential 
search procedure to handle the "updating" process. Lecture #8 Lab 8a -Rewrite the sequential search 
procedure of Lab 7 as a binary search procedure. Lab 8b -Using a supplied program which has been written 
using the bubble sort method, run the program as is. Replace the bubble sort procedure with a Shell sort, 
and ~inally with a straight selection sort. Maintain and compare statistics for all three methods. Lecture 
#9 Lab 9 -Write a program to manage inventory for a hypothetical automobile rental agency. Input consists 
of a Pascal file and includes, among other data items, a set of attributes describing vehicle options. 
Queries involving Pascal set operations should be processed against an array of records created from 
the data file. Lecture #10 Lab 10 -Modify Lab 9 to use a sequential linked list instead of an array. 
 Lecture #11 Lab 11a Given a driver program that constructs two separate binary trees (not binary search 
trees), write a non-recursive inorder tree traversal procedure that will "visit" all nodes in the tree. 
-Lab 11b Rewrite Lab 11a, substituting a recursive inorder tree traversal algorithm for the non-recursive 
one. 121 Lecture #12 Lab 12a - Write a program that will construct a binary search tree. Traverse 
the tree using either of the traversal procedures developed earlier  Lab 12b -Replace the Lab 8b bubble 
 sort procedure with a heapsort procedure (using pointers). Compare the performance of each of the 
three sorting methods  VI. CONCLUSIONS AND RECOMMENDATIONS Of the eleven students starting the course, 
eight finished. Academic credit was earned by four of the completing students while audit credit, which 
required full participation, was earned by the remaining four. In addition, each student was awarded 
in-service credit for their participation With some reservations we feel that the course was a success 
However, there were extenuating circumstances that led to the small number of completing students Among 
these were: the short, intensive timeframe in which the course was offered  most of the students were 
poor programmers coming into the course (many did not meet the basic course prerequisite and displayed 
little or no programming skill)  the course content and level of difficulty was misrepresented to the 
students by FWISD administrators  all of the students were older than the lab assistants, and as such, 
felt uncomfortable with the role reversal  it was felt that the course outline, as recommended by the 
AP Computer Science Committee, was overly ambitious   There is apparently a great deal of variation 
among the AP summer workshops offered by different universities. This past summer, workshops having course 
lengths of two, three, and four weeks were offered, with varying results While a four week course length 
was impossible for our situation, it is the authors' opinion that four weeks is the optimal course length, 
given the volumn of material to be covered It is also important that students have some programming experience 
prior to entering the course. Anything short of four weeks hardly provides enough opportunity to cover 
the required material --much less if programming must also be taught AP courses for other subjects evolved 
at a time when there was the necessary teacher background already in place to teach the required material 
At present, this is simply not the case with computer science. Few secondary school teachers have the 
necessary formal training that is required to do better than an adequate job in covering the prescribed 
material. Until this situation can be overcome, it is essential that more training for secondary school 
teachers be provided, particularly with the ambitious AP course outline that is currently being recommended. 
  VII. ACKNOWLEDGEMENTS In conclusion, it would be appropriate to thank the Texas Christian University 
administration for their support It would have been difficult to administer the course adequately with 
fewer resources than were provided. REFERENCES <RefA>[I] Garland, Stephen J , et al editors. College Board's 
Advanced Placement Computer Science Development Committee, Teacher's Guide to Advanced Placement Courses 
in Computer Science, College Entrance Examination Board, 1983. [2] Cooper, D and Clancy, M , Oh! Pascal!, 
W W. Norton &#38; Company (1982) [3] Tremblay, J. and Bunt, R. B., An Introduction t o_o Computer Science 
An Algorithmic Approach, McGraw-Hill (1979).</RefA> APPENDIX I A. For information about new Development Committee 
materials contact Dr. Phil Miller Computer Science Department Carnegie-Mellon University Pittsburgh, 
PA B. For information about the examinations contact Dr. David Rine Computer Science Department Western 
Illinois University Macomb, IL C. For general Advanced Placement information contact Dr. Carl Haag, 
Director Advanced Placement Educational Testing Service Princeton, NJ 122  APPENDIX II AP COURSE OUTLINE 
-Summer, 1983  DAY LECTURE TOPIC READING ASSIGNMENT June 20 Intro. to Pascal, Simple I/0, Chapters: 
1,2,3, (C&#38;C) (Mort) Expressions, Assignment Statements, Intro. to Procedure June 21 Procedures (continued), 
Chapters: 3,4,5, (C&#38;C) (Tues) scope, Argument~Parameters, Case and For statements. June 22 Top-Down 
Design, Boolean Ex-Chapters: 5,6,7 (C&#38;C) (Wed) pressions, IF statement, Re- peat and While Statements. 
 June 23 Function Subprograms, Intro-Chapters: 8,9 (C&#38;C) (Thur) duction to Recursion, Ordinal Types 
 June 24 { **Exam #I** { Chapters: 8.1,8.2,8.3 (Fri) { Numerical Analysis { (T&#38;B) June 27 { Ordinal 
Types (continued), { Chapters: 9,12'(C&#38;C) (Mon) { Arrays Jufie 28" Records I Chap£er: 11 (c&#38;c) 
(Tues) { June 29 Sorting &#38; Searching with Chapters: 4.3,10.4, (Wed) arrays 10.5.3,10.6 10 -IO.2(T&#38;B) 
 June 30 Files, Sets ~ Chapters: 13,14 (C&#38;C) (Thur) July I ** Exam #2 ** I Chapter: 15 ' (Fri) Pointers 
{ July 5 Pointers (continued) Chapter: 15 (Tues) July 6 Trees, Binary Trees and Chapters: 11.1-11.413 
(Wed) their applications thru p. 618 (T&#38;B) July 7 Trees &#38; Binary Trees Chapters: same as (Thur) 
(continued) above July 8 **'Final Exam ** (Fri) 123 
			
