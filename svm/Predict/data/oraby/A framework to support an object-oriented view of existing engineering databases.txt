
 A ~~ ran~cworlc to Support an 0iijer.t ,-Orieni ed View of Existing Engineering Databases R.afiu 1 Ahad 
Dept. of Information Systems College of Business and Management, University of Maryland College Park, 
Maryland ABSTRACT This paper presents a framework for an Object Man-lgement System (OMS) to support an 
object-oriented view )f an existing engineering database. OMS is intended to un on a workstation to access 
the engineering database In another machine (host,). OMS has three components: Data Model (DM) to define 
the objects and the relation- ;hips among the objects that exist in the host database, a Transformation 
Model (TM) to define the modeling con-:epts that are not directly supported in the DM, and a \4apping 
Facility/Optimizer (MF/O) to map the relation- ships to data stored in the host, and to build a host-executable 
program for each query the user issues. Map-ping is done by host-executable procedures that encode the 
knowledge about the access to host-resident data. MF/O optimizes access to the host s database. 1. Introduction 
4n engineering and manufacturing process consists of the conceptualization, design, development, testing, 
fabrica-tion, distribution, and maintenance of engineering prod-rcts. Over the years the autornation 
of various phases 3f this process has taken a piecemeal approach and has created many autonomous information 
systems. The m-dividual information systems may use different hardware, software, and database models 
(if any). There is one thing in common among these informations systems: they model various phases of 
the life cycle of engineered products. For several reasons such as Computer Integrated Manufactur-ing 
(CIM), or strategic decision making, information about the entire life cycle is required. Therefore, 
an integrated global view of these autonomous information systems is needed. Several approaches to provide 
a global (super) view of heterogeneous databases in an administrative informat.ron management environment 
have been proposed [Motr8 I, Motr87, Daya84, Jaco87). In these approaches, a.n object- oriented functional 
view of each local dat,abase is assumed to be available. Although defining such a view for a record- 
based (i.e., hierarchical, network or relational model) ad-ministrative database is not a difficult task, 
the engineering design and manufacturing environment has the following three problems that inhibit the 
direct use of the above techniques. The first problem is the lack of resources on the sys- tem that 
maintains the CAD/CAM data.base to support an object-oriented local or global view of the database. This 
is easily solved by implementing the view management sys-tern on an advanced workstation. Such workstations 
(e.g., Sun Microstation) have the right amount of memory, pro-cessing power, software tools, and communications 
capa- bilities to implement a cost-effective View lnanW$r. The second problem is the diversity of storage 
and ac-cess structures used in the existing CAD/CAM databases These range from flat files to data structure 
dumps Al-t})cjugh rw,ent, CAD/CAM systems have started to use data models to manage the design and manufacturing 
data. a sut,st,;mtial number of them in use still maintain the); 0~11 Unicycle Fjt,O~i~gC a.ccess structures. 
,2il and Supporting ol)jc,:t,-oric~rlt(,(I IO~;LI view of these C14D/C.4M databajca is ;I (lillicull, 
prot)lvlt1. The 1 h jrtl ~WOI)IVIII is t.hat, the information mnnagemc~lt is,slr(:ci iu (:A I)/( :,4hl 
c~n\~ironlrlcnl,s arc substantially c!if- ferent from those associated wit,h administrative environ-ment. 
Thus the tools and t.echniques used for the latter environment cannot be readily applied to the former. 
Re-searchers have recently begun to investigate the issues re- lated to conceptual modeling for engineering 
applications, and have developed concepts and techniques to better cap-ture the semantics of the application 
domain. These in-clude complex objects [Hask82, Lori83, Bato85, Banc86], versions [McLe83, Rato85, Katz86], 
hierarchical composi-tion [Katz85], geometric modeling [Prei82], and multiple representations (Katz851. 
Several enhancements to the relational model deemed necessary for an engineering information system have 
al-ready been suggested [Gutt82, Hask82, Lori83, Ston83]. Several semantic model have also been proposed 
[McLe83, Afsa85, Katz 851. These work are primarily concerned with conceptual modeling, the issue of 
mapping the conceptual constructs to physical constructs is not addressed. We are currently working on 
a workstation-based sys-tem called OMS (Object Management System) to define and access object-oriented 
views of existing engineering databases. OMS has two subsystems, the global OMS (GOMS), and the local 
OMS (LOMS). The GOMS is concerned with providing the global view of several au-tonomous databases, and 
the LOMS is responsible for providing the object-oriented view of individual (local) databases. This 
paper presents the software architecture of the LOMS, and explain, in general terms, the functions of 
each component of the architecture. The LOMS has three major components: the data mode1 (DM), the Transfor-mation 
Model (TM), and the Mapping Facility/Optimizer (&#38;IF/O). The DM . sets and IS used to specify the 
object re-lationships among them that are stored in the host-resident database. The TM is used to capture 
modeling concepts and constraints (e.g, subtypes, versions, etc.) t,hat are not directly supported by 
the DM. The relationships between objects that are described using the DM are materialized by calls to 
host-resident procedures supplied by the user. In general a relationship may be access by one of many 
al-ternate procedures (alternate access methods) and a proce- dure may be used to access many relationships. 
The map-ping between the relationships defined by the DM and the procedures that materialized them are 
specified using the MF/O. When the user issues a query, the MF/O generates a host-executable progam that 
contains calls to the pro- Almost all of them use the relational model as the underlying model to store 
data. cedures that materialize the rc~lationsh ips referenced in the query. This program communicates 
with the workstation- resident process and supplies the latter with the data on request. The MF/O does 
a fair amount of optimization in order to reduce the communicat,ions and l/O costs. Most implementations 
of data models (i.e., database management systems) use their own model of physical stor-age system (file 
system). The DBMS determines the or-ganization and acces methods of files to represent the conceptual 
constructs. Thus when a query against the conceptual database is given, the DBMS knows how to generate 
code for the file system to evaluate the query. However, if the physical storage model is not fixed, 
the DBMS may have to keep track of the many possible file organizations and access methods and the almost 
infinite variations in the implementations of the file systems. The DBMS will become a very large and 
complex piece of soft- ware that cannot be used with file systems that it does not know. Therefore we 
take a different approach in mapping the conceptual constructs to the physical constructs. We do not 
dictate the storage model, instead we require the user to provide the procedures to access data related 
to a given data item. The knowledge about the organization and access method of the file system is embedded 
within the procedures. The user additionally defines the costs associated with different options available 
for access and different combination of procedure calls. This information is used to optimize the access 
to the file system. The remainder of the paper is organized as follows. In section 2 we describe the 
DM. In section 3, the TM is ex- plained. In section 4, we present the MF/O. In section 5, we present 
an overview of OMS. Section 6 contains con-cluding remarks. 2. The Data Model The data model component 
of EOM is an object-orienttd functional data model. The basic modeling constructs of this model are objects, 
object sets, and functions. Thcrct are two kinds of objects: l descriptor objects are printable values, 
e.g., ASCII strings, numbers, etc.. l ubstrnct objects arc non-printable idcnt,ifiers that act as surrogates 
for things or concepts in the real world. Each set of objects is an ordcrcd or unordered finite subset. 
of an object t,ype. An objcc-t. t.ype consists of all pos- sible obj(~ct.s sharing common propcrt its, 
and intuit.ivcly corresponds to a type in programming languages. We as-sume the existence of pm-defined 
object. types from which object sets are defined. A function maps objects in one object set (called the 
domain) to objects in another (called the range). Functions are intended to model the relationships 
among objects. We allow only single-argument functions. .4 funct,ion may be declared as single-valued 
or set-valued, and partial or total. A single-valued function maps an object in a domain to an object 
in a range. A set-valued function maps an object in a domain to a subset of the range. If a function 
maps every object in the domain to some object in the range then it is a total function, otherwise it 
is a partial function. For every function f from object set X to object set Y, there exists an inverse 
function, which if not explicitly named, can be referred to as $f. A function is expressed as a set of 
2-tuples (d, R), where the d is an object that is unique wit,hin the set and R is a set of objects; the 
cardinality of R is one for single-valued functions. A conceptual schema defined with this model consists 
of definitions of object sets and functions, and can intu- itively be described by a directed, labeled, 
multigraph. Each object set of the schema is represented by a node of the graph; a black node for a descriptor 
object set and a white node for an abstract object set. Each object set must be given a unique name. 
Each function is repre- , sented by a directed edge from the node corresponding to the domain of the 
function to the node corresponding to the range of the function. The name of the function is represented 
as the edge label. The name of the function is unique among those having the same domain. To refer to 
a function whose name is not unique within the schema, it must be appended by the Q symbol immediately 
fol-lowed by the domain object set name. A single-valued function is distinguished by a single arrowhead 
drawn on the edge, and a set-valued function by two arrowheads. A total function is denoted by a bar 
in front of the ar-rowhead(s); the absence of the bar means the function is partial. As an example, consider 
a schema to capture the infor- mation about design objects in a VLSI design environment. We will use 
the example given in [Katz85]. The graphical representation of the schema is shown in figure 1. Each 
cell has a name, a version number, a designer, type, and the time. A cell may be contained within another 
cell. Each cell has a representation which is a set of type-position pairs. The interface of a cell is 
made up of performance, polygon and interface objects. A cell is CYJ~II~~SN~ of some instances of other 
cells appropriately translated. Several data manipulation languages (DML) have been proposed for the 
functional data model [Dune79, ShipRO, Ahad851. Any of these can be used to manipulate the data. In this 
paper we will use the DML described in [Ahad85] to explain the various functions of OMS. A query in this 
DML is a procedure that is written in a standard program- ming language augmented with special data manipulation 
. statements. Figure 1. Example Conceptual Schema The main constructs used to manipulate data in the 
model are access paths, set operators and aggregate oper- ators. An access path is a function or a composition 
of functions; fl 0.. . o f,,, is an access path where fl,. . . , f,, are functions such that the range 
of f; is the same as the domain of fi+l for 1 5 i < n; and o is the composition operator. An access pabh 
corresponds to a directed path in the graphical rcprcscntat,ion of the schema. For exam- The source of 
an access path must tw ;I subset of the do- interface 0 performance, rotrit~vc~ the clestinatlon, say 
p, main of the first function of the access path. For example, locate the tuple whose fir:;1 c:lc~ncnt 
IS p in the function if n is a set containing designer names, then we can use D as the source of the 
acces path $designer o name@cell to access t,he cell names of the cells the designers have designed. 
Expressed in conventional notation, the destina- tion set is lJcdE~) name@cetl($designer(d)). If the 
source is ordered, and if the path traversal is specified to be order- preserving, then the destination 
is ordered in such a way that if 51 occurs before z2 in the source then P(zl) occurs before P(s2) in 
the destination where P(z) denotes the destination of source x for path P. As an example, consider a 
query to print the version number and designer name of the cell named shift regis-ter whose delay is 
5ns. The following procedure could be used to evaluate the query. begin Cl = { shi ftregister } o $name@cell; 
C2 = (5.0) o $delay o $performance o Snterface; C3 = intersect(C1, C2); for each z in C3 do print(z o 
version), x o designer); end Figure 2. Example Query The meaning of the procedure is as follows. Use 
{ shift register } as the source, and traverse the access path $name@celt; retrieve the destination into 
Cl. Using 5.0 as source, traverse the access path $delay o $performance o Sinterface and retrieve the 
destination into C2. Com-pute C3, the intersection of C1 and C2. Use each ob- ject in C3 in turn as a 
source, and traverse and print the destination of the access paths version and designer. It should be 
emphasized that the above is a logical dure; i.e., the query evaluator may use different paths when physically 
evaluating the query. For ple, after retrieving the cell object using path, the query evaluator might 
actually path interface o performance o delay to if it happens to be an eficient method performance considerations 
Updating a database jects using access paths, date individual functions. are discussed the first use 
the proce- access exam- access access get C3 from Cl to do so. Such in [Ahad86]. involves isolating relevant 
ob-and using these objects to up-For example, to update the power of version 2.0 of the shift register, 
use the (2.0) and { shift register } as sources of the access paths $version and $name@cett respectively, 
intersect the two destinations, use the result as the source to traverse power, and update of the tuple. 
the second c~l~~ruc!nt. A remark is in order concerning the data model. The data model is lacking in 
some features deemed necessary for semantic data models. For example, it does not sup port generalization/specialization 
abstraction mechanism [Smit80]. The reason for this lack of some features is that the data model is designed 
to capture the data stored in an . existing databases, and these features are not used in the existing 
databases. However, if the object-oriented view is to be used to support a global view, these features 
must be provided by the data model. We provide these features by means of the transformation model described 
in the next section. 3. The Transformation Model The TM is used to enhance the modeling power of the 
DM. TM allows the users to specify special relationships and derived relationships. TM is a formalism 
to define a knowledge base and transformation rules. The knowledge base is used to state the facts associated 
with the database schema. The transformation rules are used to transform a query involving relationships 
not known to the database schema into a query against the database schema. 1 The knowledge base is defined 
using the Horn clausal form first order predicate calculus as implemented in Pro- log [Cloc84]. Th e 
knowledge base is used to store facts that are true of t,he database schema. For example, if we want 
to specify that bigcell is a cell , we will enter the following in the knowledge base. is-a( bigcell, 
cell). bigcett(X) : -cell(X), interface&#38;, I), performance(l, P), area(P, A),tength(A, L), width(A,W), 
times(l,W, Y), gt(Y, 1.0). The rule states that greater than 1.0. Notice coded as a predicate f(z, A 
transformation rule predicate: pattern a bigcell is a cell whose area is that y = f(z) in the dat,abase 
is y) in the knowledge base. has the following syntax. - actions where predicate, pattern, and actions 
may all involve variables. The sCope of the variables is one rule. The meaning of the rule is this: if 
the predicate can be proven using the knowledge base, then the pattern can be replaced by t.h(> rcsu1t.s 
of the actions specified. The actions a.re sp(>rifi(>(l wit.11 respect to the source code of the procedure 
that represents the query. The source code is consitlcrcd as a sequence of statements and the stntemmt 
in which the pattern occurs is called the current stahnent. The user query is transformed as follows. 
Startmg from the first statement, each statement in the query is inspected in turn. For each function 
referenced in the statement (may be as part of an access path) the action may be a sequence of generate 
and replace commands. A generate command produces a set of new statement before the cur- rent statement 
and replace command replaces the pattern with another. For example, the transformation rule for attribute 
in-heritance of a subtype from its parent type may be stated as follows. is-a(X, Y) : f@X(D) -+ generate(parent-id(D, 
&#38;s)); replace(f@Y(&#38;s)). Here, Bs is a variable generated in the process of trans- formation, 
whose scope is the entire query (procedure). The action states that if function f emanating from object 
set X is referenced in the procedure, but is not defined as emanating from X, then first generate a statement 
par-ent-id whose first argument is the argument used in the function reference, and whose second argument 
is a newly generated program variable. Parentid procedure will ob- tain the identifier(s) of the object(s) 
in parent subtype (which in most cases is the same as the id in the child type). Then the pattern fQX(D) 
in the current state-ment is replace with the string f@Y(&#38; s) . In our example, suppose we have a 
statement ,R = nameQbigcell( bl ). This statement will be replaced by the following two statements. parent-id( 
bl , &#38;3); R = name@cell(&#38;3); where &#38;3 is a program variable. The transformation rules are 
also used to specify the derived functions. In general, the generate command in the action part of a 
transformation rule may generate a part of the source program. Once the transformation is applied to 
the entire query, the query no longer contains functions that are not defined in the database schema. 
We will refer to this query as a transformed query. A transformed query can be evaluated against the 
database. However a straight- forward evaluation of each function as it is encountered in the query is 
not efficient. To optimize the query, the MF/O extracts the references to the functions at various part 
of the query and puts them into a single construct which is then used for op6imization. In the fotlowiug 
section we explain t.his process. 4. The Mapping Facility/Optimizer The MF/O translates a transformed 
query into an efficient program that can be executed on the host. It does this in three steps. First, 
it inspects the access paths in the trans- formed query and sets up an query graph that shows the relationships 
between access paths in the query. Second, it transforms the query graph into a more efficient form. 
And third, it constructs a host-executable program from the query graph. When a query is parsed, a structure 
called the query graph is created for the purpose of optimizing the query evaluation and to generate 
code to evaluate the query. The query graph is constructed from multiple instances of seven types of 
nodes and three types of arcs. The node types are: print node, tuple node, predicate node, Boolean operation 
node, aet operation node, constant node and intermediate node. The predicate and operation node types 
have three distinguished ports called argl, arg2, and result. Arcs em- anate or terminate at these ports. 
An query graph instance contains multiple instances of these node and arc types. In the following discussion, 
the word node means node in- stance and the.word arc means arc instance. T?lere are several constraints 
that a query graph must satisfy. We will not present them in this paper. We will give unique identifiers 
to each node. Some of the nodes have non- unique labels. In particular, a constant node has as its label, 
a constant which may be a single value or a set of values. A predicate node has one of the predicate 
symbols of the DML as its label and an operation node has one of the operations of the DML as its label. 
The three arc types are the function arcs, the predicate arcs, and the operation arcs. Each arc (i.e., 
arc instance) is uniquely identified in the usual way by the identifiers of its end nodes. A function 
arc has, as its label, one of the functions defined in the schema or one of the aggregate functions. 
For the purpose of exposition, we depict a query graph using the following symbols. A node is depicted 
by a cir- cle. The type of the node is indicat,ed either by a bold faced letter inside the node, (P for 
print node, T for tu-pie node, and I for intermediate node) or, if an operation node, by one of the symbols 
U, n or -, or if a predicate node, by one of the arit,hmct,ic predicate symbols or set predicate symbols, 
or if Boolean operatibn node, by one of the boolean operators, or if a constant node, the constnot itself. 
A fun;.tiom arc is depicted #as a solid line, a predicate arc as a dashed lme, and an operation arc as 
double lines. Constructing a query graph for a given query is straightforward. An assignment statement 
involving an ac- cess path is represented as a directed path from the source to the destination passing 
through intermediate nodes. The source may be a constant node. The operations on the sets of objects 
is represented as a binary tree of oper- ation nodes in the usual syntax. Likewise a Boolean ex- pression 
is represented,as a binary tree involving Boolean operation nodes and predicate nodes. The IF statement 
is represented by a predicate arc connecting a node to the root of the tree corresponding to the Boolean 
expression. The FOR EACII slatement is represented by a tuple node. The query graph for the example query 
given in figure 2 is shown in figure 3.. Figure 3. Query Graph for Query in Example 2. A!!hough the detailed 
description of the procedure to . i; Jnerate an optimal access plan from this query graph is beyond the 
scope of this paper, we will nevertheless de-lineate the steps involved in it. To do this we must first 
explain the way procedures are used to evaluate functions. For each function, defined in the database 
schema the user must implement one or more procedures in a host program- ming language, which return 
the set of range objects of the functions for a given set of domain objects. This means that if the range 
is an abstract object set, say R, the values returned by the procedure represent abstract objects be-longing 
to R and these values denote the same objects in all the functions that involve the object set R. For 
example, in the schema shown in figure 1, if $nclme( Register ,X) is a procedure call to realize X = 
$name( Register ), then the procedure call uersion(X, Y) should retrieve the version nun~bers of the 
cells (assuming that $name is a multivai- ued runction) whose names are Register . A major task for the 
user is the determination of the scheme to identify abstract objects globally. This requirement implies 
that sometimes it may be necessary to read many host-resident files, l;s evaluate a function. Thz invocation 
of the appropriate procedure with the appropriate actual arguments is the responsibility of the LOMS. 
The procedures and the functions they implement, in general, have many-to-many relationship. That is, 
a function may have several alternate procedures that im-plement it, and a procedure may be used to retrieve 
the ranges of several functions having the same domain. Al-lowing several alternate procedures to implement 
a func- tion permits the user to model alternate ways of retrieving the range values which increases 
the scope of optimization. Likewise, allowing a procedure to implement many func-tions reduces the total 
number of procedures and improves the performance by allowing the possibility of accessing all the ranges 
values stored in one I/O unit (e.g., a record). After the user has determined the host-resident proce-dures 
to evaluate the functions, he/she must provide in-formation about them that LOMS can use to optimize 
the access. This information is provided in the map-ping schema using the facilities provided by MF/O. 
The mapping schema has four parts: function-to-procedure maps (FP maps), procedure-to-function maps (PF 
maps), procedure-to-stored file maps (PS maps), and file statistics (FS). An FP map is of the form f 
+ PI, a> Pn where j is a function name and p1 to p,, are the names of procedures that can be used to 
evaluate the func- tion. There is an FP map for each function defined in the database schema. A PF map 
is of the form P + fl, . , f where p is a procedure name and jl, . . . . jn are the func- tion names. 
The map states that the procedure p returns the range object set of functions ji,..., jn simultaneously 
(i.e., in one call). The structure used to return these range values (some of which may be sets) is identical 
to the structure used for Lists in the List-based storage structure [Ahad85]. A PS map is of the form 
where p is a procedure name and 0 is one of the file operations: scan (S), direct access using physical 
address (D), a hash-based search (H), B-tree search (T), and Bi-nary search (B). The map states that 
procedure p does these operations on the files ft...fn in the sequence speci-fied. An FS map is of the 
form . f + C(v), 4vz), S(v3), O(fi) where f is the name of the host-resident stored file. C(Q) states 
that the cardinality of the file is ~1, L(Q) states that the average length of a record in the file is 
~2, S(o3) states that the storage space occupied by the file is ~3, and O(fi) states that the file is 
ordered on the range values of the function f;. Because of the many-to-many relationship between functions 
and the procedures that materialize them, there are many possible ways to evaluate an query graph. The 
cost associated with each of them may be different. Our cost measure is the number of host disk blocks 
(pages) read. To illustrate this point, we will assume that the host-resident database for the schema 
shown in figure 1 consists of one non-flat file for each abstract object type. A record contains a field 
(may be repeating group) for each func-tion emanating from the type. The field stores the range value(s) 
of the function. Thus the file CELL, for example, will have eight single-valued fileds corresponding 
to the functions name, version, designer, type, time, interface, composition, and within, and one multi-valued 
field for representation. The ME/O searches for a low cost plan to evaluate an query graph by using heuristics. 
We will describe in general terms how this works. A straightforward way to generate procedure calls from 
the query graph is to start with the nodes whose in-degrees are zero and evaluate the functions emanating 
from them. When all the functions incidence on a node have been evaluated, the nodes oper-ation can be 
performed. For example, for the query graph shown in figure 3, there are two nodes with in-degree zero, 
The one that has shift register and the one that has 5.0 . Therefore the functions $name and $delay can 
be evaluated first. Then the functions $performance and $interface can be evaluated in that order. At 
this time both the edges incidence on the node corresponding to the intersection operation have been 
evaluated so the opera-tion is carried out. Using the result the tuple node is eval- uated (identity 
function). The two edges emanating from it are evaluated. If there is no index for the file CELL on the 
field name, the function $name has to be materialized by scanning the file CELL and the above procedure 
will be inefficient. We will now describe the optimization step performed by the MF/O. In this step, 
the MF/O uses a set of heuristic rules in conjunction with the maps defined in the mapping schema to 
transform the query graph into an equivalent form whose cost of evaluation is lower. These rules are 
similar to the transformation rules described in [Frey86]. An example of such a rule is given below. 
IF an edge labeled f from node X to node Y is in E AND the optimum way of materializing f is scan(Y) 
AND the inverse of f is g THEN replace the edge f with the edge g in the opposite direction. Notice that 
in the above example if the file CELL is organized as a hash file with name as the hash key held, the 
rule could not be applied because the optimum way (i.e., the least cost way) of evaluating the function 
is not scan(Y) when the cardinality of X is one. Deciding the optimal way of materializing a function 
requires estimating the cost of each alternative way. The data for this estimate is available in the 
mapping schema. We will not discuss the formulae used. Other rules in the rule set encode common knowledge 
about query optimization. For example, there is a rule that states that for a w node, if there is an 
outgoing arc whose direction cannot be changed, and the other arc is incoming, then the incoming arc 
should be changed to an outgoing arc. This rule encodes the common knowledge that if one predicate of 
disjunctive clause requires a scan, then the clause should be evaluated by scanning the file. After the 
query graph has been transformed into a least cost access graph (with respect to the heuristics used), 
the MF/O enters its third step where it generates a program for the host and another for the workstation. 
The host pro-gram is generated from the query graph. The workstation program is a modification of the 
user s query to reflect the changes made by the MF/O. When executed, the work-station program requests 
the data from the host program whenever it needs them. The main procedure-of the host program is a driver 
that calls other procedures (defined by the user to materialize the functions) as required. The main 
procedure and the procedures it references are all put together into a program and compiled and linked 
on the host. 5. Overview of the Local OMS (LOMS) In this section we give a general description of how 
the LOMS operates. For this purpose, let E be the existing database on host H. Let W be the workstation 
on which the object-oriented view of E, denoted O(E): is to be sup- ported. First the user must define 
a schema for O(E) using the DM of the EON. This consists of defining the object sets and the functions 
that exist in E. The difficult pm?a-lem here is deciding how to identify abst,ract objects V e have decided 
to use a single global identifier for identifymg an abstract object. The identifier could be a physical 
ad-dress on the secondary memory of the host, or the ranges of some of the descriptor-valued functions 
associated with the object, or a composition of functions. We are currently studying the performance 
implications of various ways of identifying objects. It can be shown that for any exist-ing database, 
a single non-trivial global identifier can be constructed for any abstract object. After defining the 
schema for O(E), the user must spec- ify the,transformation rules for relationships that are not represented 
in the schema. The system will have a set of default transformation rules that capture commonly-used 
relationships like generalization. The user can use these de- fault transformations or modify them to 
suit his/her need. This facility allows the extensibility in the modeling con-cepts. Having defined the 
schema for O(E), the user now has to develop procedures in some programming language known to the host 
to retrieve the range values of the func- tions given the domain values. It is necessary for the user 
to define at least one procedure for a function or its in-verse. However, if the function can be realized 
in many ways, it is advisable to define a procedure for each of these realization. This will increase 
the scope of optimization. All these procedures must be written to retrieve the range objects associated 
with a given set of domain objects, store them in the List-based structure, and send the structure to 
the workstation. If there is enough space on the host s secondary mem-ory, these procedures are compiled 
and stored as library routines on the host. This will save time in the compi-lation of the program created 
by MF/O. If there is not enough space, either the compiled form or the source form can be stored in the 
workstation and shipped to the host for compilation or linking whenever needed. In this case, enough 
space must be provided on secondary memory of the host to store the largest of the programs. Aft.er the 
procedures have been developed, the map-ping schema must be defined using ( I: e facility provided by 
MF/O. The software that, implements ii;o LOMS resides on the workstation. Both t,he workstation and the 
host must I,. have hardware and software to communicate to each. The communication protocol must include 
.~t least the facilities to login, transfer files, and issue operating system level commands. Improvement 
in performance can be obtained if an applications level protocol is assailable. 6. Conclusions We have 
presented a framework to support an object-oriented view of of an existing da,tabz~~e. The framework 
is designed to be eflicient for existing cnc;ineering and scien- tific databases. Of course it can also 
bt: used for providing an object-oriented view for any record-based data models. The discussion in this 
paper has been limited to supporting procedural queries. It can easily be extended to support a graphical 
interactive query interface wit,h XI appropriate interpreter. The two primary goals in designing the 
framework are functionality and efficiency. The DM. the TM, and the query language all contribute toward 
functionality allowing the user to define and access many forms of relationships. The TM provides the 
extensibility in conceptual modeling concepts. The MF/6 provides a b&#38;is for efficiency. The MF/O 
is rule-based and can be easily be tuned to suit any situation. We believe that the framework presented 
is a step in the right direction. We have started a prototype imple-ment,ation on a SUNTM workstation 
to access a database on a VAX11/750TM both running UNIXTM operating sys-tem. The objective of this prototype 
implement,ation is to identify possible performance bottleneck in the design. We are concerned about 
two issues: whether the time taken for compilation of queries will be acceptable for ad hoc queries, 
.and whetherthe object identification scheme that we have adopted will cause excessive amount of work 
in retrieving data. In the existing design we have decided to use a sin-gle identifier for an object. 
Although this is sufficient to access all objects related to a given object, it may not nec-essarily 
be efficient for all cases. In some cases it may be beneficial to have several identifiers for an object. 
These synonym identifiers can be kept track in a relation. These are some of the issues that we will 
address in the prototype implementation. 7. References <RefA>[Afsa85) Afsarmanesh, H, et. al., u An Extensible 
Object-Oriented Approach to Databases For VLSI/CAD , Proc VLDB, Stockholm, August 1985. [Ahad85] Ahad, 
R. A List-Based Storage Structure for Personal Databases , Proc. of the ACM SYw. on Small Systems, Danvers, 
Mass., May 1985. [Ahad86] Ahad, R. and McLeod, D., Performance Op-timization Techniques for an Object-Oriented 
Semantic Data Model , CRI Technical Report, USC, 1986. (Banc86] Bancilhon, F., Khoshafian S., A Calculus 
for Complex Objects , Proc. ACM Symp. on PODS, Boston. March 1986. [Bune79] Buneman, P., FQL: Functional 
Query Lan- guage , Proc. ACM SIGMOD 79. [Codd70] Codd, E.F., A Relational Model of Data for Large Shared 
Data Banks , CACM, 13(6), . June 1970. [Bat0851 Batory, B.S. and Kim, W. Modeling Con-cepts for VLSI 
CAD Objects , Proc. of the ACM-SIGMOD, Austin, May 1985. (Cloc84] Clocksin, W. F. and C. S. Mellish, 
Program-ming in Prolog, Springer Verlag, 1984. [Daya84] Dayal, U. and Hwang, H, View Definition and Generalization 
for Database Integration in a Multidatabase System , IEEE Trans. on Soft- ware Engineering, SE 10, 1984. 
[Frey861 Freytag, J.C., and Goodman, N, Rule-Based Transformation of Relational Queries into It-erative 
Programs , Proc. A CM-SIGMOD, Washington, D.C., May, 1986. [Jaco87] Jacobs, B., Applied Database Logic, 
Vol 2, forthcoming. [Gutt82] Guttman, A. and Stonebraker, M., Using a Relational .Database Management 
System for Computer Aided Design Data in Randy Katz ed. Database Engineering 5(2), June 1982 [Hask82] 
Haskin, R. and Lorie, R., Using a Rela-tional Database System for Circuit Design , in Randy Katz ed. 
Database Engineering 5(2), June 1982 [Katz851 Katz, R.H., Information Management for En- gineering Design 
Springer Surveys in Com-puter Science, 1985. [Katz861 Katz, R.H., et. al., Version Modeling Con-cepts 
for Computer Aided Design Databases , Proc. ACM SIGMOD 86, Washington D.C., May 1986. (Mcle83] McLeod, 
D., et. al., An Approach to Infor- mation Management for CAD/VLSI Applica-tions Proc. of the 1983 Database 
Week: En- gineering Design Applications, 1983. [h4otr81] Motro, A.,and Buneman, P., Constructing Su-perviews 
, Proc. SIGMOD 1981. [Motro87] Motro, A., Superviews: Virtual Integration of Multiple Databases , IEEE 
Trans. on Sojt- ware Engineering, SE13(7), July, 1987. [Lori83] Lorie, R. and Plouffe, W., Complex Objects 
and Their Use in Design Transactions , Proc. of the 1988 Database Week: Engineering De-sign Applications, 
1983. [Prei82] Preiss, K., Shape Representation and Solid Modeling in CAD Systems , CAD Systems Framework, 
Bo and Lillehagen eds., North Holland, 1982. [Smit77] Smith, J.M. and Smith, D.C.P., Database Abstractions: 
Aggregation and Generaliza-tion , ACM TODS 2(2), 1977. (Smit84j Smith, J.M., Expert Database Systems: 
A Database Perspective , Proc. First Int. Workshop on Expert Database System,?, 1984. [Ston83] Stonebraker, 
M., et. al., Application of Ab- stract Data Types and Abstract Indices to CAD Databases , Proc, of the 
1988 Database Week: Engineering Deaign Applications, (983. [Su86] Su, S. Y., et. al., The Architecture 
and Pro- totype Implementation of an Integrated hlan-ufacturing Database Administration System , Spring 
COMPCON 1986.</RefA>
			
