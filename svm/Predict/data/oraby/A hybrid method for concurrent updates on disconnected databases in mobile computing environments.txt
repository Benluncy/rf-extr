
 A Hybrid Method for Concurrent Updates on Disconnected Databases in Mobile Computing Environments * 
 Yin-Huei LOH Takahiro HARA Masahiko TSUKAMOTO Shojiro NISHIO Dept. of Information Systems Engineering, 
Graduate School of Engineering, Osaka University 2-1 Yamadaoka, Suita, Osaka 565-0871, Japan {yhloh,hara,tuka,nishio 
} @ise.eng.osaka-u.ac.jp ABSTRACT In mobile computing environments, necessary data is replicated on 
mobile hosts during disconnections to improve availability. In or- der to minimize problems of inconsistency 
among data copies while maximizing the data update ability on disconnected sites, we propose an approach 
which controls database updates based on the proba- bility that transactions occur and the duration of 
disconnection time between the sites. We derive a formula to choose the appropriate method between token 
and optimistic methods, and show that the proposed method works well even when the disconnection time 
de- viates from the expected value. Keywords Concurrency control, mobile computing environments, disconnected 
operations, database replication. 1. INTRODUCTION In mobile computing environments, small portable computers 
with wireless connection capability known as mobile hosts (MHs) are car- ried by users who can move freely 
everywhere. Although this gives the users great convenience in terms of mobility, the wireless net- work 
is costly, has limited bandwidth and provides connection with lower quality and more interference. Consequently, 
disconnection, whether intentional or unintentional, occurs occasionally. During disconnections, necessary 
data is replicated on the MHs to allow ac- cess but updates to the data copies are disallowed to prevent 
problems of data inconsistency. This limits the update ability of MHs. Hence, there emerges a need to 
be able to effectively and concurrently run updates to these data, even during disconnections. For example, 
the schedule plan of a manager may need to be updated concurrently by his secretary in the office and 
himself being overseas. [2], [3] and [4] attempted to solve this problem on file systems, while [1] and 
[6] on database systems. However, rollback of the transac- tions frequently happens as conflicts may 
occur among them, result- ing in heavy workload. In [5], a strategy is proposed to partition the data 
value to different sites for data items which are partifionable and in which transactions executed on 
them are commutative, but it *This research was supported in patx by the Research for the Future Pro- 
gram of Japan Society for the Promotion of Science under the Project "Ad- vanced Multimedia Content Processing 
(Project No. JSPS-RFTF97P00501)" and by Grant-in-Aid for Scientific Research on Priority Areas "Advanced 
Databases" of the Ministry of Education, Science, Sports and Culture of Japan (Grant No. 08244103). Permission 
to make digital or hard copies of all or part of this work for personal or classroom use is granted without 
fee provided that copies are not made or distributed for profit or commercial advantage and that copies 
bear this notice and the fidl citation on the first page. To copy otherwise, to republish, to post on 
servers or to redistribute to lists, requ/res prior specific permission and or fee. SAC'O0 March 19-21 
Como, Italy (c) 2000 ACM 1-58113-239-5/00/003>...>$5.00 is only applicable to this limited kind of data. 
In this paper, we pro- pose an algorithm which adaptively chooses the appropriate method, whether token 
or optimistic, to effectively handle concurrent data- base updates during disconnections in mobile computing 
environ- ments. 2. SYSTEM ARCHITECTURE We assume an environment which consists of mobile hosts and fixed 
hosts without making a distinction between them. Each host carries a copy of the database and connection 
may exist between any two hosts. For example, ad hoe networks which consist of only MHs. We assume that 
all disconnections between the hosts are intentional and the length of the disconnection time is fixed 
and known. Later, we also show that the algorithm can be applied on unintentional dis- connections. Assume 
that the database is partitioned into clusters, where data items which are often accessed together in 
the same transaction are clustered together. The probability of the occurrence of transactions for each 
cluster at each host is known beforehand by referring to his- torical data or planned schedule. Our algorithm 
focuses on only one data cluster to enable independent transactions to be handled sepa- rately so that 
the number of transactions which can be executed at the same time is higher. The whole database can be 
handled by applying the algorithm on all the data clusters. All the descriptions below are meant for 
only one data cluster. In the network, disconnection is assumed to happen sequentially but not simultaneously. 
Thus, upon disconnection, the network is sep- arated into two different networks, which may be further 
separated into two different networks again and again, recursively. The two different separated networks 
are considered as two sites, each con- sists of one or more hosts. For the purpose of simplicity, we 
consider the case in which there are no two disconnections coexist at the same time. Thus, there are 
at most two sites in the whole network. Assume that in 1 very small unit of time, at most 1 transaction 
can occur at 1 site. Thus, the number of transactions, n, which can hap- pen in 1 unit of time is such 
that 0 < n < 1 where n = probability of the occurrence ofl transactionper I wzit of time. Let P(A)~ denote 
the probability that i transactions occur at site A in t units of time. In general,  P(A)~= 'Ci(P(A/~)i(P(A)~) 
c'-i). (I) Before the disconnection, our algorithm chooses the best method be- tween token and optimistic 
method, which are defined as follows: Token Method: A "token" represents the right to execute trans- 
actions. Upon disconnection, the token is given to the site with higher probability of the occurrence 
of transactions, and only this site is granted the permission to run transactions (followed by a commit 
action). 563  Optimistic Method: Both sites can run transactions on the data cluster, but it is not 
guaranteed that these transactions can be committed. During the disconnection, if transactions occur 
at only one of the sites, these transactions will succeed when the sites reconnect. However, if conflicts 
occur, i.e. transactions occur at both sites, rollback is forced to be performed at the site where the 
number of transactions occurred is smaller. Here, the term "conflict of transaction" does not just mean 
conflicts caused by multiple "write" transactions, but also conflicting "read" and "write" transactions, 
as defined by the serializability of the trans- actions. 3. ALGORITHM DESCRIPTION In order to quantify 
the two methods, we consider the features of each method. The number of transactions which succeed (i.e., 
committed on the spot or later upon reconnection) is always greater for opti- mistic method because it 
chooses the successful transactions after they happen whereas token method has to decide before the transac- 
tions occur. However, in optimistic method, transactions executed have to wait for a certain amount of 
time before they can be com- mitted. Thus, we introduce a function f(z) to define the satisfaction level 
for each successful transaction which decreases with the in- crease of z, the duration between the time 
the transaction happens and the time it commits. Using parameter K (< 1) as a constant, we define f(z) 
as: { 1 --Kz z < ~, (2) f(z) = 0 otherwise. We define the evaluation function as the summation of satisfaction 
level for all successful transactions, represented with the symbol F(T) for token method and F(O) for 
optimistic method. In token method, since transactions always commit soon after they are executed, the 
waiting time is always 0 and the satisfaction level is always 1. Thus, F(T) equals the number of transactions 
that sue- ceed in the corresponding disconnection time, i.e. the summation of multiplication of (i) number 
of transactions, and (ii) the probability that this number of transactions happen, at the site which 
holds the token. Thus, when there are two sites, A and/3: {.iP(A)~ = tP(A)I P(A)I > P(B)I F(T) = ~Tt 
(3) iP(B),'.= tP(B/l otherwise. i=l  For optimistic method, the satisfaction level is always less than 
1, since a successful transaction only commits when the sites recon- nect. Since transactions that happen 
at different times have differ- ent satisfaction levels, we need to consider each of them separately. 
From equation (1), we know that there are ~Ui possible patterns that i number of transactions happen 
in the duration of disconnection time t. Thus, the probability that each way happens is P(A)~/~Ci. The 
formula of P(A)~ can be expanded into summation of tC~ terms, in which each term equals (P(A)I)~(P(A)ol)(t-i), 
and thus contains i number of P(A)I and (t --i) number of P(A)~. Hence, when we consider the total of 
all ~Ol terms, there are i × tCi number ofP(A)~. These i × tU~ number of P(A) I are also evenly distributed 
over the time 1,2, ..., t. So, for each time 1,2, ..., t, the total number ofP(A) I is (i × ~OO/t. As 
an example, consider the case of P(A)~ (t = 4 and i = 2) in Figure 1. To arrange 2 transactions in 4 
units of time, there are 4C2 (= 6) ways. The probability that each of these 6 ways happens 2 3 4 Total 
P(A): I 1 o o 2 2 0 I 0 2 3 0 0 1 2 4 I I 0 2 S I 0 I 2 6 0 I I 2 / Total P(A)~ 3 3 3 [ Figure 1: An 
example: expanding P(A)~. is P(A)~/6. For each of these 6 ways, there exist 2P(A)I, which add up to 
the total of (2 x 6)P(A)[, i.e. 12P(A)I. These 12P(A)[ are evenly distributed over the time 1,2, 3, 4. 
So, for each time 1,2, 3, 4, there are (12/4)P(A)I, i.e. 3P(A)I. Considering the actual number of transactions 
which happen at each time 1, 2, ..., t, it is equal to the number of transactions multiplies the probability 
that this number of transactions happen (as in token method), as follows: i x tCi x = P(A)~ t ~ Now 
we consider z, the waiting time of the transactions that hap- pen at each time 1,2, ..., t. Consider 
the case where disconnection happens at time 1 and reconnection happens at time t + 1 with the disconnection 
time t. When a transaction happens at: timel, z=t, time 2, z=t--1, timer, z=l. Hence, by referring to 
equation (2), we can sum up the satisfaction level f(z) for transactions which happen at time 1, 2, ...t. 
Conse-quently, the total satisfaction function, S(A),'., which is equal to the summation of satisfaction 
level for the transactions that happen can be defined as follows: j=l ~ (4) = 2/. . P(A)~(_ ~__ ~ (i 
-K) othe,'wi~e. \ 2Kt / For FIT), the evaluation function corresponding to each i (= l, 2, ..., t) at 
site A is iP(A)~. For F(O), the satisfaction level is integrated and the evaluation function for each 
i at site A is S(A)~. Thus, we conclude the following equation where the first and second terms refer 
to the case where transactions occur at only one single site; while the third and forth terms refer to 
the case where transac- tions occur at both sites, in which the transactions happen at the site with 
the higher number of transactions will succeed. t t  F(o) = P(B) S(A): + P(a) S(B): ~=, ~=t (5) t i 
t t i=1 j=l i=l jfi When F(T) > F(O), token method is used, and vice versa. 564 I ~ Token --Opt I 
7 6 ~2 1 0 2 4 6 8 10 12 14 16 18 20 Disconnectio4a Time Figure 2: Evaluation function versus disconnection 
time with the following parameters: P(A)I = 0.3, P(B)I = 0.2, K = 0.02. I "~ Token ~ Opt I 7 6 2 1 2 
4 6 8 10 12 14 16 18 20 Disconnectlo~ Time Figure 3: Evaluation function versus disconnection time with 
the following parameters: P(A)I = 0.3, P(B)I = 0.2, K = 0.04. 4. EVALUATION The graphs in Figure 2 and 
Figure 3 show how the values of the evaluation functions for each method are affected by the change of 
disconnection time. From the graphs we can see that with different values of .K, the algorithm gives 
a different result of the choice of method as the value of the evaluation function of optimistic method 
is affected by the change of value K. As a guidance to choose the value of K, for applications which 
cannot tolerate waiting time and needs to be committed urgently (e.g. those involving money like systems 
for business trading, budget management and bank account manage- ment), it is appropriate to set the 
value of K bigger. On the other hand, a small value of K fits applications like schedule management systems 
as they are not time-critical and transactions in these systems are relatively simple and thus rollback 
can easily be performed. Comparing our approach with the approach which uses only one method, either 
token or optimistic, certainly our approach is better as it balances off the merits and demerits of both 
methods and gives the users a choice to decide the appropriate method to be used. We now investigate 
the effectiveness of our algorithm when the dis- connection time deviates from the expected value. To 
achieve this purpose, we used a few probability distributions (Poisson, normal, uniform and exponential) 
to confirm the validity of the results. In these distributions, we calculate the ideal values (i.e., 
when the exact disconnection time is known beforehand) and the actual values (i.e., when we take the 
average disconnection time as the parameter) of the proposed algorithm. Figure 4 shows the result for 
Poisson distribu- tion. From the graph, it can be observed that the difference between the actual values 
and the ideal values is very small. The difference increases as the disconnection time approaches the 
point where the values of evaluation functions for token and optimistic methods in- tersect. From calculation, 
we found that the percentage of difference i--Ideal ~-Actual I 7 e ! 0 i i 2 4 6 8 10 12 14 16 18 20 
 Average Disconnection "l-ene Figure 4: Evaluation function versus average disconnection time for Poisson 
distribution. for each disconnection time ((ideal -actual)/ideal) is less than 5% for Poisson, normal 
and uniform distribution, and less than 10% for exponential distribution. Hence, it is verified that 
even if the pro- posed algorithm's performance deteriorates due to the deviation of the disconnection 
time, as long as the deviation is not extreme and follows a common probability distribution, it still 
outperforms the approach which only uses a single method, either token or optimistic method. 5. CONCLUSION 
In this paper, we have proposed an algorithm to choose the most effective method between two approaches, 
token method and opti- mistic method to handle database updates during periods of discon- nection depending 
on the probability that transactions occur and the disconnection time. We also showed that the algorithm 
works well with little error when the disconnection time deviates from the aver- age value. In mobile 
computing environments, using the available statistical information like the movement speed and direction, 
and the current location of the mobile host, we can estimate the expected reconnection time. As long 
as the actual reconnection time does not vary too drastically from the average value, the algorithm can 
be ap- plied. Thus, we conclude that the proposed algorithm can work for both intentional and unintentional 
disconnections.  REFERENCES <RefA>[1] Breitbar, Y. and Korth, H. F.: Replication and Consistency: Being Lazy 
Helps Sometimes, Proc. of 16th ACM SIGACT- SIGMOD-SIGART Symposium on PODS, pp. 173-184 (1997). [2] Demers, 
A., Petersen, K., Spreitzer, M., Terry, D., Theimer, M. and Welch, B.: The Bayou Architecture: Support 
for Data Sharing among Mobile Users, Proc. of the Workshop on Mobile Computhlg Systems and Applications 
(1994). [3] Heidemann, J. S., Page, T. W., Guy, R. G. and Popek, G. J.: Pri- marily Disconnected Operation: 
Experiences with Ficus, Proc. of the Second Workshop on Management of Replicated Data, IEEE (I 992). 
[4] Kistler, J. J. and Satyanarayanan, M.: Disconnected Operation in the Coda File System, ACM Transactions 
on Computer Sys- tems, Vol. 10, No. 1 (1992). [5] Krishnakumar, N. and Jain, R.: Escrow Techniques for 
Mobile Sales and Inventory Applications, Wireless Networks 3, Vol. 3, No. 3, pp. 235-246 (1997). [6] 
Pitoura, E. and Bhargava, B.: Maintaining Consistency of Data in Mobile Distributed Environments, Proc. 
of 15th Interna- tional Col!ference on Distributed Computer System, pp. 404- 413 (1995).</RefA> 565  
			
