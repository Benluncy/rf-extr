
 A Fast Parallel Algorithm for Determining All Roots of A Polynomial With Real Roots Extended Abstract 
Michael Ben-Or Ephraim Feig Dexter Kozen Prasoon Tiwari~ Hebrew University IBM Research Dept. of Computer 
Science Coordinated Science Lab. Jerusalem Yorktown Heights Cornel1 University University of Illinois 
at Israel NY 10598 Ithaca, NY 14853 Urbana-Champaign Urbana, IL 61801 Abstract. Given a polynomial p(z) 
of degree n with m bit integer coefficients and an integer /z, the problem of determining all its roots 
with error less than 2 -~ is considered. It is shown that this problem is in the class NC if p (z) has 
all real roots. Some very interesting properties of a Sturm sequence of a polynomial with distinct real 
roots are proved and used in the design of a fast parallel algorithm for this problem. Using Newton identities 
and a novel numerical integration scheme for evaluating a con-tour integral to high precision, this algorithm 
deter- mines good approximations to the linear factors of p(z). tThis work began in the summer of 1985 
while the authors were at the IBM Thomas J. Watson Research Center, Yorktown Heights, New York. :~Supported 
by an IBM Graduate Fellowship and by the Office of Naval Research under Contract N00014-85-K-0570. Permission 
to copy without fee all or part of this material is granted provided that the copies are not made or 
distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. &#38;#169; 
1986 ACM 0-89791-193-8/86/0500/0340 $00.75 340 1. Introduction Determining the set of all roots of a 
poly- nomial is a classical problem with applications in many branches of engineering. Although many 
sequential algorithms have been designed for this problem (see, for example, [H74] and [$82]), to date 
no fast parallel algorithm is known. In this paper we show that this problem is in NC if all roots of 
the given polynomial are real. Moreover, the problem of determining if all the roots of a given polynomial 
are real, is also in NC. The best previous result for this root-finding problem appears in [P85] and 
has worst case running time O (n logn ) using n processors where n is the degree of the given polynomial 
and each processor is capable of performing arithmetic operations on operands having polynomially many 
bits in one step. Our results achieve considerable improvement in the parallel running time at the expense 
of polynomially many processors. We use an exclusive read exclusive write PRAM as the model of parallel 
computation [FW78]. In addition, we assume that a processor can perform arithmetic operations +, -, ×, 
and / in time polylog in the length (of the binary representation) of the operands. The Sturm sequences 
of a polynomial were defined by C. Sturm in 1829 and have been stu- died for over 150 years [BP60]. We 
prove some very interesting properties of a Sturm sequence of a poly- nomial with distinct real roots 
and use these proper- ties in the design of our algorithm. In particular, these properties imply that 
we can quickly compute a point on the real line such that at least a fraction of the roots of the polynomial 
lie on either side of this point. We factor the given polynomial into its approximate linear factors 
and hence approximately determine all its roots. The approximate factoriza- tion is achieved by recursively 
factoring the given polynomial into two approximate factors of almost equal degree. These two factors 
are in turn obtained by numerically evaluating a contour integral and then using the Newton identities. 
Finally, in the last section, we also prove that the problem of determining all real roots in presence 
of complex roots is in NC if and only if the problem of determining all roots is in NC. The numerical 
integration scheme is based on a suggestion by Franco Preparata. This work has been inspired by the work 
of Sch6"nhage [$82], and complements recent work of the first and the third authors on algebraic cell 
decomposition of R d [BKR84], [KY85]. 2. The Basic Strategy In this section we give an overview of our 
algorithm for simultaneously determining all roots of a polynomial h (z) which has distinct real roots. 
The major steps of the algorithm are given below. Algorithm ROOTS~ Input: A polynomial h (z) of degree 
n having m bit integer coefficients, distinct real roots, and an error tolerance/z. Output: Approximations 
~1,~2,...,~ to the roots zl,z2,...,z~ of h (z ) such that Iz i-zil < 2 -u. Method: Step 1: Normalize 
by dividing h (z) by its leading coefficient. Let p (z) be the resulting polynomial. The leading coefficient 
of p (z) is one. Step 2: Factor p(z ) recursively in the following manner until all linear/actors are 
found: Step 2a: Find a point w which separates the roots of p (z) into two sets L and R, those to the 
left and to the right of w respectively, each containing between 1/4 and 3/4 of all roots of p (z). 
In addition, w is not too close to any root of p (z). Step 2b: Using a numerically evaluated contour 
integral and the Newton identities, determine approximations to the two factors p l(z ) and p 2(z ) of 
p (z) with roots L and R respectively. [] In case the given polynomial has repeated roots, well-known 
methods (see, for example, [vG83a]) can be used to reduce the problem to that of determining the roots 
of a polynomial with distinct roots. In order to implement the algorithm ROOTS, one must determine the 
precision require- ments at each step. These are determined by the quantities #, m, and n. The following 
theorem will be useful in determining an upper bound on the pre- cision requirement at various steps 
of the algorithm. Theorem 1 [C29, H70]: Let h (z) be a polynomial of degree n with m bit integer coefficients. 
Then all roots of h (z) are less than 2 '~ +1 in absolute value. Since the roots of p (z) are the same 
as the roots of h (z), all roots of p (z) are also bounded in n absolute value by 2 m +1. If h (z) = 
i_~hi z' has dis- tinct roots z 1,z 2 ..... z n , then define the height of assume that # > o + 1. Also 
in view of Corollary h(z), denoted I h l, to be the sum ~ I h i I. Also i =0 define the minimum root 
separation A(h) = minlz i-z) I. ire) Theorem 2 [M64]: If h (z) is a univariate polyno- mial with integer 
coefficients, of degree n >/ 2, and distinct roots, then the minimum root separation A(h ) is at least 
-,/3 n -(" +2)/2 I h I -(~ -1). Corollary 3: Let h (z) be a polynomial with m bit integer coefficients, 
degree n >/ 2, and distinct roots zl, z2 ..... zn, then A=minlz~ --z) I > 2 -°, where o = 2n logn + mn. 
We also need a bound on perturbation induced on the zeros of a polynomial as a result of perturbation 
of its coefficients. The following theorem directly follows from Theorem 2.3.1 (due to Ostrowski) of 
[H70]. Theorem 4: Consider the polynomial p (z) of degree n with real coefficients, leading coefficient 
one, and roots zl,z2 ..... z, such that Iz~ I < 2 m+l. Let i~(z ) be an approximation to p (z) such that 
the corresponding coefficients of ~ (z) and p (z) differ by at most 2 -~r. Then there is an ordering 
of the roots zi of po(z) such that Iz~--~ I < nZ2'~+m+2-~'/n, for all i. Corollary 5: If rr > n (n +m 
+#+21ogn +2), then the roots of p o(z) approximate the roots of p (z) with error less than 2 -~. As a 
consequence of this corollary, all roots of iv (z) are bounded in absolute value by 2 ~ +1 whenever zr 
and # are appropriately chosen. The following corollary is important for establishing the correctness 
of our algorithm. Corollary 6: If p (z) has distinct real roots, At > o+1, ~r > n (n +m + At+21ogn +2), 
A(p) > 2 -°, and all coefficients of i~ (z) are real, then i~ (z) has distinct real roots. In the following 
discussion we will 5, let rr = n (n + m + At + 21ogn + 2) + 1. We wish to determine approximate linear 
factors L 1,L 2 ..... L,, of p (z) such that Ip(z)--L1L2...L n I < 2 -~r" (2.1) Then Corollary 5 would 
imply that the easily avail- able zeros of L~ are sufficiently good approximation to the zeros of p (z). 
However, in order to achieve 2 -rr precision in the Eqn. 2.1, we may need precision of more than rr bits 
beyond the binary point in all intermediate computations. Next we determine the precision required during 
the factorization in Step 2 in order to satisfy the above requirements. Suppose that the precision of 
k bits beyond the binary point is sufficient for all intermediate computations in order to finally com-pute 
the approximate linear factors which satisfy Eqn. 2.1. Truncate the coefficients of p (z) to k bits beyond 
the binary point in order to obtain an approximation p o(z ) to p (z). Factor p o(Z ) recur-sively in 
order to obtain all linear factors L i , always computing the factors to k bit precision beyond the binary 
point. This ensures that at any stage of the recursive factorization of p (z), we have a set of polynomials 
p :(z ),p 2(z ) ..... Pl (z) whose product is a good approximation to p (z). Lemma 7: Given a monic polynomial 
p (z) of degree n, all of whose roots are bounded in absolute value by 2 r~+l. Suppose pl(z), p2(z) ..... 
Pz(Z) are polynomials such that g (z) = p (z) --p :(z )p2(z )  Pz (z) is of degree at most n --1 and 
Ig(z)l < 2 -~. Then each coefficient of Pi(Z), 1 ~< i ~< l, is less than 21+2n +m,, in absolute value 
and Ipi I < (n + 1)22n+nrn+:. Suppose deg(pl)> I and let pj(z) and Pk (z) be the two factors of Pi (z) 
computed during its factorization. Recall that the coefficients of these factors are truncated beyond 
the kth bit after the binary point. Then, Lemma 8: Ipi(z)--py(z)pk(z)l < (n+l) 2 23+2n +nra --;t A corollary 
to the following theorem specifies the precision k sufficient for the recursive factorization routine. 
Theorem 9: Let pl(z),p2(z) ..... Pz(Z) be the known factors of p (z) at an intermediate stage such that 
Ip--PlP2"''P~ "''pll < 2 -K, K>> rr, and deg(p 1) > 1. Suppose pl(z) is approximately fac-tored into 
pj (z) and p~ (z) whose coefficients are determined only to k bits beyond the binary point. Then Ip --PjPkP2P3"''Pt 
I < 2 -K + (n+l)3 24+4n +2ran-h Corollary 10: Let L l(z ), L 2(z ) ..... Ln (z ) be the approximate factors 
of p (z) obtained by the recur- sive factorization using a precision of k bits beyond the binary point. 
Then Ip(z)--LtLz'''L,~ I < n 2 -x + (n +1) 4 24+4'~ +2ran +4--h. Equation 2.1 and Corollary 10 imply 
that k = rr + 5 + 41ogn + 4n + 2ran is sufficient preci-sion in order to obtain the desired approximations 
to the roots of p(z). Substituting for rr, we get k = O (n (n +m +/x)). 3. Computing The Factors Using 
The Newton Identity Consider a polynomial p (z) of degree n having distinct real roots, leading coefficient 
one, and all other coefficients having at most k bits beyond the binary point. Let zx < z2 < "'" <z~ 
be the dis- tinct real zeros of p(z), I z~l < 2 "~+1. Let k pl(z) = ~ ci z~ be the factor of p(z) with 
roots i =0 k Z l,Z 2 ..... Z k . Given sj = ~ z/, for~j = 1 ..... k, we i=1 wish to compute the coefficients 
c~ correct to k bits beyond the binary point. In order to perform this computation, we use the well-known 
Newton identity shown in Fig- ure 1. In Figure 1, let M denote this k x k lower triangular matrix and 
let us denote this equation by M c = -s. We compute M-1 using Csanky's adap- tation of Le Verrier's method 
[C76]: M n-1 + d 1M n -2 + ... + dn_l I M -1 = _ ~3.1) dn k where dl is the coefficient of x n-i in II(x--i). 
i=1 Since we use approximations si to s i in these compu- tations, the result may not be the exact value 
of cj but an approximation ~. In the rest of this section, our aim is to determine a reasonable upper 
bound on the deviation Ic)--33 I. The following sequence of claims leads to the error estimate of Theorem 
13 in the entries of the computed inverse in terms of the approximation error in the entries of the original 
matrix. Let A = (at)) and Arm = (a~,n)) be n X n matrices. If ]a~) [ < o~, then it is not difficult to 
to check that I a~ m ) I ~< od ~ n m . In the following dis- cussion, we will assume 1 ~< ra ~< n. Lemma 
11: Suppose that A = A + ~ where e = (e O ) and le O I ~< 2 -0 . Then matrices Am =(~i~m)) can be computed 
such that I ai~ rn ) _ ai)~ (m ) I ~< 4 21°gn (O~tt)n (logn +1)2--0. Proof: In the first phase we compute 
A 2~ and then, in the second phase, we multiply the appropriate combination of the powers of A computed 
in the first phase to obtain A "~ Each of these phases involves at most [logn ] matrix multiplications. 
The error in entries of A (2q), computed in the first phase, is given by l a~ 2) -- ~i~2) I ~< 4n o~2 
-°, 4 q n 2q -lo~2q -12-P, .... In the second phase A ~ is computed by multiplying at most [logn] matrices 
computed in the first phase. Therefore Ial~ m ) --ui (m ) [ 4 21°gn (OCt/,)n (logn +2)2--p. [] Returning 
to the problem of solving the Newton identity for c~ 's, we can state the following: Corollary 12: Given 
approximations ~i to sl such that Ds i -~i I < 2-', an approximation R = Cr O ) to R =(r O)=M-1 can be 
computed such that I ro --~0 I ~< 2n{n(2n)~} {4 21°gn (~n)n (logn +1)2-r}. Proof: In Eqn 3.1, 1 ~< Idil 
~< (2n) ~ and can be computed exactly. Let B = (b O ) be the numerator of the right hand side of Eqn. 
3.1. Since I s~l < n 2 ~ +ran, let o~ = 2 n +"~. Clearly I b O I ~< n (2n)~ (an)n. Suppose that approximations 
to the powers of M are computed using the algorithm sug- gested in the above Lemma and are then used 
in com- puting an approximation B to B. Then I bi i --t~ 0 [ ~ n {n (2n)n } {421ogn (o~n)n (logn +2)2-,}. 
Next, compute 1/d k to r bits beyond the binary point and then compute the product R = (1/d k )B. Then 
I ri) -- ri) I K. 2n {n (2n)n } 14 21°gn (o~n)n (logn +1)2-,}. [3 Theorem 13: Given approximations 
~ to s~ such that I s~--ill < 2 -r, approximation ci' to the coefficients ci can be correctly computed 
to r- 0 (ran 21ogn ) bits. Proof: Approximate the vector c by the product 1~ if, using the matrix R computed 
in Corollary 12. [] Corollary 14: In order to compute the coel~cients c~ correct to the k bits beyond 
the binary point, it is sufficient to compute s~ correct to r = k+ 0 (ran Zlogn ) bits. Substituting 
for &#38; from Section 2, we get r = O(ranelogn + nit). In the next section, we describe a way to compute 
the s~ 's to su~cient accu-racy by numerically evaluating a contour integral. 4. Evaluating a Contour 
Integral to High Preci-sion rl Let p(z)= ~pizi, Pn =1 be a polyno- i =0 mial of degree n with simple 
real roots z i < z 2 < z 3 < " " " < zn such that Iz i I < 2 rn +1. Then I pi I < 22n +mn Suppose that 
at most k bits are given for any Pi after the binary point. In addition, a point w is given such that 
I w --zi I > 2 -/3= d for all 1 ~ j ~ n andzg < w < z k+l. In order to compute s z with error less than 
2 -r (see last section), we wish to evaluate the following integral to r significant bits beyond the 
binary point: k z 1 z l p '(z ) dz E z, = sz -.~ i =1 2rri P (z ) Here Y can be chosen as the boundary 
of the rectan- gle with vertices A, B, C, and D, traversed in the counterclockwise direction, where A, 
B, C, and D are points in the complex plane with coordinates (w,2 ~+1), (_2 m+l,2m+l), (_2 m+l,_2m+l), 
and (w ,2 m 41) respectively (Figure 2). For convenience, the contour Y is parti- tioned into four segments 
AB, BC, CD, and DA. This gives the following expression for the contour integrah B C D A. .1) We will 
only discuss a scheme for computing the first term on the right hand side of Eqn. 4.1. A simi- lar scheme 
can be used to compute the third integral on the right hand side of Eqn. 4.1, whereas the second and 
the fourth integrals are much simpler to compute. B The integral Af can be further partitioned into two 
symmetric parts about the point W with B W coordinates (w ,0) in the complex plane i.e., Af = Af + B 
l I(Z) dz ~. Let IWB denote the integral ~ z p p(z ) and let fWB denote the computed approximation to 
IwB. We require that the error I IwB --fWB I be bounded by 2 -(r+3) so that the total error in the right 
hand side of Eqn. 4.1 does not exceed 2 -r. In [$82], Sch6" nhage uses a numerical integration scheme 
which is based on properties of the sums of the roots of unity and requires that all poles of the integrand 
be relatively far from the contour of integration (which is a cir- cle). However we can not use SchSnhage's 
scheme because some poles of the integrand under considera- tion may be very close to the contour of 
integration r. The following scheme for evaluating IwB is based on a suggestion by Franco Preparata to 
"increase the spacing of samples on C geometrically as one goes away from the real axis". Define two 
sequences y) and a) for i = --1, 0, 1,..., q, where q = [log3/22m +1 _ log3/2(d/2) ], as follows: Y-1 
= 0, yo = (d/2), Yl = (3/2)(d/2) ..... y) = (3/2)) (d/2) .... Yq-1 = (3/2)q-l(d /2); and a) = w + iy) 
for all --1 -~ j q--1 (here i = -J--l). In addition, let yq = 2 '~+1 and aq = w + iyq. Observe that, 
in the complex plane, the points a) are all on the segment from W to B. Let /(z)-- ztp'(z)----~-. The 
Taylor series of / (z) about a~ is given by: /(z)=f (aj)+/'(a))(z --a))+ ''' + (t f )(a: ) (z -a) Y + 
R~ (z), t! where f --r +1 r ~ yj --r lY: l I z --a) I ~ Yi [C48] and M is the maximum value of f (z) 
in the closed disc of radius y¢ centered at a). Observe that the radius of convergence of the above series 
is greater than y) = (3/2): (d/2), for j >/ 0 and is > d for j =--1. Let Tj (z) be the series consisting 
of the first t +1 terms of the Taylor series of / (z) about a). We would approximate the integral IwB 
as follows: aq q~l a) +1 lwB = f f (z ) dz = f f (~ )dz a-1 j =--1 aj = f T) (z) dz = IWB" j =--1 aj 
Then, I~wB = qf + °~i) rai+l--aj+'), (4.2) j=--I ,~oTTr" j+l where (~i) is the coefficient of z i in 
T) (z). In order ~ to estinaate the error I IwB --IWB 1, we need to find an upper estimate on M in the 
vicinity of the seg-ment WB : I ztp '(z ) M = max max ) z: Iz --a,I ~<y~ g l n max I I z ,zj Z --Z i 
~< n2 2(m +I)I 22ml + 2l + 13+ logn. d Consequently, for z belonging on the segment from a) to a) +1 
  , r I 1"1 <: Suppose the powers of a) are computed exactly (note that this requires only polynomial 
precision) while evaluating the right hand side of Eqn. 4.2, and approximations 60i to o0i such that 
I Oq)--~i)]< 2 -v are used in computing fWB. Then, ~ B t~lmi(m IIWB __lWB I ~< ~Rt(z)dz +2-v +1) i=1 
< 22ml +2l +/l+logn +m +l-t + 2(m +l)(t +2)--v In order to ensure I IwB --fWB I 2 -(r+a), it is sufficient 
to require that 22ml +mr +/]+logn +m +l--t < 2--(r+4) and 2 (m +l)(t +2)--v < 2 -(r+4). Hence t = r + 
0 (ran +/3) and v = O(m(r+mn+/3)). Substituting for r, we get t = 0 (mn 21ogn +n #+/3) and v = O (m 2n 
21ogn +mn #+m/3) The Taylor coefficients required by this integration scheme can be determined quickly 
using an algorithm due to yon zur Gathen [vG83b]. 5. Separating the Roots Induction Hypothesis: Ri+ a 
strictly interleaves R i The integration scheme described in the last section requires a point w such 
that I w -- z~ I > 2 .8 , where z~, i = 1, 2,...,n are the distinct real roots of p(z), and z t < w < 
z t+l. Moreover, for algorithm ROOTS to have only O (logn) depth of recursion, we require that n/4 ~< 
l ~< 3n/4. In the following paragraphs, we describe a fast algorithm to determine one such point w. Given 
the polynomial p (z), let us define the sequence of polynomials [ o(Z ), f l(z ) ..... fn (z) such that 
fo(z)= p(z), fl(z)= p'(z), and f t +z( z ) is defined as the negative of the remainder obtained on dividing 
ft (z) by fi +1( z ): /; = q~ (z)/i +l(z) -/i +2(z). It is well known (see, for example, [H71]) that 
f~'s form a Sturm sequence for the polynomial p (z) over the interval (--oo,oo). Fast parallel algorithms 
for computing f i are implicit in [C66] and [C67]. Since p (z) has distinct real roots, it follows that 
f~ has degree n --i and therefore q; (z) are linear in z. Let r~ be the real root of q~. In this section 
we prove that w; can be chosen close to one of the ri 's. A fast parallel algorithm for determining r~ 
's appears in [vG83a]. Letz;j, 1 ~ j ~<n--i,betherootsoffl. Let R; be the set of roots of the polynomial 
f~ and let Sz, i > 1, be the (multi) set Rz U {r~_2}. If A and B are two subsets of the set of real numbers 
then we say that A (strictly) interleaves B if the (open) closed interval defined by any two points of 
B contains a point A. The following properties of the sets R~ and S~ play an important role in locating 
w: Lemma 15: If f o has distinct real roots, then R~ +1 strictly interleaves Ri, for i = 0, 1,..., n 
--2. Proof: We prove the assertion in the Lemma by induction on i. and R i has n --i distinct elements. 
Basis: For i = 0, the hypothesis reduces to Rolle's Theorem [M66]. In case the polynomial has distinct 
real roots, Rolle's theorem implies that roots of the derivative strictly interleave the roots of the 
polyno- mial. Induction Step: Suppose the hypothesis holds for 0~< i ~< k--1. Thenzk_ lj andzk) are all 
real and distinct. Let z k_l 1 < Zk 1 < Zk--1 2 < Zk 2 < " " " < zk-1 n-k < zk n-k < Zk-1 ~-k +1- From 
the defining equation: f k--1 =qk--lf k --f k+l we conclude that fk+l(Zk))= --f k_l(Zk) ), for 1 ~ j 
~ n--k. But since zk) interleave zk_l), sign {fk--l(Zk) )} = --sign {fk--l(zk) +1)}" Therefore, sign 
{fk +l(Zkj )} = --sign {fk +l(Zkj +1)} and fk +1 must have a zero between zk¢ and zk)+1. This argu- ment, 
along with the degree constraint on fk+l(Z) proves the induction hypothesis for i = k. [] Lemma 16: If 
f 0 has distinct real roots and z, z' are two adjacent roots of f i-l, 1 ~< i < n, then either ri_ 1 
6 [z,z'] or there is a root of f;+l in the open interval (z ,z '). Proof: Consider the equation /~+1 
/i ----qi-1 ----1. (5.1)  /i-1 /i-1 By Lemma 15, f l has exactly one root in the inter- val [z ,z'] 
which is also in the interval (z ,z'). The fi shape of the plot of the rational function 7~-is one of 
those shown in Figure 3. If r I_1 ¢ [z ,z '], then qi-1 does not change sign on the interval [z ,z']. 
By fi+l Equation 5.1, we conclude that the plot of ~-also has one of the shapes shown in the Figure 3. 
Hence f i +1( z ) must have a zero in the interval (z ,z '). [] Corollary 17: If f o has distinct real 
roots, then S~ +1 interleaves R i_1, for i = 1, 2,..., n --1. The main result of this section follows 
as a corollary to the following Theorem. Theorem 18". There exists an k, 0 ~ k ,~ n--2, such that r e 
splits the real line into two semi infinite intervals 1 1 = (--°°,rk) and 1 2 = [rk ,oo) with the property 
that I R o Cl I i I is in the range [n /4,3n /4], for i = 1, 2. This Theorem can be proved using the 
fol- lowing Lemma: Lemma 19: Any subinterval I of the real line which contains l > [(n +1)/2] roots of 
f o contains at least oner k for somek:0~<k ~<n--2. Theorem 18 proves that there exists an k such that 
at least n/4 roots of p (z) are on either side of rk on the real line. For convenience, let us denote 
this distinguished r k by v. There may be a root of f o which is very close to v. Therefore, the choice 
of v as the point w in the description of the numerical integration scheme is not suitable. We get around 
this problem by choosing w very close to v as follows: v if s_~s+ ~s 0 v--2 -(a+2) ifs+~so~O v +2 -(a+2) 
ifs_~so~O v +2 -(a+1) ifso=O where ct is as defined in Corollary 3 and s_, s o, and s + e {--,0,+} are 
the signs of p (v --2 .(° + 2)), p (v) and p (v + 2 .(0 + 2)) respectively. 6. Determining Real Roots 
in Presence of Complex Roots is as Hard as Determining All Roots In this section, we reduce the problem 
of determining all roots of a polynomial to the problem of determining all real roots of two related 
polyno- mials. The size of these polynomials is polynomially bounded by the size of the initial polynomial 
and the reduction is in NC. This establishes that the problem of determining all real roots of a polynomial 
is in NC if and only if the problem of determining all roots (real and complex) of a polynomial is in 
NC. The reduction is based on a well-known [U48] elimination technique. Suppose we wish to determine 
all roots of a polynomial h (z) of degree n with m bit integer coefficients. Replace z by x + iy, x,y 
real, and i =~--1. Also write h(x+iy)= f(x,y)+ ig(x,y) where f(x,y) and g(x,y) are the real and imaginary 
parts of h (x +iy ) respec- tively. Let f (x,y)= ~t~)(x)y ) = ~a~)(y)x ) ) =0 j =0 and g(x,y)= ~4~)(x)y 
j = ~Xj(y)xJ. Define ) =0 ) =0 X to be the 2n × 2n matrix as follows: X(i,j)=q2n+~_j(x), 1 ~< i ~< n; 
X(i,j)=qb~_j(x), n ~< i ~< 2n. Similarly, define a 2n × 2n matrix Y using o~ i (y) and Xi (Y) instead 
of qJi (x) and ~ (x) respectively. Then det(X) and det(Y ) are polynomials of degree at most n 2. The 
real and imaginary parts of any root of h (z) are real roots of det(X) and det(Y) respectively. Thus, 
by finding all real roots of det(X ) and det(Y ), we can determine all the roots of h(z). 7. Acknowledgements 
We would like to thank Franco Preparata for suggesting the "geometric spacing" of samples in order to 
evaluate various contour integrals to high precision and Don Coppersmith for making many useful suggestions 
during the course of this work. We would also like to thank Alok Aggarwal, Ashok Chandra, Ming-Deh Haung, 
Victor Miller, Barry Traeger, and Shmuel Winograd for helpful discus- sions. The IBM Thomas J. Watson 
Research Center, Yorktown Heights provided the creative atmosphere in which this work began. 8. References 
<RefA>[H71] L. E. Heindel. lnteger arithmetic algorithms for [BKR84] M. Ben'-Or, D. Kozen. and J. Reif, The 
complexity of elementary algebra and geometry, 16th ACM Syrup. on Theory of Computing, 457-464, 1984. 
To appear in J. Comtrut. Sys. Sci. [B84] S.J. Berkowitz, On computing the determinant in small parallel 
time using a small number of pro- cessors, lnf. Proc. Letters 18, 147-150, 1984. [BGH82] A. Borodin, 
J. von zur Gathen, and J. Hpocroft, Fast parallel matrix and gcd computations, 23th IEEE Syrup. on Foundations 
of Computer Science, 65-71, 1985. [BP60] W.S. Burnside and A. W. Panton, The theory of equations, vol. 
1 and 2, Dover Publications, 1960. [C29] A. Cauchy, Sur la resolution des equations numeriques et sur 
la theorie d'elimination, Oeuvres (12) 19, 87-161, 1829. [C66] G.E. Collins, Polynomial remainder sequences 
and determinants, American Math. Monthly 73, 708-712, 1966. [C67] G.E. Collins. Subresultants and reduced 
polyno- mial remainder sequences, JACM 14, 128-142, 1967. [C76] L. Csanky, Fast parallel matrix inversion 
algo- rithms, Siam J. Comput. 5,618-623, 1976. [C48] D.R. Curtis, Analytic functions of a complex vari- 
able, Mathematical Association of America, 1948, p. 104. [FW78] S. Fortune and J. Wyllie, Parallelism 
in random access machines, lOth ACM Symp. on Theory of Computing, 114-118, 1978. [H74] [H701 [KY851 
[M64] [M66] [Pa5] [s82] [u48] [vG83a] [vG83b] polynomial real zero determination, JACM 18, 533-548. 
1971. P. Henrici. Applied and Computational Complex Analysis, vol. 1. John Wiley &#38; Sons, 1974. A. 
S. Householder, The numerical treatment of sin- gle nonlinear equation. McGraw-Hill Book Com- pany. 1970. 
D. Kozen and C.-K. Yap. Algebraic cell decompo- sition in NC. 26th IEEE Syrup. on Foundations of ComFuter 
Science, 1985. K. Mahler, An inequality for the discriminant of a polynomial. Mich. Math. J. 11,257-262, 
1964. M. Marden, Geometry of polynomials. Math. Sur- veys no. 3, American Mathematical Society. 1966. 
V. Y. Pan. Fast and efficient algorithms for sequential and parallel evaluation of polynomial zeros and 
of matrix polynomials, 26th IEEE Syrup. on Foundations of Computer Science, 1985. A. Schonhage, The fundamental 
theorem of alge- bra in terms of computational complexity, unpub- lished manuscript, 1982. J. V. Uspensky, 
Theory of Equations, McGraw-Hill Book Company, 1948. J. yon zur Gathen, Parallel algorithms for alge- 
braic problems, 15th ACM Syrup. on Theory of Computing, 17-23, 1983. J. yon zur Gathen, Representations 
of rational functions, 24th 1EEE Syrup. on Foundations of Computer Science, 133-137, 1983. </RefA>1 Ck --1 
s1 sx 2 Ck --2 s2 s 2 s~ 3 Ck --3 s3 S 3 S 2 S 1 4 Sk_ 1 Sk_ 2 Sk_ 3 Sk_ 4 . . k CO Sk Figure 1: The 
Newton identity. ~r °.°° .................... ° ................................. ......... Figure 
2: The contour of integration. / Figure 3: Possible shapes of the plots of fi and fi+l  f,-----/" 772"/-" 
349 
			
