
 A Pattern Compiler Richard D. Jenks Mathematical Sciences Department IBM T. J. Watson Research Center 
Yorktown Heights, New York ABSTRACT. A pattern compiler for the SCRATCHPAD system provides an efficient 
implementation of sets of user-defined pattern-replacement rules for symbolic mathematical computation 
such as tables of integrals or summation identities. Rules are compiled together, with common search 
paths merged and factored out and with the resulting code optimized for efficient recognition over all 
patterns. Matching principally involves structural comparision of expression trees and evalua- tion of 
predicates. Pattern recognizers are "fully compiled" if values of match variables can be determined by 
solving equa- tions at compile time. Recognition times for several pattern matchers are compared. 1. 
INTRODUCTION. One of the most useful features of a system for symbolic mathematical computation is a 
pattern matching facility which allows user-defined pattern-replacement rules to be incorporated automatically, 
and with- out programming, into the general system simplifier for a specific application. Unfortunately 
this general approach of adding user-defined transformations is known to frequently cause serious degradation 
in performance when a large num- ber of patterns is present since all subexpressions must be checked 
for a possible match. The "ruleset" concept of SCRATCHPAD [3] allows a user to capture the set of pattern-replacement 
rules which exist at any instant in time, to give this set a name, and then later selectively invoke 
this set of rules simply by reference to this name. Rules are first created through commands all of which 
may be regarded as pattern-replacement rules [3], e.g. (1) Sxxmxcos(x) .... (m E (2,3,...)) Once all 
constituent rules of the ruleset have been intro- duced, a ruleset named trigint is created by issuing 
the com- mand trigint= w rules The rules are then cleared and the session continues. At some later time, 
the user may issue a command u,trigint (r~esp. u,+trigint) which calls for the evaluation of u with the 
current environ- ment replaced by (resp. augmented by) the ruleset trigint. Rulesets can be augmented 
or diminished by other rulesets; they also can be saved on secondary storage where they may be retrieved 
in a later session. This paper describes a pattern compiler for rulesets, that is, a function which will 
transform a set of patterns into a com- piled LISP function to "recognize" whether an argument expression 
represented in LISP prefix form is matched by a pattern of the set. The resultant compiled code is considera- 
bly efficient as a result of a design based on the following ideas: (a) The order of terms in products 
can often be fixed by a suitable definition of ordering on expressions. For example, given a suitable 
ordering, all instances of (1) will have the 'x m' term appeanng before the 'cos(x)' term. As a result, 
all expressions of the class will then have the following LISP prefix form as internal representation: 
 (2) (~ (x (รท x m)(COS x) x)  When the order of terms of products cannot be fixed, terms can nevertheless 
be arranged into groups, where each group has a fixed ordering with respect to the others and where the 
order of terms within a group can be determined by a run time search resulting in a possible permutation 
of terms. (b) General patterns can usually be split into more spe- cific patterns where matching can 
be performed by structural examination of candidate expressions and by evaluation of predicates, in particular 
without dynamic searching or alge- braic computation. For example, all instances of (1) with m instead 
satisfying m E (0,1,--.) has three subcases: m=0, m= 1, and m E (2,3,-..) each with structurally different 
inter- nal representations. Having determined that an expression has representation (2), one need only 
test that an exponent matching m is a positive integer. (c) Recognizers for individual patterns can 
be uniformly generated then combined into a single decision tree in order to merge and factor out common 
code segments; this result- ing tree can then be optimized for efficient recognition over all patterns 
of the set. For example, the members of the class of expressions (3) .~xxmxsin(x) (m E (2,3,.-.))  
all have an internal representation similar to (2) so that the recognizers for (1) and (3) can be essentially 
combined. (d) Advantage can be taken of formal variables such as the variable of integration which appears 
in every term of the integrand but which cannot appear in any expression matched by other variables (e.g. 
m above). A pattern will be said to "match" an expression if the expres- sion can be obtained from the 
pattern by substituting "values" for variables into the pattern and simplifying. The classes of patterns 
which are fully compiled by this method are those for which these substitution values can be deter- mined 
by solving linear equations at compile time. When this is not possible and when other techniques fail, 
a pattern is partially compiled with calls inserted to a general pattern matcher as needed. Sections 
2-6 systematically lead to the description of an al- gorithm in Section 7 for the translation of a given 
pattern into a LISP function which will recognize all instances of the pattern. The algorithm is naturally 
described by a walk down a "recognition tree" (Section 6) which is easily derived from a "pattern tree" 
(Section 5). In section 8, we sketch the entire process of compiling ruleset patterns. In section 9, 
we give a preliminary comparison of timings with this and two other pattern matchers. Section 10 compares 
our approach with that of the MACSYMA pattern matcher and presents our conclusions. 2. EXPRESSIONS. By 
an expression e we mean any identi- fier, integer, or operator form: (OP a I .-. a n) where OP is an 
operator (called the main operator of e) and al,..-,a n are expressions (called the argument expressions 
of e). By an indexed operator form we mean an operator form where OP is ~,~, etc. for which one of its 
arguments is a formal identifi- er called an index (the variable of integration, summation index, etc.). 
All identifiers other than indices are regarded as variables which range over sets of values described 
by predi- cates over expressions. We assume expressions are normalized, that is: (i) algebraic expressions 
are writte n solely in terms of +,x, and รท opera- tions (i.e. quotients are replaced by exponentials, 
differences and negatives are replaced by sums and products with -1); (ii) subexpressions are algebraically 
simplified and factored with respect to content, where the usual notion of the content of a polynomial 
is extended to rational functions and operator forms in an obvious way, e.g. the expression (4) Sx( 
1 - 2x)nLI(2,2-1/x)  when normalized becomes (5) (- 1)nxSx(2X- 1)nLI(2,x'l x (2x- 1)) (iii) expressions 
with symmetric main operators such as + and x have argument expressions ordered by <-, where <. is any 
total ordering on expressions such that two distinct forms (OP a I ... a n) and (OP b I ... b n) having 
the same main opera- tor OP and equal length n are ordered as follows: First, if OP is not symmetric, 
let (p(1),.--,p(n)) denote the "branch or- der" for OP (see below). If OP is symmetric, we assume already 
a ! <. a 2 < .... <. an, b I <. b 2 < .... bn, and let (1,2,...,n) denote its branch order. Then (OP 
a I .-. a n) <. (OP b I ... b n) if ap(i) <- bp(2), or if ap(l)fbp(2) then ap(2) <.bp(2), etc. More generally, 
normalization may be specified by a ruleset- dependent set of transformations which convert expres- 
sions into a suitable form for matching (for example, may call for integrands to be factored). We always 
assume how- ever that normalization will include the transformations (i)- (iii) above. Remarks. All expressions 
denoting patterns as well as expres- sions to be subjected to matching will be assumed normal- ized. 
The removal of content from indexed operator forms eliminates extraneous detail from integrals, sums, 
etc. so that patterns can be applied directly. The notion of "environment" is central to symbolic computa- 
tion in general and to pattern matching in particular. An environment is a list of n ordered pairs, called 
bindings, siva i, l<i_<n, which associate a "target" expression a i with a "source" expression s i. For 
convenience we abbreviate envi- ronment (sl~al,-..,Sn~an) by (s-~a). The environment at any fixed instant 
in time is called the current environment. By evaluation, we mean any expression-to-expression trans- 
formation # which involves a systematic replacement of source expressions in the original expression 
by correspond- ing target expressions. 3. PATI'ERNS. By a pattern p, we mean a triple (s,t,c) con- sisting 
of (1) a set s of n match variables si,...,Sn, n _> 0; (2) a template t=t(s) as defined below; and, (3) 
a predicate on expressions called the match condition c=c(s). A template t is either an expression or 
else has the form ('OP' t I .-. t n) for some operator symbol OP (called the main operator of t) and 
templates (called the argument templates of t) tl,...,tn, n >_ 1. A pattern p=(s,t,c) is said to match 
an expression/~e if there exists an environment (s-~.a) M such that c(a)=true and /~(e-t(a))=0. Such 
an environment (x-4.a) M is called a match environment for p. The match domain of p is defined to be 
the set of expressions matched by p. By a recognizer for pattern p we mean any total function on expressions 
which maps an expression e into a match environment or NIL according as p does or does not match p. Any 
expression to which a recognizer for a pattern is applied is called a subject. The special pattern ('POLY' 
k ..-) is used to represent a po- lynomial in an index k, where ..- denotes a list of the coeffi-cients 
of the polynomial up to the leading degree (always assumed non-zero). As an example, the pattern derived 
from (1) has match variable set s=(x,m), match condition: (m is integer ^ m<-2) (note: x is guaranteed 
to be an identifier), and template (6) JxPOly(x,2,- 1) รท m x LI(2,x รท (- 1) xpoly(x,2,- 1)  with all 
operators quoted. We also assume patterns are normalized, that is: (i) the expression formed from the 
temp- late by removing quotes from operators and replacing termi- nal expressions by unique identifiers 
is normalized and has content equal to one; (ii) terminal expressions in the template are normalized; 
(iii) match condition c is expressed in a con- junctive normal form, e.g. in the form ((r v ...) ^ ...)) 
where each r has one of the three forms: e<0, e=0, or e>0 for normalized e; (iv) Templates with a symmetric 
main operator have arguments templates ordered by <. which is defined as follows for two patterns pl=(s,tl,c) 
and p2=(s,t2,c) with distinct templates t i and t 2 but with identical match variable set s and match 
condition c. Pattern Pl <" P2 if for each match environment (s-~a)M: tl(a) <. t2(a). If, however, there 
exist match environments (sea) M and (sob) M such that tl(a) <. t2(a) yet t2(b) <- t2(b) then we say 
Pl =" P2. The main operator of ('POLY' ...) is either +, x, or รท, thus is given special treatment. Remarks. 
The key reason for introducing quoted operators is to distinquish between "structural" and "algebraic" 
match- ing. Template x'รท'y matches only those subjects with an explicit exponentiation operator, e.g. 
2 รท n with (x-~ 2,y-~ n)M, but not 8=23 (which is not normalized) or 4u=22u (which requires a special 
ยขp). If x and y appear more than once in a template and can be determined by solving equations, then 
an unquoted operator รท is allowed, e.g. when 'f'(x+y,x-y,xรทy) is applied to f(a,b,c), xรทy matches ((a+b)/2) 
((a-b)/2). Template ('POLY' ..-) not only abbreviates a longer form ('+' .-.) but is more powerful, e.g. 
template ('POLY' k x y) will match x+ky for any expression x and y (y#0 and both free of k). An equivalent 
algebraic pattern will not. 4. EXPRESSION TREES. An expression tree for an expres- sion e is a representation 
of e as a tree with ordered branches, with non-terminal nodes labeled with operators, and with terminal 
nodes labeled with integers and identifiers. The expression tree for an expression e is obtained by the 
follow- ing rules: (1) if e is an identifier or an integer, the expression tree of e is a single node 
labeled by e; otherwise, (2) e has the form (OP a I ... an) in which case its tree has the form: OP al 
t a2 t ... an ~ where a I t, a2 w ,..., an t denote the trees for subexpressions al,a2,...,a n respectively. 
As usual we call OP the root of the tree. The left-to-right order of the subtrees given above corresponds 
to the parse tree produced by an input translator except that when OP is symmetric, a I ' <. a 2 t < 
.... <. an, A branch order, a permutation of (1,2,...aa), is defined for each OP and for each possible 
number n (n > 1) of argu- ments OP can take. Symmetric OPs always have branch order (1,2,...,n) after 
its arguments are ordered by <.. An expression tree is traversed as follows. Initially visit the root 
of the tree. Then visit the remaining nodes of the tree using a branch order traversal defined as follows: 
(1) visit the root of each subtree in branch order; (2) traverse each subtree in branch order.  61 
SYNTAX INTERNAL FORM EXPRESSIONTREE 1 (fu x) (~ ~f k=i(s) u (~ukisf) 5 2 12 (:) (cn m) 14 x y (f x y) 
Table 1. Example internal representations and branch orders  Remarks. This non-standard definition of 
traversal provides a "breadth first" sweep across expression trees so as to quickly screen unsuitable 
subjects. Branch ordering plays a dual role of controlling how expressions are ordered during normaliza- 
tion and how expression trees are traversed during the match- ing process. In normalizing integral and 
sum patterns involv- ing quotients, for example, a special branch order allows exponentials to be ordered 
first on their powers so that, for example, denominator terms having negative exponents will always appear 
before respective numerator terms. Also, binomial coefficients in a sum pattern can be ordered first 
on their lower argument which most often contains the summa- tion index. During matching, branch order 
traversal forces the variable of integration for an integral pattern to be exam- ined before the integrand 
so that ('POLY' ..-) patterns can be used in matching the integrand. 5. PATTERN TREES. A pattern tree 
is used to describe a family of expressions matched by a given pattern. Pattern trees are similar to 
expression trees except that pattern trees have expressions at their terminal nodes. A pattern tree for 
a pattern p=(s,t,c) is obtained from template t by the following rules: (1) If t is an expression e, 
the pattern tree for p is a single node labeled by e; otherwise, (2) t has the form ('OP' t t -.. tn) 
in which case its tree has the form: where t 1 i, t2 1 ...t n w denote the pattern trees for tl, t2,.-.,t 
n respectively. For non-symmetric OPs, the left-to-right order of the subtrees above corresponds to the 
parse tree produced by an input translator. For symmetric OPs, subtrees are ordered by <. except perhaps 
for a permutation set, a set of two or more consecutive subtrees related by =.. Permutation sets indicate 
subtrees that are ordered up to a (run time) permutation. Branch order and branch order traversal are 
similarly defined for pattern trees. Remarks. By construction, a pattern p matches an expression e iff 
(1) the pattern tree for p is identical to the expression tree for e down to the terminal nodes of the 
pattern tree, and (2) there exists a match environment (s-,-a) M such that ter- minal expressions ti(a) 
are algebraically equal to correspond- ing subexpressions e i of e, i.e. /~(ti(a)=ei). We will call a 
9 Figure 1. Pattern Tree for Pattern (3).  L pattern "fully compilable" if the relations {ti(a)--e i} 
form a set of linear equations which can be solved for the match variables s i. 6. RECOGNITION TREES. 
A recognition tree is derived from a pattern tree and provides a useful algorithm for recog- nizing a 
given pattern. A recognition tree is equivalent to a pattern tree except that terminal expressions of 
the pattern tree are replaced by terminal predicates. Let P denote a pattern tree for pattern p=(s,t,c) 
whose nodes are labeled 1,2,.-- in order of visitation by branch order traversal (Figure 1). Let I=(il,i2,.--,in) 
denote the set of indices of the n termi- nal nodes t i of P. In addition, let e i denote the subexpressions 
of a subject e I matched by p whose corresponding subtree has its root at node i. The recognition tree 
for pattern p=(s,t,c) is derived from the pattern tree for p by replacing each terminal expression t 
i by predicate Pi defined as follows. Beginning with c0=match condition c, repeat the following for each 
i in I: (1) Define ci t --(ti-ei=0) ^ el_ ! expressed in a conjunc- tive normal form. (2) For each match 
variable s, declare s to be bound at node i if: (a) s is defined by a set of linear equations appearing 
as conjuncts in c i ', .and (b) condition (a) holds at no time k < i.  (3) Define conjunctive normal 
forms c i and Pi by the relation: cit =pi ^ c i such that Pi contains all conjuncts involving only match 
variables bound at node kS i. (Note: one or both of Pi and c i may be true).  If a recognition tree 
is to properly represent a pattern, all match variables must be solvable by linear equations by the time 
the last node i is reached in branch order traversal. We say a pattern is fully compilable iff the above 
procedure ends with Cm=true. Remarks. By construction, the process of deriving a recogni- tion tree from 
a pattern tree distributes the terms of match condition c over the terminal nodes of the tree so that 
predi- cates may be applied at the earliest possible time. Note that the predicates Pi also include tests 
for multiple appearances of match variables in patterns (such as x and y in 'f'(x+y,x-y,x)). Note also 
that a match variable s bound at node j may be expressed in terms of et,...,e i. By construc- tion, terminal 
predicate pj involves only match variables s bound at node i <j and thus also may be expressed solely 
in I 5 2 12 14 9 P2: true P6: ise 6integer ^ise6_--2? Pl5: isel5=--l? P9: is e9=--l? PI6: is e16=e2 
? Pl0: isel0=2? PlS: is~18 =-1? PlI: isell=2? Pl9: isel9=2? Figure 2. Recognition Tree for Pattern (3). 
 terms of el,...,e j. Given a recognition tree it is now a simple matter to generate a recognizer. 7. 
RECOGNIZERS. A recognizer for pattern p will be repre- sented by a sequence of instructions (Table 2) 
which system- atically test that a given expression e is matched by pattern p. Assume the nodes of the 
recognition tree are labeled 1,2,...,m. Here we let e2,...,e m denote local storage cells which are available 
to hold subexpressions of subject e. Then a recognizer to test that expression e--e I is matched by pattern 
p=(s,('OP' ...),c) consists of a succession of tests and stores as output by the following procedure: 
Initial Step: Output (EO e I (QUOTE =OP)) to test that el has main operator OP. Steps i= 1,...,m: For 
each node i of the recognition tree: (1) if node i is labeled with a terminal predicate p, output predicate 
p expressed in terms of the values of el,...,ei; (2) if the node is labeled with an operator OP ~ (ยข 
POLY) and dominates k nodes whose integer labels form the set Ni= (ni,ni+ 1,.-.,hi+k- 1):  (a) output 
(EL e i =k) to test that e i has k branches (if OP ' is allowed a variable number of branches); Stores: 
(sc y x z) Store coefficients of x in y into z (ST y x) Store value of x into y (SA x y) Store arguments 
of x into y (SP x y) Store parts of x into y Tests: (TI x) Is x on integer? fin x) Is x an name? (EL 
x y) Is length(x)=y? (EO x y) is main operator of x=y? (EQ x y) is x=y? (NE x y) Is x~y? (LE x y) Is 
x<y? (LT x y) Is x<y? (GEx y) Is x_>y? (GT x y) Is x>y?  Table 2. Instruction Codes for Recognizer (AND 
(EO el (QUOTE INT)) (SA el e3 e2) (EO e3 (QUOTE TIMES)) (EL e3 3) (SA e3 e4 e5) (EO e4 (QUOTE EXPT)) 
(EO e5 (QUOTE LI)) (SA e4 e7 e6) (EO e7 (QUOTE PLUS)) (T! e6) (LE e6 -2) (SC e7 e2 eS) (EL e8 2) (SP 
e8 e9 el0) (EQ e9 - 1) (EQ el0 2) (SA e5 ell el2) (EQ ell 2) (EO el2 (QUOTE TIMES)) (EL el2 3) (SP el2el3 
el4) (EO el3 (QUOTE EXPT)) (EO el4 (QUOTE PLUS)) (SA el3 el6 el5) (EQ el5 -1) (EQ el6 e2) (SC el4 e2 
el7) (EL el7 2) (SP el7 el8 el9) (EQ e18 -1) (EQe19 2) (MV 3 e2 e6) ) Figure 3. Recognizer for Pattern 
(6) (b) for each j e N i, output (SA e i ...) to store the k argu- ments of e i into ej; (c) for each 
j E N i such that node j is labeled by an op- erator OPj, output (EO e i (QUOTE =OPj))) to test that 
expression ej has main operator OPj (3) if the node is labeled with operator POLY and domi- nates n+2 
nodes, say, ei+l,ei+2,...,ei+n+2: (a) Output (SC e i =ei+ 1 ei+l) to deposit list of coeffi- cients 
of powers of the index stored in el+ 1 in e i up to the leading coefficient into el+ I . (b) Output 
(EL ei+ I =n+l) to test that list el+ I has length n+ 1; (c) Output (SP ei+ ! ---) to deposit the n+l 
parts of ei+ I into ei+2,...,ei+n+2; (d) For each j in (2,..-,n+2): if node ei+ j has root OPj, output 
(EO ei+ j (QUOTE =OPj)) to test that the expression stored in ej has main operator OPj.  Two other 
types of nodes are briefly mentioned here. One is an ANCHOR node which signifies the need for a run time 
permutation to put terms into a fixed order. In this case, the compiler outputs complete information 
as to "what to look for"; this information is later used by the optimizer (see below). A second type 
of node is a PATTERN node which compiles into a call to a general simplifier. This node is used when 
the compiler cannot reduce a given pattern to a set of fully compilable patterns. Recognizers are implemented 
by LISP AND-expressions (Figure 3) which are understood to have the following se- mantics. The arguments 
of an AND~expression are evaluated from left to fight returning false (NIL in LISP) if one argu- ment 
is found to be false or else the value of the the last argument if the list of arguments has been exhausted. 
Thus any value other than false is regarded as true. In particular, actions having value different from 
false can be executed in sequence for side effect without affecting its value. A recog- nizer always 
ends with (MV i u I ... Un) to return a denotation of a match environment (s0~i,sl-~Ul,--.,Sn-~.Un) where 
i denotes the "case-number" of the pattern. 8. COMPILATION OF PATTERN SETS. The process of compiling 
sets of patterns from a ruleset consists of 5 phases: Phase 1: generation of patterns from ruleset expressions; 
Phase 2: generation of recognizers from patterns; Phase 3: merging of recognizers into a decision tree; 
Phase 4: optimization of the decision tree; Phase 5: compilation of the optimized tree. Phase 1 consists 
of generating pattern triples (s,t,c) from expressions derived from given replacement rules of the rules- 
et. The general form of each replacement rule is L=if C then R where L is a expression denoting a template 
for a pattern, and where R denotes the replacement for L when the parameters of L satisfy condition C. 
Rules are generally split into two or more rules when the pattern derived from L is not fully com- pilable. 
This happens, for example, when condition C allows variables in L to range over identity elements of 
operators appearing in L. For example, the rule -~x xneax = xneax/a-(n/a)Sx xn-leax (n (0,1,...)) splits 
into three cases: n=0, n=l, and n (2,...). Rules also split when the prescribed range of variables allows 
terms to combine, e.g. St "'" sin(xt)sin(yt) (x,y arb) splits into two cases: x--y and x#y. Phases 2 
and 3 are combined. Each pattern tree is succes- sively transformed into a recognizer then merged into 
a single AND-OR expression representing a "decision tree" which becomes a recognizer for all patterns 
the given ruleset. A decision tree is a tree with ordered branches labeled with instructions and with 
terminal nodes labeled with a match environment. Branch nodes with two or more branches are implemented 
by the LISP expression (OR ...) which has se-mantics analagous to that of AND. Beginning with a partial 
decision tree represented by AND-OR expression d, a new recognizer implemented by (AND ...) is merged 
with d by repeatedly transforming an initial representation (OR (AND ..) d) by rewrite rule transformations: 
(OR "" (AND a -.-) ... (AND a...) ..-) (OR --. (AND a (OR (AND...) (AND..-)))..-) (op ..-(op ...)...) 
~ (op ......... ) (op -.. a ... a ...) ~ (op ... a ...... ) Fop=AND,OR (op a) ~ a until no more changes 
result. Phase 4 attempts to optimize the search over all patterns by performing transformations on the 
decision tree. One such optimization is to convert a branch into a homogeneous branch, that is, a n-way 
branch on the value of a single ex- pression. Non-homogeneous nodes can frequently be "homogenized" by 
a process called "code-shifting". Let T(n) (resp. S(n)) denote an instruction (FN e n ...) whetre FN 
is a test instruction (resp. store instruction). By code-shifting we mean a transformation of the form 
(ANDT(n) T(m) ...... ) ~ (AND T(m) ..- T(n)...) which are logically equivalent and where T(n) is placed 
as far to the right as possible hut to the left of any S(n). When the AND-expression contains no S(n) 
hut ends with a branch node then T(n) is placed as far to the right as possible in each (OR (AND (EO 
el (QUOTE INT)) (SA e9 e3 e2) (EO e3 (QUOTE TIMES)) (EL e3 3) (SA e3 e4 e5) (EO e4 (QUOTE EXPT)) (EO 
e5 (QUOTE LI)) (SA e4 e7 e6) (EO e7 (QUOTE PLUS)) (T1 e6) (LE e6 -2) (SC e7 e2 e8) (EL e8 2) (SP e8 e9 
el0) (EQ e9 - 9) (SA e5 ell el2) (EQ el 9 2) (OR (AND (EO el2 (QUOTE TgMES)) (EL e12 3) (SP e92 e93 
e94) (EO e93 (QUOTE EXPT)) (EO e94 (QUOTE PLUS)) (SA e13 e96 e15) (EQ e95 -t) (EQ el6 e2) (SC el4 e2 
e97) (EL el7 2) (SP e97 e98 e99) (EQ el8 -1) (EQ e99 2) (OR (AND (EQ el0 9) (MV 2 e2 e6)) (case (2)) 
(AND (EQ el0 2) (MV 3 e2 e6) ) ) ) (case (3)) (AND (EQ el2 e2) (EQ el0 I) (MV 9 e2 e6) ) ) ) ) (case 
(I)) Figure 4. Optimized Decision Tree for 3 Patterns: SxU(n), n E (-2,-3,..-), where u(n)= (1) (x- 1)nLI(E,x); 
(2) (x-- 1)nLI(2,2 - l/x); (3) (2x--1)nLI(2,2-1/x) (same as pattern (6))  ~ranch. In addition, compaction 
of code results from trans- forming expressions of the form (OR .-.(AND... e ...... ) .. (AND ... e ...... 
) ...) with two common subsequences c... into a logically equivalent form: (OR ..- (AND e... (OR (AND 
...... ) (AND ...... )))---) Patterns with permutation sets give rise to anchor nodes, that is, a node 
which requires a dynamic search for the correct permutation of two or more arguments of a symmetric opera- 
tor. Here it is useful to consider the nodes of the decision tree to be of two types. A no-backup node 
is such that if one of the successively examined branch predicates is true, then no other alternate branch 
predicates need be examined. A backup node, on the other hand, allows successive alternate predicates 
to be tested no matter how many previously exam- ined branch predicates were true. Since the cost of 
searching over alternatives can be quite significant, the optimizer at-tempts to convert backup nodes 
into no-backup nodes in order to eliminate unneeded searching. A general strategy here is that of "node-splitting", 
that is, partitioning the set of branches into disjoint sets mutually requiring backup but where members 
of the respective sets can be handled by no-backup. The need for no-backup nodes for sets of pat- terns 
with no permutation sets has yet to be demonstrated. 9. TIMINGS. A preliminary comparison was made of 
the performance of three pattern matchers in matching trigono- metric integration formulas 336-357 from 
[6]. Both of the other two pattern matchers are implemented in SCRATCH- PAD and consist of a set of compiled 
LISP functions which apply argument patterns to argument subjects in order to determine a match environment. 
The general pattern match- er is a modified version of the REDUCE pattern matcher. This pattern matcher 
finds all possible match environments for which the pattern structurally matches the subject then searches 
for one which satisfies the match condition. In the revised pattern matcher, the match condition is expressed 
as a logical-AND of univariate predicates, one for each match variable, and a multivariate predicate. 
Univariate predicates are carried along with the respective match variables into the matching process 
in order to immediately screen unsuitable subjects. The multivariate predicate is then applied to sub- 
jects as a final test for matching. In addition, all predicates are represented by "superprefix forms" 
which permit substi- tution without copying. Preliminary tests show the new pattern matcher to be 6 to 
200 times faster in recognition than the revised pattern matcher, 9 to 2000 times faster than the general 
pattern matcher, depending on the subject tested, and the order and style in which rules were issued. 
A detailed comparison of performance on an integral table from [2] and a table of combinatorial identities 
from [4] is planned for an expanded version of this paper to be published as an IBM Research Report. 
10. COMPARISON WITH MACSYMA; CONCLUSIONS. The MACSYMA pattern matcher (described in [1]) is similar to 
that of SCRATCHPAD in several ways. Both produce compiled recognizers, avoid searching and backtracking 
dur- ing recognition, and provide for "semantic" as opposed to "syntactic" patter~l matching (e.g. by 
regarding both (x+2)(3x+ 1) and xL+7x+2 as "quadratic in x"). Both use a rational canonical form to determine 
coefficients of powers of a variable when called for. There are basic differences however. The MACSYMA 
com- piler compiles single patterns not pattern sets as does the SCRATCHPAD compiler so that no advantage 
can be taken of information gained from previous attempts to match. Also, the MACSYMA compiler performs 
what might be called "algebraic pattern matching", i.e. matching by consid- ering a "piece" of the pattern, 
deriving an expression from the subject which matches that piece, then recurring with a new pattern and 
new subject algebraically reduced by the matching parts. If when the reduced pattern becomes 0 the corresponding 
subject is 0, then the original pattern is said to match the subject. On the other hand, the SCRATCHPAD 
compiler might be said to perform "structural pattern match- ing". By static analysis at compile time, 
the compiler at- tempts to take full advantage of "advance" information about the internal representation 
of the class of expressions matched by a given pattern: the order of terms, the number of arguments the 
operator takes, the lead operator of subex- pressions, etc. This information most often permits the deter- 
mination of a match environment by solving equations. For example, in both systems the pattern 3A+B 4 
will match 1,3,3Z,w4+ 1 but will fail to match 10 which must be written in an unnormalized form for a 
match to be possible. Whereas MACSYMA would first attempt to apply the pattern 3 A to a subject by calling 
a match subroutine, SCRATCHPAD would split the general oattern into 10 cases, 9 patterns (1, 2, 3, 4, 
3 A, 3A+l, I+B 4, 3+B 4, 3A+B 4) which correspond to A and B=0,1, or not 0 or 1, and a tenth pattern(162) 
where A=B. In addition, SCRATCHPAD uses a special construct (POLY .--) in order to handle polynomial 
constructs efficient- ly. An extension of the existing system would allow a decla- ration that an expression 
e is "free of" a variable x. Whereas both systems would then allow the user to define a predicate "quadratic 
in x", the SCRATCHPAD version would be much simpler and usually more efficient (compare to [1, p. 323]): 
  (AND (SC el x e2) (EL e2 3) (SP e2 e3 e4 e5) (FO e3 x) (FO e4 x) (FO means "free of") (FO e5 x) (MV 
I e3 e4 eS))  In addition, this facility could also be adapted and extended to compile pattern match 
constructs in a mode-based proce- dural language facility over a variety of data structures. REFERENCES. 
<RefA>[1] Fateman, R. J., "The User-Level Semantic Matching Capability in MACSYMA", Proceedings of the Second 
Symposium on Symbolic and Algebraic Manipulation, ACM, New York, 1971, pp. 311-323. [2] Fox, John A. 
and Hearn, A. C., "Analytic Computation of Some Integrals in Fourth Order Quantum Electrody- namics", 
Journal of Computational Physics, Vol. 14, 1974, pp. 301-317. [3] Griesmer, J. H., Jenks, R. D., and 
Yun, D. Y. Y., "SCRATCHPAD User's Manual", IBM Research Report RA 70, June 1975. [4] Gould, H. W., Combinatorial 
Identities, A Standardized Set of Tables Listing 500 Binomial Coefficient Summa- tions, Revised ed., 
Morgantown Printing and Binding Co., Morgantown, W. Va. [5] Jenks, R. D., "The SCRATCHPAD Language", 
Proceed- ings of a Symposium on Very High Level Languages, SIGPLAN Notices, Vol. 9, No. 4, April, 1974. 
(Reprinted in SIGSAM Bulletin, Vol. 8, No. 2, May 1974). [6] Peirce, B. O., "A Short Table of Integrals", 
Ginn and Company, New York, 1929. </RefA>
			
