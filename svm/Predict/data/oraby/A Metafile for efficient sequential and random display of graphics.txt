
 A METAFILE FOR EFFICIENT SEQUENTIAL AND RANDOM DISPLAY OF GRAPHICS Theodore N. Reed Los Alamos National 
Laboratory ABSTRACT Graphics metafiles have been in use at the Los Alamos National Laboratory since 
early 1977. The first metafile format was defined in 1976 and has been updated several times to allow 
efficient graphics support in the Los Alamos computing environment. History and current applications 
of the Common Graphics System (CGS) Metafile are given. Design objectives, details of the format, and 
random access extensions incorporated in the Metafile are described. CR Cate$ories and Subject Descriptors: 
H.3.2 [Computer Graphics]: Graphics Systems - modular software, metafile generation; H.3.4 [Computer 
Graphics]: Graphics Utilities - metafile processing; H.3.6 [Computer Graphics]: Methodology and Techniques 
-random access of metafile frames. Additional Key Words: metafile, random access, device-independent 
 INTRODUCTION A graphics metafile is a device-independent representation of a picture intended for subsequent 
display on a graphics output device. Two concepts are contained in this definition. First, the metafile 
is a device-independent representation of a picture that can be displayed on a wide variety of graphics 
devices. Second, the metafile is intended for subsequent display; thus, it is passive in nature. This 
paper discusses the metafile used at Los Alamos National Laboratory for both sequential and random display 
of graphics. HISTORY In 1976, a graphics metafile was defined for the Los Alamos National Laboratory's 
Common Graphics System (CGS) [I]. It had 14 bits of addressability based on 8-bit bytes. This format 
was defined after analyzing a variety of plots and looking at existing graphics metafiles [2,3]. In 1978, 
the Metafile was modified to include 15 bits of addressability based on a 16-bit word and was restructured 
to include the ACM/SIGGRAPH Graphic Standards Planning Committee CORE capabilities [4]. This revision 
was proposed to an interlaboratory task group consisting of Los Alamos National Laboratory, Sandia National 
Laboratory in Albuquerque, and the Air Force Weapons Laboratory in Albuquerque. After some modification, 
it was adopted and called the Basic Graphics Package (BGP) metafile. The current CGS Metafile is the 
BGP metafile with extensions to allow efficient random access. In 1979, the ACM/SIGGRAPH Graphic Standards 
Planning Committee (GSPC) published its status report, which included a proposal for a graphics metafile 
[5]. This metafile was based on a study of four existing metafiles [6]. One of these was the BGP metafile 
from which much of the GSPC metafile command structure and format was derived. In 1980, the ANSI X3H3 
Computer Graphics Technical Committee formed the X3H33 Virtual Device Interface Task Group to standardize 
a computer graphics metafile [7]. APPLICATION The computing environment at the Los Alamos National 
Laboratory includes an extensive network of supercomputers, on-line storage facilities, remote computers, 
and user terminals. Figure 1 illustrates the graphics software components available in this network. 
The Common Graphics System provides the subroutine library containing device-independent graphics primitives, 
primitive attributes, and device control functions. The higher-level graphics utilities, plotting packages, 
and user application programs are built upon this foundation [8]. Device drivers interface to this device-independent 
software and translate the device-independent graphics data into the form required by the physical graphics 
devices [9]. A special device driver records this device-independent information in the Metafile (a disk 
file) for subsequent processing. Metafile postprocessors (translators) use the appropriate CGS device 
driver to display the Metafile on the user's local interactive or passive graphics device. The more 
expensive film recorders and paper plotters are in a central location and are connected to a computer 
remote to the user. Device drivers on this computer translate the Metafile into the form required by 
the various plotting devices. Users access Metafile postprocessors (transporters) to send the Metafile 
to this computer for processing. ~V' CE- I NDEPENDENT~ REMOTE PASSFVE COS INTERACTIVE LOCAL PASSIVE 
GRAPHICS DEVICES METAFILE(s) GRAPHICS DEVICES GRAPHICS DEVICES I Figure i. Graphics software components 
at the Los Alamos National Laboratory. OBJECTIVES The key design objectives for the CGS Metafile included 
designing a metafile that  maintains the smallest file size possible while supporting necessary addressability 
requirements,  is efficient to process,  is extensible,  can be moved across computers of different 
word lengths without conversion,  can be moved across different operating systems without conversion, 
and  allows a particular frame to be displayed without sequentially processing preceding frames.  
 These design objectives have been met. METAFILE FORMAT The Metafile design provides a compact format 
that can be processed efficiently. This format is simple yet easily extensible to allow later enhancement. 
The format is based on multiples of 16-bit words to facilitate processing on most mini- and microcomputers, 
as well as many of the larger computers. This format also facilitates the processing of ASCII characters, 
which are packed two per word. Coordinate-Positioning Command Format In many graphics applications, 
most graphics data consists of coordinate-positioning information. Each Metafile coordinate is contained 
within one 16-bit word to preserve as much addressability as possible and still keep the total Metafile 
size reasonably small. Each coordinate-positioning command consists of an x, y, and optional z coordinate 
(Figure 2). Analysis of graphics output at Los Alamos indicates that no significant size reduction 
results when either the x or the y coordinate is eliminated if unchanged from the previous position. 
Because of the extra control bits necessary to identify whether a coordinate consists of x or y or 
both instead of a "simple" x, y coordinate pair, either the total size must increase or the addressability 
must decrease. The coordinate-positioning commands maintain 15 bits of addressability. This is sufficient 
for current and planned graphics devices. These coordinates are absolute normalized device coordinates, 
which have been transformed and clipped. After completion of a coordinate- positioning command, the current 
position is at the specified x, y coordinate pair. Either two-or three-dimensional coordinates can be 
output, allowing for support of three-dimensional devices. For three-dimensional devices, a mode is set 
and the coordinate-positioning commands that follow consist of x, y, and z coordinates. The coordinate-positioning 
commands are distinguished from the noncoordinate-positioning commands by the high-order bit of the x 
coordinate (Figure 2). This bit is set to zero for the coordinate-positioning commands and is set to 
one for the noncoordinate-positioning commands (Figure 3). The high-order bit of the y coordinate determines 
whether a move or draw is to take place. A draw can be either a line from the current position to the 
specified coordinates or a marker at the specified coordinates, depending on the mode. The high-order 
bit of a z coordinate is always zero. Noncoordinate-Positionin$ Command Format The noncoordinate-positioning 
command format contains the remainder of the Metafile commands (Figure 3). Although this format provides 
most of the possible Metafile capabilities, it comprises a small portion of the total graphics data 
in the Metafile since most of the data consists of coordinate-positioning commands. Because of this, 
 attention has been given to providing a simple, uniform command format that can be processed efficiently. 
Each command contains a count of the words associated with it. Searching the file for particular commands 
is simplified and unsupported commands are easily skipped because the number of words associated with 
a particular command is immediately available. The 7-bit op-code is divided into a 3-bit class and a 
4-bit subclass. This allows the various op- codes to be defined in an organized fashion with 8 major 
classes, each consisting of up to 16 subclasses. By dividing the op-code in this fashion, jump tables 
can provide efficient processing of the class and subclass operations. Both the coordinate and noncoordinate 
commands are written on disk as a "bit-stream"; that is, no explicit record or file structure exists. 
This allows the Metafile to be moved between computers of different word lengths or different operating 
systems without conversion. All that is required to process the Metafile is "primitive" I/O, allowing 
transfer of a specified amount of data to or from a particular location on disk. To avoid word-boundary 
conflicts, the end of each Metafile is padded with a "no-operation" command so that the file is a multiple 
of 60 16-bit words. The file is thus forced to align on word boundaries for all of the Los Alamos computers 
(64-, 60-, 32-, and 16-bit words). A multiple of IgO 16-bit words would be necessary to include computers 
with word lengths of 36-or 18-bit words. io I X-COORDINATE (15 bits) i i i i i i i i ! ! i i i i i 
i ! I Word 1 i Mi Y-COORDINATE (15 bits) ! IDI ............ Word 2 iOi Z-COORDINATE(15 bits) i i , !!!i!iiiiiii, 
i Word 3 (3D mode only) Figure 2. Coordinate-positioning command format. I! CLASS SUBCLASS iOP WORD 
COUNT (0-255) :: i :: :: :: :: i i ! ! ! ! i i i i i ; ': OP CODE i i Word 1 OP WORD I i i i i i i 
i i i i i ! ! ! ! ! ! ! Word 2 OP WORD N ! i i :; :; i :; i i i i i ! ! ! ! i !i Word n+l Figure 3. 
Noncoordinate-positioning command format. RANDOM ACCESS EXTENSIONS The Metafile format described thus 
far allows for efficient sequential processing of the Metafile. The following additions allow rapid random 
access with minimal impact on the size of the Metafile or the efficiency of the sequential processing. 
 A function was added to the escape command, and two existing commands (end-of-data and new-frame) were 
modified. The index-block escape command contains the 16-bit-word disk addresses of the preceding 28 
frames. Each address or pointer to the preceding frame consists of 32 bits. The index- block escape command 
consists of 60 words (Figure 4). Word 1 indicates the escape command and that 59 words follow. Word 2 
indicates the index-block escape command. Words 3 and 4 contain the 16-bit- word disk address of the 
preceding index block. Words 5 through 60 contain the 16-bit-word disk address of the preceding 28 
frames. An address or pointer of zero indicates the end of this linked list of index-block escape commands. 
 i ESCAPE OP J 59 INDEX BLOCK IDENTIFIER POINTER TO PRECEDING INDEX BLOCK POINTER TO PRECEDING FRAME 
(N) POINTER TO PRECEDING FRAME (N+28) Figure 4. Index block escape command format. The new-frame and 
end-of-data commands each consists of seven words (Figure 5). Word 1 gives the command and word count. 
Words 2-4 are a synchronization pattern that forces the first 64 bits of each command to a bit pattern 
unique to the end-of-data and new-frame commands. Words 5 and 6 are the 16-bit-word disk address pointer 
to the previous index-block escape command. Word 7 is the current frame number for the new-frame command 
or the total number of frames for the end-of-data command. NEW FRAME OPII 6 SYNC PATTERN POINTER TO 
PRECEDING INDEX BLOCK FRAME NUMBER END OF DATA oPJ 6 i SYNC PATTERN POINTER TO LAST INDEX BLOCK TOTAL 
FRAME COUNT Figure 5. New frame and end- of-data command format. File Generation As the file is generated, 
the disk address of each frame is saved. This disk address is a 16- bit-word address independent of 
the word length of the computer that is generating the Metafile. When 28 frames have been generated, 
the index block is written to disk and its disk address is saved (Figure 6). Each new-frame command 
written to disk  contains the disk address of the previous index block. When 28 more frames have been 
generated, the index block with the disk address of the previous index block is written to disk. When 
the Metafile is complete, the last partial index block is written to disk and is followed by an end-of-data 
command containing the disk address of the last index block. This linked list structure is sequentially 
generated and is written to disk using only sequential writes. J~ ESCAPE INDEX BLOCK BLOCK POINTER FRAME 
POINTER FRAME POINTER NEW FRAME SYNC PATTERN BLOCK POINTER FRAME NUMBER   f NEW FRAME SYNC PATTERN 
BLOCK POINTER INDEX BLOCK BLOCK POINTER FRAME POINTER  ii I  FRAME POINTER .~ END OF DATA SYNC PATTERN 
BLOCK POINTER TOTAL FRAMES Figure 6. CGS Metafile random access linked list structure. (Pointers to index 
block are on the left; pointers to frames are on the right.) Random Access of a Frame  When the file 
is sequentially processed, the index-block escape command is ignored. However, when the file is randomly 
processed, a table of frame addresses can be quickly constructed. The end-of-data command is located 
at the end of the file. It is read, and the total frame count is used to give the frame address table 
entry for the last frame. The disk address of the last index block is also obtained from the end-of-data 
command. This index block is read, and the disk address of each frame is stored in the frame address 
table. The address of the previous index block is obtained; it is read, and disk addresses of those frames 
are stored in the frame address table. This process continues until a complete table of frame addresses 
has been constructed. Each frame can now be immediately accessed by disk address. The frame address table 
can be constructed at a fraction of the cost of sequential reading of each frame because only one disk 
access is made for every 28 frames. To further increase efficiency, the index-block escape command 
could be increased in size in multiples of 60 16-bit words to allow additional frame addresses to be 
stored. To simplify random accessing, the end of each frame is padded to a multiple of 60 16-bit words 
so that each new-frame command and index-block escape command start at the beginning of a word (independent 
of computer word length). This ensures that the addresses will be at the beginning of a word on disk 
when the 16-bit-word disk addresses are converted to an actual disk address for a machine of a particular 
word length. To randomly access a frame and obtain a correct picture, it is necessary that the current 
attributes be associated with each frame. All of the current attributes are written to disk after each 
new frame command. These can be ignored when processing the file sequentially, but are necessary to establish 
the environment when randomly processing frames. The current Metafile does not contain segments or color/font 
table definitions. A method to support both sequential and random access of a metafile containing segments 
and color/font table definitions is discussed under Future Extensions. This method of providing random 
access to Metafile frames has been very successful. The most heavily used Metafile translators at Los 
Alamos are those that provide random access to frames in the Metafile. Users are able to preview and 
edit particular frames of a Metafile at their terminal before sending it to a graphics hardcopy device. 
Facilities have also been provided to copy frames from one Metafile to another and to merge selected 
frames from several Metafiles into one. These operations would not be feasible without rapid random access 
to frames of a Metafile. ERROR RECOVERY When a job aborts, the Metafile may not have been properly 
terminated. When this happens, the last index-block escape command and end-of-data command have not been 
written to disk. The frame address table is constructed by searching the file backward from the end, 
looking for a new-frame command. Once it is found, the pointer to the previous index block can be obtained, 
and the frame address table can be constructed. The file can be searched forward from this index block, 
looking for new-frame commands to complete the last few entries in the frame address table. FUTURE EXTENSIONS 
 Segmentation When segmentation is supported in the CGS Metafile, the following scheme could be adopted 
to allow efficient sequential and random processing while maintaining a small file size. A new escape 
function would be defined, called the frame environment block. This would contain all current attributes 
and disk addresses (in 16-bit words) of all segments. This escape command would be ignored when processing 
the file sequentially, but would he  used to provide a correct picture when processing REFERENCES the 
file randomly. Little additional file space would be required in the "typical" case where there is a 
small number of large segments. This same scheme could be used for color definition tables and font definition 
tables if they are added to the Metafile. Random Processing by Key Identifier An extension that would 
facilitate random processing is the addition of a user-specified identifier to the CGS new-frame subroutine 
call. This identifier would be written as part of the CGS Metafile new-frame command. When the frame 
address table is constructed, this identifier would be associated with the frame number and disk address. 
This identifier would then he used as a key to randomly access a particular frame, thus allowing the 
user to specify a logical identifier rather than a frame number. SUMMARY The COS Metafile is efficient 
in file size and processing time for both sequential and random display. Random access efficiency was 
accomplished by incorporating an escape function containing frame pointers in a linked list. Portability 
of the Metafile across different computers and operating systems without conversion was achieved by avoiding 
an explicit record structure. These techniques are extensible and will be used to support future extensions 
to the CGS Metafile. ACKNOWLEDGMENTS I would like to thank Raymond Elliott and his computer graphics 
group for their support of this work. I would also like to thank Richard Kellner for the many valuable 
discussions he and I had concerning efficiency in the generation and random accessing of frames in the 
CGS metafile. <RefA>I. Keller, R. G., Reed, T. N., and Solem, A. V. An implementation of the ACM/SIGGRAPH 
proposed graphics standard in a multisystem environment. Computer Graphics, 12,3 (August 1978), 308-312. 
 2. Wright, T. A schizophrenic system plot package. Computer Graphics, 9,1 (Spring 1975), 252-255.  
3. Groot, D. GPGS 16 bits device independent picture code. University of Nijmegen, Nijmegen, The Netherlands 
(October 1975).  4. Status report of the Graphic Standards Planning Committee of ACM/SIGGRAPH. Computer 
Graphics~ 11 1 3 (Fall 1977).  5. Status report of the Graphic Standards Planning Committee of ACM/SIGGRAPH. 
Computer Graphics~ 13, 3 (August 1979), Part IV.  6. Warner, J. R. Device independent intermediate display 
files. Computer Graphics, 13, 1 (March 1979), 78-109.  7. X3H33 SD-3 proposal for an ANSI X3 standards 
project for the computer graphics virtual device metafile. CBEMA, 311 First Street N.W., Washington, 
DC (November 1980).  8. Reed, T. N. The common graphics system. Los Alamos National Laboratory report 
LALP 81-67 (October 1981).  9. Reed, T. N. Experiences in the design and support of a graphics device 
driver interface. Enrographics '81 Proceedings of the International Conference and Exhibition (September 
1981), 281-289.</RefA>  43  
			
