
 A Minimal Duplex Connection Capability in the Top Three Layers of the OSl Reference Model M. F. Dolan 
 AT&#38;T Bell Laboratories Naperville, Illinois 60566 ABSTRACT A minimal duplex connection capability 
is described as the ability to open, close, abort, and transfer data through a duplex connection between 
two application processes. The goal of this paper is to describe a minimal duplex connection capability 
for the top three layers of the Open Systems Interconnection (OSI) Reference Model that will be appropriate 
for use by very small Open Systems such as home computers. Such a connection capability would allow these 
small systems to interconnect with machines of arbitrary size. The approach taken is to use only the 
parameters on service primitives that are absolutely required to accomplish this connection service. 
The protocol and services necessary to accomplish such a minimal connection are described for the application, 
presentation, and session layers of the OSI Reference Model. The existing draft proposals for services 
and protocol for the session layer provide a basis for this duplex connection service. A minor modification 
to the session draft proposals is suggested. The services for the presentation and application layer 
are defined in terms of the tentative service primitives being considered in the international standards 
efforts. The transparent initial context defined for the presentation layer is used to minimize the work 
of that layer. The benefits of this minimal duplex connection capability are then discussed from the 
point of view of very small Open Systems. 1. Introduction The purpose of this paper is to describe a 
design for a minimal duplex, i.e., two-way simultaneous (TWS), connection capability in the top three 
layers of the Open Systems Interconnection (OSI) Reference Model [I] of the International Standards Organization 
(ISO). The reason for this design is the proliferation of microcomputers, and the need to allow those 
systems to interconnect as Open Systems with each other and with larger mainframes. A typical microcomputer 
has limited resources, and cannot manage the burden of the complete protocols being developed for the 
upper layers of the OSI reference model. This paper proposes a set of minimal services for the top three 
layers of the OSI model. This set will allow two application entities on Open Systems to open a simple 
duplex connection, carry on a Permission to copy without he all or part of thin material is granted 
provided that the copies an not made or distributed mr direct commc~ial advantage, the ACM copyright 
notice and the title of the publication and i~ date appear, and noticc is given that copying is by permission 
of the Assocmtion mr Computing Machinery. To copy otherwi~, or to republish, ~quims a fcc and/or specific 
permission. &#38;#169; 1984 ACM 0-89791-136-9/84/006/0195 $00.75 conversation, and close or abort the 
connection. No checkpointing or quarantining features are available, and no syntactic transformations 
are made upon the data by presentation layer functions. A basic set of primitive operations is described 
that is considered essential to any connection capabilty. Next, the required services of the session, 
presentation, and application layers are proposed. Finally, the benefits of this minimal duplex connection 
capability are discussed, and the paper is summarized. 2. Necessary and Sufficient Primitives The next 
three sections reference or describe services that provide the abilities to open, close, transfer data 
across, and abort connections between two N-service users, where N-service is either the session service, 
the presentation service, or the common application service. It is argued that these abilities are all 
necessary for the minimal duplex connection capability, and, moreover, are sufficient for that capability. 
The ability to open a connection is necessary to establish the conversation between two N-service users. 
The 9nly alternative would be to have perpetual connections between users on computers that never failed. 
This is obviously an impractical approach to a non- perfect, evolving world. The ability to transfer 
data is required for communication to occur between end users. The ability to close a connection in a 
graceful, organized manner is necessary for a conversation to come to a halt and to allow communicating 
users to dissociate themselves without loss of any data in transit between them. The ability of a user 
to abort a connection is required to allow one user to indicate to the other that a serious situation 
exists which no longer allows the users to communicate successfully, even though the underlying connection 
is still in a valid, usable state. The ability of a service provider to abort a connection is required 
to allow the provider to indicate serious conditions which do not allow the continued successful and 
valid use of the connection. Conversely, it is argued that the abilities to open, close, use, and abort 
a connection are all that are required to provide a minimal but complete connection capability. The open 
ability allows two service users to associate themselves by means of a connection. The close and abort 
abilities allow end users to dissociate themselves. The data transfer ability allows communication between 
the two users. Any further protocol capabilities can be provided by the users themselves across the data 
streams being transferred. 3. ISO Session Services ISO has defined a set of basic connection oriented 
session services [2] and the corresponding protocol [3] that provide the ability to establish and use 
a session connection. Besides the minimal abilities to open, close, abort, and transfer data through 
a session connection, the session layer can provide duplex or half-duplex mode conversations, negotiated 
release of a connection, and synchronization of a connection. Synchronization can include the ability 
to serially organize a session connection into a set of activities. These additional services are supported 
by means of four "tokens" associated with a session connection: the data token, the release token, the 
synchronize major/activity token, and the synchronize minor token [4]. These tokens need not be used, 
that is, they need not be defined as available for a given session connection. However, if they are available, 
they are assigned to one side or the other of a connection. Based upon the existence or absence of these 
tokens, various subsets of the session services are required or not required to support particular session 
connections. ISO has defined, in addition to the full protocol, three subsets: the Basic Combined Subset, 
which makes available the data and release tokens; the Basic Synchronized Subset, which makes available 
all four tokens; and the Basic Activity Subset, which makes available the data and both synchronization 
tokens. 3.1 The Basic Combined Subset  The simplest subset, called the Basic Combined Subset, provides 
two-way simultaneous (TWS) data transfer, i.e., a duplex conversation, with no synchronization and no 
possibility for the receiver of a termination request to reject that request. Options exist for an expedited 
data subchannel, exception reporting, handling of small amounts of transparent data, and token management 
of the data and release tokens. The Basic Combined Subset defines the data and release tokens as being 
available. The use proposed here for the Basic Combined Subset, however, requires none of the available 
options or tokens. The elementary services (see Table | below) of the Basic Combined Subset are all 
that are needed to handle the minimal duplex connection capability. TABLE I. Elementary Services of 
the Basic Combined Subset Services Supporting Protocol Elements S-Connect Connect SPDU (I) Accept SPDU 
Refuse SPDU S-Release Release SPDU Disconnect SPDU S-U-Abort Abort SPDU Abort Accept SPDU (2) S-P-Abort 
Abort SPDU Abort Accept SPDU (2) S-Data Data Transfer SPDU (I) SPDU -Session Protocol Data Unit  (2) 
See the discussion below concerning the handling of Abort Accept SPDUs.  In the non-optional part of 
the Basic Combined Subset, ISO has defined a minimal set of services, that is, primitives to perform 
only the essential operations of opening, closing, aborting and transferring data across a connection. 
The protocol defined to support these services, however, can be slightly simplified. The ISO session 
protocol draft proposal [3] defines the ability of the Basic Combined Subset to handle the reception 
of an Abort Accept SPDU. It can be argued that this extra handshaking mechanism at the session layer 
provides a means of releasing reserved resources more quickly than by waiting for some time period before 
such release. However, in the case of an abort, there is little point in waiting around for a confirmation. 
 To wait for confirmation of an abort adds complexity to a protocol. In the case of small home computers, 
such protocol complexity can use valuable resources needlessly. One aspect of an abort at the session 
layer is that a parameter carried with the Abort SPDU indicates whether the underlying transport connection 
is to be released also. If the receiver of an Abort SPDU drops a transport connection when the sender 
had intended maintaining that connection, the sender will, perhaps, be forced to re-establish that transport 
connection. While this can add a time burden to a small Open System, it will add no protocol burden, 
since the session protocol must be capable of handling unexpected closure of transport connections anyway. 
 One solution to the handling of an Abort Accept SPDU for a small Open System is, contrary to the ISO 
session protocol draft proposal, to go immediately to an unconnected state when an Abort SPDU is sent. 
Trust is placed in the receiver of the Abort SPDU to either release or maintain the transport connection 
as indicated. If the Abort SPDU receiver should attempt to maintain the transport connection when the 
sender of the Abort SPDU releases it, the transport layer is responsible for resolving the conflict. 
On the  196 other hand, if the transport connection is released against the wishes of the sender of 
the Abort SPDU, it can always be re-established. Also, if the session protocol machine should be in an 
unconnected state with respect to two session service users, an incoming Abort Accept SPDU can be discarded 
with no negative consequences. Therefore, minimizing the work of the session protocol with respect to 
Abort Accept SPDUs appears to be a reasonable modification to the ISO session protocol draft proposal 
[3]. Note that this approach to handling an Abort Accept SPDU is entirely compatible with the ISO session 
protocol. Should an Open System fail to send an Abort Accept SPDU, the other Open System must be able 
to handle lack of reception of that SPDU anyway. In a similar manner, if an Open System discards an Abort 
Accept SPDU, no harm is done to the Open System which sent it. Should the transport connection be placed 
into a state different from that desired by either Open System, the ISO session protocol is capable of 
remedying that situation by re-opening or closing that transport connection. Aside from the small issue 
of the Abort Accept SPDU, the Basic Combined Subset of the ISO session service and protocol provides 
the minimal duplex connection capability at the session layer when that Subset is used without any optional 
services. The session layer Basic Combined Subset, then, becomes the foundation for consideration of 
the services and protocol required to implement a minimal duplex connection capability at the presentation 
layer. 4. The Presentation Layer  4.1 Introduction This section defines the services of the presentation 
layer which support the minimal duplex connection capability. These services build upon the minimal services 
defined for the session layer to provide a minimal duplex presentation connection. This minimal duplex 
presentation connection has the essential characteristic that no syntactic transformations are made upon 
the presentation service user data that passes through the presentation layer. The presentation layer 
services provided to the application layer are still being defined. Working group 5 of ISO TC97/SC16 
has developed a working paper [5] which presents a preliminary list of presentation service primitives. 
This list is paralleled and extended by a list of service primitives given in a report by a special rapporteurs 
committee of CCITT [6]. In the following sections, the presentation services that need to be provided 
to the application layer to support the minimal duplex connection capability will be defined. These definitions 
are made with the intention that they be, or be easily adapted to be, proper subsets of the presentation 
layer services to be defined and standardized by ISO. Protocols which support these minimal sets of services 
are described in [7]. 4.2 Minimal Presentation Capability To keep the work of the presentation l~yer 
to a true minimum for this duplex session capability, the presentation layer must not be required to 
perform any syntactic transformations on the data being passed to and from the application layer. It 
 may be argued that it is precisely the responsibility of the presentation layer to provide syntactic 
data transformations to reduce the effort required at the application layer. Nevertheless, many situations 
can be found in which this choice is perfectly acceptable. Two Open Systems may use homogeneous hardware. 
That fact may be known to both systems, thus allowing application entities to choose this reduced overhead 
session capability. Large, fully-featured mainframes may have application entities that are capable of 
the extra work required to perform such syntactic transformations as an added feature of a commercial 
service. Such an arrangement would allow smaller, limited-resource Open Systems to interconnect with 
the larger Open Systems without forcing the burden of a fully-featured presentation protocol on the 
smaller system. The work of the ISO and CCITT groups has defined the concept of a context [8]. A context 
is a common syntax understood by two presentation service users. The presentation layer will be responsible 
for performing any transformations needed to allow the two presentation users to view their connection 
in any chosen context. If the presentation layer is not to perform syntactic transformations on the 
data passing through it, it must treat such data as vectors of binary octets, i.e., transparent data. 
This treatment is the basis for the minimal duplex connection capability at the presentation layer. Two 
application entities which open a minimal duplex connection will pass vectors of binary octets to each 
other, and will be fully responsible for the interpretation of that data. Those vectors will be less 
than or equal to some maximum length. That is, two users of this minimal duplex connection capability 
at the presentation layer will open a presentation connection with the context specified to be a vector 
of binary octets. This context will be referred to in this paper as the initial transparent context, 
because that is exactly the initial default context defined for the presentation service [5] .  4.3 
Minimal Presentation Service Primitives The presentation layer presents the full capabilities of the 
network architecture to the application layer. Therefore, the presentation layer services must minimally 
include the abilities to open (including acceptance and rejection), close, and abort a connection, and 
to transfer data through the connection. All of these services map directly into corresponding session 
services in the session layerts Basic Combined Subset. As is defined in [9], services provided by a 
given layer to the layer above can be described in terms of request, indication, response, and confirmation 
primitives. Briefly, a request is made by one party which becomes the initiator. That request may be 
confirmed or unconfirmed. A confirmed request results in an indication being given to the second party, 
the accepter, which replies with a response. The response is returned to the initiator as a positive 
or negative confirmation. An unconfirmed request results only in an indication being given to the accepter. 
In a third situation, the service provider initiates an action, such as a provider abort, which results 
in indications being give% to the two service users. This method of description is used below in explaining 
these presentation services. 4.3.1 P-CONNECT The P-CONNECT service is a  197 confirmed request made 
of the presentation service provider by an application entity. As was stated above, an initial transparent 
context has been defined which allows communication of user data without syntactic transformations. 
Therefore, there is no need for a parameter to specify the initial context for the presentation connection. 
Once a minimal duplex connection is made, the presentation layer can proceed to transfer vectors of binary 
octets, i.e., buffers of binary data, because the transparent context is in existence by default. The 
parameters required with the P-CONNECT request - are a connection identifier, the identities of the presentation 
service users, and specification of the duplex mode. Note that a connection identifier is required to 
be supplied to the session service. However, since presentation connections are in a one-to-one correspondence 
with their supporting session connections, the connection identifier will only be required on the P-CONNECT 
request. The indication of the P-CONNECT request is given to the application entity named as the accepter 
in the request. Along with the connect request indication are passed the identification c the source 
application entity, the connection identifier and a parameter specifying duplex mode. The response to 
the P-CONNECT indication returns either acceptance or rejection of the connection. The connection identifier 
supplied with the original P-CONNECT request is used to identify the connection response. The positive 
or negative response is conveyed to the initiator as a positive or negative confirmation of the original 
P-CONNECT request. 4.3.2 P-TRANSFER Once a minimal connection has been established, the presentation 
service primitive, P-TRANSFER, provides a means for transferring vectors of binary octets between the 
application entities. Since the connection is duplex, both application entities can send messages of 
binary octets simultaneously. Asdata arrives through the session service access point for the particular 
session connection, the presentation service delivers that data intact to the application entity through 
the presentation service access point as a P-TRANSFER indication. 4.3.3 P-RELEASE After the work of the 
two application entities is completed, either of the two application entities can issue a P-RELEASE request. 
The P-RELEASE primitive is a confirmed request. Its use results in an indication being given to the other 
application entity of the desire of its partner to gracefully terminate the connection. The release request 
carries optional presentation service user data as a parameter. The receiver of a P-RELEASE indication 
must reply affirmatively to that request if no potential loss of data is to occur. The P-RELEASE positive 
response results in a positive confirmation being given to the P-RELEASE initiator and in the graceful 
termination of the connection with no loss of data. However, complete loss of all state, knowledge, and 
memory of that connection does occur within the presentation layer. That is, the presentation layer totally 
discards all state information on the connection, and forgets the connection with no means of retrieval. 
The only way in which an application entity can show disapproval of the intention of its partner to release 
a connection is to issue a P-U-ABORT (user abort) request. 4.3.4 P-U-ABORT The P-U-ABORT primitive is 
an unconfirmed request that causes an indication to be sent to the partner application, and immediate 
termination of the con~ectlon with potential loss of data. The P-U-ABORT primitive can be issued at any 
point within the life of a presentation connection. It is even possible that it could be issued in response 
to a P-CONNECT request. A P-U- ABORT request carries optional presentation service user data as a parameter. 
 4.3.5 P-P-ABORT The P-P-ABORT (provider abort) primitive is the means by which the presentation layer 
notifies the application entity that an unrecoverable error has occurred which prohibits the successful 
use of the presentation connection. The cause of the error can be within or below the presentation layer, 
or at the interface between the application layer and the presentation layer, and  5. The Application 
Layer  the reason may or may not be conveyed as a parameter of the abort indication to the application 
entity. The structure of the application layer of the OSI Reference Model is becoming clearer with the 
report of the special rapporteurs committee of CCITT and with the Japanese comments on the application 
layer structure [10] defined in part in [11]. A set of common application services will provide an interface 
to the presentation layer. Specific application services will reside on top of the common application 
services. Application processes will either access the specific application services and thus access 
the common application services indirectly, or will directly access the common applications services. 
The terminology in current use to describe an OSI connection between two application processes is "application-association." 
The application- association requirements for the minimal duplex connection capability described in this 
paper can all be satisfied by the con~non application services which are tentatively defined in the special 
rapporteurs" report . A question can be raised about the need for a set of application services in the 
case of such a minimal duplex connection. The answer must be seen in the context of the overall goal 
of Open Systems Interconnection, i.e., the interconnection of systems to accomplish the arbitrary goals 
of application processes on those systems. Because those application goals are arbitrary, the sets of 
common application services and specific application services must be rich in capabilities. A limited, 
small Open System may not have the need for such a rich set of services, but it does have the need to 
interconnect with any other Open System. The system it wishes to interconnect with may have a need for 
great richness in the application layer services. Therefore, all Open Systems must be able to handle 
at least a minimal set of application layer functions. It is claimed that the minimal duplex connection 
capability is that minimal set of functions. As was argued earlier in this paper, the abilities to open, 
close, and abort a connection and to transfer data through that connection form a necessary and sufficient 
set of connection services. The application layer services required to support those functions map directly 
onto the presentation services supporting the corresponding functions at the presentation layer.  5.1 
Col~on Application Layer Services For A Minimal Connection  The common application layer service primitives 
required to support a minimal duplex connection capability are given in table 2. TABLE 2. Elementary 
Services of the Common Application Services Services Supporting Protocol Elements A-ASSOCIATE Associate 
APDU (1) Accept APDU Refuse APDU A-RELEASE Release APDU Disconnect APDU A-U-ABORT A-U-Abort APDU A-P-ABORT 
A-P-Abort APDU A-TRANSFER Data Transfer APDU (I) APDU - Application Protocol Data Unit These services 
are identical in function to those described above for the presentation layer. The application process, 
which is the common application services user, accesses the common application services, just as the 
common application services are the presentation service user and access the presentation service. The 
only parameters absolutely required from an application process to open a connection are the identities 
of the initiator and intended accepter application processes and a connection identifier. Duplex mode 
and a maximum message size can be set by default. The parameters that the common application services 
must provide on a P-CONNECT request are simply the identities of the end points for the presentation 
connection and a connection identifier. Therefore, the amount of parameter handling is kept to a minimum 
for the application layer also. While the minimal duplex connection capability resulting from such minimal 
parameter handling is all that is required to allow two application processes to become associated, i.e., 
connected, additional services are not precluded. Such services might include initiator and accepter 
security checking or accounting functions. These services could be added to the minimal duplex connection 
capability as optional parameters on the A-ASSOCIATE request. However, the minimal duplex connection 
capability does not require them. Should an Open System attempt to establish an application-association 
with another Open System without providing sufficient authentication or accounting information, it is 
within the range of the minimal duplex connection capability and within the rights of the accepter Open 
System common application services and application process to respond negatively to the A-ASSOCIATE indication. 
Protocols which support these minimal services are described in [7]. 6. Benefits of the Minimal Duplex 
Connection Capability It has been claimed that the minimal duplex connection capability provides the 
smallest set of services possible to support a duplex connection at the top three layers of the OSI Reference 
Model. Given this capability as a baseline, applications can be developed for small Open Systems that 
will be able to converse with their counterpart applications on any other Open System, The presentation 
layer responsibilities of syntactic transformation are assumed by the application process, as are the 
session layer responsibilities of conversation control. Such acceptance of additional responsibilities 
may be entirely reasonable for many applications. The applications may be inherently duplex, or the work 
of creating a half-duplex conversation may conveniently fall on logical transaction boundaries with little 
or no extra effort on the part of the application processes. Syntactic transformations may be entirely 
unnecessary in the case of homogeneous Open Systems, as may often be the case when a small home computer 
wishes to interconnect with another small home computer. Or, an application process in a large service 
bureau Open System may be willing to perform extra syntactic transformation work for a fee to ease the 
protocol burden on small Open Systems seeking access to its services. As an example, a file transfer 
application could handle sequential files exclusively, such as common text files. Special characters 
in the transferred data stream could identify record boundaries. An initial record of known content could 
be used to determine the incoming file's character set for any necessary character set translation at 
the receiving application. While such an application would not be general, the handling of sequential 
text files would certainly form the basis for many services such as electronic mail, source code distribution, 
etc. The result of this minimal capability is to allow all vendors of hardware and software oriented 
to Open Systems applications to establish a common minimal connection capability as a baseline for all 
such products on an international basis. It also allows such vendors to use that baseline as a guide 
in developing small computer systems targeted toward universal connectability. 7. S,,mm~ry A minimal 
session c~pability has been defined for the top three layers of the OSI reference model. The services 
and protocol of the session layer are the non-optional portions of the Basic Combined Subset of the ISO 
session service draft proposal [2]. The primary feature of the presentation layer service is that vectors 
of binary octets are passed unmodified between presentation service users. No syntactic transformations 
take place. Common application services were defined to support the minimal duplex connection capability 
at the application layer. These common application services were shown to map closely into those of the 
presentation layer described in the paper. Finally, some of the benefits of the minimal duplex connection 
capability were discussed. The thrust of this capability is to provide a simple, low overhead means for 
Open Systems of arbitrary size to interconnect, particularly Open Systems of limited capabilities such 
as microcomputers.  References <RefA>1. ISO/TC97/SC16, Information Processin&#38; -~)en Systems Interconnection 
- Basic Reference Model, ISO International Standard IS 7498, 1983. 2. ISO/TC97/SCI6/WG6, "Basic Connection 
Oriented Session Service Definition", Draft Propo~al ISO/DP 8326, March, 1983. 3. ISO/TC97/SCI6/NG6, 
"Basic Connection Oriented Session Protocol Specification", Draft Propo:Jal ISO/DP 8327, March, 1983. 
 4. Young, C.E., "A Standard Session Protocol for Open Systems Interconnection (OSI)", Proceedings of 
the National Computer Conference, 1983, pp. 617-622.  5. ISO/TC97/SCI6/NG5, "Draft Connection Oriented 
Presentation Service Definition", Document ISO/TC97/SCI6 NIl61, June, 1982.  6. CCITT Study Group VII, 
"Study Group VII - Report No. R 19(C) Annex 8", International Telegraph and Telephone Consultative Committee 
(CCITT), February, 1983. 7. Dolan, M.F., Minimal Communication Capabilities in the Top Three Layers 
of the Open Systems Interconnection Reference Model, Doctoral Thesis, Illinois Institute of Technology, 
December, 1983. 8. Rauch-Nindin, W. B., "Upper-Level Network Protocols", Electronic Design, March 3, 
1983, pp.180-194. 9. ISO/TC97/SC16/WG1, "Data Processing - Open Systems Interconnection -Service Conventions", 
 Document ISO/TC97/SC16 N897, January, 1982. 10. ISO/TC97/SC16/N1353, The Structure of the Application 
Layer Service (Source: Japan), December 15, 1982. 11. ISO/TC97/SCI6/N1314, Common Application Layer 
Service Definition (Source: USA), December, 1982</RefA>. 
			
