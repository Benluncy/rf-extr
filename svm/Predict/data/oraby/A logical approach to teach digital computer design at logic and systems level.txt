
 A LOGICAL APPROACH TO TEACH DIGITAL COMPUTER DESIGN AT LOGIC AND SYSTEMS LEVEL Sarma R. Vishnubhotla* 
ABSTRACT Design courses in Computer Systems Design are being taught in many undergraduate programs both 
for Computer Science and Electrical Engineering students. A design project is explained in this paper 
to give all the information to the students regarding the important concepts in both logic and systems 
level. The computer has sixteen instructions, two K memory and a single index register. This project 
can also be en- larged by introducing many extra hardware features. INTRODUCTION Many schools that offer 
Computer Science and/or Electrical Engineering offer one or more courses in digital computer design. 
A number of textbooks (l, 2, 3, 4, 5, 6) are available in this field covering circuit design, logic design 
and systems design. Circuit design is usually covered in a separate course completely dealing with the 
design of transistor circuits and etc. We are presently concerned with the courses that teach logic and 
systems level design. The author tried to cover the complete design of a small computer at logic and 
systems level in a single semester, besides covering the basic material such as Boolean Algebra, simplification, 
flip-flops, registers and sequential circuits. The students sometimes complained that their background 
is inadequate, this being the first course in hardware design for them, whose only prerequisite is a 
course in assembler language. This year the Computer Science area in this University decided to divide 
it into two courses, the first one dealing with purely logic circuit design (including Boolean Algebra, 
flip-flops, registers, basics of sequential circuits and some simpler digital circuit design), and the 
second course dealing with the project which is being presented here. The project was chosen to deal 
with every important concept in the design, and to be simple enough to cover in a semester. I. THE PROJECT 
DESCRIPTION The following project is assigned to the students taking t~e second course in hardware. Basic 
knowledge in the design of logic circuits, shift registers, counters and in sequential circuits is assumed. 
The project deals with the design of a laboratory computer, to teach machine language programming to 
the beginners. The computer specifications are as follows: Memory Size: 2K Word Length: 16 bits Single 
Operand: II bits Index Registers: l Op. Code: 4 bits *The author is with the Computer Science area faculty 
in the Department of Mathematics at the Central Michigan University, Mt. Pleasant, MI 48858 13 1S 12 
11 lO 0 IOp. Code [XR[ OPERAND Typical instruction The eleventh bit(XR) is the index register bit. Indexing 
is indicated by a 1 value in this bit position. The following are the machine instructions labeled from 
I0 to It,. The Op. Code of I. is the four bit binary equiva-lent of the index j. MACHINE INSTRUCTIONS 
I o : ADD X (Acc) + (X) รท (Acc) Ii : SUB X (Acc) -(X) * (Acc) 12 : LDAC X {X) ~ (Acc) 13 : STAC X (Acc) 
* (X)  I~ : JUMP X Jump to location X Is : JPOS X Jump to X if (Acc) > 0 I6 : JNEG X Jump to X if (Ace) 
< 0 I 7 : JZER X Jump to X if (Acc) : 0 1 B : LDXA (XR) ~ (Acc) o--l o 19 : LDAX [Acc)o--to + (XR) llo: 
LDX X ix) o- l ~ " (XR) Ill: ST)( X (XR) + (X)o~0 I12: JXZR X Jump to X if c(XR) = 0 I13: SRT X Shift 
(Acc) right by X positions li~: INC2( X (XR) + (X) + (XR) lls: HALT Halt the execution. 2. THE INTERNAL 
ORGANIZATION REGISTER &#38; COUNTERS MBR~ Memory Buffer Register (16 bits) The organization of the project 
computer is PC: Program Counter (ll bits) given in Figure I. F and E are the fetch and MAR: Memory Address 
Register (ll bits) execute flip-flops (level-output) indicating XR: Index Register (ll bits) whether 
the computer is currently in fetch General Register (16 bits) or execute cycles respectively. Initially 
F is B: IR: Instruction Register (4 bits) set by START button. SR is the shift-right ACC: Accumulator 
(16 bits) flip-flop (level-output) which is turned before SC: Step-Down Counter (for SRT Instruction) 
the shifting starts. This is reset when there (4 bits) is a value one in the step-down counter (SC). 
T-Generator generates pulses T n, T~, T 2, T~ Besides the above registers there are two repeatedly. The 
circuit consigts 6f a modulo flip-flops, E and F, to indicate execute four counter with its outputs fed 
to a decoder. and fetch cycles at anytime, R and W flip- ~R~ T l, T^, repeatedly. TL, T,, T,, T~ are 
flops to initiate reading and writing outputs ~ the decoder. Ynit~all# th~s is operations plan and into 
the core memory, and enabled by the START button. It can be an SR flip-flop to indicate shifting phase 
disabled either by the HALT micro command or which excludes both fetch and execute phases. by the INTERRUPT 
button from console. The modulo The computer has a read-only memory to store 4 counter in T-generator 
is cleared through the the micro instructions and a time pulse generator CLEAR terminal. Cp is the clock 
pulse which synchronizes all operations. The double arrows generating pulses T O , T l, T 2, and T 3 
in indicate the data transfer. Single arrows are sequence. control signals. The behavior of the internal 
gates during the various data transfers is described below. 2.1. FETCH CYCLE This cycle consists of 
the various operations that should be performed before the execution starts. The six memory reference 
instruction; ADD, SUB, LDAC, STAC, LDX and STX have separate fetch cycles. All other instructions have 
only fetch cycle (in other words execution for these in- structions is completed within the four T pulses 
of the fetch cycle). Initially the fetch cycle is started by setting the F flip-flop by the START button: 
The START button also initiates the R d flip-flop, puts the memory address where the execution should 
begin, in both PC and MAR simultaneously. The instruction is fetched from the memory into MBR, the operation 
code goes into instruction register (IR), at the same time the operand is indexed either through the 
contents of Index Register (XR) or through a zero mask depending on whether the instruction is indexed 
or not respectively, as indicated by the index bit in MBR. At the end of the fetch cycle, the effective 
operand goes into MAR for the six memory reference instruction. Individual micro sequences constituting 
the machine level instructions are described subsequently. 2.2 EXECUTE CYCLE For ADD and SUB instruction, 
(Acc) and (MBR) are operated upon, leaving the result in Acc. Negative numbers are represented in two's 
complement system. For the LDAC and STAC instruction, the data is transferred from MBR to Acc and vice 
versa respectively. Similarly for LDX and STX the data is transferred from the 0 to lO bits of MBR to 
XR and vice versa respectively. Similarly for LDX and STX the data is transferred from the 0 to lO bits 
of MBR to XR and vice versa respectively. For all transfer control instructions, the effective operand 
is transferred to the Pc if the transfer is successful. The conditions of transfer are represented as 
hard- ware conditions and they serve as inputs to the read only memory (ROM). While executing INCX instruction, 
FA Unit is used once to find the effective operand and again to add the effective operand to (XR). The 
SRT instruction is the most interesting of all. While executing SRT, only the bits 0 to 3 are transferred 
to SC provided there is no binary l in any higher significant bits of the operand which is in MBR. Otherwise 
the Acc is simply cleared and the SR is not set. When shifting is being performed the SR flip-flop remains 
in the set state until the SC contents reach the last but one count. At this time, the last count command 
of SC, reset command for SR and clear command for T-Generator are all given simulta- neously. 2.3. THE 
READ ONLY MEMORY (ROM) Each machine level instruction is executed by executing the micro ins~uction sequence 
equiv- alent to the former. The sequencing is conditioned by the T-pulses. There are two different approaches 
to sequence the micro instruction. We are using the hardware approach in which each micro instruction 
is expressed as a Boolean function of the values of I O, I l, ..., I~, T n, T l, T~, T R, E, F, Acct,, 
Z, W. A switching m~trix would Togically suffice to implement this. In complete contrast to the hardware 
implementation, there is the microprogramming approach where the machine level instructions are executed 
by executing the microprogram stored in the micro memory. We are not using micro programming approach 
in this project. 3. THE DESIGN The project work is divided into the following sections. CONSOLE DESIGN 
This deals with the various switches and lights on the console and the internal connections. These switches 
and lights serve to load data into the computer memory and to see the computed and/ or stored results. 
As the present machine has no read or write instructions, these switches and lights are the only means 
of communication with the computer. CONTROL UNIT In this section we formulate the input equations for 
F, E, SR flip-flops, the SC counter, IR and the op. code decoder. Also the repertoire of micro instruction, 
(i l, ip ..... i~) is established and each is expressed as ~ function of its independent control values 
which decide the micro instruction. MEMORY UNIT This section deals with the 2k random access core memory, 
ROM, and the input equations for the Rd and W flip-flops, Pc, MBR and MAR. ARITHMATIC UNIT This section 
includes the design of a 16 bit full-adder unit design, input equations of Acc, B- register, XR and details 
of how the two's comple- ment addition and subtraction are carried out. 4.1. CONSOLE DESIGN This computer 
does not have explicit input/output instruction. Therefore, all communications with the computer must 
be only through switches (for inputting data and instructions) and lights (for outputting computed results) 
on the console. Figure 2 gives the outlay of the console. INPUT SWITCHES When data or instructions are 
being loaded into the memory, the address of the memory location is set with the eleven switches of Input 
Address Switches (IAS). The data or instruction (which is a 16 bit binary number) is set with the sixteen 
Input Content Switches (ICS). Now if the LOAD button is pushed, then the sixteen bit number in ICS will 
go into the location whose address is in IAS. The LOAD button sets a pulse-output flip-flop, where the 
pulse width is decided by the time required for the transfer to take place. STARTING THE EXECUTION The 
memory location where the execution is to start, is set with the Start Address Switches (SAS). Pushing 
the START button will now set a pulse-output flip-flop which will initiate various actions necessary. 
OUTPUT SWITCHES The eleven output Address Switches (OAS) serve a similar purpose as IAS. When the con-tents 
of a memory location are to be seen, its address is set in the OAS and the OUTPUT button is pushed. This 
will set a pulse-output flip-flop which in turn will bring the contents of this memory location into 
the sixteen output content lights on the console. Note that the ON and OFF condition of each light represents 
a binary l and 0 respectively. The Accumulator outputs are also connected to the accumulator lights, 
so that we can see the number in accumulator anytime. INPUT EQUATIONS Output Content Lights (OCL) and 
Accumulator Lights (Acc L) are the only items on the console for which the input equations are required. 
The input equations are as follows: Acc L i = Acc i . Cp OCL i = MBR i . OUTPUT . CP INTERRUPT This button 
also sets a pulse-output flip-flop which in turn halts the execution of the program abruptly.  3.2. 
CONTROL UNIT The purpose of the control unit is to enable various data transfers, set and reset various 
flip-flops, initiate and/or terminate various counters that are necessary in order to com-pletely execute 
a machine level instruction. In other words, each I. consists of an ordered sequence of actions whose 
successful execution would amount to the execution of I.. Each action in this sequence is called ~ micro 
instruction (labeled i~, i 2 .... ). Note that a micro instruction may have more than one specific action 
embedded, provided these actions could be activated simultaneously which depends on the amount of parallelism 
in the hardware. Once each I~ is expressed as a sequence of some micro instructions, it can be seen clearly 
how various data transfers are enabled by various micro instructions on the appropriate T-pulse. MICRO 
INSTRUCTIONS The following are the micro instructions labeled from i 1 to i21 " = Rd = l, (#MAR) - (MBR) 
i 1 i 2 = (MBR) - (IR), Rd = O, ADDI, (XR) + (MBR) 0 -lO (MBR)o -lO op code 13 = (Pc) + l -(Pc), (MBR) 
0 _ IO -(MAR) =E=I;F=O14 = Rd = O, (MBR) - (B)15 = ADD2, (B) + (Acc) -(Acc)16 : SUB, -(B) + (Acc) -(Acc)17 
= (Pc) -(MAR), E + O, F = l18 : (B) -(Acc)19 I l O: (B)o -10 (XR) 11l = (Acc -(MBR), W = l =W=O I12 
113 = (XR - (MBR) 0 _ lO' W= l = (MBR)o - lO -(Pc)14 = (Pc) + l -(Pc) 15 = (Pc) + 1 -(Pc), (XR) -(Acc) 
0 _ lO16 = (Pc) + l -(Pc), (Acc) 0 _ lO -(XR)17 = (Pc) + l -(Pc), ADD3, (XR) + (MBR)o_IO- (XR) 18 + (Pc) 
+ l -(Pc), (MBR) 0 . 3 (SC)19 = F = O, SR = l20 = HALTi21 Each of the micro instruction (i I to i~i) 
is tied to a T-pulse. There are three addition commands ADDI, ADD2, ADD3 and one SUB command for the 
FA. ADDI command is for indexing. ADD2 command is the command to add (Acc) and (b) to leave the result 
in Acc. ADD3 command is to add the contents of XR to the effective operand of the INCX instruction. The 
SUB command is for the subtraction operation. This is implemented by adding -(B) to (Acc) where -(b) 
is the two's complement of (B). -(B) is obtained by feeling each bit of (B) through an inverter and simul- 
taneously setting the input carry value of the least significant full adder bit to I. The SRT instruction 
requires special attention. After decoding this instruction, the four least significant bits of the effectiVe 
operand (which is in MBR by now) are fed to the SC provided the remaining higher bits in the effective 
operand are all zero. This latter condition, when true, gives a value l to variable V. The complement 
of V when l in value, will short cirucit all the shifting and clears the Acc. When V is equal to l on 
the other hand, the T-generator is cut-off, F is reset to O, SR is set to l and SC starts counting down. 
At the last but one count, again through hardware conditions. T-generator is cleared and enabled, F is 
set to l and SR 'is reset to O. It is important to remember that the control unit is frozen while the 
shifting occurs and the SR flip-flop controls the shifts along withCp. MICRO INSTRUCTION SEQUENCES Using 
the micro instructions described, each machine level instruction I. is represented as a sequence of either 
four o~ eight micro instruc-tions, each tied to a T-pulse. The micro sequences are as follows: I 0 = 
(i l, i 2, i 3, i4; i l, i 5, i 6, i 8) I l = (i l, 12 , i 3, i4; i l, i 5, i 7, i 8) 12 = (il' 2' i3' 
i4; il' i5' i9' i8) 1 = (il, 2)i3' i4; ill' il2'-' i8) 3 14 = (if' 2' il4' i8) 15 : (i 1 2' fl' i8) 
 16 : (i l 2' f2' i8) 17 : (i l 2' f3' i8)  18 = (i l 2' if6, i8) Ig : (i l i 2 , il7, 18) llo: (i 
l i 2 , i 3, 14; i l, i 5, ilO, i 8) Ill = (1 l 12 , i 3, i4; il3 ~ il2, -, i 8) Il2 = (l l 12 , f4' 
i8) ll3 = (1 l 12 , ilg, i20) ll4: (I l 12 , fiB' i8) ll5 = (1 l 12 , i21, i 8) fl : A cls. il4 + ACCl5 
 il5 f2 = ACCl5 il4 + ~15 " il5 : Z . i +7.i f3 14 15 f4 = W . i14 + ~ . i15 where Z = 1 whenever 
(Acc) = 0 and W = 1 whenever (XR) = 0 MICRO INSTRUCTIONS AS FUNCTIONS The design of the ROM switching 
matrix will be completed if each micro instruction is represented as a Boolean function of I n , 11 ..... 
Ii~, T n, T , Tg, T 3, E, F, Z, W val~es,'as preseh~ed Tn figur~ I. i I = FT 0 + ETo(I 0 + I 1 + 12 + 
lio) FT 12= l 13= FT 2 (I 0 + I l + 12 + 13 + llo + Ill) i4= FT 3 (I 0 4 I l + 12 + 13 + llo + Ill) 
1 5 = ET l (I 0 + I 1 + 12 + llo) 16 = ET 1 I 0 17 = ET 2 I 1 18= ET3(I 0 + I l + 12 + 13 + I!o + Ill) 
+ FT 3 (I 4 + 15 + 16 + 17 + 18 + 19 + ll2 + ll4 + I15 ) 19 = ET 2 12 = ET 2 Ilo I0 = ET 0 . 13 II 
= ETI(I 3 + ll4) 12 = ET 0 . Ill 13 = F . To(I 4 + A-C-Cl5 . 15 + ACCl5 . 16 + Z . 14 17 + ~ . I12) 
il5 = F . To(Accl 15 + A-~'CI5 16 + ~ . 17 + ~-I~2) ,5" il6 = F . T 2 . 18 il7 --F. T 2 . 19 il8 = F 
. T 2 . ll4 il9 = F . T 2 . ll3 i20 = F . T 3 . ll3 i21 = F . T 2 . ll5 INPUT EQUATIONS All the flip-flops 
in the design are assumed to be set-reset type except for Pc and SC, for which the flip-flops are assumed 
to be set- reset with a toggle terminal T. Let P be equal to l when SC has a value I. FETCH F/F: S = 
(START + P . SR + i 8) Cp R = (i20 + i 4) Cp EXECUTE F/F: S = i 4 . Cp R = i 8 . Cp SHIFT RIGHT F/F: 
S = V . i20 . Cp R = P . SR . Cp Here it is assumed that V = 0 whenever the effective operand is greater 
than fifteen for the SRT instruction Also during countdown, when the SR flip-flop is being reset, the 
down- going edge is assumed to CLEAR the T-generator. T-GENERATOR ENABLE = (START + P . SR) Cp CLEAR=DISABLE-( 
_ .SRi~OsTAR~I+ cplNTERRUPT). Cp -p(V i INSTRUCTION REGISTER (IR) Si = MBRi + 12 " i2 " Cp R. =S. 1 1 
OPERATION DECODER This is a standard combinational circuit with four inputs and sixteen outputs, each 
output wire corresponding to one min term. Note that only one output is high (a value I) at any time. 
SHIFT COUNTER (SC) This is a step-down counter verses a register Each flip-flop has S, R, T, terminals. 
T terminals serve to count down and toggl is successful only on a rising edge. S and R terminals receive 
the values from the (MBR)o_3. S i = MBR . i19 . Cp R. =S. 1 1 3.3 MEMORY UNIT This computer has a 2K 
random access core memory to store machine level instructions and data, and an ROM to realize the micro 
instructions THE CORE MEMORY This is the magnetic core memory with 2048 memory words, each sixteen bits 
long. To select a memory location, the address is placed in the MAR. The eleven bits of MAR can be divided 
into six x-lines and five y-lines. They serve as inputs to a six to sixty four and five to a thirty two 
decoders respectively. Once the memory location is selected, the contents of MBR are transferred into 
this location or vice versa depending on whether W or RD flip-flop is on respectively. THE PROGRAM COUNTER 
(c) This is a standard modulo 2" counter, which must also serve as a register. We shall assume that this 
is made up of eleven set-reset flip-flops with a terminal for toggle (T). The input equations for the 
first flip-flop are as follows: S O = (SAS 0 . START + MBR 0 . i14) . Cp R 0 = T 0 T O = (I 3 +i15 + 
i16 + i17 + i18 + i19) . Cp THE MEMORY ADDRESS REGISTER This is a eleven flip-flop register'. The input 
equations are as follows: S i = (Pc i . i 8 + SOS i . START + MBR i , i 3 + IAS i . LOAD + OAS i . OUTPUT) 
. Cp THE MEMORY BUFFER REGISTER (MBR) This is a sixteen bit flip-flop. The input equations are as follows: 
For 0 ~ i ~ I0 S i = (s i i 2 + Acc i . ill + XR i . i13 + ICS i LOAD + (#MAR) i . (OUTPUT + il)) . 
Cp R. = ~. 1 1 For II~i~15 the equations are as follows: = (s t . i + Acc: . i + ICS.. LOAD + Si (#~aR)i2 
(OUTPUT +IIi)) . ~p Ri = Si READ F/F (Rd) The following are the input equations for the READ flip-flop. 
S i = (i I + OUTPUT) . Cp R i : (i 2 + i 5) . Cp WRITE F/F (W) The following are the input equations 
of the WRITE Flip-flop. S i = (LOAD + ill + i13) . Cp R i = i12 . Cp 3.4. ARITHMETIC UNIT This computer 
has a sixteen bits long full adder unti which is used to perform all additions and the subtr~ction. The 
FA unit will have two operands (X) and (Y) and a least significant carry C_I " FULL ADDER (FA) The following 
are the input equations of the FA unit. S O to S15 are the sum outputs of the FA unit. X i = (Acc i (i 
6 + i 7) + XR i i18 + MBRII XR i i 2) . Cp Yi = (Bi i6 + Bi " i7 + MBRi " (i2 + i18)) Cp C_I = i 7 
. Cp INDEX REGISTER (XR) The following are the input equations of the index register. 'S. = . + Acc 
i . + s Cp 1 (Bi ilO i17 i " i18) " Ri = ~i ACCUMLILATOR The following are the input equations of the 
accumulator. For 0 ~ i z 14 S i = (Acci+ 1 . SR + s i . (i 6 + i7) +B i . i 9 + XR i . i16) . Cp Ri = 
Si; CLEAR = V . Cp . i19 For the fifteenth bit however, the input equations have to take the sign bit 
into account. There-fore, S15 : (B i i 9 + (s15 (XI50YI5) + XI5 V15 ) . (i 6 + i7)) . Cp RI5 = SI5 
B-REGISTER The following are the input equations of the B-register. S i = (MBR i , ]51 . Cp Ri = S'i 
CO~iCLUSlON This completes the logic design of the project computer. There are some practical points 
which the instructor must emphasize to the students. The propagation time of the carry in the FA unit 
is assumed to be less than or equal to one T-pulse width. Also, for successful transition, it is necessary 
that the input values are already present at the flip-flop inputs by the time Cp arrives. Input/output 
instructions are omitted because it would require a separate design of the interface units. Their addition 
makes the pro-ject more interesting. Shift right, and rotations in both directions can be implemented 
without much extra hardware. Multiplication/ division and floating point hardware units will make it 
a good project, previded the students already have a strong background in logic design. BIBLIOGRAPHY 
<RefA>I. Thomas C. Bartee, DIGITAL COMPUTER FUNDAMENTALS, Third Edition, McGraw-Hill Book Co. 2. Yohan Chu, 
DIGITAL COMPUTER DESIGN FUNDAMENTALS, McGraw-Hill Book Co., 1962. 3. Paul Siegel, UNDERSTANDING DIGITAL 
COMPUTERS, second edition, John Wiley and Sons. 4. Herbert Hellerman~ DIGITAL COMPUTER SYSTEM PRINCIPLES, 
McGraw-Hill Book Co., 1967. 5. Tylor L. Booth, DIGITAL NETWORKS AND COMPUTER SYSTEMS, John Wiley and 
Sons, 1971. 6. C. G. Bell, J. Grason, and A. Newell, DESIGNING COMPUTERS AND DIGITAL SYSTEMS, Digital 
Press, 1972.  </RefA>0 i ~ยฐ~ ~~ ~i ~ I-4 N ~q ! O0 ! U | I JL U D N ~ ~D II Oq~ O c~ ~J ~v4 IJ g ~J U Cl 
GJ O O .r4 ~J cO M t4~t r~ ~0 ~J C~ GJ ~4 ~D 20 POWER LOAD START OUTPUT INTERRUPT IAS11 I< < ....... 
l <I SAS l l < < ICS16 ........ < { .. ACCUMULATOR LIGHTS I00 ............ 0 I<< OAS I i ....... <l OUTPUT 
CONTENT I00 . . . . . . . . LIGHTS [] Figure 2. The Console 21     
			
