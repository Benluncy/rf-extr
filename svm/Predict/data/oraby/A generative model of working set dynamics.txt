
 A Generative Model of Working Set Dynamics* Domon~c s Ferret/ Computer Science Division. EECS Department 
and the Electronics Research Laboratory University of California. Berkeley ABSTRACT An algorithm for 
generating a page refer- ence string which exhibits a given working set size behavior in the time domain 
is presented, and the possible applications of such a string are discussed. The correctness of the algo-rithm 
is proved, and its computational com-plexity found to be linear in the length of the string. A program 
implementing the algorithm, which is performed in one pass and requires very little space, is briefly 
described, and some experimental results are given. 1. The Problem The referencing behavior of programs 
has attracted flue attention of a number of researchers since the invention of virtual memory. This interest 
has been due to the strong dependence of a virtual memory system's performance on the behaviors of the 
programs running on it. Several models of program behavior have been proposed, constructed, and used 
in virtual memory stu- dies [I]. A useful classification of these models is that which distinguishes 
the generative models from the non- generative ones: This distinction refers to the address trace, or 
reference string, produced by the exeeutinn of a program with a given set of input data values. The reference 
string is flue most complete characterization of a program's referencing behavior with those input data. 
Since in a virtual memory environment informa- tion is moved between levels of the memory hierarchy in 
pages or segments, the reference strings of interest are page or segment traces, and in this section 
the term "reference string" shall always designate a string of either type. A generab~e model is a model 
capable of generating a reference string which can be used in trace-driven simulations of" memory policies 
to evaluate one or several such policies, or to assess the *~ work reported here has been m~pported 
in pert by the National ScienceFoundationunder Grant MCSVe-F.A61&#38; performance of the corresponding 
program in a given virtual memory environment. A non-generative model. on the other hand, is applicable 
only in analytic studies or in simulators not driven by a trace. Note that some of flue simplest and 
most popular generative models, like the Independent Reference Model (IRM) and the Simple LRU Stack Model 
(SLRUM), have been applied also in a number of analytic studies (see for instance [2]). Exam- ples of 
non-generative models are the various analytic approximations to the lifetime curve of a program [3]; 
however, this curve is also the basis of the generative SLRUM. The importance of generative models 
is due (a) to the lack of viable alternatives to trace-driven simulation in most investigations of virtual 
memory problems;  (b) to the flexibility of such models, which makes their use necessary whenever program 
behavior is to be modifiable in a controlled way by the experimenter;  and  (c) to their being a substantially 
less expensive way to procure traces than any of the known methods for tracing real programs [4].  
Each of the several generative models which have been proposed and investigated tries to reproduce certain 
aspects of program referencing behavior. For example, the IRM produces strings which have the same probabiLi- 
ties of page or segment reference as the (real or ficti- tious) program to be modeled; the strings generated 
by the SLRUM are characterized by the same LRU stack dis- tanee probabilities as the modeled program; 
and so on. However, these aspects, as the two examples just menÂ° tioned show, are usually not very strictly 
related to the dynamic behavior of a program, widch has been recog- nized as flue dominant factor of 
a program's perfor- mance in a virtual memory syster~L The result of this divergence between the actual 
and the ideal objectives of a modeling effort is that the dynamics of the model is in most cases radically 
different from the dynamics of real programs. This difference often has an adverse effect on flue model's 
accuracy, that is, on its ability to produce realistic values of the performance indices in a variety 
of situations. Permission to copy without fee all or part of this material is granted provided that 
the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and 
the title of the publication and its date appear, and notice is given that copying is by permission ofthe 
Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific 
permission. o1~I ACM..0:89791-051-6 /81/~09/0052 $00.75 Some more sophisticated generative models have 
been proposed to reproduce the dynamics of referencing patterns. For example, a two-level model has been 
intro- duced in which the referencing behavior within a locality is produced by an SLRUM, and the model 
moves from locality to locality according to a Marker process whose states are flue various localities 
of flue program (see for instance [5]). The two-level approach combines within flue same model the SLRUM, 
which is capable of repro- dueing the salient aspects of behavior within a locality  52 but cannot 
perform abrupt transitions (where most of the faulting seems to take place during the execution of most 
real programs), and a Markov model of locality transitions. Unfortunately, the two-level model and its 
variations have the following drawbacks: (a) they are cumbersome and require a large amount of information 
to be specified in all the non-trivial cases, e.g., for localities with different sizes and different 
distance probability distributions; (b) localities are hard to define and identify in real pro- grams; 
thus, data collection for model construction and validation is a difficult endeavor; (e) locality transitions 
are not all equally abrupt; they occur with various speeds, which the model should ideally reproduce; 
in reality, this is not easy to  obtain; (d) there is no evidence that localities change accord- ing 
to a Markov process (e.g., their durations are likely not to be exponentially distributed); to solve 
this problem, the Markov process could be replaced by a semi-Markov one, but this would make the model 
even more complex and cumbersome;  (e) since these are stochastic models, the experimenter is not allowed 
to specify the desired dynamics deterrninistically; while this is not a drawback in certain studies, 
it may be in others where strings with precisely the given dynamic behavior are needed to test some dynamic 
properties of a memory policy in a uniprogramming environment or its ability to handle specific types 
of multiprogram- sing mix dynamics.   The dynamic behavior of a program may be com- pactly and elegantly 
represented by the plot of its work- ing set size as a function of virtual time. The working set size 
at time t with parameter T,~v (t,T), is the cardinal- ity of the working set Ff(t.T),the set of pages 
or seg- ments referenced between t -T + 1 and t [6] (note that virtual time is assumed to be discretized, 
that each discrete time is expressed by an integer and corresponds to a memory reference, that T is a 
positive integer, and that for simplicity references are assumed to be equally spaced on the virtual 
time axis). Plots of tv(t,T) vs. t for programs have been observed and pub- fished by Bryant [7], Smith 
iS] and Alanko et sd [9]. For a given program, the shape of such a plot clearly depends on the value 
of T. which unfortunately is a system-dependent parameter. Ideally, a complete char- acterization of 
a program's dynamic behavior should consist of a number of these plots, corresponding to vari- ous values 
of T. In practice, however, a single plot will often be sufficient, since either the program to be modeled 
runs under a working set-like policy with a known value of parameter T or the objectives of the study 
for which the modeling effort is being made sug- gest a reasonable Value for T. The latter remark is 
based on the observation that the value of T controls the degree of detail of the dynamic description; 
for a given string,~v(t.T)is usually more jagged if T is small than if T is large (the case of very small 
T's, e.g., T = 1, or T = 2, would be different, but is too unrealistic to be considered here). This 
paper is concerned with the following problem: given a representation of program dynamics in terms of 
working set size behavior in the time domain, is it possible to construct a reference string which exhibits 
the given behavior? To simplify our discussion, we shall put the (real or fictitious) program to be modeled 
into a paging context. We shall also assume that a single value of T has been selected and is to remain 
constant throughout the study.  In the next section, the problem will be attacked assuming that a plot 
of ~(t,T) (or more precisely, a string of the desired working set sizes at all successive instants t 
of virtual time) is completely specified. Since it is more realistic to assume that only the salient 
points of such a plot will be assigned by the experimenter (especially in cases like those referred to 
in drawback (e) above), the program described in Section 4 imple- ments the algorithm presented in the 
next section even when ~(t, T) is incompletely specified. The Algorithm In this section, we examine 
the problem of generat- ing a page reference string whose correspondmg string of working set sizes coincides 
with a given string. Can the latter string be assigned arbitrarily, or does it have to satisfy certain 
conditions in order to be realizable? An immediate answer to this question comes from the observation 
that, by its definition, the size of a program's working set must be a positive integer not greater 
than T and cannot vary by more than 1 page with each new reference. We therefore introduce the fol- lowing 
definitions. Definition I. A string of integers S = el,s2, " " st, " s~ is said to be positive continuous 
(in short, a pc-stying) if (i) s t > 0 for all t, (ii) s I = 1,  (iii) Ist -st-ll ~ lfor t = 2,...r~. 
Definition 2. A pc-string S is bo'~nded (in short, is a bpc-st~v~J) by parameter T if maxs t -~ T. Â¢ 
=l...n Definition 3. A string S = svs2,  " s~ of integers is said to be a vork'iv~J set size stvi.ng 
(in short, a ~ss-string) with parameter T if there exists at least one page reference string R = T~,T2, 
" " " Tn whose string of working Set sizes with parameter T coincides element by element with S. Clearly, 
a string must be a bpc-string, bounded by parameter T, in order to be a wss-string with parameter T. 
Is this condition also sufficient? A simple example shows that it is not. The string in Figure l(a) is 
a bpc- string for T ~ 6. An attempt at producing a reference string corresponding to it for T = S is 
reported in Figure l(b). The failure of this attempt is due to the impossibil- ity of decreasing the 
working set size from 3 to 2 at the fifth reference before the end of the string. The reader may try 
alternative solutions, but they will always fail at the same place, if not at an earlier one. Figure 
1(c) shows a reference string whose working set size with parameter T = 6 follows the bpc-string in Figure 
l(a). Thus, the given bpc-string is a wss-string for T = 6 but not for T = 8 (in fact, it can be shown 
that it is not a wss-strin~ for alt T ~ 7b. (a) 1123345554566543232 3445 (b)aabcbdecbeaf f f dddc? 
(c)aabcadebadf eedbbbab f cae Figure I. Reference string generation from a given bpc~z~ag. We must 
therefore conclude that being a bpe-string is a necessary but not sufficient condition. In certain cases, 
when a bpc-string requires the working set size to decrease, no reference string can be found which will 
allow that decrease to occur. Since increasing the work-  ing set size as dictated by a bpc-string is 
obviously never a problem, our attention must focus on size decrements. Definition 4. Given a string 
of integers S = s~,sz,  s n, there is a deczem~vtt between adjacent elements ss_~ and st if s, = st-t 
-1 (~ ~t <n ). Definition ~. Given a bpc-string S =s~.s~, .,s~ bounded by parameter T, the dec~em~ent 
count d~ corresponding to s# is the number of decrements in the substring (of length T) s~,s~+~, . 
sÂ¢+F-r We now prove the result on which our solution to the problem discussed in this section is based. 
 ~eorem. A bpe-string ~ = s;,sz,  ' sn bounded by parame- ter T is a wss-string with parameter T if 
and only if, for silt,   ~<s,.  Proof. (1) The condition is necessary. Let S be a wss- string with 
parameter T. Then, sz is the cardinality of set W(t,T). Each decrement occurring within the sub- string 
st,-..s~+T_ z corresponds to the elimination of one page which was in W(t,T) and which drops out of the 
working set. The number of pages which drop out within the substring cannot be greater than st -1. since 
at least one of the pages in W(t. T). namely the page refer- enced at time t. will be in W(t Ã· T -L T). 
and none of the new pages added to the working set within the sub- string can drop out of it before time 
t + T + 1. Thus. dz "= s~ -l<s~ for slit. (2) The condition is sufficient. The proof of this part' of 
the theorem will be constructive. We shall present an algorithm which, when the condition is satisfied, 
produces a reference string whose working set size string coincides with the given bpc-string. The algo- 
rithm operates in just a single pass over the given string and uses three sets of pages. C. F. and E. 
whose con- tents are time-variant. C and F are ordered sets (FIF0 queues), whereas E is an unordered 
set (but will be hen- died without loss of generality as if it too were a FIF0 queue). At time t. Q is 
the set of cand~zte pages. F~ the set of f~rbidden pages, and E~ the set of ezte~uzl pages. Each element 
of ~ or F~ has an associated time index equal to tt: + T. where tt: is the time the element entered or 
reentered the respective set. When neces- sary. the time index tz of page z will follow the element symbol 
in square brackets: z[t~]. For each reference to be generated, the algorithm performs two functions, 
namely, the select/o~ of the page to be referenced and the updating of the sets ~. Fz. E~ to obtain QÃ·~. 
F~+s, and E~Ã·~. The page selection rules and the set updating rules followed by the algorithm are summarized 
in Table That this procedure generates a string with the desired working set size behavior in the time 
domain can be proved by the following observations: (a) Rules 5 and 9 in Table I are mutually exclusive. 
Hence. the time index of each page in C or F is unique. (b) Since C. F, and E are sets. since a page 
is appended to exactly one of them whenever it is taken from the top of a queue (rules 5 and 9 are mutually 
exclusive, rules 7 and 13, I and 3. Z and 11 are either not applied or applied together in pairs), and 
since the three sets are initially disjoint (rule 15). we have at all times  c, nz, : c~ n'~', =r, n~, 
=Â¢,. The rules in Table ] are visually summarized in Fig- ure 2, which may facilitate the understanding 
of these arguments.  (c) The referenced pages are never drawn from the for- bidden set F (rules I and 
2); a page leaves F to join E (rules 7 and 13) when it drops out of the working set; it had been appended 
T references earlier to F (rule 9) in order to avoid any further reference to it; because of rule 9, 
when a page leaves F, the refer- enced page is drawn from C (rule 1), and is there- fore already in the 
working set; thus, the working set size at that time decreases by 1. q~lde L P~ge selection and set updating 
rulu (A) Page Selection 1~-st (C~) its, ~,,_, (1) $~st (E,) its, >s,_~ m) (B) Set Updating -|l~st(G 
); ifs, ~ st-~ (3) Q'=< u *t > st_, (4) C; u|rt[t + T]~ it S,+r ~" *,Ã·r-~ (5) QÃ·, = < il~s,+r **+r-i 
(6) F, -I1~st(Ft)l eye~t (F,) = z[t] (v) Ft'=< F: otherwise (S) F/ulrt[t+T]~ it*j.r<et,r-1 (s) F:+t = 
< F/ it ez,r ~ st+r-, (1o) Et -(f~rst(E:)| its, >e,_s (11) Et'=< E, if s, '~ s.-i (lZ) E/ UIJ'~et(F,)I 
it.first (Ft) = z[t ] (13)  E,+, = < Et* otherwise (14) (C) Initialization C,= F~ =Â¢:Ez= P:s, =0 (15) 
 (D) Reference String Completion sn~zfsuÃ·s= ''" =ZmÃ·r ~sm (lS)  ~trst(Z) denotes the oldest element 
in FIF0 queue Z: U is the symbol of set union; ZU~zl appends element z to FIFO queue Z; P ia the set 
of pages; rÂ¢[t + T] denotes the page referenced at time t, whose time index is t Ã· F; the elements of 
the reference string and of all FIFO queues are pages. (d) When the working set size is to be increased, 
the referenced page is drawn from E (rule 2); this page enters the working set and is appended to either 
C (rule 5) or F (rule 9). (e) When the working set size does not have to change. the referenced page 
is taken from C (rule 1) and is appended to C again (rule 5). (f) Observations c. d. and e above prove 
that  W(t,r) = G,.l U Fj*I = P -F-.t+l , where P. is the set of all pages referenced by the program 
during its entire executior- Thus, all pages in ~ are also in W(t-I,T), and referencing a page in ~ does 
not increase the working set size (obser- vations c and e). (g) At any given time t. we have I~'l =~. 
 54 where F/ is an intermediate set between F~ and F~+,. as shown in Table I. Each page in F~ corresponds 
to a size decrement in the (t, t + T- 1) window (rule 91; however, since a decrement between s~_ t and 
s~ (if any) is not included in d~. the above equality would be incorrect if it involved F~ or F~+~ (rule 
7 I. By rule 9, (h) When s~ ,c sl_v Q ~ ~b. From observations b and f, s,_~= I~1 + I~1. Ifs~ < s~_~, 
we have IF~ i = d~+ 1, and, since the con- dition of the theorem is assumed to be satisfied, + 1. hence. 
,, > IF, I, ,, < I c., I + s,. and /GI > O; if, on the other hand, st = s~_~, then ] F~ i = d~ and, since 
s~ > ~, we have st = ]~1 +d~ < ]GI +s~. Thus, even in this case,  I~I>o. 0) When s~ >s~_l, E~ ~ ~b. 
Since s~_z< JP], observa- tions b and f show that it must be J E~ I > O. (i) Lastly, we must verify that 
a page z which has entered the working set (and has been appended to C) at time t' does not inadvertently 
drop out of it. This would be the case if, for t > t'+ T, z[r+ T] were still in C. The interval (t',t' 
+ T) will contalnp working set size increments, ~rt decrements, and u instances of no change, with p+~n+~=T. 
 If c = ] Q,+~ ] is the size of FIFO queue C immediately after the addition of z[t' + T] to it, z will 
still be in C after t' + T if the total number of decrements and of no changes in (t',t' + T) is less 
than c (rules 1 and 3). Let ~rt +~ <c. Then. we would have ~ + c > T. By observation f, noting that Fr+It 
= ~n.. we could writ e 8#,=0 +fn., and. since st+ r -s r = ~D -- rn, we would obtain p+s~,-rn=sr+T>T. 
which is impossible. Thus, it must be ~r~ + u ~ c, and page z will always have been re-referenced before 
time t' + T + 1. This completes the proof of the theorem. 3. An Example. The use of the algorithm introduced 
in the previous section will now be illustrated by applying it to the bpc- string in Figure l(a). The 
string is reported in Figure 3(a). The reference string generated by the algorithm for T = 8 is shown 
in Figure 3(b). Since the time indices of the pages in C and F are unique (observation a in Sec- tion 
2), since at each time instant the referenced page is appended to either C or F (rules 5 and 9 in Table 
l), and both C and F are FIFO queues, it is convenient to keep track of their contents by constructing 
another strir~ (the CF-string) in which the elements of the two queues have locations corresponding to 
their time indices, and the pages in F are distinguished from those in C by some suitable notatior~ For 
instance, in the CF-string in l~tg- ure 3(c), z means that page z is a member of C, whereas indicates 
that page z is a member of F. A slash across a page name indicates that the page has been taken from 
the queue it was in and moved to some other queue (or appended to the same one). For example, at the 
end of the processing, F is empty (as it must be) and C = |b,f ,c ,a,s ~. The contents of E (i.e., the 
pages which at each instant are not in the working set) are kept track of in the queue shown in Figure 
3(d); the top element of this queue isthe lefLmost non-deleted page name. At the end, E contains all 
the pages which are not in C, i.e., in this case, d. The algorithm fails to complete its task when it 
is applied to the same string with T = 8. *m~,m I -.. ! i ! ! " . "'"":- "'" i _ _ ,.. st , Figure 2. 
A visualization of the rules in Table 1. (~ 1125545 S S456654 S432523445 (S 55555) ~) aabcadebadfceddbbbbab 
fcae (~ i~4~i~~ ~bfcae Figure 3. Applying the string generation algorithm to the string tn r~ l(a) with 
T = 8. (~ 1123345554566545432325445 aabcbdecbcfaa  C~ J~ ~ fj lrlgure 4. Al~lyin ~ the ~Jring-generation 
algorithm to the string in l~gure l(a) with T = 8, l~gure 4 shows that at t=14 the page to b@ referenced 
should be drawn from C (rule !) but C is empty. The reference strir~ could be continued for a while (more 
precisely, we could add another T - I = 7 references, as we did in F~gure 1(b)), but not beyond that 
point without diverging from the given bpc-string. The reader will notice that t = 14 is the first time 
in the bpc-string at which th e necessary and sufficient condition for it to be a wss-string is not 
satisfied. Indeed, we have sn4 = all4 = 5. and the algorithm stops whenever d~ ~ st. 4. The Program. 
 A simple analysis of the algorithm described in Sec- tion 2 shows that its complexity is O(n). where 
n is the length of the string to be generated. If the wss-string is given (but it is usually more convenient 
to compute s t on the fl~ from the value of s~_z and the list of all the points at which the ~(t,T) curve 
changes slope), the genera- Lion of one reference entails taking one page from the top of a queue and 
appending it to the reference string and to another queue. The source queue is selected by  comparing 
s t_l and s t , the destination queue by compar- ing stÃ·r_ I and st+ r. This observation has the important 
consequence that the algorithm can be implemented without constructing and keeping in memory the entire 
forward window (t,t+T), which might consist of several tens or even hundreds of thousands of references. 
Since not even the backward window is required, the only infor- mation that the algorithm needs is the 
list of slope changes (each change being represented by the time at which it is to occur and by the new 
slope, -i, 0. or +i, of the curve) and the value of T. The analysis of the algorithm's complexity would 
not be complete if we did not include the testing of the time hudex of f#.Tst(Ft), and, when this index 
coincides with the current time. the transfer of fO'st(Ft) to the bottom of the E queue. The total number 
of these transfers coincides with the total number d~t of decrements in the given wss-string. Thus. the 
generation of a given string of length rt requires 3~ tests and 2~ + d~o t transfers between FIF0 queues. 
 The algorithm has been coded in Pascal. The pro- gram accepts at its input a description of arbitrary 
accuracy of the ~(t,T) curve. The user is to assign the coordinates of those points which he or she perceives 
as the salient ones. The type of interpolation performed by the program is shown in Fqgure 5, and has 
been selected to facilitate both the implementation of the speedup scheme described below and the synthesis 
of a program which will reference its virtual address space as dictated by the string produced by the 
algorithm, thereby exhi- biting the described working set size dynamics. This program synthesis problem 
will be discussed in a subse- quent paper. By examining Figure 5, the reader will easily realize that 
the form in which the input data are to be specified is not at all restrictive, and that the pro- gram 
can generate a string whose worldng set size follows exactly any accurately described curve. .t Â¢--,,~ 
 Figure 5. Interpolation Â¢ff the given points (represented by a dot in a circle) ta obtain a continuous 
~(t.T) curve. If the user wanted the reference string to follow exacUy the plotted curve, the coordinates 
of points s. b. e.... would have to be assigned to the program. Note that all curves start from point 
(I.I). which does not lmve to be explicitly assigned. Several strings of various lengths, with a wide 
spec- trum of working set parameters and of dynamic behaviors, have been generated by running the program 
on a DEC VAX-11/7flD under VMUNIX. the Berkeley- developed virtual memory version of the Bell Labora- 
tories UNIX operating system. In all cases, the genera- tion of each reference took between 85 and 95 
/~s; as predicted by our analysis, this time was practically independent of the string length, Of the 
window size T, and of the number of distinct pares referenced. To keep the working set size constant 
at a certain value K, the algoritltr~ references K pages cyclically. Thus, the gen- eration of a string 
with a long interval (tl,tz). within which the working set size is constant, can be speeded up by skipping 
the generation procedure between t I and tz- T. Obviously, the occurrence of any such forward leap is 
to be suitably recorded in the output string, and the program must either make the appropriate changes 
to queue C before resuming the generation process or, more conveniently, skip a number of references 
equal to the greatest integer multiple of K which fits into t~ - T -t I. 5. Conclusion. An effective 
procedure for generating a reference string whose working set size behaves in time as dictated by a given 
string has been presented. The string gen- erated by the procedure is a maximum- locality string, since, 
among all the reference strings having a given working set size dynamics, it is one of those character- 
ized by the minimum number of page faults. The only arrivals of new pages into the working set that the 
pro- cedure considers correspond to actual increases in the working set size, and the only page departures 
correspond to size decreases. No instances of simultane- ous arrivals and departures, which occur (for 
example with strictly sequential referencing) without being reflected in working set size variations, 
are present in the strings produced by the procedure described in this paper. An extension of the procedure 
which allows more general strings to be generated will be the subject of a subsequent paper. Also to 
be studied in the near future is the effect of the string generation mechanism and of the various arbi- 
trary choices which are made by the algorithm intro- duced in Section 2 on the accuracy of the trace-driven 
simulation of policies which differ from the pure working set policy with window size i". Reference strings 
with an assigned, controllable behavior in the time domain are useful in trace-driven simulation studies 
of the dynamics of memory policies. The usefulness of the procedure will be enhanced when automatic methods 
will be available to construct a parametric program which references its pages as dic- tated by a given 
reference string. The ability to obtain such programs will allow dynamic multiprogramming experiments 
to be performed on memory policies. Acknowledgements. The author is grateful to the members of the PROGRES 
group, and in particular to Newton Failer, for the several discussions he had with them on the subject 
of this paper. He is also indebted to Caren Weisglas for her impeccable typing of the various successive 
versions of the manuscript. References. <RefA>[1] J. Spirn, Progr=~ BehavioT: Models ~td Me~-wrens. Elsevier 
North-Holland, 19/7. [2] E. J. Coffman, Jr. and P. J. Denning, Operating 5~/s- tema 7~eorl/. Prentice-Hail. 
1973. [3] I~ Belady and C. J. Kuehner, "Dynamic space shar- ing in computer systems", Cbm:rt. ACM i2, 
5 (May 1969), 282-288. [4] D. Ferrari, '~?irtual storage performance predic- tion", Infotech State of 
the Art Conf. on Perfor-mance ~irodeU~ng cm~ Prod/cram, London (1977), 159-174. [5] P. J. Denning and 
K.C. Kahn, "A study of program locality and lifetime functions", Proc. 5th ACM- SIGOPS ~{/m~. Op~ Systems 
Pri~c~les (Nov.  1975), 207-216. [6] P.J. Denning. 'qt/orking sets past and present". IEEE Prm~s. 
Soft~J~Te E~Leerb~ SE-6.. 1 (Jan. 1980). 64--8Â¢ [7] P. Bryant, '~redieting worIQng set sizes", IBM J'. 
 Res. De~elop. 19, 3 (May 1975), 221-229. [8] A. J. Smith, "A modkfied working set paging algo- rithm", 
]EEE 7~r~ns. on Cbmputers C-25, 9 (Sept. 1976). 90v-914. [9] T. Alanko, ]. Aikala and P. Kutvonen, "Methodotogy 
and empirical results of program behavior measure- menLs". Proc. PeTfoTrn~nce 80. tile ?tit Ivtt. S~lnp. 
o~ Computer Performance ModelJ~lg, Meo~Jrement and EuaZuaJ~ Toronto, Ontario, Canada (May 19S0).55-66.</RefA> 
 
			
