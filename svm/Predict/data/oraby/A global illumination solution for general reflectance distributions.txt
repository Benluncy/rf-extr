
 @ @ Computer Graphics, Volume 25, Number 4, July 1991 A Global Illumination Solution for General Reflectance 
Distributions Fran~ois X. Si!lion James R. Arvo Stephen H. Westin Donald P. Greenberg Program of Computer 
Graphics Cornell Ithaca, Abstract A general light transfer simulation algorithm for environments com­posed 
of materials with arbitrary reflectance functions is presented. This algorithm removes the previous practical 
restriction to ideal specular and/or ideal diffuse environments, and supports complex physically based 
reflectance distributions. This is accomplished by extending previous two-pass ray-casting radiosity 
approaches to handle non-uniform intensity distributions, and resolving all possi­ble energy transfers 
between sample points. An implementation is described based on a spherical harmonic decomposition for 
encod­ing both bidirectional reflectance distribution functions for materi­als, and directional intensity 
distributions for illuminated surfaces. The method compares favorably with experimental measurements. 
CR Categories and Subject Descriptors: 1.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism; 
1.3.3 [Com­puter Graphics]: Picture/image Generation. Additional Keywords and Phrases : global illumination, 
BRDF, specular reflection, directional-diffuse, progressive radiosity, spher­ical harmonics. Introduction 
The simulation of global illumination is one of the major require­ments for realistic image synthesis. 
Global illumination effects pro­duced by multiple surface reflections are significant in all but tbe 
simplest environments. For instance, indirect lighting and color bleeding, or the transfer of color by 
reflection, can be observed in almost all indoor scenes. This paper presents a completely general algorithm 
designed to solve the global illumination problem for ar­bitrarily complex reflectance models. Solution 
techniques for the simulation of complex light transfer mechanisms, where every point in the environment 
can potentially act as an illuminator for all other points, have thus far been quite lim­ited. Two major 
paths have been explored. Light can be followed as it leaves the light sources and is propagated and 
reflected throughout the environment. For example, this approach is used by progressive Pcnni\si,m II, 
:I,py wl!htmt Icc all or part of !h]s rna{erial is grwrled providcrt tht[ the copim arc not made or distributed 
for direct cnrnnwrcial advwrt~gc, [hc ACM copyright rrntice and the title of the publication and m daw 
appear. and rro!icc is given that copying is by fwmlssimr <}1Ihc A\soci;il ion f{w C ornpufirrg Machinery. 
Tn copy {~therwiw, or h, rcpuhlish. rcqumesa fee tirrd/orspecific permission !( Iwl ACM-I-X9791-436-WY1!007/0[x7 
w) 7.5 University NY 14853 refinement radiosity algorithms, and can &#38; characterized as view­imiependenf 
shading [3]. Conversely, standard ray tracing [20] and its derivatives usually start from the eye and 
follow light paths in the reverse direction. It is therefore strongly view-dependent. These approaches 
work well for certain typss of reflective behav­iors, such as ideal diffuse (radiosity), ideal specular 
(ray tracing), or combinations of these [ 18, 17, 9]. The actual reflectance distribu­tions of most surfaces 
are far more complicated, exhibiting some directionality which must be taken into account for accurate 
simu­lation. The approach presented here extends the progressive radiosity method to include arbitrary 
reflectance distributions. While previ­ous algorithms incorporating general reflectance have relied upon 
a discrete set of directions [ 1i, 1, 13], no such restriction is intro­duced here. This is accomplished 
by using continuous functions to encode the directional dependence of intensity distributions. In the 
next section we discuss the applicability of \ iew­independent and i ien -dependent approaches to the 
case of general reflectance distributions and introduce a classification of reflectance types into ideal 
diffuse, ideal specular and directional dz~use com­ponents. The third section is devoted to the presentation 
of a com­plete algorithm to solve the general problem. Two specitic issues are then detailed: treatment 
of ideal specular reflection in Section 4, and storage of directional diffuse contributions in Section 
5.  2 Algorithmic choices for a general solution The goal of this research is to develop a method for 
the simulation of global illumination that is general enough to provide accurate solutions for scenes 
incorporating any reflectance distribution, The problems encountered in devising a completely general 
algorithm are reviewed below, together with some of their design implications. 2.1 General reflectance 
distributions The reflective properties of a surface are generally described by means of a bidirectional 
reflectance distribution function (BRDF), which is defined as tbe ratio of the reflected radiance in 
a given outgoing direction to the incoming energy flux (per unit area) in an­other direction. A similar 
quantity is defined for transmission. For the sake of clarity, we will refer only to reflection in this 
paper, al­though the algorithm is equally applicable to transmission. The two we] l-understood limiting 
cases are idea/ d~ffuse and ideal specular reflection. An ideal diffuse reflector has a constant BRDF, 
that is, the scat­tered intensity is the same in all directions. Diffuse reflection can thus be fully 
described by a single scalar value. . An ideal specular reflector has a Dirac delta function as its BRDF, 
where the only direction in which there is non-zero scattering is the mirrored direction. The relevant 
quantity to describe specular reflection is the ratio of the outgoing inten­sity in the specular direction 
to the incoming intensity, or spec­ular re~ectatrce. Most materials have BRDFs that are not this simple, 
exhibiting a more elaborate directionality. Recent work on light reflection mod­els has shown that different 
physical processes contribute to differ­ent parts of a BRDF [8], and the term direcrirmal d@iise has 
been introduced to describe the general BRDF excluding its ideal specu­lar component. (Figure l). e Ideal 
specular Directionaldifluse Ideal diffuse Figure 1: Different components of a general BRDF. The directional 
diffuse component of a BRDF is a function of many variables, includin~ surface finish (roughness), wavelength, 
and ~he electrical propert~es of the material. fiis produces a g~eat variety of behaviors, all of which 
must be correctly simulated. The algorithm presented below is capable of incorporating both arbitrary 
dkectional diffuse and ideal specular reflection into a global solu­tion. 2.2 View-independence vs. 
view-dependence View-independent methods in general require the storage of illumi­nation information 
on the surfaces, both for the purpose of the ilhs­mination computation and for use by a final ]tiew-deperrdent 
display algorithm. In the case of diffuse surfaces, storing a single radiosit y value per wavelength 
channel at each sample point is sufficient, re­sulting in reasonable storage demands. In the same spirit, 
Immel et al, stored the directional information regarding the reflected inten­sity at each point, using 
a discrete set of directions [ 1I]. If, however, the distribution of emitted or reflected light is sharply 
directional, as is the case with specular surfaces, storage becomes unmanageable if accurac y is to be 
maintained. On the ~ iew-dependerrt side, distribution ray tracing [5] uses brute force, tiring many 
reflection rays to simulate complex BRDFs, while path tracing [ 12] follows many paths through the scene 
to ob­tain a statistically reliable estimate. Here again, the property that made standard ray tracing 
[20] computationally tractable disappears (namely the restriction to ideal specular reflection that limits 
the number of rays), as rays must be tired towards all potential illu­minators. The method presented 
below combines elements of both strate­gies into a two-pass algorithm. The first pass computes a view­independent 
solution for the directional diffuse distribution of light, includhtg the effect of intermediate specular 
reflections, and the sec­ond pass supplies the view-dependent ideal specular effects. This partitioning 
of reflectance behaviors resembles earlier two-pass ap­proaches, but now accounts for all possible transport 
chains and in­corporates arbitrary reflectance distributions, not only the extreme cases of ideal diffuse 
and ideal specular. In the following discussion we use the vocabulary of radiosity ­style algorithms 
for two reasons. One reason is the energy consis­tency of the radiosity method: a physical consideration 
necessary .r -., -.+ .. Figure 2: Energy transfer between a patch and a differential area to obtain accurate 
simulations. The second reason is the appeal of the progressive refinement paradigm [3], where useful 
intermediate results can be obtained early in the computation. The notion of radiosity is extended to 
include the directional dif­fuse part of the light reflected at a given point. Because it does not include 
specularly reflected light, this intensity distribution is fairly smooth and thus can be stored at reasonable 
cost (See section 5). The ideal specular distribution of light is sharply discontinuous and is too costly 
to store on the surfaces; it is properly computed on the fly to resolve specular to directional dtfluse 
transfers. By using ray-casting, which has proven to lx an effective sam­pling method to evaluate light 
transfers, all sample points in the en­vironment are considered [19]. Furthermore, the use of ray casting 
imposes no restriction on the geometry of the environment and al­lows every illuminator to be sampled 
adaptively. The algorithm proceeds by successive steps similar to progres­sive radiosity shots , but 
directional intensity distributions are con­tinuously maintained on the surfaces instead of scalar radiosity 
val­ues. The ideal specular contributions to the energy transfers are propagated immediately so they 
need never be stored.  2.3 Energy transfers for non-diffuse surfaces Traditional radiosity methods assume 
an ideal diffuse behavior on all the surfaces, and express the transfers between surfaces by means of 
a form factor [7]. For the general case the amount of light re­flected from a point can be expressed 
as follows. Let us denote by I(TI, ii) the intensity (or radiance, expressed in Watts per unit solid 
angle per unit projected area) leaving a surface at point T!, in the direction of the unit vector d (Figure 
2). The energy dz E emitted by a differential surface area dA I around TI in the direction Zand falling 
on a differential surface dAZ around point Tt is given by : ( dA2 COS &#38; d2E = Z(T,, r7) (dA] COS&#38;) 
(1) , )\/ -projected area solid angle as seen from TI (2) This energy is scattered by the surface at 
Tz in all directions. By definition of the BRDF p2 at T2, the intensity leaving T1 in the di­rection 
Z, due to the incident light from dAl, is given by : dI(Tz, ti) = pz(ti, ti) ~ (3) where F = Z is the 
unit vector pointing from 1: to Tl.  @ @ Computer Graphics, Volume 25, Number 4, July 1991 To evaluate 
the total intensity leaving T2 in direction F, due (o the reflection of light originating from a finite 
area .41, Equation (2) must be integrated across .41 giving : Equation (4) represents the effect of the 
light emitted by a partic­ular surface on the light that is scattered around a point on another surface. 
It describes the elementary ,shooring operation of the ra­diosity method. The traditional radiosity method 
simplifies Equa­tion (4) in two ways : tirst, the BRDF p is assumed to be diffuse, which makes it a constant 
independent of both Fand rii, and can thus be moved out of the integral, The diffuse assumption also 
makes I(T,, IT)independent of U. Second, the radiosity ml(Tl ) is assumed to be constant across the surface 
of the patch. The intensity term can thus be moved out of the integral, which then becomes purely geometric 
and is called the (/jflere~~riu/fiJrn~fucrf~r. If more general BRDFs are considered for the surface at 
Tz, how­ever. the entire integrand must be considered. The next section ex­plains how a form factor computation 
algorithm is adapted for that purpose.  3 General solution for arbitrary reflectance A detailed description 
of the algorithm is presented below. The first pass, or solution pass. is very similar to progressive 
radiosity, and the implementation is a straightforward modification of an existing radiosit y program. 
The second pass employs a simple ray tracer to retrieve the directional intensity information stored 
on the surfaces. A central assumption of the method is that a directional intensity distribution 1(;) 
can be stored and accessed at each vertex of the environment. We discuss this topic further in section 
5, where an efficient storage scheme is presented. The method is explained here in terms of a meshed 
environment, composed of patches and elements [4], but it could be applied to radiosity textures [9] 
as well, if directional distributions are stored in the texture. The second (view-dependent) pass is 
described first, as it is a straightforward application of ray tracing. 3.1 Second pass Once the view-independent 
solution has been computed in the first pass, a simple ray tracing pass is used to supply the view-dependent 
portion and create the final image. When rays encounter surfaces with a directional dl~u.w component, 
the intensity leaving a surface is retrieved from the directional distributions computed and stored in 
the first pass. The intensity contributed by ideal spa ukv reflec­tion is obtained by recursively following 
reflected rays as in con­ventional ray tracing. Note that a specular rcflecfance function is used to 
attenuate the reflected rays instead of a simple specular coefficient . This allows a precise treatment 
of specular reflection, where roughness effects as well as Fresnel reflection are properly accounted 
for [8]. 3.2 First pass The first phase of the computation is an extension of progressive radiosit y, 
but directional distributions are used throughout the algo­rithm in place of diffuse radiosities. The 
basic shooting operation now uses the directional intensity distribution emitted by the shoot­ing patch 
to update the directional intensity distributions of the re­ceiving vertices according to Equation (4). 
This equation can be rewritten as a function of the intensity dis­tributions rather than scalar values. 
If p~( F, ) denotes the BRDF for an incoming direction F as a function of the outgoing direction, and 
1(T, ) denotes the intensity distribution at point T, then the effect of shooting from T, to TZ is Cos 
(?, Cos 6+ 1(7;,)= 1( T!,7i) p?( r, )dA I (5) / ,~1 r? The algorithm presented below follows Equation 
(5) and decom­poses the integral into a discrete sum. This is similar to the form factor computation 
algorithm of Wallace e( a/. [ 19], but modified to sum complete directional intensity distributions. 
Approximation of the integral To obtain the reflected intensity distribution given by (5). we follow 
the computation of the area-lo-dt~eren/ia/-area form factor used in [19]. Patch .41 is broken into a 
number of smaller pieces according to any given sampling scheme, and a contribution (a scalar cle/tu-f{mn­facror 
in the diffuse radiosity case. a directional distribution in our case) is computed for each piece. A 
variety of sampling strategies is available. and this formulation is independent of the particular scheme 
chosen. For .Y samples, the total integral is expressed as : (6) Given sample i, with area AA, centered 
at T,, the associated con­tribution to the integral in (4) could be crudely approximated by as­suming 
the integrand constant, yielding : To avoid possible singularities when Tl and T? are close together, 
we treat piece i as a finite area, and use the approximation of a disk­shaped area as in [19]. This amounts 
to assuming that the emitted intensity does not vary significantly over the area of the piece. which 
is a common assumption of the radiosity formulation. The contr­ibution of piece i is then : Introducing 
the incident energy flux (Watts per unit area) incident on point T2 from piece i Equation (5) can be 
conveniently rewritten as : h is apparent from equation ( If)) that 1 is simply a weighted sum of the 
BRDF at TI over a set of incident directions, Each energy flux term, MI,, is the product of the intensity 
leaving a sample print on the shooting patch in the direction of the receiving vertex and the de/fa-form:facror 
for that sample point. Do until convergence Select Shooting Patch P, Call SHOOT( P, , Sgeneric ) End 
Do Function SHOOT( Patch Pi , Occlusion function S ) ( For each Receiving Vertex Vi For each Sample Point 
TS on Pi . Evaluate occlusion c = S(T,, Vi) lf(c+O)Then 1 Obtain the incoming ener,qy&#38;x on Vi . Evaluate 
inten&#38;I, leaving T, tohard Vj, using intensity distribution of patch Pi . Compute 6F = delta-form-factor 
 0 between T, and Vj . Compute incident energy flux Cp = C. 6F. Id 0 Compute incident angfes in local 
axes at Vj . Retrieve BRDF p of surface at Vj for the incident angte 0 o Create intensity distribution 
AX = @ - p 0 Orient (rotate) 5X in local axes according to incident direction . Add nz to accumulated 
and unshot intensity distributions Z and U at V, End If End For End For Figure 3: Algorithm for first 
pass. Step D is explained in section 4 Discussion of the algorithm The shooting operation that propagates 
the accumulated energy of a patch into the environment is presented as a pseudocode subrou-tine (called 
SHOOT) in Figure 3. Given a shooting patch Pi and a receiving sample point (vertex Vj), the following 
operations are needed to update the directional intensity distribution of the vertex : Sample points 
are selected on the shooting patch according to a sampling algorithm. Our implementation uses an adaptive 
sampling technique where the number and location of the sample points de-pend on the results obtained 
from previous samples [19]. For each sample point, a contribution is added to the reflected intensity 
dis-tribution of the vertex. The first task of the algorithm is to compute the incident energy flux on 
the vertex, which is used to weight the BRDF as in equa- tion (10). This involves a visibility determination 
accomplished by the occlusion function S. In the simple cases where no ideal specular reflection is present, 
this function simply returns 0 or 1 to encode occlusion between the sample point and the vertex The more 
complex cases are explained in Section 4. If the two points Figure 4: Computation of the energy flux. 
can see each other, the intensity leaving the shooting patch is obtained from the stored directional 
distribution of the patch, and a delta-form-factor SF (geometric attenuation term) is computed (Figure 
3-A). The desired energy flux is the product of the inten-sity, the delta-form-factor and the attenuation 
given by the occlusion function (Figure 4). Z Figure 5: Orientation of the BRDF. (1) : obtaining the 
BRDF ac-cording to 8. (2) : rotating the BRDF according to 4. The second step is to compute the contribution 
of the current sam-ple point to the intensity distribution (Figure 3-B). We start by ob- taining a directional 
distribution representing p2(2;,, .), that is, the BRDF for the given incident direction. This is retrieved 
by means of the storage method described in section 5. The BRDF is then scaled by the energy flux value 
6@%, which results in the distribu- tion of reflected intensity LV due to the current sample point. If 
an isotropic BRDF is used, the directional distribution depends only on the incident elevation angle 
0, and is obtained in a canonical coordi-nate system : it must be rotated to be properly aligned with 
the inci- dent azimuth angle 4 in the local coordinate system of the receiver (Figure 5). Finally this 
contribution is added to the unshot intensity distribution and the accumulated intensity distribution, 
much as in traditional progressive radiosity (Figure 6). Previous work has shown that a complete treatment 
of light trans- fers requires exchanges incorporating different modes of reflection. Our shooting operation 
also includes a complete treatment of ideal specular reflection, so that the effect of specular reflection 
on the 63 Figure 6: Addition of directional distributions. intensity distributions is completely evaluated, 
but no specular in-tensity is stored (see section 2). Section 4 explains this part of the algorithm in 
more detail.  Ideal specular transfers As explained in Section 2, specularly reflected light is not 
stored in the directional distributions on the specular reflector. Instead it is immediately propagated 
to other surfaces where part of it will be stored in a directional distribution, and part may again be 
specularly reflected to other surfaces. Our implementation is an adaptation of the image method [ 161 
to the ray-traced form factor idea : if the specular surfaces are pla-nar, one can simply reflect the 
shooting patch across the surface, and shoot light from this virtual patch to all receiving vertices 
(Figure 7). Note that the direction for each shot is chosen determin-istically based on the position 
of a vertex; this is not a Monte Carlo sampling technique. Figure 7: Reflecting the shooting patch on 
a specular surface. Orig-inal vertices from the environment mesh are shown as dots. This method has several 
important benefits : . In contrast to the original image method , where the entire environment had to 
be reflected into a virtual environment, only the shooting patch need be reflected. 0 The evaluation 
of one specular reflection on a given specular surface can be implemented as a normal shooting step with 
a slightly modified occlusion testing routine. Furthermore, since we are shooting directly to vertices, 
it is possible to re- strict the expensive occlusion testing operation to the portions of the environment 
that can potentially receive reflected light, using a technique similar to a shadow volume [ 141. This 
allows us to retain benefits of the normal ray-casting method, such as adaptive meshing based on the 
results of a shot, and various sampling stategies for the shooting patch. Computer Graphics, Volume 25, 
Number 4, July 1991 . Multiple specular reflections can be implemented by recur-sively creating virtual 
patches. It should be noted that since the shooting patch is the only one that need be reflected, there 
is no explosion of the complexity of the scene. The current implementation is limited to planar specular 
surfaces. If more complex geometries are needed for the specular surfaces, it is no longer simple to 
construct a modified patch from which to shoot. Instead, specular rays can be fired from each receiving 
vertex lying on a specular surface, in a manner similar to [ 171. However, the distribution of specular 
rays then depends on the mesh of ver-tices on the specular surface, with no guarantee that all vertices 
in the environment will receive their share of the specularly reflected light. A major benefit of the 
ray-casting approach to radiosity is then lost. Furthermore, rays must be properly weighted, taking sur-face 
curvature into account, to ensure a physically correct energy transfer. 4.1 Algorithm The pseudo-code 
algorithm in Figure 3 contains two parts involv- ing specular reflection (note that the treatment of 
specular reflection within the first pass occurs entirely within the shooting operation). In the general 
loop that considers all receiving vertices in turn, specular surfaces are flagged whenever one of their 
vertices re-ceives some energy from the shooting patch (Figure 3-C). Entire surfaces (planar patches) 
are flagged regardless of their subdivision into patches or elements, or their number of vertices. Once 
all the vertices have had their directional intensity distri-butions updated with respect to the shooting 
patch, the specular re-flectors are then considered in turn (Figure 3-D). For each specular surface, 
a new patch is created and the occlusion testing function is modified in preparation for a recursive 
call to the shooting proce-dure SHOOT. The new patch is obtained by reflecting the original shooting 
patch and its attached coordinate system across the specular surface A. The new, virtual patch possesses 
the same intensity distributions as the original shooting patch except that they are reflected by virtue 
of the reflected coordinate system. A shot from the virtual patch Pi affects only those vertices in the 
environments that can see the original shooting patch in the spec- ular surface. This is easily accomplished 
by sampling the virtual patch as a normal shooting patch, but using a modified occlusion testing routine 
between the receiving vertex and the sample point. Figure 8 depicts the extended occlusion test. An occlusion 
function (called Sd in Figure 3, and described as pseudo-code in Figure 9) is first called : this function 
first looks for an intersection between the specular surface A and the ray linking the receiving vertex 
V, and a sample point on the virtual patch TS . If no intersection is found, there can be no light reflected 
in that direction, and the function returns. Next, if an intersection point ra was found, a normal occlusion 
test is performed between V, and TS. If the two points are visible to one another, the specular refectunce 
of the specular surface is computed for the appropriate reflection angle at 7-s. If SA returns a non-zero 
value, the only remaining operation con-sists in determining the occlusion between TS and a sample point 
on the original shooting patch, that is, the reflected image of TS (Fig-ure 8). This is accomplished 
by calling whatever occlusion function was in use at the current level of recursion : if we are dealing 
with a first specular reflection, the generic occlusion testing routine Sgenetic is used. At deeper levels 
of recursion, a composite function obtained by previous chaining operations is used. 191, -. T, Figure 
8: Chaining the occlusion functions. Once occlusion be­ tween Vj and ~~ is resolved, the composite occlusion 
test is per­formed between TS and the sample point on the original patch, pos­sibly involving several 
specular reflections. The entire operation can be described as chaining together the current occlusion 
testing function with the occlusion routine for the current specular surface. Note that once point TS 
has been found on the specultw surface, the order in which the two occlusion tests are carried out is 
arbitrary. However, since the occlusion test between TS and Jj is generally a simpler test, it is performed 
first. Function .9A ( Ts , Vj ){ . Find intersection rs between Vj T.s and A If ( No Intersection is 
Found) Then . Return O End If  . Evaluate occlusion c = SEeneriJTS,v]) If(C#l J)Then . Compute specular 
reflectance p> . Return c. qj Else  . Return O End If } Figure 9: Occlusion testing for a virtual 
patch 5 Storing Intensity Distributions The main departure of the current algorithm from previous progres­sive 
radiosity methods is that unshot and accumulated intensities now take the form of distribution functions 
at each vertex instead of scalar values. Because the number of vertices required for an accu­rate simulation 
can be quite large, it is cruciaf that the representation of these functions be economical in terms of 
storage. Moreover, the representation must allow for efficient shooting steps, which are performed many 
thousands of times in the course of a single simu­lation. To fit within tbe framework of progressive 
radiosity, intensity dis­tributions must also be computed incrementally by summing the di­rectional distributions 
resulting from impinging shots. After accu­mulating contributions shot from n sample points on other 
patches, the intensity distribution at vertex k on an isotropic surface is given by the following equation. 
192 II) ,=1 Here 0,, 0:, and A@, are the energy flux, angle of incidence, and azimuthal angle of the 
i th contribution respectively. Here we have expressed the BRDF parameters as angles with respect to 
a fixed local coordinate system at vertex k (Figure 5). The vertical axis of this coordinate system corresponds 
to the surface normal at that vertex though the other axes are arbitrary. We can interpret Equation (11) 
as a sequence of four operations applied to the underlying BRDF, p~, for each contribution arriving at 
vertex k: retrieving the directional distribution for a given an­gle of incidence, scaling and rotating 
this distribution, and finally adding it to the accumulated and unshot distributions stored at the vertex. 
These steps are shown in Figure 3-B. From these operations it is clear that the shape of each intensity 
distribution depends solely on the BRDF associated with the ver­tex and not on the distributions from 
which the energy was shot. While this constrains the class of distributions that can arise at any given 
vertex, the distributions resulting from marry contributions may nonetheless be quite irregular if the 
BRDF has a directional component (Figure 6). We therefore require a representation that is general enough 
to account for this variation while also accommodating the steps in Fig­ure 3-B. High-order continuity 
is also a requirement, since a discrete description, such as the global cube [1I], can result in severe 
alias­ing problems. Furthermore, derivative discontinuities in the inten­sity distributions can cause 
artifacts such as Mach-banding on the illuminated surfaces, even if a perfectly accurate transfer of 
light is computed. In the following sections we describe an approach based on spherical harmonics which 
meets these requirements. Using this mechanism we can compactly and accurately represent arbitrary BRDFs 
and their associated intensity distributions and efficiently perform all of the operations required for 
shooting and incremen­tal creation. It is therefore a nearly ideal mechanism for storing the intensity 
distributions for this global illumination algorithm. 5.1 Approximation using Spherical Harmonics Spherical 
harmonics form an orthogonal basis for the space of func­tions defined over the unit sphere [6]. This 
infinite collection of ba­sis functions is typically denoted by Yl,~(f3, +) where O s 1 < m and 1< m 
< 1. In direct analogy with Fourier series in one dimension, any square-integrable function, f(fl, ~), 
can be repre­sented by an infinite series of the form (12) where the coefficients are given by The practical 
value of this is that a finite number of terms can be used to approximate relatively smooth functions 
defined on the sphere. This allows us to store intensity distributions as a vector of N coeffi­cients, 
where N depends upon the characteristics of the underlying BRDF and the desired accuracy of the approximation. 
A diffuse, smoothly varying BRDF will typically require fewer coefficients than a very directional one. 
@@ To construct such a representation for the intensity distributions we begin by approximating the BRDFs 
in terms of spherical har­monics. In previous work, Cabral e~al, have used a similar approx­imation for 
the purpose of simulating diffuse and glossy reflections of the environment [2]. In the present work 
the dependence of the BRDF on the angle of incidence is accounted for by representing each spherical 
harmonic coefficient as a function of O .That is, for every BRDF we constmct a collection of scalar functions, 
131,m(,), such that 1=0 m-l In this way we can model the behavior of a BRDF over the entire range of 
incident angles. In our implementation the ~{, , functions are stored as one-dimensional cubic splines: 
one for each spheri­cal harmonic in the BRDF approximation. The cos @factor is in­cluded at this stage 
because it reduces evaluation time and tends to reduce ringing in the approximation. Figure 10 shows 
several of these curves for slightly rough aluminum. Additional details on this approximation can be 
found in Appendix A. I o X14 rr/2 Angle of Incidence Figure 10: Seven spherical harmonic coefficients 
for the BRDF of slightly rough aluminum plotted as functions of the incident angle.  5.2 Operations 
on Spherical Harmonic Coefficients Given a BRDF approximationof the form in equation (14) we can constructa 
correspondingintensitydistributionusing Equation( 11). For every intensity contribution we first evaluate 
the BRDF at the given angle of incidence, W, by computing the spherical harmonic coefficients of the 
resulting directional distribution. This consists of evaluating an interpolating spline, B1,~( .), for 
each cmfficient. Next, we scale the distribution by multiplying each of these co­efficients by the energy 
flux. The third step, rotating the distribution about the vertical axis, is made simple by the following 
property of spherical harmonics (shown in real form). Computer Graphics, Volume 25, Number 4, July 1991 
in the BRDF approximation. These coefficients reappear in the in­tensity distributions, however, because 
the symmetry is destroyed when the BRDFs undergo arbitrary rotations. This can be seen in step 3 of figure 
I 1. Initialize: C /,,, -0 For Each Contribution (0, f? , A@) arriving at Vertex k For Each index pair, 
(1, m), used in the approximation of p~ 1. Interpolate: .4~,,r,+ @~(13 ) 2. Scale: A ~,,,, + @ Al,,,, 
A I. m cos(rn A@) 3. Rotate: + A /. , A I. - , sin(m Ao) [1 1 A (, rn 4. Add: + .4 [.-m [$k:: 1+ [ $ 
: [1 End For End For Figure 11: Creating an intensity distribution, When m = O, steps 2 through 4 reduce 
to C~() -C $~)+ @.41,0. As the fourth and final step we add the resulting distribution to the current 
total by adding the corresponding coefficients. Thus, we have rephrased each of the steps in Figure 3-Bin 
terms of operations on spherical harmonic coefficients. The actual steps are shown in Figure 11 where 
the C~rn denote coefficients of an intensity distri­bution at vertex k. It is apparent from these operations 
that summing scaled and ro­tated instances of a single representation introduces no additional coefficients 
once the symmetry has been broken. Therefore, the storage required for a gi\ en intensity distribution 
does not gro~ as intensity is accumulated. Furthermore, the intensity distributions retain the full accuracy 
of the original BRDF approximations. To perform the shooting step we must evaluate an intensity dis­tribution 
in directions toward all vertices to which intensity is to be shot. This requires evaluating the YI,,,, 
functiortsassociatedwiththe coefficients of the intensity distribution in each of these directions. These 
evaluations can be performed efficiently using the recurrence relations shown in Appendix A.   6 Results 
Solutions have been computed for several test environments to demonstrate the feasibility of the simulation 
for wbitrary reflectance distributions. The resulting pictures exhibit all the expected visual effects 
produced by directional diffuse as well as ideal specular en­ergy transfers. Figure 12 shows a side by 
side comparison of a simulated envi­ ronment with a scanned physical environment. The scanned picture 
was obtained by scanning through three colored filters, where each   [:::~::::l=r:::::::)l Krn:e:l 
channel is spectrally integrated over a large range of wavelengths. This propefiy follows immediately 
from the definition of spherical Thus, the comparison with a simulation computed with three well­harmonics 
given in Appendix A. Rotation about this axis is partic-defirred monochromatic channels can only be qualitative 
(for exam­ ularly straightforward, and the usual symmetry of the BRDFs with ple the general color tone 
is noticably different). However, impor­respect to the incident plane simplifies it even further. Because 
neg-tant features such as the structure of the shadow on the left, or the atively subscripted spherical 
harmonics are odd functions with re-illumination of the ceiling via specular reflection from the top 
of the spect to O, we are guaranteed that all such coefficients will vanish tall box, appear to be very 
similar. A related research project is un­  <RefA>[8] He, XiaoDong, Kenneth E. Torrance, Franfois Sillion, 
and Donald P. Greenberg. A comprehensive Physical Model for Light Reflection, Computer Graphics, 25(4), 
August 1991. (Proceedings SIGGRAPH 9 I in Las Vegas.) [9] Heckbert, Paul S. Adaptive Radiosity Textures 
for Bidirec­tional Ray Tracing, Computer Graphics, 24(4), August 1990, pages 145 I 54. (Proceedings SIGGRAPH 
90 in Dallas.) [10] HimIan, Theodore H., Michael C. Monks, Stephen H. Westin, Donald P. Greenberg, and 
Kenneth E. Torrance. Physical Measurement Techniques for Improving and Evaluating Com­puter Graphic Simulations, 
January 1991. (Submitted for publication.) [11] Immel, David S., Michael F. Cohen, and Donald P. Greenberg. 
A Radiosity Method for Non-Diffuse Environments, Com­puter Graphics, 20(4), August 1986, pages 133 142. 
(Pro­ceedings SIGGRAPH 86 in Dallas) [12] Kajiya, James T. The Rendering Equation, Computer Graphics, 
20(4), August 1986, pages 143 150. (Proceedings SIGGRAPH 86 in Dallas.) [13J Le Saec, Bertrand and Christopher 
Schlick. A Progressive Ray-Tracing based Radlosity with General Reflectance Func­tions, June 1990. (Proceedings 
of the Eurographics Work­shop on Photosimulation, Realism and Physics in Computer Graphics (Rennes, France).) 
[14] Nishita, T. and E. Nakamae. Continuous Tone Representa­tion of Three-dimesional Objects Taking Account 
of Shadows and Interreflection, Compurer Graphics, 19(3), July 1985. pages 23 30. (Proceedings SIGGRAPH 
85 in San Fran­cisco.) [15J Press, William H., Brian P. Flannery, and Saul A. Teukolsky. Numerical Recipes, 
Cambridge University Press, New York, 1986. [16] Rushmeier, Holly E. and Kenneth E. Torrance. Extending 
the Radiosity Method to Include Specularly Reflecting and Translucent Materials, ACM Transactions orI 
Graphics, 9( 1), January 1990, pages 1 27. [17] Sillion, Franqois and Claude Puech. A General Two-Pass 
Method Integrating Specular and Diffuse Reflection, Com­puter Graphics, 23(4), August 1989. (Proceedings 
SIG-GRAPH 89 in Boston.) [18] Wallace, John R., Michael F. Cohen, and Donald P. Greenberg. A Two-Pass 
Solution to the Rendering Equation: a Synthesis of Ray-Tracing and Radiosity methods, Computer Graphics, 
21(4), July 1987, pages 31 I 320. (Proceedings SIGGRAPH 87 in Anaheim.) [19] Wallace, John R., Kens A. 
Elmquist, and Eric A. Haines. A Ray Tracing Algorithm for Progressive Radiosity, Compu[er Graphics, 23(3), 
July 1989, pages 3 15 324. (Proceedings SIGGRAPH 89 in Boston.) [20] Whitted, Turner. An Improved Illumination 
Model for Shaded Display: Commun~ations of the ACM, 23, 1980, pages 343 349.</RefA> Appendix A: More on spherical 
harmonics In real form, the normalized spherical harmonics are defined by Ivl,mPf,m(cos e) Cos(rnd) ifm>O 
K,m(o, @)= IVl,clP/.ll(cos e)/ti ifm=O (15) { N~,m Pl,lml(cos @)sin(lml@) ifrn <0 where the normalizing 
constants, IVl,~,, are given by (16) trrL=fw% and the Pl, n, (z) factors are associated Legendre polynomials. 
The latter can be evahrated with the recurrence relations P mm(x) = (1 2m)/=Pm_l,m-l(x) P l+l.m(z) = 
z(2rrl + l)pwt. m(x) PI,,,,(X) = z (~) 1 l. m(~) (*) PI Z, WL(Z) beginning with F o,o(z) = 1 [15]. Applying 
these in conjunction with recurrence relations for generating sin(~), sin(2@), . . . . sin(rn~) and COS(0), 
cos(2q5), . . . . cos(rqb), it is possi­ble to evaluate spherical harmonic expansions using approximately 
10 floating point operations per coefficient and no trigonometric function evaluations whatsoever. Evaluation 
of the spherical harmonic functions is required for two pu~ses: shooting from an intensity dktnbution 
and creating the initial BRDF approximations. The former is a straightforward application of Equation 
12 while the latter is more complicated and is performed once per distinct BRDF. To approximate an isotropic 
BRDF for all incident angles, we first compute forj=O, l,... qwhere O=O~ sO; ~ . . ~,0~ = n/2. Then the 
functions EJI,~ can be approximated by cubic mterpoiating splines through the the points (ON,b~,,n ), 
(O?, b~,m ),. . . . (o:, b~,m ). For each distinct BRDF, p, we select q as well as a specific set of 
spherical harmonic coefficients to achieve the desired accuracy of approximation over all incident angles. 
The value of q affects the accuracy of the interpolation but does not otherwise influence the intensity 
distributions. In contrast, the number of coefficients used in the BRDF approximation directly determines 
the sorage required for the intensity distributions. It is therefore important to keep this number reasonably 
small. If the BRDF that we wish to approximate is only defined on the upper hemisphere, as with an opaque 
material, we extend the func­tion to the lower hemisphere before computing the approximation. We do this 
in such a way that the complete BRDF satisfies (40 .0,4) = p(fY ,7r t?,qi), (18) This introduces a vertical 
symmetry which has the advantage of eliminating all spherical harmonics for which 1+ m k even. Italso 
maintains C 1continuity between the upper and lower hemispheres when the function is zero at the equator, 
a corrdhion that is guaran­teed if the cos O factor is included as described in section 5.1.  
			
