
 A Logical Framework for Software Proof Reuse* Joshua E. Caplan Mehdi T. Harandi caplan~cs. uiuc. edu 
harandi~cs. uiuc. edu Department of Computer Science, University of Illinoisan Urbana-Champaign Abstract 
We describe a logical framework PR for verification of reusable software components. Within our system, 
developers can employ the advantages traditionally as­sociated with software reuse to reduce the cost 
of soft­ ware verification by reusing abstract proofs and spec­ifications. One can construct an algorithm 
with pa­rameters, a specification with parameters, and a proof that the algorithm satisfies the specification 
provided the parameters satisfy certain conditions, Proofs in PR will themselves contain parameters for 
subproofs concerning those conditions. In this framework, typ­ing, type checking, and proof checking 
are decidable. 1 Introduction A reusable software artifact is most useful when it carries verification 
information, including assertions, data invariants, and restrictions on subtasks or data structure operations. 
The aim of our research has been to provide a logical framework which allows one to construct an algorithm 
with parameters, a specifica­ tion with parameters, and a proof that the algorithm satisfies the specification 
provided the parameters sat­isfy certain conditions. We treat the proviso above as a need to allow parameters 
in the proof as well (rang­ ing over proofs of the requisite conditions). Once one has built a library 
of widely-applicable parametric algorithms and their proofs, one can ver­ ify each closed instance (program) 
by plugging appro­ priate sub-proofs into the abstract proof rather than constructing a complete proof 
from scratch. Proof reuse is just this practice. The redundancy in proving *This work is partially supported 
by NASA grant NAG 1-613 (ICLASS). Permission to copy without fee all or part of this material is granted 
provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright 
notice and the title of the publication and its date appear,, and notice is given that copying is by 
permission of the Association of Computing Machinery.To copy otherwise, or to republish, requires a fee 
and/or specific permission. SSR 95, Seattle, WA, USA 0 1995 ACM 0-89791 -739-1/95/0004 .,,$3.50 the correctness 
of similar algorithms is minimized or eliminated in much the same way as in programming similar algorithms. 
The cost of building the abstract proof for the abstract algorithm can be allocated to the many concrete 
algorithms and proofs created from it, substantially reducing the cost of program verifica­t ion. In 
short, the many benefits of software reuse can also be enjoyed in software verification. Harandi and 
Young [5] argue that a standard set of correct abstract algorithms is necessary to reduce the development 
time and improve the quality of new software. Within each individual domain, specializa­tion modules 
for use with these abstract algorithms can be developed separately and plugged into them later. Software 
development becomes a simple, mech­anizable process of plugging pre-developed and pre­verified components 
t oget her. After some research, we have come to know this utopian vision as Code Reuse Run Amok, for 
it overlooks the increase in complex­ity arising when modules for specialization have to be contorted 
to conform to the specifications given in their destined abstract algorithm. In order for an algo­rithm 
to be abstract enough to function across vastly different domains, it must be applicable irrespective 
of the data type and representation of its target, and thus consist solely of control information. Standard 
algorithms, however, tend to be closely coupled to as­pects of the data structures underlying them. The 
specialization modules end up cent aining nearly all the interesting code. Extracting the trivial remain­ing 
control information into abstract algorithms and breaking up the specialization modules according to 
that control seems to create more work than using a standard object-oriented or functional approach to 
development. The paradigm we suggest as an evolutionary re­sponse to [5] lets programmers remain programmers. 
It is the logical framework for constructing highly ab­stract programs which must be tractable for develop­ers, 
so that they can pursue their own reuse strategy and still mathematically verify the correctness of their 
software, no matter how abstract. Our framework consists of a formal system PR for building programs 
in an Algol-like language and program proofs in a Hoare-like logic. Typing, type checking, and proof 
checking are decidable. We chose this programming language because it is a relatively clean integration 
of imperative programming with higher-order functional programming, so it is expres­sive enough for most 
typical kinds of reuse. We chose Hoare Logic as a starting point, for it remains the clearest system 
for reasoning about basic imperative programs. The system we have developed is interest­ing in its own 
right, but the technique used to create it is perhaps of more importance, as it appears to be applicable 
to the creation of similar systems for a vari­ety of programming languages and logics. By virtue of the 
technique, there is room for improvement in two orthogonal directions, upon which we will elaborate further 
in the conclusion. Programmers cannot be expected to work within a formal system by hand; the system 
can be imple­mented on a computer in the form of a proof assistant for developers. Our approach haa proved 
beneficial in this respect, as well, for producing an implement a­tion of PR is as simple as entering 
its signature into any existing implementation of the Edinburgh Logical Framework (LF), of which there 
are several. We have also built a simple implementation of LF and used it in this way to debug and check 
the toy example in section 5. Existing heuristics for automatic verifica­tion, and the notion of proof 
tactics [4], could also be incorporated to partially automate proof search in a more practical implement 
ation. Related Work Constructive Type Theory in computer science haa been an active area of research 
for the last fifteen years. Most incarnations are built around a typed A­calculus in which terms and 
proofs are identified, and likewise types and specifications are identified, so that uniform abstraction 
is possible at all levels (see, for example, [8, lfl ). These systems provide reasonable support of the 
kind we seek for purely functional lan­guages, but are usually lacking in handling general re­cursion 
or imperative features. Adding general recur­sion has been explored most prominently by R. Con­stable 
and S. Smith [3, 14, 15]. Some work, in par­ticular the dissertation of V. Swarup [16], has focused on 
extending type theory to deal with the addition of assignments to the programming language. The re­sulting 
language enjoins a novel continuation-passing style of programming, and an even more unusual form of 
proof. Mainstream attempts to extend Hoare Logic di­ rectly aa a proof calculus for procedures have 
had limited success, usually restricted to a small portion of the full A-calculus of Idealized Algol 
[1 I], and not supporting abstractions of proofs or dealing with in­terference. J. Reynolds has embedded 
Hoare Logic as the atomic formulas of a first-order theory for Al­gol called Specification Logic [12], 
which incorporates predicates for directly reasoning about interference between identifiers. Another 
approach, also spear­headed by Reynolds [10, 13] and further taken up by P. O Hearn and R. Tennent [9] 
haa been to restrict the programming language using syntactic means to prohibit interference from occurring, 
which enables a much cleaner form of Specification Logic but limits the set of valid programs in non-trivial 
ways. Specifically pertaining to our technique, there have been two published formalization of Hoare 
Logic in the Edinburgh Logical Framework, which appear in [1, 7], In one formalization, new judgment 
forms denoting non-interference and non-identity of program variables are used to express a correct assignment 
ax­iom, aa in Specification Logic. The other formaliza­tion is a family of signatures, one signature 
for each choice of program variable set; each one turns out to be adequate for a fragment of our calculus 
QHLO (sec­tion 4.1.3), but certainly not for full Hoare Logic. 3 Reuse and Abstraction The essence of 
reusability is abstraction. In the system we seek, there is a clear need for abstraction at the following 
levels. Values: Functions and procedures, which arise from value abstraction, are often reused many times 
within a single piece of software. Types: The presence of polymorphism greatly in­creases the reusability 
of datatype-independent algorithms. Programs: Reuse across the development of differ­ent systems can 
be facilitated by allowing meta­programs and higher-order programs. Specifications: The specification 
of a sufficiently ab­stract artifact may depend on the specifications of its parameters. Proofs: In general, 
we can only verify a reusable ar­tifact in terms of assumed proofs concerning its parameters. Systems 
for software reuse and verification usually in­clude abstraction of only the first three kinds, and sys­tems 
for formal specification often allow abstraction of the fourth sort as well (but have no formal notion 
of proof). Having identified these categories of need, the ten­dency might be to design a framework which 
takes the five kinds of abstraction as separate primitive notions. The result would be both excessively 
complicated, for with five kinds of lambda one needs five times as large a semantics, and unnecessarily 
restrictive, for there is no reason to believe the above list is exhaustive. In­stead, we have sought 
a solution within the elegance and simplicity of type theory. The following examples are intended to 
demon­strate both the utility of the approach and the ne­cessity for the levels of abstraction listed 
above. 3.1 Choose Our domain is arithmetic on the reals and the nat­ural numbers; we intend to implement 
a program choose to compute the binomial coefficient ( ~ ) of numbers n and k in terms of the factorial 
expansion n !/(k !(n k)!), That is, we will assume the existence of a program .f for computing the 
factorial of a num­ber, and  a proof @ that ~ is correct.  In order to write the desired program c 
in terms of j and give a proof X, in terms of ~ and +, that c is cor­rect, our system must support abstraction 
over values (so that c can be a procedure), programs (so that c can refer to ~), and proofs (so that 
x can refer to ~). Having built x, we can implement choose using any implementation of ~ and assure 
that choose is correct just by proving the correctness of $. This example will be taken up further in 
section 5. 3.2 Flowlines Our domain is geological map algebra. We desire an algorithm ffow which takes 
an elevation map and aspect (direction of water flow) map for the same area and produces a runoff density 
map and a flow vector map. Parameters include c the type coord of coordinates, where maps con­sist of 
finite functions from coordinates to values, the type point of points, o a hash function H from points 
to coordinates, a representative function R from coordinates to designated points within them, and a 
routine n which computes the next point on a flow vector given elevation and aspect maps. Dif­ferent 
algorithms for n reflect different geological models of flow. The types coord and point and the functions 
H and R properly belong in a standard library for map alge­bra. As new representations and implementations 
of the library are developed, the duly updated instances of the flowline algorithm should remain correct 
with­out any modifications. We may even want to aHow access to various versions of n as options at runtime. 
In the specification, we insist that for any input maps E and A, flow produces output maps D and F, where 
each coordinate c in D contains the number of coordinates in F with flow vectors passing through c, and 
each coordinate d in F contains a flow vector such that each point follows from the preceding via n. 
Because n is by nature an approximation, we cannot constrain it (aside from giving its type), but we 
still use it as a parameter in the abstract specification of flow. The algorithm itself runs as expected: 
for each coordinate c i:=(); p:= R(c); repeat addptol; c:= n(p) (E) (A) ; case cof SOME p ~ if H(p )~{H(q)]q 
Cl} increment D (H (p )) ; p := p until c = NONE ; F(c) := i In the proof of the algorithm, we will 
rely on proof parameters validating the correctness of the library functions, demonstrating things like 
(VZ)[H (R (z)) =  3.3 Divide and Conquer Our domain is completely generic. The parameters of our algorithm 
cfivconq will be the input type D, output type A, operations s, d, c, and m, specification S, and proofs 
a and A. Intuitively, e s decides if an input object is small enough to be directly solved by c, a is 
a proof that c is correct with respect to S for small input,  d divides a large input object into a 
list of smaller input objects,  m merges a list of output objects into a single output object, and 
A is a proof that for large input k, if/ is a list of correct (with respect to S) outputs for the mem­bers 
of d(k), then m(t) is a correct output for k. The algorithm looks something like divconq (i) ~ ifs (i) 
then c (i) else m (map (divconq) (d (i))) and the specification indicates that given satisfactory parameters 
as above, for any input i, S(i, divconq (i)). To formally construct artifacts and the proof of cor­rectness 
6, we must support all five types of abstrac­tion. The resulting proof 6 will perform an abstract induction; 
to confidently use divconq in an actual pro­gram one must merely instantiate its parameters and build 
the two smaller proofs u and A. With an artifact as abstract as divconq, however, we can do more. For 
example, certain special cases can be derived from it by instantiating only some of the parameters; the 
resulting artifacts are slightly more concrete and have simpler proof obligations. If ab­straction is 
supported on all levels in a uniform way, as envisioned, then the degree of abstraction and the potential 
for reuse is truly up to the developer. 4 The Framework The development proceeds in two stages. First, 
we give a syntactic modification of Hoare Logic which re­pairs its non-standard behavior with respect 
to sub­stitution. Second, we embed the expressions and rules of the modified logic in a typed A-calculus, 
afford­ing a means for formal abstraction over programs and proofs. 4.1 Quantified Hoare Logic 4.1.1 
Standard Hoare Logic The usual natural-deduction formulation of Hoare Logic, defined relative to an underlying 
first-order lan­guage L and first-order L-theory of expressions T, is given in table 1, There is only 
one judgment form, asserting the validity of a Hoare triple. The other judgment form which appears in 
the rule of conse­quence (Con) is that of T, so we consider Con to be schematic not only in the meta-variables 
P , P, Q, Q , c but also in the derivations of the L-formulas P * P and Q + Q . Each rule in table 1 
should be read as: If we instantiate the meta-variables, and we can find proof trees to match each judgment 
above the line, Table 1: Hoare Logic. (Assign) {P[t/z]} z := t {P} {P} c{Q} {Q} d{lt} (Sfw) {P} C ; d{R} 
(If) {P Ab}c{Q} {P} if b then {PA -Ib}d{Q} c else d{Q} (While) {PA {P}while b}c{P} b do c{PA =b} (New)* 
{PA y {P}new = e} c[y/z] {Q} z:= e ; c {Q} (Con) P >P {P}c{Q} Q+Q {P } c{ Q } y not free in P, e, c, 
or Q then we get a new proof tree by attaching them as chil­dren to the judgment below the line. As 
presented, there are no closed Hoare triples, because every pro­gram must contain at least one assignment 
(with a free identifier). Notice that free identifiers in first-order formulas are implicitly universally 
quantified; a formula s valid­ity is immune to substitution because universal elimi­nation is a sound 
rule in first-order logic. Free identi­fiers in Hoare triples do not enjoy the same genericity. For example, 
the triple is valid, but ~[z/z, z/y] = {true}z := z + 1 {z < 2} is not. Validity is not preserved by 
substitution in Hoare Logic. In the simple programming language of Hoare Logic, substitution never arises, 
and all distinct iden­tifiers implicitly denote non-interfering program vari­ables; that is, assigning 
to one will not affect the value of any other. In a language with procedures, such as Algol, the assignment 
axiom breaks down because sub­stitutions occur with each procedure call. The typed Xcalculus into which 
we wish to embed Hoare Logic also permits substitution by nature, but the inhabit­ability y of any type 
is always preserved by subst itut ion; thus we cannot use the form of Hoare Logic given in Table 1. Instead, 
we give an essentially equivalent formulation of Hoare Logic, the set of whose valid for­mulas is closed 
under substitution. 109 (command) ::= V := E I ((command) ; (command)) 1 (if Q then (command) else (command)) 
I (while Q do (command)) I (new V:= E ; (command)) (spec) ::= {F} (command) {F } I VV (spec) Table 2: 
Quantified Hoare Logic: Syntax. (Assignn,~) v2{P[t/zm]} Zm := t {P} VF{P}C{Q} V3{Q}d{R} (Seqn) V2{P}C 
; d{l?} V3{PAb}c{Q} VF{PATb}d{Q} (Ifn) d~{F }if bthenc else d{Q} VE{PAb}c{P} (Whilen) d~{P}whilebdo c{PA~b} 
d~{PAzm=e}c{Q} (Ne%,m)* ~~-~{~}new z~ :=e ; c{Q} P *F b Z{P}c{Q} Q+. Q (Conn) V;{ P } c {Q } m,n Ew, 
O<n, l<m <n, 9Zx~. ,.xnin all rules Vi?-m s Vxl ,. .Vxm lvxm+l . ..vxn *Provided x~ not free in P, e, 
or Q Table 3: Calculus QHLO for Quantified Hoare Logic. 4.1.2 Syntax Let L be a first-order language, 
V the set of variables, E the set of L-terms, F the set of L-formulas, and Q the set of quantifier-free 
L-formulas. The set of formu­las (spec) of Quantified Hoare Logic (over L) is given by the grammar in 
table 2. We call the formulas of Quantified Hoare Logic specs. Substitution is defined for Quantified 
Hoare Logic just as for Hoare Logic, except that V is a binding operator. 4.1.3 Proof Calculus QHLO 
A proof calculus for Quantified Hoare Logic, called QHLO, is given by the axioms and inference rules 
of Table 3. We say \. @ just in case # is derivable via the rules. In this calculus there are no active 
open deriv­able specs, i.e., the active identifiers are all bound by d or new. Observe that the quantifier 
d does not act vw7x dyb zq5(Exch) dwYyvxv2(f) [*1, ~;. ,4771 V X*l . . . Q X?)n (b Intron)t t Provided 
z is free only in discharged hypotheses. Table 4: Structural Rules of Calculus QHLU for Quan­ tified 
Hoare Logic, as a medium for instantiation, as does the universal quantifier of first-order logic. There 
is no analogous d-elimination rule in QHLO. Rather, through the as­signment axiom, we force identifiers 
appearing on the left-hand sides of assignments in the command por­tion of derivable specs to be bound 
by V. The prefix acts as a context keeping track of actively-occurring identifiers (and protecting them 
from substitutions). It is possible to show that the provable specs of QHLO are just the provable triples 
of standard Hoare Logic with (at least) all their active identifiers bound by V or new.  4.1.4 Proof 
Calculus QHLW Each rule of QHLO either preserves exactly or de­creases by one binding the prefix(es) 
of its antece­dent(s). This feature makes it difficult to combine proofs of different size prefixes. 
We therefore add the so-called structural rules of table 4 to QHLO, calling the resulting calculus QHLU. 
It is possible to show that the two calculi QHLO and QHLW are equivalent with respect to theorems, and 
that the valid formulas of both calculi remain valid under substitution. 4.2 Embedding Into &#38;Calculus: 
The Sys­tem PR To turn QHLU into a viable programming logic, we can formally represent it in a meta-logic 
like the Edin­burgh Logical Framework (LF) [1, 6]. Readers familiar wit h the LF type theory are referred 
to [2] for a rigor­ous and detailed description of the following system. In PR there are two kinds of 
entities, terms and types. Types include syntactic categories, like the set of commands or the set of 
assertions, and judgments, like the set of first-order natural deduction proofs of a certain assertion. 
Terms include synt attic objects, like commands and assertions, and representations of proof trees. We 
allow variables of any valid type to occur in expressions, in accordance with our require­ ment for abstraction 
from section 3, but in order to do so soundly we introduce contexts which assign types 110 to free variables 
in term and type expressions, We allow the formation of J-abstractions from any term, which let us formally 
construct abstract programs and proofs, and applications of terms of the appropriate types, which permit 
us to formally specialize these ab­stract programs and proofs. We use the notation r F A to mean that 
A is a type in context r and r 1-M :A to mean that M is a term of type A in context r. If the context 
is irrelevant we will simply write 1-A and M : A. The following three subsections constitute a simul­taneous 
inductive definition of contexts, types, and terms.  4.2.1 Contexts 0 is a context;  if 17 is a context, 
z is a variable not appearing in r, and I F A, then I )z : A is a context.  4.2.2 Types Let 17 be any 
context. t-exp, t-assert, 1-var, 1-comm, F spec,  if 1? F a : assert, then I h T(a);  if r 1-s :spec, 
then r 1-H(s);  if I FAand I , x: Al-B, then 17F~~,~B. If z does not occur in 1?, we abbreviate ~=:~ 
B to A+B.  4.2.3 Terms r be any context. ifx:AEI then I t-x:A; if I 1-v : var, then r 1-VT: exp; for 
each first-order term t of 2 , t:exp; for each first-order formula a in T, a : assert; for each command 
c of the simple programming language of Hoare Logic, c : comm; for each spec s of Quantified Hoare Logic, 
s : spec; axiom and inference rule schemas of first-order natural deduction are constants, like A-Intro 
: ~.,a~,ert ~b:agsert T(a) + T(b) + T(a A b); axiom and inference rule schemaa of QHLW are constants, 
like AsgnAxl,l : ~P: exp-mssert I-L:vmexp H(VZ {P(tx)}z:= tz {P (z~)}); if I , x: At-M: B,then I k Ax:A. 
M :~z,AB;  if17t M:~z:~Bandr l-N :A, then I F M(N) : B[N/z].  It can be demonstrated that the terms 
of type T(a) correspond bijectively to the proofs in T of a, and similarly that the terms of type H(s) 
correspond bi­jectively to the proofs in QHLW ofs. In particular, if a happens not to be a theorem of 
T then it will be impossible in our system to construct a term of type T(a) (in the empty context). 
4.2.4 Reduction A term which looks like (Ax : A . M)(N) is called a /?­redex and reduces to M[N/x], its 
contra ctum. If any subterm K of a term (resp., type) M is a /3-redex, then M reduces to a new term (resp., 
type) M which arises from M by replacing K with its contractum. A term which looks like Ax : A. (M(x)), 
where z does not occur free in M, is called an q-redex and reduces to M. As above, subterms can be reduced 
within larger terms or types. A normal term is one containing no redexes. It can be shown that for any 
term, the process of repeatedly reducing every redex within it in any order eventually terminates in 
a normal term. Two terms are called ,@-equivalent if they both reduce to the same normal term, modulo 
the names of bound variables. For pur­poses of assigning types to terms, we consider terms and types 
only up to ,&#38;pequivalence. 5 Example Returning to the toy example of section 3.1, we wish to demonstrate 
proof reuse in system PR. Sup­ pose 17 An ~ : exp + var + comm. The following simple program implements 
choose in terms of proce­dure t which is assumed to compute the factorial of its first argument and assign 
the result to its second argument: choose ~ Am : exp .Ak : exp .Ac : var. newa:=O; ~(k)(c) ; ~(rn-k)(a) 
;c:=c~xa~; $ (m) (a) ; c:= aT/cT. r 1-choose : exp -+ exp + var -+ comm To prove this abstract program 
correct, we must create Then the term a proof term for it which has parameters ~ for the Choose[fac/j, 
Fat/#] : factorial and @for a proof that .f is correct. So suppose l-rm,k:exp we have a larger context 
H(VC{IC < m} choose[fac/f] rnk C{CT = (~)}) ~ : exp + var --+ comm is a proof that instantiating the 
abstract choose pro­ ~, d~ # rIR:assert rIi:exp cedure with fac yields a correct concrete choose pro­H(Vb{R}f 
(i)@) {RA bT = i!}) 1 [ cedure. We note that two active identifiers, c and a, appear in the inner command 
of choose, and that f is used once with c and twice with a as the second (active) parameter. The supposed 
proof ~ mentions only one active identifier, b. We must use structural rules to derive from @ proofs 
for the two different uses of f which occur:   42,1 : ~i:.xp ~R:a~~ert H(Vc v a {R} f (i) (c){R A CT 
= i!}) 42,2 : flR:aw@ ~kp H(VcVa {R} f (i) (a) {R A at = i!}). From there it is relatively straightforward 
to construct a term Choose with typing I } Choose :  llm,k:exp H(b c{k <rn}choosernkc{ct= (~)}). This 
example illustrates two things: the gain in ex­pressiveness over standard Hoare Logic via the type theory 
of the underlying A-calculus, and the manner in which proof reuse in our system is moderated by the need 
to prevent interference of active identifiers. Had we been able to bind all the identifiers used in the 
types of # and Choose using ~, we could have used A abstraction and application to produce 42,1 and 42,2. 
But we could also have produced a proof of an invalid spec, because we could cause b and i to be substi­tuted 
with the same variable. In the type of ~, the V-binding of b insures that b and i cannot interfere, and 
the structural rules let us maintain just enough flexibility in our locally-bound environment to prevent 
the incorrect proofs of a more naive encoding. It is even simpler to produce an actual implementa­tion 
of the factorial and to prove its correctness with terms fac ~ Ai :exp. Ab :var. newn:=i; b:=l; while 
(~n~ = O) (b:= b~xnT; n:=n~-1) fac : exp+var+comm Fac : ~R:assert ~i:exp H(Vb {R}fac (i) (b) {R A bt 
= i!}), 6 Conclusion We have presented a system PR for abstract rea­soning about abstract programs, allowing 
proofs to be reused in the same way as the programs they prove correct. We have achieved the system via 
a straight­forward embedding of a modification of Hoare Logic into a typed J-calculus, thereby treating 
abstraction at all levels uniformly. The important issue of control­ling interference of active identifiers 
is addressed via the syntax and structural rules of the calculus. Typ­ing, and thus proof checking, is 
decidable. A prototype proof checker has been built and employed by simply entering a signature for a 
finit ary variant of QHLW into an existing implementation of the Edinburgh Logical Framework. By virtue 
of the simple definition of PR, we are con­tinuing the work begun here in two orthogonal direc­tions. 
Currently, the major weaknesses of the system are the absences of complex data structures, abstrac­tion 
over types (polymorphism), and recursive func­tions. It is easy to allow the theory T of expressions 
to be multi-sorted, which slightly improves the datatype capabilities. We are currently investigating 
a more ex­tensive base system than QHLW which internalizes the set of phrase types of Idealized Algol 
[11] and the no­tion of reduction in order to obtain a system for the full language via the embedding. 
However, we are also exploring various extensions to the type theory of the J-calculus itself, which 
is extremely minimal in the current paper. The embed­ding given here exploits primitive type constructors 
of LF to represent the procedural types of Algol. Em­bedding QHLU into a more expressive type theory, 
provided it remains decidable, will accordingly im­prove the power of the resulting PR. In particular, 
we are examining the incorporation of certain induc­tion principles which would at least allow reasoning 
about primitive-recursive functions at all types, and of certain standard type constructors, such as 
carte­sian products and disjoint sum (union) types. Thus the basic phrase type constructors of Algol 
would be available in the embedding via the same signature of section 4.2. Our goal, by either route, 
is to fully incorporate all the kinds of abstract algorithms and proofs sampled in section 3. Acknowledgements 
 We wish to thank Uday Reddy for many helpful discussions. References <RefA>[1] A. AVRON, F. HONSELL, I. A. 
MASON, AND R. POL-LACK, Using typed A-calculus to implement formal sys­tems on a machine, Journal of 
Automated Reasoning, 9 (1992), pp. 309 354. [2] J. E. CAPLAN, Formalizing Hoare Logic, in Second ACM 
SIGPLAN Workshop on State in Programming Languages, San Francisco, Jan. 1995, Association for Computing 
Machinery, pp. 1-18. Available as Uni­versity of Illinois at Urbana-Ohampaign tech. rep. UIUCDCS-R-95-1900. 
[3] R. L. CONSTAELE AND S. F. SMITH, Partial objects in constructive type theory, in Symposium on Logic 
in Computer Science, Ithaca, New York, 1987, pp. 183­ 193. [4] M, J, C. GORDON, R. MILNER, AND C. P. 
WADS-WORTH, Edinburgh LCF : a mechanised logic of com­putation, vol. 78 of Lecture Notes in Computer 
Sci­ence, Springer-Verlag, Berlin, 1979. [5] M. T. HARANDI AND F, H. YOUNG, Sojtware design using reusable 
algorithm abstractions, in Software En­gineering 88, University of Liverpool, July 1988, Insti­tution 
of Electrical Engineers/British Computer So­ciety, The Institution, pp. 93 97. [6] R. HARPER, F. HONSELL, 
AND G. PLOTKIN, A jrame­work for dejining Iogics, Journal of the Association for Computing Machinery, 
40 (1993), pp. 143-184. [ 7] I. A. MASON, Hoare s Logic in the LF, Tech. Rep. ECS-LFCS-87-32, Laboratory 
for the Foundations of Computer Science, Edinburgh, Scotland, 1987. [8] B. NORDSTROM, K. PETERSSON, AND 
J. M. SMITH, Programming i? Martin-Lof s Type Theory: An In­troduction, vol. 7 of International Series 
of Mono­graphs on Computer Science, Clarendon Press, Ox­ford, 1990, [9] P. W. O HEARN AND R. D. TENNENT, 
Syntactic cora­trol of interference revisited, May 1994. [10] J. C. REYNOLDS, Syntactic control of interference, 
in 5th AnnusJ ACM Symposium on Principles of Pro­gramming Languages, Tnscon, Arizona, 1978, Associ­ation 
for Computing Machinery, pp. 39 46. [11] The essence of ALGOL, in Algorithmic Lan­guage;, J. W. de Bakker 
and J. C. van Vliet, eds., North-Holland, 1981, pp. 345-372. [12] , Idealized ALGOL and its specification 
logic, in Tools and Notions for Program Construction: An Advanced Course, D. N6el, ed., Cambridge University 
Press, 1982, pp. 121-161. [13] , Syntactic control oj interference, part .2, in International Colloquium 
on Automata, Languages, and Programming, G. Ausiello, M. Dezani-Cianca­glini, and S. Ronchi Della Rocca, 
eds., vol. 372 of Lecture Notes in Computer Science, Springer-Verlag, Berlin, 1989, pp. 704-722. [14] 
S. F. SMITH, Partial Objects in Type Theory, PhD thesis, Cornell University, Ithaca, New York, Aug. 1988. 
[15] , Partial computations in constructive type the­ory, tech. rep., The Johns Hopkins University, 
Balti­more, Maryland, Feb. 1991. [16] V. SWARUP, Type Theoretic Properties of Assign­ments, PhD thesis, 
University of Illinois at Urbana-Champaign, Urbana, Illinois, 1992. [17] S, THOMPSON, Type Theory and 
Functional Pro­gramming, International Computer Science Series, Add~on-Wesley, Wokingham, England, 1991. </RefA>
 
			
