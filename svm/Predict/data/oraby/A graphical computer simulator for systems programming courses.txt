
 A Graphical Computer Simulator for Systems Programming Courses Mark Newsome and Chemi M. Pancake Department 
of Computer Science and Engineering Auburn University, AL 36849 mnewsome@eng. auburn. edu, pancake @ducvax. 
auburn. edu xSICSIH is an X-based graphical interface for the SICSIM computer simulation tool. Its graphical 
portrayal of register-level components tmwforms the black box SICSIM machine into a visual computer , 
helping students understand how com­puters work. Single step, fast-ezecution, and break­points are among 
the control features helpful for de­ bugging assembly language programs. Automatic disassembly and format 
conversions and displays for comparing expected to actual execution reduce fiwstmtion in debugging loader, 
macro processor, and assembler projects. Overview Computer simulation tools (CSTS) are becoming increasingly 
popular in the computer science cur­riculum. These tools employ software simulation to mimic the behavior 
of other hardware systems. From an educational standpoint, CSTS offer several benefits: By using software 
layers to extend the capabil­ities of the underlying system, a CST can pro­vide students with hands-on 
experience, with­out the need to invest in specialized hardware. Tools such as PARALLAXIS [I], for example, 
simulate costly SIMD and MIMD multiproces­sor systems.  A CST can monitor the execution of stu­  dent 
programs, providing feedback in situa­ tions where direct execution would be impos­ sible or impractical. 
VHDL [2], for example, simulates machine execution based on an ar­ chitectural specification, allowing 
the student to test hh or her design. Permission to copy without fee ell or part of this material is 
granted provided that the oopiee ara not made or diatributad for direct commercial advantage, the ACM 
copyright notice and the title of the publication and ite date appear, and notice is given thet copying 
ia by permieeion of the Aeeociation for Computing Machinary. To oopv otharwise, or to rapubliah, requires 
 fee end/Or specific permission. 01992 ACM 0-88781 -488-8/92/0002/0157 . ..$1 .50 157 Because the CST 
intervenes between the user and the system, it can mask irrelevant details in order to maximize the educational 
experi­ence. ASSIST [3], for example, hides the intri­cacies of assembly-language 1/0 by providing a 
series of high-level pseudo-instructions. Since a CST is implemented completely in soft­ware, it can 
simulate hypothetical as well as real systems. MicMac [4] and CPU SIM [5], for example, allow students 
to study computer or­ganization through abstract instructions which approximate, but do not duplicate, 
the behav­ior of actual machines. Because they are designed for use in a variety of educational settings, 
CSTS often are sup­ported across a range of computer systems. The SICSIM program [6], for example, is 
writ­ten in standard Pascal and has been installed on such diverse platforms as VAX/VMS, MS-DOS, and 
UNIX. Unlike computer-assisted instructional tools in other disciplines, however, existing CSTS employ 
only the most rudimentary user interface mech­anisms. They rely on typed commands for in­put and, with 
few exceptions, provide only a sin­gle text-based output stream (CPU SIM and other Macintosh-baaed systems 
make use of multiple win­dows, but their contents are purely textual). Tuto­rial facilities are noticeably 
lacking, and online help is limited to terse explanations of comrnandl syntax. In the systems programming 
course at Auburn University, we employ the SICSIM simulator, de­veloped by Leland Beck to accompany Eis 
popu­lar text [7]. Source code for SICSIM is distributed with the text and is easily installed on most 
Pas­cal hosts, It simulates the SIC/XE, a hypotheti­cal machine designed to reflect the features of such 
diverse systems as IBM 360/370, DEC VAX, and Intel 80x86. Beck s model is admirable in its abil­ity to 
expose students to the variety of instruction formats and addressing modes commonly found on popular 
real machines, while ignoring their idlosyncracies. SIC/XE s 59 instructions are dl­vialed into four 
formats which support 18 address­ing modes, integer and floating point arithmetic, and device-level 1/0. 
The model provides a uni­form basis for teaching the fundamentals of assem­bler, linker, loader, macro 
processor, and to some extent, compiler design. The accompanying simu­lator makes it possible for students 
to write systems software for the SIC/XE, then execute their object code and observe the results. SIC 
SIMULATOR VI. S comnm:s fT~RT,R(w,E(mTER,D(m, H(comT,B(KPTsQ(uIv Sm COBIll~D: S(TIRT,n(UU,E(mTER,(KPT,Q(UIT? 
D(UMP,E(COU3T,B DR~ A=FFFFFF X=FFFFFF L=FFFFFF B=FFFFFF S=FFFFFF T=FFFFFF P=OOOOOO CC=LT COII04AMD: 
S(TART, R(U3,E(19TEB,D( UHP, H(COUET,B(KPT,Q (UXT? D 0000-0090 ~ 0000 6910087A 1740034B 10002EO3 40002900 
0010 01332007 4BIOO06C 3F2FEC03 20 E.90F20 0020 69010003 0F40004B IOO06C3E 4003B410 0030 B400B440 76100800 
E3203A33 2FFADB20 0040 34AO0433 200857&#38;0 31 B8503B 2FEA67A0 0050 29eDOOOl 90411340 004FOOO0 B4107740 
0080 00E32012 332 FFA53 AOIODF20 09B8603B 0070 2FEF4FO0 00F10046 4F460000 00000000 0080 FFFFFFFF FFFFFFFF 
FFFFFFFF FFFFFFFF 0090 FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF CDHI!AlfD: S(TART,R(US,E(ETER, D(UIIIP, H(COUYT,B(KPT, 
Q(UIT? R~ iOti IK4TRUCTIOES EXECUTED P=OOO06F COSMMD:s (TART, R(IJM, E(ETER,D(UHP, H(COUST,B(KPT, q(urT? 
Him COHMAED:S(TART, Il(US.E(llTER, D(UHP, H(COWT,B(KPT, q(UIT? R~ I fisTRucTIOms ExEcuTED P=ooooel COllMAMD:S 
(TART, R(US, B(ETER, D(UHP, E(COUIT, B(KPT, Q(UIT? Rn 1 IESTRUCTIOES EXECUTED P=OOO064 COHHAMD:S(TART, 
R(U8,E(BTER,D(UHP, H(COUIIT, B(KPT, Q(UIT? D 0000-0090 ~ EO E$?JDIHGADDRSSS SPECIFIED COMHARD:S(TART,R(U~,lZ( 
ETER, D(UHP, E(COUHT,B(KPT, q (uIT? E RA FF H COHHAMD:S(TART, R(IJI, E(ITER, D(~, H(COWT, B(KPT, q(urT? 
E 0006 ,EA 1 IEVALID ADD~SS SPECIFIED IEVALID MEHORY COETEMTS SPECIFIED COMMAllD: S (TART, R(UM,13(MTER, 
D(W, E(COWT, B(KPT, q (UIT? qm Figure 1. Sample SICSIM session; numbered lines indicate input typed by 
the user. After SICSIM was adopted at Auburn three years ago, it soon became clear that the clumsy inter­face 
was frustrating student attempts to employ the tool. Figure 1 presents the output from an inter­active 
SICSIM session. Although there are only five commands, they are cryptic (one letter each), somewhat ambiguous 
(e.g., Sta~t vs. RurJ), and un­forgiv@ (compare the effect of blanks in lines 8 and 3). All information 
on program execution is in hex­adecimal notation, requiring that the student hand­disassemble instructions 
and manually convert data elements to integer or character form. Error detec­tion is almost non-existent. 
Students complained that testing and debugging their results was easier by comparing it to printed output 
than by using the simulator. To improve SICSIM S usability, we added a graphical user interface. The 
resulting tool, xSICSIM, utilizes the X Window System ,[8] plat­form to provide simple and intuitive 
access to the basic functionality of the simulator (see Figure 2). xSICSIH S rich visual feedback in 
the form of LED-like light displays and color highlighting helps students see the results of program 
execu­tion. The graphical presentation also increases stu­dent interest, making learning more fun. As 
the simulator executes instructions, the user can ob­serve changes to the contents of memory, registers, 
and the program count er. The information can be viewed and manipulated in several familiar formats (hexadecimal, 
decimal, binary, and ASCII), with automatic conversion between them. An automatic disassembly feature 
dissects the current instruction into opcode, addressing mode, and operand fields, indicating how the 
object code is interpreted by the simulator. XSI CSIM S interface mechanics, based on single-stroke access 
to common functions, reduce the likelihood that new errors will be introduced by typing mistakes. Finally, 
students are more pro­ductive because bugs are easier to identify and fix. Thb paper describes the structure 
of XSICSIM. Although the interface clearly was designed to en­hance the functionality of Beck s SICSIM, 
the prin­ciples are equally applicable to a variety of related tools (e.g., MicMac [4], CPU SIM [5], 
MIC-10 [9], SIM68 [10]) used in teaching computer organiza­tion, assembly-language programming, and systems 
programming. Components of xSICSIM The xSICSIM system exploits recent advances in graphical interface 
technology. Its overall structure 158 Location Opde Source Line 000000 TEST START 0000 000000 480022 
CLOOPJSU8 ROREC 000003 OOO07A LOA LENGTH 000006 28007t CONP ONE 000009 Oooooc 300012 4%0052 JEQ JSU8 
ENOFI1 WRREC 0000OF 3COOO0 . CLO@ 000012 OOO06A ENOFIL tOA EOF N Processor StODDed Iii ?! 000015 00001 
e OCO082 000074 STA LOA BUFFER THREE 00001B OCO07A STA LENCTH 00001E 490052 JSU8 WRREC 000021 BYTE X 
FF 000022 QO06E RDREC LOX ZERO Figure 2. Fmme from sample xSICSIM session. =­.E&#38;$@~$@#$@iE{8$$@:%m 
&#38;. @g@@@$ . Figure 3 . Structure f#wiwww#i*$#i9#/wm#: of xSICSIM. Figure 4. Popup windows control 
the value and format of each register. 159 is depicted in Figure 3. Beck s SICSIM simulator provides 
the basic functionality, but is no longer in direct contact with the user. The xSICSIX interface hides 
the command-driven simulator completely; it runs SIC!SIM in the background, taking advantage of UNIX 
multitasking and interprocess communi­ cation via pipes. In the X Window System tradition, the user 
interacts with interface objects displayed on the screen, which in turn communicate with the xSICSI14 
controller. All user input is captured, interpreted, and responded to by the controller or reformulated 
as one or more commands to SICSIM. SICSIM output is likewise intercepted and refor­matted for display 
in one of the interface objects. The interface objects are implemented using standard X Window System 
widgets from the Athena widget set [11], augmented by specialized widgets designed at Auburn. The nature 
and use of each object is described below. Ezecution Control. xSICSIH is operated via pushbutton panels 
(the white buttons in Figure 2). Selecting Reset cold-starts the SIC/XE pro­cessor with a hardware reset.* 
This causes the machine to set all memory locations to a hex value of FF, clear all registers to 00, 
and reset all 1/0 de­vices. Reset also precipitates several housekeep­ing tasks that previously had to 
be handled by the user (such as invoking the SICSIM relocating loader), as well as loading the USER LISTING 
win­dow with the assembly-language listing file. After a Reset operation has been performed, the object 
code is in memory and awaits execution. The Single Step option allows the user to step through program 
execution one instruction at a time. Alternatively, Execute may be used as a tog­gle to start/stop rapid 
execution of the program. Pressing it resumes execution at the location in­dicated by the Program Counter 
and changes the button label to Stop. A subsequent press halts exe­cution and restores the label to Execut 
e. Execution also stops automatically when a HLT (HALT) in­struction is executed, an error (illegal instruction, 
ALU, or 1/0 error) is detected, or a breakpoint is reached. Special settings are used to control the 
rapid­execution options supported by the simulator. The count but ton manages the so-called execution 
counter, which reflects the number of instructions executed since the last Reset operation or count ex­piration. 
When the value of the counter has been reached, execution halts and a message is displayed in the MESSAGES 
area. Selecting breakpt ac­ tivates a popup window where the user indicates breakpoint addresses. Whenever 
a breakpoint lo­cation is accessed during the instruction fetch se­quence, execution is halted and a 
message is issued to the MESSAGES area. Execution may then be resumed by the Execute or Single % ep mecha­nisms. 
The user may also start execution at an arbitrary location in the program by selecting the Program Counter 
register, entering the new loca­ tion, and and resuming execution via Single Step or Execute. Register 
Display~. The REGISTERS window contains LED panels representing the SIC/XE reg­isters: A (Accumulator), 
X (Index), L (Linkage), B (Base), S (General Purpose), T (General Purpose), and Program Counter, each 
3 bytes in Iength.1 In­tegers are stored as 24 bit binary numbers, using 2 s complement to represent 
negative values, while characters make use of standard 8-bit ASCII codes. The LEDs display the binary 
representation of the register values, each light representing one bit. In addition, the hexadecimal 
(or optionally, the ASCII) value appears in the upper lefthand corner of each register display; the display 
mode is changed by clicking the righthand mouse button while the cursor is positioned over the register. 
A register s value may be changed via a popup window, acti­vated when the lefthand mouse button is pressed. 
The popup also allows the student to view the reg­ister contents in binary, hexadecimal, or decimal format 
(see Figure 4). Figure 5. The MEMORY D t7MP window. 1 ~tho@ &#38;&#38;s model also supports a 6-byte 
floating­point register, its is not supported by the SICSIM simulator and therefore cannot be used in 
student programs. 160 Figure 6. The USER LISTING window. Storage Display. The scrollable MEMORY DUMP 
window (Figure5) displays the contents of memory in both hexadecimal and ASCII represen­tations. To alter 
storage values, the user presses the lefthand mouse button while the cursor is posi­tioned over the window. 
This activates a data entry popup similar to the register popup. Again, values may may be entered in 
any format. The MEM-ORY scrollbar is used to bring the desired region of memory into view. Clicking on 
the arrows located at either end of the bar causes the display to scroll one line; alternatively, the 
thumb (grey region in­side the bar) can be dragged until the desired area is visible. Source Code Display. 
The program is executed directly from the student s object code file, and re­flects any anomalies in 
its format. To facilitate the identification of incorrect object instructions, the USER LISTING window 
(Figure 6) provides quick access to the expected instructions the original assembly-language instruction, 
the location counter, and the object code generated by the as­sembler. As in the MEMORY window, a scrollbar 
allows easy navigation through the program text. Help and Tutorial Features. On-line help is al­ways 
available via popup windows (see Figure 7). The Klerarchically-organized help system makes use of xhelp 
(an X utility also developed by the au­thors) to provide a tutorial-style introduction to the mechanics 
of the interface, the SIC/XE machhe ar­chitecture, SIC/XE assembly language, and details of program execution. 
Selecting the master help button, labeled HELP, enters the help system at the top level and is used primarily 
by newcomers to xSICSIM. In addi­ tion, the help facility is activated in context-taensive 161 mode 
whenever the user clicks on a windo,w title­bar (shown here as white text on a black g,round); .. appropriate 
Information about the window is dis­played in response. For example, clicking on the REGISTERS titlebar 
provides infOrmatiOIIl on the number and purpose of SIC/XE registers, as well as how the display objects 
can be manipulated to change format, register contents, etc. +EAKPT,are used fqr controlli os prosr.w! 
execution. $ y II :> $ :1 rnl IMT -.. . IT~ Pressing this buttm lets You set the number Of ~instructt 
ons to be executed each time you press RUN. * ~: TIIe cwnt value is entered and di SP1ayed m a pmi ti 
w ~ $ dwi !!s1 number. The dsfaul t count is 1000. * II,:,  1! $ g $ 0FW3KPT 3 This button 1ets YOU 
set the breakpoint address. Once s j a breakpoint is set, subsequent execution wi 11 stop at the t! j 
instruction immediately preceding the breakpoint. :  ! II Ii:~ The breakpoint address is specified 
and di SP1ayed a!s a ~ ~ hexadecimal value. Tlw default breakpoint is FfFFh, which :$ ~ is bsyond the 
wpor bwnd of memory (i.e. no breakpoint). ~ 11,.. Figure 7. The popup HELP facility. Experiences with 
xSICSIM Written in a highly portable subset of the C language, xSICSIM can be installed on any sys­tem 
supporting release Xl 1R4 or later of the X Window System. To date, it haa been ported to UNIX workstations 
(Sun 3/50, SparcStation, and IPC), IBM/AIX systems (RISC System 6000 and X Stations). With the exception 
of one minor adjustment,2 the interface preserves the total in­dependence of SICSIM, which may still 
be invoked via its command-line interface. xSICSIM was used successfully over the plast year in CSE400L, 
the systems programming laboratory course required for undergraduates in the Com­puter Science and the 
Computer Engineering cur­ricula at Auburn. The response has been very fa­vorable. In particular, the 
graphical interface is cited as being both appealing and useful. 2SICSIM is written in Paacal, notorious 
for its 1~0 bufTer­ing. The program was modified to flush the bfier aft er each writ e, ensuring that 
X5 ICS Ill receives an innnediat @response from the aimulato~ otherwiee, unacceptable delwys would occur 
in the display as the bufFer filled. Judging from the quality of student implementa­tions of assemblers 
and macro processors, xSICSIM increases student interest and improves their under­standing of the interrelationships 
between source code, object code, and CPU operation. Students report that the tool s error detection 
capabilities which identify illegal opcodes, malformed instruc­tions, and out-of-range addresses are 
helpful in localizing mistakes or misalignments in the object code format, a task which previously was 
frustrat­ing and time-consuming, In effect, xSICSIH con­verts the black-box SICSIM machine into a vi­sual 
computer which reinforces the student s men­tal model of computer operation. By observing how the machine 
interprets and responds to each instruction, he or she can identify the cause and ef­fect of object code 
anomalies, without the tedium of manual format conversions and disassembly. References <RefA>[1] Barth, Ingo, 
Thomas Braunl, and Frank Sem­bach, Parallazis User Manual, Technical Report 3/90, Universitaet Stuttgart, 
Computer Science Department (March 1990). [2] Coelho, David R., The VHDL Handbook. Boston, Kluwer Academic 
Publishers (1989). [3] Overbeek, Ross A., Assembler langauge with ASSIST and ASSIST/1, Chicago, Science 
Re­search Associates (1986). [4] Donaldson, John L., MicMac: a Microprogram Simulator for Courses in 
Computer Organiza­tion, ACM SIGCSE Bulletin, 20 (3): 428-431 (September 1988). [5] Skrien, Dale and John 
Hosack, Multilevel Sim­ulator at the Register Transfer Level for Use in an Introductory Machine Organization 
Class, ACM SIG(7SE Bulletin, 23 (l): 347 351 (March 1991). [6] Beck, Leland L., SICSIM documentation, 
un­published manuscript from San Diego State Uni­versity, distributed by Addison-Wesley (1990). [7] Beck, 
Leland L., Systems Software: An Intro­duction to Systems Programming, Reading MA, Addison-Wesley (1990). 
[8] Scheifler, Robert and James Gettys, X Window System: Complete Reference to Xlib, X Protocol, ICCCM, 
XLFD, Second Edition, Bedford MA, Digital Press (1990). 162 [9] Sayers, Jerry E. and David E. Martin, 
A Hy­pothetical Computer to Simulate Microprogram­ming and Conventional Machine Language, ACM SIGCSE 
Bulletin, 20 (4): 43-49 (Decem­ber 1988). [10] Allen, Laura Sim68000, A Simulator for the MC68000 (Version 
2), unpublished report dis­tributed by University of Florida (1990). [11] Peterson, Chris D., Athena 
Widget Set -C Lan­guage Interface, Cambridge MA, Massachusetts Institute of Technology and Digital Equipment 
Corporation, 1989</RefA>.  
			
