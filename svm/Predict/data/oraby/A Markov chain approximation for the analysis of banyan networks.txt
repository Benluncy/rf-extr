
 A Markov Chain Approximation for the Analysis of Banyan Networks Arif Merchant x Stanford University 
 Abstract This paper analyzes the delay suffered by messages in a clocked, packet-switched, square Banyan 
network with k x k output-buffered switches by approximating the flow pro­cesses in the network with 
Markov chains. We recursively approximate the departure process of buffers of the nih stage in terms 
of thqt at the n l t stage. We show how to con­struct the transition matrix for the Markov chain at 
each stage of the network and how to solve for the stationary distribution of the delay in the queues 
of that stage. The analytical results are compared with simulation results for several cases. Finally, 
we give a method based on this ap­proximation and the technique of coupling to compute upper bounds on 
the time for the system to approach steady state. 1 Introduction In any parallel machine, where several 
processors share mem­ory, the interconnection network that connects the proces­sors with the shared memory 
modules is of crucial impor­tance from the viewpoint of performance. Buffered mul­tistage connection 
networks have been used in several such machines such as the NYU Ultracomputer [2], the IBM RP3 [12], 
and the BBN ButterflyTM [I.]; accordingly it is a matter of some importance that we be able to analyze 
the perfor­mance of these networks. In this paper we model the behavior of a clocked, packet­switched, 
buffered Banyan network under assumptions of light to moderate, uniform traffic. There are other analyses 
of the delay suffered by a random packet in such a network (see, for instance, [7, 8, II].) Kruskal et 
al, [8] give accu­rate formulae for the distribution of this delay in a context similar to ours. However, 
this analysis is based largely on interpolating from simulation results. They provide no deep model of 
the behavior on which further analysis could be based. The intent of this paper is to provide a relatively 
sim­ple yet detailed model of a buffered Banyan network based Currently with IBM Thomas J. Watson Research 
Center. P, O. Box 704, Yorktown Heights. NY 10598, This work was performed at Stan. ford University. 
and was supported in part by a grant from the AT&#38;T Foundation and NSF grant DCR-8351757. Permission 
to copy without fee all or part of this material is granted provided that the copies are not made or 
distributed for direct commercial advantage, the ACM Ocopyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. 0 1991 ACM 
089791 -392 -2/97 /0005 /0060 . ..$1 .50 on a few, clearly stated approximations, We use a Markov chain 
approximation for the output process of a switch in the network to derive a recursive relationship between 
the outputs of successive stages in the network. This allows us to find approximations for the steady 
state distribution of the number of messages in a buffer of a switch in a given stage, for the distribution 
of delay suffered by a message in this stage, and for the mean total delay across the network. The model 
and methods that we use are extremely robust: although this paper treats only uniform traffic distributions 
and fixed service times, the extensions to non-uniform traf­fic, variable service time, and finite buffers 
are quite simple (see [IO].) The utility of this model is further demonstrated by showing how to compute 
bounds on the rate at which the network approaches steady state. All results follow directly from the 
model, with no reference to data or simulations. Finally, we compare the results derived analytically 
with simulation results. The network Interconnection networks are constructed from switches; a k x s 
switch has k input ports and s output ports. A Banyan network is an interconnection network with exactly 
one path between every source and sink. In an m-stage interconnec­tion network, the switches are divided 
into rn stages so that the output of a switch in stage z is connected to the in­put of a switch in stage 
i + 1. We shall consider only m­sta.ge Banyan networks constructed from k x k switches, also kn~wn as 
_kn x km (square) Banyan networks, although the techniques we use are equally applicable to more general 
Banyan networks. We assume that the switches have a buffer at each out­put port. Each input port receives 
messages at clock ticks which are instantly forwarded to an output queu~ each out­put buffer processes 
the message at the head of its queue in a clock tick. We assume that the buffers are of infinite length; 
this is a reasonable approximation if the traffic intensity is moderate, since the buffer rarely saturates. 
Further, we as­sume that the traffic is uniform, that is to say, a message at a source has equal probability 
of going to any sink. Equiv­alently, we may say that a message at an input has equal probability of selecting 
any of the outputs. Finally, the ar­rival process of messages from the sources is assumed to be a O-1 
Markov chain, that is, the number of arrivals (O or 1 ) at time f depends only on the number of arrimk 
at time t 1.This is a considerably weaker assumption than is com­mon most existing analyses assume that 
the arrivals are completely memory less. 60 Stage n 1 Stage n+ 1 Figure 1: Flow of messages from stage 
n to stage n + 1 in the t h cycle. 2 The Markov chain approximation The Banyan network is, in essence, 
a network of queues. The (1) difficulty that arises in analyzing this network is the same as that for 
most queueing networks: even with fairly simple (2) forms for the arrival process of messages and for 
the service time at the nodes in the network, the steady state output (3) process is usually complicated. 
This, naturally, makes the task of analyzing interior nodes intractable in most cases. (4) We circumvent 
this problem by approximating the steady state output process with a Markov chain. Such an approx­imation 
was also suggested by Kruskal, Snir, and Weiss [7], (5) but apparently, later abandoned [8]. To this 
end, let us con­sider the flow of messages between buffers in stages n and (6) n+l. As shown in Figure 
1, let Sl~ ), S2$n), . . . . Sk\n) be (7) the number of arrivals at buffers in stage n in the t~h clock 
(m) (n) cycle, Xlt , X2t , . . . . Xk~n) the number of departures, (8) and similarly, St n+l) and X~n+ 
1) the arrivals and departures for a buffer of the n+ls stage. Xl(n), X2(m), . . . . Xk(n) are S(n+ ) 
is the sum of k identical processes, therefore the independent and identically distributed processes. 
(Kruskal corresponding probability generating function (p,g.~. ) is given and Snir [6] show this for 
unbuffered Banyan networks; the by (see [4, pg. 12]): argument for buffered Banyan networks is almost 
identical. ) Let S*~n) denote any one of S1, S2, . . . . SIC. Then, we make (k l+ k l+v k ,s(~+ )(u,v) 
 ~(n) the following approximation. k k ) fern = 0,1,2,... (9) Approximation 1 (Markov chain) If the arrival 
processes S1, S2, ..., Sk are Markov chains: At equilibrium, the rate of input into a buffer must equal 
the rate of output; therefore, PT[S$) = jls*::\ , S*::), . ..] = f%[s+~~) = jls*yJ ~{r~) = then we approximate 
.~(n) (~,l) = s(n) (~!l) 1.=1 Iz=l (~+1) _ , s(?~+l) .$::l), ...] ~ $%[s$ +1) =jls$:~l)]. PT[s, 21 ,_l 
, Iz=l where ~ _ ~(o) is the mean rate of arrival from the sources. 1 (11) (12) (TL) fo~ terms of zoo 
approximation to since Qt_3is a function of S~C~l) , S~~~l) , . . . . Thus, n+l) (~+1) _ (~+1) and ~olo 
 ~olo zos(~+l)(o, o) (~+1) _ ~$o+ozo = ~(~+1) zoo 010 Zo = _ zox(~)((k 1)/k, (k  1)/)):0 (1-J)(P -ls: 
2(k -l)A + Z&#38;)) . ~13) W (1 A/k) It is clear that given the parameters J and Z$) for the (n) forexternal 
arrival processes, we may readily estimate ZOO all n. Using the values of Z$), z:), Zx), and Z. n) found 
from (10)-(12) we finally compute the p.g.~. for the arrival process: s(~+ )(zql)) = ((1 + A(U 1)/.k)(l 
+ A(W I)/k) +(Z$) -(1 -A) )(?J -I)(V -1)/4) (14) and the transition probability matrix llr~~+l) II for 
the cor­responding Markov chain, where Jn+l)(~+1) _ (n+l) _ ,~ T~> 31% -y:=oJr+ ) It can be shown from 
the recurrence (13) that, as n in­ creases, z%) converges geometrically to the smallest root in (o, 1) 
of J1-A)(k -l -2(k-l)A+z) P(l A/k)~ Since it is clear that for a given value of J the arrival process 
(, 1) at a buffer in stage n depends on Zoo only, the arrival process and the distributions of queue 
length and waiting time converge quickly to a fixed point as n increases. This agrees with an empirical 
observation of Kruskal, Snir, and Weiss [8]. 2.1 The queue length at a node Now let us see how we may 
model the equilibrium behavior of Q$n), the queue length at a node in the nti stage of a k x k Banyan 
network, given T;j = TiJ m) fori, j= O, l,..., k. Recall that T~~) is the probability that the total 
number of arrivals S(n) jumps from i to j. Consider the Markov chain {(Q\ ), S$ ))}. Let ~tj = stationary 
probability that (Q~ ), S~n) ) = (z, j). Then we have the following equations for -r,j : ~,,. Im rw + 
Em ~ornTm~ if i = j ~ k T,J = o ;t;e;;i:l (15) { ~nL~i-j+l.mTrr&#38;j To express this more concisely, 
let us define some nota­ tion: xl = (~Cl~ ~lf . . 71kj)T r 3 = (T,, T,, ... Tk,) 1, = (60, 6,, ... Jk,) 
where bij = 1 if z = ~, and O otherwise. In other words, 13is the j + lth row of the (k+ 1x k+ 1) unit 
matrix. Using this notation, we can easily rewrite ( 15) as !?j7Ti = TjXt-j+l+TJTO (6ij 6t,j-1) fori, 
j= 0,1, . . ..k. (16) To solve for m,, we instantiate this for j = I, 2,..,, k, and for j = O with i 
 1 in place of i to give us the equations: ro7r, = 10711-, 7 fJ710(6*~ 6ilJ) (/, -T,)7rt = T17ro(&#38;l 
 A*O) 12X, = Tz71,-~ + TzTo($u &#38;~) 13Ki = r~nt-z + r37ro(&#38;3 &#38;2) ... ik~, = Tk7Tz-~+~ + 
Tk7?o(&#38; &#38;~-1). (17) We can rewrite these equations in a convenient form by defining the column 
vector: IIt = ( 71; 7rt_, xt_2 . . . 7rt-k+, )= . m, ,, ,., ./ . ,, TO o lo 1, T, O o 120 TZ 130 T3 
 II, = 1; i 01 I TO(CL C$to) o TI(&#38;I 6,0) 0 T2(&#38;2 &#38;I) O T3(&#38;3 6,2) O HI) (18) ~k(k 
 &#38;,k-1) o 00 62 where I is the (k + l)(k 2) order unit matrix and the O s It is clear that the 
waiting time W for a random message represent appropriately sized zero matrices to make the ma-has two 
components: the waiting time due to the messages trices above square matrices of order (k + l)(k I). 
For con-in the buffer before its batch arrives, and that due to the ciseness, let us rewrite this as 
messages ahead of it in the batch. We ask, therefore, what is the probability that the random message 
arrives in a batch LIIt = CrIt.l + c;rI (19) of size i and that the queue length after the batch arrives 
is q? Let pq, be this probability, and let us denote by bqi (t) the where L, C, and (7, are defined with 
reference to (18). number of such batches arriving in time (O, i), and by m(i!) Notice that the determinant 
of L is (,,0 ( 1 r,,) + the total number of messages which arrive in (O, r$). Then, ~ol ~lo ) < 0 and 
hence L is non-singular. Thus, we can also define A = L l C and B; = L l C, so that (18) becomes (20) 
Therefore, Now define E[f( w)] = 9.i  =-(1 -Z) L-l diag(l l z = ~ zk- )Ilrijll : . () 9,; w=q i This 
gives us II(z) = AzII(z) + B(z)IIo, and hence since { W / q,i} is uniform in [q i,q 1] (26) II(z) 
= (l Az)-lB(z)IIo where (1 A.) is non-singular. (21) 9.i From this, or indeed, directly from (2o) we 
have where F(j) = ~~ =lo ~(w). lT, =Ai*Bz IIo= A; B,._jIIo . (22) Now let ~(w) = z and x 3  Since Bj 
=Ofor j >k,weget = ~~=ofor i = 0,1,..  AiBi-j&#38; .,k (23)  ~i{ AZ-k~k The p.g.f. of waiting time 
is given by substituting in (26) fori=k+l, k+ 2,... (Zfr _ .9-i)To find the stationary probability ~~ 
that Q(n) = i, define E[zw] = +E q .-, g,; k= U.=UJJ (1 ­ k+l k -k = E A(. z- )1) X qizq i q Then, 
xi = P~[Q(n) = i] = ekni. (27) 2.2 The waiting time at a node We saw in the last section how to construct 
the z-transform This gives the entire distribution of waiting time; the mo­of the dktribution of queue 
length for the nth stage. We may, ments may be found by differentiating this, or directly byof course, 
directly compute the mean waiting time from this substituting j(w) = w and ~(w) = w in (26). using Little 
s law, but to find the distribution we need to We may find the mean of the overall system waiting timetake 
a longer course. by summing over the means of the waiting times for the in- We start by assuming that 
we have already found dividual stages. We may also approximate the variance, or indeed the entire distribution 
of the system waiting time by treating these waiting times as if they were independent; however, note 
that this is not exact. The waiting times for the various stages are, in general, correlated. Nonetheless, 
Note that this is the vector of the first k + 1 elements of the correlations are small, and this approximation 
yields rea­ II(z) which we computed in (21). Let ~~(z) be the i + 1 sonable results. To obtain the total 
system delay, we add element of this vector. Thus, the service times to the waiting times; this is trivial 
in the present case, since the service times are constant. 63 3 Settling time bounds We have attempted, 
in the last section, to derive approxi­mations for the stationary distribution of messages and of waiting 
time in Banyan networks. A natural question to ask is, how long does it take for a Banyan network to 
reach steady state? This is of interest both from the point of view of design and that of simulation 
studies. To design a simula­tion for measuring functions of the stationary distributions, it is clearly 
necessary to allow the simulation to run long enough for the system to reach steady state before we make 
measurements. Typically, this is done by running it for an arbitrary long time, and then monitoring some 
measures of the distribution, such as the mean and variance, to en­sure that they have reached a fixed 
point. This is not quite satisfactory and, frequently, expensive. One advantage of the Markov chain approximation 
of output processes is that it permits an analytic approximation of the time to reach steady state by 
using a technique called coupling. Coupling Consider adiscrete time Markov chain Z,witha state space 
S and a transition probability matrix R on S x S. Let ZO be the initial distribution of Z, and mi =~O.RJ 
the distribu­tion after j steps. Assume that Z has a unique stationary distribution n. (X, Y, T)isa Markovian 
coupling for Zif 1. The projection X is aMarkov chain on S with transi­tion matrix R and initial distribution 
To. 2. The projection Yis aMarkov chain on S with transi­tionmatrix Rand initial distribution ~,X and 
Yneed not be independent. 3. X = Y from the random time T onwards. T is known as the coupling time. 
 Then we have the following theorem from Griffeath [3]: Theorem 1 (Coupling inequality) IIT, -~11 = 
SUP lTj(A) -T(A) I S PT[T > j]. A~S IIzJ -TII is also ~own as the total between variation ~j and ~, 
and 1S a famly natural measure of the difference between the two distributions. A coupling for the queue 
at a node Let us look at the queue at any node in the Banyan network, and try to determine how quickly 
it settles to a stationary distribution starting from an empty buffer. The Markov chain which describes 
this queue is, as be­fore, Zt = (Q,, S,). QO = O and we assume that So is distributed according to the 
stationary distribution of the Markov chain S~. Let X~ = Z,, let Y, = (Q;, St ) have the same transition 
probability matrix R as Z, and Q; be distributed according to the stationary distribution for {Q, I St 
= SO}. Clearly the initial distribution of Y is the stationary distribution of Z. Also, since Q{, = O 
s Q:, we have O ~ Qt ~ Q; for t ~ O. Define T = inf~; =o{t}. Thus, X, = N for t~ T and (A-,, M,T) isacoupling 
for Z. Therefore, using the Coupling inequality, the total vari­ation is bounded by Bounding the distribution 
of T We compute the p.g.j. of T in order to bound the tail of its distribution. Let us define # of steps 
for Y to move from if ~ >0, T,, = $q,~) to (q-1,0) otherwise. { It is easy to see that T= TIo+T20+ ..+ 
TNo+T II, (28) where N = Q~ 1 + 6(2{,0. Also, since the chain is semi­ infinite and the transition probabilities 
between (q, i) and (q+m, j) are independent of q for q >0, m z O, it is easy to show that T1., Tz., . 
. are i.t. d. Let .F~(z) = EIZTI*]. Then, by a first step analysis, F ,(z) = ~ TZ,ZF, (Z) FO(Z) - fori=O,l,... 
k.k. (29) In the case k = 2, 3 these equations can readily be solved for F;(z). Multiple solutions are 
resolved by noting that F,(l) = 1 and F, is analytic at this point. Then we can solve for T(z) = ~[z~] 
= N($ ,(z))~ s, F,(z) where N(z) = E[zN] is found in terms of the distribution of Q:, which we have already 
computed. The tail probability can then be found by applying the Chernoff-type bound (see [5]): PT[T 
> t] < T(ZO)Zo- for zo >1 and T(z) analytic in Iz II < ZO 1. Thus, if we define the settling time ~ 
for the node as the time after which the total variation between the transient and stationary queue length 
distributions is less than a given small constant e, we have ~ < log T(zo) log c (30) log 20 When k 
> 3, the equations (29) are not in general solv­able; however, we may still compute the mean and variance 
of T as follows. Differentiating (29) once and twice at z = 1 gives us, respectively, systems of linear 
equations in F;(1) and FJ (1 ) which are easy to solve. Then, using (28), stan­dard results for random 
sums (see [4, pp. 12-13]) yield the mean and variance of T. Armed with these moments, we may use Chebychev 
s inequality to bound F ~[7 > i]. The settling time for the network We have so far concentrated on discovering 
bounds on the settling time for an individual buffer. The next question is, how long does it take for 
the entire network to approach the stationary state? Let us say that the network settles when each of 
the buffers has settled. Then we may make the folIowing ap­proximation for the network settling time 
T : 64 Analytical upper bound .. ... .x Simulation x . .. ,.. ,. . .x X.. * .iw . .... !IIII I 0.1 0.2 
0.3 0.4 0.5 0.6 0.7 traffic intensity L (message#cycle) Figure 2: Settling time bounds for a 25 x 25 
Banyan network with e = 0.05 Approximation 2 T = m:~n{i + T(i)}  where T(i) is the settling time foT 
a buffer in the ith stage. This is reasonable if we assume that our Markov chain ap­proximation for the 
input stream for the ith stage holds as soon as packets start arriving there (i.e., after i cycles. ) 
The settling times ~(i) are readily found from (3o), which gives us the value of T. In Figure 2, we compare 
the above bound with simu­lation results. The simulation data was obtained by 2,000 independent replications 
of a (terminating) simulation run. The distribution of queue length (n,) was determined for each value 
of time t, and the variation distance between m~ and the stationary distribution were computed. (We used 
~t) with t = 2000 as an approximation for the stationary distribution; we found that using larger values 
oft did not change the results significantly. ) The node settling time was given by the smallest value 
oft after which the variation dis­tance was less than c = 0.05. The network settling time was the maximum 
of the node settling times. The comparison with simulation data indicates that our upperbound is fairly 
tight for light traffic but deteriorates as the traffic becomes heavy; nonetheless it is the only ana­lytical 
bound that the author knows of, and is adequate for most purposes. (Before these bounds were known, the 
au­thor used repeated simulations of 40,000 cycles to determine steady state distributions!) Simulations 
results In the last few sections we have presented a method for ap­ proximately predicting the delays 
for infinite buffered Banyan X.. 0­ . . ..x --0 Prediction Simulation, Simulation, infinite buffer buffers 
size 8 .1 . ,! i /f 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 traffic intensity h (message#cycle) Figure 
3: Expected delays for a 25 x 25 Banyan Network networks in uniform traffic. Here we compare the result­ing 
approximations with simulation results. The simulation data is based on steady-state simulations, using 
the method of batch means (see Law and Kelton [9]), with 4,OOO batches (periods) of 100 cycles each. 
The first batch was discarded to remove the data for the initial transient period. The mean and variance 
of the queue length and delays at each node, and the delays for messages departing were compiled for 
each batch. We assumed that these means were inde­pendent and normally distributed in order to compute 
the confidence intervals shown. The stationary distribution of queue length at each node was also computed 
similarly. In the following tables, simulation results are shown with 95~0 confidence intervals. The 
simulation figures in Table IX are from Kruskal et al. [8], and do not have confidence intervals. The 
95~o confidence intervals for the points in Figures 3 and 4 are smaller than +0.067. WKlle we only show 
comparisons for switch sizes k = 2 and k = 3, the results are good for larger switch sizes as well; in 
fact the accuracy improves with increasing k. As is clear from Figures 3 and 4, our approximations work 
very well when the traffic intensity is moderate, and deteriorate somewhat as it increases. For networks 
with finite buffers of reasonable size, in moderate traffic, simulations indicate that the delay is closely 
approximated by that of the net­works with infinite buffers, and our approximations are use­ful here. 
The estimates are not accurate in heavy traffic (arrival rate ~ ~ I); however, the infinite buffer model 
is in any case valid only for moderate traffic intensities, since av­erage queue lengths increase sharply 
as the traffic becomes heavy. 5 Summary In this paper, we have presented an analytical model of de­lay 
in buffered Banyan networks based on a Markov chain 65 Table I: Mean and Standard deviation of queue 
lengths. (k= 2, J = 0.4, z~:j = 0.36) Mean queue St. dev Stage Sire, Pred. Sire. Pred. 1 0.467 +0.003 
I 0.467 0.624 +0.002 I 0.625 2 0.472 +0.003 0.472 0.637 ~0.003 0.637 3 0.473 +0.003 0.474 0.640 SCO.004 
0.641 4 0.476 +0.003 0.474 0.644 +0.004 0.642 5 0.478 +0.003 0.474 0.648 +0.005 0.642  Table II: Mean 
and Standard deviation of delays (k= 2, J = 0.4, Z&#38;) = 0.36) Mean delay St. dev Stage %m. 1P red. 
I Sire. 1P red. 1.163 iO.003 1.167 0.383 tO.004 0.401 1.178 ~0.003 1.180 0.409 ~0.005 0.423 1.181 AO.004 
1.184 0.415 tO.006 0.430 1.184 iO.004 1.185 0.419 tO.006 0.432    KTT7Tl 1.188 *0.004 1.185 0.428 
*0.007 0.433 r, Total I 5.9o9 +0.009 ] 5.9o1 I 1.019 +0.009 ] 0.949 Table III: Mean and Standard deviation 
of queue lengths. (k= 3, A = 0.4, Z$) = 0.36) Mean queue St. dev Stage s Pd. s Pd. 1 0.491 1;0.003 I 
0.788 0.6691:0.004 I 0:6;2 2 0.495 +0.003 0.494 0.680 +0.004 0.684 3 0.496 +0.004 0.495 0.686 +0.004 
0.686 4 0.476 +0.004 0.495 0.686 *0.005 0.687 5 I 0.478 +0.004 I 0.495 I 0.685 +0.005 \ 0.687  Table 
IV: Mean and Standard deviation of delays (k= 3, A = 0.4, S$) = 0.36) Mean delay St. devStage Sire. Pred. 
Sire. Pred. 1 1.217 ~0.004 ! 1.222 0.461 +0.005 0.482 1.229 +0.004 1.236 0.478 +0.006 0.504 1.233 +0.004 
1.238 0.488 +0.006 0.508 1233 +0 004 1239 0489 +0 007 0508 1.233 +0.004 1.239 0.486 +0.006 0,509 Total 
6.178 +0.012 6.173 1.019 +0.011 1.123  LuLu Table V: Mean and Standard deviation of queue lengths. 
(k= 2, ~ = 0.8, z$~) = 0.04) Mean queue St. dev Stage Sim. Pred. Sire. Pred. 1 1.612 ScO.019 1.600 1.328 
+0.021 1.386 2 1.757 ztO.027 1.655 1.509 +0.028 1.462 3 1.794 +0.029 1.661 1.563 +0.031 1.470 4 1.824 
+0.031 1.662 1.605 +0.035 1.470 5 1.838 +0.032 1.662 1.611 +0.035 1.470  Table VI: Mean and Standard 
deviation of delays. (k= 2, J = 0.8, z$~) = 0.04) Mean delay St. devStage Sire. Pred. Sire. Pred. 1 
1.996 +0.020 2.000 1.176 +0.023 [ 1.265 Table VII: Mean and Standard deviation of queue lengths. (k = 
3, A= 0.8, Z$) = 0.04) Mean queue St. dev Stage , Sire. I Pred. I Sire. I Pred. 1.847 +0.027 1.867 1.625 
+0.033 1.726 1.985 +0.035 1.915 1.777 +0.038 1.794 2028 +0 036 1917 1.816 +0 039 1.798 2.063 +0.038 
1.917 1.846 +0.040 1.798  2.063 &#38;O.042 1.917 1.869 +0.047 1.798 KIIIl Table VIII: Mean and Standard 
deviation of delays. (k= 3, ~ = 0.8, z%) = 0.04) Mean delay St. devStage Sire. Pred. Sire. ] Pred. 1 
2.291 +0.028 2.333 1.478 +0.036 I 1.624 12.483 +0.066 1;.917 4:364 +0:045 3:767 ~ Table IX: Mean and 
Standard deviation of Network delay. (k= 2, J = 0.5, Z$) = 0.25) Mean delay St. dev# Stages S3m. Pred. 
blm. Pred. 3 3.824 3.799 6 7.717 7.637 1.537 1.310 9 11.616 11.476 1.939 1.615 12 15.516 15.314 2.272 
1.870  66 References x Prediction x .! !,, ,X Simulation, infinite buffers , O---o Simulation, buffer 
size8 ­ / II I ().1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 traffic intensity k (messages/cycle) Figure 4: Expected 
delay sfora35 X35 Banyan Network approximation of flow processes. We used O-1 Markov chains to model 
the departure processes of the buffers in the net­work, which capture the burstyness of these processes, 
and yet, are easily characterized by two parameters. We showed how to compute these parameters for each 
stage of the net­work, and using these, how to compute the distributions of queue length and delay in 
each stage. We gave complexity bounds forthe time required tocompute these distributions, which indicate 
that the complexity of analyzing the network grows as the logarithm of its size. The versatility of this 
model was further demonstrated by employing it to derive bounds on the settling time of the network. 
We used the technique of coupling to derive bounds on the time for an individual buffer node, starting 
empty, to approach steady state. These bounds were then used to estimate a bound on the time for the 
entire network to approach steady state. Comparisons with simulation data indicate that the Markov chain 
approximations yield excellent results when the traffic load in the network is low to moderate. The accuracy 
of the approximation was found to improvewith increasing switch size. It is possible to extend the use 
of this model to more complex variants of the Banyan network in uniform traffic, such as non-uniform 
traffic, geometrically distributed service times, and finite buffers; preliminary results may be found 
in [10]. Acknowledgements The author is grateful to Ernst Mayr for his guidance, to Andrew Goldberg and 
Anujan Varma for their comments on this paper, to Anil Gangolli for help with Section 3, and to a refree 
for suggestions on improving the presentation of simulation data. <RefA>[1] W. Crowther et al. Performance 
measurements on a 128-node Butterfly parallel processor. In Proceedings of the 1985 International conference 
on Parallel Pro­cessing, pages 531 540, August 1985. [2] A. Gottleib et al. The NYU Ultracomputer design­ing 
a MIMD shared memory parallel computer. IEEE Transactions on Computers, c-32(2):175-189, February 1983. 
[3] D. Griffeath, A maximal coupling for Markov chains. Z. Wahrscheinlichkeitstheorie Venu. Gebiete, 
31:95-106, 1975. [4] S. Karlin and H. M. Taylor. A First Course in Stochas­tic Processeg. Academic Press 
Inc., 1975. [5] D. E. Knuth, R. Motwani, and B. Pittel. Stable hus­bands. Technical Report STAN-CS-88-1241, 
Stanford University, December 1988. [6] C. P. Kruskal and M. Snir. The performance of mul­tistage interconnection 
networks for multiprocessors. IEEE Z ransactions on Cornpu.ter3, c-32( 12):1091 -1O98, December 1983. 
[7] C. P. Kruskal} M. Snir, and A. Weiss. On the dis­tribution of delays in buffered multistage networks 
for uniform and non-uniform traffic (extended abstract). In proceedings of the 1984 Intemzational Conference 
on Parallel Processing, pages 215-219, 1984. [8] C. P. Kruskal, M. Snir, and A. Weiss. The d~tribution 
of waiting times in multistage interconnection networks. IEEE Transactions on Compute~s, 37(11):1337-1352, 
November 1988. [9] A. M. Law and W. D. Kelton. Simulation Modeling and Analysis. McGraw Hill, 1982. 
 [10] A. A. Merchant. Analytical Models for the Perfo~mance Evaluation oj Buffered Banyan Networks. PhD 
thesis, Stanford University, 1991. In preparation. [11] D. Mitra and R. A. Ciesak. Randomized parallel 
com­munications on an extension of the Omega network. J. ACM, 34(4):802-824, October 1985. [12] G. F. 
Pfister et al. The IBM Research Parallel Proces­sor Prototype (RP3): Introduction and architecture. In 
Proceeding of the 1985 International conjeTence on Parallel Processing, pages 764-771, August 1985</RefA>. 67 
 
			
