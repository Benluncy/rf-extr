
 A PATENT PROBLEM FOR ABSTRACT PROGRAmmING LANGUAGES; MACHINE-INDEPENDENT COMPUTATIONS R. G. Hamlet 
 Computer Science Center University of ~ryland College Park, Maryland 20742 Introduction A programming 
language may be viewed as an acceptable numbering of the partial recursive functions, with "semantics" 
the mapping from pro- grams onto the functions computed [i]. (In this view, syntax receives little attention, 
although it is best to consider it as a characteristic function of a recursive set of indices instead 
of allowing all natural numbers. Such a view is natural for the usual arithmetizations, and elimi- nates 
some possible confusions, for example in interpreting the recursion theorem for pairs of numberings.) 
The virtue of functional semantics is that the semantic range is a machine-independent class. The abstract 
view in which details of the semantic mapping are ignored, in which the function assigned to a program 
is "the one it computes," with the enumeration and s-m-n theorems assumed to compensate for the lost 
detail, has found only a restricted application to programning-language problems. Computational complexity, 
in the suc- cessful abstraction by Blum [2], is an attempt to provide more semantic structure without 
introducing a tenacious machine-dependence. The Blum measures are not themselves suitable as a semantic 
range. Two programs may have the same measure function, yet compute wildly different functions in widly 
different ways; other programs, intuitively very similar, may have wildly different measure func- tions 
[3]. A composite semantics of a function computed and a measure function is much like the approach suggested 
here: using formal computation functions as the semantic range. The Blum abstraction arose from results 
ob- tained with full details of particular partial recursive function characterizations, particularly 
in the Turing formalism. One semantic question provides a similar (but much abbreviated) back- ground, 
suggesting that different formal computa- tions by different machines are not incapable of abstraction. 
The example question is the character of sets of programs which are semantically the same. For the function-computed 
semantics of accept- able numberings, one form of this question has been answered by Rice [4] and others: 
a set of all pro- grams computing the same function is not recursive- ly enumerable. Another approach 
had a positive result: Friedberg [5] has shown that the functions may be enumerated without repetition; 
this might be taken to mean that a representative program for each function may be found in a numbering. 
However, no use can be made of the representatives alone in creating an acceptable numbering (as the 
Rice theorem implies), since such a Friedberg numbering necessarily lacks the s-m-n property [6]. To 
discuss similar questions for a semantics using computation functions instead of functions computed, 
we assume a particular abstract program- ming language, the Turing formalism of Davis [7]. Its syntax 
is determined by the (primitive) recur- sive predicate TM , and the semantic mapping is provided by minimalization 
of the Kleene T-predicate. That is, the meaning assigned to each program (index) p such that l~M(p) 
is the partial recur- sive function Cp = %x[miny Tl(P,x,y)l ,  the computation function. (The function 
computed by p is ~p , obtained from the computation func- tion in the usual way.) A computation by p 
is a value of C for some input; computations are thus P  necessarily convergent in our discussion. 
 A slight modification of Friedberg's proof shows that the computation functions may also be enumerated 
without repetition, but because the empty function has exactly one possible computation function, the 
s-m-n property must be lacking as before. In this form the structure question appears no different for 
computation-function or function- computed semantics. The other form, which considers the sets of programs 
with the same semantics, has a different answer. Two Davis programs for computing the function which 
is identity except at zero are given below: M 1 M 2 ql B B q2 ql B R q2 ql 1 B q3 ql 1 B q3 q2 1 
R ql q2 1 R ql q2 B R q2 q2 B R q2  M I and M 2 differ only in the first quadruple, and both work 
in much the same way. Yet the set of programs with the same computation function as M 1 is recursive, 
while the set with the semantics of M 2 is not recursively en~nerable. To have theM I computation a 
program must contain the M 1 quadrup- les, and if those quadruples are present, that computation will 
ensue. It is evidently effective to check a given machine for the presence of four quadruples. In the 
case of M2, note that the quad- ruple q2 B R q2 is never used in any computation, but M 2 does enter 
q2 scanning B for input 0, thus failing to halt. This quadruple may therefore be changed without effect 
on the computation func- tion, so long as no computation results on input 0. Suppose then that the 
set of programs with the M 2 computation were recursively enumerable. The fol- lowing procedure would 
solve membership in K = {z I TM(z) and z E dom ~z } : Given any Turing program z , create the quad- 
ruples for the machine which computes hX[~z(Z)] in any way. Now replace the peculiar never-used quadruple 
of M 2 with q2 B B q4 ' and rename the states of the ~z(Z) machine as q4' q5' etc., adding these quadruples 
to M 2. Find a number t for the composite machine. Now dovetail a computation of ~z(Z) with an enumeration 
of the programs having the M 2 computation, seeking t . If ~z(Z) converges, then t cannot turn up, 
for its computation function will differ from that of M 2. If .~z(Z) diverges, t must turn up, for its 
computation function will still be exactly that of M 2. Hence we can decide whether or not z is in K 
.  The existence of such a procedure means that the set of programs with the M 2 computation cannot 
 have been recursively enumerable after all. A Patent Problem for Turing Machines The proof technique 
of the Rice theorem is evident in the introductory example, which shows the char- acter of an analogous 
theorem for sets of programs with related computation functions. One question, however, has no function-computed 
analog: what of machines which differ only in state names, whose computations would be identical if one 
machine were subjected to an appropriate relabeling of its states? To call such machines equivalent in 
their computations would widen the classes being consid- ered, but probably in an intuitively-correct 
way. (The introductory example shows that this widening is not essential to the result that some machines 
determine one kind of computation-function class, others another.) We choose to take the computation 
functions, disregarding arbitrary imbedded state names, as the basis for a partial order over the Turing 
programs. Definition. For Turing programs p_ and q , p is a subprogram of q (written p~-q ) iff there 
is a relabeling of the states of q (creating program q' , say) such that __ ~ . Program Cp Cq, p is 
equivalent to q ( p ~q ) iff p~q and q P Definition. A set of Turing programs A is full iff p ~ A and 
q !p = q ~ A . Definition. A set of Turing programs is rooted iff it is a ~ upper semilattice. Definition. 
A quadruple of a Turing program is marked in a computation iff it is invoked in one of the yield operations 
between instantaneous des- criptions in that computation. For program p , a set D a dom C is determining 
for p iff P  every quadruple which can be marked in any compu- tation is marked by one on D . Le~na 
O. Every Turing program has a finite deter- mining set. Proof. There are a finite number of quadruples 
in any program. To require an infinite determining set would require quadruples which are marked for 
the first time on arbitrarily large subsets of the domain, hence an infinite number of quadruples. 0 
 Definition. A set of programs which can be enum- erated with a finite determining set listed along with 
each member program is called recursively enumerable with determination (r.e.d.). Theorem I. Each full, 
rooted, r.e. set of Turing programs A has an r.e.d, set of 'Key subprograms" S such that p E A ~ ~s ~ 
S[s~p] for each Turing program p . Proof. S consists of those subprograms of pro- grams of A which are 
themselves members of A . It can be en~nerated with determination by consid- ering expanding initial 
segments of the natural numbers, and an expanding number of yield opera- tions of candidates for computations 
on these sets by A-programs, at the same time watching an enum- eration of A for the appearance of quadruples 
marked in any finite set of such computations. When a member of S is located by this process, the finite 
set on which its quadruples were marked is determining. (Implication to the right.) For any p E A , 
a finite determining set for p will be encounter- ed in the construction of S , say D . Let the quadruples 
of p marked on D form program s . By definition of a determining set we have s ~p . The fullness of A 
then requires that s E A , so s ~ S by definition  (Implication to the left.) Suppose not Then for 
some program p and its subprogram s , s ~p is false, since otherwise p Â¢ A would follow from the fullness 
of A Since C s for some relabeling p' of p , it must be that C s ~ %, . Otherwise, reversing the relabeling 
 which created p' from p would create s' such that % a Cs, . Hence there is x 0 E dom Cp, , but x 0 
~ dom C s . Given any Turing program z , let d be a program computing XX[~z(Z)] . Make  a copy p" of 
all quadruples of p' , with the changes: (i) no state names conflict with those of p' , and (2) in 
quadruples which use as next state one for which no further quadruples exist,  replace the terminal 
state name with an unused name qi " Now make a copy d' of the quadruples of d , changing state names 
so as not to conflict  with p" , except that ql of d is replaced with qi in d' . Finally, create a 
program t O by replacing each quadruple of p' which does not occur in s with the corresponding one 
from p" , and adding the quadruples of d' . The construc- tion guarantees that C s Ct0 , but off dom 
C s  t0's behavior depends on z . If z ~ K , then ~t (x0) converges, since ~p(X0) does. However, if 
z Â¢ K , then C t = C s . Another program t 1 can be produced in 0 exactly the same way, except that 
d' be modified by adding quadruples to lo- cate the first B on tape to the right, and over- print 1 , 
the new quadruples being invoked when- ever the unmodified d' would have halted, t 1 computes the successor 
of the function computed by t O off dom C s ; they agree on dom C s We are finally ready to decide if 
the given z lies in K . The construction guarantees that z Â¢ K iff t O and t I are both members of A 
, for their computations will be the same as that of s in that case, but otherwise they disagree at 
x 0 , so cannot have an upper bound. Therefore dovetailing the calculation of ~z(Z) with awaiting appearance 
 of both programs in an enumeration of A would solve membership in K , and hence p ~ A after all. 0 
Corollary. If a set of programs A consisting of all equivale_nts of a finite collection of programs (that 
is, ~ is of finite index in A ) is r.e., then A is recursive. Proof. Let Pl' "'" ' Pn Â¢ A be representatives 
of the finite number of program classes which com- prise A . By the theorem an r.e.d. S exists such that 
p E A ~ 2s Â¢ S[s~p] . Let s. Â¢ S 1 be the subprograms si~Pi , each with determin- ing set D i , 1 ~ 
i ~ n . Given any Turing pro- gram p , p c A = sis p for some 1 ~ i ~ n . We can effectively determine 
whether or not each s i is a subprogram of p by considering a finite number of relabelings of p in computations 
on the corresponding D i . That is, we have a membership test for A . 0 Theorem 2. If a set of programs 
A has a key subprogram set S which is r.e.d, such that for all Turing programs p , p ~ A = ~s e S[s~p] 
, then A is full and r.e.. Proof. Suppose q equivalent to p ~ A . Then there is s Â¢ S such that s~-p 
, from the left implication of the hypothesis, hence q Â¢ A from the right implication, as fullness requires. 
The following procedure enumerates A : simultaneously with an enumeration of S (with determination), 
examine an expanding number of yields of all Turing programs systematically, on expanding finite sets. 
When a coincidence appears between a finite deter- mining set for an S-program and a subset of the domain 
of program p , test all relabelings of p for identity of computations with that S-program on that set; 
one will be the same iff p E A . 0 The results solve a patent problem for Turing machines, showing that 
the set of Turing programs equivalent to a given program is either recursive or not r.e., and that the 
former case occurs iff the given program is a strict subprogram of no other. If there are no containing 
programs wlfich are not equivalent, then an r.e.d. S can be taken to be any program of the set alone, 
with its finite determining set. The program set is therefore r.e. by Theorem I, recursive by the Corollary. 
On the other hand, a strictly containing program would be forced into an r.e. set by Theorem 2, since 
it would contain a key subprogram. A containing pro- gram cannot be equivalent to its strict subprograms, 
so in fact the program set cannot have been r.e.. The application to theory of progrmmning is that the 
only programs which maybe patented (in that an infringement list can be generated) are those so tightly 
coded that no modifications may be made without altering the computation function. Machine-independent 
Computations A machine-independent form of the Turing pat- ent argument can be based on axioms for programming 
language semantics. Instead of Turing programs, consider any recursive set L as a language syntax, and 
an assignment to each program p Â¢ L of a partial recursive computation function C as P semantics, the 
axioms assigning the properties to {Cp}p e L @ An acceptable nt~nbering must be obtained in the standard 
way, and the semantic range ~st be a Blum measure: (B) Cp(X) = y , as a relation of triples  (p,x,y) 
, is recursive.  (E) There is a recursive function U which may be used to obtain for each program a 
partial recursive function computed:  q0p : Xx[U(Cp(X))] , and {~p}p Â¢ L is a numbering. (S) There 
is a recursive function J: L x L Ã· L such that for all p , q ~ L , and all x , x ~ dom Cq = ~j(p,q) (x) 
= ~p (~q (x)) . (B) and (E) include Blum's axioms and provide an enumeration theorem, while (S) gives 
an s-l-i theorem, t tSyntactic composition of this kind is more natural for progra~ning languages than 
parameterization itself. P. R. Young suggested that they are equiv- alent, conveyed by R. W. Ritchie. 
The proof that parameterization implies composition is well-known. For the other direction, consider 
the particular pairing function (2x+3+2y) 2- (8x+9) <x,y> = (x+y)22+ (x+y) + Y = 8 and particular programs 
m, b, q, d, r such that ~m = Xx[2x] q>o : Xx[x+l] ~q = ~X[x 2] ~0 d = hx[x-'l] ~Pr = Xx[x~8] The Turing 
notion of subprogram is machine- dependent, since it involves "states" and "relabel- ing." State isomorphism 
can be considered at the same time as "marking" parts of programs used in computations. Let 5 code the 
finite set D through repeated use of a pairing function, in- cluding the number of elements in D . There 
are recursive functions M: N + L , and H: N ~ N , such that for each P E L : (M) ~p]W ~ ~M(Cp~ ~ ~p 
' for each finite W = dom C . P (N) For each n O there is a t O such that H(t) > n O whenever t > 
t O . For each x E dom % , Cp(X) g H(CM(cp .  ~(x)) There exist finite determining sets D for p such 
that for each finite W , D gW~ domC : P CM(Cq~ 1 dora Cp = %~ (Cp~ for each q E L . (R) Any finite 
D ; dom C is determining P for M(Cp~ . The marking function M is presumed to create pro- grams computing 
functions not too different from those of the computations it maps (M), and to not distort the length 
of computations unduly (N). Determining sets are defined by (Di) and (D2); (R) gives an elementary connection 
with the marking function. Subprogram may now be given ~le machine- independent definition p~ q iff 
CM(L~)~ c_ CM(L~) for some P determining D for p and each finite W , D ~ W c dora C P Lemma I. If 
D is determining for p E L , then ~(~(~))~ = CM(Cp(W)) for each finite W , D ~ W ~ dom C P which can 
be used to create the total function  S = hp[J(r,J(d ..... J(d,J(q,J(b ..... Jj(b,m)...)))...))] . 
8p+9 times 2p+3 times such that for each p e L , all x , y , = ~p(<X,y>) , ~J(p,S(x)) hence 1 s 
1 = hxhy[J(S(x),y)] . Proof. With p = q , the hypothesis of (D2) is sat- isfied, and the restriction 
in the conclusion is superflous, giving the result D  The lenmaa not only displays the primary property 
of a determining set, but also shows that p ~ p for all p ~ L .  Lemma 2. If p~ q for p , q e L then 
~p = ~0q . Proof. Let x e dora Cp , and W = {x} U D , D de- termining for p . By Lenma 1 and the definition 
of subprogram, so by (E) and (M), ~0p ~ mq as required. [3  The len~na shows that function-computed 
domains be- have properly for subprograms. Similarly, for ex- ample, if p is a strict subprogram of 
q then ~p~ ~0q LatoNa 3. If D is determining for p ~ L , then M(Cp~ -~p . Proof. p~ M(p~ is by definition 
exactly (Di) with containment instead of equality. M(Cp~ ~ p is by definition CM(CM( p~ (D-')) = CM(p~ 
 for all finite W , D' c W =dora C , D' determin- ing for M(CD~ By (R)we may use n for D' then (Di) and 
Le~na 1 show that again equality actually holds. [3  The lenmaa shows that the marking function picks 
out an equivalent program from computations on a deter- mining set. Lemma 4. For each P e L , (q I 
q e L and p ~ q} is recursive; membership can be effectively decided using a determining set for p . 
 Proof. Given q e L and determining D for p , what must be decided is whether or not for each x E dom 
CM(L~D~ and finite W ,  D c W = dom C (D2) reduces the problem by per- P  mitting W to be replaced 
by D on the right (N) then solves the problem together with (B), as fol- lows: Since D is given, CM(c~(X) 
is found F  using (B). (B) also permits systematic testing of all possibilities for ~ . Should it 
happen  that such a value is found, CM( ~ (x) is com- M puted, and compared with CM(C (x) ~ to decide 
 F  the question. (N) supplies the bound to limit the possibilities tried for Cq~ . For each d e D 
, Cq(d) which might be tried is compared with  H(CM(c~(d)) , and if the latter is greater, there is 
no point in continuing by (N), and p is not a subprogram of q . The lemma affirms the effective character 
of the definition of subprogram. A final axiom permits effective modification of a program without 
disturbing its subprogram. There is a recursive function G: LxNxL Ã· L such that for each p , q , s ~ 
L : [s~ p and D determining for s] = (G) [s ~ G(p,~,q) and for each x , x E (dom Cp - dom Cs) = ~G(p,U,q) 
(x) = ~q(~p(X))] . Most Turing arithmetizations satisfy these nine axioms. Application to digital computer 
machine languages should be straightforward, since the level of such languages is similar to that of 
Turing languages. It can also be argued that high- level languages satisfy the axioms, for example, ALGOL 
68 considered as a language of procedure- with-integral-parameter-integral identity-declara- tions and 
a suitable standard-prelude [8]. The machine-independent proofs of the results about r.e. sets of programs 
follow those for the Turing case closely. The following notes indicate points where appeal to particular 
properties of Turing programs must be replaced with citation of an axiom or lemma. In the proof of Theorem 
I: S is enumerated with determination by using (B) to consider successive candidates for computation 
values on expanding finite sets. When finite D : dom Cp is found by this process, M(Cp~ is simultaneously 
awaited in the enumeration of A , and added to S if it appears, along with D , which is determining 
by (R). In the right implication, Lemm 3 justifies the assertion that when a determinin~D for p is used, 
the corresponding s = M(%(D)) is forced into A (and hence into S ) by fullness. In the left implication, 
Lemma 2 justifies the remarks about domain containment. The two programs which are both in A iff z ~ 
dom ~z are t O = G(p,D,d) and t I = g(p,D,J(b,d)) where ~b = hx[x+l] and D is determining for s , 
using (G) and (S). In the proof of the corollary: Lemma 4 permits application of the theorem as a membership 
test for A , since it allows effective verification of the relation s~p using a determining set for 
S . In the proof of Theorem 2: Again Lemma 4 replaces the test involving relabelings, and (B) is used 
to try all computation possibilities as in the con- struction of S in Theorem i. It is evident that 
the axioms which define machine-independent computations are too tailored to the results. ((R) and (G) 
have particularly little to recommend them.) The axiomatic exercise does show that computation functions 
are not dif- ficult to capture abstractly. As the most detailed description of a program's actions, they 
make an ideal semantic range. References <RefA>i. Rogers, H., Jr. Gddel numberings of partial recursive functions. 
JSL 23 (1958), 331-341. 2. Bl~a, M. A machine-independent theory of the complexity of recursive functions. 
JACM 14 (1967), 322-336.  3. Hamlet, R. G. On programs and partial recursive functions. University of 
Washington Computer Science Group Technical Report 70-09-02 (1970).  4. Rice, H. G. On completely recursively 
enumer- able classes and their key arrays. JSL 21 (1956), 304-308.  5. Friedberg, R. M. Three theorems 
on recursive enumeration. JSL 23 (1958), 309-316.  6. Pour-el, M. B. G@del numberings vs. Friedberg 
numberings. JSL 29 (1964), 252-256.  7. Davis, M. Computability &#38; Unsolvability. McGraw-Hill Book 
Company, New York, 1958.  8. Hamlet, R. G. Partial recursive computation. Dissertation, University of 
Washington, Seattle, 1971; to appear as a Computer Science Group Technical Report.</RefA>   
			
