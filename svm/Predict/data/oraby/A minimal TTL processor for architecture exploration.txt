
 A MINIMAL TTL PROCESSOR FOR ARCHITECTURE EXPLORATION Bradford J. Rodriguez McMaster University Keywords: 
CPU, processors, architecture, education Computer architecture i.~ presently ~ught "hands-on" only when 
adequate VLSI design tools are available. The PlSC'is a processor constructed from discrete TTL logic, 
which illustrates the operation of both hardwired and mieroeoded CPUs. An efficient stack machine is 
easy to implement, and simple hardware modifications demonstrate interrupts, memory segmentation, microsequeneers, 
parallelism, and pipelining. A standalone PISC board should be an economical and effective tool for teaching 
processor design. Introduction The study of computer architecture is often an abstract, paper exercise. 
Students cannot probe the inner workings of a single-chip microprocessor, and few discrete-10gic machines 
are open to studentinspection. Only universities that have VLSI design tools can give hands-on experience 
in processor design and implementation. Less fortunate institutions can only offer their students "book 
learning." The Pathetic Instruction Set Computer is a model processor constructed entirely ofdi'serete 
logic, illustrating the principles of both hardwired and mieroprogrammcd CPUs. Requiring only 22 standard 
TTL chips (excluding memory), it is well within the ability of a student to construct and understand. 
Its writeable micropro~n'am store uses inexpensive EPROM and RAM. Being fully static, it can be run at 
slow clock speeds or manually single- stepped for observation. Simple extensions demonstrate: interrupts, 
split instruction and data spaces, mierosequencers,. parallelism, and pipelining. The Basic Processor 
 The PISC-la processor (Fig. 1) is designed to achieve a maximum of functionality with a minimum of logic. 
It is remarkable for Fig. 1 The Basic PISC-Ia ..........  ] "o" [~F,-- A [ "l'y latch A latch ALU~A('=B 
Ain Cin I i REG FILE i "fetch" bus ~-~!..~.~bus IR 15:0 ..,....Â°. ......... - ........ .................... 
"''""',...,..,... CLK20Ons 10 11 1 x x x t 1 1 000 00 reg reg select function ~exe~ MRD MWR ~latch status 
 Permission to copy without fec all or part of this material is granted provided that the copies are 
not made or dislributezl for direct commercial advantage, the ACM copyrightnotice and the title of the 
publication and its date appear, and notice is given that copying is by permission of the Association 
for Computing Machinery. To copy other,aise, or to republish, requires a fee and/or specific permission. 
O 1994 ACM 089791..647-.6/94/0003 $3.50 having only 16 internal control signals, and thus a horizontal 
(uneneoded) microinstruetion only 16 bits long! The ALU comprises four 74181 s, which can perform the 
aritfi- merit operations of add, subtract, increment, and decrement, plus all logical operations, on 
16-bit numbers. A programmable status latch and a 4-way multiplexer for the carry input complete the 
ALU logic. Eight 74172s provide eight 16-bit registers in a three- port register file. This file may 
simultaneously write one register ("A"), read a second ("B"), and read or write a third ("C"). In a single 
clock cycle, the following occurs: a) one register is output to the Address bus and the ALU's A input; 
bl) another register may be output to the Data bus and the ALU's B input; or b2) data from memo/y may 
be input to another register: e) an ALU function is applied to A (and perhaps B) and the result is stored 
in the first (address) register. There is no dedicated microsequencer; its functions are performed by 
the ALU and register file. Every microinstruction has two phases: fetch and execute. During the fetch 
phase (illustrated in Fig. 1 ) a hardwired "pseudo-instruction" is executed: a) output R7 (the program 
counter) to the Address bus and thc ALU's A input; b) read data from memory; c) apply the function A+I 
and store the result back in R7 (at the trailing edge of the clock). Dedicated logic causes the memory 
data to be stored in the Instruction Register (IR) rather than in the register file. During the execute 
phase, this instruction is performed and the fetch instruction is reloaded into the IR. Thus every microinstruction 
requires two clock cycles. The control logic for this (not shown) involves only two flip-flops and a 
NAND gate. Microprogram store and main program store are one and the same. Indeed, the PISC has characteristics 
of both a hardwired CPU and a microcodcd CPU. PISC as a Hardwired CPU The PISC may be viewed as a conventional 
CPU with a hardwired control unit, a register-register architecture [3], and a badly encoded instruction 
set vaguely reminiscent of the PDP- 11. ALU operations are one- or two-operand, and include register- 
register move, add, add with carry, subtract, subtract with borrow, increment, decrement, left shift, 
and all logical functions. There is no multiply, divide, or right shift. Memory operations are load and 
store, and have three addressing modes: register indirect, register indirect with postincrement, or register 
indirect with postdeerement. Postincrement addressing on R7 (the program counter) yields immediate addressing. 
Control instructions are ALU operations on the program counter. Register indirect jump (absolute or relative) 
and conditional skip can be done in a single instruction. Other jumps and branches, and subroutine caU/retum, 
must be explicitly coded. PISC as a Microprogrammed CPU The P1SC instruction word actuates physical control 
signals, and one can view the PISC as a microprogrammed CPU. The basic PISC implements a conventional 
machine inefficiently, since it lacks the logic to separate and decode the fields of a macro- 338 instruction. 
But the PISC excels as a zero-operand architecture, i.e., a stack machine. The fastest implementation 
uses threaded code [1] and a 16-bit m~eroinstruetion. This reduces the microinterpreter to one mieroinstruetion: 
MRDPC,IP, A+I ;mem(IP)->PC, IP+I->IP One register is dedicated as the macro Instruction Pointer, and 
one or two others as stack pointers. Some flexibility can be gained by adding one microinstruetion to 
the interpreter to use indirect threaded code [2]. Logically, the microprogram stor e should be separate 
from the macroprogram memory. But a unified macro- and micro-program store allows the programmer to write 
microcode and add new maeroinstructions --a valuable educational tool. Such an "extensible instruction 
set" in a stack machine is evocative of the programming language Forth, and this concept has been anticipated 
by several dedicated Forth processors [4]. Glaring Deficiencies After a short period of use, many weaknesses 
of the PISC become evident, including: a) no conditional branch microinstruetion - an important need 
[61; b) no provision for literal values in the microinstruetion; c) no ALU logic for multiply, divide, 
and right shift; d) no logic for decoding of macroinstruetions; e) no provision for interrupts; If) sparse 
coding of the ALU function select; and g) two clocks required per microinstruction. It can be argued 
that the PISC is a valuable educational tool because these faults, and several potential solutions, are 
painfully obvious. Some faults cannot be rectified without substantial added logic, or an expansion of 
the mieroinstruetion word. But several improvements are trivial. ALU Operation Decoding Seven bits of 
the 16-bit microinstruetion (including the carry input select) select the ALU function. Fewer than 32 
of the 128 codes are actually useful, however. A "nanocode" memory [3], or combinational logic, could 
reduce the ALU field(s) from seven to five bits. Alternatively, unused function codes can be decoded 
to generate auxiliary control signals. For example, the carry input select (IR6:5) is a "don't-care" 
for logic operations (IR4=l). Thus 48 of the 64 logic function codes can be used for other purposes. 
A single 74138 can provide eight supplementary control signals, such as interrupt enable and disable. 
Additional logic can prevent the ALU output from being written to a register, if desired. Conditional 
ALU Operations A simple conditional mieroinstruction modifies the ALU function according to the carry 
status. Two modifications are useful: a) if carry set, change ALU operation from "A" to "B" (conditional 
jump) b) if carry set, change ALU operation from "A" to "A+B" (conditional branch) Unused ALU functions 
can be decoded for these operations, and suitable logic added to alter the ALU function select inputs. 
This does, however, add delay to the critical timing path of the CPU. lnterru~s Two kinds of interrupts 
can be added easily to the PISC. Miero-interrupts can be implemented by having the interrupt set a flip- 
flop, changing the program counter in the fetch pseudo-instruction from R7 to R6. R6 must be dedicated 
as an interrupt service register, and an additional control signal must be decoded to reset the flip-flop. 
(The RCA 1802 used a similar interrupt scheme.) Macrointerrupts can be recognized by the mierointerpreter 
by adding a conditional skip and an interrupt service routine to the microinterpreter. The interrupt 
input is connected to the carry input multiplexer, replacing the little-used A=B input. The interpreter 
is slowed by only one mieroinstruetion. In either case, registers and the status latch must be saved 
and restored by mieroeode. Logic to disable the interrupt inputs is desirable. Multiple Memory Spaces 
Many processors, such as the PDP-1 l, enforce a division of instruction and data space. Since the bits 
that select the PISC address register are available, and R7 is the program counter, a 'three-input NAND 
gate can produce an "instruction space" enable signal. This signal is correctly asserted for immediate 
addressing mode. Further segmentation of the memory space depends upon the register assignment for the 
macro machine. One 2-to-4 decoder can identify mieroeode, macroeode, stack, and data spaces in the threaded 
stack machine. (This is suggestive of the 80x86.) Parallelism If the microcode memory space is separate 
from main memory, the fetch and execute phases can occur in parallel, and each microinstruction can execute 
in one clock cycle (Fig. 2). A 12- bit (optionally 16-bit) counter serves as a rudimentary micro- sequencer. 
This liberates the ALU from its sequencer role, and eliminates the need for the fetch pseudo-instruction. 
Each clock cycle fetches a micminstruction from the microprogram ROM. Fig. 2 Parallel Fetch and Execute 
CLK -4200ns~  I 1 I 1 I microprogram store [ fetch N. Ifetch N+I l execution ""'-.% A D [execN-I t exeeN 
I bus bus ALU (for writes to R7) -CLK 12 or 16-bit counter micropmgram store instruction register Absolute 
jumps are still possible by loading the counter from the ALU or Data bus. But ALU operations on the program 
counter are no longer permitted, eliminating the relative branch, conditional skip, and immediate addressing 
capabilities. Micreinterrupts are also lost; macrointerrupts become impractical. Since each mieroinstruetion 
is executed one clock cycle after it is fetched (Fig. 2), a jump instruction will experience a one-clock- 
cycle delay, and the instruction following a jump will always be executed. This is the "delayed branch" 
seen in most micro- programmed machines and some pipelined RISC machines. With this configuration, a 
main memory access need not complete in one clock cycle. The limiting factors in clock speed are the 
ALU path and the microinstruction ROM. Preliminary studies 339 indicate that the clock speed of the PISC 
can be doubled, with two clock cycles required for a main memory reference. Load/Store (RlSC-iike) Operation 
A further modification (Fig. 3) re-unifies the microcode and maerocode memories. During ALU operations 
the address buffer is disabled, and fetch and execution remain simultaneous. But during a memory 10ad 
or store, the ortput of the PC is tri-stated and the address buffer enabled, allowing the ALU to address 
the main memory (PROM' and RAM'). The count input of the PC is also disabled, and the IR is loaded with 
a "dummy" instruction (NOP). After the memory access is complete, the dummy instruction executes and 
the PC fetches the next instruction. The Mutable Fig. 3 ~ l PISC bus X --~ ...... --X In this configuration 
the PISC can be viewed as a load/store architecture [3]. Like a RISC machine, all instructions execute 
in one clock cycle, except for memory references which require two. If the address buffer is bidirectional, 
the PC can be routed to the ALU. This restores the relative branch, conditional skip, and immediate addressing 
capabilitiea. The "Mutable PISC" It would be unreasonable to hand students "a bag of parts" and a wirewrap 
tool, and expect them to construct the PISC as a class exercise. A printed-circuit-board of the basic 
PISC and its simpler enhancements would be more attractive to the student, although perhaps less attractive 
to the experimenter. This is envisioned as the PISC-2 (Fig. 3). The PISC-2 will use the Am29705 register 
file instead of the obsolescent and scarce 74172. This will require the addition of a 16-bit Data latch, 
and a few more control signals. Rather than expand the mieroinstruction word, a minimal function decoder 
will be added. By judicious insertion and removal of components, the PISC-2 can be configured as a PISC-1 
(two-eloek instructions), a separate mieroprogram machine, or a load/store machine. Program development 
in the "unified memory" configurations could be via keypad and display, or an RS-232 serial port, using 
an on-board monitor program. Conclusions An educational drawback of the PISC is its abysmal implemen- 
tation of "conventional" (1-or 2-opemnd)maeromaehines. This is a consequence of the PISC's original "mission": 
a stack processor using a minimum of standard TTL logic (22 devices, 2100 gates). But the P1SC vividly 
teaches that power does not necessarily imply complexity. Compare the speed of a 5 MHz PISC- 1 a to a 
5 MH_z 8086, when executing eForth primitives (giv.en as number of 200 nsee clock cycles): primitive 
P1SC 8086 primitive PISC 8086 NEXT 4 23 >R 10 51 EXECUTE 4 19 ~ 10 53 DROP 6 29 ENTER 10 49 EXIT 6 39 
OVER 12 50 BRANCH 8 36 AND 12 53. DUP 8 46 0< 14 47 @ 10 52 SWAP 12 61 LIT 10 46 ?BRANCH 16 51/56 R> 
10 50 UM+ 18 69 R@ 10 44 The QS2, a processor design remarkably similar to the PISC, has been successfully 
used in a VLSI design course [5]. The PISC has the advantage of being built entirely from standard TTL; 
thus, it is within the reach of even the most impoverished institutions and students. Author's address: 
b.rodriguez2@genie.geis.com, or Box 77, McMaster University, 1280 Main Street West, Hamilton, Ontario 
LSS 1C0 Canada.  References <RefA>1. Bell, James R., "Threaded Code," Communications of the ACM, Vol. 16 No. 
6 (June 1973), pp. 370-372. 2. Dewar, Robert B. K., "Indirect Threaded Code," Communi- cations of the 
ACM, Vol. 18 No. 6 (June 1975), pp. 330-331. 3. Hennessy, John L. and Patterson, David A., Computer 
Architecture." A Quantitative Approach, Morgan Kaufmann Publishers, San Mateo, CA (1990). 4. Koopman, 
Philip J., Stack Computers: the new wave, Ellis Horwood I3d., Chiehestcr. England (1989). 5. Rible, 
John, "QS2: RISCing it all," Proceedings of the 1991 FORML Conference, Forth Interest Group, Oakland. 
CA (1991), pp. 156-159. 6. Stallings, William. Computer Organization and Architecture, Macmillan Publishing 
Co., New York (1987).  </RefA>340   
			
