
 A LOCAL COMPUTER NETWORK SIMULATION John M. McCoy Stewart L. French Razmik Abnous M. J. Niccolai University 
of Louisville Abstract Computer Networks are an important part of our society and they are quickly becoming 
an integral part of computer science basic curriculum. This paper describes the development of a computer 
simu- lation model for a local computer network and its use as a viable tool in computer science education. 
Key Words Computer Network, Local Computer Network, Modeling, Computer Simulation, Computer Network Simulation, 
Computer Performance. I. Introduction Computer networks are an important part of our society and dipectly 
or indirectly affect many people. Networks such as airline reservation sys- tems, 24-hour banking systems, 
and the telephone switching system underlie many of our normal acti- vities. For the purposes of this 
paper, a computer network will be defined as a system with multiple interconnected processing elements. 
Usually there are some global resources which all processing elements can utilize. Alocal computer network 
is a network where all processors are located in the same geographic location. This paper describes the 
development of a computer simulation model for a local computer network and its use as a viable tool 
in computer science education. Computer simulation of computer networks is a timely topic with much work 
currently being done. However, reference material is scarce and books dealing with this subject are just 
being introduced. The development of a simulation model for our local network was desirable since the 
network architecture developed did not match exactly any existing system. One of the main uses of a computer 
simulation in computer architecture is to model the new system to determine if any major perfor- Permission 
to copy without fee all or part of this material is granted provided that the copies are not made or 
distributed for direct co~mlercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. &#38;#169; 
1981 ACM 0-89791-036-2/81/0200/0263 $00.75 mance bottlenecks exist, and if any are found, pos-sible 
techniques for eliminating them can be tested (i). The system which was modeled is a multi-user system 
and simulation models have been effectively used in the past to evaluate hardware parameters such as 
the number of terminals, as well as soft-ware parameters, such as the optimal type of scheduling algorithm 
(2,3,4,5). The simulation model described in this paper has several educational uses including: i. Teaching 
simulation development inciuding the modeling of complex systems, as well as implementation and statistical 
analysis; 2. The implementation of the model illustrates concurrent programming techniques using the 
DEC SYSTEM I0 interactive version of SIMULA, an ALGOL based simulation lan- guage (6,7); and 3. Teaching 
the concepts of computer network- ing. Although this project includes con-struction of the network, the 
simulation model introduces networking cohcepts without the need for a large amount of expensive equipment. 
The techniques used in this model could be used to study other types of computer networks.  II. Description 
of MANTRA System The Multiple Access Networking and Teaching Research Arrangement (MANTRA) system is 
the net-work analyzed by this simulation model. Figure i contains a block diagram of the system. All 
com-puters in the network are LSI-I1/03 microcomputers manufactured by Digital Equipment Corporation 
(DEC). The Terminal Interface Processor (TIP) is one processor dedicated to the function of interfacing 
terminating devices to the rest of the network. A terminating device is defined as a device capable of 
communicating using the RS232C or 20 ma loop standards which means that terminals or stand-alone computer 
systems such as APPLE microcomputers, PET microcomputers or even a large-scale computer such as IBM 370 
will have the ability to communicate with the MANTRA system. 263 ~,,,us p~ TIP ~ The tip can be functionally 
viewed as a data router or a front-end processor since it is an interrupt-driven high speed buffering 
device allow- ing data to flow in 3 directions including: i. Device to Device 2. Device to Central LSI-11 
Processor 3. Central LSI-11 Processor to Device  The central LSI-11 processors or processing elements 
(PE's) are LSI-11 processors capable of running user applications code. These processors also have the 
capability to communicate with each other via the MANTRA protocol and high speed DMA channels. All.central 
LSI-11 processors are connected to a specialized processor used to control a variety of peripheral devices, 
including: floppy discs, hard discs, line printers and other devices. The cQmbination of these shared 
devices is called the "Peripheral Pool". The computer which controls the Peripheral Pool is called the 
Back End Processor (BEP). Any central LSI-11 can connect to a free device in the Pool. The pooled device 
is then considered connected to the particular device until exp!icitly or implicitly released. III. Description 
of the Model The simulation model was designed to answer performance questions of the interrupt capabilities 
and DMA transfer rates of the TIP. Questions con-cerning the peripheral pool's dedicated processor, in 
regard to the number of requests that appear in a given time interval, could be resolved to find the 
optimum buffer length in this processor. Specifically, two questions are addressed: i. What is the maximum 
number of terminating devices and LSI-II processors that the terminal Interface Processor can handle 
given: A. Various hardware response times B. Various software speeds of response. The next question is 
much more subjective and is a function of many parameters including sophisti- cation of program and operating 
system overhead. 2. What queue size should be allocated within the Peripheral Pool control processor 
to efficiently handle the I/0 requests. The model provided has several capabilities including: 1. Real-Time 
Application A. Gather data on user response time distribution; B. Gather data on system response time 
distribution; C. Gather LSI-11 commands to use later in automatic mode. 2. Automatic Mode Allows for 
selection of parameters, then the program will automatically select transactions from a direct access 
file of 1 real-time collected transactions. 3. Various Configurations A. In real-time, a user can select 
any combination of terminating devices and/or any combination of processing elements to communicate with. 
B. In automatic mode, a configuration will be selected by t'he user and an associated interconnection 
matrix will be read from a file of stored configu- rations. 4. Real-Time Disc Accesses The disc accesses 
will be performed in real time when in the automatic mode. This will support the following capabili- 
ties: A. Supply data to the system of a varying length. B. Supply meaningful data for an LSI-I1 to LSI-II 
communication configuration. In the initial set of experiments using the model, three parameters were 
selected to test including: I. Number of LSI-11 central processors and number of terminating devices. 
Since in the initial configuration of the MANTRA system one terminal would communi- cate with one LSI-II, 
the configurations for this study were limited to 5 cases, all being on a one-to-one basis. The cases 
examined ranged from two terminating devices communicating with two LSI-11's to thirty-two terminating 
devices communi- cating with thirty-two LSI-II's. 2. Speed of the DMA Handling One of the five potential 
values could be selected with each value including soft-ware, hardware, and transmission delays. 3. 
Speed on interrupt responses One of five potential values could be selected with each value contained 
in the interval of typical hardware interrupt response time (8,9).  264 The output variables generated 
by the model defines the interval of time that was considered are: user think time as used by the model. 
1. Length of Terminal Interface Processor's queue per time interval. Ideally the queue length will be 
zero until the number of devices and LSI-II's with the response of the TIP exceed its capability to respond 
quickly enough. 2. Number of characters serviced per time interval within TIP in two regards: A. DMA 
B. Interrupts to and from terminating devices 3. Length of disk request queue within Peripheral Pool 
Processor  IV. Use of a Model in Computer Science Education The model of the MANTRA network is directly 
useful in illustrating the major steps necessary for the development of a computer simulation, as well 
as for the development of the local computer network. It illustrates the analysis step in the overall 
approach used to design the model. Figure 2 is a diagram which illustrates the flow of data through the 
simulation. It illustrates the com-plexity of queue representation for any computer network, .L ~2 The 
model illustrates the statistical analysis steps necessary in any computer simulation. The two major 
types of statistical analyses required were: 1. Gathering necessary statistical distributions i Time 
n User hits return Time n+l Output begins I Time.n+2 User hits return The time interval A represents 
the computer response time. The time interval B represents the user think time. FIGURE 3 - RESPONSE 
TI~ CALCULATIONS Figure 4 is a graph of the calculated user think time distribution used by the model. 
14 I@ 8 x , * -x . 6 2 Ig 2~ 3@ 4@ 5@ x FIGUR= 4 -User Thin::Tzrl~ Distribution The next required 
distribution was a computer response time distribution which was obtained by fitting empirical data to 
an exponential distri- bution. Figure 5 is a graph of the computer response time distribution. The curve 
was divided into three intervals including: I. LSI Response Time This interval was used for simulating 
commands that did not require disc usage. 2. Disc-con~and Response Time This interval was used to simulate 
com- mands that did require disc usage. Our model required two statistical distribu-tions so that it 
could run automatically and gather data. The first was a user think-time distribu- tion-which is used 
to create transactions from the simulated terminating devices. This distri- bution was obtained by running 
the simulation in a real-time mode with real users and fitting the gathered data to an exponential distribution. 
An exponential distribution was used because of its past success in modeling terminal requests in multi-user 
computer systems (10,11). Figure 3 3. Application Code This interval was viewed as representing the response 
times of user application code and was not used in the model. The Kolmogorov-Smirnov test was used to 
verify the obtained distribution at a 99% confidence level. 265 DMA unit cannot support more than 16 
computers or terminating devices. ~~ ~ RO~TER SPEED 0.00=755 -I I 1 1 P(x) -1.43 " ElP('x/l.4.~) 2 
3 4 ~ 6 F~G~.R~ 5 - Com.ruger and 0£S¢ ~esponse Time Di$=r&#38;bu~ion 2. Statistical Analysis of Output 
The large amount of data produced by the simulation was reduced to plots. Figure 6 contains a plot of 
the mean disc request queue length ver-sus number of LSI-11's. Since this is a one to one correspondence 
between terminating devices and LSI-II's, this graph also shows how increasing the number of terminating 
devices affects the system. FO~JTE~ 5PEEO 0.COC75,3 E o LEGEND OMQ SPEED ml. o,ooooo2 A2. 0.000250 
+3.0.000500 xq. 0.000750 ~5. o.ootooo #7 =~ This graph seems to indicate that the network can- not support 
more than 16 computers or terminating devices since the mean disc request queue size in-creases rapidly 
as the number of computers goes beyond 16. Figure 7, which contains a graph of the mean number of characters 
handled bythe DMA Unit, seems to support this conclusion since it levels off at about 16 computers indicating 
the ~EGENB DMA SPEE0 ~=. ~: ~:ooooo2 A 000250 z +3, 0.000500 x~. 0.000750 5. 0.001000 c.~.- s ~.47 
r- 70, .]~ -$ [ -l : ' ] V. Conclusions This type of modeling effort has also been shown to be concurrent 
programming. The major problem in teaching concurrent programming con- cepts is the difficulty in representing 
and imple- menting such programs. SIMULA is an appropriate language to use to implement concurrent programs 
and is one of the few high level languages which provides such facilities. Our work was directed toward 
using SIMULA to model a local computer net-work; however, with extensions, it could be used to model 
multi-user operating systems and study the use of various scheduling, device and memory allocation schemes. 
The model described in this paper allows schools with limited budgetsto enter the expand- ing field of 
computer networking and to experiment with different network configurations without the large amount 
of money necessary to actually build such a system. Feasibility studies of new archi- tectures by a simulation 
model might increase the chance of funding so that a system can be built. In conclusion, it is likely 
computer networks will become more common and the use of computer simulation of networks will also expand 
since the complexity of networks is growing at a much faster rate than the mathematical theory necessary 
to analyze these systems using analytical methods. A complete manual with examples and source listings 
can be found in reference 12. In addition, the general SIMULA model described above is avail-able on 
tape for use on DEC-IO equipment. 266 Vl. References <RefA>1. Stone, H., Introduction to Computer Architec- 
ture, Science Research Associates, 1975, pp. 474-541. 2. ibid. 3. Martin, James, Design of Real-Time 
Computer Systems, Prentice-Hall, 1967. 4. Hellerman, Herbert, Computer System Perfor- mance, McGraw-Hill, 
1975. 5. Yourdon, Edward, Design of ON-LINE Computer Systems, Prentice-Hall, 1972. 6. Franta, W. R., 
The Process View of Simulation, Amsterdam, North-Holland, 1977. 7. Swedish National Defense Research 
Institute, SIMULA Language Handbooks I, II, III, Dec System I0 Documentation, Digital Equipment Corporation. 
 8. Micro-computer Processors~ Digital Equipment Corporation, 1978, pp. B-4, B-5. 9. Micro-computer 
Processor Handbook, Digital Equipment Corporation, 1979, p. 556.  10. Martin, pp. 372-438. 11. Hellerman 
 12. University of Louisville Class Project Report, AMCS 522 Discrete System Simulation, "A Simulation 
of the MANTRA Local Computer Net- work", Razmik Abnous, Stewart French, John McCoy, Unpublished.  </RefA>
			
