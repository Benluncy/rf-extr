
 A Discrete-Continuous Algorithm for Molecular Energy Minimization R.S. Maier J.B. Rosen G.L. Xue AHPCRC 
CSci Dept AHPCRC University of Minnesota University of Minnesota University of Minnesota Minneapolis, 
MN 55415 Minneapolis, MN 55455 Minneapolis, MN 55415 maier(ikl.arc.umn.edu rosen@cs.umn.edu xue@sl. arc.umn.edu 
 Abstract We present a parallel algorithm for minimizing molecular energy potential functions applied 
to the case of pure Lennard-Jones clusters. The algon thm demonstrates the combination of discrete, lattice­based 
optimization with continuous optimization (re­laxation) techniques. The suggested approach is not restricted 
to the Lennard-Jones potential and is aimed at problems in which the potential of interest may be significantly 
more costly than the Lennard-Jones. The intended audience includes researchers interested in practical 
computational problems involving minimum energy cluster conformation, such as may amuse in catalysis, 
and those interested in algorithm develop­ment. The advantage of the algon thm is that the time required 
to jind the minimum-energy structure for a relatively large cluster reduces to that of an interactive 
session. Our parallel implementation is capable of de­termining the best-known, previously published 
binding energies for n < 1.50 LJ clusters in a matter of seconds and has provided new results on minimum 
energies for clusters of up to n = 1000 atoms using a massively­parallel processor, the Thinking Machines 
CM-5. Introduction Computational methods for minimizing molecular potential energy functions have attracted 
substantial interest among optimization researchers. One of the fundamental problems in this area is 
that of minimiz­ing the potential energy of the pure Lennard-Jones (LJ) cluster [5] ,[3], A number of 
research papers have been published dealing with optimization methods for this problem [2], [7], [15], 
[19]. In this paper, we call attention to an algorithmic approach [10] which is rel­atively unknown among 
optimization researchers and has proven extremely successful for LJ clusters with up to n = 150 atoms. 
The purpose of our research is to investigate the properties of this approach for large clusters and 
draw conclusions regarding its usefulness in a more general molecular energy minimization con­ text. 
The difficulty of the LJ cluster problem arises from the fact that it is a global optimization problem 
with an exponential number of local minima [5]. It is axiomatic that the solution of a global optimization 
problem, or multiple-minima problem, will be im­proved by any physical understanding of the problem which 
serves to restrict the search space, or domain, which contains the global solution. In the case of the 
pure LJ cluster, the critical assumption is that a well­dejined set of lattice structures contains at 
least one initial cluster configuration which relaxes to the ground state. The support for this assumption 
comes primar­ ily from numerical investigations [5], [10]. For the LJ cluster, the lattice structures 
consist of an icosahe dral core and particular combinations of surface lattice points. Given this physical 
insight into the problem, the approach outlined below begins with a discrete optimization algorithm applied 
to a relatively small sample of initial states. The resulting lattice minima are then relaxed aa a continuous 
minimization prob­lem. The method we have used can be described at a 778 1063-9535/92 $3.00 @ 1992 IEEE 
high level of abstraction: 1. Define S as a set of lattices. 2. Define a potential function for the 
discrete problem. 3. For each element in S,  Repeat Perform lattice search based discrete optimization 
to identify minimum energy lattice conformations. Until stopping criteria satisfied. 4. Define a potential 
function for continuous problem. 5. Perform relaxation (continuous minimization) for each minimum energy 
Iat tice conformation.  In sections 2 and 3, we introduce the lattice typea and potential functions 
used in the algorithm. In sec­tion 4, we define the lattice search algorithm and a limited-memory variant 
of the BFGS minimization al­gorithm [8] used to relax the lattice configurations, including discussion 
of parallel implementation on a massively parallel processor. In section 5 we present computational results, 
including binding energies for up to n = 1000. In section 6 we draw some conclu­sions about the algorithm 
and its application to more general problems. An appendix is provided to permit reproduction of the lattices. 
Lattices We will denote a pure, n-atom, molecular cluster configuration by the vector z E R3 x n Z={pl, 
. . ..pn}. pi E R3 (1) where the pi denote three-dimensional atomic coordi­nates. The sampling space 
of initial molecular con­figurations includes the IC and FC lattices (see ap­pendix), based on an icosahedral 
core but differing in the arrangements of atoms on the outer shell. The construction of these lattices 
is described in detail in the appendix. A sample or sampling unit from these lattice structures is an 
n-atom cluster selected in a certain way, using randomization. This procedure is dkcussed in section 
4. A main assumption is that the configurations con­tained in the IC and FC lattice include an initial 
state 5 in the region of attraction of the global minimum. The evidence for this assumption is empirical. 
It is generally agreed that the n = 13 and n = 55 MacKay icosahedra relax into minimum-energy states 
for the pure LJ cluster. Further, the loweat binding energies in the published literature can be obtained 
from initial states selected from these lattice structures [10]. 3 Potential Functions We consider only 
two-body forces between compo­nent atoms, leading to the general tw~body, n-atom Lennard-Jones potential 
n j-l V.(p) = ) ;~ ~LJ(ri,j) (2) j=2 i=l where VLJ = (ri,j 12 2r~j6), and ri,j = [[Pj ~illz k the pair 
distance, with gradient n Vjvn(p) = 12 ~ (r~~4 r,~j8)(pj pi), j = 1,..., n. i=l,i#j (3) For reproducing 
results by other researchers, we have also used the nearest-neighbor (NN) potential NN( )={:i :-!+3} 
 4) The NN potential is used in addition to the LJ during the lattice optimization phase to identify 
candidate lattice configurations for subsequent relaxation. For certain cluster sizes, lattice minima 
of the NN poten­tial relax more freely (lead to lower binding energies) than the lattice minima of the 
LJ potential. 4 Algorithm 4.1 Discrete Optimization Given a lattice of N points, the n-atom lattice opti­mization 
problem (with n < IV) can be formulated as 779 the nonconvex, quadratic, integer programming prob­lem 
(5)min X-1 Z:=i+l (rU)aia~ s.t. ~~lai = ~,ai E {0,1}, i= 1,..., N where the zero-one variables ai indicate 
an atom in the ith lattice position, and the pair potentials V(rij ) =e fixed quantities corresponding 
to pairs of atoms at the ith and jth lattice points. Because this formulation is an indefinite, O 1 
integer program with many local minima, it is difficult to solve directly. In the next sec­tion, a heuristic 
algorithm for evaluating lattice local minima is described and analyzed. 4.2 Lattice Optimization Algorithm 
Given a set of N lattice points, the following alg~ rithm generates a sequence of random n-atom subsets 
from the lattice. Treating each random configuration as a starting point, the algorithm performs a local 
lat­tice search by iteratively dropping and adding lattice points, until a lattice local minimizer is 
obtained. The lattice minimizers with the lowest function value ob­tained from this process are saved 
for subsequent re­laxation. Following [10], we use two kinds of lattices, the IC and the FC. It is assumed 
that one type of the lattices has been chosen before the algorithm is applied. Algorithm 4.1 { Lattice 
Optimization for n-atom cluster} 1. lnitiahzation. Find the largest IC lattice which contains at most 
n points and call this the lattice core. Let IeOv~ be the index set of the core with N core = llcor, 
1. If N.o,e = n, put then atoms on the core points and stop. 2. Initialization. Find the next IC or 
FC lattice shell and let l~ ~j be its index set with NSU~j =  l~,~~j [. Define N = N~~,, + N.~~f as 
the total number of points in the lattice. For each lattice point on the surface layer, compute the potential 
energy between this point and all lattice points in the core. For each pair of lattice points on the 
outer layer, compute the pair potential energy between these two points. 3. Generate n-atom cluster with 
random surface configuration. The Ncore Positions in the core are always filled. The remaining n NCO~~atoms 
are randomly assigned to the surface sites. 4. Lattice search. Drop the atom on the outer shell which 
has the least contribution to the total po­tential (the most loosely bound atom) and re­place an atom 
at an unfilled surface lattice point with the greatest contribution to the total po­tential (the most 
tightly binding empty lattice point). If this improves the total potential, go to Step 4; otherwise this 
is a lattice local minimum. 5. Stopping criteria. Store all the local minima found so far which have 
the lowest observed func­tion value. If the minimum function value has been observed krnaz times or the 
search limit rnaxit has been reached, stop, otherwise go to Step 3.  In Step 2, we compute and store 
the potential en­ergy value between each lattice point on the outer shell and the core atoms to reduce 
the time complexity of the lattice search. This initialization phase takes O(Nco,e x N,ti,/) time. Then, 
in step 4, the most loosely bound molecule can be found in O((N n)2) time , which is no more than O(NjU,f) 
= (O(n~)). The most tightly binding empty lattice point can also be found in this amount of time. The 
most loosely bound molecule is defined by ~+j and the most tightly binding empty lattice point is given 
by i$j 780 The target architecture for the algorithm is the Thinking Machines CM-5, configured with 
up to 512 SPARC-2 processors in a tree network characterized by 5-20 Mb/see interprocesaor communication 
band­width. Our parallel implementation of the lattice algo­rithm depends mainly on an efficient implementation 
of the function evaluation (used in finding the most loosely bound molecule and the most tightly binding 
empty lattice point ). The function evaluation is dis­tributed among all the available processor elements 
by first broadcasting the surface configuration to each processor. Each processor then computes a partial 
sum of the potential function. The full summation is accomplished with a global data reduction routine. 
4.3 Local Minimization Relaxation of a molecular configuration maybe for­mulated ss the unconstrained 
minimization problem ? nin={vn(z)la) E L} (8) where Z. denotes the starting point for a local mini­ 
mization procedure and L is the set of lattice minima identified by the lattice optimization algorithm. 
Local minimization procedures are designed to lo­cate stationary points of the potential function V(Z) 
such that VV(Z) = O. There exist a number of good methods for local minimization without second deriva­tives, 
and because we are interested in large-scale min­imization, we have selected the limited-mernoy BFGS 
(LM-BFGS) method [8]. This method is suitable for parallel implementation due to the relatively simple 
interprocessor communication requirements [9]. Parallel implementation of the local minimization procedure 
depends on the efficient parallel implemen­tation of the LJ function evaluation as well as the LM-BFGS 
algorithm. As indicated in the previous section, the target architecture is the Thinking Machines CM­5, 
with 512 SPARC-2 processors configured in a tree network with 5 -20 Mb/see interprocessor communi­cation 
bandwidth. We begin with an initial distribu­ tion of ~k among m processors, or roughly n/m atoms per 
processor. For the LJ function evaluation (2), the approach which we have found to be most efficient 
for clusters of up to n = 15,000 (45,000 variables), is to broadcast the entire configuration Zk to each 
proces­sor. Then, each processor computes n2/m pair poten­tial values, providing n/m elements of gk = 
VV(Zk) and a partial value of V(Zk ). The full summation of V(zk) is accomplished with a single, scalar 
global data reduction among the processors. On completion of the LJ function evaluation, the elements 
of Zk and gk are already distributed among the processors and no further communication is required to 
prepare for the LM-BFGS iteration. The LM-BFGS iteration con­sists primarily of a sequence of inner products 
and linked-triad (saxpy) operations. The saxpy is a lo­cal operation and requires no synchronization. 
The inner-product requires a scalar global data reduction operation. No other data movement is required 
in the iteration. In general, the cost of the LJ function evaluation is 0(ra2/rn) floating point operations, 
com­pared to O(n/rn) operations for the LM-BFGS itera­tion. Therefore, for large n, the cost of the LJ 
function evaluation is dominant. 5 Computational Results We have reproduced Northby s published results 
[10] for n <150 to verify the operation of the algo­rit hm. For each value of n we have obtained the 
same minimum binding energy. As an illustration of per­formance, we have obtained the best-known binding 
energy for a cluster of size n = 99, Vgg = 550.6665, in approximately 6 seconds of Cray-2 cpu time. Computational 
results for larger clusters obtained on the CM-5 are given in Table 1. The results in­clude cluster sizes 
in the range (100 < n ~ 1000), binding energy for the lattice configuration(~l) and relaxed configuration(~), 
total time (see), number of lattice searches, the number of times the lattice mini­mizer wss found (nrep), 
and a mnemonic key indicat­ing which lattice type led to the lattice minimizer. The results in Table 
1 show that the amount of work performed by the algorithm does not increase mono­tonically with problem 
size (n). The number of lattice searches depends on how close the cluster size n is to 781 an icoaahedral 
magic number (i.e., how close n is clustering [12] of initial lattice states, sample reduc­to N). For 
example, the case of n = 900 solved very tion, and the application of Bayeaian stopping criteria quickly 
because ICG = 923. In this case, there were [1]. Sample reduction is the moat fundamental of these only23 
unfilled lattice sites, and the lattice minimizer techniques, involving the generation of a large sam­wasobaerved 
quite frequently. The combinatorial dif-ple of N lattice configurations, and choosing the qN ficulty 
of the lattice search was far greater for n = 800, (O< q < 1) configurations with lowest function value 
where 1231attice sites were unfilled. Thevalueofnrep aa starting points for lattice optimization. This 
tech­also indicates which cases were particularly difficult; nique takes advantage of any correlation 
between func­nrep = 1 means that the lattice minimizer was only tion values of initial states and local 
minima within observed once in 2000 searches. In such cases, there is regions of attraction. Bayesian 
stopping criteria are relatively little confidence that the global lattice min-baaed on a generalized 
multinornial model of the sam­ imizer has been found. ple space of local minimizers. In the relaxation 
phase As described in [10], the FC lattice is useful for n of the algorithm, the sample space is restricted 
to such that only a few surface sites are filled. In Table 1, set of lattice minimizers L, which typically 
relax into n = 600 is such a case since only 39 out of 362 possible minima with only one or a few distinct 
function val-IC surface sites are occupied and we note the solution ues. In this setting, the application 
of Bayesian stop­for n = 600 was obtained by an FC lattice minimizer. ping criteria can justify termination 
of the relaxation It is also interesting to note that in [10], an alterna-phase. The results of these 
experiments are positive tive potential function (4), called the NN potential, for clusters of moderate 
size. Sample reduction in­was used for lattice optimization in addition to the creases the observed frequency 
of the best lattice min-LJ with the result that for n < 150, some solutions imum. Similarly, the application 
of Bayesian stopping were found only with the NN potential and not with criteria in the relaxation phase 
allows earlier termina­the LJ. In the larger cases that we have tried, we have tion than the criteria 
used previously [1 O]. However, always obtained the best solution using the LJ poten-for n >400, we found 
the difficulty of the lattice op­tial, although in some cases the NN potential has also timization phase 
begins to overwhelm the beneficial identified the best solution. The results reported in effect of these 
techniques. Table 1 are baaed only on the LJ potential. Here it should be noted that the total time for 
the n sec srch lat nrep fl f algorithm dividea naturally into the two phases of lat­100 -522.295 -557.040 
15 161 IC 10 tice search and continuous optimization. The time for 200 -1147.501 -1229.185 363 1171 
IC 10 continuous optimization tends to dominate for clus­300 -1809.510 -1942.107 2 22 IC 10 ters of 
up to about n = 150. For larger clusters, the 400 -2465.669 -2650.432 3366 4000 IC 2 lattice search 
phase becomes increasingly difficult and 500 -3144.337 -3382.693 1170 1408 IC 10 the time increasingly 
dominant. 600 -3825.765 -4119.244 2383 2777 FC 10 It should also be noted that the lattice search phase 
700 -4505.675 -4854.400 7743 4000 IC 1 has no rigorous termination criteria. The stopping cri­800 -5200.207 
-5602.720 7083 4000 IC 1 teria used in generating the results for Table 1 were 900 -5916.914 -6377.491 
176 227 IC 10 krnaz = 10, or 10 replications of the same lattice min­1000 -6601.417 -7117.899 14598 4000 
IC 1 imum function value, and mad = 2000, or a limit of 2000 lattice searches. The first criteria is 
quite eas­ily satisfied for n < 400, but extremely hard to sat-Table 1: Results for Discrete-Continuous 
Algo­isfy for certain larger cases. To addreas some of these rithm, 100 < n < 1000. Table includes binding 
difficulties, we have experimented with various tech-energy for lattice minima (fl ) and corresponding 
re­niques from stochastic global optimization, including laxed configuration (f), cpu time, number of 
lattice 782 searches, and type of lattice and potential function. Cpu time represents singleproceaaor 
Cpu seconds us­ing Thinking Machines CM-5 with 256 processors and SUN/4 front-end (no vector processing 
units) calcu­lated at a synchronization point. n f sec Iter f-g Gfl Mfls 13 -44.32680 0.2 5 80 u 55 -279,2485 
0.3 8 11 0 3 147 -876.4612 0.5 14 17 0 19 309 -2007.219 0.7 21 24 0 78 561 -3842.394 1.9 27 30 0 114 
923 -6552.723 2.8 33 39 1 272 1415 -10308.89 6.4 41 47 2 341 2057 -15281.55 12.5 45 51 5 399 2869 -21641.35 
24.7 54 62 12 475 3871 -29558.91 52.0 61 68 23 451 5083 -39204.88 83.8 67 71 42 504 6525 -50749.87 170.6 
81 89 87 511 8217 -64364.50 230.1 72 79 123 533 10179 -80219.39 441.1 98 104 248 562 12431 -98485.16 
656.8 99 103 366 558 14993 -119332.4 1004.5 112 117 605 602 Table 2: LM-BFGS Performance on LJ Clus­ter 
~laxation Problem. Relaxation of 1C2 -IC17 icosahedral structures using Thinking Machines CM-5 with 512 
processors, and SUN/4 front-end (no vector processing units). Total seconds is single processor cpu time 
calculated at a synchronization point. In Table 2 we give performance statistics for relax­ation of icosahedral 
structures ICZ -IC17 using the LM-BFGS method. These structures are the special cases where IV = n defined 
in step 1 of the lattice opti­mization algorithm, and no lattice search is required. The statistics include 
binding energy (~), total sec­onds required for relaxation to a stable state, num­ber of LJ function-gradient 
evaluations (f-g), billions of floating point operations (G f 1), and the megaflop rate or million floating 
point operations per second (M~ls). The results clearly show that for n s 1,000, the relaxation phase 
requires only a few seconds and is therefore a minor part of the total computational ef­fort compared 
to the lattice optimization phase. The results also show that relatively few LM-BFGS iter­ations are 
required to reach a stable state from the icosahedral structure. A stable state satisfies the ter­mination 
criteria 11911 (1+ f) s = 10-5 Using as starting points the icosahedra ICd with d = 2,... ,17, the number 
of iterations ranges from 8 to 117, or roughly O(d). Using a random starting config­uration, we would 
typically expect 0(103) iterations for n %50. Figure 1 shows the binding energy as a function of cluster 
size, using the values of ~1 and f from Tables 1 and 2. The graph of binding energy appears linear but 
in fact has several inflection points. Least-squares fitsofV.=fandV. =fitothemodel v. =ck+/3n7 (9) yield 
(a, /3, ~) = (36.448,-5.6538, 1.0274) for the lat­tice solution V~ = fl and (359.79,-6.1570,1.0271) for 
the relaxed solution Vn = f. The estimates of the exponent y are identical to four significant digits, 
sug­gesting that the two curves differ by a constant factor. 6 Conclusions The lattice search and optimization 
approach to en­ergy minimization is the most successful method avail­able for the pure LJ cluster problem. 
For cluster size up to n w 500, the method can be employed interac­tively on a supercomputer. Extensions 
of the method to more complicated potentials, such as may arise in catalysis, would seem feasible using 
a more general lat­tice construction (e.g., diamond or hcp) in conjunction with iterative lattice refinement 
for clusters of up to a few hundred atoms. The combinatorial difficulty of the underlying opti­mization 
problem emerges for large LJ cluster sizes which are not near the icosahedral magic num­bers. For cluster 
size of n = 800, which lies ap­proximately midway between the icosahedral numbers 544<800<923, the algorithm 
failed to reproduce the 783 Xlv  ;4 ­ 1 a­ -lo­ -12oxmo4000m Eooo KK100 r2000 MM 16000 Figure 1: Binding 
energy versus cluster size. Dotted line represents lattice minimum function val­ues fr, solid line represents 
relaxed configuration func­tion values ~ in Tables 1 and 2. same lattice minimum function value twice, 
giving lit­tle confidence in the resulting statistics on minimum binding energy. The difficulty would 
be accentuated on a more general lattice in the absence of the kind of specialized knowledge available 
for the pure LJ clus­ter. The local minimization phase of the algorithm is significantly enhanced by 
the lattice search phase. It was observed that the number of iterations of the continuous minimization 
algorithm is vastly reduced by using a lattice minima as starting point. In fact, for large clusters, 
the ratio of time required for local minimization becomes trivial in comparison to lattice search. This 
suggests the possibility of somehow re­combining the positive features of lattice search and continuous 
minimization to improve performance for large clusters. 7 Appendix This appendix gives details on construction 
of the IC and FC lattices. The ICd lattice consists of an in­tegral number d of IC shells. lC1 consists 
of a single atom located at the origin. For d = 2, ..., k, ~Cd con­sists of lC&#38; 1 surrounded by twelve 
vertices (forming an icosahedron) at distance r=c(d 1) (lo) from the origin. To uniquely define the lattice, 
we fix the first two vertices of the shell at pl = (O, O, ~) and pz = (O, O, T) and the remaining vertices 
at %k+s = 7cos(( l)~e)cos( km/5) pk+3 = yk+3 = Tcos(( l)~e)sin( k7r/5) , %k+s = Tsin(( l)ke) {} k = 0,...,9 
(11) where 6 = 7r/2 tan-1(2). The 20 equilateral tri­ angular faces of each shell are filled with atoms 
in a hexagonal close-packed lattice. For each pair of adja­cent vertices pa, pb defining an edge, the 
coordinates of the d 2 interior edge atoms are pa+~(pb p.)/(d I), i = 1,...,2 2. (12) For a given triple 
of vertices, {pa, pb, p.} defining a face, the coordinates of the (d 2)(d 3)/2 interior face atoms 
are given by (if)a +jp, + (d-1-i -j)pC)/(d -1), (13) j=l, ....i 2. i=l, l,d.., d 3. The number of atoms 
in ICd is l~cdl = (10d3 152 + lld 3)/3. 7.1 FC Lattice The FCd lattice consists of IC&#38; ~ enclosed 
by a single stacking fazdt shell. The stacking fault outer shell consists of 12 icosahedral vertices 
and 10d(d 1) atoms in stacking fault positions on the faces of the IC&#38; 1 outer shell (the stacking 
fault positions are the deep holes formed by the hexagonal close packing of the IC face). The FC outer 
shell haa no edge atoms between vertices. For a given triple of vertices, {pa, p~, p.} forming a face, 
the coordinates of the (d ­ 2)(d 1)/2 interior FC face atoms are given by (ipd + jpb + (d -i -j)p,)/d, 
(14) j=l, ....i l. i=l, l,, d,,d 2, 784 where O(pk V)jk=pk+ (15) iI]pk -t)[[, kc  =a,b, and o = 
(pa+ pb + P.)/S. Acknowledgment This research was supported in part by the Army Research Office contract 
number DAAL03-89-CO038 with the University of Minnesota Army High Perfor­mance Computing Research Center, 
the Air Force Of­fice of Scientific Research grant AFOSR91-0147, and the Minnesota Supercomputer Institute. 
References <RefA>[1] C.G.E. Boender and A.H.G. Rlnooy Kan, Bayesian stopping rules for multistart global op­timization 
methods, Mathematical Programming > Vol. 37 (1987), pp. 59-80. [2] R.H. Byrd, E. Eskow, R.B. Schnabel, 
and S.L. Smith, Parallel global optimization: numerical methods, dynamic scheduling methods, and ap­plication 
to molecular configuration, Technical Report CU-CS-553-91, October 1991, University of Colorado at Boulder, 
Department of Computer Science, Boulder, CO. [3] J. Farges, M.F. De Feraudy, B. Raoult and G. Torchet, 
Cluster models made of double icosahe­dron units, Surface Science, Vol. 156(1985), pp. 370-378. [4] Wilfred 
F. van Gunstern and Herman J.C. Berendsen, Computer simulation of molecular dynamics: methodology, applications, 
and per­spectives in chemistry, Ange wan die Chemie In­ternational Edition, Vol. 29(1990), pp. 992-1023. 
[5] M.R. Hoare, Structure and dynamics of sim­ple microclusters, Advances in Chemical Physics, vol. 40(1979), 
pp. 49-135. [6] J. Danna Honeycutt and Hans C. Andersen, Molecular dynamics study of melting and freezing 
of small Lennard-Jonea clusters, Journal of Phys­ical Chemistry, Vol. 91(1987), pp. 4950-4963. [7] R.S. 
Judson, M.E. Colvin, J.C. Meza, A. Huf­fer, and D. Gutierrez, Do intelligent configuration search techniques 
outperform random search for large molecules?, Sandia Report SAND91-8740, Sandia National Laboratories, 
Center for Com­putational Engineering, Livermore, CA. [8] D. C. Liu and J. Nocedal, On the limited mem­ory 
BFGS method for large scale optimization, Mathematical Programming, Vol. 45(1989), pp. 503-528. [9] R.S. 
Maier, Large-scale minimization on the CM­200, Journal of Optimization Methods and So@­ware (to appear), 
Army High Performance Com­puting Research Center Preprint 91-86, Univer­sity of Minnesota, Minneapolis, 
MN 55415. [10] J.A. Northby, Structure and binding of Lennard-Jones clusters: 13 ~ n ~ 147, Journal of 
Chemi­cal Physics, 87(10), 6166-6178. [11] L. Piela, J. Kostrowicki, and H.A. Scheraga, The multiple-minima 
problem in the conforma­tion analysis of molecules: deformation of the PO tential energy hypersurface 
by the diffusion equa­tion method, Journal of Physics/ Chemistry Vol. 93(1989), pp. 3339-3346. [12] A.H.G. 
Rlnooy Kan and G.T. Timmer, Stochas­tic global optimization methods, Part I: cluster­ing methods, Mathematical 
Programming , Vol. 39(1987), pp. 27-56. [13] A.H.G. Rlnooy Kan and G.T. Timmer, Stochas­tic global optimization 
methods, Part II: multi­level methods, Mathematical Programming, Vol. 39(1987) 57-78. [14] Tamar Schlick 
and Michael Overton, A powerful truncated Newton method for potential energy minimization, Journal of 
Computational Chem­istry, Vol. 8(1987), pp. 1025-1039. 785 [15] David Shalloway, Packet Annealing: A 
deter­ministic method for global minimization. appli­cation to molecular conformation, In press: Re­cent 
Advances in Global Optimization, C. Floudas and P. Pardalos, eds. Princeton University Press: Princeton, 
NJ, 1991. [16] D.G. Vlachos, L.D. Schmidt, and R. Aris, Struc­tures of small metal clusters: phase transitions 
and isomerization, Army High Performance Com­puting Research Center Preprint 91-69, Univer­sity of Minnesota, 
Minneapolis, 1991. [17] D.G. Vlachos, L.D. Schmidt, and R. Aris, Struc­tures of small metal clusters: 
low temperature be­havior, Army High Performance Computing Re­search Center Preprint 91-70, University 
of Min­nesota, Minneapolis, 1991. [18] L.T. Wine, Minimum-energy configurations of atomic clusters: new 
results obtained by sim­ulated annealing, Chemical Physics Letters Vol. 133(1987), pp. 405-410. [19] 
G.L. Xue, R.S. Maier, J.B. Rosen, Minimizing the Lennard-Jones potential function on a maa­sively parallel 
computer, in Proceedings of the 1992 ACM International Conference on Super­computing, Washington DC. 
July 19-23, 1992, pp. 409-416.  </RefA>
			
