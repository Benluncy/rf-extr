
 A Hardware Stochastic Interpolator for Raster Displays Timothy S. Piper~ CAE Electronics Ltd PO Box 
1800 Ville St Laurent, Quebec Canada H4L 4)(4 Alain Fournier Department of Computer Science University 
of Toronto Toronto, Ontario, Canada MSS 1A4 ABSTRACT Stochastic modeling has found uses so far mainly 
for expensive very realistic graphics display. The cost of rendering is not intrinsic to the technique, 
but mainly due to the high reso- lution and the sophisticated display techniques which accompany it. 
We describe here a basic tool for a less expensive approach to stochastic modeling which is designed 
for a more "down to earth" type of application, and brings the display of stochastic models nearer to 
real-time. A special purpose board for stochastic interpolation has been built, which can gen-erate an 
array of up to 129x129 12 bit stochas- tic values to be used by the rest of the display system as a texture 
source, or for more ela-borate algorithms. The board functions as a eoprocessor in a traditional frame 
buffer sys-tem, and includes a micro-coded bit-slice pro- cessor, a multiplier, special hardware to gen-erate 
uniformly distributed random numbers, memory to store a look-up table for random numbers with the required 
distribution, and two buffers for the resulting arrays. ~Current Address: Vertigo Computer Imagery Inc. 
221-119 West Pender St., Vancouver, B.C. Canada, V6B 1S5 Permission to copy without fee all or part of 
this material is granted provided that the copies are not made or distributed for direct commemial advantage, 
the ACM copyright notice and the title of the publication and its date appear, and notice is given that 
copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, 
requires a fee and/or specific permission. &#38;#169; 1984 ACM 0-89791-138-5/84/007/0083 $00.75 The 
current implementation generates values at less than 4 microseconds per point, and in conjunction with 
a standard graphics processor can display nearly 10000 stochastic points in real-time, or can update 
a full screen of stochastic values in less than one second. Illustrations are given of the output of 
the board and of pictures and animations gen-erated with it. CR Categories and Subject Descriptors: B.1.5 
[Control Structures and Microprogramming]: Microcode Applications -Special-Purpose; G.3 [Probability 
and Statistics]: Random Number Generation; ].3.1 [Computer Graphics]: Hardware Architecture -Raster display 
dev-ices; ].3.3 [Computer Graphics]: Picture/Image Generation -Display algorithms; 1.3.7 [Com-puter Graphics]: 
Three-Dimensional Graphics and Realism. Additional Key Words and Phrases: Stochastic modelling i. Introduction 
 In Computer Graphics one builds complex objects from fairly regular collections of sim- ple primitives. 
The modeling primitives used in computer graphics: points, lines, polygons, parametric surfaces, are 
such that they can be represented by a small number of 3-D points, and transformations for these primitives 
have only to be on these points. The modeling of natural objects (or more generally of visually complex 
objects) has been often accomplished by using large numbers of simple primitives. This obviously exacts 
a heavy price on storage and time necessary to process and display such objects. The first, and still 
the most powerful approach to model complex objects without increasing the number of primitives used 
is texture mapping, as used originally by Catmull [Catm75], and refined and improved by Blinn [Blin78] 
and others twill83]. Textures are gen-erally predefined (digitized "real" pictures, procedure generated 
textures, hand drawn etc.) and stored in arrays, often to be mapped repetitively. A second approach, 
a functional one, is to define the object as a procedure. Well chosen procedures can generate complex 
objects such as the surface of the sea [Nort82, Max81]. This approach allows for a better mapping between 
image space and texture space, and specific solution to the aliasing problem. It is also more expensive 
to compute in general. A third approach, which in some sense includes the previous two, is to use stochastic 
modeling. The strategy here is to include sto-chastic processes in the functions used for the object 
generation. Random elements in texture generation has been used for quite some time [Fu80], but the main 
challenge is to develop the techniques to incorporate the stochastic ele-ments with the traditional primitives, 
and to incorporate the whole into existing display sys- tems [Four82, Reev83]. So far, most of these 
techniques have been used to produce high quality, high resolution pictures, taking hours of CPU time. 
An improvement in speed of several orders of magnitude is necessary if stochastic modeling is to be applied 
to real-time systems, both the expensive kind (flight simulators) or the medium to low cost kind (displays 
for Solid Object Modeling and video-games). There has been recently a proposal for a parallel archi- 
tecture for generation of fractal surfaces [Step83], but it is specialized to triangular sub- division, 
and is still only a preliminary study. This paper describes a prototype hardware solution to generate 
and use stochastic data in near real-time. 2. Stochastic interpolation Stochastic interpolation consists 
of using an interpolation formula that includes a sto-chastic function. It is generally used along with 
a recursive subdivision technique with midpoint interpolation (midpoint in object space, or in parametric 
space). In one dimen- sion: Value ( P )= D~ntt ~ ( P x,P2)+ST¢n,,rp (P t,P2) where P is a point interpolated 
from P~ and P2. D~nt,n~ ( ) is the result of the deterministic inter- polation, and STi, u.,.p () a sample 
value of the stochastic process. As stressed in [Four82], stochastic is to be read as pseudo-stochastic, 
since we want consistency from frame to frame and primitive to primitive. The speed of the computation 
depends of course on the cost of computing D(nt,~ ( ) and STimo,~ (). Midpoint interpolation is usuaIly 
chosen because it is simple for most ordinary functions (for linear functions, only an add and a shift 
are neces- sary). The stochastic interpolation can be costly so a lookup table method is often used. 
Instead of computing ST~,,,,.p (), an index INDET~,#,,.p ( ) is computed and the corresponding entry 
in a table filled with random values hav- ing the distribution of STi,~,°~() is used. Of course IND~rp 
() should be uniformly distri- buted over the range of table indices. This has the additional advantage 
that a different sto- chastic process can be used simply by loading a different set of values in the 
table. In two dimensions, a 2-D array of values has to be generated. The stochastic process used has 
to be a random function of two parameters. In general, the interpolation formula can be different for 
each parameter. The stochastic interpolation used in the hardware implemen- tation described in this 
paper is the one used in [Four82], that is, an approximation of frac- tional Brownian motion [Mand68, 
Mand82]. Here the additional problem is that fractional Brownian motion (fBm) is not Markovian, and a 
straightforward recursive subdivision is not appropriate. The scheme given in [Four82] to interlace the 
evaluations of the interpolated points (see Fig. 1) has been used. This of course means that if four 
corners are used to reenter into the algorithm the correlation across the boundary required by fractional 
Brownian motion cannot be achieved. In this case, not only the four corners but the values obtained for 
the next few levels of subdivisions have to be reentered. This ensures a sufficient amount of continuity 
at all levels. Again we had to sacrifice mathematical purity to other desir-able properties, like speed, 
continuity across common boundaries and reentrant subdivision. It should be noted this is not a problem 
if the process is Markovian. Q 2b* Q ..2b* 0 2b*  { J P ' I Eb* 2a 2b @ 2b* t{llr 0 2b* lb* 2b* 0 Order 
of Computation is 0, la, lb, 2a, 2b .... Figure 1 3. Functional requirements The University of Toronto 
Computer Sys-tems Research Group uses an Adage 3000 (com- monly known as IKONAS) raster display system 
in its computer graphics lab. It is a modular frame buffer system on its own synchronous bus and is interfaced 
to a VAX 11/780 which acts as a host. Figure 2 shows the overall IK0- NAS syutem architecture. r ............ 
 The Ikonas Graphics System Architecture Figure 2 As with many contemporary graphics systems it gains 
high performance with the addition of modular processors acting in parallel. The Display Controller handles 
screen refreshing from the 512xS12x24 frame buffer, routing the data at video rates through a crossbar 
switch and colour lookup tables. The IKONAS gains much of its performance through the use of a 200ns 
cycle, 32-bit, bit-slice processor, referred to as the BPS, which draws into the frame buffer. Optional 
processors include the Peripheral Microprocessor (MPC), a matrix multiplier and video input module. It 
was in this graphics system environment that a stochastic interpolation processor (hen-ceforth referred 
to as STINT) was proposed. At the time the project began the BPS was not yet up and running. Thus the 
design was based on estimates of the performance requirements of a fully functioning graphics system 
in which rapid 3D stochastic interpolation was desirable. Building a piece of hardware was therefore 
an experiment to investigate its utility rather than based on a demonstrated need. One of the most time 
consuming steps in image formation is that of scan conversion, which is usually a linear interpolation 
of posi- tion and colour based on the vertices of a polygon. Generating a stochastically interpo- lated 
array to replace the linear interpolation would be the function of a STINT processor that should give 
the most significant improvement in performance. It was assumed that for each of three coordinates (say 
RGB) the STINT array value would be multiplied by a scaling factor and added to a previously calculated 
deter-ministic value. Counting microcode steps gave an estimate of 5/~s per point for this function if 
performed by the BPS. The next obvious concern is whether there is an advantage to be gained by having 
a separate STINT processor rather than simply microcoding a STINT subroutine on the IKONAS BPS. It was 
estimated that it would require 15~s per STINT array value in a subroutine, where about half that time 
is needed to obtain a normally distributed random value, as required in the algorithm. It was concluded 
that an increase in throughput of four times (20~s vs. 5~s) could be obtained with a separate STINT processor 
that could operate in parallel with the BPS at faster than 5~s per point. A double buffer to store the 
final array would be essential to allow parallel operation.  4. Implementation The STINT algorithm was 
first implemented in the high level language Concurrent Euclid [Holt83]. This software was designed to 
simu-late the proposed hardware, so that there would be a basis for comparing results after the hardware 
was built. Table 1 gives the time required to execute the STINT algorithm on a PDP 11/45 and VAX minicomputer 
using this software. After an actual implementation on the IKO- NAS BPS, it was found that the time required 
to calculate a STINT value in firmware was almost twice (28 ~s vs. 15 ~s) the estimate used to specify 
the functional requirements. The result is shown in Table 1 along with the final performance obtained 
by the custom STINT processor. Machine CPU time CPU time  (129x129array) (one point) PDP 11/45 12s. 
680 ~s. VAX 11/780 6s. 370 ~s. BPS 0.Ss. 28 ]~s. STINT 0.06s. 4 ks. Time to compute a 129x129 stochastic 
array on various processors Table 1  4.1. Architecture Based on the above considerations, the STINT 
processor was designed to operate in the following manner. The BPS hands the STINT processor the parameters 
necessary to gen-erate a particular array. The array of values calculated using the STINT algorithm is 
the returned result. While the STINT processor is calculating an array in one buffer, the. BPS is reading 
the previously calculated array from the other buffer. In more detail, the parameters passed to the STINT 
processor are: a seed for each corner - an initial value for each corner - the initial standard deviation 
 - the ratio by which to multiply the standard deviation between levels  - an indication of the maximum 
level to do the calculations. In the particular case of the approximation to fBm, the ratio is 2 -n, 
where H is the self simi- larity parameter. For a first time calculation of an array, the initial corner 
values are set to 0 and the standard deviation to 1. This ensures that the resulting array will be in 
a sense nor-malized to preserve accuracy and avoid over-flow in the integer calculations. A reentrant 
version of the algorithm is accommodated by setting the corner values and standard devia-tion to other 
than 0 and 1 respectively. To avoid problems with continuity, the reentrant computation should be started 
at a higher level of subdivision by setting the first few values obtained previously in addition to the 
corners. The interface to the IKONAS bus was simpli- fied to save hardware and because the IKONAS was 
not initially available for testing. To the rest of the system only a single result array buffer is visible 
as welt as some handshaking flags in a oommand and status register as illus- trated in Fig. 3. IKONAS 
BUS ST~NT 1 pItOC~SSOR ! ~'-~ RESULTBARRAY I  The STINT processor as a slave memory device Figure 
3  The parameters are passed by loading them into predetermined locations in the result memory buffer 
available to the IKONAS bus. The handshaking protocol is summarized in Fig. 4. The flags used are GO, 
results ready, (RRA, RRB) and buffer available to IKONAS (BA). Most of the implementation of the STINT 
processor is quite straightforward. The data paths are shown in Fig. 5. It is basically a two bus structure 
bridged by a bit-slice ALU, a multiplier, a result array and a random value generator which will be described 
later. Cost, space and time constraints limited the data path widths and memory size to the minimum judged 
adequate. Generally, eight bits are used with twelve bits necessary to accumulate the interpolated values. 
Each result memory buffer handles up to a 139 by 129 array at 12 bits precision, that is, to a recursion 
level of 7. The microprogram control architecture is also a standard one with a single level of pipe- 
lining, as shown in Fig. 6. The sequencer is very simple, supporting only the four instructions: &#38; 
$ WAIT FOR GO [ I 4- TOGOLE BUFFERS ,AIT ToR I, E, I I READ AND PROCESS EXECUTE STINT RESULTS FROM 
ALGORITHM BUFFER B .L PUT RESULTS IN LOAD NEW BUFFER A PAR~4ZTERS IN BUFFER B  J SET RRA I W,ITTOR 
I 4. I WAIT FOR GO 4- TOGGLE BUFFERS l ~WAITTORCHANGEI.EA ] .1. .L READ AND PROCESS RESULTS FROM EXECUTE 
STINT BUFFER A ALGORITHM .L PUT RESULTS IN LOAD NEW BUFFER B PARA~TE RS IN BUFFER A .L i SET RRB J I 
W,tTToR t , Handshaking between the Ikonas and the STINT processor Figure 4  continue , jump, jump 
if go flag not set, and jump if not zero . The cycle time is 200ns. 4.2. Random number generation Designing 
a simple and fast hardware method for obtaining the required random sample proved to be one of the most 
interest-ing aspects of the design. As with the STINT algorithm itself, the motivation was not to maintain 
mathematical rigor but to obtain a visually acceptable result in a short time. Recall that in the case 
of approximation to a fBm the STINT algorithm requires a random sample from a normal distribution whose 
mean is the average of the four neighbouring points and whose standard deviation is multiplied by a ratio 
( 2 -~ ) after each level. The STINT proces- sor uses a pre-computed look-up table with 4096 eight-bit 
entries that approximate a con-tinuous normal distribution by rectangles of constant width as shown in 
Figure 7. 123 115 -12-127--~. -125 -123 Discrete approximation to a continuous normal distribution Figure 
7 By imposing the constraint of a single entry at the truncated tail, aT, of the discrete distribu-tion, 
the value at=±2.8 and the corresponding width of the rectangle is determined. The problem is now reduced 
to obtaining a uniformly distributed number to use as an address into the table with the required con-sistency 
properties and in a short time. This will be referred to as obtaining a seed with the seed/unction. For 
internal consistency the seed used in the calculation of the random perturbation of each point must depend 
on the initial seeds given for the whole array and also on the posi- tion within the array. The dependence 
on the position or index implies a dependence on the current level of the point being calculated. Internal 
consistency guarantees that if the array is recalculated, the same values will result, and if the calculation 
is carried to a deeper level, then the coarser values obtained will be the same as if the calculation 
was to a lesser level. The external consistency requirement allows adjacent arrays to be continuous at 
their shared edge. It is to satisfy this requirement that there are four seeds given as parameters, (the 
corr~erseeds), one corresponding to each corner point. Architecture of STINT with data paths Figure 5 
GO t~RO (t~OH ~U) CLOC~ !~GZS'I'EI 2 X 2911 SEQUENCER ADDR.~ b N I Microcode memory, pipeline register 
and sequencer Figure 6  For the calculation of the boundary, the values have to depend solely on edge 
informa-tion. Ultimately the whole edge must depend just on the two cornerseeds for that edge since they 
are the only reformation shared with an adjacent array. A simple hardware implementation of the seed 
function that solves the problem is presented here. The basic idea is to have the seed depend on the 
value, and thus indirectly on the index, of the four neighbours used to calculate a point. The seed is 
obtained by tak- ing three bits from each neighbour and com-bining them together such that the resulting 
12-bit address has a nearly uniform distribu-tion. Since the neighbours' values come from a normal distribution 
the probability of obtain- ing any of eight consecutive values (corresponding to the three LSB) is almost 
uni- form. In other words, over a small range of x, the normal density function f (=) does not vary much 
because it is continuous and smooth. This approximation is better the larger the word size since eight 
consecutive x in the table will then cover a smaller range in =. The bit-mapping scheme used in the STINT 
processor is shown in Fig. 8. Note that the most random bits, the LSBs of the neighbours, are mapped 
to the MSBs of the address. A a c D   L ?[ it The seed4 function Figure 8  This is done because it 
is assumed that there may be some correlation between the address and the value from the table. Edges 
of the array and corners as neigh-bours are handled as special cases. For exter- nal consistency edge 
values are based on two edge neighbours and the seed2 function shown in Fig. 9. A B J l J II I LOOKUP 
TA3LE ADI~P,E.qS The s~.ed2 function Figure 9  Since corners are usually initialized to zero their value 
is not random and so are not a suit- able input to the seed functions. Instead the seeds passed as parameters 
for each corner are used. Since the seed function is only an approxi-mation, the ordering of entries 
in the lookup table can be used to advantage so that the overall result is more nearly normal. For instance 
if the addresses xxxxxxxx00 are more likely than random to occur, then the 1024 entry subtable corresponding 
to this address pattern can be arranged so that it approxi-mates a normal distribution. This process 
can be carried out recursively so that all subtables are approximately normal. The results obtained using 
this hardware seed function have passed visual tests despite the obvious approximations. The addresses 
generated for the lookup table were also sub-mitted to several empirical tests (the fre-quency test, 
the pair test, the serial correlation test and the run test. For a description of these tests, see [Knut69]). 
Except for the run test, they were applied to high, low and middle bits as well. Most of the tests give 
results consistent with a random hypothesis, except for the serial correlation, which is positive and 
around 0.2, and the pair tests when the top four bits and the bottom four bits are used. Those anomalies, 
however, are not sufficient to cause visible problems in the array generated. An address is generated 
within 200ns to apply to the lookup table stored in the result memory array. 5. Testing and Performance 
The STINT processor includes hardware added primarily to ease debugging. The clock can be stopped or 
single stepped and the inter- nal buses can be read from the host. The STINT processor was initially 
interfaced to a single board 6809 microcomputer. This allowed debugging of the hardware at less than 
full speed. Testing software was written in the high-level language Concurrent Euclid, compiled on the 
VAX and run in the 6809. It allows setting control bits, reading status information, set- ting breakpoints, 
loading parameters and read- ing results The STINT processor executes the STINT algorithm in about 170 
lines of microcode. An assembler was written using the pattern matching language awk under UN1X t. It 
)~UNIX is a trademark of AT&#38;T translates mnemonics, label names, and does some primitive syntax checking. 
For instance, a typical line is data__out seedDin D + accum/Z-> accum jmpnz c_continue A software memory 
refresh is provided by the line. refresh counter+ 1->Y,refresh counterras Readers familiar with microcode 
will recognize these lines as relatively "high level". The microcode was debugged fully with the 6809 
host so that the results matched the software simulation of the hardware. The testing software was used 
to count the clock cycles required by the hardware by quickly single-stepping and incrementing a software 
counter. The results of this test are given in Table 2. Size #points #cycles #eycles/pts 3x3 9 125 13.9 
5x5 25 430 17.2 9x9 81 1477 18.2 17x17 289 5376 18.6 33x33 1089 20451 18.8 65x65 4225 79766 18.9  Measured 
performance of the STINT processor Table 2 The table suggests that the average number of cycles needed 
to calculate a point asymptoti-cally approaches 19 as the array size increases. This is expected since 
the inner loops that cal-culate an interior point are exactly 19 cycles long. At 200ns per cycles in 
the IKONAS system, points are calculated in 3.8~s, faster than the goal speed of 5~s. With hindsight, 
a microcoded 8 by 8 bit multiply probably would have suf-ficed, instead of the hardware multiplier. A 
comparison of running time with a BPS micro- coded implementation, and software imple-mentations was 
given in Table 1. The goal for the STINT processor was to match or better the speed at which the graph-ics 
system can use the data it generates. With an estimated 5~s per point for a typical micro-coded application, 
that goal was reached. Since the STINT works strictly in parallel with the rest of the system, there 
is little advantage in trying to speed it up further in the current set-ting. It is still interesting, 
however, to specu-late on possible improvements to match poten-tial increases in speed of the graphics 
processor. We estimated that a combination of microcode optimization, use of static RAMs and faster ALU 
and. multipliers could speed up the STINT by a factor of five. Further improve-ments could be achieved 
only by a radical redesign of the architecture. For further details on the circuits, pro-grams and specifications, 
see [Pipe83]. 6. Examples of applications The goal of the design and implementation of STINT is to demonstrate 
"cheap" and fast techniques for stochastic modeling. The full range of application for the values generated 
is still being explored. The following examples will merely suggest some applications. Figure 10 is a 
display of a 129x129 array generated by STINT, and simply written into the frame buffer, with a pseudo-colour 
colour map. The picture shows no obvious anisotropy or periodic pattern that could be caused by defi- 
cient pseudo-random numbers. In figure 11 the same array of values has been used to map to a quadrilateral 
(chosen to look like a rectangle in perspective) with each point offset from the corresponding quadrilateral 
pixel by a quantity proportional to its value. A shading computa- tion is done by computing a normal 
vector from the neighbours' values. The hidden surfaces are removed by writing the pixels front to back. 
The lakes are obtained by thresholding the values in the array. The whole computation and display take 
about 4 seconds of the bit-slice processor time. Figure 12 shows the result when a quadrila- teral covering 
most of the screen is subdivided until each part is small enough to be filled by the STINT processor 
data. The reentrant pro-perty of the STINT algorithm is used in this ease to generate the subdivision. 
The values from an initial array are used to ensure con-tinuity across subdivisions. The whole process 
took about 40 seconds of the BPS time. In Fig- ure 13, two 129x129 arrays are mapped to a circle using 
an approximation of an inverse Mercator projection. The colours of the "sea" and "land" are obtained 
through a colour map. The mapping is fast enough so that the planet can be made to "rotate" in real time. 
The ter- rain can change either by colour map manipu-lation or by recomputing the stochastic arrays (which 
would take about four frames). Figure 14 shows the same picture with a grey colour map. This again can 
be made to "rotate" in real time. 7. Conclusion Our goal was to show that stochastic model- ing can be 
used within a medium to low cost graphics system, and at speed near or at real time. For this purpose 
we built dedicated hardware to generate arrays of stochastic values, based on a bit-slice processor and 
a hardware random number generator. The per- formance met the design goal, which was to match it in speed 
to the graphics system to which it is interfaced. The STINT proved to be about 7 times the speed of a 
firmware imple-mentation, and almost 100 times the speed of a software implementation. The first examples 
of its use are shown here, and they prove that stochastic modelling can be brought very close to the 
frame buffer, and made close to real time without sacrificing much of its power to generate visually 
complex images. Acknowledgements This research has been partially funded by NSERC Grant No A-5057, a 
NSERC post-graduate scholarship, and other NSERC grants. We wish to acknowledge the assistance of Safwat 
Zaky, who co-supervised the development of the hardware, and of Tom Milligan, who brought STINT to life 
on the Ikonas system, and imple- mented all its applications. References <RefA>[Blin78] Blinn, J. F. "Simulation 
of wrin- kled surfaces", in Proceedings of SIGGRAPH '78, also published as Comput. Graphics, 12, 3, (Aug 
1978), 286-292. [Catm75] Catmull, E., "Computer display of curved surfaces", in Proc. IEEE Conference 
on Computer Graphics, Pattern Recognition and Data ~cture. (May 1975). [Four82] Fournier, A., Fussell, 
D. and Car- penter, L. "Computer Rendering of Stochastic Models", Communica-tions of the ACM, 25, 6, 
(June 1982), 371-384. [Fu80] Fu, K. S. "Syntactic Image Modeling using Stochastic Tree Grammars", Computer 
Graphics and Image Processing, 12, (1980), 136-152. [Holt83] Holt, R.C., Concurrent E~zclid, The UNIX 
Operating System, and TUNIS, Addison-Wesley, (1983). [Knut69] Knuth, D. E., The Art of Com-puter Programming, 
Volume 2: "Seminumerical Algorithms", Addison-Wesley, (1969). [Mand68] Mandelbrot, B. B. and Van Ness, 
J. W. "Fractional Brownian motions, fractional noises and applications", SIAM Review, 10, 4, (Oct 1968), 
422- 437. [Mand82] Mandelbrot, B. B. The Fractal Geometry of Nature. Freeman, (1982). [Max81] Max, N. 
'~Vectorized Procedural Models for Natural Terrains: Waves and Islands in the Sunset", in Proceedings 
of SIGGRAPH 81, also published as Comput. Graphics, 15, 3, (Aug 81), 317-324. [Nort82] Norton, A.. Rockwood, 
A. P. and Skolmoski, P. T. "Clamping, A Method of Antialiasing Textured sur- faces by Bandwidth Limiting 
in Object Space", in Proceedings of SIGGRAPH 82, also published as Comput. Graphics,, 16, 3, (July 82), 
1-8. [Pipe83] Piper, T. S. A Hardware S~ochas- tic Interpolator for Three Dimen-sional Computer Graphics, 
Master Thesis, Department of Electrical Engineering, University of Toronto, (1983). [Reev83] Reeves, 
W. T., "Particle Systems-A Technique for Modeling a Class of Fuzzy Objects", Transac-tions on Graphics, 
2, 3, (April 83), 91-i08. [Step83] Stepoway,S. L., Wells, D. L. and Kane, G. R., "An Architecture for 
Efficient Generation of Fractal Sur- faces", Proceedings of the 1983 I'ntevnational Conference on Paral- 
lel Processing, (August 83), 261-268. [Will83] Williams, L. "Pyramidal Parametrics", in Proceedings of 
SIGGRAPH 83, also published as Comput. Graphics,, 17, 3, (July 83), i-ii.</RefA>   
			
