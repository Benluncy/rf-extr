
 A Discrete-Time Queueing System under Frame-bound Priority * So.an De Clercq , Koen De Turck, Bart 
Steyaert, Herwig Bruneel SMACS Research Group St.-Pietersnieuwstraat 41 9000 Ghent, Belgium sdclercq@telin.ugent.be 
 ABSTRACT A well-known problem with priority policies is starvation of delay-tolerant tra.c. Furthermore 
insu.cient control over delay di.erentiation (which is needed for modern network applications) has incited 
the development of other schedul­ing disciplines. Processor sharing is one of many solutions to this 
problem. The priority policy we present here has the added bene.t of being more open to rigorous analysis. 
We study a discrete-time queueing system with a single server and single queue, in which N types of customers 
enter (we will refer to packets as customers) pertaining to di.erent priorities. A general i.i.d. arrival 
process is assumed and service times are deterministic. We divide the time axis into frames of .xed size 
(counted as a number of time-slots), and reorder the customers that enter the system during the same 
frame such that the high-priority customers are served .rst. This paper gives an analytic approach to 
studying such a system, and in particular focuses on the queue con­tent (meaning the customers of each 
type in the system at random slotmarks) in stationary regime. Clearly the frame s size is the key factor 
in the delay di.erentiation between the two priority classes. The numerical results at the end of this 
paper illustrate this fact. 1. INTRODUCTION In modern packet-based communication networks the pro­visioning 
of adequate QoS (Quality of Service) guarantees to di.erent tra.c .ows is often problematic. Di.erent 
net­work applications demand di.erent QoS from the network layer underneath. Commonly we can distinguish 
two types of tra.c. One having higher delay-tolerance, such as e-mail, and VoD (video-on-demand) where 
jitter is more problem­ * Corresponding author. Permission to make digital or hard copies of all or part 
of this work for personal or classroom use is granted without fee provided that copies are not made or 
distributed for pro.t or commercial advantage and that copies bear this notice and the full citation 
on the .rst page. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires 
prior speci.c permission and/or a fee. QTNA2010, July 24-26, 2010, Beijing, China. Copyright c . 2010 
ACM 978-1-4503-0212-8/ ...$10.00 atic. The other, being real-time applications is less delay­tolerant. 
Here we think of VoIP, or video conferencing. Answers to this demand include for instance weighted-round­robin 
(WRR), weighted-fair-queueing(WFQ) ([1]), and place reservation ([2]). The most extreme way of priority 
schedul­ing is absolute priority (AP) or HOL-priority (Head of Line), either preemptive or non-preemptive 
(see f.i. [3]). In this scheduling discipline, the highest priority packets enter the queue at the head 
of the line. This creates the problem of starvation, where delay-tolerant tra.c can wait long peri­ods 
as high priority packets keep skipping to the head of the line, when tra.c loads are high. In this paper 
we present a solution to the starvation problem that can be tuned to o.er high delay di.erentiation between 
tra.c classes. The idea is to divide the time axis in time­frames and let a high-priority packet overtake 
low-priority packets that entered the bu.er (hereafter the queue) during the same time-frame. We will 
present a method to analyse the bu.er content in such a system using matrix analytical tools (as in [4]) 
as well as probability generating functions ([5]). Grouping packets that entered the bu.er during such 
a frame (much like the groups introduced in [6]) and then reasoning on the queueing systems with queued 
groups will prove invaluable in obtaining a result. In a section 2 we de.ne a discrete-time queueing 
model for our proposed solution and clarify the scheduling discipline operating on it. We will introduce 
some notations that will be used throughout the paper. Next follows the analysis of the system, in which 
we aim for the joint pgf of the queue content at random slot marks. Finally some numerical re­sults show 
the e.ect of the frame size on the delay di.eren­tiation between customers of distinct types.  2. MODEL 
AND DEFINITIONS We consider a discrete-time queueing system in which cus­tomers of N types arrive according 
to a general i.i.d. arrival process. Let aj,n be the number of type-j customers en­tering the system 
during slot n. Then the joint probability QNaj,n generating function (pgf) E[z ] is independent of j=1 
j the slot-index n and we abbreviate it as A(z) with z the vector with j-th entry zj . Service times 
are deterministic and equal to one slot, and service of a customer can start no sooner than the slot 
following its arrival in the system.  The adopted scheduling mechanism can be better under­stood when 
compared against the slot-bound priority ([7]), in which a tagged type-t customer has priority over all 
cus­tomers of type-u that entered the system during the same slot as our tagged customer (.u>t). Customers 
enter­ing the system during di.erent slots are served FCFS (.rst­come-.rst-served) regardless of their 
type. In this schedul­ing mechanism, prioirity is limited to customers entering the system during the 
same slot. Its e.ect appears to be quite limited for most tra.c scenarios that were considered in [7]. 
The idea to generalize the priority to take e.ect on customers entering the system during .xed-size intervals 
(called frames hereafter) follows quite naturally from this ob­servation. The actual analysis on the 
other hand does not, since several additional complications are to be taken into account, which we will 
show in the remainder of this paper. In the presented model we divide the time axis in frames of equal 
size (each equal to M slots). The frame-bound prior­ity is de.ned such that customers entering the system 
during the same frame are served in order of their priority class (1 being the highest priority and are 
thus served .rst, N being the lowest priority class). Customers entering the system Hence the basic steps 
used in the analysis of the slot-bound priority in that same paper cannot be applied here. Say that during 
a frame of length l slots no customers enter the system, then the formed group is empty. It is perfectly 
possible to work with groups representing an empty set of customers. Since however groups will possibly 
have zero ser­vice time while customers have non-zero service time, some complications arise. Therefore 
we will only consider a group when at least one customer enters the system during tagged (l) frame. Let 
abe the indicator for a group entering the sys­ g,k tem during the k th frame when this frame s size 
is l slots Y (ag for arrival of groups). Because of the i.i.d. property of the arrival process we can 
see that these indicators are independent of k and its pgf is given by (l) (l) ag ll Ag (z) . E[z ]= 
A(0)+(1 - A(0))z, (1) where we have omitted the frame index k. 0 and later 1 are vectors of which all 
entries are equal to 0 and 1 respectively. The number of type-j customers in a group of order l is a 
(l) discrete random variable (drv) which we denote by band j the joint pgf for all j . [1,N] can be calculated 
from the above with the result N (l) (l)(z) . E[ b A(z)l - A(0)l j B ]= . (2) z during di.erent frames 
are to be served FCFS. This poses j 1 - A(0)l j=1 a .rst problem. Namely suppose that at a point in time 
all customers that entered the system during frames already Furthermore we de.ne aT,n (with pgf AT (z)= 
A(z1) as the past have been served. A customer that enters the system during the running frame can then 
be served immediately. But if after that customer, during the same frame, a cus­tomer of a higher priority 
class arrives, then the service order is reversed among customers with arrival instances during the same 
frame. To counter this, a possible solution would be to delay service of a customer entering the system 
while it is empty until the running frame terminates. As this leaves the system idle while there are 
customers present in the sys­tem, it violates work conservation, and we propose another solution. In 
this paper, if all customers that entered during past frames have been served, the running frame is termi­nated. 
In this way service order within frames is guaran­teed. Frames however may have lengths of less than 
M slots (when they are terminated before it reaches M slots), and in particular all frames during idle 
periods are of length 1. To aid our analysis we keep track of the ordinal number of a slot within a frame 
(ranging from 1 to M, M being the maximum frame length). We refer to the ordinal number itself as the 
phase. The .rst slot in each frame will have phase 1. We say that the frame is reset when all customers 
that entered before the most recent frame bound have been served. We de.ne a group (of order l, l . [1,M]) 
as the collection of customers that entered the system during the same frame given that the frame length 
is l slots. As our discussion shows, groups are served FCFS and between customers of the same group an 
absolute priority rule holds, much like in [7]. Here however we have the added di.culty that we have 
groups of di.erent orders and thus no identically distributed service times but depending on the system 
state at the time of service initiation (where with a groups service time we mean the combined service 
time of all customers part of it). total number of customers entering the system during slot PN n (= 
j=1 aj,n) and its average as .T . E[aT ], which is again independent of n -we used n to indicate slots, 
and k to indicate frames and later to indicate group departures. Likewise we write .j . E[aj ] for short. 
In the analysis we will assume that the system admits stationarity, i.e. .T < 1. QNvj We aim to obtain 
the joint pgf of vj ,(V (z) . E[z ]): j=1 j the number of type-j customers in the system at random slot 
marks, for all j . [1,N] (assuming our system reaches a steady state). One can view groups as a sort 
of super-customer. Their service times are i.i.d. with the exception of the group at the head of the 
line -when the most recent group departure caused the running frame to reset (a group leaves the system 
after its last customer is served), it is not necessarily of order M. We agree that a group arrival takes 
place during the last slot of the frame it originates from and likewise we say that a group enters the 
system at such an epoch. Now suppose a period in time during which the frames all have their maximum 
length of M slots. We wish to know the probability that a group will enter the system during a slot (the 
probability that the frame terminates during that slot and customers entered during the terminating frame), 
given the phase during that slot. Next to that we wish to know the phase in the next slot. Both questions 
are answered by the following matrix X(z) . 0 BBBBB@ Ag (M)(z) 1 1 . . . 1 1 CCCCCA (3)  The above 
is a probability generating matrix and (X(z)1)l -1 is a M × 1 column vector with all entries equal to 
1, not to be confused with the parameterlist when used as a multivariate functions argument -is the pgf 
of the number of group arrivals (one or none) during the tagged slot given the phase is l. We can see 
that all entries in this column vector are equal to 1 except for the last that results in Ag (M) . This 
guarantees that group arrivals occur during the last slot of the frame only. Furthermore (X(1))i,j is 
the probability that the phase in the next slot will be j given that the phase in the current one was 
i. When we supposed a time period during which all frames have length M, phases follow indeed in a deterministic 
manner as shown by matrix X(z) and the fact that all elements in each row are 0 except for one (pointing 
out the next phase). The same questions can be posed regarding n consecutive slots. Speci.cally how many 
groups enter the system during a period of n consecutive slots given that all frames have length M during 
this period and the phase is known. Fur­thermore we also wish to know the phase in the last slot. X(z) 
makes it again easy to answer that question since as be­fore (X(z)n1)l is the pgf of the number of group 
arrivals dur­ing the tagged n slots given the phase was l, and (X(1)n)i,j is the probability the phase 
will evolve to i during these n slots given it started in phase j. Since customer service times are deterministically 
equal to 1 slot, a group of order l s service time is given by the amount of customers it contains, which 
we previously de.ned to be the sum of all bj (l) , j . [1,N]. If we are again interested in the number 
of group arrivals during this service time and the phase we end in, given that we start in phase i, we 
can utilize the previously introduced X(z) since we know that no frames are cut short during a service 
time with the exception of maybe its last frame. We will neglect this possibility for reasons that will 
become clear in the analysis itself. The answer can be formulated in the same way above, this time with 
the matrix BT (l)(X(z)), in which the l stands for the order of the tagged group. N X (l)(l) bT . bj 
, (4) j=1 T BT (l)(X(z)) . E[X(z)b(l) ]. 8 X i (l) = X(z)Pr[bT = i] . (5) i=1 We use T as an index (not 
to be confused with the non­index T , later used for type in the relevant context), to in­dicate that 
we sum over all customer classes, and thus in this respect, the above is a generalization to matrix argu­ments 
of de.nition (2). The above is a matrix generating function with comparable properties to X(z), namely 
that (BT (l)(X(1)))i,j is the probability that starting from phase i the phase will evolve to phase j 
once the service time of a group of size l has past. Furthermore (BT (l)(X(z))1)l is the pgf of the number 
of group arrivals during this service time. We will use these functions elaborately in the following 
analysis.  3. ANALYSIS Figure 1: Time axis with frame bounds and group service times. The clocks phase 
is indicated above each slot. slot I is chosen randomly and M =3. Figure 2: De.nition (uk,mk) with their 
group depar­tures they belong to. We refer to Fig.1 for clari.ca­tion on the symbols used on the time 
axis. The dis­placed group service time indicates that when uk > 1 the number of slots between epochs 
k and k +1 is exactly one group service time. 3.1 A Renewal-Points Approach We say that a group leaves 
the system when its last customer has been served. Likewise with a group departure epoch we mean the 
observation point of such an event. Immediately after a group departure epoch all groups will have the 
prop­erty that none of their customers will have been served (since groups are served FCFS). We can use 
this property to build a Markov chain with fewer dimensions than would be the case for a slot-to-slot 
analysis (which would enforce us to keep track of the composition of the group being served). However, 
de.ning the state of such a Markov chain as the number of groups in the system and the phase of the slot 
right after the group departure epoch is invalid. This can be seen as follows. Let uk be the number of 
groups in the sys­tem at the k th group departure epoch and mk the state at this same epoch (this de.nition 
is for illustration purposes only and not .nal). The knowledge of the size of the next group to be served 
will su.ce to determine (uk+1,mk+1). Do note that groups of size l<M can only be queued at the head of 
the line. Recall that our frame is only ever reset when all customers belonging to groups that have pre­viously 
entered the system have already be served. When such a group is queued at the head of the line it is 
then of course the only group of size lower than M. In the case that uk =1,mk = 1, we cannot be sure 
of the size of the next group to be served unless uk-1 = 2, in which case it s size is M, and a frame 
has coincidentally just been closed in which no group entered the system netting mk = 1. For this reason 
(uk,mk) is not a Markov chain and we will have to make do with another less intuitive de.nition for uk 
and mk. In the remainder of the analysis we will indicate the num­ber of groups in the system at the 
.rst slot mark preceding the k th group departure (and thus including the departing  Figure 3: Case 
in which uk > 1 and the way to de­termine (uk+1,mk+1) from it. The two observation epochs are exactly 
one service of a group of size M apart (M =3). The group arrivals take place during the last slot of 
each frame. group) as uk and the phase during the last slot of this groups service time as mk -we will 
drop the indices when they don t matter, e.g. when viewed in the context of the stationary regime guaranteed 
by the stationarity condition. Naturally uk > 0, .k because a group s service time, as it contains at 
least one customer, is strictly positive and thus uk1 includes the group being served that leaves the 
system one slot after. Because our state space is a semi-in.nite strip, (mk can only be one of M values), 
we will opt for a vector pgf instead of a joint pgf. We de.ne the row-vector (U(z))l . E[z u|m = l] Pr[m 
= l], .l . [1,M ] 8 X = z i Pr[u = i, m = l], .l . [1,M] . (6) i=0 Since u> 0, tl being the boundary 
vector s l th entry will be given by Pr[u =1,m = l]. We will denote this boundary vector by t. In the 
following we will obtain a closed form formula for U(z) as a function of the arrival process AT (z). 
The adopted strategy is to relate (uk,mk) to (uk+1,mk+1) as is customary for Markov chains. In doing 
so we distin­guish three distinct cases. A .rst being uk > 1, where we know that the next group to be 
served following the group departure this k th observation epoch is associated to (we will later refer 
to it as group K) is of size M. This .rst case covers the non-linear terms in U(z) being U(z) - tz. The 
second and third case both have uk = 1, where we distin­guish whether during the frame that is being 
reset customers enter or not. In the former case a group of size mk is served starting right after the 
tagged group departure. In the latter case an idle period starts after the relevant group departure until 
a batch of customers enters the system resulting in a group of order 1. In all cases we must be wary 
of the fact that the observation epoch is one slot prior to a group de­parture if we wish to obtain (uk+1,mk+1). 
So starting with the .rst case (uk > 1), we can see that uk+1 is made up of all groups in uk except for 
the group that left one slot after uk was probed. On top of that, it counts all groups that entered the 
system during the ser­vice time of group K (which we reasoned to be of size M). Strictly speaking this 
is incorrect because we don t count the group that would possibly enter the system during the last slot 
service-time. However we do count a group that would enter the system during the slot following the probing 
in- Figure 4: Case in which uk =1 and the way to de­termine (uk+1,mk+1) from it. M is chosen equal to 
3. Since the frame is reset group K enters one slot before its own service time, dependent on whether 
customers entered during the last frame (in the .g­ure, a frame of size 2) or not. stant (right before 
the group departure associated with uk), and so the time period is equivalent to one service time of 
a group of size M nonetheless. As such between the k th and (k + 1) th observation epoch no frames are 
reset (since uk > 1). We argued that the matrix generating function of this number of arrivals was given 
by BT (M)(X(z)) and thus (M) T bX uk+1 = uk - 1+ I[group arrival during slot n]. (7) n=1 Where we start 
counting the slots from the label 1 shown in Fig.3. We denote the indicator function by I[.]. In matrix 
generating function form this translates into hi -1(M) (U(z)z - t)BT (X(z)) j 8 X = z i Pr[uk+1 = i, 
mk+1 = j, uk > 1] , (8) i=1 Next, when uk = 1 the frame is reset at the group departure epoch. Two cases 
.ow forth from this, in the .rst case, there was at least one arrival during the incomplete frame (which 
lasted mk slots, since it started mk - 1 slots before uk s observation epoch which is one slot before 
the frame s termination). And so a group of order mk s service time follows (group K) during which other 
groups can enter the system that are counted by uk+1 except for the last slot of group K s service time. 
As we know because of the reset, the service time of group K starts in phase 1. Taking all the previous 
into account when determining uk+1 and adding  group K itself nets us (and likewise with D(z) with coe.cient 
matrices Fi): M88 X X X h  (M) i (l)(l) -1 i (0))zB(X(z))X(z)= zB(X(G)) = EiG(15) tl(1 - A M X T Tg 
1* j i=0 i=0l=1 8 (l) D(G)= FiGi (16) Pr[uk+1 = i, mk+1 = j, uk =1,mk = l, ag = 1], (9) X × l=1 where 
we have explicitly conditioned further on the state mk. The index (.)1* is used to represent the .rst 
row of the matrix argument. If during that same incomplete frame no group enters the system instead (with 
probability Ag (l)(0) for a frame of length l), group K will be of size 1. Following the same arguments 
as before in building uk+1 from uk we derive the partial vector generating function MXh 8Xi i=0 Naturally 
all eigenvalues of G must lie in the unit disk for these sums to converge. Obtaining the minimal nonnega­tive 
solution to G * = BT (M)(X(G * )), (G * is the fundamental matrix of the Markov chain) is the .rst step 
in solving for the boundary vector in the Neuts method (see f.i. [8]). Say that we are interested only 
in the censored Markov chain restricted to level 0, or in our case u = 1. Then we obtain t as a result 
of the system of equations t D(G * )= t (17) Since I - D(G * ) is singular we obtain not M but M - 1 
(l) (1) -1 i = tlA (0)zB(X(z))X(z) z T g 1* j equations, which we can solve for t once combined with 
i=1l=1 (14).  3.2 Random Slot Boundaries Now recall that our original interest was in V (z). Choose 
a random slot I. v is the vector representing the number of customers of all types in the system at the 
beginning of that slot. We de.ne ( u, m ) as the number of groups in the system and the phase of the 
system, one slot before the most recent group departure since slot I, much like we did with (u, m) before. 
Only this time we choose a random slot, as opposed to a random group departure. When the system is empty 
at the beginning of slot I, v = 0, and so we concentrate on the busy periods. Therefore without loss 
of generality suppose M (l) × Pr[uk+1 = i, mk+1 = j, uk =1,mk = l, ag = 0]. l=1 (10) Again we have explicitely 
conditioned on mk. Summing the probabilities in (9) and (10) gives Pr[uk+1 = i, mk+1 = j, uk = 1] which 
sums with the probability in (8) to exactly Pr[uk+1 = i, mk+1 = j]. The result we were looking for (be­ing 
an expression for U(z)), is therefore simply the sum of (8), (9), and (10). -1(M) U(z) =(U(z)z - t )BT 
(X(z)) X  M 1* l=1 X (l) -1(l) a type-t customer is being served during slot I. Although tlzBT (X(z)) 
X(z)(1 - Ag (0))+ (u, m) and ( u, m ), are not the same, we can write  M (1) -1(l) + tlzBT (X(z)) X(z)Ag 
(0) . (11) X Pr[ u = i, = t, m = j|T u> 1] = Pr[u = i, m = j|u> 1] , (18) 1* l=1 The only unknown in 
this expression is the boundary vector t. If we rewrite the above equation in the following form: (M)(M) 
U(z)(zI - BT (X(z))) = tz(zD(z) - BT (X(z))) (12) In which D(z) is an M × M matrix in which the l th 
row is given by where T is the type of the customers being served during slot I. Do notice that the left 
hand side appears to be in­dependent of T . This is because the number of groups in the system before 
group K (which we de.ne to be the group being served during slot I) is served is independent of the precise 
customer composition of group K itself -it has had no e.ect on the queue except for the fact of being 
queued. Note that when u = 1 the above equivalence does not hold,  precisely because group K can be 
of order lower than M. This does not pose a problem since we will link it directly  (l)(l) -1 (D(z))l* 
. (1 - Ag (0)) BT (X(z)) X(z) 1*  to the boundary vector t later on. (l) (1) -1 +Ag (0) BT (X(z)) X(z)(13) 
1* In this last case we will again have to distinguish between Deriving both sides of equation (12) 
with respect to z, evalu-the cases where the last frame counted a group arrival and ating in z = 1, and 
right-multiplying by 1, the M ×1 column where it did not (in which an idle period starts and group vector 
with all entries equal to one, yields: K is of order 1). Let f(l) be the number of slots between « ... 
... the service initiation of group K and the beginning of slot I, X 1 + of type-j customers in group 
K (order l), yet to be served (14) at the beginning of slot I (including the type-t customer we Now we 
still need M - 1 more equations to determine t. In conditioned on). For u> 1 we can see from Fig.5 that 
the following we follow a well-known matrix-analytic proce­ (M) f(M)+ d d (M) (l) 1 - .T 1 - = t D(z) 
B (X(z)) 1 given that group K is of order l. And let rbe the number T j dz z=1 dz z=1 dure to produce 
such equations. We can write B (X(z)) X u -2 as its series expansion and we call the coe.cient matrix 
of (M)(M) vj = b+ , u> 1 . (19) j,i aj,n + rj z i , Ei. Instead of z we can substitute a matrix as follows 
i=1 n=1 T m  Figure 5: De.nitions of u , m , f(l) , and all rj (l) . We show the case where group K 
s service time starts right after the last group departure instant, but the same de.nitions apply when 
the last group depar­ture initiated an idle period, in which case we start to count from group K s service 
initiation. The .rst sum goes over all groups in the system except for group K (those that are queued 
after it and hence are not yet served at the beginning of slot I). Note that group K was in the system 
prior to the group departure (else u would be 1), so subtracting one for group K and one for the group 
departure itself justi.es the sum s upper bound. It counts all type j customers in these groups and we 
have added (M) an index i to bwhere we need to add that all drv s in j this sum are i.i.d.. The customers 
in group K that are not yet served at the beginning of slot I must not be forgotten and are summed up 
in the third term of the above formula. The second sum goes over all slots that have passed since the 
service initiation of group K (which coincides with the group departure), and sums the type-j customers 
that have joined the queue since. Do notice that we added m to the upper limit for the m slots of the 
frame that was running before the group departure (those customers are not counted in u). In the case 
that u = 1 and the last frame counted at least one customer arrival (with probability 1 - A(0)l, when 
m = l), then group K will be of order m . The same train of thought can be followed as above, so the 
obtained formula for vj is the same with the exception that M must be replaced by m and the m in the 
upper limit of the second sum must be omitted because arriving customers during the slots this ( m) m 
includes, are part of group K and are counted by r. j Notice that the .rst sum disappears in this case. 
Lastly we have the case where, u = 1 and the last frame harbors no customer-arrivals (with probability 
A(0)l when m = l). Again the same principles can be used but this time group K is of order 1, and M should 
be replaced in (19) accordingly (M . 1). Furthermore the m in the upper limit of the second sum must 
be omitted for the same reason as before. In (19) all drv s are independent of one another except for 
f(M)(M)(l) and rj . More generally f(l) and all rj are correlated in a way. The higher f (l) the lower 
rj (l) especially for type-1 customers since they are served .rst within group K. In the (l)(l) end we 
are interested in Pr[f(l) = n, r1 = i1,...,rN = iN ], but it will prove easier and more helpful to determine 
their (l) joint partial pgf Ht (x,z) (partial on t, and x being an N­dimensional vector with j th element 
equal to xj ). 888 XX X (l) ni1 iN H(x,z) . zx ··· x t 1 N n=0 i1=0 iN =0 (l)(l)(l) × Pr[f= n, r1 = 
i1,...,rN = iN ,T = t] . (20) It will be easier to .nd a closed form expression for this sum using the 
Snake Oil Method ([5]). We call aj * the number of type-j customers originally in group K, and we can 
thus rewrite the unknown probability in the previous expression as follows 8 X (l)(l)(l) Pr[f= n,r= i1,...,rN 
1 = iN , k1,...,kN =0 a1 * = k1,...,a N * = kN ,T = t] . (21) There s quite a few things we know about 
this sum. For instance we know that all ij where j<t must equal 0, since when we start a type-t customer 
s service, all customers of higher priority must have already been served. The contrary is true for all 
ij where j>t, in which case we have that ij = kj . If either is not ful.lled the above probability will 
equal zero. So the above sum only goes over kt with it = kt which is trivial. Another fact about this 
sum is that knowing PN all ij and kj , n has little option than to equal j=1(kj -ij ). Given the exact 
customer composition of group K and the fact that during slot I a type-t customer is being served, the 
probability that slot I falls during the service time of the tagged type-t customer is the reciprocal 
of the number of type-t customers in group K. Formally this gives (l) **-1 Pr[rt = it|a1 = k1,...,a N 
= kN ]= kt , 1 = it = kt , (22) Notice that we wrote aj * for group K s type-j population, (l) instead 
of b, which we use for a random group. Indeed j group K is not a random group, but a group whose service 
time contains a random slot. In this sense larger groups will be more privileged to be selected by choosing 
a ran­dom slot. When we condition on type-t customers ser­vice times, we have similarly that groups containing 
large amounts of type-t customers and as such the probability Pr[a * = k1,...,a * = kN ,T = t] is proportional 
to kt. This 1 N phenomenon is also known as the renewal paradox (see f.i. [9]). We obtain Pr[a1 * = k1,...,a 
N * = kN ,T = t] kt(1 - A(0)l) (l)(l) .t = Pr[b= k1,...,b= kN ] × . .tl 1 N .T (23) (l) It remains to 
calculate a closed form formula for Ht (x,z),  by substituting the above. sion for V (z) has the form 
N Y ! ! V (z) = (1 - .T )+ .T Pr[ u> 1|vT > 0]Va(z) 8ktt-1 (l) kj it kt-it Ht (x,z)= z zx YXX ij M (l)(l) 
+ .T Pr[ u =1,m = l, ag =1|vT > 0]V (z) b X x jt k1,...,kN =0 it=1 j=1 j=t+1  (l)(l) l=1 Pr[b1 = k1,...,bN 
= kN ](1 - A(0)l) × N Y (l) (1) + Pr[ u =1,m = l, ag =0|vT > 0]V (z) . (29) b .T l ! ! = xt z 8-1tY X 
1 - A(0)l kj The unknown probabilities can be calculated as follows. If kj x j .T l we calculate the 
average service time of a group selected by k1,...,kN =0 j=1 j=t+1 X kt randomly selecting a slot (which 
we denote sg), then we can kt xt - z (l)(l) see the above unknown probabilities as contributions to this 
 Pr[b1 = k1,...,bN = kN ] . xt - z average. This yields (24) 1 - t1 .T M Pr[ u> 1|vT > 0] = (l) s g 
1 - A(0)M Introducing Ct (x,z) we can rewrite the above in the short (l) tl formula, Pr[ u =1,m = l, 
ag =1|vT > 0] = s g .T l (30) (l)(l) C(x,z) . B(z, . . . , z, xt,...,xN ) (l) tl A(0)l t Pr[ u =1,m 
= l, ag =0|vT > 0] = .T (l)s g 1 - A(0) - B(z, . . . , z, xt+1,...,xN ) It is easy to calculate sg from 
the equations above since V (z) must be normalized. 1 - A(0)l C(l)(x,z) M (l) t « H (x,z)= xt (25) 
 A(0)l . .T M s g = (1-t1)+.T tl t .T lxt - z l + . (31) 1 - A(0)M 1 - A(0)Notice the xt which suggest 
that r (l) t > 0, which we already l=1 knew. On top of that, Ht (l)(x,z) is no function of xj for j< 
Now we combine the above results in (25)-(30), leading to t, meaning that all type-j customers of group 
K have already X N s g zt - A(z) t=1 been served while serving the tagged type-t customer (which .T 
zt V (z)=1 - .T +is exactly the purpose of frame-bound priority). Equation (19) translates into the z-domain 
resulting in " « (z,A(z)) U(B(M)(z)) - tB(M)(z) (M) T # " C Y (z) × ... N Va(z) . Ez vj Y t B(M)(z)2 
vT > 0, u> 1 # i h j X M l(l) l(1) + (1 - A(0))C(z,A(z)) + A(0)C(z,A(z)) . tlt t j=1  U(B(M)(z)) - tB(M)(z) 
= Nt=1 X H (M) t l=1 T (z,A(z)) Y (1 - t1)B(M)(z)2 (z) . (32) (26)  where we used (18) to be able 
to use to the vector pgf found in the previous section. YT (z) is a column vector with l th element equal 
to A(z)l, representing the customers that en­tered the system during the part of the frame preceding 
the k th group departure (that are not included in u). vT is de- PN .ned as the sum j=1 vj . Likewise 
for the two remaining cases we .nd  4. NUMERICAL RESULTS In an attempt to show the e.ect of the proposed 
priority discipline, we propose a composite Poisson arrival process with two types of customers. The 
two-dimensional (N = 2) pgf A(z1,z2) is chosen to be .(w1z1+w2z2-1) A(z1,z2)= e. (33) In which . is the 
workload (since service times are deter­ ministically equal to 1), and each Poisson event generates 
# " ... Y N (z) . Ez vj a type-j customer with probability wj , j .{1, 2}. Since in for example data 
networks high-priority customers (control (l) (l) V vT > 0,u =1,m = l, a =1 j b g X j=1 messages) are 
more scarce than low-priority customers (raw N data), we choose w1 =0.1 and w2 =0.9. Notice that with 
= (l) Ht (z,A(z)) (27) the above pgf both arrival streams are independent of one another. t=1 # " ... 
Y N (z) . Ez vj (l) vT > 0,u =1,m = l, a (l) g = 0 We do not compare v1 and v2 since the e.ect of the 
priority j j=1 discipline with such uneven arrival rates will be unclear we plot the average delays 
(dj is the delay of a random type-j X N (1) (1) = Ht (z,A(z)) = Vb (z) . (28) customer), which are 
easily obtained through Little s result. t=1 That . = 1 will be an asymptote is no surprise, so we choose 
to plot dj (1 - .) instead. By multiplying with (1 - .) the We know that Pr[vT = 0] = 1 - .T and so an 
exact expres-relative di.erences between e.g. d1 and d2 or d1 for di.erent  Figure 6: delays of type-1 
and type-2 customers for various frame-sizes plotted against .. Factor (1 - .) compensates for asymptotic 
behaviour at . =1. M, remain unaltered. To plot the graph in Fig.6 di.erent values for M were considered 
(M =1, 2, 5 and 10). As can be observed, M does not have a whole lot of e.ect on delays of type-2 customers, 
which represent 90% of the total tra.c. Delays of type-1 customers on the other hand are a.ected quite 
a bit and especially in the higher workload range -from 0.5 to 0.9. For lower workloads the queue will 
consist for the most part of customers pertaining to one group only, which will be ordered like in absolute 
priority, hence the similarity. The lower the load the more frames are reset, and as such the value of 
M is of no particular role (once M is high enough). Once workloads approach a level at which groups are 
queued frame-bound priority has its greatest e.ect. The higher M, the more a type-1 customer can jump 
in line over type-2 customers. Its e.ect on the delay is trivial. As the workload increases further above 
0.9, the e.ect of frame-bound priority fades to the background. At these high loads more and more queues 
are grouped meaning that the lion s share of the delay will originate from these groups their service 
times. Even though the groups will contain more customers, this e.ect becomes negligible.  5. CONCLUSIONS 
In this paper we introduced a new scheduling mechanism to give an answer to the demand for delay di.erentiation 
between di.erent tra.c .ows (needing di.erent QoS). The proposed scheduling mechanism, namely to allow 
high prior­ity tra.c to overtake lower priority tra.c that entered the system during the same frame (by 
which we need to parti­tion the time axis in frames of .xed lengths), was analyzed using matrix analytic 
methods and generating functions on a discrete-time queueing model. Our results allow to calcu­late the 
joint probability generating function of the number of customers of all classes separately, given any 
i.i.d. arrival process. Finally we have seen in detail the e.ect frame­bound priority has on delays of 
the various customer classes.  6. REFERENCES <RefA>[1] K.Y. Liu, D.W. Petr, V.S. Frost, H.B. Zhu, C. Braun, 
W.L. Edwards (1997) Design and Analysis of a Bandwidth Management Framework for ATM-Based Broadband ISDN, 
IEEE Communications Magazine, Vol. 35, No. 5, pp. 138-145. [2] S. De Vuyst, S. Wittevrongel, H. Bruneel 
(2004), A queueing discipline with place reservation, Proceedings of the COST 279 Eleventh Management 
Committee Meeting (Ghent, 23-24 September 2004), COST279TD(04)36. [3] J. Walraevens, B. Steyaert, H. 
Bruneel (2001) Performance Analysis of The System Contents in a Discrete-Time Non-Preemptive Priority 
Queue with General Service Times. Belgian Journal of Operations Research, Statistics and Computer Science 
(JORBEL) vol. 40, no. 1-2, pp. 91-103. [4] D.A. Bini, G. Latouche, B. Meini (2005) Numerical Methods 
for Structured Markov Chains, Oxford University Press. [5] H.S. Wilf (1994) Generatingfunctionology. 
Department of Mathematics, University of Pennsylvania, Academic Press, Inc. [6] I. Stavrakakis (1994) 
Delay Bounds on a Queueing System with Consistent Priorities. IEEE Transactions on Communications, vol. 
42, no. 2-4, part 1, pp. 615-624. [7] S. De Clercq, B. Steyaert, H. Bruneel (2009) Analysis of a Multi-Class 
Discrete-time Queueing System under the Slot-Bound Priority rule. Proceedings of the 6th St. Petersburg 
Workshop on Simulation, pp. 827-832. [8] M.F. Neuts (1989) Structured stochastic matrices of M/G/1 type 
and their applications, vol.5 of Probability: Pure and Applied. Marcel Dekker Inc., New York. [9] L. 
Kleinrock (1975) Queueing Systems, Volume I: Theory. Wiley, New York.</RefA>    
			
