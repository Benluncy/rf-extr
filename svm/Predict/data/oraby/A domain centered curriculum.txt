
 A DOMAIN CENTERED CURRICULUM: An Alternative Approach to Computing Education Iraj Hirmanpour iraj@db.erau.edu 
Tlmmas B. Hilburn hilburn@db.erau.edu Andrew Kornecki kom@db.erau.edu Department of Computer Science 
Embry-Riddle Aeronautical University Daytona BeaciL FL 32114 ABSTRACT This paper presents anew approach 
to computer science education by proposing a model curriculum that presents computer science fundamentals 
and software engineering concepts in the context of an application domain. This domahwentered model is 
discussed in terms of its philosophy and stmcture, and emphasizes curriculum featmesthat enhancethe ability 
of a graduate to be part of atearnthat developssoftwarein the application domain, In particular, the 
cumiculum model proposes integration of software engineaing education with the application domain. The 
undergraduate computer science curriculum at Embry-Riddle Aeronautical University is used to illustrate 
the principal features of the model and to advancearguments aboutthe model s viability. INTRODUCTION 
In recent yews there has been a great amount of interest and activity in defiig and implementing new 
computer science curricula that address the needs and desires of a variety of constituencies: students, 
industry, government graduate and research programs, faculty, and society in general. l%em has been no 
effort to try to address all constituewies with a single freed curriculm, but rather to establish acurricdum 
desQn fiarnework that promotes the development of qtilty curricula that have objectives, designs and 
implementations that serve different sets of stakeholders [1]. Various groups and individuals have proposed 
variations and extensions of this framework [ 2, 3, 4, 5]. In this paper we offer suggestions and recommendations 
concerning a computer science curriculum that is centered around a specitlc application domain and which 
is infused with a strong emphasis on software engineering. In the last twenty years the developmentofapplicationsoftwarehasmoved 
beyondthe  Permission to copy without fee all or part of this material is grantad provided that the 
copies are not made or distributed for direct commercial advanta$e, the ACM copyright notice and the 
title ol the publication and Its date appear, and notice is given that eopyi is by permission of the 
Association of Computing Machinery. $o copy otherwise, or to republish, requires a fee andlors ecific 
permission. SIGCSE! 953/95 Nashville, TN USA @ 1995 ACM O-89791-693+19!YOO03....50.5O capabilities of 
the individual programmer and is now widely viewed as an engineering activity. This view is reinforced 
by the advent of software factories and the recent interest by government and industry in software process 
improvement. It is not uncommon for large companies to have a software division that employs hundreds 
ofsofhvare engineers that concentrate their work on multi-year projects in a spcciflc application area. 
A software engineer might spend a sigtilcant part of hislier career in a single domain area such as aviatiok 
banking and tlnance, chemical processing, manufacturing, or health and medicine. Educators in the field 
of computing must ask themselves if they are addressing the needs of those graduates that seek a career 
as a software engineer in a specific domain of application. CURRENT STATE OF COMPUTER SCIENCE CURRICULA 
 A principal issue in the design of computer science curricula is the designer s view of computer science 
as a discipline [6]. Is it a science or engineering discipline? fbe design of most curricula is based 
on some combined view of computer science as having both science and engineering components. Curriculum 
1991 argues that every computing program should emphasize three education psradignx theory, abstraction 
and design [1]. In [2] curriculum development is presented in terms of a combination of choices from 
three different continuum breadth versus depth coverage, passive versus active learning styles and practice 
versus theory abstraction levels. There is typically a balance between these three, where the emphasis 
depends upon the curriculum goals and objectives. For example, a curriculum intended to prepare students 
for graduate school would emphasize breadth of coverage, passive learning and theory , while a professionally 
oriented curricuhun would concentrate on depth of coverage in certain key areas, active learning styles 
and practice . In discussions with employem of computer science graduates there seems to be an ahnost 
universal dissatisfaction with the preparation and attitudes of recent graduates. Of course, this is 
surely part of the overall unhappiness with the current state of higher education. However, for graduates 
of computing disciplines the complaints are more specitlc a lack of relevant and practicaI competencies, 
the inability to work as part of a teanL and little perspedve about the humu economic and managerial 
issues involved in software development. In [3] Peter Denning discusses the problems associated with 
current e@nedng education and he asserts the following ...a curriculum capable of preparing students 
for the shifting world must incorporate new elements emphasizing de.s@, demonstrated proficiency, effective 
interaction with others, and a greater senaitivelytoward the historical and cultural spaces in which 
we all live and work. The time has come to experimd with new curricula that will lead this way. In this 
paper we suggest a curriculum that will address crucial parts of such concerns a curriculum based on 
computer science fundamentals, coupled with practical cap%mcies and team activities that is centered 
around a spe&#38;c &#38;main of application. We call such a curriculum domain centered . A DOMAIN CENTERED 
CURRICULUM (DCC) Within the framework proposed in [2], a domain centered curriculum places emphasii on 
depth of coverage for a few key computing areas, the learning style is a combination of active and passive 
learning, and the curriculum places strong emphasis on practice. Figure 1, depicts the architecture of 
the DCC curriculum. It consists of seven compon~ Computing Fundamentals, Oeneral Echvxt@ Math and Sdeace, 
Domain Knowledge, Advanced Compudng Concep@ Application Based Computing, and Senior Design. This DCC 
model is currently implemented at Embry-Riddle Aeronautical University, an institution of higher learning 
focused on aviatiw via a curriculum called Aviation @n@er science (ACS). The ACS CUITiCUhlIn is based 
on aviatinn as the application domain and is rich in ita emphash on software engineering. In the following 
=-~ti@oII ofe-ach component of the model mmments on the ACS implementation are included. F@re 1 also 
mmmarim the key computing elements of the ACS cunkulum in the framework of the DCC model curriculum. 
and computer organization. o ACS Implementation Consista of two courses on the fundamentals af programming 
and software design (CS1 and CS2 that take a top-down toolbox approach to teaching software development 
[7] and use aviation examples to motivate and illustrate concepts. These courses start students thinking 
about programming in the large and underscore the concepts of modularity, abstraction and information 
hiding. In additiw this component involves two courses on the fmdamentals of digital logic and computer 
organization (Computer Organization I and II) that includes topics in assembly language programming and 
microprocessor interfacing. General Education The general education component of the curriculum is usually 
university driven, not departmen@ and therefore is not discussed here. Math and Science o DCC Model 
Should include mathematics and science components to support the study of domain knowledge as well as 
supporting the computing portion of the curricuhnn. For example, chemisby would be a choice for chemical 
processing, while anatomy/physiology might be the science chosen for health and medicine domain. o ACS 
Implementation This math component consists of a discrete mathematics course, two calculus courses, and 
upper division courses in probability and statistics, linear systems, and differential equations. A sequence 
of physics courses, with laboratory, provides the necessary background in science for understanding aviation 
systems. Computing Fundamentals  Domain Knowledge o Dcc MOdel o IXX Model Includes w-i?, fundammtals 
data Stmctm= of and computer algorithms, Consists of a body of knowledge deemeduseful to a software engineer 
developing software in a Frogarmmlng (0s Q 1 PrOsrmmrnIng (cS n) II Cemput.r Organization I Cemputw 
organization II Computing Fundamental= D-­ ~uro~ AJdy818 d op*r8ung o~8ni2Du0n d Adwmced Computing Concepts 
Mod.­utd simld8tlDn D8taba8e Sytian. OOmpbdw Oraphie- AJtine18i Int*Ulg*nec R@abllmc Syctem* Application 
Based Computing Figure 1: Architecture chosen domain. For example, a software engineer workin on medical 
imaging software WOW beneilt fmm knowledgeofthehumanbody,undentanding therulesand regtdationsgoverning 
medicine and heala and familiarity with the language of medicine. o ACS hllph3mC!Y4tati011 Mate&#38;d 
abotttthe aviation application domain is integrated into the curriculum in two ways fti by requiring 
a sequence of Airway S&#38;me Gouraes a as Principles of Ft@Q M#mdogy, d Air IkatEc control, and second 
by assig@ problems and projects that are drawn from the discipline. Some example problems and projects 
ate listed in Figure 2. Advanced Computing o DccModel of DCC Model Curriculum Includes subjects in 
advanced computing topics such as co&#38;puter architecture% programming languages, computer theory, 
numerical analysis, and operating systems. o ACS Implementation This component includes courses in advanced 
data structures and analysis of algorithms, organization of programming languages, operating systems, 
and computer architecture. The content and approach in these courses is similar to that of more traditional 
computer science curricula. Application Based Computing o DCC Model I M grouping of applied computing 
subjects is selected to increase understanding of the fimdamental computing knowledge. Subjects such 
as distributing and concurrent computing, and database systems would be natural choices for banking and*, 
while Image processing, numerid analysis,andAI might beselectedfor the medical imaging software engineer. 
These coursesshouldinclude team projects that involve solution of problems in the selected application 
domain. o ACS Implementation ~ ~t consis@of courses in Computer Graphi~ Database Systems, ArWcial Intelligence, 
Modeting and Simtdatio&#38; and Red-Time $5tems. Group projects of two to five studentaareassignedin 
eachcourseandstudent teamsdevelopsoftware basedboth on the course material and the application domain. 
The topics cover graphic rendering, relational data bases, knowledge acquisition, expert systems,discrete 
event simulatio% object-oriented methodology, concurrency, tasking, and interprocess communication. he 
projects (see FQure 2 for examples) also emphasize good software engineering practices in the weas of 
project management requirements collection and specification, architectural and detailed design, and 
quality assurance. senior Design o XC Model llds isaapstcmecmpommt thatbrings together stubt Imowledge 
and skills gained throughout the curricdum into a single life-cycle project that would typically be set 
in the senior year. fhe problem to be solved should be in the domain of interesq it should involve mat 
clienw, and it should be sufllckmtly complex to require the work of a team of students with tilcient 
knowledge and experience in the domain and in the principles of software engineering. o ACS Imptemenm 
on The Senior Design mnponent of the ACS curriculum consists of a two-course sequence a sdware engineering 
course and a senior project cuxse. l he sequenceprovides a deeper study of softwareengineering concepts 
and concentration on a full Me-cycle team project. l he senior project course is a capstone course that 
allows studmts to play roles on a software development team and produce software engineering artifacts 
related to a project in the application domain. Database Systenw small airline maintenance operation 
 flight information systemfor aflight training operation  airline ticket salesdatabase.  Modeihg and 
Simukztion: a passengerterminal fast curb-in checkouts simulation to establish staffiig requirements 
c an analysis of a terminal area operation to identify the need for airport runway expansion an air 
trafilc control messagesprocessing simulation in an en-route center to establish the sector capacity 
 an airport gates simulation to establish staffing and equipment requirements for luggage loadmghnloadmg 
operations.  Real-Time Systems: an interface of a Boeing 707 cockph procedure trainer with a Silicon 
Graphics basedflight simulator and instrument displays  processing of weather data from a Kavouras weather 
station serial feed to present a weather report at the requested location  software for a mock-up aircraft 
cockph re-eordigurable display  the monitoring and control of a taxiway operation using the feed from 
a Global Positioning Satellite system.  Arl@cial ZnteUigence: an expert system to support air traftlc 
control terminal operations  an expentsystem for diagnostics of aircraft engines  Figure 2 ACS Application 
Projects ASSESSMENT An assessmentof the implementation of the model in the ACS program is presented 
ffom three different perspectives students, employers, and the departmental. Student View Since the introduction 
of the model into the Computer Science program in 1990, student satisfaction with the curriculum and 
the department has increased. There are a number of indicators to suppmt this assertion. For example,the 
attrition rate in 1990, prior to the institution of the new curriculum, was 42%. This number is now reduced 
to 22%. From 1985 to 1990, the department experienced over fifty percent decline in enrolhnenti far abovethenatiomdaverage.WM 
theinstitution ofthenew program, areversal of the declii in enrollment hastaken place and enrolhnent 
for Fall of 1994 is the largest in the past five years. l%r thepasttwo years,job placement of ACS graduatesis 
at100percentandmanyreceivemomthanonejob offer. F@thermore, there is a marked increase in the number of 
new graduates who choose to stay in touch with the departmnt andfaculty. Thesegraduateswrite abouttheir 
newjobsorassignmentstheyhavebeengiven, andexpress cdldence in their ability to carry out job assignments. 
Employer View Ik number ofccanpaniessoliciting cooperative education students frcm the ACS program is 
increasing annually. The point has been reached where there are more cooperative education positions 
than students eligible or willingtotake them. l he increased interest by industry in ACS students and 
the high placement rate of graduates suggest industry s satisfaction with the curriculum and its product 
Department View Establishing dqartmentd SpO1 ISOd research and providing faculty development resourcesareenhancedby 
thef&#38;using feature of adomain centeredcurriculum. It is easiertoexcelinaliited reaoumeenvironment 
when the cumidum andfiwultyare focused he focusing effort has brought recognition to the Computer Science 
Department (the Upartment was recently cited by the SACS visiting teamasexeqdary). I%eFederal Aviation 
Admiistration has acknowledged the viability of the model by making wbstantkd grants for laboratory improvemen~ 
and SpOllSO1 @ and encouraging research efforts by Embry-Riddle faculty and students. l he Department 
has also e@abMhM productive relationships with a number of companies involved in aviationherospace work 
(e.g. Mar&#38;in-Marrie@Han&#38; McDonell-Dougiaa and MITRE). CONCLUSIONS projects and applications 
programming has convinced us that a domain<entered curriculum model is a important element in solving 
some of the problems in current computing curricula [3]. We believe the Embry-Riddle experiencecanserveasihunework 
for the development of other DCC curriculum in areas such as health/medicine, banking/fiiance, and industrial 
processing and manufacturing. Such a framework should be based on the general guidelines of curricula 
1991 and be grounded in computer science fundamentals. l he general DCC architecturesuggestedin this 
paper can serve asbeginning point for those programs interested in a domain-centered approach. Although 
such a curriculum can not be successful without considerable effo~ the Embry-Riddle experiencehasbeenthoroughly 
endorsedandacceptedas successfulby graduates,employers andthefaculty. REFERENCES <RefA>1. Tucker, A., Computing 
Curricula 1991 , Communications of the ACM, 34(6), June 1991, pp. 68-84. 2. Tucker, A. and Wegner, P., 
New Directions in the Introductory Computer Science Curriculum , SIGCSEBulletin, 26(l), March 1994, pp. 
11-15. 3. Denning, P,J., Educating a New Engineer, Communications of theACM, 35(12), December 1992, 
pp. 82-97. 4. Paxto&#38; J.T., Ross, RJ. and Starkey, J,D., A Methodologyfor Teaching anIntegrated Science 
Curriculum, SIGCSE Bulletin, 26(l), March 1994, pp. 1-5. 5. Shackleford, RL. and LeBlanc, RJ., Integrating 
Depth frst and Breadth Fret Models of Computing curricula SIGCSE Bulletin, 26(l), March 1994, pp. 6-10. 
 6. ACM Task Force on the Core of Computer Science, Computing as a Discipline , Communications of the 
ACM, 32(l), January 1989, pp. 9-23. 7. Hilburn, T. and Hirmanpour, I,, A Top-Down Toolbox Approach to 
Teaching the Ada Programming Language , Proceedings of the Ada SofWare Engineering Education and Training 
Symposium, September 1991.</RefA>  Our experiences with a computer scienm curriculum centerd armmdthe aviation 
domain that emphasizesteam 
			
