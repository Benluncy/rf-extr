
 A Graph Generation Software Package Riclxmd Johnsonbau&#38; Mar-tin * Department of Computer Science 
and Information Systems DePaul University Chicago, IL 60604 johnsonbaughtldepau l.edu, kalin@depaul.edu 
ABSTRACT INTRODUCTION We discuss a software package that generates graphs A substantial part of the computer 
science curricu­of specified sizes and properties. Among the types of lum is concerned with graphs and 
graph algorithms. graphs are Courses in design and analysis of algorithms, data struc­ tures, and discrete 
structures devote considerable time . random graphs to graphs, and instructors of such courses routinely 
as­sign programs involving graphs to students. The prob­ random connected graphs  lems may include 
programming assignments with input random directed acyclic graphs so large that the problems cannot 
be solved by hand. Large input files are also useful in profiling competing  random complete weighted 
graphs  algorithms. Accordingly, we have found it useful to be able automatically to generate graphs 
of various sizes random pairs of isomorphic regular graphs  and properties. Our package writes the 
graphs to files random graphs with Hamiltonian cycles suitable as input to programs, regardless of how 
the pro­grams represent graphs internally (e.g., as linked lists or  random networks adjacency matrices). 
Our graph generation package is available from either Graphs may be specified further with respect to 
one or author. We will send the source code by electronic mail more of these properties: or on a formatted 
53 inch MS-DOS floppy disk provided to us. Our package has been tested under UNIX C, o weighted or unweighed 
VAX-1 1 C, and Turbo C and should be portable to any . directed or undirected reasonable C environment. 
First we describe some uses for the types of graphs simple or nonsimple that our package can generate. 
We then discuss the algorithms used in the package to generate the graphs,Such graphs are useful to faculty 
and students for test­including cautionary notes on the use of random number ing and experimenting with 
many algorithms that ap­generators. We conclude with possible extensions to the pear in the computer 
science curriculum, such as al­ package. gorithms to find components, to perform a topological sort, 
to solve the traveling salesperson problem, to find THE GRAPH GENERATION PACKAGE a minimal spanning tree, 
or to solve the maximal flow problem. Our software package, written in C, writes Our package is menu-driven. 
The top-level menu isgraphs to user-specified files. The package is available at no cost from the authors. 
O. Exit Program 1. Random Graph granted provided thet the copiee ere not made or distributed for 2. 
Random Digraph direct commercial advantage, the ACM copyright notice and the Permission to copy without 
fee all or part of this material is 3. Random Connected Graph title of the publication and its date 
appear, and notice is given 4. Random DAG (Direct ad Acyclic Graph) that copying is by permission of 
the Association for Computing 5. Random Complete Weighted Graph Machinery. To copy otherwise, or to 
republish, requires a fee and/or specific permission. 6. Random Isomorphic Graph Pair @ 1991 ACM 0-89791-377-9/91/0002-0151 
. ..$l .50 7. Random Hamiltonhn Cycle Graph 8. Random IIetuork Choice?   Selecting any choice except 
O brings a sub-menu. For example, if the user selects 1, a series of prompts results: Number of Vertices: 
Number of Edges: 1. No% Simple 2. Simple Choice?  1. Unweighed Edges 2. Weighted Edges Choice?  
 File for graph: Anonsimple graph is allowed to contain parallel edges and/orloops. If the user selects 
the Weighted Edges option, theprornpt Maximum Edge Weight: allows the user to enter a maximum edge weight. 
A random graph meeting the chosen specifications is then generated and written to the file named by the 
user. Output takes the form nm VI WI c1 V27J2C2 ... where nis the number ofvertices and mis the number 
of edges in the graph. Edge i is incident on vertices Vi and w~. The weight of edge i is c~. If the graph 
is unweighed, the value of c~ is 1 for all i. Other options work similarly. For example, if the user 
selects 2, Random Digraph, an output line Vi W; c~ denotes an edge directed from vi to W~with weight 
Ci. Random graphs and digraphs are useful aa input to pro­grams that find components, that test for connected­ness, 
and that find spanning forests (see [5]). Programs that find spanning trees or minimal spanning trees 
(see [5]) can use as input random connected graphs, pro­vided aa option 3 on the top-level menu. Option 
3 al­lows the user to designate the connected graph s edges as weighted or unweighed. Directed acyclic 
graphs, suitable as input to programs that find topological orderings (see [5]), are provided by option 
4 in the top-level menu. The package writes the generated graph to one file and a topological sort to 
a second file. The user may specify the number of vertices and edges, the maximum weight per edge, and 
the two file names. Complete weighted graphs are useful as input to pro­ grams that either solve exactly 
the traveling salesperson problem or approximate an exact solution to this prob­ lem (see [2]). Option 
5 generates such graphs, allowing the user to specify the number of vertices, whether the graph is directed, 
the maximum weight per edge, and the file name. Pairs of isomorphic graphs, suitable as input to pro­grams 
that test for graph isomorphism (see [3]), are pro­vided by option 6 in the top-level menu. The package 
writes two isomorphic, regular, undirected graphs (i.e., isomorphic, undirected graphs in which all of 
the ver­tices have the same degree) to two files and writes an isomorphism to a third file. Pairs of 
isomorphic regular graphs make challenging input to programs that test for graph isomorphism (see [1, 
Section 111.5]). Under this option, the user specifies the number of vertices, the common vertex degree, 
and the file names. Graphs with Hamiltonian cycles are useful as input to programs that find such cycles 
or determine that they do not exist (see [3]). Option 7 on the top-level menu provides graphs with Hamiltonian 
cycles. The package writes the graph to one file and a Hamiltonian cycle to another file. The user may 
choose the number of vertices and edges as well as the file names for the graph and the cycle. Networks, 
provided as option 8 on the top-level menu, are suitable as input to programs that find maximal flows 
(see [3]). Under this option, our package gener­ates a simple, weighted, directed graph satisfying the 
following: (a) Vertex 1 has no incoming edges. (b) Vertex n, where nis equal to the number of vertices, 
has no outgoing edges.  The user selects the number of vertices and edges, the maximum weight per edge, 
and the file name. Our package does some error and integrity checking. As examples, the user may not 
specify a graph with zero vertices or edges. If a simple, undirected graph with n vertices is to be generated, 
the user should specify at most n(n 1)/2 edges. If a Hamiltonian cycle graph with n vertices is to be 
generated, the user should spec­ify at least n edges. If a network with n vertices is to be generated, 
the user should specify at most n= 3n + 3 edges. Our package corrects erroneous user input wher­ever 
feasible. In the examples just cited, the package would set the edge count correctly if the user did 
not. GENERATING RANDOM GRAPHS There is a vast literature about random graphs. The book [1] is devoted 
to random graphs and lists over 700 references. Much of the literature on random graphs is devoted to 
studying their properties. These results typ­i call y do not need explicit constructions. The construc­tions 
presented in [1] are based on quadratic residues and finite geometries. Our construct ions rely on pseu­dorandom 
number generators. Generating a random graph is straightforward. If loops and parallel edges are allowed, 
we simply generate pairs of random integers, in the appropriate range. The output can be considered as 
a directed or an undirected graph. If the graph is weighted, we also generate a ran­dom weight for each 
edge. If the graph is simple, we must store each edge aa it is generated so that we avoid parallel edges. 
We must also discard loops. Similarly, it is easy to generate a complete graph with random weights. If 
the graph is directed, we simply assign each ordered pair of distinct integers in the ap­propriate range 
a random weight. If the graph is undi­rected, we assign each unordered pair of distinct integers in the 
appropriate range a random weight. Suppose that we want to generate a random graph with a Hamiltonian 
cycle and vertices 1, ..., n. (We assume throughout the remainder of this section that the desired vertices 
are 1,. ... n and that the desired number of edges is m.) We use an algorithm published by Knuth [4, 
page 139] and attributed by him to L. E. Moses, R. V. Oakford, and R. Durstenfeld to obtain a random 
permutation of 1,. ... n: fori:=l tondo a[~ := i fori:=l tondo begin j:= r adom(l, n) .swap(a[t], a~~) 
end We assume that randam(i,j) generates a random inte­ger between i and j, inclusive. We then generate 
edges (a[l], a[2]),(a[2],a[3] ),... ?(a[n -Il?a[nl)>(a[nl, a[ll)t so that the graph has the Hamiltonian 
cycle a[l],. . . !a[nl>a[ll. Finally, we add random edges to produce the desired number of edges. To 
generate a directed acyclic graph, we first generate a random permutation a[l],. ... a[n] as described 
previ­ously. This random permutation serves as a topological sort of the graph. We then generate m random 
edges of the form (a[~, a~]) with i <j. To generate a random connected graph, we begin by generating 
a random spanning tree. To generate a ran­dom spanning tree, we first generate a random permu­tation 
a[l],. . . , a[n]. We then iteratively add edges to form a tree. We begin with the tree consisting of 
ver­tex a[l] and no edges. At the iterative step, we as­sume that a[l], a[2],. ... a[~ are in the tree. 
We then add vertex a[i + 1] to the tree by adding the edge (a[i + 1], a[~and~l, i)]). (This construction 
is similar to that of Prim s algorithm.) Finally, we add random edges to produce the desired number of 
edges. To generate a pair of isomorphic simple and regular graphs, we first generate a random simple 
and regular graph. We then construct an isomorphic copy by re­naming its vertices using a random permutation. 
Suppose that we want to generate a random simple graph in which every vertex has degree r. We exe­cute 
the following, which we subsequently refer to w the main procedure: 1. Choose vertices v and w each of 
degree less than T such that there is no edge between v and W. If no such pair exists, execute the fixup 
procedure. 2. Add an edge between v and W. 3. If some vertex has degree less than r, go to 1.  The 
fixup procedure works as follows. There are two cases to consider: 1. All vertices except one have degree 
equal to r. 2. There are pairs of vertices each of degree less than r, but each such pair is connected 
by an edge.  In the first case, we increase the edge count in the graph in the following way. Suppose 
that vertex v has degree less than r. Choose an edge (W, w) such that (v, W) and (v, u~) are not edges. 
Delete the edge (WI, w) and add edges (v, WI) and (v, w). In the second c~e, we increase the edge count 
in the graph in a similar way. Suppose that vertices VI and Q have degree less than r and (m, w) is an 
edge. Choose an edge (W, w) such that (vI, W) and (VZ, W) are not edges. Delete the edge (w, w-z) and 
add edges (VI, WI) and (VZ, Wz). If some vertex in the resulting graph has degree less than r, we resume 
by executing the main procedure. COMMENTS ON RANDOM NUMBER GEN- ERATORS As explained in the previous 
section, we need a ran­dom number generator that returns random integers in a specified range. Standard 
C specifies only one random number generator called rand that returns a random in­ teger in the range 
O to RAND_14AX where RAl?D_MAX is a large integer (typically, the largest signed int ). The problem is 
how to modify rand to achieve random inte­ gers in an arbitrary range. It is tempting to use rand to 
obtain a random integer in the range O to n -1 by simply returning the remain­ der when the value returned 
by rand is divided by n; in c, int r( n) int n; < /*** CAUTION! ! ! ***/ return rsndo % n; } Indeed, 
this is exactly the code for the Turbo C function random. The problem, as any statistician will tell 
you, is that taking the remainder after division uses low-order bits. Low-order bits, even of random 
numbers, tend not to be random. As an example, in VAX-11 C, for certain values of n, the function r will 
never successively generate a pair of equal numbers. In this case, r is a poor function to use to simulate 
craps! A better way to use rand is linearly to map its range [O,RAND_MAX] to [O,n -i]. The resulting 
function will be as random as rand since the transformation involves only a change of scale. Since O 
< rando < RANDJiAX, multiplying by n and dividing by RAND_MAX + 1, we find that rando * n 0< RAND-MAX 
+ 1 RANDIAX * n < RAND_MAX + 1 RAND_MAX = <n. n RANDJIAX + 1 If we now convert (rand( ) * n)/ (RAND_MAX 
+ 1) to an integer by dropping the fractional part, the resulting integer is in the range 0 to n -1. 
The C code is as follows: int ran( n) int n; { static double x = RAND_IIfAX + 1.0; return rando * (n/ 
x); CONCLUSIONS-FUTUllJ3 DIFLEC7CIONS We have described a software package to generate spec­ified graphs. 
Such graphs are useful to faculty and stu­dents since a substantial part of the computer science curriculum 
is concerned with graphs and graph algo­ rithms. The software package could be extended to generate other 
classes of random graphs (e.g., planar graphs or bipartite graphs). If a reasonably standard graphics 
package emerges, we would like to provide the option of drawing a specified graph. We likewise would 
like to provide an accompanying package of standard graph algorithms so that students could experiment 
with the algorithms on easily generated sample graphs. The package presently generates graphs with Hamil­tonian 
cycles and pairs of isomorphic regular graphs. It would be useful to generate graphs without Hamiltonian 
cycles and pairs of nonisomorphic graphs. Of course, such graphs should be interesting in the sense that 
it should not be too easy to determine that the graphs do not have the specified properties. (For example, 
it is trivial to determine that a graph that is not connected does not have a Hamiltonian cycle.) One 
possibility for generating interesting pairs of nonisomorphic graphs is to use the method described previously 
to generate ran­domly two graphs with the same vertex degree and the same number of vertices. According 
to [1, page 216], if r > 3 is fixed and rn is even, the number of regular graphs with n vertices and 
vertex degree r is asymptotic to e-( F-1)/4 (m\! (rn/2)!2m12~r!) %! Since this value grows rapidly as 
n increases, if n is large compared with r, it is extremely likely that two random regular graphs with 
n vertices and vertex degree ~ would not be isomorphic. REFERENCES <RefA>1. B. Bollobiis, Random Graphs, Academic 
Press, 1985. 2. T. H. Cormen, C. E. Leiserson, and R. L. Rivest, Introduction to Algorithms, MIT Press, 
Cambridge, Mass., 1990. 3. R. Johnsonbaugh, Discrete Mathematics, 2nd cd., Macmillan, New York, 1990. 
 4. D. E. Knuth, The Art of Computer Progmm­ming, Vol. 2: Seminumerical Algorithms, 2nd cd., Addison-Wesley, 
Reading, Mass., 1981. 5. R. Sedgewick, Algorithms, 2nd cd., Addison- Wesley, Reading, Mass., 1988.</RefA> 
  
			
