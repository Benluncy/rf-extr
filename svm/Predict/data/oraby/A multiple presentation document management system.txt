
 A Multiple Presentation Document Management System Augusto Celentanof$, SilvanoPozzi$ and Donato Toppeta$ 
t Politecnico di Milano, Piazza Leonardo da Vinci 32,1-20124 Milano, Italy $ CEFRIEL, Via Emanueli 15,1-20126 
Milano, Italy $ Bull, Via Ai Laboratory Olivetti, 1-20010 Pregnana Milanese (MI), Italy The paper proposes 
an approach to the definition of a document management system oriented to the support of cooperative 
activities based on multiple-presentation documents. In our view, multip&#38;­presentution means that 
the informative content of a document can be presented to the reader by US­ing different shapes, styles 
and levels of detail, according to the reader profile. The Zelig document management system is based 
on the definition of an only conceptual (i.e. abstract) document, which is mapped to several concrete 
documents, each used to fulfil a different communication goal. A proto­ type implementation of the Zelig 
system has been carried out within the MS-Windows environment. 1. INTRODUCTION tic content of the information 
he or she is trying to con­vey. Multimedia has the potential to broaden the band. locutors, characterized 
by different interests and diverse width of computer mediated communication by reducing basic and specific 
knowledge, we are faced with the the distance with the true para-lingual, face to face in­problem of 
choosing which presentation form is more When we must convey the same message to many inter­ teraction 
of people. Hypermedia is composing the mul­appropriate in order to present the information, making timedia 
capability of the new workstations with an hy­ it clear, persuasive and reusable. In fact, while teaching 
pertextual model of document that can be used to asso­ a class lesson or writing for a large audience, 
we have ciate different contents and different presentations to only two choices: we may average our 
approximate different reading paths of the same document. The prob­model of the audience we are interacting 
with, or we lem with hypermedia is that authoring is very difficult may increase the redundancies in 
order to generate and expensive while the readers often have problem in multiple views of the same information. 
In fact, only in a orienting in the hyperspace due to a limited knowledge Yace to face communication 
we can tune our message of the structure of the document. to the specific target: unfortunately this 
way of The approach pursued by Microsoft with the interacting can be too expensive in reaching a suitable 
Compound Document Architecture [1], by Hewlett level of co-ordination and consensus among large Packard 
with the New Wave environment [2] and by the Andrew project [3], aims at maintaining the Personal computer 
tools have largely increased the intrinsic richness of presentation of each type of data by groups. embedding 
the data in a document, and by preserving a capability of generating, at a low cost, many different reference 
to the specific tool that can visualize and views of data according to their type. For instance, eventually 
edit it. The main limitation of such Project Management tools have proved that ffeedom in approaches 
is that the author can only choose one choosing the visualization technique (CPM, GAN M , default presentation 
for each object within the PERT, reporta and charts) can make the tools them­ document, while the reader 
is in charge of activating the selves much more flexible and appropriate. However, editing of each embedded 
object to view it in a different the user of the tool has the full responsibility of choosing format. 
Therefore, it is possible to say that a flexible user-oriented data presentation mechanism is implicit 
in the Compound Document &#38;chitecture, but it is not a form that is really meaningful aczording to 
the seman- C4mtact address: Augusto Celentano, Dipartimento di Elettro­exploited being static and passive 
. nica e Informazione, Politecnico dl Milano, Piazza Leonardo da The experiences in Intelligent Computer-AidedVinci 
32, 1-20133 Milano, Italy. Phone +32-2-23993651, Fax Instruction (ICAI) have made explicit the need for 
a dy­+39-2-23993411, E-mail auce@ipme12.elet.polimi.it namic student s model in shaping a personalized 
lesson, tailoring the amount and the format of the course mate­rial to the learner s needs (e.g., browsing 
or reading) and profile (e.g., novice or expert) [41. Beside the aforementioned environments, many sys­tems 
operate on multiple views of the same data in a consistent way [5, 6, 7]; however, there is no product 
that addresses this problem from a general point of view, that is, for a large number of document types, 
and for a large set of presentation shapes. @ 1992 ACM O89791-533-W92A)O1OIOO63 $1.50 2. COOPERATIVE 
MULTIPLE-PRESENTATION DOCU-MENT PROCESSING Starting ffom the ideas discussed in the Introduction, an 
environment oriented to support of cooperative activities based on multiple-presentation documents has 
been envisioned. In our view, multiple-presentation means that the informative content of a document 
can be presented to the reader by using different shapes, styles and levels of detail, according to the 
reader profile. The goal of such an environment is to constitute a framework for making the computer 
a tool that improves the effectiveness of the inter-personal communication within groups. The environment 
is composed of two systems: a doc­ument management system and a coopsratwn manage­ment system. Since 
the former is meaningfid also in a personal computing environment, it is defined as to be largely independent 
from the cooperation related aspects. 2.1. The document management environment The document management 
system accesses an informa­tion base composed of highly structured documents, characterized by several 
types of information with lim­ited multimedia features: text, da~ tables, drawings, diagrams, images, 
programs, and so on. The information access is driven by individual needs and, in a coopera­tive environment, 
by team common goals, to consult, edit, annotate documents according to the personalized views of each 
user. The document management system supports the effi­cient execution of document related activities, 
and is characterized by the following feature= integration of structured and multimedia docu­ment= 
 definition and management of user profiles;  management of document views according to the user needs 
and profiles.  2.2. The cooperative environment The cooperative environment is based on a master-shave 
configuration. For instance, in the case of a learning en­vironment, the tutor plays the role of the 
master, while the learners are the slaves. The master coordinates the learning process according to the 
following dimensions subjecfi the master knows the content end the pre­sentation format of each user 
s screem,  focus: the master can drive the attention focus of the users on specific documents and document 
fragmen*  shape: the master can modifi the view of a single user, or force all the users to adopt a 
common view, this dimension integrates the cooperative environ­ment with the multiple presentation aspects 
of the document management system.  While cooperation roles are based on a simple 1 mas­ter I n duves 
schema, it is assumed that the master s role can be taken, at different times, by different people. This 
allows us to model a larger class of applications, e.g., interactive teaching, structured walk-through, 
ac­tive baiting, examinations, and so on, without address­ing the whole complexity of the cooperative 
work envi­ronment. 3. TNE ZELIG SYSTEM AZ a first step towards the constriction of the coopera­ tive 
multiple-presentation document processing envi­ronment above outline~ we developed Zeligl, a system for 
managing multiple-presentation documents. The Zelig system has been designed to fulfil the fol­lowing 
requirements: build a document management system based on the definition of a conceptual (i,e., abstract) 
document. The conceptual representation of a document is mapped to several concrete documents, each used 
for a difTerent goal; build a document mamwement evstem able to select in a more or less auto%atic w~y 
the set of useful presentations according to the user needs and to the semantics and purpose of the communication. 
 From an operational point of view, facing the user with personalized viewe on documents requires three 
phase= abstraction of the semantic content of a document structure through the identification of its 
structure and the classification of each type of data as an ob­ject on which we can maximize fi-eedom 
of generat­ing syntactically correct presentation% classification of each object according to its seman­tics 
to deduce a subset of presentations which are consistent selection of a default and a subset of alternative 
presentations that are appropriate for each identi­fied user profile. Therefore, the document management 
system archi­tecture has been based on a clear distinction between a conceptual kvel, where the semantic 
of the document and its logical structure are represented, and a presenta­tion land, where the way in 
which the document seman­tic is conveyed to the user is represented. This architec­ture shares a number 
of features with the Office Doc­ument Architecture (ODA) [8], that make explicit the separation between 
the logical and the layout structure of documents. However, as Section 5 points out, some important differences 
exist between the two definitions. The main components of the system are the following a conceptual document 
model, ehle to express a unique, formal representation of the content of a large class of structured 
documents including dif­ferent types of information: text, data, tables, graphics, images, and so on, 
 a set of mappings between the conceptual content and the concrete aspect, which can be validated for 
coneietenc~ a user-interface for selecting the suitable mappings between the contents and the presentation 
both during the initial document authoring activity, and 1 I he name was inspired by Woody Allen s chameleon 
man. during its successive readin% an operational environment for creating, viewing, editing, storing 
and retrieving documents by operat­ing indifferently on any one of the concrete forms, through a set 
of tools for manipulating texts, tables, graphs, drawings and images, which will ultimately operate on 
the internal conceptual representation. While in a true cooperative environment the roles of author and 
reader of a document are not separated, in Zelig we assumed that authoring is a distinct phase generating 
the document conceptual content and the set of presentations that will interface the users. During the 
authoring phase the author defines the conceptual structure of the document, selects the useful presenta­tions 
among those provided by the document types, and associates the presentations to specific user profiles. 
Obviously, pre-definition of types of document data objects also referred to specific domains may reduce 
the work of the author to the selection of an appropriate document model from a library templates. Since 
it is clear that nobody can build transformations to generate only a representative subset views should 
be programmed. the exploitation of standard a full set of algorithmic alternative presentations, of 
generation of alternative In fact, Zelig, thanks to communication mecha­ nisms, enable to integrate 
existing tools to solve specific needs of presentation. Moreover, the document model is general enough 
to comprise the explicit linking of alter­native presentations, edited by the author of the docu­ment. 
4. MULTIPLE PRESENTATION DOCUMENTS Ztdig considers the following basic document component @pes: structured 
text, based on the traditional chapter ­section -paragraph hierarchy, with cross-refer­ences, notes and 
inserts; &#38;tu series (e.g., spreadsheet-like tablesk graphic representation of functions and tabular 
data, according to the formats usually found in business graphics product~  geometric drawings like 
diagrams, flow charts, or­ganizational charts, etc., in general drawings whose shape derives from the 
interpretation of an underly­ing process, or can be defined through a language or a symbolic descriptio~ 
  images. Other multimedia objects, such as animation, video and sound, could be easily added, thanka 
to the object­oriented approach of the model. However, their relation­ships with the multiple presentation 
aspects is, at the moment, not clearly identified, and requires a deeper investigation. 4.1. Text The 
text components are classified in four subclasses, the first two collecting the majority of the cases 
already covered both by traditional word processing and by hy­pertex&#38;baeed document processing systems: 
outline, to model the hierarchical structure of docu­ments; pkin text, to model document parts that, 
still be­longing to a hierarchy, do not show any particular internal structure. At the moment we do not 
con­sider relevant the text structuring issues mostly related to typographical properties, as managed 
in some word processing and desktop publishing envi­ronments by means of the styks and tags mecha­nism% 
 text table, to model text elements organized in rows and column=  anndated text, to model loc~ rel 
ationshins amone text elements, like footnotes, text boxes, c~mments~ and so on. Besides a limited processing 
of the properties con­cerning the format of the document (i.e. the margins, the fonts, the interline 
and so on) mainly related to the con­ figuration of the user virtual lowing transformations  outlining. 
it is possible document as a fill text outline can be viewed desktop, ZeZig faces the fol­ to examine 
a hierarchical or as a table of contents. The at different detail levels by  folding and unfolding intermediate 
item%  abstracting it is possible to associate several levels of detail to a text ffagment, and switch 
from one level ta the other both locally (on a paragraph base), and globally (for the whole document). 
The abstract is intended as an algorithmic abstract based on morphological properties, whose purpose 
is to pro­vide a quick look to the document content. An ex­ample of this transformation class is the 
extraction of the beginning part of a paragraph. The switch to a real abstract is performed by selecting 
a differ­ent content selecting: it is possible to alternate several contents for the same fragment, 
e.g., formal or informal de­scriptions, tutorial or advanced presentations, fidl text or summary, and 
so on. This class of transfor­mation is close to the hypertext concept of perspective ;  filtering: 
this applies mostly to annotated text, where it is possible to hide or reveal the notes. and display 
them in several shapes, e.g., as a footnote, as a pop-up note, as a margin note, and so on.  4.2. Data 
series and grephica These two elements are tightly coupled as presentation alternatives of tabular daa 
so they are tieated in a uni­fied view. The data series type comprises three sub­types: singk series, 
to represent a mathematical numerical sene~  n-dimensional series, to represent data series which have 
n-dimensional vector value=  multiple series, to model the concept of a mathemat­ical matrix.  The 
transformations addressed by the system are: views: it is possible to define which part of the table 
is presented to the user, through projections (on columns), selections (on rows), grouping (by summa­tio% 
average, statistical operations), and reordering (e.g., sorting).  equivalence: it is possible to define 
mappings be­tween tables and graphics, and among several graphic presentations, according to equivalence 
cri­teria as usually adopted by business graphics prod­ucts.  formulas: it is possible to define data 
series through mathematical expressions, which can be evcduated and converted to tables or graphics. 
  4.3. Drawings and images The presentation transformations pertaining to the drawing and image domains 
are less identified than in the previous cases. They are mostly a subset of the view transformations 
provided by drawing and painting pro­ grams, e.g., coloring, cropping, zooming and layering. The Zelig 
approach requires that they be identified through the different meanings they convey to the user. Therefore, 
they are also bound to the application environment, and will be investigated at deeper extent during 
the project development. The following items should be considered hierarchies and organization charts: 
it should be possible to derive them from outlines, table of con­tents, structured texts and classification 
schemew information structures: it should be possible to view trees, lists, vectors and similar structures 
through textual description, formal notation, and drawin~ non hierarchical structures: itshould be Dossible 
to . use graphs to describe non-hierarchical relation­ships like hypertext schemes and semantic nets. 
 4.4. Executable objects and integration with other envi­ronments A number of presentation forms of specific 
information objects are well managed by ad hoc programs. Examples are Mathematical for formulas, Spice 
for the design of electric circuits, Excel for tabular dat% and interpreters and compilers for programming 
and specification lan­ guages. Zelig can integrate such tools, so that their ca­ pabilities can be exploited 
within a unifmng environ­ment. For example, the author of a Zelig document can show a user both a function 
and its diagrammatic repre­sentation, by executing a call ta the Mathematical pro­ gram. Due to the fact 
that Zelig has been developed within the MS-Window graphical environment, it ex­ ploits the standard 
communication mechanisms pro­ vided by the environment itself (i.e. DDE and OLE) to interface with external 
packages. 5. THE ZEL/G DOCUMENT MODEL The Zelig document model is based on the object-or­iented paradigm 
[9] and has been partially inspired by the ODA standard however, some differences exist be­tween the 
two models. In fact, ODA considers document classes and document instances, where a document class is 
defined by means of a generic structure, which is in­stantiated to define a specific document belonging 
to that class On the other hand, from the Zelig point of new, a specific document consists in the aggregation 
of its alternative presentations: therefore, a Zelig docu­ment can be considered as both an instance 
(since it has a content) and a class (since it can generate different concrete documents). The Zelig 
document model is based on four kinds of components: data objects, views, transformations and user profiles. 
A document is a hierarchical composition of data ob­jects, that represent the conceptual components (Figure 
1). The components can be composite (i.e., they are made by other components), or basic (i.e., they do 
not show any deeper structure). Composite components are built as an aggregation, sequence or choice 
of sub compo­ nents, while basic components provide for direct link to the document content. A data object 
can have one or more contents, that de­scribe the actual values that convey the object mean­ in~ a text 
chunk, a dati series, a drawing description, a specific image, and so on. Different contents for the 
same object represent different concrete ways to de­scribe its meaning (e.g., through different languages, 
or rhetoric styles). Each content can be visualized through a number of presentations, that describe 
the physical format and the concrete representation details the specific content takes to be rendered 
to the user. A set of transformations between contents and pre­sentations are defined, that can be applied 
to the object in order to display it according one specific presentation. A transformation can be implemented 
by an internal procedure: e.g., in the case of a text ob­ject, a procedure to derive the summary of the 
text can be invoked, Composite Document object u . ~ -/IBasic object I :F~ \, \ :. II 1 \ \ 11 II 
I I I\ \ :.,., \:::.:~-~MR :::#j::J :-. .. ;,:;:f,:,.:t .? ..... content 1 presentation 1 . ,.i~~,l,~,. 
..:;;*...:::::. :{::::::! +.:yv :....: content n I w presentation n   iEF External tool ~ v =P =­ 
presentation Figure 1. The structure of a Z&#38;g document. a call to an external tool: e.g., a data 
series can be passed to a charting program in order to obtain a well formatted chart. This mechanism 
accounts for a set of processing functions already available in commercial packages (spreadsheets, simulation 
programs, graphic packages, etc.) through a set of filters for importing and exporting documents and 
data. In general, the visualization of an object consists in the application of a set of transformations 
that, starting from the current object content, compute or select the desired content and build a specific 
concrete representa­tion. The visualization of a compound object consists in the activation of the visualization 
of the subordinate components, in a recursive way. The user interface is defined through the view com­ponents, 
that encapsulate the machine dependent issues from the concrete objects attributes. They manage the results 
of internal and external presentation transfor­mations, and build the views on composite object by col­lecting 
the views of the basic components objects. Finally, the user profile component stores informa­tion about 
the user characteristics such as the expertise, the language, the authorization level, the access goals, 
and so on. It is used during system operation to select the subset of possible presentations tailored 
to the user needs. 5.1. The object oriented model definition Each component described above is formally 
described by one or more classes, organized into a multiple inher­itance hierarchy to factorize common 
properties and make explicit the interfaces. The most important classes are described here. The reader 
is referred to [10] for a complete description of the model. Data objects and presentations The Dati 
Object class subsumes the classes that define the primary document structure. It is split in the follow­ing 
two classes: the Basic Logicnl Object class, which contains a set of contents, each represented as an 
instance of the Content class. Since, in general, the same informa­tion could be represented by using 
representations belonging to different types, a Basic Logical Object could contain Contents of different 
types. the Compasite Object class, which represents struc­tural relationships among subordinated data 
ob­jects. The structuring mechanisms which can be used to define the document structure are those de­fined 
by the ODA model. Each composite object has a list of plausible presentations, described by means of 
auxiliary classes that will not be detailed here. The Presentation Object class contains methods to draw 
textual or graphic shapes. For example, a Presentation Object class could contain the set of algo­rithms 
needed to draw a bar chart by using suitable axes, legends an title, defined as class attributes. A set 
of compatible presentations for a composite ob­ject is grouped into an instance of the Alternative Presentation 
class. Namely, the Alternative Presentatwn class has a set of attributes that are used to select t a 
suitable presentation according to the user profile. Transformations The Transformation class contains 
methods that pro­ duce different presentations of the same information. This class is decomposed in the 
following classes: The Content Transformation class, defining meth­ods that can be applied to a specific 
content (i.e., to an instance of the Content class) in order to trans­form it (i.e., to build or select 
another instance of the Content class). A Content Transformatwn class can be implemented by one of the 
following sub­classes the Algorithm Tramformation class, which im­plements the rules for content conversion. 
This class defines, for example, the methods that ef­fect a projection of columns or a selection of rows 
in a data table, or execute a statistical analysis in a numerical data series; the Link Transformation 
class, which emulates a lzvmsformation that is not implemented by an algorithm because it is trivial 
or too complex. A Link Transformation instance is a typed link connecting pairs of Content instances. 
For ex­ample, a text component can be linked to an­other text component that represent its ab­stract 
 The Presentation Transformation class, which con­tains the definition of the relationships holding be­tween 
a basic object content and a specific presenta­tion, described by an instance of the Presentation Object 
class. This class includes, for example, methods that produce a bar chart or a pie chart, starting from 
a numerical data series, draw a graphic starting fkom a mathematical function, ex­tract keywords iiom 
a textual paragraph. views The View Object and the Compound View objects encap­sulate presentation dependent 
issues. As far as the portability issue is concerned, the only classes that need to be heavily modified 
are these ones. In particul= the View Object class is in charge of displaying an object onto a screen 
region. Such class is further de­composed in the following subclasses: the Internal View class, which 
defines the methods for displaying a presentation object in a window, and  the External View class, 
which stores the statements needed to interface the Zelig envi­ronment t.a an external tool.  the Compound 
View class is in charge of displaying a presen-tation of a composite object in a window. In general, 
Compound View is a window containing the sequenca of the internal views related to the presen­tation 
objects involved. 5.2. An operational definition of the model The Zelig document model involves the management 
of many classes. To express the way in which these entities are related in Figure 2 the Schema Definition 
Set (SDS) model is reported. SDS is the PCTE [111 compliant rep­ resentation of an E-R-A (Entity-Relationship-Attribute) 
diagram, able to characterize the various model classes and their interrelationships. In the following, 
only the most interesting aspects of the SDS representation are illustrated. For a throughout description 
the reader is addressed to [10]. The classes of the Zelig model are represented in Figure 2 by objects, 
and the interrelationships between them are expressed by means ofreltationships. Attributes allow for 
the specification of properties of both classes and links. A Zelig document is composed of a set of Data 
Objects, a set of User profiles, and a set of Alternative Presentationa. A document is linked by means 
of a com­ V_name .praaents ) compound View \ 1­1 View 47 fPClmIltl I E_V.name.ddelink Y ( I E_V_name 
External View +-l Figure 2. The SDS diagram by a box labelled with the category: c (composition), r 
diamond represent the link ~~%me{ L PIfesentation Object d position link to many Composite Objects, that 
are in turn constituted by other Composite and Basic Logical Objects. A composition link is used to connect 
the Basic Logical Object to its Contents and to model the applica­tion of Link Transformations. The Content 
object is linked to other Contents to model the execution of an AZgorithm !i%ansformation. The Content 
is also linked ta the Presentation Objects to model the application of presentation fiansforrnations. 
Each Presentation Ob@ct is linked by a reference link la the Internal View object representing the window 
that visualizes it. A link is also used to model the call to an external tool, that could be invoked 
in order to visualize the object. The User Profile object represents the categories of users established 
by the document author. Each profile C_name.L_Tv ~ I 1~ I [Tvoeb -.r of the ZeZig classes. The following 
graphical conventions has been used object name. A link is represented by a triangle, labelled with a 
letter (reference) or i (implicit). A relationship is represented by a diamond. The components 1 4 an 
object is shown showing the link two halves of the type for that direction of the relationship. The link 
names are shown near each side of the diamond. The cardinality of a link type is shown by the type of 
arrowhead cardinality one link, and a double one for cardinality many. The attributes representing the 
relationships, or near the boxes representing the objects. terminating are shown the line: by labelled 
a single arrowhead for a ovals near the diamonds 68 Figure 3. The dialog window Set IZEUG USER%PROFILE 
m file ~ser Profile Qutiine ~Icw ~ndow ~elp USER PROFILE IAvaifabdeEEEiiEl .Pm&#38;s displays the list 
of the available user f%;tide%~ Ganarit_Eag!uh_R eadef profiles with the Author_cd.docummt I,The ZELIG 
woiesf Sasan.sludsnr I ,, Abstract description of the Introduction selected profile. I Related Work Im 
Standard of document structuring Multipls-presentation approaches This PM&#38; is mtor[ad to m Eqrart 
uxar with :+ The Zelig semantic document model Figure 4. The document and user profile setting. The outline 
view is displayed with no folded items.  II I has a name attribute that identifies it, and a list of 
at-6. THE USER INTERFACE tributes, that is pairs (key, value) identifying the main characteristics of 
the user. A set of such characteristics In this Section a sample of the Zelig user interface pro­can 
be the language, the level of expertise, the reason totype implementation are illustrated. The prototype 
or accesses implements the environment. why he she the document. consultation Analogously the Alternative 
presentation object has a When the user selects and opens a multiple presenta­set of attributes in the 
same form (key, value), identi~­ tion document the Zelig system displays the Set USER ing the characteristics 
of the presentation (e.g., the de-PROFILE dialog box (Figure 3). This dialog box allows tail level, the 
language, and so on). Two relationships to selector change the active User Refile from the au­are created 
between the User Profile object and the thor s defined list. Each user profile is identified by a Alternative 
Presentation object by means of reference name and it has an associated description that explains links. 
They identi~ which presentations are allowed for the distinguishing features of the user. a particular 
user profile, and which users are able to Once a specific user profile has been chosen, Zelig choose 
a particular presentation. The default presenta­ computes and displays the outline of the document ac­tion 
is singled out by means of the default attribute. cording to the chosen user profile (Figure 4). The 
inden-When the user accesses a Composite Object a default tation of the outline items reflects the ODA-like 
tree presentation, chosen according to the user profile, is vi­ structure of the composite objects in 
the document. The sualized in a Compound View. It is obtained by arrang­ items that have subordinate 
ones can be folded or ex­ing in a window the Internal Views in charge of visualiz­ panded with a double-click 
to facilitate overview of com­ing the Presentation Object relative to the component ob­ plex structures. 
The outline constitutes the main navi­jects. The user can interact with the Compound View gation tool 
of the Zelig user interface: by clicking on the and select (if available) another authorized Alternative 
Explode View button the user can ask for the display of Presentation, which can substitute the current 
one or the default presentation of the current selected item. can be dieplayed in a new window. Since 
the Zelig user interface has been developed ac- J1 Vtswer Outline as an Indented List z Visw The ZEUG 
projed Pres: E.gfiah Presentation 1 dosumcnt Utfe ~ View Introdudion Res: Engfish Presentation 1 introdudion 
title Visw Introdudion Pr ~ View Related Work Pres: Engfish Presentation 1 title shapter 2 ntiwabftithttb 
Sa5ksssWork Frca: English presentation 1 titfe Sf VISW Related shapter dkscapdspsadstrsmtk s!saytkti 
+ ls~. Warsat ,;:~Aism ~ Related Work tre tofdhl ditksnt Wa15. rbs VISW The ZEUG ro est R &#38;~__$YY 
* !, -*a = = @WS=*S. --­ ,k.tik.:TA dzrtiyL7L-_T ~tms. dtaakwtidmtitife .htkwa Figure 6. Many Compound 
Views wea &#38;* twodsmatimd SImdadaicnted totks Minidsa d ;$ me zE~~G Bosih ?Srrsa.Asw~ E-6. 1 ~~e:-m=m~~~~rtid&#38;~ 
associated h different Compound c a Slwitaw Systsmsakicb *S thsNaisls sr*Ssat4a isas Objects are displayed 
here. The caption of each window shows the title of the Standard of document strut selected item and 
presentation. The lathkfacdm wei8cmastk Oflice Dscsmdkkitschrc &#38;v Tindo@ pull-down menu shows the 
(ODA) ad the Wsdard Gydized ldsrb LaISMSS ($GML] yZelig ! +! I 1+ list of the caption titles of all the 
MDI child windows. ..- Figure 6. The user has selected from the outline two different presentations of 
the Abstract composite object. The Change Presentatwn dialog shows the list of the available presentations. 
Figure 7. The user has launched an External View. In this example the server tool is Microsoft Excel; 
Zelig has initiated it, poked data and requested the execution of remote commands to generate a table 
of data, compute totals and build a pie chart as the presentation of the table summary. cording to the 
standard interaction mechanisms pro­ vided by MS-Windows (i.e., the MDI specification), sev­ eral different 
child windows can be simultaneously visu­ alized, iconised and arranged to get personalized pre­ sentations 
of the document s objects. Each Compound Object presentation is visualized in a different scrollahle 
window, where the different presentations of the com­pound object components are sequentially drawn @ 
imme 5). . The application menu bar is personalized on the ac­tive MDI child window by using it the 
user can ask the Zelig system to change the current presentation (Figure 6). The Change Presentation 
dialog box shows the list of the available alternative presentations of the selected compound object, 
which are picked according to the cur­rent user profile. The dialog box allows the user to change the 
presentation by computing a new Compound view. A special kind of view handles the execution of exter­nal 
programs. By clicking on the button Launch External View (Figure 7) the user requests, via a DDE script, 
the execution of an external tool, that will display the object content. In this case, following the 
DDE notation, the Zelig system plays the role of the client, while the external tool plays the role of 
the server. 7. THE EXPERIMENTAL ENVIRONMENT A prototype implementation of the Z&#38;g document man­agement 
system has been carried on as part of the Master Course in the OffIce Automation area of CEFRIEL2 with 
the partnership of Bull. The project will take two yearx in the current year the implementation concerned 
the general framework of the document model and the definition of the user-inter­face. In the next year 
the activities will be focused on the development of the envisioned cooperative environ­ment. The implementation 
has been based on the Borland C++ 3.0 development environment, running under the MS-Windows 3.0 graphical 
environment on a 386-based hardware platform. In particular, the ObjectWindows tool has been heavily 
used. It enables the programmer to develop MS-Windows applications that follow the C++ flavor. 8. CONCLUSIONS 
AND FUTURE WORK The paper proposed an approach to the definition of a document management system oriented 
to the support of cooperative activities based on multiple-presentation documents. In our view, multiple-presentation 
means that the informative content of a document can be pre­sented to the reader by using different shapes, 
styles end levels of detail, according to the reader profile. The ZeZig document management system is 
based on the def­inition of an only conceptual (i.e. abstract) document, which is mapped to several concrete 
documents, each used to fulfil a different communication goal. The main guidelines pursued in the design 
of the Zelig document model have been the extensibility and the openness issues. In fact, thanks to the 
object-or­iented approach the document model results extendible. On the other hand, the document model 
has been in­spired by existing standards (i.e. ODL DDE, OLE) in order to obtain an open implementation 
approach that can be applied to different class of applications (i.e. tu­toring, cooperative work activities) 
which can benefit of multiple-presentation capabilities. A prototype of the Zelig system has been developed 
by exploiting the capabilities offered by the Borland C++ development environment, running under the 
MS-Windows graphical environment. Following an evolutionary approach, further research activities will 
address the following topics definition and implementation of an authoring sys­tem to support the author 
of a multiple­presentation document in the choice of the most appropriate set of presentations. For each 
defined user profile, smart agents should assist the author in reducing the cost of the evaluation of 
the applicable transformations by pruning the presentation tree on a semantic basis;  integration of 
the existing Zelig system and of the foreseen authoring tool within a comprehensive groupware support 
environment where shared views and different simultaneous user profiles are supported [12];  CEFRIEL 
is an educational and research institute sponsored by Universities, Public Administration and Industries 
in the Information Technology Area. extension of the multimedia features of the Zelig document model; 
 reinforcement of the open approach by evolving to­wards a client-server architecture considering a UIW2Gbased 
machine as the server and a set of MS­Windows-based machines as clients. This heteroge­neous architecture 
should give us a more reliable basis for the management of the groupware envi­ronment experimental evaluation 
of the complete document management system in specific ~pplication do­mains. Namely, we are interested 
in the evaluation of the system to support teaching activities [13]. REFERENCES <RefA>1 Microsoft. Corporation, 
Extensible Application Protocols: Object Linking and Embedding , Technical Report, December 1992. 2 J. 
A. Davis, HPs of%ce strategy extending NewWave beyond the desktop , Oflice Computing Review, vol. 13, 
no 6, June 1990. 3 L. Brown, CMU s Andrew project: a prototype for distributed, object-oriented computing 
, Office Computing Review, vol. 4, n 4, April 1989. 4 S.C. Shapiro, Encyclopedia of Artificial Intelligence 
,voice Computer-Aided Instruction, Intelligent , pag. 154-159, Addison-Wesley, 1990. 5 B.A. Meyers. Incense: 
a system for displaying data stmctures , Computer Graphics, 17(3), 1983. 6 P. Jackson. What Lotus did 
NeXT (Lotus Development Improv Spreadsheet Software) . PC User, 145, 1990. 7 M. Young, R. Taylor, D. 
Troup, and C. Kelyl, Design Principles Behind Chiron: a UIMS for Sofiware Environments , In Roe. 10th 
IEEE Int. Conf. on SW Engineering, 1988. 8 R. Hunter, P. Kaijser, and F. Nielsen, ODA a document architecture 
for open systems , Computer Communication, 12(2), 1989. 9 T. Korson, and J.D. McGregor, Understanding 
Object-Oriented: A Unifying Paradigm , Communications of the ACM, 33(9), 1990. 10 R. Perron, A. Ricciardi 
and D. Stipic, The Zelig projeck design of a Multiple-Presentation Document Environment , CEFRIEL Internal 
Report, June 1992. 11 G. Boudier et alii, An Overview of PCTE and PCTE+ , Proc. of Third ACM Symposium 
on Software Development Environment, Boston 1988. 12 C.A. Ellis, S.J. Gibbs, and G.L. Rein. Groupware: 
some issues and experiences , Communications of the ACM, 34(l), 1991. 13 G. Hardy, V. Hodgson, D. McConnell, 
and M. Reynolds, Computer Mediated Communication for Management Training and Development: a Research 
Report , CSML, Lancaster University, UK, 1991.</RefA>  
			
