
 Algorithms for Diametral Pairs and Convex Hulls that are Optimal, Randomized, and Incremental Kenneth 
L. Clarkson and Peter W. Shot AT&#38;T Bell Laboratories Murray Hill, New Jersey 07974  Abstract We 
give a simple algorithmic technique for building geometric structures. The technique is randomized and 
incremental. As an application, we give an algo- rithn~ of this kind for computing the intersection of 
a set of halfspaces in three dimensions. (This inter- section problem is linear-time equivalent to the 
com- putation of the convex hull of a point set.) The al- gorithm requires O(n log n) expected time, 
where the expectation is over the random behavior of the al- gorithm. A similar algorithm can be used 
to deter- mine the intersection of a set of unit balls in E 3, the problem of spherical intersection. 
This problem arises in the computation of the diameter of a point set in E 3. For a set S of n points, 
the diameter of S is the greatest distance between two points in S. We give a randomized reduction from 
the problem of de- termining the diameter to the problem of computing spherical intersections, resulting 
in a Las Vegas algo- rithm for the diameter requiring O(n log n) expected time. The best algorithms previously 
known for this problem have worst-case time bounds no better than O(nx/~ log n)[Agg]. 1 Introduction 
1.1 The problems and results One simple and obvious way of building a geometric structure, such as the 
intersection of a set of half- Permission to copy without fee all or part of this material is granted 
provided that the copies are not made or distributed for direct com- mercial advantage, the ACM copyright 
notice and the title of the publication and its date appear, and notice is given that copying is by permission 
of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or 
specific permission. &#38;#169; 1988 ACM 0-89791-270-5/88/0006/0012 $1.50 spaces, is to determine the 
structure incrementally, adding the halfspaces one by one and maintaining the resulting intersection. 
Such an incremental approach gives an opti-mal algorithm for constructing an arrangement of hyperplanes[EOS86]. 
In general, we have a set of ob- jects, not necessarily halfspaces or hyperplanes, that determine a structure, 
and we add the objects one by one, maintaining the resulting structure. One variant of this incremental 
approach, a simple way to ran-domize the process, is to add the objects in random order. Chew[Che86] 
used this approach for building Voronoi diagrams of the vertices of convex polygons. In this paper, we 
prove a general theorem regarding a version of this randomized and incremental tech- nique. We should 
note that although our technique is incremental, it is not online, as some simple infor- mation is maintained 
for the objects that are not yet added. Our results assume some noridegeneracy con- ditions for convenience; 
for example, we assume that input point sets in E 3 have no four points coplanar. Our general theorem 
should have many applica-tions, as discussed briefly in §5. We will consider here two applications, for 
geometric problems set in three dimensions. As one of these applications, we show that our ap- proach 
gives an optimal Las Vegas algorithm for corh- puting the convex hull of a set of points in E 3. The 
algorithm can be viewed as a variant of the "beneath- beyond" method. [Ede87] The divide-and-conquer 
al- gtJrithm of Preparata and Hong [PH77] yields the con- vex hull of a set of n points in E 3 in optimal 
O(n log n) time, in the worst case. While our algorithm does not give an improvement in asymptotic complexity, 
it is simpler ~han the divide-and-conquer algorithm. Our cow,vex hull algorithm will be presented as 
an algorithm far an equivalent problem, that of deter- mining the intersection of a set of halfspaces. 
As another application of our randomized incremental tech~,.[que, we will also show that the intersection 
of 12 a set of unit balls in E 3 can be computed in a similar way. Such an intersection of unit balls, 
or of balls of some given common radius, will be called a spherical intersection. In general, given S 
C E d, the r-spherical intersection of S, or It(S), is the intersection of the closed balls of radius 
r that have centers at the sites of S. Spherical intersections have many properties in common with convex 
polytopes, which are the inter- sections of sets of closed halfspaces. Like polytopes, spherical intersections 
are convex, and have vertices, edges, and faces, that in E 3 naturally define a planar graph. That graph 
has O(n) descriptive complexity [Hep56]. Like polytopes, spherical intersections have duals, which were 
introduced as a-hulls in [EKS83]. Unfortunately, spherical intersections do not share with convex polytopes 
some properties helpful for al- gorithms. In particular, the divide-and-conquer tech- nique of Preparata 
and Hong does not seem to lead to a fast algorithm for computing spherical intersections. Our simple 
algorithm for spherical intersections, re-quiring O(nlogn) expected time, is asymptotically faster than 
any previous algorithm. The spherical intersection problem arises in a clas- sic problem of computational 
geometry, the diameter problem. Let S C E d contain n sites (points). The diameter Ds is the largest 
distance between a pair of sites in S. A diametral pair of S is a pair of points in S that realize the 
diameter. The problem of de- termining the diameter (and all diametral pairs) of a point set in the plane 
has long been known to re- quire O(nlogn) time [PS85]. In E 3, the number of diametral pairs of n sites 
is known to be O(n), as an easy consequence of the fact that the Ds-spherical intersection has O(n) descriptive 
complexity. This suggests that the diameter problem in E 3 should not be too much harder than for E 2. 
However, obtain- ing an algorithm for E 3 with complexity close to O(n log n) "has been a source of frustration 
to a great many workers" [PS85] in computational geometry. In this paper, we give a randomized algorithm 
requiring O(n log n) expected time. The best algorithms previ- ously known have worst-case time bounds 
no better than O(nx/~log n) [Agg]. The main idea for our diameter algorithm is a ran- domized reduction 
from the diameter problem to the spherical intersection problem. 1.2 Contents of the paper In §2, the 
diameter problem is reduced to a series of spherical intersection problems, using a simple ran-domizing 
procedure. In §3, incremental procedures are given for convex hulls and for spherical intersec- tions. 
Modified versions of these algorithms, requir- ing O(n) space in the worst case, are also given. A time 
bound for a quite general version of these proce- dures is proven in §4. Some concluding remarks are 
made in §5. 2 The diameter problem In this section, we give a reduction from the diameter problem to 
the spherical intersection problem. The idea is this: Let Dp denote the farthest dis- tance from point 
pto asite in S. Let r = Dp for some p E S. Any point q E S that is in the interior of It(S) is closer 
than DB to all points in S. The point q has Dq < Dp < Ds, and so q is not in any diametral pair. On the 
other hand, if q E S is outside IriS), then Ds > Dq > Dp. Thus, if there are no points of S outside It(S), 
then Ds = Dp, and if there are any such points, only those points can possibly be in diametral pairs. 
Suppose the points of S could be listed in nonde- creasing order of their Dp values. Then if a point 
p E S is chosen at random, with probability 1In its rank in that list is k, for 1 < k < n, so that at 
most k -1 points of S need be considered in any further computation of the diameter. Suppose I~(S) can 
be computed in O(n log n) time, and also O(n log n) time suffices to determine the points of S outside 
IT(S). Then tn expected time suffices to determine the di- ameter of S, where t. < log n) + tk/n. l<k<n 
 It is readily verified that tn =-O(n log n). In §3, it is shown that It(S) can be computed in O(nlogn) 
expected time. The set S \ It(S) can be computed in O(n log n) time, using an algorithm for point location 
in a planar subdivision[PS85]. To do this, define a "stereographic projection" for .r~(S) as follows: 
pick a point p on the boundary of I~(S), and a sphere Z determining the face of IT(S) containing p. Let 
p~ be the point antipodal to p on Z, and H the tangent to Z at p'. Define a function F(x) from E 3 to 
H, by mapping a point x to the intersection point with H of the ray from p passing through x. The set 
of points that are the image under F of the edges of I~(S) naturally induce a subdivision of H. Now in 
O(nlog n) time, build a data structure for deter- mining the location of a point on that subdivision. 
For each point s E S, determine in O(logn) time the location of F(s). The region of the subdivision that 
contains s' = F(s) corresponds to a face of Ir(S), and s is in IT(S) if and only if the line segment 
~ does not pass through the boundary of that face. 3 Convex hulls and spherical in- tersections 3.1 
The algorithms In this section, we give an algorithm for computing the convex hull of a set of sites 
in E a, or equivalently, of determining the intersection P(S) of a set S of n halfspaces in E 3. The 
necessary modifications to compute spherical intersections are then shown. The halfspace intersection 
algorithm is randomized and incremental. It adds the halfspaces one by one in random order to a set R, 
maintaining P (R) as each halfspace is added. The incidence graph of P(R) is maintained (see e.g. [Ede87, 
§8.2]), giving the inci- dence relations between the vertices, edges, and faces of P (R). To make the 
algorithm faster, some additional in- formation is used: a conflict graph is maintained, whid~ is a bipartite 
graph on the halfspaces of S and the edges of P (R), with a graph edge between a half- space H E S and 
an edge e E P(R) when e is not contained in H. This graph can be represented as linked lists of conflicts, 
with LH the edges of P (R) not contained in H, and with a similar list L¢ for each edge e of P (R). In 
the general step of the algorithm, a halfspace H is added to R, making the new set R t = R O (H}. At 
this step, the edges of P(R) that are retained in P(R') are exactly those not in LH. Some edges in LH 
have both vertices not in H. Such edges can be discarded. The remaining edges in LH are cut by the bounding 
plane of H. A face F of P(R) that is cut by the bounding plane of H is incident to two such edges el 
and e 2. Such a face gives rise to a new face F ~ of P(Rt), bounded by edges not in LH, and by new edges 
e~ = e: N H, e~ = e2 N H, and e12, which is the intersection of F with the bounding plane of H. The edge 
c12 is also incident to the face of P(R') that is the intersection of P (R) with the bounding plane of 
H. Thus the polytope P(Rt), and its incidence graph, is obtainable in time proportional to the number 
of edges in LH. It is easy to see that the halfspaces in the conflict lists for three edges e~, e~ and 
e:2 are contained in the conflict lists of el and e2. (Any halfspace that contains these two edges also 
contains their convex hull, which includes the new edges.) These lists are searched to find the conflict 
lists for the three new edges. The conflict lists of all new edges in P (R) are found in this way. This 
is the entire algorithm, assuming appropri- ate initialization. A moment's thought shows that when adding 
a halfspace H E S, the work performed l// V Figure 1: A vertex v and a point p on new edge e. is proportional 
to the total number of halfspaces in the conflict lists of the edges in the conflict list of H. The motivation 
for the algorithm is that when adding the rth halfspace, the expected number of such half- spaces is 
O(n#), so the expected work overall is O(n El<r_<n X/r) = O(nlogn). The algorithm for spherical intersection 
is very much the same, except that instead of adding half- spaces one by one, we add closed balls of 
a given ra- dius. The geometric fact necessary to the correctness of this algorithm is given in the following 
lemma. Lemma 3.1 In the spherical intersection algorithm, the balls in the conflict lists of the three 
new edges bounding a face are contained in the conflict lists of the deleted edges bounding that face. 
Proof. Suppose the edges involved are on an old face F and a new face F', with B the newly added ball, 
so that F' = F n B. Two of the new edges are subsets of deleted edges, so it is only necessary to show 
the containment for the new edge e that is con- tained in the intersection of F and the sphere bound- 
ing B. The lemma is proven using the following fact: for points x, y on a unit sphere, if point z is 
no farther than 1 from x and y, then z is no farther than 1 from all points on the great circle arc connecting 
x and y. This fact is easily proven. Now suppose v is a vertex of a deleted edge, where v is also a vertex 
of a new edge, so v is within B. (See Figure 1.) For a point p on e, the great circle arc between p and 
v is contained in F t, using the geomet: ic fact. If this arc is continued past p, it will reach a ]?oint 
ff on a deleted edge. Again using the geometric fact, any ball that contains v and p' will contain p. 
Thus if p is outside any ball, then either v or p' is, and that ball is on the conflict list for the 
edge containing v or the edge containing ft. D 14 3.2 Variants using linear space The following section 
shows that the algorithms we have given require O(n log n) expected time. Before this analysis, we consider 
the space used by the al- gorithms, and give variants of our algorithms. The variants require O(n) space 
in the worst case, with the same time bound as the original algorithms. For convenience, the discussion 
will focus on halfspace in- tersections, although the same ideas apply to spheri- cal intersections. 
How much space can our halfspace intersection al- gorithm require? Certainly no more space than time, 
so O(nlogn) expected space follows from our time bound. Can we do better than this? It would seem that 
we can: as part of the time analysis below, it is shown that at any given step, the expected size of 
the conflict graph is O(n). Thus it would seem that no more than O(n) space is expected overall. How-ever, 
this is only an expectation, and furthermore, we are considering the space used not just at any given 
step, but throughout the algorithm. Indeed, it can be shown that our algorithm requires f~(nloglogn) 
expected space. It is an interesting open question whether this bound is tight. However, a simple vari- 
ant of our algorithm has a worst-case space bound of O(n), so the question is not as pressing as it might 
be. The variant is as follows: rather than maintain the entire conflict graph, it is enough to maintain, 
for each halfspace H not yet added, a single edge C(H) with which it conflicts. When adding H, we can 
quickly determine all the edges with which it conflicts, by searching the edges of the .P(R) starting 
at C(H). (Note that the set of conflicting edges gives a con-nected subgraph of the 1-skeleton of P(R).) 
By our nondegeneracy assumption, each vertex of the poly- tope is incident to three edges, so this searching 
re- quires constant time per conflicting edge. This variant has a slightly different update prob- lem: 
suppose a halfspace H is to be added, after which edge e will no longer be present in the inter- section. 
If e = C(H r) for some halfspace H r, we must find some edge d in P (R ~) that conflicts with H ~. To 
do this, we search the edges of P(R) starting at e, maintaining the condition that the edges we exam- 
ine conflict with H ~. At some point, we find an edge that conflicts with H' and also either does not 
conflict with H, or is cut by the bounding plane of H. In the former case, we have an edge of P(R t) 
that conflicts with H', and we can reset C(H~). In the latter case, we are led to an edge of P(R p) that 
is not in P(R), and that may conflict with H ~. If the new edge con- flicts, we are done. Otherwise, 
we continue searching the edges that conflict with H'. If we never find an edge of P(R t) that conflicts 
with H ', we may ignore H t in later processing. Otherwise, we have updated C(H~), and have done no more 
work than the original algorithm. 4 Randomized incremental con-struction In this section, we give a generalized 
framework for our convex hull and spherical intersection algorithms, and prove an expected-time bound 
for algorithms within that framework. The O(n log n) expected time for our algorithms will then follow 
readily. The algorithmic technique we describe will be called randomized incremental construction. The 
for- mal framework will follow that in [Cla88], summa-rized as follows: let S be a set of n subsets of 
E d, called objects, and let ~" be another collection of sub- sets of E d, called regions. The objects 
"define" the regions in some way, which we formalize as a relation 5 between 7 and Ui<jS i, where b is 
an integer pa- rameter of an application. An i-tuple X E S i defines F E .7 if and only if FSX, that 
is, (F, X) is in the re- lation 5. The set of all regions defined by the objects in S is denoted ~'s. 
The set ~ is that of all F E .Ts such that F has nonempty intersection with j objects of S. The construction 
problem associated with an instance of this framework is to determine, given an input set S, the set 
~'~ of empty regions. In the halfspace intersection algorithm, the objects are the complements of the 
halfspaces, and the re-gions are the edges of the intersections, with b = 4. A randomized incremental 
construction algorithm solves this problem as follows: the objects in S are added one by one in random 
order to a set R. As these objects are added, the regions S~ are maintained, and updated as each object 
is added. To make this algo- rithm faster, a conflict graph is maintained between the objects in S \ 
R and the regions in ~'R °. This graph has an edge between each object and region that have nonempty 
intersection, so that the object prevents the region from being in ~'~. When an ob- ject s is added to 
R, the regions adjacent to s in the conflict graph are deleted from ~'~, and new regions are added that 
result from the presence of s. The following theorem gives a time bound for instances of this general 
algorithm in which an update condition holds. The update condition is this: the time to add a point s 
to R, and to update ~'~ and the conflict graph, is linearly proportional to the number of ob- jects that 
conflict with regions that conflict with s. Plainly, the update time is at least as long as this. In 
many instances, this linear time suffices. To :prove the theorem, we will need to make a non- degeneracy 
assumption, that the relation (5 is a func- tion up to permutation: that is, for any F E 3rs, there is 
an/-element subset TF C S such that F E JrR for R C S if and only if TF C R. For halfspace inter- sections, 
this is implied by the assumption that the bounding planes of the halfspaces are nondegenerate, that 
is, no four intersect at a common point. Theorem 4.1 Randomized incremental con-struction. In ann instance 
of the general incremental construction algorithm, suppose the update and non- degeneracy conditions 
hold. Suppose that there is a nondecreasing function m(r) so that for R a random subset of S of size 
r, m(r) > E[I~RI ]. Then the ex-pected time required by the instance is within a con- stant factor of 
m(n) + n ~l<j<n/2 re(r)~ r2" Proof. For r < n/2, we will show that the expected time required to add 
object s E S to a subset R of size r is proportional to (n/r)2/(n -r)m(r). Thus to add objects up to 
r ~ n/2, the expected time required is proportional to n El<r<_n/2 re(r)~ r2" For r > n/2, we will show 
that the time required to add an object is proportional to m(r)/n, so that re(n) bounds the expected 
time to add all the objects for n/2 < r < n. This gives the desired bound. The proof is very similar 
to the proof of Theo- rem 3.2 of [Cla88], to which the reader is referred for background and notation. 
By the update condition, the time required is pro- portional to E jIF, j>O   FEY~ where IF = 1 when 
F E 3r~ meets s, and IF = 0 otherwise. The expected value of this quantity is Z jProb{F e ~, s e F}, 
j>0 fe~ or j2 Prob{F e ~R} E n--r j>_0  FeTE The result now follows for r _< n/2, since from Theo- 
rem 3.2 of [Cla88], this quantity is E[T~(R)]/(n -r) <_ 2E[T~(R)I/n, where w(j) = j~. Now the case r 
> n/2. As in the proof of Theo- rem 3.2 of [Cla88], we can assume that the relation ~f is defined only 
for X E S b, and not for X E S i with i < b. Application of the proof b times then gives the general 
result. We know that because (5 is a function up to permu- tation, the last sum above is no more than 
~2 j_>o where p(j; n, r, b) ,-j-b= ( r-b ) / (r)" This is ~2 i_>o where rj = [(r -b)/(j + 1)J + b and 
pj = pj(n, r, b)/pj(n, rj, b). We have re(r) > m(ry) > E[17~jl]_> pAn, ry,b)lT~l, where Rj C S is random 
and IRjl = rj, and it is easy to show that Pi <- 0(1)(1 + j)b+l/2 ( n -- r ~ 3, \n-ril as r ~ ce. Plugging 
in these two upper bounds, the expected work to add s is no more than ( rO(m(r))(1 + _ n-\n-r1/ which 
is no more than O(m(T)) .=[_ j)b+I/2 ( n--r ~j-1 5-" i~o_ \ n -r y / The bound O(m(n)In) follows by 
noting that the sum converges to a constant. This implies that the time to add all the objects, for n/2 
< r <_ n, is O(m(n)), and the theorem follows. 13  5 Concluding remarks The randomized incremental construction 
technique may well see many other applications. In [Cla88], it is used to obtain an optimal algorithm 
for line segment intersection. It readily extends to obtain optimal al- gorithms for convex hulls in 
higher dimensions, and for Yoronoi diagrams of line segments in the plane. References <RefA>[Aggl [Che86] 
[ClaSS] [Ede87] [EKS83] [EOS861 [Hep56] [PH77] [PS85] A. Aggarrwal. personal communication. L. P. Chew. 
Building Voronoi diagrams for convex polygons in linear expected time. un- published manuscript, 1986. 
K. L. Clarkson. Random sampling in com- putational geometry, II. This proceedings, 1988. H. Edelsbrunner. 
Algorithms in Combinato- rial Geometry. Springer-Verlag, New York, 1987. H. Edelsbrunner, D. G. Kirkpatrick, 
and R. Seidel. On the shape of a set of points in the plane. IEEE Trans. Inform. Theory, IT-29:551-559, 
1983. H. Edelsbrunner, J. O'Rourke, and R. Sei- del. Constructing arrangements of lines and hyperplanes 
with applications. SIAM Jour- nal on Computing, 15:341-363, 1986. A. Heppes. Beweis einer Vermutung von 
A. V£zsonyi. Acta Math. Acad. Sci. Hungar., 7:463-466, 1956. F. P. Preparata and S. J. Hong. Convex hulls 
of finite sets of points in two and three dimensions. Communications off the ACM, 20:87-93, 1977. F. 
P. Preparata and M. I. Shamos. Com-putational Geometry: An Introduction. Springer-Verlag, New York, 1985</RefA>. 
  
			
