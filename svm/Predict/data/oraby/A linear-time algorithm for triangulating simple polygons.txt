
 A Linear-Time Algorithm for Triangulating Simple Polygons Robert E. Tarjan Department of Computer Science 
Princeton University Princeton, New Jersey 08544 and AT&#38;T Bell Laboratories Murray Hill, New Jersey 
07974 Christopher J. Van Wyk AT&#38;T Bell Laboratories Murray Hill, New Jersey 07974 ABSTRACT A simple 
polygon with n vertices is triangulated by adding to it n-3 line segments between its vertices that partition 
the interior of the polygon into triangles. We present an algorithm for triangulating a simple polygon 
in time proportional to its size. This result has a number of applications in computational geometry. 
 Introduction A simple polygon with n vertices is triangulated by adding to it n-3 line segments between 
its vertices to partition the interior of the polygon into triangles. We show how to triangulate a simple 
polygon in O (n) time. The result relies on the linear-time equivalence of tri- angulation and the problem 
of computing visibility infor- mation [6]. The algorithm uses divide-and-conquer, recursive finger search 
trees [1, 12, 14], and a variation of Jordan sorting [10,11]. Since Garey, Johnson, Preparata, and Tarjan 
gave an O(n log n) algorithm for triangulation [7], work on this problem has proceeded in two directions. 
Some authors have presented linear-time algorithms for triangu- lating special classes of polygons such 
as monotone polygons [6] and star-shaped polygons [18]. Other authors have given triangulation algorithms 
whose com- plexity is of the form O(n log k), where k is a property of the polygon such as the number 
of reflex angles [9] or its sinuosity [3]. Since there exist classes of polygons with k -Ill(n), however, 
the worst-case performance of these algorithms is still O(n log n). Deciding whether Permission to copy 
without fee all or part of this material is granted provided that the-copies are not made or distributed 
for direct commercial advantage, the ACM copyright notice and the title of the publication and its date 
appear, and notice is given that copying is by permission of the Association for Computing Machinery. 
To copy otherwise, or to republish, requires a fee and/or specific permission. &#38;#169; 1986 ACM 0-89791-193-8/86/0500/0380 
$00.75 there is an O(n)-time algorithm has boon one of the foremost open problems in computational geometry. 
Fournier and Montuno have shown that computing a triangulation of a polygon is linear-time reducible 
to computing its internal horizontal edge-vertex visibility information [6]: given the edge or two edges 
internally visible from each vertex of a simple polygon, one can compute a triangulation of the polygon 
in linear time. They call the result of computing internal horizontal edge-vertex visibility information 
a trapezoidization of the polygon, because the horizontal line segments that connect each vertex to its 
internally visible edge or edges partition the interior of the polygon into trapezoids. Hoffman, Meblhorn, 
Rosenstiehl, and Tarjan [10, 11] have presented a linear-time algorithm for Jordan sorting: given k points 
at which the edges of a polygon intersect a horizontal line, in the order in which they are encountered 
in a traversal of the boundary of the polygon, sort them into the order in which they appear along the 
line. The output of Jordan sorting gives internal and external edge-edge visibility information along 
the given horizontal line. We show below that Jordan sorting is linear-time reducible to the computation 
of all edge-vertex and edge-edge visibility information. This implies that the triangulation problem 
is at least as hard as Jor- dan sorting, and suggests an approach to the triangulation problem: use Jordan 
sorting in a divide-and-conquer fashion. Our algorithm is a realization of this approach. 380  Sketch 
of the Algorithm The algorithm maintains a set V of polygons that are subpolygons of the input polygon 
P. The general step of the algorithm is to choose a polygon V from V and a horizontal line g through 
one of its vertices. (See Figure 1.) Then we traverse the boundary of V to find the points at which it 
crosses g, and divide V into pieces that lie above and below g. (There are six such pieces in Fig- ure 
1.) Next we use Jordan sorting to order the crossing points along t. Finally, we use the family trees 
produced by Jordan sorting to reconstruct smaller polygons (See Figures 5 and 6.), returning any smaller 
polygons that are not visibility trapezoids to V. The preceding outline yields a quadratic algorithm 
if implemented in the obvious way, because O (n) edges can be split O (n) times. The data structures 
used in the algorithm are designed to avoid splitting edges except when new visibility information will 
be obtained. Definitions Let the vertices of the polygon in order around the boundary be v 0, v 1 ..... 
v,-l. Assume without loss of generality that no two vertices have the same y-coordinate, and that v 0 
is the vertex with minimum y- coordinate. (See Figure 1.) For any point p, its x- and y-coordinates are 
denoted x (p) and y (p), respectively. For an edge e and a scalar Your, cutpoint (e,Ycut) is the point 
p on e such that y (P)-Ycut. The algorithm represents pieces of the polygon boundary using a kind of 
finger search tree [1, 12, 14] based on 2,4 trees. The path from the leftmost (right-most) leaf to the 
root is called the left (right) rib; nodes on the left and right ribs are called rib nodes. [All uses 
of the terms "left" and "right" in this paper refer to posi- tions in a tree, and not to locations in 
the plane.] An internal non-rib node contains pointers to its children, as in the usual 2,4 trees. However, 
a rib node contains pointers to its parent and to its children that are not rib nodes. Access to a finger 
search tree is through the inter- nal nodes that point to its leftmost and rightmost leaves. The root 
points only to its children that are not on either rib. Given the n leaves in order, a finger search 
tree can be constructed in O (n) time by inserting the leaves one at a time in order. To search in and 
split a finger search tree, proceed from both access points, using the search information in the nodes 
to find the splitting point. Then split the smaller tree off by splitting the nodes along the path from 
the nearest common ancestor of the access point and the splitting point to the splitting point. Update 
the search information along the ribs of the smaller tree and along the new rib of the larger tree below 
the nearest common ancestor of the access point and the splitting point. Updates to search information 
also propagate through splittings and fusings needed to maintain the 2,4 tree pro- perty. To find a point 
d away from one access point of a finger search tree with n leaves and split it into two finger search 
trees with d and n-d leaves requires amor- tized time O(log min{d,n-d}). A vertex tree is a finger search 
tree whose leaves contain the vertices of the polygon in the order in which they appear around the polygon 
boundary. The search information at an internal node p is the extreme (minimum and maximum) y-coordinates 
of the vertices at the leaves of the subtree rooted at p; this information is computed recursively as 
the extreme y-values of the search information in the nodes to which p points directly. (See Figure 2.) 
A boundary tree is a finger search tree such that a leaf contains a vertex tree or a boundary tree, together 
with the edge that precedes the leftmost vertex and the edge that follows the rightmost vertex in the 
boundary tree; the edge that precedes the leftmost vertex is called the early hook edge, and the edge 
that follows the right- most vertex is called the late hook edge. The search information at an internal 
node p is the extreme y-values and the leftmost and rightmost hook edges in the nodes to which p points; 
note that the y information pertains to the vertices at the frontier of the boundary tree, and does not 
include the hook edges. A level-1 boundary tree is a boundary tree whose sole leaf contains a vertex 
tree and hook edges. If the vertex tree is empty, then the early and late hook edges are the same edge, 
and the level-1 boundary tree is trivial. A level-1 boundary tree corresponds naturally to a polygonal 
path that is a subset of the polygon. We say a point is contained in a level-1 boundary tree if it lies 
on one of the edges in the corresponding polygonal path. When splitting a level-1 boundary tree at a 
point that it contains, the resulting two boundary tree, s depend on the location of the point. If the 
splitting point does not lie on the early or late hook edge, the split results in two trees, one containing 
the vertices that precede the splitting point on the polygonal path, and the other con- taining those 
that follow it; if the splitting point is a ver- tex, the vertex itself does not appear as a leaf in 
either resulting tree, but it is an endpoint of one hook edge of each of the resulting trees. If the 
splitting point lies on one of the hook edges, one of the resulting trees is trivial and contains just 
that hook edge, and the other resulting tree is identical to the original tree. There are two kinds of 
internal horizontal visibility information, to which we refer hereafter simply as "visi- bility information." 
An edge-vertex visible pair consists of a vertex and an edge that can be connected to the ver- tex by 
a horizontal line segment that lies entirely inside the polygon. An edge-edge visible pair consists of 
two edges that can be connected by a horizontal line segment that lies entirely inside the polygon. A 
visibility region is a simply-connected subset of the polygon interior that is bounded by pieces of the 
polygon boundary and two horizontal lines. It is represented by two scalars, Ymin and Ym~, and a circularly-linked 
list of boundary trees. A vertex (x,y) at the frontier of any of these boundary trees satisfies Ymin<Y~Ymax" 
(See Figure 3.) These boundary trees are of three possible types: top --neither hook edge intersects 
y-y rain; or bottom --neither hook edge intersects Y-Ymax; side --one hook edge crosses Y-Ymax and one 
crosses Y ~Y rain. The list of boundary trees is ordered so that the following set defines a simple polygon: 
line segments between adjacent vertices in any sin- gle vertex tree, the portion of all hook edges that 
lies between Y'Ymin and Y'Ymax, and horizontal line segments at Y-Ymi. or Y-Ymax between the adjacent 
hook edges of neighboring boundary trees. Thus the most general visibility region consists of a side 
boundary tree, a sequence of top boundary trees, another side boundary tree, and a sequence of bottom 
boundary trees. The horizontal segments drawn to complete the boundary of the region represent valid 
visibility informa- tion. A visibility cell is a visibility region that represents a visibility trapezoid. 
Any polygon vertices contained in a visibility cell lie on one of its horizontal edges. If a cell has 
only one boundary tree, then that is a top or bottom boundary tree that contains exactly one vertex, 
and the visibility trapezoid is a triangle. If a cell has side boun- dary trees, then they are trivial, 
and each of its top and bottom boundary trees contains at most one vertex that lies on y -Ymax or y -Ymin- 
 Prefiminary Results First we show that the total amount of visibility information is linear in the 
number of polygon vertices. Lemma. The number of edge-vertex and edge-edge visi- ble pairs in an n-gon 
is O (n). Proof Decompose the polygon into trapezoids by adding horizontal (vertex-edge) visibility segments 
at each ver-tex. (Some of the trapezoids may have a vertex in the middle of an edge.) Since each trapezoid 
contains at least one vertex, and a vertex is involved in at most three trapezoids, the number of trapezoids 
is at most 3n. Split each trapezoid into two by a horizontal line; now all edge-edge visibility information 
is also represented, and the number of trapezoids is still at most 6n. Each tra-pezoid represents at 
most three edge-vertex and edge-edge visible pairs, so the total amount of visibility infor- mation is 
at most 18n. The following theorem shows the intimate connec- tion between Jordan sorting and computing 
visibility information. Theorem. Given an algorithm for computing edge-vertex and edge-edge internal 
visibility information, one can compute the sorted order of the points of intersection of the polygon 
with a horizontal line using linear extra time beyond the time used by the given visibility computation. 
Proof The idea is to compute horizontal visibilities for both the interior and the exterior of the polygon. 
First, compute internal horizontal visibility information for the polygon. To compute the external horizontal 
visibility infor- mation, turn the polygon "inside out" using the following steps: Let vi be the polygon 
vertex with minimum y-coordinate among Vl ..... vn_ I --the second-lowest ver- tex. Set Ybreak ~ (Y (Vi)+Y 
(V0))/2, W 1 ~ cutpoint (v~,Ybr~k), and w 2 *- cutpoint(~-,Ybmk). Let vldt, Vto p, and VriOt be vertices 
with minimum x, maximum y, and maximum x coordinates, respectively. Compute internal horizontal visibility 
information for the simple polygon whose vertex sequence is w 1, (x(wl),y(vo)-l), (X(Vldt)--I,y(VO)--I)), 
(X(Vleft)--l,y(Vtop)÷l), (X(VriOt)+l,y(Vtop+l), (X(Vrisht)÷l,y(Vo)--l), (X(W2),y(VO)--I), W2, Vn_l, 
. . , el. Use the visibility information computed in the preceding two steps to revise the polygon by 
splitting each edge at each point that is horizontally visible (internally or externally) to a vertex. 
By the preceding lemma, the number of edges so produced is O (n). Now, given any horizontal line Y'Ycut, 
we can find the edges of the revised polygon that cross it in linear time. The internal and external 
horizontal visibilities tell the sorted order of the edges along the line Y'Ycut. Algorithm for Computing 
Internal Horizontal Visibifity Recall from the introduction that the algorithm maintains a set V of visibility 
regions that are not visibil- ity cells. To start the algorithm, place vl ..... v,_m into a vertex tree. 
Turn this vertex tree into a level-1 boundary tree with hook edges roy I and vn_lv o, and make this the 
sole boundary tree of a visibility region whose Ymu has been determined by scanning the vertices (Y min-y 
(v o) ). If the resulting visibility region is not a visibility cell, add it to set V. Now, perform the 
following steps until V is empty: (a) Choose a region R in V, and remove it from V. (b) Let Your be 
a vertex in R's boundary trees such that Yrain ;gAY (V cut ) ;~Y max" (c) Split each of R's boundary 
trees into boundary trees all of whose vertices lie above or below the line y-y (your). (d) Run the 
Jordan sequence sorting algorithm with error recovery on the points where the early and late hook edges 
of each piece resulting from (c)  intersect the line Y-y(vcut) (£ of the above Sketch). (e) Reassemble 
the pieces from (c) into visibility regions using the information from the Jordan sort of (d), and place 
regions that are not visibility cell~ into set V; output regions that are visibility cells. We now show 
how to implement these steps so that the algorithm runs in linear time. Step (a) --Choosing a visibility 
region We maintain V using any convenient data struc-ture for sets that permits choosing and removing 
a region in constant time. Step (b) --Choosing the cutting vertex Vertex you t can be any vertex that 
lies between R's Ymin and Ymx. To be certain of finding such a vertex in O (1) time, we choose it to 
be an endpoint of an extreme hook edge of one of the boundary trees on the list for R. When step (e) 
is implemented as explained below, the number of boundary trees on the list for any R in V is at most 
four, so this step examines no more than eight edges. Step (c) --Cutting the region boundary At the beginning 
of this step, the region boundary is represented by at most four boundary trees. We split each of these 
trees into boundary trees whose vertices lie entirely on one side of y -y (your). To motivate this pro- 
cedure, we classify the boundary trees at the leaves of the top and bottom boundary trees into three 
types: deep --both hook edges cross y-y(vcut) , and all vertices lie on one side of y-y (vc~t); shallow 
--neither hook edge crosses y-y(vcut), and all vertices lie on one side of y-y (vent); or, mixed --vertices 
on both sides of y-y (rout). If two deep top (bottom) trees are adjacent before split- ting, then their 
adjacent hook edges cross both y -Ymu (Y--Ymin) and y-y(v~t). If they remain adjacent after splitting, 
then the visibility information at y--y(Vcu t) is the same as that already reported at Y - Ymax (Y - 
Ymin)" The key idea in this step is to avoid too much of such duplicate reporting of visibility informa- 
tion by treating maximal adjacent subsequences of deep or shallow trees as single units. Any time a boundary 
tree splits, the resulting pieces replace the original boundary tree on the circularly linked list for 
R, and they are ordered to correspond with the boundary order of the visibility region. If the boun- 
dary tree is level-l, we use the procedure explained above for searching and splitting; the y-extrema 
information at internal nodes makes it possible to find the closest cross- ing point to an access point 
of the tree in time propor- tional to the logarithm of its distance from that point. If the boundary 
tree is not level-l, there are three possibilities: the tree is shallow, and the tree does not split; 
the tree is deep, and the tree splits into three pieces: one copy each of its early and late hook edge, 
and the tree itself; or the tree is mixed, and its splitting respects the con- dition that maximal adjacent 
subsequences of deep or shallow trees remain adjacent; mixed boundary subtrees are split recursively. 
Step (d) ~ Jordan sorting the crossing points In step (d) we are concerned with the crossing points at 
which the early and late hook edges of each boundary tree on R's list cross Y-Y~t. Notice that not all 
intersections of the boundary of R with the line Y-Y~t are found in step (c): more precisely, only the 
x-extreme intersections of a deep boundary tree with Y'Y~t are obtained. This is why step (d) calls for 
"Jordan sort with error recovery." When the Jordan sorting algorithm detects that the sequence of crossing 
points that it is sort- ing does not represent a simple polygon, some deep boun- dary tree must be split 
to improve the approximation to the region boundary enough to reflect the simplicity of the input polygon. 
Fortunately, the necessary changes to the data structures are local and can be made fast. There are two 
cases, depending on whether the point whose attempted insertion causes failure of the Jordan sort is 
the late crossing point of a deep boundary tree. The explanation uses the notation of pp. 4-5 of [11]: 
x s is the point to be inserted that causes error recovery to be invoked; xi_ ~ is the point most recently 
inserted; r immediately precedes xi_~, and s immediately follows xi-l, in the (already sorted) list of 
points seen so far. Case 1: x~ is the late crossing point of a deep boun- dary tree and some other splitting 
point lies between xi and x/_l, the early splitting point of the deep boundary tree: Assume without loss 
of generality that xi<x~-l. Find points a and b in the deep boundary tree for {xH,xi} such that x(a)<r<x(b)<xt_l 
and there is no c in the deep boundary tree such that x(a)<x(c)<r or r<x(c) <x(b). Continue processing 
the curve by trying to add the piece {x(a),xi}. (If a then causes an error of the second type, then two 
deep boundary trees are inter-leaving, and this processing causes them to split each other at points 
of interleaving, maintaining their other structure intact.) Case 2: x~ is not the late splitting point 
of a deep boundary tree and the Jordan sort detects a viola- tion because {xj_l,xj} does not enclose 
x e and the parent of {xj-l,xj} has a child with exactly one ele- ment enclosed by {xt-l,x~}: Let that 
child be {Xm-bXm}. If the boundary tree for {Xm-l,Xm} is not deep, the polygon is not simple; other- 
wise, find points a and b in the boundary tree for {xm-l,xm} such that x(a)<xi<x(b) and there is no c 
in the deep boundary tree such that x(a)<x(c)<x I or xi<x(c)<x(b). Replace {xm_l,x m} by {ym,x(a)} and 
{x(b),zm}. Add {x(a),x(b)} as a child of the other fam- ily root between Xm-I and Xm. A second attempt 
at inserting x i will now succeed, splitting the parent of  {xj-l,xj}. In either case, the search for 
neighbors a and b of xi is conducted using the hook edge information in the deep boundary tree; this 
is possible because the hook edges are ordered along Y-Ycut. The deep boundary tree is split at a and 
b. If the point sought in the deep boun- dary tree lies between the hook edges of a single vertex tree, 
rather than between the hook edges of two adjacent boundary trees, then the polygon is not simple. The 
points a and b should be inserted into the (input) list of points sorted by boundary order; for this 
reason we keep the points in a doubly-linked list rather than an array as in [10]. The fact that one 
of the points in the Jordan sort--the cutting point--might be a point of tangency to y-y(vcu t) poses 
no problem, even though the algorithm as described in [10] assumes that there are no such points. It 
is natural in the algorithm to begin pro- cessing with the cutting point, so the cutting point can be 
treated specially by inserting it both first and last. Step (e) --Putting together visibility regions 
The result of steps (c) and (d) is a circularly-linked list of boundary trees for region R, ordered so 
it defines a polygon. (See Figure 4.) The number of boun- dary trees on the list is related to the amount 
of visibility information obtained in steps (c) and (d); all vertices of each boundary tree lie on one 
side of Y-Ycut. Step (d) also computes the family trees of the curve, which describe how pieces of the 
polygon nest above and below the line Y'Ycut. (See Figure 5.) Step (e) uses the family trees produced 
by Jordan sorting to decompose R into smaller visibility regions, each of which is a simple polygon. 
(See Figure 6.) To perform step (e), process both family trees as follows: Enqueue all children of {-Qo,oo}. 
Repeat the following steps until the queue is empty: F ,--- dequeue; enqueue all grandchildren of F; 
assemble F and its children into a visibility region as explained below. If F is in the upper family 
tree, the sequence of boundary trees between F's endpoints on the circular list for R represents the 
sides and top of a simple polygon, and the sequence of boundary trees for its children represents the 
bottom of a simple polygon. Classify the boundary trees as top, side, or bottom depending on whether 
their hook edges cross Y'Ymax or Y-Y~t. (If a deep boundary tree is of type side, then one of the level-1 
boundary trees at either end of its frontier is of type side; that side boundary tree should be split 
off, and it and the remaining deep boundary tree [of type top or bottom] should replace it on R's list 
of boundary trees.) If there are side boundary trees, construct one recursive finger search tree for 
the top boundary trees and another for the bottom boundary trees; the circular list containing these 
four trees becomes the boundary list for the new region. If there are no side boundary trees, then construct 
one recursive finger search tree whose leaves contain the boundary trees for F's children; this tree, 
together with the finger search tree for F, composes the circular list for the new region. The value 
for the new region's scalar Ymax is either Ymu (if the region has side boundary trees) or is available 
from the boundary tree for F; the new value for the scalar Ymin is y(v~t). The procedure if F is in the 
lower family tree is similar. Time Analysis The basic recurrence is T(1)-O (1); r(n)-max (T(i)+r(n-i)+O(log 
min{i,n-i})), for n>l. l ~l ~n-I The solution to this recurrence is T(n)-O(n). [15, p. 185] The initial 
construction of the vertex tree requires O (n) time. Thereafter, the vertex tree is repeatedly split 
into smaller trees. The time for this splitting obeys the basic recurrence, so the total time to process 
the vertex tree is O (n). Each searching and splitting of a boundary tree in steps (c) and (d) corresponds 
to discovering that two edges of the polygon are internally horizontally visible, and to a visible pair 
reported by the Jordan sorting algo- rithm. The next lemma bounds the size of the output of the Jordan 
sorting algorithm by bounding the number of visible pairs reported by the algorithm. Lemma. The total 
number of visible pairs discovered by the algorithm is O (n). Proof To establish the lemma, suppose that 
with each new visible pair discovered by the algorithm we receive six credits with which to pay for rediscovered 
visible pair information. We show that no visible pair has more than six charges made against it at any 
stage in the algorithm. Let R be a visibility region in V at some stage of the algorithm. Each visible 
pair reported by the Jordan sorting algorithm corresponds to a hook edge from each of two boundary trees; 
both hook edges in the pair cross Y-Ycut. Let us examine these pairs of hook edges more carefully. Say 
that a hook edge is long if it crosses one of the lines Y-Ymin and y-ym,, in addition to crossing ylycu 
t. If either hook edge of a visible pair is not long, then that pair is new visibility information. If 
both hook edges of a visible pair are long, but the boundary trees of which they are hook edges are not 
neighbors in the circular list for R, then the visible pair they represent is new. Since the total amount 
of visibility information in the polygon is O(n), this means we need only find a way to charge the duplicate 
information represented by visible long hook edges of adjacent boundary trees to new visible pairs discovered 
during the processing of R. To see how adjacent long hook edges can be gen- erated, consider an adjacent 
pair's precursors --the boundary trees from which the two adjacent boundary trees split off. One possibility 
is that both precursors are side boundary trees; charge the rediscovered visible pair to the new visible 
pair discovered at Vcut, the vertex at which region R split. This can only happen once for a region R: 
if long hook edges are adjacent at both Y-Yn and Y-Ymax, then the visibility region R is a subset of 
a visibility cell and should not have been in V. Moreover, if both precursors are side boundary trees, 
then the only other visible pair discovered at this stage is between yew t and the two hook edges, so 
no other charges will be made against the visible pair discovered at v~t. If one of a pair of precursors 
is a top boundary tree, the charge depends on the type of the precursor. Obviously, shallow boundary 
trees play no part in visibil- ity information at y-y (veut). If a mixed boundary tree precursor has 
a long hook edge and its neighbor also has a long hook edge, pay for the rediscovered information using 
one of the credits from the first new visible pair discovered within the mixed boundary tree precursor. 
This costs at most two credits, one for each hook edge. If the precursor of a boundary tree with a long 
hook edge is deep, and its neighbor's adjacent hook edge is also long, there are two possibilities. If 
the neighbor's precursor is a mixed boundary tree, then it can pay for the rediscovered visible pair. 
If the neighbor is a side boundary tree, pay for the rediscovered visible pair using credits accrued 
for the visible pair discovered at ve~t. This costs at most two credits, one for each side. Note that 
if the neighbor were deep, then the algorithm would not have been executed correctly at some earlier 
time, because neighboring deep boundary trees should have been made the leaves of a higher-Iced boundary 
tree. A similar analysis applies to boundary trees that split off from the bottom boundary tree. A visible 
pair can pay at most six credits: two for deep top boundary trees whose neighbors are sides, two for 
deep bottom boundary trees whose neighbors are sides, and two for duplicate visible pairs discovered 
at the sides of the mixed boundary tree precursor in which it was contained. It follows that the number 
of visible pairs generated is O (n), which establishes the lemma. (Note: This proof differs from many 
amortization arguments because we don't need to save credits between executions of the loop.) Since the 
output of all executions of Jordan sorting with error recovery has size 0 (n), and the Jordan sorting 
algorithm runs in time linear in the size of its output, the total cost of the Jordan sorting is 0 (n). 
When two boundary trees become neighbors in a higher-level boundary tree, their adjacent hook edges correspond 
to a visible pair reported by the Jordan sorting algorithm. Since the total number of visible pairs reported 
by the algorithm is O(n), and the leaves of the trees are known in order from the Jordan sort, the cost 
of constructing all boundary trees is O(n). Once con-strueted, boundary trees are never involved in merging, 
but are instead split repeatedly; the cost of this splitting obeys the basic recurrence, so the total 
time to process all boundary trees is 0 (n). Steps (a) and (b) can be implemented to run in constant 
time. Since the algorithm reports at least one visible pair each time it executes steps (a)-(c), the 
above lemma shows that the total work in steps (a) and (b) is O (n). The processing of step (e) uses 
a constant amount of time per visible pair reported, so the total work in step (e) is O (n). This gives 
our main result. Theorem. The algorithm computes all visibility informa- tion of a simple n-gon in O 
(n) time. Corollary. Triangulation of a simple polygon can be per- formed in linear time. Appfieations 
Our algorithm can be modified to test in linear time whether a given polygonal curve, or even a piecewise-smooth 
Jordan curve[16], in the plane is simple, and to find a self-intersection of the curve if it is not. 
First, make each edge of the curve monotone in the y direction, by adding at most two vertices at the 
edge's minimum and maximum points. Next divide the curve into closed curves by cutting it with the line 
that connects its endpoints and using Jordan sorting. If the Jordan sorting detects a violation of simplicity, 
the curve is not simple. Otherwise, use the method of step (e) of the algorithm to construct k polygons, 
each of which lies entirely on one side of the cutting line. The curve is simple if and only if each 
of these k polygons is simple. Each of these polygons is simple if and only if both it and its "inside 
out" partner are simple. To determine this we perform the following two steps on each of the 2k polygons. 
Compute the horizontal visibil- ity information in each polygon. If the Jordan sorting step detects a 
violation of simplicity, then the polygon is not simple. Otherwise, the polygon is simple if and only 
if the hook edges of each visibility cell do not intersect (except possibly at their endpoints). If the 
polygon is not simple, we can produce a wit- ness to its nonsimplicity in linear time. If the nonsimpli- 
city is detected as crossing hook edges, the self-intersection is available immediately. Otherwise (the 
Jor- dan sorting detects nonsimplicity), recur on the pieces involved to find a self-intersection of 
the polygon in linear time. An interesting open problem is whether one can compute all of the self-intersections 
of a polygonal curve in O (n +k) time, where n is the number of vertices on the curve and k is the number 
of self-intersections. The existence of a linear-time algorithm for simple polygon triangulation directly 
implies linear-time algo-rithms for many other problems. Fournier and Montuno [6] mention several polygon 
decomposition problems with this property; notice that the decompositions are not required to be minimal, 
as in [13]. Other problems with linear-time algorithms as an easy consequence of linear- time triangulation 
include: Regularizing (or triangulating) a planar subdivision that is given as a connected planar graph. 
[5]; Computing the internal distance between two points in a polygon, and finding the point-visibility 
385 polygon for a point inside a polygon [2]. The ideas behind our algorithm can also be applied to give 
linear-time algorithms for computing internal visi- bility information from an edge and solving the single- 
source shortest path problem from a point inside the polygon [8]. Linear-time simplicity testing makes 
it possible to test for the intersection of two n-gons in O(n) time. Linear-time visibility computation 
can be used to decom- pose simple splinegons [17] into a union of differences of convex sets in linear 
time. These results will be reported in a future paper [4].  Acknowledgement We thank Brenda Baker 
for many helpful com-ments on an earlier draft of this paper.  References <RefA>1. M.R. Brown and R. E. Tarjan, 
"Design and analysis of a data structure for representing sorted lists," SIAM J. Comput. 9, pp. 594-614 
(1980). 2. B. Chazelle, "A theorem on polygon cutting with applications," Prec. 23rd Annual Symp. on 
Foun- dations of Comput. Sci., pp. 339-349 (1982). 3. B. Chazelle and J. Incerpi, "Triangulation and 
shape complexity," ACM Trans. on Graphics 3(2), pp. 135-152 (1984). 4. D.P. Dobkin, D. L. Souvaine, 
and C. J. Van Wyk, Linear-time algorithms for splinegon problems, in preparation. 5. H. Edelsbruner, 
L, J. Guibas, and J. Stolfi,  Optimal point location in a monotone subdivision, Digital Equipment Corporation 
Systems Research Center Report #2, 1984. 6. A. Fournier and D. Y. Montuno, "Triangulating simple polygons 
and equivalent problems," ACM Trans. on Graphics 3(2), pp. 153-174 (1984).  7. M.R. Garey, D. S. Johnson, 
F. P. Preparata, and  R. E. Tarjan, "Triangulating a simple polygon," Inform. Prec. Left. 7(4), pp. 
175-180 (1978). 8. L. Guibas, J. Hershberger, D. Leven, M. Sharir, and R. E. Tarjan, "Linear time algorithms 
for visi- bility and shortest path problems inside simple polygons," Prec. Second ACM Symposium on Computation 
Geometry, to appear (1986). 9. S. Hertel and K. Mehlhorn, "Fast triangulation of a simple polygon," 
Prec. Conf. Found. of Comput. Theory, New York, pp. 207-218, Springer-Verlag (1983). 10. K. Hoffman, 
K. Mehlhorn, P. Rosenstiehl, and R.  E. Tarjan, "Sorting Jordan sequences in linear time," Prec. Symp. 
Computational Geometry, pp. 196-203 (1985). 11. K. Hoffman, K. Mehlhorn, P. Rosenstiehl, and R.  E. 
Tarjan, "Sorting Jordan sequences in linear time," Inform. and Control, to appear (1986). 12. S. Huddleston 
and K. Mehlhorn, "A new data structure for representing sorted lists," Acta Inform. 17, pp. 157-184 (1982). 
 13. J.M. Keil, "Decomposing a polygon into simpler components," SIAM J. Comput. 14(4), pp. 799- 817 
(1985). 14. D. Maier and C. Salveter, "Hysterical B-trees," Inform. Prec. Lett. 12, pp. 199-202 (1981). 
 15. K. Mehlhorn, Data Structures and Efficient Algo- rithms, Volume 1: Sorting and Searching, Springer-Verlag, 
Berlin (1984). 16. Alejandro A. Schaffer and Christopher J. Van Wyk, "Convex hulls of piecewise-smooth 
Jordan curves," J. Algorithms, To appear. 17. D. L. Souvaine, Computational Geometry in a Curved World, 
Princeton University (1986 (to appear)). Ph.D. Dissertation 18. T.C. Woo and S. Y. Shin, "A linear time 
algo- rithm for triangulating a point-visible polygon," ACM Trans. on Graphics 4(1), pp. 60-69 (1985).</RefA> 
  _ __ -- 1'7 ..... Figure 1. An 11-gon. The dashed line shows the point at which the polygon is split 
in Figure 4. [y (v4),y (vs)] [y (V7),Y (VS)] left a c c e s s ~ ight access  [y (v2),y (vs)] [y (v4),y 
(vs)] [y (V7),y (Vs)] [y (V7),y (Vg)l Figure 2. Vertex tree for vl ..... Vlo of the 11-gon of Figure 
1, showing y-extrema. An internal node la- belled with a single value for y-extrema points only to a 
leaf.  [Y(V°)~ (vS)l Figure 3. The initial region for running the algorithm on the 11-gon of Figure 
1, showing y-extrema and the lone level-1 boundary tree. The boundary tree shows y-extrema, hook edges, 
and access points to the finger search tree of Figure 2 (represented by a triangle). 387 [y(v~(vs)] 
 J [y(v4),y(vs)] I_ vOVl  [y(vT)'y(vs)I VoVlo Figure 4. The result of splitting the region of Figure 
3 at Vlo. Single edges represent trivial boundary trees. --oo oo X 1 X2 X0 ~Xl X2 X6 X0 Xl0 X8 X6 X8 
Figure 5. Let xi~cutpoint(viv(i+l)modll,y(vlo)). (Note that X9 Xi0.) This figure shows the family trees 
of the 11-gon of Figure 1 at y-y (v 10) in terms of the xi that are defined.  [ y (V lo) [ y (V l ) 
] [Y (V lo)Iy (v s) ] [Y(Vg)'y(v9)] [y (VT),I (v lo) ] [ y~v 1o)l ~y (V7),~ty (V$) ]~ [y(v2)'y(v2)I L 
 V01,~ 1 VOYIO 388  
			
