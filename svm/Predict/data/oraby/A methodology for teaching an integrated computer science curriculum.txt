
 A Methodology for Teaching an Integrated Computer Science Curriculum John T. Paxtonl paxton@cs.montana. 
Rockford J. Rossz ross@cs.montana. J. Denbigh Starkey st arkey@cs.mont edu edu aria, edu Computer Science 
Department Montana State University Bozeman, MT 59717 Introduction In recent years, there has been 
much interest in improv­ing computer science education [Denning 1989], [Tucker 1990], [Hartmanis 1992]. 
One way to improve computer science education is by teaching it in an integrative man­ ner. Traditionally, 
students first learn a programming language, then advanced programming, then data struc­tures and algorithms, 
then discrete mathematics, and fi­nally advanced topics such as operating systems. There are at least 
three major problems with the traditional approach. First, students see the field of computer sci­ence 
as a quiltwork of unrelated pieces; the supporting knowledge (such as graph theory) related to a particu­lar 
topic (such as computer networks) has either not yet been covered or seems irrelevant to the topic. Second, 
many of the topics that are most interesting to students (such as computer graphics) are not encountered 
until the student is a junior or senior. If retaining more first and second year students is a goal of 
a department, the material encountered during these initial years should be made interesting. 1 Support 
for part of the developmental work described in this paper came from a Montana State University Instructional 
Re­search Grant. 2 Support for development of the formal laboratories described in this paper came in 
part from the Instrumentation and Labora­tory Improvement Program of the National Science Foundation, 
grant number USE-91 S0298. Perrnksion to copy without fee all or part of this material is Oranted provided 
that the copias aro not made or dktributad for direct commercial advantaga, the ACM copyright notice 
and tha titla of tha publication and ita date appear, and notica ia given that copying is by permission 
of the Association for Computing Machinery. To copy otharwise, or to republish, requires a fea andor 
specific permission, SIGSCE 94-W, Phoertixj ArizorwUSA @ 1994 ACM 0-89791 846W94K)O03..$3.5O 1 Third, 
social issues, ethics, and professionalism i~re completely neglected. Many educators believe that teaching 
computer science in an integrative fashion will overcome these deficiencies. However, effective teaching 
methodologies for this integrative approach are not well understood. Thus, a university or college might 
very much want to teach an integrated computer science cur­riculum, but be thwarted by the fact that 
the conce:pt of an integrated curriculum is too vague to implement. In this paper, we shall discuss some 
of the methodolo­gies we have employed during the past two years while teaching an integrated curriculum. 
After struggling init­ially, we have found one successful teaching method. In this paper, we shall describe 
this method, our successes with it, and some of our concerns. 2 Background In autumn 1991, Montana from 
the quarter system to this change was made, the ment decided to change its to reflect a state-of-the-art 
science pedagogy. Computer now enter a four semester State University changed the semester system. When 
Computer Science Depart­undergraduate curriculum understanding of computer science majors and mincms 
sequence of courses (here­ after referred to as CS I IV) starting in their sec­ond semester. During 
each of these four semesters, stu­dents take a 3 credit lecture course [Paxton, Ross, and Starkey 1993] 
and a 1 credit laboratory course [Paxtom, Ross, and Starkey 1994]. Before entering CS I, a student must 
have the equivalent of an introductory program­ ming course. The goal of CS I IV is to give students 
a breadth-first, integrated overview of computer science breadth-first [Moore 1993], because it exposes 
stu­dents early in their careers to the different areas of com­puter science, and integrated becauae 
we want students to understand how the following six concepts relate to one another: computer science 
subject areas, abstract data types (ADTs), discrete mathematics, computer sci­ence theory, social and 
ethical issues, and communica­tion skills. Teaching a sequence of courses with such a broad set of goals 
provides many exciting challenges. One of the first challenges we faced was selecting text­books that 
would aid us with our objectives. The set of texts that we currently use include: Algorithmic: The Spirit 
of Computing [Harel 1992]. This book discusses many of the fundamen­tal ideas of computer science. Data 
Structures and Algorithm Analysis [Weiss 1992]. This book introduces the concept of an ADT, its underlying 
implementations, and their analysis. Di8crete Algorithmic Mathematics [Maurer and Ralston 1991]. Computerization 
and Controversy [Dunlop and Kling 1990]. This book is a collection of articles that cover social and 
ethical issues, This set of texts covers most of the topics that we wish for students to learn. However, 
they do not adequately cover the major subject areas of computer science, nor do they cover communication 
skiUs. Currently, this information must be incorporated into the course se­quence through the lecture. 
The biggest pedagogical hurdle that we had to face in teaching CS I -IV was deciding how to integrate 
the above mentioned six topics. The following two sections of this paper are devoted towards explaining 
how we have accomplished this. Guiding Principles As we have taught CS I IV during the past two years, 
we have found that adhering to the following three guidelines has resulted in an integrated curriculum 
that both the instructors and the students find satisfying and stimulating: 1. True integration. Integrating 
the subject areas, computer science theory, discrete mathematics, ab­stract data types, social and ethical 
issues, and communication skills is much easier said than done. At Montana State University, we have 
now taught CS I -IV twice. The first time we taught the series, we {integrated the material by spending 
two weeks on compilers, two weeks on induction proofs, two weeks on undirected graphs, etc. This approach 
met the letter of an integrated curricu­lum, but failed to capture its spirit. In retrospect, we taught 
the course this way initially because we did not know at that time how to integrate the ma­terial effectively. 
This first approach was disjointed and was not completely satisfying to either the pro­fessors or the 
students. The second time we taught CS I -IV we did things much differently. We decided to organize each 
of the four courses around two or three major com­puter science topic areas. For example, last spring 
CS III was organized around computer networks and simulation. This particular approach turned out to 
be pleasing to both students and professors. The key notion in an integrated curriculum is to have the 
subject material tell a story. If one topic follows naturally from the previous one, students know why 
they are learning a particular concept as well as how it fits into the larger picture. The next section 
of this paper gives a concrete example of an integrated curriculum. 2. High interest. Because CS I IV 
is a four semester series it is important to keep students interest at a high level. This is important 
both pedagogically and practically. From a pedagogical standpoint, students learn better when they find 
the material interesting and reIevant. From a practical stand­point, the same set of students stay together 
for four semesters and their attitude to one class is largely carried over from how they felt about the 
previous one. The first time we taught the se­ries some of the students became bored or dissat­isfied 
in the early classes. As the series progressed, these students bad attitudes carried over to future classes 
and put a damper on the classroom atmo­sphere. In principle, CS I IV could be organized around computer 
science subject areas, ADTs, discrete mathematics, computer science theory, or social and ethical issues. 
Many students find the com­ puter science subject areas (such as artificial intel­ ligence) to be highly 
interesting. Perhaps the rea­ son for this is that students perceive that the skills learned in these 
courses will help them obtain a job upon graduation. Therefore, if other topics (such as NP-completeness 
or probability) can be integrated into the computer science subject areas, students are better motivated 
to learn topics that they oth­ erwise might find dry and irrelevant. 3. Concept reuse. As the series 
progresses, it is im­portant to continually review and build upon pre­viously learned concepts [Resnick 
1982]. It has been our experience that some of the trickier con­cepts such as NP-completeness require 
multiple ex­posures to be comprehended. Additionally, when concepts are seen in a number of different 
settings, 2 students better understand how the fundamental concepts of computer science are woven together. 
 It is important to note that the four courses compris­ing CS I -IV represent only a one semester increase 
over a standard introductory curriculum. CS I -IV has replaced the three standard courses of advanced 
pro­gramming, data structures and algorithms, and discrete math. All of the material (plus more) found 
in the three original courses is completely covered in CS I IV. Moreover, the important. topics of computer 
ethics and introductions to the primary subject areas of the discipline (e.g. operating systems) have 
been included in this sequence; hence the necessity for an additional semester. 4 A Sample Integration 
In this section, we provide a concrete example of an integrated curriculum. This example weaves together 
subject areas, discrete mathematics, computer science theory, ADTs, social and ethical issues, and communi­cation 
skills. Due to the brevity requirements of this paper, we are only able to provide a small portion of 
one semester s material. (A complete syllabus is avail­ able electronically from the authors. ) The example 
pre­ sented here is taken from CS III, when computer net­ works were the organizing topic. 4.1 Networks 
as the Unifying Theme At the start of the unit, a brief account of the Inter­net s past, present, and 
future was given. Some com­mon Internet tools such as ftp, archie, gopher, and tel­net [LaQuey 1993] 
were then surveyed. Students were given assignments to use these tools. One such assign­ment involved 
obtaining an article from the computer underground at an ftp site maintained by the Electronic Frontier 
Foundation, writing a two page report on the paper, and then giving a brief oral presentation to the 
class summarizing what the student learned. Graphs are a useful tool for modelling the Internet and were 
introduced once students had gained some fa­miliarity y with the Internet. Discussions of how graphs 
(both directed and undirected) might be implemented ensued and both adjacency lists and adjacency mat 
rices were discussed. Tools such as the big-O notation were used to analyze the efficiency of common 
operations on these graph implementations. Next we discussed what types of operations might be useful 
with respect to the Internet. One such opera­tion is finding the shortest path between two Internet sites 
for the purpose of routing a message. At this point shortest path algorithms were discussed, their efficiency 
analyzed, and their correctness proved. The standard single point shortest path algorithm is an example 
of a greedy design and so we discussed the greedy de~ign methodology. We next discussed the traveling 
sales­person problem (TSP) in the context of routing mes­sages around a network. Since TSP is an example 
of an NP-complete (NPC) problem, it was natural at this point to discuss NPC problems, and to contrast 
NPC problems with polynomial (P) problems and exponen­tial (EXP) problems. Once students understood what 
an NPC problem is, we talked about the concept of a heuristic and how it might be used to yield pretty 
good solutions to NPC problems in polynomial time. A pro­gramming project required students to design 
heuristic solutions to TSP that were no worse than 0(n3). A class competition was held to see who could 
come up with the best solution using this constraint. As students explored the space of solutions to 
TSP, the notion of using parallelism arose. We discussed blow parallel computing can be used to solve 
certain types of problems, With parallel computing came the opportu­nity to discuss yet another complexity 
class of problems, Nick s Class (NC). The above example could continue, but it is proba­bly more fruitful 
at this point to stop and take stock of the situation. We hope that the above example success­fully conveys 
to the reader the essence of how one mi,ght go about organizing the appropriate materials around a computer 
science subject area. By using computer rnlet­works as the organizing topic in the above example, we 
are able to bring many different concepts into play in a manner that is both interesting and coherent 
for the students. To summarize, here is how each of the six components we are integrating appear in the 
above ex­ample: 1. Subject Areas. Computer networks were the pri­mary organizing topic. Artificial Intelligence 
was touched upon through the notion of a heuristic, and parallel processing was also discussed. 2. AD 
Tu. The graph ADT was discussed. Opera­tions that a graph supports (e.g. single point shc~rt­est path) 
and common representational techniques were studied. 3. Discrete Mathematics. Graphs and graph terminolo­gy 
such as edges, vertices, in-degree, out-degree, etc., were discussed. Asymptotic notation was used to 
analyze algorithm efficiency. Techniques for proving algorithm correctness were presented. 4. Computer 
Science Theory. The fundamental ccm­cepts of P, NPC, EXP, and Nick s Class were cov­ered. 5. Social 
Issues. The history of the Internet was discussed. Students learned about the Electronic  3 Frontier 
Foundation and the computer under­ground. Many other issues such as viruses, elec­tronic relationships, 
and data security could easily be interwoven into the above material. 6. Communication Skills, Students 
wrote a paper on the computer underground and presented their findings orally to the class. Assessment 
 We are now close to meeting our above stated goals of having a true integration of the material, maint­aining 
high student interest, and maintaining ccmti­nuity throughout the series by building upon concepts that 
have been previously learned. (In the example in the previous section, it is hard to illustrate concept 
reuse without showing material presented in previous semesters. One example of a concept that was previ­ously 
taught and then reused in the context of computer networks was asymptotic notation.) As we continue to 
better understand how to teach CS I -IV in an integra­tive manner, we are becoming more and more excited 
about our approach. It is fun to teach an integrated curriculum and we are convinced that an integrated 
cur­riculum is far superior pedagogically to one that is not. Now that we have had two years worth of 
experience teaching CS I IV, we feel that we should point out some of the special challenges that teaching 
an inte­grated curriculum presents. . Discrete mathematics and computer science theory have proven to 
be the topics that are the most chal­lenging to integrate with the others. Our students have highly variable 
math ability levels and it has proven difficult to maintain a high level of student interest when these 
topics are discussed. We are trying to to design lecture material and assignments that allow the students 
with weaker math back­grounds to learn while still challenging the more sophisticated students. We have 
found that it is very important to give assignments that continuously reinforce concepts from discrete 
mathematics and computer science theory. Assuming that students can passively learn these concepts by 
sitting in lecture is a mistake. To learn these concepts, students must actively use the material in 
assignments. At regular intervals, students should be provided with a picture of how all of the material 
fits to­gether so that they do not lose sight of the forest while they examine the trees. Without periodic 
road maps, students don t know where they have been nor where they are going. These classes require 
more than the usual amount of preparation time on the part of the professor. It requires added effort 
to present competently so many different areas of computer science in an in­tegrated fashion. However, 
we find that despite the time commitment, the courses are highly rewarding to teach. Furthermore, there 
is much to be gained by a professor brushing up on a topic that he or she has not thought about for many 
years!  There are currently no teaching assistants who have learned computer science using an integrated 
ap­proach. Therefore a fair amount of time must be spent with them, helping them to understand what the 
goals of the coordinated laboratory assignments are. Requiring the teaching assistant to attend the lecture 
is one method that helps reduce this train­ing time.  Finally, no textbooks adequately meet our needs. 
The set of texts that we are currently using contain lots of relevant information in them, but it is 
up to us to package that information in an integrated manner.  6 conclusion Not only does CS I -IV 
represent a pedagogical im­ provement over teaching computer science in the tra­ ditional manner, it 
is also highly stimulating for the professors who teach these courses. There is a lot of latitude for 
selecting organizing computer science areas for each course. Different professors can bring different 
areas of interest to bear in the early parts of the cur­ riculum. Additionally, these courses provide 
professors with an opportunity to maintain currency in subject ar­ eas that are outside their primary 
area of interest. From a student s standpoint, the field of computer sci­ence is much more readily assimilated 
than previously. For example, topics from discrete math (taught previ­ously by the math department) that 
seemed so irrele­vant before, now take on relevance and even appear in­teresting when presented in the 
context of related com­ puter science issues. Furthermore, students are now in a much better position 
to select upper division electives since they are familiar with the different areas of com­ puter science. 
After teaching CS I IV for two years, we have solved many of the difficulties that we encountered when 
we first began teaching the series. Now that we know what an integrated curriculum should look and feel 
like, we must continue to develop materials and work on smooth­ing out the transitions from one class 
to the next. As we continue to refine these courses it is our hope that others can build upon our experience 
to develop similar courses without so many of the teething pains! 4 References <RefA>Denning et al. 1989. 
Denning, P., Comer, D., Gries, D., Mulder, M., Thcker, A., Turner, A, and Young, P. Computing as a Discipline. 
Communications of the ACM, 32(1):9-23, January 1989. Dunlop and Kling 1990. Dunlop, C., and Kling, R, 
editors. Computerization and Controversy. Aca­demic Press. Harel 1992. Harel, D. Algorithmic: The Spirit 
of Computing. Addison-Wesley Publishing Company. Hartmanis 1992. Computing the Future. Com­munications 
of the ACM, 35(11):30=40, November 1992. LaQuey 1993. LaQuey, T., and Ryer J. The Internet Companion. 
Addison-Wesley Publishing Com­pany. Maurer 1991. Maurer, S., and Ralston, A. Discrete Algorithmic Mathematics. 
Addison-Wesley Pub­lishing Company. Moore, Rich, and Wick 1993. Scientific Investi­gation in a Breadth-First 
Approach to Introductory Computer Science. SIGCSE Bulletin, 25(1):63-67, March 1993. Paxton, J, Ross, 
R., and Starkey, D. 1993. An Integrated, Breadth-First Computer Science Curriculum Based on Computing 
Curricula 1991. SIGCSE Bulletin, 25(1):68-72, March 1993. Paxton, J., Ross, R., and Starkey, D. 1994. 
Formal Laboratories For an Integrated, Breadth-First Computer Science Curriculum Based on Com­puting 
Curricula 1991. In preparation. Resnick 1982. Mathematics and Science Learning: A New Conception. Science, 
20(4):477-8, April 1982. Tucker 1990. Tucker, A. (editor). Computing Cw­ricula 1991. Report of the ACM/IEEE-CS 
Joint Curriculum Task Force. ACM Press, ACM order number 201910. Weiss 1992. Weiss, M, Data Structures 
and Algorithm Analysis. The Benjamin/Cummings Publishing Company, Inc. </RefA>
			
