
 A Dynamic Extent Control Operator for Partial Continuations * Christian Queinnect Bernard Serpette$ 
Ecole Polytechnique &#38; INRIA-Rocquencourt Abstract: A partial continuation is a prefix of the computation 
that remains to be done. We propose in this paper a new operator which precisely controls which prefix 
is to be abstracted into a partial continua­tion. This operator is strongly related to the notion of 
dynamic extent which we denotationally characterize. Some programming examples are commented and we also 
show how to express previously proposed control operators. A suggested implementation is eventually discussed. 
Keywords: continuation, partial continuation, dy­namic and indefinite extent, escape feature. Continuations 
were introduced within denotational semantics to express the rest of the computation in these cases where 
some constructs of a language can alter it. Non local exits or jumps (stop, goto), ex­ception handling, 
failure semantics in Prolog-like lan­guages are usually described with continuations [Stoy 77, Schmidt 
86]. The Scheme language [Rees &#38; Clinger 86] offers procedural first-class continuations with in­definite 
extent. Like functions (lexical closures) which reinstall the environment of variables that was active 
when they were defined, continuations reinstall the rest of the computation which remains to be done 
when they were defined. Continuations have been proved to be valuable tools in Scheme where they are 
used to program non local exits [Haynes &#38; Friedman 87b], *Thk work has been partially funded by GDR 
Programmation. t LIX, ~cole Polytechrique, 91128 Palaiseau Cedex, France, Email address: queinnec~poly 
.polytechnique .fr $INRIA Rocquencourt, Domaine de Voluceau, 78153 Le Chesnay Cedex, France, Email address: 
serpett e@inria. f r Permission to copy without fee all or part of this material is granted provided 
that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice 
and the title of the publication and its date appear, and notice is given that copying is by permission 
of the Association for Computing Machinery. To copy other­wise, or to republish, requires a fee and/or 
specific permission. @ 1990 ACM 089791-419-8/90/0012/0174 $1.50 multitasking [Wand 80], engines [Haynes 
&#38; Friedman 87a] etc. The problem of continuations is that they are too powerful [Haynes &#38; Friedman 
87b] since they reify [Friedman &#38; Wand 84] the whole rest of the computa­tion. To call one of them 
means losing control since they never return. A partial continuation [Johnson 87] is only a prefix of 
the computation that remains to be done. A partial continuation is thus a function that returns to its 
caller therefore partial continuations are composable like regular functions. Yet full con­tinuations 
are still useful since they allow imperative (abortive) transfer control. Programming languages widely 
differ with their of­fer of continuations. Continuations can be first-class or not, procedural or not, 
be accessed from a different namespace or from the regular lexical variable-environ­ment. Continuations 
can have a dynamic or indefinite extent, they can behave lexically or dynamically. More­over two main 
uses of continuations can be recognized. First, continuations are a non-local exit facility and can be 
met in COMMON LISP as block/return-from or catch fthrow, in Modula-3 as try exceptiraise and in C as 
set jmpilong j mp. These constructs allow to escape from a computation and to return to a previous control 
point. They are often used to handle excep­tional situations. Since these continuations can only be used 
while in their dynamic extent, their implemen­tation is therefore very efficient. The second use of continuations 
is particular to Scheme and is closely related to their indefinite extent. A computation may be reified 
(frozen) into a continu­ ation, passed along as a normal value and finally un­frozen later on. This allows 
to easily implement a non preemptive multitasking facility [Wand 80]. But the most intriguing feature 
that makes them differ from threads (or lightweight processes) is that continuations are immutable objects 
that may be resumed more than once. From a naive implementation side, reifying a con­tinuation roughly 
corresponds to save the current eval­uation stackl; resuming a continuation reinstalls the 1This is straightforward 
for heap-based implementation of the 174 saved stack overwriting the current stack. The evalua­tion 
stack represents the above mentioned rest of the computation therefore, to copy back a saved stack im­plies 
that these continuations are not composable since there is no means to return to an overwritten stack. 
Partial continuations are usually based on a couple of features: one which marks the beginning of contin­uations 
that might be abstracted late]r on and another feature which reifies them, Several models of partial 
continuations exist: mainly [Felleisen &#38; Wand &#38; Fried­man &#38; Dubs 88] with run/control and 
[Danvy &#38; Fil­inski 90] with reset/shift. These constructs do not permit to easily pair related control 
operators i.e. to precisely specify up to which context partial continua­tions must be reified. The paper 
therefore presents, in tlhe framework of Scheme, a new control operator named splitter (cf. section 2) 
which creates pairs of associated control operators: one is a non-local exit facility whilst the other 
reifies partial continuations upto the point where splitter was called. Various dressings for splitter 
are compared in section 4 as well as how they are typed. The splitter construct reconciles the two previ­ously 
recognized uses of continuations: dynamic extent full continuations and indefinite extent partial contin­uations. 
The basic idea is that a classical evaluation stack (or a list of linked activation records) may be marked 
in order to be later on split into two parts: the lower part, under the mark, represents the rest of 
the computation that can be escaped into. The upper part, above the mark, may be abstracted into a partial 
con­tinuation and therefore multiply applied, stored etc. A partial continuation abstracts the lpart 
of the con­trol between a mark and the point where it is reified. Therefore partial continuations can 
only be taken upto a mark which must exist i.e. be in the dynamic extent of the progenitor splitter, 
cf. section 1. Eventually the paper suggests an implementation technique inspired from, at least, [Danvy 
87] and [Hieb &#38; Dybvig &#38; Bruggeman 90] that avc)ids copying ac­tivation records from and back 
to stack (cf. section 5). A partial continuation freezes its associated ac­tivation records. Popping 
frames from the stack is non-destructive since it is only a pointer translation. Conversely pushing new 
frames may overwrite frozen frames. An extra pointer (free-stac:k) exists above which it is always possible 
to push new frames. To push frames in a regular zone is done as usual i.e. relatively to the regular 
stack pointer; conversely to push frames in a frozen zone is done relatively to free-stack with the necessary 
(and then explicit) control links. This tech­nique allows allocating mutable locations in the stack since 
these locations are not duplicated. evaluation stack i.e. a linked list of activation records; it usually 
involves some copy for stack-based implementation [Clinger 88, Hieb &#38; Dybvig &#38; Bruggeman 90]. 
1 Semantical Framework This section presents much of the semantics of a Scheme-like language and formalizes 
our conception of dynamic extent, see also [Steele 90, chapter 3]. The term extent refers to a period 
of time: the life­time of an entityz. Any entity of Scheme has an indefi­nite extent i.e. entities exist 
forever. In most languages (Scheme excepted) applications have a dynamic extent. The extent of the application 
of a function on its argu­ments is the time during which is computed the body of the function, this includes 
the time taken by the computation of all subforms that appear in this body. In that sense, dynamic extents 
are always nested or disjoint. When the language offers non-local exits, the dynamic extent of an application 
might be interrupted before its natural end which is when the function re­turns a value to its continuation. 
To finish a dynamic extent forces the end of all inner-nested dynamic ex­tents. Dynamic extent is strongly 
related to the height of the evaluation stack and governs the possibility of stack-allocating various 
entities such as lexical environ­ments. It is a common compiling optimization to deter­mine (or conservatively 
approximate) the exact extent that entities have and to allocate them accordingly. n-Prog = The set of 
fowns v Id = The set of identifiers Env =Id ~ LOC a Loc = The set of locations u Store = Loc -i Val &#38; 
Val = Fun+ Pair +Num +... pllm= Val* x Store x Ext x Cent ~ PAns K Cent = Store x Val x Ext + PAns < 
Ext = Loc ~ Bool E = Prog ~ Env x Store x Ext x Cent -+ PAns S = Prog* -Env x Store x Ext x Cent _ PAns 
P Figure 1: Domains of Scheme with explicit dynamic extent When continuations have an indefinite extent 
as in Scheme, it is possible that an expression multiply re­turn results. In that case the concept of 
applications having a dynamic extent must be precisely defined. We therefore propose a denotational semantics 
for Scheme formally expressing our notion of dynamic extent. The main question concerning an entity with 
such an ex­tent is whether it is alive or not ? We thus add the do­main Ext to the standard denotation 
of Scheme [Rees &#38; Clinger 86] mapping active locations to the boolean true, see figure 1. Initially 
no location is active. Like the store, this map is passed to functions and con­ 2 First-or second-class 
objects form entities. 175 tinuations. Locations were chosen since they can be compared and thus distinguished. 
The PAns domain is the domain of partial answers yielded by regular (splitter-free) computations. This 
domain will be explicated when describing the semantics of splitter. Except for PAns which stands as 
if it is the domain of the final answers and Ext which is not yet used, the denotations are fairly standard 
and should not pose problems, see figure 2. 2 The splitter operator The Scheme philosophy tries to reduce 
the number of special forms (even if introducing very special functions like call/cc), sticks to a single 
namespace and makes nearly all concepts first-class citizens. Le jin dzt fin is to represent new concepts 
procedurally. We thus express our solution with respect to these tenets: a single function, named split 
t er, is necessary: (splitter (lambda (abort cuil/z.w) ezpressz on) ) ) with (abort (lambda () . ..)) 
and (call/pc (lambda (c) . ..)) and (c expression) When splitter is invoked, the evaluation stack is 
marked. The argument of splitter is a binary func­tion which is then applied on two new synthesized func­tions 
tied to this mark. These two functions can only be safely invoked during the dynamic extent of splitter 
otherwise they provoke a run-time error. If neither abort nor callipc is used, splitter returns what 
re­turns its argument. (splitter (lambda (abort call/pc) foo )) + foo  The first function abort takes 
a single argument, a thunk, and invokes it with the continuation of splitter as continuation. This allows 
to abandon a computation and to return to the level of the mark set by the progenitor splitter. For instance, 
to multiply the elements of a list of numbers and exit if a zero is found, may be written as: (define 
(multllst 1) (splitter (lambda (abort call/pc) (define (mult 1) (if (pair? 1) (if (= (car 1) O) (abort 
(lambda () O)) (* (car 1) (mult (cdr l))) ) 1)) (mult 1) )) ) When abort is invoked, all waiting computations 
upto splitter are discarded and the thunk (lambda () O) is invoked as if it replaces the original splitter 
 form. The second function cal!/pc3 takes an unary function as single argument. It then reifies the partial 
continua­tion upto its parent splitter and invokes its argument on it. When reified, the partial continuation 
is left in place i.e. is still the current continuation. For instance, (splitter (lambda (abort call/pc) 
(cons (call/pc (lambda (c) ; c = (A (x] (cons x a)) (cons b (c (c d))) )) a ))) This form returns ((b 
. ((d . a) . a)) . a). As regular objects, abort and caii/pc have an indef­inite extent but since they 
remove or reify the par­tial continuation upto the associated parent splitter, they must be invoked in 
the dynamic extent of splitter: their safe behavior has a dynamic extent. Contrarily the reified partial 
continuation has an in­ definite extent behavior; once created, it can be used forever: ( (cdr (splitter 
; returns (a partial-cent) (lambda (abortl call/pcl ) (cons a (splitter (lambda (abort2 call/pc2) (cons 
 ~~all/pcl (lambda (c) ; c = (A(x) (cons a (cons b z))) (abort2 (lambda () c)) ))))))))) )C ) ~(ab. c) 
 Since partial continuations have an indefinite ex­tent behavior, splitter can be used to simulate the 
call/cc operator of Scheme. A toplevel expression of regular Scheme is equivalent to the following: (splitter 
(lambda (abortO call/pc) (let ( [call/cc (lambda (f) (call/pc (lambda (c) (f (lambda (v) (aborto (lambda 
() (c v) )) )))) )1) expression ) ) ) There is no restriction on expression which can arbi­ 3 call/pc 
stands for (call with partial continuation . 4 A slight difference might exist if one uses a toplevel 
loop since a new call/cc is synthesized every cycle. 176 let K = Au p( . let K = Au &#38;* ( .$o(&#38;* 
, u , ( , K) in &#38;*[7r*](p, u , ( , ~ ) in ~[nj(p, u, (, d) $*[7r T*] = @7<K. let /$ = k c( . let 
K = Au s < .lc,d , < &#38; > gc , ( ) in ~ [m ](p, a , ( , K ) in :[TI(A U,<, K ) t ~ = Apa<K.K(a, <>,<) 
Pinit (v) = W ong( undef ined variable , v) a~n~t(cr) = wrong( Unknown location , a) Figure 2: Semantics 
of main Scheme special forms trarily invokes call/cc or splitter without interfer-The splitter operator 
first extends the set of active ence. objects with a fresh location yielding ( . It then creates abort 
and call/pc (p and p ) and invokes its argument on them. The new continuation is tcretu,~ while the The 
splitter function separates two effects i.e. former K is pushed onto K*. When a value is sent toreifying 
the partial continuation and removing it from Rreturn, ~,etti,n will consider the current sequence of 
the current continuation, The abort function is a kind continuations and send the value to the first 
of them. of tail-recursivor which takes a thunk and invokes it The abort function just invokes its argument 
at theas if it was in tail position with respect to the associ­level of splitter: it resets the set of 
active objectsated splitter. abort clearly involves a side-effect on and the continuation to these of 
splitter. Contrarilycontrol. It closely corresponds to how exceptions are calZ\pc does not affect the 
set of active objects. Observesometimes handled: the erroneous cornput ations is es­that last and butlasi 
access K from the tail whereas caped and the appropriate handler is invoked at the other models count 
contexts from the head. level where this handler was bound to that exception. On the other hand call/pc 
does not affect control. To express the formal semantics5 of splitter, see figure 3 Generators 3, we 
define the PAns domain of partial answers to be: Our splitter operator can be put to work on the well-PAns 
= Cent ~ Ans known same-fringe problem. Two or more binary trees are compared: same-fringe returns true 
if theywhere Ans is the domain of final answers and Cent all have a similar fringe i.e. the same sequence 
of leaves. is the domain of sequences of continuations. In a com-Classical solutions involve only two 
trees and explicitly putation (&#38;[m]pcT<tc)R*, K and K* forlm together the interleaves two coroutines 
enumerating sequentially the regular full continuation. leaves of the two trees. Non-classical solutions 
can also 5A simulation of splitter written in regular scheme appears be found for example in [Gabriel 
89]. Our solution sat­in appendix. isfies two goals (i) it handles an arbitrary number of (~n~t(a) = 
false t[splitter] = Ac a(~.~~ . allocate(~, 1,kr a . let < = <[a J-I-+ true] K = hT &#38;( .~K* . if 
#tC* = #K* then K(u , &#38;,<)(K* ) else K(u , c, < )(K* ) endif in let p = k* u ( K . if < (a ~1) then 
~K* .&#38;* ~1 (<>, u , < , KretUrn)(iast(~* , 1 + #K*)) else torong( obsolet e escape ) endif p = k* 
c7 ( K . if ( (cz* JI) then AK* . let K* = hilast(< K > jK* , 1 + #fc*) in let p = AC* C7 < K .AK* 
. %m(m , C* ~,, < )(K* $ < K > SK ) in E* JI (< p >,c7 , ~ , )( K*()* ) else wrong( out of extent ) 
endif in &#38;*JI (< p,@ >Im ! < , Kr,,uvI)(< K > ~K*)) Kntwn(u, C, <) = ~K*.K* 1, (~, C, c)(K*tl) iast(~ 
, ~) /* returns the last b elements of K */ butlast(~ , L) /* returns all but the last L elements of 
K */ Figure 3: Semantics of splitter trees and (ii) it is independent of how the tree is walked (cons 
through. leaf Visiting the leafs of a tree, in prefix order, can be (lambda (v) done thanks to: (splitter 
(define (visit tree fn) (lambda (k j ) (if (pair? tree) (set! grab j) (begin (visit (car tree) fn) (set! 
exit k) (visit (cdr tree) fn) ) (c V))))) (fn tree) ) ) )))))))))) We now abstract over this tree walk. 
For each tree When a leaf is found, a pair made of this leaf and the comparing process must receive the 
leaf and the the partial continuation is returned. The splitter partial continuation expressing the rest 
of the visit (and controlling this partial continuation is thus no longer not the rest of the computation). 
If they are all equal valid and cannot be reused. The partial continuation the comparison goes on otherwise 
it is aborted. We which is returned is thus wrapped inside a new invoca­ thus wrap visit into a new function 
which allows to tion of splitter, the new grab and exit functions are return at the same time the leaf 
and the rest of the also updated with respect to this new splitter. It will visit. therefore be possible 
to make a partial continuation of (define (rnake-tree-walker visit) the restarted partial continuation. 
(lambda (tree) We can now simply compare fringes i.e. sequences of (splitter pairs (leaf. continuation) 
as enumerated by a particular (lambda (exit grab) tree-walker: (visit (clef ine (compare-fringes walk 
trees) tree (let ((end (list end))) ; semtlnei (lambda (leaf) (clef ine (end? leaf) (eq? leaf end)) 
(grab (define (loop leafs) (lambda (c) (define (same-leaf? leaf) (exit (lambda () (eq? (car leaf) (caar 
leafs)) ) 178 (or ; all trees are finished ? (every? end? leafs) ; some trees are jinished ? (if (some? 
end? leafs) ??f (and (every? same-leaf? (cdr leafs) ) ; all leaves are equal ! (loop (mapcar (lambda 
(leaf) ((cdr leaf) end) ) leafs )) )))) (loop (mapcar walk trees)) ) ) Finally same-fringe isjust: (define 
(same-fringe , trees) (compare-fri,nges (make-tree-walker vi,sit) trees ) ) Observe the modularity ofthis 
solution. The visit function is expressed in direct style and can be var­ied, for instance to visit every 
other leaf or numeric leaves only, This visit function dc}es not have to know how it is used; in particular 
it does not bear the burden of interleaving the various visits of the different trees. Similarly compare-fringe 
only han­ dles the multiplicity of trees, compares leaves and re­sumes the visiting processes; it is 
not concerned with the details of the tree-walking. The whole burden is borne by make-tree-walker which 
makes computa­tions progress step by step. This example shows that splitter has the ability to construct 
complex generators not restricted tosim­ple and reduced internal state held in some variables. Complex 
generators can compute arbitrary things, be saved in their current state of computation and later on 
resumed. Note that computations within such gen­erators are not restricted and can even use partial con­tinuations. 
Variants Other dressings can be imagined for splitter, we investigate two of them that can be put to 
work in Scheme or other languages. It might be tempting to create a new type to rep­resent marks of the 
evaluation stack. The interface to splitter would become: (splitter (lambda (mark) . ..) Such marks can 
be used thanks to two new func­tions which only know how to handle marks: abort and call/pc: (abort mark 
(lambda () ,.. )) (call/pc mark (lambda (c) . ..)) can be asked whether it isalive or not thanks to a 
third specialized function: (alive-mark? mark) This variant leads to simple type equations, where (Mark 
r) is the type of marks created in a context where splitter must yield a T value. splitter: ((Mark ~) 
-+ r) ~ r abort : (Mark ~) x (Unit ~ ~) ~ r call/pc : (Mark ~) x ((r ~ I-) .+ ~ ) ~ r Obviously we gain 
a little power since it is now pos­sible to explicitly test if the mark is alive or not but the neat 
interest of this dressing is that only one object is allocated (the mark) instead of the two synthesized 
functions abort and call/pc. On the other hand the interface is more complex since at least one type 
and three more specialized functions have been added to Scheme. Another variant is to consider that marks 
are no more first-class objects but must be accessed &#38; /aCOM-MON LISP6 with ad-hoc special forms. 
(splitter label body) (abort label new-body) (call/pc label (lambda (c) expression)) This introduces 
a new namespace, the space of Iabe[s which associates names to marks. This space is lexi­cally managed: 
a label can only be used in the body of the splitter special form binding it. This does not restrict 
the power of this variant since an abort or call/pc special form referencing this label can be closed 
in a lambda abstraction and exported outside. Using this solution makes simpler for a compiler to recognize 
the places where some optimizations might be performed such as the validity of a mark, static com­putation 
of partial continuations or abortion. It also makes the compiler more complex since it introduces new 
special forms. Depending on the natural inclination of the embed­ding language, the splitter facility 
can be provided under multiple forms. To have first-class marks and specialized functions might be a 
good choice, 5 Implementation From the viewpoint of the implementor, splitter in­duces the same problems 
as call/cc in Scheme. Above all is the management of the evaluation stack. A partial continuation is 
represented by a slice of the execution stack. We propose an implementation scheme where partial continuations 
are not copied in the heap nor copied back onto the execution etadi,The technique ia closely related 
to [Hieb &#38; Dybvig &#38; Bruggeman 90]. The partial continuation is still functional but the 6 It 
is local exit a .sImple facilities exercise to write the structured lexical of COMMON LISP, see [Steele 
90]: block non. and mark is now a first class non-procedural object which return-from with this variant 
of splitter. 179 Once a partial continuation is reified, the correspond­ ing stack slice is considered 
as frozen and must not be overwritten before the Garbage Collector unfreezes it. Let us only consider 
push and pop as the only opera­tions on the evaluation stack, Push allocates new ac­tivation records 
and increments the stack pointer (SP) while pop just decrements it. Observe that pop is non destructive. 
We must then forbid pushing while SP is in a frozen zone. We thus suppose to have an extra pointer (free-stack 
or, FS, for short) above which there is no frozen zone: therefore it is always safe to al­locate new 
activation records there, see figurefigstackl. In regular mode only SP is used. When a partial contin­uation 
is created or activated, FS is set to SP. Popping activation records is always done with respect to SP. 
Conversely pushing a frame depends on the mode: in regular mode, pushing a frame is done relatively to 
SP but if SP is in a frozen slice i.e. if SP<FS then push­ing must be done relatively to FS. A special 
frame (or return address) *R* is then pushed at FS to save the current SP. Afterthat SP is reset to FS 
(plus some off­set) and pushing is performed as usually since we are now in a non-frozen zone. This extra 
work is only done once since afterthat SP is higher than FS. When re­turning to *R*, SP is reset to its 
old value somewhere in the frozen zone. frozen zone evaluation stack Figure 4: Calling a function from 
a frozen zone An extra stack, the control stack, is necessary. Each times split t er is called, its 
continuation is pushed onto the control stack, When a partial continuation is created, the corresponding 
slice of the control stack is copied in the heap, see figure 5. When a partial continuation is called, 
the current SP is pushed onto the control stack as well as the saved slice. Then SP is set to the top 
of the partial continuation. Its last frame (*contPOP*) is a special activation record imposing to return 
where the control stack specifies it. The benefits of this implementation are: (i) a stack­based discipline 
with implicit control linkage is used, (ii) copying stack slices is avoided, (iii) mutable loca­tions 
can be directly put in the stack since stack slices are never duplicated. There are also inconveniences. 
p?rtial. continuation call/pc-+ = splitter + *contPOP control stack H-II evaluation stack Figure 5: 
Partial continuation reification The technique puts a fix cost on every push (two in­structions) to 
check the current mode i.e. to compare FS and SP. When a stack slice is frozen when set­ting FS, the 
whole bottom of the stack is frozen. The stack must now be scavenged (as in [Hieb &#38; Dybvig &#38; 
Bruggeman 90]) and this requires cooperation of the GC and a perfect knowledge of the stack, This prob­ably 
precludes conservative GCS, but to compact the stack may allow some frame elimination as illustrated 
in [Saint-James 84, Hanson 90]. The above implementation of splitter is not tail­optimal: the synthesized 
functions abort and cal!/pc have to be invalidated when splitter returns. On the other hand, call\pc 
is tail-optimal. Yet another in­convenience is that strictly tail-recursive calls are not possible from 
a frozen zone since a new frame has to be pushed at FS. The tail-recursion property is immedi­ately regained 
since afterthat calls are performed from a free zone. 6 Related Works Felleisen and others have introduced 
prompts and partial continuations in a series of paper [Felleisen 88, Felleisen &#38; Wand &#38; Friedman 
&#38; Duba 88, Sitaram &#38; Felleisen 90]. Their control operators behave dynam­ically since control 
can only abstract control upto the most recent run. We can easily provide these opera­tors: (let ((run-stack 
 ())) (set! run (lambda (thunk) (let ((old-rs run-stack) ) (beginO (splitter (lambda (abort call/pc) 
(define (cpc f) (call/pc (lambda (c) (abort (lambda ( ) 180 (f c))) )) ) (set! run-stack (cons cpc run-stack) 
) (thunk) ) ) (set! run-stack old-rs) ) ) ) ) (set! control (lambda (f) ((car run-stack) f) )) ) The 
above programmation records all call/pcs in a stack in order for control to abstract upto the last run7. 
Our construct is not limited to the latest con­text; it is possible to take partial continuations upto 
different splitters . Sitaram and Felleisen [Sitaram&#38; Felleisen 90] introduced hierarchies to solve 
the prob­lem of correctly pairing runs and controls but require some protocol to be respected. Oursolution 
solves nat­urally this problem. Another major point is that our construct reintro­duces dynamic extent 
continuations which are both useful and efficient. The AbstractingC ontrol paper [Danvy&#38; Filinski 
90] introduced twospecial forms acting ascontrolop­erators: shift and reset. A denotational semantics 
accompanies them. Intuitively, a program using these special forms is translated into aregular program 
with explicit continuations i.e. written in an Extended Con­tinuation Passing Style. These programs can 
also be directly typed thanks to complex judgments involving the natural type of the expression and of 
its continua­tion yielding another natural type for the final result, see [Danvy &#38; Filinski 89]. 
The main difference with our work is that they only consider thle first embed­ding contexts (i.e. the 
head of < ~ > j~* in our ter­minology) whereas we count them from the tail. To change (lambda (v* ) r) 
into (lambda (v*) (reset r) ) might deeply affect the meaning o,f a whole pro­gram. But to replace it 
with (lambda (v ) (splitter (lambda (k j) T)) ) does not alter it. This property eases modularity. Hieb 
and Dybvig introduced a new construct spawn in [Hieb &#38; Dybvig 90 b]. Although close to our work there 
are some fundamental differences. spawn is de­fined in a concurrent context and allows to suspend or 
~ol)me bunches of Processes. (spawn (lambda (Con. . . . ) ) creates a new process controlled by con­trol. 
When control is invoked, it applies its argument, a monadic function, on the partial continuation up 
to spawn. Moreover it freezes all the concurrent sub­computations initiated between spawn and the invo­cation 
of control. These subcomputations will be re­sumed when the partial continuation is called. control can 
only be used while the process is not suspended. 7A dynamic binding facility would simplify the management 
of run-stack. spawn can be accurately written with splitter. But since the suspend/resume capabilities 
are needless but to handle concurrency and forbid to write sequential programs calling control inside 
control, we therefore simplify spawn to the following sequential version: (define (spawn f) (clef ine 
(mk-cpc curr-cpc curr-abort ) (lambda (c) (curr-cpc ; takes the current partial continuation (lambda 
(cc) (curr-abort ; and aborts it (lambda () (c (lambda (v) (splitter (lambda (na ncpc) ; resets the root 
of the process (set ! curr-cpc ncpc) (set ! curr-abort na) (cc V))))))))))) (splitter (lambda (abort 
call/pc) (f (mk-cpc call/pc abort)))) ) The first difference concerns the lifetime of contro~ which 
is not reduced to the dynamic extent of spawn. Every times the partial continuation is invoked, it is 
le­gal to call control again. We simulated this behavior by wrapping the partial continuation itself 
within a new splitter. This eases to multiply suspend a computa­tion upto its root (see, for instance, 
the same-fringe example) but makes more difficult to know what is the partial continuation since it is 
upto the last point where it has been invoked. Assume that the evaluation order of arguments is from 
right to left, and consider the following example where the partial continuation itself contains another 
call to control: (spawn (lambda (f) (cons (f (lambda (cl) (cons 1 (cl 4)) )) (f (lambda (c2) (cons 2 
(c2 3)) )) ))) The value is (2 1 4 . 3). The reason is when calling f oo, the partial continuation C2 
is (lambda (u) (cons (f (lambda (cl) (foo c1 4))) u)), The new par­tial continuation reified by the second 
f in c I is: (lambda (y) (cons y 3)) and not the whole par­tial continuation upto spawn i.e. (lambda 
(v) (cons (cons v 3))). In effect in this case there are two si­multaneous roots and Hieb and Dybvig 
restrict the par­ tial continuation to take upto the most recent root i.e. the partial continuation is 
restricted upto the calling site off. The analog form using splitter is: (splitter 181 (lambda (abort 
call/pc) (cons (call/pc (lambda (cl) (abort (lambda () (foo CI 4))) ) ) (call/pc (lambda (c2) (abort 
(lambda () (cons2 (c23)))))) ) )) The value, assuming thesameorderof evaluation8, is (124. 3) since the 
second canto call/pc reifies upto splitter. [Danvy 87] Olivier Danvy, Memory Allocation and Higher-Order 
Functions, SIFPLAN 87 Conference, pp 241-252.  To sum up, our construct controls more precisely ex­tent 
and still offers spawn. Conclusions Partial continuations are new and very powerful tools. Their use 
is nevertheless complex. Not being able to know up to where, escapes (provoked by abort) or partial continuations 
are created (thanks to call/pc), makes partial continuations nearly useless except for toy programs. 
Our splitter construct allows to ap­propriately pair two moments: marking the evalua­tion stack, referring 
to the lower part of this evalu­ation stack (under the mark) or referring to the inter­mediate slice 
(above the mark) between this mark and the current control point. It is thus possible to write programs 
using simultaneously multiple marks without interferences. We showed how to use splitter to pro­gram 
generators enumerating leaves of trees as well as we showed how to rebuild call/cc from splitter. Our 
view of computation recognizes that computa­tions involves a structure of nested control points. A partial 
continuation is therefore taken upto an active control point. It is interesting to observe that this 
view supports the concept of dynamic extent but still allows to define indefinite extent partial continuations. 
Acknowledgements Thanks to Matthiaa Felleisen, Dorai Sitaram, Olivier Danvy, Pierre Weis and Damien Doligez 
for their help while drafting, revising and discussing this paper. Bibliography <RefA>[Clinger 88] William 
Clinger, Anne Hartheimer, lrn­piementation Strategies for Continuations, Pro­ceedings of the 1988 ACM 
Lisp and Functional Pro­gramming, Snowbird, Utah, July 1988, pp 124-131. 8Remark that the final value 
strongly depends on the order of evaluation. Partial continuations are at their best when used in unary 
contexts. [Danvy &#38; Filinski 89] Olivier Danvy, Andrzej Filinski, A Functional Abstraction of Typed 
Contexts, DIKU report 89/12, DIKU, University of Copenhagen, Denmark, August 1989. [Danvy &#38; Filinski 
90] Olivier Danvy, Andrzej Filinski, Abstracting Control, ACM conference on Lisp and Functional Programming, 
Nice, France, Juin 1990. [Felleisen &#38; Wand &#38; Friedman&#38; Duba 88] Matthias Felleisen, Mitchell 
Wand, Daniel P Fried­man, Bruce Duba, Abstract Continuations: A Maihematica! Semantics for Handling Full 
Func­tional Jumps, ACM conference on Lisp and Func­tional Programming, Snowbird, Utah, July 1988. [Felleisen 
88] Matthias Felleisen, The Theory and Practice of First-Class Prompts, ACM SIGACT-SIGPLAN Symposium 
on Principles of Program­ming Languages, San Diego, CA, january 1988. [Friedman &#38; Wand 84] Daniel 
P. Friedman, Mitchell Wand, Reification: Reflection without Metaphysics, Proceedings of the 1984 ACM 
Symposium on Lisp and Functional Programming, pp 348 355. [Gabriel 89] Richard P. Gabriel, Using CL OS-iike 
Concepts in a Prototyping System, Common Lisp Object System Workshop, OOPSLA 89, October 1989. [Hanson 
90] Chris Hanson, Ejjicient Stack Allocation for Tail-Recursive Languages, ACM conference on Lisp and 
Functional Programming, Nice, France, Juin 1990. [Haynes &#38; Friedman 87a] Christopher T. Haynes, Daniel 
P. Friedman, Abstracting Timed Preemption with Engines, Computer Languages, Volume 12, # 2, 1987, pp 
109-121. [Haynes &#38; Friedman 87b] Christopher T. Haynes, Daniel P. Friedman, Embedding Continuations 
in Procedural Objectsj ACM TOPLAS, Volume 9, # 4, October 1987, pp 582-598. [Hieb &#38; Dybvig &#38; 
Bruggeman 90] Robert Hieb, R. Kent Dybvig, Carl Bruggeman, Representing Con­trol in the Presence of First-Class 
Continuations, Proceedings of the ACM SIGPLAN 90 Conference on Programming Language Design and Implemen­ 
tation, White Plains, NY, June 1990. [Hieb &#38; Dybvig 90b] Robert Hieb, R. Kent Dybvig, Continuations 
and Concurrency, Second ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, 1990, 
pp 128 136. BIBLIOGRAPHY 182 [Johnson 87] Gregory F. Johnson, GL -A Deno­tational Test bed with Continuations 
and Partial Continuations, proceedings of the SIGPLAN 87 Symposium on Interpreters and Interpretive Tech­niques, 
Saint-Paul, MA, June 1987. [Johnson &#38; Duggan 88] Gregory F. Johnson, Dominic Duggan, Stores and Partial 
Continuations as First-Ciass Objects in a Language and its Environment, ACM SIGACT-SIGPLAN Symposium 
on Princi­ples of Programming Languages, San Diego, CA, january 1988. [Rees &#38; Clinger 86] Jonathan 
A. Rees, William Clinger, Reviseds Re­port on the Algorithmic Language Scheme, ACM SIGPLAN Notices, 21, 
12, Dec 86, pp 37-79. [Saint-James 84] Emmanuel Saint-James, Recursion is More Efficient i!han Iteration, 
1984 ACM sympo­sium on Lisp and Functional Programming, Austin, Texas. [Schmidt 86] David A. Schmidt, 
Denotational Seman­tics, A Methodology for Language Development, AL lyn and Bacon, Inc., Newton, Mass., 
1986. [Sitaram &#38; Felleisen 90] Dorai Sitaram, Matthias Felleisen, Control Delimiters and Their Hierarchies, 
Lisp and Symbolic Computation: An International Journal, Volume 3, # 1, January 1990, pp 67-99. [Steele 
90] Guy L. Steele Jr., Common Lisp, the Lan­guage, Second Edition, Digital Press, Burlington MA, 1990. 
[Stoy 77] Joseph E. Stoy, Denotational Semantics: The Scott-Strachey Approach to Programming Lan­guage 
Theory, MIT Press, Cambridge, Mass., 1977. [Wand 80] Mitchell Wand, Continuation-Based MuL tiprocessing, 
Conference Record of the 1980 Lisp Conference</RefA>. Appendix: Embedding splitter in stan­dard Scheme In [Sitaram 
&#38; Felleisen 90] was explained how to pro­gram control/run in Scheme. We like this idea since it helps 
to popularize the concept of partial continua­tions. The embedding that follows haa been designed to 
mimic a native implementation. A call to call/cc must be thought of just as a copy of the stack-pointer. 
Push and pop operations are simu­lated with cons and cdr. Other allocaticms in the heap are named with 
a make- prefix. We make explicit the data that are necessary and do not use implicit closures to keep 
them, (clef lne stack-of-marker ()) (define (splitter f) (let ((marker () ) (v ()) (topmarker ()) ) 
(set! v (call/cc (lambda (kk) (set ! marker (cons kk ())) (set ! stack-of-marker (cons marker stack-of 
-marker) ) (let ((v (f (make-abort marker) (make-call/pc rnarlcer) ) ) ) (set-car ! (car stack-of-marker) 
() ) v)))) (if (not (null? (caar stack-of-marker))) II Someone did (kk thunk) (begin ; ; markers downto 
marker are obsolete. (obsolete-stack ! marker) . Compute thunk with continuation kk. t;et! v (v)) (set-car 
! (car stack-of-marker) () ))) (set ! topmarlrer (car stack-of-marker)) (set! stack-of-marker (cdr stack-of-marker) 
) (cond ;; The continuation is return ((null? (cdr topmarker)) V) end of a partiai continuation. t~lse 
((cdr topmarker) v)) ) ) ) (define (make-abort marker) (lambda (thunk) (if (null? (car marker)) (wrong 
obsolete splitter ) ;; Return to the marker. ((car marker) thunk) ) ) )  (define (make-call/pc marker) 
(lambda (g) (if (null? (car marker)) (wrong out of extent ) (call/cc (lambda (kj) (g (make-pckj marker)) 
))))) (define (make-pc kj marker) (let ((slice (marker-prefix stack-of-marker marker ))) (lambda (v) 
 183 (call/cc (lambda (kc) (set! stack-of-marker (append slice (cons (cons Xt kc) stack-of-marker ) ) 
) (kj v)))))) (define (marker-prefix 1 m) (if (eq? (earl) m) () (cons (cons #t (cdar 1)) (marker-prefix 
(cdr 1) m) ))) (define (obsolete-stack! marker) (if (eq? (car stack-of-marker) marker) marker (begin 
(set-car! (car stack-of-marker) () ) (set! stack-of-marker (cdr stack-of-marker) ) (obsolete-stack! marker) 
) ) ) 
			
