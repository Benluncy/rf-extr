
 A MICROPROGRAM SIMULATOR AND COMPILER FOR AN ENHANCED VERSION OF TANENBAUM S MIC-1 MACHINE John L. Donaldson 
Department of Mathematical Sciences The University of Akron Akron, Ohio 44325 donaldson@mkron.edu I. 
INTRODUCTION One of the objectives of a course in computer organization is to show how the machine language 
of a computer (with which students are already familiar through an assembly language course) is actually 
imple­mented. This is normally accomplished by first gaining familiarity with digital logic (gates, flip-flops, 
registers, multiplexer, etc.) and then proceeding to design a sim­ple machine. The last stage of this 
design process is to design the control unit, either by hardwired control or microprogramming. Thus, 
microprogramming is a cen­tral topic in the study of computer organization, tying together the study 
of digital logic with the implementa­tion of the machine language of a computer. It follows that laboratory 
experience in microprogramming should be an important part of the computer organization course. In most 
cases, however, access to microprog­rammable hardware is not available. Although some instructors have 
utilized commercially available microprogrammable processors [1] or actually built microprogrammable 
hardware for classroom use [2], the most common approach has been to rely on software simulation of 
hardware at the microprogramming level [3-12]. The simulation approach allows students to carry out a 
variety of exercises involving the implemen­tation of a conventional machine language. The most popular 
target architecture for classroom simulators has been the Mic-1 machine described in the Computer Organization 
text of Tanenbaum [13]. The Mic-1 is a microprogrammable architecture which Tanenbaum uses to implement 
a simple machine instruction set for a single-accumulator machine called the Mac-1. One of the limitations 
of existing simulators is that the basic hardware of the machine is fixed; the per­formance of an implementation 
can be improved by modification of the microprogram, but not the hardware itself. In particular, Tanenbaum 
s architecture was designed as a teaching tool, not for actual use, and con­tains a number of obvious 
inefficiencies. In order to Permission to oopy without fee all or part of this materiai is granted provided 
that the copies are not made or distributed for direct oommereiai advants e, the ACM copyright notice 
and the titie of the publication and!tsdateappear, andnotkeisgiven that eopyi is by permission of the 
Association of Computing Machinery. $o copy othervdsq or to republish, requires a fee and/ors ecific 
permission. SIGCSF! 95 3/95 Nashvfiie, TN USA @ 1995 ACM 0-89791 -693-xt9510@33 ....50.5O provide students 
with a better tool with which to explore the subject of microprogramming, the author has written a new 
simulator, the MX, which simulates two different versions of the Mlc-1 machine: the original version 
described by Tanenbaum, and an enhanced version (dubbed the Mic-X ) which makes it possible to imple­ment 
the same instruction set, or an extended one, more efficiently. The use of the two versions in the class­room 
serves several purposes: 1. The enhanced machine contains features, such as a carry flag and a multiway 
branching capability, that are typically found on actual machines. 2. The two different machines can 
be used for experi­ments comparing the efficiency of different algorithms, or of the same algorithm implemented 
on different architectures. It is not difficult to design experiments which demonstrate a significant 
variation in efficiency between the two machines. 3. The two machines illustrate an important issue 
in computer organization: how the same conventional machine language can be inlplemented on different 
architectures.  The MX software has several features designed to facilitate convenient usage: 1. A compiler 
to translate microcode written in Tanenbaum s Pascal-like high-level language into numeric code suitable 
for use with the simulator. 2. A batch mode of operation which makes it possible to automate gradtng 
of student assignments. 3. A cycle counter which makes it possible to evaluate and compare the efficiency 
of microprograms.  This paper describes the MX simulator and com­piler and some of the student exercises 
that can be car­ried out with it. IL THE MX SIMULATOR A. User interface The MX simulator can be run in 
one of three modes of operation: full-screen interactive, command-Iine interactive, and batch. The full-screen 
mode presents a screen containing all the internal registers of the Mic-1 machine and the current contents 
of each one. Register values are updated on the screen continuously as the machine runs. The last two 
lines of the screen are reserved for entering commands, which may be used to change register values, 
start and stop execution of the machine, etc. This mode gives the best visual feedback to the user, and 
is recommended for students as they develop and debug their microprograms. The full-screen mode is ideal 
for student use, but somewhat cumbersome for grading student programs. A batch mode allows the instructor 
to prepare a standard test script of commands and test each student program against the script in the 
background. A typical test script would load the student s microprogram into the control store, load 
a test machine language program into main memory, and then begin execution. Register con­tents can be 
displayed at key points in the program, For example, lC student.cod/ load control store lm test.cod/ 
load memory br 2 / set a breakpoint at control store address 2 go I begin execution dr ac / display contents 
of accumulator etc. The output of the script can be directed to a file, which can then be compared with 
a file containing the correct results. This significantly reduces the effort in running and testing student 
programs. A third mode which is interactive, but strictly command-oriented, was included primarily to 
facilitate debugging of the simulator itself. Scripts can also be invoked as command-line arguments when 
the simulator program is invoked from UNIX or DOS, or from the do command in any mode. Another important 
feature of the simulator is a cycle counter, which simply counts the number of machine cycles during 
execution. Commands are pro­vided to reset or display the cycle count. This is a use­ful tool in evaluating 
the efficiency of microcode. Some experiments utilizing the cycle count are described in sections IV 
and V. B. Commands When the simulator is running, the user has avail­able a variety of commands to modify 
or display the state of the machine, control execution of the machine, execute script files, or to manipulate 
the cycle count. They are summarized here: 1. Execute one machine cycle or subcycle. This allows the 
user to single-step through a microprogram. 2. Set and clear breakpoints, 3. Execute until a breakpoint 
is reached, or until a key­board break occurs. 4. Execute a script file. A script file contains a series 
of commands, one per line, which are executed in sequence. A script may invoke other scripts.  5. Display 
or modify the contents of any register, memory location, or control store location. 6. Display or reset 
the cycle counter. 7. Load the random-access memory or control store from a file. 8. Toggle between 
the standard and enhanced machines.  C. Implementation The simulator was written in C++ and compiled 
using the gcc compiler for a SPARC workstation run­ning the Solaris operating system. It uses the UNIX 
curses library for full-screen control. A DOS version is also available. III. THE COMPILER The simulator 
expects each microprogram to be loaded from a file containing the microcode in numeric form. Each line 
of the input file must be in the form location cl C2 C3 ... [ / comment ] showing the location in the 
control store in which microinstruction c 1, c2, c3, etc. were to be loaded. Each line can hold 1 or 
more microinstruction and an optional comment field. Encoding microinstruction is a valuable exercise 
and most definitely shoulcl be a part of the assignments related to the Mic-1. However, for large microprograms 
of 50 to 100 or more instructions, this exercise becomes busywork. So the lMX software also contains 
a microprogram compiler which translates a file containing the Pascal-like rnicroinstructions found in 
Tanenbaum into a file of numeric locations and microinstruction, in a format suitable for loading into 
the simulator. The MX compiler generates an output file containing the numeric microcode along with the 
original microinstruction, which appear as comments. Two other features are provided by the compiler 
which simplify the writing of microprograms. In Tanenbaum s usage, each statement is preceded by a numeric 
label identifying the control store address at which the statement is to be stored. The NIX compiler 
allows these labels to be omitted, using default number­ing of unlabeled statements by simply incrementing 
the location counter. Also, symbolic labels are supported. For example, the first few lines of Tanenbaum 
s Mac-1 microprogram, modified to use symbolic addressing, appear as follows in the compiled output file: 
O H1OCOOOOO/ TOP: mar:=pc; rd; 1 HO0506000 / pc:=pc+l; rd; 2 HB0130024 / ir:=mbr; if n then goto L1; 
3 H24243313 I tir:=l~hlft(ir+ir); if n then goto LO1; 35 H68118300 / ac:=ir&#38; amask; goto TOP; 36 
H24143326/ Ll: tir:=lshift(ir+ir); ifnthengoto Lll; etc. The compiler, based on a recursive descent parser, 
per­forms simple syntax error checking. It also performs an important form of semantic error checking: 
determining whether or not a specified microinstruction can be car­ried out in a single machine cycle. 
Syntactically, the microprogram language allows several operations, separated by semicolons, to appear 
in a single microin­struction; for example, mar:=sp; mbr:=pc; The compiler must analyze such an instruction 
to deter­mine what, if any, combination of control signals can be used to carry out the operations; if 
none is possible, an error message is generated. The example above is, in fact, a legal microinstruction 
because both of these data transfers can be performed in a single machine cycle. The first transfer utilizes 
the B bus, while the second uses the A bus. However, the similar instruction mar=sp; mbr:=pc+ac; cannot 
be compiled because the A bus would have to carry both sp and ac. In this case, the compiler gen­erates 
the error message Overloaded field: A bus . As another example, consider the microinstruction mbr:=ac+pc; 
sp:=ac+pc; This instruction is legal, because both transfer operations can be performed with the same 
settings of the A bus, B bus, and ALU operation, with ALU output routed to both the sp and mbr registers. 
However, the similar instruction mbr:=ac+pc; sp:=ac &#38; pc; is illegal and generates the message Overloaded 
field: alu , because the first transfer requires the ALU to per­form addition, while the second requires 
the ALU to perform a logical and operation. These examples are good exercises to illustrate the level 
of parallelism that is permitted by the Mic-1 architecture.  IV. SAMPLE ASSIGNMENTS Since the purpose 
of a microprogram is to imple­ment a machine s instruction set, the projects assigned are typically either 
to write an implementation of an instruction set or to modify an existing one. Tanenbaum provides a complete 
microprogram which implements his Mac-1 machine; a variety of modifications have been assigned which 
extend the instruction set of the Mac-1. Most of these involve adding new conventional machine language 
instructions. Some typical student project assignments are described here: 1. The Tanenbaum Mac-1 machine 
has 8 instructions with a 7-bit opcode; in each of these the 8th bit is unused. The assignment is to 
extend the 7-bit opcodes to 8 bits, thereby freeing up opcode space and allowing as many as 8 new instructions 
to be created. 2. On the Mac-1, jump instructions have a 4-bit opcode and a 12-bit destination address. 
Modify several of these instructions so that they have an 8-bit opcode and an 8-bit PC-relative destination. 
This frees up some of the 4-bit opcodes which can then be used for other instructions (such as multiply 
and divide). 3. The Mic-1 has 6 registers labeled A-F which are intended as work registers (not visible 
in the conven­tional machine language architecture). However, in Tanenbaum s microprogram, only the A 
register is actu­ally used. Design and implement one or more instruc­tions to make some of these registers 
visible to the machine level programmer. 4. Using the E register as an index register, implement two 
new instructions, LODX (load indexed) and STOX (store indexed), defined as  LODX: AC := M[XXX + E]; 
STOX: M[XXX + E] := AC; where XXX is a 12-bit memory address specified in the instruction and M[i] represents 
the contents of the ith location in random access memory. 5. Using the F register as a high-order extension 
of the accumulator, impl=ment a mult~ply and a divide instruc­tion. For example, multiply can be defined 
as [F,AC] := AC * M[XXX]; Divide can be defined as AC := [F,AC] div M[XXX]; F := [F,AC] mod M[XXX]; Both 
signed and unsigned versions of these instructions make interesting exercises. 6. Determine the average-case 
and worst-case cycle counts for your multiply and divide algorithms. V. THE ENHANCED MACHINE In giving 
these assignments and observing the resulting programs written by students, it has been observed that 
two minor enhancements to the Mic-1 architecture (that is, the data path), can result in a significantly 
more efficient implementation of the Mac-1 machine language. In this section, two such modifications 
are presented. Both have been incor­porated into the simulator. (The user may choose either the standard 
machine or the enhanced version.) One enhancement is to provide a carry flag which is particu­larly useful 
in the implementation of multiplication and division instructions; the other is a multiway branching 
capability which can be used to speed up instruction decoding. A. The carry flag. Multiplication algorithms 
at the bit level are nor­mally implemented using a loop which repeatedly shifts and adds. (See, for example, 
[14] or [15].) Critical to many of these algorithms is testing of the carry flag when addition is performed, 
particularly in multiplying two unsigned n-bit integers on a machine with n-bit registers and ALU. On 
the Mic­ 1, no carry flag is gen­ erated by the ALU. Nevertheless, it is possible to deter­ mine whether 
a given addition generates a carry, using the following logic: The addition operation c:=a+b generates 
a carry t~ and only if ~bo I @o I boi50 (The O subscript indicates the high-order bit of the regis­ter.) 
Using this rule it is possible to write a segment of microcode to implement algorithms which rely on 
a carry test, but the resulting code is inefficient and cumbersome. In the Mic-X machine, the ALU is 
extended to generate a carry flag in addition to the n (negative) and z (zero) flags found on the Mic-1. 
This flag is directed to the microinstruction sequencing logic. It is also necessary to provide the microprogrammed 
a means by which to test the flag. In the Mic-X, the COND field (which specifies a branch condition) 
is extended to 3 bits, allowing for no branch, unconditional branch, branch on n, branch on z, or branch 
on carry. One particularly interesting example of how the carry flag can be used involves two s complement 
multi­plication. The standard algorithm for this operation, Booth s algorithm, utilizes a series of double-word 
right arithmetic shifts and requires testing the low-order bit of a register. This algorithm can be coded 
on the Mic-1 or Mic-X; but with the carry flag in place, the architecture is better suited to an algorithm 
based on left shifts and testing of the high-order bit of a register, The built-in test conditions of 
the Mic-1 are based on testing the leftmost bit of a register, not the rightmost. The shifter performs 
logical shifts, not arithmetic; arithmetic shifts can be programmed only at the expense of additional 
machine cycles. A good exercise is to ask the students to implement Booth s algorithm in microcode (or 
pro­vide it to them), and then write their own algorithm using left shifts which will outperform Booth 
s algo­rithm on the Mic-X. B. Instruction decoding with a multiway branch. The second enhancement makes 
the decoding of opcodes much more efficient on the Mic-X than the Mic-1. Mac-1 opcodes are either 4 or 
7 bits long, beginning with the first bit of each 16-bit instruction. Tanenbaum s Mic-1 microprogram 
repeatedly performs a test and branch on the high bit of the instruction (using the n flag), then shifts 
the instruction left to access the next bit. That is, a binary decision tree is formed within the microcode 
until the entire opcode has been examined and tested, bit by bit. The resulting decode time (4 or 7 machine 
cycles) is often greater than the time required to carry out the instruction itself. A more efficient 
way to handle instruction decod­ing, suggested, for instance, by Mano [14], is to provide some form of 
multiway branching capability within the microprogram. The branch should be based on the opcode bits 
of the IR (instruction register), which is connected directly to the microprogram sequencing logic. On 
the Mic-X, this is done without adding greatly to the hardware requirements of the machine by generating 
a branch address from bits 0-3 of the ALU output, extended to 8 bits with O s, and then ORed with the 
8-bit microinstruction address field. That is, branch address = (0,0,aluG3,0,0) I adclr~~ (Modification 
of the hardware data path 10 accomplish this is a good student exercise.) By using a branch address of 
0x80, 0x40, or OxCO, this will cause a 16-way branch to the location of the microcode which interprets 
the particular opcode. (The two 0s appended on the right space out the desti­nation addresses by 4. Most 
instructions can be inter­preted within four microinstruction. For longer microprograms, such as multiply 
or divide, a branch can be taken to utilize some of the unused control store addresses outside the range 
of the multi way branch.) Thus, the 4-bit opcodes are decoded in a single machine cycle. This mechanism 
is also designed to help in decod­ing longer opcodes. The Mic-1 has a group of instruc­tions with 7-bit 
opcodes; the author normally extends these to 8 bits in exercises assigned to students. The 7­or 8-bit 
opcodes can be decoded in two of the multiway branch instructions, one based on bits O-3 of the Ill and 
the second based on bits 4-7. To make this reasonably efficient, a method is needed to erase the bits 
which have already been decoded and move bits 4-7 to posi­tions O-3 of the IR. To accomplish this, another 
modification of the architecture is needed: a shift left of 4 bits. So, the shifter field in the MIR 
of the Mic-X machine is interpreted as follows: O: no shift 1: right shift (1 bit) 2: left shift (1 bit) 
3: left shift (4 bits) The following code is a segment of the modified microprogram based on this multiway 
branch instruc­ tion: TOP: mar:=pc; rd; pc:=pc+l; rd; ir:=mbr; goto (mbr I 64); 64: mzw=ir; rd; // LODD 
instruction rd; ac:=mbr; goto TOP; 124: tir:=lshift4(ir); goto (tir I 128); 128: mar:=ac; rd; // PSHI 
instruction sp:=sp+(-1); rd; mar:=sp; wr; goto 69; 132: mar:=ac; rd; goto 129; Here are some suggested 
exercises based on the Mic-X: 1. Rewrite the Mac-1 microprogram using the multiway branch forinstmction 
decoding. 2. Compare the cycle counts for a given conventional machine language program in both versions. 
 3. Implement signed and/or unsigned multiplication and/or division instructions, Compare the cycle counts 
to those for the same algorithms implemented on the Mic-1. 4. Derive formulae for the number of cycles 
required to execute the routines from exercise 3, written as a func­tion of the number of bits in each 
operand. 5. Design and implement one or more instructions to make the carry flag visible to the machine 
language pro­grammer. Write a machine language subroutine to per­form addition on two multi-word integers. 
 6. Modify the entire instruction set and microprogram so that the machine appears to have a 32-bit accumula­tor. 
 7. Write two versions of a machine language program to find the sum of an array of 32-bit integers: 
one for the 16-bit Mic-X machine and one for the 32-bit machine created in #6. Show which is more efficient, 
implementing 32-bit addition at the microprogram level or at the conventional machine language level. 
   VI. CONCLUSIONS The MX simulator provides students with the opportunity to get hands-on experience 
in the area of microprogramming. It contains several features (both full-screen and batch modes; the 
microprogram com­piler) designed to facilitate ease of use by both student and instructor. The enhanced 
mode implements a more realistic machine and provides an environment suitable for a variety of challenging 
exercises and experiments. As has been noted by others in the field, the next logical step is to provide 
a means by which the base architecture can be modified by the student. MX does not allow this. However, 
the use of an alternative ver­sion of Tanenbaum s architecture does give the student some basis for comparison 
and an opportunity to explore and evaluate different implementations of the same con­ventional machine 
language instruction set. The MX simulator and compiler are available by anonymous ftp at kira.cc.uakron.edu 
in the directory /pub/Compsci. REFERENCES <RefA>1. Moore, F. L., Teaching Microprogramming Princi­ples, SIGCSE 
Bulletin, vol. 15, no. 1, February, 1983, pp. 112-115. 2. Thomas, P. A. V., MICROM: A Microprogrammed 
Computer, SIGCSE Bulletin, vol. 22, no. 3, September, 1990, pp. 11-20. 3. Donaldson, J. L., MicMac: 
A Microprogram Simu­lator for Courses in Computer Organization, SIGCSE Bulletin, vol. 19, no. 1, February, 
1987, pp. 428-431. 4. Cutler, M. and Eckert, R., A Microprogrammed Computer Simulator, IEEE Transactions 
on Education, E-30, no. 3, 1987, pp. 135-141. 5. Carlson, D., Simulated Microprogramming in the Classroom, 
SIGCSE Bulletin, vol. 19, no. 4, December, 1987, pp. 60-63. 6. Harris, J. A., A Microprogramming Project 
for a Course in Computer Systems, SIGCSE Bulletin, vol. 20, no. 2, June, 1988, pp. 43-49. 7. Sayers, 
J. and Martin, D., A Hypothetical Computer to Simulate Microprogramming and Conventional Machine Language, 
SIGCSE Bulletin, vol. 20, no. 4, December, 1988, pp. 43-49. 8. Dunworth, A. and Upatising, V., UMAC: 
A Simu­lated Microprogrammable Teaching Aid, SIGCSE Bul­letin, vol. 21, no. 3, September, 1989, pp. 39-43. 
 9. Foley, D., Microcode Simulation in the Computer Architecture Course, SIGCSE Bulletin, vol. 24, no. 
3, September, 1992, pp. 57-59. 10. Searls, D. E., An Integrated Hardware Simulator, SIGCSE Bulletin, 
vol. 25, no. 2, June, 1993, pp. 24-28. 11. Bergmann, S. D., Simulating and Compiling a Hypothetical 
Microprogrammed Architecture with Pro­jects for Computer Architecture and Compiler Design, SIGCSE Bulletin, 
vol. 25, no. 2, June, 1993, pp. 38-42. 12. Magagnosc, D., Simulation in Computer Organiza­tion: A Goals 
Based Study, SIGCSE Bulletin, vol. 26, no. 1, February, 1994, pp. 178-182. 13. Tanenbaum, A. S., Structured 
Computer Organiza­tion, third edition, Prentice-Hall, 1990. 14. Mano, M. M., Computer System Architecture, 
third edition, Prentice-Hall, 1993. 15. Stallings, William, Computer Organization and Architecture, 
third edition, MacMillan, 1993.</RefA>  
			
