
 A Methodology for Fast PC Hard Disk State Restoration David D. Langan -Thomas J. Scott University of 
South Alabama-Western Illinois University Abstract It is often desirable to maintain a particular set 
of files and directories on one or more PC hard disks, The original state, where that set of files and 
directories is present, is called the pristine state. Files are subsequently added, deleted and modified. 
A common solution to the Foblem of retpming the hard disk to the pristine state is to (a) reformat the 
hard drive and (b) use a restore program to restore files and directories based on a set of backup-disks. 
This paper presenta a new methodology for performing the pristine state restoration more efficiently. 
The methodology, like the common approach, starts with some setup activities to capture the pristine 
stste (e.g., performing a standard full backup). Then three steps are used each time the restoration 
is performed, These steps are: ( I ) automatically restore a collection of often-modfied-files to the 
hard disk, (2) based on differences between the pristine state and the current state of the hard disk 
drive, delete fdes and directories that have been modified or added and (3) if the fust two steps have 
not returned the hard disk to a state equivalent to the pristine state, perform a restoration of the 
missing tiles or directories. If steps one and two, which require only a single disk to be loaded are 
suecessftrl, then most of the time consuming part of a full restoration is avoided. Test results presented 
sbw that this three step methodology restores a hard disk to a state equiv dent to the pristine state 
in 25-30% of the time required for the conventional solution. Introduction In some environments, such 
as PC microcomputer labs, it is desirablc to create a directory structure and load a particuhir collection 
of programs onto one or more syslems, creating the pristine state on thow machines, and then to maintain 
those systems by periodically restoring the pristine state. The occasional restoration of a hard disk 
to its pristine state is necessary due to a variety of problems that arise as a result of typical usage. 
For example * Dkk space shortages arise as a result of too many files being added. * Critical files (e.g. 
COMMAND.COM) are deleted on some systems. Permiedon to copy without fee all or part of this material 
is granted provided that the copies are not made or distributed for direct commercial advantage, the 
ACM copyright notice and the title of the publication and its dote appear, and notice is given that copying 
is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires 
a fee and/or specific permission. a 1992 ACM O-89791-502-X1921000211 105...$1.50 * Some system and application 
programs have modified behavior due to changes to the set-up and configuration files (e.g., crmjig.sys, 
au[cexec.bal or wpfwp} .seo. * Vimses infect the hard disk as a result of programs being run from floppy 
disks (Note: for this work the pristine state itself is assumed to lx vims free). In the normal course 
of events, files and sutrchectories are deletecL modified or added. Figure 1 represents the changes to 
the file system to be considered when comparing the current state of the hard disk to the pristine state. 
Pristine Current State State Figure 1: Changes to File System Figure 1 represents the following Changes 
(1) file f, in the pristine state was deleted, (2) file f, from the pristine state was reedified to 
f, , (3) file f, was renamed to f,, (4) file f, was added to the hard disk and (5) file f, was left 
unchanged.  In a typical environment, many tiles, similar to the file fb in Figure 1, will be left unchanged. 
The corrective actions needed to convert the hard disk to a state equivalent to the pristine state are: 
(1) deleting files f, , f, and f,, and (2) restoring files f,, f, and f,. If the corrective process were 
intelligent, the deletion of f, and the restoration off, could be replaced by a renaming operation. A 
file f that has been moved from directory d, to directory ~ is treated as another instance of file renaming 
(i.e., from dlV to djV). Figure 2 illustrates a notation to represent the changes shown in Figure 1. 
In this notation, O is used to represent an unchanged 1105 file, ~ is used for a new fd% - is used to 
signify a &#38;leted file, and t is used to represent a mdltied fde (i.e. the name is the same but the 
attributes or contents are not the same). The changes to the current state needed to restore the pristine 
state are: (a) delete the + and + fries and (b) restore the - and * files. Under worst conditions the 
snapshot solution takes more time than the conventional solution of reformatting and restoring the full 
backup. The worst conditions used for this testing involved the mod~lcation of hundreds of program files 
as well as the deletion and addition of hundreds of other tiles. The probability of such massive changes 
occurring ia extremely small. In the overwhelming maprity of cases, the snapshot solution will be substantially 
faster sirvx Steps 1 and 2 will often complete the restoration or will allow for Step 3 to perform a 
partial restore.  Detaits of the Snapshot Sotution .E!a2aH1 The use of the three step restore-methodology 
involves some set- Figure 2: Notation for State Changes up activities. This section dkcussea both these 
set-up activities and the &#38;tails of how each of the three steps is achieved. In the sections that 
follow a new approach to solving this problem is outlined. Timings are presented to show that this new 
appoach From the hard disk in its pristine state, the following steps should is faster than the conventional 
approach of reformatting and doing a full restore. be taken (1) An Overview of the Snapshot Solution 
The goal of the methodology presented here, called the anapshot­solution, is to restore the PC hard disk 
to a state equivalent to the pristine state. Two hard disk states are said to be equivalent if the files 
and directory structure present in one state are exactly the same as those present in the other state. 
State equivalence does not imply that the physical positioning of all the files on the disk in those 
two states is the same. (2) A snapshot is a description of the hard disk drive. The anapshot­disk is 
a bootable floppy disk used to hold the pristine state snapshot and other needed files (e.g., ou(oex.ec.bat, 
copies of the often-modified-files, and required utility programs). The snapshot-solution is based on 
using the snapshot-disk to boot the system. It then uses the pristine state snapsho~ along with some 
utility programs, to restore the hard dmk to a state equivalent to the pristine state. (3) The snapshot 
solution, like the conventional solution, requires that a full backup is performed from the pristine 
state. In addition, other setup activities, described in the next sectiom are performed The actions taken 
by the snapshot-solution to perform the actual restoration are driven by statements in the uutoexec.but 
file on the snapshot disk. These operations implement the following three steps: (4) Step 1: Copying 
a collection of often-modified-files snapshot-disk to the hard disk. from the Step 2: Performing an analysis 
(using a resef program) that compares the then current-state of the hard disk to the pristine state snapshot. 
Based on observations made during this comparison new or modified files or directories are deleted. Step 
3: Restoring only the files and directories that are missing using the restore program that comes with 
the backup package. The number of disks from the full backup set that need to be loaded to complete the 
restoration is minimized. Create a full backup set, as is normally done in the conventional solution. 
In testing the snapshot-sohstiom both the DOS bockup program and fastbock were used. A log-file should 
be created as a part of this backup. Adding the option /LC_Backup.Log when the DOS buckup program ia 
run creates the appropriate Log fiie. Fustbock automatically creates ita own history fide. From the pristine 
state, create a snapshot-disk by formatting a floppy disk with the system on it. This assures us that 
the snapshot-disk itself can be used to provide a safe boot-up and to restore the system files on the 
hard drNe. In addition to DOS, the following files should be put on the snapshotdkk: (a) coqfig.sys with 
a high number for FILES= and BUFFERS=. (b) sys for correct version of DOS. (c) The program to be used 
for restoration (e.g., restore or f-bock). (d) A copy of the log fiie created when the full backup set 
was made.  Files from the hard disk that are likely candidates to be modified or deleted (e.g., c:\corzfig.sys, 
c:\wp51\wp{wpJ set, c:loutoexec.bat) are put on the snapshot-disk. These fdes are called the often-modified­files. 
These files contribute significantly to the efficiency of the snapshot-solution. These files am automatically 
copied ta the hard disk each time the snapshot-solution is used. This copying is done prior to the snapshot-analysis 
that determines which files or directories are missing or modified. Files that are not likely to be modifkd 
or deleted should not be put into the often-modified-files collection. But since the restoration of these 
otie.n-modifkxl-fdes requires no disk swapping nor any operator inteaverttio~ any fde that will likely 
be modifkd or deleted should be put into that collection. Empirical testing suggests that it is pobably 
better to err by putting too many fdes into thecollection versus too few. 1106 The often-modified-files 
collection should begin with (a) known, often mcdified files such as command.com and autoe~c.lraf, and 
(b) files with certain file extensions typically used for holding program configuration information (e.g., 
*.CFG, *.INI, *SET, *.GRP). For any given installation, insight can be gained through experience and 
knowledge of what programs are routinely used. Such insight can be used to build a better collection 
of often-modified-files. Improvements in this collection result in faster pristine state restoration. 
(5) Use the program srtqshot to capture the snapshot of the hard disk drive. This creates a file called 
srrapshof.-c-, which should then be copied to the snapshot disk. The data saved in the snapshot-file 
is an alphabetized list of all directory names and full path names of tiles. With each of these is kept 
its creation data (byte size, time­date stamp, attributes), and a check-sum value for program files (i.e. 
com and exe files). This ordering facilitates the later campsrison, by rese[, of the snapshot with the 
then current contents of the hard disk. As can be seen by the pseudo-code below, the creation of this 
list is a straight-forward recursive routine that is called by NamesFromThisDir( C: Y); . Procedure NarnesFromllsisDir(CurrentRoot:ADirOrFileName~ 
Var LocalNames:Array[l..Max] of DataOn thisEntry; Begin ChangeDirectones(CurrrntRootk CrmteAnAlphabetizedListOfLocatNames(LocalNames); 
For i := 1 to LsstNameInList Do Begin Write(Outfile,DataOnThisEntq); If LocalNames[i] is a directory 
name Then NamesFmmTlrisDir(LocalNames[i]k End; End; (6) Put a copy of the program reset onto the snapshot-disk. 
This progmm takes a current state snapshot of the hard drive and then compares this snapshot to the pristine 
state snapshot on the snapshotdisk. It sequentially compares each file or directory entsy in the current-state 
snapshot to an entry for the pristine-state snapshot. Given the order described earlier, the comparison 
algorithm runs fairly quickly. Based on this comparison, resel then: (a) I. Metes all new or modified 
files or directories. The checking for modified program files includes a check-sum analysis to help detect 
changes. The checking for other files uses only the creation data (i.e., size, attributea and time/date 
stamp). (b) Notes any missing files (i.e. files that have been &#38;leted),  (c) For DOS backup/resmre, 
analyzes the log tile to determine which disks, from the full backup set will actually be n~ded and informs 
the user. (d) Seta the error level to O if no further restoration is required, otherwise it sets the 
error level to 1.  (7) Put an aufoexec.ba( onto the snapshotdisk that performs the following: (a) sys 
c: (b) Copies the often modified files from the snapshot-disk back to the appo~iate places on the hard 
disk (e.g. copy wp{wp) .Se( C.iwps]). This could be done through a sequence of copy statements, but the 
snapshot­solution used in this paper took a slightly different approach. The files to be restored were 
all compressed/encuded into a single file and then were restored using a single command that decompressed/decodexl 
all of the files to their original directories on the hard disk. The compression phase was done using 
a shareware program called pkzip while the decompression was done by a related program called pkunzip. 
This pair of utility programs impmved the restoration speed for the often-modified-files. In addition, 
they allowed a larger collection of files to tit onto the snapshotdisk. (c) reset c: is then used to 
delete all new or modified files or subdirectories. This, in conjunction with the above restoration step, 
may suffice to return the disk drive to a state equivalent to the pristine state. (d) If required (based 
on ERRORLEVEL returned from use of reser), the regular restore Progam using the full backup set of disks 
is then run. If fastback were in use, it is run with an appropriate command iine option to indicate that 
the log file should be consulted to minimize the disks that need to be loaded.  In the above list part 
(a) and part (b) are the two parta to step 1 of the snapshot solution, while past (c) and part (d) perform 
steps 2 and 3 of the solution. Figure 3 shows how each of the three steps in this methodology helps to 
return the system to a state equivalent to the pristine state. This chart is based on the assumption 
that files fj, f, and f~ are part of the collection of often-modified-files being automatically restored 
to the hard disk in step 1. Observe that the copying of files f, and fc to the hard disk served a useful 
purpose while the copying of fl was superfluous. Resef deleted files f, and f,. Since the first two steps 
failed to return the hard disk to a state equivalent to the pristine state, a partial restore using the 
full backup set would be used to restore files f, and f,. 1107 Pristine f, f2f, f, fs fb State Changes 
o0*i --+ Current f, f2 f, f, f, Slate (step1) o+o+ +o Amocopy State @(er f, f2f, f, f, f, AutoCopy 
(step 2) o0-0 0- Run reset Stale @er f,f2 f, f, reset (Step3) o 0 + o+o Run restore Final f, f, f, 
f, f,f, State Figure 3: Three Steps to Pristine State Restoration The use of sys during the restoration 
process restores the two hidden system files m-well as restoring-the boot program in the boot record, 
thus repairing any darnage done by a number of boot sector viruses that attack the system. The collection 
of often-modified-tiles can grow based on experience, as described earlier, but should always be carefully 
constructed. An overly conservative approach in the selection of those files will result in more misses 
and in the restore program having to be loaded and additional disks from the full backup set being used. 
This restoration of often-modified-files is time consuming, but is performed from the snapshotdisk. When 
the operator returns after the bootup and analysis have been performed he may receive the good news that 
the pristine state restoration has been sucatddly completed by Steps 1 and 2, and that Step 3, which 
requires loading additional disks, is not necessary. If changes need to be made to the pristine state, 
such as adding new packages or deleting old packages, the ~istine state should fust be restored. Then, 
the proposed changes should be made, which will create a different pristine state. For this new pristine 
state, a new full backup should be created, and the snapshot program should be rerun. The new SNAPSHOT. 
-C-tile should be copied to the snapshotdisk and any desired new tiles should be added to the often-modified-files 
collection. After these steps have been taken, the three-step methodology can be run to restore the new 
pristine state. Timed Comparisonsand Evaluation The three-step snapshot-solution should yield faster 
pristine state restorations than the conventional reformat and full restore method. To test this hypothesis, 
a micro-lab of 17 identically configured IBM PS2 model 55SXS was used. E=h of these machinea had a 30 
megabyte hard disk drive. The pristine state contained approximately 23 megabytes of application software. 
The full backup set of the hard disk, using Fastback s data compression routines, required 11 high &#38;nsity 
(1.44 megabyte) ftOPpy disks. The restoration process normally used in that lab was the conventional 
reformat and full restore using a single boot-disk and a full backup set of disks. His restoration was 
done once a week on each machine. The time to restore a single machhw was 11 minutes and 2 seconds. The 
time required to restore all of the machines, swapping the disks from a single backup seL was 44 minutes 
and 50 seconds. Backup wk. wk. wk. Total Total Disks 1 2 3 percent Needed o9 9 13 31 60.8 1 54 2 11 
21.5 2 112 4 7.8 3 200 2 3.9 4 000 0 0.0 5 010 1 2.0 6 010 1 2.0 7 000 0 0.0 8 000 0 0.0 9 000 0 0.0 
10 0101 2.0 11 0000 0.0 Figure 4 Summary of Test Results For comparison purposes, the tests cmnducted 
for this paper were also done once a week, for three weeks. Figure 4 shows the results of these tests. 
In Figure 4, the row O-Backup Disks Needed refers to the number of times that the snapshot-disk alone 
sufficed to complete the pristine state restoratio~ i.e., only Steps 1 and 2 were required. The numbers 
in the N-Backup Disks Needed row show the numbers of machines on which N of the 11 disks from the full 
backup saveset were needed to complete the restoration. In all 51 machines were restored during the three 
weeks of testing. The data from Figure 4 shows that 60.8% of the machines were restored to pristine state 
with only the snapshot disk. Also, in 21.5% of the tests, only one disk from the eleven disk full backup 
saveset had to be loaded. From the tests conduct~ the expected number of disks from the full backup saveset 
that need to be loaded was computed to be 0.8 disks. Thus, the expected number of disks used for the 
three step process is 1.8, while the conventional solution always takes 12 disks. 1108 It is speculated 
that a larger amount of pristine state free space would have increased the 0 , 1 , and 2 Backup Disks 
Needed numbers, thus yielding an even smaller expected value. It is further speculated that the percentage 
of O-Backup Disks Nee&#38;d solutions would increase if the snapshot solution were applied more than 
once a week. Experience gained in the weekly testing led to a better knowledge regarding the often-moMied-files 
and thus to an improved set of files being automatically restored. This improvement led to better results 
as more tests were conducted. The expected number of backup disks needed for the restoration of all 51 
machines was 0.8, but for the 17 machines restored in week three, this number was reduced to 0,3. As 
a comparison tea~ during the third week, the entire room of 17 machines was restored at the same time 
using the snapshot solution. This procedure used 17 copies of the snapshotdisk to obtain as much parallel 
execution as pssible. The time required for the pristine state restoration for all 17 machines, again 
using a single backup set, was 11 minutes and 17 seconds. The times needed for the snapshot solution 
are subject to a much greater variance than those for the standard solution. Using the standard solution, 
the number of disks loaded per machine is the same every time the room is restored (i.e., 12 disks), 
thus the variance in timings should be extremely small. For the snapshot solution, [he possibilities 
range from a room full of machines all having O-Backup Disks Needed solutions (5 minutes and 19 seconds) 
to a room full of machines all requiring an 11-Backup Disks Needed solution (31 minutes and 38 seconds). 
Snapshol Snapshot KS Original with C%eck-Sum no Check-Sum Solution Bcsr wk. 3 Worsl Best Wom 1 11 OY 
3 19 N.A. 14 12 1 17 1T4 ~~ua ~!3~,! 29 2Y 17 5 19 11 17 31 3s Figure 5: Comparison of Timings A timed 
test on a single machine showed that it took 3 minutes and 19 seconds for a O-Backup Disks Needed solution. 
All of the above tests performed a check-sum analysis for all program files. This extra prcessing, though 
more thorough, is time consuming. For purposes of comparison, the test was remn with check-sum analysis 
disabled. The result was that a O-Backup Disks Needed solution took only 1 minute and 17 seconds. Clearly 
the particular times found are a function of several variables; (a) the size and speed of the hard disk, 
(b) the number of program files (if check-sum analysis is enabled), and (c) the number of files being 
automatically restored from the snapshot disk. Figure 5 summarizes test results with a comparison to 
the conventional solution. h Figure 5 Best for the snapshot solution implies a O-Backup Dkks Needed solution 
while Worst represents the case of an 1 l-Backup Disks Needed solution. Thus in all cases the conventional 
solution leads to a Worst case result. The result from week 3, using all 17 machines, is the most representative 
as it was based on a typical use. The result from that week shows a savings of 33 minutes and 33 seconds, 
a 75~0 reduction.  Conclusions The snapshot methodology dewribed here provides a faster means of restoring 
a machine to a state equivalent to the pristine state. It has the advantage that in 60.8~0 of the cases 
tested the snapshot­dkk alone suffked to make the restoration. The restoration process is relatively 
safe in that it restores the operating system and any mocMkd files. This methodology does, however, have 
the following weaknesses: (1) The standard reformat followed by a full restoration has the advantage 
of performing fde and directory defragmentation, while the snapshot solution does not. (2) Some modifications 
may go unnoticed. If a data tile (i.e., non-COM and non-EXE) has been morMi~ leaving the time/date stamp 
and the si= the same, reset program will fail to note this change. If a program file (i.e., COM or EXE) 
were modified and by chance the check-sum value for the new version were the same, as well as the creation 
data being the same, this too would go unnoticed. Such a change to a program file is highly unlikely. 
 If there is no reason to suspect virus problems, the performance for a single machine is improved with 
check-sum disabled. The overhead of check-sum is not particularly significant when an entire lab is being 
restored due to the overlapping of execution time on the machines. The snapshot solution might be used 
on a regular basis in conjunction with an occasional use of the conventional solution to gain the benefits 
of file and directory de fragmentation. The backup/restore packages used include the DOS backup and restore 
programs and the @&#38;xk program (which was used for all timed tests). Other packages might be used 
if they support pattial-restoration. In the case of the IDS restore program, this was achieved by having 
the reset program inform the user, based on a study of the log file, which backup disks needed to be 
loaded. Restore gave error warnings about the missing disks when only select disks were loaded but it 
preceded to do the partial restore. Fasfbock has its own partial-restore baaed on reading its own log 
file. Furlbuck also cmdd be invoked from the command line to perform this partial restore, thus makkg 
it an excellent choi~ for the snapshot-solution. Other packages lacking either the partial restore capability 
or the command line invocation of that option would be less suited for the snapshot-solution. An examination 
of the success of the methodology described above revealed two major factors: (1) the parallel booting 
of all of the machines to reduce the cost associated with the snapshot restoration, analysis, and &#38;letions, 
and (2) the substantially reduced number of disks from the saveset that needed to be loaded.  There 
is no way to modify the conventional solution to take advantage of the second point, but the booting 
portion of the conventional solution did prove, by testing, to be a bottleneck. 1109 The conventional 
solution was rerun using the parallel booting approsch. The time needed to restore all 17 machines chopped 
from 44 minutes and SO seconds down to 30 minutes and 35 seconds. Even compared to the improved version 
of the conventional solution the snapshot solution in the week 3 average case still represented a 63% 
reduction in restoration time.  References <RefA>[Digita188] Guide to Maintaining a VMS System, Digital Equipment 
Corporation,Maynard, MA., 1988 [MlcTosoftt38] Microsoft MS-DOS User s Guide, Mkrosoft Corporation 1988. 
[Sun90] System and Network Administration, Sun Microsystems Inc.. March 1990.</RefA> 1110  
			
