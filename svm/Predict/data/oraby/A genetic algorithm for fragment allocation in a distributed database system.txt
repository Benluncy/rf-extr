
 A GENETIC ALGORITHM FOR FRAGMENT ALLOCATION IN A DISTRIBUTED DATABASE SYSTEM* -Arthur L. Corcoran John 
Hale The University of Tulsa Keywords: Gertetic Algorithms, Distributed Databases, Abstract In this paper 
we explore the distributed database allocation problem, which is intractable. We also discuss genetic 
algorithms attd how they have been used successfully to solve combinatorial problems. Our experimental 
results show the GA to be far superior to the greecly heuristic in obtaining opti- mal and near optimal 
fragment placements for the allocation problem with various data sets. Introduction Computerized databases 
have become an essential part of our lives. They play a critical role in nearly all areas where computers 
are used. A few of the areas include business, engineering, science, medicine, law, and eduea-tmn. Traditionally, 
databases and database management systems (DBMS) have resided on a single site. This is called a centralized 
databa'~e system. Recently, there has been a rapid trend toward distributed models of computation. where 
several remote sites are connected via a communi-cations net work. Distribu ted database systems (D D 
BS) and distributed database mavagement systems (DDBMS) have been developed in response to this trend. 
For convenience, we will use the term distributed databases (DDBs) to refer to DDBSs and DDBMSs, collectively 
The advantages of distributed databases include greater reliability and avail-ability as well a.s intproved 
performance. Unfortunately, dis- tributed databases are accompanied by increased overhead and comploxity 
in the system design and implementation. This comp!exity is often combinatorial in nature. Genetic algorithms 
(GAs) provide an excellent technique for deahng w~t h ~he combinatorial problems found in distributed 
databases. (;As borrow the techniques and mechanisms from genetics aitd natural evolution to effectively 
find optimal and near-optima! solntions t~ complex and difficult problems. *Research partially supported 
by O(:AST Grant AR2-002, OCAST Grant AK2-004. NSF Grant IRI-9110709 and Sun Mi- crosysteH~s, ].nÂ¢. Permission 
to copy without fee all or part of this material is granted provided that the copies are :+'. made or 
di.sm~uted for direct commercial advaa~ge, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery To copy otherwise, or 'to republish, requires a fee and/or specific penmission. &#38;#169; 
1994 ACM 089791..647..61 94/;b"~,03 $3.50 This paper is organized as follows: Section '2 provides an 
in- troduction to distributed databases. This include.-, a discus- sion of the advantages and disadvantages 
of DDBs. A simple DDB model is presented which proves to be intractable. Sec-tion 3 provides an introduction 
to genetic algorithms. Sec-tion 4 describes our application of a GA to the DDB problem a.s well as the 
experimental results obtained. Finally, Sec- tion 5 provides a suntmary and conclusiotts. 2 Distributed 
Databases Distributed databases is the term we use collectively for dis- tributed database systems and 
distributed database manage- ment systems. These systems were developed in response to the current trend 
toward distributed computing. Unlike tra- ditional centralized database systems, DDBs are spread over 
many sites. These sites are connected by a communications network. Site 1 Site 2 Site n Communications] 
Network .J Figure 1: A Typical Distributed DaLabase Figure 1 illustrates the architecture of a typical 
distributed database. Portions of the entire databa.se are spread out over multiple computers, called 
sites or nodes. Ttte computers are connected by a communications network with a given topology. Each 
local site may have its own local database, which can be maintained by a traditional DBMS. Each site 
may also contain fragments, or portions of the distributed global database. Fragments are managed by 
application and communication processing software. Some of tile advantages of DDBs include reliability 
~nd avail- ability. Reliability is loosely defined as the probability that a system is up at a particular 
moment in time. Availabil-ity refers to the probability that a system is continuously available during 
some time interval. Ill a traditional cen-tralized database system, the failure of tile single site means 
failure of the entire system. In a DDB, ~he failure of a sin- 247 gle site will only" effect access to 
data located at that site. Clearly, this leads to improved refiability and availability. Another advantage 
of DDBs is the performance improve- ment obtained by distributed processing. Local queries and transactions 
accessing data at a single site are much faster since the local database'is smaller. Transactions involving 
different sites can be processed concurrently, reducing execu- tion and response time. This is especiMly 
an advantage when the database is naturally distributed over different locations, such ms in a business 
with databases used by regional offices which are all accessible from the corporate headquarters. These 
types of database systems are typically dominated by local queries and transactions. Finally, DDBs allow 
sharing of data while at the same time retaining localized control. This can be an important issue in 
database security when maintaining a 'need to know' authorization scheme. A potential drawback in a DDB 
is the added complexity and overhead involved in its design and implementation. The DDB must be designed 
to preserve consistency in the database yet provideacceptable response time for transac- tions across 
many different sites. Strategies must be devel- oped to handle distributed queries and transactions. 
The distribution design step involves fragmentation of relations and allocation of these fragments. The 
objective of fragInen- tation is to achieve better units of distribution. Allocation is concerned with 
optimal placement of the fragments among the available sites. Special care must be taken in the place- 
ment of replicated fragments to maintain consistency and access efficiency. Finally, the DDB must be 
able to grace- fully recover from failures such a,s site crashes or network hangups. The additional functionality 
and flexibility in a DDB is a difficult problem to deal with. Finding optimal solutions is a step beyond. 
In addition to the normal database design issues and the fragmentation process, the designer of a dis- 
tributed database must also decide on how to distribute the fragments over the sites. We now present 
a formal descrip- tion of a simple distributed database allocation problem. A distributed database is 
composed of a collection .5' of m sites, where each site i is characterized by its capacity, ci, ,~" 
= {c~,c~,~ ..... e ...... cm}, and a set F of n fragments, where each fragment i is char- acterized by 
its size, s), F = {.~, s2, .~3 ...... ~ ..... .~,, }. Each fragment is required by at least one of the 
sites. The site requirements for each fragment are indicated by the re- quirements ~natrix, rl,1 TI,2 
rl,n r2,1 r2,2 T2,n R = Trtl,l Tin,2 Tm,n where rio indicates the requirement by site i for fragment 
). In general, this requirement is represeuted by a real value, that is, a weight. A variation of this 
is to use a boolean value to indicate that fragment j is either required or not required by site i. Transmission 
cost is given by the transmission cost mat rix, tl,l ~I,2 " ' " ~Z,m $2,1 $2,2 " " " $2,rn T = : : ".. 
: trn,l ~rn,2 " " " tm,m where ti,j indicates the cost for site i to access a fragment located on site 
J'. Given the above definitions, the distributed database allocz~- tion problem is one of finding the 
optimal placement of the fragments at the sites. That is, we wish to find the place-lneut, P = {pt,p2,P3, 
..-,P~, ...,P,~} (where pj = i indicates fragment j is located at site i) for the n fragments so that 
the capacity of any site is not exceeded, ~ri,.ls3 < C, Viii < i < m 3=1 and the total transmission cost, 
~=1 1=1 is minimized. By restricting the use of the requirements matrix and having zero transmission 
cost, the distributed database allocation problem can be transformed to the bin packing problem, which 
is known to be NP-complete [7]. The DDB allocation problem is considerably more difficult than bin packing, 
so it is clearly also N P-complete. Consequently, unless an efficient algorithm has been found to solve 
intractable problems and it is proven that P = NP, then we must turn to heuristic methods to obtain approximate 
solutions. Also, in this paper we ignore exhaustive methods such as branch and bound due to their inability 
to solve large combinatorial problems. For a more detailed treatment of databa.ses and distributed databases, 
the reader is referred to works by Bell [1], Bell and (i;rimson [2], Ceri et al. [3], Chang and Shielke 
[4], Elm,v~ri and Navathe [6], and (~)zsn and Valdnriez [10]. 3" Genetic Algorithms A genetic algorithm 
(GA) is an adaptive search technique ba.sed on the principles and mechanisms of naturM selection and 
'survival of the fittest' from natural evolution. (.;.-ks grew out of Holland's [9] study of adaptation 
in artificial and natural systems. By simulating natural evolution, in this way, a GA can effectively 
search the problem domain and easily solve complex problems. Furthermore, bv emulating biological selection 
and reproduction techniques, a (.;A can perform the search in a general, representation-independent illanner. 
The genetic algorithm operates as an iterative procedure on a fixed size population or pool of candidate 
solutions. The candidate solutions represent an encoding of the l)roblean into a form that is analogous 
to the chromosomes of biologi- cal systems. Each chromosome represents a possible solution 248 for a 
given objective functi,~n. Associated with each chro-mosome is a fitness value, which is found by evaluating 
the chromosome with the objectiee function. It is the fitness of a chromosome which determines its ability 
to survive and produce offspring. Each chromusome is made up of a string of genes (whose values ~.re 
called alleles). The chromosome is typically represented in the GA a.s a string of bits. However, integers 
and floating point numbers can easily be used. The GA begins by geuerating av initial population, P(t 
= 0), and evaluating each of its members with the objective func- tion. While the tern,!,aatiov condition 
is not satisfied, a por- tion of the population is selected, somehow altered, evalu- ated, and placed 
back into the population. At each step in the iteration, chromosomes axe probabilistically seIected from 
the population for reproduction according to the prin- ciple of the 'survival of the fittest'. Offspring 
are generated through a process called cros:"over, which can be augmented by mutation. The offspring 
are then placed back in the pool, perhaps replacing ol;her members of the pool. This process can be modeled 
using either a 'generational' [8, 9] or a 'steady-state' [12] genetic algorithm. The generational GA 
saves offspring in a temporary location until the end of a generation. At that time the offspring replace 
the entire current population. Conversely, the steady-state GA imme- diately places offspring back into 
the current population. Experimelxtal Results We developed a genetic algorithm for the distributed databa.se 
problem using LibGA [5]. The problem was en-coded so that each gene in the chromosome corresponds to 
a fragment. An integer representation was used in which the allele values correspond to site locations. 
For example. an allele value of 5 in gene 7 would indicate the placement of fragment 7 at site 5. This 
corresponds to the placement vector. P, in Section 2. Initial allele values were selected at random, 
ranging from 1 to the number of sites, m. It is pos- sible with this encoding scheme to have infea.sible 
solutions, that is. solutions which violate the site capacity constraints or which place fragments in 
inaccessible sites. Consequently, our objective function calculated the proper cost for fea.si- hie solutions 
and used a penalty for the infeasible solutions. The penalty depended on the number of sites, m. For 
each fragment placement which violated a constraint, the objec- tive function added a penalty of 500m 
to the fitness. Such a mild penalty balances the preservation of beneficial genetic material with the 
selection pressure of feasibility [11]. The genetic Mgorithm was tested with several different pa-rameters. 
We used two different population modeis: gen-erational and steady-state. We also used three different 
crossover operators: simple (one point), uniform, and a.sex-ual. Note, asexual crossover is simply a 
swap of two ran-domly selected genes. Wheh mutation occurred, a randomly selected gene wars replaced 
with a randondy selected choice from the range of valid allele values. The mutation rate was fixed at 
0.1, and the pool size was fixed at 500. Note, all of our reported results rel)resent feasible solutions. 
We began with a small problem in order to better visualize our results. A problem was generated which 
had ,5 sites and _.5 fragmenl.s to allocate. The fragment size was fixed at 1 and the site capacity was 
fixed ~t 3. C, onsequently, the final result has no wasted site ca.pacify and exactIy 3 fragments per 
site. A requirements matrix was generated with each tragment required by a randomly selected site. AdditionM 
-requirements were generated randomly with a 21% probabil- ity that a particular fragment is required 
at any particular site. Network topology was also generated randomly with a 70% probability that any 
two sites are adjace-aL Transmis- :-ton cost w.e.s fixed at 1 unit per hop. (L. .i ,) Figure 2: 'Bow 
Tie' Network TopoLogy Figure 2 illustrates the resulting network topology gener-ate&#38; Ceincidentally, 
this topology resemb!es a :bow tie'. The requirements were as follows: [~I~7~ed Fragments i~~ 6, 9, 10, 
12, 13, 14 7, 11 3, 4, 5, 6, 10, 12, 13, 14 4 2,4,5,8,9, 10,11, 14 1, 2, 3, 6, 10, 15 We applied a greedy 
heuristic to this problem which places each fragment in turn in the least cost location. The greedy heuristic 
determined the following allocation: I Site I Fragmen.ts  i ] < 9, i~ 2 2,3, r 3 4, 5, 12 4 [ 8. 11, 
13 5 t 1, 14, 15 with a total transmission cost of 27. This allocation places 4 fragments at sites in 
which they are not required. L~Model [ Crossover z ..... /: o "e ~r Simple 26 30.10 4.322 2.079 Gen. 
' Uniform 24 26.70 2.678 1.636 i Asexual 23 23.00 0 0 Simple 25 27.40 1.8'2'2 1.350 .qSL Utdform 24 25.80 
3.51 t 1.874 Asexual 23 23.00 0 0 Table 1: Results for 'bow tie' data set Table 1 summarizes the results 
we.obtained with the GA. For each reproduction model and crossover operator, the ta- ble lists the best 
result obtained (x .... ) after running the GA with 10 different random seeds. Other columns list the 
average (~), variance (on), and standard deviation (a) of the 10 runs. From the Xmin values, we see the 
GA easily outper- forms the greedy heuristic. However, on the average, simple crossover did worse than 
greedy under both models. Uniform crossover performed slightly better on average than greedy. Asexual 
crossover wars the best performing crossover, consis- tently obtaining apparently optimal results. The 
following is an Mlocation generated by the GA: [~1~ ents ] 9, 12, 13 ] 7, 10, 11 3, 5, 14 '2,4,8 ] 1,6,15 
 This allocation places 2 fragments at sites in which they are aot required, half a,s many a~s by the 
greedy. 34 . t i J i i 32 GA 30 Fitness 28 (;reedy 24 " * * 22 ! 0 I 2 I 4 I ~, Generations 1 8 l 10 
12 Figure 3: Convergence Profile (Boa' Tie) Figure 3 illustrates the convergence profile of the genetic 
algorithm. The greedy result is indicated by the dashed line. While the GA begins with a worse result 
than greedy, it is able to quickly converge to a better answer. Figure 4: 'Ring' Network Topology Figure 
4 illustrates the next problem we examined. In this cause we changed the network topology to a ring and 
left the other parameters identical to the %ow tie' problem. For this problem, the greedy heuristic resulted 
in the following placement of the fragments: I Site Fragments 6, 9, 12 7, II, 13  ] 3 3,4, 5 i 4 2, 
8, 10 5 li i4; 15 with a total tra::shhssion cost of 24. In this cause the greedy only placed two fragments 
at sites in which they were not require:l. FgTao,I c: ssÂ°ver t i Sin:pie . 2e 30.40 2.044 : ..t30 Gen. 
Uniform 24 26.80 3.956 1 .'.-) 89 Asexual 23 23.00 0 0 Simpie 24 27.70 4.011 2.0!)3 SS. Uniform 25 26.00 
0.8889 ())428 Asexual 23 23.10 0.10(10 0.3!62 Table 2: Result.~ for "ring' data set Table 2 lists the 
results for the GA on the "ring' da:t.a see. Under this topology, the simple and uniform crossovers could 
only equal the performance of the greedy at best, and were much worse on average. Asexual crossover proved 
to be the best, with apparently optimal results under both models. The following is an assignment generated 
by the GA: Fragments [ZE 6, 9, 13 7, 11, 12 3, 5, 14 '2,4,8 1, 10, 15  The GA placed only one fragment 
at a site in winch it was not required. This was half as many as in the greedy. 31 I I ~ t I [ 30 29 
28 Fimcss 27 26 25 Greedy ....... 24 23 1 2 3 4 5 6 Generations Figure 5: Convergence Profile (Ring) 
 Figure 5 illustrates the convergence profile for the (3A on the rfng data set. As before, the GA started 
with a worse -answer than tile greedy but quickly converged to the optimal. However, for this data set 
the greedy was able t. -btai~ nearly optimal results, We next turned our attention to a complex fragment 
allo-cation problem. We generated a data set with 20 si~::s and 249 50 fragments. This corresponds to 
a search space of 205Â°, or about 106'5 possible solutions. Not all of these solutions are feasible. Fragment 
sizes were randomly generated in the range from 1 to 10. Site capacities were randomly generated in the 
range from 20 to 40. The probability that more than one site required a fragment was 40% and the probability 
that any any two sites were adjacent was 30%. Transmis-sion cost was randomly generated in the range 
from 1 to 10. All of these values and ranges were chosen arbitrarily. For this data set, the greedy obtained 
a placement with total transmission cost of 2014. I Model Crossover [ z,~i~ Simple 1978 2007.40 237.4 
15.41 Gen. Uniform 1972 1985.70 113.8 10.67 Asexual 1952 1958.70 31.79 5.638 Simple 2036 2065.80 821.3 
28.66 SS. Uniform 2001 2030.00 394.9 19.87 Asexual 1990 2017.80 506.6 22.51 Table 3: Results for 20 
site data set Table 3 summai'izes the results obtained with the GA on the 20 site data set. The best 
GA result was better than the greedy in all cases except for the steady-state model with simple crossover. 
The greedy was able to beat the average performance of the steady-state model under all crossover operators. 
However, under the generational model, the aver- age performance of all crossover operators was able 
to beat the greedy. The clear victor for this data set was asexual crossover under the generational model. 
As a final test of our GA, we ran it on a variation of the 20 site data set. This new data set was generated 
using the same parameters as before except that there were 100 frag- ments and site capacities were generated 
in the range from 50 to 55. With 100 fragments and 20 sites, this corresponds to a search space of 20 
~Â°Â°, or about 10 ~aÂ° possible solutions, not all of which are feasible. The greedy heuristic obtained 
4t42 for this data set. We only tested the generational (.;A with asexua.l crossover on this data set 
as it is clearly the best choice. We obtained the following results over ten runs: Zmtn -g cr 2 O" 4013 
4027.80 81.51 9.028 As before, the GA was a clear winner over the greedy heuris- tic. With this data 
set we see the GA's solution quality did not degrade as the search space size was increased. Conclusions 
in this paper, we have explored the distributed database al- location problem, which is intractable. 
We introduced the genetic algorithm as a technique which has been used to obtain optimal and near optimal 
solutions to cotnbiuatorial problems. We found the GA to have superior performance to the greedy heuristic 
on fragment allocation problems of various sizes. While the greedy heuristic took time and effort to 
intplement, the GA was very straightforward: an encod-ing wa.~ decided upon, and a simple flmction was 
written to evaluate candidate solutions. We found the best paralfie-ters for the GA to be the use of 
a generational reproduction model with asexual crossover. This is most likely due to the fact that the 
fitness landscape is rather rugged, and since a.sexual crossover is much like a mutation, it performs 
well on such rugged landscapes. In future, we plan to extend our DDB allocation problem to include explicit 
repfication of fragments. We have found that the GA allows us to easily obtain solutions to the at-location 
problem and is easily extended to tile solution of other related problems. Acknowledgements This research 
has been partially supported by O(;AST Grant AR2-002, OCAST Grant AR2-004, and NSF Grant lRI-9110709. 
The authors also wish to acknowledge the support of Sun Ivlicrosystems, Inc. References <RefA>[1] D. A. Bell. 
Diffncult data placement problems. (7ompnt~'r J.. 27'(4). 1992. ['2] D. A. Bell and J. Grmlson. Distributed 
Database .5'ys~ms. Addison-Wesley, Menlo Park. California, 1992. {3] $. f..;eri, G. Martelia, and G. 
F'elagatti. Optima[ file aiiocatiou for a distributed databasee on a network of minicomputers. h~. Proe. 
ICOD I Conf., Aberdeen, Scotland, 1980. [4] C. C. Chang and Shielke. On the complexity of the file al- 
location problem. In Conf. on Foundation.s of Data Organi. sation, Kyoto, Japan, 1985. [5] A. L. C, orcoran 
and R. L. Wainwright. Lib(.;A: A user-friendly workbench for order-based genetic algorithm re-search. 
In E. I-)eaton, K. M. (;eorge, H. Berghet, and G. Hedrick, editors, Proce:edings off the 1 :J.~t.7 A 
(TM/SIGA ['.1:' Symposium on Applied (7,~mputing, pages 1]1-118, New York, 199:$, ACM Press. [6] R. Ehnasri 
and S. B. Navathe. Fundarn,.ntals of Oatabas~ Systems. Belljamin/Cunmfings, F~edwood City, California, 
1989. [7] . M. R. Garey and D. S. Johnson. (7ornpntrrs and Intractabil- ity: A Guid; to the: Theow oj 
NP-Cornph'teness. W. H. Freeman and Company, San Francisco. 1979. [8] [). E. Goldberg. Genetic Algorithms 
in Search, Optirniza-lion. and Machine Learning. Addison-Wesley, Reading, Ma.~- sadmsetts, 1989. [9] 
J. H. Holland. Adaptation in Natural and Artificial .5'ys. terns. Tim University of :Michigan Press, 
Aim Arbor, Michi- gan, 1975. [I0] M. T. ()zsu and P. Valduriez. Principles of Distribu&#38;'d Database 
Systems. Prentice Hall, Englewood (.:lifts, New Jer- sey, 1991. [11] ,1. T. Richardson, M. Ft. ['Miner. 
G. E. Liepens, and M. Hilliard. Some guidelines for genetic algorithms with penalty functions. In J. 
D. Schaffer, edRor, Pr'oce~din.qs of tt~e Third International Conference on Genetic Algorithms, Arlington, 
Virginia, 1989. Morgan Kaufmann. [12] D. Whitley and .I. Kauth. (.;~NITOFt: A different genetic algorithm. 
In Proceedings of the' Rocky Monntain (?onfercnce on Artificial Intelligence, pages 118-130, I')enver, 
Colorado, 1988</RefA>. 250 
			
