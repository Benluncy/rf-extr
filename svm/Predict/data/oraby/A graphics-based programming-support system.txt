
 A GRAPHICS-BASED PROGRAMMING-SUPPORT SYSTEM H. P. Frei D. L. Weller R. Williams IBM Research Division 
San Jose, CA. ABSTRACT PROGRAM REPRESENTATION A programming support system using extended Nassi-Shneiderman 
diagrams (NSD) is described. The aim of the work is to develop techniques for improving the quality and 
cost of specifying, documenting and producing computer programs. NSD's can be executed interpretively 
or compiled to produce running code. The system implementation has begun and charts can be drawn on a 
variety of display devices. The system is being developed using the Picture Building System developed 
earlier. KEY WORDS AND PHRASES: interactive computer graphics, Nassi-Sheiderman diagrams, structured 
programming, program representation CR CATEGORIES: 4.12, 4.13, 4.22, 4.33, 4.34, 8.2 It is our belief 
that what is needed is a total software support system along with a shift in emphasis in the software 
development process. The fact "that an application system is maintained indefinitely after a definite 
period of development" [MIL 76] as well as the tremendous decrease in hardware costs (along with increases 
in speed), should encourage one to choose reliability and maintainability as the dominant criterion rather 
than the more traditional execution speed when deciding on appropriate tools for software production. 
For example, it is much easier to speed up and optimize a neatly designed and reliable piece of software 
than to debug a fast running unstructured one. A total software support system must support the design, 
coding, debugging, maintenance, and documentation of software systems. THE SOFTWARE PROBLEM During 
the last decade software systems showed the tendency of growing drastically in both size and complexity. 
Frequently, the increased size and complexity result in software systems that are unreliable, error prone, 
and difficult to maintain. Also, studies by the U.S. Navy have shown that in the last 20 years the cost 
of software for hardware/software systems has grown from less than 20% of the total cost to more than 
75% of the total cost [BOE 73]. Many corporations have recognized the severity of this problem and have 
begun to study the software problem. Capers Jones [JON 77] reports the deplorable fact that in the 
traditional world of programming more than half of the total effort expended goes to defect removal activities 
in the forms of testing and post-release defect repairs. Mills mentions that "some 75 percent of data 
processing personnel are already taken up with maintenance, not development. And unless radical new 
methods are found, maintenance will go even higher in its demands and will very nearly stifle further 
development" [MIL 76]. Documentation also seems to be a problem since Capers Jones indicates that for 
a large system it would take someone one or two months just to read the documentation [JON 77]. Thus 
we conclude that there is a great need for a software support system, possible based on existing concepts. 
 Most of the new programming techniques, in the literature often referred to as "Structured Programming" 
[DAH 71] or "Modern Style Programming" [JON 77], can lead to better software development. These techniques 
include graphic design methods like HIPO and Nassi-Shneiderman diagrams (NSD), top-down and modular programming, 
and on-line development of programs. It seems to be proved that "Modern Style Programming" is considerably 
less expensive than "Old Style Programming". Capers Jones even claims that these methods reduce debugging 
and maintenance costs by over 50% [JON 77]. The problem seems to be supplying a programming support system 
that supports "Modern Style Programming" and maybe even disallows nonstructured methods. Graphical 
representations for design and implementation have been known to be of great value in engineering and 
many other fields. But many fields have an advantage over programming in that they have what could be 
called a "natural" graphical representation. By "natural" it is meant that the items of interest already 
have a two dimensional layout. For example, the formalism of schematic diagrams for electrical circuits 
just maintains the topology of electrical circuit connections without creating something new. Programming 
languages lack a "natural" graphical representation. Therefore an artificial graphical representation 
should be created that can be used for software design and implementation. Such a representation will 
undoubtedly facilitate the visualization of program structure making 43 understanding of the program 
easier. The consequence of this is that the programs will be easier to write, debug, and maintain. A 
number of graphical representations of programs have been used for a long time, but they have never, 
to our knowledge, been used in an interactive graphics environment for the purpose of programming. Three 
existing graphical representations are examined with a view to their possibilities as actual interactive 
graphical programming languages. The three methods examined are: flow charts, HIPO diagrams [STA 76], 
and Nassi-Shneiderman diagrams [NAS 73]. A number of people have mentioned structured flowcharts [CHA 
 74] [LIN 77], but these charts are very similar to Nassi-Shneiderman diagrams and will not be considered 
separately. One of the oldest charting methods is the drawing of conventional flow charts. This method 
was developed originally for supporting the writing of programs in assembly or even machine language. 
Flow charts consist of very simple and self-explanatory symbols and have the property that they clearly 
demonstrate the control flow of the programs they represent. On the other hand, flowcharting does not 
support the modular design of programs, but rather allows the creation of "spaghetti bowl" designs that 
are difficult to test and correct. Unfortunately, these diagrams also have the tendency of spreading 
out over large sheets of paper. To overcome this disadvantage, several charts on different pieces of 
paper are connected together by so-called off-page connectors. It turns out, however, that it is very 
difficult to recognize the overall structure of a program represented by a large flow chart. HIPO diagramming 
is a more recent technique for documenting and programming than flowcharting. Programs are represented 
by two distinct kinds of diagrams consisting of simple rectangular figures. One kind of diagram breaks 
a task down into subtasks using task and subtask descriptions in a natural language (e.g. English). 
The other kind of diagram describes the input, the actual action to be performed, and the output of 
each rectangular figure. Such an approach certainly supports top-down development of programs and clearly 
 demonstrates the structure of the program in question. (The method was originally developed as a means 
of program documentation!). On the other hand, the structure and the action of the program are entirely 
separated. This is the reason that the breaking down of a task into subtasks becomes a rather arbitrary 
action when this method is employed. In addition, the use of a natural language with all its imprecision 
is a serious drawback. Furthermore, a HIPO diagram tends to show no context for the part of the program 
represented by the diagram, which makes it difficult to use as a design or testing vehicle. Needless 
to say, it does not help to prevent errors committed due to lack of information about the context. 
 NSDs were developed with the aim of supporting Structured Programming [NAS 73]. Programs are described 
by a collection of rectangular figures each of which represents a program segment. Such a rectangular 
figure may contain either a succession of simple statements written in the base language (e.g. PL/I) 
or other rectangular figures representing structured statements (e.g. IF, DO). It is quite an advantage 
that there are special NSD figures symbolizing structured statements like IF, DO, and CASE, even though 
these symbols have to be learned by the user. The size of an individual diagram representing a procedure 
is somewhat artificially restricted by the size of the sheet of paper. Although this approach greatly 
encourages modular design and clearly demonstrates both syntax and the logical meaning of each piece 
of the program, it is questionable as to whether it is also useful for the development of large programs. 
However, "Endicott programmers report that they prefer Nassi-Shnelderman charts to either flow charts 
or HIPO diagrams" [JON 77]. The use of NSD has been shown to be cost-effectlve, whereas the use of HIPO 
diagrams was shown to be cost-effective only some of the time, and the use of flowcharts was shown to 
be usually not cost-effective [JON 77]. Two existing partial programming support systems [GEW 77] [VAN 
77] which make use of NSD claim to have noticed great advantages for software design and development. 
Unfortunately, neither of these systems allows a user to interact with an NSD in a graphics mode. Undoubtedly, 
the proper use of NSD and HIPO diagrams can greatly support top-down development of programs and the 
understanding of a complex program structure. On the other hand, developing and drawing charts is a rather 
cumbersome process and if at a certain point during the design phase alterations to the program structure 
become necessary, the revision of the already drawn charts causes a great deal of work. Although there 
exist some interactive systems that support the drawing, charts representing a program are still manually 
translated into machine executable statements and this translation represents an additional source of 
errors. Also, an additional checking step becomes necessary. It is widely agreed that the introduction 
of graphics techniques into many kinds of human activities and in particular into program development 
is a great help. Usually two reasons are mentioned in this connection. First of all, it is an advantage 
to simply introduce an additional way of human perception as a supplement to reading. Secondly, graphical 
figures have proved to be a powerful way of communicating. Methods should be sought to intesrate program 
documentation--often considered to be a secondary job of minor intellectual value--into the program development 
phase either by entirely automating documentation or by choosing a self-documenting program representation. 
 It should also be noted that there is convincing evidence to support the idea that the use of interactive 
systems reduces costs for software development [JON 77] [REA 74] [SAC 68]. Based on the material presented 
above, it is assumed that a software support system should provide a programming language with a graphical 
representation clear enough for documentation that can be edited in an interactive graphics fashion and 
automatically be converted into executable code, and should lead the user towards structured programming. 
 44   her programs, instead of a linear text string representation for a conventional programming 
language. Specifying a program as a two dimensional structure exhibits the meaning of a program more 
clearly and results in better coding, improved programming productivity and higher quality documentation 
thus reducing the time and effort (cost) for production and maintenance of software. ACKNOWLEDGMENT 
 The authors wish to thank Herbert Weber and Jose Becerril who helped with the initial design of the 
programming support system presented in this paper. REFERENCES <RefA>[BOE 73] Boehm, B.W. "Software and its 
Impact: A Quantitative Assessment", Datamation, Vol. 19, No. 9, May 1973. [CHA 74] Chapin, N. "New Format 
for Flowcharts", Software Practice and Experience, Vol. 4 No. 4, Oct. 1974. [DAH 72] Dahl, O.J., Dijkstra, 
E.W., and Hoare, C.A.R. "Structured Programming", Academic Press, New York, 1972. [FAG 76] Fagan, M.E. 
"Design and code inspections to reduce errors in program development", IBM Syst. J., Vol. 15, No. 3, 
IBM Corporation, 1976. [GEW 77] Gewald, K., et al. "COLUMBUS - Strukturierte Programmierung in der Praxis", 
Elektronische Rechenanlagen, 19. Jahrg., Heft i, pp. 30-34, Feb. 1977. [JON 77] Jones, C. "Program Quality 
and Programmer Productivity, IBM Technical Report, TR 02.764, Jan. 1977. [LIN 77] Lindsay C.H. "Structure 
Charts -A Structured Alternative to Flowcharts", ACM SIGPLAN Notices, Vol. 12, No. ii, Nov. 1977. [MAR 
73] Martin, J. "Design of Man-Computer Dialogues", Prentice-Hall, Englewood Cliffs, N.J., 1973. [MIL 
76] Mills, H.D. "Software Development", IEEE [MOO 76] [NAS 73] [REA 74] [SAC 68] [STA 76] [SUT 
63] [URS 75] [VAN 77] [WEI 71] [WEL 76] [WIR 71] Transactions on Software Engineering, Vol. SE-2, 
No. 4, Dec. 1976. Moorhead, W.G. "GXRAM, Relational Data Base Interface for Graphics", IBM Research 
Report RJ 1735, 1976. Nassi, I., and Shneiderman, B. "Flowchart Techniques for Structured Programming", 
SIGPLAN Notices of the ACM, Vol. 8, No. 8, Aug. 1973. Reaser, J.M., et al "A Production Environment 
Evaluation of Interactive Programming", National Technical Information Service, AD/A-O06 502, Dec. 1974. 
 Sackman, H., Erlkson, W.J., and Grant, E.E. "Exploratory Experimental Studies Comparing on-line an 
off-line Programming Performance", CACM, Vol. ii, No. i, pp. 3-11, Jan. 1968. Stay, J.F. "HIPO an integrated 
program design", IBM Syst. J., Vol. 15, No. 2, IBM Corporation, 1976. Sutherland, I.E. "Sketchpad, A 
Man-Machine Graphical Communication System", Proc. Spring Joint Conf., pp. 329-346, Spartan Books, New 
York, 1963. Urschler, G. "Automatic Structuring of Programs", IBM J of Research and Development, pp. 
181-193, March 1975. Van Gelder, A. "Structured Programming in Cobol: An Approach for Application Programmers", 
CACM, Vol. 20, No. I, Jan. 1977. Weinberg, G.M. "The Psychology of Computer Programming", Van Nostrand, 
New York, 1971. Weller, D., and Williams, R. "Graphic and Relational Data Base Support for Problem Solving", 
Proc. of Conf. on Computer Graphics, SIGGRAPH-ACM, Vol. I0, No. 2, 1976. Wirth, N. "Program Development 
by Step-wise Refinement", CACM, Vol. 14, No. 4, pp. 221-227, April 1971.</RefA> 49 
			
