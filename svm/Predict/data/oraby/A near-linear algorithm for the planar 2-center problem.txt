
 .A Near-Linear Algorithm for the Planar 2-Center Problem* Nlicha Sharirt Abstract We present an 0( n 
logg n)-time algorithm for comput­ing the 2-center of a set S of n points in the plane (that is, a pair 
of congruent disks of smallest radius whose union covers S), improving the previous 0( nz log n)­ time 
algorithm of [9].  The 2-Center Problem Let S be a set of n points in the plane. The i?-center problem 
for S is to cover S by (the union of) two con­ gruent closed disks whose radius is as small as possible. 
This is a special case of the general p-center problem, where we wish to cover S by p congruent disks 
whose radius is as small as possible. J$ hen p is part of the input, the problem is known to be NP-complete 
[14], so one expects the complexity of algorithms for solving the p-center problem, for any fixed p, 
to increase expo­ nentially with p. A recent improved result in this direc­ tion, given in [8], is an 
n o(@)_algorithmfor the p-center problem. At the other extreme end, the l-center prob­lem. also known 
as the smallest en closing disk problem, can be solved in o(n) time [13]. The 2-cent,er problem is the 
next problem down the list, and is of some practical interest, e.g., in the context of efficient transportation 
~2]. This problem has been studied in several recent pa­pers [1, 3, 4, 9, 10], and the currently best 
algorithm for its solution runs in time O(nz log n ) [9]. In this paper we present a new algorithm for 
solving the 2-center problem. The algorithm runs in O(n logg n) time, thus providing the first subquadratic 
solution, and improving substantially the previous solutions. Our so­ * Work on this paper has been supported 
by NSF Grants CCR­91-22103 and CCR-93-1 1127, by a Max-Planck Research Award, and by grants from the 
U .S.-Israeli Binational Science Founda­tion, the Israel Science Fund administered by the Israeli Academy 
of Sciences, and the G .I. F., the German-Israeli Foundation for Scientific Research and Development. 
t S&#38;OOl Of fifathematicd Sciences, Tel Aviv University. Tel Aviv 6997t3, Israel, and Courant Institute 
of Mathematical Sci­ences. New York llniversit y. New York. NY 10012. US.4 Permission to make digitdhard 
copies of all or part of WIS material for peraoml or classroom use is granted without fee provided that 
the copies are not made or distributed for profit or commercial advantage, Ute copy­right notice, the 
title of the publication and its date appear, and notice is given that copyright is by permission of 
the ACM, Inc. To copy otherwise, to ~publiah, to post on aervera or to redistribute to Iista, =quires 
specific permission and/or fee. Computational Geometry 96, Philadelphia PA, USA @ 1996 ACM ()-89791-8()4-5/96/05. 
.$3 .5(3 lut ion uses a mixture of techniques, including paramet­ric searching, searching in monotone 
matrices, dynamic maintenance of planar configurations, and techniques silnilar to those used to handle 
fat objects (see [15]). As in the previous solutions, a major component of the algorithm is a procedure 
for solving the fixed­size problem: Given a radius r, we want to determine whether S can be covered by 
two closed disks of radius r. Jf-e will then combine this procedure with the paramet­ric searching technique 
of [12], to obtain the complete algorithm (see below for details). We refer to this prob­leln as the 
2DC (2-disk cover) problem. The best pre­vious solution of the 2DC problem runs in 0(n2 ) time [6] (see 
also [7]). Our strategy is to assume that such a pair of disks exist, call them D1, Dz, and to conduct 
a search for their centers. Let Ci denote the center of Di, and let Ci denote the circle bounding Di, 
for i = 1, 2. lye may assume, with no loss of generality, that ICI CzI is as small as possible. In this 
case it is clear that, for z = 1, 2, the circle C, passes through at least one point of S that lies on 
the portion of C% that appears on the boundary of the convex hull of D1 U D2; see Figure 1. Figure 1: 
L l and C? must pass through points lying on the boundary of conv(D1 U Dz)  Dynamic Maintenance of the 
In­tersection of Congruent Disks Before describing the main algorithm, we first describe in detail a 
procedure, which the algorithm will use re­peatedly, for solving the following problem. W e want to 106 
 maintain dynamically a set P of points in the plane, under insertions and deletions of points. After 
each update. we wish to determine whether the intersection 1{(P) = nP6P l?, (p) is nonernpty, where B, 
(p) is the closed disk of radius r centered at p. This condition is equivalent to the condition that 
P can be covered by a disk of radius r. Such a procedure is also used in the preceding algorithms of 
[6, 7]. We give here a slightly inferior implementation of this procedure. This is done because it is 
easier to describe. and, more importantly, it is easier to parallelize, which is required by the para­metric 
searching technique. To keep track of Ii(P) as P is being updated, we maintain separately the intersections 
Ii+(P) = (7Pcp B:(p) and Ii-(p) = nPeP B; (p). where B>(p) (resp. B; (p)) is the region consisting of 
all points that lie in or above (resp. in or below) B? (p). The bound­aries of these regions are (weakly) 
z-monotone, one of them is a convex curve and the other is concave, so it is fairly easy to determine, 
by a binary search through the vertices of both regions, whether their intersection is nonempty; see 
below for more details. C onsider the problem of maintaining Ii+ (P); the maintenance of Ii (P) is fully 
symmetric. Let -~(p) denote the boundary of B: (p). Note that the set {7(P) I p E P} is a collection 
of weak pseudolines in the plane, meaning that any pair ?(p), -/(p ) of curves intersect in at most one 
point. Moreover, ~ (p) and 7 (p ) intersect if and only if their x-projections overlap (that is, the 
difference between the x-coordinates of p and p is < 2r), and then -~(p) appears to the left of y(p ) 
on 8(B: (p) fl B$(p )) if and only if p lies to the right of p . All the sets P for which we want to 
maintain li+( P) will be subsets of the given set S. This allows us to use the following variant of the 
dynamic data structure of Overmars and van Leeuwen [1 1]. kVe sort the points of S by their r-coordinates, 
and store them in this order at the leaves of a minimum-height binary tree T. Each node v of T maintains 
the intersection Ii+ ( P,, ), where P, is the subset of the current set P whose points are stored at 
the leaves of the subtree of T rooted at v. Each leaf of T stores a flag that indicates whether the point 
p of S associated with it belongs to the current set P. (Actually. to conform with the structure of internal 
nodes, we store the r-range of B$ (p) at the leaf, if p belongs to the current set P, and store the full 
r-axis otherwise. ) If r is an internal node. with a left child UIl and a right child Wr. then: (a) u 
stores the L-range of Ii+ ( P, ), which is simply the intersection of the z-ranges of Ii+ (PW,) and li+(PU1r). 
 (b) If the ~-range of 1{+ ( Pv ) is nonempty, then the pseudoline property of the curves y(p), and the 
fact that the points of S are stored in T in increasing .c­  order, are easily seen to imply that ~~i+ 
(PW1) and 81i+ ( PW, ) intersect in exactly one point q, and we also store q at v (with pointers to the 
pair of curves that intersect at q). W-P construct. search and update this structure as in [1 i]. We 
first describe the searching procedure. We are gi~en a query point z and wish to determine whether : 
lies in 1{+ (P). To do so, we examine the root v of T. If the x-range of Ii+ (PV ) is empty, we report 
that 2 lies outside Ii+ (P. ). Similarly, if the x-coordinate of . falls outside the z-range of Ii+ (Pti 
), we also report that z lies outside Ii+ (PU ). Otherwise, let q be the point stored at v. If x(q) < 
x(z) then we continue the search recursi~ely at the left child of v. If x(q) > z(;), we continue the 
search at the right child of v, and if $(q) = x(;), we simply test whether z lies above or below z, to 
obtain the answer to the query. (Note that, once we have decided that q falls in the ~-range stored at 
the root, there is no need to repeat this test at other nodes along the search path, because the answer 
will always be positive. ) When we reach a leaf of T, we test explicitly whether q lies in the corresponding 
set B$ (p), aud thereby obtain the answer to the query. The cost of the query is thus O(log n). Consider 
next the updating of T, when a point p is inserted into or deleted from P. We find the path ir in T leading 
to p, and update the data stored at the nodes of ~, proceeding along ~ in a bottom-up fashion, and leaving 
all other nodes of T intact. We update the .E­range stored at the leaf of p, as appropriate. To update 
an internal node v, with a left child ul and a right child u,. we first compute the intersection of the 
r-ranges of Ii+ (PW1) and Ii+ (PW, ), and store it at v. If it is empty, no further updating at v is 
needed. Otherwise, we next compute the unique intersection point q. of 81<+ (PU,l) and dli+ ( Pti,, ). 
This is done in a manner similar to the technique of [1 1]. That is, let qwl, qw ~ be the intersection 
points stored at wl, w., respectively. We take an arc ~1 adj scent to qu,t and an arc y, adjacent to 
qw,, and allply a case analysis to decide which subtree of Wr or of W1 can be discarded in the further 
searching. We refer the reader to [11] for additional details concerning the analogous decision step 
that they use, and conclude that, the updating at v can be done in O(log n) time, so th? total cost of 
an update is 0( log2 n). Finally, the initial construction of T, for the initial value of P (and with 
knowledge of the full set S), can bf done in a similar manner: Ire sort the points of S by ~-coordinate, 
and construct a minimum-height binary tree T over them (with the points stored at the leaves). lf e then 
traverse T in a bottom-up fashion. comput­ing the data to be stored at each node v of T from the data 
already stored at the children of o, exactly as al~ove. Since T has O(n) nodes, its construction takes 
O(n logn) time. We maintain a symmetric tree structure for the set Ji -( P ). in which searches and 
updates are performed in a symmetric fashion. After each update, we can de­termine, in a final step, 
whether II+(P) and A_-(P) intersect, by conducting a binary search through the breakpoints of i31i+(P) 
and dli -(P). This search also takes O(log2 n ) time, as is easy to check. Solving the 2DC Problem: The 
Case Where the Centers Are Well-Separated Suppose first that, [CICZ / > r. Let A >0 be some suf­ficiently 
small constant angle, say 1 degree. We rotate the coordinate axes by j6. for j = 0, 1,.. ., ~2~/6J. In 
one of these orientations. c1 and C2 will be almost co­horizontal (meaning that the orientation of c1 
C2 has absolute value < &#38;), with c1 lying to the left of C2. In this case we have Z(C2) Z(cl) > 
rcosti > 0.99r. Assume further that [cl c? I > 3r, say. Then there exists a vertical line separating 
D1 and Dz. To detect whether this case arises, we sort, the points of S by their x-coordinates, and scan 
them from left to right. Let SL denote the set of points to the left of the currentl}­scanned point q, 
including q, and let SR denote the com­plementary set. We maintain the sets SL and SR dy­namically. repeatedly 
moving each scanned point from SR to SL. and checking, after each update, whether K( SL ) and li(SR ) 
are nonempty. If both are nonempty, we have found two disks of radius r whose union covers S. If the 
currently assumed configuration does exist and we are at the correct orientation, then, in exactly one 
of these steps. both intersections must be nonempty, so the above procedure will detect the existence 
of a 2DC of this kind. ~~sing the dynamic procedure described abo~e, the cost of handling this case is 
0( n logs n). Remark: This step can also be implemented using a simpler approach, which performs a binary 
search over the sorted sequence of points of S, to locate the line sep­arating .!L from SR. Each binary 
search step computes the smallest enclosing circles of the current SL and SR (in linear time. using the 
algorithm of [13]). If the radii of both circles are < r, then we have found a solution to the 2DC problem. 
~f both are > r, this sub case cannot arise. If the radius of the circle enclosing SL (resp. of SR ), 
is > r and the other is ~ r, the binary search has to continue to the left (resp. to the right). This 
procedure takes only 0( n log n ) time, but this will be subsumed in the cost of the subsequent steps 
of the algorithm. Next assume that r < lC1C2/ ~ Sr. Let ~q and rq denote the points of intersection of 
Cl and C z, with tl lving to the left of Vz. See Figure 2. If D1 and . Dz are disjoint, we define VI 
to be the leftmost point of D2 and define Z 2 to be the rightmost point of D1; if (1 lies to the right, 
of v?, we can proceed as in the previous case, because D1 and Dz are then separated by a vertical line: 
so we still assume that VI lies to the left of I ~. Since we assume that the orientation of c1 Cz is 
at Figure 2: The case r < ICl C?l s 3r most A in absolute value and that X(C2) 2(c1 ) > 0.99r, it is 
easily seen that Z(VI ) Z(cl) > 0.4r. hlote that the left semicircle of Cl must pass through at least 
one point q of S (or else we could have brought D1 and D! closer together, by moving D1 to the right). 
Let A b~ any vertical line separating c1 from VI, and let SL denote the subset of points of S lying to 
the left of A. Tlleu SL contains q and is fully contained in D1. Note that, the difference between the 
largest and smallest .r­ coordinates of points of S is at most 5r, so we can draw a constant number 
of vertical lines A, say with horizontal sel>arat,ion 0.3r between adjacent lines, so that at least O]}P 
of them will separate c1 and U1. Assume that ~ is the correct line. We then have the set SL available, 
and we compute the region I{(SZ ) = nP6~~ 8.(P), in 0( n log n ) time. The above arguments imply that 
c1 must lie on the (right) boundary of li( SL ). For each p ~ SR = S \ .$L, we intersect 88.(P) with 
31{(SL ). A> is well known (see, e.g., [7]), each such intersection consists of at most 2 points. We 
obtain all these points, and sort them, including the vertices of A (SL ), into a list r. This can easily 
be done in O(n log n) time. \tTe now iterate over each point v in r, place the center c1 of D] at v, 
or on the subarc of dA ( SL ) between aucl the next point in r, and update the set S (CI ) of points 
of S not cowered by D1. We note that when c1 n)oves from a point in r to an adjacent subarc, or from 
a subarc to an adjacent point, either a single point is added to S ( c1 ), or a single point is remo~-ed 
from that set, or the set remains unchanged. At each point c1 that we visit, we test whether S (cl) can 
be covered by a disk of radius r, and stop as soon as this happens, for we have obtained an affirmative 
solution to the 2DC problem (with radius r). Otherwise. we continue until r is exhausted, and conclude 
that A cannot be the desired line. If this procedure fails for all of the 0(1) lines ~, and for all the 
0(1/6) orientations, we conclude that there is no solution to the 2DC problem (with radius r) with the 
currently assumed configuration. Using the dynamic procedure described earlier, the cost of handling 
this case is O(n logz n). Solving the 2DC Problem: The Case Where the Centers Are Close to Each Other 
Finally, assume that Iclcz I < r. In this case the area of DI n D2 is at least r2&#38;/2 = 0.866r2, whereas 
the entire S can be covered by, say, an axis-parallel square R of size 3r, which we can easily compute 
in O(n) time. It follows that we can construct 0(1) points within R, so that at least one of them will 
lie in D1 n D? (and fairly close to both c1 and Cz ). Let ; be such a point. We sort the points of S 
in angular order about z, and partition the sorted list into two sublists, Q+, Q-, by the horizontal 
line passing through :. Assume that Q+ is sorted in clockwise direction about z and that Q is sorted 
in counterclockwise direction. See Figure 3 for an illustration. \ P+ Figure 3: The case where Ic1C2I 
< r Lemma 1 There exwt prefixes S; of Q+ and S; of Q-, such that S~US; S D1 and S\(S~US~) ~ Dz. Proofi 
Note that A = D1 U Da is star-shaped with respect to z. Let p+, p-denote the rays emanating from : and 
passing through the two points of intersection of ( 1 and Cz, where p+ passes through the top intersection 
point. Let S: be the prefix of Q+ consisting of points that lie counterclockwise to p+ (with respect 
to u), and let S; be the prefix of Q-consisting of points that lie clockwise to p . It is easily seen 
that S; and S; satisfy the desired properties. See Figure 3; it is interesting to note that we only need 
here the fact that the point z lies in D1 n D?. 0 \Ve now apply a technique that resembles standard searching 
in monotone matrices. Let M be the matrix whose rows correspond to points in Q+ (in clockwise an­gu Jar 
order), and whose columns correspond to points in Q (in counterclockwise order). For a E Q+, b G Q , 
we define ~fab as follows. Let p+ be a ray emanating from ; and passing between a and the next point 
of Q+, aud let p be a ray emanating from z and passing be­t~veen b and the next point of Q . Let S: be 
the prefix of Q+ consisting of points that lie counterclockwise to and let S; be the prefix of Q consisting 
of points P+ ~ that lie clockwise to p-. Let SL = S: U S; and let SH=S\SL. Then YY if both SL and SR 
can be covered by disks of radius r .ypJ. if SL can be covered by a disk of radius r but SR cannot .ll=* 
= NY if SR can be covered by a disk of radius r but SL cannot NN if neither SL nor SR can be covered 
by a disk of radius r. I ( Note that the number of rows plus the number of columns of .lf is n.) Our 
goal is thus to determine w]lether ,U has an entry YY . We denote by V(L) (rmp. .tf( ) ) the matrix containing 
the left (resp. right) characters of the entries of M. The matrices .14( L). .1/ ~R ) have the following 
monotonicity properties, whose proof is obvious: (a) If .If$ ) = N then .tf~~~! = N for any a > a, b 
> b. (b) If .Lf~~) = N then M~fi? = N for any a < a, b ~ b.  !Joreover, if r is any sequence of entries 
of ill, so that each element of I is adjacent to the preceding one in sol ne row or column of M, then 
the ~ralues of all entries in r can be computed in time O(n log n + Irl logz n). This is immediate from 
the dynamic scheme for main­taining intersections of disks, and from the observation that, each of the 
sets SL, SR is updated by the insertion or deletion of a single point as we move from one entry in r 
to an adj scent entry. We first compute all entries in the middle column of .V. AS just noted, this 
can be done in O(n logz n) time. If an entry YY has been detected then we are done. Suppose we have found 
an entry .! ~.b = NN . Then properties (a) and (b) imply that the top-left submatrix {~kfo,bl } a,<= 
and the bottom-right subrnatrix bi~b {.Ua,bJ } .,>. of M can be discarded from further anal­bt~b ysis, 
because they cannot contain a Yl entry. We thus recurse with the remaining bottom-left and the top-right 
subrnatrices of M. If no NN entry is de­tected, then either all entries in the middle column are lrN 
. or all are NY , or there is a single transition from a YNT entry to a following NY entry. In the first 
case we can discard the left, submatrix of M, and in the second case we can discard the right submatrix 
of M. In the third case we can discard, as above, the top-left and the bottom-right submatrices of M. 
(The difference from the previous case is that, if Mab = YN ­and :lfa+l,~ =-NY , then now we discard 
{kf.{bf} .I<a bt<b and {Ma)b,}a,z.+l ) In each case we thus recurse on bj~b subproblems whose total size 
is half the size of the orig­inal matrix, so the procedure will terminate after log­arithmically many 
steps. The terminal stage is when the current submatrix has only a single column. We then scan this column, 
as above: if a YY entry has been found, we have an affirmative solution to the 2DC problem. Otherwise, 
if no YY entry is found in any subproblem, for all possible orientations, we conclude that the currently 
assumed configuration cannot arise, which implies a negative solution to the 2DC problem, because by 
now we have exhausted all possible cases. Concerning the efficiency of this procedure, we note that the 
total width and height of all submatrices in any fixed recursive level is at most n, as is easily checked. 
In fact, these submatrices have pairwise-disjoint row ranges and pairwise-disjoint column ranges. and 
they lie within .V1 in a bottom-left, to top-right order: see Fig­ure 4. It follows that we can trace 
the middle columns of all submatrices in a fixed recursive level efficiently. For this, we construct 
a monotone sequence r of en­tries of M, consisting of the concatenation of the middle columns of the 
submatrices, interspersed with horizon­tal moves (along rows of M ) that, connect between these columns; 
see Figure 4. The total length of r is at most n, so we can trace all its entries in a total of 0( ?2 
log2 n ) time. Hence the total cost of the above procedure is o(nlog3? 2). We thus conclude: Theorem 
2 The ,?DC problem, for a set of n points m the plane and for any fixed radtus r, can be solved in 0(nlog3 
n) tame. Figure 4: The submatrices of M arising in a fixed re­cursive level of the algorithm, and the 
sequence r that connects their middle columns  Solving the 2-Center Problem A~ already mentioned, we 
next apply the parametric searching paradigm of Megiddo [12]. To do so. we need to design an efficient 
parallel algorithm (in I:aliant s comparisons model) for the 2DC problem, with the in­tention of simulating 
its execution at the unknown op­tilnal radius of the 2-center solution. (We assume fa­miliarity of the 
reader with the parametric searching paradigm. More details can be found, e.g., in [1]. ) \lost of the 
steps of the preceding 2DC algorithm are fairly routine to parallelize. The main difficulty is in parallelizing 
the dynamic maintenance of the intersec­tion of disks. used in the various steps of the algorithm. This 
maintenance appears to be inherently sequential, but the data structures that we have used enable us 
to parallelize it efficiently. In doing so, we exploit the fact that, the sequence of updates, in each 
application of this dynamic scheme in the algorithm, is known in advance. TIII= parallel implementation 
proceeds as follows. IVe first solve the following subproblem. Suppose we have the above tree structures 
for some subset P of S, and we have two other subsets, .4+, A , where we as­su me that .-l+ n .4 = 0. 
IVe want to compute, in a single step, the tree structures for the set P U .4+ \ A-, where we can use 
IA+\ + I.-l ] processors for this task. lye explain how to do it for the tree T that represents I{+ (P): 
the handling of the other tree is fully synlmet­ric. We search for all leaves of T storing the points 
of .4+ U.~-. We next process the nodes encountered along all the search paths, level by level, in a bottom-up 
fash­ion. At each node u we recompute the data stored at u as described for the sequential procedure. 
The to­tal number of nodes at which we have to recompute the data is ( l.-!+ I + 1.4 1) log n, and each 
recomputa­ 110 tion takes O(log n ), so we can perform this task with 1.4+ I + IA-I processors, in 
O(log2 n) parallel steps. We now apply the following procedure, which resem­bles the standard parallel 
prefix-sum algorithm. Let r be the sequence of updates to be performed on some initial set P. fVe construct 
a minimum-height binary tree Y whose leaves store the elements of r in order, and compute, for each node 
v of Y, the sets A$, .4; . so that A: and .4; are disjoint, and, after all the updates of P stored at 
the leaves of the subtree of Y rooted at v, we have Pnew = PO1d U .4$ \ A;, where PO1d is the value of 
P before this sequence of updates, and PneW is its value after these updates. These sets are easy to 
construct in parallel, traversing Y in a bottom-up fash­ion, and computing the sets at a node v from 
the sets at its children. This can be done with 0( Ir [) processors in O(logz n ) parallel steps. Once 
the sets .4.: and A; are computed for all nodes r of ~-, we perform a top-down traversal of Y. lVhen 
we visit a node r in this traversal, we already have avail­ able the value P$d) of P before starting 
the sequence of updates stored at the subtree rooted at, v. Let Wi, Zvr be the left and the right child 
of v, respectively. We then have P~~ ) = P~~~, and P~~ ) = P~~~ u Aj, \ A;,. As noted above, obtaining 
I{(P&#38;r ) ) from K( P$~ ) can be done in parallel with lAjl I + IA;, I processors in O(log2 n) time. 
There is however a new technical problem: Since we do not want to maintain multiple copies of the tree 
structures that store the various intersections Ii(P). and since several updates are performed on these 
trees simultaneously at each parallel step of the algorithm, we need to organize these tree structures 
so that all these updates can be performed without interfering with each other. This is done using the 
following time-stamping scheme. Each node w of any of the two trees T used above stores a sequence aW 
of data items (each con­sisting of an appropriate z-range and an intersection point ), sorted by the 
preorder of the nodes of I _ that have modified u:. tVhen a new update step accesses w, it performs a 
binary search through au, , with the pre­order index of the current node of Y, to find the item of au 
that is relevant to the currently performed update. If u needs to be updated, the new value is inserted 
into au at the appropriate place. At the end of this top-down traversal, we have com­ puted the value 
of li( P ) after each update operation in r. By the above analysis, this can be done with 0(] r\) processors 
in 0(log4 n ) parallel steps (where one additional logarithmic factor is due to the cost of the time-stamping 
scheme, and one due to the height of ~ ). There are several other steps of the algorithm that also require 
parallelization, such as sorting the points of S in various orders, constructing the sets li( SL ) and 
their intersections with a collection of disks, and the initial construction of the tree structures of 
the dynamic scheme. All these steps are relatively easy to parallelize, and the cost of their parallel 
versions is dominated by the cost of the parallel procedure just decribed. We le:lve it to the reader 
to check the easy details. We now plug all this into the parametric searching nlachinery. We note that 
the parallel implementation of the 2DC algorithm consists of 0(log5 n) parallel steps (the last step 
of the algorithm invokes the above dy­namic scheme O(log n ) times), and that each parallel step makes 
O(log n ) calls to the sequential 2DC algo­rithm. Hence we obtain: Theorem 3 The 2-center of a set of 
n points m the plone can be computed m O(n logg n) tzme. Remark: Y$ e have not made a serious attempt 
to im­prove the performance of the above parametric search­ing procedure, because our main interest was 
in obtain­ing a near-linear solution of the 2-center problem. Such all improvement was recently made 
in [5], where an al­gorithm with a randomized expected O(n log2 n) time is obtained. This algorithm follows 
the same outline of the algorithm described above, but it needs only a nlllch more limited version of 
parametric searching, and it uses a different dynamic data structure.  References <RefA>[1] P. Agarwal and 
M. Sharir, Planar geometric location problems, Algorzfhmzca 11 ( 1994), 185-195. ~2] Z. Drezner, The 
planar two-center and two-median problems, Transporiatzon Science 18 (1984), 351-361. [3] A. Efrat, A 
simple algorithm for maintaining the center of a planar point set, M .Sc. Dissertation, The Technion, 
1993. [4] D. Eppstein, Dynamic three-dimensional linear pro­gramming, ORSA J. Computmg 4 ( 1992), 360 
368. [5] D. Eppstein, Faster construction of planar two­centers, manuscript, 1996. [6] J. Hershberger, 
A faster algorithm for the two-center decision problem, Inform. Process. Lett. 47 ( 1993), 23-29. [7] 
J. Hershberger and S. Suri, Finding tailored parti­tions, ~. A[gorzthms 12 (1991), 431 463. [$] R.Z. 
Hwang, R.C.T. Lee and R.C. Chang, The slab dividing approach to solve the euclidean P-center problem. 
Algorzthmzca 9 (1993), 1-22. [9] .J. Jwmmczyli and M. Kovmluk, An efficient algo­rithm for the euclidean 
two-center problem. Proc. 10th .4CM $ymp. on Computational Geometry. 1994. 303-311. [10] M. Katz and 
M. Sharir, An expander-based ap­proach to geometric optimization. Proc. 9th ACM ,?,ymp. on Computational 
Geometry, 1993, 198 207. [11] M. Overmars and .J. van Leeuwen, Maintenance of configurations in the plane. 
J. Comp. System Scz­ences 23(1981). 166 204. [12] N. Megiddo, Applying parallel computationalgo­rithrns 
in the design of serial algorithms. J. .4CM30 (1983). 8.52-86.5. [13] N. Megiddo, Linear-timea lgorithmsfo 
rli nearpro­gralmnling in R3andrelated problems. SIAMJ. Com­p ld. 12 (1983)4 759 776. [14] N. Megiddo 
and K. Supowit, Onthe complexityof some common geometric location problems. S1.4M J. Comput. 13 (1984), 
1182-1196. [1,5] J?. van der Stappen, Motton Plannzng amzdsf Fat Obstacles, Ph. D. Dissertation, Utrecht 
(~niversity, 1994.</RefA> 
			
