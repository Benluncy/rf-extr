
 A PARALLEL DATABASE MACHINE FOp QUERY TRANSLATION I>~ A DISTRIBUTED DATABASE SYSTEM M. Mehdi Owrang 
O. Dept. of Mathematics, Statistics and Computer Science A merican University Washington, D.C. and M 
assoud O m~dvar School of Electrical Engineerin~ and Computer Science University of Oklahoma Norman, 
O K ABSTRACT The complex softwar, is shown to be the bottleneck A special purpose Data Base Machine 
(DBM) designed to the system throu~,hput. The software approaches to translate queries between data 
models is based on the design of conventional architecture of examined. The DBM will provide a means 
of direct general purpose SlED machine are not cost and speed communication between different DBMSs 
in a efficient [I]. This problem ~s even more serious in a distributed database system. The design 
ut~ILzes the heterogeneous distributed database where a complex concept of parallelism to handle simultaneous 
queries software is required in order to translate queries and to improve the performance of the translation 
 between different DBME to ~chieve a data with respect to cost and time. The components of integration 
a mon~ different computer sites. the DB~ are described and an e~ample is provided to illustrate the 
stages of the query translation utili~in~ Advances in hardware technology and the the proposed DBM. 
 introduction of smaller chips with lar~er gate density and higher speed brought some chanKes in system 
 Key words: query translation, relational data model, design. The high cost of software and the overhead 
 hierarchical data model, network data mode|, involved in nonnumerlcal data processin~ leads us to 
bypergraphs, data base machine, query analyzer, some hardware implementation of commonly used translat£on 
processor. al~orithmq. This in turn result~ in design of more special p.rpose machines such as Data 
Base Machines ]. Introduction (DBM) [-7]. Such a DBM will be included in the distributed database system 
to handle ti~e query The advent of lower cost computer systems has paved translation between different 
DBMSs. F~zure 1.1 the way for decentralization of computing resources. depicts a distributed database 
~;ystem with a DBM. Decentralization has enabled designers to enhance Local systems can handle the 
local q.eries using the local performance by allowing the freedom of design local D BMS (i.e., relational, 
hierarchical, network,..). and software choice for each local system. Such However, any query originating 
From a computer site freedom provides the necessary enhancement of local (source) which requires accessin~ 
data from another computing, but complicates the task of oroviding computer site (~arget) has to be 
routed to the DBM, access to the database resource on a system wide where it can be tra,slated to the 
appropriate DMI, of basis. In particular, it either forces the user to be target, where ~he data resides. 
 aware of the location and format of all the data in the system or the computer software/hardware ~ust 
have the ability to provide access to the local This research focuses on the desizn of a DBM with databases 
through a single data manipulation query tra~islation capability. The design considers langugage. Systems, 
such as MULTIBASE [lO] the hardware im plem entation of the alenrith ms provide such access, but Force 
the user to use both provided for the query translation. The proposed the data manipulation language 
(DML) of MULTIBASE DBM has homoFeneous modules to take advantage of and the local system to get the 
enhanced local state of the art technology, e.g. VLSI [6"]. ]t is a perform ance. multiprocessor to 
execute independent algorithms in parallel. The system will handle the simultaneous What is needed is 
a translation mechanism tbat can queries ~nrough the resolution of the conflicts and provide the dynamic 
query translation necessary to sharing of the resources. allow the direct communication of different 
DBMS so the user only needs to be proficient in the D M L of In the next section, we review the query 
translation his/her local DB MS. The query translation in a process. Section 3 looks at the design 
of a DBM herterogeneous distributed database has been studied with query translation capability. This 
~ectlon also using hypergraph medels [9]. Al~orithms have been examines different components of the 
~roposed DBM. provided to transl.~te queries between any two In Section 4, the overall objectives of 
t:he DBM hs database models (e.~., relational, hierarchical, and discussed. network). operations" 
usle~ @ %;........... ]) Map the source query into the I,yper~.raph space of the source design. 2) Translate 
the resulting source query hypergraph t,sE a OSCR into the hypergraph sT~ace of the target hypergraph. 
I ..... I , I N[TWORK I~I[RFACE NETWORK ]~TI[RFACf. I I~ETW 0 RK |~T£R F ~.CE l I ~SER i --USER LOANS 
 LeSER ~ I ..... I LIS[+ R ~ESER LOC&#38;L SYSTEM LOCAL SYSTE~ rlGI) eE l,l GENERAL CO~;FIGL!RA'IION 
0 F O]'~TI~IgETE I) DAT+I+I~ASE ~YST£1'I 2. Query Translation Process In this section we briefly describe 
the query translation process between data models based on hypergraph models. A great deal has been writtem 
in recent years about the use of h,rpergraph(s) in representing the logical design of database schemes 
~,3,4,~ . To be of use in translati~,g queries, the hypergraph model has been expanded to incorporate 
the operations of the DML [9]. Space limitation forces us to restrict our discussion to only the general 
steps of translating queries between relational, hierarchical, and network data models. These steps can 
he implemented in hardware and are the basis for the design of a special purpose DBM. A complete discusslon 
of query translation between data models plus all the necessary transformation rules (algorithms) for 
different ste~)s of the translation process is provided in [9]. We assume that we have two database 
desiens. The source design attempts to retain the same semantics as the target design although thev are 
supported by different database management systems and may be based on different data models. The data 
is stored in the format required by the target design, but the user views the data as though it was stored 
in the source design. The two designs are represented in the hypergraph format(s). To translate the 
query, we require three 3) Map the target query hypergraph to the target data manipulation lan~,uage. 
 In the first operation, we have tile task oF creating a source query hypergraph that llas sufficient 
information content to provide a basis for translation. We have found four types of information to be 
useful. Natura~dy, the set of attributes tllat represent the result of the source query and the attributes 
used in a search conditions are essential. In addition, we include information used in the hierarchical 
model to establish a position J~ the database (the network model operates in a similar manner). The 
fourth type of information taken from the source query is useful in n;l~rigat~ng the target hypergraph. 
The path used in the source query is passed with the source query hypergraph. In target hypergraphs with 
ambiguous path selection, the source query path can be used to choose the correct hath. For example, 
if the target dat;~base is relational and the hypergraDh contains a cycle, we may have two paths connecting 
the relevant attrih.tes [gJ. The two paths have somewhat different semantics which can be resolved in 
the translation process by falLin~ hack and .sin F the user's interpretation of the semantics from the 
source query path. In the hierarchical model, the question of navigation is one of tree selection. The 
form at l~sed to pass the four types of information to the translation process is a three edFe hypergraph 
and the math information is passed as a set. The first edge of the source query hypergraph (P) is the 
set of attributes used to establish position. The seco[~d edRe (C) is the set of attributes used in 
the search conditions and the conditions are used to label the attributes. Fhe final edge (R) is the 
set of attributes which represent the result of the source' query. The translation process makes use 
of the source query hypergraph, the source path set and the tarRet hypergraph to translate the source 
query into the target query hypergfaph. When the source and target database designs have the same semantics 
(as in dynamic query processing), the source path is used to determine the oath in the target hyper~raph. 
For the case where the tarp~et data model is relational, the source path set can be used directly to 
determine the join sequence required to incorporste the attributes used in the selection conditions 
and the projection attributes in th~ same relation. We assume thai: the join sequence pl~duc,~d is 1ossless. 
There are several methods of insurLnR the ~enerations of a lossless join sequence that exist in the 
literature (e.g., -hypergraph[5]and maximal objects [8)and we will assume that one of the techniques 
is u:ed in the remainder of th~s work. The edges forminF the join s~t are used as the initial edges of 
the target query hypergraph. Join edges are added to the target query hypergraph to imply the order 
in which the join operations will take place. As a final step the labels from the nodes in the ~ource 
query hypergraph are copied over to the rodes in the target query hypergraph. Labels from the position 
edge of the source query hypergral,h (if any) are marked as position labels before they are copied to 
the target query hypergraph. The concept of positioning is handled in the relational environment in one 
of two ways. In cases where the positioning is such that it can be implemented by simply using the condition 
on a selection, relational al~gehra operators are sufficient to answer t e query. In more complex cases, 
we may require ; sort of the resulting tuples followed by a partition of the sorted set. The mapping 
of the tarRet query hypergraph into the appropriate DM L is naturally language dependent. The target 
query hy~ergraph for the relatEonal environment uses relational algebra as its basis to allow the mapp~n~ 
algorithm to be basically a translation from relational algebra to the appropriate DML. Translation 
from the source query hypergraph into the environment of the target datahas in the hierarchical format 
requires the creation of a target query hypergraph made un of a positioning tree and an answering tree. 
The source query path set is used by the translation process to determine the segments required in the 
tarFet query hypergranh. The position edge (P) is used in conjunction with the path " information to 
create the positioning tree. The selection and projection edges of the source query hypergraph, C and 
R, respectively, are used by the translation al~orithms to create the answering tree required to ~enerate 
the target query in the hierarchical D~c L. A similar approach is taken for translat[n8 the source query 
hypergraph into the environment of a target database in the network form at. As we mentioned, the translation 
algorithms will he implemented on hardware in order to desivn the translation processors of the DBM to 
be discussed next. 3. Architecture of the DBM In this section we describe a DBM which is capable of 
translating queries between data models. We assume that the computer sites in the distributed database 
systems are using different data models. For instance, fiRure 1.1 illustrates such ,q system where 
the relational model is in one corn puter site, hierarchical model in the second, and network model 
 in the third computer site. Any Query requesting data from one computer site has to go through the 
 DBM to be translated to the DML statements of another computer site where the data resides. Note that, 
in Figure 1.1, the DB M can physically be located anywhere in the distributed system; i.e., within 
one of the computer sites or in a seperate location. The proposed DBM has the follow~ng components: 
 A)-Query Analyzer B)-Processor Dispatcher, and C) - Translati,~n Process|rip Unit (TPU) The overall 
design of the DBM is depicted in Figure 3.1. pORT IN PUT I (GLOBAL MEMORY) GLOBAL CONCEPTUAL SCHEMA 
QUERY PROCESSOR QP QP QP r., i > .= ~c Qp QP QP i =c QP QP ! QP II PR," CESSOR DISPATCHER II PI~ 
, P2 P3 RR RH R:~ P4 P5 p6 R~ i HR BN O UT PUT ~ -~ FIGURE 3.1 OVERALL DESIGE OF THE DBM. ~)- Query 
Analyzer The query analyzer has two components, ~lohal conceptual schema and query processors, which 
enables it to examine the query in order to decide the DML used in the source query. In addition, it 
has the task of locating the data and identifyi~o the data model and DM L use~l in the site where the 
data resides. Global C(,nceptl~al Schema: A globc~~ conc~'ptual schema describes the entire distribut 
d database, ;ncludin~ data distribution, ]oca! schema eprese,tin~ the data in each site and the associating 
DML. Figure 3.2 represents a global conceptual schema in a distributed database system where a relational 
model for site I, a hierarchical model for site 2, and a network model for site 3 is employed. Note that 
in Figure 3.2 we showed that the logical view of the data models 1:sed in different sites for simplicity 
reasons. ~{owever, for the actual implementation we employ the hypergraph R1 (A,E,C) R2 (A,D,E) R3 (D,F) 
R4 (F,G,H) R 5 (D,|,J) A-SITE I: A RELATIONAL SEQUENCE Based on the result of the query processor, the 
data models involved in the source and target databases, the processor dispatcher will activate the required 
processor of the TPU to perform the query translation. For instance, if the result of the query analyzer 
is R~> ~ (relational source query and hierarchical target database), then processor dispatcher will activate 
processor P2 of the TPU. C)- Translation Processing Unit The heart of the DBM is located in the Translation 
 Processing Unit; namely, the translation processors. As for the initial design, this unit has q processors 
in which the 3 steps of the qt, ery translation is implemented in each :)rocessor. These ~>rocessors 
are identified as follows: RR -Processor PI: r~lational 9puree query~> target relational database R8 
 B-SITE 2: A HIERARCHICAl, SEQUENCE .,, i A [ B I= I C-Slr~.3: J. NETWORK SCffEMA F|GUIt£ ~ 2 AN EXAMPLE 
OF &#38; GLOBAL CO~CEP~0AL SCHEMA. representation of tl~e data models since all the translation algorithms 
operate on the hyperFraph formats of the logical views. Query processor: A query processor decides which 
nrocessor of the translat[on processing unit has to be activated. This is done by evaluating the source 
query to decide what type of data model is involved in the source query (e.g., relational, hierarchical, 
or network). Then, the query processor uses the ~_lobal schema to decide where the target data is located 
and type of its data model in the target data base. The result of the query processor, the data model 
used in the source and target query, is passed to the processor dispatcher for further processing. The 
same query evaluation algorithm is implemented on all auery processors. Therefore, they are homogeneous, 
which allows us to take advantage of state of the art technology, e.g., VLSI[6]. B) -Processor D~patcher 
Rll -Processor P^: relational source auery--> tarF.et ° 7 hlerarclucal database R f~ -Processor P~: 
relational source euery~> target network data|~ase Hl! -Processor P, : hierarchical source query~> tar~.et 
hierarchical d~tabase H R -Processor P5: Hierarchical source query~> target relational database HN 
-Processor P6: Hierarchical source query~> target network database NN -Processor P7: Network source 
query~> target network database NR -Processor PS: Network source query~> target relational database- 
 NH -Processor P_: Network source query~> target h~erarclucal database For instance, processor P5 is 
capable of translatin~ a hierarchical source query znto a target relational query. There are several 
techniques to implement the algorithms provided for the 3 steps of translation in hardware to construct 
these processors [II]. Fieure 3.3 illustrates tile structure of a translation processor. Each ste~ c)f 
the algorithm consists of a set of micro operation which can be stored on fast coDtrol memory of each 
processor. Upon processor activation (activatin.~ F|ap, is set on by the processor dispatcher), the micro 
operations are fetched and decoded by the Control Unit and executed by A LU which results in translation 
of query from one model to an}ther. The local memory is used to store the input to the translation process 
(source query hvpergraph and target schemr,) and the generated target query. It is worthwhile to mentio,l 
that the apgroach described for implementing the algorithms in translation processors can be used to 
construct the q-cry processors. The difference is that the  /kRI"IH~TIC  LOGICUWlT ACTl'~rA'rIOtf 
LOGIC 1"/0 FIGURE 3-3 s'rilucwRE ~ A PBOC~.r.~ algorithms implemented in translation processors are 
 different, where as the ones used in query ~rocessors are all the same. To see how this DBM operates, 
let's consider the following example. Example I. Let's assume that Computer Site 1 which is using a 
hierarchical DBMS requests some data which is stored in Computer Site 2 us[n~ a relational DBMS. The 
source query written in hierarchical D M L is passed to the DBM. Then, the query analyzer uses one of 
its query processors in ~onjunction with the global conceptual schema to d~cide what computer site (i.e., 
site 2) has ti~e data nnd what data model (i.e., relational) is used. As a result, an output (i.e., H--> 
 R) will be generated. This output will be passed to the processor dispatcher which in turn uses this 
information to activate the appropriate processor of the Translation Processing unit (i.e., P5). When 
processor P5 i~ activated, the source query hypergrapi~ and the ~equired target schema (its hypergraph 
representation) will be brought into the local memory of the processor from the global memory. The microprogram 
in Control memory of the processor will take the data stored in local memory and perform the predefined 
hardware implemented algorithm(s) on it. The relational target query is generated ~nd :~tored back in 
the local memory of the processor. The translated query is executed in Computer site 2, where the data 
resides, and the result is shipped back to the requesting data (site I) through the network interface. 
 4. Objectives of the proposed DBM The motivations behind the inclusion of a DBM m]ch as the one described 
in Section 3 are fourfold: I -Reducing the cost of query translation This objective is achieved through 
hardware implementation of the translation algorithms on low cost and h]~h density chips. 2 - Increaslng 
the speed of query translation It is obvious that the hardware implementation of the algorithms runs 
faster than the software implementation ones [II]. 3 - Improving the local data accessing The inclusion 
of such DBM in a dis!ributed database system will improve the local data accessing since the local DBMSs 
do not have to be concerned about global data accessing. 4 - Expandability This DB 4 can easily be 
expanded to include other data models in the existin~ distributed database system. It can be done by 
includinB additional translation processors for which the three steps of the translation process required 
for the new model are implemented in the translation processors of the translation processing unit, and 
by includin~ some more processors in :-he query analyzer. Of course, the data model d,,scriptlon (Schema) 
of the new model has to be included in the ~lobal conceptnal schema as well. 5 - Parallelism The D 
B M is ab] to utilize the concept of paralleli~m, which s ~eed up tlle translation ~rocess by executin~ 
independent ~ubparts of the tram;tat|on process in parallel. In addition, the DB~I is capable of translatinF, 
,,ultiule queries in parallel as well ParallelL~m is achieved at two levels: a)-At system level, where 
multiple queries can be translated simultaneously. Note that the as:sumption is that there are no two 
queries comln~ to the DB.M with the same source and tarc, et data models at the same time (or while one 
query Lq being processed). In Section 3 we explained that each query accessln~ data from other computer 
site will cause a ;~articular translation .~rocessor of the translation processing unit to be activated. 
Since there are more than one translation processor, the sl!stem is capable of translating as many queries 
as there are translation processor simultaneously as long as no two queries invoke the same processor. 
Thiq restriction, however, can be removed by introducing a ciueuin£ system or addin~ more translation 
processors to the translation processing unit. b) -At processor level, where subparts of the translation 
process can be executed in para]!el. For instance, when the target system is a relational model, we require 
to find a ioin sequence from the target hypergraph. Creating a ioin sequence Cq] requires croat|mr different 
trees ~here the root of the tree is an ,~dRe of the target hyperRraph ~:hich has some attributes in source 
query hyper~{raph. Subsequently, a tree wilt be selected with minimum weight to give the join sequence. 
Obviousl~, creation of these trees are independe~It of each other and therefore can b~ o.e,~erated in 
!~arallel. Nat(,rally, we need multiple ~odules to crea~e these trees. In the worst case, the query attrib,tes 
may be scattered among :ill edges of the tarRel query hypergraph. In such case, we 1~eed to create a 
tree for every edge of the tarF. et hyperpra0h as the root. Therefore, the maximum number of the modules 
depends on the (6) Glasser, L. A. and D. W. Dobherpuhl, The Desisn number of edges in the target hypergraph. 
Similarly, when the target model £s hierarchical or network, we need to create a position tree and an 
answering tree [9]. As the creation of these two trees are independent of each other, they can be generated 
in parallel. 5. Conclusion The problem of query translation between data models in a distributed database 
system has been studied. The translation process requires three steps: I)- Map the source query into 
the hypergraph space of the source design. 2)-Translate the resulting source query bypergraph into the 
hyper~raph space of the target hypergraph. 3) - Map the target query hypergraph to the target manipulation 
language. The high cost of software and the overhead involved in nonnumerical data processing leads 
us to hardware implementation of the al=orithms for different steps of translation. Subsequently, the 
design of a Data Base Machine (DPM) with query translation capability was presented. The proposed DBM 
consists of a query analyzer, processor dispatcher, and translation process/n~ unit. The system is capable 
of translating simultaneous queries in paral|el to some extent. In addition, it can easily be expanded 
to incorporate other data models in the distributed data base system. Our current work focuses on optimal 
allocation of translation processors in order to handle unlim{ted number of query translation simultaneously. 
 <RefA>and AnalysLs of VLSI Circuits, Addison-Wesley, USA, 1985. (7) Leilic h, H.O. and M. Missikoff, (editors), 
Database machines, Springer-Verlag, International Workshop, Munich, Sep. 19S3. (8) Meier, O. and J. Ollman, 
"Maximal Object and the Semantics of Universal Re]ation Databases," ACbl TODS. VoL ~, No. 1, March 1q83, 
rip. 1-14. (9) Owrang O., M.M., Query Translation in a Heterogeneous Distributed Database based on Hypergraph 
Models. Doctoral diqs., University of Okllhoma, Norman, Oklaho,na, May 1986.  (I0) Smith, J.M., P. Berste[n, 
U. Dayal, N. Goodman, T. Landers, K. Lin, and E. Wong, "MULTIBAS": Integrating lJeterogeneous Distributed 
)atabase System, s," AFIPS ~:onf., Proc. 1981~ National Computer Conference, Vol. 50, pp. 487-499.  
(11) Hhr, Leonard, Algorithm~-Structured ComD~lter  ,Arrays and Network, Academic Press, USA, 1984. 
 REFERENCES (i) Baer, Jean-LouD, Computer System Architecture_, Computer Science Press, USA,  (2) Beeri, 
C., R. Fagin, D. Maier, A.O. Mandelzon,  J. Ullman and M. Yannakakis, "Properties of Acyclic Database 
Schemes," Proc. ]3th A CM Syrup. on Theory of Computing, Milwaukee, May 1Q81, pp. 352-362.  (3) Beeri, 
C., R. Fa ~in, D. Maier and M. Yannakakis, "On the Desirability of Acyclic Database Schemes," JAC._.__._MM, 
Vol. 30, No. 3, July iq83, pp. 479-513.  (4) Chase, K., "Join Graphs and Acyclic Database Schemes," 
Very Larse Database Conf., lqSO, pp. 95-I DO.  (5) Fagin, R. "Degrees of A cyclicity ¢or Hypergraphs 
and Relatlonal Database Schemes," JACM, VoL 30, No. 3, July 1983, pp. 514-550.  </RefA>1980 
			
