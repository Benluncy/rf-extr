
 (Extended Abstract) A New Constructive Root Bound for Algebraic Expressions Chen Li Chee Yap* Courant 
Institute of Mathematical Sciences New York University, New York, NY 10012, USA. Email: {chenli, yap}@cs.nyu.edu 
 October 19, 2000 Abstract Computing effective root bounds for constant alge-braic expressions is a 
critical problem in the Exact Geometric Computation approach to robust geo-metric programs. Classical 
root bounds are often non-constructive. Recently, various authors have proposed bounding methods which 
might be called constructive root bounds. For the important class of radical expressions, Burnikel et 
al (BFMS) have provided a constructive root bound which, in the division-free case, is an improvement 
over previ-ously known bounds and is essentially tight. In the presence of division, their bound requires 
a quadratic blowup in root bit-bound compared to the division-free case. We present a new constructive 
root bound that avoids this quadratic blowup and which is applicable to a more general class of alge- 
braic expressions. This leads to dramatically better performance in some computations. We also give an 
improved version of the degree-measure bound from Mignotte and BFMS. We describe our imple- mentation 
in the context of the Core Library, and report on some experimental results. 1 Introduction There is 
considerable recent interest in robust implementation of geometric algorithms [17, 14]. Exact Geometric 
Computation (EGC) [19] is one general approach to achieve geometric robustness. This is the approach 
in, for instance, the LEDA [3, 8] and CGAI_ [61 libraries. A fundamental task in EGC is to determine 
the exact sign of a '--*~work is supported in part by NSF Grant #CCR-9619846. constant algebraic expression 
E. For example, the following expression arises in the implementation of Fortune's sweepline algorithm 
[5] for the Voronoi diagram of a planar point set: a + ,v/b a' + v/~ (1.1) E = --d d' ' where a, a', 
b, b', d, d' are integer constants. Typi-cally, the sign determination task reduces to first finding 
some root bound b for E. We call b > 0 a root bound for E if the following holds: if E # 0 then IE] > 
b. As our choice of terminology sug- gests, we are mainly interested in bounding roots away from 0. With 
such a root bound b, we can determine the sign 2 f E by computing a numeri- cal approximation E such 
that ]E -E[ < ~. The sign of E is the same as that of/~ if IEI >_ oth-erwise we can conclude that E = 
0. In practice [19], the precision required in approximation can be progressively increased until one 
of two events occurs: either (i) the approximation E satisfies (1.2) IEI > IE- El, or (ii) the approximation 
satisfies b (1.3) [E-E[ < ~. Note that if [E I is large, then condition (i) will be reached first, and 
the root bound does not play a role in the actual complexity of the sign de- termination. However, if 
E is zero (as happens in, say, degenerate cases or theorem proving ap- plication [15]), then the root 
bound plays a crit- ical role. The Real/Expr Package [19] is the first system to systematically exploit 
such root bounds. More recently, the [_EOA Library [1] and the Core Library [9, 7] have made such sign 
determination techniques easily accessible to any programmer. The problem of root bounds and more gener- 
ally, root location, is a very classical one with an ex- tensive literature (e.g., [10] or [12, chap. 
2]). Some classical bounds are highly non-constructive. If a bound for a root c~ of a polynomial P(x) 
is given in terms of some simple function of P's coefficients and degree, it can be considered constructive. 
For instance, Landau's bound says that any non-zero root a of P(x) satisfies los I > IlP(x)]]21 where 
P(x) = E Loaix and IlP(x)[12 = x/E L01ail 2. Unfortunately, in many applications, the coeffi-cients of 
P(x) are not explicitly given. For in- stance, in the LEDA and Core libraries, an alge-braic number a 
is presented as a radical expression which is constructed from the integers, and recur- sively built-up 
using the four arithmetic operations (+,-, x,+) and radical extraction ~ (k > 2). Thus, the notion of 
"constructive" depends on the presentation of c~; we call such a presentation an expression. If E is 
a presentation of a, we will write val(E) = a. But when there is no confusion, we simply write "E" in 
place of "val(E)". The constructive root bound problem is this: given a set g of expressions (e.g., the 
radical expressions), give a set of inductive rules for computing a root bound for each expression in 
$. If b is a root bound for an expression E, we will call -log 2 b a root bit-bound for E. In the worst 
case, the root bit-bound de- termines the complexity of our sign determination algorithms. It is important 
to realize that in our paper, the term "expression" roughly corresponds to a directed acyclic graph in 
which nodes are la- beled by the appropriate constants and operations (see Section 3). One of the best 
constructive root bounds for the class of radical expressions is from Burnikel et al [2] (hereafter called 
the "BFMS bound"). The BFMS approach is based on a well-known transformation of an expression E to eliminate 
all but one division, producing two associated division-free expressions U(E) and LiE ) such that val(E) 
= val(U(E))/val(L(E)). E.g., if E = ~ + ~, then U ( E) = ad + bc and L( E) = bd. If E is division-free, 
then LiE ) = 1 and val(E) is an algebraic integer. For an expression E having r radical nodes with indices 
kl, k2,... , kr, the BFMS bound is given by (1.4) val(E) ~ 0 ~ lval(E)[ _> (u(E)D(EP-1I(E)) -1, where 
D(E) = I~iL1 ki, and u(E) and l(E) are (respectively) upper bounds on the absolute values of algebraic 
conjugates of val(U(E)) and val(L(E)). For division-free expressions, the BFMS bound improves to (1.5) 
val(E) ¢ 0 ~ [val(E)] _> (u(E)D(E)-I) -1. This was shown to be essentially sharp. Note that the root 
bit-bound in (1.4) is quadratic in D(E), while in (1.5), it is linear in D(E). Our experience is that 
this quadratic factor can be a serious efficiency issue. Consider a simple example: E = + + y + 2v, where 
x,y are L-bit integers (i.e., [xl, [y[ < 2L). Of course, this expression is identically 0 for any x, 
y. The BFMS bound yields a root bit-bound of 7.5L + O(1) bits. But in case, x and y are viewed as rational 
numbers (with denominator 1), the bit- bound becomes 127.5L + O(1). This example shows that introducing 
rational numbers at the leaves of expressions has a major impact on the BFMS bound. This is an important 
and common situation: in practice, it is usual to have floating point numbers as input constants in an 
expression. Since these are special cases of rational numbers, the BFMS bound becomes quite pessimistic. 
Main Results. In this paper, we address two issues raised by the BFMS bound. First, is the quadratic 
factor D(E) 2 in the root bit-bound of E essential for radical expressions? We show that it is not: D(E) 
is sufficient. However, this requires a new approach in which we also need to maintain, among other things, 
upper bounds on the leading as well as tail coefficients of the minimal polyno- mial of the algebraic 
number E. The second issue is whether the BFMS technique can be extended to more general algebraic expressions. 
For instance, suppose we introduce a new kind of leaf into our ex- pressions denoted by Root(P(x)) where 
P(x) is an integer polynomial. The framework of BFMS can- not handle this extension since there is no 
analogue of the E ~ (U(E), L(E)) transformation. But our new approach can handle such extensions. For 
any algebraic number a, we will exploit the following relation: (1.6) o~ ¢ 0 =:=.>,. I~l ~ (~(~)deg(cQ-1lead(~))-l, 
 where = max{l l : is a conjugate of deg(c~) is the degree of the minimal polynomial Irr(c~) of ~ and 
lead(c~) is the leading coefficient of Irr(c~). For radical expressions without divisions, our new bound 
turns out to be exactly same as the BFMS bound; but for those with divisions, our root bit-bound is only 
linear in D(E). To see the effects of this improvement, recall the expression in Fortune's algorithm 
given in (1.1). Suppose the inputs to Fortune's algorithm are L-bit integers. Then it can be shown that 
the bit lengths for a and a ~ are 3L, for b and b ~ are 6L and for d and d ~ are 2L. The BFMS bit-bound 
for this predicate is (79L + 30) bits. Our new bit-bound gives (19L+9) bits. Sellen and Yap [16] have 
shown that 15L -4-- O(1) bits are sufficient, and this is the best possible. Improved degree-measure 
bound. Mignotte and Burnikel et al [2, 11, 12] pre-sented a constructive root bound, called the degree-measure 
bound. As a side product of our new root bound, we obtain improvements to this degree-measure bound. 
This can lead to much improved performance, as seen in our theorem proving application [15]. We will 
also show below that the degree-measure bound is not comparable to our new bound and thus has independent 
interest. Overview of Paper. In Section 2, we review previous work on constructive root bounds. Sec-tion 
3 formalizes the constructive root bound prob- lem. We present our new constructive root bound in Section 
4, and give an improved degree-measure bound in Section 5. A comparative study of vari- ous root bounds 
is given in Section 6. In Section 7, experimental results are reported. We conclude in Section 8. 2 Previous 
Work A number of constructive root bounds have been proposed. Here we briefly recall some of them. Canny's 
bound. For a zero-dimensional sys- tem ~ of n polynomial equations with n unknowns, Canny [4] shows that 
if (cq,... , c~) is a solution, then ]c~i I > (3dc) -"~ for each non-zero component c~i. Here c (resp., 
d) is an upper bound on the abso- lute value of coefficients (resp., the degree) of any polynomial in 
the system. An important proviso in Canny's bound is that the homogenized system has a non-vanishing 
U-resultant. Equivalently, has finitely many roots at infinity. Yap [18, p. 350] gives the treatment 
for the general case, based on the notion of "generalized U-resultant". Such mul- tivariate root bounds 
are easily translated into a bound on expressions, as discussed in [2]. Degree-length and degree-height 
bounds. The degree-length bound [18] is a general bound for algebraic expressions, based on Landau's 
root bound. A similar degree-height bound based on Cauchy's root bound is found in [19]. Here "length" 
and "height" refer to the 2-norm and ca-norm of a polynomial, respectively. These results are based on 
the resultant calculus. Degree-measure bound. Given a poly-nomial P(x) = arnYIim=l(X-ozi), with a m ~£ 
O, the measure of P, re(P), is defined as laml H~=i max{l, lai[}. Furthermore, the measure m(c~) of 
an algebraic number c~ is defined as the measure of Irr(c~). It is known that if c~ ~ 0, we have 1 (2.7) 
m(~-----) <- I'll -< m(~). Based on Mignotte's work, Burnikel et al [2] de- velop recursive rules to 
maintain the upper bounds for degrees and measures and call it the degree-measure bound. These rules 
are given in the last two columns of Table 5 where M'(E) and De(E) are (respectively) upper bounds on 
re(E) and deg(E). Similar rules axe given in [12]. The degree-measure bound turns out to be always better 
than the degree-length bound. BFMS bound. Burnikel et al [2] discovered a new bound for radical expressions 
(see (1.4) and (1.5)). Their bound for division-free expressions (1.5) is proved to be better than any 
of the pre- vious bounds. But in presence of divisions, the BFMS bound is not necessarily an improvement 
of the degree-measure bound (see Section 6). Con-ceptually the BFMS approach first transforms a radical 
expression E to a quotient of two division- free expressions U(E) and L(E). Two parameters u(E) and l(E), 
the upper bounds on the conjugates of U(E) and L(E), respectively, are maintained by the recursively 
rules in Table 1. Scheinerman bound. This adopts an inter-esting approach based on matrix eigenvalues 
[13]. Let A(n, b) denote the set of eigenvalues of n × n matrices with integer entries with absolute 
value at most b. It is easy to see that A(n, b) is a finite set of algebraic integers. Moreover, if a 
E A(n, b) is non-zero then lal _> (nb) 1-n. Scheinerman gives a constructive root bound for division-free 
radical ex- pressions E by maintaining two parameters, n(E) and b(E), satisfying the property that the 
value of E is in A(n(E),b(E)). These recursive rules are given by Table 2. Note that the rule for ~/~ 
is rather special, but it can be extremely useful. In Rule 6, the -- d polynomial P(x) is given by ~=o]ailx 
i when P(x) = ~i=o ai x~. d This rule is not explicitly stated in [13], but can be deduced from an example 
he gave. An example given in [13] is to test whether a = v/2 + V/5 - 2~/6 - x/~ is zero. Scheinerman's 
bound requires calculating a to 39 digits while the BFMS bound says 12 digits are enough. 3 The General 
Framework We formalize the constructive root bound problem as follows. For the purposes of this paper, 
a "DAG" is an ordered, directed acyclic graph with a unique node that has out-degree 0, called the root. 
The DAG is ordered in the sense that the set of incoming edges to each node u is given a total ordering. 
Nodes with in-degree 0 are called leaves. Let ~ be a set of algebraic operations: each w E f~ represents 
a partial function foJ : C k --+ C where C are the complex numbers and k = k(w) is called the arity of 
w. If k(w) = 0 then w may be identified with an element of C and is called a constant. An expression 
over f~ (or A-expression) is a DAG where each node u of in-degree ku is labeled by an operation w E g~ 
where k(w) equals the in- degree of u. In particular the leaves are labeled by constants. In case 1 the 
DAG is a tree, we call it a tree expression. Each node in an expression induces a natural subexpression. 
Let g(12) denote the set of A-expressions. The following classes of expressions are the main ones in 
this paper: * f~0 -=- {~, x) U Z (where Z are the integers). Thus ~0-expressions are polynomials. 1~1 
= f~0 t2 (÷). Thus ill-expressions are rational expressions.  ~2 = ~1 U ( ~/7 : n > 2). Thus 122-expressions 
are radical expressions.  ~-~3 "~ ~'~2 U (Root(P) : P e Z[x]). Our main root bound applies to 123-expressions. 
We assume the polynomial P is presented by its sequence of n ÷ 1 integer coefficients if  deg(P) = n. 
We need to clarify the Root(P) operation in f13 above. This is intended to be a constant referring to 
some root a of P. In practice, we will need some method for identifying the root a. For instance, if 
a is real (as we assume in our applications) and it is the kth largest real root of P, we could identify 
a as "Root(P, k)". Instead of k, we could also use, say, an isolating interval for a. It turns out that 
our root bounds do not depend on the choice of the root of P, and hence, we normally write "Root(P)" 
instead of "Root(P, k)". For any set g of expressions, there is a partial function val : $ ~ C that is 
naturally defined by applying the appropriate functions f~ (w E ft) at each node of an expression. Notice 
that val(E) is undefined if any of its nodes has an undefined value, for instance, val(Root(P, k)) is 
undefined if P(x) has less than k real roots. Having undefined values is not a new phenomenon, since 
this already arises when we divide by zero or take the squaxe-root of a negative number (when values 
are assumed to be real). All our statements about val(E) are Tn some literature, our tree expressions 
are simply called "expressions" while our expressions are essentially "straight-line programs" or "circuits". 
E . integer a 2. E1 :t: E2 3. El x E~ 4. E1 + E2 5.  Table 1: BFMS Rules u(E) lal u(E1)l(E2) + l(E1)u(E2) 
  (E1)u(E2) Z(E) 1 l(E1)l(E2) l(E1)l(E2) l(E1)u(E2) Table 2: Scheinerman's Rules E n(E) b(E) 1. integer 
a 1 lal 2. v~ 2 max{[c[, [d[}  3. E1 ::t:E2 nln2 bl -t- b2 4. E1 ×E~ nln2 bib2 5. t/~ knl bl  6. 
P(E1) nl P(nlbl) also conditioned on val(E) being defined. The constructive root bound problem for a 
class C of expressions is that of providing a bounding .function B : R TM --~ R (JR = reals) and a set 
of "recursive rules" to compute for each E E C a set of real parameters {ai(E) : i = 1,... ,m}, plus 
possibly other non-numeric parameters, such that the following holds: val(E) ¢ 0 ~ [val(E)[ > B(al(E),... 
,am(E)). The rules are "recursive" in the sense that the parameters for each node in the DAG can be effectively 
computed from the parameters of its predecessors. Non-numeric parameters are needed, for instance, in 
the BFMS bound, where for each node u in an expression, we need to compute the set of predecessors of 
u that are radical nodes. In practice, the function B will be non-negative, with both B and the recursive 
rules relatively simple to compute. Another desirable property is that the bound B(al(E),... , am(E)) 
should be as large as possible. Also, we call m the order of constructive root bound. Example: In the 
original degree-measure bound, we compute two parameters, al(E) and a2(E) where al and a2 are upper bounds 
on the degree and measure of E. Moreover, the bounding function B: ~m ~ ~ is given by B(a, b) = 1/b (the 
first parameter is ignored by B). So the order of the degree-measure bound is m = 2. Example: if there 
are 2 constructive root bounds using bounding function Bl(xl,... ,Xm) and B2(yl,... ,y~) then we can 
have a new constructive root bound using the bound-ing function B(xl,... ,Xm, Yl,... ,Yn) = max{Bl(xl,...,Xm),B2(Yl,...,yn)} 
of order m + n. For instance, in the Core Library, we ac- tually choose the maximum of the BFMS bound, 
the improved degree-measure bound, and our new bound. 4 New Constructive Root Bound In this section, 
we develop a constructive root bound for fl3-expressions. In order to obtain a root bound for an expression 
E using the rela- tion (1.6), we need three parameters: deg(E), #(E) and lead(E). The definitions of 
these parameters involve the minimal polynomial of E, which is usu- ally expensive to compute. Instead, 
we give recur- sive rules to maintain upper bounds D(E), ~(E), lc(E) on the corresponding parameters. 
 First we consider D(E), using the same ap-proach as BFMS. Suppose that E has k radical nodes or root-of-polynomial 
nodes {rl, r2,... , rk}. Assume some topological sorting rl ~ r2 ~ .'. rk of these nodes so that if ri 
is a predecessor of rj then i < j. Clearly, the degree of E over Q k is no more than rIi=l di where 
d/ is the degree of ri over the extension field Q(rl,... ,ri-1). Define D(E) = I~L=I ki where ki is either 
the index of ri if k ri is a radical node, or the degree of the polynomial if ri is a polynomial-root 
node. Thus, D(E) is an upper bound on deg(E) since di _< ki for all i. Given a non-zero polynomial P(x), 
we denote its leading coefficient, its tail coefficient and its con- stant coefficient (respectively) 
by lead(P), tall(P), and const(P). Note that the tall(P) is defined to be the last non-zero coefficient 
of P. By definition, lead(P), tail(P) ~ O. Also, let re(P) denote the measure of P. Given an algebraic 
number c~, we define lead(c~), tail(a), etcetra, to be lead(Irr(c~)), tail(Irr(a)), etcetra. Actually, 
tail(a) is the same as const(Irr(a)) (when c~ = 0 this is true by defini- tion). Bound on Leading Coefficients 
and Ta-ble 3. We now consider lc(E), which is an up-per bound on Ilead(E)l. The admission of divi- sions 
makes it necessary to bound tail coefficients as well. Moreover, we also need to bound the mea- sure 
of E to help bound [tail(E)l (this is only used when E has the form E = ELSE2). Let tc(E) and M(E) denote 
upper bounds on [tail(E)l and re(E). Table 3 gives the recursive rules to main- tain lc(E), tc(E) and 
M(E). The upper bound M(E) on the measure of E is shown 2 in the last column. We note that the invariant 
tc(E) < M(E) is implicitly assumed. In other words, if the rule for tc(E) gives a value larger than M(E), 
it is implicit in our rules to replace tc(E) by M(E). Also note that we introduce a special node for 
the power operation E = E1 k. This is not just a shortcut for (k - 1) multiplications; it leads to much 
better bounds too. For example, in computing lc(E) by naively expanding E into kDk-1 (k -1) multiplications, 
we get lc(E) = lc I ~ >> 2This information is copied from column 2 in Table 5, and is discussed in conjunction 
with that table. lcl k. Similar improvements can be shown for tc(E) and re(E). The justification of Table 
3 is omitted in this extended abstract. The basic techniques come from resultant calculus. One subtlety 
arises for expressions of the form E = E1 :h E2. In thfs case, resultant calculus gives us a polynomial 
PE(X) where val(E) vanishes. We can also deduce a bound on const(PE). Unfortunately, this constant coefficient 
may vanish and tell us nothing about tail(E). Hence we need to resort to re(E) as a bound for [tail(E)[. 
Bound on Conjugates and Table 4. Now we consider ~(E), which is an upper bound on the absolute value 
of all the conjugates of val(E). Because of the admission of divisions, we also have to maintain £(E), 
which is a lower bound on the absolute value of all the conjugates of val(E) whenever val(E) ¢ 0. The 
recursive rules to maintain these two bounds are given in Table 4. The most noteworthy entry in Table 
4 is the bound for g_(E) when E = E1 ~E2. In this case, we cannot obtain a lower bound on v(E) based 
on g_(E1) and g_(E2). Instead, we can use either relation (1.6) or (2.7). As we will see in Section 6, 
neither bound is strictly better than the other. Hence, we take the maximum of the two bounds for g.(E1 
± E2). More generally, we could use (2.7) in all the entries of Table 4 if they give better bounds. We 
also note that our bounds on ~(Root(P)) and g_(Root(P)) are based on Cauchy's root bound [18, p. 148]. 
Of course, any of the classical root bounds can be used as convenient. The justification of Table 4 is 
omitted in this abstract. Finally, we obtain the new root bound in the following theorem: THEOREM 4.1. 
Given an ~3-expression E, if E O, then (4.8) [E] > (~(E)(D(E)-i)Ic(E)) -1. 5 Improved Degree-Measure 
Bound Let E be a ~t3-expression. As explained in Sec- tion 2, M'(E) and Dr(E) in Table 5 are the orig- 
inal degree-measure bound [11, 12, 2]. Recall the definition of D(E) which gives an upper bound on Table 
3: Recursive rules for lc(E) (and associated tc(E) and M(E)) E l lc(E) 1. rational Ibl 2. Root(P) Ilead(P) 
l  l~D21~Dx 3. E1 ±E2 u I L~ 2 4. E1 xE2 lclD21c2D' 1.D2+~D1 5. E1 +E2 v,-, 1 v~ 2 6. lCl 7. E~ ice 
 tc(E) lal Itail(P)t MiD2M2D12D(E) tclD2tc2D1 tcf21c2D1 tcl M(E)  max{lal, Ibl} I[PII2 M102M2D12D(E) 
M1D2M2 D'  M? Mg' M1 Mt Table 4: Recursive rules for ~(E) and v(E) E I z(E) 1. rational a  2. Root(P) 
1 + IIP[I (1 + IlPlloo) -1 max{M(E) -1, (~( E)D( E)- l lc( E) ) -1 } 3. E1 ±E2 ~(E1) + ~(E2) 4. E1 
xE2  5. E~ + E2 ~(E1)/z(E2) 6. 7. E1 k (Ex) k deg(E). It is clear that D(E) is never larger than 
De(E). Based on D(E), we now give an improved upper bound (denoted by M(E) in Table 5) on measures. When 
E = Root(P) for some polynomial P, we use lIP[J2 as the upper bound M(E) because ]IPII2 >_ re(P). Besides 
the introduction of the new operations of Root(P) and power (El k) in Table 5, we give a slightly improved 
rule for the measure of E1 ± E2. Basically, we can replace the factor of '-" D' 2 D" 2L'1 2 by Here is 
the justification: LEMMA 5.1. If ce and/3 are algebraic numbers with degrees m, n, respectively, then 
the measure of c~4-fl is bounded by 2dm(a)nm(fl) ~ where d = deg(a ± Proof is omitted for this abstract. 
The improvement can be significant when there is sharing of subexpressions. For example, consider E = 
((~/~ + x/Y) - 2~/x + y + 2x/~x/~) ((v/~ + + 2V/X + y + 2v/xx/~) where x and y are L- v~) bit integers. 
The original degree-measure bound for E is 23584L÷7148. But when all the common subexpressions of E are 
merged, our new bound _u(E1)z(E2) v(E1)/~(E2) _u( E1) k gives 2896L+1408 . 6 Comparison of the Root 
Bounds We compare the various root bounds discussed in this paper. Because these bounds are rather different 
in recursive form, a direct comparison is sometimes not possible. Hence we compare their behavior on 
interesting classes g of expressions. For the ith constructive root bound (i=BFMS, degree- measure, etc) 
and expression E e g, let Bi(E) denote the root bit-bound for E. Let C(L) denote the expressions in g 
whose input parameters are L- bit integers (or rational numbers, as the case may be). We want to study 
functions/3i(L) /3~(L) = max{B~(E) : E e C(L)}. Note that even if/3i(L) <_ /3j (L) for all L, it does 
not necessarily mean that Bi(E) < Bj(E) for all E E C. Sometimes such a stronger relation can be asserted. 
1. By an examination of our tables, we can assert the following: LEMMA 6.1. For any division-free radical 
expres- sion E, our new bound is exactly the same as the Table 5: The original and our improved degree-measure 
bounds E M(E ) (new) M'(E) (old) D'(E) (old) a 1. rational max{[a/, Ib[} max{la], Ibl} 1 2. Root(P) 
HP[[2  2D' ! ! 3. E1 ±E2 MM2DW) DiD2 ! I ! ! 71,¢/D2 ]l/tt D1 4. El×E2 My Mf D1D2 / I llArt D2 llArt 
D1 I t 5. E1 +E2 M1D2M2 D, DiD2 6. M1 kDi  7. E1 k BFMS bound. 2. In [2], it's shown that for division-free 
radical expressions, the BFMS bound is better than the degree-measure bound and Canny's bound. Here we 
strengthen this conclusion in showing that for this class of expressions, the BFMS bound is never worse 
than the Scheinerman bound. LEMMA 6.2. For every division-free constant radi- cal expression E, the BFMS 
bound.for E is at least as tight as the Scheinerman bound. 3. Next consider the sum of square roots of 
rational numbers. Suppose E = ~i~l(±vfdT) where ai are L-bit rational numbers. Then the degree-measure 
root bit-bound is 2n-l(n(L + 2) - 2). The BFMS bound is 22n-l(21og2 n + nL) -log 2 n. Our bound gives 
2 ~-1 (2 log 2 n+(n+l)L)-(log 2 n + L/2). It may be verified that both the degree-measure bound and our 
bound are better than the BFMS bound. The difference between our root bound and degree-measure bound 
in terms of bit-bound is A = 2n(log2 n + (L/2) -n + 1) - (log2 n + L/2). Note that A can be positive 
or negative, depending on the relative sizes of n and L. Thus our new bound is incomparable with the 
degree-measure bound. 4. Consider the expression E = a+b2-r -d e~ c 3 with 2r (r > 1) square roots. 
This is a general- ization of the Fortune predicate in Equation (1.1). Also, we now assume that a, b, 
c, d, e and f are all L-bit integers. The BFMS root bit-bound is (bL + 1) 2 4r - (L + 2). The degree-measure 
root bit-bound is (2L+3).2 2r +L.2 r+l. Our new bound gives (2L + 3) 2 2r - 3 which is the best. 5. 
Consider the continued fraction expression: 1 En =an+ 1 =[an, an-l,an-2,...], an-1 q- an- 2"~-"" where 
the a~'s are L-bit integers. Our new bound for E~ is ( n - 1)L + (n - 2). The degree-measure bound gives 
(n + 1)L -1. And the best bound for this example is given by the BFMS approach as (n - 1)L - n + 3. This 
is close to the best possible bound ( n -2)L -n. Note that the degree of En is 1. Now we modify En to 
get an expression E~ with degree up to 2 ~ by replacing the integers ai with square roots VrdT, Then 
our new bound for L~ is 22~-1((n -1)L + 2n -3). The BFMS bound gives c. 22nnL, for some constant c > 
1. Here the degree-measure approach gives the best bound 2n-linL + 2n- 2) 6. Next, we compare our new 
bound with the BFMS bound for a restricted class of radical expressions. PROPOSITION 6.3. Given a radical 
expression E with rational values as the leaves but no division operations in the internal nodes, we 
have (6.9) ~(E)l(E) = u(E) where ~(E) is as defined in our new bound, and u(E),l(E) are defined as in 
the BFMS bound. Furthermore, if there are no shared radical nodes in E, then i6.10) lc(E) _< l(E) D(E). 
It can be shown that our bound is strictly better than BFMS in this class whenever u(E) > 1 and D(E) 
> 1. If shared radical nodes are permitted, our bound can be proved to be better than the BFMS bound 
if (D'-D)log21(E ) < D(D -1) log 2 u(E), where D'(E) is a degree bound k ci of E with the value [Ii=l 
ki , ci >_ 1 is the number of different paths from the root to the radical node ri.  7 Experimental 
Results The new constructive root bound has been imple- mented in our Core Library [7]. In implementation, 
we maintain an upper bound on the root bit-bound, instead of the root bounds themselves. The loga- rithms 
are represented and manipulated as objects of the class extLong, which is basically a wrapper around 
the standard long number type, together with facilities to handle overflows. Such a class may be used 
to support "level arithmetic" in which for any integer x, we maintain the ceiling of lg (i) x where lg(O 
denotes i iterations of log2(-), i is the smallest natural number such that "[lg (i) x] fits in / / 
built-in integer types. Therefore, the integer x is represented by a pair ([lg (i) x],i). Our experiments, 
based on Version 1.3 of the Core library, will compare the performance of our new bound with the BFMS 
and degree-measure bounds. All the tests are performed on a Sun UltraSPARC with a 440 MHz CPU and 512MB 
main memory..All timings are in seconds. 1. Recall the critical test in Fortune's sweepline algorithm 
is to determine the sign of the expres- sion E = ~ -~ in Equation (1.1) where a's, b's and d's are 3L-, 
6L- and 2L-bit integers, re- spectively. The BFMS bound requires (79L + 30) bits and the degree-measure 
(D-M) bound needs (64L + 12) bits. Our root bit-bound improves the bound to (19L+9) bits. We generate 
some random inputs with different L values which always make E = 0, and put the timings of the tests 
in Table 6. We also converted the Fortune's implementation of Table 6: Timings for Fortune's expression 
in (1.1) COROLLARY 6.4. Given a radical expression E with rational values at the leaves, if E has no 
divi- sions and shared radical nodes, our new root bound for E is never worse than the BFMS bound. L 
10 20 50 100 200 NEW 0.01 0.03 0.12 0.69 3.90 BFMS 0.03 0.24 1.63 i 11.69 79.43 D-M 0.03 10.22 1.62 10.99184.54 
 this algorithm to use Core library. We ran the pro- gram on two kinds of inputs: (1) First we test on 
a non-degenerate data set (100 random points pro- vided in Fortune's code distribution). The time for 
our new bound is 3.62 seconds while the BFMS and D-M bounds take 3.75 and 3.64 seconds, respec- tively. 
This is not unexpected, since as explained in the introduction, our Core library exploits the progressive 
evaluation technique, and the signs of Fortune's predicate on non-degenerate inputs can be determined 
using the inequality (1.2). Thus the inequality (1.3) based on root bounds has no effect on the complexity. 
(2) We used highly degenerate inputs comprising points on a (32 x 32) uniform grid with coordinates being 
L bits long. The tim- ings are reported in Table 7. Table 7: Timings for Fortune's algorithm on de-generate 
inputs L 10 20 30 50 NEW 35.2 41.7 47.5 112.3 BFMS 86.1 1014.1 1218.1 5892.2 D-M 418.5 1681.6 1874.4 
> 2 hrs 2. The second test is to verify an expression which is identically zero. Let x = ~a and y = 
(a,b,c,d are L-bit integers), and E = (x/~ + v/if) - x/x + y + 2x/~. Our new bound requires computing 
(40L+38) bits, while the BFMS and the degree-measure (D-M) bounds require (640L+510) and (80L + 56) bits, 
respectively. The timings are in Table 8. Table 8: Timings for Example 2 L 5 10 30 50 NEW 0.08 0.09 
1.77 55.43 BFMS 88.16 91.03 3071.21 i > 2 hrs D-M 1.71 1.79 89.72 531.25 In comparing the timings, it 
is the relative speedup that should be stressed. We expect similar relative improvements to show up if 
the compar-isons were made in other systems such as I_EDA. Conclusion We have described a new constructive 
root bound for a large class of algebraic expressions. The main achievement is that our root bit-bound 
is only linear in the algebraic degree (or some upper bound thereof) of the expression. We implemented 
the new bound in our Core library and experiments show that it can achieve remarkable speedup over previous 
bounds in the presence of division. Although we have described our bounds for the class of ~3-expressions, 
it should be clear that our methods extend to more general expressions. A comparative performance study 
of the BFMS bound, the degree-measure bound and our new bound shows that these axe generally incomparable. 
So in practice, it may be worthwhile maintaining all of them simultaneously to choose the best. A challenge 
for future work is to find better ways of bounding tc(E) for addition and subtrac- tion nodes. The current 
bound on tail coefficients based on the polynomial measure seems to be too conservative for expressions 
with complex structure and large depth. Also, it may be possible to im-prove our current bound on ~_(E1 
 E2). References <RefA>[1] C. Burnikel, R. Fleischer, K. Mehlhorn, and S. Schirra. Exact geometric computation 
made easy. In Proc. 15th ACM Syrup. Comp. Geom., 1999. [2] C. Burnikel, R. Fleischer, K. Mehlhorn, and 
S. Schirra. A strong and easily computable sep- aration bound for arithmetic expressions involving radicals. 
Algorithmica, 27:87-99, 2000. [3] C. Burnikel, J. KSnnemann, K. Mehlhorn, S. N/iher, S. Schir~a, and 
C. Uhrig. Exact geo- metric computation in LEDA. In Proc. 11th ACM Syrup. Computational Geom., 1995. 
 [4] J. F. Canny. The complexity of robot motion planning. ACM Doctoral Dissertion Award Series. The 
MIT Press, 1988. PhD thesis, M.I.T. [5] S. J. Fortune. A sweepline algorithm for Voronoi diagrams. Algorithmica, 
2:153-174, 1987. [6] The CGAL Homepage. Computational Geom- etry Algorithms Library (CGAL) Project. URL 
http : //wT, n;. ca. uu. nl/CGAL/. [7] The CORE Project Homepage. URL http://w~w, cs. nyu. edu/exact/. 
[8] The LEDA Homepage. URL http://ww~, mpi-sb, mpg. de/LEDA/. [9] V. Karamcheti, C. Li, I. Pechtchanski, 
and C. Yap. A Core Library for robust numeric and geometric computation. In Proc. 15th ACM Syrup. on 
Com- putational Geometry, pages 351-359, June 1999. [10] M. Marden. The geometry of the zeroes of a poly- 
nomial in a complex variable. American Mathe- matical Society, 1949. [11] M. Mignotte. Identification 
of algebraic numbers. Journal of Algorithms, 3(3), 1982. [12] M. Mignotte and D. ~tef~nescu. Polynomials: 
An Algorithmic Approach. Springer, 1999. [13] E. R. Scheinerman. When close enough is close enough. American 
Mathematical Monthly, 107:489-499, 2000. [14] S. Schirra. Robustness and precision issues in geometric 
computation. Research Report MPI- 1-98-1-004, Max-Planck-Institut fiir Informatik, Saarbriicken, Germany, 
January 1996. [15] D. Tulone, C. Yap, and C. Li. Randomized zero testing of radical expressions and elementary 
geometry theorem proving. In Proceedings of the Third International Workshop on Automated Deduction in 
Geometry (ADG 2000), Sept. 2000. [16] C. Yap. Lecture notes in robust ge-ometric computation, 2000. URL 
http://www, cs. nyu. edu/~yap/classes/exact/. [17] C. K. Yap. Robust geometric computation. In J. E. 
Goodman and J. O'Rourke, editors, Hand-book of Discrete and Computational Geometry, chapter 35, pages 
653-668. CRC Press LLC, 1997. [18] C. K. Yap. Fundamental Problems in Algorithmic Algebra. Oxford Univ. 
Press, Dec. 1999. [19] C. K. Yap and T. Dub@. The exact computation paradigm. In D.-Z. Du and F. K. Hwang, 
editors, Computing in Euclidean Geometry, pages 452-486. World Scientific Press, 1995. 2nd edition. </RefA>
 
			
