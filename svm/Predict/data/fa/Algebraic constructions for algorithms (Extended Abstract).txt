
 Algebraic Constructions for Algorithms by S. Winograd* IBM Watson Research Center P. O. Box 218 Yorktown 
Heights, NY 10598  (Extended Abstract) In the last decade or so there has been an out- growth of research 
in algebraic complexity of com- putations which showed how to derive algorithms systematically. One of 
the features of these deriva- tion is their reliance on algebraic and symbolic con- structions. I would 
like, in this paper, to survey some of the symbolic and algebraic constructions which are used, and then 
draw some conclusions on the implications of this development for symbol manipulation systems. Let me 
start by sketching some of these derivations. 1. Polynomial Multiplication (Chinese Remainder Theorem): 
 We want to compute the coefficients to, tl, t 2 of the polynomial (1.1) T(u) = t O + tlU4- t2 u2 -- 
(x O+ XlU)(y 0 + yl u) =R(u) S(u). It is easy to verify that (1.2) T(u) =T(u) mod (o 2 +U) + XlYl(U 
2 -I-u) =TI(u) + XlYl(U 2 +U). Permission to copy without fee all or part of this material is granted 
provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright 
notice and the title of the publication and its date appear, and notice is given that copying is by permission 
of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or 
specific permission. ~21981 ACM O-89791-047-8/81-0800-0142 500.75 By the Chinese Remainder Theorem, 
we can write T'(u) as: (1.3) T'(u) = Tl(U ) (1 + u) + T2(u ) (u), where (1.4) Tl(U)=T(u) rood u --(R(u) 
mod u)(S(u) mod u)rood u = XoY 0 (1.5) T2(u) = T(u) mod (u + 1) -- (R(u) mod (u+ 1))(S(u) mod (u+ 1)) 
mod u+ 1 -- (x0-xl)(yo-Yl) Putting it all together we obtain: T(u) = xoY0(1 + u) + (Xo-Xl) (yl-Yo)U 
+ XlYl(U 2 + u). Identifying coefficients of powers of u we get the following algorithm, which uses only 
three multipli- cations: (1.6) t o = x0Y 0 = x0Y 0 t l = x0Yl + Xy0 = (x0-xl)(yl-Y0) + x0Y 0 + xlY 1 
t 2=xly 1 =xlY 1. *This research was partially supported by NSF Grant No. ECS-7921291.  Proceedings 
of the 1981 ACM Symposium on Symbolic and Algebraic Computation 3. FIR Filters (Tensor Product Construction): 
This procedure for deriving the algorithm can clearly be generalized. However, the details of the derivation 
become more cumbersome as the de-grees of the polynomial increase. 2. FIR Filters (Transportation): We 
will start with the algorithm (1.6), and use it to derive a new algorithm, which we will call the transpose, 
or dual, or (1.6) [1]. Let us multiply the first identity of (1.6) by z0, the second by Zl, and the third 
by z 2. Hav-ing done that let us sum the three identities and obtain: z0x0Y 0 + Zl(X0Y I + xlY 0) + Z2XlY 
1 (2.1) = (z 0 + Zl)X0Y 0 + zi(X0--Xl)(yl--y 0) + (z 1 + z2)xlY 1 If we now equate coefficients of the 
xi's we get a new set of identities: (2.2) z0Y0 +zlyt = (z° +zz)y° +zl(yl-y°) zlY 0+z2y 1 = (z I +z2)Yl-Zl(Yl-Yo). 
The new problem, that of computing z0y 0 + ZlYl, and zly 0 + z2y 1 is the transpose of the original problem, 
and the new algorithm is the transpose of the original algorithm. An n-tap FIR filter is the computation 
of n-1 (2.3) wj = ~ xi+ j h(n_l_i ) j = 0,1,2 .... i=O So a transpose of the computation of t0,t 1, and 
t2, is computing two outputs of a 2-tap Fir filter. In general, the problem of computing m outputs of 
an n-tap FIR filter is a transpose of then~r~blem Onf_~omputing the coefficients of T(u) = ( ~ xi u~) 
( ~ yjuJ). i=0 j=0 We will now consider larger filtering problems than that of 2 outputs of a 2-tap 
FIR filter. Let us take the problem of 8 outputs of an 8-tap FIR fil- ter. One way is to derive the algorithm 
using the procedure outlined in the previous section. Anoth-er method of derivation, known as the tensor 
prod- uct construction, is an outgrowth of the construc-tion of Strassen [2] for matrix multiplication. 
Eight outputs of an 8-tap FIR filter is the com- putation of 7 (3.1) wj = ~ xi+ jhT_j, j=0,1 ..... 7 
i=0 which we can write using matrical notation as w = X h, where X is a Henkel matrix. Let us par- tition 
X into 4x4 blocks, so (3.1) is now written as: ,3,, (::)o (xX: Using the identities (2.2) we have (3.3) 
w 0 = X0_h I + Xl_h 0 = (X o + Xl)h z + Xl(hO-h 1) _w t = Xlh t + X2h_ o = (X 1 + X2)ho-Xl(ho-ht). The 
crucial observation is that (X 0 + Xl)hl, (X 1 + X2)h_ 0, and Xz(h0-hl) are again the prod- uct of a 
Henkel matrix by a vector, i.e., are FIR-filter type calculation. We can, again, partition these matrices, 
or use any other algorithm for these calculations, to obtain the final algorithm. The one fly in the 
ointment, when we carry out this proce- dure by hand, is that the amount of symbolic com- putation which 
has to be performed grows rapidly. 4. Fourier Transform (Generator ~ a Group.): We will not describe 
the construction of the algorithm for computing the Fourier Transform here -it takes too much space for 
an extended ab- stract -but we will describe one aspect of the de- rivation of the algorithm which uses 
algebraic ma- nipulation. The reader who is interested in more details is referred to [3]. The construction 
of the algorithms for Fourier Transform uses all the algebraic and symbol manip- ulation described above. 
But before they can be applied the inputs and outputs have to be reord- ered. Let me describe the reordering 
for comput- ing the Fourier Transform of a prime number of points, specifically of 5 points. Because 
5 is a prime number, the set of non-zero integers, with operation multiplication modulo 5, form a group. 
This group is isomorphic to z 4, the group of addition modulo 4. One such isomor- phism is: (4.1) 1 -,.0, 
2-. 1, 3-.3, 4-,.2 where the integers on left are in M 5, and those on the right in z 4. This isomorphism 
is completely specified once we find that 2 is a generator of M 5. In the derivation of the algorithm 
we have to order the inputs ao, a l,a 2, a 3, a 4, and the outputs AO, A1, A2, A3, A 4 in a way which 
reflects this isomorphism. That is a0, al, a2, a 4, a 3, and A 0, A 1, A 2, A 4, A 3. Similar kind of 
considerations occur in the de- rivation of multi-dimensional Fourier Transform on p x p x ... x p points, 
where p is a prime number [4]. There it is needed to find a generator of GF(p k) in order to specify 
the reordering which is needed to derive the algorithm. 5. Multidimensional FT (Field isomorph!sm): In 
a yet unpublished result, E. Feig shows a new method for deriving an efficient algorithm for two-dimensional 
Fourier Transform on 2nx2 n points. Again, we will not describe the algorithm here. What is important 
for our purposes is the derivation of some reordering which is a part of the new algorithm. Let P(u) 
be an irreducible polynomial over the rationals, and let rl, r 2 ..... r n be the roots of P(u) (in the 
field of complex numbers). Let Q(u) be another polynomial over the rationals, not neces-sarily irreducible, 
with roots s 1, s2,..., Srn. We fur- ther assume that all the si's are distinct, and that all of them 
lie in the field F 1 = ~(rl) of the rationals extended by r 1. We define the n isomorphic fields F i 
= ~(ri), i= 1,2,..., n, and let us consider the field isomorphisms oi: F 1 -~ F i given by ai(r q) = 
ri, i=1,2 ..... n. Each o i permutes the m quantities Sl, s2,..., sm. These n permutations are an essen- 
tial part of Feig's algorithm. To be more specific, Feig's algorithm uses P(u) = u n + 1, Q(u) =u n-1 
or Q(u) = u n + 1, where n = 2/. In this case the permutations ~r b are given by a -,. a' where (5.1) 
a' = (2b + 1) a mod n, b--O,1 ..... n-l, and (5.2) 2a'+l=(2b+l)(2a+l) mod 2n, b=O,1 .... ,n-1. In either 
case, the determination of the permutation calls for symbol manipulation capabilities. 6. Conclusions: 
The five algorithms described above are numer- ical algorithms -they take numbers as inputs and produce 
numbers as outputs. What should make them interesting to symbol manipulation communi- ty is that the 
derivation of the algorithm uses sym- bol manipulation and algebraic construction. Pres-ent symbol manipulation 
systems have the potential 144 Algebraic Constructions for Algorithms of aiding the algorithm designer, 
but more develop- ment work is needed for them to realize this poten- tial. J. Cooley, of IBM Research, 
successfully used SCRATCHPAD to help him in the design of algor- ithms of the type described in sections 
1 and 2. To be able to fully automate the derivation of this kind of algorithm the symbol manipulation 
system needs to have the capabilities to perform the necessary symbolic and algebraic manipulation. It 
also needs the capability of taking the resulting identities and automatically transform them into a 
program in FORTRAN or other language. The reader may not agree with this conclusion, but I hope that 
this paper has enough evidence to con-vince the reader not to reject the conclusion with- out further 
thought. REFERENCES <RefA>(1) <SinRef><author>J.E. Hopcroft </author>and <author>J. Musinski</author>, <title>Quality applied to matrix multiplication</title>,<journal> SIAM 
J. on Comp</journal>. <volume>Vol. 2, No. 3, </volume><date>1973</date>, pp. <pages>159-173</pages>. </SinRef>(2) <SinRef><author>V. Strassen</author>, <title>Gaussian elimination is not opti-mal</title>, 
<journal>Num. Math</journal>., Vol. <volume>13</volume>, <date>1969</date>, pp. <pages>354-356</pages></SinRef>. (3) <SinRef><author>S. Winograd</author>, <title>Arithmetic Complexity of Com-putations</title>, <journal>CBMS-NSF 
Regional Conference Series</journal>, No. <volume>33</volume>, <date>1980</date>, <publisher>SIAM</publisher></SinRef>. (4) <SinRef><author>L. Auslander</author>, <author>E. Feig</author>, and <author>S. Winograd</author>, <title>New Algorithms 
for the multi-dimensional discrete Fourier transform</title>, submitted to <booktitle>IEEE Tran. on Ace. Sp. and Sign. Proc. 
</booktitle> <date>145 </date>Algebraic Constructions for Algorithms</SinRef></RefA> 
			
