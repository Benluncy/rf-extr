
 A Fast Las Vegas Algorithm for Triangulating a Simple Polygon Kenneth L. Clarkson AT&#38;T Bell Laboratories 
Murray Hill, New Jersey 07974 Robert E. Tarjan* Department of Computer Science Princeton University 
Princeton, New Jersey 08544 and AT&#38;T Bell Laboratories Murray Hill, New Jersey 07974 Christopher 
J. Van Wyk AT&#38;T Bell Laboratories Murray Hill, New Jersey 07974 ABSTRACT We present an algorithm 
that triangulates a simple polygon on n vertices in O(n log* n) expected time. The algorithm uses random 
sampling on the input, and its running time does not depend on any assumptions about a probability distribution 
from which the polygon is drawn. 1. Introduction Preparata, and Tarjan gave an algorithm to tri- angulate 
an n-gon in O(nlogn) time [GJPT], To triangulate a simple polygon on n ver- Tarjan and Van Wyk devised 
a much more com- tices, we add to it n-3 line segments (diagonals) plicated algorithm that runs in O(nloglogn) 
that partition its interior into triangles. The time [TV]. complexity of triangulating a simple polygon 
is one of the outstanding open problems in compu- In this paper we present an algorithm that tational 
geometry. triangulates a simple polygon in O(nlog ° n) expected time. Our algorithm uses the following 
Previous work on the triangulation problem key ideas: has concentrated on finding fast deterministic 
algorithms to solve it. Garey, Johnson, divide and conquer;  the "'random sampling" paradigm [C87], 
[C88], [ES], [HW];  the vertical visibility decomposition of the plane into generalized trapezoids, 
which is  Permission to copy without fee all or part of this material is granted provided that the copies 
are not made or distributed determined by a set of line segments: each for direct commercial advantage, 
the ACM copyright notice line segment defines vertical boundaries of and the title of the publication 
and its date appear, and notice trapezoids that join whatever each of its is given that copying is by 
permission of the Association for Computing Machinery. To copy otherwise, or to republish, two endpoints 
can see directly above and requires a fee and/or specific permission. below itself [CI], [FM]; &#38;#169; 
1988 ACM 0-89791-270-5 / 88 / 0006 / 0018 $1.50 Jordan sorting [HMRT]: given the 18 -2- intersections 
of two simple curves A and B in the order in which they occur along A, find the order in which they occur 
along B. 2. Outline of the Algorithm The following is the general recursive step of our algorithm: The 
input is a sequence S of line segments that compose a simple polygon Ps. 1. Let S" be the subset of non-vertical 
line segments in S; let s" be the size of S'. Choose a random sample R c S" of size r (where r is a function 
of s', to be deter- mined below). 2. Compute the vertical visibility decomposi- tion V(R) of the plane 
defined by R. If any region in V(R) shares a vertical edge with more than two other regions, apply a 
ran- dom rotation to the original set of vertices and restart the algorithm. 3. Trace the boundary of 
Ps, recording each intersection of Ps with an edge in V(R). Let I be the number of intersections of Ps 
with an edge in V(R). If, during this traversal, I is about to exceed Ctot~, or some region in V(R) is 
found to intersect more than c~x segments, immediately restart the recursive step at Step 1. (Both Ctot~ 
and Craax depend on r and s'; we determine their exact values below.) 4. For each region in V(R), Jordan 
sort the intersection points found in Step 3 around its boundary. 5. Decompose each region in V(R) into 
a set of simple polygons (Section 4 describes how to do this using the family trees pro- duced by Jordan 
sorting in Step 4); the algorithm recurs on all polygons that con- tain at least one vertex of Ps that 
does not lie on a vertical visibility edge.  3. Vertical Visibility Decomposition To construct the vertical 
visibility decom- position V(S) of the plane given a set S of line segments, we extend a ray vertically 
from each endpoint of each line segment until we hit another line segment in S or we reach infinity. 
Thus, each vertical segment in V(S) contains an endpoint of a segment in S. This process pro- duces four 
kinds of regions: (a) those bounded by two portions of line seg- ments in S and two vertical line segments; 
(b) those bounded by one portion of a line seg- ment in S and two vertical rays; (c) those bounded by 
two vertical lines; (d) those bounded by one vertical line.  Figure 1 shows a vertical visibility decomposi- 
tion whose regions have been labeled with their types according to the above fist. Regions of type (a) 
are trapezoids (or triangles), so V(S) is often called a trapezoidal decomposition of the plane. Our 
interest in the vertical visibility decom- position stems from the observation that comput- ing the vertical 
visibility of the edges of a sim- ple polygon is linear-time equivalent to triangu- . lating the polygon 
[CI], [FM]. After all recur- sive steps of our algorithm have finished, we have computed a vertical visibility 
decomposi- tion of the edges, so by this observation we have solved the original triangulation problem. 
In Step 2 of the algorithm we require that no region share either of its vertical edges with more than 
two other regions. This certainly happens if no two vertices have the same x-coordinate; when necessary, 
the random rotation in Step 2 achieves this with probability 1. Once this condition holds, each region 
in the vertical visibility decomposition has at most four neigh- bors, which makes it possible to move 
from region to neighboring region in O (1) time. 4. Jordan Sorting and Polygon Reconstruc- tion In Step 
4 we need to sort the points at which Ps intersects each region QE V(R) accord- ing to their ordering 
around the boundary of Q. (Figure 2 shows how Ps might meander around R.) Step 3 produces those points 
in order along Ps. The original Jordan sorting algorithm [I-IMRT] can be used to sort those points along 
the boundary of Q in time proportional to the number of points. During its operation, the Jordan sorting 
algorithm produces two family trees for each region. The outer tree depicts the way pieces of Ps nest 
outside the boundary of Q, and the inner tree depicts the way they nest inside the boun- dary of Q. (Figure 
3 shows the inner family trees for two regions in Figure 2.) Each node in the inner tree, together with 
any children it may have, defines a subpolygon of Q. To perform Step 5, we merely traverse the inner 
tree of each region QeV(R), constructing the subpolygons of 19 -3- Q and passing non-trivial ones to 
recursive instances of the algorithm. 5. Expected Running Time In this section we derive a bound on the 
expected running time of the algorithm on a polygon P with n sides. The proof relies on probabilistic 
bounds provided by the following theorem: Theorem. Suppose S is a set of line segments of size s, and 
R is a random subset of S of size r; let V(R) be the vertical visibility decomposition that R defines 
on the plane. There exist con-stants ktot~ and km~ such that with probability at least 1/2, the following 
conditions hold: (1) The sum, over all regions Q~V(R), of the number of line segments of S that intersect 
Q is bounded by ktou~s. (2) For all Q~V(R), the number of line seg- ments of S that intersect Q is bounded 
by kmax (s / r) log r.  Proof. This theorem is a consequence of gen- eral theorems about random sampling 
in compu- tational geometry. We begin with condition (1), appealing to Theorem 3.2 of [C88] to conclude 
that the expected value of the sum, over all regions Q~V(R), of the number of line seg-ments of S that 
intersect Q is bounded by (kuua/4)s. Since the random variable takes on non-negative values, we can use 
Markov's ine- quality [R] to conclude that condition (1) holds with probability at least 3/4. Corollary 
4.2 in [C87] and Markov's ine- quality can be used in a similar way to prove that condition (2) holds 
with probability at least 3/4. Since each condition holds with probability at least 3/4, the probability 
that both conditions hold is at least 1/2, as required. [] In the algorithm, we take ctot~ = ktot~xs" 
and Cm,x = kma,,(s"/r)log r. The theorem implies that with probability at least 1/2, Step 3 will "succeed," 
and not restart the recursive step with another random sample; in other words, the expected number of 
times we need to restart a step is O(1). If we take r =s'/logs', then Condition (2) further implies that 
the max- imum depth of recursion is O (log* n). Next we compute the work done during the recursive steps 
of the algorithm. A vertex sends out visibility segments above and below during exactly one recursive 
step of the algorithm, when it is an endpoint of an edge chosen in Step 1; this is the only time that 
a vertex can cause the boundary of P to be cut into pieces. Condi-tion (1) implies that the total number 
of pieces into which the boundary of P can be cut in this way is ktoudn. Since the boundary can contain 
at most one vertical segment for each non-vertical segment, the number of different vertical segments 
considered in the algorithm is also at most ktot~ln. Therefore, at a single level of recursion, at most 
2ktot~n pieces of the boundary are considered by the algorithm. Since each piece can serve as the boundary 
of at most two regions, and the subpolygons processed at a sin- gle level of recursion are area-disjoint, 
they con- tain at most 4k~an pieces. At each level of the recursion, Step 2 can be performed in O(rlogr)=O(n) 
time [PS], and Steps 3, 4, and 5 can be performed in O (I) time, which is O (n) by the preceding observa- 
tions. It follows that a single level of recursion can be performed in O (n) time. Since there are O(log 
° n) levels of recursion, the total running time is O(n log* n). 6. Open Problems The foremost remaining 
open problem is to produce a triangulation algorithm that runs in o(nloglogn) time or in o(nlog*n) expected 
time. With the exception of Jordan sorting, the steps in our algorithm are simple enough that one might 
reasonably contemplate implementing them. It would be interesting to produce a simi- larly fast algorithm 
that does not require Jordan sorting as a component. References<RefA> [1287] <SinRef><author>K.L. Clarkson</author>, "<title>New applications 
of random sampling in computational geometry</title>," <journal>Discrete and Computa-tional Geometry, </journal><volume>2</volume> (<date>1987</date>), <pages>195-222</pages>. </SinRef>
[C88] <SinRef><author>K.L. Clarkson</author>, "<title>Applications of ran- dom sampling in computational geometry</title>, <volume>II</volume>," this Proceedings. </SinRef>
[CI] <SinRef><author>B. Chazelle </author>and <author>J. Incerpi</author>, "<title>Triangula- tion and shape complexity</title>," <journal>ACM Transactions on Graphics</journal>, 
<volume>3</volume> (<date>1984</date>), <pages>135-152</pages></SinRef>. [ES] <SinRef><author>P. Erdos </author>and <author>J. Spencer</author>, <title>Probabilistic Methods in Combinatorics</title>, <publisher>Academic Press</publisher>, 
<location>New York</location>, <date>1974</date>. <pages>20</pages></SinRef> [FM] [GJPT] [IAW] [HMRT] [PSI IR] [TV] <SinRef><author>A. Fournier </author>and<author> D. Y. Montuno</author>, "<title>Tri- angulating 
simple polygons and equivalent problems</title>," <journal>ACM Transac- tions on Graphics</journal>, <volume>3 </volume>(<date>1984</date>), <pages>153-174</pages></SinRef>. <SinRef><author>M. R. Garey</author>, 
<author>D. S. Johnson</author>, <author>F. P. Preparata </author>and <author>R. E. Tarjan</author>, "<title>Triangu- lating a simple polygon</title>," <journal>Information Processing 
Letters</journal>, <volume>7 </volume>(<date>1978</date>), <pages>175-180</pages></SinRef>. <SinRef><author>D. Haussler </author>and <author>E. Welzl</author>, "<title>e-nets and simplex range queries</title>," <journal>Discrete and 
Computational Geometry</journal>, <volume>2</volume> (<date>1987</date>), <pages>127-151</pages></SinRef>. <SinRef><author>K. Hoffman</author>, <author>K. Mehlhom</author>, <author>P. Rosen- stiehl</author>, and <author>R. Tarjan</author>, "<title>Sorting 
Jordan sequences in linear time using level- linked search trees</title>," <journal>Information and Control</journal>, <volume>68</volume> (<date>1986</date>), 
<pages>170-184</pages>.</SinRef> <SinRef><author>F. P. Preparata </author>and<author> M. I. Shamos</author>, <title>Computational Geometry: An Intro-duction</title>, <publisher>Springer-Verlag</publisher>, 
<location>New York</location>, <date>1985</date></SinRef>. <SinRef><author>M. M. Rao</author>, <title>Probability Theory with Applications</title>, <publisher>Academic Press</publisher>, <location>Orlando, Florida</location>, <date>1984</date></SinRef>. 
<SinRef><author>R. E. Tarjan </author>and <author>C. J. Van Wyk</author>, "<title>An O (n log log n)-time algorithm for tri-angulating a simple polygon</title>," 
<journal>SlAM Journal on Computing</journal>, <volume>17</volume> (<date>1988</date>), <pages>143-178</pages></SinRef></RefA>. I I I I (b) I I i I (b) i I I (ol I I(a) I ---'-'I (b) 
I I (a) I I (d) I (d) (b) (b) (b) (b) Figure 1. Five line segments and their vertical visibility decomposition. 
I ~ I I 61 I I ~1 I I _ I  f 114""-.--8T"'-.. ! I 31K"- i °~l I I I I I I I Figure 2. A simple curve 
through the line segments of Figure 1. The endpoints of the origi- nal segments are (1,37), (6,9), (13,16), 
(19,22), and (30,31). In a polygon the curves would be polygonal chains. 3:3 32 18 28 29 3 q¢~/~ 8 19~ 
23 22 Figure 3. Representative family trees for the curve shown in Figure 2. The tree on the left is 
the inner family tree for the region whose corners are 7, 8, 15, and 14. The tree on the right is the 
inner family tree for the region of type (c) in Figure 1. 22 
			
