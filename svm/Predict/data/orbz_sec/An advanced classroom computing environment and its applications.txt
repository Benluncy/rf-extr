
 An Advanced Classroom Computing Environment and its Applications Chi Fai Ho, Christopher L. Morgan, 
Istvan Simon California State University, Hayward Department of Mathematics and Computer Science Hayward, 
CA. 94542 3092 Abstract: During the winter qnarter of 1992 two high­resohstion color workstations and 
projecting equipment were in­stalled in a classroom in the School of Science. We describe this classroom 
computing environment, our experience using it in Computer Science instruction, and some novel instructional 
soft­ware used in the facility. 1. Introduction By bringing students into direct contact with modem, 
high­quality visually-oriented computing environments, the Advanced Classroom Computing Facility has 
created a new and powerful way to deliver instruction on our campus. An instructor can select a signal 
from several video sources by pushing a single button, and display the corresponding image on a large 
screen at the front of the room. The two primary video sources are a Sun SPARCstation 2GX and an Apple 
Macintosh IIci which are located in the classroom. These machines are connected to the departmental ethernet 
which also connects to the student computing labs, faculty of­fices, university minicomputers, and the 
INTERNET. Instructors can prepare instructional material in the office or at home and have the results 
immediately available in the classroom via this network. The network also gives the classroom access 
to most other computer resources on campus, (e.g., student projects stored on another computer, or the 
library catalog, etc.), as well as to the dizzying array of services and information available on the 
INTERNET. In its tirst quarter of operation, the facility was used for seven Computer Science classes: 
Compiler Design, Computer Architecture, Data Structures, VLSI Design, Computer Graphics, Operating Systems, 
and Systems Programming. This paper de­scribes both the installation and its instructional applications 
in these classes. Sections 2 and 3 describe the equipment and installation in detail. Section 4 gives 
an overview of the pedagogical applica­tions. Section 5 describes some of the innovative software used 
in the facility. Permission to copy without fee all or part of this material is granted provided that 
the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and 
the title of the publication and its date appear, and notice is given that copying is by permission of 
the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific 
permission. ACM-24thCSE-2/93 -lN, USA @ 1993 ACM 0-89791 -566 -6/93 /0002 /0228 . ..$1 .50  2. The Equipment 
The hardware installed in the facility consists ofi 1. A Sun Microsystems SPARCstation 2GX workstation 
with 32 MB internal memory, a 19 Sony Trinitron color monitor, a 414 MB internal SCSI dislq a 3.5 floppy 
drive, and an external 644 MB CD drive; 2. A Macintosh IIci color workstation with 8 MB memory, a 14 
color monitor, and an 80 MB internal SCSI dislG 3. Equipment interfacing the two computers to a switchbcsx; 
 4. A Barco RCVDS 800 switchbox with 2 video and 3 RGB analog modules which serves as a source selecto~ 
 5. A Barcographics 800 high-resolution color projector mounted on the ceiling; 6. A Stewart Ultramatte 
5 x 7 electric screen.  The video signals from the two workstations are fed through the interfacing 
boxes to an RGB module on the switchbox. Since the switchbox is also able to handle VHS or S-VHS signals, 
a VCR was later added to the installation. The switchbox can select any of the sources connected to it 
and feed that signal to the Barco projector, which projects the corresponding color image on the large 
electric screen. With the help of a remote control, the switchlmx can switch instantly from one source 
to another. Thus, the equipment permits the class to view high-quality color images on a large screen 
of whatever is displayed on either workstation, or the signal coming from the VCR. 3. The Installation 
The classroom was remodeled to house the above equip­ment and create the most favorable condhions for 
its use. The redesigned classroom had the following requirement~ 1. Equipment placement. The equipment 
had to be optimally placed to a. minimize obstruction of the students view of existing blackboards, and 
 b. facilitate the instructor s movement between the black­boards and the workstations.  2. Network 
wiring. The classroom had to be wired for the network. 3. Power supply. New circuits had to be installed 
to provide clean power for the equipment. 4. Ventilation t Noise. The equipment produces heat and noise. 
Adequate ventilation and sound insulation had to be consid­ered. 5. Lighting. Light level had to be 
bright enough for students to read and take notes, but not so bright as to interfere with the  projection. 
Lighting and screen control switches needed to be placed near the workstations, within reach of the instructor. 
 6. Chulk dust. The effect of chalk dust on the equipment and the possibility of replacing blackboards 
with whiteboards had to be considered. 7. Physical security. The physical security of the equipment 
had to be ensured.  I1 kI 7 Screen * / Ill Light Controls Desks 0 nan nom 00000000 0 mncltlclclclcl 
000000000  0 mclncmclcln 000000000 1 =Jmmmo CclowtI nnnnn n Figure 1 Floor plan of Room Sc. N. 112. 
Figure 1. shows the placement of the equipment that best satisfied requirement (1). The projector is 
ceiling-mounted. A new dropped ceiling was installed to minimize the noise and to improve the appearance 
of the classroom. Requirement (5) was solved with the installation of new dimmable fluorescent light 
fixtures. 4. Applications This classroom computing environment is a versatile tool for instruction that 
can be exploited in a variety of useful ways: software and complex programming tools (e.g. debugging 
tools, such as dbxtool, or UNIX development tools, make, SCCS,c-flow, etc.) can be easily and effectively 
demonstrated, the windowed environment makes it possible to display a program in one window and ran it 
in anothe~ to answer questions that arise in class, the instructor can construct and try out programs 
on the spot , demonstrate student projects to the class, or show solutions to exercises; classnotes can 
be prepared, stored on appropriate file servers, and displayed in class; multimedia course materials 
can be presented, etc. The equipment also made it possible to introduce algorithm animation techniques 
into our curriculum. We describe our expe­rience in this area in Section 5.2. During the Spring 92 quarter, 
four faculty members used the facility to teach seven courses, These courses and the main ways in which 
the equipment was used in each were: 1. Compiler Design (algorithm animation.) 2. Computer Architecture 
( simulation of logic circuits.) 3. Data Structures (algorithm animation.)  4. VLSI design (CAD tools 
used for chip design.) 5. Computer Graphics (algorithm animation, nnd orientation) 6. Operating Systems 
(algorithm animation, and features of UNIX.) 7. Systems Programming ( demonstration of UNIX system calls,) 
 In most of these courses the equipment was used intensively throughout the course. In others, the equipment 
was used only during a part of the course, mainly because the necessary course­ware was not yet available, 
As more coursewure is developed, we foresee that these courses and many others will be using the equipment 
throughout fie course.   5. Courseware In this section we describe some of the novel courseware used 
in the classroom. For lack of space we concentrate on a representative sample that will give an idea 
of the most irmo­vative courseware used in the facility. The reader can extrapolate from these samples 
to applications for other courses. 5.1 Computer Architecture In this course we used Logic Works, a commercially 
avail­able softwere package that runs on the Macintosh. Logic Works permits the logic-level simulation 
of arbitrary logic circuits. Logic circuits were edited in Logic Works and the resulting circuits were 
simulated. Timing relationships between the tracked logic signals were then dynamically displayed.  
5.2 Algorithm Animation We introduced algorithm animation techniques in several of our courses. The courseware 
used for algclrithm animation inclu&#38;s both locally developed softwere and software developed at other 
sites. 5.2.1 Balsa II This package [Brown] grew out of algorithm animation research carried out at Brown 
University in the mid-80 s. Balsa II, a black and white package that runs on the Macintosh, includes 
many high-quality animations. The animations included with Balsa II consist of many sorting algorithms, 
a few combi­natorial algorithms (e.g., simple bin paeking algorithms, shortest path), and some geometric 
algorithms. 5.2.2 Xtango Xtango [Stasko] is another algorithm animation package that grew out of research 
at Brown University. We were able to obtain Xtango through anonymous ftp from Georgia Tech. Xtango is 
a very powerful package which supports high­level graphic operations that make the task of animating 
small algorithms relatively easy. Xtrmgo runs in the X environment, has limited support for color, and 
supports smooth animation. Besides the algorithm animation softwere, Xtango comes with many interesting 
and high-quality, ready-to-use animations. We were able to use many of these in the Data Structures class. 
We also used an animation illustrating the Pralducer-Consumer problem in the Operating Systems class. 
In addition, we developed some new algorithm animations using Xtango. For example, we prepared a new 
animation illus­trating the Linear Probing heshhg algorithm, and used it in the Compiler Design and the 
Data Structures class. Other Xtango development is under way. We are working on using Xtango to animate 
several algorithms manipulating grammars that will be used in the Compiler Design class. 5.2.3 The Pascal- 
compiler animation project In the Compiler Design course, one of the authors teaches general com­piling 
techniques, illustrated by the detailed study of a complete compiler for a subset of Pascal, called Pascal-. 
The textbook [Brinch-Hansen] has the source code for the Pascal compiler written in Pascal. The Pascal 
compiler animation project consists of animating each significant part of this compiler, illustrating 
its inner workings through the graphic simulation of its execution. ScannerTool, the tirst part of this 
project, was completed and tried out in the Compiler Design class during the Spring 92 quarter. ParserTool 
and InterpreterTool, two other parts of the project, are under development. We expect to complete the 
entire compiler animation project within a year. ScannerTool As an example of the of software developed 
in this project, we briefly describe the operation of ScannerTool. Technical aspects of ScannerTool are 
described in ~o, Kuo, Simon]. ScannerTool presents multiple views of the operation of the scanner of 
the Pascal compiler. It is an interactive graphic tool that contiols the execution of the scanner on 
appropriate input data and displays its operation through the dynamic evolution of its graphical views. 
The graphical views present different aspects and representations of the internal state of the scanner 
in execution. The views are presented in windows on the screen. The ScannerTool views are organized hierarchically 
to permit the user to visualize the operation of the scanner top-down. The level of detail presented 
by the tool can be controlled interactively. At the topmost level, ScannerTool shows the main in­put/output 
relationships of the scanner. The input to the scanner is the source program for the compiler. The scanner 
sees this as a sequence of characters. ScannerTool presents a graphic represen­tation of the input in 
a window where each character is represented by a colored circle containing the character. A colored 
triangular cursor shows the current position of the scanner in processing this input. The output of the 
scanner, consisting of a sequence of higher­level symbols called tokens, is presented in another window. 
Each token is represented by another colored oval containing a word describing the token. A third window 
appears between the input and output windows with graphic representations of the basic variables, data 
structures of the scanner, and the code of the scanner itself. Thus, the topmost view of the scanner 
illustrates its basic function: characters in, tokens out. The main routine of the scanner is NextSymbol, 
which reads the characters corresponding to the next token from the input and identifies the token. The 
scanner works by repeatedly calling NextSymbol and outputting the corresponding token, until the input 
is exhausted. The main window contains a central subdivision with four color-coded areas. These areas 
represent the four main steps of the code of NextSymbol. When NextSymbol executes the code of one of 
these steps, the color of the corresponding area brightens to visually indicate that it is the active 
step. Simultaneously, a gauge in the area becomes busy, changing the value that it displays. The gauge 
can be thought of as representing the program counter inside the code. While no actual correspondence 
exists between the vahre displayed in the gauge and the program counter, the visual feedback of the moving 
gauge suggests such a corre­ spondence. ~ other words, the brighter color of the area and the changing 
gauge indicate this is the step that the seamer is doing right now . As the identification of the token 
proceeds, further graphic objects appear on the screen, representing values of the main variables of 
the scanner. Thus, the user can observe the flow of information from the input window, through the scanner 
data structures in the main window, to the output window. If more detail is desired of the inner workings 
of the scan­ner, the user can dwect Scanneflool to display more windows to present additional information 
about the scanner s operation. Each of the main steps has a corresponding window where more infor­mation 
is shown about how the corresponding step performs its function. The step corresponding to the recognition 
of wordsym­bols (i.e., reserved words), and names (i.e., identitiers), has an associated window that 
dkplays a representation of the current state of the hash table of the scanner. As the hash table is 
manip­ulated by the scanner, the corresponding changes appear in thk window. Each record in the hash 
table is represented by a colored rectangle. If more information is wanted about a recor~ the user can 
double-click on any of these rectangles, and the corresponding detailed record structure is displayed. 
The recognition of special symbols is illustrated by display­ing the decision-tree corresponding to the 
tirst character of the speci~ SWbO1. The path corresponding to the recogniz~ speci~ symbol is then highlighted. 
Another view can show the digit by digit computation of the value of numeral symbols. In addition to 
controlling the level of detail presented, the user can interactively set important parameters that alter 
properties of the execution, such as the speed of the simulation, the size and position of the windows, 
the colors used etc. Colors have associated meanings they represent classes of characters, (e.g., letters, 
digits, etc.), classes of tokens, (e.g., wordsymbols, names, numerals, etc.), and the results of probes 
or comparisons, (e.g., red bor&#38;r indicates no match, green border indicates match). 5.2.4 Graphics 
Computer Graphics is a senior-level course that covers the fundamentals of the subject and introduces 
students to event-driven graphics programming. The class began with a series of video animations including 
some from SIGGRAPH releases and some that were produced locally as special student projects. At the beginning 
of the quarter, the instructor quickly demonstrated the programming environment directly in the classroom. 
The first assignment was a warm-up exercise involving mini­mal changes to a program that displays three 
windows that contain examples of graphic output. This program formed the basis for the other assignments, 
which were increasingly more challenging. The last assignment was a group project of the students own 
design. A number of graphics algorithms and techniques were demonstrated throughout the course line and 
circle drawing, line and polygon clipping, bh operations, area filling and scan con­version, 2D and 3D 
trrmsfonnations, 2D and 3D viewing, curves and surfaces in 3D, color, and shading. Many of these topics 
were illustrated by upgraded past student projects running on the SPARCstation and newly created Macintosh 
applications mnning on the Macintosh IIci. The classroom allowed the instructor to display the code for 
algorithms and their step by step execution. Since the results of these algorithms are graphics, direct 
display was particularly important. Students can get considerably more appreciation of the mathematics 
and computer science concepts behind these algorithms when they see the results as real time animations. 
One example is a program called MacCast. The program was designed to be used as a demonstration tool 
for in-class presenta­tions as a kind of electronic chalk . It is an interactive program written in Pascal 
with many pull-down menus and dialog boxes that facilitate its control by the user. The principles illustrated 
by MacCast inclu&#38; 3D viewing, 3D modeling, rendering (wire hrne, hidden surface. algorithms, and 
ray tracing). Operations in the Commands menu allow the user perform such functions as rotating the viewing 
orientation, refreshing the windows, and quitting the program. Rendering options include wire frame, 
hid­den surface, and the level for tracing rays into the scene. The choice of objects are: a single convex 
house, a single house with an indented entrance way, and two houses with indented entrance ways. The 
Options menu allows axes, labels, projection lines, COP (eye position), and so on, to be shown or hid&#38;n 
in the display. The Our View menu controls a window that shows a view of the object as in an illustration 
of viewing. The orientation, viewing ongin, and eye position for this view are controlled from this menu. 
The Viewer View controls a like-named window that displays the scene as a viewer would see it. The associated 
menu controls the orientation, viewing ongin, and eye position for the view. The program uses four windows: 
Our View , Viewer View , Tree (to show the tree structure that was used to model the objects), and Diagnostics 
(to show the internal workings of the display algorithms). All windows can be repositioned and resized 
to allow appropriate display of detail. Another notable demonstration used in the graphics class in­cludes 
a student project running under X that illustrates 2D trans­formations. One set of push-button controls 
allow a user to select a v~iety of 2D objects includlng a square, arrow, cross, and house. Another set 
of push-buttons select actions to perform on these ob­jects: scale, rotate, translate, and shear. As 
each action button is pushed, the currently selected object is appropriately transformed and returned 
to its original position. The instructor demonstrated this program in class running on the SPARCstation 
2GX and then opened the source code for display and class discussion. Students could thus see how each 
type of transformation is created and use these ideas in their own programs, leading to better understanding 
of the lecture material. The power of the SPARCstation 2GX was illustrated by an­other application that 
demonstrated shading using a Phong lighting model. The program displayed in a window an arzay of vrduators 
(sliders) that allow a user to adjust coefficients in the formula for surface lighting of an object. 
The object was actually specified as a field of normal vectors, one for each pixel in a 200 by 200 square 
array. This data was stored in a file. The resulting image is displayed in its own window. Each time 
the sliders are adjusted, a new image is available within a second or so. This allowed the instructor 
to illustrate basic concepts behind surface lighting mod­els very quickly. The effects of ambient light, 
diffuse reflection, and specular reflection were isolated and then combined in a few minutes in the classroom. 
The use of color is important in computer graphics. This con­cept was illustrated with an application 
that shows color blending. A set of sliders in one window controls the amount of red, green, and blue 
(RGB) components for each of the two colors that are blended in a rectangular area on another window. 
The instructor used this tool to walk around the RGB color cube (drawn on the black board). Students 
could see, rather than just imagine, how colors combine additively in an RGB display. 6. Evaluation 
To assess the students reaction to the introduction of the above courseware we dishibuted a questionnaire. 
For each an­imation stu&#38;nts were asked: Did you like the animation? Did the animation help to make 
the subject more understandable? Did it make the class more interesting? Did it help you to grasp the 
concepts presented? Did it help you visualize how the algorithm works? Except for the first question, 
students could choose on a scale of 1 to 4: (e.g., (1) less understandable, (2) same, (3) more understandable, 
(4) much more understandable.) There was ulso space. in the questionnaire for free format comments and 
sugges­tions. We expected that students would view these irmovations pos­itively, but were nonetheless 
surprised by the extent of enthusiasm that the new approach generated. In almost every case the results 
were overwhelmingly positive. We report here the results for I.in­ear Probing and ScannerTool. In both 
cases, every student liked the animation. Average scores for the other questions were re­spectively 3.38, 
3.25, 3.50, and 3.63, for Linear Probing and 3.33 in all four questions for ScannerTool. One of the XTango 
animations on AVL trees did confuse the students. This revealed that further work is needed for that 
animation. It also seems to indicate that the overwhehning positive feedback to the other animations 
was not just a gee-whiz reaction to the novel approach, but suggests that a genuine pedagogical improvement 
is attributable to these techniques. Other empirical evi&#38;nce also seems to confirm this conclu­sion. 
For example, we observed a definite improvement in the way that students described the work of the scanner 
in tests compared to previous years. We think that the effect is significant enough so that it should 
be measurable with quantitative statistical dat~ but we did not attempt to carry out such an analysis, 
partly because of lack of a&#38;quate data. [Brown and Sedgewick] reported that some faculty that used 
animation techniques at Brown University in the mid 80 s noticed that they were able to cover the material 
faster than before the introduction of these techniques. One of the authors observed the opposite effect 
in his class: progress in the subject matter was slower in this case because the animations stimulated 
the students to ask more questions than used to be the case, and answering these questions took more 
class time. 7. Acknowledgments This work was supported by the National Science Founda­tion under Grant 
No. USE-905 1112, and by a grant horn Sun Microsystems Corp. We gratefully acknowledge this financial 
sup­port that made this work possible. Any opinions, findings, and conclusions or recommendations expressed 
in this article are those of the authors and do not necessarily reflect the views of the National Science 
Foundation. 8. References <RefA>[Brinch-Hansen] Per Bnnch-Hansen, Brinch-Hansen on Pa$cal Compilers, 310 pp., 
Prentice-Hall, 1985. [Brown] Marc H. Brown, Exploring algorithms using BALSA II, IEEE Computer, 21 (5), 
14-36,1988. [Brown and Sedgewick], Marc H. Brown and Robert Sedgewick, Progress Report: Brown University 
Instructional Com­puting Laboratory, ACM SIGCSE Bulletin, 16,91-101, 1984. ~o, Kuo, Simon] Chi Fai Ho, 
Shue Lin Kuo, and Istvan Si­mon, ScannerTool A Case Study of Algorithm Ani­mation in an X Toolkit environment, 
IEEE Computer, in preparation. [Stasko] John T. Strisko, Tango: A framework and system for algorithm 
animation, IEEE Computer, 23 (9), 27-39, 1990.  
</RefA>			
