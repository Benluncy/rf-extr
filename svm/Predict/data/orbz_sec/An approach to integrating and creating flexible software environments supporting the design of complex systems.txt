
 AN APPROACH ENVIRONMENTS TO INTEGRATING SUPPORTING AND THE CREATING DESIGN OF FLEXIBLE COMPLEX SOFTWARE 
SYSTEMS Kirstie L. Bellman Computer Los Science and Technology SubDivision The Aerospace Corporation 
Angeles, California, 90009-2957 ABSTRACT Engineers and scientists are attempting to represent, design, 
analyze, and reason about increasingly com­plex systems. Because of the complexity of these sys­tems, 
no single analysis, model, approach, or view­point is sufficient. Such complex systems require not only 
the availability y of a variety of analysis tools, knowledge bases, databases, and programs of all sorts, 
but also a framework within which these differ­ ent programs, types of information, and viewpoints can 
be brought together. Software developers have responded to these needs by introducing the concept of 
a software environment . In an environment, the user has access not only to a large number of differ­ 
ent tools (e.g. analyses, editors, other programs), models, and databases, but often a number of util­ 
ities and features in the environment that make it easier to go from one tool or model to another. Often 
these environments have a diversity of knowledge rep­resentations (procedural code, equations, text, 
rules) and languages. Many environments are extendable in at least a limited manner to the languages 
and infor­mation styles already availabIe in the system. How­ever, new languages and representations 
are being de­veloped continuously for very good reasons: as with mathematical formalisms, a good language 
can make certain problems easy to do. Many researchers have been developing new ways of creating increasingly 
open environments (See Pur­tilo et al., as one example). In our research on VEHI- CLES, a conceptual 
design environment for space sys­tems, we have been developing an approach to flexi­bility and integration 
based on the collection and then processing of explicit qualitative descriptions of all the software 
resources in the environment (Bellman and Gillam, 1990; Landauer, 1990). The detailed de­scriptions (or 
metaknowledge) of the resources are used by the system to help partially automate the combination, selection, 
and adaptation of tools and models to the particular requirements of the user and the type of problem 
being solved. 1 INTRODUCTION The present challenge in much of science i~nd engi­neering is to learn how 
to represent (model), design, develop, analyze, manage, and operate complex sys­tems. Complex systems 
have some of the following characteristics: a large number of parts; different kinds of parts; different 
behavioral levels (different levels at which the system can be meaningfully ana­lyzed or controlled); 
and emergent qualities (the be­havior of the system globally is not fully derived from knowing the behavior 
of individual components). Ex­amples abound: managing a product over its lifecy­cle; developing a new 
space system; reengineering a car; improving the quality in a service organization; designing a new building; 
and conducting a scientific study. Because computer models and software support are essential to the 
ability to analyze and utilize complex models, it is no surprise that computer science and re­lated fields 
have become the focal point for attempts to understand and handle complex systems. One of the first things 
we learned about supporting the de­sign and analysis of complex systems is that no sin­gle viewpoint, 
approach, model, or analysis (however broad or good) will be sufficient to design, develop, understand, 
or manage a complex system. A design environment must provide a variety of modlels, anal­yses, software 
tools, and types of information. This imposes on such software environments the dual re­quirements of 
providing the flexibility necessary to handle a diversity of tools and information types and the coordination 
necessary to integrate, mcmitor the interactions, and interpret a diversity of software re­sources in 
order to obtain both desired and consistent system behavior. In this paper, we examine the types of flexibilities 
and integrative processes necessary to a 1101 design environment, especially the services available in 
an environment to help the user select, integrate, adapt, and explain the software resources in that 
en­ vironment (intelligent user support functions), our ap­ proach to providing these services by the 
processing of explicit descriptions of the software resources ( zorap­ ping) and VSIM, a simulation we 
built to study the nature of the wrappings, wrapping processors, and different software architectures. 
2 CO ORDINATION AND FLEXIBILITY The VEHICLES environment is composed of both conventional and artificial 
intelligence methods and programs. It is a distributed, multilingual environ­ ment that is largely written 
in Prolog, C and C++, but also supports external programs written in sev­ eral languages. It supports 
many types and sources of information and knowledge, multiple models, and a broad toolchest of analyses, 
graphics, and other types of software programs. Although it is a prototype en­ vironment, in its four 
years of development it has been used to provide some of the analyses supporting several space programs. 
The capabilities and types of information required in VEHICLES are numerous, varied, and complex. Designers 
and planners of space systems take many different approaches and may work at different lev­ els. Mission 
requirements, technological advances, and constraints on cost or other resources all influence design 
decisions. Consequently, design tools must be flexible enough to allow the designer to focus on different 
levels of detail and on different aspects of the problem; an important part of design is know­ ing what 
to consider a factor and what to consider a constraint at any given time in the design process. VEHICLES 
allows designers to address many differ­ ent design problems, from the definition of mission requirements 
to scheduling issues related to the effec­ tiveness of environmental testing. As sets of possible design 
solutions are generated, the user can compare designs and evaluate their relative merits. VEHI- CLES 
has taken a significant step toward speeding UP the creation of families of viable designs,rather than 
primarily focussing on the analysis and perfor­mance of single-point solutions. We can summarize these 
flexibilities into three broad areas. First there are analyses that support the user in performing trade-offs, 
in deciding what the critical factors are in designing a system, and in relaxing the requirements and 
studying the impact of different sets of requirements and constraints. In other words, rather than just 
providing analyses and models that operate on the basis of a fixed set of constraints, we want to support 
the user s ability to understand and characterize the space of possible so­lutions. Second, we want to 
make each feature of a model a variable. That way, the users can explicitly examine the impact on their 
design or study of using different models, different sets of const raints, different numeri­ cal routines, 
different approaches or design strategies, and even different user models. We support this in Vehicles 
by providing a library of models, often with several alternative versions that can be compared, and 
a toolchest composed of many different types of analyses. We allow the user to start anywhere in the 
design. For example, a user can adapt a previous de­ sign, start top-down by interpreting broad mission 
re­ quirements for a new satellite, focus initially on sizing a subsystem and assessing its impact on 
other subsys­ tems, or start with a new technology for a component and stud y its effect on different 
systems. Also, the system will process with partial results and missing information, and will provide 
intelligent defaults for initial factors to consider, parameter values and op­ tions. Some of the continuing 
research challenges in providing this type of flexibility is to process with incomplete information, 
to provide models at differ­ ent levels of detail and precision and with alternative assumptions, and 
to combine qualitative and quanti­ t ative information. Third, all of these tools and models were not 
de­ veloped in the same language, on the same platform, or by the same authors. Hence, at a network 
level, we have found that the system needs to be multilin­ gual, distributable over different platforms, 
and both extendable (can add new instances of known types) and open (can add new types of programs, functions, 
and operations). However, each of these flexibilities noted above re­quires some active coordinative 
processes to manage the diversity of features provided. By coordination, we mean the organized activities 
of parts in relation­ship to global goals. In order to help coordinate the models of a complex system 
and the supporting soft­ware resources in a software system, we need to pro­vide: (1) perspective (proYiding 
both representations that present different overviews of the whole system and representations that permit 
a number of differ­ent subjective views); (2) interface (providing low-Ievel protocols); (3) integration 
(providing informa­tion and processes to help determine the conditions under which tools or models should 
be interfaced); (4) overhead (providing sufficient information in a processible form so that the system 
can monitor in­teractions and interpret and evaluate its results and resources. ) The distinction we 
want to make between interface and integrate is essentially the differ­ence between providing the permissive 
and essentially static capability that establishes that two tools can exchange bytes (interface) and 
providing the capabil­ity for the system to dynamically determine when two tools should exchange information 
(integrate). Intelligence in a complex system costs -both in terms of the types of information that must 
be avail­able and the types of processes necessary to make use of it. In a biological system, adaptive, 
intelligent behavior includes the ability of the system to some­how see itself within a context, monitor 
and evaluate its own and others behaviors, and adjust and refine its behavior as required by criteria 
(or constraints) imposed from both the external environment and it­self. A biological system does this 
by having a va­riety of different mechanisms that support different kinds of flexibilities at many levels. 
For example, bi­ological systems have many ways of producing graded responses -at a cellular and chemical 
level, at a neu­ronal level, and at a behavioral level. They can ad­dress several goals at once and combine 
the informa­t ion from a variety of senses. Yet all of this diversity is gracefully merged into one fluid, 
continuous, and co­ordinated pattern of behavior (See Bellman and Wal­ter, 1986). However, even in the 
simplest organism, the flexibilities and the coordination does not come simply or cheaply. 1 In a computer 
system, at least for the present, the emphasis must largely be on explicit knowledge that is processed 
by other programs and less on generative processes that by their actions give rise to coordina­tion. 
For example, one key aspect of coordinating a complex system is to have one program monitor the results 
and behavior of ot her programs. This requires much more than simply having the monitoring pro­gram triggered 
to do some action by the values sent to it by the monitored program; instead it requires explicit represent 
at ions of the monitored program, including its failure modes, its usual output, and a record of its 
results and so forth. Hence, to provide such coordination requires a tremendous amount of bookkeeping 
(documentation, tracing, design histo­ries, shared databases and knowledge bases). Many researchers have 
been developing new ways of creating increasingly open environments (See Pur­tilo et al., 1985; Erman 
et al., 1986; Bond and Gasser, 1988 for examples). In our research on VEHICLES, a 10ne current debate 
in theoretical neuroscience is whether such adaptive, intelligent behavior is best rnodelled by rn&#38;­ing 
use of knowledge or information concepts (a software anal­ ogy) ~d/or aS PMsical dynamical systems (an 
analogy relying on chaotic dynamics, a mathematics describing stabilities and changes of stabilities). 
In a software system, we have far fewer interesting and generative capabilities. conceptual design environment 
for space systems, we have been developing an approach (called wrapping) to flexibility and integration 
based on the collection and then processing of explicit qualitative descrip­tions of all the software 
resources in the environment (Bellman and Gillam, 1990; Landauer, 1990). The detailed descriptions (or 
metaknowledge) of the re­sources are used by the system to help partially au­tomate the combination, 
selection, and adaptation of tools and models to the particular requirements of the user and the type 
of problem being solved. This ap­proach also allows for a great diversity of information types and languages. 
At the current time, we have a simulation, VSIM, used to study both the types of wrapping descriptions 
and the wrapping processes.  3 INTELLIGENT USER SUPPORT As noted above, supporting the design and analysis 
of complex systems requires a diversity of models and tools; the result is often a software environment 
that becomes itself a complex system. Hence, we feel it is important to provide intelligent user support 
func­tions; that is some means of supporting the user (be it human or another computer program) in the 
selec­tion, assemblage, integration, adaptation, and expla­nation of the software resources. By seiection, 
we mean that the system helps the user to select which software resources are appropri­ate given the 
current problem or task. For example, in VSIM, we have experimented with two simple sce­narios involving 
select ion: in the first case, a human user has selected optimize from a menu containing a number of 
analyses in VEHICLES and the system uses the wrappings of three optimization programs and the wrapping 
for the set of equations to be op­timized to determine which optimization program is most appropriate; 
when the system finds no basis for distinguishing between two of the optimization pro­grams, it uses 
wrappings again to select an appro­priate user screen for presenting the user with the re­maining candidate 
optimization programs from which to select. In the second case, a VEHICLES solver has bombed on a set 
of equations and the system itself poses the problem of selecting another solver, which is done automatically 
on the basis of the wrappings, with a record kept of the choice and use of the selected solvers. To us 
integration is more than simply allowing tools to talk (we prefer to llw the term assemblage for this 
permissive hooking-together of tools); rather, it is providing some means for deciding when tools should 
talk. For example, when should a given model send its output to another model; when should a given database 
provide the information for a given analysis. In the wrappings, we have conditionals (implemented as 
rules, but there could be other implementations) which help define the context for integrating tools 
and models. By adaptation, we mean the modification of the software resource depending upon the problem 
or task and the information currently available. This adap­ tation could be changing the input file or 
control pa­ rameters to a simulation or changing the queries to a database or changing the default values 
in a model and so forth. The last critical intelligent user sup­ port function is explanation, that is, 
at a minimum, providing the means to record and document how the software resources were selected, integrated, 
and modified during the use of the software environment. Eventually, we would like a more interesting 
form of explanation, where the explanation is adjusted de­ pending upon the user and the problem or task. 
STUDYING WRAPPING WITH VSIM Using VSIM, we have learned a number of things about the knowledge necessary 
in wrapping, which we summarize below. First, in order to perform the five intelligent user support functions 
listed above, we need to represent and utilize three types of knowl­edge: met aknowledge (e.g. knowledge 
about a given method or tool or about the use of knowledge in a knowledge base), user models (knowledge 
about the types and activities of the user), and domain knowledge (especially knowledge about the types 
of problems in that domain and the types of contexts that constrain the choice and use of given methods 
and inform at ion.) In VSIM, we have been experi­menting on how to utilize each type of knowledge; current 
ly VSIh4 is composed of a planner knowledge base (PI(B), a wrapping database (WDB), and a set of wrapping 
processors and other software resources, which are all wrapped. The PKB contains triplets of the form: 
{ Problem Definition Information Available Resource Name } The Problem Definition has been simplified 
to be a list of keywords corresponding to the activities that the system can provide to the user, such 
as op­timize , solve , parametric study ; or at a higher level, they could be such activities as design 
a new satellite or tailor an existing satellite . Eventually, we can incorporate more interesting problem 
decom­position methods; we have simplified the problem def­inition in order to study how to relate the 
problem de- Bellman script ions to the software resources, and how to spec­ify the minimal information 
required by the software resource to be used for a given problem. In the WDB, each wrapping cent ains 
a name of a software resource, input and output requirements and restrictions, and then we have been 
experimenting with many differ­ ent ways of expressing additional information about the appropriate 
use of the resource under different conditions. One important point to note is that in VSIM all the software 
resources are wrapped, includ­ing all programs processing the wrappings. Hence, VSIM selects the matcher 
program used to match the wrappings of the model and the optimization pro­grams, in the example scenario 
described above. In the PKB, the problem definition reflects knowl­edge about: the resources provided 
by the software environment (metaknowledge); the desired activities of the user (user models); and the 
methods and re­quirements of solving problems in a given domain. In the WDB, the knowledge is largely 
metaknowledge about the use and type of software resource, but it crosses any neat lines and includes 
in any condition­als, references to domain knowledge and user models. One of the problems we encountered 
when we started to write the wrappings was what we call the library problem. That is, we tried to formulate 
a description of a software resource that would be suit­able for all wrapping purposes for all time. 
We soon learned that, at least for the purposes of formulating these descriptions, we need to start with 
five differ­ent descriptions, each cent aining the semantics corre­sponding to the five different intelligent 
user support functions described above. In addition, for a large software resource (such as the large 
simulations we deal with in VEHICLES), we need to develop sev­eral wrappings, each corresponding to a 
major mode of use for that resource. Lastly, an issue we have not yet addressed in VSIM, we can not consider 
the wrappings as a static description. This becomes par­ticularly clear when we attempt to include the 
de­signs that are being generated by the VEHICLES sys­tem as part of the wrapped resources in the system. 
Thus the system must do more than just process ex­ist ing descriptions; it must have the processes that 
permit the development of these descriptions as the system develops its products (designs, reports, and 
so forth). This has led to the realization that in fact the wrappings will always be evolving as either 
the system generates new resources (its products ), or either the system or the user discovers additional 
in­formation about a given resource under some given context or usage. Although we have focussed on the 
flexibility and in­tegration provided by utilizing wrappings, it is impor­tant to emphasize that flexibility 
and integration in a software environment occur at several different levels. Hence, in addition to the 
use of wrappings, we have also experimented with how best to use network ser­vices and message-passing 
kernels to take advantage of different programming languages and platforms. Lastly, the wrappings represent 
a self-description of a software environment that is processible by that environment. In Maes terminology 
(1987), such a system is computationally reflective and her ev­eryday examples of reflection range from 
the now commonplace, e.g. keeping performance statistics and debugging information to the exciting possibil­ities 
for autonomous systems and programs with self­opt imizat ion, self-modification, and self-act ivat ion. 
We are excited by the recent realization that VSIM can event uall y be considered just another resource 
in the VEHICLES environment; one with the rather special property of being a simulation of itself. Hence 
when we add a new resource to VEHICLES, we would eventually be able to immediately simulate its inte­gration 
into the system. With wrappings, we hope to make software architectures more testable, main­tainable, 
and open. The hope is that eventually we will have computer systems in which the means to test and evaluate 
the system are not peripheral, but rather an integral part of the software system. REFERENCES <RefA>Bellman, 
Kirstie L. and A. Gillam. Achieving Open­ness and Flexibility y in Vehicles. In AI and SIM-ULATION Theory 
and Applications. Proceedings of the SCS Eastern Multiconference, 23-26 April, 1990, Nashville, Tennessee. 
Simulation Series Vol. 22(3), April 1990. pp 255-260. Bellman, K. and D. Walter, Biological Processing. 
Am. J. Physiol.: Reg., Int., Comp. Physiol. 15(6), 860-867, 1984. Bond, A.H. and L. Gasser, editors. 
Readings in Distributed Artificial Intelligence. Los Altos, Ca: Morgan Kaufmann, 1988. Erman, Lee D., 
Jay S. Lark, Frederick Hayes-Roth. Engineering Intelligent Systems: Progress Report on ABE. Teknowledge 
Inc TTR-ISE-86-102. In Proceedings: Expert System Workshop, April 1986. SAIC Report Number SAIC-86/1701. 
Landauer, Christopher. Wrapping Mathematical Tools. In AI and SIMULATION Theory and Ap­plications. Proceedings 
of the SCS Eastern Multi­conference, 23-26 April, 1990, Nashville, Tennessee. Simulation Series Vol. 
22(3), April 1990. pp 261­ 266. Maes, Pattie. Concepts and Experiments in Com­putational Reflection. 
00PSLA 87 Proceedings, 1987. pp 147-155. Purtilo, James. POLYLITH: An Environment to Support Management 
of Tool Interfaces, ACM O­89791-165-2/85/006/0012. 1985. Purtilo, James M. POLYLITH and Environments 
for Mathematical Computation , University of Illinois Dept of Computer Science, Report No. UIUCDCS-R-84-1135. 
1984. Walter, Donald O. and Kirstie L. Bellman. Some Issues in Model Integration. In AI and SIMU-LATION 
Theory and Applications. Proceedings of the SCS Eastern Multiconference, 23-26 April, 1990, Nashville, 
Tennessee. Simulation !Series Vol. 22(3), April 1990. pp 249-254</RefA>. AUTHOR BIOGRAPHY KIRSTIE L. BELLMAN 
is a senior scientist in the Computer Science and Technology Subdivision of The Aerospace Corporation. 
Dr. Bellman has over twenty-five years of academic, industr!y, and con­sulting experience in the development 
of both con­ventional computer models and artificial intelligence applications. Her published research 
spans a wide range of topics in the cognitive, neurophysiological, and information-processing sciences. 
Five years ago, she started the Vehicles project. 
			
