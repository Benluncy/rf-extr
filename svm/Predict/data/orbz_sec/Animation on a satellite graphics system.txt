
 Permission to make digital or hard copies of part or all of this work or personal or classroom use is 
granted without fee provided that copies are not made or distributed for profit or commercial advantage 
and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, 
to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee.Siggraph 
76, July 14-16 Philadelphia, Pennsylvania ANIMATION ON A SATELLITE GRAPHICS SYSTEM RichardM. Sowar Air 
Force Institute of Technology Wright-PattersonA. B. B., Ohio 45433 Although animation processing capability 
can be extremely valuable incertain graphics programs, its appli­cation is generally limited to users 
of stand alone, single user graphics systems. This paper describes an organization of software which 
enables a host program to define and control animations for an intelligent satellite graphics system. 
 The discussion centers around the particular system on which it was implemented, but the technique should 
be general enough to have wide application. The results have significantly enhanced the operating characteristics 
of programs in the host-satellite environment. 1. INTRODUCTION The majority of satellite graphics systems 
in existence today carry the classificationof fixed function "black box" systems [1], i.e., the appli­ 
cation program can only access the satellite through subroutine calls inthe host system. A subroutine 
call results in the creation of one or more terminal commands, which when received at the satellite, 
cause the correspondingdisplay file modification. However, the ability to control exactly when a command 
arrives at the satellite is next to impossible because of several factors: the buffering technique 
for commands in the host, the speed of the communications interface, and the operating characteristicsof 
the host system. As a result, black box satellites are predominately used for the creation of "static" 
pictures. However, a logical grouping of terminal commands, processed with some semblance of time, can 
be used to perform certain types of animation. This is especially true if the satellite operates on 
a structured display file, because certain commands are then quite powerful. One such command may cause 
attribute changes (movement,blanking,...), or the addition and deletion of graphical picture structures. 
A list of terminal commands, processed in a timed sequence by the satellite, is the basic concept of 
animations inthis paper. To have applica­ tion, however, commands must be stored at the satellite with 
the definitionand control facili­ties in the host program. The following discus­sion deals with a particular 
environment and describes the changes to the satellite software to achieve animation.  2. HOST-SATELLITEENVIRONMENT 
 The host computer is a Honeywell 635 operating under GCOS, with more than 130 remote devices con­nected 
to the system across the states. The satel­ lite system isa Sanders ADDS/900 with a Varian 620i minicomputer. 
The 620i has 12K of 16 bit word memory: 4K isrefresh memory and 8K houses the local system software. 
There isno auxilliary storage at the satellite system. Graphics programs are written in FORTRANusing 
a Graphics Subroutine Package (GSP) [2], which allows the creation of graphic data structures on a GROUP-ITEM 
basis.  3. HOST DEFINITION AND CONTROL OF ANIMATIONS An animation sequence, as defined inthis paper, 
is simply a "named" list of terminal commands. The commands can be any of those in the repertoire of 
the satellite, ranging from line drawing operations to the manipulation of the GROUPS and ITEMS of the 
display file. Normally, the terminal commands are processed as they are received at the satellite system. 
How­ever, several subprograms (Table 1), designed for the definition and control of animations, enable 
the host program to change this mode of operation. Animations are defined through the use of sub­routines 
ANMDEF and ANMEND. The body of an anima­tion, placed between them, ismerely a logical grouping of graphics 
subroutines. The result of ANMDEF isa special commandwhich switches the satellite from "processing"mode 
to "storage" mode. Subsequent commands are stored at the satellite until an "end of animation" command 
is received. The following example (Fig. 1) represents the host definition of an animation sequence named 
"SINE", which when activated,will move the graphical structure "CHAR" (the letter 'S') through the path 
of SIN(X),X=0,...,2r.  Fig. 1 - An Example of a Simple Animation Once an animation isdefined, it can 
be activated at any time. It starts when the satellite pro­cesses an "invoke animation" command, which 
is generated in the host through subroutineANMINV. However, all commands of an animation sequence can 
not be processed at once, or only the end result will be seen. This isnaturally so, because of the 
the completion of one command until the start of the next. The time is a direct multiple of the DPC rate. 
For example, if the DPC rate is 60 cycles/sec., a time of 1 implies a 1/60 second wait between commands, 
and a time of 60 is a 1 second wait. The time is specified from the host program through subroutine ANMINV. 
An extremely valuable side effect, used for program defined function keys and normal system messages, 
is that a time of zero implies full speed processing(no wait between commands). The animation example 
(Fig. 1)consists of 101 "move" commands. The statement CALL ANMINVC'SINE",30) would activate the animation 
with a 1/2 second wait between commands, thus lasting for 50.5 seconds. Once defined, an animation can 
not be changed except by a complete redefinition originating in the host. However, the remaining subprograms 
(Table 1) offer the host program the control to cover a wide variety of applications. An anima­ tion 
can activate another (ANMINV), stop another CANMSTP), and resume another (ANMRSM). Itcan also stop itself 
(ANMWT) until another is com­pleted, at which time it will automaticallybe resumed. Finally, the inter-command 
time can be changed (ANMTIM) to show acceleration or decelera­ tion.  4. PROCESSING ANIMATIONSAT THE 
SATELLITE The animation implementationrequired the following of the terminal software: 1 -Local storage 
for animation definitions. 2 -A clocking mechanism. 3--Single command processing capability. 4--Animation 
control logic. 4.1 Local Storage Since there isno auxilliary storage at the satellite,commands consituting 
all animation definitions are stored in unused main memory. This amounts to about 2K in one version of 
the software and 4K in another. The most common commands used in animations require from 2 to 4 words 
of storage each.  4.2 Clocking Mechanism A 1/60 second clock was requiredsince the DPC at the satellite 
is 60 cycles/second. To support this, the real time clock of the minicomputeris used, although a count-down 
in the main control loop of the software has proven satisfactory.  4.3 Single Command Processing speed 
of the minicomputeras related to that of one display processor cycle (DPC) or refresh cycle. In fact, 
if more than one command isprocessedwithin one DPC, some information may be lost to the viewer. Therefore, 
to control the timing of animations, the host program specifies an inter­ command time that the satellite 
should wait from The only change to the original softwarewas in a message processingmodule. Here all 
commands were processed as they were received. The input module buffered commands in an internal form, 
and passed it to the message processor which stepped through each command by calling on the appropriate 
display file modules (Fig. 2). DISPLAY FILE MODULES  Fig. 2 - Original Message Organization The previous 
organizationwas not suitable because animations require that commands be processed one at a time. 
However,normal system messages should be processedwithout any delay. The solution was to treat all 
messages as animations. To support this, the messageprocessor was changed to a command processor (handle 
one command and return), and it was given the task of storing commands during an animation definition 
(Fig. 3). An animation controller (explainedbelow)was written to process all animations, calling on 
the command processorwhen required. Finally, since all pro­cessing is designed for animations, the input 
 module defines each input buffer as an animation. However, itimmediately activates itwith an inter­command 
time of zero which results in full speed message processing.  4.4 Animation Controller Every command 
to be processed at the satellite passes through this module. It is given controlfrom either the input 
module or the system clock. All decisions are made from an internal table (Fig. 4) in which each animation 
has a six word entry, indexed by the animation name. Animation is always reserved for normal messages 
(I/Obuffer) and has its values assigned by the input module. Entries in the table are made during ani­mation 
definition (START,END), and by the specialcommands used for controlling animations (Table 2). START 
- Pointerto start of animation END - Pointer to end of animation NEXT -Pointer to next command to 
be processed ICTIME -Inter-commandwait time while an animation in process TLEFT -Time remaining until 
next com­mand is processed. Decremented with each 1/60 sec. clock when active. WAIT -Animationon whose 
completion this animation iswaiting Fig. 4 -Animation Control Information  The logic of the animation 
controller can be best described by the following flow diagram (Fig. 5). The terms used in the diagram 
are those which are defined in Figure 4. From this itcan be seen that an animationwith an inter-command 
time of zero has all commands processed in one pass through the module. Likewise,one with a time "n"requires 
"n"passes until the next command of that sequence isprocessed. Note also that animations activated in 
the same pass will be completely synchronized, since the system clock isnot reset until the end. 5. 
COMMENTS When motion isused to highlight a picture, it is sometimes advantageous to see it more than 
once, or even at different speeds. Since animation defi­nitions are stored at the satellite, they can 
be activated as many times as desired. However, if the command to activate an animation is processed 
directly from the communications line, the terminal user must be ready, because itmay start at any time. 
 It turned out that program defined function keys fit very nicely into the animation framework. The host 
program can define a function key assignment just as an animation is defined. The only change was to 
disguise the subroutine names, i.e., FKYDEF and FKYEND rather than the corresponding animation names 
ANMDEF and ANMEND. The commands sent to the satellite are exactly those which are sent for animation 
definitions, except that a unique name is assigned. Inthe satellite software, a function key depress 
interrupt causes the corresponding animation, if defined, to be activated with an inter-command time 
of zero. If the statements were included in the host program, the terminal user could activate animation 
"SINE" as often as he desires by depressing the appropriate function key. This can be extremely valuable 
inmany educational applications, and it also reduces the  Fig. 5 -Animation Controller Logic interaction 
design requirements of the host pro­gram. Function key assignments have a great value in non-animationprograms 
as well.  6. CONCLUSION A technique used for processing certain classes of animations in a host-satelliteenvironment 
has been discussed. While extending the capabilities of programs operating in this environment, the system 
has also maintained its original identity in support of on-going and non-animation applica­tion programs. 
In fact, the satellite has remained a black box system, since the only real change was in the satellites 
view of processing messages. The total implementationrequired only 200 additional words of logic in the 
satellite software. The primary limitation, as to the complexity and number of animations, is the amount 
of free memory available for their definitions. However, rather significant results have been achievedwith 
anima­tion applications in an educational environment. Certain applications include: viewing the flow 
of information through a mock computer, flow of infor­mation through a multiprogrammedcomputersystem, 
viewing a queueing model in action, and viewing several non-linearoptimization techniques via gradient 
search vectors. Not only have the appli­cations been valuable for hands-on use, but they have greatly 
simplified the creation of video tape presentationsfor classroom purposes. REFERENCES <RefA>[1] Griffith Hamlin, 
Jr., James D. Foley, Configurable applications for graphics employing satellites (CAGES), Proc. of the 
 second annual conference on computer graphics and interactive techniques- SIGGRAPH'75, vol 9,no. 1,July 
1975, 9-19. [2] Richard M. Sowar, Interactive computer graphics on CREATE, unpublished technical report, 
SLTR 1-74, School of Systems and Logistics,Air Force Institute of Technology (AU), 1974. 
			</RefA>
