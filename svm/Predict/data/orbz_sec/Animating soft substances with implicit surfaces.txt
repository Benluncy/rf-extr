
 Animating Soft Substances with Implicit Surfaces Mathieu Desbrun Marie-Paule Gascuel iMAGIS*/ IMAG Abstract 
This paper presents a hybrid model for animation of soft inelastic substance which undergo topological 
changes, e.g. separation and fusion and which .t with the objects they are in contact with. The model 
uses a particle system coated with a smooth iso-surface that is used for performing collision detection, 
precise contact modeling and integration of response forces. The animation technique solves three problems 
inherent in implicit modeling. Firstly, local volume controllers are de.ned to insure constant volume 
deformation, even during highly inelastic processes such as splitting or fusion. Sec­ondly, we avoid 
unwanted distance blending between disconnected pieces of the same substance. Finally, we simulate both 
collisions and progressive merging under compression between implicit sur­faces that do not blend together. 
Parameter tuning is facilitated by the layered model and animation is generated at interactive rates. 
Keywords: implicit surface, physics-based animation, inelasticity. 1 Introduction Most deformable models 
in Computer Graphics are dedicated to visco-elastic deformation: objects deform under an external force 
.eld and then progressively come back to their rest shape. Animat­ing highly deformable inelastic substances, 
such as clay, dough or mud, is a more challenging problem. These substances are charac­terized by a smooth 
surface that .ts with the objects it is in con­tact with and can undergo any topological change. One 
can make a hole in it, split a block of substance into several pieces and even merge two pieces together 
by compressing them strongly against each other. During all these deformations the total volume remains 
approximately constant. This paper presents an integrated set of methods for simulating these behaviors. 
 1.1 Previous inelastic models Contrary to elastic objects, the shape of inelastic bodies depends on 
the entire history of applied forces. Terzopoulos et al. [10] use two layers to simulate this behavior: 
an inelastic reference component, that computes motion and absorbs large scale deformations, and an elastic 
layer that represents the difference between the current and reference shapes. The model handles visco-elasticity, 
plasticity and fractures. However, since the lattice used for discretizing equations has a .xed topology, 
the model is restricted to very structured in­elastic objects. Other models [5, 11, 12] use physically-based 
particle systems for modeling a wide range of behaviors, including visco-elasticity, *iMAGIS is a joint 
project of CNRS, INRIA, Institut National Polytech­nique de Grenoble and Universit´e Joseph Fourier. 
Address: BP 53, F-38041 Grenoble cedex 09, France Email: [Mathieu.Desbrun|Marie-Paule.Gascuel]@imag.fr. 
Permission to make digital/hard copy of part or all of this work for personal or classroom use is granted 
without fee provided that copies are not made or distributed for profit or commercial advantage, the 
copyright notice, the title of the publication and its date appear, and notice is given that copying 
is by permission of ACM, Inc. To copy otherwise, to republish, to post on servers, or to redistribute 
to lists, requires prior specific permission and/or a fee. &#38;#169;1995 ACM-0-89791-701-4/95/008 $3.50 
 plasticity, collisions, separation and fusion. The change from stiff material to the quasi-liquid state 
is achieved by adapting the in­teraction laws between particles. However, visualizing the sur­face of 
a substance during animation is dif.cult since particles can change their positions during deformations. 
Therefore, a .xed set of boundary particles cannot be used for surface representation. One solution is 
to display an iso-surface generated by the set of par­ticles [11, 12]. Nevertheless, since this surface 
is only introduced for rendering and is not considered for collision detection, visual anomalies such 
as local inter-penetrations with obstacles or bounc­ing before contact may occur. 1.2 Overview This 
paper presents a new model for interactive animation of smooth soft substances which .t with other objects 
during contact, can be split into pieces and may merge when disconnected components are compressed against 
each other. The model ensures volume preser­vation, performs collision detection and models precise contact 
sur­face and local deformation during collisions. A precise description of the surface of an object is 
maintained throughout the animation and can be used for .nal high quality rendering. Implicit surfaces 
seem to be the best surface representation for smooth bodies that deform over time and may change their 
topol­ogy [13]. Our basic idea, introduced in [2], is to combine particle systems and implicit surfaces 
during the animation. Controlled by the particles as in [11, 12], the implicit surface is animated according 
to the implicit elastic model of [4] that gives it the ability to detect collisions, to deform locally 
for exact contact modeling, and to com­pute precise integration of response forces. These forces are 
trans­mitted to the particles to be subsequently integrated. However, the direct use of this model generates 
a number of anomalies. This paper presents novel and general methods for con­trolling volume variation, 
avoiding unwanted blending effects, and simulation of both collisions and progressive fusion under compres­sion 
of disconnected pieces of the same substance. Section 2 reviews the hybrid model for soft substances 
intro­duced in [2], and discusses its limitations. Section 3 presents our new method for generating constant-volume 
deformations. An algorithm for performing separation without subsequent distance blending is detailed 
in Section 4. Section 5 explains how to process either collision or progressive fusion between surfaces 
that do not blend, according to the amount of compression forces.  2 A Hybrid Model for Soft Substances 
2.1 Combining particles and implicit surfaces The hybrid model we use for modeling soft inelastic bodies 
is com­posed of two layers (see [2]). Motion and large scale deformations are governed by an inelastic 
reference component made of particles, while an elastic implicit layer gives the current shape of an 
object and is used to compute local deformation during collisions. Reference component: As in [5, 12], 
we model inelasticity with a particle system, i.e. a set of mass points Pi subject to both attrac­tion/repulsion 
forces Fint and .uid friction forces Ffr depending on local particle density. In our system, the forces 
applied by particle P1on particle P2are: 8 4 r0 r0 P2-P1 P1. P2)= .- (1) Fint( 2 rrr P1. P2)= µ(r)||P.1-P.2|| 
(P.1-P.2) (2) Ffr( where r =||P2-P1||, .is a parameter for regulating the stiffness of a material, P.i 
is the speed vector of particle Pi,and µis a decreasing continuous function with a restricted scope of 
in.uence. External elastic layer: Implicit surfaces such as distance sur­faces [1, 13] are particularly 
suitable for animating deformable bod­ies capable of splitting and fusion. We use them as a coating over 
a particle system: each particle generates a .eld fi, a smooth de­creasing function of the distance with 
a restricted scope of in.uence, and the surface of an object is de.ned as the set of points P such as 
s f(P)= fi(P)=s, s being a given isovalue. The implicit elastic model of [4] is used to animate the implicit 
surface and for collision detection and response. This model de.nes a simple correspondence between applied 
forces and deformation, the force at a particular point being given by the local variation of the .eld 
value. Exact contact modeling is performed during colli­sions by adding deformation terms to the .elds 
de.ning objects: for objects de.ned by f1=s and f2=s, the respective values of these terms are s - f2and 
s - f1. This generates an exact contact sur­face of equation f1=f2where opposite normal compression forces 
F1.2=-F2.1=(s -f1)N2are applied. At each time step, animation is computed as follows: 1. Compute the 
new position of each particle by integrating the associated equation of motion from the set of applied 
forces. 2. After a pre-detection with bounding boxes, use the implicit surface generated by the particles 
for detecting collisions (test the sample points of an object against the .eld of another one). 3. Avoid 
inter-penetration by generating exact contact surfaces between colliding objects, and compute response 
forces. 4. Distribute response forces between particles that contribute to surface generation in contact 
area. These forces will be used at the next time step.   2.2 Problems to be solved Despite its capability 
of de.ning smooth substances that .t with other objects during contact, this hybrid model generates several 
anomalies. Due to the implicit coating, a piece of substance may undergo very signi.cant volume variation 
during deformations, especially during separation and fusion. The partial solution proposed in [2] is 
far from suf.cient. Firstly, it is based on the choice of a speci.c .eld function2, which is very restrictive 
since both the shape of an object and its stiffness are controlled by this function. Moreover, it gives 
good results near equilibrium states only, so it is of no use for animating large scale deformations 
and topological changes. The second problem concerns the irreversibility of soft substance splitting. 
Two pieces coming back close to each other should not produce the same intermediate shapes than when 
they were discon­nected, i.e. they should not blend before contact [9]. Unfortunately, since they are 
components of the same implicit body, their surfaces locally in.ate and merge. This artifact is related 
to the well-known unwanted blending problem [6, 14], but the dif.culty is intensi­.ed in this case, since 
the desired blending properties for a soft sub­stance are changing with its topology. 3 2This function 
is fi(P)=(r0/r),where r is the distance d(P,Pi)and where r0, introduced in equation (1), is the rest 
distance between particles. Finally, both collision and progressive fusion between soft bodies are to 
be produced, depending on their physical properties and on the amount of compression forces that press 
them against each other. The following sections present solutions to these three problems.  3 Constant 
Volume Deformation Constant volume deformation of .exible models have already drawn some attention [7, 
8]. In the case of objects discretized into lattices of .xed topology, the problem can be solved by using 
con­strained optimization techniques based on Lagrange multipliers. To the authors knowledge, no solution 
has been proposed in the case of soft substances, although volume variations may increase due to topological 
changes such as separation or fusion. This section presents a general method for controlling volume of 
objects de.ned using implicit surfaces. This method is well adapted to the soft substances we are modeling, 
but can also be applied to any other way of animating implicit surfaces. 3.1 Basic ideas Our aim was 
to develop a general method for controlling the volume of an implicit object that does not set any restriction 
on the choice of the .eld function, thus allowing for a wide range of shapes and stiffness to be modeled. 
First of all, a good way of detecting volume variation must be de­ aaa .ned. An implicit volume de.ned 
by V = dxdydz f(P)>=s where P =(x,y,z), cannot be computed analytically for arbitrary .eld functions. 
Discretizing space into voxels can be used for .nd­ing an approximate value. However, this way of detecting 
volume variation would not give us any chance of solving the problem. As illustrated by the example in 
Figure 1, reducing the strength of .eld contributions at step 2 in order to avoid volume variation should 
only be done in the area where the object has been deformed. Thus, volume should be controlled locally. 
step 1 step 2  (a) (b) Figure 1: (a) Volume variation. (b) Local volume control in step 2. Our basic 
idea is to detect the area where the volume is changing, and then adjust the strength of local .elds 
in this area. Thus, a notion of local volume needs to be de.ned. We call the territory Ti of a particle 
Pi the part of the implicit object where its .eld contribution is the highest. Territories form a partition 
of the implicit volume (f(P)= s). Ti ={P . IR/ (f(P)= s) and (.jfi(P)= fj(P))} The local volume Vi associated 
with Pi is the volume of Ti.  3.2 Detecting local volume variation We are looking for an ef.cient way 
of approximating local volume. Since deformation is continuous over time, we can take advantage of temporal 
coherence. This is achieved by maintaining a sampling of territory boundaries throughout the animation. 
Each particle sends a .xed number of points called seeds to sample its territory boundary, in a set of 
distributed directions called seed-axes that are de.ned in the particle local coordinates system (see 
Figure 2). At each animation step, seeds migrate to the surface from their previous position along their 
axis. They stop either when Ti Particle Territories Sampling Ti with seeds Vi approximation Figure 2: 
Particle territories and seeds used for volume approximation. they have reached the isosurface or when 
the preponderant .eld fi becomes smaller than another one. We approximate Vi by the sum of the volumes 
of small pyramids de.ned by seeds (see Figure 2): Vi = Ki d(s,Pi)3 s.Si where Si is the set of seeds 
sent by Pi, and where the factor Ki only depends on the seed repartition chosen for Pi. In practice, 
Ki can be left out in volume computations, since it is suf.cient to maintain s s.Si d(s,Pi)3 at a constant 
level.  3.3 Local volume control We control local volume variation by associating a proportional­derivative 
controller with each particle. Given the current local vol­ume Vi and the initial value Vi,0 to maintain, 
this controller outputs an adequate adjustment of the .eld function fi. For our application, the way 
of modifying fi must be chosen carefully since the norm of its gradient gives the local stiffness of 
an object [4]. In order to adjust the volume of particle territories with­out modifying the physical 
properties of the object, we combine the original .eld function with a translation .i,t. At each time 
step, the .eld, originally de.ned by the decreasing function of the distance fi(P)=hi(d(P,Pi)), is replaced 
by: fi,t =hi (d(P,Pi)-.i,t ). In order to produce steady shape variation, we control the time derivative 
..i,t of the translation parameter rather than its value. The input of the proportional-derivative controller 
consists of the nor­malized volume variation .i,t and its time derivative ..i,t:  Vi,t -Vi,0 .Vi,t -Vi,t-dt 
.i,t =.i,t = Vi,0 Vi,0 dt and its output is: ..i,t = a.i,t +ß..i,t A simple example of volume control 
is given in Figure 3. Figures 5 and 6 show the results obtained during fusion, where volume con­trol 
is essential. Otherwise, very signi.cant and sudden increases of volume would be produced when two soft 
bodies merge. (a) Initial positions (b) Without control: 41% (c) Constant volume of volume increase 
(error under 3%) Figure 3: Volume control during a blending process (a =10.0and ß =1.0).  4 Avoiding 
Unwanted Blending One of the main dif.culties raised by the animation of implicit sur­faces is the avoidance 
of undesirable blending effects between ob­jects. This problem is well known in the case of character 
anima­tion: arms and legs of a character should not blend together, al­though both blend with the body. 
The solution suggested in [14] pre-de.nes a blending graph where a connection between two skele­tons 
indicates that their .eld contributions are to be added. Then, the .eld value at a point P is computed 
by .rst .nding the skeleton with the highest .eld contribution at P, and then adding the contributions 
of neighboring skeletons in the graph3 . The unwanted blending problem is more dif.cult in the case 
of a soft substance splitting into pieces. If two disconnected pieces come back close to each other, 
they will blend at some distance as in Fig­ure 3 rather than colliding because they are considered to 
be parts of the same object. Moreover, since the topology of the substance varies over time, a pre-de.ned 
blending graph cannot be used: the blending properties of the particles change according to the surface 
decomposition into connected components.  Figure 4: The in.uence graph and its connected components. 
Particles Aand B lie in the same component, so their .elds will blend if they come close to each other. 
Therefore, we compute a time-varying blending graph, repre­sented by lists of neighbors called a blending 
list associated with each particle. Processing unwanted blending is achieved by reduc­ing blending lists 
each time the implicit surface breaks into discon­nected components that no longer blend. Before the 
animation, the blending graph is initialized as a complete graph, where each parti­cle is connected to 
all others. Then, at each animation step: 1. For each pair of particles, look if their spheres of in.uence, 
de­.ned by the radius of in.uence of their .eld, intersect. Transi­tive closure of this relation, that 
de.nes an in.uence graph , gives the in.uence connected components (see Figure 4). 2. For each particle, 
remove from its blending list those of the neighbors that are no longer in the same in.uence component. 
 3. Use the blending graph and the .eld function it de.nes for computing seeds migration. Since seeds 
sample the territory boundary of a particle, .elds can be evaluated very ef.ciently: we already know 
which .eld contribution is the highest, so we just have to add the contributions from the neighbors. 
  The soft substances animated with this method split into compo­nents that no longer blend, as shown 
in the three .rst frames in Fig­ure 5. The next section explains how to handle collisions between these 
components, and to enable fusions according to the amount of compression forces and to the properties 
of the substance. Figure 5: Soft substance made of 9 particles grabbed away by pliers and released. 
 3The blending graph must be de.ned with care, otherwise surface discon­tinuities may appear between 
areas where a given skeleton s contribution is still considered, and zones where it is not a neighbor 
anymore. Figure 6: Progressive fusion under compression of two colliding bodies.  5 From Collision 
to Progressive Fusion 5.1 Collision processing Instead of processing collisions between pairs of objects 
as in [2, 4], the collision processing algorithm computes collisions between each pair of particle territories 
such that the .elds of the particles do not blend together. As a result, if a soft substance splits into 
pieces, subsequent collisions will be detected between the pieces. The main problem is to enable collision 
detection between particle territories. The methods for modeling contact and computing colli­sion response, 
reviewed in Section 2, do not need to be modi.ed. The data needed for detecting collisions between implicit 
sur­faces are a bounding box around each of these surfaces and a set of points that sample them. These 
sample points will be tested against the .eld function of another object. In our implementation, we use 
the seeds introduced in Section 3 for both sampling the portion of the surface associated with a particle 
territory Ti and computing a local bounding box around it: A seed is said to be valid if it reaches 
the iso-surface during migration. At each time step, the set of valid seeds associated with Ti gives 
the sample points needed for collision detection.  The axis-parallel bounding box associated with Ti 
is computed from the positions of the valid seeds, and enlarged by the max­imum distance between neighboring 
seeds.  Local bounding boxes are grouped into connected component  boxes to optimize collision detection. 
Valid seeds can also be used for the interactive opaque display of the substance during the animation 
[3]. 5.2 Fusion under compression Blocks of soft substance such as clay or dough merge under com­pression 
forces that exceed a speci.ed threshold. This behavior can be easily simulated with our model. The fusion 
threshold is added as a new parameter in a substance description. Then, each time a collision is computed 
between two bodies made of the same substance, compression forces computed along the contact surface 
between two particle territories are com­pared with the fusion threshold. If the compression exceeds 
it, each particle adds the other one to its blending list. At the next time step, .elds from the two 
bodies will locally blend in this area, while col­lisions will still be computed elsewhere (see Figure 
6). As mentioned in Section 4, the use of a blending graph that is not fully connected may produce discontinuities 
in the implicit sur­face. A solution, introduced in [6], de.nes the .eld value at a point P as the maximum 
.eld from groups of particles that blend together. In our current implementation we obtain the same effect 
by render­ing a substance as a set of implicit components representing these groups. Each component includes 
the area where the groups merge and a union of all components gives the .nal isosurface. However, neither 
of these methods avoids tangent discontinuities in the .nal shape.  6 Conclusions We have presented 
a hybrid model for animation of smooth soft sub­stances that maintain their volume, collide and can undergo 
separa­tion and fusion during animation. Control is facilitated by the lay­ered nature of the model. 
It combines a particle system that mod­els large scale inelastic deformations, an implicit surface that 
gener­ates local deformations during contact and a control module that per­forms local volume preservation. 
Animation is computed and visu­alized at interactive rates. The implicit surface parameters are stored 
at each animation step providing a compact storage of the animation and enabling the direct use of surface/ray 
intersection algorithms for computing .nal high-quality images. The solution developed for local control 
of implicit volumes of­fers a general contribution to the .eld of animation using implicit surfaces. 
For instance, it can be used in character animation, for set­ting user-de.ned volume variation that imitate 
the contraction and dilatation of muscles. We are currently experimenting with a solu­tion to avoid tangent 
discontinuities in the implicit surface when an object is modeled using a blending graph. Acknowledgements 
Many thanks to Jean-Dominique Gascuel for his ef.cient ray-tracing soft­ware, to the reviewers for their 
helpful comments, and to Agata Opalach for carefully re-reading this paper.  References <RefA>[1] Jules Bloomenthal 
and Brian Wyvill. Interactive techniques for im­plicit modeling. Computer Graphics, 24(2):109 116, March 
1990. [2] Mathieu Desbrun and Marie-Paule Gascuel. Highly deformable mate­rial for animation and collision 
processing. In 5th Eurographics Work­shop on Animation and Simulation, Oslo, Norway, September 1994. 
[3] Mathieu Desbrun, Nicolas Tsingos, and Marie-Paule Gascuel. Adap­tive sampling of implicit surfaces 
for interactive modeling and anima­tion. In First International Workshop on Implicit Surfaces, Grenoble, 
France, April 1995. [4] Marie-Paule Gascuel. An implicit formulation for precise contact modeling between 
.exible solids. Computer Graphics, pages 313 320, August 1993. Proceedings of SIGGRAPH 93 (Anaheim, CA). 
[5] Annie Luciani, St´ephane Jimenez, Olivier Raoult, Claude Cadoz, and Jean-Loup Florens. An uni.ed 
view of multitude behaviour, .exibility, plasticity, and fractures: balls, bubbles and agglomerates. 
In IFIP WG 5.10 Working Conference, Tokyo, Japan, April 1991. [6] Agata Opalach and Steve Maddock. Implicit 
surfaces: Appearance, blending and consistency. In Fourth Eurographics Workshop on Ani­mation and Simulation, 
Barcelona, Spain, September 1993. [7] John Platt and Alan Barr. Constraint methods for .exible models. 
Computer Graphics, 22(4):279 288, August 1988. Proceedings of SIGGRAPH 88 (Atlanta, Georgia). [8] Ari 
Rappoport, Alla Sheffer, Daniel Youlus, and Michel Bercovier. Volume-preserving free-form deformations. 
In ACM Solid Model­ing 95, Salt Lake City, Utah, May 1995. [9] Jean-Paul Smets-Solanes. Surfacic textures 
for animated implicit sur­faces: the 2d case. In Fourth Eurographics Workshop on Animation and Simulation, 
Barcelona, Spain, September 1993. [10] Demetri Terzopoulos and Kurt Fleischer. Modeling inelastic defor­mations: 
Viscoelasticity, plasticity, fracture. Computer Graphics, 22(4):269 278, August 1988. Proceedings of 
SIGGRAPH 88 (At­lanta, Georgia). [11] Demetri Terzopoulos, John Platt, and Kurt Fleisher. Heating and 
melt­ing deformable models (from goop to glop). In Graphics Interface 89, pages 219 226, London, Ontario, 
June 1989. [12] David Tonnesen. Modeling liquids and solids using thermal particles. In Graphics Interface 
91, pages 255 262, Calgary, AL, June 1991. [13] Brian Wyvill, Craig McPheeters, and Geoff Wyvill. Animating 
soft objects. The Visual Computer, 2(4):235 242, August 1986. [14] Brian Wyvill and Geoff Wyvill. Field 
functions for implicit surfaces. The Visual Computer, 5:75 82, December 1989.  </RefA>
			
