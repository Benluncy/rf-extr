
 Animating Direct Manipulation Interfaces Bruce H. Thomas Advanced Computing Research Centre School 
of Computer and Information Science  University of South Australia The Levels, SA, Australia 5095 mabht@graceland. 
Levels. UniSA.Edu.Au ABSTRACT If judiciously applied, the techniques of cartoon anima­tion can enhance 
the illusion of direct manipulation that many human computer interfaces strive to present. In particular, 
animation can convey a feeling of substance in the objects that a user manipulates, strengthening the 
sense that real work is being done. This paper sug­gests some techniques that application programmers 
can use to animate direct manipulation interfaces, and it de­scribes tools that programmers can use to 
easily incor­ porate the effects into their code. Our approach is based on suggesting a range of ani­mation 
effects by distorting the view of the manipu­lated object. To explore the idea, we added a warping transformation 
capability to the Interviews user inter­face toolkit and used the new transformation to build a simple 
drawing editor that uses animated feedback. The editor demonstrates the effectiveness of the animation 
for simple operations, and it shows that the technique is practical even on standard workstation hardware. 
KEYWORDS: animation, direct manipulation, graphi­ cal interfaces, warp transformation, user interface 
toolk­ its, InterViews INTRODUCTION Like other recent workers [2], we have set out to ex­plore how techniques 
borrowed from cartoons and com­puter animation can enhance the experience of interact­ing with a computer. 
However, we are not concerned here with portraying animated data, as would be the case when operating 
animation editing tools (such as an algorithm animation editor [15]) or when using anima­tion to supplement 
the presentation of otherwise static information (such as an animated help system [17]). Rather, we wish 
to apply animation to the interface itself to enhance or augment the effectiveness of hu- Permission 
to make digital/hard copies of all or part of this material for personal or classroom use is granted 
without fee provided that the copies are not made or distributed for profit or commercial advantage. 
tht COpy ­right notice, the title of the publication and its date appear, and notice is given that copyright 
is by permission of the ACM, Inc. To copy otherwise, to republish, to post on sewers or to r~distril~ute 
to lists. r~wir~s sPecific permission and/or fee. ~IST 95 Pittsburgh PA USA @ 1995 ACM O-89791-709-x/95/l 
1..$3.50 Paul Calder Department of Computer Science The Flinders University of South Australia GPO Box 
2100, Adelaide, Australia 5001  calder@cs.flinders .edu. au man interaction with applications that 
present a graph­ ical interface. The Problem In his seminal paper [14], Shneiderman identified the essential 
ingredients of direct manipulation: immediate response to actions, incremental changes, and reversible 
effects. Properly applied, these characteristics can con­vince users that they are directly interacting 
with appli­cation data, even though they know it s all an illusion. Central to this illusion, which Brenda 
Laurel calls sus­pension of disbelief [9], is the feedback that the applica­tion generates to track the 
manipulation. Consider the common operation of moving an object by dragging. The application must provide 
continuous feedback during the drag so that the user knows where the object is at all times. Simple feedback 
techniques based on drawing object outlines are cheap to implement but tend to give the impression that 
the operation is happening to a surrogate object rather than the real thing. More ambitious schemes such 
as drawing the full­featured object during the drag gives the object solidity but can still fail to convey 
a sense of substance; somehow it seems too easy to manipulate the object. To be convincing, solid-seeming 
objects must do more than look solid; they must also feel solid. One approach widely used by cartoon 
animators [10] is to use tech­niques that mimic physical effects such as inertia and friction to reinforce 
the illusion of substance. Cartoon objects start moving slowly and come to a gradual stop, they move 
in curves rather than along straight lines, and they stretch and squash to suggest interaction with their 
environment. Although we have not conducted formal user trials, our informal experience is that these 
same techniques can enhance the impression of substance when interacting with application objects. For 
example, if an object is dragged by a corner, it might distort slightly as if it had inertia; if it collides 
with other objects, they might wiggle as if bumped. The overall effect is that the user has a stronger 
sense that things are happening and November 14-17, 1995 UIST 95 that real work is being done. Adding 
animation to the feedback also allows the ap­plication to display more information about the inter­action. 
In addition to the current state of the objects being manipulated, the animation can also suggest the 
direction and rate of change caused by a user s actions, or it can imply the presence of constraints 
that prevent the object from changing. The extra information gives the user a better understanding of 
the results of an ac­tion on an object. These effects can improve the user s satisfaction with the interface, 
but they add to the application program­mer s task. The problem, then, is twofold: to suggest how animation 
can enhance the interactive experience, and to provide tools that programmers can use to easily incorporate 
the effects into their interfaces. Structure of the Paper This paper describes how we have built support 
for ani­mating certain kinds of interactions into the InterViews toolkit [11]. First we describe our 
approach to the prob­lem and illustrate the overall effect of our techniques in the context of a simple 
drawing editor. Then we discuss the additions and changes we made to the InterViews toolkit components, 
suggest how the new and modified components can be used to create animated interactions, and briefly 
outline our implementation to show that the techniques can be successfully applied without special purpose 
graphics hardware. Finally, we describe other work that has considered animation in user interfaces. 
Research Context This work is part of the Prosodic Interfaces project, an ongoing project that aims to 
provide a set of tools and techniques that can improve the prosody of human com­puter interfaces. In 
addition to animation [19, 20], the Prosodic Interfaces project is concerned with sounds and gestures. 
Audible reinforcement can improve engage­ment with the interface and strengthen the sense of di­rect 
manipulation by providing contextual cues and a sense of presence. Gestures can provide a smoother and 
more expressive way of issuing commands and specifying operations. Together, these three techniques will 
extend the repertoire of tools that interface programmers can use to enrich their creations. ANIMATING 
INTERACTION Lay bourne s Anzmutzon Book [10], outlines a basic set of requirements for making a successful 
animation. Al­though developed in the context of film animation, the basic principles also apply to computer 
animation [8]; in both disciplines, animations are created by display­ing sequences of images in rapid 
succession. For interface objects that move spontaneously or along predefine paths, the application of 
Lay bourne s tech­niques is straightforward (Chang and Ungar [5] provide some excellent examples). However 
in the context, of di­ rect manipulation, where users are in control of object movements, application 
programmers are faced with a dilemma: the need for immediate and accurate response to user actions is 
at odds with the need for objects to have realistic-seeming behaviour. If a user tries to drag an object 
rapidly across the screen, for example, how should the application represent the inertia of an object 
resisting its movement? Or if a user tries to move an ob­ ject that is fixed in position, how should 
the application suggest the restraint? Our Approach Our approach is to consider how a cartoon animator 
would depict such behaviour. For example, to suggest movement caused by someone dragging an object, an 
animator could show the object distorted in the direc­tion of the pull. To suggest an attempt, to move 
a fixed object, the animator could show the object, leaning in the direction of the pull while its base 
stays fixed in place. With techniques like these, an application can create the illusion of a greater 
sense of substance for its objects while still allowing users to feel that they are in control. Chang 
and Ungar list three principles that, apply to car­toon animation: the principles of solidity, exaggeration, 
and reinforcement. To these, we add two more that should also apply when animating a direct, manipula­tion 
interface: 1. The principle of attacl~ment states that, the object being manipulated should at all times 
remain attached to the pointer. 2. The principle of reluctance states that objects are, in general, 
reluctant to change.  Adherence to the principle of attachment maintains the impression that the user 
is always in control of the ac­tion. Adherence to the principle of reluctance reinforces the illusion 
of substance by suggesting that changing objects requires effort on the part of the user. Demonstrating 
the Effect We have applied these principles to the task of animat­ ing the interaction with graphical 
objects in a slrnple drawing editor. The editor supports the creation of simple figures such as lines 
and polygons, aud it allows simple editing operations such as moving, scaling, and rotating. Figure 1 
shows a screen image of the editor being used to move an object. Figure 2 shows how the editor animates 
a move opera­tion on a rectangle. Of course, these static images can­not fully convey the dynamic feel 
of the interaction; we  UIST 95 November 14-17, 1995 Figure 1: The animated editor in action . .,,. 
  r . ,,,, ..,, ,, ,,,$.. ~ .,.. I, l : !. ! ET I  o,$: . , ,,, ,. +-. . II ii i ,. ---! I ~___ ,,, 
,4 ...- ! . ,,. ..-.. ,,,,.. ,, - - I_. ,,, . .-.:, , _ .-- --~ . .. .!. . .,,; .. -, ,,--, ,, ~, I ,, 
 ;: t ,: , ~ :_, -,,,> .: ~ . ,,.,.l.,_- w _:: Figure 2: Animating a move operation have superimposed 
several successive frames from the interaction to suggest the effect. The top of the fig­ure shows the 
operation without the animation effect; the rectangle merely moves to follow the mouse. The bottom shows 
the operation with animation; note how the corner of the rectangle stays attached to the mouse point 
while the bulk of the object lags slightly behind. In operation, the effect is that of manipulating a 
heavy rubbery object that distorts as it is pushed and pulled. . ,,, ,.,., f, ,. ,: .: ,; 11 $, , ,, 
1$ 1 ., ,1 !, !: , ,, : !,,, .. . .. . .-. . , -----------­\ Figure 3: Animating a scaling operation 
.,:, .: f-~?. 1! ,, .  :>---J , Figure 4: Animating a rotate operation The same kind of effect works 
for other common editor operations. For example, figure 3 illustrates a scaling operation, and figure 
4 shows a rotation. In each case, the editor uses the same strategy to animate the in­teraction; the 
part of the object that is (grabbed is controlled by the mouse, while the bulk of the object lags behind. 
(For the scaling operation, we use an effect that suggests that all corners are simultaneously under 
the control of the mouse.) The editor also supports simple constraining effects that show how animation 
can convey extra information about the interaction. Consider, for example, an attempt to move an object 
that is fixed in place. One response to this attempt might simply be to prevent the object from following 
the mouse. However, this lack of visible feed­back might be misinterpreted as the result of a failure 
to grasp the object correctly. A user might make several attempts at the operation before realising the 
true cause of the lack of response. Another strategy might, be to allow the object to follow the mouse, 
but then to snap it back to its original place when released. This approach avoids the problem with lack 
of feedback, but can lead to surprises when a carefully placed object suddenly jumps back. Figure 5 shows 
how our editor avoids both problems us­ing animation. As the user attempts to drag the pinned November 
14-17, 1995 UIST 95 v ;# .,!.. . .. .,-. . .,, e, , , .,! ,,,,. , ,, P.*** W,,,.,,,+,.. !,, ~ Figure 
5: Attempting to move a pinned object object, the grab point stays attached to the mouse but the bulk 
of the object stays fixed. The effect is as if user is pulling on a corner of an object that is anchored 
in place. The feedback makes it clear that the user is attempting to move the object, but that the attempt 
will not succeed. When the grab point is released, the object will spring back to its original shape. 
The same effect can suggest other constraints on objects. For example, figure 6 shows the effect of moving 
an ob­ject under the influence of a (gravity field that causes the object to snap to a regular grid. 
As the user pulls the object away from a grid point, the grasped corner stretches while the object stays 
fixed. When pulled be­yond a certain distance, the gravity suddenly lets go and the object snaps to the 
next grid point. Again, the feedback makes it clear what the current state of the in­teraction is, what 
the user must do to achieve the desired result, and what will happen if the object is released at any 
time. MAKING IT EASY TO USE To make the animation effects easy to generate, we in­corporated them into 
an existing user interface toolkit. We chose the InterViews toolkit [11] because it has a powerful graphics 
model that we could extend to include the new effect. The Model One way to suggest interaction with 
physical objects would be to represent the objects with a physical model and the interaction as forces 
acting on the objects. Then the responses of the objects could be determined by sim­ulating the physical 
system. However, our experience is that a much simpler model is sufficient to produce the effect we want. 
Figure 6: Moving under the influence of gravity Our approach is to draw the manipulated objects as usual, 
but to warp the coordinate system of the drawing surface so that the view appears distorted. The effect 
is as if the objects were drawn onto a rubber sheet, and the sheet was then stretched by pulling at certain 
points. (The technique is widely used to distort images [22].) We implement the warp as a transformation 
applied to all underlying drawing primitives. To suggest the effect of moving a rectangle, for example, 
our editor determines an appropriate warping transfor­mation, applies it to the drawing system, then 
proceeds to draw the object as a simple rectangle. When the rect­angle is displayed on the screen, it 
will appear distorted. Apart from its simplicity, this approach has two key advantages when compared 
with an approach based on a physical model: the code that draws the warped objects is unaffected by (indeed, 
is unaware of) the presence of the warp; and the effect will apply as well to more complex graphics as 
to a simple rectangle. Computing the Warp Vectors Our warping transformation is characterised by a set 
of bound vectors that describe the transformations applied to key points in the coordinate space. Transformations 
for points that do not coincide with vectors are calcu­lated by interpolating between the vectors. Figure 
7 illustrates the idea; a later section describes the calcu­lation in detail. In the example, grid points 
that coincide with warp vec­ tors are transformed by the specified amounts. Other points are transformed 
by intermediate amounts that depend on their relative distances from the specified vec­ tors. To add 
animation to the interaction, then, the editor need only calculate a set of vectors that characterise 
an appropriate warp. We have found that, for the kinds UIST 95 November 14-17, 1995 of shapes and operations 
we have investigated, a simple algorithm gives very convincing results. For each frame in the interaction, 
we calculate the warping vectors as follows: 1. Compute the new positions of the vertexes of the shape 
as usual. 2. Place a zero magnitude vector at the vertex that is grasped by the mouse. 3. Place a vector 
at each other vertex that points back to the position of that vertex in the previous frame.  Figure 
8 shows the idea for move and rotate operations. The dashed outlines show a rectangle at its old and 
new positions. The dots represent the zero vectors at the mouse point (in both cases, the rectangle has 
been grasped by its top right corner), and the arrows show the positions and sizes of the other warp 
vectors. Fi­nally, the solid strokes show the shape of the distorted rectangle that will be drawn under 
the warped transfor­mation. Although the effect does not correspond exactly to a physical model, this 
simple algorithm gives the impres­ sion that the shape is made of elastic material, with weights attached 
to the vertexes that cause them to lag behind the movement. Extending interviews We implemented our 
warping model as an extension to the InterViews user interface toolkit. Specifically, we ex­tended the 
InterViews drawing model by adding a new kind of transformation: a warp transformation. Since all drawing 
in InterViews is subject to coordinate transfor­mation, this one addition was sufficient to add warping 
capabilities to all InterViews objects. The original Transformer object supported only affine transformations 
such as rotation, scaling, and transla­tion. Figure 9 shows part of the class interface, together with 
the method that we added to support the new warping transformation. . . . . . . . . new . . . . . ! , 
, , , ,! ! . . . . . . . . . . . . . . . . . . . . . . . . . . , ... .. Figure 8: Calculating warp vectors 
for move and rotate class Transformer . . . { public: ... void rotate (float a) ; void scale (float 
x, float y) ; void translat e(Coord x, Coord y) ; void warp (Warp&#38; w) ; // new method ... void transf 
orm(Coord&#38; x, Coord&#38; y) ;  1; Figure 9: Extension to Transformer class November 14-17, 1995 
UIST 95 most common case), but it allows for arbitrary transfor­ class Warp { public: void Warpo; virtual 
void add_vector ( Coord x, Coord y, Coord VX, Coord vy ); }; Figure 10: The new Warp class Transformer 
t; Warp u; w.add_vector(100, 80, 0, O); w.add_vector(O, 80, -10, -10); w.add_vector(O, O, -10, -10); 
w.add_vector(100, O, -10, -10); t.warp(&#38;w); Figure 11: Applying a warp for a move operation The 
new Warp class represents a set of warp vectors; figure 10 shows the interface. A Warp object initially 
contains no vectors; calling Warp: :add.vector adds a vector positioned at the point (z,g) and with compo­nents 
vx and vy. For example, figure 11 shows how the transformation effect of figure 8could reachieved. Conceptually, 
a Transformer represents a succession of discrete mapping steps applied one after the other. For example, 
a Transformer might represent a scaling fol­lowed by a translation followed by a rotation. One char­acteristic 
of affine mappings is that they can be com­puted as matrix products in a homogeneous coordinate system; 
as a consequence, any sequence ofaffine map­pings can be represented as a single matrix operation. Because 
of this property, the original Transformer stored only a single 3 x 2 matrix; successive transformations 
on the Transformer modified the matrix to reflect the new aggregate operation. However, the warp mapping 
isnot affine, andso combi­nations of transformations that involve warping cannot be represented as a 
single matrix. We modified the im­plementation of the Transformer class so that it keeps a list of transformation 
items; successive affine transfor­mations are combined into a single matrix item as be­fore, while warp 
transformations are represented by indi­vidual warp items. The new Transformer: : transform method iterates 
through the list of items applying each transformation in turn. This implementation retains the efficiency 
of the original implementation if the Trans­former represents only affine transformations (by far the 
mations when necessary. This generalisation of the Transformer class suggests how even more kinds of 
transformations could be incor­porated into the InterViews graphics model, although we have not implemented 
any at this stage. For ex­ample, imagine a vanishing point transformation that could be used to suggest 
perspective drawings, or a fish­eye transformation that displays objects under non­uniform scaling. MAKING 
IT WORK In addition to the new Warp class, adding the new warp transformation to InterViews required 
minor changes to the InterViews drawing code. However, our additions do not affect existing InterViews 
components, such as glyphs, that use the drawing operations. These compo­nents can be used as-is and 
get the full benefit of the warping operations. The Warp Transformation Algorithm Our implementation 
of the warp transformation com­putes for each transform point a displacement vector that is a weighted 
average of the warp vectorsl. For a point q and a set of warp vectors pi (each defined by a location 
pi{ and a displacement p~d), we compute the transformed point q as follows: n q = q+ ~ Wqipid i.=1 where 
Cqi Wqi= ~ E Cqj j=l and Cqi = l/lq pil[ The coefficient cqi represents the closeness of the point q 
to the transform vector Pil; in our current implemen­tation, we compute closeness as the reciprocal of 
the distance between q and pil (the undefined case when the distance is zero is treated specially). This 
formula­tion ensures that the vector weights remain in the range [0, 1], and that the sum of the weights 
is 1. Apart from its simplicity and relative efficiency (the al­gorithm has complexity O(n) for n warp 
vectors), our implementation of the warp leads to several properties 10ur colleague Murk Bottema suggested 
the algorithm.  UIST 95 November 14-17, 1995 that simplify the selection of a suitable set of vectors 
for a desired warp effect: 1. Points coincident with one of the warp vectors are displaced by the amount 
of that vector. 2. Points equidistant from two vectors are affected equally by those vectors. 3. In 
the limit, the combined affect of distant vectors approaches the vector average.  To understand why 
these properties hold, consider the behaviour of the vector weights as q varies. If q ap­ proaches one 
of the vector locations, pli, then Cgi grows without bound; thus Wqi approaches 1 while all other weights 
approach O. In the limit, when q is coincident with pl i only that vector will affect the transformation. 
Conversely, if q becomes very distant from all vectors compared with the distance between the vectors, 
then all Cq, become equal and thus all Wqa approach l/rr. Drawing The InterViews drawing model is implemented 
by the Canvas class, which defines an interface to a set of draw­ ing operations that are similar to 
those of PostScript [7]. Canvas supports two basic forms of drawing: stroked and filled figures (which 
are based on PostScript-like paths); and stencils, images, and text (which are based on bitmapped images). 
Extending Canvas to draw path-based figures under the warping transformation required only a slight mollifi­ 
cation. Atfine transformations have the property that straight lines remain straight after transformation. 
To draw a straight path segment, therefore, the original Canvas had merely to transform the segment end 
points and draw a line between the new points. Because the warping transformation is non-a fine, we can 
no longer make that assumption. Instead, we use an algorithm that recursively bisects the segment until 
the warped sections can be approximated by straight lines. Drawing image-based graphics is more difficult. 
The original Canvas implementation built transformed im­ ages and used a standard back-transformation 
scheme to populate the transformed image with data from the orig­ inal image. However, we can not use 
this approach for warp transformations because the warp transformation does not, in general, have an 
inverse. Instead, we com­ pute an approximation to the warped image by trans­ forming the coordinates 
of each pixel in the original im­ age and filling the corresponding area in the transformed image. Our 
current algorithm is slow and produces poor results under some warp conditions, but it is sufficient 
to demonstrate the effect of the warp. We are investigating solutions to this problem, such as other 
techniques that have been used for warping images [22]. Performance Issues Drawing warped graphics is 
necessarily more expensive than drawing non-warped graphics because of the addi­tional transformation 
step and because certain assump­tions about properties of the distorted view (such as the straightness 
of straight lines) no longer hold. How­ever, our experience is that even a straightforward im­plementation 
of the algorithms on standard worksta­tion hardware has adequate performance. For example, when we ran 
our editor (a standard Xl 1 client) on a Sparcstation 2 with no special graphics hardware, we achieved 
animation frame rates of around 10 per second for simple objects, even when the Xl 1 connection was carried 
on a moderately loaded ethernet to a separate server. Nevertheless, we have investigated a range of approaches 
for speeding the calculation of the warping transfornla­tion and the generation of the drawing algorithms 
for common conditions. These techniques will be important, when drawing complex objects, or to maintain 
adequate animation frame rates on heavily loaded systems. One class of warp transformation speedup that, 
we have implemented relies on symmetries in the war-p vectors. The idea is to look for equal magnitude 
warp vectors at the time the transformation is applied. In such cases, some of the computation of the 
transformation displace­ment is redundant and can be avoided. Since the warp vectors we use for common 
manipulations often have equal magnitudes, the benefit can be significant. For example, consider the 
warp vectors for a move oper­ation (figure 12). Since Ipl I = O and pz = p~ = p.I = P, the computation 
of the transformation simplifies as fol­lows: n q + ~ wqiF)i ;=1 n = q = !7+ Wqlpl + ~ Wqin i=2 n  q+o+P~wqi 
iE2 = q+ P(wqz + wq3 + %4) Although the complexity of the algorithm remains lin­ear in the number of 
vectors, the simpler computation reduces the number of arithmetic operations. For rotat­ing and scaling, 
some simplification occurs although the symmetries are fewer and thus the benefit less. Another technique 
that we have investigated is the sub­stitution of a more easily drawn shape for the warped November 14-17, 
1995 UIST 95 L 1, . . ......... .. //  P3 P4 Figure 12: Symmetry of Translation Vectors figures of path-based 
graphics [21]. One idea is to sub­stitute a Bezier curve for each segment of a warped path, then draw 
the curve as if no warping were present. In this way, we only incur the cost of the warping transfor­mation 
when calculating the control points of the curve, a considerable saving over the usual cost of computing 
the transformation at many in-between points. For example, if a warped path segment were represented 
as a cubic Bezier curve, we would compute only 4 warp transformations (the end points and two control 
points) instead of the many transformations that the true warp­ ing algorithm would typically need. 
The approach works reasonably well under mild warp conditions, but the approximation of the Bezier curve 
to the warped curve degenerates for severe warps, which Ieads to unsatisfactory visual artifacts (such 
as coinci­dent points not remaining coincident ). We are investi­gating modifications to the technique, 
such as approxi­mating path segments with several Bezier curves, that promise a compromise between performance 
and accu­racy. RELATED WORK This section describes other work that has influenced our thinking in relation 
to the application of animation to interfaces. The material is arranged in three categories: an overview 
of the basic animation process and how it applies to graphical interfaces; a look at some systems that 
incorporate animation into their interfaces; and a presentation of other graphical interface toolkits 
that include support for animation. Basic Animation Techniques In her book Computers as Theaire [9], 
Laurel argues that the computer and human are active agents work­ing together to achieve some common 
goal, and that it is the goal of the designer of an application s interface to facilitate the agents 
in their effort to collaborate as closely as possible. Laurel advocates the use of dramatic techniques 
to engage the interest and participation of the human agent. Animation can be used to enhance some of 
these dramatic effects; for example the effect of suspended dtsbeltef is improved if the graphics of 
an interface move in a smooth and realistic fashion. This smooth motion is closer to the human agent 
s expectat­ions of the physical world, which leads to an increased willingness to accept what is shown 
on the screen. Lasseter considered how to apply basic animation tech­niques to computer animation in 
his paper Principles of Traditional Animation Applted to 3D Computer ArL ­imution [8]. He lists a set 
of 11 principles: stretch and squash, anticipation, timing, staging, overlapping and follow through action, 
straight ahead and pose-to-pose action, slow-in and slow-out, arcs, exaggeration, sec­ondary action, 
and appeal. Along with many others, we have adopted these principles as the basis of our an­imations. 
In their article Animation ut the Interface [2], Baecker and Small outline several roles animation can 
play: an­imation of structure, animation of process, and ani­mation of function. By their taxonomy, this 
paper is concerned with animation of function, and with mak­ing interfaces more comprehensible. Our technique 
for animated feedback for direct manipulation is akin to their notion of animation as feedback, although 
they are chiefly concerned with feedback for system status monitoring whereas we are concerned with feedback 
for interactive operations. Systems that use animation The work of Card, Robertson, and Mackinlay in 
the area of three dimensional information visualization relies heavily on good interactive animation. 
In particular, the cone tree [13] and the perspective wall [12] show how interactive animation can shift, 
the user s processing load from the cognitive to the perceptive system. The Self programming environment 
supports cartoon­style animation techniques. Chang and Ungar [5] de­scribe how Self uses solid drawing, 
squash and stretch, motion blur, dissolves, anticipation, follow through, slow in and slow out, and arcs 
to strengthen the impression that programmers are manipulating solid objects. One of the goals of the 
system was its practical implementa­tion on current technology; they use colourmap anima­tion techniques 
to achieve sufficiently high refresh rates, but only at the expense of a limited choice of colours and 
types of animation. Several workers, including Sukaviriya and Foley [17] and Bharat and Sukaviriya [4], 
have explored animation in the context of an on-line help system. These studies have shown that animation 
helped convey information more quickly and accurately. Baecker, Small, and Man­der used animated icons 
[3], which offered animated help about the nature and use of the programs attached to the icons. 10 
UIST 95 November 14-17, 1995 Finally, HyperCard [1] uses some simple animation tech-as colour) can be 
profound. On the one hand, this in­niques to help smooth the transitions between states, fluence suggests 
that great improvements are possible; The system offers several mechanisms for stack builders on the 
other hand, it warns that equally great disasters to use to animate switching between cards, including 
can happen. Just as there are good and bad uses of dissolves, iris-like resizing, and panning from one 
card colour, so there are good and bad uses of animation. In­to another. appropriately applied, animation 
will seem childish and drive users away. But sensibly applied, it, can make an Toolkits that support 
animation interface more graceful and enjoyable to use. Artkit [6] offers application programmers a 
choice of animation techniques such as simple motion blurring, ACKNOWLEDGEMENTS squash and stretch, arcing 
trajectories, anticipation and This work has been supported in part by a grant from follow through, and 
slow-in slow-out transitions. In ad-the Flinders University Board of Research. We thank dition, it uses 
pacing functions to control timing aspects the members of the TGI research group at, Flinders for of 
the animation effects. These functions allow the pro-providing a stimulating context for this work, and 
the grammer to map the speed of a graphical object along anonymous reviewers for comments that, helped 
improve a curved path to a non-linear time function. the presentation of this paper. REFERENCES <RefA>taining 
the frame rate of an animation when there are 1. W. Atkinson. HyperCard. Apple Computers Inc., insufficient 
computational resources to fully draw com-Pacers [18] address the problem of automatically main­ 1987. 
plex graphics and respond to user input in a timely fash­ 2. Ronald Baecker and Ian Small. Animation 
at ion. Pacers dynamically adapt the presentation quality the interface. In Brenda Laurel, editor, The 
Art of the graphics depending on available resources. For of Human-Computer Interface Design. Addison­example, 
if there is insufficient time to draw a solid ob-Wesley Publishing Co., Reading, MA, 1990. ject, the 
pacer might omit fine grained detail or draw an object outline instead 3. Ronald Baecker, Ian Small, 
and Richard Mander. Bringing icons to life. In Proceedings of ACM The IRIS Inventor [16] is a high-end 
toolkit with full­CHI 91 Conference on Humun Factors In Coli!pnt ­ scale rendering and real-time animation. 
However, its ing Systems, pages 1 6, 1991. primary goal is to support 3D interactive applications on 
high-performance graphics workstations; it is not de-4. Krishna Bharat and Piyawadee Sukaviriya. Ani­signed 
as a graphical user interface toolkit. mating user interfaces using animation servers. In Proceedings 
of the ACM SIG GRAPH Symposautn CONCLUSIONS on User Interface Sofiwur-e and Technology, pages This work 
makes three contributions to the field of ani-69-79, 1991. mation in graphical interfaces: .5. Bay-Wei 
Chang and David Unger. Animation: From cartoons to the user interface. In Proceerl-It shows how effects 
based on cartoon animation prin-ings of the ACM SIG GRAPH Sympostum on User ciples can be used to enhance 
the illusion of direct ma-Interface Soflwure unrt Technology, pages 45-55, nipulation by strengthening 
the impression that users 1991. are manipulating real objects. 6. Scott E. Hudson and John T. Stasko. 
Animation support in a user interface toolkit: Flexible, robust, 2. It defines a new geometric transformation 
operation and reusable abstractions. In Proceedings of thebased on a set of warp vectors that application 
pro-ACM SIG GRAPH Symposium on User Int erfucegrammers can use to incorporate animation effects software 
und Technology, pages 57-67, 1991. into their interfaces, and it describes how the new transformation 
was incorporated into the underlying 7. Adobe Systems Incorporated. PostScript Lunyuuge graphics model 
of an existing user interface toolkit. Reference Manuel. Addison-Wesley, Reading, Mas­sachusetts, 1985. 
 3. It demonstrates that the cost of drawing animated feedback need not be prohibitive, and that good 
re-8. John Lasseter. Principles of traditional animation suits can be achieved even on standard workstation 
applied to 3D computer graphics. In SIGGRAPH hardware. 87 , pages 35-44, Anaheim, CA, July 1987. ACM, 
ACM Press. The effects of animation on the user s perception of the 9. Brenda Laurel. Computers us Theutre. 
Addison­interface (like the effects of other aesthetic elements such Wesley Publishing Co., Reading, 
MA, 1991. .. November 14-17, 1995 UIST 95 11 10. Kit Laybourne. The Animation Book. Crown Pub­lishers, 
Inc., New York, NY, 1979. 11. Mark A. Linton, John M. Vlissides, and Paul R. Calder. Composing user 
interfaces with InterViews. IEEE Computer, pages 8-22, February 1989.  12 Jock D. Mackinlay, George 
G. Robertson, and Stu­art K. Card. The Perspective Wall: Detail and con­text smoothly integrated. In 
Proceedings of A CM CHI 91 Conference on Human Fuctors in Comput­ing Systems, pages 173 179, 1991. 13, 
George G. Robertson, Jock D. Mackinlay, and Stu­art K. Card. Cone trees: Animated 3D visualiza­tions 
of hierarchical information. In Proceedings of ACM CHI 91 Conference on Human Factors in Computing Systems, 
pages 189-194, 1991. 14< Ben Shneiderman. Direct manipulation: A step beyond programming languages. IEEE 
Computer, pages 57 69, August 1983. 15. John T. Stasko. TANGO: A framework and sys­tem for algorithm 
animation. IEEE Computer, 23(9):27-39, September 1990. 16. Paul S. Strauss. IRIS Inventor, a 3D graphics 
toolkit. In Andreas Paepcke, editor, 00PSLA 93, pages 192-200, Washington D. C., October 1993. ACM, ACM 
Press.  17. Piyawadee Sukaviriya and James D. Foley. Cou­pling a UI framework with automatic generation 
of context-sensitive animated help. In Proceedings of the ACM SIG GRAPH Symposi,urn on User Ir~ter­face 
Soflware and Technology, pages 152-166,1990. 18. Steven H. Tang and Mark A. Linton. Pacers: Time­elastic 
objects. In Proceedings of the ACM SIG-GRAPH Symposium on User Interface S(jfiwure and Technologyl pages 
35 43, 1991. 19. Bruce H. Thomas and Paul R. Calder. An animated widget kit for InterViews. In Proc. 
Computer Hu­man Interaction Special Interest Group of the Er­gonomics Society of Australia, OZCHI ~4, 
pages 203-208, Melbourne, Nov 1994. 20. Bruce H. Thomas and Paul R. Calder. Ani­mating widgets in the 
InterViews toolkit. In Proc. The 1995 East-West Intern utzonu[ Confer­ence on Human-Computer Interaction, 
pages 88 107, Moscow, Russia, Jul 1995. 21. Bruce H. Thomas and Paul R. Calder. Graphi­cal feedback 
for direct manipulation of simple poly­gons. Technical Report CIS-95-007, School of Com­puter and Information 
Science, University of South Australia, February 1995. 22. George Wolberg. Digital Image Wurping. IEEE 
Computer Society Press, Los Alamitos, CA USA, 1992.  UIST 95 November 14-17, 1995  </RefA>
			
