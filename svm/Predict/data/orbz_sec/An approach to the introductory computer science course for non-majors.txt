
 An Approach to the Introductory Computer Science Course for Non-Majors Dr. Robert N. Cook Computer 
Science Area Central Michigan University The course described in this paper is intended for students 
who are not major- ing in computer science or mathematics. In a typical semester students majoring in 
such diverse fields as dietetics, soc- iology, psycnology~ elementary education, accounting, broadcasting, 
physical educa- tion, music, industrial technology, english, business administration, chemis- try and 
secretarial scienae are enrolled in the course. Virtually the only common element in the background of 
the students enrolled in the course is their lack of a previous university course in either math- ematics 
or computeT science. The highest level of mathematical education that may be expected is fi=sr year high 
~chool a~- gebra; occasionally eve~L that expectation is too high. 4 For students wmth this background 
many of the available textbooks are not satisfactory. This paper will attempt to further clarify the 
nature of the course by stating its objectives, by discussing the choice of a language for the course, 
by discussing what topics normally included in available textbooks are not desirable, and finally by 
suggest- ing topics which are desirable in an intro- ductory course for non-majors. Objective of the 
Course Basically the objective of the course is to impart sufficient skills to the stu- dents so that 
they can use the digital computer effectively to solve problems which will occur in later courses or 
~ro- jects which they may undertake in thelr major field of study. In the process of meeting this objective 
many other second- ary objectives may be met. The student may gain an understanding of just what a computer 
is capable of doing effectively and what it is not capable of doing.10 The student's awareness of social 
impli- cations and the impact of computers on society may be enhanced in some of the applications studied, 
although this is not a primary objective of the course. A collateral objective is to demonstrate to the 
students that one need not be either a mathematician or a computer scientist in order to solve meaningful 
problems by means of a digital computer. The object- ive in presenting applications in a wide variety 
of areas is to expand the stu- dent's awareness of the myriad ways in which computers can be applied 
to the solution of modern day problems, as well as to demonstrate the process of algorith- mic development 
and general problem solv- ing techniques. The Choice of a Language Much has been written concerning 
the language to be used in the f~rst course for computer science majors. ,6,9 Much of this discussion 
is undoubtedly rele- vant here with perhaps a slightly differ- ent emphasis. Some of the choices of a 
language for the course are ALGOL, APL, Assembly Language, BASIC, COBOL, FORTRAN, PL/I, and their various 
dialects. Cri- teria to be applied in selecting the language to use include: i. wide availability 2. 
ease of learning  3. applicability to a wide class of problems  4. accessibility on time sharing systems 
 5. availability of an easy to use on line editor.  Assembly language, although of great importance 
to computer science majors, must be disqualified for this course under criteria 2. COBOL must be eli- 
minated under criteria 3 as being inappli- cable to many typesrof problems and under criteria 2. Any 
of the remaining langu- ages could probably be selected and de- fended using the stated criteria. Applying 
the criteria and consider- ing the background of the students, BASIC was chosen. II The particular dialect 
of BASIC available at CMU (University of Maryland UBASIC) eliminates some of the deficiencies normally 
found in most ver- sions of BASIC. For example, IF-THEN- ELSE, WHILE, and UNTIL statements are available 
as well as various other ex- tensions to "standard" BAgKC. In addition, 30 the MAT statements simplify 
input/output of arrays and enable the student to per- form matrix operations easily. What not to Include 
 Many of the standard topics included in introductory textbooks intended pri- marily for computer science 
majors are not suitable for a course designed for non-majors. Foremost among the topics of little relevance 
and even less interest is assembly language or machine language. 3 Although we may enjoy demonstrating 
what is an almost unintelligable language to the students, the temptation is well worth resisting. Most 
students in this course have an almost unbounded disinterest in the "inner workings" of the computer 
or in studying programming examples in a low level language. A similar lack of enthusiasm is found among 
students in this course for another topic almost universally found in intro- ductory texts, namely number 
systems and binary/octal/hex arithmetic. Again, if we can resist the temptation to dazzle the students 
with our arithmetic prowess in hex and binary operations and conver- sions from one base to another, 
more time will be available to cover subjects which are relevant to the objectives of the course. A 
detailed discussion of the various codes used internally in computer systems (ASCII, BCD, EBCDIC, etc.) 
is equally irrelevant to the objectives of the course. A discussion of one of the common codes as used 
to represent alphabetic char- acters can perhaps enhance a discussion of alphabetic sorts. While computer 
science majors should be exposed to the physical character- istics and design of the Nardware, non- majors 
need not study the relative ad- vantages of chain printers, for example. The only I/0 hardware most students 
in this course are likely to use is a Tele- type or similar device. The criteria to be applied to the 
various other topics normally included in introductory texts should be whether or not the topic contributes 
to the basic objective of the course. Namely does the topic enhance the student's ability to solve problems 
by means of a digital computer. Topics to Include By omitting many of the topics nor- mally found in 
introductory courses for majors, such as the topics mentioned pre- viously, the concepts of problem solving 
and algorithmic development may be stressed.2,6, 12 In connection with these concepts the use of flowcharts 
as an aid to algorithmic development and program planning may be presented. After dis- cussing general 
problem solving, the BASIC language may be covered omitting some of the "advanced" topics which are introduced 
as needed in the applications. Various application areas which may be discussed after covering problem 
solving and BASIC include information processing, character string manipulation, mathematical methods, 
simulation, puzzle solving, artificial intelligence, education (CAI), and ecology. This wide variety 
of applications enhances the student's understanding of how the computer may be utilized in their parti- 
cular field of study. If possible, one programming assignment should be made in each of the application 
areas. Normally I0 programming assignments plus i or 2 extra credit programming assignments are made. 
 Three basic problem solving phases can be discussed: analysis of the pro- blem, design of the algorithm 
to solve the problem, and implementation of the algorithm in BASIC. The reader is ad- vised to consult 
reference 12 for a com- plete discussion of these phases or pro- blem solving and their components. By 
discussing the general problem solving method first, the method can then be used in the applications 
which follow to pre- sent the applications logically as well as to reinforce the students understanding 
of the problem solving process itself. In conjunction with problem solving and algorithmic development, 
flowcharting is introduced. Most introductory books do a satisfactory job of flowcharting decision statements, 
assignment statements, subroutine calls,I/0 operations, transfers, and connectors. Loops, on the other 
hand, are seldom flowcharted in a fashion that is easy for students to understand. A common method is 
to put the FOR statement in one box and the NEXT statement in a separate box, as they appear in the pro- 
gram. This has the advantage that the flowchart parallels the program, but the structure of nested loops 
in the algorithm is not clear to the student. Another approach is to flowchart the loop as its four components: 
initialization, testing, incrementing, and the body of the loop, with each having its own symbol. . 
L =IX~ 5 | FOR X=5.5 TO 8.5 STEP 0.5 Body NEXT X r~ L [ B?dy ] T-fx + 05, Figure 1-Flowchart of Loop 
Components  51 Figure I illustrates this method. This method has the advantage that all components 
of the loop are highly visable. The disadvantage is that nested loops appear needlessly complicated to 
the stu- dents. The symbol used in this course is the symbol used by Galler 5, although any other symbol 
in which all of the compon- ents of the loop appear in one box would do as well. Figure 2 shows this 
symbol. Using this symbol the nature of nested loops is clarified and the problem of having the components 
of the loops dis- tributed all over the flowchart so that the loops are difficult to identify is eliminated. 
By identifying the X = 5.5 portion as the FOR statement and the X = X + 0.5 portion as the NEXT statement, 
 the student can relate the algorithm flow- chart directly to the BASIC program. The whole problem could 
be eliminated by the use of structed flowcharts, which is pro- bably the long range solution. Applications 
comprise at least 50% of the course once problem solving, flow- charting, and BASIC syntax have been 
covered. Each application should be pre- sented in the format of the phases of problem solving (analysis, 
design of the algorithm, and BASIC implementation). The algorithm is shown by means of a detailed flowchart 
from which the program is written. Presenting the algorithms with- out the flowchart, as is done in many 
books, make the overall organization of the al- gorithm difficult for the students to com- prehend. In 
fact, if the algorithm and its flowchart are presented clearly, some of the BASIC implementations may 
well be left to the student as exercises. Information processing and busine~ applications may include 
amortization ~ and interest calculation 8 problems as well as file processing 7,8 and billing 12 problems. 
Merging and sorting problems 7 are also applicable. These applications serve to reinforce the student's 
under- standing of arrays, loops, and decision statements. Character string manipulation appli- cations 
such as encoding and decoding messages 7,8 or analysis of text7, 12 enhance the student's comprehension 
of string variables and arrays. Unfortunately string variables are by no means handled in a uniform way 
in the many versions of BASIC currently available. Applications from mathematics such as  finding the 
area under a curve 7,8,12 or finding the roots of algebraic equations 12 by bisection increase the student's 
fam- iliarity with loops and may perhaps con- vey some mathematical concepts not pre- viously well understood. 
Problems in- volving trigonometry or calculus are of very little value to the great majority of the students 
who have not studied these subjects. In the problem of finding the area under a curve, care should be 
taken to avoid the use of calculus. This entire area of mathematical applications requires' very complete 
descriptions of all phases of the solution due to the lack of ~athe- matical background of the students. 
4 Simulation of various "games" such as rolling dice, 7,8 roulette, 7 and bridge 8 is an area of reasonably 
high interest to the students. By covering these games, a knowledge of random phenomena and the RND random 
number function may be con- veyed. These concepts may then be applied to more "serious" area~ such as 
simulations of ecological systems.-Simple queuing systems such as single queue single server systems 
7 may also be studied to introduce the student to this important area of simulation. Puzzle solving 
applications 7,8 and game playing applications 8 also heighten student interest in the use of computers. 
In addition, these applications show how seemingly unsolvable problems can be structured so that they 
may be solved on a digital computer. This may enable stu- dents to better apply the computer to their 
area of study. Artificial intelligence applications 7,8 developed through game playing examples such 
as tic-tac-toe, hexapawn, or him serve to introduce the idea of adaptive or learning machines. A learning 
program that attempts to optimize buy and sell points for a particular stock in the stock market 7 also 
motivates the student's interest in this area. Education applications involving computer assisted instruction7, 
12 enhance understanding of the interactive capabil- ity of time sharing systems and BASIC. The RND function 
may be used effectively here to create useful "teaching machines." Ecological applications may include 
deterministic calculations of pollution build up in ecosystems 7 or species inter- actionl, 8 problems. 
The preditor-prey problem may be discussed without the use of differential equations by using differ- 
ence equations which_lead to an expon- ential growth model. I World simulation models I and the "limits 
of growth" world model developed by the Club of Rome may then be discussed With the background gained 
in the preditor-prey problem. 32 Summary and Conclusions STGCSE Bulletin, V6, No. I, FeBruary, This 
paper has attempted to describe an approach to a first course in the use of computers for non-majors 
in either computer science or mathematics. The course objectives principally is to pre- pare the students 
to use the digital com- puter to solve problems in their major field of study. BASIC is chosen as the 
 language for the course mainly because it is easy to learn and widely available. In order to stress 
problem solving and applications, many of the topics normally found in introductory courses are omitted: 
 low level languages, number systems and conversions, character codes, hardware characteristics, and 
others. A three phase approach to problem solving including a detailed flowchart of the algorithm is 
stressed at the beginning of the course and then used in the appli- cations. Various applications studied 
in- clude information processing, character string manipulation, mathematical methods, simulation, puzzle 
solving, learning pro- grams, CAI, and ecology. With this approach the students see that computers can 
do more than simply "crunch numbers", they can be applied to a wide class of problems (perhaps ~ven to 
problems in which the students have some personal interest). By emphasizing pro- blem solving rather 
than presenting the applications merely as examples to illus- trate BASIC syntax, the students may learn 
an approach to problem solving using a digital computer which will be applicable to their own major field 
of study or to other problems which they encounter after the course is over. Bibliography <RefA>i. Arib, 
M.A., Computers and the Cyber- netic_ Society, Academic Press, New York, 1977. 2. Cherniak, Bob, Introductory 
Program- min$ Reconsidered - A User-Oriented Approach, SIGCSE Bulletin, V8, No. I. February, 1976.  
3. Cheney, Robert S., An Introductory Computer Survey Course, SIGCSE Bulle- tin, V7, No. 3, September, 
1975.  4. Chi, Emile C., et. al., Computer Science at Staten Island--~m~ty College: Teaching Computer 
Science in an OpenAdmissions Environment, SIGCSE Bulletin, V6, No. i, February, 1974.  5. Galler, B. 
A., The Language of Com- puters, McGraw-Nill, New York, 1962.  1974. 7. Gross, J. L. and Brainerd, 
W. S., Fundamental Programming Concepts, Harper and Row, New York, 1972.  8. Kemeny, J. G. and Kurtz, 
T. E.0, BASIC Programming, Wiley, New York, 1-971.  9. Kunstram, A. H. and Howland, J. E., APL As a 
Lingua Franca In the~Com- p_uter Science C-6-r~cu-Tum, SIG~SE Bulletin, V6, Nor i, February 1974.  
i0. Lucas, William R., Planned Attitude Change While Teaching Computer Lit- e-racy, SIGCSE Bulletin,~ 
,~-~.~, ~ary, 1976. II. Rosenberg, Ivan M., Introductory Computer Science Courses A Modular Design, 
SIGCSE Bulletin, V8, No. i. Fer~uary, 1976. 12. Walker, T. M., Fundamentals of Com- puter Science, Allyn 
and Bacon, Boston, 1975. 6. Gries, David, What Should we Teach in an Introductory__ Pro gramming___ 
Course v.--  53 </RefA>
			
