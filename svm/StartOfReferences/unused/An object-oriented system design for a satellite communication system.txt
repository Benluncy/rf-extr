
 An Object-Oriented System Design For A Satellite Communications System Keith M. Hines Principle Sofiware 
Engineer Keith_Hines@email. mot.com Motorola Government Systems And Technology Group 8220 East Roosevelt 
Drive R2208 Scottsdale, Arizona 85257 ABSTRACT GOALS This paper presents the techniques and results 
of applying The goals of the system development approach were the an object-oriented design to a satellite 
communication following: system. The idea being that if an object-oriented software a working system 
approach yields a better software design, then applying it to a common system architecture which would 
other aspects of a system (system, hardware, software) provide a unified hardware and software design 
should produce a better overall system design. Specific an easily moditlable/adaptable system methods 
and results are given for each step of the low recurring cost development. low power consumption A unified 
system architecture was needed to avoid having INTRODUCTION inappropriate hardware-software requirement 
allocations. That is to say, to make sure the hardware architecture The Trunked MILSATCOM (TMSC) system 
was supported the software architecture and visa versa. developed over an eight month period. A commercial 
trunking protocol was applied to military satellite The ability to modi@ or adapt the system to different 
communication channels. The protocol involves using communication waveforms and various radio equipment 
frequency division multiple access (FDMA) to achieve was highly desirable since the system was being 
proposed higher virtual bandwidth which in turn provides the as a new MILSATCOM communication standard. 
As with appearance of more communication channels. The U.S. ahnost all programs, changes and additions 
of requirements telephone system is an example of a trunking system. were bound to occur in fhture generations 
of the system. The system was developed using a staggered, recursive A low recurring cost approach was 
also a goal. The system waterfall approach (similar to an incremental approach as needed to be sellable 
; therefore cost was always defined in DOD-STD-498) for the system, hardware, and considered as part 
of system trade-offs. Cost was the software. It was staggered in that not all subsystems were deciding 
factor whenever multiple approaches could be in the same phase at the same time. It was recursive in 
that used which met all of the other goals. phases, prelimhry design through integration and testing, 
of the process were repeated recursively for different Power consumption was a concern since most mrmpack 
subsystems. communication systems are battery operated. This drove the use of low power components and 
placing the hardware in power conservation modes (e.g. halting the processor Permission to mpy wthout 
fee all or pafi of this material IS granted provided that the mpies am not made or distributed for direct 
commemal when idle). advantage, the ACM mpyright ntiice and the title of the publication and its date 
appear, and notice is gwen that copying is by penmsslon of the Association for computing Machinery. To 
copy otherwse -or n?pubhsh, requires a fee and/Or specific pmnksion. 01994 ACM 0-89791 -666-2/94/0011--0494 
3.50 494 PROCESS The process for developing the system was derived from various sources including DOD-STD-2 
167A, DOD-STD­498 dratl, MIL-STD-499B draft, and Motorola GSTG Standard Policies and Procedures. A seven 
phase system approach was taken. Each phase was executed at least once. Some phases were executed iteratively 
in order to design, test, integrate and test various subsystems as the project progressed. Each phase 
produced specific outputs which were used to drive subsequent phases. The System Requirements Analysis 
and System Design phases were completed at the system level entirely independent of the implementation 
(hardware and software), The specific phases and outputs were as follows: 1) Project Planning o Schedule 
Budget System Engineering Development Plan Hardware Development Plan Software Development Plan 2) System 
Requirements Analysis . System Specification 3) System Design (recursive) System Design Document . Operation 
Manual o Requirements allocations 4) Detailed Design/Implementation (recursive) o System Test Procedures 
 Hardware design documentation (schematics, parts lists, layouts) Software design documenhtion (algorithms, 
design, code) Module Test Procedures 5) Module Testing (recursive) Module Test Data s System Test Procedures 
 6) Integration and Test (recursive) o System Test Data 7) System Test -System Test Report Project Planning 
The project planning phase consisted of scheduling and budgeting activities; as well as, developing engineering 
plans. A System Engineering Development Plan was written to address the methods to be used during system 
development. All of the requirements analysis and preliminary design for the software and hardware was 
completed at the system level. The majority of the requirements and design activities which would normally 
be associated with software development and hardware development were completed at the system level. 
The Hardware Development Plan documented the methods and steps for completing the detailed hardware design, 
layout, testing, and integration of the hardware modules. The Software Development Plan documented the 
methods and steps for completing detailed software design, implementation, test, and integration of the 
software modules. Modules were defined to be object level circuits (e.g. LCD circuitry) and object level 
components (i.e. Ada packages). System Requirements Analysis System requirements analysis was completed 
using a structured analysis of the functionality of the system. Data flow diagrams were used to depict 
the system level functionality. All requirements were documented independent of hardware and soflware 
in a System Specification. The primary concern during requirements analysis was to concentrate on user 
features and technical performance as a system to better communicate with the customer. As an example, 
one of the user feature requirements was The TMSC shall be capable of informing the operator of incoming 
calls. . One of the technical performance requirements was The TMSC shall be capable of performing for 
a minimum of 2 hours in the field . Also, an operation manual was developed during the System Requirements 
Analysis phase to communicate and gain acceptance for how the system will operate and be operated in 
the field. Ease of use was required by the customer. The System Requirements Analysis phase was executed 
once over a two month period. The output was a complete, concise System Specification which defined what 
was required of the TMSC system. System Design There are various ways of creating the architecture for 
a system. The most common method is ad hoc from experience which usually relies heavily on individuals 
which have designed similar systems in the past. There are several problems with this method including: 
. all system designs tend to have the same problems and flaws as the previous systems . individuals with 
the required experience are not always available . new application domains can not be entered easily 
495 . requirements are not always fully addressed, and . creativity is limited to what was done previously. 
Most system designs start with the hardware architecture and drop the software in as the last piece and 
expect the software to make everything Iimction. Software tends to be the catch-all for overlooked requirements 
or requirements which are not filly understood. Even when software is thought about up front, the system 
engineers usually don t have the expertise required to make proper trade-offs between different implementations. 
A true system level top-down design would start with software and end at the hardware since the top level 
functionality of most systems are implemented in software. Thus, hardware would be designed to support 
software. But since hardware is constrained by the various components available, it is hard to start 
the design with the software and work down to the hardware. Also, the length of the schedule can usually 
only be met when the hardware design is completed early in the development to allow for long lead items 
(ordering and receiving of components and printed wiring boards). The TMSC system design was completed 
using an object­oriented approach at the system level which was represented using object diagrams and 
Ada specifications. The system design started at the top level and progressed downward to the bottom 
level of hardware. The system design produced three types of objects and their associated operations 
(functionality s): . software only objects . software-hardware interface objects, and . hardware only 
objects. The software only objects represented application domain objects and their associated operations 
(functionality) such as the operator interface including cause and effect (state table), and the specifics 
of the trunking waveform and protocol. Some of the software only objects included: request messages, 
command messages, keys, strings, etc. The hardware only objects included low-level objects which were 
contained within the hardware design and had no effect on the software objects. The hardware only objects 
included such things as: address bus, data bus, BERR timer, wait state, etc. The sotlware-hardware interface 
objects were objects which ended up on the boundary between the software and the hardware. Each software-hardware 
interface object was represented in hardware and had an equivalent software object which mapped directly 
onto the hardware object. The sotlware-hardware interface objects included: the keypad, the screen, time, 
delta time, transmitter, receiver, frequency, output power, baud rate, etc. As it turned out the software 
only objects were identified first because they existed in the top level of the system design. The software-hardware 
interface objects became obvious after working the design to a certain level of detail. All the objects 
below the software-hardware interface objects were hardware only objects. To reduce the number of components 
and to minimize the hardware constraints on the software and system design, field programmable gate arrays 
(FPGA) were used to design the hardware. FPGAs allow custom hardware designs to be completed with the 
benefit of keeping the cost, size, and power consumption low. FPGAs also can be redesigned and reprogrammed 
without physical hardware changes. Detailed Design As objects of the system design were defined, the 
detailed design of each object was started. The detailed design of each object included detailing the 
objects definition to an implementation. In the case of the software objects this step was performed 
by creating complete Ada specifications and then PDL and finally implementations. In the case of the 
hardware objects circuits were designed to implement the object and the operations required to manipulate 
the object. In some cases the system level design for an object was refined to allow the use of predefmed 
hardware components. Hardware object circuits were then grouped into modules (printed circuit boards) 
to meet the form and fit of their place within the system. This is a necessary coupling in hardware to 
reduce the number of printed circuit boards and connectors; this was done for cost and manufacturing. 
A System Test Procedure was written to provide test procedures at the system level which tested the system 
against the system level requirements. The test procedure included test cases, traceability to system 
level requirements, step-by-step test procedures, and test procedure expected results. ModuldUnit Testing 
Software unit testing was completed by fwst categorizing the software into either hardware dependent 
units, complex units (modified McCabes greater than 3), and simple units (modified McCabes less than 
4). Hardware dependent units were unit tested in conjunction with the hardware module 496 with which 
they were associated. Complex units were tested using black box and clear box testing over the fill range 
of possibilities where possible. Simple units were not explicitly tested, but were visually inspected. 
Hardware module testing was conducted at the module interface level and at the module circuit level. 
Each module had a unique module test fixture built to automate the testing of each individual circuit 
in the module and all interfaces to/ilom the module. Module interface testing was conducted using black 
box testimg techniques which exercised each input signal and sets of input signals to achieve each combination 
of possible output signals. Module circuit level testing was conducted using clear box testing techniques 
to exercise each element of the circuit in all of the possible modes and states. The testing of each 
module/unit occurred as each module/unit completed detailed design. Integration and Test Integration 
and test occurred in three steps; software integration and test; software-hardware interface integration 
and tes~ and hardware integration and test. As software units completed unit testing they were immediately 
integrated into the rest of the software system. After being integrated the limited fimction system was 
tested as much as possible. Sotlware-hardware interfaces were simulated to allow for testing prior to 
hardware being available. The software-hardware interface integration and test occurred during module/unit 
testing to reduce risk and to allow both the hardware and the sofbvare to be unit tested as one. The 
hardware integration and test occurred as each hardware module completed module test. Since each interface 
was specified with fill electrical detail during the system design and detailed design phases, and each 
interface was exercised completely during module testing the integration of modules was as simple as 
plugging everything together. To verify the interplay between hardware modules, all modes of operation 
were tested. System Test The System Test phase was a formal acceptance/qualification test of the system. 
Each system test procedure was executed to show compliance of the system with the specification. In addition, 
random stress testing was performed by the customer. All tests were executed in the laboratory. Additional 
testing occurred over the satellite to demonstrate the system s use in the field. All of the original 
goals of the development effort were achieved. CONCLUSION The application of this object-oriented systems 
approach yielded a better design in terms of modularity, reusability, maintainability, manufacturability, 
and ease of understanding. The object oriented approach increased modularity in such a way that it was 
easy to lift hardware, software, or a combination of units/circuits and reuse them in other designs. 
A common development approach across the system allows the system to be maintained easier because the 
boundaries between implementation become somewhat invisible which does not require the maintainer to 
shift paradigms. The hardware modules were easier to manufacture because of the degree of testing that 
could occur using drivers from the software. Overall anyone familiar with object oriented design could 
understand the design of the entire system, not just the hardware or soflware. In addition, the approach 
allowed for the requirements to be designed into the system without arbitrary allocations of design areas 
to an implementation method. The approach also allowed for a better interface between soflware and hardware 
implementation because the design methods were the same, A nice coupling occurred between the software 
to hardware interfaces. Changes in the requirements were easier to handle with the common object-oriented 
approach. Changes in the requirements were handled by redefming/modi@ing affected objects and their attributes. 
Another advantage of this approach was that the system engineer was forced to understand all aspects 
of the system. Most system engineers come tlom a specific type of hardware or software background and 
tend to be strong in their background. Since the object-oriented system approach does not discriminate 
against any implementation method it guarantees that attention is paid to all pieces of the system. The 
main negatives to the object-oriented system design was that particular attention had to be made to assure 
low recurring cost and ordering parts occurred later in the design. If too many objects get pushed into 
hardware implementations, then the recurring cost will increase. 497 Tradeoffs need to be made to select 
the proper implementation for an object. To alleviate the time delay between ordering and receiving parts, 
multiple parts with similar functionality were ordered early in the project, however only some of these 
parts were actually used in the final system. Also, most available hardware parts have a high degree 
of coupling which is contrary to a proper object-oriented approach. The object-oriented approach tends 
to yield designs with low amounts of coupling. The problem can be minimized by using custom parts and 
by conducting thorough reviews of all software object mappings to hardware. GLOSSARY hardware only System 
objects which are objects implemented in hardware only. module Hardware printed wiring board which contains 
a necessary coupling of circuits which implement one or more hardware objects. software only System objects 
which are objects implemented in software only. software-hardware Objects which exist in hardware interface 
with a direct equivalent mapping in objects software. unit Software object implementation. 
			
