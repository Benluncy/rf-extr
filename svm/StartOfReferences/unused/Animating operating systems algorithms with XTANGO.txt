
 Animating Operating Systems Stephen Math and Computer Drexel Philadelphia, (215) shartleytics. Abstract 
In operating systems courses, students study the major al­gorithms used in operating systems to manage 
the vari­ous objects and resources in a computing system: pro­cesses, files, buffer space, processors, 
messages, main mem­ory, semaphores, and disk storage. Various classical syn­chronization problems such 
as the dining philosophers, the readers and writers, and the producers and consumers with bounded buffer 
are also anaJyzed. Even though the comput­ing systems being studied are getting more and more power­ful, 
these algorithms and classical problems are usually ana­lyzed using blackboard, chalk, pencil, and paper. 
This paper describes an X-windows based package called xtango that was used to animate some of the algorithms 
and classical problems studied in operating systems. One animation typ­ical of those that have been developed 
is presented. Students can use these animations during study outside the classroom for a better understanding 
of the algorithms. Instructors can use the animations to facilitate the presentation of the algo­rithms 
in the classroom. 1 The Need To Animate Operating Sys­tems Algorithms Students in an undergraduate operating 
systems course study the fundamental algorithms used by the operating sys­tem in a computing system to 
manage concurrently execut­ing processes and the resources they use, such as central processing units, 
primary storage, and secondary storage. The computing system may be a uniprocessor, a shared­memory multiprocessor, 
or a distributed system. Topics usually studied include algorithms and techniques for mu­tual exclusion, 
CPU scheduling, disk seek scheduling, dead­lock avoidance and detection, distributed mutual exclusion, 
the dining philosophers, concurrent programming, memory compaction, and first-fit versus best-fit memory 
allocation [4]. These algorithms are usually presented in the classroom using pseudo-code and drawings 
on the blackboard or over- Permission to copy without fee 811or part of thie material is grantad provided 
that the copies or. not made or distributed for direct commercial advantage, h ACM copyright notice and 
tho titlo of tho publication and ite dato eppoar, and notico ia given that copying ia by perm saion of 
the Aesocietion for Computing Mechinary. To copy otherwiso, or to ropubliah, requiroa e foe andlor specific 
permission. SIGSCE 94-3/94, Phoenb&#38; Arfzor@JSA @ 1994 ACM O-89791~..S3.5O Alg~rithms with XTANGO 
J. Hartley Science Department University PA 19104 895-2678 drexel. edu head projector screen. Students 
who write computer pro­grams that implement or simulate these algorithms are usu­ally limited to ASCII 
terminals or terminal emulators in the ways their programs display generated output. Workstations with 
bit-mapped monitors and graphics packages provide the hardware capability for better ways to display 
the output of programs simulating operating sys­tems algorithms. What is needed is a software package 
and a collection of demonstration files or programs that students and instructors can use to animate 
these algorithms. For example, a program that simulates the dining philoso­phers usually generates its 
output in the form of lines of philosopher state changes (hungry, eating, thinking) per­haps tagged with 
a time stamp. The lines from the different philosophers are all intermixed. This makes following the 
output or debugging the program difficult. An algorithm that lets the philosophers eat in a starvation-free 
fashion would be much more easily understood by students if the output could be presented in a graphical 
or animated form with dining philosopher icons sitting around a circular table, each labeled or colored 
with its current state. Another example is distributed mutual exclusion. One algorithm (page 478 of [4]) 
haa a node desiring to enter its critical section send a time-stamped message to all other nodes and 
await replies allowing it to proceed into its critical section. This algorithm would be much easier to 
present if the sending of the request messages could be animated to show those in transit, those received, 
and those answered. The present ation in the classroom of just about all operat­ing system algorithms 
and classical problems would benefit from this technique. The package could be made available to students 
for displaying the output of their simulation pro­grams, greatly facilitating debugging. 2 The XTANGO 
Animation Package John Stasko has written a package called xtango, available by anonymous f tp from machine 
par. cc. gatech. edu (re­ trieve the file pub/xt ango. tar. Z). This package executes on UNIX workstations 
with bit-mapped color displays running the X11 windowing system and provides a platform for con­ structing 
algorithm animations. The tar file distribution includes many sample animation programs, such as matrix 
multiplication and searching for substrings in a string. There are two approaches to using the package. 
Data structures and library calls for the animation package can be embedded in the user s C language 
program that imple­ 344 ments a simulation of an operating system algorithm, such as first-fit memory 
allocation. The user s program is then com­ piled with the xtango library and with the XII windowing 
library. Alternatively, a text file ofcommands toananima­ tion interpreter included in the xt ango distribution 
can be constructed. Then the interpreter can be executed with the text file of commands as input. The 
text file of commands can be constructed with an editor or can be the result of print statements in the 
user s simulation program, written in any high-level programming language. In this alternative, the output 
of the user s simulation program can be collected in a file for later input into the animation interpreter 
or the output of the program can be piped (UNIX terminology) directly into the animation interpreter, 
without the need for an intermediate file. The SR programming language [1] has been used success­ fully 
[2, 3] in operating systems classes and concurrent pro­ gramming classes as a language for students to 
write concur­ rent programs that use semaphores, message passing, and the rendezvous for synchronization. 
Programming in this language gives students valuable, practical experience using the concepts they have 
learned in operating systems and concurrent programming classes. Therefore it was chosen as the language 
for the simulation programs whose output is piped into the xt ango animation interpreter. 3 An Example 
The Appendix shows the SR code (see section 13,3 in [I]) for a distributed solution to the dining philosophers 
prob­lem, that is, a solution that does not rely on a central server process. This program, when placed 
in a file named didp. sr, can be compiled and run with the commands sr -o didp didp. sr; didp I animator 
where animator is the animation interpreter from the animator directory in the xtango source tree. In 
the original window on the screen will appear the orig­inaJ distributed dining philosophers simulation 
output, each line prefaced with comment so it will pass through animator unprocessed. A new window will 
be created on the screen in which will appear the animation of the simulation. See thecomments inthe 
SRprogram in the Appendix. Figure 1 shows a snapshot of this window during the animation. 4 Other Approaches 
Another approach to animating or illustrating algorithms is using a physical system. Tosten [5] used 
model trains to demonstrate process scheduling, semaphores, deadlock, and fairness issues in operating 
systems. The advantages of us­ing a physical system over images created with software are better real-time 
control and the visual impact of physical re­a.hty. However, physical systems have the problems of wear 
and tear, physical abuse, mechanical malfunction, and main­tenance. A physical system such as a railroad 
is a critical resource in terms of student use: if there is just one system, then only one student can 
use it at a time. Using the sys­tem in the classroom for demonstrations may be difficult or impossible, 
depending on how easily the system is moved, Figure 1: Animation Snapshot of the Distributed Dining Philosophers. 
Animations on a workstation screen do not have these problems. As many students as there are workstations 
can use the animation package simultaneously. Software never wears out and cannot be damaged. Finally, 
an infinite va­riety of operating system algorithms can be illustrated with thextango package. There 
is no straightforward way to an­imate first-fit memory allocation using model trains. 5 Conclusions The 
xtango animation package has proven to be easy to use and a powerful system for animating operating system 
algorithms. The system will be used during the fall of 1993 in an operating systems class. The talk at 
the conference will present several algorithm animations and will report on student feedback. References 
[1] Gregory R. Andrews and Ronald A. Olsson, The SR Programming Language: Concurrency in Practice, Ben­jamin/Cummings 
Publishing, 1993. [2] Stephen J. Hartley, Experience with the Language SR in an Undergraduate Operating 
Systems Course, ACM SIGCSE Bulletin, Vol. 24, No. 1, March 1992, [3] Stephen J. Hartley, An Operating 
Systems Laboratory Based on the SR (Synchronizing Resources) Program­ming Language, Computer Science 
Education, Vol. 3, No. 3, 1992. [4] Andrew S. Tanenbaum, Modern Operating Systems, Prentice Hall, 1992. 
[5] Rodney S. Tosten, Using a Model Railroad System in an Artificial Intelligence and Operating Systems 
Course, ACM SIG CSE Bulletin, Vol. 25, No. 1, March 1993. 345 A Appendix: Distributed Dining end phil 
end Philosopher Philosophers # Distributed Dining Philosophers. Based # on the example in Section 13.3 
of The # SR Programming Language: Concurrency in # Practice , by Greg Andrews and Ron Olsson, # Benjamin/Cummings, 
1993. The algorithm # is from Chandy and Misra, Drinking # Philosophers Problem , ACM TOPLAS v 6, # n 
4, Ott 1984, pp 632-646. # # Usage: a.out [n sees t_secs e-sees # t-sees e-sees . ..] # (for n philosophers, 
sees seconds running # time, t_secs max thinking seconds, e-sees # max eating seconds for each philosopher) 
# # Modified for xtango s animator interpreter. # All normal SR simulation output is done # with write, 
and all xtango animator # commands are output with printf to dis­# tinguish them. resource Philosopher 
import Servant body Philosopher(myservant : cap Servant; id, thinking, eating: int) process phil do true 
-> nap(int(random (thinking))) printf( comment ) # For animator. write(ageo, philosopher , id, is hungry 
) # Change a hungry philosopher s symbol # to be solid green. printf( color Xd green\n , id) printf( 
fill Xd solid\n , id) # Above for animator. myservant.getforks () # Change an eating philosopher s symbol 
# to be solid blue. printf( colorxd blue\n , id) # Above for animator. nap(int(random (eating))) # Change 
a thinking philosopher s symbol # to an outline black circle. printf( fill Id outline\n , id) printf( 
color Id black\n , id) # Above for animator. resource Servant op getforkso, relforkso op needR(), needL(), 
passR(), passL() op links(r, 1 : cap Servant) op forks(haveR, dirtyR, haveL, dirtyL : bool) # This op 
and the variables below are used # to hold the symbol id numbers of the # left and right fork symbols 
and where # the left and right forks are placed next # to the philosopher when it possesses them. op 
fork-ids(forkR, forkL, holderR, holderL : int) il Above for animator. body Servant(id : int) op hungryo, 
eato var r, 1 : cap Servant var haveR, dirtyR, haveL, dirtyL : bool # Used with the fork-ids op above. 
var forkR, forkL, holderR, holderL : int # Above for animator. proc getforkso send hungryo receive eato 
 end process server receive links(r, 1) receive forks(haveR, dirtyR, haveL, dirtyL) # Move a left or 
right fork initially # given to this philosopher to be next # to the philosopher. receive fork_ids(forkR, 
forkL, holderR, holderL) if haveR -> printf( jumpto %d i!d\n , forkR, holderR) fi if haveL -> printf( 
jumpto %d %d\n , forkL, holderL) fi if dirtyR -> printf( color%d orange\n , forkR) printf( fill %d solid\n 
, forkR) fi if dirtyL -> printf( colorld orange\n , forkL) printf( fill Xd solid\n , forkL) fi # Above 
for animator. myservant.relforks () do true-> od 346 in hungryo -> if haveR -> send r.needL() [1 else 
-> printf ( comment ) # For animator, write (ageo , philosopher , id, has right fork ) fi if haveL -> 
 send l.needR() [1 else -> printf( comment ) # For animator. write(ageo, philosopher , id, has left 
fork ) fi do (haveR ?c haveL) -> in passR() -> haveR := true; dirtyR := false printf( comment ) # For 
animator. write(ageo, philosopher , id, got right fork ) # Move the right fork from where it was # to 
be next to this philosopher and then # change its symbol to be a black outline # circle i.e. not dirty. 
Also raise the # fork s symbol to the closest viewing # plane to make it more visible. printf( moveto 
%d ld\n , forkR, holderR) printf( fill %d outline\n , forkR) printf( color%d black\n , forkR) printf( 
raise %d\n , forkR) # Above for animator, [1 passL() -> haveL := true; dirtyL := false printf( comment 
) # For animator. write(ageo, philosopher , id, got left fork ) # Ditto for the left fork. printf( moveto 
Zd Zd\n , forkL, holderL) printf( fill %d outline\n , forkL) printf( colorxd black\n , forkL) printf( 
raise %d\n , forkL) # Above for animator. [1 needR() st dirtyR-> haveR := false; dirtyR := false send 
r.passL(); send r.needL() printf ( comment ) # For animator. write(ageo, philosopher , id, sends dirty 
right fork ) [1 needL() st dirtyL-> haveL := false; dirtyL := false send l.passR(); send l.needR() printf( 
comment ) # For animator. write(ageo, philosopher , id, ,Isends dirty left fork ) ni od printf( comment 
) # For animator. write(ageo, philosopher , id, has both forks ) send eato dirtyR := true; dirtyL := 
true receive relforkso printf( comment ) # For animator. write(ageo, philosopher , id, I!is finished 
eating ) # Now that the philosopher has finished # eating, its forks are dirty so change # their symbols 
to be solid orange circles. printf( color %d orange\n , forkL) printf( fill %d solid\n , forkL) printf( 
color%d orange\n , forkR) printf( fill %d solid\n , forkR) # Above for animator. [1 needR() -> haveR 
:= false; dirtyR := false send r.passL() printf( comment ) # For animator. write(ageo, philosopher , 
id, sends right fork ) [1 needL() -> haveL := false; dirtyL := false send l.passR() printf( comment ) 
# For animator. write(ageo, philosopher , id, sends left fork ) ni od end server end. Servant resource 
Main 347 import Philosopher, Servant fa i := lton-> body Maino # Put the philosophers, black outline 
var n := 5; getarg(l, n) # circles, around the table. var runtime := 60; getarg(2, runtime) printf( circle 
%d %7.2f %7.2f 0.1 black outline\n , var s[i:n] : cap Servant i, sin(i*(TWO-PI/n)), cos(i*(TWO-PI/n))) 
var p[i:n] : cap Philosopher # Number the philosophers. var think[l:n] : int := ([n] 5) printf( text 
~d ~7.2f X7.2f 1 black Xd\n , var eat[l:n] : int := ([n] 2) 2000+i, sin(i*(TWO-PI/n))+O.1, fa i :=lton-> 
cos(i*(TWO_PI/n))+O.1, i) getarg(2*i+l, think[i]) # Put nearly invisible circles (points) getarg(2*i+2, 
eat[il) # on the left and right side of each af # philosopher to be places the forks can # be moved to 
when the philosopher gets printf(! comment ) # For animator. # possession of a fork. printf( circle Xd 
%7.2f %7.2f 0.001 black outline\n , write(n, philosophers; , 4000+2*i, sin(i*(TWO-PI/n)-O.12), think, 
eat times in seconds: ) cos(i*(TWO-PI/n)-O. 13)) printf( circle %d %7.2f %7.2f 0.001 black outline\n 
, printf( comment ) # For animator. 4000+2*i+l, sin(i*(TWO-PI/n)+O.12), cos(i*(TWO-PI/n)+O. 13)) fa i 
:=lton-> af writes( , think[i]) # Above for animator. af writeo fa i := lton-> s [i] := create Servant(i) 
printf( comment ) # For animator. create Philosopher(s[i], i, 1000*think[i], 1000*eat[i]) fa i := iton-> 
af writes( , eat[il) fa i := lton-> af send s[i].links(s[((i-2) mod n)+l], writeo s[(i mod n)+ll) 
af # Change coordinates so 0,0 is the center, send s[l].forks(true, true, true, true) # then create a 
big black outline circle fa i := 2 to n-1 -> # to be the table. send s[i].forks(false, false, true, false) 
printf( coords -1.5 -1.5 1.5 1.5\n ) af printf( circle 1000 0.0 0.0 1.0 black outline\n ) send s[n].forks(false, 
falSe, false, false) # Put some annotated symbols on the screen. printf( circle 1001 -1.4 -0.6 0.02 
black outline\n ) # Send to each philosopher the xtango printf # animator symbol id s of the two forks 
( text 1002 -1.3 -0.625 0 black clesnfork\n ) # the philosopher needs to eat and the printf( circle 1003 
-1.4 -0.8 0.02 orange solid\n ) # places where possessed forks are to printf # be moved next to the philosopher. 
( text 1004 -1.3 -0.825 0 black dirty fork\n ) fa i :=lton-> printf( circle 1005 -1.4 -1.0 0.05 black 
outline\n ) send s[il.fork_ids(3000+((i-1) mod n), printf 3000+(i mod n), 4000+2*i, 4000+2*i+l) ( text 
1006 -1.3 -1.025 0 black THINKING\n ) af printf( circle io07 -1.4 -1.2 0.05 green solid\n ) # Above for 
animator. printf( text 1008 -1.3 -1.225 0 black HUNGRY\n ) printf( circle 1009 -1.4 -1.4 0.05 blue solid\n 
) nap(iOOO*runtime) printf( text 1010 -1.3 -1.425 0 black EATING\n ) # Put a clean set of forks, small 
black printf( comment ) # For animator. # outline circles, near the table. printf( text 1011 %7.2f -1.41 
0 black forks\n , write( must stop now ) -1.0+0.05*(n+l)) stop fa i :=lton-> end Main printf( circle 
l!d X7.2f -1.4 0.02 black outline\n , 3000+i-1, -i.0+0.05*i) af const TWO_PI := 2.0*acos(-i.0) 
			
