
 Advanced Structured COBOL Programming Asad Khailany D. Sc. Department of Operations Research and Information 
Systems School of Business Eastern Michigan University ABSTRACT There is a large market demand for COBOL 
programmers. Can a single introductory course in COBOL programming provide the students with suffi-cient 
professional expertise to qualify them for these job openings? If not, is it feasible to offer a second 
course in COBOL programming? In this paper the technical capabilities of those who have completed an 
introductory COBOL pro- gramming course and the skills and technical qua-lifications which are desired 
by employers of entry level COBOL programmers are analyzed. It is concluded tnat a single introductory 
COBOL pro- gramming course is not sufficient to produce COBOL programmes with the qualifications and 
skills expected by employers. Therefore, an advanced structured COBOL programming course is proposed. 
The goals and the course outline including texts and references of such an advanced course are presented. 
Several samples of integrated infor- mation systems which have been completed by student teams in Advanced 
Structured COBOL programming will be available for the audience. Introduction Despite the fact that the 
market demand for COBOL programmers is significantly higher than that for any other type of programmer, 
many computer science departments do not teach any course in the COBOL language, and many colleges and 
universities offer only an introductory course in COBOL. Philosophically it is true that educa-tional 
installations should not establish their curriculums solely on the basis of market demand. However, the 
main reason students enroll in edu-cational installations today is to enhance their employment opportunities. 
This is specifically true for most students who enroll in an intro- ductory COBOL course. Not only information 
systems and business students, but students from many other different academic levels and backgrounds 
such as computer science, mathe-matics, political science, psychology, geo-graphy, English, history, 
art .... etc., are also enrolled in such an introductory COBOL course which for most of them is not a 
required core course. As a matter of fact in some places students in computer science, mathematics or 
some other curriculums can not get credit for such an for COBOL programmers, and they hope that such 
a course will make it easier for them to get their first job in the data processing field. However, many 
of those who finish such a course in COBOL and try to get a programming job face the unhappy situation 
where most opening jobs in COBOL pro- gramming require anywhere from l to 3 years pro-gramming experience. 
Not only this, but they also realize that they did not gain from such an intro- ductory COBOL course 
many of the qualifications expected by their potential employers. There have been cases where those who 
have had some training in commercial data processing schools have been preferred over universitygraduates, 
even over those with a computer science degree. Cir-cumstances like these made us ask the following questions: 
l. What technical qualifications are expected qualifications are expected of entry level COBOL programmers 
by business and industry? 2. What type of students are produced frown an introductory COBOL course? What 
are their technical qualifications and how can they be characterized? 3. If there is a considerable 
gap between the technical qualifications sought by business from entry level COBOL programmers, and the 
qualifications of those who have completed such an introductory COBOL course: what is the feasibility 
of introducing a second course in COBOL?  Contacts with business and feedback from stu- dents who had 
been interviewed by several companies provided the answers to the above questions. Technical Qualifications 
of Entry Level COBOL Programmers Desired by Interviewer: I. They should know most elements of the language 
well. 2. They should be able to write modularized structured programs.  3. They should be able to write 
program speci- fications.  introductory COBOL course, yet they enroll in it anyway. The main reason 
is the high market demand 4. They must have some knowledge about docu- mentation. Their programs must 
be readable. Complicated algorithms, nested IF and procedures 12. Their knowledge of program optimization 
is like ALTER should be avoided in their programming. very limited. 5. They should know well how to manipulate 
sequential files using different storage devices. Also it is desirable that they know random and indexed 
sequential file manipulation. 6. They should be able to contribute to writing user manuals. 7. Experience 
working on a project as a team member is extremely valuable. 8. They should have some ability to estimate 
program and/or project costs. 9. The type of reports which they can produce is considered. Their knowledge 
of Report Writer is desired.  lO. They should know how to sort or write sort routines. Their ability 
to write subprograms is helpful. II. Their knowledge about transferability, portabi lity and optimization 
of programs is very valuabl e. 12. They must know how to design an integrated system, i.e., several interacting 
programs within the system. Skills Gained From An Introductory COBOL Course: The students who have passed 
our introductory COBOL course can be characterized as follows: I. With few exceptions, they are average 
beginning COBOL programmers. 2. They do not have any project team experience. 3. They do not know how 
to deal with indexed sequential files and some still have difficulty manipulating random or disk/tape 
sequential files. 4. With very few exceptions, most of them do not know modularized structured programming. 
 5. Their programs are poorly documented and the style of their programming needs improvement. 6. They 
can design a program well, but their knowledge of designing a system with several interacting programs 
is not satisfactory. 7. They do not know how to write program specifications.  8. Their knowledge of 
subprograms and sorting is mediocre.  9. They do not know Report Writer. lO. Some have difficulty with 
table handling. II. Their programs need improvement in terms of transferability and portability. 13. 
They do not have any experience estimating program or project costs. 14. They do not have any experience 
in writing user's manuals. 15. They do not have experience with very large programs.  After the above 
findings it was clear that the feasibility of offering a second course in COBOL should be considered. 
Therefore a rough draft of the course outline for an Advanced Structured COBOL programming course was 
prepared and a survey among our students was made to determine the student's attitudes toward such a 
course. The results of the survey were encouraging and it was found that not only our students but many 
programmers, programmer analysts and systems analysts currently employed are eager to take such a course. 
Following are the goals of Advanced Structured COBOL programming. Goals of Advanced Structured COBOL 
Programming: This course should let the student gain experience and digest the concepts of: I. Working 
as a member or a project leader of a team to design, analyze, program, and run and document a large integrated 
information system. 2. Writing program specifications. 3. Appreciation of the user, s demands and learning 
how to write user's manuals for tileir programs and systems. 4. Producing different reports and learning 
REPORT WRITER.  5. Learning structured and modular programming in COBOL well. 6. Different sorting 
techniques. 7. Different debugging techniques. 8. COBOL Program optimization.   9. Writing a more 
readable and better docu- mented program. lO. Subprograms and utility programs. Sub- programs not only 
in COBOL but in other languages which can be called from COBOL main line programs. If. Transferability 
and portability strategies in COBOL programming. 12. Discussion of any COBOL language elements which 
have not been discussed in the introductory COBOL course. These may be topics such as random and sequential 
files or language elements such as SEARCH, OCCURS DEPENDING ON ...etc. This will be the Fourth time 
that Advanced Structured COBOL programming is offered. The enrollment is ever increasing. Feedback from 
the students is excellent. All students who have taken advanced structured COBOL programming and wanted 
a job were able to find one. Some were hired as programmers or programmer analysts and a few as ~ystems 
analysts. Their salaries ranged from $12,000 to $15,500 and one landed a job with $17,500. Encouraging 
feedback from their employers on their performance makes their future as data processing professionals 
look very promising. Below are the pre- requisites, credit hours and course outline for Advanced Structured 
COBOL Programming. Prerequisites for the course: An introductory COBOL course. Number of contact hours: 
3 hours per week. The textbook and references: The required text is Modular Programning in COBOL by Russell 
M. Armstrong. Tile text has many excellent topics such as program quality, modula-rity, documentation, 
etc. Nevertheless, it does not have any projects or exercises and it has only one sample program which 
is unfortunately unreada-ble because it is overdocumented. The text by itself cannot satisfy the above 
mentioned goals. The topics which are missing in the text can be found in one or more of the references 
(as indi-cated in the course outline) in the attached reference list. If any team could not come up with 
its own proposal to set up an integrated information system, they were asked to set up one of the systems 
in reference 3. Every student has to contribute two different systems during the semester. In the last 
two to three weeks of the semester, different teams present their work to the class. The work of all 
the teams will be available to the class so that they can see different systems and program designs and 
approaches. References 3, 4, 5 and 16 are highly recommended. The course outline: Advanced Structured 
COBOL Programming I. Subprograms (Reference 2, Chapter 5; Reference I, Chapter 8; Reference 18, Chapter 
12). a. Writing and calling a subprogram written in COBOL from the main line COBOL program. b. Calling 
a subprogram written in a language other than COBOL from a COBOL main line program.  2. Introduction 
to Modular Programming (Text, Chapters 1 and 2). a. Change and flexibility in systems. b. Program quality 
control.  3. Program Debugging Techniques (Reference I, Appendix I). 4. Table Handling (References 1 
and 2, Chapter 5; Reference 18, Chapter II)o a. Subscripts and Indices. b. OCCURS clause and SEARCH 
verb.  5. Transferability and Portability (Text, Chapter 3).  6. Report Writing Section (References 
1 and 2, Chapter 4; Reference 6, Chapter II).  7. Documentation (Text, Chapter 4; References 8, 9, 16, 
and 18).  a. Documentation is communication. b. Documentation and system environment. c. Program documentation. 
  8. File Organization in COBOL (Reference 2, Chapter 4, Reference I, Chapter 5 and Appendix H; Reference 
4, Chapters 3 &#38; 4; Reference 6, Chapter 12, Reference 14, Chapters 6 &#38; 7, Reference 18, Chapter 
4). a. Sequential files. b. Random (direct) files. c. Indexed sequential files. d. Other organizations. 
  9. Modularity (Text, Chapter 5; Reference I, Chapter 9).  a. Creating a COBOL source library. b. 
Using the COPY statement. c. Application modularity and modularity in computer systems. d. Procedural 
modularity. e. Linear hierarchic structure.   f. Structural modularity. I0. Module Design (Text, Chapter 
6). a. The hierarchic module diagram. b. Procedural structure.  II. Sorting (Reference I, Chapter 6 
and Appendix E; Reference 18, Chapter 12). a. Using COBOL SORT verb. b. Using a utility SORT program. 
 c. Different sorting algorithms.  I) Linear sorting. 2) Bubble sorting. 3) Shell sorting. 12. Interface: 
Linkage and Subprograms (Text, =9. Documentation Manual, J. Van Duyn, Chapter 7). Auerbach, 1972. a. 
Intermodule interface: subprogram. I0. Elements of Systems Analysis for Business Data Processin 9, Marvin 
Gore &#38; John b. Multiple program module linkage. Stubbe, Wm. C. Brown Publishing Co., 1975. c. Overlay 
structure. II. Information System Analysis-Theory and Application, M. J. Alexander, SRA, 1974.  13. 
COBOL Source Program Optimization Techniques (Reference 2, Chapter 6; Reference 16; Text, 12. Information 
Systems, Chris Mader &#38; Robert Chapter 4). Hagin, SP~A, 1974. a. The programmer's role in creating 
an effi- 13. Information Systems Theory and Applica- cient system. tions, John G. Burch, Jr. &#38; Felix 
R. Strater, Jr., Hamilton Publishing Co., b. Proper organization of the DATA DIVISION. 1974. c. Proper 
organization of the logic in the 14. Business Data Processing and Computer PROCEDURE DlVlSlON and use 
of efficient Programming, Mike Murach, SRA, 1973. instructions. 15. Data Processing Systems. Analysis 
and d. Selection of proper Block size for input/ Design, Robert J. Condon, Reston Pub- output files. 
lishing Co., Inc., 1975. e. Selection of proper input/output devices. 16. Program Style, Design, Efficiency, 
Debugging and Testing, Dennie VanTassel,  14. Developing Standard Constructs (Text, Chapter Prentice-Hall, 
Inc., 1974. 8). 17, Business Data Processin~ Systems, 15. Developing Reusable Capability (Text, Chapter 
Lawrence S. Orilia, Nancy Stern and 9). Robert Stern, J. Wiley, pub:, 1972. a. Reusable models. 18. 
COBOL for Small and Medium Sized Computers, Asad Khailany &#38; Claude b. Reusable paragraph-group. 
Duplissey, Houghton Mifflin, 1976. c. Reusable subprograms. d. Preprocessors and packages.   References 
used to supplement the text for Structured Advanced COBOL programming. Text: Modular Programming in COBO 
L , Russell M. Armstrong, J. Wiley, pub. References: I. DECsystem-lO COBOL LANGUAGE HANDBOOK. 2. DECsystem-lO 
COBOL Users Guide. 3. Business Computer Systems and Applications, Alan L. Eliason &#38; Kent D. Kitts, 
SP~A, 1975.  4. Structured Information Files, Richard A. Kaimann, Melville Publishing Co., 1975. 5. 
Structured Programming, O. J. Dahl, E. W. Kijkstra &#38; C.A.R. Hoara, Academic Press, 6th edition, 1974. 
 6. Standard COBOL: A Problem Solvinq Approach, Marilyn Z. Smith, Houghton Mifflin, 1975.  7. The Analysis 
of Information Systems, Charles T. Meadow, Melville Publishing Co., 2nd edition, 1973.  8. Documentation 
Standards, Keith R. London, Auerbach, 1974.  
			
