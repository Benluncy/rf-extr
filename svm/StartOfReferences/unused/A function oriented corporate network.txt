
 A Function Oriented Corporate Network P. S.-C. Wang and S. R. Kimbleton ITT Programming, 1000 Oronoque 
Lane, Stratford, CT 06497 ABSTRACT The ITT/NET is an internal corporate network built to satisfy the 
distributed programming require-ments of ITT technology and engineering communi- ties. This paper describes 
the network: its goals, its architecture, its operational environment and prototype development activities. 
The various issues involved in the construction of a Corporate Network based upon diverse, existing systems 
and communication methods are described in detail. The architectural and implementation de- cisions are 
discussed and justified. The program-ming process and the methodologies adopted are presented and some 
conclusions are drawn as to the practicality and usefulness of formal development methods in the context 
of this particular project. 1.0 INTRODUCTION ITT is, perhaps, the preeminent example of a mul- ti-product, 
multi-national corporation. Managing ITT requires planning, organization, communication and control. 
This requires effective communications within and between sites. ITT/NET is a corporate network designed 
to usefully interconnect the .ge-ographically distributed hardware, programming and human resources of 
major ITT North American and European units. This report is a description of the ITT/NET. It concentrates 
on those aspects of the network as seen by the end user, that is, network ser-vices--their selection, 
their functions and func-tional relationships and their design and implementation. Service selection 
is summarized in Section 2, followed by discussions of network and protocol structures (Section 3) and 
the program-ming process: specification, design, implementa-tion and quality assurance (Section 4). 2.0 
Distributed Programming Requirements and the ITT/NET It was early recognized that an application-and 
service-sharing network is needed to meet the com- puting requirements of major ITT technical activ- 
ities. In response to this need, front end processors, leased lines and telecommunications packages were 
installed on several IBM mainframes Permission to copy without fee all or part of this material is granted 
provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright 
notice and the title of the publication and its date appear, and notice is given that copying is by permission 
of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or 
specific permission. and a network started to evolve. However, with the growth of a major multi-national 
digital switch project (System 12, see [1] and [2]), problems concerning both the level of service and 
functional deficiencies of the network became critically impor- tant. ITT/NET is designed to solve these 
prob-lems. It is a function oriented computer network designed primarily to interconnect geographically 
dispersed IBM mainframes, and s econdari y, to connect IBM mainframes and other machines such as the 
DEC VAX and PDP 11. It provides the func- tional building blocks underlying the distributed programming 
environments needed during the mul-ti-location product life cycle. 2.1 Network Services The service selection 
process was guided by analy- sis of the technical, managerial and system support activities for the afore-mentioned 
System 12 pro- ject, which resulted in the following communication requi rements : R1. Access to interactive 
applications on remote ma-inframes (a Terminal Access Protocol), R2. Access to the batch processing facilities 
on re-mote mainframes (a Distributed Job Entry ser-vice), R3. Transfer of data between locations (a File 
Transfer Protocol), R4. Development, distribution and maintainence of person-to-person computer based 
information among sites (an Information Transfer Proto-col), R5. Shared access to a variety of programming 
management and support functions such as fault report and change control systems, and R6. Support of 
network monitoring, operations, management and billing. A further requirement is that the resources and 
the operations of the mainframe hosts should be controlled and managed by the individual hosts without 
being affected, in any way, by their par-ticipation in ITT/NET. One well-known technical solution [3] 
to the above requirement is to offload communications support onto a separate computer (referred to as 
the Net-work Interface Machine, or NIM, hereafter), which deals with individual hosts on behalf of the 
ITT/NET user. This minimizes the network's impact on the existing mainframes and, at the same time, maximizes 
its ability to accomodate to constant changes in network configuration (e.g., the con-nection of a new 
host to the network), and func- 203 &#38;#169; 1983 ACM 0-89791-113-X/83/0010/0203500.75 tions (e.g., 
the addition of a new File Transfer feature). This is the approach we have chosen to adopt. Interfacing 
to IBM systems is further complicated since any impact or perturbation to existing IBM program product 
or application environment must be avoided if at all possible. Of the several possi- ble approaches, 
Remote Job Entry (e.g., HASP [4]) emulation is probably the most popular. In this design, the network 
interfaces perfectly with the mainframe IBM program products and requires no change whatsoever in the 
mainframe's mode of operation. However, it does impose a transaction style of transport between the network 
(i.e., NIM) and the mainframes. This point is further dis-cussed in Section 3 below.  2.2 Network Configuration 
Each mainframe is connected to ITT/NET through the NIM, a local IBM 4300. The complete network is formed 
by interconnecting these NIMs through leased communication lines, supplied by the various telephone authorities. 
The physical configuration of ITT/NET is given in Figure 1. Characteristic pro-gramming configurations 
for the host and the NIM are shown in Figure 2. 3.0 FUNCTIONAL ARCHITECTURE Experiences derived from 
existing networks indi-cate clearly that the provision of user-oriented protocols such as those given 
above require a new protocol level to be developed. It is no longer prac- tical to view the communication 
facility as a simple data pipe which can be tapped at the two ends and used for a specific application. 
Rather, a standard programming facility needs to be established to handle host-to-host communications. 
That is, in addition to the protocols listed in Section 2.1, we need a data transport mechanism, which, 
for ITT/NET, is called the Universal Transport Proto-col (UTP), providing RT. A program-invocable transport 
or end-to-end service allowing transparent data transfer among NIM applicatlons and between NIMs and 
mainframes. This collection of functions, taken together, covers the uppermost three layers (4-7) of 
the ISO Model for Open System Interconnection [12], and corre-sponds to what is commonly referred to 
as High Level Protocols (HLP). CUSTOM CUSTOM TAILORED AS DEFINED TAILORED II b I a I l ,NTERFACE IPROCESSORI 
- ---I PROOESSORII MAO.INE   I(30 or VAX) I I MAC.,NE I I LEASED LINE, PUBLIC DATA NETWORK, ETC. 
FIGURE 1. ITT/NET Network Configuration IBM 3075 FRONT END PROCESSOR IBM3033 (NON-SNA MVS) I ~ DISTANT 
NIM YJ ACF/VTAM (MSNF) P A "'" R s T C GUEST H S OPERATING SYSTEM (DOSNSE) OPERATING SYSTEM (VM/SP) 
IBM 4341 HOST FIGURE 2. NIM PROGRAMMING CONFIGURATION The mainframes ("hosts") are connected to NIMs, 
which are in turn interconnected to form a mul-ti-domain, SNA network [5]. The NIMs handle both IBM SNA 
and non-SNA based hosts, e.g., IBM 370s under the MVS operating system with Virtual Tele-communications 
Access Method (VTAM) [6] and DEC VAX under VMS [7] with HASP emulation. This is achieved by running both 
SNA and non-SNA communication packages on NIM: VTAM in a guest operating system and Remote Spooling Communications 
Subsystem (RSCS) [8] as shown in Figure 2 below. (See [9], [I0] for further details of the NIM hardware 
and programming configura-tion. ) 3.1 ITT/NET Hierarchy As the above discussion indicates, the ITT/NET 
protocols are organized into a hierarchy of many levels1: each level uses the functions of the lower 
level, and adds some function of its own for possi-ble use by the next higher level. There are four 
levels of interest in the ITT/NET (see Figure 3), but there may be more than one protocol within a level, 
representing different uses of the lower levels and different services to the 204 upper levels. The lowest 
level of the hierarchyconsists of vendor communication packages, which provide the basic data transmission 
facilities (the communications subnetwork). The next level speci- fies methods for the origin NIM application 
to transfer (logical) messages to a destination NIM or mainframe application. This protocol, the ITT/NET 
Universal Transport Protocol, is used by all higher level services (see Section 2.1) as their common 
host-to-host communication vehicle. At the next higher level arethe building block pro- tocols which 
provide general support services (file access, remote job entry, terminal access and mes-sage transfer) 
for the networked environment. These are also the foundation on which the next and highest level, multi-location 
development pro- tocols are built to serve application specific aspects of communications between remote 
program devel-opment support applications. A diagrammatic illustration of this protocol hierar-chy is 
given in Figure 3 below, together with the corresponding ISO numbers for these levels. FUNCTIONAL LEVELS 
tional partitioning among protocols but also forms the framework for design modularization (see Sec- 
tion 3.2 for further discussions). 3.2 Realizing the ITT/NET Hierarchy: Structural Layering The ITT/NET 
protocols are implemented on an IBM machine running theVM/SP system. This operating system manages the 
hardware machine in such a manner that many virtual machines appear to exist. Each user, when s/he logs 
onto the system, has at his/her disposal a "virtual machine" running the (single-user) conversational 
operating system CMS. In addition to CMS commands and utilities, users are provided the set of ITT/NET 
specific commands or protocols described above. These user-level (building block) protocols perform the 
data proc-essin 9 and communications functions to support the networking needs of the users as well as 
to provide for the creation of more sophisticated, application specific communication services (a Multi-location 
Development Environment). ISOLAYERS MULTILOCATION  I D,STR,BUTEDI D,STR,BUTEDI D,STR,BUTEOI D,S+R,BUTEDI 
I DEVELOPMENT I INTEGRATION ICONFIGURATIONI FIELD , LAYER GROUPENVIRONMENT = +,.,,+o+ ,,,,+,,,+,+,,., 
I ,' BUILDING TERM ALIFEIOSTRBOTEOI I IBLOCKS ACCESS TRANSFER JOB ,NFORMAT,ONLAYER EXEOUT,O° TRANSFER 
IGROUP; HOST-TO-HOST TRANSPORT  p+s I ]+s I THROUGH RSCS NJE POWER/JEP 4 TO 6 BSC I SDLC LAYERS 2,3 
I COMMUNICATION SERVICES COMMUNICATION MEDIUM LAYER 1 ] FIGURE 3. THE II-r/NET FUNTIONAL HIERARCHY The 
advantages of architectural laye'rin9 are well known: it promotes manageability and layer inde-pendence 
through functional grouping and localiza- tion. This is particularly important for the ITT/NET for the 
following reasons. First, it gives us the flexibility to replace level functions with equivalent ones 
without affecting other levels in the hierarchy. Secondly, it provides a framework upon which new protocols 
can be developed. Thus the two critical growth areas for ITT/NET--improvements to current protocols and 
construction of distributed applications--can be planned and implemented in an orderly fashion. Thirdly 
and most importantly, given the NIM pro- gramming base, layering not only provides func- We purposefully 
use the term "level" instead of the ISO "layer", to emphasize the difference between our scheme and that 
of the Open Sys- tem Architecture. In p~rticular the numbering of our levels is entirely arbitrary although 
the choice of points at which to divide the levels is guided--at least in principle--by the OSI mod- 
el. In each user-level protocol there are three logical components (see Figure 4), each distinguished 
by the kinds of operations it performs: User Support Component. USC. A component that interprets user 
commands, accesses user's files, and in general performs operations in direct sup-port of the user. Protocol 
Support Component. PSC. A component that performs operations needed to support the functioning of the 
protocol, but not directly visible to the user: buffering and file attribute--record format, record length, 
etc.--handling are examples of the PSC functions for file transfer protocols. Transport Support Component. 
TSC. A component that transfers information from one place in the network to another by invoking and 
interfacing with the host access method~uch as VTAM or RSCS. The functional layering given in Section 
3.1 inter-act strongly with the above structural decompos- 205 ition. As shown in Figure 4 the lowest 
level (level 1) of the ITT/NET hierarchy is composed of vendor packages such as VTAM, providing basic'communi-cation 
facilities. Thus this level covers the TSC-to-TSC portion of the HLP top-level st ructu re 2 . Level 
2 (UTP) erases network (SNA vs. non-SNA) boundaries to provide a "universal" transport ser-vice. The 
UTP packages the data from these buff- ers and uses Level 1 to transmit the data to the destination machine. 
U3"P uses the SNA communi-cation products in the NIM, in tandem with the non-SNA facilities such as RSCS 
networking [9]) to accomplish this. Structurally UTP is the TSC-to-PSC interface (as well as the pre-and 
post-processings associated with this interface, e.g., packaging of data into a form accepted by the 
TSC). Top level design and test plan are formulated, and through step-wise refinement, the design is 
decom- posed into modules and the logic and data flows that implement these modules. Also, detailed test 
plans are defined to validate the functional, per-formance and interface behaviors of the modules. The 
actual coding and testing (implementation phase) of these modules then follow, and the test results analyzed 
and documented. The next phases (limited availability, general avail- ability and termination) deals 
with the installation, support and withdrawal of the programs. Since our experience so far has been limited 
to the first four phases, we shall, in the following, confine our de-scription of ITP programming process 
to this por-tion of the life cycle. BUILDING BLOCK AND MULTILOATION DEVELOPMENT PROTOCOLS 1 r I HOST-TO-HOST 
...... I TRANSPORT | COMMUNICATION SERVICES I USER PROTOCOL' TRANSPORT suPPORT SUPPORT I --fl SU PORT 
 I ilL I I. FIGURE 4. THE ITI'/NET STRUCTURAL HIERARCHY Thus, the hierarchical functional dependencies 
among HLPs map directly into the levels of "design layering", which, in turn, forms the basis for the 
top-level designs of all ITT/NET end-user proto-cols as will be discussed further in Section 4. 4.0 .Programming 
Process So far we have concentrated on our technical ap-proach. Let us now turn to the ITT/NET pro-gramming 
process and describe the actual implementation of this approach. In the interest of concreteness, instead 
of dealing with the issue in general, we shall concentrate on one specific appli- cation, the VM/CMS 
implementation of the Informa-tion Transfer Protocol (ITP). 4.1 Formalized Methodology As mentioned 
in Section 2, the first step we took is a System 12 communications requirements analysis. This, together 
with the objectives of early avail-ability, extensibility and reliability provides the input from which 
the basic architectural framework (Section 3.2) and the functional specifications and the top level designs 
of individual protocols are de-rived. These activities constitute the first two phases of the programming 
effort conceptual planning and definition. The output of this phase, the functional specifica- tion, 
form the input to the next or, design phase. However, this coverage is in parts rather than as a whole: 
the diversity of these packages and their lack of interworkability makes it impossi- ble to treat the 
ITT/NET as one single, inte-grated network at this level. I TRANSPORT PROTOCOL USER SUPPORT SUPPORT 
 I SUPPO,"T I --fl I "' I' ' ' '1 1 I I ] 4.2 An Example -the Information Transfer Protocol /ks described 
in Sections 1 and 2, analyses of Sys- tem 12 communication requirements disc!:.~ed the need of an information 
transfer service. Tnat is, a function that allows a VM/CMS user to create, edit, file and distribute 
memos, transparently and uni-formly, to other CMS and VAX/VMS users. (An MVS interface is being implemented 
but will not be covered here since it remains to be completed.) The ITP definition phase starts with 
a fea-ture-by-feature comparison of existing information transfer facilities and user needs, in terms 
of com- mand primitives, command parameters and their ex-ecution effects. This results in the extended 
list of message system primitives given in Figure 5. The criteria of level of demand, implementation 
ease and sufficiency are then used to partition this list into three sets as shown in the Figure: a foundation 
or minimal set of basic services, a kernel set of essen-tial features needed to support most near-term 
ap-plications and a value-added set of desirable future enhancements. Based upon this analysis and the 
goal of near-term usability, we selected the kernej set for the initial implementation and .proceeded 
tov~ards its top-leveldesign. 4.2.1 The ITP System As user interface, we selected the the IBM System 
Productivity Facility for VM []3] 3 . This environ-ment, and the design layering of Section 3.2, dic-tates 
that ITP operate as a reentrant SPF 3 This is the environment used for System 12 de- velopment. 206 ~Feature 
M~ HI Set ~ l HI I Systed/ida Preparation Delivery IStora~e/Retrleval I i I I allow use of single prin- 
lallou diipley Ino accounting, [Foundation existing Irity level, land savfng of Isecurity,I edltor(s) 
andlIII~dlate l in~ memos Ibackup/recovery I for=attar(s) Itransfer to Ionto ~t lot advanced I for me=o 
lexplicitly Isecondary =tor~eluser friendly [ [co=position. given list ] features. I luser-ids on I 
I I Ire¢ognized I I I destination I Isystems. I . .... I~l-- lalso provide lalso provides also provides 
Isa=e as Kernel embedded textldistribution file folder foundation I entry facili-and co: list capability, 
i.e. I ty within its capabilities individual IIe=o men.°~ltenvir°n" Iforuarding, Idtsplay and lanswering, 
Iretrieval. ~and status I querying of [  ~ I?utgul~'=l l in addition l in addition l In addition to 
provides ValueAdded to kernel~ Ito kernel ~kernel also protection, lalso allow Iprovides fle-lallovs 
retrieval accounting;editing of Ixible addre-by content and Journallt418, distribution ]ssing,expedi- 
flexible display backup/recovery Icontrol hes-lied and sche- and output capa- and advanced Iders during 
duled deli-bilities such hu=an I text prepara-lvery, auto=a-as specific engineered tion and an-Itt¢ 
ackuowle-lordering, hard- interfaces. Inotation of Idgement,retry copy and archive. lesisting land special 
lhandlln~. I l®e=os. I .... I. I Figure $. Hessage Syste=Services - A Categorization ~rocedure, in 
the user area of the user's CMS ma- chine and interfaces with UTP to effect communi-cation with distant 
NIMs. The programs, files and modules constituting this top level ITP are given below (in PDL notation) 
[14]: mod ITP programs ITPPRI datasets INMEM,DRAFT, INBOX modules ITPGTM, ITPSND, ITPREA, ITPI NP dom 
where INMEM is the CMS file containing the memo to be sent or read, DRAFT and INBOX are the default "mailbox" 
file for storing the (newly created) out-going and incoming memos, respectively. The pro-gram ITPPRI 
is the the primary processor which checks pending incoming memos, retrieves and stores them in INBOX, 
and decodes user commands and calls the appropriate send and read modules for processing the selected 
commands. The modules ITPGTM and ITPINP are common proc-essing routines--routines invoked by other pro- 
USER VM SPFVM USER~I kL ----I s p I ITP ITPI;ND LOCAL NIM SYMBOLS: COMMAND/RESPONSE PDATA FLOW grams 
rather than directly by users (i.e., from the command level). Figure 6 is a (partial) illustration of 
these compo-nents and their functional relationship to SPF, UTP and the CMS file system. (The top-level 
design for the SEND module is given in FIR.7 for illustrative purposes. A complete description is available 
from [11] .) It is worthwhile to point out that at this top design level, we are primarily concerned 
with the func-tions and the functional relationships of the major ITP components (ITPPRI, ITPGTM, ITPSND 
and ITPREA) with each other and with the environ-ment. Thus only the interfaces are specified fully (e.g., 
all possible user inputs are accounted for), whereas most of the processing details (e.g., how the memos, 
are made up and how they are trans-ferred to the recipients)are left unspecified. The task of verifying 
the logical correctness of the design and that it satisfies the ITP service specifi- cation is approached 
from a formal ("verification") as well as an empirical ("testing") direction. Formal techniques for protocol 
verification are still in its early development stage--so far they have only been used to verify a very 
limited set of "gen- eral (i.e., applicable to all) protocol properties, and this is what we confined 
ourselves to". In spe- cific, we verified that ITP satisfies the following Invariant Assertion [14], 
[15]: All valid messages sent by the user (i.e., SEND requests addressed to recipients with valid ~SERID 
and NODEIDs) are delivered to the recipient. Details of the proof are included in the appdendix for readers' 
reference. The main task--the demon-stration that our design meets its specification is dealt with below, 
using the less rigorous but far more practical method of testing. However, we did find that this exercise 
in mathematics invaluable in providing precision and rigor to the final design. USER VM I SPF I_ USER 
1 I-ITPPRI I[ ~X~ I 1 I ITPREA o [amp n DISTANT NIM ABBREVIATIONS: SPFVM SPF VIRTUAL MACHINE FIGURE 
6. I1-F COMPONENTS AND RELATIONSHIPS WITH SPF AND UTP 207 1 proc: ITPSND(SFILE) {FIT/NET ITP send processor 
} 2 scalar SFILE' (fix: name of file to be sent ) F 3 sequence LIST: ADDR (int: list of addressees ) 
4 record ADDR (int: addressee data structure ) 1 USERID { useridpart } 2 NODEID ( nodeid part } 5 scalar 
CHD (int: send/edit/abort indicator ) 6 scalar DRAFT {int cons: default save me=o fil} 7 do1 (Start 
by making up } s display SEND panel (and displaying the SEND } 9 ~ LIST,CHD :: user input (panel to 
get user Input. } I0 while (user input ~ "end") (END PF =>.get Out. } II do2 (Otherwise see what ) 12 
case(CMD) (s/he .ants. ) IS part("edlt") (gdit? ) 14 call SPF to edit SFILE (call 1SPLIh~('SDIT',... 
} I5 part("send") {Send? ) 16 make up memo with SFILE (make up ) as body ( me=o ) 17 send memo to each 
and ( and ship ) everyone in LIST ( it off. } 18 save SFILE in DRAFT {--also save it somewhere. } 19 
part("abort") (Abort? } 20 save SFILE in DRAFT (--just save the body } 21 else (Illegal input? } 22 
 set SEND panel es$ fleld (--tell user so. ) 23 esa¢ ( } 24 od {end of dcehiledo. ) 25 return (Got here 
because user pressed ) 26 corp (END PF, so go back to caller ) FigUre 7. Top-Level PDL Description of 
ITPSND 4.2.2 Function Testing Top-level test cases are devised to detect devi-ations of protocol behavior 
from that prescribed by their specification The basic strategy is exhaus- tive functional testing by 
1. examining the service specification, 2. finding out the logical relationship between the inputs and 
outputs (inputs and outputs are de-fined as anything that flows between ITP and its environment), 3. 
finding all (environment or pragmatic) con-straints that these input conditions and output consequences 
must satisfy and from this 4. deriving all possible input/output combinations and use them as test cases, 
and finally 5. analyzing these cases so all input and output boundaries are covered at least once. 
 4.2.3 Module Organization and Module Testing The above design (Section 4.2.1) is further ex-panded and 
reor.qanized until a level of detail is reached that is appropriate for module specifica- tions. The 
resulting detailed design is illustrated by the following module dependency chart and the PDL expansion 
of Figure 8 and Figure 9 below Test design, at this phase, is based upon logic coverage. That is, a set 
of test inputs are selected and the decision table representation of the mod-ules are formulated to check 
that sufficient cases are covered so that all branches and statements are covered at least once. This 
is followed by the actual implementation, that is, converting the detailed design into code and the carrying-out 
of the tests. In the case of ITP, PL/I was used for most of the coding but since a great deal of essential 
VM system services (e.g., file ac-cess) are not available directly to PL/I, assembler routines were also 
written for the interface func-tions. FIGURE 8. ITP MODULES AND MODULE DEPENDENCIES Algorithm: 1 proc: 
ITPSND(SFILE) {ITT/b~T ITP send processor } 2 scalar SFILE: string(FNSIZ) {fix: name of file to be sent 
} 3 sequence LIST:ADDR (int: list of addressees ) 4 record ADDR {int: addressee data structure ) 1 USERID:strlnE(TKSIZ) 
( uaerid part } 2 NODEID:strLnE(TKSIZ) ( nodeid part } 5 scalar CHD: string(l) (Lnt: seed/edlt/abort 
indicator } 6 scalar DRAFT: strins(FNSIZ ) (int cons: default save memo fil) x.1 use SPFPAHL {int: contains 
SPF panel names } x.2 scalar SUB3: strins(STRSIZ) {int: memo subject ) x 3 scalar RC: integer (int: rat 
code from lwr Ivl rout) x.4 scalar THPMEH:strLng(FNSIZ) (Lnt cons: file for tamp use } ( ) 7 dol {Start 
by Baking up } 8-9 . LIST := '' {initial vale for input parms ) .1 . SUBJ := " (so we can call INP to 
display ) 2 . CMD := '' (SHDPANL and set user input. } .3 call ITPINP(SNDPANL,LIST,SUBJ,CHD RC) I0 while 
(RC ~ "end") {END PF => get out. ) II do2 {Otherwise see what } 12 case (CHD) {s/he wants. ) 13 part 
("atiLt") (Edit? } 14. call SPF to edit SFILE (call ISPLIh~('EDIT',... ) .I set SNDpANL msg field with 
editor return code 15 part ("send") (Send? } 16-17 call ITPHAK (LIST, SUBJ,THPHEH,RC) .1 if (bad RC) 
(Yes =o use SUBJ to make up ) 2 then (a header £11e--THPHEH, ) .3 set SNDPANL rose field with RC }.4 
else (so we can append } .S append SFILE to THPHEH(body to it and ship if off ) .6 call ITPXFR(LIST,THPMEH,RC) 
(to everyone in LIST ) .7 set SNDPANL ~sg field with RC { ) .8 fi ( } 18 save SFILE in DRAFT (--also 
save the body somewhere. } 19 art ("abort") (Abort? ) 2O save SFILE in DRAFT (--Just save the body ) 
21 else (Illegal input? ) 22 set SNDPANL msg field (--tell user so. } 23 eaac ( ) 24 od (end of doehiledo. 
) 25 return (Got here because user pressed ) 26 corp {E~ PF, so go back to caller. } Figure 9. Detailed 
PDL Description of ITPSND 208 This completes our description of ITP services. But before turning to 
the next topic, a summary of current ITP status might be of interest: The ITT/NET Information Transfer 
Protocol Function - to provide &#38;n integrated set of facilities for text preparation, distribution 
and storage (currently supports VM*to*VM and VM-to-VAX/V~IS, VH-to-VAX/~IX transfer) Future Enhancements 
-other interfaces (VH-to-HVS)  -data encryption/decryption - memo fll/nE/retrievin8 - automatic answering/forwarding 
- centralized sto=age/archlval services  Vital Statistics  -2.1 KLOC PL/I (13 Modules),, 1.9 KLOC 370 
assembler (17 modules) -12 staff months desIgn/coding/testLn8 -base veEslon completed 08/30/81, current 
version 02/28/82 -no known bugs a further stress testing required - installed on: three IBM 4300s at 
ITT Shelton and Stratford - level of u~age: all Progrannnir~ computer users Features -text preparation, 
storage as well as dellvery in one package -integrated into cuErent data processing environment -can 
handle diverse data sources - can be interfaced to existing document/library systems 5.0 Concludin9 Remarks 
The ITT/NET is a high-level, applica-tion-independent framework for the construction of distributed systems 
and programming development tools. It eliminates the need for application-specific communication protocols 
and support programming. The framework consists of a network-wide commu-nications access method (the 
Universal Transport Protocol), and a set of utilities for file and job transfering (the File Transfer 
Protocol, the Infor-mation Transfer Protocol and the Distributed Job Execution function). Since ITT/NET 
is built on top of existing operating systems and communications methods, considerable care was given 
to the structuring of protocols to achieve this "vendor-product" independency. This paper presents the 
crucial decisions in the struc: turing of the various protocols. We hope that the architecture were formulated 
with caution so the decisions we made will prove to be sound architec- tural choices--but only l~ime 
will tell. A second focus of this paper is on the programming disciplines and practices used to realize 
this archi- tecture. Emphasis was placed upon methods based upon theoretical foundations such as formal 
proofs and testing techniques. Our experience so far is that formal methods are indeed practical and 
that they contribute to improved quality in significant ways: they bring in precision and order to the 
programming process, and provide a standard lan- guage during each development phase for communi- cation 
among users, managers, designers and implementers. 6.0 References [1] Cox, J.E., Lawson, D.A., Denenberg, 
J. and Van den Brande, F. A Digital Switch for Wide Range of Application. ICC'80 Conf. Rec. (1980)~ 46.1.1 
-46.1.7. [2] Lawson, D.A. A New Software Architecture for Switching Systems, IEEE Trans. Comm., voI.COM-30 
(1982), 1281 -1289. [3] Roberts, L.G. and Wessler, B.D. Computer Network Development to Achieve Resource 
Sharing, AFIPS SJCC, vo1.36 (1970), 543- 549. [4] HASP Networking PRPQ: System Programmer's Guide. Order 
No. SH20-1981, IBM Corpo-ration, Data Processing Division, White Plains, NY. [5] Sy'stems Network Architecture 
General Informa- tion. (1st Ed.) Order No. GA2q-3102-0, IBM Systems Development Division, Research Tri-angle 
Park, NC (1975). [6] Advanced Communications Function for VTAM General Information: Concepts.(2nd Ed.) 
Or-der No. GC27-0463-1, IBM Corporation, Data Processing Division, White Plains, NY (1980). [7] VAX/VMS 
Primer. Order No. AA-D030A-TE, Digital Equipment Corp., Software Distribution Center, Maynard, MA (1978). 
[8] IBM Virtural Machine/370: Remote Spooling Communications Subsystem Networking General Information. 
(2nd Ed.) Order No. GH24-5004-1, IBM Corporation, Data Process-ing Division, White Plains, NY (1980). 
[9] IBM Virtual Machine/System Product: Introduc-tion, Order No. SC19-6200. IBM Corporation, Data Processing 
Division, White Plains, NY. [10] Kimbleton, S. R. and Wang, P. S.-C., ITT/NET Communication Support for 
Program Development. Electrical Communication, vol.57, no.4 (1983), 320 -325. [11] The ITT/NET Information 
Transfer Protocol. Internal Documentation, ITT Programming Technology and Development, 1000 Oronoque 
Lane, Stratford, CT 06497 (Aug. 1981). [12] Data Processing -Open Systems Intercon-nection Basic Reference 
Model. International Standards Organization, Draft Proposal ISO/DP 7498 (1980). [13] Structured Productivity 
Facility for VM/SP Program Reference. (lst Ed.) Order No. SC34-2047-0. IBM Corporation, Data Processing 
Division, White Plains, NY (1981). [14] Linger, R.C., Mills, H.D. and Witt, B.I. Structured Programming. 
Addison-Wesley, Reading, MA (1979). [15] Owicki, S.S. Specification and Verification of a Network Mail 
System. in "Program Con-struction", Lecture Notes in Computer Science, Springer-Verlag, New York, NY, 
vot.69 (1979), 198 -234. 209 Appendix. Formal Correctness Proof for the ITT/NET ITP In order to carry 
out the proof, auxiliary variables are needed to record the history of ITP memo proc- essing: we shall 
use H(M1,M2, r) to denote the se- quence of messages passed from module M1 to module M2 that has "r" 
as its recipient s. This ena- bles us to restate the correctness assertion (Sec- tion 4.2.1) in terms 
of the history of messages passed between the user and ITP: For every request and every valid user u 
and recipient r, the assertion f=(H(u,ITP, r)=H(ITP, r,r)) holds true. We shall proceed by first analyzing 
the executior: sequences of ITP programs using ~the E-chart and trace table techniques of [14]. From 
the results of this analysis and the UTP Invariant Assumption: g=(H(ITP, UTPSND, r)=H(UTPRCV, r, r)) 
we then deduce, using ordinary logic, that the above assertion in fact holds. Proof: From the PDL descriptions 
of the various ITP mod- ules (see--Figure 7 --and [11] we identified four separate ITP paths (labelled 
path 1-4) in the (loop-free version of the) E-chart as shown in Figure 10 We now proceed to look at its 
behavior along each path (i.e., the trace table for that path) and show that the invari- ant assertion 
holds for each case. For brevity, the letters U and R are used to desig- nate the message histories H(u, 
ITP, r) and H(ITP, r,r), respectively. Each row of the trace table expresses the current value of the 
data items U and R (denoted as U1, R1 for the first row, U2, R2 for the second row, etc.) in terms of 
their previous values. The initial histories for messages passed from the user to ITP and from ITP to 
the recipient are represented by HOCu,ITP,r) and H0(ITP, r,r), respectively. (pATH 1) T X:~ T , ATH 
2) i (PA3 3) ~ (PA'il-m41 FIGURE 10. ITP EXECUTION CHART The notation as well as the discussion for 
our proof follows closely that of Linger (Ref.[14], Chap. 6], which should be consulted for de-tails. 
function f = (H(u,ITP, r) = H(ITP, r,r)) program (see Figure 10) I case (CMD) 2 part ("SEND") 3 . do 
get user input 4 . if (user input = "send") 5 . then 6 . do1 x := current(LIST) 7 . while (x ~= empty) 
 8 . do2  9 .... call UTPSND 10 .... next (LIST) 11 od 12 . return {path 2} 13 . else 14 . return 
{path 1 } 15 . od 16 part ("READ")  17 . call ITPREA 18 . return {path 3} 19 else 20 . return {path 
4} 21 esac  proof I. path 1 (SEND, abort) part condition U(=H(u,ITP,r)) R(=H(ITP,UTPSND,r) 1 C~H)=SEND 
UI=H0(u,ITP,r) RI=H0(ITP,UTPSND,r) 3-7 U2=LIST members R2=RI addressed to r 8 abort U3=UI R3=R2 derivations: 
U3 = H0(u,ITP,r), R3 = H0(ITP,UTPSND,r) path function: H(u,ITP,r) = H(ITP,UTPSND,r) This together with 
the UTP invariants (9) leads directly to the intended function f. II. path 2 (SEND, -abort) part condition 
U(=H(u,ITP,r)) R(=H(ITP,UTPSND,r) 317 CHD=SEND UI=H0(u,ITP,r) RI=H0(ITP,UTPSND,r) U2=LIST members R2=RI 
addressed to r 8 -abort U3=UI+U2 R3=R2 11 LIST-=empty U4=U3 R4=R3 12 U5=U4 RS=R4+head(U2) 13 U6=U5 R6=R5 
11 LIST-=empty UT=U6 R7=R6 12 US=U7 R8=R7 13 U9=U8 RgfR8 derivations: Un = ... = U3 = H0(u,ITP,r) + 
LIST members addressed to r Rn = ... = R1 + head(tail(tail...(U2))) + ... + head(tail(U2)) + bead(U2) 
= R1 + U2 = H0(ITP,UTPSND,r) + LIST members addressed to r, path function: H(u,ITP,r) = H(ITP,UTPSND,r). 
 This, in conjunction with the UTP invariance then yields the intended function f. III. path 3 and 4 
(~SEND) part condition U(=H(u,ITP,r)) R(=H(ITP,UTPSND,r) 1 -(OPT=send) UI=H0(u,ITP,r) RI=H0(ITP,UTPSND,r) 
20 U2=U1 R2=RI derivations: U2 = H0(u,ITP,r), R2 = H0(ITP,UTPSND,r) path function: H(u,ITP,r) = H(ITP,UTPSND,r) 
 This together with the trrP invariance (S) leads directly to the intended function f. pass result pass 
surf This concludes our formal proof. Note that what has been proved was the "sufficient correctness" 
of ITP [14], since our invariant assertion says noth- in 9 about invalid SEND requests (requests ad-dressed 
to invalid USERIDs or NODEIDs). 210    
			
