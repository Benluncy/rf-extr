
 ALGORITHM AND PERFORMANCE EVALUATION OF ADAPTIVE MULTIDIMENSIONAL CLUSTERING TECHNIQUE Shmya FUSHIMI 
Masaru KITSUREGAWA Masaya NAKAYAhJA Hldehlko TANAKA and Tohru MOTO-OKA Department of Electrical Engmeermg 
Umversity of Tokyo ABSIRACT This paper proposes the multldlmenslonal cluster lng technique called GKD-tree 
method which IS fully adaptive to both of tuple and query dlstrlbutlons The method 1s bdsed on the theoretical 
analysis of the per- formance of multldlmensional clustermg Its algorithm and perIormance are described 
It IS shown that GKD tree method can largely reduce the average number of page acccs~cs bar scvc~al dlstrrbullons 
Its behavior IS analyzed and the modlhcatlon to the algorithm IS sug- gested to further improve the performance 
GKD tree method was frst developed as the physical database or ganlzatlon of the relatIona database machine 
GRACE Ihe lmplementatron Issues of GKD-tree method m the database machine are also discussed Introduc.tion 
Multldlmenslonal clustering techmque has been widely recognized as the promising method of the phy- sical 
database desrgnr51 Several algorithms have been proposed and evaluated[ I31 But none of them were fully 
adaptive to both dlslrlbutlons of tuples and queries In general tuples are dlstrlbuted with some biases 
In the space formed as the CartesIan product of domains of attributes For example the relation EMPLO 
rbE(NAME AGE DEPARTMENT SALARY) may contain tuples most of which have values from 20 to 40 m the AGE 
attribute when they share the value programmlng In DEPARTMCNT at tribute In addition queries Issued to 
that relation are distributed also with some biases in the space consisting of all possible queries IO 
see this consider thr lyplcdl Permlsslon lo copy wlthout fee all or part of ttus material LS granted 
prowded that the copies are not made or dlstnbuted for direct commercial advantage, the ACM copyrIght 
notux and the Utle of the pubhcatlon and its date appear, and notxe IS gwen that copymg IS by permwslon 
of the Assoclatlon for Computmg Machmery To copy otherwse, or to repubbsh, reqmres a fee and/or specdic 
permIssIon @ 1985 ACM 0-89791-160-l/85/005/0308 $00 75 Institute of Industrial Science Umverslty of Tokyo 
 sllualion in which a number of queries to EMPLOYEE. relation refer to the NAME attrlbute with restrlctlon 
predicate on DEPARTMENT Another example LS that lhc clerk of the bank runs the dalabase appllcallon pro 
 gram many times which 1s apphed to checking accounts of less than 1000 dollars balance to subtract the 
check service charge Therefore the ultimate objective the multldlmensional clustering technique should 
achieve IS summarized to mlnlmlze the average number of page accesses for given distributions of tuples 
and queries which reveal such several biases in the real envlron-ment In this paper the new multldlmenslonal 
clustering techmque called generalized KU-tree (abbrcvlatcd GKD-tree) method IS proposed GKD-tree method 
1s essenllally the extension of KU-lrce rncthod[ l and uses the space splitting technique as opposed 
to the metric based one17] The technique achieves the adap-tlve page partltlonmg to both of distributions 
based on the theoretical analysis of the average number of page accesses with multtdlmenslonal page partltlonmg 
as-sumed Its performance IS evaluated by comparing with that of KD tree method It IS shown that GKD-tree 
method can largely reduce the average number of page accesses This method however, 1s not always superior 
to KU tree method Then the algorithm 1s further lm-proved by analyzing its behavior of partltlonmg process 
GKD-tree technique is developed as the physical data-base organization of the parallel relational database 
machine GRACE[ 2 51 Hence it accompanies some assumptions on Its implementation environment rhese implementalion 
Issues are also discussed We will use the terms of relattonal model such as relation and attribute throughout 
the remaining part of this pa- per 2 Uaslc lheorem and Queries d I Basic lheorem for Analyzmg Multldlmenslonal 
Clustering Let R be the relation having k attributes A, And let T and N be the number of tu- A, plcs 
of I2 and the number of pages storing H respectively D denotes the CartesIan product of the (2) domams 
of attributes referred to by the relation 1 e r=k D= n dom(A,) We call D the base space of the rela-r=1 
Further define the followlng set and function tion To derive the formula which expresses the aver-age 
number of page accesses, we use two dlstrlbutlon UP,) = I 9s B I c-l (PI q) I functions and (1) Tuple 
Dlstrlbutlon Function D(t) H(P]) = $ Q(q)@ D(t) is defined so that D( t)=n 1f7 R(A, Ak) 9s r(PJ contains 
n copies of the tuple t=(v, k ) Unless R(A, ,Ak) 1s created by transpose clearly We have the followmg 
theorem n=O or 1 Trivially [Theorem l] For given Q(q) and the set of pages pN{ the average number of 
page accesses 1s $ D(t)dt = T lP1 1~ D given by D(t) affects the possible partltlonmgs of tuples Into 
 F = E ff(P,) (3) pages a=1 (2) Query Dlstrlbutlon Function Q(q) [Proof] Q(q) IS the normalized dlstrlbutlon 
function of the query that 1s 71 = $ x (q)Q(q)dq qt Q Q Q -) [O 11 where = ,r,(!,6 (P) q))Q(q)dq (by 
(2)) Q = ] all posszble qwmes j and = f $ 6 (pJ q)Q(q)dq J=lqc 4 $ Q(q)@ = 1 qE Q  = f $ Q(q)@ (by 
defimtlon) J=19ErfP,) Let n (q) denote the number of pages accessed by the query q Suppose D is divided 
into N pages = 5 H(pJ) (by definition) In general i7 the average number of ]=I PI PV' page accesses for 
given Q(q) can be obtamed first by multlplymg IT (q) by Q(q) then by mtegrat,ng it on q The theorem clams 
that the average number of page Then we have accesses can be given by summmg up H(p,) the ae gbt of pJ 
obtamed by integrating the weights of qlieries accessing pJ Note that F IS determined only F = j-n (q)Q(q)dq 
(1) 9 Q bv Q(q) and lp, p,( and that the theorem holds maepeadent of the clustermg algorithms Here we 
introduce some useful functions aid predl-cates fl (9 q) IS defined to be true if the page p1 1s 2 2 
Queries accessed by q and false otherwise Then define the We will focus the selectlon operations and 
consider binary function d (9 q) as follows queries formed by conjunctions of ranges That 1s the domain 
of each attribute assumed to be the ordered 1 If fl(pJ q)=he set and the query Issued by the user can 
be put in the (3 q, = 0 if R (pl q)=false the general form 1 Now we have as the concrete form of TI 
(q) z, 5 21,s y,A AZL5vksyk whose meanmg IS that select tuples 1* here v% the value bon Tuples ,n the 
page are sublect to be stored I one actual of Its t-th attrlbute 1s greater than or equal to zz and PP 
This rule g,ves the one-to-one mappmg between pagesand less than or equal to y, All the domains are further 
actuQ1 pages Page means here the subqpace of the base space of the rela- assumed to be upper and lower 
bounded sets I e for any V,Edom(A,), MIN,Iv,sMAX, Then, the predl-query (Fig 1) Then R (pJ q) IS reduced 
to the follow-cate bounded by MIN, and MAX, can be interpreted as mg form no selection predicate for 
attribute A, IS involved m the query Hence we can assume without loss of generality fl (pJ q) = pJ n 
q* # that every query refers to all of attributes Consldermg z15y, we can regard the query as the point 
i [z,,x] 5% x,S(3,Ay,Za, for all z (4) m the 2k-dlmenslonal space That LS Now for given page pJ = fi 
[a, /?,J] the queries a=1 Q = 1 It [x, Y,] 1 z, y,Edom(A,) for aU z 1 which satisfy R (pJ q) can be 
represented as the shaded a=1 area in Fig 1 for each attribute This area gives the ex-act representation 
of r (p,) This space is formed as the Cartesian product of k The formula (3) can be computed for some 
simple right-angled triangles The I-th component of the dlstrlbutlons of queries and shows interesting 
query corresponds to the point in the z-th right-angled results[151 For example if we assume that range 
triangle Q, as shown in Fig 1 Three points m Fig 1 queries are uniformly selected on Q and that the base 
show three kmds of possible cases The pomt A in space 1s partitioned into the lattice where the domain 
of Fig 1 represents the normal range predicate for attn- A, 1s divided into n, intervals we have bute 
A,, whereas the pomt B and C correspond to the situations that no predicate and exact match predicate 
are given to A, respectively Therefore this class IS general and large enough to include not only the 
range queries but exact match and partial match queries Since we consider the range queries and multidl-menslonal 
clustering, the predicate 0 (pJ q) defined above becomes definite By mulhdam~onal clustenng we mean the 
clustering procedure which produces pages = O( f$ by sphttmg the base space recursivelv along more than 
one axes Therefore all of pages are of hyperrectangle form m the base space pJ = d [azJ a,] Hence we 
That is the average number of page accesses IS re- a=1 can express the page as the pomt m Q as well as 
the duced inversely proportional to the 3 s power to the k-th On the other hand we have the performance 
of the tradltlonal one-dlmenslonal access method by letting n,=N %= =nk=l N 1f = --+1---- MAX, B 3 3N 
 = 0 $ I I This result clearly shows the potential superior,ty of the 6 mult a,menslonal clustermg to 
the classical one-dlmenslooal access method 3 Algorithm of Generalned KD-tree MIN, MAX, -X1 3 1 Generaked 
KD-tree Generalized KD-tree (GKD-tree) IS essentially the 0 The 1 th component of P, extension of KD-tree 
r4 51 For comparison we first briefly review the KD-tree method For given relation whose tuples fit m 
N pages KD-tree method first selects the value of attrlbute A, of some tuple (say y ,) such that It dlvldes 
the whole set of tuples evenlJ into two The I th of Q subspaces D, and D, That IS D, and Ds are created 
by cutting the base space along the line (value of Fig 1 Representation of Queries and Page A,) =y , 
so that D, and D, contains N/2 tuples each and that D, contams all the tuples whose A, values are less 
or equal to y 1, while D, contains others Here the value thus selected and the attribute A, are respectively 
called dzmzmanator ualue and d?.scnmanator attnbute We simply call this pan dzsnmznator For dlscrlmmator 
value y I and dlscrrmmator attribute A, we have Dl = [h&#38;N, y,]X[MIN, MAX,]X x [MIN, MAX,] and D, 
= [Y , MAX,] X [MIN, MAX,] X X[MIN,,MAX,] Then this step IS recursively apphed to D, and D, with page 
number N/2 and wkh the drscrlmmator attrtbutes changed in lhe cychc order as A, A, t A,, A, until the 
produced subspace contains tuples which fit m one page The KD-tree IS created at the same time whose 
node stores the pan of dlscrrmmator attribute and value produced at each recursion step along with pointers 
to its left and right sons The dlscrlmmator at-tribute of the node at level z 1s thus z modulo k + 1 
Since KD-tree method divides the base space recurslve-ly into hyperrectangle pages range queries are 
elegantly processed and page overflow/underflow problems are resolved by local and dynamic page spilt/merge 
techmquef4 1 In addition, this method is adaptive to the tuple dlstrlbution in the sense that pages created 
by the algorithm are always fully loaded with tuples in contrast to the multldlmenslonal trle methodsl 
I21 On the other hand, It is obvious that the KD-tree algo-rithm only respects the distrlbutlon of tuples 
and lg-nores how and what queries are issued The tuples fre-quently accessed m a bunch may be dlvlded 
into rather many pages As a result relatively many pages would be accessed on the average The algorithm 
can be made adaptive also to the query dlstrlbutlon by first mtroduclng the degree of freedom on selecting 
the dlscrlmmators and then by supplying the appropriate procedure to select the op-timal dlscrlmmator 
at each partltlonmg step provided that the space concerned contains tuples of n pages we can use any 
of k attributes and for each of them any of n-l values as dlscrlmmator candidates2 When the procedure 
to select dlscrlmmators IS given page parti-Lonmg will proceed as follows First we select one of k (N-l) 
dlscrlmlnator candidates by this procedure and split the base space by them Suppose the candl-date (A,,y,) 
1s selected and the resultant subspaces contain tupies of n and N-n pages respectively Then this step 
1s recursrvely applied to the subspaces with the numbers of pages n and N-n until the resulted space 
contains tuples of one page or less For such page par-trtlonmg the index structure IS created as n-r 
the KD-tree method The node stores the the pan of drscrlml-nator attribute and value along with pomters 
to left and right sons The tree thus constructed 1s called the ga- eralued KD-tree (abbreviated CKD-tree 
) ZAIthough KD-tree IS generalned m similar form ln@ we take the ongmal defimtmn L 1 1 as the KD tree 
The only difference from the KD-tree method 1s that dlscrnnmator attributes and values are selected, 
not by the circular shifting and evenly partltlonmg basis, but by some procedure which should give op-timal 
dlscrlmmator pans The flexlblhty of the algorithm can be ldentlfied by the number of partltlonmgs it 
can generate (denoted by C(N), where N 1s the number of pages into which tu-ples are partitioned) For 
GKD-tree C(N) is comput-ed by the recursion N-l C(N) = c k C(a) C(N-a) %=I Then we have kN-1 (NBl) x 
(4k)N- /N J, (N-1) For KD-tree, this number IS always one, since the se- quence of dlscrlmmator values 
and attrlbutes are deter- mmed a prior-1 for given tuple dlstrlbutlon It is clear that the GKD-tree gives 
much more flexlblllty to the query dlstrlbutlon as well as tuple distribution than KD-tree This suggests 
that lf such a flexlblhty can be fully utmzed by the appropriate algorithm for selecting dlscrlmmators 
the average number of page accesses will be largely reduced Note that GKD-tree still enjoys advantages 
of KD-tree such as good clustering property even for range queries and ability to split/merge pages dynamically 
m case of page overflow/underflow Note also that GKD-tree achieves the largest number of par- tltlonmgs 
under the condrtlon that pages are always ful- ly loaded 3 2 Algorithm of Selectmg Dlscrlmlnator AttrIbutes 
and Values Recall the clustermg prmclple that the set of tuples frequently accessed m the lump should 
be stored in as small number of pages as possible The same effect would be achieved if we follow the 
strategy that the set of tuples frequently accessed should not be partltloned and the set of tuples rarely 
accessed should be first par-tltloned as long as possible We can ldentlfy such tu-ples by the followmg 
theorem Suppose the page pJ= I? [o,,B,] 1s to be divided a=1 into two on the dlscrlmmator attribute 
A, by the dlscrlmmator value y, (a,Sy,5.@,I) Then there produced are two subspaces pJ1(ytJ) and pJ7(yo) 
where PJ (YLJ) = [a lJ P,,lx x[atJ Y,IX Ia,] pk] 1 and PJYJ = [a 1y8 ,] IX x[Y,*P,]lx x[ak, Bk] 1 Let 
P, (Y,) be P~ (Y~~) n P~ (Y,~) which 1s the hyper- plane m the base space [Theorem 21 H(P])+ff(PJY,])) 
= H(P, (Y,]))+H(P] (Y,)) (5) or if we write H(a I1 fl ,I k] pk]) for H(Pl)v ak] @k,) ak, @k,) ak, Bk,) 
aklB8kl) c6) [Proof] Consider Q, the prolectlon of Q onto the domain of attrlbute A, (Fig 2) The whole 
shaded area represents the queries accessmg p, m the figure When this page IS partitioned into p, (~,~) 
and pJr(y,) by the value y,) [a, a,] the T-th component of p, IS dlvlded Into [ Z] r,S [ and Y,~,@,~] 
Other components of p, are left unchanged In Q, the queries accessmg these subpages V The I th component 
of Q Fig 2 Relationship between Pdge Partionmg and Page Boundaries are deplcted as vertically and horizontally 
shaded areas respectively In Fig 2 The cross-shaded area means the overlap of these two query sets and 
can be regarded as the queries accessing the virtual pai5 io, (r,)=[a II B ,]lx x [Y,] Y,]lX [ ,I flkl 
1 By the well-known property on the addltlveness of the mtegration regions clearly the theorem holds 
Suppose that tuples be partItioned mto N pages p, The average number of page accesses 1s Pl expressed 
In (3) Now further partition the page p1 on attribute A, by the value y,, By theorem 2 we have the new 
average number of accesses as E- = H(pl) + + H(P~-,) + H(pl (ytl)) + H(pl+(yv)) + WP,,,) + + H(P,) 
 = 5 H(PJ + H(P~ (Y,~)) ]=I = F + H(P~~(Y,~)) Therefore the average number of accesses Increases by 
H(plA(yv)) by this page split It should be noticed that if the dlscrlmmator value IS selected so that 
the set of tuples frequently accessed IS partLoned then p, (y,) 1s virtually accessed by queries frequently 
issued hence H( pJ (y,)) becomes bigger From this observation we have the following algorithm Input N 
the number of pages the tuples fit into and D, the space to be partitioned output The partitioned page 
space and Its associated GKD-tree The node of GKD-tree consists of four fields dlscrlmmator attribute 
field discrlmmator value field and two pomters to left and right sons Algorithm First select N-l candidates 
for each of k attributes to get all of possible dlscrlmmator values This 1s done by sorting tuples on 
each attribute and then by selecting values which are on the page capacity boundaries Then compute H(P~ 
(YJ) (2= 1 k ]=l N-l) for each of k (N-l) candidates Nevt take value and attn-bute such that they give 
the mmimum value of ff(pl (y,J)) then split the space by them Into left and right subspaces as described 
above Allocate the node and store thlS pair as the dlscrlmmator therein These form one recurslon step 
Suppose the base space be divided at this step mto left sub-space ( Dl) and right subspace (D,) contammg 
tu-ples of 7~ and N--n pages respectively Then apply this step recursively to each of D, and D, with 
page number n and N--n respectively until the 312 given space contains the tuples of the page size or 
less At every recursion step two pointers In the nodes are arranged so that they correctly point to their 
left and right sons to maintain the recursive structure of page partitionmg When there exist more than 
one candidates which share the mmimum, selected 1s the one which sphts the given space most evenly to 
make the resultant tree balanced as much as possible This algorithm does not accompany the backtrack 
but goes straight by selecting the locally optimal dlscrlmmator at each recursion step Therefore it does 
not always achieve the exactly optimal partltlonmg But it 1s guaranteed therem that the bunch of tuples 
fre-quently accessed together is never partitioned by utlhz-mg the degrees of freedom on selecting dlscrlmmators 
The large performance improvement IS expected Note that the algorithm is fully adaptive to the tuple 
dlstrlbu-tlon This 1s lmpllcitly incorporated when dlscrlmmator candidates are computed that is, they 
are selected so that resulted pages are fully loaded 3 3 Time Complexly Assuming the time complexity 
of the computation of H(plA(yv)) be 1 ae show the whole time complexl-ty (denoted by TC(N)) of the algorithm 
for partitioning the base space into N pages The best case 1s when tuples are always dlvlded evenly Then 
TC(N) = k (N-l)+2 TC(N/Z) that IS TC(N) = k ( (logN-1) N+l) = U( k N IogN) The GKD-tree IS then completely 
balanced The worst case corresponds to when one of two resultant spaces contails only tuples of one page 
at every recursion step We ha%e for this case TC(N) = k (N-l)+TC(N-1) hence TC(N) = k N (N-l)/2 = O(k 
N2) The GKD-tree for such page partitioning grows into the hnearly connected link rather than the balanced 
tree Performance Evaluation 4 1 Behavior of Algorithm We first examine the behavior of GKD-tree algo-rlthm 
while It partitions the base space As mentioned before the query distribution does not seem to be consldered 
unlform in the real environment Among the tuples some are frequently accessed and others are not This 
introduces the undulation of the access pat-tern in D there are many moun!ams and inevitably many valleys 
(It 1s difficult for our mtultlon to grasp this pattern correctly since Q has the dimension two times 
larger than D See section 4 3) Therefore the query and tuple dlstrlbutlons are artlficlally generated 
to offer such various circumstances Example I We examine the behavior of the algo-rithm for the following 
query and tuple distributions We make mountam s in the query distrlbutlon by overlapping five subdistributions 
each of which contams one mountain in the different area, as illustrated m Fig 3 where k=2 The details 
on this query dlstnbu-tion can be found in Appendix By GKD-tree method, the base space is partitioned 
into 64 pages Tuple dls-trlbutlon is assumed to be uniform for slmphclty Therefore, all of pages have 
the same size of area Fig 3 also shows the GKD-tree produced for these dls-trlbutlons We observe that 
as a whole the algorithm behaves in the way we want it to do The algorithm first tries to divide the 
base space D so as not to cut across the top of the mountam In other words, the base space IS cut along 
the valleys In this phase the correspondmg GKD-tree grows to become balanced After that it reluctantly 
begms to cut the mountain areas while still obeys the order that the summit area of the mountain should 
not be cut So it creeps and goes around the skirts of the mountain to climb and cut The GKD-tree resulted 
in this pnase has the shape of almost linearly connected link As a consequence the GKD-tree is so produced 
that it IS globally balanced but locally grown straight Note that this shape directly reflects the query 
dlstrlbutlon Thus, since the leaves at rather low level point the pages near the top of the mountain, 
the lower level the leaves exist the more frequently the correspondmg pages are accessed Ezample II Next 
we examine the case m which the tuple distribution 1s also biased In the query dlstrl-butlon one mountam 
1s simply placed at the center of the base space On the other hand the tuple dlstrlbu-tion function has 
2 k mountain? at symmetric places near boundaries of the base space This situation IS ll- lustrated m 
Fig 4 where kc2 The details about these two dlstnbutlons are specified m Appendix Since only the center 
of the base space IS frequently accessed, the space IS partitioned so that the center area IS surround- 
ed by many small pages The GKD-tree produced is essentially the hnear chain, and never balanced It should 
be noticed that GKD-tree techmque skillfully makes use of the fact that tuples and query accesses are 
accumulated in the different areas Tuples are accumu-lated m the area to which accesses rarely occur 
hence partitioned into rather many but small pages On the other hand the area frequently accessed IS 
split into only a few pages base 11 space MAX2 I I base space -MIN: MAX] Fig 3 IMIN2 A Peak of Query 
Tuple Dlstrlbutlon Example of Page Partltton (~=64 k=2) Dlstrlbutlon 1s Uniform and GKD-tree (I) MIN2 
Peak of Query Dlstrlbutlon Peak of Tuple Dlstrlbutlon Fig 4 Example of Page Partltlonmg and GKD-tree 
(II) (N=32 k=2) 4 2 Performance of GKD-tree Method Here we evaluate the access performance of our al-gorlthm 
The query and tuple dlstrlbutlons examined here IS the same as Ezample II except that k =4 For these 
distrlbullons the average number of page accesses 1s depicted m Fig 5 For comparison the per-formance 
of KD-tree method IS associated there The figure shows that the average number of page accesses 314 
-i--- 96 6. 126 256 512 Total Number of Pages Fig 5 Performance Comparison between KD-tree Method and 
GKD-tree Method 1s largely reduced by GKD-tree algorithm In these examples the query dlstrlbutlon was 
biased in each domain of attributes As an example of the query distribution in which the distributions 
are rather dlfTere?t among attributes consider some attn-butes are referred to by the evact matcn predicates 
through a number of queries while others are accessed by predicates of rather large range mtertals For 
such distribution the GKD-tree algorithm partitions the space only a!ong the ayes of attributes in the 
former category This IS because for such an attribute A, any discrlmTnator value y,, g1Le-r zero to H(plb(yv)) 
which means that no page accesses increase when this attribute is used in partitioning Therefore the 
average number of accesses IS kept about one Of course the classical access method can be applicable 
in this case but it should be noted that GKD-tree method relieves the physical database designers of 
complicated work on access method selection That 1s if the classical methods IS fully applicable the 
GKD-tree method then automatically produces the same index and page partl-tlonmg as they do 4 3 DIscussIon 
We conducted a number of other experiments to get the data on multldlmenslonal clustering by supplying 
various query and tuple drstrlbutlons Some of them shoaed the GKD-tree method was completely superior 
to KD-tree method which 1s what we expect-ed On the other hand, we confronted several cases m which GKD-tree 
method was defeated by KD-tree method which at first was our surprise Such phenomena likely occur when 
(1) the number of attrl-butes used by clustering 1s relatively small and (2) the number of mountain? 
IS also relatively small but rather large This IS explained by exammmg the an-tegrahon eflect of the 
query dlstrlbutlon As an example of this effect, suppose the query dlstrlbutlon be flat on Q Then, what 
is the intuitive shape of the access pat-tern to 07 The answer can be given by partltlonmg the base space 
into mfimte number of small pages to have the average number of hple accesses for each tu-ple Define 
the p(f)=H(v,,v, ,vk vk) for tuple f=( v, vk) Then we have [*sl p(f) = hm H(u, v,+E, vk*vk+Ek) E,'O = 
( fi ( 2/MAX,2 ) ) a=1 Y ( fj ( -( v,--MAX,/2 )2+WAX,2/4 ) ) a=1 (For slmphclty MIN, = 0 for all z 1s 
assumed ) Thus even if the query dlstrlbutlon is flat on Q its real access pattern 1s of parabolic function 
multlphed k times Its summit 1s at the center of the base space (MAX,/2 MAX,/Z) and IS to be most frequent-ly 
accessed Slmllarly If we use linear distribution function on Q the access pattern on D becomes 3 k-dlmenslonal 
polynomial function Then the skirts area of the mountam IS too narrow lo get the large perfor-mance gain 
by splitting the rarely accessed area The skirts area 1s quickly consumed after a few partltlonmgs are 
executed &#38;lost area of the mountam. 1s so to speak on the top of the mounta,n But in such area there 
still exist the slight differences among the Hi P, (Y&#38; s for dlscrlmmator candidates so the GKD-tree 
prcceeds partltlonmg quietly This IS ap-pare-tly disadvantageous (The blased tuple dlstribu-tion as in 
Fig 4 relaues this ) We then began to use the reduced precrslon when comparing values of H(plP(ytl)) 
s to avoid such too strict selectlon of dlscrlmmators In th:s Improved algo-rithm H(plb(y,)) s are compared 
each other by ignor- ing lower digits of values Smce these values for the top or area near top of the 
mountam are expected to be slightly different each other this modification causes the effect that the 
area around the top of the moun-tain appears completely flat Recall that the last state-ment of the algorithm 
In section 3 2 which specifies the procedure when multiple candidates give the mlmmum comparison value 
Due to this when it partitions the area which IS very frequently accessed GKD-tree algo-rithm with reduced 
precision comparison mcorporated picks up the candidate which splits the space most evenly As a consequence 
the algorithm behaves itself like the KD-tree method only when it partltlons the area around the top 
of the mountain 5 Implementation Issues Here, we discuss the lmolementatlon Issues m the database machme 
environment 5 1 Query Dlstnbubon The biggest problem on the lmplementatlon 1s how to mamtam query dlstrlbutlon 
It 1s practically mfeasl-ble to keep all of the selection predicates issued by users since they would 
become too large But notice that only the some portlon of dlstrlbutlon 1s required for the algorithm 
to work effectively It would work well even If the distribution for the queries which are rarely issued 
is not accurate This 1s because the aver-age number of page accesses will be hardly affected by how to 
spilt the space to which queries rarely access We have already developed the algorithm called gradat- 
ed stafzshcs to realize this strategy effectively In this technique the query distribution 1s represented 
by selection predicates stored In the table of fixed size One entry of the table consists of 2k fields 
to represent ranges along with the count field which gives how many times the predicate issued Hence 
the query dlstrlbu-tlon could be represented as the relation scheme Q(z, Y, Zk yL cod) When the storage 
IS overflowed with a lot of mcommg predicates the grada- bon begins some entry 1s merged with the other 
by making lower bits of some attributes don t care so that the resulted entry has the smallest value 
in Its count field among entries For example suppose k be 2 and now the table 1s overflowed If summation 
of count fields of two queries q,=[ 12 15]x[O 41 and q2=[ 12 14]x[ 1 71 IS mmlmum among other possible 
candidates they are merged into the gradaled query (12 15]x[1,7] b) maklng the followmg bits don t care 
the least slgmficant bit for higher value of range predl-cate for first attribute the least significant 
bit for lower value of range predicate for second attribute and the least significant two bits for higher 
value of range predl-cate for second attribute (It IS assumed that other en-tries cannot be merged by 
this operation More than two entries are posslbley merged by one gradation operation ) The number of 
don t care bits are associ-ated for each entry By this algorithm the distribution for queries rarely 
issued is gradated , while that for queries frequently entered IS kept still accurate The value of H(P~ 
(Y~~)) can be computed by summmg up the count fields of entries wh:ch satisfy the condltlon (4) with 
gradation taken into account That is, this value can be given by lssumg the page pjb(y,) as the query 
to Q SELECT SUM( co&#38;) FROM Q WHERE condition (4) holds with gradation takmg mto account We use as 
the access path to this storage the multldl- menslonal trle[ 121 because of its best affinity to the 
gradation The multldlmenslonal trie uses bits from most significant bit to partition the space while 
grada-tion consumes bits from the least slgmficant one It also contributes to reduce the computational 
time of gradation operations In GRACE the gradated statis-tics IS stored m the semiconductor memory in 
the dedl-cated disk module along with its access path 5 2 Dlscrlmmator CandIdate Selection Another problem 
on the lmplementatlon 1s how to compute the candidates for dlscrlmlnatlon values This requires the sorting 
of a lot of tuples Our database machine environment resolves this since sorting can be efficiently carried 
out by usmg hardware sorterf3] and relatively large semiconductor memory In the disk module in GRACE[ 
 21 5 3 Index Search Recall that GKD-tree generated by the algorithm 1s not always balanced But It IS 
not the serious problem First we notice that the traverse of the tree can often be omitted by making 
use of the property mentioned in the previous section That IS the shape of the GKD-tree produced by our 
algorithm perfectly reflects the undulation of the query distribution Hence, m GKD-tree it IS assured 
that the page pointed by the leaf node at the tip of some bulge in the tree 1s very frequently accessed 
Then in many cases the desired page can be found by checking leaf nodes at rather lower level In addition 
we can again use the the semiconductor memory employed m the dish module in the database machme environment 
and put the whole index into It This makes it unnecessary to make the index balanced in principle 5 4 
Insertlon/deletlon Handling As mentioned previously we can use the local page split/merge technique when 
the msertlon/deletlon operation cause page overflow/underflow The page underflow can be handled m a simple 
way First the empty page causing underflow IS deallocated Then the leaf node pointing to this page and 
its parent node are removed Last the grandparent node 1s modified to point to the brother of the removed 
leaf node instead of Its parent node In case of page overflow, we cannot apply the algorithm in sectlon 
3 2 to spht the page, since the space to be partItIoned contams only V + 1 tu- pies Hence the algorithm 
for overflow manipulation only considers the selectlon of dlscrlmmator attribute The dlscrlmmator value 
1s determmed so that It divides the tuples evenly to keep the load factor high Once discriminator pair 
1s selected, then a new node and one page are allocated and space IS partltloned by the pair Then the 
pair ts stored in the new node and pointers are arranged Last the tuples In either of subspaces are moved 
to the new page If the msertlon/deletlon of tuples occur frequently, we cannot keep the GKD-tree best 
fitted for the dlstri-butlon of selectlon predicates Since how to partltlon tuples which are frequently 
accessed dominates the average number of accesses it 1s the good heuristics that when overflow/underflow 
such a page we perform causes re-clustering the of page tuples In the page and nearby pages altogether 
 6 Con&#38;won In this paper the new multidimensional clustering algorithm 1s proposed based on the theoretlcal 
analysis of the formula which expresses the average number of page accesses The algorithm can fully exploit 
the dls-tnbutlon information of tuples and queries It 1s shown that the algorithm can largely reduce 
the average number of page accesses in many situations Further-more the algorithm 1s modified to behave 
Itself as If it were KD-tree method only when It partltlons the area frequently accessed Implementation 
issues are dls-cussed and gradated statistics technique 1s proposed which maintains the query dlstrlbutlon 
efficiently We can further Improve the performance by In-tegrating our clustering algorithm with lransposmg 
of re-lations[ 41, i e projectwe parhhonmg of the base space It can be integrated with the transpose 
method as follows First the athbvtesare partitioned so that joins between the retrieved subtuples using 
Tvple ID s are less re-quired Then the GKD-tree algorithm is applied to all the subrelations The first 
step of this method requires extended query model in which queries refer to multi- ple relations in general 
[I71 This directly leads to the modlficatlon of the cost function (3) so that it should take join cost 
into account Discussion on this issue in the database machine environment can be found in [I 31 Acknowledgement 
The authors wish to thank for the thoughtful comments from referees [References] [ 1] Kltsuregawa M et 
al Relahonal Algebra Machme GRACE Lecture Notes m Computer Science 147 Spnnger-Verlag pp 191-214 (1982) 
[ 21 Kltsuregawa IvI et al Applzcahon of Hash to Data Base Machzne and Its Archtiecture New GeneratIon 
Computing 1 Springer-Verlag pp 63-74 (1983) [ 3] Kltsuregawa M and Fushlml S et al The Urgam-zahon of 
PlpeELne Merge Sort@ Trans of IECE Japan J66-D pp 332-339 (1983) [ 41 Bentley J L , Mulhd~mensronal 
Bznary Search Trees Used for Assonahve Search@ CACM Vol 18 No 9, pp 509-517 (1975) [ 51 Bentley J L 
Mulhdzmennond Bmary Search Trees zn Database ApplzcakonY, Trans on SE Vol SE-5 No 4 pp 333-340 ( 1979) 
[ 61 Bentley J L Data Sb-uctures for Range Search@ Computing Surveys Vol 11 No 4 pp 397-409 (1979) [ 
7] Duhne-Aguayo R A Oplzmal Desqn of a General-zzed Ftie Urganuahon Ph D Thesis Cornell Unlv (1977) 
[ 81 Chang J M and Fu K S Extended K-D Tree Da-tabase Organvalzon A Dynamo MI.&#38;-Attnbute Clusfenng 
Melhod Proc of VLDB pp 39-43 (1979)  [ 91 Robmson,J T The K-D-B-Tree A Search S~kcture for Large Mulhdamennonal 
Dynamzc IrulexeS , Proc of ACM SIGMOD Conf , pp lo-18 (1981) [lo] Ouksel,M and Scheuermann P Multuiamasronal 
B-Trees Analysis of Dynamzc BehavLof BIT 21 pp 401- 418 (1981) [ 1 l] Orensteln J A Multulame7monal 
Tnes Used for As- sonatave Search@ Information Processing Letters Vol 14, No 4 pp 150-157 (1981) [ 121 
Tanaka Y Adaphue Segmeniahon Schemes for Large Relational Database MachzneS in Database Machines Lelllch 
H -0 and Mlsslkoff M ed Springer-Verlag (1983) [13] Lee D T , n Worst-Case Analyst for Regaon and Par-taal 
Regzon Searches m Multxdzmenstonal Bmary Search Trees and Balanced Quad TreeS Acta Informatlca 9 pp 23-29 
(1977) [14] Batory,D S , On Searchang Transposed FtieS ACM TODS Vol4 No 4 pp 531-544 (1979) [15] Fushlml 
S Multiunennonal Clustenng Technzque for Large Relakonal Database MachmeS to appear in Proc of Internatlonal 
Conference on Foundations of Data Orgamzatlon, Kyoto Japan (1985) [ 161 Fushlml,S Desqn of Secondary 
Storage System for Relatzonal Database Machme Physacal Database Organ%-zahon Method Based on Mvlhclzmensxonal 
Clustang and Transposdzoti, MS Thesis Umv of Tokyo (1983) (In Japanese) [17] Whang K -Y Wlederhold G 
and Sagalowlcz D , Separab&#38;ty -An Approach to Phymal Database Des@ Trans on Comuters Vol c-33 No 
3 pp 209-222 (1984) Append= A The dlstrlbutlon functiors used in Example I (1) All of domams of attrlbntes 
are assumed to be real numbers, and MAX,=--4IIN,=2 0 for all Z S (2) Query dlstrlbutlon function  Q(q) 
= (l/V) 5 Q,(z, Y, =z Y2) m=l where V IS the normalization factor and Q,(z, y, x2 y2)=l 0 (~~-2~) (~~-5) 
-081z1Sy,S08 -0 6zSz,i5y2S0 6 1I Q2(zl Y, z2 y2)=4 0 (yl-zl) (YZ-%) -13~Z,~y,+o 4 -1 7~z2~y2~-0 4 I I 
Q3(zl Y, x2 y2)=4 0 (~~-5) (~2-5) 0452,5y,518 --17~z2~y21-l 0 I I Q~(z, Y, ~2 yJ=l 0 (Y,--1) (~~-5) 
I -1 8iSz1Sy,d1 2 1 1 -07~zo~yzzl 7 Qs(x,~Y +Y2))=4 0 (Y,-xl) (II~-~~) 09Sx,Sy,S18 0452,6y2d19 I I (3) 
The tuple dlstrlbutlon 1s assumed to be umform B The dlstrlbutlon functions used m Ezample II (1) All 
of domains of attributes are assumed to be real numbers, and MAX,=-MIN,=2 0 for all z s (2) Query distrlbutlon 
function  Q(q) = (l/V) (100 O-30 Of (q +y,2)), %=I where V IS the normalization factor (3) Tuple dlstrlbutlon 
function k k D(t) = c (1000-90 0 (c vJ2+(vZ-1 6)2) r=l I-=% - 90 0 (; y2-(a~,+1 6)2)) If  
			
