
 Proceedings of the 1983 Winter Simulation Conference S. Roberts, J. Banks, B. Schmeiser (eds.) A NETWORK 
INTERFACE UNIT SIMULATION USING MICRO PASSIM Tom P. Vayda Larry L. Wear, Ph.D. Department of Computer 
Science California State University, Chico Chieo, CA 95929 This paper describes how micro PASSIM, a 
GPSS based simulation system, was transported from the Apple II to the HP 9836. The problems associated 
with moving a large program form one UCSD Pascal system to another are discussed. Micro PASSIM was transported 
to the HP system so that an Ethernet to HPIB interface board could be modeled. The model is described 
and the results obtained from the simulation are discussed. A discussion of the advantages and disadvantages 
of using micro PASSIM rather than a standard language, such as GPSS, is also included. i. INTRODUCTION 
AND OBJECTIVES This paper describes how the micro PASSIM a GPSS based simulation system, developed by 
Barnett, (Barnett 1981) was transported to the Hewlett-Packard 9836 desktop computer and used to simulate 
an Ethernet Network Interface Unit (NIU). PASSIM, which is based on GPSS, was developed at the University 
of British Columbia for use on a minicomputer (Uyeno 1980). PASSIM was modified by Claude C. Barnett, 
Walla Walla College, to run on the Apple II microcomp uter. The system he developed, micro PASSIM, was 
 written in the Apple version of UCSD Pascal. The NIU described in this paper is designed to llnk the 
Hewlett-Packard Instrumentation Bus (HPIB) (Hewlett-Packard 1979), with Ethernet (Xerox 1980). The NIU 
has its own micro processor and buffer memory. It also has dedicated processors that interface with the 
HPIB and the Ethernet. 2. TRANSPORTING MICRO PASSIM TO THE HP 9836 As stated above, one of the reasons, 
we chose to use micro PASSIM was that it was written in UCSD Pascal and the HP 9836 supports UCSD Pascal. 
Unfortunately, this did not mean that programs could be transported directly from the Apple to the HP. 
The following describes the major differences between the two implementations. 2.1 Differences between 
Apple and HP Pascal Some of the differences described in this section were eliminated by simply using 
the editor to replace one word with another. Others required rewriting some blocks of code or moving 
code from one module to another. Both versions support string type variables; however, the HP compiler 
(Hewlett-Packard 1982) performs more checking on the length of the string when a constant or string variable 
is assigned to another string variable. This made it necessary to change the declarations on a number 
of variables and constants to satisfy the HP compiler. For some reason, unknown to the authors, several 
Keywords differ between the two implementations. In the Apple version 'USES' (Apple 1980) indicates that 
a procedure will reference variables or procedures from a separately compiled module. Also, when variables 
or procedures within a module are to be made available to external procedures, they must be declared 
following an 'INTERFACE' statement. For the HP implementation 'USES' is replaced by 'IMPORT' (Hewlett-Packard 
1982) and 'INTERFACE' is replaced by 'EXPORT'. In addition, HP uses 'IMPLEMENT' rather than 'IMPLEMENTATION' 
 to specify the code section that has previously been declared in an 'EXPORT' block. CH1953-9/83/0000-0073 
$01.00 o 1983 IEEE 74 Tom Vayda, Larry Wear Apple Pascal has a feature which is not available on HP Pascal. 
In Apple Pascal, code can be written in a compound statement following the 'INTERFACE' block. This code 
is executed prior to the time the procedure is accessed by external routines. This makes is possible 
to include initialization code within the 'INTERFACE' block. Since this feature was not available in 
HP Pascal, some initialization code had to be moved to the main line procedure. The text, The Pascal 
Handbook, (Tiberghien 1981) is a good reference to the differences between a number of implementations 
of Pascal.  2.2 Non-standard Pascal Features in Micro PASSIM Some non-standard features of Apple Pascal 
had to be modified to run on the HP version. The routines to read the system clock, to access the random 
number generator, and to detect a key press fell into this category. All of these routines were rewritten 
for the HP implementation.  2.3 Extensions Available on the HP System The HP implementation allows 
a larger range of values for integer type variables and has a much larger address space. This makes it 
possible to develop much more complex models on the HP system without encountering range problems with 
variables. The large address space eliminates the need to break procedures into small segments in order 
to get them to compile. It also allows more active transactions, mare model segments, and more variables 
since these are all memory size dependent. The problems encountered transporting programs from Apple 
UCSD Pascal to HP UCSD Pascal demonstrate the need for standardization in high level languages. Even 
two systems that are advertised as 'UCSD Pascal' have a significant number of differences that make the 
transporting of programs much more complicated than need be. 3. ADVANTAGES AND DISADVANTAGES OF MICRO 
PASSIM Micro PASSIM has numerous features that make it a very useful simulation tool. Because it is 
interactive and easily extended to fit the application, it is very versatile. As we know, however, there 
is no such thing as a 'free lunch'. Both of these features come at the expense of increased program length 
and model development time. 3.1 Interactive Debugging with Micro PASSIM The interactive nature of micro 
PASSIM makes debugging programs much easier than it is on batch systems using GPSS and most other common 
simulation languages. The ability to halt the simulation run at any point in time is very useful while 
debugging a model. Once the simulation has been suspended, information about the model and the accumulated 
statistics can be displayed. While the simulation is suspended, it is also possible to change the order 
in which transactions will be processed and the values of all model parameters. This can also be helpful 
 in validating the performance of the model. Debugging and validating the model is also simplified by 
the built-in 'Debug' facility. From the main menu the user can enter the Debug menu. This menu allows 
you to select the type of information you wish to have displayed while the simulation is running. At 
the '0' level no information is displayed. Levels I through 12 display information related to the execution 
of the simulation. Two features the authors found most useful were the single transaction trace, which 
displays relevant information about a transaction each time it changes state~ and the display of each 
change of state by every transaction in the system.  3.2 Extending Micro PASSIM Micro PASSIM can easily 
be extended by adding more Pascal procedures. We found this extremely valuable for two reasons; first, 
it was possible to include rather complicated logic within the model to alter the flow of transactions 
through the model (see Figure 4) and second, collecting statistics other than those predefined in the 
standard system was relatively easy.  3.3 Disadvantages of Using Micro PASSIM The major disadvantages 
to using micro PASSIM rather than GPSS or some other simulation language are that it requires a great 
deal more code to develop a model and moderate to advanced programming ability in Pascal is required. 
For example, we developed a simple model that simulated the flow of jobs through a computer system which 
had multiple compilers, debuggers and run time cpu's. Implementation of the model required over 400 lines 
of Pascal code. The equivalent GPSS model (with fewer capabilities) required about 20 lines of code. 
The NIU described in this paper required over I000 lines of code; a similar GPSS model, with fewer capabilities, 
required about 60 lines of GPSS code. It must be pointed out, however, that the micro PASSIM simulation 
gave statistics that were not available in the GPSS model and part of the additional code was written 
to support the interactive features of micro PASSIM which are not available in GPSS. To help ease the 
pain of writing rather large Pascal programs when implementing a model in micro PASSIM, the author provided 
a module called a template. This module contains blocks of comments that show which procedures the users 
must write. It also includes the code necessary to initiate the simulation. In summary, micro PASSIM 
models are longer and more difficult to write than those in GPSS but they can provide more information 
and are more convenient to modify and run. 4. DESCRIPTION OF THE NIU In this section we describe the 
network interface unit (NIU) that is the subject of the simulation. The general function of the NIU is 
specified, followed by a description of its intended operating environment, an overview of its architecture, 
and then a description of how the NIU operates.  Network Interface Unit 75  ROM " L Nov l I RAM II 
HP INTEL BUSS BIC 82586 HOST I HPIB D D M BUSS M G A 5 M B 8 TRANSMIT RECEIVE  B M 6 BUFFERS BUFFERS 
RAM  INTEL 80186 The XXXXPEDE NIU Figure I:' Network Interface Unit DIAGRAM 4.1 Function of the NIU 
 The main function of the NIU is to allow a host (DTE) to communicate with a local area network (LAN). 
The NIU provides layer I and 2 services of the ISO reference model for OSI (Tanenbaum 1981). Roughly 
speaking, the NIU has to pass packets (a stream of bytes delineated by a header and trailer) between 
the host and the LAN in both directions. To carry out this function the NIU has to provide buffer space 
for packets destined from the host to the LAN as well as packets that are addressed to the host coming 
from the LAN. This buffering must be transparent both to the host and the LAN, thus the NIU must have 
the intelligence to manage buffer memory. The NIU must provide error detection capability to ensure that 
faulty packets are not passed to the host. The NIU also has to recognize broadcast and multieast addresses, 
as well as to recognize and correctly respond to certain control packets.  4.2 Operating Environment 
 The host is assumed to be a Hewlett Packard (HP) minicomputer capable of fairly high speed data transfer" 
(2M bits/sec) although any device capable of communicating via the Hewlett Packard Instrumentation Buss 
(HPIB) Protocol could serve as the host. The LAN is assumed to be an Ethernet (Xerox 1980) capable of 
I0 M bits/sec data rate operating under the CSMA/CD control method (Xerox 1980). The NIU is not directly 
attached to the LAN. There is a standard Ethernet transceiver (TCVR) located between the Ethernet coaxial 
transmission cable and the NIU. The transceiver has the function of signal conversion as well as detecting 
the current state of the Ethernet and sensing other necessary electrical signals (Xerox 1980).  4.3 
NIU Architecture A block diagram of the major components of the NIU is given in Figure I. The Intel 
82586 is an intelligent local communication controller (LCC) (Intel 1983, Intel 1982a). It provides 
most of the functions of layers i and 2 of the OSI model including framing, error detection using the 
CCIT V.41 CRC polynomial, and single node, multicast, and broadcast addressing. The LCC uses a shared 
memory based architecture. The 82586 and the CPU (the 80186 in Figure I) communicate through a shared 
memory (the RAM in Figure I) using chained fixed sized buffers to store the inbound/outbound packets. 
 The Random Access Memory (RAM) is used as the buffer to store inbound/outbound packets until they are 
ready to be processed. It consists of a fixed slze partition with one part storing packets bound from 
the host to the LAN (Transmit buffers) and the other part buffering packets being received from the LAN 
and bound for the host (Receive buffers). The Backplane Interface Chip (BIC) is a standard HP communications 
product, capable of using the HPIB protocol. Its purpose is to receive/send packets from/to the host. 
 The read only memory (ROM) contains the firmware that controls the operation of the NIU. The non-volatile 
random access memory (NOVRAM) is used to store NIU configuration information. The ROM and NOVRAM are 
not part of the simulation. The NIU contains two separate busses as shown in Figure I: one is used for 
direct memory access (DMA) to/from the BIC, while the other is used to implement the shared memory architecture 
between the 82586 and the 80186 described above. The Intel IAPX 186 (80186 in Figure I) microprocessor 
(Intel 1982b) is used to control all other components of the NIU. It is a medium performance (8MHz) highly 
integrated 16 bit general purpose microprocessor. Its main functions include controlling the 82586 LCC 
and the shared memory space (RAM), (MG586), as well as carrying out direct memory access (DMA) transfers 
from the BIC to RAM (DMABM) and DMA from the R~M to the BIC (DMAMB). Its other functions are of no concern 
to the simulation. Tom Vayda, Larry Wear The Ethernet transceiver and the Host are represented in the 
simulation simply as sources and sinks for the inbound and outbound packets to be processed by the NIU. 
 4.4 NIU Operation  In order to implement the functions described in Section 4.1, the NIU carries out 
the operations described below. We will consider only the two main functions of the NIU: transmit, transfer 
a packet from the host out over the LAN; and receive, transfer a correctly addressed, error-free packet 
received from the LAN to the host. To transmit a packet, first the BIC sends an interrupt to the 80186, 
the interrupt service routine (ISR) in the 80186 initiates a DMA transfer to move the packet from the 
BIC to the transmit buffers (or tells the host to wait if no buffers are available), next the 80186 commands 
the 82586 to transmit this packet to the LAN (passing needed buffer address information), and finally 
the 82586 gets the packet from the transmit buffers and transmits it through the transceiver (TCVR) out 
over the LAN. See Figure 4 for details.  To receive a packet, first the 82586 interrupts the 80186 
to notify the beginning of packet reception, the 80186 ISR responds by initiating a DMA transfer of the 
packet into the receive buffers. Next the 82586 logic checks the packet for errors and also to see if 
the whole packet was able to fit into the available receive buffers. If an error-free complete packet 
has been received, the 80186 is notified of this (via an interrupt) and the ISR initiates a DMA transfer 
from the receive buffers to the BIC, which in turn sends the packet to the host. If an incomplete or 
erroneous packet was received, the receive buffers are returned to the pool Of free buffers and the packet 
is counted as a lost packet. This assumes that the layer 2 protocol ensures that the lost packet will 
be retransmitted by the sender after it times out for the lack of an acknowledgement. 5. DESCRIPTION 
OF THE NIU MODEL  In this section we describe the NIU simulation model. Note that the designers of the 
NIU have nicknamed it the XXXXPEDE (XXXX = centi or milli) thus explaining the model name on the output. 
We will discuss the purpose of the simulation, assumptions and limitations, an overview of the model, 
the transaction flow diagram, the model core, the model template, and finally describe the develo pment 
effort required to implement the model. 5.1 Purpose  The decision to build a simulation model before 
the design phase of the XXXXPEDE had been completed was made for at least the following reasons: I. 
to provide the designers with some design guidelines, 2. to provide an estimate of the performance to 
be expected from the XXXXPEDE (including lost packet statistics under various traffic loads),  3. to 
provide an estimate of component utilization (to see, for example, if the 80186 could be expected to 
perform additional functions), and  4. to provide specific information about the choice of memory (RAM) 
size and memory partitioning parameters.   5.2 Model Assumptions Since many XXXXPEDE design choices 
were still undecided when the simulation model was designed, and to allow for a reasonable size first 
version of the model, the following assumptions were used during model construction: i. The buffer memory 
(RAM) is to be subdivided into two dedicated parts: receive buffers and transmit buffers. 2. Each of 
the above mentioned memory partitions consists of a pool of fixed size buffers (not necessarily of the 
same size for the two portions).  3. In case of contention between receive and transmit packets at any 
of the XXXXPEDE resources, the receive packet is to receive higher priority (since the host is easier 
to 'choke off').  4. If a receive packet cannot be correctly processed because of insufficient buffer 
space, it is considered lost, and scheduled for retransmisslon.  5. If a transmit packet cannot be correctly 
processed because of insufficient buffer space, then the host will be 'choked off' (using HPIB flow control) 
and the packet will be queued in the host's buffers.  6. Various packet size and processing delay parameters 
were specified as constants.  7. The packet stream from both sides consists of a mixture of continuous 
(file transfer) transmissions or of 'random' (burst mode) transmissions consisting of a specified mixture 
of 'short' and 'long' packets. The packet stream from the LAN can have a different mixture, packet length, 
and distribution parameters than the packet stream coming from the host.  8. The internal busses of 
the XXXXPEDE are fast enough to handle all required DMA and control traffic, therefore bus contention 
does not have to be modeled.  9. The 80186 CPU is fast enough to handle its three main functions (manage 
the 82586, DMA from memory to BIC, DMA from BIC to memory) concurrently.   Network Interface Unit 5.3 
Limitations The first version of the model (the subject of this paper) suffers from the following limitations: 
 I. There are no packets generated that contain errors. 2. The possible unavailability of Ethernet (channel 
contention) is not included.  3. The overhead for the recognition of multlcast/broadcast addressed packets 
is not included in the model.  4. The possibility of packets that were transmitted from the Host to 
the LAN being lost is not included in the model.  5. The possibility of a collision and the subsequent 
use of the CSMA/CD exponential backoff algorithm is not included in the model.  6. There are other hardware/software 
details that are omitted from the model.  These limitations were acceptable because not enough hardware/firmware 
details were known during the model design phase, and also they allowed for an easier debugging/valldation 
phase. On the other hand, the model was designed so that future expansion to remove some of the above 
limitations could be easily incorporated into more refined versions of the model.  5.4 Model Overview 
 The model consists of two segments. One segment models the flow of transactions (packets) moving from 
the host to the LAN, while the other segment models the flow from the LAN to the host. Thus the model 
has two distinct transaction types which share some common storages. The model time unit was decided 
to be a micro second. The model uses the following storages (see Figure I): I. XC586 -the 82586 chip, 
 2. XMBUF -the transmit buffer space - capacity depends on memory size,  3. RCBUF -the receive buffer 
space - capacity depends on memory size,  4. BIC -the BIC chip,  5. DMAMB -the portion of the 80186 
CPU controlling DMA from the RAM to the BIC,  6. DMABM -the portion of the 80186 CPU controlling DMA 
from the BIC to the RAM, and  7. MG586 -the portion of the 80186 CPU used to control the 82586 chip. 
  Note that our assumptions (Section 5.2) allow the 80186 to be modeled as three separate storages with 
dedicated functions. Also, our assumptions allow the omission of the XXXXPEDE internal busses from the 
storage llst. The major model parameters are memory size, fraction of memory for receive and transmit 
buffers, LAN and host data rates, retry delay for lost packets, and several variables controlling packet 
sizes and packet stream mix (different for the host and the LAN), and bandwidth utilization for both 
the host and LAN. This list is not exhaustive. For a complete list of all model parameters, see Figure 
3. During an interactive simulation run, the user is allowed to change the values of any or all of these 
parameters. The packet stream is generated by a user defined function, according to the specifications 
described in Section 5.2. A nice feature of micro PASSIM is that it allows easy incorporation of user 
defined functions into the model. The operation of the NIU was described in Section 4.4 in a cursory 
fashion. For a detailed description of how transactions move through the model, see the transaction flow 
diagrams in Figure 3. The model core implements the transaction flow diagrams (Figure 3) in micro PASSIM. 
Figure 4 shows the model core. Note how Pascal statements are mixed with GPSS type blocks. It is this 
flexibility that makes micro PASSIM a powerful simulation tool. In order to get a complete executable 
model, every section of the 'template' model has to he completed. The template contains the following 
sections: User Globals - model parameters, storages, and auxiliary variables, User defined functions 
and procedures, Model Defaults -assigns reasonable values to all model parameters, Model Menu -displays 
values of all model parameters and allows user to interactively change the value of any parameter, Model 
Description -a help facility for the user's benefit, Model Initialization -clears the model and initializes 
various model data structures, Model Reset -allows user to reset simulation statistics without exiting 
the program, Statistics -prints all model statistics including 'automatic' statistics (queue and storage 
statistics) as well as user defined statistics (Figure 5), and the Model Core -described above (Figure 
4). Tom Vayda, Larry Wear ........................ M 0 D E L P R R R M E T E R S --===-== MODEL HRRDNRRE/SOFTNRRE 
PRRRMETERS ...=..=..=.....=..==. ..===. =.= MEMORY SIZE -16384 BYTES FRRCTIOH OF MEMORY FOR RECEIVE BUFFERS 
" 0.875 FRRCTION OF MEMORY FOR TRRNSHIT BUFFERS 0.125 THERE RR£ 56 RECEIVE BUFFERS OF 256 BYTES ERCH 
THERE RRE 8 TRRNSMIT BUFFERS OF 256 BYTES ERCH ETHERNET DRTR RRTE -1.25 BYTES/MICSEC BIC(HOST) BRTR RRTE 
0.25 BYTES/MICSEC RETRY DELRY FOR LOST PRCKETS (£HET) 20000 TIME TO SET UP BIC TRRNSMISSION -100 TIME 
TO SET UP ENET TRRHSMISSIOH -100 TIME TO RCQUIRE SiC -200 TIME TO PROCESS HOST INTERRUPT -10 TIME TO 
PROCESS ETHERNET INTERRUPT 10 TIME TO SET UP BIC DMR 50 TIME TO FINISH BIC DHR 50 TIHE TO SET UP 596 
DHR 5 TIME TO FINISH 58B DMR 50 TIME TO RCOUIRE TRRNSMIT BUFFER 150 TIME TO RELERSE TRRNSMIT BUFFER 
 150 TIME TO RELERSE RECEIVE BUFFER -t50 ETHERNET RECEIVE PRIORITY 2 BIC(HOST) TRRNSMIT PRIORITY 1 MODEL 
TRRFFIC PRRRMETERS ......................  £THERNET PRCKET SIZE(BYTES) 106 MINIMUM t500 MRXIHUM BIC(HOST) 
PRCKET SIZE(BYTES) 106 MINIMUM 256 MRXIMUM RRTI0 OF CONTINUOUS HOOE/DURST MODE PRCKETS -0.500 RRTI0 OF 
LOHG/SHORT PRCKETS IN BURST MODE 0.250 RVERRGE LENGTH OF SHORT PRCKET FROM ETHERNET -106.0 RVERRGE~NGTH 
OF SHORT PRCKET FROM BIC(HOST) -106.0 RVERRG£ # OF PRCKETS IN CONTINUOUS MODE OH ETHERNET -E.O RVERRGE 
# OF PRCKETS IN CONTINUOUS MODE ON BIC(HOST)-4.O RVERRG£ NUMBER OF BYTES PER PRCKET FROM ETHERHET -8B7,4 
RVERRGE NUMBER OF BYTES PER PRCKET FROM BIC(HOST) -165.0 RVERRGE PRCKET IHTERRRRIVRL TIME FROM ETHERHET 
-2313,1 RVERRGE PRCKET IHTERRRRIVRL TIME FROM BIC(HOST) 2200,0 NUHBER OF RCTIVE NODES ON ETHERNET 1 
ETHERNET TOTRL UTILIZRTION , " 0.300 XMXXXPEDE'S UTILIZRTIOH OF ETHERNET XFER CRPRCITY " 0.300 XXXXXPEDE'S 
UTILIZRTION OF BIC(HOST) XFER CRPRCITY 0.300 MODEL DEBUG PRRRMETERS .==...==.........=.. PRINT PRCKET 
INFORMRTION ; FRLSE PRINT BUFFER IHFORMRTION : TRUE PRIHT RLL INF0 (IN STATS) = TRUE FIGURE 2: MODEL 
PARAMETERS The complete implementation of the model required about I000 lines of Pascal code, including 
comments. This does not include the library modules of the micro PASSIM system that have to be linked 
to the executable (compiled) form of the model. The complete design and implementation and validation 
of the model required about 80-100 hours. 6. RESULTS OF NETWORK INTERFACE UNIT SIMULATION This section 
presents a description of the statistics that were gathered when the model was run and a display of some 
of the data that was gathered from numerous runs of the simulation.   6.1 Micro PASSIM Result Printout 
 The accumulated statistics for the current run of the simulation can be displayed or printed whenever 
the micro PASSIM main menu is displayed on the screen. The printout for a typical run is shown in Figure 
5. Some of this information is similar to what you would see from a GPSS simulation. The QUEUE statistics 
and STORAGE utilization fall into this category. The portion of the output labeled 'PACKET STATISTICS', 
however is unique to the model we designed. The statistics displayed here are ones that we felt would 
be useful for our purposes. We were responsible for generating the statistics and for displaying them 
in the format shown.  6.2 Model Performance and Bus Utilization Figure 6 shows how the model responded 
to various levels of Ethernet utilization. In this figure, we chose to plot number of packets that had 
to be retransmitted, (Lost Packets), total data throughput, (Data Rate), and utilization of transmit 
and receive buffers, XMBUF, and RCBUF. For this figure, the buffer memory size was 8192 bytes, the BIC 
utilization was 0.40 and the ratio of receive to transmit buffers was 7:1. The maximum data rate for 
the BIC was 2 M bits/sec and for the Ethernet was I0 M bits/sec for all the cases described in this section. 
 The figure shows one result which was expected; as the data rate of incoming packets from Ethernet approaches 
the maximum rate at which data can be transmitted to the BIC, the number of lost packets increases drastically. 
It also shows that the transmit buffers are utilized much more heavily than the receive buffers. This 
is due in part, to the fact that emptying receive buffers was given higher priority than emptying transmit 
buffers and therefore data tended to remain in transmit buffers for a much longer period of time. The 
next graph, Figure 7, shows how the model responded to changes in incoming packet rates from the host, 
BIC utilization. This term is somewhat misleading because the NIU can halt the actual transmission of 
data from the host computer through the BIC by sending a 'not available' back to the host. Since this 
transmission from the host to the LAN can be choked off by the NIU, there is no significant increase 
in lost packed count and only a small increase in receive buffer utilization while transmit buffers utilization 
increases to nearly i00 percent. Total data rate also increases and approaches the maximum of the BIC. 
 6.3 Model Performance and Buffer Memory Size Figure 8 shows how the NIU performs with various amounts 
of buffer memory from a minimum of 4096 bytes to a maximum of 32,768 bytes. For this figure the Ethernet 
utilization was set to 0.18 and the BIC utilization to 0.40. Two of the more interesting results that 
can be seen are that the data transfer rate remains constant and there is a linear decrease in receive 
buffer utilization as memory size increases.  6.4 Execution Time of Model The execution speed of the 
simulation language is often quite important if a model is going to be run many times. On the HP 9836, 
each run of 3 seconds of simulated time required about two minutes of real time. In a typical run about 
650 packets were transmitted from Ethernet and 1750 requests were generated from the Host. The resolution 
of the simulation clock was I micro second and the length of most of the ADVANCE's Network Interface 
Unit 79 LEGEND I GENERATE/ l,, TErHiNATE ENTER .LEAVE STORAGE STORAGE ADVANCE   I ," o IIOST-~LAN 
INTERRUPT SFART DHA GET TRANSMIT PACKET 80186 tIOST~RAH BUFFERS XHBUF ® 0 CLEANUP OflA COMMAND 586 START 
XHIT RELEASE BUFFERS IIOST--~M TO XHIT PACKET TO LAN NIU HOBEL SEGMENT ONE RECEPT! 0 START DMA RAM-~ 
IIOST RELEASE I FINISIIED RAM-~tlOST TMNSFER BUFFERS LOST INn PACKET "° .]U HODEL SEGME.NT TWO I I rCBOF 
~c.6 II I I ',' ) ) ,1 ~ ,j RESCHEDULE ' PACKET FOR RELEASE FINIStl LOST LATER TRANSH]SSION BUFFERS 
PACKET PROCESSING FIGURE 3: N[U TRANSACTION FLOW D]AGP~H &#38;#169; DECISION HOST---)RAH TRANSFER XC586 
TEI~IINAIE FINISH XMIT UOST~LAN TO I.AN PACKET IES TERH] NRTE CLEANUP LAH~ HOST RAH-~HOST PACKET Tom 
Vayda, Larry Wear ( MODEL SEGMENT 0HE (HOST/BEC) U) STRRT: BEGIN GENERRTEIO2pPRCKGEH(HPI~XMPRIORITY~SIMCLOCKICLOSE.TIME); 
PAR(3) :-PRCKETSIZE; (* PACKET SIZE flSSIGHEB BY PRCKGEN ) PRR[4| I" pAR(3) OIV XMBSIZE| (* NUMBER OF 
BUFFERS REQUIRED ~: REM :-PRR(3) M0D XMBSIZEJ IF REM>O THEN PRR[4] =-PRR(4] + 1; END; 02: ENTER(O3~t,BIC); 
031RDVRNCE(O4~HBST_IHTRUPT)J 04= LERVE(O5~I,BIC); 05: ENTER(06~PRR(4]~XMOUF)J 06= ROVRNCE(OT~RCQ×MBUF 
); 07: EHTER(OG~t,DMRBM); 08: RDVRNCE(OD,SETUPBICOMR)J OS= EHTER(tO~t~BIC); 10= RDVRNCE(11~ PRR[3] / 
ORTR_RRTE[HP] )J 11: LERVE(12,I,BIC); tZ= RBVRNCE(13,FIHISHBICBMR); 13: LERVE(14~I~BMRBH); 14: ENTER(15~I,MGSB6); 
(51 RBVRNCE(t6,SETUPENXN); 1G: LERVE(17,t,MG566); 17: ENTER(IB, l~XCS66); tO= RDVRNCE(tD~PRR[3]/0RTR_RRTE(EN]); 
 19: LERVE(ZO~I~XCS66); ZO: RDVRNCE(21~REL×HBUF); 21= LERVE(ZZ~PRR(4]~XMSUF); 2Z= BEGIN TOTBYTES_HP 
:" TOTBYTES_HP + PRR[3;; TOTPRCS_HP :-TOTPRCS_HP + 1; TERNIHRTE(1); END; (~ MODEL SEGMENT TWO (ETHERHET) 
~) 5TRRTZ= BEGIN GENERRTE(52~PRCKGEN(EN;~RCPRIORITYeSIMCLOCK<CLOSETXME) | PRR[3| |" PRCKETSIZE; (U PACKET 
SIZE ASSIGNED BY PRCKGEH U PRRt4| I" PRR[3| DIV RCBSIZE; (m NUMBER 0F DUFFERS REQUIRED PRR(SI =" O| (M 
COUNTS NUMBER 0F RETRIES TO RECEIVE PACKET PRR(B| :" O| (~ COUNTS NUHBER 0F SUFFERS ACQUIRED BY PACKET 
 REM :" PRR[3] M0g RCBSIZEJ If REM)O THEN PRR[4| I" PAR[4] + I; NX_BLOCK I" 52 EH0; 52! ENTER(S3tlpXCSe6) 
j 53= RDVRHCE(54pEHET_INTRUPT); 541LEAVE(55,tpXCGSS)J 551ENTER(SB#1pMG066); 561 flOVRNCE(5?mSETUPS06BMR) 
| 57: LERVE(SO,1,MG566); 581 ENTER(SBeI,XCS86) | 591 BEGIN HOREBYTES :-TRUE; WHILE ( RCBUFCNT ) O = 
flHD MOREBYTES 00 BEGIN [NTER(BO, IjRCBUF)| RCBUFCHT I" RCBUFCNT -1| PAR(G; =" PARIS| + I| (m COUNT 
CRPTUREB BUFFERS } MOREBYTES I* ( PRR(4| ) PRR(6] ); ENgJRDVRHCE(60~PRR(3I/BRTRRRTE (ENI)I EHD; BO1 BEGIN 
RDVRNCE(GB~FIHISHSBGDMR); IF PARE4} ) PRR|6| (! BUFFERS REQUIRED ) SUFFERS RCQUIREB? l) THEN HX_BLOCK 
lo St| (I THE PRCKET WRS LOST I) END; Figure 4: Micro was between 5 and 150 microseconds. Because of 
the relatively short run times, it was feasible to make numerous changes to the model to examine the 
response under many different conditions. 7. SUMMARY This paper described the HP 9836 implementation 
of micro PASSIM and its application to modeling an NIU. To implement the model, first the authors had 
to transport the micro PASSIM system from Apple II to HP9836 in order to be able to use the i megabyte 
memory capacity of the HP 9836. While the current version of the model has certain limitations, even 
in this form it has proven to be a useful and effective model of the (~ HR|4DLE n LOST PRCKET m) Oil 
RBVRHCE(BZwRELRCBUF); 621 BEGIN ACBUFCHT I; RCBUFCNT + PRRIOII LERVE(64~PRRI61eRCBUF); PAR(5| :+ PRR(5; 
+ 1; (I COUNT TIItES PACKET SENT 0N EHET I PRR[6] ;" O~ (W RESET BUFFERS RCOU|REB COUNTER ; LOSTBYTES 
1" LOSTOYTES ÷ PAR(3( (* COUHT NUHBER OF LOOT BYTES~ LOSTPflC I" LOSTPRC + I; In COUNT NUMBER OF LOOT 
PRCWETS END; 64: LERVE(65jI~XC506); (I RESCHEDULE IT FOR LRTER ETHERHET TRRHSNISSION I) 55: SCHEOULE(SZ~RCPRIORITY,SIMCLOCK+RETRYBELRYjCUR); 
 In HA(IDLE R CORRECTLY RECEIVED PRCKET m) SSx BEGIN IF PRR(5| -O THEN (~ PACKET WhO RECEIVED 0N FIRST 
TRY ~) GOT_THROUGH_FIRSTTRY Z" GOT_THROUGHFIRSTTRY + 1 ELSE (* PACKET MRS SENT MORE THAN 0HCE BEFORE 
RECEPTION !) BEGIN RETRIEDPRCKS =" RETRIEOPRCKS + ;J RETRYTOT I" RETRYTOT + pRRtO;J EH0; LERVE(0?~Ip×CSe6); 
SilO; 671 EHTER(GB~IpBMRNB); 681 ROVRNCE(69,SETUPSICOMR); 691ENTER(TO~t~BIC); 70I BEGIN HPXM_DELRY 
=" SETUPHPXM ~ (m TIME T0 7 w) HPBUSOELRY ÷ (~ TIME TO ? *) PAR[3] / ORTR.RRTE(HP|) (~ TIME T0 ×FER 0RTR 
m) RBVRNCE(?I,HPXM_0ELRY)J END; 711LERVE(72pt~BIC); ?ZI ROVflHCE(T3~FIHISHBICOMR); 73: LERVE(T4~t,DHRMO); 
741 fl0VRNCE(TS~RELRCOUF); T5: LERVE(?BePRRI4IjRCBUF)| 761 BEGIN RCBUFCNT I" RCBUFCNT ÷ PRR|4|| TOTBYTESEN 
I" TOTBYTES_EN + PRR(3|| TOTPRCS_EN =-TOTpRCS_EN + 11 TERMIHRTE(I)| EHO; PASSIM Model Core XXXXPEDE 
NIU. The authors are currently expanding the model to remove some of the limitations described in Section 
5.3. The micro PASSIM system has already proven itself to be a powerful simulation tool, but it does 
have room for improvement. Some of the desirable expansions include graphics output, file input of various 
model configurations, the ability to run the system using command files, and the Implementation of more 
GPSS blocks. The author of the micro PASSIM system is currently working on several of these enhancements. 
 In conclusion, the authors have found micro PASSIM to be a powerful, interactive, efficient, easy to 
customize, and 'infinitely' expandable simulation tool. Network Interface Unit .................... 
S I M U L R T I 0 N S T R T I S T I C S ............ ---.--- HP SSxx uPRSSIM P1,0 XXXXXPEDE SIMULRTION 
MODEL V2.0 Sepcember 1883 SIMULRTION HRLTED RT STOP TIME TERMS REL: 2074 SIMCLOCK RBS:3000OOO.OO TERMS 
MRX: 50000 SIMCLDCK REL:3OO0000.O0 XRCTS NOW: 388 STOP REL:3000OO0.O0 XRCTS MRX: 888 CLOSE REL:3000OO0.OO 
SEED RND: 17 SEED SET: 0.00 RERL TIME:12188.O0 ............................... QUEUE STRTISTICS ............................... 
NRME CURRENT RVERRGE RVERRGE NUM OF ZERO MRXIMUM MAXIMUM CONTENTS CONTENTS WRIT EXITS WRITS CONTENTS 
WRIT BICCHIP O 1 3.94 3089.57 3825 723 16 13552.14 588CHIP 0 O 0.02 22.36 2778 2591 3 1141.10 588MNGR 
0 0 0.O0 0.$2 2075 2050 1 97.10 DMR_M_B Q O 3.30 14083.18 704 153 15 55227.78 DMRBM Q ? 6.87 14578.82 
1372 3 ? 50088,00 RBUFMGR O O 0.OO 0.00 2113 2113 0 0.00 XBUFMGR 0 374 181.38 394588.81 1378 18 389 642974.08 
-- ........................... STORRGE STRTISTICS ......... f .................... NRME CURRENT RVER~GE 
RVERRGE HUM OF UTILIZRTION MRXIMUM CRPRCITY CONTENTS CONTENTS TIME/XRCT EXITS CONTENTS BICCHIP I 0.88 
76B.88 3828 0.88 1 I 536CHIP 0 0.18 210.01 2779 0.18 1 1 588MNGR 0 0.05 87.77 20?5 0.05 I I DMR_M_B 0 
O,82 3515.48 704 0.82 1 I DMR_B_M 1 1.00 2187,18 1371 1.00 I 1 RBUFMGR 1 15.41 4287.43 ?03 0.28 56 56 
XBUFMGR B 7.93 2188.18 1371 0.89 B B ...o.oo........o.oo..........o..o.......o...o......oo.....o........o.. 
...... .... PRCKET STRTISTICS PRCKETS GENERRTED FROM ETHERNET FROM HOST PRCKET TYPE CONTINUOUS 238 33.5% 
485 27,?~ LONG BURST 132 18.82 355 20.2Z SHORT BURST 338 47.7M 814 52.1~ TOTRLS ?04 28.6% 1754 71.4% 
TOTRL NUMBER OF BYTES GENERRTED ?38137 -2458 PRCKETS -RVG SIZE 285.5 TOTRL BYTES SENT BY THE HOST 213639 
-1371 PRCKETS -RVG SIZE -155.8 TOTRL BYTES RECEIVED FROM ETHERNET 462574 -703 PRCKETS -RVG SIZE -858.8 
NUM. OF PKTS. RECEIVED ON FIRST TRY ?04 100.02 OF PRCKETS SENT ON ETHERNET EFFECTIVE DRTR TRRNSFER RRTE 
225538 BYTES/SEC NUMBER OF RECEIVE BUFFERS 58 OF 256 BYTES ERCH - 1433S TOTRL BYTES NUMBER OF TRRNSMIT 
BUFFERS 8 OF Z56 BYTES ERCH 2048 TOTRL BYTES ================================================================================ 
Figure 5: Sample Output from Micro PASSIM Simulation RE FE RENCE S Barnett CC (1981), micro PASSIM: 
A discrete-Event Simulation Package For A Microprocessor Using UCSD PASCAL. IN: Modeling and Simulation 
On Microcomputers, LA Leventhal (ed), Society For Computer Simulation, San Diego, CA, pp 60-64. Hewlett-Packard 
(1974), The Hewlett-Packard Interface Bus - HP-IB, Hewlett-Packard Company, Palo Alto, CA. Hewlett-Packard 
(1981), Pascal Language System User's Manual for the HP9826 and HP 9836 Computers, Hewlett-Packard Company, 
Fort Collins, CO. Intel (1982a), The Complete VLSI LAN Solution, Intel Corporation, Sunnyvale, CA. 
 Intel (1982b), IAPXi86 HiGh Integration 16-blt Microprocessor, Intel Corporation, Sunnyvale, CA. Intel 
(1983), 82586 Reference Manual, Intel Corporation, Sunnyvale, CA. Tanenbaum AS (1981), Computer Networks, 
Prentice-Hall, Englewood Cliffs, NJ. Tiberghein J, (1981), The Pascal Handbook, Sybek Inc., Berkeley, 
CA. Uyeno OH, Vaessen W (1980), PASSIM: A Discrete-Event Simulation Package for PASCAL. IN: Simulation, 
Vol 35, No 6, pp 183-190. Tom Vayda, Larry Wear 250 200 150 I00 50 250 - -- 200 150 IO0 50 250 200 
150 a_ o, 100 50 250 200 i ISO - lOO F- 50 250 8 ~ 200 ~ 150 ~ 100 50 250 ii1 --,~ 200. i  N 15o g 100 
i-- g~ 50 Memory 8192 BIC Utilization ,40 Lost Packets 3 Second Statistics I __ ~ Data Rate I -~-/ 1,DO 
,-~ XBUFMGR I /RBUFMGR  / / , ! // .75 / / I ,50 //' / .25 t ,05 ,IO ,15 ,2 ,25 ,3 Figure 6: Performance 
as a Function of Ethernet Utilization Memory 8192 Ethernet Utilization ,18 . 3 Second Statistics Data 
Rate -1.00 ~ -~X UFMGR ,75 8 .5O '~ .25 ~- ~ ~ ~ Lost Packets I I t I I ,l ,2 ,3 .4 ,5 Figure 7: Perfomance 
as a Function of BIC Utilization Data Rate -I, O0 ' ~ XBUFMGR ,75 ~ Lost Packets Ethernet Utilization 
,18 ~s BIC Utilization ,40 3 Second Statistics .50 ,25 ~ "" RBUFMGR t I ""i I 4K 8K 16K 32K Figure 8: 
Performance as a Function of Memory Size MELISSA J. WALLS received the B.S. degree in biology from Denison 
University, Granville, Ohio, in 1976 and the M.S. degree in computer science from the University of Maryland 
at College Park in 1981. She is a Member of the Technical Staff of The MITRE Corporation located in 
Seabrook, Maryland. Her interests include computer performance evaluation and simulation and analytic 
modeling. Ms. Walls is a member of the Association for Computing Machinery and SIGMETRICS. Mailing address: 
Melissa J. Walls, The MITRE Corporation, 10210 Greenbelt Road, Suite 920, Seabrook, Maryland 20706. Tele: 
(301)794-7506.  
			
