
 AN ORGANIZATIONAL STRUCTURE TO GUARANTEE TESTING, DOCUMENTATION AND SOFTWARE SUPPORT Herbert Harris 
Manager, Systems Testing/Documentation Academic Computer Center University of Kansas P.O. Drawer 2007 
 Lawrence, Kansas 66045 913-864-4291 Introduction What this paper advocates is not a new thought for 
anyone attending a User Services Conference. It may well be a position that many of you have taken. Given 
that this is the case, you may well ask why would I persist in belaboring the obvious. Well, I am here 
to present a case where the grand ex- periment has been tried. A case where a user-oriented organizational 
group is in control of all software on a computer system. This was not accomplished through a bloody 
coup, blackmail, or bribery. This structure developed in response to an organizational need because of 
personalities. However, once in place it has worked well even though many of the original personalities 
are no longer present. It has some flaws and I will discuss these, but philosophically it has the right 
em- phasis. Goals Let me begin with the obvious. At the risk of boring you I will briefly outline what 
I think the goals are for a computer center at an academic in- stitution. This is by no means a com- 
plete list. It is the part of the list that concerns the matters I wish to discuss. First, the computer 
system should be reliable in both the hardware and operating system. Predictable should be a part of 
reliable. It should be up and running during the advertized hours. Second, it should have timely turnaround 
and response time, the first for batch and the second for time sharing. Third, it should have reliable 
libraries including compilers. Fourth, all software should be adequately documented (the definition of 
'ade- quately' is always the sticking point). For the operating system this is the responsibility of 
the vendor. For the applications libraries, the center. Fifth, it should provide humane service. Usually 
this means some form of personal consulting. These are approximately in the order of importance, although 
there Permission to copy without fee all or part of this material is granted provided that the copies 
are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of 
the 01980 ACM 0-89791-023-0/80/1100/0071/$00.75 is not much difference between some of them. For example, 
of what use are reliable libraries if no one knows about them? On the other hand what use is documentation 
if the programs do not work? In the remainder of this paper I will discuss reliable libraries, ade- guate 
documentation and humane service. Library Concepts There are a number of organization concepts for 
a library of applications programs. I am not referring to the technical details of how to organize a 
library. What I mean specifically is the degree to which a computer center will stand behind its libraries. 
To sketch out the arguments briefly they run: i. A university is an institution of higher learning and 
research. Part of that research should be the explora- tion of algorithms, programs and tech- niques, 
even if these are questionable. The computer center should make these available and let the buyer beware. 
He could be warned. This warning may in- troduce prejudice, but the warning could be directed to the 
novice. This argu- ment represents one end of a spectrum of positions, the right, laissez faire, etc. 
In this type of library, user programs and anything else could be in- cluded. At the other end of the 
spectrum is the library that is completely guaran- teed by the center. In this situation any problem 
discovered will be fixed either by the center or by the vendor of the software. The argument for this 
type of library runs as follows: 2. The center is a service bureau. It is not a teaching department. 
It should provide reliable service. This reliable service should include a reliable library. Most users 
are not interested in 'playing around' with algorithms or programs. They want to get work done. The 
institution that I represent espouses this latter type of library. That position necessitates that errors 
discovered in programs be monitored and publi~fion and is dan ap~ar, and notice is given that copying 
is by ~rm~sion of ~e A~ocmtion ~r Computing Machinery. To copy other~se, or to republish, ~quires a ~e 
aM/or specific permission. 71 managed and we have a system for doing that. It means that there will 
be less time for development since program up- dating and correction are necessary. I do not intend to 
discuss the pro's and con's of these positions further. However, if any of you wish to discuss them I 
would happy to contribute my opinions. Documentation It is almost a given that every program should 
be documented. There should be both user documentation and maintenance documentation. There will be differences 
about what each of these types should look like and when in the course of program development the documentation 
should be written. I do not propose to discuss this in detail. I only bring up the subject to tell you 
what we do to provide the necessary background for understanding the case I am describing. At our center 
we have essentially four kinds of documentation and we hope to add a fifth in the not too distant future. 
 First, we print and distribute manuals. Some of these we produce and others come with with programs 
we ac- quire. Some of them are reference manuals. Others are tutorials or guides of one kind or another. 
We produce a photo-ready copy and have them printed. This produces output that does not look like it 
came from a computer. They are bound in bright, printed covers. This format makes them look professional, 
but they cannot be updated. We usually reissue a manual when an update is necessary. This is fairly 
easy with text processing languages. Second, we have online documenta- tion for time sharing users. 
We have documentation for all commands that are available in time sharing. This is a series of individual 
files which can be listed through a command in time sharing. Most of these files are short and are meant 
to provide the syntax of a command along with its arguments. However, we do have longer explanations 
on more complex systems. The format of these files is clearly distinct from the written explanations 
of these same programs. Third, we have a series of about one hundred short "writeups" about programs, 
techniques, or policies. These cover both batch and time sharing programs. We give these away free. 
Fourth, we have time sharing programs that are self-documenting. These are programs that provide their 
own documentation if the user requests it when the program is executed.  Finally, we are now trying 
to develop video documentation on a com- bination slide-cassette viewer. There are times when a visual 
presentation is worth tens of pages of text. The slide- cassette format does not require the ex- pertise 
that video tape presentations require to be effective and it also does not require a lot expensive equipment. 
I hope next year I will have some of these to demonstrate. Whenever a program is implemented on our 
libraries, we require that it have documentation. This means at least a writeup for a batch program or 
subroutine. For time sharing commands or programs it must also have online documentation. Announcements 
 We require that every change to the operating system or the libraries be an- nounced to the user public. 
This is a letter , an online news announcement and sometimes a message printed on batch output. This 
requirement reduces cliques. It will never eliminate them, but you do not have to be a member of one 
to know what is on the libraries. This is public knowledge. This is the equality part of humane treatment. 
 User orientation There is no one who would admit at our center that they do not have the user's best 
interest in mind in everything they do. However, the user interest may sometimes take a backseat to expedience. 
For example, someone writes a program in which all the error messages are numbers. This makes the program 
smaller and allows the grouping of errors together in types. However, it is maddening to have to look 
up those damn numbers all the time. Now it may be in the "best" interest of the user to execute a smaller 
program. It costs less and uses less of the computer resource. The question is whether economic gains 
should be traded for the convenience of having error messages in plain text. I would contend that anyone 
who has worked with the average user would opt for the latter. Now there are two sections of a center 
that have the most contact with the public. These are the user services section or whatever it may be 
called and the operations section. The first handles requests and consulting and the latter must keep 
the machine running and deals with the public when no one else is around. These two sections have dif- 
ferent prospectives, concerns and back- grounds. Typically the first is programmer oriented and the second 
is hardware or operationally oriented.  72 The contact with the public of these two groups provides 
a clear prospective on what the concerns of the everyday user are. It is not as easy to be diverted 
by a select audience. The sheer weight of numbers tells you what is needed or most important. It will 
not guarantee sympathy, but if you survive in either of these groups, your heart is in the right place. 
 It is my claim that a group with this user focus should be in charge of software that is implemented 
on the com- puter system, both systems and applica- tions software. Control Now obviously user-oriented 
groups cannot do the work of systems programmers and others. However, to make what I am suggesting work, 
these groups must maintain control of the software on the computer. They can do this only through quality 
control. These groups must enforce standards. The concept of standards can entail everything from complicated 
testing and benchmarks to simple loading. These standards should also mention documenta- tion and announcements. 
The testing can be certified by the contributing group or the controlling group can do the testing. 
The concept of enforcing standards is an important one. This means that software can be rejected for 
rational reasons. Everyone knows the ground rules of the game before they begin. With the control of 
quality as-  surance it is possible to maintain con- sistency and uniform operational ap- proaches. 
Enforcing these is not always easy and there should be room for flex- ibility. There are always tradeoffs 
 between staff time and consistency. To an extent flexibility compromises the rationality of imposed 
standards, but management decisions are always neces- sary in these cases. The locus for these decisions 
always should be clear, whether it is a group or an individual. Further flexibility should always be 
 labeled such so as not to be taken as a precedent for a new standard. Example I now would like to 
discuss my own case as an example. The flowchart below outlines the procedure by which a programi~or 
operating system is "turned over" for implementation. I am the manager of a small group associated with 
the operations section of our center. The operations group and my group report to the same assistant 
director. The systems group which is in charge of yes no l  i Lacier to Asszstant Dir, Le~er to ~ssistLn~ 
Oir. ! Production Servzces Production Services Copy S/steers Testing with Copy to Systems Testing with 
 { I. List of changes in Release I. Description of program : ~, ~&#38;me ~ Number -'~VAP.H ~ TOTSY5 2. 
~scription o{ testing i along with along with l. Dealt of User Anno~¢e~n= Draft of User ,kqno~cement 
2, MAint ChanCe Document a~ ion 3. User Documentation in ~OFF foz~at 4. Files on TEST H" creation c. 
Test program xF .~sisrzn¢ oir. OK to begin i~ lemenzacion ~P Docu~entac ion and o Noci£y no notify 
other groups .~/, yes Systems Testing  I .... *.... i ~P i~lesent by outline of testing Assist. Oir. 
. draft of bulletin Prod. Serv. wlch ~k Implementation b Mz.ke r I ~od~ fications I '~ no 7 ~ ~c,pt~, 
bz 0pera~ions > # I [~lemen~ation Announcement I Vbul~etin3 ulscnD~zon o:' ' I User documln~ation : 
I FSAV~ ~urcel maintaining the operating system reports to another assistant director. The user services 
section reports to yet another assistant director. The user services group is in charge of maintaining 
ap- plications programs and developing or converting new programs for our libraries. Neither I nor any 
of the people that work with me are responsible for developing software for users. We do develop internal 
software and test programs, but none of this is used by customers. This separation eliminates any conflict 
of interest. If my group was a part of a user services group, we would have to have the specific charge 
of quality assurance and not program development. AS illustrated in the flowchart, each program or operating 
system must be accompanied with documentation, an announcement, a source listing where ap- propriate, 
and a commitment for main- tenance. This latter commitment is made by having a supervisor or assistant 
director sent a letter stating the software is ready to be implemented on the system. This letter does 
two things. It insures that management is aware of programs being implemented on the system and at the 
same time it pre- vents the syndrome where two or three people get together late one night and  73 
someone says "you know we need a program to list all of the files controlled by one person." Everyone 
nods in agreement and they sit down to write the program. The program is written in half an hour, 
tested for ten continuous minutes and then transferred to a user accessible library. The next day members 
of the group begin to tell their friends about the program. Sending the turnover letter allows questions 
to be ask about the necessity of the program, the con- sistency of its format, its documenta- tion and 
other things. The whole procedure means that no one can validly implement programs except those charged 
with maintaining the library. However, being a part of a univer- sity setting it would be inappropriate 
to stifle inventiveness, creativity, or experimentation by staff members. To allow for experimentation 
and make these experimental programs available to other staff members, we have developed an in- ternal 
catalogue that is accessible only by staff members. Programs can be im- plemented on these libraries 
more infor- mally. There they can be tested and and finally implemented on our libraries. When a program 
is turned over, it must have written documentation in an appropriate format, a source listing, a draft 
of an announcement, and ap- propriate files to implement the program. We can at that point begin testing 
the program. With some programs we take the certification of the or- ginating group as sufficient testing. 
This is the case for a program like SPSS which we convert for Honeywell equip- ment. The group that does 
the conver- sion, tests their efforts and we have neither the manpower nor expertise to duplicate their 
efforts. The point is that we could if we wished. For systems software we have a battery of test that 
we run against each new system. We also schedule user tests of a new system which by the way always turn 
up errors that never show up in any other testing. A schedule for implementing software is developed 
with an eye to causing the least inconvenience for users. If a class is using a program, we will not 
implement a new version in the middle of the semester which would change the way the program operates. 
We will however, correct errors. All software changes must be scheduled for times that cause the least 
inconvenience for users. Our rule of thumb for implementation is that programs that are upwardly com- 
patible can be implemented and then an- nounced. Versions that are not upwardly compatible must be implement 
at unobtru- sive times and announced at least one week in advance. New programs can be implemented and 
then announced. All of these guidelines are outlined it a manual called Software Procedures.  Drawbacks 
 There are several problems that must be avoided in an arrangement such as I have outlined. I have already 
men- tioned that guaranteed libraries probably entail more maintenance than informal ones. Second, quality 
as- surance testing can lead to a duplica- tion of the testing effort. This need not be the case since 
the focus of testing could be quite different. Quality assurance testing could focus on user oriented 
tests with all of the lack of uniformity that that implies, i.e. mistakes, wrong responses, etc. However, 
I must admit that in our case developers often want to use our battery of tests and this leads to a great 
deal of overlap. Third, since we have made it difficult for individuals to market their wares, there 
is a tendency to give individual files general access permis- sions. Informal networks develop in spite 
of the goal of open, announced ac- cess. There is probably no way out of this other than a police state. 
It is something that has to be continuously cautioned against. Occasionally, these arrangements arise 
because of a valid need. If a user is having a special problem and needs a short term solution to his 
problem, we have a catalogue where we can implement these along with test versions of new programs, demon- 
strations, etc. But there will always be a tendency for a short term fix to become a permanent solution. 
 Third, small adjustments to a program are probably delayed more than is warranted by the change. ! am 
speaking here of when a correction necessitates no change to the documenta- tion or the user interface 
of the program. These can be expedited as much as possible and we allow them to be im- plemented without 
prior announcement, but they must still be turned over with a letter. This delay is one of the prices 
that is paid for the system. It seems worth it to me. Finally, rejection after develop- ment is ostensibly 
complete leads to hard feelings and creates pressure to accept programs in a less than perfect state. 
Much of this can be avoided by the development of standards. The ones we have are minimal. I see these 
as continuing to develop over a period of time. Summary In short I believe that vesting the quality 
assurance function in a group with a customer orientation will provide the control and concern to insure 
well documented and reliable software. 74 
			
