
 A FUNCTIONAL INSTRUCTION MIX AND SOME RELATED TOPICS James H. Hughes *Xerox Corporation E1 Segundo, 
California 90245 ABSTRACT In recent years the use of instruc- tion mixes to define measures of relative 
computational power has diminished. This paper will describe how a systemic func- tional mix of much 
greater power and complexity than the traditional Gibson Mix was derived, then employed effective- ly 
in solving problems which arise in central processor definition and design. Some extensions of the basic 
technique are also covered, which include de- composition into fractional mixes as well as the study 
of instruction doublets and triplets. INTRODUCTION The name of Jack C. Gibson is in- separably linked 
to the well-known in- struction mix. In a report written eleven years after his original investi- gations 
[i] Gibson writes that there was no intention of applying the technique outside IBM, and that in any 
more gen- eral use a number of constraints should be applied to mitigate against i~- precision. Althoughthe 
original frame- work has now become obsolete, he notes that an updated version ~Tould have sig- nificant 
interest: "A mix generated today could be constructed on a wider job base and on hundreds of millions 
of instruction executions. Valida- tion could be a controlled scien- tific experiment. Instruction pairs, 
triplets, etc., could be traced ..... " SOME THOUGHT ON MIXES" The numerous variants of the Gibson 
Mix usually contain some ten to twenty- five distinct instruction types, and the incidence of factorssuch 
as indexing and indirect addressing is given only in a broad and non-specific fashion. Be- cause of suchshortcomings 
these mixes can typify no more than a few attributes of benchmark user programs, and they fail to meet 
the needs of the computer de- signer seeking to provide a broad spec- * The author l~ now ~ith the Digital 
Equipment Corporation, Maynard, Mass. trum of computational performance. It was a need to fill this 
void which provided the initial impetus for the work described in this paper: what was sought was a 
comprehensive functional mix, so broad-based and deta£1ed that it could provide a model of CPU usage, 
and thus serve as a yardstick across a family of computers. It should be systemic in re- flecting 
not only the effects of a typi- cally heavy user load, but also the be- havior of the operating system 
and the general utilitv programs supporting that workload. MIX SIZE, COMPONENTS, DERIVATION In setting 
the size for an ideal mix one should remember that a large mix will always reduce to a smaller version, 
with minor components dropping out due to rounding truncation, but the process is not reversible. Also 
it is intuitively obvious that for a mix to offer a rep- resentative sample of instruction execu- tion 
it should be large enought to con- tain a sign£ficant number of tasks ---or multiprogrammed slices of 
tasks ---drawn from operating system overhead, the processing of user-requested services, and user code 
execution. Based on earlier observations of the mean free paths be- tween system state transitions, we 
decided on a mix size of ten million components, requiring from fifteen to thirty seconds of compute 
time over the range of com- puter systems being considered. (In contrast, the total number of software- 
traced instructions used in formulating the original 1000-component Gibson Mix was less than nine millions.) 
 Recalling that the new mix was to provide a determinist£c model of CPU execution, the components would 
neces- sarily embrace all of the dependent variables of the instruction timing function. Since our observational 
ve- hicle would be the Xerox Sigma 7 running under the CP-V operating system the relevant instruction 
set would number 102 operation codes. Other factors bearing on tiring include hardware address mapping, 
memory interleaving, I/O inter- ference with memory access, 145 variable-length instructions, addressing 
modes, and the success or failure of conditional branches. The first three of these factors posed little 
difficulty: their effects were well-known and rela- tively minor, and could be allowed for. It was 
necessary, however, to perform a separate series of measurements to determine the mean values of variable 
length operations. The remaining fac- tors have to do with three intrinsic variables affecting some but 
not all of the instruction set: Addressing Indexed or Mode Not Indexed Addressing _ Direct or Mode 
Indirect Conditional Success or Branch Failure This imposed a further differentiation into anything 
from one to eight sub- categories for each of the 102 possible opcodes. Given a know,ledge of the use 
of the restricted subset by the operating system some slight simplification could be made, but there 
remained 383 essential components to be recognized in the in- struction mix measurement. The ADAM programmable 
hardware monitor [2] was used, which is capable of accumulating 128 subcategory totals during a measurement 
run. To provide total coverage the observations were of 45-minute duration, divided into 15- minute runs 
of each of three measure- ments. During this time continuous monitoring took place -no single in- struction 
went unobserved. All sessions were chosen to lie within peak load hours, which implies a minimum of 70 
on-line users. They were run for several weeks of normal operation until the range of inter-session variability 
had stabilized. By that time some three billion executed instructions had been categorized: this database 
was then reduced to the desired mix size of ten million components. THE TEN MILLION MIX The full mix 
is given in Tables i.i -1.3, and in summary form in Table 2. (Instruction mn/monics are defined in 
Reference [3] .) There is a wealth of information for the hardware or soft- ware designer in such tables, 
and this was an additional factor in the decision to normalize to so many components. To give just one 
example, an overview of operating system behavior can be ob- tained by analyzing the use of the privileged 
subset. CO~PARISONS USING THE MIX This mix has now been used in a wide variety of comparative performance 
evalu- ations -on the basis of similar com- plements of resources, operating systems and workloads, where 
the only variables were the speeds of CPUs and/or memory. The resulting changes in microcode or internal 
structure have led to increases in performance ranging from 8% (existing system) to 40% (new design). 
 To conserve space we shall discuss only a t%,o-way comparison between a Sigma 7 and a Sigma 9, each 
configured with 128K words of (similar speed) memory. The Sigma 7 is a simple machine, in the sense that 
there is no pipelining or overlap of instruction prefetch and operand access. Recalling the earlier 
statement that allowance could be made for m~nor variables (which in this case are mostly attributable 
to memory inter- leaving) we are now ready to calculate the mix-weighted sum of £nstruction times. For 
convenience we use as a standard measure of comparative compute power the reciprobal of the Sigma 7 total 
mix time, in units of thousands of instructions per second (KIPs~. The adoption of this yardstick is, 
of course, in no way in- consistent with changing Sigma 7 KIPs rates as the ~ix is reduced in size. 
Now cons£der the Sigma 9. Unlike the Sigma 7 it belongs to the class of machines which may simultaneously 
be re- quest£ng instruction fetch and operand access for different instructions, and this particular 
source of contention introduces marked variability in instruc- tion timing. Before we can calculate mean 
compute power some knowledge is required of the probabilistic distribution of the ti~ings. In the present 
situation, covering 383 cases, estimation presents an inordinate task either by direct measurement or 
digital simulation. Fortunately the problems of simulation are tractable if one models not the absolute 
timings but £nstead considers extensions beyond minimum values. The reason for this lies £n the fact 
that a number of different instructions are prolonged in ident£cal fashion according to the composition 
of the 'bread' of the instruction trl~plet 'sandwich' in which they constitute the 'filling' In this 
way some 40 unique distribu- tions are needed to model all of the Sigma 9 timings, and this task was 
performed using the ten million mix as an initial source of synthetic trace data. Let us say that a 
383-element vector F represents the mix weights, and that similarly ordered timing vectors have been 
derived for minima, maxima, means, and standard deviation of means (tmin, tmax, ~, and ~ respectively). 
Assume that the Sigma 9 requires some function T(F,~) seconds to execute the full mix. Then according 
to the Central Limit theorem, in a series of random trials observed values of T will have a normal distribution, 
provided only that the elements of F and their sum are large numbers. Furthermore it follox~s that if 
 the mean of T is ~, and its standard devi- ation is ~, then: 383 = i~__1 (FiXt i) (i) and 383 ~2 
= ~--(FiX ~i2) (2) i=i As usual we know that 68.3% of all T will lie within ± 3,, and we shall adopt 
this as a measure of confidence in T. In comparing the two machines we take the largely compute-bound 
case (the preponderant situation for CP-V systems), noting that the slower of the machines may eat into 
any I/O wait time at a penalty in responsiveness. We also ignore (as a demonstrably minor second- order 
effect) any contention for memory due to I/O transfers. With the vectors F, tmin, tmax, ~, ~ assembled 
in an APL workspace (together with a timing vector for the Sigma 7), the basic information was manipulated 
and presented in various ways so as to highlight differences between the two systems. Tables 3 and 4 
are examples of resulting output. The latter Table shows extremes of a sorted list in which the weighted 
times are ordered by their contribution to the (signed) difference in overall compute- time -which 
helps to underscore relative strengths and weaknesses. APPROXImaTION METHOD In the case at hand, the 
problem was amenable to digital simulation. We may ask: would any 'quick and easy' approximation method 
lend itself to a less rigorous solution if the full statistical information were not readily obtainable? 
 Although the vectors ~ and a are difficult to acquire, the minimal times are usually well-known and 
maximum ex- tensions can be estimated from worst- case considerations. An examination of the output from 
a series of timing simulations suggests the following observations:  tmin relate strongly to memory 
access times  tmax relate strongly to memory cycle times  distributional skewedness moves to the 
left with increasing degree of memory interleaving  These simple and perhaps obvious factors suggested 
that a good fit to an estimate of overall execution times might be ob- tained by assuming suitable interpolation 
points within the tmin-tmax ranges, de- pending on the degree of memory inter- leaving. Let us apply 
these conjectures to the case of the Sigma 9 with four-way memory £nterleaving. We make the approxi- 
mating assumption (as a pessimistic view) that the distributions may be represented giving a family of 
383 distributions as in F~gure i. Probability I Time tmm i T i tmax i Figure 1. As~med timing di$tributlo.s, 
1 ~ i ~ 383 Let R i be the range, where R..l= tmax.-1 tmin.. No~.z assume uniform interpolaElon points 
which in all 383 cases lie at some fraction k of the respective ranges: i.e. 0 ~<k~<l, and hence ti=tmini+kRi 
. Then elementary statistical theory indi- cates that the variance of such double- rectangular distributions 
is given by ~i 2 = k (l-k) Ri! (3) 3 " In our case, with four-way interleaving, we obtain a good fit 
by setting k=i/3, and subst£tutl~ng in Equation (3) we have ~i 2 = 2Ri 2 (4) 27 Using this 'Range Method' 
we may estimate and the ±3~ limits. In considering some results we may also address the ques- t£on -~o%7 
large should the mix be in order to generate confidence'in estimates of comparative compute power? The 
mix reduction process mentioned earlier was carried out, and for Sigma 9 relative computer power and 
confidence limits were calculated at various mix sizes, using both the more rigorous and the range method 
timings. F£gure 2 shows the results. The rigorous method (Z9 curve) is clearly stable, wl~dh good confidence 
limits, down to i0,000 components. At the same time the range method (Z9' curve) tracks dedicated to 
the Monitor Service function. well, though its range of variability is unsatisfactory below i00,000 
components. It appears that the traditional Gibson Mix, with three-digit precision, is poised on the 
knee of the stability curve, and that one should quote mix weights to at least four or five digits, depending 
on the quality of the estimates one has of the component timings. Several factors contribute to v~hat 
at first glance may appear to be a sur- prisingly good fit for the range method.  because confidence 
in the tmin vector is high, essentially it is the d~fference vector (t- tmin) which is being estimated: 
the values are small in comparison with those of ~ on which ~ is dependent.  for any single distribution 
the range is a poor indicator of the mean, but the errors tend to cancel out over 383 distributions 
 given a high confidence in tmin, estimation errors in tmax are correspondingly reduced in  In fact 
T is relatively insensitive to -if k is varied between 0.25 and 0.40, the estimated compute power varies 
only ±4% about T. This is perhaps the point to note that after going through repeated pro- cesses of 
checking and refining the timing vectors, assisted bv lists such as Table 4, for example, comparisons 
based on the use of the ten million mix show excellent agreement with benchmark and other timings run 
in compute-bound environ- ments. EXTE~SIONS OF TECHNIQUE An increasing use of slhnulation as a design 
tool -based on the use of the ten million mix as a yardstick -has led to requests for several new ~inds 
of statistical data. Space limitations permit only a brief discussion here, but the examples may suggest 
fruitful lines of investigation to other worhers. Simulating the performance of a recently-introduced 
multi-processing version of the CP-V operating system introduced the topic of 'fractional mixes'. The 
single CPU version of CP-V reflects in the hardware an unambiguous picture of the three possible soft%~are 
system states: User Code Execution (Mapped, Non-privileged); User-Requested System Service (Mapped, 
Privileged); Monitor Service Overhead (Unmapped, Privileged). In the multi-processing version a single 
CPU (the t~STER) is The remaining CPUs are SLAVEs, and execute User Code. User Service is divi- ded 
between SLAVEs and MASTER which also devotes the residue of its time to the execution of I/O-bound User 
Code. To help model this situation we derived instruction mixes corresponding to the three system states, 
and also re- evaluated the overall mix. It was evident that the full ml~x was exhi'bi~ing more variability 
on an ~nter-sesslon basis than before, though the three fractional mixes were remarkably stable. Investigation 
showed that over the intervening months a substantial volume of compute-bound CAD work had been removed 
from the work- load. Whereas the User/User Service fractZon had formerly amounted to 80±5% of system 
time, it now represented 70±15%. Though the overall mix was in fact almost unchanged when compute- bound, 
the three fractional mixes dif- fered sufficiently from each other that the total p£cture was distorting 
due to changes in proportionality. These differences are brought out in the h£stograms of F~gure 3, which 
include all opcodes exceeding 1% of any single mix. In a hardware design study for a new CPU which was 
to include a cache memory and a highly segmented pipeline, ~t was evident that instruction se- quentiality 
would play an important role. To augment digital simulations based on a limited amount of software-traced 
data we set out to investigate some of these questions. A three-way classi- fication of £nstruct~on types 
was adopted, based on their impact on the Preparation and Execution units of the new CPU:  Branch Instructions 
-may abort pipeline  Short Instructions -pipeline not tied up  Long Instructions -block pipeline, 
e~ther through multiple operand accesses or prolonged use of arithmetic unit  In Table 5 we see one 
example of this type of data: d~strlbutlons of the proport~on of class members in a con- secutive string 
of a g~ven length. Table 6.1 shows a breakdown of instruction pairs beginning w~th a successful branch 
instructl'on of a particular type, then continul~ng w~th a Long or else a specific Branch or Short instruction. 
In the latter case the continuing string is disDlaved as a triplet in Table 6.2. GONCLUSIONS A new 
lease of l~fe has been given to tbe instruction m~x in computer 148 performance evaluation in the context 
of the systemic functional mix and its fractional components. Mix techniques have been extended to 
machines having more complex timing, and also by the use of statistics relating to instruction sequentiality. 
 Comparisons based on the functional mix have been shown to equate ~ell with 'real' (i.e. benchmark[ 
performance, and the minimum size of mix to ensure sta- tistical validity was investigated. Finally 
an approximation metbod was introduced which fac!l£tates accurate prediction of compute-5ound performance 
even when CPU or Memory are at the des£gn stage, incapable of being measured directly. ACKNOWLEDGEMENT 
 The author would like to express hxs thanks and apprec£ation to Mr. J. Smeltzer for a number of invaluable 
d~scussions throughout these investigations, l~n addition to his work in modell~ng the Sigma 9 instruction 
timings. REFERENCES I. Gibson J.C. The Gibson Mix IBM System Development Dl~v£s!on Report, TR 00.2043 
Poughkeepsie, New York, 1970 2. Hughes, J.H. On Using a Hardware Monl~tor as An Intellig~nh Perip e~l 
Performance Evaluation ~eview ACM (SIG~) Vol. 2, No. 4, December, 1973  3. Xerox SI~A 7 Computer Reference 
Manual, 90 0950 Xerox Publication, E1 Segundo, California, 1971  f~ o ~F I l I I I I Q o =o , f ' ! 
,/ i u ~',\ o / I ./ I "\ ~o~ 150 INSTRUCTION MIX VERSION CP-V A01.01 INSTRUCTION MIX VERSIONCP-V A01.01 
DIRECT INDIRECT ............................................ NO NO MNEMONIC INDEX INDEX INDEX INDEX 
TOTALS ..................................................................... AD 7,445 211 7,656 AH 
696 2,694 100 2 3,492 AI AIO 535,171 2,080 535,171 2,080 AND 198,507 46,313 2,276 544 247,640 ANLZ 25,234 
6,529 2,813 34,576 AW AWM 115,172 6,686 17,687 12,125 144 3,206 311 231 133,314 22,248 BAL 257,702 2,408 
1,918 262,028 BCR -B 1,108,152 262,665 178,477 1,961 1,551,255 BCR -NB 426,228 15,785 25,937 457,950 
BCS -B 444,693 31,360 12,593 566 489,212 BCS -NB 304,307 12,259 16,652 956 334,174 BDR BDR -B -NB 202,460 
20,316 43,700 I 997 92 247,157 20,409 BIR -B 119,688 64,771 12 184,471 BIR -NB 1,381 1,381 CALl 4,038 
908 4,946 CB 8,095 51,832 10,064 4,794 74,785 CBS 11,106 11,106 CD 1,118 4,997 143 38 6,296 CH 110 71,193 
41 6,310 77,654 CI 493,360 493,360 CLM 10,352 1,225 88 481 12,146 CLN 1,068 15 1,083 CS CVA 8,775 4 2,198 
2,456 3,691 17,120 4 CVS 77 77 CW 212,684 107,541 1,508 7,677 329,410 DA 6 6 DC 37 37 DD O DH 842 86 
928 DL 131 3 134 bM O DS O CONTINUED DIRECT INDIRECT ............................................ NO 
NO MNEMONIC INDEX INDEX INDEX INDEX TOTALS ..................................................................... 
 DSA 1 4 5 DST 24 1 25 DW 5,062 1,908 2 6,972 EBS 6 6 EON 10,712 1,729 22 12,463 EXU FAL 329 83,400 33,799 
2 3,464 306 658 27 38,250 83,735 FAS 21,O96 4,435 44 25,575 FDL 2,537 34 394 26 2,991 FDS 8,982 528 17,072 
26,582 FML 10,940 510 423 65 11,938 FMS 14,438 42 4,445 18,925 FSL 1,348 171 57 190 1,766 FSS 32,899 
3,941 8,596 4,407 49,843 INT 1,965 27,261 522 4,184 33,932 LAB 236 129 39 404 LAH O LAW 530 12 185 727 
LB 55,207 380,579 28,513 76,846 541,145 LCD 702 355 1,057 LCF 18,371 27,217 2,299 4,550 52,437 LCFI 103,854 
103,854 LCH 26 293 5,320 5,639 LCW 15,223 856 208 3 16,290 LD LH 48,814 20,890 32,064 64,546 7,550 4,110 
3,308 35,007 91,736 124,553 LI 531,087 531,087 LM 12,370 8,352 24 10,275 31,021 LEP 35 35 LPSD 14,192 
8,912 23,104 LS 9,506 7,939 948 194 18,587 LW 479,106 212,542 39,994 34,409 766,051 HBS MH 6,850 1 6,850 
I HI 11,415 11,415 MHC 5,454 5,454 CONTINUED TABLE 1.1 TABLE 1.2 INSTRUCTION MIX VEHSION CP-V AO1.01 
DIRECT INDIRECT ............................................ NO NO HNEHONIC INDEX INDEX INDEX INDEX 
TOTALS ..................................................................... HSP 12,812 7,120 249 20,181 
HTB 3,257 25,103 411 1,543 30,314 MTH 713 6,820 7 366 7,906 HTW 103,163 19,488 1,840 13,132 137,623 MW 
2,512 586 23 53 3,174 OR PACK 49,827 32 1,991 1 15 51,833 33 PLM 20,410 2,O53 22,463 PLW 43,O15 1,115 
5,613 49,743 PSM 20,521 2,797 2,052 25,370 PSW 41 , 023 7,349 5,983 54,355 ED 5,256 5,256 S 270, I00 
26,712 151 296,963 SD 9,719 9,719 SF SH SIO 5,551 807 37 2,078 227 5,551 1 ,071 2,078 STB STCF 38,734 
16,646 159,138 2,O78 2,845 15 21,890 4 222,607 18,743 STD 53,899 15,594 2,418 5,360 77,271 STH 12,058 
32,278 1,312 12,409 58,057 ~I'M 7,814 6,013 4,989 2,997 21,813 STS 15,583 52,696 6,658 245 75,182 STW 
283,363 78,137 16,964 12,408 390,872 SW 38,525 7,979 335 71 46,910 TBS 0 TDV 2,078 23 2,101 TIO 2,122 
1,050 3,172 TTBS 58 58 UNPK 11 120 131 WAIT 1,837 1,837 WD 94,398 94,398 XPSD I0,333 10,333 XW 26,954 
4,282 39 3,846 35,121 TOTALS:- 7,238,806 2,036,218 421,821 303,155 10,OOO,000 TABLE 1.3 INSTRUCTION 
MIX VERSION CP-V A01.Ol INSTRUCTION MIX VERSION CP-V A01.Ol SIGMA 9 TIMES IN MICROSECONDS BY SIMULATION 
-4-WAY INTERLEAVE DIRECT INDIRECT ............................................ SIGMA 7 SIGMA 9 INSTRUCTION 
NO NO ................................ GROUP INDEX INDEX INDEX INDEX TOTALS INSTRUCTION USEC MSECS USEC 
HSECS DIFFRNCE ......................................................................... GROUP AVRGE 
TOTAL AVRGE TOTAL MSECS 1 LOADS AND "i-CGX;;-~;; .......................................................... 
 STORES 1,593,883 1,068,572 112,395 215,468 2,990,318 STORES 2.39 7,158.54 1.49 4,443.10 2,715.44 2 FIXED 
PT 2 FIXED PT ARITHMETIC 2.21 2,114.26 1.53 1,466.15 648.10 ARITHMETIC 841,186 94,724 6,066 15,938 957,914 
3 FLOATING ARITHMETIC 6.66 1,474.53 5.29 1,170.30 304~23 3 FLOATING 4 COMPARES ARITHMETIC 175,640 9,093 
I0,390 E6,232 221,355 2.10 2,121.01 1.13 1,141.02 979.99 5 BRANCHES 4 COMPARES 1.51 5,424.54 1.44 5,163.67 
260.87 735,562 239,001 14,300 22,991 1,011,854 6 SHIFTS AND LOGICAL OPS 2.92 1,792.62 1.55 955.42 837.21 
5BRANCHES 7 CPU STATUS 2,885,256 466,748 240,142 4,141 3,596,287 AND CONTROL 3.07 1,091.16 E.57 911.32 
179.84 8 I-O STATUS 6 SHIFTS AND AND CONTROL 8.2~ 77.67 7.37 69.52 8.15 LOGICAL OPS 534,697 76,745 
2,449 559 614,450 9 PUSH/PULL A MULTIPLES 13.64 3,068.52 9.07 2,039.66 1,028.86 7 CPU STATUS 10 BYTE 
AND CONTROL 294,194 42,186 14,039 4,554 354,973 STRINGS 19.87 358.04 10.37 186.~0 171.24 11 DECIMAL 8 
I-O STATUS OPERATIONS 15.12 5.61 7.51 2.79 2.82 AND CONTROL 2,080 6,278 1,O73 9,431 12 CONVERSION 36.83 
2.98 27.11 2.20 0.79 9 PUSH/PULL A MULTIPLES 157,965 32,746 20,963 13,272 224,946 TOTALS:-24,689.47 17,551.93 
7,137.54 10 BYTE STRINGS 18,020 18,020 TABLE 3 11 DECIMAL OPERATIONS 242 125 4 371 12 CONVERSION 81 
81 TOTALS:-7,238,806 2,036,218 421,821 303,155 10,0OO,000 TABLE E INSTRUCTION MIX VERSION CP-V A01.01 
SIGMA 9 TIMES IN MICROSECONDS BY SIMULATION -4-WAY INTERLEAVE SORTED BY PERCENT INCREASE ................................................................ 
MNEM MODE FAEQ/1R7 SIG9 SIG7 TIME INC PER ONIC (*,X) USEC USEC MILLISEC CENT ---Z; ....... [~ .... ;~;[;;; 
.... ;T;; .... ;T;; ...... ;;;T;~--;T;; .... S 270,100 2.00 4.00 540.20 3.08 CI 493,360 1.04 1.95 448.96 
2.56 BAL 257,702 1.17 2.35 304.09 1.73 LW ,X 212,542 1.O2 2.35 282.68 1.61 LW 479,106 1.09 1.65 268.30 
1.53 LI 531,087 0.93 1.40 249.61 1.42 AI 535,171 0.94 1.40 246.18 1.40 PLW 43,015 6.60 11.00 189.27 1.08 
PLM 20,410 13.14 22.20 184.91 1.05 STW 283,363 2.01 2.65 181.35 1.O3 ................................................................ 
: : : : : : : : : : : : INTERVENING COMPONENTS HAVE AN OVERALL PERCENTAGE DIFFERENCE WHICH IS IN THE 
RANGE FROM -0.02% TO +1.001 : : : : : : : : : : : : --q;j .... ;........ ;[~;; .... ;[;; .... ;T~; 
....... :;T~--[;~;~ .... BCS -B 12,593 ~.45 1.90 -6.93 -0.O4 BIN -B 119,688 1.54 1.40 -16.76 -0.10 
ANLZ 25,234 4.21 3.25 -24.22 -0.14 BCR -B 178,477 2.18 1.90 -49.97 -0.28 SCS -B 444,693 1.43 0.95 -213.45 
-1.22 BCR -B 1,108,152 1.16 0.95 ~232.71 -1.33 ............................................................ 
.... TOTALS:-I0,000,000 7137.54 40.67 TABLE 4 HISTOGRAMS OF LENGTH OF RUN OF INSTRUCTIONS IN SAME GROUP 
 LENGTH .... % OF GROUP TOTAL .... OF RUN BRANCHES SHORTS LONGS I 92.591 79.234 98.199 2 3.032 ~.797 
0.826  3 0.286 1.742 0.043  4 0.115 0.767 0.004  5 0.005 0.268 6 o.113  7 0.057  8 0.035 9 0.O06 
 10 0.004 11 0.o03  12 0.001 13 o.o01  14 0.001 15 0.001 16  TABLE 5 2: SUCCESSOR TO SHORT OP, 
FOLLOWING BCR-,BCS-Y: THESE STATISTICS REFER TO EXECUTION OF A BCR-,BCS-Y FREQUENCY % PROB. RANDOM 
 IaSTRUCTION AND IMMEDIATE INSTRUCTION UNDER CP-V CO0 TOTAL STRINGS = 159,645,844 LONG INSTRS. 1: 
IMMEDIATE SUCCESSOR FREQUENCY LONG INSTRS. BRANCHES BDR-Y BDR-N BIR-Y BIR-N BCR-Y BCR-N BCS-Y BCS-N 
BAL TOTAL BRANCHES:- 28,965,181 SHORTS LCFI 2,880,544 LD 2,239,319 AI 16,519,360 CI 7,820,766 LI 12,533,266 
AW 995,912 CW 7,179,832 LW 22,162,322 HTW 4,076,421 STW 8,059,439 SW 2,017,810 LCW 290,416 LAW 5,794 
CS 72,347 XW 185,616 STS 798,855 EOR 16,702 OR 351,300 LS 76,420 AND 1,557,386 AB 35,739 CH 603,554 LH 
4,190,458 MTH 74,793 STH 934,953 SH 5,196 LCH 4,585 AWM 349,056 EXU 886,579 INT 1,308,082 LCF 1,616,971 
CB 2,515,659 LB 9,719,661 MTB 1,018,921 STCF 680,320 STB 5,252,968 11,643,341 6,201,522 620,262 1,127,874 
45,390 9,108,041 1,414,877 587,O81 524,067 9,336,067 % PROB. 7.293 3.885 0.389 0.706 0.028 5.705 0.886 
0.368 0.328 5.848 18.143 1.804 1.403 10.348 4.899 7.851 0.624 4.497 13.882 2.553 5.048 1.264 O.182 0.004 
0.045 0.116 0.500 0.010 0.220 0.048 0.976 0.022 0.378 2.625 0.047 0.586 0.003 o .o03 0.219 0.555 0.819 
1.013 1.576 6.088 0.638 0.426 3.290 RANDOM 10.948 1.845 15.513 4.679 4.892 3.342 2.620 35.580 1.333 0.469 
0.171 0.351 0.125 0.518 0.186 2.476 O.777 1.245 0.339 0.748 0.303 0.187 BRANCHES BDR-Y BDR-N BIR-Y BIR-N 
BCR-Y BCR-N BCS-Y BCS-N BAL 1,829,552 116,775 1,069,483 11,827 13,322,331 8,686,425 10,509,234 5,629,442 
2,598,181 543,530 645,942 10,333,824 2,985,429 5,230,612 2,308,926 4,278,418 8,5~2,854 1,371,054 6,857,241 
653,267 207,752 28 1,360,336 909,913 623,616 6,756 116,970 139,129 3,556,631 3,650 94,701 1,020,538 3,769 
373,394 93,481 163,137 385,898 301,139 150,525 645,240 1,259,622 6,720,467 132,702 58 2,260,160 64,330,709 
TOTAL BRANCHES:- 43,773,250 SHORTS LCFI LD AI CI LI AW CW LW MTW STW SW LCW LAW CS XW STS EOR on LS AND 
AH CH LH MTH STH SH LCH AWM EXU INT LCF CB LB MTB STCF STB TOTAL SHORTS:- TABLE 6.2 1.537 0.098 0.898 
0.010 11.192 7.297 8.829 4.729 2.183 36.773 0.457 0.543 8.681 2.508 4.394 1.940 3.594 7.219 1.152 5.761 
0.549 0.175 0.000 1.143 0.764 0.524 0.006 0.098 0.117 2.988 0.003 0.080 0.857 O.OO3 0.314 0.079 0.137 
0.324 0.253 0.126 0.542 1.058 5.646 0.111 0.000 1.899 54.042 0.204 1.845 35.580 1.039 0.171 0.351 0.125 
0.518 0.777 0.056 0.339 0.303 0.187 53.472 TOTAL SHORTS:- 119,037,322 74.563 53.472 TABLE 6.1 
			
