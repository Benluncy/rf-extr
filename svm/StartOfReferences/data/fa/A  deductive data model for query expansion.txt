
 A Deductive Data Model for Query Expansion x %fo sormunenand Heikki Keskustalo Kalervo .farvelin, Jaana 
Kristensen, Tlmo Nieml , Dept. of Information Stuches, Dept. of Computer Science University of Tampere 
 P.O. Box 607 FIN-33101 TAMPERE, Finland INTERNET: {likaJa, IiJakr, tn, lieeso, ccheke} @uta. fi FAX: 
+358-31-2156 560 TEL +358 -31-2156111 Abstract: We present a deductive data model for concept­based query 
expansion. It ]s based on three abstraction lev­els: the conceptual, linguistic and occurrence levels. 
Con­cepts and relationships among them are represented at the conceptual level. The expression level 
represents natural language expressions for concepts. Each expression has one or more matchmg models 
at the occurrence level. The models specify the matching of the expression in database Indices built 
in varying ways. The data model supports a concept-based query expansion and formulation tool, the ExpansionTool, 
for heterogeneous IR system envirom ments, Expansion is controlled by adjustable matching reli­ability. 
1. INTRODUCTION Thesaurus modeling and software have received much atten­tion in information retrieval 
(Ifl) literature, .loues &#38; al (1993; 1995) present a thesaurus data model, based on the relatlooal 
data model (RDM) and Inveshgate the feasibility of incorporating intelligent algori thins into software 
for thesaurus navigation. A thesaurus database can also be used for automatic query expansion (QE) whereby 
a query is re­formulated by ackhng new terms provided by the thesaurus. QE can be performed, on one hand, 
prior to the initla] search or the relevance feedback search and, on the other hand, on the basis of 
statistical or linguistic Information (Ekrnekcioglu &#38; al., 1992) The source of expansion may be document 
t]tles, a thesaurus, or a classlflcahon (Hancock­Beau]ieu, 1992). Thesaurus-based QE may be performed 
through a spreading activation method (Paice, 1991) or through ordinary thesaural relationships (e. g., 
association and hierarchical relationships. Kristensen, 1993). Ekmekcioglu (&#38; al., 1992) found that 
stahshcal or lln­ gulstlc QE did not provide slgmficant difference In retrieval effectiveness when compared 
to unexpanded queries (ranked output, over 26 000 title-and-abstract documents) Krls­tenseu (1993) reported 
a doubling in recall with a 11 70 de­ cline In precision (63 to 51 70) for thesaurai QE (Boolean re­trieval, 
227 000 newspaper articles). Jones &#38; al (1995) found that query expansion through a thesaurus in 
a ranked output system reordered the result but dld not ]mprove It (ranked output, large INSPEC database) 
Permission to make digitalhwd copy of all part of thk work for per­sonal or classroom use is granted 
without fee provided that copies are not made or distributed for profit or commercial advantage, the 
copy­right notice, the title of the publication and its date appear, and notice is given that copying 
is by permission of ACM, Inc. To copy otherwi­se, to retnrblish, to post on semers or to redistribute 
to lists. ~quires prior sp~cific permission and/or fee. SIGIR96. Zurich, Switzerhmd@31996 ACM 0-89791-792­ 
8/96/08.$3.50 In this paper we present a new approach by providing a deductive data model for thesauri 
because the ordinary RDM does not support transitive relationships typical in the­sauri. If some term 
B is an immediate narrower term (NT) of another term A and the term C an NT of B, then C is also, transitive 
y, an NT of A, i.e., A a IS broader term (BT) of C NTs and BTs of given terms are frequently needed in 
the­saurus navigation and QE, This requires the computation of the transitive closure (Ullmau, 1989) 
among the relation­ships and starting terms. In the RDM computation of the transitive closure is practically 
impossible but in deductive databases it is pos­sible. In the latter, transitive relationships form the 
most frequent recursion type for rule-based computation (Cbang &#38; Walker, 1986). Our work has this 
starting point, Agrawal s (1987) extended relational algebra and our deductive query language (Niemi 
&#38; .fdrvelin, 1992) are operation-oriented approaches to transitive queries. Our approach provides 
a set of specif]c operatlous instead of one trans[tlve closure. operation Especially its clirectlon-specitlc 
operations are valuable In thesaurus navigation Through them we can fi ml BTs or Nrs of given terms by 
specifying the direction. Our approach supports the computation of trausltive reiatiom ships in a collection 
of binary relations This is very useful because thereby QE can be restricted to particular types of concepts 
(e. g., persons or things) and particular types of re­lationships (e. g , generic or partitive relationship) 
In our thesaurus data model, deductive operattous are used to manage hierarchic re]atlonships, i.e , 
generic, parti­tive and instance relationships. They are not used to manage equivalence nor associative 
relationsbl ps The former are rather relationships between concept expressions than be­tween concepts 
and are managed in the RDN1. The latter arc nomdlrected, reciprocal concept relatirmshlps and thus cam 
not be managed by our deductive operations which presently assume acycllc binary relations. How ever, 
this is not a liml ­tatloo since the associative relationship performs badly If atllized transitively 
in query formulation. In our deductive data model the cowep[ual level repre­sents concepts and conceptual 
relationships, The [inguisfic level represents natural Iatlguage expressions for concepts Typically there 
arc many expressions of varying reliability for each concept Each expression may have one or more matching 
models of varying rel]abllity at the occurrence level. Each matchmg model represents, in a query-language 
Independent way, how the expression may be matched in texts or database Indices built in varying ways, 
e.g., with or without stemming and with or without compound words split into componeot words. We shall 
apply the deduchve data model for QE and pre­based on a searching thesaurus (or a semantic expansion 
approach) for natural language text retrieval in document collec­tions lacking intellectual indexing 
in heterogeneous retrieval environments where the database index types, retrieval systems and matching 
methods (Boolean or term-weighted, ranked retrieval) vary; thus it must preserve query structure for 
retrieval systems which may utilize it. sent a tool, called the ExpansionTool, for parametrized au­ 
tomatic QE. This tool is intended for QE prior to the ]mtial search for varying search topics and search 
exhaustlwty (e. g , high recall vs. high preclslon) Currently the ExpansionTool assumes that the user 
already knows the concepts relevant to her/his search. The Expan­sionTool then expands the concepts and 
constructs a query. Fig. 1. The abstraction levels of query formulation 2. THE THESAURUS DATA MODEL 
2.1. Three abstraction levels The three abstraction levels: conceptual, linguistic and oc­currence level 
are well-founded in the IR literature (Croft, 1986; Paice, 1991; UMLS, 1994). Thus we can differentiate 
between concepts and their structures (the generic, partitive and associative relations) at the conceptual 
level, concept expressions and their structures (the equivalence relation) at the linguistic level, and 
matching models (e.g., full-word strings, stems, string patterns containing wild cards) in­dicative of 
linguistic expressions at the occurrence level. Expressions represent concepts and each concept may have 
several expressions in several natural and artificial lan­guages. The expressions may be basic words, 
compound words, phrases or larger linguistic constructs, or common codes and abbreviations (e.g., USD49.90). 
Our approach is intended for QE where the occurrence level contains match­ing models for matching expressions 
in text, and where confidence figures between concepts and their possible ex­ pressions as well as between 
expressions and their matching models are utilized in query construction. Figure 1 illustrates the roles 
of the three levels in query formulation. Search concepts are first translated into search keys which 
are (thesaurus) terms, common codes and/or nat­ ural language expressions. Thereafter the search keys 
are translated into matching models, e.g., string patterns with wild cards or string constants. Language-dependent 
aspects are represented at the linguistic and occurrence levels. All retrieval system dependent aspects 
are encapsulated at the occurrence level in system-specific translators. 2.2. Thesaurus representation 
 Representation of concepts, expressions and matching models We represent concepts, their linguistic 
expressions and matching models in a relational database illustrated in Figs. 2-5. Concepts are represented 
in the relation CONCEPTS which has the attributes CNO (concept number), CNAME (concept name), CATEGORY 
(concept category), and DEFINITION (concept definition). Concept categories are chosen according to the 
application domain of the the­saurus. For example, in a thesaurus for newspaper articles, the concept 
categories might include persons, organiza­tions, things and events. CONCEPTS CNO I CNAME I CATEG. I 
DEF N cl forest industry org . . . C2 them forest industry org . . . C3 mechn forest industry org . . 
. C5 1P aper industry org I ... C7 plywood industry o rg . . . Clo paper company org . C12 Kymi-Kymmene 
org . . . Cloo investment proc_event . . . C300 protection proc_event . . . I Fig. 2. The relation CONCEPTS 
 Expressions are represented in the relation EXPRES-SIONS with two attributes ENO (expression number) 
and EXPRESSION (the expression). The relationships be­tween concepts and their expressions are given 
in the link relation CONS_ EXPRS which has the identifier attributes CNO and ENO, as well as the attributes 
ETYPE (expres­sion type) and STRENGTH. The attribute ETYPE defines the expression as a preferred term 
for the concept (term), a synonym (syno), or other type included in the ISO standard (1S0, 1986) for 
thesaurus construction. The STRENGTH attribute specifies the strength of the association between the 
concept and its expression as a real number between [0, 1]. The source of strength figures can be human 
judgment, statistics based on the meanings of expressions, or rele­vance feedback. Fidel and Efthimiadis 
(1995) point out the need for terminological research to analyze such attributes. CONS.EXPRS CNO ENO 
ETYPE STRENGTH cl el term 1.0 cl e2 syno 1.0 Cloo e100 term Cloo elOl verb 0.8 Fig. 3. The relation CONS_ 
EXPRS The matching models are represented in the relation may be modeled by prox(<bw(forest), bw(industry)>, 
3) OCCURRENCES. It has three attributes ONO (occurrence in this order and with distance of O -3 words, 
number), OTYPE (occurrence type), and OCCURRENCE. The relationships of expressions and occurrences are 
given The occurrence type indicates whether the OCCURRENCE in the link relation EXPR_OCCS which has the 
identifier attribute gives a matching model for a morphological basic attributes ENO and ONO, as well 
as the attribute RELIA­ word form (bw) or for a Nem of inflected forms (st). The idea BILITY, which gives 
the matching model s reliability for here is that the database index may contain either morpho-the intended 
expression as a real number between [0, 1]. logical basic forms recognized by, e.g. the TWOL software 
The occurrence level is necessary for several reasons. (Koskenniemi, 1983), or inflected words as they 
appear in First, document texts may have basic words, compound the text. The matching model representation 
is retrieval words and phrases which may or may not have been ana­system independent and-has the foliowing 
features: lyzed into their morphological basic forms for the database index. Recognition of compound 
word components would mar n_w LLLJ require a linguistic analysis program within Expansion-ENO ONO RELIAB. 
Tool. Second, each expression may have several matching models, each of varying reliability. Third, the 
reliability ofel 01 0.9 a matching model requires human judgment. Fourth, even if nl17t)Q v. .-, ., the 
solution of the judgmental problems could be mimicked el IIn701n Q I e70 ----.. to a sufficient degree 
by some statistical techniques, the e12 Kymi -Kymmene e100 0100 1.0  I=!=!=i knowledge represented 
as matching models at the occurrence e121 Kymi ltd elOl 10101 I 1.0 level would have to be constructed 
each time an expression e100 investment e500 I 0500 I 0.6 is needed for a query. Thus query language-specific 
queries elOl to invest e500 I 0501 I 0.9 I are not translated from the expressions directly but from 
the matching models as shown below. Fig. 4, The relations EXPRESSIONS and EXPR_OCCS The characteristics 
of matching models are necessary when the document texts may have basic words, compound words and phrases. 
Compound words are frequent in many rox(<bw(forest), bw(mdustr )>, 3) European languages, For example, 
the German word Ver­kehrswegeplanungsbeschleunigungsgesetzveranderungsent­ adj(<cw(<bw(ply), bw(wood)>), 
bw(industry)>, 4) ~ wurf makes clear that by splitting compound words for the index, hidden components 
may become retrievable, e.g. 0100 bw bw(investment) gesetz + veranderung. 0101 bw bw(invest) The matching 
models extend the ideas developed in the 0112 St phra(<bw(forest), st(industr)>) 13R system (Croft, 1986; 
Croft &#38; Das, 1990) by taking0501 St st(factor) possible index types into account and by providing 
system Fig. 5. The relation OCCURRENCES independent support to query generation. The matching models 
are not used to provide evidence of document content Representation of atomic words by bw(word), when 
word but, instead, to generate queries. is a morphological basic form (e.g., bw(investment)), and st(.rtem), 
when stem is a stem (e.g., st(factor)).  Representation of concept relationships Representation of compound 
words by their morpholog- Concept relationships are either association relationships ical basic forms 
or stems. The basic form matching or hierarchic relationships. They are always non-synony­ models represent 
compound word components because mous relationships because the latter are relationships be­ they may 
be represented in the database index. In many tween expressions. The 1S0 thesaurus construction standard 
languages, the component words may occur in inflected (1S0, 1986) gives examples of types of association 
and hi­ forms in the compound but are in the basic form if split. erarchic relationships usable in the 
data model. Thus the compound word basic forms are expressed by Cw(<cl, .... en>), when cl, .... crr 
are component words in the correct order. Components which may inflect in CNO ASS_CNO ASS_TYPE ASS_STRENGTH 
the compound are modeled by iw(basicform, irrflform), where basicform and inflform are the basic and 
inflected forms, respectively. Other components are modeled by ~ the basic word form construct. For 
example, plywood C500 Cloo 1P recess I 0.4 I is modeled by cw(<bw(ply), bw(wood)>). Fig. 6. The relatlon 
ASSOCIATIONS Phrase matching with a defined word order through mor­phological basic forms or stems by 
the model The relation ASSOCIATIONS (Fig. 6) represents the phra(Comps), where Comps gives the component 
association relationships between concepts through the at­words. The components may be stems, basic words 
or tributes CNO and AS S_CNO, containing pairs of associ­compound words. For example, forest industry 
can be ated concepts, as well as the attributes AS S_TYPE (associ­represented by phra(<bw(forest), st(industr)>). 
ation type) and ASS_ STRENGTH (association strength). Matching of words in defined and undefined order, 
with The association type value specifies how the concepts are intervening words allowed, through morphological 
ba-associated, e.g., sibling concepts (industry -company) and sic forms or stems. The models are prox( 
Comps, Dis -process relationship (investment -factory) (1S0, 1986). tance) and adj (Comps, Distance), 
where Comps gives Representation of hierarchic relationships is based on the components and Distance 
gives the allowed distance binary relations partitioned according to concept categories between components. 
For example, forest industry (e.g., organizations and processes) and hierarchy types (e.g., generic and 
partitive relationships). The categories and relationship types can be chosen according to the the­saurus 
domain. For example, our sample thesaurus database contains the binary relations of Fig. 7 where organizations 
have a binary relation for the generic relationship and an­other for the instance relationship, processes 
and events have a binary relation for the generic relationship, etc. ORG.GENERIC BROADER_CONS NARROWER.CONS 
cl (forest industry) C2 (them forest ind) cl (forest industry) C3 (mechnforestind) C2 (chemforestind) 
C5 (paper industry) C3 (mechnforestind) C7 (plywood indust) C9 (wood proccomp) c1O (paper company) PROC_EVENT_GENERIC 
BROADER_CONS NARROWER.CONS c1OO (investment) c101 (environ invest) c100 (investment) c102 (factory invest) 
c101 (environ invest) c103 (water clean inv) c101 (environ invest) c104 (air protect inv) c101 (environ 
invest) c105 (forest protect i) Fig. 7. The relations ORG_GENERIC and PROC_EVENT_GENERIC The advantages 
of partitioning the hierarchical relation­ships are: (i) efficiency, because the computation of transi­tive 
relationships is faster in smaller binary relations, and (ii) precision, because concepts can be analyzed 
and ex­panded in controlled relationships. 3. CONCEPT-BASED QUERY EXPANSION 3.1. Expansion principles 
and parameters The ExpansionTool expands conceptually represented queries at the three abstraction levels. 
When the necessary matching models at the occurrence level have been re­trieved, they are translated 
into the specified target query language. The ExpansionTool is an application software implemented in 
Prolog. It utilizes, internally, queries of the integrated deductive query language by Niemi &#38; Jarvelin 
(1992), Jarvelin (&#38; al,, 1996) contains definitions of the functions for performing various expansions. 
We shall use a request on environment protection in­vestments of paper and mechanical forest industry 
as our expansion example. Assume further, that the user has identi­fied the concepts C5 and C3 suitable 
in describing the indus­tries and c 101 suitable in describing the investments. Concept expansion The 
starting point of concept expansion is a set of concept sets interpreted as conjunctive facets representing 
the in­formation need. Within each set, the concepts are alterna­tive (or disjunctive) interpretations 
of the facet. Thus the starting point is a set of concept facets C = {Fl, F2, ... , Fk). In our sample 
case it is Cl = {{c3, c5), {c101}} where {c3, C5} and {c101 } are the facets of concept identifiers. 
In principle, there is an AND between the facets and an OR between the concepts within each facet, e.g., 
between C3 and c5. This conjunctive normal form (CNF) structure is maintained throughout query construction 
and rejected only in the translation phase if the retrieval setting requires it. The expansion principle 
is that each concept is ex­panded to a disjunctive set of concepts on the basis of con­ceptual relationships 
pointed out by the user. If expansion to broader concepts is requested, only the immediate broader concepts 
are added, because otherwise the meaning of the query would probably expand too far. If expansion to 
nar­rower concepts is requested, the concepts are expanded to all immediate or indirect narrower concepts. 
If associative ex­pansion is requested, expansion is by one link in the asso­ciation relationship. In 
the hierarchical relationship the user has a choice of hierarchical relationship type. One or more may 
be chosen. If expansion to instance concepts is requested, the instance concepts of all expanded concepts 
are included. Each relationship type is applied once for ex­pansion. In other words, concepts like associated 
concepts of narrower concepts (or vice versa) are not computed. The expansion parameters are (1) set 
of expansion type indicators for concept expansion and (2) the required relia­bility. The former is a 
set of relationship names, bcg indi­cating generic broader concept relationship, bcp partitive broader 
concept relationship, ncg generic narrower concept relationship, inst the instance relationship, asso 
the asso­ciative relationship, etc. Both parameters are given to each facet separately. The expansion 
result is a set of expanded concept facets {F1 , F2 , ... . Fk } where each facet Fi contains the original 
and the expanded concept identifiers. Thus each facet is ex­panded separately. In the sample case the 
industry facet is expanded by beg, ncg and inst in the ORG_GEN and ORG_INST relationships, and the investment 
facet by beg, ncg and inst in the PROC_EVENT_GEN relationship. The reliability figures are 0.8 and 0.6, 
respectively. The result­ing expanded concept identifier facets are Cl = { { c5, c2, c3, cl, c7, c8], 
{c101, c1OO, cI03, c400}] where C5 = paper in­dustry, C3 = mechanical forest industry, cl = forest industry, 
C7 = plywood industry, c 101 = environment investment, c1OO = investment, c103 = waste water treatment 
invest­ment, c400 = environment, etc. Expression expansion Expression expansion starts with the concept 
expansion re­sult {FI , ... , Fk }. The expansion principle is that, for each concept identifier, identifiers 
of selected expressions are collected (ORed) as representatives. The expansion parame­ter is a reliability 
figure guiding the selection of expression identifiers. All identifiers with strength exceeding the figure 
are collected for each concept. The result is an expanded set of expression facets {El , ... , Ek ), 
where each facet Ei is derived on the basis of the corresponding concept facet Fi. The expression expansion 
for C 1 (above) returns the set El = {{e50, e4, e5, e30, el, e2, e70, e80}, {elOIO, e100, elOl, e103, 
e4001 } ]. Here, for example, e50 = paper indus­try (for concept c5), e30 = mechanical forest industry 
(for c3), elOIO = environmental investment (c1OI), e103 = waste water treatment investment (cI03) and 
e4001 = bio­sphere (c400). Occurrence expansion The starting point of occurrence expansion is a set of 
ex­pression identifier facets E = {El, ... . Ek ] constructed above. The occurrence expansion principle 
is to collect, for each expression identifier, all its matching models which are reliable enough and 
suitable for a database index of a given type specified as expansion parameters. The occur­rence expansion 
result is a set of matching model facets O = {O 1, .... Ok) where each facet Oi is derived from the corre­sponding 
expression identifier facet Ei by replacing each expression by a set of matching models. The sample ex­pression 
expansion result El yields the set of matching model facets 01 = {{ prox(<bw(paper), bw(industry)>, 2), 
prox(<bw(chemical), bw(forest), bw(industry)>, 3), prox(<bw(chemical), bw(wood), bw(processing), bw(industry)>, 
3), prox(<bw(mechanical), bw(forest), bw(industry)>, 3), prox(<bw(forest), bw(industry)>, 3), prox(<bw(wood), 
bw(processing), bw(industry)>, 3), prox(<cw(<bw(ply), bw(wood)>), bw(industry)>, 3), prox(<cw(<bw(saw), 
bw(mill)>), bw(industry)>, 3)), { prox(<bw(environmental), bw(investment)>, 2), bw(investment), bw(invest), 
prox(<bw(waste), bw(water), bw(treatment), bw(investment)>, 2), bw(biosphere) ] } when the database index 
type is set for basic word forms and the reliability threshold is 0.8 for the industry facet and 0.6 
for the investment facet. Matching model translation This step translates the query language independent 
expres­sion into a query of a given language. The starting point of matching model translation is the 
expansion result con­structed above. Matching model translation is implemented in the basis of logic 
grammars (Abramson &#38; Dahl, 1989). Each grammar is a set of logical rules which generate well formed 
expressions of a specified query language. Each query language has its own logic grammar which takes 
its expression types and syntax limitations into account. Usually logic grammars must be translated into 
logic programs separately, e.g., the rules of the well-known logic grammar DCG (Definite Clause Grammars, 
Pereira &#38; Warren, 1980) are translated into normal Prolog clauses by adding extra arguments to each 
non-terminal. Because Prolog as such supports parsing of functional expressions we con­structed our logic 
grammar directly as an executable Prolog program. The heads of the rules of our logic grammars con­sist 
always of two components: the standard source lan­guage component and the target language component. 
By using these components we parse and generate functional expressions at the same time using the one-pass 
approach. The parameters of matching model translation are (1) the facet operator, (2) the database index 
type indicator and (3) the target query language identifier. The first one is used to express whether 
the facets are combined by a disjunction (the operator OR), conjunction (AND), or a paragraph (PARA) 
or a sentence (SENT) proximity condition, or by a probabilistic sum (the operator SUM). The database 
index type indicators bw, cw and iw indicate index types basic words with compound words split , basic 
words with com­pound words not split and inflected words , respectively. Allowed query language identifiers 
currently are one of in­query (for INQUERY V1.6 by University of Massachusetts), iso (for the 1S0 standard 
query language; 1S0, 1993), topic (for TOPIC by Verity Inc.), or trip (for TRIP by PSI Inc.). If the 
target language of matching model translation does not support some specific feature of matching models 
or logical structure, then either the obvious closest or alter­native construct of the target language 
is generated or query construction terminates with an error message. For exam­ple, the INQUERY retrieval 
system (v1 .6) does not have grammatical proximity operators (e. g., sentence ) but supports proximity 
conditions based on numeric word dis­tance. Therefore the sentence proximity condition is trans­lated 
a numeric proximity expression #10 allowing 10 in­tervening words. INQUERY neither supports disjunctions 
within proximity operations, i.e., #l O(#or(a, b), #or(d, e)). Therefore such structures are automatically 
converted into DNF, i.e. #or(#lO(a, d), #lO(a, e), #lO(b, d), #lO(b, e)) which is supported. The TOPIC 
query language provides the proximity operators phrase , sentence and paragraph . Proximity models cannot 
be modeled by the phrase opera­tor and thus need the next weaker operator sentence . If the facet operator 
is also sentence , then the grammar avoids constructing a nested sentence operation sequence. All such 
transformations are handled by the logic grammars. The result of matching model translation is a query 
of the target query language for an index of the specified type. The query may be very long, if it contains 
many broad con­cepts expanded by loose criteria, and if a proximity condi­tion is applied between the 
facets. We shall outline the matching model translation algo­rithm briefly. In the algorithm mm-trans( 
mm, it, G) de­notes the translation of the matching model mm for an in­dex of type it by the logic grammar 
G. Let G be the logic grammar for INQUERY. An example of a recursive transla­tion rule is: mm-trarr.r(prox(<Cl, 
... , Cn>, Dist), it, G ) -+ #Dist(mm-trarrs(Cl, it, G ),... , mm-trarrs(Cn, it, G )) which translates 
a proximity model recursively into IN-QUERY expressions. The matching model translation algo­rithm is 
outlined as follows: Algorithm TRANSLATE Input: TQL, the target query language identifier FOp, the facet 
operator it, the target index type MF, the matching model facet set Output: Q, a query in the query language 
identified by TQL Procedure: Step 1. Identify the required logic grammar G through the target language 
identifier TQL. Step 2. Select an appropriate strategy on the basis of FOp: Case I. FOp = AND. Translate 
MF in CNF by G. Apply mm-trans(mm, it, G) to each matching model mm. Case II. FOp = PARA or FOp = SENT. 
If TQL does not support CNF in proximity operations, turn MF into MFD (representing A4F in DNF) and translate 
MFD by G by applying mm -trans(mm, it, G) to each matching model mm. Otherwise translate MF in CNF by 
G by applying mm-trans(mm, it, G) in the same way. Case III. FOp = OR. Translate MF as a two-level dis­ 
junctive structure by G. Apply trans(mm, it, G) to each matching model mm. Case IV. FOp = SUM. Translate 
MF as a three-level probabilistic sum structure by G as explained below. Apply trans(mm, it, G) to each 
matching model mm. In case IV, the most reliable model, say M 1, for the original unexpanded concept 
in each facet is separated from the rest, say {M2, .... Mn ) and they are translated and combined as 
a two-level subquery (S 1 OR SUM(S2, .... Sri)), where Si = trans(Mi, it, G) when i = 1,..., n. The subqueries 
are com­bined linearly by the SUM-operator, i.e., as SUM((S 11 OR SUM(S12, .... Sin)), (S21 OR SUM(S22, 
.... S2n)), ...). We shall consider sample queries generated for the IN-QUERY and TRIP retrieval systems. 
INQUERY allows ordi­nary Boolean as well as probabilistic retrieval by Boolean operators #and , #or , 
and #not , and proximity searching by the operator #n , where n is an integer. The proximity operator 
#n spans over sentence and paragraph boundaries. The probabilistic sum operators #wsum and #sum are also 
available. The retrieval system TRIP allows ordinary Boolean searching ( and , or , not ) and proximity 
search­ing by operators and. p , and. s and . . for paragraphs, sentences and phrases, and string matching 
by several types of wild cards. For phrases, the number of periods indicates the number of allowed intervening 
words. TRIP interprets full stops as sentence delimiters. The matching model facet set 01 translates 
into the fol­lowing TRIP query when the facet operator is SENT and the database index type is iw for 
inflected word forms: (paper . . industr# or forest# . . . industr+ or wood# . . . process# . . . industr# 
or plywood . . . industr# or sawmill# . . . industr#) and.s (invest# or biospher#) The two facets are 
combined by the operator and.s and character strings generated from the matching models by or. The proximity 
matching models have generated charac­ter strings containing the TRIP proximity operator . . for specified 
word order and allowed distance given in the matching models. The stem matching models have gener­ated 
character strings containing wild cards. Expressions like chemical#. . . wood . . . process# . . . industrtF 
are not generated because wood . . . process# . industr# matches it. The logic grammar deletes all logically 
redun­dant matching models. The translation of the same request into the INQUERY query language with 
paragraph proximity and a bw type of index yields the result (operators in bold face): #or(#20(#2(paper, 
industry), investment), #20(#2(paper, industry), invest), #20(#2(paper, industry), biosphere), #20(#3 
(forest, industry), investment), #20(#3(forest, industry), invest), #20(#3(forest, industry), biosphere), 
...) The three dots represent three more blocks with #3(wood, processing, industry), #3(#O(ply, wood), 
industry), and #3(#O(saw, mill), industry) instead of #2(paper, industry) and #3( forest, industry). 
The query is considerably longer than the previous one. This is due to the DNF form needed in INQUERY 
proximity operations. The facet operator par-a was translated by #20. The other proximity expressions 
#2 and #3 have the distance given m the matching models. Because the target index splits compound words, 
the com­pound words plywood and sawmill would be matched by #O(ply, wood) and #O(saw, mill), if they 
were not deleted as redundant. The operator #O indicates that the component words must have the same 
address in the index. The translation of the same request into the INQUERY query language with the probabilistic 
sum operator and a bw type of index yields the result: #sum(#or(#2 (paper, industry), #sum(#3(forest, 
industry), #3(wood, processing, industry) , #3(#O(ply, wood), industry), #3(#O(saw, mill), industry))), 
 #or(investment, #sum(invest, biosphere))) . 3.2. The Expansion Tool The ExpansionTool performs automatic 
QE in the way out­lined above. The adjustable parameters of the current im­plementation are: A concept 
facet specification. Each facet contains one or more disjunctive concepts, required expansion types (beg, 
ncg, asso, ...) and a reliability figure [0.0 ... 1.0]. The facet operator (or, and, para, sent, sum). 
The database index type indicator (bw, CW, iw). The target IR system indicator (inquery, iso, topic, 
trip) The current implementation uses only one reliability figure for concept expansion, expression identification, 
and matching model collection. The ExpansionTool is implemented in Prolog. Thus the tool generates auto­matically 
several query versions in sequence, if one or more of the last three parameters are given as variables. 
3.3. Test of Expansion Effects The test seeks to show that the ExpansionTool can be used for automatic 
QE with desirable effects on query results with respect to recall and precision. The test environment 
The test text database contained about 54.000 newspaper ar­ticles published in three Finnish newspapers 
in 1988-1992. The whole database (125 MB) contained some 12.5 million words. The environment also provides 
35 search requests and for each the original verbal requests, their conceptual analyses, and collections 
of possible expressions for each concept. The relevance of altogether some 8000 documents is known for 
the 35 search requests. This relevance base was retrieved for assessment by a combination of a high-recall 
Boolean query and several probabilistic queries for each search request. The database index for INQUERY 
contained all keys in their basic forms with compound words split. Morphologi­cal analysis was performed 
by the TWOL software (Kosken­niemi, 1983). The database index for TRIP contained all word occurrences 
in their inflected forms. The test thesaurus was in Finnish for a Finnish database and contained: 381 
concepts 619 expressions for the concepts 1346 matching models for the expressions. The test thesaurus 
contained concepts, expressions and matching models (as described above) for the topics present in ten 
test queries on: (1) the Bush -Gorbatchov Summit in Helsinki in 1991, (2) the South-American debt crisis, 
(3) dumping charges against Finnish forest industry in the US. (4) annihilation of Iraqi mass destruction 
weapons, (5) re­volts in Bucharest against opposition by miners whom President Iliescu called to help 
the government, (6) the UN peace protection operation for Namibia s independence, (7) The 2 + 4 negotiations 
between East and West Germany and the four allied concerning the union of Germany, (8) the processing 
and storage of waste from nuclear power plants, (9) the effects of import restriction removal on Finnish 
food processing industry, (10) packages as an environment pro­tection issue.  Thesaurus growth would 
affect slightly the test results. Conceptual growth in the thesaurus does not add expres­sions or matching 
models to concepts already in the the­saurus but may bring new associations. No matter how the thesaurus 
grows, a concept is expressed and matched exactly in the same way unless its conceptual relationships, 
expres­sions or matching models are modified explicitly. Thesaurus growth has significant effects only 
if the thesaurus is used so that search requests are mapped (through their words) automatically to concepts 
which then are expanded. Expansions Queries were constructed by the ExpansionTool and tested based on 
the following expansion types (figures in paren­theses indicate reliability threshold values employed 
to filter the relations): 0s the original query (words from the original search request) provides the 
baseline comparison data bt, bl basic synonym query, tight (bt, 0.89) and loose (bl, 0.49) interpretation 
nt, nl narrower concept expanded query, tight (nt, 0.89) and loose (nl, 0.49) interpretation at, al associative 
concept expanded query, tight (at, 0.89) and loose (al, 0.49). In the basic synonym queries the concepts 
of the origi­nal search requests were identified in the thesaurus and matching models for their synonymous 
expressions exceed­ing the indicated strength and reliability were used in query construction. No conceptual 
expansion was performed. In the narrower concept expanded queries, narrower concepts were first added 
and then the matching models for their syn­onymous expressions were used as above in query constrrrc­tion. 
In the associative concept expanded queries, both nar­rower and associative concepts were added and then 
corre­sponding matching models were collected as above. Each request was formulated into conjunctive 
queries (operator AND), proximity queries (operator and.p in TRIP and #20 in INQUERY) and probabilistic 
sum queries (#sum in INQUERY) according to the expansion types. The aver­age number of concepts in the 
requests was 4.2, which gave 3.8 conjunctive facets for conjunctive queries. In the case of proximity 
queries the average number of conjunctive facets was reduced to 2.6. The average number of keywords and 
phrases in different query types for the conjunctive and probabilistic sum queries in the INQUERY-environment 
were as follows: OS: 4.2; bt: 7.6; bl: 12.2; nt: 15.9; nl: 21.6; at: 19.6; al: 40.2. In the TRIP-environment 
the fig­ures were about the same. In proximity queries, correspond­ing figures are smrdler due to a smaller 
number of concepts. Statistical significance of the findings concerning the original and expanded queries 
were first tested by the Fried­man two-way analysis of variance by ranks in each case of conjunctive, 
proximity and sum queries. In all cases the test indicated statistically significant (p < 0.001) differences 
for recall and precision among the expansion results. Next the pairwise statistical significance between 
the original query and each expansion was tested (Siegel &#38; Castellan, 1989). The precision tests 
were two-tailed, and recall tests two­tailed except for the conjunctive and proximity queries where recall 
was bound to improve. We first report expansion results for Boolean queries, see Figs. 8-9. The two retrieval 
systems behave differently due to differences in the index type (basic vs. inflected words) and operators 
(#20 vs. and.p). However, some trends are clear. Tight query interpretation yields higher precision and 
lower recall than the loose interpretation. Also expan­sions from basic synonym query to narrower concept 
query and associative concept query increase recall at the cost of precision in a rather systematic way. 
Performance improves in TRIP in tight expansion w.r.t. the original query. This is due to index type 
and the thesaurus yielding many precise compound words which are split in the index for INQUERY. Table 
1 gives statistical significance of the findings. For TRIP, the precision findings were not significant 
and are thus not given. 80I o .-!@- %A .2 u g 1 40. 20. 01 0 20 40 60 80 100 Recall INQUERY 11 4A o~ 
0 20 40 60 80 100 Recall TRIP Oos Obt Obl Ant Anl Uatlal Fig. 8. Scattergram of exhaustive conjunctive 
queries with INQUERY and TRIP (N=1O). The expansion test results for the probabilistic sum queries for 
the 10 requests are given in Fig. 10. Each curve represents the average performance of one expansion 
type. The plotted points are recall -precision averages at the given retrieved set sizes from one to 
100 documents for the expansion type in question (see Hull, 1993). It can be seen that all expansion 
types perform (on the average) better than the original query whereas the differences between the expansion 
types are minor. The curves end around 60% re­call because of a large recall base. All pairwise differences 
in recall and in precision between the original query and each expanded query are statistically significant 
(p <0.001). 4. DISCUSSION AND CONCLUSIONS We have presented a deductive data model for QE because the 
ordinary RDM cannot represent and manage essential the­saurus relationships in a natural way. We also 
described a QE software tool, called the ExpansionTool, for parametrized o~ 0 20 40 60 80 100 Recall 
INQUERY 0 20 40 60 80 100 Recall TRIP Oos Obt Obl Ant Anlllat Wal Fig. 9. Scattergram of proximity queries 
with INQUERY and TRIP (N=1O). Table 1. Statistical significance of the findings os-nt* 1-11os-nt* I os-nl 
*** os-nl *** os-at** os-at** os -al *** es-al** 0s -al *** 1 Proximity queries IN QUERY TRIP Recall 
Precision Recall os-nl ** 0s-nl ** os-atx 11es-at* 1­os -al ** os-rd** os -al *** * p <0.05, **p <0.01, 
***p <0.001 L 1 1oo­ 5 8 10 20 30 ,~ 60 .% 40 u 50 8 4 70 100 ~k : 20 o~ 100 Recall o0s 6bt Ant 
[ at ,1 80. .360. .9 u E 40­ 100 20­ 0 20 40 60 80 100 Recall o0s Qbl Anl al Fig. 10. Line chart 
of probabilistic sum queries with INQUERY (N=1O). automatic QE intended (i) for use prior to the initial 
search, (ii) for natural language retrieval of document lacking intel­lectual indexing, (iii) in heterogeneous 
retrieval environ­ments where the database index types, retrieval systems and matching methods vary. 
The tool utilizes a searching the­saurus represented in the data model. The expansion examples show that 
the ExpansionTool makes it easy to generate a range of quite differently behav­ing queries to a number 
of search environments which are heterogeneous with respect to the overall retrieval strategy, query 
language properties and database index construction strategies. The findings of the retrieval tests suggest 
that, through the ExpansionTool approach, (1) it is possible to increase recall in the Boolean environment 
systematically at a negligible cost in precision by applying the expansion parameters, and (2) retrieval 
performance improves in a ranked retrieval system (cf. the negative findings by Jones &#38; al., 1995). 
We considered query formulation based on user s identi­fication of the concepts relevant to her/his needs. 
In order to support the identification of relevant concepts, the rela­tions can be augmented by a relation 
WORDS (W ORD, ENO, COMPTYPE) giving for each word all expressions where it is a component of type COMPTYPE, 
e.g., a compound word component (cf. Jones, 1993). Then in­formation needs can be matched with the thesaurus 
through WORDS using techniques suggested by Jones (1993). We also tested the weighted sum operator, with 
the same query structure as for the sum operator but varying weights giving less weight to all keys except 
for the key corre­sponding to the most reliable matching model of each con­cept. However, the results 
were never better than those ob­tained with the presented unweighed query structure. Still, we are working 
toward supporting the probabilistic weighted sum operator, with automatic weight computation based on 
thesaurus relationships. The deductive operations will also be extended for cyclic transitive relationships. 
Thesaurus construction would benefit from tools for ac­quiring domain knowledge. The knowledge represented 
in the model may be customized to each particular user to sup­port his/her cognitive structures. Thus 
domain knowledge should be collected from the users interactively (Paice, 199 1; Das &#38; Croft, 1990). 
The matching models should be generated automatically from expressions. This requires in­tegration of 
NLP-tools. The useability of ordinary (indexing) thesauri in the construction of a thesaurus for au­tomatic 
QE presents a problem due to defective hierarchies. If related concepts or partitive narrower concepts 
are put into a hierarchy of generic narrower concepts, expansion will not work properly. This is, however, 
common in ordi­nary (indexing) thesauri, originally intended for human use. The data model and the integrated 
query language are also usable as a tool for managing an indexing thesaurus (Jarve­lin &#38; al., 1996). 
The main application area of the Ex­pansionTool, however, is filter agents for networked infor­mation 
retrieval. Obviously, the ExpansionTool approach can be utilized in improving the parametrizability and 
matching expressions of information filter agents of net­worked heterogeneous database environments. 
Acknowledgment: The INQUERY retrieval system was used in part of this research. The INQUERY software 
was provided by the Information Retrieval Laboratory, Univer­sity of Massachusetts Computer Science Department, 
Amherst, MA, USA. REFERENCES <RefA><SinRef><author>Abramson, H.</author> &#38; <author>Dahl</author>, V. (<date>1989</date>). <title>Logic Grammars</title>. <location>Heidel­ berg</location>: <publisher>Springer-Verlag</publisher></SinRef>. 
<SinRef><author>Agrawal</author>, <author>R.</author> (<date>1987</date>). <title>Alpha: An extension of relational al­ gebra to express a class of recursive queries</title>. 
In: <booktitle>Pro­ ceedings of the 3rd International Conference on Data Engineering</booktitle>. <location>Washington, D. C.</location>: <publisher>IEEE Computer 
Soci­ ety Press</publisher>; <date>1987</date>, pp. <pages>580-590</pages></SinRef>. <SinRef><author>Chang, C.L</author>. &#38; <author>Walker, A</author>. (<date>1986</date>). <title>A Prolog programming interface 
with SQL/DS</title>. In <editor>Kerschberg L</editor>. (cd.), <booktitle>Expert Database Systems: Proceedings from the 1st interna­ tional 
Workshop</booktitle>. <location>Menlo Park, CA</location>: <publisher>Benjamin-Cum­ mings</publisher>, pp. <pages>233-246</pages></SinRef>. <SinRef><author>Croft, W.B</author>. (<date>1986</date>). <title>User-Specified Domain 
Knowledge for Document Retrieval</title>. In: <editor>Rabitti, F.</editor> (cd.) <booktitle>Proc. of the 13th International Conference on 
Research and Devel­ opment in Information Retrieval Piss</booktitle>, <location>Italy</location></SinRef>. <SinRef><author>Croft, W. B</author>. &#38; <author>Das, Raj </author>(<date>1990</date>). 
<title>Experiments with query ac­ quisition and use in document retrieval systems</title>. <editor>Vidick, J-L. </editor>(cd.) <booktitle>Proc. 
of the 13th International Con­ference on Research and Development in Information Retrieval</booktitle>. <location>Bruxelles</location>: 
<publisher>ACM</publisher>, pp. <pages>349-368</pages></SinRef>. <SinRef><author>Ekmekcioglu, F. C.</author>, <author>Robertson, A.M. </author>&#38;<author>Willett, P.</author> (<date>1992</date>). <title>Effectiveness of query 
expansion in ranked-output re­trieval systems</title>. <journal>Journal of Information Science</journal>, <volume>18</volume>, <pages>139-147</pages></SinRef>. <SinRef><author>Fidel, R.</author> 
&#38; <author>Efthimiadis, E.N.</author> (<date>1995</date>). <title>Terminological knowledge structure for intermediary expert systems</title>. <booktitle>Information 
Processing and Management</booktitle>, <volume>31(1)</volume>, <pages>15-27</pages></SinRef>. <SinRef><author>Hancock-Beaulieu, M.</author> (<date>1992</date>). <title>Query expansion: Advances in research 
in online catalogs</title>. <journal>Journal of Information Science</journal>, <volume>18</volume>, <pages>99-103</pages></SinRef>. <SinRef><author>Hull, D.</author> (<date>1993</date>). <title>Using statistical testing 
in the evaluation of retrieval experiments</title>. <editor>Korfhage, R.</editor>, <editor>Rasmussen, E.M.</editor> &#38; <editor>Willett, P.</editor> (cd.) <booktitle>Proc. 
of the 16th International Conference on Research and Development in Informa­tion Retrieval</booktitle>. <location>New York, 
NY</location>: <publisher>ACM</publisher>, pp. <pages>349-338</pages></SinRef>. <SinRef><author>1S0</author> (<date>1986</date>). <title>ISO International Standard 2788. Documenta­tion -Guidelines for the 
establishment and develop­ment of monolingual thesauri</title>. <institution>International Organiza­tion for Standardization</institution></SinRef>. 
<SinRef><author>1S0</author> (<date>1993</date>). <title>ISO International Standard 8777:<date>1993</date></title>(E). <booktitle>In­ formation and documentation commands for interac­tive 
text searching</booktitle>. <institution>International Organization for Standardization</institution></SinRef>. <SinRef><author>Jones, S. </author>(<date>1993</date>). <title>A thesaurus data model 
for an intelligent retrieval system</title>. <journal>Journal of Information Science</journal>, <volume>19</volume>, <pages>167-178</pages></SinRef>. <SinRef><author>Jones, S.</author> &#38; al. 
(<date>1995</date>).<title> Interactive thesaurus navigation: in­telligence rules OK? </title><journal>Journal of the American Society of 
Information Science</journal>, <volume>46(1 )</volume>, <pages>389-404</pages></SinRef>. <SinRef><author>Jarvelin, K.</author> &#38; <author>Kristensen, J.</author> &#38;<author> Niemi, T.</author> &#38; <author>Sormunen, 
E.</author> &#38; <author>Keskustalo, H.</author> (<date>1996</date>). <title>A deductive data model for thesaurus navigation and query expansion</title>. 
<location>Tampere, Finland</location>: <institution>University of Tampere, Dept. of Information Studies</institution>, <journal>Report RN-1996-1</journal></SinRef>, to be published. 
<SinRef><author>Koskenniemi, K.</author> (<date>1983</date>). <title>Two-level morphology: a general computational model for word-form recognition 
and production</title>. <location>Helsinki</location>: <institution>University of Helsinki, Dept. of General Linguistics</institution>, Publication No. <volume>11</volume></SinRef>. <SinRef><author>Kristensen, 
J.</author> (<date>1993</date>). <title>Expanding end-user s query state­ments for free text searching with a search-aid the­saurus</title>, 
<booktitle>Information Processing &#38; Management</booktitle>, <volume>29(6)</volume>, <pages>733-745</pages></SinRef>. <SinRef><author>Niemi, T.</author> &#38; <author>Jarvelin, K.</author> (<date>1992</date>). <title>Operation-oriented 
query language approach for recursive queries -Part 1. Func­tional definition</title>. <booktitle>Information Systems</booktitle>, <volume>17 
(1)</volume>, <pages>49-75</pages></SinRef>. <SinRef><author>Paice, C.D.</author> (<date>1991</date>).<title> A thesaural model of information re­trieval</title>. <booktitle>Information Processing &#38; 
Management</booktitle>, <volume>27(5)</volume>, <pages>433-447</pages></SinRef>. <SinRef><author>Pereira, F.C.N.</author> &#38; <author>Warren</author>, <author>D.H.D.</author> (<date>1980</date>). <title>Definite Clause Grammars for 
language analysis A survey of the formalism and a comparison with Augmented Transi­tion Networks</title>. <booktitle>Art~icial 
Intelligence</booktitle>, <volume>13</volume>: <pages>231-278</pages></SinRef>. <SinRef><author>Siegel, S.</author>, &#38; <author>Castellan, J.</author> (<date>1989</date>). <title>Nonparametric statistics for the behavioral 
sciences</title>. <location>New York</location>: <publisher>McGraw-Hall</publisher></SinRef>. <SinRef><author>Unman, J.D.</author> (<date>1989</date>). <title>Principles of Database and Knowledge Base Systems. 
Vol. <volume>II</volume>: The new technologies</title>. <location>Rockville, MD</location>: <publisher>Computer Science Press</publisher></SinRef>. <SinRef><author>UMLS</author> (<date>1994</date>). <title>UMLS Knowledge Sources. 
5th Experimental Edition</title>. <location>Bethesda MD</location>: <institution>National Library of Medicine</institution></SinRef>.</RefA>  
			
