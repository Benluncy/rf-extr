
 A~ OPERATING qYgTRM~ COIIRq~ !lqI~ STA~D ALNMV COMDfJTRqq Samuel T. Wi]ev [~a]]e CoIleqe Curriculum 
'78 [3] describes a course in ~neratinq Systems and Computer Architecture. In the course outline it is 
stated, "The laboratory for this course would ideally use a small computer where the students could actually 
implement sections of operatinq systems and have them fail without serious consequence to other users". 
Also in the recommendations 9r the Software Enqineerinq Subject Area [8], there is a description for 
two courses in Operatin~ qystems and Architecture. These include sua~ested projects that could be implemente~ 
on a microcomputer system. In the Spring of ]991 an Operatinq qytems Course offered at La Salle College 
used small, stand alone computers. This paper describes the content and motivation for this course. From 
Fall, 197~ until Fall,lq80 all Computer gcience classes at La qal]e Colle~e, that required proqramming, 
used a DECSYETEM-20 time sharin~ system. Durinq the Summer, 198@, when ~t was determined that the n~mher 
of students who would be using that system would be more than it could handle, a decision was made to 
acquire small, stand alone systems for use in the Introduction to Computer Science courses. About ?~ 
Intertec ~uperbrain computer systems were acauired. Software which came with these systems included BASIC, 
which was the lanquage beinq used in the introductory courses, an RSR~ Assembly language and CP/M version 
2.9. The systems had twin ZRnA processors, two double density floppy disk drives and two RS-232C asynchronous 
ports. Two of these systems were mounted on movable carts so they could be taken to classrooms for demonstrations. 
Permission to copy without fee all or part of this material is granted provided that the copies are not 
made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. @ 1982 ACMO-89791-067-2/82/O02/O088 
$00.75 In the spirit of the recommendation OF Curriculum '7~ [3] quoted earlier, it was ~ecided to use 
these small computer systems in connection with an NDeratinq ~ystems course to be offered in the qprina, 
lqg]. There were approximately 4q students in 2 sections of this course. These stuMentS were primarily 
junior and senior Commuter Science majors. The 9a~ Assembly Lanqua~e, which came with these systems, 
was used for proq r amminq assiqnments in this course, wadland rill dives qood reasons to use an assembly 
 ]an~uaqe in an operatinq systems course. Me makes three points: 1) most real operatinq systems are still 
written in assembly ]anquaqe 2) a ~ood structured lanquaqe hides the details of important data structures 
and 3) there is need for a comniler capable o5 generating sharab]e code, which we did not have for our 
systems. Lane [~] ~ives additional reasons for usinq assembly lanquaqe. He states, "students have had 
exposure to computer architecture, but they never really learned a particular architecture well. This 
is a nrimary reason assembler lanquaqe is used in the course." Wakerly and ~cCluskey f]9] also qive reasons 
For usinq an assembly lanquaqe in this type of course. In addition to the Curriculum '7~ [3] recommendation, 
there were other reasons the students would benefit from workinq in a small hands-on computinn environment. 
Their previous e√óneriences had been entirely on a time sharinq system, weaver [13] states that the students 
on such a system are "insulated from the machine hy multiple layers of operatinq system software". The 
students needed to have some of these layers opened up or removed. It is also true that workinq on a 
small hands-on system ~ives the students a feelin~ they are more in control and responsible For what 
is happenina than is possible on a larqe time-shared system. Finally it would ~ive the students exposure 
to and experience with such small, stand alone systems. 88  The course seemed to divide nicely into 
three parts: i) 8S80 Assembly Language and CP/M 2) description and discussion of student projects or 
assignments ~) general operating system principles. The first of these parts was done primarily at the 
beginning of the course and was scheduled for about 3S% of the classes. The last two parts were distributed 
somewhat evenly through the last 70% of the classes. Frequently a principle was discussed in ~eneral 
termS, then its implementation on an existing system was explained, followed by a brief outline of a 
method to implement that principle on our system. There were two text books assigned for the course. 
 Levanthal's [~] book on R~80 Assembly Language Programming was used for the first part of the course. 
Lister's [7] Operating Systems book was used for the general operating systems principles. Some other 
textbooks that may have been used for this part of the course include those by Brinch Hansen [I] , 
Calingaert [21, Habermann [4] and Shaw [gl. All the students in the course had taken a course in Computer 
Organization and Assembly Language programming. In that course they did assembly language programming 
on the ~ECSYSTEM-~. Having to work on a more rudimentary system, which had a less sophisticated instruction 
 set, was enlightening to many. As one example the ~80 assembly language has no multiplication or division 
instructions. The DEC assembly language not only has sinqle word integer multiplication and division 
instructions, but also double word integer and floating point multiplication and division instructions. 
 In addition to g~80 Assembly Language, we also discussed CP/~ commands, the FDOg functions, the CP/M 
context editor and DDT. There were no system functions for numeric I/O. The first two assignments 
 were given partly to provide the students with numeric I/O routines, which they could use For the 
rest of the semester. In addition the second assionment was to introduce them to a method for handling 
a mini command language. The first assignment was to write a subroutine to do two byte multiplication 
and then to use it in a program that accepted numbers from the console in decimal and then printed 
 them on the console in hexadecimal, the second assignment was to accept numbers in decimal, octal 
or hexadecimal, depending on a command given in a mini command language, and then print the numbers 
on the console in one of these bases, again in response to a command given in a mini command language. 
The students learned they could create and save their own system functions. The third assignment was 
to provide a  software implementation of a system monitor. Since each student was to do his or her own 
monitor it would necessarily have to be a simple monitor. Titus, Larsen and Titus []~] suggest a simple 
system monitor and we modified it slightly. The students minimal monitor again used a mini command language. 
There were just six commands in this monitor as indicated A meant to accept a I~ bit address in hex 
and store it ms the current address. D meant to display in hex the contents of the current memory location. 
C meant to change the current memory address to the one given. g meant to increment the current memory 
address. G meant to begin execution of a program whose starting address is the current address. ? meant 
to exit this monitor and  return to normal system level. In addition the students were to display the 
capabilities of this monitor including entering and executing a simple machine language program. This 
became known to the students as their minimal monitor. All the console I/O up to this time was done 
using the FDOg functions and user designed routines dependent on these functions. The students were now 
to implement their own I/O routines This could help them to understand the problems of timing and control. 
Their I/O routines were to be similar to the FDO,q ~unctions, except the routines were to interact with 
one of the Rg-~C asynchronous ports, called the auxiliary port, instead of the console. The students 
were to modify their minimal monitor so that, dependent on a software switch, the monitor would interact 
either with the console or the auxiliary port. The monitor, when it was r t~nning, could be used to set 
and reset this software switch. In this way the monitor could be moved from console to auxiliary port 
and back. Students better understand the concepts and problems involved in concurrent processing when 
they have to implement at least a minimal version of it. This meant implementing a dispatcher or low-level 
scheduler. There was a major problem to be overcome. The Intertec guperbrains, which we were using, did 
not allow access to the interrupt mechanism and we did not have external clocks for the systems. There 
waS an interrupt which was taking place at fixed intervals of real time. This interrupt, which was intended 
to refresh the CRT, was apparently triggering an RgT 07 instruction. It caused a call to a su%routine 
at location ~gH. In ~SH, there was a jumn to a location in higher memory where the screen refresh procedure 
could 89  be found. The students replaced the jump instruction in location 3,qR by a jump to their 
scheduler. The scheduler on completion had a jump to higher memory where the screen refresh procedure 
was located. The student were to implement a scheduler which allowed for just two processes. A round 
robin scheduling algorithm was used. %ince the two processes were not the main consideration, one was 
implemented as the mini-monitor interacting with the console and the other was implemented as the mini-monitor 
interacting with the auxiliary port. we had connected terminals to the auxiliary ports of two of the 
Intertec Superbrains in the laboratory, when the assiqnment was working as intended one person could 
sit at the console working wi th the minimal monitor and another person sit at the auxiliary terminal 
also working independently with the minimal monitor. Many of the students were surprised that the two 
processes really did seem to be working at the same time. After this assignment, they had a better understanding 
of the DEC-2Z time sharing system, which they had been using for the last few years. In addition, the 
students learned from the deficiencies of the assignment. Memory protection was not part o~ the assignment 
and so either process could enter the workin~ area of the other process. Overall this was the most exciting 
and rewardin~ assignment for the students. The final assignment for the course again involved concurrent 
processing. This assignment was to implement foreground process that was a slightly modified minimal 
monitor interacting with the console. The background process was to be a print process which would initially 
be asleep. The minimal monitor after an appropriate command would accept the name of a file on the user's 
disk. It would then wake up the print process and print the file. The printer, which in our case was 
just a terminal, was connected to the auxiliary port. The print process and the minima] monitor were 
potentia]ly concurrent processes. The major difficulty to be overcome in this assignment was the implementation 
of a wait and signal on a mutual exclusion semaphore. The FDOS funCtions behave like a critical sectio~. 
Only one process can be using them at a time. In this assignment, the minimal monitor was usino the FDOS 
functions for console I/O and the print process was using them in order to open, read and close the file 
being printed. In theory the wait and signal procedures should not be interrupted. In Dractice, all that 
was needed was that when one process calls w~it or sinnal the other process that potentially uses wait 
and signal should not be able to interrupt. This could be arranged by turnin~ off the scheduler on a 
call to wait or s~nal followed by turning on the scheduler before the return. Turning on and turnin~ 
off the scheduler was accomplished by chanqinq the jump ~nstruction at location leH ~rom the scheduler 
to the screen refresh process or vice versa. Tn wait, if the alternate process had control of the semaphore, 
the scheduler would be turned off until that process gave UD the semaDho re. The implementation of signal 
does not require the scheduler be turned off. If signal is interrupterS, it ma V cause the interrupting 
process to wait an extra cycle. This however seems mimor, qiqnal then needs only to increment the value 
of the sema phore to indicate the semaphore is released . The students aaain learned something From a 
deficiency of this assiQnment. The minima] monitor, when it is expecting a command from the console, 
is in the critical section and so has control of the semaphore. If the printin~ process is also active 
an~ it is trvinq to do a file reaa, it will be waitinn to ~et into the critical section. T~ one tried 
to use this assignment to print a file and not do anything with the minimal monitor, one would be in 
a type of deadlock. The minima] monitor would have control of the semaphore wa itin~ for a command. The 
print process would be trying to acquire the semaphore in order to rea~ the file. Overall it was the 
opinion of both teachers and most of the students, who were involved with this course, that working with 
a small computer system in this course is better than workinq on a larger time sharing svstem. A deeper 
understanding of certain conceDts is gained either because of positive or negative experience with the 
assignments. Some of these conceDts are: 1) the use and reason for system functions, 2) concurrent processing 
3) memory protection 4) File systems 5) critical sections ~) deadlock. ReferenCes <RefA> rl] Rrinch Mansen, 
Per, "operating ~vstems Principles", Prentice-Mall Tnc., lq7R. r2l Calinnaert, Peter, "Operating System 
 Elements", Prentice-Mall Inc., IQRP. [31 Curriculum Committee on Computer qcience, "Curriculum '7~ 
Recomendations for an Unaerqraduate mronram in Computer ~cience", Comm. AC~ ~, 3 (~arch,lo7Q) , 147-I~. 
 90  [4] Habermann, A.N., "Introduction to Operating System Design", Science Research Associates, 1976. 
 [5] Lane, Malcolm G., "Teaching Operating Systems and Machine Architecture..More on the Hands-On Laboatory 
Approach", gIGC~E Bulletin, 1981. [6] Levanthal,Lance A., "'~080A/R~R5 Assembly Language Programming", 
McGraw-Hill Inc. ,1978. [7] Lister, A.M., "Fundamentals of  Operating Systems'I, Springer-Verlag New 
York Inc., 1979. [8] Rine D., Pessel D., Ghosh ~., "the Software Engineering Subject Area", Computer, 
December, 1977. [9] Shaw Alan C., "The Logical resign of Operating Systems", Prentice-Hall Inc., 1974. 
 [1Z] Titus C.A., Larsen D.G., Titus J.A., "8080 8085 Software Design Bgok 2", Howard W. Sams Co. Inc. 
 [II] Wadland~ Kenneth R., "Operating System Projects for Undergraduates", SIGCSE Bulletin, 1980. [12] 
Wakerly, J.F., McCluskey, E.~., "Microcomputers in the Computer Engineering Curicu]um", Computer, January,1977. 
 [13] Weaver, Alfred C., "Design of a Microcomputer Laboratory for Teaching Computer Science", SIGCgE 
Bulletin, 1981.</RefA> 
			

