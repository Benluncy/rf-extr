
 Permission to make digital or hard copies of part or all of this work or personal or classroom use is 
granted without fee provided that copies are not made or distributed for profit or commercial advantage 
and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, 
to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee. &#38;#169; 
1980 ACM 0-89791-011-7 $5.00 operations can only deliver a value, but others can potentially fail. If 
an expres­sion fails, the evaluation of the expres­sion in which that operation occurs is aborted immediately 
and failure is sig­nalled to the construct in which the fail­ ing expression occurs. Such a failure is 
a transient entity and must be captured at the moment it occurs. Three cases arise: a. The syntactically 
enclosing construct is capable of handling the failure itself. This is the case if the failing expres­sion 
E occurs in contexts like: b. The syntactically enclosing construct is not capable of handling the failure 
it­self, but is (perhaps dynamically) en­closed in a construct with that capabil­ity, like:  ifE then 
. . . else . . . fi while E do . . . od E ! . . . (logical or operator) E&#38; . . . (logical and operator) 
return(E) (value from a procedure) In this way failure can be passed to the caller of the procedure in 
which the failing expression occurs (see below) . c. Neither of the above two cases applies. This results 
in abnormal program termi­nation with the error message Undetect­ed failure . In x := read(input); print(X); 
the call to the read procedure may fail (on end of file). This failure will not be detected by the program 
itself and hence execution of the program will be aborted. This expression evaluation scheme was designed 
to be concise and powerful, but at the same time an attempt was made to pro­tect the programmer against 
undetected or unwanted failure. Conciseness is obtained in two ways. Firstr by computing a value and 
a failure signal in the same expression. This al­lows , for example while line := read(input) do . . 
. od instead of while not eof(input) do line := read(input); if io_errors(input) then . . . fi; ... 
od ; Second, by disregarding the source of failure and focussing attention on the absence of failure 
(i.e. success) during the evaluation of the expression. Consid­er: if (read(input) I I read(input) # 
expected then error ( Bad input ) fi where expected has the expected input string as value. Three sources 
of failure can be identified here: the two read opera­tions and the inequality test. The pro­grammer, 
however, is in most cases only in­terested in the fact that the input file does not conform to his expectations. 
The above formulation makes this more clear than L1 := read(input) ; if eof(input) then error ( Bad input 
) else L!2 := read(input) ; if eof(input) I (Ll I I L2 # expected) then error ( Bad input ) fi fi In 
principle, this argument works in two directions: since the source of failure may be lost, the programmer 
may be misled about the actual source of failure. It is our experience that this seldom happens and in 
all cases where the distinction ~ impor­tant it can be expressed easily. Protection is achieved by prohibiting 
undetected failure. This turns out to be a frequent source of run-time errors, which always corresponds 
to forgotten or im­possible failure conditions. A direct consequence of this protection scheme is that 
one can write assertions (i.e. expres­sions which should never fail) in a pro­gram. A run-time error 
occurs if such an assertion is violated. Another noteworthy consequence of this evaluation mechanism 
is its ability to let a procedure report failure to any procedure which called it (indirectly. This effect 
is obtained by adhering to the programming convention that procedures have the form El &#38; . . . &#38;En. 
If one of the expressions Ei fails, this failure is passed to the caller of the current procedure. If 
that calling procedure has the same form, it will not handle the failure itself but will pass it on to 
its caller. In this way, low-level procedures need not be aware of failure at all and high-level procedures 
can detect the failure and take appropriate measures. Some programming languages have special facilities 
for handling exceptions of this kind; in SUMMER they can be handled by the standard expression evaluation 
mechanism. 3. RECOVERY CACHES For the solution of problems such as parsing languages with context-sensitive 
or non-LL(l) grammars and heuristic searching, it is often necessary to attempt a poten­tial solution 
and to undo the effects of that attempt if it is not successful. Many schemes have been proposed for 
the formula­tion of such backtracking algorithms, but most involve either opaque control struc­ tures 
or provide unsatisfactory control over modifications of the program environ­ment (i.e. global variables). 
The recovery cache [RANDELL75], which was invented to increase software reliabil­ity has been adapted 
to act as a device for monitoring environment modifications in backtrack-liable situations. Recovery 
caches are used both at the conceptual and at the implementational level. A cache consists of (name, 
value) pairs. The name part may refer to simple variables, array elements and class components (see section 
4). When backtracking may be necessary a new cache is created and from that moment on all assignments 
to variables and input/output operations are monitored. Whenever an assignment is about to be made to 
a variable whose name does not yet occur in the cache, its name and value before the assignment are entered 
in the cache. Modifications of input/output streams are registered similarly. If the attempt is successful 
and no backtracking is neces­sary, the information in the cache is dis­carded but in case of failure, 
the informa­tion in the cache is used to restore the environment to the state as it was at the moment 
that the cache was created. Since recovery caches may be nested, discarding may mean: merging the information 
in the current cache with that in the previous cache. In this manner, the information in the previous 
cache is still sufficient to describe all modifications which were made since that cache was created. 
There are two exceptions to these rules: Input/output operations on the standard input/output stream 
are not recovered. In many situations it is not desired to recover these streams and in some cases the 
meaning of such a recovery may be non-obvious or confusing. In SUMMER these streams can be used to control 
and monitor the backtracking process in­teractively. The local variables of the procedure in which the 
cache was created are not recovered. In this way information about the reason of failure can survive 
the failure itself. At the programming language level, caches are introduced by the construct try El, 
E2, .... En until ED endtry . In a first approximation this expression is equivalent to (El &#38; EO) 
I ... I (En&#38;Ea Before the evaluation of e.. ch (Ei &#38; ED) starts, a new cache is created. If the 
evaluation of this subexpression succeeds, the cache is discarded and the whole ex­pression succeeds. 
If the evaluation fails, the environment is restored from the cache and evaluation of (Ei+l &#38; Eti) 
is at­ tempted in the same manner. The whole ex­pression fails if none of the subexpres­sions succeeds. 
Completely automatic back­tracking is achieved by nested try con­structs. This simple scheme is very 
well suited for the formulation of problems oc­curring in pattern matching as will be seen in section 
5. 4. PROCEDURES, OPERATORS AND CLASSES The remaining features of the SUMMER kernel are now summarized. 
Procedures have a fixed number of parameters, which are passed by value. Procedures may either fail or 
return zero or more values. Hence it is possible to return more then one result value. An operator is 
defined by associating a user-defined operator symbol with a pro­cedure with one or two parameters. Classes 
are the only available data structuring mechanism and are a generaliza­tion of the SIMULA [DAHL743] class. 
A class declaration consists of: A class name and formal parameters. The class name is used as name for 
the crea­ tion procedure for objects belonging to this class. The formal parameters are used to provide 
initial values for that object. Fields, which are either used to store information related to the object 
(e.g. the real and imaginary parts of a com­ plex number class object) , or informa­ tion local to the 
class object (the stack pointer in a stack class ob­ ject) . Fetch and store access to fields can be 
controlled completely by associ­ ating fetch and store procedures with each field. -Access procedures 
and operators defining the operations that can be performed on objects of this class. The components 
of a class are accessed by means of the dot notation. The operators which are defined in a class can 
be used in infix notation. The type of the left operand. of an operator is used to disambi­guate overloaded 
operators, i.e. operators which are defined in more than one class. One, final, concept must be introduced 
before we can turn our attention to some pattern matching applications. One of the advantages of string 
pattern matching languages is that they liberate programmers from the necessity to repeat a current sub­ject 
string and cursor position in each pattern matching operation. In SUMMER an attempt is made to provide 
such a facility in general. In sequences of the form: a := S.x; b := S.y; c := S.z(lil) ,,s.,, the prefix 
could be factored out. Pscal uses the construct with S do begin ... end for this purpose. All field references 
that occur inside begin . . . end are au­ tomatically prefixed with 11~.1,. In this notation the example 
would read: with S do begin a:= x; b:=y; c:= z(10) end But this is not sufficient for the applica­ tions 
we have in mind, where it is not unusual that many procedures operate on the same class object. This 
is illustrated by a set of parsing procedures that operate on one subject string. The Pascal approach 
has the disadvantage that this common class object must be passed as argument to all pocedures (or must 
be assigned to a global variable) and that all procedure bodies must be surrounded by a with construct. 
This problem can be circumvented as fol­ lows. The construct (1) scan S for E rof declares a completely 
new variable each time the construct is encountered at run­time and assigns the class object S to that 
new variable. All occurrences of fields from the class to which S belongs are now prefixed with this 
new global variable in the same way as is done i n Pascal. The san construct is more general since it 
af­ fects all expressions and procedures which can be evaluated directly or indirectly from the body 
of the scan construct. In Pascal this effect is restricted to the ex­pressions which are statically enclosed 
in (1) Inspired by the scan S using E construct in Icon [GRISWOLD791. the body of the with construct. 
If the scan construct is used in a nested fashion, then the previous value of the new global variable 
is saved and restored properly on exit from the current scan construct. This also applies to the case 
that the scan con­ struct is left prematurely by means of a return statement. 5. A PATTERN MATCHING 
EXTENSION 5.1. String Pattern Matching Now we will show how a string pattern matching system can be build 
on top of the SUMMER kernel. Pattern matching is done on a string subject which is indexed by an in­teger 
cursor. For the sake of this discus­sion a very simple system will be defined, which only supports the 
following three functions: lit(S): literally recognize the string S. If S occurs as substring in the 
subject at the current cursor position, then deliver S as value and move the cursor beyond S. Otherwise 
report failure. break(S): recognize a string of characters not occurring in S followed by one ter­minating 
character which does occur in s. If such a string can be found start­ing at the current cursor position 
then deliver that string (wfthout the ter­minating character) as value and move the cursor to the terminating 
character. Otherwise report failure. span(S): recognize a non-empty string of characters all of which 
must occur in S. If such a string occurs as substring in the subject at the current cursor posi­tion, 
then deliver that string as value and move the cursor beyond it. Other­wise report failure. (Span is 
added to allow more interesting examples, its im­plementation will not be shown here.) The following 
class definition implements this pattern matcher: class scan_string (subject) begin var cursor := 0; 
 proc lit(s) ( if cursor + size(s) > s ze subject) I s# substr(subject,cursor ,cursor+size (s)) then 
freturn # failure return # else cursor := cursor + size(s); return(s) fi ): proc break(s) ( var newcursor 
:= cursor, result; for newcursor in [cursor : size(subject)] do for cin sdo if c = subject [newcursor] 
then result := substr(subject,cursor ,newcursor) ; cursor := newcursor; return(result) fi od od ; freturn 
 ); proc span(s) (# similar to break #); end class scan string; The following example illustrates how 
iden­ tifiers starting with the letter X can be recognized: proc X_identifier(s) ( var t := scan_string(s) 
; t.lit( X ) &#38; (t.span(letgit) I t.lit( )) ) (In all examples we assume that letter , digit and 
 letgit have appropriate values.) Note that the normal logical operators &#38; and l are used for 
combina­ tion. Hence there will be no backtracking, reversal of effects or whatsoever. This example 
can be written in a more concise form if we use the scan construct: proc X_identifier (s) scan scan_string(s) 
for lit( X ) &#38; (span(letgit) I lit( )) rof A final example may illustrate the use of the value delivered 
by the pattern matching procedures. The problem is to ex­tract all letters from a given string. For example 
a,b,c gives abc : proc extract_letter(s) ( var result := ; scan scan_string(s) for while break(letter) 
&#38; result := result I I span(letter) do # empty statement # od rof; return(result) ) In SUMMER pattern 
matching and back­tracking have been separated completely. It came as a shock &#38;E___ that the vast 
. - majority of pattern matching problems, we  had previously solved ~ means of implicit backtracking, 
could be solved without ~ backtracking at all! This suggests that the close interaction between pattern 
matching and backtracking, as can be found in many languages, should be reconsidered. Now we will address 
the question how pattern matching with automatic backtrack­ing can be obtained. Consider the expres­sion: 
(lit ( ab ) I lit( a )) &#38; lit( bc ) In the pattern matcher developed above, the alternative lit( 
a ) is discarded as soon as a subject string starting with ah is encountered. The string abc can not 
be recognized in this way. But if we rewrite this expression as try lit( ab ), lit( a ) until lit( bc 
) endtry then the recovery cache mechanism restores the initial cursor value automatically and tries 
the second alternative if lit( bc ) fails. No special attention needs to be given to the cursor: it is 
an ordinary variable which is saved and restored by the recovery cache mechanism! 5.2. Generalized Pattern 
Matching In most pattern matching systems there is only one subject string involved in the pattern match. 
This restriction can be re­moved without introducing any new concepts as an example will show. The following 
(rather artificial) problem is to ensure that two strings S1 and S2 conform to the following rules: a. 
S1 is of the form cl;c2; . . ..cn. where ci is a (perhaps empty) sequence of arbi­trary characters other 
than the charac­ 1;1 ter . Some examples are: a;b; , #21!;7a;# and lab;cde;f; r. b. For a given S1, S2 
has the form dld2. ..dn, and either di = ci or di = reverse holds. Acceptable values for S2 with S1 equal 
to ab;cde;f; are abcdef , abedcf , bacdef and baedcf . The following program performs this check: S1 
:= scan_string (S1) ; S2 := scan_string(S2); scan sl for while (c := break ; )) &#38; lit( ; ) do if 
not scan S2 for lit c) I lit reverse c)) rof then error( check fai~ s ) fi od rof; if sl.cursor # size(Sl) 
I s2.cursor # size(S2) then error( check fails ) fi Each scan_string object maintains its own cursor. 
Note how the cursor value of S2 survives each evaluation of the inner­ most scan construct. This allows 
the in­nermost pattern match to continue where it left of the previous time. From the preceding paragraphs 
it will be clear that pattern matching as presented here, does not depend on the fact that strings are 
used as the basic unit of recognition. One can, for example, easily imagine pattern matching in an array 
of strings. The cursor must then be re­placed by a pair of values to maintain the current position and 
basic scanning pro­cedures like xlit, ylit, xspan and yspan must be defined. It may be expected that 
a system for the recogn tion of two­dimensional line-drawings like ESP3 [SHAPIR074], can be defined in 
a straight­ forward manner using the primitives from the SUMMER kernel. matching in domains other than 
strings. 6. IMPLEMENTATION An implementation of SUMMER is near com­pletion and runs under the UNIX (1) 
operat­ing system [RITCHIE74]. This implementa­tion consists of a two pass compiler (writ­ten in SUMMER) 
which transforms source pro­grams into a rather high level abstract machine code. This abstract machine 
code is then executed by an interpreter written in C [KERNIGHAN781. Extensive facilities are provided 
for program profiling and sym­bolic debugging. 7. RELATED WORK SUMMER is the successor of SPRING [KLINT781, 
a language which had the same design goals, but lacked the simplicity and generality achieved in SUMMER. 
Both languages were inspired by and profited from ideas in SNOBOL4 [GRISWOLD71] and SL5 [GRISWOLD76]. 
SUMMER was also influenced by Icon [GRISWOLD791. We had already for­ mulated several ideas for the integration 
of pattern matching and expression evalua­tion, but the solution finally adopted in SUMMER was influenced 
by Icon. There are important differences too. For example, in Icon most pattern matching procedures deliver 
integer values corresponding to the position to which they can move the cursor. Next the cursor has to 
be moved explicitly. This operation delivers the substring between successive cursor positions as value. 
In SUMMER all pattern matching pro­ cedures deliver the recognized substring as value and move the cursor. 
In this way the cursor needs hardly ever be manipulated by the programmer. The pattern matching model 
in SUMMER is more general, since it allows simultaneous pattern matches and pattern (1) UNIX is a Trademark 
of Bell Labora­tories. The evaluation model which prohibits un­ detected failure, the use of recovery 
caches and the separation of pattern match­ing and backtracking are new. ACKNOWLEDGEMENT Design and implementation 
of SUMMER were realized in close cooperation with Marleen Sint. REFERENCES <RefA>[DAHL701 Dahl, O-J, Myhrhaug, 
B. &#38; Nygaard, K .r SIMULA Information, Common Base Languager Norwegian Computing Centre, S-22, 1970. 
 [GRISW0LD711 Griswold, R.E., Poage, J.F. &#38; Polonsky, I.P., The SNOBOL4 program­ming language, Second 
edition, Prentice Hall, Englewood Cliffs, N.J., 1971. [GRISW0LD761 Griswold, R.E. &#38; Hanson, D.R., 
An overview of the SL5 programming language, SL5 project document S5LDlbr The University of Arizona, 
Tucson, Ar izona, October 9, 1976. [GRISWOLD79] Griswold, R.E. &#38; Hanson, D.R., Reference Manual for 
the Icon Program­ming Language, TR 79-1, The University of Arizona, Tucson, Arizonar 1979. [KERNIGHAN78] 
Kernighan, B.R. &#38; Ritchier D.M., The C Programming Languager Prentice-Hall, 1978. [KLINT78] Klint, 
P., Pattern Matching in SPRING, ~ Van Vliet, J.C. (cd), Col­loquium Capita Datastructuren, MC syl­labus 
37, 1978, 65-83. [RANDELL751 Randell, i3., System structure for software fault tolerance, in Proceedings 
of an International conference on reliable software, SIG-PLAN notices, 10(1975)6, 437-449. [RITCHIE74] 
Ritchie, D.M. &#38; Thompson, K., The UNIX time-sharing system, Communi­cations of the ACM , 17(1974)7, 
 365-375. [SHAPIR074] Shapiro, L.G., ESP3: a language for the generation, recognition and manipulation 
of line drawings, (thesis), TR 74-04, University of Iowa, 1974. .  
</RefA>			
