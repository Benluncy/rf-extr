
 AN OBJECT-ORIENTED INFORMATION MODEL FOR A PATIENT DEFINITION AND MANAGEMENT SYSTEM Fernando Ferri 
a, Domenico M.Pisanelli b, Fabrizio L. Ricci a, Fabrizio Consorti c a Istituto di Studi suila Ricerca 
e Documentazione Scientifica - Consiglio Nazionale delle Ricerche, Roma, Italy. b lstituto di Tecnologie 
Biomediche - Consiglio Nazionale delle Ricerche, Roma, Italy. c IV Clinica Chirurgica, Policlinico 'Umberto 
I, Universit~ degli Studi di Roma 'La Sapienza', Roma, Italy. Keywords: Patient Folder, Object-Oriented 
Modelling, Data Modelling ABSTRACT The management of information related to clinical activities is a 
complex task. In fact, patient related information reported in patient folders comes from heterogeneous 
sources and may be rendered by means of different modalities. Data can originate from direct observations 
made by physicians like in the case of objective examination. In other cases physiologic phenomena are 
captured by means of the involved electrical activity (like in the case of heart or brain activity), 
whereas anatomical structure details are obtained by means of radiologic techniques, in this paper we 
propose an object-oriented model of a multimedia patient folder. This model has an adequate flexibility 
for adapting the most different clinical environment. It allows the physician to structure the information 
needed for his/her patient folder without employing a programming language. Finally we show some features 
of the CADMIO system, a tool for designing patient folder management systems, based on this model. 1. 
INTRODUCTION In a clinical information systems, the patient folder is the main source of clinical information. 
Its main purpose is to document the medical activity performed in relation to each admission. Severel 
heterogeneous categories of users of patient folders can be identified, for example: physicians, nurses, 
administrators, political authorities, researchers and patients themselves. The concept of patient folders 
has now been effectively extended to include documents theoretically beyond their original scope. They 
range from documents referring to operations and actions performed on the patient during or after his/her 
stay to admission documents, discharge reports, records of information transmitted by the medical and 
nursing staff to the patient (including duplicates of X-ray examinations). "Permission to make digital/hard 
copy of all or part of this material without fee is granted provided that copies are not made or distributed 
for profit or commercial advantage, the ACM copyright/server notice, the title of the publication and 
its date appear, and notice is given that copying is by permission of the Association for Computing Machinery, 
Inc.(ACM). To copy otherwise, to republish, to post on servers or to redistribute to lists, requires 
i3rior specific permission and/or a fee." &#38;#169; 1996 ACM 0-89791-g20-7 96 0002 3.50 The literature 
has suggested various models for the organization of the information contained in the patient folder. 
Each one of them stresses some aspects of the patient or of clinical activity to the detriment of others. 
Wide-ranging analysis of the literature has allowed us to classify patient folders as basically: person-oriented, 
organized according to the classic systematic approach to the patient; problem-oriented, according to 
Weed's original formulation [!, 2] or to one of the subsequent modifications thereof [3, 4]; symptom-oriented, 
in which information is organized according to diagnostic records based on a symptom or specific syndromic 
pattern; or finally, decision-oriented [5]. In the real practice, a patient folder is more than just 
a structured set of documentary information. It is also a professional tool made up of a collection of 
miscellaneous documents which are used in different ways for different purposes [6-8]. It is possible 
to identify five different ways in which the information contained in a patient folder is used, and they, 
in turn, correspond to five different classes of processes: the clinical process, the ward activities, 
the epidemiological context, the tutorial activities, the legal aspects. This means that the same piece 
of information may be used and analyzed by different perspectives and may be rendered by means of different 
modalities [8]. Let us consider a X-ray examination, for example: - in the context of a clinical process, 
an X-ray is used for diagnosis, prognosis and therapy. It must therefore be represented in its complete 
multimedia dimension as an image associated with a text (the report) and, if necessary, with the informal 
exchange of information between the clinician and the radiologist. In [9-12] it is possible to see the 
prominence of the patient folder on the clinical process. - in the context of ward activity, an X-ray 
is essentially an action to which other actions are connected, prior thereto (request, booking, patient 
preparation) or as a consequence thereof (exchanges of information between ward physicians and radiologists, 
forwarding of the report, reading of the report). The dominant aspect is thus action management through 
controlled language: therefore the X- ray will be represented by an identifier and by a state which allow 
us to determine the phase of the management process in which it is located. In [13-15] it is possible 
to see the prominence of the patient folder on the ward activity. - in an epidemiologic context, an 
X-ray represents a procedure which has a certain value in terms of its effects on health or of resource 
consumption. It requires  aggregations of a statistical type; hence data codified according to systems 
that are standard for different users and stable in the course of time. The X-ray will thus be represented 
by a code. In [16-18] it is possible to see the prominence of the patient folder on the epidemiologic 
 aspects. The goal of this work is to define an object-oriented model of a multimedia patient folder, 
in the last years, object.oriented data models (and consequently analysis and design methodologies) have 
appeared and several applications have been implemented in clinical domain [19-22]. Also public bodies 
like NHS in the United Kingdom are gradually introducing these methodologies in their modelling activity 
[23]. The proposed model has been employed for implementing an environment for the design of patient 
folders: the CADMIO system. CADMIO has been used in two departments of the University Hospital of Rome 
and allowed the realization of two different patient folder management systems. The systems were configured 
by the users themselves (physicians of the hospital) and can share data thanks to the common base functionalities. 
In the next paragraph we define the Local Entity Dictionary (LED) as the set of information and concepts 
used by physicians of the same unit. In the third paragraph we introduce an object-oriented model which 
represents information in the medical domain, whereas in the fourth one we show how to employ it in populating 
a particular Local Entity Dictionary. Finally we illustrate some features of the prototype developed. 
2. LOCAL ENTITY DICTIONARY In order to represent the complexity of the information of the patient folder, 
here we shall no longer speak of data (representations of single pieces of information), but of more 
complex entities (the medical concepts represented and the the sets of their properties, irrespective 
of memorization and representation) which, according to their use, may assume different aspects and roles. 
When describing the patient status in the medical folder all physicians of a ward use a set of common 
entities. We define such a set: Local Entity Dictionary (LED). In order to define an entity, it is essential 
to identify the context in which the entity is used, the properties which describe it and finally the 
management of its properties. The purpose of constructing the LED is not only to provide a simple classification 
of the entities that have to be managed, but also to provide a tool to describe their logical organization. 
The relations designed to represent the logical organization of these entities are the classic ones of 
generalization (ISA) and aggregation (PART OF). Entities are organized by levels of abstraction which 
returns each of them to more general entities which specify increasingly general properties and application-oriented 
contexts. Moreover, each entity may be broken down into more elementary entities and, vice versa, various 
entities may be aggregated in more complex entities. It is possible to attribute different properties 
and characteristics to these aggregations depending on whether they are the consequence of the temporal, 
spatial or semantic composition of information. 3. THE MODEL The MIC/MIE (Medical Information Category 
/ Medical Information Elements) model allows a physician to define the Local Entity Dictionary (LED), 
i.e. the local entities constituting the patient folder and their logical organization. The awareness 
of the existence of a natural hierarchial system among the entities which express the various medical 
concepts is at the basis of the definition of the MIC/MIE model. For example, if we consider a part of 
the patient folder such as ease history or anamnesis in order to model it, we may define a hierarchy 
of entities, each identifying a set of data about the patient, but also consider this hierarchy a tool 
for organizing data pertaining to the patient's case history. The hierarchy shown in Figure I may be 
regarded as representative of both aspects: A Smoking he, bit --Adult diseases 11 /~SomatopsychiÂ¢ dcvel 
J Childh~w,d diseases / ~Alchole Ananmestic h ls~iio/oical ~ " Children Data ~-"~"Ub y g ' ~ ^ a'ta ~ 
~ours~ ~Surgieal imervamion --Wot'k Laborer Dala Figure 1: A fragment of a possible hierarchy of entities 
Depending on his/her own particular specialization, a physician might want this part of the patient folder 
to be organized differently (for example, with greater or less detail given to the entities which may 
be part of case history or anamnesis) in such a way as to highlight the aspects which interest him/her 
most. And these concepts might of course be extended naturally to each and every other part of the patient 
folder. The aim of enabling the physician to define the set of entities which he/she wishes to fit into 
the patient folder together with definition of how they must be organized was achieved by defining a 
prototypical class which combines every common feature of the entities contained in the patient folder. 
Starting from this root prototypical class, it is possible to define a hierarchy of classes. Such a hierarchy 
has to match the entity hierarchy represented in the patient folder. The properties of the prototypical 
class are described by variables and metavariables. A metavariable [24] is a variable which can only 
assume types as a value, it is possible to model class hierarchies by assigning types to metavariables. 
 3.1 The Medical Concept Prototype The central aspect of the MIC/MIE model is the root prototypical class 
defined Medical Concept Prototype (MCP). This class represents the conceptualization of medical entities 
through primitive terms designed to represent their static and dynamic properties. The Medical Concept 
Prototype represents the general aspects common to all entities. Itemizing these aspects, it is possible 
to reproduce any entity of the LED designed to represent a set of patient folder data. It thus stressed 
information about the organization of reality and serves to interpret the semantics of abstractions. 
Through its metavariables and variables, the Medical Concept Prototype (MCP) encompasses all the relevant 
aspects capable of classifying the entity itself semantically, temporally and functionally. Mediqal ~on~:Â¢pt 
Prototype Metavoriables Metavariables represent all the properties of entities to which a value cannot 
be directly assigned. For example "media" (text, image, sound) is assigned to the type "type" in the 
MCP. Such properties differ from entity to entity according to the set of values they assume. As the 
entity hierarchy develops, they must, therefore, be defined with the greater accuracy. It is necessary 
, in fact, to define first a type: only later is it possible to assign a value to it. In the case of 
a tool for the execution of a diagnostic examination, it is necessary first to define the types of suitable 
tool, then it is possible to specify a model of that type of tool available on the market. The different 
Prototype metavariables are described below. The T.T2/.p.g_ is used to characterize the original nature 
of the entity, just the way the performing operator registers it in the conventional medium (patient 
folder etc.). Entities are heterogeneous and hard to organize in a detailed pre-established way. Depending 
on their nature, they may be classified, as structured data, free texts, images or biosignals, or as 
a combination thereof. According to Type, the methods applied to the graphical management of entities 
change. For example, if the entity can be visualized by a text, it is necessary to associate text management 
methods (writing, editing etc.) with the information. Likewise, if the entity can be visualized by an 
image, it is necessary to manage that entity by means of other methods which enable the user to read, 
memorize and process the image. By F0rm~ we mean entity registration procedures. Once each entity has 
been defined for a computerized patient folder, it should be memorized in a format which will retain 
the informative content of the initial information. A certain number of registration formats have been 
identified for each Type. It is of course important to use the most efficient format in terms of memory 
occupation and processing. By Representation. we mean all the various entity presentation procedures. 
Besides,"data entry", "data retrieve" and the possible processing of the entity are also worthy of note. 
Since the same entity may be presented in different ways according to the aspect to be displayed, the 
development of different presentation procedures highlights the different peculiarities of the entity 
(or of a certain set of entities). The system customizes the presentation of entities according to their 
characteristics, semantics, and importance and to the role of the user requesting the information. The 
p~.rforming Onerator must be a person (a physician or a nurse). Even when the entity is produced directly 
by a piece of equipment (as, for example, in the case of the spectrophotometer for blood tests), the 
performing operator may be identified as the subject who, under his/her own responsability, certifies 
the acquisition and validity of the entity. The performing operator always has a name to identify him/her 
and unambiguosly qualify him/her, and he/she is authorized to write in the patient folder. The metavariable 
"Performing Operator" permits management of the medico-legal aspects of the entity, allowing us to specify 
the person who certifies the veracity of the entity in the patient folder. On the basis of the professional 
position held by the person inside the facility defined, the system can autorize or prevent his/her writing 
on any given entity in the patient folder. The User may be a physician or a nurse or another health care 
professional This metavariable, allows us to identify the professional category or categories allowed 
to access the entity. Once the professional category or categories of persons who are allowed access 
to a certain entity have been defined, all the individuals belonging to such categories may have access 
to it, unless the entity has been specifically forbidden to some of the possible users. By Tool we mean 
the physical means we use to record the entity, in a physical examination using the classic method of 
inspection, palpation, persussion and auscultation, the tool used is the sensory system of the physician 
himself/herself. The tool is also described with a name which identifies it. For each class of tools 
a set of interface is identified to acquire information for the patient folder directly from the tool 
which generates it. Life Cycle. Any entity has a life cycle and may pass through different states which 
identify it and characterize it. Let us consider the following example: the chest X-ray to be executed 
for a given patient. It must be requested, then agreed upon [25]. The exam is then performed and a report 
must be written about it. The entity evolves through various states before it is completely defined. 
The definition of the type of evolution provides a solution to the management aspects of the entity itself. 
By means of the metavariable "Life Cycle", it is possible to synchronize activities among the various 
professional categories inside a single department and among different departments. For example, it is 
possible to establish the time and means in which an entity may be tranferred from the person who has 
produced it (e.g. the radiologists) to the person who uses it (e.g. the clinician). Medical Conceot Prototvt~e 
Variables The variables describe constant characteristics common to all the entities which make up the 
Patient Folder. Values may thus be assigned to them directly without passing through the intermediate 
phase of definition necessary in the case of ' metavariables. Medical Concept Prototype Variables are: 
The Unit of Measurement, which identifies the system of measurement used. The Legal Values. which define 
the range of validity of the entity according to the system of measurement. The variable "Legal Values" 
allows the validation of the data introduced by the user. The Codine Svstem. which specifies which of 
the internationally defined coding systems is used to codify a given entity. The Code, which indicates 
the code assigned to the entity in the coding system used. Through the coding system and the code, it 
is possible to check whether different terms have been used to indicate the same entity. By means of 
these two variables it is possible to have a terminology support integrated with CADMIO for synchronisation 
of the various terms used in different department. 3.2 Metaclasses Modelling the entities of the patient 
folder is a complex activity. It is not enough to define all the entities from the Medical Concept Prototype 
to highlight relations between such entities adequately. This is why intermediate levels have been introduced 
between the Medical Concept Prototype and the entities instanceable with the facts which form part of 
a patient folder. These intermediate levels offer pointers about the organization of information in the 
patient folder. On the other hand, they modulate the applicability of properties to more or less vast 
entities. To characterize these levels, it was necessary to introduce the concept of the metaclass. In 
fact, forcing the principle that an object is an istance of a class, but that a class may also be seen 
as an object, it is possible to introduce the concept of the metaclass as a class of classes. In our 
case, metaclasses are entities which refer to more general medical concepts and hence may identify more 
than one entity referring to more specific medical concepts. As in many object-oriented database [24, 
26], the notion of metaclass used here is not limited. Besides, as a class of other classes, the metaclass 
is also seen as the root of a hierarchy of classes and, as such, it acts as a superclass. This is why 
we use the link IS_A to represent the relationship existing between the metaclass and its classes. To 
model the entities which are part of a clinical folder, having only one level of metaclasses is not enough. 
A hierarchy of metaclasses is necessary. Entities are, in fact, naturally organized by levels of generalization 
and, in this scale, the prototype represents the most generic entity. Metavariables are used to model 
the hierarchy of metaclasses. By specifying the characteristics of the prototype (that is, by assigning 
types to metavariables) the physician can define a hierarchy of metaclasses. The process of definition 
of metaclasses starting from the medical concept prototype does not occur through extension of variables 
and methods to the variables and methods of ancestors, but rather by assigning types to metavariables 
and/or limiting the types that can be assigned to them. The metaclasses on the lower levels of the hierarchy 
thus posses a lower number of metavariables and/or a lower number of types is assigned to each metavariable. 
Finally, the metavariables cannot be instanced by the physician who compiles the patient folder. This 
process also forces a process of method overriding. By imposing one type rather than another to metavariables, 
we can specialize the method to process the type assigned to the metavariable. For example, if we assign 
the type "tomograph" to the metavariable "tool", the metaclass will inherit the methods for data acquisition 
of such an instrument. Metaclasses are referred to as Medical Information Categories (MIC). They generally 
constitute the description of fragments of medical knowledge shared by different medical specialists. 
Examples of Medical Information Categories are: Anamnestic Data, Diagnosis, Diagnostic Examination, Ftistological 
Examination, X-ray Examination, X-ray Image and Report. 3.3 Classes Classes are instances/subclasses 
of metaclasses. They identify groups of objects with similar (variable) properties, identical behaviour 
(methods) and the same semantics. For these objects the same relations are valid as for other objects, 
whether they are part of the patient folder of John Smith or Tom Brown, and whether the object is the 
first or the nth in the class in John Smith's (J.S.) patient folder. For classes too, the process of 
definition starting from metaclasses does not occur through an extension of variables and methods to 
the variables and methods of ancestors, but rather by assigning types to metavariables and/or limiting 
the types that can be assigned to them. Cl~sso~ are referred to as Medical Information Elements (MIEs): 
MIEs describe the medical information common to the users of a department. Medical Information Elements 
are directly instanceable with data about the patient. There are some constraints on the assignation 
of types to metavariables. In fact, only some of the types defined can be assigned to each metavariable. 
For example, to the metavariable "Type" it is possible to assign the types "Integer", "String", "Image 
Class", "Text Class","Hypertext Class", "Multimedia Class" and "Hypermedia Class". The entity in question 
has to be managed according to the type assigned to the metavariable. Hence, if the type is "Integer", 
it is possible to verify whether the value assigned (eg.,40) to the concept (eg, the "Serum Bilirubin 
Level") fits into a certain i.nt'erval (eg, 30-70). Examples of Medical Information Elements are: "Tyroid 
Nodule", "Serum Bilirubin Level Test", "Chest X-ray", "Abdominal Pain", "Hydrosalin Infusion". 3.4 Instances 
Instances are the facts which describe the patient's clinical condition and history and constitute patient 
folder. Whereas metaclasses and classes are defined as part of the description of the organization of 
the patient folder, instances are defined as part of its instantiation. Instances are high-level MIEs 
which assume a spatial identify (the patient) and a temporal identity (the time in which the information 
is produced). Values compatible with the types defined in MICs and MIEs are assigned to the variables 
generated directly or through the metavariables. Examples of facts are: "Total Serum Bilirubin Level 
of J.S. on 20/11193", "Serum of Indirect Bilirubin of J.S. on 20/11/93", "Chest X-ray of J.S. on 22/! 
1/93", "Hydrosalin Infusion of J.S. on 21/I 1/93". 4. DEFINITION OF THE LED The description of the organization 
of the local entities which constitute the application definition universe results from identification 
of the properties of information and the contexts in which it is used. It involves an accurate definition 
both of properties and of the procedures of presentation and manipulation of these entities. To create 
the local entity dictionary, the LED, is to provide the software system with information which faeilitates 
the management of the entities by the final user. This information represents the knowledge of the user 
about the properties of the entities and their use. Let us consider an example of how it is possible 
to define the LED using the MIC/MIE model. The Medical Concept Prototype is the class which provides 
the basis for the construction of the whole hierarchy and is the class supplied by the developed prototype 
described in the following paragraph. If we consider the entity hierarchy represented in Figure 2 it 
is possible to define the entity "Chest X-ray" through the following steps: Endoscopic grafic',d ~SexaminatiÂ°nx'Rays 
S~f' cl~stX'Rays ofthe MCP ~=~ Diagnoslic examination ~ X-Rays of the Examination~" *~ lung   Therapy 
i Figure 2: An example of LED definition using the MIC/MIE model Definition of the MIC Diagnostic Examination 
beginning from the MCP. Definition of the MIC X-ray examination beginning from the MIC Diagnostic Examination. 
Definition of the MIE Chest X-ray beginning from the MIC X-ray examination. The number of levels between 
the MCP arid MIE depends only on the degree of property detail which the user wishes to obtain in his/her 
definition of entities in relation to his/her vision of reality. It is also necessary to consider the 
costs of a very detailed hierarchy in relation to possible advantages in functional terms. Through the 
steps set out above it is possible to define the following entities: Diagnostic Examination, X-ray Examination 
and Chest X- ray and a hierarchical relationship among them. In Figure 3 a simple formalism is used to 
show how it is possible to specify the entity "Diagnostic Examination" starting from the MCP (the metavariables 
are shown in bold type, while the MEdical Concept Prototype variables are underlined). The figure does 
not include the operations defined from time to time for the MICs and MIEs. MIC Diagnostic examination 
OF MCP life cycle={time in which the need for a datum arose, time of request, expected time for the execution, 
time of real execution, time of first "on line" gross evaluation, foreseen time for the reporting of 
the results, time of report writing, time of report sending, time of reading of the report by the physician, 
time in which datum looses clinical interest}; type; format;  rendering; tool; performing operator 
= {physician}; user; codin~ system; code; measure unit: admissible values:  END; Figure 3: A simple 
formalism specifying the entity "Diagnostic Examination" starting from the MCP In the definition of the 
Medical Information Category above it is possible to note how not all metavariables have been assigned. 
In the subsequent definition, "X-ray Examination" is still a MIC defined starting from "Diagnostic Examination" 
(the types assigned to the metavariables "Life Cycle" and "Performing Operator" remain defined), for 
which it is also possible to define the metavariables "Tool" (teleradiograph) and "User" (physician), 
to limit the metavariable "Performing Operator" (Radiologist), the variable "Coding System" (ACR), and 
which has not "units of measurement" or constraints on "Admissible Values" (see Figure 4). Figure 5 shows 
how it is possible to specify the concept Chest X-ray Examination beginning from X-ray Examination. A 
Standard Chest X-ray must be considered as an entity -a sequence of images and an attached report describing 
them. It must be certified by a specialist radiologist, but may be used by a variety of specialists (surgeons, 
clinicians etc) or General Practitioners, though not by nurses. The type of tool which produces this 
entity is the teleradiograph. Chronologically speaking, it is possible to define various states (from 
the moment of the request) through which the entity passes prior to begin definitively stored in a historical 
archive. MIC X-ray examination OF Diagnostic examination life cycle = {time in which the need for a datum 
arose, time of request, expected time for the execution, time of real execution, time of first "on line" 
gross evaluation, foreseen time for the reporting of the results, time of report writing, time of report 
sending, time of reading of the report by the physician, time in which datum looses clinical interest}; 
type; format;  rendering; tool = { teleradiograph } ;  performing operator = {radiologist}; user = 
{physician}; codin~ system = ACR; code: measure unit = {no}~ admissible values = {no}; END; Figure 4: 
The definition of a M1C MIE X-ray examination of the chest OF X-ray examination life cycle = {time in 
which the need for a datum arose, time of request, expected time for the execution, time of real execution, 
time of first "on line" gross evaluation, foreseen time for the reporting of the results, time of report 
writing, time of report sending, time of reading of the report by the physician, time in which datum 
looses clinical interest}; type = {hypermedia class}; format = {typeFormat9}; rendering = {typeRendering 
16} ; tool = { teleradiograph };  performing operator = {radiologist}; user = {physician}; codin~ system 
= ACR; code = 125.56.32; measure unit = {no}; admissible values = {no};  END; Figure 5: The definition 
of a MIE TypeFormat9 and typeRendering 16 are also types for, respectively, memorizing and rendering 
information. The example also shows how all the metavariables are instanced in the MIE. Once he/she has 
constructed the entity hierarchy, the physician has defined the pattern of his/her patient folder. The 
process of entity specification represented in the patient folder allows us to specify metavariables 
completely and hence to represent classes exclusively with variables and no longer with metavariables. 
The subsequent phase is represented by the instancing of the medical folders of patients, specifying 
the single facts about each one of them. The facts are the objects which constitute the patient's medical 
folder. Figure 6 shows how it is possible to instance the concept "Chest X-ray Examination". FACT X-ray 
examination of the chest of J.S. of 22/I !/93 OF X-ray examination of the chest tim~ in which the need 
for a datum pr0~;Â¢ =12/11/93; time of renuest =14/tl/93; expected time for the execuliioq =22/I 1/93; 
time of re~l execution =22/! !/93; tim~ of first "on line" ero~ eval~10tion =22/11/93; forÂ¢~e~n lime 
for the reporting of the result~ =24/1 i193; I~imÂ¢ of reoort writing, time of reoort sending =24/11/93; 
I~imÂ¢ of readin~ of the reoort bv the ohvsician =24/I 1/93; time in which datum 190se~ clinical interÂ¢~l~ 
=22/1/94; hypcrmedia class = instance n. 4356 (object identity); typeFormat9 = coordinates in memory; 
typeRcndering 16 = coordinates on video; teleradio~raoh= Siemens AS l, GE X23; radiololzist = Drudi Mario; 
ohvsician = Consorti Fabrizio; coding system = ACR; Â¢od~ = 125.56.32;  END; Figure 6: The definition 
of a fact (instance) 5. THE IMPLEMENTATION OF THE SYSTEM Starting from the abstract cathegorization 
of the clinical data, a prototype has been implemented. Such a prototype allows the physicians to describe 
the clinical data which form his/her patient folder model. This description is used by the system in 
order to build a patient folder according to the user requirements. The name of this prototype is CADMIO 
(Computer Aided Design of Medical Information Objects) and it has two main features. It gives the user 
the capability of defining his/her own patient folder model, by specifying which information belong to 
the patient folder and how they have to be structured. This feature is useful to the user in organising 
those clinical data view he/she mostly needs. The second feature is the dynamic management of the interface 
that, in the consulting phase and at user's request, makes the him/her able to escape from the rigid 
structure given to the information in the physician's patient folder model definition. In fact, during 
the data input/output, it is possible that the user doesn't want to use the clinical data views defined 
in the patient folder model. If that is the case, the system sets up dynamically the new clinical data 
views required from the information selected by the user and the recognition of the user's needs. 5.1 
The Architecture Physicians do not always share the same concepts in managing information on their patients. 
Whereas some parts of a patient folder are more constant (sections like "personal data" and "present 
history"), other parts strongly depend on the physicians' specific interest and specialty. The tool that 
we describe in this paragraph allows medical users to choose the concepts to be present in their target 
application starting from a default configuration. It generates a customized patient folder management 
system by means of a friendly interface and without the need of a programming language. The system automatically 
created can be effectively employed for reporting and storing clinical cases. It will be always possible 
to modify its structure according to subsequent needs. The tool supports multimediality, managing texts 
and images in an integrated way. The impact that such an integration may achieve on the users is not 
to be stressed here. We plan to incorporate bin-signals and voice annotation in future releases. Object-ori6nted 
design allows to encapsulate behavioral features into classes of objects and propagating them by means 
of the inheritance mechanism (e.g.: from "endoscopic exam" to "duodenoscopy"). This capability is exploited 
in the interface management, with respect to data presentation and manipulation requirements. The overall 
architecture of the CADMIO system is composed by the following five modules: A) patient folder designer; 
B) multimedia patient folder manager; C) presentation manager; D) user interface; E) user-models manager. 
Three of these modules (A, C, D) are relevant in order to show how the system allows the physician to 
model his/her view on clinical data and how he/she set up his/her patient folder. The patient folder 
designer allows the definition of the patient folder information's organisation, according to the requirements 
specified by one or more physician; moreover it allows to describe each of the informational contents 
of a patient folder. This definition process starts from the MCP (the only class initially available). 
During the definition process, the user uses the window displayed in Figure 7 in order to specify the 
hierarchy and the characteristics of the concepts of the patient folder. Figure 7: The patient folder 
designer interface Hence, the user can define his/her own patient folder model without being constrained 
nor to a certain kind of pre-defined interaction, nor to a pre-defined interface, nor to an interface 
modifiable only just before an interaction session is to be started. Being that medical data can be of 
different kinds, that they can be used to achieve different goals and, finally, they can be organised 
to constitute more than one patient folder model, depending on the context (i.e. department, ambulatory, 
administration...), the patient folder designer was designed to provide the physician with a tool capable 
of describing every significant characteristic of the medical data together with the organisation of 
the patient folder information. The interface of the patient folder designer is extremely user- friendly. 
Only few days of training were required for the physicians who experimented the tool. The presentation 
manager is the heart of the system. In fact, it determines the access to the patient folder contents 
having 55  as inputs the output that originates from the user's queries through the interface module, 
and possibly the information originated from the user-modelling module (a module which capture objectives 
of the user in order to adapt the interation of the system). Accordingly to the user's requirements and 
to the information acquired through the user-modelling module, the dialogue management module decides 
the information the interface has to show to the user. The user interface defines, starting with the 
specifications provided by the dialogue management module, the human- computer interface that will be 
likely used by the physician to acquire and visualise the contents of a patient folder. This definition 
is made up dynamically, i.e. the system creates run-time the windows needed to show the user's required 
information. In Figure 8 and in Figure 9 two'windows are shown created by the system during a session. 
These windows present a part in which the patient data are shown and a part which allows to the user 
to browse other information contained in the patient folder. Figure 8: A sample window created dynamically 
by the system during consultation Figure 9: A sample window showing the hypermedia features of the system 
The design and the development of a system capable of dynamically defining the human-computer interface, 
have required the analysis of the different possible data formats of a patient folder (i.e. text, images...), 
and the individuation of those objects involved in the constructive process. As a result it was found 
that data in a patient folder can be represented either by means of text, or images , or values (numeric 
and / or alpha-numeric values); timely, those different data formats can be joined together into a more 
complex structure, e.g. the same data could be stored into a patient folder either as a text or image. 
The current prototype allows the management of six different objeet-classes (i.e. alpha-numeric String; 
Image; Text; Value; Hypermedia; Hypertext; and Multimedia), each one associated to the corresponding 
data format. Each of these objects is created run-time by the system whenever it is necessary to manage 
the data related to the involved object- class. 6. CONCLUSIONS In this work we started by analyzing the 
clinical data and by the individualization of the different uses of the clinical data in order to define 
a model which allows a physician to describe the structure of the information and the concepts which 
appear in the patient folder. By means of this work we defined a modality to design and to construct 
a patient folder, implemented in the CADMIO system. The tool runs on Macintosh platform and has been 
developed using the PrographÂ® programming environment. CADMIO system has been used in order to implement 
two different medical folders; the first one at the IV Semeiotica Chirurgica, the second one at the IV 
Clinica Chirurgica of the Policlinico 'Umberto I'. The choice of the two pilots originates from the need 
of verifying the capability of the system to adapt itself to different clinical environments and to exchange 
information between different departments. After some initial difficulties in understanding terms and 
methods to which they are not used, the involved physicians agreed that the proposed way to represent 
medical information was expressive and useful, mainly because it let them free to define the structure 
of their own database in a rather simple way. Differences emerged between the more experienced and the 
more naive users. While the first ones tended to implement more abstract hierarchies, with more levels, 
the latter ones tended to build simpler trees, in which Categories coupled the conventional sections 
of a medical record. After having modeled the clinical data we are modelling the clinical organization, 
the patient administration and the clinical processes in order to manage the synchronization of the various 
activities of the different departments REFERENCES <RefA>[1] Weed LL. Medical records that guide and teach. 
New England Journal of Medicine. 1968;12:593-600, 652- 657. [2] Weed LL. The Problem-Oriented Record 
as a basic tool in medical eductions, patient care and clinical research. Ann Clin Res, 1971:131- 134. 
[31 Aranda JM. The problem-oriented medical records: Experiences in a community hospital. Journal of 
the American Medical Association 1974;229:549-551. [4] Assimacopoulos A, Revillard C, Hermann H, et al. 
, An electronic notebook for problem oriented patient progress notes: testing a concept. In: Barber B, 
Qin D, Wagner G ed. Proc MEDINFO 89. Amsterdam: North- Holland, 1989:813-817. [5] Acheson HWK. The Clinical 
Record as an Aid to Continuing Education in General Practice. A Medical Self- Audit British Journal of 
Medical Education, 1972;7:6-26. [6] Stead WW, Borden R, McNulty P, Sitting DF. Building an Information 
Management Infrastructure in the 90st The Vanderbilt Experiment. In: Safran C, ed. Proc Seventeenth Annual 
Symposium on Computer Applications i~ Medical Care. New York: MacGraw-Hill, 1993:534-538 [71 Heathfield 
HA, Kirby J, PEN&#38;PAD (Elderly Care): Designing a Patient Record System for Elderly Care. In: "Safran 
C, ed. Proceedings Seventeenth Symposium on Computer Applications in Medical Care, New York: McGraw-Hill, 
1993: 129-133. [8] Ricci FL, Pisanelli DM, Ferri F, Consort; F. Modeling the Structural and Behavioural 
Features of Medical Concepts: A Tool for Generating Multimedia Patient Folders, In Barahona P, Veloso 
M and Brayant J ed. Proc. of Medical Informatics Europe 94, Berlin; Springer Verlag, 1994:470-474. [91 
Van der Lej J, van der Does E, Manintveld AJ. Critiquing Physicians Decision making using Data from automated 
Medical records. In Proc Fourth Annual Symposium on Computer Applications in Medical Care. New York: 
MacGraw-Hill, 1979:559-563. [10| Evans RS, Classen DC, Stevens LE et al. Hospital Information System 
To Assess The Effects Of Adverse Drug Events. In Clayton PD ed. Proc Seventeenth Annual Synzposium on 
Computer Applications in Medical Care New York: MacGraw-Hill. 1993:16 !- 165 [I I] Rector AL , Helping 
with a humanly impossible task: integrating knowledge based system into clinical care. In: Hanmu J, Seppo 
Led. Proc. SCA1'89. Tampere: Research Institute for Information Tecnlogy. 1989:560-572. [12] Rector AL, 
Nowlan WA, Kay S, Goble CA, Howkins TJ, The Foundations of Computerized of the Medical Folders. Methods 
of hl.fi~rmation in Medicine, 1992;30:179-186. 1131 Scherrer JR, Baud RH, Hochstrasser D, Osman R. An 
integrated hospital information system in general. MD Computing, 1990;7:253-61. [14] Scherrer JR. , Nouvelles 
architectures destindes h des rdseaux d'ordinateurs hospitaliers ouvrant le monde mddical h plus de facilitds 
de communications de tous ordres. Schweizerische medizinische Wochenschrift. 1991 ;49:204-216. [15] Roger 
France FH, Santucci G ed. Perspectives of Information Processing in Medical Application, Berlin, Springer-Verlag, 
1991. [16] de Bliek R, Friedman CP, Wildemuth BM et al. Database Access and Problem Solving in the Basic 
Sciences. In Clayton PD ed. Proc. Seventeenth Annttal Symposium on Computer Applications in Medical Care. 
New York: MacGraw-Hill. 1993:678-682 [17] Barnet GO, Winickoff R, Dorsey JL, Morgan MM and Lurie RS.Quality 
assurance through automated monitoring and concurrent feedback using a computer-based medical monitoring 
system. Medical care 1978;16:962-970. [18] Whiting-O'Keefe QE, Simborg DW, Epstein WV, Warger A. A 
computerized summary medical record can provide more infolrmation than the standard medical record. JAMA 
1985;254:1185-1192.  [191 Jean FC, Thelliez T, Mascart J J, Degoulet P, "Object- oriented information 
system in the HELIOS medical software engineering environment", Proceedings 16th Symposium on Computer 
Applications in Medical Care, New York, McGraw-Hill, 1992. [201 Dolin RH, "A High-Level Object-Oriented 
Model for Representing Relationships in an Electronic Medical Record", Proceedings 18th Symposium on 
Computer Applications in Medical Care, Philadelphia, Hanley &#38; Belfus, 1994. [211 Kuma H, Tsuchiya 
Y, "Database Access Method for Autonomous Distributed Total Hospital Information System and Its Object-Oriented 
Design", Proceedings MEDINFO 95, Amsterdam, North-Holland, 1995. [22] Graeber S,"Object-Oriented Modeling 
Of Hospital Information Systems", Proceedings MEDINFO 95, Amsterdam, North-Holland, 1995. [23] National 
Health Service Information Management Centre, The Common Basic Specification, London, Her Majesty Stationery 
Office, 1990. [24] Lou Y, Ozsoyoglu M. LLO: An Object-Oriented Deductive Language with Methods and Method 
Inheritance. SIGMOD Record, 1991;20:198-207. [25] Consort; F., Ferri F., Gargiulo A., Di Paola M., Passariello 
R., Pisanelli D.M., Ricci F.L., Zobel B., "Specification of the Medical Requirements", Project Report 
MILORD A.2, 1992. [26] Kim W. Object-Oriented Databases: Definition and Research Directions. IEEE Transaction 
on Knowledge and Data Engineering 1990;2:327-341.</RefA>  
			
