
 Permission to make digital or hard copies of part or all of this work or personal or classroom use is 
granted without fee provided that copies are not made or distributed for profit or commercial advantage 
and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, 
to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee.&#38;#169; 
1973 ACM 0-12345-678-9 $5.00 ANALYSIS OF A SIMPLE ALGQRITHM FOR GLOBAL DATA FLOW PROBLEMS? by 14atkhew 
S. Hecht Jeffrey D. Unman Princeton University Princeton, New Jersey 08540 Abstract There is an ordering 
of the nodes of a flow graph G which topoloqically sorts the dominance relation and can be found in O(edges) 
steps. This ordering is the re­verse of the order in which a node is last visited while growing any depth-first 
span­ning tree of G. Moreover, if G is reduc­ible, then this ordering topologically sorts the dag of 
Go Thus, for a reduc­ible flow graph (rfg) there is a simple algorithm to compute the dominators of each 
node in O(edges) bit vector steps. The main result of this paper relates two parameters of an rfg. If 
G is reduc­ible, d is the largest number of back edges found in any cycle-free path in G, and k is the 
length of the interval de­rived sequence of G, then k~d. From this result it follows that there is a 
very simple bit propagation algorithm (indeed, the obvious one) which also uses the above ordering, and 
is at least as good as the interval algorithm for solving all known global data flow problems such as 
avail­able expressions and live variables. Key words and Phrases: code optimi­zation, flow graph, reducibility, 
interval analysis, dominance, depth-first spanning tree, global data flow analysis, available expressions, 
live variables. I. Introduction when analyzing computer programs for code improvement [A1] , there is 
a class of problems, each of which can be solved in ? This work was supported by NSF grant GJ-1052. 
essentially the same manner. These prob­ lems, called global data flow analysis problems, involve the 
local collection of information which is distributed throughout the program. Some examples of global 
flow analysis problems are available expres­ sions of [c] and [Ul] , live variables [Kc] , reaching 
definitions of [A2] and [A3], and very busy variables [S]. There are several general algorithms to 
solve such problems. The interval approach ([A2], [A3], [AC], [C], [Ke], [S] and [AU]) collects infor­mation 
by partitioning the flow graph of the program into subgraphs called intervals, replacing each interval 
by a single node containing the local information within that interval, and continuing to define such 
interval partitions until the graph becomes a single node itself, at which time global information is 
propagated locally by reversing the reduction process. Another approach ([VI ? ,[U1] and [Kil propagates 
information in an obvious manner until all the required information is collected; that is, until the 
process con­verges. We shall show that this second approach (with a suitable node ordering) is no worse 
than the interval approach! Prior to presenting the main result and the algorithm, we review part of 
the theory of reducible flow graphs. T In 1961 v.A. vyssotsky [v] implemented this kind of flow analysis 
(and presumably the obvious algorithm) in a Bell Labora­tories 7090 FORTRAN II compiler--for strict­ly 
diagnostic purposes. II. Background A flow graph is a triple G= (N,E,nO), where: (a) N is a finite set 
of nodes. (b) E is a subset of NxN called the =. The edge (x,y) enters node y and leaves node x. We say 
that x is a prede­cessor of y, and y is a successor of x. A ~ from xl to \ is a sequence of nodes (x 
,. . . ,~) such that (Xi,Xi+l) is 1 in E for l~i<k. The path lenqth of (xl, . ...\) isk-1. Ifxl=\, the 
path is a cycle. (c) Node nO in N is the initial node. There is a path from nO to every node. INTERVALS 
Let G be a flow graph and h a node of G. The interval with header h, denotedby IJhJ, is defined as follows: 
(a) Place h in I(h). (b) If m is a node not yet in I(h), m is not the initial node, and all edges entering 
m leave nodes in I(h) , add m to I (h) . (c) Repeat step (b) until no more nodes can be-added t; I(h). 
 It should be observed that although m in (b) above may not be well-defined, I(h) does not depend on 
the order in which candi­dates for m are chosen. A candidate at one iteration of (b) will, if it is not 
chosen, still be a candidate at the next iteration. It is well known that a flow graph can be uniquely 
partitioned into disjoint in­tervals, and that this process takes time proportional to the number of 
edges in the flow graph [A2]. If G is a flow graph, then the de­rived flow qraph of G, denoted by ~, 
is defined as follows: (a) The nodes of I(G) are the inter­vals of G. (b) There is an edge from the 
node representing interval J to that representi­ng K if there is any edge from a node in J to the header 
of K, and J#K. (c) The initial node of I(G) is I(nO) .  The sequence G=GO,G1,. ..,Gk is called the 
derived sequence for G if Gi-l-l =I(Gi), k-1 #Gk, and I(Gk) =Gk. Gk is called the limit flow graph of 
G. A flow graph G is called reducible (an rfg) if and only if its limit flow graph is a single node 
with no edge (hence­ forth called the trivial flow qraph). Other­wise, it is called nonreducible. T~ 
AND T2 Let G= (N,E,nO) be a flow graph and let (w,w) be an edge of G. Transformation T1 is removal of 
this edge. Let y not be the initial node and have a single predecessor, x. Transformation ~ ~s the replacement 
of x, y, and (x,y) by a sxngle node z. Predecessors of x become predecessors of z. Successors of x or 
y become successors of z. There is an edge (zjz) if and only if there was formerly an edge (y,x) or (x,x). 
(Whenever T2 is ap­plied as described here, we say that x consumes y.) There are two results from [HeUl] 
which interest us. First, if T1 and T2 are applied to a flow graph until no longer poseible, then a unique 
flow graph results, independent of the sequence of applications of T~ and T2 actually chosen. Second, 
a flow graph is reducible by intervals if and only if repeated application of T1 and T2 yields the trivial 
flow graph. DOMINANCE AND REGIONS If x and y are two distinct nodes ina flow graph G, then x dominates 
y if every path in G from its initial node to y con­tains x ([P] and [LM]). Let G= (N,E,nO) be a flow 
graph, let N1~N, let El~E, and let m be in N1. We say R= (N1,El,m) is a reqion of G with header m if 
in every path xl,...;%, where X1=nO and ~ is inNl, there is some i <k such that (a) xi=m; and (b) Xi+l 
,...,~ are inN1: and (c) (xi,xi+l), (xi+1,xi+2) ,...,  (\_l,<) are in El That is, access to every node 
in the region is through the header only. As we proceed to apply T1 and T2 to a flow graph, each edge 
of an intermediate graph represents a set of edges and each node represents a set of nodes and edges 
in a natural way. We say that each node and edge in the original flow graph represents itself. If T~ 
is applied to node w with edge (w,w), then the resulting node represents what node w and edge (w,w) represented. 
If T2 is applied to x and y, with edge (xjy) eliminated, then the resulting node z rePresents what X, 
y, and (x,y) represented. In addition, if two edges (x,u) and (y,u) are replaced by a single edge (z,u) 
, then (z,u) represents what (x,u) and (Y,u) represented. The two lemmas which follow appear in [U2] 
. Lemma 1: (a) Let z be a node con­structed during the reduction of some flow graph G. If z represents 
edge (x,y) of G, then x and y are represented by z. (b) Let w and x be (not necessarily distinct) nodes 
constructed during the re­duction of G, and let e be the edge con­structed from w to x. If e represents 
 (Y,z) of G, then y is represented by w and Z by X. (c) In any graph formed while reduc­ing G, all nodes 
and edges represent dis­joint sets of objects (nodes and edges).  Lemma 2: Let G= (N,E,nO) be an rf9~ 
and let NICN and E CE be a set of nodes l and edges represented by a single node at some stage of the 
reduction of G. Then there is a (unique) node m in N1 such that (Nl,E1,m) is a region of G with header 
m. PARSES AND BACKWARD EDGES Since T1 and T2 may be applied to an rfg in different sequences, it becomes 
necessary to discuss specific sequencesof applications of T1 and T2. Informally, a parse of an rfg is 
a list of the reduc­tions made (TI or T2) and the regions to which they apply. Formally, a parse n of 
an rfg G= (N,E,nO) is a sequence of the form (T1,u,v,S) or (T2,u,v,w,S), where u, v, and w are names 
of nodes and S is a set of edges. We define the parse of an rfg re­cursively as follows: (a) A single 
node with no edge has only the empty sequence as its parse. (b) If G (which may not be the orig­inal 
flow graph in a sequence of reductions) is reduced to G by an application of T1 to node u, and the resulting 
node is named v in G , then (T1,u,v,S) followed by a parse of G is a parse of G , where S is the set 
of edges represented by the edge (u,u) elimi­nated from G . (c) If G is reduced to G by an ap­plication 
of T2 to nodes u and v (with u consuming v) , and the resulting node is called w, then (T2,u,v,w,S) followed 
by a parse of G is a parse of G , where S is the set of edges represented by the edge (u,v) in G . (d) 
In both (b) and (c) above, repre­sentation in G carries over to G . That is, whatever an object represents 
i-n G is also represented by that object in G , ex­cept for those changes in representation caused by 
the particular transformation  (Tl or T2) currently being applied. Let Gbe an rfg and let v be a parse 
of G. We say that an edge of G is a back­ward edqe with respect to n if it appears in set S of an entry 
(T1,u,v,S) of n and a forward edqe otherwise. The next two results appear in [HeU2]. Lemma 3: The backward 
edges of an rfg are unique. Lemma 4: Edge (x,y) is a backward edge of an rfg if and only if x=y or y 
dominates x. DEPTH-FIRST SPANNING TREES A depth-first spanning tree (DFST) of a flow graph G is a directed, 
rooted, ordered spanning tree grown by Algorithm A [Tl] . Alqorithm A: DFST of a flow graph. Flow graph 
G with n nodes. -: ~: (1) DFST of G. (2) A num­bering of the nodes from 1 to n (i.e., ENDORSER , for 
each node m) indicating the order in which each node was last visited. Method: Al. The root of the DFST 
is the initial node of G. Let this node be the node m which is visited first in StepA2. i+l. A2 . [Visit 
node m.] If node m has a suc­~ssor x not already on the DFST, select x as the right-most son of m found 
so far in the spanning tree. If this step is success­full, node x becomes the node m to be visited next 
by repeating Step A2. If there is no such x, go to Step A3. ~: Let m be the node being visited ENDORSER 
e i. i-i + 1. If m is the root, then halt. Otherwise, climb down the DFSTone node toward the root and 
visit this node again by returning to Step A2. D If (u,v) is an edge in a DFST, then u is the father 
of v and v is the son of u. The ancestor and descendant relations are _-- the transitive closures of 
the father and son relations. Let G= (N,E,nO) be a flow graph and let T= (N,E ) be a DFST of G. The 
edges in E-E fall into three classes (a) Edges which run from anc~stors to descendants we call forward 
edqes.? (b) Edges which run from descendants to ancestors or from a node to itself we call back edges. 
 (c) Edges which run between nodes which are unrelated by the ancestor-de­scendant relation we call cross 
edges.  The notion of to the right ina DFST has only been defined for nodes with the same father. We 
extend it by saying that if x is to the right of y, then all of x s descendants are to the right of all 
of y s descendants. Thus, if (u,v) is a cross edge of a DFST, then u is to the right ofv. Lemma 5: [HeU2] 
The backward edges of an rfg G are exactly the back edges of any DFST for G. III. Node Ordering and aDominatorAlqorithm 
Let Tbe aDFST of a flow graph G with n nodes. We consider two orderings of the nodes of G. (a) ENDORDER--as 
defined in Algo­rithm A. (b) rENDORDER--where rENDORDER(x) = n+l-ENDORDER(x) , for each node x. ( rEND-ORDER 
is the reverse of ENDORSER. )  We define the daq of an rfq G to be G minus all of its back edges [HeU2]. 
T Do not confuse this definition of for­ward edges in a DFST with the previous one for edges in an rfg. 
They are not necessarily the same, and context should distinguish which one is meant. Lemma 6: The partial 
order definedby the dag of an rfg is a subset of the total order defined by rENDORDER. Proof: Let G be 
an rfg, let G be the dag of G, and let T be any DFST of G. It suffices to show that if there is a path 
in G from the initial node to node y which includes node x, with x#y, then rENDORDER(x) frENDORDER(y). 
Suppose, in contradiction, that there are two distinct nodes x and y such that there is a path in G 
from the initial node to y which includes x, and rEND- ORDER(X) >rENDORDER(y). Then, END- ORDER(X) KENDORDER(Y). 
That is, Y is last visited after x is last visited while grow­ ing T. Either y is an ancestor of x, 
or y is to the right of xin T. If yis anan­cestor of x, then G contains a cycle. This is impossible. 
Consequently, y is to the right of x. The path from x to y must go through a common ancestor of x and 
y [Tl], so there would again be a cycle in G . u If i is a predecessor of j in an rfg, then either (ijj) 
is a back edge or a for­ward edge of an rfg. If it is a back edge, then either j dominates i or i=j (Lemma 
4) , and thus, i cannot dominate j. If (i,j) is a forward edge of an rfg, then rENDORD­ER(i) KrENDORDER(j). 
This is exactly the property of rENDORDER which Algorithm B uses. Alqorithm B: Computes a set DOM(m) 
, the dominators of m, for each node m. Reducible flow graph G= (N,E,=~Nl=n. The nodes are numbered from 
1 to n by rENDORDER according to some DFST for G. Refer to each node by its number. output : Sets DOM(j) 
l~j~n, where i is in DOM(j) if and only if I dominates j. Method: B1. Initia~~y, IX3M(1) 1#1, and DOM(j) 
+N~r j#l. B2. For each node j =2,3,. ..,n in turn, ~M(j) is replaced by the intersection of [(k) lJDOM(k)] 
over all predecessors k of j such that k <j. O Theorem 1: Algorithm B is correct. That is, after Algorithm 
B terminates, i is in @M(j) if and only if i dominates j. Proof: Let G be an rfg. We proceed by induction 
on j. Inductive Hypothesis: After process­ing node j, i is in DOM(j) if and only ifi dominates j. Basis: 
(j=l). Trivially trUe. Xnduction Step: (j>l). Assume the inductive hypothesis for all k <j, and con­sider 
the case for j. If i dominates j, then surely i domi­ nates every predecessor of j which is not i itself. 
Thus, i is in DOM(j). Now, suppose i is in ~M(j), but i does not dominate j. Then there is a cycle­free 
path from the initial node to j which does not pass through i. Let k be the node on the path immediately 
before j. By Lemma 4, (k,j) cannot be a back edge, elSe j would dominate k or k=j, and the path would 
have a cycle. Thus, (k,j) is a for­ ward edge, and rENDORDER(k) KrENDORDER(j). As i#k, and i does not 
dominate k, we have by the inductive hypothesis that i is not in (k) UDOM(k) , and hence, not in DoM(j). 
O If we implement the DOM sets by bit vectors, then+Algorithm B requires O(e) bit vector steps. This 
follows because in a flow graph with e edges at most e bit vec­tor intersections are computed in Step 
B2. Also, the node ordering (rENDORDER) assum­ed as input can be computed in O(e) steps [Tl] . In [AU] 
, Aho and Unman present an O(ne) step algorithm to compute dominators. Purdom and Moore s algorithm [PM] 
has the same time bound. Allen and Cocke [AC] suggest breadth­first ordering of then odes to compute 
dominators of an arbitrary graph, but their algorithm (which is similar to Algo­rithm B) may require 
more than one pass through the nodes. Earnest et al [EBA] present an algori­thm which establishes an 
interval ordering (similar to rENDORDER, but takes more than O(e) steps. Aho, Hopcroft and Unman [AHU] 
have an O(e loge) step algorithm to find direct dominators i.n an rfg. In [T2], Tarjan presents an algorithm 
for determini­ng direct dominators i.n O(e +n logn) steps. T we shall always distinguish between steps 
and bit vector steps when discuss­ing complexity. This distinction is important. Before leaving this 
section, we prove another result about rENDORDER. Lemma 7: If x dominates y, the rENDORDER(x) < rENDORDER(y). 
Proof: Let G be a flow graph in which x dominates y, and let T be any DFST of G. Since any path from 
the initial node to y must include x, x is reached before y while growing T. Thus, x is on the backward 
path in T from y to the initial node. That is, ENDORDER(Y) ZENDORDER(X) and rENDORDER(x) < rENDORDER(y). 
~ Note that Lemma 7 is not just a corol­lary of Lemma 6. Lemma 7 applies to non­reducible as well as 
reducible flow graphs. IV. The Main ReSUlt Following several lemmas, we establish the main result of 
this paper. Definition: The depth of an rfg G is the largest number of back edges found in any cycle-free 
path in G. Definition: Let G be a flow graph, let I(G) be the derived flow graph of G, and let G be G 
minus all of its self-loops, where a self-loop is an edge from a node to itself. We define the lenqth 
k of the de­ rived sequence of G to be O if G is the trivial flow graph, otherwise that k#O such that 
(a) GO=G (b) Gi+l= I(Gi), i~o, (c) Gk is the limit flow graph of G, and (d) Gk#Gk_l. Lemma 8: Let G 
be an rfg and let G be G at some intermediate stage of its re­duction by T1 and T2. If there is a path 
from node u to node v in G , then there exist nodes w and x in G such that w and x are respectively represented 
by nodes u and v in G and there is a path from w to x inG. Proof: Let n be any parse of G which yields 
G at some intermediate stage. The lemma is an easy induction on the number of steps of n taken to reach 
G . I J Lemma 9: Let G be an rfg. Nodes en­tered by back edges in G head intervals in G. Proof: The lemma 
is obvious for self­loops. so, let (m,h) be a back edge in G , and suppose m$h. Thus, h dommates m by 
Lemma 4. If h is the initial node, the lemma follows. NOW consider where h is not the initial node. Suppose, 
in contradiction, that h does not head an interval in G. Since h must be in some interval, let it be 
in interval K with header k. First, we note that every interval is also a region by Lemma 2. If m is 
not in K, then K is not a region because conditions (b) and (c) of the definition of region are violated. 
Thu S , m is in K. As (m,h) is an edge, m must be added to K before h is. But then there is a path from 
the initial node to k and thence to m which does not pass through h. This would contradict the assumption 
that h dominates m. o Lemma 10: If u dominates v in an rfg G> u heads an interval in G, J is the inter­val 
containing v, and I(u) #J, then I(u) dominates J in I(G). Proof: Neither T1 nor T2 creates any new paths 
between nodes. Thu S , if I(u) did not dominate J, then u would not dominate v. o The following lemma 
is essential for theorem which follows. Lemma 11: Let d be the depth of an rfg G, let d be the depth 
of I(G), and sup­pose G+I(G). Ifd>d , then d=d +1. Proof: Assume all the hypotheses and let P be any 
cycle-free path in G from pl to pk containing d back edges. We shall think of P as an ordered sequence 
of edges p= ((P1,P2), (P2,P3), . . ..(Pl.Pk)k) ), where the j-th edge in P is (p.,p. Let -J ]+1) (Xi,Si) 
be the i-th back edge in P, l~i~d. That is, (Xl,sl) is the edge with the least m such that (pm,pm+l) 
is a back edge, and if the i-th back edge is (pn,pn+l) , then the (i+l)-st back edge is the edge with 
the least m>n such that (pm,pm+l) is a back edge. See Figure 1. Let S=(sil (Xi,Si ) is a back edge inP). 
SinCe P is cycle-free, each s in S is dis­tinct. Thus, lSl=d. Let So=pl. First we show that Si+l dominates 
s i for O~i~d-1. Pick your favorite Si+l from S. We know that s dominates Xi+l i+l because (Xi+l,Si+l 
) is a back edge (Lemma 4), and we know that there is a path Q from s i 06 o end . . . . d k &#38; 9 
d-1 ~ b b d #* xi+2 * b x.1 * * 2 : . PI begin x 1 Fiqure 1. A cycle-free path in an rfg from PI 
to pk containing d>O back edges. to x in P which does not pass through i+l s, Suppose, in contradiction, 
that s 1+1 i+l does not dominate si. Then, there is a path R from the initial node to Si not con­taining 
Si+l. But by concatenating paths R and Q we have a path to x not contain­ i+l ing s This contradicts 
the fact that i+l s i+l dominates Xi+l. Thus, Si+l dominates s ,. 1 Now we claim that all back edges 
in P, except the first one, are represented by themselves in I(G) and are back edges in I(G) . That is, 
an edge in G represented by an edge in I(G) still exists as an edge in I(G) , whereas an edge in G repre­sented 
by a node in I(G) does not. To show this, it suffices to show that in I(G) the node representing the 
interval J (con­taining s i+l) dominates, and is thus dis­ tinct from, the node representing interval 
K (containing Xi+l ), where O~i~d-1, and that the first back edge is represented by a node in I(G). Since 
P is cycle-free, it follows that the i-th and (i+l)-st back edges are dis­tinct and si#si+l. Thus by 
Lemma 9, Jand the interval L containing s< are distinct intervals of G. Furthermor&#38;, J dominates 
in I(G), because s i+l dominates Si i.n G (lemma 10). See Figure 2. back J Fiqure 2. Intervals J, K andL 
of Lemma 11. If K=L, then (Xi+l,Si+l) represents itself in I(G) because it is an inter­interval edge. 
AIso, it is a back edge in I(G) by Lemmas 10 and 4. Now suppose that K+L, that is, Xi+l is not in L. 
Certainly, K#J due to the forward path from Si to Xi+l in P. Thu S, J dominates K by Lemma 10. Hence, 
(x i+l ,s i+l) represents itself in I(G) be­ cause it is an inter-interval edge. Also , it is a back 
edge in I(G) by Lemma 4. Finally, if the first back edge repre­ sents itself in I(G) , then d =d, which 
contradicts the assumption d>d . n Theorem 2: (MAIN THEOREM) If G iS an rfg with depth d and derived 
sequence length k, then k~d. Proof: By induction on k. Basis: (k=O). G is the trivial flow graph. Thus, 
d=O. Hence, k>d. Induction Step: (k>O). Assume the inductive hypothesis for k-1, and consider an rfg 
G with derived sequence of length k and depth d. Let d be the depth of I(G). Case 1: d>d . Thus, d=d 
+1 by Lemma 11. BY the inductive hypothesis, k-l~d . Thus, k-l~d-1, or k~d. Case 2: d=d . BY the inductive 
hy­pothe~-1 ~d . Thus, k~k-l~d =d, or k~d. Case 3: d<d . This case cannot occur because T1 and T2, in 
their transformation of G to I(G) , do not create paths between nodes in I(G) which did not already exist 
(Lemma 8). Hence, the back edges of I(G) are a subset of those of G. n The significance of Theorem 2 
is that, although the interval analysis algorithm must take about 2ke bit vector steps to solve a global 
flow analysis problem for an rfg with e edges [AU] , there exists an ob­vious bit propagation algorithm 
to solve such problems in about de bit vector steps. (We pick up the coefficient 2 in the inter­val approach 
because, in addition to reduc­ ing the rfg to a single node, known algo­ rithms ([A21, [A31, [AUI, [C],[SI 
and [Kel) reverse the interval process to propagate global information locally.) Figure 3 shows an rfg 
with k= 3 and d=l. Moreover, this rfg can be extended in an obvious way so that k is arbitrarily large, 
yet d remains 1. Thus, there may be a dramatic decrease in the time required to solve global data flow 
analysis problems using the simple bit propagation algorithm, when compared to the interval algorithm. 
In any event, the algorithm of [Ul] and [Ki] cannot be worse than interval analysis, and must be.regarded 
as superior for its slmpllclty. binary operator.) d Let .$:N+2 . If an expression r=A8B I G2=I(G1) G1=I(GO) 
o G3=I(G2) GO=G Fiqure 3. Flow graph G with d=l and k=3. v. Solution of Two Global Flow Analysis Problems 
AVAILABLE EXPRESSIONS (From [C] and [Ul].) An expression such as A+B is avail­ able at a point p in a 
flow graph if every sequence of branches which the program may take to p causes A+B to have been computed 
after the last computation of A or B. If we can determine the set of available ex­pressions at entrance 
to the nodes of a flow graph, then we know which expressions have already been computed prior to each 
node. Thus, we may be able to eliminate the redundant computation of some expres­sions within each node. 
Let d be the set of expressions com­puted in a flow graph G= (N,E,nO). 6 Let ~:N~2 . we interpret %(x) 
as the set of expressions which are killed in node x. Informally, expression AOB is killed if either 
A or B is defined within node x, (The symbol 0 indicates a generic is in A(x) , then we imagine that 
r is qenerated within node x, and that neither A nor B is subsequently defined. Let AEIN(x) and AEOUT(X), 
for each node x, be respectively the set of expres­sions available at entrance to and at exit from node 
x. The fundamental relationships which enable us to compute AEIN(x) for each node x are: ~. AEIN(nO) 
=0. ~. For x#nO, AEIN(x) is the inter­section of AEOUT(Y) over all predecessors y of x. ~. AEOUT(X) = 
[AEIN(x)-K(x)] ~~(x), for each node x. AE4 . Since AEI-3 do not necessarily have ~nique solution for 
AEIN(n), we want the largest solution. The algorithm which follows is a bit vector algorithm and similar 
to those in [Ul] and [Ki], except for the node ordering. We distinguish between sets and bit vectors 
by using AEIN for sets and AEin for bit vectors. Alqorithm C: Computes bit vectors AEin(m) for each 
node m. =: (1) F1OW graph G=(N,E,nO), INI =n. The nodes are numbered from 1 to n by reversing the time 
of last visit in a DFST of G (i.e., rENDORDER). Refer to each node by its number. (2) Bit vectors KILL(j) 
and GEN(j), l~j~n, where the i-th bit of KILL(j) (resp. GEN(j)) is 1 if and only if the i-th expression 
is in ~(j) (resp. ~(j)) . All bit vectors have length p, where p is the number of expressions. output 
: Bit vectors AEin(j), l~j~n. Method: Cl. Initially, AEin(j) +a~l l s, for 2~j~=, and AEin(l) +all 0 
s. C2 . Do Step C3 for j =1,2,. ..,n in order. % any bit changes for any j, repeat Step2. Otherwise, 
halt. C3 . Set AEin(j) equal to the bitwise prod­~t of [AEin(k) A lKILL(k)] VGEN(k) ,twhere T Here, the 
symbols A, vandl stand for the AND (bitwise product) , OR (bitwise sum) and NOT (bitwise complement) 
functions, respec­ .. tlvely. k ranges over all predecessors of node j.~ LIVE VARIABLES (From~e]. ) A 
path in a flow graph is called defi­ niton-clear with respect to a variable V i-f there is no definition 
of V on that path. A variable V is live at a point p in a flow graph if there is a definition-clear path 
for v from I? to a use of V. That is, V is live if its current value might be used before V is redefined. 
Having deter­ mined the set of live variables at exit from each node in a flow graph, we can use this 
information for (among other things) register allocation --we can determine when a value should be kept 
in a register be­ cause of a subsequent use. Let k be the set of variables occur­ring in a flow graph 
G= (N,E,nO). u Let ~:N-42 . (3(x), the clear of x, is the set of variables which are not de­fined in 
node x. u Let h:N-2 . b(x) is the set of variables which have exposed uses in node x, i.e., those variables 
with a definition­ clear path from the entry of node x to a use within node x. Let LVOUT(X) and LVIN(X) 
, for each node x, be the set of variables live at exit from and on entrance to node x. The fundamental 
relationships which enable us to compute LVOUT(X) for each node x are: LV1. For each exit node w in 
G (i.e., w has% successors), LVOUT(W) =@. ~. For x not an exit node, LVOUT(X) is the union of LVIN(y) 
over all successors y of x. LV3. LVIN(X) = [LVOUT(X) fI~(X)] ~h(X), for e% node x. LV4. Since LV1-3 
do not necessarily have a unique solution for LVOUT(X) , we want the smallest such solution. Let LVout 
be the bit vector for set LVOO. Alqorithm D: Computes bit vectors LVout(m) for each node m. (1) F~OW 
graph G= (N,E,nO),,Nl .- The nodes are numbered from 1 to n by the time of last visit in a DFST ofG (i.e., 
ENHY3RDER. Refer to each node by its number. (2) Bit vectors CLEAR(j) and XUSE(j), l~j~n, where the 
i-th bit of CLEAR(j) (resp. XUSE(j)) is I if and only if the i-th variable is in ~(j) (resp. b(j)). All 
bit vectors have length q, where q is the number of variables. QQ?2?E: Bit vectors LVout(j), l~j~n. Method: 
D1. Initially, LVout(j) all O s, for l~j~=. D2. Do Step D3 for j =~,2, . . ..n in order. ~ any bit changes 
for any j, repeat StepD2. Otherwise, halt. D3. Set LVout(j) equal to the bitwise sum ~ [LVout(k) A CLEAR(k)] 
VXUSE(k) , where k ranges over all successors of node j. H VI. Analysis The termination and correctness 
of Algorithms C and D follow directly from [Ul] and [Ki]. We focus on the complexity. Lemma 12: Any cycle-free 
path in an rfg G beginning with the initial node is monotonically increasing by rENDORDER. Proof: Any 
such path contains no back edges by the proof of Lemma 11, and, thus, is a path in the dag of G. rENDORDER 
topologically sorts the dag of G (Lemma 6). o Theorem 3: Step C2 of Algorithm C is executed at most d+2 
times for an rfg G. Proof: A O propagates from its point of origin --a kill or the initial node-­to the 
place where it is needed in d+l iterations if it must propagate along a path P of d back edges. It takes 
one iter­ation for a O to arrive at the tail of the first back edge of P. This follows since all edges 
to this point are forward or cross edges. The numbers along the path must be in increasing sequence by 
Lemma 12. After this point, it takes one iteration for a O to climb up each back edge in P to the tail 
of the next back edge, by the same argument. Hence, we need at most d+l iterations to propagate information 
plus one more to detect that there are no further changes. D Theorem 4: Step D2 of Algorithm D is executed 
at most d+2 times for an rfg G. Proof: A 1 indicating a use propa­gates backward along a cycle-free path 
to a 91ven point in d + 1 iterations if there are d back edges in the path from the point to the use. 
It takes one iteration for al to reach the head of the d-th back edge in [A2] F.E. Allen, control I?1ow 
Analysis, such a path. As in Theorem 3, we prove SIGPLAN Notices, Vol. 5, No. 7, this by noting that 
forward and cross 1-19, July 1970. PP. edges under ENDORDER go from higher to low­er numbered nodes. 
An additional iteration [A3] F,E. Allen, A Basis for Program enables us to reach the head of each suc-Optimization; 
~. IFIP Conf. ceeding back edge. rl 71, North Holland Publishing Co., Amsterdam, 1971. VII. Conclusions 
[AC] F.E. Allen and J. Cocke, Graph- There is an ordering of the nodes of Theoretic Constructs for Program 
a flow graph G which (i) topologically Control Flow Analysis, IBM Re­sorts the dominance relation of 
G, search Report RC 3923, T.J. Watson Research Center, Yorktown Heights,(ii) topologically sorts the 
daq of G N.Y. , JUIY 1972. if G is reducible, and (iii) can be found in O(e) steps. [c] J. Cocke, Global 
common subexpres­ sion Elimination, SIGPLAN Notices, As a direct consequence, we can compute vol. 5, 
No. 7, Pp. 20-24, Ju1y197Q the dominators of each node in a reducible flow graph in O(e) bit vector steps. 
[EBA] C.P. Earnest, K.G. Balke, and J. Anderson, Analysis of Graphs by Also, we have analyzed a simple 
bit Ordering of Nodes, JACM, Vol. 19, propagation approach for solving global No. 1, pp. 23-42, Jan. 
1972. data flow analysis problems which is simple to describe, understand, and program. This [HeU~] M.S. 
Hecht and J.D. Unman, F1ow approach requires at most (d+2)e bit vec-Graph Reducibility, SIAM J. tor steps, 
whereas the interval approach computin~, Vol. 1, No. 2, pp. 188­requires at most 2ke bit vector steps 
plus 202, June 1972. bookkeeping for intervals, where k and d, with k>d, are parameters of the rfg. [HeU2] 
M.S. Hecht and J.D. Unman, charac­ terizations of Reducible Flow Moreover, although node splitting Graphs, 
TR-118, Computer Science is necessary when using the interval ap-Laboratory, Electrical Eng. Dept., proach 
on non-reducible flow graphs, the Princeton Univ., Jan. 1973. simple bit propagation approach works on 
non-reducible flow graphs directly with no [HoU] J.E. Hopcroft and J.D. Unman, An such modification! 
n logn Algorithm for Detecting Re­ducible Graphs, Proc. 6th Annual *** Princeton Conf. on Information 
Sciences and Systems, pp. 119-122, References <RefA>March 197~ [AHU] A.V. Aho, J.E. Hopcroft and J.D. [Kc] 
K. Kennedy, A Global Flow Analysis U1 lman, On Finding Lowest Common Algorithm, International ~. Ancestors 
in Trees, Proc. 5th computer Math., vol. 3, pp. 5-15, Annual ACM Symposium on Theory of Dec. 1971. 
 Computinq, Austin, Texas, pp. 253­ 265, May 1973. [Ki] G.A. Kildall, Global Expression Optimization 
at Compile Time, in [AU] A.V. Aho and J.D. Unman, The this proceedings, Oct. 1973. Theorv of Parsing, 
Transla~n and Compiling: Vol. II -Compilinq, [LM] E.S. Lowry and C.W. Medlock, Ob-Prentice Hall, Englewood 
Cliffs, ject code Optimization, CACM, N.J., 1973. vol. 12, No. 1, pp. 13-22, Jan. 1969. [Al F.E. Allen, 
Program Optimization, [P R.T. Presser, Applications of .Annual Review Automatic Proqram- Boolean Matrices 
to the Analysis 5, Pergamon Press, New of Flow Diagrams, PrOc. Easternm> vol. York, 1969. Joint Computer 
Conf. , Spartan Books, New york~ PP. 133-~38> Dec. 1959. [ PM] P.W. Purdom and E.F. diate predominators 
Graph, CACM, VO~. PP. 777-778, August Moore, Imme­in a Directed 15, No. 8, 1972. [s] M. Schaefer, ~ of 
Global Flow  Prentice Hall, N.J., 1973. Mathematical Analysis, Englewood Theory to appear, cliffs, [T1-] 
R.E. Tarjan, Depth-First and Linear Graph Algorithms, ~. Computinq, Vol. ~, No. 146-160, June 1972. Search 
SIAM 2, pp. [T2] R.E. Tarjan, Finding Dominators in Directed Graphs, to appear in Proc. 7th Annual Princeton 
Conf. ~ Information Sciences and Sys­tems, March 1973. [T3] R.E. Tarjan, Reducibility, ACM SymP osium 
~, Austin, May 1973. Testing Flow Graph Proc. 5th Annual on Theory of Comput­ Texas, pp. ?%-107 , [Ul] 
J.D. U~lman, Fast Algorithms for the Elimination of Common Subex­pressions, TR-L06,, Computer Science 
Laboratory, Dept. of Elec­trical Eng., Princeton Univ. , March 1972. [U2] J.D. Unman, the Elimination 
pressions, on Switchinq E. 161-176, A Proc. . and ~. Fast Algorithm of Common Subex­13th Symposium Automata 
Theory, 1972. for [v] V.A. tion Vyssotsky, of June 7, private 1973. </RefA>conununica­ 
			
