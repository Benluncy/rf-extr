
 An Introductory Algorithm Teacher William G. Bulgren Rose M. Marra Gregory F. Wetzel Dept. of Computer 
Science University of Kansas Lawrence, Kansas 66045 ABSTRACT A non-machine specific design of an algorithm 
teacher is proposed. It is a programmed environ- ment to help students in a beginning computer science 
course learn problem solving skills. This paper provides an overview of the problem, a moti- vation and 
justification, followed by a brief de- scription of what the program should provide the student. i. 
Introduction An introductory course in computer science and problem solving is frequently a stumbling 
block in an undergraduate's curriculum. Some students don't have any interest in problem solving and 
would prefer an introduction to standard software pack- ages. They may even resent and resist the problem 
solving emphasis of the course. Many have an open attitude towards the subject matter but struggle with 
learning to use the machine or -and more im- portantly -the concepts of problem solving. It is this latter 
problem the paper addresses. After several years of teaching an introductory problem solving and programming 
course, it has become ap- parent that students are usually able to grasp the individual facts presented 
in class, but are often unable to bring them together to develop an algo- rithm -which is, after all, 
the main thrust of the course. This paper proposes a design of a concept called NAT, Novice's Algorithm 
Teacher, to help students enrolling in an introductory computer science course with problem solving. 
NAT provides an instructional environment to guide a student through the development orocess. The goals 
of this project are outlined below: i. To guide the student through the algorithmic development process. 
 2. To reinforce instruction on the syntax/ semantics of algorithm constructs.  3. To promote good documentation 
habits.  4. To promote good algorithm style.  Permission to copy without fee all or part of this material 
is granted provided that the copies are not made or distributed for direct commercial advantage, the 
ACM copyright notice and the title of the publication and its date appear, and notice is given that copying 
is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires 
a fee and/ or specific permission. &#38;#169;1987 ACM 0-89791-217-9/87/0002/0292 75Â¢ 5. To output, at 
the very least, a skeletal algo- rithm which students can use to check against their algorithm and fill 
in the details of the processing. The basic program design assumes the student has already written an 
algorithmic solution. This program is for students to verify and rethink their work. It is designed to 
guide the student to think about developing an algorithm -but can't help them if they haven't thought 
about the problem previously. 2. The Algorithmic Process NAT is, in part, based on a course at the 
Uni- versity of Kansas. The course is entitled "Intro- duction to Computing and Problem Solving". One 
of the textbooks is specifically for the problem solv- ing, algorithm development portion of the course, 
The Algorithmic Process by Drs. Gregory Wetzel and William Bulgren of the University of Kansas[47]. 
The Algorithmic Process defines a specific al- gorithm language, the Language of Algorithms, in which 
the students write their algorithms. As this language will be mentioned throughout the paper, a brief 
description of the statements it defines is presented. The Language of Algorithms is not a programming 
language as it does not have strict rules of syn- tax. Rather this language is concerned with the meaning 
of actions and not form. Thus Wetzel and Bulgren indicate that statements in the Language of Algorithms 
should "say what they want to do in an understandable wsy", but also limit themselves to actions that 
a computer can perform [47]. The language defines the following kinds of statements: input/output, assignment, 
if-then-else, while loop, for loop, and subprogram calls and headings. Read: The read statement takes 
the form of "read <variable list)", where the variables are separated by commas. Note that this read 
is equiv- alent to a readln in Pascal; i.e. the read goes out and gets the specified input, and then 
places the input pointer on the next line. Write: The write statement takes the form of "write <expression 
list>", where the expressions are separated by commas. As with the read, the write is equivalent to the 
Pascal writeln, so the output pointer is placed at the beginning of the next line. Assignment: The assignment 
statement is as usual. It may be phrased in several ways: variable 292 gets expreseion~ expression is 
assigned to vari- able; set variable to expression; variable <-- ex- pression. If Then Else: The conditional 
statement has the normal meaning, and is delimited with an Endif. While Loop: This is the normal pre-test 
loop. It is delimited with an Endwhile. For Loop: This operates just like the Pascal For loop and is 
delimited with an Endfor. Subalgorithm Call: Subprograms in the Language of Algorithms are called subalgorithms. 
The subal- gorithm call takes the form of: <subalg. name> GIVING list of pre-conditions; RECEIVING list 
of post-conditions The pre-conditions are those variables that are needed by the subalgorithm to do its 
work. The post-conditions are variables that are the results of the subaiEorithm that may be needed by 
the call- inR block. The pre and post condition lists are not necessarily mutually exclusive. Subalgorithm 
Heading: The subalgorithm heading takes the form: SUBALGORITHM@ubalg. name>GIVEN pre-conditions RETURNING 
post-conditions The correspondence between actual and formal para- meters is by order. So the first variable 
in the GIVING list corresponds with the first variable in the GIVEN list, etc. Actual and formal parameters 
may or may not have identical names [47]. By using this nonprogramming language for de- velopment, the 
problem solving aspect of the course can be emphasized, making the learning of the high- level language 
more than anything else a matter of translating the existing algorithm. Figure i.i shows a sample algorithm 
using the Language of Al- gorithms. The design of NAT assumes the students will develop in a non-syntactic 
language such as the Language of Algorithms. Figure i.i START ALGORITHM read x, y, z compute first 
GIVING x, z, and y; RECEIVING z and y computer second GIVING z and y; RECEIVING y STOP ALGORITHM SUBALGORITHM 
to compute first GIVEN m, n, and p; RETURNING n and p while m < n DO read p If p < n Then m gets m 
+ 1 Endif Endwhile STOP SUBALGORITHM SUBALGORITHM to compute second GIVEN a and b; RETURNING b set c 
to FALSE While c is false DO If a >= b Then write b read b Else set c to true Endif Endwhile STOP SUBALGORITHM 
 3. Software Requirements An overview of the requirements for the project is now presented. One: The 
software should provide a highly in- teractive guide to developing an algorithm in an introductory computer 
science/problem solving course. Two: The software should provide a menu driven environment, meaning 
all the program's actions are instigated from the user's menu selections. This allows students to control 
and pace their own progress. Three: The software should provide a windowed presentation including separate, 
functional windows for the following: - the student's algorithm, - the current menu and the student's 
menu choice, - the text being communicated to the student, both help text and the text of query blocks 
(see 4 and 5 below). Four: The software should provide online help facilities to the student. In this 
project, online help refers to a list of subjects on problem solv- ing, the Language of Algorithms and 
NAT. Upon se- lecting a particular subject, an explanation which may contain definitions, tutorials or 
examples - depending on the subject -is presented. The actual list of help topics available may vary 
from one implementation to the next and will not be dealt with in this paper. Five: The software should 
provide a menu item: Query Block. A query block is a concept created especially for NAT. In a conversational 
way, a query block guides the student through developing the algorithm. There will be a menu of query 
blocks and each one addresses one aspect of the algorithm. For instance, initialization is needed in 
an algorithm. The text of the blocks will in- clude prompts, questions and suggested actions pertaining 
to that part of the algorithm. It may suggest referring to the help menus on certain subjects if the 
student requires further informa- tion or review. These blocks cannot force the student to follow the 
suggestions or make them think accordingly, but for the willing student it will provide a structure or 
framework in which they can learn how to think about developing an algorithm. Six: The software should 
provide a menu item, Template. NAT's template is a skeletal representa- tion of a statement in the Language 
of Algorithms. Jeff Brumfield, when discussing the use of tem- plates in expressing programming language 
syntax, states a template contains words and symbols which are part of the language, references to other 
tem- plates, and indications of optional or repeated items [6]. Brumfield's intent, however, is different 
than that of NAT. For NAT, a template is not intended as a way to exhaustively define the Language of 
Algorithms, as a BNF defines a programming lan- guage. Rather it should convey visually: -infor- mation 
on the structure of the construct, - an ac- ceptable way to indent this construct, -appropri- ate places 
for documentation within and around this construct, -and, to whatever extent is possible, the meaning 
of the construct. The structure, the content and indenting can be shown simply through the text of the 
template. Different fonts place emphasis on the special or key words and by leaving places for comments, 
good documentation is suggested. These "dummy comments" can also be used to partially explain the meaning 
of the statement if the designer so desires (see the figure). Seven: The software should include guidelines 
for algorithm style. Algorithm style refers to the same features as programming style; that is descriptive 
identifier names, good indenting hab- its, and complete documentation. Indenting prac- tices are varied 
and many are acceptable, so auto- mated indenting is not a feature of NAT. However, as already mentioned 
in item six above, templates are used to encourage good indenting and documen- tation practices. Descriptive 
identifiers can be encouraged through the text of NAT. Eight: The software should provide a menu item: 
Edit, to handle complete editing capabilities on the algorithm. Nine: The software should provide a 
menu item: Save_Alg, to save the contents of the Algorithm window to a file. 4. Novice's Algorithm Teacher. 
 This section focuses on the three main user aids built into NAT -templates, query blocks, and help files. 
The complete text of any one of these is not included in this work as the actual menus of topics an installation 
may wish to use may vary. However, what follows are outlines of some of the kinds of things the designer 
had in mind for each of the templates, query blocks and help files. The suggestions are based on the 
author's observations of introductory computer science students. The following are definitions of templates 
which might be used in NAT. As defined earlier, a template is the skeleton of an algorithmic state- ment. 
It contains the KEY words in all caps and the entire structure in indented in an acceptable way. The 
portions of the construct where the users need to add their own specific code are clearly marked. Finally, 
where appropriate, areas for documentation are indicated. This reminds the student to document, and provides 
an easy format in which to do so. To use the templates, the user chooses "Template" from the main menu, 
and then a specific template from the template meny. Then the user can paste it into their algorithm, 
fill in the specif- ics and indent the statement properly in relation to the rest of the algorithm. 
The Template Menu includes: I. If-Then-Else 2. For Loop  3. While Loop  4. End-of-File Data Loop 
 5. Sentinel Data Loop  6. Repeat-Until Loop  7. Subalgorithm Call  8. Subalgorithm Heading For example, 
the Template Definition of  i. If-Then-Else IF boolean expression (*documentation*) THEN statement(s) 
ELSE statement(s) ENDIF 2. For Loop FOR index variables (-- start TO stop DO statement(s) (*documentation*) 
ENDFOR Sentinel Data Loop is READ datum (*use your variable*) WHILE datum is not sentinel DO process 
datum (*fill in processing*) READ datum (*use your variable*) END~ILE A "query block" is a file containing 
a conver- sational guide to writing an algorithm. Each block will limit itself to instruction on a particular 
aspect or stage of an algorithm -such as initial- ization before the main loop. The text of the blocks 
will include prompts and questions regarding that part of the algorithm. It may suggest referring to 
the help menu on a sub- ject. The queries cannot FORCE the student to follow suggestions or to think 
in a particular fashion, but if students do choose to participate (after all, they chose to use NAT 
in the first place, they might juct choose to participate) the block should provide a framework for 
developing an algorithm. Recall also, that NAT assumes that the student Js not approaching the algorithm 
"cold", but has at the very least, thought about the problem. To activate a query block, the student 
selects "Query Block" from the main menu, and then a par- ticular query block from the query block menu. 
 In the Query block menu, the student sees after choosing "Query Block" from the main menu: i. Initialization 
Block 2. Data List Block  3. Within the Data Loop Processing Block  4. Post Data Loop Processing Block 
 5. Subalgorithm Development  Each of the five blocks listed above will be outlined briefly below. 
The outlines include a recommendation of at what point in the student's NAT session this block should 
be activated, fol- lowed by a brief description of the block and a list of suggested explanations, 
questions, prompts, examples and reminders that might be included in the text of that block. The initialization 
block should explain what kinds of variables (both simple and data struc- tures) very often need to be 
initialized, and re- mind the student of the other various input and output operations that may need 
to be performed before the main loop. This should be the first Query Block chosen in order to lay the 
ground work for the rest of the algorithm, and to get the user accustomed to query blocks. The data 
list block will step the student through the data loop(s) design. This includes the overall skeleton 
of the loop and the correct read statements. This block should be activated after completion of the initialization 
query block. This block should be activated after comple- tion of the initialization block. The data 
processing block should give guidance on the actual processing to be done with each line of data read, 
including error checking. This block should be called after the Initial- ization, and Data List Blocks 
have been completed. The PoSt data loop processing block ~hould re- mind the student of the types of 
activities typi- cally performed after the main data loop. This block should be activated after the 
main data loop(s) have been developed -both their skeleton and the processing within. The subalgorithm 
query block should guide the student about the subalgorithm call and heading, giving brief explanations 
of parameters, and stress the concept of modularity. This block should be called on whenever the student 
feels like fleshing out a subalgorithm for which a call has already been written(by this time, the student 
should know what the subalgorithm is supposed to do). Throughout each of the query blocks, it is pos- 
sible to encourage the student to use an ASK and EXPLAIN. For example, an ASK within the subalgo- rithm 
query block would give a brief explanation of what the subalgorithm does, and specifically what each 
of the pre and ~st conditions are used for. The EXPLAIN within the subalgorithm query block would explain 
the concept of modularity emphasizing that if their algorithm does too much(too complex), then the work 
hasn't been "divided and conquered" enough, and needs to be broken down further. Hence, throughout each 
query block, there will be many ASKs and EXPLAINs. The Help menu topics will provide users with online 
help information on topics related to algo- rithm development, and supplementing the explana- tions in 
the Query Blocks. The topics available will be displayed when "Help" is chosen from the main menu. The 
user will then be provided with a menu of the available topics. When a topic is selected, the material 
for that subject will appear in the message window. The following is a list of suggested topics related 
to algorithms that students might need some "help" with. i. The If-Then-Else Statement 2. Boolean Expressions 
 3. The Write Statement  4. The Read Statement  5. The Assignment Statement  6. The Repeat-Until 
Loop  7. The For Loop  8. Data Structures (Arrays and Records)  9. The While Loop i0. Nested Loops 
Ii. Subalgorithms  12. NAT To summarize, the goal of the program is to provide a highly interactive, 
easy-to--use environ- ment to facilitate algorithm development for ~;tu- dents in a beginning computer 
science course. The program will reinforce what the student gets in class, and if used properly will 
make the stodent think about the pertinent topics in algorithm de- velopment. The goal isn't to do the 
work for them, but to ask questions an instructor would ask to quide the students to a correct solution. 
 5. Discussion The design of a program like NAT is meant to deal with three specific areas. First, 
many stu- dents who struggle with the algorithm development process can be helped with just a few leading 
ques- tions about the algorithm, and a couple of exam- ples. If these questions, prompts, and examples 
 could be boiled down and incorporated into a pro- gram, they could be a great help to many students 
 in getting at least the skeleton of an algorithm developed. Second, if this environment were provided 
on the same system where the students do their pro- gramming projects, then a student could convenient- 
ly use it to help them through some rough spots in development and, upon completion, to check their algorithm. 
Making the program readily available to the student could ease some of the instructor's burden and reduce 
the chances of the instructor inadvertently solving the problem for the student in an office hour session. 
 Finally, developing a beginning algorithm can, Lo some extent, be refined into discrete steps[47]. By 
using this program, students could in effect be drilled on these steps, hopefully improving their own 
problen solving skills and ultimately reducing their dependency on all outside sources. 6. References 
and Bibliography <RefA>i. Allison, Lloyd, "Syntax Directed Program Edit- ing", Software: Practice and Experience, 
13,5, (May 1983), pp. 453-465. 2. Apperley, M.D. and G.E. Field, "A Comparative Evaluation of Menu-Based 
Interactive Human- Computer Dialogue Techniques", Human-Computer Interaction -Interact '84, Proceedings 
of IFIP Conference by the Task Group on Human-Computer Interaction, 1984, London, England, pp.323-328. 
 3. Baruch, Marjory, "An Experience is Worth iK Words", SIGCSE Bulletin, The Papers of the 17th SIGCSE 
Technical Symposium on Computer Science Education, 18, i, (February 1986), pp. 238-245.  4. Bayman, 
Piraye and Richard E. Mayer, "A Diag- nosis of Beginning Programmer's Misconceptions of BASIC Programming 
Statements", Communica- tions of the ACM, 26, 9, (September 1983), pp. 677-679.  5. Benzon, Bill, "The 
Visual Mind and the Mac- intosh", BYTE, i0, i, (January 1985), pp. 113-  130.  6. Brumfield, Jeffrey, 
"Expressing Programming Language Syntax Using Templates", Technical Report, Dept. of Co~uter Science, 
University of Texas at Austin, TR-85-11, (June 1985).  7. Bulgren, William; Schweppe, Earl and Tim Thurman, 
"An Improved Introduction to Computing Emphasizing the Development of Algorithms and Using the Apple 
Macintosh Pascal", SIGCSE Bul- letin, 17th SIGCSE Technical Symposium on Com- puter Science Education, 
18, i, (February 1986) pp. 253--256.  8. Bulgren, William and Gregory F. Wetzel, "Intro- ductory Computer 
Science Education", SIGCSE Bulletin, 13th SIGCSE Technical Symposium on Computer Science Education, 14, 
i, (February 1982), pp. 133-139.  9. Card, S.K.: Pavel, M. and J.E. Farrell, "Win- dow Based Computer 
Dialogues", Human-Computer Interaction -INTERACT '84, Proceedings of IFIP Conference by the Task Group 
on Human-Computer Interaction, 1984, London, England, pp.239-244.  lO. Carrot], John M. and Caroline 
Carrithers, "Training Wheels in a User Interface", Communi- cations of the ACM, 27, 8, (August 1984), 
pp. 800-806. I!. Chambers, Jack and Jerry W. Sprecher, "Computer Assisted Instruction: Current Trends 
and Crit- ical Issues", Communication of the ACM, 23, 6, (June 1980), pp. 332-342. 12. Chernicoff, 
Stephan, Macintosh Revealed, Vol. 1 and 2, Hayden Book Company: 1985.  13. Chorover, Stephan L., "Cautions 
on Computers in Education", BYTE, 9, 6, (June 1984), pp. 223-226.  14. Christensen, Larry C.: Hayes, 
Bill and Gordon Stokes, "Design Strategies for a Computer- Based Instructional System", SIGCSE BULLETIN, 
17th SIGCSE Technical Symposium on Computer  Science Education, 18, i, (February 1986), pp. 329-333.- 
 15. Curran, William S., "A Teacher/Learner", SIGCSE Bulletin, 13th SIGCSE Technical Symposium on Computer 
Science Education, 14, i, (February 1982), pp. 229-231.  16. Dale, Nell and David Orshalick, "A New 
Instruc- tional Environment for Beginning Computer Science Students", SIGCSE Bulletin, 13th SIGCSE Technical 
Symposium on Computer Science Educa- tion, 14, i, (February 1982), pp. 34--38.  17. Dean, M., "How a 
Computer Should Talk to People", IBM Systems Journal, 21, 4, (1982), pp. .424-453.  18. Du Boulay, B.; 
O'Shea, T.; and J. Monk, "The Black Box inside the Glass Box: Presenting Computer Concepts to Novices", 
International Journal of Man-Machine Studies, 14, (1981), pp. 237--249.  19. Dunsmore, H.E., "Designing 
an Interactive Fa- cility for Non-Programmers", Proceedings of ACM'80, New York:ACM, 1980, pp. 475-483. 
 20. Eisenstadt, Mark, "A User-Friendly Software Environment for the Novice Programmer", Com- munications 
of the ACM, 26, 12, (December 1983) pp. 1058-1064.  21. Fenchel, R., "An Integrated Approach to User 
Assistance", SIGCSE Bulletin, Proceedings of the Conference on Easier and More Productive Use of Computer 
Systems, 13, 2-3, (1981), pp. 98-104.  22. Foley, Janes D. and Victor L. Wallace, "The Art of Natural 
Graphic Man-Machine Conversa- tion", IEEE Proceedings, 62, 4, (April 1974), pp. 462-471.  23. Frederick, 
William G. and Maynard J. Mansfield, "An Instructional Environment for Programming Using the VAX ii with 
a Three-Color Projector", SIGCSE Bulletin, 18~ 2, (June 1986), pp.29-30.  24. Gait, Jason, "An Aspect 
of Aesthetics in Human-Computer Communication -Pretty Windows", IEEE Transactions on Software Engineering, 
SE-ii, 8, (August 1985), pp. 714-717.  25. Gibbons, Patrick M. and .Tanice Houston, "He]p~ One System's 
Response to a User's Dilemma" IEEE 1984 Cybernetics and Society Proceedings, Halifax, Nova Scotia: October 
1984, pp.210-214.  26. Girill, T.R. and Clement H. Luk, "DOCUMENT: An Interactive Online Solution to 
Four Major Doc- umentation Problems", Communications of the ACM, 26, 5, (May 1983), pp. 328-338.  27. 
Holcomb, Richard and Alan L. Tharp, "The Effect of Windows on Man-Machine Interface (or Opening Doors 
With Windows)", Proceedings of the 1985 ACM Computer Science Conference, (March 1985), pp. 280-291. 
 28. Houghton, Raymond C., "Online Held Systems: A  Conspectus", Communications of the ACM, 27, 2, (February 
1984), pp. 126-133.  29. Ince, Darrel C., "A Software Tool for Top-Down Programmins", Software: Practice 
and Experience 13, 8, (August 1983), pp. 687-695.  30. Jennings, Mark S., "Evaluating the Macintosh 
Finder", BYTE, 9, 13, (December 1984), pp. A94-. Ai01.  31. Johnstone, James, "Dynamic Analysis of Menu 
Driven Software", IEEE 1984 National Aerospace and Electronics Conference, NAECON 1984, Vol.2 of 2, pp. 
853-856.  32. Jones, A., "How Novices Learn to Program", Human-Computer Interaction-INTERACT '84,  
 Proceedings of IFIP Conference by the Task Group on Human-Computer Interaction, 1984, London, England, 
pp. 777-783. 33. Kaster, J. and H. Widdel, "Graphical Support for Dialogue Transparence", Human-Computer 
In- teraction-INTERACT '84, Proceedings of IFIP Conference by teh Task Group on Human-Computer Interaction, 
1984, London, England, pp.329-333.  34. Levine, Liz; Woolf, Beverly; and Rich Filoramo, "Do I Press 
Return?" SIGCSE Bulletin, 15th SIGCSE Technical Symposium on Computer Science Education, 16, i, (1984), 
pp. 154-157.  35. Miara, Richard J.; Musselman, Joyce A.; Juan,  A. and Ben Sneiderman, "Program Indentation 
and Comprehensibility", Communications of the ACM, 26, ii, (November 1983), pp. 861-867.  36. Martin, 
Steve, "A Taste of Pascal", MacUser, i, i0, (July 1983), pp. 104-107, 142.  37. Morland, D., "Human 
Factors Guidelines for Terminal Interface Design", Communications of the ACM, 26, 7, (July 1983), pp. 
484-494.  38. Perlman, G., "Making the Right Choice with  Menus", Human-ComPuter 'Interaction -INTERACT 
'84, Proceedings of IFIP Conference by the Task Group on Human-Computer Interaction, 1984, London, England, 
pp. 317-322.  39. Richards, Thomas C., "Introduction to Com- puting", SIGCSE Bulletin, 13th SIGCSE Techni- 
cal Symposium on Computer Science Education, 14, i, (1982), pp. 154-157.  40. Rivera,Romel, "The Xinotech 
Program COMPOSER", brochure of Xinotech Research, Inc., Minneapolis, Minnesota.  41. Sheil, B., "Coping 
with Complexity!', Proceed- ings of Houston Symposium 3, Information and Society, 1981.  42. Smith, 
David; Irky, Charkes; Kimball, Ralph; Verplank; Bill; Harslem, Eric, "Designing the STAR User Interface", 
BYTE, 7, 4, (April 1982), pp. 242--282. 43. Spoher,James C. and Elliot Soloway, "Novice Mistakes: Are 
the Folk Wisdoms Correct", Com- munications of the ACM, 29, 7, (July 1986), pp. 62~-632.  44. Stokes, 
Gorden E.; Christensen, Larry C. and Bill Hayes, "ELROND: A Computer Based Instruc- tion System for an 
Introductory Programming Course", SIGCSE Bulletin. 16th SIGCSE Technical Symposium on Computer Science 
Education, 17, i, (March 1985), pp. 82-88.  45. Tennant,Harry, "Menu-Based Natural Language Understanding", 
AFIPS Conference Proceedings, 53, (1984), pp. 629-635.  46. ~ILSystems MacLanguage Series Pascal, User's 
 Guide and Reference Manual, Version 1.0, (November 1985), TML Systems.  47. Wetzel~ Gregory F. and 
William Bulgren, The Al- gorithmic Process 7 A n Introduction to Problem Solving, Science Research Assoc., 
Inc.: 1985.  48. Woodson, M. "Computer Literacy By Computer", SIGCSE Bulletin, 13th SIGCSE Technical 
Sympo- sium on Computer Science Education, 14, i, (February 1982), pp. 226-228.  49. Yoshino, Y.; Yoshimura, 
H.; Nishi, N.; Tanaka,  M. and T. Ichikawa, "A Hierarchfcal Model for Multiple Window Processing", 
1984 IEEE Work- shop o n Languages for Automation, pp. 26-31. 
			
</RefA>