
 An Object Calculus for Geographic Databases Eliseo Clementini and Paolino Di Felice Dipartixrtento di 
Ingegneria Elettric&#38; University di L Aquila, ITALY Abstract Querying a large geographic database 
is much more complex than querying a business-oriented database, this mainly because of the complexity 
of geographic data and the large variety of spatial relationships and operations that can be modeled 
among geographic objects. In this paper, we propose an object calculus suitable for querying geographic 
databases. The object calcuhts is based on am object-oriented data model customized for the representation 
of topological relationships and spatial operations. Special attention is also devoted to the vistttdization 
of spatial query results. 1. Introduction Geographic Information Systems (GISS) allow the storage, manipulation, 
and retrieval of geographic data and the display of data in the form of maps. GISS must handle spatial 
data as well as other kinds of data (e.g. alphmutneric and bitmap data) having both complex structure 
and semantics. The extraction of information from a GIS is one of the main activities the user is involved 
in. It is a common opinion (e.g., [1] and [10]) that information retrieval from a large and complex system 
must be carried out by combining querying and browsing strategies. At the moment, both these strategies 
have serious disadvantages. With regard to existing querying strategies, the basic problem concerns the 
skill required to use the available query languages. For example, the standard structure of SQL with 
the SELECT-FROM-WHERE block is already considered to be complex enough to be used (e.g., [8]). Most spatial 
query languages are based on SQL witi additional clauses for the Peamiuh tocepywitbmi fe. atlerpfi eftbkmtim­ 
pfwidedttmtb~afati-m~ti fordited cOmmm+al~tk AchscqrpisM Mtiraadtktitkoftk pubtidenmlibdateappr,aad-bx 
~:-=q pemkioa oftk Aswciatioa fer Gnq-iq ~. TO COW otlluwk+ ortofapubkh mlaimaafeeaadhet=~ A~-SAC ~ m 
o 199SACIU tUtS791-Sb~41~ treatment of spatial concepts. Although such extensions might appear as a possible 
solutiom they wou~d certainly further increase the users problems of formulating syntactically correct 
queries [6]. The browsing paradigm especially fits to navigational models (like the object-oriented model). 
The main disadvantage usually ascribed to browsing in large information bases is the user disorierttati~ 
when the path for reaching the desired ittfOtm@Ott is IOtlg Sltd IIOtUniqtte. In GISS, it is especially 
important to represent topology and to make computations on spatial data [5]. Objecttiented databases 
are a good technology for the management of geographic dm since they allow the &#38;fmition of geometric 
data types, spatial operators and relationships. However, there are no consolidated query languages for 
object-oriented databases [7]. In the present paper, we define a formal objectaiented query language 
(the object cafcukr) suitsble to be a geographic oriented query language that allows the end user to 
easily select the information to be retrieved. The object calculus is not specifically linked to an implemetttational 
data mode~ such as those of object-oriented and extensible database systems Iii ~ and Postgres, but is 
based on a conceptual model (the spatial data mod+d). Sitt~ as mentioned above, the most effedve way 
of presenting geographic irtfonnatiott to the user is by making a large use of maps, the result of queries 
formulated in the object calculus is visualized in a portion of a map. We think that the query language 
is powerful enough to express a meaningful set of queries in the context of GIS, even if we don t discuss 
formally its expressive power. The t3mal goal of our research is to integrate the querying technique 
with a browsing technique. At fm~ users adopt querying to restrict the amount of information to be investigate@ 
after, starting horn the result of a quety, they adopt browsing to explore a limited context containing 
the desired information. An advantage of this approach is to overcome some of the limitations mentioned 
before: (a) users do not need to formulate long and difficult statements, but they can adopt a certain 
degree of vagueness in their queries; (b) furthermore, they are not disorientated during the browsing 
activity, because they navigate through a small set of related objects. The paper is organized as follows. 
In Section 2, we introduce the spatial data model, that is a conceptual tool presenting geographic information 
in terms of objects and relationships. In Section 3, we define the object calculus. As a next step, in 
Section 4 we show the effectiveness of the object calculus as a formal tool for customizing the context 
information in the visualization of spatial objects. Sedon 5 closes the paper summarizing the basic features 
of the proposed object calculus. 2. The spatial data model The spatial data model was proposed for the 
fwst time in [3], as a conceptual tool for the representation of geographic information. This mo&#38;l 
featured the integration between classic abstraction primitives and spatial primitives. In this section 
we introduce a revised version of the spatial data model, in such a way it becomes a formal basis for 
the definition of the object-calculus. The spatial data mo&#38;l has most of the features common to all 
object-oriented data models, such as object identity, subparts sharing, inheritance, and methcds. We 
assume that these concepts are quite familiar for all readers and therefore we &#38;n t give exact definitions 
of them. In the following, we overview the general aspects of the model related to the purposes of the 
paper (Section 2.1) and we concentrate on the spatial characterization of the model (Section 2.2).  
2.1. General Definitions Basic consa-ucts of the model are objects, attributes, operations, and relationships. 
QQ@.Is. Two different kinds of objects are considererk classes and instancea. A class is a general template 
to generate instances, that is, it describes the structural part (attributes) and the behavioral part 
(operations) for all the instances of the class itself. A class is specified witix cclaas name> = <superclass 
natrm , <attribute lis~ , <operation lisb where superclass name is the parent clasa (which the class 
inherits from), <attribute lis~ is ( attribue (, <attribu~) ), and cooperation hsD is ( <operatiom (, 
<operation>} ). An instance is specified with an instance identifier. the class it belongs to, and an 
attribute values Iisc cinstsnce identified = tits class> , <attribute vahtes lisb where <attribute values 
list> is ( cattribute value> , [attribute valu-] ). The instance identifier uniquely identifies an object. 
We make a distinction between standard classes and application­&#38;pendent clssses. The latter are complex 
objects (e.g., City, River) defiied by the schema designer and have the full structure described above. 
In a geographic database, three basic classes of geometric type are needed PoinL Line, and Area. Each 
geographic applications class has at least one geometric attribute, representing geographic coordinates, 
which is an instance of one of such three classes. Standard classes are provided by the model and have 
a simpler structure. Their instances may be scalar vafued or set vafued. Standard classes with scalas 
valued instances are: Integer, R4 String, Boolean. Fm scalar valued instances we use an instance identifier 
that corresponds to their values (e.g., 20, good , true). The standard class with set valued instances 
is the class Aggregate; in the following, set valued instances are called aggregates. An aggregate may 
group together instances of different classes and is specifkd by an identifier and a list of instance 
identifiers insi&#38; braces; for example: Al = (Mississippi, Kansas City, 24]. Homogeneous aggregates 
(i.e., made up of instances of the same class) are useful in the attibutes &#38;6nition. We consider 
the class SeC subclass of Aggregate, able to build homogeneous aggregates; the class characterizing the 
set is specified among parentheses, for example: Set(City). AttdxLM. Attribuws make up the structural 
part of an object. An attribute of a class has a name and a domain from which it takes its attribute 
valuew such a domain is the extension (i.e. all the instances) of a class. The syntax is the following: 
attribute narna : <attriite &#38;mab where -ttribute do-is a clasa name. An attsibute value is an instance 
of the class specified in the attribute deftition. Inside instances, attributes are assigned a VSltW 
by: attribute name = <attribute valm where <attribute value> ia an instance identifier. The construct 
to refer to an attribute value of an instance is (<instance identil~, <attribute name>). . The set of 
operations associated to an object makes up its behavioral part. An operation is implemented as a method 
associated to a class the method can be applied to all the instances of that clasa and returns another 
instawe of a certain class. Methods have a method name, and optionally, can have parameters, that are 
other instances (of a apeciflc class) used during the computation. Therefore, an operation is defined 
by anethcxb : aeaul~ wh~e aesdb is a class name, and anethmb is defined by: <method name> [( <parameter> 
: <class name> (, qarameten : cclass name] )] The instance resulting from the application of the methcd 
m to the instance I is indicated with (I, m), that is the same notation used for attributes. ~elationshi~. 
Relationships allow to model explicitly binary associations between objects. The construct to indicate 
that two objects 01 and 02 have a relationship r that link them together is the following: <01, r, 02>. 
Such a triplet is called a~acr. Relationships can have a superimposed semantics that needs to be formally 
specified (as in the case of sp atiaf relationships) or they can be a plain link between two objects 
(user-defined relationships). Spatial relationships are specific to geographic applications, while user-defined 
relationships provide a mechanism to model any kind of fact in the user mind. A user-defined relationship 
is built by enumerating the facts involved in the relationship. For example, it is possible to create 
a relationship is a beautiful_city-of (involving places of interest in a -. state) by enumerating the 
following factx <Phoenix, is.a-beautiftd_ci~-of, Arizon-, @ucson, is_a_beautilM_city_of, ArizW. Geographic 
classes used in the examples discussed in the next sections are: State, Country, City, Laket Se~ River, 
Rod RoadNetwork. In order to clarify the model, a description of some of them follows. Their behavioral 
part is omituxl since basic operations on spatial data are discussed in Section 22. State = GemgraphicAre% 
(name : String, region: As­population : Integer, capital : City, counties : Set(County)) In the class 
State above, GeagraphicArea is the superclass in the attribute list there me two scalar valued attributes 
(nume, population), one geometric attribute (region), one attribute (capiral) which has values in dte 
class City, and one set valued amibute (counties) having values in the class County. City = GeographicAre~ 
(name : String, region : Are% location : PoinL population : Integer) The class City has a structure similar 
to the class Statq furthermore, it has the attribute focation representing the center of the city. Road 
= GeographicLirte, (category : string, number : Integer, path : Line, width : Integer) Ilte class Road 
is a subclass of GeographicLine and its geometric attribute is a lime. Many geographic entities are aggregates 
of simpler entities In fac~ iostances of the class RoadNetwork are ma&#38; up of instances of the class 
Rod ma simiiar way we can have a class Watersh4 whose instances are made up of rivers. It is useful to 
specify aggregates not only by enumeration, but also by giving a common property for all instances belonging 
to the aggregate. This will be performed by object calculus statements (see Section 3). WM regard to 
instances of geographic classes, it is possible to SC=SS to the VIdUeS Of their attributes ss in the 
fo~owing examples: (Phoenix, population) returna the population of phoenix (Arizona, capital) returns 
the instance identifier Phoenix. 2.2. Spatial relationships and operations The topological aspects of 
spatial objects represent important knowledge that users of geographic information systems expect to 
retrieve from a spatial database. Topological knowledge can be easily modeled in terms of spatial relationship 
(for exarnpl~ crosses , is inside , is adjacent ). Other information that is usually qmsemed m a geographic 
map is metric krtowledg~ that involves concepts such as distance and direction. Metric knowledge, together 
with other spatial analysis issues (for exampl~ finding the boundary of a region) is naturally modeled 
with spatial operations. Topologictd relationships are ~ by the property of being preserved under topological 
trartaformatiorts, such as translation rotation, and scaling. In [4], all possible topological relationships 
were grouped together into five basic kinds (touch, iw cross, overlap, and disjoint); this setof five 
relationships aims to be suitable for end-users as part of a spstiaI query language. An important advantage 
of this approach is to provide relationship names that reasonably have an intuhive meaning for users 
of spatial applications. Hereafter, we give an informal deaaiption of such topological Aationahipq while 
we refer to [4] for their exact semantics. In the following dkusskn we do not snake a distinction among 
the instances and their geometric attributes (for example, we say that two instances representing roads 
cross each other if the limes represented by their geometric attributes are crossing). /1 and f2 indicate 
two generic instances. CI1, touch, /2>. We say that two geometric elements touch each other, if the only 
thing they have in common is contained in the union of their boundaries. Example of two bordering states: 
cUtah, touck Arizon~, example of a river tributaty of another river chfissouri, touch, Mississippi. <11, 
in, f2>. One geometric element is in another one if the former is completely contained into the latter. 
Example of a state contained into a country: cArizon&#38; in, USA>. 41, cross, 12>. We say that two Iines 
cross each other if they meet on an internal point (note that it could not be a touch because in that 
case the intersection is only on the boundaries). Similarly, a line crosses an area if the line is partly 
inside the area and partly outaide. Example of a river crossing a state: CMississippi, cross, L.QuisianO. 
<If, overlap, 12>. Two geometric elements overlap each other if the result of their intersection is a 
third geomernc element of the same dimension, but different from both of them. Example of a lake sharing 
a part with a country &#38;ake Superior, overlap, Canade. <11, disjoint, 12>. Two geometric elements 
are disjoint if their intersection is void. Example of two separate regions: @ew York disjoint CalifomiO. 
In order to enhance the use of the topological relationships abov% operations able to extract boundaries 
from areas and lines are very useful (see [4]). The operations to be def~ are: b : Line. If applied to 
a connected area with no holes, it returns rhe circular line rcpreaatting the boundary of the area. ~: 
Point, t : Point. Applied to a non-circular line, they return the two separate end-points making up the 
boundary of the line (f and t stand for &#38;om end to, respectively). With the help of boundary operators, 
it is possible to individualize more detailed topological situationa. Consider the example of a river 
that is also the border of a state ~olorado River, overlap, (Arizon~ b)>. Other spatial information that 
needs to be modeled with operations, is related to metric knowledge. Giving a complete set of metric 
oprations and formal deftitions for them is still en open research issue. In the following, we present 
an informal discussion about the basic operations needed to model dtstence end direction facts. distance 
(pointl : Point, point2 : Point) : Real. It can be applied to a network of lines representing roads, 
railways, etc., in order to fmd the distance between two fixed points in the network, by following the 
shortest connection. For example, let us suppse that interstate (that is an instance of the class RoadNetwork) 
represents the network of the interstate roads in the USA. Cities have a geometric attribute (location 
: Point) representing the geographic codkates of the city center. The distance between two cities is 
given by: (interstates, distance ((Denver, location), (Chicago, location))) qfter (pointl : Point) : 
Point. This operation (and others similar to this that could be defined) deals with the concept of duection. 
It can be applied to a line with points lying on it and ordered along the line itself. For example if 
the exits of a highway have an increasing order along a certain direction, the next exit with respect 
to a given one is: (highway94, after (exit I)) Metric knowledge may be also described in terms of spatial 
relationships. such as north of , close to , but this approach leads to relationships of vague meaning, 
which can not be easily formalised. Another category of operations ia related to spatial analysis. In 
fact, it is necessary to perform basic operations over geometric elements and include them into a spatial 
query language. Spatial analysis encompasses set operations (e.g. union and intersection of geometric 
attributes) and any kind of measurement (e.g. surfaces, perimeters, centroids, lengths). For exampIe, 
the following is the definition of an intersection method applied to roads: intersection (aRoad : Road) 
: Point It can be used to find the location of the intersection between roada Alend A2 (Al, intersection 
(A2)).  3. The object calculus The object celculus ia a formal query language for object­oriented databases. 
It ia based on the spatial data model and it allows the forrmdation of spatial queries against a geographic 
database. l%e result of a query is an aggregate of instsmcea. The formulation of a query ia carried out 
by giving properties that a group of instances of the &#38;tabaae must satisfy: we adopt the general 
notation [i I f(i)], where i is the target vwiable and Xi) is a wefl-~ormed ~ormula (or shortly formula) 
of the object calculus. Formulas are made up of atoms connected by logical OptXStO~ d (A), Or (V). Formulas 
&#38;pend on the notion of variable. Variables of the csdculus are only instances (indicated by i, il, 
i2, ....) and they may be bounded or unlmtttded: the only unbounded variable in a formula is the target 
variable, whale other variables are supposed to be existentially quantified. Constants of the calculus 
may be instances (irtdcated by I, 11,12 , ....). A, Al, A2, .... denote aggregates, r denotes any relationship 
between instances. Parameters in a method may be either variables or constants. The notation m(a) denotes 
a method with parameters. The symbol m denotes either a method without parameters or an attribute of 
an instance. We use the notation q, which have the following recursive definition: In other words, ~ 
may be either a constanL a variable, or a construct of the spatial data model (attribute or operation) 
returning an instance and possibly captaining vssiablea. Also we consider a set of relational operators 
e = { >, e, =, <=, =, ==]. The == operator tests for object identity equality. The remaining operators 
apply only to scalar valued instances. The symbol it represents any operator belonging to e. Atoms SllOWCdin 
the CSICUIUSSle the fo~owiltg 1) C(i} 2)qle A, 4) qll 6 tp2. Atoms of the kind 1) are Cdkd range atomf 
and they inqmae that the variable i ranges over instances of the class C. Atoms of the kind 2) are called 
set inchwiots atoms and affirm that an instance belongs to an aggregate. Atoms of the kind 3) are called 
relatwdtip atoms and involve various kin&#38;of relationships. Atoms of the kind 4) are called comparison 
atonu and express compwiaona among ins~. WelI-formed f-(wfQ The following recursive deftition holtk l)anatomisafi, 
2)iffl, t2arewff, tltenfl Af2iaawm 3)iffl, f2arewff, then flvfZisawffi 4)ifflis awff, then(fl)isawff. 
In the followin~ we examine various cases of aggregation to exemplify several kinds of formulas. ~ An 
aggregate of the type (i I C(i)] represent the set of all the instances of a class C. For exantpl~ (i 
I Stat@] is the set of all states present in the extension of the class State. To specify a homogeneous 
aggregate, only one range atom must exist for the target variable {i I C(i) A fl ). If the aggregate 
contains instances of two different classes Cl e C2, we write: {i I (Cl(i) v C2(i)) A fl ). Set inclusion 
atou It is useful to build aggregates starting from already defined aggregates; if Al = [i I fl ], then 
A2 csn be defiied reusing Al, that is, for example: A2 = (i I (i e Al) vf2). ~ They are used whenever 
a query involves condkions on the attributes of an object or on the result of operations. An example 
is the aggregate concerning states with a population greater than 10.000.000 inhabitants: {i I State(i) 
A ((i, population) > lo.()()().~)}. All the cities at a distance of lCKI miles or less from Los hgeles 
can be expressed as: (i i City(i) A ((interstate, distance (i, Los Angeles)) <= 100)}. .. ~ They allow 
to formulate queries involving topological relationships. We propose severtil examples of such queries 
in order to illustrate the spatial application of the query language. Aggregatea baaed on the use of 
the in relationships are, for exampl% all the cities contained in a given arra (i I City(i) A <i, h, 
nbb). Aggregatea based on the touch relationship ~ for example, all the areas bordering on a given state, 
such ax {i I (State(i) v Country(i) v Sea(i)) A <i, touch, Cfllfornb) ; also, all the rivers that are 
tributary of a given ortet (ii River(i) A 4 touc&#38; Miaaiasi@). With regard to the cross relationship, 
an example is all the roads that cross a state {i I Road@ A 4, cross, Illino*). For the overlap relationship 
all the lakes that are only partly contained in a cmttttry [i 1Lakeq) A 4 overlap, Usb). An example 
involving two spatial relationships is all the states crossed by a riven (i I St$te(i) A ~iSSiSSippL 
cross, i> A <Mississippi, touch b). An example involving the disjoint relationship is all the cities 
situated along interstate 40 and that are outside kisona (i I City(i) A <interstate 40, moss, b A <interstate 
40, touch b A <i, disjoin~ Arizotto). Finally, an example involving also an operation inside a fsct 
is all interstate roads having a connection with Interstate 40 inaide Arizon* (i I Rosd(i) A <(i, intersection 
(hueratate 40)), iu  Arizow ]. 4. Visualization of spatial queries In most cases, users of GISS are 
skilled people who have already a model of the application in their mind. Specifically, geographic users 
are accustomed to deal with geographic maps, which are the simplest and most effective model of geographic 
information. So far, the design of user interfaces whose characteristics is the visualization of (and 
the interaction with) geographic objects remains one of the most challenging task of geographic databases. 
Therefore, the visualization of query results should represent an abstraction of objects contained in 
the database close to the model in the mind of GIS users. In [2], authors proposed a map-based view mechanism 
as a framework for interacting with geographic databases. In the following, we show how such a mechanism 
allows the customized visualization of queries stated in terms of the object calculus. Flg.1 shows a 
geographic map which visualizes the instance Arizona. It is possible to populate this region with many 
re~erences to other instances of the classes of the database, whose geometric attributes have a non-empty 
intersection with the given one. These references are depiited by mesns of a graphical notation similar 
to that usually adopted in geographic maps. Arizona L Flg.1. An example of a map-based visualiiort of 
the instance Arizona. We call context a set of references contained in the visualization of an instance. 
It is possible to change the information contained in the visualization by changing the context. A context 
may concern all kinds of geographic classes, like cities, rivas, railways, mountains, and comespond to 
the formulation of a query. Below, we give two examples of context for the instance Arizona. The fmt 
context concerns instances of a single class (i.e., State), representing bordering states: adjacentStates 
= (i I State(i) A <i, touck Arizono]. Fig.2 shows the visualization of the instance Arizona enhanced 
with the context adjacentStutes. The references to borderhg states are represented by their names and 
a portion of their borders. Arizona California New Mexico u Fig.2. The instance Arizona enhanced with 
the context aajacentStates. The second example of context concerns instamces of two classes (i.e., State 
and City) and it is defined incrementally by using the previous example: state&#38;City = (i I (i E adjacetttStates) 
v (City(i) A4, h Arizow)). Fig.3 shows the visualization of the instance Arizona enhanced with the context 
state&#38;City. Reference s to cities of Arizona (represented by small circles and their names) are died 
with respect to Fig.2. Nevada W 2i Arizona California New Mexico ;oenix I \ Fig.3. The instance Axizona 
enhanced with the context state&#38;City.   5. Summary and further work In the presentpaper, we pmposad 
a formal query language suitable for querying geographic dathaea. The basic features of our query language 
are listed below: a. it is defined as an object calculus. The major merit of a calcuhts over an algebra 
is the non-pmc-edudity. The usage of not procedural query languages has been proved to be easy, b. itis 
independent from the DBMS adopted to define the geographic schema. Therefore, either an extensible relational 
DBMS (e.g.. Postgres) or an object-oriented DBMS (e.g., 02) can be used without affecting the structure 
of queries;  c. it is particukzrly suitable for the retrieval of instances of the database. We showed 
through several examples how easy is to define the set of instances of interest; d. itis a geographic 
oriented query language. For the purposes of the present paper, the major characteristics of application 
oriented query languages is the fact that they incorporate semantic features of a specific category of 
applications. This enhances the capacity of the query language to express complex queries in a relatively 
easy way. Other merits of application oriented query languages are mentioned m [9];  e. it maintains 
the closwe property, with respect to the object model. In fac~ the result of queries are sets of objects 
(the aggregates~ f. it involves also the behavioral part qf objects, by using methods within the statements 
of the calculus;  g. incremental query definition. It is possible to defm  aggregates by using already 
&#38;fmed aggregatea. In this paper, we did not dkcuss formal issues about the calculus, such as its 
expressive power and its safety. Another step of our further work will include the defiition of an actual 
query language corresponding to the formal calculus. Implementation issues about the query language are 
also importan~ suffices it to mention that spatial relationship, which are the most peculiar aspect of 
the calculus, have already been implemented in Postgres [4]. Another task wiIl be the integration of 
the querying environment with the browsing strategy, that will take place starting from the visualization 
of a spatial query. Acknowledgements. Work supported by Progetto Finalizzato Sistemi Informatici e Calcolo 
Partdlelo of the Italian National Courd of Research (C.N.R.) under grant n. 91.00890. PF69. References 
<RefA>[1] S.K. Chang, Visual reasoning for information retrieval tkom very large &#38;tabases , J. of Visuaf 
ti8UOge.? tvtd Comfwting, 1:1, pp. 41-58, AC$&#38;ttliC Press, 1990. [2] E. Clementini, A. DAti and 
P. Di Felice, Browsing in geographic databases: an object-oriented approti, Proc. IEEE 1990 Workshop 
on Visual Languages, pp. 125-131, Skokie, Illiiois, October 4-6, 1990. [3] E. Clementini, P. Di Feli~ 
and A. D Atri, A spatial data model underlying human interaction with object­oriented spatial databases 
, Proc. IEEE 15th Int. Computer Soj?ware and Applicatwns Conf., pp.1 10­117, Tokyo, Japatu September 
11-13, 1991. [4] E. Clementil, P. Di Felic% and P. van Oosterom, A Small Set of Formal Topological Relationships 
Suitable for End-User Interaction , CNR Progetto Finalizzato Sistemi Informatici e Calcolo Parallelo 
Tech. Rep. n_51114, December 1992. [5] S. de Hoop and P. van Oosteronu Storage and Manipulation of Topology 
in Postgres , Proceedings EGIS92: Third Europetm Cor@rence on Geographical Information Systems, pp. 1324-1336, 
Munich, Germany, March 23-26, 1992. [6] P. Di Felice Towards a standard for and E. Clementuw SQL-baaed 
spatial query languages , Proc. of 1992 ACIUISIGAPP SynyI. on Applied Computing, pp. 184­189, Kansas 
Cky, Missouri, March 3-5, 1992. v] M. Klfer, W. Km, and Y. Sagiv, Querying Object-Oriented Databases 
, Proc. ACM SIGMOD, pp. 393­402, 1992. [8] W.S. Lttk and S. KIoster, ELFS: English Language FROM SQL 
, ACM Trans. on Dotabase Systems, 11:4, pp.447472 Dec. 1986. [9] W.S. Luk and A. Choi, Dynamic spatial 
query language a customized query language for object­oriented database systems , Proc. IEEE 15th Ins. 
Co~uter So~are and Applicatwns Cm.f, pp.327­332 Tokyo, J-Septmber 11-13, 1991. [10] T.R. Smith and A.U. 
FrX Vety large databases -Report horn the specialist meeting , ~. of Vieual Languages and Computing, 
1:3, PP.291-309, 1990.  
			</RefA>
