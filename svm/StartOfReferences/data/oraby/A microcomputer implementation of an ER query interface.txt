
 A Microcomputer Implementation of an ER Query Interface Bogdan D. Czejdo Department of Mathematical 
Sciences Loyola University New Orleans, LA 70118 Abetract Elsewhere we have explained our particular 
approach to ER query formulation [1, 3, 5, 6]. In our A query language has been defined in which approach 
users starl with a given diagram that users graphically manipulate Entity-Relationship (ER) schematically 
represents ER database. Every user diagrams to formulate queries involving computations operation maps 
an ER diagram to another ER [3]. In this paper we present a method of diagram, and every diagram represents 
a meaningful implementing this ER query language as an interface user query. Operations involving computations 
can for a relational Database Management System. The also be specified using ER diagrams. In this paper 
we approach is based on interactive manipulation of ER discuss a method of implementing an ER query database 
schemas and generation of SQL language as an interface for a relational Database expressions for an underlying 
relational database. Management System. The graphical queryThe graphical query formulation process is 
formally formulation process is formally defined. The defined. We assume that the information reflecting 
information reflecting the current state of the query the current state of the query formulation process 
is formulation process is maintained in a formal model. maintained in a formal model. The model described 
in The model described in [3] is significantly modified [3] is significantly modified and extended. The 
and extended, so that the information stored in it can information included in the extended model allows 
an serve two purposes. First, it allows for displaying on ER diagram corresponding to the current state 
of the the terminal screen an extended ER diagramquery to be displayed on the terminal screen. It is 
also corresponding to the current state of the query. used to generate an equivalent SQL expression for 
a Second, it is used to generate an equivalent SQLrelational database. The integrity constraints for 
the expression for a relational database. The globalformal model are specified. integrity constraints 
for the model are specified. The formal model presented in this paper is the basis for 1. Introduction 
an efficient graphical query interface implementation. The paper is organized as follows. In the next 
A variety of interactive graphical query interlaces section, a formal definition of an ER query formulation 
has been described in the literature [8, 9, 10, 11, 12]. model together with the appropriate operators 
is Several interfaces were based on relational [4] or given. Section 3 presents the design and C-hen 
s [2] ER model [8, 12]. They can provide the implementation of an interactive graphical ER query language. 
The process of generation of an SQL valuable assistance in formulating queries, but the expression from 
the information contained in the intensive research in the design of new interfaces model is described 
in Section 4. The graphical view and their implementation is generally suggested [9]. specification is 
discussed in Section 5. The summary presents some conclusions. Permission to copy without fee all or 
part of this material is granted provided that the copies are not made or distributed for direct 2. Query 
Formulation Model commercial advantage, the ACM copyright notice and the title of the publication and 
its date appear, and notice is given that the An ER database schema can be defined by a set copying 
is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires 
a fee and/ of entity and relationship type descriptors [3]. Each or specific permission. entity type 
descriptor contains the entity type name and the attribute names. Each relationship type descriptor contains 
the relationship type name and the attribute names. The model can be further enhanced to accommodate 
the graphical representation of the query construction which includes the position of an entity and relationship 
type icons on the terminal screen, the description of selected attributes and the specification of conditions. 
Query formulation model ERC for the ER database is a three-tuple (E, R, C), where E is the set of entity 
type descriptors, R is the set of relationship type descriptors and C is the set of condition descriptors. 
The entity type descriptor is a 8-tuple (N, P, A, SA, AA, GA, OA, KA), where: N -the name of the entity 
type. P -the position of the entity type icon on the terminal screen. A -a set of attribute names for 
the entity type being described. SA -a subset of A and it denotes a set of the attributes selected for 
projection. AA -a set of tuples (Aa, Fa, Ca) and it denotes attributes selected for aggregation. The 
first element, Aa, in each pair is from the set A. The second element, Fa, is an aggregate function from 
the set F, where F = { MIN , SUM , AVG, COUNT , COMPUTE}. The third element, Ca, is a condition on the 
aggregated result, if applicable. GA -another subset of A and it denotes the attributes selected for 
grouping. OA -a set of pairs (A3, OTa) and it denotes attributes selected for ordering. The first element, 
Aa, in each pair is from the set SA and the second element, OTa, is the ordering direction that can be 
either ASCending or Descending. KA -a subset of A and it denotes the primary key of the entity type. 
The relationship type descriptor is a 9-tuple (N, P, Ea, Eb, A, SA, AA, GA, OA), where: N -the name 
of the relationship type. P -the position of a relationship type icon on the terminal screen. Ea and 
Eb -distinct entity type descriptors in E. A -a set of attribute names for the relationship type being 
described. AA, SA, GA and OA -similar to the appropriate components of an entity type descriptor. The 
condition descriptor is a 4-tuple (ERa, Aa, OPa, Za), where: ERa -an entii or relationship type descriptor, 
Aa -an attribute of ERa, Za -a constant from the domain Z (the same as the domain for values of the attribute 
As), OPa -an operator imposing a condition on the values of the attribute Aa based on the constant Za. 
 The ERC model can be represented graphically as a diagram. As an example let us consider Company Database 
[7] that is described by three entity types EMPLOYEE, DEPARTMENT, PROJECT and four relationship types 
WorksFor, Manages, WoksOn and Controls. It can be represented by a diagram shown in Figure 1. essn t( 
I EMJLOYEE Figure 1. ER diagram for Company Database The diagram in Figure 1 can be described by the 
following ERC model. The set E contains three entity type descriptors El, E2 and E3 where, for example, 
El is defined as (EMPLOYEE, P1, {essn, ename, esalary}, a, a, a, a, {essn}). The set R contains three 
relationship type descriptors R1, R2, R3 and R4 where, for example, R1 is defined as (WorksFor, P2, El, 
E2, a, a, a, a, a). The set C is initially empty. It is assumed that each Pi describes the position of 
the corresponding object icon on the screen. 55 2.1 Formal Model Operators The ERC model can be manipulated 
by the operators described below. At each point of time the information necessary to properly display 
a diagram as well as the information necessary to properly formulate an equivalent query is reflected 
in the state of the model. Each operator is defined by providing the operator s name, an argument list 
and the semantics. Procedural notation is adopted to describe the semantics. Most of the operators are 
parlial, i.e. they are valid only if certain enabling conditions are satisfied. In this paper the enabling 
conditions are reflected in the global integrity constraints. All the operations on ERC change the state 
of the model. For describing the operators, the following notation is being adopted. The symbols, E, 
R, C, N, P, A SA, AA, GA, OA, KA, ER, and Z are the constituents of ERC. Throughout the description of 
the operators they have the same meaning. Instances of elements of a set are denoted by concatenation 
of the set name and a subscript, e.g. Cl is an instance of a condition descriptor belonging to C and 
ER1 is an instance of an entity or relationship type descriptor belonging either to E or to R. A component 
of any object is denoted by dot-notation, e.g. R1.N is the name of the relationship type descriptor RI. 
An operator can be defined by describing the modifications it causes in the ERC model. Let us shortly 
define these operators. The Delete operator can be applied to an entity type or to a relationship type. 
When applied to an entity type, it removes the specified entity type descriptor El from E. In addition 
to that all relationship type descriptors in which El participates are removed. Operation: Delete(El 
) Action: for each relationship type descriptor R1 such that R1.Ea = El or R1.Eb = El R:= R-{R1} El := 
E-{ El} When applied to a relationship type, it removes from R the specified relationship type descriptor 
R1. Operation: Delete(Rl ) Action: R:= R -{Rl} The Project operator specifies the attribute of an entity 
or relationship type to be included in the query. The argument list for this operator consists of several 
elements: an entity or relationship type descriptor ER1, an attribute Al from ER1, and an ordering direction 
OT1 from the set OT. The specification of ordering is optional and therefore the corresponding arguments 
can have null values. When more than one attribute is selected with the ordering direction, the priority 
could be specified by using an extended value of OT1 such as ASC_SECOND. Operation: Project(ERl, Al, 
OT1) Action: ER1.SA:= ER1.SA + {Al } if OT1 is not null then ER1.OA := ER1.OA + {(Al, OT1) The Aggregate 
operator specifies the aggregation operation. The argument list for this operator consists of an entity 
or relationship type descriptor ER1, an attribute Al from ER1, an aggregation function F1 from the set 
F and the condition for the aggregated resutt Cl. The specification condition on aggregation Cl is optional 
and therefore the corresponding arguments can have null values. Operation: Project(ERl, Al, F1, Cl) Action: 
ER1.AA:= ER1.AA + {(Al, Fl, Cl)} The Group_By operator specifies the grouping attribute of an entity 
or relationship type. The argument list for this operator consists of an entity or relationship type 
descriptor ER1, and an attribute Al from ER1. Operation: Project(ERl, Al) Action: ER1,GA:= ER1.GA + {Al} 
The Restrict_Values operator allows a user to construct a condition term that will be used in the process 
of data retrieval. The argument list for this operator consists of four elements: an entity or relationship 
type descriptor ER1, an attribute Al from ER1, a boolean-valued operator OPI and a constant Z1 from the 
domain of Al. When this operator is applied, the new condition descriptor is created and added to the 
set of C. Operation: Restrict(ERl, Al, OP1, Z1) Action: C:= C + {(ER1, Al, OP1, Zl)} Let us consider 
an example of modifications of the state of the ERC model caused by some of the ERC operators. Let us 
assume that the query: Llsf the names of all departments In alphabetical list containing attribute names 
from all GA order is expressed by the following sequence of mmponents of the remaining entity and relationship 
operators: type descriptors. delete(EMPLOYEE) delete(PROJECT) project(DEPARTMENT, dname,ASC) Applying 
these operators to the initial ERC model will result in the new state of the model with the following 
components. The set E will contain one entity type descriptor E2 defined as (DEPARTMENT, P3, {dnumber, 
dname, allocation}, {dname), a, a, {(dname, ASC)}, {dnumber}). The sets R and C are empty. 2.2 Formal 
Model Constraints In order to describe the formal model constraints let us first derive sets SELECT-set, 
FROM-set, GROUP-BY-set, AGGREGATE-set, HAVING-set and ORDER-BY-set by accumulating the proper values 
from the model. The SELECT-set set can be obtained by accumulating attribute names from all SA components 
of the remaining entity or relationship type descriptors. SELECT-set:=a for each entity and relationship 
type descriptor ER1 where ER1 in R or ER1 in E SELECT-set:= SELECT-set + ER1.SA If the attribute appears 
in the AA set, then it is included in the AGGREGATE-set. AGGREGATE-set:=a for each entity and relationship 
type descriptor ER1 where ER1 in R or ER1 in E AGGREGATE-set :. AGGREGATE-set + ER1.AA.Aa The FROM-set 
can be obtained by accumulating names of all remaining entity and relationship type descriptors. FROM-set:=a 
for each entity and relationship type descriptor ER1 where ER1 in R or ER1 in E FROM-set:= FROM-set + 
ER1.N The GROUP-BY-set can be obtained by creating a GROUP-BY-set:=a for each entity and relationship 
type descriptor ER1 where ER1 in R or ER1 in E GROUP-BY-set:= GROUP-BY-set + ER1.GA In a similar way, 
the HAVING-set can be obtained by accumulating attribute names from all AA components of the remaining 
entity and relationship type descriptors The ORDER-BY-set can be obtained by accumulating attribute names 
from all OA components of the remaining entity and relationship type descriptors. Several formal model 
constrains were identified. Let us discuss some of them. The aggregate constraint guarantees that all 
selected values are aggregate values when the grouping is absent. if GROUP-BY-set. a and AGGREGATE-set 
c> O then (SELECT-set = AGGREGATE-set) The first grouping constraint guarantees that aggregate attributes 
can not be grouping attributes and vice versa. if GROUP-BY-set<> a and AGGREGATE-set<> O then GROUP-BY-set 
intersection AGGREGATE-set=a The second grouping constraint guarantees that all selected attributes 
are either aggregate attributes or grouping attributes or grouping related attributes when the grouping 
is present. The grouping related attributes are described by the set GROUP-BY-RELATED-set that includes 
all attributes of an entity type when the key is in the GROUP-BY­set and all attributes of a relationship 
type when the keys of the defining entity sets are in the GROUP-BY­set. if GROUP-BY-set<> a and AGGREGATE-set<> 
O then SELECT-set in (AGGREGATE-set+ GROUP-BY-set +GROUP-BY-RELATED-set) In addition to the global query 
constraints, there are view constraints. The view constraints are the The query can be specified by a 
sequence of additional rules that guarantee that the result of the user s actions that would result in 
the diagram shown query can be used to modify the ER schema. in Figure 2. 3. Graphical Query Formulation 
 The basic ERC operators described in the previous section can be implemented using a graphical interface. 
A user invokes operations by first using a pointing device to select an operator from the main menu described 
above. Then, depending on the operator, the user either points to an element of the diagram or makes 
a selection from the provided submenu or enters text in the message area. When the Delete operator is 
chosen, the user is expected to point to the icon corresponding to an entity or relationship type to 
be removed. If this or any other operator is to be applied two or more times in succession, it need not 
be repeatedly selected. Thus, several entity and relationship types can be deleted by just selecting 
the Delete operator and then pointing successively at the entity and relationship type icons to be deleted 
from the diagram. When the Project operator is chosen, then the user is expected to point at the icon 
corresponding to a projected attribute. In addition, the submenu appears that allows a user to select 
an ordering option (ASC or DESC). When the Restrict operator is chosen, the user is expected to point 
at the icon corresponding to an attribute which participates in the condition. Then, the submenu containing 
the comparison options (<,>,=,<=,>=,<>) appears on the screen. After selecting one of the options, the 
constant value is provided by the user. When the Aggregate operator is chosen, the submenu appears that 
allows a user to select an aggregation function (MAX, MIN, AVG, SUM, COUNT). Another submenu allows a 
user to specify the condition on the aggregated value. When the Group_By operator is chosen, the user 
is expected to select grouping attributes. In a similar way all other operators can be invoked graphically. 
Let us consider the query from Section 2: List the names of all departments in alphabetical order. ~dnumber 
 .......>..8..,.....,..A .Y+Ye..I ~ dk=tion ) Figure 2. The screen for the query: List the names of 
aii depatiments in alphabetical order As a second example, let us consider the query: Count aii empioyees 
working for the PR departmenLThe query can be specified by the sequence of the of user s actions resulting 
in the diagram shown in Figure 3. ) EwUNEE  r+=== =PR Figure 3. The screen for the query: Count aii 
empioyees working for the PR department. As a third example, let us consider the query: For each department, 
get the department name and the totai number of empioyees working on the projects controlled by the department. 
The query can be specified by the sequence of user% actions resulting in the diagram shown in Figure 
4. ..    w<< +- PRWECT Figure 4. The screen for the query: For each department, get the depaflment 
name and the total number of employees working on the projects controlled by the depaffment. 4. Generation 
of SQL Query Expression. Each ER schema corresponds to an underlying relational schema. Here, we assume 
that each entity and relationship type descriptor corresponds to a singie reiation scheme. The reiation 
scheme corresponding to an entity-type descriptor El has the attributes and the key of El. The relation 
scheme corresponding to a relationship type descriptor R1 has severai attributes in addition to those 
in R1. These additional attributes are foreign keys, matching the primary keys of the relation schemes 
corresponding to RI .Ea and R1.Eb. As an exampie iet us consider the University Database that was described 
in Figure 1. The ER schema corresponding to the initiai state of the ERC modei described in Seotion 2, 
can be mapped into the foiiowing relational schema: Empioyee(essn,ename, esaiary) Depaflment(dnumber,dname,diocation) 
Project(pnumber, pname,piocation) WorksFor(essn,dnumber) Manages(essn,dnumber) Controls(dnumber, pnumber) 
WorksOn(essn, pnumber) it is important to notioe that the above schema can aiso inciude views. For exampie, 
assuming that Employee is a stored reiation in the form: Empioyee (essn,ename,esaiary,dnumber) Empioyee 
and WorksFor can be defined in SQL as the foiiowing views: CREATE ViEW Employee AS SELECT essn,ename,esaiary 
FROM Empioyee; CREATE ViEW Wo~sFor AS SELECT essn, dnumber FROM Empioyee; Simiiariy, the reiations Manages 
and Controis can be defined as views. With this approach, the stored relations can be normalized [7], 
and a convenient mapping of an ER schema into a relational schema can be assumed. For the given mapping 
of an ER schema into a relational schema, it is possibie to generate SQL expressions from any state of 
the ERC modei. The generated SQL query expression consists of six ciauses: SELECT-ciause, FROM-ciause, 
WHERE­ciause, GROUP-BY-ciause, HAViNG-ciause and ORDER-BY-ciause. The iast four ciauses are optionai. 
The ciauses are generated from the current state of the modei in the foiiowing way. The SELECT-ciause 
can be obtained from SELECT-set. if the attribute appears additionally in the AGGREGATE-set then the 
aggregation function is concatenated with the attribute name. The FROM­ciause can be obtained from FROM-set. 
The WHERE-ciause can be obtained by combining all terms corres~nding to join conditions and ali terms 
specified by condition descriptors. The terms corresponding to join conditions are generated from the 
remaining relationship type descriptors. Each relationship type descriptor R1 is transited into severai 
join conditions. To simplify the discussion iet us assume at this moment a singie primary key. This wouid 
result into two join conditions: concatenate(Rl .N, . , R1.Ea.KA, = , R1.Ea.N, . , R1.Ea.KA) concatenate(Rl 
.N, . , R1.Eb.KA, = , R1.Eb.N, . , R1.Eb.KA) By defauit aii terms are oombined using the AND connector. 
For terms corresponding to condition descriptors this can be changed by explicitly selecting the OR modifier. 
The GROUP-BY-clause can be obtained from GROUP-BY-set and SELECT-set (minus these attributes that are 
in AGGREGATE-set). The HAVING-clause can be obtained from HAVING­set. The ORDER-BY-clause can be obtained 
from ORDER-BY-set. If the attribute name is not unique then it is fully qualified by appending the the 
entity or relationship type name. The above specified rules allow for generating of SQL query also in 
some, not very typical situations. For example, when the diagram is fragmented into several (disconnected) 
subdiagrams the resulting SQL expression will describe the cartesian product rather than the join operations. 
Let us consider the queries from Section 3 and translate them into SQL expressions for the underlying 
relational database. The SQL expression generated for the first query in F~ure 2 is: SELECT dname FROM 
Department ORDER BY dname; The SQL expression generated for the second query in Figure 3 is: SELECT 
COUNT(Employee. essn) FROM Employee, WorksFor, Department WHERE Employee.essn = WorksFor.essn AND WorksFor.dnumber 
= Department.dnumber AND dname = PI?; The SQL expression generated for the fourth query in Figure 4 is: 
SELECT dname, COUNT(Employee. essn) FROM Employee, WorksOn, Project, Controls, Department WHERE Employee. 
essn. WorksOn.essn AND WorksOn.pnumber = Project.pnumber AND Project.pnumber = Controls.pnumber AND Controls.dnumber 
= Department.dnumber GROUP BY Department.dnumber, dname 5. Graphical View Specification When the view 
constraints are satisfied the graphical query can be used to modify the ER schema. As an example, let 
us consider the query: For each department, get the total number of employees working for the department. 
The query can be specified by the sequence of user s actions resulting in the diagram shown in Figure 
5. ) EtVnmEE Figure 5. The screen for the query: For each department, get the total number of employees 
working for the department. For such a diagram, a user can invoke the Create_View operation resulting 
in an ER view represented by the diagram shown in Figure 6. ( essn ) Etv410YEE Fqure 6. The modified 
ER diagram for Company Database  60 The ER views allow a user to specify queries in several steps. They 
correspond to an underlying relational schema. The relations corresponding to modified entity or relationship 
types are defined as relational views using rules similar to those described in Section 4. For example, 
the relation corresponding to the modified entity type Department in Figure 6 can be defined in SQL as 
the following view: CREATE VIEW Departmentl (dnumber, dname, allocation, empnum) AS SELECT Department. 
dnumber, dname, allocation, COUNT(Employee. essn) FROM Employee, WorksFor, Depaflment WHERE Employee.essn 
= WorksFor.essn AND WorksFor.dnumber = Department.dnumber GROUP BY Department. dnumber, dname, allocation; 
7. Summary In this paper we have presented a method of designing a front-end graphical query interface 
to a relational Database Management System. The queries involving computations are specified by manipulating 
ER schema diagrams displayed on the terminal screen. Diagrams are transformed until they represent a 
desired user query. During the process of query formulation the information needed to generate an equivalent 
SQL expression involving computations is accumulated in the defined ERC model. We have described the 
basic ERC operators for computations and explained how they modify the ERC model. These operators can 
be efficiently implemented. The stored relational database is not affected by the manipulations involving 
schema diagrams until the complete SQL expression is generated. Such expression can be optimized by a 
standard SQL query processor. A graphical query interface based on the described approach has been implemented 
using a Macintosh computer as a front-end to a relational Database Management System. The scope of the 
language is equivalent to a large subset of SQL. References <RefA>1. D.M. Campbell, D.W. Embley, and B. Czejdo, 
Graph~l Que~ Formulation For an ER Model , Data and Knowledge Engineering Journal, 1987, no. 3. 2. P. 
P. Chen, The Entity-Relationship Model: Toward a Unified View of Data , ACM Transaction on Database Systems, 
Volume 1, Number 1, January 1976, 9-36. 3. B. Czejdo and D. W. Embley, An Approach to Computation Specification 
for an Entity-Relationship Query Language , Proceedings of the Sixth International Conference on Entity-Relationship 
Approach, New Yodc New York, November 1987, 307-321. 4. B. Czejdo, D.W. Embley, and M. Rusinkiewicz, 
Graphical Query Formulation by Manipulating Relational Schema Diagramsw, Systems Science Journal, Vol. 
3, 1986. 5. B. Czejdo, R. Tucci, and D. W. Embley, Graphical Specification of Recursive Queries , to 
appear in Proceedings of the International Conference on Computing and Information, Ottawa, 1991.  6. 
B. Czejdo, R. Elmasri, M. Rusinkiewicz, and D. W. Embley, A Graphical Data Manipulation Language for 
an Extended Entity-Relationship Modelw, Computer, March, 1990. 7. R. Elmasri and S. Navathe, Fundamentals 
of Database Systems , Benjamin/Cummings Publishing CO., 1989. 8. R. Elmasri and J. Larson, A Graphical 
Query Facility for ER Databases , Proceedings of the 4th International Conference on ER Approach, Chicago 
1985. 9. J. Larson, Visual Languages for Database Users , in Visual Languages, S.Chang (cd), Plenum 
Press, NY, 1986. 10. N.C. Shu, Visual Programming Languages: a Perspective and Dimensional Analysis 
, in Visual Languages, S.Chang (cd), Plenum Press, NY, 1986. 11. Y. Vassiliou and M. Jarke, Query Languages 
­a Taxonomy , in Human Factors and Interactive Computer Systems , Y. Vassiliou, Ablex, Norwood, 1984. 
 12. Z.Q. Zhang and A.O. Mendelzon, A Graphical Query Language for ER Databases , in ER Approach to Software 
Engineering, S. Davis (cd), North Holland, Amsterdam, 1983</RefA>.  61 
			
