
 A Multi-Disciplinary Approach for Digital Systems Design Curricula William T. Neumann and Marvin C. 
Woodfill Department of Computer Science and Engineering Arizona State University Tempe, AZ, USA 85287-5406 
 Abstract Historically, Digital Systems Design curricu­la have focused principally on the hardware design 
aspects of systems development. At Arizona State University, we have expanded our Digital Systems Design 
program to include aspects of computer architecture, assembly language programming, and operating systems 
fundamentals, as well. We feel that this larger focus provides the students with a comprehensive understanding 
of the overall system development process. In this paper, we discuss our philosophy and examine a course 
sequence that incorporates this multi-disciplinary approach. Subject Areas Curriculum Design, Unique 
Instructional Methods. 1. Introduction Historically, Digital Systems Design (DSD) curricula have been 
based upon electrical engineer­ing and computer systems engineering course se­quences. While this organization 
was both logical and practical, it tended to result in programs that primarily focused upon the hardware 
design aspects of systems development, and these DSD courses typically emphasized processor timing using 
discrete logic components and the implementation of digital control systems. Within the last decade, 
however, the micro­processor has transformed the computer systems landscape. Functions that previously 
required racks of discrete components are now implemented on a single VLSI chip. Where designers previously 
implemented custom interfaces, standard, mass­produced logical components are now used. In order for 
the system software to be able to effec­tively use these standardized building-blocks, the computer systems 
engineer must be able to under- Permission to copy without fee all or part of this material is grantad 
provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright 
notice and the title of the publication and its date appear, and notice is given that copying is by permission 
of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or 
specific permission. @1992 ACM 0-89791-468-6/92/0002/01 68...$1.50 stand not only the operation of the 
system but also the application environment that will use the sys­ tem. Moreover, in many microcontroller-based 
real-time and embedded systems designs, the systems engineer is responsible not only for design­ ing 
the system but also for developing the embed­ ded control firmware. Given this new engineering environment, 
the Digital System Design curriculum at Arizona State University has been expanded to include not only 
the traditional aspects of digital systems design, but also the disciplines of computer architecture, 
assembly language programming, and operating systems fundamentals, We believe these disciplines naturally 
complement each other, and provide the student with a comprehensive understanding of the design process. 
In the remainder of this paper, we will demonstrate how various aspects of each area have been included 
in our curriculum by examining a two-semester course sequence from our program. 2. Curriculum Areas As 
noted by Gary Ford in the Software Engineering Institute s (SEI) recommendations for an undergraduate 
curriculum in Software Engineer­ing, A software engineer must have a thorough understanding of computer 
systems, including how the computer fits into larger engineered systems. [Ford] To achieve this goal, 
SEI recommends that the Computer Systems area include Computer Organization and assembly language, Computer 
architecture, Digital systems, Embedded systems, and Data communications, among others. Further­more, 
in their discussion of the IEEE Computer Society model program in Computer Science and Engineering (CSE), 
Cain, et al. indicate that pro­grams in CSE should provide students with a well­balanced education in 
fundamental principles of hardware and software, reinforced with experimen­tal skills. [Cain] Inherent 
in each of these recommendations is a need for the student to view a computer system in an integrated 
fashion. By developing our pro­gram using an inter-disciplinary orientation, stu­dents are immediately 
expected to apply design principles in practical ways to solve problems. In this way, technical skills 
from various disciplines are used as building blocks from which students construct their solutions. However, 
before one can understand the underlying commonality and how the ideas are unified, one must understand 
how the traditional areas of digital system design naturally and logically include these other areas. 
Digital Hardware Design As one would expect, digital hardware design must begin with a discussion of 
such tradi­tional topics as logical design, logic components, such as basic flip-flops and multiplexer, 
combina­tional and sequential circuits, and programmable logic. Along with these basic concepts, modern 
microprocessor design usually includes many types of intelligent interface devices and memory compo­nents. 
Although it is possible to discuss these components strictly from a hardware perspective, the weakness 
of this methodology is that students are not able to understand the motivations for the design. For example, 
input/output devices are commonly controlled using interrupt-driven logic. Although one can simply explain 
the mechanics of how an interrupt request is generated and processed, this only explains what is happening. 
By expanding the discussion to include operating system topics, such as events and process synchronization, 
the student is also able to understand the substantial advantages of an interrupt-driven multi-tasking 
monitor. Assembly Language Programming In today s world of object-oriented, high­level programming languages, 
assembly language programming is often dismissed as a quaint niche of computer science. However, for 
digital systems design, assembly language programming offers a unique vehicle to examine the operation 
and design of a microprocessor-based system. Operating at the instruction set level, the assembly language 
pro­grammer must interact with the microprocessor at a fundamental level, in order to translate design 
specifications into functional program designs. As a part of this process, we stress the need for developing 
programs that are efficient, error­free and maintainable. These goals are expected as a normal consequences 
of a developm~ent process that includes careful analysis of the problem, thoughtful design of the program 
source code, and thorough documentation of the program. As an example, consider the function of sidebm 
(or inline) documentation in an assembly-language program. As shown in Figure 1, the sidebar documentation 
is not to explain the execution of the instructions but rather to explain what logical steps the instructions 
accomplish and why they are necessary at this point in the program. Although such coding practices may 
seem excessive at first glance, the process of thoroughly explaining the algorithm has been shown to 
have a material effect on the quality of the final code and its ability to be maintained. Considering 
that a substantial portion of the overall life-cycle costs of software products in are involved in main­tenance 
activities, we believe that instructing students in this under-emphasized area is of vital importance. 
[Pheanis] UTRAP LDX SPC, SP At this point, we are in LEAX -1, XR a T comnand, but this SWI CMPX UTADDR 
may not be the trap set. BNE 3F If the address of the SWI is not the same location as the trap, this 
must be a system service request. Fiwre 1. Sample Program Documentation However, beyond the fundamental 
issues associated with the development of assembly-Ianguage programs, the instruction set, itself, can 
be used to examine many issues of computer architec­ture in a practical setting. For example,, micropro­gramming 
(i.e., developing a micro-coded central processing unit using writable control store) is only discussed 
abstractly in most architecture courses. The same topic can be discussed in surprising detail by simply 
analyzing the structure and bit-field encoding of an instruction set. Likewise,, addressing modes, register 
files, and instruction :sets can be used as a basis for a cost versus benefit analysis of a microprocessor 
design, allowing the students to evaluate the motivations for the current activity in reduced instruction 
set computer architectures. 3. Case Studv -The DSL Svstem 990 As an example of how this multi~-disciplin­ary 
methodology is used in the classroc~m, we will discuss a two-course sequence from our curriculum. The 
sequence is a senior-elective/gra~duate case study of the DSL System 990 computer system, which was developed 
specifically for this course sequence. [Woodfill] Using hardware and software systems developed specifically 
for an educational environment affords our program several unique advantages. First and foremost, the 
architecture of the DSL System 990 selectively implements features using discrete components, thereby 
allowing stu­dents to examine not only function but also imple­mentation. Secondly, since the intended 
purpose of the system was to serve an instructional application, the overall complexity of the system 
was carefully limited in order that students would be able to comprehend the overall design. Finally, 
the open design of the system also allows it to serve as a platform for senior and graduate projects 
that investigate alternatives to prior design decisions. The DSL System 990 Architecture The DSL System 
990 is a shared-bus, dual­processor design based upon the Motorola MC6809E 8-/l 6-bit microprocessor, 
and can support up to sixteen users, four remote host communication links, two local printers, and two 
system consoles, as shown in Figure 2. At the highest level, the system can be divided into two functional 
components the HOST processor and the IOP processor. The HOST processor provides the execution environment 
for user programs, allocates user partitions and other system resources as well as controlling the execution 
of user programs. The IOP, or Input/Output pro­cessor, processes all user and system 1/0 requests and 
manages the operation of all system peripherals. IDSL 990 Host Processor I 92K Shared RAM 16 Interactive 
Users 6 System Peripherals , IDSL 990 10P Processor I Figure 2. DSL System 990 Architecture The two-course 
sequence using the DSL System 990 closely follows this structural organiza­ 170 tion. One course considers 
design aspects that allow the HOST processor to serve as a multi-user, gener­al-purpose computer system. 
Conversely, the second course examines the IOP as a dedicated, interrupt-driven, embedded-system design. 
This organization has been adopted in favor of other partitioning in order to focus upon logical and 
functional aspects of the design. Multi-User (HOST) Processor When discussing the design of the HOST 
processor, three aspects of the design are under­scored: memory management and protection, the multi-user 
executive, and system service request processing. Using these topics as a basis for discus­sion, topics 
such as context switching, and exception processing are also explored. Since the MC6809E was not designed 
to operate in a multi-user (as opposed to multi-tasking) environment, the design deficiencies of the 
basic architecture of the micro­processor are examined, as well as the enhancements included in the S990 
design to allow its use in multi-user environment. Memorv management and motection. In the DSL System 
990, the implementation of memory management and protection is based upon two con­cepts: memory partitions 
and access control. In each user s view of the MC6809E memory map, the first (lowest physical addresses) 
16k of the system is considered the user s available memory partition. Memory above this point is restricted 
to system programs, and is not accessible to the user program. The user s memory partition is further 
subdivided into two equally sized sections of RAM and Pseudo-ROM. PseudoROM is a locally developed concept 
whereby a portion of memory is accessible as RAM while under the debug monitor, but appears as a read-only 
memory section while a user s program is in execution. Considering the memory map from the system s viewpoint, 
the user partition is physi­cally replicated 16 times in hardware. Only one individual user partition 
can be accessed at any given time, and the active partition is selected using a hardware partition register. 
In addition to the PseudoROM, memory protection in the S990 is accomplished using spe­cial-purpose hardware 
that monitors all memory references, generates an exception and prevents an invalid access from completing. 
(This last issue is actually of some importance. If an invalid reference is allowed to complete the write 
cycle, an erroneous user task could corrupt system data structures. Likewise, read cycles must also be 
protected, since the state of memory-mapped peripheral devices can be changed by a read operation.) Multi-User 
Executive. In addition to the operating system control software required support a multi-user environment, 
the S990 also has special purpose hardware that maintains system state (User, System and Interrupt Acknowledge) 
external to the processor. Although state bits are commonly found in the system control register of advanced 
micro­processors, the implementation of this control hardware outside to the microprocessor allows the 
students a unique opportunity to understand the way in which system state information is necessary for 
the management of system resources. In addition to the state logic, an important addition to the system 
was specialized hardware that monitors the execution of individual processor instructions while in user 
mode. Since the MC6809E was originally designed for user as an embedded-system controller, executing 
unimplem­ented processor instructions does not generate an exception. Since these instructions can execute 
infinitely, the system must be able to detect that an unimplemented instruction has been executed and 
to regain control of the system without affecting other users. Svstem Service Reauests. Since system 
memory space is not accessible to user programs, it is not possible (or desirable) for user programs 
to directly initiate input/output requests. Using the model found in most multi-user systems, the Soft­ware 
Interrupt (SWI) trap was selected as the meth­od for accessing system service routines. The SWI capability 
fits neatly into the overall design, since the execution of the interrupt initiates a state change (if 
required, since system routines also use this interface) and suspends the requesting task. Request command 
strings follow the SWI instruc­tion, and other parameters are passed in memory or processor registers. 
Many concepts are linked to the implemen­tation of system service requests. For example, when a user 
program executes a system service request, a state change (from user to supervisor) occurs and the user 
s task is suspended. At this point, the executive notifies the Input/ Output processor that a request 
is pending using an inter­processor communication link. When the request has been completed, the task 
is markedl as eligible for execution, and subsequently restarted. Although we have clearly simplified 
the environment for pedagogical purposes, the basic operation and structure of multi-user systems is 
clearly evident. Input/Output Processor (IOP) In contrast with the HOST, the architecture of the S990 
IOP is a fairly classic embedlded system design. The primary functions of the IOP are twofold to manage 
system peripherals,, to provide input/output information translations, and to support system timer function. 
As opposed to the HOST processor where every event (including interrupts) occurs synchronously with th~eexecution 
of the user s process, the IOP is an interrupt-based, multi-tasking design that manages several inter­leaved 
threads of execution. Moreover, since the IOP only executed trusted system programs (as opposed to user-written 
programs), memlory protec­tion and access control is not required. Svstem Peri~heral Devices. The S990 
supports both serial and parallel interfaces in order to monitor the operation of the system and to communicate 
with system users. Parallel interfaces are primarily used by interrupt handlers to identify which system 
device is requesting service. In the S990, up to 24 independent serial devices can request service. Using 
a priority encoding hierarchy based upon a combination of the physical location of the multi-function 
board in the system backplane and the relative priority of the device on the multi­function board itself, 
a 5-bit value is used to select a device for service. Once a specific device has been selected, software 
polling routines, are used to identify the specific requirements of the device. The Motorola M6850 Asynchronous 
Serial Communication Adapter (ACIA) is the primary device used within the system for serial communi­cation. 
For simplicity, the primary sixteen user ports are permanently assigned to the corresponding tasks in 
the HOST processor. Although it would have been possible to dynamically assign these ports as users accessed 
the system, the additional com­plexity necessary to add this logical to physical mapping could not be 
justified from an instruction­al standpoint. Inmt/Outtmt Translations. The ability of the IOP to perform 
Input/Output (1/0) translations is important from both an operational and instruc­tional standpoint. 
In addition to basic character­oriented 1/0 requests, a HOST user on the S990 can dlso request a Message 
(delimited character string) or Numeric (binary values) 1/0 transactions. From an operational standpoint, 
using the IOP for basic message translations significantly minimizes the system load on the HOST processor. 
Although the 6809 is an excellent instructional vehicle, issues affecting system throughput must be carefully 
managed in order to ensure that overall performance is acceptable. However, in addressing this issue, 
the S990 affords the instructor an excellent opportunity to discuss such issues as load management, parallel 
and distributed processing, and inter-process syn­chronization and coordination. Svstem Timers. Virtually 
every embedded system environment has a requirement to time or otherwise monitor events. Likewise, in 
multi-user environments, it is necessary to limit the execution time of user tasks to ensure that all 
tasks relinquish the processor after an allotted time. In the case of the S990, these functions are provided 
by the MC6840 Programmable Timer Module (PTM). With respect to the IOP, interrupts generated at regular 
intervals act as the real-time clock, and are used to time-out pending 1/0 requests. In the case of the 
host, real-time delta delays (waiting for a given interval from the current time) allow user programs 
to suspend themselves without the use of resource consuming busy waits. In an interesting design feature, 
the PTM, while controlled by the IOP processor, implements two functions for the HOST. To ensure that 
user processes relinquish the processor after a fixed time slice, the PTM automatically generates an 
interrupt every five milliseconds. Another port on the PTM is used to monitor the instruction execution 
stream of the HOST. If an instruction executes for more cycles than any valid instruction, the PTM automat­ically 
generates a system reset on the HOST proces­sor. In addition to the normal important lessons that can 
be learned from the basic operation of timers, these additional functions are very useful to intro­duce 
the concepts of fault-tolerance and inter­processor linkages. 4. Classroom Structure The DSL System 990 
has been successfully incorporated into the two senior-elective/graduate courses for four years. During 
this time, the stu­dents have shown the ability to effectively interact with the system from both an 
instructional and operational standpoint. Class materials provided to the students include a complete 
source code listing of a processor s firmware (HOST or IOP), complete hardware documentation (system 
schematics and backplane interconnections), and User s Guide and System Reference. In addition, students 
are expect­ed to use vendor hardware manuals for information on individual components and devices. In 
order to ensure that the student has an appreciation of the system from the user s standpoint, students 
are expected to complete at least two programming assignments using the S990. 5. Conclusions Overall, 
the DSL System 990 has proven to be an excellent instructional vehicle for presenting a multi-disciplinary 
view of Digital Systems Design. The reasons for this success seem to be twofold. First, basic design 
decisions were focused on the instructional intent of the system, ensuring that the students would have 
access to and visibility of critical architectural components. Second, given the availability of information, 
the course organization and structure is more effective in conveying design principles, Given the success 
that we have enj~yed, we are convinced that a multi-disciplinary approa?h offers unique advantages to 
instructors in Digital Systems Design programs. References <RefA>[Cain] Cain, J. T., Langdon, Jr., G. G., Varanasi, 
M. R., The IEEE Computer Society Model Program in Computer Science and Engineering, Computer, Volume 
17, Number 4, April, 1984. [Ford] Ford, Gary, The SEI Undergraduate Cur­riculum in Software Engineering, 
The Twenty-Second SIGCSE Technical Symposium on Computer Science Education, Austin, Texas, March, 1991. 
[Pheanis] Pheanis, David C. and Welch, Louis E. III, Galaxy Review of a Software Project, Phoenix Conference 
on Computers and Communications, Proceedings, Phoenix, Arizona, April, 1986. [Woodfill] Woodfill, Marvin 
C., and Neumann, William T., A MicroProcessor-Based Development System for Digital System Design Education, 
Proceedings of the Southeastcon 88, Knoxville, Tennessee, April, 1988.</RefA>
			
