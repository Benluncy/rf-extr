
 Some text in this electronic article is rendered in Type 3 or bitmapped fonts, and may display poorly 
on screen in Adobe Acrobat v. 4.0 and later. However, printouts of this file are unaffected by this problem. 
We recommend that you print the file for best legibility. A Graphical User Interface for Executing Formal 
Speci.cations Xiaowen Chen Department of Mathematical and Computer Sciences Penn State Harrisburg 777 
W. Harrisburg Pike, Middletown, PA 17057 USA xxc111@cs.hbg.psu.edu  ABSTRACT Insoftwaredevelopmenerrorscancause 
t,specifcationbud­getoverrunsorcompletefailureofdevelopmentprojects. Inaneforttoreducesuchriskinsoftwaredevelopment, 
formalandmodel-basedspecifcationlanguageshavebeen developedandapplied.Onesuchspecifcationlanguage isSPECS-C++,whichisusedtospecifyC++classes.A 
largesubsetofSPECS-C++canbeexecutedbytranslating specifcationstoconcurrentconstraintprograms.Inthis work,wedescribeagraphicaluserinterfacethatcontrols 
boththetranslationandtheexecutionoftheresultingcon­straintprograms.Thisgraphicaluserinterfaceprovidesa 
convenienttoolforconstructingtestcases,modifyingspec­ifcations,andvalidatingoriginalormodifedspecifcations. 
Theinterfacecanbeextendedtoaccommodateotherspec­ifcationlanguages,aswellasmorecomplextestcasesand specifcations. 
 Keywords formalspecifcations,executablespecifcations,userinter­facedesign,SPECS-C++ 1. INTRODUCTION 
Thecapabilitiesofsoftwarehavedramaticallyincreased inthepastdecade.Tofacilitatemorefexibilityandmore 
functionality,softwareisbecomingmoreandmorecompli­cated,andasaresult,thespecifcationsofsoftwaresystems 
aremoreandmorelikelytocontainerrors.Itisdifcult todetectallsucherrorsbeforethesoftwaresystemisim­plemented.Infact,thesoftwarespecifcationisusuallythe 
standardofcorrectnessforthesoftwaredevelopmentefort. Therefore,undetectedspecifcationerrorscanhavedisas­trousorevenfatalconsequencesforthewholesoftwarede­velopmentprocess. 
Permission to make digital or hard copies of all or part of this work for Permission to make digital 
or hard copies of part or all of this work or personal or classroom use is granted without fee provided 
that copies are not made or distributed for profit or commercial advantage and that copies personal or 
classroom use is granted without fee provided that copies are bear this notice and the full citation 
on the first page. To copy otherwise, to not made or distributed for pro.t or commercial advantage and 
that copies bear this notice and the full citation on the .rst page. To copy otherwise, to republish, 
to post on servers, or to redistribute to lists, requires prior republish, to post on servers or to redistribute 
to lists, requires prior speci.c permission and/or a fee. specific permission and/or a fee. SAC 2001, 
Las Vegas, NV SAC 2001, Las Vegas, NV &#38;#169; 2001 ACM 1-58113-287-5/01/02 $5.00 2001 ACM 1-58113-324-3/01/02 
..$5.00 Tim Wahls Department of Mathematical and Computer Sciences Penn State Harrisburg 777 W. Harrisburg 
Pike, Middletown, PA 17057 USA wahls@psu.edu Inaneforttoreducesuchriskinsoftwaredevt, elopmenmanyresearchershavebeendevelopingformal,model-based 
specifcationlanguages.SuchlanguagesincludeVDM[15, 6],Z[18,4],B[1,2],JML[16],andSPECS-C++[20,21]. Althoughnoneoftheselanguagesweredesignedtobeex­ecutable,theabilitytoexecuteatleastasubsetofaformal 
specifcationlanguagemakesdeveloping,validatingandus­ingspecifcationsmucheasier.Theabilitytoexecutespeci­fcationsallowsspeciferstovalidatetheirwork|theycan 
actuallyrunthespecifcationtocheckthatthemeaningof thespecifcationiswhatwasintended.Executablespecif­cationscanalsoserveasprototypesandtestoracles[11]. 
Thecriticalstepinexecutingspecifcationsistranslat­ingaformalspecifcationintosometypeofexecutablepro­gramminglanguage.Suchatranslationmaybedoneby 
hand,whichofcourse,isinefcientanderror-prone.Unfor­tunately,manyexecutiontechniquesforVDMandZspec­ifcationscurrentlyrelyonhandtranslation[23,8,9].In 
caseswhereanautomatedtranslationexists,oftenonlya restrictedsubsetofthespecifcationlanguagecanbetrans­lated[17,5,7].Inothercases,thespecifermustprovide 
asetofpossiblevaluesforallvariablesinthespecifcation (includingvariablesrepresentingoutputs)[13],orspecifca­tionsareexecutedbyenumeratinga(possiblyinfnite)set 
ofvaluesforthevariablesinthespecifcation[8,3]. ThetechniquewehavedevelopedforexecutingSPECS­C++[21]canexecutealargersubsetofthespecifcation 
languagethananyoftheotherautomatedtechniquesthat donotuseenumeration,includingmanyusesofnegation andlogicalquantifers,anddoesnotsuferfromthelimita­tionsandinefcienciesassociatedwithexplicitenumeration. 
Additionally,thistechniquecouldeasilybeappliedtoother model-basedspecifcationlanguagessuchasVDMandZ.In 
thispaper,wefocusonagraphicaluserinterfacedesignedto makeourspecifcationexecutionsystemeasiertouse.The 
entireexecutionsystem(includingtheinterface)isfreely availableforresearchuse[19]. 2. SPECS-C++ AND ITS 
EXECUTION SPECS-C++isaformalandmodel-basedlanguagefor specifyingtheinterfacesofC++classes.Thebuilt-intypes 
ofSPECS-C++includesimpletypessuchasintegers,re­als,characters,strings,andbooleansaswellascomplex typessuchastuples,sets,sequences,objectsandinstances 
classList{ 1*model domains sequenceofintlisttype; datamembers listtypetl; abstractfunctions definesorted(listtypel)asboolsuchthat 
result=tobool(\forallinti[ 1<=i<length(l)=>l[i]<=l[i+1]]); *1 public: List(); 1*modifies:self post:tl'=<>*1 
voidinsert(inti); 1*modifies:self post:tl'=<i>||tl^*1 voidsort(); 1*modifies:self post:range(tl^)=range(tl')1\sorted(tl')*1 
voidincOdd(); 1*modifies:self post:\forallinti[i\indomain(tl')=> ((tl^[i]%2=0=>tl'[i]=tl^[i]) 1\(tl^[i]%2=1=> 
tl'[i]=tl^[i]+1))] 1\length(tl')=length(tl^)*1 }; Figure1:TheSPECS-C++specifcationforclass List. ofclasses.Weuseobjectinthesenseoflocationorl-value 
|objecttypesareusedinSPECS-C++tomodelaliasing andmutationatthespecifcationlevel. ImplementationfunctionsandproceduresinSPECS-C++ 
arespecifedusingaprecondition(whichspecifeswhatmust betruefortheseoperationstoexecutecorrectlywhenthey 
arecalled)andapostcondition(whichspecifeswhatisguar­anteedtobetruewhentheseoperationsterminate,assuming 
thepreconditionwassatisfed).Thepre-andpostconditions arewrittenasfrst-orderpredicatelogicassertionsoverthe 
modeltypes. Model-basedspecifcationscanspecifyprocedures(opera­tionsthatmodifytheirparameters).InSPECS-C++,when 
thevalueofaparameterobject(e.g.,v)changesfromthe pre-state(thesystemstatebeforetheprocedureiscalled) 
tothepost-state(thesystemstateaftertheprocedureis called),thepre-statevalueisdecoratedwitha^,i.e.,v^, 
andthepost-statevalueisdecoratedwitha',i.e.,v'. AtypicalexampleofaSPECS-C++specifcationisgiven inFigure1,inwhichclassListisdefned.ASPECS-C++ 
specifcationisintendedtoserveasaC++headerfleforthe implementationofthespecifcation,andsoanypartsofthe 
specifcationthatarenotlegalC++codeareplacedinside Cstylecomments(1**1).C++stylecomments(11 ::: ::: )arereservedfortheusualnaturallanguagecomments. 
ASPECS-C++specifcationiscomposedoftwomajor parts:themodelandtheoperations.ThemodelinaSPECS­C++specifcationisbuiltusingthesimpleandthecomplex 
typesdescribedpreviouslyandhasfoursections:domains, datamembers,constraintsandabstractfunctions. Intheexamplegivenabove,thedomainssectiondefnes 
typelisttypeassequenceofinteger,thedatamemberssec­tiondeclaresanabstractdatamembertloftypelisttype, theconstraintssectionisomitted,andtheabstractfunctions 
sectioncontainsfunctionsorted,whichtestswhetherase­quenceofintegersissorted.Theoperationssection(starting 
withpublic:)includesthespecifcationsofaconstructor, anoperationtoinsertvaluesintoalist,anoperationtosort 
alistwiththehelpoftheabstractfunctionpreviouslyde­fned,andanoperationtoincrementtheoddelementsofa list.OperationincOddisincludedbecausethepostcondition 
isagoodexampleofthekindsofspecifcationsourtechnique canexecute,notbecausetheoperationisexpectedtobe useful.Inthispostcondition,apost-statesequencevalueis 
specifedoneindexpositionatatime,andtheseconditions areexpressedinsidethebodyofauniversallyquantifedas­sertion. 
Theimportantthingtonoteisthattheseoperationspec­ifcationsdonotdescribealgorithms|instead,theysimply specifywhatpost-statevaluesshouldresultfromapplying 
theseoperations.Inparticular,thepostconditionsforsort andincOdddonotdefnepost-statevaluesdirectly,butin­steadonlyspecifypropertiesthatpost-statevaluesmustsat­isfy.Hence,executingthesespecifcationsisaninteresting 
problem.Infact,nootherautomatedtechnique(otherthan thoseusingenumeration)thattheauthorsareawareofcould 
executethesepostconditions. ThecentralpartofourtechniqueforexecutingSPECS­C++isacompilerthattranslatesSPECS-C++specifca­tionstoAgentsKernelLanguage(AKL)[14]programs.The 
specifcationcanthenbeexecutedbyexecutingthecorre­spondingprogram.Inaconcurrentconstraintprogramming languagesuchasAKL,computationisviewedasasetof 
concurrentagentsoperatingonasharedconstraintstore.A constraintisessentiallyarelationsymbolanditsarguments. 
Agentscanaddconstraintstothestore,andaskifacon­straintisimpliedbytheconstraintsalreadyinthestore.We viewaSPECS-C++specifcationsasexpressingconstraints 
onpost-statevalues,andsointhecompilationprocess,we translateaSPECS-C++specifcationintoaconcurrentcon­straintprogramthataddstheseconstraintstothestore.We 
alsoprovidealibraryofAKLagentsthatimplementthe built-inoperationsofSPECS-C++.Theadvantagesofus­ingaconcurrentconstraintprogramminglanguagearethat 
muchoftheneededcontrolisalreadybuiltintothelan­guage,thattheorderthatconstraintsareprocessedinis rarelysignifcant(correspondingtothefactthattheorder 
thatconjunctsordisjunctsappearinaspecifcationisnot signifcant),thatconstraintsaresolvedefciently,andthat 
backtrackingcanbeusedforfndingmultipleresultsthat satisfyanondeterministicorunderdeterminedspecifcation. 
 3. THE INTERFACE FOR EXECUTING SPECS-C++ SPECIFICATIONS Agraphicalinterfaceforexecutingformalspecifcations 
shouldsatisfyanumberofcriteria.Wefrstpresentthese criteria,andthendiscusshowwellourinterfacemeetsthem. 
 Theinterfaceshouldhidealldetailsofrunningthe translatedspecifcationsfromtheuser.Inourcase, thismeansthattheusershouldneverhavetodirectly 
interactwiththeAKLinterpreter.Sincetypicaltarget languagesarerewritingsystems,orlogicorconstraint programminglanguages,itisunlikelythattheperson 
developingthespecifcationisfamiliarwithusingthe targetlanguage.Interactingdirectlywiththetarget programwhiledevelopingthespecifcationislikelyto 
beconfusinginanycase. Theinterfaceshouldhaveanintegratededitorforde­velopingandmodifyingspecifcations.Theeditor 
shouldprovidesupportforfndingthelocationofer­rorsdetectedbythecompiler.Theusershouldbe abletomodifythespecifcationwhileexecutingit,and 
shouldhavethechoiceofeithercontinuingexecution fromthepreviousstateorrestartingexecutionfrom scratchaftermakingamodifcation. 
Theinterfaceshouldsupportdevelopingandmaintain­ingalibraryofdatavaluestobeusedastestcasesfor specifcations.Otherwise,thepersontestingthespec­ifcationwillneedtobuildupinterestingspecifcation 
statesfromscratchatthebeginningofeachtesting session,andwillnotbeabletoswitchfreelybetween diferenttestcases. 
Theinterfaceshouldsupportatleasttwodiferent modesforexecutingasequenceofthespecifedoper­ations.Inonemode,thepre-stateforeachoperation 
invocationshouldbethepost-stateproducedbythe previousoperation.Thismodemodelsasequenceof operationinvocationsinastandardimperativepro­gramminglanguage.Intheothermode,thepre-state 
foreachoperationinvocationshouldbethesame,so thattheusercanseethediferentpost-statesthatre­sultfrominvokingdiferentoperationsinthesamepre­state.Thisisusefulforcomparingalternatespecifca­tionsofthesameoperation,forexample. 
Theinterfaceshouldbeabletodisplaymultiplepost­statesresultingfromoneoperationinvocation(fornon­deterministicandunderdeterminedspecifcations). 
Thismakesthenondeterminismexplicit,andallows thespecifertovalidateallpossiblepost-states.This criteriaisimportantbecausethespecifcationmaynot 
havebeenintendedtobenondeterministic,andbe­causesomepost-statesmaybewhatthespeciferin­tended,whileothersarenot. 
 TheinterfacewedevelopedfortheSPECS-C++execu­tionsystemmeetsallofthiscriteriaexceptforthelast.We owepartsofthedesignofourinterfacetoanotherdeveloped 
withinourresearchgroup[11,10].Theoverallarchitecture ofthesystem,includingtheeditorandinterface,appears 
inFigure2.Theinterfaceusespipesandtemporaryfles tocommunicatewiththeAKLinterpreter,sotheuseris neverawarethattheAKLinterpreterisevenrunning.We 
alsodevelopedasimpleeditorforspecifcationsthatinter­actsdirectlywiththeinterface.Fromtheeditor,theuser 
caninvokethespecifcationcompilerwithasimplemenu  Figure2:Thearchitectureofthesystemforexecut­ingSPECS-C++specifcations. 
selection.Whenthecompilerfndsasyntacticortypeerror inthespecifcation,theusercanchooseanothermenuop­tiontojumptothelocationoftheerror.Additionally,after 
invokingthecompiler,theusercansimplyresumeexecu­tion,orcanclearthestateofthespecifcationandrestart executionfromscratch. 
Ourinterfaceincludessupportformanagingalibraryof datavalues,andtheusercanconstructthesevaluesbyhand oraddvaluesreturnedfrominvokingoperationsinthespec­ifcationtothelibrary.Theusercanchooseanyvaluefrom 
thelibraryforuseasapre-statevalueinexecutinganopera­tionspecifcationwithasimplemouseselection.Thelibrary 
ispersistentacrossusesoftheinterface,sotheusercanjust beginwhereverheorsheleftofduringthelastuseofthein­terface.Ourinterfacealsoprovidesbothmodesofoperation 
mentionedpreviously,withacheckboxfortogglingbetween themodes. Wearestillworkingonmeetingthelastcriteria,asdis­cussedinSection4. 
Theinterface(andeditor)arewritteninTCL/Tk[22]. WechoseTCL/Tkbecauseitprovidesallofthegraphical objectsweneed,andbecauseitinteractswellwithsystem 
componentswritteninotherlanguages.Forexample,the AKLinterpreterdoesnotprovideanyinterfacesdesigned forinteractingwithexternalprogramminglanguages.Our 
interfacecontrolstheinterpreterusingaread/writepipe thatsimulatesthecommandlineinteractionoftheAKL interpreterwithaperson. 
Ourinterfacedisplaystheprototypesforallmemberfunc­tionsappearinginthespecifcation.Theuserselectsafunc­tiontoexecutewiththemouse.Theinterfacethendisplays 
acallofthatfunctionwithaseparateentryforeachpa­rameterthattheuserneedstosupply.Afterfllinginthe parameters,theusercanexecutethememberfunctioncall. 
Theinterfacealsodisplaysdeclarationsforeachvariablecur­rentlyinuse,andthevaluethateachvariablecurrentlyhas. 
Ascrollablelistboxholdsallofthecurrenttestcases.Dou­bleclickinganyofthetestcasesassignsthetestcasevalue 
totheselectedvariable.Theremaininginformationdis­playedbytheinterfaceincludesthesequenceofpost-states 
resultingfrommultiplememberfunctionexecutions,andthe mostrecentreturnvalue(usedonlyformemberfunctions 
thathaveareturntypeotherthanvoid). 4. CONCLUSION Thegraphicaluserinterfacewehavedevelopedprovides anumberofenhancementsfortheSPECS-C++execution 
system,including: anintegratededitorfordevelopingspecifcations. supportforconstructingandmanagingtestcases. 
 supportforexecutingsequencesofmemberfunction calls,withachoiceofhavingthestateupdatewith eachcall,orhavingthesamepre-stateforeachcall. 
 theabilitytousetheexecutionsystemwithoutknow­ingAKL.  Theseenhancementsgreatlyincreasetheusefulnessofthe 
executionsystem. Wehaveplannedanumberofextensionstotheinterface. Forexample,thecurrentinterfacedisplaysonlyasinglere­sult(post-state)andsinglereturnvalue.Thisisnotaprob­lemforadeterministicspecifcation.However,foranon­deterministicspecifcation,multiplepost-statesandreturn 
valuesmayresultfromexecutingasinglememberfunction specifcation.Theexecutionsystemisabletoreturnthe setofallresultstatesfromanondeterministicspecifcation 
inmanycases,buttheinterfacecannotyetdisplaymul­tipleresults.Wearecurrentlyworkingonatechniquefor displayingmultipleresultsthatwouldallowanyresultto 
bestoredasatestcase,andwouldalsoallowanyofthe resultingpost-statestobechosenasthepre-stateusedfor evaluatingthenextmemberfunctioncall. 
Anotherfutureenhancementinvolvesconstructingand displayingnestedobjects.Here,wemeanobjectsinthe senseoflocationsorl-values,notinstancesofclasses.Ifan 
objectisnested,i.e.,oneobjectcontainsotherobjects,itis notclearhowagraphicalinterfaceshoulddisplaysuchan 
object.Onepossibilitywouldbetodisplayanobjectasa containerorcellwithalinktothevalueitcontains.Weare currentlyexperimentingwiththisapproach. 
Itissomewhatdifculttocompareourinterfacetoothers, asmostpublishedworkonexecutablespecifcationsfocuses 
ontheexecutiontechniqueandthesubsetofthelanguage thatcanbeexecuted,oronsemanticfoundationsforexe­cutablespecifcations.Systemsthatincludeaninterfacefor 
executingspecifcationsincludetheB-ToolkitAnimator[2], SchachandGray'sanimatorforUML[9],andtheanimator 
forIFADVDM-SL[5,12].Alloftheseinterfacesdohide theunderlyingprogramminglanguagefromtheuser.How­ever,noneoftheseinterfacesseemstoprovideachoiceof 
whetherornotthesystemstateupdateswitheachoperation invocation. TheB-Toolkitincludesanintegratededitorfordevelop­ingspecifcations.Aspecifcationcannotbedirectlyedited 
whileitisbeinganimated,althoughtheusercanleavethe Animator,editandrecompilethespecifcation,andthenre­sumeanimation.TheB-ToolkitAnimatordoesnotprovide 
supportforlibrariesoftestcases(althoughthecurrentstate canbesavedandrestoredlater),anddoesnotdisplaymul­tipleresultsfornondeterministicspecifcations.Infact,the 
usermustexplicitlyresolveanynondeterminism. SchachandGray'sinterfaceissimilartoourowninthat isanindependentgraphicalapplicationthatinteractswith 
aninterpreterforalogicprogramminglanguage.However, theirinterfacecanonlybeusedtotestwhetheraspecifca­tionstatesatisfesinvariants,andsodoesnotprovideany 
supportforlibrariesoftestcases,displayingmultipleresults ormanagingsequencesofoperationinvocations. TheVDM-SLToolboxincludesaninterpreteranddebug­gertool.Thetoolhasagraphicalinterface,andincludes 
dialogsinwhichuserscantypeexpressionstobeevaluated. Additionalfeaturesincludeabreakpointandstepcombi­nationinthedebuggerthatallowsspecifcationexecutions 
tobetracedstatementbystatement,andatestcoverage tool.BecauseVDM-SLhasimperativeconstructs(assign­mentstatements,loops,...),thedebuggerisausefulway 
toexecuteVDM-SL.However,thisapproachwouldnotbe ausefulwaytoexecutehigher-levelspecifcationswhichdo notuseimperativeconstructs.Itisnotclearhowwellthis 
approachwouldcopewithnondeterminism.TheVDM-SL Toolboxalsoincludessupportforexecutingasuiteoftest cases(fromseparateflesthattheusermustprepare).The 
testcoveragetoolcanthengatherandcompilestatistics showinghowmuchofthespecifcationthetestsuitecovered 
andsoon.Hence,theToolboxdoessupportalibraryoftest casesinonesense,althoughtheinterfacedoesnothelpin managingthelibrary.TheToolboxhasnointegratededi­tor,andsodoesnotallowspecifcationstobechangedwhile 
theyarebeinganimated. Hence,ourinterfacealreadyhasauniquecombinationof featuresnotfoundinotherinterfacesforexecutingformal 
specifcations.Wehaveusedourinterfaceextensivelyinde­velopingandvalidatingspecifcations,andhavefoundthat 
usingtheinterfacealleviatesthetediumofrunningtheAKL interpreterdirectlyandmakesinterpretingtheresultofexe­cutingaspecifcationmucheasier.Additionally,theability 
tosaveandrestoretestcaseshasprovenextremelyuseful. Usingtheinterfacealongwiththespecifcationexecution 
systemmakesdevelopingspecifcationfasterandeasier,and allowsspecifcationstobeusedinwaysthatnon-executable 
specifcationscannot.Theinterfacewillbeevenmoreuseful whenwehavecompletedworkondisplayingmultipleresults 
andbuildingnestedobjectvalues.Hence,theinterfaceand executionsystemwillhelpinovercomingthelimitationsof 
formalspecifcations,andsoshouldincreasetheusefulness offormalspecifcationsinpractice. 5. REFERENCES 
<RefA>[1]J.R.Abrial.TheB-Book:AssigningProgramsto Meanings.CambridgeUniversityPress,1996.ISBN0 521496195. [2]B-Core(UK)Ltd.B-Corewebsite. 
http://www.B-core.com/. [3]P.T.BreuerandJ.P.Bowen.Towardscorrect executablesemanticsforZ.InJ.P.BowenandJ.A. 
Hall,editors,ZUserWorkshop,Cambridge1994, WorkshopsinComputing.Springer-Verlag,1994. [4]J.DaviesandJ.C.P.Woodcock.UsingZ: 
Specifcation,RefnementandProof.International SeriesinComputerScience.PrenticeHall,1996. [5]R.Elmstr0m,P.G.Larsen,andP.B.Lassen.The 
IFADVDM-SLtoolbox:Apracticalapproachto formalspecifcations.ACMSigplanNotices,29(9):77 80,September1994. 
[6]J.S.FitzgeraldandP.G.Larsen.ModellingSystems: PracticalToolsandTechniquesinSoftware Development.CambridgeUniversityPress,1998.ISBN 
0521623480. [7]B.Froohlich.ProgramGenerationBasedonImplicit DefnitionsinaVDM-likeLanguage.PhDthesis, 
TechnicalUniversityofGraz,December1998. [8]N.Fuchs.Specifcationsare(preferably)executable. SoftwareEngineeringJournal,7(5):323 
334,  [9] [10] [11] [12] [13] [14] [15] [16] [17] [18] [19] [20] [21] [22] [23] September1992. J.G.GrayandS.R.Schach.Constraintanimation 
usinganobject-orienteddeclarativelanguage.In Proceedingsofthe38thAnnualACMSEConference, pages110,Clemson,SC,April2000. 
M.Gurski.TheClassValidationSystem.PhDthesis, IowaStateUniversity,Ames,Iowa,50011,2000. Expected. M.GurskiandA.L.Baker.TestingSPECS-C++:A 
frststepinvalidatingdistributedsystems specifcations.InProceedingsoftheISMM InternationalConferenceonIntelligentInformation 
ManagementSystems,pages105108,Washington, D.C.,June1994. IFAD.VDMTools:VDM-SLtoolboxusermanual. 2000. 
D.JacksonandC.Damon.Semi-executable specifcations.TechnicalReportCMU-CS-95-216, SchoolofComputerScience,CarnegieMellon 
University,1995. S.JansonandS.Haridi.AnintroductiontoAKL-a multiparadigmprogramminglanguage.InConstraint 
Programming.NATO-ASISeriesvol.131..Springer Verlag,1994. C.B.Jones.SystematicSoftwareDevelopmentUsing 
VDM.InternationalSeriesinComputerScience. PrenticeHall,EnglewoodClifs,N.J.,secondedition, 1990. G.T.Leavens,A.L.Baker,andC.Ruby.Preliminary 
designofJML:Abehavioralinterfacespecifcation languageforJava.TechnicalReportTR98-06i, DepartmentofComputerScience,IowaState 
University,Ames,Iowa50011,Feb.2000.See www.cs.iastate.edu1~leavens1JML.html. G.O'Neill.AutomatictranslationofVDM 
specifcationsintoStandardMLprograms.The ComputerJournal,35(6):623 624,December1992. J.M.Spivey.AnintroductiontoZandformal 
specifcations.SoftwareEngineeringJournal,4(1):40 50,Jan.1989. T.Wahls.SPECS-C++executionsystem.Available 
viatheWebat: http://cs.hbg.psu.edu/~wahls/pubs/specs-c++.tar.gz. T.WahlsandG.T.Leavens.Formalsemanticsand 
soundnessofanalgorithmfortranslatingmodel-based specifcationstoconcurrentconstraintprograms. TechnicalReport00-02a,DepartmentofComputer 
Science,IowaStateUniversity,226AtanasofHall, Ames,Iowa50011,Aug.2000.Availableby anonymousftpfromftp.cs.iastate.eduorbye-mail 
fromalmanac@cs.iastate.edu. T.Wahls,G.T.Leavens,andA.L.Baker.Executing formalspecifcationswithconcurrentconstraint 
programming.AutomatedSoftwareEngineering, 7(4):315343,December2000. B.Welch.PracticalProgramminginTclandTk. 
Prentice-Hall,EnglewoodClifs,NJ07632,2nd edition,1997. M.WestandB.Eaglestone.Softwaredevelopment: twoapproachestoanimationofZspecifcationsusing 
Prolog.SoftwareEngineeringJournal,7(4):264 276, July1992.</RefA>  
			
