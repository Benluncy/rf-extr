
 Computer Graphics Volume 15, Number 3 August 1981 A METHOD OF INTERACTIVE VISUALIZATION OF CAD SURFACE 
MODELS ON A COLOR VIDEO DISPLAY Peter R. Atherton General Electric Company Corporate Research and Development 
Schenectady, New York 12345 Abstract To introduce rendered surface display technology into the production 
design environment, many CAD operations envision a single color video display device for download processing 
of selected model pictures. Creation of a single image from a typical industrial CAD model involving 
a large number of higher order curved surfaces will normally require a minimum of several minutes' delay 
for data acquisition and visible surface computation. This paper describes a method that extends the 
visible surface operation to give the designer an interactive tool with which he can more effectively 
comprehend model composition. Instead of defining data for a single image, an intermediate three- dimensional 
structured file is created. A tailored display program manipulates the structured data file allowing 
a user to interactively create surface rendered images. Program capabilities include: Section and cutaway 
viewing  Selected surface color, transparency, or translucency  Shadows projected from desired light-source 
locations  Changing or combining any of these facilities requires only seconds for a new image to be 
created. Key Words: computer graphics, computer-aided design, color video display, hidden surface removal, 
depth buffer, geometric modeling Computer Review Categories: 8.2 Permission to copy without fee all 
or part of this material is granted provided that the copies are not made or distributed for direct com- 
mercial advantage, the ACM copyright notice and the title of the publication and its date appear, and 
notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, 
or to republish, requires a fee and/or specific permission. &#38;#169;1981 ACM O-8971-045-1/81-0800-0279 
$00.75 1. Introduction For the purpose of three-dimensional model visuali- zation, many hidden surface 
removal algorithms employ a scan-line or image space depth buffer [3,7,11,13,15]. This approach is conceptually 
based upon a three-dimensional array whose nodes directly correspond to the picture elements of a display 
screen. Visibility of each surface is derived in terms of the X-Y elements by performing depth comparisons 
to each relevant node in the array. In concept, the three-dimensional display buffer to be explored in 
this paper is a direct extension of the two-dimensional visible surface structure (Fig-ure 1). The data 
describing hidden surface elements, instead of being discarded, are maintained in a depth priority order 
linked to each X-Y element location. In recent years, some interesting computer graphics work has been 
accomplished using a three-dimensional display file. In 1979, Kay described a method of creat- ing sophisticated 
synthesized images [9] that was similar to the method published by Whitted that same year [16]. Both 
authors employed a methodology of firing a visual ray from the viewpoint into the model en- vironment 
and subsequently reflecting or refracting it into sub-rays. The major difference between the two al- 
gorithms is that Whitted used the original mathematical surface model definitions throughout, while Kay 
prepro- cessed the surface model, constructing a three-dimensional frame buffer. Although Kay's method 
is limited to picture element accuracy, it is general enough to handle any surface type. In 1979, Csuri 
et al. described an animation system that is centered around the use of a three-dimensional frame buffer 
[4]. Utilizing the implicit generality offered by this data structure, they created images of highly 
complex three-dimensional models comprising hundreds of thousands of triangular surfaces. Csuri made 
one particularly astute application by noting the simplicity of combining individual models. For exam-ple, 
a three-dimensional landscape setting could have a bird fly through it for several frames without having 
to regenerate the three-dimensional pixel landscape data. Following the two-dimensional techniques for 
image scene reconstruction, such as those described by Samet, Dyer, and Rosenfeld [5,14], many research 
groups are developing sophisticated algorithms for model compac- tion and reconstruction from three-dimensional 
frame buffer data. In 1979, Rhodes published a method 279 Computer Graphics Volume 15, Number 3 August 
1981 ! I I i I I I I I I I I I I I A. Viewpoint projection B. Visible surface depth buffer C. Three-dimensional 
display buffer Figure 1. The three-dimensional display buffer is an extension of the visible surface 
depth buffer. minimizing storage and computing requirements neces-sary to locate the contours of randomly 
shaped objects described by cross section image planes [12]. In 1980, Artzy, Frieder, and Herman developed 
a method by which surfaces might be derived from three-dimensional volume element or "voxel" data [2]. 
In past efforts employing a three-dimensional frame buffer, the technology of image generation has been 
oriented towards an animation ideology. Consequently, a great deal of time is still required to create 
each image for a mathematically complex curved surface model. The kernel of the speed problem is that 
rotation of a three-dimensional surface model does not lend itself to the digital grid representation 
of video display. When the rotation capability is left at a traditional processing speed level, the characteristics 
can be effectively ex-plored which make the three-dimensional frame buffer such a congenial environment 
to interactively study CAD surface and solid models. The remainder of this paper is devoted to the methodology 
behind this ap-proach and the various applications and implementations that might be considered. 2. Potential 
Forms of the Three-Dimensional Display Structure At this point, no particular structure of the three-dimensional 
display buffer has been specified. Some readers may have already considered a number of different structures 
that might be employed. For an ap- plication like fluid flow, accurate floating point depths could be 
maintained at each X-Y picture element corresponding to surface point locations (Figure 2-A). For solid 
modeling, a run-length format might be used to designate a homogeneous material continuum (Figure 2-B). 
A mathematical function could replace material depth values when describing continuous stress or heat 
variations through a solid. A rather simplistic yet effective three-dimensional frame buffer structure 
will be considered to make the following image generation procedures easier to explain. The basic organization 
can be thought of as a three-dimensional grid matrix whose fundamental elements are essentially three-dimensional 
volume elements or "voxels." These voxels are derived from equally spaced increments along the orthogonal 
X, Y, and jx A. Fluid flow model B. Solid Model Figure 2. Various forms of the three-dimensional display 
buffer 280 Computer Graphics Volume 15, Number 3 August 1981 Z-depth axes on an integer basis. Creation 
of a data model to be contained in this three-dimensional grid matrix involves a process similar to the 
rasterization technique used in many image space, hidden surface re- moval programs. Essentially, the 
process of "voxeliza- tion" delineates each surface of a model by the three- dimensional grid elements 
that contain it in space (Figure 2-C). To conserve space, the three-dimensional grid would employ a compacted 
sparse matrix format by including only voxels that were a part of a surface description and by combining 
any homogeneous con-nected elements. Henceforth, this three-dimensional, reduced sparse matrix will be 
referred to as an object buffer matrix. Figure 2-C. Three-dimensional grid Some negative factors involved 
in the use of the ob- ject buffer matrix should be acknowledged. Although creation of the object matrix 
demands only a little more computing time than a single static image, it does re-quire significantly 
more data space depending upon im- age complexity and display resolution. This factor does affect implementation 
and is directly addressed in a later section of this paper. 3. Image Generation The speed of image generation 
was the foremost concern in the development of the algorithms to be described in this section. Consequently, 
the inherent intricacies of reflected and refracted light modeling, which would cost a considerable increase 
in processing time, were put aside. For the image generation descrip- tions that follow, the terms "translucency" 
and "tran-sparency" refer only to an approximation of the amount of light passing through a surface or 
mass. This deficiency of physical-world realism might initially be perceived as a liability, but it has 
evolved as an asset for the application of interactive CAD model visualization. A complex CAD assembly 
can be visually dismantled to reveal various components by seeing through selected parts without the 
physical problems of glare and distor- tion. Initially, it is assumed that the object matrix voxels will 
contain only one piece of information that describes the display color of the related surface point. 
As with most surface rendering algorithms, the display color is determined from a combination of a preassigned 
hue with an intensity that relates the lightsource and surface orientation by Lambert's cosine law. In 
terms of the object matrix organization, voxels along the Z-depth axis are ordered from nearest to farthest 
from the viewpoint. Modifications of this basic structure will be noted in the algorithm descriptions 
that follow. Hidden Surface Removal Once the model surface data have been delineated into the three-dimensional 
object buffer, hidden surface removal is a trivial operation. For each X-Y picture display element, the 
nearest voxel to the viewpoint is rendered (Figures 3-A and 4-A). In terms of an algo-rithm, the object 
matrix is traversed once, selecting the first element along each Z-depth vector to be displayed. Thus, 
implementation of a hidden surface image re-quires only branching operations for the matrix traversal 
procedure. Cutaway and Section Views Using various interactive devices, a designer can easily define 
a slicing plane that will pass through a selected area of the object matrix. A cutaway view can then 
be generated by ignoring the voxels that lie in front of the cutting plane and applying the hidden sur-face 
removal process to the remainder of the object ma- trix. Algorithmically, each Z-depth vector is searched 
to find the first element that falls behind the point where the cutting plane intersects that vector 
(Figure 3-B). Figure 3-A. Hidden surface removal Figure 3-B. Cutaway Computer Graphics Section views 
can be generated by displaying only those voxels that are actually intersected by the cutting plane. 
For an improved visualization, cutaway views can be enhanced by highlighting the section cut edges and 
thus improving visual comprehension (Figure 4-C). Cutaway and section views do not have to be limited 
to infinite planer cutting surfaces. Higher order curved surfaces can also be used to slice through an 
environ-ment under user control to produce certain desired effects. Bounded surfaces can be used to selectively 
separate or cut away portions of the model. By combin- ing bounded surfaces to define a volume, a user 
could visually isolate the region of interest he wants to focus on. At this point, the important concept 
to stress is that the image regeneration process is very fast. This speed is inherent in the algorithmic 
simplicity and the natural relationship between the object matrix format, the video display, and the 
digital computer. A program to create a section-cut or cutaway image just needs to make a single pass 
through the object buffer and execute only branch and compare statements for matrix traversal. It is 
this simplicity that leads to fast program execution, allowing the designer to study a model in an interactive 
manner. Therefore, the cutaway and sectioning algorithms could become viable tools for computer-aided 
production design. Transparency The notion of transparency directly implies an attri-bute that must be 
attached to every surface definition. Accordingly, each three-dimensional matrix element must either 
contain this information or accommodate an association to its surface source. When a user specifies a 
surface to be transparent, the hidden surface removal program simply ignores the appropriate object matrix 
elements (Figures 4-B and 4-D). On an X-Y display pixel basis, the program will search for and display 
the first element along the Z-depth vector that is not tran- sparent (Figure 3-C). Again, implementation 
requires only a single traversal of the three-dimensional object matrix executing branch and compare 
operations. Thus, image creation involving selective transparency is still very fast and can be executed 
comfortably in an interac- tive environment. 11 /  Volume 15, Number 3 August 1981 through an associated 
surface voxel, the translucency al- gorithm will remember what translucent surface ele-ments it passed 
through and utilize that information in determining the resulting color to be displayed. The amount of 
influence that the translucent surface has on the final color is directly related to the amount of light 
that can pass through it. Consider for example a Z-depth vector whose closest element (to the viewpoint) 
has a translucency association and has been designated blue. If the next element behind it has an opaque 
asso- ciation, then the color rendered is that color assigned to the opaque element tinted with an appropriate 
amount of blue (Figures 3-D and 4-F). Algorithmic execution speed is hindered little by the incorporation 
of translu- cency because only a single traversal of the object ma- trix is still required. When a translucent 
element is found along a Z-depth vector, an addition operation is sufficient to perform the color modification. 
b- Figure 3-D. Translucency Shadows With the three-dimensional object buffer, shadow generation becomes 
a very general operation since any number of light sources can be located inside or outside the data 
model environment. In a manner similar to the method described by Appel [1] and Bouknight and Kelley 
[3], a ray is projected from every visible surface element towards each light source (Figure 4-E). If 
the light vector intersects an opaque voxel, the surface ele- ment is in shadow (Figure 3-E). If the 
light vector passes through a translucent voxel, the surface element is in a tinted shadow. Figure 3-C. 
Transparency Translucency Translucency is a natural extension of transparency. Where both operations 
allow the visual ray to pass Figure 3-E. Shadow generation Computer Graphics Volume 15, Number 3 August 
1981 Shadow generation is the one image capability that cannot be accomplished in a single pass through 
the ob- ject matrix buffer. For every light vector that is con- sidered, various portions of the object 
buffer matrix must be directly accessed to determine the shadow pro- perties. Implications of this characteristic 
will be dis-cussed further in the implementation section of this pa- per. Combinations of Effects Utilizing 
the flexibility of the object buffer matrix and the image generation algorithms previously described, 
a designer can create a vast number of very interesting and informative images. For example, a model 
with some surfaces designated as translucent can also be viewed with the application of a cutaway opera- 
tion (Figure 4-H). It may be desirable for particular surfaces to be designated as opaque to light-source 
rays yet transparent to the viewer. In this way, an architect could visually get inside of his model 
to better analyze shadowing implications. Cutaway views could be gen- erated selectively so that the 
user could look into one component while the remainder of the model would be unaffected. The cutting 
surface used in a cutaway view can be delineated by section cutting external model sur- faces, and performing 
a cutaway operation on the remainder of the model (Figure 4-G). To reiterate, the object matrix structure 
is very amenable to rapid and systematic display of advanced surface and solid model imagery. Therefore, 
this ap- proach can be taken to provide an effective tool for im- proved visualization of sophisticated 
three-dimensional CAD surface models. 4. Interactive Response of Various Implementations In terms of 
CAD interactive response times, there are three general ways of implementing a three- dimensional object 
buffer display program in software. Owing to the speed and simplicity of the image genera- tion algorithms, 
response effectiveness is primarily dependent upon access to the three-dimensional object buffer matrix 
and to the color video display memory. For operations limited to smaller minicomputers, the three-dimensional 
object matrix can be obtained by the host computer from some peripheral storage device like a magnetic 
tape or disk drive. In this way, each Z-depth matrix vector could be sequentially accessed and subse- 
quently output to a color video display system in scan- line fashion. The speed of this type of implementation 
is obviously dependent upon the amount of time re- quired to read the object data from the peripheral 
storage device. Utilizing this approach, sophisticated color video images involving hidden surface removal, 
transparency, translucency, cutaway, and sectioning can be generated from the object matrix in a matter 
of seconds or minutes. However, generation of images with shadows is generally unreasonable because of 
the random nature of the data access requirements. Even without shadowing, it is very significant that 
even small- er computer systems with relatively low-cost color video display systems can produce sophisticated, 
rendered sur- face imagery in a reasonably interactive manner. Image generation execution times can be 
greatly re- duced when the three-dimensional object matrix buffer can be loaded into either the host 
computer memory or a fast, directly addressable peripheral memory. For any CAD model of reasonable size, 
the host computer would be required to have some sort of virtual or ex-tended memory capability. One 
very practical source of a fast peripheral device would be the color video display frame buffer memory 
which is usually accessible via a DMA type of interface. Using the hardware zoom and scroll capability 
that is standard on most commercial, high-resolution color video display systems, one portion of display 
memory can be viewed while the remainder is used for model data storage. With the object descrip- tion 
matrix directly accessible, images that include sha- dows are quite feasible to produce. In general, 
locating display buffer data on the peripheral display memory will require a less sophisticated host 
computer, but im- age generation times will be shorter when the data re-side in the host computer. In 
either case, communica- tion with the color video display system will usually be the slowest link for 
both implementations. Nonsha-dowed images will typically require only a few seconds to generate, while 
shadowed images will demand a minute or more. The ideal implementation would involve a powerful processor 
which has very fast direct access to both the three-dimensional object description matrix and the color 
video display memory. There are commercially available color video frame buffer display systems that 
offer such capabilities and are readily adaptable to the image generation schemes previously described. 
With such an implementation, near real-time execution speeds can be achieved for nonshadowed images, 
and shadowed images can be generated in a very few seconds. With this kind of implementation, a designer 
could simply turn a dial and visually cut through a so- phisticated color video rendered surface display 
of his creation. Each progressive implementation involves a magni-tude of speed improvement and a similar 
hardware/software cost increase. Yet, each one is a very significant improvement over the "traditional" 
static image display presently being proposed to computer-aided design people. 5. Applications Since 
the primary motivation for this work is to pro- vide a more viable design aid for CAD engineers, the 
major theme of this paper has been the color video display of three-dimensional surface models. Exploiting 
the visualization capabilities described herein, a mechan- ical engineer could interactively inspect 
complicated as- sembly models and study various intercomponent link- ages (Figure 5). An architect could 
exhibit various ele- ments of a building design, add or delete selected modules, and demonstrate lighting 
and shadow charac- teristics. With its extended methods of data extraction, the three-dimensional display 
buffer can provide a natural vehicle for the color video display of more amorphous geometries. For example, 
data generated from a series  Computer Graphics Volume 15, Number 3 August 1981 COVPUTERVI S I ON DESIGN 
STATION I IGES ] SURFACE DEFINITIONS CONVERT TO RATIONAL BICUBIC ,f CON~RT SS COLOR VIDEO DISPLAY TO 
DISPLAy FORM ,I,I DISPLAY I NFOI~VIATION I~E~I~ I S'NIttAVISI(ll ' DISPLAYpRoGRAM k (MAGI INC,) DISPLAY 
CC~S INTERACTIVE USER HOST COMPUTER (PDP]]Y70 OR VAX) Figure 6. System organization computer-aided tomography 
scans can be interpolated into a three-dimensional format. Using the image gen- eration techniques previously 
described, tissues could be systematically dissected, looked into, shadowed, and peeled off to provide 
a superior visualization of the hu- man anatomy. In a similar manner, various geological strata could 
be visually sectioned and peeled to reveal oil reservoirs or potential earthquake formations. 6. Trial 
Implementations The color video images in Figure 4 were generated from geometric models originally created 
on the Com- putervision turnkey design system (Figure 6). Surface definitions were transmitted to a PDPll/70 
minicom-puter and converted into a rational bicubic format suit- able for use in the Computer-aided Sculptured 
Surface pre-APT Processor commonly referred to as CAS-PA [8]. In the future, an interface to the Initial 
Graph- ics Exchange Specification (IGES) neutral data base will be developed so that CAD surface models 
can be ac-cessed from any turnkey design system [10]. Using an extended bicubic hidden surface removal 
program, the sculptured surfaces were transformed to a desired view and delineated into the object matrix 
format previously described. The three-dimensional display buffer used to create the images for Figure 
5 was built with data extracted from the SYNTHAVISION program developed by MAGI Inc. Instead of taking 
the form of an object ma- trix, this display buffer was implemented in the form of a solid object description. 
In concept, each Z-depth vec- tor contains the entry and exit points of all solid objects that lie in 
its path (Figure 2-B). The region between these points is understood to represent an area of ma- terial 
continuum which must be accounted for during cross section, shadow, and translucency determinations. 
Early images were created by sequentially reading the object matrix from a disk file and displayed at 
256x256 resolution on a DeAnza 2000 series color video display. Initially, the program was developed 
to interactively generate section and cutaway views of sculptured sur-face data. As the advanced imaging 
potential became obvious, the program was moved to a VAX 11/780 computer where the object matrix could 
be directly ac- cessed from virtual memory. Subsequently, a shadow- ing capability was added to the existing 
transparency, translucency, and sectioning facilities. The images in Figure 5 were taken from an Ikonas 
color video display system and displayed at 256x256 resolution. A fast im- plementation will be developed 
after delivery is taken on the Ikonas microprocessor which is integrated within the system architecture. 
7. Conclusion A technique of interactively analyzing complex three-dimensional CAD surface models on 
a color video display has been presented. The method involves a unique and effective utilization of a 
three-dimensional display buffer structure. By putting aside real-time rota- tional capability [6], the 
user can employ a variety of imaging techniques that can be selectively applied to visualize a CAD model 
in an interactive mode. The three-dimensional display buffer has also been shown to be a valuable resource 
for visually analyzing other models, such as CAT scan and geological forms. Even with data compaction 
techniques, the three-dimensional display buffer does require a relatively large 286 Computer Graphics 
Volume 15, Number 3 August 1981 data space. However, the extra memory or peripheral storage may be an 
insignificant trade-off for the speed and sophistication of image generation that is gained. For example, 
previous algorithms involving a sizable number of translucent and opaque bicubic surfaces could often 
require hours and even days for a shadowed image to be generated when simply moving a light source. With 
a three-dimensional display buffer, similar imagery may be generated in minutes or even seconds. Since 
the cost of memory is continually declining, future benefits will be even more prolific. 8. References 
 <RefA>1. Appel, A., "The Notion of Quantitative Invisibility and the Machine Rendering of Solids," Proceedings 
ACM, 1967 National Conference. 2. Artzy, E., Frieder, G., and Herman, G.T., "The Theory, Design, Implementation 
and Evaluation of a Th/'ee-Dimensional Surface Detection Algo-rithm," SIGGRAPH 1980 Proceedings. 3. 
Bouknight, W.J., and Kelley, K.C., "An Algorithm for Producing Half-Tone Computer Graphics Presentations 
with Shadows and Movable Light Sources," SJCC, AFIPS, Vol. 36, 1970. 4. Csuri, C., Hackathorn, R., Parent, 
R., Carlson, W., and Howard, M., "Towards an Interactive High Visual Complexity Animation System," SIG-GRAPH 
1979 Proceedings. 5. Dyer, C.R., Rosenfeld, A., and Samet, H., "Region Representation: Quadtrees from 
Binary Codes," CACM, June 1980. 6. Fuchs, H., Clark, J., Cohen, D., Newell, M., Parke, F., and Sproull, 
B., "Trends in High Performance Graphics Systems," SIGGRAPH 1980 Conference Panel.  7. Goldstein, R. 
and Nagel, R., "3-D Visual Simula- tion," Simulation, January 1971. 8. Hinds, J.K., Kuan, L.P., "Sculptured 
Surface Tech- nology as a Unified Approach to Geometric Definition," Computer and Automation Systems 
Asso- ciation of the Society of Manufacturing Engineers, 1979. 9. Kay, D.S., "Transparency, Refraction 
and Ray Tracing for Computer Synthesized Images," M.S. Thesis, Cornell University, January 1979. 10. 
Nagel, R.N., Braithwaite, W.W., and Kennicott, P.R., "Initial Graphics Exchange Specification IGES Version 
1.0," National Bureau of Standards, January 1980. 11. Newell, M., Newell, R., and Sancha, T., "A New 
Approach to the Shaded Picture Problem," Proceed-ings ACM, 1972 National Conference, 12. Rhodes, M.L., 
"An Algorithmic Approach to Con- trolling Search in Three-Dimensional Image Data,"  SIGGRAPH 1979 Proceedings. 
13. Romney, G., Watkins, G., and Evans, D., "A Real Time Display of Computer Generated Half-Tone Perspective 
Pictures," IFIP 1968, Amsterdam, North-Holland, p. 973. 14. Samet, H., "Region Representation: Quadtrees 
from Binary Codes," CACM, March 1980. 15. Watkins, G., "A Real-Time Visible Surface Algo- rithm," Computer 
Science Department, University of Utah, UTECH-CSC-70-101, 1970. 16. Whitted, J.T., "An Improved Illumination 
Model for Shaded Display," CACM, June 1980.</RefA>  
			
