
 A Model for Studying Ambiguity in SGML Element Declarations t$R W. Matzcn, tK M George tG. E Hcdrick 
?OklabomaStateUnivmity $TMs Inc  The Staudard ~%~(-)kab me-fm~ repm@hlthatwas adoptedas an Bostandmdirl 
1986. IxlSGIt&#38;ekmmt deckratieawdefine thelogicslcompme@ (ekmenta)ofdocmm@ aeantentmodeI isthepsrt 
ofanel~tdcelaratkm thatdctin caticant atof the elements. SGML detinea aod prohibits amb@ous eoatcmt models 
butdoes notahowamethod fardetcdhgtheln. Model Pw, the only required ampmenb ofeultent aare expmasionsaimilart 
oregukrqmaakms. -nlispapec defines ambiguous model groupaandgivcaan algorithm fbrdetdng them. whentheoptionsl 
CmpowdSofelement declamtiom are notumai~t healgorithmdetects ar@uoua~tmodels aadefiwd bythestandadlhe 
algorithm is bawed ona conatm&#38;eai ofindexed NFAs in which edarcisbound toa particular Occulrense 
of an eland sydd in a model group. Kqwor&#38; SGM.L, Stmukd GenediA -LwW&#38;s electronic publish@ text 
pwcssiq Inlmdu&#38;m TheStandardomedizd q~(WW)ha flexible ~ fix &#38;fining doeumed stmctum. Itwss adopted 
as an international standdj XSO 8879, in 1986 and is rapidly becming acqtedinindus@, ~ and amdemia [4,5,12]. 
The widespread aea@mce ofsGMLeanbe SttIibuted totwo Mb@idhg f~l. Itis basedoll descriptive marbpthat 
aepmtesthelogieal mqmenta (elements) of a &#38;eument Ssoppaacd toproeedd mafkuptbat deflnea the physical 
~ (fomWing)ofa~ 2. It isameta-language syatanfmdomnnent dehitioarathtr thaua specific malkupschemeford 
oementdeadptioa. Ahnoat any kindofdocument atrwtum earl berqmentd in sow exptwsions ealkdekmentdeel matiens 
areuaedtodefilw arbitrary elements of dmmwnta andtof-yapecify the emltextill whichtheelenlents mayoccur. 
Althoughclemlent deek3ations arcelegantandpowerf4 theyeau introduce ambiguity into b high level syntax 
of dmlment specifications. A eontent model is the part of an element declalationthat defima the eontalt 
of the demerits. SGML ~toCWY_tiA=@Mti~bS=M_~ th4*8ml10tA0ramRlwwlbr*~ ~theAiX ~atn-~ti-~ti~ti~-~,~~b 
$vcmtbn~bbypodmh atthcAwddm IorCoqudqIMdimDry.To ~ath6mbq0r mlqlubbL ~8foemdi0r spdcped#tial. --$Ac~-Q 
1933ACM 039791-36&#38;~L30 ddinesandpfehibits diguoua cxmtaltmodda tnltdoesmt giveametlwd fm&#38;tecthg 
them-Anmdel group, the only e~ofa~-,ismemthat defimatk mmtento feknentsintenn aoftext and other ekamts.l 
h estadard ~alwwabyexamp kthatmaklpups can bcmbigumw emtcatmodcla. ~, itdoeanot atate wbether ornotthe 
other mmpmenk of ekawnt declarations afkctthedefinition ofamb@ous eaatcntmodela. Follow@an Wide on ambi@y 
in SGML [10], the editors of ~AG> eommmt w ewlaxtwyour mmmentsmthisisaue, ~Y, a w that ma@m@kWY proves 
or diSPIUVeS whether itispossibk to!indallamb@ous mntentmodels..." Iothispaper welayafouudation fmanmmiog 
this question. In thetitwos eetionswepmvidethe ~~~ language theoxyandvve detineack3s ofrmgnizm, systemsof 
au@oMa. Inthethird section weprovide the neccssq SGML kkgmund. hthefoufths ectionvvemnstmct apafaerformodel 
_WkHma-of~ tipameris derived directly tilllnth esystemofsjlltax pmktieatbat define model groupdl. uaingthisparaervm 
dezivcandgorithm fa umatIW@ mddml@Mc finite I@amata @FA3) tioln model groupa. Input totheaIgorithm isanwdclgroup 
andoutput isan NFA rec@Ang thekngusge speei6edby the model ~,then.wtho disaimila rtolkaopads methodfm 
~NFAafkom legukraqKc&#38;oM [1]. In the m aection wmtdumw lmwtoindexthe NFAs to biruieacham toa m~ ofaaymbolinthcmodel 
gfoup. Jnthcsixtb aection weusetk indaxed NFAatoddne amb@ous model 6roupa, andwgive analgorithm fm detect@ 
them while Pafaing theelement decorations. htk Scventhaectionw dimlsarelatedul lxk oucmethoda suppe4ttksGML 
definition ofamb@uusaontent models andouralgoxithm detectaamb@oua model gfoupa. Whenthcoptkmal mmpmmts 
of elemsmtdeclarations are not Consiqour algcsitbm detects anlbiguous Contultmodclaas dcfinedbythe Wmdard.Another 
si@caat lwultofthispaper isourdef3nition ofsyskmaofa@mna@ wedemm@@e that these ree@zemesn beusedtobuild 
SGMLpamcrs thatrequire minimal conversionsthnlonefdsysteln toanother. Reviewof Lungnage ~ Concap@ Inrhiaaectionwe 
bcieayreview aomebaaiceleaumta ofknguage x-->-e-~~ ­autmnata (NFAs). We adopt the notatkm and ddinitions 
ho [12], with a fm minor mriathm 668 Ad~ztiati@-of-h.A_cov=Zisa setofatrings ~ofsymbolsin Zandpossibly 
the empty string, e. fllecomtenW onoftwo @uagea Lland L2, wMeo as LlL2, iathesct ofallatringsxy, SuChth8tXiSiOLldyiS 
in L2. l%ecloaum ofakmguage L, L*, istheempty~e, pluatheaet ofdatringsthat can becmtmted w~ anynumberofstringa 
inL. -r Expmadomsand Regular m --wm-tidenoteack Of languagea ctdledtheregular aets. Aregularexpmasion 
over Zis&#38;6nedax l.{} isaregularexpmsai ondendi ngtheregulars et{}. 2.eisare@ar expeaaion &#38;meting 
theregutar set {e}. 3.ain2is aregular expmaaion denoting there@ar set {a}. 4. Ifpandq arereguiar expmsaiorB 
&#38;noting there@araeta P and Q a.@q)isan@ar expmaaionden@ing PwQ. b.(@isaregular exprwaion&#38;noting 
FQ. c.(p )isare@ar expIwaion denotins P*. L(s)iathehoguage denoted bytheregldarexpmasi%s. Nondatarminiatic 
Fink Automata A nodetmmm tic fite automaton (NFA) is a 5-tuple, M={Q,Z,6,q@}, where l, Qisafinite setofstates. 
2. Z is a finite set of input symbols (the input alphabet). 3,8isthe state transitim function thatmapa 
(Q X(Zwe))to subsets of Q. 4.qOisaatate in Q:theatart atateofM. 5. Fisasubaet of Q.thefinal (oracce@ng) 
stateaofM. When8mapaa atateqandinput symbol atosomeaubaetofQ, {P?}, ~ _ ~ _ by M%a)+p and 8(~a)+r. To 
illustrate comepta orproofsweaomehes use a representation of NFAs in &#38;aph form as followm ~-whtiqti-tiitisti~-, 
dtitiuble circlearoundrindicatm thatitis afinalatate. If Misan NF~then acor@mtiaof M is(~w), whereqis 
thecment atateof Mandwisthe mmining inpuca stringof symbols in Z . An initial conilguration is of the 
form (qo,w) and a fd con@mtian is of the fbrm(q,e), where q is in F. Amve~ti~~~,i sab@~htia( ati=tofti 
paaible configurations) such that if 5(~a)+p, then (~aw) 1­(p,w). The transitive closure of 1-is denoted 
by 1-+,the reflex.he transitive closure by [-*, and ~n denotes n moves. An input string win Z is mqnized 
(acqted) by M if (qo,w) }- (q,e) forsomeqinF. L(M)denateathe hnguagereco@edby M. 1; A system of autorna@ 
S, is a 6-tuple, (MY,z>f ,w)> ­ 669 1. M is a finite ad of NFA&#38; Mi, i=l...n. We denote the ~of*Mi~Qi,Xi,~qoi,dFi. 
2. N isa ~ of uoiq~ -b(~) f~Mi, i=l...m b tlM NnZiaempty. We~tk~hk fmMi, i=l...~~N1. 3. Xistheinputalphabet 
fmS. Each~iaaaubaet of(Xu N). 4.rtiti W@-&#38;~~, ~l,@fmi=l...ndqti Q. 5. Aiaamappiog tiom(r Xr*X(NUZue)) 
to~X~), and is derined by 6i, i li.n as follow For each ~, and fm all q(~a~p aoda inr : A.ifa isin(Xu 
e), then 4 (Mi,q.),% a)-@fi,P),a). B. if a=Nj f~ _ j=l...% then  qWi3@,a.aMWj,~)j~i$P~), ~ f~ ~ ~ ~ 
f in Fj, A((Mj,f),(Mi,p)a,eHA(@fi,P)*a) 6. Moiathetop level (orat@ing)~ wherc~issome Mi, i=l...m qo~tititi~ofSdFO%itithe~ 
Ofthehalatateaofs. A configuration of S is a triple ((Ml,q),a,w), * (MI,9 ~~~ti-Oftifitiatil, (Mi,q)ainr 
~theopen~hdti~ve~~,md winz*represents the remail@ input. An initial configuration of S is CO=((Mo,qo),e,w), 
fix some w in Z*, and the fd (~) ~-are Cfi(Mo,O,e,e) for all f in FO.An @tiwkx* hqtib Ysifql- Cf, foraomef. 
llwlanguage reco@edby Sisdenotedby LCS). Moves aredefined by Aaadescri&#38;dabove. Forea&#38;&#38;andfor 
all ~(~a~p and a in ~: A.ifa isin(Z u e), tkn ((hfi,q.),a~) 1-((Mi,P),a,x). B. if ~Nj for SOnK j=l...u 
kl ((Mi.q),~) 1­ (@fj,qoj).O%,p)@ ~ f~ -h ~ ~te f in Fj~ (@fj,fl@fi,P@,x) 1-(@fi}P)@X) Themovm described 
in Aarelocd lIIOVeS,SlldthClnOVeS described in Barepu&#38;down liat moves. Notetbat there are local cmwes 
and that all pushdown list moves are &#38;moves. fheabov edetlnitio nisusedlate rinthiapaperto build 
aparser fmSGMLmodclgmupa. Inthenext aectionwepmvide the ~ ~ fm SGML. SGML ~ SGMLiaa nwta-hnguage syatemfor&#38;Gning 
theatmctumof documentq there are sepmate f~ fm &#38;13ning the low level syntax (token recognition) and 
the high level syltax @araing). In thispaperw donotconsider tokezlmcognitim, Wasaume that ansGMLparser 
candiAin@i between text and markup. Markup in SGMListhe codes tbat are added tothetext ofa hcumenttosepamte 
thelogid mmpmmta (elements) [7J A dmmumt type &#38;tinition (DTD) &#38;tines the high level syntax far 
a class of documds, thedoeument type. ADT71contains a set of element declaraticms that deft the elements 
of a document typeand thecmtext in which theymayouur. one eland is &#38;a@ted as the top level or lXX!TYPE 
element. Adocument thatco@rmstot hercqv of the DTD is called a document instance. A document ioatanw 
is a single occurrenceof the DOCTYPE element andevaything that occura within it a stream of tokens consisting 
of markup (element begin andendtags) andtext. Anelementbegin tagisvwittenas -lement.name and an element 
end tag is written aa 4element_~. In Example lweshowa DTD anda documentinstance. Examnle liADTDandam&#38;mningdoamenthatance. 
a A DTD. <! OOCTYPE book [ <! ELEMENT book (header?, (header,chapter)+)> < ! ELEMENT chapter [ # PCDATA)> 
<! ELEMENT header ( #PCDATA)> 1> Thetirat line defitidocUmd type aaalmok. Tknext tbreelines areelement 
deckatiomfat.k elementam chapter, and header. m prdumzd expcesionsarcmodel groups, the only required 
mmpmnts of content models. These declare that l.abookcontaim auopticmal ~, followedby oneormore chaptera, 
eachebyahewiez. 2.aehaptcr containaonlytext. 3.aheakamtaina otdytext. b. Aumf&#38;m.ing &#38;cumentinatame. 
-ook> <header>Thi.s is a header </header> <chapter>Thla le the text of a chapter </chapter> </book> 
SGML syntax Productba9 ThesyntaxofDTDa iadctlnedbya ­ ~-ofm productions. E8chccqment of IM13aiadet%A 
bya production of the fbrm s@actie variable = expmasion ,wha the syntactic variable namea the compmmt 
and the expeaaion defkest hecomponentrntcm naoftakensand opcmtom. llle tokens are: l.ayntadk variablea 
(each ofwhich hasa correspmding syntax production), 2. keywrda, and 3. other tokena. Theopemtomdetemme-tllemdeling 
audaelectionof the tokens and are Mined in Table L ?ablo I: The operators of syntax production. Operator 
Operator Operation Class symbol Occurrence-? Optional (0 or 1 time) Indicators + Requ~red and repeatable 
(1 or mere times] . Optional and repeatable (O or more times) Connectors &#38; All must occur in any 
order  r All must occur in the order shown  I One and only one must occur Parenthesis () Precedence 
of operations  Although they are dehadwithadiftknt tmninology, tk ~ , T, ;, amipm@k3ia cmeapmdtotkrc@al 
-OKI ow-om > T, mmten&#38;Qandparatbd mapectively. Exprcaaianacdainiq 7, W,and &#38; alaobave equivalentregularexplwaio41sp,AnnexIq. 
IIlthcayntax pmktkmainthiapaperumuaetkfollow%g eanvadicallx Syntacticvafiablcsareinlowereasc,keywda aleinquotea, 
 othertokcnaarein~caae,andtkopemtamareunqwted ckactaa. E-t Wdarations ElcaIeSltdeclaratioQaqocitythehighlevel 
SyntaxOfdocwent tn=by-~ ahuctudeleudaadddiniugtkcootent Oftkaeclewllta. ByreMviDgwhiteapace,delimimand 
tiitemathatdonota&#38;@thercaultaofthiapapcr,vwtive thefollowingaylkwtpductimfaelanmtdeckaticma. element 
declaration = ELEMENT-, element type,(omitted tag minimization)?, content model l hua,anelementdeclaration 
caaiataofakeyword followedby tielementtype,ano@malanittedtag~ow auda coatentmodel. Tlleelcmalttypeiaaliatofoneor 
more elementatbataredefinedbythemminder Oftk expllaim Omittedtagmhhhzlh cmqecifieswhetkitiaanermrto omit 
astartoreadtagbmauelemmg andamtcmtmodelsare descsibedbelow. Jnlhmplelvwdonotuaetheoptional Omitted tag 
 cm. Altboughthiafkatumcanaffect ambiguity in SGML [6,8], it is not condded inthia paper. Cmtant Modala 
lllcayntaxpmdudon ticmtentmodelaix content model -(model group I ANY ), (PS+, exceptions)? Model gfuupadefinethe 
mnte$ltofclementa rntumsof textand otbcrdementa. ANY iaanal xqaaclW onof a spedie model group andPS+iswhiteapace. 
Exce@ioasmodifytheetkt oftllcmodel ~,thcyallowdementa to bcilwludedinor excluded fiomtbe elemesltsnamed 
illtheelanent typeand hm anyelemeata thatoccurtithin themina dmumentimtance. In Example lvmdomtuae exeeptiona.Although 
~canafibct ambiguityillSGML[13],theyale notconsideredinthispaper. Model Groapa Model groupaarc expmmhathat 
areaimilaf totheelqmaaiooa Ofsyntax pmductiona. Each model guupdefinca thecontent of dementa named bytheelenwmttypc. 
Toavoid~ complexitywepelfiitrauaf&#38;mationa antheaystan ofayntax -Onafmmodelgroupx tbfaetranafibrmaticma 
do not aEeetthehigh level ayntaxqecifkl bya DTDamithuadonot affect the rcmdtsofthiappcr. Wederivetk following 
sptcm Ofayntaxpmductiona ibrmodelgroups. model group -GRPO, content token, ((AND I OR I SEQ), content 
token)., GRPC, [OPT \ PLUS I REP]? content token = #PCUATA I (GI, (OFr I PLUS I REP)? ) I model group 
 670 The tokas OPT, PLUS, REP, AND, SEQ, OR GRFO, and GRFCmpmaent theopemtmsfm model groups. They are 
(M3nedthesamea atheg lltax production opemtom shownin Table 1: T, + , o , &#38; , ;, T, ~, ad ) respectively. 
In Example 2, whieb illuatmtea a model group, we use these &#38;fludt chmetcmforthe opemtom. #PCDATA 
repmsenta an owummce ofacimcter atring(zem or more text &#38;ar@era) ina&#38;eument instamcand GI s>the 
names of elements, mpmacnt occummcea of tbe named elements. The element names and #PCDATA that occur 
in a model -,~~timwblsoftike I..(m). Each distinct owurmme of #K!DATA or an eland name in a model group 
is a prladthwcontentt.okan. Thistam isused later in the deftitions of ambiguous content models and ambiguous 
model groups. ~ A model group. (header?, (header, chapter) + ) Tbisgroup qnxitica anoptioQal header followed 
byoneormme chapters, eachpmceded by aheader. There aretbree primitive content tokens om for ach wnmence 
of an Clemmt name. Although it is not shown in the syntax production fix model group, the @andardrequires 
tbe following: my eOe kind of mnnector canoccur inaaingle model gmup(but ammlelgruup nested within it 
could have a ditkrent mnnector). To implement this requirement tintbeparser deacribedin the next section, 
we derive tbe fdlowiog production for model group: model group = GRPO, content token, ( [AND, content 
token) I (OR, content token) * I ( SEQ, content token) ) GRPC, (OPT I PLUS I REP)? Ambiguous CmUent 
IWdah Ambiguous cantcat modcla are defined (and prohibited) in SGMLaa follow A ccmtcntmodel umnot be 
ambip, that is, an element or chmcter atxingthat occurain the document imtancemuatbe able to sati~ only 
one primitive content token without looking ahcadinthedomment inWmee...NOTForor example, the cantent 
model in <! elanent e ((4 b?), b~ is ambiguous becauae after au a clement occurs, a b element could aati~ 
either of tbe ~--. The model group in Example 2 is ambiguous (without laokakad). There are twmprimitive 
content tokens fm header. In the document insbnce of Example 1, wi?hout looking ahead onec4umotde&#38;nmneVvhctkrthe 
headerelementistheoptional booklevelheadcr ortbefiratchaptc rlevelheader.  c~ of -NFAjkwu .Me&#38;J 
Graup Inthissection wepment aualgorithmfbr mnstmc@ NFAS from model groups. For a model group m, the algorithm 
mnstmcta an NFA reco@z@ um~ it is similar to l%ompaon s obstruction of NFAs titan regular expmasions 
[1]. We tirat implement a parser for model groups using a system of automata 671 tbatisdexived fromthe 
ayntaxpmduetioaa fbr model groups. Wethenprescnt tvm algorithma. In Algorithm lwe add translating actiona 
totheparaer fmmodelgrotqW therealdting ~~uINFA~ L.(m) by inductively mmtndng NFA5 for the sukpreaaiona 
of m. Algorithm 2 removes the c-trmuitiona fiorn an NFA. A Parser for Modal GrQups We derive regular 
expmasions equivalent to tiw @ax pmductiona fmmodel group andcontenttokcm by repking (oPT@US@P)? With 
((oPT@us)ptEP*). model group = GRPO, content token, ( (AND, content token) . I (OR, content token) . 
I (SEQ, content token] * ) GRPC, ((OPT I PLUS I REP) I e) content token = #PCDATA I (GI, ((OIW I PLUS 
I REP) I e) ) I model group We apply Thompsds m@ructI m[l]to eachoftkseregldar --to obtain NF&#38; mc@zing 
tilaoguage they denote, and then remove the rAranaitions (ace Algerithm 2) to derive tk NFAs shown in 
Figure 1. Note that here we apply ~s ~ on directly-, in tlw tbllowing aubwetion we uae Thompson sinductive 
rules to derive anew algorithm. CdIlthllal P 11 Ho SEQ so Figure la. NFA for the syntax pmduetion 
for model group. 47  b %) Figura lb. NFA for the syntax production for wntent token. Becauae each 3@axPmductionha 
mmpding NFA we canderive aayatemofmtomata recQ@z@model groupaby 1. ti_tiNAfmtilmMti@l@el~&#38;~, 2. adding 
the names, modelgroup and contenttokm , to N, and 3. adding apuahdown list.  Systemof Sutauak can bedirectly 
impkmentedaaaaet of recursive fimcti~vvhem earhhction impkmentatheNFAfm itammapdmgndammal aynbol. Foreachatate 
inan NF~ either alocalmoveia madeor acdliamade tothefunctkm Fortheflnal atateaofeach NF~ either l.alocalmoveia 
ma&#38;, 2.t&#38;fimction retuma to its calling fimctioILor 3.theparaerbalts onafioalcd@ration. r%==-*~. 
Weimplemeat aparaer fmmcukl groups with-recucaive Ilmctiona,umtellt_token( ) and modelJroup( ), and a 
lookabd fimctiQ next_aymbolo,w bidlrehxnat knext@lol inthe input without advancing tbeinputpointcr. In 
Table IIwahow thepafaiog actiona (aec@ingmovea only) fmthestatea of the NFAaahownin Figurel. ?abl. 11.8. 
Parsing actions for model_group [ ) . States Actions 1,3,7,8,9 make a local move only 2,4,5,6 current_state 
= 3,7, 8, 9 respectively cal 1 content_token() 10 if next_symbol()=(OPT or PLUS or REP) make a local 
move. else if next_symbol ( ) = end of input if the pushdown list is empty MALT and accept else return 
( ) 11,12,13 return ( ) Note 1: setting current_state and calling content_token ( ) pushes (content token, 
current_state ) onto the pushdown list. Returnl)pops the pushdown list. Table IX.b. Paraing actions 
for content_tokenl). States Actions 1 if next_symbolo = ( #PCDATA or GII make a local move else current 
state = 4; call ti-el_groupo 3 if next_symbolo=(OPT or PLUS or REP) make a local move else returno 2,4,5,6,7 
retumo Note 1: setting current_stste and calling model_groupo pushes (model group,current_stste) onto 
the pumhdown list. Returno pops the pushdown llst. Algorithms Algorithm 1 Umahwta anNFAtlwnamockIgroupbyadding 
thetrauaktionactionaahowminTablellItotheparaing actions ahovvninTableU thctranaitionafwtheatateainTabkalIand 
IUareahowninFigurcl. AlgaIithm2removeae-transitions fiumaQNFA. Tab10 111.8. Actions for model_groupo 
to construct NFAs for subexpressions of m. States Actions 2 1=1; 14i=content_token () 4 i=i+l: 14i-content_token() 
7 group_type-AND 5 M2=content_token (1 8 M1-0R(M1,M2) 6 M2=content_token (] 9 10 M1=SEQ(M1,M2 ) if group_type 
= AND Ml-AND(Ml, ...Mi) if next_symbolo*[OPT or PLUS or REP) retum[Ml) 11 return[OPT(Ml)) 12 return(PLUS(Ml)) 
13 return(REP(Ml)) Note 1: the local variable M[] 1s a list of WAS, i is a counter, and group_type distinguishes 
AND groups from SEQ and OR groups. Note 2: ANDI),ORI), SEQI), OPT(), PLUSl),and REP[)are functions that 
construct NFAs for the subexpressions of model groups. These functions return composite NFAs constructed 
from their input NFAs. TX. XXI.=. Actions for content_token(l to construct Ni?Asfor subexpressions of 
m. States Actions 1 if next_symbolo # ( #PCDATA or GI) M =mcdel_group () 2 return[PCIWiTA()) 3 M =GI(GI); 
 if next_symbolo*(OPT or PLUS or RSP) return(M ) 4 return(MJ) 5 returnlOPTIM )) 6 return(PLUS(M )) 7 
return(REP(M )) Note 1: the local variable M is an NFA. Note 2: GI() and PCDATA[ ) are the basia constructions. 
They return NFAs constructed from the primitive content tokens. ~ChatrmtanNFAhmamxklgccmp. f..t:Amodelgroupm. 
Ourpatt:AnNF~wsu&#38;thatI@)=L(m). Method: Addthe tradatbdionaabvninTabkIUtotk xdc=ibedrnTabklL llwaeactiata 
mnatmctaIINFAhr eachdexpmmionofminakftto~ ~filatordel. Forprimitiveeantenttobaueuaetkbaaia au&#38;@iowGI 
andPCDAT&#38; fiwcumpkxdcxpwaionavmuactkinductivc amsmetiat&#38;oPT,FLus,REP,oRSEQandN1 D. m detailaofthewmmtmctl 
onaarcalMwmrncaaeal-8below. 672 lle NFAsfor mkpmsaicmaofm have imprtmtpmpertics thatenaumcmcdlem of 
subsequent umatmdionx thereis exactly -ataltatate andonefhlatate, andnoarc enters the Startstate orlcaves 
tifin alstate.The mmamcticms below for G~ REP, OR and SEQ, are adopted from Thompmds method. Cuse 1: 
GI(a). Fm each G~ %conatrd the NFA a Cuse 2: PCDATA(). l%e standad statesthat #PCDATA in a model group, 
m, qmsenta an owumnce ofzeroor more text characters in~m)and thatall suwessive text chmctem are considered 
to @is&#38; a single WCDATA ti..n. Thus, we conahuctthe NFA for PCDATAWas Cuse 3: OFT(M1). Let Ml be 
an NFA for the subexpmssion ml. Constmct the NFAM(mlOPT) as: e tie 4: PMJS(Nfl). Let Ml be anNFA for 
tk subqression ml. Conshuct the NFA hf(mlPL.US) as: e e Cue 5: REP(Ml). LetMl be en NFA fm the subexpmaion 
ml. Constructthe NFA M(mlREF) w e e Case &#38; 0R@f13f2). Let Ml and M2 be NFAs fm the subexpmmions 
ml and m2. Conatmct the NFA M(ml OR m2) as: -U 7: -1M2). ht Ml and M2 be ~As for k ~-ml and mz. Conslnd 
the NFA M(ml SBQ mz) as: To merge iq into fl: remove all 8(s2A~p ffom the composite NFA end add 8(f@+p. 
(he 8: AND(M1,...MJ. Let Ml,...Mn be NFAs for the on fmANDcannottu ~~ ml)...%. ~ ~ pel-fixmed incmnentaUy 
as fmSEQand ORgmups kusc ANDisnotanasaoc@l veopcsatm. To mnatmct an NFA, M(ml AND...-uas the composite 
NFAe Ml,...% for the ~W ml .....q _vely. create 2nnewstatcscmeapd@ to all possible subsets of {Ml,...h&#38;}: 
We call these the primary states, and each is denoted by the subset of {MI,..~] that it mpreaenta. The 
@UUY M ~{Mj,...Mk) represents the state in which Mj,...Mk have been recaphd in the input (no ordering 
is implied). Thua, thestart state of Mia{}andthe final etateis {Ml,...%}. Far each primmy state p={Mj,...Mk}, 
mnstmct a titi~ 011Mi to =h -* p={Mj,...MkJv$}, f~ dl Ml, i=l...m d ixIp. M. Foreach suchtnmaitiw addadktinct 
copy of Mito M. TIE ~iUofMi=dih@ddti=h other bythestatep tiwhid~~. l&#38;getk--of=h(M1,p) illtopd~tktld 
U Ofti(lAi,p) iIltOp MfOllOWS. TO merge th -* w of (Mi,p) kto p, IWIWVesII transitions 6(W,aj+q from 
M and add 8(p@+q to M. The MStateo f(ltli,p)isnowp. Tornerge tkfinalstatef Of @fi)P)~to P ,f~ ~ ~ q ~ 
(Mi,p), h q my bCp, remove all titions, &#38;(~a)+f, from M and add t!(~a)+p to M. Inthere9ulting NF&#38;Weach 
state is unambiguously ~ by (@fi,q), f~ q k Mi. We ill~ this COIW&#38;I@ on in Example 3. ~NFAfor thendelgroup, 
(A AND BAND C), where ~B, and Cam G1 s. J 1Jr Y 1 673 . Example 4iUudratea Al@tbml, by abowing thacunpoeib 
~Afmarnodd~, colWmtd titk NFAsoftk ~-Oftlw Uunkl grwp. e e ~ Rcmovingetranaitiona iiomlmNFA Input: An 
NF4 M. Output M with no e-transitions Mdhad: Sk?pl: Derive llaetofstatca qaefollowx filrcachatateqin 
Q *ti~r,a~fa~rdti~tiq@Q,dti thcstart statcofQ, ~,to~. Q iathc sctofstatca in Qthat can bereadledbyncel 
c-tnmsitkle. Step2Foreech state qin Q ,campute e4wureof$tkaetof allstatcsthat can bcmechcdiiomq on@arlaitionacady[ 
l]. Step3:Fmti*qhQdh*-ph=l-d ~fbrallouxenCU of8(p@-@faaome#awla #e, add (q@*p to &#38; Step5: Remove 
alletranaitiona iium15. step 6: Remove all hemesaible states fiorn M [2]. Algorithm 2duealWtchangetk 
laqple&#38;, L(M). L(M) Wlltaha nonewclemellta becsuaccvay atate N!ack!db yatranaition addcdin stcp3wa8rceckd 
one4Tanaitiolla anyway, audau stateaadded to Fin Step4drcady had c-tmnaitiona totlnal states. Nockrnents 
areremovd fium L(M) besauac dl~ transitions runovcd bystcpsarcreplaccd bydiredtranaitions instep 3,andbecauac 
runoving imucaaible statcsin Step6has no efkd oil L@-). ~ TkNFAfiumExample4, fmthemodelgroup (A?, (C 
IA)+), -removingd.ranaitiona with Algorithm2. c A 1 3 c A A a cc 674 Ia&#38;xedNF&#38; -Medd Guaps 
.. Q&#38;@JQ hdaxedNFA. An indexed NF&#38; M is a 6-tuph IW={QJJJ3,@}, wham Q, >qo,andFa rcdcfincdt 
hcaamcaafmanNF~ andwsedd andrcplace i3with8 aafollovm I is a flnitc act of indices, i=l,...n. ti mapa 
(Q X((ZXI)u e))toaaubactofQ. Wcdcawtethe elemcnt8(d) of (Z X I) as ai. ~-fa-NFAsmti=-M for NFAa. Moveaareaimilar 
amoveby M isabinsrymlation (cmtlwaet of all poaaible cus@mticma) such that if 6(q@+p ftx any i, tkn (q#w) 
F (p,w). TkOQlydithcum betwccn anNF&#38;Mand lmindQredNF&#38; M , ereland&#38; Wedcfineamapping Hthatmapasaclt 
indaxed NF~M , toitscawpmiq NFf&#38;M. Hreawvca UwactIhm IWandmodi6ca 8 auchthat fmaU~H(ai)=a Weobametk 
following H(M )=M implies L@)+@ ), and all propdks of NFAs hold fw imkxed NFAs. .. Dcfimtim 3: Indcxcdmodelgroup. 
Anindcxed modclgroup isaamdel group inuhichcacb primitive umtmt token (ao mcummce Ofll GIa#PCDATA)llaS 
almiqllc indcxtbatc@@@hes ithmothcr munmuea of the same symbol. Index tk aymbola hm {1,... n}, in the 
ordsr of omrmnce liumlefttoright. Example 6iUustmtes anindexcd llmdel group. -E19!nl Anindcxedmodelgmup. 
Let m=((~ #FCDATA), (B I (B &#38; A))) be a model group. Tk umapmhg hkxed model gap is m =((A1,#FCDATAl~ 
@l I(% &#38;A2))) Conatm%on ofauindcxed NFAfium amodcl -. ZPt: a model group m. Ch@ut: unindexed NFAM, 
inwhich cacherclabeledaiia bound totheindcxcd primitive umtcnt tokcnaihm ,ti indexed nwdelgnnlpderivcd 
fiwnm. Method: Stcplimkxcs tkmodsl group arKistep200mtr@a anindexedNFA fiomthcindcxcdmodel grmqr, theactwoatepa 
am perfiilnncdCcmuKeMy. step 3 roves Mtions h M . step 1: Thisatcp oftkalgarith miedsriveddimctly h Algorithm 
1 fm mehuct@ NFAatlum model gnYups. Tk trensMmdemibed in Tab&#38;s lIarullIIia mdifiedtoindextk primitive 
contlmttokcna holnieitto right andtopasatheindex asapammeta tothcbasia~ ms fbr (H and PCDATA. Thesemoditlcationsareilludrated 
mTableIV. step 2: The umatrudana fm GI and #FCDATA are mdificd to addtheindexcs oftkpsimitivccontent 
tokcnetotbcarc.a. .. Cuss 1: GI&#38;i). ForeaclIG~ A mnatmctthe indexed NFA ~Ambiguoua modelgloup(without 
loohhead ) al CaSe 2: PCDATA(i). Cons@@the indexedNFA e 9*1O Iv. Actions for constructing indexed WAS 
for content_token [). States Actions pos-lookup(names,symbol) if pos=null pos-insert(names,symbol) 
index_count[pos] = 1 else increment index_count[pos] return(PCDATA(index_count[posl)) pos-lookup(names,symbol) 
if pos=null pos=insert(names,symbol) index_count[pos] = 1 elee increment index_count[pos] return(GI(symbol,index_count[pos])) 
 Note 1: Change the variables M[] and M in Table III from NFAs to indexed NFAs. No other changes are 
necessary for model_groupo. Note 2: The arrays names[] and index_count[] are initialized to null at program 
start. Poe is a counter, names[] is a list of symbole (GI s and #PCD?iTA) in the model group, index_count[pos] 
is the index of names[pos], and symbol is the current input symbol. Note 3: Lookup(names ,symbol) returns 
the position of a@.wl in names[l, and lnsert(namee,symbol) inserts symbol into names[] and returns the 
position. ------------------------------------------------ Step3: Rsmoveall etran8itims tiom Muaiug 
Algaithm2, w41ichapplicatoindexedNFAasswellastoNFAa. In this section we Mine ambiguous model groupq our 
detinitionisumsistsnt withtheSGMLde6nition ofambiguoua cmltmt models. ~ Satiafieswithoutlookahead Lctmbeamodelgroup,aadlethl 
be anindexedNFA constmctcdfiommbyAlgorithm3. Ifvmrayisastringsuch titmishZ*,@idjmtiI,&#38; a Ati-ti~tive 
=&#38;ttiai hmtititi l~_M(W,my) l-* (q,ay), fti_qhQ,dti~~al~p,f~_eptiQ. Ifitisalao m~~%aj)+p , fbrj=iaudfbrsome 
pinQ, then a satis@s SidajWithOUtloobhd. Amo&#38;lgroup,~isamb@ous(withoutlo&#38;ahsad) ifandmly ift.keisatleaatoneetringw=wl...wn 
rnZ*,euchthatamw wl, i=l,...m satisk mom than cm psimitive content token in m without loakahed. ~. Mccting 
ambigws modslgroups, Input: Anin&#38;xedNF~lWmMmcted byAlgorithm3fhna mmlclgroupm. output yesofno A4ethd 
Traverae theindexedNF4A#. Ifforanynodc, qin M . ~W)+PS ~ 4WH, such that i+, theo m is Ulmbiguousandoutputyea,elacoutputno. 
ThsalgoritbmchccksallnodeainMand tkrcftxedctectsall possible ommmMeaofnoded qauchtbat(qymy) l-*(q@,f61 
somsxinz*. m?nbyDefiniti0na4and5,tkalg0rithm&#38;teCtS all ambiguow model groups. Bscauscwehavsraoovsdall 
bccessiblsatatcstlrsn IW,forany atate~itnmatbctntethat(Wxy)~* (~y),fmsomexiaZ*. lknbyDdinitions4rmd5,thealgadhm 
detectaonly ambiguous model gcoups. ~~ l beinckxed NFAfocthc modsl group (A?, (C I A)+), m@mctcd by Algoeithm 
3. This model groupis ambiguoua,bscausstherearetnmaitiona fhtnststslonbothAl ad A2. Re&#38;ed Wwk Moatpapemdonotcansidatheeffectofcxccptioaaandomitted 
m~ Ononthedefinitioo Ofambigwscontsnt models [3,11,14]. However, the atandad does not preclude these 
t&#38;lureafkom af&#38;tingthedea'eareoolesllltsin finitiqandth ths Mcmturctbatsh owambiguouaconten tmo&#38;taamequivslalt 
to ambiguous mmlcl groups. L. Riccatlines amctlwdfdr&#38;tect@ mbiguowumtcnt models [n]. Sheehowa cmnplaof~NFAs 
ofmctdsl groups, andalso tibeaaaignikmt space saving rcpfwcntation for NFAs of AND groups. warmer and 
van Egmondrewrite model groups asnlleafbran LL(l) p ~[141. lky-lude titi LL.(l)prO@yofa mOdel group is 
equivalent to the unambiguity requirement for SGML except for one conatmct. A. Brueggemanw Klein shows 
a method fcadcciding ifac4mtent model isummb@ua [3]. Her mis~~~e-ofm~lmdis 675 similartometbodafbrcowluag~ 
 c finite automata flwnregular ~ [11. Ourapprmch iabaaedoaprin@ea outlimd in Annex Hoftbe stmdard ~,mditrequircs 
minimal cmvaaicmfhxn me formal *@mti(--to NFA). kre arem complete algorithms ill b litaatufe fa Meeting 
amb­model groupa. Wehavcprovidd thenmcaamy definitions and algorithms to implemmt this fix tbe gmaal 
-. Warmer and van Egmond describe a complete implementationof an SGMLparaa tbatisbuilt byrewiting the 
SGMLsyntnx -00s = d= fm ~ -IL(l) parser gmaa.tor [14]. Heath aQdweMl inve@i@e thepoaaibility ofcodruc@ 
sGMLpalaera bydaiving finite atatemtamata (FSAa) fa the individual syitax prductima of SGML and coupling 
these FSAstofoxm lacga FSAa[9]. Altboughtk yahowthismcthod isnotpmvafhl emughbecause ofrcmraive pmductima, 
tky cunclude tbattm SGMLpamerbaaedoQ FSAaderivedfkxn s@x_mUhW_ad_ovea~ baaed cmapuaMownautmWom itu.uuldbeeasiato 
implement andwould havereduced coata O=theplUglam~ cycle. Wehavedefined ayxtcma ofmtomataaml mdmctedaparaer 
fwmodel gmupathat iabaaed aaaya@mofautmata This method cm reapplied totkfuuaetof sGMLa@ax pmductiona. 
sGMLparaers baaed m of~ mahtaiu all of the advantages described by Heath and Welab [9]. CodusiamWh audFM 
 We bavedeilned amb@mUsmOdelgXOUps mdabownan algolithm for (Wcting them our definition of amb@ous model 
groups is consistent with the SGML defiuitim of ambiguoua content modehG our algorithm f­indexed NFAafiom 
indexed model g4uupa Supplicate pfesu ibed bindiogof~dmto primitive colltmt tokens. Whmexccptima andosnitted 
tagaarenotcmaia oulalgoritllm detecta amb@wuacmtmt models aadethcdby thestandad Inadditim toddining andde@ting 
amb@auati _ wllaveahown othcrsigni&#38;@ lwultll. Ourdefinitimof - of mtomata pwidesahmdatimfmprsiog 
SGML x-mti-~m~ tiom fdsystmltoaaotba. -fllusit ia~toimplemmt these -dqtoq~ ouralgoritbm f@rcmaW@ng iIdexcdNFAa 
fbrindexed Iwdel -btiMb. EmbeMedwithiu aparserfaekment &#38;clamtima,i tcanbeuaeda aafbmdatimt odpamidlyNd 
auindexed ayatemofmtomatafa paraingandtnmsMng docummtbstawxa. Tlliscau baaccompliabed aimultmeoualy with 
the dctecticmof ambiguous lmxlcl glwps. impcdmt queatims Omitted tag Vim [6,8] cm intmdum amb~ty into 
&#38;cumentspdhatima atahigbalevel tbantititid_ declarations. Section 11.2.4 of the atandmdprescribes 
priorities somelwnaina e exccptiona [13] and (~ rules) h resolving tbeae ambiguities while Pafaing docummthhmcea. 
Howwer, mmethodahavebem shovwlfar MectiDg these typeaofambigdy vdlilepataiag b ele!mnt declarations. 
llialimitatim cauacadMicultiesio implemmting and using SGML qpkatba [6,8,9,13]. We believe thatour model 
will beuaefidinstudykg theae upen questions. A~ Wewould liketotbank Geoff White and Marim Elledgaoftbe 
olltbaupplying backiaaues of ~AG>. We are also gmteful to Anne ~Klein for providing ilapapa andotherwrmmmidms 
Oaambigww umtentmodela. Weacknowledge tbecmtributims of L. R ice fmherafticle mmbiguowamtmt~ berdeac@imof 
-~~ *-tYbasedm-m&#38;PmtiM the directim fa this papa. lle.f~ <RefA>1. Aho A. V., Sethi R, ad Ullmm J.D. C~ 
feFY: l%nciplss. Tads, and Techniques. Addiam-Wesley, 1986. 2. Abo AV. and IJllman J.D. * 731sq qf Paining 
TnzndatiaJ. and Campa lingVohane 1: Patw ng. Frmtia-HaU k., N.J., 1972.  3. ~-A. W-9 of SGm ~ Models. 
wrking paper. Uniwaitat FrciburgLInsMut fur Infarm&#38; Augusta1992. 4. BrPu M. SGMLAn Authar!s GnidetothCS~ 
GuJeltalizadMiz?hlpL4wlgnaga.Addiam-wealey, 1988. 5. Cova R Amwta@d Biblioga@y and List of lbmrcca standard 
r . ~ _ hgmse ISO 887%1986 (sGML). Vaaim 2.1, Revised February 1992 , <T.4G~ 2%s SGML Nwslefcer. Vohnne 
5, (3-5) (lufadEIUay 92). 6. Davis W. W. OMllTAG hfhimidm <TAG> 2k SGMZNdemm Volume 5(2) (Teb 92J pp 
4-5. 7. Goldfkb C. F. l%e SGA4ZHandbaok Claredon PIWS,  -1~. 8. GrafJ. M Ambiguity in tk Inatame. <TAG> 
The SGML Newslur@r. Issue 7, (1988). pp 6-9 9 Heath J.md Welah L. DMiculties in Parsing SGML. Pmcsediags 
of ACM Cot@i an ~~ Sjwtems, (Dee 5-9, 1988, Santa Fe, New Mexico} ACU New Y* 1988 pp 71-n. 10. McFaddm 
J. Rmd Wilnwtt S. Ambiguity iatkfnstanm An Analysis. <TAG> 2%sSGAdZNawslsttar. IasiM9 (Mamh-April 89), 
pp. 3-5 11. Rice L. A. Graphic Rqmadah .m of Cmtent Models. <TAG>Thes-Nwlettkr. ~ 10(Jdy 89),pp 12-16. 
 12. van Hmwijnen E. Pnwrical SGMZ. Kluwu Aca&#38;nic Publishers, 1990. 13. Waldt D. C. Tie Jmluakm 
md Exolusioa Confusion. <TAG> TheSGMLNewslefrer.Issue 12 @cember 89) pp 1-5. 14. Wanner J.mdvm Egmmd 
S. l be Implemdatim of the hwtadam SGML Faraa. Ekcfnmic Publishing, 2(2) (July 89) pp 65-90</RefA>.  676 
 
			
