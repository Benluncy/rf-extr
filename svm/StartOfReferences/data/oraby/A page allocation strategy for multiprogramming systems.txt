
 A PAGE ALLOCATION STRATEGY *** FORMULTIPROGRA~91ING SYSTEm'S by Donald D. Chamberlin Samuel H. Fuller** 
Leonard Y. Liu* INTRODUCT ION In a multiprogramming, virtual-memory computing system, many processes 
compete simultaneously for system resources, which include CPU's, main memory page frames, and the transmission 
capacity of the paging drum. (We define a "process" here as a program with its own virtual memory, requiring 
an allocation of real memory and a CPU in order to execute). This paper studies ways of allocating resources 
to processes in order to maximize throughput in systems which are not CPU-bound. As is customary, we 
define the multiprogramming set" (MPS) as the set of processes eligible for allocation of resources at 
any given time. Each process in the MPS is allocated a certain number of page frames and allowed to execute, 
interrupted periodically by page faults. A process remains in the MPS until it finishes or exhausts its 
"time slice", at which time it is demoted. We assume the existence of two resource managers within the 
operating system: The Paging Manager and the Scheduler. The function bf the Paging Manager is to control 
the size of the MPS, and to allocate main storage page frames among those processes in the MPS. The function 
of the Scheduler is to assign time-slice lengths to the various processes, and to define a promotion 
order among those pro- cesses not currently in the MPS. The Scheduler must ensure that system responsiveness 
is adequate, *IBM Research Laboratory, San Jose, Calif. while the Paging Manager is primarily concerned 
with throughput. This paper studies possible strategies for the Paging Manager. A strategy for the Scheduler 
is proposed in (2). In order to evaluate various strategies for the resource managers, it was necessary 
to construct a model of a time-sharing system. Our model is analytical in nature but is not based on 
queueing theory. MODELLING THE USER LOAD In an earlier paper (I), Belady and Kuehner intro- duced the 
concept of a "life-time function" which relates e i, the expected execution time between page faults 
for a given process, to Pi' the number of page frames allocated to the process. (In this paper, we assume 
that the page frame allocation to a given process is constant for the short term, and that a process 
can fetch a new page only by relinquishing a page it currently possesses in main storage. In the long 
term, by monitoring the behavior of a process, the Paging Manager may choose to change its page frame 
allocation). Belady and Kuehner cited evidence that the life- time function has two regions: a concave 
upward region, followed by a concave downward region, as shown in Figure I. **Departments of Computer 
Science and Eleztrical hngineering,-G~rnegie-Mellon Univ., Pittsburgh, Pa. ***This is an extended abstract 
of a paper which has been accepted for publication in IBM Journal of Research and DeveloDment. The work 
first appeared as I~ Research Report RC3848, Thomas J. Watson Research Center, Yorktown Heights, New 
York (May 1972). 66 concave II concave upward ~ down,yard 1 _BL....... 1 PI: page frames allocated 
to proce~ss i Figure l Lifetime Function for Process l For the present paper, we fit the lifetime function 
curve with the simple equation 2 B i el" 1~Ci~2 (I) This equation enables us to describe a process by 
the following two parameters: C i (pages) A relative measure of the number of page frames needed to enable 
the process to execute efficiently. More precisely, the number of page frames which provides the process 
with half of its largest possible "lifetime." B i (sec) The expected execution time between page faults 
for pro- cess i when it is allocated C i page frames. Like Belady and Kuehner, we assume that the para- 
meters B i and C i are invariant during the period 'of interest. Also, we assume that, during the period 
of interest, processes neither arrive nor terminate. Therefore, we can completely describe the load on 
the system by specifying, for each process, the parameters B i and C i. Experience has shown that, on 
the IBM 360/67 system, appropriate values for Ci's are in the low tens of pages, and for Bi's are in 
the low tens of milliseconds. (4)(6) MODELLING THE PAGING DRUM Whenever a process sustains a page fault, 
it goes into a wait state until the required page can be fetched from the paging drum. The length of 
the waiting period depends on the capabilities of the drum and on the length of the queue of requests 
for pages to be fetched. In this paper, we assume that the circumference of the drum is divided into 
sectors. When a drum request is made, the request is placed in the appropriate sector queue. As the drum 
rotates, its read-write heads reach each sector in turn and service the requests on each sector queue 
in first-in, first-out order. Simulation experiments were performed to investi-gate the relationship 
between the average time to service a page fetch request (W) and the total load on the paging drum in 
requests per second (U). A total of N M processes were assumed to be in the system. Each process was 
assumed to execute for a random (exponentially distributed) period of time, then make a page request 
which was placed on one of N s sector queues with equal probability. The drum was assumed to rotate with 
period T, servicing one request from each sector in turn. Consistent with our assumption of a non-CPU-bound 
system, we assumed that no process ever waits for a CPU after its page request has been satis- fied. 
By adjusting the mean execution interval, we varied the total drum load (U) and observed the effect on 
the average wait time (W). As expected, the results were dependent on the degree of multiprogramming, 
N M. When N M = l, the single process always sees an empty drum queue, 67 and the average wait time to 
service a fault is the "no load" wait: WNL consists of one-half revolution average latency, plus one 
sector-read-time to transmit the page. If there are many processes in the system, W varies from WNL to 
infinity, depending on the load U. W approaches infinity as U approaches the maximum transmission capacity 
M of the drum, which is given by: N s M=-- (3) Simulation experiments produced a family of curves which 
give W as a function of U for various values of N M, as shown in Figure 2 E i |! NM,I WNL IM U : total 
load on drum, faults/sec. Figure 2 Drum Wait as a Function of Load The following equation was found 
to fit the simu- lation data very closely: 2K M 2I.~ (4) W= 'M-U + WNL M  where M and WNL are defined 
by equations (2) and (3) and K M is a factor determined by the degree of multiprogramming, defined as 
follows: NM-1  The total drum load U consists of the sum of the real-time page fault rates of a11 the 
processes in the multiprogramming set: ~" (6) U = ~ u i i=l  where i (7) Ul = e.-i-W I DEFINITION 
OF VALUE We now wish to make a reasonable definition of the "value" of a particular allocation of pages 
to a particular set of processes. First, we note that the "rate of progress" r i of process i (in virtual 
seconds per real second) is given by the equation: e i  q e.+w (8) 1 We wish to take into account 
the fact that some processes are more "demanding" than others in the sense that they require more page 
frames in order to execute efficiently, and that it is more difficult (and hence more valuable) to 
execute an instruction for a more demanding process than for a less demanding process. We will define 
the "rate of accrual of value" (v i) of process i to be the product of its "demand" (Di) and its rate 
of pro- gress (ri):  ~i : DÂ±~i (9) We proceed to define the rate of accrual of value for the system 
as a whole (V) as the sum of the value rates of all the processes in the system: "j (I0) V= Z v i i=l 
 We are now left with the task of defining the "de- mand" (Di) of a process. What we really want is a 
measure of the relative cost to the system (in page-seconds) of executing an instruction for pro- cess 
i. To gain such a measure, weconsider a hypothetical experiment in which process i runs alone on a virtual-memory 
computer. We allocate 68 to the process various numbers of page frames Pi' allowing the other page frames 
to stand idle, and observe its behavior. From equations (l) and (8), we can find the average "cost" in 
system page-seconds required to give one virtual second to the process, as a function of Pi" There is 
some optimal page frame allocation Pi* which minimizes the system's cost to execute the process. The 
"demand" of process i is defined as the actual cost at this minimum point: = (~) , (II) Di Pi = Pi From 
equations (l) and (8), D i may be expressed in terms of the characteristics B i and C i of the pro- cess 
: C] ,~N22L + 2BiWNL Di = ~ (12) This definition of "demand" has the feature that it'is a property only 
of the characteristics of the individual process, and does not depend on the other processes which may 
be running concurrently. Equations (4), (6), and (7) can be combined to give an implicit equation for 
W in terms of the ei's of the processes. If we know B i, C i, and Pi for all processes, we can find the 
ei's from equ. (1) and then solve for W. Once W is known, equ. (8) gives us r i for each process, and 
equs. (9) and (lO) give us V, the value of the given page allocation. An interactive PL/I program was 
written to execute the above procedure. Given B i and C i for all pro-cesses, and N S and T for the drum, 
the program can find the value of any given page allocation, or find the optimal allocation of any given 
number of pages. EXPERIMENTS The first experiments done with the program were studies of page allocation 
in a simple system con- taining only two processes. The system drum was given parameters T = lO msec, 
N S = 5, correspond- ing to an IBM 2305 drum with page size = 2K bytes (5). Figures 5 and 6 show equal-value 
contours on the space of possible page allocations. In Ex- periment l (Figure 3), the two processes were 
identical: B i = 20 msec., C i = 50 pages. In ex-periment 2 (Figure 4), process l was the same as above 
but process 2 was less demanding (B i = 20 msec., C. = 25 pages). The locus of optimal allo- 1 6O 5G 
OJ   ~. 4c ",ws \ss #  o~ 20 V=30 ~ ~-,a = 0 0 I0 20 30 40 50 60 PI ' pqe frames allocated to ~oc~s 
I Figure 3: Experiment l 6O alI. 50 1 0 oÂ°U 3( 2( i g ,e~  o __ .... 0 30 40 50 60 I0 20 Pi,PO94 frames 
allocated to process I Figure 4: Experiment 2 69 cations of various numbers of pages is shown as a heavy 
line. The value contours are discontinuous on the axes (axis intercepts for the contours are represented 
by X's). In addition to allocating pages, the Paging Manager must control the size of the multiprogramming 
set. Experiment 4 gives us insight into the nature of this task. We keep the 2305 drum characteristics 
as above, and assume the user load consists of many identical processes, all with B i = 30 msec, C i 
= 50 pages. For various numbers of pages in the system, and for various degrees of multiprogramming, 
we find the optimal-value page allocation and record U (total drum load) and V (total system value) for 
this allocation. A family of curves showing drum load as a function of total pages for various degrees 
of multiprogramming is shown in Figure 5. 30( 2OO E Ioo I I I I I 50 I00 150 2O0 250 Np ~ IotoI system 
poge fromes Figure 5: Experiment 4 Superimposed on these curves is a locus which shows the degree of 
multiprogramming which yields optimum value for any given number of pages. Note that as the number of 
pages increases, the optimal degree of multiprogramming increases, tending to keep the drum load U within 
a certain band of values. In addition to the above experiments, a number of other experiments (described 
in the full paper) were performed to investigate page allocations in more complex environments of many 
nonidentical processes. The objective was to find heuristics which would enable the Paging Manager to 
choose an MPS and allocate pages on the basis of measure-ments which can be easily made on real systems. 
The results of our experimentation are the follow- ing two heuristics, which depend only on the real-time 
page-fault rates of the various processes, u i, and the total system page-fault rate U: Heuristic I: 
Control the size of the MPS in such a way that U is kept between limits Umi n and Uma x, which are defined 
as properties of a particular system. Implementation: If U <Umi n, promote another pro- cess into the 
MPS; the process to be promoted will be chosen by the system scheduler (2). If U > Umax, demote the process 
which has been longest in the MPS. Umi n and Uma x are chosen far enough apart that the probability of 
jumping from U < Umi n to U >Uma x is negligible. Heuristic 2: Allocate page frames to the processes 
in the MPS in such a way that all their page fault rates are equal (u i = ~). Implementation: If process 
i has u i< ~ and pro- cess j has uj > ~, take a page frame away from process i and give it to process 
j. (Note: Heuristic 2 is similar in concept to the Page Fault Frequency Replacement Algorithm proposed 
by Chu and Opderbeck (3)). In order to evaluate the two heuristics, experi- ments were performed to compare 
the system value V produced by the heuristics with the best possible value realizable under the same 
conditions. In Experiment 7, for example, a system with 50 pages and a 2305 drum was loaded with the 
eight processes described below: V* -1 50 I I I ",' "1 45-1 4 1 40"1 I I I V: 35-1 total 1 system value 
I I (plge-lec/eec) I 30-- I I I I 25-- I I I I I 2o-I 2 4 k 2 2 2 1 2 2 * 88 22 1 2 2 2 24 ;84 4 kl 4 
1 4 4 8 22 2 * 4 2 4 2 2 1 4 4 1 5 2 2 1 15.,,, 10- .5-- 0-11 I 0 I 50 I 100 U MIN 150 I 200 U MAX 250 
I 300 I 350 I 400 Us total system page fault rats (Â£aul~s/eue) Figure 6: Experiment 7 71 Process Bi(msec. 
) Ci(pages) l I0 50 2 lO 50 3 50 lO 4 50 lO 5 I0 I0 6 lO ]0 7 50 50  8 50 50 The first part of the experiment 
was to find the best page allocation for each of the 256 possible MPS's, and to measure its value. The 
highest value realizable by any possible MPS, with optimal page allocation, is denoted by V*; it was 
found to have the value V* = 46.02 pages. The next part of the experiment consisted in allocating page 
frames according to Heuristic 2 (u i = u) for each of the 256 possible MPS's. For each such allocation, 
the system paging rate U and the system value V were found. These measurements are plotted on a U-V plane 
in Figure 6, in which each point repre- sents a possible MPS. (Note: This Figure was produced by a computer 
printout. The appearance of a number such as "8" denotes the clustering of 8 points in the same print 
position. An asterisk (*) denotes clustering of more than 9 points). If we employ Heuristic l with Umi 
n = 150 faults/sec and Uma x = 250 faults/sec, we are confined to some MPS in the center region of the 
graph. The mean value of all points in the center region is 40.I pages, 87% of V*. So we see that the 
two heuristics used in conjunction will result in an average sys- tem value of 87% of the best possible 
value under the conditions of the experiment. Other experiments were performed with similar results. 
CONCLUSIONS We have proposed an analytic model for the behavior of processes in a non-CPU-bound virtual-memory 
system, and for the performance of the paging drum. Our model is unusual in that it takes into account 
the tradeoff between two scarce resources of the system: main memory page frames and paging channel capacity. 
Combining our definition for "value" with the model, we have developed methods of measuring the value 
of a given page-frame allocation, and of finding the optimal allocation of a given number of pages among 
a given set of processes. We have tested our methods on simple systems and found the results to be intuitively 
reasonable. We have proposed a pair of simple, low overhead heuristics for page management, and evaluated 
them by means of the model. Under the conditions of our experiments, the heuristics provide an inexpensive 
means for dynamically tuning a system for near-optimal throughput. REFERENCES <RefA>(1) Belady, L. A. and Kuehner, 
C. J. Dynamic space-sharing in computer systems. Comm. ACM 12,5 (May 1969) pp. 282-288.  (2) Chamberlin, 
D. D. A scheduling mechanism for interactive systems with virtual memory. IBM Research Report RC 3911, 
Thomas J. Watson Research Center, Yorktown Heights, N.Y. (June 1972). (3) Chu, W. W. and Opderbeck, 
H. The page fault frequency replacement algorithm. Proc. 1972 FJCC, Vol. 41, pp. 597-609.  Doherty, 
W. J. Scheduling TSS/360 for re- (4) sponsiveness. Proc. 1970 FJCC, Vol. 37, pp. 97-III. (5) IBM Systems 
Component Summary: 2305 Fixed Head Storage ,. IBM Publication No. GA26- 1589-I (June 1970). (6) Pinkerton, 
T. B. Program Behavior and Control in Virtual Storage Computer Systems. PhD. Thesis, University of Michigan, 
1968.</RefA>    
			
