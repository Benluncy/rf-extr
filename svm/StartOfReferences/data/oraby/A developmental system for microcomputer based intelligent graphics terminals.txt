
 A DEVELOPMENTAL SYSTEM FOR MICROCOMPUTER BASED INTELLIGENT GRAPHICS TERMINALS Permission to make digital 
or hard copies of part or all of this work or personal or classroom use is granted without fee provided 
that copies are not made or distributed for profit or commercial advantage and that copies bear this 
notice and the full citation on the first page. To copy otherwise, to republish, to post on servers, 
or to redistribute to lists, requires prior specific permission and/or a fee.Siggraph 76, July 14-16 
Philadelphia, Pennsylvania Richard G. Kellner Lynn D. Maas Los Alamos Scientific Laboratory Los Alamos, 
New Mexico 87545 ABSTRACT A low cost intelligent graphics terminal for developmental work consisting 
of a Tektronix storage tube terminal and an ALTAIR 8800 microcomputer is described. The microcomputer 
system is used to develop and debug customized intelligent terminal configurationsand features before 
a production model is finalized and fabricated. This allows flexibility in terminal design and allows 
changes to be tried easily before final versions are built. The customized terminal features that are 
 described are the abilities to process a segmented display file, to provide refresh of up to 130 characters 
or vectors, to control accessory devices such as a flexible disk and a graphics tablet, to provide data 
compression of over 60% on large pictures, and to provide a local debugging utility. 1. Introduction 
CRT of a terminal. A draw takes from two to five characters to transmit, depending on the At the Los 
Alamos Scientific Laboratory length of the draw and the resolution being there are two time-sharing 
systems available to used, and a move takes from three to six users at remote sites through a system 
of characters. We are neglecting the infrequent dedicated data communication lines. The KRONOS special 
cases of short horizontal draws or system is available on three CDC 6600-class moves, which take one 
or two characters, respectively. machines and LTSS, the Livermore Time-Sharing System, is available 
on two CDC 7600 machines. The data lines from the various locations in the At 300 baud, a maximum of 
15 vectors or  moves could be sent each second. However the Laboratory are connected to the computers 
 through a network of concentrators and switching terminal does not receive data continuously machines. 
One of the KRONOS machines is also because of the limited size of the system output buffers time-share 
delays, and various delays available on a telephone dial-up basis. in the data concentrators. Thus, 
the effective The majority of the data lines support a data communication rates are lower than the data 
rate of 300 baud, but there are also some actual line rates being used. For medium size 110-and 1200-baud 
lines. The graphics pictures of about a thousand vectors, 1200 baud terminals used with the time-sharing 
systems are is a usable data rate with our time-sharing systems. For larger pictures, the drawing time 
 Tektronix storage tube terminals. Besides their ability to store alphanumeric and graphics data at 
1200 baud becomes excessive. Because of the various system delays mentioned above we cannot on the screen 
of the CRT, these terminals have normally achieve higher than 1200 baud effective the advantages of 
low cost and software support data rates with the LTSS system, even if a by the manufacturer. terminal 
is run at its maximum speed of 9600 baud. Therefore, data compression is very Although the Tektronix 
graphics terminals  desirable especially for those applications provide a usable interactivegraphics 
capability that involve large pictures. by themselves, several features that significantly improve 
their performance in our 2.1 Data Compression environment can be provided by the addition of a small 
amount of local processing power. Several Typically,our pictures are composed of  of these features 
are aimed at alleviating the sequencesof vectors whose endpoints in a given problems caused by the 
low data rates between sequence do not change very much. This property the host computers and the terminals. 
We have can be used as the basis for a data compression interfaced a MITS ALTAIR 8800 microcomputerto 
a scheme. Tektronix 4015 graphics terminal in order to develop some of these features. The stand-alone 
Tektronix graphics  terminals are addressable in terms of absolute The custom features that we have 
 screen coordinates only. For the typical case experimented with on our developmental terminal of 
1024 x 1024 resolution, this implies that it are data compression, menu refresh, control of takes 20 
bits of information to address a given Tektronix accessories,handling of segmented point on the screen 
of the terminal. Normally display files, and debugging. A custom terminal these 20 bits are sent to 
the terminal as four for a specific user application can be ASCII charactersof eight bits each, with 
three constructed that would have one or more of these bits of each character being redundant features 
incorporated into it. information. In the cases where the low or high order five bits of Y data or the 
high order five 2. Custom Terminal Features bits of X data have not changed from those of the last 
point, they need not be sent again Because of the low data communication  because they are remembered 
by the terminal. In speeds involved, complex pictures take a this sense, two of the three bits mentioned 
 relativelylarge amount of time to paint on the above are not redundant because they are used to indicate 
whether a character represents X or Y data, and low or high order bits. Thus, a stand-alone Tektronix 
graphics terminal has a certain amount of data compression built into it. However, for pictures that 
have the property mentioned above, it is desirable to be able to use relative coordinates for addressing 
 points. If endpoints of successive vectors in a sequence have not changed much, it does not take many 
bits of information to represent the change; however, some information must also be present that tells 
how many bits of data correspond to a given point. There is more than one way to implement the above 
ideas. The amount of data compression attainable with a given scheme is picture dependent so that an 
adaptive scheme would seem desirable. However, a fixed scheme can be implemented that works well for 
a variety of pictures, yet still gives very good data compression for pictures composed mainly of very 
 short vectors. The method operates on sequences of vectors such that in a given sequence, the endpoints 
of successive vectors do not change by more than a fixed amount n (which can vary from sequence to 
 sequence) in absolute screen coordinates. The data is packed as n-bit relative coordinate information 
into 8-bit characters for transmission to a terminal. These sequences, with their corresponding n, 
are recognized by the terminal by means of certain control characters. For a given picture, n should 
be chosen as small as possible in a given sequence, otherwise a loss of data compression would result. 
Also, the number of sequences in a picture should be minimized because of the overhead of the control 
 characters that must be sent to signify a sequence. These two conditions are not always compatible, 
so that a compromise must be reached. A fine mesh is an example of the type of picture for which the 
method works well. Meshes typically arise when partial differential equations are numerically solved 
by a finite element or a finite difference scheme. Usually we can take n = 5 or 6 for these pictures 
and obtain up to 60% data compression compared to the usual Tektronix data format. A disadvantage 
of the above data compression scheme is that if there is a transmission error in one of the compressed 
 sequences, the picture can become greatly distorted. If one of the packed data characters is received 
incorrectly the portion of the picture represented by the rest of that sequence will be translated from 
the correct version. This does not happen with absolute coordinate data. If a control character is missed, 
the result is much worse. Thus, an error detection scheme might be a worthwhile addition to the data 
compression scheme, depending upon the quality of the data lines between the host computer and the 
microcomputer. 2.2 Selective Refresh A capability that is very desirable in certain applications is 
the ability to refresh selected information on the screen of the terminal. For example, there might 
be a large amount of stored picture information on the screen while only a menu is being refreshed. 
If the menu were stored and the screen erased every time the menu area filled up a large amount of 
 time would be spent needlessly in repainting the picture information.  In addition to storage capability, 
the 4015 has a limited refresh capability. For hardware characters, the refresh limit is 4000 characters 
per second, which is about 130 characters at a 30 Hertz refresh rate. Vector refresh is limited by 
the line rate between the microcomputer and the terminal, but cannot exceed 5000 inches per second. 
Tektronix sells a custom product "display buffer" that can be used for refresh purposes independentlyof 
a microcomputer [4]. This buffer can drive the terminal at the full refresh rate. However, the display 
buffer is almost as expensive as the complete microcomputer system. On the other hand, the display 
buffer plugs into the terminal s minibus, making a more compact arrangement. Therefore, depending upon 
the application involved, it might be desirable to use the display buffer alone, the microcomputer alone, 
 or both the display buffer and the microcomputer. If the microcomputeris used alone for refresh, a 
high speed interface (TTY-port interface) must be used instead of a RS232 interface to take full advantage 
of the terminal s speed. The display buffer might be used alone for those applicationswhere the added 
capabilitiesof the microcomputer are not needed. The microcomputer might be used alone for those applications 
requiring several custom features. Both the display buffer and the microcomputermight be used when it 
is inconvenient to have a TTY interface on the Tektronix terminal or when the microcomputer would be 
overtaxed without the display buffer. 2.3 Device Control The microcomputer is well-suited to use as 
a controller for a graphics tablet or a flexible disc. Our time-sharing systems will accept input data 
strings only if they are less than a certain length and conform to a certain format. However, it is desirable 
to be able to send large amounts of data from a tablet or disk to the host computers. Consider the 
case where one wants to draw curves on the tablet and have the coordinates sent to a host machine. This 
is useful, for example in interactively solving boundary value problems for partial differential equations. 
 A Tektronix tablet has a mode in which it continuously samples the pen position and generates coded 
coordinates. However, our time-sharing systems will not accept these continuous strings of data. But, 
by having the microcomputer store the data, block it into suitably sized and formatted blocks, and ship 
the data to the host one block at a time upon prompts by the host the continuous mode of the tablet 
becomes usable. Communication between the tablet and the microcomputer is accomplished by means of certain 
fixed control characters that the tablet is equipped to generate for these purposes. The Tektronix 
flexible disks are equipped to send data to a host in a prompted block mode if the data on the disk has 
previously been assembled into blocks of the appropriate size, separated by carriage return characters. 
 Clearly, there are cases when the data will not have this format, and the microcomputer can then be 
used to send the data as outlined above. The microcomputer also makes feasible the use of a flexible 
disk or a graphics tablet of another manufacturer to obtain special features or lower cost in a specific 
application. The only requirement is that the microcomputer be equipped with an I/O port with the appropriate 
 kind of interface to the disk or tablet. Much of the same software in the host computer that is used 
for the Tektronix disk or tablet can be used for another manufacturer'sdisk or tablet. The microcomputer 
handles the conversion between the various control sequences,block sizes, and, in the case of the tablet, 
coordinate codes. 2.4 Segmented Display File The ability to support a segmented display file [2] that 
is stored locally at the terminal can be useful in those applicationswhere only part of a picture changes 
between viewings. Only those segments of a picture that change between viewings are retransmitted from 
the  host. In storage mode, the 4015 is capable of generating 1000 hardware characters per second. 
The vector writing rate is the same as in refresh mode. Therefore, great savings are possible in data 
communicationstime and in picture repaint time. The segmented display file can be stored on a flexible 
disk or in the microcomputer's memory. The Tektronix flexible disk interfaces directly to the terminal's 
minibus and can transmit data to the terminal at a rate of 6000 baud. If the memory of the microcomputer 
is used for storing the display file, then direct memory access (DMA) to the terminal would be a desirable 
feature. Segmentation is handled with a minimal amount of software in the host computer, in addition 
to the Tektronix software. These additions are in the form of a library of FORTRAN subroutines. These 
subroutines include open, close, append, delete, paint, display, and undisplay. "Open" and "close" are 
used in conjunction with each other to define a segment and to cause it to be stored. Segments are 
only stored in the memory of the microcomputer. "Append" is used to add to the contents of a segment 
and "delete" is used to delete a segment. A display flag is associated with each segment. When the 
"paint" subroutine is called, all segments that have their display flag set are drawn on the terminal. 
The display flags can be set and reset by the "display" and "undisplay" subroutines respectively. The 
 memory of the microcomputer is managed by a linked list scheme. A related function is storing display 
 subroutines or templates [2] locally at the terminal. This has obvious application to logicor electronic 
circuit design. The display subroutines could be descriptions of the commonly used circuit symbols in 
relative coordinates. A circuit design or analysis program in the host computer could display a symbol 
by transmitting to the terminal a symbol identifier and positioning data, not a detailed description 
of that symbol in absolute coordinates. Any vectors that lie partially or totally outside the viewing 
area after positioning are forced to the boundary. Better clipping will be provided in later versions. 
 2.5 Program Debugging The microcomputer can serve as a very  useful debugging utility. For example, 
character sequences that produce very strange behavior may be sent to the terminal. When this happens 
because of some software or hardware error, it can be very difficult to locate. Such things have happened 
because of system errors on both time-sharing systems. The microcomputer can track down such problems 
by triggeringon specified character sequences and by storing the transmitted data bordering on the 
trigger  points. The stored data can then be sent one character at a time to the terminal, thus trapping 
the offending character(s) without manually searching through and decoding a paper tape full of hundreds 
of characters. The microcomputer can also be used as a  diagnostic tool to check out graphics terminals. 
 A program written to sequentiallyexercise all of the various modes of the terminal can aid greatly 
in locating hardware problems.  3. Hardware and Software of the Developmental System The technology 
for implementing the functions we have described with a microprocessorhas existed for several years. 
 However, it is only recently that hardware prices have dropped to the point where we could consider 
putting such a system on every Tektronix graphics terminal at the Los Alamos Scientific Laboratory 
that could potentially benefit from it. Our philosophyhas been to purchase, rather than design, hardware 
whenever possible. Furthermore, we program in a high level language, PL/M [1], to keep software costs 
 to a minimum, except when the executable code is too slow. Our developmental system consists of a 
MITS ALTAIR 8800 microcomputerand a Tektronix 4015 storage tube graphicsterminal. The ALTAIR microcomputer 
uses an INTEL 8080 8-bit microprocessor,which executes all instructions in 2-9 microseconds and can 
directly address up to 64K of memory. A bus structure is used on which the I/O lines, the memory address 
lines control signals, power supply voltages for TTL and MOS circuits, etc., are available. A large 
number of accessoryboards that plug into the bus are available from MITS and other manufacturers. We 
have 9K of 8-bit word volatile semiconductormemory, 4K of EROM nonvolatile memory, two I/O channels 
with RS232C interface, and two I/O channels that can interface to either RS232C, TTL levels, or TTY 
 20 milliampere current loop standards. The complete microcomputer costs under $1600. Both volatile 
and nonvolatile memory is available for less than 2/3 cent per bit on 4K memory boards. A real time 
clock vectored interrupt capability, and DMA would enhance our abilities to perform the functions that 
we have described, and these will be added to the system as they become commercially available. The 
I/O boards can accept any of the standard ASCII characters with or without a parity bit. However, the 
boards had to be modified to enable them to transmit and receive a "break" control signal, which is 
used by both of our time-sharing systems. Our Tektronix 4015 is equipped with a 4921 flexible disc, 
a 4953 graphics tablet and a Tektronix special product display buffer. The 4015 also has an enhanced 
graphicsmodule that provides features useful in some applications, such as 4096 x 4096 point addressabilityand 
 hardware dashed and dotted lines. Source code for the microcomputer is written in the PL/M language. 
PL/M is similar to, but simpler and more systems-oriented than PL/1, and can be learned in several 
days by anyone who is familiar with a high-level programming language. We have a PL/M cross-compiler 
implemented on both the KRONOS and LTSS time-sharing systems. There is also an 8080 simulator that can 
be used, among other things, for timing measurements on portions of code. A cross-assembleris available 
that we use for optimizing code that is too slow from the compiler and for writing heavily used subroutines. 
All of the above software packagesare INTEL products that are written in FORTRAN. Once the executable 
code has been generated on one of the time-sharing systems, we "down line load" it via the data communication 
lines into the microcomputer by means of a loader permanently stored in EROM. The code can then be tested 
and changes can be made either by keying them in directly at the microcomputer or by changing the source 
code on the time-sharing system. When a code is completely debugged, it can be put in EROM for use in 
a dedicated microcomputer system. Control character sequences are used to switch between the various 
modes of the microcomputer system. The down-line loader has simple checksum error checking and handshaking 
with the software in the host computer. It requires about 600 eight-bit words of storage for the program 
 itself. Programs for refresh segmentation, controlling peripherals,and debugging all require similar 
amounts of program storage. Programs for data compression and subroutining are longer, but the actual 
lengths can vary greatly depending upon the exact implementation. Conclusion An ALTAIR 8800 microcomputerconnected 
to a Tektronix graphics terminal provides a low cost intelligent graphics terminal that can handle the 
functions described in this paper. Software costs are minimal because the programming for the microcomputercan 
be done in a high-level language. Also, we have only implemented functions that involve a minimum of 
software changes in the host computer to the previously existing software. There are several functions 
that would be useful but would involve major software additions and changes in the host computer. For 
example, conic sections could be sent by the host computer in parametric form and decoded by the microcomputer. 
However, applications software would have to be written that would take advantage of this capability. 
This is a nontrivial task if general purpose codes are desired. A data compression scheme for text, such 
as described in [3], is another example. REFERENCES <RefA>[1] INTEL -"A Guide to PL/M Programming" Rev. 
1, Intel Corp., Santa Clara, Calif., September 1973. [2] W. Newman and R. Sproull -"Principles of Interactive 
Computer Graphics," McGraw Hill, 1973. [3] J. Sullivan -"Text and Data Compression," Union Carbide Corp., 
Report UCCND-CSD-INF-51 August 1975. [4] TEKTRONIX -Display Buffer Instruction Manual, Tektronix, Inc., 
Beaverton, Oregon, 1975</RefA>.  
			
