
 A Graph-Aided Inference Browser for Developing Knowledge-Based Systems Suk I. Yoo and Chang H. Park 
Artificial Intelligence Laboratory Dept. of Computer Science  Seoul National Abstract The graphical 
display of the inference process may be necessary for the knowledge engineers to under­stand the detailed 
stat us at each inferring step so as to develop the knowledge-based systems easily. This paper presents 
a graph-aided inference browser that displays the relationship of rules and facts in the graphical form 
and provides several useful func­tions related to debugging and explanation. The in­ference browser presented 
consists of three modules, the inference knowledge module (IKM), the inference graph module(IGM), and 
the debugging operation module(DOM).  Introduction The knowledge-based systems are a class of computer 
programs that can offer useful information to the users through the inference process. To develop a knowledge-based 
system, the knowledge engineer must collect the domain knowledges from the experts and formulate the 
knowledge base. The formulation pro­cess of the knowledge base may include editing the knowledge base, 
verifying and refining it during the inferring process, although the verifying and refining process is 
very sophisticated because it concerns the internal knowledges dynamically changed during the inferring 
process[5,1 1,13,14,15]. Recently, a number of knowledge-baaed system shells have been produced to reduce 
the burden of knowledge engineers in developing the knowledge-based systems. The knowledge-based system 
shells such as 0PS5, KES, and EXPERT provide various functions related Permission to copy without fee 
all or part of thie material ie granted provided that the copiee are not made or distributed for direct 
commercial advantage, the ACM copyright notice and the title of the publication and its date appear, 
and notice ie given that copying is by permieeion of the Aeeociation for Computing Machinery. To copy 
otherwiee, or to republieh, requiree a fee and/or specific permiaeion. e 1992 ACM O-89791 -502-X1921000210333 
...$1 .50  University to debugging for the correctness of the knowledge­based systems being developed[7j8,11]. 
Since these shells however do not provide the graphic interface for the debugging facilities but the 
text-oriented interac­tion, the knowledge engineers may have some difficulty in understanding the status 
at each inferring step and the entire inferring process. Some shells like S.1, ART, LOOPS, and NEXPERT 
provide some graphic facil­ities to display the hierarchy of objects and the rela­tionship of rules and 
facts [4,6,7, 11]. However, these graphic facilities do not provide the functions related to debugging 
and explanation. The graphical display of the inference process may thus be necessary for the knowledge 
engineers to understand the detailed status at each inferring step so as to develop the knowledge­based 
systems easily. The efficient graph drawing al­gorithm is then required to display the relationship of 
rules and facts generated during the inferring process. Several techniques to draw a directed graph efficiently 
have been int reduced in[9, 10,12]. However, these tech­niques do not work well for the graphs, called 
the in­ference graphs, which are dynamically formulated as the inferring process goes on. This paper 
presents a graph-aided inference browser that displays the relationship of rules and facts in the graphical 
form and provides several useful func­ tions related to ference browser ence knowledge module(IGM), ule(DOM). 
The rules and facts debugging and explanation. The in­consists of three modules, the infer­ module(IKM), 
the inference graph and the debugging operation mod- IKM keeps the information shout processed by the 
inferring steps and also provides this information, when required, to the other two modules, the I(IM 
and the DONI. The IGhl draws the inference graph generated after each in­ferring step is performed. The 
DOM provides the environment in which the knowledge engineer easily consults the inferring process. The 
inference browser presented here is assumed to be designed for the knowledge-based system that employs 
the well-known Rete matching algorithm[3]. Inference Process and Inference Graph . The knowledge-based 
system for which the suggested inference browser is designed is assumed to adapt the Rete algorithm as 
the pattern matching algorithm. The matching activity in the Rete network occurs when the elements in 
the working memory are changed and they are reflected on the Rete network. The execution of a rule selected 
in the matching process changes some elements in the working memory. This inference process may thus 
be described by the repeti­tion of match-execute action based on facts and rules. Further this process 
can be represented by a directed graph[l], called an inference graph, in which a node stands for either 
a rule or a fact and an arc stands for the relationship between a fact and a rule. The inference graph 
is constructed during the infer­ring process in a way that an arc from one node standing for a fact to 
another node standing for a rule is generated when the fact is matched to the LHS part of the rule and 
conversely an arc from one node for a rule to another node for a fact is gen­erated when the fact is 
generated by the execution of the RHS part of the rule. For example, suppose that a system contains two 
rules RI: A, B ~ C, D and R2: B,C, D ~ F, and two facts A and B. In this system, the first execution 
of RI is followed by the execution of R2. The inference graph constructed by the two consecutive inferring 
steps is shown in Fig. 1. Figure 1: Example of Inference Graph  A Model of Inference Browsers The inference 
browser consists of three modules, the inference knowledge module (IKM), the inference graph module(IGM), 
and the debugging operation module(DOM) as shown in Fig. 2. Each module in the inference browser is explained 
below. Inference Browser Knowledge Base Inference Graph Infer-nce Inference Module Syst9m Knowledge 
E Module Debuggingn+=~ Operat ion Module tI IL Knowledge Engineer Figure 2: Diagram of inference Browser 
 Inference Knowledge Module(lKM) The IKM keeps the information about rules and facts processed by the 
inferring steps and provides this in­formation, when required, to the other two modules, the IGM and 
the DOM. To keep the information, the IKM has a list of history blocks as shown in Fig. 3: one history 
block has ten units where each unit con­tains the information associated with the execution of a rule 
like the fact generated by the rule. To trans­mit the information kept in the IKM to the other two modules, 
the IKM has several access routines. For ex­ample, the routine get JG() returns the pointer of the inference 
graph kept in the IKM to the IGM. The rou­tine in~orm.pos(z, y) returns the information about the node 
located at the x-y coordinates to the DOM. History Block 1 2 ..... 10 1 2 ..... 10 . -+ --) \ Fr -L 
Unit polattr to Ilnt of facts natcbed to this role. MFACT Structure c.ntalnlng rule maw, Inferring step 
RULE nnnber, md pelnter of contents. In form. t ton .bout rul. ?olnter toIlmt of fscts generated by tbls 
rule. GFACT ~ POlocQrte ll~t ef tbe mdlfled VSIWS .f fscts.  UPDATE Pointer t* Ilst of tokens .f this 
,Ule. TOKEN Patater te a dunmy fsct used kthem tbls ,UIe IS EMPTY called b, prevl$us rule. 3 Figure 
3: List of History Blocks  Inference Graph Module(IGM) The IGM draws the inference graph as the inference 
process is being performed. In drawing the infer­ence graph efficiently, four routines are incorporated: 
the dummy nodes inserting routine, the equal-depth nodes collecting routine, the x-y coordinates determin­ing 
routine, and the nodes-arcs drawing routine. Dummy nodes inserting routine : Let a depth of a node in 
the inference graph be 2k if the node stands for the rule executed at the k-th inferring step. Then the 
depth of a node standing for a fact that is generated by the execution of the rule becomes 2k + 1. When 
an arc is to be drawn between two nodes where the difference of depths of the two nodes is more than 
one, it is not easy to draw the arc without crossing out the nodes already generated by the intermediate 
inferring steps. To resolve this problem, this routine inserts a sequence of dummy nodes between the 
two nodes in such a way that the depth-difference between every two consecutive nodes is one. The following 
algorithm dummy-insert, which is invoked after each inferring step, inserts dummy nodes between two nodes 
of an arc. Algorithm dummy insert(arc) /* arc = (nl, nz) */ n] = origin node of arc; n2 = terminal node 
of arc; depl = depth of nl; depz = depth of raz; if(k=depz depl > 1) then ~+ create dummy nodes*/ create 
the dummy nodes dl, dz, .... dk-l; insert dl, dz, .... dk-1 into (n], nq) such that (rr.l, all), (all, 
dz), .... (dk-l, nz) are generated; return(dl ); else return; end end dummy-insert EquaLdepth node~ collecting 
routine : As a sequence of inferring steps is performed, the inference graph gets larger and it takes 
more time to search blindly for a certain node in the inference graph. To re­duce the search time, this 
routine creates a structure with so called depth-buckets which collects nodes by depth. At each inferring 
step this routine updates the depth-buckets by putting the generated nodes into their associated depth-buckets. 
These depth­buckets can be used in searching for some node in the inference graph for further processing. 
The al­gorithm called nodes-collect receives an arc from the algorithm seardJG and inserts each of two 
nodes forming the arc into the associated depth-bucket. The algorithm search.IG, which is activated after 
each inferring step, searches the updated inference graph for the newly generated nodes, generates the 
necessary dummy nodes by activating the algorithm dummy-insert, and puts the newly generated nodes including 
the dummy nodes into the associated depth­buckets by activating the algorithm nodes-collect. Algorithm 
nodes-collect(arc) I* arc= (n,, nz) */ nl = origin node of arc; nz = terminal node of arc; depl = depth 
of nl; dep2 = depth of nz; B&#38;p~ = ~depl Uml; /* n, is inserted into its depth-bucket B,=p, */  BtieP2 
= BcieP2 ~ n?; /* r12 is inserted mto its depth-bucket Bd,P, */ end nodes~ollect Algorithm searchdG(IG) 
/* IG is the inference graph generated after each inferring step */ nP, = the pseudo start node of IG; 
nl = nPT; nz = a terminal node of the arc originating at nl Arc = (nl, n2) /* Arc is used in the graph 
search */ push (n], nz) into STACK; loop /* depth-first search */ if ( Arc was examined afready or Arc 
is NULL ) then if (STACK is empty) return; Arc = pop from STACK; end if ( there is an arc (rrl, nt) where 
n! # nz ) then push (nl, n,) into STACK; /* n, is a temporary node +/ /* (nl, n,) is another arc originating 
at n] ./ end nq = dummy insert (Arc); /* invoke the dummy nodes inserting routine */ nodes= ollect(Arc); 
/* invoke the equal-depth nodes collecting routine *J if ( there is an arc (nz, rr~)) then e~~.=A~c;i~~ 
~e~ arc originating n2 */ Arc = NULL; end forever end search-IG z-y coordinates determining routine 
: This routine de­termines the vertical and the horizontal Dositions of the nodes so that the inference 
graph is ~ell shaped. It is assumed that the flow direction of the inference EraDh is from the left to 
the right. To determine ~he vertical position of each node: the vertical size of the inference graph 
must be determined first. Then the vertical position of a node is computed in such a way that the nodes 
contained in one depth-bucket are evenly spaced in the vertical direction. This method needs less time 
in determining the vertical position than the barycenter method[2]. The horizontal posi­tion of each 
node is determined according to its depth and the nodes with the same depth are arranged in the same 
horizontal posit ion. The following z.y-adj is the algorithm to determine the positions of the nodes 
in the inference graph. Algorithm x-y~djo for each depth-bucket BI do /* Bi is the depth-bucket containing 
the nodes with depth i */ if (h < IB,I )then h= IB,I; end /* the vertical size of the inference graph 
*/ h = h* INTERHEIGHT; for each depth-bucket Bi do Hi= h/(B~+ 1)x 2; I* Hiis a factor adjusting the vertical 
space among the nodes in B, ~} for each ni) E Bi do Yij =h-Hi *j; e:: Vi, is y-position of nlj in Bi 
*/ if(i=O) then ~i = FIRST_X; /* xi is x-position of all nodes in B, +/ else ~i=xi-l + BW:-l; /. BVVi_l 
is the width of (i-l)th depth-bucket. BWi-l can be determined during the creation of depth-buckets. */ 
end end end x-yadj Node9-arcs drawing routine : This routine actually draws the nodes and the arcs on 
the screen. An arc be­tween two nodes whose depth-difference is more than one is drawn by connecting 
all dummy nodes inserted on the arc. As the number of the dummy nodes in­serted gets larger, however, 
the arc drawn by connect­ing all the dummy nodes may not be well shaped, This problem is resolved by 
not connecting those dummy nodes contained in the depth-buckets which also con­tain the nodes standing 
for the rules. This routine is more formally described in the following algorithm dra w-nodes-arvs. Algorithm 
drawmodes-arcso for each depth-bucket Bi do for each node n E B* and n is not a dummy node do draw the 
node n; /* node drawing +/ for each arc = (n, n,) do /* n,is a temporary node */ j+ arc drawing*/ /* 
draw all arcs originating at n */ ni =n; ns = nt; if (nz is a dummy node) then while (nz is a dummy node) 
do /* drawing an arc between two nodes whose depth-difference is more than one */ if (n2 E Br where 
B, contains rule node) then arc-tmp = (ns, nt); ns= nt; end draw a line between nl and nz; arc-tmp = 
(nz, n,); nl = n2; n2 = nt; end end draw a line between nl and n2; end end end end drawnodes~rcs  Debugging 
Operation Module(DOM) The DOM provides the environment in which the knowledge engineers easily consult 
the inferring pr~ cess. To check if each inferring step works correctly, the knowledge engineer may need 
to observe the se­quence of rules generating the current result or what change is to be done when certain 
facts or rules are changed. The following three operations are provided by the DOM: Operations on the 
rules : Itenables the knowledge engineers to access the contents of the rules by clicking the associated 
nodes in the inference graph by means of the mouse device. If the rule accessed is found to be not the 
one which was supposed to be fired, its contents is changed so that the desired rule is to be fired. 
Operations on the \acts : It enables the knowledge en­gineers to access the contents of the fact in the 
similar way as in the above. By changing the facts if neces­sary the knowledge engineers can observe 
the newly generated inferring sequence in the inference graph. Operations on the injerring sequence : 
It enables the knowledge engineers to access the information stored at each inferring step which includes 
the contents of the conflict set and the working memory. With this operation, the knowledge engineers 
can easily check if the generated inferring sequence is correct and also see how the current conclusion 
is derived. The algorithm browse-operations below performs these three operations, and the following 
algorithm node-select is to search the node clicked by the mouse device for these operations. Algorithm 
browser~perations( event) /* event is the structure about the mouse device *f loop if ( event is NULL 
) return; if ( Rightlhtton Event ) then case: (Event from rule-node) display rule menu; case: (SHOW) 
 open a display window; show the contents of selected rule on the window; case: (BREAK) mark breakpoint 
in the rule; case: (BACKHERE) recursively remove the inferring steps; redraw the inference graph; end 
case: (Event from fact-node) display fact menu; case: (SHOW) open a display window; show the contents 
of selected fact on the window; case: (MODIFY) open a edit window and show the fact; if (the selected 
fact is modified) then delete the fact and add the fact modified; end case: (DELETE) delete the selected 
fact; end otherwise: display top menu; case: (CONTINUE) continue the inference process; ret urn; case: 
(BACK) remove the knowledge processed at current inferring step; redraw the inference graph; case: (HOW) 
for each inferring step do get the information stored at each inferring step; convert it into pseudo-English 
and show it; end case: (CANDIDATES) show the rules in conflict set at current step; end end end forever 
end browsermperations Algorithm nodeselect(event) /* event is the structure about the mouse device */ 
if ( event is NULL ) return; z = x-position of mouse within event; = y-position of mouse within event; 
for each depth-bucket 1?, do f, find a depth-bucket containing the node located at z, v */ if(~i-l + 
BWi <z< Zi ) then f, z, is horizontal position of the nodes in Bi */ for each node n,j E B, do if (y< 
y,j) then /* the vertical position of the first node in B, is smallest */ 1* yij is the vertical position 
of n,, */ ni, is selected; return (Tli,); end end  end end return(NULL); end nodeselect Fig. 4 shows 
three snapshots illustrating the debug­ging process performed by the DOM. The example used here is to 
find the cousin of the given person. When the system is initiated with the given knowl­edge base, the 
inferring process starts drawing the corresponding inference graph. As shown in Fig. 4(a), however, the 
inferring process may stop although the desired conclusion is not generated. Then the knowl­edge engineer 
may check the conflict set stored at the last inferring step, which is shown to be empty in this case. 
At this stage, the knowledge engineer believes that there are some erroneous rules or facts in the knowledge 
base. To find the erroneous rules or facts, the knowledge engineer clicks the rightmost fact-node to 
see its contents, and finds the error that john and jack are misplaced in the undesired positions as 
shown in Fig. 4(b). By applying the corrected data, the newly generated inferring sequence producing 
the de­sired conclusion is displayed as shown in Fig. 4(c). Discussion A model of inference browsers 
to enable the knowl­edge engineers to develop the knowledge-based sys­tems easily was presented. It consists 
of three mod­ules, the inference knowledge module(IKM), the infer­ence graph module(IGM), and the debugging 
opera­tion module(DOM). The IKM keeps the information about rules and facts processed by the inferring 
steps. The complexity for maintaining the IKM is negligi­ble as compared to others. The IGM draws the 
in­ference graph on the screen using the four routines, the dummy nodes inserting routine, the equal-depth 
nodes collect ing routine, the x-y coordinates determin­ing routine, and the nodes-arcs drawing routine. 
The dummy nodes inserting routine and the equal-depth nodes collecting routine are executed by the algorithm, 
search-IG, the complexity of which is O(e) where e is the number of arcs in the inference graph. The 
time taken by the x-y coordinates determining routine with the algorithm z.y.adj and the nodes-arcs drawing 
rou­tine with the algorithm draw-n odes-arcs may be given by O(n) where n is the number of nodes. The 
com­plexity of the algorithm, node-seiect, for the DOM is O(n) where n is the number of nodes in the 
inference graph. rl ~ty Conflict Set . (b)~ 4) . Figure 4: Example References <RefA>[1] J. A. Bondy and U. 
S. R. Murty, Graph Theory with Applications, American Elsevier Publishing, 1976. [2] J. Warfield, Crossing 
Theory and Hierarchy Map­ping , IEEE Trans. on Systems, Man and Cybernet­ics, SMC-7(7), pp. 502-523, 
1977. [3] C. Forgy, Rete: A Fast Algorithm for the Many Pattern/Many Object Pattern Problem , Artificial 
Intelligence, Vol. 19(1). pp. 17-37, 1982. [4] M, Stefik, D. G. Bobrow, S. Mittal, and L. Conway, Knowledge 
Programming in LOOPS: Report on an Experimental Course , The AI Magazine, Vol. 4(3), Fall, 1983. **rsonl: 
:stov*SO.O uith *rsl*t*: t-cousin with *.O 8pers0nZ:*.O tam uitb of Debugging Process [5] F. Hayes-Roth, 
D. A. Waterman and D. B. Lenat (eds), Building Expert Systems, Addison-Wesley Publishing, 1983. [6] J. 
C. Kunz, T. P. Kehler, and M. D. Williams, Applications Development Using a Hybrid AI De­velopment System 
, The Al ~agazine, Vol. 5(3), Fall, 1984. [7] P. Harmon and D. King, Expert Systems: Arti­ficial Intelligence 
in Business, John Wiley &#38; Sons, 1985. [8] W. Mettry, An Assessment of Tools for Build­ing Large Knowledge-Based 
System , The Al Mag­azine, Vol. 8(4), Winter, 1987. [9] E. R. Gansner, S. C. North and K. P. Vo, DAG: 
a program that draws directed graphs , Software Practice an~ Experience, Vol. 18, pp. 1047-1062, ~988. 
 [10] P. Eades and X. Lin, How to Draw a Directed Graph , IEEE Workshop on Visual Languages, pp. 13-17, 
1989. [11] C. H. Park and S. I. Yoo, Developing Environ­ . . ment for Building Knowledge-Based Systems 
, Ko­rea Information Science Society, Vol. 17(1), pp. 40­51, 1990. 2] Frances J. Newbery and Walter 
F. Tichy, [ EDGE: An Extendible Graph Editor , Software -Practice and Experience, Vol. 20(S1), pp. 63-88, 
1990. 3] S. 1. Yoo and I. K. Kim, An Expert System for Diagnosing Automobile with Electronic Control 
Units , Proceedings of the IITT Conference on Ex­pert Systems Applications, pp. 171-176, 1990. [ [14] 
S. 1, Yoo and I. K. Kim, DIAS1: A Diagnos­ing System for Automobiles with Electronic Con­trol Units , 
Erpert Systems with Applications, Vol. 3(4), 1991. [15] S. I. Yoo, 1. K. Kim, C. H. Park, H. J. Chang, 
T. G. Kim and M. K. Min, HEXPERT: An Ex­pert System Building Tool , Proceedings of the 9ni IEEE International 
Conference on Tools for Artiji­ciai lnieiiigence, pp. 510-511, 1991.</RefA>   
			
