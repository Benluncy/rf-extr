
 Proceedings of the 1992 Winter Simulation Conference ed. J. J. Swain, D. Goldsman, R. C. Crain, and 
J, R. WiLson A DISTRIBUTED, OBJECT-ORIENTED COMMUNICATION NETWORK SIMULATION TESTBED M. Scott Corson 
Electrical Engineering Department and Systems Research Center University of Maryland, College Park ABSTRACT 
The Distributed Network Simulation Testbed is a re­search tool designed to aid users in the modeling 
and performance analysis of communication proto­cols. The testbed can be used to model communica­tion 
networks consisting of mobile and/or immobile nodes communicating over broadcast and/or point­to-point 
channels. Its object-oriented design permits users to utilize previously developed modules and, when 
necessary, to derive new modules which are subsequently added to the testbed. The testbed, im­plemented 
in Sire++, can run either sequentially on a single processor or in parallel on multiple proces­sors. 
An object-oriented, graphical user interface al­ lows users to monitor simulation progress for both demonstration 
and debugging and permits users to I graphically construct network simulations from ex­ isting testbed 
components. INTRODUCTION The Distributed Network Simulation Testbed is a re­search tool designed to 
aid users in the modeling and performance analysis of communication proto­cols . It serves as a reusable 
simulation platform upon which users develop individually tailored sim­ ulations. The testked s primary 
design goal is to re duce time necessary for users to develop communica­tion network simulations. This 
goal is accomplished through object-oriented soft ware reuse. When using the testbed, users construct 
communication network simulations from existing testbed components and when necessary, develop new components 
for their simulation which are then added to the testbed for future use. The secondary design goal is 
to permit distributed, multi-processor simulation. Distributed execution permits simulation of much larger 
networks than would be possible on a single workstation (due to memory constraints) and, for some applications, 
gives parallel performance speed-up. The testbed is written in the Sire++ Programming Language, a process-oriented 
discrete-event simula­ tion language imbedded in the object-oriented lan­guage C++. The testbed s design 
is ob]ect-orzented and hence, very modular allowing it to be incremen­ tally built and used. For those 
unfamiliar with object­oriented programming, a good introduction is given in Wiener and Pinson (1988). 
The testbed may be configured for two modes of execution, single proces­sor or multi-processor. Given 
the same initial con­ditions, both modes produce the identical simulation runs and either may be advantageous, 
measured in terms of execution speed, depending on the network being simulated. 2 ABSTRACT SYSTEM MODEL 
The system model stems from a top-down, object­oriented view of a network. The design approach is to 
combine all possible communication network models and, from this aggregation, extract those core com­ponents 
which are present in all models. These core components are the abstract data types or objects of the 
object-oriented model and form the simula­tion s abstract framework. Each abstract type heads an object 
hierarchy derived from the abstract type. The relationships between the abstract objects define the basic 
relationships between their respective de­rived non-abstract object hierarchies. Users are not permitted 
to create instances of abstract objects but must construct simulations from the more specialized objects 
derived from the abstract objects. The fol­lowing outlines the simulation s major abstract data types, 
the name of each is italicized when introduced. At its highest level, a communication network con­sists 
of a set of nodes which exchange messages with one another. The nodes may be mobile (cellular user, satellite, 
personal communications user, etc. ) or fixed (satellite ground station, telephone switch, 672 8 1 1 
Layer 7 I I 1 Layer 6 I 1 Layer 5 I 1 Layer 4 1 1 1 Layer 3 ElI 1 1 I 1 I DLC1 I I DLC2 I Layer2 I DLCM 
I I 1 I I I 1 I I 1 I NodeI 1 I I I I I I I Local Channel liRR-- -­ 1 rcvr targs incm_xmtr.9 rcvr_targs 
incm_xmtr9 rcvr_targs incm_xmtrs I \ ----------------=-----------------J Figure 1: 0S17-layer model LAN 
node, etc.). Nodes are broken down into lay­ers according to the 7-layer 0S1 model (see Fig. 1). Layers 
2-7 model communication protocols and con­sist of protocol objects whereas layer 1 models the physical 
hardware layer and consists of transmitters and receivers. Both transmitters and receivers are further 
separated into two abstract types, broadcast and point-to-point; a distinction which will be made clear 
shortly. The nodes communicate by sending messages over communication links. Links, which are also subdi­vided 
into the abstract varieties broadcast and point­to-point, connect a transmitter to a receiver. The implication 
is that a broadcast link type connects a broadcast transmitter to a broadcast receiver and that a point-to-point 
link type connects a point-to-point transmitter to a point-to-point receiver. A point-to­point link models 
a physically hardwired connection such as a fiber optic cable or telephone line. A broad­cast link models 
a wireless, possibly temporary con­nection between a transmitter and a receiver within range of the transmitter. 
All links consist of physics objects and noise objects. Physics objects determine parameters such as 
propagation delay and signal at­tenuation. Noise objects determine received SNR and model the link s 
particular noise phenomena, possibly statistically corrupting the packet s content. Communication channeis 
are either broadcast or point-to-point and consist of a collection of appropri­ately typed links. Broadcast 
channels are assigned a portion of the spectrum, determined by center fre­ quency and bandwidth, and 
transmissions on these frequencies occur over broadcast links assigned to those channels. Hence, link 
type and frequency de­ termine the assignment of broadcast cast channels. For point-to-point signment 
of links to channels is by link/channel type. For instance, work may consist of both fiber and links 
to broad­channels, the as­determined solely a telecomm net­copper links, each group constituting a different 
logical point-to-point channel. The relationship between transmitters, re­ceivers, and links can be seen 
for both channel types in Fig. 2. Note, the transmitter/receiver mapping is 1-1 for point-to-point channels 
and 1-N for broadcast channels. In modern networks, messages are exchanged be­tween nodes in the form 
of packets. Packets are com­ posed of of which meaning Users bits which are grouped has a fixed bit 
length to the protocols. construct simulations, data types mentioned above rived from the abstract types. 
tionships between the abstract ited by the derived objects. simulation may consist of two into data jields, 
each and conveys a special not from the abstract but, from subtypes cle-Yet, the basic rela­objects is 
the inher-For instance, a cellular types of nodes, cellu­ 674 Corson (a) Broadcast Model $ Channel Model 
.. . . . . . . .. . . . . . . . . .. . . . . . . . . . . -Y .Y +-~ ~. >5 L. . . . . . .. . . . . . 
. . .. . . . . . . . . ...* (b) Point-to-point Model Figure 2: Transmitter/receiver link mapping lar 
users and cell base stations, both of which are ticular to broadcast communications are identified in 
derived from the abstract type node. They com-the broadcast abstract classes and are redefined in municate 
over cellular channels on cellular links us-each of the derived classes to suit their particular re­ing 
cellular transmitters and receivers, all of these quirements. These operations can then be applied derived 
from their corresponding broadcast abstract uniformly to a heterogeneous list of broadcast objects type. 
Alternatively, a satellite simulation may consist and the correct operation is automatically applied 
to of satellites and ground stations with communication each object resulting in software polymorphism 
, occurring using derived objects specific to satellite communications. In both cases, the network s 
basic operation remains the same. Namely, nodes transmit 3 SIM++ IMPLEMENTATION packets over broadcast 
channels which are received by other nodes. However, the way in which this occurs In Sire++, a program 
is broken down into entdzes. Entities are loosely coupled, independently execut­ing objects that interact 
by scheduling and receiving Therein lies the key to the simulation s design. The time-stamped events. 
These entities may either all commonality between cellular and satellite communi-reside on a single processor 
or be distributed over cations, namely that of broadcast communication, is multiple processors. The interacting 
entities form identified and placed in a set of abstract broadcast a distributed, object-oriented, discrete-event 
simula­objects. This information is then inherited by both tion whose synchronization is maintained by 
mecha­cellular and satellite communications objects result-nisms built into Sire++, thus relieving the 
progranl­ing in software reuse. Also, sets of operations par-mer of the burden of process synchronization. 
In differs greatly between cellular and satellite networks. Sire++ terminology, when all entities reside 
on a single processor, the simulation is termed sequential whereas a multi-processor simulation is termed 
dis­tributed. Sire++ ensures that, given the same initial conditions, both sequential and distributed 
simula­tion runs produce the same results. During sequential execution, a global simulation clock and 
event list is maintained and the discrete­event simulation proceeds forward in simulation time according 
to standard event list processing tech­niques. During distributed execution, a separate clock and event 
list is maintained at each processor. The global simulation time, defined to be the mini­mum of the local 
clocks, is not known to the entities. The entities execute events from the local event list optimistically 
under the assumption that their local clock cent ains the global simulation time. Sire++ saves the state 
of each entity at each event from the local time back to the global simulation time. Occa­sionally, an 
event is received at a processor which is scheduled to occur before the processor s local time. In these 
cases, the states of all entities at that proces­sor must be rolled back to their states just prior to 
the scheduled time of the event and before local forward progress may be resumed. The rollback may require 
sending anti-events to cancel events which had been sent during the computation which was rolled back. 
This synchronization mechanism involving state sav­ing, rollback, and anti-messages, is known as Time­warp 
and is transparent to the simulation. This transparency permits identical source code for both sequential 
and distributed execution modes. Sire++ designates two types of abstract entities: sire-entity and sim.interface.entity. 
An entity de­rived from sire-entity may undergo rollback whereas an entity derived from siminterface-entity 
always ex­ecutes at the global simulation time and hence, never undergoes rollback. Sire++ simulations 
consist of two phases: ini­tialization and execution. During the initialization phase, entities are created 
and assigned to processors and global memory is initialized, Once completed, the execution phase begins. 
During the execution phase, global memory may not be modified and the mapping of entities to processors 
is frozen. The testbed contains three types of abstract enti­ties: nodes, simulators, and monitors. Both 
nodes and simulators are derived from sim_entity whereas monitors are derived from siminterface.entity. 
During the initialization phase, the testbed uti­lizes a YACC-based parser to read in a simulation file. 
This simulation file specifies either (i) an entire network simulation consisting of nodes, simulators, 
and (possibly) monitors and all the information re- Network Test bed quired to perform a simulation or 
(ii) a monitor used to graphically build a network simulation. 3.1 Simulators Simulators manage communication 
channels; each may manage one or more channels. There may be multiple simulators per simulation, each 
managing a different set of channels. A communication channel consists of links, all of which must be 
the same type. The simulator contains the global topological knowl­edge of each channel it s managing. 
This is essen­tial for modeling broadcast channels or for modeling point-to-point channels that use centralized 
link con­trol. Consequently, the simulator controls the status of each link in those channels. All simulators 
must be derived from the abstract base class com.sim, itself having been derived from sire-entity. The 
class com_sim contains an array of pointers to channels, each non-N tJLL entry indicat­ing a channel 
is present. The com.szm also holds an array containing topological information regarding those nodes 
that either (i) are permanently connected to a link in one of the simulator s channel (point-to­point 
link) or (ii) may possibly become connected to a link in such a channel (broadcast link). All exam­ple 
of the latter case would be a cellular user node which has a receiver tuned to a cellular channel be­ing 
managed by a simulator, but is not currently in range of a transmitter. The simulator must track the 
position of the node to know when it comes in range of a transmitter. Channels come in two abstract varieties: 
broad­cast ( bcasi-than) or point-to-point (piop-than), the major difference being the virtual operations 
defined for each channel. The type of channel controlled by the simulator depends on the simulator s 
type. For example, a cellular simulator would control cellular channels while a satellite simulator would 
manage satellite channels. Nevertheless, both the broadcast channels types are derived from beast-chun, 
which is derived from channel and thus share the same under­lying data structure shown in Fig. 3. The 
data struc­ture for each channel i contains two lists, a zwttr_td list and a rcur-id list. Each xmtr-id 
and rcvr-td identify a transmitter or receiver on a node which is associa­ted with a link in channel 
i. These ids are indexes into the simulator s node topological information ar­ray shown in Fig. 4.. Each 
node cent ains a mntr array and a rcvr array. Each xmtr associates with it a list of rcvr.targs, each 
of which represents a receiver on a node also tuned to channel i which is in range of the zmtr. Each 
rcvr_targ contains a pointer to a l~nk object over which the receiver may be reached. Sin~­ 676 Corson 
Channel Array : El /- -B~B %a~ xmtrs on channel i i  Is-m-m-m-- -.,, MAX_NUM_CEIANS El Figure 3: Channel 
data structure L\ Node Array bm?l!d\ A A\ 1 rcvr target Iistdxmtr G=) ,TT 2 rcvr tarz I I rcvr tam 
rcvr ta ~V4 / Xmtr Array r1 1 2 MAX_NUM_XMTRS i 1 2 MAX_NUM-RCVR S Rcvr Array I tt t incm xmtr incm 
xmtr incm xmtr l\ incm xmtr incoming xmtr Iistslrcvr ++ &#38; t ) incm xmtr +/ MAX_NUM_NODES Figure 
4: Node topology information data structure ilarly, a r-cur identifies a receiver on a node which is 
node and sire-entity. The abstract base class node tuned to channel i and associates with it a list of 
contains information regarding the node s ID, loca­incm-zmtm, each of which represents a transmitter 
tion, and a pointer to a motion-model which deter­on a node also tuned to channel i which is in range 
mines its movement (if mobile). of the rcvr. In this case, however, the incm_xmtr con- Each osi-node 
is broken down into the 7-layer 0S1 tains only the ID of the incoming transmitter and not architecture 
of Fig. 1. Each block in the figure repre­a link pointer. This data structure is generic and can sents 
a pointer to an abstract base class which must be used for all channels. Note, the characteristics of 
be assigned to an object derived frolm the base class. each different channel determine its connectivity 
and The particular set of protocols and hardware objects the link type pointed to by each rcvr.-targ. 
Portions attached to these pointers depends on the type of of the data structure containing broadcast 
channel node and determines how the node functions. Pro­information are dynamic and change as the broad­ 
tocol layers may be swapped easily by reassigning cast channel s topology changes. Portions containing 
pointer values, provided the adjacent layers inter­point-to-point channel information retain the connec­ 
faces are compatible with the new protocol layer. tivity fixed initially. However, link parameters and 
Each layer 2 protocol object (derived from layer-2) operation may change dynamically if necessary. is, 
by default, associated with a different transmit­ ter/receiver pair. However, the mapping of layer_2s 
3.2 Nodes to hardware objects may be reconfigured as desired. All transmitters and receivers must be 
derived from Nodes represent the communication points of the net­the abstract objects xmtr and rcvr respectively. 
work. They do not possess global topological knowl­ edge and must rely on the simulators for accurate 
Network traffic is generated in the layer. ) object topology information (more on this later). Each node 
by calling the virtual function gen-msgo. C++ im­must be derived from the abstract base class osi-node, 
plements polymorphism through the use of virtual itself having been derived from the abstract classes 
functions. For those unfamiliar with C++, refer to uint Header uint C0ntent9 uint Si7e t ABSTRACT [ Nor+ 
ABSTRACTdefault type for all layer 7 packets uifieid Source uitield Seq uitleld Xmtr uitield Ikt uitietd 
Index uifteld Rcvr 1 J ~sneld Data uitield Total / \ Figure5: Default packet hierarchy the book by 
Ellis and Stroustrup (1990). The func-stated previously that Sire++ does not require dif­tion gen.msgo 
returns a packet derived from msg.lY. ferent versions of the source code for each execution If the default 
layer 7 protocol /ayer-7.-def is present, mode. However, that does not mean that one may ig­the packet 
returned would be of type msg.17-deJ The nore parallel processing issues if one hopes to achieve default 
packet hierarchy used by the default layer pro-speed-up in a distributed run. A sinzu[atzon wrttten tocols 
is shown in Fig. 5. The msgJ7 is passed to the without regard for distributed execution will likely run 
layer-6 through the virtual function pkt_tx(msgJ7*). more slowly distributedly than sequentially. All 
layer--6s must have such a function which is rede- Earlier, it was stated that the ltnk reside in the 
fined for the each protocol. In a similar fashion, the channels in the simulator entities. Therefore, 
when­packet continues down the layers, each layer expect­ ever a ~mtr, which resides on a node entity, 
transmits ing a packet type derived from the previous layer s a packet, the node must send (schedule 
one or more abstract packet type, until it reaches a /ayer_2 object events) the packet to the proper 
simulator which, in and is queued for transmission. turn gives the packet to the channel and finally 
to the Eventually, the packet is transmitted by a xmtr link. Similarly, after the link operates on the 
packet, towards one or more rcvrs. Separate copies of the the simulator must send it to the proper node 
which packet are given to each link corresponding to each gives it the the intended TCVT. rcw-. The link 
object operates on the packet with its This model is true to real world situation. Each physics and 
noise objects, each derived from phys-obj transmitter blindly transmits packets into the com­and noise-obj 
respectively, and delivers the packet to munication channel and they magically reappear at the rcvr. 
At the receiving node, the packet is passed the receiver. However, this implementation requires up through 
the layers. If the node was the intended fi­that every packet transmitted by a node entity is nal destination 
of the packet, it is delivered to layer_7. sent through a simulator entity before reaching the Otherwise, 
it is intercepted by the /ayer_3 protocol, intended node entity. This design is not too bad for rerouted, 
and sent back down for transmission, sequential execution as there is only one event list and each event 
is processed in the order scheduled. How­ever, packet transmission constitutes the lion s share 3.Z.I 
Design for Parallel Implement ation of the work in a communication network and occurs Up to now, we have 
described the major software frequently. Also, a typical network model consists of objects without mention 
of sequential versus paral-relatively few channels but many nodes. Therefore, lel implementation issues 
or performance. It was during distributed execution, the simulators would . Bases Mobiles Satellite 
Figure 6: Combined satellite/cellular system  r- - - - - - - . . .L. . . . . . h. . . . . . . PrOcessOrl 
. . . Pr0cess0r2 1 -&#38;:-;* -a:f-:.me-# P . . . . . L- --Proce,.or;-----:&#38; Processor 5 . . . 
. . Processor 6 Processor 3 Figure7: Combined satellite/cellular processor mapping become bottlenecks, 
each processing a large num-eliminate the bottleneck problem. The price paid for ber of events, effectively 
removing a portion of the the performance increase is partly in melmory ( dupli­ system s inherent parallelism 
and lowering achievable cate rcvr-targ and incm-xmtr lists) and partly in CPU speed-up. time (the events 
necessary to keep the lists consis­tent). The assumption is that many more events must The implementation 
is modified for parallel execu­ be sent to transmit packets than to keep the lists con­nel or locaLchan, 
(recall Fig. 1). The local-than sistent due to topological changes. This assumption tionbyhaving each 
node utilize itsown localchan­ contains the node s local topological knowledge. As-holds for point-to-point 
networks and for broadcast sociated with each zmtr and Tcvr is a rcvr.targ list networks which don t 
have rapidly changing tol>olo­ gy~. Simulator are not involved k packet t,~,..,mk and zncm.crmtr list, 
re~pectively. These li.st~ are mana­sion and are only concerned with channel topology ged by the simulators 
and kept consistent with those management. in the channels. Whenever an event occurs which changes a 
link s status, the change is reflected in both the channel and local-than in which the link resides. 
 3.3 Monitors (under development) Hence, when transmitting, the xmtr gives the packet to the link in 
the loca[-than (via a function Monitors present a 3-dimensional, animated image call) instead of its 
copy in the channel (via events). of network operation for demonstration or protocol Once the link has 
operated on the packet, it sends (via debugging. They also provide a graphic, object­ events) the packet 
to the proper node entity. By using oriented, menu-driven user interface from which the local. chans, 
we remove half the event scheduling and user may graphically construct networks from testhed components. 
Monitors may execute in two modes: passive and interactive. In passive mode, user-selected graphical 
events are received from the nodes and simulators, placed in a graphics event buffer, and displayed as 
quickly as possible. Nodes and simulators are per­mitted to execute freely, provided the graphics buffer 
does not overflow. If this occurs, the nodes and sim­ulators are halted while the display catches up 
with the simulation. In interactive mode, the nodes and simulators are halted after each graphic event 
thus permitting single-step operation essential for pro­tocol debugging. Users are able to change simulation 
parameters at each step during a run. This ability precludes the use of global data (due to the Sire++ 
constraint) for many items which are global (such as the simulation run s duration) and requires that 
a separate copy be kept at each entity. There may be multiple monitors active at one time, each viewing 
a different set of network objects and ob­ject interactions. Only one monitor may be interac­tive at 
a given time. Monitors run under X-windows utilize the XGL graphics library. 3.4 Example Consider the 
example shown in Fig. 6. A group of mobiles needs to communicate. With cellular cov­erage, they communicate 
through the base stations over cellular channels while outside the coverage, they communicate through 
the satellite and base stations over combined satellite/cellular channels. The mo­biles, bases, and satellite 
are node entities and two simulators are used for channel management. A possible processor mapping is 
seen in Fig. 7. The solid communication indicates packet transmis­sion events between the nodes via the 
local channels. The dashed communication to the channels are topo­logical update events. The dashed events 
to the mon­itor (if present) indicate graphical events. 4 SUMMARY The testbed can be used to model communication 
networks consisting of mobile and/or immobile nodes communicating over broadcast and/or point-to-point 
channels. Its object-oriented design permits users to utilize previously developed modules and, when 
nec­essary, to derive new modules which are then added to the testbed. The testbed, implemented in Sire++, 
and can run either sequentially on a single processor or in parallel on multiple processors. The source 
code is identical for both modes and is tailored for parallel execution. A graphical user interface allows 
users to monitor simulation progress for both demonstration and de­bugging and permits users to graphically 
construct network simulations from existing testbed compo­nents. REFERENCES <RefA>Ellis, M. and B. Stroustrup. 
1990. The Annotated C++ Reference Manual Addison-Wesley Wiener, R. S. and L. J. Pinson. 1988. An Intro­duction 
to Object-Oriented Programming and C++ Addison-Wesley </RefA>AUTHOR BIOGRAPHY M. SCOTT CORSON is a Faculty Research 
As­sistant in the NSF Systems Research Center at the University of Maryland, College Park. He is also 
a Ph.D. candidate in Electrical Engineering and will join the faculty at the University of Hlinois-Chicago 
in the Fall. His research focuses on distributed algo­rithms for multiple access and routing in mobile 
radio networks. While at the Center, he has directed the testbed s development in support of network 
research efforts underway in the Communications and Signal Processing Laboratory.  
			
