
 ALGORITHMS FOR RATIONAL FUNCTION ARITHMETIC OPERATIONS Ellis Horowitz Computer Science Department Cornell 
University Ithaca, New York 14850 ABSTRACT Despite recent advances in speeding up many arithmetic and 
algebraic algorithms plus a general increase in algorithm analyses, no computing time study has ever 
been done for algorithms which perform the rational function arithmetic operations. Mathematical sym- 
 bol manipulation systems which provide for operations on rational functions use algorithms which were 
initially given by P. Henrici in 1956. In this paper, these algorithms are precisely specified and their 
computing times analyzed. Then, new algorithms based on the use of modular arithmetic are developed 
and analyzed. It is shown that the computing time for adding and taking the derivative o~ rational functions 
is 2 orders of magnitude faster using the modular algorithms. Also, the computing time for rational 
function multiplication will be one order of magnitude faster using the modular algorithm. KEYWORDS 
AND PHP~SES: xational functions, modular arithmetic, arithmetic operations, algebraic algorithms CR 
CATEGORIES: 4.22,5.10,5.30 INTRODUCTION Recently work has dramatically progressed in developing efficient 
arithmetic and algebraic algorithms for a broad class of operations. For example, G. Collin's sugges- 
tion for computing multiplicative inverses in a finite field, [COL69a] and W.S. Brown's method for polynomial 
greatest common divisor calculation, [BRO71] are 2 such recently improved algorithms. At the same time 
many of these algorithms have been incorporated into computer systems which perform a variety of symbolic 
and algebraic calculations, e.g. ALTRAN, [HAL70] and SAC-i [COL68]. Both of these systems restrict their 
operations to formulas for which there exists a canonical form, such as multivariate polynomials and 
rational functions. This permits the use of more efficient algorithms and hence increases the usefulness 
of these systems as a problem solving tool. Both ALTRAN and SAC-i allow for operations on multivariate 
rational functions. Also, symbol manipulation systems which allow for a more general data type still 
provide for rational function manipulation. Thus, efficient algorithms for performing the rational function 
arithmetic operations are critical to all of these systems. The meth- -108- ods that are currently used 
were originally described in J.ACM by P. Henrici, [HEN56]. He was concerned with rational number arithmetic 
and primarily with the question of how to avoid overflow during the computation steps. W.S. Brown in 
[BR064] extended Henrici's methods to apply to rational functions as well as to rational numbers. Despite 
their current use in symbol manipulation systems today, no computing time analysis have ever been done 
for any of these methods. Only in [COL68], pp. 16, does G. Collins give a brief argument as to why the 
Henrici-Brown algorithms will be 2 to 4 times faster than conventional methods when applied to rational 
numbers. Thus, this paper has 2 main goals. First, the Henrici-Brown algorithms for the rational function 
arithmetic operations will be specified and analyzed. The computing times for these algorithms will be 
derived, based on the latest, most efficient methods for polynomial arithmetic and greatest common divisor 
(gcd) calculation. The second goal will be to develop new methods based on the use of modular arithmetic. 
These new algorithms will be specified, their computing times analyzed and compared to the times for 
the Henrici-Brown algorithms. CURRENT METHODS Existing systems which allow for operations on rational 
functions, e.g. [HAL70], [COL68] and [MAN68] all use the algorithms which were initially described by 
Henrici in [HEN56], pp. 6-9. These algorithms were given for manipulating rational numbers with the 
idea of preventing overflow in the intermediate computations. These methods were directly generalized 
by W.S. Brown to apply to rational functions. In this section these algorithms will be presented and 
their computing times analyzed. We first introduce some notation and give some preliminary results to 
aid in analyzing the later algorithms. Definition 2.1: Let fCxl, ...., x n) and g~xl, ..., Xn~ be ~eal-~alued 
functions defined on some common domain D. Then f = 0fg) if there exists a positive real number c such 
that f(x I ..... x n) ~ c'g(x I ..... x n) for all (x I .... , Xn) 6 D. The maximum computing times 
for operations on multi-precision integers will be given in terms of the maximum number of digits of 
the integers. Thus, given 2 integers bounded in magnitude by d, then the maximum computing time for adding 
or multiplying these integers is 0(In d) and 0((in d) 2) respectively. A new method for integer multi- 
plication, due to S. Schonhage and V. Strassen ~NU69], pp. 269 takes time 0((in d) (in in d) (in In 
in d)). However, their method seems to be of more theoretical interest rather than practically useful 
and so we will assume the use of a classical multiplication algorithm. Definition 2.2: Let V(d,m) = 
{P(x) : deg(P) < m and all coefficients of P(x) are bounded in magnitude by d}. Polynomials are assumed 
to have integer coefficients. Then, rational functions will be regarded as numerator-denominator pairs 
of relatively prime polynomials such that the leading coefficient (Idcf) of the denominator is positive. 
This defines a unique representation for rational functions which is necessary for precisely defining 
algorithms which manipulate these entities. -109- Theorem 2.1: Let P(x), Q(x), P(x)/Q(x) 6 V(d,n). 
Then the time to compute P(x) + Q(x) is 0(n in d) and the time to compute P(x) Q(x) or P(x)/Q(x) is 
0(n2(in d) ~) . Proof: see [COL69b], pp. 206 Now in all of the following algorithms to be developed, 
the operation of determining the greatest common divisor (gcd) of 2 polynomials will be critical. Theorem 
2.2: Let P(x), Q(x) E V(d,n) and A = gcd(P,Q). Then if k = degree (A) , A E V((nd)k k) and the maximum 
computing time to find A is 0(n(n -k+l)2(in d) 2). Proof: see [COL69b], pp. 213 Thus, it is possible 
that the factors of a given polynomial can have much larger coefficients than the coefficients of the 
product. Since we will be interested in count- ing all multiprecision arithmetic operations, these bounds 
are extremely important. We now begin to examine the Henrici-Brown algorithms. Algorithm RSUM: Input: 
2 rational functions Ri/R2, Si/S 2 in lowest terms. Output: Ti/T 2 where Ti/T 2 = (Ri/R2) + (Si/S 2) 
a rational function in lowest terms; i) B ÷ gcd(R2, S2) ; 2) R2 ÷ R2~B; S2 ÷ S2/B; 3) T1 ÷ RiS2 + SiR2 
 4) T2 ÷ R2s2; 5) A ÷ gcd(Tl, B) ; 6) T1 ÷ T1/A; T2 + T2/A; 7) end. Theorem 2.3: Let Ri/R2, Si/S 2 be 
2 given rational functions such that Ri, R2, Sl, $2 6 V(d,n). Then the maximum computing time for Algorithm 
RSUM is 0(n5(in nd) 2). Proof: Let k I = deg(B), k 2 = deg(A) in Algorithm RSUM. Then Step Computing 
Time Comments (i) 2 2n(n-kl+l) (in d) B E V((nd) k 1 , kl) k 1 (2) (n-kl) k~ (in nd) 2 ~2,$2 6 V((nd) 
,n-kl) k 1 (3) nk l(n-k I) (in d) (in nd) T1 E V((nd) , 2n-kl) (4) nk l(n-k I) (in d) (in nd) klk 2 (5) 
k12 (2n_kl) (2n_kl_k2+l) 2 (in nd) A E V((nd) , k2) (6) 2 3 klk 2(2n-kl-k 2) (in nd) 2 It is easy to 
see that step (5) bounds the time for this algorithm. Since B = gcd(R 2, S2), it follows that k 2 ~ k 
I ~ n. Letting k I = k 2 = n, we have that the maximum computing time is 0(n5(in nd) 2). Algorithm RPROD; 
 Input: 2 rational functions Ri/R 2, Si/S 2 in lowest terms; Output: Ti/T 2 = (Ri/R2) (Sl/S2), a rational 
function in lowest terms. i) A ÷ gcd(R I, S2); 2) B ÷ gcd(R 2, Sl) ; 3) R1 ÷ Ri/A; S2 ÷ ~2/A; R2 ÷ R2/B; 
S1 ÷ Si/B; 4) T 1 ÷ RlSl; T 2 ÷ R2S2; 5) end; Theorem 2.3: Let Ri/R 2, Sl/S 2 be 2 given rational 
functions such that R I, R 2, S I, S 2 6 V(d,n). Then, the maximum computing time for Algorithm RPROD 
is 0(n4(in nd)2). Proof: = degree(B) in Algorithm RPROD above. Then, Let k I = degree(A), k 2 Step 
Computing Time Comments k 1 (i) n(n-kl+l)2(in d) 2 A 6 V((nd) ,k I) k 2  (2) n(n-k2+l)2(in d) 2 B 
6 V((nd) ,k 2)  3(n-k2) ) (in nd) 2 Ri,S 2 6 V((nd)kl,n-kl )  (3) (k~(n-k I) + k 2 k2  (4) (n_kl) 
(n_k2)klk2(in nd) 2 ~2,~ 1 6 V((nd) ,n-k 2)  It follows from steps [1) and ~2) that k I ~ n, k 2 ~ 
n. Letting k I = k 2 ~ n/2 step (3) bounds the computation time, namely 0(n4/16)(in nd) 2) = 0(n4(in 
nd) 2). Thus, we see that the computing time for rational function addition is 0(n5(In nd) 2) and 0[n4[in 
nd) 2) for rational function multiplication. It follows immediately that the time for subtraction and 
division are the same as those for addition and multiplication respectively. For subtraction differs 
from addition by only a multiplicative constant and division merely requires us to invert the rational 
function and multiply. Any rea- sonable data structure for a rational function should allow us to invert 
the numerator and denominator in a constant amount of time. Finally, let us look at the Henrici-Brown 
method for computing the derivative of a rational function. Algorithm RDERIV: Input: A rational function 
Rl(X)/R2(x) ; in lowest terms; Output: A rational function Ti/T 2 where Ti/T 2 = (Ri/R2) '. I) R{ ÷ 
PDERIV(Ri) ; R½ ÷ PDERIV(R2) ; 2) G ÷ gcd(R2, R~) ; Ri' -'" 5) T2 + R2R2; 6) H ÷ gcd(Ti,G) ; 4) T1 
÷ R2 -RiR 2 , 7) T 1 ÷ Ti/H; T 2 ÷ T2/H 8) end. Theorem 2.4: Let Ri/R 2 be a rational function, Rq, 
R 2 E V(d,n). Then, the maximum computing time for Algorithm RDERIV is O(n5(ln nd)~). Proof: Let k 
I = degree(G), k 2 = degree(H) in Algorithm RDERIV. Step Computing Time Comments (i) n(in n)(in d) 
R{,R~ 6 V(nd,n-l) k 1  (2) n(n-kl+l)2) (in nd) 2 G 6 V((nd) ,kl)  (3) k I 3(n_kl) (In nd)2 R2'R2, E 
V((nd)kl,n-kl ) kl+l  (4) (n-l) (n-kl)kl(in nd) 2 T1 E V((nd) ,2n-kl+l ) k 1  (5) (n-kl)nkl(in nd)(in 
d) T2 E V((nd) ,2n-kl)  (6) (2n_kl+l) (2n_kl_k2+2)2 2(in nd) 2 klk2  k I H 6 V((nd) ,k2)  (7) k 2(2n-kl-k2+l)k12k22(In 
nd)2  It follows from steps (2) and (6)that k I ~ n-i and k 2 ~ n-l. Letting kl, k 2 assume their maximum 
values, step (7) will bound the computation time which is n(n2)n2(in nd) 2 = 0(n5(in nd)2). Thus we 
see that rational function addition and taking the derivative can take an order of magnitude more time 
than forming the product. MODULAR ~ETHODS Now let us proceed to develop algorithms for rational function 
manipulation using modular arithmetic techniques. These techniques have already proved useful for speed- 
ing up such processes as polynomial gcd calculation [BRO71] and rational function inte- gration [HOR70b]. 
A review of the use of modular arithmetic as applied to algebraic algorithms can be found in [HOR70a]. 
 Briefly, let us restate some of the computing times for the basic operations. We assume a list of single 
precision primes Pi' .... Pk are available. Given 2 elements a,b in the finite field with Pi elements, 
GF(Pi) , then the time to compute a+b or a.b is 0(i). If d is any integer, then the time to compute d 
mod Pi is 0(in d). In general, the use of modular arithmetic can be described as a 3 step process: 
i) Given inputs d, e compute (d I mod pl,...,dk mod pk ) and (e I mod Pl' .... e k mod pk ) 2) Manipulate 
d and e using their radix representations producing a final k-tuple (c I mod pl,...,Ck mod pk ) 3) Apply 
the Chinese Remainder Algorithm to produce the unique c such that c H c i mod Pi' 1 ~ i ~ k. The use 
of Garner's method to implement the Chinese Remainder Algorithm gives a com- puting time of 0(k2), see 
Knuth [KNU69]. A recent paper by L. Heindel and E. Horowitz, [HEI71] has shown theoretically how this 
time could be reduced. However, at the moment  -llZ- their method is not practical and hence Garner's 
version will be assumed. There are 2 other issues associated with the use of modular arithmetic. The 
first is deciding how many primes must be processed before the correct answer with integer coefficients 
can be obtained. One way to decide this is to compute an a priori bound on the size of the coefficients 
of the results using the inputs. This is, in fact, what will be done in the following algorithms. A way 
to possibly avoid this bound is to per- form a quick check to see if the temporary answer is the correct 
one. However, the time for this test must be small to make it worthwhile. A second problem which may 
occur is when the leading coefficient of some polynomial becomes divisible by Pi and thus becomes zero. 
As Brown shows in [BR071], pp. 43-44, the chance of a coefficient being divisible by a prime is extremely 
unlikely, the probability being approximately i/Di. Since Pi is large (Pi is approximately 232-1 on an 
IBM360) the probability of a rejected prime is very small. Thus, in practice an initial test for divisibility 
is made, plus a test after each prime has been processed. Let us now examine a modular algorithm for 
adding 2 rational functions. Algorithm MRSUM: Input: 2 rational functions Ri/R2, Si/S 2 in lowest terms; 
Output: Ti/T 2 = (Ri/R2) + (Sl/S 2) , a rational function in lowest terms. i) [Initialize] n ÷ max{degrees 
of Ri,R2,Si,S2}; d ÷ max{magnitude of the coefficients of R I, R 2, S I, $2}; k ÷ n[log d] ; i ÷ 0; 
no-primes ÷ 0; g ÷ i; 2n+l 2n+l T 1 + x ; T 2 ÷ x ; 2) [Next Prime] i ÷ i+l; Choose next prime Pi" If 
none left, stop; 31 _[Reject Primej If Pi divides either ldCf~l) or idcf~R 2) or idcf~S I) or idcf(S 
2) , then go to ~2) ; 4) [Apply Modular] Rj* ÷ Rj mod Pi' Sj* ÷ Sj mod Pi' 1 <_ j ~ 2 iHomomorphismJ 
 5) [Apply Modular] Tl* ÷ Ri*S2* + R *S * T 2 ; 2 1 ; ÷ R2'$2" [RSUM Routine] A *÷ gcd(Tl* , T2*) ; 
Ti* ÷ Ti*/A ; T2* ÷ T2*/A ; 6) [Apply Chinese] If deg(Tl*) < deg(T I) or deg(T2*) < deg(T 2) [Remainder 
Alg] Then (no-primes ÷ i; T 1 ÷ TI*; T 2 ÷ T2*; q ÷ Pi; go to (2);) Find Ti" T2 : T_I E T 1 mod Pi 32 
E T2* mod Pi; T i E T 1 mod q, 32 E T 2 mod q; 7) [done?] T1 ÷ ~i; T2 ÷ ~2; no-primes ÷ no-primes + 
i; q ÷ q Pi; If no-primes < k, then go to (2) end ; Theorem 3.1: Let Ri/R2, Si/S 2 be 2 univariate 
rational functions such that Ri, R2, Si, S 2 6 V(d,n). Then, the maximum computing time for Algorithm 
MRSUM is 0(n 3 (In d) 2). -113- Proof : Step Computing Time Comments (i) m(in d)  (2) m let m be 
the total number of primes processed plus rejected.  (3) m(in d)  (4) mn(In d)  (5) m(2n 2 + n 2 + 
n 2) = 4mn 2  Both multiplication and gcd calculation of 2 n-degree polynomials takes 0(n 2) steps. 
 (6) nm 2 Using Garner's version of the Chinese Remainder Algo- rithm applied to each coeffi- cient 
 2  (7) m(in d)  Thus, we see that mn 2 + nm 2 bounds the computing time. Assuming that m = 0(n in 
d) it follows that the time for MRSUM is 0(n3(in d) + n 3(In d) 2) = 0(n 3(In d) 2) . Algorithm MRPROD: 
 Input: 2 rational functions Ri/R2, Si/S 2 in lowest terms Output: Ti/T 2 = (RI/R 2) (Si~$2), a rational 
function in lowest terms; I) IIniti~l~z~ n ÷ max{degrees of Ri,R2,SI,S2} ; d ÷ max{magnitude of coefficients 
of R 1 , R 2 , S 1 , S 2 } k ÷ n[In d] Ti+ T 2 ÷ x2n+ 1 2) [Next Prime] i ÷ i+l; Choose next prime, 
Pi" If none left, stop. 3) [Reject Prime] If Pi divides idcf(Rl) or idcf(R 2) or Idcf(S I) or idcf(S2) 
then, go to (2); 4) [Apply Modular] R.* ÷ R. mod Pi ] ] [Homomorphism] Sj* ÷ Sj mod Pi' l!j~2 5) [Apply 
Modular] Ti* ÷ RI*Si* ; T2* ÷ R2"$2" ; [Multiplication] A* ÷ gcd(Tl*,T2* ) Ti* ÷ Ti*/A ; T2* ÷ T2*/A 
; 6) [Apply Chinese] If deg(~l* ) < deg(Tl) or deg(~2*) [Remainder Alg.] < deg(T 2) then (no-primes ÷ 
i; T1 ÷ ~i*; T2 ÷ ~2 ~; q ÷ Pi; go to (2);); Find Ti' T2 : T1 H Ti* mod Pi T2 ~ T2* mod Pi; T1 ~ T1 
mod q T2 5 T 2 mod a; -I14- 7) [end?] T1 ÷ T1; T2 ÷ ~2; no-primes ÷ no-primes + i; q ÷ q'Pi" If no-primes 
< k, go to (2); else end. Theorem 3.2: Le t Ri/R 2, Sl/S 2 be 2 univariate polynomials such that Ri, 
R 2, S 1 , S 2 6 V(d,n). Then the maximum computing time for Algorithm MRPROD is 0(n3(in d) 2). Proof: 
Let m be the total number of primes processed. Step Computing Time Comments (i) n(in d) (2) m (3) m(in 
d) (4) nm(in d) (5) 2 n m (6) 2 nm q represents the product of all previously used primes. 2 (7) m(in 
d) Thus, steps (4), (5) and (6) bound the computing time for MRPROD. Under the assumption that the number 
of rejected primes is small, m = 0(n(in d)), the computing time is 0(n2(in d) 2 + n3£1n d~ + n3~In d)21 
= 0(ja3~in d)2) . Again we have the situation that subtraction and division are d~rect analogs of add~t±on 
and multiplica- tion. Modular algorithms have been presented for performing rational function addition, 
subtraction, multiplication and division. Let us now examine a modular algorithm for finding the derivative 
of a rational function. Algorithm MRDERIV: Input: A rational function Rl(X)/R2(x); Output: A rational 
function Ti/T 2 equal to the derivative with respect to x of Ri/R2; i) [Initialize] n ÷ max{degree(Rl) 
, degree(R2)}; d ÷ max{coefficients of Ri, R 2 in magnitude}; k ÷ n[in d]; no-primes ÷ i ÷ 0; ~ ÷ i; 
2n+l T 1 ÷ T 2 ÷ x 2~ [Next Prime] i ÷ i+l; Choose next prime, Pi" If none left, end. 3) [Reject Prime] 
If Pi divides idcf(R I) or idcf(R2), go to (2); 4) [Apply Modular] [Homomorphism] RI* ÷ R 1 mod Pi; 
R2* ÷ R2 mod Pi; 5) [Apply Modular] *2 [Derivative Alg.] L ÷ R2 ; Tl* ÷ Ri*'R2* ÷ Ri*R2* -Ri*R2*' 
; T2* A* ÷ gcd(Tl*, T2*); ~i *÷ Ti*/A*; ~2" ÷ T2*/A*; 6) [Apply Chinese] [Remainder Alg.] If deg(~l*) 
< deg(T I) or deg(~2*) < deg(T 2) then (no-primes ÷ i; q ÷ Pi; T 1 ÷ Ti*; T 2 ÷ T2*; go to (2);) Find 
Ti' ~2 : ~i H ~i* mod Pi' ~2 H ~2" mod Pi; m T 1 H T 1 mod q, ~2 H T2 mod q; 7) [end?] T1 ÷ ~i; T2 
÷ T2; no-primes ÷ no-primes + i; q ÷ q " Pi If no-primes < k, go to (2); else end. Theorem 3.3 Let R1/R 
2 be a rational function with R 1, R 2 6 V(d,n). Then the maximum computing time for Algorithm MRDERIV(R1/R2) 
is 0(n3(in d)2). Proof: Let m be the number of primes processed. Step Computing Time Comments (i) n(in 
d)  (2) m  (3) m(In dl test if Pi divides leading coefficient;  (4) nm(in d) 2  ~5) n m 2 (6) nm 
g is the product of used primes;  (7) m  Thus steps (4), (5) and (6) bound the computation time. Since 
m = 0(n in d) it follows that the total computing time is bounded by 0(n2(ln d) 2 + n 3(In d) + n 3(In 
d) 2) = 0(n 3(In d) 2) . EVEN LOWER BOUNDS In Sections 2 and 3 a basic fact about the size of the factors 
of a polynomial was used; namely if , n = deg(A) and e £ £n ( la il) 0<i<n 0<i<n (i.e. where e bounds 
the precision of A's coefficients) and if B is a factor of A, then ne bounds the precision of the coefficients 
of B. In order to obtain upper bounds on the algorithms it is necessary to assume such coefficient growth. 
But for many cases this bound is highly unrealistic since if we divide a polynomial with e-pre- cision 
coefficients by another we would normally expect a ~uotiint whose coefficients are no more than e precision. 
In [BRO71], pp. 497 Brown makes this assumption and argues that the computing times derived will then 
more closely reflect the behavior of the algorithms rather than be an upper bound which may grossly overestimate 
the algorithms efficiency. In this section I will rederive the computing times for addition, multipli- 
cation and differentiation using his assumptuion. Then I will show that the lowest asymptotic bounds 
on the rational function operations are obtainable by using the Schonhage-Strassen method for fast integer 
multiplication, [KNU69], pp. 269 (2nd ed.) and the Schonhage algorithm for integer g.c.d, calculation, 
[SCH72]. Incorporating Brown's assumption into the computing time analyses of the modular algorithms 
is straightforward since its only influence will be on m, the number of primes that are to be processed. 
Whereas we previously took m = 0(n in d) we can now assume that m = 0(£n d). In all three algorithms, 
MRSUM, MRPROD, and MRDERIV the bounding expression is n2m + nm 2 which now becomes 0(n2£n d) + n(£n d) 
2). We note that if one carries through the analysis on the Henrici-Brown algorithms using the same assumption, 
then they are still worse than the modular algorithms. For example the time for RPROD would be 0(n2(Zn 
d) 2) > 0(n2(£n d) + n(Zn d) 2). Now the termination test in the modular algorithms must be altered to 
capitalize on the belief that often less than n £n d primes need to be processed. This can be accomplished 
as for instance in MRPROD by testing at step (7) if TiR2S 2 = T2RiS I. The time for this test can be 
 no worse than 0(n2(£n d) 2) times m and m will generally be 0(£n d). Thus we still re- tain a slightly 
better bound than the modular algorithm analyzed under the more re- strictive assumptions. Furthermore 
the algorithm will produce the result as soon as a sufficient number of primes have been processed. 
Finally we ask what is theoretically the best bounds we can obtain for these rational operations. For 
this let us first define the function M~,e~ = ne Zn ne(Zn ~n ne). In [KNU69], pp. 269 (2nd ed.) Knuth 
gives the fastest known method for e-precision in- teger multiplication. This algorithm takes time M(l,e). 
The method can be directly generalized to the multiplication of n-degree, e-precision polynomials in 
time M(n,e) simply by considering their coefficients as a large integer and inserting a sufficient number 
of zeros to prevent carries. Secondly, in a recent paper bv Schonhaqe [SCH72] he gives a method for integer 
g.c.d, calculation which takes time 0((log e)M(l,e)) on e-precision numbers. Again the generalization 
to polynomials gives the bound 0((log ne)M(n,e)). Using these 2 methods and analyzing the classical algorithm 
for rational function multiplication we find that 0(nM(n,e)) bounds its computing time. Even recent work 
on decreasing the computing time for modular arithmetic, e.g. [HEI71] cannot produce as good a bound. 
 Thus in summary we have the following results Rational Henrici-Brown Modular Algorithms Modular Algorithms 
Operation Al@orithms (upper bound) (average time) addition n5e 2 3 2 n e 2 2n e + ne multiplication n 
4e2 n3e2 n2e + ne2 differentiation n5e 2 n3e 2 n2e + ne 2 and the fastest asymptotic computing time 
being nM(n,e) = 0(n2e log ne(log log ne)). It's unfortunate that these new, fast methods have such prohibitively 
larqe constants so that they seem infeasible to use in actual practice. -117- REFERENCES <RefA>[BR064] Brown, 
W.S., J.P. Hyde and B. A. Tague, The ALPAK System for Algebra on a Digital Computer-II: Rational Function 
of Several Variables and Truncated Power Series with Rational Function Coefficients, B.S.T.J., Vol. 43, 
No. 1 (March 1964), pp. 785-804. [BR071] Brown, W.S., On Euclid's Algorithm and the Computation of Polynomial 
Greatest Common Divisors, J.ACM , Los Angeles, (March 1970), pp. 195- 211. [COL68] Collins, G.E., The 
SAC-I Rational Function System, Universitv of Wisconsin, Computing Center, Technical Report No.8 (July 
1968), 31 pages. [COL69a] Collins, G.E., Computing Multiplicative Inverses in GF(p), Math of Comp., 
Vol. 23, No. 105 (January 1969), pp. 197-200. [COL69b] Collins, G.E., Computing Time Analyses for Some 
Arithmetic and Algebraic Algorithms, Proceedings of the 1968 Summer Institute on Symbolic and Mathematical 
Computation, (R.G. Tobey ed.) (June 1969), IBM Federal Systems Center, pp. 195-231. [HAL70] Hall, A.D., 
Jr., The ALTRAN System for Rational Function Manipulation Proceedings of the Second Symposium on Symbolic 
and Algebraic Manipula- tion, Los Angeles, (March 1970), pp. 153-157. [HEI71] Heindel, L. and E. Horowitz, 
On Decreasing the Computing Time for Modular Arithmetic, Proceedings-12th Annual Symposium on Switching 
and Automata Theory, IEEE, East Lansing, Michigan, (October 1971), pp. 126-128. [HEN56] Henrici, P., 
A Subroutine for Computations with Rational Numbers, J. ACM, Vol. 3, No. 1 (January 1956), pp. 6-9. 
 [HOR70a] Horowitz, E., Modular ArithmeticandFinite Field Theory: A Tutorial, proceedings of the ~ Second$7~o~itU~ 
on$~bol~c~nd ~eb~ic ~ ~n~pu- l~tion~, Los Angeles, ~March 1970~, pp. 188-194. [HOR70b] Horowitz, E., 
Algorithms for Partial Fraction Decomposition and Rational Function Integration, Proceedinqs of the Second 
Symposium on Symbolic and Algebraic Manipulation, Los Angeles, (March i~70), pp. 441-447. [KNU69] Knuth, 
D.E., The: Krt of Computer Programming, Vol. 2, Seminumerical Algorithms, (2nd ed), Addison Wesley, 1971. 
 [MAN68] Manove, M., S. Bloom and C. Engelman., Rational Functions In MATHLAB, In Bobrow (ed.) Symbol 
Manipulation Languages and TechniqUes, North Holland, Amsterdam, 1968, pp. 86-102. [SCH72] Schonhage, 
A., Fast Algorithms for Continued Fraction Expansions (to appear) </RefA>
			
