
 A Genetic Algorithm for Packing in Three Dimensions* Arthur L, Corcoran III Roger L. Wainwright Department 
of Mathematical and Computer Sciences The University of Tulsa ABSTRACT Recent research in Bin Packing 
haa almost exclusively been in two dimensions. In this paper we extend the classic Bin Packing problem 
to three dimensions. We investigate the solutions for the three dmenaicmal packing problem using fust 
fit ond next fit packing strategies with and without genetic algorithms. Five data sets were used to 
test our algorithms, both random and contrived. They range from 50 to 500 packages. We also stud­ied 
several existing crossover hmctions for the genetic algo­rithm: PMX, Cycle, and 0rder2. A new crossover 
function, Randl, is presented. The genetic algorithm was tested using a randomly generated initial population 
POOLand a srded initial pool. The seeded pool was generated from a package ordering produced by rotating 
and sorting the packages by decreasing height. Our results show the seeded genetic algorithm using Next 
Fit and PMX produced the best overall results for the data sets tested. The see&#38;d genetic algorithm 
using Next Fh and Gr&#38;r2 provi&#38;d the beat results considering both rapid execu­tion time and packing 
efficiently. We found genetic algdhma to be art excellent technique for yielding good solutions for the 
three dimensional packing problem. INTRODUCTION Researchers have recently become interested in solving 
large combinatorial optimization problems. Finding a solution re­quires an organized search through the 
problem space. An unguided search is extremely inefficient since many of these problems are NP-complete. 
The Bin Packing poblart haa been shown to be NP-complete. It ia one of the classic NP-complete problems. 
It is impossible to optimally solve arty of these ~ob­lems, except for trivial cases. Consequently, rmearch 
has fo­ Research partially supprted by OCAST Grant ARO-038 and Sun Microsystems, Inc. Permission to copy 
without fee all or part of this material is granted provided that the copies are not made or distributed 
for direct commercial advantage, the ACM copyright notice and tha title of the publication and ita date 
appear, and notice ia given that cop~ng ia by permiaaion of the Aaaociation for Computing Machinery, 
To copy otharwiae, or to republish, requiraa a fee and/or epecific permission. 81992 ACM O-89791 -502-X/92 
/0~2/1021 .,. $1.50 cused on approximation techniques which provide efficient, near optimal solutions. 
Some of these techniques, which would be applicable to bin packing, include heuristic techniques, simulated 
annealing, neural networka, and genetic algorithms (GA). Papadirnitriou and Steiglitz [23] and Parker 
and Rardin [24] present several classical techniques for solving the bin packing problem. Linear and 
Dynamic Programming tech­niques have not been used much in practice since the classic approximation algoridurts 
pezform so well on simple problems. The bm packing problem is applicable in a variety of situations. 
In computer systems it is used in allocation problems, such as allocating core memory to programs, or 
apace on a disk or tape. TWOdimensional bin packing can he used to solve the probktn of multiprocessor 
scheduling with time constraints. The pack­ages represent the time and memory requirements of tasks. 
and the bins represent processors. The knapsack problem is another cloady related Probkrrt. ht Ok diSd#itlGS, 
bin packing Cm be USed in such problems aa packing trucks, allocating commercials to station-breaks on 
television, and cutting pipe from standard­ized lengths. The two dimensional problem can be used for 
stock cutting, wlwre the packages are patterns which must be cut from a fixed width roll of material 
(the bin). The work to date on the bm packing problem haa been almost exclusively in two dimensions. 
There has been very little attention given to the three dimensional case. In this papex we extend the 
classic Bin Packing ~oblem to three dimensions and investigate various solutions to this problem using 
genetic algorithms. The rest of the paper is presented as follows. In Section 2 we review the Bin Packing 
problem. In Section 3 we describe the three dimensional Brn Packing prob­lem. Jn Section 4 we preaatt 
m overview of gatetic algorithms. Results and conclusions are presented in Section 5. Future research 
issues and related problems are given m Secticm 6. BIN PACKING In the classic bin packing problem, a 
ftite collection of pack­ages is packed into a set of bins. The packages and bins are characterized by 
their weights and capacities. respectively. The problem can be stated either as a decision problem or 
as art optimization problem. In the decision problem it becomes necessary to determine whether or not 
there is a disjoint parti­tioning of the set of packages such that each partition fits into a bm. That 
is, given an integer number of bm, determine if all of the packages fit into the bins, The optimization 
problem at­tempts to minhize the number of bm requkxi or equivalently, to minimize the amount of wasted 
bm capacity in the packing. The bin packing problem is a generalization of the partition problem. That 
is, the bin represents a partition size and the packages must be optimally placed in these partitions. 
Inmost cases, the ap~oximation algorithms (fiist fi~ next fi~ beat fi~ etc.) are very nearly optimal. 
Unfortunately, there are worst case examples which are far from optimal. These cases only have a few 
sets of which the packages can belong. Some algo­rithms (like Modified First Fit Decreasing) have tried 
to im­prove absolute boumla by spaial treatment of these worst cases. However, worst cases can be constructed 
for the modiied algo­rithms with similar bounds. The bin packing problem has many parameters which may 
be varied for dtiferent applications. Granularity is one such parame­ter. The problem could be as small 
as packing parcels into shipping containers, or as large aa pswking shipping containers into airplanes. 
Consequently, a hierarchy of packing problems of differing granularity may need to be solved optimally. 
The other parameters are variations in packages and bins. See Hu [15] for a more details on bin packing. 
The classic bm packing problem is expressed using one dnen­sional packages. This approach blindly generates 
partitions so that the sum of the one dimensional package parameters in each partition does not exceed 
the bin capacity. This parameter is typically stated as the package weight. Clearly, the problem is equivalent 
if the parameter represents a single spatial *ion. In the real world a single spatial dnenaion is often 
not enough. Problems involving two or three spatial dimensions are typical. The results of one dimensional 
bin packing may not apply in these cases. In many problems, packages must arrive at their destinations 
according tosometime conatrairtt. Thiatnay beintheformofa deadline ( must amive before Friday ) or a 
time window ( must arrive between Tuesday and Friday ). The algorithm must ensure the package will not 
be late. In the case of time win­dows, it also should not arrive too early. Time constrained scheduling 
is a research topic in itself, and is a non-triviaI addi­tional constraint in bin packing. In addition 
to individual package attributes, the set of packages themselves may foUow a particular distribution. 
A randomdistributionmight be exhibit­ed in some cases, and a uniform distribution in others. The d~tribution 
maybe skewed so that packages may only belong to one of a finite number of categories. The package parameters 
may be nearly equal or relatively small in comparison to the corresponding capacity of the bin. Furthermore, 
different package parameters could have dtiferent distributions. The classic bm packing problem does 
not take these parameters into consideration. In fact, the additional parameters make the problem harder. 
However, by holding all of the additional parameters to some constant value, the harder problems all 
degenerate back into the classic problem. That is, the classic Bin Packing problem is a special case 
of the harder problems. For every package attribute there is a corresponding capwity or maximum value 
for the bin. Generally, there cart be no single package with an attribute exceeding the maximum value 
set by the bin. Otherwise, the package could never be packed. l.nter­esting cases occur when the parameters 
d~ffer m relation to one another. For example, when the bin is rectangular and the packages are all square. 
In the classic problem, the bin has a fried capacity. For multiple dimensions, the analogous bin would 
have fixed capacity in every dimension. Thus, a two dimensional bin would defiie a rectangle, and a three 
dmertsional bin would defiie a closed box . A common variation of the classic problem is to use a singl~ 
open-ended bm. Used primarily for two or more dimen­sions, the problem is to minimize the value of the 
open dimen­sion subjwt to all other constraints. When using the level tech­nique, this method can be 
transformed to the classical problem. This is done by packing each level of the single bin into the multiple 
closed bm, as if each level were a single package. A less common variation uses multiple, dissirnh bins. 
The dis­tribution of the bins could be like the dis~ibution of package sizes. They could be random tmifo~ 
skew~ etc. It is analo­gous to packing a fleet of trucks of different sizes and capaci­ties. One Dhrtettabnttl 
Heurlatk Technlqttea for Packing Many near-optimal heuristic techniques have been &#38;veloped for the 
bm packing problem. None of these techniques gttaran­tee an optimal pscking. However, many techniques 
a~oximate the optimal packing within a constant bound. The three best­known approximation algorithms 
in bin packing are Next Fi~ First Fit, and Best Fit. There are many other algorithms, however, most are 
variations or refinements of these basic methods and only offer modest improvements in packing effi­ciency. 
For more details, see Floyd and Kwp [12], Carey and Johnson [13] and Johnson et rd. [16]. Next Fit is 
the simplest and easiest algorithm to implement. Beginning with a single ~ the packrtg~ are taken from 
the liit in order, and placed in the next available position. When three is not enough room to pack the 
curmrtt Packag% a new bin is started. No attempt is ma&#38; to place packages in previous bins and the 
packages are considered in the order they appear in the list. Waste can occur since anew bm is used even 
when a pack­age may fit into a pevious bin. This is a linear algorithm in both time and space. Furthermore, 
it has been shown that Next Fit generates packings no worse than twice optimal. Fust Fh plus each package 
in the first bin in which it will fit. A new bin is added only when all of the previous bins have been 
examined and no space can be found for a package. This algorithm can use quadratic time in the worst 
case and is O(n log n) on average for n packages. However, the packings produced are no worse than 1.7 
times optimal. Best Fit places each package in the best bin in which it will fit. The best bin is the 
one with the least amount of space left over when the package is added. Surprisingly, this algorithm 
s asymptotic performance rmd packing efficiency is identical to that for First Fit. Minor differences 
in packing efficiency are related to package distribution. That is, for package sizes larger than 1/6 
of the bm size (distributed in the range [1/6..1]), Best Fit is more efficient than First Fit. For package 
sizes larger than 1/5 of the bm size (distributed in the range [1/5..1]) the packing efficiencies are 
i&#38;nticaL Sorting the packages before applying these methods can lead to impmved results. For example, 
sort­ing by decreasing package size before applying First Fit results in packings which are no worse 
than 1IP times optimal, a 28% improvement. This variation is called First Fit Decreasing. Similar improvements 
can be found in Next Fit Decreasing and Best Flt Decreasing. Two Dlmettaional Heuristk Techniques for 
Packing Expanding the problem to two dimensions (rectangle packing) demands different techniques. The 
first technique uses a bottom up -left justified packing rule, or simply bottom-Ieft . Each package is 
packed as close to the bottom of the bin and as far to the left of the bin as it can go. This differs 
from the one dimensional cases where there exists a permutation of the packages for which the methods 
generate an optimal packing. There are instances where the best bottom-left method produtm packhtgs which 
are 5/4 times optimal. That is, no matter how the packages are orderd the optimal packing can not be 
found. The best absolute packing bounds are obtained by sorting the packages by decreasing width. In 
the special case of uniform square packages, bottom-left degenerates into a one dimensional packing problem. 
This is because the packages all have the same heigh~ so they are all placed in rows or levels. Since 
the height is constan~ the packing of each level need only be con­cerned with the package s width. Thus 
only one dimension is used in the packing. The level technique is a more recent approach that uses this 
idea The height of each level is determined by the height of the highest package on that level. A one 
dimensional (based on width) approach is used to pack each level. For exampl~ Next Fit would be used 
to pack a level until the next package would not fh. The package would be used to start a new level, 
and Next Fit would continue as before. Of course, the packages could be sorted by decreasing height or 
width to improve the result. Surprisingly, the wasted space on each level has no effect on the asymptotic 
bounds of the problem. Two dimen­sional First Fit Decreasing Height has the same bound as one dimensional 
First Fit Decreasing, no worse than 1.7 times optimal. Classical two dimensional packing generally requires 
the pack­ing to be orthogonal and disallows rotation of the packages. However, some applications may 
allow rotation or translation of the packages. Packing efficiency may be improved if each package is 
rotated so that its width exceeds its height, or vice versa. Several theoretical and practical results 
are presented in Baker et d. [1], Carpenter and Dowsland [3], Coffmsn ef uf. [5], DOWShUtd[9] and bung 
eZd. [19]. THREE DIMENSIONAL BIN PACKING Much of the current research in bin packing has centered on 
two dimensional strategies. Recall, the most common is the level technique, which places packages level 
by level into a single, open-ended bin. The packages are presorted by decreasing height and a one dimensional 
strategy is used to pack the width of the bm. Consequently, two dnensional methods can obtain the same 
packing efficiency as the corresponding one dimen­sional methods. When extending the problem to three 
dmensions, it is desirable to apply the results of two dimensional research to obtain simi­lar efficiency. 
Ideally, the packages would be presorted then placed level by level, using a two dimensional method to 
pack each level. Unfortunately, it is difficult to extend the packing efficiency in this way. For example, 
sorting by decreasing height does not guarantee decreasing width or length. Thus, the two dimensional 
packing may be inefficient. On the other hand, ordering the packages to make the two dimensional packing 
efficient may cause wasted spxe to appear in the height-Unlike the purely two dimensional problem, the 
two dimensional packing stage must deal with a boundary on the second dimen­sion (the length). Clearly, 
three dimensional packing is a very practical problem, yet proves to be a very difficult problem to solve. 
Application of techniques used successfully in one and two dimensional cases fail to yield good solutions. 
Consequently, little research has been done to date in the area of three dimensional packing. Fenrich 
et uf. [10] presents an application of simulated anneal­ing to three dimensional packing. However, it 
can only be used on small problem sets. In an attempt to further understand three dimensional packing, 
the authors have &#38;vised simple. three dimensional next fit and first fit packing algorithms. These 
algorithms provide a measure with which to compare various package orderings. Thus, the merit of premrting 
and rotation oan be easily evaluat­ed. They also provide an evaluation function useful for various optimization 
processes. The bin model and algorithm specifics are presented below: The BlrI. Packages are placed in 
a single, open-ended three dimensional bin. To avoid the pitfalls of the bottom-left meth­od, a level 
packing technique is used. No types of levels are used: horizontal levels along the he@t of the bin and 
vertical levels along the length of the bin. To avoid confusion, the levels along the height of the bin 
will be called slices . The levels along the length of the bin ue analogous to the levels of the WO dimensional 
pmb~ so will remain levels . No* the two dimensional part of the algorithm must deal with . bin whore 
end is CLOSED. 3D Next Fit. The algorithm begins with a single level on a single slice. A Package is 
placed in the next available position on the level es long as the width of the bin is not exceeded. In 
that case, a new level is created and packing continues. The tallest (actually, the longest) package 
on the previous level &#38;fw the base of the new level. If at any time the addition of . package would 
exceed the bm length, a new slice is created. The base of the slice is at the heiit of the tallest package 
on the previous slice. The result of the algorithm is the height of the final packing. 3D First Fit. 
Just as in next fiL packing begins with a single level on a single slice. However, instead of placing 
the prdage in the next available positiom the levels are searched from the beginning until a place is 
found in which the package will tit. The width must never exceed the bin width. but may exceed the length 
of the level as long as the total combined length of s.11 levels does not exceed the bin length. That 
is, a level can expand to accommodate a package, displacing other levels, if the bin length is not exceeded. 
Likewise, the height of each slice can expend to uxommdate package heights.  GENETIC ALGOIUTHMS Goldgerg 
[14] describes sevexal ways that genetic algorithms differ frum traditional algorithms. The genetic algorithm 
works with . coding of the parameterratherthan the Wual parameter. The GA works from a population of 
strings instead of . single point. The genetic algorithm uses probabilistic transition rules, notdeterrmms 
ticrld* fthegesleticopera­ andthea@icationso tors causes information from the previous generation to 
be car­ried over to the next. In Wltim genetic algorithms produce close to optimal results m a reasonable 
amount of time, and they make no assumptions about the problem space. Further­more, genetic algorithms 
are fairly simple to develop and they are Suitabk for parallel processing. In a genetic algorithm the 
parameters of the model to be opti­mized ue eswoded into a ftite length string, called a chromo­some, 
The fitness of a chromosome determines its ability to survive and reproduce offspring. The genetic algorithm 
creates an initial population of feasible solutions, and then recombmes them in a s~h way to guide the 
search to only the most promis­ing areas of the state space. The transition rules that produce one population 
from another are celled genetic recombination operators. These include Reproducti~ Crossover and Muta­tion. 
Crossover provides new points in the solution space to rnveatigate. Mutatiom which occurs rarely, guarmtees 
the entire search space has the opportunity to be search~ given enough time. Initial population size, 
evaluation functio~ crossover method, and mutation rate are parameters which have a greet impacton convergence 
rate as well as the qualityof the solution. Larger initial populations help .void local minima but may 
make convergence slower. The evaluation function is extremely important for the rate of convergent. This 
is studied at great length in this paper. If there is little difference between worst case and optimal 
chromosomes, there will be very little conver­gm% if my. Larger differences will lead to rapid convergence. 
Several researchers have investigated the benefits of solving cambwtorial optimization problems using 
genetic algorithms [2,6,7,8,20,21,25,26]. There are several genetic algorithm packages that have been 
made available to researchers ova the past two years or so. One such package is GENITOR, described by 
Whitney and Keuth [27], which we have installed and modi­fied for OW three dimensional Bin Packing problem 
To appIy genetic algorithms to the three dimensional packing probl~ one must defw the encuding of the 
chromosome, the evaluation functi~ xnd the recombination operator. The most natural encodiig is to use 
. string of integers which form an index into the set of packagea. fhe fmt package is demted l , the 
second 2 , and so on. A random reordering of the string represents a random permutation of the packages. 
The evalua­tion function returns the height obtained by applying a three dimensional next fit or ffist 
fti packing algorithm. The smaller the heiiL the better rhe packing. The recombination operator must 
produce a permutation of the packages using partial orderings contained in the two parents. The reauhing 
chromosome must include all of the packages with no duplicates. Fortunately, there are several general 
purpose crossover functions which meet the requirement. The crossover functions used in our three dimensional 
packing algorithm include Order2, Cycle, and partially mapped crossover (PMX). These are described by 
Whitney and Starkweather [28]. In addition, we have developed a fourth technique which randomly selects 
one of these three methods at each recombmation. This method is called Randl. Provided a positive mutation 
rate has been spcifie~ mutation will periodically occur during recom­bination. Mutation swaps a random 
pair of packages and rotates them about a randomly chosen axis. Mutation is adaptive, that is, the mutation 
rate increases as the parent chromosomes become more alike.  RESULTS AND CONCLUSIONS The three dimensional 
packing algorithm was tested with and without the genetic algorithm. A base set of five data sets was 
used for comparison. These include: (1) Random 50, a set of 50 packages with the values for each dimension 
randornl y chosen in the range from 1 to one half the bin size in each dimension. (2) Random 500, a 
set of 500 packages with random sizes generated in the same manner as Random 50. (3) Contrived 320. 
Figure 1 shows 32 packages of unit height that can be optimally packed. Contxived 320 consists of 10 
repetitions of each of the packages shown in Figure 1. The data set is initially placed in no special 
order. The benefit of this data set is that a 100% fill is possible which may not be true for the random 
cases. (4) Contrived 99 is instructed using the packages shown m Figure 2. Figures 2(a) and 2(b) show 
optimal packings of five and six packages, respectively. The five packages in Figure 2(a) are repeated 
with heights of one, two and three, yieldlng a set of 15 packages. The six packages in Figure 2(b) are 
repeated with heights of one, two, and three, yield­ing a set of 18 packages. These 33 packages are repeated 
three times for a total of 99 packages. The Contrived 99 data set is a random or&#38;nng of these packages. 
 (5) Level 75 is consaucted using the packages shown in Figure 3. Figures 3(a) and 3(b) show level oriented 
optimal packings of 15 and 10 packages, respectively. The 15 packages in Figure 3(a) are repeated with 
heights of one, two and three, yielding a set of 45 packages. The 10 pack­ages in Figure 3(b) are repeated 
with heights of one, two, and three, yielding a set of 30 packages. The Level 75 data set is a random 
or&#38;ring of these packages.  The optimal packing for Random 50 and Random 500 is not knowm thus 
the optimal fill may not be 100%. However, the optimal packing for Contrived 99, Contrived 320 and Level 
75 are 36, 10, and 12 respxtively. The results of the three dmenaional packing algorithm without the 
genetic algorithm are summarized in Table I. The next fit algorithm produced packings of 34.7% and 30.6% 
fill for the random data sets and between 48% and 50% fill for the con­trived data sets. First fit produced 
36% fill for the random data sets and from approximately 41% to 53% fill for the contrived data sets. 
Surprisingly, the next fit and fust fit techniques had fairly equal packing efficiencies. Most likely 
the ability to expand levels to make packages fit reduced the benefits of fmt t-k, The results of the 
genetic algorithm for three dimensional pack­ing are summarized in Table II. Both next fit and fust fit 
were used as the evahtation function. For each evahsation function, four different crossover methods 
were tested. The GENITOR genetic algorithm system adapted for bin packing was used. In all cases, the 
pool size was 200, the bias was 1.6 and the muta­tion rate was 0.2. The number of recombination was 100,000 
for all cases except the 320 and 500 package sets, which were run for only 50,000 iterations due to their 
time requirement. Running times are not included in Table U, however Order2 was the fastest algorithm. 
In the Random 50 case using next fit, 0rder2 took approximately 4.4 minutes to complete while the others 
took between 6.3 and 7.4 minutes to complete. ln the Random 500 case using next fit, 0rder2 took 13 CPU 
minutes to complete, while Cycle, PMX, and Randl all took between 1.5 and 2.5 hours of CPU time. The 
use of fiist fit as an evaluation function inmased these times proportionally. Results shown in Table 
H indicate that the PMX crossover operator generally had the best packing height. This was inde­pendent 
of the data set tested and independent of the next fit or fmt fit evaluation functions. However, PMX 
generaUy took the most running time. 0rdex2, however, also yielded good packing heights. The significance 
of thk crossover function is its quick running time combined with good results. It often out per­formed 
Cycle in both time and p=king heigh~ This is illustrat­ed in Figure 4 which plots the relative convergence 
rates of 0r&#38;r2, Cycle, and PMX for the Random 500 data set. Notice in all three cases the convergence 
improved rapidly at fust and then tapered off with additional recombination. This is typical of genetic 
rdgorithms. fn Figure 5, the diversity of the gene pool is illustrated for the Cycle crossover, next 
fit evaluation function using the Random 500 data set. The best, median, and worst fitness values at 
each recombination are plotted. No(ice the initiaf random population has a rather wide range. Ilk tightens 
up rapidly, until the difference is not noticeable. This is typical inallofthe caaesweteated. Comparing 
results from Table I and to Table II, the genetic algorithm generated better packings for all data sets 
tested. The best genetic algorithm was able to produce a 54.9% fdl for the random 50 case compared to 
36% ffl without using a GA. The best GA produced a 40.6% fill compared to 36.1% ffll in the random 500 
case. In the Contrived 99, Contrived 320, and Level 75 data sets the best GAs were respectively, 70.6%, 
58.8%, snd 66.7% fdl cxxnpaxedreapectivelyto 50%, 52.6% and 50% without using a GA. In the best case, 
this represents a difference of approximately 20% compared to packing without the genetic algorithm. 
The effect of preprocessing on next fit and first fit is shown in Table III md Table IV, respectively. 
Compare the Presorted by cohmms in Table III and the Table I Next Fit data. For each data set listed 
in the tables, the best case presorting improved the packing utilization from 34.7 to 41.2%, 30.6 to 
50.4%, 50 to 58.1%, 47.6 to 71.4%, and 50 to 60%, respectively. That is, a simple presort of the packages 
by a particular dimension im­proved next fit s packing efficiency anywhere from 33-50% in the cases tested. 
Table III shows the results of the data sets after being rotated so that height > length> width. The 
packages are then presorted by a particular dimension. Compare the Rotated and Resort­d columns in Table 
III and the Table I Next Flt data. For each data set listed in the tabl~ rotating then presorting m a 
particu­lar dimension m the beat case improved the p8cking utilization from 34.7 to 56.9%, 30.6 to 66%, 
50 to 60,47.6 to 71.4%, and 50 to 76.6%, respectively. That is, a rotation and simple pesort of the packages 
by a particular dimension improved next fit s packing efficient anywhere for to 20-64% in the cases tested. 
The best packings were obtained by presorting by decreasing height, with one exception. The one exception 
had slightly better results when presorted by decreasing length. Rotation then presorting by decreasing 
height yielded the best packings m au Caaea. In a similar manner the effects of preprocessing on First 
Flt are shown in Table IV. Compare the Presorted by columns in Table IV and the Table I First Fit data, 
For each data set listed in the tables, the best case presorting improved the packing utilization from 
36.0 to 46.5%, 36.1 to 57.3%, 40.9 to 51.4%, 52.6 to 62.5%, and 44.4 to 54.5%, respectively. That is, 
a simple presort of the packages by a particular dimension also improves fmt fit s packing efficient 
m the caaa tested. Table IV shows the results of the data sets after being rotated so that height > length> 
width. The packages are then presorted by a particular dnension. Compare the Rotated and Resort­ed columns 
in Table IV and the Tabk I Fiist Fit data. For each dataaetlisted inthetabh rota@ thenpreaorting rnaparticu­lar 
dimension m the best case improved the packing utilization from 36.0 to 53.4%, 36.1 to 62.8%, 40.9 to 
70.6%, 52.6 to 76.9%, and 44.4 to 66.7%, respectively. That is, a rotation and simple presort of the 
packages by a particular dimension also improves first fit s packing efficient. ~-ly, tiTtik~AN itkkt~mtid~~@ 
height regardless if you use next fit or frost fit. Furthermore, from results in Table II we note the 
genetic algorithm did not perform as well as the rotation and presorting by height using either fwst 
fit or next fit. This is because the genetic algorithm begins with a random population drawn from a large 
domain. Higher packing efficiencies can be obtained by seeding the ini­tial population. For example, 
the packages are rotated then pre80rted by decreasing height. The resulting list (one chromo­some) is 
placed in the initial pool. The results are summarized in Table V. Notice in every single case the seeded 
GA yielded the best performance. Figure 6 illustrates the effects of a seeded genetic algorithm verses 
an unseeded GA. Figure 7 is a blow up of the seeded graph from Figure 6. The ummeded genetic algorithm 
provided a larger rdative improvetmmt over the seeded genetic algorithm. The seeded algorithm starts 
off at a better approximation and has more work to improve the packing. However, as Figure 7 illustrates, 
this improvement is not negligible. Figure 7 also emphasizes how the algorithm catverges to a local minim% 
stagnating at that point for a while until the packing is suddenly improved. In Summary, the seeded GA 
algorithm usingNext Fit and PMX produced the best overall results for the data sets tested. The seeded 
GA using Next Fit and 0rder2 provided the bt results considering both rapid execution time and packing 
efficiezttly.  FUTURE RESEARCH AND RELATED PROBLEMS The deaiie to solve large problems naturally leads 
to the use of parallel techniques. Fenrich et al. [11] and Lin et af. [22] dia­cuss some recent work 
in developing parallel algorithms on a hypercube computer for two dmenaional bin packing. Each Processor 
usesaserial algorithm tomhimize the pwking height of a single, open-ended, two dimensional bin. Some 
packages may be left out of the packing if they fail to cover a percentage of the width of the bm. When 
the processors are ftished, the packings are recursively combined. Any leftover packages are comb-d and 
added to the packing. Fenrich et uI. report very good results, as well as recommendations on which heuristics 
give the best performance. Our next project is the impkmenta­tion of a parallel genetic algorithm using 
HYPERGEN [17] for three dimensional bm packing and related problems. The Routing Problem is closely 
related to the packing problem. In real world situations, blind bin packing is not enough. It is desirable 
that packages with adjacent or equal destinations be packed in the same bin. For example, all packages 
bound for the same city should be put on the same plane. Given multiple packages, from multiple sources, 
going to multiple destinations, one must also ensure the package arrives at its destination using the 
shortest and least expensive route. Thus the problem becomes a combination of bin packing and the traveling 
sales­man problem. A thorough treatment of this topic is described by Christofides et d. [4], and Lawler 
et al. [18]. The vehicle routing problem consists of a set of vehicles with time windows and capacity 
limits. All customers are serviced born a central location. The problem is to minimize the number of 
vehicles required to deliver all packages within time con­straints and vehicle weight constraints. The 
routing requirement adds art widitiorud constraint to the bm packing problem. Given a package, it can 
only be placed in the subset of bins which will eventually arrive at the destination. Ideally, it should 
be placed in the bin which will arrive at the destination in the least time and with the least cost. 
As in a network flow problem, the bin should be as fully packed as possible for the entire route. At 
each stop, packages will be added and removed. Packages may be removed from one bm at an intermediate 
stop and placed on another bm to reach their &#38;stination. ACKNOWLEDGMENTS This research has been 
partially supported by OCAST Grant ARO-038. The authors also wish to acknowledge the support of Sun Microsystems, 
Inc. REFERENCES <RefA>[1] B.S. Baker, E.G. Coffman, R.L. Rivest, Orthogonal Packings in Two Dimensions, SIAM 
Journal of Com­puting, 9 (4), pp. 846-855, November 1980. [2] D.E. Browm C.L. Huntley and A.R. Spillane, 
A Paral­lel Genetic Heuristic for the Quadratic Assignment Problem , Proceedings of the Third International 
Conference on Genetic Algorithms, Morgan Kaufmm 1989. [3] H. Carpenter and W.B. DowslanL PracticalConsidera­tions 
of the Pallet-Loading Problem, Journal of the Operational Research Society, 36 (6), pp. 489-497, 1985. 
[4] N. Christofides, A. Mingozzi, and P. Toth, The Vehicle Routing Problem in Combinatorial Optimizatwn, 
John Wiley, New York, 1989, pp. 315-338. [5] E.G. Coffman, M.R. Garey, D.S. Johnson, and R.E. Tarj~ Performance 
Bounds for Level-Oriented Two-Dimensional Packing Algorithms, SIAM Journal of Con@ng, 9 (4), pp. 808-826, 
November 1980. [6] L. Davis, cd., Handbook of Genetic Algorithms, Van Nostrand Reinhold 1991. [7] L. 
Davis, cd., Genetic Algorithms and Simulated An­nealing, Morgan Kaufmarur Publisher, 1987. [8] K.A. De 
Jong and W.M. Spears, Using Genetic Algo­rithms to Solve NP-Complete Problems , Proceedings of the Third 
Internatwnd Co@erence on Genetic Algo­rithms, June, 1989, pp. 124-132. [9] K.A. Dowsland, An Exact Algorithm 
for the Pallet Loading Problem, European Jourml of Operational Research, 31, pp. 78-84,1987. [10] R. 
Fenrich, R. Miller, and Q.F. Stout, Hypercube Algorithms for some NP-Hard Packing Problems, Proceedings 
of the Fourth Co@erence on Hypercube Concurrent Computers and Applications, pp. 769-76, 1989. [11] R. 
Femich, R. Miller, and Q.F. Stout, Multi-Tiered Algorithms for 2-Dimensional Bin Packing, Proceed­ings 
of the F@h Co~erence on Hypercube Concurrent CorqMUers and Applicatwns, pp. 58-63, 1990. [12] S. Floyd 
and R.M. Km-p, FFD Bin Packing for Item Sizes with Uniform Distributions on [0. 1/2] , Algorith­rnica, 
6 (2), pp. 222-239, 1991. [13] M.R. Garey and D.S. Johnson, Approximation Algo­rithms for Bin Packing 
Problems: A Survey, in Ausiel­10, G. and M. Lucertini (eds.). Analysis md Design of Algorithms in Combinatorial 
Optimization. Springer-Verlsg: New YorlG1981. [14] D.E. Gohiberg, Gerwtic Algoritti in Search, Optimiza­tiw 
and Machine Learning, Addkon-Wesley, 1989. [15] T.C Hu, Combinatorial Algorithms ,Addision-Wesley, 1982. 
[16] D.S. Johnson. A. Demers, J.D. Ullmam M.R. Garey, and R.L. Graham, Worst-Case Performance Bounds 
for Simple Orte-Dimensional Packing Algorithms, SIAM Journal of Computing, 3 (4), pp. 299-325, December 
1974. [17] L. Knight and R. WainwrighL HYPERGEN A Dis­tributed Genetic Algorithm on a Hypercube , sutxnittsd 
for review. [18] E.L. Lawler, J.K Lenstr% A.H.G.R. Karu D.B. Shmoys (da.). The Traveliig Stdearnan Problem. 
John Wiley &#38; Sons: New York (1985). [19] J.Y. Leung, T.W. Tam, C.S. Wong, G.H. Young and F.Y. Cti 
Packing Squares into a Square, hurnal of Parallel and Distributed Computing, 10, pp. 271-275, 1990. 
[20] G.E. Liepins and M.D. Vose, Deceptiveness and Genet­ic Algorithm Dynamics, Foundations of Genetic 
Algo­rithms, G. RawYmg, cd., Morgan Kaufmamt Publishers, 1991. [21] G.E. Lkpina and M.D. Vose, Characterizing 
Crossovex in Genetic Algorithms , submitted to Annafs of A4athe­ntatics and Arti@al Intelligence [22] 
J. LirL C. Chang, B. Foote, and J.Y. Cheung, A SMILE for Packing &#38; Pallet Loading in Three Dnensions, 
to a~ar. [23] C.H. Papadimitriou and K. Steiglitz, Combinatorial optimization: Algorithms and Complexity. 
Prentice-Hall, Inc.: Englewood Cliflk, New Jersey (1982). [24] R.G. Parker and R.L. Rardin. DLscrete 
Optimization. Academic Press, Inc New York (1988). [25] G. Rawling, cd., Found&#38;ions of Genetic Algorithms, 
Morgan Kaufmann publishers, 1991. [26] D. Whimey, T. Starkweather, and D. FuquaL Schedul­ing Problems 
and Traveling Salesman: The Genetic Edge Recombination Operator , Proceedings of the Third Internatwnal 
Conference on Gemrtic Algorithm. June, 1989. [27] D. Whimey and J. Kauth, GENITOR: A Different Genetic 
Algoriti Proceedings ~the Rocky Mountain Conference on Artificial Intelligence, Denver, Co., 1988, pp. 
118-130. [28] D, Whitley and T. Starkweather, GEIWTOR II: A Dis­tributed Genetic Algorithm, Journal of 
Experimental and Theoretical Art@ial Itttciligence, 2(1990) 189-214.</RefA> Table I: Three Dimensional Pscking 
withoutGeneticAlgorithm Ncxf 3W Frcl m TVU. # Pkg.f Heisht I t%i HeightI Fdl Rsodom 50 271 34.7% 261 
36.0% Raodom 500 2879 30.6 2443 36.1 Conoived 99 72 50.0 88 40.9 Conoived 320 21 47.6 19 52.6  Level 
75 24 50.0 1 27 44.4 Table U: Three Dmeadoaal Packing with Genetic Algorithm Cmswvcr Next F:t F- Fit 
> Random # Pkg 50 Method 0rder3 Hckht \ Fdl 180 52z% Height206 mt 45.6% Cycle 207 45.4 206 45.6 Pm 171 
54.9 192 48.9 I Rortdl I 189 49.7 I 191 49.2 Random 503 ordefl 2253 39.1% 2171 40.5% Cycle 2273 38.7 
21243 39.8 PMX 2134 413 2194 37.4 Randl 2167 4!3.6 2143 40.3 Conmved 99 0rder2 51 70.6% 70 51.4% Cycle 
52 69L? 68 52.9 PMX 52 692 64 56.2 Randl 53 67.9 72 50.0 Contrived 320 0rder2 18 55.6% 18 55.6% Cycle 
18 55.6 18 5S.6 Pm 18 5S.6 17 58.8 Randl 19 52.6 17 58.8 Isel 75 m 20 60.0% 22 54.5% Cycle 20 60.0 23 
52.2 PMX 18 66.7 22 54.5 Randl 21 57.1 21 57.1 Table IIL Ef7ect of Reprocessing on Ntxt Fit (without 
Genetic Algorithm) b Rotetedend F%econedby Tvoe # Pkas Wldti I Le.@I ~eighl I U id~ I ~~ ! Height Random 
50 33.2% 41.2% 40.1% { 36.0% 48.9% 56.9% Random 54X3 35.7 45.2 50.4 43.4 502 M.o Contrived 99 51.4 57.1 
58.1 57.1 58.1 &#38;Jo I I Conrnved I 320 I 66.7 71.4 71.4 I 71.4 71.4 71.4 II Level 75 44.4 6:0 60.0 
I 50.0 66.7 70.6 J  Table IV: Effectof Repreceeeiagon PM Fit (withoutGeneticAlgorithm) %sxted by Rotated&#38; 
Preaord by Tvue #Pk Width lt.ertgthl I-Wght W~drh ! Len Random 50 33.8% 41.6% 46.5% 38.7% 41.6% 53.4% 
Random mu 37.4 42.5 57.3 42 I 50.4 62.8 contrived 99 45.0 51.4 49.3 61.0 63.2 70.6 Conrnved 320 58.8 
62.5 62.5 76.9 76.9 76.9 Level 75 48.0 54.5 54.S 50.0 60.0 66.7 Table V: Genetic Algorithm .%ededtith 
BeetReprecesaedPacking Croetnv.x 1 NeatFit Fit Fit Twe = Rembm 50 Random Sm contrived 99 Rendl 53 67.9 
48 75.0 contrived 3m Clder2 14 71.4% I 13 76.9% CYCk? ! 14 71.4 ! 13 76.9 P&#38; 13 76.9 13 76.9 RMdl 
13 76.9 13 76.9 Level 75 C)rTkr2 16 75.0% 17 70.6% Cycle 16 75.0 17 70.6 Pm I 16 75.0 I 17 70.6 Randl 
16 75.0 17 70.6 1. Figure 1: Layout tor Contrived 320 Data Set mEn (a) (b) Figure 2: Layout tor Contrived 
99 Data Set    E%!l H (a) (b) Figure 3: Layout for Level 75 Data Set 1029 2300 1 I 2600 ­ ~ aoo - 
~ E ~ : 0 ~ 2400­ :2600­ c s: c = : n = 2400- ZaJo­ 2200­ 0 20000 40000 80000 Rmemblrmtlons 80000 100000 
2000 0 20000 , 40000 60000 Rocomblnatlons 80000 100 Figure 4: Relative Convergence Rate Figure 5: Diversity 
of the Gene Pool 1340 4 $­ 1 Iwo+ 0 20000 40000 60000 80000 100000 0 10000 ~ 40000 50000 R.comblnmtlon8 
Rocomblnmtlon$ Figure 6: Seeded and Unseeded Genetic Algorithms Figure 7: Convergence Rate of Seeded 
Genetic Algorithm 1030 
			
