
 An Algorithm for Counting Maximum Weighted Independent Sets and its Applications Vilhehn DahllSf* Peter 
Jonsson t Abstract We present an O(1.3247 ~) algorithm for counting the m~mber of independent sets with 
maximum weight in graphs. We show how this algorithm can be used for solving a number of different counting 
problems: counting exact covers, exact hitting sets, weighted set packing and satisfying assignments 
in 1-in-k SAT. Introduction There has recently been a growing interest in the analysis of algorithms 
for NP-haxd problems such as satisfiability [6[ and graph colouring [3]. This interest in analysing super-polynom/~ 
algorit_hms may have a number of causes. It is recognised that many important applications can be modelled 
with these problems and that computers of today can solve moderately-sized problems ei~ciently. Improvements 
in exponential time bounds are critical in determining the size of problems that can be solved: even 
a slight improvement from O(c ~) to O((c - ~)~) may significantly increase the size of computationally 
tractable problems. In this paper, we will study algorithm~ for count-in 9 the number of solutions and 
not just for deciding the existence of a solution. Such algorithms have been considered earlier; for 
instance algorithms counting the number of models for SAT [7, 18, 4l; the complexity of this problem 
has been address by Littman et aL [14]. GreenhiU [91 adresses the complexity of counting colour- ings 
and independent sets in sparse graphs. Counting independent sets in graphs with maximum degree four, 
or higher, is known to be #P-complete [17]. The problem of finding one maximum independent set is much 
more studied than the corresponding count- ing problem. The first exact algorithm with an upper rI~epaxtment 
of Computer and Information Science, LinkSping University, SE-581 83 LinkSping, Sweden, vilda0ida.lin.se. 
Partially supported by the S~#edish Foundation for Strategic ReseaTx~h (SSF) as part of the project "Computational 
Complexity of Temporal and Spatial Constraint Reasoning". tDepartment of Computer and Information Science, 
LinkSping University, SE-581 83 LinkSping, Sweden, pe~ej@ida.lla.se. Partially supported by the Swedish 
Research Council for Bngi- n~ring Sci~s (TFR) under grant 2000-361. time bound better than 0(2 ~) was 
given by Tarjan and Trojanowski [16] who in 1977 presented an O(1.2599 n) algorithm. This was further 
improved in 1986 by Jian [12} and independently by Robson [15]. Jian's algorithm rims in O(1.2345 ~) 
time and polynomial space; Robson presented two algorithms: one in polynomial space run- ning in O(1.2243 
~) time, and one consuming exponen- tial space running in 0(1.2108 n) time. The so far best algorithm 
was presented by Beigel [2] in 1999; it run.q in 0(1.2226 n) time and polynomial space. The basis for 
our work is an O(1.3247 ~) algorithm for counting the number of independent sets with max- imum weight 
in a graph. Our algorithm is the first (known to us) exact algorithm proposed to the end of counting 
maximum independent sets. By transforma- tional tech_niques, and modifications of the original algo- 
rithm~ we achieve non-trivial upper bounds for a number of interesting counting problems. Section 2 introduces 
some basic terminology and notation for graphs needed for Section 3, where the main algorithm and its 
correctness are discussed. In Section 4 an upper bound for this algorithm and its help functions is established. 
Some of its various applications are shown in Section 5. The paper is concluded by a section cont~|ning 
a brief discussion of future work. 2 Preliminaries A graph G -(V, E) is an ordered pair consisting of 
a finite set V of ~ertices and a set of unordered pairs (u, v) of distinct vertices, called edges. Each 
vertex u E V has an associated weight w(u) E Z +. Two vertices u, v are adjacent if (u, v) E E. A set 
8 of vertices is independent if (u, v) ~ E for all u, v E S. Let lnd(G) denote the set of all independent 
sets in G. A path from Vz to vk is a sequence of vertices vz,..., v~ such that (v~, vi+z) E E for 1 _ 
i < k. A cycle consists of an edge (u, v) and a path of length > 1 from ~ to v. A set of vertices S is 
connected if, for all u, v 6 S, there is a path from u to v containing only vertices in S. The vertices 
of a graph can be partitioned into maximal connected subsets, called the connected components of G. If 
G ---- (~, E) is a graph and S is a set of vertices,  Y . O°°° .................... j  x ~ B(=) ~.......'"'"'"'" 
'""".....%. Z. C).." Figure 1: The case ofLG(z) = 1 in a graph ofmaximum degree 3; the filled lines 
indicate where there is an edge by necessity, whereas a pointed line indicates a possible edge the graph 
GfS = (S, E(S)), where E(S) = {(u,v) e E lu, v e S}, is called the sabgraph of G induced by S. For S 
_C V, we write G -S to denote the graph GI (V -S). The neighbourhood of a vertex v is the set of all 
vertices adjacent to v (excluding v itself), and is denoted No(v ). The degree of a vertex v (denoted 
A(v)) is the number of elements in E with v as a member. The degree of a graph CA(G)) is max({A(v) I 
v E V}). Note that every connected graph with degree _< 2 is either an isolated vertex, a path or a cycle. 
We will study a function #mis from the set of finite graphs to N x N. It is defined as follows: #mis(G) 
= (c, s) where s is the weight of the heaviest independent set in G and c is the total number of independent 
sets in G of weight s. Algorithm We will now describe and prove the correctness of our algorithm for 
computing #m/8. The complexity analysis can be found in the next section. The main algorithm (which is 
denoted A and can be found in Figure 1) relies on four auxiliary algorithms: As, As, AE and comb. The 
algorithms As and As (Figure 2) compute #m/s for graphs of maximal degrees 2 and 3, respectively. A~ 
is an algorithm that computes #m/s by exhaustive search. We will only apply AE to graphs of constant 
size (< 4 vertices) so we can safely assume that A~ runs in O(1) time. The comb algorithm (Figure 1) 
is a simple, O(1) time computable but very important help function that is used by A~., As and A. There 
is a function L used by algorithm As. Infor- mally, one can say that LG(x), z E V, tells how many of 
the neighbours of z that are in contact with vertices outside the neighbourhood (including x). Given 
a graph G = (IF, E) and a vertex x E V, we define LG(X ) --IUI where U ----{U I (U,V) 6. E A u 6_ NG(Z 
) A v ~. NG(Z, ) U {.~}}. If LG(z) = 1, then B(z) denotes the unique vertex in Nu(x) that is adjacent 
to one or more vertices outside No(z) U {x}. The function is illustrated in Figure 1. The theorem of 
the correctness of A relies on four lemmata. As these lemmata axe proved, further light is shed upon 
the structure of A. LEMMA 3.1. Let G be a graph consistin 9 of k connected components Ga,...,Gk and assume 
that (c~,si) = #mis(G~). Then, #mis(G) (I-L=~ c,, E,=~ ~d- ~ = Proof. Trivial. Arbitrarily choose a 
graph G = (If, E) and a vertex z E V. We define I~ C 2 v in the following way: I = {S C_ V I S e Ind(G) 
and x e S}. Let k be the size of the largest set in I and define I2 = {r e x I II'1 = k}. We de~e X~. 
,imaarly but consider independent sets without x, i.e. i = {s c_ v I s ~ Xnd(G) and = ¢ s}, let k equal 
the size of the largest set in X and I,ax = {I' 6 1 I II'1 = k}. Let s(IffiG), s(I~z) denote the sizes 
of the sets in I~, I~z , respectively. LBMMA 3.2. Let G be a graph and z a vertex in G. Under the assumption 
that (cl, si) = #mis(G--NG(z)--{x}) and (c2, s2) = #mis(G-{x}), it holds that  #rain(G) --comb(G, x, 
(cl, sl ), (cs, s2) ). Proof. We note the following: 1. if s(I~) < s(/.c=), then #m/s(G) = (IZ.~.l, s(xE=)); 
 2. if s(I2) = s(z~=), men #m~CG) = (1121 + I,rE=l, s(I~)) since I~ and I.a= are disjoint sets; 3. if 
s(I~) > s(I~=), then #mis(G) = (ll, l,s(/,)); By comparing these three cases with the definition of 
comb, we see that the ]emma holds if[ 1. (I,"Yl, s(lry)) = (~,,,, + ,,,(=)); and 2. (IXE=I,,(IY=)) = 
(c=, s=)  It is obvious that (2) holds so we concentrate on (1). Let S be an arbitrary independent 
set in G containing x and note that No(~r) N S = ~. Let G' = G -No(z) and note that/~-1%(~) = I~. The 
graph G' contains at least two connected components, (7 -NG(z) -{z} and the graph only containing the 
vertex z. Thus, every independent set of maximum weight in G' contains the vertex =, i.e. #m/s((7') 
----(l l, By Lemma 3.1, #m/s(G') ---- (c~. 1, s~ +w(z)) which concludes the proof. LP.MMA 3.3. Let (7 
be a 9raph such that A((7) ~ 2. T en, = #mis((7). Proof. By looking at the algorithm, we can see that 
Case 1 is correct by Lemma 3.1 and the inductive assumption that the algorithm is correct for smaller 
inputs. Case 2 is correct since we assume that A~ is correct. The correctness of Case 3 follows from 
Lemma 3.2. LEMMA 3.4. Let (7 be a 9raph such that A((7) < 3. r en, As((7) = #mis(G). Proof. The proof 
is very similar to the proof of Lemma 3.3 -the only obstacle is to realize what is computed in lines 
7-25. The if-statements in lines 10- 20 will take care of the various possibilities of edges within the 
set of vertices {z, y, z, B(z)), thus comput- t ,, ,,~ number and weight of the indepen- ing ~Cl~ $1]~ 
the dent sets among those vertices. By combining Lem- mata 3.2 and 3.1, one can see that (ci, sl) (computed 
in line 21) equals #mis((7 -No(B(z)) -{B(z)~) (under the inductive hypothesis that As is correct for 
graphs that is smaller than (7) while (c2, s2) (line 24) equals #m/s(G -- {B(z)}). Thus, Lemma 3.2 implies 
that the value that is returned from line 25 is #mis((7). Note that we do not need to consider the case 
LG(z) = 0 in Algorithm As, since G is connected (by Case 3) and IGI > 3 (by Case 1). THEOREM 3.1. A((7) 
= #m/s((7)/or every graph G. Proof. The correctness of A either follows from Lemma 3.4 -for input graphs 
with maximum degree 3, or from Lemma Lemma 3.2 -for denser graphs. Complexity Analysis In this section 
upper bounds for the time complexity of A and its help functions will be proved. Going from functions 
taking simpler input, to the ones accepting more complicated, we start with a short proof for A~, a slightly 
more advanced one for As and ends with a short one for A. We will encounter several recurrences of the 
form T(n) ~_ ~ T(n -r~) + poly(n). i=1 1 algorithm A((7) 2 if A(G) _ 3 then return As((7) 3 else 4 begin 
5 arbitrarily choose = (7 with degree ;> 3 6 81) = A((7 -aCx) - 7 = A(C -{-}) 8 return comb((7, z, 
(Cl, $1), (C2, $2)) 9 end 1 algorithm comb((7, z, (c~, $1), (c2, $2)) 2 3 if s~ < sz then return (cz, 
$2) 4 if $~ -- Sz then return (cx + c2, $2) 5 if s~ > sz then return (c1, $~) Figure 2: Main algorithm 
for counting independent sets and a helper function for combining two solutions They satisfy T(n) O(A(rl,...,rk)') 
where A(rl,... ,rh) is the largest, real-valued root of the function/(z) ----1 -~-]~=I =-r,. Since this 
bound does not depend on the polynomial factor poly(n), we can safely assume that all polynomial-time 
calculations takes O(1) time. The algurit.hms A2 and A8 apply themselves to ev- ery connected component 
of their input. Note that this k does not increase the running time since ~-~=1 T(ni) < k T(n) when 
n = ~-~-~=1 n~. LEMMA 4.1. Algorithm A2 is a polynomial-time algo- rithm when applied to graphs of degree 
~. Proof. Assume (without loss of generality) that the input graph G is connected. If C is a path with 
n vertices, then the time is bounded by the recurrence T(n) ~_ 4T([n/2]) and straightforward calculations 
show that T(n) E O(4 ]°s2 ") = O(n2). If G is a cycle, then G is immediately transformed into a path 
in both recursive calls of the algorithm. Consequently, the algorithm is polynomial in this case, too. 
LSMMA 4.2. Algorithm As ~'uns in 0(1.3045 n) time when applied to ~aphs of de@~e 3. Proof. In this lemma, 
we will measure the size of a graph G by the number m of edges it contains. We will ultimately show that 
As rims in O(1.1939 ~) time; by noting that a degree-3-graph with n vertices can contain at most 3n/2 
edges, we get that the algorithm runs in O(1.19393n/2) = O(1.3045 n) time. We assume that the input graph 
(7 is connected and contains m edges- Cases 1 and 2 are either trivial 1 algorlthm A2 (G) 2 Case 1: G 
is not connected. Let Gt,...,G~ be the connected components of G, compute (ci, 8i) = k k Az(Gi), 1 < 
i < k, and return ([Ii=l Ci, EI=I s~). 3 Case 2: [GI _< 3. Return As(G). 4 Case 3: If G is a cycle, 
then arbitrarily choose a vertex x. If z is a path, then choose x to be a vertex that splits G into two 
paths so that the length of one exceeds the other with no more than I (i.e. they should be so close to 
equal length as possible). 5 (ci, s~) = A2(G -No(x) -{z}) 6 (c2,82) = A2CG - {x}) ? return comb(G,x, 
(Cl,Sl), (C2, 82))- 1 algorithm A3 (G) 2 Case 1: IGI < 3. Return Az(G). 3 Case 2: A(G) < 2. Return A2(G). 
4 Case 3: G is not connected. Let GI,...,Gk be the connected components of G, compute (c~, 8~) = k k 
As(G~), 1 < i < k, and return (YI~=I C/, Ei=l 8~). 5 Case 4: Arbitrarily choose a vertex z in G such 
that A(~.) = 3. 6 if LG(Z ) --1 then 7 begin 8 {~, z} = No(x) -{B(z)} ! ! 9 (ct, 81) = As(G -- NG(B(z)) 
--NG(Z)) 10 if (B(z),y) 6 E then 11 (~', 81' ) = (1,w(z)) 12 elslf (B(z),z) E then 13 (~', si') = 0, 
w(~)) 14 elsif (y, z) E then 15 ifw(y) ~w(z) then 16 (d', 4) = (i, ~(wCy), ~(~))) 17 else 18 (~, 8~) 
= (2, ~(y)) 19 else [ rl Irl 20 ~c~,st, = (1,w@) +to(z)) 21 (c~, 8d = (cl- d', sl + 8~') 22 (C~, s~) 
= As(G --NG(Z) --{Z}) ~3 (c~, s~) = A~(~t{z, ~, z}) 24 (~2, 8~) = (c~. ~, 8~ + s~) 25 return comb(G, 
B(z), (cx, ,d, (c2, 8~)) 26 end 27 else(* LG(Z) > 1 *) 28 begin 29 (el, 81) = A3(G -/~rG(X) --{2:}) 30 
(c2, 82) = As(G -{z}) 31 return comb(G, z, (Cl, 81), (c2, s2)) 32 end Figure 3: The auxiliary algorithms 
A2 and As 295 or follows from Lemma 4.1 so we only consider the final case where we have two subcases: 
1. LG(X) = 1. Both graphs G - NG(B(x)) -NG(x) (line 9) and G -NG(x) --{x} (line 22) contain at most m-4 
edges; the graph G[{x, B(x), y, z} contains at most 5 edges since A(z} ---- 3 and there is at least one 
edge from B(m) to some vertex not in {x,y,z} since LG(Z) = 1. The time needed in this case is bounded 
by T(m) < 2T(m -4) and T(m) O(1.1892m). 2. LG(x) > 1. The graph G-NG(z)-{x} contains at most m-(3 +LG(z)) 
--- m--5 edges since A(x) = 3 and LG(X) is at least 2. Similarly, the graph G-{x} contains at most zn 
- 3 edges. The time needed in this case is bounded by T(m) < T(m-3)+Tim-5) and T(m) 6 O(1.1939m). THEOREM 
4.1. Algorithm A runs in O(1.3247") time. Proof. The result follows from Lemma 4.2 if A(G) <_ 3. Otherwise, 
assume the given graph contains n vertices. We see that the graphs constructed in lines 6 and 7 contain 
at most n -5 and n -1 vertices, respectively, since A(z) >_ 4. This implies that the running time is 
bounded by the recurrence T(n) <_ T(n -1) + T(n -5), which solves to 0(1.3247n). 5 Applications Here 
we present some of the various applications of the algorithm A. First some definitions of the counting 
problems are given and then, for each of them, an upper bound is presented. In the corresponding proof 
an algorithm that transfers the problem instance to a weighted graph is shown. These problems and variants 
of them have been intensively studied, cf. [5, 8, 10]. ~l-IN-k SAT INSTANCE: A CNF F. QUESTION: What 
is the number of satisfying assign- ments; a satisfying assignment having the property that exactly one 
literal be true in each clanse? #EXACT HITTING SET INSTANCE: A finite set U and a collection C of subsets 
ct...c, E U. QUESTION: A solution is a minimum size subset H C_ U hitting each ci exactly once, i.e. 
Ici f3 HI = 1. What is the number of solutions? #EXACT COVER INSTANCE: A finite set U and a collection 
C of subsets Cl --. c, of U. QUESTION: If C contains an exact cover for U -i.e. a subeollection C t C_ 
C such that every element of U occurs in exactly one member of C' ~ what is the number of exact covers? 
~WFAGHTED SET PACKING INSTANCE: A finite set U and a collection C of subsets cl... cn E U and for each 
c~ there is an associated weight QUESTION: A solution is a collection C' c C of disjoint sets of ma~im~lm 
weight. What is the number of such solutions? PROPOSITION 5.1. For arbitrary k, #l-IN-k SAT can be solved 
in O(1.7548 n) time, where n is the number of variables. Proof. In order to use A for counting solutions 
we need to transfer the CNF F into an appropriate, weighted graph W' = (It', E). In W' a solution to 
F corresponds to a maxim~tm independent set with weight N, where N is the number of clauses. For the 
sake of clarity, we will present an algorithm that builds a graph W in which a solution to F corresponds 
to a maximum clique of weight N. As is clear to the reader, the graph W' is simply the complement of 
W, and applying A to W' is in effect the same as counting maximum cliques in W. The graph W takes its 
vertices from the literals, and gives rise to a vertex set that has at most twice the cardinality of 
the set of variables - hence the O(1.7548") bound. The set V of vertices: Any literal a that appears 
in any clause will form a vertex A. The weight of A is the number of appearances of a. Let us call a 
the regent of A and the clauses where a appears the regent clauses of A. If among A's regent clauses 
there are appearances of both ~ and -8 (for some variable fl), remove A from V. The set E of edges: For 
two vertices A and B, add an edge ifl': 1. They did not come from the same variable, just differing in 
the sign; 2. They do not overlap in F, i.e. A's regent does never appear in the same clause as B's regent; 
 3. In none of A's regent clauses there is an appearance of a variable ~ (or -fl), which appears in any 
of B's regent clauses in the negated form -~ (~).  We now show that counting the number of cliques with 
weight N in the graph W is equal to finding the number of solutions to the 1-in-k SAT of the original 
F. Every solution correspon&#38; to an N-weighted clique: A solution means an assignment such that each 
of the N clauses each contnins exactly one true literal. The clauses can be partitionated so that those 
having the same true literal belong to the same set. ~_ssign each such set a number 1... j. Let each 
of the true literals form a vertex. The sum of those vertices' weights is N. Pick an arbitrary vertex 
A. Since only one literal per clause is true, the clauses of A cannot contain both and -ft. So A is a 
vertex in the graph W. It remains to show that each pair of the vertices have an edge. Pick two vertices 
A and B. Since 1. both A and B come from true literais, they can not come from the same variable with 
opposite signs; 2. only one literal per clause is true, they can not overlap; 3. only one literal per 
clause is true, the variable u cannot be true in A's clauses but false in B's.  Thus, there is an edge 
between any pair of the vertices, providing that j > 1. If j = 1, there is one vertex with weight _N 
which can also be regarded as a clique. Every N-weighted clique corresponds to a solution found- This 
part of the proof is two-folded - first it is proved that it is possible to consistently assign truth 
values to the regents of the vertices, and then it is proved that such an assignment is a solution. It 
is possible to consistently assign truth values: When a clique of weight N is found the regents of the 
clique vertices are assigned true. This can be done consistently since condition 1 regarding the edges 
guarantees that the same variable will not appear in both negative and positive form in the clique. The 
regents of the non-clique vertices are assigned false. This can be done consistently since: 1. The construction 
of V guarantees that the sets of clique and non-clique regents are disjunct -hence an assignment of a 
non-clique regent will not affect a clique regent; 2. To prove that no non-clique regent will be assigned 
true by some other non-clique being assigned false, one can note that:  inspecting two arbitrarily chosen, 
connected vertices A and B, in no pair of their regent clauses is to be found the s~me variable but having 
opposite signs - condition 5 in the edge construction;  and furthermore, the clique is covering all 
clauses, by condition 2 in the edge construc- tion;   Such an assignment is a solution: The regents 
of the clique vertices satisfy N clauses. This follows from the construction of vertices and conditions 
1 and 2 in the edge construction. It remains to show that at most one literal be true in each clause. 
Assume for the sake of contradiction that in some clause there is more than one true literal. We know 
that at least one of them is part of the clique, since the clique is covering all clauses. Two of the 
literals cannot be part the clique due to conditions 1 and 2 in the construction of edges. Neither can 
one literal be part of the clique and the others not -any such true non-clique regent is impossible, 
as was shown in the above discussion about consistent a~signment. Remark 1: Among the applications, this 
one we imple- mented to test A. After constructing W, one can note that picking a vertex A and its neighbourhood, 
if the sum of those vertices' weight is lower than N, A can not be part of a solution and can thus be 
safely re- moved from V. This procedure can be repeated until a fixed point is reached. For most CNFs 
tested this fixed point is 0. One CNF with fixed point 127 (i.e. 127 ver- tices) took about 100 secs 
to process and this CNF was testing the limits of the computer (an Ultra~SPARC at 440 MHz, 256 Mb RAM) 
-the bottleneck is the memory consumption. It should be noted that A was naively im- plemented. To obtain 
the code, please contact Vilhehn DahllSf. Remark ~: One can note that the problem instances are solved 
-the number of solutions is found -in 0(1.7548 n) regardless of the maximum clause length. This is interesting 
since Impagliazzo and Paturi [11] make the conjecture that deciding the ea'istence of an ordinary satisfying 
assignment approaches 0(2 n) as k (the maximum clause length) grows larger. PROPOSITION 5.2. #EXACT HITTING 
SET can be 8aired in O(1.3247") time, where n is [U I. Proof. This problem is very similar to 1-in-k 
SAT; the two differences being that there is no negation of the variables and there is a requirement 
that the solution be of n~,imum size. So among the maximum weighted solutions only the ones with the 
smallest number of vertices is kept. Using the same procedure as in the 1-in-k SAT to build W, we can 
again apply A to the complement W' provided we perform some minor changes to A. A has to return a triple 
(c, s, n) where c is the number of maximum weighted, minimum sized solutions, s is the weight of the 
found solutions (of course, it should equal [U[), and n is the number of vertices in the found solutions. 
So, for each occurence 1 algorithm comb'(G, z, (cl, sl,nl), (c2, s2,n2)) 2 s =s1+w(x) 3 n~----nl+l 4 
ifs~ < s2 then return (c~,s2,n2) 5 ifs~ =s2 then ? ? 6 if n~ < n~ then return (Cl, sl,nl) 7 elsif n~ 
> n~ then return (c~, s2, n2) 8 else return (Cl + c~., s2, n2) ! ! 9 ifs~ > s2 then return (Cl,Sl,nl) 
1 algorlth_~m A'(G) 2 if A(G) _ 3 then return A~s(G) 3 else 4 begin 5 arbitrarily choose x E G with degree 
> 3 6 (el, sl, nl) = A'(C -NG( ) -{x}) 7 (c2, s2, n2) = A'CG -{z}) 8 return comb'(G, :r, (cl, sl, nl), 
(c2, s2, n2)) 9 end Figure 4: Parts of an algorithm for computing ~EXACT HITTING SET. of a result tuple 
in the algorithm, there will be an ocurrence of such a triple. The main function and the comb' function 
are presented in Figure 5; the other functions can easily be modified similarly. PROPOSITION 5.3. ~EXACT 
COVER can be solved in O(1.3247 ~) time, where n is the number of sets. Proof. Let (U, C) be an arbitrary 
instance of the #Ex- ACT COVERproblem. Construct a weighted graph W = (V, E) as follows: let each ci 
E C give rise to a vertex vl E V whose weight is [cil. Add an edge be- tween vi and vj if and only if 
ci N cj ~ g. Clearly, no independent set in W can have a weight greater than [U[. Furthermore, the independent 
sets of weight IUI in W corresponds to solutions of (U, C). PROPOSITION 5.4. ~WEIGHTED SET PACKING can 
be solved in O(I.3247 n) ~ime, where n is the number of sets. Proof. Let (U,C) be an arbitrary instance 
of the ~WEIGHTED SET PACKING problem. Construct a weighted graph W = (Y, E) as follows: introduce one 
vertex vi for each ci E C and assign it weight w(c~). Add an edge between vi and vj if and only if ci 
A cj ~ e. Obviously, a maximum weighted, independent set found in W constitutes a solution. Conclusions 
and Future Work We have presented an O(1.3247 n) algorithm for count- ing the number of independent sets 
with maximum weight in graphs and shown how this algorithm can be used for solving a wide variety of 
counting problems. Our algorithm has been implemented and has thus de- scended from the ideal world where 
most of the algo- rithms for #P complete problems have dwelt up til now, and can be used and experimentally 
studied. There are probably many ways to further improve the v mning time of the basic algorithm -for 
instance by introducing a new help function A4 for handling graphs of maximal degree 4. Assuming that 
A4 runs in O(c n) where 1.2852 ~ ),(1, 6) < c < A(1, 5) ~ 1.3247, the running time of the algorithm 
can be decreased to O(c.). Another possibility for improving the ~Igorithrns is to utilise dynamic programming. 
As an example, the currently fastest algorithm for solving the maximum in- dependent set problem, Robson's 
[15] algorithm, runs in O(1.2108 n) time. This time bound is achieved by adding a highly memory-consuming 
dynm~ic program- ming scheme to an O(1.2277 n) time, polynomial-space algorithm. Algorithm A uses only 
a polynomial amount of space and could thus benefit from such a modifica-tion. Several authors (c/. [17] 
and [10]) have studied restricted versions of counting problems and shown that they are ~P-complete. 
For instance, Vadhan has shown that the problem of counting independent sets is #P- complete even if 
restricted to planar, bipartite graphs of bounded degree. It seems probable that this problem can be 
solved by more efficient algorithms than the O(1.3247 n) algorithm in this paper, however. One ~m__mediate 
idea is to use some decomposition technique for planar graphs, e.g. decomposition into k-outerplanar 
graphs [1] or using Lipton and Tarjan's planar separator theorem [13]. Such methods have been very successful 
in the construction of approximation algorithms but they have apparently not been used for the construction 
of counting algorithms. References <RefA>[1] B. S. Baker. Approximation algorithmg for NP-complete problems 
on planar graphs. Journal o I the ACM, 41(1):153-180, 1994. [2] It. BeigeL Finding Maximum Independent 
Sets in Sparse and General Graphs. In Proc. 10th Annual ACM-SIAM Symposium on Discrete Algorithms, pages 
856-857. ACM/SIAM, January 1999. [3] It. Beigel and D. Eppstein. 3-coloring in time O(1.3446~): a no-MIS 
algorithm. In Proc. 36th Sgmp. Foundations of Computer Science, pages 444- 453. IEEE, October 1995. [4] 
E. Birnbaum and E. L. Lozinskii. The good old Davis- Putnam procedure helps counting models. Journal 
o] Artificial Intelligence Research (JAIR), 10:457-477, 1999. [5] B. Chandxa and M. HalldSrsson. Greedy 
local im- provement and weighted set pa~.king approximation. In Proc. IOtA Annual A CM-SIAM S~mposium 
on Discrete Algorithms (SODA-1999), pages 169-176, 1999. [6] E. Dantsin, E. A. HiIsch, S. Ivanov, and 
M. Vs~mirnov. Algorithms for sat and upper bounds on their complex- ity. Elsetroni~ Colloquium on Computational 
Complaz- i~ (ECCC), 8(12), 2001. [7] O. Dubois. Counting the number of solutions for in- stances of satisfiability. 
Theoretical Computer Science (TCS), 81(1):49-64, 1991. [8] M. Garey and D. John.~on. Computers and Intractabil- 
ity: A Guide to the Theory o I NP-Completeness. Free- man, New York, 1979. [9] C. S. Greenhill. The complexity 
of counting colottr- ings and independent sets in sparse graphs and hyper- graphs. Computgtional ComplezitT], 
9(1):52-72, 2000. I10] H. B. Hunt III, M. V. Marathe, V. Radhakrishnan, and It. E. Stearns. The complexity 
of planar counting problems. SIAM Journ~ on Computing, 27(4):1142-1167, 1998. Ill] It. Impagliazzo and 
R. Paturi. On the complexity of k- sat. Journal of Computer Grid Syatem Sciences (JCSS), 62(2):367-375, 
2001. [12] T. Jian. An O(2 °'s°4") algorithm for solving maximum independent set problem. IEEE Transo.ctio~ 
on Com- puters,, 35(9):847-851, 1986. [131 It. J. Lipton and R. E. Tarjml. A separator theorem for planar 
graphs. SIAM Journal on Applied Mathemo~ies, 36(2):177-189, 1979. [14] M. L. Littman, T. Pitassi, and 
K. Impaglia2zo. On the complexity of counting satisfying assignments. Ap- peared in the working notes 
of the LICS 2001 workshop on Satisfiability. [15] J. M. Robson. Algorithms for maximum independent sets. 
Journal of Algorithms, 7(3):425-440, 1986. [16] It. E. Tarjan and A. E. Trojanowski. Finding a max- imum 
independent set. SIAM Journal on Computing, 6(3):266-283, 1977. [17] S. P. Vadhan. The complexity of 
counting in sparse, regular, and planar graphs. SIAM Journal on Com-puting, 31(2):398-427, 2001. [18] 
W. Zhang. Number of models and satisfiability of sets of clauses. Theoretical Computer Science (TCS), 
155(1):277-288, 1996.  </RefA>
			
