
 AN ALGORITHMIC APPROACH TO CONTROLLING SEARCH IN THREE-DIMENSIONAL IMAGE DATA M~chael L. Rhodes University 
of California, Los Angeles Los Angeles, California Abstract suited. In many three-dimensional imaging 
applications random shaped objects, reconstructed from serial sections, are isolated to display their 
overall structure in a single view. This paper presents an algorithm to control an ordered search strate- 
gy for locating all contours of random shaped ob- jects intersected by a series of cross-section image 
planes. Classic search techniques in AI problem solving and software for image processing and computer 
graphics are combined here to aid program initialization and automate the search process thereafter. 
Using three-dimensional re-gion growing, this method isolates all spatially connected pixels forming 
a structure's volume and enters image planes the least number of times to do so. An algorithmic description 
is given to generalize the process for controlling search in 3-D image data where little core memory 
is avail- able. Phantom and medical computer tomographic data are used to illustrate the algorithm's 
per- formance. I. INTRODUCTION There are numerous edge detection algorithms ublished for two-dimensional 
digital images l I-8) but few have been reported for processing three-dimensional data (9). Due to their 
accur- acy and interaction two-dimensional techniques have been appropriate for most applications, including 
those involving three,dimensional data. For example, in microscopy, computer-calibrated tracing pens 
are used to locate structure con- tours for computer graphics display. Tracings are made for each digitized 
photograph made from microscopes focused at regular levels within a transparent specimen. For opaque 
specimens image planes are digitized that show a specimen's newly exposed surface after slices are cut 
at regularly spaced intervals. Dramatic views of the human brain (lO) and neural tissue of the vertebrate 
retina (ll) have been produced using such contour tracing techniques. Edge detection for slow image generation 
systems can use 2-D methods applied manually or interacti-vely without extensive additional cost in compu-ting 
time. Data generated are off-line and ex-cept for a few image processing research facili-ties photograph-to 
scanner-to digital files is so protracted that 2-D edge finding methods are well Whenever digital image 
generation is slow or only a few parallel planes are available for three di-mensional applications, there 
is no need for fast or automatic algorithms to find structure cross-section contours. However, once a 
large volume of image data (comprising several planes) is produced quickly and fast object isolation 
is desired, an automatic, three-dimensional method is needed. Such characteristics describe the environment 
for clinical analysis of image data from computer tomo-graphic (CT) scanners and new ultrasound imaging 
devices. Edge detection for clinical image analysis should be on-line, need little user interaction, 
and exe- cute with speed close to the rate at which images are generated. Work reported here is directed 
to those applications where fast automatic edge de- tection is desired for 3-D image analysis. Our goal 
is to develop an algorithm that will isolate a single structure fast with as little user inter- action 
as possible. Using such a program a 3-D image investigator could start the isolation pro- cess, resume 
his other duties, then return to a display of the object's contours isolated. In section II.l we briefly 
describe planar aspects of our strategy. Though region growing is used in th~s work, we point out changes 
necessary for a contour-following approach that may further speed the isolation process. Section II.2 
presents a plane-to-plane connection strategy that limits search in z-adjacent x~y planes and eliminates 
the need for user interaction when each is examined. In section II.3 we give an algorithmic description 
of our technique to re-enter image planes to find complete structure contours. Using this plane connection 
strategy of section II our plane re- entrance technique enters planes the least number of times to find 
all contours for random-shaped structures. II. MET__HODOLOGY Key three-dimensional aspects of our complete 
iso- lation algorithm lie in its ability to automatic- ally provide connection between planes, enter 
new ones, and re-enter image planes when necessary to find complete object boundaries. This third di- 
mension control of edge detection is presented in Sections II.2 and II.3. In the first section we Â¢1979 
ACM O-89791-004--4/79/0800--134 $00.75 See Copyright Pg. 134 examine two-dimensional aspects of the algorithm 
and its data structures. II,I Planar Algorithm The region growing algorithm introduced below is two-dimensional 
and based on an image segmentation algorithm developed by Yakimovsky and Cunningham (12). We have maintained 
the algorithm's two-di-mensional nature in spite of a three-dimensional data environment. Though 2-D 
region growing can be extended to "volume" growing we have limited the search for structure edges to 
planar data first. By processing as much as possible per plane we ex- ploit the planar arrangement of 
image data and re- duce the frequency image planes are read from au- xiliary storage: I/0 delays are 
reduced. Addi-tional execution speed is made possible by using large I/0 buffers. Due to memory savings 
made possible by the algorithm's data structures larger portions of each image can be core resident during 
execution. Fig., 1 shows major components of the region grow- ing algorithm. A scenario of computer issued 
prompts and user replies determines three inputs interactively: I) AN IMAGE ARRAY: the two-dimensional 
image matrix D(i,j,k), {XMIN<i XMAX, YMIN<j<YMAX, ZMIN<k<ZMAX}, where k=-CK is constant, 2) A REGION 
ACCEPTANCE CRITERION: a decision function DF(i,j,k) to determine region membership and, 3) A SET OF SEED 
PIXELS: SD: {(i,j,CK) 0 ..... (i,j,CK)n}, n>_0. These pixels are the first to be tested for region membership. 
II~PUT OUTPLIT I SbRRAY 2-D P.EGIC~I GP.OWING ~d~T~DP.ITI-~4 AREA ARRAY FUNCTION y Figure I. Region 
Growing Components In addition to input components for the planar al- gorithm, two data structures used 
by the algorithm are illustrated in Fig., I: I) a linked list structure that represents pixels found 
to be region members on plane k=CK and, 2) a queue that stores candidate pixels to be tested for region 
membership. The algorithm produces two results: an area image containing all pixels found to be in the 
region on plane k=CK, and an edge image containing only the structure's surface intersection with the 
plane. The algorithm is a simple ordered search process that examines perimeter pixels of a growing region: 
Every seed pixel tested by the algorithm, and found to be a region member, generates eight (or fewer) 
candidate pixels to be tested for membership. 0nly the eight neighboring pixels are possible candidates, 
and of these, only pixels not already re-gion members are chosen. Pixels chosen as candidates are placed 
in a queue to be tested for membership. Those that fail acceptance are discarded and do not gene-rate 
candidate pixels, those that pass are entered as region members and generate candidate pixels themselves. 
Terminate when the candidate queue is empty and no additional seeds are provided for the plane. The 
algorithm is a breadth-first search that exa-mines all eight same-plane neighbors of each pixel already 
found to be a region member (see (13) for full description), If we add the restriction that only one 
candidate can be accepted for membership (for each pixel al-ready chosen) we form an algorithm that constructs 
paths of one pixel width. Added provisions for ordering the eight candidates for selection, back-tracking 
on dead-end edges, and end-point-start- point identity forms a contour following algorithm that can use 
the organization and data structures of region growing for implementation. (With pro- visions mentioned 
above we have developed a con- tour follower, with auto,backtracking, that is fast and reliable.} Since 
typically far fewer pixels are tested for contour membership than for region membership, the contour 
follower has a clear advantage in execu-tion speed but complicates the connection strategy as the planar 
algorithm advances from one image plane to the next. For example, "bubble" surfaces within an object 
are difficult to detect auto-matically using contoun-following as the planar algorithm. Such surfaces 
are detected as a matter of course using region growing and due to this we have used region growing during 
program develop- nw~nt. In what follows we will confine planar aspects of edge finding.to region growing 
and use terminolo- gy from digital connectivity defined below. Using natural concepts of connectedness 
given here and in (14) we can form an automatic plane-connection strategy for region growing algorithm. 
(The cor-responding strategy for a contour following al-gorithm requires similar pixel testing with added 
provisions to detect "bubble" surfaces.) Let 13 denote the set of all integer triples (i,j,k), which 
are picture elements in three-space. Let A={(il, j l, k]) ..... (iq, jq, kq)} be any q- tuple of (i,j,k)'s, 
q~l. We call A a right-path in space if for each p, where l<_p<q, we have lip -ip+ 1 I + lJp -Jp+l I 
+ Ik k -kp+ l I ~ I: the condition allows (ip+ l, Jp+l' kp+l) to be the same as (ip, jp, kp) or any of 
its six orthogonal neighbors. Similarly, we call A an angle-path in space if for each p t4~X(li p -ip+ll, 
IJp -Jp+l I , Ikp -kp+iI)<_l; this condition also allows (ip+l' Jp+l' kp+l) to be the same as (ip, jp, 
kp), its eight horizontal, vertical, diagonal neighbors on plane kp, or any of the nine neighbors on 
either plane k + l or k -I. The set of twenty-six P P angle neighbors of (i,j,k), is denoted by AN(i,j,k) 
and the set of six right neighbors RN(i,j,k), (Aproper subset of AN~. II.2 Plane Connection As region 
growing proceeds from plane k to k+l, at least one seed pixel is needed for each area in k+l that is 
a structure cross-section angle-conn-ected to a region member on plane k. For some structures one seed 
pixel is sufficient on each plane (consider a sphere intersected by parallel image planes) while other 
structures require mul- tiple seeds (consider a fork intersected by planes normal to its axis). For complete 
isolation of random objects, all pixels angle-connected to re-gion members need examination for region 
member- ship, a requirement that may exhaust core memory. In fact, for our implementation, all candidate 
pixels cannot be core resident (i.e. when stored explicitly, pixels for an area 128x128 need 16K of 16 
bit/word storage; l byte/coordinate). Our solution eliminates the need for extensive core memory. A data 
communication strategy is used to transmit seeds generated from plane k to region growing software operating 
in either neigh- boring plane. Two concurrent subroutines inter- act: one transmits seeds generated from 
the area image of plane k to another receiving routine that tests seeds for acceptance and initiates 
re- gion growing. This method, described below, uses I/0 buffer space to read the plane k area image 
from auxiliary storage: no large candidate queue is needed. Each pixel in the area image of plane k+l 
or -l depending oh direction of advance generates nine seed pixels (the angle neighbors on plane k~l). 
In effect, this action creates the set of candidate pixels shown in the lower right of Fig., 2 from the 
region members shown in the lower left. Seeds angle-connected to area members on the neighboring plane 
(candidate records) are transmitted until all pixels in the area image are exhausted. When a seed is 
accepted for region membership in the new plane, transmission of seeds to the region grower is suspended 
and region growing begins ab- out the accepted seed. During region expansion all pixels examined in plane 
k+l have their right-neighbors in plane k eliminated. This action eli- minates seeds already tested for 
membership from the pool of potential region members (Fig., 3 illustrates the strategy). j "LY ; K I 
.6 -S- ~ / / ---K+I 8 2-D ~IGHI~I~S 26 3-D EI(IiBOI~S VO~ PI~a~LS l:OOIx~)  CANDII~ATE VOL~ PIXEI~ IN 
PlA~IE k k+l A~ k-i I I Figure 2~ Spatial Connectivity K KÃ·I ~ TOFI~ IN IN K K+I ,.a~ L~J~ s~mt I~R 
ONCE A CAhB)II~TE IS ~l~ FOR IvIa~BERSHIP  SI.~I~ID ~ RI~GION GROW ~SSION OF ~ LWrlL QUEUE IS CA~II~TES 
EX~ RESUME ONCEA CA~I~TE IS AO~ SUSPI~) I~.GI(IN ~ION Figure 3. Example Showing Connection Strategy 
II.3 Re-entering Image Planes The 'S'~shaped structure in Fig., 4, intersected by 5 parallel image planes, 
illustrates the need for image plane re-entrance to isolate complete structure contours. Table l shows 
five cases where region growing is applied to locate struc- ture surface intersecting these planes. If 
con-trol of the planar algorithm is limited to one examination of each plane, an incomplete set of cross-section 
contours for the structure will be detected. Notice in every case Some contours are not discovered. 
 K-2 K-I K K-,-I K+2 I I lation can now be treated as controlling the crea- tion of a directed graph. 
For example, Fig., 5 shows a directed graph where image planes were re- entered to find all contours 
of the 'S' shaped structure in Fig., 4. Region growing proceeded from plane k, area A, through the states 
labeled I-5, back to node A and then nodes 6-I0. cmew RBGION ~OF smqm~ Oe CONTOURS ~ IN PIA.N~ EXAMIN~ 
~ FOUND MISSED 1 4 (5,5) k,k+l,k+2,k-l,k-2 4,5,2,5 1,A,6,7,8,9,10 2 A (6,1) k,kÃ·l,k+2,k-l,k-2 A,I,2,6,7 
5,4,S,8,9,I0 cA.s~ 5 9 (8,10) k,k+l,k+2,k-l,k-2 9,10,8,7 I,Z,3,4,S,6,A 4 2 k+2,k+l,k,k-l,k-2 2,5,1,4,.A,5,6,7 
8,9,10 5 7 k-2,k-l,k,k+l,k+2 7,6,8,A,9,1,10,2 5,4,3 4 3 I I (I I I 9 ,o) I Figure 4. 'S' Shaped Structure 
Intersected by Five Planes Complete contours for many simple structures can be found using a single initial 
seed and one ex- amination per plane. However, for objects of random or unknown shape well-placed seeds 
cannot always be provided. Regardless, 3,D region grow- in9 should find all angle-connected volume members 
given any single pixel as seed, This is possible by re-entering image planes that may have more re- g!on 
members than previously determined. For the ~S' structure, case 4 Table l, this would mean "turning the 
corner" at plane k-2, re-entering plane k-l, k~ and k+l to locate contours 8, 9, and IO. When a graph 
is used to represent states of a pro- cess and the nodes of the graph are labeled by state descriptors, 
the nodes and arcs form a di- rected graph indicating a sequence of state chan- ges. Intuition suggests 
that such a directed graph can be used to represent image plane access by the isolation algorithm. The 
problem of con~ trolling entry to planes for complete object iso- Table I. Contours Found Using Five 
Different Seed Placements K-2 K-I K K,I KÃ·2  1-' I i / G l ,, \ / ~, / x Figure 5. Graph Illustrating 
Plane Re-entrance The plane re-entrance algorithm is simple: the algorithm searches in one direction 
from plane to plane finding object cross-sections in each. When-ever a new cross-section can be found 
in the im- mediately preceeding plane, the algorithm inter- rupts its current plane-to-plane advance, 
remem- bers where it is, and turns around to advance in the opposite direction. The algorithm 'remembers' 
where it is by placing the identity of the current plane in a TURNPOINT stack. The process continues 
in the new direction, always 'looking over its 137 shoulder's, as it proceeds. Advance in one direction 
ends when no pixels in the next plane are accepted as part of the target object's volume or, the limit 
of z-axis planes has been reached. This condition returns control to the last turnpoint to be resumed, 
until advance is again halted. The algorithm is a depth-first search since turnpoint nodes (planes) are 
stored in a FILO stack: the most recently interrupted plane-to-plane advance is resumed next. The al- 
gorithm terminates when plane-to-plane advance is halted and there are no nodes in the TURNPOINT stack 
that can be used to resume processing. Note that image planes are entered if and only if a new set of 
area pixels will be found and?all-- possible areas will be found when each plane is entered. Thus image 
planes are entered the least number of times to find all contour cross-sections for a structure. In the 
description that follows two parameters are used to identify nodes visited in a plane-access graph like 
that shown in Fig., 5. Values for S and n are z-axis coordinates that identify x-y planes. When combined 
with n, the value for De{+l,-l} identifies the direction of plane-to-plane advance. These parameters 
allow the nota-tion VISlT(n,n+D) to indicate advance of the pla- nar algorithm into plane n from n+D. 
For example, VISIT(9,8) means region grow plane n=9 using the plane connection strategy to supply seeds 
from plane n+D=9+(-l)=8. The plane re-entrance algorithm is defined by the following Algol-like pseudo-code 
and the flowchart in Fig., 6. /* USERS INTERACTS TO REGICN GR~W ON */ /* PLANE n= Start */ PUSH (TURNPOINT,S) 
; D=-I /* EITHER DIRECTION */ n=n-D /* IF KLON<S<KHIGH */ do vhile |n~=STACKEHPTY) ; D=INVERT(D) ; 
 do while(VISIT(n,n+D) A -,LIMIT) CALL CLOSED (n) ; if EXPAND(n)=BACKSUCCESSOR then do; /* RE-ENTER 
*/ PUSH(TURN~OINT,n) ; n=n+D; D=I NVERT (D) ; od; else if EXPAND(n)=FRONTSUCCESSOR then n=n-D /* 
CONTINUE */ else LIMIT=-TRUE-/* deadend ~/ fi; od; n=POP (TURNPOINT) ; oa; 1~ithput further clarification 
of VISIT(n,N+D), EXPAND(n), and CLOSED cycles appear likely in the algorithm. For example, an area found 
in one plane could be rediscovered repeatedly. Taking CLOSED, VlSlT(n,n+D), and EXPAND(n) in turn we 
show how they cooperate to prevent such senseless process- ing. CLOSED is accessed whenever a new area 
has been START Pb'r S IN ~INT [ ST*=, ~ I  B~l--r;~ ) 'IllIll~OIl~ CALL THIS NODE n D = -I*D V" [ 
VISIT (n, n+D} I NO ~/~-~?i~ Figure 6. Re-entrance I Aim n TO~ I Flowchart HJTn IN NO YES TtPA~OINT 
 I.-.Ã·D I  No # I discovered by region growing. Using a table, CLOSED determines whether pixels just 
discovered by region growing should be stored in a new file space or added to previous results for the 
plane. A tab- le entry for each z-axis plane is reserved to in-dicate absence or presence of any earlier 
results and locates edge and area images on auxiliary stor-age. Edge and area images are updated by CLOSED 
when new areas are discovered on planes previously examined. Set nntation, {A(n)) and {C(n)}, is used 
here to represent the set of area and edge (contour) pix- els previously determTned in plane n. Similarly 
{A*(n)} and {C*(n)} is used to represent current results of region growing in plane n. Now the CLOSED 
table can be represented as a list of sets ({A(KLOW)} ..... {A(n)} ..... {A(KHIGH)}) where {A(n)} = NULL 
indicates that no prior results for plane n exist. This formalism allows {A(n)} = {A(n)} U {A*(n)} and 
{C(n)} = {C(n)} U {C*(n)} to represent the task performed by CLOSED(n). We use U here to in-dicate the 
union of sets and later /% to indicate the intersection of sets. VISIT(n,n+D) eturns "True" if new area 
found in plane n,'False' otherwise. Information maintained by CLOSED allows VISIT(n,n+D) to avoid rediscovery 
of pixels already found as part of an objects vol-ume. In addition to the planar region growing al- gorithm, 
VISIT(n,n+D) also represents the plane- to-plane connection algorithm (section 11.2) and a query mechanism 
to prohibit redundant processing.  (Multiple seeds can be user-supplied, but only one is given here 
for our test.) Fig., 9b shows the status of one plane during al- gorithm execution. One disconnected 
area is 'blacked-out', since pixels there have been found earlier, and a new area is about to be discovered 
(using seeds from a neighboring plane shown on the right side of figure). Two files are produced by 
the isolation algorithm. One file is sequence of image planes where only areas are stored: cross-sections 
of the object isolated by the algorithm. Another file stores only the corresponding boundaries for the 
object (see algorithm output in Fig., I). Figs., 9c &#38; 9d show a composite view of contours from all 
planes. Matching lines with the Fig., 8 photograph shows the entire phantom structure iso-lated. The 
algorithm determined the phantom con- tours in 51 min. 40 sec. on a PDP 11/34 using one seed. Using 5 
initial seeds execution time was reduced to 36 minutes. The composite photograph in Fig., I0 shows six 
anatomic structures isolated by re-entrant region growing. Execution times for each structure de-pends 
on structure size, frequency of plane re-entrance (shape complexity), number of seeds first provided, 
and whether filtering operations were chosen to preprocess image data. Contours for the spinal canal 
in lOa were found in 12 minutes (40 z-normal planes with an image window of appro-ximately 64x64). The 
cerebral ventrical contours in lOd took the longest to find due to low pass filtering at each plane inspection 
(43 minutes for 20 z-normal planes with an image window of 160x220). In cooperation with Cohen, Livingston 
(I0) and Shantz (II) we have built surfaces over contours reported by our methods. Fig., lla shows the 
spinal canal contours of Fig., lOa fitted with polygonal tiles using Fuchs algorithm (18). We then shaded 
the polygons for a solid representa- tion of the structure as shown in the two views of Fig., llb. IV. 
Conclusion We have presented an algorithm for controll- ing search in three-dimensional image data and 
have given execution times and results for phantom and patient data. Our technique im- proves on methods 
where search for object contours is unrestrained across planes form- ing the search space. Few computers 
have sufficient core memory to store complete three-dimensional image data for typical CT, ultrasound 
or microscopic applications. A virtual memory organization is a practical and common solution for such 
large core memory re- quirements. In this work, as in (9), a virtual memory is implemented to access 
the cube of image data searched for structure edges. Such techni- ques emulate a core memory of 'virtually' 
infi-nite size similar to that used in operating sys-tems (see Denning (19)). Virtual memories imple- 
ment a "sleight of hand" memory replacement opera- tion using only the actual core memory available. 
When requested data is not core memory resident, a 'page fault' condition is raised. This condi- tion 
causes replacement of data in core with that requested. The switch occurs transparent to the requesting 
program so a virtually large core mem-ory is apparent. Frequent page faults, however, slow algorithm 
execution since each fault initia-tes an I/0 data transfer. In (9) no provisions are made for limiting 
page faults: "the boundary surface grows at about the same speed on all sides" (pp. 131 (9)). A key 
contribution of this work lies in its abi-lity to reduce I/0 costs by finding all structure contours 
possible per plane automatically and en-tering planes less frequently than methods that do not restrict 
processing to planes-at-a-time. Additionally, the plane connection strategy used here can be used to 
automatically tally contour connections for surface building programs (11,18) that operate on multiple 
discrete objects. Our work is now directed to this task. Acknowledgments The author would like to thank 
the Memorial Hos- pital Medical Center Research Foundation of Long Beach, California, and Pfizer Medical 
Systems for their support. Thanks also go to Russell A. Brown for his programming and tutorials for the 
Evans and Sutherland Picture System 2. The aut- thor is grateful to Dr. William V. Glenn for his criticism, 
direction, and infectious enthusiasm. Early comments and suggestions from Allen Klinger (UCLA) are sincerely 
appreciated. Thanks also go to Phil Cohen and Robert Livingston (UCSD) and Michael Shantz (CalTech). 
References <RefA>I. Chow, C. K., and Kaneka, T., "Boundary De- tection of Radiographic Images by a Thresh. 
Method," IBM Report RG3203, December 1970. 2. Ausherman, D. A., Dwyer, S. J., and Lodwick, G. S., "Extraction 
of Connected Edges from Radiographs," IEEE Trans. Computers, C-21, 1972, pp. 753-758. 3. Ballard, D., 
and Sklansky, J., "Tumor De- tection in Radiographs," Comput. Biomed. Res. 6, 1973, pp. 299-321. 4. 
Carton, E., Weszka, J., Mohr, J., Rosenfeld, A., "Some Basic Edge Detection Techniques," Univ. Maryland 
Tech. Rep. TR-277, Dec. 1973. 5. Bullock, B., "The Performance of Edge Opera- tors in Images with Texture," 
Hughes Air. Co. Tech. Rep., Malibu, CA., Oct. 1974. 6. Frei, W., Chen, C. C~, "Fast Boundary De- tection: 
A Generalization and a New Al- gorithm," IEEE Trans. Comp., Vol. C-26, No. lO pp. 988-998. 7. Chien, 
Y. P., and Fu, K. S., "A Decision Function Method for Boundary Detection," Comp. Graphics and Image Proc., 
3, 1974, pp. 125-140.   8. Mazziotta, J. C., Huang, H. K., "THREAD (Three dimensional Reconstruction 
and Display) with Biomed. Applic. in Neuron Ultrastructure and Comp. Tomography~" Proc. Nat'l Comp. Conf. 
AFIPS 1976, Vol. 45, AFIPS Press, Montvale, N.J., pp. 241-250.  9. Liu, H. K., "Two-and-Three-Dimensional 
Boundary Detection," Comp. Graph. and Image Proc., 6, 1977, pp. 123-134.  lO. Cohen, P., Livingston, 
R., Sumners, R., Application Programs for Computer Graphics, "Dynamic Viewing of CT Image Data," 16-mm 
film, Roch Laboratories Inc., and the Neuroscience Department, Univ. Cal. San Diego, La Jolla, CA., 1978. 
II. Shantz, M. J., McCann, G. D., "Computational Morphology: Three-D Comp. Graph. for Elec. Microscopy," 
IEEE Trans. Biom. Enq., Vol. BME-25, No. l, Jan. 1978, pp. 99-I02. 12. Yakimovsky, Y., Cunningham, R., 
"On the Prob- lem of Embedding Picture Elements in Regions," Jet Prop. Lab. Tech. Report No. 33-774, 
Pasa-dena, CA., June 1976. 13. Rhodes, M. L., Glenn, W. V., Klinger, A., "Interactive Volume and Surface 
Iso. Using Tomogr. Data," Proc. San Diego Biom. Symp., Feb. I-3, 1978, pp. 403-411. 14. Rosenfeld, A., 
"Connectivity in Digital Pic-tures," J. ACM, Vol. 17, No. l, 1970, pp. 146-160. 15. Jackson, P. C., 
Intro. to Artificial Intel., Mason/Charter Pub. Inc., New York, 1974. 16. Nilsson, N. J., Prob. Solv. 
Methods in Art. Intel., McGraw-Hill, New York, 1971. 17. Winston, P. H., Artificial Intelligence , Addison-Wesley, 
Menlo Park, CA., 1977. 18. Fuchs, H., Kedem, Z. M., Uselton, S. P., "Optimal Surface Reconstruction 
from Planar Contours," Comm. ACM, Vol. 20, No. lO, Oct., 1977, pp. 693-702.  19. Denning, P. J., "Virtual 
Memory," Computin 9 Surveys, Vol. 2, No. 3, Sept. 1970, pp. 153-189.  Fig, 9a. Only One Seed provided 
to Test Algorithm Fig. 9b. Plane Shown Nith Intermediate Results III III illll Ill l IIIllI Fig. 9c. 
Contours Found by Re-entrance Test. Fig. 9d. Oblique View Of Phantom Contours.   </RefA>
			
