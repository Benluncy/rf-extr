
 An Approach for Modeling Dynamic Analysis using Ontologies Newres Al Haider and Paddy Nixon Benoit 
Gaudin Lero@UCD Lero@UL University College Dublin University of Limerick Dublin, Ireland Limerick, Ireland 
.rstName.lastName@ucd.ie .rstName.lastName@lero.ie ABSTRACT In this paper we present the possibility 
of using an ontol­ogy based framework in order to model Dynamic Analysis techniques. This work relies 
on similar ideas applied to the caseofStatic Analysis[22,28,27], inwhichontologiesare usedto represent 
someknowledgeabouttheprogramstobe analyzed. In the approach proposed in this paper we de­scribe how ontologies 
can be applied to Dynamic Analysis bymodelingboththeinformationcollected fromthesystem, as well as some 
requirements about the type of analysis to be performed. Both of these ontologies can be designed by 
integrating ontologiespreviouslyde.nedduring the software development cycle, allowing for re-usability. 
Finally, these ontologies makeitpossibleto reasonaboutconcepts related to Dynamic Analysis and o.er tools 
that facilitate automa­tion. This paper presents the main ideas of the proposed approach and illustrates 
them with an example related to Frequency Spectrum Analysis. 1. INTRODUCTION DynamicAnalysis(DA) is 
theanalysisoftheproperties of a running program [2]. This contrasts with static anal­ysis, which is done 
by analyzing software artifacts such as thecodeand thedocumentation,without executing thepro­gram. OneadvantageofDAisthatittakesintoaccountthe 
impact of the environmentinwhich theprogramis executed. This allows, for instance, to study runtime properties 
such as performance. Another advantage of DA over static anal­ysis isthatitdoesnot intend toanalyzeabsoluteproperties 
of the program, regardless of the inputs that will e.ectively be provided to it (see e.g. [16]). Instead, 
DA focuses on propertiesforagivensetofinputs. Thisallowstheanalysis to focus on speci.c parts of a running 
program, depending on the task at hand. DA techniques aim to analyze information collected from This 
work was supported, in part, by Science Foundation Ireland grant 03/CE2/I303 1 to Lero -the Irish Software 
Engineering Research Centre(www.lero.ie) Permission to make digital or hard copies of all or part of 
this work for personal or classroom use is granted without fee provided that copies are not made or distributed 
for pro.t or commercial advantage and that copies bear this notice and the full citation on the .rst 
page. To copyotherwise, to republish, to post on servers or to redistribute to lists, requires prior 
speci.c permission and/or a fee. WODA 2010Trento, Italy Copyright 2010ACM 978-1-4503-0137-4/10/07 ...$10.00. 
 a running program. There are various ways of collecting such information[9]. One method isby instrumentingthe 
source code with a number of probes, such as print state­ments, that indicate the various events to form 
a trace of the programs execution. Other techniques exist, such as collecting runtime information from 
the execution environ­ment. For example this information can come from a Java Virtual Machine, or from 
a debugger where the breakpoints are set in order to record various event occurrences. Algo­rithmsfortracecollectiontrytomaximizethe 
levelofdetail and completeness of the trace, while minimizing trace dis­tortion, i.e. how faithful the 
trace is to the actual execution of the program. These algorithms also need to be e.cient and their implementation 
must be as minimally intrusive as possible. The collected information can be represented in di.erent 
manners. The most basic one consists of using a text .le, where each line records the occurrence of a 
single event. This approach tends to lead to very large data. More complexmethods such as[18] aimto reducethesizeof 
that data. AlthoughDA techniquestackleproblems such assoftware testing[5], inferring and checking runtime 
constraints [4] and fault localization [19] in an automated way, some analysis of the collected data 
can still require human expertise. Exten­sive works on using dynamic analysis for program compre­hension(see 
e.g.[3])hasbeen conductedinordertofacilitate these tasks. However, human expertise is still repeatedly 
required to perform accurate analysis of the collected infor­mation. In this work, we propose an approach 
in order to overcome this issue by encoding into ontologies both infor­mation about the dynamic of programs 
(e.g. traces) and concepts considered for analysis(e.g. concept of frequency clusters). This approach 
aims to facilitate the automation of DA techniques. Similar approaches have been proposed, combining 
static analysis with ontologies, where ontologies have been used to enableprogram comprehension(e.g.[22,28]). 
These works aimto encode someinformation fromprogramcodeanddoc­umentationintoontologies.More recentlyin[27],ontologies 
are used in combination with static analysis in order to en­ablebugdetection. Thiscorresponds to encodingsomeanal­ysis 
requirements into ontologies. With similar intentions, the work in [11] focuses on the mining of business 
processes using ontologies. However the authors focus on the analysis of business processes rather than 
programs. Although re­cent works exist in dynamic analysis using semantic based techniquestoanalyzetraces[12],to 
ourknowledge,nowork exist on modeling both dynamic program information nor Figure 1: An example of a 
Pizza ontology. dynamic program analysis using ontologies. The rest of this paper is structured as follows: 
Section 2 presentsashortintroduction onontologies.Insection3,our proposed approach for automating Dynamic 
Analysis tech­niques with ontologies is introduced. Section 4 illustrates our approach with an example. 
Finally Section 5 discusses thelimitsof theproposedapproach aswell aspossiblefuture researches for its 
implementation on large scale examples.  2. BACKGROUND Inthiswork,weproposetouseontologiesasa framework 
to model and reason about information collected from soft­ware systems. In such an approach, ontologies 
are used to both represent the knowledge collected from the analyzed system, such as traces, as well 
as the knowledge needed to perform Dynamic Analysis techniques. In this section, we .rst introduce ontologies, 
illustrating their related concepts withexamples. Thenwedescribe someproperties and tools for ontologies. 
 2.1 Basics Ontology is a concept that originated from the .eld of philosophy, denoting the study of 
the kind of things that exist [1]. In computer and information science ontologies are used as a way to 
identify speci.c classes of objects and their relations between each other in a domain. An often cited 
de.nition is that an ontology is a formal speci.cation of conceptualization [6]. Here conceptualization 
not only representsobjects,concepts,and otherentitiesthat arepre­sumed to exist in some area of interest, 
but also the rela­tionships that hold among them. In [7], the author de.nes ontologies as a way to specify 
concepts, relationships, and other distinctions that are relevant for modeling a domain. The speci.cation 
takes the form of de.nitions of a represen­tational vocabulary (classes, relations, and so forth), which 
provide meanings for these concepts and formal constraints on their coherent use. In order to illustrate 
the concepts and relationships of an ontology we present an example of a simple Pizza ontology, inspired 
fromthe examplepresentedin[13]. This ontology is presented in Figure 1 and describes the domain of pizzas 
and their ingredients. As shown in this .gure, we describe apizza as a course that is composed of a base 
and toppings, wheredi.erenttypeofpossible toppingsarespeci.ed: meat, cheese, sauce and vegetables. The 
Pizza ontology encodesgeneral knowledge aboutpiz­zas and their components. It represents a pattern to 
which anypizzais meantto comply. In an ontology one cande.ne classes which refer to speci.c concepts. 
In the Pizza on­tology, these classes would correspond to Pizza, Toppings, Course,Base,Meat, etc. Classescanhaveahierarchy,which 
 Figure 2: The concept of Margherita pizza seen as a Pizza ontology instance. can be seen in the example 
through the relationship is a, which denotes that Pizza is the subclass of Course. The classes canalsobe 
connectedto each otheraswell as todata values through binary relationships called properties. Prop­erties 
representing relationships between classes are called object properties. The Pizza ontology uses the 
has a prop­erty to de.ne the relationship that a Pizza has a Base. A data property links a class with 
some data value, such as an integer. An example of a data property would be Size, de.nedby an integer 
indicating theSizeof thepizza incen­timeters. An ontology can be instantiated into a more speci.c ob­ject 
called ontology instance. This means we can de.ne a speci.c individual that is a member of a class. Figure 
2 showsapossibleinstantiationof the PizzaintoaMargherita pizza. AMargheritapizzaisthen an individual 
of the Pizza class. In addition a Margherita is a pizza with speci.c top­pings. This means that there 
are individuals for the classes cheese (mozarella) and sauce(tomato sauce) that relate to the Margherita 
pizza. Each of these individuals are linked to Margherita Pizza just as their classes are to Pizza. Fi­nally 
the individual Margherita Pizza has a data property that describes its diameter is 10 centimeters long. 
TheontologyshowninFigure1 representsoneof thepos­sible ways of describing some concepts and relationships 
re­lated to pizzas. For instance, a di.erent pizza ontology is describedin[13]. Evenassuming thatpeopleagreeonthe 
same underlying conceptualization (e.g. What is a pizza ? ) there can indeed be many di.erent representations 
of it as an ontology. 2.2 Features As described in [23], ontologies possess various features and using 
them o.ers many advantages. First, ontologies o.er means for formally describing con­cepts related to 
a domain, as well as relationships between these concepts. As shown in Figure 1, these formal descrip­tions 
can be obtained in a graphical way, easing the design of ontologies. This o.ers a good trade-o. in obtaining 
both formal but easy to write speci.cations. Ontologies help unify concepts from di.erent domains. For 
instance, certain concepts such as time can be de.ned for various domains. Time may then be described 
using di.erent ontologies. However, as the underlying concept of time is similar, it is possible to relate 
these ontologies to each other. Ontologies indeed o.er the means for describ­ing relationships between 
concepts introduced in di.erent ontologies. Specifying these relationships allows for exam­ple, to automatically 
merge di.erent ontologies. Merging facilitates integration and use of knowledge from di.erent sources. 
Finally, as ontologies are speci.ed in a formal way, they can also be used to perform automatic computation. 
For­malizing the domain knowledge explicitly allows for a for­mal analysis of its concepts. Some consistency 
checking can be done automatically by reasoners on an ontology and its instances. In the case of an ontology 
based on Description Logics,adecidable fragmentof.rstorderlogics,the reason­erscanderivecertainfactsin 
relatively e.cientpolynomial time. Examples of such operations include instance check­ing(e.g. is an 
individual a member of a certain class ? ), relationchecking(e.g. Doesapropertyholdbetweentwo individuals? 
), subsumption (e.g. Is a class/individual a subclass of some other ? )and others. More sophisticated 
reasoning features can be applied us­ing rule languages or additional programming. With rule languages, 
it is possible to de.ne rules to manipulate the objects of an ontology and use inference to automate 
rea­soning. By adding additional code, we can implement some automation on top of the ontologies. While 
in this case the automation of the whole process is hampered, we can still make use of the formal structure 
and reasoners available, thereby at least partially automating the reasoning tasks. In[10],the authorsexplainhowontologiescanbeusedin 
Software Engineering. This includes analysis, design, imple­mentation, deployment, runtime and maintenance. 
For in­stance,oneofthemostcommonuseof ontologies inSoftware Engineering is to describe concepts of database 
contents as well as their relationships. This allows to implement higher levelquerieswhereconceptscanbeused 
instead ofdatabase attributes. This is of particular interest when combining databases from several sources 
where attributes of similar concepts di.er. Inthisworkwepresentanapproach,which considersmak­ing useofSoftwareEngineeringrelatedontologiesinorderto 
perform some Dynamic Analysis. This approach is detailed in Section 3.  2.3 Tools One advantage of using 
ontologies to represent knowledge is the large number of tools available to help model rela­tionships 
between concepts as well as manage and use the collectedinformation. Dedicatedspeci.cationlanguagesuch 
asTheWebOntologyLanguage(OWL)allow forontology description (see e.g. [21]). OWL is a W3C standard that 
is available in a number of di.erent pro.les such as OWL-DL. OWL-DL is based on a decidable subset of 
.rst order logic, called description logic. This makes it possible to use ontology reasoners, such as 
RACER [8], hence enabling au­tomated reasoning. The ontology reasoning capabilities can beempoweredwiththeuseofrules.TheSemanticWebRule 
Language(SWRL) o.ers a way todescribe such rules(see e.g.[24]). MoreoverAPIsuch astheJavaOWLAPI[14] are 
available and make it possible to manipulate concepts of an ontology throughJavaprograms. Therealso existsavariety 
of ontology editors. One such editor is Prot´eg´e (e.g. [15]), which is used for the creation of the 
ontologies in Section 4. It allows for visual editing of ontologies, and is extendable throughpluginsthatallow 
for visualization([25]) and nat­ural language representation of ontologies ([17]). Finally, while manual 
creation of ontologies is possible, ontologies can be fully or partially learned given a certain dataset. 
This can be a helpful way to automatically bootstrap the creation of complex ontologies. OntoEdit is 
an example of such atool([20]).  3. APPROACH FOR APPLYING ONTOLO-GIES TO DYNAMIC ANALYSIS In this section 
we describe our approach, which combines dynamic analysis with ontologies. DynamicAnalysis aims to understandprogrambehaviorsby 
analyzing information collected during program executions. An example of such analysis is Frequency Spectrum 
Anal­ysis (FSA), which aims to understand the role of program functions called at runtime based on their 
frequency. Func­tion calls are monitored and a count of their occurrences is achieved. Analysis is then 
performed to interpret relation­ships between the obtained counts. The idea behind this approach is that 
the way functions relate to each other or to the inputs can be inferred through these counts. For in­stance, 
functions that are called as frequently as each other mayrepresent sequential treatments. Relationshipsbetween 
thenumberof callsof afunctionandthesizeoftheprogram input(e.g. a list) canhelpunderstandwhetherthefunction 
is called in a loop that iterates over the input elements. A set of such related functions is called 
a cluster in the FSA terminology. Dynamic Analysis techniques can be seen as composed of two di.erent 
phases. During the .rst phase, information aboutthesystemiscollected. Thisisusuallyperformedus­ing pro.ling 
or monitoring tools. The second phase then consists of analyzing the collected information. This phase 
can requiremanualintervention. In such acasethisphaseis preceded withsome.ltering step,which aimstopresentthe 
collected information in a more human readable way. For instance, visualization techniques have been 
widely studied in .elds such as Program Comprehension, in order to facili­tate human interaction with 
the information collected from programs. For example, considering FSA again, the collecting phase consists 
of monitoring and counting the function calls for a given program input. The analysis phase consists 
of deter­mining relevant clusters for speci.c frequencies and provid­ing conclusions from them. In this 
work, we propose an approach for modeling Dy­namic Analysis techniques, which both facilitates integra­tion 
of new requirements and brings automation into the analysis phase. Requirement integration is important 
as someof themodels tobeused may come fromotheranalysis techniques such asstaticanalysis(e.g.[28])butwouldneed 
to take into account knowledge related to program execu­tions. Automation requires to encode human knowledge 
and ex­pertise in a model which can then be interpreted by a com­puter. For this purpose, we consider 
ontologies as a means to model the analysis knowledge in Dynamic Analysis tech­niques. More speci.callyweproposeto 
modelthetwophases of Dynamic Analysis techniques each with an ontology. The structure of information 
collected from the system will be encoded into an ontology called System Information Ontol­ogy and part 
of the analysis phase will be encoded in an ontology called Analysis Requirement Ontology. For exam­ple, 
a System Information Ontology may describe the trace structure of a program and an Analysis Requirement 
On­tology may describe the notion of a cluster for Frequency Spectrum Analysis, i.e. sets of methods 
whose number of calls are related. An instance of such an ontology may de­scribe more speci.cally the 
cluster corresponding to meth­ Figure 3: An overview of the proposed approach ods whose number of calls 
are identical to the size of the program input. Figure3describes thegeneral approach wepropose inor­derto 
combineDynamicAnalysisandOntologiesandwhich is based on the combination of both System Information andAnalysisRequirementsontologies. 
Herewegiveawalk­through on how this approach will work. First the System Information Ontology is created 
in which thestructureof the runtimeinformationisdescribed. While the type of information might vary between 
applications, some common structures can be found. Consider, for in­stance, information such as execution 
traces. Although use casesand tracecollectiontoolsdi.er, eventssuch as method entry and exit, creation 
of objects, threads and their times­tamps are commonparts to most software trace. By specify­ing these 
concepts and their relationships in an ontology, we give a reusable structure in whichthis information 
from any execution trace can be contained. The System Information ontology may result from the merging 
of several ontologies [26]. These can come from the domain of software engineer­ing [10], or even from 
the collected result of static analysis [22]. By combining more relevant knowledge the eventual analysis 
can be made easier and more accurate. The runtime system information can be collected through a setofprogram 
executionsortests. With thecollectedinfor­mation, the System Information Ontology can then be in­stantiated 
intoaSystemInformation Ontologyinstance. For example such an instance can represent the encoding of an 
execution trace or system variable values, etc. The System Information Ontology represents a pattern 
to which these instances must comply. The instances themselves result from program monitoring information 
that is being trans­lated into the structure of the ontology(in most cases using a parser). TheAnalysisRequirementOntology 
anditsinstances rep­resent knowledge about the analysis and requirements the System Information Ontology 
has to ful.ll. Once the Anal­ysisRequirementOntologyhasbeen createditcouldbe eas­ily reused to make similar 
analyses possible. Depending on the type of analysis we intend to do even the ontology in­stancescanbe(partially) 
reusedbetween di.erentapplica­tions. This allows us to automate the analysis for multiple applications 
through a single ontology. Animportantaspectwhen creatingeitheroftheseontologies and their instances 
is the use of the reasoner to automati­cally check whether an ontology instance is consistent with the 
ontology. The reasoner can indicate that an individual of the trace instance is de.ned in contradiction 
to the ontol­ogy,for exampleifitbelongstotwodi.erent classesthat are meant to be disjoint. This shows 
that either the trace infor­mation that has been parsed is wrong or that our model is incapable of dealing 
with the input. Recognizing these facts before the analysis can save a lot of time and e.ort. WithboththeSystemInformation 
Ontology andtheAnal­ysis Requirement Ontology available, in addition to their instances, we can perform 
the actual analysis. At its most basiclevel theanalysisis similar tothe consistencychecking done previously. 
We check wether the collected information (the instances) .t the structure we de.ned for it (the on­tologies). 
This task can be performed automatically using the reasoning capabilities that come with using ontologies 
and that are described in Section 2, through reasoners. As shown in Figure 3, automatic reasoning can 
be applied to both system Information and Analysis Requirement ontol­ogy instances in order to perform 
such automatic analysis of the collected information. The reasoner can indeed be usedtocheck whichSystemInformationOntologyinstances 
actually ful.ll the requirements expressed in the Analysis Requirement Ontology instance. For instance, 
considering FSA again, an Analysis Requirement Ontology instance can be designed in order to automatically 
determine whether some methods in a Trace Ontology instance (corresponding here toatypeofSystemOntologyinstance)havebeencalled 
anumberoftimeequal tothe sizeof theprograminput from which the trace instance was generated. However,evenwithverydetailedde.nitionsandinstances, 
not all analysis can be strictly performed through the rea­soner and ontology alone. Analyses can be 
too complex or too general for this. However this can be overcome by adding rules to the ontology or 
by writing small additional programs,asdescribed inSection2. Whilewehaveto forfeit decidability for these 
cases, the reasoning is still more auto­matedthanbeforethrough the continueduseofthe reasoner and the 
use of the formal structure of ontologies. Finally the proposed approach provides models of both program 
and analysis concepts that are generic and can be reused for further analyses. Moreover these models 
ease the imple­mentation of dynamic analysis by working at a conceptual level. InSection4wedescribe theproposedapproach 
of thissec­tion through an example. Theprogram under consideration is a basic text editor and the analysis 
performed is part of a Frequency Spectrum Analysis: cluster identi.cation. This example in particular 
illustrates how the manual interven­tion requiredforanalysisisfacilitatedwith theintroduction of ontologies. 
 4. EXAMPLE In order to illustrate the approach proposed in Section 3 we consider an example of a basic 
text editor application, called SimpleTextEditor. It is a single class application implemented in Java. 
SimpleTextEditor possesses various Stringmanipulation methods,mostly relying onthejava.lang .String class. 
In this example, our purpose is to perform some dynamic analysis on simpleTextEditor. To this aim, we 
collect traces from the program using test cases as well as the java.util .logging.Logger class and statements 
inserted in the source code. Thefollowingisa sampleof the rawtraceinformation that is collected: 3:25:56 
BasicSimpleTextEditor BasicSimpleTextEditor FINER: RETURN 3:25:58 BasicSimpleTextEditor setText FINER: 
RETURN 3:26:00 BasicSimpleTextEditor addString FINER: ENTRY 3:26:02 BasicSimpleTextEditor addString FINER: 
RETURN To use and analyze the trace information we created three ontologies. A Program Ontology: (Figure4). 
Thisispartof theSys­temInformationOntology such asdescribedinSection3.It representsthe structureof informationthatcouldbegained 
by using static analysis ontheprogram code. Itdescribes a small subset of possible program constructs 
in Java, in par­ticular those such as methods and objects. A Trace Ontology: (Figure 5(a)). This is also 
part of the System Information Ontology such as described in Sec­tion3. Itrepresentsthestructureofinformationinthe 
trace. It contains, among others, the concepts for method entry, method exit and object initialization, 
which are needed to represent the trace. It also de.nes relationships between these concepts, such as 
method calls. An Analysis Requirements Ontology: (Figure 5(b)). This is an Analysis Requirement Ontology 
as described in Section 3. It describes the structure of a small number of requirements that can be set 
in order to perform dynamic analysis. In particular it describes requirements regarding durationand frequenciesof 
eventstobede.ned. Inthecase of performing FSA for cluster determination, only frequen­cies individuals 
are of interest. In order to apply FSA clustering techniques on this ex­ample, instances are derived 
from the three ontologies pre­viously mentioned. First aninstanceofthe ProgramOntologyisderivedbased 
on static analysis of the program code. This instance con­tains each of the methods found in the SimpleTextEditor 
Java class. Then an instance of the trace information is de.ned. In order to achieve this, we combined 
the Program Ontology with the Trace Ontology. This is done using properties which, as explained in Section 
2, connect concepts to each otherthroughbinary relationships. Forinstance,theMethod Event conceptofFigure4hasaproperty 
linking tothecon­cept Method described in Figure 5(b). For clarity, proper­ties are not displayed in 
the .gures of this example. This combined ontology enables us to express the raw trace in­formation in 
both Program-and Trace Ontology concepts. For example,whena MethodEntry eventindividualiscre­ated, it 
references the method relating to the event through the use of (object-)property relationships. Similar 
links are made between trace events themselves, the String parame­ters that are denoted in the trace 
and the timestamp values and other concepts. This way the semantic links between these concepts are represented 
fully in the new ontology in­stance. Finally we created an instance of the Analysis Require­mentsOntology. 
Thisdescribesspeci.cclusterrequirements wheretwopropertiesdenotethe lower-andtheupperbound frequencies 
of the cluster. We intend to use this frequency requirement to .nd the set of methods that has been called 
with a frequency that .ts within the bounds of the cluster. Thespeci.cintegersfortheboundscanbederived 
fromdif­ferent ways. In this example, we just looked for clusters of methods that were called between 
15 and 20 times. Using thepreviouslyde.ned ontology instances, theanal­ysisitselfcanbeperformedby writing 
asmallpieceof code tocollect and match the frequencieswiththeclusterbounds and give the results. Collecting 
and matching this informa- Figure 4: A Trace Ontology  (a)A Program Ontology (b)Analysis Requirement 
Ontol­ogy Figure 5: Program and Analysis Requirement On­tologies tion from the ontologies is relatively 
trivial using the Visi­tor pattern and the Java OWL API. We implemented and applied this analysis to 
our example. With an input text containing less than 10 characters, it resulted in a cluster containing 
addString and setText methods of the Simple-TextEditorprogram. Thisclusterindicatesforinstancethat thesetwo 
methodsmight notbecalledinaloop thatiterates over all the characters of the input text. Whilethisisaverysimple 
example,bothinthe sizeof the traces and thetype ofproperties analyzed, similarproblems can occur on a 
much larger scale that can be tackled with similar use of ontologies. Thisexampleshowshowpartsof DynamicAnalysistech­niques 
can be modeled with ontologies. One bene.t of con­sidering ontologies in this example is that they are 
reusable. Performingsimilar,or evendi.erent,typesofanalysisonthe SimpleTextEditorprogramwouldonly requirethede.nition 
of a new instance of the Analysis Requirement Ontology. An instanceconsideringperformanceaspectsof theprogram 
could be designed using the Time Requirement concept de­scribed in the Requirement Analysis ontology. 
Of course, onlyconcepts relatedtothethreeontologiesdescribedabove can be used for analysis here. However, 
another bene.t of using ontologies is that they can be augmented by combi­nation. In this example, the 
Trace and Program ontolo­gies are combined in order to relate concepts from both the static and dynamic 
parts of the program. Using the same approach, other Requirement Analysis ontologies may be designed 
or some existing software engineering ontology couldbeused. Combinedwith theoneshowninFigure5(b) these 
new requirement ontologies may allow for more ex­pressive and complex analyses. Moreover, ontologies 
allow for high level and formal descriptions of concepts. This fa­cilitates the design of analysis requirements 
for non DA ex­perts while ensuring formal descriptions. This is of great interest as their formal aspect 
is a requirement to analy­sis automation. Finally, ontologies represent a well studied frameworkand numeroustools 
enabling theiruseanddesign areavailable.AsimplementedDA techniquesand toolsmay currently use di.erent 
languages and formats, the ontology framework represents an interesting candidate to utilize for some 
standardization in the DA community. 5. CONCLUSION AND FUTURE WORK This work presents an approach for 
modeling Dynamic Analysis techniques using ontologies. It resides on a similar idea recently applied 
to Static Analysis. To our knowledge, no approaches have combined Dynamic analysis with On­tologies yet. 
In this document, we .rst describe ontologies andtheir tools,thenweintroduceourproposedapproachfor modeling 
Dynamic Analyses techniques with ontologies and explain how the automatic reasoning features of ontologies 
may be applied to automate some parts of the analysis. We illustrate our approach with an example based 
on clustering in Frequency Spectrum Analysis. Although this example presents the main points of our approach, 
it is still limited in size and scope. As future work, we will consider extend­ing theontologiesto moregeneral 
and reusableonessothat more complex information and analyses can be considered. As a .rst step, we will 
focus on de.ning ontologies for pro­gram traces and the corresponding analyses, both manually and using 
automated ontology building techniques.  6. REFERENCES <RefA>[1] Grigoris Antoniou, Enrico Franconi, and Frank 
van Harmelen. Introduction to semantic web ontology languages. In Norbert Eisinger and Jan Malluszy´nski, 
editors, Reasoning Web, Proceedings of the Summer School, Malta, 2005, number 3564 in Lecture Notes in 
Computer Science, Berlin, Heidelberg, New York, Tokyo, 2005. Springer-Verlag. [2] Thomas Ball. The concept 
of dynamic analysis. In ESEC/ SIGSOFT FSE, volume 24, pages 216 234, New York, NY, USA, 1999. ACM. [3] 
Bas Cornelissen, Andy Zaidman, Arie van Deursen, Leon Moonen, and Rainer Koschke. A systematic survey 
of program comprehension through dynamic analysis. Technical Report TUD-SERG-2008-033, Delft University 
of Technology, 2008. [4] M. S. Feather, S. Fickas, A. van Lamsweerde, and C. Ponsard. Reconciling system 
requirements and runtime behavior. In Proceedings of the 9th International Workshop on Software Speci.cation 
and Design, pages 50 59, 1998. [5] Patrice Godefroid. Compositional dynamic test generation. In POPL 
07: Proceedings of the 34th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages, 
pages 47 54, New York, NY, USA, 2007. ACM. [6] Thomas R. Gruber. Toward principles for the design of 
ontologies used for knowledge sharing. Int. J. Hum.-Comput. Stud., 43(5-6):907 928, 1995. [7] Tom Gruber. 
Ontology, entry in the encyclopedia of database systems, 2009. [8] Volker Haarslev and Ralf M¨ oller. 
Description of the racer system and its applications. In Carole A. Goble, Deborah L. McGuinness, Ralf 
M¨ oller, and Peter F. Patel-Schneider, editors, Description Logics, volume 49 of CEUR Workshop Proceedings, 
2001. [9] Abdelwahab Hamou-Lhadj and Timothy C. Lethbridge. A survey of trace exploration tools and techniques. 
In CASCON 04: Proceedings of the 2004 conference of the Centre for Advanced Studies on Collaborative 
research, pages 42 55. IBM Press, 2004. [10] Hans-J¨org Happel and Stefan Seedorf. Applications of ontologies 
in software engineering. In International Workshop on Semantic Web Enabled Software Engineering (SWESE 
06), Athens, USA, November 2006. [11] M. Hepp and D. Roman. An ontology framework for semantic business 
process management. Proceedings of Wirtschaftsinformatik, 2007, 2007. [12] Kevin J. Ho.man, Patrick Eugster, 
and Suresh Jagannathan. Semantics-aware trace analysis. SIGPLAN Not., 44(6):453 464, 2009. [13] M. Horridge, 
H. Knublauch, A. Rector, R. Stevens, and C. Wroe. A practical guide to building owl ontologies using 
prot´eg´e 4 and co-ode tools edition 1.2. Technical report, University of Manchester, 2009. [14] Matthew 
Horridge and Sean Bechhofer. The owl api: A java api for working with owl 2 ontologies. In OWLED, 2009. 
[15] Matthew Horridge, Holger Knublauch, Alan Rector, Robert Stevens, and Chris Wroe. A practical guide 
to building owl ontologies using the protege-owl plugin and co-ode tools edition 1.0. August 2004. [16] 
Daniel Jackson and Martin Rinard. Software analysis: a roadmap. In ICSE 00: Proceedings of the Conference 
on The Future of Software Engineering, pages 133 145, New York, NY, USA, 2000. ACM. [17] Kaarel Kaljurand. 
ACE View An Ontology and Rule Editor based on Controlled English. In Christian Bizer and Anupam Joshi, 
editors, Proceedings of the Poster and Demonstration Session at the 7th International Semantic Web Conference(ISWC2008), 
volume 401. CEUR Workshop Proceedings, 2008. [18] James R. Larus. Whole program paths. SIGPLAN Not., 
34(5):259 269, 1999. [19] Ma lgorzata Steinder and Adarshpal S. Sethi. A survey of fault localization 
techniques in computer networks. Science of Computer Programming, 53(2):165 194, 2004. Topics in System 
Administration. [20] A. Maedche and S. Staab. Ontology learning for the semantic web. Intelligent Systems, 
IEEE, 16(2):72 79, Mar-Apr 2001. [21] D.L. McGuinness, F. Van Harmelen, et al. OWL web ontology language 
overview. W3C recommendation, 10:2004 03, 2004. [22] W. Meng, J. Rilling, Y. Zhang, R. Witte, and P. 
Charland. An ontological software comprehension process model. In Proc. of the 3rd International Workshop 
on Metamodels, Schemas, Grammars, and Ontologies for Reverse Engineering, Italy. Citeseer, 2006. [23] 
Natalya F. Noy and Deborah L. mcguinness. Ontology development 101: A guide to creating your .rst ontology. 
Online, 2001. [24] M. O Connor, H. Knublauch, S. Tu, B. Grosof, M. Dean, W. Grosso, and M. Musen. Supporting 
rule system interoperability on the semantic web with SWRL. The Semantic Web ISWC 2005, pages 974 986. 
 [25] M.A. Storey, M. Musen, J. Silva, C. Best, N. Ernst, R. Fergerson, and N. Noy. Jambalaya: Interactive 
visualization to enhance ontology authoring and knowledge acquisition in Prot´eg´e. In Workshop on interactive 
tools for knowledge capture. Citeseer, 2001. [26] H. Wache, T. V¨ogele, U. Visser, H. Stuckenschmidt, 
G. Schuster, H. Neumann, and S. H¨ubner. Ontology-based integration of information -a survey of existing 
approaches. pages 108 117, 2001. [27] Lian Yu, Jun Zhou, Yue Yi, Ping Li, and Qianxiang Wang. Ontology 
model-based static analysis on java programs. In Computer Software and Applications, 2008. COMPSAC 08. 
32nd Annual IEEE International, pages 92 99, 28 2008-Aug. 1 2008. [28] Yonggang Zhang. An Ontology-based 
Program Comprehension Model. PhD thesis, Concordia University, 2007.  </RefA>
			
