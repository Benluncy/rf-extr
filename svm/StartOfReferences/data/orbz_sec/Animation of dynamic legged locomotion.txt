
 Animation of Dynamic Legged Locomotion 1 Abstract This paptr is about the use of rent rol algorithms 
to an­inlate dynamic legged locomotion, (. ontrol could free the animator from specifying the details 
of joint and linlh motion whilt producing both physically realistic and natural-looking results, \$ e 
implemented computer animations of a biped robot, a quadruprd robot, and a kangaroo. tar-b crwaturc was 
modelrd as a linked set of rigid bodies wit b compliant actuators at its joints. (. on­t rol algorithms 
regulated the running speed, organized use of tht legs, and maintained halauce. All motions were generated 
by numerically integrating equations of motion cieri~ed from the physical models. The rwult­ing hehayior 
included running at various speeds, trav­eling with several gaits (run, trot. hound, gallop, and hop], 
jumping, and traversing simple paths, Whereas the us~ of control permitted a variety of physically re­alistic 
animated ht, havior to he generated with limited human intcrv(,ntion, the process of designing the con­trol 
algorithms was not automated: the algorithms were t wealmd and adjusted for oar-h nrw crest ure. Key 
Words and Phrases: computer animation, motion control. legged locomotion. robotics, dynamical simulation, 
physically realistic modeling. 2 Introduction An important goal of computer graphics is to generate physically 
realistic animation of frcfrraltti s,ystcwts, Ac­tuate(i sjstem.s are those that use muscles, motors, 
or some other kind of actuator to convert stored energy into time-varying forces that act within the 
system s Inrchanical structurv. Animals, robots, and vehicles are examples of actuated systems. Actuated 
systems r-an creatr their own motions when asked to perform a task, often without help from an outside 
agent. WP distin­guish act uatwl systems from passive physical objects: hot b can Inove with physical 
realism. but only actuated Permission m copy wirhour fee all or part of this marerial is granted provided 
thar Ihe copies are not made or distributed for direct commer cudadvanrage, rhe ACM copyright notice 
and the title of the publication and its dare appear, and notice is given that copying is by permissmn 
of the Association for Computing Machinery. To copy otherwise. or m republish, requires a fee mrd/or 
specific permission. systems can power an(l regulate t heir own motions. A key step in animating actuated 
systr>ms is to for­mulaie control algorit bms t hat t ransforrl] rxprcssions of desired behavior into 
detailorl actuator control sig­rlals that Pi_Odlr CC tbl rll Cl SSar~ rl)CJtlc)rl. 1 biS St(>ff ~all 
he c{uite challenging hwausc tht, relationship Iwtww,r] task and motion is usually itldirect. I)rsirrri 
twhavior is t~pica]]y ( X[)r( ss{>(flat a timo S~a]f) Ml{] II] it fOCJrd­nate system associated with 
the task, whertas actuatc~r control signals operate in thr coorclinatf~ systerrl anfl at the time scale 
of tbr nwcbanical syst(, rt]. For [,xarnpl(,, tb( dmreri behayior Rllrl forward at Y rll/s using trotting 
gait does little to specify how the bi~) jolrlf on leg 2 should move at various times throughout t II(> 
locomotion cycle. In legged locomot icm t be t ransforma­tion from task specification to actuator specification 
is central, in that motions of the legs and feet are only intermittently rclate(l to the hasir flrnctional 
goals c]f providing support, stability, and propulsion. A second reason that control of actl]ated systems 
is challenging is the prfwnf-r of significant system dynamics. In dynamic systems tbe forces and torques 
exerted hy the actuators on the nw, cbanism arc jl]st one of the factors that influence th(> movement, 
Energy stored. recovered, and excbangcd among t be various mechanical components of the system and external 
forces influence t be present and fut Ilrc mot ion of the system. The control algorithms nl(lst anticipate 
the response to actuation in the context of tb~> ongoing activity. In a fast-moving legged system. for 
exan~ph,, kinetic energy stored in t hr rot at ior] of t h,-leg can be large compared to the energy in]rttediat 
ely avai]ah]e from tht~ hip actuators. If the rontrol algoritbnls at-, to swing t ho leg forward soon 
enol]gh to place, t b[, foot for the next step, they mllst begin reversing the leg s motion early in 
the cycle. Each mass, moment of inertia, and compliant olrrnent in the system storm energy that might 
influence behavior. In most cases it is not correct to think of the control as provi{ling .cornrnan[]s 
 to the mechanism tbrougb tht, actuators. 1 be control ir]l)(]ts are more like suggest ions t bat rnl]st 
tw rwonciled wit b the dynamic state and strllcture of tht, systt=m. \Vhereas tbc difficulty of achieving 
rontrol of dy­namic systems poses certain prohlf ]]ls, the system dy­namics also present opporturrit 
im. For instance. the ACM -0-89791 -436-S/9 VfH17/0349 $0075 349 tally by the control system in concert 
with the dynamic model. Mc t(enua and Zeltzer s work on an animated cor-k­roach fully embracetf the idea 
that numerical integra­tion of a tfynamic model could he used to generate all motions of an animated 
creature, and that the control algorithms could influence behavior only through forces exerted by the 
actuators [10]. They implemented a dy­namical model of t.hr= cockroach, and relied on a con­trol systcm 
to pattern its motion. Their cockroach had springy legs, so the load of the body was distributed on the 
support, legs. The walking algorithms they used were based on motion patterns that have been observed 
in insect, locomotion. Mc Kenna and Zeltzer s work is closely related to our own, in that we too rely 
on br­havior of the dynamical model for all motion generation and restrict human intervention to specifying 
desired behavior to the control. Our work differs from theirs in the sort, of locomotion studied and 
the nature of the control algorithms: they concentrated on statically sta­ble multi-legged walking, while 
wc focus on running and jumping with a ballistic flight phase, and on thr role of the springy leg in 
generating the running cycle. Optimization techniques and modern control the­ory offer the hope of automatically 
producing control systems by specifying task constraints or optimization functions. Witkin and Kass used 
their spacetirne ap­ proach to produce a remarkable animation of a dynamic lamp [18]. Panne, Fiume, 
Vranesic used techniques from modern control theory to allow the lamp to perform a flip [15]. The potential 
gent=ralit y of these approaches and their ability to deal with anticipation makes them among the most 
interesting new methods for anima­tion of dynamic systems. The potential liability is the growth of thr 
search spaces when applied to more conl­plex systems. Girard and Maciejewski do not use numerical in­tegration 
of physical models, but rely instead on rules associated with dynamics [4, 5]. For instance, they pro­grammed 
a sinusoidal vertical motion of the body to approximate the motion of a maswfrrl body bouncing on springy 
Irgs. They coordinated the joints of their hu­man figures to km-p the center of mass over the support 
feet, as required for balance. These techniques resulted in some of the best looking animation of legged 
loconm­tion that. we have seen.  Animation, Control, and Modeling Figure 2 shows the general process 
we use for animation. The user provides the control system with information about the desired animated 
behavior, such as speed, gait, path, rtc. The user also initializes the legged mode] by placing it in 
a particular state. Once the animation is started, the control algorithms are responsible for stabilizing 
posture, maintaining the locomotion cycle, controlling speed and direction of travel, and regulating 
the behavior of the joints. Because the control is able to coordinate the lower levels of behavior for 
a task, the animator is free from direct involvement in specifying the joint torques or the details of 
the actual movements, Computer Graphics, Volume 25, Number 4, JUIV 1991 rhe three legged models are 
shown in Figure 1. Two of the models are patterned after physical robots that wc built and use for laboratory 
exprrinwnts. One robot model is of a biped with telescoping legs anti ball­joint hips. 1 he other robot 
model is of a quadruprri with telescoping legs and gimbal hips. The third model is a simplified version 
of a kangaroo. [t is simplifirvf in that it is planar, has one leg and arm instead of two, and it has 
fewer links in the tail than the animal. A total of six gaits were implemented and tested: hiprd running 
and galloping, quadruped trotting, hounding. and galloping. and kangaroo hopping. A II of thrwr gaits 
arc technically classified as running, because they include at least one I 1 desired behavior (w) forces 
and torques (f) control m model P------, I numerical I ~integrator state (x, x) ______-1 graphic 
  Un-1 I Figure 2: Block diagram of animation process The model consists of equations of motion for 
the rigid bodies of the legged system, actuator and sensor models, force equation+ for ground-interaction, 
and a numerical integrator that produces motion as a function of time. The model calculates its behavior 
once every integration interval, 0.0004 s. The control calculates the forr-e or torqur ttr be exerted 
h! each actuator based on the current state of the model, X, X and the user input W. The control calculation 
is done every control interval, which is usually a few MS. Thr human animator specifies desired behavior 
W, which consists of desired running speed, the path along which to travel, artd any event information, 
such as when and how high to jump. The animator specifies his or her input before the animation process 
begins. Jn the current implementation, the animator must also initialize the state of the model. flight 
phase per cycle, a period when all feet leave the ground at the same time. Control [n this section we 
describe the control algorithms used for animation of running. A control system for running must perform 
three primary functions . cause the legs to step, exchanging support. . provide balance to regulat,e 
the running speed, and  . maintain the body in an upright posture.   These three functions can be 
called hopping, speed conirol, and posture control. Hopping Control An idea that developed in biomechanics 
over the last fifteen years is that animals use elastic structures in their limbs to improve the energetic 
efficiency of their locomotion. Tendons and ligaments in the legs and feet stretch during each collision 
with the ground, converting some the system s kinetic energy into elastic strain energy. The stored energy 
is returned during the next step, when the elastic structures rebound. A significant fraction of the 
tdai running energy, perhaps 20% to 40(Z, recirculates from one step to the next, without needing resupply 
from the muscles. Kangaroos use their substantial Achilles tendons to perform this energy recovery function 
whereas Alexander argues that humans store energy in their Achilles tendons and the ligaments that support 
the arch of the foot [1]. Compliant legs and feet also reduce peak loads that occur in running when the 
feet strike the ground at the end of each flight phase [11, 1]. We use compliance in the legs to produce 
the vertical oscillations needed in running. The control algorithms allow the mass of the body to rebound 
on the springy leg during ground collisions and to be drawn back to earth by gravity during the flight 
phase. The biped and quadruped legs were made springy with spring-damper actuator models for the telescoping 
joint. The kangaroo leg was made springy by modeling the ankle actuator as a torsional spring-damper 
with adjustable rest length. Both actuator models have the form f=k(x-.rr)+bi (1) where j is the actuator 
force, k is the spring constant, b the damping constant, x the spring length, and Zr the spring rest 
length. Control of the spring rest length is used to inject or remove energy from the system in order 
to initiate the oscillation. modulate it, or stop it. For vertical hopping with a rnassless leg, the 
altitude of a particular hop is predicted by the sum of the potential strain energy in the leg spring, 
the potential energy of elevation of the system mass, and the kinetic energy due to motion of the body 
h= (PE.,.a, n + PE=,evO,,on + Ii E)/,Wg (2) where h is the expected altitude of the hop, M is the system 
mass, and g is the acceleration of gravity. The control system can inject or remove energy to influence 
this outcome. This hopping control mechanism takes advantage of the dynamic interaction between the me­chanical 
system and the control to generate the motion. No trajectory is specified. Speed Control Legged systems 
are like inverted pendulums: they tip and accelerate whenever the point of support is t neutral pant 
Figure 3: When the foot is positioned at the neutral point, the body travels along a symmetric path that. 
leaves the sys­tem unaccelerated in the forward direction. Displacement of the foot from the neutral 
point accelerates the body by skew­ing the symmetry of the body s trajectory. When the foot is placed 
closer to the hip than the neutral point, the body accelerates forward during stance and the forward 
speed at liftoff is higher than the forward speed at touchdown (left). When the foot is placed further 
from the hip than the neutral point, the body decelerates during stance and the forward speed at liftoff 
is slower than the forward speed at touch­down (right). Horizontal lines under each figure indicate the 
distance the body travels during stance, and the curved lines indicate the path of the body. displaced 
from the projection of the center of mass [6]. If the average point of support is kept under the average 
location of the center of mass, the system may tip for short periods, without tipping over entirely. 
One way to achieve such a balancing relationship between the feet and the center of mass is to move the 
body in a symmetric fashion over the supporting feet during each support period. When the control system 
places the foot to obtain a symmetric sweeping pattern, the forward speed will remain the same at liftoff 
as it was at touchdown. We call this position of the foot the neutral point. When the control system 
displaces the foot from the neutral point, the body accelerates, with the magnitude and direction of 
acceleration related to the magnitude and direction of the displacement, as shown in figure 3. The control 
system displaces the foot from the neutral point by a distance proportional to the difference between 
the actual speed and the desired speed, The control system computes the desired foot position as: y+k.(i 
id) fh, d = (3) where .r,~,~ is the forward displacement of the foot from the projection of the center 
of gravity, i is the forward speed, i. is the desired forward speed, T, is the predicted duration of 
the next support period. and k, is a gain. The first term of equation 3 is an estimate of the neutral 
point and the second term is a correction for any error in forward speed or for a desired acceleration. 
The duration of the next support period is predicted to be the same as the measured duration of the previous 
support period. After the control system finds x,~,~, a kinematic transformation determines the joint 
angles that will position the foot as specified. Fl,ghl-B 3\  L,fmff ~own udoa&#38;B u  Stale .Actions 
FLIGHT Active leg leave+ Interchange active, idle legs ground Lengthen active leg for landing Position 
active leg for landing Shorten idle leg I.O.AI)JY(; .Artiv~ kg touches Zero active hip torque ground 
Keep idle leg short ( OMPRESS1ON Active leg spring Servo pitch with active hip short t,us Keep idle leg 
short THRITST Active leg spring Extend active leg Imrgt hens Servo pitch with active hip Keep idle leg 
short ITNLO.ADIN( : Acti~e leg spring Shorten active leg approaches full Zero hip torques active leg 
leugt h Keep idle leg shorl Figure 4: Finite state machine that coordinates running. The state shown 
in thr left column is entered when the sensory (,vent, listed just below the state name. occurs. Actions 
arc listed on the right. The cent roller advances through Ihe states in sequence. The diagram is for 
a two-Ieggcd gait. Posture Control t)epeucfing on the number of legs. the gait, and whether there is 
a tail, the trunk may pitch and roll during running. [he long-term attitude of the trunk must be st abilizt=d 
if the system is to remain upright. The control system W(J implemented regulates the orientation of the 
trunk by applying torques to the body during the support phase. In the biped and quadruped models, tbe 
hip actuators are ust=d to apply the torques required for attitudt= control. lU the kangaroo model, the 
knee is used t o perform this fuuct ion. Vertical loading on t be feet keeps the leg from slipping when 
the torque is applied, The post ure control torques are generated by a linear servo: 7-= k, (o 0,) 
k (i) (4) Computer Gra~hics, Volume 25. Number 4. Julv 1991 where T is the leg torque, @ is the angle 
of the body, @d is the desired angle of the body, ~ is the angular rate of the body, and k,, kv are gains. 
The control systems for running use separate algo­rithms for stabilizing hopping, forward speed. and 
pos­ture of the trunk. Each of these parts of the control acts independently, as though it influences 
just one comp~  &#38;iiiifizNOsup nent of the behavior. Interactions due to imperfect de­ coupling 
are treated as disturbances. This decoupling simplifies the control implementation. In addition to the 
control algorithms described so far, each implementation uses a finite state machine to track the ongoing 
behavior of the model, to synchronize the control actions to the running behavior, and to do some bookkeeping. 
Figure 4 shows a state machine for the biped. Gaits We implemented a total of six gaits: biped running 
and galloping; quadruped trotting, bounding, and galloping: and kangaroo hopping. The running algorithms 
for all six gaits are based on control originally developed for one-legged hopping. For each gait we 
tailored the state machine to cycle through the legs in the correct order and to invoke suitable versions 
of the algorithms that distribute the load among the support legs. Bipedal runuing is like one-legged 
hopping. except there is an extra idfe leg, in addition to the active leg. The idle leg is kept short 
and out of the way while the active leg performs the functions described earlier to control forward speed. 
hopping height, and balance. The state machine for bipedal running is shown in figure 4. In quadruped 
trotting and bounding, the legs are coordinated to work together in pairs. The coordination we used makes 
each pair of legs act collectively like a single leg, called a mrfual leg. The members of each pair strike 
the ground in unison and leave the ground in unison. Diagonal legs form pairs in trotting and front legs 
and rear legs form pairs in bounding. One can think of these quadruped gaits as rtrtual btperf gait,s. 
with the active pair of legs providing support while the idle pair swings forward in preparation for 
the next step. The higher levels of the control system ignore the individual physical legs, pretending 
to do biped control on the two virtual legs as described earlier. Quadruped galloping is similar to bounding 
exc~pt that the legs of the front and rear pairs no longer strike and leave the ground in perfect unison. 
The stance phase is composed of a single support phase, a double support phase, and then a second single 
support phase. The legs are positioned on the ground with a separation both in time and space. The stance 
phase is extended and the legs of each pair share the work of rebounding the body. Biped galloping is 
similar to quadruped galloping in that the two stanr-e legs share a single support phase. We implemented 
two styles of bips=d galloping. In one style the legs swing forward together during the flight phase. 
In the other style they swing forward independently during the other leg s 3s3 single support phase. 
The first style produces a motion that is similar to the front half of a galloping horse while the second 
is closer to the pattern used by galloping humans. Pitching of the body in response to swinging of the 
legs is greatly reduced in the second form of galloping. Kangaroo cent rol Control algorithms for the 
kangaroo were essentially the same as for the robot models, with additional provisions for coordinating 
the joints of the articulated leg and for moving the tail. Kangaroos have legs with rotary joints. In 
the kangaroo model we eliminated the toe joint, leaving an ankle, a knee, and a hip, all of which have 
axes perpendicular to the sagittal plane. We made several decisions that constrained the behavior of 
the leg and allowed us to program it using methods originally developed for robot telescoping legs. We 
decided to use the ankle joint as the primary energy storage element in the leg. We assumed that the 
ankle actuator consisted of a spring-damper mechanism with an adjustable zero spring length. This mechanism 
models a muscle acting in series with a springy Achilles tendon. We adjusted the spring and damper character­istics 
so that a significant fraction of the energy stored in the spring during leg compression was returned 
dur­ing leg extension. We decided to configure the leg so the ground re­action force generated during 
hopping passes approxi­mately through the knee. This configuration minimizes the moment required at the 
knee to resist support and thrust forces. In balanced running, the ground reaction forces act along a 
line passing from the toe through the system center of mass. The control system servoes the hip joint 
to keep the knee on this thrust line during stance. Because torque about the knee is not needed to support 
the body, we use the knee to maintain the body in a level posture. The linear servo given in equation 
(4) operates at the knee during the stance phase to eliminate errors in body orientation and orientation 
rate. The tail is made to counteroscillate with the leg, keeping the angular momentum of the entire system 
near zero throughout the running cycle. When the leg strokes backward during the stance phase, the tail 
strokes downward. The tail motion is produced by making a step change in the spring rest length for the 
actuator at the base joint of the tail. The spring damper characteristics of the joint is tuned to oscillate 
in period with the running motion. The two peripheral joints in the tail are actuated by a spring damper 
with fixed rest length. The head was servoed to stay level throughout the running mot ion. Modeling Each 
of the legged systems was modeled as a tree of rigid bodies, each connected to its parent by rotary or 
sliding joints. The mass, mass center, and moment of inertia . .. I I //1 \ 4!( 2 system center of 
mass hip knee  ankle w Figure 5: Top) Drawing of real kangaroo used as the basis of the kangaroo model. 
It was a juvenile red kangaroo weighing 6.6 kg. Drawing is from [~]. Bottom) Diagram of kangaroo model. 
Except for the trunk, each link was modeled as the frustum of a cone, with Divots at the base and tip. 
The two legs of the real kangaroo were combined into one-model leg, All dimensions were chosen to match 
the reaf kangaroo in link length and link mass, assuming the kangaroo was the density of water. Mass 
centers and moments of inertia were calculated from the geometric model. for each body were determined 
in one of two ways. For the robot models we used actual measurements of the mass properties. For the 
kangaroo model we used the link length, mass, and mass center data given in [2]. We calculated the moments 
of inertia of the links from the geometry used in the graphics, typically assuming the density of water, 
An actuator capable of exerting forces or torques was located at each joint. The lowest level of control 
used linear servo mechanisms to specify actuator forces: f= Itp(e 0,) kue (5) where ~ is the force 
or torque acting on the joint, 0 is the joint angle or length, and /cp and k. are position and velocity 
feedback gains. These joint servos have the same dynamical behavior as a spring-damper mechanism with 
programmable rest length. Depending on one s point, of view and the design of the control system, these 
joint, servos can be regarded as part of the control system or as part of the model. Environmental interaction 
was restricted to gravi­tational forces and ground contact forces. A single point on each foot could 
make contact with the ground, The ground contact model for each foot consisted of four spring and damper 
sets: one vertical, two tangent to the surface, and one torsional about the ground sur­face normal The 
rest length of ear-h spring was reset when a foot first touched the ground during a support period. The 
ground contact compliance represents the compliance of the -paw pad , the elastic elements on the bottom 
of the feet, plus any compliance provided by the support surface. The kangaroo model used a non-linear 
paw pad spring in the vertical direction: j,=~ for:<O (6) kr+ :-l where ~, is the vertical spring force, 
k~, is the paw pad stiffness, k, is the paw pad thickness, and z is the altitude of the foot contact 
point above the ground. We chose a non-liuear spring for this part of the model because it is consistent 
with compression of an elastic material between two surfaces it reduced the maximum deflection during 
the support period. and it allowed vertical forces to develop more slowly at initial impact. We assume 
that once ground contact is made, there is no slipping between the foot and the ground. This is equivalent 
to an infinite coefficient of friction. To test this assumption we used data from typical runs to calculate 
the coefficient, of friction that would have prevented slipping. For the biped, this value was always 
less than 1. With the exception of the very beginning and end of the support period, a coefficient of 
friction of about 0.5 would have prevented slipping for the quadruped and kangaroo. At the very beginning 
of the support period, when th~ feet begin to make contact with the ground, however, there is a period 
of up to 10 ms during which the coefficient of friction would have had to he almost 2.0 to prevent slipping. 
A similar period occurred at the very end of the stance phase. On a day without oil leaks, the coefficient 
of friction between a robot foot and the floor of our laboratory is about 1.(). Equations of motion were 
generated for the struc­ture with a commercially available program [14]. The program generates efficient 
subroutines (0( n) where n is the number of links) that implement the equations of motion using a variant 
of Kane s method and a symbolic simplification phase. The equations of motion were nu­merically integrated 
using Euler s method, with time steps of ahout 0.0004 s. Simulations of a single creature ran between 
7 and 10 times slower than real time on a SIIN Sparc2. Dynamic Scaling W eused the basic principles 
of allometry to scale Computer Graphics, Volume 25, Number 4, July 1991 Quantity Units Scale Factor Basic 
variables length L L time T [21/2 force F L3 torque FL L Motion variables displacement L L velocity LT., 
L1{2 acceleration LT-2 1 angular displacement 1 angular velocity T-, L-1/2 angular acceleration T-2 L-1 
Mechanical parameters mas+ FL-1~2 L, stiffness FL- I L damping FL- T LVZ moment of inertia FLT2 L torsional 
stiffness FL L torsional damping FLT L~lz Table 1: Scaling rules that preserve geometric similarity. 
If a system is scaled in size by a factor L and its mechanical parameters are each scaled according to 
the table. then the motion of the scaled system can be found from the motion of the original unscaled 
system. The table is derived assuming uniform scaling in all dimensions (geometric similarity), and that 
the acceleration of gravity is invariant to scaIe. the size of a model, along with its control system 
and movements. Adult animals of a single species generally scale uniformly in all linear dimensions. 
and thereby maintain their proportions [11]. For a system scaled in this fashion, Table 1 gives rules 
for scaling the control system and the motions. Suppose we want to animate a kangaroo that is L times 
bigger than normal. ( sing the table we see that it will hop L times as high, travel ~e~e~t and haw a 
cadmc~ 1/fi of the original There are two ways to use these scaling rules. One way is to generate a new 
model of the creature and a new control system, based on the scaled mechanical parameters available from 
the table, Behavior of the scaled model can be used directly. An alternative is to implement a single 
model and control system at scab= 1, but to scale all input, to the animation as a function of l/L, and 
all output, as a function of L. For example, if L= 2, initial positions would be scaled by L- = 1/2, 
initial times and the integration time step would be scaled by L-]iz = 1/~, and desired running speed 
would be scaled by L-[/2 = l/fi. The animation could then be run at scale 1, The outputs are scaled before 
displayed: positions and geometry by L= 2 and time b! L / =~. We used the latter approach. but both give 
identical results, I I ! 0,0 0.0 0.5 1.0 :r 0.0 0.5 I.0 01 1 1 0.0 0.5 I.0 20 r o 20 . 40 L 1  OL 
I 0.0 0.5 I.0 time (s) Figure 6: Data recorded from planar kangaroo model during three steps of running 
with a desired speed of 5 m/s. The vertical dashed lines bracket the stance phase. The leg joint angles 
are defined in Figure 5. Key to joints in leg angle plot: (solid) hip, (dashed) knee, (dot-dashed) ankle. 
 5 Results Table 2 compares the behavior of each animated runner to the physical system it is designed 
to model. The data indicate that there are many similarities. For example, the extended flight phase 
is shorter than the gathered flight phase for both the physical and the animated quadruped during bounding. 
The kangaroo s body and tail oscillate as it runs and the magnitude of the oscillations are similar. 
The table also illustrates a number of differences. For instance, the gathered flight phase of the animated 
quadruped is twice that of the robot quadruped. The animated biped spent a great deal more time in flight 
than the robot. Another difference between the animated and real kangaroo is in the behavior of the feet 
at impact. The real kangaroo accelerates its feet to the speed of the ground just before they touch, 
so they do not scuff or have a tangential impact. We call this ground speed Robot/ Quantity Animal Animation 
 Quadruped Bound pitch magnitude (deg) 26.4 25.8 stride length (m) 1.15 ~.~~ stride duration (s) 0.37 
0.43 gathered flight phase duration (s) 0.11 (),~ 2 extended flight phase duration (s) 0.04 0.03 stance 
duration, front legs (s) 0.10 0.10 stance duration, rear legs (s) f)l~ 0.08 change of leg length 0.085 
0.092 during support (m) running speed (m/s) 2.9 2.8 error in running speed (m/s) 1.25 1,2 Quadruped 
Trot pitch magnitude (deg) 2.2 6,? stride length (m) 1,84 1.49 stride duration (s) 0.80 0.54 flight duration 
(s) ().~ 7 0.18 stance duration (s) ().]~ 0.09 change of leg length 0.04 0.03 during support (m) desired 
running speed (m/s) 2.3 2.3 error in running speed (m/s) 0.7 (),Q Biped Run pitch magnitude (deg) 2,0 
3.4 roll magnitude (deg) 6.7 11.5 stride length (m) 0,57 0.74 stride duration (s) 0.36 0.47 flight duration 
(s) 0.18 029 stance duration (s) 0.18 0,18 change of leg length 0.01 0,04 during support (m) error in 
running speed (m/s) -0.3 ().2 Kangaroo Hop peak vertical acceleration (g) 5 4.6 pitch magnitude (deg) 
10 12 magnitude of tail wag 30 31 relative to trunk (deg) stride length (m) ~.~ 1.5 stride duration (s) 
0.35 0.35 flight duration (s) 0.25 ().24 stance duration (s) 0.10 0.11 desired running speed (m/s) 6.2 
5.0 Table 2: Comparison between behavior of physical robot and animation, and between real and animated 
kangaroo. The runs were selected to match running speed as closely as possible, so running speed should 
not be used for compar­ison. The kangaroo data are from [2]. and the quadruped robot data are from [13]. 
matching. The animated kangaroo does not do ground speed matching. The control algorithms were successful 
in provid­ ing halanccd running, regulating the speed of travel to within about 10% of the desired value, 
and in steering the creatures along specified paths. To get each new creature or gait working required 
some adjustment of the control parameters. For example, to improve the ap­ pearance of the quadruped 
trotting and bounding nm­ tions, we redur-e(l the standing length of the legs. To get the kal~garoo tail 
to oscillate in rhythm with the running motion. we atijustrd the spring and damping constants of the 
tail joint servo until the natural fre­queucy w-as ahout equal to the hopping frequency, To makr the 
kangaroo jump over an ohstack, a number of additional stattw were adderi to the stat~ machine. 1 l~ost 
states allowed stiffer operat ion of the legs for the ji]n~p, mrrrr dissipat ion in the legs during landing 
after the jump, and a Ilumhrr of cosmetic changes. Once ad­justed. t bc locomotion proctwlmd without 
adjustment,. 6 Discussion Ihc motions <iescrihe(i in this paper are physically realistic in that they 
were goneratecl hy applying forces an<i torqum to pby;ical models of a mechanical system. Ihe (iegrel 
of physical realism (iept=nds on the degree to \Ybich th{ systenl is accurately modeled. For instance 
the mass parameters of t be links, structural strength of the links. torque available from the actuators, 
actuator ban(lwi,it b. stiffness oft be feet. an(i external frirt ion are paramct{rs that help (If.termine 
thr overall appearance of a Inol ion. Thcrr is no guarantee. however. that physically realist ir motion 
will he natural looking motion . It seems t hat animals move with a smoothness and coor­{iination that 
is not require(i hy physical realism alone. (. onstraints on smoothness, compliance, or energetic ef­ficiency 
cmlld eventually lead to uniformly natural look­ing behavior. }1 e found that increasing the comp lianm 
of the actuators generally improved the appearance of the anin}iitvd motions. W eexpect that crkstraintst 
hat Iowt r t h, (~verall energy expenrlitrire will also coutrihute to rnor(> natural looking ]ocomotion. 
As nwntione~i earlier, the methods desr-rihed in this paper might be t bought of as a tool hox for hand 
crafting control s}-stenis for nrw creatures and behaviors. }\Te expect that further (ievelopnwnt of 
control systems for computer animation will proceed in two steps. First, weexpcct control algorit,hmsf 
orindivi(iualc rt=aturm to l]ecot~l~ (-al~ahlt ofa wider varietjo fhehaviorwith less manual a(ijustment, 
Eventually. it should be possible to design control algorithms that will make creatures autonomous enough 
to do what, they are told , The animator should he able to direct the behavior at a relati~ely high 
le~el, and let the control system propel the system from one plact= to another at the desired rate along 
the spt rifitwi path, usP specified gaits, change hetwccngaits. and maintain halanct=, ail while adhering 
to physical realism. For well defined st%s of creatures and behaviors. this goal is within sight. Computer 
Graphics, Volume 25, Number 4, Julv 1991 !k-ond. wethinkit ispossihle toautomatetheprm ­crws of generating 
control algorithms for new creatures. (.;iveu control algorithms that work correctly for the lo­comotion 
of a horse, for example. it should he possiblo toautomatir-ally generate control algorithms for an an­telope, 
dog, cat. or elephant, Initially such automati­cally generated control might h~ restricted to a limited 
repertoire ofhehavior. Afirst cut might aimath alanced running at a range of speeds with sevmal gaits 
and tran­sitions hctwtw-n gaits, It is difficult to predict how long it will take to arhieve this level 
of control autonlati ­cally, or to go beyond it to automatp more complicated crt=atllres or higher-level 
function. One might expert the various workers involved in the study of control algorithms for legg~d 
locomotion animators. robot engineer-s. and biological scientists to differ in their criteria for successful 
algorithms. Such criteria could include precision of control. generality of control algorithms with respect 
to diverse bt=haviors and diverse creatures, the aesthetic appearance of th~ resulting movement, the 
simplicity and elegance of the solution, or the degree to which an algorithm explains the workings of 
animals. \$ e might find, however, that the solutions that best explain animal behavior will be similar 
to those that produce the best mhot behavior, and that t}],>easiest way to make an animation look animal-like 
is to use a control system Iikr the auimal s. It is also possible that t~chniqum suer-essflrl in producing 
animations that are visually pleasing and natl[r-al will lead to a h~tter understand ingof tho control 
at work in animals and to the construction of more effective robots. 7 Acknowledgements \Ve thank ronl 
Mchlahon for helping us appreciate thr beauty of dynamic scaling laws, and Takashi Aoki and Don Floyd 
for contributing to the software used in this project. This research was supported by cent racts from 
the DA RPA Information Sciences and Technology office and the (. harks St ark Draper Laboratory. 8 References 
<RefA>1. Alexander, R. JIc!V. 1988. Elasfzc .ifechrrnl.srm ~n ,-lntmal ,tfovfnjtni (( ambridge University Press: 
New }-ork). 2. Alexander, R. \lc N., Vernon. A. 1975. The mechanics  of bopping by kangaroos ( Macropodidas). 
1. Zooiog.y (London) 177:265-303. 3. 13ruderlin, A. Calvert. T. \\ . 1989. Goal-Dirt=cted. I)ynamic Animation 
of Human Walking. ( ompoter Graphic.9 23(3):233 242. 4, (.;irard, hl. 1987. Interactive design of 3-D 
com­puter animat~d legged animal motion. lE. E ~. f omputf r-Graphtcs and .Animrrtlon June: 39 51. 5. 
(;irarri, M. and Nlaciejewski. A. A. 1985. C. omputa­tional Modeling for the ~ omputer Animation of Legged 
Figures, ,\ tggrrzph 19(3): 263270,  6. Hemami, H., Weimer, F, C., Koozekanani, S. H. 1973. Some aspects 
of the inverted pendulum problem for modeling of locomotion systems. IEEE Tkrrns. A rtto­matic Contro! 
AC-18:658 661. 7. Hodgins, J., Raibert, M. H. 1990. Biped Gymnastics. Inter-national Journa/ oj Robotics 
Research, 9(2):115­ 132. 8. Hodgins, J., Raibert, M. H.l 1991, Adjusting step length for rough terrain 
locomotion, IEEE J. Robotics and Automation, Sacramento. 9. Hodgins, J., Koechling, J., Raibert, M. 
H. 1985. Running experiments with a planar biped. T Aird Irrter­national Symposium on Robotics Research, 
Cambridge:  MIT Press. 10, McKenna, M, and Zeltzer, D, 1990. Dynamic Sim­ulation of Autonomous Legged 
Locomotion. Computer Graphics 24(4):29-38. 11. ,McMahon, T. A. 1984. Muscles, Reflexes, and Locomotion. 
Princeton: Princeton University Press. 12. Raibert, M. H. 1985. Legged Robots That Balance. Cambridge: 
MIT Press. 13. Raibert, M. H., 1990. Trotting, pacing, and bound­ing by a quadruped robot, J. Biomechan.its, 
VOI.23, SUPP].1, 79-98.  14, Rosenthal, D. E., Sherman, M. A., 1986. High per­formance multibody simulations 
via symbolic equation manipulation and Kane s method. J. Astronautical Sci­ences 34:3, 223 239. 15. van 
de Panne M., Fiume, E., Vranesic, Z. 1990. Reusable Motion Synthesis Using State-Space Con­trollers Computer 
Graphics 24(4): 225-234. 16. Wilhelms, J. 1986. Virya-A motion control editor for  kinematic and dynamic 
animation, Graphics Interface 86141-146. 17. Wilhelms, J. 1987. Using Dynamic Analysis for Real­istic 
Animation of Articulated Bodies. IEEE Computer Graphics and Animation June: 12-27. 18. Witkin, A., Kaas, 
M., 1988. Spacetime Constraints. </RefA> Computer Graphics 22(4):159-168. 9 A ~~e~~dix: Physical Parameters 
of IV? Link Mass Moment of Link length center M asS Inertia (m) (m) (kg) (kg -m ) Biped trunk 23.1 
[.17 .17 ,30] upper leg .20 .095 1,4 [.018 .017 .0014] lower leg .63 , 2p .64 [.02 .02 .00018] Hip location 
wrt trunk center of mass: .c = 0.0, ?J = +0.072, z = 0.0 Quadruped trunk 10.0 [.54 2.35 2.39] upper 
leg .41 .2 1.5 [.043 .043 o] lower leg ,4 .2 1.0 [.0035 .0035 0] Hip location wrt trunk center of mass: 
.r = +0.39, y = +0.12, .2 = 0.0 Kangaroo trunk 3.67 .034 thigh .13 .064 1.62 .0039 shin .26 .105 .60 
.0033 foot .174 .14 .00038 .082 tail 1 .166 .079 ,24 .00058 tai12 .166 .071 .14 .00033 t ai13 .166 .076 
.069 .00016 head .13 .04, .04 .33 .00046 Hip location wrt trunk mass center: [-.11 0] Head location 
wrt trunk mass center: [.21 O] Tail location wrt trunk mass center: [.2 O] Table 3: Physical parameters 
of models used in anima­tions. Link lengths are from proximal joint to distal joint. Mass centers are 
distances from the proximal joint of a link to the mass center. Moments of inertia are about the mass 
center of the link. The diagonal of the moment of inertia tensor is given.  
			
