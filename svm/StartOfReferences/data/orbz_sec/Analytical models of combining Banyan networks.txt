
 Analytical Models of Combining Banyan Networks Arif Merchant* IBM T. J. Watson Research Center P.O. 
Box 704, Yorktown Heights, NY 10598 Abstract We present in this paper an analytical model of a multistage 
combhting Banyan network with output buffered switches, in hot-spot traffic. In a combining network, 
packets bound for the same destination are combined into one if they meet at a switch; this alleviates 
the problem of tree-sat ur:ation caused by hot-spot traffic. We model the flow processes in the network 
as Markov chains and recursively approxi­matee the departure processes of each stage of the network in 
terms of the departure processes of the preceding stage. This model is used to predict the throughput 
of the combin­ing network, and comparison with simulation results shows the prediction to be accurate. 
A modified combining scheme based on low priorities for hot packets is proposed and analyzed. It is shown 
that this scheme yields substantial improvements in throughput over the standard combining scheme. 1 
Introduction Banvan networks have been used in the interconnection net­work of several shared memory 
parallel machines such m the IBM RP3 [12], the NYU Ultracomputer [5], and the BBN TM 2 These network 
combine several advantages: ButterflY [1. they use fixed size switches, the hardware complexity is low 
(O(N log N) switches for a network of N ports,) they sup­port simple, distributed routing algorithms, 
and the delay due to the network is low, at least in moderate-intensity, uniform traffic. When the traffic 
is even slightly unbalanced, however, it is easy to show that the performance degrades severely. This 
happens, for instance, when a memory location holds n lock for synchronizing various processes, or a 
queue for slhared resources, and several processors try to access it at 10 ughly the same time. This 
creates a hotspot , and the fan-in tree corresponding to the hot memory module saturates rapidly aa the 
network size increases. Pfister and Norton [13], who first studied this problem, suggest a single hotspot 
traffic model for analyzing the ef­ This work was done while the author was at Stanford University and 
was supported in part by a grant from the AT&#38;T Foundation and NSF grant DCR.S351757. Permission to 
copy without fee all or part of this material is granted provided that the copies are not made or distributed 
for direct commercial advantage, the ACM copyright notice and the title of the publication and its date 
appear, and notice is given that copying is by permission of the Association for Computing Machinery. 
To copy otherwise, or to republish, requires {i fae and/or specific permission. 1992 ACM SIG METRICS 
&#38; PERFORMANCE 92-6 /92/R.l., USA 9 f 992 ACM 0-89791 -508 -9/9210005 /0205 . ..$1 .50 fecta of such 
non-uniform traffic, in which a certain fraction of the traffic from each source (processor) node is 
asaumed to be directed towards the hot memory module, and the re­maining traffic is uniformly distributed 
over all the memory modules. It ia easy to see that if the total arrival rate of messages from each source 
node is A, and the fraction of traffic that ia hot is p, then in stage i of the fan-in tree of the hot 
memory module in a k x km Banyan network, the arrival rate of messages is (1 p)~ -I-Is pA, aasuming 
that stages 1, 2, . . . . i 1 are not saturated. Thus, regardless of how small the hot fraction p is, 
the arrival rate exceeds one for even moderately large i. The solution that Pfiater and Norton suggest 
is to use a (combining network, in which messages that are bound for the same destination combine into 
a single message if they meet at a node. This ia possible at leaat for some types of messages, such as 
memory requests, and the node where the combining takes place can keep track of which replies need to 
be split up and sent to multiple processors, Under the hotspot model, we assume that only the hot messagea 
combine, since the probability y of two cool messages with the same destination colliding is negligible. 
There is empirical and simulation based evidence (see [8]) that this method works when the degree of 
combining (the maximum number of messages that can be combined into one at a node) is three or greater. 
Previous approaches to modeling combining Banyan networks have concentrated on simulation; for instance, 
Lee [7] gives formulae derived by fitting simulation data for the average delays suffered by packets 
in a combining network in the case of infinite-degree combining, but little analytical justification 
is given for the results. In this paper we provide approximate analytical models based on minimal approximations 
for two variations of the combining network, including that considered by Lee. Our analysis is based 
on a Markov chain approximation of the flow processes in the network and extends the approach we used 
in earlier work [1 O, 9] for simple Banyan networks in non-uniform traffic. The basic idea is to characterize 
the departure processes of the nodes in the network approxi­mately as O -1 Markov chains, and use this 
to determine the throughput of each node in the network. This is similar to the use of Markov Modulated 
Poisson Processes for char­act erizing burst y arrival processes (see, for inst ante, [6]), or Markov 
Modulated Fluid Sources for approximating the output process of a queue (see [4]). We also suggest an 
alternative strategy using priority based forwarding which considerably improves the through­put of combining 
networks. Our analytical results are vali­dated by comparison with simulation data. 205. Performance 
Evaluation Review, Vol. 20, No. 1, June 1992 Y,(vl) l qv2) ~ 2 St(v,) X,(V2) _ Qt(w) Stage n Figure 1: 
Flow of messages from stage The network Interconnection networks are constructed from switches; a k xs 
switch has k input ports and s output ports. A Banyan network is an interconnection network with exactly 
one path between every input port (source) and output port (sink.) In an rn-st age interconnection network, 
the switches are di­vided into m stages so that the output of a switch in stage i is connected to the 
input of a switch in stage i + 1. For simplicity, we consider only m-stage Banyan networks con­structed 
from 2 x 2 switches, also known as 2m x 2m (square) Banyan networks. We assume that the switches have 
a buffer of length b at each output port. Each input port receives messages at clock ticks which are 
instantly forwarded to an output buffer; there it is enqueued or combined with another message. If the 
buffer is full and the message cannot be combined with another, it is rejected and lost. Each output 
buffer processes the message at the head of its queue in one clock tick. The arrival processes of messages 
from the sources are assumed to be O-1 Markov chains, that is, the number of arrivals (O or 1) at time 
tdepends only on the number of arrivals at time t 1. Finally, we assume that the traffic is distributed 
according to the Pfister and Norton single hotspot model: that is, the arrival processes from the sources 
are indepen­dent and identically distributed, and a packet generated at any source has a fixed probability 
of being a hot packet, and is otherwise cool. If a packet is hot, it is directed towards a particular 
hot memory module. Otherwise, if it is cool, the packet has equal probability of going to any sink, 2 
The Markov chain approximation We base our analysis on an extension of the idea used in [11, 9], approximating 
the departure processes of the nodes in the network by O 1 Markov chains. These Markov chains are relatively 
simple, since they can be characterized by two parameters, and yet are capable of capturing the bursty 
na­ St(vo) X,(vo) * Qt(vo) F Stage n+ 1 n to stage n + 1in the tthcycle. ture of the flow processes 
involved. Our basic strategy is to determine the parameters corresponding to the Markov chains for the 
flow processes of stage n + 1 in terms of those for stage n; we can then use this recursive relationship 
to determine the parameters corresponding to each flow pro­cess in the network. Armed with a description 
of each flow process, we can determine the throughput for each node in the system. Consider a node vo 
in the n + l t stage of the fan-in tree of the hot sink, and the nodes VI and V2 in the nth stage that 
feed vo (Figure 1). Let St(v) be the number of messages entering the node v in the tih cycle, Qt(v) the 
queue length, and Xt (v) the number of (hot and cool) messages leaving. Let ~~(v) and ~~(v) denote the 
rates of arrivals at v for cool and hot messages respectively (i.e., the mean number of arrivals per 
cycle), JC(V) and Ah(v) the corresponding rates of departure, and ~(v) = AC(V) + ~h(V) the total rate 
of departure. For convenience, we also define: lft(v~) = hot messages flowing from vi to V. at time t, 
Ct(vi) = cool messages flowing from v; to vo at time t, @(vo) = ~t(vl ) + Ht(v2) hot arrivals at vo at 
time t, C ;(VO ) = C t(zq ) + c~(vz ) cool arrivals at VO at time t. Thus Yt = Ift + (J and S t = ft~ 
+ c;, Corresponding to the processes above, we define the equilibrium probabilities (we leave out the 
argument (vt) where it is obvious:) z;;(v) R ,l~ir Pr[Xt_l(v) = i A X,(V) = j] j Ii( v) -Jj~Pr[Xt(v) 
= jlXt-I(v) = i] w(v) = ,\mm Pr[X~(v) = i] xi(~, v) ~ fim ~[uxt-d a)vxd a) ] t-w Y(U1, WI, U2, W2) E 
,<m@E[ u~ - w~- u~ w~ ]. 206. Performance Evaluation Review, Vol. 20, No. 1, June 1992 Following our 
strategy above, we are trying to connect So with SI and S2. To thk end, we make the following, basic 
approximation: Approximation 1 (Markov chain) If the arrival processes S(VI ) and S(V2) are Madcov chains: 
Pr[St(v;) = jlS~_i(vi)T S,-2(rJi),.. .] = Pr[St(vl) = jlSt-l (vi)] fori = 1,2, then we approximate Pr[S, 
(vO) = j\ St-l(vo), %--2(vo), ..] = pr[&#38;(vo) = j[st-l(vo)]. Since the external arrival processes 
are given to be Miirkov chains, this approximations allows us, by induction, t c) as­sume that the arrival 
process for every node in the network is a Markov chain. Now we can obtain Xi in terms of Si. The transition 
probabilities of the departure Markov chain are given by lim Pr[Xt = 1]=221o + ZII = 201 + zlI = A. t+ua 
 lim Pr[X~ = O]=z~O + 200 = Zoi + aoo = 1 J. t+m  Using these equations, X; is completely described 
by the departure rate A(w) and the transition probability Zoo(v;): Xi(u, w) = 200 + Zlou + Zol w + Zllu 
w = zoo+ (1 ~ COO)(U+ w) + (2A + zoo l)UW (1) We estimate zoo (v;) as follows Pr[Xt(v) = OIXt-I(V) = 
0] = Pr[Q,-l(v) = o] Q,_~(v) = O] = Pr[&#38;-i(v) = oIS~-2(V) = O A Qt-s(v) S 1] . Pr[S$~~l) = O\Sj~~l) 
= O] (2) The last equality follows from the fact that Qt-3(v) is a function of St-s(v), St-A(v), . . 
. and from Approximation 1. Thus, zoo(w) = Zo(vi)zolo(vi) = (1 A(IL))S;(O,0,0,0)/s;(1,1,0,o). (3) We 
know that A(v) = AC(v)+ Ah(v). (4) The rate of cool departures from v, A.(v) and the rate of hot departures 
Jh( v) can in turn be found from the p.g.f. of the arrival process S. How to do this depends on the queueing 
method employed, and we shall discuss it separately for each queueing method in the following sections. 
Once we have determined ~c(v) and ~h( v), then substituting in equations (l-4) will yield the distribution 
of the departure process in terms of S(v). Now assuming we have found X;(W, w), we proceed to find the 
probability y generating function Y; (u1, WI, U2, W2) corresponding to the split t ed flow process Yt 
(v;). This in­volves breaking up the departure process Xt (vi) into hot and cool depart ures, and here 
we make our second ap proxi­mation: 1 * similar ~PProXjmation was used in [10, 9] for non-combining 
Banyan networks. Comparisons with simulation results there indi­cated that the approximation was good 
for low-to-moderate arrival rates. Approximation 2 Each message departing from the node v is a hot message 
independently with p~obabzlzty A~(v)/(A~(v) + A.(v)), and a cool message otherwise. 13y Approximation 
2 above, a message departing w is hot and moves to V. with probability A~/(A~ + &#38;), is COO1and moves 
to cvo with probability ~c/(2(~h + &#38;)), and otherwise moves to some other node. Using this and the 
fact that Xt is O or 1, it is easy to verify that and hence that Y,(ul, W1, U2, W2) s lim E u~- ( )w~- 
()u~ ( ()w~( () ) t-+m [ 1 The arrival process to V. is given by superposing Y~(vl ) and Yt (tr2 ), 
and the p.g,j. describing it is: SO(U1, W1, U2, W2) (5) s limEu~ ;-l( o)w~-l(~o) u:;(.o)wy(vo) t-m [ 
1 = Y1(U1, W1, U2, W2)Y2(U1, W1, U2,W2) (6) Given this arrival process, we may compute the distri­ bution 
of queue lengths. This will depend on the precise method of combining that we use, as we shall see in 
the following sections. 3 Regular combining Gottlieb et al. ([5]) proposed a model of combining which 
is generally considered the prototype. Their model merges incoming messages with any message in the queue 
with the same destination (if those messages can be combined). This is also the model that Lee [7] considers. 
Under the single hotspot model, the assumption is that the probability of two cool messages colliding 
is negligible, and thus only hot messages combine. Usually, a restriction is placed on the number of 
messages that may combine at a buffer, that is, on the degree of combining. We shall develop a model 
for the case of an infinite degree of combining, A complete Markov chain model of a single combining 
node would keep track, in its states, of the queue length, whether there is a hot message in the queue 
and, if there is one, of its position in the queue, so that it can be determined when it is served and 
leaves the node. This, however, leads to very large state spaces, even for moderately Iarge buffer sizes. 
To reduce the complexity of this model, we make the following approximation: Approximation 3 If there 
is a hot message in a queue, it is located randomly, distributed rmzformty over the length oj the queue. 
For a node VI let us consider the state vector Zt = {Q~(v), Q:(v), C/(V)+ ~j(v)} where Q: and Q: denote 
the 207. Performance Evaluation Review, Vol. 20, No. 1, June 1992 Table 1: Transition probabilities between 
z. , 1( C! H!) z. p.~b.­ -c . , -. . \-r. ,--r, 0,0,0 (c, l(h>O, c+h) (b(-1, I!a) [;;!] (b,o,i) l/;21)) 
(b-1,1,2) l/(2b) (b-1,1,2) 1 I/b (2, o) (b, O, 2) I/b (b-1,1,2) 1 I/b (b, O, a) (1, 1) (b(; ;, ;>2) 
1/2 1/2 (2,0) (b:0;2) 1 in all other c ases: (C, h) (i+c-1,  (i, ~j a) l(j+h>O), c+h) i/(i + j) (i+c,l(h>o), 
c+h) ji(~ + j) number of cool and hot messages in the queue respectively; recall that C; and .H~ are 
the numbers of cool and hot ar­rivals at time t.As usual, we shall leave out the argument v where it 
is obvious. We assume that the arrival process is a Markov chain: However, as a consequence of Approximation 
2, This follows directly from probabilistic considerations, and can also be shown (after some algebra) 
from equation (6) and Approximations 1 and 2. Using this fact it is clear that the process Zt is also 
a finite Markov chain. The transition probabilities for this chain are easily found from Table 1, which 
shows the probabilities of transition given the number of hot and cool arrivals: Pr[Zt=zl Z,_l=zl] Table 
2 gives the first conditional probability in the sum above and the second is found from S, the p.g.f 
correspond­ing to the arrival process St(v), as follows: = Coeff. of u3vhwc in S(U) u, v, w) . (8) Coeff. 
of u~ in S(u, u, 1, 1) Armed now with the transition probabilities for the queue length Mmkov chain, 
we may use standard techniques to solve for the stationary distribution. states, given arrivals, in regular 
combining. I Comment buff. empty, nothing sent buff. full, hot mess. sent, cool mess. ace., hot mess. 
rej. buff. full, hot mess. sent, hot mess. ace., cool mess. rej. buff. full, cool mess. sent, cool mess. 
ace., hot mess. ace. and comb. buff. full, hot mess. sent, one cool mess. ace., one rej. buff. full, 
cool mess. sent, one cool mess. ace., one rej. buff. full, cool mess. sent, hot mess. ace., cool mess. 
rej. buff. full, cool mess sent, cool mess. ace., hot mess. rej. buff. full, cool mess. sent, one cool 
mess. ace., one rej. cool mess, sent hot mess. sent It remains to find Ah(v) and AC(V), so that X(W, 
w) can be computed. This is now easily found from the stationary distribution of Z,. Let ~i,j,. ~ stationary 
probability that Zt = {i, j, a}. since we have assumed that the location of the hot message in the queue, 
if there is one, is uniformly distributed over the length of the queue, the probability of finding a 
hot message in the front of the queue is Qh/(Qc + Qh). Therefore, the rate of hot departures is Ah = 
~7ri,i,a/(a + 1). (9) a,; Similarly, the cool departure rate is A. = ~ Ti,j,. . i/(i + j). (lo) i> Orj,a 
To recapitulate, we characterize the output flow process of a node v by the parameters ~c(v), ~h( U), 
and ZOO(V). Equation (3) gives us Zoo(vo) in terms of the parameters of VI and v2, and we show how to 
find AC(VO) and ~h(vo) in equations (9 10). Thus, we have a complete recursive model oft he input combining 
Banyan network with a single hotss)ot since we have assumed finite buffers, we are interested in the 
normalized throughput under various loads. To put this differently, we want to know the probability that 
a message reaches its destination wit bout get ting lost. The loss rates t%(v) and y=(v) for hot and 
cool losses respectively can be computed by considering the transitions of the Markov chain Z~ in which 
messages are lost: and ? == ;~( ~b,o,~ + x5 1,1,~/b)Pr[~~+l = C~+l = 1 I H; + C; = a] a a 208. Performance 
Evaluation Review, Vol. 20, No. 1, June 1992 Table 2: Transition probabilities between states, given 
arrivals, in priority-based combining. z*_l C;, H;) Zt Prob. omment O,j,a C,lh>o, c+h 1 hot mess. sent 
 ($-1, I!a) [;: !] (b -1,!,2) 1 buff. full, cool mess. ace. hot mess. ace. and comb. (b{ $ $) (2, o) 
(b -1,1,2) buff. full, cool mess. sent, one cool mess. ace., one rej. *! (1, 1) (b(; ~ ~)2) lj2 buff. 
full, cool mess. sent, hot mess. ace., cool mess. rej. 1/2 buff. full, cool mess. sent, cool mess. ace., 
hot mess. rej. (2, o) (b: 0:2) 1 buff. full, cool mess. sent, one cool mess. ace, one rej. r c in all 
other cases: i, j, a (c, h) ] (i+c l,l(j+h > O), c+h ) I 1 I cool mess. sent process Z* = {Qj(v), Q:(v), 
C:(v) + H;(v)} . By the same In terms of these loss rates, the probabihty of getting reasoning as we 
applied there, Zt is a Markov chain, and through a node v is we may easily solve for the stationary distribution 
of proba­bilities using standard methods once we find the transition ~ w(v) for a hot message (11) probabilities. 
Table 1 gives us the transition probabilities AL(V) given the number of hot and cool arrivals, and we 
may find the transition probabilities for Z, using equation (7). and The stationary distribution of Z, 
is found from the tran­~ %(v) for a cool message. (12) sition probabilities using standard techniques, 
and we use A:(w) this to compute the hot and cool departure rates, as in the Now we may approximate 
the probability that a message last section. In this case, a hot departure takes place only reaches its 
destination simply as the product of the proba-if a hot message is alone in the queue. Thus, bilities 
of getting through the individual nodes in the path. Table 3 compares predicted normalized hot and cool 
Ah =PIIQ = O,Qh = 1] = ~ffO,l,cz. throughputs against simulation data for changing buffer sizes, a and 
Figure 2 shows the normalized cool throughput agi~inst varying Ah for various values of ~C. Since, without 
combin-We could find ~~ in a similar fashion, but it is easier to ing, the network would saturate at 
very low hot message comput c it from A using equation (4), the total departure arrival rates (see Figure 
4), itis clear from Figure 3 that rate A is combining is successful in reducing the loss of messages 
con­siderably, especially when the cool traffic rat es are low. In l=l Pr[Qc=O, Qh=O, ]=l mmO the next 
section we suggest a technique for reducing these further. and therefore Ah = 1 ~ooo &#38;. Priority-based 
combining networks The normalized throughputs are found as in Section 3; considering the transitions 
of the Markov chain Z* which It is clear from the results of the last section that combin­involve loss 
of messages gives us the rates of loss for hot and ing is effective; nonetheless, there is a considerable 
loss of cold messages respectively: messages, especially when the cool message arrival rate A; is high. 
One way to improve throughput is to increase the combining. This can be achieved by using a priority 
queue for the messages at the output ports, with hot messages hav­ing low priority. Thus} hot messages 
would not delay cool 1 7. =5E Wo,.pr[H~+i = ci+I = 1 I ~; + c;=j]traffic, and a higher degree of combining 
would be achieved, a since hot messages will wait longer in the queues, and will be more likely to combine. 
This, of course, requires that +~(~b,O,. +Tb-l,l,a)Pd. @+l = z I H; +C; = ~]. the hot traffic be somehow 
distinguishable from the rest, a but this notion is not new, Chalasani and Varma [1] have used the idea 
of separating the non-uniform portion of the We compare the analytical results against simulation data 
traffic, which requires knowledge of the non-uniform ,com-in Table 4 and in Figure 3. The analytical 
results are slightly ponent. An approximation to our model which does not optimistic, but in most cases 
the errors are well under one require such knowledge is assigning low priority to only the percent, In 
Figure 4, we compare the throughputs (based on packets which are combined. Under a hotspot model, only 
simulation data) for the cases of no combining, regular com­hot messages are likely to combine. The latter 
scheme is bining, a combining network where hot messages have low similar to that suggested by Dias and 
Kumar [3]. In their priority, and a hybrid scheme where messages are moved scheme, a packet that needs 
to be propagated to a buffer al-to the end of the queue whenever they combine. Clearly ready containing 
another packet with the same destiniition the low priority scheme wins by a considerable margin, and 
is delayed by being rotated to the end of the queue. Their even the hybrid scheme produces a substantial 
improvement scheme does not involve combining, but the use of priorities in throughput. is similar. The 
analysis of queue length in this case follows cl,osely that of the last section. Again we consider the 
stochastic 209. performance Evaluation Review, Vol. 20, No. 1, June 1992 ., ...!.,, ................. 
 lmo,=o.3 ~ol=o.9 P Simulation ...... Analysis 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 hot arrival rate 
&#38; (messages/cycle) Figure 2: Normalized cool throughputs in the hot fan-in tree (2 x 2 Regular combining 
Banyan, buffer size =4) (lines are superposed) ., ,00, .,,,, ,. .,,.,,, , ACOOI=0.3 ?LCO0,=0.5 ........... 
 1,00,=0.7 go, coo-. Simulation .,, ,.. Analysis 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 hot arrival rate 
~,, (messages/cycle) Figure 3: Normalized cool throughputs in the hot fan-in tree (2 x 2 Banyan, buffer 
size = 4, hot messages combine, have low priority. )  ~ 1.00 n z g . 0.96 -. . . 0.94 . . . . 0.92 -. 
0.90 0,0 Figure 4: hot fan-in (25 : 0.98 7 8 \ \ % \ ­ ----­ .-, - \ ---­ < - -­ --­ -­ ---­ Low 
priority to hot messages . Hybrid system Regular combining . s . . . . No combining IIIII 0.1 0.2 0.3 
0.4 0.5 hot arrival rate &#38; (messages/cycle) Comparing normalized cool throughputs in the tree x 2 
Banyan, buffer size= 4, A.001 = 0.5) 210. Performance Evaluation Review, Vol. 20, No. 1, June 1992 Summary 
[10] We have considered Banyan networks under a single hotspot traffic model, with two different combining 
schemes. One was the prototype suggested in Gottlieb et al. [5], and used [11] in Lee [7]; the other 
was a priority-based scheme designed to increase the combining of hot messages, thus reducing the load 
and improving throughput. We analyzed both mc}dels using a variant of the Markov chain approximation 
of flow [12]processes proposed in [10,9], and based onminimrdapprox­imations, The results were compared 
with simulation data. The comparisons indicate that our models yield excellent estimates of throughput. 
In the case of the priority-based combining model, where [13] hot messages were given a low priority 
in queueing, we show that throughputs are improved considerably when the hot messages can be marked as 
such; there is significant im­provement also in the case where only the messages that combine are given 
low priority. References <RefA>[1] S. Chalasani and A. Varma. Analysis and simulation of multistage interconnection 
networks under non-uniform traffic. In Proceedings of PA RBASE-90, pages 258--265, March 1990. [2] W. 
Crowther et al. Performance measurements on a 128-node Butterfly parallel processor. In Proceedings of 
the 1985 International Conference on Parallel Pro­cessing, pages 531-540, August 1985. [3] D. M. Dias 
and M. Kumar. Preventing congesticm in multistage networks in the presence of hotspots. In Pro­ceedings 
of the 1989 International Conference on Par­allel Processing, volume 1, pages 9 13, 1989. [4] A. L Elwalid 
and D. Mitra. Analysis and design of rate-based congestion control of high speed networks, I: stochastic 
fluid models, access regulation. Qaeueing System, 9:29-64, 1991. [5] A. Gottleib et al. The NYU Ultracomputer 
 design­ing a MIMD shared memory parallel computer. IEEE Transactions on Computers, c-32(2):175 189, 
Febrwary 1983. [6] H. Heffes and D. Lucantoni. A Markov modulated char­acterization of packetized voice 
and data traffic and re­lated statistical multiplexer performance. IEEE ,Jour­nal on Selected Areas in 
Communications, 4(6):858­868, 1986. [7] G. Lee. A performance bound of combining networks. IEEE Transactions 
on Computers, c-38( 1O):1387-1395, October 1989. [8] G. Lee, C. P. Kruskal, and D. J. Kuck. The effectiveness 
of combining in shared memory parallel computers in the presence of hotspots. In Proceedings of the 1986 
International Conference on Parallel Proce9singj lpages 35-41, 1986. [9] A. A. Merchant. Banyan networks 
with non-uniform traffic, variable service times and finite buffers. In preparation. A. A. Merchant. 
A Markov chain approximation for the analysis of Banyan networks. In Proceedings of SIG-METRICS 1991. 
A. A. Merchant. Analytical Models for the Performance Evaluation of Buffered Banyan Networks. PhD thesis, 
Stanford University, 1991. Available as Stanford Tech­nical Report STAN-CS-90-1347. G. F. Pfister et 
al. The IBM Research Parallel Proces­sor Prototype (RP3): Int reduction and architecture. In Proceedings 
of the 1985 International Conference on Parallel Processing, pages 764-771, August 1985. G. F. Pfister 
and V. A. Norton. Hot spot contention and combining in multistage interconnection net works. IEEE Transactions 
on Computers, c-34( 1O):943 948, October 1985. 211. performance Evaluation Review, Vol. 20, No. 1, June 
1992 Buffer Cool throughput Hot throughput size Simulation Prediction Simulation Prediction 3 0.8358 
0.7817 (-6.4 %) 0.9586 0.9479 (-1.12 %) 4 0.9431 0.9149 (-3.0 %) 0.9863 0.9814 (-0.5 %) 5 0.9823 0.9714 
(-1.1 %) 0.9962 0.9942 (-0.21 %) 6 0.9954 0.9917 (-0.38%) 0.9992 0.9984 (-0.09 %) 7 0.9986 0.9978 (-0.09%) 
0.9997 0.9996 (-0.02 %) 8 0.9997 0.9995 (-0.03%) 1.0000 0.9999 (-0.01 %) 9 0.9999 0.9999 ( o %) 1.0000 
1.0000 (o %) 10 1.0000 1.0000 ( o %) 1.0000 1.0000 (o %) 11 1.0000 1.0000 ( o %) 1.0000 1.0000 (o %) 
12 1.0000 1.0000 ( o %) 1.0000 1.0000 (o %) Table 3: Hot and cool throughputs (&#38; = 0.5, ~h = 0.5) 
(Figures in parentheses are percentage deviations from simulation results.) Buffer Cool throughput Hot 
throughput size Simulation Prediction Simulation Prediction 3 0.9496 0.9610 (1.2%) 0.9989 0.9977 (0.13%) 
4 0.9899 0.9947 (0.48%) 0.9999 0.9998 (0.02%) 5 0.9979 0.9993 (0.14%) 1.0000 1.0000 (o%) 6 0.9997 0.9999 
(0.02%) 1.0000 1.0000 (o%) 7 0.9999 1.0000 (0.01%) 1.0000 1.0000 (o%) 8 1.0000 1.0000 (o%) 1.0000 1.0000 
(o%) 9 1.0000 1.0000 (o%) 1.0000 1.0000 (o%) 10 1.0000 1.0000 (o%) 1.0000 1.0000 (o%) 11 1.0000 1.0000 
(o%) 1.0000 1.0000 (o%) 12 1.0000 1.0000 (o%) 1.0000 1.0000 (o%) Table 4: Hot and cool throughputs (AC 
= 0.5, Ah = 0.5) (Figures in parentheses ax percentage deviations from simulation results.) 212. Performance 
Evaluation Review, Vol. 20, No. 1, June 1992   </RefA>
			
