
 Proceedings of the 1993 Winter Simulation Conference G. W. Evans, M. Mollaghasemi, E. C. Russell, W.E. 
Biles (eds.) AN ALMOST REGENERATIVE SIMULATION OF VIDEO TELECONFERENCING TRAFFIC David M. Cohen Daniel 
P. Heyman Bellcore Morristown, NJ 07960, U.S.A. dmc@bellcore.corn dph@bellcore.com ABSTRACT cient to 
find a loss rate of 10-8. However, even runs of 1012 cells did not always see the same cell-loss-rate. 
This note discusses the application of an almost re-A reason is that the cell losses are clustered and 
nei­generative method to the simulation of a Markov ther the number of lost cells per cluster nor the 
time chain that takes a very long time to converge. Even between cluster of loss are uniformly distributed 
(see simulation runs of 1012 cells did not produce the same Cohen and Heyman (1993a/b) ). results for 
simulation scenarios with an average cell- A few thousand runs of 1010 cells were done for loss-rate 
of 10-8. The regenerative method can not each scenario on a massively parallel processor, the be used 
here as the time between regenerative states MasPar MP-1216. Twenty additional runs of 1011 is too long 
(1030 events). Instead, an almost regenera­and 1012 cells were done on a workst at ion for some tive 
method was tried and it gave results that agreed of the scenarios. The average cell-loss-rates observed 
with predictions from regenerative theory and with by the few long runs and the average rates observed 
some very long simulation runs. The regenerative by the many shorter ones were of the same order of runs 
were done on a massively parallel processor. magnitude. While these simulations generated useful Key 
words: regenerative simulation, parallel sim­results about the distribution of losses, the observed ulation, 
variance reduction. variance in cell-loss-rates was high for scenarios with low cell-loss-rates. For 
example, the standard devi­ation in cell-loss-rates observed by different proces­1 INTRODUCTION sors 
was five times the observed mean for scenarios with an observed mean of 10-8. Obtaining estimatesThis 
note discusses experiments with an almost re­with a lower variance would either require <doing muchgenerative 
discrete event simulation of a Markov longer runs or patching together several runs tochain that takes 
a very long time to converge. Fig­generate a longer run. ure 1, on the next page, shows a block diagram 
of the simulation model. Access lines carrying Asyn-The regenerative method has been suggested by chronous 
Transfer Mode (ATM) cells generated by several authors, most notably Crane and Iglehart Variable Bit 
Rate (VBR) encoded video sources are (1975a) and Fishman (1974), as a way to use many fed into a buffer 
and multiplexed onto a higher speed independent simulations to find a steady state prob­output line. 
The study observed the cell loss resulting ability. In a regenerative simulation, a regenerative fkom 
buffer overflow. Different simulation scenarios state is identified and a regenerative cycle is defined 
were obtained by varying the number of access lines, to be a simulation run that starts and ends in the 
re­the size of the buffer, the speed of the output line, and generative state. However, the regenerative 
method the parameters for the video sources. The results on could not be used here because the time lbetween 
re­engineering ATM networks are discussed in greater generative states is too large. For example, with 
14 detail in Cohen and Heyman (1993a/b) and Cohen, sources, the mean time between visits to the state 
Cooper, Heyman and Reilly (1992). This note dis-with the highest steady state probability of occurring 
cusses our experiments with an almost regenerative is 7.25 x 1030 frames. Even at an extraordinary fast 
method. rate of 1013 frames a second, it would take 20 billion The study was concerned with low loss 
probabili-years to generate this many frames. Instead, an al­ties, ones on the order of 10 s. Simulation 
runs of most regenerative approach was tried. It gave results the order of 1011 cells are normally regarded 
as suffi-that had a much lower variance and which agreed 489 FRAMES 4 4 4 P s o UA A A P R. c: E s 4 
4 4 b Figure 1: Block Diagram of Simulation Architecture with the results of a few runs of 1013 cells. 
The next three sections discuss the model used for the video sources, the basic simulation algorithm, 
and simulations done using a naive approach. Section 5 discusses the almost regenerative method and gives 
an illustrative application to a simpler problem, an M/M/l/k queue. Section 6 gives the details of the 
al­most regenerative simulation of the ATM buffer. The appendix gives the details of the M/M/I/k example. 
 2 SIMULATION MODEL The inter frame period for the video sources used in this study is the PAL standard, 
which is 40ms. This means that once a video source starts transmitting, it sends a frame containing ATM 
cells every 40ms. The number of cells per frame is given by a Markov chain model for VBR video traffic 
that was devel­oped in Heyman, Tabatabai, and Lakshman (1992). The Markov model is determined by three 
parame­ters: mean, variance, and the correlation factor be­tween the number of cells in successive frames. 
Let fk be the negative binomial probability: (1) fk=(k+~-l)~ k where p = mean/variance and T = mean x 
p/(1 p). The transition matrix then has the discrete autore­gression DAR(1) form: lW=pl+(l-p)Q (2) where 
p is the correlation factor between successive frame sizes, I is the identity matrix, and each row of 
Q consists of the negative binomial probabilities (fo ,.. ., fK, FK) where F~ = ~~>Kfk and K is the maximum 
number of cells per hrne. 3 SIMULATION ALGORITHM Although the study is interested in cell-loss-rate, 
the basic event in the simulation is the arrival of a video frame and not the arrival of an individual 
cell. Using frame arrivals instead of cell arrivals greatly reduces the number of events. The study assumes 
that cells are either front-loaded in the video frame, i.e. cells are sent at the access line speed until 
the frame is complete, or that cells are evenly distributed in the frame. Under either assumption, the 
buffer overflow in any time period can be computed horn the frame arrival times, the number of cells 
per frame, and the buffer s initial state. The frame arrival times are completely determined by the arrival 
time of the call s initial frame since each active source sends a new frame every 40ms. By comparing 
the number of active lines with the ratio of access to output line speeds, the simulation can identify 
intervals when the combined input rate is less than the output rate. If the buffer is empty at the start 
of such an interval, no cells will be lost during the interval and the buffer will be empty at the end 
of the interval. The simulation can then avoid doing several calculations. This optimization can be very 
helpful as the buffer is frequently empty in scenarios with low cell-loss-rat es. Two different implementations 
were done for the MasPar MP-1216, a SIMD parallel processor. The most expensive parts of the computation 
cycle are random number generation and maintenance of a pri­ority queue of frame completion times (needed 
when the cells are front loaded in the video frames). The first parallelization distributes an individual 
simula­tion across a row of processors. Each processor is responsible for generating a random number 
and for maintaining one slot in the queue. A new item is added to the queue by broadcasting it along 
the row to all processors forming the queue. Each processor determines if it should replace the queue 
item in its slot in the queue. An item is deleted fkom the head of the queue by having each processor 
shift its value to the left. This gives a constant time for updating a priority queue of fixed maximum 
size. However, the number of items in the priority queue in scenarios with very low loss probabilities 
is frequently below the crossover point between the parallel and non-parallel implement ation. An alternative 
is to do many independent replica­tions in parallel. A drawback is that if one processor in a SIMD machine 
is executing a statement then the other processors are either idle or are executing that statement. Thus, 
if one processor needs to com­pute the exact number of cells that arrive in a time interval, all processors 
are delayed until that com­putation is done. This defeats the optimization men­tioned above and slows 
down the simulation consider­ably. Even wit bout this optimization, the replicated Table 1: Non-regenerative 
Method 4 1.3122 X 10-8 7.224 X 10-8 5 1.3968 X 10-5 8.026x 10-8 6 1.3146 X 10-8 7.251 X 10-8 all 1.3178 
X 10-8 7.313 x 10-8 simulation approach was found to generate more cells per computation time than parallelizing 
each individ­ual simulation. This is in accord with the results of Heidelberger (1986) in analyzing the 
efficiency of the replicated approach for estimating steady-state quan­tities. 4 NAIVE SIMULATION OF 
THE ATM BUFFER Several thousand independent replications were done in parallel for each simulation scenario. 
Each individ­ual replication ran for 8 x 107 frame arrivals, which gives about 1.04 x 1010 cells per 
replication. The mean and standard deviation of the cell-loss-rates ob­served by the different replications 
of each scenario were computed. Table 1 shows the results from 6 sets of 16K replications of a scenario 
with 14 access lines, a DS-3 rate output line, and a video source with an average of 130 cells per video 
frame. The cell-loss­rates observed by the individual processors were not normally distributed; 89 of 
the replications experi- Yo enced no cell loss. As shown in the table, the standard deviation is 5 times 
the mean. 5 ALMOST REGENERATIVE METHOD The regenerative method has been suggested as a way to estimate 
steady state probabilities from a single simulation run. In a regenerative simulation, a re­generative 
state is identified and a regenerative cycle is defined to be any portion of simulation run that starts 
and ends in the regenerative state. The esti­mator for the loss probability is fi(number-of-losses-in-a-cycle) 
i= (3) fi(number-of-cells-arriving-in-a-cycle) where E indicates that the expectation is estimated from 
the data in the simulation. See, e.g. section 6 in Rubinst ein (198 1) for an extensive discussion. The 
regenerative method could not be used here because the time between regenerative states is too large. 
For example, the state in the video source model that has the largest probability y of occurring has 
a steady-state probability of 0.006247. For a sim­ulation scenario wit h 14 access lines, the mean time 
between visits to the situation where every access line is in that state is .006247 -14 = 7.25 x 1030 
frames. Even at a rate of 1013 frames a second, it would take 20 billion years to simulate this many 
frame arrivals. The probability y of a source generating less than 100 cells/frame is .404. Thus, the 
mean time between vis­its to the situation where the state of every access line is less than 100 is .404 
14 = 3.22 x 105 video frames. This is only 920 sec or 5.85 x 108 cells of real time. It takes 2 minutes 
for each of the processors cm the Mas-Par to simulate this many frames. While the regen­erative met hod 
is not feasible, an almost regenerative approach is. Because of the difficulty in finding regenerative 
events that occur frequently enough, the almost re­generative method was proposed by Crane and Igle­hart 
(1975b) and followed up by Gunther and Wolff (1980). The examples in these papers are the M/M/l queue 
in the former and a pair of M/M/c queues in tandem in the latter. The processes considered were continuous-time, 
so an almost regenerative event is defined in the following way. Partition the state space into disjoint 
sets, U and V say. An almost regenera­tive event occurs when a transition from some state u c U to some 
other state v ~ V occurs. Our process is discrete-time and our almost regen­erative event is the entrance 
to some set of states, W say. This raises the following issue. In discrete time, when a regenerative 
event occurs, the next oc­currence is the very next epoch when the regenerative event occurs. This means 
that a transiticm from the regenerative state to itself can occur. Shall we re­quire an almost regenerative 
event to leave W, as the continuous-time definition requires, or shall we allow transitions from state 
w E W to state WI ~ W to form a cycle? Denote these alternatives by method I and method II respectively. 
We will seek guidance by analyti­ cally analyzing the effects of choosing method I or method II on simulations 
of the M/M/l/k queue. The purpose of the simulation is to estimate the loss probability. In the Appendix 
it is shown that when W=-(o, l,..., b 1} and entrance into VV is treated as a regenerative event, method 
II provides the ex­ act solution and method I does not. This means that method II produces an asymptotically-umlbiased 
esti­ mate and method I does not. ALMOST REGENERATIVE SIMULA-TION OF THE ATM BUFFER The almost regenerative 
set S(W) in our experiments is defined to be the set of states where the buffer is empty and the current 
state of each access line is less than a watermark W, i.e. each access line sent W or fewer cells in 
its last input frame. The first condition is satisfied by most states in a simulation since the buffer 
is almost always empty for low loss rates. To be a truly regenerative state, all of the states with in­put 
less than W should have the same outgoing paths. This is not the case here. However, the transition ma­trix 
M in equation 2 has the discrete autoregression DAR(1) form pl + (1 p)Q where every row of Q is identical. 
Since every row of Q is identical, when a line changes state, the new state is independent of the original 
state. Since the buffer overflow events are rare and have long periods between them, a plausible assumption 
is that every line will change before the next overflow condition. Thus, the almost regenera­tive approach 
is a plausible approximation. The simulation model is the same as shown in Table 1, namely 14 access 
lines, a 436 cell buffer, a DS-3 rate output line, and a video source with mean of about 130 cells per 
tlame. The watermark W was chosen to be 105, so the regenerative set consisted of all states where the 
buffer is empty and each access line is send­ing less than 105 cells per frame. In the experiments reported 
here, a transition from one state in the re­generative set to another state also in the regenerative 
set is considered to be a complete regenerative cycle. This is consistent with the analysis of the M/M/l/k 
queue in the previous section. Bias can arise when doing multiple independent simulations in parallel 
if the completion time of the simulation on one pro­cessor effects the completion time of the other sim­ulations. 
Heidelberger (1988) and Heidelberger and Glynn (1991) have given some estimators that are un­biased as 
the number of processors or the simulation length goes to infinity. We tried two of them. For the first 
estimator, after a processor has run for a fixed time T, it is allowed to complete its current regenerative 
cycle and then stops. This corresponds to Heidelberger s #2 (1988). Let loss; be the number of cells 
lost in the simulation on processor i and totali be the total number of cells on the processor. Then 
the p2 estimator for the simulations run on a set of processors P is given by: For the other estimator, 
only the processors that have not completed a cycle by time T are allowed to Table 2: V2 Estimator using 
Almost Regenerative Simulation with T = 8 x 107 frames P exp 1 all mean std mean std x10s x 10s x 10s 
x108 128 1.3476 0.585 1.3195 0.590 1024 1.3482 0.179 1.3196 0.205 2048 1.3483 0.168 1.3197 0.158 4096 
1.3485 0.138 1.3197 0.123 8192 \ 1.3485 0.547 1.3197 0.735 16384 I 1.3484 -1.3197 0.541 Table 3: p3 
Estimator using Almost Regenerative Method with T = 8 x 107 frames P ezp 1 all mean std mean std x 108 
x 108 x 108 x 10s 128 1.215 0.800 1.271 0.909 1024 1.203 0.276 1.259 0.337 2048 1.201 0.229 1.256 0.255 
16384 1.197 - 1.253 0.120 continue. The other simulations stop and the data from their unfinished cycles 
is discarded. This corre­sponds to the p3 estimator from Heidelberger (1988). If ni is the number of 
cycles done on processor i, then p~ for the set P is given by: (5) 26P iEP IJ30 ) = ~(JossJ%)/ ~(totali/ni) 
 Tables 2 and 3 show results obtained using T equal to the time used in the Table 1, namely 8 x 107 frame 
arrivals. The tables show the values of the p2 and A3 estimator obtained from 6 sets of 16K proces­sors. 
Each set of 16384 simulations can be partitioned into N sets of P = 16394/N processors each. Par­titioning 
the processors into sets of 128 processors each gives 128 different estimates of the cell-loss-rate. 
Each group of 128 processors has a total of 1012 cells. Partitioning into sets of 1024 processors each 
gives 16 estimates each with 1013 cells. The column in Ta­ble 2 labeled expl shows the results of the 
first set of 16K simulations. The column labeled ail shows the combined results of the six sets. The 
Central Limit Theorem says that as the number of processors in the grouping P increases to infinity, 
the distribution of the estimates pz (P) converge to a normal distribu­tion. Figure 2 shows the QQ-plot 
(see Becker, Cham­hers and Wilks (1988) ) for the estimates of K2 given by dividing the processors into 
groups of 2048. It is normally distributed. Figure 3 shows the correspond­ing plot for the j.L3 estimator 
and again it is close to Table 4: p2 Estimator with Variable Stopping Time normal. J. Comparing Tables 
2 and 3 with Table 1, we observe that, no matter how the processors are grouped, the variance given by 
even only one run of 16K simula­tions done using the almost regenerative method is an order of magnitude 
lower than the variance given by 6 x 16K simulations using the naive method. Also, tl 4.8 X 107 1.295 
0.1554 II 1.295 m the mean given by the almost regenerative method is 1.6 X 107 1.291 0.2702 1.285 0.1689 
stable. Doing additional sets of 16K runs reduced the 0.8 X 107 1.293 0.3519 1.293 4 0.2482 variance 
but did not change the mean substantially. 1000 1.2436 0.313 1.2438 0.232 The variance given by both 
the pz and p3 estima-10 1.2044 1.086 1.2032 4 0.801 tors decreases as the number of processors per group 
increases. The mean given by the p2 estimator is sta­ble while the mean given by the p3 estimator changes 
slightly. Results for the p2 estimator obtained with differ­ent values for the stopping time T are shown 
in Table 4. Reducing T from 8 x 107 to 8 x 106 events had Table 5: p2 Estimator using T = 1000 and T 
= 10 little effect on the mean but doubled the standard Events deviation. Reducing T horn 8 x 106 to 
1000 events changed the mean and variance only slightly. Reduc-nP T=1000 T= 1~1 ing T further to 10 events 
changed the mean slightly mean std mean std but increased the variance by an order of magnitude. x 10s 
x 108 x 108 x 108 The standard deviation when T = 10 is only slightly 1024 1.2438 0.466 1.2047 1.510 
less than the mean for P = 2048 and is about 2/3 of 2048 1.2436 0.313 1.2044 1.086 the mean for P = 4096. 
This is still much less than 4096 1.2438 0.232 1.2032 0.801 the standard deviation for the naive method. 
The 8192 0.143 0.685 1.2961 1.2041 + variance jumps when T = 10 as most processors stop 16384 I 1.2433 
0.122 I 1.2078 0=[ their simulations after 10 events without ever leav­ing the regenerative set. They 
contribute nothing to the numerator and little to the denominator of the p2 estimate. This effectively 
decreases the number of processors producing the estimate. Table 5 shows the p2 estimates given by T 
= 1000 and T = 10 for vary­ing values of P. As P increases the variance declines which is in accord with 
regenerative theory. Table 6: Simulation Run Length for p2 with Variable Table 6 shows the effect that 
varying the stopping Stopping Time T time has on total simulation time. It also shows the time for 97% 
and 99.7 YO of the simulations to com-II T simulation run lengi~ plete. After most of the processors 
have finished their simulations, it is easy and economical to transfer the remaining simulations and 
finish them on a worksta­tion. Reducing the time T from 8 x 107 to 8 x 106 events gave only a 25~o reduction 
in the time until 1.6 X 107 17.20 9.92 6.56 the last processor was finished, but almost a 50 Yo 0.8 X 
107 16.48 9.12 5.7 6 reduction in the time until 99.7 YO of the processors 1000 15.76 8.32 4.96 were 
finished. The reduction from 8 x 106 events to 10 10.16 4.88 1.52 J3 1000 events had only a 5 Yo to 
15 ~o effect on the sim­ulation time. The further reduction to 10 events had a much greater effect on 
running time. Table 7: Cells and Cycles per 2048 Processors with Varying Stopping Time II T cells cucles 
n mean Var mean var x 1012 x 1012 X105 x 105 8.0 X 107 25.15 0.075 16.56 0.180 4.8 X 107 16.62 0.078 
10.97 0.164 1.6 X 107 8.04 0.085 5.33 0.102 0.8 X 107 5.92 0.091 3.92 0.081 1000 3.79 0.097 2.50 0.059 
1 10 0.33 0.042 0.216 .00076 Table 7 shows the number of cells and cycles per group of 2048 processors. 
We did runs of 2.2 x 1013 cells, 4.5 x 1013 cells, and 7.4 x 1013 cells. The observed cell-loss-rates 
were 1.49 x 10-8, 1.02x 10 8 and 1.31 x 10 8 respectively. These agree with the results from the regenerative 
experiments. We divided the long workstation runs into 135 segments of 1.04 x 1012 cells and plotted 
the distribution of cell-loss-rates for the individual segments. This distribution was not normal which 
indicates that using normal sampling theory with the method of batch means is inappropriate here. 7 CONCLUSIONS 
The Markov chain simulated in these experiments takes a very long time to converge to steady-state. For 
a scenario with an average cell-loss-rate of 10 8, even runs of 1012 cells did not always produce the 
same cell-loss-rate. The regenerative approach was not applicable because the time between regenerative 
states is too long. Instead, we tried an almost regen­erative method and showed that it gave results 
that agreed with predictions from regenerative theory and with naive runs that are 1000 times longer. 
APPENDIX: ALMOST REGENERATIVE ANALYSIS OF AN M/M/l/k Queue Let Ki be the steady-state probability that 
i cus­tomers are present. It is well-known that m,(k) = T, = :_-;~:,i= 0,1,...k. (A-1) Since the arrivals 
are Poisson, m; is also the prob­ability that an arriving customer finds i customers present, and so 
Tk is the loss probability y. Let W= {0,1,... b 1}, (b < k) be the almost regenerative set of states, 
Lb be the expected number (A-2) of losses in a cycle, and ~b be the expected number of arrivals in a 
cycle. The almost regenerative estimate of ~~, ??k say, is Method II Towards obtaining formulas for 
the quantities on the right-side of (A-1), let Li (j) be the expected num­ber of losses in an interval 
that starts when an arrival finds i in the system and ends when the number in the system is no larger 
than j, i >= j, and Ci (j) be the mean length of that interval. By examining sam­ple paths it is easy 
to see that Lo(k) = Ll(k + 1) = L2(k +2) = .... and so Lo(k) = Lb(k + b), b>= O. (A-3) The regenerative 
theorem asserts that Lo(k) k = co(k) and 1 0= co(k) so Lo(k) = ~k/~0 = pk and (A-2) yields Lb-l(k) 
= f2k-b+l. (A-4) Under method I, a cycle that starts in state i < b 1 will have no losses. The probability 
y that a cycle starts in state b 1, sb 1say, is ~h 1 b-l = =;_l ~j. Thus, (5) and (A-3) yield (1 -p)pk~b 
= sb_~L5-~(k) = ~ _pb . (A-5) The same sample-path argument shows that co(k) =cl(k+l) =c2(k +2) = . 
. . . S0 substituting (A-4) and (A-6) into (A-1) and compar­ing with (5) yields &#38; = ~k for all b 
< k. Method I The mean number of losses in a cycle is L~_ ~(k) = P b 1 because every cycle starts when 
a arrival finds b 1 customers present. The mean length of a cycle is obtained as follows. Let ~ be the 
mean first-passage­time from state i to state b 1. The probability that a cycle ends in state i is given 
by The mean length of a cycle is i=o The ~ satisfy a difference equation; the solution is very messy 
and will not be given here. It suffices to note that when b = 2, m. is the reciprocal of the probability 
that an interarrival time is less than a service time, which is ( 1 + p)/p. Hence and so (A-1) gives 
,. p~ ql p) k= 2 p p~ which does not equal Xk. REFERENCES <RefA>Becker, R. A., J. M. Chambers, and A. R. 
Wilks. 1988. The New S Language: A Progmmming Environment foT Data Analysis and Graphics, Wadsworth &#38; 
Brooks, Pacific Grove, Ca, 1988. Cohen, D. M. and D. P. Heyman. 1993a. A Sim­ulation Study of Video Teleconferencing 
Traffic in ATM Networks, P? oceedzngs IEEE Infocom 93, M. G. Hluchyj and K. S. Vastola, Eds, IEEE Press, 
Los Alarnitos CA, pp 894-901. Cohen, D. M., and D. P. Heyman. 1993b. Per­formance Modeling of Video Teleconferencing 
in ATM Networks, to appear in IEEE Transactions on CiTcuits and Systems foT Video Technology. Cohen, 
D. M, C. A. Cooper, D, P. Heyman, and A. K. Reilly. (1992). A Study of Cell Loss Char­acteristics for 
Selected ATM Traffic Types, ANSI T1 standards contribution, TIA1.3/92-083 Crane, M. A. and D. L. Iglehart. 
1975a. Simulating Stable Stochastic Systems: III. Regenerative Pro­cesses and Discrete-Event Simulations, 
Operations Research, 23:33-4.5. Crane, M. A., and D. L. Iglehart. 1975b. Simulat­ing Stable Stochastic 
Systems, IV: Approximation Techniques, Management Science, 21:1215-1224. Fishman, G. S. 1974. Estimation 
in M.ultiserver Queuing Simulation, operations Reseamh, 22:72 - 78. Glynn, P. W. and P. Heidelberger. 
1991. .Analysis of Parallel Replicated Simulation Under a Completion Time Constraint , ACM Tmnsactions 
of Modeling and ComputeT Simulation, 1:2-24. Gunther, F. L, and R. W. Wolff. 1980. The Al­most Regenerative 
Method for Stochastic System Simulations, operations ReseaTch, 28:375-387 Heidelberger, P. 1986. Statistical 
Analysis of Paral­lel Simulations, 1986 Winter Simulation Confer­ence Proceedings, J. Wilson and J. Henriksen, 
Eds, IEEE Press, New York, 290-295. Heidelberger, P. 1988. Discrete Event Simulations and parallel processing: 
Statistical properties, SIAM J. Sci. Stat. Computing, 9:1114-1132. Heyman, D. P., A. Tabatabai, and T. 
V. ILakshman. 1992. Statistical Analysis and Simulation Study of of Video Teleconferencing Traffic in 
ATM Net­works, IEEE Tmnsactions on Ciwuits and Sys­tems foT Video Technology, 2:49-59. Rubinstein, R. 
Y. 1981. </RefA>Simulation and the Monte Carlo Method, Wiley, Chichester. AUTHOR BIOGRAPHIES DANIEL P. HEYMAN 
did his undergraduate work in industrial and electrical engineering at Rens­selaer Polyt ethnic Institute 
(196 O). He received an M.I.E. degree from Syracuse University (1962) and the Ph.D. in operations research 
from the University of California-Berkeley in 1966, and then joined Bell Laboratories. He transferred 
to Bellcore at the epoch of the AT&#38;T divestiture. His research areas are nu­merical analysis of stochastic 
processes, queueing the­ory, and performance models of data communications syst ems. DAVID M. COHEN did 
his undergraduate work in mathematics at Harvard University ( 1972). He received a Ph.D. in mathematics 
from the Mas­sachusetts Institute of Technology in 1976 and joined Bell Laboratories in 1981. He transferred 
to Bellcore at divestiture. His current research interests are in simulation and software engineering. 
* ml * * * 7 * * 0 * . t Cy I -2 I I I -1 0 1 Quantiles of Standard Normal Figure 2: QQ-plot of mu2 
Estimator I I 2 * / *  I I I I 1 I1 -2 -1 0 1 2 Quantiles of Standard Normal Figure 3: QQ-plot of mu3 
Estimator  
			
