
 The Spin-Off Illusion: Reuse Is Not A By-Product Michael Wasmund IBM Deutschhmd Entwicklung GmbH Postfach 
1380, D-71032 Boeblingen Abstract Based on the desire of enterprise management to jlnd a smooth, low-risk 
way of introducing reuse methodology, this paper discusses several approaches taken. The failure of the 
jirst approach, salvaging of existing soft­ware, is discussed, including its reasons. The illusion of 
using the by-product of sofware development to obtain reusable assets is the subject of the second approach. 
The third successful approach follows the software factory paradigm and has been successfully implemented 
at several IBM sites. 1.0 Introduction Large numbers of publications covering the topic of soft­wzue 
reuse have appeared within the last few years, accompanied by a variety of associated workshops and confenmces. 
Industry tells success stories (2), however, these success stories do not indicate a widespread adoption 
of reuse methodologies, The majority of soft­ware houses still struggle to change their operations to 
a more productive and efficient mode by introducing soft­ware reuse and other similar methods. The barriers 
hindering a quick adoption of reuse are described by Parnas and Biggerstaff (3,4). With the public foeus 
moving towards wide-spread utili­zation of object-oriented technologies ((X)T), the tempta­tion to believe 
00T solves all the reuse issues has become disseminated. Recent studies (6) however show that this is 
not generally the cas~ special care must taken to combine (X)T and reuse in an optimum way. Permission 
to copy without fee all or part of this material is granted provided that the copies are not made or 
distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of the Association of Computing 
Machinery.To copy otherwise, or to republish, requires a fee and/or specific permission. SSR 95, Seattle, 
WA,USA. 0 1995 ACM 0-89791 -739-1 /95/0004 ...$3.50 The organizational changes suggested by most prominent 
authors and consultants (2,7) incur for the enterprise a major up-front investment into infrastructure, 
reorganiza­tion of work and component libraries, associated with an unknown return-on-investment and 
a time-span of severii years until the investment begins to pay off. Naturally the decision makers within 
an enterprise look for a softer way to introduce muse which can be realized in a shorter time frame at 
lower cost. This paper describes two soft approaches of obtaining nmsable components taken from within 
IBM, the lessons learned, followed by a third suc­cessful example. I believe that the described approaches 
are not unique to IBM but typically followed throughout the software industry. The intent of this paper 
is to enable the reader to benefit from our lessons learned. 2.0 Ways to Obtain Reusable Software Components 
As Will Tracz (8) says, before you can start to practice reuse,theremustbereusableassetspresent.An assetmay 
be pure software, associated material such as test suites or documents, or tailomble frameworks. Tbe 
enterprise s need for reusable software components can be partially fulfilled by sotnces like class libraries 
delivered together with compilers, off-the-shelf vendor libraries, and public domain software. The fmt 
source covers the general domains of collection classes and user interfaces. The second source, vendor 
libraries, may cover more specific needs, but incurs costs and makes the enterprise dependent on the 
sources. The thi.nl source, public domain libraries, is free, but often unusable because of legal restrictions, 
unknown quality or poor maintenance. All three sources are publicly available thus weakening the business 
advantage of the individtud enterprise. Therefore, it is essential for the company to build up its own 
reusable asseta by implementing busi.. ness models and knowledge not accessible to anyone else, Different 
ways to achieve this are described in the fol­lowing sections. 219 Salvaging and Reverse Engineering 
Enterprises in general have already a wealth of software assets available The products they have delivered, 
tools amdcomponents used internally to build the products. It seems straightforward to search the existing 
software base for assetswhich are usable also for future products. This mode of obtaining reusable software 
is covered in the lit­erature: Caldiera and Basili (9) describe a tool scanning existing software for 
certain properties to speed up detection of components which might be reusable. In practical life, old 
code is scanned during less busy times for general purpose components, but very few success stories result 
from such an approach for the following reasons. Existing software is -in most cases -not reusable Tmly 
reusable software has attributes such as complete documentation, thorough testing in different environ­ments, 
a very generic interface to make its function tailorable, and independence on systern-specitlc control 
blocks, naming conventions etc.. Jeff Potdin (10) esti­mates the additional effort required to construct 
software having these attributes of reusability to be 60...100 % higher than for standard software. No 
one can afford that additional cost for normal product development. There­fore, legacy software, even 
if just two years old, does not have the required attributes of reusability. Realizing this fact, the 
searchers for reusable softwaxe attempt to modify potential modules, subroutines or classes to increase 
their reusability. Let us consider two ways of modification: Adaptation to the new project One may mcdify 
the obtained software in such a way that it fits into the new product under development. This may be 
feasible if the software is still comprehensible, but does generate divergent versions of similar software 
incurring costs of multiple maintenance. Nevertheless, this approach has some short-term benefits, the 
product development can be completed more rapidly this way rather than writing everything from scratch. 
However, reusable assets are not created with this approach, the modified software again does not have 
attributes of reusa­bility, but adds to the stack of legacy code. Maldng unique software reusable documentation. 
In the course of doing this, the software often turns out to be incomprehensible (3,4). More specif­ically, 
the overall function is clear, but the reasons for the implementation chosen by the original programmer 
 the design concept he had in mind is not clear. Modifica­tions within such a component tend to make 
it more prone to error increasing the already large cost of making old software reusable, Existing software 
is incomprehensible The documentation of existing software very often only consists of a brief explanation 
in the file header and mo~ or less detailed comments within the source code. Design documents may be 
still available, but generally are not in synchronization with the software anymore, because of several 
mtilcations shortly before shipment -a well­known problem in software production, The described situation 
increases the costs of producing the documenta­tion for the envisaged reusable software component. In 
summary, the effort and costs of making unique soft­ware reusable, are generally higher than producing 
a reus­able component from scratch. This is our experience with salvaging existing software, in line 
with Biggerstaff s observations (4,5). Product development spin-off The second way of introducing reuse 
consists of moti­vating programmers to submit software components to a library as a by-product of normal 
development. RedWine et al and Wasmtmd (12,13) describe processes supporting this approach. Several papetx 
recommend it as a fmt step towards better structured reuse. The referred process consists of giving incentives 
to programmers to submit software they believe to be reusable, screening their sub­missions by a cross-functional 
team, and depositing it in a generally accessible database for future use. The library can then be searchedby 
interested programmers. Our experience is that this approach fails, for several reasons 1. The pressure 
on the programming team to shorten development times does not normally allow for the surplus effort of 
creating reusable assets. 2. Incentives do not lead to widespread production of reusable assets,because 
the incentives are in conflict with the duties of the individuals (14), 3. The submitted software, if 
any, turns out to be not  Alternatively, one may attempt to make the existing com­ really reusable despite 
the conviction of the origi­ ponents reusable by spending significant effort in nator that it is. reworking 
the interface, additional testing, and retroactive 220 4. The submitted software rarely meets the demands 
of the required software. Even if it is certitled to be reusable by an independent team, it is not taken 
for future products. 5. The collected software components, even if reusable, do not exhibit attributes 
of a common architecture or domain. They are merely a fleamarket of softwmv artefacts. They do not conform 
to common naming conventions, their interfaces are not compatible, forcing the reuser to construct error-prone 
glue code to circumvent these deficiencies. Beyond that, such a variety of software components is not 
easy to scan, search, and understand by the potential reuser.  Conclusion Having gone through all this 
and learned hard lessons, my conclusion ix There is no soft way of building up reusable assets, because 
the short-term goals of product development groups fundamentally conflict with the goal of building up 
an asset library. The only effective way is to establish a separate team having mid-term goals based 
on the product strategy of the company and on a solidly defined overall architecture of the product line. 
The team evaluates the demand for components specific to the product thus maintaining competitiveness. 
V. Basili (7) describes a similar model called the software factory, consisting of component pro­duction 
and product assembly. The advantage of his model is a clear separation between mid-term oriented built-up 
of reusable software assetsand customer oriented short-term product delivery. Details of this approach 
need to be discussed, for example, how close should the component production group be bound to product 
assembly teams. The feedback loop between component producers and product assemblers is critical, A solid 
mid­term product strategy is an absolutely essential prerequi­site for the model, but not always easy 
to define in a fast changing marketplace. The acceptance of such a model means a transition to genuine 
industrial software pro­duction, incurring a major organizational change. Despite these critical points 
our experience has been very good using the factory approach on a small scale. The future will show whether 
the model can serve well also on a large scale. The evolving frameworks and application building kits 
(15) in the GOT world ,are important mile­stones towards software fabrication, which is a precondi­tion 
for large scale Ruse. References 1. T. Davis, Adopting a Policy of Reuse, ZEEE Spec­trum, June 1994, 
p. 44-48. 2. J. W. Hooper and R. O. Chester, S@lwzzre Reuse, Guidelines and Methods, Plenum Press, New 
York (1991), pp. 17ff. 3. D. Prunas, Software Aging, Procee&#38;ngs of 16th! Int 1 Conference on Software 
Engineering, May 16-21, 1994, Sorrento, Italy, p.279-290. 4. T. J. Biggerstaff, The Limits of Concrete 
Compo­nent Reuse, Proc. of 6th Annual Workshop on Soft­ware Reuse, Nov. 2-4, 1993, Owego, New York. 
5. T. J. Biggerstaff, Design Recovery for Maintenance and Reuse: Computer Vol. 22, No.7, 1989, p. 36-49. 
 6. A. Cockburn, The impact of object-orientation on application development; IBM Systems Journal, Vol. 
32, No.3, 1993, p.420-444. 7. V. R Basili and C. Gianlugi, A Reference Architec­ture for the Component 
Factory, ACM Transactions on Software Engineering and Methodology 1, No. 1, 53-80 (January 1992). 8. 
W. Tracz, Where Does Reuse Start?, ACM Soft­ware Engineering Notes 15, No. 2, 4246 (April 1990). 9. 
G. Caldiera and V. R. Basili, Identifying and Quali­fying Reusable Software. Components, IEEE Com­puter, 
February 1991. 10. J. S. Poulin, J. M. Caruso, and D. R. Hancock, The business case for software reuse, 
IBM Systems Journal, Vol. 32, No.4, 1993, p.567-594. 11. Garg et al., A Mets-Process for Software Reuse 
Process Discovery and Evolution. . Proc. of 6th Annual Workshop on SofWare Reuse, Nov. 2-4, 1993, Owego, 
New York. 12. S. T. Redwine and W. E. Riddle, Software Reuse Processes, IEEE Proceedings of the Fourth 
Interna­tional Sofmare Process Workshop (1988), pp, 133-135. 13. M. Wasmund, Implementing Critical Success 
Factors in Software Reuse , IBM Systems Journal,, Vol. 32, No.4, 1993,p.595-611. 14. M. Wasmund, Incentives 
versus Targets -A prac­tical Experience: Proc. of 4th IEEE Computer Society Workshop on Software Engineering 
Tech­nology Tran#er, April 28-29, 1994, Dallas, Texas. 15. M. D. Lubars, Frameworks versus Librariex 
A.  Dichotomy of Reuse Strategies, Proc, of 6?h Annual Workshop on Software Reuse, Nov. 2-4, 1993,, 
Owego, New York. 221  
			