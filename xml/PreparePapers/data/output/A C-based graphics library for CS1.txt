
 A C-Based Graphics Library for CS1 Eric S. Roberts Department of Computer Science Stanford University 
ABSTRACT This paper describes a simple gmphics library designed for a CS 1 course using ANSI C as its 
programming language. The library can be implemented easily on a variety of hardware platforms, providing 
a reasonable level of portability. Implementations currently exist for compilers on the Apple Macintosh, 
the IBM PC, and Unix workstations; the source code for each of these implementations is publicly available 
by anonymous lTP from the Roberts. c. CS1area on host aw. corn. In addition, the public distribution 
includes a fully standard implementation that generates a PostScript representation of the graphical 
image. 1. INTRODUCTION Getting college students excited about introductory programming is harder in the 
1990s than it was a decade ago. Those who have grown up with personai computers have strong preconceptions 
about what constitutes an interesting application. Modem technology has raised the ante. The simple text-based 
applications that are the mainstay of most computer science textbooks offer little excitement to the 
student who is used to modem graphical interfaces. A program that sorts a list of numbers-as interesting 
as that problem may be from an algorithmic perspective+loes not impress students who have played computer 
games for years. Using a graphics tibrary in the introductory course makes an enormous difference. Even 
when the homework problems are harder than those assigned in a more traditional come, students approach 
them with considerably more enthusiasm, which in turn enables them to accomplish more. Captivated by 
the allure of computer graphics, beginning students have been able to develop extraordinarily sophisticated 
programs. I have had students complete 1000-line programs in the fourth week of the introductory course. 
Beyond fostering excitement, using a graphics library has other pedagogical advantages. In my experience, 
requtilng students to write graphical applications early in Permission to copy without fee all or part 
of this material is granted provided that the eopiae are not made or distributed for direct commercial 
advanta~e, the ACM copyright notice and the title of the publication and I@date appear, and notice is 
given that eopyin is by permission of the Association of Computing Machinery.$ o copy otherwise, or to 
repubiish, requires a fee anctbr eeific permission. SiGCS&#38; 953/95 Nashviiie, TN USA 1995 ACM O-89791-693-x/95/0003....50.5O 
the term turns out to be the most effective way to drive home the concepts of parameter passing and stepwise 
refinement. In constructing graphical figures, students immediately recognize the importance of parameters 
as they ask themselves, for example, where to put a line or how big to make a circle. Moreover, creating 
the program structure necessary to display a graphical image encourages students to master the technique 
of decomposition. Because the graphics library itself provides only a small set of primitive operations 
such as drawing a straight line, the student quickly learns to assemble lines into rectangles and other 
composite figures. As these tigures are combined to form still larger structures, the organization of 
the image suggests a natural decomposition strategy for the program as a whole. Although these advantages 
give computer science instructors a strong incentive to integrate graphics into the introductory programming 
course, doing so is complicated by the following factorx Existing graphics packages are usually designed 
for a specific implementation platform. An IBM PC program that uses, for example, a graphics package 
designed for Microsoft Windows will not run on the same machine under DOS, much less on a Macintosh or 
a Unix system. Because of this high level of system dependence, the instructor who wants to use graphics 
must choose a particular platform and limit students to the graphical facilities available in that environment. 
 Because there is no single graphical standard that works for ail machines, textbooks written to attract 
the widest possible audience usually avoid the issue by omitting any discussion of graphics. The instructor 
is therefore forced to develop supplementary course materials that explain how to use the local graphics 
facilities.  Most graphics libraries are designed for use by experts, not in&#38;&#38;ctory students. 
As a result those libraries are often too complex for novice programmers to compmhend.  Three years 
ago, when we started to convert Stanford s introductory course from Pascal to C, we had to face these 
problems directly. The THINK Pascal system we had been using included a simple graphics library that 
was well designed for use by beginning students. Unfortunately, the THINK C compiler we chose for the 
redesigned course offered no corresponding facility. Because our experience had convinced us that using 
graphics strengthens the introductory course, we decided to design our own C-based graphics library and 
integrate it with the instructional materials being developed for the course. The remainder of this paper 
provides an overview of the graphics library and the strategies used to implement it on a diverse set 
of programming platforms. 2. INTERFACE DESIGN CRITERIA The first step in developing the graphics library 
was to defiie the interface. In addition to traditional principles of good interface design, we wanted 
to develop an interface that met the following criterh 1. It must be simple. At Stanford, we introduce 
the graphics library early in the term when students are fust learning about functions and procedures. 
Since the students have relatively few programmingg tools at their disposal, the graphics interface must 
not depend on advanced concepts such as pointers, records, or even arrays. Moreover, it should not export 
so many functions than the novice programmer cannot understand the interface as a whole. Beginning programmers 
can easily be intimidate by a large interface, even if they are not required to use all of the functions 
it contains. 2. Itmust correspond to student itiuitwn. The conceptual model that underlies the graphics 
interface must not be so mathematical or so technical that students have trouble understanding its operation. 
They have usually been exposed to Cartesian coordinate systems in high school mathematics and are now 
beginning to become familiar with the procedural programming paradigm. The design of the graphics interface 
should take advantage of that preexisting knowledge, even if the resulting conceptual model is at variance 
with the underlying model supported by the hardware 3. Itmust be powerjid enough for stu&#38;nts to 
write programs tk?y think are@. The principal advantage of the graphics library is that it allows students 
to undertake programming problems that are exciting enough to capture their imagination. For this to 
be possible, the interface to that library must export functions powerful enough to generate interesting 
graphical displays. 4. lf must be widely implementable. To ensure that our approach would &#38; m-levant 
to a variety of institutions and not just to Stanford, we believed that it was important to implement 
the graphics package on several different platforms, particularly those used most often  for introductory-level 
education. We therefore designed the interface so that it did not depend on the charactistics of any 
specific platform. In many cases, the individual criteria support one another in that design decisions 
adopted to satisfy one end up advancing the others. For example, choosing to leave a feature out of the 
interface results in a library that is not only simpler but more portable, because there are fewer features 
to implement for each new architecture. In other cases, however, the design criteria trade off against 
each other, which requires the designer to balance the competing criteria and find an appropriate compromise. 
3. EVOLUTION OF THE INTERFACE DESIGN Fortunately, we have had the opportunity at Stanford to adopt an 
evolutionary approach to the graphics library design. In each of the four quarters during the year, the 
Computer Science Department teaches two versions of the introductory programming course: CS 106A, for 
students with little or no prior programming experience, and CS 106X, which combines the material in 
the standard CS l/CS2 curriculum into an intensive one-quarter course for students with more extensive 
programming backgrounds. Both CQursesteach ANSI C using a library­based approach [Roberts93] and use 
the graphics library extensively throughout the course. Thus, we can experiment with a particular library 
design one quarter and refine it for the next. We introduced the fust version of the graphics library 
in the fall of 1992, the fwst quarter in which ANSI C was used for the entire CS106A population. At the 
time, the graphics library was very simple and included only the following operations: Initialize the 
libmry. Move the pen to a specified position on the screen. Draw a line segment with displacements 
h and dy. Draw a circle with a given center and radius. Studenta were assigned severat simple programs 
using the library and could also to take part in an optional graphics contest. The course staff evaluated 
each entry on the basis of both its artistic merit and its geometrical sophistication. In addition, I 
invited the students to suggest new features that would have helped them design an even better contest 
entry. The following are the most commonly cited sug­gestions, ranked according to how many times each 
was cited 1. Arcs (as opposed to complete circles) 2. shaded  legions 3. Simple animation (by erasing 
and redrawing a figure) 4. Color 5. Text 6. Mouse input  Having tried to design some graphical displays 
using the initial version of the library, I was quite sympathetic to the students concerns. Adding the 
features they requested would certainly make the interface more powerful and thereby make it more exciting 
for the better students. Unfortunately, adding those features would also complicate the interface, making 
it harder for other students to understand. Perhaps more importantly, adding features would make it more 
difficult to develop implementations for a variety of platforms and therefore compromise the portability 
criterion. Figure la. Functions in the graphics. h interface InitGraphics ( ) ; This procedure initializes 
the package and creates the graphics window on the screen. The Cd to the InitGraphics function is typidy 
the f~t statement in main. MovePen (X, y) ; This procedure moves the current point to the position (% 
y) without drawing a ~me. DrawLine (b, @) ; This procedure dmws a line extending from the current point 
by moving the pen h and dy inches along the respective coordinate axes. DrawArc (r , Stan, sweep); This 
proceduredrawsacirculararc,whichalwaysbeginsatthecurrentpoint. Theare itself hasradiusr, andstartsattheanglespecitledby 
theparameterstart, relative to the center of the circle. This angle is measuredin degreescountereloekwke 
from the 3 o clock position along the x-axis, as in tradhional mathematics. The fraction of the circle 
drawn is specifkxi by the parameter sweep, which is also measured in &#38;grees. If the value of sweep 
is positive, the arc is drawn counterclockwise from the current point if sweep is negative, the arc is 
drawn clockwise. The current point at the end of the DrawArc operation is the final position of the pen 
along the arc. width . GetWindowWidth ( ) ; These functions return the width and heigh~ in inches, of 
the drawing area of the height = GetWindowHeight ( ) ; graphics window. cx . GetCurrentX ( ) ; These 
functions return the current x-and y-coordinates of the pen. Like all coordinates cy . GetCurrentY ( 
) ; in the graphics package, these values are measured in inches relative to the origin. Figure lb. CS106A 
assignment using graphics. h (Lincoln Memorial) 1 My solution to this dilemma was to separate the graphics 
library into two interfaces: a simple graphics. h inkrfacz providing a minimal set of fundamental tools 
and a more elaborate ext graph. h interface offering the extended capabilities. The textbook developed 
along with the course [Roberts95] discusses only the simple 9 r aph i cs . h interfaee. Students who 
seek greater challenges, however, can use the features offered by ext graph. h. This design also promotes 
portability because an implementation that covers only the functions in graphics. h is sufficient for 
rdl the examples and exercises included in the text. At Stanford, the standard introductory course requires 
only the graphics. h interface, while the =lemted course typidy requires the use Of extgraph. h SS well. 
The contents of the current versions of each interface are summarized in Figures la and 2a Figures lb 
and 2b show assignment problems that we have used in conjunction with eaehof theseinterfaces.] 4. IMPLEMENTATION 
STRATEGIES For the most pm implementing the rendering operations required by the graphics library is 
not especially difficult. Existing graphics libraries invariably include facilities for drawing lines, 
displaying text, and filling polygonal regions, which are the only primitives the librmy requires. Thus, 
to implement the procedures that actually produce the graphical outpu~ all that is needed for eaeh implementation 
is a small amount of code to translate calls to the graphics. h interfaee into the ren dering ds required 
for the system graphics library. 1 The quilting assignment shown in Figure 2b wss designed by Stanford 
lecturer Julie Zelenski. Figure 2a. Selected functions in the extgraph. h interface DrawEl lipt icalArc 
This procedure is similar to DrawAr c in the basic graphics library, but draws an (rx, ry, start, sweep) 
; ellimical rather than a cirenlar arc. . StartFilledRegion (de?&#38;S@) ; These procedures are used 
to draw a filled region. The boundaries of the region arc . . . calls to draw lines and arcs. . . defined 
by a set of calls to the line and arc drawing functions that represent the boundaq EndFi 1 ledRegion 
( ) ; path. The parameter density is a floating-point value that represents the pixel density tc be 
used for the fdl color. DrawText String (s) ; This procedure draws the text strings at the current pen 
position. The pen position is moved so that it follows the final character in the string. The interface 
also contains functions to set the fon~ size, and style of the text. Set PenColor (color) ; The Set pencol 
or function sets the graphics package to draw in some color other tham color = Get PenColor ( ) ; the 
default black. Colors are identified by name, which makes it easier to save and De fineColor (name, r, 
g, b) ; restore the current color. By defaul~ only a small set of standard colors am defmea bui Def ineco 
lor allows clients to define new ones by specifying their RGB comrmnents. x = GetMouseX( ) ; These functions 
make it possible for the client to use the mouse to design graphical y = GetMouseY( ) ; user interfaces. 
Given these primitives, it is easy to design interfaces that provide flag . MouseButtonIsDown ( ) ; 
portable implementations of buttons, menus, and other standard interactors. 1 Pause (seconds ) ; The 
pause function forces the system to redraw the screen and then waits for the specified number of seconds. 
This function em be used to animate the displays. Figure 2b. CS106X assignment using extgraph. h (patchwork 
quilt) Similarly, it is usually a simple matter to create a new called the event loop stmtegy. Each application 
establishes window on the screen to use for drawing. Existing graphics an initial state and then enters 
a loop with the following libraries provide high-level tools for window creation, so paradigmatic form 
the Ini tGraphi c. k@t?IIIenG3tiOn Ileed Only perfOIlll the void Event Loop (void) appropriate set of 
function calls to create and position a new , twindow. Event T event; The hard part is implementing 
the conceptual model used by graphi cs, h, which is fundamentally d~ferent from while (ApplicationHasNotQuit 
( ) ) { that used in existing graphics libraries. In the typical event . WaitForNextEvent ( ) ; RespondToEvent 
(event) ; graphics library supplied with a compiler or operating }system, applications are coded using 
what is generally 1 The cdl to WaitForNextEvent blocks until a system event occurs, at which point the 
operating system delivers the event to the application, which then initiates some appropriate response. 
These events include, for example, requests to update the window, mouse clicks, and keyboard activity. 
While the event-loop partilgm is appropriate for experienced programmers, it makes little sense to students 
in an introductory course. Those students are used to writing a function called main thatexecutes sequentially, 
one statement at a time. In the fwst few weeks of a CS1 course, it is unwise to introduce a different 
paradigm. Thus, students should be able to code graphical applications that start at the beginning of 
main and execute sequentially. For example, to draw a one-inch square centered at the point (1, 1), introductory 
students expect the program to look lie this: maino { InitGraphics ( ) ; MovePen(O .5, 0.5); DrawLine 
(O, 1) ; DrawLine (1, O ) ; DrawLine (O, -1) ; DrawLine ( -1, O) ; ) This code contains no event loop 
and has no place for one. Thus, the challenge of implementing the graphics library is to find a way to 
hide the complexity of the event loop processing inside the library implementation. Fortunately, this 
problem is not as hard as it appears because most C progmmming environments already include a solution 
as part of the standard I/O library implementa­tion. Like the graphics model assumed by the graphics. 
h interface, the I/O model assumed by st dio. h is not directly compatible with the event-loop paradigm. 
For an application that uses s t di o. h to work, there IIUKt be art event loop somewhem that intercepts 
the keyboard events as they occur. From the pCrSpCCtiVeof a Client ofs tdio. h, however, the event loop 
is invisible; the program simply calls an input function, such as get char or scanf, which eventually 
returns with the desii input chamcters. To preserve the structural simplicity offered by s t d i o. h, 
microcomputer-based implementations of C typically implement the standard 1/0 library so that the required 
event-loop processing is embedded in the console input routines.2 Whenever the program waits for input 
from the standard input device, the library implementation enters an event loop, during which it responds 
to any system events that occur. Keyboard input is queued until a complete line can be returned to the 
application, but the event loop also processes update requests, so that the program behaves correctly 
if windows are repositioned on the screen. 2 In THINK C, for example, this operation is performed as 
part of the implementation of the console I/O package console. c. In the Borland C/C++ system, the same 
functionality is provided by the EasyWin package. The fact that the system must already perform the required 
event-loop processing makes it easier to implement the graphics library. In most cases, all that is needed 
is to make the existing event loop used for console I/O also respond to update events for the graphics 
window. This effect can be achieved in a variety of ways, as illustrated by the following examples: 
In the Borland C environment for Microsoft Windows, making the graphics window a child of the console 
window was sufficient to solve the proble~ because the parent window automatically delivers events to 
its children.  In the THINK C environment on the Macintosh, it was necessary to make a dynamic patch 
to the console event loop so that it also called the appropriate update procedures in the graphics tibrary. 
 9 The X Windows implementation for Unix required a different approach. In this implementation, the finction 
Ini tGraphics c~ls fork to CKZdC tWO p~el threads, connected by a communication pipe. One of those threads 
returns to execute the application code. The other enters an event loop waiting either for X events that 
require a response or for commands from the application program sent over the communication pipe. In 
addition to these platform-specific implementations, the public distribution site on aw. com also includes 
a fully standard version that does not actually display a graphical image but instead writes a PostScript 
file suitable for printing. The existence of this implementation ensures that it is always possible to 
use the simple graphics . h interface even on platforms for which no specialized implementation exists. 
5. CONCLUSIONS Our experience over the last two years at Stanford suggests that using a graphics library 
in an introductory course enhances student interest and helps reinforce several essential programming 
concepts. We have also demonstrated that it is possible to design a graphics library that can be implemented 
in a nAatively portable way. REFERENCES [Hilbnrn93] Thomas B. Hilburn, A top-down approach to teaching 
an introductory computer science course: SIGCSE Bulletin, March 1993. [Housc94] Donald House and David 
Levine, The art and science of computer graphics a very depth-fwst approach to the non-majors coursev 
SIGCSE Bulletin, March 1994. [Papert80] Seymour PaperL Windstorms, New York Basic Books, 1980. [Roberg692] 
James Roberg6, Creating programming projects with visual impact SIG(XE Bulletin, March 1992. [Roberts93] 
Eric S. Roberts, Using C in CS1: Evaluating the Stanford experience: SIGCSE Bulletin, March 1993. [Roberts95] 
Eric S. Roberts, % Arz and Science of C: A Library-Based Approach Reading, MA Addison-Wesley, 1995. 
 
			