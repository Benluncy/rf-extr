
 Preparing Scientists for Scalable Software Development Valerie Maxville iVEC 26 Dick Perry Ave, Kensington 
Western Australia Email: maxville@ivec.org Abstract Software development projects have always struggled 
to .nd the balance between domain knowledge and software engineering skills and experience. In computational 
sci­ence, this situation is in the extreme, requiring highly spe­ci.c domain knowledge paired with skills 
in tuning paral­lel programs for optimal performance on speci.c hardware. These projects often take place 
in very small teams, or by an individual researcher, who must embody both the scientist and the software 
engineer. Through observation of a range of computational sci­ence projects, and the implementation of 
rigorous software engineering methods in larger projects, we can re.ect on where to bring some of the 
formality of software engineer­ing into computational science. As part of the iVEC Edu­cation Program 
we provide training to eResearchers, which provides an opportunity to prepare scientists for software 
projects. By infusing the training program with Software Engineering principles, we can provide best 
practice es­sentials to the scientists whose code may eventually need to be scaled to multiple processors, 
platforms, sites, users and developers. By promoting easily adopted, high-return techniques, we hope 
to develop a culture where quality is intrinsic, reuse is maximised and effort can be focussed on innovative, 
robust science. 1. Introduction Science is being investigated with increasingly accu­rate simulations 
and running large numbers of scenarios to seek sets of values to match observed data. At the same time, 
technology is affecting other aspects of tradi­tional research. Computation has been used in the sci­ences 
for many decades, however, wider reliance on shared instruments, code and data has been observed as a 
shift from traditional research to eResearch (Table 1) [1]. In the UK, this phenomenon is referred to 
as eScience and Table 1. Comparison of eResearch and Tradi­tional Research eResearch Traditional Research 
Diversely skilled, dis­tributed research team Data is generated, stored and accessible from dis­tributed 
locations Large scale, or on-demand computation or access to shared instruments Reliant on Internet and 
middleware Dissemination via web­sites and specialised web portals Individual researcher or small local 
research team Data is locally generated, stored and accessible Batch compute jobs or jobs run on researchers 
own computers or re­search instruments Not reliant on the Internet Dissemination via print publications 
or confer­ence presentations in the US as Cyberinfrastructure. eResearch is research which relies on 
technology to create new avenues for un­derstanding the world and provides a template of tools for researchers: 
high performance computing, remote access to research instruments, large-scale data storage, high band­width 
data transfers, scienti.c visualisation and collabora­tive workspaces/portals. Most scientists will need 
to adapt to this new set of tools to bene.t from direct use, and to build on the shared code, work.ows 
and data of other re­searchers. Developing software for eResearch requires a high level of technical 
literacy and programming ability, and using the tools may also require strong technical expertise. Many 
scientists are exploring the value of eResearch for their re­search, while others may need to have assistance 
to upskill, or at least be able to evaluate the relevance of the wide range of technologies that are 
available. Around the world, SECSE 09, May 23, 2009, Vancouver, Canada there are efforts to make these 
technologies more accessi­ble through Grid Computing and research portals. In some cases, the scientists 
will need to cut some code, often as self-taught or with minimal exposure to the many applicable software 
engineering methods they could bene.t from. This issue has been recognised in computational science [2], 
but as uptake of eResearch and reuse of experimental code in­creases, the negative impact of poor Software 
Engineering on these research projects will compound and propagate. Unfortunately, developing software 
for research may not be considered as core to the research program, resulting in code that that is adequate 
for the task, but without qual­ity processes for development, testing or maintenance. The recent Review 
of the National Collaborative Research In­frastructure Strategy (NCRIS) in Australia highlighted the 
lack of funding for Information and Communications Tech­nology (ICT) [3] in the .rst phase of the program. 
The trend in eResearch is to share and reuse code, work.ows and data. This open approach makes it more 
important to provide documentation, consider potential reuse early and manage projects to prepare for 
increases in the scale of the code, the development team, number of supported platforms and potentially 
use high performance computing. In addi­tion, there are issues of licencing and ownership in collabo­rative 
and shared projects, which are being documented and training develeoped through projects such as OAKLaw 
[4]. All of these challenging issues need to be considered when developing a curriculum for eResearch. 
In reality, the software for computational science is not only the apparatus for generating results, 
it actually de­serves the pro.le of being critical to most new research and there be a requirement for 
quality in the code that is the foundation of eResearch. We are working to help scientists to improve 
their science through application of the lessons learned in the .eld of software engineering. In Section 
2 we describe the context considered in our course development at iVEC. We follow that with a char­acterisation 
of eResearch projects, focussing on computa­tional chemistry. An exemplar of a science project with strong 
software engineering practice, AuScope, is described in Section 4. We then describe the new curriculum 
for Ad­vanced Computing at iVEC in Section 5 and re.ect on its potential impact in the Conclusion. 2 
Background iVEC is based in Perth, Australia, and provides eRe­search infrastructure and support to Western 
Australian re­searchers and their collaborators. The Education Program at iVEC is tasked with raising 
awareness and building re­searcher expertise in eResearch. In the past this training has followed a widely 
used series of units in Message-Passing Interface (MPI) programming, propagated through the Australian 
Partnership for Advanced Computing (APAC) which were based on Edinburgh Parallel Computing Cen­tre (EPCC) 
units: Introduction to iVEC  Programming in MPI  MPI Applications and Optimisation  The units are 
typically held on three consecutive days and provide a functional and syntactic approach to using the 
supercomputers and MPI programming. After completing the three units, researchers are given technical 
support as they develop their code, with little expectation in terms of quality. Within the computational 
science ranks, this may be seen as an improvement over the self-taught approach in the past. A key, indirect 
bene.t of the courses is that the participants are able to meet the systems administrators and other 
experts at iVEC. From a software engineering perspective, code that is critical to the validity of research 
results would be expected to have far higher quality controls, particularly when state­ments are executed 
millions of times in an experimental run. The application area must be considered to understand the role 
of software in computational science: the code is their experimental apparatus, to be assembled and disassembled 
in a similar way to glassware and burners in a laboratory. This may be acceptable and considered a form 
of prototyp­ing, until the project grows in terms of number of users, number of developers, use and development 
in multiple sites and reuse for other research projects. The change in scale, responsibilities and dependencies 
requires a system­atic approach. We could wait for the growth and then ap­ply Software Engineering techniques 
and refactoring, but it may be of more value for more researchers to have a staged introduction to Software 
Engineering from the beginning. 2.1. Survey Tools We have characterised a selection of computational 
sci­ence projects to guide the focus of our curriculum to best meet the needs of eResearchers. As research 
projects use more ICT and programs such as NCRIS emphasised the value of collaboration and sharing, artifacts 
are more likely to be shared. We consider the scale and software engineer­ing uptake of six projects 
in this paper through a survey of the developers involved and from published details of the projects. 
Of interest to the study is how the scale of projects is in­creasing, and how that can indicate the software 
engineer­ing techniques that would be of value. Scale indicators that can add complexity to a project 
include the use of multi­core, parallel machines, multiple platforms and large data storage, which are 
common in eResearch. Individuals in eResearch software development are either trained scientists in 
the domain area(s), have a background in Computer Science/Software Engineer­ing/Computer Engineering, 
or a combination of the two. The project development may encompass an individual, a co-located group 
or a distributed group. The users may be internal or external, local or distributed. The use of soft­ware 
engineering or project management can range from nil to well-de.ned and implemented, as observed in the 
AuS­cope project. Also of importance in determining the rel­evant techniques is the duration of the project 
and its in­ward and outward dependencies. Although the current ap­proaches have served the community 
adequately in the past, the context has changed as software, data and work.ows are shared and projects 
need to consider quality, consistency and maintenance in support of their user-base. It may also help 
to consider the backgrounds of the developers, which may impact uptake and openness to software engineering 
techniques. When surveying the application and relevance of soft­ware engineering techniques, we use 
the Software Engi­neering Body of Knowledge (SWEBOK) [6] to de.ne the possible areas to consider (Table 
2). From the survey re­sults, we will have an indication of which Knowledge Ar­eas are most valued in 
current projects. These will guide the prioritisation of coverage of software engineering, matched to 
the progress of the projects. At all stages, the overheads to these techniques must be proportional to 
the gain in pro­ductivity or disaster avoidance they provide (and commu­nicate their value). We plan 
to sell the software engineer­ing subtly, and to emphasise the approaches as tricks to help you with 
developing good code -which will in turn improve con.dence in the scienti.c outcomes. 3. Characterising 
eResearch Projects To illustrate the range of software engineering adoption in eResearch, we will consider 
.ve projects in computa­tional chemistry. In Table 3 we characterise the .ve projects which are given 
the identi.ers CC1-CC5. The projects all provide for external users across mul­tiple platforms, and have 
durations of .ve or more years. They are large software projects, ranging from 10,000 to 320,000 lines 
of code. One of the pieces of software has over 600 papers citing its use. In most cases, the software 
is available free for academic use, but a licence is required. One of the projects is open source and 
intended for reuse as the basis for new software. Interdependencies are common, particularly with the 
need for mathematical libraries. Two of the projects (CC4 and CC5) provide a graphical front end for 
other software. These projects are not multicore, although they interact with parallel applications. 
The developers for these projects are computational Table 2. SWEBOK Knowledge Areas Knowledge Area Examples 
Requirements Design Construction Testing Maintenance Con.guration Management Engineering Management Engineering 
Process Tools and Meth­ods Quality Elicitation, analysis, speci.cation Notations. strategies and methods 
Anticipating change, planning Terminology, speci.cation-based, code-based, fault-based, usage­based Reengineering, 
reverse engineering Identi.cation of targets, tools, multi-developer Planning, estimation, risk manage­ment, 
quality management Life-cycle models and processes Tools for all KA, prototyping, for­mal methods Value 
and costs, characterisation, inspection, peer reviews, walk­throughs and testing Table 3. Scale of Computational 
Chemistry Software Projects Scale Indicators CC1 CC2 CC3 CC4 CC5 # Developers 8 1* 2 1 2 Users Ext Ext 
Ext Ext Ext Colocated No Yes Yes Yes Yes Duration 10+ 10+ 5+ 5 5 KLOC** 100 320 200 10 50 Multicore Yes 
Yes Yes No No Muliplatform Yes Yes Yes Yes Yes Outward Dep. Yes Yes Yes Yes Yes Inward Dep. Yes Yes Yes 
No No *Although others have worked on the project, one developer has control of the on-going software 
development * KLOC = 1,000 Lines Of Code chemists, with little formal training in software engineering, 
but in some projects have used a systematic approach to the development of the application. Table 4 gives 
an indication of the uptake of software engineering in each of the projects, and the value the respondent 
believes each knowledge area could have for that project. From the responses, we can Table 4. Uptake 
of SWEBOK Knowledge Ar­eas in Computational Chemistry Software Projects Knowledge Area CC1 CC2 CC3 CC4 
CC5 Requirements Design Construction Testing Maintenance Con.guration Mgmt Engineering Mgmt Engineering 
Pro­cess Tools and Meth­ods Quality A-V N-V N-V N-V N-V A-V N-V N-V N-V N-V A-V A-V A-V A-V A-V A-V A-V 
N-V N-V A-V A-V A-V A-V A-V N-V A-V A-V N-V N-V A-V A-V A-V N-I N-I A-V A-V N-I N-V N-V N-I A-V A-V N-I 
N-I A-V A-V N-I N-V N-V N-I [A=Applied, N=Not Applied]-[V=Valuable, I=Inappropriate] see that some level 
of de.ning requirements and con.gu­ration management have been used in all cases. However, Tools and 
Methods and Engineering Processes are consid­ered valuable, but are seldom used. Although Table 4 is 
of subjective nature in terms of the value of the Knowledge Areas, and the granularity of the survey 
is high, it is a positive sign that most of the items are considered to have potential value for the 
projects. The N-V are of particular interest as they are the knowledge areas that have not been applied, 
but are considered valuable -which would indicate that they are not organically coming into the software 
development in these projects, unlike con.g­uration management and requirements, which were applied and 
valued in all projects. 4. AuScope Case Study The AuScope project [7] is charged with developing world-class 
infrastructure system for Geoscience research in Australia, with 23 participants, including CSIRO, Geo­science 
Australia, 11 universities, and state government agencies. AuScope has $42.8 million in funding from 
the Australian Government under the National Collabora­tive Research Infrastructure Strategy (NCRIS) 
as Capability 5.13, Structure and Evolution of the Australian Continent. An additional $70 million in 
co-investment has been com­mitted by the participants in AuScope. Within AuScope, the Computational Geoscience 
Devel­opment Team (CGDT) is responsible for providing the in­tegrated technology to ful.ll this vision. 
The CGDT has 14 developers, including software engineers, computational scientists and mathematicians. 
The team is spread across Australia and the participating organisations and working directly with researchers 
and academics. AuScope has potential for hundreds of external users of varying back­grounds. Much of 
the work is in mulitple projects develop­ing middleware for other applications, thus there are many inward, 
outward and internal dependencies. Characterising the software engineering aspects of the project shows 
the AuScope Grid project to be mature in its use of software engineering (Table 5). A key difference 
be­tween the AuScope project and those shown in Table 4 is that there has been intent, planning and funding 
of AuS­cope s software development. Not surprisingly, this has re­sulted in more formal processes and 
planning than in the computational science projects discussed previously. How­ever, AuScope still has 
the issues of other computational science projects: they are tools for scienti.c research, sci­entists 
are the main users and the software must enable the researchers to solve problems that have not been 
attempted before.  4.1. The SCRUM Approach During the ongoing software development of AuScope, the team 
was stuggling with ever-changing requirements and software quality issues [8]. Part of the issue may 
have been that the stakeholders were members of a large project with no direct .nancial commitment. There 
was a need to improve stakeholder engagement in the process. The team evaluated many methods and chose 
SCRUM [9] which guides the application of techniques across all knowledge areas. Using SCRUM, the team 
works through a series of steps in each iteration: plan, sprint (with daily SCRUM meetings) and delivery. 
For this project, SCRUM s transparency, frequent stakeholder meetings and visibility of progress are 
particularly valuable. Each iteration, or sprint, is preceded by planning and identi.cation of tasks 
and lasts around three weeks. Within the sprint, quick daily meetings are held for team communication. 
The progress is reviewed at the end of each sprint and the result is a work­ing increment of the software. 
The process then repeats for the next iteration. Additional measures taken to improve quality in AuScope 
software development are: Formalised the informal process  Release strategies  Deployment procedures 
 Unit testing guidelines  Table 5. Uptake of SWEBOK Knowledge Ar-Table 6. Project stage and Coverage 
of SWE­eas in AuScope BOK Knowledge Areas Knowledge Area AuScope Comments Requirements Design Construction 
Testing Maintenance Con.guration Mgmt Engineering Mgmt Engineering Process Tools and Methods Quality 
A-V A-V A-V A-V A-V A-V A-V A-V A-V A-V Requirements changing, so agile approach taken Patterns Coding 
standards, daily builds Test suites continually updated and extended Post-mortem, bug­tracking Release 
management, Automated build/ contin­uous integration environ­ment Formalised process Agile -SCRUM Peer 
reviews on all tasks, static analysis tools [A=Applied, N=Not Applied]-[V=Valuable, I=Inappropriate] 
 Automated build machine  Continuous integration environment  Peer and code reviews  Static analysis 
tools (e.g. lint)  Source code control  The team has found that the SCRUM approach and ad­ditional 
measures have improved the progress and quality of the project and improved stakeholder involvement. 
Most of the software engineers on the team are in their .rst 3­10 years after graduation and were open 
and accepting of the agile techniques. The project management is strong and structured, with the overall 
vision for the project well­de.ned. The group continuously re.nes their process, and have been rewarded 
with good progress against milestones. The work to date has been primarily middleware which will be reused 
by de.nition. The bene.ts of robust middleware are being seen as user applications are developed and 
as the middleware responds to changes in standards, external code and target platforms. Knowledge Area 
Individual Group Public Requirements ++ +++ +++ Design ++ +++ +++ Construction + ++ +++ Testing ++ +++ 
+++ Maintenance + ++ +++ Con.guration Mgmt ++ +++ +++ Engineering Mgmt + ++ +++ Engineering Process + 
++ +++ Tools and Methods ++ +++ +++ Quality + ++ +++ + light ++ deeper +++ formal coverage 5. A New 
Curriculum From the key characteristics of the projects and the perceived value of the software engineering 
techniques, a model can be considered of the value of the SE techniques to generalised computational 
science projects (Table 6). As the project evolves and increases in scale and complexity, more training 
in Software Engineering and Project Manag­ment can be given. This helps us to de.ne the SE topics to 
introduce to the researchers at which point of the projects life. It is also important to consider data 
management, licencing, Open Source and what happens to the code (and data) when the project ends. All 
eResearch projects may be considered Component-based as is is common for eResearch software to be part 
of a work.ow. We have moved towards this curriculum through an in­duction program developed for the iVEC 
Research Intern program. Students take part in a full-week program includ­ing and overview of eResearch, 
revised versions of the tra­ditional MPI courses, data management, project manage­ment, reporting and 
scienti.c visualisation. We believe that the Certi.cate program can extend on this and better prepare 
the students for the software development aspect of their re­search and the potential increase in scale 
of the projects they are involved in. This is not to say it gives them a quali.ca­tion in software engineering, 
but it will provide an introduc­tion, which they can take further, when and as required. The course will 
be trialled in 2009 and offered formally in 2010. The curriculum for eResearch is designed as four units 
which can be taken individually, or as a series to achieve a Certi.cate in Advanced Computing. Required 
units are Ad­vanced Computing I and Information Management, which we consider broadly relevant to all 
eResearchers. We will offer introductory Linux, C++ and FORTRAN courses through out member universities 
and online to prepare stu­dents for entering the Certi.cate program. The current curriculum: Advanced 
Computing I -concepts in advanced com­puting, choosing solutions, parallel programming, re­quirements, 
design, testing, con.guration manage­ment, tools and methods  Information Management -storing research 
data, metadata, standards, compliance, tools  Advanced Computing II -algorithm analysis, con­currency, 
design, testing, tools  Project Management -all knowledge areas, licenc­ing, legal issues  Visualisation 
-concepts, multidimensional data vi­sualisation, geographic visualisation, user interfaces, haptics 
 Grid and Distributed Computing -concepts, grid computing, volunteer computing, BOINC API  Matching 
this curriculum to Table 6, the ++ items in the Individual column are included in Advanced Computing 
I, then extended on in Advanced Computing II along with light coverage of the + items. For researchers 
expecting to work on larger, public projects, the Project Management unit will complete coverage of the 
basics of the SWEBOK knowledge areas. We also work with the local industry and professional associations 
to run seminars on new tools and techniques, and to help form a community of eResearchers and Software 
Engineers. 6. Conclusion In this paper we consider the increasing reliance on soft­ware and ICT in research 
and the need for Software Engi­neering to support the researchers in systematic develop­ment of code. 
The Software Engineering discipline has many lessons to share with the eResearch community as they move 
into larger scale, complex, distributed, open and collaborative projects. The valued techniques seen 
in the computational chemistry projects and the experience of the AuScope project show that researchers 
and scientists are open to effective techniques that can improve communica­tion, transparency and quality. 
In planning the curriculum for Advanced Computing for this audience we can imprint good practice in the 
initial units, then consider the big pic­ture of the breadth of the SWEBOK Knowledge Areas in the subsequent 
units. In this way, we can prepare our scientists for the future of their projects, including supercomputing, 
large teams and open or commercialised software projects. Acknowledgment The author would like to thank 
Dr Daniel Grim­wood, iVEC, for information on computational chemistry projects, and Ryan Fraser and Terry 
Rankine, CSIRO Ex­ploration and Mining: Computational Geoscience Develop­ment Team, for their input on 
the AuScope project. References [1] Appelbe, B. and Bannon, D. (2007). eResearch -Paradigm Shift or Propaganda. 
Journal of Research and Practice in Information Technology. Sydney: Aus­tralian Computer Society. [2] 
Wilson, G. (2006) Where s the Real Bottleneck in Sci­enti.c Computing?, American Scientist, vol.94, no. 
1, pp. 5-6. [3] NCRIS (2008) Strategic Roadmap for Australian Research Infrastructure, Aus­tralian Government, 
Department of Innova­tion, Industry, Science and Research, URL: http://www.innovation.gov.au/ScienceAndResearch/ 
Documents/Strategic Roadmap Aug 2008.pdf [4] Open Access to Knowledge (OAK) Law Project, URL: http://www.oaklaw.qut.edu.au/ 
[5] iVEC (2009) iVEC website, URL: http://www.ivec.org/ [6] Institute of Electrical and Electronics Engineers, 
Inc., (2004) Guide to the Software Engineering Body of Knowledge, New York, NY, USA. 2004. Available 
on­line http://www.swebok.org. [7] AuScope (2009) AuScope website, URL: http://www.auscope.org.au/ [8] 
Fraser, R (2008) SCRUM in a Research Organ­isation: Experiences applying agile methodologies (SCRUM) 
to software development in a research organ­isation, Australian Software Engineering Conference (ASWEC) 
2008 -Experience Report, Perth, Western Australia. [9] Schwaber, K. and Beedle, M. (2001) Agile Software 
Development with Scrum. 1st. Prentice Hall PTR.  
			