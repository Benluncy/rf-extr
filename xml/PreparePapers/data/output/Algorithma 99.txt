
 Algorithma 99: An Experiment in Reusability &#38; Component Based Software Engineering Arturo I Concepcion 
Nathan Leach Allan Knight concep@csci.csusb.edu nleach@acm.org aknight@optivus.com California State University, 
San Bernardino Department of Computer Science Abstract This paper reports on our experience in achieving 
reusability and using component-based software engineering in the Algorithma 99 (Algorithm Animation) 
Project. We show how we extended and reused Algorithma 98 [2] into Algorithma 99 and how we prepared 
Algorithma 99 to be reused in Algorithma 2000 (to be implemented in Winter 2000). Component-based software 
engineering is not only confined to binary components, such as COM and CORBA, but is also applicable 
to software processes, architectures and design, and object-oriented libraries. Introduction Current 
literatures defme reusability and component-based software engineering as follows: Reusability is the 
ease with which software components can be used in another application with little or no re-writing of 
the code while component-based software engineering provides us with the technology to build software 
by using prepackage software components. These two topics, reusability and component- based software 
engineering, are going to impact software development of the future if we continue the use of the object-oriented 
paradigm. Already component-based development has shown very good applications in operating systems, 
distributed systems, and the Internet [5, 8, 9]. It is believed that only through software reuse that 
the software industry will be able to achieve the software productivity and quality that we will need 
for the future [7]. When we build software components, we want reusability to be the primary design goal. 
This is an added complexity to the design phase of the software because not only is the developer concerned 
about the functionalities of the component but must also consider future reuse of the component in other 
applications. Once the software Permission to make digital or hard copies of all or part of this work 
for personal or classroom use is granted without fee provided that copies are not made or distributed 
for profit or commercial advant -age and that copies bear this notice and the full citation on the first 
page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior 
specific permission and/or a fee. SIGCSE 2000 3 00 Austin, TX, USA &#38;#169; 2000 ACM 1-58113-213-1/00/0003...$5.00 
 components are created, we need a technology that will make these software components interoperable 
when they are put together. Included in the technology is the ability to obtain specifications and functionalities 
of the software components so that developers will know which components are suitable for the particular 
application. The developer is concerned with what the component does and not how the component does its 
functionality. A recent study developed a contract aware framework based on four levels of contract (syntactic, 
behavioral, synchronization, and quality-of-service) [1]. The contract aware framework was applied in 
mission-critical applications where the component is tested first for behavior before it is used. We 
report in this paper our experience in achieving reusability in the design of software components so 
that when the software components are written, it becomes easy to use them in building other software 
systems. Current discussions on component-based software engineering are not only directed toward binary 
components of COM and CORBA but also includes other types of components, such as OO libraries [6]. We 
not only reuse software components, but also software design and software development processes. Our 
experience was derived fxom developing the Algorithma Project, which is an interactive tutorial and demonstration 
package to assist computer science students in learning CS 1 and CS 2 topics. In this paper, Algorithma 
99 is an on-going project in the senior-level software engineering course in the Department of Computer 
Science, California State University at San Bernardino. The Algorithma Project is used as a test bed 
for experimenting with reusability and how to use component-based software engineering techniques in 
building software. The paper is organized as follows: In Section 2, we discuss briefly the software life-cycle 
used and the features of Algorithma 98. Then in Section 3, we show the specification of Algorithma 99 
and how the features of Algorithma 98 are enhanced and improved. We also discuss in this section the 
design (using UML) of Aigorithma 99 with reusability as the design goal. In Section 4, we discuss the 
software components in Algorithma 99 that will be used by Algnrithma 2000 (this is to be implemented 
in Winter 2000). Finally, we conclude in Section 5 and state our future directions. 162 Javax.swing.JPanel 
[ I [ I BSTWalkthrough II Figure 1: Architectural Design of the Algorithma 99 Containers  Algorithma 
98 The Algorithma Project has three goals. The first is to provide computer science students doing the 
development a sense of real-world experience in developing a large software project that is lacking in 
most upper division courses. The second is to allow other software developers to extend the capabilities 
of Algorithma by having the entire software artifacts available at the Web site. The third goal is to 
provide a tutorial and demonstration environment for teaching CS 1 and CS 2. The upper division software-engineering 
course that created the Algorithma Project was run like a software company with the instructor as the 
CEO. A project leader was chosen, as was a project management team. The rest of the class was organized 
into programming teams that would each be assigned a portion of the project to complete. The teams had 
to coordinate and integrate their work to produce a smooth and seamless running composite project. The 
best way for the teams to coordinate was to a have a common understanding of the desired results and 
a clear understanding of what was expected of their team and each individual programmer. This could only 
be accomplished by adhering to a set of established software engineering standards and procedures. The 
Algorithma 98 Project [2] was developed using an object-oriented software life-cycle called the Recursive 
Multi-Threaded (RMT) model. By using RMT the project was divided into multiple prototypes, each prototype 
was viewed as a different "thread" and may be built on a previous thread. Each thread included specification, 
planning, analysis, design, implementation, and testing phases. For more details about the RMT model, 
see [3,4]. Java was used for implementation and the Unified Modeling Language (UML) was used as the design 
methodology. Algorithma 98 has the following algorithms and data structures for demonstrations: Bubble 
Sort, Insertion Sort, Quick Sort, Merge Sort, Link List, Stacks, Queues, Double- Ended Queue, Dijkstra's 
Shortest Path, and Race. The Race feature allows a user to view the race between any two sorting algorithms 
that Algorithma 98 has. There are two kinds of GUI for viewing algorithms and data structures. The first 
is the "walkthrough" and the second is the "animation" GUI. In the first type of GUI, the flame is split 
into two. The left part contains the algorithm written in some pseudo-code while the right flame contains 
the data structures being operated on by the algorithm. As the user steps through the algorithm, one 
line at a time, corresponding action or change happens on the data structures. In the second type of 
GUI, only the data structure is shown without the algorithm pseudo-e0de. The user can observe the changes 
or actions being done on the data structure as the algorithm is executed continuously, without user intervention. 
3 Reusability in Algorithma 99 The presentation of Algorithma 98 was based upon multiple Web pages, each 
containing a Java applet that performed an animation of an algorithm. The goal of Algorithma 99 was to 
extend Algorithma 98 by adding additional algorithms while preserving the existing algorithm animations. 
The class of Winter 1999 also decided that the Web page/applet presentation made Algorithma 98 a little 
hard to follow for the end user. It was easy to get lost between applet pages, and there were a lot of 
other browser incompatibility issues that sometimes made parts of the animation's GUI hidden. The decision 
was made to create a presentation that required the loading of one applet, which would display multiple 
animations, both new animations and those from Algorithma 98. In addition to the features of Algorithma98, 
Algorithma 99 was expanded to contain the following features: Binary Search Tree, Depth First Search, 
Breadth First Search, Kruskal's Algorithm, Primm's Algorithm, an amhofing system, pre-, post-, and in-order 
tree travcrsals. 3.1 Architecture of Algorithma 99 Algorithma 98's animations all extended the AWT class 
Applet. In reviewing the Algorithma 98 code, each applet added at most two display Componentderived classes 
and 163 used the applet's Component mouse and event listening functions to direct the flow of the animation. 
A fair portion of each applet dealt with setting up the display of user interface components and the 
interaction with the user. This means each applet that was written had a fair amount of code that duplicated 
the work of the other applets. This caused some of the user interfaces to vary slightly across applets. 
The GUI team of Algorithma 99 decided that they were going to let the teams making the animations avoid 
the complexities of GUI programming, allowing them to concentrate on creating their animations. The animation 
classes would respond to external method calls to their class rather than responding directly to mouse 
and component events. This could also be done, with some slight modifications, to the animation applets 
of Algorithma 98. As the teams progressed in authoring their animations, many of the non-applet components 
of Algorithma 98 were not used. This was either because the new animations did not need the supporting 
classes of Algorithma 98 to impart how an algorithm worked, or the libraries included with the Java 1.2 
API made displaying things easier or prettier. A lot more color was used in Algorithma 99 than was used 
in Algorithma 98. This actually made it a lot easier to convert the Algorithma 98 animations over to 
the new way of handling the GUI. To use the Algorithma 98 animations, the GUI team only needed to consider 
the facts that each applet was both an AWT Container and an AWT Component. The AlgorithmaContainer was 
also both a Container and a Component class. Each class that extended the Applet class (Stack, Queue, 
Dequeue, LinkedList, lnsertionSort, QuickSort, and MergeSort) was changed to extend AlgorithmaContainer. 
The animations and walkthrough features of Algorithma 98 were reused in the components GraphAnimation 
and GraphWalkthrough [see figure 1]. The abstract methods of the AlgorithmaContainer class were used 
to determine program flow simply provided data to the existing event handlers that had been used to react 
to mouse and GUI control events as an applet. The GUI for each applet was no longer used, and each Algorithma 
98 applet functioned the same as the Algorithma 99 animations. 3.2 Reusable Software Process The RMT 
software life cycle, which was used in developing Algorithma 98, was reused in developing Algorithma 
99. A unit of development is a "thread" and the developing teams can decide on how many iterations of 
the thread to finish the entire software project. For Algorithma 99, it was decided to use two iterations. 
The first iteration was a preliminary implementation, which may contain some of the target features but 
mainly components that can be reused in the next iteration. The second iteration contained all the target 
features. Thus RMT supports the incremental development of the software project. Two such threads of 
the RMT software lifecycle were used in the implementation of Algorithma 99. The first iteration produced 
a prototype that had the majority of the GUI and classification interfaces. It also had a few completed 
animations as well as the compiler part of the authoring system. The second iteration heavily reused 
the GUI and animation components of the first iteration while extending the authoring system's compiler 
with a virtual machine. The result of these two iterations is Algorithma 99 as it stands today. One of 
the main reasons for changing the GUI in Algorithma 99 was to give the application a cohesive user interface. 
Once the user learned how to manipulate controls in one area of Algorithma 99, they would intuitively 
know how to manipulate most if not all controls in other areas of the program. This necessitated removing 
the ability of GUI presentation from those teams creating the animations. If the GUI came from a single 
source, then it limited the possibilities for GUI variances in the program. A simple set of classes was 
created to form the invisible barrier between the GUI and the animations. The first and most widely re- 
used class in Algorithma 99 was the AlgorithmaContainer class. The AlgorithmaContainer class was modeled 
after the AWT Applet class minus the complexity of being able to be contained in a platform's web browser. 
It extends the Swing JPanel class, which makes it both a Container and a Component. It assumed that it 
would be used for presenting components that were going to be mainly used as drawing contexts, and that 
no more than two of these components would ever be needed. Each added component was configured to a constant 
size, allowing the animation developers to remain blissfully unaware of the programming involved with 
making components interact with containers in a desired manner. If one component was added, it was displayed 
in the center of the container. If a second component was added, both were displayed side-by-side. The 
next part of the GUI's invisible barrier was termed the "classification interfaces." These were a set 
of abstract interfaces that defined the type of animation for each class. The top-level interface was 
the iAlgorithmaContainer interface. This provided abstract methods foi" initialization, resetting, destruction, 
and for registering controls with an animation. There were three basic types of animations: Animations, 
Walkthroughs, and Authoring systems. Each type of animation had a corresponding classification interface: 
iAnimate, iWalkBothDirs, and iAuthoring. The class of animations that were Animations (animations that 
would play through a sequence given a start command, then stop when the sequence was finished or was 
given a stop command) were further abstracted into three subtypes. Each animation would also have the 
ability to be raced against another animation. It was determined that it really only made sense to race 
sorting algorithms against other sorting algorithms and searching algorithms against other searching 
 164   I AuthoringWindow[ I I 1' I PsouOo"nvasI I Anim='on"ovasI Re,,ster rray I I Register I RegisterArray 
I , Figure 2: UML Diagram of Authoring System's Virtual Machine algorithms. There were also animations 
that could not logically be raced against another animation, and these were classified as generic animations. 
The iAnimate interface was abstracted fiJrther into the iSearchAnim, iSortAnira, and iGenericAnim. Since 
every animation extended the AlgorithmaContainer class and implemented a derivative of the iAlgorithmaComponent 
interface, we now had a way to add the animation to any container and manipulate it through its abstract 
interface. The animation itself, however, did not handle the display of any GUI components. The iAlgorithmaComponent 
interface defined a method for registering an iButtonPanel implementing component. The iButtonPanel class 
was generally a dPanel class that contained the correct buttons for the kind of animation that it was 
to control. The iButtonPanel interface defined a way to register classes of types iAnimate, iWalkBothDirs, 
and iAuthoring to be controlled. The most common control features for each type of animation were defined 
in the iButtonPanel interface, and could be enabled or disabled by the animation. The buttons implemented 
in the button panel would make calls to the appropriate methods for the derivative of MlgorithmaComponent 
it was controlling. During the testing and development phase, long before any of the final user interface 
components were completed, a simple Applet could contain the animation and implement a simple button 
panel to simulate the environment in which the animation would ultimately be imbedded. As long as the 
animation worked as an Applet, it would work in the final release.  Authoring System in Algorithma 99 
 The authoring system allows the student to enter his or her own algorithm written in some pre-defined 
pseudo-code language. Then using the walkthrough GUI of Algorithma, the student is able to "exercise" 
the user-defined algorithm by watching what actions or changes that occur in the data structure. Currently, 
Algorithma 99 can support the walkthrough of one-dimensional arrays and simple data types, such as integer, 
real and character. The authoring system was broken into three parts. The first component was the compiler, 
which was developed during the fh'st iteration, and was our indicator as to whether we could get a working 
system by the end of the second iteration. The second component, which was developed in parallel with 
the other two components, was the user interface. And finally, we developed our third component, the 
virtual machine, which brings the compiled code to life. The compiler was .broken down into two equally 
essential parts. The lexical analyzer and the parser, as is standard in any modem compiler. Due to time 
restrictions we found ourselves in need of pre-written libraries for each component. Through research 
and the Intemet, we came across two libraries that looked promising. The first was JFlex [10], for the 
lexical analyzer and the second was CUP [11] for the parser. After testing these libraries and a few 
other libraries it was decided that we should use JFlex and CUP. During the fwst iteration these two 
libraries were combined to make the compiler and we determined that we would be able to have a working, 
but limited, authoring system by the end of the second iteration During both iteration one and iteration 
two, the interface team collaborated with the authoring team to design a user interface that would work 
well with the compiler and virtual machine. Specifications were outlined as progress was made on the 
compiler. Because the compiler was th~ first to be finished a user interface for it was designed first. 
Later, when a design was agreed upon for the virtual machine, the design of the user interface was detailed. 
The last, and most difficult interface, was the interface between the compiler and the virtual machine. 
This problem was solved with a run button that passed a string of byte codes to the virtual machine to 
be animated and launched by the animation 165 window. See figure 2 for a UML diagram of the virtual machine. 
The most difficult and rewarding component of the authoring system was deciding what to do with the code 
once it was compiled. This had to be developed from scratch and be able to not only run byte code, but 
also be able to animate the byte code. It was finally decided to use a virtual machine approach. Essentially 
we defined our own simplified architecture based on the functionality of the language that was specified, 
and also loosely based on the SPARC architecture. Due to time limits, the animation was kept to a very 
limited level. The running authoring system displays highlighted code, the creation of variables and 
arrays, and the values being changed in each variable. We were also able to indicate which array index 
is currently being accessed, by drawing an arrow that points to it. This was employed because it was 
believed that the rudimentary authoring system would be best suited for simple sorting algorithms such 
as the bubble sort. Despite the authoring systems limited abilities we believe this system sets the foundation 
for expansion in Algorithma 2000 and beyond. The compiler can be made more robust by simply expanding 
the language definition files. Most likely they will add such things as compound conditionals and pointer 
capabilities. As for the virtual machine, developers of Algorithma 2000 can either add to the code or 
derive an expanded virtual machine from the original. The user interface, however, needs the least work. 
Perhaps the only change needed are to match the look of Algorithma 2000, and expansion and enhancement 
of the way the virtual machine animates the code. In any ease, we believe a solid foundation has been 
laid for the authoring system in the future. Conclusions &#38; Future Directions The first objective 
of the Winter 99 class was to build a piece of software that would be extensible and reusable by future 
Algorithma teams. The second objective was to also use the work done by previous teams to demonstrate 
reusability. Mill states that reusable software is software built by design to be reused and that also 
reuses other components. Software reuse includes reusing the products of previous software projects [7], 
which was the primary objective of the Algorithma 99 team. To have a rich set of algorithm animations, 
time would have prohibited the recreation of the set of animations previously implemented in Algorithma 
98. The issue then became: How were these Algorithma 98 animations going to be used in Algorithma 99? 
How do we put the neC¢ animations and the old animations together so that the Algorithma 2000 team won't 
have to rewrite the whole program? The solution was to take a component-based approach to putting all 
the animations together. Component-based development is the building of software systems out of prepackaged 
generic elements [6]. In the case of Algorithma 99, the other threads of the RMT process would produce 
the pre-packaged components. The class framework of Algorithma 99 is the reusable portion of the project. 
The definition of"Component Based Development (CBD)" can encompass binary components using Algorithma 
2000 will enhance and improve the authoring system feature of Algorithma 99. This feature will allow 
a student to test an algorithm if it is working properly. The student will then be able to experiment 
and understand algorithms better. The authoring system can also lead to a code generator, which will 
translate the algorithm being developed and tested into a target source code, say C/C++ or Java.  References 
[1] Beugnard, A. et. al., "Making Components Contract Aware," IEEE Computer, Jul 99, pp. 38-45. [21 
Concepcion, A. I. et. al., "Algorithma 98: An Algorithm Animation Project," In Proc. of the 30th SIGCSE 
Technical Symposium on Computer Science Education, Mar 99, pp. 301-305. [3] Concepcion, A. I. et. al., 
"The RMT (Recursive Multi- Threaded) Tool: A Computer Aided Software Engineering Tool for Monitoring 
and Predicting Software Development Progress," In Proc. of the 21st International Conference in Software 
Engineering, May 1999, pp. 660-663. [4] Concepcion, A. I. et..al., "Managing the Software Development 
by Using the Recursive Multi-Threaded (RMT) Tool," In Proc. of the Tools USA Conference, Aug 1999, pp. 
344-353. [5] Lewandowski, S., "Frameworks for Component-Based Client/Server Computing," ACM Computing 
Surveys, Vol. 30, No. 1, Mar 98, pp. 3-27. [61 Meyer, B. and Mingins, C., "Component-Based Development: 
From Buzz to Spark," IEEE Computer, Ju199, pp. 35-37. [7] Mill, H. et. al., "Reusing Software: Issues 
and Research Directions," IEEE Tran. on Software Engineering, Vol. 21, No. 6, Jun 95, pp. 528-562. [8] 
Stets, R. J. et. al., "Component-Based APIs for Versioning and Distributed Applications," IEEE Computer, 
Jul 99, pp. 54-61. [9] Wang, G. et. al., "Component Assembly for OO Distributed Systems,"IEEE Computer, 
Jul 99, pp. 71- 78. [10] JFlex, Berk, E., Princeton University, http://www.jflex.de [! 1] CUP, Hudson, 
S. E., Princeton University, http://www.cs.princeton.edu/-app¢l/modern/java/CUP/ 166  
			