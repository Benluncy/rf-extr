
 Dynamic Graphics using Quasi Parallelism Keuneth M. Kalm and Carl ilewitt Massachusetts Institute of 
Technology Artificial IntelligenCe Laboratory 14 May 1978 Abstract Dynamic coml~uter ~raphics is best 
represented as several pro.cesses operating, m parallel. Full parallel processing, however, entails ntucl~ 
c-mplex mechanism making it difficult to write siml~le, intuitive programs for generating computer an.imatiOll. 
What is presented in this papf:r is a simple means of atlainin~ the appearance of. parallelism and the 
ability to ~ oo am the ?raphics in a conceptually parallel fashion withoul the complexity of a more general 
parallel mecba||Jsn~. F:ach emily on the displa'y sc,re.en can be independently pr0gramtned to move, 
turn, change size, color or shape and to ilileract with other entities. ~ . "l-he scheme presented hczcin 
begins with the.notion of.a quantum of time, o! tick, within which there are no ordering constraii-ffs 
on events. ]~ach entity or actor decides what it must do upon the next tick..Ticks area powerful means 
of controllin K parallel puoces;cs but are usually at too low a conceptual level for user convenience. 
Higher-level operations built ul~-on .the tick n~ecl|anism are presented, most notably the ability to 
instlttct any entity or group of entities to gradually chan~e ot mow at a |ate|hat is itsel.f cha.ngeable 
by the same operation. l'o illustrate these ideas a simple celestial mechanics sinnflatiou is presented. 
Upon each tick the velocities and positio|ns of the objects are updated by the gravitational and prolmlsive 
forces acling upon them. "ricks are only one ptod|ict of an object-oriented pr%ramming sty.le. For the 
best .control and the most modularity, graphics progran.mm~?,' sliould be object oriented. Each object 
displayed, and its parts, should be independently l_~no~ramable. Instead 9f being passive data, objects 
should be responsilHe for the changes in their position or appearance. Instead of a ~,.lobal controller, 
each obje.ct should interact with the others. Parallel Processing for Dynamic .Graphie.~ Dynamic graphics 
is concerned wilh the display of changing images. Typically there are many different entities or aspects 
of entities changinf, simtnltaoeously. To reduce t.he programming complexity we represent each entity 
and Its parts as a module capable of chan?.ing its state and appearance and of interacting with other 
modules. To simplify the control of these objects wr: make them indel~endent entities and.run'them in 
pa.rallel. Each entity on the display screen cat] be thoug.bt of as a little person who can be asked 
to move, change appearance, remember and fol~,,et inlormation.. These little people,'or a~;tors, interact 
with each other to form a community. This metal:d~or of cornl~otation as a societ,y of interacting entities 
is esl)eciMly appropriate for dynamic graphics where it usually easy to av~lhrol~omorphize the images 
on'a d'isplay, whether they he of DNA strands, engine parts, simple geometric shapes. St~l~er s~0~ic 
transports, or people.. The communities can r,,'<ist at different levels, for example, there may .be 
a commnnity (,f l~cople while simultaneoualy there is a Community of arms, leg's, and heads associated 
with each l:~erson. (-).,jet-oriented computer languages .such as Smalltalk, Act I, or Director I are 
Ideal for programming in this style. l-hotL~,h re[,,ardless of computer language on.e can concepttnalize 
one's dlsplay as a community of active entities. '2 Apparent Parallelism To animate the chan~,es of m~ny 
objects simt|ltaneously one needs parallelprocessin~ or at least the appearance of having it. In this 
paper we opt fo~ the latter in.the interests of simplicity. During a tick. i~rocesses can run in any 
order, even sequentially, so long as Ihc obiccts are in the desired consistent state when the flame ends. 
If the animation is being filmed, uecorded fran|e by. frame oul video, or in the computer's memory for 
later pl.~yback then all that matters is that the display is correct '~,hen the frame is necorded, between 
recordings anything rnay happen, if animation is being displayed in real time tlwn thn time to perform 
all the actions of a tick. should he less than a refresh cycle (typically a thirtieth of a second). To 
cootdin ate and ccJnt|ol those processes we intr0dqce the notion of a lick, or a quantum of time within 
which 1. Director i~ an ol~jc~q-orwnl(*d I;mVua/rc r~lwcially desig,ed for animation and arlificlal mtrlhl_'r'nre 
application~. It wa~ de.~igned aml imph,montcd by kahw. [kalm 1OTll] All Ihe example~ in Ibis paper ,'fre 
working pVol'Vam~ in Director. 2. Of course, the" (07zVcTzi('~7(( wilh "whi(-I.t one can.program this 
way varies ./Treallv fv-oht I;mlrua~e to lan~ua£e. The object-ov'irnted pav'atlel sch,'vne I~V'e~onfe,I, 
for example, would be very difficult to implement in a"/,vv*ov'al fashion in any lan~ua/ze wl, ich did 
no! perrail the cnn~.|leic|ioi, ;In,] ~:uh~oquenl evah]aliott of code. The ahililv to modify pl;i,,i,c,,I 
a~:lion~; i~; important, ae, i~ the. ability to do par! of a plawwef| ;1eliot a¢.l plan I.n lhere~t }atler. 
 357 one is unconcerned about the order of events. All the objects have associated with them a va~iabl 
e containing a list of actions to take on the next tick. When an object .receivesa tick it does all the 
actions it had planned'for that time. in the simplest case, an animation p o? a ~ proccecls by sending 
a tick'to each object on the screen, recording or displaying the current state and repeating. It is the 
responsibility of each obje'ct to 'respond to each tick. More complexity is introduced wherl there are 
several ticks to a frame or when only certain subsets of Objei:ts are to run at a certain time. A Simple 
Example Suppose we want to animate a shape to move gradually forward. We already ha~/e a primitive, called 
"Forward" that moves an object folward l:,y causing, it to hide and reappear at its new po~itiou. I We 
could write the following simple program: REPEAT FOREVER (ASK AN-ODJEC.I I-ORWARD SPEED) (ASK SCREEN 
RECORD) The objeci called "an-ol)ject" will tic forward "speed" then the screen is recor.ded and thi~ 
J~ repeated forever. If we wanted two objects to move forward simultaneously then we could write: REPEAT 
FOREVER (ASK OBJECI.I FORWARD 5PEEDI) (ASK OBJECI2 FORWARD SPEED2) (ASK SCREEN RECORD) The need for explicitly 
usin~ ticks have not yet risen. But suppose we want '~Objectl" to go forward 300 steps and the other 
"t00 steps. Or we want "Ol~ject~" to change its speed after foul frames. The ptoL~ram becomes more and 
more unwieldy. An alternative is to explicitly use ticks as follows (as opposed to. the implicit rise 
of ticks in the previous examples) 2 (ASK OBJECT-1 SET YOUR SPEED 10 50) ; tl~is need onl~ be mentibned 
initia.ll~ (ASK OBdECI.2 SET YOUR SPEED lO 40) ; or a default could have been used (ASK OBJECTI PLAN 
NEXI GRADUAI L.Y i:ORWARD 300) ; insert (gradzzall~ forward 300} into Ob.iectl's list of action.s for 
t.he next tick (ASK OBJECT2 PLAN .NEXT GRADUAILY FORWARD 400) (ASK OBJECT,?. PLAN.AFTER 4 lICKS CIIANGE 
YOUR SPEED TO 60); '~ ticks inter cl~an,~;c speed At this point nothing has hal)pened on the display 
screen, only the plans have been associated with the objects. To run the plans and record the state there 
is a special kind of en.tity, "movies", that cause ticks to be sent to each object and the screen to 
be recorded. The sending of the message "gradually forward 300" to Objectl causes the following events 
(ASK OBOECT1 FORWARD ,50) ; ~oes forward ~0 units (it~ speed) {ASK OBJECT1 PLAN NEXt. GRADUALLY FORWARD 
250) ; plans to do the re~T ne~:t An Example from Celestial Mechanics Suppose we want to simulate the 
orbits of planets and space ships. One way to do this is to associate with each physical object another 
object corre~pondin~ ~, to i.ts velocity. The.velocity "actors have thei.r .own state and their position 
in velocity space relative to(0,0) represents their direction and magnitude. At each tick each physicalobject's 
positicin is updated by addin~ it to the position of its velocity. The velocity, itself may. beuT~dated 
in a similar manner by the thrust of the ship or by the'~ravitational pull of other massive objects. 
The tick mechanism l~rovides a means by which the different physical object~ can I~ehave in apparent 
parallelis'm. Ticks also sJml)lify the pl~ysics by reducing the problem to the computation of the chan~e 
during a small constant unit of time. In this way the integration needed to compute the position and 
velocity is alq~r.c~ximated implicitly'by the plogram~ This use of lho position of an'obJect or turtle 
to represent the velocity vector i~ similar to the approach pr.esente, d in [Abelson 1975]. First we 
define the class of pl~ysical objects by describing how to make instandes of it. how to update the state 
of an instance and how to compute tl~e ?;lavilational pull caused by an ~0bject. A subclass of p.Iwsical 
objects, space ships, are defined to do all that physical ohjects do and, in addition, know. how to thrust 
forward. Suns and planets are subclasses of physical objects witt~ no special behavior. Finally we define 
the g.ravit;~tional field which is capable of !. This example and Ihe nexl r~'h" upon a ~ompulational 
di.~play enlity calle(I a "l.urlle". "l',Jrlh'~ have a ~tate eongi~tin/; of a, position anti direelion 
an,| ro~po,.I Io it.'~a~,,'~ a~kin~ teem to go forward or !o I.urn. Mnre ,h,tail~ f'an be found in [Papert 
|971a], [Paperl. 1971b] a.,l [Cohl~te,. 107S]. 9. Thi~ paper i,~ nol |lie apl~ropriale elar'e In f,,lly 
de~cribe lee synLax of "l)ireclor. "The last of the Inllnwing ~tatemenl~ mean~ that the mes.~age (i)lan 
afh'r 4 fi~'l~ chan/,e vour.~peed Io 60) i.~.~ent to object2. 'Four tick~ lalcr obe,'(12 will receive 
tee imbe,ldrd message, i.e. (ehan/~e your ~pvrd In ~0). Thf, mlbedded messa~e'may be any me~.~a~e, lha.t 
the recipiv.! f'an re~pond to. changing the velocity of any ol~jecl hy r'xertlng tile pulls of all the 
masses that it knows about (define physical-object ol~ject ;; ntak.¢ physical-object as a kind of o!,ject 
and send if the following messages (set your mass to 10) ;; the (l<f, Tult mass (receive (make ?instance) 
now (Io ;; this enables rne to extend the normal behavior (ask :self make ,instance) ;; create the object 
as normal (ask ,instance lllan next rel)eat forever upda.te your state) ; ; on every ticl~ send ~)mt~sc![ 
the message (update ~our state) (ask velocity make (velocity-of ,instance)) ;; make a velocity/or oh./cot 
instance ) ; ; ?¢.ttt~n ttw nen,/y orated instance (receive (update your state) ;; when I get a message 
asking me to update my state (ask :self change ymw position to ;; I update my positEon by ;; I,? adding 
to my current position to .the position of my velocity ,(position-sum (ask :self recall your positibn) 
(ask (veloclty-of ,:self) recall your position))) (ask gravitational-field apply gravitational forces' 
at ,(ask :self reca1'l..your po.sition) to (velocity-of ,:sell)J) ;; I ask the gravitational ficht at 
my locat.io.n to chang'e my velocity (receive (yield pull at ?place) ;; to determine tl~e gravitational 
pull at the place (G=I i.n our units) (quotient (ask :self recall, your mass) ;; t.c~ke my mass (square-root, 
(ask :self yield dis'tance to ,place)) ; ; (tividf I,'p the square, root of my distance to the place 
to get force per second : Frames-per-second ; ; divide by this.to get force per frame : ticks-p~r-frame) 
) ) ; ; divide to. get force.' per tick (define gravil~ational-field snmething ;; make t.he field dn# 
se.nd it the followinF, messages (receive (apply gravitational forces .at ?l)lace to ?v.elocity) ;; for 
,u' to a/,/,l"~ tl~c gravitational forces at a place to a velocit~ (ask :self exert pulls of ;; I exert 
the pulls of the masses not at the /,lace ,(remove-any-at-place (ask :self recall y.our masses) place) 
on ,velocity at ,place)) ;; on the velocity (t'ecoive (exert pulls of (?first-mass %rest-of-the-masses) 
on ?velocity at ?place) ;; to exert the .~avitational pull at a point of some masses on a twlocity (ask 
,velocity move ,(ask ,first-mass yield pull at ,place) in direction from ,place to ,.(ask ,first-mass 
recall your posltlo,)) ;; move towards the mass f, om the /,lace by"the pull "(acceleration) at that 
place (ask :self exert l)lllls of ,rest-of-the-ma.sses on ,velocity at ,place)) ;; and let the ~est el 
the masses exert t.hemselves on the vrlocit~ (receive (exert pulls of () on ? at ?);; when there are 
no more masses do nothing nil)) (define velocity object);; a velocity is an object so that is can more. 
in velocity space (define ship physical-object ;; now to defineships (receive (thrust forward ?amount) 
;.; IYhen I'm asked to thrust forward (ask (velocity-of ,:self) change your heading I~o ,(ask :self recall 
your. heading)) ; ; I set the hr,lding o/ m~) velocity to my own heading (ask (velocity-of ,:self) forward 
,(quotient amoun~ (ask :self recall your mass)))) ;; and clmng," mV vclo,ir~ I,~ fraying it go forward 
the quotient of the thrust and my mas$ (draw using draw-rocket .of size)) ;; and I am drawn by the Draw-rocket 
procedmc applied to my $lze (define sun phystcal-ohject ;; a snn is also a physical~.object (set your 
angle to lO) ;; n~:+7~enov.ch to a circle (really a 36.-agon) (set your mass to log) ;; the dc/ault nmss 
of a su~i.s 100 (draw using draw-poly of size angle)) ;; I am drawn using Draw-pol~ of ,ly size and angle 
The advantages of proKramndng in this fashion are many. Computation.alentities correspond very closely 
with physically intuitive entities. Corresl:,Onding to each object in space there is an object in tile 
i)rogram complete with state and a behavioral specification. Thr, ~,ravitational field is also a s.eparate 
entity which tq,on request applies the gravitational pull of each mass to any w-locity. The ticks reduce 
the computation to that of calculating the change during a small amotmt of time. Al~r~ tilt:' nlatlxema.tics 
i/1 the.example is kept simple enn~l!,h for a ten year old by keeping the trigonometry insicle of tho 
turtle primitives for moving forward and tnrnin~ ri~,.llt. It sbouJd be clear that the program is very 
general, that an~ ntmlher of objects can exist and new ones can even be adcied or old ones removed at 
any time. Also the accuracy with which the calculations take place are easily controlled by the variable 
for the number of ticks pet frame. Figure I---A Simple Test Rml .with Two Suns and a Ship ® @ &#38;#169; 
® @ 0 ® ® @ 0 @ Q Efficiency and the Distribution of Control and Data Control and data are distributed 
in the previous examples of the use of ticks and.clhiects. There is little doubt that this reduces the 
conceptual complexity of the programming but i¢ poses many questions l e~,arding the efficiency of programming 
graphics m this manner. For example, the .lack of any globa! agenda or .~chedule might lead one to suspect 
that the distribution of tile planned actions and their times ofoccurrence is lessefficWnt. The argument 
goes as follows. If an object plans to do some action many tiCkS from now and nothing until then, tllen 
if control was based upon a global agenda then nothing need happen until that time. With the information, 
in tl~e a[.enda spread out in the objects involved the object with somethinR to do much'later still must 
be sen.t ticks in order to decrement the time it plans to do the action. This seems physically intuitive, 
but needlessly inefficient.. The cost ot an.actor processing a tick, however, can be very small.. Moreover, 
the distribution of the plans makes the cha.nging ot iilans much simpiier. An object can take its plans 
and modify thr'm arid there is no global structure that also nec;ds tn br, updated. Planning with a tick 
mechanism i~ not restricted to plans with respect t.o a particul.lr time. To plan an action to happen 
when a particular event hal)pens or condition is met can be done two waTs. ]"ither the actor involved 
can ask other actors to inform it of some event or upon every.tick it determine if some conditi(~n i~ 
true. In this way an object can plan to explode when it co]lirlcs with another or tO go forward when 
.some other actor has finished going forward. Suppose we want the ships to melt upon collisionwith a 
~unand explode if colhdiH?, with anything else. Then using ticks and messages we can arranF:,e that each 
ship a~ks the other objects where they air" on every tick, determines whether they are collicling and 
bch~ves accordingly. An alternative con.vention is to an;m?,e that on every ticks an actor corresponding 
to space (or several actors representing regions in space) checks for coihsions of" objects within it. 
This scheme is less ~eneral, but usually more efficient, than the one where each object asks ~'ach other 
for its position. For example, to have shipl explode or melt upon collision ask it the following: 360 
 (ask shipl plan to (tend ((ask ,other are you a sun) ;; if the ot./~er is a sun "(melt)) ;; then'lhe 
action is to melt (t "(explode))) ;; otherwise it is to explode after receiving colliding with ?other);; 
onl~ if receiving, a message matching (colliding with.?) If one has a nmlti-processor syslem with many 
processors then a tick mechanism can easily be.programmed to take advantage of" them. All t.he events 
that occur within a tkk are unordered except for any requirements, to serialize the acts of individual 
actors. The events are grouped by the object'involved ~nd so in terms of locality of data, one can optimize 
by running those actions of the same object on the same processor. The advantages of having ticks are 
great If one is running on parallel hardware since there is no global data structure that must be kept 
consistent and easlly accessible. Comparisons with Other Pvtrallel Dyn.~mie Graphics Systems Several 
animation systems l,ermit parallelism that is d?s~ribed and Controlled via graphical input. The approach 
taken in this paper is not an alternative to these demonstra't.ive systems but rather is complementary. 
One alternative approach was tat:ell by Pfister in the system called Dali [Pfister Iff74]. Dali is programed 
by specifying demons which fire when their tIig~eling conditions become true. The use of tickscombined 
with serializers [Atklnson 1978] is both simplier and more general since it does not make any restrictions 
ripen how reformation can flow. Some other lanf~,oa~.es are too similar to what is presented here to 
form any iml~ortant comparisons. ]=or example, $malltalk [Kay 1977] can easily lm extended to have ticks. 
Simula [Birtwistle !973]. a language which strongly influenced both Smalltalk and l.)irector, cou.ld 
also be'changed slightly to support quasi-parallelisnl for graphics. As we have seen, ticks permit the 
Slwcification of any condition for an event, while a global agenda sorted by time as in $1mula restricts 
olle to a temporal specification. Conelunions and Directions for Futuve Research One wants one's pln~,qams 
to reflect the structure of the task. Dynamic g.raphks involves the display of changes of many different 
elements arld their features. It has been at:gued that an object oriented parallel approach reflects 
this. This approach is also physically intuitive in its stress on locality and its rejection of "action 
at a distance". Programming in this style, ofw can m:~ke use of powerful metaphors from physics and think 
.of each entity as a physical object that is affected only l,y its inmwdi~te surroundings and that behaves, 
oni.ts owl] with il~ own clock. Another very useful metaphor that a l.~ro[~~anmwr can make use of !s 
that of a'society. Ju.q as in.societies we are familiar with, there are various strtJctures of cc,nnland 
and info{mation flow that map over [o object-qrJentehl con~l~nt~,tion. One direction of fuHlre re~ealch 
is to find other powerful computational coucepls f~,r the conceptualization of the display of changing 
ima~,~es. "lmlles, ticks, and objects are both programming a ~[, L~'.e constructs and ways of thinking 
about one's problems. "l'here needs to bemore0fth'em. F0rexample,,perh.allS the norton of an activity 
that an object is engaged in should be ex[,licilly represented as an actor. [n that w.ay it could r.eceive 
messages and change its plans in accordance with new ,~ve1~l~ One might also consider extending the physics 
melal,bor. Perhaps all events should be viewable only from a "frame" of reference" in a way anAlogous, 
to" relativity. T.he.~,~neralization of this idea of .taking the observer into account should apply to 
all.events, including, of 'course, the viewing of a three-dimensional object from a viewpoint. This direcHon 
for research is a.lso pointed out'in [Kay 1977b]. [Moore 1973], and [Bobrow 1977]. A related and eqt~all,,, 
important direction graphics programming should move is tow~rcls the inclusion of much more knowledge 
into the software, qhe more the system knows aboot, what tlie entitiesbeing displayed are, how they behave 
and interact the easier it becomes Io vse it. The graphics programming has been at too low a level of 
detail, we should be movfng towards syslems that knowen.ough so ]'hat a vser's p]imary effort is communicating 
what he or she wants to l]al:Jpen and not how to do it. Much of the research i!i !lle artificial intelligence 
communlty on "knowledge-based pro~ramnm]8" is very welevant to the task of making images and manil~ol;~ting 
them fn a convenient manner. The application of arHfici~l mlellif~'ence techniques to computer graphics 
is called for. One of the authors of this paper is engaged in creatin~ a system capable of producing 
.simple non-representational narrative cartoons in response to a vague, incomplete, hi.[,31-1evel description.[Ka'hn 
1977b]. The system knows enough about how characters should move and look in order to establish a personality, 
convey an emotional state, or an interpersonal interaction. Animation is morethan the simulation of a 
world, its production entails inferences, het,ristics, and knowledge. 361  
			