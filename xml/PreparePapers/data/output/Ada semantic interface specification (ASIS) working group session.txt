
 Ada Semantic Interface Specification (ASIS) Working Group (WG) Session Thomas E. Shields Paramax Information 
Systems Introduction Tool supporting such techniques as graphical design rep­resentation, interactive 
cross referencing, design valida­tion through reverse engineering, and control and data flow analysis 
can help Ada software developers adhere to good software engineering practices. However, the problem 
of efficient access by such tools to the complete representation of the semantics of an Ada program is 
a formidable task. Software development tools sensitive to Ada seman­tics require information which is 
routinely produced by validated Ada compiler front ends, but is extremely difficult to generate without 
such compiler technology. Tool vendors who do not have access to Ada compiler technology have difficulty 
offering semantically sensitive Ada tools. The resulting technology split has meant: Ada language-specific 
editors are often syntax­sensitive, but not semantics-sensitive; reverse engineering and test tools often 
work for some of Ada, but not all; graphical Ada design editors produce syntactically valid, but sometimes 
semantically invalid, Ada de­signs; and source level tools (e.g., debuggers, accurate cross references, 
program verifiers) are forced to under­stand and traverse data structures specific to a par­ticular Ada 
compiler. Some Ada compiler vendors have given third party tool developers access to Ada semantic information 
in the form of DIANA nets or other intermediate Ada rep­resentations. This form of interface is difficult 
to work with since the information is stored in complex data structures which require complex (from the 
perspective of design and implementation) processing to manipu­late. Also, the user of such an interface 
is tied to an Ada vendor-specific internal format which is suscepti­ble to data representation changes 
on the part of the compiler maintainer (e.g., performance optimizations, Ada 9X, etc.).  ASIS Description 
The Ada Semantic Interface Specification (ASIS) is a vendor-independent, non-proprietary, procedural 
inter­face (defined as a set of Ada packages specifications) that gives software tools access to the 
Ada syntactic and semantic information stored within an Ada compiler s compilation database. ASIS enables 
tool developers to access the information generated by a validated Ada compiler without having to understand 
the complexi­ties of the particular library s internal data representa­tion. This prevents tools which 
use ASIS from break­ing when the Ada library s internal data representation changes. In addition, the 
use of ASIS increases portabil­ity of tightly integrated Ada tools across Ada compiler platforms. While 
the design of ASIS is intended to meet goals similar to those of DIANA, ASIS differs from DIANA in several 
significant aspects. ASIS has been designed for ease of use by tool developers, providing an inter­face 
with a reasonably high level of detail abstraction. ASIS tools access the Ada compiler s, library informa­tion 
using a set of queries organized according to the structure of the Ada Language Reference Manual. DI-ANA, 
on the other hand, is extremely detailed, with an interface that implies a specific underlying data rep­resentation. 
DIANA also lacks important interfaces to 1993Washington Ada Symposium the Ada library management subsystem, 
which was an early requirement recognized by the ASIS effort. And finally, ASIS is being developed by 
a tool/compiler ven­dor consensus process, in stark contrast to DIANA. ASIS increases the software development 
productiv­ity of Ada tool developers and enables Ada functionality not possible with syntax analyzers 
by facilit sting large scale reuse of Ada compilation systems. The avail­ability of ASIS should increase 
the quality and avail­ability of more powerful Ada tooIs, which should stim­ulate growth of the Ada market, 
benefiting the entire Ada-related industry. Early ASIS History Cadre experienced a problem during the 
early develop­ment of a reverse engineering tool intended to analyze Ada source and generate Buhr diagrams 
with Cadre s Ada graphical editor. Cadre found that small Ada pro­grams could be analyzed and displayed 
relatively eas­ily. However, semantic analysis of complex Ada appli­cations required sophisticated technology 
and efficient represent ations of the Ada semantic information. Since Cadre did not wish to re-invent 
the wheel by bui~ding yet another Ada compiler front-end to do this, they so­licited help from the Ada 
compiler industry in solving the problem. Cadre published a reverse engineering requirements document 
in December, 1989. In response to this, Tele-Soft proposed an early version of ASIS, which had been identified 
as part of a TeleSoft internal R&#38;D project seeking to remove the complex dependencies between TeleSoft 
s Ada compiler support tools and the Ada com­piler library management subsystem. TeleSoft imple­mented 
a prototype ASIS subset designed specifically to meet Cadre s reverse engineering requirements. The integration 
of the ASIS prototype with Cadre s reverse engineering tool took place in May, 1990, and the re­sulting 
demonstration was shown for the first time at the June, 1990, AdaJUG meeting. ASIS and the STARS Program 
Early in the development of ASIS, the STARS Program recognized its potential aa a DoD and industry stan­dard. 
In late 1990, STARS began funding an investiga­tion to extend the ASIS concept to address more general 
requirements beyond Cadre s reverse engineering tool needs. A working group was proposed in December, 
1990, to provide the STARS ASIS task manager (Tom Shields) with an independent peer review of the ASIS 
effort. A secondary goal of the working group was to facilitate wider industry participation in the design 
and evolution of ASIS. The STARS ASIS working group met for the first time in February, 1991, to conduct 
a technical walkthrough of the initial ASIS draft, and to lay out the course of action for defining ASIS 
as a potential standard. Participants in this meeting came from Unisys Defense Systems (now Paramax), 
Cadre, TeleSoft, Tartan, Boeing, Rational, and Increment al Systems. Perhaps the most significant outcome 
of this initial meeting was a consensus that Rational s LRM Interface was a good model for a large part 
of the desired ASIS functionality. Rational early on in its history recognized the need to provide easy 
access to Ada semantic information. This information is accessible in the Rational environment using 
the published DIANA application programming interface. However, to insulate tool developers from the 
complexities of DIANA navigation, Rational developed the LRM Interface, which has been used by numer­ous 
Rational customers as a basis for developing Ada semantic-sensitive tools with great success. This inter­face 
offers a query-like callable interface to the semantic representation of Ada programs stored in the Rational 
environment. Under the umbrella of the STARS Program, Rational was convinced to contribute the LRM Interface 
spec­ifications to the STARS ASIS project. With the en­couragement and support of the STARS ASIS working 
group, Telesoft worked with Rational and Tartan to in­corporate this functionality as part of the ASIS 
defiri tion, eliminating dependencies on DIANA and other R,a­tional environment specific mechanisms. 
In May, 1991, an ASIS draft reflecting the merger of the early Tele-Soft work with Rational s LRM Interface 
was delivered to the STARS ASIS working group membership (which had grown to include a Logicon representative), 
and a technical walkthrough was held in June. Resolution of the numerous comments from this meeting resulted 
in the development of a final major draft revision prior to completion of proof-of-concept implementations 
of the specification. STARS funded proof-of-concept proto­typing activities of subsets of ASIS by both 
TeleSoft and Tartan on their respective compilation technologies in an attempt to insure the vendor independence 
of the interface. The ASIS project was funded by STARS through about July, 1991. Following the end of 
the STARS­funded activity, TeleSoft extended its prototype into a product, based on the final STARS ASIS 
definition (draft version 0.4, subsequently revised slightly as ver­sion 1.0, based on TeleSoft s implementation 
experi­ences). The TeleSoft product began shipping to cus­tomers in January, 1992. The version 1.0 ASIS 
specifi­cation has proven to be robust enough to support on­ 1993 Washington Ada Symposium going production 
tool implementations. Nevertheless, enhancements were recently incorporated into version 1.1 by the working 
group, based in large part on lessons learned from TeleSoft s user community usage experi­ences. With 
the loss of significant STARS Program funding for the ASIS initiative (due to changes in the STARS Program 
priorities, not due to a lack of interest or dis­satisfaction with the results), several of the most 
ac­tive members of the STARS ASIS working group began an ASIS publicity and lobbying campaign in an effort 
to transition ASIS to a new public forum for contin­ued evolution. The STARS Program provided a small 
amount of administrative support for this effort. Partic­ipation and interest in the ASIS initiative 
was expanded to include additional compiler vendors and significant end-users (e.g., CASE tool developers). 
At WAdaS 92, the Ada Joint Program Office publically announced in­terest and sponsorship of further ASIS 
evolution, which helped to foster an even wider industry interest. ASIS now has the support of the Ada 
Board, many Ada tool builders (both commercial tool vendors as well as corpo­rate internal tool developers), 
and all major Ada com­piler vendors. In fact, several Ada compiler vendors (Alsys/TeleSoft, Verdix, and 
Rational) currently offer or have announced near-term plans to support ASIS in their products. On November 
17, 1992 at the Tri-Ada conference in Orlando, Florida, the ASIS Working Group (ASISWG) was formally 
chartered under SIGAda. ASIS Working Group The ASISWG Charter states: The purpose of this working group 
is to develop and participate in standardizing an implementation independent application pro­gramming 
interface to allow retrieval of the information stored within an Ada compiler s compilation database. 
The initial goal of the working group is to further develop and promote the Ada Seman­tic Interface Specification 
(ASIS) version 1 for Ada 83. The working group will then develop ASIS for Ada 9X, and will work towards 
its adoption as an international standard. Membership in the working group is open to any interested 
party. Current members in­clude representatives of Ada compiler vendors, CASE tool developers, application 
developers, and other users. Members are responsible for their own expenses. ASIS defines a vendor independent 
interface for accessing both the syntactic and semantic information stored within an Ada compiler s library 
for an Ada compilation unit, including the information relating independently com­piled units. The definition 
and operational se­mantics of ASIS are specified using Ada pack­ages, with supporting commentary to describe 
the semantics and usage of operations. The Ada package specifications that compose ASIS are in the public 
domain, and each ASIS ven­dor is expected to provide a compliant imple­mentation. The ASIS definition 
is available in ftp/public/asis on the ajpo.sei.cmu.edu host. Current ASISWG officers: Chair : Tom Shields, 
Paramax shields@ stars .reston.paramax. com Vice-chair : Steve Blake, Alsys/Telesoft sblake@telesoft. 
com Publicity/ : Luba Vladavsky, Logicon Meetings chair luba@ajpo.sei.cmu. edu Recorder : Clyde Roby, 
IDA roby@lida.org Vice-recorder : Dan Cooper, Boeing danc@r1000.hoeing.com Archivist : Gary Barnes, Rational 
geb@rational.com Secretary : Philip Thambidurai, SoHaR Inc. philt%ohar.socal .com ASIS electronic mail 
forums: asis@stars.restorl. paramax. tom: ASIS defini­tion issues  asis-infot%t ars.rest on.paramax. 
com: meet ing announcements, minutes, etc.  To join a forum, send email to <forum>­request @k.tars.reston. 
paramax. com. 1993 Washington Ada Symposium 
			