
 Is a Strategy for Code Smell Assessment Long Overdue? S. Counsell, R.M.Hierons, S. Black M. Durrand 
H. Hamza Department of Information and change-s.com Department of IS and Computing Software Systems Westminster 
Borough BrunelUniversity,Uxbridge,UK UniversityofWestminster London Harrow Campus, London, HA1 4TP 
Steve.Counsell@brunel.ac.uk Mark.Durrand@change-s.com sueblack@gmail.com ABSTRACT Code smells reflect 
code decay and, as such, developers should seek to eradicate such smells through application of deodorant 
in the form of one or more refactorings. However, a dearth of studies exploring code smells either theoretically 
or empirically suggests that there are reasons why smell eradication is neither being applied in anger, 
nor the subject of significant research. In this paper, we present three studiesassupporting evidence 
for this claim. The first is an analysis of a set of five, open足source Java systems, the second an empirical 
study of a sub-system of a proprietary, C# web-based application and the third, a theoretical enumeration 
of smell-related refactorings. Key findings of the study were first, that developers seemed to avoid 
eradicating superficially simple smells in favor of more obscure ones; second, a wide range of conflicts 
and anomalies soon emerged when trying to identify smelly code. Finally, perceived effort to eradicate 
a smell may be a key factor. The study highlights the need for a clearer research strategy on the issue 
of code smells and all aspects of their identification and measurement. General Terms Your general 
terms must be any of the following 16 designated terms: Measurement, Experimentation, Languages. Keywords: 
Code smells, refactoring, empirical studies, Java, C#. 1. INTRODUCTION Bad code smells are a concept 
described in Fowler [5] to denote code that screams out to be refactored. In other words, it is code 
that is decaying and, unless eradicated, is likely to be the cause of frequent future maintenance, Permission 
to make digital or hard copies of all or part of this work for personal or classroom use is granted without 
fee provided that copies are not made or distributed for profit or commercial advantage and that copies 
bear this notice and the full citation on the first page. To copy otherwise, or republish, to post on 
servers or to redistribute to lists, requires prior specific permission and/or a fee. WETSoM 10, May 
4, 2010, Cape Town, South Africa. Copyright &#38;#169; 2010 ACM 978-1-60558-976-3/10/05 $10.00. potential 
faults and associated testing overheads; eradication of a smell is usually achieved through application 
of a single, or set of, refactoring/s and twenty足two different code smells are described by Fowler in 
[5]. While the related topic of refactoring has been the subject of a significant number of research 
and other studies [1, 3, 9, 14, 16, 17, 18, 20], the empirical and theoretical study of code smells seems 
to have been largely overlooked by the research community. And yet, it is a problem with strong industrial 
resonance. In this paper, we describe three studies ofsupportingevidence to justifyour controversial 
stance. The first is a study of multiple versions of five, Java open-source systems (OSS) [4] from which 
extracted refactorings, when reverse engineered, showed little empirical propensity on the part of the 
OSS developers to eradicate smells. The second is an empirical examination of two versions of a proprietary 
C#, web足based system in which we point to why even identifying simple smells poses difficulties and raises 
both conflicts and anomalies. Finally, we present a smell-to-refactoring theoretical justification for 
why some smells may be prohibitive for developers. The remainder of the paper is organized as follows. 
In the next section, we present the motivation for the work. We then present each ofthe three studies 
in the order described with supporting data (Sections 3, 4 and 5, respectively). We then finalize with 
conclusions and future work (Section6). 2. MOTIVATION The research in this paper is motivated by one 
over足arching research question. Why, if the eradication of code smells provides such obvious potential 
benefits and is a problem that all code might suffer from eventually, has the same topic received such 
little research attention? This question itself induces a range of other questions and motivating factors. 
First, what role does human judgment fulfill in the identification of smells? Second, what anomalies 
arise when we attempt to sniff out smells from systems? Third, what is the opportunity cost of choosing 
to eradicate one code smell over another? Finally, what theoretical considerations become important for 
the practical eradication of code smells? We cannot discount from our discussion the burden that increased 
testing places on the developer. While an evolving system can be improved through smell eradication equally, 
leaving a system to fester is a problem simply stored-up and growing for later on. In terms of related 
work, research into code smells started promisingly, but seems to have petered out more recently. Two 
notable studies of code smells were undertaken by Mantyla and Lassenius [12, 13] who conducted an empirical 
study of industrial developers and their opinion of smells in evolving structures. The study gave insights 
into which smells developers most understood and hence they would be most likely to eradicate the Large 
Class smell featured prominently. A well-known taxonomy for allocating code smell was also proposed by 
Mantyla in [15]; in subsequent work, Mantyla and Lassenius also describe mechanisms for making refactoring 
decisions based on smellidentification[14]. RecentresearchbyKhomhetal. explored code smells using a Bayesian 
network approach [11] and, even more recently, from looking at changes made to a system as a basis for 
smell identification [10]. Counsell et al. established a link between refactoring and code smells in 
terms of in-and out-degrees on a dependency diagram [1] supported with empirical OSS data. Finally, Hamza 
et al. [7] provide an in-depth deconstruction of both Fowler s and Kerievsky s code smells [9] in an 
attempt to determine their overlap. In the next three sections, we describe two empirical studies and 
one theoretical study which question the viability of approachesto smell identificationand eradication. 
 3. OPEN-SOURCE SYSTEMS 3.1 Data analysis As a first part of our smell analysis, we use data fromfive, 
open-source Java systems as a basis. The five systems studied were: 1. Antlr. A framework for constructing 
compilers and translators using a source input of Java, C++ or C#. Antlr began with 153 classes and 31 
interfaces. The latest version had 171 classes and 31 interfaces (five versions were studied). 2. PDFBox. 
A Java PDF library allowing access to components found in a PDF document. The initial system had 135 
classes and 10 interfaces; the latest version of six had 294 classes and 52 interfaces. 3. Velocity. 
A template engine allowing web designers to access methods defined in Java. Velocity began with 224 classes 
and 44 interfaces. At the ninth version, it had 300 classes and 80 interfaces (nine versions were studied). 
 4. Tyrant. Agraphical-based,fantasyadventure game. Incorporates landscapes, dungeons and towns. The 
system began with 112 classes and 5 interfaces. Atthe ninthversion, it had 138 classes and 6 interfaces 
(nine versionswere studied). 5. HSQLDB. A relational database application supporting SQL. HSQLDB started 
with 52 classes and 1 interface. The latest version had 254 classes and 17 interfaces (four versionswere 
studied).  Occurrences of fourteen specific refactorings were extracted from multiple versions of these 
systems as part of an earlier study documented in [1]. The fourteen refactorings were chosen by two industrial 
developers as those most likely to be undertaken on a day-to-day basis and to range across OO concepts 
such as encapsulation and inheritance. Simpler refactorings for renaming/moving fields and methods were 
also included. The same refactorings were extracted by a bespoke tool [1] and (in ascending order of 
frequency found in the five systems) are as follows: a) Least Frequent: Encapsulate Downcast. A method 
returns an object that needs to be downcasted byits callers [5]. b) Push Down Method. Behavior on a superclass 
is relevant onlyfor some ofits subclasses [5]. c) Extract Subclass. A class has features used only in 
some instances -a subclass for that subset of features iscreated. d) EncapsulateField. Afieldismadeprivate. 
e) HideMethod.Amethodismadeprivate. f) Pull Up Field. Two subclasses have the same field. Move the field 
to the superclass [5]. g) Extract Superclass. Two classes have similar features. A superclass is created 
and common featuresmoved. h) Remove Parameter. Parameter is unused by a method. i) Push Down Field. A 
field is used only by some subclasses. Move the field to those subclasses [5]. j) Pull Up Method. Methods 
with identical results are moved to the superclass. k) Move Method. Method is moved to another class. 
l) AddParameter. Parameterisaddedtoamethod. m) Move Field. Field is moved to another class. n) Most Frequent: 
Rename Method.  3.2 Study question As part of the smell analysis, we first pose the question: Given 
the set of refactorings extracted from the five systems, which combination of those refactorings, applied 
to the versions of the five systems, have been used to remedy code smells? In other words, do developers 
actually refactor (whether consciously or otherwise) to remedy smells and, if so, to what extent? The 
total set of 891 refactorings extracted by the tool was thus analyzed on a version-by-version basis to 
determine which smells they eradicated. (The list of refactorings required for the reverse engineering 
process was provided in Fowler [5] and Appendix A gives the full list of 22 code smells.) Table 1 shows 
the five systems and the versions in each of the systems where some evidence of remedying of smells was 
found. For example, in versions 3 and 6 of the PDFBox system, a combination of refactorings was found 
to remedy smells 1 and 16. Column 3 of the table shows which smells were entirely remedied through application 
of refactorings. Column 4 on the other hand shows the smells which might have been remedied (n.b., other 
refactorings of the seventy-two specified in Fowler [5] might have contributed to other smell eradication). 
Table 1 shows that we can only identify two smells as definitely having been remedied (i.e., smell 1 
and 16). Smell 1 is Alternative classes with different interfaces . This smell occurs when two classes 
have a similar internal content but different external composition (i.e., in the parameter list) -they 
should be amalgamated to present a common interface. Smell 16 is Parallel Inheritance Hierarchies where 
two separate inheritance hierarchies grow dependently and where creating subclasses in one requiressubclasses 
to be created in the other. System Version Smell Remedied Partial Smells Antlr 2 1,16 7,8,19,20 PDFBox 
3 1,16 7,8,19,20 6 1,16 3,7,8,19,20 Velocity 2 1,16 3,7,8,19 3 1,16 3,7,8,19 5 1,16 3,7,8,19 6 1,16 7,8,19 
9 1 20 Tyrant 7 1 20 8 1 3,20 HSQLDB 1 1,16 7,8,19,20 2 1,16 7,8,10,19,2 0 3 1,16 7,8,10,19,2 0  Only 
6 of the remaining 20 smells might have been remedied according to column 4 (i.e., smells 3, 7, 8, 10, 
19 and 20). Some of the fourteen refactorings have also been identified as core refactorings (i.e., likely 
to be used frequently in multiple code modification scenarios, e.g., Move Method, Move Field and Add 
Parameter) [1]. This makes the result in Table 1 even more surprising. It is also worth noting that later 
versions of the five systems did not show any greater propensity for smell eradication than earlier versions 
(a result that is reinforced in the next section). The results from Table 1 highlight the popularity 
of some smells over others, but the over-riding message seems to be that only a small subset of smell 
eradications, from a small subset of versions (13 from 33) were attempted.  4. A C# PROPRIETARY SYSTEM 
4.1 Data analysis The second part of our analysisisexplorationofa C# sub足system for a web-based, loans 
system providing quotes and financial information for on-line customers; henceforward, for anonymity, 
we will refer to this system as simply ITWeb . We examined two versions of one of its sub-systems. The 
first, an early version, comprised 401 classes. A later version (henceforward version n) had been the 
subject of a significant refactoring effort to amalgamate, minimize as well as optimize classes; it comprised 
101 classes only. For the purposes of this second analysis, we focused on three smells which, arguably, 
should be easily identifiable from the source code. These were: 1. Large Class. A class is trying to 
do too much, identified by a relatively large number of methods. The class should be decomposed into 
two or more classes. 2. Long Method. A method is doing too much, identified by its large number of executable 
statements. The method should be decomposed into two or more methods. 3. Lazy Class. A class is not 
doing enough to justify its existence, identified by a small number of methods and/or executable statements; 
it should be merged withthe nearest, related class.  The SourceMonitor tool [22] was used to extract 
a set of smell-relevantmetrics fromeachversion: Metric 1: Average Methods per Class. Average for all 
class, interface and struct methods, computed as the total Table 1. Smells eradicated (and partiallyeradicated) 
 number of methods divided bythe total number ofclasses, interfaces and structs. Metric 2: Average Statements 
per Method. The total number of statements found inside a class divided by the number ofmethods. Metric 
3: Average Calls per Method. The number of calls to other methods inside all methods in a class (i.e., 
intra足coupling). Metric 4:Average Class Complexity. The number ofstatic execution paths through a method. 
This definition is in line with the defined provided by McConnell [19]. Each method has a complexity 
of 1, plus one for each branch statement (if, else, for etc and any||or &#38;operator). 4.2 Study question 
 The research question on which we analyze ITWeb is: Can we expect the three aforementioned code smells 
to occur frequently in a system when we deliberately set out to sniff them? Table 2 shows the summary 
data for versions 1 and n for the ITWeb system. We see that both the average number of methods(Metric 
1), average size of methods (Metric 2), calls per method (Metric 3) and average complexity (Metric 4) 
decrease from version 1 to version n, suggesting that the extensive refactoring that occurred between 
version 1 and n succeeded in reducing class size and complexity. The question is whether and/or to what 
extent either version presents opportunities for smell eradication? We explore each of the three listed 
smellsinthe order described to find out. Version Classes Metric 1 Metric 2 Metric 3 Metric 4 1 401 5.59 
4.03 2.24 1.70 n 101 3.35 1.79 1.29 1.13 Table 2. SummaryData for ITWeb 4.2.1 Large Class To identify 
occurrences of the Large Class (LC) smell in version 1, one route to achieving this would be to order 
classes on descending Average Methods per Class and refine the search from there. By doing this, we found 
that the class with the largest number of methods was a sealed C# class (i.e., it cannot be inherited) 
called PageController.cs. This is an architectural, pattern-based class essential for the co-ordination 
of ITWeb and contains 80 methods. (Fowler defines the page controller pattern as An object that handles 
a request for a specific page or action on a website .) Inspection of the code for this class revealed 
that each method handled one of a number of functionally cohesive requests for web page details. For 
example, there were methods to: SaveAccountDetails, SaveApplicationDetails and SaveBrokerContactDetails 
etc. The average complexity of this class was 2.08, well below the average complexity for version 1. 
The number of calls per method was 4.5, well above the average. This last metric presents a conflict: 
a strong inter-dependence and coupling between the methods in this class is generally considered to contribute 
positively to the cohesiveness of the class, but equally would pose a huge problem if we wanted to decompose 
the class. The classes with the second and third largest numbers of methods are Controller and Navigation-based 
classes (LoanSessionController.cs and PageNavigator.cs, respectively), again of similar functionality 
to PageController.cs. Ordering version n in the same way, we found that the maximum number of methods 
was 12 and belonged to a class called ResultRowDTO.cs. This is another architectural, pattern-based Data 
Transfer Object (DTO) [6]. A DTO wraps up data for transfer between two processes, possibly over a network, 
to prevent the overhead of multiple (remote) calls. Inspection of the code for this class confirmed that 
each of the 12 methods contained only a single get and set method. The average complexity of this class 
was 1, well below the average complexity for the subsystem of 1.13 and the number of calls per method 
was zero. In contrast to being a smell, this class is a key element of the system architecture and has 
desirable properties only. The median of class size was 3 for this version, reinforcingthe difficultchoice 
asto which class to choose? for this smell. The problems that arise with the LC smell are therefore a) 
deciding on what exactly constitutes a large class (a largely arbitrary choice) and, b) the fact that 
coupling between methods adds to class cohesion [2], yet makes a LC smell eradication more problematic 
due to dependencies. 4.2.2 Long Method If we turn to the Long Method (LM) smell, one way of identifying 
such a smell is to order the set of classes in each version on Statements per Method and then refine 
the search from there. If we order version 1 in this way, we find that the class ComparisonEngine.cs 
contains the method with the highest number of statements. Inspection of the code revealed this method 
to contain one large switch statement comprising 340 statements. The switch statement is actually a smell 
itself (Appendix A, number 21), since OO suggests the use of polymorphism instead [5]. However, we see 
no value in decomposing this method. Doing the same for version n, we found that the largest method was 
again a DTO class called LoanDTO.cs containing just one method. Inspection of the code revealed the method 
to be a set of similar, executable statements for returning a code to the main program depending on user-filled 
fields (e.g., combinations of Company Name, logo, payment details, payment rates, etc). The average complexity 
of this class was 5, well above the average (1.13). However, the very nature of each method (with multiple 
if statements) contributes to complexityas we have defined it and not all complexitycan be simplified. 
Two over-riding messages from the LM analysis emerge a) by necessity, some methods (often the longest) 
exist for a good reason and, b) searching out one smell can often lead to the identification of other, 
potentially harmful smells. Conversely, by avoiding some smells, we may inadvertently miss others. Moreover, 
we have to consider the possibility that smells are created due to eradication of others. While the authors 
know of a number of studies exploring the interplay between refactorings, we know of only one related 
study tackling the concept of inter足dependencybetweencode smells[21]. 4.2.3 Lazy Class If we now turn 
to the Lazy Class smell, one route to its identification would be to order classes on statements (ascending) 
and work downwards thereafter. If we order version 1 in this way, 16 classes were found to have just 
a single statement. Many of these classes were single, type足based classessimilar to that showninFigure 
1. Many other small classes with 3 statements were collection-based classes (38 classes fell into this 
category) which returned values from a collection, based on a parameter index value passed. In other 
words, each of these had a specific and cohesively tight functionality and would not, at first impressions, 
be candidates for amalgamationinto other classes. public enum FulfilmentType { None = 9, Site = 11, Ref 
= 12, BkrRef = 13 } Figure 1. Enumerated Type The complexity of such classes were also found to be slightly 
lower than average (typically 1.67 compared with  1.70 overall). Again as per the Large Class smell, 
we note a conflict between the need for a class to remain cohesive (and hence reasonably small) and the 
search for lazy (small) classes. Put another way, detecting lazy classes may be flawed by definition. 
For version n, the class with smallest number of statements was ProductDetailsModel.cs, comprising 2 
statements; this is an empty class. The next smallest is class LoansServiceAction.cs which contains 3 
statements comprising an enumerated data type only. Interestingly, 3 of the 10 smallest classes are view 
interfaces and not classes. We thus found very little opportunity for remedying these three smells in 
the ITWeb system and suggest that the problems we encountered occur generically in OO systems.  5. REFACTORINGSPERSMELL 
5.1 Data analysis As a final part of our smell analysis, we describe the potential cost in time and effort 
of undertaking each ofthe 22 code smells. The basis of the analysis is that in Sections 3 and 4, we have 
seen evidence of how limited smell eradication appears to be (Section 3) and some of the difficulties 
which arise when we attempt to sniff out code smells (Section 4). In this section, we provide a concrete 
suggestion as to why this might be the case. Earlier, we stated how each of the 22 code smells proposed 
byFowler [5] could be eradicated byapplication of one or more other refactorings. Most refactorings (as 
well as having its own steps to completion) require other related refactorings to be undertaken in a 
nested relationship. Put another way, refactoring X might require refactoring Y, which in turn might 
require refactoring Z. Each of X, Y and Z may also have other nested refactorings. All of X, Y and Z 
can be extracted from Fowler s text as remedies for each of the 22 smells. We can then posit that a factor 
inhibiting a developer addressing a code smell is the total number ofrefactorings that might need to 
be undertaken after following the chains; induced by each of X, Y and Z and used to remedy that smell. 
As part of our analysis, we therefore enumerated the refactorings that each of the smells induced and 
thiswasachieved usinga bespoke tool. Figure 2 shows the potential number of refactorings that each of 
the 22 code smells listed in Appendix A requires. It is interesting that the smells observed in Section 
4 are smells with relatively higher numbers of associated refactorings. The Large Class smell (number 
10) has 40 associated refactorings. One of the reasons why this smell requires so many refactorings is 
due to requirement for the movement of methods to a new class/es and associated dependencies (which, 
as we stated earlier, destroys class cohesiveness and forces the unpicking of all dependencies between 
methods). The Long Method smell (number 12) has 20 associated refactorings and the LazyClass (number 
11) 15 associated refactorings. As interestingly, these were the smells that we found difficult to tangibly 
identify from ITWeb. On the basis of associated refactorings as well as for the problems outlined in 
Section 4, eradicating these three smells would be ill-advised. Onthe other hand, the smells that we 
identified to be eradicated fromthe five OSS have relatively fewer required refactorings. Smell 1 actually 
has only 2 associated refactorings.and smell 16 has only 4 associated refactorings. Smells 7, 8 and 19 
and 20 have relatively more associated refactorings overall (but then again, we have no firm evidence 
that these were actually eradicated). Finally, the switch statement (smell 21) identified in one ITWeb 
class, requires 16 separate refactorings in order to be eliminated -a difficult smell to eradicate. 
Figure2. Code smellsand their refactorings It would appear that developers might well eradicate smells, 
but they tend to be smells that require little effort when compared with others. Of course, we are making 
the broad assumption that each of the refactorings in Figure 2 is identical with respect to the time 
it takes to undertake 足further work would need to refine thisthreat. Interestingly, and on a final note, 
in the developer survey carried out by Mantyla [18, 19], the Long Method smell stood out as the smell 
many developers understood the workings of most ( Long Parameter List in a method was the best understood). 
This fact seems at odds with the profile of Long Method (smell 12 from Figure 2) and the required effort 
for its eradication. Theoretically, there are compelling reasonswhydeveloper may avoid eradication of 
certain smells, even though these might be conceptuallyeasysmellsto understand.  6. CONCLUSIONS/FUTURE 
WORK In this paper, we have described three studies based on code smells, two of an empirical nature 
and the final one a theoretical analysis which attempts to place those studies incontext. The keyfindings 
of the studypresented are: a) Developers avoid eradicating the obvious smells in favor of more obscure 
ones if empirical data extracted fromsystems is used asa guide. b) A wide range of conflicts, contradictions 
and anomalies soon emerge when we first try to identify code that smells. This makes the task of identifying 
real smells problematic and possibly prohibitive. c) The projected effort in terms of related refactorings 
that need to be undertaken to eradicate a smell may also be a prohibiting factor. Several criticisms 
can be leveled at the study. To begin with, the study reinforces the idea that smells are actively sniffed 
out by developers in a smell of the week initiative. For the most part, smells do not need much sniffing 
out. In this study, we have also assumed that a developer has no feel for the effort required to eradicate 
a smell this might be na誰ve on our part. Adeveloper might detect a smell; the same developer might also 
be well aware of the relative advantages of leaving that smell to become a stench . Developers also have 
to make difficult choices as to how they allocate their time. That said, we see this work as a worthwhile 
start to establishing the parameters through which code smells on a longitudinal basis [8] can be properly 
and fully explored. Future work will focus on exploring two issues: first, the test implications of smells 
and second, on validating the practical and theoretical results with industrial developers. We urge more 
studies on smells and to assist in a small way, the data from studies 1 and 3 can be made available uponrequest 
ofthe lead author.  ACKNOWLEDGMENTS The research in this paper was supported by a grant from the UK 
Engineering and Physical Sciences Research Council(EPSRC) Grantnumber: EP/G031126/1. REFERENCES [1] 
S. Counsell, Y. Hassoun, G. Loizou and R. Najjar, Common Refactorings, a Dependency Graph and some Code 
Smells: An Empirical Study of Java OSS. Proceedings of IEEE/ACM Symposium on Empirical Software Engineering, 
Rio de Janeiro, Brazil, September 2006, pages288-296. [2] S. Counsell, J. Crampton and S. Swift, The 
Interpretation and Utility of two Object-oriented Cohesion Metrics, ACM Transactions On Software Engineering 
and Methodology, 15(2): 123-149, 2006. [3] S. Demeyer, S. Ducasse and O. Nierstrasz, Finding refactorings 
via change metrics, ACM Conf. on Object Oriented Prog. Systems Languages and Applications (OOPSLA), Minneapolis, 
USA. pages 166-177, 2000. [4] T. Dinh-Trong and J. Bieman. The FreeBSD project: A replication case study 
of open source development. IEEE Trans. SoftwareEngineering, 31(6):481--494,June2005. [5] M. Fowler. 
Refactoring (Improving The Design of Existing Code). Addison Wesley,1999. [6] M. Fowler. Patterns of 
Enterprise Application Architecture, Addison Wesley, 2003. [7] H. Hamza, S. Counsell, G. Loizou and T. 
Hall, Code Smell Eradication and Associated Refactoring, In Proceedings of the European Computing Conference 
(ECC), Malta, September, 2008. [8] C. Kemerer and S. Slaughter, An Empirical Approach to Studying Software 
Evolution, IEEE Transactions on SoftwareEngineering, 25(4), pages 493-509, 1999. [9] J. Kerievsky, Refactoring 
to Patterns, Addison-Wesley, 2005. [10] F. Khomh, M. Di Penta and Y. Gueheneuc. An Exploratory Study 
of the Impact of Code Smells on Software Change足proneness, Proceedings of 15th Working Conference on 
Reverse Engineering, October 2008, Antwerp, Belgium, 2009. [11] F. Khomh, S. Vaucher, Y. Gu辿h辿neuc, and 
H. Sahraoui. A Bayesian Approach for the Detection of Code and Design Smells. In Choi Byoung-ju, editor, 
Proceedings of the 9th International Conference on Quality Software (QSIC), August 2009.IEEE Computer 
SocietyPress. [12] M. Mantyla, J. Vanhanen and C. Lassenius, Bad Smells Humans as Code Critics, 20th 
IEEE International Conference on Software Maintenance (ICSM'04), Chicago, USA. pages399-408. 2004. [13] 
M. M辰ntyl辰, and C. Lassenius, Subjective Evaluation of Software Evolvability Using Code Smells: An Empirical 
Study. Journal of Empirical Soft. Engineering, vol. 11, no. 3, 2006, pp. 395-431. [14] M. M辰ntyl辰, and 
C. Lassenius, Drivers for Software Refactoring Decisions. Proceedings of the Intl Symposium on Empirical 
Soft. Engineering, pp. 297-306, 2006, Rio de Janeiro, Brasil. [15] M. Mantyla. Bad Smells in Software 
 ATaxonomy and an Empirical Study. Master's Thesis, Helsinki University of Technology, Software Business 
and Engineering Institute, 2003. [16] T. Mens and A. van Deursen. Refactoring: Emerging Trends and Open 
Problems. Proceedings 1st Intnl. Workshop on REFactoring: Achievements, Challenges, Effects(REFACE). 
Univ. ofWaterloo, 2003. [17] T. Mens and T. Tourwe, A SurveyofSoftware Refactoring, IEEE Transactions 
on Software Engineering 30(2): 126足139 (2004). [18] R. Najjar, S. Counsell, G. Loizou and K. Mannock. 
The role of constructors in the context of refactoring object足oriented software. IEEE European Conference 
on Software Maintenance and Reengineering. Benevento, Italy, March 26-28, 2003. pages111 120. [19] S. 
O Connell, CodeComplete, Microsoft Press, 1993. [20] W. Opdyke. Refactoring object-oriented frameworks, 
Ph.D. Thesis, Univ. ofIllinois. 1992. [21] B. Pietrzak and B. Walter, Leveraging Code Smell Detection 
with Inter-smell Relations, Proceedings of XP 2006, Oulu, Finland, pages75-84. Springer. [22] SourceMonitor 
Tool at: www.campwoodsw.com/sourcemonitor.html APPENDIX A CODE SMELLS 1. Alternative classes with different 
interfaces 2. Comments 3. Data Class 4. DataClumps 5. Divergent Change 6. Duplicated Code 7. FeatureEnvy 
 8. Inappropriate Intimacy 9. IncompleteLibraryClass 10. Large Class 11. LazyClass 12. LongMethod 
 13. LongParameterList 14. MessageChains 15. MiddleMan 16. Parallel Inheritance Hierarchies 17. Primitive 
Obsession 18. Refused Bequest 19. Shotgun Surgery 20. Speculative Generality 21. Switch Statements 
 22. TemporaryField   
			