
 Cint : A RISC Interpreter for the C Programming Language t Jack W . Davidson Department of Computer 
Scienc e University of Virgini a Charlottesville, VA 22903 Joseph V. Gres h AT&#38;T Communications 
and Information Systems Lincroft, NJ 07738 ABSTRAC T Cint is an interpretation system for the C program­ming 
language . Like most interpretation systems, i t provides "load and go" type execution as well as enhanced 
debugging and performance analysis tools . Cint consists of two phases a translator and an inter­preter. 
The translator compiles the source program into code for a virtual machine . The interpreter then loads 
and executes this code, While providing ser­vices similar to traditional interpreters, Cint differ s 
from them in two important ways . First, the virtua l machine languages used by many interpreters ar 
e quite large; machines with 100 to 200 operations are common . In contrast, Cint's virtual machine has 
only 63 operations. Second, to achieve acceptable execu­tion speeds, interpreters are often implemented 
in th e assembly language of the host machine . Cint, how ­ever, is written entirely in C and is therefore 
portable . In fact, it has been transported to four machine s without modification . Despite the compact 
size of th e virtual machine language and the high-level languag e implementation, Cint's execution speed 
is comparabl e to that of other interpreters . This paper describes th e design of the virtual machine, 
the implementation of the interpreter, and the performance of the system. TThis work was supported in 
part by the National Science Founda­tion under Grant CCR-86l 1653 . Permission to copy without fee all 
or pan of this material is granted provide d that the copies ire not made or distributed for direct commercial 
advantage , the ACM copyright notice and the title of the publication and its date appear , and notice 
is given that copying is by permission or the Association fo r Computing Machinery . To copy otherwise, 
or to republish, requires a fee and/ or specific permission . &#38;#169;1987 ACM 0-89791-235-7/87/0006/0189 
75(G 1 . INTRODUCTIO N Cint is an interpretation system for the C program­ming language . Like many other 
high-level languag e interpretation systems, it is implemented via the tech­nique of abstract machine 
modelling [13] . In this technique, the fundamental operators and data types required by the high-level 
language are used to defin e an instruction set for a virtual machine . The interpre­tation system is 
realized by constructing a translator and an interpreter. The translator compiles the sourc e language 
programs into code for the virtual machine . The interpreter then loads and executes the code pro­duced 
by the translator. This technique has been used to implement a number of successful systems [2, 5-7 , 
17] . Cint, however, differs from traditional high-leve l language interpreters in two important respects 
. First , the specification of Cint's virtual machine was driven by the principles used to design reduced-instruction­set 
computers (RISC) [15], As a result, Cint's virtua l machine has only 63 operations . In contrast, the 
vir­tual machines used by some interpreters are quit e large with two to three times as many operations 
[2 , 10, 16] . Second, Cint is implemented entirely in a high-level programming language. In order to 
achieve acceptable execution speeds, interpreters ar e often implemented in the assembly language of 
th e host machine. Consequently, they may require con­siderable effort to be moved to a new machine . 
Cint , on the other hand, is easily portable and has bee n moved to four machines without modification 
. Despite the use of a RISC-like virtual machine and its realization using a high-level language, Chi 
t achieves execution speeds comparable to traditionall y implemented interpreters. In this paper we provide 
an overview of Cint that focuses on the design of the C virtual machine, the implementation of the progra 
m that realizes the virtual machine, and its performance . 2 . MACHINE DESIGN A computer system can 
be seen as being made u p of several layers or levels, where each level defines a different machine view 
. The lowest of these levels i s defined by the individual devices that form th e machine (e .g., transistors 
and resistors), while the higher levels are defined by the operating system and the programming languages 
available on the machine. It is natural to view these levels as a hierarchy o f machines. Machines high 
in the hierarchy are ofte n called virtual machines to distinguish them from th e conventional architectural 
level . A machine at level N is implemented by a program that runs on the machine at level N-1 . For 
example, the conventional machine level (i .e., assembly language level) is imple­mented by a microprogram 
that runs on the machine defined by the micro-architecture . Similarly, the vir­tual machine used to 
implement a high-level language interpreter is often implemented by a program that runs at the conventional 
machine level . One of the primary goals of a machine designer i s the construction of machines that 
support the efficien t execution of programs that will run on them . A number of new principles have 
evolved for guidin g the design of conventional level machines . The dis­tinguishing characteristic of 
these machines is th e reduced number of operations contained in th e instruction set. Consequently, 
these machines have been termed RISCs reduced-instruction-set comput­ers [14] . Patterson [15] lists 
some of the RISC design prin­ciples : 1. Functions should be kept simple unless there is a very good 
reason to do otherwise . 2. Microinstructions should not be faster tha n simple instructions . 3. Moving 
software into microcode does no t  make it better. These principles lead to a very simple definition 
of a RISC machine : a RISC machine completes the execu­tion of an instruction every cycle . Indeed, the 
charac­teristics shared by existing RISC machines (e .g . , register-to-register architecture, a reduced 
number o f operations and addressing modes, simple instructio n formats, and a pipelined execution unit), 
are simpl y techniques for realizing the above definition . Prelim­inary results from both experimental 
and commercia l machines show that the RISC concepts do lead t o machines that provide for the fast execution 
of high ­level language programs . It seems logical that if a set of design principle s works well when 
applied to the lower end of the machine hierarchy, these same principles may als o produce good results 
when used to design virtua l machines. Based on this premise, the design of the C virtual machine (CVM) 
for Cint was guided, to a large extent, by the principles and arguments used t o design RISCs. The following 
section describes th e CVM and some of the motivation for its design. 2 .1 The C Virtual Machin e There 
are a number of arguments for designing a small, instruction set. One argument is that a small, simple 
instruction set is easier, less error prone, an d faster to implement than a large, complex instruction 
set. Abstract machine designers have long recognize d this problem. In 1972, Newey, Poole, and Waite 
[13 ] observed that "problems . . . suggest a number of spe­cialized operations which could possibl y 
be implemented quite efficiently on cer­tain hardware. The designer must bal­ance the convenience and 
utility of these operations against the increased difficult y of implementing an abstract machin e with 
a rich and varied instruction set . " A second argument in favor of RISCs is that their compilers are 
simpler than compilers for complex ­instruction set computers (CISCs) . While it is debat­able whether 
this argument is applicable to rea l machines, our experience is that it does apply to abstract machines 
used to produce retargetable com­pilers [3] . If the virtual machine does not contain spe­cial operations, 
the case-analysis code typically necessary to determine whether special operators can be emitted is not 
required . Section 3 describes i n more detail the effect the use of a RISC-like virtua l machine had 
on Cint's translator. Based on these observations, one of our primar y design goals was to keep the CVM 
as small as possi­ble, yet still obtain satisfactory execution performanc e from the interpreter. Consequently, 
the CVM has 4 9 executable instructions and 14 pseudo-operations . The full instruction set is described 
in Appendix A . The CVM's design was also influenced by th e decision to use a high-level language as 
the imple­mentation machine rather than the conventiona l machine level. While our previous definition 
of a RISC machine (i.e., single cycle execution of instruc­tions) does not directly apply to virtual 
machines, its intent can be applied . Consequently, each CV M instruction performs a relatively simple 
operation that has a rather obvious and simple realization on th e implementation machine . Unlike most 
real RISC machines, the CVM is a stack architecture as opposed to a register architec­ture. The CVM is 
stack-oriented for several reasons . Most high-level programming languages do not give the programmer 
explicit control of a machine's regis­terst. Consequently, our choice of a high-level pro­gramming language 
as an implementation machine precluded making the CVM a register architecture . A second reason for favoring 
a stack-oriented virtua l machine was the goal of using the translator as th e front-end in a retargetable 
C compiler . While it is relatively straightforward to map a stack-oriented vir­tual machine onto a register 
machine (simply treat th e registers like a stack), it is more difficult to map a register-oriented virtual 
machine onto a stack machine . The CVM provides instructions for manipulatin g two distinct stacks. Most 
instructions manipulate values found on the evaluation stack or E-stack . A second stack, called the 
C-stack, is used to support th e C calling sequence . Only five instructions (PUSHA, PUSHV, STARG, CALL, 
and RET) access thi s stack. Again, the decision to differentiate between the evaluation stack and the 
call/return stack wa s motivated by the desire to also use the CVM as an abstract machine for producing 
retargetable C com­pilers. Typically, a code generator maps the E-stack onto the target machine's allocable 
registers, while the C-stack is mapped onto the target machine's run­time stack. The difference between 
the E-stack and C-stack is a logical distinction that can be ignored . In fact, Cint's interpreter maps 
the C-stack onto the E ­stack . The basic format of a CVM executable instructio n is opcode type (operands 
] where type indicates the data type (i .e., short, long , float, etc.). Many virtual machines encode 
the type as part of the operation to remove a level of decoding i n the interpreter. This approach is 
feasible for a language that supports a few basic types (e.g., Pascal with four basic types). However, 
for a language like C with a large set of basic types, such an approach i s unwieldy . file register 
declaration in C is merely a hint to the compiler that the variable will be heavily used . The CVM instruction 
set, like those of real RIS C machines, could be reduced further . For example, the assignment operators 
(e .g ., +=, -=, etc.) could be synthesized from other CVM instructions . Experi­mentation showed that 
further reductions of the CV M would be counter-productive because it resulted in th e output of more 
verbose code from the translator tha t ran substantially slower. 3. CINT Cint consists of a translator 
which compiles C source programs into code for the CVM, and an inter­preter that loads and links CVM 
object modules an d executes them . A schematic of Cint is shown in Fig­ ure 1 . The following sections 
describe the translato r and the operation of the interpreter . Source Program Program Outpu t Figure 
1 . Schematic of Cint . 3 .1 Translatio n Lint's translator [19] supports the full C program­ming language 
as defined by Kernighan and Ritchi e [11] including recently added features such as bi t fields and enumeration 
types. The translator is written in C and is 7032 lines of code . It is retargeted by sup­plying two 
types of information about the target machine . The sizes of the basic data types on the host machine 
and the evaluation order of arguments mus t be specified. The latter is necessary for two reasons . One 
is that this allows interpreted code to call pro­cedures that have been compiled and linked with th e 
interpreter . A second reason is that some C program s (usually nonportable ones) are written assuming 
a particular evaluation order. One of the design goal s of Cint was that the execution behavior of a 
progra m on the host machine should be indistinguishable whether it is interpreted or compiled and executed. 
As noted in Section 2, one of the benefits of a RISC-like virtual machine is that it simplifies the implementation 
of the translator . Because the CV M provides exactly one obvious implementation for eac h source language 
construct, the task of code generation is made trivial. For example, typical virtual machine s include 
a number of instructions for loading value s directly from memory as well as a general indirec t load 
instruction for when addresses must be compute d (e.g., an array reference). Through case analysis, the 
code generator determines the best code sequence t o emit. Such case analysis is often one of the more 
tedious and error prone parts of a compiler . The CVM, on the other hand, has only on e general-purpose 
operator for loading a value from memory. The dereference instruction (@) takes a n address on the E-stack 
and replaces it with the con ­tents of that memory location. Because this is the only way to load a value 
from memory, the code gen­erator does not require any case analysis to determin e the best code sequence 
to emit . Eliminating th e necessity for case-analysis code markedly simplifies the implementation of 
the translator's code generator . The code generator is about 1000 lines of C code . This includes the 
routines that emit the CVM code i n a variety of styles and formats . Code is generated b y performing 
a simple postorder walk of the trees pro­duced by the semantic analyzer . 3.2 Interpretatio n One of 
the secondary goals of this project was t o investigate whether interpreters could be built tha t would 
be both portable yet provide satisfactory exe ­cution speeds. Most interpreters are implemented via the 
conventional machine level of the host architec­ture (i.e., assembly language). They sacrifice porta­bility 
for execution speed . To make Cint's interpreter portable, we chose an implementation machine higher 
in the machine hierarchy the virtual machine defined by the C programming language and realized by a 
C compiler and runtime system . Thus, Cint is portable to any environment that supports the C pro­gramming 
language. As C has a rich set of operator s that provide access to most of the operators provide d by 
the underlying hardware, the "semantic gap " between C and the hardware is small . Our hypothesis was 
that by carefully designing the virtual machine s o that it could be implemented efficiently using C, 
th e resulting interpreter would run as fast as interpreters implemented using the assembly language 
of the hos t machine. Section 5 discusses the execution perfor­mance of the interpreter . The interpreter 
is 4811 lines of C code . Abou t half of the code, 2046 lines, implements the opera­tions of the CVM. 
The interpreter is divided into tw o phases: loading/linking and execution . The followin g sections 
describes some interesting aspects of th e implementation of these phases . 3 .2 .1 Loading and Linking 
During the first phase of the loading process, Cin t reads the CVM modules produced by the translato 
r and places instructions and data in one of three memory segments: a program segment, a standard data 
segment, and a string segment . The program segment is loaded with CVM instructions and thei r operands. 
The string data segment holds string con­stants, while the standard data segment holds all other data. 
The data structure used for the program segmen t is treated as an array of type int. CVM opcodes are 
naturally expressed as integers . All operands, whether constants or variable references, are con­verted 
to integer offsets from the base of the appropri­ate segment. The data structure for the standard data 
segment is treated as an array of type char. Thi s allows data of all types to be stored in a single 
data structure. This data is accessed by casting a characte r pointer into the array to a pointer of 
the appropriate type. Furthermore, storing all data in a character array permits the correct calculation 
of the relativ e distance between elements of an array . This is neces­sary for address arithmetic of 
interpreted programs t o be performed properly . atof atoi atol calloc exit _ filbuf _ flsbuf fclose 
fflush fgetc fgets fopen fprintf fputc fputs f read free f reopen fscanf fseek ftell fwrite getenv malloc 
printf puts realloc rewind scanf setbuf sprintf sscanf strcat strcmp strcpy strlen strncat strncmp strncpy 
system times ungetc Figure 2 . Library routines supported by Cint . One of the powerful concepts supported 
by C is separate compilation . Cint also supports separat e compilation. After all the object modules 
have bee n read, the linker resolves external references among modules. All unsatisfied references are 
resolved fro m a set of standard I/O and utility library routines. Much of C's utility is due to a set 
of standard libraries that provide for input and output, operations on char­acters and strings, and storage 
allocation . Cunt pro­vides an interface to commonly used library routines. The routines currently supported 
are listed in Figur e 2. Cunt is designed so that additional external routines can be added easily. A 
number of these routines have different definitions depending on whether the sup ­porting environment 
is BSD based or System V based. The interpreter can be configured to suppor t either operating system 
view. 3.2.2 Execution After loading, the CVM code is interpretativel y executed. Klint [12] discusses 
and classifies three basic interpretation techniques. The three classifications are : 1. Classical interpretation 
with opcode table , 2. Direct threaded code, an d  3. Indirect threaded code . One of the major differences 
in these techniques i s how the operation code (opcode) is encoded. In the classical technique, each 
operation is assigned a unique code. Some method of table lookup (usually indexing based on the opcode) 
is required to locat e the routine that implements the operation. In the direct threaded code technique 
[1], the opcode is th e address of the routine that implements the operation . To obtain more compact 
code and allow more flexi­bility in handling types, the indirect threaded cod e technique [4] adds a 
second level of indirection . The opcode is the address which points to a word that con­tains the address 
of the routine that implements th e operation . Klint measured the instruction fetch performance of these 
interpretation techniques on two machines . From these measurements, several interesting obser­vations 
were made . First, the importance of the instruction fetch overhead is related to the complexit y of 
the virtual's machine's instruction set. As the time to execute a virtual instruction increases, the 
impac t of the time required to do an instruction fetc h decreases. For a RISC virtual machine, reducing 
th e instruction fetch overhead is critical . Klint's meas­urements showed that the instruction fetch 
overhea d could be reduced substantially by keeping the virtua l machine's program counter in a machine 
register . On the PDP-11, the instruction fetch time was two t o three times faster when the program 
counter was hel d in a register as opposed to a memory location . For­tunately, by declaring the variable 
that holds the vir­tual machine's program counter to be a register vari­able, we were able to place the 
program counter in a register for all machines to which Cint was ported. Klint's measurements also showed 
that the direc t threaded code method resulted in the least instructio n fetch overhead . Unfortunately, 
efficient implementa­tion of the threaded code techniques requires acces s to the conventional machine 
level (i .e., assembly language implementation) . For example, threade d code techniques can be implemented 
using C via pointers to functions, but the use of the C calling sequence and the resulting call/return 
overhea d negates any advantage . Consequently, Cint uses th e classical technique with instruction decoding 
bein g performed via the C switch statement . Because mos t architectures provide hardware support for 
switch o r case statements, acceptable performance is achieved. The heart of the interpreter is the runtime 
stack . The CVM supports two stacks : an evaluation stac k and an activation record stack . As noted 
in Section 2.1, two stacks facilitated the development of portable compilers. Since interpretation only 
requires on e stack, Cint maps the C-stack onto the E-stack. All operations are performed on the top 
of the E-stack . The high-level implementation of the E-stack creates a number of difficulties . Interpreters 
implemented a t the conventional machine level can directly acces s and manipulate values on the runtime 
stack . Further­more, many machines provide for stack overflow checking and the automatic extension of 
the stack . To overcome the difficulty of manipulating values of dif­ferent types on Cint's runtime stack, 
the E-stack i s implemented as an array of structures shown below : typedef struct stktype { union 
{ char c; int i; short s; long 1; unsigned char uc ; unsigned short us ; unsigned int ui ; unsigned 
long ul ; float f; double d; char *p; } val ; unsigned int type; }; The field type, as the name 
suggests, contains the type of the item. This permits runtime checking of type compatibility . The field 
val contains the valu e of the stack item, and is therefore a union of the basi c types supported by 
C . Since the basic stack elemen t contains the union of all possible C basic types, th e basic operations 
of the interpreter can be realize d using the corresponding C operator applied to the correct field of 
the union . This ensures that inter­preted programs exhibit the same behavior as com­piled programs . 
When pushing a pointer of any type onto the run ­time stack, it is cast with the (char *) operator , 
and then cast back to the appropriate type when dereferenced. The assumption is that a pointer of type 
"pointer to character" should be capable of holdin g the equivalent of a pointer to any other type withou 
t loss of information . All C implementations that w e know of satisfy this assumption . Because the 
E-stack is an internal data structure, i t is Cint's responsibility to check for possible stack overflow. 
An early implementation of Cint performed a stack overflow check each time a value was pushed on the 
runtime stack . Execution profiles of the Cint's operation showed that these checks were substantiall 
y increasing the cost of executing some instructions . To reduce this overhead, the responsibility for 
checkin g for stack overflow was moved to the function prolo­gue code . During the loading process, the 
maximu m amount of stack space a function could use is com­puted. This number is one of the operands 
of th e CVM FUNC instruction . Part of the semantics of th e this operation is to ensure that enough 
stack space i s available to execute the function . While realizing the E-stack as an array of struc­tures 
solves the problem of pushing values of dif­ferent types on the same stack, it creates a new prob­lem. 
The translator generates code to perform pointer arithmetic and array indexing based on the assump­tion 
that array elements are stored contiguously i n memory. For example, array indexing is performed by multiplying 
the array index by the size of an arra y element and adding the result to the base address o f the array 
. Consequently, the E-stack cannot be use d to hold local variables. The problem is overcome using the 
following scheme . On function entry, a block of contiguous memory is allocated and a pointer to this 
memory is held in a variable that serves as th e local variable pointer. A pointer to a local variabl 
e may then be obtained (as in the NAME opcode) b y simply adding that variable's offset to the value 
of th e the local variable pointer. The local variable pointer is saved on a function call . When a function 
returns , the memory pointed to by its local variable pointer i s freed and the caller ' s local variable 
pointer i s restored . A major advantage of a reduced instruction set virtual machine is that less effort 
is required to imple­ment the program that realizes the virtual machine' s operations . Reductions in 
the number of lines of code necessary to implement the interpreter stem from tw o characteristics of 
RISC machines. First, the reduced number of operations means fewer operations to implement. The CVM, 
for example, requires th e implementation of only 49 executable operations . Second, the simplicity of 
the operations means tha t the code to implement them is shorter and easier t o write. In Cint, with 
a few exceptions (e .g., CALL, RET, FUNC, etc.), each operator is naturally realized by one or two lines 
of simple C code. On the other hand, virtual machines with complex instruction s require the implementation 
of a larger instruction se t that has complex instructions that are more difficult to realize . PCC 
Cin t Program Compile Time Run Time Compile Time Run Tim e Total Tota l User Sys User Sys User Sys User 
Sys banner 5.7 3 .7 0.1 0.3 9 .8 3.7 1.1 0.9 0.7 6.4 cal 5.4 2.6 0.3 0.4 8.7 1.8 1.0 2.4 0.9 6.1 cb 12.7 
3 .1 0.2 0.3 16 .3 4.9 1.6 2.1 1.0 9.6 cmp 4.6 2.6 0.1 0.3 7 .6 1.6 0.9 0.6 0.6 3.7 echo 1.9 2.3 0.1 
0.2 4.5 0.6 1.0 0.2 0.5 2 .3 grep 12.3 3 .2 0.4 0.4 16 .3 4.7 1.1 23.6 3.7 33.1 tr 5.1 2.6 0.6 0.4 8.7 
2.0 0.8 25.2 3.2 31.2 we 3.2 2.3 0.4 0.4 6 .3 1 .2 1 .0 16.8 2 .2 21.2 Table I. Comparisons of PCC and 
Cint on a VAX-11/780 . 4. DEBUGGING FACILITIES Cint provides the typical runtime checks and debugging 
facilities . It allows the user to set and clear breakpoints, trace the execution of the program at both 
the statement and function level, examine and dump the runtime stack, and examine and modify th e value 
of variables. In addition, it includes a facility for producing a detailed (statement level) profile 
of a program's execution. On the Sun, Cint provides an interface to the window system that allows the 
user t o watch the the flow of control through the program . 5. PERFORMANC E Despite the use of a RISC 
virtual machine and its realization via a high-level language program, Cint provides performance comparable 
to interpreters using more complex machines and assembly languag e implementations. Two sets of benchmark 
data are presented. Table I compares Cint' s "load and go" execution performance to that of the portable 
C com­piler (PCC) [8] on a number of standard Unix utili­ties, The benchmarks were performed on a VAX 
­11/780 with a floating-point accelerator . All optimi­zations were turned off for the PCC timings, Thi 
s gave the fastest compile times, but slower execution speeds . Since compile time dominated for thes 
e benchmarks, this was more advantageous for FCC. The times reported are in seconds and are an average 
of five runs. For the banner, cal, cb, cmp, and echo programs , the total time required by the interpreter 
is actually less than that required by PCC . Cint, however, was significantly slower on the grep, tr, 
and we programs which were tested on reasonably large input file s (more than 500 lines). When tested 
on smaller inpu t files, the time required by the interpreter compare s more favorably to that required 
by FCC. Cint's abil­ity to quickly compile and load programs makes i t ideal for use in an instructional 
environment wher e compilation time typically dominates execution time. We also compared Cint's execution 
performance to the BSD Pascal px interpreter on both a VAX ­11/780 and a Sun-3/75 . This interpreter 
uses a com­plex virtual machine (over 100 opcodes) and is par­tially implemented using assembly language 
[10] . We tested both interpreters on a number of well ­known benchmark programs [18, 20] . Tables II 
an d III contain the results of the benchmark runs . The execution times are reported in seconds with 
the exception of the dhrystone benchmark which i s reported in number of dhrystones per second . The 
cc and pc timings were produced with all optimization s turned off. In addition, those timings were obtained 
by running larger problem instances and scaling th e times appropriately, All timings were obtained b 
y running the benchmarks five times on lightly-loaded machines. The times reported are the average of 
the five runs . As the tables show, the interpretation time s for Cint and px compare favorably on both 
machines, To remove any bias introduced by comparing the interpretation times of benchmarks written in 
differen t programming languages, we also computed th e interpretation efficiency of Cint and px, The 
interpre­tation efficiency is the ratio of the execution time of a compiled program and the execution 
time of the pro ­gram when interpreted. These results are contained in the last two columns of Tables 
II and III . On the VAX-11/780, the interpretation efficiency of Cint and px averaged over the eight 
benchmark programs wa s Program cc Cint VAX-11/78 0 pc px Cint/c c pc/p x ackerman 4 .70 58 .70 6 .06 
72.11 12 .4 11 . 9 bubblesort 8,20 328 .58 12 .40 286.95 40 .0 23 .0 matrixmult 4,18 96 .06 5 .95 89 
.90 22 .9 15 . 1 puzzle 10 .73 294 .65 10 .28 225.06 27 .4 21 . 8 quicksort 0.13 4 .96 0 .21 4.08 37 
.3 18 .9 shellsort 0 .30 12 .78 0 .60 14,01 42 .6 23 . 3 sieve 2 .66 78 .58 3 .05 75.01 29 .4 24 . 5 
dhrystone1' 1283 .00 75 .00 958 .00 38 .00 17 .1 25 . 2 Average - - - - 28 .6 20 .4 Program cc Cint SUN-3/7 
5 pc px Cint/cc pc/p x ackerman 1 .06 38 .48 1,20 53.95 36 .1 44. 9 bubblesort 4.58 224 .50 2 .96 231 
.30 48.9 77 . 9 matrixmult 2.26 64 .96 1 .71 59 .81 28 .6 34 . 8 puzzle 5 .16 197 .81 4.25 192 .21 38 
.2 45. 2 quicksort 0 .08 3 .21 0 .05 3 .86 38 .7 77. 3 shellsort 0.20 8 .50 0 .23 11 .30 42.5 48. 2 sieve 
1,61 52 .70 0 .91 73 .26 32 .6 79 . 9 dhrystonej 2659 .00 127 .00 2222 .00 60.00 20.9 37 . 0 Average 
- - - - 35 .8 55 . 6 Tables II and III . Comparison of the Interpretation Efficiency of Cint and px . 
 28 .6 and 20.4 respectively. The average interpreta­tion efficiency on the SUN-3/75 was 35 .8 for Cint 
an d 55 .6 for px.  The difference between the interpretation efficiency of px on the VAX and the SUN 
is some ­what surprising . We conjecture that px's implementa­tion and its evolution is responsible for 
the large differences between its interpretation efficiency on the VAX and the SUN . The original px 
was written mostly in assembly language and ran on the PDP-1 1 computer family [9] . Version 2 .0 was 
rewritten to ru n on the VAX-11 computer family [10] . The curren t version, 3 .0, while maintaining 
the structure of the original versions, was rewritten in C . To obtain a file entries for dhrystone are 
dhrystones/second not seconds . working version of the interpreter and satisfactor y performance, the 
assembly language produced b y compiling the module that implements the virtua l machine must be edited 
. For example, using knowledge of how the compiler generates code, th e assembly language file is modified 
so that the inter­preter can directly access the hardware-supported run ­time stack . While such an implementation 
is mor e portable than one written entirely in assembl y language, its performance is contingent on the 
abilit y to transform the assembly language produced by the C compiler to more efficient code . Our conjecture 
i s that this technique works well for the VAX architec­ture and C compiler, but does not work as well 
for th e Motorola 68020 architecture and C compiler on which a SUN-3/75 is based . 196   
			