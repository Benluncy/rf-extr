
 The Art and Science of Computer Graphics: A Very Depth-First Approach to the Non-majors Course Donald 
House Visualization Laboratory Texas A &#38; M University College Statiort, TX 77843-3137 house@archone.tarnu.edu 
 Abstract This paper describes a course in computer graphics which is designed for students with little 
or no background in computer science. The course is centered around custom software which was designed 
with the pedagogical goals in mind. The goals of the course, the software,, and some experiences at two 
institutions are discussed Introduction For the last several years, an increasing number of people have 
been exploring the possibilities of creating a breadth-first introduction to the field of computer science 
[Den89, ACM91]. Courses designed according to this model play down the notion of programming per se, 
and cover a wide variety of topics, typically spending up to a few weeks on each unit as described by 
any of a growing number of texts [Bie90, Bro91, Dec90, Tuc92]. We have followed the opposite path, and 
developed a come which takes a very depth-tit approach to one aspect of the field. We concentrate our 
efforts on the objective of acquainting students with the concepts and tools for doing three-dimensional 
computer graphics and giving them extensive Iab/studio practice as they produce their own work. Students 
gain more than just an understanding of graphics, however. Simultaneously, and verymuchbydesign, students 
learn a good deal of practical and conceptual material about programming. They also become comfortable 
using the computer, they get to see how a large computer system is designed, and they develop a critical 
eye which helps them separate the glitz of certain effects horn the real work which was used to create 
thexn. Among similar courses, ours is most like that of Geitz [Gei91], but we have changed his approach 
significantly by using the &#38;velopment of images as the central focus. Permission to copy without 
fee all or part of this material is granted providad that tho copioo aro not mado or distributed for 
direct oornmarcial advantogo, tho ACM copyright notico and the titte of the publication and ito dato 
that copying ia by permioaion of tho Machinery. To copy otherwisa, or andbr opocific permission, SIGSCE 
94-3/94, Phoenix Arizon@SA @ 1994 ACM O-S9791~..$3.W appear, and notice io given Association for Computing 
to rapublish, requires a feo David Levine Dept. of Mathematics/Computer Science Gettysburg College Gettysburg, 
PA 17325-1486 dlevine@gettysburg.edu The course revolves around a custom softwme system named Jabkrt, 
which was designed especially for this course. Currently Jabka runs on any Macintosh II or beyond (with 
floating point hardware), under X-Windows using an Emacs interface, and under NextStep 3.0, although 
there are some differences in the user interface and functionality across the three systems. Jabka provides 
all of the important elements of a system for doing three-dimensional computer graphics, packaged in 
a programmable object-oriented environment. The set of objects available to the user includes cameras 
and asscxiated controls, geometric modeling primitives such as polygonal surfaces and superquadrics, 
tools for using constructive solid geometry, lights, renderers, shaders, graphics windows, and tiles. 
The user accesses and manipulates these various objects via programs written in Scheme as well as through 
various GUI controls. The Jabka software was largely written by undergraduates, several of whom received 
funding through the support of the Sloan Foundation. More recently, the Pew Foundation has supported 
further development through NECUSE (New England Consortium for Undergraduate Science Education). It is 
significant to note that student involvement in the sotlware development achieved some valuable objectives 
for sonw of our advanced computer science students. Of the three major student contributors to Jabh two 
have gone on to PhD study in graphics at Cornell and Carnegie Mellon. The third manages the microcomputer 
facilities at MIT s Sloan School of Business. Several other students have completed summer research projects, 
and honors theses centered around Jabka, and many of these have gone onto PhD study in other areas of 
computer science. The course itself was fist taught during a January term at Williams College in 1990 
and has been taught as a full semester course several times at Williams and more recently at Gettysburg 
College. The experience levels of students who take the course range fkom essentially no contact with 
computers at one end of the spectrum to a year or so experience at the other end. (At Williams, students 
are prohibited from taking the course if they have completed an introductory programming course. At Gettysburg, 
they are barred if they have completed a 200 level course in the department.) Most of the students are 
not comfortable with computers when the course begins, but most are also justifiably proud of their projects 
at the end of the setnester. The limiting factor thus far in the offerings of the course is machine 
availaMlity. Students work with the software using an iterative two-step process. FirsL they construct 
a three-dimensional model of the objects they wish to place in a scene, and organize the scene together 
with its fighting and initial camera positioning. This is done by titing a Scheme program ,which instantiates 
primitive graphics objects and maniphtes these objects via their methods. Second, students use controls 
provided by the graphical user interface to pnwiew the scene described by ,@e Scheme program, adjust 
the camera position, and produce rendered images. Almost always, this leads to new ideas about modeling 
and lighting that require changes to the Scheme program, so that a student s final images are the result 
of iterative refinement, To nai ve students, the programming language is simply a means for issuing 
a sequence of commands. As students become more sophisticated, they begin to discover the power. of the 
Scheme list data structure, and the functional paradigm in developing algorithms to describe more sophisticated 
models. An Example To illustrate the basic capabilities of the system, we show in Rogram 1 a way to 
construct a simple model of a clown wearing a cone-shaped hat. We begin by defining an object which we 
call an eye, which is a small green sphere. l he Scheme function object instantiates an object with the 
name given by its fit argument, of the class given by its second argument. Thus, the function invocation 
(object eye part ..,) creates an object named eye , which is an instance of the part class. (A part is 
simply a non-leaf node of a directed acyclic graph describing a geometric model.) Optional thii and subsequent 
arguments to the function object are invocations of methods (i.e. member functions) that serve to modify 
or tailor the object to the user s mx@rements. Thus, the line (object eye part (addchild sphere (scale 
0.20.2 0.2)) (setmaterial green-mat)) first creates a part named eye, adds a child node under the part 
which is a scaleddown sphere, and finally sets the description of the material to be used for rendering 
purposes to a predefine green material named green-mat . Looking further in Program 1, we define a nose 
and a head (larger spheres) and a hat (a yellow cone). We then define a clown object to be a composition 
of a head, two eyes, a nose and a hat. Lastly, we put the clown into the scene object which we will later 
preview and render. ---------.. ----. --. ---. ---------.-.-. ---.,-----------Â­. 9 Clown ; Program to 
demonstrate geometric modeling using only ; predefine modeling primitives and materirds . tobject eye 
part (addChild sphere (scale 0.20.2 0.2)) (Setmaterial green-mat)) (object nose part (addchild sphere 
(scale 0.30.3 0.3)) (setmaterial red-mat)) (object head part (addchild sphere) (Setmaterial ltgre y-mat)) 
(object hat part (addchild COIE(SCdC 0.70.7 0.7)) (setmaterial yellow-mat)) (object clown part (addChild 
head) (addchild eye (translate5050 -50)) (addchild eye (translate -5050 -50)) (addchild nose (translate 
00 -100)) (ddChild hat (translate 0140 O))) (object scene part (addchild clown)) Scheme Code for a Simple 
Clown Model After evaluating this code, the model exists in the Scheme environment and a student can 
use the interactive tools (or other Scheme commands) to manipulate the camera(s) and eventually render 
the object. The figun?s below show a wireframe rendering of the clown and as haded view. Material Concerns 
The &#38;y-today topics covered in the course are chosen to enable the students to complete more advanced 
and/or more complicated assignments each week. The assignments are organized so that as the students 
gain skills, they are naturally led to want enhanced capabilities. For example, during the early assignments 
the students only know how to use the six primary and secondary colors and a few basic shapes. This gives 
them a gentle introduction to the system but the limitations of their environment (and the students attendant 
frustrations) set the stage for lectures on color theory and color space representation, and on the construction 
of swept, extruded, or lofted surfaces. Soon the studenta wish to produce mom complex visual effects 
and they learn about lights and shading. In Jabkaj colors are lists and polygons are nested lists, so 
experience with these leads nicely into more general list operations in Scheme. Concepts such as randomization 
and replication are introduced once they are more comfortable with Scheme as a language. Since Jabka 
s version of Scheme does not support looping, the latter is accomplished through the use of recursion. 
Ultimately, the studenta produce a tinal project of their own design. Although most of the work is output 
driven , students must become familiar with a large number of concepts to successfully complete the course. 
These include: * The organization of a large object-oriented system (Jabka itself) * Geometry and transformations 
in thmedimensions (to position objects witldn a scene) * Three-dimensional vectors as a way of expressing 
direction (to deal effectively with lights and cameras)  * The capabilities of various computer grapldcs 
technologies (e.g. wireliwrne vs. scanhne vs. ray-tracing renderers, texture and bump maps, etc.) * The 
costs of these various technologies (e.g. which renderer should be used now?, should surfaces be smooth 
or polygonal?) * The techniques of animation * Programming concepts such as variables, conditionals, 
functions and recursion * The process of incremental design (as they buildup their portfolio and eventually 
complete their final projects)  It should be emphasized that in each of these cases, the studenta do 
not necessarily master all of the intricacies of the concepts, but they do work within each am to some 
degree. For instance, in the case of recursion, the students are given a Scheme function wtdch can be 
used to place several copies of the same object in a scene. They am then shown how this can be used to 
geherate the wheel of crosses and the checkerboard as in the figures below. Studenta have used this technique 
to build such complex objects as brick walls and post-rail fences. Other stu&#38;nts have combined thk 
idea with the notion of randomization to create mountain ranges, cliffs, and even a parking lot complete 
with marking stripes and randomly placed cars. It would be incorrect to claim that all of these studenta 
have mastered the technique of recursion, but these uses show considerable facility with the tool. Given 
that these are generally students without a previously discovered aptitude for programming, we believe 
that this represents great progress. Logistics of the course Over time, the course has been taught in 
a variety of formats. The most successful one is a lecture/lab model. The kctures are used to cover the 
concepts and demonstrate how to implement them, and the labs are used to allow the students to create 
their own images. A 1-1 student-machine ratio is maintained during the lab and TAs as well as the instructor 
are on hand to answer questions and offer suggestions. (we have found that a student/helper ratio of 
about S/l works well.) While the concepts to be covered in lab are decided by the instructor, tlw subject 
matter of the image is chosen individually by each student. As the semester progresses, each student 
builds a portfolio of 3-dinwnsional models and rendered images, many of which will end up in that student 
s final project. Students who achieve interesting effects (e.g. an interesting mountain range) are encouraged 
to share what they have designed with other students. Besides having a laboratory of workstations, some 
means of getting color, hardcopy output is essential. We have found that an inexpensive printer such 
as slow-end HP Paint.t is quite adequate. It would be ideal also to have a fihnrecorder for Polaroid 
and color slide output, but teaching the studenta to shoot slides directly from the screen can work reasonably 
well. The grding for the course varies by instructor, but is always based largely (at least 75%) on the 
portfolio, with the final project accounting for at least a third of the portfolio WOE. The remaining 
grade is determined by quizzes and exams. When grading the portfolio, every effort is made to evaluate 
progress rather than simply to measure achievement. Given the sometimes disparate backgrounds of the 
students and the nervousness with wtdch many of them enter the course, this is a very successful model. 
This set-up does allow a lazy student to get into a bit of trouble in the course, but it works well for 
the majority of the class. Relationship to Curriculum 91 The ACM/IEEE-CS Joint Curriculum Task Force 
report concentrates on topics to which all computer science students should be exposed prior to nxeiving 
an undergraduate degree. It deals only cursorily with advanced (elective) courses. The course we have 
described herein covers many of the topics which are listed in the Computer Graphics portion of the Advanced 
Material , though of course they are not covered in the same manner. The knowledge units which are (partially) 
covered are PR, Introduction to a Programming Language, HU2, Computer Graphics, and SE1, Fundamental 
Problem-Solving Concepts. In general, though, it is a bad idea to try to fit this course into the standard 
Curriculum. Its intended audience, goals, and methods are fu*ntaUy different horn those of most courses 
which lead towards the computer science major. We would like to add, however, that there is notldng toy 
or limiting about the underlying technology of the course, or the design of the Jabka software. Students 
can push their image making out to the limits of many of the commercial 3D modeling and rendering software 
packages available on the market. The Unix/X version of Jabka has been very successfully used as a teaching 
tool in the regular undergraduate course in computer grapldcs at Williams, where the students learn 1) 
by studying its architecture, 2) by taking the lid off and examining the code for the various objects 
(like lights, cameras, rendmers, and modeling primitives), and 3) by extending the system by modi~ing, 
enhancing, replacing, and adding to existing objects. This is done in much the same manner as Owen s 
course which uses RenderMan [Owe92], but students have the advantage of dissecting the very tool which 
they use to construct images rather than using a commercial product and then writing portions of it from 
scratch.  Experiences Our experiences with the course have been very positive. Many of the fti projects 
am quite exciting to see. Several students have created short animations by writing Jabka programs which 
produce a series of images that can be viewed with an animation previewing program. Others completed 
sequences of images which illustrate a story. Still others have praluced impressive models and single 
images which put together much of what they had learned throughout the senmter. The fkee format of the 
project design combined with the diverse backgrounds of the students has lead to a variety of subject 
matter for these projects. Themes from past years have included bowling alleys, canal scenes from Venice, 
lighthouse and sea scape scenes, chess matches, and even a tea ceremony. The students are generally very 
proud of their work, and it gives them an opportunity to show off their learning to their peers. Despite 
a lack of any formal way of measuring how well we have met our course objectives, it is clear that students 
are learning a lot about the art and science of computer graphics. They are getting a deep, albeit narrow, 
introduction to the field and are using a programming language which requires them to learn some fairIy 
high level concepts. About 15% of the students who complete thk course go on to take courses on the more 
conventional introductory track. Although this is a small number, it is significant when one realizes 
the background of the students emolled. Virtually none of them had any previous interest in studying 
mainstream Computer Science. A small number (significantly, including several women) have gone on to 
major in computer science. The best indication of the success of the course, however, is given by the 
projects which the stuclents produce. At the end of the paper are six images produced by students who 
took this course. Of the six, one had previously taken a single college course in computer science and 
two others had taken a high school course; three had no prior computer science experience at all. Conclusions 
We have described what we believe is a very different approach to the non-majors course. Rather than 
expose students to a variety of topics somewhat superficially, our course deals with one area, computer 
graphics, in great depth. Students write Scheme programs to generate three dimensional models which are 
then rendered into images by a special software system. In doing so, they gain som of the same skills 
wtdch we traditionally try to pass on to our majors. The main objective, however, is to attract students 
who might not otherwise take a computer science course and give them a positive experience with the field. 
By all accounts we have been successful. Software Dissemination As documentation and refinements to 
Jabka pro~ss, we intend to release the software and documentation without fee (but without any guarantees) 
for educational use only. Release will be via anonymous ftp from a site maintained by NECUSE. Interested 
parties are encouraged to contact the first author via ernail, in order to be put on a mailing list for 
news about this distribution. Acknowledgements Besides expressing our gratitude to the Sloan and Pew 
Foundations, we wish to acknowledge the many other individuals who contributed to the development of 
the course. We extend our sincere thanks to Steve Levin of Studio Art at Williams, whose active collaboration, 
advice, and encouragement greatly shaped the course. Our undying gratitude also goes out to our students 
and friends Scott McGuire, Bruce Walter, and Sebastian Grassia for the labor and genius they contributed 
to the software design and development. Finally we thank John Walker, Chris Colapietro, Seth Rogers, 
Brad Cohen, Dan Fasulo, Weihua Yan, and Nick Hallas for their many important contributions to the system. 
 Bibliography [ACM91] ~ 199L Report of the ACIWIEEE-CS Joint Curriculum Task Force, ACM Press, 1991. 
 [Bie90] m c~ , Alan Bierman, MIT Press, 1990. .. . [Bro91] h.~, J. Glem Brookshear, Benjamin Cummings, 
1991. . [De&#38;M] ~ , Rick Decker and Stuart Hirshfie14 Wadsworth, 1990. [Den89] Computing as a Discipline 
, Peter J. Deming, Douglas E. Comer, David Gries, Michael C. Mulder, Allen B. Tucker, A. Joe Turner, 
and Paul R. Young, the ACM, 32(1):9-23, January 1989. [Gei91] Algorithms and Images: Computer Graphics 
as an Introduction to Science , Robext Geitz, Proceedings of the twenty-second technical symposium on 
computer science education, March 1991, pp. 82-86. [Owe92] Teaching Computer Graphics Using RenderMan 
, G. Scott Owen, Proceedings of the twentyÂ­third technical symposium on computer science education, March 
1992, pp. 304-308. fluc92] ~, Allen B. Tucker, W. James Bradley, Robert D. Cupper, and David K. Gamick, 
McGraw Hill, 1992. 
			