
 A Coordination Language for Collective Agent Based Systems: GroupLog Fernanda Barbosa and Josd C. Cunha 
Dep. de Informdtica -Faculdade de Ci~ncias e Tecnologia Universidade Nova de Lisboa -Portugal (fb,jcc) 
@di.fct.unl.pt ABSTRACT We describe a language providing concepts for modeling au- tonomous entities 
(agents) and cooperating entities (group- s). Agents axe the execution units of a GroupLog program. Each 
agent possesses a hidden internal behavior and a well- defined communications interface and its behavior 
is defined by a set of loEical rules. Groups are important to model a- gent cooperation in a flexible 
and well-structured manner and to hide low-level management of coordination activi- ties. In the paper 
we give an informal presentation of the GroupLog language and illustrate its use through an exam- ple. 
1. INTRODUCTION In multi-agent systems several agents cooperate to achieve some task that might not otherwise 
be achieved by each indi- vidual agent. Group--oriented abstractions offer the possibil- ity of joining 
related agents into logical units of cooperation that may help in the management of distributed computa- 
tions. Nowadays, concurrent programming remains a com- plex task. This complexity could be reduced by 
a model supporting concepts for the structuring of multiple cooper- ating entities. Recently such abstractions 
appeared at the operating system or at the middleware levels [4], but on-ly few proposals attempted their 
integration into program- ming languages [31; 26; 23; 18; 15; 7]. GroupLog provides two main program 
structuring levels: agents (program en- tities) and groups (cooperating entities). Groups support the 
organization of the agent space into distinct sets, each set acting like a meta-agent with well-defined 
internal be- havior and communications interface. GroupLog relies on logic programming abstractions aiming 
at providing trans- parency to the user. Furthermore, the logic based approach finds applications in 
multiple areas, where there is the need of some inference capability (modeled by agents in Grou- pLog), 
coupled with a requirement for an adequate model for specifying the interactions between autonomous agents 
(modeled by groups). Permission to nmke digital or hard copies of all or part of this work for personal 
or classroom use is granted without fee provided that copies are not made or distributed for profit or 
commercial advantage and that copies bear this notice and the full citation on the first page, To copy 
otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission 
and or fee. SAC'00 March 19-21 Como, Italy (c)2000 ACM 1-58113-239-5/00/003>...>$5.00 In the remainder 
of the paper, we first present a brief de- scription of the GroupLog language. In 3 we give an exam- 
ple. In 4, we discuss GroupLog in relation to other languages and in 5 we present some conclusions. 
2. THE LANGUAGE GROUPLOG GroupLog defines extensions to the Extended Horn Clause language (EHC) [29], 
that are supported at two levels: L1, defines agents as program units and L2 defines groups of a- gents. 
A GroupLog system contains concurrently executing agents able to: (1) communicate through interface predi- 
cates, and (2) join groups to coordinate their activities. In the following, we first summarize EHC (see 
[29]), and then describe the two mentioned levels. 2.1 Extended Horn Clauses Extended Horn Clause Logic 
(EHC) is an extension to Horn Clause Logic (HC) with mechanisms for concurrency and synchronous communication. 
EHC supports the parallel composition of goals and provides clauses for modeling an interaction between 
two parallel processes through a joint synchronization step. Such EHC clauses allow an interpretation 
of a message based communication with an object, when some process invokes method "mess(M)" of an object 
instance obj(S). The ex- ecution of that object instance is modeled by a perpetu- al process and two 
cases are allowed to process message "mess(M)': (i) obj(S) :: mess(M) :-method(M) I obj(NewS) :: true. 
(ii)obj(S) :: mess(M) :- method(M) I obj(NewS) :: process(M). This is achieved by activating one of 
these clauses and solv- ing goal "method(M) ~', as explained below. In clause (i) the message is consumed. 
In clause (ii) the message is not con- sumed and is reduced to "process(M)". In both cases the object 
state changes from S to NewS. EHC was used as the base language mainly because of this elegant interpretation 
of process interactions and because the language has rigorously defined semantics. A EHC clause has the 
following form: Ht :: ... :: H. :- G I Gt :: ... :: G.. where Hi are atoms and G and Gi are goals. The 
goals are conjunctions of atoms built by using the following opera- tors: ";" denotes sequential composition, 
"~1" denotes paral- lel composition and "&#38;" denotes simultaneous reduction of atoms. A clause as 
follows can be used for the joint synchronization of two concurrent goals C, and C2 (1) Ha :: Ha :- G 
IG, :: Ga. On a concurrent execution, each goal invocation suspends and waits for the other and only 
then Ca and C2 may be simultaneously reduced to G, and Ga. This joint derivation step is only successful 
if there is a permutation of Ca and Ca that unifies with (H,,H2) with most general unifier 0 and if G0 
is true. In that case, each ith element of the permutation is reduced to G~8 0=1,2). Parallel goal composition, 
Ga[IG2, may be achieved in two ways: (a) Using two Horn Clauses Hi :- Gi and Hj :- Gj where G, unifies 
with Hi and Ga uni- fies with Hj (b) Using one Extended Horn Clause H, :: Ha :- G I G1 :: Ga, where 
a permutation of (G1,G2) unifies with (H,, H2), as explained above  Use of Extended Horn Clauses in 
GroupLog In Grou- pLog we consider only Extended Horn Clauses with one or two atoms in the clause head 
corresponding, respectively, to Horn Clauses [25] and EHC clauses of form (1). Syntactical- ly we use 
"," instead of ";" for sequential composition and the form below, where ":" stands for "::" Ha :H2 :-GIG, 
:G2.  2.2 La - Dynamic structuring units of program entities -Agents The need for structuring the communication 
and synchro- nization in EHC motivated the definition of a dynamic enti- ty, called agent. Syntactically, 
an agent is defined as follows: agent <agent_name>{ /* clause context */ context (<list_modules>). /*comnunication 
context*/ interface(<list_interface_pred_names>). /* agent behavior */ <list of interface clauses> 
/* agent creation */ <creation clause> } The following example defines a stack agent: agent stack{ 
context(). (1) interface(push(X), pop(X), top(X)). (2) /* interface clauses*/ stack(Id,L) : push(X) 
:-I stack(Id,[X[L]). stack(Id,[XIL]) : pop(X) :-I stack(Id,L). stack(Id,[XlL]) : top(X) :-I stack(Id,[XlL]). 
/* creation clause */ stack(Id) : new :- I stack(Id,[]). (3) Agent name and instances Each agent has 
a name that defines its type. An instance of an agent has an unique i- dentifier (e.g. stack(l) instance 
1 of agent of type "stack") and is created when the predefined predicate create_instance(<agent_instance>) 
is invoked. Each a- gent type has an associated prototype that is responsible for the creation of its 
instances. The implicit definition of the agent prototype is given by an EHC clause, eg. for the stack 
agent: (a) stack : create_instance(stack(Id)) :-I stack # stack(Id) : stack(Id)<<new. where: stack is 
the prototype associated with the type of agent "stack", is the operator for parallel composition of 
agent instances and << is the operator for communication with an agent instance. When a program starts, 
the prototypes for all types of agents defined by the program are implicitely activated, namely for agent 
type slack, in the above example When the cre-ate.instance(stack(I)) goal is invoked by another agent's 
in- stance, let us say b(P), the EHC resolution mechanism tries to unify the pair (stack, create_instance(stack(i))) 
with the head of clause (a). As a result of this successful unification: (i) the goal stack in the pair 
reduces to stack~stack(1). This is the parallel composition of prototype stack and the new instance stack(1) 
1;  (ii) the create_instance(stack(i}} goal invoked by b(2) reduces to stack(1)<<new. This is the invocation 
of interface predicate new in agent instance stack(I).  The new instance stack(l) is represented by 
a perpetual pro- cess, successively evaluating calls to a recursively defined procedure with arguments 
representing the sucessive states (or configurations) of the agent. The creation clause of an agent is 
as follows: a(Id) : new :-<initial_conditions> I <initial_configuration>. When this clause is activated, 
the perpetual process a(Id) reduces to <initial_configuration>, if <initial_conditions> is true. At each 
point in a computation, the agent instance has a current configuration that is defined by its perpetual 
process. In the example of stack(i), the initial configuration is given by the empty list stack(I,[]) 
(see clause (3) in the stack agent). Agent program The clause context of a given agent is a set of clauses, 
defined by: module <name_module>{ clause 1 clause n }  where clause i is an EHC with one or two atoms 
in the head of the clause, as explained. The clause context is specified by the predefined predicate 
context(<list_modules>) where <listJnodules> is a list of module names. Its meaning is the union of the 
clauses defined in the listed modules, in their textual ordering. In the example of "stack" agent, the 
clause context is empty (see clause (1) of stack agent). Agent interactions The communication context 
defines the interaction of the agent with its environment and is spec- ified by interface(<list_interfopred_names>) 
where <list_interf_pred_names> is a list of interface pred- icate names and interface is a predefined 
predicate. The 1In this way, we are able to model the creation and activa- tion of agent instances in 
the framework of the EHC model. interface predicates define the visible "entry points" of an agent that 
can be invoked from the outside environment. In the example of "stack" agent, these are: push(X), pop(X) 
and top(X) (see clause (2) of stack agent). Communication forms The communication with an agent uses 
operator "<<" and is synchronous. This can be one- to-one or one-to-many. In one-to-one communication, 
the destination agent and its interface predicate are explicitly cited. For example stack(1)<<pop(X) 
denotes a com-munication with agent's instance stack(l) through interface predicate "pop". In one-to-many 
communication, we only need to specify the type of agent and the interface predicate, because this is 
a form of selective communication which ad- dresses all instances of the specified type. For example 
s- tack(_)<<pop(X) denotes a communication addressing all instances of an agent of type stack through 
interface pred- icate "pop". The agent exhibits a well defined behavior, depending on its current configuration 
and on the invoked interface predicate. There is a non empty set of Extended Horn Clauses associated 
with each interface predicate. Two forms are allowed, where (ii) is a simplified form of (i) when <process> 
is true: (£) <agent_config> : <interf_pred_name> :- <sel;_cond> ] <new_agent_config> : <process>. (ii) 
<agent_config> : <interf_pred_name> :- <set_cond> ~ <new_agent_confSg>. The above clauses have the same 
interpretation as an EHC clause (see (1) in section on EHC) where: 1. H, corresponds to the <agent_config> 
of the addressed agent. This means that this agent instance must have a current configuration that unifies 
with <agent_config> This current configuration is modeled through the a- gent's perpetual process.  
2. H2 corresponds to the <interf_pred_name> in the in- terface predicate that must unify with the interface 
predicate that is cited by the invoker agent. 3. G corresponds to <set_cond> that must be true so that 
the communication can be successful. 4. G1 corresponds to the <new_agent_config> for the ad- dressed 
agent. 5. In form (i) G: corresponds to <process> and has a similar interpretation as "process(M)" in 
the commu- nication with an object in EHC (see section on EHC).  The evaluation of the first three conditions 
(1,2,3) as well as the transition to a new configuration (4) correspond to an atomic step in the invoked 
agent. This means any other invocation made to this agent remains suspended until this agent has completed 
such an atomic step, i.e. is available again for further interactions. If the first three condition- 
s are satisfied, the agent changes to a new configuration, otherwise it keeps its current configuration 
and the commu- nication fails in the invoker. Given the actual configuration of an agent and an invoked 
interface predicate there is a (possibly empty) set of clans- es which are enabled by that configuration. 
These are the clauses of that interface predicate such that <agent_config> unifies with the current agent 
configuration of the agent. All other clauses are disabled for that configuration. An exam- ple is given 
by the clause with head "stack(Id,[XIL]):pop(X)" when stack agent is in its initial configuration (stack(I,[])). 
This means an invocation of "stack(1)<<pop(C)" will sus- pend the invoker agent until a matching configuration 
(trig-gered by a change to a nonempty stack) enables the cited clause. If there is a matching enabled 
interface clause, and if "set_cond" is true, the communication is accepted by the invoked agent so it 
changes its current configuration to <new_agent_config>. This state transition is non reversible and 
the agent becomes available for further interactions with other agents. This means that in clause (ii) 
the interaction is completed and the invoker proceeds with its computation. However in clauses like (i), 
the invoker agent must wait un- til this interaction is completed by the evaluation of goal <process> 
locally to the invoked agent i.e. within this a- gent context (this communication is said to be ongoing). 
The evaluation of <process> cannot involve communication with other agents and is performed concurrently 
with further interactions between the invoked agent and other invoker a- gents. This corresponds to an 
implicit spawning of a con- current thread, internal to the invoked agent. If <process> fails, the communication 
fails for the invoker, although the invoked agent has already committed to a new configuration. Whenever 
an agent changes to a new configuration, there is a commitment. This decision relates to our view of 
an a- gent as a reactive entity that evolves to new configurations as a result of its interactions with 
the environment. The be- havior of an agent is modeled in a logic framework given by EHC, except the 
meaning of the interactions 2. Otherwise we would have to manage the complexity of distributed back- 
tracking which would affect the practical feasibility of the model. One-to-many communication, as in 
stack(_)<<pop(X), pro-ceeds in two steps: 1. The communication suspends until there is an avail- able 
instance of agent stack (i.e. that instance is cur- rently waiting for interactions) with an enabled 
inter- face clause for this invocation of pop; 2. If multiple instances are found in step 1, one is 
select- ed in a non-deterministic way and the communication with the selected instance proceeds as in 
one-to-one communication.  Communication fails when no such instances of "stack" are found, or there 
is no interface predicate "pop/l" in agent stack, or when the one-to-one communication fails in the selected 
instance of agent stack. Agent termination An instance of an agent can be can- celled by the predefined 
interface predicate kill, or implicite- ly cancelled by an interface clause such as: <current_config> 
: <interf_pred_name> :- <set_cond> ~ true : true. This implies the forced failure of all communications 
involv- ing this agent (both suspended and ongoing). If <set_tend> is true, this clause simplifies to: 
<current_conf£g> : <interf_pred_name>.  2The formal semantics of level Lt of GroupLog is already defined, 
but its presentation is beyond the scope of this pa- per. 2.3 L2 - Dynamic grouping of agents - Groups 
The need for structuring the space of agents in Lx motivat- ed the definition of groups as dynamic entities. 
Two forms of cooperation are allowed in L2: (1) access to a shared group state, based on the Linda model 
[20]; and (2) direc- t communication through interface predicates. The group, like a meta-agent, has 
well defined clause, communication and behavior contexts. Its creation is done by the predicate create_instance 
and there is a perpetual process, called the group representative, that models the successive configura- 
tions of the group and the associated transitions. Syntacti- cally, a group is defined as follows: group 
<name_group>{ contoxt(<list_modules>). interface(<list_interface_pred_names>). <list of interface clauses> 
<the creation clause> } The following example defines a group "meet_sch", which has an interface predicate 
(begin), to simulate the beginning of the Meeting Scheduling (in section 4): group meet°sch{ context(). 
interface(begin). meet_sch(Id) : begin :- members(meetsch(Id),[H,I]), rd(meet_sch(Id),meet(MeetId)), 
H<<begin(l,Meetld) [J l<<begin(H,Meetld) I meet_sch(Id). meet_sch(Id) : new :-I meet_sch(Id). } Group 
membership A group is a composition of agents, called its members. The group membership changes dynam- 
ically as a result of predefined interface predicates "add" and "delete". For example friends(1)<<add(F) 
adds agent F to an instance of group friends(i} and friends(1)<<delete(F) removes agent F from that in-stance 
friends[i). A group hides its members from the out- side but allows the redirection of communication 
to them through the group interface predicates. The internal con-currency to a group is explicitely defined 
by its members that have access to a shared group state, for internal coor- dination. An agent can belong 
to one or more groups and inspect their membership through the following predefined predicates: my_group(<group_list 
>) where <group.list> returns the list of groups contain- ing the invoking agent;  see(<a_group>) is 
true if <a_group> contains the invoking agent;  members(<a_group>,<membersJist >) where <members.list> 
returns the list of members in <a_group>;  * see_member ( <a_group >,<a_member>) is true if <a_member> 
belongs to <a..group>.  Structuring the space of agents In L1, all agents belong to the universe of 
agents (U) that models a fiat space. In L2, an agent only belongs to U if it is not a member of any group. 
All agents in U can directly communicate with one another using one-to-one or one-to-many communication. 
When an agent in U joins a group, it is removed from U so it becomes inaccessible to all other agents 
in U. An agent A can only be accessed by the following classes of agents: (1) directly by members of 
the same group as A, through the interface predicates of A, and (2) indirectly, by other agents, if they 
have access to the group interface predicates of one of the groups containing A. An agent is put back 
in U only when it leaves all the groups it had previously joined. In L2, the termination of an agent 
implies its removal from all its groups as well as from U. Group communication The interface clauses 
have the fol- lowing form: (i) <group_config> : <interf_pred_name> :-<set_¢ond> ] <new_group_config> 
: <process>. (ii) <group_config> : <interf_pred_name> :- <set_cond> I <new_group_config>.  In these 
clauses the "set_cond" and "process" goals are eval-uated by a thread of the group representative in 
the group clause context. In these goals we allow the invocation of: (1) predicates defined by the group 
clause context, (2) pred- icates to access the shared group state or (3) interface pred- icates of group 
members or other agents. Unlike an agent, communication is allowed in goal <process>. Communica-tion 
within the group may involve only group members, or the group representative and the group members. Shared 
group state The shared group state is a multi-set of atoms, defined in a module by the predefined interface 
predicate "state". For example, given an instance of group friends(1), the goal friends(1)<<state(ml) 
creates the shared group state, based on the contents of module ml. The members of the group may interact 
by accessing the shared group state, i.e. by reading and writing state ele- ments. The predefined predicates 
-rd, ts, in e out allow access to the state of a group G: 1. ts(G,State_group) : is true if there is 
a subset of the shared state that matches "State_group"; 2. rd(G,State_group) : reads a subset from 
the shared state that matches "State_group"; 3. in(G,State_group): reads a subset from the shared state 
matching "State_group" and removes it; 4. out(G,State_group): puts the subset "State_group" in the shared 
state.  In 2 and 3 above, the invocations suspend until there is a subset of the shared state matching 
"State_group". The predicates ts and out are non-blocking. Namely, ts fails if no matching is possible. 
The modifications made to the shared state, due to these predicates, are not reversible. Group termination 
The elimination of a group is achieved through the interface predicate "kill", or implicitly through 
the activation of a clause like in L1. As soon as the termina- tion of a group is activated, its interface 
predicates disappear except for the "delete" predicate. This is so that the cur-rent group members may 
leave the group. When there are no more members, all pending and ongoing communication- s are forced 
to fail, and the group is removed from all its enclosing groups, and from the universe U. 3. TWO-AGENT 
MEETING SCHEDULING The Meeting Scheduling is a complex problem which con- sists of finding a time schedule 
for a meeting of N agents. This meeting time must be accepted by all agents. The basic idea is to allow 
agents to coordinate themselves in or- der to reach an agreement. The version below (see also in [22]), 
for simplicity, considers the meeting of two agents on- ly -Two-Agents Meeting Scheduling. In this version, 
one of the agents acts as the host (it is the agent who is trying to arrange the meeting) and the other 
agent is the guest. To guarantee that the cooperation will reach a conclusion, we assume that the agents 
always share a free slot of the appropriate lenght in their agenda where the meeting can be scheduled. 
The group "meet_sch", as defined in section 2.3, is used to join the agents in such way that they can 
cooperate through the shared group state. In our example, the two agents have some common knowledge related 
to: (1) finding a possible time for the meeting in accordance with his agenda and (2) telling a possible 
time to the cooperative agents. This knowledge is defined as: module schedule.( found_time (S, meet (MeetId, 
T, L, Art) ) : - /* returns in T a possible time to meet MeetId in accordance with the schedule S */ 
tell_time (I, S, meet (MeetId, L, Art) ) :- found_time (S,meet (MeetId,T, L, Art) ), out (meet_sch (1), 
tell (I, meet (MeetId, T) ) ), ts (meet°sch(1), stop_sch(I) ). tell_time(I .... ) :- in(meet_sch(1) 
,stop_sch(1)) . The cooperative agents are modeled by two concurrent goal- s: (1) find and inform about 
the possible times and (2) find a common time (in case of the host) or wait for the confir- mation of 
the time (in case of the guest). This knowledge is defined in the following modules: module schd°host( 
 ex_host (I ,Guest ,S ,meet (Meetld,T,L ,Art) ) : - rd (game (1), inf _meet (Meet Id, T, L, Art) ), tell_time 
(I, S ,meet (Meet Id, L, htt) ) ( ~ match_time(I ,Guest ,MeetId,T). mat ch.time (I, Guest, Meet Id, 
T) :- in(game (1), [tell (I ,meet (MeetId ,T) ), tell (Guest ,meet (Meet Id, T) )] ), out (game(l), [stop_sch(I), 
conf irm(I ,meet (Meetld, T) )] ). ) module schd.guest~ ex_guest (I, Host, S ,meet (MeetId, T, L, Att) 
) :- rd ( game (I), inf_meet (Meet Id, T, L, At t ) ), tell_time (I, S ,meet (Meet Id, L, Art) ) ~[ 
¢onf_inv (I, Host ,MeetId, T). conf_inv(I, Host, MeetId, T) :-in (game (i), confirm(Host, meet (MeetId, 
T) ) ), out(game(l) ,stop_sch(I)). The host and guest aredefinedasagents in the following way: agent 
host~ context(schedule,schd.host). interface(begin(Meetld,Guest)). host(Id,S) : begin(~eetld,Guest) 
:-ex_host(I, Cuest,S,meet(Heetld,T,L,Att)) I host(Id,[mset(Meetld,T,L,Att)[S]).  host(Id) : new :-garae(1)<<add(host(Id)) 
[ host(Id,[]).  Y agent guest{ context(schedule,schd.guest). interface(begin(MeetId,Host)). guest(Id,S) 
: begin(Heetld,Host) :-ex_guest (I ,Host ,S ,meet (Meetld,T ,L ,Art) ) | guesl~ (Id, [meet (Meetld, T, 
L, Art ) I S] ). guest(Id) : ner, T :-game(1)<<add(guest(Id)) I guest (Id, C]). } In this example, we 
can see how GroupLog concepts are used to coordinate a set of related agents. Other typical example of 
a Philosophers' Restaurant can be seen in [3], where the group notion is used to model the dynamic evolution 
of the system. 4. RELATED WORK Recently, models have been proposed based on coordination concepts aiming 
at integrating a number of components to- gether such that the collective set forms a single application 
that can take advantage of distributed systems. Many proposals extend a base logic language for concur-rency, 
communication and non-determinism. The base lan- guage may be Horn Clause Logic [25], Temporal Logic, 
Lin- ear Logic [21] or Situation Calculus. In the first case, we have Rose [6], DeltaProlog [32; 16], 
MultiProlog [5]. In the second, MetaTem [18]. In the third, COOL [8] and IAM [2] and in the last case 
ConGolog [24]. Specification of con- currency has also been introduced jointly with an object- oriented 
model such as in DLP [17], CSO-Prolog [35], ShaDE [9], IAM [2] and COOL [8]. The motivation to use EHC 
as the base language for Grou- pLog is due to its elegant interpretation of a process inter- action and 
its rigorously defined semantics. The dynamic entities of a program can be modeled by: Processes, as 
April [27] and MultiProlog [5]; Objects, as ShaDe [9], Law Governed Linda [28], IAM [2], ColaS [15], 
Electra [26] and Emerald [31]; Agents, as ConGolog [24], COOL [8], MetaTem [18], A- gentspeak [34], 3APL 
[1] and Placa [33]; Actors, as Concurrent Agregate [10] and Synchronizers [30]. The interation between 
dynamic entities can be modeled by: Sending messages, as ShaDe [9], ConGolog [24], Concur- rent Agregate 
[10], IAM [2], AgentSpeak [34], COOL [8], MetaTem [18], April [27], Placa [33] and Electra [26]; Shared 
tuples, as GammaLog [13], PollS [14], Law-Governed Linda [28], MultiProlog [5] and ESP [12]. Lt vs others 
models In L,, we structured the concurrency and communication with the agent notion, but this language 
does not aim to provide a theory to model the mental state of an agent, as in MetaTem, ConGolog, AgentSpeak, 
3APL and Placa. The agent behavior is only dependent on the interface predicates and its configuration, 
i.e. the entities are reactive and act in accordance with the interaction and its configuration, like 
in the actor model. This behavior is modeled by EHC clauses, with a very similar interpretation to the 
rule based one in AgentSpeak and 3APL. In L,, one simple form of communication is allowed: the explicit 
in- vocation of interface predicates. The notion of agent in L, integrates the logic aspect with the 
object-oriented model, as in [11]. In this model it is possible to model blackboard- based systems, which 
is only allowed in GroupLog in L~. L2 vs others models The definition of groups in GroupLog was the result 
of an incremental development process which started with our early experimentation with the ISIS system 
[4]. Groups allow the modeling of a cooperative entity and the dynamic evolution of a system. A group 
can be created or destroyed, as its members can join or leave the group at any time. The group members 
are hidden from the outside environment. Because a group is a meta-agent, it is possible to have a group 
as a member of another group, so this allows the composition of the group notion, as the context notion 
defined in [7]. In a group we allow two forms of communi- cation: by invocation of interface predicates 
or through the shared group state. So, L2 is also an experiment toward- s unifying distributed-memory 
(remote predicate call) and shared-memory models (shared data). In some of program- ming languages, like 
MetaTem [18], COOL [8] and Concur- rent Aggregates [10], the group notion is used to restrict the communication 
to a certain group of agents, which may alleviate some of the inefficiencies that occur in full broad- 
casting. In other languages, like Electra [26], Emerald [31], Synchronizers [30] and Colas [15], the 
group is seen as a logical unit that manipulates and restricts the invocation of the members group interface. 
In Syneronisers, the notion of coordination is modeled by a special object (synchroniser) that restricts 
the invocation of the group of objects using constraints. In most of these programming languages, as 
in GroupLog, the group is a dynamic entity. But in Synchro- nizers and Colas it is possible to dynamically 
change the coordination behavior, which is not possible in GroupLog. In GroupLog, as in Electra and Emerald, 
the members of the group perceive a consistent view of: (1) the other agents who axe also part of the 
group and (2) the shared state. The main difference between GroupLog and these languages is the group 
interface predicates, that may be distinct from the group members individual interface. In languages 
where the communication is modeled by shared-memory, like ESP [12] and PoliS [14], the communication 
structuring is done by allowing multi-tuple spaces. In ease of PoliS there are hi- erarchical tuple spaces. 
The L2 level of GroupLog supports the structuring of the tuples space into multiple parts, as each is 
naturally encapsulated within a specific group such that only its members are allowed to access the group 
s- tate. This is a good approach to address both modularity, information-hiding, and scalability concerns 
in large-scale real applications. 5. CONCLUSIONS AND FUTURE WORK GroupLog is a programming language allowing 
clear spec- ification of systems supporting the concept of multiple co- operating entities. It can be 
used to implement multi-agent and open systems, as it allows: (1) the logical specification of the agent 
rules, (2) communication and coordination a- mong agents and (3) a system to be completely dynamic and 
open, in that new groups and agents may appear/disappear at any time. Ongoing work is related to the 
formal defini- tion of the semantics and a distributed implementation of GroupLog on top of the PVM system 
[19]. 6. REFERENCES [1] 3APL -An Abstract Agent Programming Language. In http://www.students.cs.uu.nl/swp/I997/robo/3apl/, 
Robo-lab Software Project, University of Utrecht, The Netherland- s.  [2] ANDaEOU, J. M., CIANCAmm, 
P., AND PARESCm, R. In- teraction Abstract Mar.hines (IAM). Research Directions in Concurrent Object-Oriented 
Programming. [3] BARBOSA, F., AND CUNHA, J. A Language Framework for Group Based Multi-Agent Systems: 
GroupLog. In Workshop Foundations and Applications of Collective Agent Based Systems of 11th ESSLLI99 
Proceedings (1999). [4] BmMAN, K., ANn JOSEPH., T. Exploiting Virtual Synchrony in Distributed Systems. 
In 11th ACM Symposium on Oper-ating Systems Principles Proceedings (1987), ACM Press. [5] BOSSCHERE, 
K. D., AND JACQUET, J.-M. Multi-Prolog: a Blackboard-based Paralld Logic Programming Language. Technical 
report, 1992. [6] BROG[, A. AND-Parallelism without Shared Variables. In 7th International Conference 
on Logic Programmin 9 Pro- ceedings (1990). [7] BUFFO, M., AND BUCHS, D. Context Coordination for the 
Mapping of Distributed Systems on Object-Oriented Sys- tems. In Computers and Artificial lnteligence 
Proccedings (1997). [8] CASTELLAm, S., AND CiANeAmm, P. Ex#oring the Coordi- nation Space with LO. Technical 
report ublcs-94-6, Depart- ment of Computer Science, Bologna, 1994. [9] CASTELLANI, S., CIANCARINI, P., 
AND ROSSI, D. The ShaPE of ShaDE: a coordination system. Technical report ublcs-96- 5, Department of 
Computer Science, Bologna, 1996. [10] CrlIEN, A. A. Support Modularity in Highly-Parallel Pro- grams. 
Research Directions in Concurrent Object-Oriented Programming. [11] CIAMPOLINI, A., LAMMA, E., STEFANELLI, 
C., AND MELLO, P. Blackboard- and Object-based Systems via Multi-heads Clauses. In Computers and Artificial 
lnteligence Proceedings (1997).  [12] CIANCAR/NI,P. Distributed Programming with Logic Tuple Spaces. 
Technical report ublcs-93-7, Lab of Computer Sci- ence, University of Bologna, 1993. [13] CIANGARINI, 
P., FOGLI, D., AND GASPARI, M. A Logic Coor- dination Language based on the Chemical Metaphor. Tech- 
nical report ublcs-96-12, Department of Computer Science, Bologna, 1996. [14] CIANCARINI, P., AND MASCOLO, 
C. Using a Coordination Language to Specify the Invoicing System. Technical report, Department of Computer 
Science, Bologna, 1996. [15] CRuz, J., AND DUCASSE, S. A Group Based Approach for Coordinating Active 
Objects. In Proceedings Third Interna- tional Conference, Coordination 99 (1999). [16] CUNHA, J., FERREmA, 
M. C., AND PEREmA, L. M. Pro- gramming in Delta Prolog. In 6th International Conference on Logic Programming 
Proceedings (1989). [17] ELmNS, A. DLP: a Language for Distributed Logic Program- ming -design, semantics 
and implementation. PhD thesis, 1992. [18] FIStlER, M. Representing end Executing Agent-Based Sys- tems. 
In Intelligent Agents -Proceeding of the 1994 Work- shop on Agent Theories, Architectures and Languages 
(1995), M. Wooldridge and N. R. Jenuings, editors. [19] (~EIST, A., AND ET AL. PVM 3 User's Guide and 
Reference Manual. Technical report ornl/tm-12187, Oak Ridge Nation- al Laboratory, USA, 1994. [20] GELERNTER, 
D. Generative Communication in Linda. In A CM Transactions on Programming Languages and Systems Proceedings 
(1985). [21] GIRARD, J. Y. Linear Logic. In Theorical Computer Science (1987). [22] HINDRIKS, K. V., 
BOER, F., VAN DER HOEK, W., AND MEY- ER, J.:J. Semantics of Communicating Agents Based on De- duction 
and Abduction. In Workshop Foundations and Ap- plications of Collective Agent Based Systems of llth ESS-LLIg9 
Proceedings (1999). [23] HOLZBACHER, A. A. A Software Environment for Concurrent Coordinated Programming. 
In Coordination Languages and Models, First Int. Con]. COORDINATION96 Proceedings (1996). [24] LESPRANCE, 
Y., LEVESQUE, H. J., LIN, F., MARCU, D., RE- ITER, R., AND SCHERL, R. Foundations of a Logical Approach 
to Agent Programming. In Intelligent Agents II -Proceed-ing of the 1995 Workshop on Agent Theories, Architectures 
and Languages (1996), M. Wooldridge and N. R. Jermings, editors. [25] LLOYD, J. Foundations of Logic 
Programming. Springer-Verlag, editors, 1987. [26] MAFFEIS, S. The Object Group Design Pattern. In Proceed-ings 
of the USENIX Conference on Object-Oriented Tech- nologies (1996). [27] MCABE, F., AND CLARK, K. April 
-Agent PRocess Inter- ation Language. In Intelligent Agents -Proceeding off the Workshop on Agent Theories, 
Architectures and Languages (1994), M. Wooldridge and N. R. Jermings editors. [28] MINSKY, N. H., AND 
LEICHTER, J. Law-Governed Linda as a Coordination Model. Technical report, 1992. [29] M.JACQUET, J., 
AND MONTE1RO, L. Extended Horn Clauses: The Framework and its Semantics. In 2d International Con-ference 
on Concurrency Theory Proceedings (1991), J.C.M. Baeten and J.F. Groote (ed.), pp. 281-297. [30] PAPADOPOULOS,G. 
A., AND A1RBEI~, F. Coordination Models and Languages. Technical report sen-r9834, 1998. [31] PARDYAK, 
P., AND BERSHAD, B. N. A Group Structuring Mechanism for a Distributed Object-Oriented Language. In Proceedings 
of 14th International Conference on Distributed Computing Systems (1994). (32] PEREtRA, L. M. Delta Prolog: 
A Distributed Logic Program- ruing Language. In Proccedings of FGCS, ICOT (1984). [33] THOMAS, S. R. 
PLACA, An Agent Oriented Programming Language. Technical report stan-cs-93-1487, Computer Sci- ence Department, 
Stanford University, Stanford, 1993. [34] WEERASOORIYA,D., AND A. RAO, U. R. Design of a Con- current 
Agent-Oriented Language. In Intelligent Agents -Proceeding of the 1994 Workshop on Agent Theories, Ar-chitectures 
and Languages (1995), M. Wouldridge and N. R. Jennings, editors. [35] WIEDERANDERS, K. CSO-Prolog: A 
language for knowledge based object-oriented programming, distributed execution and simulation. Tech. 
rep., 1992. 195    
			