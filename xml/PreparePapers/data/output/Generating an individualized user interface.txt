
 GENERATING AN INDIVIDUALIZED USER INTERFACE: FROM NOVICE TO EXPERT Jean Tague School of Library and 
Information Science The University of Western Ontario Elborn College London, Ontario N6G iHi Abstract 
 A model of the interface to an information retrieval system is developed based on the semantic data 
model. Using this framework, a method of developing customized user interfaces is described, in general 
terms and in a specific implementation in the Interface Builder module of the Western Information Retrieval 
System. Introduction ponse to the input, windows may be superimposed on the screen with elaborating 
text (helps), menus to describe the set of possible user selections, error messages, and user input forms 
or prompts. Each screen or window display has two aspects, as Boss (1986) has pointed out: a logic and 
a geometry. Logic relates to the validation and interpretation of user input. Geometry relates to the 
placement of items on the screen. The interface for an information retrieval system provides the user 
with capabilities for storing information and for querying an information store. Interfaces for early 
information retrieval systems were command-based and closely tied to the physi- cal representation of 
information in the store. More recently, approaches such as menus and pseudo natural language understanding 
systems have effectively hidden the internal structure of the store from the user in favour of pre- senting 
a friendlier face. For some users this masking is no advantage. (See Tague 1984, 1986). Given the variety 
of users, both in terms of needs and experience, of many information retrieval systems, compared, for 
example with corporate data base management systems, a more flexible approach may be desirable. It is 
the purpose of this paper to present such an approach in general terms and to describe its specific implementation 
in the Interface Builder module of WIRES (Western Information Retrieval System). In an online retrieval 
system, an interface is a sequence of screen displays. A screen display will consist of some combination 
of natural language text, menus, forms, and pictures which have been retrieved from system storage. In 
addition, there may be user input in the form of selections, fill-in-the-blanks responses, system commands, 
and natural language commands. In res- Permission to copy without fee all or part of this material is 
granted provided that the copies are not made or distributed for direct com- mercial advantage, the ACM 
copyright notice and the title of the publication and its date appear, and notice is given that copying 
is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires 
a fee and/or specific permission. &#38;#169; 1987 ACM 089791-232-2/87/0006/0057--75¢ The sequence of 
displays which comprises an inter- face occurrence also has a logic and a geometric component. The logic 
relates to the rationale for a particular order, the way in which the present screen/window and user 
input will deter- mine the commands transmitted to the system and the next screen or window in the sequence. 
The geometric component relates to the visual aspect of the sequence: replacement of entire screens, 
vertical and horizontal scrolling of screens, and superposition of windows on the screen. In order to 
design an interface, a conceptual model of the retrieval system, that is, a model of the user's information 
world, must be deve- loped. An information world is an attempt to limit the kinds of information which 
will be stored in the base and the kinds of queries which will be asked of it. A good interface will 
permit the user to express the facts and questions of his/her information world easily and fully; thus 
simplicity and power are two sometimes conflict- ing demands of the interface. The conceptual model 
provides the specifications for the logic and geometry of the interface. The language in which the conceptual 
model is described should be both comprehensive and discriminating, so that all of the significant entities 
and relationships of the information world can be expressed. The Semantic Model In previous papers, 
(Tague 1984, 1985, 1986), the semantic model has been proposed as an organizing principle for the conceptual 
model of an informa- tion retrieval system. This model provides a means for describing the entities and 
procedures which most information retrieval systems, both commercial and experimental, currently provide 
to the user: 57 This model is characterized by the following NEXT/BACK to move backward and forward 
in a set features: HISTORY to display search history Entities: QUERY CORPORATE SOURCE DOCUMENT CLASSIFICATION 
CODE DOCUMENT TYPE CONTROLLED TERM ABSTRACT UNCONTROLLED TERM PARAGRAPH WEIGHT TABLE PUBLICATION 
DATE TABLE OF CONTENTS JOURNAL TITLE REFERENCES JOURNAL VOL/PAGING TITLE LANGUAGE AUTHOR PARAGRAPH 
 EDITOR SENTENCE TRANSLATOR ISBN/ISSN The semantic model is not limited to these, al- though they are 
useful as a starting point. The model can also be used to describe full-text, weighted indexing, statistical 
and numeric, and mixed-mode information systems. If the semantic model is to be an organizing principle 
for the logic of the interface, means must be provided for expressing all of these entities, relationships 
and actions in the display sequence which constitute the interface. The geometry of the interface, both 
local and global, should reinforce this logic. Representation of the Interface An over~all schematic 
of the Interface Builder is shown in the diagram of Figure 1. Its two 'iTBPU,~ ~ II 8U~.,~ I I I C~'l~O~ 
I I I ~Z£S Figure 1 --Schematic of Interface Builder main components are a data structure consisting 
of a set of templates, to use Boss' term, and a controller procedure. A template essentially contains 
all of the information needed to generate a display screen or window. A screen template consists of the 
following:  Actions: USE CLOSE STORE CHANGE DELETE SEARCH SHOW PRINT BROWSE i. All entities (stored 
items or queries) are constructed from a character set (for example, the extended ASCII set) and 5 binary 
rela- tions: sequence (ordered pair of entities) concurrence (unordered pair of entities), alternation 
(one or the other of two entities), difference (that part of one entity which is not another entity) 
and hierarchy. Three types of hierarchy may be distinguished: classifi- cation (one entity is a type 
of another), characterization (one entity is an attribute of another), and membership (one entity is 
an instance of another). 2. Representation of stored items involves the three types of hierarchy, sequence 
and con- currence. Representation of queries involves sequence, concurrence, alternation, differ- ence 
and two types of hierarchy, membership and characterization.  3. Stored items, queries, and commands 
are all texts, that is, sequences of characters. There are four varieties of text: terminals  (the 
information itself), labels (names of sets of simple or compound entities, for example, AUTHORS, TITLES, 
CA DATABASE) oper- ators (relationship indicators), and actions. 4. Both terminal text (tokens) and 
labels (types) may be assigned numeric weights.  5. In general, entities may contain any combina- tion 
of labels, terminals, and operators. Entities which contain only labels and operators are called schema. 
Schema des- cribe a subset of other entities in the set of stored items.  6. Procedures are sequences 
of commands. Com- mands consist of actions, terminals, labels, and operators. Actions correspond to various 
transformations of the stored information set and the evaluation of numeric or logical functions defined 
on the set.   A recent International Standards Association Draft Proposal on Commands for Interactive 
Search Systems included the most frequently encountered entities and actions of present day information 
retrieval systems. With some additions and re- naming, these are as follows: to select an entity class 
for further actions to terminate use of an entity class to store an entity to modify an entity to delete 
an entity to submit a query to display or print locally to print remotely to display instances of an 
entity class in alphabetical or other order  58 TEMPLATE NUMBER TEMPLATE TYPE: screen or window (dimensions) 
 TEMPLATE ITEMS: System text: Location (x,y) Text Location (x,y) Text Location (x,y) Text User input: 
Location Value Next template Value Next template Value Next template Location Value Next template COMMAND 
LINE FORM  Window templates provide user assistance (help), menus, forms, or requests for user input, 
and consist essentially of the same information as full screen templates. A screen may include a window 
whenever it is displayed, or the window may be superimposed, as a result of user input. The template 
thus provides information about the placement of items on the screen, the valid values for user input, 
the translation of user input into system commands, and the determination of the next screen or window. 
 Each screen which requests user input provides the user with the alternative of entering a system command, 
at the bottom of the screen, rather than the equivalent by means of menu selections or insertions into 
forms. The Command Editor is essentially an expert system which pro- vides guidance to the user, through 
appropriate error messages and prompts, in composing a well- structured system command. User input in 
other forms, including natural language commands, is translated into a sequence of one or more system 
 commands, and these are displayed at the bottom of the screen. The interface Controller has three 
functions: to implement the sequence of screens and windows, to validate and interpret user input, and 
to transmit system commands, translated from user input using information on the template or the natural 
language processor. It determines the sequencing mode of screens and windows, i. e., whether they will 
be replacements, superim- posed, or scrolled. The Natural Language Processor converts natural language 
queries, at present, by a simple system of stop word elimin- ation and significant word concurrence. 
 The User-Derived Interface An interface, as just described, is essentially a tree of templates and 
windows and a controlling procedure which determines which branch of the tree will be traversed. The 
templates describe the default interface, that is, the interface pre- sented to a user if no other sequences 
of tem- plates and windows have been specified. Alternative interfaces are stored in the data structure 
called Interface Trees. This is a for- est of trees, where each tree consists of a header (root) identifying 
the tree by an i~enhi- fie r or user name, and a subtree of nodes repre- senting an alternative interface. 
Each node corresponds to a screen or window number in the Templates structure, but need not contain 
the full template information; only sufficient in- formation to determine the sub-branch of the tree 
to follow. If more than one user is likely to be using a specific interface, the Interface Index may 
be created to provide access to the appropriate interface tree by user name or identifier. In order 
to permit a user to customize the inter- face, the default interface is presented ini- tially. In this 
interface, top level menus, forms, requesters, and prompts are displayed, and second level menus and 
help files may be accessed by choice (for example, by clicking a mouse button) as superimposed windows. 
The top level menus permit selection, in general terms, of an action and one or more entities which play 
specified roles with respect to the action. At the bottom of the screen is a command line prompt. This 
permits the user to enter a command if desired. The command interpreter will provide prompts and error 
messages for users, as necessary. If menu, requester, or form inputs rather than commands are entered, 
these are interpreted as one or more commands which are displayed to the user at the bottom of the screen. 
Thus, the user gradually learns the commands. For each user, a template tree is stored. Ini- tially 
this will be the default sequence; how- ever, the numbers and information in the nodes will be altered 
in response to user behavior, creating new screen and window sequences. For example, if users enter commands 
rather than selections, from menus or input to forms, then the next time this part of the system is accessed, 
the screen displayed to the user will not contain the top-level menus, except on user request. If commands 
are entered incorrectly, a screen incorporating command line prompts will be displayed on the next iteration. 
If second level menus or help files are requested, these will be incorporated in a substitute screen 
for the next iteration. An example of the initial display for an online retrieval system might be as 
indicated in Figure 2 and the customized initial display as in Figure 3. HH^~ DO ¥OU H^HT TO DO? ........................ 
 To see nenu of choices, click left eouse Dutton hePe ~.... I O0~AHD: Figure 2 --Default Screen 59 
 HHAT DO YOU HAHT TO DO? Click lePt Mouse button be~ide ~election: ~{toP,~ infol~tion l__l  Se~poh fop 
l__l inPorn~ion Chan~einformation{__l  COHNAND: Figure 3 -- Customized Screen  A second approach to 
personalized interface building is through provision of an editor which will permit the user to modify 
the actual tem- plates. A third approach is modification of the interface tree by system personnel after 
dis- cussions with the user and/or examination of user transaction logs. These approaches provide greater 
flexibility to the user, as they permit the entry of new instructions, menus, forms, and explanations. 
However, they require a greater investment of time on the part of the user and system personnel. Planned 
Implementation The Interface Builder software is currently being developed as part of the WIRES (Western 
Information Retrieval System). The initial application of this system will be to provide an online public 
access catalog for the library of the School of Library and Information Science, The University of Western 
Ontario. The major part of the system is being developed in the C programming language running under 
Xenix. How- ever, the prototype for the Interface Builder is being developed on an AMIGA, in BASIC, be- 
cause of the ease with which graphics and event trapping may be implemented on the latter system. Eventually, 
the BASIC programs will be converted to C so that the Interface Builder will form a module of the operational 
system. One problem which must be solved is the develop- ment of an economical data structure for the 
Interface Trees. If the number of users is not large, duplication of trees for different users will not 
be a concern. However, if the number of users is large, some way must be found to eliminate duplicate 
trees as they occur. A different kind of problem relates to the evaluation of the system. To what extent 
does customization of the interface improve retrieval performance? What measures can be used to assess 
the quality of an interface or to compare inter- faces? These and other problems will be a part of the 
 continuing WIRES project. Re fe ren ce s i. L.J. Boss, "A generalized user interface for applications 
programs (ii)", communica- tions of the ACM 28(6), 1985, 617-627. 2. International Organization for 
Standardiza- tion, Documentation --Commands for Interactive Search Systems, DP 8887 Rev, 1'9"86.  3. 
J. M. Tague, "A semantic model and schema notation for bibliographic retrieval systems," Research and 
Redevelopment in Information Retrieval: Proceedings of the Joint BCS and ACM Symposium, Cambridge, England, 
1984, 71-94.  4. J. M. Tague, "The two-faced interface", Proceedings of the Annual Meeting, American 
Society for Information Science 22, 1985, 81-85.  5. J. M. Tague. "The semantic model in information 
retrieval," Presented at the 4th Conference on Empirical Foundations of Information and Software Science, 
Georgia Institute of Technology, 1986.  6O   
			