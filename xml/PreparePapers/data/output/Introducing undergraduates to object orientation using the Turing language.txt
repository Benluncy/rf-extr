
 Introducing Undergraduates to Object Orientation Using the Turing Language Richard C. Holt (holt@sri.toronto.cdtt) 
Department of Computer Science University of Toronto Abstract. Object-oriented programming was introduced 
in the 1980s and is now being used extensive y in industry, but academia has not generally inchtded it 
as a main stream topic for instruction ~azaitas 93]. Part of the difficulty is the lack of goed software 
to support teaching of object orientation. This paper describes an approach that teaches 00 concepts 
across the Computer Science undergraduate curriculum, beginning in the introductory course, using the 
Object-Oriented Turing system. 1. Introduction The capability of hardware, in terms of both speed and 
memory capacity, continues to double approximately each two years. In order to utilize this expanding 
computational capacity effectively, a great deal of new software will need to be developed over the coming 
decades. Those individuals and those countries that have the expertise to develop such software will 
be in a position to realize great technological and economic gains. Our current methods of developing 
software are not sufficient to produce the quality and quantity of software, especially large-scale software, 
that is needed. The advent of the object-oriented (00) programming holds out hope to solve some of the 
difficulties of software development. Object orientation was developed in the late 1970s and the 1980s 
and is now being widely introduced in industry. Its fttndatnerttal contribution is that it provides a 
paradigm and a way of organizing concepts that directly attacks the key problem of software, which is 
its extreme mmplexity. By dividing software up into interacting objects , each of which is characterized 
by its interface rather than its implementation details, we take a large step in the direction of simplifying 
both our software and our thinking. This paper begins by discussing the key 00 concepts that should be 
taught. Next, the Object-Oriented Turing (OOT) environment is presented as a Software Development Environment 
that has been designed to support the teaching of 00 concepts across the undergraduate curriculum. Finally, 
the use of 00T at various levels in the curriculum is discussed, the levels being: the introductory course 
@eid 92, Temte 91], an intermediate languages (paradigms) course, and an advanced software engineering 
course. Permission to copy without fee sII or part of this materiel is granted provided that the oopies 
ore not made or distributed for direct commercial advantege, the ACM copyright notice and the title of 
tha publication and its dote eppoor, end notice is given that copying ia by parrnission of the Association 
for Computing Machinary. To copy otharwiae, or to rapublish, raquires a faa endlor apecifrc permission. 
SIGSCE 94-W34, Phoeniz Arfzor%USA @ 1994 ACM O-89791+4=94W..$3.5@ 2. 00 Concepts to Teach In this section, 
we will cover the key 00 concepts fCox 87, Booth 91, Budd 91, Meyer 88] that a student should master. 
Before discussing these concepts, it should be emphasized that the key benefit of 00 lies in what is 
called programming-in-the-large (PitL), which means dealing with very large programs that consist of 
hundreds of thousands to millions of lines of code. The benefit of the 00 approach in software engineering, 
which by its nature deals with PitL, has been discussed by a number of authors. Too often, we see neat 
little example programs that are intended to show the power of the 00 approach. programming-in-the-small 
(PitS), with little programs, is not where the real difficulties in software development lie. Bearing 
in mind that we are interested primarily in PitL problems, we will now present three fundamental 00 concepts. 
2.1 Three Foundational 00 Concepts: Objects, Classes, and Inheritance Objects. The first and most important 
concept in 00 is often called information hiding. Long before 00 became popular, this mncept was recognized 
as the black box principle. A black box is an item, such as a radio, that is understood in terms of its 
inputs and outputs and not by its internal construction. For the radio, its buttons and knobs characterize 
its input and the sound it produces characterizes its output. In 00 terminology we refer to a black box 
as art object . In terms of software, the essence of an object or black box is that we hide data (and 
other internal implementation details) in a box and all that we can manipulate or observe from the outside 
is the externally visible interface, mainly the exported subprograms (these are called methods). 00 languages 
 provide syntactic mechanisms to enforce this hiding. As presented by many textbooks, an object is the 
same concept as an abstract data type (ADT). However, ADTs actually imply another idea. This idea is 
the meaning (semantics) of the object, which is distinct from its implementation. For example, the semantics 
of an ADT may be its FIFO (stack) property, while i ts implementation may be based on a list of values. 
The student can be taught about ADTs in a language such as Pascal, but this is difficult because the 
Standard Pascal language does not support information hiding. Languages such as Ada and Modula 2 (and 
extensions provided by Turbo Pascal) provide information hiding in terms of modules or packages and can 
be used for teaching about ADTs. (Tcchnic4 y speaking, Ada and Modula are called object-based as opposed 
to object-oriented languages bwmse they support information hiding but not Classes. A class of objects 
is a set of objects all of which are the same, or sufficient y the same for our purposes. From a programming 
point of view, a class is a template from which we can instantiate or replicate objects. Using our previous 
example, a class can be thought of as the design of a radio, from which we can make many individual radios. 
In large software systems, we make cnnstant use of software obj ects, such as files and windows, which 
are (or are essentially) instances of classes. To make the concept of classes clear to the student, we 
need exercises that use many objects. A good example is provided in Budd s book ~udd 91], which supports 
a game of solitaire using a class of playing cards and a class of stacks of cards on the playing table. 
Inheritance. Class D inherits from class C if class D contains all the items of interest that C contains. 
For example, consider a new radio design D, that is just like an old design C, except D adds a new knob 
that activates a new external plug for ear phones. In this case, we say D inherits from C. We say D is 
a C, meaning that we can use a radio of design D for all the same purposes for which we can use a radio 
of design C. There are actually two ways in which an idwiting class D can be different from its parent 
class C. First, it can extend or add to the parent class. For example, a new subprogram or data field 
can be added. Second, it cau change or override certain kinds of items in the parent. The power button 
on the radio might be changed (overridden) to turn on a light on the radio, as well as turning on the 
internal circuits. Overriding allows us to create similar but significantly different objects. For example, 
all objects that are Macintosh files have much in common, but the effect of opening a particular file 
is quite different depending on the kind of file we open, This is because the open operation has been 
effectively overridden for the various kinds of files. We say that Macintosh files are polymorphic because 
they react in varying ways to the same methods, such as the open operation. These are the three basic 
concepts discussion we have used the metaphor design. We now turn to diagrammatic representing 00 concepts. 
of of c 00. a radio onventions In and its this for 2.2 Diagrams and Relations There are a number of 
important relationships among objects and classes, and these are best understood using diagrammatic conventions. 
At the level of objects (instances), the two key relations are has a and uses. Figure 1 gives a diagram 
of a Parser object and a Stack object. The arrow from the Parser to the Stack indicates that the Parser 
uses (calls) the Stack. The Stack object has a (contains) two internal variables (an array called Contents 
and an integer variable called Top) and two externally visible subprograms (Push and Pop). The protrusion 
of Push and Pop from Stack indicates that they Stack -Parser -EJ El Push Pop P Figure 1. Example of diagrammatic 
conventions for objects, showing the uses relation and the has a relation. Among classes, the most important 
relation is inherits , as illustrated in Figure 2, which shows that radio design D inherits from radio 
design C. Another essential relation is instance of , for example, a particular radio object R, might 
bean instance of radio class D. Basic design [ of radio J inherits \ Figure 2. Diagrammatic convention 
for classes and objects, showing the inherits and instance (of relations. Rectangular boxes are objects. 
Rounded boxes are classes. Students will understand 00 ideas much better when they have mastered these 
diagrammatic techniques. (There are many diagranunatic conventions; the details of the one used by students 
are not important.) A studelnt should be able to visualize a given program s structure in terms of these 
diagrams and conversely, be able to create a program that has been designed using these diagrams. The 
reason these diagrams are so useful for learning is that they use our visual sensibilities to represent 
a rich set of ideas. These ideas include the relations of has a , uses , is a , and instance of among 
objects and classes. These diagrams concentrate on the software s structure, allowing us to suppress 
implementation detail to understand program design. What we need to concentrate on, at least at the higher 
levels in our curriculum, are ideas of software structure or architecture [Shaw 89], which are best learned 
diagrammatically. 2.3 Software Development Environments One of the most important ideas emerging frc~m 
Smatltalk is that a programming environment, based on appropriate principles, can significantly improve 
tlhe way we usable classes and experiment with them with great facility. Largely because of this, Smalltalk 
encourages rapid prototyping to a degree that has not been approached in most languages. Turbo (Borland) 
environments for Pascal and C++ provide integrated environments that expedite the edit-compile-link-debug 
cycle. But this remains a programming-in-the-small cycle, while the SmalRalk environment holds the promise 
of larger scale programming, in which off-the-shelf components can be assembled into new programs. Missing 
from both Smalltalk and Turbo environments are tools that are commonly called CASE facilities. These 
provide machine assistance for the diagrammatic approach that we have just discussed. The student s learning 
can be greatly advanced if these tools are available in an integrated environment, which ideally can 
generate diagrams from software, can generate skeletal software from diagrams, and can check that a diagrams 
and software ase consistent. The 00T environment, which is described below, provides a diagrammatic capability 
as well as providing anon-line re-use library. Software development environments (SDES), as exemplified 
by Small talk, support a method of software creation that is inherently faster and better than is possible 
using older paradigms, which have been collections of tools such as editors, compilers, linkers, and 
debuggers. This section has discussed fundamental conmpts of 00 and closely related ideas such as diagrammatic 
conventions, software development environments and software re-use. We will now discuss 00T, which is 
a language and environment suitable for teaching 00 ideas. 3. The 00T Language and Environment The C++ 
and Smalltalk languages are perhaps the most commonly mentioned languages for supporting the teaching 
of 00 concepts. Other languages which are good candidates for teaching 00 concepts include Objective 
C, Turbo Pascal with 00 extensions, Eiffel, Modula 3, and CLOS. We will not discuss these languages in 
any detail, but refer the reader to discussions of 00 languages ap~ting in the literature Pudd 91, Booth 
91]. In this section we will give an overview of the Object-Oriented Turing language and software development 
system. The 00T software development environment was designed for use in undergraduate courses. It has 
evolved from the Turing language molt 88] which is a Pascal-like language that is very easy to learn. 
Turing is now used in 30 universities and in approximately half of Ontario high schools where it is used 
on PCs and Macintoshes. The basic Turing implementation used in high schools provides an integrated edit-compile-mn 
system. OOT extends the basic Turing system by providing more advanced programming features, including 
00 features, and a sophisticated software development environment. The 00T language and its SDE have 
been described elsewhere With the advent of windowing systems, such as MicroSoft Windows for PCs, our 
students should be aware about how windowing facilitates programming. In the case of the 00T SDE, individual 
windows encapsulate the distinct ideas that the programmer deals with. For example, each source program 
object, such as the Parser in Figure 1, is displayed in its own window. There are also windows to show 
the program s output and to show current error messages. Perhaps 00T s most striking use of windows is 
the Landscape Window, which displays a diagram (called the Landscape) with boxes representing the objects 
and classes in the program. For example, a Landscape view might show a picture much like Figure 1 for 
the corresponding program. There is a hot link that allows the user to immediately access the source 
code that corresponds to each box in the diagram. Another window gives the Process Dump, which is a stack 
trace of called procedures, and cau be used to locate the current line of execution. There are also windows, 
called Interface Views, that give the interfaces for objects such as the Parser object (Figure 1). These 
Interface Views, which are automatitxdl y created from the source programs, allow the programmer to inspect 
the entry points (methods) of an object rdong with corresponding parameter types and comments. Double 
clicking on the name of a method in an Interface View causes the corresponding source code to pop up 
in a window. OOT displays the current directory in a window, much as does a Macintosh. Double clicking 
on a name in this Viewer causes a fresh window to be popped up showing the file s contents. The Directory 
Viewer serves as a browser for programming objects and classes, as well as for the on-line language reference 
manual and for re-use libraries. Our purpse here is not to describe 00T in any detail but rather clarify 
how much its facilities help a student master the difficult job of software construction and maintenance. 
(See the Appendix for the way to access the Ff P on-line demonstration of 00T.) 4. OOT in an Introductory 
Course The OOT SDE is used in the University of Toronto introductory classes in the Faculty of Applied 
Science and Engineering. When students are first introduced to 00T, they use OUIy simple features, including 
a window containing their program, an output window and the Directory Viewer. 00T has been designed to 
be very easy to use by novices. The student begins, with little explicit instruction, by using 00T s 
mouse-based Macintosh-like interface. The Turing language s simple input/output and graphics statements 
allow students to begin writing programs immediate y. For example, here is a complete program that outputs 
Hello world and draws a green box on the screen with opposite comer coordinates at (10, 15) and libraries 
and SDES. Later courses, as wil~l now be (loo, 120). discussed, cover these concepts on more depth. put 
 Hello world drawbox (10, 15, 100, 120, Graan) The OOT system has a pay-as-you-play philosophy that 
allows students to learn more of the system as they master more concepts. This Fall (1993) students at 
the University of Toronto in an introductory course will be introduced to 00 concepts. Using an approach 
that has been used earlier with gifted high school students in summer courses, we will first cover fundamentals 
of programming: 1oops, IFs, subprograms and simple data structures, as well as simple graphics. Then, 
as a final assignment, students will be exposed to 00 concepts (objects, classes, and inheritance) by 
means of an assignment based on a simple class library for drawing figures. This library (see Figure 
3) consists of a tree of classes. Rectangle  0(. -)  Figure 3. A class hierarchy used for introducing 
students to 00 concepts. The arrows show inheritance. The root of the class tree is called Figure; it 
represents objects that can, in principle, be drawn on the screen and later erased. The actual bodies 
for the draw and erase procedures of the Figure class are omitted; in other words, Figure is an abstract 
(or virtual ) class that represents all objects that can be drawn and erased, but does not represent 
any particular figure. Classes such as Rectangle and Circle which descend from (inherit from) the Figure 
class provide actual code to draw and erase particuh figures. (In the actual assigmnent, there is also 
code to set the color, size and position of figures, but these details will be ignored in this paper.) 
The students are provided with a library that implements the hierarchy shown in Figure 3, but without 
the HappyFace and SadFace classes. The students are required to enhance the library with the missing 
classes and to have their program draw an interesting scene on the screen using these classes. Since 
the assignment is so graphical, it is easily explained to students. They are clearly pleased with the 
results of their work, which displays a picture on the screen. The objective of this exercise is to give 
introductory students a good feel for 00 concepts, including use of course on programming paradigms. 
Our course is actually titled Principles of Programming Languages, but its real p~se is to acquaint students 
with paradigms such as 5. 00T in a Course on Programming Paradigms Like many Computer Science departments, 
ours offers a loglc programmi ng (PROLOG), functional programming (LISP), concurrency, etc. In a 4-week 
unit in this course, we use OOT to teach the 00 paradigm. Mike Godfrey, an instructor in this course, 
developed a set of teaching materials including students readings and teachers slides, which are available 
via FIT (see Appendix). This unit has as its goal to teach design implications of 00, at a much deeper 
level than is possible in an introductory course. By the time our students reach this course, they have 
had considerable experience with Turing, though not generdlly its 00 features, so little time is wasted 
instructing them about syntactic issues of 00T. Although other languages, such as C++, are mentioned 
in the unit, only 00T is covered in any depth. The students assignments are based on an existing class-intensive 
program called Star, which reads 00T programs and automatically creates diagrams on the screen for them 
that are analogous to Figure 2. The students are required to enhance this program in various ways, for 
example, so it outputs PROLOG facts cmresponding to the relations among the 00T program s classes. This 
work exposes students to many issues of importanm to software engineering, including automatic program 
diagrarmning, program maintenance, and multiple views of a program, all within an 00 cmtext. Other more 
advanced courses, including our cc~mpiler and OS courses use 00T, but not necessarily with an 00 point 
of view. A fourth year course on software engineering uses 00T and the 00 point of view will be discussed 
next. 6. 00T in a Course on Software Engineering A fourth year University of Toronto course provides 
a standard coverage of software engineering concepts [Somerville 92]. This course uses an 00 a~pproach 
in the following way. At the beginning of the course, the students are given a set of milestones representing 
the phases in the life cycle of a soft ware product that teams of three students in the course are required 
to create. The product last year was a Graphical User Interface (GUI) library written in 00T targeted 
for use by other undergraduates. Ideally, the product would be used by other classes of studeluts to 
allow them to incorporate GUI support (menus, buttons, etc.) as apart of their programs. The software 
engineering students were provided with basic event handling at the level of X events in 00T, and were 
required to design, implement and document a class library of widgets. Each widget (in a tree of widgets) 
is to support a particular object on the saeen, such as a push button or a menu. The hardest part of 
the project was, on purpose, the design phase, namely the design of the widget hierarchy and the design 
of event routing within the set of active widget objects. The goal was to provide an interesting exercise 
in software design, something which is too often missing in undergraduate c&#38;cation. At the various 
milestones, the student teams had to deliver electronic documents detailing their product s requirements, 
specifications, design, test set up, user documentation, etc. At the end of the term, each team gave 
a demonstration of a sample program, such as a calculator, that used their GUI library. This project 
was intended to teach many software engineering concepts including the software life cycle, team work, 
delivery of re-usable software, etc., all in a modern 00 environment, namel y 00T. 7. Conclusions This 
paper has discussed ways to introduce 00 concepts across the undergraduate curriculum using the OOT system. 
This system is intended to introduce students to state-of-the-art 00 software methods while minimizing 
the time spent on technical trivia. References @3udd 91] Budd, T. An Introduction to Object-Oriented 
Programming. Addison-Wesley publishing Company, Reading, Massachusetts. mooch 91] Booth, G. Object-Oriented 
Design with Applications. BenjaminlCummings, Redwood City, Crdif 1991. (Cox 87] Object-Oriented Programming: 
An Evolutionary Approach. Addison-Wesley Publishing Company, Reading, Massachusetts. molt 88] Holt, R. 
C. and Cordy, J.R. The Turing Programming Language. Comm. ACM 31, 12 (Dec. 1988), 1410-1423. molt 92] 
Holt, R. C. Turing Reference Manual, Third Edition, Holt Software Associates Inc., March 1990,361 pages, 
Toronto. ~ancoridis 93] Mancoridis, S., Holt, R., and Penny, D. A Curriculum-Cycle Environment for Teaching 
Programming. 24th SIGCSE Technical Symposium, Assoc. for Computing Machinery, Feb. 18-19, Indianapolis, 
Indiana, SIGCSE Bulletin 25,1 (Mar. 1993). ~azaitis 93] Mazaitis, D. The Object-Oriented Paradigm in 
the Undergraduate Curriclum: A Survey of Implementations and Issues. SIGCSE Bulletin, 25, 3 (Sept. 93), 
pp. 58-64. Meyer 88] Meyer, B. Object-Oriented Software Construction. Prentice-Hall International, London. 
(J?eid 92] Reid, R. The Object-Oriented Paradigm in CS 1. 24th SIGCSE Technicrd Symposium, Assoc. for 
Computing Machinery, Feb. 18-19, Indianapolis, Indiana, SIGCSE Bulletin 25, 1 (Mar. 1993), pp. 265-269. 
[Shaw 89] Shaw, M. Larger Scale Systems Require Higher-Level Abstractions. Proceedings of Fifth International 
Workshop on Software Specifications and Design, IEEE Computer Society, 1989, pp. 143-146. [Somerville 
92] Somerville, Ian, Soft ware Engineering, Fourth Edition. Addison-Wesley, 649 pp., 1992. Demte 91] 
Temte, M.C. Let s Begin Introducing the Object-Oriented Paradigm. SIGSCE Bulletin 23, 1 (March 1991), 
73-77. Appendix: FTP Access to OOT Software Demonstration There is an on-line demonstration version of 
00T from the University of Toronto that can be accessed by anonymous lWP. The 00T environment is currently 
implemented on Unix platforms, such as Sun/4 s, RS/6000 and SGI, plus a not yet released version for 
PCs. If you have access to the Intemet and Unix, you can get instructions to access the demo by following: 
%ftp 128.100.1.192 ft~ cd@ f t~ get ootDistrib ft~ quit The ootDistrib file in your directory will now 
contain details on getting the demo. 
			