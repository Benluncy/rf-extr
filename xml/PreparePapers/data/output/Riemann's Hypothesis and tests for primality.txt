
 RI~iANN'S HYPOTHESIS AND TESTS FOR PRIMALITY % Gary L. Miller Department of Mathematics University 
of California, Berkeley, California 94720 Abstract: The purpose of this paper is to present new upper 
bounds on the complexity of algorithms for testing the primality of a number. The first upper bound 
is 0(nI/7); it improves the previously best known bound of 0(n I/4) due to Pollard [ii]. The second 
upper bound is dependent on the Extended Riemann Hypothesis (ERH): assuming ERH, we produce an algorithm~ich 
tests primality and runs in time 0((log n) 4) steps. Thus we show that primality is testable in time 
a polynomial in the length of the binary representation of a number. Finally, we give a partial solution 
to the relationship between the complexity of computing the prime factorization of a number, computing 
the Euler phi function, and computing other related functions. Notations. We will assume that n, the 
number to be factored or tested for prlmallty, is an odd positive integer. We let p, q vary over odd 
primes, and (a,b) denote the greatest common divisor of a and b. Let Inl denote the length of the binary 
representation of n, i.e. Inl = [log2n ]. The number of 2's in n will be denoted by #2(n), i.e. #2(n) 
= max{k:2kln}. And finally, by a computation step we mean a deterministic Turlng machine transition. 
 Definition. We say an algorithm tests prlmality in 0(f(n)) steps if on input a binary number n the algorithm 
correctly indicates whether n is prime or composite in less than k.f(n) steps, for some con- stant k. 
 Theorem i. There exists an algorithm which tests primality in 0(n "134) steps. If we then assume the 
Extended Riemann's Hy- pothesis (see appendix), Theorem i can be vastly improved: Theorem 2 (ERH). There 
exists an algorithm which tests primality in O(Inl 4 log log In|) steps. Neither of the algorithms 
produced in Theorems i or 2 necessarily finds divisors of composite num- bers. They only indicate that 
the number is com- posite, in general. The problem of finding a divisor of a composite number or the 
more general problem of producing the prime factorization of a number seems more difficult. Daniel Shanks 
in [13] produces Ve>0 an algorithm which factors a number in 0(n(I/4)+e) steps. Following the definition 
of set reducibility of Cook [6] and Karp [8] we define functional reducibility: Definition. Given functions 
f and g we say that f is polynomial time reducible to $ denoted f _~ g, if there exists a Turing machine 
which on inputs n and g(n) computes f(n) in 0(Inl k) steps for some constant k. We say f is polynomial 
time equivalent to $ if f p g and g ~ f, and denote this relation" byf ~g. Definition. Let n = p[l...pVm 
be the prime factor- izatlon of the odd number n. We let "prime factor- ization" denote the function 
from the natural num- bers to some fixed appropriate coding of the prime factors and their exponents. 
We als0 consider the following three functions: i) ~(n) = Vl-i~I v -i (Pl-l)...pm m (pm-l) (Euler's 
~-function) , ii) X (n) = Vl-i v -i Icm{p I (pl-l) ..... pm m (Pm-l) } (The Carmichael X-~unction), iii) 
~' (n) = icm{Pl-I ....,Pm-l}, By the definition of Euler's ~-function we see that ~ ~ "prime factorization." 
Since icm(a,b) = a,b/(a,~) we see that X and %' are both polynomial time reducible to "prime factorizatlon," 
i.e. X, l' ~ p "prime factorlzation." As a by-product of our work on Theorem 2 we get: Theorem 3 (ERH). 
The functions ~, X, X' and "prime factorlzation" are all polynomial time equivalent, i.e. "prime faetorlzatlon" 
~ ~ ~ A ~ X'. The difficult step in the proof of the above three theorems is demonstrating that there 
is a "small" quadratic nonresidue. In Theorem i we appeal to the work of Burgess who uses Well's proof 
of Riemann Hypothesis over finite fields, while in Theorems 2 and 3 we use Ankeny's reduction of the 
size of the first quadratic nonresidue to the Extended Riemann's Hypothesis. Motivation of Proofs Fermat 
proved that for p prime a p-I ~ i mod p if (a,p) = i . 234 Therefore, if for some a, i < a < n, a 
n-I ~ 1 mod n (1) then n must be composite. Now, a m mod n can be computed in 0(ImlM(Inl)) steps (where 
M(Inl) de- notes the cost of multiplying two numbers of length Inl) using standard techniques described 
in [7]. A possible technique for recognizing composite num- bers might be to systematically search for 
an a satisfying (i). This technique could fail for composite n for two reasons: a) There could be composite 
n which satisfies Fermat's Congruence. That is, n-i a -i mod n for all (a,n) = I . b) The first a 
satisfying (i) could be very large which would give us an inefficient method. The rest of the paper 
will be devoted to handling these two problems. We start by showing that in fact some composite numbers 
do satisfy Fermat's Congruence. Theorem 4 (Carmichael) [5]. n satisfies Fermat~s Congruence if and only 
if l(n) In-l. For example, the composite number 561 = 3.11.17 is such that l(n) = icm(2,10,16) = 80, 
and 80 divides 560. It follows that (a,561) = i implies a 560 ~ I mod 561 for all natural numbers a. 
Thus there are composite numbers which satisfy Fermat's Congru- ence. At first these numbers seem more 
difficult to recognize as composite. Not only will we recognize them as composite, but we will quickly 
find a divisor. By what we have done it would seem that the obvious approach would be to use Fermat's 
test to recognize composite n such that %(n)2n-i and some other test for n such that l(n) In-l. Instead 
we shall separate the composite number into sets according to whether l'(n)2n-i or l'(n) ln-l. Since 
the algorithms used in Theorems 1 and 2 are essentially the same we shall define the fol- lowing class 
of algorithms: Definition of Af. Let f be a computible function on the natural numbers. We define Af 
on input n as follows: i) Check if n is a perfect power, i.e. n--m s where s ~ 2. If n is a perfect 
power then output "composite" and halt. 2) Carry out steps i) -iii) for each a ! f(n). If at any stage 
i), ii) or iii) holds output "composite" and halt: i) aln ii) a n-I ~ 1 mod n iii) ((a(n-l)/2kod n) 
-i, n) # i for some k, i < k < #2(n-l). 3) Output "prime" and halt.  Note. Af as defined above is a 
simplified version of the algorithm needed to get Theorem 2. Af will give an al~orithm for testing primallty 
in 0([nl51og2Tn I ) steps. Before we prove Theorems 1 and 2 we must de- velop the technical hardware 
to define f and to show that there is an a < f(n) which "works". We start by considering those composite 
num- bers n which satisfy %'(n)2n-l. In the following lemma we give a characterization of some of the 
a's which satisfy a n-I ~ 1 mod n. Lemma i. If l'(n)~n-i then there exist primes p and q so that: i) 
pln,p-l~n-l,qmle-l, and qm~n-i for some integer m > i. 2) If a is any q-th nonresidue mod p then a n-I 
$ 1 mod n. See Appendix for definition of q-th nonresi- due mod p and definition of index of a mod p 
which we will denote by inpa. Proof. Let ql,...,qn be the distinct prime divi- sors of n. Thus l'(n) 
= icm{ql-l,...,qn-l}~n-i which implies qi-12n-i for some i. By setting P = qi we have Pin and p-12n-l. 
Since p-l~n-l, there must exist a prime q and an integer m > 1 so that qmlp-i and qm~n-l. Thus p and 
q satisfy condition i). We next show that p,q satisfy con- dition 2). If a and n are not relatively 
prime then a m ~ i mod n for any m # 0; thus a n-I ~ 1 mod n. So we can assume (a,n) = i. Suppose the 
lemma is false, i.e. a n-I ~ 1 mod n. Since pln we have a n-I E I mod p . (2) Let b be a generator 
mod p then by (2) we have b (Indpa)(n-l) ~ i mod p. Since b TM ~ i mod p implies p-llm we have p-i 
I (indpa) (n-l) (3) Now a is a q-th nonresidue implies q~indpa. Thus q~ind a and qmlp-i (4) P Applying 
(4) to (3) gives qmln-i which is a con- tradiction. Lemma i motivates the definition of the first q-th 
nonresidue mod p. Definition. Let N(p,q) be the least a so that a is a q-th nonresidue mod p defined 
only when qlp-l. Using index arguments it is not hard to show that N(p,q) is prime. Theorem (Ankeny) 
[i] (ERH). N(p,q) = 0(Ipl 2) Using Ankeny's Theorem and Lemma i we have that if l'(n)2n-i then there 
exists an a < 0(Inl 2) such that a n-I ~ i mod n. We now return to a discussion of composite numbers 
n which have the property that l'(n) In-l. Let ql,''',qm be the distinct prime divisors of n; then by 
the definition of l' we know that #2(l'(n)) = max(#2(ql-l) ..... #2(qm-l)). Thus for some 1 < i < m, 
#2(l'(n)) = #2(qi-l). We next make a distinction between two types of numbers as  235 follows: Definition. 
Let ql,...,qm be the distinct prime divisors of n. We say n is of type A if for some i ! J < m, #2(%'(n)) 
> #2(qj-l). On the other hand, we say n is of type B if #2(%'(n)) = = #2(ql-l) = #2(qm-l). Digressing 
for a moment to motivate the next three lemmas, suppose we have a composite number n = pq. Suppose further 
that we have a number m so that m =-i rood q and m --i rood p . (5) The first of the restrictions in 
(5) implies q{m-i and the second implies m ~ I mod n. Thus q = (m-l,n). If we could[ quickly compute 
some m satisfying'(5), we would quickly know a divisor of n. In the following lemmas we develop a method 
for finding m satisfying (5). We say b has a non- trivial GCD with n if (b,n) # i or n. Lemma 2A. Let 
n be a composite number of type A where, say, p and qln, and #2(%'(n)) = #2(P~I) > #2(q-l). Assume further 
that 0 < a < n is so that p) = -i where a (~) is the Jacobi symbol (of. ap- pendix), then either a 
or (a%'(n)/2mod n) -i has a nontrivial GCD with n. Proof. Suppose a has a trivial GCD with n. Since 
i < a < n it must be that (a,n) = I. Since q-ll%'(n) and #2(q-l) < #2(%'(n)), we have  l~'(n) q-i---Z--- 
, thus %'(n)/2 a E i mod q . (i) Since (al'(n)/2) 2 E 1 mod p then al'(n)/2 E Â±i mod p. Suppose al'(n)/2 
E i mod p then p-ll(indpa ) (~) which implies that indpa is even. On the other hand, (~) = -I implies 
indpa is odd (see appendix). S~ %'(n)/2 a ~ -i mod p . (2) By (i~, q[(al'(n)/2 mod n) -i. By (2), 
 p~(a % (n)f2 mod n) -i since p is an odd prime. Thus ((al'(n)/2 mod n) -l,n) # l,n. Lemma 2B. Let n 
be a composite number with at least two distinct prime divisors, say p and q. Further suppose n is of 
type B and i < a < n is so that (~q) = -i. Then, either a or (al'(n)/2 mod n) -i has a nontrivial divisor 
with n. Proof. As in the proof of Lemma 2A we assume that a has a trivial GCD with n, thus (a,n) = 
I. With- out loss of generality we assume that (~) = -i and (a) _- i; Using techniques similar to above 
we s~ow a ~ (n)/2 --I mod p and a~'(n)/2 -I mod q. The rest of the argument: follows from the above 
proof. = Lemma 3. If pln, %'(n) Im, and k = #21%--~] + I  a!i~ m then =-a 2k mod p..  Proof. Since 
a ~' (n)= i mod p it follows that a--~)/2 -il mod p. We consider the two possible 236 values of a%'(n)/2 
separately: i) If a %'(n)/2 E 1 mod p then a m/2k E i mod p, since by our choice of k and the fact that 
 (n) Im we have 2 12-~ 2) If, on the other hand, al'(n)/2 E -i mod p we note that: m m m__ l'(n) A,(n)2k_ 
Â£ ~,(n)2k_ I a 2k 5 (a 2 ) E (-i) mod p. Since m/l'(n)2 k'l is odd, a m/2k -i mod p. Using Lemmas 
2A and 3 we see that: if n is a type A composite number, %'(n) In-I , and a = N(p,2) then either aln 
or ((a(n-l)/2 mod n)-l,n) # l,n. For type B numbers we will need the following definition. Definition. 
Let N(pq) be the minimum a so that (~q) # i where (~) is the Jacobi symbol and N(pq) is defined only 
WKen p # q. Note again that N(pq) is prime. Theorem (Ankeny) [i] (ERH). N(pq) = 0(Ipql 2) Ankeny doesn't 
actually state the case N(pq) but it follows without any change in his argument. We only need to use 
the stronger form of Selberg's Theorem 6 [12] referred to as Lemma 2(c) in [i]. Also see [i0] for the 
statement and proof of Ankeny's theorem. Proof of Theorem 2 (weak form). By Theorems of Ankeny we can 
pick an integer c > i so that N(p,q) ~ clpl 2 and N(pq) ~ clpql 2 Consider Af where f(n) = clnl 2. 
 Analysis o~ Running Time i) Af must first check to see if n is a perfect power which will take 0(In13) 
steps. We leave it to the reader to verify this bound. 2) Af must check i), ii) and iii) for f(n) different 
a's. Check i) takes say 0(Inl 2) steps. Check ii) takes 0(InlM(Inl)) steps Check iii) takes 0((JnlM(Inl)+Inl2)Inl) 
steps since GCD can be computed in 0(Inl 2) steps, see [7], and i < k < Inl. Now multiplication takes 
at least n steps thus check iii) takes at most 0([ni2M(Inl)) steps. So Af runs in 0(Jnl4M(Inl)) steps. 
If we use the Schonhage-Strassen algorithm ([14]) for multi- plying binary numbers, M(|n I ) = 0( ~n]loglnl 
log log |nl) and we have 0(Inl51oglnllog loglnl) steps. Proof of Correctness of Af If n is prime Af 
will indicate correctly that n is prime so we need only show that Af recognizes composite n. If n is 
composite n it will fall in- to one of the following three cases. i) n is a prime power. 2) ~' (n) 
~n-i 3) %'(n) In-i and n is not a prime power. Case i. If n is a prime power then n is a perfect power 
and in this case Af will indicate that Af is composite. Case 2. If %'(n)2n-i then by Lemma 1 we have 
a p and q such that if a = N(p,q) then a n-I $ 1 mod n. Thus we need only note that N(p,q) ~ f(n), which 
follows by our choice of f. Case 3. If l'(n) In-i and n is not a perfect power: A) Suppose n is of 
type A then by Le~as 2A and 3 we can choose p and k (k < #2(n-i)5 s~ch that if a = N(p,2) then either 
aln o~ ((a(n-l)/2 mod n) -l,n) # l,n. Since N(p,2) ~ f(n), n will be rec- ognized as composite by either 
step i) or ii). B) Suppose n is of type B then by Lemmas 2B and 3 and the assumption that n is not a 
perfect power. We can choose p, q and k < #9(n-l) so that if a = N(pq) then either aln or ((--a(~-l)/2k 
mod n) -l,n) # l,n. Since N(pq) ~ f(n), Af will indicate that n is composite. To prove Theorem 1 we 
need the following results of Burgess. Theorem (Burgess) [2,3,5] N(p,q) = 0(p (I/4~e)+s) any e > 0 
 N(pq) = 0((pq) I/4~e)+s) any e > 0 Proof of Theorem i. By the Theorem of Burgess we can pick an integer 
c > 1 so that N(p,q) ~ cp I/4 2"/~ and N(pq) j c(pq) I/4 2"/~ . i Set Â£ = 4 2./~ . Consider Af where 
f(n) = Fcn~ ~cn'133]. Since Af runs in 0(n "134) steps we need only show that Af tests primality. If 
n is prime then Af will indicate that n is prime. Suppose that n is composite. Then n must lie in at 
least one of the following four cases. Case i. n is a prime power. Case 2. n has a divisor < f(n). 
 Case 3. %'(n)~n-l, n has no divisor ~ f(n). By Lemma i there exist primes p, q such that if a = N(p,q) 
then a n-I # i mod n. So we need only show that a = N(p,q) ~ f(n). We have  a 2 Fcp I/~] (5) from above. 
Since n is composite and for all a ~ f(n)a2(n), we have n rl ~/(Â£+i)] P 2 f--~ i.e. P 2 Ic-! . (6) 
 ~ Substituting (6) into (5) we have   Fni/(~+i)] a < < f(n) since c > i .  Case 4. %'(n) In-i 
and n has no divisor ~ f(n) and n is not a prime power. A) Suppose n is of type A. Then as in Case 
3A of Theorem 1 we need only show a = N(p,2) < f(n) where pln. Since in this case (5) and (6) ho~d we 
get a < f(n). B) Suppose n is of type B. Since n is not a prime power n has at least two distinct prime 
divisors, say p, q. We need to show that N(pq) f(n) which will follow if we show pq L~ n . Claim. n 
# pq (see [5]). Suppose n = pq where p < q. Now ~-llpq-I , since %'(n) In-l. But this implies q-l|p-l. 
Hence q ~ p which contradicts the assumption that p < q. By claim n = pqr where r # i. Since rln we 
 n  have r ~ f(n). Thus pq ~ f(n) " Before we prove the stronger form of Theorem 2 as stated in the 
introduction we prove Theorem 3, To prove Theorem 3 we will need the following len~na: Lemma 4 (ERH). 
Let g be any function such that i) %'(n) Ig(n) 2) Ig(n) I = 0([nl k) for some constant k.  Then "prime 
factorization" ! g. P Proof. Consider the following procedure on n and m. i) Check if n is a perfect 
power.  2) Carry oua steps i) and ii) for each a < f(n) (where f is as in the proof of Theorem i): 
i) aIn  ii) ((a m/2k nod n)-l,n) # i for some a < k < #2(m). If %'(n) Im then we know by arguments 
similar  to Case 3 of the proof of Theorem 2 that this procedure will produce a divisor of n if n is 
 composite. If we set m = g(n) then in 0(Ig(n) I InlBM(Inl)) steps we will either know that n is prime 
or that n' is a divisor of n, for some n'. If in the above procedure we replace n by n' then l'(n')[g(n) 
since n'In implies l'(n') %'(n). Thus in 0(Ig(n) In' 3M(n')) steps we will either know n' is prime 
or n" is a factor of n'. Iterating this procedure at most Inl times we will have all prime factors 
of n. Thus. we get a prime factori- zation of n in 0(Ig(n) IInl4M(Inl)) Â§teps. Since Ig(n) I = 0(Inl 
k) it runs in 0(Inlk+4M(}nl)) steps. Proof of Theorem 3. By the discussion preceding- Theorem 3 we 
know that 0, l, %' < p "prime factor- ization". Since 0, % and %' satisfy Lemma 4 we have "prime factorizatlon" 
< ~, %, %'. Thus Theorem 3 follows. P Modification to Al~orithm Af First note that a in step 2) of 
Af need not vary over all numbers < f(n) but only prime numbers < f(n). Since the number of prime <_ 
f(n) is 0(iofg(f~n) ) , by the prime number theorem, we have 237 the upper bound for Theorem 2 of 
0(Inl51og loglnl) Definition. The Legendre symbol (~) is defined by: steps. We amend step 2) in Af 
as follows: 2) Compute Pl,-..,Pm where Pi is the i-th prime number and m is so that Pm < f(n) < Pm+l- 
Compute Q, S so that n-1 = Q2 S and Q is odd. Let i = 1 and proceed to ii) (let a denote Pi through- 
out). i) If i < m set i to i+l. If i = m then out- " put "prime" and halt. ii) If aln then output "composite" 
and halt. Compute aQ mod n, aQ 2 mod n,..., aQ 2S mod n. iii) If aQ 2S mod n # 1 then output "composite" 
and halt. iv) If aQ mod n = i go to i). Set J = max(J : aQ 2J mod n # i). v) If aQ 2J mod n = n -i 
go to i). vi) Output "composite" and halt. The running time Af is 0(Inl41og loglnl). To show that Af 
tests primality we need only reconsid- er Case 3: Case 3. %'(n) In-i and n is not a prime power. A) 
Suppose n is of type A with #2(%'(n)) = #2(P-l) > #2(q-l) and p,qln. Let a = N(p,2) (thus a is prime). 
Thus we need only show that either step ii), iii) or vi) outputs "composite" for this a. So suppose 
a~n and ~-i ~ i mod n. We show that Af reaches step vi). If a S ~ i mod p then 21S , since (~) = -i and 
p is odd. Since p]n we have aQ ~ i mod n. Thus Af will reach step v). By Lemma~ 2A and 3, we ~nowthere 
exists a k so that aQ 2 E i mod q and aQ 2K E -i mod p. Suppose aQ2~ ~ -i ~od n then aQ 23 ~ -i mod p 
and q. Now ~ --": = . ~d, a$~J~ 1~o~Â°~ ~n~m~s~k-l~od ~n~;i::her k > J. Thus by contradiction aQ 2J 
~ -1 mod n Hence Af reaches step vi). B) Suppose n is of type B. The proof in this case follows the argument 
in Case A. Appendix Let Z n denote the ring of integers mod n. Let Z~ denote the integers relatively 
prime to n under multiplication mod n. Z~ is a group and if p is a prime then Z~ is a cyclic group of 
order p-l. Thus, the only solutions to the equation x 2 E 1 mod p are Â±i. We may pick a generator of 
the cyclic group Z~, saN' b, then we define indpa = min{m: bm ~= a mod p}. We note that indpa is dependent 
on our choice of a generator. We say a is a q-th residue mod p if there exists b (bq 5 a mod p). Note. 
If p, q are primes and qlp-i then a is a q-th residue mod p if a~ only if qlindpa. 1 if a is a quadratic 
residue mod p I" and (a,p) = i; (~) = ~-i if a is a quadratic nonresidue mod P  and (a,p) L i; [ 0 
if (a,p) # i. The Jacobi symbol (~q) is defined by: where (~) and (2) are the Legendre symbols. The 
above two symbols for fixed denominators define functions which fall into a general class of functions 
called characters. We define one more character as follows: = $ e(2~i(indpa)/q) if (a,p) = i x(a) L 0 
if (a,p) # 1 where qlp-i and e( ) is the exponential function. Dirichlet's L functions are defined 
by: L(S,x) = ~ x(n)/n s n-i where X is a character. Extended Riemann's Hypothesis (ERH). The zeros 
of L(S,x) in the critical strip, 0 < (real par~ of S) i all lie on the line (real pa~t of S) = ~, where 
X is any of the three characters above. References [i] N.C. Ankeny, "The Least Quadratic Non-Resi- 
due," Annals of mathematics 55 (1952) 65-72. [2] D.A. Burgess, "The Distribution of Quadratic Residues 
and Non-Residues," Mathematika 4 (1957) 106-112. [3] , "On Character Sums and Primitive Roots," Proc. 
London Math. Soc. (3) 12 (1962) 179-192. [4] , "On Character Sums and L-series," Proc. London Math. 
Soc. (3) 12 (1962) 193- 206. [5] R.D. Carmichael, "On Composite Numbers Which Satisfy the Fermat Congruence 
aP-Â±Ep, '' American Math. Monthly 19 (1912) 22-27. [6] S. Cook, "The Complexity of Theorem-proving Procedures," 
Conference Record of Third ACM Symposium of Theory of Computing (1970) 151- 158. [7] H. Davenport and 
P. ErdSs, "The Distribution of Quadratic and Higher Residues," Publ. Math. Debreien 2 (1952) 252-265. 
 [8] R. Karp, "Reducibility Among Combinatorial Problems," Complexity of Computer Computa- tions, R.E. 
Miller and 3.W. Thatcher, eds., Plenum Press, New York (1972) 85-103. [9] D. Knuth, The Art of Computer 
Programming, Vol. 2: Seminumerical Algorithms, Addison- Wesley, Reading Massachusetts (1969). 238 [I0] 
H. Montgomery, Topics in Multiplicative  Number Theory, Springer-Verlag Lecture Notes #227, 120. [ii] 
J. Pollard, "An Algorithm for Testing the Primality of Any Integer," Bull. London Math. Soc. 3 (1971) 
337-340. [12] A. Selberg, "Contributions to the Theory of Dirichlet L Functions," Avhandlinger utgett 
av Det Norske Videnskops, Akademi i Oslo (1934).  [13] D. Shanks, "Class Number, A Theory of Factor- 
ization, and Genera," Proceedings of Symposia in Pure Mathematics (20), 1969 Number Theory Institute, 
AMS (1971) 415-440. [14] A. ShSnhage and V-. Strassen, "Schnelle Multi- plikation Grosser Zahlen," Computing 
(1971) 281-292. #Research sponsored by the National Science Foundation Grant GJ-35604XI of the Electronics 
Research Laboratory. 
			