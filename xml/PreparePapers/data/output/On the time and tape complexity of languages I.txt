
 ON THE TIME AND TAPE COMPLEXITY OF LANGUAGES I H. B. Hunt III % Cornell University Ithaca, New York 
 ABSTRACT We investigate the following: (i) the relationship between the classes of languages accepted 
by  deterministic and nondeterministic polynomial time bounded Turing machines;  (2) the time and tape 
complexity of many predicates on the regular sets;  (3) the relationship between the classes of languages 
accepted by deterministic or nondeterministic polynomial time bounded Turing machines and the class of 
languages accepted by polynomial tape bounded Turing machines; and  (4) the complexity of many predicates 
about stack automata.  We find several problems with nonpolynomial lower complexity bounds. §i. INTRODUCTION 
 Before describing our results we need several definitions and facts. Definition I.i: PTIME is the class 
of all languages (over some countably infinite alphabet ~) recognized by some deterministic polynomial 
time bounded Turing machine. Definition 1.2: NPTIME is the class of all languages (over some countably 
infinite alphabet ~) recognized by some nondeterministic polynomial time bounded Turing machine. Definition 
1.3: PTAPE is the class of all languages (over some countably infinite alphabet ~) recognized by some 
deterministic or nondeterministic polynomial tape bounded Turing machine. In [|7] Savitch showed that 
every L(n)-tape bounded nondeterministic Tm can be simultated by an (L(n))2-tape bounded deterministic 
Tm, provided L(n) ~ log2(n). In particular, this implies that the classes of languages accepted by deterministic 
and nondeterministic polynomial tape bounded Turing machines are the same. Definition 1.4: Let Z = {0,i}. 
Let H be the class of functions from Z* into Z* com- putable by some polynomial time bounded Tm. Let 
L and M be languages. Then L < M PTTME %This research was supported by a National Science Foundation 
Graduate Fellowship in Computer Science. (L is p-reducible to M) if there is a function f E ~ such that 
x E L <=> f(x) E M. A language M is p-complete if M (or M) ENPTIME and every language in NPTIME is p-reducible 
to M. In Section 2 we find several necessary and sufficient conditions for PTIME to equal NPTIME. We 
find p-complete proper subproblems of Karp's p-hard problems (See Section 2 or Karp ~3]). We also find 
several p-complete problems of linear nondeterministic time complexity. In Section 3 we study the complexity 
of predicates on the regular sets when the regular sets are enumerated by (i) regular expressions, nondeterministic 
f.s.a., or type 3 grammars,  (2) regular expressions with ~,  (3) regular expressions with "squaring", 
or  (4) extended regular expressions. In Section 4 we study the complexity of problems about stack 
automata such as emptiness, membership, equivalence, etc. Section 5 is a short conclusion. §2 PTIME Definition 
2.0: Ndtime(L(n)) is the class of all languages (over some countably infinite alphabet ~) recognized 
by some nondeterministic L(n) time bounded Tm, Dtime(L(n)) is de- fined analogously. Before stating the 
main results we need two lemmas. Lemma 2.1: For all k ~ i, there is a 2 tape Tm M k such that for all 
w 6 ~+, 2 k L(M k) = {xlx = w ¢ 1 lwl $ with ¢, $ ~ ~}. Moreover, M k operates within linear time. 
Lemma 2.2: For all k ~ i, there is a single tape Tm M k such that for all w £ Z+, 2 k L(M = {xlx = w 
¢ 1 lwl $ with ¢, $ ~ ~}. Moreover, M k operates within time k)- o(IxIloglxl). Both proofs may be found 
in [f| ]. Both use counters. Theorem 2.3: The following are equivalent: (i) PTIME = NPTIME; (2) all 
linear time nondeterministic 2-tape Tm languages EPTIME;  (3) all n£ogn time nondeterministic single 
tape Tm language EPTIME;  (4) the language ~= {(~,8) I e and 8 are regular expressions over {0,I} with 
no occurrence of * and L(~) = L(8)} ~ PTIME;  (5) the language ~= {(~,8) I ~ and 8 are nondeterministic 
f.s.a., L(e) = L(8), and L(e) and L(8) are finite} £ PTIME; and  (6) there is a positive integer k > 
0 such that for all functions f(n) > n, ndtime (f(n)) c dtime ([f(n)]k).  Proof of 2.3: The proof of 
the equivalence of (i) through (5) may be found in [|l ]. We sketch the proofs of the equivalence of 
(i) and (4), and of (i) and (6). ii (i) => (4): Given a regular expression 8 and a string x, one can 
check if x ~ L(8) in det. polynomial time. 8 a "U" and "." regular expression implies Vx E L(8), Ixl 
~ 181 (Here 8 is a string over the alphabet ({(,),., U,0,1}). Hence given two "U" and "." regular expressions 
e and 8, to verify L(~) @ L(8) we need only nondeterministically guess a string x of length < max(l~l,18 
I) s.t. x ~ L(~) n L~ or x ~ Lt~ n L(8). (4) => (i) : Cook [4] has shown that PTIME = NPTIME iff D 3- 
tautology is an ela- n ment of PTIME. Let f = V c. be a D 3- Boolean form. Then each c. is the product 
 i=l 1 1 of at most three literals. For each c i let 8 i = 8ii 8i2 ,..., 8in where 8ij = I(0il) if xj 
~n~xj are not literals in c i, if xj is a literal in ci, and if x. is a literal in c.. m 3 i Let 8 = 
U 8i. Then y E L(8) iff y satisfies some clause c i. Thus, L(8) = {0,i} n i=l iff f is a tautology. 
 (i) => (6): We note that Cook's proof in [$], that D3-tautology is p-complete, actually says that there 
is a k s.t. if a nondeterministic Tm T takes time < t(n), then there is a Boolean form A(n) s.t. (i) 
IA(n) I < 0([t(n)] k) and  (ii) A(n) is a tautology iff T accepts its input.  Our algorithm proceeds 
as follows: For i = n step 1 do (i) write out A(i)  (ii) if A(i) is a tautology then halt;  t(n) 
The time required < 0 ( Z {time to execute (i) and (ii) ~or jth iterations}). j=n But by assumption (ii) 
requires deterministic time O(IA(i)l £ The time required ~ 0 [t(n) t(n)k'£]. Corollar~ 2.4: There 
are p-complete problems of nondeterministic time complexity 0(n log n) on some single tape Tm and of 
linear nondeterministic time complexity on some 2 tape Tm. Proof: This follows since there are padded 
universal polynomial Tms of this complexity. For a complete proof see [II ]. Theorem 2.5: (Book and 
Greibach [~]). ~ is recognized by a linear time nondeterministic multi-tape Tm iff ~ is the E-free homomorphic 
image of the intersection of three context-free languages. As an immediatelgonsequence of Corollary 
2.4 and Theorem 2.5 we get the following: Corollar Y 2.6: There is an E-free homomorphism h 0 and three 
context-free languages L0, Li, L2, s.t. h0(L 0 N L 1 Q L 2) is a p-complete problem of linear nondeterministic 
time complexity; and Corollary 2.7: PTIME = NPTIME iff PTIME is closed under E-free homomcrphism. This 
suggests that G-free homomorphism plays an important role in the interrelation- ship between PTIME and 
NPTIME. Informally, as the reader will see below closure under G-free homomorphism corresponds to non-determinism. 
 Theorem 2.7: Let ~ = {f c x I f is a D3-Boolian form expressed as a string over some finite alphabet 
Z. c, 0, 1 ~ Z. x = Xl.X 2 . ..-x n G {0,i} n for some n > 0 f is a func- tion of the n variables tl,...,t 
n and f(xl,...,Xn) is false}. Let the G-free homomorphism h 0 be defined as follows: i) h0: [Z U {c,0,1}]* 
+ [Z U {c,0,1}]*, ii) V g £ Z U {c}, h0(~) = ~, iii) h0(0) = 0, and iv) h0(1) = 0. Then ~,G PTIME 
and h 0 (~) is p-complete. Proof: It is obvious that~G PTIME. We prove f c 0 n £ h0(.~) iff f is not 
a tautology, f c O n 6 h0~ => Z an x = x I ... x n G {0,i} n such that f c x G~. But f c x G ~=> f(xl,...,Xn) 
is false, f is not a tautology => that there is an assignment of values (Xl,...,x n) to the n variables 
of f s.t. f(xl,...,x n) is false. .f c Xl...yn G ~and f c O n G h0(~). In [13] Karp shows that NPTIME 
is p-reducible to the problems (I) Equivalence of Regular Expressions, (2) Equivalence of Nondeterministic 
Finite State Automata, and (3) Context-Sensitive Recognition. He was unable to show any of these problems 
to be p-complete. We have given proper subproblems of 1 and 2 which are p-complete. Since all O(n log 
n) or linear time bounded languages are context-sensitive, we have found proper p-complete subproblems 
of Karp's three hard problems. Finally in [ @ ] we find context-sensitive language {L i} s.t. L i E 
det CSL iff det CSL = CSL. These languages play a very similar role to the p-complete languages of theorem 
2.3 and corollary 2.4. Note: In []] Book independently proved the equivalence of (i) and (2) of Theorem 
2.3 and Corollary 2.7. §3: REGULAR SETS AND THE CLASS PTAPE Definition 3.1: A language ~is tape-hard 
if PTAPE ~ ~. PTIME Definition 3.2: A languages is tape-complete if ~ is tape-hard and ~ G PTAPE. Definition 
3.3: c~~= {xlc x ~. ~/c = {xlx c G~. Definition 3.4: Let ~ be a predicate on 2 {0'I}* ~= U {x~I~(~) 
is true}. L x E {0,i}* = U x G {0,i}* R { ~Ix I ~(~) is true}. Definition 3.5: (i) A regular expression 
with intersection (r.e.i.) is defined recursively as follows: (a) k, ~, {0},{i} are r.e.i.'s, (b) If 
A,B are r.e.i.'s, then (A) U (B), (A) Q (B), (A)*, and (A) (B) are r.e.i.'s, and (c) A is an r.e.i, if 
and only if it satisfies (a) or (b). 13 (2) A regular expression with squaring (r.e.s.) is defined 
analogously with (b) replaced by (b') If A,B are r.e.s., then so are (A) U (B), (A)* 2 (A).(B), and 
(A) (3} An extended regular expression (e.r.e) is defined similarly with (b) replaced by (b") If A,B 
are e.r.e's, then so are (A) U (B), (A) N (B), (A)*, (A) (B) , and ~(A) . Theorem 3.6: Let ~ be any 
predicate on the regular sets over {0,i} s.t. (a) ~({0,1}*) is true and  (b) ~L Or ~R c regular sets 
over {0,1}*.  Then the following hold: (i) ~= {el ~ is a regular expression over {0,i} and~(L(e)) 
is true} is tape-hard;  (2) ~= {~I e is a r.e.i, over {0,i} and~L(~)) is true} is not poly- nomial in 
tape;  (3) ~= {~I ~ is a r.e.s, over {0,i} and~L(u)) is true} requires expon- ential tape; and  (4) 
~= {ul ~ is an e.r.e, over {0,i} and~(L(e)) is true} is not elementary recursive.  Proof: A proof of 
(i), (3), and (4) can be found in [ll]. A proof of (2) can be found in [|I]. We sketch the proof of i. 
We assume the reader is familiar with the notation and results of [15]. Proof of i: Let M be a deterministic 
Tm with states S, tape alphabet T, and designated halting state qf E S. Let {#,$} U T U (SxT), and assume 
{0,1} E T. Let L be a regular set over {0,i}* s.t. L ~ ~T" We define a regular expression 8y such that 
 L(Sy) = J Z* if M does not accept y = yl,...,y n in space -n Z* - Z -$'L I, otherwise. Y 8y is characterized 
as follows: i) words that do not begin with #(q0,Yl ) "'" Yn #' or 2) words that do not contain qf 
to the left or a $ -sign, or 3) words that are not of the form #-(Z-$)'*#'$-L, or 4) words that violate 
the next-move requirement to the left of the S-sign. i) and 2) are the same as in [ I| ] or [15]. (3) 
follows since ~(#. (~-$)*.#-$-L) is regular and fixed for all inputs to M. 4) is written as follows: 
 U [ (~-$)*.~i.~2.~3. (E-S) IYI-i. ((~-$)-fm(al,a2,~3)). (~-$)*.$.{0,1}*. ~i,a2,~3 ~ {#} U T U (SxT) 
 iHere Zy is the computation of M on y as defined in [II ] or [|5]. Inspection of the lengths of the 
regular expressions needed to describe (I), (2), (3) and (4) shows that 8y is linear in IYl. Finally 
if L(Sy) = Z* then (L(Sy)) is true. Suppose L(Sy) = Z*-Z .$.n and suppose ~(L(~)) is true then (Zv'$\Z*-Zv-$'L) 
= L y ' _  ~L(=><=). We list several predicates on the regular sets that satisfy the conditions of 
Theorem 3.7. For underlined predicates, L = {e I e is a regular expression over {0,i} and P(L(~)) is 
true} can be recognized in polynomial tape. i. " = {0,I}*" ; 2. " = {0,I} +'' ; 3. "cofinite" ;  
4. "coinfinite" ;  5. "star event" (L(~) = L(e)*);  6. "y-event" (L(e) = y(n(e)) def. {xl~y E L(e) 
and Ixl=lyl});  7. "reversal event" (L(~) = L(e)rev')l;  8. for all k > 0, "k-definite (k-reverse-definite, 
or k-generalized definite) event"  9. "definite (reverse-definite, or generalized definite) event"; 
  i0. for all k > 0, "strictly k-testable event", "strictly locally testable event", or "locally testable 
event"; ii. "star-free (noncounting, loop-free, or group free, etc) event"; 12. "comet (reverse comet, 
or generalized comet) event"; 13. "input-output behavior of a finite state ~finite state linear) sequential 
machine"; and 14. "accepted by some strongly connected deterministic finite state automaton". For the 
definitions of 8, 9, i0, and ii see [I~]. The definition of 12 can be found in [3 ] and the definition 
of 13 can be found in [~ ]. Theorem 3.7: Let ~ be any predicate on the regular sets over {0,i} s.t. 
 (a) ~(¢) is true and  (b) ~L or ~R ~ regular sets over {0,1}*.  Then (i) ~= {~I ~ is a 2-way deterministic 
f.s.a, over {0,i} and~(L(S)) is true} is tape-hard and (2) ~= {~I ~ is an e.r.e, over {0,i} and ~(L(~) 
I is true} is not elementary recursive. Proof: (i) follows since a 2-way deterministic f.s.a. M can 
check a string to see if it is the "valid computation of Turing machine M i on input x" in such a way 
that the construction of M given M i and x is polynomial in Ixl. l"reversal event" results from the 
proof of the theorem. (2) follows since the predicate "=~" is not elementary recursive for e.r.e.'s. 
This result was announced at the 1972 IEEE SWAT conference by A. Meyer and L. Stockmeyer. Perhaps, the 
reader has noticed that Theorems 3.6 and 3.7 are similar in form and spirit to the theorems appearing 
in "A Note on Undecidable Properties of Formal Languages" by S. Greibach. In [I| ] we present strict 
extensions of Greibach's two theorems. The reader should also note that Theorem 3.6 provides strong intuition 
as to why Karp [I~] was unable to show that the three problems mentioned in Section 2 are p-complete. 
Such a proof would prove NPTIME = PTAPE. For a more detailed dis- cussion see [i| ]. Finally the reader 
should note that the results of Meyer and Stock- meyer in [~5] and the present author's results in [ll] 
and this paper suggest why little or no success has been achieved in finding easy "canonical" forms for 
the regular sets or at least for nontrivial proper subclasses of the regular sets. We list several other 
problems which are tape-hard. Theorem 3.8: The following are tape-hard: (i) all predicates mentioned 
after theorem 4.6 when applied to 2-way deterministic or nondeterministic f.s.a.; *(2) finiteness or 
infiniteness for 2-way deterministic finite state automata; (3) equivalence of type 3 grammars; equivalence 
of (p,q)-- linear grammars; and equivalence of skewlinear tuple grammars (for definitions see (&#38;); 
 (4) structural equicalence for context-free grammars;  (5) equivalence of generalized nondeterministic 
f.s.a.;  *(6) context-sensitive recognition; and (7) ~= {(P,~) I P is a deterministic pushdown automaton, 
e is a regular expression and L(P) = L(e) (L(P) c L(~))}. (Note: * denotes a tape complete problem.) 
 Proof: (i) The 2-way deterministic device could accept all but correct computations. (2) Finiteness 
satisfies the conditions of Theorem 4.7.  (3) Obvious.  (4) For type 3 grammars, structural equivalence 
is equivalent to equivalence. All deviation trees for type 3 grammars of a word Xl,...,x k look alike 
if we disregard nonterminals.  (5 ) Obvious. (6) For a detailed proof see Ill]. (7) Let L(P) = {0,i}* 
  i 16 Note: The proof that "={0,i}*" is "hard" for regular expressions is due to A. Meyer and L. 
Stockmeyer. The proof that "={0,i}*" is not polynomial in tape for regular expressions with intersection 
is due to the author. § 4. ST~CK AUTOMATA We reduce the membership problem for various kinds of 2-way 
stack automata to several problems for the corresponding 1-way stack automata. Since the complexity for 
the 2-way devices is known, this allows us to derive exponential lower time bounds and nonlinear lower 
tape bounds for the predicates for the 1-way devices. Theorem 4.1: (Cook [5] and Hopcroft and Ullman 
[i0]): 2- (i) A language L is accepted by a 2-way SA iff it is accepted by some 2 cn deterministic 
time bounded Tm;  (2) A language L is accepted by a 2-way det SA iff it is accepted by some 2 cn£°gn 
deterministic time bounded Tm;  2 and (3) A language L is accepted by a 2-way NESA iff it is accepted 
by some n nondeterministic tape bounded Tm. Before stating our results we need the following well-known 
result due to Hennie and Stearns : Lemma 4.2: If Tl(n) is a real-time countable function, then there 
is a set A of strings which is accepted by some deterministic off-line Turing machine within time Tl(n), 
but by no such machine within time T2(n) for any function T 2 satisfying £im inf T 2(n) £og[T2~n)] = 
0 , n~= T 1 (n) 2-E 2-6 2-~ 2 n .n n But for all ~ > 0, £im 2 = £im ~"~E2n ( = 0. "----n÷~ 2 n n+~ 
) Similarly, £im 2(n£°gn)l-E = [n£ogn]l-E  [n£°~n]l-E £im 2n£ogn[l_ 1 ] n÷~ 2n £ogn n~ [~£ogn ] £ 
 Theorem 4.3: Emptiness, finiteness, generalized membership, and equivalence require at least 1 2-6 
(i) 2 n det. time for 1-way SA; 1-6  (2) 2 [nE°gn] det. time for 1-way det SA; and  (3) n nondet, tape 
for 1-way NESA  2-6 for all ~ > 0. iFor generalized membership, the input is an ordered pair of an 
automaton and an input. Equivalence for 1-way SA's is known to be undecidable. However, it is unknown 
whether equivalence is decidable for 1-way det SA's. Proof: We sketch the proof for emptiness in (i). 
From Lemma 4.2 we know that there are 2-way SA's whose membership problem requires det time at least 
2 n2-E Let S. be such a 2-way device. For each input x = Xl,...,x n to Siowe build a l 0 1-way device 
Si0,~ s.t. . (a) we embed the input tape configurations of S. into the finite control of z 0 S. r 
 10,x (b) Si0,x uses its stack to simulate the stack of S. l 0 ' x then S. all of (c) Si 0,x first 
simulates Si0 on x if Si0 accepts accepts 10,x its input except 6. Otherwise, S. accepts the empty set, 
and 10,x (d) ISi0,x --< k n£ogn, where k depends only on S.1o The move-rules of S. of form (p,e,8,q,Y,~) 
are replaced by ((Plnl),-,8(q,n2),0,6), z0 where n I and n 2 are binary integers ~ Ixl=n, which denote 
the position of the input tape ptr. of Si0 The number of such move rules in ~ 0(n). The tape needed for 
each is 0(£ogn). Clearly for each move-rule for Si0 we can check which move rules for Si0,x are allowable. 
The time is bounded by P(n) for some polynomial. Let T(n) be the amount of time needed to decide emptiness 
for 1-way SA. Then [P(n) + T(n£o~n)]£o~[P(n) + T(n£ogn)] > 0 £im inf 2 n÷~ 2 n 2-£' Let T'(x) = 
2 x Then 2-£' £im inf 2 (n£ogn) (2-£') £o~ (n£o~n9 2 ÷ 0. Hence n÷~ 2 n 2-6' T' (x) ~im inf ~--÷ 
0. Thus asymptotically T(x) > 2 x n÷~ We note that such results hold for the nested stack automata and 
should hold for the indexed context-free grammars. We conjecture such results also hold for context- 
free grammars on trees. (See [16]). §5. CONCLUSION we feel the most important results in this paper 
are Theorems 3.6 and 3.7. In them we have found a natural "complexity core" that makes recursive problems 
hard to do. We know of several other such cores and we feel that they exist in many structures. 18 
ACKNOWLEDGEMENTS I wish to thank my thesis advisor John Hopcroft for his encouragement, time, and help. 
I also wish to thank Professors W. Ogden and W. C. Rounds of CWRU and Mr. Sartaj Sahni of Cornell University 
for several useful discussions on the results of this paper. REFERENCES [i] Book, R. V., "On Languages 
Accepted in Polynomial Time", Harvard University Technical Report, 5-72. [2] Book, R. V. and Greibach, 
S., "Quasi-realtime Languages", Mathematical Systems Theory 4 (1970), 97-111. [3] Brzozowski, J. A. 
and Cohen, R., "On Decomposition of Regular Events", JACM, Vol. 16, No. i. [4] Cook, S. A., "The Complexity 
of Theorem-proving Procedures", Proceedin@s Third ACM Symposium On Theory of Computing (1971), 151-158. 
 [5] Cook, S. A., "Characterizations of Pushdown Machines in Terms of Time-Bounded Computers", JACM, 
Vol. 18, No. i, 4-18. [6] Costich, O. L., "An Application of Tree Automata to Linear and Skewlinear 
Tuple Languages", University of Iowa Technical Report, No. 51, 2-72. [7] Gray, J. and Harrison, M. A., 
"The Theory of Sequential Relations", Information and Control ~, 435-468. [8] Greibach, S., "A Note 
on Undecidable Properties of Formal Languages", Mathe- matical Systems Theory 2:1 (1968), 1-6. [9] Hartmanis, 
J. and Hunt, H. B. III, "The LBA Problem and its Importance in the Theory of Computing", to be presented 
at the AMS Conference on Computational Complexity, April 1973. [i0] Hopcroft, J. E. and Ullman, J. D., 
Formal Languages and Their Relation to Automata , Addison-Wesley Publishing Co., Reading, Mass., 1969. 
 [ii] Hunt, H. B. III, "On the Time and Tape Complexity of Languages, I", Cornell University, Department 
of Computer Science, Technical Report No. 73-156. [12] Hunt, H. B. III, "The Equivalence Problem For 
Regular Expressions with Inter- section is not Polynomial in Tape" (to appear as a Cornell University 
Depart- ment of Computer Science Technical Report~ [13] Karp, R. M., "Reducibility Among Combinatorial 
Problems", Technical Report No. 3, April 1972, Department of Computer Science, University of California, 
Berkeley. [14] McNaughton, R. and Papert, S., "Context-Free Automata", MIT Press, Cambridge, Massachusetts, 
1971. [15] Meyer, A. R. and Stockmeyer, L. J., "The Equivalence Problem for Regular Expressions With 
Squaring Requires Exponential Space", 13th Annual symposium on the Theory of Computing (1970), 125-129. 
 [16] Rounds, W. C., "Tree-Oriental Proofs of Some Theorems on Context-Free and Indexed Languages", 
Proceedings Second~ A CM Symposium on the Theory of Computing (1970), 109-116. " [17] Savitch, W., "Relationship 
Between Nondeterministic and Deterministic Tape Complexities", J. of Comput. and System Sci. 4 (1970), 
177-192.  
			