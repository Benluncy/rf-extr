
 Computing Frobenius maps Extended Joachim von Victor Department of Computer Science; Unwersity Abstract. 
A new probabilistic algorithm for factoring univariate polynomials over finite fields is presented whose 
asymptotic running time im­proves upon previous results. To factor a poly­nomial of degree n over F~, 
the algorithm uses 0((n2 + n log q). (log n)2 log log n) arithmetic op­erations in F~. The main technical 
innovation is a new way to compute Frobenius and trace maps in the ring of polynomials modulo t he pol 
ynomial to be factored. 1. Introduction We consider the problem of factoring a univariate polynomial 
over a finite field. This problem plays a central role in computa­tional algebra. Indeed, many of the 
efficient algo­rithms for factoring univariate and multivariate polynomials over finite fields, the field 
of ratio­nal numbers, and finite extensions of the ratio­nals solve as a subproblem the problem of fac­toring 
univariate polynomials over finite fields (Kaltofen 1990). This problem also has im­portant applications 
in algebraic number the­ory (Buchmann 1990), coding theory (Berlekamp 1968), and cryptography (Odlyzko 
1985). In this paper, we describe a new algorithm for this problem whose asymptotic running time improves 
upon previous results. Our main re- Permission to copy without fee all or part of this material is grantad 
providad that tha copias ara not made or distributed for direct commercial advantage, tha ACM copyright 
notice and tha title of the publication and ita date appear, and notica ia given that copying ia by permission 
of tha Association for Computing Machinary. To copy otherwise, or to republish, requires a fee and/or 
specific permission. 24th ANNUAL ACM STOC -5/92/VICTORIA, B. C., CANADA a 1992 ACM 0+9791-51 2-7\92/0004\0097 
...$J .EO and factoring polynomials Abstract zur Gathen Shoup of Toronto; Toronto, Ontario iW5S 1A4, 
Canada suit is a probabilistic algorithm for factoring a polynomial of degree n over the finite field 
F~ that uses 0((n2 + n log q) o(log n)2 loglog n) op­erations in Fq (additions, subtractions, multi­plications, 
divisions, and zero tests). This can be expressed more briefly, if less precisely, as O-(n2 + n log q), 
where the Soft-O notation in­troduced in von zur Gathen (1985) and Babai et aL (1988) is used to suppress 
logarithmic factors: g = o-(h) e M g = o(h(logh)~). Previously, the asymptotically fastest al­gorithms 
were the pioneering methods of Berlekamp (1970), Cantor&#38; Zassenhaus (1981), and Ben-Or (1981). These 
algorithms are also probabilistic. Berlekamp s algorithm can be im­plemented with O (nW + n log q) operations 
in Fq, where the cost of multiplying two m x n-t mat­rices over F~ is O(mW) operations in Fq. We can 
take w < 2.376 (Coppersmith &#38; Winograd 1990). The Cantor-Zassenhaus algorithm uses 0-(n2 log q) operations 
in Fg, and Ben-Or s algo­rithm has a similar running time. The contrast between the running time of our 
algorithm and these other algorithms is most striking when log q x n, In this case, our algo­rithm takes 
0 (n2) operations in F~, Berlekamp s takes O (nW), and the Cantor-Zassenhaus algo­rithm takes 0-(n3). 
Our algorithm is a variant of the Ca.ntor-Zassenhaus algorithm, and like that algorithm, ours breaks 
the general factoring problem into three subproblems: 1. squarefree decomposition, i .e., making an ar­bitrary 
polynomial squarefree; 97 2. distinct-degree factorization, i.e., splitting a squarefree polynomial 
into polynomials whose irreducible factors have the same de­ gree; 3. equal-degree factorization, i.e., 
completely factoring a squarefree polynomial whose ir­reducible factors have the same degree. The squarefree 
decomposition problem can be solved using the algorithm of Yun (1976) (see Knuth 1981, Exercise 4.6.2-36) 
using O-(n logq) operations in F~. Let ~ c F~ [z] be the polynomial to be factored, where deg ~ = n, 
and let R = F*[x]/(f). We shall always use the symbol f for the element 3? c 1?, where the bar denotes 
the residue class map from Fq[z] into R. In solving the distinct-degree and equal-degree factorization 
problems, the Frobe­nius map on R, which sends Q c R to crq, plays a fundamental role. Several algorithms 
for these problems compute the iterates a, @,,.., C@ of the Frobenius map for various values of a E R. 
At the heart of our algorithms is the follow­ing idea, which we call the polynomial represen­tation of 
the Frobenius map. Suppose we have precomputed the special element /3 = ~q c R. An arbitrary element 
a c R can be represented as a = 7j, where g E Fq[z] has degree less than n. Thus a = g(f), and the problem 
of computing crg can be viewed as the problem of evaluating the polynomial g at the point ~, since ~q 
= 9(09= 9(cq) = 9(P) This polynomial representation of the Frobe­nius map is due to Erich Kaltofen, who 
used it to design a factoring algorithm that takes 0-(n3 + n log q) operations in F~ and only lin­ear 
space. Previous algorithms with this running time used quadratic space. Combining the polynomial represent 
ation of the Frobenius map with a fast multi-point evalu­ation algorithm for the polynomial ring R[y] 
al­lows us to compute the elements a, c@,..., cd for a given a c R using 0-(n2 + n log q) opera­tions 
in Fg, whereas the obvious repeated squar­ing algorithm uses 0-(n2 log q) operations in Fq, and an algorithm 
based on a matrix representa­tion of the Frobenius map uses O-(n + n log q) operations in Fq. This 
new approach leads to our basic algorithms for solving the distinct-degree and equal-degree factorization 
problems, which use 0-(n2 + n log q) operations in Fq. These are described in Section 2. A high-level 
view of the three approaches to computing iterates of the Frobenius map is that repeated squaring treats 
it as a multiplicative map on R, the matrix representation as an F~­linear map on R, and the polynomial 
represen­tation as an F~-algebra endomorphisrn. The running time of our algorithm is fairly in­sensitive 
to the largest degree d of irreducible factors of j. However, the algorithm of Cantor and Zassenhaus 
actually uses only O-(nd log q) operations in Fq; in particular, our method does not improve root-finding. 
Section 3 takes another look at equal-degree factorization. For this problem, we do not need to compute 
the individual iterates of the Frobe­nius map, but only sums of the form ~~=o C@;, where d is the degree 
of the irreducible factors of f. We call such a sum a trace map, as it is given by the formula for the 
trace from F,qd to F~. The polynomial representation of the Frobenius map allows us to compute the trace 
map for a given a E R using only 0 (nfU+lJ/2 + n log q) opera­ tions in Fq. This leads to an algorithm 
for equal­degree factorization with the same time bound, which is 0-(n1 7 + n log q). At this point, 
we have the anomaly that our al­gorithm for the easy problem of distinct-degree factorization, which 
uses 0-(n2 + n log q) opera­tions in Fq, is asymptotically slower than our al­gorithm for the harder 
problem of equal-degree factorization, which uses 0-(nl.7 + n log q) oper­ations in Fq. The latter problem 
seems harder since no deterministic polynomial time algorithm for it is known if the characteristic of 
the field is large, In Section 4, we discuss a special version of the multi-point polynomial evaluation 
problem that is the bottleneck of our current algorithms for distinct-degree factorization: asymptotic 
im­provements on it would immediately improve the time for distinct-degree factorization, and hence the 
time for the general factoring problem. No lower bounds are known for the factoring prob­lem, except 
that factoring quadratic polynomials takes O(logq)o perationsin Fg (vcmzur Gathen &#38; Seroussi 1991). 
Throughout the paper, we also discuss the space requirements in terms of storage of ele­ments of F~-of 
our algorithms. Our basic al­gorithms in Section 2 use space 0( TZ2). The equal-degree factoring algorithm 
in Section 3 uses space O(n log n), and the distinct-degree factorization algorithm of Section 4 uses 
space 0(n3i2). Our algorithm has a deterministic variant that completely factors f using 0-(n2 -i-n312k 
+ n312k1f2p1~2) operations in Fg = FP~, and that extracts a single irreducible factor using 0-(n2 + 
nk T npl/2) operations in F~. Furthermore, our methods yield a O-(nI + n log q) algorithm for testing 
ir­reducibility of polynomials, and a 0-(n2 +n log q) algorithm for finding normal bases in field exten­sions 
Fqn/Fq. In this Extended Abstract, we do not have enough space to discuss these applica­tions. 2. A Factoring 
Algorithm The purpose of this section is to describe an al­gorithm that will factor a polynomial f in 
F~[x] of degree n with 0-(n2 + n log q) operations in F~. We may assume that f is squarefree. Let R = 
Fq[z]/(f) and ~= z c R. We can implement arithmetic in R by represent­ing an element Q c R by its canonical 
repre­sentative g 6 Fq[z] of degree less than n, with a = -9 = g(f). At times we will need to make this 
representation explicit, and we use the fol­lowing notation: for a G R, d G Fq[z] is the canonical represent 
ative g of a. Let ill(m) be the number of operations in F~ used to multiply two polynomials in F~[z] 
of degree at most m. We can take M(m) = O(m log m loglog m) (Schonhage &#38; Strassen 1971, Schonhage 
1977, Cantor &#38; Kaltofen 1991). The cost of addition in R is O(n) operations in Fq, and of multiplication, 
O(ill(n)) operations in F~. The cost of multiplying two polynomials in R[y] of degree at most m is O(M(nm)) 
oper­ations in Fq. Our basic algorithms for distinct-degree and equal-degree factorization use as a subroutine 
an algorithm for computing iterates of the Frobe­nius map on 1?, which is based on the following observation. 
If for some m with 1 < m < n we have computed ~, (9,..., &#38;J~, and if g c Fq[x] is the canonical representative 
of ~gm, then we can compute ~qm+l, , , ., fqz~ by evaluating the poly­nomial g at the points ~ J, ..., 
@ . This dou­bling step can be done using a fast multi-point polynomial evaluation algorithm for R[y] 
with O-(n) operations in R. Thus, if we first compute (9 using repeated squaring which takes O(log q) 
operations in R and then perform the above doubling step O(log n) times, we can compute all of the elements 
(, fq ,..., &#38;J with O-(n+log q) operations in R, and hence 0-(n2 + n log q) op­erations in Fq. ALGORITHM 
2.1. Iterated Frobenius. INPUT. f, a, ~, and m, where f is a polynomial in Fq[z] of degree n, f = 5 C 
R = Fq[$]/(.f), aeRand~CRwith~=(tfor some power t of q, and m is a positive integer with m<n, OUTPUT. 
The elements a, at,.. ., o?~ in R. 1. SetV. =~and-yI=~,andlet1= [log2ml, 2. Fori=l ,..., ~, do the following. 
(After stage i, we have computed 7j = ~t for O < j < 2;.] Compute 72i-l+j = ~zi-1 (7j) for ~ = 1.....2i-1 
using a fast multi-point polynomial evaluation algorithm.  3. Compute 7$ = d(7~) for j = O,... ,m us­ing 
a fast multi-point polynomial evaluation algorithm. 4. Return 7&#38;7~,.. .,7~.  THEOREM 2.2. Algorithm 
2.1 works correctly as specified, and uses o (#!@-n)log?n ) operations in Fq and space for O (n m) elements 
of Fq. In particular, the running time can be bounded by 0(n2 log n loglog n log m) operations in Fg. 
For distinct-degree factorization, we use a vari­ant of an algorithm that already appears in Ar­win (1918). 
As an aside, we remark that Arwin s fascinating paper foreshadows many other meth­ods used in modern 
polynomial factorization, in­cluding trace computation (McEliece 1969, Ben-Or 1981, Camion 1983), reduction 
to root-finding via resultants (Berlekamp 1970), and distin­guishing roots by their order (Moenck 1977, 
von zur Gathen 1987, Mignotte &#38; Schnorr 1988). Ar­win s algorithm is based on the well-known fact 
that for d >1, the polynomial zq~ x c F~ [z] is the product of the monic irreducible polynomials in 
F~[z] whose degree divides d. ALGORITHM 2.3. Distinct-Degree Factorization. INPUT. A squarefree monic 
polynomial f over Fg of degree n. OUTPUT. The set of all pairs (g, d) such that g is the product of all 
monic irreducible factors off of degree d with d >0. 1. Let ~ = Z E R = Fg[z]/(f), and compute (q E R 
using a repeated squaring algorithm. 2. Using Algorithm 2.1 with arguments $~~~,~~n), compute the elements 
~i = ~q ,. ... n. 3. Put S= O,putf* =f, and fori=l,..., n, do the following. (a) Compute g = gcd(~, 
&#38; z), (b) Ifg # 1,add (g,i) to S. (c) Replace ~ with ~/g.   4. Return S. THEOREM 2.4. Algorithm 
2.3 works correctly as specified, and uses 0( A4(n2) logn + M(n) logq) operations in Fq and space for 
0(n2 ) elements of Fq. In particular, the running time can be bounded by 0((n2 log n + n log q) .log 
n loglog n) operations in Fq. ALGORITHM 2.5. Equal-Degree Factorization. INPUT. A squarefree polynomial 
f over Fq of de­gree n and a positive integer d, where f is the product of r irreducible factors, each 
of degree d (so that n = rd). OUTPUT. The set of monic irreducible factors of f. 1. If degf = d, then 
return {j}; if degf = O, then return 0. 2. Let &#38; = z 6 R = Fq[z]/(f), and compute fq using repeated 
squaring.  3, PicJ{ Q E R at random and compute d l fk~ct!q i=tl using Algorithm 2.1 with ar$~:len: 
(f, a,~ J, d-l) togeta, aq,.. ,,a J , an then summing these elements. 4. lf q is odd, then do the following: 
(a) Compute ~ = p(9-1)/2 using repeated squaring. (b) Compute hl = gcd(~, f), h2 = gcd(~ l, f), and 
hs = f/(hlhz). (c) Recursively factor hl, hz, and h3, and then return the union of these three sets 
of factors.  ELw, if q = 2k, do the following: (a) Compute  ~ = :: @2 (b) Compute hl = gcd(~, ~) 
and h2 = j /hl. (c) Recursively factor hl and hz, and then ret urn the union of these two sets of factors. 
 THEOREM 2.6. Algorithm 2.5 works correct~y as specified, and uses an expected number of o(M(?zd)Tloga 
+ M(n) logr log q) operations in Fg, an expected number of O(n log r) random elements of F~, and space 
for O(nd) elements of Fq. In particular, the expected running time can be bounded by O((n2 log d + n 
log r log q) .log n loglog n) operations in Fq. We summarize the results of this section in the following 
tb.eorem, which is the main result of this Extended Abstract. THEOREM 2.7. We have a probabi~istic algo­rithm 
that factors a polynomial of degree n over Fg using an expected number of O((n2 + nlogq). (logn)2 loglogn) 
operations in F~. 3. Equal-Degree Factorization In this section, we consider again the equal­degree factorization 
problem. We describe an algorithm for this problem that is more efficient than Algorithm 2.5, in terms 
of both time and space. One variant of this algo. rithm uses O-(n2 + n log q) operations in F~ and space 
for O(n) elements of Fq. Another variant uses (l-(nf~+l)ln + n log q) operations in Fg and space for 
O(n log n) elements of Fg. The bottleneck in Algorithm 2.5 is the applica­tion of the iterated Frobenius 
algorithm~~ step 4 to compute the quantities a, aq,. ... ag -. All we really need to compute is the sum 
of these elements, i.e., the trace map ~$~~ CUQ . A basic problem for the algorithms in this section 
is modular composition: computing g(h) rem j, where j, g, and h are polynomials over F9. Here, rem~ denotes 
the polynomial in F~[x] obtained as the remainder in dividing by ~. We summarize what is known about 
the com­ plexity of this problem; for simplicity, we assume 0>2. FACT 3.1. Let f, g, and h be polynomials 
over F~ of degree at most n. Then we can com­pute g(h) rem f in the following time and space bounds (time 
is measured in operations in Fq, and space is measured in storage for elements of F~) (i) time O(nikf(n)) 
and space O(n); (ii) time 0(niwyl)12 + ik?(n)n112) and space 0(n312);  (iii) time 0(n( _ ~1)12 logn 
+ lkf(n)(logn)3) and space O (n log n). (ii) is proved in Brent &#38; Kung (1978), and (iii) in Shoup 
&#38; Smolensky (1991). The complexity of modular composition is not well understood. In the special 
case where f = Zn, Algorithm 2.2 in Brent &#38; Kung (1978) solves this problem us­ing 0-(n3J2) operations. 
Moreover, there are no known super-linear lower bounds for this prob­lem. In what follows we shall use 
CT(n) and Cs(n) to denote the time and space bounds for a modular composition algorithm. We now present 
an algorithm for computing trace maps. The algorithm is based on the fol­lowing observation. Recall the 
notation d for the canonical representative of an element a of R. For m > 1, let Tm = ~~~1 CYg , and 
let = (9m . Then T2m = Tm + ?m (Mm) and Pm P2m = pm (pm). we can therefore obtain Tzm and pnm from Tm 
and pm at a cost of two modu­ lar compositions (plus one addition in R). Thus, if .d is a power of 2, 
we can easily compute the trace map Td = ~~~~ d as follows: first, com­pute ~q using repeated squaring, 
and then repeat the above doubling step logz d times. The to­tal cost of this method is O-(n log q) operations 
in FQ plus O(log d) modular compositions. The algorithm is easily adapted to deal with arbitrary d. ALGORITHM 
3.2. Computing Trace Maps. INPUT. f, a, /3,and m, where f is a polynomial in Fq[z] of degree n, f = Z 
E R = F~[z]/(~), a~Rand~GRwith~=&#38; for some ------1 -f.. - > ---:  ?L?---?.. L. ­ pvwer L 01 q, anu 
m M a posluve lnceger. OUTPUT. The elements c+m and ~~=o a in R. 1. Let m = ~~=o bi2i be the binary 
repre­sentation of m, so that 1 = Ilogz m] and bo,.. .,bl G{O, 1}. 2. (stage O) c1 ifbo =O,  ~ -d(~), 
T ­CY+T if bo=l, { ~ ifbo = O, P+@, -~ ifbo =1. { 3.l?ori=l ,...,4, do the following (stage i): T1 ifb~ 
=0, T+ T+?(p), r + T + ?(p ) ifbi= 1, { ifbi = O, P p + P(P)> P + fi(p ) ifbi = 1. { 4. Return d(p 
) and r , THEOREM 3.3. Algorithm 3.2 works correctly as specified, and uses O(CT(n) log m) operations 
in Fq and space for O(C S(n)) elements of F,. Now consider the following modification to Algorithm 2.5. 
We replace step 4 in that algo­rithm by 4!. Pick a $ R at random, and compute ~ = ~~~~ aq using Algorithm 
3.2 with argu­ments (j, a, fq, d 1). THEOREM 3.4. If C T is one of the bounds in Fact 3.1, then this 
modified equal-degree factor­ization algorithm uses an expected number of O(CT(n) logd + ill(n) logr 
logq) operations in F~ and space for O (Cs(n)) elements of Fq. In particular, we have the following 
time and space bounds (time is measured in opera­tions in Fg and space is measured in storage for elements 
of Fg): (i) time O((n2 log d+n log ~ log q).log n loglog n) and space O(n); (ii) time 0(nl.7+n log n 
loglog n log r log q) and space O(n log n).  4. Distinct-degree factorization In this section, we describe 
another algorithm for distinct-degree factorization that uses 0-(n2 + n log q) operations in F~, like 
Algorithm 2.3, but space for only O (n312) elements of F~. We need the following variant of Algorithm 
2.3 as a subroutine. ALGORITHM 4.1. Range Decomposition. INPUT. f, a, b, a, /3, where f is a squarefree 
polynomia~ in F~[z] of degree n, ~ = T C R = Fq[z]/(j), a and b are positive integers with a<b,and a=(9 
and~=@;itis assumed that the degrees of a.]] irreducible factors off lie in the range a,. . . . b. OUTPUT. 
The set ofallpairs (g, d) such that g is the product of all monic irreducible factors off of degree d 
with d >0. 1. If a> n, return 0; if b> n, replace bwith n. 2. Use Algorithm 2.1 with arguments (f, 
CY,P, b a) to compute ai = @ for i=a, . . ..b.  3. Put S = 0, f* = f, and do the following for i=a, 
. . ..b.  (a) Compute g = gcd(f , iii -x). ( b) Ifg # 1, add (g, i) to S. (c) Replace f* with ~/g. 
4. Return S. THEOREM 4.2. Algorithm 4.1 works correctly as specified, and uses o (;M(nm)log?n) ) operations 
in Fq and space for O (n m) elements of Fq, where m = min{n, b a+ 1}. In particular, the running time 
can be bounded by O(n2 log n loglog n log m) operations in Fq. Our distinct-degree factorization algorithm 
works by dividing the interval 1, . . . . n into roughly W intervals each of size about @. For each interval, 
it finds the product of the irre­ducible factors whose degrees lie in the that in­terval, and then applies 
Algorithm 4.1 to get the complete distinct-degree factorization. ALGORITHM 4.3. Distinct-Degree Factorization. 
INPUT. A squarefree polynomial j over F~ of de­gree n. OUTPUT. The set of all pairs (g, d) such that 
g is the product of all monic irreducible factors off of degree d with d >0. l. Let~=TER= Fq[x]/($), 
and compute ~q using repeated squaring. 2. Let m = [n112j, and m = [n/m]. 3. Apply Algorithm 2.1 with 
arguments  (f> f> f > ) 0 obtain W = $ or .j = o ,.. .,m. 4. Apply Algorithm 2.1 with arguments (f, 
(9, Pm., m -1) to obtain vi = .@rn+ for i= O,...,l l. 5. Compute the polynomial m l 9(Y) = JJ (LAY) 
 o rem f(Y) ~ RIYI jGO 6. Compute~i =g(vi) G Rfori=O,. ..,l l using a fast multi-point evaluation zdgo­rithm, 
(Then ~~ = ~~=!l (Cg:~+l+~ ().] 7. Put S= O, f*= f,andfor i= O,. ... m l, do the following:  (a) 
Compute h = gcd(?i, f*). (b) Replace f* with f*/h.  (c) If h # 1, compute the distinct­degree factorization 
of h by invoking Algorithm 4.1 with arguments (h, im + l,im+ m, V;, pl) and add the result to s. 8. Return 
S. THEOREM 4.4. Algorithm 4.3 works correctly as specified, and uses 0(M(n3/2)n1/2 log n + AZ(n) logq) 
 operations in Fg and space for O (n3/2) elements of Fq. In particular, the running time can be bounded 
by O((n2 log n + log q) log n Ioglog n) operations in F~. As things now stand, distinct-degree factor­ization 
is the bottleneck in our general poly­nomial factoring algorithm. Furthermore, the bottleneck in our 
distinct-degree factorization algorithm is multi-point polynomial evaluation. We now indicate a direction 
in which fur­ther progress in reducing the time complexity of distinct-degree factorization and hence 
the complexity of the general factoring problem ­may be possible. We define the special multi-point polynomial 
evaluation problem to be that of evaluating a large polynomial with small coefficients at 103 a small 
number of large points. To be precise, let / c F~ [z] have degree n, and let R = Fq[z]/(f). The special 
multi-point poly­nomial evaluation problem is that of computing g(cll),..., g(cr~), where m s nlJ2, al,.. 
.,cr~ 6 R, and g is a polynomial of degree n over R each of whose coefficients have canonical representa­tives 
of degree at most nli2. Since the number of elements of Fg required to encode both the input and the 
output of this problem is only O(TZ3/2), it is not clear a priori that this problem cannot be solved 
using, say, O-(n312) operations in Fq. However, at present the best algorithms we know of take 0-(n2) 
op­erations in F~. All of the multi-point polynomial evaluation problems that arise in Algorithm 4.3 
are of this special type. As the next theorem in­dicates, any improvement in solving this special problem 
will immediately lead to an improve­ment in the cost of distinct-degree factorization. THEOREM 4.5. Suppose 
that the special multi­point evaluation problem can be solved using O-(n ) operations in Fg, where 3/2 
~ K < 2. Then Algorithm 4.3 can be implemented so as to use O-(nx + n log g) operations in Fq. We conjecture 
that K <2 can be achieved. Acknowledgment We are indebted to Erich Kaltofen for sharing his idea of 
the polynomial representation of the Frobenius map with us, and for the many enthu­ siastic discussions 
we had during his sabbatical visit at Toronto. References A. ARWIN, Uber Kongruenzen von dem funften 
und hoheren Graden nach einem Primzahlmo­dulus. Arkiv f6r matematik, astronomi o. fysik 14 (1918), 1-46. 
L. BABAI, E. M. LUKS, AND A. SERESS, Fast management of permutation groups. In 29ih An­nual Symposium 
on Foundations of Computer Sci­ence, 272 282, 1988. M. BEN-OR, Probabilistic algorithms in finite fields. 
In 22nd Annual Symposium on Foundations of Computer Science, 394-398, 1981. E. R. BERLEKAMP, Algebraic 
Coding Theory. McGraw-Hill, 1968. E. R. BERLEKAMP, Factoring polynomials over large finite fields. Math. 
Comp. 24(111) (1970), 713-735. R. P. BRENT AND H. T. KUNG, Fast algorithms for manipulating formal power 
series. J. Assoc. Comput. Mach. 25 (1978), 581-595. J. BUCHMANN, Complexity of algorithms in alge­braic 
number theory. In Number Theory. Proc. First Conf. Canadian Number Theory Assoc. Wal­ter de Gruyter, 
1990. P. CAMION, Improving an algorithm for factor­ing polynomials over a finite field and construct­ing 
large irreducible polynomials. IEEE Trans. In­form. Theory IT-29(3) (1983), 378-385. D. G. CANTOR AND 
E. KALTOFEN, On fast mul­tiplication of polynomials over arbitrary algebras. Acts. Inform. 28 (1991), 
693-701. D. G. CANTOR AND H. ZASSENHAUS, A new al­gorithm for factoring polynomials over finite fields. 
Math. Comp. 36(154) (1981), 587-592. D. COPPERSMITH AND S. WINOGRAD, Matrix multiplication via arithmetic 
progressions. J. Sym­bolic Comp. 9(3) (1990), 23-52. J. VON ZUR GATHEN, Irreducibility of multiva.ri­ate 
polynomials. J. Computer System Sciences 31 (1985), 225-264. J. VON ZUR GATHEN, Factoring polynomials 
and primitive elements for special primes. Theoret. Comput. Sci. 52 (1987), 77-89. J. VON ZUR GATHEN 
AND G. SEROUSSI, Boolean circuits versus arithmetic circuits, Information and Computation 91 (1991), 
142-154. E. KALTOFEN, Polynomial factorization 1982­1986. In Computers in Mathematics, ed. D. V. Chudnovsky, 
R. D. Jenlw, Lecture Notes in Pure and AppJied Mathematics, vol. 125, 285 309, 1990, D. E. KNUTH, The 
Art of Computer Programming, vol. 2. Addison-Wesley, second edition, 1981. R. J. MCELIECE, Factorization 
of polynomials over finite fields, Math. Comp. 23 (1969), 861 867. M. MIGNOTTE AND C. SGHNORR, Calcul 
dt%erministique des racines d un polyn6me clans un corps fini. C. R. Acad. Sci. Paris 306 (1988), 467­ 
472. R. T. MOENCK, On the efficiency of algorithms for polynomial factoring. Math. Comp. 31(137) (1977), 
235-250. A. M. ODLYZKO, Discrete logarithms in finite fields and their cryptographic significance. In 
Ad­vances in Cryptology, Proceedings of Eurocrypt 84, 224-314. Springer-Verlag, 1985. A. SCH6NHAGE, Schnelle 
Multiplication von Poly­nomen iiber Korpern der Charakteristik 2. Acts Inform. 7 (1977), 395-398. A. 
SCHONHAGE AND V. STRASSEN, Schnelle Mul­tiplication grosser Zahlen. Computing 7 (1971), 281-282. V. SHOUP 
AND R. SMOLENSKY, An algorithm for modular composition. Preprint, 1991. D. Y. Y. YUN, On square-free 
decomposition al­gorithms. In Proc. ACM Symp. Symbolic and Al­gebraic C omp., 26 35, 1976. 
			