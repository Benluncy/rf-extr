
 Familiar Contexts, New Technologies: Adapting Online Help to Simulate an Expert System Hilari Kleine 
Jones First Health HilariK@firsthealth.com hjkjones@prodigy.net  Abstract Expert systems are software 
applications that help users follow a predetermined, optimized path of decision making or problem solving. 
For technical communicators, they provide a method for documenting complex procedures that cannot be 
replicated within a traditional reference manual. Sophisticated tools are available for expert system 
authoring, but the hypertext functionality of ordinary Windows help files can lend itself equally well 
to the task. Although an older technology, WinHelp provides a simple, inexpensive means of simulating 
the logic that drives a true expert system. This article discusses the principles and methods involved 
in creating a WinHelp expert system. Introduction Producing procedure documentation that is logical, 
precise, and helpful to users is a persistent challenge for technical communicators, particularly when 
the documentation is to be used for on-the-job problem solving. Whether diagnosing computer errors, evaluating 
medical claims, or assessing product assembly quality, users need reference resources that clearly identify 
decision points, possible actions, and their corresponding outcomes. krmission to nuke digitol~~nrd copies 
ofnll or part oftllis material for perSoKd or ckwoom use is gantcd without fee provided that :be copis 
we not made or distributed far profit or commercint ndvantqe, the copy- @?bt nOliCe, IfIC title of the 
publicatioo and its date appear, nod notice is &#38;!iVen tktt copyri&#38;ht is by permission of the 
AChl, Inc. To copy otbenvise, to republish,to post on servers or to redistribute to lists, require specific 
pem~k~ioo nndlor fee. SIGDOC 97 Snowbird Utah USA Copyridlt 1997 ACM 0-89791~861-4/97/10...$3.50 As tasks 
become more complex and the need for decision making increases, the conventional reference manual resembles 
not so much a guided tour as a frustrating scavenger hunt: the desired information is available somewhere, 
but it is hidden among asterisks, go to.. . references, and bulleted lists. For users who have little 
time for-and even less inclination toward-searching the text, the proper path of procedures is effectively 
indistinguishable; as a result, the quality and consistency of problem solving suffer, and the documentation 
is dismissed as being user unfriendly. A relatively new technology, the expert system, is emerging to 
combat the information overload that fuels users documentation apathy. Expert systems are software applications 
that use artificial intelligence to lead users through the most efficient course of problem solving; 
they ask questions and then provide feedback based on user responses, much like an interview. By focusing 
only on critical decisions, expert systems avoid distracting users with unnecessary steps and superfluous 
data. As a result, even inexperienced users can demonstrate expert-level productivity and procedural 
correctness (Grider, 1994). Special shell (authoring) software is available to create expert systems, 
but it has not yet become a fixture within many documentation environments. The key to producing an effective 
expert system is not so much the authoring tool, however, as the ability to lead users through a sequence 
of decisions to an appropriate outcome. With careful planning, the hypertest linking capabilities of 
common WinHelp files can be manipulated to replicate the logic and design of a more sophisticated expert 
system. A WinHelp expert system (WES) offers several advantages over other types of expert systems and 
conventional documentation: Availability Deciding to implement a WES Because a WES consists of standard 
HLP files. any Windows user can access the system. A single HLP file may be all that is necessary to 
distribute and update the system. COSI The personnel required to design and author a WES account for 
most of its cost; authoring tools are inexpensive. and additional viewing tools are not necessary. Ideally, 
a WES will replace other reference documentation and become a trusted resource users will read; as a 
result, the efforts of the technical communicator will no longer be wasted, and the paper, time, and 
frustration saved will more than compensate for the initial investment. Funtrltartty Many Windows users 
are already familiar with the formatting and functionality of WinHelp files, so WES training can focus 
less on how jumps and pop-ups work and more on what the system actually contains. Because the WES looks 
like the procedure it supports, users are more likely to recognize its purpose and value. Familiarity 
enhances WES production as well, so developers who have used or created WinHelp files will have little 
trouble adapting the hypertext navigation features for use with an expert system.  Methods Building 
a WES involves combining the principles of both online help and expert system design. Caldanaro et al. 
(1997) include the following steps as components of successful help development; these steps apply to 
WES development as well: 1. Deciding to implement a WES, and determining whether WES format is appropriate 
for the tasks involved 7 -. Determining WES content 3. Choosing authoring tools and resources 4. Designing 
and producing the system 5. Testing and revising the system  Before deciding to implement a WinHelp 
espcrt system, you must first determine whether an interview format is appropriate for the information 
you need IO convey. Work with users to analyze the tasks the system should address, and then ask yourself 
the following questions: . What is the purpose of each (ask? Applying the fundamental 6 W s -who, what, 
when, where, why, and how-is as relevant to planning a WES as it is to outlining any other form of procedure 
documentation. Ultimately, a WES is only as useful as the processes it supports: if no one can identify 
the key components of a task or explain why a procedure works a certain way, attempting IO create an 
expert system will be futile. Make sure relevant policies and procedures are in place (01 at least being 
considered) before you move forward. . Does each task involve a sitttple secprence of steps, or does 
it require decisron ttrukittg that determines the spec$c rns~rtrc~iotts to be followed? How ttttmy micltre 
outcomes are possible for each scenario? Enhancing decision making is the primary goal of any expert 
system. The interview format ol a WES is ideal for diagnostic, problem-solving. or evaluative tasks that 
involve a controlled number of variables and a known number of possible outcomes. It is impractical. 
however. for more linear procedures, or for procedures involving an unknown number of variables ot outcomes. 
If you have any doubt about whe~hct a task is suitable for WES formatting, apply the following test: 
I. Review any documentation that currentI} exists for the task. If it contains multiple if-then statements 
or see step X references, it is probably well-suited for use within a WES. 2. If no documentation is 
available, attempt to illustrate the task as a flow chart or decision tree. If you can t easily do this, 
or if your steps proceed in a single, straight line, WES format probably isn t the best choice for the 
documentation. 3. If you can create a flow chart of the task, try to identify a closed question (i.e., 
one with a limited range of possible responses) to be asked at each decision point; for instance, Does 
the form contain the doctor s name? (yes or no), or Are you using Windows 3.X or Windows 95? (either 
one or the other). Again, if you can t easily do this, you ll want to consider other formatting options. 
 . Is an apert path of decision making really desirable for each task? Implementing a WJZS forces 
all users to follow the same predetermined path of logic. While such consistency is highly desirable 
for many procedures, such as evaluating medical claims, it may prove too rigid in others. Discuss the 
consequences of implementing a single decision- making methodology with those who perform and oversee 
each task. If an expert path isn t necessary, the help system should not attempt to impose one. Determining 
WES content Once you decide that a WES is appropriate for users documentation needs, you must determine 
the specific information the system will contain. Appropriate content depends on the following basic 
factors: User information requirements A WES must frequently support users with varying levels of experience. 
Novice users may want more in-depth information than can be efficiently addressed within the course of 
an expert interview, while advanced users may need only isolated pieces of the decision making process. 
The extent to which you can balance different information needs depends on the overall role of the help 
system as well as your ability to maintain multiple levels of information. Consider the resources that 
will be available to supplement the WES (e.g., a help desk, user coaches). As a rule, the more self-reliant 
users are expected to be, the more the WES must contain. Needfor context sensitivi@ The relationship 
between a WES and the tasks it describes strongly influences expert system content. If the WES supports 
a sofhvare application, for example, key decision points can automatically correspond to a specific screen 
or screen object, allowing for context-specific instruction. Conversely, if the WES pertains to a process 
that is not computer-based, users will need to orient themselves within the expert path. Deciding whether 
or to what extent the expert system should be context sensitive also influences WES design (see Designing 
and producing the IaS ). WES authoring resources As noted earlier, the WES author s ability to create 
and maintain the system is a key factor in determining content. Releasing a haphazard, incomplete, or 
incorrect expert system not only threatens disaster for trusting users but also compromises your credibility: 
users will be reluctant to accept any future enhancements, and your system, however excellent, will go 
untouched. It s best to begin with a small but accurate WES and expand it later as necessary.  Choosing 
authoring tools and resources Knowing what your WES will contain helps you *select the tools and resources 
you need to create it. Begin by choosing a help authoring application, such as RoboHELP. Help authoring 
applications use word processor documents to create the source files that constitute HLP files; they 
are inexpensive and easy to learn, and they simplify the otherwise cumbersome task of creating hypertext 
links. Next, identi@ the people you need for your project team, such as additional help authors or editors, 
researchers, subject matter experts, users, and testers; if the FmS will work with a software application, 
also involve a programming resource who can coordinate the technical aspects of the help interface. ClariQ 
specific roles and commitments, and then establish a reasonable (and somewhat flexible) project timeline. 
Because it involves establishmg multiple decision paths and creating series of interview questions. producing 
a WES takes considerably longer than developing conventional help files. For every hour It takes for 
preliminary task analysis and design. allow at least five hours for development and testing. Designing 
and producing the WES The design phase is the most time-consummg portlon of the WES development process: 
done carefull>. however. it speeds the authoring and testing phases and ensures a useful end product. 
A well-designed WES combines the hypertext- based format of WinHelp files with the function of an expert 
system: it therefore requires careful attention to the structure and purpose of every help topic. As 
you contemplate the role of a given type of topic within a WES. you can identify the design elements 
it will likely encompass (Figure I ). Figure 1: Possible relationships between WES function and help 
topic design WES function Help topic design Categorizing information Resembles a menu or offered wtthin 
the system. index, with multiple grouping related tasks hypertext lrnks to other menus or to specific 
topics or procedures Explaming the nature or Contains concise goal of a specific paragraphs or bulleted 
declslon-makmg process; lists; may embed or mtroducmg resources contain links to screen requtred to complete 
a captures, diagrams, or task other visuals; frequently serves as il starting point for an interview 
Askmg a questlon or Contains a small amount indicatmg an outcome as of highly focused part of a decision 
making instructional text: always process concludes with a question and a hypertext link corresponding 
to each possible response, does not include links that will unnecessarily disrupt the flow of the Interview 
Summanzmg an expert May be graphical or text- path and/or rts possible based; minimizes outcomes exposition; 
Includes links to the corresponding interview Begin the design process by reviewmg your initial task 
analysis and considering how the different procedures are related: use this information to establish 
a menu structure. Be sure to account for the default help screen (the main menu) as well as any alternate 
access routes afforded by context-sensitive displays. Sketching the menu structure (Figure 2) is usel 
ul in planning required hypertext links later. Figure 2: Sample WES menu structure Man menu (default) 
I Next, consider the resources that users will need to perform each procedure; these include concept 
definitions or background information as well as other tools (e.g., software, hardware, related online 
help). Though a WES is largely foolprool; users still need a sense ofdirection to masimix the benefits 
of expert guidance. Near the starting point of each espert interview. try to include a list of key resources 
with a reminder about the purpose or goal of each procedure. After reviewing the general task information, 
create a flow chart or decision tree of the complete expert path for each procedure. if you haven t already 
done so during the planning phase. flepresenting each path graphically 11% you visualize the full scope 
of the decision making process and helps you establish boundaries between the help topics that the inrervlew 
comprises. Be consistent in your distribution of help topics; for example. decide whether each item on 
the flow chart will constitute its own topic, or whether procedures and their corresponding decision 
points will be combined. I?gurc 3 (Appendix) illustrates a sample flow chart for a medical claims processing 
task and indicates its associated grouping of help topics. Finally, decide whether including summary 
topics is feasible for the WES. Such topics not only reinforce the overall goal of each procedure but 
also provide an alternative to the interview for more advanced users. Consider using your procedure flow 
charts as summary graphics. If possible, you can use hotspots to lii each step in the chart to the corresponding 
topic in the interview, letting users quickly switch between high-level and in-depth views of the procedure. 
To ensure that all project team members follow the same conventions when creating the WES, document your 
design decisions in a brief style guide. While creating a style guide is advisable for any online help 
system, it is particularly critical for a WES because of the large number of topics involved. Include 
basic design principles (e.g., ample white space, short sentences, eye-friendly fonts) as well as project- 
specific guidelines; for example, describe how the question topic within the interview portion should 
be structured (Figure 4). Flgure 4: Sample derlgn guide for interview question topics . Use the action 
to be performed as the topic name; for example Identify the terminal type. . Conclude each context ID 
string [RoboHELP s method of creating unique topic names] with the abbreviated task name to prevent potential 
conflicts with similar topics In the same help file. . Wherever possible, orient the user at the beglnning 
of each topic by reinforcing the decision made withln the previous topic. For instance, if the previous 
decision point asks Is the red light flashing? begin the topic corresponding to the Yes response with 
When the red light is flashing.... . Explaln the criteria for making the decision, skip two lines, and 
then phrase the decision in the form of a single, closed question. Skip another line, and then list each 
possible answer on a separate line. . When formatting text, use the headings supplied with the RoboHELP 
template: $+ Use Heading 1 for topic names. > Use Heading 4 for body text. p Use Heading 3, boldface, 
for the key question. P Use Heading 3 (no formatting) for the answer options. Once the design of the 
WES is complete, decide how users will access the system. If the WES works with a specific software application, 
be sure that the software interface clearly indicates how to enter the WES, particularly where users 
are most likely to look for guidance. If the WES works with a process that is not performed online or 
that is not related to a specific application, consider offering a program item (m Windorvs 3.X) or shortcut 
(in Windows 95) that allows instant access to the main WES help file (Mischel, 1994). Use the menu sketch 
and flow charts you created to define the hypertext links that control WES navigation. This process can 
become complicated when you re working with interview question topics, as you may need to duplicate key 
decision points to account for different outcomes. To ensure that every topic name is unique, distinguish 
the hypertext definitions of simiIar topics with some indication of how the topic fits within the procedure 
flow; for instance, Evaluate-tie-fern-choicel and Evaluate-the-form-choice2. Though each expert interview 
within a WES is designed to have a set starting point, defming a limited number of search keywords is 
still a good idea. To minimize confusion, associate search words with high-level topics only, such as 
menus and the introductory topics that precede each interview.  Testing and revising the WES The most 
effective way of testing a WES is to have novice users perform each task using only the expert interviews 
for guidance. Before testing begins, outline the criteria you want to evaluate; for example: . Did users 
perform the procedures correctly using the WES? If not, where and why did errors occur? . How long did 
users take to perform each task using the WES? How does this compare with the current performance standard? 
. Did users report any confusion regarding the design? Were they able to locate the topics they wanted 
to view? Sit with users during testing, if possible, to observe their physical response to the system 
(e.g., hesitancy, susceptibility to distraction) and record their verbal feedback. If you can t be present, 
have testers keep a journal of their impressions, After preliminary testing, evaluate your findings and 
revise the system as necessary; then involve more experienced users and subject matter experts to help 
fine-tune the content and design. Anticipate future modifications as procedures change and the WES evolves. 
 Conclusions While HTML will likely supersede WinHelp as the primary Windows help medium, the demise 
of WinIHelp promises to be slow. if it occurs at all. As long as Windows 3.X and Windows 95 sustain significant 
user populations, WinHelp expert systems will remain a practical option for supporting decision making 
processes. For the technical communicator, WES development offers the chance to apply the design logic 
of an emerging technology within a familiar context. Only by testing the limits of current, even old, 
tools can we prime our creativity and skills for future challenges. Trademarks RoboHELP is a registered 
trademark of Blue Sky Software Corporation. Windows is a trademark of Microsoft Corporation. References 
1. Caldanaro, Regina M., Evans, Jeanette P., and Nichols, Michelle Corbin. (1997). Seven steps to successful 
online help, Infercorn 43 (8), -1-7. -.7 Grider. Daryl A. (1994). Expert systems for technical communicators. 
.Journal ofthe Society fitr Tecknical Cottmvnication 41 (4), 63.5-642. 3. Mischel, Jim. (I 994). The 
developer .s guide IO WJJVHELP.EXE. New York: John Wiley &#38; Sons, Inc.  Appendix Figure 3: Sample 
procedure flow chart and help topics I Nole system-identified problem: diagnosis code invalid. 2 Check 
claim form box 21 for diagnosis code. 1 233 4a, 8a 4b, 5 6a 6b, 7 8b \Help topic key  ldentii the problem: 
invalid diagnosis Check the claim form for a code Contact the physician to verify the diagnosis Determine 
whether the code was entered correctiy Reenter the code Attempt to cross reference the code Enter the 
updated code Does daim form Compare code on claim with code on claim saeen. Was code entered into Reenter 
code. Can you identify valid  
			