
 Product Line Bundles for Tool Support in Multi Product Lines Gerald Holl Michael Vierhauser Wolfgang 
Heider Christian Doppler Laboratory Siemens VAI Metals Christian Doppler Laboratory for Automated Software 
Technologies for Automated Software Engineering Turmstraße 44 Engineering Johannes Kepler University 
Linz, AustriaJohannes Kepler University Linz, Austriamichael.vierhauser.ext@Linz, Austriaholl@ase.jku.at 
siemens.com heider@ase.jku.at Paul Grünbacher Christian Doppler Laboratory for Automated Software Engineering 
Johannes Kepler University Linz, Austria gruenbacher@ase.jku.at ABSTRACT Many organizations adopt a 
product line approach to in­crease the degree of reuse in software development and to deal with the variability 
of their systems. Large-scale sys­tems are often composed of multiple heterogeneous subsys­tems that 
are based on diverse technological platforms. Pro­viding product line engineering tools for such multi 
prod­uct line environments is challenging as tool requirements of stakeholders can di.er signi.cantly. 
In this paper we present product line bundles (PLiBs), an approach that supports de­velopers in tailoring 
and extending product line tools in a multi product line context. Based on an industrial example, we 
examine the speci.c requirements and challenges of us­ing PLiBs to manage tool extensions in multi product 
lines and to simplify the integration and deployment of system­speci.c tool features. Categories and 
Subject Descriptors D.2.13 [Software Engineering]: Reusable Software Do­main engineering; D.2.1 [Software 
Engineering]: Require­ments/Speci.cations Reusable Software[Domain engineer­ing]  Keywords Product line 
engineering, tool support, product line bundles, multi product lines Permission to make digital or hard 
copies of all or part of this work for personal or classroom use is granted without fee provided that 
copies are not made or distributed for pro.t or commercial advantage and that copies bear this notice 
and the full citation on the .rst page. To copy otherwise, to republish, to post on servers or to redistribute 
to lists, requires prior speci.c permission and/or a fee. VaMoS 11 January 27-29, 2011 Namur, Belgium 
Copyright 2011 ACM 978-1-4503-0570-9/10/01 ...$10.00. Rick Rabiser Christian Doppler Laboratory for Automated 
Software Engineering Johannes Kepler University Linz, Austria rabiser@ase.jku.at  1. INTRODUCTION AND 
MOTIVATION Organizations operating and maintaining software prod­uct lines need tool support for their 
key engineering activi­ties [16, 25, 19]. Many software product lines today are de­veloped and maintained 
using model-based approaches, e. g., feature-oriented [3], decision-oriented [23], or UML-based approaches 
[8]. In product line engineering (PLE) [16], mod­els are used to de.ne variability and to automate product 
derivation. Meta-modeling [27, 13] is frequently used to adapt modeling tools to di.erent product lines. 
However, despite many bene.ts it is typically insu.cient in practical settings to focus only on models 
when adapting product line (PL) tools. Instead, PLE tool developers also need to deal with heterogeneous 
artifacts such as tool extensions or tool con.guration settings, for example, when adapting the tools 
to their particular environment. Managing such additional artifacts together with the product line models 
becomes par­ticularly challenging in multi product lines that cover mul­tiple, technically heterogeneous 
subsystems. Providing tool support for such environments is di.cult, as multi product lines are composed 
of several rather interdependent product lines [13, 20]. In the collaboration with our industry partners 
Siemens VAI and Siemens Corporate Technology we have discovered that stakeholders in charge of the individual 
product lines have very speci.c and diverse requirements regarding PLE tool support. For example, they 
might request speci.c gen­erators or visualization components for their product line to be integrated 
in product derivation tools. Due to a vari­ety of technology and business needs the requirements can 
di.er signi.cantly between the di.erent product lines. Pro­viding PLE tools thus becomes a product line 
problem in itself as we discussed in earlier work [9, 10]. More specif­ically, when developing product 
line models together with industrial stakeholders we realized that the additional tool requirements are 
often highly speci.c and di.cult to real­ize with a pure model-based approach. For instance, we received 
requests for special visualizations in tools, support for break even and return on investment (ROI) calculations, 
system-speci.c generators for creating executable software, as well as role-speci.c customizations of 
the user interface. It became increasingly challenging to design and develop tool support for these requirements 
in a generic manner.  Our experiences can be summarized in several key chal­lenges tool developers face 
when dealing with multi prod­uct line environments: Industrial systems are often based on system-of-systems 
architectures that consist of multiple heterogeneous subsystems. Stakeholders in charge of these subsystems 
raise diverse requirements not only regarding products to be derived but also regarding PLE tool sup­port. 
Multi product lines thus are characterized by the het­erogeneity of the involved product lines and the 
diversity of their users tool requirements. When analyzing these re­quirements we realized the limitations 
of pure model-based approaches which are insu.cient to deal with these require­ments. For instance, it 
is typically infeasible to develop a single common meta-model representing the entire system. Also, many 
requirements regard speci.c capabilities of tools that cannot be de.ned in models. Finally, there is 
a lack of mechanisms treating di.erent product lines as well as prod­uct line engineering tool extensions 
in a uniform manner. Existing mechanisms to tailor di.erent product line models to di.erent stakeholders 
and to deploy proper tool exten­sions are rather isolated and used for di.erent purposes at di.erent 
levels of granularity (e. g., product line models vs. tool plug-ins vs. tool con.gurations). Domain-speci.c 
and product line speci.c tool extensions can thus hardly be cre­ated in a uniform manner [10]. In this 
paper we present product line bundles (PLiBs) as an approach to address these challenges. We discuss 
a prototypical implementation of PLiBs used for extending our PLE tools to meet domain-speci.c tool requirements 
in multi PLs. The prototype also supports modeling a multi PL as several smaller sub product lines. We 
.rst illustrate the multi PL challenges discussed above and describe our approach using the industrial 
example of a mini mill and then provide a closer look at the concept, usage and con­crete implementation 
of PLiBs in a speci.c product line tool environment.  2. ILLUSTRATIVE EXAMPLE: MINI MILL Mini mills 
are part of the product portfolio of our indus­try partner Siemens VAI. A mini mill is a steel plant 
which uses scrap as iron source. It comprises an electric furnace for melting scrap, a caster to convert 
the molten steel into a solid form (by casting steel slabs) and some kind of a rolling mill to roll the 
steel slabs [11]. A mini mill is hence built from several interdependent systems that together represent 
a large-scale system (cf. Figure 1). Typical subsystems of a Siemens VAI mini mill are the electric furnace, 
the caster, the rolling mill as well as the maintenance and setup system (MSS), a software tool used 
by customers for customizing the mini mill software solution during operation. The mini mill represents 
a multi PL and the di.erent subsystems can be customized, e. g., regarding the amount of iron, type of 
furnace, number of strands, type of caster, type of rolling mill (e. g., a primary or .at), or the rolling 
width and rolling capacity. There are also dependencies regarding variability among the subsystems that 
need to be considered. For ex­ample, the rolling mills depend on the number of strands of the caster 
and the caster depends on the furnace in terms of the possible capacity of molten steel. Despite these 
de- Figure 1: Heterogeneous subsystems and their de­pendencies in the mini mill multi PL. Di.erent stakeholders 
are in charge of these subsystems and have di.erent requirements for PLE tool support. pendencies each 
subsystem can be treated as a single and stand-alone product line. Di.erent stakeholders (e. g., business 
managers, develop­ers, system operators, etc.) are in charge of the di.erent sub­systems of the mini 
mill and state di.erent requirements re­garding PLE tool support for their subsystem depending on the 
technology and business needs (cf. Figure 1). Although mini mills are treated as a single and complete 
product, each of the subsystems needs to be supported di.erently by tool developers regarding meta-models, 
variability models, prod­uct generators, tool views, etc. This variability in PLE tool support needs 
to be addressed more e.ciently and by pro­viding deployable units of tool extensions for the di.erent 
stakeholders.  3. USING PRODUCT LINE BUNDLES TO COMPONENTIZE PLE TOOL SUPPORT Tools for a multi PLE 
need mechanisms to handle the highly speci.c requirements of the involved stakeholders. Despite many 
advances, current PLE tools do not provide such a high degree of extensibility. Therefore an approach 
is needed which connects the subsystem-speci.c models and tool extensions with the generic PLE tools. 
We thus propose product line bundles (PLiBs) supplied by PLE tool develop­ers (cf. Figure 2) for PLE 
tool users. A PLiB is speci.c to a subsystem and contains all the capabilities needed to extend the generic 
PLE tools and tailor them for the usage with a speci.c product line of a subsystem. It packages the partic­ular 
variability model of the subsystem and implements all subsystem-speci.c requirements. In simple terms, 
a PLiB packages relevant components that are needed to conduct product derivation for a single product 
line. It serves as a container for product line variability models, meta data (e. g., dependencies to 
other PLiBs), and tool extensions (e. g., generators, views) for a product line. PLiBs can be seen as 
a connector between a generic product line tool and a concrete product line.  PLiBs can be used to provide 
extended tool support for the mini mill example. Each of the mini mill s subsystems can be represented 
as a PLiB as depicted in Figure 2. For example, the caster PLiB contains the variability model and dependencies 
to other PLiBs such as the furnace. Each PLiB can be managed, instantiated and deployed independently 
of the others. Together, the PLiBs form the tool extensions to support the multi PL mini mill system. 
  Figure 2: PLiBs act as a connector between the subsystems and the generic PLE tool platform in a multi 
PL environment. They package the PL models, assets, stakeholder role de.nitions, speci.c tool extensions 
and de.ne interfaces and dependencies to other PLiBs. Bundling and packaging tool extensions for speci.c 
prod­uct lines bene.ts from existing technologies for component­based software development. Software 
components are ex­ecutable units of independent production, acquisition, and deployment that can be composed 
into a functioning system [24]. Similar to software components PLiBs serve as units of deployment and 
package the required things. Software components encapsulate a state and de.ne their behavior in terms 
of provided and required interfaces. Similarly, PLiBs de.ne interfaces and dependencies which are necessary 
in multi PLs.  4. PLIB DEFINITIONS We distinguish between PLiB templates and PLiB in­stances comparable 
to classes and objects in object-oriented programming languages. A PLiB template represents a sten­cil 
for creating PLiB instances which in turn represent a container for a concrete product derivation project. 
A PLiB template for example can comprise a domain-speci.c meta­model for de.ning product line variability 
models and can de.ne generators required to derive products when utilizing the PLiB. Multiple PLiB instances 
(e. g., one for each actual derivation project) can then be created from the template as shown in Figure 
3. 4.1 PLiB Templates A PLiB template is based on the generic PLiB template (cf. Figure 3; left side) 
and consists of a manifest, a set of models, organizational policies (e. g., roles), tool views [17], 
tool connectors and extensions (e. g., generators), as well as additional de.nitions (e. g., expiry date). 
The PLiB inter­face (cf. Figure 3) provides means to access the data of the PLiB. The optional tool views 
and extension interfaces enable plugging extensions to address the system-speci.c re­quirements of the 
stakeholders into the PLiB. In the mini mill example the caster PLiB template (cf. Figure 3; mid­dle) 
contains the caster variability model as well as organiza­tional de.nitions like roles (e. g., sales 
person and developer) that are important during product derivation. Furthermore, the caster PLiB template 
includes a template for creating budget o.ers [21], a generator for creating software-speci.c artifacts, 
and a ROI view supplied using the tool view and tool extension interfaces respectively. A PLiB template 
contains a manifest that provides a table of contents of all elements in the PLiB and de.nes the dependencies 
to other PLiBs as well as the PLiB s interfaces. A PLiB template contains models. The meta-model de­.nes 
the modeling elements for creating variability models of a product line. The variability model is an 
instance of the meta-model and de.nes the product line s variation points (e. g., as decisions or features), 
concrete reusable assets of the product line, and mappings between variation points and assets. A PLiB 
template also comprises organizational poli­cies de.ning its use [18]. For instance, roles are used to 
de.ne di.erent viewpoints on a product line with regard to derivation. A speci.c role can be assigned 
to a concrete user, to re.ect her actual tasks and responsibilities in the prod­uct derivation process. 
Based on the role, di.erent views can be presented (e. g., a subset of decisions relevant to the user) 
[17]. Common roles (that may be used in di.erent PLiB templates) during deriving and con.guring products 
are sales, system architect, modeler, and engineer. A PLiB can also prede.ne the list of concrete users 
involved in the product derivation process. Each user is mapped to at least one role de.ned in the PLiB 
template. Tasks are used to group and prioritize con.guration decisions in a logical man­ner for product 
derivation [18]. A decision can be part of one or more tasks which again can be assigned to one or more 
roles. Tasks allow assigning particular groups of decisions to  Figure 3: PLiB templates are based 
on a generic template de.ning the basic elements. Concrete PLiB instances can be created by instantiating 
the PLiB template. In the example the caster PLiB template is derived from the generic PLiB template. 
The caster PLiB template then acts as a stencil to create one or more concrete caster PLiB instances 
used for concrete caster product derivations. particular roles (and due to the mapping of roles to users, 
to particular users). Additionally, guidance can be de.ned to assist domain experts (e.g., project managers, 
sales sta.) during product derivation [18]. For instance, the choices and impact of speci.c decisions 
on the current derivation project can be explained and illustrated using guidance. Tool views are de.ned 
in a PLiB template to allow role­or task-speci.c user interface customizations of product de­rivation 
tools. For instance, with the caster PLiB an addi­tional ROI view is provided for the role of the sales 
person (cf. Figure 3). The end user only has a restricted view where she can make choices about the user 
interface of the system to be derived. In contrast, the system expert s view shows choices concerning 
the software architecture and com­ponents of the system. Views provided with a PLiB allow customizing 
and extending the preinstalled product deriva­tion tool by adding new content, if desired even only for 
speci.c roles. PLiB templates can also contain tool extensions re­quired by stakeholders. Generators 
for example are software components that create concrete product instances based on decisions made by 
a user during derivation (thus resolving variation points de.ned in the variability model). Genera­tors 
can produce di.erent types of output like documents [21] or software con.gurations [13]. A generator 
can be spe­ci.c to a product line variability model (and thus only avail­able for a model provided in 
the same PLiB) or generic (and thus usable by multiple PLiBs). The software generators of the caster 
PLiB template (see Figure 2) is a speci.c gen­erators because the composition of the software modules 
of the caster is di.erent to that of the furnace. The docu­mentation generator for instance as a generic 
generators as generating documents is identical in multiple cases (see the rolling PLiBs in Figure 2). 
In this case document templates and fragments can be used by such generators for compos­ing system documentation, 
user documentation, sales docu­ments or reports during product derivation [21]. Calculation instructions 
may also be provided as tool extensions to spec­ify a set of formulae and rules de.ning which calculations 
have to be performed and presented to the tool user during product derivation (e. g., total price, ROI, 
break-even, CO2 reduction estimates, and estimates about plant characteris­tics). Calculation results 
can be provided to users via views or generators. Finally, a PLiB template can comprise additional de.­nitions. 
For instance, an expiry date is de.ned in order to enforce a newer version of the template (and instances 
thereof). The expiry date prevents the instantiation of the template or the derivation of products which 
in turn helps to avoid generating products with an outdated product line model. Other examples for additional 
de.nitions are re­quirements categories (e. g., functional, performance, secu­rity, etc.) which can be 
pre-de.ned to group and structure additional requirements that turn up during product deriva­tion and 
are not yet covered by product line [18].  4.2 PLiB Instances A PLiB instance is created from a PLiB 
template and rep­resents a container for a concrete product derivation project. The instance allows deriving 
and con.guring a product from the product line represented by the PLiB template. It re­tains diverse 
product-speci.c data. For instance, it main­tains the state of user choices (e. g., the values of the 
de­cisions taken in product derivation); it stores the generated artifacts (e. g., documents, con.guration 
.les, etc.) repre­senting (parts of) product instances; it contains addition­ally captured requirements 
which turn up during product derivation to manage deviations from the standard [18]. The additional requirements 
provide feedback to PLiB de­velopers for evolving the PLiB template. PLiB instances do have a limited 
lifetime in order to pro­hibit the use of outdated versions. This is necessary in the case that changes 
to the model occur (e. g., adding new de­cisions and assets when ful.lling new or changed require­ments). 
The lifetime is restricted by the expiry date de.ned in the PLiB template. At the end of its lifetime 
a PLiB in­stance cannot be changed anymore and is set as read-only.  The PLiB template on which the 
instance is based on cannot be instantiated any longer after the expiry date is exceeded.  5. PLIB 
PLATFORM AND IMPLEMENTA-TION We have been realizing the PLiB approach as part of our ongoing research 
and on top of the Eclipse platform and our DOPLER product line tools [17, 4]. Several of the described 
elements of a PLiB template such as manifest or dependency de.nitions can be directly mapped to existing 
Eclipse functionality. PLiB templates can be considered as single plug-ins or features [15] in context 
of an Eclipse development environment (in case of deployment). The PLiB template manifest itself is represented 
by the Eclipse plug-in manifest .le which contains information on PLiB interfaces, version information, 
etc. Functionality that is not directly provided via Eclipse can be added by using the generic (OSGi) 
extension point mechanism [15]. Vari­ous resources such as documents or con.guration .les pro­duced or 
used by generators, di.erent models contained in a PLiB, or connectors for sharing content (i. e., on 
webservers) are added to a PLiB template via their respective extension points (di.erent extension points 
for di.erent resources and tool extensions; cf. Figure 3). This mechanism is highly .exible and allows 
the de.nition of new PLiB content at any time without sacri.cing backward compatibility. In addition 
to the content-speci.c data provided by a PLiB di.erent stakeholders usually demand a customized user 
interface containing template-speci.c views. PLiBs are used to deploy additional features and functionality 
to the product derivation tool Con.gurationWizard in the DO-PLER tool suite [17]. The Eclipse concept 
of views and perspectives provides the mechanism for o.ering a PLiB­and role-speci.c interface. Each 
PLiB template can de.ne one or more perspectives o.ering di.erent sets of views. Per­spectives are directly 
mapped to roles so that for example a role developer has a di.erent set of views than a role sales person. 
Views are loaded dynamically in Con.gurationWiz­ard, depending on the role s rights and responsibilities 
with regard to the actual product line, i. e., users in di.erent roles are responsible for di.erent tasks 
containing di.erent deci­sions and only want or can see particular views. In the .rst phase of implementation 
our PLiB approach we have set a strong focus on realizing the component-based approach as well as the 
distribution and deployment of mod­els, model-related content and tool extensions. So far we have been 
developing 6 PLiB templates for industrial prod­uct lines. Various extensions have been developed to 
adapt the original functionality of the tool suite for speci.c require­ments of the di.erent stakeholders 
at our industry partners. Each of the PLiBs can be deployed separately and plugged into already shipped 
PLE tool suite instances to make it working for their speci.c product lines and requirements.  6. RELATED 
WORK We structure our discussion of selected related work into the areas of .exible software engineering 
tools, multi product lines, and product con.guration in multi PL settings: 6.1 Flexible software engineering 
tools Many software engineering tools have features for cus­tomization (e. g. changing the user interface 
using concepts like con.guration parameters), extensibility by adding ad­ditional plug-ins, or generating 
domain-speci.c tools using meta-tool concepts [27, 13, 10, 7]. For instance, FeatureIDE [14] is a generalized 
and language-independent framework that can easily be extended by PL tool developers with new variability 
modeling languages or composition tools. Our PLiB approach uses these existing variability mechanisms 
but provides an approach that enables tool developers to deal with .exibility in multi PLs. 6.2 Multi 
PLs Heterogeneous systems like mini mills are developed by multiple sub-teams with di.erent goals and 
time scales which often also use heterogeneous technologies. Thus, one model for the overall system cannot 
be de.ned in practice [26]. In their research Bosch [2] addresses the problem of the increasing number 
and complexity of dependencies among components in software product lines. He proposes compo­sitional 
product lines where teams are acting autonomously. The teams announce the content of their next release 
them­selves and release frequently. This reduces the dependencies among teams and central coordination 
e.ort which in turn leads to shorter release cycles. Abele et al. [1] support man­aging of several related 
product lines through multi-level feature modeling. The compositional variability framework (CVM) supports 
de.nition of reference feature models act­ing as a template and as a guideline for the models referring 
to the reference model by de.ning a default set of features. Rosenm¨ uller and Siegmund [22] are composing 
a multi prod­uct line of several interdependent smaller product lines. Sim­ilar to our approach they 
use product line instances which are created from a product line. Constraints can be de.ned at domain 
level, instance level, as well as between domain and instance level. They introduce a composition model 
which describes the dependencies among sub product lines with a uses relation. The composition model 
enables valid con.gurations of interdependent product lines, e. g., by auto­matically selecting required 
features based on the prede.ned constraints. Reducing complexity also can be achieved by decomposing 
a large product line model into smaller model fragments as presented by Dhungana et al. [5]. The product 
line is then organized as a set of interrelated model frag­ments which de.ne the variability of parts 
of the system. The decomposed model fragments can be merged into a sin­gle, integrated product line model. 
However, although the solution allows splitting a complex product line into smaller parts there is no 
support for structuring a system-of-systems architecture into multiple product lines.  6.3 Product con.guration 
Several authors have been working on support for product con.guration in system-of-systems and multi 
PL scenarios. For example, Elsner et al. [6] ensures consistent con.gura­tion across product line and 
.le type boundaries by convert­ing meta-models of the di.erent product lines into a common meta-model 
format (Eclipse EMF Ecore). Their framework ensures a consistent con.guration of a product based on the 
constraints of the product line. Hence, it provides real-time constraint checking in product con.guration 
based on the constraints de.ned by domain experts for the di.erent sub product lines. For each con.guration 
.le type a speci.c con­verter has to be implemented. In practice, di.erent teams eliminate product line 
variability in di.erent stages. Czar­necki et al. [3] thus proposed staged con.guration using feature 
models where feature models are specialized step­wise. In each stage, more variability becomes resolved 
and locked for later stages. Staged con.guration is important for software supply chains based on product 
lines but may also be required within one organization. The staged con.g­uration process enables stepwise 
con.guration by di.erent teams and stakeholders in the product derivation. Hubaux et al. [12] propose 
feature con.guration work.ows (de.ned in a work.ow language) as a new formalism for supporting con.guration 
of large-scale systems based on feature mod­els. PLiBs also support con.guring large-scale product lines. 
Each PLiB can be con.gured separately which eases dis­tributed con.guration processes [20].   7. CONCLUSIONS 
AND FUTURE WORK Our PLiB approach assists product line engineers and tool developers in dealing with 
the diversity of PLE tool require­ments in large and heterogeneous systems. In multi product lines the 
PLiB approach enables the handling of subsystem­speci.c requirements and decreases complexity by decom­posing 
the overall system into smaller sub product lines. In particular, PLiBs harmonize the use of existing 
tool vari­ability mechanisms by de.ning a common interface for di­verse tool extensions such as models, 
organizational policies, views, generators, etc. We partly validated our approach by developing several 
PLiB templates in the domain of mini mills. The feedback of our industry partners showed the acceptance 
of this concept and therefore engineers of our in­dustry partners are currently developing further PLiB 
tem­plates. We expect 20+ di.erent templates within the next year which will allow us to validate and 
re.ne our initial approach on a larger scale. However, there are still open issues. Despite the provided 
mechanisms we faced di.culties when separating model­based content from additional PLiB-related content. 
For ex­ample roles and users are de.ned in project-speci.c (deriva­tion) models although it might be 
necessary to reuse the same roles or users in di.erent product lines and therefore de.ne them as part 
of one or more PLiBs. This means that there cannot always be a strict separation between model­speci.c 
content and additional implementation-speci.c con­tent. In our future work, we will focus on re.ning 
our PLiB approach. More speci.cally, we will re.ne our current PLiB developer support and will provide 
better support for man­aging PLiB dependencies. Our work will be based on the DecisionBoard concept facilitating 
the distributed con.gu­ration of subsystems in multi PLs [20]. We will also develop further generators 
to test the .exibility of our approach. 8. ACKNOWLEDGMENTS This work has been supported by the Christian 
Doppler Forschungsgesellschaft, Austria, Siemens VAI Metals Tech­nologies and Siemens Corporate Technology. 
We thank Chris­tian H¨ aubl, Martin Lehofer, Daniela Lettner, Cornelia Mies­bauer, and Christa Schwanninger 
for their contributions to this research.  9. REFERENCES [1] A. Abele, R. Johansson, H. L¨ onn, Y. Papadopoulos, 
M.-O. Reiser, D. Servat, M. T¨ orngren, and M. Weber. The CVM framework -a prototype tool for compositional 
variability management. In Proceedings of the 4th International Workshop on Variability Modelling of 
Software-intensive Systems (VaMoS 2010), pages 101 105, Linz, Austria, 2010. ICB-Research Report No. 
37, University of Duisburg Essen. [2] J. Bosch. Toward compositional software product lines. IEEE Software, 
27:29 34, 2010. [3] K. Czarnecki, S. Helsen, and U. Eisenecker. Staged con.guration using feature models. 
In Proceedings of the 3rd International Software Product Line Conference (SPLC 2004), pages 266 283, 
Boston, Massachusetts, 2004. Springer. [4] D. Dhungana, P. Gr¨unbacher, and R. Rabiser. The DOPLER meta-tool 
for decision-oriented variability modeling: A multiple case study. Automated Software Engineering, 2010. 
to appear. [5] D. Dhungana, P. Gr¨unbacher, R. Rabiser, and T. Neumayer. Structuring the modeling space 
and supporting evolution in software product line engineering. The Journal of Systems and Software, 83:1108 
1122, 2010. [6] C. Elsner, P. Ulbrich, D. Lohmann, and W. Schr¨oder-Preikschat. Consistent product line 
con.guration across .le type and product line boundaries. In Proceedings of the 14th International Software 
Product Line Conference (SPLC 2010), pages 181 195, Jeju Island, South Korea, 2010. Springer. [7] C. 
Fritsch, A. Lehn, and T. Strohm. Evaluating variability implementation mechanisms. In 2nd International 
Workshop on Product Line Engineering, pages 59 64, Seattle, USA, 2002. Fraunhofer IESE TR 056.02/E. [8] 
H. Gomaa. Designing Software Product Lines with UML. Addison-Wesley, 2005. [9] P. Gr¨ unbacher, R. Rabiser, 
and D. Dhungana. Product line tools are product lines too: Lessons learned from developing a tool suite. 
In Proceedings of the 23rd IEEE/ACM International Conference on Automated Software Engineering, pages 
351 354, L Aquila, Italy, 2008. IEEE/ACM. [10] P. Gr¨unbacher, R. Rabiser, D. Dhungana, and M. Lehofer. 
Model-based customization and deployment of eclipse-based tools: Industrial experiences. In Proceedings 
of the 24th IEEE/ACM International Conference on Automated Software Engineering (ASE 2009), pages 247 
256, Auckland, New Zealand, 2009. IEEE/ACM. [11] C. L. G. Hall. Steel Phoenix: The Fall and Rise of the 
U.S. Steel Industry. Palgrave Macmillan, 1st edition, 1997. [12] A. Hubaux, A. Classen, and P. Heymans. 
Formal modelling of feature con.guration work.ows. In Proc. of the 13th International Software Product 
Line Conference (SPLC 2009), volume 446 of International Conference Proceeding Series, pages 221 230, 
San Francisco, CA, USA, 2009. CarnegieMellon University. [13] C. W. Krueger. New methods in software 
product line development. In Proceedings of the 10th International Software Product Line Conference (SPLC 
06), Baltimore, Maryland, 2006.  [14] C. K¨um, G. Saake, J. Feigenspan, astner, T. Th¨ T. Leich, F. 
Wielgorz, and S. Apel. Featureide: Tool framework for feature-oriented software development. In Proceedings 
of the 31th International Conference on Software Engineering (ICSE), pages 611 614. IEEE CS, May 2009. 
[15] J. McA.er, J. Lemieux, and C. Aniszczyk. Eclipse Rich Client Platform: Designing, Coding, and Packaging 
Java Applications. Addison-Wesley, 2nd edition, 2010. [16] K. Pohl, G. B¨ockle, and F. van der Linden. 
Software Product Line Engineering: Foundations, Principles, and Techniques. Springer, 2005. [17] R. Rabiser, 
D. Dhungana, W. Heider, and P. Gr¨ unbacher. Flexibility and end-user support in model-based product 
line tools. In Proc. of the 35th EUROMICRO Converence on Software Engineering and Advanced Applications 
(SEAA), pages 508 5811, Patras, Greece, 2009. IEEE CS. [18] R. Rabiser, P. Gr¨unbacher, and D. Dhungana. 
Supporting product derivation by adapting and augmenting variability models. In Proceedings of the 11th 
International Software Product Line Conference (SPLC 2007), pages 141 150, Kyoto, Japan, 2007. IEEE CS. 
[19] R. Rabiser, P. Gr¨unbacher, and D. Dhungana. Requirements for product derivation support: Results 
from a systematic literature review and an expert survey. Information and Software Technology, 52:324 
346, 2010. [20] R. Rabiser, P. Gr¨unbacher, and G. Holl. Improving awareness during product derivation 
in multi-user multi product line environments. In Proc. of the 1st International Workshop on Automated 
Con.guration and Tailoring of Applications (ACoTA 2010), in conjunction with 25th IEEE/ACM International 
Conference on Automated Software Engineering (ASE 10), pages 1 5, Antwerp, Belgium, September 20-24 2010. 
[21] R. Rabiser, W. Heider, C. Elsner, M. Lehofer, P. Gr¨ unbacher, and C. Schwanninger. A .exible approach 
for generating product-speci.c documents in product lines. In Proceedings of the 14th International Software 
Product Line Conference, pages 47 61, Jeju Island, South Korea, 2010. Springer-Verlag Berlin Heidelberg. 
[22] M. Rosenm¨uller and N. Siegmund. Automating the con.guration of multi software product lines. In 
Proceedings of the 4th International Workshop on Variability Modelling of Software-intensive Systems 
(VaMoS 2010), pages 123 130, Linz, Austria, 2010. ICB-Research Report No. 37, University of Duisburg 
Essen. [23] K. Schmid and I. John. A customizable approach to full-life cycle variability management. 
Journal of the Science of Computer Programming, Special Issue on Variability Management, 53:259 284, 
2004. [24] C. Szyperski, D. Gruntz, and S. Murer. Component Software. ACM Press, 2nd edition, 2002. [25] 
F. van der Linden, K. Schmid, and E. Rommes. Software Product Lines in Action -The Best Industrial Practice 
in Product Line Engineering. Springer, 2007. [26] R. van Ommering. Building product populations with 
software components. In Proceedings of the 24th International Conference on Software Engineering (ICSE 
02), pages 255 265. ACM, 2002. [27] N. Zhu, J. Grundy, and J. Hosking. Pounamu: A meta-tool for exploratory 
domain-speci.c visual language tool development. Journal of Systems and Software, 80:1390 1407, 2007. 
   
			