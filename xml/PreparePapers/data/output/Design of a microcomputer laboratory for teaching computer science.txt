
 Desiun of a MicrocomDuter Laboratory for Teachinu Computer Science Alfred C. Weaver Department of Applied 
Mathematics and Computer Science University of Virginia Charlottesville, Virginia Abstract On the 
premise that many of the fundamental concepts of computer science can be better taught in a hands-on, 
dedicated computing environment (i.e., a microcomputer), as opposed to a large multi-purpose system in 
which the student is insulated from the machine by multiple layers of operating system software, we have 
developed a microcomputer-based lecture/lab course to teach CPU organization, digital computer architecture, 
and assembly language programming as a third undergraduate course in computer science By beginning with 
simple machine organizations and simple assembly languages, and later on making a transition toward more 
complex architectures and languages, the transfer of knowledge and experience is positive at every step. 
The same laboratory also supports a graduate course in microcomputer systems design which teaches hardware 
technology, component specification, operating system design, hardware/software tradeoffs, and practical 
applications such as process control. This paper outlines the motivation and justification for the project, 
and then discusses the actual design of these courses and their supporting laboratory. This project 
is supported in part by two grants from the National Science Foundation: SER-7915929 for the acquisition 
of the microcomputer equipment and SER- 8000802 for the development of the undergraduate course material. 
 Keywords: microcomputers, computer systems design laboratory Permission to copy without fee all or 
part of this material is granted provided that the copies are not made or distributed for direct commercial 
 advantage, the ACM copyright notice and the title of the publication and its date appear, and notice 
 is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, 
or to republish, requires a fee and/or specific permission. i'~81 ACM 0-89791-036-2/81/0200/0132 $00.75 
 Proiect Need The existence of microprocessors and microcomputers is creating a revolution among computer 
scientists and engineers as they seek to exploit the myriad applications of these inexpensive, versatile, 
programmable, miniaturized computing devices. The impact of this technology is now being felt in the 
computer science classroom since microcomputer systems will almost certainly become a standard instrument 
of computer science instruction in the next few years. Large computing systems (e.g., IBM 370, CYBER) 
are designed and configured to optimize the throughput of computing tasks in the hope of satisfying a 
maximum number of users. The price one pays for this optimization is that the computing hardware and 
software systems are physically removed from and inaccessible to the user. While this situation represents 
a reasonable trade-off for a production programming environment, it is unreasonable as a teaching environment 
for computer science students (as opposed to programmers) who should be concerned with the internal architecture 
and configuration of both the hardware and software. On the hardware side, large machines provide no 
mechanism for testing alternative, experimental organizational arrangements of the computer's internal 
units. On the software sidle, the operating system of large machines can not be altered experimentally 
if the machine is to be shared by other users. For students of computer science at the University of 
Virginia, we concluded that a deficiency existed in the lack of stand-alone computer systems which could 
be dedicated to their users instead of shared with the University at large. Although basic hardware concepts 
(e.g., system timing, processor and memory organization, serial and parallel input/output, synchronous 
and asynchronous communication, stacks, interrupts) were taught in existing courses, we lacked the facilities 
to adequately reinforce that discussion with 132 practical hands-on experience. The equipment necessary 
to teach such concepts need not be large and expensive--indeed, a microcomputer can teach fundamental 
computer science concepts as well as, and in some cases better than, a large (invisible) computer which 
is isolated from the user by multiple layers of system software. Thus we developed a microcomputer laboratory, 
composed of several identical "teaching stations," which would allow students to test, modify, and experiment 
with both hardware and software without jeopardizing the integrity or throughput of the University's 
main computing facility. Project Objectives The natural evolution of computer science technology has 
produced large centralized machines with extremely fast execution speeds, large central memories, and 
elaborate mul tiprogramming capabilities. Unfortunately, this progress has hindered, rather than helped, 
the undergraduate who seeks an introduction to computer architecture and assembly language programming. 
The complexities of a large machine's hardware actually obscure the architectural issues which are of 
interest to the beginning student; likewise, the very bulk of the operating system support software obfuscates 
the fundamental concepts and techniques of assembly language programming. In our lab we have, in a sense, 
returned to a simpler era, reminiscent of the first minicomputer systems, when each student had total 
control of the machine for the duration of his/her program. While operating system software (e.g., assemblers, 
loaders, compilers, file systems) continues to be available to support the programming effort, it does 
not obscure the underlying hardware as do the multiple layers of software inherent in a large multiprogrammed 
computer. The widespread availability of inexpensive microcomputer systems as a teaching tool forces 
us to reevaluate our current teaching methodology. Basic concepts, such as CPU organization, internal 
computer architecture, assembly language programming, stack manipulation, recursion, subroutine linkage 
and parameter passing, interrupt handling, input/output interfacing, and real-time operating systems, 
are very difficult to teach on a maxi-machine where the very concept itself is clouded by the system 
software which protects the machine from the user. Yet each of these concepts is easy to teach in a microcomputer 
environment in which the student is not isolated from the hardware. As an example of the difficulties 
encountered when teaching a simple concept in a complex environment, consider only the problem of trying 
to teach assembly language programming. For many years we have taught the assembly language of our large 
centralized machine because it was the primary computing resource. Invariably we found that beginning 
assembly language programmers could not begin to master the full instruction set of a machine the size 
of an IBM 370 or CYBER 172, so we immediately selected a functional subset. Next we eliminated those 
privileged instructions executable only by the supervisor because this was a multiprogrammed environment 
and we could not afford to jeopardize the whole system. Then, because a multiprogrammed system must share 
and schedule its peripherals, we eliminated all instructions which directly control I/O and replaced 
them with system subroutine calls. We pushed quickly past the floating point operations because there 
was not much time left in the semester and we had yet to cover subroutine linkage, parameter passing, 
macros, and conditional assembly. And finally, we discussed real- time interrupts, but could not assign 
an actual exercise because non-systems programmers can not use these protected features. This situation 
is neither desirable nor necessary since a good dedicated microcomputer system permits hands-on experience 
with all of the above concepts ! For purposes of teaching computer science, it is not the absolute number 
of CPU instructions available which is important, but rather the CPU's architectural style and the diversity 
of its addressing modes and I/O operations. While older microprocessors (e.g., 8-bit machines such as 
the Intel 8080 and Zilog Z-80) are not particularly innovative, the new 16-bit architectures, especially 
the Zilog Z-8000 and the Motorola MC68000, show many advanced design features. Both 8-bit and 16-bit 
processors, however, are useful when teaching the basics such as assembly language programming, interrupt 
handling, and I/O protocols. We have found that covering the basics of assembly language programming 
is easier, more effective, and less expensive when done in a microcomputer environment. When it becomes 
necessary to learn the assembly language of a large machine, the transfer of knowledge will at least 
be in the proper direction, from the simple towards the complex. A student who thorouqhly understands 
a micro architecture will gracefully make the transition to a more complex machine. This contrasts with 
the student who never really understood the fundamental issues because he or she was always held at arms-length 
from the hardware by the operating system. ~aboratory Design Our concept is that the laboratory should 
provide a number of identical, interchangeable teaching stations which 133 provide the hardware and 
software support necessary to solve a set of assigned lab problems (just like a chemistry lab). The 
mainframe microcomputer is a North Star Horizon-2 (based on the Zilog Z-80) and is outfitted with a full 
64K read/write memory, two serial and one parallel bi- directional I/O ports, A/D and D/A converter, 
dual minifloppy disks, CRT, access via modem to larger computers such as our HP, VAX, and CYBER, and 
access via our local data network to other microcomputers and their set of shared peripherals. The latter 
is accomplished with our StarNet operating system which allows each machine to have access to a central 
set of shared devices, both logical and physical, such as line printers, document-quality printers, and 
our library of programs and data resident on hard disk. The typical "teaching station" is configured 
and costed as follows: Microcomputer with Z-80 CPU, no memory, dual serial ports, single parallel port, 
dual minifloppy disk drives and controller, assembled (North Star Horizon-2) $2000 64K dynamic RAM (Central 
Da~a) $600 CRT display terminal, RS-232 compatible (e.g. Lear-Siegler ADM-3a, Televideo 920C, Hazeltine 
1410) $700 analog-to-digital and digital-to-analog converter (Cromemco) $200 supplies for each station, 
including PROMs, cables, connectors, floppy disks $i00 investment for typical teaching station hardware 
$3600 Our network operating system, StarNet, is an experimental project and is a convenience for the 
lab users. In this "star" architecture each teaching station is cable-connected to the central node of 
the network; the node shares a 26 megabyte hard disk (Thinker Toys M26, $5000), a line printer (Texas 
Instruments 820, $2000), a correspondence quality printer (NEC Spinwriter, $2500), and various specialty 
equipment needed for any particular experiment (process control transducers and devices). The design 
of the StarNet is discussed in detail in [5] and [6]. The printing of listings accounts for the majority 
of StarNet data traffic; in lieu of the StarNet, one could simply attach the TI 820 printer to a stripped-down 
micro and use that machine primarily as a printing station. Hardware reliability has been good but not 
perfect. It requires constant attention to keep the lab machines in running order, and preventive maintenance 
 (like cleaning the disk heads) is imperative. The lab is designed to keep eight teaching stations 
on-line at all times, and this is accomplished by owning enough equipment for ten stations. When a 
station malfunctions, its offending component is identified and replaced with a spare. Unless a repair 
is relatively simple, no attempt is made to correct it on-site. Repairs are usually referred to a 
local electronics repair facility, and seriously damaged equipment is returned to the manufacturer. 
 We also provide the basic set of resident software necessary to make a student productive. This includes 
the CP/M operating system, WordStar text editor, MACRO- 80 assembler, LINK-80 relocating linking loader, 
and dynamic debugging tool (DDT) for simulating program execution. The cost of software is highly variable, 
but the productivity of the lab is highly dependent upon its quality. We have tried many versions of 
commercial software and highly recommend the CP/M system for the underlying file structure. Like the 
S-100 bus, CP/M will become a de facto standard for the next few years. The Underqraduate Course The 
undergraduate course is the third required course for a computer science major. Called "Computer Systems 
Laboratory," this course carries two semester hours credit and meets for two lecture sessions weekly; 
lab time is arranged by each student to fit his/her own schedule. The lab setting has been found to ]provide 
significant motivation toward gaining a familiarity with basic hardware and software principles; this 
most likely results from seeing a subject area discussed in lecture and then having an immediate application 
of that knowledge required in a lab assignment. For the undergraduate course there are seven main topics, 
including: (i) Boolean algebra, digital logic, and number representation;  (2) basic computer organization 
and architecture;  (3) assembly language programming;  (4) programming techniques and data structures; 
 (5) synchronous and asynchronous, serial and parallel, polling-driven and interrupt-driven input/output; 
 (6) priority interrupts and reentrant coding;   134 (7) the use of the basic operating system support 
software (text editor, assembler, loader, simulator, and file system). As these subjects are covered 
in lecture, a series of lab exercises is simultaneously pursued. These vary from semester to semester, 
but a typical group might include: (i) Boolean manipulation of data read from and written to parallel 
data ports (reading switches and lighting LEDs); (2) programming a variable frequency  software clock 
to emit a digital waveform subsequently viewed on an oscilloscope; (3) multiple precision arithmetic, 
including integer addition, subtraction, multiplication, and division and a discussion of floating-point 
formats;  (4) serial communications, requiring the student to directly manipulate the control and status 
registers of a UART;  (5) polling vs. interrupt-driven communications, requiring the student to successfully 
overlap computation and communication for both input and output operations;  (6) recursive programming 
(such as tree traversal) and reentrant programming (to create useful utility routines);  (7) a longer 
wrap-up assignment which combines many of the previous experiences into a single, fairly complex program 
(e.g., creating an interactive video game or performing some digital signal analysis).  The primary 
advantage of the lab-based undergraduate course over its lecture-based predecessor is, of course, its 
interactive nature. As with any engineering lab, there is a special feeling of accomplishment which accompanies 
an experiment successfully completed. This feeling is further augmented by the positive reinforcement 
of actually seeing a program work. It has been our observation that assignments which require the creation 
of a visual display (from simple waveforms on an oscilloscope to more sophisticated computer graphics) 
produce the most enthusiasm. While the lab format provides a high- quality pedagogical environment, 
it does have the drawback of being an extremely time-intensive investment on the part of the lab designer 
and course instructor. The availability of hardware is critically important, but hardly sufficient; extensive 
supervision by the instructor or a knowledgeable teaching assistant is essential for student productivity. 
A student working without supervision can easily utilize two hours of lab time (and scarce machine time!) 
to solve a problem which should take ten minutes with proper assistance. The Graduate Course  The graduate 
course, entitled "Microcomputer Systems Design," is designed for first year graduate computer scientists 
and other engineers who expect to work with microprocessor-based systems. Although structured similarly 
to its undergraduate prerequisite as described above, this course covers more advanced topics specifically 
related to the design and use of microcomputer systems for solving engineering problems. A lecture outline 
for this one -~ semester course would show the following topics: (i) history of microelectronics;  
(2) internal organization of typical 8-bit and 16-bit CPUs;  (3) bus structure, memories, and peripheral 
chips necessary to construct a complete processor;  (4) programming techniques; concepts of time-and 
space-efficient coding; hardware/software trade-offs;  (5) comparison of architectural differences in 
typical 8-bit CPUs (e.g., Intel 8080, Zilog Z-80, MOS Technology 6502, Motorola 6800, Fairchild F-8); 
 (6) survey of 16-bit processor architecture (e.g., Texas Instruments 9900, DEC LSI-II, Intel 8086, 
Zilog Z-8000, Motorola MC68000, National Semiconductor 16000) ;  (7) microprogramming; comparison of 
bit-sliced microprogrammable microprocessor families (e.g., Intel 3000, AMD 2900);  (8) role of high-level 
languages in system development (e.g., PL/M, PASCAL, FORTH); comparison of programming effort between 
assembly languages and high-level languages;  (9) cost estimation (in both time and dollars) for production 
hardware and software;  (i0) in-depth examination of a typical  application project such as process 
control. AS with the undergraduate lab, a series of required lab exercises helps demonstrate the principles 
involved. Typical assignments have included: (i) familiarization assignment to exercise the text editor, 
assembler, and loader;  (2) w rite m ul tipl e preci sion multiplication and division algorithms using 
shift-and-add, shift-and-subtract techniques, then use same to implement a prime number tester;  (3) 
program some elementary digital signal analysis to read a telephone's output waveform and reconstruct 
the number dialed;  (4) build the nucleus of a time- sharing operating system which implements a round-robin 
scheduler using an external hardware clock interrupt for timing, and use same to implement a three-user, 
time- shared CPU;  (5) repeat lab 2 above in PASCAL and generate comparisons of programming time, debugging 
time, execution time, reliability, and ease of maintenance between PASCAL and assembly language;  (6) 
using proportional/integral/ differential process control algorithms developed in lecture, implement 
in PASCAL a control system for a continuous process and calculate the system response time.   Conclusions 
The undergraduate and graduate courses have each been taught once using the microcomputer equipment and 
the course outlines provided previously. For both courses, the course content was judged "exceptionally 
good" overall by anonymous student evaluations, although persons Who regularly attempted all the assigned 
readings and projects rightfully complained of overwork. That complaint, however, was generally balanced 
by a comment such as "lecture material would not have been as valuable without supporting lab experience." 
 No textbook was used since no one book contained all the desired subject matter; instead, a large number 
of handouts was distributed throughout the semester. While the use of handouts and manufacturer's literature 
is necessary to supplement weakly documented areas, one or two carefully selected textbooks would have 
significantly eased the burden of preparation. Several suitable new textbooks are now available and are 
listed in the bibliography. The use of a textbook is highly recommended to substantially reduce the amount 
of instructor time required for handout generation. It is too soon to judge quantitatively the effect 
of a lab-based vs. lecture-based course. Our experience thus far supports our premise that the undergraduate 
course is certainly more enjoyable, and probably more educationally effective, than its lecture-based 
predecessor; an actual performance study of students taught each way has yet to be completed. Our future 
expansions for 1981-82 will proceed along the hardware and software fronts simultaneously. On the hardware 
side, we are building an experimental Ethernet-like network which may replace our more conventional StarNet. 
On the software side, we are evaluating a steady stream of new commercial software such as PASCAL, PL/I, 
C, and FORTRAN 77. We suspect that networks of microprocessors and the operating system software which 
drives them will be a most promising area for research.  BIBLIOGRAPHY  [i] Artwick, B., Microcomputer 
Interfacing, Prentice-Hall, 1980. [2] Boyce, J., Microprocessor and Microcomputer Basics, Prentice-Hall, 
1979. [3] Camp, Smay, and Triska, Microcomputer Systems Principles, Matrix, 1978. [4] Camp, Smay, and 
Triska, Microprocessor Systems Engineering, Matrix, 1979. [5] Carson, S., "The StarNet Microcomputer 
Network," M.S. thesis, Dept. of Applied Math and Computer Science, University of Virginia, 1980. [6] 
Carson and Weaver, "StarNet: a Distributed Network for Resource Sharing and Parallel Processing with 
Microcomputers," technical report number 80-7, Dept. of Applied Math and Computer Science, University 
of Virginia, 1980. [7] Colin, A., Pros rammin~ for Microprocessors, Newnes-Butterworths (London), 1979. 
 ['8] Dollhoff, T., 16-bit Microprocessor Architectures, Reston, 1979. [9] Doty, K., Fundamentals of 
Microcomputer Architecture, Matrix, 1979. [i0] Fohl, M., A MiCroprocessor ~O~r~, Petrocelli, 1978. 
[ii] Garland, H., Introduction tO _Microprocessor Systems Design, McGraw-Hill, 1979. [12] Gibson and 
Liu, ~i__qcroco~rS for Engineers and Scientists, Prentice-Hall, 1980. [13] Givone and Roesser, Mi__qcroprocesso~ 
Microcom~ut~rsl ~n ~ntroduction, McGraw- Hill, 1979. [14] Greenfield, S., ~h~ Architectur~ O~ Microcomputers, 
Winthrop, 1980. [15] Hilburn and Julich, ~iCX~C~t~r~ Microprocessors, Prentice-Hall, 1976. [16] Johnson, 
Hilburn and Julich, D~i__ttg~ ¢%rcuits and Microcomputers, Prentice-Hall, 1979. [17] Kraft and TOy, 
M~_~i~i_~cro__qcom~r Hardware Design, Prentice-Hall, 1979. [18] Klingman, E., ~i__~cr~ro__~c~s~r syst~ 
Des%gn, Prentice-Hall, 1977. [1 9 ] L e v e n t h a i, L., Introduction tO _M~croprocessors, Prentice-Hall, 
1978. [20] McGlynn, D., ~i~X~PrOC~OXS, John Wiley, 1976. [21] Osbourne, A., IDtroduction to Miorocomp~t~r~, 
Osbourne and Associates, 1976. [22] Peatman, J., Microcomputer-based Design, McGraw-Hill, 1977. [23] 
Ramirez and Weiss, MiOroRr~c~S~inS Fundamentals, McGraw-Hill, 1980. [24] Rony, [.arson, and Titus, ~h~ 
Busbook (a series), E&#38;L Instruments, 1975. [25] Short, K., Microprocessors ProQrammed Loqic, Prentice-Hall, 
1981. and [26] Sloan, M., introduction to M~crocomputers and Micro~rocesso£s, Addison-Wesley, 1980. 
 [27] Soucek, B., MiCrO~xocessors and Microcomputers, John Wiley, 1976. [28] Streitmatter and Fiore, 
M~croprocessor Theory and Applications, Reston, 1979. [29] Veronis, A., ~icxoproc~Ors: Des isn and ADDlications, 
Reston, 1978. [30] Webster and Simpson, ~_~ftware D~_g~ fox ~iCX~roc~or~, Texas Instruments, 1976. 
137  
			