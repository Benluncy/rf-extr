
 Approximating Biconneetivity in Parallel Ka Wong Chong and Tak Wah Lam Department of Computer Science 
University of Hong Kong Hong Kong Email: {kwchong, twlam}@csd.hku.hk Abstract Consider the following 
NP-hard problems: Given a graph G, find the minimum 2-edge connected and 2-vertex connected subgraphs 
spanning all vertices of G. The past few years have produced exciting sequential algorithms for approximating 
such min­imum subgraphs [6, 7]. The approximation fac­tors are improved from 2 down to ~ and ~ respec­tively. 
Yet the techniques involved are all based on augmenting depth-first-search trees and no similar progress 
has been carried to the parallel context. This paper presents NC algorithms to achieve ap­proximation 
factors of ~ + c and ~ + E respectively without computing depth-first-search trees. 1 Introduction Let 
G = (V, E) be any undirected graph. G is said to be 2-edge connected (2-vertex connected) if G is still 
connected after any one of the edges (vertices) has been removed. The minimum 2-edge connected (2-vertex 
connected) subgraph of G is a spanning subgraph H = (V, EH) of G such that H is 2-edge connected (2-vertex 
connected) and /EH / is minimum among all 2-edge connected (2-vertex connected) spanning subgraphs of 
G. The problems of finding the minimum 2-edge connected and 2-vertex connected subgra~hs a,riw Permission 
to make digital/herd copies of all or p:trt of this material with­ out fee is granted provid.d that the 
copies :Irc not mzcie or dislrihuted for profit or commercial adv:intage, the ACM copyright/server notice, 
the title of the publictilion aoci its d:lte appcor, :lnd notice is given that copyright is by permission 
uf the Associ:ili(]n fnr Computing Mlchinery Inc. (ACM). To copy otherwise, tn republish ,to post on 
servers or to redistribute to lists, requires spmilic permission :md/or fee, SPAA 95 Santa Barlxm CA 
USA 1995 ACM O-8979 1-717-0 /95/07 .S3.50 in designing communication networks that can tol­erate a link 
or site failure. They are known to be NP-hard. Nevertheless, there are a number of sequential algorithms 
that can approximate such minimum subgraphs. For inst ante, a 2-edge con­nected subgraph can be constructed 
as follows: Find a depth-first-search tree T of G, and for each vertex pick the highest back edge. T 
and these back edges together form a 2-edge connected sub­graph with at most 2n 2 edges, where n is 
the number of vertices of G. Any 2-edge connected or 2-vertex connected subgraph has at least n edges. 
This simple algorithm attains an approximation factor of (2n 2)/n < 2. Khuller and Vishkin [6] are the 
first to give algorithms that can find 2­edge connected and 2-vertex connected subgraphs with approximation 
factors of less than 2 (more precisely, ~ and ~ respectively). Garg et d. [7] fur­ther improved the approximation 
factors to ~ and j. Interestingly, these algorithms may still find subgraphs with nearly 2n edges in 
some cases, but there are some elegant lower bound results guar­anteeing that whenever these algorithms 
report a lot of edges, the minimum subgraphs must contain many edges as well.  In the parallel context, 
the work of Cheriyan and Thurimella [1] implies an NC algorithm for finding a 2-edge connected or 2-vertex 
connected subgraph wit h an approximation factor of 2. On the other hand, Kelsen and Ramachandran [5] 
gave parallel algorithms for finding some minimal 2-edge con­nected and 2-vertex connected subgraphs, 
which also approximate the minimum ones to a factor of 2. No parallel algorithm is known to achieve bet 
t er approximation factors. The sequential al­gorithms in [6, 7] do not admit efficient parallel implementation 
due to their sequential nature. In particular, they are all based on augmenting the depth-first-search 
tree, for which no deterministic NC algorithm is known [4, 2]. The parallel algo­rithms in [1, 5] actually 
use an arbitrary spanning tree of G as their starting point. When the span­ning tree used is a star (i.e., 
of depth one), it seems to be impossible to obtain subgraphs with less than 2n 2 edges even though the 
minimum ones may have only n edges, It is interesting to ex­plore whether an approximation factor of 
less than 2 can be achieved without using depth-first-search trees. In this paper, we give NC algorithms 
which can find 2-edge connected and 2-vertex connected sub­graphs with approximation factors of ~ + t 
and ~ + c respectively, where c > 0 is any constant. The most innovative idea behind our algorithms is 
using a spanning tree which contains a suffi­ciently large matching of G. Such spanning tree can be constructed 
in NC and in most cases can be made 2-edge connected or 2-vertex connected with­out adding too many extra 
edges. For instance, if G has a maximum matching consisting of x edges, we can find a 2-edge connected 
subgraph with only 2n z 2 edges. When G contains only a small maximum matching, the subgraph may however 
contain as many as 2n edges. Fortunately, we can prove a lower bound that the minimum 2-edge con­nected 
and 2-vertex connected subgraphs contain at least 2n 2X 1 edges. Therefore, the mini­mum subgraphs 
also contain a lot of edges when the maximum matching is small. The algorithms in this paper are designed 
for the EREW PRAM. Details of the PRAM models can be found in [4, 2]. Definitions 2-edge Connected Components: 
Let H = (V, E) be any connected undirected graph. De­fine an equivalence relation R. as follows: For 
any vertices u, v e V, Ultev if and only if u = v or there is an edge-disjoint cycle in H containing 
u and v. The vertices of H can be partitioned into equivalence classes VI, V2, . 00, Vk. A 2-edge con­nected 
component B; = (Vi, Ei) is a subgraph of H containing all the edges (u, v) where u, v c Vi. Some edges 
in E may not be covered by any 2-edge connected component, each of such edges is called a bridge. It 
is easy to prove that H contains k 2-edge connected components if and only if it has k 1 bridges. 2-vertex 
Connected Components: Define another equivalence relation Rv as follows: For any edges el, ez < E, e1Rve2 
if and only if el = ez or there is a vertex-disjoint cycle in H containing el and e2. Partition the edges 
of H into equivalence classes E:, EL, . . . . E;. For 1< i <1, let V/ denote the set of vertices involved 
in Ef. Each subgraph D; = (Vi, E;) forms a 2-vertex connected com­ponent (or more commonly called a biconnected 
component ) of H. It is possible that some vertices belong to more than one 2-vertex connected com­ ponent, 
and a 2-vertex connected component may contain only one edge.  2 Two-edge Connectivity This section 
deals with the problem of approximat­ing the minimum 2-edge connected subgraph, Sec­tion 2.1 int reduces 
the basic concepts of construct­ing a 2-edge connected subgraph from a spanning tree. Section 2.2 illustrates 
a new approach to im­prove the approximation in parallel, which makes use of a spanning tree containing 
a matching of the input graph. Section 2.3 presents a new lower bound of the size of the minimum subgraph 
in re­spect of the size of the maximum matching of the graph, and gives an NC algorithm approximating 
the minimum subgraph arbitrarily close to a factor of $. 2.1 Spanning Trees Let G = (V, E) be any 2-edge 
connected graph with n vertices and m edges. G contains no bridge and every edge is contained in a cycle. 
Consider an arbitrary spanning tree T of G. An edge e of G is said to be a tree edge if e is in T. A 
non-tree edge c~G Tissaid to cover atree edge eif the cycle in T U{c} contains e. Lemma 1 For each tree 
edge e, there exists a non-tree edge that covers e. em_n+l be the non-tree edges with respect to T. We 
add these edges to T one by one and look for the first ei such that e is still a bridge in TLJ{el, e2, 
000, ei 1} but e is contained in a cycle in T LJ{el, e2, . c, ei}. Since G is 2-edge connected, this 
ei exists. Proofi Let el, ez, ..., Let e = (u, v). Define Tu to be a subtree of T which contains all 
vertices connected to u with­out using the edge e, and define Tv similarly. As e is a bridge in Tu{el, 
e2, . . . , ei-l} but not in TU{el, ez, ---,e,}, e, is between a vertex w in Tti and a vertex z in Tv. 
In regard to T U{ei}, there is a cycle composed of the edge (u, w), the path from w to z in T., the edge 
ei = (z, w), and the path from w to u in Tv. Therefore, e is covered by e,. o As a consequence of Lemma 
1, we can construct a 2-edge connected subgraph with no more than 2n 2 edges by adding to T a covering 
edge for ev­ery tree edge. This yields an approximation factor of 2. The covering edges can be found 
indepen­dently. The following is an NC algorithm for find­ing a 2-edge connected subgraph: First, compute 
a spanning tree T of G and root T at an arbitrary vertex. Second, for each tree edge (v, p(v)), where 
p(v) denote the parent of v in T, find the covering edge (a, b) c E such that a is in the subtree of 
v, and the lowest common ancestor of a and b is p(v) or an ancestor of p(v), To achieve a better approximation, 
we cannot start with an arbitrary spanning tree. In the se­quential context, the depth-first-search tree 
is a very useful building block [6, 7]. There is, however, no known deterministic NC algorithm for finding 
the depth-first-search tree. Below, we give a new scheme in which the spanning tree is required to contain 
all the edges of a matching of G. 2.2 Perfect Matching To illustrate our new approach, we first consider 
the special case in which the input graph G con­tains a perfect matching. If such matching is given in 
advance, a 2-edge connected subgraph with an approximation factor of ~ can be found efficiently in parallel. 
The general case where G may not have a perfect mat thing will be handled in Section 2.3. Consider any 
graph G with a perfect match­ing M. Let T be a spanning tree containing all the edges in M. Such spanning 
tree can be con­structed in parallel by first contracting every pair of matched vertices into a single 
vertex and then using some standard spanning tree algorithms [3]. We root T at an arbitrary vertex and 
classify the vertices of T into two types: for each pair of matched vertices, the parent vertex is of 
type one while the child vertex of type two. To make T 2-edge connected, we add edges to T in two phases. 
In Phase 1, we cover the tree edges which are in ill. Denote H the resultant graph. If H is 2-edge connected, 
it is done. otherwise, Ietl?l,llz, ..., l?k be the 2-edge connected compo­nents of H. H has exactly k 
 1 bridges. Lemma 2 Every Bi has a perfect matching and cent ains at least four vertices, Moreover, Bi 
con­tains at most ~n, 1 edges, where n, is the number of vertices in B;. Proof: For any vertex v in 
Bi, let u be the vertex such that (u, v) 6 ~. The tree edge (u, v) has been covered; u and v must be 
in the same 2­edge connected component (i.e., B;). We can again match v with u inside Bi. Therefore, 
Bi contains a perfect matching which is a subset of Al. For the tree edge (u, v) defined above, its cover­ing 
edge must have an end point w which is distinct from u and v. Note that v, u, and w lie on a com­mon 
cycle, Let z be the vertex matched with w in ill, which is also distinct from u and v. The tree edge 
(w, z) has been covered, and w and z must be on a cycle. We conclude that u, w, and z are all in the 
same 2-edge connected component as v, and Bi contains at least four vertices, If B, has n; vertices, 
it contains n, 1 tree edges of T. Among these edges, exactly ni /2 are edges in M. Since only edges 
in M have been covered, no more than ni /2 non-t ree edges can be found in Bi. Therefore, Bi cent ains 
at most ~n; 1 edges. o The number of edges in H is bounded by ~$=l(~n; 1)+k 1 = ~n 1 edges. In Phase2, 
we make H become 2-edge connected by adding a cov­ering edge for every bridge of H. As each 13i of H 
contains at least four vertices, H has at most n/4 2-edge connected components and at most n/4 1 bridges. 
Phase 2 requires at most n/4 1 covering edges. The resultant 2-edge connected subgraph hasnomore than 
~n 1+ n/4 1=in 2, To further improve the approximation factor, we observe that, for any 2-edge connected 
graph ~ with a perfect matching, there is a 2-edge connected subgraph with no more than $n 2 edges, where 
n is the number of vertices in g (see Lemma 8 in Appendix I). Thus, each Bi above, having a perfect matching, 
contains a 2-edge con­nected subgraph with no more than ~ni 2 edges (i.e., one less than the upper bound 
established in Lemma 2). Before we proceed to Phase 2, we execute an extra step: If any lli contains 
exactly ~ ni 1 edges, we delete one edge ei from it without destroying its 2-edge connectivity. This 
redundant edge ei can be found in parallel: For each edge e E Bi, test in parallel the 2-edge connectivity 
of Bi {e}. The edge e, is the one such that Bi {ei} is 2-edge connected. After removing the redundant 
edge from each Bi, we ensure that every Bi now contains no more than ~ni 2 edges. We proceed to Phase 
2 as be­fore. The final 2-edge connected subgraph contains at most ~~=l(~ni 2) + 2(k 1) = ~n 2 edges. 
The edges required to cover the bridges of H are offset by the removal of the redundant edges at the 
end of Phase 1. 2.3 The Algorithm This section no longer assumes the input graph having a perfect matching. 
We generalize the pre­vious approach to work on a spanning tree con­taining a maximum matching or an 
approximate maximum mat thing. Yet, the smaller the mat th­ing being used, the more edges the resultant 
2-edge connected subgraph contains. For instance, if the graph only has a maximum matching involving 
one edge, our new approach may report a subgraph containing as many as 2n 2 edges. Fortunately, in this 
case, the minimum 2-edge connected sub­graph must also contain a lot of edges. Below, we first show a 
lower bound result that the mini­mum 2-edge connected subgraph contains at least 2n 2x 1 edges, where 
z is the number of edges in the maximum matching. Then, we give an NC al­gorithm achieving an approximation 
factor of ~ + c for any c >0. Lemma 3 If G has a maximum matching with x edges, the minimum 2-edge connected 
subgraph of G cent ains at least 2n 2$ 1 edges. Proof: Define a path-cover of G to be a set of vertex 
disjoint paths {Z l, P2,  , Pk} such that PI U Pz U. 00U pk contains all the vertices of G. The minimum 
path-cover is the one with the small­est number of paths. We prove Lemma 3 by relat­ing first the size 
of a maximum matching to the number of paths in the minimum path-cover of G, then the latter to the number 
of edges in the min­imum 2-edge connected subgraph. Claim: The minimum path-cover of G con­tains at least 
n 2Z paths. Proof: Let {Pl, P2,. c ., Pk} be the minimum path-cover of G and denote IPi I the number 
of vertices on Pi, We construct a matching from these paths as follows: For each path P,, we can mat 
ch [1Pi I/2] pairs of vertices. Each path con­tributes at most one unmatched vertex. There are at least 
(n k)/2 pairs of matched vertices. If k < n 2X, the number of matched pairs is greater than (n (n 
 2x))/2 = x. A contradiction ar­rives. Thus, the minimum path-cover contains at least n 2x paths. o 
Claim: If the minimum path-cover of G con­tains k paths, the minimum 2-edge connected sub­graph of G 
has at least n 1+ k edges. Proofi Let G* be a minimum 2-edge connected subgraph of G and T be a depth-first-search 
tree of G*. Suppose T has 1leaves. Then G* cent ains at least n 1+ 1edges. On the other hand, J ~ k because 
T defines a path-cover of size 1.Thus G* has at least n 1+ k edges. l Lemma 3 follows from the above 
two claims. o We are ready to look at an NC algorithm for ap­proximating the minimum 2-edge connected 
sub­graph. If we assume that a maximum matching of the input G is given, the algorithm can still achieve 
an approximation factor of ~. Yet such assump­tion is not reasonable as there is no known NC algorithm 
for finding a maximum matching [4, 2]. We remedy the algorithm by using an approximate maximum matching 
that can be found in NC [8]. The approximation factor deteriorates slightly to ~+eforanye>O. Below, we 
describe a parallel algorithm to find a 2-edge connected subgraph of G with an approx­imation factor 
of ~. Algorithm Two-edge Connected Subgraph Input: A 2-edge connected graph G with a maxi­ mum matching 
ill Output: A 2-edge connected sub graph G of G with an approximation factor of ~ 1. Construct a spanning 
tree T which contains all the edges in M and root it at an arbitrary vertex. The vertices are classified 
into three types: for each pair of matched vertices, the parent vertex is of type one while the child 
vertex is of type two; vertices which are not matched are of type three. 2. For each vertex v of type 
two, add a non-tree edge which can cover the tree edge (v, p(v)). Let H be the resultant graph. 3. Identify 
the bridges and 2-edge connected components of H. Consider any 2-edge con­nected component Bt that contains 
no vertex of type three. Let ni be the number of ver­tices in B,. (By Lemma 2, ni ~ 4; ~i has a perfect 
matching and contains at most ~n, 1 edges. ) If Bt has exactly ~ n$ 1 edges, remove one edge from Bt 
without destroying its 2-edge connectivity (see Lemma 8 in Appendix I). Let H denote the graph H with 
an edge removed from every such Bi. 4. Cover every bridge of H . Let G be the final 2-edge connected 
subgraph.  Correctness: Let z be the size of the maximum matching h4. There are n 2x vertices of type 
three. Step 2 should add z covering edges but some of them may overlap. Suppose H contains t 2­edge connected 
components B,, , BiQ, . c ., Bit that do not have any vertex of type three. For each Bi,, either the 
covering edges added to Bi, during Step 2 are not all distinct, or one of the edges of B,, will be deleted 
at Step 3. At the end of Step 3, H contains at most n 1 + x t edges. If H contains a total of k ( 
z t) 2-edge connected components, there are exactly k 1 bridges to be covered at Step 4. Claim: k<n 
2Z+t. Proofi The number of 2-edge connected com­ponents containing no type three vertex is t, and the 
number of 2-edge connected components con­taining one or more type three vertex is no more than n 2x. 
o Therefore, Step 4 adds at most n 2X + t 1 covering edges, and the total number of edges in G isnomore 
than n 1+x t+(n 2z+t) 1 = 2n x 2. By Lemma 3, the minimum 2-edge connected subgraph of G contains at 
least 2n 2x 1 edges. The approximation factor is at most ~~~~Z~21 < ~. There is no known deterministic 
NC algorithm for finding the maximum mat thing of G [4, 2]. We replace the maximum matching by an approximate 
maximum mat thing which can be found in NC. Using the parallel algorithm of Fischer et al. [8], we can 
find a matching of size at least (1 l/c)x for any constant c > 1. The approximation factor of our algorithm 
then becomes 2 ;@;j:): 2 < ;+ ~. Let c = ~. As the constant c can be chosen as desired, the approximation 
factor can be rewritten as ~ + efor any constant 6 > 0. Time Complexity: The algorithm requires 0(log3 
n) time using n2+li processors. In fact, the time complexity and processor requirement are dominated 
by that of finding the approximate maximum matching [8]. Any improvement in find­ing the approximate 
maximum matching would improve our algorithm.  3 Two-vertex Connectivity In this section, we devise 
a parallel algorithm for approximating the minimum biconnected (2-vertex connected) subgraph arbitrarily 
close to a factor of 7 z Let G be any biconnected graph with n vertices and m edges. Consider any connected 
spanning subgraph H of G. Define the function b such that b(n) is the number of biconnected components 
of H, Let m be the number of edges in H and el, ez, . . ., em_~J the edges in G H. In Appendix II, we 
will prove the following lemma. Lemma 4 Let F be the set of edges e, such that b(Hu{el, e2, . 0., e~}) 
< b(llu{el,ez,. . .,e;_l}). Then F contains at most b(H) 1edges and adding the edges of F into H can 
produce a biconnected subgraph of G. Note that the set F can be computed in NC and Lemma 4 implies a 
parallel algorithm to biconnect H. In particular, if H is a spanning tree of G (i.e., H has n 1 edges 
and n 1 biconnected compo­nents), we can construct a biconnected subgraph of G containing no more than 
2n 3 edges. Such approach approximates the minimum biconnected subgraph to a factor of 2. To go beyond 
2, we will again use a spanning tree which contains a maximum matching or an approximate maximum matching 
of G. We first show that if G has a perfect matching then an approximation factor of ~ can be achieved. 
The general case where G does not have a perfect mat thing will be handled next. 3.1 Perfect Matching 
Assume that G has a perfect matching M given in advance. Let T be any spanning tree of G which cent ains 
all edges of M. We are going to add edges to T in two phases so that a biconnected subgraph of G with 
at most in edges is obtained at the end. In Phase 1, we add edges to cover all tree edges which are in 
M. Denote H the resultant graph and D1, D2,. ,., Dk the biconnected components of H. Suppose each Di 
contains ni vertices. The vertices of each Di must induce a subtree in T and the number of tree edges 
in Di is exactly nt  1. Note that ~~=l(ni 1) = n 1. Each Di contains at most [ni/2j edges of M and 
hence at most [n, /2] covering edges. If ni is even, Di has a total of at most ~ni 1 edges, otherwise 
~ edges. To ease our discussion, we partition the bicon­nected components Di of H into four categories: 
Let Q2 denote the set of all Di containing only two vertices, Q3 all Di containing three vertices, Q~ 
all Di containing an even number of at least four vertices, and Q: all D, containing an odd number of 
at least five vertices. Obviously, k = IQ21+ IQ31 + IQ; I + IQ;I. There iS alSO a non-trivial relationship 
between IQz I and lQ~[. Proof: Let 1 = [Q2[. As H has 1 bridges, the vertices of H are partitioned into 
1 + 1 2-edge con­nected components 111, B2, . . . . Bl+l. These com­ponents are connected through the 
bridges. By Lemma 2, each B, has a perfect matching; thus Bi has an even number of vertices and an odd 
num­ber of tree edges. Note that each Bi is indeed the union of one or several distinct biconnected compo­nents 
in Q3, Q~, or Q;. Moreover, Bi must contain at least one biconnected component Dij which has an odd number 
of tree edges (otherwise the total number of tree edges in Bi is even and a contra­diction occurs). Such 
Di, has an even number of vertices and is in Q;. Thus 1 + 1< lQ~l. o Before proceeding to Phase 2, we 
derive a tighter upper bound of the number of edges in H. We observe that every Di in Q2 is actually 
a bridge and the number of edges in Di is exactly one (i.e., one less than ~ ni 1). Moreover, the following 
lemma shows that, for each D, in Q:, we can delete an edge, if necessary, from D, so that there are at 
most ~ni 2 edges left, while the biconnectivit y is preserved. Lemma 6 Every Di in Q~ contains a bicon­nected 
subgraph with at most ~ n; 2 edges. Proofi If D, contains less than nz/2 edges of ikf, the lemma is 
trivial because Di has at most ni/2 1 covering edges and a total of at most ~ni 2 edges. When Di has 
exactly ni/2 edges of M, Di con­tains a perfect matching. Consider any depth-first­search tree T of D;. 
Since D; is biconnected, the root r of T has only one child u; both r and u do not have any back edge. 
The algorithm of Garg et al. [7], starting with T, can construct a biconnected subgraph D: for D; with 
at most n; 1 + 1 edges, where 1 is the size of the largest independent set of Di {r, u}. If T is chosen 
in such a way that r and u are matched in respect of M, D; {r, u} contains a prefect mat thing of size 
n;/2 1 and any indepen­dent set of D, {~, u} involves at most n, /2 1 ver­tices. D: thus has at most 
ni 1+ni/2 1 = ~ni 2 edges. o By Lemma 6, for each Di in Q;, if Di contains as many as ~ ni 1 edges, 
we select an edge in par­allel to remove. Afterwards the number of edges remaining in H is bounded by 
l<i<k = ~(n-1) ­   ~(lQ21+ lQil). In Phase 2, we base on Lemma 4 to add at most k 1 edges to biconnect 
H. Now H may contain some redundant edges. Every Di that has exactly three vertices corresponds to a 
cycle of length three in H. The following lemma shows that one of the edges in that cycle can be removed 
from H, while maintaining the biconnectivity. Lemma 7 Let g be any biconnected graph with at least four 
vertices. If ~ contains a cycle of length three, ~ {e} is still bico nnected for some edge e on that 
cycle. Proof: Let z, g, and z be the vertices on the cycle. ~ contains another vertex w which is con­nected 
by an edge to one of them. Without loss of generality, assume (w, ~) s ~. Since L7 is bicon­nected, there 
is a path which connects w and y in ~ x. If this path need not pass through z, then (z, y) is a chord 
of a cycle in ~ which consists of the edges (y, z), (z, z), (z, w), and the path from w to y. Removing 
(z, y) does not affect the biconnec­tivity of ~ [7]. If the path requires to pass through z, we can similarly 
argue that (z, z) is a chord of a cycle and can be removed. o By Lemma 7, we can remove up to IQ31 edges 
from H and obtain a smaller biconnected subgraph G . Note that Phase 2 have effectively added at most 
k 1 \Q31 edges and k 1 IQ31 = IQ21+ IQII + lQ~l 1. G contains at most ;(?Z -1)+ ;(IQ21 + IQ:I) + IQ: 
I -1 edges. In respect of T, each D, in Q~ contains at least three tree edges, each Di in Q; at least 
four tree edges, and each Di in Q z exactly one tree edge. Thus, IQ21+ 31Q~l+ 41Q;I < ~ 1 and ~(lQ2[ 
+ lQil)+lQ;l s Hn-1-lQ:l+lQ21). BY Lemma5? IQ21 < IQII 1. The number of edges in G is then bounded by 
~(n 1)+ ~(n 2) 1 = ~n 3. 3.2 The algorithm Now we consider the general case in which G may not have 
a perfect matching. Let J4 denote a max­imum matching of G. Algorithm Biconnected subgraph Input: A biconnected 
graph G and its maximum mat thing ill Output: A biconnected subgraph G with an ap­ proximation factor 
of ~ 1. Find a spanning tree T of G which contains all the edges in A4. The vertices are classified 
into three types as in Section 2.3. 2. Cover the tree edges of the matching. Let H be the resultant 
graph. 3. Identify the biconnected components Dl, D2,. ... Dkof H. 4. For each Di with an even number 
of at least 4 vertices, if Di has exactly ~n, 1 edges, remove one edge from Dt such that Di is still 
biconnect ed.  230 5. Biconnect H by adding at most I@)-1 edges. References [1]J. Cheriyan and R. Thurimella, 
Algorithms for Parallel k-Vertex Connectivity and Sparse 6. For each Di with three vertices, remove 
one Certificates, Proc. 23rd Annual ACM Sympo­ edge from it without affecting the biconnectiv­sium on 
the Theory of Computing, 1991, pp. ity. Let G be the final biconnected subgraph. 391-401. At the end 
of Step 3, we can similarly define the [2] J. JAJii, An Introduction to Parallel Algo­rithms, Addison-Wesley, 
1992, pp. 203-260. sets QztQs?Q~? and Q;. Suppose Ilill = z. There are n 2Z type three vertex. [3] 
D.B. Johnson and P. Metaxas, A Parallel Al-Claim: IQ21 s IQII + (~-z~) -1. gorithm for Computing Minimum 
Spanning Trees, Proc, dth Annual ACM Symposium on Proofi Let 1 = lQ2\. H can be partitioned Parallel 
Architectures and Algorithms, 1992, into 1+ 12-edge connected components l?l, B2, . . c, pp. 363-372. 
B[+l, which are connected through 1 bridges. If lli contains no type three vertex, it has a perfect [4] 
R.M. Karp and V. Ramachandran, Paral­ matching and contains at least one biconnected lel Algorithms 
for Shared-Memory Machines, component Dij comprising an even number of at Handbook of Theoretical Computer 
Science, least 4 vertices, Thus, in each lli, we can either vol A, J, van Leeuwen Ed., MIT Press, Mas­ 
find a biconnected component in Q; or a type three sachusetts, 1990, pp. 869-941. vertex. Therefore, 
1 + 1< \Q~l + (n 2z). o With the same argument as in the previous sec­ [5] P. Kelsen and V. Ramachandran, 
On Finding tion, each D, ~ Q2 has only one edge and each Minimal 2-Connected Subgraphs, Proc. 2nd D~ 
6 Qs or Q&#38; contains at most ~ edges in Annual ACM-SIAM Symposium on Discrete total. For any Di c 
Q;, if Di involves a type Algorithms, 1991, pp. 178-187. three vertex, Di contains no more than ni/2 
 1 edges of Al and a total of at most ~n; 2 edges. [6] S. Khuller and U. Vishkin, Biconnectivity ap-In 
case Di involves no type three vertex but as proximations and graph carvings, J. ACM, many as @i 1 edges, 
Lemma 6 guarantees that vol. 41 No. 2, 1994, pp. 214-235. an edge is removed from Di during Step 4. There­fore, 
at the end of Step 4, every Di = Q; con­ [7] N. Garg, V.S. Santosh, and A. Singla, Im­tains at most ~ni 
 2 edges and H has at most proved Approximation Algorithms for Bicon­~(n -I) -~(lQ21 + [Qjl) edges in 
totaL nected Subgraphs via Better Lower Bound­ing Techniques, Proc. dth Annual A CM-SIAM Steps 5 and 
6 effectively add no more than Symposium on Discrete Algorithm, 1993, pp. IQzI + IQ; I + IQ; I -1 edges. 
G hM at most 103-111. ;(~ -1)+ ~(~ -1-IQ;I + IQ21)-1 @w. BY the above claim, we can simplify the edge 
bound [8] T. Fischer, A.V. Goldberg, D.J. Haglin, andto:(n l) +~(2n 2z 2) l=2n $/2 3. S. Plotkin, Approximating 
Matchings in Par- The lower bound result shown in Lemma 3 can allel, Information Processing Letter, 
46( 1993), be applied to the minimum biconnected subgraph pp. 115-118. of G. The algorithm achieves an 
approximate ion 2n x/2 3 < ~. Replacing factor of no more than ~n_2Z_l [9] R.E. Tarjan and U. Vishkin, 
An Efficient the maximum matching with an approximate max­imum mat thing [8], the factor becomes ~ + 
c for Parallel Biconnectivity Algorithm, SIAM J. Comput., 14(1985), pp. 862-874. any constant c > 0. 
 Appendix I Lemma 8 Let ~ be a 2-edge connected graph with n vertices. If G has a perfect matching M, 
there is a 2-edge connected subgraph of ~ which contains no more than ~n 2 edges. Proofi We prove the 
lemma by induction on n, Base case: We consider the base case when n = 4. Note that ~ can have either 
four, five, or six edges. The cases are trivial when ~ has four or six edges (i.e., ~ is a simple cycle 
and a complete graph respectively). If ~ has five edges, two of the four vertices are of degree two and 
the other two are of degree three. The edge which joins the degree-three vertices is a chord of a cycle 
and can be removed. Inductive case: With respect to M, let T be a depth-first-search tree of ~ defined 
as follows: Pick any vertex r as the root and perform an ordinary depth­first search in such a way that 
when a vertex v starts to visit its neighbors, it must first consider the vertex u if (u, v) c M. T contains 
all edges in M. More importantly, every non-tree edge is a back edge with respect to 7. Again, we classify 
the vertices of 7 into two types: for each pair of matched vertices, the parent vertex is of type one 
while the child vertex is of type two. We traverse T in a preorder fashion. For each vertex v of type 
two, (v, p(v)) is in M; if (v, p(v)) has not yet been covered, we find a non-tree edge (w, z) to cover 
(v, p(v)). The edge (w, z) is chosen in such way that x is within the subtree rooted at v, and w is closest 
to r. Let H be the resultant graph. Since we only cover the tree edges that are in M, we have added no 
more than n/2 non-tree edges to 7 and H has at most ~n 1 edges. We consider whether H is 2-edge connected. 
H is 2-edge connected: If H has no more that ~n 2 edges, then it is done; otherwise (i.e., l-1 has ~n 
 1 edges), we will show that an edge can be removed from H without destructing the 2-edge connectivity. 
H is not 2-edge connected: Observe that any bridge in l-i cannot be an edge in M. Let Bl, Bz, . ~, l?~ 
be the 2-edge connected compo­nents of H. By Lemma 2, every 13i cent ains at least four vertices and 
has a perfect matching; by the induction hypothesis, each Bi has a 2-edge connected subgraph which contains 
no more than ~ni 2 edges, where nt is the number of vertices in (a) (b) Figure 1: B,. Now we cover the 
bridges of Z and obtain a 2­edge connected subgraph of ~ containing no more than z!=l(~ni 2) + 2(Ic 
 1) = ~rz 2 edges. It remains to show that if H is 2-edge connected and contains ~n 1 edges, one edge 
can be removed from it without affecting the 2-edge connectivity. Let v be the vertex such that (r, v) 
is in M. Then v is a child of r in T and of type two. The non-tree edge that covers (v, r) must end at 
r and come from a subtree rooted at a child vertex u of v. We are going to show that either the edge 
(u, v) is a chord of a cycle, or we can remove one edge from the subtree of u. As ?l has ~ n 1 edges, 
the covering edges of the tree edges that are in M are all different. Let (w, r) be the edge which covers 
(v, r). All vertices along the tree path from w to u (including w and u) must be of type one. Otherwise, 
the tree path from w to u contains an edge E in M, and we should have chosen a non-tree edge to cover 
2. If (w, r) is not being chosen to cover Z, we should have chosen another edge which also ends at r. 
No matter which covering edge has been chosen for ii, (v, r) will also be covered by this edge and we 
need not pick (w, r) to cover (v, r). Hence H contains no more than ~n 2 edges. Let u be the child vertex 
of u which is of type two (i.e., (u , u) is in M). Consider the edge e which is chosen to cover (u , 
u). This edge must come from a vertex w in the subtree of u and end at either u or u s ancestor (i.e., 
v or r). If e = (r, w ), then (v, r) is also covered. We need not choose a covering edge for (v, r) and 
M has no more than ~n 2 edges. If e = (v, w ), (u, v) is a chord of the cycle which consists of the 
edges (V) r) and (rj w), the paths from w to u, u to w , and the edge (w , v) (see Figure l(a)), The 
removal of this chord would not affect the 2-edge connectivity of the H. . If e = (u, w ), the subgraph 
of H induced by the vertex u and the vertices of the subtree rooted at u is 2-edge connected with ~n 
 1 edges where n is the number of vertices in the subtree rooted at u plus the vertex u, and n ~ 4 (see 
Figure l(b)). Using the induction hypothesis, we can remove one edge from it without affecting the 2-edge 
connec­tivity. We have completed the induction. o  Appendix II Consider any connected spanning subgraph 
H of G. Let m be the number of edges in H and el, e2, . . . , em-ml the edges in G H. Since H is connected, 
adding one or more edges to H would not increase its number of biconnected components, More precisely, 
for any 3 ~ {e~,e~,..., em_m/}, b(H U F) ~ 6(H). Lemma 9 Suppose b(H) ~ 2. For any e, E G H, b(H U{ei}) 
< b(H) if and only if there does not exist a cycle in H containing the two end points of ei. Proofi (+) 
Suppose b(H U{ei}) < b(H). If there exists a cycle containing u and v in ~, then ei is a chord of this 
cycle. Removing e~ from H U{ei } does not split any biconnected component of H LJ{ei }; thus b(H (J{ei}) 
= b(H). A contradiction occurs. (+) Lete, =(u, v). Let P=(u, wl,., wJ,v) bea path connecting u to v in 
H, where j > 1. As there is no cycle in H involving the end points of ei, (u, WI) and (VJj, v) must be 
in two different biconnected com­ponents DU and DU of 11 respectively. Adding ei to H results in a cycle 
containing both (u, Wl) and (wj, w). All edges of DU and D. are now in the same bicon­nected component 
and thus b(H Ll{ei}) < b(H). o Corollary 10 If b(H) ~ 2, there is an edge ez E G -H such that b(H (J{e;}) 
< b(H). Proof: Assume, for contradiction, that for all e~ c G H, b(H(J{ei}) = b(H). By Lemma 9, there 
is a cycle in H containing the end points of ei. Thus, b(H) = b(HU{el}) = b(H(J{el, e2}) = ~ ~ = b(HU{el, 
e2, . . . ,e~_~/ }) = b(G) = 1. A contradic. tion occurs. o Lemma 4 Let F be the set of edges ei such 
that b(H(J{el, e2, . . ., et}) < b(HU{el, e2, . . ..e2_1}). Then $ contains at most b(H) 1edges and 
H UF is a biconnected subgraph of G. Proof: Let F = {ei,, e,,, . . .,eik}, where 1 ~ il < iz<... < ik 
~ m m . By definition of F, we have b(H) (**) =b(HU{el })=... =b(HU{el, etltl})}) >b(HU{el, . . ..e., 
}) =b(HU{el, . . ..e., +l})=b(H=b(H u{el,..., et1}).l}) >b(HU{e], . . ..e., }) =b(HU{el, . ,ei,-,+1}) 
= =b(~u{el,,et,-1}) >b(Hu{el, . .,e,k}) =... =b(llu{el,...,e~,})}) = 1. Thus k~ b(H: 1. Let ik+l =m 
m + 1.Define F. = @ and, for any 1 s s < k, F, = {ei,, ei,, ... ei,}. In order to show H U F being biconnected, 
we prove the following claim. Claim: Let s be any integer in [0, k]. For any j < i,+l, there is a cycle 
in H U F, involving the end points of ej. Proof (by induction on s): Base case, s = O: As­ sume, for 
contradiction, that there exists j < il, which is the smallest integer such that H does not contain a 
cycle involving the end points of ej. By Lemma 9, b(H U {ej}) < b(H); then b(H U {el, . .,etl-l}) < b(H 
U {cl, , ej}) < b(H U {ej}) < b(n). A contra­ diction occurs as we have already derived that b(H U {cl,, 
eil_l}) = b(H) (see (**)). Inductive case: Consider the graph H U F,. By the induction hypothesis, for 
any j < is, there is a cycle in ff U F, _ 1, as well as H U F,, involving the end points of ej. It remains 
to consider the case where i, < .j < i,+l. Again, assume on the contrary that there exists j, the smallest 
integer such that is < ~ < i,+] and H U l?, does not contain a cycle involving the end points of ej. 
By Lemma 9, b(H U F, U {ej}) < b(ll U F.). On the other hand, for any j < j, H U F, containis a cycle 
involving the end points of ej, . Applying Lemma repeatedly, we obtain b(HU{el, . . . ,ej_l}) = b(HUF, 
). Therefore, b(H U {el, ~ ~ . ,ej}) S b(HUF, LJ{ej}) < b(Hu F.) = b(H U {el,, ej-l}). However, ej $+2 
F and, with reference to (**), b(H U {el, . . ,,ej_l}) = b(HU{el, ..., ej}). A contradiction occurs. 
o In conclusion, for every edge ej in G H, H U F contains a cycle involving ej s end points. If H U 
F is not biconnected, by Corollary 10, there exists an edge ej such that b(HUFU{ej}) < b(HU F); by Lemma9, 
H U F does not contain a cycle involving the end points of ej . A contradiction occurs. o 
			