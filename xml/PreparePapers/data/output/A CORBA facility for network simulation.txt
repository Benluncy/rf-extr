
 Proceedings of the 1996 Winter Simulation Conference ed. J. M. Charnes, D. J. Morrice, D. T. Brunner, 
and J. J. Swm n A CORBA FACILITY FOR NETWORK SIMULATION Chien-Chung Shen Bellcore 331 Newman Springs 
Road Red Bank, New Jersey 07701, U.S.A. ABSTRACT Contemporary software development environments for 
discrete-event simulation have adopted either a language-based approach or a library-based ap­ proach. 
Although these approaches have advantages such as type checking and optimized code generation provided 
by the former and familiar programming en­vironments facilitated by the latter, they suffer from the 
inherent limitations of model portability and in­teroperability, which may result in inflexible models 
and higher model development cost. This paper pro­poses a CORBA discrete-event simulation facility to 
facilitate portable and interoperable simulation mod­els. The proposed facility is defined by a CORBA 
IDL interface which defines operations for object defini­tion, inter-object communication and event schedul­ing. 
Based on the given IDL interface definition, dif­ferent vendors could supply different products (at dif­ferent 
costs) by using different simulation algorithms, different programming language, or on different op­erating 
system or hardware platforms. With respect to the simulation models, they see a consistent in­terface 
across all products. The paper presents the simulation facility IDL interface, describes its proto­type 
implementation in C++, and illustrates its usage by a bounded-buffer producer-consumer example. INTRODUCTION 
Contemporary software development environments for discrete-event simulation have adopted either a language-based 
approach or a library-based approach (Martin and Bagrodia 1995). In either case, pro­grammers are provided 
with a set of model definition primitives together with a set of parallel program­ming primitives for 
object definition and inter-object communication and synchronization. These primi­tives are provided 
either as language extensions or as functions implemented as library routines. Although these approaches 
have advantages such as type check­ ing and optimized code generation provided by the former and familiar 
programming environments facil­ it ated by the latter, they suffer from the following two inherent limit 
at ions. Portability. Simulation models developed us­ing one simulation language might nck be easily 
ported to another simulation language. The pro­grammers will be required to learn new language constructs 
and perhaps an entirely new set of program development tools. Interoperability. Components of a simulation 
model are required to be programmed in the same host language dictated by the simulation language or 
library routines used. It is, so far, infeasible that a simulation model consists of in­ teroperable 
components written in diRerent pro­ gramming languages, or running on different op­ erating systems or 
hardware platforms. These limitations may potentially lock simulation ap­plication development into a 
particular (vendor) en­vironment and result in inflexible models and higher model development cost. However, 
these restrictions are not inherent in sim­ulation application development alone. In fact, one of the 
most difficult tasks challenging information in­dustry today is to enable application interworking and 
construction in a distributed, heterogeneous, and multi-vendor environment. Confronted with the challenge, 
the Object Man­agement Group (OMG) was founded in 1989 to de­velop a set of standards, using object t 
ethnology, to facilitate distributed computing, which guarantee ap­plication interoperability and portability. 
Among them, the Common Object Request Broker Architec­ture (CORBA) (OMG 1993) has emerged as a de facto 
standard for distributed object computing. At its core, CORBA defines the facilities required to allows 
a client object to transparently invoke the 613 614 Shen services offered by CORBA-compliant objects 
(or CORBA objects for short) running on any machine in a heterogeneous distributed environment. The re­mote 
CORBA object are available across different operating systems (UNIX, Windows, 0S/2, MVS), and different 
programming languages, such as C++, C, Ada, and Java, with many others to follow. Each CORBA object has 
an interface that defines the services it offers to its clients, and this interface is defined in an 
Interface Definition Language (IDL) specified by the CORBA standard. The CORBA IDL is not a programming 
language and it does not replace the use of programming languages. Instead, the IDL s only role is to 
define interfaces which consist of oper­at ions available to the clients of the interfaces. The advantage 
of using CORBA IDL is that it al­lows a CORBA object to define its interface (services) in a declarative 
fashion, which is independent of the programming language used to implement the object itself, or the 
programming language used to imple­ment the clients of the object. In particular, the lan­guage used 
to implement CORBA objects need not be the same as that used by clients, and of course, the clients that 
invoke a given CORBA object need not all be implemented in the same programming language. For example, 
a client object written in Ada need not be aware that a CORBA object it is invoking is im­plemented in 
C++. In this case, the IDL definition of the object interface is translated, through an appro­priate 
IDL compiler, automatically into Ada for the benefit of the client, and into C++ for the benefit of the 
implementer of the interface. In this paper, we propose a CORBA discrete-event simulation facility using 
the message-based approach (Bagrodia, Chandy, and Misra 1987). The facility ex­ports an interface, defined 
in CORBA IDL, consisting of operations for object definition, inter-object com­munication and event scheduling, 
and implements the interface using a discrete-event simulation algorithm. Simulation models utilizing 
the facility shall first bind to the facility (as an object) and then invoke the ex­ported operations 
to obtain runtime support for exe­cuting simulation models. Based on the proposed interface definition, 
differ­ent vendors are encouraged to supply different prod­ucts (at different costs) by using different 
simula­tion algorithms, different programming language, or on different operating system or hardware 
platforms. However, with respect to the simulation models, they see a consistent interface across all 
products. The remainder of the paper is organized as fol­lows. We first present an overview of CORBA 
in the next section. The concept of message-based discrete­event simulation is introduced in Section 
3. Based ..................... ..................... Application Obje&#38;s C+mOn Faciliti&#38; ...... 
........ ..... ..... ....... ..... w; w II II ( Object Request Broker (ORB) ) Ob j act Services ! . . 
. . . . . . . . . . . . .. . . . . . . . . . . . . . . . ..-. Figure 1: Object Management Architecture 
(OMA) on that, we define a discrete-event simulation fa­ cility and present its CORBA IDL interface defini­ 
tion in Section 4. Section 5 describes its prototype implementation. Application of the facility using 
a bounded-buffer producer-consumer example is de­scribed in Section 6, and Section 7 is the conclusion. 
 2 DISTRIBUTED OBJECT COMPUTING WITH CORBA To enable distributed application interworking and construction, 
OMG defines the Object Management Architecture (OMA) Reference Model (OMG 1992) which identifies and 
characterizes the components, interfaces and protocols necessary to guarantee inter­ operability and 
portability of distributed applications in heterogeneous environments. 2.1 The OMA Reference Model The 
OMA defines a reference model (Figure 1) for distributed object computing. Within the reference model, 
the most import ant component is the Object Request Broker (ORB). An ORB provides the basic mechanism 
for transparently making requests to and receiving responses from objects located locally or re­motely 
without the client needing to be aware of the mechanisms used to communicate with the objects. As such, 
the ORB forms the foundation for build­ ing applications constructed from distributed objects and for 
interoperability between applications in dis­tributed heterogeneous environments. Every entity in the 
reference model is modeled as an object. These objects communicate with each other via the ORB. According 
to their functionality, objects are categorized into three groups: Object Services comprise a collection 
of ser­ vices (interfaces and objects) that provide ba­ sic functions for using and implementing objects. 
 A CORBA Facility for Network Simulation Examples are naming and event services. Common Facilities provide 
a collection of commonly-found services useful in many appli­cations. In contrast to Object Services 
which are general purpose and application-domain in­dependent, Common Facilities are services which are 
often application-domain specific and typi­cally provide functionality directly to end-users. The simulation 
facility is an example. Application Objects are objects specific to particular end-user applications. 
Examples are simulation and banking applications.  2.2 The CORBA Architecture The CORBA specifies a 
concrete description of the interfaces and services that must be provided by com­pliant Object Request 
Brokers. CORBA is composed of the following five major components. ORB Core. The ORB Core provides the 
ba­sic communication capability between objects. It supports two different ways in which clients can 
make requests to objects: stattc invocation via interface-specific stubs and skeletons compiled from 
IDL interface definitions, and d~namic in­vocations via the Dynamic Invocation Interface. No matter which 
of these methods is used by a client to make a request, the ORB Core locates the desired object, activates 
it if it is not already executing, and delivers the request to it. The ob­ject performs the requested 
service and returns any result back to the ORB Core which then re­turns it to the client. b Interface 
Definition Language (IDL). In CORBA, object services are defined as interfaces in IDL, a language-independent 
declarative lan­guage. IDL supports (multiple) inheritance in which derived interfaces inherit the operations 
and types defined in Interface Repository persistent storage for Its primary function information necessary 
their base interfaces. (IR). The IR provides IDL interface definitions. is to provide the interface to 
issue requests using Dy­ namic Invocation Interface. Dynamic Invocation Interface (DII). Some applications, 
such as browsers, require the ca­pability of sending requests to objects without having compile-time 
knowledge of their interface definitions. The DII allows run-time discovery of interfaces from an IR, 
dynamic creation and invocation of requests to objects. w Y skeleton m-mmie. lDL Om lavOcat iox Stutm 
Izlt.rf a.. sit .rf ac. OM*CU MaDt.r EI I ORB Core 1 Figure 2: The CORBA Components Object Adaptor (OA). 
An object adaptor provides the means by which various types of object implementations can utilize OFtB 
services, such as object method invocation, activation and deactivation of objects and implementations. 
Figure 2 shows how the various CORBA components working together to facilitate distributed object com­puting. 
We assume that a client wants to invoke a service supported by an object. An IDIL definition file is 
created to describe the interface (services) the object provides, which is stored in the Hi, as well 
as compiled into an IDL Stub and an IDL Skeleton. The client can initiate a request by calling the IDL 
Stub. Alternatively, the client looks up the IR and dynam­ically creates and invokes a request using 
DII. In ei­ther case, the request is directed to the ORB Core. The ORB Core locates the object implementation 
and then delivers the request ject. The OA feeds the where it is then passed Any return values are Skeleton 
and OA to the on the original call, the either through the IDL  3 MESSAGE-BASED SIMULATION to the OA 
managing that ob­request into the IDL Skeleton to the object implementation. passed back through the 
IDL ORB Core. Then, depending ORB Core returns the value Stub or the DII to the client. DISCRETE-EVENT 
In this section, we review the basic concept of message-based discrete-event simulation~ which pro­vides 
a more natural paradigm for simulating dis­tributed systems, and therefore better serves as the foundation 
for the definition of a simulation facility. In message-based simulation, each physical entity is abstracted 
by an logical object (lo), and interactions among the entities, called events, are represented by message 
communications among the corresponding clock = 0; Initialize event-list while (execution not terminated) 
do { fetch next tuple (m~, Si, c&#38;, ti)from event-list; if (m~ is a timeout message) then ciock = 
t~; deliver rn~ to d~ for simulation; } Figure 3: Message-Based Simulation Algorithm 10. (Symbol 10 
represents both singular and plural forms.) A message-based simulation algorithm uses two data structures 
(Misra 1986): a simulation clock and an event-list (Figure 3). The simulation clock gives the time up 
to which the physical system has been simulated. The event-list is a partial order of tuples; a tuple 
is represented by (m, s, d, t), where m represents a message, s and d are the source and des­tination 
10 for m, and t is a timestamp. The partial order is typically based on the timestamp and en­sures that 
events are simulated in the order of their dependencies. At every step of the simulation, the algorithm 
selects the tuple with the smallest times­tamp, say (m~, Si, di, t~), removes it from the event­list, 
and delivers mi to di. Multiple tuples with the same timestamp may be handled in an arbitrary or­der, 
or be ordered deterministically using transparent sequence numbers to reflect their dependencies. The 
simulation of mi by 10 di may generate additional messages which are added to the event-list. During 
the execution of a simulation program, the simulation clock advances in a monotonic non­decreasing manner 
through the timestamps associ­ated with each tuple. Note that the simulation clock is completely decoupled 
from the physical processor clock. The physical time required to simulate a mes­sage does not have any 
effect on the simulation clock. How is the timestamp assigned to a message? When a message is generated, 
it is timestamped with the current value of the simulation clock with one ex­ception. We define a special 
message called a timeout message. The timeout message is scheduled by an 10 for delivery to itself at 
a future time and is typically used to simulate the time of a simulation step that would be required 
by the physical entity to execute the corresponding operational step. An operational step refers to the 
statements executed by a physi­cal entity to process a message received by it, and a simulation step 
models the activities that would be executed by the corresponding operational step. For example, consider 
a file-handler entity. On receiving a read request for the file, a physical (operational) file-handler 
will read the appropriate record from the Shen file and return it to the requesting entity. If the file­handler 
is abstracted by a logical object, on receiving a read request, the 10 estimates t,the time required 
for the corresponding physical entity to read the file and schedules a timeout message to itself ttime 
units later. As the timestamp on all messages other than the timeout message refers to the current value 
of the simulation clock, the simulation time advances only when a timeout message is delivered to an 
10.  4 SIMULATION FACILITY In light of the above description, we define the DESFacilit y interface (Figure 
4), in CORBA IDL, for message-based discrete-event simulation, which conists of operations for object 
definition, inter-object communication and event scheduling. t ypedef string Obj lime; typedef string 
lLsgType; typedef any MsgContents; typedef long Time; t ypedef boolean BGuard; struct WCItem < MsgType 
msg_type; BGuard bguard; Time duration; , r; typedef sequence<WCIt em> Wait Condition; struct Message 
< ObjName source; ObjName sink; MsgType msg_type; MsgContents contents; }; interface DESFacility { void 
role (in Obj Name myself) ; void enroll(ln ObjName myself) ; void resign(i.n ObjName myself) ; void send(in 
llessage msg) ; void receive (out llessage msg, in Obj Name myself) ; void waitunt il (out Message msg, 
in Obj Name myself, in Wait Condit ion wc ) ; void hold(in Time tm, in ObjName myself) ; Time now( ) 
; }; Figure 4: Interface Definition (DESFacility.idl) A CORBA Facility for Object Definition. Operations 
role, enroll, and resign are used to define participating simula­ tion objects, and to demarcate their 
beginning and ending of execution . Inter-Object Communication. Objects com­ municate with each other 
using buffered message­passing (asynchronous communication), where every object has a unique message-buffer. 
An object sends a message to another by invoking a send operation. Each message, with structure defined 
by Message, contains sender, receiver, message type, and message contents information. A message is deposited 
in the message-buffer of its destination object on the invo­cation of a send operation, and carries a 
t imestamp which corresponds to the simulation time at which the corresponding send operation is invoked. 
An ob­ ject accepts messages from its message buffer by in­ voking a waituntil operation. The waituntil 
op­ eration takes a sequence of wait-condition items as an input argument to determine which message 
will be accepted by the object. Each wait-condition item specifies a message-type, say mi and a boolean 
value, say bi, which is said to be enabled if the message buffer contains a message of type mi and bi 
is true, and mi is called an enabling message. The enabling message with the earliest timestamp is removed 
and delivered to the object. If all wait-condition items are disabled, the object is suspended for a 
mazimum duration of simulation time equal to duration of a wait-condition item with nwg-t ype equal to 
timeout. If omitted, a default wait-condition item with msg.type equal to timeout is set with an arbitrarily 
large duration value. If no enabling message is received in the duration interval, the object is sent 
a timeout mes­ sage. An object must accept a timeout message that is sent to it. A separate receive operation 
is also pro­ vided to accept the message with the earliest times­ tamp from the message-buffer, regardless 
of its mes­ sage type. It will block the invoking object until a message is available. Event Scheduling. 
The hold operation enables the invoking object to schedule a timeout message for delivery to itself tm 
time units from now. It is used to specify the simulation time used by a simulation step. The now operation 
lets the invoking object to read the current value of the simulation clock. PROTOTYPE IMPLEMENTATION 
 In this section, we describe a C++ implementation of the simulation facility in a multi-threaded version 
of the commercial ORB Orbix (IONA 1995). (Orbix is a Registered Trademark of IONA Technologies Ltd.) 
We adopt the wait-until simulation algorithm Network Simulation 617 clock = o; Initialize event-list; 
while (execution not terminated) do { fetch next tuple (m,, si, di, ti)from event-list; if (mi is not 
accepted by di) then store m~ in temp-queue; else { if (mi is a timeout message) then clock= ti; deliver 
mi to di for simulation; merge temp_queue with event-[is~ } } Figure 5: Wait-Until Simulation Algorithm 
 (Franta 1977), as shown in Figure 5, to implement the simulation engine, in which an object may delay 
acceptance of a message based on its state such that messages are not necessarily delivered in the partial 
order specified by the event-list. Each 10 may specify a wait-condition which restricts the types of 
message that it is willing to receive; a message is delivered to the destination 10 only if it satisfies 
its wait-condition. The simulation clock is advanced through the times­tamps associated with the timeout 
messages in the event-list. In the C++ implementation, the DESFacility in­terface is implemented as the 
DESFacility-i C++ object (Figure 6) exporting the defined (operations. Upon receiving an invocation for 
operation send, the DESFacilityti object inserts the message into the event list according to increasing 
timest i~mp order. On receiving an invocation for operations waituntil and receive, a thread is created 
implicitly to check if there is any enabling message. It wil I block the invoking object in case there 
is no enabling message. Finally, upon receiving an invocation for operation hold, a thread is created 
implicitly to first deposit a timeout message in the event list. It then block until the scheduled timeout 
message becomes deliverable. As simulation facility is defined in COR,BA IDL, it does not dictate its 
implementation. The simulation facility could very well be implemented using a paral­lel simulation algorithm 
to take advantage of parallel processing environment. With respect to its clients, the implementation 
is totally transparent, except for potential performance improvement. 6 AN EXAMPLE As an example, we 
consider the simulation of a bounded-buffer producer-consumer system (Bagrodia and Shen 1991). The consumer 
object repeatedly re­#include DESFacility.hh struct Event < Message msg; Time tstamp; struct Event *lst; 
struct Event *nxt.; 3; class DESFacility_i : public virtual DESFacilityBOAImpl { private: void enqueue(const 
struct Message&#38; msg, Time tstamp); public: Time sim_clock; II sim clock struct Event eventList; 
// event list DESFacility_i(char *marker); // constructor virtual DESFacility_io; II destructor virtual 
void role(const Objl?ame myself); virtual void enroll(const Objl?ame myself); virtual void resign(const 
ObjName myself); virtual void send(const Message&#38; msg); virtual void receive(Message&#38; msg, const 
ObjName myself); virtual void waituntil(Message&#38; msg, const ObjName myself, const WaitCondition&#38; 
WC) virtual void hold(Time tm, const ObjName myself); virtual Time nowo; 3; Figure 6: DESFacility C++ 
Implementation Class quests adataitem from the buffer using arequest message, waits toreceive adata 
message, and invokes aholdoperation to simulate data consumption. The producer object waits to receive 
a free message from the buffer which indicates that the buffer has afree slot, invokes ahold operation 
to simulate the gener­ationof adataitem, and sends the itemto the buffer via a data message. The buffer 
object repeatedly in­vokes awaituntil operation that accepts arequest message only when it isnot empty 
and adata ifit is not full. Figures 7, 8, and 9 list the C++ source code for the producer, consumer, 
and buffer object, respec­tively, and Figure 10 depicts their interaction with the DESFacility object 
to obtain the discrete-event simulation service. Shen main (int argc, char **argv) { DESFacility *p; 
Message msg_s, msg_r; int i, n, now, t_wait; P = DESFacility: :_bind( sim: simsrv , ); p->enroll( producer 
); now = t_wait = O; n = Q_LENGTH; msg_s.source = new char[201; strcpy(msg_s.source, producer ); msg_s.sink 
= new char[20]; strcpy(msg.s sink, buffer ); msg_s.msg_type = new char[20]; strcpy(msg_s.msg_type, data 
); for (i = O; i < MAX_ITEM; i++) { if (n==O){ now = p->nowo; p->receive(msg_r, producer ); n++; t_wait 
+= p->nowo -now; ) p->hold(rando%MAXPRODUCE, producer ); n--; p->send(msg_s); > now = p->nowo; printf( 
Producer utilization == %f\n , ((float)(now -t_wait)/(float) now)); p->resign( producer ); p->_releaseo; 
 1 Figure7: The Producer Code  7 CONCLUSION At the time when the computing industry is de­manding portable 
and interoperable distributed ap­plications, of which simulation is a notable example, CORBA has emerged 
as a de facto standard for dis­tributed object computing. ACORBA-compliant ob­ject request broker serves 
asasoflware ktofacili­tate communication among distributed objects, inde­pendently of their languages, 
operating systems, or hardware platforms. In addition, the OMA has de­picted a reference model where 
application-specific services are provided as Common Facilities. The paper describes a CORBA discrete-event 
sim­ulation facility. The facility exports an interface, defined in CORBAIDL, consisting ofmodeldefini­tion 
operations, and implements the interface using a discrete-event simulation algorithm. The main thrust 
of the paper is not to propose a new simulation language or a more efficient par­allel simulation algorithm, 
but to int reduce a new paradigm for facilitating discrete-event simulation us­ A CORBA Facilit<y for 
 main (int argc, char **argv) { DESFacility *c; Message msg_s, msg_r; int i, t, t_used, now; c = DESFacility:: 
_bind( sim: simSrv , ); c-~enroll( consumer ); nov = t_used = O; msg_s.source = new char[201; strcpy(msg-s.source, 
consumer ); msg_s.sink = new char[201; strcpy(msg_s .source, buffer ); msg_s.msg_type = new char[20]; 
strcpy(msg_s .source, request ); for (i = O; i < MAX_ITEM; i++) { c->send(msg_s) ; c->receive(msg_r, 
consumer ); t_used+= (t = rando % MAXCONSUME); c->hold(t, consumer ) ; } now = c->nowo; printf( Consumer 
utilization == xf\n ,  ((float)(t-usecl) 1 (float)now)); c->resign( consumer ) ; c->-release( ); 3 Figure8: 
The Consumer Code ing the newly emerged CORBA technology and to motivate more research activities and 
product devel­opment in this direction. ACKNOWLEDGMENTS This research was funded by the Army Research 
Lab­oratory under Cooperative Agreement No. DAALOl­96-2-0002. REFERENCES Bagrodia, R. L., K. M. Chandy, 
and J. Misra. 1987. A message-based approach to discrete-event simu­lation. IEEE Transactions on Software 
Engineer­ing 13(6):654 665. Bagrodia, R. L.and C=C. Shen. 1991. MIDAS: In­tegrated design and simulation 
of distributed sys­tems. IEEE Transactions on Sofiware Engineering 17(10):1042-1058. Franta, W. R. 1977. 
The process view of simulation. New York: Elsevier North-Holland Inc. IONA. 1995. Orbix: Programmer s 
Guide. IONA Technologies Ltd. Network Simulation Martin, J. M. and R. L. Bagrodia. 1995. COM-POSE: An 
object-oriented envirOnmeIIlt for par­allel discrete-event simulation. In Proceedings of the1995 Winter 
Simulation Conference. 163-166, Washington, DC. Misra, J. 1986. Distributed discrete-event simulation. 
Computing Survey 18(1):39-65. OMG. 1992. Object Management Architecture Guide. Object Management GroupandX/Open. 
OMG. 1993. The Common Object Request Broker: Architecture and Specification. Object Manage­merit Group 
and X/Open. AUTHOR BIOGRAPHY CHIEN-CHUNG SHEN isa MemberofTechni­cal Staff in Bellcore Applied Research. 
He received B.S. and M.S. degrees in computer science from Na­tional Chiao Tung University, Taiwan, in 
1982 and 1984, respectively, and a Ph.D. degree in computer science from UCLA in 1992. His research interests 
include distributed network control and management for SONET, ATM, WDM and wireless networks, dis­tributed 
object computing, and network simulation. 620 Shen main (int argc, char **argv) { DESFacility *b; Message 
msg-s_p, msg_s_c, msg_r; WaitCondition WC; int q, i, v, tstart, tend; b= DESFacility:: _bind( sim:simSrv 
, ); b->enroll( buffer ); tstart = b->nowo; msg_s_p.source = new char[20]; strcpy(msg_s_p.source, buffer 
); msg_s_p.sink = new char[20]; strcpy(msg_s_p.sink, producer ); msg_s_p.msg_type = new char[201; strcpy(msg_s_p.msg_type, 
 free ); msg_s_c.source = new char[20]; strcpy(msg-s-c. source, buffer ); data data msg_s_c.sink = new 
char[20]; strcpy(msg_s-c.sink, consumer ); msg_s_c.msg_type = new char[201; strcpy(msg_s_c.msg_type, 
 data ); wc._length = 2; wt.-maximum = 2; free request wc._buffer = new WCItem[2]; wc._buffer[O] .msg_type 
= new char[20]; strcpy(wc._buffer[O] .msg_type, data ); wc._buffer[l] .msg_type = new char[20]; strcpy(wc._baffer[l] 
.msg_type, request ); for (i=q=v=O;;){ wc._buffer[O] .bguard = (q < Q_LENGTH); wc._buffer[l] .bguard= 
(q > O); b->waituntil(msg_r, buffer , WC); if (strcmp(msg_r.msg_type, tend = b->nowo; v += data ) q*(tend-tstart); 
== O) { Figure 10: Prototype Implementation tstart = tend; q++ ; break; } else { // request b->send(msg_s_c); 
tend = b->nowo; v += q*(tend-tstart); tstart=tend; q--; if ((++i) < MAX_ITEM) b->send(msg_s_p); else 
break; } > printf( The avg # of items in buf: Xf\n , (float) v / (float) b->nowo); b->resign( buffer 
); b->_releaseo; 3 Figure9: The Buffer Code  
			