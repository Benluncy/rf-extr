
 The Efficiency of Greedy Routing in Hypercubes and Butterflies * George D. Stamoulis John N. Tsitsiklis 
Laboratory for Information and Decisions Systems Massachusetts Institute of Technology Cambridge, Mass. 
02139, USA Abstract by routing messages through the underlying intercon­nection network. In the present 
paper, we consider a We analyze the following problem: Each node of the d-well-known problem: the nodes 
(i.e., processors) of the dimensional hypercube independently generates packets binary hypercube (see 
$1.4) generate packets at ran­according to a Poisson process with rate A. Each of the dom time instants; 
each packet has a single destina­packets is to be sent to a randomly chosen destination; tion, which 
is selected at random. We discuss a simple each of the nodes at Hamming distance k from a packet s greedy 
scheme for routing these packets and we ana­origin is assigned an a priori probability y pk ( 1 p)d-k. 
lyze its steady-state stability and delay properties. The (For p = ~, the destination distribution is 
uniform.) results to be derived extend to the butterfly network. Packets are routed under a simple greedy 
scheme: each The underlying assumptions for communications are of them has to follow the canonical path 
leading to its as follows: Each piece of information is transmitted as destination. Assuming unit packet 
length and no other a packet with unit transmission time. Only one packet communications taking place, 
we show that this scheme can traverse an arc at a time; all transmissions are error. is stable (in steady-state) 
if p < 1, where pd~f~p is the free. Each node may transmit packets through all of load factor of the 
network; this is seen to be the broadest its output ports and at the same time receive packets possible 
range for stability. Furthermore, we prove that through all of its input ports. Each node has infinite 
the average delay T per packet satisfies T < ~ thus .I pj buffer capacity. Finally, for analytical convenience, 
the showing that an average delay of ~(d) is attainable for time axis is taken to be continuous. The 
results also any fixed p < 1. We also establish similar results in extend to the case of slotted time; 
see ~2.4. the context of the butterfly network. Our analysis is Routing a packet from a node z to another 
node z may based on a stochastic comparison with a product-form be accomplished optimally by transmitting 
the pack­queueing network. et along one of the shortest paths from is to z; this takes time equal to 
the Hamming distance II(z, z) be­t ween the two nodes (see $1.4), provided that the packet 1 INTRODUCTION 
 does not encounter any contention en route. This is the simplest conceivable communication task. Under 
more 1.1 Problem Definition general tasks, several packets are to be transmitted at the same time, with 
the set of origin-destination pairsDuring the execution of distributed algorithms in a par­having a special 
structure. (e.g., the permutation task,allel computer, it is necessary that processors commu­where each 
node transmits one packet, with differentnicate with each other in order to exchange informa­packets 
having different destinations; see also f 1.3.) By exploiting this special structure, one may devise 
an al­ Research supported by the NSF under Grant ECS-8552419 tion. In message-passing systems, this is 
accomplished gorithm to perform such a task efficiently. Such routing and by the ARO under Grant DA AL03-86-K-01 
71. problems are called static, because they involve tasks to be performed only once, in the absence 
of other trans­missions. In the dynamic version of the routing prob- Permission to copy without fee all 
or part of this matertial is granted pro­vided that the copies are not made or distributed for direct 
commercial lem, it is assumed that multiple tasks are generated over advantage, the ACM copyright notice 
and the title of the publication and an injirzit e time-horizon; moreover, different tasks may its date 
appear, and notice is given that copying is by permission of the interfere with each other. As discussed 
below, most of Association for Computing Miwhinery. To copy otherwise, or to rcpubfish, requires a fee 
and/or spwific permission. @ 1991 ACM 089791-438-4/91/0007/0248 $1.50 the routing literature deals 
with static problems. In the present paper, we consider a dynamic problem with a simple structure: Each 
node of the d-cube generates packets according to a Poisson process with rate A; different nodes gen­erate 
their packets independently of each other. Each packet has a single destination, which is selected ran­doml~ 
in particular, we assume that Pr[a packet generated by z is destined for z] ~(=,z) 1 _ ~)d H(=,z) , 
(1) =P ( where p E (O, 1]; different packets make their selections independently of each other. ( A 
simple interpretation oft his rule is presented at the end of $2.1. ) It is seen from Eq. (1) that for 
p = ~ the destination distribution is uniform; that is, each node (including its origin) is equally likely 
to be chosen as a packet s destination. This is the case usually considered in the literature (see $1.3); 
in most of the related works, a packet s origin is not a permissible destination; however, our results 
(when resealed appropriately) also apply to this case. For p < ~, the destination distribution favors 
nodes at shorter distance from a packet s origin; in this case, packet transmissions tend to be more 
localized. 1.2 Summary of the Results First, we derive the necessary condition for stability of any 
routing scheme applicable to our problem. The av­erage total number of packets generated in the network 
per time unit equals A2d. Moreover, it is easily seen from Eq. (1) that each packet s destination is 
at an average Hamming distance of dp from the packet s ori­gin; therefore, under any routing scheme, 
each packet will have to traverse at least dp hypercube arcs on the average. Thus, during each time unit, 
an average total demand for at least A2ddp packet transmissions is gen­ erated in the system. Since at 
most d2d packet trans­missions may take place per time unit, it follows that the system can be stable 
only if A2ddp < d2d. Thus, we obtain the following necessary condition for stability under any routing 
scheme: (2) where p is the Joad factor of the system. This tern~inol­ogy is appropriate, because when 
p x 1 all hypercube arcs are almost always busy, even if no redundant pack­et transmissions take place. 
Notice that inequality (2) is a necessary condition for stability under more general arrival processes. 
In light of Eq. (2), it is of particular interest to de­vise a routing scheme that is guaranteed to be 
stable for all p < 1. Moreover, it is desirable that such a scheme does not introduce excessive dela~ 
in particular, it is re­quired that for each p <1 there exists some CP (which does not depend on d) such 
that the average delay T per packet does not exceed CPd. Here, T is defined as tl~e steady-state average 
time elapsing until a packet reach­es its destination. The aforementioned requirement on the delay is 
motivated by the fact that, in the absence of other transmissions, it would take dp time units (on the 
average) to route a packet to its (random) destina­tion, by using shortest-path routing; thus, it is 
desirable that the additional delay due to contention does not i,n­crease this quantity by more than 
a multiplicative factor depending on the load of the network. The simplest approach to our routing problem 
is for each packet to choose a shortest path leading to its des­tination and attempt to traverse this 
path as fast as pos­sible. Although it is intuitively clear that such greedy schemes may possibly be 
efficient, their performance has not been analyzed rigorously in the literature. In this paper, we prove 
that a particular greedy scheme is very efficient. The routing scheme to be analyzed is as fcJ­10WS: 
Consider a packet originating at node z and des­tined for node z; this packet will be routed through 
the unique shortest path (from z to z) in which the hypercnbe dimensions (see ~1.4) are crossed in increasi­ng 
index-order; these paths are referred to as canonic­al paths. For example, a packet traveling from node 
(O, 0,0, O) to node (1, 0,1, 1) in the 4-cube would follow the path (0,0,0,0) + (0,0,0,1)+ (0,0,1,1)+ 
(1,0,1,1). (:3) It will be proved that this simple routing scheme is sta­ble for all p <1, which is the 
broadest possible stability region. By the term stable it is meant that the time spent by the nth packet 
in the system converges (as n ~ m) to a limiting random variable, which is finite with probability y 
1. Moreover, it will be established that, for p <1, the delay T induced by the scheme satisfies dp+p 
p <T<~ 2(1 p) l p Of particular interest is the upper bound on the de­lay, which guarantees that, for 
any fixed p, each packet reaches its destination in an average time ~(d). Notice also that under heavy 
traffic (i. e., for p ~ 1 ) the de­lay T increases as &#38;. It will be established that such a behavior 
under heavy traffic is optimal for any fixed d; indeed, it will be proved that limP+l [(1 p)T] >0 under 
any legitimate routing scheme. In the course of the analysis, we establish a rather general interim result 
(namely, Theorem 3). Using this, we can analyze the performance of greedy routing a,l­ so in the context 
of crossbar switch networks with arcs arranged in Zevels; such networks are the butterfly, the Omega 
and the Banyan networks etc. In fact, the anal­ysis is still applicable even if different arcs have different 
(yet fixed) transmission times. In 33, we consider the case of the d-dimensional butterfly, which is 
an un­folded version of the d-cube; see [4]. In this context, it is assumed that packets are generated 
at one of the fronts of the butterfly and destined for a randomly chos­en node at the opposite front; 
the destination distri­bution is identical to that presented in Eq. (1), except for the fact that z and 
z belong to opposite fronts of the butterfly. Notice that crossing the dimensions in increasing index-order 
is the only legitimate choice of paths for the butterfly. Thus, the scheme simply reduces to greedy routing; 
this will be seen to be stable for all p <1, where p is now defined as pd~f~ max{p, ( 1 p)}; moreover, 
for p < 1, the average delay T per packet satisfies d+p   2(AP) -%[,l!i;!p)] + dp d(l p) ~Ts l Ap 
l A(l p) Again, the delay T is @(d) for any fixed p < 1, which is the optimal order of magnitude; also, 
the asymptotic behavior of T in heavy traffic will be seen to be optimal, for any fixed d. To the best 
of our knowledge, these results are new. Moreover, our analysis provides the first proof that some routing 
scheme (on either the d-cube or the butterfly) is stable for all p < 1 while satisfying the requirement 
for ~(d) average delay; proving that greedy routing has these properties was an important open question 
in the routing literature. Also, this is the first routing scheme for which the bounds on the delay are 
expressed in sim­ple formulae involving the system s parameters p and d. Finally, the approach for deriving 
the aforementioned results is new as well: it is established that the hyper­c.ube (resp., the butterfly) 
behaves as a queueing net­work with deterministic servers (each corresponding to an arc) and with Markovian 
routing among the vari­ous servers; then, by using sample-path arguments, it is shown that the delay 
induced by this queueing network is dominated by that corresponding to a product-form network. This kind 
of approach relies on the assunlp­tion of Poisson arrivals; nevertheless, we hope that our analysis will 
be suggestive of the efficient performance of greedy routing under more general packet-generating processes; 
in fact, the conditions for stability derived in our analysis are much more general. 1.3 Survey of Previous 
Work As already mentioned, there exists considerable litera­ture on algorithms for communication tasks 
in various interconnection networks. However, several of the relat­ed articles analyze static problems, 
where each task has to be performed only once, and no other packet trans­missions are taking place at 
the same time. In particu­lar, for the hypercube network, Bertsekas et al. [3] have devised optimal algorithms 
for a variety of comnlunica­tion tasks. Previously, Saad and Schultz [15], as well as Johnsson and Ho 
[10], had constructed optimal or near­ly optimal algorithms for hypercubes, under somewhat different 
assumptions on packet transmissions. The in­terested reader may find more references in these three papers 
and in [4]. The communication tasks considered in the aforemen­tioned papers as well as the respective 
algorithms do not employ any randomization. In his famous paper [19], Valiant has demonstrated how to 
use randomiza­tion in orcler to perform a deterministic task. In par­ticular, in the context of the d-cube, 
he considered the permutation task and showed that it may be accom­plished in time ~(d) with high probability, 
by using a randomized two-phase algorithm. In the first phase, each packet chooses a random intermediate 
destination (with all nodes being equiprobable) and is sent there; in the second phase, each packet travels 
from its in­termediate destination to its actnal destination. In a later paper, Valiant and Brebner [21] 
modified this al­gorithm, thus simplifying considerably the analysis. In particular, they assumed that, 
in each of the two phas­es, packets follow canonical paths (as is the case with the scheme analyzed in 
the present paper). It was es­tablished (for both permutation algorithms) that there exists some constant 
R such that the completion time is at most Rd with high probability. Notice, however, that these algorithms 
make inefficient use oft he communica­tion resources of the network; indeed, the average traffic per 
arc is 0(~) packets per time unit. This performance was improved later by Chang and Simon [6] as well 
as by Valiant [20]. Each of these articles presents an algo­rithm for routing d permutations on the d-cube 
in O(d) time (with high probability); these algorithms result in an average traffic of 0(1) packets per 
arc and time u­ nit. [6] also contains a scheme for routing continuously batches of permutations, by 
pipelining. Related works are also those by Aleliunas [2], Upfal [18], and Ranade [14], dealing with 
permutation algorithms in the but­terfly. In particular, the algorithm of [14] runs in time @(d) (with 
high probability y), uses constant buffer ca­pacity per node, and is deadlock-free, We can obtain simple 
routing schemes for our dy­namic problem, by pipelining successive instances of 250 the first phase 
of the aforementioned permutation al­ gorithms (we assu me for sirnplicit y that p = ~). For example, 
using the algorithm of [21], each node z routes one of its packets every Rd time units (approximately); 
thus, stability may prevail only if ARd < 1, or equiv­alently p ~ &#38;; hence, for any fixed p, this 
simple scheme becomes unstable for large d. Improved perfor­mance is attained if we pipeline successive 
instances of an efficient static algorithm for d permutations, such as those in [6] and [20]. Such an 
approach would lead to a routing scheme which would be stable for p < p with p being some small constant; 
e.g., using the algorith­m of [6] would lead to p N 0.005, which is very small compared to the upper 
bound given in Eq. (2). All of the schemes described above are non-greedy, i.e. they involve idling it 
often occurs that packets wait at their respective origins, while some of the arcs to be traversed are 
idle. As will be seen in $2, avoidance of this idling phenomenon improves performance dramatically. The 
dynamic routing problem of this paper has been dealt with in several articles, which we discuss below; 
all of them consider the case of uniform destination dis­tribution. Abraham and Padmanabhan [1] have 
con­structed an approximate model for this problem, under various assumptions on the buffer capacity 
of the nodes. In particular, they assume that packets advance in the respective paths independently of 
each other; the mod­el involves some parameters, which are determined by solving a system of non-linear 
equations. Greenberg and Hajek [8] have analyzed this problem under the assumpt­ion that deflection routing 
is used instead of shortest path routing; that is, packets may be temporarily mis­routed, rather than 
stored or dropped. The analysis in [8] is approximate too. Varvarigos [22] has formulated a Markov chain 
model for evaluating the performance of deflection routing, and has investigated its steady­state statistics 
numerically. Note that all three [1], [8] and [22] are dealing with the hypercube network. The same problem 
has been analyzed in the context of the Manhattan network (square mesh) by Greenberg and Goodman [7], 
with their analysis being again approxi­mate. Leighton [12] proved that greedy routing in the square 
mesh has very satisfactory average performance. Also, Bouras et al. [5] considered the problem in the 
context of Banyan networks; however, we are unable to follow some of the steps in the analysis in [5]. 
Problems similar to ours were also analyzed by Mi­tra and Cieslak [13], as well as by Hajek and C!ruz 
[9], in the context of the extended Omega network (which is a crossbar switch); it was assumed (in both 
papers) that, for each individual packet, transmission times over the various arcs are independent and 
exponentially dis­tributed random variables. This assumption (called Kleinrock s independence assumption 
) simplifies the analysis considerably; in fact, our problem would have been trivial under this assumption, 
because the under­lying networks would have been of the Jackson type. Such an independence assumption 
is often a good ap­proximation for problems in data networks; on the other hand, this does not apply 
to routing problems in inter­connection networks. Finally, another dynamic routing problem, was an­alyzed 
by Stamoulis and Tsitsiklis in [16], where it is assumed that packets generated at random instants by 
random nodes of the hypercube are broadcast to all oth­er nodes. 1.4 The Hypercube In this subsection, 
we briefly discuss the main properties of the d-dimensional binary hypercube (or d-cube); e.g., see [4]. 
This network consists of 2d nodes, numbered from O to 2d 1. Associated with each node z is a bina­ry 
identity (%d, . . . . Z1 ), which coincides with the binary representation of the number z. For j c {1, 
. . . . d}, we denote by ej the node numbered 2j -1; that is, all entries of the binary identity of ej 
equal O except for the jth cme (from the right), which equals 1. For two nodes z and y, we denote by 
z@y the vector (z~ @yd, . . . . Z1 @yl ), where @ is the symbol for the XOR operation. The d-cube has 
d2d arcs; each arc is directed and connects two nodes whose binary identities differ in a single bit. 
That is, arc (z, y) exists if and only if, for some m c {1, . . . . d}, Zi = yi for i # m and z~ # y~; 
this is equivalent to y = z@em for some m E {1, . . .,d}. Such an arc is snid to be of the mth type; 
the set of arcs of the mth type is called the mth dimension. Note that (z, y) stands for a unidirectional 
arc pointing from z to w of course, if arc (z, y) exists, so does arc (y, z). The Hamming distance between 
two nodes z and y is defined as the number of bits in which their binary identities differ; it is denoted 
by lf(z, y). Any path from z to y contains at least as many arcs as the Hamming distance between z and 
y. Moreover, there always exist paths that contain exactly that many arcs; these paths are called Aot,test. 
It is easily seen that the diameter of the d-cube equals d. In this section, we analyze the efficient 
greedy routing scheme for the hypercube network. As already men­tioned in \ 1.1, the scheme is as follows: 
Each pack­ et proceeds towards its destination through the corre­ sponding canonical path; see the example 
in Eq. (3). Packets advance at their respective paths as fast as p~Ds­sible; that is, no idling occurs 
(hence the characteri~~a­tion greedy ). Also, whenever several packets present at a node y wish to traverse 
the same arc, then priority is given to the one that arrived at y the first. The routing scheme presented 
above is the non-idling version of one of the schemes described in $1.3 (nan~e­ly, of that based on the 
algorithm of [21]). It will be seen in $2,1 that, under this scheme, the hypercube is equivalent to a 
queueing network with certain useful properties. The analysis in ~2.2 deals with the perfor­mance of 
this equivalent queueing network. 2.1 The Equivalent Queueing Network It is straightforward that, under 
our routing scheme, the d-cube may be viewed as a queueing network, with d2d deterministic FIFO servers) 
; each server has unit service duration and corresponds to a hypercube arc. This equivalent queueing 
network (to be referred to as Q) has the following properties: Property A: After crossing arc (y, y @ 
ei ), a pack­et will never traverse again an arc (z, z Q ej ) with j E {1, . . . . i}; this is due to 
fact that only the canonicai paths of the hypercube are used. Therefore, the equiva­lent net work Q is 
a layered network; that is, its servers are organized in d levels, with the ith level comprising all 
arcs (y, y @ ei) for y E {O, ...,2d 1}, i.e. all arcs of the ith dimension. Upon service completion 
at a certain level, a packet either joins a queue at a higher level or it departs from the network. Property 
B: The ezternal arrival stream at each arc (a, z @ei) is Poisson with rate Ap(l p)i-l; streams cor­responding 
to different arcs are mutually independent. Property C: Routing is Afarkoviarr; that is, the next arc 
to be crossed by a packet only depends on the arc just traversed (as opposed to depending on the entire 
path up to that point). In particular, upon crossing arc (Y, Y @ ei ), a packet takes one of the following 
actions: either it joins the queue at arc (y@ ei, Y @ ei EB ej) with probability p(l p)~-i-l for j = 
i+l, . . . . d; or it depart­s from the network with probability y (1 p)d-i. After crossing arc (y, 
y @ cd), a packet departs from the net­work with probability y 1. Different packets make their routing 
decisions independently of each other. Properties B and G can be established by making use of the definition 
of the destination distribution in Eq. (1); see [17]. According to these two properties, propagation 
of a packet P on the hypercube may also be visualized as follows: Upon generation, P decides whether 
or not to cross dimension 1; the probability y that it decides positively equals p. If it does so, then 
it takes its step on this dimension and then it decides whether or not to cross dimension 2; if it does 
not decide to cross dimension 1, then it considers crossing dimension 2 etc. 2.2 The Analysis In the 
previous subsection, we established that, under the routing scheme analyzed, the hypercube is equiva­lent 
to a queueing network Q with Markovian routing. Henceforth, we analyze the performance of this equiva­lent 
network. First, we prove the following result: Theorem 1 The total arrival rate at any arc of the d­cube 
equals Ap = p. Proof: By symmetry among the hypercube nodes, all arcs belonging to the same dimension 
j have the same total arrival rate 6j. Furthermore, each of the packets generated within the d-cube crosses 
the jth dimension for an expected number of p times; this fact is an im­mediate consequence of Eq. (1). 
Thus, the total ar­rival rate for the jth dimension equals 2d.lp. It follows from the above discussion 
that 2d6j = 2dAp, which gives 6j=,Ap= pforall j~{l,..., d}. Q.E.D. The properties of the equivalent network 
Q, allow us to apply a result on the stability of acyclic networks; see [23], p. 246. It thus follows 
that network Q is sta­ble if the total arrival rate for each server is less than unity. By stability 
it is meant that the time spent by the nth packet in the network converges (as n ~ co) to a limiting 
random variable, which is finite with proba­bility 1 and is independent of the initial state. Using the 
result of [23] and Theorem 1, we reach the following conclusion: Theorem 2 The greedy routing scheme 
under analysis is stable for all p < 1. In light of the necessary condition for stability p <1 (see $1.2), 
it is seen that the routing scheme under anal­ysis has optimal stability properties. In fact, Theorem 
2 applies to more general arrival processes. Next, we establish the upper bound for the average delay 
T induced by the routing scheme under analysis. In particular, we will show that T < ~ for all p <1. 
The basic idea for proving this result is as follows: If the service discipline at the servers of the 
equivalent network Q is changed from FIFO to Processor Sharing (PS), then the average delay per packet 
increases; under the PS discipline, Q becomes a product-form network, and its delay is easily computed. 
Recall that under the PS discipline all customers present at a server receive an equal proportion of 
service simultaneousl~ see [23], p. 354. For example, consider a deterministic PS server, with unit service 
rate; assume that it has two customers to serve; the first customer arrives at time O and the second 
at time ~. Upon ar­rival of the second customer, the first one has ~ units of service remaining; however, 
due to the presence of the second customer, she will be served at rate ~; thus, she will depart at time 
~ + 2 ~ = $; similarly, it can be seen that the second customer will depart at. time 2. Notice that we 
are using the term service rate for a PS serv­er (rather than the term service duration ), because the 
time duration for which a customer receives service depends on previous and future arrivals. The proof 
of the upper bound on the delay T is based on Theorem 3 (see below); this is established in the Ap­pendix, 
following the derivation of some technical lem­mas that prove sample-path results. Theorem 3 Let N(t) 
[resp. l?(t)] denote the (random) total number of packets present i.n network Q (resp. Q) at time t. 
There holds iv(t) <,t Ii(t) , vt~o. Note that <,t is the symbol for stochastic domina­tion.; for two 
random variables X and Y, there holds X <St Y if Pr[X > a] < Pr[Y > cr]for all a. Next, we present the 
main result of this subsection. Theorem 4 The delay T of the greedy routing scheme under analysis sati@es 
T<* Vp<i. l p Proof: As established in [23], pp. 93-94, network Q is of the product form, provided 
that it is stable. In partic­ular, the steady-state probability that a certain server of Q hosts n packets 
equals (1 p~pn. Therefore, the steady-state average total number IV of packets present in Q equals X 
= d2d &#38;. This together with Theorem 3 implies that the average total number IV of packets present 
in network Q (in steady-state) satisfies (4) Recall now the equivalence of network Q with the d­cube 
under the greedy routing scheme analyzed. By Lit tie s law (see [11]), the average delay T induced by 
this scheme satisfies This together with Eq. (4) proves the result. Q.E.D. Theorem 4 implies that T = 
~(d) for each fixed p. This is the optimal order of magnitude for the delay, because the average propagation 
time per packet is at least dp under any routing .chexne. Next, we comment on the number of packets stored 
per hypercube node. The steady-state average number of packets per node equals ~; according to Eq. (4), 
this satisfies ~ L d&#38;. Thus, it is seen that, for any fixed p, the average size of the queue built 
at each node is O(d). In fact, one can show that the total number of packets within the d-cube is 0(d2d) 
with high probabil­ity. Indeed, by Theorem 3 and the product-form pro!p­erty of Q, the limiting random 
variable limt+~ N(t) is stochastically dominated by the sum of d2d independent geometrically distributed 
random variables with expect­ed value &#38;. Using the Chernoff bound, it follows that, for t -+ co, 
N(t) ~ d2d&#38;(l + c) with high probability, for any e >0. However, t i w does not necessarily imply 
that the queue-size at each individual node is O(d) with high probability. Finally, we present a lower 
bound on the delay T; its proof (which can be found in [17]) is based on the following idea: Packets 
to cross an arc of the 1st dimen­sion suffer an average delay of 1 + ~ because each Z(l p)t such arc 
operates as a deterministic server with Poismn arrivals; for each of the other hypercube dimensions, 
only the corresponding transmission time is taken into account. Theorem 5 The delay T of the greedy routing 
scheme under analysis satisfies T>dp+p p Vp <l. 2(1 p)  2.3 The Delay Under Heavy Traffic First, we 
establish a universal lower bound on the steady-state average delay T per packet; that is, a bound that 
applies to any routing scheme. Theorem 6 The average delay T per packet induced by any routing scheme 
satisfies ( P T=~ dp+p2d(1_p) Vp <l, ) The proof of this result can be found in [17]. The under­lying 
idea is as follows: We focus on a cut of the network (namely, all arcs of the 1st dimension), and we 
estimate the minimum possible delay induced by this cut. Tak­ing also the propagation times for the remaining 
arcs into account, the lower bound for T follows. Reasoning similarly, we can also prove a sharper lower 
bound, ap­plying to all oblivious schemes; that is, to schemes where each packet selects its own path 
independently of other packets, and insists on traversing that path regardless of the contention encountered 
(see also [21]). For any such scheme, there holds T = Q(dp + P%); see [17]. Note that our greedy routing 
.che,ne is obbvious. Next, we discuss the asymptotic properties of the de­lay under heavy traffic (namely, 
for p -+ 1 and fixed d). Theorem 6 implies that l.imP+ 1[(1 P) T ] > 0; that is, in heavy traffic, the 
delay per packet grows to infinity at least as fast as &#38;. On the other hand, Theorem 4 shows that 
limP+ 1[( 1 P) Z ] < dp for our greedy rout­ing scheme; hence, the corresponding average delay per packet 
has optimal asymptotic properties under heavy traffic (because linlP+ ~[(l p)T] is finite). Below, we 
investigate these properties even further, and present an open question. Notice that T dp equals the 
average queuezng delay per packet under our greedy routing scheme, the average propagation delay dp excluded. 
By Theorems 4 and 5, we have : ~ ~l[(l p)(T dp)] ~ dp. (5) The lower and the upper bounds in Eq. (5) 
differ by a factor of ~. It would be preferable for the two bounds to be within a constant factor (independent 
of both d and p). In fact, the lower bound of Theorem 5 can be sharpened as follows: T dp>adp+p p (6) 
2(1 p) where o. > 0 only depends on p, for all p E (O, 1), The underlying idea is that, for p c (O, 1 
), each pack­et P faces additional contention for each of dimensions 2 ,..., d it crosses; that is, P 
contends with packets that had not entered the path of P up to this point. Nev­ertheless, the lower bound 
of Eq. (6) is not within a constant factor from the upper bound of Eq. (5). It is conjectured that for 
all p E (O, 1), the Iatter bound in Eq. (5) is tight; namely, it is conjectured that T dp > @,&#38;, 
where @ only depends on p. On the other hand, It is easily seen that the lower bound in Eq. (5) is tight 
for p = 1. Indeed, in this case, each pack­et generated at node x is destined for node Z, where each 
entry of the binary identity of z is the complement of the corresponding entry of x; thus, packets generat­ed 
at different nodes follow disjoint paths (recall that only canonical pat hs are used); this easily gives 
that T=d+ -&#38;.  2.4 The Case of Slotted Time In the analysis so far, it was assumed that the time 
axis is continuous. Next, we briefly comment on the case of slotted time. In particular, we assume that 
the time axis is divided in slots of duration ~; all nodes are synchronized to the same clock. Since 
packets are taken to have unit transmission times, we may assume, without loss of generality, that 7 
~ 1 and, in particular, that ~ is integer; otherwise, there will be some waste due to the fact that packets 
do not fit exactly to time slots. (Of course, the simplest case is ~ = 1.) Furthermore, it is assunled 
that each node of the hypercube generates a new batch of packets at the beginning of each slot, namely 
at each time Icr with k E {O, 1, . . .}. The batch size has Poisson distribution with expected value 
AT; thus, the input traffic intensity is the same as in the case of continuous time. In this context, 
it can be seen that the new value ~ of the average delay per packet satisfies dp +T Ts~sT+T< , Vp <1. 
l p Hence, the asymptotic properties of the delay in slotted tin]e are the same as those in continuous 
time.  3 GREEDY ROUTING IN THE BUTTERFLY In this section, we extend the results derived for the hypercube 
to the butterfly network. The d-dimensional butterfly is an unfolded version of the d-cube. It consists 
of (d + 1 )2d nodes, organized in d + 1 levels, with each level having 2d nodes. In particular, for j 
~ .{1, . . . . d + 1}, the nodes of the jth level are denoted by [z; j] where z c {O,..., 2d 1}. For 
j # d + 1, each node [x; j] is connected to two nodes, namely [z; j + 1] and [z @ ej; j + 1]. Therefore, 
there exist two types of arcs: Arcs of the form [z; j] -+ [z; j + 1], which are re­ferred to as straight 
arcs of the jth level; for no­tational convenience, arc [z; j] ~ [x; j + 1] will be denoted by (x; j; 
s).  Arcs of the form [z; j] ~ [z @ ej; j + 1], which are referred to as vertical arcs of the jth level; 
for no­tational convenience, arc [z; j] -[n@ ej; j + 1] will be denoted by (s; j; v).  For our routing 
problem, it is assumed that packets are generated at the 1st level and destined for the (d+ l)st level; 
each node [z; 1] generates packets ac­cording to a Poisson process with rate A. The proba­bility that 
a packet generated at node [x; 1] is destined for node [z; d + 1] equals pHf= zJ(l p)d-H(eIz), where 
J!f(z, z) is the Hamming distance between the binary identities of z and z. For each origin-destination 
pair [z; 1] and [z; d + 1] there corresponds a unique path, which consists of d arcs, one from each level. 
Notice that if Zj = Zj , then the jth-level arc is straight; oth­erwise it is vertical. As in the canonical 
paths of the hypercube, the bits are corrected in increasing index­order. Using the definition of the 
destination distribution, it is seen that packets to traverse arc (z; 1; v) form a Pois­son stream with 
rate Ap; similarly, packets to traverse arc (r; 1;s) form a Poisson stream with rate ~(1 p). Recalling 
that all packets have unit transmission time, it follows that the inequalities Ap < 1 and A( 1 p) <1 
are both necessary conditions for stability of any rout­ ing scheme. Combining these conditions, we obtain 
the following result: Stability may prevail only if pd~f~ max{p, 1-p} <1. (7) Notice that, for given 
A, the minimum value of p occurs for p = ~, where the destination distribution is uniform. For p > ~, 
the vertical arcs become the bottleneck of the system; for p < ~, the straight arcs become the bottleneck 
of the system; see also Theorem i. The routing scheme to be analyzed below is the sim­plest possible: 
Packets are routed in a greedy fashion; that is, each packet advances at its respective path as fast 
as possible. When several packets contend for the same arc, then priority is allotted on a FIFO basis. 
In fact, given that there is only one path per origin­destination pair, greedy routing is the most natural 
scheme arising in the context of the butterfly. It will be shown below that this simple scheme is very 
efficient. Similar to the hypercube (see ~2.1 ), under greedy routing, the butterfly may be viewed as 
a queueing net­work R with ci2~tl deterministic FIFO servers ; each of them has unit service duration 
and corresponds to an arc. The main properties of R are as follows: Property A: R is a layered network; 
it consists of d levels, with the jth level comprising all arcs (z; j;s) and (z; j; v). Each packet receives 
one time unit of service at each level, contrary to the network described in $2.1, where a packet might 
skip some of the levels. Property B: Routing is Markovian. In particular, after traversing arc (y; j;s) 
[resp. (y; j; v)], where j # d, a packet takes one of the following two actions: either it joins the 
queue for arc (y; j+l; S) [resp. (Y@ ej; ~ + 1; s)] with probability 1 p; or it joins the queue for 
arc (Y; j + 1; V) [resp. (Y@ ej; j + 1; v)] with probability P. After crossing arc (~ d;s) [resp. (y; 
d; v)], a packet de­parts from the net work with probability 1. Different packets make their routing 
de~isions independently of each other. Next, we investigate the stability properties of our greedy routing 
scheme; for this purpose, we need the following result: Theorem 7 The total arrival rate at each arc 
(z; j;s) equah OS = ~(1 p). Also, the total arrival rate at each arc (z; j; v) equals @v = Ap. Proofi 
We fix some j s {1,. . . . d}. By symmetry, all straight (resp. vertical) arcs of the jth level have 
the same total arrival rate 6$) [resp. 0$~ ]. As already men­ tioned, each packet crosses some straight 
(resp. verti­ cal) arc of the jth level with probability y 1 p (resp. p); also the total arrival rate 
over all arcs of the jth level equals A2d, because each packet crosses exactly one arc of this level. 
Therefore, we have A2d( 1 p) = 2d6~ ) am~d A2dp = 2df?~), which proves the result. Q. E. I). As in $2.2, 
the sufficient condition for stability of the equivalent network 7? (and of the greedy routing scheme) 
is obtained by applying the result of [23] re­garding acyclic networks; the condition is as follows: 
Theorem 8 Greedy routing on the butterjly is utable if Ap<l and A(l p) <l, or equivalently p~lf~ max{p, 
1 p} < 1. In light of the necessary condition for stability in Eq. (7), it is seen that greedy routing 
in the butterfly h~ optimal stability properties. Finally, we establish the upper bound for the average 
delay T per packet induced by greedy routing. Theorem 9 There ho~ds d(l p) T<~ Vp <l. l Ap+l A(l p) 
 Proof: By Little s law, we have T=;, (8) where N is the average total number of packets present in 
the equivalent network 77, in steady-state. We nc)w consider the network R, which is identical to 7? 
exce,pt for the fact that all of its servers operate under a Pro­cessor Sharing (PS) discipline (see 
$2.2); let X be the corresponding average total number of packets. Since X! is a layered network with 
Markovian routing, we can apply Theorem 3; see also the comment on the general­ity of that result, following 
its proof in the Appendix. Therefore, we have N~~. (9) In the stable case (i.e., for p < 1), network 
fi is of the product form [23], pp. 93-94. Recalling also Theorem 7, it follows that the steady-state 
probability that a partic­ular server (z; j; v) [resp. (z; j; s)] of Z hosts n pack­ets equals (1 Ap)(Ap)n 
(resp. [1 A(l p)][J(l p)] ), Since there exist d2d servers of each of the two types, it follows that 
This together with Eqs. (8) and (9) proves the result,. Q. E. ID. Next, we comment on the number of packets 
stored per node of the butterfly; first, notice that only the nodes of levels 1, . . . . d have to store 
packets. An overall estimate of the expected number of packets per node is provided by the quantity &#38;, 
which satisfies Ap A(I P) def x< d2~ 1 Ap+l A(l p)=q~ This estimate is quite favorable because it suggests 
that the overall average queue-size per node is 0(1) for any fixed p. However, it is not guaranteed that 
this bound holds for the average number of packets stored by the nodes of each individual level. It is 
conjectured that this is actually the case; the following result provides strong evidence for this claim: 
for any j c {1, . . . . d}, the total number of packets stored by the nodes of levels 1 , . . . . j does 
not exceed j2dqP(l + ~) with high proba­bility, for any ~ > 0. This result may be proved by applying 
stochastic domination between the first j lev­els of networks R and R, and using the product-form property 
of l?. Reasoning as in Theorem 6, it can be proved that T = fl(d + &#38;) for any routing scheme in the 
butterfly; see [17]. On the other hand, greedy routing satisfies both T = @(o!) for fixed p, and T = 
@(~) for fixed d and p ~ 1; these properties follow from ~heorem 9. Thus, greedy routing in the butterfly 
has optimal asymptotic properties. An interesting open problem is to analyze the per­formance of greedy 
routing under the assumption that nodes in levels 2, . . ., d have constant buffer capacity.  CONCLUDING 
REMARKS In this paper, we analyzed a problem where the nodes of the hypercube network generate packets 
at random time instants, according to independent Poisson pro­cesses. Each packet has unit transmission 
time and is destined for a randomly selected node; in a special case, the destination distribution is 
uniform. We considered a simple greedy routing scheme, where each packet crosses the hypercube dimensions 
required in increasing index­ order, We proved that this scheme has optimal stabil­ity properties and, 
when stable, it induces an average delay T = ~(d) per packet; the bounds on the aver­age delay were given 
in simple closed-form expressions. Our analysis was based on a new approach, which re­lates the behavior 
of the hypercube (under the routing scheme considered) to that of a queueing network with Markovian routing. 
Using the same idea, we extended the results to the butterfly network, thus proving the efficiency of 
greedy routing in this context. An interesting open problem is to analyze our greedy routing scheme 
in the butterfly under the assumption of constant buffer capacity in each node of the interme­diate levels. 
Regarding the hypercube, it would be of interest to investigate the performance of other greedy schemes, 
such as the one where each packet selects a random shortest path leading to its destination. Acknowledgement: 
The authors are grateful to Dr. Teunis Ott for mentioning the possibility of comparing the FIFO and PS 
disciplines. References [1] S. Abraham and K. Padmanabhan, Performance of the Direct Binary n-Cube Network 
for Multi­processors , Proceedings of the 1986 International Conference on Parallel Processing. [2] R. 
Aleliunas, Randomized Parallel Communi­cation , Proceedings of the Ist ACM SIGA G T-SIGOPS Symposium 
on Principles of Distributed Computing, pp. 60-72, 1982. [3] D.P. Bertsekas, C. Ozveren, G.D. Stamoulis, 
P. Tseng, and J.N. Tsitsiklis, Optimal Commu­nication Algorithms for Hypercubes , J. Parallel Distrib. 
Cornprd., vol. 11, pp. 263-275, 1991. [4] D.P. Bertsekas and J.N. Tsitsiklis, Parallel and Distributed 
Computation: Numerical Methods, Prentice-Hall, 1989. [5] C. Bouras, J. Garofalkis, P. Spirakis, and 
V. Tri­ant afdiou, Queueing Delays in Buffered Multi­stage Interconnection Networks , Dept. of Com­puter 
Science, Technical Report 289, New York University, 1987. [6] Y. Chang and J. Simon, Continuous Routing 
and Batch Routing on the Hypercube , Proceedings of the 5th ACM Symposium on Principles of Dis­tributed 
Computing, pp. 272-281, 1986. [7] A.G. Greenberg and J. Goodman, Sharp Approx­ imate Models of Adaptive 
Routing in Mesh Net­works , preprint, 1986. [8] A.C4. Greenberg and B. Hajek, Deflection Routing in Hypercube 
Networks , preprint, 1989. [9] B. Hajek and R.L. Cruz, Delay and Routing in In­terconnection Networks 
, In A.R. Odoni, L. Bian-CO, and G. Szago (Eds. ), Flow Control of Congested Networks, Springer-Verlag, 
1987. [10] [11] [12] [13] [14] [15] [16] [17] [18] [19] [20] [21] [22] [23] S.L. Johnsson and C.-T. 
Ho, Optimum Broad­ casting and Personalized Communication in Hy­ percubes , IEEE Trans. Comput., vol. 
38, pp. 1249-1267, 1989. L. Kleinrock, Queueing Systems, Vol. 1: Theory, John Wiley, 1975. F.T. Leighton, 
Average Case of Greedy Routing Algorithms on Arrays , preprint, 1990. D. Mitra and R.A. Cieslak, Randomized 
Paral­lel Communications on an Extension of the Omega Network , J. A CM, vol. 34, pp. 802-824, 1987, 
 A. Ranade, How to Emulate Shared Memory , Proceedings of the .28th Annual IEEE Symposium  on Foundations 
of Computer Science, pp. 185-194, 1988. Y. Saad and M.H. Schultz, Data Communication in Hypercubes , 
Dept. of Computer Sciences, Re­search Report YALEU/DCS/RR-428, Yale Univer­sity, 1985. G.D. Stamoulis 
and J .N. Tsitsiklis, Efficient Rout­ing Schemes for Multiple Broadcasts in Hyper­cubes , Proceedings 
of the 29th IEEE Conference on Decision and Control, pp. 1349-1354, 1990. G. D. Stamoulis and J .N. Tsitsiklis, 
The Efficiency of Greedy Routing in Hypercubes and Butterflies , Report LIDS-P-1999, Laboratory for Information 
and Decision Systems, M. I. T., 1990. E. Upfal, Efficient Schemes for Parallel Commu­nication , ~. ~C~, 
vol. 31, pp. 507-517, 1984. L.G. Valiant, A Scheme for Fast Parallel Commu­ nication , SIAM J. Comput., 
vol. 11, pp. 350-361, 1982. L.G. Valiant, General Purpose Parallel Architec­tures , in J. van Leeuwen 
(Ed.), Handbook of The­oretical Computer Science, North Holland, 1990. L.G. Valiant and G.J. Brebner, 
Universal Schemes for Parallel Communication , Proceedings of the 13th Annual ACM Symposium on Theory 
of Com­puting, pp. 263-277, 1981.  E.A. Varvarigos, Optimal Communication Al­ gorithms for Multiprocessor 
Computers , Report CICS-TH-192, Center for Intelli~ent Control Sys­tems, M. I. T., 1990. J. Walrand, 
An Introduction to Queuein.g Net­works, Prentice-Hall, 1988. APPENDIX: THE PROOF OF THEOREM 3 In this 
appendix, we establish Theorem 3, which led to the upper bound on the delay T induced under the greedy 
routing scheme. The proof makes use of several technical lemmas, which establish sample-path results; 
these we present first. Lemma 10 Let there be a deterministic FIFO seirver with unit service duration. 
For a fixed sequence tl, tz, . . . of arrival times, let D1, D2, . . . denote the corresponding sequence 
of departure times. Similarly, let ~1, ~z, . . . be the departure times for a determinzdic PS server, 
with unit service rate, fed by the same input stream. There holds D~~~;, fori= l,... Proof: Clearly, 
we have D1 = tl + 1. In the context of the PS server, the 1st customer will depart at time tl + 1 only 
if no other customers arrive until that time; otherwise, the server wiH be slowed down, and the 1st customer 
will depart later than t1+ 1. It follows that &#38;~tl+l=D1. (lo) It is well-known that the PS discipline 
is umrk­conservin~ see [23], pp. 353-354. That is, the unfin­ished work W(t) at time t is the same for 
both the FIFO and the PS servers considered. By definition of W(t), we have ~i=ii+W(ti )+l, fori= l,... 
(11) We now consider the ith arrival at the PS server, wh[ere i > 2. If W(ti ) = O, then reasoning as 
in proving Eq. (10), it follows that D{ ~ ti+ 1 = Di, Assume now that W(ti ) # O; it is straightforward 
that custom~ers depart from a deterministic PS server in the order they arrive; hence, the ith customer 
may depart only after an amount W(ti )+ 1 of work has been finished by the server. Therefore, we have 
fii~ti+ W(t4-)+l=Di, where we have also used Eq. (11). The proof of the lemma is now complete. Q. E,,D. 
Let there be two streams of events, one occuring at times 71, Tz, . . . and the other at times r~, T;, 
. . . If r~~~~fori=l,..., then the latter stream of events will be said to be a delayed version of the 
former. For exanlple, as ilnpl.ied by Lemma 10, for any fixed arrival stream, the departing stream of 
a deterministic PS serv­er is a delayed version of the one of the corresponding FIFO server. Lemma 11 
Let there be a deterministic FIFO seru­ er with. unit service duration. Let Dl, D2, . . . (resp. D;, 
D;, . ..) be the sequence of departure times corre­ sponding to a jized sequence tl, t2, . . . (resp. 
t~, t;,...) of arrival times. If ti ~ t; for i = 1, . . .. then Di<D~, fori= l,... Proof: There holds 
DI = tl + 1 and D; =max{Di_l, ti}+l for i= 2,. . . ; similarly, D~ = tj + 1 and D; =max{D~_l, t~}+ 1 
for i = 2, . . . Using these facts and the assumption ti < t{ for i=l ,. ... the result follows by a 
straightforward induc­tive argument, Q.E.D. The result to be established next is based on Lem­mas 10 
and 11. We consider the queueing network ~ depicted in Figure 1. This consists of three determini­stic 
FIFO servers with unit service duration, denoted by S1, S2 and SS. Customers completing service at S1 
or S2 either depart from the network or they join the queue at S3; routing decisions are Markovian. Obvious­ly, 
~ is a layered network (see $2.1). We define a sample path w of G as the following collection of information: 
. The ew!ernal arrival times at servers S1, S2 and S3. . The routing decision taken by the ith customer 
up­on service completion at S1 (resp. .52) for i = 1, . . . Clearly, given a sample path w, net work 
~ evolves in a deterministic fashion; in the context of L7, the following holds: Lemma 12 Let ~ be a 
network identical to L7 ezcept for the fact that PS service discipline applies to the servers of G (instead 
of FIFO); see Figure 2. For a particular sample path w, let B(t) /resp. ~(t)] denote the num­ ber of 
customers departing from ~ (resp. ~) during the intervai [0, t]; there holds B(t) > B(t) , Vt>o. Proofi 
First, we consider a network ~ obtained from L7 by changing the service discipline only at S1 and S2 
(from FIFO to PS); see Figure 3. We define as the output w!ream of a server the stream of customers completing 
service therein, including those that do not depart from the network. Notice that server S1 is not affected 
at all by the presence of the other two servers; the same statement applies to server S2. Therefore, 
using Lemma 10, it is seen that the output stream of server S1 in ~ is a delayed version of that corresponding 
to S1 of G. Recalling also that the routing decisions of customers completing service are the same for 
networks G and G , it follows that the substream of customers departing from !J at S1 is a delayed version 
of the corresponding substream in G. Similar statements apply to the streams stemming from S2. Next, 
we consider the stream feeding S3 in @; this stream is a delayed version of that feeding S3 in Q, be­cause 
each arrival at S3 of G corresponds to an arrival at S3 of ~ that occurs no later. [Recali the aforementioned 
comparison of the output streams of S1 (resp. S2 ) in the two networks and the coupling of the routing 
deci­sions.] Therefore, using Lemma 11, the output stream from S3 of ~ is a delayed version of that corresponding 
to S3 of G. The former output stream is delayed jimther when the service discipline at S3 of ~ is changed 
from FIFO to PS. This modification (which yields network o) does not affect the streams of customers 
departing from the 1st level. Therefore, for each of the servers of tit its departing stream is a delayed 
version of that of the corresponding server of ~; this proves the lemma. Its should be noted that customers 
joining S3 may get out of order when changing the service discipline; thus, a particular customer may 
depart earlier from @ than from ~. Nevertheless, this does not affect the validity of the lemma. Q.E.D. 
Next, we generalize Lemma 12. In the context of network Q, a sample path w is defined as the collec­tion 
of information comprising all external arrival times and all routing decisions. Notice that routing decisions 
at each server are identified by the order they are taken, not by the identity of the packets deciding; 
e.g. the 1st packet to cross arc (el @ ez, el ) will advance to (el, el @ e3), the 2nd such packet wiU 
depart from the network etc. Such an identification of the rout­ing decisions is legitimate due to the 
fact that routing in Q is Markovian. As in Lemma 12, we denote as Q the network obtained from Q after 
changing the service discipline of all servers from FIFO to PS. Lemma 13 For a particular sample path 
w, let B(t) [resp. ~(t)] denote the number of packets that have de­parted from Q (resp. Q) during the 
interval [0, t]; there holds B(t) ~ B(t) , vt~o. Outline of the Proofi This proof is done by extending 
the argument used in proving Lemma 12. In particular, one has to replace the FIFO servers by PS ones, 
on a level-by-level basis, starting from the 1st level and proceeding one level at a time. At the jth 
step of this process, all streams stemming from levels 1, ..., j 1 remain the same, while all streams 
stemming from lev­els,. ... d are delayed. The only subtle point of this proof lies on the fact that 
packets may get out of order at certain steps; see also the proof of Lemma 12. Nev­ertheless, this creates 
no difficulty, due to the assumed coupling of routing decisions. If one insists on tracing the path followed 
by a particular packet [say the first to arrive at server (O, el )] it may occur that this changes at 
some step of the process described above; this is of no importance, because the comparison of the vari­ous 
streams still applies, even though the streams may consist of different packets at each step. Q.E.D. 
Now that we have established Lemma 13, we can eas­ily prove Theorem 3, which is restated below. Theorem 
3 Let IV(t) [resp. fi(t)j denote the (random) total number of packets present in network Q (resp. ~) 
at time t. There holds N(t) <,t i(t) , Vt>o. Proof: On a sample-path basis, there holds N(t)= B(t) 
 A(t), where A(t) [resp. B(t)]is the number of arrivals at (resp. departures from) network Q during 
[0, t];a simi­lar relation holds for network Q. Using Lemma 13, we have N(t) s N(t) on a sample-path 
basis. Relaxing the coupling of the arrival processes and the routing de­cisions in the two networks, 
we obtain the stochastic inequality in question. Q.E.D. A careful look in the analysis reveals that both 
Theor­em 3 and Lemma 13 apply to all layered networks with Markovian routing and deterministic FIFO servers 
(pos­sibly with different service times). Thus, if the FIFO discipline is changed to PS, then the total 
number of customers in such a network increases in the stochastic sense. FIFO FIFO Figure P5 1: Network 
!J A/+3, )--Figure P5 2: Network @ Ps Figure 3: Network @  
			