
 SOLUTION OF ELLIPTIC PARTIAL DIFFERENTIAL EQUATIONS USING PARALLEL PROCESSING AND TASKS IN ADA LANGUAGE 
 Shantilal N. Shah Norfolk State University, Norfolk, VA Domain and Problem Decomposition Consider 
the classical example of an elliptic ABSTRACT partial differential equation~ Laplace's equation, An 
elliptical partial differential equation is solved by using parallel processing and domain decomposition. 
Tasks supported by Ada (z) L(u) = ~ 2u + ~ 2----~u: 0 language are used to simulate parallel process- 
 ~x =-~y2 ing on a single processor computer VAX-II/785. Inner/outer iterations and overlaps of regions 
of subdomains are varied to study their effects over a closed convex region W in R, with the on convergence 
of the'solution. given boundary conditions u(x,y) = D(x,y) (2) INTRODUCTION for (x,y) E B(W) = "boundary 
of W". The first generation of a whole new class of computers with more thanone processor appeared on 
 To solve this problem, numerically by domain the scene during the early 1980's. Some of these decomposition 
and parallel processing, we divide are Massively Paralleled Processor, (MPP), CRAY- it into a sequence 
of problems on subdomains of XMP/24 and CRAY-SMP/48. All of these machines W (see figure I). have 
capabilities of parallel processing. One of the major breakdowns in the efficiency of these multiprocessing 
computing systems is the communications between the different processes. D~ D2 0:3 I I I I I I In terms 
of scientific applications this  I I I I I I communication amounts to the passing of numerical I v 
v v v I data between the individual scientific processes. ' I ; I I I I Consequently, in designing 
the numerical methods I<-I I I I I I-> for multiprocessors, algorithms are sought that  I I I I I 
 can be partitioned into separate individual processes and require minimum communications  I <---W ~---I 
--> I I < --I ---W=--- > I I<--I-----Id:z .... I-->I between the processes.   I I I I I The Ada language 
has such capabilities of  I I I I I running parallel processes using tasks and, ILl(u1) = I I L2 (U2) 
----I I L== (U=) = communications between the tasks can be achieved  I bl I I b= I I b= by ENTRY and 
ACCEPT statements provided in the I I I I I language. Many partial differential equations I I I I I 
have an inherent potential for multiprocessing  I C~---I--> I I <-- I ---C:s based around the domain 
of dependence of the I I---C2 I<--.... I-->I independent variables. In this paper~an attempt I I I I 
is made to solve a simple elliptic partial I I I I I differential equation by domain decomposition and 
I Task 1 I I Task 2 I I Task 3 parallel processing using Ad~ language. I I I I I Figure 1 118 Joint 
Ada Conference 1987 That is, the global domain W is expressed as~ k W=UW i=l i (3) a non-disjoint union 
of subdomains W . i On each subdomain W , we define an elliptic i partial differential equation (J) 
 L (u ) = O, i~ i~k (4) i where L is the restriction of L on W i i and the boundary conditions for 
each of the subproblems (4) is given by (J) u (x,y) = D (x,y), (x,y) B(W) i i and (J)  u (x,y) = 
c (x,y) i i where D is the restriction of D on i B(W ) N B(W) i and C will be defined according to 
a i pre-specified algorithm. Solution of Subproblems and global problem  Having achieved, the desired 
domain and problem decomposition of the given problem into several subproblems, i, l~i~k, k individual 
tasks are created, one for each subproblem and each task is assigned one subproblem to solve. After completion 
of all of the tasks, the solution of each subproblem is communicated to the main task for the solution 
of the global problem on the global domain. Since the subdomains are nondisjoint, subproblems on any 
two neighboring subdomains have overlapping boundary conditions. The main task updates these boundary 
conditions by using the solutions obtained from each of the neighboring subproblems. The k individual 
tasks are now assigned the same problem as before but with new updated boundary conditions to solve. 
This process is continued until the desired results are achieved. Various numerical methods available 
to solve global elliptical partial differential equation~ like JOCOBI, S.O.R., can be employed to solve 
several subproblems on sub- domains. The number of iterations performed in the main task to update 
the boundary conditions between neighboring subproblems and assignment of each task the subproblem for 
solution with updated boundary conditions are called "Outer Iterations". The number of iterations performed 
 by each task to solve the given subproblem using the desired algorithm are called "Inner Iterations". 
 Rodrigue and Saylor I showed that under certain matrix nonnegativity conditions, using only one inner 
iteration yields a convergent outer iteration with the additional property that the rate of convergence 
of the outer iteration is invariant to the amount of area shared by the domains in the overlapped portions 
of the region. Numerical Implementations For numerical experiments, let the domain W be defined as 
 W = [0.0,i.0] x [0.0, 1.0] (5) and U(x,y) = x * y (6) over the boundary of the domain W. For a given 
 positive integer n, say n=7, define the grid G = {(x ,y ): x = i/(n+l), y = j/(n+l), i j i j 0"~-~ 
i , j ~ (n+l)) (7) The continuous problem (I) is transformed into discrete matrix problem 2 L(u) = 
A * X = b (8) by using finite difference approximations of the differential operator on the grid (7). 
For simplicity of computational efforts the number of independents tasks are limited to 3. Five different 
cases are studied arising from the number of subdivisions of domain W and their different overlaps. They 
are: Case i: W=W U W, 1 2 where W = [ 0.0, 0.625 ] x [ 0.0, 1.0 ] 1 W = [ 0.5, 1.0 ] x [ 0.0, 1.0 
] 2 Case 2: W=W U W, 1 2 where W = [ 0.0, 0.75 ] x [ 0.0, 1.0 ] 1 W = [0.375, 1.0 ] x [ 0.0, 1.0 ] 
2 Case 3: W=W UW, 1 2 where W = [ 0.0, 0.875 ] x [ 0.0, 1.0 ] I Joint Ada Conference 1987 119  
			