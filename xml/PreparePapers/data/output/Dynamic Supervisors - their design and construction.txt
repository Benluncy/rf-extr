
 DYNAMIC SUPE~ISO~S-THEIR DES!GN AND CONSTRUCTION Mr. D.H.R.Huxtable. Mr. M.T.Warwick. ~lish The paper 
demonstrates the technology necessary to bring the facilities of Supervisor construction and modification 
to the level at which a user can, without a great deal of research and analysis modify his installation's 
Operating System The Supervisor is seen to be a set of processes linked by a formalised control mech~em. 
 I. Basic Structure of a Supervisor Basically a Supervisor provides processes which are executed in 
response to requests by users. In the simplest possible situation, where the machine is 'uniprogram~ed' 
and the processes requested are completed before returning to the users program, all that is required 
is a standard entry process from a user job to Supervisor; con- sisting of parameter setting and a branch 
and link to a standard location. This is shown in Pig. 1. If however the Supervisor process involves 
waiting for an independent autonomous activity (e.g. I/O trsnsfer) to finish, this simple approach is 
evidently wasteful. The solution is to provide two processes, one to initiate the transfer and one to 
complete any actions necessary on its termina- tion, provided a signal is available to indicate that 
the activity has finished, so that the term- ination process can be entered (an interrupt). Schematically 
the procedure may be represented as shown in Fig.2. This introduces the concept of interrupt, and the 
machine can be regarded as having two processor states, one user state, and one entered on machine interrupt. 
Even in this simple situa- tion it is seen that the capability of having more than one autonomous activity 
results in the Super- visor acting as a mechanism for analysing interrup~ and entering the appropriate 
processes. The addition of multiprogr~,ming merely adds to the number of processes which may be executed 
and introduces the concept of priority which must exist in a Supervisor. The concept of priority implies 
that processes may not necessarily be 'run to completion', that they may have to be interrupt ed to allow 
higher priority processes to be executed. This may be represented as follows when activity 2 has a higher 
priority than activity I. It assumes that Supervisor activities are themselves interruptable. This is 
shown in Pig.3. Equally, lower priority processes may have to be queued to wait the completion of a 
higher priority activity. Whilst this concept of priority can be applied to nearly all Supervisor functions 
there is a small residue of processes e.g Ch by their nature must not be interrupted, those which control 
the sequencing of processes, or those which are time dependant (e.g. pocket select on MICR devices) The 
class also includes processes to copy the contents of machine condition registers into data areas before 
further Electric Computers Ltd.! Kidsgrove, Rngland. machine interruption can be allowed, (e.g. Secon 
-dary I/O Status bytes). A considerable simplification of logic occurs if the interrupt analysis and 
process selection of functions of Supervisor are separated from the processes themselves. The machine 
action diagrams now are represented as 3 levels with the highest level controlling the priority selection 
of the activities. (Figure 4 shows the operation of a user progrsm requiring two activities where activity 
2 is of higher priority than activity 1. The action on the reversing of the order of call is also illustrated). 
Separa- tion of the functions allows the processes to be written as independant procedures sequenced 
and multiprogrammed together with the user programs by the analysis and selection "Kernel" or core The 
distinction between user programs and Supervisor processes becomes a matter of process priority and privilege. 
 S,,mmary and Definitions and an exsmple A Supervisor has two logically distinct functions: Analysis 
and Selection Activities executed as a result of the analysis and selection. The Kernel of the Supervisor 
has four distinct actions: I. The analysis of interrupts. 2. Identification of the process associa- 
ted with the interrupt. 5. Marking the process as requring execution. 4. Selection of the highest priority 
process requiring execution and passing control to it. The activities are divided into two classes 
(a) Time Dependant or Immediate Service Processes ~ISPs) This class of processes includes those which 
are lii) Time dependant ii) Cannot be interrupted ii) Cannot call another process and wait for its completion. 
 (b) Interruptable or Tasking Processes (TPs)  These may be  (i) Interrupted for the execution of higher 
priority processes ~i) Wait on the completion of a called process ~i~ No restriction can be applied to 
the depth of nested TP calls in an activity  ~v) The original calling process (e.g. user) must be identifiable 
at say time in the TP ch~ n. Any process terminates with a call for a new process or a return to the 
process which called it. The relationship between the Supervisor functions, and machine states is described 
in Section 8. Figure 5 shows an example of supervisor activity worked out in detail. The example shown 
is of a User Job calling a Supervisor activity which uses I/O. The activities at the time intervals are 
as follows (for definitions of TP and ISP see next section). tl: User Job I is entered having been selected 
by the Time Slice Scheduler (TSS) in prefer- ence to User Job 2. User Job I calls the service of Loader. 
 t2: Loader is a TP and thus User Job I is tWaited' for Loaders completion. The TSS is entered. t3: 
TSS selects the Loader to enter. Loader issues an I/O request. Three ISPs are entered to fire the I/O. 
 t4-t 6 t7: TSS is entered to select the TP to enter. Loader is selected. t8: Loader is reentered. 
 tg: Loader issues WAlT for the completion of the I/O. t10: TSS is entered. Both Loader and User Job 
I are 'Waited'. It thus selects User Job 2. t11: User Job is entered. t12-t13 I/O termination interrupt 
is received. Process 'Unwaits' Loader and fires off further I/O if any further entries have been queued. 
 TSS selects Loader. t14: Loader continues operation. t15: Loader ends and calls End of Process (EOP). 
 t16: EOP deactivates Loader and 'Unwaits' User Job 1. t17: TSS is entered and User Job I is selected. 
 t18: User Job I continues. 2. Supervisor Construction In order to achieve the distinction made between 
the Supervisor Kernel and Supervisor Processes, the processes must be described and related to mach4ne 
conditions in a formal tabular mamner. Supervisor Tables (a) Machine Conditiom/Process Table (MCPT)Q 
every condition which can arise must be associated with a process. In practice there will be a homomorphic 
mapping of many machine conditions on to a single process but if generality is to be preserved there 
must ultimate ly be one process per condition, (some processes will thus be d,,mm4es or failure s) This 
table is used by the Kernel to select the process required to service the interrupt conditions. (b) 
Process Address Table (PAT) Each process required a control block (see PCB below). PAT gives the address 
of the PCB for each process. (c) Process Control Block Table (PCBT) Each entry in the table is a Process 
Control Block (PCB). The PCB holds the linkage and status information and also points to the general 
process information block (PIB). The PCB can be shown as follows:  A Process Control Block a Active 
marker Process Status b Conditional Wait c Called for process d Calling process Process Infor- mation 
e Priority in PBT FIG.6. Slot a : records whether the process is in use or not. (Zero if not in use! 
address of next instruction when interrupted or waiting). Slot b : records the cause of the conditional 
wait whenever two or more parallel processes require interloc~ng. Slot c : identifies the process which 
was called and upon which the present process is waited. Slots a,b and c record the activity status 
of the process and from these three slots it can be found whether the process is in use and whether the 
process currently requires processor time or whether it is in a held position. Slot____.d , Slot e 
: Slo : t_____~ (d) (e) is linkage information to enable a wait condition to be released in the calling 
process when the end process condition arises in the called process. deflnes the process priority for 
multiprogr~mmlug in the Priority Bit Table (PBT -see below), this priority is ~mique. It is used when 
changes to the PBT is made following alteration to slots a,b,c. This slot points to the Process Information 
Block (PIB) which includm: Physical location of process Process control details privilege status protection 
status type marker (ISP or TP) alternative process marker testing marker Register dump area Second 
or Subsequent calls on the process. Priority Bit Table (PBT) This table is a priority ordered set 
of markers indicating whether or not the process of a given priority is available for execution. Look 
up of this table is defined as producing the priority level number. It is necessary to have am efficient 
method of selecting the next process to use the processorsas this mechanism is used with a very high 
frequency. No TP can be entered without this scan being performed and the Supervisor efficiency depends 
on this table and the operations on it. The name ofthe table suggests its construction i.e. as a bit 
list. The mechanism for scanning of such a list should not involve an instruction loop. (See Section 
8). Priority/Process Table (PPT) This table enables the priority level number obtsined from a scan 
of the PBT to be converted to a reference to a PCB and thus define the process which is to be executed. 
This two stage conversion technique enables the relative priorities of the processes to be eh=~ged 
by redefini- tion of the PPT. 3. Supervisor Kernel and Asso@iated ISP's The above five tables hold 
the information necessary to control the action, operation, aud linkage of the processes. The action 
of calling a process and entering it are seen,in relation to the tables, to be: I. Machine Condition 
(perhaps caused by a SVC) defines a process from the MCPT. 2. PCB is found for this process from the 
PAT. . Linkagesand activation are established in the PCBT. . Summary of revised status conditions inserted 
in PBT. . Multiprogrammlmg action finds next priority to be entered from PBT. . Priority Level is converted 
to process using PPT. Fig. 7 illustrates the action of the Kernel and its relationship to processes 
(Line I is the division between the processes and the Kernel itself). The machine interrupt is received 
and is analysed (Block I). This is not in general a one level activity and the further analysis of the 
cause of an interrupt may be required. From the analysis a process is determined using the MCPT (Block 
2). The process type is found from the PCB (Block 3). This may be an ISP or TP, if the latter then the 
information about the TP is passed to a special ISP (TP set up, see below). Thus the Kernel only causes 
directly the entry to ISPs. Following the operation of an ISP there can be 4 conditions: (a) A further 
ISP is requested and a further determination of the process is required before the Kernel loop is reentered 
(Block 4).  (b) An interrupt has arisen since the ISP was entered and the interrupt analysis (Block 
I) is reentered. (c) No ISP has been named as successor and a TP has beau selected for execution.  
(d) No ISP has been nsmed as successor and no TP has yet been selected.  (e) A TP has beau entered. 
  Conditions 'a' 'c' &#38; 'd' are identical since the implicit successor ISP in conditions 'c' &#38; 
'd' are the TSS and Exit processes respectively. The Supervisor therefore requires a basic set of ISPs 
for its working, four are detailed as follows: (a) TP Set Up. An ISP is required to set them that a 
choice of a process as a up the entry conditions for a TP. TP instead of an ISP entails am extra This 
process, ~rking on the PCBT and overhead of one critical path time. PBT, activates the process by the 
~n~ertion of the entry address (PCB (c) Register dumping. As an ISP is Slot I) into Slot 'a'. If the 
TP is uninterrnptable and must leave itself in use then an addition is made to in such a condition that 
after its the list of outstanding calls. operation, it can be reused there is never any requirement to 
dump or re- (b) Time Slice Scheduler (TSS). When no load any registers on its account. further ISP is 
required this ISP is However the registers of a TP must be entered to select the next TP for preserved 
on amy interrupt. This execution. dump and reload time is part of the (c) Exit Process. Following the 
selection critical path function of process entry and is an important factor in of a TP an inspection 
is made of the the efficiency of Supervisor. It is interrupt register and if no interrupt shown in the 
section of hardware that condition exists the procedure for a multistate processor helps solve entering 
the process is undertaken. this problem. This consists of reestablishing, necessary, the TP registers 
and if (d) TP as a normal program. Every TP is setting the conditions for its execu- fully interruptable 
and hence can use tion (machine state, interruptable every facility of the Supervisor. status, interstore 
protection). Supervisor TPs can call other Super- visor TPs to say nested depth, but (d} End of Process. 
This ISP is entered excluding recursion. Supervisor as termination of any TP, and resets processes and 
user job processes only the 'Wait' condition in the POB of differ in respect of their priority the calling 
process. and the privilege they are given to utilise machine facilities and resources from which the 
normal user 4. Kernel/Process Relationships is banned (in order to preserve the installation integrity). 
The It is perhaps relevant to comment on some protection or privilege is established aspects of the relationship 
of the processes and by the ISP which exits from the Kernel. the Kernel and between processes themselves. 
(a} I.S.P. Considerations (e) Process Independauce. Processes interact either via data tables or (a) 
The overhead of entering a TP the Kernel. Providing these tables are indirectly addressed each process 
demands that ISPs are linked cam be addressed independent of the directly to the Kernel, and Kernel and 
of every other process. executed 'inline' with it. The base address of the list of table This overhead 
is discussed addresses can be kept either in a further in section 4(b) &#38; 7. fixed store location 
or a register. (b) ISPs c~not be interrupted and thus c~not use the interrupt facilities of the machine 
to call Each process in this way becomes a separate program segment which requires no address linkage 
outside itself. Thus a process need not be composed successor processes. with the remainder of Supervisor, 
but (c) The entry and exit 14n~ages are formalised simply by convention- al use of register or store 
locations~ thus preserving the independanee to the Kernel from exist as part of a user program. This 
enables a user program to con- tain within itself a Supervisor process which it requires, and the mechanism 
(a process called by a SVC) for entering a new process in the any process. Supervisor tables allows it 
to be (b) Timi~ Overhead. When a TP calls an used as a normal Supervisor process. ISP the critical Supervisor 
path is only executed once. However when it calls a TP the path is executed twice. The first execution 
is on the call for the TP the second at the conclusion of its execution when the called process ends 
by issuing an SVC. It follows 5. 0onstruction and Development of Supervisor Initial TestimK The implementation 
and initial testing of a Supervisor is a relatively simple task within the formal structure described 
above. Initially a sufficient set of processes must be defined in order to deal with the n~n~mum set 
of conditions necessary to run the machine i.e. the Kernel, the ISPs to select and enter TPs a set of 
simple TPs and ISPs to provide I/0 and Loading functions, and a set of dun7 or failure processes for 
the undefined activities. Once this framework has been established, the alteration of Information in 
the tables and the provision of new processes is a simple procedure and one which can be automated. Thus 
the Supervisor can be built using bootstrap techniques. Examination of the tables and the structure 
show that the following information is required: (a) Association of process number with a machine condition 
(MCPT table) (b) Definition of Priority (PPT) (c) Definition of the information to be inserted into 
the PCBbyan ISP, and the PAT entry made. (See Section on Supervisor tables for details). Under the artificial 
conditions which hold during Supervisor implementation the ability to add (by redefinition of a dum~y) 
a new process together with Post-Mortem TPs (and other s~m~lar processes) gives a sufficient mech~isation 
for this phase of development. This process can be used to interchange tested processes after the system 
has been comm4ssioned. For example it may be necessary to replace the Job Step Sequencing process to 
reflect changes in the User environ- ment on a time of day basis and in this case the insertion ISPwould 
be called f~'em the process ~nieh deals with clock interrupts. This ISPmust be Eivsn the lowest priority 
of Supervisor process es ~ if a 'Wait' condition exists in the POB ~abls, it must exit and recall itself. 
6. On-T.4ne Provision of Alternative Processes Tasking Processes The above structure is defined around 
a one to one correspondence between interrupt condition and process with subsequent analysis within a 
process if required (e.g. I/0 end of transfer analysis) and a calling of further processes consequent 
to this analysis. The facility of dynamically providing specialist processes for use of privileged users 
is a simple use of this structure. Such a dynamic process must not involve changes to sAY of the processes 
which call the one which is being supplemented by an alternative. A decision process is therefore used 
to select the required process according to the conditions. In order to do this the followimg operations 
must be performed: (a) The existing process (if any) must be renumbered (b) The decision process be 
inserted in place of the existing process  (c) The alternatives inserted and allocated to spare process 
numbers  The condition under ~hich various alterna- tive processes are selected are numerous, some 
examples are: user classification, special peripheral conditions, time of day, operator supplied data. 
Thus most of the decision processes may have to be specially written by the user. IS Processes The 
mechanism of replacement end ren-mlng can be extended to ISPs. In general it will be a requirement that 
the decision process itself an ISP and that it does not cause an unacceptable overhead. If the ISP is 
exceptionally time critical this method may therefore be unacceptable, in which ease the ISP must be 
written to include all the alternatives. This apparent lack of flexibility is un- likely to be important 
since most of the ISPs are not concerned with processes directly involved with a User, but with system 
oriented functions (e.g. I/0, Time Slice Scheduling ere). 7. On-Line Testing of New Tasklm~ Processes 
 The method described above for handling alternative processes is obviously well suited for allowing 
an alternative process to be under test. Establish of a TP for test The procedure for inserting alternative 
processes described above provides the basic mechanism. There are however some important differences. 
 (a) Both the alternative and the original may have to be executed.  (b) The process ~tnder test must 
operate entirely within a copy of the Super- visors data space.  (c) All processes called by the process 
under test must also be executed on the data copy.  (d) Only processes which do not change the state 
of other parts of the system  (e.g. issue I/0 instructions to a system device) can be allowed to operate 
on the data copy. Thus the decision process described above becomes as Test Management Process, which 
carried out the above functions of change and test. The conditions of each test must therefore be established 
so that the correct sequence of operations can be carried out. As with alterna- tive processes a TP must 
be provided, with the following parameters: I. Identification of process being 'replaced'. 2. New name 
for the exlsting process.  3. Address of the space for data copy (for input to an internally called 
tData Copy' ISP).  4. Narker to indicate if existing process is to be executed, and possibly the address 
of its parameters (they may be different from the new version!).  5. Specification of processes to be 
executed on the copy data before execution of the test process (e.g. substituting simulated devices for 
system devices involves chauglug the system device table) together with  address of their parameters. 
These processes may be existing Supervisor processes (in which case the specification would be in the 
form of an SVC) or be supplied by the programmer. 6. Information identifying the process under test 
(see section 2 Supervisor Construction). . Processes which may be automatically called and which are 
permitted to be executed on copy data. Execution of process under test condition s It is evident that 
a process under test is entered with a different data address and that any normal processes that are 
called must also operate on the data copy. Further a check must be made that the process is valid for 
operation on copied data. The PCB of a test processor must therefore contain a Test Marker, which is 
transferred as a Temporary Marker to any called process. The existance of either Test Marker causes the 
Temporary Marker to be set. The Temporary Marker, unlike the Permanent Test Marker, is cancelled when 
a process is terminated. A marker denoting ability to operate on a data copy must also be provided. For 
safety all processes are assumed to be in this category unless otherwise specified by the progr~,mer. 
 Any errors caused by a test process (e.g. invalid operator) must be regarded as a normal user error, 
including the case when the process is only temporarily under test. Entr 2 to Test Processes SVC Process. 
The Test Process is entered by the normal SVC mechanism. If the original process is required for execution 
then two sets of parameters must be created, and the two processes will act on separate data copies in 
an interleaved fashion. Other Interrupt Processes. Sometimes how- ever the process which is be~ tested 
is not entered directly, but either via a higher level process or as a result of a non-program generated 
 interrupt. The first of these is merely a slight logical extension of the direct entry process described 
above since all processes are on the same control level regardless of the 'logical level' within a 
series of processes. The entry from non-program interrupt does require a special facility. This facility 
must simulate a supervisor interrupt and cause the test process to be entered as though from the Kernel. 
The simulation consists in establishing within the copy data space the conditions which would have been 
set had that process been entered nor,~lly i.e. it acts as a substitute for the ISP which always precedes 
a TP which is dependant on machine hardware registers (e.g. Secondary Bytes of I/O ch~-nels). Testiu~ 
IS Processes Since any ISP can be replaced by a TP this problem can, in most circ,~tances, be reduced 
to an example of TP testing. However such a replacement may cause the conditions which necessi- tate 
the use of an ISP to be invalidated, e.g. the time conditions. When such conditions occur it is impossible 
to provide a general facility of the ~rlnd described for TP testing. The ability to replace processes 
can be used however to replace the original by one which whilst allowing the timing conditions to be 
met does allow alternative process to be selected. With modern machine design, and autonomous peripheral 
and communications systems the need for time-dependant ISPs is very much reduced. The limitation in testing 
a new ISP is not therefore likely to prove a serious problem, and in no way diminishes the value of the 
system described. 8. Hardware and Efficienc2 Consid- erations The success of the design of the Supervisor 
depends on three main hardware considerations which all influence the timing of the critical path. a. 
Multiple Processor States and Registers It has been illustrated in previous sections that the calling 
of processes is a nested procedure. Ideally every level of the nest of calls requires its own processor 
state and registers. This enables the nesting of process calls to operate with no dumping or re- loading 
of state registers. The illustrations demonstrate the require- ment for at least three levels, a user 
level, a Supervisor TP level, and a Supervisor ISP level. b. Interrupt Analysis The interrupt system 
must give the maximum assistance to isolate the con- dition of the interrupt in hardware. At least the 
first level analysis should be a hardware function. c. Time Slice Scheduler and Exit process These processes 
should not contain an instruction loop. This imposes a requirement for some type of search instruction 
and also a single instruc- tion to load registers. The Supervisor design relies on the multiprogrs~ming 
of nearly all processes including user jobs. Since there are likely to be of the order of a hundred such 
levels, a fast search mechanism is vital. S2stem 4 The above three requirements are met on the System 
4 r~n~ge of English Electric Computers. This range is compatible with the R.C.A. SPEOTRA 70 which uses 
the IBM 360 order code, but differs from the IBM 360 in having a different set of privileged instructions 
and also four (instead of two) processor states. The use of the four states of this System is s,,-~n~rised 
in Pig.8. a. Multiple Processor States and Registers A s~mmary table of the proportion and usage of 
a multi-state processor is shown in Fig.8. This shows that either of the following can occur without 
register msnipulation. (i) The operation of a user job to be sus- pended while a hardware originated 
interrupt is serviced by a Super- visor TP or ISP.  (ii) A user job to request the service of a Supervisor 
TP which itself requires the service of a Supervisor ISP.  In the illustration of the linkage require- 
ments of processes (fig.5) the only register dumping and reloading occurs at times t11 and tIR when processor 
state PI changes its operation from user job I to user job 2 and then reverts to user job 1. b. Interrupt 
Analysis The interrupt system causes on interrupt the setting of a flag in a 32 bit register. The hardware 
also sets a value in a P3 register which allows an immediate determination of the process. If the interrupt 
is an SVC the call number is also ~mmediately available in a further register. c° Time Slice Scheduler 
 In the System 4 instruction code it is possible to scan a bit list for the first zero (or non zero) 
entry by use of the Translate and Test instruction. Following the operation of this single instruction 
acting with a specially constructed translation table the position of the zero bit is indicated by the 
contents of two registers. This technique is used to scan the PBT. Supervisor Efficiency. In the description 
of the Kernel it was established that a Supervisor TP is subject to the overhead of the critical path 
time. The efficiency of the Supervisor can therefore be adjusted by m~img very high frequency processes 
 into ISPs. In figure 5 various I/0 processes are shown as ISPs not because they require to run un- interrupted 
but because of this fact. Very few processes fall into this category in practice apart from I/O operations. 
Placing such processes into the IS category allows I/O opera- tions to be used by Supervisor TP without 
register dump4ng. Clearly the fewer processes made uninterruptable the better control can be placed on 
the priorities of processes and the easier it is successfully to service time dependant devices. MicroprogrAmm4 
nF. Supervisor efficiency will be further enhanced if the invariant processes of the Super- visor are 
built into the hardware. The paper has demonstrated the possibility of the invariance of the Supervisor 
Kernel, it can thus be micro- programmed. With the development of slow write/ fast read memories it will 
be possible to place the ISPs into hardware to be used as 'extracodes' (as on the ICT ATLAS Computer) 
without sacrificing the flexibility of the system. 9. Documentation of Process and Table Usage Each 
Supervisor process hav4~ been isolated and formalised is potentially replaceable and documentation is 
required to establish the inter- relationship of each process with other processes and tables. Figure 
9 represents a tabulation of the interrelationship of P 4. This shows the con- dition upon which Pi is 
called, its table usage, and the chain of process calls arising from the execution of Pi" It is possible 
to represent the total set of interrelations of the Supervisor on a single table. Each process dependency 
is easily seen and an installation requir4~g to replace a Supervisor facility can replace Just the required 
process chain without requiring knowledge of the Kernel or other processes. Such formal documentation 
can obviously be built in to the Supervisor and used as part of the Test Management Process for guiding 
progr~m, ers. 10. Sln.m,~'.~" The Supervisor is only entered by mac h i me intexTupt, each of which 
is seen as a request for the activitation of a Supervisor process. This may itself make a further analysis 
and request a further activity. The interruption can be hard- ware originated such as a termination of 
an input/ output operation, or program initiated when a program requests the operation of a Supervisor 
serviee. Some Supervisor activities are of high frequency, some are time dependent, some of high priority. 
Other activities can be multi- progrA--.ed. Internal processes of Supervisor require to use other internal 
processes. With these considerations in mind the Supervisor is seen as a set of 'processes' con- trolled 
by a Kernel within a formal data and linkage structure. Each process performs a distinct Supervisor activity. 
The processes are of two types: those which are interruptable and those which can be multiprogr-mmed. 
The first type satisfy the considerations of high or 4mmediate priority, and high frequency use. The 
second type satisfies the requirements of the parallel activities. The User Job is seen by the Supervisor 
as an addition to these processes, that is, no distinction is made between the tasks produced by Supervisor 
processes and those by User Jobs. It is shown that all processes can be entered by the same formalised 
procedure, end that the formalised linkage mechanism ensures the independence of all processes to the 
extent that they do not require to be compiled or composed with the Kernel, but can be embedded in a 
User program. FormAl decision tables and machine interrupt conditions direct the execution of the Supervisor 
Kernel. The Kernel is seen as being independent of every process, thus enabl4n 5 the Kernel to become 
a direct extension of the machine hardware. The Kernel is shown to be ideally suited to the use of microprogr~mm4ng 
techniques with no loss of flexibility or generality. With the advent of fast read/slowwrite memories 
it is seen to be possible to retain the flexibility, whilst micro- progr~.m4ng frequent used routines 
and thus Improvimg Supervisor efficiency. With the modularity and formalisation of Supervisor it is 
possible to document in tabular form every interrelationship of the Supervisor activities to the extent 
that such a tabulation can define the total effect of any alteration to the Supervisor. 11. Conclusion 
The problem of providing a single operating system for m~ny diverse user requirements within a single 
environment is seen as principally a requirement to provide a completely flexible Supervisor, in which 
every process is replaceable, and which allows simple ~n.ertion, deletion and replacement of its parts. 
The paper has described the design of such a Supervisor and has shown that the followi~ objectives can 
be met: Ca) Efficient operation (b) Easy implementation (c) Formalised and modular structure (d) A 
basis structure which allows, by mioroprogr~--4 nS, substitution of hardware for software facilities, 
without losing any flexibility  (e) Alterable by regeneration; by dynamic addition or replacement of 
protested processes; for dynamic testing of processes; for selected classes of users. 12. Acknowledgement 
This paper is presented by permission of ~nglish Electric Computers Ltd. The authors wish to acknowledge 
many hours of discussion with their colleagues and particularly Mr. A.Willi~- and Mr. R.C.Hutton., who 
are responsible for the implementation of a Disc Operating System Super- visor for System 4-50/4-70 based 
on the principles described. ~J o --~ ! ~ltl d .o s~L 1 o m °i o o.t-~ m ~J H H o ~ m ° m ~ ,-.8 
[ E OT.-. I __ .~ ~ +~ ....... / ~o .r-I 4 -~ .r4 ~-~ .~ .~ ~£ .~,.- ,,~, -- oo _,A~ ~ .~ I~ < e'~ 0o 
~o ~-.~ ~~ ~ q -~ ~ - ~I~.t~ ,~.I,I1,,, . . . . .I~~na~-~o~=ion o~ :,~. . . . ,,,,,1 0-.I .,~ ~ ~ --- 
l=~~~--~ ~ ~ I ® ~I ---1~ ® ~ < ° ® ]'~< .e..I ~'~ .... 0.1. ~ o ~ ~ ~o o ~ o~ [-_J CO q~ q~ Cd r ....... 
rJ C~J ~ -el ~ 0 0 H 0 ~ Processor State P1 P2 P3 P4 Status Use Fully Jut erruptable User Job 
Processes Fully interruptable Supervisor TP Uninterruptable Supervisor Kernel except for machine and 
ISPs failure Uninterruptable Machine failure conditions PIG.8. Use of Supervisor States try ProgrA...ed 
change of processor state Programmed chauge of processor state Normal machine interrupt Machine failure 
interrupt  Block I Machine Interrupt Anslysis I Block 2 Process Determination (from MCPT) I Block 
3 Process Type? ISP or TP (from PCB) ISP Line 1 m m m I Execute ISP Condition ' b' Condition 'e' 
 A I Block 4 Determine next Process b i | | m I Condition a,c,d  Ii xeoute P I FIO.~ i Supervisor 
Kernel, flow diagram. Zine 1 i ii ,llll Process Directly Indirectly Called by Uses Tables calls P1 P5 
P6 P7 MCPT entry 4 T 3 (~W) uses T4(W) T 3 (~W) T 4 (R) PIG.9 Description of Pi   
			