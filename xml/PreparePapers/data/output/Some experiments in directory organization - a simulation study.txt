
 Some experiments in directory organization - a simulation study Allen Reiter Matnematics Research Center, 
University of Wisconsin Madison, wisconsin 537~6 A~ST~ACT Using a simulation model, experiments were 
conducted on various directory organization schemes and tneir performance implications. In particular 
we tested the effects of a multiprogrammed environment on system throughput for retrieval operations. 
Analysis of the results shows tnat different factors are relevant to performance for tne various systems, 
and tnat under some circumstances ISAM and haSh-Coding may lose tne advantages they possess over B-trees 
in a stand-alone environment when multiprogramming is used. Some results of sharing data among simultaneous 
users are also presented. Computing Reviews Category -4.6 (software evaluation, tests, and measurements). 
 Key words and phrases: B-tree, directories, hash-coding, index sequential, performance analysis, tnrougnput 
prediction. I. I~TRODUCTION A central problem in the implementation of data management systems is directory 
organization. We are given a large collection of information divided into units we call records; with 
each record tnere is associated a unique identifier. He are to organize tne records in secondary storage 
so as to facilitate access via the identifiers. what "facilitate" means in this context depends very 
mucn on the application viewpoint. Various commonly Sponsored by tne United States Army under contract 
Number DAAG 29-75-C-~24. The autnor is on leave from tne Computer Science Department, Technion -Israel 
Institute of Technology, Hai£a, Israel. used tecnniques differ widely in tne storage required as well 
as in the execution time for the basic processes: initial creation, update (in place or otherwise), 
deletion, random retrieval of individual records, and batch retrieval of all or some o£ the records in 
key or random sequence. It is commonly accepted tnat no one method is clearly superior to all otners 
in all circumstances. At tne same time few tools exist today wnicn help a system designer select the 
organization most appropriate to nis needs. The proolem is complicated by tne fact that since software 
development costs to support a given organization are nigh, the user must often rely on generalized software 
(GDnS) provided Dy his computer manufacturer or otner vendors. Such software is usually created by "seat-o£-tne-pants" 
metnods witnout clear understanding o£ the consequences of the design trade-o~fs. Indeed, methodology 
 for systematic study of tne problem is virtually non-existent today. Attempts at modelling the proDlem 
tall into two categories: analytical models and simulation studies. In tne former, one attempts to write 
down an objective cost function, which includes parameters for system design, usage modes, and hardware 
configuration. We note nere tne works of Severance [15] and Carsenas [2]. A detailed analytical model 
of IS~v*'s IaA~ [5] was part of tne FUHEM project ([13], [14]), one of tne earliest efforts in tnis area. 
 In addition to the usual problem (common to all modelling tecnniques) of ootaining reliable data on 
system usage, analytical models frequently do not predict system performance with nigh accuracy because 
they lack means of aescriDing system dynamics. As will be seen below, different data organizations exhibit 
different performance characteristics under light and heavy loading o£ a multiprogrammed system. Results 
obtained by studying performance in a stand-alone mode of operation do not generalize in a straightforward 
way to tne actual run-time environment and may be misleading. Tnis author Knows of no attempt to combine 
an analytic (static) system description with a dynamic (e.g. queue-theoretic) system model perlormance 
data for orqanization tradeofts. to obtain directory A simulation model is typically microscopic, reilecting 
the organization or the actual system component by component. FOrUm II [14], designed for l~a~i [5] and 
parts of IMS [7] apparently contained no provisions for multiprogramming. A manu£acturer-supplied mouel 
for his own system is described in [I~] ; it does not allow for comparative evaluation o£ other systems. 
 Kererence [I] describes a simulation study of several record organizations including ImAm. In that study, 
CPU time was ignored, only one disk unit was simulated, and the disk scheduling algorithm was first-come-first-served 
 (F~). Under tnose assumptions multiprogramming might not affect the system performance. ~ere we are 
considering additional factors sucn as multiple uisKs (providing an opportunity lot overlapped processing), 
non-zero CPU time, and a disk scheduling algorithm wnicn takes advantage of the longer queue sizes in 
a multiprogramming environment to save on seek time. These factors alter tne situation markedly, as we 
snall see. rne present work describes experimentation with three different directory organization schemes. 
The vehicle was a simulation model of GDMS's designed to handle a wide range of systems and data organizations 
[ii]. The scnemes are well Known and widely used: "standard" index sequential as typified by the I~ [5] 
and U~IVAC [16] versions, a m-tree [8] scheme similar to that used in CDC's ~COPE Indexed bequential 
[3] and in the autnor's HODS [12] systems, and a hash -coding scheme used in many variants. (All are 
examples o£ block-structured directories, oriented toward secondary storage representations. Our model 
did not retlect the internal storage structures which are relevant only for in-core processing.) The 
oojective was to uetermine system tnrougnput under various conditions. Tne underlying system arcnitectures 
were taken to be identical. Or course they are not, in tne real systems. One advantage of simulation 
over real data oase experiments is that one can factor out details considered extraneous to the issues 
at hand.) The data layouts were taken as similar as possible. only retrieval tasks were studied. These 
form Dy far tne most common class of tasks in real systems. Also, some types of updates are sufficiently 
similar to retrieval in execution tactics tnat our results should be valid for them as well. £ne actual 
directory update logic in real systems is highly complex and often rather arbitrary; we chose neitNer 
to invest the effort required for accurate modelling of sucn systems, nor to redesign them. Tne main 
oody of the paper summarizes and discusses our results. Details which may De relevant to otners in reproducing 
our results are included in the Appendix. II. T~E SYSTEMS A. ISAM is oriented toward the cylinder-track 
architecture of disks. Records are stored in key sequence in contiguous areas. One system of directories 
leads us to the right cylinder; this is fixed at file creation time and never changed suosequently. An 
auxiliary directory on each cylinder ("track index") leads us to tne right track. Additions suosequent 
to creation necessitate track overflow cnains: tnese records, located on the same cylinder or in a separate 
area, can be reached only by a sequential traversal of the chain. ~nile tne contiguous placement of records 
is meant to lead to rapid sequential retrieval, the overflow tecnnique wnich it induces may lead to performance 
degradation (particularly for random retrieval) and necessitates frequent restructuring of the files. 
 S. B-tree is completely olocK-oriented, and ignores disk architecture in its design philosophy. oata 
and directory olocks may De scattered tnrougnout the file space. Records are initially placed into a 
single block. ~nen the DIock fills up, it is split into two (preserving the key-sequence of tne records) 
and a directory olock is set up with pointers to the two. As data blocks ~ill up they are split, witn 
pointers added to tne directory. ~nen a directory olocK £ilis up it too is split, witn levels added when 
necessary. As tne growth is fully automatic, the suosequent additions are handled by tne same mecnanisms. 
Sequential retrieval may tnus oe slower tnan I~A~ (because logically contiguous blocks need not be close 
pnysicaliy); on the other hand, aosence or overflow chains may lead to faster retrieval. ~ore flexible 
use of directories frequently leads to one fewer directory level tnan I~A~. C. Hasn-coded directories. 
A contiguous set of blocks is allocated to hold tne nasn table. Each block forms a oucKet whicn holds 
identifier-pointer pairs. An identifier is transformed to a block record address wherein the desired 
record may be found. Should an index olocK overflow, a olock from the data storage area is allocated 
and linked to it. Unlike the preceding, whose number of levels is a logarithmic function of the number 
of records, a nasn table always has u,~ xevel; for loading under 90% the proDaDility o~ an overflow 
olock is very small, rnus random retrieval can De expected to De very fast. There is no way o~ retrieving 
records in Key sequence otner than a sort on tne entire nasn taole. ~etrieval o£ tne entire file in random 
sequence can De accomplisned oy a sequential scan o£ tne hasn table; for tn~s mode o£ operation comoining 
several records to one DIocK may de use£ul. Ill. ThE EXFE~IMS~TS ~e wanted to translate the qualitative 
discussion aoove into quantitative comparative information £or a typical application, while varying several 
parameters. In particular we wanted to measure tne in£1uence o£ a multiuser environment on tne oi~rerent 
systems. Tne nypotnetical data oase consisted or a tile (~% Zull) for 5~,~ records 0~ oytes long, 
witn iD-oyte Keys. Frocessing consisted of retrieving records randomly or sequentially; tne central-processor 
time (including system overneaO) was crudely modelled at approximately 5-4~% ot tne total stand - 
alone processing time. For nasn-coOing we also tested sorting tne nasn taole. Two configurations were 
tested: i) a small one, witn two 2314-1 disks connected via a single cnannel; ii) a large one, witn 
 eignt 231~-I disks connected in parallel via each o£ two channels. ~or (ii), tne CPU was usually taken 
to de 5 times as ~ast in order to avoid saturation. Tne numoer o£ core Dut~ers was also varied. IV. 
TnsO~bTICAL oACKGRuU~D we ~irst establiSh some general results on expecte~ system throughput as a £unct~on 
or multiprogramming. Let r denote tne degree or multiprogramming, n the numoer o~ disks, B the total 
numoer of DiOCKS tO De processed, and r the time required to process them. Tne system throughput rate 
is uetined (here) as o/T. Assume that eacn task has one I/O request outstanding a~ any moment, and that 
toe requests are unl£ormly oistriouteo over the n disks. Let i denote t~e numoer of disks with non-empty 
queues at some given moment; tne queue length at the active disks is on the average r/i. ±ne prooaoility 
tnat m servers (ois~s) are ~ole is given oy (see e.g. [4], p. I~): 0 o m vc p(m;r,n)= (I- (re+v)/n) 
(I) v=~ Let t(~,r) denote the mean time to service one olocK at one server when i servers are active, 
t consists o£ seek tl~ne + rotational delay + data transfer tlme + tlme spe~it waiting for a channel. 
 un the oasis o£ the above it can de ShOWn that the mean system throughput is given oy o/r=u (r ,n) 
*s (r ,n) (2) where u(r,n)=average throughput rate per server= = I/~ p(m;n,r)*t(n-m,r) (3) anu s(r,n) 
= mean number or active servers =.  =I/(u(r,n)*~p(m;r,n)*t(n-m,r)/(n-m)). (4) I~ we ignore channel 
Interference and use an ~u:o oisclpline [or seek anu rotatlonal scheduling, then t(i,r) anu nence u(r,n) 
are essentlally constant, we used a "lOOK" scheduling algorithm for ols~ arm movement. :ollowing [I?] 
(witn a correctlon ~or tne nonlinear seek cnaracteristlcs o£ the 231% disK), we nave approximately t 
(I, r) =66+dI/(I+i. ?*r/i) rail liseconcls (5) (we nave incluOeU 12.b milliseconds for average rotational 
latency plus 8.5 for trans[errlng one olocK.) It can De seen tnat for small values o~ r/n tne Improvement 
in performance as r increases is due to the increase in tne mean numoer ot servers s. As r/n increases 
s rapidly tends to n, and u tends to the slowly increasing ~I/t(n,r). V. HsoULTo a. ~anoom retrieval. 
 rne tirst series ot runs tests tne In[luence or multlple users in a nomogeneous random-retrieval environment. 
rne results are ShOWn in :igure i. It is nignly i~structive to compare I~a,~, (witnout over~low) witn 
s-tree. For a single user, the average time to process one record for the i-disK case oreaKs down as 
~ollows. loAi~: ~Fu time = 46 ms.; "seeK" time to cyllnoer index = 3~ ms. (hall tne time it is in tne 
right place already); rotational delay to reaO cylinder inuex= 12.5 ms.; "seeK" to uata cylinder = 7D 
ins.; rotational delays to read track index anu data olocK = 2D ms.; total = I~.5 (we measured I~5). 
o-tree: CPu time = 3D ms.; reading Uirectory OIQcK and then Uata olocK require two "seeKs" o£ ?D ms. 
eacn and two reads of 21 ms. eacn ~or a total of 2~6 ms (we measureu 21~). Thus IDA~L is some i~ -15% 
~aster, in spite ot naving one extra  directory Level (and in our model some extra CFu overneaa). This 
is oecause tne random distribution or tne ~irectory in o-tree costs us extra "seeK" time as compared 
to tne compact placement of the cylinder znUex in I~A~ on one cylinder. k ne situation cnanges w~en 
we go to multiple users. The determining factor in system tnrougnput is tne iegree o£ parallelism ac 
the bottlenecK, the disk arlves. Let us examine more closely the situation with eignt users. loA~ 2 
uisas: Tne oottlenecK is unit I, containing tne cylinder index; nence we =ocus on it. The average queue 
length for reading the cylinder index seems to de aoout 2.4. (All queue lengtns in the to±lowing discussion 
are estimated; the mo~el was not instrumented for measuring them.) oervice time breakdown: "seeK" to 
cylinaer index = 5o/2.4 ms.; rotational ~elay to read cylinder index = 12.5 ms.; "seeK" and reaa of 
track index an~ data = 8~ ms., out since half tne time tnls is on unlt 2, only 43.5 ms. count; nence 
une average rate is 8~ ms. per record. ~'or tne 8-disk configuration, the analysis is di£[erent. Tne 
cylinder index, oelng on a separate unit, never requires a "seeK" and is not a oottlenecK. rne relevant 
service time for each request is the ~7 ms. to "seeK" to tne data cylznaer and read tne track index and 
data. rne average numoer o£ relevant active ~isKs is 2.~ (out Or 6; tne otner two units mid not contain 
data) ; average tlme per request = 8?/2.~ = 32 ms. o-tree: tne service time required is k "seeKs" and 
2 reaus, aistriouted unz[or~nly over all dlSKS. Tne reads take 21+21=42 ms. ~or eitner configuration. 
rne "see~" ti~es depend on tne average queue lengtn at the disks. ~or 2 disks, tne queue lengtn is aoout 
3.1 per active unit, giving an average "seeK" or 58 ms. ±ne total service time per request is tnus Ib~ 
ms.; ~ividlng oy an average 1.8 active units we get an average of 8~ ms. per request. For 8 dis~s, the 
average queue at an active diSK is 1.5; tnis gives an average "seeK" or 68 ms., total service time or 
178 ms., and (dividing oy an average 4.4 active units) an average of 4~ ms. per request. ~'or multiprogramming 
the CPU time ~oes noc enter directly, as it is overlapped oy i/u activity. It would however de ~allacious 
to deduce that CPU tlme nas no influence whatever: it has a second-order ez~ect on tpe queue lengths 
 (more CFu time implies snorter queues for diSK service and nence fewer average active disks.) Figure 
2 snows the effect o£ CPu time on two sets of runs. ~nile tne di[terences within each set of curves 
 are within tne tolerance limits of our mo~el, tne trend seems to de wnat is expected: as long as tne 
average device utilization is significantly less tnan tne total numoer o£ devices, CFu time nas some 
influence, ouc as the device utilization approacnes a constant value, tnis in=luence oecomes negligible. 
 In using the term "active unit" adore, we ao not include the time spent Dy One device in waiting for 
a channel, hence our analysis omits explicit reference to ~nis time. however, the channel wait time mush 
de included wnen comparing the measured device utilization witn the tneoretical predictions s(r,n) of 
equation (4). Figure 3 snows the latter together winn the measured device utilization for l~a~ and ~-tree. 
~or tne 8-disk IbA~ run only tne 6 data units are shown. The ui=rerence in aoscissa values between the 
actual ant the tneoretical for a given ordinate value indicates the number of processes at other queues, 
k nus, if we compare the measured value tor r=8 o£ the loa~ ~-disK configuration witn m(r,6), we deduce 
that tnat aoout 4.8 processes on the average are waiting for service from one or the 6 data disks; the 
other 3.2 are wa~ting eltner for a CPu or for reading tne cylinder inaex. Comparing (in Figure i) the 
perzormance or nasn-coaing witn IbAm for configuration I, we see tnat they are very similar ~or r<6, 
as tne extra 1/2 revolution requrres for IoA~ compensates zor the time saved occasionally on "seeKs" 
to the cyllnaer index wnen more tnan one request zs servicea. As r increases the queue lengtn at tne 
cylinaer index becomes signi=icant, and IbAn appears to gain a slignt advantage. Tne diizerences however 
are at tne ooundaries of tne resolution power o~ the moael. iz the results are extrapolated as r increases, 
we might conclude on the Dasis or our analysis chat the curves for ~-tree will eventually cross over 
those for nasn-coding ana ImAm. ~owever, practical limitations on tne value of r (e.g. avallaole core 
storage; or, as in tne case or conIiguration Ii, we will oecome uFu-oounu) limit the usefulness of sucn 
extrapolation. we also tested tne influence ot over=low on l~An performance for con=iguration I. 13% 
o£ tne records were assumed to de in an independent overflow area, ~irst on unit 2 and then on unit i. 
rne results are consistent with the zoregoing analysis. B. Mixed environment. l~An is aesigned ~or 
efficient sequentlal processing, we suspected that its advantages are diluted or disappear entirely in 
a mixed processing environment. To test tnis we ran a series oz experiments where one sequential joo 
ran concurrently with n random retrievals.  Lvaluation o£ tne results poses a series ot difficulties. 
~irst, sequential performance seems to depend significantly on tne preZetcn strategy used, i.e. on now 
~ar aneaa ot tne currently-processed record we try to read (in general tnis uepen~s on now much space 
we allocate £or burrers), we did not study this issue here; however, for Dotn D-tree and ImAm the strategies 
used tended to read 1/3 to 2/3 ~racKs ahead. ~econdly, tne joo mix Chosen will tend to oias the results. 
inrougnput snoula oe defined in terms o~ records per second, i.e. in units ot usetul worK. Fertormance 
however ~epends on tne number o[ olocK [etches required. ~equential processing in general has a mucn 
nigner ratio ot records processed to olocKs retched tnan does random retrieval; £or our case, tne ~-tree 
numoers are 2.5 and .~ respectively (I~ is similar). Ditterent curves can De ootainea for dizterent mixes, 
worse: under different conditions the system may tend to uiscriminate in favor ot or against some o~ 
the joos, thus biasing the results. ro get around tne second uitticulty we arbitrarily assigned weignts 
to tne 3oos commensurate witn our estimate ot tne "effort" involved in each joo. ~ince we wanted to compare 
various directory organizations, a unitorm scale o~ weignts was asslgnea. ~nus, processing a record sequentially 
na~ a weignt o£ .I?, while a ranuom record teach was wortn .83. The results tnere~ore nave relative rather 
than aoso±ute signiticance. Figure 4 snows the results for the two configurations tor I~ (witnout over~low) 
and ~-tree. ~or ISA~ on configuration 1 the tnrougnput drops sharply as multlprogramming is introduced, 
tnen rises slowly. Tne reason is that the sequential traversal was tot data on unit I, wnlcn is where 
tne cylinder index is locateu. (~equential retrieval on unit 2, not tested, snoula qualitatively behave 
similarly to con£iguration If.) This anomalous behavior is typical o£ l~an. In ~act, i[ we examine tne 
results £or concurrent execution o£ one sequential and random traversals and compare tnem to wnat we 
woulu expect it we [irst ran a sequential traversal in single-programming mode and tnen ran ~ concurrent 
random traversals, we notice tnat t~e second mode o[ operation is actually more auvantageous. ~or tne 
combined operation, in 2~ seconds we processed 23 sequential and 187 random units. Processing 23 sequential 
units in dedicated mode would ta~e 1.6 seconds, wnile processing 187 random units witn degree 8 ot multiprogramming 
woulu take i?.6 seconds! For m-tree and tor the otner ISA~ configuration we do not get sucn anomalies, 
and the results resemole tnose o£ tne preceding section. we uia not test sequential retrieval (in ranuom 
order) £or nasn-coding, as it snoulu qualitatively De iuentical with ~-tree (except [or tne incidental 
cnoice or tne hummer or records per olocK). Insteau, we simulated sorting of the index ~lle, Kirst alone, 
tnen concurrently with 6 random retrievals. (As we had to complete tne entire sort, tnis part of tne 
testing was ratner expensive, so tew experiments were run.) ~ne sort-oy-merging algorltnm used tour disk 
work areas, wnicn were allocated on parallel tracks on tne same cylinders as tne nasn taDie, we uo not 
claim tnat this is tne oest way to sort, ou5 it certainly seems reasonaole. rne stanu-alone sort ot the 
4~,~ identizier taoie takes some 35D seconds, o~ wnlcn Ib% is unoverlapped CFo time. we ~ia not Know 
whether the added random-retrieval load woulu nelp or hinder. In tact, i5 appears to nave made little 
ai[terence. Tne time cnargeable to the sort in tne mixed environment was some 2~% lower (~2 seconds), 
wnicn (a~ter uiscounting the overlapped CPu time) is witnin the limits o£ the model accuracy. i ne total 
elapsed tlme to complete the sort in this environment was nowever times longer (2865 seconds). C. ~utter 
management. Data management systems [requently do not snare aa~a in core among concurrent users. ~e 
are not concerneu here with various system organization proolems wnic~ this may cause (e.g. privacy; 
integrity; etc.), ~u5 woulu like to see wnat benefits i£ any might oe ootained Dy so doing, at least 
[or the case o~ directory management aurlng multiprogrammeu random retrieval. we compared (~or a-tree) 
performance giving eacn user nis own dedicated our~ers versus using a varying numoer ot snared ourters. 
~acn joo accessed one random record; tnis involves accessing tour olocKs (corresponding to a "volume 
taole o~ contents", directory root, one index olocK, and the olocK containing tne data record). For runs 
with dedicated out£ers the £irst two DIocKs are locked into core; [or tne case ot snared bu£[ers we allowed 
these olocKs to oe overlaid when necessary, un tne otner hand, when a olocK was in core it was available 
to all users, saving on tne initial fetching separately for each user. A more important source o~ possiole 
pertormance improvement was tne possibility of tinding tne required low-level index olocK in core. as 
this makes possioie running more users in a limited core environment, we also wanted to look a% performance 
with minimal Duster space. Yne ouf£er-replacement strategy used worked as toliows, we used "domain separation": 
for our tour types of Duffer requests, we woulu try to overlay a buffer o~ the same type before tnat 
of a ui&#38;~erent ~ype. Tne algorithm was: look zor a ~otally empty Duffer; i£ none, find a ~er o~ tne 
same type witn zero user c:09nt; iz none, ~ina any Duffer witn zero user count; i[ none, ~InG any Duffer 
witn tne lowes~ current user count. ~u~ers witn a read-in-progress condition were never overlala. Tne 
e[rect o£ this policy was sucn tnat wnen tne numoer o~ Duffers exceeded the number o£ jobs oy more tnan 
two, tne two nign-level OIocKs were effectively resiuent in core. For ~ewer Duffers, tnrasnlng phenomena 
occurreu, altnoug~ of lesser severity tnan we nad anticipated.  (uur allocation policy uid not allow 
fewer o~ers tnan joos.) Tne results are shown ~in ~zgure ~. ~n~le tnis area needs mucn further stuuy 
(e.g. considering ~ir~erent job mixes, and tne effects o£ different allocation policies) it would appear 
that significant Dene[its (particularly in core u~Izization) can oe gained Dy snaring data among users. 
 VI. muusL ACCUmACY xne mo~el was validated in part oy reprouucing some o£ the Fu~ results ~or I~', 
~[9] , and in part Dy comparing our results wi~n 5he theoretical predictions o~ ~ection IV. ~nere no 
comparative information was available (SUCh as for ,nultlprogrammea I~A~) we tested for internal consistency 
oy generating several sets o£ results using ~irterent random sequences.fne general accuracy o£ the mo~el 
seems to De plus/minus 5%. VII. CUsCLuSZusS ui£~erences in data organizations intro~uce subtle distinctions 
in tne [actors wnic~ a£[ect per[ormance. Tnese ~actors may snow up only in a mult~programmeu environment. 
I~ (wltnouc overflow) seems to maintain some a~vantage over m-tree under multzprogramming, out this 
advantage may 9ec smaller or disappear as the degree ot multiprogramming increases. I~A~ performance 
~s cnaracterized oy unequal distrioution or activity among the uevices, wnicn may lead to severe adverse 
e~[ects, un the wnole, tne recent trend towar~ ~-tree directory organizations seems to oe 3ustiried because 
of tneir [lexzDilisy and ease o~ update; tne loss or etrzciency ~or retrieval ~s minimal. nasn-co~eu 
directories oenave ~or random retrieval in a manner very similar to I~. For the file design in our experiments, 
nasn-coaing offers no advantages and may perform somewnat worse tnan I~A~, even for random retrieval. 
 ne design o~ mlexiole Duffer management strategies appropriate for ~-tree airectories appears to De 
a wortnwnzle area for £urtner Investigations. I ne author is grateful to sarry ~'inKel for programming 
assistance, and to tne ~atnemacics ~esearcn center for its contlnueu support ot tnis project. AFFs~DIX: 
~uulTIusAL u~TAILS Tne mouel was a ~aztn£ul copy o~ tne logic used in ISi.A's I~A~, for retrieving Ilxea-lengtn 
records (queued and basic access me,nods.) Data layout: unolocKed records, eignt per tracK. A cylinder 
contained i? prime and 2 over£1ow tracks, witn one reserved for tne track index. 2-unit configuration: 
cylinuer index was located mlaway oetween tne l~d prime ~ata cylinders on unlt I, wi~n unit 2 deQicated 
to 19~ uata cylinders. Tne independent over~low area was at the enu o£ units 1 or i. d-unit: unlts 2 
tnrougn? eacn nela ~2 cylinders o£ data, tne cylinder index  m. m-tree.  was on unlt i, and tne over£1ow 
area on unlt ~. ~ne master index was core-resluent ~or all runs. ~o attempt was maoe to model an actual 
Implementation. Data layouts: recorus were blocked on 2~-Dyte OlOCKS, tnree olocKs per tracK; tnree records 
per olocK maximum, 2.5 average. Key-pointer pairs were 14 bytes each; an index OIocK nelu 191 entries 
maximum, 129 on the average. Two index levels were needed for our uaca oase, as 16,~ index entries are 
required. i-unit configuration: 335 cylinders were equally split in contiguous areas among the unlts. 
8-unit: tne file space was randomly aistrioutea tnrougnout all units (in a sense this was an unfair comparison 
with I~n's dedicated file space, Duc we wanted %o test as realistic an environment as possiole: tne pooled 
space concept is an integral part ot tne m-tree pnilosopny.) C. hash-coding. rne nasn taole consisted 
o£ l~-oyte olocKs; uata records were unolocKe~w eight per tracK. Four work areas, each equal in size 
to tne nasn table, were allocated for tne sort. 2-unit configuration: cne nasn table and the work areas 
occupied parralel four-tracK extents on cylinders 5~-78 o£ unit i.  uata was on cyl~n~ers l-b? anG 79-135 
o£ unlt 1 ana on 2~ cylinsers o~ unit 2. ~ne larger conIiguration,~as not tested. u. ~cne(~uler s. 
Channel scneGuling: units were service~ in ~ixe~ non-preemptive priorities wicn I always serviced oetore 
2, etc. UiSK: the "looK" algorithm [17] was use~. The arm moves in a given uirect~on as long as there 
are requests in the queue; tnen it reverses direction. rne same scneauler was uses tnrougnout. so attempt 
was maue to mouel the actual scneuulers use~ in the O~/~vT operating system witn lmAm. Fretetcnzng: 
uetails o£ tne ISA~ pre~etcn scne~uler appear in [6], pp. D3-b~. ~ome I~ ou[~ers were allocated ~or its 
storage pool, put apparently only 6 were ever uses under our consitions. ~-tree: The scneuuler was designed 
to s~ay two oloc~s aneau o~ tne ~IocK currently oeing processed, Dut sue to a oug sometimes preretcned 
tnree OIocKs. ~sFS~ssC~m  I. menymer, J. A., ugilvie, ~. A., ans merten, A.b. Analysis of indexed sequential 
anu sirect access tile organizations. Proceedings, SIGc, OD 1924 ~or~snop (~ustin ea.), ~ay 197~, 3~9-~I?. 
 2. Caraenas, A. F. Analysis an~ performance o~ invertes data oase structures Communications ot the A~ 
I~,5 (may 197~) 2~3-263. ~. Control uaca Corporation. 6~ SCuP5 indexes mequential Frogrammer's re[erence 
guise. . ~el±er, ~,. An introduction to prooaoility theory and its applzcations (vol. i). Jonn ~iley 
an~ mons, 19~. b. l~:, Corporation. ~ystem/36~ Ob data management services guide (~C26-3?46). o. - 
........ . uo ±S~m Logic. oruer ~o. BY28-66~8. ?. information ~lanagement ~ystem/3~ version 2 system/application 
design guide ~n2~-~91~-3 (1972). ~. Knurl±, u.~. ±ne Art o~ Computer ~rogramming, vol. 3: borting and 
searcning. ASuison-~esley, 1973, ~73-4~. H. Ling, n., Lum, V. Y., and benKo, el. 5. Calioration o~ 
tne tile organization evaluation mosel (Fo~sm  l). ln: =ormattea tecnniques, A~'3~6~2-69-C-~91. tile 
final organization report Information ~c~ence uepartment, Jose (march 197~). im~ ~esearcn, San I~. ~a~amura, 
~., Yosnisa, I, ans Konao, n. A s~mulatlon mo~el £or ~ata oase system performance evaluation. Froceeaings, 
1975 sational Computer conference (a~l~ vol. 44), AFIFS Fress, montvale, s.O. 459-465 II. ~eiter, A. 
Data structures for seconuary storage representations. ~K-1554, ~atnematics ~esearcn center, university 
ot wisconsin. July 1975. (Also:, Froceedings, Very Large Oata mases con£erence, Framingnam, ~ass. Sept. 
1975 ) ±~. The nuuS aata storage management system. Tk-2, Computer mclence uepartment, xecnnlon, naiKa, 
Zsrael (nay 1972). 13. oenKo, m. h., Lure, v. Y., ana uwens, ~. O. A £iie organization evaluation mouel 
(Fu~L~). Information ~rocessing "6~. ~ortn no±lana, Amsceruam (1969) 514-519. 14 ~enKo, ~,. 5., et al. 
~emi-operatzonal evaluation ot ~ile mo~elling tecnniques. Final report A: 3~6~2-~-C-~I14. Information 
~clences ~epartment, Ib~ ~esearcn, ~an Jose (Feo. 1971). lb. beverance, u. G. laenti£ier searcn mechanisms: 
a survey and generalizes mouel computing ~urveys 6,3 (mar. 1973) I?b-194. lb. bperry-~ano Corporation 
bequential tile management tne univac iI~, programmer u~-77~, 1974. Inuex system tot s guzSe. I?. reorey,~.0, 
anS ~inKerton, T.b. A comparative analysis o£ disk scheduling policies. Communications o~ the ~L., Ib,3 
(march 1972) 197-i~4. ISAM II 3Z ISAM II 'PU=500 30 30 Z8 Z6, B-TREE II 24i ZZ Z0 A C~ Z0 'Z Z 
O 18 0 O C) 5~ 16 03 r,,- [-,.-1 14 A C~ t~ . ...ISAM I ,.,,, O D , ~ "~ HAS H 0 -:..-"~_----~":~ """ 
B-TREE I O IZ "~ :.~.~'" ~-'~'~--~_--~ISAM IA I B TREE i 10 ..,,~,-.~-~.~.....------m~ ISAM IB -CPU= 
500-~ [ I0 4 ' P " D | ; 2 3 4 5 6 7 8 i Z 4 6 8  DEGREE OF MULTIPROGRAMMING DEGREE OF MULTIPROGRAMMING 
Figure ~.,. Random retrieval. I and iI refer to configura- Figure Z. The effect of CPU time On through- 
tions. ISAM IA is 13°/0 overflow, independent overflow put (random retrieval). area on unit Z; IB is 
13% overflow on unit. Other ISAM curves are 0% overflow.  s( R, 8) s(R, 6)  ca 4 > IISAM II 0 / / 
~ 3 0 a /  / / /  Z I / s(R, Z) -'r ,---:'- --:- "--:~'B-TREE I t Figure 3. Device utilization. Meas- 
 > --ISAM ii ured figures include time spent waiting for a channel. I ! 4 ~ 8 DEGREE OF MULTIPROGRAMMING 
13[  ISAM II 28- Y J 24- B-TREE II A   0 //..1. ii Private buffers for each 020" process (I0.8 records/second) 
Z 0 ¢:¢ o O3 ~ 16 ° A 0 M 0 z m ISAM I &#38;#169; _----a B-TREE I m it" 8 12 16 20 NUMBER OF BUFFERS 
IN SHARED POOL DEGREE OF MULTIPROGRAMMING r Figure 4. Performance in a mixed environment: one Figure 
5. Performance of B-tree with buffers sequential and r-1 random retrievals. shared among all processes 
(I~ 6 processes~ random retrieval). 
			