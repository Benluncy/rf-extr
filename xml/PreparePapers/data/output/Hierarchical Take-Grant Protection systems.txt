
 Hierarchical Take-Grant Protection Systems Matt Bishop Department of Computer Sciences Purdue University 
West Lafayette, ]N 47907 ABSTRACT The application of the Take-Grant Protec-tion Model to hierarchical 
protection systems is explored. The proposed model extends the results of Wu [7] and applies the results 
of Bishop and Snyder [2] to obtain necessary and sufficient conditions for a hierarchical protec-tion 
graph to be secure. ]n addition, restric-tions on the take and grant rules are developed that ensure 
the security of all graphs gen-erated by these restricted rules. 1. Introduction The Take-Grant Protection 
Model has been used to explore the security of many types of systems, including hierarchical protection 
systems, However, there has always been an underlying assumption that at least some of the vertices were 
honest. For example [7] presents a model of hierarchical protection systems involving only take and grant 
rules; but if two directly-connected sub-jects conspire to breach the security of the system, they The 
financial support of National Science Foundation grants MCS-80- 15484 and blCS-81-03139 are gratefully 
acknowledged, Permission to copy without fee all or part of this material is granted provided that the 
copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the 
title of the publication and its date appear, and notice is given that copying is by permission of the 
Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific 
permission. &#38;#169; 1981ACMO-89791-062-1-12/81-O109 $00.75 can easily do so. (An example of this will 
be discussed in Section 2.) Previous models have also discussed at great length the transfer o[ rights: 
under what circumstances can it occur assunling the subjects are honest, what rights can a subject steal 
from a higher-level one, and the like. But little has been said about the transfer of information. The 
two types of transfers are distinct, and the transfer of information, in addition to the transfer of 
authority, will be discussed here. Let a finite, directed graph (called a protect~n graph) represent 
a hierarchical protection system. A protection graph has two distinct kinds of vertices, called subjects 
and objects, Subjects are the active ver- tices, and (for example) can represent users; they can pass 
information and authority by invoking rules which will be given in sections 2 and 8. Objects, on the 
other hand, are completely passive; they can (for example) represent files, and do nothing. In graphs, 
the subjects are represented by @ and objects by 0. Vertices which may be either subjects or objects 
are represented by @. The edges of a protection graph arc labelled with subsets of a finite set R of 
rights. Suppose that ~r,w,t,gl oR, where r, w, t, and g represent read, write, take, a,ld grant rights, 
respectively. When written as labels on a graph, the set braces are normally omit- ted. Briefly, in the 
model of hierarchical protection sys- tems developed here, we are concerned with preventing transfers 
of information to subjects with a lower security level than the information has, as well as preventing 
the lower-level subject from obtaining authority to read the 109 information. Because of the duality 
of reading and writ- ing, which will be discussed in more detail in section 8, subjects must also be 
prevented from writing to lower-level ones (otherwise, a dishonest high-level sub- ject could just read 
high-level information and then write it to a lower-level subject, thereby breaching secu- rity). This 
raises some interesting questions. Is is possi- ble to prevent information from being transfered using 
the graph rewriting rules for trans[erring authority and information without modification? If so, would 
restricting thcse rules provide any additional benefits? What kinds of restrictions should be considered? 
We shall try to answer these questions, among others, The strength of. proposed restrictions will be 
con- sidered as well. Let T be a sot of graphs with some (arbi- trary) property, and let E be a set of 
graph rewriting rules. Then R will be called sound if applying any finite sequence of those rewriting 
rules to a graph t~cT will produce a graph t'eT. Suppose s, toT, and s ~-t using the rules in R. Then 
if for some R'cR, s ~- t using only elements of R', the subset R' is said to be complete. (Notethat subset 
includes restricted rewriting rules as well.) A graph is said to be secure if there is no finite scguence 
of rewriting rules that will enable a subject to obtain information at a higher security level than the 
subject. The soundness and completeness of restrictions with respect to the property secure will be discussed. 
 Section R gives definitions and past results on de jure rules, and section 3 gives the same for de 
facio rules. These rules are the rewriting rules for transfers of authority and information, respectively. 
Section 4 develops a model of a secure hierarchical protection sys-toms involving only de :facto rules, 
which is extended in section 5 to include de jure rules. Section 6 discusses the results and some of 
their implications. 8. The De Jure Rules The Take-Grant Model permits users with certain rights to transfer 
rights from one vertex to another. The rules governing the transfer of rights are called de jure rules 
([E]); this section will briefly review them, and some previous results. The rules for transferring rights 
are ([5]): Take: Let x, y, and z bc three distinct vertices in a pro- tection graph G such that x is 
a subject. Let there be an edge from x to y labelled 7 such that l-e 7, an edge from y to z labelled 
fl, and 5c~. Then the take rule defines a new graph G' by adding an edge to the protection graph from 
x to z labelled 5. Graphically, x y z x y z The rule can be read: x takes (5 to z) from y. Grant: Let 
x, y, and z be three distinct vertices in a pro- tection graph G such that x is a subject. Let there 
be an edge from x to y labelled 7 such that g ~Y, an edge from x to z labelled fl, and 5cfl. Then the 
grcL'nt rule defines a new graph G' by adding an edge to the protection graph from y to z labelled 5. 
Graphically, ct c~ x y z x y z The rule can be road: z grants (5 to z) to y. Create: Let z be any subject 
in a protection graph G and let 5 be a subset of R. Create defines a new graph G' by adding a new vertex 
y to the graph and an edge from x to y labelled 5. Graphically, 5 x x y Isubject The rule can be read: 
x creates (5 to) new [object J vertex y. Eernove: Let z and y be any distinct vertices in a protec- tion 
graph G such that x is a subject. Let there be an explicit edge from x to y labelled ~, and let a be 
any subset of R. Then re~mve defines a new graph G' by deleting the a labels from ft. If fl becomes empty 
as a result, the edge itself is deleted. Graphically, (~ ~ ~ ~ B _-a~ x y x y The rule can be read: 
x removes (a to) y. The edges which appear in the above graphs are called explicit because they represent 
authority known to the protection system. Note that [here is a duality between the take and grant rules 
when the edge labelled t or g is between two subjects. Specifically, with the cooperation of both subjects, 
rights can be transmitted backwards along the edges. 1'lie following two lemmas ([5]) demonstrate this: 
Lcmma 2.1: x y z x y z Lcmma 2.£: x y z x y z As a result, when considering the transfer of author- ity 
between subjects, neither direction nor label of the edge is important, so long as the label is in the 
set It, g I. Duc to these two lemmas, the hierarchical model discussed in [7] fails to answer the questions 
posed in section 1. In that model, if a vertex conspires wfth a higher-level vertex to which it is directly 
eonnccted, the vertex at the lower level can acquire take (or grant) rights over the vertex at the higher 
level. (See Figure ~. 1 for an example.) In order to state the main theorem concerning the transfer of 
authority between subjects, we need some preliminary defhiitious ([5, 6]): Definition: A tg-palh is a 
nonempty sequence v0 ..... v~ of distinct vertices such that for all i, 0~i<k, v~ is con- nected to v~+l 
by an edge (in either direction) with a label containing a t or a g. Definition: Vertices are tg-conneeted 
if there is a tg-path between them. Definition: An island is a maximal tg-connected subject-only subgraph. 
LB L 2 Figure 2.1 (a) --Hierarchical Model Before Lemma is Applied L3 // L 2 Figure E l(b) --Hierarchical 
Model After Lemma is Applied Any right that one vertex in an island has can be obtained by any other 
vertex in that island. In other words, an island is a maximal set of subject-only vor- tices wldch possess 
common rights. With each tg-path, associate one or more words over the alphabet ~ [, [, ~, 9 I in the 
obvious way. If the path has length O, then the associated word is the null word ~. Definition: A vertex 
v o initially spans to v~ if v 0 is a sub- ject and there is a tg-path between v 0 and v~ with asso- 
ciated word in ~ [,g ~ Ld ~ u~. Definition: A vertex Vo terminally spans to v~ if v0 is a subject and 
there is a tg-path between v0 and v~ with associated word in } [° I . Definition: A bridge is a tg-path 
with v 0 and v~ both sub- jects and the path's associated word in t ~", ~-', F~'F, ~'°~F I. An initial 
span is a tg-path along which the first ver- tex in the path can transmit authority; a te/~minal span 
is a tg-path along which the first vertex in the path can acquire authority. As a note, a bridge .is 
said to be directed away from re. (For an illustration, see Figure z~) p S' t s I" q ."0 .....X) i 
 u v w x y islands: I,=lp,u~,I2=~ul,In=ly,s'] bridges: u,v,~u and~u,z.y initial span: p with associated 
word: v terminal span: s ',s with associated word: { Figure ~.~ --AnIllustrationOfTake-Grant Terms The 
following predicate formally defines the notion of t ransferrin~j aulhority: Definition: The predicate 
can.share(a, x, y, G) is true for a right ~ and two vertices z and y if and only if there exist protection 
graphs G~ ..... Gn such that G~ G. using only de jure rules, and in G,, there is an edge from x to y 
labelled ~. In short, if x can acquire ct rights to y, then ean.share(~, x, y, G) is true. The theorem 
which estab- lishes necessary and sufficient conditions for this predicate to hold is ([6]): Theorem 
~.S: The predicate can.shave(a, x, y, G) is true if and only if there is an edge from x to y in G labelled 
~, or if the following hold simultaneously: (i) there is a vertex sag with an s-to-y edge labelled {X, 
(ii) there exist subject vertices x' and s' such that (a) x' initially spans to x,  (b) s' terminaUy 
spans to s',  (iii) there exist islands I1 ..... I~ and there is a bridge from # to 6+i (i<-j <~). 
The de jure rules apply only to transferring author- ity, To explore the transfer of reformation, we 
need other rules; these rules, and some of their consequences, are explored in the next section. 3. The 
De Facto Rules The de jure rules control the transfer of authority only; they say nothing about the transfer 
of information, The two are clearly different', for example, if a user is shown a document containing 
information which he does not have authority to read, the information has been transfered to the user, 
The de jure rules do not model eases like this. Instead, we use a new set of rules, called de facto rules, 
to derive paths along which information may flow. In order to describe transfers of information, we cannot 
use explicit edges, because lie change in auLhor- ity occurs. Still, some indication of the paths along 
which inl'ormation can be passed is necessary. Hence, we use a dashed line, labelled by v, to represent 
the path of a potential de facto transfer, Such an edge is called an implicit edge. Notice that implicit 
edges cannot be mani- pulated by the de jure rules, since the de jure rules can affect only authorities 
recorded in the protection sys-tem, and implicit edges do not represent of such author- ity, A protection 
graph records all authorities as explicit edges, so when a de jure rule is used to add a new edge, an 
actual transfer of authority has taken place. But when a ale l%tete rule is used, a path along which 
information can be transferred is exhibited', the actual transfer may, or may not, have occurred. It 
is impossible to tell this from the graph, because the graph records authorities and not information. 
]~'or the purposes of this model, however, we shall assume that if it is possible for infor- mation to 
be transferred from one vertex to another, such a transfer has in fact occurred. One set of proposed 
de facto rules was introduced in [2] to model the transfer of information, Although these are not the 
only rules possible, their effects have been explored, and so we shall use them. Post.. Let x, y, and 
z be three distinct vertices in a pro- tection graph G such that x and z are subjects. Let there be an 
edge from x to y labelled a, 'r ecx, and an edge from z to y labelled fl, %u6fl. Then the posl rule defines 
a new graph G' with an implicit edge from x to z labelled ~r/. Graphically, T x y z ~[ y z Pass: Let 
z, y, and z be three distinct vertices in a pro- tection graph G such that y is a subject, Let there 
be an edge from y to x labelled a, %0 -ca, and an edge from y to z labelled fl, r eft, Then the pus~ 
rule defines a new graph G' with an implicit edge from x to z labelled [r I. Graphically, T %0 T 1%U 
7. ~ x y z x y z Spy: Let x, y, and z be three distinct vertices in a pro- tection graph G such that 
x and y are subjects. Let there be an edge fronl z to 'U labelled a, re~, and an edge fronl y to z labelled 
fl, rCfl. Then the spy rule defines a new graph G' with an implicit edge from x to z labelled }r I. Graphically, 
T r r ~ T T" x y z x y z F~n~: Let x, y, and z be three distinct vertices in a pro- tection graph G 
such that y and z are subjects, Let there be an edge from 'y to x labelled a, %u-Ca, and an edge from 
z to y labelled fl, %0eft. Then the find rule defines a new graph G' with an implicit edge from x to 
z labelled ~r I. Graphically, T  e< e< 0 ~ ¢~ ¢~. w'-~ -- x y z x y z Note that these rules add implicit 
and not explicit edges. Further, as these rules model information flow, they can be used when either 
(or both) of the edges between x and y, or y and z, are implicit. Now, consider the conditions necessary 
for a poten- tim de facto transfer to exist ill a graph, Definition: The predicate c~n.kno%0.f(x, y, 
Go) is true if and only if there exists a sequence of graphs G, ..... Gn (O_<n), such that Gi+i~ t Gi 
(O_<i<n) by one of the de facto rules and in G n either a x-to-y edge labelled 7- exists or a y-to-x 
edge labelled zu exists and if the edge is explicit, its source is a subject. Intuitively, ean.kno%u.f(x, 
y, Go) is true if and only if x has the authority to read y, y has the authority to write to z, or an 
implicit edge from x to y can be added by means of tile de facto rules. Note the duality of read and 
write. If x can write to y, then y effectively can read x. All x has to do is write to y any information 
that y wants to see. This duality will play an important role in later results. Definition: An r%0-patA 
is a nonempty sequence v o ..... v k of distinct vertices such that for all i, O<_i<k, vt is connected 
to vi+ , by an edge (in either direction) with a label containing an r or a %0. With each tg-path, 
associate one or more words over the alphabet } ~', 4;, @, ~ I in the obvious way; for instance, the 
protection graph in figure 3.1 has associ- ated f~b- and ~@~D. If the path has length O, then the associated 
word is the null word v, r >(2< %0 ~v 'r,%u Figure 3.1 --Protection Graph With Associated Words '/'~- 
and ~'~D~D Definition: An rw-path v0 ..... vk, k~l, is an ~drnissible ~w--path if and only if: (a) 
it has an associated word ala ~ . .a~ in the regular language (~' U40) ° and  (b) if %=~* thenvi_, is 
a subject and if ~=%~ thenv~ is a subject.  Note that there cannot be two consecutive objects on an 
rw-admissible path, Theorem 3.1: Let x and y be vertices in a protection graph G. Then can.kno~.f(x, 
y, G) is truc if and only if there is an admissible rw-path between x and y. This can be extended to 
include both de ~ure and de facto rules. Definition: can.know(z, y, Go) is true if and only if there 
ts a sequence of protection graphs G 1 ..... Gn such that Go ~ Gn and in G~ either a x-to-y edge labelled 
r exists, or a y-to-x edge labelled ¢u exists and if the edge is explicit, its source is a subject. 
This ts merely can.know.f(x, y, Go) without the res- triction on the types of rules used. Definition: 
An rtutg--path is a nonempty sequence v 0 ..... v~ of distinct vertices such that for all i, 0_<i<k, 
v~ is connected to v~+, by an edge (in either direction) with a label containing a t, a g, an r, or a 
~. With each rwtg-path, associate one or more words over the alphabet I {,~-,y,~,¥,~,@,@ linthe obvious 
way. Definition: The vertex vo 7"w-inibially spans to v~ if v0 is a subject and there is an rwtg-path 
between v0 and v~ with associated word in I {*~ ~ . Definition: A vertex v o rtu-terminally spans to 
v~ if v 0 is a subject and there is a [g-path between v0 and vk with associated word in } {'~. Definition: 
A bridge is an rwtg-path with associated word in the regular language (Note that this is merely the set 
of bridges discussed in section 2.) A connection is an rwtg-path with associated word in the regular 
language c= I ~*~ U ~F U i'*~* I The next result characterizes the set of graphs for which canaknotu 
is true: Theorem 3.2: can.lcno~v(z, y, G) is true if and only if there exists a sequence of subjects 
u 1 ..... z~ n in G (l_<n) such that the following conditions hold: (a) x=u 1 or ul rw-initially spans 
to x, (b) y=uu or un rw-terminally spans to y, (c) for all i, l<-i<n, there is an rwtg-path between 
u~  and ui+1 with an associated word in B U C. As an example of the use of de jure and de facto rules, 
we show: Lcmma 3.3: Let G be a protection graph, and let x and y be vcrUces in the same island. Then 
can~Icnotv(x, .if, ~} and cc~n.knozv(y, x, G) are true. Proof: We shall show that if can.share(g, x, 
y, G) is true, then can.know(x, y, G) is also true. (Scc figure 3.2). The proofs for the case involving 
t, and for edges from y to x, are left as an exercise to the reader. 9 ~ C....  ~x y ate n x y %0 %U 
Figure 3.2 --Proo[ of Lemma 3.3 As every vertex in an island can obtain either a take or grant edge to 
any other vertex in the island, the result follows immediately, 4.A De Facto Hierarchical Protection 
System Definition: An rvJ-level is a set of vertices in a protection graph G such that for every pair 
of vertices x, y in the set, can*knower(z, y. 6:) is true. Intuitively, vertices and are on the same 
rw-level if they have de facto access to exactly the same informa-tion, and can communicate with each 
other. Proposition 4-.1: Let G be a protection graph, and let z and y be any two vertices in G. Then 
x and y are in the same rw-ieve[ if and only if there is an rw-admissiblc path between them. Proof: Immediate 
by Theorem 3.1. Definition: Two subject vertices x and y are said to be rw--joined if can.know.f(z, y, 
6") is true and can.know.f(y, z, G) is false. Intuitively, this definition says that if a vertex x can 
obtain any information that another vertex y can, but not conversely, then x and y are rw-jotned. Those 
two ideas can be combined into one relation. In a protection grapll 6', say that a vertex x is higher 
than a second vertex y if, for any path from x to y, there exist vertices a and b such that can,know,J(x, 
a, G) and can,know,f(b, y, G) are true, and a is rw-joJned to b. In this case, y is said to be lower 
than x. (We write this as x>y.) Two vertices x and y are said to be at the same height (or level) if 
x and y are at tile sanm rw--level. Analogously, one rw-levei L 2 is said to be higher than another rw-level 
L~ if for every vertex 12 in L~ and for every vertex l~ in L~, 12>l I. Again, in this case Ll is said 
to be lower than L~. Informally, an rwtg-level is a security classification; and the higher an twig-level 
is, the more highly classified the security level is. In what follows, unqualified statements about the 
relation higher apply to both the relation between ver-tices and the relation between rw-levels. When 
the dis-tinction between the two relations is important, it will be explicitly stated, or be obvious 
from the context. hcmma 42: Let L~ and L~ bc two different rw-levels in a protecUon graph G such that 
L2 is higher than L1. Let l l be a vertex in L~ and 12 be a vertex in L~. Then c~n,know,f(le, l l, G) 
is true and can,lcnow,f(ll, 12, G) is false. Proof: As L2 is higher than L1, there exist vertices x 
in L2 and y in L1 such that x is higher than y. By definition can,know,f(l e, x, G) and can,kno~u,f(y, 
ll, G) are both true. By the definition of higher, can°know°f(x, y, G) is true, so two applications of 
the spy rule show that can,know,f(l 2, l 1, G) is true. Now, let x be any vertex in L~ and let y be any 
vertex in L~ such that x and y are rw-connected As L2 is higher than L~, the path from y to, x is not 
an rw-admissible path: hence, can,know,f(y, x, G) is false. As any path from l 1 to l 2 must pass through 
an edge from L, to Le. By Proposition 4.1, no such edge is rw-admissible, so there is no rw-admissible 
path_ from l~ to l 2. Hence, by Theorem 3.1, ean,know,f(l 1, l e, G) is false. [] Lemma 4.2 says that 
if one rw-level is higher than another, vertices in the higher level can obtain informa- tion from vertices 
in the lower level. However, no vertex in tile lower level can access information which is avail- able 
only to vertices in the higher level only. In effect, this is a hierarchical classification system of 
two levels. Generalizing this result to an arbitrary number of levels gives 'l]]eorem 4.3: Let L~ ..... 
L n be rw-levels in a protection graph G such that for i=2 ..... n, L~>L(_ 1. Let l~ be a vertex inL~ 
and lj be avertex in L i, where j<k. Then can,know,f(l i, l~, G) is true and can,kno~u,f(lk, lj, G) is 
false. Pr~r: By induction on k -j. [~ASIS: k-j = 1. The claim holds by Lemma 4.2. INDUCTION HYPOTHESIS; 
For k-j=l ..... l-l, the claim holds. INDUCTION STEP: Let l-j=l. By the hypothesis, for any vertex l~_, 
in Lk-1, can,kno~u,f(l~, l~_,, G) is true, and can,know,f(l~_,, l~, G) is false. By Lemma 4.2, can*know,f(lk_l, 
lj, G) is true, whence can°know,f(l~, lj, G) is true. Also by Lemma 4.2, there is no vertex l~ in L~ 
such that can,kno~u,f(lj, l~_1, G) is true, whence can.know,f(l 1, lk, G) must be false. [] The arrangement 
of rw-levels described in Theorem 4.3 will be called a structure; indeed, Theorem 4.3 pro- vides the 
Take-Grant Protection Model with the struc-ture needed to model a hierarchical classification sys-tem. 
For example, consider a linear classification as pic- tured in Figure 4.1(a). This classification scheme 
has 4 levels, namely L4, L3, Le, and L1 (in descending order). This classification hierarchy is easily 
modeled by a struc- ture of the kind described (see Figure 4. l(b)). However, the structure provided 
can be used to model more complicated hierarchical systems such as those the levels of which are not 
linear. Recall that apar-tial ordering is an ordering which is transitive and irre flexive. Proposition 
4.4: The relation higher is a partial ordering. t'maf: First, consider the relation with respect to vertices. 
For transitivity, merely apply the spy rule; for irreflexivity, merely note that rw-joined vertices are 
or~ different rw-levels. The proof for the relation with respect to rw-levels follows immediately by 
definition. [] This theorem has two immediate consequences. The I15 L I Figure 4,1(a) --Linear Classification 
first is obviousl if Li<-Lj~-L ~, then f~=Lj. This emphasizes the hierarchical nature of the structure 
described in Theorem 4.B. Secondly, at most one o[ the relations L~<L i, Li=Lj, and L~>Lj is true. Note 
that none need be true, which means that there can be rw-levels which are incomparable. Thus, while there 
is at least one minimal and one maximal level (with respect to the highest rela-tion) in any such structure, 
there need not be a lowest or a highest level. This enables a classification system which uses a partial, 
rather than a linear, ordering to be modelled. One such classification system is the Militar~j Classification 
System (eg,, see [3,4]), The configuration pictured in Figure 4.2(a) is easily translated into this model 
(see Figure 4.2(b)', each security level Lt CATEGORY A B   (A,3) (B,~) f Figure 4.1 (b) --Model of 
Linear Classification represents an authority level and a category.) in particu [ lar, note that while 
two subjects may have the same security classification, the model makes no assumptions about their being 
able to communicate with each other,  This representation of hierarchical classification systems has 
an extremely important effect, Recall that the de .reacts rules spy, post, and find require the cooperation 
of t~uo subjects. Thus, in many cases, if two subjects conspired to breach the security of a hierarchi- 
cal system, they could do so. Specifically, suppose a subject were willing to violate security. Under 
other pro- AUTHORITY LEVEL  (C,3) top secret(3) secret(2) confidential (i) unclassified (0) Figure 
4,2(a) --Military Classification System Figure 4.2(b) --Model of a Military Classification System posed 
representations, this would mean that all inferior' subjects would be suspect, because the superior could 
conspire with them to breach security. But by Theorem 4.3, in this representation such a conspiracy is 
impossible. Preventing any breaches in security, rather than trusting any subject to be honest, makes 
this model so useful. Thus far we have only been concerned about sub- jects. It is reasonable to assume 
that if people (subjects) have a certain security classification, some information also has that classification. 
As documents are inactive, they are to be represented by object vertices; it is there- fore necessary 
to define what the security level of an object vertex is, and show that under such a definition information 
cannot flow [rom a higher level to a lower. Definition: An object vertex v is said to belong to the lowes~ 
rw-level a subject vertex of which has either read or write access to it, Intuitively, this says that 
a document has the same security level as the lowest level of users with access to it. The central result 
of this section can now be proven: 'Illcorcm 4.5: Let G be a protection graph, and let Ll ..... Ln be 
rw-levcls such that for i =B ..... n, L~>L~_ r Let If be an object vertex in L i, Then for any subject 
vertex l~ in Li, i<j, e~n.kno~u..f(l~, lj, G) is false. l'roof: ]n order that ean.kno~u.f(l~, lj, G) 
be true, there must be an rw-admissible path from l~ to l~. by Theorem 3.I. But as is in a higher rw-level 
than l~, there is no 5. Combining De Facto and De Jure Rules In order to include de jure rules in the 
model of a hierarchical protection graph, some of the definitions of the last section must be generalized. 
 Definition: An rwtg-level is a set of subjects in a protec- tion graph G such that for every pair of 
vertices x and y in the set, ean.knozu(x, y, G) and can.know(y, z, G) are true. The notion of higher 
discussed ill the previous sec-tion can also be extended in the obvious way to include rwtg-levels and 
vertices in those levels. In particular, the relation is still a partial order. Definition: A protection 
graph G is secure if for all ver-tices x and y such that x is lower than y, can.know(x, y, G) is false, 
These definitions require that information cannot flow from a higher to a lower level. The notion of 
an rwtg-level merely combines the concept of an island with that of an rw-level, and coincides with the 
notion of a security classification level, More formally, Lcmma 5.1: Every island is contained in exactly 
one rwtg-level. I'roof: By Lcmma 3.3 and the definition of an twig-level, an island is itself an rwtg-level; 
hence, an island is con-tamed in .at least one rwtg-levcl. So, assume that an island has vertices Ii 
and l~ in distinct rwLg-levels L1 and L 2, respectively. By definition of island, such path (as there 
is no rw-admissible path from x to any vertex in L~, where k <i). Hence can.know.f(l~, Ii, G) is false, 
m This theorem states that unless a user has a security level equal to or greater than that of a certain 
docu- ment, he cannot obtain access to it regardless of how many (possibly corrupt) people do have access 
to it. We have seen how to model hierarchical sturctures where security is concerned only with the passing 
of information. Now, let us consider this in conjunction with the passing of authority, can.know and 
the definition of rwtg-level, l I and 18 are in the same twig-level, contradicting the assumption that 
L l and L~ are distinct, Hence, each island is con-tained in at most one twig-level, This proves the 
theorem. In what follows, the definition of rw-joined is exactly the same as in section 4. 'flaeorem 
5.Z: A protection graph G is secure if and only if there are no bridges or connections between rwtg-levels. 
Proof: Let lz and l)-be two vertices in two distinct rwtg-levels L~ and L i (respectively) such that 
Li>Lj,.We must show that ean.kno~u(l 1, l~, G) is false if and only if there are no bridges or connections 
between L~ and L t. (<=) Assume can.kno~u(lj, l~, G) is false. '['hen apply Theorem 8.~. As (a) and (b) 
are trivially true for any rwtg-level, (c) must be false (or else can.know(l~, l~, (7) would be true, 
contradicting assumption). The result fol- lows immediately from the definition of island and Theorem 
5.1, (~) Assume now there are no bridges or connections between L~ and L i . It must be shown that c~n.kno~u(lj, 
l~, G) is false. Note first that by hypothesis there is no connection between l i and l~. So consider 
condition (iii) of Theorem 2.4. As there are no bridges between rwtg-levels, there are no bridges between 
islands; hence condition (iii) is false, so can.kno~u(lj, li, G) is false, This proves the theorem. 
,. Notice that this theorem agrees quite nicely with Theorem 8,2. The nature of an rwtg-level ensures 
that vertices are rw-initially and rw-terminally connected to all other vertices in the rwtg-level. The 
remaining condi- tions in Theorem 3.~ are that no bridges or connections exist between the two vertices, 
and hence the two rwtg-levels, involved. So this result makes sense. This result states that the weakest 
way to ensure  that information flows only from lower levels to higher ones in G is to prevent the transfer 
of any right from an rwtg-level to a lower rwtg-level. This is probably overly restrictive; it may be 
necessary to allow some rights (but not read or write) to be transferred from one rwtg-level to another, 
without regard to which rwtg-level is the higher, So let us consider the kinds of restrictions possi- 
ble. There are three basic types of restrictions possible: (1) restrict the directions of the take and 
grant edges between rwtg-levels, (2) restrict the application of the take and grant edges between rwtg-levels, 
or (3) combine the above two restrictions, Consider these restrictions one at a time. In the fol-  
lowing definitions, let T be a set of graphs with some (arbitrary) property, and let R be a set of graph 
rewrit- mg rules. Definition: R is sound if applying any finite sequence of elements of R to some t 
E T produces a graph t'c-T, DeFinition: Let s, toT, and s ~- t using the rules in R. Then if for some 
E'cR, s ~- t using only elements of R', the subset R' is complete. (Note that subset includes restricted 
rewriting rules as well.) I~estrietion~ of Direction Restrictions of direction are those restrictions 
 which require the take or grant edge being used to mani- pulate rights to point in a certain direction. 
For exam- ple, if the take rule could only be applied to rights which a vertex has over a lower-level 
vertex, that restriction would be a restriction of direction. Restrictions of direction are sound but 
not com-plete. To show soundness, merely note that by Theorem 8,2, as there are no bridges or connections 
in the origi-nal protection graph between rwtg-levels one of which is higher than the other, it will 
be impossible to pass rights of any kind between the two levels, so restricting the directions in which 
a vertex can apply the de jure rules will not matter. Thus, as the original graph is secure, so will 
any other graph derived by these rules, However, the rules restricted in this way arc not complete, because 
rights other than read and write cannot be passed from one rwtg--ievei to a lower level. Thc above argument 
can be made more rigorous, and shows: Lemma 5.8: Restrictions of direction are sound btlt not complete, 
Restrictions of Application Restrictions of application are those restrictions which prevent the take 
or grant edge from manipulating certain rights. For example, if the take rule could only be applied to 
read rights, that restriction would bca res-triction of application. Restrictions of application, like 
restrictions of direc- tions, are sound but but not complete. To show soundness, merely note that there 
are no bridges or con- nections in the original protection graph between rwtg-levels one of which is 
higher than the other. Thus, elated word ~'. by Theorem 0,~, it is impossible to pass rights of cz~y 
kind between the two levels, and so limiting the kinds of rights which can be passed has no effect. Thus, 
as the original graph is secure, so will any other graph derived by these rules. However, the rules restricted 
in this way are not complete, For example, if the take rule is res- tricted so that it cannot act on 
read rights, this will prevent a higher-level vertex from taking read rights to a lower-level vertex. 
The above argument can be made more rigorous, and shows: Lemma ~5.4: Restrictions of application are 
sound but not complete.  Restrictions of Direction and Application Both restrictions of application 
and restrictions of direction have one severe shortcoming: under them, the de jure rules are not complete. 
In the majority of cases, this is far too strong a restriction; often it is necessary for a lower-level 
user to know so~ething about the higher-level documents, such as the existence of those documents. But 
this information could never be transmitted from a higher-level user if the graph rewrit- ing rules used 
were not complete. Hence, consider a combination of the first two res- trictions. The object is to modify 
the take and grant rules so that no explicit or implicit read edges go from a higher to a lower rwtg-level 
after a finite number of de 2ure and de facto rule applications, We propose the following restriction, 
in which a directed path begins at a source vertex and ends at a target vertex: No de jure rule may 
be applied if, as a result, e~her of the following connections would be completed: (a) ~ with the source 
vertex lower than the terminal verte2, Or (b) %D with the source vertex higher than the terminal ~erte~:. 
 In more formal language, let R be a de jure rule, and let G ~'R G'. This is an invalid step in a derivation 
if there exist vertices x,yeG such that x>y, no edge from x to y has associated word ~ and no edge from 
y to x has asso- There is an intuitive basis for these restrictions, First, notice that the reason bridges 
are included in Theorem 5.2 is that rights are transmitted over bridges, and so in the sequence of rule 
applications to move the right along the bvidge, one of the three (forbidden) con- nections must occur. 
(Aread edge from one vertex to a higher one violates restriction (a), and a write edge from one vertex 
to a lower one violates restriction (b), For the third possible connection, the object which is the target 
of the write edge belongs to the lower level, so it reduces to restriction (a).) Thus, not the construction 
of bridges, but only the transmission of read or write rights along them, need be restricted. In addition, 
there is no restriction on ~ny rights other than read and write. In particular, other rights can be freely 
passed from one level to another'. This is an advantage of these restrictions, and enables us to show 
the main result: Theorem 5.5: The de jUTe and de facto rules, under the restriction stated above, are 
both sound and complete. Pmaf: SOUNDNESS: This follows immediately from Theorem 5.~, the nature of the 
restriction, and the fact that if read or write rights are passed along bridges, there will be a connection 
before the right is acquired by the tar- get vertex. COMPLETENESS:Let Go ..... G. be a sequence of protection 
graphs such that Go and Gn are secure (but G 1 ..... Gn_ , need not be secure). Let r 0 ..... rn_ l be 
a set of unres-tricted de jure and de facto rules such that G o ~-r0G 1 i-- r, ..... G,~_,~-r~_lGn . 
Then we must find a sequence r', ..... r'~ of rewriting rules such that G0~r,QG'I r' 1 ..... G'~-I ~-r%_lG'z 
and G'~=Gn. As G 0 and G~ are secure, no connections exist in either. If none of the restricted connections 
were made by any of r o ..... r,~_~, then we are done (just take this sequence to be the sequence satisfying 
the restrictions). So suppose a connection was made by some rule applica- tion, say, TiQ. Only an implicit 
read edge could have been added via this connection. Let zj~, . . . ,rj,~ be the set of rules that manipulate 
this implicit edge. Clearly, none of these rules can change any explicit edges in the graph (by inspection 
of the de f=cLo rules); and when the con- nection made by ri0 is broken (as it must be, for there are 
no connections in Gn), a|i implicit edges made by the rules rj~ ..... r)- will be deleted from the protection 
 graph. Hence, the existence of the connection in the derivation has no effect on the final graph, because 
any edges added as a result of its existence will be deleted by the end of the derivation. Thus, we may 
delete rio ..... fir n from the derivation. Repeat these deletions for every restricted connection formed 
during the derivation; as no restricted connection is formed by the remaining sequence of rule applications, 
it is the one sought, l Note that a greater number of secure graphs may be formed by using the restricted 
rules than by using the unrestricted ones, because without the restriction the only way to prevent connections 
is to ban all bridges as well. An example will emphasize this result. Consider the protection graph 
G in figure 5. I, In this graph, e stands for the right to exeezLfe a file, Under the unrestricted de 
 jure and de facto rules, Gis not secure, because by using the take rule, x can obtain a write edge to 
y, and hence can pass information to another vertex in a lower rwtg-[evel. But under the restricted de 
2ure and de jfgcto \ rules, x cannot obtain a write edge to y, because com-pleting the required connection 
would violate restriction (b), Yet, notice that x can still obtain the right to exe- cute y; that is 
not constrained by the restrictions, "tD, e Figure 5. i --Sample Protection Graph The next question is 
the complexity of the result, How hard is it to test whether or not a given graph meets the restriction, 
and how hard is it to test whether or not application of a given rule violates the restriction? Clearly, 
to test for a violation, we need only look at each edge labelled r and each edge labelled ~. Thus'. Corollary 
5.6: Testing a graph for violation of the restric- tion may be done in time linear in the number of edges 
of the graph, Corollary 5.7: Determining whether or not an application of a c/e j~re rule violates the 
restriction may be done in constant time. B. Conclusion In this discussion, conditions have been established 
under which a hierarchical protection system is secure regardless of how many of its subjects are corrupt. 
We have also found restrictions on de jure rules that ensure security without restricting the transfer 
of rights other than reading or writing. It is somewhat surprising that the de facto rules need not be 
restricted to ensure security. But de facto rules merely indicate graphically how information flows through 
the graph, whereas the de jure rules control the paths along which information can flow. So restricting 
the de jure rules is logical. Would it be possible to restrict the de facfo rules to acheive the same 
results? No, for two reasons. The first is that there are graphs in which one can breach secu- rity 
by using de jure rules only (see f]gure 6,1), The second is more subtle, and hinges on the distinction 
between an implicit and an explicit edge. The de jure restriction is not a modification of the de jure 
rules, but only of the instance of application. Unfortunately, such a restriction is meaningless with 
 respect to the de f~cfs rules, because the information can still flow; the only restriction is on acknowledging 
 T F~ure 6, I  that flow. Implicit edges, added by defacto rules, merely indicate the paths along which 
information can flow, and do not create new paths (or delete old ones). On the other hand, explicit edges, 
added by ge jure rules, do create (or remove) paths along which information can flow; hence restrcting 
them does restrict the flow of information. In the model described in this paper, the security classification 
of information cannot be changed without compromising security. No classification can be raised, because 
anyone with access to the information could have made a private copy; then, after the classification 
level is raised, he still has access to the information which is now at a higher level. Lowering a classification 
of some information can also lead to a violation, because a high-level person could declassify confidenUal 
informa- tion so that someone at a lower level could obtain it. Under the definition of secure used here, 
this is a secu- rity violation. Permitting declassification would raise a host of problems. Suppose a 
file were declassified. Unless the protection system were to ensure that no user at a level higher than 
the new level of the file were to have write rights on the file, the system is no longer secure; all 
one of those users would have to do is to write classified information into that file. Such a protocol 
would involve assuming a user or classification manager could be trusted -and this would violate an underlying 
assump- tion. This model was developed under the assumption that no user should be able to break security, 
an assumption not present in earlier Take-Grant models of hierarchical protection systems. The results 
give con-straints on the system which prevent any user, regard-less of classification, from passing information 
to another user with a lower classification. Were it not for this assumption, the protocol for declassification 
would be obvious; whether or not this assumption is valid, and in what ways it must be weakened to permit 
declassifications, is still an open question. Note that when these results are applied to the Take-Grant 
model of a document system, the total view of security given in [1] is obtained. As the write author- 
ity in the Take-Grant model is not a viewing right, the vrite authority of the Take-Grant model is the 
same as the append authority of Bell and LaPadula. Then, res-triction (a) is equivalent to the refined 
simple security property, and restriction (b) is the no write down pro- perty. These restrictions apply 
to any system that can be modelled as a hierarchy in the Take-Grant model. The basic difference between 
this model of hierarch- ical protection systems and earlier Take-Grant models (of. [7]), is that de facto 
as well as de jure rules arc used. The representation of security levels makes sharing among vertices 
in a security level simple. Also, rights from a lower to a higher security level are permitted (subject, 
of course, to the two restrictions); this was not the case in earlier models. Both these features make 
the model very straightforward; even if modified to per- mit reclassification, this model is far simpler 
than ear-lier ones which only used de jure rules. This model is an example of the application of the 
de facto rules developed in [2]. These rules are merely one possible set of de facto rules. We do not 
claim that these rules are the best ones to use, or model the real world most closely; as their effects 
have been explored previ- ously, they were most convenient for our purposes. Under different de facto 
rules, the development would be similar; and due to the considerations outlined above, the restrictions 
obtained would have to act on the de jure rules, or the application of the de jure rules, rather than 
the de facto rules. Acknowledgements: Special thanks to Dorothy Denning and Lawrence Snyder for their 
many helpful comments and suggestions.  l~eferences 1. Bell, D. and LaPadula, L., "Secure Computer Sys- 
tems: Mathematical Foundations and Model," Techn- ical Report M74-244, The Mitre Corporation, Bed-ford, 
MS (October 1974). ~. Bishop, M. and Snyder, L., "The Transfer of Informa- tion and Authority in a Protection 
System," Proc. 7th Syrnp. on Operatin 9 Sy~terr~s, pp. 45-54 (December 1979). 3. Denning, D., "A Lattice 
Model of Secure Information Flow," CACM 19(5) pp. 2B6-243 (May 1976). 4. Denning, D., Cryptography and 
Data Security. to be published. 5. Jones, A., Lipton, R., and Snyder, L., "A Linear 'rime Algorithm 
for Deciding Security," Proc. 172h Annual Syrup. on Foundations of Cornl)ut ev Science, (1976).  6. 
Lipton, R. and Snyder, L., "A Linear-Time Algorithm for Deciding Subject Security," JACM 24(g) pp. 455- 
464 (July 197'?). 7. Wu, M., Hierarchical Protectio~ SysteMs, University of Iowa, Iowa City, IA (December 
1980). Ph.D. Thesis 
			