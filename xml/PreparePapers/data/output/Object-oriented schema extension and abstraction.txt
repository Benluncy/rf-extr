
 Object-Oriented Schema Extension and Abstraction Walter Hursch and Karl Lieberherr Sougata Mukherjea 
College of Computer Science, Northeastern University College of Computing, Georgia Tech Abstract An 
algorithm is presented that abstracts out the largest common substructure of two given object­oriented 
class structures. This abstraction algorithm is based on two concepts: (1) a mathematical formulation 
of extension for class structures containing part-of and inheritance relationships, and (2) a definition 
of simi­larity on the class level. The algorithm shows how class structures can be optimized with respect 
to the exten­sion relation, and how it can be used to abstract out a candidate parameterized class structure. 
The algorithm has been implemented as a schema transformation and design tool in the Demeter System. 
Keywords: Software Reuse, Parameterized Program­ming, Schema Evolution, View Integration. Introduction 
In their paper on Designing reusable classes [8], John­son and Foote ask for a tool to help the programmer 
reorganize class hierarchies. When reorganizing class hierarchies, it is important to reuse as many of 
the old design components aa possible. As Palsberg and Schwartzbach show [17], there are two major approaches 
to reuse of software components: polymorphism and prefixing. They describe polymorphism as reuse in ap­plications, 
and prefixing as reuse in definitions. In pre­fixing, a component may be described as an extension of 
another component. A typical example of a prefixing mechanism in object-oriented systems is inheritance. 
Inheritance is not powerful enough to express many in­teresting relationships between groups of classes, 
and therefore, a more general prefixing mechanism is needed. The paper by Lieberherr et al. [131 introduces 
such a mechanism as a set of three increasingly strong exten­sion relations on class dictionary graphs. 
A class dicti~ nary graph is used in the Derneter data model [2, 15] to model object-oriented schema 
designs. Prdsaioa towpywitbomtfwdforpml Ofthkmsterid mgrmted fnwidaf tbttbuwpim smnotalwbe Ordktributi 
for direct comoxdaldmtagetheAChwtkemdtktitkoftk fqyri#t pbliatioo dit8datesp pmr,mrfootk qryingmby irgk.mtbatpcrmioiioftheAmocktiom~. 
To copy for t3qmtiq otbawii, or to rqrubhb mqUire#s fee .ui/Or8peci6G~ ACM-SAC 93L?#3~ USA CJ1993ACM 
O-69791-56&#38;~.~1* Based on the extension relations, we introduce an al­gorithm that abstracts out, 
from two given schema de­signs, the largest common subdesign such that both the original designs are 
extensions of the abstracted one. This concept is illustrated in Figure 1. Schema 1 0 EXTENS1ON \/ Abstracted 
Schema o Figure 1: The concept of the abstraction mechanism An algorithm that factors out the common 
structure of two given schema definitions has many uses. One useful application of this algorithm is 
that, ideally, one has to write software which is common to both schema 1 and 2 only once for the classes 
in the abstracted schema. Then, by extension, the software for schema 1 and 2 is reused. Indeed, it has 
been shown that the extension relations have the important property that code which has been written 
for a given schema needs only minor changes when the schema is extended [6]. These changes can be even 
further reduced if the software is written in an adaptive style using so-called propagation patterns 
[11, 16], a novel programming technique that avoids, as much as possible, hardwiring structural information 
into the programs. Another useful application of the abstraction algorithm is to provide a way to succinctly 
describe schemas. Both extended schemas can be speci­ fied in terms of the abstracted schema by simply 
giving for each one the extension operations necessary to pro­duce the extended schema. Many other areas 
benefit from the proposed abstraction mechanism: Software reuse and refactoring: Given a schema for a 
finished application and a schema for a second, 54 planned application, the designer can try to reuse 
as much of the old schema as possible by adding on to the abstracted schema. Design of very large applications: 
Often several existing schemas have to be integrated into a sin­gle large schema. This can be achieved 
by creating a centralized system from several existing systems, by moving from a distributed system to 
a central­ized system, or by merging several views into one global schema. Software reengineering: The 
reengineering of sev­eral applications can be facilitated considerably by extracting and analyzing the 
class structures com­mon to the given applications. In addition to the information on how to extract 
the common class structure, the algorithm can give suggestions on how to parametrize it. Redundancy recognition: 
A primary goal of good schema organization is to recognize redundancy and to reduce as much of it as 
desired. The abstrac­tion algorithm automatically discovers redundancy in groups of classes by finding 
a maximal subgroup common to them. This paper i; organized as follows: In the second section, the data 
model and the concepts to describe the algo­rit hm are formally introduced. The third section defines 
the extension relations. The fourth section presents the algorithm, as well as several of its key properties, 
and in the fifth section, related and future work are discussed. The Demeter Data Model The study at 
hand uses the Demeter data model because of its concise mathematical notation and its ability to model 
classes with both their inheritance and part-of re­lationship in a uniform theory. These two features 
make it an ideal foundation for theoretical studies. [10, 15] define the Demeter data model thoroughly. 
We repro­duce enough of the definitions to make this paper self­contained. Readers already familiar with 
the Demeter data model can skip this section. The Demeter data model captures the relevant infor­mation 
of the class structure in a graph, called a class dictionary graph. The model distinguishes two kinds 
of clases: alternation clases and construction classes. Any superclass is called an alternation class 
and its corresponding alternation vertex in the graph is rep­resented by a hexagon. All alternation classes 
are con­sidered to be abstract classes; that is, no objects of an alternation class can be inst,antiat 
cd. Any leaf class in the class hierarchy is calltvi a ro~isirucf?on c~ass and its corresponding construction 
~ertex iu the graph is rep­resent cd by a rwtal)glr Two kinds of relationships between classes are distin­guished. 
The inheritance (or is-a) relationship is repre­sented by an alternation edge in the graph and is drawn 
as a double-shafted arrow (=+) from the superclass to the subclass. Multiple inheritance is possible. 
The whole-part (or part-of) relationship is represented by a labeled construction edge in the graph and 
is drawn as a single-shafted arrow ( ) from the whole to the part. The label of the construction edge 
denotes the name of the part, and the class the edge points to denotes the type of the part. Information 
about which methods are attached to a class is deliberately omitted from the class dictionary graph. 
However, the structural information of class dic­tionary graphs is used by the complementary notion of 
propagation patterns to inject methods into the classes [11]. Class dictionary graphs are therefore piv­otal 
for the behavioral aspect of an application. To illustrate the notion of construction and alternation 
clases, and to explain how a class structure is mapped into a class dictionary graph, we use a simple 
example from a business domain. The class dictionary graph for this domain is shown in Figure 2. The 
depicted class dictionary graph models a division that belongs to a company. The division is managed 
by a manager and employs a number of employees, each of whom has a name and cari be either a worker or 
a manager. As an example of a construction class, consider the class Division. Its three direct parts 
are the company, the manager and the list of employees modeled by the classes Company, Manager and Emp 
List, respectively, As an example of an alternation class, consider an em­ployee, who can be either a 
worker or a manager. Thus, the entity employee is modeIed as an alternation class, Employee, with the 
two alternatives Worker and Man­ager. Alternatives can themselves be alternation or con­struction classes. 
In this case, they happen to be two construction classes. Often some of the alternatives have the same 
parts. For example, both types of employees, Worker and Manager, have a part name of class Ident. The 
equal parts can become the parts of a common superclass (in our case Employee), so that the subclasses 
inherit them. Com­mon parts of the alternatives are pointed to by labeled single arrows originating from 
the alternation vertex. The process of moving equal parts up to a superclass is called abstraction of 
common parts; the inverse pro­cess is called distribution of common parts [10]. A class dictionary graph 
with no common parts is called flat. Note that a part does not have to be a physical part; any attribute 
of an object is modeled as a part of it, such as the belongsTo part of class Division. Tile part-of containsDivision 
bclongsTo company tkst rest managedBy t Manager Worker Nonempty EmptyIII [I Figure 2: A claas dictionary 
graph modeling a division with employees relationship in the Demeter model is therefore a gen-The intuitive 
notion of alternation-reachability in a class eralization of the aggregation relationship which only 
dictionary graph is extensively used in later sections. A describes physical containment. A part can 
be either formal, recursive definition follows. directly attached to a class by a construction edge or 
it can be inherited from a superclass. Definition 2 In a cbs dictionary graph I = (VC, VA, A; EC, EA),Note 
also that in the Demeter model, as in [5], alterna­a vertex w E V is alternation-reachable from vertex 
tion edges are drawn in the direction opposite to which v E V (written v ~ w) (1) via a path of length 
O, if they are drawn in other models (e.g. [4]), indicating v= w, and (2) via apath oflength n+ 1,if3UE 
V such the direction in which properties are inherited. More­ that (v, u) E EA and u ~ w via a path of 
length n. over, unlike many other data models, the Demeter data model distinguishes between and thus 
separates instan­tiable and abstract claszes. This separation does not The Demeter data model imposes 
two axioms for build­reduce any expressibility and produces a cleaner design. ing meaningful and consistent 
class dictionary graphs. The cycle-free alternation axiom requires that no class The full Demeter data 
model exhibits a number of other inherit from itself. The unique labels axiom guarantees useful features 
such as repetition classes, parameterized that the construction edges of a class (inherited or not) classes 
and optional parts [14]. While aN of these fea­ are uniquely labeled. A class dictionary graph is consid­tures 
are convenient, they are not ezsential in the model, ered legal if it satisfies both these axioms. Throughout 
since they can be expressed by alternation and construc­ the rest of this paper, the term class dictionary 
graph tion classes. As an example, the list of employees is im­ will refer to a legal class dictionary 
graph. plemented by an alternation class and two special con­ struction classes Empty and Nonempty, which 
together Class Dictionary Graph Extension build a linked list similar to a list of cons cells in Lisp. 
This construction could equally well be represented as The extension of class dictionary graphs can be 
viewed a repetition class. primarily from two perspectives. A fine grained per­spective considers the 
extension of a class dictionary For the kind of study done in this paper, it suffices to graph at the 
primitive elements of the data model, such give the following formal definition of a class dictionary 
aa adding a new class, renaming a class, adding a part graph: to a class, changing the domain of a part, 
and so forth. Another perspective is more coarse grained since it ana-Definition 1 lyzes the modeling 
power of the class dictionary graph as A class dictionary graph I is a directed graph a whole. This modeling 
power is determined by the set r= (VC, VA, A; EC, EA) with finitely many vertices of objects that can 
be modeled by the class dictionaryV= VC U VA. VC is the set of construction vertices. graph. In this 
section, three coarse grained extensions VA is the set of alternation vertices. A is a finite set are 
defined and analyzed. The three relations can be of labels. EC is a ternary relation on VxVx A. An decomposed 
into fine grained primitive relations thus element (v, w, 1) c EC is called a (labeled) construction 
edge from vertex v to vertex w with label 1. EA is a yielding insight from both perspectives [13]. binary 
relation on VA xV. An element (v, w) E EA is All extensions are expressed as relations on class dic­ 
called an alternation edge from vertex w to vertex w. For mr.vv E VA there must be an edge (v, w) E EA 
for some tionary graphs. Each relation is naturally associated u! E l . with a transformation of a class 
dictionary graph. The three key extension relations are: object-equivalent, weakly-extend and extend. 
Informally, object­equivalence preserves the set of objects modeled by the class dictionary graphs [2, 
10]; that is, although the structure of two equivalent class dictionary graphs are different, they both 
model the same set of objects. Weak extension enlarges the set of objects while maintaining the ability 
to model the old objects; that is, the set of objects of the weakly extended class dictionary graph is 
a superset of the unextended class dictionary graph. Extension similarly enlarges the set of objects, 
but in addition augments some objects with new parts. The three extension relations represent a sequence 
of increas­ingly stronger transformations. The extension relations together with their converse relations 
form the basis for general class dictionary graph transformations. The extension relations Before we 
can present the extension relations formally, we need a succinct way to specify all the classes whose 
instances can be aasigned to a part of a given claas. This is described by the notion of PartClusters 
defined be­low. Informally, the PartClusters of a class w are a list of pairs, one pair for each part 
of W. Each pair consists of a part name and the set of construction claases whose in­stances can be assigned 
to the part. Note that since all alternation classes are abstract, only instances of construction cl~es 
can be actually assigned to a part; that is, even if a construction edge points to an alter­nation class 
W, the only objects that can be assigned to the part are instances of construction classes that are alternation-reachable 
from w. To illustrate this, con­sider again Figure 2. Clearly, the managedBy part of class Division can 
only contain objects of class Manager. However, the actual objects assigned to the first part of clam 
Nonempty may only be objects of either class Worker or class Manager, but not of the abstract class Employee. 
A coverage relation is defined for the PartClusters of two class dictionary graphs. The PartClusters 
of a class v in one class dictionary graph are covered by the Part-Clusters of the corresponding class 
v in a second class dictionary graph if v has at least as many parts in the second class dictionary graph 
as it has in the first one, and if every instance that can be assigned to a part in the first claas dictionary 
graph can also be assigned to the second one. In addition, we define the PartLabels of a class u to be 
the set of all labels that denote a part Ofv. Definition 3 Letr = (VC, VA, A; EC, EA) be a class dictionary 
graph and V= VS5 U VA. Then we define for all vertices [1E v: The associated set of v is A(v) = {v I 
V E I C and t, 4 1) ) PartClustersr(v) = {( I, A(w)) I 1 E A, v , w E V, (u , w,i) E EC, and u ~ v). 
PartClustersr(v )[t] is the pair (i, /3) in PartClustersr(v) whose first element is 1 E A. /3 is called 
the domain of the part of v with label 1. Note that for a given u, the label 1 is unique because of the 
unique label axiom. PartLabelsr(v) = {/ I 3(/, ~) E PurtClustersr(v)} Let I?l and r2 be two class dictionary 
graphs with VCI G VC2 andletv G VCI. We say that PartClustersrl (v) are covered by PartCJustersr2(v) 
if for all (/,/31) E PartC/ustersr, (v) there exists ([, Pz) E PartCk4stersr2(u), s.t. PI C 192. Pr2rK 
luster9r, (v) are tightly covered by Parteiustersr, (v) if PartChstersr, (v) are covered by PartClustersr2(v) 
and in addition PartLabelsr, (v) = PartLabelsr2(v). Example 1 Consider the extend transformation in Fig­ure 
3. The PartClusters for the vertex Division are: PartClusters(Division) = { (belongsTo,{Company }), (contains, 
{Empty, Nonempty}), (managedBy,{Manager}) }. In the same transformation, the PartClustersr, (Nonempty) 
are tightly covered by the PartClustersr2 (None mpty), since the domain of the first part in rz contains 
in addition to the classes Manager and Worker also the class Secretary while the domain of the rest part 
is the same in both class dictionary graphs. o The above definitions allow us to define the three ex­tension 
relations of class dictionary graphs formally. Definition 4 Let rl and rz be two class dictionary graphs, 
where J71 = (VCI, VAI, A1; ECI, EAI) and I 2 = (VC2, VA2, A2; EC2, EA2). Class dictionary graph rl and 
rz are object­equivalent, written rl > rz, if VC1 = VC2 and for allvevcl: PartClustersr, (v) = PartClustersr2 
(v). Class dictionary graph r] is weakly extended by class dictionary graph rz, written I 1 ~ r2, if 
VCI < VC2 and forall vc VCI : PartClustersr, (v) are tightly covered by PartClustersr, (v). Class dictionary 
graph I 1 is extended by class dictio­nary graph rz, written rl < rz, if VCI C VC2 and forall v6 VCI 
: PartClustersr, (v) are covered by PartClu.9tersr2 (v). The object-equivalent relation is an equivalence 
relation on the set of all class dictionary graphs. The wealily ­extend and the extend relations are 
partial (hut not total) orders on the equivalence classes defined by the object-equ i~alent relation. 
ldmll x I Award Idml I 1 Awti m I Cmmh r, lmmm I c-m-n 1 Iimlul  +-4 [ -1 Figure 3: Example of the 
extension relation Example 2 Each of the three extension relations is iUu­trated in Figure 3. The object-equivalent 
transformation is realized by abstracting the common part name from the two construction classes up to 
their common superclass Emp and, at the same time, changing its name to Employee. Note that class names 
of abstract classes are irrelevant for object descriptions. The weakly-extend transformation is effected 
by adding another alternative to the class Employee. Lastly, the extend transformation is performed by 
adding a new al­ternative, Secretary, and a new part, ssn, to the Employee alternation class. The new 
part is inherited by all alterna­tives of Employee. o The modeling power of the extended class dictionary 
graphs can be characterized as follows. If two class dictionary graphs 1 1 and r2 are object-equivalent 
then both describe the same set of objects. If they are in a weakly-extend relation, 172 describes a 
superset of the objects of f 1. In other words, every class defined in l_ 2that is also defined in 1 
1 has the same number of parts, but a possibly wider domain in the PartClusters. If 1 1 and f 2 are in 
an extend relation then, in addition, objects of r2 may have a greater number of parts. The Abstraction 
Algorithm: CDGA Now that the extension relation is defined, an interest­ ing question arises. Given two 
class dictionary graphs, what, is t,hc biggest class dictionary graph such that the former two are extensions 
of it? This problem is similar to the one of finding the greatest common divi­sor in arithmetic. The 
answer to the proposed question is of great importance to many areaa in object-oriented software engineering 
as described in the introduction. The abstraction algorithm presented in this section ex­tracts from 
two given class dictionary graphs a third one which is the biggest abstraction of the former two. Informally, 
a class dictionary graph is in the abstrac­tion set of two given class dictionary graphs if both of 
them are extensions of it. Furthermore, the class dictio­nary graph extracted by the algorithm haa the 
property that it is an extension of all the other claas dictionary graphs in the abstraction set. It 
is in this sense that the abstracted class dictionary graph is the biggest . Definition 5 Let I 1 and 
rz be two class dictionary graphs. abstraction(rl, I Z) = { r I r < r] and r < rz}. ABSTRACTION(rl, rz) 
= {r IVWc ab9tracii0n(r1, r2) : II < r}. The algorithm goes even one step further by giving sug­gestions 
on how the resulting class dictionary graph could be parameterized. Such an abstracted class dicti~ nary 
graph is called a template class dictionary graph, and is formally defined as follows. Definition 6 A 
template class dictionary graph @ is a directed graph @ = (V, A; EC, EA) with finitely many labeled vertices 
V, V=(VC U VA U VP). VC and VA are the construction and alternation vertices, respectively, while VP 
are the parameterization vertices. There are two defining relations EC, EA. EC isa ternary relation on 
(VC U VA) x Vx A, called the (labeled) construction edges. EA is a binary relation on VA x(VC U VA), 
caIled the alternation edges. Note that the parameterization vertices cannot be the source of any edges, 
and can be the targets of construc­tion edges only. A template class dictionary graph is le­gal if the 
corresponding class dictionary graph, formed by instantiating all the parameterizaticm vertices, is le­gal. 
Example 3 As an illustration of how CDGA works, con­sider Figure 4. r is the class dictionary graph abstracted 
from rl and rz by the algorithm. r has two parameterized vertices, one for the belongsTo part and one 
for the first part of class Nonempty. After the removal of the parameterized vertices in r, both r] and 
rz are extensions of r. o In order to find the structures common to two class dictionary graphs, the 
algorithm analyzes them at both the vertex and edge level. For this purpose, the notion of generalization 
is introduced and a function abstract defined. Both concepts will be used in the algorithm. 1nformally, 
a vertex is a generalization of another vertex if the former is an alternation predecessor (a superclass) 
of the latter. For two class dictionary graphs, this can be formulated as in the definition below. Definition 
7 Let I 1 and rz be two class dictionary graphs, where rl = (VCrl , VAr,, Ar-l; ECr,, EAr, ),rz = (VCr,, 
I /lr,, Ar,; ECr,, EAr, ). A vertex v E VAr, general­ izes a vertex w E VCr2 if 3WE VCrl with v~ win 
rl, For two given class dictionary graphs, rl and rz, the function abstract checks two vertices from 
each class dic­tionary graph for similarity and returns the correspond­ing abstracted vertex in the abstracted 
class dictionary graph. Definition 8 Let rl and rz be two class dictionary graphs, where 1 1 = (\ C r, 
, VArl) Arl; ECr, , E.4r, ), rz = (VCr,, VAr,, Ar2; ECI.2, EAr2). For a vertex v c l~r, and a vertex 
u, ~ I r-2 , the function abstract : Vr, xVr2­ ~+, u I+? u (Vrl x 1+2 ) is defined as follows: 1. if 
7,6 I C J~, u, E I C,. q and if 7)= u,, then (Ihtrw(+(?!, w) = f,. 2. if vc VCrl ,w . V,4r2 and if w 
generalizes v then abstrcsct(v, w) = u. 3 if v E vArl, w E VCrz and if u generalizes u~ then abstract(v, 
w) = w. 4. if t)E VAr,, w E vAr2 and if Arl(u)fldr, (w) # 0 ifv=w then abstract(v, w) = u. else abstract 
(v, w, ) = uw, where uw is an alternation vertex whose label is the concatenation of the labels of v 
and w. A is the association set (see Definition 3}. 5. if none of the above conditions hold then abstract(v, 
w) = 0. Example 4 In Figure 4, consider the classes Employee and Manager in the clam dictionary graphs 
rl and rz. respec­tively. Manager is alternation-reachable from Employee in I 1 and therefore Employee 
generalizes Manager. To illustrate the function abstract, take as an example a call to abstract with 
the arguments EmpList and DepList of Figure 4. This call to abstract(EmpList, DepList) would re­turn, 
according to case 4, a class with label EmpListDepList (EmpDepList for short) because the associated 
sets of both argument classes contain the construction classes Nonem pty and Empty. o The Algorithm Given 
these definitions, we are now ready to present tll, abstraction algorithm. Without loss of generality, 
tllc algorithm assumes that the two class dictionary graphs are flat; that is, all parts are attached 
to construction classes. There exists an efficient algorithm for convert­ing any class dictionary graph 
to a corresponding flat class dictionary graph [15]. Note that a class dictionary graph and its corresponding 
flat counterpart are in ali object-equivalent relation. INSTANCE: Given two flat claas dictionary graphs 
1 1 and r2. SEARCH: Find a template class dictionary graph r= (VCr, VAr, VPr, Ar; ECr, EAr) such that 
the following two conditions are satisfied: 1 If T is the class dictionary graph resulting from deleting, 
in r, all the parameterization vertices and the edges leading to them, then r E ABSTRACTION(rl , f 2). 
 2. For each (v, W1W2, /) E ECr, where w1tv2 E VPr, there exists W1 E Vr, and W2E Vr2 such that: (rJ,w] 
,/) E ECr,, (v, UJ2,1) E ECr, and abstract, (wl, w?) = (!. The notation u~lwq repre­sents a vertex whose 
label is the concatenation of the labels of U1 and Wz INFORMAL DESCRIPTION: First, the constr\ic­ticrll 
vertices of r are taken to be all the construction 59  r, w 1 r 1­ f-l 1 I Figure 4: Example of vertices 
that are present in both 1 1 and 1 2. Second, the construction edges and their labels are extracted aa 
follows. For each abstracted construction vertex in r check each pair of parts in rl and r2 for similarity 
by using the function abstract defined in the previous sec­tion. If abstract does not return the empty 
set, the part which is returned will be abstracted out. If the parts being compared are both alternation 
vertices, the pro­cedure alternation-abstract is recursively called to check how many of their children 
are similar. For each pair of children, alternation-abstract calls the function abstract, and if some 
pair matches, the alternation vertex with the matching edgea is added. Third, the parametrizat­ion vertices 
are formed, All parts with the same label but unsimilar target vertices are abstracted as parame­trized 
parts. ALGORITHM CDGA: Let rl and rz be the two in­put class dictionary graphs, where I 1 = (VCr,, VArl, 
Ar,; ECrl, EAr, ) and f z = (VCr,, VAr,, Ar,; ~Cr,, EAr2). The abstracted class dictionary graph I = 
(VCr, VAr, Ar; ECr, EAr) is constructed as fol­lows: 1. Form VC r. for all vE VCr, if v E VCr, add vto 
VCr 2. Form EC r and Ar. for all (v. WI, /) E EC rl , where v E l-C:r Cunk -kK1 Al n 1 I I an abstraction 
of CDGA if 3(u, W2,/) E ECr2 and abstract(wl, W2) = z # @ add 1to Ar ­add (u, z, 1) to ECr. if WIE VAr, 
and W2E VAr, and z$! VAr call alternation-abstract( wl, W2). Form EAr and VAr. procedure alternation-abstracter.u1,w2) 
for WI ~ VAri and W2 G VAr2: let w= abstract(wl, w2). for all (wl, Z1) E EAr, for all (W2, Z2) E EAr, 
 if abstraci(zl, Z2) c y # 0 if w $ VAr add wto VAr. add (w, y) to EAr. ifzl E VArl and X2 E VAr, and 
y# VAr call alternation-abst ract(zl, Z2). 3. Parametrization: form VPr, add to ECr and Ar. for all 
(v, Wl, /) E ECr,, where v E VCr if 2(v, W2, /) c ECrz and abstract(wl, W2) = 0 add 1 to Ar, if W1W2$! 
V&#38; add W1W2to Vl+­add (v, WIW2,1) to ECr. Note that the procedure alternation-abstract is recursive. 
The termination of the recursion is guaranteed by the cycle-free alternation axiom. The abstracted template 
class dictionary graph consti­tutes an important first step towards the parameteriza­ 60 tion of object-oriented 
software. A template class dic­tionary graph is based solely on the class structure. A complete design 
of a parameterized class structure must of course also consider information on methods. In this sense, 
an abstracted template class dictionary graph can only be viewed as a working basis from which a final 
parameterization structure can be constructed. hTcver­theless, as a first approximation, this basis gives 
very valuable information. A sample scenario that follows shows how the abstracted class dictionary graph 
could be reused. Assuming that each class knows how to print itself, we can implement a program that 
describes an object of class Division in the abstracted class dictionary graph (cf. Fig. 4). First, an 
object of class Division sends a print message to its beiongsTo part. Second, it sends a print message 
to its managed By part which then prints its name. Finally, the code iterates through the list attached 
to the con­tains part sending the message print to each of the first parts. This program would need only 
minor revisions for the extended class dictionary graphs. PrOpert ies TIIe Demeter data model allows 
for formal proofs of a number of properties of the abstraction algorithm. In the following discussion, 
these proofs are omitted due to space limitations, but are available in [12]. The key property of the 
algorithm is, of course, its correctness. As another property, the behaviour of the abstraction algorithm 
can be shown in two special cases. As a first case, we consider the result of CDGA when the two input 
class dictionary graphs are object-equivalent. As expected, the abstracted class dictionary graph is 
object-equi~ralent, to both of them, In the second case, the second input class dictionary graph is an 
extension of the first one. Then, the abstracted class dictionary graph is object-equivalent to the first 
il~put class dic­tionary graph. Formally, these two properties can be stated as follows: 1. If 1 1 ~ 
rz andifr = CDGA(rl,rz), then r ~ rl. The computational complexity of the algorithm can be shown to 
be: O((ncI-, x TICr,)+ (nar, x ~~ar,)), where llcr, , ncr. -are the total number of construction edges 
in r] and rz, respectively, and na[-l , ?lllr2 are the total numbt>r of alternation edges in r] and 1 
2, respec­tively. In other words. consider two schemas that have been instantiated from a parameterized 
schema by provid­ing an actual clam for each formal parameter class [14]. Given the resulting two instantiated 
schema-s as inputs, the abstraction algorithm produces the correct formal parameter classes. Related 
and Future Work A broad overview of database design tools is given in [1]. There, Reiner explores the 
phenomenon of automated tools and support environments for database design. He also classifies tools 
by the following taxonomy: Editors, Analyzers, and Transformers. Transformers are defined to be tools 
that produce new or modified schemas from old ones . Clearly, the abstraction tool presented in this 
paper fits into this category. Relations between two groups of classes other than our extension relations 
have been proposed. Palsbcrg ailcl Schwartzbach [17] define the q-relation which is com­posed of the 
two mechanisms: type substitution and in­heritance. The a-relation is more powerful than the ex­tension 
relations since it incorporates methods directly into the class definitions. The abstraction algorithtn 
deals only indirectly with methods through tile propa­gation pattern mechanism. It would be interesting 
to generalize the algorithm such that it copes with more powerful extension relations. Bouzeghoub and 
Comyn-Wattiau s view integration method [3] is based on similarity matrices between two schemas instead 
of on an extension relatior]. They cCjrl­sider view integration as a unification process in the sense 
of Knight s definition [9]: Given two ~!escriptions x and y, can we find an object z that fits both dmcrip­tions? 
. However, view integration is more a union typ~> of operation whereas our abstraction is more an inter­section 
type of operation. Class dictionary graph transformations that preserve object-equivalence or constitute 
an extension are dis­cussed in [2, 13]. In the future, we plan to generalize the abstraction algo­rithm 
so that it is able to abstract classes and parts that have been renamed. This will require a more powerful 
algorithm. We also plan to work on an abstraction al­gorithm that abstracts from one schema instead of 
fronl two. Such an algorithm should be able to find ronl­mon subparts contained in two or more locations 
of one schema. Conclusions The abstraction aigorithll] also IIas tll( import ar]t. pro- Forrnal and rigorous 
approaches to data modeling are l>,rty tl)al it is ahlf, to r(conlpute tl)e k)rn)al paral]l­ important 
in order to improve the reliability an{] IIJ­ (t(,r cl;lsses t)f an il]stallti;lt{,d ])al i{ lll(. t{]i7, 
f>(l sc]lt,l)la. hustness of systems, The less complex a data IIIO[lel. tile 61 easier it is for people 
to understand and use properly. We have presented an abstraction algorithm based on a formal, simple 
object-oriented data model which helps the schema designer find suitable abstractions. We have also shown 
how to use the algorithm to abstract out a candidate parameterized schema design. Although this work 
focuses on extending class structures, it has been shown in [6] that methods attached to the classes 
only need minor adjustments after extensions, especially if they are written in an adaptive manner using 
propaga­tion patterns. Also, it is interesting to note that the data model is not only powerful enough 
to express the abstraction algorithm but is also an ideal means to prove the properties of it. The research 
presented in this paper is part of the Demeter project which researches and develops tools for object-oriented 
system development. The abstraction algorithm has been implemented using, and is now part of the Demeter 
System/C++. Our experience shows that the abstraction tool is useful in the extraction of suitable abstractions 
from class definitions. The Deme­ter System [7, 10] also contains other design time tools such as a schema 
validation tool, that complements the schema abstraction tool. Acknowledgement: We are grateful to Lydia 
Cartar and Ken Baclawski for their feedback and to the other members of the Demeter team: Paul Bergstein, 
Ian Hol­land, Linda Keszenheimer, Ignacio Silva-Lepe and Cun Xiao for their support in numerous discussions. 
This research was supported in part by Mettler-Toledo AG and the National Science Foundation under grants 
CCR-9102578 (Software Engineering) and CDA­9015692 (Research Instrumentation). The authors can be reached 
at the following E mail addresses: Walter Hursch and Karl Lieberherr at {huersch I lieber}@flora. ccs.northeastern. 
edu, and Sougata Mukherjea at sougata~cc.gatech. edu. References [1] Carlo Batini, Stefano Ceri, and 
Shamkant B. Navathe. Conceptual Database Design, an Entit~-Relationship Approach. Benjamin/Cummings, 
Redwood City, CA, 1992. ISBN 0-8053-0244-1. [2] Paul Bergstein. Object-preserving class transforma­tions. 
In Andreas Paepcke, editor, Object-Oriented Pro­gramming Systems, Languages and Applications Con­ference, 
pages 299-313, Phoenix, Arizona, October 1991. ACM, ACM Press. Special Issue of SIGPLAN Notices, VO1.26, 
No.]]. [3] Molirane Bouzeghoub and Isabelle Comyn-Wattiau. View integration by semantic unification and 
transfor­mation of data structures. In Hannu Kangassalo, editor, t?th International Conference on Entity-Relationship 
approach, pages 4 13 430, Lausanne, Switzerland, 10 1990, [4] Margaret A. Ellis and Bjarne Stroustrup. 
The Anno­tated C++ Reference Manual. Addison-Wesley, Read­ing, MA, 1990. ISBN 0-201-51459-1. [5] Keith 
Gorlen, Sandy Orlow, and Perry Plexico. Data Abstraction and Object-Oriented Programming in C++. John 
Wiley &#38; Sons, New York, NY, 1990. ISBN 0-471­92751-1. [6] Walter L. Hiirsch. Preserving object behavior 
during schema evolution. Technical Report NU-CCS-92-22, College of Computer Science, Northeastern University, 
Boston, MA, November 1992. [7] Walter L. Hiirsch, Linda Seiter, and Cun Xiao. In any CASE: Demeter. American 
Programmer, 4(10):46-56, October 199]. [8] RaJph E. Johnson and Brian Foote. Designing reusable classes. 
Journal of Object-Oriented Pragmmming, pages 22-35, June/July 1988. [9] Kevin Knight. Unification: A 
multidisciplinary survey. ACM Computing Surueys, 21(1):93-124, March 1989. [10] Karl J. Lieberherr, Paul 
Bergstein, and Ignacio Silva-Lepe. From objects to classes: Algorithms for object­oriented design. Journal 
of Software Engineering, 6(4):205-228, Jtiy 1991. [11] Karl J. Lieberherr, Walter Hiirsch, Ignacio Silva-Lepe, 
and Cun Xiao. Experience with a graph-based propaga­tion pattern programming tool. In International Work­shop 
on CASE, Montr&#38;l, Canada, July 1992. IEEE Computer Society. [12] Karl J. Lieberherr, Walter L. Hiirsch, 
and Sougata Mukherjea. Optimal and efficient schema abstraction. TechnicsJ Report NU-CCS-92-2, College 
of Computer Science, Northeastern University, Boston, MA, Decexn­ber 1992. [13] Karl J. Lieberherr, Walter 
L. Hirsch, and Cun Xiao. Object-extending class transformations. Technical Report N U-CCS-91-8, College 
of Computer Science, Northeastern University, Boston, MA, September 1991. [14] Karl J. Lieberherr and 
Arthur J. Riel. Demeter: A CASE study of software growth through parametri­zed classes. Journal of Objet 
t-Oriented Programming, 1(3):8 22, August, September 1988. [15] Karl J. Lieberherr and Cun Xiao. Formal 
foundations fol object-oriented data modeling. IEEE Transactions on Knowledge and Data Engineering, 1991. 
accepted for publication. [16] Karl J. Lieberherr, Cun Xiao, and Ignacio Silva-Lepe. Graph-based software 
engineering: Concise specifica­tions of cooperative behavior. Technical Report NU­CCS-91-14, College 
of Computer Science, Northeastern University, Boston, MA, September 1991. [17] Jens Palsberg and Michael 
Schwartzbach. Type sub stitution for object-oriented programming. In N. Mey­rowitz, editor, Object-Oriented 
Programming Systems, Languages and Applications Conference, pages 151-160, Ottawa, 1990. ACM Press. 
62 
			