
 On Computing the Intersection of B-Splines (Extended Abstract) B. K. Natarajan Hewlett Packard Laboratories 
1501, Page Mill Road Palo Alto, CA 94301 1..Abstract We consider the problem of computing a piecewise 
linear approximation to the intersection of a pair of tensor product B-spline surfaces in 3-space. The 
problem is rather central in solid modeling. We present a fast and robust divide-and-conquer algorithm 
for the problem, that is a generalization of the bisection algorithm for computing the roots of non-linear 
equations. The algorithm is guaranteed to solve a "nearby" problem, and our analysis proves that its 
expected run-time is linear in the worst-case size of the output. To our knowledge, this is the first 
such analysis, resulting in the first provably efficient algorithm for the problem. 2. Introduction B-splines 
are a class of interpolating functions. For a comprehensive discussion, see [Bartels et al. 1987; de 
Boor 1978; Schumaker 1981]. For a variety of reasons, B-splines are used extensively in the computational 
modeling of smooth surfaces such as automobile Permission to copy without fee all or part of this material 
is granted provided that the copies are not made or distributed for direct commercial advantage, the 
ACM copyright notice and the title of the publication and its date appear, and notice is given that copying 
is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires 
a fee and/or specific permission. &#38;#169; 1990ACM 0-89791-362-0/90/0006/0157 $1.50 bodies. The problem 
that interests us here is the following: given a pair of B-spline surfaces in 3-space and small positive 
~, compute a piecewise linear approximation to the intersection of the two surfaces, within a precision 
of e. As it happens, the intersection problem has been studied extensively in the literature. The algorithms 
reported may be placed in two broad classes (a) recursive subdivision and (b) iterative algorithms. For 
a pair of B-spline surfaces: (a) the typical recursive subdivision algorithm decomposes the surfaces 
into smaller pieces until each piece can be handled efficiently within precision ,, [Lane and Riesenfeld 
1981; Cohen et al. 1980; Dokken, 1985]. (b) The typical iterative algorithm finds one point of intersection 
of the two surfaces and then iteratively marches from this point to trace the curve of intersection. 
The size of the marching step is governed by the precision required, [Barnhill et al. 1987; Bajaj et 
al. 1988]. If iterative marching is to be efficient, the intersection curve must be without loops and 
singularities. To ensure this, the algorithm may sub-divide the problem so that each sub-problem is simple 
and may be handled effectively by marching. Some algorithms also isolate and remove the singularites. 
The primary advantage of the recursive subdivision algorithms over the iterative algorithms is that they 
are robust and are not affected by singularities. The primary disadvantage is that recursive subdivision 
algorithms tend to be computationally slower than iterative algorithms, due to the high cost of the subdivision 
step. Also, recursive subdivision often requires substantially more memory than iterative algorithms. 
In this paper, we present a recursive subdivision algorithm for computing piecewise linear approximations 
to the intersection of B-splines. The algorithm uses a simple and inexpensive form of subdivision, thereby 
combining the robustness of subdivision with the efficiency of iterative methods. Essentially, the algorithm 
is a generalization of the "bisection method" for finding the roots of a non-linear function and relies 
heavily on the availability of upper bounds on the second derivative of the splines. Other authors have 
employed such a method for intersection, [Wang 1984] and [Filip et al. 1986]. Our contribution here is 
two-fold: We suggest a simple and efficient method for estimating sharp upper bounds on the second derivatives 
of splines. The sharpness of our bounds contributes to the provably efficient nature of the algorithm. 
[Filip et al. 1986] estimate such upper bounds by computing the maximum values of certain polynomials. 
Secondly, we carry out an average-case asymptotic analysis of the algorithm. Specifically, for a pair 
of B-spline surfaces of order k xk, with n xn control points each, and maximum second derivative /~, 
we show that the expected run time of the algorithm is OIn2k'ak2~/e)*/2 I. In the above, the expectation 
is taken over the relative position of the two surfaces. This is weakly optimal in the sense that it 
is linear in the worst-case size of the output, i.e., there exists a pair of surfaces of order k x k, 
with n x n control points each, and maximum second derivative p, such that any piecewise linear approximation 
to their curve of intersection has l][n2"(~'x)12(~/e)x/21 segments. (Typically, k is a small and fixed 
integer.) The algorithm is space-efficient in that the storage required by the algorithm is O(klog(n2~/e)). 
Also, for the case when the relative position of the two surfaces is uniformly distributed over some 
given region of volume V, we show that the expected run time of the algorithm is where o~ is the maximum 
of the first derivative of the surfaces. We also obtain similar bounds for the intersection of a pair 
of t-dimensional B-splines in R d. Experiments suggest that implementations of the algorithm are significantly 
faster than competing iterative procedures. Also, the divide-and-conquer nature of the algorithm lends 
itself to simple and efficient implementation on parallel hardware. 3. Notation and Main Definitions 
Let R denote the set of reals. We will first define a B-spline curve and then extend the definition to 
surfaces. In what follows, vector quantities will carry arrows, as in ~. The coordinates of a point p 
is denoted by ~. Given are a sequence of n points {Pl,Pa ..... P,} in R d for some fixed d. We call these 
points the control points. The kth order B-spline curve on these points is a one-parameter, piecewise 
polynomial interpolation curve of degree k-1. Essentially, the curve C traces a weighted average of the 
control points, where the weight of each control point is determined by a degree k-1 basis function. 
C(u) denotes a point on the curve C and ~(u) the position of the point. c-'(u) = y]~iB~(u-i), u6[k-l,n], 
u6R i-=1 where Bt~ is the kth order basis function defined recursively as follows. B (u) ue[0,1j [" 
otherwise For k > 2, ,.<u) --+ 1 The points on the curve at which u ffi k-l,k,k+l .... are called the 
knot points of the curve. The kth order B-spline curve is continuous up to and including the k-2th derivative. 
Note that the continuity is with respect to the parameter u and not continuity in the X-Y plane. For 
a detailed discussion, see [de Boor 1978; Schumaker 1980; Bartels et al. 1987]. The spline curves defined 
above are called uniform B-splines as the basis functions are the same for all the control points. Non-uniform 
splines are discussed in the literature, [Bartels et al. 1987; Schumaker 1980]. It is known that the 
class of curves and surfaces representable by uniform and non-uniform splines are identical. In light 
of this, we limit our discussion to the technically simpler class of uniform splines. We now define the 
notion of a tensor product B-spline in R z. Given is a grid of m × n control points P~,~,Px,2..... P,~,, 
in R 3. The k x l order tensor product B-spline surface S on these control points is a piecewise polynomial 
parametric surface of degree k-1 and 1-1 in the two parameters. Typically, we choose k = 1 so that the 
surface is of the same degree in each of the two parameters. S(u,v) denotes a general point on the surface 
and ~(u,v) the position of the point. I1 m s~u,v) = ~ ~i, yBk(u-i)Bl(v-j), i=1]=1 ue[k-l,m], ve[l-l,n], 
u, vER. As in the above, throughout this paper we will use u and v as the parameters defining a B-spline 
surface in R a. If C(u) is a B-spline curve and TeR, C/[T] is that portion of the curve on which ueT. 
Similarly, if S(u,v) is a B-spline surface and T cR 2, the patch S/T denotes that part of S on which 
(u,v)ET. For instance, the patch S/[ul,uz] x [Vx,V2] is that part of S on which uE[ul,ua] and v~[v,,v2]. 
Let A be a patch S/[u,,u2] x [v,,v2]. Let p, denote the point S(ul, v,), P2 the point S(u2,v,), P3 the 
point S(u2,v2) and p4 the point S(ul, v2). The Pi are called the corner points of A. The surface composed 
of the two triangles PlP2Ps and P,P4Ps is called a secant surface of A. Note that the surface composed 
of the triangles P2PsP4 and P2P,P4 is also a secant surface of A. We now give a statement of the general 
intersection problem. Intersection Problem: Given are a pair of B-spline surfaces S, and $2. Report all 
points of intersection of S, and S~. Since a pair of surfaces may intersect at infinitely many points, 
the above does not completely define the computational problem. In order to define the computational 
problem, we must specify the form of the output required. Suppose that we require that the points of 
intersection be reported in piecewise polynomial form. What is the lowest degree polynomial that can 
represent the intersection of a pair of tensor product B-spline surfaces of order k × k? In [Katz and 
Sederberg, 1988] it is shown that two B-spline surfaces of order k × k can intersect in a curve of degree 
as large as 4(k-l) 4. For cubic B-spline surfaces, k f4 and this degree could be 324. This would require 
the calculation of-^-[3~ coefficients, which is rather large. Furthermore, the genus of this curve is 
433, ruling out the possibility of a parametric polynomial representation. With the above in view, we 
will only require an approximation to the true intersection, in that it is the intersection of two surfaces 
P~ and P2 that are "nearby" $1 and $2 respectively. In this paper, we will require that P, and P2 be 
piecewise planar, allowing a piecewise linear representation for their intersection. In the following, 
we formalize the notion of a "nearby" surface. Throughout this paper, we will use U'~ to denote the infinity 
norm. Definition: Let S and P be any two surfaces. We say S~,P if (a) for every point s on S, there exists 
a point p on P that is no further than away, i.e II~'-~il-< e. (b) for every point p on P, there exists 
a point s on S that is no further than c away, i.e [[~-sT[ _< e. Thus an algorithm for the intersection 
problem would take as input parameter and compute the intersection of two piecewise planar surfaces 
P,~,S~ and P2 ~,$2. Finally, we address the issue of computational precision. We provide an additional 
input parameter 6 and require that all points be reported only within precision 6. Intersection Problem: 
Given are a pair of B-spline surfaces $1 and $2 and small positive real numbers 6 and 6. Report within 
precision 6, all points of intersection of P1 and P2, where P, and P2 are any two piecewise planar surfaces 
such that P1 ~cS, and P2 ~cS2. In the above, we could also choose to require that the approximations 
maintain the topology of the original surfaces in that no "holes" are introduced or removed. This is 
achievable quite easily in the algorithm that we are to present, but we will not discuss this issue in 
this paper. 4. The Algorithm The following is a skeletal description of the divide-and-conquer algorithm. 
Essentially, the algorithm subdivides the problem into smaller problems until each problem involves a 
pair of surfaces whose secant surfaces are also e-approximations. function intersect(A,B, e,6). A, B 
B-spline surfaces, e,6 > 0. begin if A does not intersect B return; (1) if A and B are both planar within 
 then (2) approximate each surface as a pair of triangles; output the intersection x of the triangles 
with precision 6. else (3) split A into four pieces Ax,A2,A3,A4; split B into four pieces Bx,B2,B3,B4; 
for each pair Ai, By do intersect(Ai,By,e,6); return; end The three key steps in the algorithm are marked 
(1), (2) and (3). Step (3) is the subdivision step. Step (2) "bottoms out" the recursion when both surfaces 
are plane within e. If such is the case, each surface can be approximated as a pair of triangles and 
the intersection of the triangles can be quickly computed. Step (1) rejects sub-problems involving pairs 
of surfaces that do not intersect. It remains for us to provide the details of these steps. This will 
be a line segment if the triangles are not co-planar and a polygon if the triangles are co-planar. 4.1 
Step (3), Subdivision The typical recursive subdivision algorithm in the literature uses the method 
of knot-insertion to subdivide a B-spline surface, [Lane and Risenfeld, 1981]. Essentially, knot-insertion 
is the process of introducing new knots and control points, while preserving the geometry of the surface. 
By introducing appropriately many knots and control points, a B-spline surface can be partitioned into 
say, four patches, where each of the new patches is a completely defined B-spline surface, defined without 
reference to the original surface. While the method of knot-insertion is elegant and can be used over 
a wide class of B- spline surfaces, it is computationally expensive. On the other hand, we choose to 
 subdivide a B-spline surface by simply decomposing it into four parts, where each part is defined by 
its extent on the parametric range. Given a patch Sl[ut,u2] x [vl,v2] we split this patch into four 
sub-patches, Sl[u,,u=] x [v,,v=], S/[u.,u2] x [v,,v.], S/[ut,u=] x [v.,v2], Sl[u,,,,u2] x [v=,v2], where 
~ = l/2(u, + u2) and v= = l/2(v, + %). This is a simple operation, as it only involves computing u,, 
and v,,. 4.2 Step (2), Planar Approximation Given a patch a = S([ul,u2] x [vl,v2]), we wish to check 
if the patch is planar within 6, i.e., does there exist a planar surface P such that P ~,A? 161 The 
following claim is an adaptation of Theorem 4 of [Filip et al. 1986]. Claim 1: Given A = S([ul,u2] × 
[vl,v2]), let PA be a secant surface of A. Then, PA ~~A)A where,    ) suz 18, = and f = ]l~l[Au2 
+ 2l[~ll~uAv + II liar=, ~U = U 2 -Ul, AV ----V 2 -V 1. Proof: A straight forward application of the 
mean-value theorem. See [Filip et el. 1986]. [] Thus, if we can estimate upper bounds on the magnitude 
of the second derivatives of the surfaces involved, we can estimate ,~ in Claim 1. Then, step (2) of 
the skeletal algorithm can be implemented as follows. Step (2): Let Pit be a secant surface of A. Let 
Pe be a secant surface of B. Estimate ~A) and ~B) using (1). if ~A) < and ~B) < e then report the intersection 
of PA and PB. else A and B are not plane within e. 4.3 Step (1), Boxing Intersection Question: Given 
a pair of surfaces A and B, do they intersect? If this question could be answered exactly and efficiently, 
our intersection algorithm would be efficient. Unfortunately, there seems to be no known efficient algorithm 
for the above question, leading us to search for efficient but approximate algorithms. It is well known 
that a B-spline is contained within the convex hull of its control points, [Schumaker 1980; Bartels et 
al. 1987]. Hence, a necessary condition for the intersection of a pair of B-spline surfaces is the intersection 
of the convex hulls of their control points. Thus, if A and B were both B-spline surfaces, this could 
be used in an approximate algorithm for the intersection question. But then, we subdivide surfaces by 
simply limiting the parametric range, not by computing new control points. Since the size of the convex 
hull does not decrease with subdivision, the convex hull algorithm becomes an increasingly poor approximation 
for the intersection question. Given A ffi S([uz,u2] x [vx,v2]), we show how to construct a box HA with 
faces normal to the coordinate axes, such that A is contained "snugly" in B. Let Q be the set of corner 
points of A and let ~A) be as in Claim 1. Set Xme=,Ym~x and Zm~ to be the maximum X,Y and Z coordinates 
respectively of the points in Q, and X.an,Ymi, and znan be the minimum X,Y and Z coordinates. Let Pm~ 
be the point with coordinates Xr~x'tff(a),ym~+ff(a),zm~+'~(a) and Pmi, the point with coordinates Xmax-~A 
),Yrae~-'y(A ),zmax-~A ). Construct the cuboid HA with faces normal to the coordinate axes, such that 
Pm~ and Pna, are vertices of HA. We call H A the bounding box of A. It is immediate from Claim 1 that 
A is contained in HA. Furthermore, it is easy to see that if a surface A is divided into n pieces A1,A2 
..... A,,, the union of the boxes HAt converges to A in the limit, as n tends to infinity. This suggests 
the following approximate algorithm for the intersection question. Note that the algorithm answers "no" 
or "maybe". The former indicates that the input surfaces definitely do not intersect. The latter indicates 
that the input surfaces may intersect, although the algorithm is not certain. Step 1: Construct HA and 
liB. if HA and Hs do not intersect then A and B do not intersect. else A and B may intersect. This almost 
completes our description of the algorithm. It remains to discuss the estimation of upper bounds on the 
second derivatives of a spline surface. 4.4 Estimating Bounds on the Derivatives Computing the maximum 
absolute value of the second derivative of a B-spline is clearly a non-linear optimization problem that 
will be computationally expensive. In the following, we suggest a simple and inexpensive means of placing 
upper bounds on the derivative of a spline. The estimates are correspondingly coarse. It is well known-that 
the derivative of a B-spline is itself a B-spline of one lower order, Theorem 1: [Schumaker 1980l Let 
C be the B-spline curve of order k on the control points {Pl,P2 .... ,p.}. Then, ~-is the B-spline curve 
of order k-1 on the n - 1 control points ((p2-T1),(-f3-T2) ..... Proof: See Theorem 5.9 of [Schumaker 
1980]. [] Corollary 1: Let S be the tensor product B-spline surface of order k x l on the m x n control 
points ~1,1,~1,z .... ,~,~,,. Then, ~-is the B-spline surface of order (k-1) x l on the (k-1) x l control 
points (p2,z-Tz,x),(~3,2-T2,=) .... ,(Pm,.-P~-z,.). Proof: Follows from the definition of the tensor 
product surface and Theorem . See page 487 of [Schumaker 1980]. [] By applying Corollary 1 repeatedly, 
we have that the 2nd,3rd,..., etc. derivatives of a B-spline surface are B-spline surfaces as well. Claim 
2: Let S be a tensor product B-spline surface and let Q1,Q2 and Qa be the set of control points of au 
2 ' Ouv and ~-respectively. Then s~p II~ll -< max{l~l I peQx), SUsPU~vll <- max{l~U [ peQ2}, SsUPII~ll 
-< max{l~l I pEQa}. tgas" ~ and ~ are Proof: Since ~u ~ , Our ~-'-~" splines, they are contained in 
the convex hull of their control points. Thus the claim is immediate. [] Using Claim 2, we can obtain 
estimate upper bounds on the second derivatives of a spline surface. The measure of tightness in such 
an estimate is dealt with in the following theorem. Theorem 2:lde Boor] For a B-spline C of order k, 
with control points Pl,Pa " " , 1 s~p II~ll-> "~- maxtllP, ll}. Proof: See [de Boor 1978], page 155. 
[] Corollary 2: Let S be the tensor product B-spline surface of order k x l on a set of control points 
Q. Then, 1 SUsPI~l >- "~ max(l~l [ p e Q ) Proof: Follows from Theorem 2 and the definition of the tensor 
product spline. D Thus, we have the following algorithm for computing an upper bound on the magnitude 
of the second derivative of a B-spline surface. input: The m x n control points {p~,y} of a B-spline 
surface S.. begin compute the second differences Q1 ffi {~+*,j-2~,~'+~-1,y} compute D1 = max{ll~lllPeQ1). 
compute the second differences Q2 = {~,+~. ~+~ +~,. ~-~,. ~+~-~+~, y). compute D~ = max{l~Illp eQ2). 
compute the second differences Q~ = {~,,~+~-2~,.~+~,.y.I). compute Dz = max{l~llpeQ3}. output D1,D2,D3 
as upper bounds for ~u 2' BuSy' 8v 2" end  5..Analysis Let us assume that we are given two B-spline 
surfaces A and B of order k × k, on meshes of n × n control points each. By definition, the parameters 
u and v range from 0 to n and therefore we have a = a/[O.n] x [0,.], B ffi B/[O,n] x [0,hi. Let ~0 = 
max{#A,pB} where Oa = s~p II II + 211~'11 + II I .   #B ffi s p[ll ll + 211 - 11 + II aj l I. Let 
D be the estimate of the algorithm for #. 5.1 Output Size In this section we obtain a worst-ease lower 
bound on the size of the piecewise-linear approximation to a pair of B-spline surfaces. Let S be the 
surface in R 3 given by x(u) ffi u, y(u) ffi u k, z ffi v. Let A be the B-spline surface of order (k 
+l ) × (k +l ), on an array of n ×n control points uniformly spaced in the X and Z directions, such that 
A ffi S/[k,n] × [k,n]. Let B be a B-spline representation for the X-Y plane over the region (k,n)× (k,n). 
The intersection of A and B is a portion of the curve C in R 3, where C(u) is the curve given by x(u) 
ffi u, y(u) ffi u k, z = O. In particular the intersection of A and B is C/[k,n]. Now, recall that D 
is the estimate of the maximum second derivative of A and B, with respect to the parameters u and v. 
We can pick n sufficiently large such that this maximum occurs on A rather than on B. Let Cx be the curve 
segment C/[n/2,n]. Since x = u on A, we can show that in/ ila2Yll > P c, ax 2 -2 k'*" Thus, any piecewise 
linear approximat~9~n to Cx would have fl n segments. It follows that any piecewise linear approximation 
to C would have as many segments as well. 5.2 Depth of Recursion We estimate an upper bound on the depth 
of the recursion in intersect(). Let D be the estimate used by the algorithm for #. Notice that at depth 
i, A/[ux,uz] x [Vl,Vz] is split into four sub-patches, Al[ux,u,,] x [vx,v,,], hl[u,,,u2] x [vl,v,,], 
A/[Ul,Um] x [v,,,v2], A/[u=,u2] x [v,,,v2], where u= = l/2(ux + u2) and v,, = l/2(v, + vz). Thus, at 
each level of the recursion both parametric intervals are halved in size. Let Au~ denote the parametric 
interval at depth i. Then we have, Aug = I/2Aui_x. Since we know that AUo = n, we have Aui = 2"in. The 
recursion in intersect() "bottoms" when both input surfaces are planar within e. As discussed in Section 
3.2, this is when ~A) < e and ~B) < e. But, 3(A) _< DAu~ < 2"21Dn 2. and the same holds for ./(B). Setting 
recursion is at most -:-log /--I 2"~iDn 2 <e and solving for i gives us i< 1. frijol~log/--~'-- I. Thus 
the depth of the k -) 1, fn2O] . 2 [ ¢ J 5.3 Branching Notice that intersect() subdivides A and B into 
four pieces each, and then recursively calls itself on the sixteen pairs obtained by pairwise combination 
of these pieces. Hence, the worst-case branching factor of the algorithm is 16. Since the depth of the 
recursion as 1, fn2D1 estimated above is ~log|--~---[, the total k/ number of calls is at most 161/21°~--;--= 
.9___ This is polynomial in the worst-case output size that we established earlier. Actually, intersect() 
does much better on average, in that the expected number of calls is O(n(D/,)l/2], linear in the worst- 
case output size. To show this, we estimate the expectation of the branching factor in the recursion. 
Let A(u,v) and B(s,t) be two spline surfaces. Consider the patches Ao = h/[u~,u2] x [vl,v2], Bo ffi B/[sx,s2] 
x [tx,t~]. Let A~ ffi A/[ul,um] x [vl,v.d, A2 ffi A/[u.,,u2] x [v~,v.,], Aa ffi A/[ux,Um] x [v.,,v2], 
 A 4 ---- A/[/dnt,U2] X [Vm, V2] , where u.~= 1/2(ul + u2), vm = l/2(v, + vu). Similarly, let B, = B/[s,,s.d 
x [ti,t.,], B2 = B/[s.,,s2] x [tx,t.], Bo = B/[st,s,.] x [tm,tz], B. = B/[s.,,s2] x [t.,,t2], where Sm= 
1/2(sl + s2), tm= 1/2(tl + t2). Here is a broad overview of our approach: Assume that A o and Bo are 
in random relative position. We estimate the expected number of pairs of HA, and HBj that intersect, 
i, j e { 1,2,3,4}, conditional to Hao and HBo intersecting. Now for the details: Let S~ and Sz be any 
two surfaces. Fix S: in space. Consider all rigid translations of $2. Let I'(Sx,S2) denote the set of 
all positions of $2 for which Hs~ and Hs~ intersect. Also, let A(St,w) denote the length of Hs~ along 
the w direction, for w = x,y,z. Using the above notation, suppose that the position of Bo (relative to 
Ao) is uniformly distributed over P(Ao,Bo). The density of this distribution is volume of F(Ao,Bo)  
II A(Ao,w)+)<Bo, w)" Now, the probability that HA, and HBj intersect is the product of the volume of 
I'(A~,Bs) and the density of the distribution. That is, volume of IF(A~,Bj) P{Ha'CIHs'} ffi volume of 
F(Ao,Bo)  II A(A~,w)+A(Bi, w) 1-[ A(Ao,w)+A(Bo, w) tn.....z~ yt z a(ai, w)+A(B~, w) "11"1" .~ty,. ~(A 
o, w)+~(Bo, w)" Now, the expected number of pairs HA, and Hnj that intersect is given by 4 4 E P{Ha, 
f'WB,} = i=15=1 4 4 a(A.w)+a(Bj, w) ,~_~.~.,. ~(ao, W )+~(Bo, W ) " In Claim 3 below, we show that for 
i,j~{ 1,2,3,4}, ~(a~, w)+a(B~., w) < 1/2.  ~(Ao,w)+.X(Bo w) Therefore we have 4 4 4 4 ~P(HA, AHsj} 
< ~ ~ ]F I 1/2 < 2. i=I~=1 i=l~=l~=z, y, z Notice that if the relative positions of A o and Bo is uniform 
over F(Ao,Bo), then the relative positions of Ai and By is uniform over I~Ai,By ) . Thus the above analysis 
holds at each recursive call of intersect(), and the expected branching factor of intersect() is 2. Since 
the depth of the recursion as estimated earlier is 1/2log~l, the expected number of k) calls of intersect 
0 is at most .,o [ 21121~""T " = L = n(D/e)ll2. Each call of intersect 0 involves evaluating four points 
of A and B, and each such evaluation costs O(k~). Thus, the expected run time of the algorithm is Ofnk2(D/e)ll2]. 
By Theorem 2, _< D _< 2 2(h'~)~. Thus we have proved the following theorem. Theorem 3: Let A and B be 
two B-spline surfaces of order k x k on n x n control points each. If the relative position of A and 
B is uniformly distributed over ~A,B), then the expected run-time of intersect() is It remains for us 
to give Claim 3. Claim 3: For i, jE{1,2,3,4}, ~al~, w)+,X(Bi, w) <_ 1/2.  >,(A o,W)+~Bo, w) Proof: 
Omitted in this extended abstract. [3 Notice that the expectation in Theorem 3 is taken over I'(A,B). 
It might be desirable to take the expectation over some other set of positions. The following Corollary 
deals with this. Let a = max{aA,as}, where ~A = max sup I1~-II, snapII , t aB = max a~ iI_~_ll. I1-~11, 
 Corollary 3: Let A and B be two B-spline surfaces of order k x k on n x n control points, such that 
A and B are each contained within cubes of unit edge. If the relative position of A and B is uniformly 
distributed over some region of volume V, then the expected run=time of intersect() over this region 
is Proof: Omitted in this extended abstract. [] The following theorem bounds the storage required by 
the algorithm. Theorem 4: The storage required by  o ,s Proof: The depth of recursion is J f ,~ k k~ 
call of intersect() uses up a fixed amount of storage. Hence, the claim follows immediately. [] Finally, 
we consider the case when A and B are t=fold tensor=product splines in R a, on n t control points each 
and of order k t. In this setting, the algorithm would compute the intersection of a pair of piecewise 
hyper=planar approximations to the surfaces. Let ui, i=1,2 ..... t be the t parameters of the spline. 
For a generic spline S, let and SUsP ~11 + ~11~,711 + II , [i--1 L"*i i=t j=l u-i~-y .= Let o~ = max{aA,aB} 
and ~ = max{/~A,/~n}. Theorem 5: Let A and B be two t-fold tensor-product B-splines in R ~t of order 
k t with n t control points each. If the relative position of A and B is uniformly distributed over some 
region of volume V, then the expected run time of the algorithm over this region is 2 t where ~ is the 
expected number of recursive calls of the algorithm, and T(t,d) is the cost of intersecting a pair of 
t-simplices in R '~. 6. Acknowledgements Many thanks to the group at HP Labs for their support, to F. 
Kitson for the encouragement and to J. Yen for the discussions. 7. References Bajaj, C.L., Hoffman, 
C.M., Lynch, R.E., Hopcroft, J.E., 1988. Tracing surface intersections. Computer Aided Geometric Design, 
5 pp285-307. Barnhill, R.E., Farin, G., Jordan, M., Piper, B.R., 1987. Surface/surface intersection. 
Computer Aided Geometric Design, 4, pp3-16. Bartels, R.H., Beatty, J.C., Barsky, B.A., 1987. An introduction 
to splines for use in computer graphics and geometric modeling. Morgan Kaufmann, Los Altos, CA. de Boor, 
C., 1978. A practical guide to splines. Springer-Verlag, New York. Cohen, E., Lyche, T., Riesenfeld, 
R., 1980. Discrete B-splines and subdivision techniques in computer-aided geometric design and computer 
graphics. Computer Graphics and Image Processing, 14, No 2, pp87-110. Dokken, T., 1985. Finding intersections 
of B-spline represented geometric entities using recursive subdivision techniques. Computer Aided Geometric 
Design, 2, pp189-195. Filip, D., Magedson, R., Markot, R., 1986. Surface algorithms using bounds on derivatives. 
Computer Aided Geometric Design, 3 pp295-311. Katz, S., and Sederberg, T.W., Genus of the intersection 
curve of two rational surface patches. Computer Aided Geometric Design, 5 pp253-258. Lane, J.M., and 
Riesenfeld, R., 1981. Bounds on a polynomial. BIT 21, pp112- 117. Sehumaker, L., 1981. Spline functions, 
basic theory. Wiley-Interseience, New York. Wang, G., 1984. The subdivision method of finding the intersection 
between two Bezier curves or surfaces. Zhejiang University Journal, Special Issue on Computational Geometry. 
  
			