
 Dodevelopers searchfor source code examples using multiple facts? Reid Holmes Departmentof Computer 
Science&#38;Engineering University ofWashington Seattle,WA, USA rtholmes@cs.washington.edu Abstract 
In this paper we examine the search behaviours of devel­opers using the Strathcona source code example 
recommen­dation system over the period of three years. In particular, we investigate the number of query 
facts software engineers included in their queries as they searched for source code examples. We found 
that in practice developers predom­inantly searched with multiple search facts and tended to constrain 
their queries by iteratively adding more facts as needed. Our experience with this data suggest that 
exam­ple search tools should both support searching with multi­ple facts as well and facilitate the construction 
of multi-fact queries. 1. Introduction Several research tools have been created to help devel­opers locate 
relevant source codeexamples[7,4,1,3,6,5]. One dimension in which these systems vary (see Sec­tion 2 
for additional detail) is whether they allow a sin­gle search fact (such as getStatusLine())or multi­ple 
searchfacts. Although the precision of searches can be improvedby providing multiple searchfacts, the 
question of whether developers know enough information to create multiple searchfacts, and whether they 
are willing to enter them, remains open. By analyzing log .les from hundreds of query sessions by nearly 
one hundred users of Strath­cona, a system that allows developers to query for source codeexamples using 
multiple searchfacts, we present pre­liminary evidence that developers have the knowledge to formulate 
queries with several searchfacts in their search for source code examples and do so in practice. Strathcona 
is a client server example recommendation system that enables developers to quickly select a block of 
code from which a query is automatically generated. The server then returns source code examples that 
best match the code the developer has selected [1, 2]. We are able to analyze Strathcona usage patterns 
as the server component saves to disk every query made by developers as well as their corresponding responses. 
The primary contribution of this paper is evidence that developers searching for source codeexamples 
usually pro­vide multiple search facts in practice. We have observed that92%of queries containtwoor morefacts 
while36%of queries contain .ve or morefacts. Investigating individual query sessions we found that developers 
queried on aver­age 2.5 times per query session and often augmented their previous queries with newfacts 
learned from prior results. Background detailson related search approachesisgiven in Section 2. Section 
3 provides a brief overview of the Strathcona tool. The data we analyzed and some quantita­tive results 
are presented in Section 4. The paper ends with some suggestions for future code search tools (Section 
5) and conclusion (Section 6). 2. RelatedWork Several research tools have been developed that can help 
developers locate relevant source code examples. Code-Broker is an adaptive system that automatically 
queries an example repository using the comment and method signa­ture of the method the developer s cursor 
is currently in [7]. Prospector locates examples given a start and end types; the tool then computes 
possible paths that would enable a developer to get a reference to the end type given their starting 
type by statically mining example source code [3]; PARSEWeb [5] uses the same input and locates exam­ples 
using existing code search engines. CodeWeb [4] and MAPO [6] take a simple input and locate examples 
using generalized association rules. Eachof these systems constrainsthe numberoffactsthat can be queried 
on by the developer; typically at most two queryfacts can be speci.ed although often one of these is 
reserved. CodeBroker uses onefact for the method signa­ture and the other for the method comment; these 
cannot be changed by the developer except by moving the cursor to another method. Prospector andPARSEWeb 
specify that onefactis relatedtotheoriginofthequeryandtheotheras SUITE 09, May 16, 2009, Vancouver, 
Canada the destination. Both CodeWeb and MAPO generate rele­vantexamples froma single queryfact. In contrast 
to these approaches, Strathcona allows the developer to select any contiguous block of code; all of the 
statically derivablefacts that canbeextracted from this block are automatically collected sent to the 
server in the query. The developer can adapt the query by modifying their selection,but cannot modify 
the the query otherwise. 3. Strathcona The Strathcona example recommendation system is an Eclipse plug-in 
that helps developers search for source code examples. Strathcona is unique in its mechanism for auto­matically 
constructing queries for the developer based on theirdevelopment context. Theextractedfacts are senttoa 
remote server that contains a repository of source code; us­ing a series of heuristics [2] the server 
identi.es examples that best match the developer s query. Strathcona returns at most 10 matches, regardless 
of the number of examples that are located. The developer can view an abstract representation of each 
example using a UML-like view, requesting to see the source code only if the example seems relevant to 
their task. As Strathcona queries are constructed automatically, we envisioned that developers using 
the tool would query on many structural facts. While we have shown that the heuristics used by the server 
to match the examples are most effective when two ormorefactsare includedinthequery[2],dueto limitedin­formation 
at the time we were unable to con.rm that this is howdeveloperswould use the tool; this paper demonstrates 
that our assumption of large queries was valid. 4. Quantitative .ndings By analyzing all of the saved 
interactions between the clientandthe Strathconaserver,wewereabletogaininsight into how the developer 
used Strathcona during their query session. We analyzed three main types of data recorded by the Strathcona 
server. Context queries. Context queries documents were sent from the client to the server whenever a 
developer selected some fragment of code and queried Strathcona. These doc­uments containalistofallofthe 
structuralfacts comprising the query. Thesefacts identify statically derivable method calls, .eld references, 
inheritance relationships, and type usages within the block of code the developer has selected. Returned 
examples. Strathcona answers each context query with a set of structurally-relevant examples. Each example 
includes the same structural facts present in the context query so the Strathcona client canbuilda rationale 
explaining whythe example is relevant for the developer s queryandtobuildtheUML representationoftheexample. 
Source requests. If the developer deems an example in­teresting, they can request its source code; this 
document simply provides an identi.er for the example the developer wishes to see the source code for. 
The server records a timestamp for each of these docu­ments, as well as a unique identi.er for each host 
making the query. Unfortunately,we cannot tell from the server logs ifthedeveloper foundanexample usefulornot;theonlyin­dicators 
we can use are whether the developer asked for the source code for an example. In this case, we infer 
that the developer felt theexample couldbe relevantgiven its UML representationand assumetheexamplewas 
helpfulin some way.Wefacted sessions as successful if theyended with a developer making a query and looking 
at the source code of at least one example (in contrast to ending with a query itself). 4.1. Session 
overview Over the thirty-.ve month period of our Strathcona logs, 239 search sessions were initiated 
by 94 software develop­ers (from at least5countries) encompassing 783 queries.1 Figure 1 provides an 
overview of the number of context query and source requests made in each session. Devel­opersaveraged 
2.4 context queries per session, although the median was only 1. Theyalso requested 4.3 source exam­ples 
on average, with a median of 2. 49% of sessions in­volved more than one context query, while 54% of sessions 
involved multiple source code requests. Figure2providesa breakdownof the 3652 queryfacts providedbydevelopers. 
 Figure 1. Number of context queries and source requests per Strathcona session. 1Before analyzing anyof 
the data, we removed all of the sessions asso­ciated with our own usage of the Strathcona tool.  (a) 
Numberoffactsprovided consideringall Strathcona queries. (b) Numberoffactsprovided consideringonlythe 
.nal queryina successful Strathcona session. Figure3. Eachgraph depictsnumberof structural facts includedina 
query(x axis)bythe frequency queries of eachsize occurred (y axis). The top set of graphs consider all 
queries while the bottom pair consider onlythe .nal queryof eachsession.  Figure 2. Proportion of queryfacts. 
 4.2. Queried facts For this analysis, we combined all of the different kinds of searchfacts and treated 
them equivalently. Figure3pro­vides a graphical representation of the queries; the x-axis represents 
the number of searchfacts while the y-axis rep­resents the numberof queries for each quantityoffacts. 
Strathcona considers a query fact representing a refer­ence to Status.OK as two facts, the reference 
to the Status.OK .eld and a use of the Status class. To ac­countforthis,weprovideboththetotal countofthefactsas 
Strathcona interprets them as well asaversion that does not duplicate any counts; we include both as 
different search approaches can chose to use one representation or the other. Figure 3(a) shows the number 
of facts for all of the con­text queries while Figure3(b)showsthe numberoffactsfor only the .nal query 
of successful sessions. In Figure 3(a) we can see that that while the median num­ber of facts was two, 
developers provided three or more structural facts for 67% of their queries. For their .nal query (Figure 
3(b)) the median number of facts has in­creased to three, with developers providing three or more structural 
facts for 74% of their queries. This clearly demonstrates that developers using Strathcona are formu­lating 
queries with multiple searchfacts and that they are addingfacts to these queries as theyprogressthrough 
their search session. While examining several sessions qualitatively, we found that while iterating on 
their query sessions developers were addingnewfactsto subsequent queries basedon infor­mation presentinexample 
sourcecodetheyviewedthatwas returned during prior queries. 5. Discussion The internalvalidityofthisstudyis 
hamperedbythefact that Strathcona makes including additional searchfactsina query trivial. While this 
is true, the interesting .nding in this paper is that the developers knew thefacts to include in the 
.rst place. The external validity of our .ndings is limited from our lack of knowledge about the 94 develop­ers 
who used Strathcona, if theywere actually successful in .nding the information they were looking for, 
and the ob­vious limitation of only having 239 search sessions to draw data from. A key assumption of 
the Strathcona system was that developers would search for source code examples using multiple search 
facts; the more facts included in a query, the more effective Strathcona s heuristics tended to be [2]. 
This paper demonstrates that the assumption upon which Strathcona was created was valid and suggests 
that evalua­tions comparing Strathcona to other example recommenda­tion systems should conduct their 
comparisons using sev­eral search facts in order to achieve a fair comparison of relative effectiveness. 
Our analysis of the Strathcona usage data have given us several insights into how developers search for 
source code examples; these observations should be considered by re­searchers and practitioners creating 
source code search tools and services. Developers search with multiple facts. Developers are able to 
elucidate multiple search facts when searching for context-relevant source code examples. This suggests 
that code search approaches should support and encourage searching using multiple terms; this can both 
help the de­veloper to fullyexpress their current knowledge and to con­strainthe resultspaceto identifythemostrelevantexamples 
possible. Query sessions are iterative. Developers modify their queriesoverthe courseofaquery sessionto 
specializethem astheyidentifynewfactstheydeemrelevanttotheirinvesti­gation; search tools should encourage 
iterative query re.ne­ment by including facilities that encourage developers to modify their queries 
and view their results in a lightweight manner. Tool designs that minimize the effort required to reformulate 
and specialize queries and reduce the effort re­quiredforthedevelopertoglean usefulfactsfrom returned 
examples can help support iterative investigation. Queries are composed of heterogeneous facts. While 
method calls were the most common kind of query facts, other types offacts were often included in queries. 
Facts relating to speci.c types made up 47% of queries (15% of these type facts related to parent classes 
and interfaces). Code search systems should enable developers to supply any kind of fact they are able 
to discern rather than forc­ing developers to only supply a single constrained kind of fact. 6. Conclusion 
Byanalyzing35 monthsworth queries senttothe Strath­cona example recommendation system, we have found 
that developers predominantly queried Strathcona for source codeexamples using three or more searchfacts. 
We also found that as developers iterate on their searches, theytend to constrain their queries by adding 
more facts, as op­posedto widening themby removingfacts. These .ndings demonstrate that developers query 
for source code exam­ples using multiple search facts in practice; this suggests that example recommendation 
tools should both allow de­velopersto include multiplefactsandmakeiteasyforthem to do so, enabling them 
to fully express the knowledge they have about the examples theyare looking for. Acknowledgements I would 
like to thank David Notkin and Rylan Cottrell for their insight and assistance with this paper as well 
as re­viewers for their comments and suggestions. This work has been fundedin part througha NSERC Postdoctoral 
Fellow­ship. References [1] R. Holmes and G. C. Murphy. Using structural context to rec­ommend source 
code examples. In Proceedings of the Inter­national Conference on Software Engineering (ICSE), pages 
117 125, 2005. [2] R. Holmes, R. J.Walker, and G. C. Murphy. Approximate structural context matching: 
An approach to recommend rel­evantexamples. IEEE Transactions on Software Engineering, 32(12):952 970, 
2006. [3] D. Mandelin, L. Xu, R. Bod´ik, and D. Kimelman. Jungloid mining: helping to navigate the api 
jungle. In Proceedings of the Conference on Programming Language Design and Im­plementation (PLDI), pages 
48 61, 2005. [4] A. Michail. Data mining library reuse patterns using gener­alized association rules. 
In Proceedings of the International Conference on Software Engineering (ICSE), pages 167 176, 2000. [5] 
S. Thummalapenta andT. Xie.PARSEWeb:Aprogrammer assistant for reusing open source code on the web. In 
Proceed­ings of the International Conference on Automated Software Engineering (ASE), pages 204 213, 
2007. [6] T. Xie and J. Pei. MAPO: Mining API usages from open source repositories. In Proceedings of 
the International Work­shop on Mining Software Repositories (MSR), pages 54 57, 2006. [7]Y.Ye,G. Fischer,andB.Reeves. 
Integratingactive informa­tion delivery and reuse repository systems. SIGSOFT Soft­ware Engineering Notes, 
25(6):60 68, 2000.  
			