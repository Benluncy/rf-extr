
 G. W. Evans, M. Mollaghasemi, E.C. Russell, W.E. Biles (eds.) DATABASES: DESIGNING AND DEVELOPING INTEGRATED 
SIMULATION MODELING ENVIRONMENTS Martha A. Centeno, Ph.D. Charles R. Standridge, Ph.D. Department of 
Industrial Engineering FAMU/FSU College of Engineering Florida A&#38;M University / Florida State University 
P.O. Box 2175 Tallahassee, Florida 32316 ABSTRACT Database management systems (DBMS) provide robust 
information storag,e, retrieval, and indexing functions needed by a simulation modeling environment (SME). 
Such capabilities standardize information handling requirements stipulated by the principles of software 
engineering. Furthermore, database management technology helps to realize the concept of language neul 
fality in SMES. Neutrality with respect to the simula Ion language has been long sought by simulation 
researchers because the ideal SME tool should allow inputting the description of systems from which models 
can be defined. Furthermore, the simulation modeling tool should possess an interface thai lmites the 
various analysis and definition tools netded for the simulation modeling process. INTRODUCTli~N Simulation 
modeling :equires large amounts of information (about the s.:stem being modeled) and broad technical 
knowledge to transform it into meaningful parameters of the system. It also generates large amounts of 
information (about the performance of the system under study) once the outputs have been analyzed and 
interpreted. Consequently, it has aIwaJs been desirable to provide adequate data and knowledge management 
support in a SME. A database management system (DBMS) provides for the storage :md retrieval of information 
in an orderly and cohe ent fashion, regardless of volume and kind of djlta, with user instructions expressed 
in a queq language such as SQL (Structured Query Language). Thus, a DBMS embodies concepts and capabilities 
which enable 526 SME designers to design flexible and cohesive components including the following: a) 
A17 inter@ce which facilitates the interaction between users an the information entry component of the 
SME. It should be sensitive to the role of the user in the simulation modeling process (SMP), and it 
should enable integration of the various tools needed in the SNIP. b) AII information entry and editing 
component that combines interactive graphical and textual approaches to populating the SME database with 
the description of systems, models scripts, and so forth. Combining icons and text seems to be appropriate 
for a SME based on the findings of Kacmar (1989), Egido and Patterson (1988), and Benbasat and Todd (1993). 
c) An Information processing component that converts iltiormation previously stored in the database into 
appropriate inputs for models, stores simulation results for future processing, and converts simulation 
results into meaningful information. d) A nlodel extructlon component which enables the retrieval of 
systems descriptions and converts it into specific models, or it retrieves models and experimental controls, 
and transforms them into the format needed by the slmuiatlon engine. e) A simulation engine which executes 
the simulation model. The simulation engine is either specifically developed for the SME or is an existing 
simulation language incorporated into the sm. For SME development, emphasis must be given 1) to the fact 
that components of a SME, except for the model and experimental control editors and model extraction, 
do not need any knowledge of the operating characteristics of the simulation engine, 2) each of the components 
( (a) to (e)) of the SME may be composed of one or more sub-components to make the environment modular. 
flexible and extensible and 3) to the fact that the DBMS may have not been designed for simulation: thus. 
close attention should be paid to its intemcti~ e response time, its programmatic capabilities, and Its 
capability to be submissive. In this paper, we ctiscuss the ways in which database technology has aided 
in designing and implementing commercial and research prototype SME. especially with regards to the components 
listed above. Section 2 describes the major characteristics of an integrated SME. Section 3 describes 
the roles databases may play in a SME. 2 INTEGRATED SRIE Simulation modeling cmironments M a concept 
that has matured over the last decade, During this time. users and researchers of sinmlation offered 
detinitlons and guidelines about lvhat a cmttprehens{ve simulation tool should be All these bnlidelines 
and definitions have comerged to ~vhat II e no~vadays refer to as a SME. It is ~vorth noting that this 
consensus has been greatly influence by adfances in artificial intelligence and database technologies. 
An integrated ~imulation Modeling Environment (SME) is a software tool that provides computer support 
for the ~arious actnwies in the simulation modeling process (SMP ), ,\ ,lich has been described by many 
as a process that includes problem formulation. model abstraction. data c:Jllection. model building. 
model verification and v:( idation, analysis of outputs. documentation. and implementation (Banks and 
Carson (1990), Law and Kelton (1991). Pegden. Shannon and Sadowski (1990) ). The SME. therefore, needs 
to Integro(e a set of tools designed to sLIpport a spccitic acti~i[} in the SNIP. Among these tools are 
statistical tools ((c prepare inputs. to design experiments. and to anal} ze outputs), model building 
tools (expert systems and smndation languages). documentation and rel,ort wmting tools (~vord processors). 
and kno~vicdge based s~stenls (to assist in the less structured ac[]vlties such as problem dclinitlon 
and model abstr:];tion), Integration of these tools must be both vertical as \vcll as horizontal. Vertical 
integration makes these tools accessible to the user through a comntc 1 interface ~vhde horizontal integration 
enables colll]ll,llllcatio]] bettveen the tools. so as to be consistent Ni[i the iterati~e nature of 
the SMP. Real \vorld simulation pt ojects involve t~vo or more persons ~vorking as a team. Each member 
of the team may have different skills to contribute to the entire project; therefore, a SME must adequately 
support each member s technical needs as well as his/her tool interaction needs. The techmcal needs are 
supported by the various tools integrated in the SME, whereas the tool interaction needs are suppotied 
by effective user interfaces that shelter team members from detailed operational characteristics of the 
tools. An effective user interface encourages its users to focus their energies on the substance of their 
work rather that on extraneous requirements of the tool being used. Furthermore, to the extent a user 
interface successfully models the system s and user s domain, the process of interacting with the computer 
begins to assume the character of manipulating domain objects directly. This leads the user to think 
about the problcm being sol~cd rather than the Jvay it is being sohcd. From the conceptual point of ~ie~v, 
a SME must detach the s/m///aonon l~tode/lllg activity from the actual simulation language or simulation 
executor, Lqq[ioge independe)lce or lm7glloge 17ellts(711(\ requires that the simulation language utdlzed 
in the SME be j~(.$t o}?e of many components needed to conduct sound and valid simulation projects, Rca] 
izing /a17gi/age }?ei~tra/1~~ ~vould enhance the modeling aspect of [he SMP: thus. making simulation 
more accessible to Iarious t~ pes of users, Ho\~ever. as poln(cd out b! Balci ( 1986). it tvas not until 
ven rcccn[l} that simulation 1001dc~elopers i} cre forced to build thcm around a spccilic simulation 
language. Simulation projects arc initiated to simulate a systcm for the purpose of understanding its 
beha~ior (if the systcm already exists) or of establishing the impacts of it (if the system is at the 
design stage), A .~l .rte}~),for the purposes of designing a SME, should therefore be \le\vcd as a group 
of objects that are linked together by a set of relationships. i.e. a system must be trca[cd as an object 
composed of other smaller objects This ~le~~ of .~tx(ems nmmmizes d:lta entry rcdundanc! b! ollo~ving 
reusability of prc~iousl! described SJstcm components. and It enables consistent classitlcatlon and labehnp, 
of each node in the hicrarch} representing the attributes of the Systcnl, In summan. implementing an 
integrated SME ~~ould realize at least the follo~wng benctlts: I Reusability of components pre~iously 
described since they can be used for more than onc model ~ritlloul the need of re-entermg their basic 
information, 2. Realization of language indcpcndcnce as systems (and models about thcm) can be described 
in terms of objects which are not necessarily linked directly to the underlying execution mechanism. 
3. Simulation of a sys@IJ at various levels of aggregation. Since a system is defined as a set of hierarchical 
connected objects. it can be modeled as a black box (at the higher level of abstraction), or it can be 
opened up to simulate it at an expanded level of detail. -1. Support for \ arious types of users as it 
is needed in simulation studies. 5. Support for the various phases in the SMP. 6. Focus on the modeling 
aspects of the SMP as the model builder and model user are relieved from ha~ing to know 10V le~el details 
about the simulation language and other tools in the SME.  3 THE ROLE OF DATABASES IN A SME Over the 
years. database teclmolog} has evolved to a point in Ivhich conmcrcl$il DBMS (relational models in particular) 
can be either the masfer (actitc) component of a softlwwe environment. or a .wibordinatc (passive) component 
of it. For a SME. a DBMS must be mostly passwe. i.e. it should submit itself to the control of other 
soft~vare tools (such as high le~el programming languages), so as to allo~v simulation specific packages 
to retrieve and store data frontiinto databases. However. the DBMS may be ac~we for typical data management 
activities. so as to exploit all of its potential As Jvith most evolving technologies. the role of a 
DBMS Ivhcn used for simulation purposes has changed over the years, Hlree roles have been given to a 
DBMS in this con[cxt: 1) as a progrmtl)tllng /aI?guage to develop interfaces as 11ell as simulation functions 
(Hmstev role). 2) as a pmfmr that communicates Ivith other tools in batch via the operating systcm. and 
3) as a submissive partner that communicates directly ~vith other tools via an embedded query language 
During the early 198(! s. researchers were forced to treat the DBMS as the }/,aster because these DBMS 
~verc closed. isolated packages that allo~vcd no foreign tools to penetrate their databases These packages 
often came equipped ~vidl a Ii mited progmmmi ng hlnguage that couId do smile l~l{))]ber crllm hlllg 
on user inputs or on the database contents. ho~t clcr. these languages ~vere in general interpreted languages 
nll ich made them ven s!mv to process the massive quantities of data in a simulation nm. Enhancements 
to DBMS and to operating systems rnadc communication among heterogeneous tools. \I/a text J/es, a common 
acti~ity; in this Jvay, the DBMS bcca me a partner ;vorking independently. yet informing (and recei~ing 
information from) the simulation tool. Although simulation related performance was not being impacted 
by the performance of the DBMS, the overall simulation project was still being penalized with the overhead 
of data import and export activities. Attempts to overcome this hurdle lead many researchers to develop 
their own DBMS for their SME. Ketcham (1986. 1989), for instance, developed a hierarchical DBMS that 
enables IBIS (his SME) to store nlode/ components as Mell as simulation functions. He then contlgured 
the simulation engine in such a way that it would look into a procedure ~eld, retrieve the name of the 
simulation procedure to execute, and then match it against IBIS executable library. TESS [Standridge 
(198 lb), Standridge, Vaughan, and Sale (1985)] is another example of a customized database. TESS }] 
m one of the first commercial simulation cnfironments, It ]ntegrates simulation. data management. and 
graphics capabilities, protiding a common mterfacc for SLAM II (Pritsker. 1986). SDL (Standr ldgc. 198 
la). MAP/1 (Norman. 1991). and GPSS/H (Schribcr. 1990). TESS organ izcs Simukltion outputs in a customized 
relational database similar to that used in SIMDABS (Standridge and Pritsker. 1978). Some of the schemes 
in the database are pre-dctined, vllercas others are defi ncd ~vithin the experimental control information. 
To otwcomc some of these problems, Balci and Nance (1987) and Centcno (1990) proposed SMES based on commercial 
relational DBMS. SMDE (Balci and Nancc) util]zcs INGRES as the relational DBMS. ~rhcrcas ISME (Ccntcno) 
uscs ORACLE as its RDBMS. Both INGRES and ORACLE otTer full implementation of tlLe relational data model. 
portabilit~ across multiple platforms. and SQL as the query language. SQL became the indust~ standard 
during the 1980 s. It attained a level of maturity in Tvhich semantic information may be incorporated 
through special consl ructs such as associa/iolfs. properlle.$. e)lllfje.v [Codd (1979). Gardarin and 
Valdurlcz ( 19X9). and Stonebraker. Anton and Hanson ( 1987)]. clo.wef and /71erGv4c/71e.~ [Goldberg 
and Robson ( 1983). Hammer and McLeod (1980), ICI(Z ( 1985). Smith and Smith ( 1977)]. The potcntlal 
of the rc]atlonal data model for the SME underlying database stems from the work done b! Smith and Smith 
(1977) ~rhich clearly depicts a relational model that can be enhanced to hold various types of entilies. 
inchlding hierarchy-like entities. Through the concept of aggregation (a concept in ~vhich a relationship 
bet~veen objects is in itself mother ob-icct at a higher level in the taxonomy) and of generalizatlo}7 
(a concept in which a set of similar objects are regarded as belonging to the same generic object class), 
it is possible to represent the kind of hierarchical systems that are found In simulation studies. These 
efforts have led to a better understanding of the inner workings of available database technology, and 
how it can be intert!vined wth simulation. We discuss next how databases can be used for some of the 
SME components. 3.1 Interfaces for a SME An effective user interface encourages its users to focus their 
energies on the substance of their ~vork rather that on extraneous requirements of the comptttcr softv 
are being used. Furthermore. 10 the extent that a user interface successfully models the system s and 
user s domain, the process of in[cracting ~~itll the computer begins to assume the character of manipulating 
domain objects directly. This allows the user think about the probl ml being solved rather than the way 
it is being solwd, A database may be used to store the characteristics of the interface. such a 5 display 
mode. headings. menus. menu options. and so forth: thus. supporting the SME designer to tailor the SME 
to a particular application. Relational DBMS. such as ORACLE or INGRES. offer the capability of embedding 
SQL statements in a high Ic\el programming language such as C or FORTRAN. This programmatic capability 
has enabled SME designers to design and implement llser-se~~sirn e and e.x-te)?sl>/e interfaces for 
simu 1ation model i ng, ISME (Centeno. 1990). for instance, uses an object based approach to the interface 
Screen definitions and afailablc options are stored in a set of tables nllose schema holds information 
This information reveals the coordinates ef the upper left corner of the window screen to be displayed. 
as Jvcll as the height and ~~idtll of it. so as to properly positioned it. Other information pertains 
to lnessages tlkat are to bc displayed as part of the screen. Options in any menu arc retrieved from 
the SME database. at excculion time. along lvith the name of the corresponding function that executes 
the actions of tllc option 3.2 Information En(ry And Editing A SME database is populated by using graphical 
editors. textual templates. or sub program lnvoca(iom from ~~ithin a model (at execution time -/70rlzo}lia/ 
/~?[( gra[/0/7) or 1]~ fronl a SME tool throtigh transparcn the SME interface (\ ertica/ i}7tegratio}7). 
Current relational and object-oriented DBMS posses the capabilities to create user interfaces that take 
advantage of text-based icons, poi~7t and c//ck devices. English-1ike query languages, or natural language 
processors Graphical editors are important to SME as far as the animation component of the simulation 
model is conccrncd. Although current RDBMSS. such as ORACLE and INGRES, do not provide full graphical 
support for all platforms. their ~ersions for \vindo\vs­based platforms do provide some support. \Ne 
believe that current trends of RDBMS, in this particular area, \vIll comergc to meet the graphical editor 
provided II ith simulation tools such as SLAMSYTEM and SIMAN/ARENA. Specific models of a system can be 
described through a collection of icons, each one uniquely identified by its spatial location and a name 
The data structures needed hold these icons. and the operations to manipulate these structures are supplied 
by the DBMS, Under a strict relational model. hierarchically linked tables are needed to fully dcscribc 
the attributes of irregular shapes, These attributes lllCIUde the llUlllbCr of vertices and the coordinates 
of each point. the type of arc connecting any t~l o \ crtices. the name of the icon. the Initial position 
to display It. color attributes. and shading. Tcxtua] editors pro\idc for entering and changing mode] 
input data. simulation experimental control information. animation scripts. presentation formats and 
the Iikc. dlrcctly from the user. Information of this type can bc ~icll cd as a set of records ~vitb 
each record composed of a set of fields ([up/es in the relation data model). Different record classes 
lme different SC(Sof fields (different tables), Operations supported b! textual editors include copying. 
deleting, and meting as well as changing the field \ alues in existing records, As ~vitl~ a model. the 
textual information ma! be suftlcicntl! ~oluminous to prccludc concurrently keeping it all in main memon, 
A user \vorks }vith on]! a small subset of the information at a time. ThLN. buffering of textual information 
is requlrcd. Current DBMS provide application building capabllltles to de~elop ~[ser flPP//cfl~/o/? J1ith 
data entn forms that ~lct as tile textual editor. These data entry forms are manipulated directly by 
the DBMS: therefore. data integrity. data buffering. and similar operations are carried transparcntlj 
to the user. For example. TESS has tlko t~ pes of textual editors Onc type 1sfor informmon organ]zed 
into the ro~vs of one database table. Such reformation illChldeS cxpcrimcntal controls. animation scripts. 
and input data \ :liUCS The other t!-l)c of editor processes presentation formats organized into one 
database table row. Keyed retrieval functions are used to access a format object by name and replace 
the function to update that object when editing IS completed. ISME uses a dynamic template approach to 
gather information, e.g. the actual node at level i+ 1 in the data collection tree is determined by the 
actual value entered for the node at level i. The data management functions used to perform with the 
collected data are executed using SQL. By using embedded SQL, ISME relies on the DBMS to properly handle 
all integrity constraints defined for the particular schema.  3.3 Information Processing This component 
collects and stores simulation results, including traces, time series of values, and summary statistics, 
for future analysis and presentation. Each class of simulation results is a set of records. Each object 
in a particular simulation result class may have a unique set of fields comprising its records. Multiple 
sets of time series and statistics may be saved. Statistical summaries are stored at the end of a simulation 
run as well ar optionally throughout the run. To support the storage of the results of a simulation run, 
the SME database nwst accept information into many distinct tables at one time. This is done using a 
standard database storage function (e.g. INSERT INTO). Buffering is not an issue since no reference is 
made during a run to previously collected results. The results, therefore, can be place on secondary 
storage as necessary. The organization of results on secondary storage, however, is important due to 
volume being a major issue. One ad hoc method for doing this has been reported by Norman (1991). Within 
an SME, minimizing secondary storage requirements and using organizations that provide for fast retrieval 
of information processing operations are necessary. Experience has shown that one good organization for 
results, in keeping with the overall structure of an SME database, is as follows. Each table of results 
occupies its own set of physical records; thus, the number of records retrieved during information processing 
per table is minimized. Each record also has three pieus of overhead: the ID of the previous physical 
record. the ID of the subsequent physical record, and the offset from the beginning of the record where 
the next row can be placed. Statistical analysis is typically performed on one table of time series values,, 
or a selected subset of its rows and variables. The computed statistical quantities are either displayed 
immediately or stored for later presentation or use within a model. Thus, Standridge statistical analyses 
of results need not be specified or performed within simulations but can be defined and computed on a 
post-simulation basis. Rows of data values are retrieved, one at a time, using database sequential retrieval 
functions (e.g. SELECT -FROM). The necessary statistical computations are made, and rows of statistical 
summaries are rewritten to the SME database. Again, using TESS as an example, two statistical analysis 
operations are available: fitting a distribution function to data and computing summary statistics. Fitting 
a distribution function is an interactive, graphically based process where a set of values for one variable 
are inputted from one database table using a sequential retrieval operation, All potential distribution 
functions and their parameters that could fit the data are stored in another database table using a sequential 
storing operation. On the other hand, computing statistical summaries is not an interactive operation. 
Summary statistics are computed from all values, or a selected subset of all variables, in one database 
table. Multiple sets, one for each specified subdivision of simulation time, of summary statistics may 
be computed for each variable. The result of the computations are stored in one database table per variable. 
Rows of a table correspond to batches. and each batch has a unique ID that serves as its key. ISME uses 
a prototype KBS to analyze the raw data to establish the inputs for a particular model. Most of the standard 
statistical analysis is carried out without the intervention of the human user. In selecting among several 
feasible hypotheses, however, the proto~e KBS presents to the user the various alternatives and requests 
the final decision from the user. Database technology is being used to allow the user to explore as many 
alternatives as he decides without having to conduct the entire analysis every tmle. The statistical 
analysis is thus viewed as a decision tree about which partial results are kept at various node levels. 
At any point, the user may backtrack and choose another analysis path.  3.4 Model Extraction Component 
 Models can be defined about systems previously described and stored in the database. This component 
has two major functions to fulfill in a SME: 1) convert, with the help of the end user, information about 
a system into a model of it, and 2) convert the model into a specific format to meet the requirements 
of the simulation engine. Through the SELECT operation of the DBMS (executing JOINs and/or UNIONS on 
tables), components of a system can be presented to the modeler for his/her modeling decision. Once models 
have been fully defined, they need to be translated into the format of the simulation engine. This translation 
can be made in several ways using database capabilities. The database can be used to merely store the 
final product of the translation process, or it can be used to dynamically define the classes of systems 
that can be modeled, and the simulation engine to utilize. The latter approach may, in the near future, 
enable language independence in a SME. In TESS, the translation of the graphical and intermediate network 
forms to a model executable by SLAM II and is accomplished externally to the database. Classes of symbols 
providing definition information, resource blocks for example, are selected and processed first. Connectivity 
between nodes and branches is checked based on relative graphical location. Accomplishing this includes 
processing the network in order of the horizontal coordinate location of each symbol. The executable 
form of the network is stored in the TESS database for later simulation. In ISME, on the othel hand, 
a builder (editor) is used to define the classes of systems that can be simulated and models of systems 
in this class. Once a system class and models have been defined, ISMES model synthesizer produces an 
equivalent SIMAN (Pegden, Shannon, Sadowski, 1990) model and experiment source file. During the synthesis, 
the engine makes an extensi~ c use of SQL statements to ensure that the integrity of object relationships 
is preserved. For instanct; since ISME captures the definition of a system independently of the models 
about it, it may be possible that there are no models defined for a requested system at the moment the 
simulation engine is triggered. Thus, before attempting the synthesis of nothing , the engine checks 
that there is at least one model for the given system, using the following SQL statement from within 
a C program: SELECT MODLCODE> MODLNAME INTO :rnodcocles, :modnames FROM MODELb WHERE PROJCO!X = :projcod: 
 In general, ISMES snmdation engine begins by retrieving all the custom :rji to be processed through 
the simulated system and their relevant attributes. It then proceeds to retrie\.e the resources in the 
system. To illustrate. consider a class of manufacturing systems where c?~stower.s ave parts and resources 
are stations or cqulpment. Model retrieval is achieved through a series of SQL statements such as the 
following: purts to process: SELECT PARTCODE. BATCHSIZE, INTERTPARS, TERTDIST INTO :pcodes, :bsize,: 
iatflars, :iat..dist FROM PART LIODEL WHERE h40D~coDE = :modlcod; attributes to observe for each part: 
SELECT ATTRIBDESCR, ATTRIBCLASS INTO :attr_desc, :attr_class FROM PART ATTRIBUTES  WHERE PARTCODE = 
:partcod AND MODLCODE = :modlcod; routes to be followed by parts: SELECT SEQUENCE, PARTFROM, PARTGOTO> 
TRVLTIME, PROCTIME, PROB INTO :seq, :sfrom, :sgoto, :ttime, :ptime, :probability FROM PART ROUTES WHERE 
PART= DE= :partcod ORDER BY SEQUENCE ASC; equiptnent: SELECT EQUIPMENT. EQUINAME, STATCOMP.COMPQNTY 
INTO :equiname, :compqnt FROM STATION MODEL> STATCOh~P MODEL, STATCC)MP, EQUIPMENT WHERE STATION h40DEL, 
MoDLcoDE=:modlcod AND STATION~MODEL.ST ATCODE = :partgot AND STATCOMP.COMPTYPE = dual AND EQuIPi14ENT. 
EQuIcoDE=sTATcoMP. coMPcoD; Notice that SQL statements can be conditioned to retrieve information in 
certain order, or they can be multi-conditioned (or nested) to execute a join operation across several 
tables in the database. Consequently, a system may be modeled at various levels of expansion. 3.5 The 
simulation engine In a SME, neutrality is easily realized and further enhanced by database technology 
since these generic structures, and instances of them. can be physically stored in a database, and later 
retrieved and updated. For instance, structures for inputioutput data objects (and the operations performed 
on them) have been found not to depend on the simulation language that needs them or outputs them. The 
neutrality of simulation results is a direct result of the philosophical approach used by many simulation 
languages: the next event approach. which yields results in the form of traces, time series, sets of 
tallied values as they occur, and summaty statistics. In the patlicular case of TESS (Standridge, 1981). 
individual events belong to a particular Event Class. and each event is identified by its class and 
its ID within the class. Possible event class schema may vary from one simulation language to another, 
but this becomes an implementation problem only if the underlying DBMS is custom made. No\v consider 
the logical organization for time series of a model s state variables as proposed in SIMDABS. A column 
in the schema must hold the sinlulation clock time, uhereas the other columns may correspond to user 
selected state variables, Each ro~~ in the table contains one value for each state variable. as well 
as the simulation clock, and thus represents simulated changes of state. These tables may well be part 
of a larger simulation database, with their schemes defined in the experimental control unit of a model 
run. Neutrality using descripti~e modeling has been proven feasible by Centeno ( 199[)). As an example. 
consider the system shown in Figure 1 (Pegden. et al.). A description of the ~m-ious objects in the system 
is mapped into the relational tables shonm in Figures 2 and 3, The modeler uses a model builder/editor 
to describe the objects in Lhe system which in turn populate these tables. WLIS, the modeler needs no 
knowledge of the model analjws component. e.g the simulation language. The Model Extraction component 
transforms the information in these tables into the inputs required bv the simulation engine. -t. SUMMARY 
Database management concepts and capabilities are an important enabling tet hnology for the design and 
implementation of simulatmn environments This has been demonstrated by the use of these concepts and 
capabilities in previousl~ developed commercial and prototype SMES. Database concepts contribute to the 
development of effective, user-based interfaces that Standridge .. .__. ._.__. .. _____ ----------------------..__________ 
.-. .t I I jobtyp, 1 1.0 ~  ------­ . . . . .... ...___. _ ..I 6466 ~ ?777 ; job typ 2 1,0 . . I . 
. l___. . ..._ . I ~ L_iiti:.-.l (F) ~ ..-..- I L&#38;J ! *rii --. - ___ -----_____ _--------------­ 
310  Figure 1: GT Cell Example jobs job type inter arriwd time batch size 1 14,0 5 2 ex(3 (J) 8 routes 
job type seq. from to travel the process time I 1 6666 st12 00 CO(3) 1 2 S112 Stl 1 00 un(2,3) 1 3 Stll 
7777 0.0 ~null> 2 1 6666 Stll 0.0 1111(1,2) 2 2 Stll 7777 0.0 :Uull> Figure 2: Job objects for GT cell 
example BuFFE~s lluik Cad.? Buffer Name Buffer Type Buffer Ca ric,tv OPERITOR \\rOrkel Code . work Yame 
\vorkcr \\fcl~es ?iiJg2JF3 EQUIPfilEST Eqtupment Code Equpmmt N.rIIe c1 --&#38;a Figure 3: Station 0bjs3CtS 
for GT cell example that help unite the various components of a SME. Language independence may be realized 
by using DBMS concepts such as data hiding and standard query languages. Although current commercial 
RDBMS do not offer all of their potential to the simulation domain, efforts to make them accessible and 
compatib,c with other technologies, such as artificial intelligence, are under way. REFERENCES Balci, 
O. (1986), Requirenlents for Model Development Environments, Computers and Operations Research, 13(1), 
53-67. Balci, O. and R.E. Nance (1987), Sinmlation Model Development Envirimments: A Research Prototype, 
Journal qf the Operational Research Society, 38(8), 753-763. Banks, J. and J.S. Ca~on (1990), Discrete-Event 
System Sinwlatio17, 2nd. Edition. Prentice-Hall, Englewood Cliffs, N.J. Benbasat, I. and P. Todd (1993), 
An Experimental Investigation of Interface Design Alternatives: Icon vs. Text and Direct Manipulation 
vs. Menus, International Journal 01 ,blan-h[acl)ine Studies. 38, 369-402. Centeno, M.A. (1990), Design 
of an Integrated Simulation Modeling Environment Using a Relational Database Frame$vork, Doctoral Dissertation, 
Industrial Engineering Department, Texas A&#38;M University. College Station, Tx 77843. Centeno, M.A. 
and C.R. Standridge (1991), Modeling Manufacturing Systems: An Information Based Approach, Procwdings 
of the 24tl? Ai717ual S~wtposium 1991, S(./ Eastern l\l\ilticoi?ferej?ce, April 1-5, New Orleans, La. 
Codd, E.F. (1979), Extcmding the Relational Model to Capture More Meanng, ACM TODS, 397-434. Egido, C. 
and J. Patterson (1988), Pictures and Category Labels as Navigational Aids for Catalog Browsing, CHI 
1988 Humi:l Factors 117 Compt!ting System Conference, 127-132. Frankel, V.L. and O. Ba]ci (1989). An 
On-Line Assistance System fiw the Simulation Model Development Environment, International Journal of 
A4an-A40chine Studie;:, 31, 699-716. Gardarin, G. and P. Valduriez (1989), Relational Databases and Knowledge 
Buses, Addison-Wesley, Reading, Ma, Goldberg, A. and D. Robson (1983). Smalltalk: The Language and its 
Ijllpleirlei?tatioi?s, Addison-Wesley, Reading, Ma. Kacmar, C.J. (1989), f! ,T Experimental Comparison 
of Text and Icon Me? u Item Formats, Working Paper, Florida State University, Department of Computer 
Science, Tallahassee, Florida 3:2316. Katz, R. (1985), Information Management for Engineering Design, 
Springer-Verlag. Ketcham, M.G. (1986), Computer Simulation as a Decision Support Tool, Doctoral Dissertation, 
Industrial Engineering Department, Texas A&#38;M University, College Station, Texas 77843. Ketcham, M. 
G., R.E. Shannon, and G.L. Hogg (1989), Information Structures for Simulation Modeling of Manufacturing 
Systems, Simulation, 52(2), 59-67. Law, A.M. and W.D. Kelton (1991), Simulation Modeling and .4nalysis, 
2nd Edition, McGraw-Hill Book Co., N. Y., N.Y. Norman, T.A. (1991), Storing Data from Simulation Runs 
for Compactness and Quick Retrieval, Smulation, 57(2), 107-110. Pegden, C.D., R.E. Shannon, R.P. Sadowski 
(1990), Introduction to Simulation Using SWL4N, McGraw-Hill Book Co., N. Y., N.Y. Pritsker, A.A.B. (1986), 
Introduction to Simulation ad SLAMH, 3rd. Ed., Halsted Press, N. Y., N.Y. Schriber, T.J. (1990). Introduction 
to Simulation Using GPSWH, John Wiley and Sons, New York. Shannon, R.E. and M.A. Ceuteno (1990). Expert 
Simulation System Based on a Relational Database, Proceedings of the 1990 Winter Simulation? Conference, 
O. Balci. R.P. Sadowski, R.E. Nance (eds), 412-414. Smith, J.M. and D. Smith (1977), Database Abstractions: 
Aggregation and Generalization, .4CAf TODS. 2(2) 105-133. Standridge. C.R. and A.A.B. Pritsker (1978), 
SIMDABS: A Data Base System Tailored for Use in Simulation Studies, Proceedings of the 1978 Wi/?ter Simulatlol? 
Confere/ice, H.J. Highland, M.G. Spiegel, and R.E. Shannon (eds), 309-312. Standridge, C.R. (198 la), 
Using the Simulation Data Language (SDL), SIMULATION, 45(2), 73-81, Standridge, C.R. (1981 b), Perfornling 
Simulation Projects with the Extended Simulation System (TESS), SIMUL4 TIOAT, 45(3), 238-242. Standridge, 
C.R. and E.A. Matalon (1983). A Relational Schema and Views for Traces of a Simulation Run, Modeling 
and Simulation, 14(3), 657-662. Standridge, C.R.. D.K. Vaughan and M. Sale (1985), A Tutorial on TESS: 
The Extended Simulation System, Proceedings of the 198.5 Winter Simulatiof7 Conference, D. Gantz, G. 
Blais, S. Solomon (eds). 73-79 Stonebraker, M., J. Anton and E. Hanson (1987), Extending a Database 
System with Procedures, ACM TODS, 12(3), 350-376. OTHER RELATED REFERENCES Balci, O. and et al. (1990J, 
Model Generation Issues in a Simulation support Environment, Proceedings of the 1990 Winter Simulation 
Conference, O. Balci, RP. Sadowski, R.E. Nance (eds), 257-263 Codd, E.F. (1990), TIIe Relational Model 
for Database Manageulcid -Version 2, Addison-Wesley, Reading, Ma. Cox, C.J. (1987) Object Oriented Programming: 
An Evolutionary Approach, Addison-Wesley Publishing Company, Reading, Ma. Date, C.J. (1985), An Introduction 
to Database Systems, Addison-Wesley, Reading, Ma. Lamsweerde, A. V., M. Buyse, B. Delcourt, E. Delor, 
M. Ervier, M,C. Scheyes (1986). The Kernel of a Generic Software Development Environment, Communications 
of the A CM, 208-217. Lilegdon, W.R. and J.N. Erlich (1990), Introduction to SLAMSYSTEM, Proceedings 
of the 1990 Wi]lter Sijllu\atioJl Colqferejlce, 0, Ba~ci, Rp, Sadowski, and R.E. Nance (eds), 77-79. 
Musselman, K.J. (1992), Conducting a Successful Simulation Project, ] i.oceedings of the 1992 Winter 
Simulation Conference, J.J. Swain, D. Goldsman, R.C. Crain and J.R. Wilson (eds), 115­ 121. Nance, R.E. 
(1977), ~l]~e F~asiblll@ of ajld Methodology for Developing Federa[ Documentation Standards jor Si!mtlatlon 
Models, Final Report to the National Bureau of Standards, Department of Computer Science, VPI&#38;SU, 
Blacksburg, Vs., June. Reppy, J.H. and E.R. Gansner (1986), A Foundation for Programming Environments, 
Coltl)}li\ilicatiolls of the ACM, 218-227. Reese, R. and S. Sheppard (1983), A Software Development Environment 
for Simulation Programming, Proceedings of the 1983 Winter Simulation Conference, S. Roberts, J, Banks, 
B. Schmeiser (eds), 419-4 !6. Wiener, R. S. and L.J. Pinson (1988), .417Introdl/ctlon to Object-Oriented 
Programnlng and C+ +, Addison-Wesley Publishing Co., Reading, Ma. MARTHA A. CENTEN t ) is an assistant 
professor in the Department of industrial and Systems Engineering at the Florida International University. 
She received a B.S. in ( ;hemical Engineering from Standridge ITESO (Mexico) in 1981, a M.S. in Industrial 
Engineering from Louisiana State University in 1985, and a Ph.D. in Industrial Engineering from Texas 
A&#38;M University in 1990. Her current research interests are in the areas of intelligent environments 
for system analysis. Dr. Centeno is a member of ASA, Alpha Pi Mu, IIE, ORSA, TIMS, and SCS. CHARLES R. 
STANDRIDGE is an associate professor in the Department of Industrial Engineering at the Florida A&#38;M 
University / Florida State University Joint College of Engineering. He led the development of the Simulation 
Data Language (SDL) and of the Extended Simulation Support System (TESS) for Pritsker Corporation. His 
current research interest are in the development of modeling and analysis environments for manufacturing 
systems, in the use of animation as a modeling and analysis tool, and in the analysis of health care 
delivery systems. 
			