
 Proceedings of the 1991 Winter Simulation Conference Barry L. Nelson, W. David KeJton, Gordon M. Clark 
(eds.) A FRAMEWORK FOR SIMULATION DESIGN OF FLEXIBLE MANUFACTURING SYSTEMS * Marco Chierotti Witold 
Jacakt Jerzy W. Rozenblit Department of Electrical and Department of Systems and Computer Engineering 
-Information Science The University of Arizona University of Linz Tucson, Arizona 85721 A-4040 Linz U.S.A 
Austria ABSTRACT and/or assembly task into the sequence of elemen­ tary operations of robot and devices, 
the assignment A framework is being developed for simulation-based of machining subtasks to system resources, 
and a design of flexible manufacturing systems. The frame-model for the coordination and scheduling of 
system work integrates generation of assembly plans, design resources in a flexible manufacturing system 
(FMS). and configuration of the manufacturing facility and An FMS is a set of programmable machines (tech­ 
equipment, synthesis oft ask orient ed robot programs, nological devices) and product stores (buffers) 
con­ and simulation of a manufacturing system. In this pa­nected by a flexible material handling facility 
(such per, each layer is briefly summarized and a simulation as a robot or an automated guided vehicle), 
and con­ case study of a system for electric motor assembly is trolled by a computer connected with a 
system of presented. sensors. An FMS can perform such technological operations 1 METHODOLOGY as fabrication, 
machining, or assembly. The state of an FMS is monitored by the sensory system. The In recent years, 
the use of programmable and flexi-FMS state depends on the states of every machine ble systems has enabled 
partial or complete automa­and store. In order to generate a plan of a task real­tion of product machining 
and assembly. The eco­ization, actions have to be applied to affect a changenomic pressure for increases 
in quality, productivity, of the FMS state. In general, an action can be ap­and efficiency of manufacturing 
processes has moti­plied to a sensors-monitored state of an FMS if a set vated the development of more 
complex and detailed of preconditions are met. An implementation of the design methodologies for flexible 
manufacturing sys­production plan can be therefore seen as a sequence tems (Kusiak 1990). The proposed 
simulation-based of FMS state transitions obtained by applying funda­framework integrates generation 
of assembly plans, mental actions executable by the system. To estab­design and configuration of a manufacturing 
facility lish the sequence of actions and their preconditionsand equipment, synthesis of task oriented 
robot pro­list, the task planning problem is divided into two grams, and simulation of the manufacturing 
system. subproblems: a) the technological process planning In our methodology, the design process is 
driven problem (called production route planning problem), by manufacturing objectives. First, a technological 
and b) the deadlock avoidance planning problem. process is established. This plan is a sequence of ma-The 
production route planning goal is to find an chining and/or assembly operations. The Task Plan­ordered 
sequence of technological operations with a ning Layer organizes the technological process into a minimum 
number of deadlock inst antes. The techno­feasible sequence of elementary operations. logical process 
planning is based on the description of the operations of the machining or assembly process, 1.1 Task 
Planning the precedence relation over the set of operations, the Task planning methods generate a task-level 
plan description of the FMS geometry, and the description which describes the decomposition of the machining 
of resources. To solve this problem, an AND/OR graph representation is used (Homem De Mello and *Supported 
in part by Siemens Corporate Research, Prince- Sanderson 1990), (Sanderson, Homem De Mello, and ton, 
New Jersey Zhang 1990). A decomposition of the machining task t On leave from the Institute of Technical 
Cybernetics, Tech­nical University of Wroclaw Wroclaw 50-370, Poland corresponds to a cut set of this 
graph. Feasible de­ 1106 compositions, with respect to a precedence relation of assembly operations, 
are used to create an AND/OR graph that represents all valid operation sequences. A production route 
is a set of ordered sequences of technological devices or stores (called resources) required by successive 
operations. Once a fundamental plan is defined as a sequence of robot actions, we determine the programs 
for robot operations and the geometric trajectories of robot movements that implement each act ion. This 
is ac­ complished in the Task-Level Programming Layer.  1.2 Task-Level Programming The action plan for 
an assembly task determines the robot s program of operations needed to service the process. Such a program 
is a sequence of instructions (motion, grasp, and sensors instructions) expressed in a Task-Oriented 
Robot Programming Language (TORPL). Each elementary action has an associated set of instructions in such 
a language (Lozano-Perez 1989). The fundamental function of the Task Program­ming Layer is to synthesize 
the robot s motion tra­jectories that realize the MOVE and GRASP instruc­ tions. Trajectories also determine 
the duration of the moves. To generate the trajectories, we must have available the geometrical models 
of all the machines and stores of the production system as well as models of the robot s kinematics and 
dynamics. The robot s motion trajectory planning process is decomposed into two subproblems: 1) planning 
of the collision-free geometric track of motion, and 2) planning of the motion dynamics along the computed 
track. The planner determines the collision-free track of the robot motion from the initial to the final 
effec­ter locations based on a) geometric and kinematic description of the robot, and b) its environment 
and the initial and final positions of the effecter-end. This problem has been addressed in various ways 
and is widely reported in literature (Brooks 1983), (Jacak 1989a), (Lozano-Perez 1989). The methods which 
solve the problem in question depend on the assumed mathematical model of the robot s kinematics. Now, 
the optimal speed and acceleration of movements along the computed track should be computed. This task 
is solved by the trajectory planner. The trajectory planner receives the geometrical tracks as input 
and determines a time history of po­sition, velocity, acceleration and input torques which are then input 
to the trajectory tracker. On this level, the robot is represented by the manipulator dynamics model 
(Shin and McKay 1986), (Jacak 1989 b). Hence, we can obtain an optimal trajectory and the time of manipulator 
movement along a geomet­rical track. Such a planner can generate variant in­terpretations of robot action 
plans. For each instruc­tion of the robot s program, we can change the ge­ometry of the motion or change 
the motion dynamics along the track by selecting criteria of minimal-time or minimal-energy planning. 
Variant inter,pretations of the language instructions result in different realiza­tions of robot actions. 
This motivated us to introduce a procedure that would automatically verify the se­mantics of the robot 
s program. This procedure is described briefly in the next section. 1.3 Discrete Event Simulation of 
Robot Ac­t ions The variants of motion interpretation obta,ined from the motion planning level are tested 
by a simulator. Simulation is used to select the most effective vari­ant. The program synthesis process 
requires that we introduce conditional instructions which depend on the states of each machine d~ of 
the machin­ing/assembly line and the operational instructions that realize robot actions. Thus, to define 
a, simulator of the program, we model conditions that enable pro­gram instructions. Each machine di has 
the following DEVS (Zeigler 1984) representation: Deva =< X, S, Y, 6jn~, 6M, A, t. > where: xi={zo~, 
xlj, z2i} I i=l,..., L is the set of external events defined as follows: ZOi = SETUP working parameters 
x li = PLACE part ON i-th position, x2i = PICKUP part AT i-th position, The state set is defined as: 
. s= signifies that machine is off line sb signifies that machine is free  s= signifies that machine 
is loading, . sd signifies that machine is busy processing an operation  se signifies that machine 
has completed an operation and is not free  The internal transition function for each machine i is 
given as follows: c$jnt(s:) = s: c$:nt(s:) = s~ b;nt(s:) = s: 6jnt(sj) = s: 6jnt(s:) = s: The external 
transition function for each machine i is defined as: 6gxt((sj , Zoi) = s~ 6:ct((s~ , Zli) = s; 6$J(S\, 
Xii) = Sj 6~=*((S~ , Z2i) = S; Aj$t ((., .), .) = failure for all other states The output function is 
simply defined as Ai(s) = s. The time advance functions for Devi determine the time needed to process 
a part in the i-th ma­chine. They are defined as follows: if s = s~, then tai(s) = +, otherwise tai (s) 
= m, where # is the tooling/assembly time of operation k for machine i. The above specification defines 
a model of the tech­ nological machines. The activation of each machine Devi is caused by an external 
event generated by the model of the robot. This model is realized by a generator of an experimental frame 
component (Ja­cak and Rozenblit 1991) associated with the pro­duction system model. Since the events 
generated by each robot depend on the states of the workcells Devili = 1, ..., L, we define an acceptor 
which ob­serves the state of each workcell. Rather than provide a detailed mathematical de­scription 
of the experimental frame models here, we describe their functionality. (The reader is referred to (Jacak 
and Rozenblit 1991) for a complete for­mal specification of the simulator.) The acceptor is a DEVS that 
receives as input state descriptions of each machine Devi. It selects events which invoke the robot to 
service a workcell. The acceptor state set is a class of subsets of indexes of workcells Devi. The state 
contains indexes of only those workcells which have completed processing of a part and from which the 
part can be transported to another workcell (i.e., the preconditions of the next operation are satisfied). 
The states of the acceptor also determine state com­ponents of the frame generator that models the be­havior 
of every robot. The DEVS-model of each robot contains the state set SR = S. x Positions x HS, where S= 
is the state set of the acceptor, Positions is the set of posi­tions of the robot s effecter-end in the 
base-Cartesian space, IJS is the set of states of the effecter, i.e., HS = {Empty, Holding}. Jacak and 
Rozenblit (1991) demonstrate how the above discrete event specifications can be translated into a set 
of instruc­ tions in TORPL. Design of a manufacturing facility capable of car­rying out an assembly sequence 
plan is an integral phase of the proposed framework. Resources, i.e., ma­chines, robots, material handling 
devices, and com­puter hardware must be integrated in a manner most conducive to the realization of the 
plan. Knowledge-Based Simulation Design methodology is applied to accomplish the integration. 1.4 Knowledge-Based 
Simulation Design Met hodology Knowledge-Based Simulation Design methodology is applied to accomplish 
the integration of plant com­ponents and resources. The system design approach proposed by Rozenblit 
and Zeigler (1990), termed Knowledge-Based Simulation Design, focuses on the use of modeling and simulation 
techniques to build and evaluate models of the system being designed. It treats the design process as 
a series of activities which include specification of design levels in a hi­erarchical manner (decomposition), 
classification of system components into different variants (special­ization), selection of components 
from specializations and decompositions, development of design models, experimentation and evaluation 
by simulation, and choice of design solutions. The design model construction process begins with developing 
a representation of design components and their variants. To appropriately represent the fam­ily of design 
configurations, a representation scheme called the system entity structure (SES) has been pro­posed. 
The scheme captures the following three re­lationships: decomposition, taxonomy, and coupling. The synthesis 
(coupling) constraints impose a man­ner in which components identified in decompositions can be connected 
together. The selection constraints limit choices of variants of objects determined by the t axonomic 
relations. Beyond this, procedural knowledge is available in the form of production rules. They are used 
to ma­nipulate the elements in the design domain by ap­propriately selecting and synthesizing the domain 
s components. This selection and synthesis process is called pruning. Pruning results in a recommendation 
for a model composition tree, i.e., the set of hier­archically arranged objects corresponding to model 
components. Performance of design models is evaluated by sim­ulation. A simulation experiment is defined 
using the experimental frame concept. Briefly, an experimen­ t1 STATOR RUTOR I MOTOR I f-r Figure 1: 
Electric Motor tal frame defines a set of input, control, output, and summary variables, and input and 
control trajecto­ries. These objects specify conditions under which a model can be observed and experimented 
with. It is usually realized as a coupling of three components: a generator (supplying a model with an 
input segment reflecting the effects of the external environment upon a model), an acceptor (a device 
monitoring a simula­tion run), and a transducer (collecting and processing model output data). The simulation 
phase of the design framework is followed by evaluation of simulation results and rank­ing of alternative 
design models in respective exper­iment al frames. Design models that best conform to design performance 
criteria, constraints, and require­ments serve as the basis for the proposed design s~ lution. The following 
example shows the application of the methodology to a simple FMS design problem.  2 CASE STUDY The example 
presented here demonstrates different plans of sequencing operations (operations schedul­ing problem), 
selection of devices (machines, mate­rial handling systems, and robots) to carry out the operations, 
synthesis of a program for robots servic­ing the devices, simulation modeling, and testing and verification 
of design variants based on the simulation models of the overall system architecture. 2.1 Product Description 
The example illustrates design of a system for an elec­tric motor assembly. The motor is shown in Figure 
1. REAR PLATE STATOR x ROTOR STATOR a cl Figure 2: AND/OR Graph Our model is a simple motor composed 
of four parts: rotor/bearings, front and rear plates, and st ator. To obtain the final assembly, a sequence 
of assem­bly steps must be devised. In order to do so, the product is conceptually disassembled until 
only ele­ment ar y parts are left. This process, called gener­ation of feasible assembly sequences, allows 
the def­inition of partial assembly states and the sequence of operations needed to move through the 
assembly state space. Out of all the possible disassembly/assembly se­quences,onlysome are feasible. 
Some subassembly states and some assembly operations are impossible because of geometrical and technological 
constraints, and have to be eliminated. To capture the possi­ ble assembly sequences, an AND/OR graph 
repre­sent ation is used. Referring to the graph c~f Figure 2, K-connectors represent feasible decompositions 
while nodes represent legal subassembly states. The graph shown in the figure considers only a subset 
of all the geometrically feasible decompositions (some of them have already been discarded). For examplle, 
the rear plate could be separated from the whole assembly, giving place to a geometrically feasible decomposi­tion. 
Nevertheless, the resulting inverse assembly op­eration would be complex to perform, and the mo­tor without 
the rear plate would be an unstable sub­assembly, impractical to handle and to operate on. Using the 
above criteria, the AND/OR graph of Fig­ure 2 has been generated. It represents two possible sequences 
of technologically feasible operations and stable subassemblies. ~MOTOR I REAR PLATE STATOR ROTOR A Figure 
3: Plan 1 Assembly Tree Figure 4: Plan 2 Assembly Tree Chierot ti,Rozenblit and 3acak Table 1: Assembly 
Feeder Data FEEDERS ROLE ASS. PART PREP. TIME Feeder O input stator 5 Feeder 1 input rear plate 5 Feeder 
2 input rotor 5 Feeder 3 input front plate 5 Feeder 4 output motor 10 From the AND/OR graph, two possible 
assem­bly trees are generated, as shown in Figures 3 and 4. These trees constitute the bssis for the 
synthesis of two alternative production plans. Assembly trees embody the precedence relationships between 
opera­tions. For example, the first tree leads to the imple­mentation of a pipeline structure where single 
parts are added to a single subassembly. The second tree allows a parallel organization where two partial 
as­semblies are joined to get the final product. 2.2 Production Plan, Requirements and Constraints Once 
an assembly tree is generated, assembly opera­tions have to be assigned to actual physical devices. In 
addition, materials have to be moved among de­vices. Thus to complete the system design, material handling 
and storage components are needed. Due to the simplicity of the assembly plan, ma­chines are clustered 
in a sin~le workcell serviced bv a single robot. For both plans the workcell needs four parts and produces 
a single finite assembly. Therefore four input and one output feeders must be provided. Input feeders 
have to be connected to the same num­ber of storage areaa in order to receive parts. The output feeder 
is connected to a final product storage area. Parts are moved using conveyors, therefore five of them 
are needed. This information is used during the SES pruning process to obtain the system com­position 
tree. To have a complete assembly plan, timing values for operations must be added. As shown in Table 
1, each part is assigned to a feeder. Feeder preparation time is the time needed by an empty feeder receiving 
an object to make it available on output. Feeders are supposed to have a capacity of two. Machine process­ing 
time is determined by the operation s complexity. Machines have to wait the arrival of all needed parts 
before they can begin processing. In Tables 2 and 3, the list of parts in square brackets indicates that 
these parts have been connected into a subassembly Table 2: Assembly Plan 1 Machine Data MACHINES PARTS 
NEEDED SUBASS. PROD. PROCESS. TIME Machine O rear plate, stator [rear plate, stator] 30 Machine 1 [rear 
plate, stator], rotor [rear plate, stator, rotor] 20 Machine 2 [rear plate, stator, rotor], rear plate 
motor 30 Table 3: Assembly Plan 2 Machine Data MACHINES PARTS NEEDED SUBASS. PROD. PROCESS. TIME Machine 
O rear plate, stator [rear plate, stator] 30 Machine 1 rotor-, front plate [rotor, front platej 10 Machine 
2 [rear plate, stator], [rotor, front plate] motor 40 woRlmiLL  J=J 5a PART2 MAr3uNB FE3DIR AsSEMBLY 
OUEWT FErm?R PART 1 L = FSEDER ROBOT Figure 5: Workcell Physical Organization and are now a single 
product. A workcell topology is important in order to define the robot s timing. Figure 5 shows a simple 
physical organization of one system under consideration. The robot must pick up parts 1, 2 and 3 from 
the respec­tive feeders, one at the time, and put them into the machine needing them. When the machine 
is done processing, the robot must remove the assembly and put it into the machine downstream or into 
the out­put feeder. Robot trajectories, defined by Task Level Program­ming, are determined by a very 
simple bidimensional model. Trajectories are straight lines between points, while the velocity profile 
during the trajectory is de­termined m follows: The robot accelerates with con­stant acceleration Ar 
up to the constant velocity Vr, then decelerates again with deceleration A. until it stops. If the trajectory 
is not long enough to reach Table 4: Assembly Plan 1 Topology DEVICE X-coord Y-coord Feeder O 2 6 Feeder 
1 2 2 Feeder 2 4 6 Feeder 3 6 6 Feeder 4 6 2 Machine O 2 4 Machine 1 4 4 Machine 2 6 4 the velocity 
V,, the robot accelerates up to the middle point of the path, and then decelerates. Numerical values 
have been set to Vr = 0.5m/s and Ar = lm/s2. Tables 4 and 5 contain device coordinates for plan 1 and 
2. 2.3 Evaluation Objectives and Experimental Frames The design objectives orient both the model and 
the experiment construction. In fact, from the design ob­jectives, performance indexes and experimental 
con­ditions are derived. The first performance index is the time needed by the plant to produce a given 
num­ber of assemblies. The second performance index is the utilization profile of workcell machines. 
The third performance index is the machines joint utilization, defined as the percentage of time during 
which all ma­chines are working at the same time. The fourth per­formance index is the utilization profile 
of the robot. Table 5: Assembly Plan 2 Topology DEVICE X-coord Y-coord FeederO 2 6 Feeder1 2 2 Feeder2 
4 6 Feeder3 6 6 Feeder4 4 2 Machine O 2 4 Machine 1 6 4 Machine2 4 4 From the above performance indexes, 
Experimental Frames are derived. For all of them, no input seg­ments are provided. The storage areas 
are consid­ered part of the system itself. Parts storage areas are loaded with the right quantity of 
parts needed, while the finite product storage areas are empty at the beginning of simulation runs. 
2.4 Simulation Simulation of design models is carried out in the DEVS-Scheme environment (Zeigler 1990). 
DEVS-Scheme is an object-oriented simulation shell for mod­eling and design that facilitates construction 
of fam­ilies of models specified in the DEVS formalism. To specify modular discrete event models requires 
that we adopt a different view than that fostered by tradi­tional simulation languages. As with modular 
specifi­cation in general, we must view a model as possessing input and output ports through which all 
interaction with the environment is mediated. In the discrete event case, events determine values appearing 
on such ports. More specifically, when external events, arising outside the model, are received on its 
input ports, the model description must determine how it responds to them. Also, internal events arising 
within the model, change its state, as well as manifest themselves as events on the output ports to be 
transmitted to other model components. Basic models can be coupled to form a class of cou­pled models. 
This facilitates simulation of hierarchi­cal, modular, multicomponent models (Zeigler 1990). The synthesized 
model uses the following ba­sic components: Production Store PSTORE, Plant Controller PLC, Workcell Feeder 
FEEDER, Work­cell Assembly Machine MACHINE, Robot Model ROBOT, and Workcell Controller CONTR. In addi­t 
ion, the experimental frame uses a Workcell Trans­ducer TRANWC, a Robot Transducer TRANROB, and a Production 
Store Transducer TRANPS. The Production Store Acceptor has been omitted. The simulation stops by itself 
when all parts have arrived at the Finite Product Store and all devices are idle. The Production Store 
PSTORE can contain parts or finite products. In the first case, when requested, it waits for processing 
time units and then delivers a part (provided it is not empty). In the second case, when a request for 
storage arrives, PSTORE waits its processing time and then stores the assembly (pro­vided it is not full). 
The delays incorporated into the Production Stores models simulate the presence of conveyors connecting 
them with the Workcell. The simulation starts with Production Stores loaded with the required number 
of parts and the output Production Store set to empty. All workcell devices are off line. To begin production, 
the Cell Controller CONTR receives the production plan as input data. The production plan assigns parts 
to cell Feeders, designates them as input or output devices, determines the parts needed by the machines 
to pro­duce an assembly, and defines the devices timing. The Cell Controller sets itself in a working 
status and broadcasts the plan to all cell devices. Each de­vice scans the plan, extracts the information 
it needs in order to operate, and sends its new status to the Cell Controller. At this point the production 
phase begins. Messages to and from the Production Stores are sent and received by the Plant Controller 
PLC that manages communications and material flow among the Production Stores and the Workcell. During 
the operations, the Workcell generates messages for the Plant Controller, sending lists of needed parts 
to be received from Part Production Stores and lists of Fi­nite Products to be sent to the Finite Product 
Store. When the Plant Controller receives requests for assis­tance from the Workcell, it puts them in 
a waiting list and then broadcasts this list to all Production Stores. Production Stores which are able 
to satisfy the re­quests wait their processing time and then send a re­ply to the Plant Controller that 
routes it to the work­cell. At the same time, the Plant Controller deletes from its waiting list the 
request that corresponds to the reply. We now analyze the Workcell s operation. When the Plant Controller 
sends messages to place or pickup parts on/from the workcell, the Cell Controller routes them to the 
corresponding input/output Feed­ers. At any moment, the Cell Cent roller keeps track of the status of 
each Feeder, Machine and the Robot, and generates commands for the Robot and external messages for the 
Plant Controller, accordingly. When parts from the Parts Production Stores ar­rive at the Cell Feeders, 
Feeders communicate this to the Cell Controller. The type of part offered is also relayed. At the same 
time, the Cell Controller knows the status of all machines. From this information, the Cell Controller 
is able to generate a list of external requests for the Plant Controller and a list of possible tasks 
for the Robot. An external request is generated when an input feeder can receive parts and/or when an 
output feeder has parts to ship out. A task for the Robot is generated when a device (feeder or machine) 
has a part or subassembly available and some other device inside the workcell needs it. A Robot Task 
is generated only if the Robot is idle at that moment. If it is not, the Cell Controller waits until 
the Robot asks for one. If several tasks are possible, the Cell Controller chooses the task for which 
the Robot has to travel the shortest dist ante. When the Robot receives a task, it moves from its current 
position to the device where it has to pick up a part, communicates to the device its action, then holding 
the part, moves to the second device, and communicates to the device that it is placing the part. When 
the Robot is done, it stops near the destination device and asks the Cell Controller for a new task. 
The Workcell Transducer receives a signal every time a cell device changes its status and updates its 
time table and its internal clock. The Workcell Transducer timetable contains as many entries as the 
number of machines in the system, each entry haa four partial time counters, one per each possible ma­chine 
status. An additional time counter registers the joint utilization. The Robot Transducer receives a signal 
every time the robot communicates with the Cell Controller, picks up or places a part. It keeps track 
of the time the Robot is idle, moves empty, or moves holding a part. At a global level, the Final Product 
Store Trans­ducer, records the number of assemblies and the times of their arrival at the Final Product 
Store. 2.5 Simulation Results For both plans the production of a batch of ten mo­tors has been simulated. 
For Plan 1, the time needed to produce the motors was 1744.30 units, the utiliza­tion profile of workcell 
machines is shown in Table 6, the joint utilization of machines was zero. The Robot was idle for 13.59% 
of the time, moved empty for 48.29%, and moved holding a part for 38. 12 %0. For Plan 2, the time was 
1699.41 units, the utiliza­ tion profile of workcell machines is shown in Table 7. The joint utilization 
of machines was zero. The Robot was idle for 16.63% of the time, moved empty for 43.27?10, and moved 
holding a part for 40.10%. Table 6: Plan 1 Machines Utilization [%] MACHINE S. Sb Sc Sd MO 27.45 36.87 
17.20 18.48 Ml 40.98 27.85 11.47 19.70 Mz 27.63 38.62 17.20 16.55 Table 7: Plan 2 Machines Utilization 
[%] MACHINE M. 33.; 12.;: 17.;; ,35.;; Ml 48.12 31.93 5.88 14.07 M2 35.71 31.63 23.54 9.12 Although 
the two designs have different architec­tures (pipeline vs. parallel), the results /show that they have 
equivalent dynamic performances. Comple­mentary design aspects, such as cost and availability of tools 
and fixtures, will guide the designer s final choice. 3 CONCLUSIONS A comprehensive framework for design 
of automated manufacturing system requires integration of several layers of support methods and tools. 
We are devel­oping an FMS CAD framework in which ~simulation plays a pivotal role. The need for simulation 
compo­nent in FMS CAD is becoming increasingly obvious. Most existing systems facilitate only one mode 
of op­eration, i.e., the off-line input of robot s program and subsequent testing of the program by graphic 
anima­tion of robot s motions in a geometric model of the workscene. The systems are capable of detecting 
col­lisions. However, they do not facilitate simulation of the overall automation system in order to 
evaluate the proposed FMS design. Starting from manufacturing objectives, our methodology generates a 
technological process as a sequence of machining and/or assembly operations, and organizes it into elementary 
opera­tions of robots and devices. These operations are translated into motion commands for robc)ts. 
Differ­ent variants of motion interpretation are tested by a simulator. Simulation is used to select 
the most ef­ fective variant. Our current work is focused on simulation based optimization of aasembly 
systems layout, Given a set of topological constraints imposed on the system layout, devices are placed 
on the workscene in such a way that material handling costs are minimized. REFERENCES Brooks)R. 1983. 
Planning Collision-Free Motions for Pick-and-Place Operations. Int. J. of Robotics Research 2(4): 19-44. 
Homem De Mello, L. S., and A.C. Sanderson. 1990. AND/OR Graph Representation of Assem­bly Plans. IEEE 
Trans. on Robotics and Automa­tion, 6(2): 188-199. Jacak, W. 1989. Strategies for Searching Collision-Free 
Manipulator Motions: Automata Theory Ap­proach. Robotics, 7: 129-138. Jacak, W. 1989. A Discrete Kinematic 
Model of Robot in the Cartesian Space. IEEE Trans. on Robotics and Automation,5(4): 435-446. Jacak, W., 
and J. W. Rozenblit. 1991. Automatic Simulation of a Robot Program for a Sequential Manufacturing Process, 
Robotics (in print). Kusiak, A. 1990. Intelligent Manufacturing Systems. Prentice Hall. Lozano-Perez, 
T. 1989. Task-Level Planning of Pick­and-Place Robot Motions. IEEE Trans. on C om­puter 38(3): 21-29. 
Rozenblit, J. W., B,P. Zeigler. 1990. Knowledge-Based Simulation Design Methodology: A Flexi­ble Test 
Architecture Application. Transactions of The Society for Computer Simulation 7(3): 195­ 228. Sanderson, 
A. C., L.S. Homem De Mello, and H. Zhang. 1990. Assembly Sequence Planning. AI Magazine, 11(1), Spring. 
Shin, K., N. McKay. 1986. A Dynamic Programming Approach to Trajectory Planning of Robotic Ma­nipulators. 
IEEE Trans. on Automatic Control, 31(6): 491-500. Zeigler, B.P. 1984. Multifaceted Modelling and Dis­crete 
Event Simulation, Academic Press. Zeigler, B.P. 1990. Object-Oriented Simulation with Hierarchical, Modular 
Models, Academic Press. AUTHOR BIOGRAPHIES MARCO CHIEROTTI is a Graduate Student of Electrical and Computer 
Engineering at The Univer­ sity of Arizona, Tucson. He received the M.S. de­ gree in Mechanical Engineering 
from the University of Geneva, Italy, in 1985. His principal interests focus on modeling and computer 
simulation, knowledge­ based system design, and artificial intelligence. JERZY W. ROZENBLIT is an Assistant 
Profes­sor of Electrical and Computer Engineering at The University of Arizona, Tucson. He received the 
Ph.D. and M.S. degrees in Computer Science from Wayne State University, Detroit, in 1985 and 1983, respec­tively, 
and the M.S. degree in Control Engineering from the Technical University of Wroclaw, Poland, in 1980. 
He specializes in modeling and computer simu­lation, knowledge-based system design, and artificial intelligence. 
His principal research activities focus on the development of expert, computer-aided environ­ments for 
engineering design support. WIT OLD JACAK is currently Professor of Sys­tems Science at Johannes Kepler 
University in Linz, Austria. He received the Ph.D. degree in control and system engineering from the 
Institute of Techical Cy­bernetics, Technical University of Wroclaw, in 1977, and the M .S .E.E. degree 
in electronics from the Tech­nical University of Wroclaw, Poland, in 1973. His research interests include 
artificial intelligence and robotics, CAD/CAM systems, modeling, simulation, and system theory applications 
to robot motion plan­ning.  
			