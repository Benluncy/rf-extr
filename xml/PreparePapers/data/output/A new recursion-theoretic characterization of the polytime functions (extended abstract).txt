
 A New Recursion-Theoretic Characterization of the Polytime Functions. (Extended Abstract) Stephen Bellantoni 
and Stephen Cook Department of Computer Science, University of Toronto Abstract for several theories 
of arithmetic ([C], [B], [CU]) which formalize aspects of polytime We give a recursion-theoretic characteriz~ 
reasoning. tion of FP which describes polynomial time Although it has been fruitful, an unsatis­computation 
independently of any exter­ fying aspect of Cobham s characterization nally imposed resource bounds. 
In partic­ arises in the recursion on binary notation. ular, this syntactic characterization avoids The 
recursion operator is a powerful one the explicit size bounds on recursion (and which, however, can only 
be applied when the initial function 21SI IYI)of Cobham. an explicit size bound is satisfied by the resulting 
function. Additionally, an initial function 21CI-IYIis needed solely to provide 1 Introduction a large 
enough bound for making recursive definitions. Cobham [Cob] characterized the polytime Leivant s recent 
elegant characterization of functions as the least class of functions polynomial time [L] suggests that 
one might which includes certain initial functions and be able to dispense with these features which 
is closed under composition and controlling the growth rat e of functions. bounded recursion on notation. 
His char-Leivant proves that a function is polytime acterization has yielded a number of appli­iff it 
can be proved convergent in the logical cations; in particular it serves as the basis system L2(Q F+ 
) using the function s recur­ sion equations and a subjective principle. Permission to copy without fee 
all or part of this material is granted provided that the copies are not made or distributed for Here 
L2(QF+ ) is second order logic with direct commercial advantage, the ACM copyright notice and the comprehension 
(i.e. definability y of sets) for title of the publication and its date appear, and notice is given that 
cop+mw k by permission of the Association for Computirw positive quantifier-free fomulas. The system 
Machinery. To copy otherwise, or to republish, requires a faa and/or specific permission. has the string 
successor functions built in, 24th ANNUAL ACM STOC -5/92/VICTORIA, B. C., CANADA e 1992 ACM 0.89791 -512-7 
/92/0004/0283 ...$1 .50 but nothing like 21Zl l~l; and bounded recur­sion plays no role. Inspired by 
Leivant s result and its proof, we present here a direct recursion-theoretic characterization of the 
polytime functions. The result is independent of Leivant s pa­per [L]. Our closure operations are essen­tially 
composition and recursion on nota­tion, syntactically restricted in ways which have no direct connection 
to bounds on growth rates. All the initial functions are small, their outputs being no longer than the 
outputs of the string successors, Our results raise the question of how the type of recursion introduced 
here, safe re­cursion , can be used to define other com­plexity classes in a resource free man­ner. More 
generally we may ask whether Leivant s program, using impredicativity to characterize computational complexity, 
can be carried out directly in a functional set­ting absent of logic and provability. Immerman [IJ and 
others have characterized polytime relations in a way which is also re­source free in the sense that 
there are no explicit bounds in the defining expressions. However, these are characterizations of rela­tions 
rather than functions; for example the exponential relation 13(y, z) S (y = 2 ) is polytime. We approach 
a different problem, that of controlling the growth rate of func­tions without introducing explicit bounds. 
As a motivating example, consider the def­inition of the @ function (similar to the smash function of 
Buss and others) in [L]. The definition uses recursion on binary strings as follows: @(w, w) = @(w, @(w, 
v)) for s c {O, 1}, where @ (concatenation) has been defined by recursion on its first in­put, not its 
second. Leivant shows that con­vergence of the @ function is provable in L2(QF+). On the other hand, 
if we take the natural definition of the exponential func­tion, 2 X = 6(2Z, 2Z), we see that the recur­sive 
term 2X is substituted in the position which was used for recursively defining @. The exponential function 
is not provable in L2(Q1 +). This motivates the definition below of a class B of functions. In this class, 
one does not allow recursive terms to be substituted into a position which was used for an earlier definition 
by recursion. 2 The class B Each input to a function in II will be either a normal input or a safe input; 
we write the normal inputs to the left and separate them from the safe inputs using a semicolon: f(~~). 
We formulate the result using computa­tion on non-negative integers, but the same proof carries over 
to computation on bi­nary strings as in Leivant [L], replacing O with c. We write Iz I for the binary 
length Pogz(z + 1)1 of integer Z; and the terms predecessor , successor refer to binary notation. If 
3? is a vector of n integers we write ~for the vector Izll, ..., lccnl, and we write ~(5) for ~1(5),. 
... ~m(?iY). 1? is the smallest class of functions contain­ ing functions i-vi and closed under vii, 
... Vlll: i. (Constant) O (a zero-ary function). ii. (Projection) T; m.(x, . ..zn. zn+l. . . Zn+m) = 
Zj, for l~j~n+m. iii. (Successors) s~(; a) = 2a + i = ai, for i c {o, 1}. iv. (Mod 2) AI(; a) = amod2 
= low­order bit of a v. (Predecessor) p(; O) = O, p(; ai) = a.  vi. (Conditional) b ifamod2=0 C(; a, 
b,c) = c otherwise { vii. (Safe Notational Recursion) Define new function j by, for i c {O, 1}, f (o,% 
ii) = g(~ 6) f(yi, ~ z) = h~(y,~?i, f(z, qa)) for yi #O where hi and g are in B. viii. (Safe Composition) 
Define new func­tion f by f(~ ii) = h(~(~ ); ~(~ Zi)) where h, 7, and ~ are in Il. The polynomial time 
functions will be ex­actly those functions in B which have all normal inputs; i.e. no safe inputs. Functions 
in B can perform any (polytime) operation on their normal inputs, but can only apply a restricted set 
of operations to their safe inputs. In particular, the opera­tions allowed on safe inputs do not increase 
the length by more than an additive con­stant. Adding a function to B which oper­ates on safe inputs 
would in general be more powerful than adding the same function on normal inputs, because of the asymmetry 
of the composition scheme. To understand Safe Composition, suppose f(~ T) is given by a single expression 
in 37 and T. Then f (~ ~) can be defined by Safe Composition (and Projection) from the function symbols 
occurring in the ex­pression, provided that each sub-expression g(~ ~ has no Vi appearing in the terms 
Z. Observe that in defining a function by re­cursion, the recursive value f (z, ~ ~) is sub­stituted 
into a safe postion rather than a normal position of h. The safe composi­tion scheme ensures that this 
recursive value will stay in a safe position and will not be copied into a normal position. Intuitively, 
this means that the depth of sub-recursions which hi performs on z or Z cannot depend on the value being 
recursively computed. This mechanism seems to have the effect of preventing the uncontrolled impredicativity 
which Leivant discussed as the cause of a blowup in complexity. In concrete terms, we can think of safe 
po­sitions as input positions where it is safe to substitute a large value without greatly in­creasing 
the output size of the function. In contrast, the output size may increase poly­nomially in the size 
of the normal inputs. This intuition is made precise in later work [Be]. In philosophical terms, we can 
think of safe positions as input positions where it is safe to substitute an impredicatively de­fined 
value. Our notion of Safe Notational Recursion is comparable to, but differs from, Leivant s tiered recurrence 
[L2] 3 B contains PTIME To prove that every polytime function is in l?, we use the Cobham characterization 
[Cob] of P as the least class of functions containing the Constant, Projection, Suc­cessor functions, 
and the smash function 21CI IYI; and closed under ordinary composi­ tion h(7j(?F)) and the following 
rule: Definition 3.1 (Bounded Recursion on Notation) If hi, g, and j are in the class then so is ~, where 
f(o,z) = g(z) f(Yi q = h;(y,3Y, f(y, ?i7)) for gi # O (i c {O, l}), provided that j(y,?i7) S j(y,~) 
for all y, T. See Rose [R] for a proof that the Cobham functions are all the polynomial time func­tions, 
or see [T] for the same result for­mulated over binary strings. In particu­lar, for each Cobham function 
~ there is a length-bounding monotone polynomial b~ such that \f (Z)l < b~(~). To prove that 13 contains 
every PTIME function f, we first show how to compute the value of ~(?t) assuming that we already have 
a value w which is big enough. Intu­itively speaking, w has to have a length at least as great as the 
maximum depth of re­cursion used in computing ~(z). Lemma 3.2 Let f be any polytime func­ tion. There 
is a function f in B and a monotone polynomial pf such that f(ii) = f (w; ii) for all ii and all w with 
[wI z Pf (M) Proof. The proof is by induction on the length of the derivation of f as a function in 
the Cobham class. If f is a constant, pro­jection, or successor function then f is triv­ially defined 
using the Constant, Pro jection or Successor functions of B. In these cases, letpf =O. If f is defined 
by composition, f(Z) = h(~(?l?)), then define f by f (w; Z) = h (w; Y(w; Z?)). Since the functions ~ 
are in the Cobham class, they have length­bounding polynomials ~. Define pf such that  w(m)=Z@Fl)) +Efbj(m. 
3 The induction hypothesis can be applied to h and T using the facts implied by lwl z pj(lzl). The desired 
properties of f and pj then follow easily. The next case is when f is 21ZI IYI. This function has a definition 
using recursion on not ation with length-bounding polynomials b~(l~l, Ivl) = 1x1 + ld and ~~(kcl, Id) 
= Iz] . Iyl + 1. Namely: g(O, y) = y; g(zi, y) = g(z, y)O; f(O, y) = 1; and f(zi, y) = g(v, f(~, Y)) 
(where Zi # 0). In this CaSeone can apply the same method as for bounded recursion on notation. The difficult 
case is when f (y, 5) is con­structed by bounded recursion on notation as in the Definition above. Then 
g , h~ and hi in B are given by the induction hypothe­sis. Of course we cannot define f (w; y, 3?)by 
recursion on y, since y is not in normal po­sition. Instead we introduce a parameter z, and use recursion 
on z to simulate recursion on y. The recursion parameter z is initial­ized to w, and the part of the 
recursion on Izl from Iwl down to Iwl Iyl corresponds to recursion on y. To define f first define, using 
Safe Nota­tional Recursion and Safe Composition, the functions shown in Figure 1 on the next page. These 
are explained as follows. The function F (a; b) takes a predecessors of h. The function Y(,z, w; y) produces 
an initial segment of y, namely y with IWI IZI right­most (low-order) bits deleted. As z varies in length 
from Iwl down to Iwl -jyl, the out­put of Y varies from y down to the trivial initial segment, O. Recursion 
depths with I.zI below [wI [yl will be irrelevant. The function 1(2, w; y) satisfies Y(zj, w; y) = S1(Z,WJV)Y(Z, 
w; y), for zj # O. At each step of the recursion on z we use the function to look into y and see which 
step function hl should be applied. The function V(Z; a) computes the logical OR of the rightmost Izl 
bits of a. To continue formally, define the functions shown in Figure 2 on the next page. Since f is 
in the Cobham class, there is a monotone polynomial bf such that if(Y>~)l < ~i(/Yl,m). Letting Ph = Pho 
+ Phl, define pf such that PdlYlm) = PdlYIJT/v(lYlm) +Pml) + IYI + 1. Fixing y and 5, let [wI > p~([y[,~). 
We prove below by induction on IuI that: for [wI Iyl ~ IuI < Iwl, ;(U, w; y,?F) = f(Y(u, w; y), ~)$ 
Since Y(w, w; y) = y, we have f (w; y, W) = f (y, F) as desired for the main induction of the lemma. 
Consider any u with IwI IY[ < IT-JI < Iwl. Since IwI -lyl > 1 there is z and j G {O, 1} such that u 
= .zj. Also note [zj[ = Izll and Y(zl, w;y) = Y(zj, w;y). Since Iwl > [Y(zl, w; y)[, the expression 
P(o;b) = b Y(,Z, w; y) = P(P (Z, W; ); y) P(ai; b) = p(; P(a; b)) 1(Z, w; ~) = M(; Y(zl, w; y)) P (a, 
b;) =P(a; b). V(O; a) = M(; a) V(xi; a) = C(; V(z; a), kf(; P(zi; a)), 1) Figurel: Preliminary Definitions 
k(w; i, a,li, c) = C(; i, 12(J-W;a,6, c), h~(w; a, 6, c)) 1(O, w; y,z) = o f(zj, w; y,z) = C?(; V(w; 
Y(zl, w; y)), g (w; z), L(W; 1(Z, w; y), Y(z, w; g), z, f(z, w; y,z)) f (w; g,~) = $(W, w; y,z). Figure 
2: Definitions for Recursion Simulation V(w; Y(zl, w; y)) is O if Y(zl, w; y) = O and This allows us 
to apply the main induction is 1 if Y(zl, w; y) + O. hypothesis for hi, First, if Iul = [zjl = Iwl Igl 
then h;(w; Y(.z, w; y),~, f(Z, W; y,@) Y(zl, w; y) = O. Using the definition of ~ = h:(w; Y(2, w; $/), 
z, f(Y(.Z, w; y), z)) and the main induction hypothesis on g, we = hi(Y(z, W; y),~, f(y(z, W; y), ~)). 
 immediately have ~(z.j, w; y, E) = ~(0, Z) = f(y(~j, w; v),~). The condition Iwl - IVI < l~jl < IWI 
im. plies y # Oand Y(zl, w;y) # O,so by theSecond, if lzjl > Iwl Iyl we can as­definition of ~ and the 
fact Y(zj, w; y) = sume .f(z, w; y,?F) = ~(Y(z, w; y), Z). Using S1(Z,WJY)Y(Z, w; y) we havemonotonicity 
of pf and phi, j(zj, w; y,q /w/ > pf([yl,~) = h ~(z,w;v)(w; Y(.Z, w; y),~, f(z, w; y,?F)) ~ Ph, (]y(z, 
w;dl,~, bt(ly(z> w;Y)i,~)) = ~Z(.JOi~)(y(%> i ?4)>51 ~(y(z, ; ?J),E)) 2 Phi(ly(z7 ; ?/)l!FT?If(y(z? 
; ?J)7z)l)o = f(Y(zj, w; y),z), as desired. ~ Theorem 3.3 Let f (37) be a polytime func­tion. Then f(~) 
is in B. Proof. Let pf and f be obtained using the preceding Lemma. We will construct a function b(~) 
in B such that lb(~ )1 ~ pf(~). Then setting ~(m) = ~ (b(m ); @ finishes the theorem. First define concatenation 
of k strings (in reverse order) using one safe position: 62(0;!/) =?/ @2(*i;?/) = s~(; @2(z; y)) for 
zi # O Next define the declining smash function using recursion in the safe position of (B2 as follows, 
#(o;) = 1 #(zi; ) = @2(z;#(z; )) The length of #z is 1 + IzI(IzI + 1)/2 = Q(]Z[2). Let a, c be such that 
(~j Izjl) i-c Z Pj(~) for all E. Composing # onto itself a con­stant number of times and then concatenat­ing 
a constant to the end gives a function bl(z; ) such that lbl(z; )1 ~ (Izl)c + c. Us­ing safe composition 
again gives @(~ ) = @k(xl . . .~&#38;l;~k) and b(~) = bl(@(~ ); ) having length at least pf(~) as desired. 
I 4 PTIME contains B To prove that all functions in 1? are poly­time, we first derive a bound on the 
length of the computed value. Then it is easy to observe that the Safe Notational Recursion operator 
preserves polytime if the output is length-bounded. Lemma 4.1 Let f be a function in B. There is a monotone 
polynomial qf such that lf(~ T)l < qf (~)+ ma% Iy;l jor all Z, T Proof. The proof is by induction on 
the derivation of ~ in 1?. Safe Composi­tion results in composition and addition of the bounding polynomials. 
Safe Not a­tional Recursion results in the polynomial !zI -q~(lz!,~) + ffg(~) where z is the recur­sion 
variable. Details will appear in [BC]. m Theorem 4.2 Let f(~ ~) be a function in B. Then f (Z, V) is 
polytime. Proof. The initial functions are all clearly computable in polynomial time. For Safe Composition 
observe that the composition of two polynomial time functions is a poly­nomial time function. With regard 
to Safe Notational Recursion, it is well known that a recursion on nota­tion can be executed in polynomial 
time if the result of the recursion is polynomially length-bounded and the step and base func­tions are 
polytime. In our case, the length­bound follows from the preceding lemma. Alternatively we can observe 
that the bounding polynomials of the Lemma are computable in Cobham s class and that therefore every 
instance of Safe Notational Recursion is an occurrence of Bounded Re­cursion on Notation; this gives 
a reduction of derivations in 11 to derivations in the Cob­ham class. I Further comments The presentation 
in this paper has used a single sort of variable and has classified in­put positions as safe or normal. 
A similar class of functions can be defined using two sorts of variables, ascribing safe or normal sort 
to both the inputs and outputs. Safe Composition is replaced by ordinary compo­sition respecting the 
sorts of the inputs and outputs. The initial functions i-iv take on safe type outputs, and Recursion 
in Safe Po­sition results in a safe-valued function. One further adds the following Raising rule: if 
function ~(~) of all normal inputs is in the class with safe type out put, then the func­tion ~ is in 
the class with normal type out­put defined by ~(~)= ~(~). In such a two-sorted presentation we could 
replace the Predecessor, Mod2, and Con­ditional functions with the single function iV(Z; a) = a mod 21ZI. 
This gives a class BC which (even ignoring output sorts) differs from B; for example p(; a) is not in 
BC. But (again ignoring output sorts) X and 1? are identicaJ on the subset consisting of functions with 
all normal inputs. Hence BC is as good as B in characterizing the poly­nomial time functions. The proof 
for 13C is simpler than the proof for B; however, this is somewhat offset by the fact that N is not a 
constant-time operation. If we take as a base the class BC and de­velop a higher-type class along the 
lines used for the definition of PVW terms in [CU], we obtain a class apparently equal to the Basic Feasible 
FunctionaJs discussed in [CK]. Now if we add the initial function ~a. Ial of type (safe ~ normal), the 
resulting class is still polytime on its type 1 section yet is able to compute the well-quasi-ordering 
functional which Cook [C2] demonstrated is not Basic Feasible. See [S]. 6 Directions for research Philosophically 
we think of normzd values as those which are known in totality, and safe values as those which are impredica­tive 
in the sense that their definition refers to members of the set N of integers other than those which 
are immediately known. As Nelson [N] points out and Leivant [L] emphasises, definitions of N are impredica­tive 
because they are justified by inductive means, which presuppose an understanding of N. In other words, 
the validity of defining a function by recursion requires an impred­icatively defined concept, namely 
N. The current work projects the idea of an im­predicatively defined set down onto specific members of 
the set relative to the fact that we have cert tin values given to us in their totality, references 
to other members of N are references to impredicative val­ues . They are values which you only know exist 
because you assume the existence of an impredicativly defined set, N. We control this impredicativity 
by isolating such values in safe input positions, and performing only operations on them which are constant-time 
with respect to their size. Thus we have developed a functional analogue of highly predicative reasoning. 
 From this viewpoint, it is interesting to in­vestigate the complexity classes obtained with safe recursion 
by allowing various amounts of information to cross over from the safe inputs to the normal inputs; or, 
by allowing various amounts of computation to be performed on the safe inputs. This project could be 
stated technically as fol­lows: explain, for various syntactically de­fined and highly restricted function 
classes 1?, the effect of adding to 1? the composition scheme ~(?, V) = h(?(~ U); i!(~ ~)) where r G 
1?. As mentioned above, the function T(; y) = [yl is permissible without exceeding polytime. It appears 
that the methods of this pa­per can be used to remove the size bounds from Clote s sequential characterizations 
([Cl], [Al]) of ACk and iVC ~, giving resource-independent characterizations of these classes. An alternative 
approach to characterizing NC using the methods of this paper is given by Bloch [Bl]. The class of logspace-decidable 
problems and the class of functions computable in polynomial time using Z; oracles have also been given 
similar characterizations ([Be] ), It seems likely that linear space and PSPACE can be charac­terized 
by using safe recursion to eliminate the bounds in [Ri], It would be interesting to characterize the 
Kalmar elementary func­tions in a similar resource-free manner. The results of this paper can be used 
to give a new proof of Leivant s result [L] that func­tions provable in L2(QF +) include all the polytime 
functions. The results slso bear on the system PV ([C], [CU]), an equational theory with a func­tion 
symbol for each polytime function to­gether with defining equations for the func­tion based on Cobham 
s characterization. When ~ is introduced by bounded recur­sion on notation, it is necessary to prove 
in PV that the bounding inequality is satis­fied. This requirement contributes signifi­cantly to the 
complication of developing the theory in PV. An alternative development of PV, based on the theorem here 
rather than Cobham s theorem, should be simpler. Finally, a category theory translation of the results 
in this paper has been given by Otto [0]. cd., Proc. of the 1964 International Congress for Logic, Methodology, 
and the Philosophy of Science, p. 2430. North Holland, Amsterdam, 1964.  Acknowledgments [c] S. Cook, 
Feasibly constructive proofs and the propositional calculus . In Proc. 7th In an earlier draft of this 
paper we used the STOC (1975). functions D(a; b) = P(b, a) and E(a; b) = [C2]S. Cook, Computability and 
complexity P(b, P(b, a)) as initial functions. We are of higher type functions.) In Proc. MSRI Workshop 
on Logic from Computer Sci­ grateful to Sam Buss for pointing out to us ence, Springer Verlag 1990. 
 that these two can be eliminated in favor of [CK] S. Cook and B. Kapron, Characterizations the single 
predecessor function, p. We would of the Basic Feasible Functional of Finite like to thank Toniann Pitassi 
for her helpful Type , in Feasible Mathematics, S. R. Buss and P. J. Scott eds., Birkhauser, 1990 comments. 
We would like to thank Daniel [cl] P. Clote, Sequential, machine- Leivant for his comments on an earlier 
draft independent characterizations of the par­ of this paper. allel complexity classes AlogTIME, ACk, 
NCk and NC . in MSI Workshop on Fea­sible Mathematics, Birkhauser, 1989. References [Cu] S. Cook and 
A. Urquhart, Functional in­terpretations of feasibly constructive arith­ [Al] B. Allen, Arithmetizing 
Uniform NC , metic , Technical Report 210/88, Depart-Annals of Pure and Applied Logic, v. 53, ment of 
Computer Science, University of 1991, North Holland. Toronto. Extended abstract appears in Proc. 2?lst 
STOC (1989). [Be] S. Bellantoni, Using Safe Recursion to De­lineate Computational Complexity , PhD [1] 
N. Immerman, Descriptive and Comput> Thesis, University of Toronto, 1992 (to ap-tional Complexity , AMS 
Short Course in pear). Complexity, 1988. [BC] S. Bellantoni and S. Cook, A New [L] D. Leivant, A foundational 
delineation Recursion-Theoretic Characterization of of computational feasibility y , Sizth Annual the 
Polytime Functions , to appear in com-IEEE Symposium on Logic in Computer putational complexity. Science, 
1991. [Bl] S. Bloch, Functional Characterizations of [L2]D.Leivant, Subrecursion and lambda rep-Uniform 
Log-depth and Polylog-depth Cir-resentation over free algebraa (Preliminary cuit Families , manuscript, 
Dept. Math-summary) , in Feasible Mathematics, S. ematics, University of California at San Buss and P. 
Scott, eds., Birkhauser 1990. Diego, 1992. [0] J. Otto, Categorical Characterization of [B] S. Buss, 
Bounded Arithmetic , Ph.D. Ptime I , manuscript, Dept. Mathematics, Dissertation, Princeton University, 
1985; McGill University, 1991. reprinted Bibliopolis, Naples, 1986. [R]H. E. Rose, Subrecursion: functions 
and hi­ [Cob] A. Cobham, The intrinsic computational erarchies, Oxford Logic Guides 9, Claren­difficulty 
of functions . In Y. Bar-Hillel don Press, Oxford, 1984. [Ri] Ritchie, Classes of Predictably Com­putable 
Functions , Transactions of the American Mathematical Society, v. 106, 1963. [S] A. Seth, There is no 
Recursive Axiomati­zation for Feasible Functional of Type 2 in Proceedings of Logic in Computer ScZ­ence, 
1992 (to appear). [T] G. J. Troulakis, Computability, Reston, 1984.  
			