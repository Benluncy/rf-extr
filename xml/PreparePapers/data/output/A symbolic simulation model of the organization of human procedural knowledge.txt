
 A Symbolic Simulation Model of the Organization of Human Procedural Knowledge Kim 1 rans Copenhagen 
Business School Abstract This paper shows the possibility of using partial evalua­tion as a conceptual 
framework for symbolic procedural knowledge learning. It desmibes how procedural know­ledge can be seen 
as moving from one level to another by means of compilation from a conscious to a subcons­cious level. 
This process is for convenience partly ex­pressed in concepts from partial evaluation and it is shown 
that compilation of procedural knowledge can be seen as a selforganizing system -a selfapplicable partial 
evaluator. The result is a symbolic model for learning that has the same qualiik.ations as traditional 
connec­tionist networks, but is based purely on the symbolic parad~ for information processing. Introduction 
The topic of this paper is to evolve a model of the tran­sformation of human procedural knowledge from 
control­led conscious execution to automatic subconscious execu­tion. This problem is very central in 
cognitive science research [14], because it opens the possibtity of practical use of automatic machine 
learning. As a referential ex­ample througout this paper is used the learning of SkiIled muscle control 
as done by newborn and very young hu­man infants. This example is extensively used to illustrate the 
apptied models and concepts in an informal way, and thus to provide a deeper, more intuitive understanding 
of the topic. The model being illustrated through various concepts and methods taken from infant learning 
does not mean that the model developed in this paper gives a scientifically satisfactory theory for the 
development of motoric behaviour in infants. The most elaborate theory of procedural knowledge and its 
compilation is given in [3], whkh defines the tran­sformation from conscious to subconscious knowledge 
in ~-mpr-3Ndw*dtiD9uuk8-md~ti lbOol@umtimdBOr~braua ~ ~~= e-dhtidti~dbti~pdwb#!lUtial#@slJJ~Or*~ a0p30tk=karmMt9qdn6*h-dhr 
br~~. qndkp-i-b=. To xw s42~UM e 1993ACM O-S9791-sn~1311 four steps in his Am theory. This ACI * theory 
is mainly desaibhg what is happenin~ not how or why at the internal computational kveL In this way the 
theq gives an external and purely objective model of the topi~ and my intention in this paper is to give 
an internal ­ maybe subjective -model of the topic. The current research in machine learning and related 
fields is primarily of empirical nature or has practical goals [24]. A lot of fundamental observations 
of how hu­mans do procedural learning are made, and robots which are able to learn to do simple or prespecifkl 
tasks are constructed. The main purpose of the paper is thus to construct a basic theory for the slowly 
process of lear­ning procedural knowledge that will be suitable to run on a computer. The demand that 
an implementation of the model must be able to run on a computer is obviow as the elemen­tary units of 
the model both before and ~er the compi­lation should be seen as sequences of discrete units [lS j, that 
make state transitions. This means that they have some causal conseque~ i. e. can be objectively veri6­e~ 
and still be as close as possiile to what is supported by the empirical eviden~ taken from current psychoh­giczd 
models of procedural Ieaming [6]. Relevant Partial Evaluation Concepts The partial evaluation concepts 
are taken from [9]. They define a partial evaluator as a program that changes a given sequence of statements 
to a function of its unk­nown paramete~ given by another sequence of state­ments. This of course means 
that the sequence of state­ments in question must constitute some kind of program that can be transformed. 
Thii transformation is in fact an optimiition of the program it is applied to, as the partiaI evaluation 
trans­formation elimiies Variatd+ and thus computation as the relevant values are computed at compile 
time. The optimization criterion impliatly applied is the order of computational complexity. Partial 
evaluation originates from compiler theory, where it is mainly applied for automatic generation of compilers 
and compiler compi­lers for functional programing languages [4]. These are the deftitions of the concepts 
used in the rest of this papec s the sequence to be interpreted -the initial starting point F the partial 
evaluator -the learning method T the target language -the final result R = pe(S) the partially evaluated 
program -the compi­lation process int the interpreter for S programs -the under­lying processor, and 
s Lnt . T H which denotes that in! is a member of the set of inter­preters from source language S to 
target language T. The residual program R is a speaalization of S to a gkn set of pararnete~ which are 
the remaining vari­ables. Partial evaluation and compilation are just special cases of program transformations 
for program optirni zing and tranalatiorL where the optimization criterion for the tlrst is the computational 
complexity given as the degree of freedom, in th~ ease the number of possiile program braneh~ and for 
the seeond is the target ma­chine instruction set. Procedural Knowledge The traditional division of luunan 
knowledge falls in two main grou~ declarative and procedur~ and according to [3] this division must be 
total. Althou~ if the division is not to@ it witl still be Possl%le to identi@ elements from the two 
groups in a tiled representation contai­ning both kinds of knowledge. This relates closely to the model 
of the human motoric system, which will be dese­ribed in the next section. Declarative knowledge is descriptive, 
and shows the categorical and semantic relations between the dis­crete elementary units of the model. 
The organiza­tion used in computational models is typically net­works [20] or frames [10], and it usually 
has a hi­erarchical structure. Procedural knowledge is prescriptive, and shows how actions (procedural 
elements) are represented (causalhy), are done (executed), and what consequ­ ences (results) they have. 
The organization used in computational modets is typically sequences [12] or scripts [19], which may 
have a hierarchical struc­ ture. Procedural knowledge is built upon the most primitive organization of 
human knowledge, the senso-motoric­intelligence (smi) [13], which is the fwst of the four sta­ges scnso-motori~ 
intuitive, concrete and abstraq in the human intelleetua.1 development. The elements at this senso-motoric 
stage are the basic elements of musc­le control. From this starting point, it is possible to ex­press 
the constmdon and organization of procedural knowledge bykaming. karning isinfact theonlythii needeg 
as nothing else can be changed by any natural means. The smi prinaple, or its functional aim, is to learn 
sim­ple muscle contro~ and relate this to the right perceptual structures -to generate simple structures 
of the form: The f~t smi structures are learned by trial and error and it is the m(otoric) part that 
is tested, and then slow­ly bound (accommodated) to the s(ense) part [12]. The starting point of th~ 
kind of learning is the primitive muscle stretch reflex [2]. In this way simple systems of behaviour 
are built. For infants this relates to simple systems for limb control, grabbii of Obje% slowly evolving 
into walking and other even more complex action systems. According to [13] it is not possible just to 
make m structures by will, they ha= to satis$ the follo­wing prinaple: A learned structure is always 
built upon another already existing structure, and with the stretch reflex as a star­ting poin4 the learned 
structures are built upon it as hierachkd superstructures on the already known struc­tur% according to 
the following rules (i) = primitive stretch reflex @) : = sequence of (i) s (iii) m = sequence of (ii) 
s The mksii sense parts is not important in this context of procedural learning since the s-m relation 
is not procedur~ but acts as a bridge between the two kinds of knowledge, where s is declarative and 
m is proce­dural. The primitves + m relation is a Stimulus-Respon­ce relation [lSj, wheres ~ S and m 
. R. From the above rules for construction of m structures it is eiear that every complex action can 
be dissolved in a sequence of time ordered primitive stretch reflexes. Formulated in the concepts of 
partial evaluatio~ this sequence of pri­ 483  mitve stretch reflexes is the sequence S to be interpreted 
by the target machine. Procedural knowledge can be scaled along a branching or complexity axis, where 
the two extremes are total conscious control with a branch tier each elemen~ and total automatic control 
with no branches at all. The process that transforms conscious procedural know­ledge to subconscious 
procedural knowkdge,thus redu­cing the number of branches is called compilation of procedural knowkdge 
[3], and it will be defined lat~, but technically this is the pe(S) process of transformation as defined 
above. In the case of infant lee high complexity means that the elements in an actual sequence of muscle 
opera­tions are unrelated. It could be different muscks in the hand-eye Coordination and thus the sequencing 
of the elements used has to be deaded one by one on the fly, eventually using something like means-ends 
analysis [11]. For low compkxity sequences the number of decisions are heavily reduced, as the sequence 
is nearly without any branehea. This process of compilation divides procdural know­kdge into three natural 
groups: pure conscious elemcn~ pure subconscious elemen~ and the intermediate step with knowledge that 
is beii compiled. The elements in the last group are on their way down to the subconscious leve~ and 
new procedural knowledge elements are star­ting at the conscious levd. The Human Motoric System The 
most simple model of the human information pro­cessing system is a simple read-eval-write loop [1]. In 
this interpretation loop the state of the external world changes for every cycle, when something happens 
in the outer world. This is called an eveng it is registrated by the inputsystem Z which sends this information 
and the relevant data to lBB, the evaluator, that can be seen as an Intentional Black Box [q. Here the 
current state and the new data are used to determine, i. e. choose, an action, which is sent to the output 
system O. Expressed in partial evalua­tion concep@ the output system is the interpreter btt, where the 
aciion is executed. The execution of an aetio is in itself an event, as it changes the state in the exte] 
nal world, and thus is registrated by the input system a a new event, together with any other events 
happened. To identify the spedlc procedural parts of this system, i it necessary to develop the model 
a bk further, and ac cording to [23] a corresponding model for the hum~ information interpreter can be 
viewed as  World + {-}ml t c In this model the IBB part is separated into two pa.I@ where the decision 
control part C decides what action to do ne~ and the output control part F makes corrections to the action. 
This is done in case the chosen action does not fit dmedy into the current state of the output sy­stem, 
in order to obtain the desired goal. This means that the control part is independent of the actual state 
of the muscl% as the output control part transforms the wanted sequence to an actual sequence. For infants 
this means that it is the same sequenee of elements that controls grabbii of obje@s independent of the 
current limb positions. In this way the two systems for control and correction have to develop and learn 
separately, including learning to integrate their actions. The input system Z receives (reads) data from 
the outer world, and when it has identifkd these, the system senda the relevant parts of the identifmd 
data to F and C. The controller C decides whether the plan in progress shall continue (feedback check) 
or whether it is better to choose another strategy. Whenever this is the msc+ the eontrolkr wiU initiate 
the first action in this new plan. The result is in some way always the same an action to be interpreted 
and exeeuted by the output system. So far, the new model is fairly equal to the former read­eval-write 
interpretation loop. The new part in the model is the output control function F, which is an adaptive 
controller or transformer that can modify the current aetio% such that it will fi to the current state 
of the target output system. In the ease of movement control in infants this corresponds to mody­fying 
the action or action sequence to be executed m order to make it fit to the actual positions of the target 
limbs. Together C and F ean be modelkd as a CMAC (Cerebelkr Model Arithmetic Computer) system [2] for 
the state transition 1 s29 from an input state ~ to an output state Q where the underlining of a symbol 
signiiles that it is a vector. Vec­tors are used to indicate that the model is based on neuron systems 
where each element in the vector signi­fies one neuron. According to the CMAC theory, this transition 
can be seen as a control function H from an input vector 1 to an output vector Q that is modifkd by a 
correction vector ~ Q= H@+E to make H~ fit to the current state of the output sy­stem. This means that 
the interpreter has to interpret the sum of the primary control function H and the cor­rection vector 
E as the actual action to be exeeute~ and in this way integrate the two elements. The working cycle of 
the motoric system starts with a command C which is sent to the output system O as a veetor G. The expected 
result of this execution is then compared to the state of the output system, and the difference between 
those is used as the correction vector ~. As a result of@ the interpreter in the output sy­stem is receiving 
the modified vector L=C+E and executes it to get the wanted result. The actual ac­tion is G but to get 
the wanted resuig it has to be modi­ fed with ~ in order to adapt it to the present state of the output 
system. This corresponds to the adaption of limb movement by adjusting to the current position of the 
lim~ like it is done in the grabbing of obje~ as this action sequence is independent of the current load 
stress and position of the limbs affected [8]. The CMAC system is initialized by the smi trial and error 
method mentioned earlier. This initialization is uncontroUeg as it will happen automatically in all ani­mals 
with a cerebellum [2]. The cerebeUum is the part of the central nervous system where the neural system 
for automatic movement correction control is situated [23]. Compilation of Procedural Knowledge Procedural 
knowledge has a hierarchical structure. This is due to the above deaeriid pMeiples for the construc­tion 
of learned structures as sequences, built upon other already knowm structures iduding the set of primitives. 
procedural knowledge is executed on the CMAC system, whkh acts as the virtual hardware [22] of the underlying 
neuronal system for muscle contro~ as the CMAC sy­stem transforms the control action into the actual 
action that fits both the actual goal and the present state of the target. 485 Ths section on compilation 
is about the organization and optimization of the procedural knowledge base. The optimization criterion 
used is to reduce the number of branches. This is due to the limited capacity of the hu­man short time 
memory, as reduced branching complexi­ty will reduce the load [21]. It is done on two different levcts, 
in the F part for hardware or nonsymbolic op timization, and in the C part for software or symbolic optimization 
of the stored H functions. The hardware optimization can best be deserii in terms of connectionism [18] 
as neural networks of the Hopfield type [16] that automatically settles on an equl.i­brium. This hardwareoptimiition 
of the CIUACsystem is well deserii in [2]. The software optimiion can be defined in three steps [3], 
where each step has its equivalence in the previously defined grouping of procedural knowledge: Planning 
construction of a new sequence of actions. Error correcting optimizing the sequence due to the obtained 
results. Binding the final construction of a new com­piled element. where planning is conseioq error 
correction is the mixed eompiIing pr~ and the binding results in a new pure subconscious element to be 
used for automatic execution and as a stable build~ element for the con­struction of new plans. The CMAC 
system ia a vector to vector machine, where the instruction set is the primitive stretch reflexes and 
the set of already compiled H functions stored in C. In this context, planning is the construction of 
a function ~n, where HPh&#38;fl) = ~ This gives two PodNiti% fust that Hpk. is a primitive or compiled 
function. In this case there is no need for plann&#38; just take the stored solution and execute it. 
l%e other possiiity, in case there is no stored function available, is that one has to be constructed 
[2Sl as a sequence of primkive and compiled functions stored in ~ in order to spee@ the relevant vector 
transformations from start to g~ such that I+&#38;+...+&#38;= -uan Qgoa, which viewed as functions gives 
Hn(Hwl( ... H1~fi) ..-))) + AI where every fimction Hi, 1 s i ( n are built in the same way as sequences 
of functions with vector elemen~ and according to the definition of the H functions, as sequen­ces of 
m s. This continues all the way down to the primitive reflexes through the set of compiled functions. 
The H lan func­tion constructed in this way is only a hyped etlcal or preliminary plan for how to get 
to the wanted goal. The process of planning is only defined as an abstract pro­ces as it is not clear 
in which way it is performed by the human brain. In the case with human infants, this means that a new 
complex sequence of movements -like walking in the beginning is executed as a sequence of unrelated but 
sequenced simpler action systems. The sequence thus constructed by planning may not be the right one, 
and it is obvious that it has to be modified in the course of executing it i. e. it has to be adapted 
to eventual changes or even faults due to wrong or insuffl­cient plaming, This last case of wrong or 
insuffkient planning means that the domain of application cannot be characterized as weU-known. It is 
therefore reasonable to view the functions Hi as variable% until experience has shown which timctions 
in fact are the right ones to be used in the present case. When the constructed plan ~ is execute~ each 
sub­sequence Hi included in the COOStrUCtdsequence ~ &#38; adjusted according to the result of the execution 
of the previous Hi.l functio% in order to make the expected result of its execution reach or Mfifl the 
corresponding subgd, this can be defined to be anything that is in­cluded in the domain of the next element 
Hi+l. If an element of the constructed plan is %+%+1 and the obtained result is H # Hi+l then the next 
step shall be (@i+l -H )+ Hi+J or H where H is the fit element of an entire new pk constructed by replanning 
the rest of the previously used plan. This is the case where some sequence is aborted due to some unforeseen 
obstacle. This particular prm blem rises if you are trying to write with your left hand which will cause 
strange cases of mirrored letters until the right sequence of the new movements is correctly learned. 
It is not possiile to directly reuse the existing plans as they can be accustomed to domain specitlc 
arcumstances that cannot be generaliid. This leads us to the second step in the compilation sequ­ence, 
which is the step that changes the domains for each simpler function Hi included in ~n. This is done 
by slowly letting the plan transform into a form with no variables as a pure vector transformation functio~ 
as ex­perience will show which functions do the job well. The branching complexity is in th~ way reduced 
by substitu­ting faulty elements with better ones. These new ele­ments will have a more convenient scope, 
i. e. applying better and thus producing fewer cases of replaming. The number of different possibilities 
for substitution at each branching point is a metric for the branching com­plexity, and like in the case 
of infant movement control where a unique muscle sequence is the g~ there will be only one element that 
can satisfy the requesg as any element is tightly constrained by the previous and the foUowingelement 
in the sequence. AU this is not done in one step, but in successive stages when the plan is use4 and 
the process is called procedural learning [6]. What are the main reasons for trying to develop parts 
of the human motoric system, more specifkdly procedural Ie_ as partial evacuation? The fti reason is 
that the domain of procedural knowledge has the structure of a collection of separate functions [12], 
even though they are highly interconnected. The second reason is that pro­cedural learning can bee seen 
as the process of elirniia­ting variables for constant values. It is this slow setting of values in the 
H functions that is beii learned which is best descriid as a partial evaluation of the H functio% ad 
d the subthdons Hi included iD it. Every sequence of procedural functions H= HI>H= ..9 ~ can be seen 
as a program for the solution of the prm blem to get from some input state 1 given by the input domain 
of HI to some output state O given by the out­put domain of H,, thus producing a program for sohing the 
more general problem H : DOM(IQ + DOM(HJ When the function ~ has been used several tim~ some of the subfunctions 
Hi in ~ will bC transforrod into pure vector transformatio~ as they do not branch anymor~ and those elements 
will be substituted by their corresponding sequence of vector vaIues. In this way a number of functions 
are eliminated over time, and the original function ~ is simplifkd and optimimd as a function with fewer 
variables. The interpretation and proper treatment of each variable take a constant time [2]. The number 
of variables are thus decreas@ and the gained short-term memory resources will become available for the 
control of other not yet compiled H functions. Even the number of primitive calls is deerea­~ as two 
vector elements can be added if they are time independent, i. e. do not have to be executed in a certain 
order, so that one call can do the work of two, when they are both tidly compiled. Every time an H function 
under compilation is used it will contract its doma@ relative to the obtained resul~ and when this contraction 
settles on a final set of VSIUS the function is said to be cnmpiled. When a function Hi in a sequence 
H contracts its domaiq it will affect the WboIe sequence, as it will cause ~tractions in the de mains 
Of k Hi-l ~d the Hi+ ~ fuu&#38;~ ad maybe one of them will even have to be substituted by another more 
specialiizd fimction, This will then cause care­sponding contractions in the domains of the surrounding 
fUCtiOUS Hk2 , Hi ~d Hi +2, ad the contracting process continues until H again is settled in a stable 
structure, andif Hisapart ofanothcr function H,thiswiUbe effected too. This slow change of the domains 
of each function H, when called upon with new inpu~ is a partial evaluation of the program given by the 
sequences in H, according to the definition of partial evaluation in [9], as evwy time the interpreter 
evaluates a function it will be retur­ned with an eventually modMed domain, and in the end settle on 
final values. Itisonlythe Cpartof O=C+F that can be seen as an automatic partial evaluation sy­stem, 
as it is the only part that ean be compiled. When expressed purely in partial evaluation concepts you 
get the follow@ The sourcs language S = {HIVHidI c C} The pe program is the procedural Iearner (procedural 
knowkdge compiler). The pe program execution pe(S,I) + R optimii the programs written in S, as a sequence 
of H fimetion&#38; to get another sequena of H functions -the residual program R which is a sligthly 
mtiled and optimii S program. The target language of the compi­lation process is T=O The interpreter 
intisthe underlying CMAC system. If this model of procedural knowledge learning is incor­porated in as 
a partial evaluation of executed actions given by H functio~ in the previous model of human information 
prcxxssing the result will be + 4 where the partial evaluation system pe is placed as a small appendix 
to the control part C. This is the natural place for pe, as the data comes from C and from I tbrougb 
the C module tope, and the results goes back to c. The third step in the compilation sequence is the 
fd bind~ of a vector transformation to a symbo~ called the Hrml function. After thii step it is not possible 
to change the symbo~ it is now a rigid functiom or more precisely a sequence of vector transformation% 
and acts in the same way as primitive reflex. The Hfi~ function can now be executed in the unconsaous 
automatic way and be used as a stable building block when new H functions are constructed. This model 
of symbolic procedural knowledge learning illustrates the same morale as the popular safi that you have 
to learn to crawl before you can learn to wdk and so on. Thus there is no escape from the basic prin­ciples 
of procedural learning. Selforganization and Optimization The squired procedural knowkdgc of actions 
is built by the compilation of new functiorw made from old func­tions and primitives. From outside the 
C and F systeq itissecnas H~~(1) Q and when the C system itself collects and organizes the knowledge 
neeesary to solve the procedural learning problems by partial compil@ the procedural knowledge of the 
C system is a selforgarking system. This is a consequence of the automatic storing of any totally com­piled 
and intermediate sequence of H functions under compilation under a new symbol for future use. The C system 
is an automatically optimizing system. This is a consequence of the hierarchical structure of the knowledge 
base, where new knowledge is dcfmed as se­quences of old knowledge, generated as a (system relati­ 487 
 ve) optimal sequence of H functions for each specific si­tuation. The generated sequenec being relative 
optimal is due to the fact that it maybe impossible to specify mi­teria for optimal fit in advanec, and 
th~ aeeording to the available knowledge, the generated sequence is the best possible in thii situation 
The C and F systems as a comeeted unit is a selfopti­mizing system, as every action Oi = Ci + Fi contains 
two parts where the chosen command Ci is the optimal H fimetion when it is in eompikd form. Fi then modifies 
it to fit to the state of the output system and thus optimii it to the current state of the target sy­stem. 
Implementation The current implementation uses a unitary data represen­tation that contains both kinds 
of knowledge, mainly beeause it is not always obvious to which type a parti­cular pieee of knowledge 
belongs. The unitary &#38;ta re­presentation is useful as it supporta other kinds of plan­ning and the 
pomibi@ of a hierarchical identifkation of the present situation. f&#38; chosen data representation is 
a five place veetor element  z= (-G Supertype$ subtype&#38; antecedent eonaequenees) which together 
with the prinapks for procedural kar­ning (the inference rules) already giwm @ma an axiorni-Aon of the 
howkdge basG as every element except the predefine setof system primkka (the axioms) is defined upon 
lower level structures and primitives. The elements of the veetor ean be defined Suprtypes T antecedents 
+ name + amsequenccs t subtypes where supertypes and subtypes detlne the hierarehkal structure of the 
declarative knowIedge, and where an­ tedents and consequences define the position of the element nume 
in the sequencxs of procedural knowledge. In this formalism the pure declarative structure is ~= (name, 
supertype% su@pcS., ~ and the pure procedural struaure is ~= (n-a -, -, antecedents, consequences) 
but usually most elements are defined as mixed struc­tures and they can be used both as declarative knowled­ge 
in the identitleation phase -eventually a hierarchical one, as procedural knowledge in the planning phase 
­eventually using means-ends an-and finally in the execution phase for feedbaek cheek. The used under­score 
means that the place it occupies has no relevanee in the given context. Through the used data representation 
meta-knowkdge of an element is &#38;fined as the hierarchical knowledge above the element that caa be 
reaehed by the use of up ward inheritance [17]. This knowledge forms a tree with the actual element at 
the root and its supertypes as the fmt level of nod= and their supertypes as the next leve~ and so on 
until the top of the hierarchy is reached The tree will in fact be structured as a rhomb, as it starts 
and ends with one element and usuaIly contains intermdlate levels with one or more elements. In this 
data representation a plan is &#38;fined as a sequen­ee of elemen@ which contains a eomeeted chain of 
(name, ccmsequenee) ~ like ~1 = (proc-eleml, _, -, proc-elq proe-ekq ~ = (proc-deq -,-. proc-eleml, 
proc-elem~  ~ = (proc-elemy -, _, proc-eleq, proc-elem~ This is an ordered list of elements that descdwa 
how to get from the first element to the last element in the ~ and this eontriiutes a possible solution 
proe-eleml + proc-ekm2 + proc-ekm~ to the implieite given problem of getting from proc­eleml to proc-elem3 
as defined above. A totaIly compiled plan is one where the consequence of every element only cmsiats 
of a sole eompikd element or a primitive reflex. Conehsion The above delhed model of human procedural 
karning asthedual procesaofmnamdmn and@n&#38;atimhas been implemented [251 as the karning part of an 
adap tiveexpert system shell progmmmedin thepropmbg me s~~ [SJ.This implementation has further been used 
to study different processes of simple pro­cedural learning. The case on human infants used in this paper 
has been simulated with a random number generator to generate fluctuations in the set of uniform situations 
used, and the results show that procedural learning of sequenees of actions within this model will stabfli, 
and may thus aet as a stable system for even more learning. The eases have been generated as a wnnected 
network, where some specific configuration is chosen as the optimaJ one. The implemented model then has 
to learn by feedba~ using the partial evaluation compiler to compile and thus learn the right set of 
stimulus-response connections. This model may perhaps be generalized for higher or­ders of abstract or 
language based learning but it is still an open questio% even though [3] and [12] are eontieed that it 
is in fact the ease for humans. My claim will be more modest as the developed model might be useful in 
the investigation of human lee even though the model only tries to describe the simple ease of procedural 
learning at the sensi-motoric intelli­gence stage in the Piagetian [12], [1.3]four phase model of the 
development of human intelligence. To state a general eonelusio% the model defined in this paper has 
the advantages of the neural network model: it can elas@ and it is selforganizing. But more importan4 
it also has the advantages of the symbolic model, as the implemented model makes it possible to work 
with dis­eretc parts of knowledge, and the defined model ean learn new actions not previously inemporated 
in the original domain. This Iast poin4 is not obvious so it has to be elaborated a bit. The data used 
in the model are represented as Iis@ so the only thii you have to do if you want to incorporate new situations 
and aaions is to integrate the new knowledge in the existing knowledge. The only part of tbe system that 
has to be retrained are the parts con­cerning these new eonneetio~ as the other connections will keep 
their original values. Present address: DASY-HHK Rosen@ns AIM 31 DK-1970 Frb C  References [1] AbelsoP 
H. &#38; SUSSDSU G. J. &#38; thssm~ J: Struc­ture and Interpretation of Computer Program% MIT Pr+ Cambridge 
MA 1985 [2] Alb~ J. S: Br@ Behavior, and Roboti~ BYTE Publieatio% Peterborough NH 1981 [3] Andersom J. 
R: The Arehiteeture of ~ltio~ Harvard University Pre~ Cambridge MA 1983 [4] Diner, A: Compiling Functional 
Languageq Wiiey, Chichester 1988 [51 Dybvig R. R The SCHEME programming Lang­uage, Prentiee-H~ Englewood 
Cliffs NJ 1987 [6] Flave~ J. H: Cognitive Development 2.ed, Prentiee-Hall, Englewood Cliffs NJ 1985 [7] 
Haugelan~ J: Artificial Intelligence, MIT Press, Cambridge MA 1985 [8] Hollerbach, J. H: Fundamentals 
of Motor Beha­viour, In Osherso% D. N. &#38; Kossl~ S. M. &#38; Hol­lerbac~ J. M. (cd.): Visual Cognition 
and Aetio~ MIT Pr~ Cambridge MA 1990 [9] Jones N. &#38; Sestoft, P. &#38; S@ndergaarL H: MIX, Lisp and 
Symbolic Computation vol. 2 (1989), Klu­wer Academic Publishers, Dordrecht [10] Minsky, M: The Society 
of Mind, Touchstone, New York 1985 [11] Newe~ A. &#38; SimoW H. A: Human Problem Solv­ing Prentice-H~ 
Engiewood Cliffs NJ 1972 [12] Piage~ J: Six Psychological Studies, Viitage, New York 1968 [13] Piaget, 
J. &#38; Inhelder, B: The Psychology of the Chi14 Basic Boob New York 1%9 [14] Posner, M. I. (cd.): Foundations 
of Cognitive Seien­ee, MIT Pr~ Cambridge MA 1989 [~ ~lyshn z Computation and Cognition, MIT Press, Cambridge 
MA 1984 [16] Rich, E. &#38; Kn@t, IC Artificial Intelligence 2.eL McGraw-Hil~ New York NY 1991 [17] Rowe, 
N. C: Artifiaal lntelligen= through PRO-LOG, Prentiee-Hal~ Englewood Cliffs NJ 1988 [1.tl] Rummelh@ D. 
E. &#38; MeCellan~ J. L. (cd.): Pa­rallel Dtitbuted Pr_ MIT Press, Cambrid­ge MA 1986 [19] Sehank, R. 
&#38; AbehsoQ R: Seript$ P~ Gods and Understandm&#38; Lawrence Erlbaum Associates, Hillsdale NJ 1977 
[20] Sow J. F: Cmeeptual Strueturesj Addison-Wesley, Reading MA 1984 [21] Staszewski, J. J: Skilled Memory 
and Expert Mental Calculation In CM M. T. H. &#38; Glaser, R. &#38; Farr, M. J. (cd.): The Nature of 
Eqertise, Lawrenee Erl­baum Assoeiatq H*e NJ 1988 [22] Tanenbaum, A. S Structured Computer Organisa­tion 
3.ed Prentiee-H~ EngJewood CIi&#38; NJ 19!XI [23] l%ompso% Richard F The Bra W. H. Freemaq New York NY 
1985 [24] Touretzky, David S: Introduetio~ In Machine Lear­ning VOL7 (1991), Kluwer Academic publisher% 
Dordreeht [251 Trans, IC An Expert System Shell for Planning with Automatic Feedbaek Learning In Mayob 
B. (cd.): Proceedings of SCAI 91, 10S Pre~ Amsterdam 1991 489  
			