
 ON THE OPTIMAL BISECTION OF A POLYGON (Extended Abstract) Elias Koutsouplas i, Chrlstos H. Papacllmltriou 
1,~ and Martha Siderl 3 ABSTRACT: We give a polynomial approximation sceme for subdividing a simple polygon 
into approxi- mately equal parts by curves of the smallest possible total length. For convex polygons 
we show that an exact fast algorithm is possible. Several generaliza- tions are shown NP-complete. 1. 
INTRODUCTION We study from an algorithmic standpoint the follow- ing natural geometric optimization problem: 
We are given a simple polygon P. We wish to subdivide P by a set of curves into two regions, not necessarily 
connected, but having the same area, such that the total length of the curves used is the smallest possi- 
ble. That is, we wish to equitably cut a polygonal pie with the smallest possible knife action. For example, 
if the pie is an equilateral triangle, the optimal bi- section is shown in Figure l(a). For the irregular 
pie in Figure l(b) we also show the optimal bisection. Our interest in this problem grew out of a re-lated 
graph-theoretic problem, the bisection width of solid grid graphs [PS]. The geometric problem studied 
here has been looked at in the past, and has been recently studied intensely in the context of generalized 
planar separation theorems, in unpub- lished work by S. Vavasis, L. Khachiyan, L. Lovhsz, G. Miller and 
W. Thurnston (private communication with Gary Miller). The consensus seems to be that any such region 
(even a weighted one) can be bi-sected with total "knife action" (also appropriately weighted) proportional 
to the square root to its total weight. There are some very interesting results and Permission to copy 
without fee all or part of this material is granted provided that the copies are not made or distributed 
for direct com- mercial advantage, the ACM copyright notice and the title of the publication and its 
date appear, and notice is given that copying is by permission of the Association for Computing Machinery. 
To copy otherwise, or to republish, requires a fee and / or specific permission. &#38;#169; 1990 ACM 
0-89791-362-0/90/0006/0198 $1.50 open problems in this area. However, very little is known on the obvious 
question, how to find the pre-cise optimum in this problem. There is a very good reason for this: Theorem 
1: The optimal polygon bisection prob- lem is NP-complete. Figure 1: Optimum Bisection of Polygons. The 
proof is very easy: The NP-complete prob- lem PARTITION can be reduced to optimal bisec- tion by the 
simple construction illustrated in Fig- ure 3 (al,..., an are integers in the given instance of IUniversity 
of California at San Diego. 2Research supported by the ESPRIT Basic Research Ac- tion No. 3075 ALCOM, 
a grant to the Universities of Patras and Bonn by the Volkswagen Foundation, and an NSF Grant. 3Computer 
Technology Institute, Patras, Greece. PARTITION). In fact, if we replace the dimension n 2 in the figure 
by ~] 2, we obtain: 2 .,flZ r Figure 2: Reduction from PARTITION. Corollary: For any e > 0, it is NP-hard 
to obtain a solution to the optimal bisection problem which is at most 1 + e times that optimum. In this 
paper we show that the only remaining hope can be realized, and in quite a strong way. Let us call a 
subdivision of the polygon into two regions an e-bisection if the ratio of the two areas is at most e 
away from one. Theorem 2: There is an algorithm which, for any given polygon with n sides, and > 0, 
finds an -bisection which is at least as short as the optimum bisection, in time polynomial in n and 
3" n 5 Unfortunately, the polynomial is O(-v- ). There appear to be easy ways to lower this by one or 
two factors of n and/or ~-, but no really practical algo- rithm is in sight. An additional insight into 
the struc- ture of the optimal solutions will be needed in order to develop a fast approximate bisection 
algorithm. Naturally, our approach and its lemmata can be the basis of heuristics. The method used to 
prove Theorem 2 is dynamic programming. Our approach is based on a useful re- sult that characterizes 
optimal bisections (that is, the shortest set of curves in the polygon that will sepa- rate it into two 
equal halves). We need some prelim- inary definitions. Consider a polygon and a contin- uous, differentiable 
curve intersecting its boundary (Figure 2). If the intersection is in the interior of an edge, we call 
the curve orthogonal, as usual, if its tangent at the intersection point is orthogonal to the edge. If 
the intersection is at a cor~cave point of the polygon, the curve is orthogonal if it forms an-gles at 
least 90 Â° with both edges. There can be no curve orthogonal to a convex point. In the follow-ing, we 
consider a straight line segment as a special case of a circular arc (with zero curvature). Let c be 
the number of concave points of the polygon. In our characterization of the optimal bisection below, 
we must distinguish between positive and negative cur-vatures of a separating curve. Let us fix one of 
the two (open, possibly disconnected) parts in which the alleged optimal bisection subdivides the polygon. 
A curve has positive curvature at a point if its tangent is locally completely outside this fixed part; 
other-wise the curvature is negative. Theorem 3: The optimal bisection consists of at most 2 c + 1 circular 
arcs, all with the same curva- ture. At most one of them has both endpoints in the interiors of sides. 
These are the simple ideas in the proof of The- orem 3: That the solution must be a set of circular arcs 
follows easily from the classical result establish- ing that a disc is the least-perimeter region with 
a fixed area. Equality of curvatures follows by observ- ing that unequal curvatures can be improved. 
Fi-nally, there can be no two arcs with both endpoints at the interiors of edges, essentially because 
x/~+ is minimized under the restriction a + b = const by setting one of a, b to zero. Figure 2: Orthogonal 
Curves. For convex polygons, we can do much better: Theorem 4: If the polygon is convex, the exact problem 
can be solved in time O(n log n) after a pre-processing that computes the areas of the subpoly- gons 
cut off by all diagonals. 199 That is, the total time is O(n2). The basic ob- servation is that in 
this case, the bisection will be a single arc (recall Theorem 1). The technique is an (apparently required) 
binary search for each edge of the polygon. 2. THE ALGORITHM The approximation algorithm can be thought 
of as the geometric generalization of the well-known dy- namic programming approximation algorithm for 
the KNAPSACK problem [PS1]. We assume, without loss of generality, that the polygon has unit area. Let 
6 > 0 be a small p~ rameter to be fixed later, and let N = [~]. Curv+ that participate in a bisection 
(the optimal one, or our approximation) are of three kinds: Edge-to-edge (Figures 4(a) and 4(b)), edge-to-vertex 
(Figure 4(c)), or vertex-to-vertex (Figure 4(d)). We call a pair of elements (edges or concave vertices) 
admissible if there is at least one orthogonal curve between them. Each admissible pair has a basic curve 
assigned to it, namely, the one with smallest length (shown in bold lines in Figure 4). Each admissible 
pair has assigned to it a set of standard curves, of which the basic is one. These curves are linearly 
ordered, and the en- closed area between two consecutive ones is precisely 6 (see Figure 4). So, there 
are O(n2Y) standard curves. Naturally, we exclude curves that intersect the boundary. Figure 4: Standard 
Curves. Consider a pair (x, y) of elements (edges or ver- tices, or one of each, not necessarily admissible). 
Each such pair has associated with it a part of the perimeter of P, namely the part traversed clockwise 
from x to y. Assume now that (z,y) is admissible, and consider a standard curve e from z to y. Sup-pose 
that a(c) is the area of the region associated with the curve c. We say that curve c has virtuM area 
A(c) = [-~-]. Virtual area is an approxima-tion of the true area, and is useful for setting up our recurrence. 
Finally, we partially order pairs of edges or vertices by inclusion of the associated parts of the perimeter 
of P. This will be the order in which the dynamic programming recurrence will be computed. For each pair 
(admissible or not) (z, y), and each integer i <_ N, we define C(z, y, i) to be the smallest total length 
of curves required in order to cut off a total virtuM area of i between the curves and the part of the 
perimeter associated with (z, y). We can write C(z, y, i) = min{Co(z, U, i), el(z, y, i), C2(z, y, i)}, 
where Ck(x, y, i) is defined as the length of the short- est set of curves that isolate total virtual 
area of i between them and the part of the perimeter clock- wise from z to y and that include k curves 
between z and y, k = 0, 1, 2. Obviously, there can be no more than two curves between z and y. In particular, 
Co(z,y,i)= min (C(z,z,j)+C(z,y,i-j)), j_<i,z~z~y where z ranges over all elements (edges or concave 
vertices) between z and y on the part of the perime- ter associated with (z, y) (Figure 5). Similarly, 
Ol(z,y,i) = ~_<'~(Oo(z,y,j) + g(z,y,i + j)), where e(z, y, i+j) is the length of the standard curve 
from z to y that has virtual area i + j (Figure 6). Finally, C2(z, y, i) = min(C0(z, y, j) + g'(z, y, 
i -j)), j<_i where g'(z, y, i -j) is the total length of the pair of standard curves from z to y enclose 
a virtual area of i-j (Figure 7). It is easy to see that the values of C can be computed in time O(n3N2). 
Having computed all C's, we find the desired ap- proximation. It is not quite the best C(z, y, ~), over 
all counterclockwise adjacent edges z, y, as one might have guessed. The reason is that we have miscalcu- 
lated areas by using virtual areas. How big is this miscalculation? It turns out that at most n nested 
200 Figure 5: The calculation of C0. Figure 6: The calculation of C1. : " 2. curves are at any solution 
(ours, or the optimal one). So, our virtual area estimates can be at most n6 away from the real area. 
Consider now the optimal solution. It contains at most n curves. We can perturb this solution, so that 
the curves become standard and the overaIlsolu- tion is not deteriorated in length (see Figure 8 for 
an example). The total deviation from a fair split (area equal to Â½) is at most n6. Hence, this perturbed 
so- lution has a virtual area value between ~ -2n and ~+2n. Therefore, we pick as our solution the small- 
est C(x, y, j) value for ~--2n < j < -~ + 2n. Our approximation constraint now requires that the area 
of the solution proposed, which is at most 2n6 away from half, be at most e away from half. We achieve 
this by taking 6 = e The proof of Theorem 2 is ,y~. complete. i  \ \~' Figure 8: Perturbing the Optimal 
Solution. If a polygon is convex, then, by Theorem 3, the opti- mum bisection contains just one edge-to-edge 
curve, So, we are searching for the right admissible pair of edges (that is, a pair of edges that have 
a common orthogunal circular arc, see Figure 9). Let us sup- pose that we have fixed one of the two edges, 
e, and we are looking for the other one. This can be done by binary search. The basic observation is 
that the edges that make up an admissible pair are in at most four "runs" around the perimeter of the 
polygon (see Figure 9). A binary search determines the (at most two) edges e' such that there is a circular 
arc orthogo- hal to both e and e' bisecting the polygon. However, for this we need to have precomputed 
the area of any polygon cut off by a diagonal of the given one. Theorem 4 follows. We should note in 
closing that a polynomial algorithm for the exact problem is also possible in the case in which c, the 
number of con- cave points, is fixed; naturally, the polynomial has c in the exponent. Figure 9: Bisecting 
a convex polygon. REFERENCES [PS] C. H. Papadimitriou, M. Sideri "The Bisection Width of Solid Grid 
Graphs", Proc. 1990 SODA Con- ference. [PS1] C. H. Papadimitriou, K. Steiglitz Combinato- rial Optimization: 
Algorithms and Complexity, Pren-tice-Hall, 1982. 
			