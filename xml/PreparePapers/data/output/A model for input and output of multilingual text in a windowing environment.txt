
 AModel for Input and Output of MuMlingualText in a Windowing Environment Yutaka Kataoka Science and 
Engineering Research Laboratory, Waseda University 4-1, Okubo 3-chome, Shinjuku-ku, Tokyo, Japan Masato 
itforisaki NTT Communications and Information Processing Laboratories Nippon Telegraph and Telephone 
Corporation 1-2356, Take, Yokosuka, Kanagawa, Japan Hiroshi Kuribayashi Computer System R&#38;D Laboratory, 
Omron Corporation Shimokaiinji, Nagaokakyo, Kyoto, Japan Hiroyoshi Ohara Department of Information and 
Computer Science School of Science and Engineering, Waseda University 4-1, Okubo 3-chotne, Shinjuku-ku, 
Tokyo, Japan Abstract system clearly shows that code sets should be selected by applications with purposes 
beyond the selection of A multilingual Input/Output (1/0) system has been one element from a set of localization. 
Likewise, func­ designed based on topological studies of writing con­tionality and functions relatinq 
to text manipulation ventions of major world languages. Designed as a lay­in an operating system should 
be determined by such ered structure, it unifies common features of writing applications. conventions 
and is intended to ease international and local function alities. The input module of the intern a-A 
subset of this 1/0 system was implemented in the X tzonalizatzon layer converts phonograms to ideograms. 
window system as a basic X11R5 I/O capability by The corresponding output module displays position-supplying 
basic code set generation and string mani­independent characters and position-dependent char-pulation 
to avoid interference from operating systems. acters. The localization layer positions highly To ensure 
the possibility of polyglot string manipula­language-specific functions outside the structure. tion, 
the I/O system clearly should be implemented These functions are integrated as tables and servers to 
separately from the operating system with its limita­add new languages without the necessity of compila-tions. 
tion. The I/O system interactively generates both stateful Keywords -Internationalization, multilingual, 
mul­and stateless code sets. Beyond the boundaries of the tiwindow, input method, output method, X window 
PO SIX locale model, the system generates ISO 2022, systems, linguistics IS O/DIS 10646, and Compound 
Text, defined for the interchange encoding format in .X11 protocols, for 1. Introduction basic polyglot 
text processing. Possessing the capa- The definition of an international environment [1] by bility of 
generating multilingual code sets, this I/O IEEE POSIX Committee proposes a conceptual approach to the 
internationalization of computer SYs. terns and the localization [2, 3] of the ANSI C Permission to copy 
without fee all or part of this material is language has stirred discussion on world-common granted provided 
that the copies are not made or distributed for interfaces. As an extension of such discussion, direGt 
commercial advantage, the AC?vl copyright notloe and the X/Open and other industrial associations are. 
now title of the publication and its date appear, and notice ia given individually seeking enhancements 
[4-6] to the locali­ that copying is by permission of the Association for Computing zation of ANSI C. 
The idea of this internationaliza- Machinery. To copy otherwise, or to republish, requires a fee and/or 
specific permission. tion approach is to enable selection of an interna­@ 1991 ACM O-89791 -45 I-11911001010 
175... $1.5O tional environment and the localization interface November 11-13, 1991 UIST 91 175 from 
a set of localization, or to specify the language to be used in a particular environment in which one 
computer system, typically using the mother tongue of the system operator, is run, thus enabling each 
computer system to adapt its working environment to changing languages. This approach offers a clue to 
resolving the need to redesign or localize computer systems and software to meet the target language, 
but it does not provide a multilingual solution in the current context of an economically and politically 
international community. Multilingual 1/0 imple­ mentation has now become vital to any computer system 
having to handle multiple languages simul­ taneously. A multilingual input/output (1/0) system is not 
sim­ ply a collection of localization or a choice of language-specific 1/0 routines available for selection 
to suit specific applications. Viewed in terms of com­putability, all characters in a set must be able 
to be input and output simultaneously and on an equal basis. A multilingual 1/0 system can therefore 
be defined as an ordered formulation of both language­common and language-specific features of characters 
and the languages in which these characters are used, designed to enable simultaneous character 1/0 in 
any language to and from specific applications on an equal basis. Multilingual 1/0 involves analyses 
of the system of writing involved and the units of char­acter strings for 1/0. All languages, being represented 
in characters, can be roughly divided into phonogramrnic, typified by English, and idio­graphic, typified 
by Chinese. In multilingual 1/0 system input, classifying characters as phono­grammic and idiographic 
has a special meaning. Two types of characters can be output, i.e., charac­ters, such as Arabic, with 
possible changes in how they are written depending on their position in a character string, and characters, 
such as English, without such changes. It is important in character output that characters be classifiable 
by their posi­tion in a character string and by the output range. The multilingual 1/0 system architecture 
we propose based on the foregoing classifications is discussed below. Multilingual 1/0 system implementation 
of this architecture is now used by the MIT X Consor­tium as an alpha release of the X Window System 
R5 . 2. Topological Approach to Character Classification Based on Writing Conventions of Major World 
Languages Computer input generates code points in a particular code set. Computer output selects and 
writes glyphs from code points in a code set. Code sets include multinational code sets registered with 
the 1S0. Encoding schemes include EUC nonrnultinational code sets and 1S0 2022 and Compound Text (CT) 
[7] multinational code sets. Because some languages require multiple code point strings to iden­tify 
a symbol to be written, and others vary writing symbols depending on their location in a symbol string, 
a one-to-one correspondence does not always exist between the code point strings in a code set and the 
symbols that are written. Thus, in imple­mentation, computer input and output must be independent. Applications 
must be able to specify the 1/0 code set choice dynamically to suit their objectives. Code set analyses 
in the computer alone, however, would not fulfill 1/0 consistent with practi­cal character-writing conventions. 
Characters must thus be classified based on the writing conventions of natural languages and a multilingual 
1/0 system built up based on character features. Research on major world languages has focused on syntax 
and phonetic classifications [8, 9]. Studies of characters have been concerned with the linguistic classification 
[10] of phonograms and with selected languages and their characters. Few topological stu­dies have attempted 
to analyze and categorize pho­nograms and ideograms for 1/0 involving the com­puter based on writing 
conventions. 2.1. Analysis of characters for multilingual 1/0 sys­ tem input Natural languages can be 
broadly grouped into inflectional, isolating, and agglutinative. Most languages are represented as characters 
and each has character sets. Characters can be classified phono­grammically or ideographically. Languages 
that use phonograms typically have a limited character reper­toire. Phonograrns divide languages into 
two types: those using only combinations of vowels and con­sonants to represent sounds, and those using 
independent syllables to represent ideograms in com­binations of vowels and consonants. Generally, languages 
having phonograms in syllables, such as Japanese hiragana and Tamil, have a broader charac­ter set than 
the Latin, Greek, and Arabic alphabets. Ideograms generally involve many characters, and one character 
carries one or more meanings. Words are made up of one or more ideograms each. One ideogram may have 
only one phonetic value, as in Chinese hantsu, or it may have one or more phonetic values, as in Japanese 
kanji. Regardless of the language, in almost all ideograms, multiple ideo­grams share the same phonetic 
value. Thus, it would be impossible to determine an ideogram from one phonetic value alone. Among current 
languages, ideograms have individual phonetic values, enabling them to be represented by phonetic value 
symbols. Specifying characters based on their phonetic values is the most common form of 176 UIST 91 
Hilton Head, South Carolina ideogram entry related to computers. Ideograms include those having a variable, 
meaningful but non­ voiced value, such as icons. Because, in ideogram­ language nations, phonograms that 
represent ideo­ grams are used as part of their character set, com­ puter code sets used in ideogram-language 
nations often involve phonograms, which are not necessarily limited to the Latin alphabet, since some 
languages have multiple phonogrammic symbol systems. 2.2. Concept ual input functions and layers When 
the character set in a particular language, or character sets in multiple languages, is entered, char­acters 
marked on keytops of a keyboard and those actually input as data do not necessarily have a one­to-one 
correspondence. The repertoire of phono­grams that represents phonetic values is limited because of the 
relatively small number of vowels and consonants available. Consequently, even if there are more phonograms 
than keys on the keyboard, they still can be converted to characters that represent one phonetic value 
each in a single keys­troke. Phonograms thus can be generated and entered from a finite number of keys 
by a finite auto­maton. However, multiple ideograms may have the same phonetic value, and a single ideogram 
may have mul­ tiple phonetic values. When ideograms are entered using their phonetic values, a finite 
automaton would not be able to determine unambiguously their corresponding phonograms, This can be eased 
by having a table of phonetic values or phonograrn strings and the corresponding multiple ideograms strings 
so that the operator can select the optimal ideogram string from a set of ideograms, called input character 
candidates, having the same phonetic value, to determine which ideogram or ideogram string to enter. 
This table of phonetic value­ideogram correspondences is called a dictionary. When entering an ideogram 
having a variable or no phonetic value into the computer, the operator cata­logs the ideogram string 
in the dictionary with a suitably assigned phonetic value. Sequencing these two stages of phonogram and 
ideogram generation from phonograms or phonetic symbols would make it possible to generate characters 
in different languages using a single mechanism and localizing character­ specific information external 
to the mechanism. Multilingual 1/0 system input thus introduced is called the Input Method (IM). Accordingly, 
1/0 sys­tem input consists of a finite automaton interpreter, which evaluates a table of defined keystroke 
sequences that correspond to particular code points, and a converter, which translates code point strings 
into corresponding ideograms, beyond reach of a fin­ite automaton. The dictionary-based mechanism that 
determines the nature of the ideogram or char­acter strings entered by the operator is called a language-specific 
converter. Language-specific con­verters range to all levels of sophistication, from the simplest, which 
merely aids the operator in decision­making, to the most advanced, which syntactically analyzes given 
phonogram strings and comes up with most probable candidates. At present, language­specific converters 
that return input character candi­dates with syntax information are commonly used, and convert a long 
string of phonograms containing multiple ideogrammic words simultaneously. Such conversion to multiple 
ideograms requires the display of information intermediately with words or syntax information, i.e., 
usually word length, calling upon finite automatons to pass character strings to editing capabilities. 
Cases occur in which a full language cannot be represented in one code set, e.g., Japanese inter­changeable 
code sets, such as JIS X0201, JIS X0208, and JIS X0212t. Instances also occur in which a sin­gle language 
combines both phonograms and ideo­grams or uses special phonetic symbols to generate ideograms. The finite 
automaton must provide a conversion table for each language, rather than for each code set. The information 
required to enable conversion to the actual coding system can then be localized outside the automaton 
table by providing an extended code set containing codes required by each language and generating code 
points by specify­ing code points of the language directly. Because a single phonograrn can be specified 
more than one way, multiple automaton tables are required for each language, each pointing to a transition 
to itself. Automaton conversion tables must also contain information on whether they invoke a layer for 
gen­erating ideograms from phouograms. 2.3. Analysis of characters for multilingual 1/0 sys­tem output 
 Character output, like character input, can be grouped into two types those in languages where characters 
do not vary their symbolic form based on their position in a written symbol string (position­independent 
), and those in languages where written t This is due to the historical background of the definition 
of Japanese interchangeable code sets. In JIS, for example, the evolution started with JIS X0201, which 
defines the Roman and katakana character sets, then proceeds to include JIS X0208, kanji (or Levels 
1 and 2 of the Japanese graphic character code set). JIS X0212 started sa a JIS auxiliary Japanese graphic 
character code set to complement Levels 1 and 2 of the Japanese graphic character code set in their support 
of broad kanji computerization. One cannot discuss codes wit bout touching upon the historical background 
and evolution of national standards.  November 11-13, 1991 UIST 91 177 characters vary their symbolic 
form based on their position in a character string (position-dependent ). Among examples of languages 
with position­dependent characters are Arabic, Bengali, and Devanagari. Characters in these languages 
vary greatly by language and district, representing a great number of languages and used by a great number 
of people. In Bengali, for example, characters vary in written form depending on whether they occur independently 
(independent form) or in combination with other characters (combining form). In Arabic, the same character 
occurs in different forms alone at the beginning, in the middle, and at the end of a word. In Devanagari, 
words are not separated in sentences, but writing changes with the syntax ele­ment, such as specific 
consonants, and associated variations. Accordingly, all words are written in a certain sequence. Delimiters 
divide position-dependent characters into those whose written form fits the position and is selected 
automatically, and those whose syntax ele­ments must be analyzed before anything can be done. Because 
only one code point is associated with each character in the code sets in these languages, a font set 
cannot represent all written symbols at each code point. In character output, allowance must be made 
for generating output in certain character strings, called output character units. The code points in 
a particular code set may not necessarily include all written characters. Cases occur in which one language 
must be represented using multiple code points and in which the code set for a particular language does 
not include all written symbols in the language. In the latter case, each column of code points denotes 
one written character, and types that are not in the code set and written symbol table must be written. 
If the code set contains only part of the characters to be written, one code point column may not always 
be converted to another code set containing the written character. Allowance should be made, therefore, 
for languages that require conversion from code point strings to written charac­ters. Multilingual 1/0 
system output must be able to dis­tinguish position-dependent characters, position­ independent characters, 
and those from which writ­ ten characters are generated. Before proceeding to a discussion of a conceptual 
structure for output, we summarize the problems inherent in code sets used to represent character strings 
in which different languages are involved simultaneously. Code sets are classified into those for particular 
languages and those single code sets each representing multiple languages. Code sets in the latter category 
are further classified into code sets able to identify languages with code points or function character 
sequences, such as invoking and designations, called escape sequences, and those that lack this. Multiple 
languages consisting of position-dependent characters are included in code sets involving characters 
from different languages not able to identify code points or escape sequences. When variations of position­dependent 
characters vary from language to language, languages are not identifiable from the code sets, preventing 
simultaneous writing of charac­ter strings. Likewise, when different languages share the same code set 
and one different written character has to be generated from a code point string, simul­taneous writing 
of characters would not be possible if the code points in the code set do not indicate the language name. 
With code sets, involving characters from different languages not able to identify code points or escape 
sequences, writing characters in the different languages simultaneously is not possible. Code sets containing 
characters from multiple languages would not qualify for use as multilingual output code sets. When characters 
from different languages are to be written in combination, code sets able to identify these languages 
must be selected. In addition to the classifications above, allowance must be made for the direction 
in which characters are written. Languages are usually written vertically or horizontally. In some horizontal 
writing, charac­ters are written from left to right. In Arabic and Hebrewt, character strings must be 
able to be writ­ten from both left and right. Multilingual 1/0 sys­tem output must therefore be able 
to write charac­ters in both directions. Characters include those whose written direction, i.e., vertical 
or horizontal, is determined by the language and those whose writing direction is determined at the writer 
s discretion. Very few languages like Mongolian written vertically cannot also be written horizontally. 
The problem is how to handle characters with different styles depending on whether they are written vertically 
or horizontally. Japanese, for example, is broken down into position-independent characters, and punctua­tion 
and quotation marks vary with the direction in which they are written. As long as characters whose written 
direction is determined at the writer s discre­tion exist, the output unit must be determined for each 
character set having a different written direc­ tion. Whether character strings are written verti­cally 
or horizontally must also be specified in the output unit. t Hebrew requires that diacritical marks, 
called pointing, be appended to character strings. One way to do this would be to have diacritical marks 
cataloged for each unit to which they are appended, provided, however, that they can be uniquely determined 
for the unit.  UIST 91 Hilton Head, South Carolina These analyses suggest that the structure of multil­ingual 
1/0 system output depends heavily on the structure of the font sets ultimately generated. The structure 
of font sets and related information should be redesigned fully allowing for the writing conven­ tions 
above. 2.4. Conceptual output functions and layers Based on the above, multilingual 1/0 system output 
must be structured to invoke output layers compati­ble with position-dependent characters, position­independent 
characters, and those from which char­acters must be generated. The automaton inter­preter would then 
be able to identify the language name, then the font sets associated with the charac­ter set, and character 
group classification for the language to invoke the character group-specific layers to derive more character-specific 
information. Among position-dependent characters, those whose variations are identifiable by delimiters 
may have variation symbols cataloged for each language for reference so that language-specific variations 
can be localized outside. At the same time, font informa­tion on the code point associated with a particular 
position in an output unit can be returned to the interpreter. Even with characters from which writ­ten 
characters must be generated, language-specific generation processes can be located outside by main­taining 
a table of correspondences between the code point strings used to determine written symbols and symbols 
for each language. This structure would associate font sets with code point strings for output. With 
position-dependent characters that require analyzing syntax elements to identify their varia­tions, operator 
intervention is required if variations cannot be determined uniquely. Thus, the output finite automaton 
would have to leave to the operator s discretion the determining of language­specific character forms 
for those position-dependent characters requiring analysis of syntax elements to identify variations. 
For position-independent charac­ters and those from which written characters must be generated, correct 
output character units must be passed to the basic output functions of the systems. The basic concepts 
and functions of multilingual 1/0 system output thus outlined are called, collectively, the Output Method 
(OM). A paper detailing the OM structure, including natural-language writing conventions, is now in work. 
3. Logical Implementation The foregoing analysis highlighted the need to imple­ment multilingual 1/0 
system input and output independently based on the features of different character writing conventions 
and the ability to localize language-or character-specific information November 11-13, 1991 UIST 91 
for reference from the actual multilingual 1/0 sys­tem. Thus, a logical structure approach to multiwin­dow 
system implementation of the multilingual 1/0 system has been derived with working requirements factored 
into it. 3.1. Design goals The following design goals have been set: 1) OS-independent implementation 
of character string manipulation 2) Minimization of libraries requiring applications to be linked 3) 
Independent implementation of multilingual 1/0 system input and output to eliminate depen­dence 4) External 
localization of language-specific infor­mation based on character features 5) Input and output of both 
stateful and stateless encoding systems 6) Functional modularity permitting easy enhance­ment 7) Use 
of server-client models to minimize duplica­tions of binary objects 8) Provision for using multiple different 
language­specific converters 3.2. IM structure For convenience s sake, character string input called 
by the application is named FGetString. The IM is started when FGetString is called by an application. 
Upon being called, FGetString returns a character string to the application. This character string is 
that of code points in a given encoding scheme. Fig­ure 1 shows the flow of data that follows the FGet-String 
call and the IM function hierarchy. The input multiplexer, communication library, and code set converter 
are linked with the application, and are collectively called the IM library. When the input multiplexer 
receives input device information, keystrokes are transmitted to another process started as a server, 
called the input manager, using a com­munication library. The input manager consists of an automaton 
interpreter, an editor, and a communi­cation library. When the automaton interpreter receives keystrokes, 
it converts them to ideograms with reference to the automaton table, transmitting them to the editor 
along with information on whether further conversion is needed. If not, the character string is returned 
to the input multiplexer in the IM library. The converter then converts inter­nal code sets specified 
by the input manager to the encoded sets specified by the application with refer­ence to the code set 
information table and returns the encoded sets to the input multiplexer. The input 179 IM library FGetStringo 
1 ! Input multiplexer Keystrokes Code set info table I I Protocol A Input manager I vI Communication 
library 1 i Automaton interpreter Automaton info table it Communication library 7 A Language Specific 
Converters Chinese LSC I I Japanese LSC 1+ Korean LSC Other LSCS Figure 1 Logical structure of IM multiplexer 
loads the code point string in the encod-converter, which converts the character string to an ing sheme 
returned into the FGetString buffer to ideogram string or a mixed string of ideograms and complete l? 
Get String execution. phonograms, returning them to the editor together with syntax information. The 
editor then writes the returned character string and information and, if Only one input manager is needed 
for each pair of physical 1/0 devices, and executes input for multiple multiple input candidates are 
found, prompts the applications having the IM library. The use of correct operator choice. The character 
string chosen server-client models removes the need for binary by the operator is returned to the IM 
library after its image duplications of the internationalization layer, intermediate-stage indication 
is deleted. The IM thus ensuring maximum memory use. Because only library executes parameters similar 
to phonograms to one automaton table need be maintained, manage­complete processing. ment is simplified. 
A phonogram string requiring further conversion to an ideogram is stored in the Language-specific converters 
are also started as editor buffer. The character string thus stored is servers for the input manager. 
Multiple input written intermediately as a character string using the managers share a single language-specific 
converter. OM. The character string in the intermediate stage Multiple language-specific converters may 
be main­is transmitted from the editor to a language-specific tained for each language, or a particular 
language- UIST 91 Hilton Head, South Carolina OM library FPutStringo 1 i Code set converter I J Automaton 
interpreter I I Code set Automaton info table info table 1 I Language-specific J! module ~ I Language-specific 
info 1 w Basic drawing module Figure 2 Logical specific converter used to suit the input language type. 
Language-specific converters need not be started on the same computer system containing input managers. 
This feature enhances memory use. Operator instructions to the editor for selecting input character strings 
are given by the input multi­plexer the same as keystrokes for input character information. The editor 
has a combination table of editing functions and input keystrokes. In addition to moving the cursor, 
deleting characters, and other general editing capabilities, editing must enable indi­cating, selecting, 
and accepting input candidate information; instructing the language-specific con­verter to make modifications 
to the conversion unit based on the syntax information; changing language-specific converters; and accepting 
final character strings. Characters or keystrokes not sup­ported by the editor are stored in its buffer. 
A separate paper detailing the IM is now in work. 3.3. OM structure For convenience s sake, output called 
by the applica­tion is named FPutString. The OM is started when the application passes a character string 
to FPut-String. A character string is in the code set selected by the application. Figure 2 shows the 
OM function hierarchy. The OM is essentially linked with applications as an OM library to help increase 
writing speed. As in X window systems, the basic drawing module is imple­mented as a server for applications, 
or as a basic out­put device, assumed to provide only the simplest writing of the font of code points 
in a specified code set at a specified position. The code set converter converts the string to sequence 
of code points in a representation for the structure of OM automaton interpreter. Code points thus converted 
are passed to the automaton interpreter to identify the language name. The automaton interpreter gen­erates 
the name of the font needed for writing the characters. position-independent characters are passed to 
the basic drawing module together with the assigned font; for position-dependent characters, a required 
font is selected based on writing position and passed to tke basic drawing module. Characters in a language 
that require further context-dependent analysis are passed to language-specific modules for analysis, 
then returned to the automaton interpreter. Information thus returned includes the range of code point 
strings and the font required. Characters in a language in which one character must be generated from 
each code point string are also processed by language-specific modules. The association of code point 
strings and fonts affects the OM structure, depending on the internal structure of the font file. 3.4. 
Implementation of IM and OM The IM and OM above have been implemented on Xl 1R4 as an Xl lR5 alpha release. 
Figure 3 shows the overall structure of IM and OM implementation. An input multiplexer has not been implemented 
in Xl 1R5 because its specifications cover a capability, called a filter, that would functionally affect 
an input multiplexer. Due to limited discussions of output, very few of the automaton interpreter functions 
in the OM sought by writing conventions have been implemented, and only the horizontal writing of position-independent 
characters has been enabled. The association of character and font sets follows R5 specifications [11, 
12]. Because character and font set association is largely dependent on multiwindow sys­tem implementation, 
it has not been specifically included in the logical structure. We are now work-    November 11-13, 
1991 UIST 91 181 Application OM library IM library X library A vI X server Figure 3 Overallstructure 
of IM and ing on a paper that details implementation, including detailed IM and OM logical structures 
and the rela­tionship between character and font sets. The conceptual structures of input managers and 
language-specific converters in this 1/0 system enable programming modifications to individual operator 
actions, not covered in this paper due to space limitations. Input managers and lauguage- Specific converters 
have been rewritten from the Xwnmo based on the findings of a workshop on local­ization on the X window 
system called XJp [13]. This 1/0 system does not use localization based on the POSIX locale model furnished 
by any OS, thus making it both possible to generate encoding systems consistent with the locale model 
and to return char­acter strings in multiple languages beyond their boundaries. Encoding systems that 
the 1/0 system can currently generate include ISO 2022, Compound Text, 1S0 8859.1, JIS X0201, JIS X0208, 
GB 2312, and KS C5601, though this list is partly influenced by font availability. 4. Summary Research 
into natural-language writing conventions has made it possible to break down a multilingual 1/0 system 
into common and noncommon character features, placing localization information outside the Protocol A 
> Input Manager X library OM library A t Chinese LSC - Japanese LSC e Korean LSC e Other LSC Protocol 
B OMirnplementation as X11R5 a]pha release system. Practical system implementation also has identified 
function hierarchies from the conditions to be met. To implement the 1/0 system in its true sense, natural-language 
writing conventions need much more study. Most current experimental implementations have not reached 
the stage of applying all these concepts due to a lack of knowledge of writing conventions inhibit­ ing 
any broad discussion of the subject and thereby confining the 1/0 system development environment to locale 
models. Font file structure and information have not yet assimilated the analyses of writing con­ ventions. 
Actual multilingual 1/0 system implemen­ tation, though largely limited, supports the 1/0 of most European 
languages and major ideogram languages in North Asia. Further research is antici­ pated into the information 
and internal structure required by multilingual applications. The multilingual 1/0 system implementation 
pro­posed here deviates significantly from the locale model conceived by POSIX. If character strings 
in different languages are returned to the application, it should be the application s responsibility 
to process and write those strings by the locale limitation. From the view of computability, localization 
must be a conflict-free subset in internationalization, such as multilingual 1/0 systems. Multilingual 
applications  UIST 91 Hilton Head, South Carolina essentially work on polyglot character strings, and 
OS capabilities for processing and writing characters only in the code set language conflict with the 
evolu­tion of progress in computability. Multiple locales or sets of locales are not multilingual models. 
One noticeable trend is the construction of multilingual 1/0 models from locales or sets of locales, 
but this approach adheres too much to the locale model coIl­cept. The major problem with the locale model 
is that it encompasses a character coding scheme. The significance of the locale model lies in its handling 
of the local time and date and should not be confused with the multilingual or character coding scheme. 
8. 9. 10. 11. 12. Natural languages are myriad and varied. Many languages do not use blanks to delimit 
words, and punctuation symbols vary with the language. It would be extremely detrimental to programming 
pro­gress if one were to transfer characters in the languages the OS can handle to character string manipulation 
one by one, without understanding the natural-language writing conventions involved. 13. Acknowledgement 
We thank Young Li. Scheifler. Messrs. Special Keith Packard, thanks go to Seiji Mr. Kuwari, Robert and 
W. References 1. ISO/IEC, -POSIX Institute 9945-1:1990 Information (ISO/IEC) [IEEE std of Electrical 
And Technology I 003.1-19901, Electronics Engineers, Inc., 1990. ?-. ANSI, For Information Systems -Program­ming 
Language C, (ANSI X3.159-1989), American National Standards Institute, 1989. 3. SC22/C WG/SWG IPSJ/ITSCJ 
Proposed Multibyte Extension 2.0, January 1, 1989. of Japan, ANSI C, Draft Draft 4. X/Open Company, Ltd., 
face and Headers, in Guide, Issue 3, vol. 2, December 1988. XSI System Inter­X/Open Portability Prentice-Hall, 
Inc., 5. X/Open Definitions, Issue 3 , 1988. Company, Ltd., XSI Supplementary in X/Open Portability 
Guide, vol. 3, Prentice-Hall, Inc., December 6. Working Group on Internationalization, dards Update: 
Internationalization Update on the UniForum Technical UniForum, December 1989. Stan­, in An Conzmittce, 
7. Robert W. Scheifler and James dow Systemj Second Edition, 1990. Gettys, Digital X tVin-Press, William 
Croft, Typology and Universals, Cam­bridge University Press, 1990. Bernard Comrie et al., The World s 
Major Languages, Oxford University Press, 1990. Charles Higounet, L ecriture, Presses Universi­ taires 
de France, 1955. MIT X Consortium, Vania Joloboff and Bill McMahon, Input Method Specifications, Pub­lic 
Review Draft, in X Window System, Ver­sion 11, MIT X Consortium, November 1990. MIT X Consortium, Glenn 
Widener, Xlib Changes for Internationalization: X Locale Management and Localized Text Drawing, Public 
Review Draft, in X Window System, Version 11, MIT X Consortium, November 1990. Masato Morisaki, Etsuo 
Kawada, Hiroshi Kuri­bayashi, Sciji Kuwari, and Masahiko Narita, XJp System: An Internationalized Language 
Interface for the X Window System. Near appear November 11-13, 1991 UIST 91 
			