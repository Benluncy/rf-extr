
 Double Cosets and Searching Small Groups Gregory Butler* Department Of Computer Science Concordia University 
Montreal H3G iM8 * This work was partially supported by the Natural Sciences and Engineering Research 
Council of Canada. Introduction Double cosets are an important concept of group theory. Although the 
desirability of algorithms to compute double cosets has been recognized, there has not appeared any 
algorithm in the literature. The algorithm which we present is a variant of Dimino's algorithm for computing 
a llst of elements of a small group. (By "small" we mean groups of order less than i0 ~, whose llst of 
elements we can explicitly store.) The paper focusses on the problem of searching a small group for 
elements with a given property. For the record we present Dimino's algorithm and a general algorithm 
for searching a small group. These two algorithms are not original. We analyse the search algorithm and 
discuss the role of double cosets in searching. The use of double cosets in the search algorithm does 
not appear to lead to an improvement over the use of right cosets. The algorithms will be described 
in both standard mathematical notation, and in a natural combina- tion of PASCAL and English. Dimino's 
Algorithm Let G be group given by generators Si,S2,.-.,S m. We must be able to multiply elements of 
G and to determine whether two elements of G are equal. This usually means that we are given a "concrete" 
 representation of G either as permutations or matrices." The first problem we will address is that 
of generating a list of all the elements of G. The algorithm we give is due to Lou Dimino of Bell Labs 
and dates from 1971. Consider the special case where G = <H,Sm> and we have a list of elements of H 
= <sl,s2,...,Sm_z >. The group G is a disjoint union Permission to copy without fee all or part of 
this material is granted provided that the copies are not made or distributed for direct commercial advantage, 
the ACM copyright notice and the title of the publication and its date appear, and notice is given that 
copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, 
requires a fee and/or specific permission. G = Ny I U By 2 U ... U Hy N of right cosets of H, where 
 Yz = identity, Y2 = Sm' and for i > 3 Yi = yjz for some j < i and for some z 6 {sz,s2,...,Sm}.  
Given Yi the elements of Hy i = {hYilh 6 H} are enumerated from the list of elements of H. This requires 
IHI multiplications. For each j and for each z E {sx,...,s m} we must form y~z, and determine if it 
belongs to the unio~ of cosets already computed. If it does~not, then yj~ defines the next coset representative 
y.. This requires 1  Nm multiplications and searches. The total number of multiplications as therefore- 
 H (N-l) + Nm-(N-l). The last term compensates for counting the forma- tion of Yz'Y2''" "'YN in both 
of the previous terms. A special case which should be noted is the following. If s m normalizes H then 
we may choose i-z Yi = Sm This avoids the formation of the products yjz at the cost of forming the 
conjugates -1 s m SjSm, for i = 1,2,...,m-l, and determining if each conjugate belongs to R. For 
a complete analysis of the algorithm we intro- duce some notation. Let H i = <sz,s2,...,si >- So H 
0 is the identity subgroup. Let N~ denote the index of Hi_ l in H i . Thus [G I = NzN2...N m. Summing 
the costs of computing each H i = <Hi_1,si > gives a total of m (i) IGI -i + i~ 1 (Ni+l)(i-l) multiplications, 
and 01981 ACM O-89791-047-8/81-0800-0182 $00.75 182 Double Coset$ and Searching Small Groups Proceedings 
of the 1981 ACM Symposium on Symbolic and Algebraic Computation P. Algorithms currently use D(y) = Hy. 
Later we m  will analyse these cases with particular atten- m + i~ i [(N i -l)i + i - i] searches 
 tion to the cases D(y) = Hy and D(y) = HyH. for the worst case where the test "s. normalizes 1! 
Hi_ 1 always fails, l Note that in the case of a two generator group (where m = 2) the number of multiplications 
is minimized by taking the generator of griater order as s I . For example, the permutations a =(1,2) 
and b = (1,2,3,4) generate the symmetric group of degree 4. If s I = a and s 2 = b then the algorithm 
requires 36 multiplications and 25 searches. If s I = b and s 2 = a then the algorithm requires only 
30 multiplications and 15 searches. In order to efficiently perform the searches the list of elements 
may be "hash" addressed. See Knuth [2] for more details of this technique. Searching a small group 
The algorithm of this section is a refinement of the most direct approach: look at each element of the 
group. We assume that the group G is given as a llst of elements. Furthermore we are to find all the 
elements of G with a given property P. There are two restrictions on P. First we must know how to decide, 
given an element y of G, whether y has property P. Second the set of elements G(P) = {y 6 G I Y has 
property P}  must be a subgroup of G. Some typical examples are the computation of the centralizer 
of an element, the normalizer of a subgroup, or the centre of G. The refinements of the direct approach 
which are used in the algorithm are best described by viewing the direct algorithm as a discarding process. 
In the direct method we have an (implicit) set F of the elements of G. Each element y is considered 
in turn. If y has property P then it belongs to G(P) and is discarded from F. If y does not have property 
 P then it is discarded from F. The first refinement follows from the fact that G(P) is a subgroup. 
Let H be the subgroup of G(P) generated by the elements y which the algorithm has already considered 
and which have property P. Each element y of an explicit set F is considered in turn. If y has property 
P then H becomes <H,y> and H is discarded from F. Dimino's algorithm will compute <H,y>. For this additional 
cost we may avoid many tests for property P. The second refinement again follows from the fact that 
G(P) is a subgroup. If y does not have property P then we discard a set D(y) of elements all of which 
do not have property P. Some obvious candidates for D(y) are {y}, {y,y-l}, the group <y> generated by 
y, the right coset Hy, and the double coset HyH. It is easily seen that in these cases if y does not 
belong to G(P) then D(y) N G(P) is empty. That is, no element of D(y) has property The algorithm for 
the case D(y) = Hy is given below. The modifications required in order to alter the choice of D(y) are 
minor. Usually the algorithm is supplied with an initial subgroup H 0 of G(P). This may be the identity 
subgroup, but is often larger. For example, when computing the centralizer of an element z in G then 
H 0 = <z>. When computing the normalizer of a subgroup K of G then H 0 = K. The set r may be efficiently 
implemented as a characteristic function of a subset of the list of elements of G. This requires one 
binary digit for each element of G. Double cosets Let H and K be subgroups of G and let y be an element 
of G. The double coset HyK is the set of elements {hyk I h 6 ~, k 6 K}. It is an elementary fact that 
a double coset HyK is a disjoint union of right cosets of H. In fact HyK = Hy I U Hy 2 U ... U Hy N 
 where Yl = y' and for i > 2, Yi = yjz for some J < i and for some generator z of K. Note the similarity 
with the setting for Dimino's algorithm. In the special case where G = <H,s > t m  we can view Dimino 
s algorithm as a computation of the double coset HSmG. We can modify Dimino's algorithm to compute the 
double coset HyK. The information we require is a list of the elements of H (in order to enumerate Hy 
i) and a set of generators {kl,k2,...,k £} of K. The algorithm will list the elements of HyK. An analysis 
of the algorithm yields a cost of (2) IHyKI + N£ -N multiplications, and N£ searches. We remark that 
if y normalizes H then HyH = Hy. In this case the above algorithm enumerates Hy at less cost than testing 
whether y normalizes H and forming Hy directly. Therefore the special case is not incorporated into algorithm 
DOUBLE-COSET even though it is used in algorithm DIMINO. Analysis and comparison of se@rch al$orithms 
 This section will concentrate on the second refine- ment to the direct search algorithm and examine 
the choice of the discard set D(y). But first we 183 Double Cosets and Searching Small Groups should 
say something about the first refinement. In discussing either of the refinements it is necessary to 
bear in mind the cost of deciding whether an element has property P. This cost will be denoted c(P). 
Some typical value are c(P) = 2 multiplications + 1 comparison of elements, for centralizer of an 
element, = 3r multiplications + search time,  for normalizer of K = <kl,...,kr> , = 2m multiplications 
 + m comparison of elements, for centre of G = <Sl,S2,...,Sm>.  Introducing the first refinement saves 
IG(P) I - t tests (where t generators for G(P) are found by the search algorithm) at the cost of Dimino's 
algorithm for G(P). Equation (11 is maximized when N m is IGI/2 m-1 and each other N i is 2. This gives 
upper bounds of ( 1 + ~t-1 ) ]G(P) I+ ~(t-l)(t-2) i multiplications, and t IG(P) J + t 2 searches 
2t-z for the cost of Dimino's algorithm for G(P). When considering the second refinement the cost of 
computing D(y) relative to the number of tests it saves is also important. For some choices of D(y) however 
the issue is complicated by the fact that an element may be discarded more than once. For example, the 
algorithm may consider Yz and Y2 but we may have D(yl) 0 D(Y2) nonempty. An example of this is the case 
D(y) = <y>, where an element may be discarded, and later its square root may be discarded. We will call 
this phenomena "multiple rejection". In the case of single or double cosets, multiple rejection can 
only occur if the subgroup H is extended. The reason for this is that the cosets for a fixed H are disjoint. 
As the subgroup is extended each time a generator is found, each element can be rejected a maximum of 
t + i times. The average seems much lower than this.  For simplicity let us ignore multiple rejection. 
In the cases where D(y) = {y}, {y,y-l} or <y> the cost of computing D(y) is small, but the number of 
elements discarded is also small. Typically the group G will not have elements of very large order so 
the best we can hope for is to reduce the number of tests by one or two orders of magnitude. How-ever 
the subgroup H may be much larger than this, and taking D(y) = Hy will discard IHI elements, at the small 
cost of one multiplication per element. Therefore we should take D(y) = Hy in preference to the first 
three cases. The next decision is not so clearcut. Taking D(y) = HyH will enable the algorithm to discard 
more elements but the cost (as given in (2)1 is now greater than one multiplication per element. The 
advantage, if any, of double cosets will he in cases where the cost c(P) of testing is high, as it does 
significantly reduce the number of tests. Of course multiple rejection clouds the picture, and increases 
the cost of discarding an element, as an element may be discarded several times. In both cases, D(y) 
= Hy and HyH, the bound on the number of times an element is discarded is t + i. To obtain some feel 
for the interplay of the three factors, size of discard set, cost of computing discard set, and multiple 
rejection we did an experiment using CAYLEY [i] to simulate the algorithms and to monitor the above factors. 
 The group O of degree 12 generated by (1,6,7)(2,5, 8,5,4,9)(11,121, and (1,3)(4,9,12)(5,8,10,6,7,11) 
has order 648. Dimino's algorithm computed its list of elements. For each of the first fifty elements 
we used algorithm SEARCH to compute its centralizer. This was done using both single and double cosets. 
For no element did the centralizer require more than four generators. The following averages over these 
fifty runs are listed for comparison. (All costs are in terms of multiplic- ations.) Table I: Average 
of all 50 cases.  IG(P)] = 18.2 number of generators t = 1.96 Hy HyH number of tests 88.4 21.9 rejection 
rate per element 1.18 1.24 cost per discard 1.00 1.18 cost per element discarded 1.18 1.47 total cost 
(including 950 998 tests) The first thing to note is that discarding double cosets greatly reduces the 
number of tests. Perhaps surprisingly the rejection rate for each element is higher for double cosets 
than for single cosets, so the cost for each element dis- carded will also be higher. In this example 
where the cost c(P) is only 2 multiplications, there is only a 5% difference in performance. It is felt 
that the cases where G(P) = H o were very similar for both single and double cosets, and therefore hid 
the true difference in perfor- mance. In Table II we present the data from the 26 cases (of the above 
50) where the algorithm extends H 0 in order to compute G(P). Note that the differences are more marked. 
There is now a 15% difference in total cost.  184 Double Cosets and Searching Small Groups Table II: 
Average of 26 cases where G(P) ~ H 0. JG(P) f = 28.4 number of generators t = 2.8 Hy HyH number of 
tests 85.0 26.8 rejection rate per element 1.35 1.48 cost per discard 1.00 1.20 cost per element discarded 
1.35 1.77 total cost (including 1058 1206 tests)  Conclusion Although the findings indicate that discarding 
right cosets is "better" than discarding double cosets in the search algorithm, I feel that the use of 
double cosets should be further investi- gated. A more efficient method of enumerating a double coset 
could reverse the above situation. The use of double cosets could also be better in cases where it is 
costly to determine whether an element has property P, as is indicated by the large reduction in the 
number of tests when dis- carding double cosets. As the determination of the distribution of groups 
is a difficult open problem, a complete analysis of the search algorithm appears intractable at this 
time. In particular, only an intuitive understanding of the phenomena of multiple rejec- tion is possible. 
 Bibliography [i] John J. Cannon, Software tools for group theory, Proc. AMS Symp. Pure Math. 37 (1980) 
495-502. [2] Donald E. Knuth, The Art of Computer Programming, Volume 3, Addison-Wesley, 1973. Al~orithm 
DIMINO ( group G ) { Given a set {sl,s2,...,s m} of generators of G compute a list elements of the elements 
of G. } begin { DIMINO } order := i; elements [ 1 ] := identity; for i := i to m do  if not s i in 
elements then bee { extend by i-th generator. It is not redundant } last-gen := si; if Si* Sjs i in 
elements for all j < i the__._n first-gen := si; else first-gen := sl;  old-order := order; coset-start 
:= old-order + i; append s i to elements; append elements [ 2.. old-order ] * s i to elements; 185 Double 
Cosets and Searching Small Groups order := order + old-order;  re~ { for each eoset ~epresentatlve } 
coset-rep := elements [ coset-start ]; for each generator gen in { first-gen ..... last gen } d_o begin 
 el¢ := coset-rep * gen; if not eli in elements then begin  append elt to elements; append elements 
[ 2..old-orders ] * elt to element; order := order + old-order; end; end; coset-start := coset-start 
+ old-order; until coset-start > order; end; end; { DIMINO }  Algorithm SEARCH ( group G, property 
P, initial subgroup H 0 ) { Search G for the subgroup G(P) of elements with property P. The subgroup 
H 0 is the initial, approximation to G(P). } begin { SEARCH }  H := Ho; elements-to-search := G ~ H0; 
while elements-to-search not empty d~q begin choose elt from elements-to-search i_f eli has property 
P  then { extend H } H := <H,elt>; elements-to-search := elements-to-search ~ H; else { discard D(elt) 
= H * eli } elements-to-search := elements-to-search ~ (H * elt); end; end; { SEARCH . G(P) is H } Algorithm 
DOUBLE-COSET ( groups H,K, element y ) { Given a llst of the elements of H and generators of K, the 
algorithm produces a llst double-coset-list of the elements of the double coset HyK. } begin { DOUBLE-COSET 
} coset-start := i; double-coset-list [ I ] := y; append (H ~ { identity })* y to double-coset-list; 
length := IHI; 186 Double Cosets and Searching Small Groups re,eat { for each right coset of H in the 
double coset } coset-rep := double-coset-list [ coset-start ]; fPK each generator gen of K d__o eli 
:= coset-rep * gen; if not eli in double-coset-llst then begin { adjoin a new right coset of H } append 
eli to double-coset-list; append (H ~ { identity })* eli to double-coset-list; length := length + IHI; 
 end; end; coset-start := eoset-start + IHI; until coset-start > length; end; ~ DOUBLE-COSET } 187 
Double Cosets and Searching Small Groups   
			