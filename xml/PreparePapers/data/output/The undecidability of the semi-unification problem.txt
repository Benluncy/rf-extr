
 THE UNDECIDABILITY OF THE SEMI-UNIFICATION PROBLEM * (Preliminary Report) A.J. Kfoury J. Tiuryn P. Urzyczyn 
Dept of Computer Science Institute of Mathematics Institute of Mathematics Boston University University 
of Warsaw University of Warsaw Abstract The Semi-Unification Problem (SUP) is a natu- ral generalization 
of both first-order unification and matching. The problem arises in various branches of computer science 
and logic. Al- though several special cases of SUP are known to be decidable, the problem in general 
has been open for several years. We show that SUP in general is undecidable, by reducing what we call 
the "boundedness problem" of Turing machines to SUP. The undecidability of this boundedness problem is 
established by a technique developed in the mid-1960's to prove related results about Turing machines, 
 Introduction Let E be a first-order signature, X a countably infinite set of variables, and 7" the 
set of all terms over E and X. An instance F of Semi-Unification is a finite set of *This work is partly 
supported by NSF grant CCR-8901647 and by a grant of the Polish Ministry of National Education, No. RP.I.09. 
 Permission to copy without fee all or part of this material is granted pro- vided that the copies are 
not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the 
publication and its date appear, and notice is given that copying is by permission of the Association 
for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. 
inequalities: r = {tl < ul,...,~ < u~} where tl, u/ E 7". A substitution is a function S : X ---* 7". 
Every substitution extends in a natural way to a P.-homomorphism S : 7" ---, 7". A substitution S is 
a solution of the instance F iff there are substitutions $1,..., S,~ such that: sl(s(~l)) = s(~l), ..., 
&#38;(s(~,)) = s(~) The Semi-Unification Problem (henceforth abbrevi-ated SUP) is the problem of deciding, 
for any instance P, whether £ has a solution. Problems in several branches of computer science and logic 
give rise to SUP, or to special cases of SUP, or to generalizations of SUP. For example: (1) A sufficient 
condition for a rewrite rule to be non- terminating can be formulated as an instance of SUP with exactly 
one inequality (see [8, 18]). (2) The typability problem for the polymorphic func- tional language ML 
can be shown to be log-space equivalent to a special case of SUP where every in- stance satisfies a certain 
acyclicity condition (see  [11]). (3) The typabitity problem for extensions of ML that allow polymorphic 
recursion (see [5, 10, 12, 15]), as well as the typability problem for certain frag- ments of the polymorphic 
k-calculus augmented with constants (see [9]), can be shown to be log-space equivalent to SUP in general. 
&#38;#169; 1990 ACM 089791-361-2/90/0005/0468 $1.50 468 (4) In proof theory, a strengthened version of 
a con- jecture due to Kreisel, stated as: "There exists a computable function f such that if Peano Arith- 
metic proves A(0('*)) in k steps for all n <_ f(k, A), where 0('*) is the n-th natural number, then it 
also proves VzA(z)," can be reduced to SUP in general (see [17]). Very similar is a study (un- published) 
undertaken some ten years ago, about the relative speed of proofs in Frege systems with substitution, 
where the question "Can you decide whether a wff is provable within a certain num-ber of steps?" is also 
reduced to SUP in general ([19]). 1 (5) In computational linguistics, researchers have considered a 
form of SUP where terms can be regular (generally infinite) both in instances and in substitutions, i.e., 
for this form of SUP, 5 r is the set of regular (rather than finite) first-order terms over 5; and X 
(e.g., see [3]). (6) The metatheory of functional and inclusion de- pendencies in database theory (developed 
in [14, 1, 2]) is strikingly similar to the metatheory of selni-unification (developed in Section 2 below), 
and both lead to an undecidable general case and decidable special cases (the latter with identical lower 
bounds).  The special case of SUP arising in relation to prob- lena (1) is solvable in polynomial time 
(e.g., see [8]). The special case of SUP arising in relation to problem (2) was recently shown to be 
DEXPTIME-complete ([11, 7]). Other special cases not mentioned here were also studied, and proved solvable 
or equivalent to the general case, with a view to understand SUP in gen- eral (e.g., see [10, 13, 17]). 
Finally, the form of SUP considered in (5) was very recently shown to be unde- cidable ([3]), but note 
that the undecidability of this form does not imply the undecidability of SUP in gen- eral, when T is 
the set of finite first-order terms. We show that, if the signature E contains at least Olle function 
symbol of arity > 2, SUP in general is ,Indecidable. 2 One of the practical consequences of this result 
is that type-checking of functional programs I Other connections between length of proofs and unification 
have been investigated for a long time (e.g., see [16] and the article by Parikh in [4]). ~The case when 
~ contains only function symbols of arity _< 1, besides being decidable, is not encountered in the problems 
mentioned above. in type disciplines that include polymorphic recursion, is not generally possible (see 
[1O]). a The present report is organized as follows. Section 2 is background material, where we develop 
some meta- theory of semi-unification, namely, the formal system of what we call path equations. In Section 
3, we sketch the proof of the undecidability of the boundedness problem for a special formulation of 
Turing machines, which we agree to call Intercell Turing Machines (ab-breviated ITM) for lack of a better 
name. In Section 4, we show that the boundedness problem for ITM's is effectively reducible to SUP, thus 
showing the unde- cidability of SUP. Our proof for the undecidability of the bounded- ness problem for 
ITM's (Section 3) is an adaption of Philip K. Hooper's proof for the undecidability of the mortality 
problem for Turing machines (PhD Thesis, Harvard Univ, 1965). Because Hooper's thesis is un- published, 
we will include his proof in the final draft of this report. Acknowledgement. We were referred to Hooper's 
work by Albert Meyer. His help is greatly appreciated. 2 Semi-Unification Let E be a first-order signature 
consisting of exactly one binary function symbol. Let X be a countably infinite set of variables, and 
T the set of all terms over E and X. For reasons of convenience, the single binary function symbol in 
E is -~, used in infix notation, with the usual convention that a ---, a ~ ~ a" stands for (~ --4 (~' 
~ W')). We reserve early lower-case Greek letters, appropriately superscripted, to denote members of 
X (subscripts will be later used for the naming of "auxiliary variables"). A substitution is a function 
S : X ---, T. Ev-ery substitution extends in a natural way to a E-hornomorphism S : T --- T. We write 
an instance F of the Semi-Unification Problem (SUP) as a finite set of inequalities, F = {t 1 < ul,...,t 
'~ < u'~}, where tl,u i E T. A sub- stitution S is a solution of instance F iff there are 3This is the 
problem that led us to seml-unification in the first place. We take "type-checking" in the sense of "type-reconstruction", 
i.e., the ability to effectively determine whether an untyped program phrase is typable and, if it is, 
to construct a type for it -and this is generally not possible in the presence of polymorphic recursion. 
substitutions $1,..., S,~ such that: S,(S(tl)) = S(u 1) , ... , S,(S(t")) = S(u") (1) SUP is the problem 
of deciding, for any instance I', whether F has a solution. We will be either refering to a solution 
of r by writing S, or the whole vector (S, $1, ..., S,,), depending on whether it is clear from the context 
what the Si's are. Let r = {t 1 < ul,...,t '~ < u '~} be an instance of SUP. We always assume that P 
comes with a fixed order in which the inequalities are written. To stress that the order in which the 
inequalities are listed is fixed, we explicitly write the number of an inequality as an index of that 
inequality. Thus F is now written as; t , ... , t" (2) An auxiliary variable is an expression of the 
form a~,, where a X and w {1,...,n}*. We identify a~ with c~, where e is the empty string, so that 
ordinary variables form a subset of the auxiliary ones. Let X be t.he set of all auxiliary variables. 
Let T be the set of all finite terms over E and X. Auxiliary variables are denoted by ~ and r/, and terms 
in T by t and u. Vor convenience, functions S : X + T will be also called substitutions. The intended 
meaning of the auxiliary variables is as follows. Suppose c~ X and let w = JlJ2""Jp, where Jl,...,Jp 
 {1,...,n}. Then c~ is anew un-known, representing the instance of c~ obtained by a series of substitutions 
corresponding to the inequali- ties numbered jl,ja,...,jp. This explanation moti-vates the following 
definition. Given an (n + 1)-tuple S = (S, S1,...,S,~) of substitutions in T, it induces a substitution 
S : T --* T defined on the auxiliary variables by: S(a¢) = S(cQ (3) and -S(a~,i) = Si(S(a,~)), (4) 
for all a X, w {1,...,n}*, and i {1,...,n}. For every v {1,...,n}*, we have a natural ho-momorphism 
( )~ : T --* T, defined on the auxiliary variables by: = For an arbitrary term t, we also define the 
left and right subterms of t, denoted n(t) and R(t). More pre- cisely, we set : L(t I --. t 2) = t 1 
R(t 1 --, t 2) = t ~- If II {L,R}*, say II = ~1~2""%,, the notation II(t) means zl(~.(...(z,(t).-.)). 
For an arbitrary 1I {L,R}*, the subterm n(t) is defined provided II (read from right to left) is a path 
(from the root to an internal node or to a leaf node) in the binary tree representation of t. Later, 
we will turn II( ) into a total function by introducing what we call "phantom variables". Below we state 
an algorithm that finds a solution for F, if one exists. It consists in repeatedly reducing redexes which 
can be of two kinds. The algorithm halts when no further reduction is possible. (Redex I reduction) Let 
( X and u' T have the property that t~ ~ u' and there are paths n,z ,z {L,R}* and i such that if 
t <i u is the i-th inequality in I', then: II(t) = A(t) X and Eli(u) = ( and Y;A(u) = u' Such a pair 
((, u') is called a redex L The result of reducing this redex consists in substituting u' for all occurences 
of ( throughout F. (Redex H reduction) Let ~ X and let t' ~ X be a term with the property that there 
is a path II {L,R}* and i {1,...,n} such that ift <_i u is the i-th inequality of I', then: II(t) = 
t' and II(u) = The pair of terms ((,(t'),) is called a redex II. The result of reducing this redex consists 
in sub- stituting (t')i for all occurences of ( throughout F. Our next goal is to establish the correctness 
of the above u:gorithm. For this purpose we need some more definitions and notation. Each redex (~, t) 
determines a substitution R : X ---* T such that R(~) = t and R(rl) = r}, for r 1 ~ ~. Suppose that F' 
is an instance obtained from F by a sequence of reductions, and that R1,...,R~ are the corresponding 
substitutions. If a E X then we say that the term t = R~..-RI(a) is assigned to a in F'. Note that t 
is always a subterm of one of the terms occurring in F'. In the next Lemma we allow instances of SUP 
to involve variables in X. A solution of such an in-stance is now a substitution defined on X. For clar- 
ity, let us make the following remark: if P is an in-stance which does not mention auxiliary variables, 
and -S = (S, $1,..., Sn) is a solution of r (S defined only on X), then S : X --+ T, defined according 
to the rules (3) and (4), is also a solution of F, which may be identified with S. Let now r be an instance 
with auxiliary variables. By Sp we denote the set of all substitutions S : X --+ T that are solutions 
of F. Each set ,-qr is quasi-ordered by the following instantiation quasi-order= S' _r S" iff there is 
a substitution P such that PS'(() = S"({) holds for every ( occur- ring in F. A solution (S, Sa,..., 
S,~) of F is said to be coherent if fox" every r/ E X, SO?I ) = &#38;(S(r/)) it holds. Note tJmt if F 
does not mention auxiliary variables, and S : X --* 7" is a solution of F, then its extension S : X 
---, T is coherent.  Lemma 1 Let F be an instance of SUP with vari-ables in X and let F ~ be obtained 
by one step reduc- lion of a redex (I or II). Let R be the substitution associated with this reduction. 
Then R : St, -+ Sp is E-monotone, where f£(S) = SR. Thus, if r' has a solution, then P has a solution. 
Moreover, if S is a coherent solution ofF, then S is also a solution of P' (,,,~1 R(S) = S. Proof (outline): 
Let ((,t) be the redex which is being reduced. We have r' = Fit/(]. Clearly if (S',S[,...,5") is a solution 
of F', then (S'R, S[,...,S') is a solution of P. Thus R is well defined. Let S',S" E St,. If S' E r, 
S", then S'R ~_r S"R also holds (it suffices to check that PS'(t) = S"(t), for an appropriate substitution 
P). Tlms, /~ is _E- mo~,otone. It remains to prove the second part of the conclusion of Lemma 1. Let 
(S, $1, ..., Sn) be a coherent solution of P. Since R is the identity on all variables ¢ ~, then in order 
to establish SR = S, it suffices to prove: s(~) = s(t) (s) If ((,t) is a redex I, then clearly S(() 
= S(t) and (5) holds. Let us assume now that ((,t) is a redex I1, i.e., t = (t')i, for some i and t' 
is a subterm of a term in P. Because S is a solution, it must be that &#38;(S(t')) = S({). By the coherence 
of S we obtain S(t) = S((t')i) = &#38;(S(t')) = S((), and again (5) holds. Because SR = S, it immediately 
follows that S is a solution of I". This completes the proof of Lemma 1. As a corollary of the above 
lemma we get the fol- lowing result. Lemma 2 Let F be an instance of SUP (with all vari- ables in X). 
1. F has a solution iff the above algorithm, when started on F, halts producing F ~ without redexes. 
 2. IfF has no solution, then the above algorithm will keep producing instances F ~ which assign arbitrar- 
ily large terms to variables in X.  Proof (outline): Let us observe first that if the al- gorithm does 
not terminate, then we infinitely often perform a substitution, where we substitute a non-variable term 
for a variable. Hence, if the algorithm does not terminate, it assigns arbitrarily large terms to variables 
in X. Thus (2) follows from (1). Now, if F has a solution S in 7-, then we uniquely extend it to a coherent 
solution S. Let us assume that the algorithm does not terminate. Let R1,..., R,,,... be the substitutions 
associated with the successive steps of the algorithm. It follows from Lemma 1 that for every n s = 
SR~... R. (6) Hence, by the discussion at the beginning of the proof we get a contradiction. On the 
other hand, if the algorithm terminates pro- ducing r' without redexes, then clearly the identity substitution 
is a solution ofF', and thus, by Lemma 1, F has a solution too. This completes the proof of (1). An easy 
consequence of the above two results is the existence of a principal solution. A solution S of P is principal 
iff S __r S', for every S' E St. Proposition 3 Let F be an instance of SUP with variables in X. If P 
has a solution, then it has a principal solution. Proofi Let us assume that P has a solution, say S. 
By Lemma 2, the algorithm terminates with an instance F' which has no redexes. We take the iden- tity 
substitution id which is a solution of F' and, by Lemma 1, transform it all l;he way back to get a solu- 
tion S* of F. Recall that S : X ~ 7" is coherent. By 471 Lemma 1, S is also a solution of F'. Since 
id Dr, S, by D-monotonicity of the induced transformation (cf. Lemma 1), S* E_r S , and of course S* 
D_r S. Since S was arbitrary, S* is principal. For technical reasons we introduce one more kind of variables. 
A phantom variable is an expression of the form ~lz, where ~ is an arbitrary variable, and II E {L, R}*. 
We identify ~ with ~, and agree that L((n) = ~n and R(~ n) = ~Rn for all II E {L,R}*. With the introduction 
of phantom variables, II( ) is now conveniently extended to a total function on the set of terms. For 
our purposes it will be easier to work with par- tial information about the sought solution. Thus we 
introduce the following definition. A path equation is an expression of the form n~ = /,~ (7) where 
II, A E {L,R}*, and ~,r/ E X. We say that the path equation (7) is satisfied by a vector = (S, S~,..., 
S,~) iff II('S(~)) = A(S(r/)). Let t = u be an equation between terms, and sup- pose that for some 11, 
A E {L, R}*, and some ~, r/E X we have { = II(t) and r/ = An(u) (or conversely: ( = II(u) and r 1 = AII(t)). 
Then the path equation rl=A( is said to be induced by "t = u". We say that a path equation is induced 
by an inequality "t <_i u", iff it is induced by the equation "(t)i = u". We will need a proof system 
for deriving the path equations from a given instance P. Axioms: A 11 path equations induced by inequalities 
in I' and all identity equations a~, = 5,o. Rules of Inference: IIa~, = AB,, Afl~ = E,r,, (transitivity) 
(symmetry) (instance) (subterm) EIIa~, = EA/3~ The next result establishes a relationship between path 
equations that are derivable in the above sys- tem and those induced by inequalities produced by the 
above algorithm. Lemma 4 1. If a path equation is derivable then it is satisfied by every solution ofF. 
In particular, if "a,, = IIfl~" is derivable, ands = (S, $1 .... , Sn) is a solution then-S(~O~) is of 
depth at least equal  to Inl. 2. Let F' be obtained from F after some number of reductions of I or H 
redexes, and let t be the term assigned to an a E X in F'. If a path equation is induced by the equation 
c~ = ~ then it is derivable from F. Proof (outline): (1) is proved by a routine induction on the length 
of a derivation of a path equation. (2) follows immediately from the next two claims. 1. If a path equation 
is induced by an inequality in F, then it is derivable from P. 2. Let I'" be an instance obtained from 
r' by re-ducing one redex I or II, and let t' and t" be the terms assigned to a variable a E X in F' 
and P", respectively. If a path equation is induced by the equation a = t", then it is derivable from 
the path equations induced by P' and the equation  a=t I.  3 Bounded Turing Machines Let M be a Turing 
Machine with set of states Q and tape alphabet A. \¥e assume that M has one tape, in- finite in both 
directions, and that tape cells are num- bered by integers. An instantaneous description (ID) of M is 
understood here as a quadruple (wl, a, rn, w2), where wlw2 E A* is the tape contents, a C Q is the current 
state, and m E Z (Z stands for the set of all integers) is the position of the head, which is assumed 
to scan the first symbol in w2. (This slightly unusual definition is chosen to distinguish between ID's 
that are identical except that one is obtained from another by a left or right shift. Such ID's would 
be identified by the usual definition.) A deterministic Turing Machine M is said to be bounded iff there 
is a positive integer k such that, if C is an arbitrary ID of M, then the number of dif- ferent ID's 
reachable by M from C is at most k. Put differently, M is bounded iff there is g, such that no sequence 
of moves may cause the tape head to go more than £ cells to the right or to the left from an initial 
position. The following theorem plays a crucial role in the proof of the undecidability of SUP. In his 
PhD thesis (Harvard University, 1965), Philip K. Hooper proves that the mortality problem for deterministic 
Turing machines is undecidable. 4 It turns out that the proof method discovered by Hooper carries over 
with- out substantial changes to the proof of Theorem 5. Because Hooper's result remains unpublished, 
we will give a detailed sketch of the proof of Theorem 5 in the final version of this report. Theorem 
5 The boundedness problem for determin- istic Turing machines is undecidable. We shall reduce the above 
problem to the semi-unification problem, which will imply the undecidabil- ity of semi-unification. First, 
however, we need some additional considerations. A Turing Machine is usu- ally understood so that at 
each stage, the head of the machine scans a single tape cell, and it may move left, move right, and remain 
at that cell, depending on the internal state and the scanned symbol. It will be more convenient for 
us to assume that the machine head is always positioned between two tape cells, and it must always move 
right or left. Let us formulate this more precisely. An Intercell Turing Machine (ITM) is a triple of 
the form Y = (Q, A, T), where Q is a finite set of stales;  A is a finite tape alphabet;  T_ Q x {-1,+1} 
x A x A x Q is a transition relation.  An instantaneous description (ID) of Y takes the form (wl, ~, 
m, w2), and is understood as in the case of con- ventional Turing Machines, except that the head is positioned 
between the (m- 1)-th and the m-th cells of the tape. The next move relation by on ID's of Y is defined 
as follows: (wla,~,m,~2) ~-r (wi,Z,m- 1,b~) for (cq - 1, a, b,/3) e T; (wl,c~,m, aw2) t-v (wlb,~,m+ 1, 
w2) for (cq +l,a,b,B) E T. 4A Turlng machine is mortal if it hMts when started from any ID. The notion 
of reachability for ID's and the notion of a bounded ITM are defined in the obvious way. An ITM is deterministic 
iff the following conditions hold: the set of states Q splits into two disjoint subsets QL andQR, so 
that T= (Qz x{-1}xAxAx  Q) u (OR x {+1} x A x A x O); T is a partial function from Q x {-1, +1} x A 
to  AxQ.  Thus, for a deterministic ITM there is at most one move possible from any given ID (the direction 
of the move determined by the internal state). Lemma 6 Let M be a deterministic Turing Machine. One can 
effectively construct an intercell Turing ma-chine Y, such that M is bounded iff Y is bounded. Proofi 
The reader will easily construct Y so that it simulates each move of M by at most three moves. It follows 
that the number of reachable ID's grows at most three times, and remains bounded. | Let Y = (Q, A, T) 
be an ITM. The symmetric clo- sure of Y is Ys = (Q, A, Ts), where Ts= TU((a,-z,a,b,~) : (~,z,b,a,~)ET}. 
 Clearly, the symmetric closure of a deterministic ITM is no longer deterministic. However, it preserves 
boundedness. Lemma 7 Let Y be a deterministic ITM. If Y is bounded then so is Ys. (Note that the converse 
is ob- vious.) Proofi Assume that Y is bounded. There exists a constant g such that, if C is an arbitrary 
ID of Y, and C' is reachable from C then the head positions in C and C' differ by at most g. Now suppose 
that Ys is unbounded. Then there must exist a sequence Co, C1,..., Cp of ID's such that, for all i = 
0,... ,p: C, = (~,, ~,, .~, ~3;  6'/ I-y s Ci+l, provided i < p;  ]rn0 -rnp] > 2g. One can assume 
with no loss of generality that m v > mo + 2g (because of the symmetry) and that, m0 < rni < rnp, for 
all i = 0,... ,p (otherwise, we choose an appropriate fragment of the sequence from the left- most to 
the rightmost position of tape head). Clearly, for i < p we have either Ci ~-y Ci+l or Ci+l by Ci. If 
it happens for some i that Ci b-r- Ci+l and Ci ~-y Ci-t, then Ci+l = Ci-1. The sequence Co,..., Ci-1, 
Ci+2, ..., Cp still describes a valid com- putation of Ys with the tape head moved more than 2i ceils 
to the right. Thus, if we choose our sequence to be a shortest possible, then there must be i {0,... 
,p}, such that Ci is reachable in Y both from Co and Cp. The tape head in Ci is at the position mi, between 
m0 and rap. Thus, rni -m0 or rnp -rni must be greater than i, and we see that Y is able to move its head 
by more than ~ cells. This contradicts our assumption. 4 From ITM to SUP From now on, let Y = (Q,A,T) 
be a deterministic ITM. Our goal is to construct an instance r of SUP such that I' has a solution iff 
Ys is bounded. We can assume without loss of generality that the tape alpha- bet A consists of only two 
elements: 0 and 1, with 0 used as the blank symbol. Indeed, otherwise one can easily construct Y' with 
the desired property, such that Y' is bounded iff Y is bounded. As before, by Ys we denote the symmetric 
closure of Y. Lemma 7 allows us to deal now with Ys ra£her than with Y. The variables of F will include 
the states of Ys. The construction of F will be such that the path equations induced by inequalities 
in F correspond to possible moves of Ys. Each ID of Y will be interpreted so that the tape contents to 
the left of the head repre- sents a path in a tree (0 stands for "left", and 1 for "right"), while the 
word to the right of the head de- notes a sequence of unknown substitutions. Note that this means we 
will have just 2 inequalities in F, thus providing another proof yet of the reducibility of SUP to the 
special case with 2 inequalities (eft [17]). Let us fix i to be either 0 or 1. In order to construct 
the i-th inequality in I" we consider all quintuples of Ts of the form (~,-1, z, i,1~), where ~,~, ~ 
are arbitrary. (We choose only left moves because of the symmetry.) Let $1,..., Sp be all such quintuples 
and let 7 t, for g {1,...,p} be new variables. The symbol X will now stand for the union of Q and the 
set of all new variables used in the construction. Assume that for g {1,...,p} we have St = (at,-1, 
mt, i, ft). We define a term gt to be fit___,3,t, if rt =0; 7 t ~/3 t, if ~t = 1; The i-th inequality 
is as follows: Note that all path equations induced by the inequali- ties in r are of the form: ai=L#, 
or ai=R#, where a,f E X, and i E {0, 1}. That is, informally, the left-hand sides of all inequalities 
are everywhere "deeper" than the corresponding right-hand sides by exactly one level. One observation 
that easily follows from this property is that all derivable path equations "IIa~ = E/3~" satisfy IIII 
+ Iwl = IEI + Ivl. Consider now the (undirected) graph G whose nodes are all expressions of the form 
"IIa~", where H E {L, R}*, a E X and w E {0, 1}*, and such that there is an edge between "IIa~o" and 
"Efl~" iff the path equa- tion "IIa,~ = E/3~" can be obtained from an axiom, by a number of applications 
of symmetry, instance and subterm rules. Clearly, a path equation is provable iff there is a path in 
our graph between the appropriate expressions. Note that, if 7 E X -Q, then all expres- sions involving 
7 have degree 1. Let ~o : {L, R}* ---, {0, 1}* be the isomorphism de- fined by/o(L) = 0 and ~o(R) = 1. 
The following lemma states the crucial relationship between Y and P. Lemma 8 Let II,~ {L,R}* and w, 
v {0,1}* be  such that Inl+lwl = I~1+1"1. Letp= Inl-I~l. Then the following conditions are equivalent: 
(1) The path equation 'TIc~, = Et3~ " is provable; (2) For every m Z, the ID's: (~(H),~,,~,w) a,,~Z 
(~o(~), [3, m -p, v) are reachable from each other.  Proof (outline): The proof of (2) =:~ (1) is done 
by an easy induction on the number of steps needed to reach one of the ID's from the other. Indeed, every 
step of the machine corresponds to a provable path equation. For example, let (~o(II), fl, rn- 1, 0w) 
be ob- tained from (~o(IIR), a, m, w) as a result of executing (a,-1, 1,0,/3). Then the path equation 
"Ra = rio" is induced by F and, thus, it is an axiom. By the sub- term, symmetry and instance rules, 
we get II~o,~ = IIRa~o. The details are left to the reader. The implication (1) =:> (2) easily follows 
by a simi- lar argument, because we can assume that all variables used in the proof are in Q (and thus 
each axiom corre- sponds to a machine move). Indeed, it suffices to ob- serve that if two nodes in the 
graph G are connected, they remain connected after removing all nodes of de- gree 1. II Finally, we arrive 
at our main lemma: Lemma 9 Y is bounded iff F. has a solution Proofi If r has no solution, then for 
some a, the al- gorithm of Section 2 assigns arbitrarily large terms to a. It follows from Lemma 4, that 
one can derive path equations of the form "Ha = 70.", with arbitrarily long [-I. Take k > 0 and let III]= 
g > k + 1. First note that a E O. Indeed, otherwise there is only one axiom involving a, say C~o = L'),. 
Thus, a occurs in path equations only in the context cm, a contradiction. If/3 E Q, then by Lemma 8, 
we have (e, 70, 0, v) reachable from {II, a, g, w}. If/3 ¢ Q, then again, there is only one axiom involving/3, 
say 701 -~-R6. Thus, v = lv', for some v t and the path equation "llc~,v = R6"" is provable. In any case 
we obtain a provable path equation corresponding to a pair of mutually reachable ID's of Y, and the head 
positions at these ID's differ at least by k. Since k was arbitrary, we conchlde that Y is unbounded. 
Now assume that P has a solution S. Let k be such that the depth of all terms S(oe), for o~ E X is at 
most k. Suppose that Y is unbounded. There are mutually reachable ID's such that the difference be- tween 
the head positions is more than k. Take the sequence of moves that transforms one of these ID's into 
the other, and choose the leftmost and the right- most position of the tape head during this sequence 
of moves. We have two ID's of the form: (~o(E), a, m, wv) and (~o(EII),/3, m+ p, v}, reachable from each 
other so that the tape head never moves left past the m-th cell and never moves right past the (m + p)-th 
cell (i,ere, p = Inl > k). One can easily see that also (e, a, m, w} and (II,/3, ra+p, ¢} are reachable 
from each other. By Lemma 8, we have a provable path equa- t.ion <'a,, = lift", with Ill} > k. But, by 
Lemma 4, it follows that S(70) must be of depth greater than k, a contradiction. llere is our main result: 
 Theorem 10 The semi-unification problem is unde- cidable. Proofi Let M be a deterministic Turing Machine. 
By Lemmas 6, 7 and 9, we can effectively construct an instance r of SUP, which has a solution iff M is 
bounded. The conclusion now immediately follows from Theorem 5.  References [1] Cosmadakis, S.S. and 
Kanellakis, P.C., "Func-tional and inclusion dependencies: a graph theoretic approach", in Advances in 
Comput-ing Research, Vol.3, edited by Kanellakis and Preparata, aAI Press, 1986. Cosmadakis, S.S. and 
Kanellakis, P.C., "Equa. [2] tional theories and database constraints", Pro-ceedings of 17-th STOC, 
1985. [3] DSrre, J. and Rounds, W., "On subsumption and semiunification in feature algebras", manuscript, 
Oct 1989 (submitted for publication). [4] Feferman, S. el al, editors, Collected Works of Kurt GSdel, 
Oxford Univ Press, 1986. [5] Henglein, F., "Type inference and semi-unification", Proc. ACM Syrup. LISP 
and Func- tional Programming, July 1988. Hooper, P.K., "The undecidability of the Tar-[6] ing machine 
immortality problem", Ph.D. Thesis, Computation Laboratory Report BL-38, tlarvard University, June 1965. 
 [7] Kanellakis, P., Mairson, H.G. and Mitchell, J.C., "Unification and ML typing", submitted for pub- 
lication. Preliminary versions appeared in POPL 1989 and POPL 1990, under the respective ti- tles "Polymorphic 
unification and ML typing" (by Kanellakis and Mitchell) and "Deciding ML typability is complete for deterministic 
exponen- tial time" (by Mairson). [8] Kapur, D., Musser, D., Narendran, P., and Still- man, J., "Semi-unification", 
Proc. of 8-lh Confer- ence on Foundations of Software Technology and Theoretical Computer Science, Pune, 
India, Dec. 1988. [9] Kfoury, A.J. and Tiuryn, J., "Type reconstruc- tion in finite-rank fragments of 
the second-order A-calculus", Boston Univ Technical Report, No. 89-010, Oct 1989 (to appear in Proc. 
of LICS 1990). [10] Kfoury, A.J., Tiuryn, J. and Urzyczyn, P., "Com- putational Consequences and Partial 
Solutions of a Generalized Unification Problem", Proc. ~-th IEEE Symp. Logic in Computer Science, June 
1989. [11] Kfoury, A.J., Tiuryn, J. and Urzyczyn, P., "An Analysis of ML typability", Boston Univ Techni- 
cal Report, No. 89-009, Oct 1989 (submitted for publication). [12] Leiss, H., "On type inference for 
object-oriented programming languages", Proc. Logik in der In- formatik, Karlsruhe, Springer-Verlag, 
Dec 1987. [13] Leiss, H., "Decidability of semi-unification in two variables", Technical Report INF 2-ASE-9-89, 
Siemens, Munchen, July 1989. [14] Mitchell, J.C., "The implication problem for functional and inclusion 
dependencies", Informa-tion and Computation, 56, no. 3, 1983. [15] Mycroft, A., "Polymorphic type schemes 
and re- cursive definition," Int'l Symp. on Programming, ed. M. Paul and B. Robinet, LNCS Vol 167, pp 
217-228, Springer-Verlag, 1984. [16] Parikh, R.J., "Some results on the length of proofs", Trans. Amer. 
Math. Soc., 177, pp 29- 36, March 1973. [17] Pudl~i.k, P., "On a unification problem re-lated to Kreisel's 
conjecture", Commentationes Mathematicae Univcrsitatis Carolinae, Prague, Czechoslovakia, 29, no. 3, 
pp 551-556, 1988. [18] Purdom, P.W., "Detecting looping simplifica- tions", in Proc. 2-nd Conference 
on Rewriting Techniques and Applications (RTA), Bordeaux, France, LNCS Vo1250, pp 54-62, Springer-Verlag, 
1987. [19] Statman, R., Private communication, August 1988. 
			