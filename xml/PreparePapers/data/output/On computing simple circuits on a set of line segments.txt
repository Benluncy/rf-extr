
 ON COMPUTING SIMPLE CIRCUITS ON A SET OF LINE SEGMENTS David Rappaport Hiroshi Imai $ God.fried T. 
Toussaint t School of Computer Science McGill University 805 Sherbrooke St. W. Montreal, Canada H3A 2K6 
 :~ Department of Mathematical Engineering and Instrumentation Physics University of Tokyo Bunkyo-Ku, 
Tokyo, Japan 1. Ir..troduction. Given a set of non-intersecting line segments in the plane, we are required 
to connect the line seg-ments such that they form a simple circuit (a simple polygon). However, not every 
set of segments can be so connected. Figure 1 shows a set of segments that does not admit a simple circuit. 
This leads to the challenging problem of deter- mining when a set of segments admits a simple cir-cuit, 
and if it does, then find such a circuit. It has been shown [Rappaport] that in general, to determine 
whether a set of segments admits a simple circuit is NP-complete. In this paper an optimal algorithm 
is presented to determine whether a simple circuit exists, and deliver a simple circuit, on a set of 
line segments, where each segment has at least one end-point on the convex hull of the segments (a CH-connected 
set of segments). Furthermore this tech-nique can be used to determine a simple circuit of minimum length, 
or a simple circuit that bounds the minimum area, with no increase in computational complexity. The rest 
of the paper is summarized. In section 2 cf this paper, the preliminary definitions and nota-tion are 
introduced. In section 3, the geometric pro-perties of the set, of segments are used to transform the 
segments into an associated graph. Permission to copy without fee all or part of this material is granted 
provided that the copies are not made or distributed for direct commÂ¢.rcial advantage, the ACM copyright 
notice and the title of the .~ :~iication and its date appear, and notice is given that copying is by 
!:crm:s,';or vf the Association for Computing Machinery. To copy otherwise, or to republish, requires 
a fee and/or specific permission. &#38;#169; 1986 ACM 0-89791-194-6/86/0600/0052 $00.75. A Hamiltonian 
circuit in this graph is !then used to deliver the connections of segments that form the boundary of 
a simple polygon. In section 4, a linear algorithm is introduced which finds, if there is one, a Hamiltonian 
circuit in graphs of the class obtained by the transformation discussed in section 3. This algo-rithm 
actually computes the minimum weight match- ing on an extremely structured bipartite graph. From this 
the result on minimal simple circuits follows immediately. Section 5, relates the details of a neces- 
sary step in the segment to graph transformation. This involves the intersection of line segments in 
the plane. The paper is summarized in section 6, where the proof of optimality of the algorithm is given. 
2. Definitions and Notation. A set of non-intersecting line segments S is represented as S --~ (s o,S 
1 ..... sn-l) (to be referred to from now on as segments). The endpoints of S will be represented by 
the set of 2n points, P ---- (P0,P~, .... P 2n -1)' Define a simple circuit as a sequence of points in 
the plane that lie in clockwise order on the boundary of a simple closed curve. A simple circuit can 
be represented by a set of segments, the edges of the simple circuit. A simple circuit on a set of segments, 
S, is a simple circuit representable by a superset of S. Given a set of non-intersecting segments represented 
by S it is sometimes possible to find a simple circuit. If this circuit exists we say that S ~ admits 
a simple circuit. Denote R a set of n non- intersecting segments whose endpoints are in P such that R 
(.J S represents a simple circuit and R and S 52 are disjoint sets. We will refer to R as the set of 
augmenting segments of S. In Figure 2 a set of seg- ments is shown in solid lines, with its corresponding 
set of augmenting segments in broken lines. The convex hull CHIP) of a set of points P is the smallest 
convex region enclosing P. Note that if S admits a simple circuit this circuit is enclosed by the convex 
hull of the endpoints of S, CHIP). If S contains a segment s such that both endpoints of s lie on CHIP) 
and the interior of s lies in the interior of CHIP), then denote s a cutting segment. Theorem 2,1: If 
S contains a cutting segment then S does not admit a simple circuit. Proof: Assume S admits a simple 
circuit and con-tains a cutting segment s. Let p,. and p/, in P be 'points on different sides of s. Since 
every simple cir- cuit on S is enclosed by CHIP) then every path on the simple circuit from p,. to Pi 
must pass through s. It is well known that for every pair of points x,y on :a circuit there exists two 
disjoint paths from x to y. Since every path from p,. to Pi must pass through s, S cannot admit a simple 
circuit. | This result suggests an easy way to determine whether a set of segments may not admit a simple 
circuit. Given S and P, we compute CHIP) and then examine segments of S to see if any are cutting segments. 
The convex hull of a set of points can be computed in O( [PI log IPI ) time, [Graham], [Tous-saint], 
where IP I represents the cardinality of P. It should be noted, however, that even though a set of segments 
does not have a cutting segment, it still may not admit a simple circuit. (Figure 3) For the remainder 
of the discussion we will con- strain the domain of the set of segments. Define a set of segments as 
CH-connected if for every segment 6 E S, at least one of the endpoints of s lies on CHIP). We will also 
assume that the set S in the ensuing discussion contains no cutting segments, and Isl > 4.  3. Geometric 
Results. The approach that will be taken is to associate a CH-connected set of segments represented by 
S to a graph G -~ iV,E). If the endpoints of S, P {Po,Pl ..... P2n-l} and the vertices of G, V ~---{Vo,V 
~ ..... v2n_l} then p~. corresponds to v~-. Similarly a segment referred to as (pi ,Pi ) has its corresponding 
image, the edge (vl ,v i). Using the geometric proper- ties of S, we arrive at the appropriate set of 
edges E so that solving a combinatorial problem in G, leads to a solution to our original problem. In 
the search for augmenting segments to form a simple circuit one must consider likely candidates for being 
augmenting segments. Clearly it simplifies matters if the pool of candidates is small. Initially there 
are O(n ~) candidates i.e. P X P such that (Pi,P] ) ~ S and Pi ~A p/. However the upcoming key lemma 
reduces the number of candi-dates drastically. An intuitive description will be given, before stating 
the lemma formally. Denote segments of S whose endpoints are adjacent on CHIP) as neighbors. The following 
lemma proves that all the endpoints of augmenting segments are endpoints of neighbors in S. Lemma 3.1: 
Given a CH-connected set of segments S that admits a simple circuit represented by the sequence of points 
T = (to, t 1 ..... t2n_~). Let B = (bo, b~ ..... b~, ) be the sequence of points representing CHIP). 
Assume without loss of generality that bo~-t o. For every such sequence T a simple circuit on S, the 
sequence B is a subsequence of T. Proof: Assume b 1,b3,b2 is a subsequence of T. (See Figure 4) This 
creates a polygonal chain from b l to b~ that separates b2 from the remaining points. By using arguments 
similar to those of theorem 2.1 we see that this sequence must lead to a non-simple cir-cuit, a contradiction. 
| The pool of O(n) candidates can be reduced further by considering segment intersection of candi- dates. 
Clearly an augmenting segment cannot inter-sect any segment in S. By a naive algorithm it would require 
at most O(n 2) time to determine which of the current O(n ) candidates intersect any of the n segments 
of S. However using a variant of Shamos and Hoey's line sweep technique [Shamos and Hoey], and a careful 
decomposition of the segments involved this can be done in O(n log n) time. To avoid a lengthy digression 
from the current discussion a detailed description of this algorithm is postponed until section 5. As 
was stated earlier it is desirable to put this problem into a purely combinatorial setting. By a.sso-ciating 
a graph to the original points and segments. the goal will be to determine the existence of a Ham- iltonian 
circuit in the graph, that corresponds to a simple circuit in the underlying segments. A Hamil-tonian 
circuit is a simple closed path through all the nodes of a graph. Of course the Hamiltonian circuit in 
G requires the inclusion of the edges that correspond to the segment, s S. Let Es represent the edges 
in G that correspond to segments of S. Denote an E~-required Hamiltonian circuit, H, a Hamiltonian circuit 
of G such that H N E, = E,. 53 If the current pool of candidates Is used as the edge set in G and an 
E e -required Hamiltonian circuit is found in G, then we are not ensured that the resulv- lng circuit 
of segments is non-Intersecting. This Is because among the pool of candidates so far described, one notices 
that, there may be intersec-tions between pairs of candidates. It is useful to dis- ~': gulsh between 
three types of these intersections. Let a, b be two candidates. ~_,se 1" All four endpoints of candidates 
a and b are endpoints of only two of the segments of S (See Fig- ure 5). In this case we can allow the 
images of both a and b to appear in the final graph G. Any Ee-required Hamiltonian circuit of G cannot 
contain both a and b. We would visit both endpoints of the segments connected by a and b, before visiting 
the -oct of the segments of S, therefore, a and b cannot %~es.r together in a Hamiltonlan Circuit. Cc~se 
2: The four endpoints of a and b lie on three different segments of S. (See Figure 6). Therefore one 
of the segments of S has a candidate at both of its endpoints. Denote the segment t incident to both 
a and b with pa the endpoint of t on a and Pb the endpoint of t on b. Denote the neighbors of t as t-and 
t+. At least one endpoint of t is on CH(P), so one endpolnt of a or b must also be on CH(P). Without 
loss of generality assume pa is on CH(P ), and a's other endpoint is on t-. Because a and b intersect 
they cannot be edges of CH(P). Observe that the candidates connecting Pb with each of the endpoints of 
t + must intersect a. Therefore Pb is iso- lated from the segment t + by a. This implies that a cannot 
be an augmenting segment. It is convenient to label the segments in S so that st is a neighbor of s,.+~ 
for all i~---0 ..... n-1 (addition modulo n ). Let c be a candidate with encN points on the segments 
st and 8t_~. Define c a block-in a candidate if either the segments st and st+~ are on opposite sides 
of a chain (st_~,c), or the segments st_ ~ and st_ 2 are on opposite sides of a chain (s t ,e ). The 
candidate a described above is a blocking candi- date. Lemma 3.2: A blocking candidate cannot be an aug-~-nenting 
segment. ~roof: This follows immediately from the preceding d~.scussion. From the definition of blocking 
candidates it should be clear that O(n ) operations are sufficient to d~termine all blocking candidates. 
Ca~ 3: The four endpoints of a and b lie on four different segments of S. Let a be a candidate with endpoints 
on sÂ¢ and st+~, and let b be a candidate with endpoints on 8 i and s]+~. Let h t denote the convex hull 
edge from s t to st+ ~, and let h i denote the convex hull edge from segment 8y to By+ 1 . Therefore 
the quadrilaterals Q~ ~ (st,a ,st+~ ht ) and Qi '~ (sj.b ,sy+~,hy) intersect. (Observe that if one of 
the endpoints a or b is on ht or hi, then we must consider triangles rather than quadrilaterals, however 
this does not effect the argument.) Two intersecting polygons intersect in at least two points. The inter-section 
of a and b accounts for one of the intersec-tions. Since, no edge can intersect a convex hull edge and 
none of the segments of S intersect, we must conclude that one of the candidates intersects a seg-ment 
of S. But this type of intersection has been previously determined and the offending candidate removed. 
i Lemma 3.3-If two candidates a and b intersect, and the four endpoints of a and b lie on four different 
segments of S, then a or b must intersect one of those four segments. Proof: Follows immediately from 
the preceding dis-cussion. | The construction of a graph with the property that the original segments 
admit a simple circuit if and only if the graph admits an Es-required Hamil- tonian, circuit can now 
be obtained. Let C represent the set of candidates, with endpolnts on neighbors, that do not intersect 
any segment in S, and are non- blocking, The edges E of G correspond to the line segments S ~J C. Lemma 
3.4: The segments S admit a simple circuit if and only if G ~-~ (V,E) has an E e-required Hamil- tonian 
circuit. Proof'. Suppose S admits a simple circuit. It is required to show that the augmenting segments 
have their counterparts in G. It was shown that all aug-menting segments were of the type used to obtain 
the set C above. Every segment in C has a counterpart edge in E so G must have an E,-required Hamil-tonian 
circuit. Suppose G admits an E,-required Hamiltonian circuit. Edges in E are easily mapped back to seg-ments. 
The resulting circuit (of line segments) must be simple by the way candidates were chosen. III It is 
well known that in general, determining whether there is a Hamiltonian circuit in a graph is NP-complete. 
However in the next section a linear time algorithm is presented to determine whether an 54 E,-required 
Hamiltonian circuit is present in G. Furthermore the same algorithm is used to determine minimum weight 
E,-required Hamiltonian circuits.  4. Finding Es-required Hamiltonian circuits. Let the graph G can 
be characterized as fol-lows: G -~-(V,E) where V ~ (Vo,V 1 ..... v2,_1) and E -~E. ~J EÂ¢ where: E, = 
{(v~;,v~Â¢+,), i ----0 ..... n-l} and _ i = o ..... L.J i = o..... n-l} (all index additions are modulo 
2n ). Denote GÂ¢ as the the graph G ~-~ (V,E c). The Graphs G and GÂ¢ have cyclic structures. It is more 
convenient to designate a vertex a start vertex and a vertex an end vertex and 'break' the cyclic structure. 
Remove from EÂ¢ (if they exist) the edges (Vo,V2), (Vo,Va) and (Vl,V2,_l), ( V l,V 2,_2). Call the resulting 
graph Go' -~-(V,Ec'). To find an E,-required Hamiltonian circuit in G, we will use the graphs G'Â¢, A 
matching in a graph is a set of edges no two of which share a vertex. A maximal matching is a matching 
on the maximum number of vertices in the graph. A matching is said to be camplcte if a maxi-mal matching 
in the graph contains all vertices of the graph. The following theorem immediately leads to an algorithm 
for finding an E,-required Hamiltonian cir- cuit in G. Theorem 4.1: Given the graph G and GÂ¢' as described 
above. If a maximal matching in the graph Go' is a complete matching then there is an E,-required Hamiltonian 
circuit in G. Proof: Every complete matching in GÂ¢' must match v~ with either v 2 or v 8. Choosing either 
of these edges in the matching and deleting edges on matched vertices we are left with a graph having 
the same structure as our original graph. This gives the complete matching M the property that every 
edge m E M connects two edges E E,, and there are no disjoint cycles. The edges E, U M comprise a Ham- 
iltonian circuit in G. | To determine whether there is an E,-required Hamiltonlan circuit in G simply, 
compute the maximal matching of GÂ¢' . If the matching is com-plete then an E e-required Hamiltonian circuit 
in G can be easily constructed. If there is no complete matching then reunite the edges removed from 
GÂ¢. Now remove from G c (if it exists) the edges (vl,v2), (vpva) and (Vo,V~n_l), (Vo,V2n_~) to obtain 
Go' ' -----(V,Ec' ' ). Compute the maximal matching in GÂ¢' ' If there is a complete matching then there 
is an Es-required Hamiltonian circuit in G. Otherwise it can be concluded that there is no Hamiltonian 
Cir- cuit In G. A bipartite graph is a graph whose vertices V can be divided into disjoint subsets W 
and U such that every edge in the graph has one endpoint in W and one endpoint in U. It is easy to see 
that Go' and G c' ' are bipartite graphs. The vertices {Vo, Vl,V4,Vs, Vs, Vo } C W, and {v2,va, v,,v7,V,o,VH 
...'"} __C U. I'n [Hopcroft and Karp] an efficient algorithm based on a network flow algorithm is given 
to find maximal matchings in bipartite graphs. The complexity of this algorithm is o(I v I [El ). in 
the problem considered here the edges and the vertices are both of cardinality O(n ) so the running time 
is O( n a/2 ). The structure of the graphs GÂ¢ t and GÂ¢ t permit a more efficient method of determining 
whether there is a complete matching. This algo-rithm will now be discussed. A weighted graph has a real 
value w(e ) assigned to each edge e of the graph. This algorithm com-putes the minimum weight matching 
in the weighted graph G, ----- (V,E,). V is defined as above and: E, = i = o ..... 2n-l} LJ i =o ..... 
n-l} U {(" 21"t'1"{) 21' "t")' i = 0 ..... n--l}. Assign weights w(c) ~-~ 1 if Â¢ q EÂ¢' and w(Â¢) ---~ 
2 if e ~ EÂ¢* . The minimum weight complete matching in G, is computed as follows: i ALGORITHM MATCH .--w(v,,%); 
[31 .--wCvl,v3), fori ~--- 2 to n-1 do begin w[2i] "-- min(w[2i-1] + w(v~_~,v2i ), w[2i-2] + w(v2i_t,v21)); 
w[2i+l] ~ min(w[2i-l] + w(v2Â¢_2,v~i ), w[2i-2] + w(v2~_l,v~i))  end ; [2 *-- min(w[2n-1] + w(va,_2,v0), 
~[2n-2] + w(v~._.Vo)); 55 The cost of the minimum weight matching is kept in 12. If the cost is n then 
a complete matching exists in Gc' , otherwise there is no complete match- ing. To prove the algorithm 
correct and show that O(n ) operations are used is straight forward. To obtain in O(n) time, the edges 
of the complete matching M = (ml,m 2 ..... mn), the following simple procedure can be used. ALGORITHM 
OBTAIN k~--0; for i *-- n downto 1 if w[2i-2] = ~ -w(v2~_l,v k ) then m i 4--- (v2~_l,v k); ~ ~-- ~- 
1; k ~-- 2i-2 else rn~ ~ (v~_2,v k); f~ ~-- f~ - 1; k *-- 2i-1; Assume a complete matching in G, has 
been found. A direct consequence of the previous result is that a simple circuit on S, that has minimum 
perime- ter can be determined. A weighted graph G~ ~-~ (V,E t ) is constructed. E l is defined as E, 
except for the weight assignments. Let the Euclidean length of a candidate be the weight given to the 
corresponding edge E El, and, E Ec' For any edge E El ~ Ec I assign a weight of co. Finding a minimum 
weight complete matching, in GI reveals a simple circuit of minimum perimeter. The simple circuit which 
encloses the minimum area can also be found by using a weighted graph. The weights assigned to edges 
in G hinge on the observation that the area of a simple polygon Q, is the area of CH(Q) less the sum 
of the areas of the polygonal regions that constitute the difference between CH(Q) and Q. Denote the 
polygonal regions that constitute the difference between CH(Q ) and Q as convex deficiency polygons of 
Q. The con-vex deficiency polygons of every simple circuit on S, consist of two segments s i , si+~ and 
the augmenting segment connecting 8; and ss.+l. (If the augmenting segment happens to connect two convex 
hull vertices we can conveniently define this as a zero area convex deficiency polygon.) Therefore every 
candidate describes an unique convex deficiency polygon. Assign weights to G, giving the weighted graph 
G a where edges in Ga corresponding to candidates are given weights equal to the negation of area of 
the deficiency polygon described by that candidate. For edges ~ EÂ¢ ~ assign a weight of 1. A complete 
matching in Ga with minimum weight, is a simple circuit that encloses the smallest area. 5. Finding Intersections 
of Candidates and Segments. Determining candidate-segment intersections is a necessary step to obtain 
the final set of candidates, as described in section 3. It was stated in section 3. that this could be 
computed in O(n log n) time. In this section the details of this algorithm are described. One possibility 
to consider is to compute all segment intersections Given a set of n line segments in the plane the algorithm 
of Bentley and Ottmann [Bentley and Ottmann] can be used to report all pair- wise intersections, in O(n 
log n + k log n ) time, where k represents the number of pairwise intersec-tions found. Unfortunately 
the number of pairwise intersections, may be large. In fact k may be as large as O(n2). In Figure 7 an 
example illustrating this phenomenon is shown. This example can be gen- eralized, showing that as many 
as O(n 2) intersections may occur. It is not necessary to compute all pairwise seg- ment intersections 
for the problem considered here. All that is required is to find candidates that are intersected by segments. 
Since there are a linear number of candidates the output is at most linear Clearly we need not compute 
all O(n 2) palrwise inter- sections. Consider two sets of disjoint line segments A and B. It will be 
useful to be able to report in O(n log n) time all segments of A that are inter-sected by any segment 
of B. An algorithm used to accomplish this, is based on the line sweep technique of Shamos and Hoey [Shamos 
and Hoey]. The algorithm scans a vertical line from left to right while maintaining a balanced tree that 
represents the order in the y direction of the segments intersected by the scanning line. Denote this 
as the y-order of the segments. The balanced tree allows insert and delete operations on the y-order 
in O(log n ) time. Intersecting line segments will b'e adjacent in this ordering The y-order changes 
when; the left endpoint of a segment is encountered, and the segment is inserted into the y-order; the 
right end-point is encountered, and the segment is deleted from the y-order; or two segments cross thus 
interchanging their relative position in the y-order. In the problem of our concern, any time an intersection 
is found once of the intersected edges can be dispensed with. go the case of segments changing their 
relative position in the y-order does not occur. A pseudo code algq-rithm follows: ALGORITHM SEGMENT 
INTERSECTION step 1: 56 traverse the endpoints of A and B from left to right; for each endpoint do case 
left endpoint of segment s : insert s into y-order; Check if segments above or below in y- order intersect 
s ; if intersection found then begin report intersection; if s E B then s ~-- edge E A that was intersected; 
goto step 2 end; case right endpoint of segment s : t goto step 2; step 2: repeat remove s from y-order; 
test segments above and below it for intersection; if intersection found then report intersec- tion; 
8 *-- edge E A that was intersected; until no intersection found; goto step 1; The proof of correctness 
and complexity of O(n log n) is a straight forward extension of the result of Shamos and Hoey. Now it 
will be shown how this algorithm can be applied to the candidate-segment intersection problem. Recall 
there are segments S ------(So,S 1 ..... s,_l), with endpoints in P -~ (Po,Pl ..... P2,-1), where each 
segment E S has at least one endpoint on CH(P). As before assume that segments 8e and 8~+~ , i ~--~ 0, 
.... n-l, (addition modulo n) are neighbors on CH(P). Denote the endpoints of each segment 8s" by st 
-~-(sih,se ~) where s~h denotes an endpoint of S on CH(P). The candidates considered for intersection 
can now be expressed as C Co U c, U C2 U C., where Co = (sih,ss'+,j,), C~ = (Sik,8~+~k), 02 = (Slk,8;+U), 
08 = (%,8;+U), ~0 ..... n-1. Candidates from C o do not have to be tested for intersection, since they 
are on the convex hull. Handling candidates from the other classes requires an examination of different 
cases of candidate inter-sections. The terminology of section three will be used to distinguish candidate 
intersections. It is easy to see that candidates from within the same class Ci, i~---1,3 cannot intersect 
in a case 1 intersection. Blocking candidates, those candidates which intersect in a case 2 intersection 
can be predetermined and eliminated using the method suggested in section 3. Thus after all blocking 
candidates have been removed the only way two candidates from within the same class C,. can intersect 
is in a case 3 intersection. Recall in lemma 3.3 it was shown that two candidates involved in a case 
3 intersection necessarily intersect a segment E S. Furthermore the segment E S is one of four segments 
namely the segments connected by the intersecting candidates. Therefore the decomposi- tion of C into 
the classes C~, C 2 and Cs can be used to determine candidate-segment intersections. We can use a slightly 
modified ALGORITHM SEGMENT INTERSECTION. With an input of candidates in C i i ~-1,3, and S any intersection 
found is either a candidate-segment intersection which can easily be handled, or a candidate-candidate 
intersection of case 3. We are assured one of these candidates also inter- sects a segment E S, and in 
constant time we can determine this candidate. Any candidate-candidate intersection we may encounter 
is also a candidate-segment intersection and can be easily handled as such. Therefore we can conclude 
that all intersections of candidates and segments can be determined in O(n log n) time. An alternate 
method to compute candidate-segment intersections has been proposed by Suri [Suri]. By using a clever 
observation and the triangu- lation algorithm of Tarjan and Van Wyk, Suri can determine all candidate-segment 
intersections in O(n) time. In the next section the results of this paper are summarized. 6. Summary. 
The main result of this paper is: Given a set of CH-connected segments S an O(n log n ) algorithm is 
presented that returns a simple circuit on the seg-ments, if such a simple circuit is admitted by S. 
ALGORITHM SIMPLE CIRCUIT Input : A set of segments S with endpoints P. Output: A set of augmenting segments 
R, where T R Ljs represents a simple circuit. If there is no simple circuit on S then report this.  
 step 1: Compute the corresponding graph G and get G' ssubgraphs GÂ¢ , G c~ and Gel t ; step 2: Compute 
a maximal matching M in G c ~ ; if M is not a complete matching then Compute a maximal matching M in 
C, c ~ ~ ; if M is a complete matching then E0 LJ M is a Hamiltonian circuit in G, and R corresponds 
to the edges M in G ; 57 otherwise report no simple circuit; Theorem 8.1" Given a set S, of n CH-connected 
segments in the plane it can be determined whether S admits a simple circuit, in O(n log n ) operations, 
and the circuit will be delivered in the same time bound. The results of the previous sections lead up 
to the proof of this theorem. It will now be shown that: Theorem 6.2: O(n log n) is necessary to deliver 
a simple circuit on a CH-connected set of segments. Proof: The problem will be reduced to sorting real 
numbers. Given a set of n distinct reals, r~, i~O, .... n-1. We can determine the minimum and max-imum 
values, denoted by r t and r r respectively, in O(n) time. Construct n vertical line segments 8~, i =0 
..... n-l, where st has endpoints (r~,0), (r; ,1), except where i = I,r the endpoints are (r t,0),(r 
t,2) and (r r ,0),(r r ,2). By inspection one sees that these segments are CH-connected and they admit 
a simple circuit. Traversing the segments in the order dictated by the augmenting segments, a cyclic 
permutation of the real numbers in sorted order, is obtained. It is well known that the lower bound for 
sorting is O(n log n). Therefore O(n log n) is necessary to deliver a simple circuit on a CH-connected 
set of seg- ments. | Theorem 6.3 ALGORITHM SIMPLE CIRCUIT is optimal. Proof-Follows immediately from 
theorems 6.1 and s.2. II  Acknow ledgements We are indebted to the attendants of a seminar in Computational 
Geometry, held at McGill in the fall of 1984, where this problem was originally dis- cussed. In particular 
we thank Minou Mansouri who first showed the example in Figure 3, and Hossam EIGindy who inspired the 
concept of blocking seg- ments. Finally a discussion between the first author and Ryan Hayward led to 
ALGORITHM MATCH. References [Bentley and Ottmann] Bentley, J. L., and T. A. Ottmann,"Algorithms for 
Reporting and Counting Geometric Intersections", IEEE Transactions on Computers, vol. c-28 No. 9, (1979), 
643-647. [Graham] Graham, R. L., "An Efficient Algorithm for Determining the Convex Hull of a Finite 
Planar Set", Information Processing Letters, vol..1, (1072), 132- 133. [Hopcroft and Karp] Hopcroft, 
J. E., and R. M. Karp, "An n 6/2 Algorithm for Maximum Matehings in Bipartite Graphs", SIAM Journal on 
Computing, vol. 2 (1973), 225 -231. [Rappaport] Rappaport, David, "Computing Simple Circuits on a Set 
of Line Segments is NP-Complete" Technical Report No. SOCS-86.6 McGill University 1986. [Shamos and Hoey] 
Shamos, M. I. and D. Hoey, "Geometric Intersection Problems", Proceedings of the 17th FOGS, Oct. 1976, 
208 -215. [Toussaint] Toussalnt, G. T., "A Historical Note on Convex Hull Findlng Algorithms", Technical 
Report No. SOCS-88.1j McGill University (1983). [Surl] Suri, Subhash, Personal communication. 58 .j,!/ 
J / / I y Ji 1// Figure 1. )P Figure b2 2. /b3 Figure 3. Figure 4. I\ .J I \ a \ 1 \ \ t \ b 1- t- Pb 
a -N \ "\ Figure 5. Figure 6. 59 /- Ho d ! ! 7 Figure 7. 60 
			