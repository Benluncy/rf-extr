
 Direct Volume Rendering of Curvilinear Volume s Jane Wilhelms, Judy Challinger , Nairn Alper, and Shankar 
Ramamoorth y University of California, Santa Cruz Arsi Vaziri , NAS/NASA-Ames Research Center Abstract 
Direct volume rendering can visualize sampled 3D scala r data as a continuous medium or extract features 
. However , it is generally slow . Furthermore, most algorithms fo r direct volume rendering have assumed 
rectilinear gridde d data. This paper discusses methods for using direct volum e rendering when the original 
volume is curvilinear, i .e . , is divided into six-sided cells which are not necessaril y equilateral 
hexahedra . One approach is to ray-cast suc h volumes directly . An alternative approach is to interpolat 
e the sample volumes to a rectilinear grid, and use this regula r volume for rendering . Advantages and 
disadvantages of th e two approaches in terms of speed and image quality are explored . Introductio 
n Direct volume rendering creates an image of sampled vol­rune data by mapping from the data values 
directly t o pixel contributions, without the creation of intermediat e geometric representations . By 
using sophisticated mappin g schemes, the volume can be visualized as a semi-transparen t continuous 
medium or features such as isosurfaces can b e extracted, or both [DCH88, Lev88, Sab88, UK88, Wes9O] 
. This extreme flexibility makes direct volume rendering a n attractive technique . However, it is slow, 
and considerabl e recalculation is necessary to create images from alternat e viewpoints. Methods that 
create intermediate geometrica l representations, such as polygon meshes, have the advantag e that algorithms 
available in hardware on graphics worksta­tions can make rendering such representations interactive . 
Another important limitation on most published method s in direct volume rendering is that data is generally 
assumed to be sampled in a rectilinear grid . In many applications, Permission w copy utihont fee all 
or pall of this material is granted provided that the copie s are no made or distributed for direct commercial 
ads ;ttage, the ACM copyright notice and the tide of the publication and its date appear, and notice 
is given that eapying is by permission of the Association for Computing Machinery. To copy- ulhunsise, 
or to republish, requires a fe e andior specific perntissioa . 1171990 ACM 0-89791-4 17- 690/001 21004 
1 J I .50 sample data is not distributed in this regular a fashion . Grids may be warped to fit around 
objects or consist of highl y irregular sample patterns . In this paper, we explore the use of direct 
volum e rendering for data from computational fluid dynamics . Relatively little work has been done in 
this area [SN89] . The sample points are assumed to lie in a "curvilinear grid" , where space is subdivided 
into cells defined by eight corne r points, but the faces of the cells are not necessarily plana r and 
the grid points may not lie on orthogonal axes [Fle88 , plo89]. We study two approaches : 1. Cast rays 
through the curvilinear volume, extending ray ­casting methods for rectilinear volumes [Lev88, Cha9O] 
. 2. Interpolate between the sample points to find ne w sample points arranged in a rectilinear grid, 
and us e traditional ray-casting on the new volume .  The first approach is less prone to accumulation 
of inter­polation errors and easily accommodates irregular samplin g densities. The second approach is 
generally much faster . as many simplifying assumptions can be made in traversin g regular grids . Section 
2 provides background in direct volume rendering . Section 3 describes the ray-casting method used . 
Section 4 describes the interpolation methods used to convert curvi­linear volumes to rectilinear ones. 
Section 5 provides some experimental results . Section 6 describes extensions to th e work using hierarchical 
interpolation . Section 7 describe s some encouraging results on using volume visualization t o study 
turbulence . Section 8 draws conclusions . 2 Overview of Volume Rendering For direct volume rendering, 
visual contributions from th e volume to each pixel must be calculated by mapping th e scalar sample 
values within the volume to color and opacity . Early work using this method (see, e .g. [Wil90b] fo 
r references) used quite simple mappings . Recent work has concentrated on flexible and sophisticated 
mappings whic h can represent the volume as a continuous semi-transparen t medium, extract features, 
or use some combination of bot h [DCH88, Lev88, Sab88, UK88, Wes9O] . The two mai n approaches used for 
volume rendering are ray-casting and projection . ® In ray-casting, rays are cast out from the viewer 
throug h the hypothetical screen pixels . The contributions to th e ray from points [Lev88] or regions 
[Sab88, UK88] alon g it are calculated . This approach is simple to implement , but is liable to aliasing 
problems and is possibly les s amenable to parallel processing [UK88] . ® In projection methods, each 
subvolume of the volume i s projected onto the hypothetical screen pixels, and it s contribution to the 
pixels affected is calculated [UK88 , DCH88, Wes90] . The projection of subvolumes can b e more complex 
to implement, though it has potential fo r taking advantage of coherence [Wil90a] and is less liabl e 
to aliasing . Another variation in the approaches described is that some methods [DCH88, Sab88, Wes90] 
treat the sample s as voxels, i .e. constant data value regions surrounding th e grid location, while 
others [Lev88, UK88, Wi190a] treat the samples as the corners of hexahedral cells . A continuou s function 
is generally assumed to pass through the cell a s defined by the corner sample values . Treating the 
volume s as voxels makes fewer assumptions about the data bu t can lead to rather blocky images . Treating 
the volumes as cells produces smoother visual images but assume s that the interpolation method is appropriate 
[WVG90b] . Interpolation can be a significant cost in the algorithm . 3 Ray-Casting Volume s We have 
used tine ray-casting approach to direct volum e rendering, as seeming more amenable for implementation 
with irregular volumes [Cha90] . The renderer can handle a mixture of volumetric and geometric objects 
[Lev89 ] and works with both rectilinear and curvilinear volumes. Implementation was in the object-oriented 
language C++ , taking advantage of the ease with which software can b e extended to incorporate new renderable 
objects [Poh89] . The object-oriented paradigm for design specifies tha t software objects encapsulate 
both the data and the function s that process it . Though the potential graphical primitive s are diverse 
and the methods required to process them diffe r greatly, visualization involves the same three tasks. 
Each object type provides virtual methods for performing thes e tasks on its own representation : (1) 
A list of potentially visible objects on each scanline is updated . (2) For each ray passing though a 
given pixel, an ordered list (itself a n object) of ray-object intersections is calculated by examinin 
g the potentially visible objects. (3) The shading contributio n of each ray-object intersection to the 
pixel (also an object , which can composite itself) is calculated . 3 .1 Rectilinear Volumetric Primitives 
Regular rectangular volumes are handled in a fairly tradi­tional fashion [Lev88] . The volume is positioned 
and th e orientation matrix stored. Intersections of a ray with th e volume bounding box are determined 
by transforming th e bounding box by the same transformation that would alig n the ray with the z axis 
[Rog85] and then testing each of the six bounding box faces for intersections with the z-axis . The entry 
and exit intersection points, if any, are adde d to the z-ordered intersection list . The starting and 
endin g points of the ray-object intersection list are mapped back to grid values in the original array, 
using the inverse of the transformation matrix . Sample values are acquired at user ­specified equidistant 
steps using one of three user-specifie d interpolation methods (see Section 4) and used to inde x into 
color and opacity transfer function tables [UK88] . The contribution from each of the samples is composited 
int o the pixel [PD84] . This process ends when the exit point i s reached, or the pixel becomes opaque 
. If an isosurface has been requested as well, a check is made between each pai r of sample points to 
see if the isosurface threshold has bee n crossed [GO89] . 3.2 Geometric Primitive s Treatment of geometric 
objects (at present, triangles o r triangle-meshes) is much like that of rectilinear volumes : the triangles 
are transformed by the orientation matrix that takes the ray to the z-axis, intersections with the z 
axis ar e calculated, and the intersections are added to the ordere d intersection list . For shading, 
the barycentric coordinates of the intersection point with respect to each triangle ar e computed and 
used to interpolate the vertex normals t o obtain the intersection normal . Lambertian ambient and diffuse 
shading is used [FDFH90] . The shading contributio n is composited into the current pixel with full opacity 
. 3.3 Curvilinear Volumetric Primitives The curvilinear volumes consist of both the data sample val­ues 
and a computational grid describing the actual physica l location of each sample point [p1o89] . In its 
physical-space coordinate system, the faces bounding the element ma y be degenerate, non-planar, and 
non-orthogonal, presentin g additional problems . Adding curvilinear volume primitive s simply involved 
designing and implementing structures and methods needed to volume render the new primitive . For purposes 
of intersection, an element (a six-sided cell) i s considered to be bounded by twelve triangles (to ensure 
planarity) . Assuming convexity, two intersections are gen­erated if the ray intersects the element . 
The intersection s are computed using the same technique described for th e triangle primitive, and the 
shading method for an elemen t is like that for a rectilinear volume . Because the numbe r of elements 
in a curvilinear volume can be quite large , data structures and methods are supplied to support a sca 
n line list and active element list to reduce the number o f intersection calculations that must be performed 
for eac h ray. 4 Interpolation of Curvilinear Volumes The curvilinear input grid must be interpolated 
to produc e a rectilinear output grid . (We use the term "interpolation" , rather than "resampling" to 
clearly indicate that the value s in the new output grid do not have the same validity as th e points 
in the original sample grid, assuming the underlyin g 42lComputer Graphics Volume 24 Number 5 November 
1990 Figure 1 : A two-dimensional grid where the greedy gri d search algorithm fail s function which 
was sampled to create the original grid is not used .) The input grid consists of hexahedral cells bounde 
d by eight vertices numbered 0, 1, . . ., 7, the coordinates o f the i th vertex being (a yi, z;), and 
the associated dat a value is denoted F. The data values are assumed to be th e values of an unknown 
`smooth' (at least locally) trivariat e function f (x, y, z), which we call the underlying function . 
An estimation of f at a point P is denoted as F(P) . Let P = (x, y, z) be the point at which the value 
of th e underlying function is to be estimated . The interpolatio n schemes examined here all proceed 
as follows : 1. Find the cell of the input grid within which P lies . 2. Estimate the function value 
at P based on the know n values at the corners of this cell .  To find the input cell that contains 
the point. P, the input grid edges are traversed until a point is reached such that all adjacent points 
are further away from P. It is assumed tha t that grid point is closest to P . This greedy algorithm 
wil l sometimes fail to produce the correct result (see Figure 1) . Once the nearest grid vertex has 
been located, it is the n easy to find which of the (at most) eight cells incident on this vertex contains 
P . The three methods explored are nearest neighbor, trilinea r interpolation, and inverse weighting 
. The nearest neighbo r method is simplistic : the sample value at a point i s estimated to be the same 
as the value at the nearest point o n the original grid . This gives at best a rough estimate of th e 
nature of the volume . The other two methods are described here in more detail . These schemes are local 
 the function value at a poin t is estimated based only on points that are `close' to P . All three ensure 
that at the corners of a cell the estimated value matches the known function value at that point; i .e., 
they are interpolation schemes not approximation schemes . Though The point location problem for two-dimensional 
grids has been well studied and optimal algorithms are available . The three­dimensional case has not 
received much attention thus far . they ensure Co continuity at vertices of the grid, they canno t guarantee 
even Co continuity along interior faces of the grid . This creates a problem : points lying on interior 
faces bu t not on interior edges are contained in the two cells that share that face ; points on interior 
edges are contained in the four cells that share that edge . Depending on whic h cell is considered to 
contain the point different estimates ar c obtained . 4.1 Trilinear Interpolation The trilinear interpolation 
approach assumes that at an y point P = (x, y, z) within any cell of the input grid th e underlying function 
can be approximated a s F(P) = a + bx + cy + dz + exy + f xz + gyz + hxy z where a, b, . . ., lt are 
suitable constants. The function f is required to interpolate the known values at the eigh t cell corners 
. Substituting in the known function values an d locations for the eight cell corners provides eight 
equation s in the eight unknowns a through h . Solving this set o f equations provides the cell's trilinear 
interpolation function . If the cell is an orthogonally oriented rectangular paral­lelopiped with vertex 
0 at the origin the constants a, . . ., It can be computed directly, but this is usually not the cas 
e with curvilinear volumes . Trilinear interpolation is not a very satisfactory method . The underlying 
function is assumed to vary linearly alon g lines parallel to the cartesian axes, as a quadratic through 
planes parallel to the planes defined by these axes, an d as a cubic elsewhere . For a rectilinear grid 
oriented alon g the cartesian axes, the function varies linearly along edges , as a quadratic across 
cell faces, and as a cubic alon g diagonals through the cell . Rotating the cell relative t o the underlying 
frame produces quite a different estimate o f function behavior through the cell . It is possible, even 
wit h rectilinear cells, to be unable to find a trilinear functio n defined by the corner values in certain 
orientations; for example, consider a cell rotated at 45 degrees so that the diagonals lie parallel to 
the cartesian axes . With irregular grids, it may not be possible to orient the cell s o that its edges 
lie along cartesian axes, and the cell faces may not be planar . Degenerate cases can occur wher e a 
trilinear function cannot be fit . More commonly, the function through the cell face may be trilinear 
and var y depending upon which cell on either side of the face th e point is assumed to belong to . Therefore, 
Co continuit y cannot be assumed . (For properly-oriented rectangular grids trilinear interpolation does 
at least provide Co continuit y along interior faces . ) 4 .2 Inverse Distance Weighted Interpolation 
For distance weighted interpolation schemes [BS84, BL84 , Fra82], the value of the underlying function 
at a point is `influenced' by its value at other nearby points, influenc e decreasing with increasing 
distance from the point . Let P be a point at which the underlying functio n f (x, y, z) must be estimated 
; further, assume that the function value is known at a set of points Pr, P2, .. ., Pn that are close 
to P. Let F; denote the (known) value of f at Pi, 1 < i < n. The value of f at P is estimated as a weighted 
sum of the various F;, i .e . , F(P)=wiF; i= i where the weight wi associated with the point P1 depend 
s inversely on the distance between P and Pi . This inverse dependence ensures that the influence of 
the point P, decreases with distance from P . The weights are usually normalized so they sum to one . 
In this implementation, the set of nearby points are take n to be the eight vertices of the cell within 
which the poin t P = (x, y, z) lies . The particular weighting scheme used wa s presented in [BS84] . 
The weights are computed as follows : 7 77 w= fJ[dk(P)]2i H[rli( P)] 2 k= o =o 1= 0 k 1 IV ? Here d,(P) 
is the Euclidean distance between the jth verte x of the cell and the point P . Note that if P coincides 
wit h the jth vertex of the cell, then w, = 1, and wi= 0,i j; therefore, F(P) = F; . As presented above, 
the inverse distance weighting schem e will, like trilinear interpolation, not guarantee Co continuit 
y along interior faces of the grid . This problem can b e minimized in the following (somewhat ad hoc) 
manner : fo r points on interior faces we use all the vertices of all the cell s that contain that point 
. In fact, it would be preferable t o extend the scheme to consider samples beyond a particula r cell. 
Interpolation may produce samples that are more sparse than the original volume, at least locally . Considerin 
g only surrounding cells in determining values for interpolate d points in effect ignores the contribution 
of cells in the origina l volume that do not happen to include an interpolated point. This will always 
be a problem with very local methods o f interpolation . Furthermore, with arbitrary hexahedral cells 
, the cell vertices may be much further from the new poin t than vertices belonging to other neighboring 
cells . 5 Experimental Result s These methods have been explored on a computational flui d dynamics simulation 
of a "blunt fin" from NASA-Ame s Research Center, using the density scalar field for rendering . The 
original data was interpolated to create two rectilinea r volumes : Interpolate-1 data with approximately 
the sam e number of data points as the original, and Interpolate­2 data with 8 times as many data points. 
There are three interpolated volumes of each size, differing by whethe r the interpolation method was 
nearest neighbor, invers e distance, or trilinear interpolation . For rendering, the same interpolation 
method was used as for interpolation ; e.g . , the volume sampled using nearest neighbor methods wa s 
rendered using nearest neighbor methods . Three issues com e to light in examining the interpolated data 
(see Table 1) . 1. Extraneous data points must be generated which refer t o regions outside the warped 
space, because the rectilinea r volume includes the original . Samples in this region ca n be made transparent, 
but it does cost memory usage as well as some irrelevent processing time . 2. More serious, the minimum 
distance between sampl e points is very small in the warped grid to give mos t information in regions 
of greatest interest . However , the interpolated sample points are equidistant alon g each coordinate 
axis and the minimum distance betwee n interpolated data points is much larger . In order to make the 
minimum distance for the interpolate dat a the same as in the original file, very large interpolate d 
volumes would have to be created . Otherwise, detail is lost, and (in the present implementation) cells 
may b e missed . Because we believe speed is the only justificatio n for interpolating volumes, we choose 
to accept this an d sample more sparsely than the closest original points . Section 6 describes a recently 
implemented alternat e approach . 3. Interpolation moves the maximum and minimum value s of the original 
file toward the mean, thus extreme value s are lost .  Table 2 presents some results on interpolation 
an d rendering . Interpolation times are reasonably close fo r all three methods. As this cost is only 
incurred onc e to create the volume, its expense is less important tha n rendering costs . It could be 
brought down by bette r traversal techniques. Rendering was done on an SG I Iris 4D50GT. Note that rendering 
a rectilinear grid i s significantly faster even when the volume involved is 8 times as large. Trilinear 
coefficients were precalculate d for curvilinear volumes ; this precalculation took about 11 0 seconds. 
By far the predominant cost with curvilinear volumes is intersection testing to determine the location 
o f the ray within the volume. The use of more sophisticated location-finding and coherence will reduce 
this, but it seem s unlikely that rendering curvilinear volumes will ever be a s fast as rectilinear 
volmes. Images were rendered using 128x128 rays, zooming in o n the middle region of the volume. The 
transfer function mapped low values to green, medium to blue, and high t o red . Opacity increased linearly 
. Pixels were replicated fo r final pictures . Figure 2 indicates that the general appearance of al l 
sample volumes is much the same, though the neares t neighbor method presents a decidedly blocky appearance 
. I n the original volume, the cells are smallest near the leading edge of the blunt fin . It is in this 
region that the effect o f the relatively large cells of the interpolated volumes can b e seen. The preponderance 
of blue, and the less amount o f red, in interpolated images is due to the shift toward th e mean during 
interpolation . The green along the leading fi n edge is due to the renderer estimating color values 
for cell s partly outside the original volume . This could be avoide d by having the renderer ignore 
such cells . 44/Computer Graphics Volume 24 Number 5 November 1990 Blunt Fin ] Original Data ] Interpolate 
1 Interpolate 2 Resolution 40x32x32 40x32x32 80x64x6 4 Number Samples 40,960 40,960 327,68 0 Smallest 
Distance 0.019 0 .18 0 .0 9 Greatest Distance 3 .32 0 .57 0 .2 8 Min/Max Value s Original 0 .19/4 .98 
--Nearest Neighbor -0.38/3 .48 0 .34/4 .6 2 Inverse Distance -0.38/3 .26 0 .36/4 .3 6 Trilinear Interpolation 
0.40/3 .26 0 .36/4 .31 Table 1 : Volume Data Characteristic s Blunt Fin Nearest Neighbor Inverse Weights 
I Trilinear Interp . Interpolation Time --Interpolate 1 114 . 7 128 . 2 230 . 4 Interpolate 2 936 .7 
1030 .5 1061 . 5 Rendering Time Original Dat a 700. 0 796 . 2 807 . 8 Interpolate 1 94 . 1 189 . 7 64 
. 7 Interpolate 2 152.6 306 .4 97 . 7 Table 2: Timing Tests (user/system seconds ) 6 Hierarchical Extensions 
Use of a hierarchical rectilinear grid avoids many of th e problems of interpolating from curvilinear 
volumes wit h irregular sampling densities . We are exploring the use o f an octree data structure for 
the interpolated volume . To create the octree, sample points in the original curvilinea r grid are added 
one by one to the (originally empty) octree . Whenever a particular partition of the octree contain s 
more than some user-specified number of curvilinear dat a samples, that node is split into eight subnodes 
. When all the curvilinear samples are added to the octree, a n interpolation step calculates the estimated 
data value at th e eight corners of each octree partition . This volume can the n be rendered using a 
hierarchical volume ray-tracer. The coherent projection approach [Wil90a] is also being extende d to 
render hierarchical volumes . Related work using octree s for isosurface generation is [WVG90a] . Alternatively, 
to avoid interpolation errors in creating the octree, it would be possible to use the octree together 
wit h the original curvilinear volume and render using values fro m the original sample values . 7 Volume 
Visualization of Turbulence Turbulence is the irregular regime of fluid motion whic h randomly varies 
with space and time . In spite of more than a century of research, it remains an unsolved proble m of 
modern physics . The study of coherent structures of a turbulent flow field and direct numerical simulation 
of turbulence [MK86, Spa88] are currently the mainstrea m approach to turbulent research . Direct numerical 
simulatio n of the turbulent boundary layer over a flat plate by Spalar t [Spa88] provides flow data 
at 9 .4 million grid points fo r 104 time steps . The resulting 54 gigabytes of turbulenc e database 
contains values for three velocity components , three vorticity components, and pressure at each node 
. Volume visualization is applied to a 65 x 50 x 55 sub ­volume of the data set [RKS89] using an implementation 
of VBUFFER [UK88] on a Stardent GS-1000 . Direct volume rendering of space filling 3-D data, suc h as 
fluid flow data, characteristically results in "cloud ­like or fuzzy" images . However, by applying additional 
gradient shading to the volume-rendered turbulent flow data, crisp and solid-looking images can be obtained 
. Th e additional steps are crucial to visualization of current dat a since the final image should contain 
a clear depiction o f the turbulent flow structures. Figure 3 represents th e vertical component of velocity 
solid-texture-mapped ont o the streamwise velocity component . Applying gradien t shading has resulted 
in a crisp image of vortex structures i n a turbulent flow where contributions from ambient, diffuse 
, specular, and glossiness are also added to the image . 7.1 Turbulent Flow Structures: "The hairpin 
vortex" Coherent structures in turbulence have been identified b y researchers for some time [KRSR67] 
. Evidence for existenc e of a basic vortex structure, called the "hairpin or horsesho e  References 
[BL84] R. E. Barnhill and F . F . Little. Three- and four­dimensional surfaces . Rocky Mountain Journa 
l of Mathematics, 14(1) :77 102, 1984 . [BR71] G .L. Brown and A. Roshko. AGARD-CP-93, 23, 1971 . [BS84] 
R. E. Barnhill and S . E. Stead . Multistage trivariate surfaces . Rocky Mountain Journal of mathematics, 
14(1) :103 118, 1984 . [Cha90] Judith Challinger. Object-Oriented Renderin g of Volumetric and Geometric 
Primitives . Mas­ter's thesis, University of California, Santa Cruz , 1990 . [DCH88] Robert A. Drebin, 
Loren Carpenter, an d Pat Hanrahan . Volume rendering. Com­puter Graphics (ACM Siggraph Proceedings) 
, 22(4) :65-74, July 1988 . [FDFH90] James D . Foley, Andies Van Dam, Steven Feiner , and John Hughes 
. Computer' Graphics : Princi­ples and Practice . Addison-Wesley Publishin g Company, Reading, Mass ., 
2 edition, 1990 . [F1e88] C. A. J. Fletcher. Computational Techniques for Fluid Dynamics . Springer-Verlag, 
1988 . [Fra82] R. Franke. Scattered data interpolation : Tests of some methods . Mathematics of Computation 
, 38(157) :181 -- 199, 1982 . [GO89] David S . Goodsell and Arthur J . Olson . Molec­ular applications 
of volume rendering and 3-D texture maps . In Volume Visualization Work ­shop, pages 27-31, Chapel Hill, 
NC, May 1989 . Dept. of Computer Science, University of North Carolina. [HB81 ] M . R. Heacl and P . 
Bandyopadhyay . J. of Fluid Mechanics, 107 :297, 1981 . [KM86] J. Kim and P. Moin . J . Fluid Mechanics, 
30 :741 , 1986 . [K RSR67] S. J. Kline, Vi'. C. Reynolds, F. A. Schraub, and P. W. Runstadler. J. Fluid 
Mechanics, 30 :741 , 1967 . [I,ev88] Marc Levoy. Display of surfaces from volum e data . IEEE Computer 
Graphics and Applica­tions, 8(3) :29 37, March 1988 . [Lev89] Marc Levoy. Display of Surfaces From Volum 
e Data . PhD thesis, The University of North Carolina at Chapel Hill, 1989 . [MK86] P. Moin and J. Kim 
. J. of Fluid Mechanics , 155:61, 1986 . [PD84] Thomas Porter and Torn Duff. Compositing dig­ital images 
. Computer Graphics (ACM Siggraph Proceedings), 18(3) :253-260, July 1984 . [plo89] PLOT3D User's Manual, 
1989 . [Poh89] Ira Pohl . C+-/-for C Programmers . Ben­jamin/Cummings Publishing, California, 1989 . 
[RKS89] S. K. Robinson, S. J. Kline, and P. R. Spalart . Technical Report TM-102191, NASA-Ames Re ­search 
Center, Moffett Field, CA, 1989 . [Rog85] David F. Rogers . Procedural Elements for Computer Graphics 
. McGraw-Hill, Inc., 1985 . [Sab88] Paolo Sabella . A rendering algorithm for visual­izing 3D scalar 
fields . Computer Graphics (ACM Siggraph Proceedings), 22(4) :51-58, July 1988 . [SN89] Peter Shirley 
and Henry Neeman . Volume vi­sualization at the center for supercomputing re­search and development . 
In Volume Visualiza­tion Workshop, pages 17-20, Chapel Hill, NC , May 1989 . Dept. of Computer Science, 
Univer­sity of North Carolina . [Spa88] P. R. Spalart . J. of Fluid Mechanics, 187 :61 , 1988 . [UK88] 
Craig Upson and Michael Keeler . The v-buffer : Visible volume rendering . Computer Graphic s (ACM Siggraph 
Proceedings), 22(4) :59-64, Jul y 1988 . [Wes90] Lee Westover. Footprint evaluation for volum e rendering 
. Computer Graphics (ACM Siggrap h Proceedings, 24(4) :367 76, August 1990 . [WH90] J . M . Wallace and 
F . Hussain . Appl . MMch. Rev, 43 :S203, 1990 . [Wil90a] Jane Wilhelms . A coherent projection approach 
for direct volume rendering . Technical Repor t UCSC-CRL-90-38, CIS Board, University o f California, 
Santa Cruz, 1990 . [Wi190b] Jane Wilhelms. Visualizing sampled volum e data. In Nadia Magnenat-Thalmann 
and Daniel Thalmann, editors, Scientific Visualization an d Graphics Simulation. John Wiley and Son s 
Limited, 1990 . [WVG90a] Jane Wilhelms and Allen Van Gelder. Octrees for faster isosurface generation 
. Technical Re ­port UCSC-CRL-90-28, CIS Board, University of California, Santa Cruz, 1990 . Extended 
ab­stract to appear in ACM Volume Visualizatio n Workshop 1990 . [WVG90b] Jane Wilhelms and Allen Van 
Gelder . Topologi­cal ambiguities in isosurface generation . Techni­cal Report UCSC-CRL-90-14, CIS Board, 
Uni­versity of California, Santa Cruz, 1990 . Ex­tended abstract to appear in ACM Volume Vi­sualization 
Workshop 1990 . Editor's note : Figure 2 corn be found on page 111 .  
			