
 TEACHING FORMAL PROGRAMMING TO FIRST YEAR COMPUTER SCIENCE STUDENTS HENRY MCLAUGHLIN Department of Computer 
Science University College Dublin, Ireland hbmc@ccvax. ucd. ie Abstract The integration of formal methods 
into the undergraduate curriculum has been slow considering the benefits they offer. One reason for this 
is that the limited number of relevant textbooks, although excellent, are rather terse. As a result, 
wehavedeveloped various techniques for teaching formal programming in which each step is fully justified 
by appealing to adesign rule orheuristic. Another technique wehave developed is programming by rule using 
generic templates to solve problems of similar structure rather like differentiation by rule. Our experience 
tc) date has been encouraging. We outline some of these techniques and give examples of them in practice. 
O INTRODUCTION Thereseemstobe agrowing consensus thatformal methods are of central importance in computer 
science and therefore should be included in the undergmduate computer science curriculum [2,3]. The benefits 
of applying formal methods to the development of computer systems from specification through design to 
implementation are significant and have been widely reported. A broad range of techniques have been developed 
for reasoning effectively about system specification, software development digital circuit design and 
concurrent prog ramming, to name a few. Yet the introduction and integration of formal methods into the 
curriculum has been slow and certainly not in accord with their promise. Formal methods courses have 
been largely relegated to later years and optional modules in undergraduate curricula. At University 
College Dublin until the work described below had been initiated, the frost exposure students had to 
formal methods was in a third year course on program design and verification. This (24 lecture) module 
covered the usuat material for such a course: predicate calculus, pre-and post-coniltions, the guarded 
command language, verifying existing programs, calculating invariants, and constructing new programs. 
While the course covered the essential topics, its success rate (not just in examination terms) was unsatisfactory. 
Key problems arise from the following double bind: . Using small examples to demonstrate the techniques 
leaves the student feeling that, although intellectually Permission to mpy without fee all or part of 
this material is granted provided that the copies are not made or distributed for dinxt commercial advantage, 
the ACM copyright notice and the title of the publication and its date appear, and notice is given that 
copying is by permission of the kenci~on for Computing Mechinety. To COPY othenvise or to mpubliih, mquime 
a fee arrdlor specific permission. SIGCSE 96 2/9S Philadelphia, PA USA e1996 ACM 0-89791 -757-XIWO002....50.5O 
KEVIN HELY c/o Department of Computer Science University College Dublin, Ireland lchely@ccvax. ucd. ie 
 attractive, formal methods are largely impractical. In addition to this, it is difficult to motivate 
re-learrting programming anew when the students are regularly developing non-trivial programs in their 
other courses. On the other hand, if we use larger examples, students experience great difficulty mastering 
the formal techniques and simply give up. Some courses devote a small section of the introductory programming 
course to formal methods [2]. However, it takes considerable time to fully master formal programming 
techniques-one has to become familiar fwstly with predicate logic as a notation for expressing things 
and with predicate calculus as a means of reasoning during the development of programs. In our experience, 
the latter requires substantial practice to acquire the requisite skills in formula manipulation [4,8]. 
These factors lead us to introduce formal programming at first year level from the outset. This paper 
reports on several techniques we have developed for the effective teaching of formal methods at freshman 
level and on our experiences to date. We also look at the implications of introducing such a course as 
this. 1 STRUCTURE OF THE COURSE The first year computer science course consists of two lectures per week 
on programming and one lecture per week on hardware for 24 weeks. Students also take mathematics and 
two other subjects offered by the science faculty (physics, chemistry, biology, geology, etc.) which 
are dropped in subsequent years. The programming unit has the following structure: Introduction to logic 
and calculation  Our programming notation: AL  M.&#38;ing specifications  Formal programming . Executing 
programs  We use the logic notation and proof style developed by Dijkstra, Feijen and others. Notably, 
quantifiers have the general form (vi I R.i . T.i) so tha~ for example, the statement all values of sequence 
a[O..N l] are even would be formalised as (Ai 10<i<N a[i] @ 2=0). The notation is easy to manipulate 
and the results of the manipulations frequently suggest ways to make progress in constructing our programs. 
See [4,8] for two excellent expositions of the notation and calculational style. The programming notation 
we use is essentially Dijkstra s guarded command language [0,6,7]-we call it AL . Its key ingredients 
are: 1!35 Primitive: &#38;jp. abort  Assignment x:= E, read.x. write. E  Sequential composition: SO; 
S1  Alternation HBO+SO 0... D Bn+-Sn Li  Repetition: &#38; BO + SO [1 ...0 Bn + Sn cd  Block structure: 
l[ux: T. S ]1 Students develop their programs in this notation. If required by an exercise, they can 
code their finished programs in either Pascal or C according to simple transliteration rules. This way, 
correctness is accorded the primacy it merits: students do not execute programs that have not fhst been 
constructed with correctness built in (though we still include testing of programs). A major problem 
we encountered was that the introductory formal methods textbooks although of the highest quality are 
rather terse for fwst year level. This lead us to develop our own method of programming for motivating 
individual steps in the derivation process, which is the central topic of this paper. 2 BACKWARDS DERIVATION 
THE METHOD The students are taught a precise method to use for constructing programs. Essentially it 
consists of the following steps. Starting with a specification of the problem to be solved expressed 
as a pair of predicates precondition and postcondition 0. Examine a part of the postcondition that you 
wish to achieve. This is not ad hoc there are patterns to look out for (e.g. a binding of a variable 
to a value suggests an assignment). 1. Select a command appropriate for achieving pxtconditions of the 
given form. This is achieved by matching the shape of the postcondition with that of the heuristic for 
use of the command. (Thus motivating the choice of that command.) 2. Construct the command (often involving 
several steps). 3. Calculate what had to be true beforehand (the familiar weakest precondhion).  This 
sequence of steps is repeated until what is left to achieve is implied by the overall precondition. 
2.0 Example O Make a program that inputs an integer value, X say, and assigns to another variable, y 
say, the absolute value of X. The first step is to make the formal specification. (Students learn how 
to build specifications in a step-by-step manner similar to the techniques we describe below, but we 
11just present the ready-made specification here.) {INPuT=(X)) I[wy:int. s {y=abs.X} ]1 We derive the 
program in a sequence of elementary steps: O. Examining the postcondltion we see that it contains a constant, 
X. Constants are not permitted in the final program so we replace it with a variable, x (a standard technique): 
{INPuT=(X)} I[wx:int. s {y=abs.x A x=X) ]1 1. The postcondition contains a function abs , We unfold 
the function: {INPuT=(X)) I[wx: into s {((Y=x A x~o) v (y=-x A x<O)) A x=X) ]1 2. We now see that we 
have a disjunction. The command we use to achieve a disjunction is an alternation. We begin to construct 
one. As we are dealing with a dkjunction of two terms we will construct a two branch alternation: j.f 
x>o + {x20 A WP. SO. (Y=X)} S O (Y=X A x20} [] X<O -+ {X<O A WP.SO.(Y=-X)) S 1 {y=-X A XCO} Li {((y=x 
A x20) V (y=-X A xd)) A x=X) 3. Let s examine the fwst branch. {x20} appears in both the precondition 
and the postcondition. We shall not seek to change it in the body of the branch. We can therefore focus 
on the other parts of the postcondition and seek to achieve them. All that remains for us to achieve 
is {y=x). The command for binding a variable to a particular expression is an ,asignrnent. We use an 
assignment and derive the weakest precondition (see [0] for the simple details). The second branch is 
constructed similarly: E X>o + {X>o A X=X} y:= )( {X>t) A Y=X} [] X<O 4 {X<() A -X=-X} y:= -X {x<O A 
Y=-X) f_i {((y=x A x~O) v (Y=-x A x<O)) A x=X} 4. I ktving constructed the alternation we now determine 
its weakest precondition and perform some simplification: {(x20 v X<O) A x=X} ~ X>o + {X20} y:= x {X>o 
A Y=X) [] X<O 4 {X<O} y:= -X {X<O A Y=-X} fj {((Y=x A x20) V (Y=-X A x<O)) A x=X} 5. What we now seek 
to achieve is ((x20 v XCO) A x=X} which simplifies, of course, to {x=X}. The appropriate command to achieve 
this is read We use it and derive the . corresponding weakest precondition: {INPuT=(X... )} d.x; 156 
(x=x} ~ X>o + {X>o A X=X) y:= )( {x>o A ~=x) [] X<t) + {X<O A -X=-X} y:= -X {x<O A )/=-X} H {((y=x A 
x20) V (y=-X A x<O)) A x=X} 6. Since we have arrived at our program precondition (INPuT=(X) ~ INPUT=(X...)), 
the derivation is complete. 2.1 The student s toolbox Each step in the derivation above is encapsulated 
in a heuristic rule (a single programming technique) as part of the students programming toolbox . Given 
a postcondition of a particular form we prefer shape we can choose a rule that matches the shape. We 
refer to them as heuristic because, for a given postcondition, several rules might suggest themselves 
as possible candidates for the next step. Experience will dictate which rule to apply often students 
are encouraged to produce a.ltemalive solutions to a given problem, for comparison. A key theme of this 
approach is that we don t make large conceptual leaps when teaching program derivation and expect the 
students to fill in the details with their irnagination- leaming by osmosis . Every step is fully justified 
by appealing to a heuristic.  2.2 Example 1 Make a program that calculates the sum of the even elements 
ofa (given) integer sequence, a. Our fiist step is to specify the problem: I [ m a[O.. N) ~ int; {(Ar 
I O<r<N . a[r]e int)) ~ sum :int . s {surn=(+j I Osj<N f.a[j])} ]1 x even. x where f.x = A even.x =x 
LT7@ 2=0 { O leven.x We use even.x to improve the clarity of the specification a specification design 
heuristic. O. Examining the postcondition we note that it contains a quantifier. One of our heuristics 
states that a quantifier suggests a repetition. The next few steps are absolutely standard when making 
a loop: we calculate an invariant and a guard for the loop and identify a variant function. For a quantified 
expression of this type, an invariant can be calculated by replacing one of the constants O and N by 
a suitably bound variable. We choose to replace N (although subsequently the students would be required 
to derive the algorithm by replacing O and comparing the alternative solutions). Thus we derive: Postcondition: 
sum=(+j I O<j<i f.a[j]) A i=N . Invnriant: sum=(tj I O<j<i f.a[j]) A O<iSN  Guad i#N  Variant function: 
N i with the yet to be completed repetition template:  {(Ar I O<r<N a[r]~ int)} I[wi:int. so; {sum=(+j 
I O<j<i f.a(j])) C&#38; i#N -+ {sum=(+j I O<j<i f.a~]) A i#N) S1 {sum=(+j I O<j<i f.afi])} @ {sum=(+j 
i o<j<i . f.a[j]) A i=N} ]1 We omit the constraint OSKN in the following for simplicity. That does not, 
however, mean we ignore it. 1. For the initialisation SO we choose the simplest possible ,a..signment 
to establish the invariant. We shrink the range so that it becomes the empty range (we have, of course, 
made reference to O<i<N). This is achieved by an assignment. The binding on sum is now trivial-we give 
it the identity value for the quantified operator + : {(Ar I O<r<N a[r]e int)} {O=(+j I OSj<O. f.a[j])} 
i:= O; sum:= O; {sum=(+j I O<j<i f.afi])} c@ i#N -+ {sum=(+j I O<j<i . f.a~]) A i#N} S1 {surn=(+j I 
Osj<i . f.afl])) g! {SUM=(+j I O<J<i. f.a[j]) A i=N} 2. Since (Ar 10<r<N c a[r]~ int) a O=(+j 10<jcO 
. f.a[j]) we next turn our attention to the remaining part of the progr,arn, the body S1 of the repetition. 
Again, the following moves are absolutely standard. We need to decrease the variant function, that is, 
make progress towards termination, and of course we choose the simplest candidate: incrcmcnt i using 
an assignment and derive the weakest precondition: i:= O; sum:= O; {sum=(+j I O<j<i c f.a~])} @ i#N + 
{sum=(+j I O<jci . f.a[j])A i#N] S2; {surn=(+j I O<j<i+l f.a[j])} i.= i+l {surn=(+j I Osjci f.a~])) 
@ {sum=(+j I O<j<i . f.a[j]) A i=N} 3. We now usc a combination of two standard techniques: split off 
the kh CMC in the quantified expression and distribute the dctlnilion off over the resulting formula: 
i:= (); sum:= O; {sum=(+j I O<j<i s f.a[j])} U i#N -+ {sum=(+j I Osj<i f.a~]) A i#N) S2; {(SUtYI~(+Ji 
O<j<i f.afi])+a[i] A eVen.a[i]) V (SUM=(+j I O<j<i f.a[j])+o A +?W1l.a[i])) i:= i+l .L5/ {sum=(+j I 
OSj<i f.a~])} @ {surn=(+j I O<j<i f.a[j]) A i=N) 4. This yields a familiar disjunction of two terms 
which motivates using a two branch alternation as in the previous example. Proceeding as we did there 
yields the following fully annotated solution for S2: i:= (); sum:= O; {surn=(+j I O<j<i f.a~])} m i#N 
-+ {sum=(+j I O<j<i . f.a~]) A i#N} {surn=(+j I OSj<i c f.afl]) A i#N A (even.a[i] v ~even.a[i])} H 
even.a[i] -+ {(S.Um+a[i]=(+j I ()<j<i f.afi])+a[i] A eVen.a[i])} sum:= sum+a[i] {(SUIR(+j I O<j<i . 
f.a[]])+a[i] A .W2n.a[i])} [] ~even.a[i] + {(SLIrI_I+()=(+j I O<j<i f.a[j])+o A TeVE!I_I.a[i])} sum:= 
sum+O ((WJrR(+j I O<j<i f.a~])+a[i] A mW?I_La[i])} U {(SU@+j I ()<j<i f.a[j])+a[i] A fNen.a[i]) V (SUm=(+j 
I fkj<i f.a~])+o A _+3/fN.a[i])} i:= i+l {surn=(+j I OSj<i . f.a~])) ~ (surn=(+j I O<j<i f.a[j]) A 
i=N} 5. Observing that the precondition of the alternation equivales the invariant we conclude that the 
derivation is complete. At this point we can replace even .a[i] by its definition, a[i] DKKJ2=0. We also 
simplify the second alternative to Q appealing to yet another law. 6. For termination, we simply observe 
that each repetition decreases the variant function (by increasing i) which is bounded below by zero 
(i=N = N i=O).  3 PROGRAMMING BY RULE Once the students have mastered the techniques of derivation demonstrated 
above, we encourage them to abstract from the particular instances of problems they solve. Thus the students 
learn that a problem (such as Example 1) is but an instance of a more general problem which can be specified 
as follows: I[ u a[O..N) ~ int; {(AI I O<r<N Ga[r]~ int)} w res : int Solve problem (res=(~j I O<j<N 
 f.a[j])} ]1 g.x P.x where f.x = { h.x -p.x This has the generic solution: I [ ~ a[O..N) ~ int; {(Ar 
I O<r<N a[r]~ int)} w res, i : int i:= (); res:= ld~; {res=(Aj I OSj<i . f.a~])} ~ i#N -+ M P.a[i] 
+ res:= res4g. a[i] [] ~P.a[i] + res:= res~h. a[i] m i:= i+l ti {res=(4j i O<j<i . f.afi]) A i=N} ]1 
(ld~ is the identity element of the operator ~. Note also that we can generalise the definition of F 
to an arbhmry M­case analysis.) Significant programming effort can now be saved without compromising 
correctness by identifying a problem as being an instance of a particular class and using this general 
solution to solve the instance.   3.0 Example 2 Make a progrmn that contputes the product of the oaii 
elements of a (given) integer sequence, a. The specification is: 1[ m a[O.. N) QJ int; {(Ar I O<r<N 
a[r]eint)) ~ res : int Solve problem {res=( j I O<j<N . f.a~])} ]1 x x mod 2#0 where f.x = { 1 x mod 
2=0 O. We note the correspondence between this and the generic specification of the class. A=* ld~ =1 
g.x = x P.x = xmod2#0 h.x = 1 ~P.x = xmod2=0 1. Slotting these into our generic template produces the 
following algorithm: I [ w a[O..N) ~ int; {(Ar 10<r<N a[r]~ int)) w res, i : int i:= O; res:= 1; {res=( 
j I O<j<i f.a~])} &#38; i#N + K a[i] @ 2#0 + res:= res a[i] [] a[i] ti 2=0 -+ res:= res 1 f&#38; i:= 
i+l ~ {res=( j [ O<j<i f.a[j]) A i=N} ]1 158 (Of course, the second guarded command would be subsequently 
simplified to ~ as before using a heulist it.) We liken this to the way students learn the differential 
calculus. They are first taught to differentiate from first principles so that they understand the technique. 
However, once they have mastered this they are encouraged to differentiate using rules. For example, 
having identified the function to be differentiated as a product of two simpler functions they invoke 
the product rule. 3.1 A taxonomy of problems When designing this course we surveyed over fifty introductory 
books on programming. For the most part we ignored the text and simply collected the exercises and problems. 
This gave us an assortment of over a thousand programming problems. We classified these on the basis 
of similarity of specification (and, therefore, of solulion). We use this classification as the basis 
for the programming examples we consider in the course. Currently we deal with about fifteen different 
categories. They are sufficient] y diverse that they capture the level of programming expertise which 
is generally expected of students at the end of an introductory course. The problem of Example 2 is a 
member of the partitioned sequence category. A key advantage the categorisation gives us is the ability 
to identify precisely the knowledge and skill levels that students are expected to attain at the end 
of the year. Students are encouraged to keep a portfolio of the programs they develop during the year 
and a notelbook of the problems they encountered and how they solved them. 4 REACTIONS TO THE COURSE 
In general the reaction to the course has been positive though a few reservations have been identified. 
 Amongst the student body the improvement in examination marks has been significant. Some students notably 
those who entered college already knowing how to program have dlftlculties abandoning their intuition­based 
approach initially. The beginners have favoured the approach as it provides them with a disciplined stepwise 
method of programming rather than what usually amounts to no more than an exhortation to guess and test 
. Students have also noted that the rigour developed in their computing work has assisted them in other 
courses.  Amongst our colleagues the reaction has not been as favoupble. Some have difficulty recognizing 
the difference between deriving an algorithm (what w e teach) and attempting an a posteriori verification 
of an already -wlitten program. Others fear that the students creativity will somehow be compromised. 
Our experience, however, is the opposite: students continue to create programs and more importantly the 
techniques, once mastered, have a liberating effect. Students can solve many more complex problems effectively, 
than previously (e.g. array segment problems). Students enjoy creating programs that are  159 demonstrably 
comect. Nevertheless some staff have yet to be convinced. See Dijkstra [1] for similar reactions. An 
important reaction from the students was their subsequent expectation of how programming should be dealt 
with in the remainder of the curriculum. Many have expressed confusion ,and dkappointment when faced 
with less folmal treatment of topics in later courses. In sho~ a course such as this cannot exist in 
a vacuum . A second module on data structures and algorithms ought to build on the approach outlined 
above to achieve a unified course. 5 SUMMARY We believe that formal programming can and should be taught 
at first year level. Our experiences show that, once mastered, the techniques of formal programming have 
a liberating effect for students we do not believe it hampers their creativity. Granted, it takes a lot 
of practice to master the notation and techniques but with effective teaching this can be fun. Formal 
programming is eminently teachable: we can pin (town individual design tactics and encapsulate them in 
heuristics. Compared to the guesswork of informal programming this is a major advantage. In this paper 
we outlined how we teach formal programming to first years, Based on the work of Dijkstra and others 
we ve developed a technique of backward derivation of programs, encapsulating individual steps into simple 
heuristics. In addition to this, we re developing a large classification of problems that are solved 
by sinilar .atgOri lhUIS, giVhlg rise to programming by rule . Full details of our techniques are given 
in [5]. Acknowlctlgt \~ ~ents. Thanks to Cliona, Rosie, Georgina, Eamonn Wctmtcr and Sean MacSeaghain 
for inspiration and help. 6 REFERENCES [0] E. Cohen, F rogtwnming in the 1990 s, Spr.-Verlag, 1990. [1] 
t3.W. Dijkstro, On the Economy of Doing Mathematics , in LNCS 669, Spr.-Verlag, 1993. [2] A, Fckcte, 
Reasoning about Programs , Proceedings of 24th ACM S[GCSE Conference, 198 202, 1993. [3] D. Grits, Teaching 
Calculation and Discrimination: A More Effective Curriculum , CA CM, 34 (3), 44-55, 1991. [4] D. Grits 
md F.B. Schneider, A Logical Approach to Discrete Math, Spr.-Verlag, 1993. [5] K. IIcly, Formal Programming: 
Step-by-Step Examples, Tech. Rep. (forthcoming+ontact author), U. C. D., 1995. [6] A. Kaldcwoij, Programming: 
The Derivation of Algorithms, Prentice-I-Iall Int., 1990. [7] C. Morgm, Programming frotn Specifications 
(2nd Ed.), Prcnticc-IIall Int., 1994. [8] A..I.M. van Gasteren, On The Shape of Mathematical Arguments, 
LNCS 445, Spr.-Verlag, 1990. 
			