
 Improved Steiner Tree Approximation in Graphs* Gabriel Robins t and Alexander Zelikovsky t tDepartment 
of Computer Science, University of Virginia, Charlottesville, VA 22903-2442 robius@cs.virginia.edu, www.cs.virginia, 
edu/robins tDepartment of Computer Science, Georgia State University, Atlanta, GA 30303 alexz@cs.gsu.edu, 
www.cs.gsu.edu/- matazz Abstract The Steiner tree problem in weighted graphs seeks a minimum weight 
connected subgraph containing a given subset of the vertices (terminals). We present a new polynomial-time 
heuristic with an approximation ratio approaching 1 + 1~___33~ 1.55, which improves upon the previously 
best-known approximation algorithm of [10] with performance ratio ~ 1.59. In quasi-bipartite graphs (i.e., 
in graphs where all non-terminals are pairwise disjoint), our algorithm achieves an approximation ratio 
of ~ 1.28, whereas the previously best method achieves an approximation ratio approachiug 1.5 [19]. For 
complete graphs with edge weights 1 and 2, we show that our heuristic has an approximation ratio approaching 
~ 1.28, which 4 improves upon the previously best-known ratio of ~ [4]. Our method is considerably simpler 
and easier to implement than previous approaches. Our techniques can also be used to prove that the Iterated 
1-Steiner heuristic [14] achieves an approximation ratio of 1.5 in quasi-blpartite graphs, thus providing 
the first known non-trivial performance ratio of this well-known method. 1 Introduction Given an arbitrary 
weighted graph with a distinguished vertex subset, the Steiner Tree Problem asks for a minimum-cost subtree 
spanning the distinguished vertices. Steiner trees are important in various applications such as VLSI 
routing [14], wirelength estimation [6], phylogenetic tree reconstruction in biology [11], and network 
routing [12]. The Steiner Tree Problem is NP-hard even in the Euclidean or rectilinear metrics [8]. Arora 
established that Euclidean and rectilinear minimum-cost Steiner trees can be efficiently approximated 
arbitrarily close to optimal [1]. On the other hand, unless P = NP, the Steiner Tree Problem in general 
graphs c~.nnot be approximated within a factor of 1 + e for sufficiently small e > 0 [4, 7]. For arbitrary 
weighted graphs, the best Steiner approximation ratio achievable within polynomial time was gradually 
decreased from 2 to 1.59 in a series of works [20, 21, 2, 22, 18, 15, 10]. In this paper we present a 
polynomial-time approximation scheme with a performance ratio approaching 1 + ~ ~ 1.55 which improves 
upon the previously best-known ratio of 1.59 due to "This work was supported by a Packard Foundation 
Fellowship, by a National Science Foundation Young Investigator Award (MIP-9457412), and by a GSU Research 
Initiation Grant. Hougardy and PrSmel [10]. We apply our heuristic to the Steiner Tree Problem in quasi-bipartite 
graphs (i.e., where all non-terminals are palrwise disjoint). In quasi-bipartite graphs our heuristic 
achieves an approximation ratio of ~ 1.28 within time O(mn2), where m and n are the numbers of terminals 
and non-terminals in the graph, respectively. This is an improvement over the primal- dual algorithm 
by Rajagopalan and Vazirani [19] where the bound is more than 1.5. We also show that a well-known Iterated 
1-Steiner heuristic [13, 9, 14] achieves an approximation ratio of 1.5 for quasi-bipartite graphs; previously, 
no non-trivial bounds were known for the Iterated 1-Steiner heuristic. Finally, we improve the approximation 
ratio achievable for the Steiner Tree Problem in complete graphs with edge weights 1 and 2, by decreasing 
it from the previously known } [4] to less than 1.28 for our algorithm. The remainder of the paper is 
organized as follows. In the next section we introduce basic definitions, notation and properties. In 
Section 3 we present our main algorithm (called k-LCA) and formulate the basic approximation result. 
In Sections 4 and 5 we prove the approximation ratio of the algorithm k-LCA in general graphs and estimate 
the performance of the Iterated 1-Steiner heuristic and k-LCA in quasi-bipartite graphs and in complete 
graphs with weights 1 and 2. We conclude by proving in Section 6 the basic approximation result for k-LCA. 
 Definitions, Notations and Basic Properties Let G = (V, E, cost) be a graph with a non-negative cost 
function on its edges. Any tree in G spanning a given set of terminals S G V is called a Steiner tree, 
and the cost of a tree is defined to be the sum of its edge costs. The Steiner Tree Problem (STP) seeks 
a minimum-cost Steiner tree. Note that a Steiner tree may contain non-terminal vertices and these are 
referred to as Steiner points. We can assume that the cost function over G = (V, E, cost) is metric (i.e., 
the triangle inequality holds) since we can replace any edge e E E with the shortest path connecting 
the ends of e. Henceforth we will therefore assume that G is a complete graph. Similarly, for the subgraph 
Gs induced by the terminal set S, Gs is a complete graph with vertex set S. Let MST(Gs) be the minimum 
spanning tree of Gs. For any graph H, cost(H) is the sum of the costs of all edges in H. We thus denote 
the cost of a minimum spanning tree of H by mst(H), e.g., cost(MST(Gs)) = mst(Gs). For brevity, we use 
rest to denote mst(Gs). In order to simplify our analyses, we further assume that all edge costs in G 
are unique (this ensures that the optimal Steiner tree and minimum spanning tree are unique). A Steiner 
tree over a subset of the terminals S' C S in which all terminals S' are leaves is called a full component 
(see Figure l(a)). Any Steiner tree can be decomposed into full components by splitting all the non-leaf 
terminals. Our algorithm will proceed by adding full components to a growing solution, based on their 
"relative cost savings" (this notion will be made precise below). We ass,,me that any full component 
has its own copy of each Steiner point so that full components chosen by our algorithm do not share Steiner 
points. A Steiner tree which does not contain any Steiner points (i.e., where each full component consists 
of a single edge), will be henceforth called a terminal-spanning tree. Our algorithm will compute relative 
cost savings with respect to the "shrinking" terminal-spanning tree which initially coincides with MST(Gs). 
The relative cost savings of full components are represented by a ratio of how much a full component 
decreases the cost of the current terminal-spanning tree over the cost of connecting its Steiner points 
to terminals. The cost savings of an arbitrary graph H with respect to a terminal-spanning tree T is 
the difference between the cost of T and the cost of the Steiner tree ~~~, , ~._ .... ~_ ~a c C (a) 
(b) (c) Figure 1: (a) A full component K: filled circles denote terminals and empty circles denote Steiner 
points. (b) Connected components of Loss(K) to be collapsed, dashed edges belong to Loss(K). (c) The 
corresponding terminal-spanning tree C[K] with the contracted Loss(K). obtained by augmenting H with 
the edges of T. Formally, let T[H] be the minimum cost graph in H U T which Contains H and spans all 
the terminals of S (see Figure 2). The gain of H with respect to T is defined as 9ainT(H) = cost(T) -cost(T[H]). 
If H is a Steiner tree, then gainT(H) = cost(T) -cost(H). Note that gainT(H) < cost(T) -mst(T U H) because 
T[H] cannot cost less than MST(TUH). We will use the following property of gain proved in [21, 2]. H 
T[H] "Q ~ (a) (b) Figure 2: (a) A graph H (dashed edges) and a terminal-spanning tree T (solid edges). 
(b) The corresponding graph T[H] contains H and spans all the terminals. Lemma 1 For any terminal-spanning 
tree T and graphs H and H r, gainT(H U H') < gainT(H) + gainT(H') The minimum-cost connection of Steiner 
points of a full component K to its terminals is denoted Loss(K). Formally, Loss(K) is a mlnimum-cost 
forest spanning the Steiner nodes of a full component K such that each connected component contains at 
least one terminal (see Figure l(b)). Intuitively, Loss will serve as an upper bound on the optimal solution 
cost increase during our algorithm's execution (as will be elaborated below). We will denote the cost 
of Loss(K) by loss(K). The loss of a union of full components is the sum of their individual losses. 
As soon as our algorithm accepts a full component K it contracts its Loss (K), i.e. "collapses" each 
connected component of Loss into a single node (see Figure l(c)). Formally, a loss-contracted full component 
C[K] is a terminal-spanning tree over terminals of K in which two terminals are comaected if there is 
an edge between the corresponding two connected components in the forest Loss(K). The cost of any edge 
in C[K] coincides with the cost of the corresponding edge in K. The 1-to-1 correspondence between edges 
of K \ Loss(K) and C[K] implies that cost(H)-loss(H) = cost(C[H]). Similarly, for any Steiner tree H, 
C[H] is the terminal-spanning tree in which the losses of all full components of H are contracted. Our 
algorithm constructs a k-restricted Steiner tree, i.e., a Steiner tree in which each full component has 
at most k terminals. Let Optk be an optimal k-restricted Steiner tree, and let optk and lossk be the 
cost and loss of Optk, respectively. Let opt and loss be the cost and loss of the optimal Steiner tree, 
respectively. We now prove the following lower bound on the cost of the optimal k-restricted Steiner 
tree. Lemma 2 Let H be a Steiner tree; if gainc[n](K) <__ 0 for any k-restricted j~all component K, then 
cost(H) -loss(H) = cost(C[H]) < optk Proof. Let K1,..., Kp befull components of Optk. cost( C[H]) -optk 
= gainc[~(Optk) = gainc[~(K1 U... t9 Kp) < gainc[H](K1 ) +... +gainc[~(Kp) < 0 [] An approximation ratio 
of an algorithm is an upper bound on the ratio of the cost of the found solution over the cost of the 
optimal solution. In the next section we will propose a new algorithm for the Steiner Tree Problem, and 
then prove a (best-to-date) approximation ratio for it. The Algorithm All previous heuristics (except 
Berman and Ramayer's [2] approach) with provably good approx- imation ratios choose appropriate full 
components and then contract them in order to keep them for the overall solution. This does not allow 
us to give up an already-accepted full component even if later we would find out that a better full component 
disagrees with a previously accepted (two components disagree if they share at least two terminals). 
The main idea behind the Loss-Contracting Algorithm (see Figure 3) is to contract as little as possible 
so that (i) a chosen full component may still participate into the overall solution but (ii) not many 
other full components would be rejected. In particular, if we contract Loss(K), i.e., replace a full 
component K with C[K], then (i) it will not cost anything to add a full component K in the overall solution 
and (ii) we decrease the gain of full components which disagree with K by a small value (e.g., less than 
in the Berman-Ramayer algorithm for large k, and much smaller than in [15] for any k). Our algorithm 
iteratively modifies a terrninal-spanniug tree T, which is originally MST(Gs), by incorporating into 
T loss-contracted full components greedily chosen from G. The intuition behind the gain-over-loss objective 
ratio is as follows. The cost of the approximate solution lies between rest = mst(Gs) and oPtk. If we 
accept a component K, then it increases (by a gain of K) the gap between rest and the cost of the approximation. 
Thus the gain of K is our clear profit. On the other hand, if K does not belong to OPTk, then after accepting 
K we would no longer be able to reach Optk because we would need to pay for the connection of incorrectly 
chosen Steiner points. Therefore, the value of loss(K), which is the connection cost of Steiner points 
of K to terminals, is an upper bound on the increase in the cost gap between optk and the best achievable 
solution after accepting K. Thus loss(K) is an estimate of our connection expense. Finally, maximizing 
the ratio of gain over loss is equiwalent to maximizing the profit per unit expense. Loss-Contracting 
Algorithm (k-LCA) for Steiner Trees in Graphs Input: A complete graph G = (V, E, cost) with edge costs 
satisfying the triangle inequality, a set of terminals S C V, and an integer k < ]S I Output: A k-restricted 
Steiner tree in G connecting all the terminals in S T = MST(Gs) H=Gs Repeat forever Find a k-restricted 
full component K with the maximum r = gainT(K)/loss(K) If r < 0 then exit repeat H=HUK T= MST(TUC[K 
D Output the tree MST(H) Figure 3: The k-restricted Loss-Contracting Al- gorithm (k-LCA). In Section 
6 we will show that cost(T) -mst(T U K) = gainT(K). Therefore, each time the algorithm chooses a full 
component K, the cost of T decreases by 9ainT(K) + loss(K). This will imply the basic approximation result 
proved in Section 6. Theorem 1 For any instance of the Steiner Tree Problem, the cost Approx of the Steiner 
tree produced by algorithm k-L CA is at most: ( mst -optk ) Approx < lossk . in 1 + -[ossk + optk (1) 
 Performance of k-LCA in General Graphs Our estimate of the performance ratio of algorithm k-LCA in arbitrary 
graphs is based on the estimates of optimal k-restricted Steiner trees. Let Pk be the worst-case ratio 
of ovtk It was opt" shown in [5] that pk < 1 + ([log 2 k] + 1) -1. We will show below that the approximation 
ratio of k-LCA is at most pk(1 + ½ ln(~ -1)). Therefore, the approximation ratio of k-LCA converges to 
1 + _~__~3 < 1.55 when k -+ c¢. This is an improvement over the algorithm given by Hougrady and Prommel 
[10], where the approximation ratio approaches 1.59. Theorem 2 The k-LCA algorithm has an approximation 
ratio of at most (1 + ½ h(pA~ - 1))pk Proof. Since rest <_ 2opt (see [20]), the inequality (1) yields 
the following upper bound on the output tree cost of k-LCA.  ( 2 t-opt Approx <_ loss~ . lu 1 + 1-ossk 
] + opt~ It was proved in [15] that for any Steiner tree T, loss(T) < ½cost(T). Therefore, lossk <_ ~optk. 
The partial derivative (lossk. ln(1 + 2opt-optk ~v is always positive; therefore, the the upper lossk 
)lloss~ = 1 obtai~ bound on Approx achieves maximum when lossk ~optk. Thus, we Appr°------~x < °pt--~ 
" ( l +h(~- opt 2 Since the upper bound above grows when optk increases, we can replace ~ with the maximum 
opt value of Pk. [] Steiner Trees in Quasi-Bipartite Graphs and Complete Graphs with Edge Weights 1 and 
2 Recently Rajagopalan and Vazirani [19] suggested a primal-dual -based algorithm for approxi- mating 
Steiner trees. They show that their algorithmhas an approximation ratio of 1.5 + c for quasi-bipartite 
graphs, i.e., the graphs where all non-terminals are palrwise disjoint. We first show that the well-known 
Iterated 1-Steiner heuristic [13, 9, 14] has an approximation ratio of 1.5. Next, we apply algorithm 
k-LCA to quasi-bipartite graphs and estimate its runtime. Finally we prove that the performance ratio 
of k-LCA for quasi-bipartite graphs is below 1.28. We also apply k-LCA to the Steiner Tree Problem in 
complete graphs with edge weights 1 and 2. Bern and Plassmann [4] proved that this problem is MAX SNP-hard 
and gave a ~-approximation algorithm. Applying Lovasz's algorithm for the parity matroid problem (see 
[16]), an 1.2875-approximation algorithm was given in [3]. We will show that the performance ratio of 
algorithm k-LCA approaches 1.28 for such graphs, improving on previously achievable bounds. The Iterated 
1-Steiner heuristic. The Iterated 1-Steiner heuristic (I1S) (see [13, 9, 14]) repeatedly (while it is 
possible) adds Steiner points to the terminal set, which decreases the cost of the minimum spanning tree 
over terminals. Accepted Steiner nodes are deleted if they become useless, i.e., i/their degree become 
1 or 2 in the MST over the terminals. Although I1S decreases the MST cost by the maximum possible value 
at each iteration, we will estimate the cost of the output Steiner tree regardless of how it was obtained. 
The following theorem will also enable us to estimate the performance ratio of a faster Batched variant 
of the Iterated 1-Steiner heuristic [13, 9, 14]. Theorem 3 Given an instance o] the Steiner Tree Problem 
in a quasi-bipartite graph G, let H be a Steiner tree in G such that (4) any Steiner point has degree 
at least 3 and (ii) H cannot be improved by adding any other Steiner point, i.e., mst(H O v) > cost(H) 
for any vertex v in G. Then the cost of H is at most 1.5 times the optimal. Proof. Any full component 
in quasi-bipartite graphs has a single Steiner point. Therefore, the loss of any full component equals 
the cost of the least-cost edge connecting its single Steiner point to a terminal. Since any Steiner 
point has degree at least 3 (condition (i)), the loss of any full component in H is at most one third 
of its cost. Thus, loss(H) < ~cost(H). We now show that gaing[H] (K) <_ 0 for any full component K. Indeed, 
condition (ii) implies that mst(H U K) >_ cost(H). If we contract the loss of H, then we can decrease 
MST(H U K) by at most loss(H) since reduction by loss(H) happens only if all edges of Loss(H) belong 
to MST(H U g). Therefore, mst(C[H] U K) >_ mst(H U K) -loss(H) and mst(C[H] U K) > cost(H) -loss(H) = 
cost(C[H]). Thus, gainc[l~](K) <_ cost(C[H]) -mst(C[H] U K) <_ O. By Lemma 2, cost(H)-Ioss(H) <_ opt 
and since loss(H) <_ ½cost(H), we obtain cost(H) <_ 3 opt. [] The above result helps explain why the 
Iterated 1-Steiner and Rajagopalan-Vazirani heuris- tics perform similarly when applied to instances 
of the Steiner Tree Problem restricted to the rectilinear plane (see [17]). l%untime of the algorithm 
k-LCA in quasi-bipartite graphs. For a given Steiner point v, algorithm k-LCA adds only a full component 
with the largest gain since the loss is determined by v. We can find a full tree with the maximllm gain 
with respect to a terminal-spanning tree T among all possible full components with Steiner point v by 
merely finding all neighbors of v in MST(T O v). Therefore a full component maximizing the gain-over-loss 
ratio over all k can be found within polynomial time. We estimate the runtime of k-LCA for quasi-bipartite 
graphs as follows. Let m and n be the number of terminals and non-terminals, respectively. The number 
of iterations is O(n) since a Steiner point can be added only once to H. Each iteration consists of O(n) 
gain evaluations, each of which can be computed within O(m) time. Finally, using the appropriate data 
structures, the k-LCA algorithm can be implemented within a total runtime of O(n2m), where m is the number 
of terminals. Performance of the algorithm k-LCA. We first estimate the loss of a Steiner tree in the 
cases of quasi-bipartite graphs and complete graphs with edge weights 1 and 2. Lemma 3 For the Steiner 
Tree Problem in quasi-bipartite graphs and complete graphs with edge weights i and 2, rest <_ 2(optk 
- lossk) (2) Proof. For quasi-bipartite graphs, let K be an arbitrary full component of a Steiner tree 
T with p terminals connected by a single Steiner point with edges of lengths do, dl,-.., dp-1. Assume 
that loss(K) = do = min{di}. Let rest(K) be the cost of the minimum spanning tree of Gs,, where S' is 
the set of terminals in K. By the triangle inequality, p-1 rest(K) <_ ~-~(do + di) = p" do + cost(K) 
-2d0 _< 2cost(K) -2loss(K) i=1 The bound (2) follows from the fact that mst, the minimum spanning tree 
cost of S, does not exceed the sum of rest-costs for terminals in each of the full components in Optk. 
Now we prove the lemma for the case of complete graphs with edge weights 1 and 2. Let m and n respectively 
be the number of terminals and Steiner points in the optimal k-restricted Steiner tree Optk. Then rest 
<_ 2m -2 since all edge weights are at most 2 and optk >_ m + n -1 since Optk contains m + n nodes. We 
may assume that full components of Optk contain only edges of weight 1, and therefore lossk = n. Thus, 
rest g 2m - 2 = 2(m + n - 1 -n) _< 2(optk - lossk). [] Theorem 4 Algorithm k-LCA has an approximation 
ratio of at most ,~ 1.279 for quasi-bipartite graphs and an approximation ratio approaching ~ 1.279 for 
complete graphs with edge weights 1 and 2. Proof. After substituting the MST bound (2) into inequality 
(1), we obtain Approx < lossk . In ( opt~ 1) + optk (3) - \lossk Taking the partial derivative of (loss 
 ln(tos,k optk -1))toe.k, we see that the single mayimum of the lossk upper bound (3) occurs when x = 
optk-lo,,~ is the root of the equation 1 +l~x + x = 0. Solving this equation numerically we obtain x 
~ 0.279. Finally, we substitute x into (3) x optk- m l_ + optk = (x + 1) -optk ,-~ 1.279. optk Approx 
g 1 + x x The bound above is valid for the output of algorithm k-LCA for quasi-bipartite graphs if we 
set k = IS[, i.e., if we omit the index k. For complete graphs with edge weights 1 and 2, optk converges 
to opt, and the approximation ratio of algorithm k-LCA therefore converges to 1.279 when k --~ oo. [] 
Approximation Ratio of Algorithm k-LCA This section is devoted to the proof of the Theorem 1. Let K1,..., 
Klast be full components chosen by k-LCA. Let To = MST(Gs) and let Ti, i = 1,..., last be the tree T 
produced by k-LCA after i iterations. Let cost(R) be the cost of Ti after the i-th iteration of k-LCA. 
Lemma 4 gain~_l (Ki ) = cost(Ti_l) mst(Ti_l U Ki) - Proof. It is sufficient to show that 7~_1[K/] = 
MST(Ti_I U Ki). Assume that MST(Ti_I U Ki) does not contain some edge e E Ki and let A and B be two connected 
components of Ki -{e}. We will show that either A or B has a larger gain-over-loss ratio, which contradicts 
the choice of Ki. Since e does not belong to MST(Ti-1 U Ki), we have cost(Ti_l[A U B]) < cost(Ti_l[Ki]). 
By Lemma 1, gainT~_~(Ki) < gainT,_~(A U B) < gainT~_~(A) + gainT~_t(B). Note that e is the longest edge 
on a Ki-path between some pair of terminals, and therefore cannot belong to Loss(Ki). Thus Loss(Ki) ----Loss(A) 
U Loss(B) and loss(Ki) = loss(A) + loss(B) Finally, gainTi_.(Ki) gainTi_~(A) + gaina~_,(B) I gainTi-'(A) 
gainTi_,(B) loss(Ki) < loss(A) + loss(B) <_ max. loss(A) ' lo~s(B) j [] We define the supergain of a 
graph H with respect to a Steiner tree T as super9ainy(H) = gainT(H) + loss(H). By Lemma 4, the supergain 
of Ki with respect to TiLl is supergainTi_, (Ki) = gainTi_, (gi) + loss(Ki) = cost(Ti_l) -mst(Ti_l U 
gi) + mst(Ti_l tO Ki) -cost(Ti) = cost(Ti_z) -cost(Ti) (4) Let Gi = supergainT~ (OPTk) be the supergain 
of the optimal k-restricted Steiner tree OPTk with respect to Ti i = 0, 1,..., last. Let loss(n) be the 
loss of the first n accepted full trees K1,..., Kn. We will show that the loss of full components accepted 
by k-LCA does not grow too fast. Lemma 5 If Gn is positive, then toss(n) < in -~ lossk -- Proof. Let 
li = loss(Ki) and gi = supergain~_~ (Ki) be respectively the loss mad supergain of the i-th full Steiner 
tree accepted by algorithm k-LCA. Let Optk consist of full components Xj. By Lemma 1, Go < ~x~eoptk supergainTo(XJ) 
{ gaiWro(Xj) } gainTo(K1) _ 91 - loss----~-~XsEOptk loss(Xj) < 1 + maxx~eoptk loss(Xj) <__ 1 + loss(K1) 
ll Inductively, for i = 1, 2, .... , n, ~G~_I < _ ~t~" Therefore, li (5) gi >_ losskGi-1 Each time k-LCA 
accepts a full tree Ki, it decreases the cost of 7"/ by the supergain of Ki, which results in decrease 
of the supergain of Optk by the same value. The equality (4) yields Gi = cost(Ti) -cost(OPTk) + lossk. 
Therefore, Gi-1 -Gi = cost(Ti_l) -cost(Ti) = gi. __h_ The inequality (5) implies that G~-- Gi-1- gi < 
Gi-1 (1-,o-k)" Since G, > 0, unraveling the last inequality yields ao -lo s i=1 Taking the natltrM logarithms 
of both sides and using inequality x > In(1 + z) we finally obtain  Go ~ li___£__ toss(n) (6)In ~ >-ioss~ 
loss~ i=1 [] By Lemma 2, after all iterations terminate, the cost of the last tree Tzast will be at most 
optk. We stop iterating when cost(Tn+l) < optk < cost(Tn) for some n. It can be show that we can "partially" 
perform the (n+ 1)-st iteration so that cost(Tn+l) will coincide with optk. Then Go = rest -optk + lossk 
and Gn+l = optk - optk + lossk = lossk. Finally, rest -optk + lossk Approx < cost(Tn+l) q- loss(n + 1) 
< optk + oPtk. In Iossk Acknowledgments We thank Gruia Calinescu for reading earlier drafts of this 
paper and giving numerous helpful suggestions. References [1] S. ARORA, "Polynomial Time Approximation 
Schemes for Euclidean TSP and Other Geometric Problems", Proceedings 37th Annual Symposium on Foundations 
of Computer Science (1996), 2-11. [2] P. BERMAN AND V. ]:~AMAIYER,"Improved Approximations for the Steiner 
Tree Problem", J. of Algorithms, 17 (1994), 381-408. [3] P. BERMAN, M. FUP~R AND A. ZELIKGVSKY, "Applications 
of the Matroid Parity Problem to Approximating Steiner Trees", Teeh. Rep. 980021, Computer Science Dept., 
UCLA, Los Angeles, 1998. [4] M. BERN AND P. PLASSMANN,"The Steiner Tree Problem with Edge Lengths 1 and 
2", Information Pro- eessin 9 letters 32 (1989), 171-176. [5] A. BORCHERS AND D.-Z. Du, "The k-Steiner 
Ratio in Graphs", SIAM J. Computing 26 (1997), 857-869. [6] A. CALDWELL, A. KAHNG, S. MANTIK, I. MARKOV 
AND A. ZELIKOVSKY, "On Wirelength Estimations for Row-Based Placement", Proceedings of the International 
Symposium on Physical Design, Monterey, Califor- nia (1998), pp. 4-11. [7] A. E. F. CLEMENTI AND L. TREVISAN,"Improved 
Non-Approximability Results for Minimum Vertex Cover with Density Constraints", Electronic Colloquium 
on Computational Complezity, TR96-016 (1996). [8] M. R. Garey, D. S. Johnson. '°The Rectilinear Steiner 
Problem is NP-Complete', SIAM J. Appl. Math., 32, 826-834, 1977. [9] J. GRIFFITH, G. I~OBINS, J. S. SALOVCE, 
AND T. ZHANG, ~"~OSing the Gap: Near-Optimal Steiner Trees in Polynomial Time, IEEE Transactions on Computer-Aided 
Design of Integrated Circuits and Systems, 13 (1994), pp. 1351-1365. [10] S. HOUGARDY AND H. J. PRS~M~.L, 
"A 1.598 Approximation Algorithm for the Steiner Problem in Graphs", Proceedings of ACM-SIAM Symposium 
on Discrete Algorithms (1999), 448-453. [11] F. K. Hwang, D. S. Richards, and P. Winter. The Steiner 
Tree Problem, North-Holland, 1992. [12] B. Korte, H. J. PrBmel, A. Steger. "Steiner Trees in VLSI-Layouts', 
In Korte et al.: Paths, Flows and VLSI-Layout, Springer, 1990. [13] A. B. KAHNG AND G. ROBL~S, "A New 
Class of Iterative Steiner Tree Heuristics With Good Performance", IEEE Transactions on Computer-Aided 
Design, 11 (7), 1992, pp. 893-902. [14] A. B. KAHNG AND G. ROBL~S, On Optimal Intereonneetions for VLSI, 
Kluwer Publishers, 1995. [15] M. KAPJ'INSKX AND A. ZELIKOVSK¥, "New Approximation Algorithms for the 
Steiner Tree Problem", Journal of Combinatorial Optimization, 1 (1997), 47-65. [16] L. LOVASZ AND M. 
D. PLUMMER, Matching Theory. Elsevier Science, Amsterdam, 1986. [17] I. I. MANDOIU, V. V. VAZma~NI AND 
J. L. GANLmY, "A New Heuristic for P~eetilincar Steiner Trees", manuscript. [18] H. J. PR6MMmL AND A. 
STmGER, "RNC-Approximation Algorithms for the Steiner Problem", Proceedings 14th Annual Symposium on 
Theoretical Aspects of Computer Science (1997), 559--570. [19] S. RAJAGOPALAN AND V. V. VAZII~NI, "On 
the Bidireeted Cut Relaxation for Metric Steiner Problem", Proceedings of ACM-SIAM Symposium on Discrete 
Algorithms (1999), 742-757. [20] H. TAKAHASm AND A. MATSUYA~tA, "An Approximate Solution for the Steiner 
Problem in Graphs", Math. Jap. ~4 (1980), 573-577. [21] A. ZELIKOVSKY, "An ll/6-Approximation Algorithm 
for the Network Steiner Problem", Algorithmica 9 (1993), 463-470. [22] A. ZELIKOVSK'Y,"Better Approximation 
Bounds for the Network and Euclidean Steiner Tree Problems", Technical report CS-96-06, University of 
Virginia, 1996.   
			