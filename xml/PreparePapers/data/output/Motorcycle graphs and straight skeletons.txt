
 156 Motorcycle Graphs and Straight Skeletons* Siu-Wing Cheng t Antoine Vigneron t Abstract We present 
a new algorithm to compute a motorcycle graph. It runs in O(nv/nlogn) time when n is the size of the 
in- put. We give a new characterization of the straight skeleton of a polygon possibly with holes. For 
a simple polygon, we show that it yields a randomized algorithm that reduces the straight skeleton computation 
to a motorcycle graph com- putation in O(n log 2 n) time. Combining these results, we can compute the 
straight skeleton of a non-degenerate sim- ple polygon with n vertices, among which r are reflex ver- 
tices, in O(nlog2n + rvtTlogr) expected time. For a de- generate simple polygon, our expected time bound 
becomes O(n log 2 n + rXr/n+'). Introduction In 1995 Aichholzer et al. [3] introduced a new kind of 
skeleton for a polygon. It is defined as the trace of the vertices when the initial polygon is shrunken, 
each edge moving at the same speed (see Fig. 1). As Figure 1: The straight skeleton (on the righ0 is 
obtained by shrinking the initial polygon opposed to the widely used medial axis [8], the straight skeleton 
has only straight line edges, which could be useful when parabolic edges need to be avoided, either because 
the application requires it or because the software library only handles polygonal figures. A --'rTh-~-work 
described in this paper has been supported by the Research Grants Cmmeil of Hong Kong, China (Project 
no. HKUST 6058/99E). tDept, of Computer Science, Hong Kong University of Science &#38; T~bnology, Clear 
Water Bay, Kowloon, Hong Kong. Email: { scheno I antoine}@cs, us t. hk. direct application is to compute 
the roof of a building, knowing that its slope is constant. The projection of the edges of the roof to 
the horizontal plane is the straight skeleton of an horizontal section of the walls [3]. Another important 
application is to compute offset lines of a polygon [13] (note that the medial axis yields offset curves 
containing circle arcs). The straight skeleton may prove useful for other applications of the medial 
axis, for instance, shape recognition [4] and terrain reconstruction from a river network [2] as well. 
Recently, Demaine et al. found applications to computational origami [10, 11, 12]. The geometry of the 
straight skeleton is still not well understood and it is unclear whether the best known algorithm is 
close to optimal [13]. We contribute to this problem by finding new connections with motorcycle graphs 
[ 13] that allow us to design a faster randomized algorithm. The first algorithm by Aichholzer et ai. 
[3] com- putes the straight skeleton of a simple polygon with n vertices in O(r~ 2 log n) time by running 
a discrete simulation of the shrinking process. Later on, Aich- holzcr and Aurenhammer [2] generalized 
it to polyg- onal figures in the plane and brought the space com- plexity down to O(n). They also show 
that the straight skeleton cannot be described as a lower envelope in a similar way as the medial axis. 
This explains why stan- dard computational geometry techniques such as ran- domized incremental construction 
do not apply directly. In 1997, Eppstein and Erickson [13] gave the first sub- quadratic algorithm whose 
running time is O(n lr/n+~) in the worst case, with a similar space complexity. They also present a reflex 
sensitive algorithm that runs in O(n TM + na/ll+~r 9/ll+e) time, where r is the num- ber of reflex (non-convex) 
vertices of the polygon. The motorcycle graph problem was proposed by Eppstein and Eriekson to capture 
the most difficult part of the construction of straight skeletons. The input consists of n motorcycles 
Mi, 1 < i < n, and each Mi has an initial position and a fixed velocity. At time 0, all motorcycles move 
from their initial positions at their fixed velocities. If a motorcycle Mj meets the track left by another 
motorcycle Mi, then Mj crashes and cannot move any further. If two motorcycles collide, both of them 
crash and cannot move any more. When all motorcycles have either crashed or moved to infinity, their 
tracks form a planar graph which is the motorcycle graph (see Fig. 2). Eppstein and Erickson [13] solve 
tÂ¢ Figure 2: A motorcycle graph the motorcycle graph problem in O(~, 17/ll-t-e) time, using advanced 
data structures for maintaining pairwise interaction and for ray shooting. This work has several contributions. 
First, we present an algorithm to compute a motorcycle graph that runs in O(nx/~logn) time. It is faster 
and sim- pler than the previous best known algorithm [ 13]. We also present a simple randomized algorithm 
with same running time on average. Second, we give a new char- acterization of the straight skeleton 
of a polygon (pos- sibly with holes). Third, we present an algorithm that computes the straight skeleton 
of a simple polygon in O(n log 2 n) expected time from the motorcycle graph induced by its reflex vertices. 
Our results formalize the idea of Eppstein and Erickson that the motorcycle graph problem captures the 
most difficult part of the construction of a straight skeleton. Putting everything together, we can compute 
in O(nlog~n + rx/71ogr) expected time the straight skeleton of a non-degenerate simple polygon. For a 
degenerate simple polygon, our expected time bound raises to O(nlog 2 n + r17/11+~). As a comparison, 
the previous best known algorithm by Eppstein and Erickson [ 13] is slower, but it is determin- istic 
and can handle polygons with holes. 2 Computing a motorcycle graph Our algorithm is similar to the simple 
event--queue al- gorithm in that we also track the crashes of motorcy- cles in chronological order. The 
main difference is that we introduce new events to confine our search. A key structure is a (1/x/-n-)-cutting. 
Given r~ lines, a (1/v/-n)- cutting is a partition of the plane into disjoint triangular cells (possibly 
unbounded) such that the interior of each cell intersects at most v~ lines. Cuttings have been studied 
extensively, for example, see [1, 5, 6, 18, 19]. We will employ a deterministic algorithm presented by 
Chazelle [5] that runs in O(nx/~) time. It produces a cutting of O(r~) size and gives the lines intersecting 
each cell of the cutting. 2.1 Preliminaries. Let Pi and ~i denote the initial position and velocity of 
the motorcycle Mi. The trajectory Ti of Mi is the infinite ray that emits from pi in the direction of 
9'i. The support line L i of Mi is the line containing Ti. At any time t, Ti (t) denotes the point Pi 
+ t~i. Note that Mi may crash before reaching Ti(t). A crossing point is ~ fq Tj for some motorcycles 
Mi and M i. If no motorcycle Mj reaches the crossing point ~ fqTj earlier than Mi, then Mi moves to infinity 
in the motorcycle graph. Otherwise, Mi crashes at the first crossing point Ti fq Tj such that Mj reaches 
it before Mi. Let K~ be a (1/v/-n)-cutting of the support lines of the motorcycles. We will simulate 
the movements of motorcycles within /C. During the simulation, a motorcycle Mi is active in a cell (7 
of K~ at time t if Mi is in C at time t, or if Mi has been in C' before time t. Intuitively, Mi can interact 
with other motorcycles within G' only if it is currently in C or if it has left a track in C before, 
this is why we call it active in this situation. The simulation will progress in chronological order 
of two kinds of events. 1. A switching event (i, C, t) happens at the earliest time t such that Ti (t) 
lies on the boundary of the cell C (i.e., the first intersection between Ti and C). 2. An impact event 
(i, j, t) happens at time t when Ti(t) = Ti fqTj = Tj(t') for some time t' G [0,t]. All the switching 
events will be generated in initializa- tion before the simulation starts. We cannot generate all the 
impact events as there can be a quadratic num- ber of them. We will generate a subset good enough for 
our purpose on the fly. To do so, we maintain a local arrangement ,A(G') for each cell 17 in K~. ,A(17) 
is the arrangement of line segments Li N C for all motorcycles Mi currently active in 17. In this extended 
abstract, we assume that no two trajectories are collinear and that if a support line intersects a cell, 
it intersects the interior of the cell. The handling of degenerate cases will be discussed in the full 
version of this paper. 2,2 Algorithm, We first compute/C in O(nx/-~) time. We then initialize an empty 
event-queue Q. The switch- ing events can be obtained by computing the intersec- tions between/C and 
the trajectories of the motorcycles. There are O(nv/~) such intersections and they can be computed in 
O(n~/'n) time [5]. We insert the corre- sponding switching events into Q. Next, we generate the first 
batch of impact events. For each cell C in K~, we collect the motorcycles whose initial positions re- 
side in (7 and compute .A(G'). Each vertex of ,A(C) is Li N Lj for some i and j. If Li n Lj = Ti [q Tj, 
then we compute t and t' such that 7~(t) = Tj(t') = fl~ A Tj. If t > t', then we insert the impact event 
(i, j, t) into Q. If t' >__ t, then we insert the impact event (j, i, t') into Q. In the main loop of 
the algorithm, we repeatedly extract from Q and process the event e with the smallest time stamp. If 
e is a switching event (i, 17, t), then we update the local arrangement.A(C) by inserting the line segment 
Li I-1C. For all the new vertices in ,A(C), we compute the associated impact events and insert them into 
Q. Otherwise, if e is an impact event (i, j, t), then Mi crashes at f/~ N Tj at time t, so we insert 
the edge connecting Pi and T/ N Tj into the motorcycle graph, and delete from Q all the switching events 
of Mi and all the impact events involving Mi that occur at points on Ti outside the segment [Pi, Ti N 
Tj]. 2.3 Analysis. Correctness follows from the fact that the movements of the motorcycles are simulated 
in chronological order, and that once a motorcycle crashes, irrelevant switching and impact events involv- 
ing the motorcycle are deleted. As explained before, there are O(nvt-n) switch-ing events and they can 
be found in O(nv/'n -) time. So initializing Q with the switching events takes O(nv~logn) time. This 
also bounds the total time spent on extracting and deleting switching events dur- ing the simulation. 
It remains to bound the total time spent on updating the local arrangements of the cells as well as inserting 
and deleting impact events. We maintain a local arrangement in a doubly con- nected edge list where each 
cell is associated with a search structure allowing split operations in logarith- mic time (for instance 
a balanced binary tree [20]). Thus, updating a local arrangement can be done in O(log n) per new vertex 
generated. Each impact event corresponds to a vertex of some local arrangement and inserting or deleting 
an impact event clearly takes O(log n) time. We keep a dictionary of impact events involving Mi sorted 
along Ti. Thus, when Mi crashes, we can identify in O(logn) time the range of impact events along T/which 
are to be deleted. So it suffices to bound the total size of the local arrangements at the end of the 
simulation. For all motorcycle Mi, the cell of K~ that contains its starting point pi is denoted by Ci 
and the cell where Mi crashes is denoted by C~. Each vertex of a local arrangement o4(17) is Li f3 Lj 
for some i and j. We charge this vertex to the motorcycle Mi (resp. Mj) if it lies within Ci O Cr~ (resp. 
Oj t.J G'~). Note that a vertex may be charged twice, now we want to prove that each vertex is charged 
at least once. Let v = Li N Lj be a vertex of the local arrangement of a cell (7, if 17 = 17i or (7 = 
Cj then it is charged to Mi or Mj. Otherwise, v = ~ 17 Tj and therefore, Mi and Mj cannot both cross 
v. On the other hand, both Mi and Mj are active in C, so they must have entered C at some point of the 
simulation. Therefore, Mi or Mj (or both) crashes within C, and thus v has been charged to Mi or Mj. 
So each motorcycle will be charged with inter-sections on its support line in the first and last cells 
that contain the motorcycle in the simulation, and each vertex of a local arrangement is charged once 
or twice. Since at most ~ support lines intersects a cell, each motorcycle is charged at most 2v/-n times. 
So the total size of the local arrangements at the end of the simulation is O(ndrn). It follows that 
we spend O(nv~log n) time on updating the local arrangements of the cells as well as inserting and deleting 
impact event8. THEOREM 2.1. Given the initial positions and veloci- ties of n motorcycles, the motorcycle 
graph can be com- puted in O( n v~ log n ) time. 2.4 Further remarks. Our algorithm is simple and implementable, 
and, using practical planar cuttings algorithm [14, 17], we expect it to beat the naive O(n 2 log n) 
algorithm for instances of a few hundreds motorcycles. However, the most promising approach in practice 
is the following randomized version of our algorithm, with the same running time in expectation: take 
a random sample of ~ support lines whose arrangement will play the role of our cutting. The analysis 
of this algorithm is straightforward, and will be given in the full version of this paper. We also note 
that our algorithms handle without any difficulty the case where a motorcycle may run out of fuel at 
some point and stop, and the case where the speed of a motorcycle can vary (but it cannot move backwards). 
As a comparison, Eppstein and Erickson [13] algorithm can handle dynamic insertion of motorcycles, but 
it requires a constant speed for each motorcycle. 3 A new characterization of the straight skeleton In 
this section, we present a new characterization of the straight skeleton of a polygon ~ (possibly with 
holes). This characterization reduces the construction of the straight skeleton to the construction of 
a motorcycle graph and a lower envelope. The straight skeleton ,.q of 79 induces a subdivision of T' 
which we denote by K~(S). Following Aichholzer et al. [2], we lift/C(S) to a terrain 7- as follows. Recall 
that $ is defined by shrinking 79. Without loss of generality, assume that the edges move at unit speed 
in the shrinking process. We associate with each point x inside P a height which is the time at which 
the shrinking polygon reaches ~. 7" is obtained by lifting each point in 7 9 to its height. The edges 
and faces of 7" are the lifted versions of the edges and faces of/C(S). Each face of 7- makes an angle 
~-/4 with horizontal. A horizontal cut of 7" at height z = t is the shrunken version of P at time t. 
We call the reflex edges of 7" valleys (see Fig. 3). Eppstein and Erickson [13] expressed S as the lower 
envelope of a collection of slabs making angle lr/4 with horizontal. Each edge e of P defines an edge 
slab, bounded below by e and on the sides by rays perpendicular to e. Each reflex vertex v incident to 
the edges e and e t defines two reflex slabs. One reflex slab is bounded below by the valley incident 
to v and bounded on the sides by rays perpendicular to e. The definition of the other reflex slab is 
similar with e replaced by e ~. THEOREM 3.1. (EPPSTEIN AND ERICKSON) The ter- rain T is the restriction 
of the lower envelope of the edge slabs and the reflex slabs to the space vertically above the polygon. 
We give a similar characterization, except that we do not need to know the valleys of 7" to define the 
slabs, but only the motorcycle graph induced by the reflex vertices of P. Each reflex vertex of 7 9 is 
associated with a motorcycle whose velocity is the velocity of the reflex vertex in the shrinking process 
that generates the straight skeleton (this speed is the inverse of the sine of half the exterior angle 
at the reflex vertex). Each motorcycle runs out of fuel when it meets the boundary of 7 >. We denote 
by ~ the motorcycle graph of this set of motorcycles. In this section we will assume that 79 is non--degenerate 
in the sense that no two motorcycles of ff collide, that is, no two motorcycles reach the same point 
at the same time. We lift ff to 3D to obtain ~, where the height of a point of ~ is the time when the 
corresponding point in g is reached by the motorcycle. For each edge e of ~, we denote its lifted version 
by ~'. At the neighborhood of the reflex vertices, the edges of ~ follow valleys of 7-. For each reflex 
vertex v = e N e ~, we define two motorcycle slabs making an angle 1r/4 with horizontal. One motorcycle 
slab is bounded below by the edge of ~ incident to v and bounded on the sides by rays perpendicular to 
e (see Fig. 3). The definition of the other motorcycle slab is similar with e replaced by e ~. In the 
following, we prove that the terrain 7" is the lower envelope of edge slabs and motorcycle slabs. LEMMA 
3.1. For each reflex vertex, the incident valley is shorter than the incident edge in ~ (see Fig. 3). 
Proof. Sup]~se that the lemma is false. So there exists an edge of ~ that is shorter or equal to its 
corresponding valley. Among such edges of ~, we choose the edge whose higher endpoint is lowest. Let 
t be the height of Figure 3: On the left, the boundary of two motorcycle slabs seen from above. On the 
right, the valleys of 7-, note that they are shorter than their associated edges of the higher endpoint 
of ~. We restrict 7- to the height interval [0, t] by replacing the parts above the height t with flat 
patches. We denote the restriction by 7ft. By minimality of t, no valley of ~ is longer than its corresponding 
edge in ~. Since ~ is not longer than its valley, it does not reach the boundary of ~P, so e crashes 
into an edge f of ~. Let S be the vertical slab with base f. By the definition of ~, the higher endpoint 
of ~ is directly above f. No valley of 7tt can stab S, otherwise such a valley is not shorter than its 
corresponding edge in ~, a contradiction. Since valleys are the only reflex edges on 7~, 7~ n S is a 
convex chain, Since f is tangent to 7~ at its lower endpoint, fis above ~ttlq S. This contradicts the 
fact that the higher endpoint of ~ is directly above 7 LEMMA 3.2. Each point of ~ is on or above 7-. 
Proof. By Lemma 3.1, no edge of g crosses the projec- tion of a valley to the horizontal plane. So for 
any edge e of g, the intersection of 7" with the vertical slab with base e is a convex chain. Since E 
is tangent to 7- at the lower endpoint of ~, ~ is on or above 7-. We are now ready to prove our characterization. 
Here T ~ is non-degenerate in the sense that no two motorcycles collide in its associated motorcycle 
graph g. THEOREM 3.2. A non-degenerate terrain 7" is the re- striction of the lower envelope of the 
edge slabs and the motorcycle slabs to the space vertically above the polygon. Proof. Let v be a valley. 
Let ~ be its corresponding edge in ~. Let S(v) denote the union of reflex slabs bounded below by v. Let 
S(~) denote the union of motorcycle slabs bounded below by ~. Lemma 3.1 implies that S(v) C_ S(~). By 
Theorem 3.1, it suffices to prove that each point in S(~) \ S(v) is on or above T. Consider a point p 
in ~ \ v. Let r be a halfline that starts at p, has unit slope, and lie on a motorcycle slab bounded 
below by ~. Let Hr be the half-plane obtained by sweeping r upward and downward to infinity. By Lemma 
3.2, p is on or above 7-. 7- intersects Hr at a polygonal chain. By Theorem 3.1, each segment of this 
polygonal chain has slope with absolute value at most 1. Thus, each point on r is on or above 7-.  4 
Computing the straight skeleton In this section, we show how to compute the straight skeleton S of a 
simple polygon ~P after computing the motorcycle graph of the reflex vertices ft. Our algorithm runs 
in O(n log 2 n) expected time. Using directly Theorem 3.2, we do not know of a lower envelope algorithm 
that would yield a near- linear running time. However, we can compute in near- linear time a single face 
of the terrain or a vertical section since it reduces to computing a lower envelope in two dimension. 
As we shall see later, it allows us to compute the section of the skeleton by a line through a random 
internal node, we will use this result to design an efficient divide-and--conquer algorithm. An unrooted 
binary tree is a tree whose nodes have degree one or three, the nodes with degree one are called leaves 
and the nodes with degree three are called internal nodes. We assume that 7 ~ is non-degenerate in the 
sense that no two motorcycles of ff collide and 6; is an unrooted binary tree. By Lcmma 3.1, it implies 
that no two reflex vertices collide in the shrinking process and therefore all valleys of 7- are adjacent 
to reflex vertices of T'. 4.1 Canonical partition, Aichholzer et al. [3] showed that the terrain 7- has 
the gradient property, that is, starting at any point of 7" in the face adjacent to an edge e of ~, and 
following the path of steepest descent, we eventually reach the edge e. Two situations may oc- cur. Either 
the face we start from is not adjacent to a valley, and then the path of steepest descent is a single 
line segment that leads to e and makes angle ~'/4 with horizontal, or the face is adjacent to a valley 
and the steepest descent may contain two line segments: one that leads to the valley and one that follows 
it. The paths of steepest descent have two nice properties. First, two paths of steepest descent cannot 
cross (but they may merge at some point). Second, a path of steepest de- scent lies inside (the closure 
of) a face of 7-. Let p be a point in S. Let ~ be the corresponding point on 7-. The point p is a ridge 
point if j~ does not lie in the interior of a reflex edge (valley). Given a set E of ridge points, for 
each p E E,/~ defines two or three paths of steepest descent on T. The projections of the descent paths 
for all points in E subdivide P into a collection of cells. This collection of cells is Figure 4: The 
canonical partition induced by {19, q}. called the canonical partition of 7 ~ induced by 1~ (see Fig. 
4). If E is empty, we take the interior of ~ to be the only cell in the canonical partition. Canonical 
partitions can be recursively constructed. Let (7 be a cell in the canonical partition of 79 induced 
by a set Et. If ~ is a set of ridge points in C, then we can construct the canonical partition of C induced 
by E2 in the same manner as described previously. The further subdivision of C yields the canonical partition 
of P induced by/gl U E,z. This property follows from the fact that two descent paths do not cross. Unless 
stated otherwise, we will always consider cells of a canonical partition to be open. In particular, it 
means that for any canonical cell C, 5 Iq C is an unrooted binary tree whose external edges are half-open. 
SfqC subdivides C into several faces. That is, we get a planar subdivision and we denote it I~y/C(S N 
C). 4.2 Implicit representation of/C(S n 6'). We de- scribe an implicit representation Dc of/(:(8 N 
6') for any cell (7 in any canonical partition. Note that we have not computed S f'l (7 yet. Dc stores 
a circular list faces(C) that implicitly represents the faces of K:(S N (7) as follows. For each face 
of/C(S N (7), its lifted version on 7- is contained in one edge slab or one edge slab and one motorcycle 
slab. We call them the defining slab(s) of the face. Each face is represented in faces(C) by its defining 
slab(s). The ordering of faces in faces(C) is the same as their ordering around the boundary of (7. We 
denote by nc the number of faces of K:(S f-! (7). Each face is assigned an index in [1... nc] consistent 
with the ordering in faces((7). The boundary edges of C are stored in order in a list edges(C). For each 
edge e in edges((7), we keep a face pointer to the face in faces(C) that e bounds. Each face in faces 
((7) also stores edge pointers to its bounding edges in edges(C). Note that each face has at most five 
bounding edges in edges(C). PROPERTY 4.1. Let 1: be the lower envelope of the defining slabs of faces 
in faces(C). The restriction to (7 of the vertical projection of the edges off, is S N (7. At the top 
level, there is only one cell which is the interior of 7:' itself. D~, can easily be initialized in O(n) 
time by walking around the boundary of 7 9 once. During divide-and-conquer, we will need to subdivide 
a cell (7 further with respect to a set E of ridge points inside G. We assume that E is given and the 
following information has been computed. The descent paths for each point in E.  Pointer to the edge 
in edges(C) that each descent path leads to.  Pointer to the face in faces ((7) intersected by each 
descent path.  We call the above three records the partition informa- tion of (7 induced by E. Given 
this information, we can overlay the projection of these descent paths on G to subdivide C into o(IEI) 
smaller cells Ci. By walking around the boundary of each Ci, we can com- pute faees (Ci) and edges (Ci). 
The procedure involves standard splitting and concatenation of lists, details are omitted in this extended 
abstract. The total time needed is O(E ~ levi) = O(nc + IEI). LEMMA 4.1. Given the data structure Dc 
for a celt (7 and the partition information of (7 induced by a set E of ridge points, the data structures 
DC~ of the cells (7i's in the subdivision of(7 induced by E can be computed in O(nc + lEDtime. 4.3 The 
divide step. Our strategy is to divide the problem by, first, taking a line L parallel to the y- axis 
that passes through a random internal node of the skeleton SA(7, and then building the canonical partition 
induced by a carefully chosen subset of Sn (Tn L. Here we show how to find an internal node without knowing 
the whole skeleton, and we show how to perform the division. LEMMA 4.2. Given Dc and a face f in faces(G), 
the explicit representation of f can be computed in O(nclognc) time. The output includes, for each vertex 
of this face, pointers to its three defining faces in faces(G). Proof Let f be the lifted version of 
f on 7-. We compute f and then its projection. We retrieve the defining slab(s) for f. Consider the case 
where there is one defining slab S of f (the case where there are two can be handled similarly). We first 
intersect S with the other defining slabs in faces((7) by brute force in O(nc) time. This produces O(nc) 
line segments on S. Then we compute the lower envelope of these line segments on S in O(nclognc) time 
[15]. By Property 4.1_the region in S n (7 below this lower envelope is f. We project this lower envelope 
onto the plane. We use the edge pointers associated with f in faces((7) to locate the edge e in edges(G) 
that hounds f and lies on the boundary of P. We initiate a traversal along the boundary of G from each 
endpoint of e to find the two intersections with the projected lower envelope. We trim the projected 
lower envelope at these two intersections. The trimmed projection and the edge e form the boundary of 
f. Here we show how we associate a vertex v(f) with each face f in KT(S N (7). We root S O (7 at its 
centroid. The centroid is a vertex whose removal produces subtrees each of size at most half the size 
of S N (7. There may be two centroids, in which case they are adjacent. In the rooted $ n (7, edges are 
directed from a child to its parent. The rooted $ N (7 is almost a 162 binary tree, except that the 
root has three children. For each face f of/C(SA(7), we define v(f) to be the vertex of f closest to 
the root of S A (7. Since each non-root internal node u of the rooted $ n C has two children, u is v(f) 
for exactly one face f of/C($ N (7). Lemma 4.2 constructs an explicit representation of f. We show how 
to compute v(f) without knowing other parts of $ n (7. LEMMA 4.3. Let f be a face of IC(S N C). Suppose 
that we are given an explicit representation of f and for each vertex of f, we are given the pointers 
to its defining faces in faces(G). Then we can compute v(f ) in O(nc) time. Proof. It follows from definition 
that the two adjacent vertices of v(f) on the boundary of f are children of v(f). Moreover, this condition 
does not hold for other vertices of f. So it suffices to test this condition. Take a boundary edge e 
of f that is not a boundary edge of (7. We are given the pointer to the other face f' of K~($ n (7) that 
e is incident to. We retrieve the indices of f and f' in De. The difference between the two indices modulo 
nc tells us the sizes of the two subtrees obtained if we remove e. The root of $ O G lies in the larger 
subtree. So we have a constant-time procedure to determine the direction of e in the rooted S n G. If 
the two subtrees have the same size, then the endpoints of e are the centroids of S o (7 and we arbitrarily 
return one to be v(f). In all, we can find v(f) in time linear in the size of f which is O(nc). Let L 
be a line parallel to the y-axis that goes through v(f). We call a ridge point in $ O (7 n L an interior 
ridge point if it does not lie on an edge of S n (7 incident to the boundary of C. We show how to compute 
the set E of interior ridge points in ,,qn COL and the partition information of G induced by E. Lemma 
4. I can then be applied to finish the divide step. LEMMA 4.4. Let L be a line. Given Dc, the set E of 
the interior ridge points in $ n (7 o L can be computed in O(nc logne) time. Within the same time bound, 
we can obtain the partition information of (7 induced by E. Proof. We go to 3D. Let H be the plane perpendicular 
to 7 9 that contains L. Let/C be the lifted version of /C(S N C) on 7-. Like in the proof of Lemma 4.2, 
we can compute H f-!/C in O(nc log r~c) time. Let v be a vertex of H fq/C. The vertex v projects onto 
some edge e of S fq C. Like in Lemma 4.2, we get the pointers to the two faces fl and f2 in faces(C) 
adjacent to e. The projection of v is an interior ridge point iff fl and f2 are not adjacent along the 
boundary of C. This can be tested in constant time using the indices of fl and fg. Suppose that v is 
an interior ridge point. Using the defining slabs of fl and fg., we can compute in constant time the 
descent paths defined by v. Note that fl and f2 are the faces intersected by the descent paths defined 
by v. Using the edge pointers stored with fi, we can retrieve the (at most five) bounding edges of fi 
in edges (C). Then we intersect them with the descent paths defined by v to identify the edges in edges(C) 
that the descent paths lead to. 4.4 The straight skeleton algorithm, We start by computing the point 
where each motorcycle runs out of fuel (i.e., hits the boundary of P), it is a ray shooting problem that 
can be solved in O(n log n) time [7, 16]. The following pseudo--oode describes our reeursive divide-and-conquer 
algorithm. The input is Dc for some cell C and the output is S Cl C. We first call skeleton( D~ ). Algorithm 
skeleton(De) 1. if no < 20 2. then compute S fl G by brute force and return the result; 3. repeat 4. 
compute a random face f of K;(,5 fl C) using Lemma 4.2; 5. identify v(f) using Lemma 4.3; 6. if v(/) 
is the root of S f? (7  7. then let E = {v(f)}; 8. compute the partition information of C induced by 
E 9. else let L be the line parallel to the y-axis that contains v (f); 10. compute the set E of the 
interior ridge points in S f? C f? L and the partition information of C induced by E using Lemma 4.4; 
 11. subdivide C into cells {Cl,C2,...Ck} with respect to E using Lemma 4.1; 12. until maxl<i<_k nc~ 
<_ 3nc/4;  13. recursively call skeleton(Dc~) for all 1 < i < k; 14. returnSNC = EU(SNC1)u(SnC2)U... 
(8o Ok) In line 6, we can tell whether v(f) is the root in constant time as described in the proof of 
Lemma 4.3. In line 8, the computation can be done in constant time as described in the proof of Lemma 
4.4. In line 14, ,.q n C can be composed in O (I[~ 1 <i<k nci ) = O (nc + I 1) = o( c)time. Correctness 
follows from Property 4.1 and the re- cursive nature of canonical partitions, if the algorithm terminates. 
The only uncertainty is the number of itera- tions of the repeat loop. In the next subsection, we will 
bound this and hence the total running time. 4.5 Time complexity analysis. We first bound the expected 
running time of skeleton(De) ignoring the recursive calls at line 13. Each individual step takes O(r~clogr~c) 
time. We show that maxl<__i<knc~ ___ 3nc/4 holds with probability at least 1/3. Hence, the expected number 
of iterations of the loop is at most three. Case 1: v(f) is the root. There are three descent paths for 
v(f). Let pi, 1 < i < 3, denote the projections of these three descent paths which must lie inside U. 
They subdivide C into three smaller cells. Denote the cell sandwiched by Pi and Pi+l by Ci. Since v(f) 
is the root, after cutting at v(f), each subtree obtained has less than no/2 (non-root) internal nodes. 
Recall that each face g has a unique vertex representative v(g) and each non- root internal node is v(g) 
for exactly one face g. It follows that Ci has less than nc/2 + 2 faces, where the additive factor 2 
accounts for the two faces that O~ and p~+~ intersect. For no > 20, nc/2 + 2 < 3nc/4. Case 2: v(f) is 
not the root. Assume that C1 obtained in line 11 contains the root. Let u be a non-root internal node 
that is not on the same side of L as the root. Recall that u is v(g) for exactly one face g. We walk 
from u to the root and let ~: be the first interior ridge point in E that we encounter. Observe that 
x is not the root and x lies outside g. Therefore, the projections of the descent paths for x separate 
the root from u and they do not intersect g. So g lies outside (71. We conclude that the expected number 
of faces in Cx is at most nc minus the expected number of internal nodes that are not on the same side 
of L as the root. Since v(f) is not the root, v(f) is a non-root internal node of 8 Iq C chosen uniformly 
at random. K:(S fq C) has exactly r~c -- 3 non-root internal nodes. So with probability at least 1/3, 
the number of internal nodes that are not on the same side of L as the root is > (r~c --3)/3 which is 
> nc/4 for nc >_20. We conclude that C1 has at most 3nc/4 faces with probability at least 1/3. As analyzed 
in case 1, the number of faces in Ci for 2 < i < k is less than 3nc/4. We are now ready to bound the 
total expected run- ning time. skeleton(D~) runs in expected O(nlog n) time plus the time taken by the 
recursive calls in line 13. We examine the recursion tree (see Cormen et al. [9] pp 66-67). Since the 
number of faces in a cell drops by a factor of at least 3/4 between levels, the depth of the recursion 
tree is O(log n). Let .Trk denote the family of cells C such that the call skeleton(Dc) appears at the 
kth level of the recursion tree. Then the total expected running time is O(N log N log n), where N is 
an upper bound of the total size of cells in ,Tk. We have two ob- servations. First, the cells in .Tj: 
form a canonical par- tition of 79 . Second, since we subdivide with respect to interior ridge points 
in each recursive call, each edge of S is subdivided at most once in the canonical partition ofT' formed 
by cells in -~'k- It follows that N = O(n). LEMMA 4.5. Let 79 be a non-degenerate simple poly- gon with 
n vertices. Given the motorcycle graph in- duced by the reflex vertices of 79, the straight skeleton 
of 79 can be computed in O(n log 2 r~) expected time. So by Theorem 2.1, we obtain the following result 
when 79 is non-degenerate in the sense that no two motorcycles of ff collide and ,.q is an unrooted binary 
tree: THEOREM4.1. The straight skeleton of a non-degenerate simple polygon with r~ vertices and r reflex 
vertices can be computed in O(r~log2 n -I- rx/71ogr) expected time.  Conclusion and open problems Some 
of the general position assumptions that we have made can be removed easily, and Theorems 3.2 and 4.1 
164  still hold when we only assume that all the valleys of the terrain are adjacent to a reflex vertex 
of the initial polygon. In order to achieve full generality, we need to handle the case where two reflex 
vertices collide during the shrinking process and generate a new reflex vertex. In other words, two valleys 
are merged into a new one. The motorcycle graph of 79 can be Figure 5: A degenerate roof, a vertex event 
and the associated motorcycle graph defined in a natural way to account for this (see Fig. 5). With this 
modification, our new characterization holds and our algorithm works. However, the motorcycle graph cannot 
be computed with our algorithm because it cannot perform dynamic insertion of motorcycles. So we use 
the algorithm by Eppstein and Erickson [13]. The details will be given in the full version. We just state 
the main result here: THEOREM 5.1. The straight skeleton ofa simple poly- gon with n edges and r reflex 
vertices can be computed in O(n log 2 n -I- r 17/11+~) expected time. We note that none of our time bounds 
has been proven to be tight. One way to lower them would be to find an improved algorithm for the generalized 
motorcycle graph problem where dynamic insertion of motorcycles is allowed. Another possible direction 
would be to try to extend our algorithm to polygons with holes, since our characterization holds in this 
case. References [1] E K. Agarwal. Partitioning arrangement of lines, i: An efficient deterministic 
algorithm. Discrete Comput. Geom., 5 (1990), 449-483. [2] O. Aiehholzer and E Aurenhammer. Straight skeletons 
for general polygonal figures in the plane. Prec. 2nd Annu. Int'L Computing and Combinatorics Conf., 
1996, 1 17-126. [3] O. Aichholzer, E Aurenhammer, D. Alberts, and chapter 4. SIAM, Philadelphia, PA, 
1983. B. Giirtner. A novel type of skeleton for polygons. The Journal of Universal Computer Science, 
1 (1995), 752- 761. [4] H. Blum. A transformation for extracting new descrip- tors of shape. In Models 
for the Perception of Speech and Visual Form, (eds. W. Wathen-Dunn), 362-380, 1967, M.I.T. Press. [5] 
B. Chazelle. Cutting hyperplanes for divide-and- conquer. Discrete Comput. Geom., 9 (1993), 145-158. 
 [6] B. Chazelle and J. Friedman. A deterministic view of random sampling and its use in geometry. Combina- 
torica, 10 (1990), 229-249. [7] B. Chazelle and L. Guibas. Visibility and intersection problems in plane 
geometry. Discrete Comput. Geom., 4 (1989), 551-581. [8] E Chin, J. Snoeyink, and C. A. Wang. Finding 
the medial axis of a simple polygon in linear time. Discrete Comput. Geom., 21 (1999), 405--420. [9] 
T. H. Cormen, C. E. Leiserson, and R. L. Rivest. Introduction to algorithms. MIT Press and McGraw- Hill 
Book Company, 6th edition, 1992. [10] E. D. Demaine, M. L. Demaine, and J. S. B. Mitchell. Folding fiat 
silhouettes and wrapping polyhedral pack- ages: New results in computational origami. Proc. 15th Annu. 
ACM Sympos, Comput. Geom., 105-114, 1999. [11] Erik D. Demaine, Martin L. Demaine, and Anna Lu- biw. 
Folding and cutting paper. JCDCG, 104-118, 1998. [12] Erik D. Demaine, Martin L. Dernaine, and Anna Lu- 
biw. Folding and one straight cut suffice. Proc. lOth Annu. ACM-SIAM Sympos. Discrete Alg., 891-892, 
1999. [13] D. Eppstein and J. Erickson. Raising roofs, crashing cycles, and playing pool: Applications 
of a data struc- ture for finding pairwise interactions. Discrete Corn- put. Geom., 22 (1999), 569-592. 
[14] S. Har-Peled. Constructing planar cuttings in theory and practice. SIAMÂ£ Comput., 29 (2000), 2016-2039. 
[15] J. Hershberger. Finding the upper envelope of n line segments in O(n log n) time. Inforr~ Process. 
Left., 33(1989), 169-174. [16] J. Hershberger and S. Suri. A pedestrian approach to ray shooting: Shoot 
a ray, take a walk. ]. Algorithms, 18(1995), 403--431. [17] J. Matou~ek. On constants for cuttings in 
the plane. Discrete Comput. Geom., 20 (1998), 427--448. [18] J. Matou~ek. Construction of a-nets. Discrete 
Comput. Geom., 5 (1990), 427--448. [19] J. Matougek. Cutting hyperplane arrangements. Dis-crete Comput. 
Geom., 6 (1991), 385-406. [20] R. Tarjan. Data Structures and Network Algorithms,  
			