
 A Randomized Linear-Time Algorithm for Finding Minimum Spanning Trees* Philip N. Kleint Robert E. Tarjan$ 
Brown University Princeton University and NEC Research Institute Abstract We present a randomized linear-time 
algorithm for finding a minimum spanning tree in a con­nect ed graph with edge weights. The algorithm 
is a modification of one proposed by Karger and uses random sampling in combination with a re­cently 
discovered linear-time algorithm for ver­ifying a minimum spanning tree. Our compu­tational model is 
a unit-cost random-access ma­chine with the restriction that the only opera­tions allowed on edge weights 
are binary com­parisons. *A full version of this paper will appear in Jow-na~ of the ACM. tDepa~t~entof 
cODIpukr science) Brown Univer­sity, Providence, RI 02912-1910. Research partially sup­ported by an 
NSF PYI award, CCR-9157620, together with PYI matching funds from Thinking Machines Corpo­ration, Xerox 
Corporation, and Honeywell Corporation. Additional support provided by DARPA Contract No. NOO014-91-J-4052, 
ARPA Order No. 8225, and by the NEC Research Institute, Princeton, NJ. t Department of Computer Science, 
Princeton Univer­sity, Princeton, NJ and the NEC Research Institute, Princeton, NJ. Research at Princeton 
University partially supported by the National Science Foundation, Grant No. CCR-S920505; the Office 
of Naval Research, Contract No. NO014-91-J-1463; and DIMACS (Center for Discrete Mathematics and Theoretical 
Computer Science), a Na­tional Science and Technology Center, Grant No. NSF­STC8S-0964S. Permission to 
co y without fee all or part of this material is granted providJ that the copies are not made or distributed 
for direct commercial advantage, the ACM copyright notice and the title of the publication and its date 
appear, and notice is given that copying is by permission of the Association of Computing Machinery. 
To copy otherwise, or to republish, requires a fee and/or specific permission. STOC 94-5/94 Montreal, 
Quebec, Canada @ 1994 ACM 0-89791-663-8/94/0005..$3.50 1 Introduction We consider the problem of finding 
a minimum spanning tree in a connected graph with real­valued edge weights. This problem has a long and 
rich history; the first fully realized algorithm was devised by Bortivka in the 1920 s [3]. An informative 
survey paper by Graham and Hell [11] describes the history of the problem up to 1985. In the last two 
decades faster and faster algorithms were found, the fast est being an algo­rithm of Gabow, Galil, and 
Spencer [!)] (see also [10]), with a running time of O(nz log /3(m, n)) on a graph of n vertices and 
m edges. Here @(m, n)= min{i [ logi;) n < m/n}. This and earlier algorithms used as a compu­tational 
model the sequential unit-cost random­access machine with the restriction that the only operations allowed 
on the edge weig hts are bi­nary comparisons. Fredman and Willmd [8] con­sidered a more powerful model 
that allows bit manipulation of the binary representations of the edge weights. In this model they were 
able to de­vise a linear-time algorithm. Still, the question of whether a linear-time algorithm exists 
for the restricted random-access model remained open. A problem related to finding minimum span­ning 
trees is that of verifying that a given span­ning tree is minimum. Tarjan [20] gave a verifi­cation algorithm 
running in O(m a(m, n)) time, where a is a functional inverse of Ackerman s function. Later, Kom16s [17] 
showed that a min­imum spanning tree can be verified i:n O(m) bi­nary comparisons of edge weights, but 
with non­linear overhead to decide which comparisons to make. Dixon, Rauch and Tarjan [7] recently combined 
these algorithms wit h a table lookup technique to obtain an O (m)-time verification al­gorithm. King 
[16] has recently obtained a sub­st antially simpler verification algorithm, based on the algorithm of 
Kom16s. In this paper we describe a randomized algo­rit hm for finding a minimum spanning tree. It has 
an expected running time of O(m) in the restricted random-access model. The algorithm is a modification 
of one proposed by Karger [13], who obtained an expected time bound of O(m + n log n). Our algorithm 
uses the random­sampling technique of Karger in combination with the verification algorithm to discard 
edges that cannot be in the minimum spanning tree. Our algorithm uses no algorithmic ideas that are not 
part of Karger s algorithm. The key to our improvement of Karger s result is a random­sampling lemma 
that improves his corresponding lemma by a logarithmic factor. In the next sec­tion we present this lemma 
and its proof, which uses a technique different from Karger s. In Sec­tions 3 and 4 we describe and analyze 
our algo­rithm. Section 5 cent ains some final remarks. Throughout the paper, we assume for simplic­it 
y that all edge weights are distinct. This im­plies that the minimum spanning tree is unique. Ties in 
edge weights can be broken by numbering the edges and choosing the edge of smaller num­ber whenever a 
tie occurs. We also assume that the input graph has no isolated vertices (vertices wit bout incident 
edges). Our algorithm actually solves the slightly more general problem of find­ing a minimum spanning 
forest in a possibly dis­connected graph. We assume familiarity with standard results on minimum spanning 
trees, as presented, for example, in [21]. 2 A Sampling Lemma In order to present the sampling result, 
we need a little terminology. Let G be a graph with weighted edges. We denote by W(X, y) the weight of 
edge {x, y}. If F is a forest in G, we de­note by F(x, y) the path (if any) connecting x and y in F, 
and by WF(Z, g) the maximum weight of an edge on F(z, y), with the conven­tion that WF(%, y) = co if 
z and y are not con­nected in F. We say an edge {x, y} is F-heavy if W(Z! !/) > WF(Z, y) and F-1ight 
otherwise. Note that the edges in F are all F-light. For any forest F, no F-heavy edge can be in the 
min­imum spanning forest of G. This is a conse­quence of the red rule for minimum spanning tree construction 
([21], p.71). Given a forest F in G, the F-heavy edges of G can be computed in time linear in the number 
of edges of G, us­ ing an adaptation of the verification algorithm of Dixon, Rauch, and Tarjan (page 
1188 in [7] describes the changes needed in the algorithm) or that of King. Lemma 1 Let H be a subgraph 
obtained from G by including each edge independently with proba­bility p, and let F be the minimum spanning 
for­est of H. Then, for any k, the number of F-light edges of G exceeds k with probability at most (1) 
id) where n is the number of vertices of G. Proof. Let el, e2, .... en be the edges of G, ar­ranged 
in increasing order by weight. Consider the following computation, a variant of Kruskal s minimum spanning 
tree algorithm [18]. Begin with an empty forest F. Process the edges ej in increasing order on j. To 
process an edge ej, first flip a coin that has probability p of com­ing up heads. Include the edge ej 
in H if and only if the coin comes heads. Then test whether both endpoints of ej are in the same connected 
component of F. If so, ej is F-heavy; discard it regardless of the coin toss. If not, add ej to F if 
ej belongs to E. The forest 1 produced by this computation is the forest that would be produced by Kruskal 
s algorithm applied to the edges in H, and is therefore exactly the minimum spanning forest of H. Our 
goal is to show that the number of edges not discarded is probably small. The coin-flips corresponding 
to discarded edges are irrelevant; such edges are F-heavy re­gardless of whether they are included in 
H. We therefore consider only coin-flips corresponding to non-discarded edges. For each. non-discarded 
edge, if the coin comes up heads, the edge is placed in F. The size of F is at most n 1. Hence the probability 
y that the number of non-discarded edges exceeds k is at most the probability that k coin-flips take 
place before the nth occurence of heads. Since the number of occurrences of heads could be any i from 
O to n 1, the probability of this happening is at most ~~:~(~)pi(l p)~-i, 1 Remark. Lemma 1 has an 
immediate general­ization to matroids. See [14]. Corollary 1.1 The expected value of the num­ber of F-ljght 
edges is at most n/p. Proof: The expected value is ~ Prob[number of F-light edges exceeds k]. k>o We 
obtain the bound n/p by substituting the bound (1) and applying standard techniques for series summation. 
0  3 The Algorithm The algorithm intermeshes steps of Boriivka s minimum-spanning-tree algorithm [3] 
with random-sampling steps that dkicard edges that cannot be in the minimum spanning tree. Each Boriivka 
step reduces the number of vertices by at least a factor oft wo. A random-sampling step is performed 
only if the graph density (the num­ber of edges divided by the number of vertices) is sufficiently high, 
in which case the step reduces the number of edges by a constant factor with high probability. The algorithm 
is recursive. In the case of a dense graph, it performs two recursive calls, but the total size of the 
two subproblems is with high probability no more than a fraction less than one of the size of the original 
problem. It follows that the expected running time is linear. The recurrence relation resembles the one 
arising in the analysis of a linear-time selection algorithm [2]. Here is a complete specification of 
the algo­rithm. Step 1. For each vertex, select the minimum­weight edge incident to the vertex. Contract 
all the selected edges, replacing by a single vertex each connected component defined by the se­lected 
edges and eliminating resulting isolated vertices, loops (edges both of whose (endpoints are the same) 
and all but the lowest-weight edge among each set of multiple edges. Step 2. If the density of the remaining 
graph is less than 6, go directly to Step 3; otherwise, proceed as follows. Choose a subgra,ph H by including 
each edge independently with proba­bility 1/2. Apply the algorithm recursively to H, producing a minimum 
spanning fcmest F of this subgraph. Find all the F-heavy edges in the entire graph and delete them. Step 
3. Apply the algorithm recursively to the remaining graph to compute a minimum span­ning forest F . The 
minimum spanning forest for the original graph consists of those edges con­tracted in Step 1 plus the 
edges of F . It follows from the blue rule for lminimum­spanning-forest construction ([21], p.711 ) that 
the edges selected in Step 1 belong to the minimum spanning forest of the given graph. It follows from 
the red rule that the edges deleted in Step 2 do not belong to the minimum spanning for­est. Assuming 
inductively that the recursive call in Step 3 correctly computes a minimum span­ning forest of the graph 
remaining by Step 3, it follows that the algorithm correctly computes a minimum spanning forest of the 
given graph.  4 Analysis of the Algorithm First we show that the algorithm runs in ex­pected linear 
time. Then we carry out a worst­case analysis of the algorithm. Finally, we use the results of the worst-case 
analysis tc) show that the algorithm runs in linear time except with ex­ponentially small probability. 
Suppose the algorithm is applied to a graph with n vertices and m edges. The total time spent in Steps 
1 3, excluding the time spent on the recursive subproblems, is O(m): Step 1 is just a single step of 
Boriivka s algorithm, which takes O(m) time using straightforward graph­algorithmic techniques; Step 
2 takes O(m) time using the modified Dixon-Rauch-Tarjan verifica­tion algorithm, as noted in Section 
2. Let cm be an upper bound on the time spent by the algo­rithm not including recursive calls. 4.1 Expected-time 
analysis let T (nz) be the expected time for a worst-case graph with at most m edges. We prove by induc­tion 
that T(m) ~ 7cm. The basis is trivial. For the induction step, let no and m. be the number of vertices 
and the number of edges, respectively, in the graph remaining after Step 1. At least n/2 edges are contracted 
in Step 1, since one edge is selected for each vertex but an edge can be se­lected twice, once for each 
of its endpoints. This implies that no s n/2 and m. s m n/2. Com­bining these inequalities yields mo 
< m no. There are two cases, corresponding to the two cases in the algorithm. If the density me/no of 
the graph remaining after Step 1 is less than 6, then m. < m me/6 ,so m. < 6m/7. In this case the recursive 
invocation in Step 3 is applied to a graph with fewer than ~m edges. Thus in this case we have l (m) 
~ cm+ Z ($m). By the inductive hypothesis, T( $m) ~ 7C .$ m. Hence T(m) s cm+ 6cm = 7cm. Next we consider 
the case where the density of the graph remaining aft er Step 1 is at least 6. In this case, there are 
two recursive calls, one on the random-sample graph If, and one on the graph consisting of F-1ight edges. 
Let X be the ran­dom variable that is the number of edges in the graph H. There are at most m 1 edges 
in the contracted graph. Since each of these edges is included in H with probability one-half, the ex­pected 
value of X is at most (m 1)/2. Since the number of edges in the contracted graph is less than m, X is 
certainly less than m. Hence the inductive hypothesis states that T(X) < 7cX. It follows that the expected 
value of T(X) is at most the expected value of 7cX, which is at most 7cm/2. Let Y be the number of F-1ight 
edges. It fol­lows from Corollary 1.1 that the expected value of Y is at most twice the number no of 
nodes in the contracted graph. Since no < me/6 < m/6, it follows that the expected value of Y is at most 
m/3. Since the number of edges in the con­tracted graph is less than m, certainly the num­ber Y of F-1ight 
edges is less than m. Hence by the inductive hypothesis, T(Y) s 7cY. It follows that the expected value 
of T (Y) is at most the expected value of 7cY, which is at most 7cm/3. Thus the total expected time in 
this case is at most cm + 7cm/2 + 7cm/3. This proves that !!! (m) s 7cm, completing the induction step. 
 4.2 Worst-case analysis As shown in Subsection 4.1, the number no of nodes in the graph remaining after 
Step 1 is at most n/2, and the number m. of edges is less than m. If the density me/no of the remaining 
graph is less than 6, the recursive invocation in Step 3 is applied to that graph. Suppose mo/nO is at 
least 6. In this case the random-sampling step is performed. As in Sub­section 4.1, let X be the number 
of edges in the sample graph H, and let Y be the num­ber of edges left after deletion of the F-heavy 
edges. The forest F constructed in Step 2 has at most no 1 edges; these edges are the only ones in 11 
not deleted by Step 2. It follows that X + Y ~ m. + no 1< m. This inequality al­lows us to derive a 
bound of m on the number of recursive invocations of the algorithm. If I(m) is the worst-case number 
of invocations as a func­tion of m, we have the following recurrence: 1(1) =1 I(m) ~ 1 + ma{l(z) + 1(Y) 
: x+y<m}form>l It follows by induction that I(m) ~ m. Next we bound the worst-case running time of the 
algorithm. If Z (n, m) is the worst-case running time on a graph of at most n vertices and at most m 
edges, T(n, m) satisfies the following recurrence: T(l, m) = o(m) T(n, m) s O(m)+ max{Tln/2], z)+ Z 
([n/2], g): z+y<m,}forn>l A proof by induction yields T(n, m) = O(mlogn) = O(mlogrn). Remark. The alternative 
recurrence 7 (1, m) = O(l), T(n, m) s 0(n2) + 2Z ([n/2J, m) for n > 1, which follows from the inequality 
m < (~), yields the bound T (n, m) = 0(n2). Combin­ing bounds gives a worst-case running time of O(min{m 
log m, n2}), the same as the bound for Boriika s algorithm.  4.3 High-probability analysis We are now 
ready to undertake a probabilistic analysis of the algorithm. As shown in Subsec­tion 4.1, if the density 
me/no of the graph re­maining after Step 1 is less than 6, the recur­sive invocation in Step 3 is applied 
to a graph with fewer than $ m edges. If mofno ~ 6, there are two recursive calls, one on a graph with 
X edges (the sample graph H) and the other on a graph with Y edges (the graph of F-1ight edges). The 
key to the analysis is to show that X + Y ~ (1 c)m with high probability, for a sufficiently small positive 
constant e. An appro­priate recurrence then yields a running time that is O(m) with high probability 
y. The number X of edges in the sample graph H is binomially distributed with mean me/2 s m/2. A standard 
bound on the tail of the bino­mial distribution [1, 19] implies that the proba­bility that X > ;(1 + 
&#38; ) is exponentially small, namely exp ( Q(m)), for any constant &#38; > 0. Choosing &#38; = 1/10, 
we have X > llm/20 with probability exp ( Q(m)). Next we estimate the number of F-light edges, Y. Lemma 
1 applies with p = 1/2 to give an up­no per bound of (~ )~~(~) on the probability that 2=0 Y exceeds 
k. This sum is the probability of at most no heads occuring in a sequence of k fllps of an unbiased coin. 
The expected num­ber of heads is k/2. Let k = Y(1 + 62), where 82 >0 is a constant to be specified later. 
Since no < me/6 ~ m/6, we have no ~ ;(1 + 62) 1. The bound on the tail of the binomial distribu­ tion 
cited above implies that the probability of at most no heads occuring in k unbiased coin flips is exp 
( Q(m)). Choosing 62 = 1/20, we find that Y > 7m/20 with probability exp ( --Q(m)). We call an invocation 
of the algorithm a j ail­ ure if Step 2 is executed but X > llm/20 or Y > 7m/20. The analysis above 
shows that the probability of failure is exp ( Q(m)). Let r be a parameter to be determined. We call 
an invoca­ tion of the algorithm large if the number of edges in the corresponding problem graph exceeds 
~. We analyze the running time of the algorithm under the assumption that no large invocation fails. 
We show later that this assumption holds with high probability. Let A(m) denote the running time of the 
algo­ rithm on a graph of at most m edges assuming that no large invocation fails. Using the worst­ 
case time bound of O (m log m) and the clefinition of failure, we obtain the following recurrence for 
A(m), where co and c1 are suitable positive con­ stants: A(m) s comlog m ifm~r A(m) s clm + max{A(llm/20) 
+ A(7m/20), A(6m/7)} ifm>r Lemma 2 A(m) < 10c1 m + coml-% log r where E < 1 is a suitable positive constant. 
 Proof. The proof is by induction on m. If m s ~ then com l-crC log ~ > comlog m, so the inequal­ ity 
follows from the base case of the recurrence. Suppose m > ~. By the induction hypc)thesis, A(llm/20) 
s llclm/2 + co(llm/2Cl)l- r log r ~ llclm/2 + co(3/5)ml r log r if e is chosen so that (11/20)1 s 3/5. 
Similarly, A(7m/20) s 7c1m/2 + co(2/5)ml- r log~ if c is chosen so that (7/20)1 s 2/5. It follows 
that 13 Clm + A(llm/20) + A(7m/20) ~ locl?n + cod-% ]og r. The inequality Clm + A(6nz/7) s 10clm + com 
l eT logr also follows easily from the induction hypothesis. Thus the inequality of the lemma holds, 
and the proof is complete. 1 A few observations complete the analysis. For a graph of m edges we choose 
r = m/ logli m. Lemma 2 implies that the running time of the algorithm is O(m) unless some large invocation 
among those in the recursion fails. The probabil­ity of one such invocation failing is exp ( Q(T)). 
There are at most m recursive invocations alto­ gether, which means that the probability of even one 
failure occuring is m exp ( Q(T)) = exp ( Q(r)). Thus the algorithm runs in O(m) time except with probability 
exp( fl(m/ logo(l) m)).  Remarks The algorithm can be changed in many ways without affecting the high-probability 
O(m) time bound. For example, the random-sampling step can be performed unconditionally, rat her t han 
just when the graph is dense. The running time analysis becomes more complicated if this change is made, 
however. In joint work with Richard Cole to be de­scribed in a future paper [5], we have adapted our 
randomized algorithm to run in parallel. The parallel algorithm does linear expected work and runs in 
O (log n 21°g* n) expected time on a CRCW PRAM [15]. This is the first parallel al­ gorithm for minimum 
spanning tree that does linear work. In contrast, Karger [12] gives an algorithm running on an EREW PRAM 
that re­quires O (log n) time and m/ log n + nl+ pro­cessors for any constant 6 > 0. Also, Cole and Vishkin 
[6] give an algorithm running on a CRCW PRAM that requires O(log n) time and O ((n + m) log log n/ log 
n) processors. Among remaining open problems, we note es­pecially the following three: 4 1. Is there 
a deterministic linear-time mini­mum spanning tree algorithm in the re­stricted random-access model? 
 2. Can randomization be used to simplify the linear-time verification algorithm? 3. Can randomization 
be used fruitfully to solve other network optimization prob­lems, such as the shortest-path problem? 
Randomization has already proved valu­able in solving the maximum-flow [4] and minimum-cut [13] problems. 
  Acknowledgments We thank David Karger, Satish Rae, and David Zuckerman for fruitful discussions. 
 References [1]N. Alon and J. H. Spencer, The Probabdis­tic Method, John Wiley &#38; Sons, Inc., New 
York, N. Y., 1992, p. 223. [2] M. Blum, R. W. Floyd, V. R. Pratt, R. L. Rivest, and R. E. Tarjan, Time 
bounds for selection, J. Comput. System Sci 7, 1973, pp. 448-461. [3] 0. Borfivka, o jist6m prob16mu 
minimi.ln~m, l%ca Moravsk6 P?[rodov;deckk Spole6nosti 3, 1926, pp. 37­ 58. (In Czech.) [4] J. Cheriyan, 
T. Hagerup, and K. Mehlhorn, Can a maximum flow be computed in O(nm) time? , Proc. 17th International 
Colloquium on Automata, Languages, and Programming, published as Lecture Notes in Computer Science, Vol. 
443, Springer-Verlag, New York, 1990, pp. 235-248. [5] R. Cole, P. N. Klein, and R. E. Tarjan, A linear-work 
parallel algorithm for find­ing minimum spanning trees , 7 to appear in Proc., 6th Symposium on Parallel 
Algo­rithms and Architectures, 1994. [6] R. Cole and U. Vishkin, Approximate and [14] D. R. Karger Random 
sampling in ma­exact parallel scheduling wit h applications troids, with applications to graph connec­to 
list, tree, and graph problems, I%oc. tivit y and minimum spanning trees, Proc. 27th Annual IEEE Symp. 
on Foundations of 3~st Annual IEEE Symp. on Foundations of Computer Science, Computer Society Press, 
Compute~ Science, IEEE Computer Society Los Alamitos, CA, 1986, pp. 478-491. Press, Los Alamitos, CA, 
1993, pp. 84-93. [7] B. Dixon, M. Rauch, and R. E. Tarjan, [15] R. M. Karp and V. Ramachandlran, A Verification 
and sensitivity analysis of min-survey of parallel algorithms for shared­imum spanning trees in linear 
time, SIAM memory machines , Chapter 17 in Hand- J. on Computing 21, 1992, pp. 1184-1192. book of Theoretical 
Computer Science, Vol­ume A: Algorithms and Complexity J. [8] M. Fredman and D. E. Willard, Trans­ van 
Leeuwen, ed,, MIT Press, Cambridge, dichotomous algorithms for minimum span- Mass., 1990, pp. 869-941. 
ning trees and shortest paths, l%oc, 31st Annual IEEE Symp. on Foundations of [16] V, King, A simpler 
minimum spanning tree Computer Science, IEEE IEEE Computer verification algorithm manuscript (1993). 
Society Press, Los Alamitos, CA, 1990, [17] J. Kom16s, Linear verification for spanning pp. 719-725. 
trees , Combinatorics 5, 1985, pp. 57-65. [9] H. N. Gabow, Z. Galil, and T. H. Spencer, ~181 J * Kruskal 
7 OrI the shortest spanning Efficient implementation of graph algo- subtree of a graph and the traveling 
sales­ rit hms using cent raction, Proc. 25th An­man problem, Proc. Amer. Math Sot. 7, nual IEEE Symp. 
on Foundations of Com­1956, pp. 48-50. puter Science, IEEE Computer Society Press, Los Alamitos, CA, 
1984, pp. 347-357. [19] p. Raghavan, Lecture Notes cm Ran­ domized Algorithms, Research Re­ [10] H. 
N. Gabow, Z. Galil, T. Spencer, and port RC 15340 (#68237), Computer Sci- R. E. Tarjan, Efficient algorithms 
for find­ ence/Mathematics IBM Research Division, ing minimum spanning trees in undirected T.J. Watson 
Research Center, Yorktown and directed graphs, Combinatorics 6, Heights, NY, 1990, p. 54. 1986, pp. 109-122. 
 [20] R. E. Tarjan, Applications of path com­ [11] R. L. Graham and P. Hell, On the his­ pression on 
balanced trees, J. Assoc. Com­tory of the minimum spanning tree prob­ put. Mach. 26, 1979, pp. 690-715. 
lem, Annals of the History of Computing 7, 1985, pp. 43-57. [21] R. E. Tarjan, Data Structures and Network 
Algorithms, Chapter 6, Society fo:r Indus­ [12] D. R. Karger, Approximating, verify­ trial and Applied 
Mathematics, Philadel­ing, and constructing minimum spanning phia, 1983. forests, manuscript, 1992. 
[13] D. R. Karger, Global rein-cuts in RNC and other ramifications of a simple mincut algorithm, Proc. 
#h Annual ACM-SIAM Symposium on Discrete Algorithms, Associ­ation for Computing Machinery, New York, 
NY, and Society for Industrial and Ap­plied Mathematics, Philadelphia, PA, 1993, pp. 21-30. 
			