
   As shown in Figure 4, the sorting algorithms normally discussed in the second course can be organized 
into a class hierarchy. Indeed the abstract sorters of this hierarchy cor­respond to way in which sorting 
algorithms have been tradi­tionally For example, consider the quicksort algorithm: 1. Select a pivot; 
and then 2. Using the pivot split the data to be sorted into two sub­lists and then recursively quicksort 
the sublists.  As shown in Figure 4 we can define the abstract class and the concrete class The abstract 
class de­fers step 1 to the derived (concrete) class but implements step 2. This approach explicitly 
captures the notion that, af­ter having somehow selected a pivot, all quicksorters are the same. The 
use of the class hierarchy makes this plainly evi­dent. 3.2 Abstract Trees and Tree Traversals As shown 
in Figure 1, we may view a tree as a special­ized container. The C++ code given in Figure 5 illustrates 
how a container is specialized to obtain a tree by augment­ing the generic container interface with functions 
specifically defined for manipulating trees. Specifically, every tree pro­vides the following functions: 
 returns the object (key) in the root node of this tree; returns the specified of this tree; returns 
true if this tree is the empty tree; Degree returns the degree (number of subtrees) of this tree; and, 
 Figure 5: Tree class Many algorithms involve the systematic visiting one-by­one the keys contained in 
the nodes of a tree. Visiting all the nodes in a tree is called a tree traversal. The common tree traversals 
are depth-first traversal and breadth-first traver­sal. For example, using the abstract tree interface 
described above we can write an abstract depth-fist tree traversal func­tion shown in Figure 6. Notice 
how the depth-first traversal routine is based on the visitor design pattern-it takes an ab­stract visitor 
and causes it to systematically visit all the keys in this tree.  Figure 6: Depth-first tree traversal 
The principal pedagogic benefit of this approach is that the notion of tree traversal is presented without 
the need to consider explicitly the representation of a tree. In fact, the algorithm given in Figure 
6 works for all of the trees in the class hierarchy. Furthermore, by using a visitor we remove the application-specific 
activities from the traversal routine. What remains is the essence and nothing more.  3.3 Abstract Graphs 
and Graph Traversals As shown in Figure 1, a graph as a specialized container. Specifically, we view 
a graph as a container that holds two distinct kinds of objects-vertices and edges. The essence of many 
graph algorithms is a systematic visiting of either the edges or the vertices of a graph. For example, 
three of the most common graph traversal algo­rithms are depth-first traversal, breadth-first tmversal, 
and topological-order traversal of the vertices of a graph. By defining and using a generic graph interface 
it is pos­sible to write abstract graph traversal algorithms in much the same way as the tree traversal 
algorithms described in the preceding section. In fact, the algorithms thus written are (not surprisingly) 
very similar to the corresponding algo­rithms for trees. The principal pedagogic benefit of this ap­proach 
is that the notion of graph traversal can be presented without the need to consider explicitly the representation 
of a graph. 3.4 Abstract Solution Spaces and Problem Solvers A backtracking algorithm finds the solution 
to a problem by systematically traversing the nodes of the solution space for that problem. In general, 
the solution space is an arbitrary graph. However, for many important applications the nodes form a tree 
(e.g., the O/l knapsack problem). Figure 7 defines an abstract base class for representing the nodes 
of a solution space. By defining an abstract inter­face, it is possible to hide the details of the specific 
problem to be solved from the backtracking algorithm. In so doing, it is possible to implement completely 
generic backtracking problem solvers. Each node of a solution space supports the following functions: 
98  
			