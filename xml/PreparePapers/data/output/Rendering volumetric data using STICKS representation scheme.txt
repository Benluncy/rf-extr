
 Rendering Volumetric Data using the STICKS Representation Schem e C. Montani ° R. Scopigno t ° Istituto 
Elaborazione dell'Informazione t Istituto CNUCE Consiglio Nazionale Belle Ricerche Consiglio Nazionale 
Belle Ricerch e via S. Maria, 46 - 56100 Pisa ITALY via S. Maria, 36 - 56100 Pisa ITALY Abstrac t An 
increasing need to efficiently represent and rende r 3D volumetric data is being experienced in man y 
application fields ranging from scientific and medica l visualization to CAD . A technique of representing 
thi s kind of data, the Sticks representation scheme, is propose d here with the aim of allowing an efficient 
representatio n and rendering of voxel data on low-capability workstations . This data model is based 
on a 3D extension of the well ­known run-length encoding methods . It requires O(kn 2 ) memory cells 
to represent 0(n3) volumetric data and produces a degree of data compression greater than that o f the 
Octree model . Rendering a frontal orthographi c projection of a Sticks-represented volume is a very 
simpl e task and requires only a partial scan of the data . A Ray Tracing algorithm is presented for 
the synthesis o f gradient-shaded parallel projections ; the proposed algorith m exploits the data compression 
to drastically reduce th e complexity of rendering . CR Categories: I .3 .3 [Computer Graphics ] Computational 
Geometry and Object Modelling - Curve , surface, solid and object representations . I .3 .7 [Compute 
r Graphics] Three-Dimensional Graphics and Realism - Color, shading, shadowing and texture . Keywords 
: Volumetric data, magnetic resonance imaging , thresholding, compression techniques, ray tracing , gradient 
shading . 1. Introduction Thanks to the ability of Volume Rendering techniques to provide general means 
of visualization for bot h measured and calculated data, the use of the volumetri c approach to represent 
and render three-dimensional data i s spreading into many different areas [Fren89] . Pennissinn to CDp, 
v. ithom lee all or pan of this material is granted pruciied that the copie s are not made or distributed 
for direct commercial udvunruge, the ACNl copyright nonce and the title of the publication and its date 
appear . and notice is gisen that copying is Iry permission of due Association for Computing Machinery 
to copy otherwise . or to rcpuhlish . requires a le e and;or specific permission . e . 1090 ACM tt-X97Y 
1-d 17- I1`411001 2,ri,_187S l _iIm The direct acquisition of 3D volumetric data has been made possible 
by the introduction of computer driven 3 D scanner devices such as X-ray Computed Tomograph y (CT), Magnetic 
Resonance Imaging (MRI), Positro n Emission Tomography (PET), and Ultrasound scanners which input the 
properties of real 3D objects directly in machine readable format, At present the predominan t method 
of analyzing the two-dimensional cross sectional images returned by these scanners is by means of sequential 
observation of individual 2D slices and th e viewer's subsequent "mental reconstruction" of the three 
­dimensional relationships . Drawbacks of this "human­assisted" reconstruction, very common in the medica 
l diagnostic area, are the need for specialized skills, the non ­determinism of the obtained results 
(errors can be cause d by the intrinsic difficulty of the reconstruction process ) and the difficulty 
of reproducing the "mental model " obtained in order to communicate with other people . Conversely, computerized 
reconstruction of th e information contained in 3D data has proven to b e effective in numerous fields 
. Belonging to anothe r important class of volumetric data are the empirical dat a on 3D grids produced 
by measures and/or simulations i n geophysics, astrophysics, meteorology, chemistry an d many other scientific 
areas . The use of volumetric techniques would also be of great value in visualizing o f scenes composed 
of surface-defined and volumetric-define d components : in the non-destructive analysis of prototypes 
designed and produced by CAD-CAM tools, for example , the output of 3D scanners could be compared with 
th e geometry of the CAD model [Jen89b] . A volumetric representation is based on a partition o f space 
into a regular 3D grid of elementary cells . A set o f values describing the characteristics of the scene 
in th e elementary sub-volume of the space is associated to eac h element of the 3D grid . In the following 
we will refer t o voxel-based representation only, i.e. to data sets in which the value of the voxel 
is considered constant throughou t the whole grid cell associated to that voxel . Two antitheti c approaches 
are possible to render volumetric data . The first is the computation of a surface-model approximation 
o f the objects represented by the data and the use of curren t well-known surface rendering techniques 
[Fo182] . Th e second approach makes use of rendering techniques which Computer Graphics Volume 24 
Number 5 November 1990/87 allows for the direct visualization of volumetric data . A s stated in [Ups89] 
the second approach proves to be mor e appropriate in a voxel-based environment. This is essentially 
because of the complexity of the surface mode l when a good approximation of the detected surfaces i 
s required . The surface model representing a 0(n 3 ) volumetric space can be described by a complex 
O(kn 2) triangle set [Lore87] ; the surface-based representation of a high resolution voxel space therefore 
consumes a grea t deal of space and time, at least when expensive graphic s processors are not available. 
The most direct way to represent a set of voxels i s through the use of a 3D array of memory cells whos 
e depth is dependent on the amount of informatio n associated to the voxels . The use of high resolution 
voxe l spaces (not less than 2563)is generally required to give a n effective representation of reality 
; a huge amount o f memory is therefore necessary . As an example, an unsophisticated 256 3 cubic array 
with one byte per voxe l requires 16 Mbytes of memory and the computationa l power required to render 
these 16M elementary data is eve n more critical . It is immediately clear how the resolution o f the 
voxel space becomes critical in terms of both memor y requirements and the complexity of the renderin 
g algorithms . Due to the huge amount of memory required , voxel data are often represented in a slice-by-slice 
manner ; only one slice at a time is loaded into the main memory and direct access to the whole set of 
data is thereby lost . A representation model for volumetric data, called th e Sticks Representation 
Scheme, is proposed here . A simila r data structure has been formerly used in [VanH86] to handle an 
extended Z-buffer for the display of a solid mode l being milled by a NC cutting machine . The Sticks 
scheme represents a 3D data grid and make s it possible to exploit the spatial coherence along th e direction 
of one axis to give an 0(kn 2) compressed representation of the data in the n 3 grid . The Sticks scheme 
is defined as a 3D extension of the well-know n Run Length encoding scheme [Free74] and therefore th 
e former k factor is proportional to the mean number o f runs, i .e. the sets of of adjacent voxels having 
the sam e attribute value. The k value, while resulting equal to n in the worst case, is extremely low 
when the Sticks schem e represents classified voxel volumes . The data compression has two main positive 
effects: first, reduction of the memory space required allows for the representation o f high resolution 
classified voxel data even in the low-en d computing area ; secondly, it improves the performance of 
the cost-wise rendering algorithms . Direct volum e rendering of Sticks-represented data is investigated 
here b y means of the Ray Tracing [Glas89] approach . An evaluation of the overall performance of this 
solution i s given in the following . The paper is organized as follows: section 2 present s the Sticks 
scheme and its use to represent volumetric data ; a comparison with other space subdivision representatio 
n schemes is also given. Section 3 decribes an implementation of Ray Tracing on Sticks models and some 
techniques which can be used to reduce its complexity . Finally, some concluding remarks ar e presented 
in section 4 . 2. The Sticks representation of volumetric dat a A volumetric data set can be represented 
either by using a single structure which models the whole data set (e .g . a large n3 array of memory 
cells, where each cell is associated to a single voxel of the grid) or by using a se t of separate data 
structures (e .g the slice-by-slice representation, where each n2 slice represents a section o f the 
original data volume) . Drawbacks common to th e cubic array and the slice-by-slice approaches are high 
memory requirements and the consequent extremely larg e throughput necessary to access all of the represente 
d information . In order to eliminate these drawbacks considerable efforts have been made to design hardwar 
e solutions for managing 3D array models as well as slice processing. Examples of hardware solutions 
for 3D array management are the CUBE architecture [Kau88] in which a particular memory organization and 
a special-purpose H W for the parallel retrieval and storage of voxels are used, the hardware projection 
process adopted in the PARCU M Graphics System [Jac85] and the hierarchical pipeline d hardware organization 
of the Voxel Processor [Go184] . The hardware capabilities of the PIXAR machine, a sophisticated coprocessor 
specially designed for imag e processing, have been exploited to reduce volume renderin g of slice-represented 
data sets to an image projection an d merging task [Dre88] . All these solutions suffer from the common 
drawback of requiring special hardware and are consequently quite expensive . Alternative software approaches 
have been propose d which exploit the spatial coherence of the represented scen e in order to obtain 
a more compact and efficient model i n terms of both memory cost and access time . The space complexity 
of slice-represented data has been lowered b y representing each slice with a more compact scheme, suc 
h as run-length encoding [Tri85] [Rey87], while a compressed representation of a 3D army can be obtained 
b y using the Octree representation [Jac80] [Meag84] . The Octree represents a partition of a cubic space 
obtaine d through a recursive subdivision of the space in octants , exploiting a 3-dimensional coherence 
criterion . Iso-value d octants are represented in the octree structure by leaf nodes , while the other 
octants are represented by non termina l nodes. Unfortunately, considerable space is required by th e 
octree structure and complex search operations are neede d to visualize octree represented scenes [Doc81] 
. The Sticks representation scheme is a volumetri c scheme belonging to the class of Cell Decompositio 
n (CD) models [Reg80] . The Sticks representation schem e has been defined to give higher compression 
compared t o Octree encoding, while maintaining a low access time fo r the represented information. It 
exploits the spatial one­dimensional coherence existing along an axis direction, th e Z direction in 
our current application . Intuitively, each se t of adjacent iso-value voxels having the same abscissa 
an d ordinate is collapsed in a single stick element (Figure 1) . 88/Computer Graphics Volume 24 Number 
5 November 1990 The Sticks model representing a n 3 volumetric data se t V, with V=(v xyz) ; x, y,zin[O. 
.n-1 ] and Val(vX ) the function returning the attribute valu e y Z of the vx y z voxel, can be algorithmically 
defined in th e following way : (a) a stick element is created for each of the following maximal set 
of iso-valued voxels and is univocall y identified by the XY coordinates (x,y), its front an d back Z 
coordinate (f, b; f=b if the stick is composed of only one voxel), and by the value (v) associated to 
th e original voxels : (x,y,f,b,v) <=> { vx , y , i f<_i<_b, Val (vx,y,f-1) v, I Val(vx,y,b+l) v, Val(vx,y 
,i)=v ) (b) for each couple (i,j) of XY coordinates, with OSi<n-1 and 0_j<n-1, all of the previously 
created (i,j,f,b,v) sticks are connected into linked lists ordered by th e value f of the front-face 
Z coordinate; each ordered lis t of sticks is called tracki,j ; (c) a pointer to each tracki ,] is stored 
in the Sticks Holder Array (SHA), an n 2 array of pointer cells .  Y ymax\ xma X Fig.l : The Sticks 
representation scheme . The scheme defined above requires O(kn 2) sticks to represent a 0(n3 ) volumetric 
space; k is the mean numbe r of iso-valued voxel intervals on the chosen compressio n axes. Analogously, 
the mean access time for a (i j,l) voxe l includes a search on the (ij) track for the stick containing 
the required voxel; a mean number of O(k/2) memory accesses are therefore necessary. From these consideration 
s it follows that the Sticks representation scheme proves t o be adequate for representing scenes with 
low values of the k term . This is generally not the case of medical scan ­converted data, while it holds 
true for medical dat a "classified" by the use of thresholding techniques, i .e . with intervals of voxel 
values associated to single classe s of tissues or substances (m of n classification) . Classified volumetric 
data therefore represents the ideal dominion fo r the Sticks representation scheme . The one-dimensiona 
l compression criteria results more effective for these data sets, characterized by irregular and complex 
boundary surfaces, than the three-dimensional space coherenc e criterion used by the Octree encoding 
. As pointed out in the introduction, the main goal o f this work is the development of both a representatio 
n scheme and a visualization technique that could ru n efficiently on personal computers, with their 
critica l limitations in processing performance and quantity o f central memory. In fact, some visualization 
techniques (e.g. Ray Tracing) need the whole data model availabile i n central memory and this contrasts 
with the scanty amoun t of memory of the target hardware . To overcome thi s obstacle, the Sticks representation 
scheme is stored at ru n time on two memory levels using a technique very similar to the pagination methods 
of virtual memory systems . This solution allows application programs to be written as if the whole model 
were in main memory . V(x,y,z) = (237,421,139 ) 00000000111 ;01101 oo00000ll 0000000110 1 Block Identifier 
Track Pointe r Fig .2: Block identifier and track pointer inde x created from the (x,y) track coordinates 
.  The Sticks Holder Array is subdivided into a collectio n of smaller pointer arrays called blocks, 
each of them store d separately in secondary storage . Each block is dynamicall y allocated in main memory 
on request (i.e., when the user accesses or creates a new stick belonging to the block) ; only when the 
central memory is completely allocated an d a new block has to be loaded from secondary storage doe s 
the system individuate through a LRU (Last Recentl y Used) criterion, the block in main memory that has 
to be disallocated to free the needed space . Let us explain the pagination technique by means of a n 
example. Let (x,y) be the two-byte integer coordinates of a track in the data structure (Figure 2). The 
eleven most significant bits of the x and y coordinates identify a bloc k of the SHA, while the five 
least significant bits identify a track inside a block. Therefore, in our implementation the SHA can 
extend from -32768 to 32767 in both dimension s and each block is a 32x32 array of pointers . At run 
time , the allocated blocks are maintained in a bi-directiona l Computer Graphics Volume 24 Number 
5 November 1990/89 linked list (Fig. 3); to access the stick (x',y' ,zmin,zmax) , the system extracts 
the block identifier from the (x',y') track coordinates and checks if the requested block has been previously 
loaded into main memory . If the blocks exists , the stick is searched for, otherwise the block is loaded 
from secondary memory . The retrieved block is then inserte d into the linked list in increasing order 
of the block identifiers. If the unallocated central memory is no t sufficient to allocate the retrieved 
block, the least recentl y used block and all of the sticks belonging to it are saved i n secondary storage 
. The status information (modified or not) of each block allows the system to deallocate a block and 
related sticks without rewriting them on secondary storage if they have not been modified since last 
saving . Depending on the chosen visualization technique, i t was found that, on the average, each block 
is read into main memory just once. This implies that the loss of performance due to the virtual memory 
mechanism i s negligible . block identifie r block statu s last reference time next O--­ nex t ~°----C~ 
Prec - prec track pointers 31 111 nfib 00~~I Fig.3 : The linked list of blocks representing th e currently 
allocated sub-set of the SHA . The memory space required by the Stick s representation scheme is a main 
issue in evaluating th e proposed structure; it is therefore assessed and compared with the Octree space 
complexity . Octree space complexity can be evaluated in terms o f the number of nodes in the hierarchical 
structure . A key to the analysis of space complexity is the following result , stated by Meagher [Mea80] 
and obtained as an n ­dimensional extension to the Quadtree Complexit y Theorem [Sam88] : The size of 
the k-dimensional quadtree of maxima l depth n, representing a set of k-dimensional objects, i s proportional 
to the sum of n and the size of the (k-l) ­dimensional interfaces between these objects " From this and 
the results given in [Dye82], the mean space complexity (C) of an Octree representing a rectangular 2P*2P*2P 
sub-volume in the 2n*2n*2n space is: C(Octree_Rep) = 4(n+6*22P) C(Octrce_Node ) >_ 24*22P C(Octrec_Node) 
(1) On the other hand, the space complexity of the Stick s representation is dependent on the area covered 
by th e parallel projection of the represented data set on the X Y plane and on the mean number, k , 
of substance classe s crossed by each track. The Sticks space complexity is: C(Sticks_Rep) = O(n2)C(SHA_Cell) 
+ O(k n2) C(stick) where k depends on the complexity of the data set . It can be easily demonstrated 
that the mean spac e complexity of the Sticks representation of a rectangular 2P*2P*2P sub-volume in 
the 2n*2n*2n space (with 2P > 2n-1)is: C(Sticks_Rep) 5*22P C(stick) (2) Therefore, the ratio between 
the two complexities, (1) an d (2), is the following : C(Sticks_Rep) < 5 C(stick) C(Octree_Rep) 24 C(otree_node) 
where the octree node is composed of an information fiel d plus eight pointer fields, while the stick 
is composed o f only four fields : the front and back face coordinates, th e value and the pointer field 
. The space complexities of Octree and Sticks representation were also valued by comparing the spac e 
required for the representation of a variable number n o f randomly positioned spherical bodies in a 
256 3 grid space [Mont90] . The Sticks space complexity resulted nearly one order of magnitude better 
than that of other scheme .  3. Rendering Sticks-represented volumetric dat a Ray Tracing (RT), a well-known 
rendering algorith m [Glas89], has frequently been used to render volumetri c data [Sab88] [Lev88] [Ups88] 
. The commonly discussed disadvantages of RT are the high computational cost, du e to both the great 
number of rays necessary to compute th e image and the non-trivial task of tracing a ray on the 3 D grid, 
and the artifacts produced in the images [Dre88] . I n fact, RT algorithms for geometric models are characterized 
by the generation of a large number of secondary rays for each primary ray-scene intersection in order 
to guarantee a high quality rendering of the generated image [G1as89] . Conversely, the same degree of 
quality is not require d when using RT for rendering volume data : specular reflection effects are not 
common on tissue surfaces an d the generation of shadows can often be avoided . Only surface shading 
and transparencies are needed to adequatel y visualize the volumetric data . Parallel or perspective 
projections can be generated using a RT approach, but the simpler parallel projection s are sufficient 
when rendering volumetric data is the goal . This assertion is justified by the following two facts : 
perspective does not enhance the 3D perception of small , 90/Computer Graphics Volume 24 Number 5 
November 199 0 irregular objects, and parallel projections preserve distances and other geometric information 
which allows direc t measurements on the rendered images [Rey87] . The secon d of the above mentioned 
drawbacks of ray tracing i s difficulty in avoiding artifacts due to point sampling, e.g . artifacts 
which originate when divergent rays sampl e voxels which are not adjacent . This well-know n disadvantage 
is critical when computing perspectiv e projection and is generally reduced by casting additiona l rays, 
and therefore increasing the overall computationa l complexity. On the contrary, when parallel projections 
are used and if a suitable voxel/pixel scale factor is chosen, the artifacts due to unaccounted-for voxels 
are not critical . An effective implementation of the RT algorithm , working on Sticks-represented volumetric 
data, i s proposed here. According to the classical definition, for each pixel of the required image 
the RT algorithm traces a ray in the 3D grid and computes the colour of the objec t hit by that ray . 
Other RT proposals [Lcv88] [Ups88 ] resample the volumetric data at k evenly spaced location s along 
each ray by tri-linearly interpolating the values o f the eight grid points closest to each sample location 
; a grid-based interpretation of the volume data (point sample s of a continuous function) clearly underlies 
these approaches to volume RT. Conversely, the presen t proposal conceives the volumetric data set as 
a voxel­based one (elementary volumes of homogeneous value) . All of the voxels traversed by each ray 
are checked, and th e values are not interpolated but considered constant over th e entire voxel space 
. At first, each ray is intersected by th e bounding volume (bvol) encapsulating the subset of interest 
of the volumetric data . The bvol can be compute d while creating the Sticks representation . A simple 
bvol , the minimal orthogonal parallelepiped containing all th e not-empty voxels, has been used in the 
actua l implementation, even if tighter bvols could be devised . If the ray does not pass through the 
bounding volume, the background colour is assigned to the pixel associated t o the ray. Otherwise, only 
the ray segment internal to the bounding volume is traced in the 3D grid . The algorith m identifies 
the cells pierced by the ray and, for each cell , searches in the Sticks representation for a stick coverin 
g that cell. If the algorithm finds a stick pierced by the ray , shading computation is applied to the 
stick . Depending on the transparency coefficient associated to the pierced stick , the ray is either 
stopped, or other intersections are searche d and shaded . The resulting colour is associated to the 
imag e pixel. On the other hand, if scan conversion of the ra y terminates without a pierced stick, the 
background colou r is assigned to the pixel . The Bresenham algorithm [Bre65] for the rasterizatio n 
of a line in 2D space has been extended to 3D space for the scan conversion of rays. It has also been 
modified t o identify, not only some, but all the cells traversed by th e ray. This scan conversion algorithm 
uses an incrementa l approach based on the selection of a "driving axis " (th e axis of greatest increase 
or decrease of the ray) similar t o that proposed by Fujimoto [Fuj86] . Each traversed cell i s therefore 
identified through the use of increment/decremen t operations without any multiplication or division 
. In order to optimize the Sticks model access, for each step the algorithm returns the set of adjacent 
cells (cell set) pierced by the ray and having the same XY coordinates . The cell s identified by the 
Bresesnham algorithm, the cells actuall y traversed by the ray and the cell sets returned by th e optimized 
algorithm are shown in Figure 4 ; for the sake of simplicity, an example of a ray parallel to the YZ 
plan e is reported there.  :1um~~~~~l ­ n.0 - INN Z : cells identified by the Bresenham algorithm 0 
; additional cells traversed by the ray ray =INN 1M C. ; cell sets returned Fig 4 : Cells traversed 
by the ray and cell sets returne d by the scan conversion algorithm . The Sticks representation has a 
feature which, unde r certain conditions, makes it possible to render th e represented data in an extremely 
economical way . It shoul d be noted that if the chosen viewing direction is along th e Z-axis, all of 
the generated rays are parallel to the Z-axis , It is therefore unnecessary to scan convert and trace 
thes e rays because it is possible to immediately identify th e pierced sticks by simply analysing the 
SI-IA cell associate d to each ray . This feature of the Sticks representation can b e extremely useful 
when a fast sketch of the content of th e scene is required: an HSR frontal view of the scene can b e 
produced in 0(n 2) time. Shading Rendering the iso-value surfaces contained in th e classified data is 
enhanced by using shading techniques ; several techniques have been proposed to compute surface shading 
of voxel data [Chen85] [Jen89a] [Lcv88] . They can be subdivided into three categories : distance-only 
, image-based gradient and object-based gradient shadin g methods, in order of increasing complexity 
and quality of the generated images . The fist two methods are generall y Computer Graphics Volume 24 
 Number 5 November 1990191 used in front-to-back or back-to-front visualization algorithms [Rey87] because 
they let shading be carried ou t as a post-processing task on a depth-valued image , requiring only calculation 
of the distance of each voxe l from the viewer . Conversely, object-based gradien t methods calculate 
the surface normal by considering the content of a object-space sub-volume surrounding eac h visible 
voxel . Object-based gradients are therefore mor e suitable for the RT approach than front-to-back or 
back-to ­front algorithms because the former univocally determines the visible voxels, and the gradient 
has to be computed for these visible voxels only. The simple shading rule implemented, the binary gradient 
[Jen89a], approximates the voxel surface normal by considering the six face­connected voxels . For each 
iso-valued neighbouring voxel , the normal vector receives a component in the opposit e direction . Fast 
access to voxel values is therefor e necessary for efficient implementation of object-spac e gradient 
shading, and herein lies an advantage of the Stick s scheme over other run-length slice-by-slice models 
. When only 6 neighbours are considered, binary gradient generate s only 26 different values of the normal 
vector . More stric t approximations of the surface normal have also been obtained by considering a wider 
set of neighbouring voxels (Figure 5), at the expense of further accesses to th e Sticks scheme . (a) 
6 neighbour s (b) 18 neighbours (c) 24 neighbour s Fig .5: Object-space gradient: voxel subset considered 
to compute the approximated surface normal . Ray Tracing complexity The overall complexity of rendering 
volumes throug h RT is greatly reduced by tracing a substantially lowe r number of rays as compared to 
the classical RT of geometrical models . Only O(N2 ) rays are traced by the algorithm, with an image 
resolution of N 2 , and the computational cost for tracing each ray is proportiona l both to the number 
of cell sets originated by the sca n conversion of the ray in the 3D grid and the mea n complexity of 
the Sticks model access . The describe d incremental scan conversion algorithm returns a number of cell 
sets which is dependent on the orientation of the ray and the resolution of the 3D grid, while the Stick 
s model access requires a search on an ordered list whos e length is proportional to the complexity of 
the scene i n the Z direction . Fewer access to the Sticks mode l Even if the number of rays is reduced 
with respect to classical RT, the costs of scan converting the rays and th e associated access to the 
Sticks representation remain high . The RT algorithm on the Sticks model can be optimize d by using information 
that makes it possible to reduc e both the number of cell sets actually returned while scan converting 
the ray and the number of times it must acces s the Sticks data structure . Cell-set purging can be driven 
b y the use of a lower resolution space subdivision . Each cell of the lower resolution grid, known as 
macrovoxel, i s associated to a set of m3 voxels of the higher resolutio n grid. The binary value of 
each macrovoxel represents the presence/absence of sticks in the associated sub-volume. The RT algorithm 
takes care of the information codified in the macrovoxel structure by scan converting the rays into this 
low resolution space . Only when a macrovoxe l having a positive value (i.e. containing sticks) is pierced 
by the ray, scan conversion of the ray in the corresponding high resolution sub-volume is carried out 
. This reduce s scan conversion costs and also lowers the required Stick s structure query operations 
. In the case of a 2563 3D grid, a 163 macrovoxe l structure (with 163 voxels associated to each macrovoxel 
) has been simply defined during the Sticks conversion phase without an appreciable increase in the conversion 
algorithm's complexity . The space complexity of this macrovoxel structure (4096 1 bit macrovoxels) i 
s extremely low with respect to the complexity of Stick s scheme. On the other hand, the measured increase 
in speed is impressive . For scenes whose objects are not arranged in a totally random fashion but rather 
with an orderl y distribution of empty and not empty zones, a speedup factor ranging from 7 to 10 has 
been obtained . Speedup i s evaluated here by comparing the number of times the Sticks structure must 
be accessed when the macrovoxel structure is supported or not. 4. Concluding remark s A technique for 
the representation of classifie d volumetric data, the Sticks representation scheme, ha s been presented. 
The data compression executed by th e representation scheme, the segmentation techniqu e allowing the 
transparent use of two storage levels and a n optimized ray tracing approach to data visualization mak 
e it possible to efficiently represent and render volumetri c data on low-capability machines. Figure 
6 shows 256x256 image from a 256x256x109 voxel magnetic resonanc e scan of a human subject; the image 
is shaded by using an object-space gradient working on 24 voxel neighbours . Figure 7 and 8 report 192x232 
images from 192x 192x23 2 voxel data set, obtained by interpolating a 96x96x11 6 electron density map 
of the active site of SOD (superoxide dismutase). In Figure 7 the most external shell only i s 92/Computer 
Graphics Volume 24 Number 5 November 1990 visualized, while in Figure 8 the transparency of the former 
reveals internal details. All of the images have been rendered on a Apple MacII personal computer, whic 
h required times from 70 to 250 seconds ; performance is therefore more than one order of magnitude better 
than other reported results obtained on a similar machin e [Gei89] . The IMAGE and DataScope 2D data 
visualization software, developed by N.C.S.A. and working on Apple MacII, has been used to classify the 
magnetic resonanc e scan data . An extremely effective and economical Scientific Visualization system 
was therefore obtained by combining the 2D features of the NCSA software with the capabilities of the 
3D volumetric representation an d rendering application presented here.  Acknowledgement s This work 
was partially funded by the Progett o Finalizzato "Sistemi Informatici e Calcolo Parallelo" , Sub-project 
"Calcolo Scientifico per Grandi Sistemi", an d the Progetto Strategico 1990 "Sistemi Elettronic i Avanzati", 
Sub-project "Metodi e Calcolatori Dedicati" , both of the Consiglio Nazionale delle Ricerche . The magnetic 
resonance scan was taken on th e Siemens Magnetom and provided courtesy of Siemen s Medical Systems Inc., 
Iselin, NY. The SOD data set provided courtesy of Duncan McRee, Scripps Clinic, L a Jolla, CA. We thanks 
also the University of North Carolina at Chapel Hill for having collected and diffuse d the above data 
. Reference s [Bre65] J.E. Bresenham, "Algorithm for Computer Control of Digital Plotter", IBM System 
Journal, 4(1) , 1965, pp.25-30 . [Chen85] L.S. Chen, G.T. Herman, R,A. Reynolds, "Surface Shading in 
the Cuberille Environment", IEEE C .G .&#38;A ., December 1985, Vol .5, No.12, pp.33-43 . [Dip84] M 
. Dippe, J. Swensen, "An Adaptive Subdivision Algorithm and Parallel Architecture for Realisti c Image 
Synthesis", A .C .M. Comp . Graph., Vol .18 , No.3, July 1984, pp.149-158 . [Doc8l] L.J. Doctor, J.G. 
Toborg, "Display Techniques for Octree-Encoded Objects", IEEE C .G .&#38;A ., Vol.1 , No.3, July 1981, 
pp .29-38 . [Dre88] R . Drebin, L. Carpenter, P. Hanrahan, "Volume Rendering", A.C.M. Computer Graphics, 
Vol .22 , No.4, August 1988, pp .65-74 . [Dye82] CR . Dyer, "The Space Efficiency of QT", Comp . Graph 
. and Image Proc ., Aug. 1982, pp.335-348. [Fo182] J .D. Foley, A. Van Dam, "Fundamentals of Interactive 
Computer Graphics", Addison Wesley . , Reading (MA),1982 . [Free74] H . Freeman, "Computer processing 
of line-drawin g images", A .C.M. Comp. Surveys, Vol .6, pp .57-97 , 1974 . [Fren89] K. A. Frenkel, "Volume 
Rendering", Comm . A .C .M ., April 1989, Vol.32, No.4, pp .426-435 . [Fuj86] A . Fujimoto, T . Takayuri, 
K . Iwata, "ARTS : Accelerated Ray-Tracing System", IEEE CG&#38;A, , Vol .6, No .4, April 1986, pp .16-26 
. [Gei89] D. Geist, M .W. Vannier, "PC-Based 3 D Reconstruction of Medical Images", Computers &#38; Graphics, 
Vol. 13, No.2, 1989, pp.135-143. [Glas89] A. S . . Glassner, "An Introduction to Ray Tracing" , Academic 
Press, 1989 . [Go184] S .M. Goldwasser, "A Generalized Object Display Processor Architecture", IEEE CG&#38;A, 
Vol .4, No .11 , 1984, pp.43-55 . [Kau88] A. Kaufman, R. Bakalash, "Memory and Processin g Architecture 
for 3D Voxel-Based Imagery", IEEE CG&#38;A, Vol.8, No.11, 1988, pp.10-23 . [Jac80] C.L. Jackins, S .L. 
Tanimoto, "Octrees and Their Use in Representing Three-Dimensional Objects" , Comp. Graph. and Image 
Proc., Nov . 1980, pp .249 ­ 270 . [Jac85] D . Jackel, "The Graphics PARCUM System : a 3 D Memory Based 
Computer Architecture fo r Processing and Display of Solid Models", Compute r Graphics Forum, Vol.4, 
No.1, Jan. 1985, pp.21-32 . [Jen89a] G.J. Jense, D .P. Hulismans, "Interactive Voxel-Based Graphics for 
3D Reconstruction of Biologica l Structures", Computer &#38; Graphics, Vol .13, No .2 , 1989, pp .145-15 
0 [Jen89b] G .J. Jense, "Voxel-based methods for CAD" , Computer Aided Design, Vol.21, No .8, October 
. 1989, pp .528-533 . [Lev88] M . Levoy, "Display of Surfaces from Volume Data" , IEEE C.G.&#38;A ., 
May 1988, Vol .8, No .5, pp .29-37 . [Lore87] W Lorensen, H . Cline, "Marching cubes : a hig h resolution 
3D surface construction algorithm" , A .C .M. Comp. Graph., Vol. 21, No.4, pp .163 ­170, 1987 . [Mea80] 
D. Meagher, "Octree Encoding: a new technique fo r representation, manipulation and display o f arbitrary 
3D objects ", Tech . Rep . IPL-TR 80-111 , R.P .I., Oct '80 . [Meag84] D .J. Meagher, "Interactive Solids 
Processing for Medical Analysis and Planning", Proc. NCGA 84 , NCGA, Fairfax, Va ., 1984, pp .96-106 
. [Mont90] C . Montani, R . Scopigno, "Ray Tracing CSG tree s using the STICKS representation Scheme" 
, Computer &#38; Graphics, Vol .14, No .3, 1990 . [Rey87] R. A. Reynolds, D. Gordon, L.S. Chen, "A Dynamic 
Screen Technique for Shaded Graphics Display o f Slice-Represented Objects", Computer Graphics an d Image 
Processing, No .38, 1987, pp .275-298. [Sab88] P, Sabella, "A Rendering Algorithm for Visualizin g 3D 
Scalar Field", A.C.M. Comp. Graph ., Vol .22 , No.4, August 1988, pp.51-58 . [Sam88] H. Samet, R .E. 
Webber, "Hierarchical Data Structures and Algorithms for Computer Graphic s (Part I: Fundamentals)", 
IEEE C.G .&#38;A ., Vol.8 , No.5, May 1988, pp .48-68 . [Tri85] S .S. Trivedi, "Representation of three-dimensional 
binary scenes", Proceedings N .C .G .A ., Dallas , April 1985, pp .132-144 . [Ups88] C . Upson, M . Keeler, 
"V-BUFFER : Visible Volum e Rendering", A.C.M. Computer Graphics, Vol .22 , No.4, August 1988, pp.59-64. 
[Ups89] C . Upson, "Volumetric Visualization Techniques" , in "2-D and 3-DVisualization Workshop", A 
.C .M . SIGGRAPH Course Note, August 1989, pp . 1-86 . [VanH86] T. Van Hook, "Real-Time Shaded NC Millin 
g Display " , A .C .M. Computer Graphics, Vol .20 , No.4, August 1986, pp.15-20 . Editor's note : Figures 
6-8 can be found on page 1/2 . Computer Graphics Volume 24 Number 5 November 1990/93  
			