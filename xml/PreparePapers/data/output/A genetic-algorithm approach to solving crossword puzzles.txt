
 A Genetic-Algorithm Approach to Solving Crossword Puzzles t Management Information Systems Department 
University of Arizona Tucson, Arizona titus@mis.arizona. edu $Grifith UniversitQueensland, Austr Jia 
cadharr lffi!kraken.itc .gu.edu .au Abstract This work describes attempts to solve crossword puzzle 
variants, known as go-words, using a prob­abilistic approach in the form of a genetic algo­rithm. The 
go-words puzzle is defined by a fixed rid, which includes black squares, and a given fexicon containing 
words of a specified length. This ~roblem, like similar crossword puzzle problems, MINP-complete. The 
size of the search space for problems of reasonable size, however, makes it a difficult candidate for 
attempts to generate solu­tions through the use of a deterministic algorithm. The complexity of these 
problems suggests the ap­plicability of a probabilistic algorithm. Thw p­ er decribea, in some detail, 
a genetic algorithm for solving such puzzles and the authors experi­ences with ita construction. 1.0 
Overview The general problem of crossword puzzle construc­tion is NP-complete [Gare79]. This problem 
is described as that of taking an n x n matrix con­sisting of letter sqtiares and blank spaces and de­termining 
if words from a finite lexicon can be assigned to strings of letter squarea in such a way that no letter 
squares are left unfilled. This prob­lem has beerr attacked in a variety of ways over the last two decades 
[Maz176, Smit81, Harr92, Berg871 with some modest success. The general roblem, however, remains extremely 
complex an f defies deterministic solution. That this is so can be seen from the fact that go-words ACU-ZA2 
w29n14,U8A e Im m MJ791-s6LwMun#m3_$lsll puzzles (described below) are periodically pub­lished in magazines 
and solved by readers; while no machine generated solution has yet bettered those of the readers. Traditional 
tree spanning algorithms continue to be applied to the prob­lem, with the ingenuity of individual researchers 
expandin the search envelope slightly with each iteration Harr92]. It is easy to determine that f increases 
in the size and/or ad hoc complexity of individual puzzles can move them quickly out of r,each of deterministic 
machine SO1utio s once again. It has been shown that the size oft i e sohr­tion set can be counted [Harr90]; 
and for the tar­get go-words puzzle is estimated to be 2.2 x 1049. For the purposes of this paper, we 
have focused on a crossword puzzle variant known as go-words. Use of this puzzle variant is suggested 
by the fol­lowing facts. Such puzzles appear regularly in weekly magazines in various countries. They 
em­ploy a letter scorin mechanism, so that puzzle solutions can be ranI ordered. And prizes are of­fered 
to readers for the highest scoring solution, giving them a strong motivation to do well and providing 
us with a very ood performance mea­sure for our algorithmic et orts. G~words puzzles differ from the 
general cross­word puzzle construction problem described above only in that all words in the lexicon 
associated with a puzzle are of a fixed Iengt h. The value of individual letters is given as part of 
each spe­cific puzzle. We have taken as our standard puz­zle one that appeared in Worn an s Day (an Aus­tralian 
weekly magazine), on December 2, 1981. The eventual winning entry was published in the February, 231982 
issue of the same magazine. 2.0 Complexity Problems are considered complez because of the size of the 
search space that must be traversed in a quest for legitimate solutions. In the case of the o-words 
puzzle, this is a two phase pro­cess. d any attempts to arrive at a solution will fail when a point is 
reached where no word avail­able in the lexicon has the necessary interaectin lette to till the next 
word siot. At~.d!the se on level,% ecause mdmdual letters have omt v ues, each word in the lexicon haa 
a wor value, con­sequently some puzzle solutions will have higher scores than othera. The problem can 
be stated as the two sub-problems of finding solutions and finding the best solution. In general, deterministic 
(tree spanning) algorithms focus on the first of these sub-problems and the genetic algorithm focuses 
on the second. The de­terministic approach attempts to traverse the en­tire solution space and locate 
all of the solutions. If it succeeds in traversing the entire solution set, it must encounter the best 
solution. The prob­lem Iiea in the size of the solution space and the time required to visit all of it. 
The genetic al­gorithm is robabdidic and repeatedly attempts to use the t eat solutions it has found 
so far to construct new solutlons that are shghtly better. Such an algorithm doea not guarantee to find 
any solutions, no matter how long it runs. Instead, it warrants that it will probably find a solution 
that is probably pretty good. Following considerable work on this problem us­ing a deterministic approach, 
we have designed a genetic algorithm in an effort to explore the ben­efits of such an approach.  3.0 
Description Genetic algorithms are a useful techni ue for aolv­ing a great variety of problems that ?all 
into the complexity classes NP-complete and NP-hard. The general form of these algorithms is described 
in several places [H01175, Gold89]. Here we assume the reader has a working knowledge of the parts and 
purposes of a traditional genetic algorithm. In the remainder of this paper, we endeavor to point out 
only those places where our genetic al­ orithm differs in significant ways from the tra­~itional. model. 
in the following description we pay particular at­ tention to the encoding used to represent a par­ ticular 
solution as a bit string (or gene), to the objective function used to determine the fitness of a gene, 
and to the cmssouer operations used to make better solutions out of good solutions. The important issue 
of parameter tunin$, which is often a very important consideration m elicit­ ing performance from a genetic 
algorithm, is ad­ dressed later. The problem of finding go-words solutions falls into the category of 
combinatorics problems, as opposed to numeric problems. The implication of this is that the solution 
space for the problem is discrete rather than continuous. Consequently, a tiny change in a very good 
answer ma render it into an inferior answer. Numeric prob L ma, on the other hand, are more likely to 
be susceptible to techniques such as annealing, because small changes in an answer leave you in the near 
vicinity of that answer and tend to move you toward a (possibly local) minimum or maximum. %1 Encoding 
The discrete nature of the solution space makes it very important that special attention be paid to the 
representation (or encoding technique) of solutions in the genetic algorithm. gene. Options open to us 
include a pure binary representation, a letter baaed representation, or a whole word rep­resentation. 
(Note: The authors are presently ex­ploring methods of using a binary encoding of just the intersections 
in the puzzle.) Our present algo­rithm adopta the whole word approach. (Notice that Mazlack s crossword 
puzzle generation alg~ rithm is reported to have used words originally and gravitated to letters later.) 
The actual enwding of a solution (or partied so­lution) as a gene is accomplished with a character string. 
Letters in the string that represent inter­sections in the target puzzle occur only once in the string. 
A mapping function is maintained to convert the gene string to an actual puzzle solu­tion. This scheme 
is depicted in Figure 1. The arrows indicated the first few of the 35 intersect­ing letters found in 
the target puzzle. The dou­ble arrow indicates the position at which the h in thatch is reused as part 
of a second word. This approach keeps the gene size manageable by avoidhg redundant information; while 
allowing us to identify any horizontal or vertical word slot as a complete entity. thatcheffeteraspedrc4ustalarmretoxtextrasasternlthrihaptotustt 
rvis Fimne 1 The algorithm establishes an initial population by inserting random words from the lexicon. 
This provides each gene with a good start, but not a perfect start. Horizontal word slots are filled 
first, then vertical word slots. As vertical word slots are filled, the words in some horizontal slots 
are invalidated as intersecting letters are overwrit­ten. Measurements indicate that 70 to 75 percent 
of the word slots contain valid words in a typical initial population. Using this approach to initial­ization 
Ieavea the population with some distance to travel before it cent ains significant numbers of complete 
solutions to the puzzle. Figure z dis­plays the first few genes in a typical population. It is very possible 
to seed the initial population with known solutions, in what some authors re­fer to as a hybrid approach 
[Davi91]. In prac­tice, however, the present algorithm moves very quickly from its intial state to one 
in which the population represents a large number of complete solutions. It is our conjecture that value 
of seed­ing initial populations with very good solutions, may maximize the effects of the genetic search. 
An analysis of this conjecture is among the things that remain on the to do list. that chef feteraapedrdwstai 
armretartextrasaste mlthrihaptotustt rvi 9 cerilsan&#38;an~i Ownirgaerialpyjaauxav ierasternati avi zzeszdri 
lysoa wl*s~ar*darmttdrmuMlwrat0nsilasterncmrnatttitu9tcsciq smllscorsmdulcetkin&#38;rariseewret ywningboasts 
jckt rawyssairbnntas asternef feterkneerdt tertrevorf edorat yrant stunt ssol ccunnrraserosfes t rumnetriparterank 
lessteedscarrotswirqt rustsmnonnkltyttteeenon ,.. Figure 2 S.2 Objective Function An individual gene 
has no knowledge of how good (or how poor) a solution it represents. The ob­jective function provides 
an ordered ranking of the fitness of the current population. Knowledge about how to arrive at a solution 
is external to the genetic algorithm. Proper rank ordering of the genes that make up a population insures 
that those genes that contain highly valued informa­tion are most likely to contribute that information 
to future populations. The intrinsic nature of the go-words puzzle and the two phase nature of the search 
for a final an­swer make the evaluation of gene fitness fairly straightforward. The more word slots in 
the s~ lution that contain words actually found in the lexicon, the higher the score. Furthermore, since 
completed puzzles can be ranked by the their re­spective letter score sums, we can differentiate among 
them as well. For the first of these we al­low a solution a fixed increment, say 500 points, per legitimate 
word. For the ranking of otherwise completed puzzles, we add in the actual go-words score. The progress 
of the algorithm is sensitive to the relative scores assigned to genes by the objec­tive function. For 
example, if the value of conl­pleted words is low, the population is less agres­sive about gravitating 
to complete solutions. If, on the other hand, the value of competed words is high, the first complete 
solutions in the pop­ulation tend to dominate the population to the exclusion of variety. This topic 
is address below along with other parameter values. LMt Crossover operation Perhaps the most important 
consideration in the conduct of the algorithm is the specification of useful crossover and mutation operations. 
In com­binatorics problems of this kind, it is often difficult to find a crossover operation that takes 
two genes from the parent population and combines them in such a way that as much as possible of the 
good information in each is passed on to their progeny. [Whit89] The selection of a crossover operator 
has considerable impact on the success of the result­ing genetic algorithm. As our objective function 
evaluates solutions with the greater number of legitimate words more fa­vorably, the crossover operator 
is designed to main­tain words where they exist and to promote them where they do not. The primary problem 
pre­sented by this goal is that of intersecting letters. As with initialization of the population, insertion 
of a word chosen at random from the lexicon will likely invalidate intersecting words. However, se­lection 
of words from the lexicon that conform to existing intersection constraints has a stupefying effect on 
a gene. That is, such a word selection technique does well at moving a gene toward a complete solution; 
but then behaves very conser­vatively in its efforts to increase the score of that gene. It would seem 
that what is wanted is for the crossover operations to behave a little less conservatively. In particular, 
we want the crossover operation to be willing (ocassionally) to take a chance on a new intersection character. 
In the framework of traditional genetic algorithms, this is properly the role of the mutation operation. 
We have at­tempted to provide a diverae (and heuristically sensitive) crossover operation, while minimizing 
disruption associated with the operation. We al­low for this by providing four dif7erent varieties of 
crossover and using a situational approach in se­lecting among them. The general form of crossover is 
depicted in Figure 3. When crossover ia called for between two genes, random word slots are selected 
in both of them. If the selected word slots both contain legitimate words, an attempt is made to insert 
those words into appropriate places in the new gene. In par­ ticular, a search ia conducted to locate 
those word slots in the new gene that could accommodate the selected word without violating any intersection 
constraints. If more than one such location exists, one that does not presently contain a valid word 
is preferred. In the end, if a tie still exists, one is chosen at random, and the word is inserted into 
the new gene. The search involved here is quite direct, based on data structures that reflect the specific 
nature of a puzzle. If only one of the two selected word slots con­tains a legitimate word, that word 
is subjected to the process described above; while the other (the non-word) ia replaced by a word from 
the lexicon that is selected to avoid violating existing word constraints. In this process the crossover 
opera­tion accepts as constraints only intersecting let­ters that are part of legitimate words. Intersect­ing 
word slots that contain non-words are not con­sidered to have intersection constraints. Searches and 
selections needed here are also provided for by preprocessing the lexicon and the puzzle de­scription. 
If neither of the two word slots contains a legit­imate word, words are selected from the lexicon as 
described above for both of them. It is this part of the crossover operation that appears to have the 
greatest impact on moving a popula­tion rapidly toward complete solutions. Once a gene represents a complete 
solution, this option becomes effectively unused. thatcbef fsteraspedrobustal armretortestrasaWernlthrihaptotusttrvis 
\fl bl cwilsa*n~imiqaerialpy j~xavierastemti mi2z~z*ilys0a Figure 3 The crossover operation must have 
a tremendous impact on the effectiveness of a genetic algorithm. Consequently, it remains an area of 
intereat in any attempts to improve the performance of the algo rithm. While conservative in its approach, 
this method does preserve the essential nature of the gene. It conserves good information, possibly in­jects 
new (but valid) information, and minimizes mutation in the process. The desired level of mu­ tation in 
the population is managed, instead, by the mutation opertion.  3.4 Mutation Operation The mutation 
operation is provided to insure that new information is continually introduced into the population. Were 
this not the case, the pop­ulation would quickly follow a convenient genetic path to stagnation. This 
is referred to as early convergence [Whit89a]. It can be viewed as find­ing and focusing on a (probably) 
local maximum. Our mutation operation is built on the same premise ss the crossover operation: that legitimate 
words should be maintained and promoted. In this in­terest, a small percentage of the population in each 
generation is selected at random and given new (usual] y valid) information. The algorithm hsa been fitted 
with several differ­ent mutation operations over time. The simplest approach is to select a word at random 
from the lexicon and insert it into a word slot in the gene. This has the desired effect, but offers 
a high prob­ability that intersecting words will be invalidated. This ia a high price to pay for new 
information. In fact, if it does sufficient darnage, the resulting gene may be unable to compete in the 
population; thus eliminating any positive effects the mutation might have had. Instead, the present mutation 
is tw~fold. In 3 of every 4 cases the mutation operation se­lects a new word (if one exists) from the 
lexicon that does not invalidate any letters in the target word slot that are intersecting letters. This 
ap preach providea minimal new information. That is, it provides only new information of the sort that 
promotes the second of the two goals of the algorithm: bettering an already complete solu­tion. Of course, 
it is Iikely to be visited even in the case of not yet complete solutions; and thus does foster diversity 
in the population. In the other case; which is invoked one quarter of the time, the mutation that takes 
place is of the more direct varitey. A new word is selected at random from the lexicon and inserted into 
a ran­dom word slot in the gene. This imfuses consid­erable new information into the gene; in all prob­ability 
making it a less than complete solution. Insuring that such a mutation does not damage the gene beyond 
survivability is accomplished by careful parameter (value) tuning. S.S Data Structures In the conduct 
of any algorithm dealing with words and puzzles, the availability of proper data struc­tures is crucial. 
In the case of the genetic al­gorithm, these data structures are very relevant to the efficiency of the 
objective function, the crossover operation, and the mutation operation. These procedures need to pose 
certain questions; and good data structures are going to be those that answer these questions expeditiously. 
The necessary data structures come from two sources: the lexicon and certain puzzle specific informa­tion. 
Both of these sources are preprocessed to produce data structures specifically designed for certain queries. 
A data structure, for example, might be designed to respond to the question, How many words in the lexicon 
contain an a in the first position and a t in the fouth posi­tion? Other important questions that can 
be handled by preprocessing of the lexicon are, % the string tribes in the lexicon? and What is the g~words 
score for the string thomsa ? An example of a question that can be handled by data structures related 
to puzzle specific inform­tion is, Is there a word slot in the puzzle with intersections at positions 
2 and 4 containing an m and an r ? The lexicon, for example, is maintained as a set of word/value pairs. 
The value of a word is puzzle specific and is precomputed to save time in the ob­jective function. These 
pairs are accessed through a super structure based on alphabets and posi­tions, such that words with 
t in the fourth p­tion can be accessed directly. These same pairs can be accessed through a hash list 
constructed from the words themselves. The size of the hash table and the nature of the hash function 
insure that only a tiny fraction of the words in a typical 2500 word lexicon suffer collisions. With 
regard to puzzle specific information, it is important to be able to indentify the letters in gene that 
are relevent to a word slot and to quickly locate intersecting letters. This information is maintained 
in a series of croasreference tables. 4.0 Performance A genetic algorithm functions by maintaining a 
population of genes, representing potential solu­tions; and generating succeeding generations by careful 
selection and modification of genes in the present generation. Several parameters have potentially great 
impact on the effectiveness of the algorithm. These include such important val­ues as the size of the 
population, the number of generations, the amount of genetic material (bits) that are shared in the construction 
of new gener­ations, and the frequency with which mutation takes place. It is common to cast these as 
parameters because they are often adjusted frequently in an effort to fine tune the algorithm. In this 
interest, they are often passed as arguments to the program rather then hard-coded. Our experience confirms 
what other researchers have reported: that these values can have a devastating impact on the suc­cess 
of a genetic algorithm [Davi91]. In the course of this work a wide range of val­ues were tried for all 
of these essential values. We have reported above some of the places where par­ticular values had special 
impact, such as the rel­ative weight of word score and word value. Our most successful results were obtained 
with popu­lation sizes between 1000 and 1500 and 1500 to 2000 generations. The size of the population 
effects the ability of that population to support and maintain diver­sity. The principle effect of too 
small a population in this case is a tendancy to find a reasonable solution and allow it to dominate 
the population from then on. The benefits of population size, however, are not unlimited. There exists 
a point at which not much additional value (diversity) is gained by continuing to increase the number 
of genes in the population. Recalling that the process of identifying a pretty good solution in the case 
of a go-words puzzle can be viewed as a two step process, it is inter­esting that the conduct of these 
phases can be observed with the passage of generations. Experi­mental evidences shows that, using this 
algorithm and beginning with 70 to 75 percent partial solu­tions, complete solutions emerge within 50 
gen­erations. At about 50 generations the majority of the populations reflect complete (but usually mediocre) 
solutions. The process of slowly grow­ing those complete solutions into better solutions rquires the 
bulk of the 1500 to 2000 generations. This suggests that starting with complete solu­tions (unless they 
are very good solutions) would not contribute much to the success of this process. In our experiments 
we adopted the entire 2500 word lexicon provided for the puzzle. Determin­istic algorithms for problem 
of this type often re­strict the lexicon by selecting a subset of the most highly valued words. For the 
purposes of this al­gorithm, we did maintain the lexicon in descend­ing sorted order by word value, allowing 
highly valued words to be selected first. However, since size of the search space is not crucial here, 
as it is for a deterministic algorithm, we elected to use the whole lexicon. Running on a DECstation 
3100 (RISC architec­ture), the genetic algorithm in its present form produces an answer about every 5 
to 10 minutes. We do not offer detailed timing data, as it has been our gozd to tune the algorithm itself 
rather than to run it on an unencumbered machine to messure its speed. More often, the algorithm is run 
in the background for fairly long periods of time to produce a file containing the resulting so­lutions. 
 5.0 Results Our current version of this genetic algorithm fares reasonably well against the deterministic 
approaches with which we are familiar, but certainly no bet­ter. It must be pointed out that deterministic 
algorithms take an entirely different approach to the problem. A deterministic algorithm attempts to 
traverse all solutions; while the genetic alg~ rithm attempts to find one, probably pretty good solution. 
For comparison purposes, the best solution pro­duced by a deterministic algorithm, to date, is shown 
in Figure 4. That algorithm employs a number of heuristics to reduce the search space. It uses a reduced 
lexicon (the 200 highest val­ued words), it uses a variable level look-ahead [Berg89], and it prunes 
subtrees at run time that are guaranteed not to contain a solution with a score greater than a dynamically 
maintained max­imum. It has a score of 5648. titans . . ..diinns. ..r. .t. ..i.; .v. t. a.u. :a, renoqn, 
.a. %%:::::: igh:i o.s. saturn. n.~. s. 1..s..rotten. ... 1. .prauns. wrests. ... 1,.. .e. k.k .... Figure 
4 As reported above, it appears to be relatively easy for automated solutions (both deterministic and 
probabilistic) to achieve scores within about 85% of the highest human scores. Undoubtedly, this follows 
from the fact that there are a large num­ber of such scores. (Note that very low scores are just aa difficult 
to produce as very high scores.) In ita present state of refinement, the genetic al­gorithm produces 
solutions that score above 95% of the best known score on about one in ten at­tempts. Its average performance, 
over 100 runs, wss measured at 91.17% of the best known score; and its absolute best score on the target 
puzzle is 97.35% of the beat known score. That solution is reproduced below in Figure 5. scents. . . 
. trills. ..x. .c. .. b.. . ..t. p.t. .u. starts. .r. scraul. q.r. o.. .o. a.a. .p. u.s. trolls l.s, 
strine. t.. .l. m.. t.. .rutted . . . . s. .runner. urlght. &#38;:: B:uy+$#:li:r:: l.. t.r. .s. trevor. 
a.aetern. .y. r.t. . n.... ........ t.. t . . ..%nks...e. . etunts . . . . .dgmns Figure 5 6. Conclusions 
While the genetic algorithm performs well (nc­tably, not as well as the readers of Woman s Day), we believe 
that there is considerable progress still to be made in terms of our understanding and our encoding of 
this problem. The genetic algorithm, like ita deterministic siblings, is subject to consid­erable refinement. 
In particular, there is consid­erable problem specific information that can be taken advantage of to 
improve the attack. The genetic algorithm described here did not spring directly from concept to program. 
In fact, it went through numerous integrations (and down some blind alleys) while maturing to its present 
form. It had occurred to us earlier, for example, that some parts of a puzzle are more complex than others, 
and therefore might be somehow key to a good solution. An earlier version of the genetic algorithm was 
run in two steps: the first to solve a complex inner puzzle and the second to com­plete only the best 
solutions produced in phase one. That version produced solutions equivalent to those of the present program; 
but introduced considerable complexity that is apparently unnec­essary. Aside from the parameter values 
discussed above, the issues of encoding solutions as bit strings and effecting crossover without introducing 
extrane­ous mutation appear to be key issues. We are exploring other (some, very novel) ways of repre­senting 
puzzle solutions and various crossover op­erations suggested by those representations. We are particularly 
intrigued with the possibility of representing only the intersections of the puzzle and the letters that 
represent a particular solu­tion. Such an encoding holds the possibility of less overhead in gene manipulation 
and more ef­fective crossover operations. Crafting improvements in such algorithms pro­motes our understanding 
of underlying principles and relationships in the g~words puzzle, in the general problem of crossword 
puzzle construction, and ultimately in computational solutions for very complex problems. 7. References 
[Berg87] Berghel, H., Crossword Compi[i+ tion with Horn Clauses. The Com­puter Joumaf, Vol. 30, No. 2, 
(1987), 183-188. [Berg89] Berghel, H. and Yi, C., Crossword Compiler Compilation. The Com­puter Journal, 
Vol. 32, No. 3, (1989), 278-280. [Davi91] Davis L., editor, Handbook of Ge­netic Algot+thms. Van Nostrand 
Rein­hold, New York, NY, (1991). [Gare79] Garey M.R. and Johnson, D. S., Com­puters and fntractcbility. 
W.H. Free­man and Co,, New York, NY, (19T9). [Gold89] Goldberg, D,, Genetic Algorithms in Seach, Optimization, 
and Machine Learning. ing, MA, Addison-Wesley, (1989). Read­ [GrefB7] Grefenstette, J., Incorporating 
Prob­lem Specific Knowledge In Genetic Alogorithma. In Genetic Algorithms and Simulated Annealing, Morgan 
Kaufman (cd.), Palo Alto, CA, (1987), 42-60. [Harr90] Harris, G.H. and Forster, J .J .H., On the Bayesian 
Estimation and Com­putation of the Number of the Num­ber of Solutions to Crcesword Puz­ zles, Proceedings 
of the 1990 Sgm­posium on Applied Computing, Fayet­teville, AR, (March 1990), 220-222. [Harr92] Harris, 
G. H., Roach, D., Smith, P. D., and Berghel, H., Dynamic Cross­word Slot Table Implementation, Pro­ceedings 
of ihe 199.??Symposium on Applied Computing, Kansas City, MO, (March 1992), 95-98. [H01175] Holland, 
J., Adaptation in Natural and Artificial Systems. University of Michigan Preaa, Ann Arbor, MI, (1975). 
 [Maz176] [Smit81] [Whit89] [Whit89a] Maslack, L.J., Machine Selection of Elements In Crossword Puzzles: 
An Application of Computational Lin­guistics. SIAM Journal of Comput­ing, Vol. 5, No. 1, (March 1976), 
51-73. Smith, P.D. and Steen, S.Y., Pr~ totype Crossword Compiler. The Computer Journal, Vol. 24, No. 
2, (1981), 107-111. Whitley, D., Starkweather, T., and Fuquay, D., Scheduling Problems and Traveling 
Salesmen: The Ge­netic Edge Recombination Oper­tor. Proceedings of the Third Inter­national Conference 
on Genetic Al­ogon fhms, Palo Alto, CA, (March 1989), 133-140. Whitley, D., The GENITOR AIG gorithm and 
Selective Pressure: Why Rank-based Allocation of Reproduc­tive Trials is Beat. Proceedings of the Third 
In femational Conference on Genetic A logarithms, Washing­ton, DC, Morgan Kaufman, Pub­lishers.   
			