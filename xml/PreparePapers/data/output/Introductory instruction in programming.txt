
 INTRODUCTORY INSTRUCTION IN PROGRAMMING Richard W. Conway Department of Computer Science Cornell University 
 Cornell, like most other large schools, has been struggling with the problem of introductory programming 
instruction for years. The problem is not yet solved but in the last few years we have done some experimenting 
and seem to have made some progress. The situation seems worth re- porting so that others can perhaps 
bene- fit from what has been successful and a- void what has not. The major problems seem to be volume 
and v~. Pedagogical techniques-'~--~at are obvlously effective with small classes are sometimes impractical 
when faced with more than a thousand students per year. This may be largely a question of econom~ ics, 
since one could presumably allocate enough resources to the task to have small classes, but this is just 
not realistic at Cornell and the real question becomes one of finding practical large-scale techniques. 
For example, the central computing facility at Cornell (a 360/65 under OS/HASP) cannot support a sufficient 
number of interactive terminals to make that mode of instruction practical. Hence our solution must operate 
within the constraint of a conventional non-inter- active computer service. The problem of variety has 
recently become increasingly difficult. There has always been a wide distribution of apti- tude for the 
subject (probably not much different from the distribution faced by other subjects), but the disparity 
in background has been increasing quite rapidly. By now, almost half of thm entering science and engineering 
students at Cornell have had some previous ex- posure to stored-program computing. However, the subject 
is so new in second- ary schools that the treatment is at best uneven, and very often misleading. Rela- 
tively few students are sufficiently well- prepared that "advanced-placement" is a reasonable solution, 
but quite a few have just reached the difficult point where they know just a bit but think that they 
know a great deal. Consequently most of the entering students need a coherent introductory course, whether 
or not they will admit it, and there is more than the usual risk of pitching the introductory course 
at an unfortunate level where it initially bores those who have had pre- vious exposure and overwhelms 
those who have not. The following sections describe some experiments conducted during the last two years 
to an attempt to improve both the effectiveness and the efficiency of this introductory course. Common 
Core Material For some time Computer Science has offered three different introductory courses, all of 
large enrollment, each designed to introduce programming in PI/I without any prerequisite. The courses 
differed in emphasis, mathematical orien- tation and pace, but there was a sub- stantial core of common 
material. We addressed this overlap by inventing a new pseudo-course, called CSI00. This is essentially 
a two-credit hour introduc~ tion to PL/I, but it operates as if it were a full three-credit course --but 
only for the first two-thirds of the semester. CSI00 does not exist as far as the official records of 
the university are concerned and no students register in CSI00 directly. Instead, each of the introductory 
courses requires that its students participate in CSI00 for the first part of the term. Then each course 
uses the final third of the term to build upon this common base in its own special way. For example, 
one course devotes much of the final third to discussion of differ- ent types of computer use and the 
social implications of this use. Another course uses this time to introduce FORTRAN, con- trasting it 
to the PL/I core. An attempt is made in CSI00 to offer a sufficient variety of choice in each prob- 
lem assignment to accomodate students of different mathematical background and of different taste in 
problems. Each of the instructors of the "parent courses" is invited to contribute problems to be re- 
quired of his particular students. A grade for CSI00, consisting simply of a weighted sum of scores 
on four quizzes and seven computer problems, is reported to the instructor of the parent course who 
can incorporate it into his grading algorithm in any way he chooses. He may scale or weight it in any 
way he likes, so in effect, his students are not actually competing with those of other courses who are 
also participating in CSI00. This core unit is a very large course --more than 600 students each term, 
but since the parent courses are themselves already large this does not seem to be a significant disadvantage. 
When one increases enrollment from, say, thirty to one hundred the nature of a course changes substantially, 
but there is much less change in increasing from one to six hundred. However, the increased size does 
ensure that departmental atten- tion will be focused on this core course and it will be given the concern 
and re- sources that it merits. It is obviously too important (and too visible) to be the residual in 
the staff assignment algo- rithm. The availability of this core unit also means that each instructor 
of a parent course is relieved of the burden of providing the core material and can therefore concentrate 
on the other aspects of the course. By relying on CSI00 for the core material it is practical to of- 
fer additional introductory courses, specializing the additional material to serve the needs of other 
types of students. Such courses need not necessarily be with- in the Department-- Computer Science has 
invited other departments to use CSI00 to create introductory computing courses of their own, for their 
own students. Cornell is probably not unique in having seen the emergence of numerous introductory pro- 
gramming courses outside of Computer Science. Since there doesn't seem to be any practical way to limit 
the creation of such courses we thought we might try to cooperate and improve the quality of the technical 
content. No one has yet accepted the invitation, but it was only recently issued and we are still hopeful. 
 Content In the two years that this experiment has been under way we have been gradu- ally and deliberately 
reducing the size of the PL/I subset that is included in the course. We are seeking a greater facility 
in using a smaller subset of the language. In particular we are allocating an increasing fraction of 
our effort to teaching a systematic way of developing and testing programs. We believe that these techniques 
can be taught, and that they are inherently more imporant than expanding the breadth of knowledge of 
the syntax of a particular language. The subset indicated below is "re- quired" in CS100. S~udents are 
permitted to use other features of PL/I (limited to those in the PL/C subset) but are not particularly 
encouraged to do so. Data Types: fixed and float decimal, character. Arrays but not structures. Assi@nment: 
only simple form. No multiple leftsides, pseudo-variables, array or structure assignments. Declarations: 
explicit declaration of all variables required at beginning of each block. Attributes are FIXED, FLOAT, 
DECIMAL, INITIAL, STATIC, CHARACTER and VARYING. Control: Repetition: DO WHILE is preferred construction. 
DO v=e TO e BY e is permitted with single specification, no WHILE phrase. END must be given explicitly. 
 Conditional: IF..THEN.. [ELSE..] including compound conditions and DO groups as then/else units. Branch: 
GC TO only aS forward re- ference to escape from DO group, or to construct "case" statement. Procedures: 
only external subroutine procedures with communication via parameters. RETURN but not ENTRY statement. 
Explicit END followed by entry-name required. Input/Output: primarily LIST format, extended by limited 
subset of EDIT format. Conditions: CHECK and FLOW. We are strongly convinced of the merits of the structured 
approach to programming and the text used reflects this preference. We demand this style and a clear 
consistent program format. We feel that the subset described above is essentially the minimum that will 
per- mit and encourage this form of programm- ing. The Mechanics of Instruction From the outset we 
questioned whether the traditional lecture is a particularly effective or economical way of teachin~ 
programming. We began by producing the equivalent of lectures on tape casettes with accompanying 35mm 
slides. This had some obvious advantages. Although preparation involved a great amount of work, once 
done they could be reused, etc. Moreover, producing tapes somewhow demands more careful preparation than 
an old-fashioned one-time lecture, so pre- sumably these tapes contained better- than-average lectures. 
They also offered great flexibility --the student could use them as often, as slowly and whenever he 
wanted. Nevertheless, the effort was essentially a failure. In effect, the students regarded the tapes 
not as a mechanized lecture, but as a talking textbook. Regarded in this light, the tape/slide system 
is not particularly attractive. It is neither private not portable --hence the student does not have 
access to the information when it is really needed, and cannot make notes in the margin, underscore, 
etc. It is also slow and difficult to search for a particular item, or to review a topic. We hit upon 
the revolutionary scheme or writing things down on paper and providing each student with his own personal 
copy. We decided that what was wrong with previous attempts to put the course on paper was that only 
the easiest portion of the material --the syntactic details of some language --was trans- cribed, and 
the more difficult and im- portant topics of how one used these constructs was left to the lecturer. 
We attempted to produce a set of notes that covered all aspects of programming --program development, 
style, testing, in addition to details of syntax --that would make lectures unnecessary. (These notes 
have just been published -- "Introduction to programming" by Conway and Gries, Winthrop Publishing Company.) 
We are quite pleased with the result, although it is clear that the effort expended to produce the notes 
has rendered us incapable of objective evalu- ation. We might note that during the current term lecture 
attendance is a bit lower than usual, and the student pro ~ grams seem at least no worse than usual, 
but this is susceptible to other inter- pretations. We have not yet abolished lectures althgether, but 
have clearly relegated them to a secondary role. Two lectures are offered each week. These con- stitute, 
in effect, two different lecture series, each meeting once a week. One series is geared to the student 
who is encountering programming for the first time. It is run essent- ially as a large recitation with 
 examples and elaboration of explanations given in the text. The lecture does not present any topic that 
is not covered in the text. It offers only an alternate view and an opportunity to ask questions. In 
particular the lecture does not cataloa syntactic detail. A student who reads carefully probably does 
not need the lecture, but one who only listens care- fully cannot survive without reading. The second 
set of lectures are keyed to the students with previous experience. There are three principal topics. 
The first is the issue of choice of language. The audience is initially hostile, being fond of FORTRAN, 
BASIC, APL or whatever it was they first learned. Our purpose is to convince them that PL/I is more of 
an extension than a renunciation of their favorite language, and that anyway they are going to have 
to be multi-lingual to be an effective programmer. The second topic is to convince them of the necessity 
of developing a consistent and clear style of programming. The third is to provide brief glimpses of 
some advanced topics in computer science --the nature of translators and operating systems, issues in 
numerical analysis, study of algorithms, uncomputable functions, etc. In addition to the lectures, conven- 
tional recitation meetings are offered by graduate teaching assistants every afternoon. The students 
are not scheduled to attend a particular recita- tion and are encouraged to attend when- ever and as 
often as necessary. These recitations have not been very successful and we are still looking for some 
flexible way of attracting the students who need help to these meetings. The problem is partly that 
we have made it relatively easy for the student to obtain individual help. The primary staff contact 
is a more or less con- tinuously available consulting service provided by graduate teaching assistants 
and undergraduate assistants. We currently use 25 such consultants (for 600 students) and provide approximately 
15 minutes of staff time per week for each student enrolled in the course. The recitations are intended 
to relieve some of the burden on these consultants by addressing some of the more common questions in 
groups rather than repeat- ing it individually, but it is difficult to get a student to anticipate a 
problem and attend a recitation before the prob- lem arises in one of the programs, nor is he happy to 
be put off by a consultant with the promise that that problem will be discussed tomorrow afternoon in 
recita- tion. We are attempting to mechanize some of the more common of these consulting sessions by 
putting them on tape. (We have a substantial investment in tape recordersand slide projectors that ought 
to be used somehow.) We now view the tape/slide units as essentially remedial material. When the inevitable 
student shows up after four weeks and obviously does not understand how to trace a simple program we 
sit him down with an infinitely patient tape/slide unit rather than take a half hour of a consultant's 
time. We think this sounds very sensible, and it is just barely possible that it may work occasionally. 
It is too soon tO draw any conclusion. In the old days, when students were assigned to a particular 
~c~ta£ion or laboratory they were al~o assigned to a particular teaching assistant who had a morevor~less 
personal interest in their progress. ~en we first freed the student fro~ assignment to a particular~recitation 
we ~s~ ~-glect~@ to assi~ him to a par- tlcU~0F assistant, .~nd ~hat just didn't work. We have gone back 
to assigning the student to a particular assistant. While the student has no obligation to attend recitation 
given by his own assistant or to seek out his own assistant for consult- ing help, the assistant is obligated 
to monitor the progress of a certain group of students and get in touch with those who are falling behind. 
 Examinations CSI00 has four main units of work -- i) basic syntax, 2) program structure, 3) program 
development, and 4) testing -- and an open-book quiz is given on each of these topics. The quizzes, given 
in the evening, are designed to be one-half hour long but up to two hours is allowed so there is little 
if any time pressure in their execution. Initially we responded to the students' desire to self-pace 
the oucrse by per- mitting these quizzes to be taken any time the student was ready. In retrospect we 
should have known that for every stu- dent who took advantage of this flexibi- lity to accelerate his 
progress there would be several who would procrastinate them- selves into irretrievable trouble. We next 
tried to bound the procrastination by placing deadlines on taking each quiz, and provided an incentive 
to take them early by allowing a student to repeat each quiz as often as he like and retain the best 
grade achieved. This had worked reasonably well and the quizzes have be- come as much a teaching tool 
as a measure- ment process. However, some students have repeated particular quizzes long past the point 
of diminishing returns, to the detriment of their other courses, and the consequent quiz grading burden 
in CSI00 has become excessive. We now offer each quiz four times over a two week period; allow a student 
to take each quiz twice; and record the maximum of the two grades received. Samples quizzes (and answers) 
are available in advance so the students knows pretty well what to expect. Computer Exercises Seven 
computer programs are required of each student. The first is a trivial dozen-statment program with a 
very early deadline, it is just intended to over- come the psychological barrier of first contact with 
the machine. The second problem requires a program with nested DO loops and subscripted variables. For 
the third problem the student is given a copy of a completed, working program and asked to rewrite it 
to improve the style and format. For the fourth he is given a completed but not quite correct program 
and asked to add diagnostic facilities and identify the residual errors. The fifth program is written 
by the student and requires use of procedure parameters and character string variables. The last two 
problems are done by students working in pairs. For the sixth they design a program, and produce an 
"outline" in comments, declarations, and calls of dummy procedures. For the seventh problem they complete 
the program outlined in the sixth. These exercises force the student to read other peoples' programs, 
to consider matters of style and format independent of the task of designing a new program, to give serious 
consideration to planning a diagnostic attack, and to design and document a program before writing it. 
Incidently, he will also get the usual practice on syntactic matters. To combat the endemic problem of 
copying, several of the problem specifications are para- metric, with precise requirements varying according 
to certain letters of the stu- dent's name. This obviously does not eli- mlnate copying, but it makes 
it a little more difficult, and the determined plagiarist has to learn a little about programming in 
order to copy successfully. Computer Services Computer processing for CSI00 is pro- vided by a fast 
turnaround, self-service system using the PL/C compiler. Students punch their own programs and load their 
decks in an "open reader". Jobs in this special class are processed in the exact order loaded, so they 
come off the printer in the same order and the student moves directly from the reader to the adjacent 
printer to retrieve his printed output. The delay is rarely more than a minute. Jobs under this system 
are limited to 3 seconds of cpu time and 600 lines of output, but there iS no limit to the num- ber of 
Jobs that a student can submit. (The number of such jobs has run as high as 4000 per day.) With unlimited 
submissions and rela- tively fast turnaround the s~dents tend to test their programs almost ~s they would 
at a terminal. They tend to use repeated machine runs rather than exten- sive manual checking, and staff 
opinion is a bit divided as to whether or not this is a good thing. One salutary effect of the stringent 
time and line limits on this type of service is that it forces the students to learn to parti- tion a 
program and test it in independent sections. This service capitalizes on the diag- nostic facilities 
built into the PL/C compiler. We find the combination quite satisfactory for the purpose and do not feel 
that the effectiveness of the course is seriously limited by the lack of an interactive terminal system. 
 The elimination of nornal job account- ing for this class of service is a recent change. The number 
of student jobs pro- cessed approximately doubled when this service was instituted. Everyone con- cerned 
--staff, students and computing center --is delighted to be liberated from the mechanics of normal job 
account- ing. Evaluation It will come as no surprise to the reader to learn that we think we are mak- 
ing some progress. But there are many ways of judging progress. Perhaps most important, we seem to be 
doing a better job of interesting the students and whetting their appetites. (We seem to be winning 
many of these ar- guments with high school FORTRAN experts.) An increasing fraction (presently about 
one-third) go on to elect another course in computer science, and there is some evidence in the second 
course that the students emerging from CS100 write slightly better programs than did their predecessors. 
On the other hand we have no way of know- ing whether the remaining students who do not elect further 
computing are better or worse programmers. The course is reasonably efficient from the Department's 
point-of-view. One professor each term (with a large number of student assistants) handles the entire 
course. Moreover, the content is now consistent over all of the introductory courses so that advanced 
courses know quite precisely what they can assume as background. A more detailed course description 
in- cluding syllabus, sample quizzes, problem specifications and administrative in- structions is available 
on request from t~e Department. November i, 1973 I0 
			