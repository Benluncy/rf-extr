
 Organizational Issues in Teaching Project-Oriented Software Engineering Courses MODERATOR Renee A. McCauley 
Department of Computer Science, Winthrop University Rock Hill, SC 29733 (mccauley@lurch. winthrop.edu) 
PANELISTS Evans J. Adams Department of Computer Science, Fort Lewis College Durango, CO 81301 (adams_e@flc.colorado. 
edu) Donald J. Gotterbarn Department of Computer Johnson City, TN 37614 and Information Sciences, East 
Tennessee State University (gotterba@etsu. east-tenn-st.edu) /1 Linda M. Northrop Software Engineering 
Institute, Carnegie Pittsburgh, PA 15213 (lmn@sei.cmu.edu) Mellon University Hossein Saiedian Department 
of Computer Science, University of Nebraska Omaha, NE 68182 (hossein@unocss. unomaha.edu) Stuart Zweben 
Department of Computer and Information Science, Ohio Columbus, OH 43210 (zweben@cis.ohio-state. edu) 
State University ABSTMCT Most software engineering textbooks advocate hands-on software development experience 
an integral part of any effective software engineering course. Research has shown that a majority of 
the undergraduate software engineering courses being taught include a project component. However, most 
introducto~ software engineering texts offer little information how to manage student projects. Specifically, 
they do not indicate the existence of various organizational alternatives for such project-intensive 
courses, and, thus, they do not offer comparative analyses of corresponding benefits and costs. as on 
392 There are many approaches to organizing a project-intensive course. These approaches may be categorized 
along the following dimensions: number of projects, number of teams, and team work assignments. For example, 
typical project-intensive course organizations may include: single project, single team,  single proj 
ectj multiple teams, each team working on a different system component,  single project, multiple teams, 
each team working on a different phase of the life cycle,  single project, multiple teams, each team 
working independently on all deliverables, multiple projects, muitiple teams, each team working on independent 
projects, and s multiple projects, multiple teams, each team working independently on all projects. 
 For each possible project-oriented course organization, the teacher is faced with the following issues: 
 project selection,  project planning through identification of milestones and project deliverables, 
 project team selection and organization,  project management,  project evaluation, and s project 
team member evaluation and grade assignment.  The panelists are active teachers and researchers in 
the area of project-oriented approaches to software engineering education. They will identi&#38;, analyze, 
and evaluate the advantages and disadvantages of the different types of project-intensive courses. They 
will also relate their professional experiences and observations in organizing and teaching such courses. 
Additionally, they may address the issue of integrating software engineering concepts into other project-intensive 
undergraduate computer science courses. 393
			