
 A MULTILEVEL SIMULATOR AT THE REGISTER TRANSFER LEVEL FOR USE IN AN INTRODUCTORY MACHINE ORGANIZATION 
CLASS by Dale Skrien Colby College, Waterville, ME 04901 USA djskrien@colby.edu and John Hosack University 
of the South Pacific, Suva, Fiii Islands hosackj@usp. ac.nz - Abstrac! This paper discusses a multilevel 
simulator and its use in the classroom. A new simulator is presented that allows the user to dynamically 
change the simulated hardware at run time. We also discuss an incremental series of projects that we 
have successfully used with the simulator. These projects give the student hands-on experience with the 
advantages and disadvantages of several architectures. Introduction We have used the hardware simulator 
STARTLE [1] for the past 8 years in the freshmen/sophomore-level machine organization class. Several 
interesting programming projects have been developed that use STARTLE. Because of the ready availability 
of high-quality graphics displays on relatively low-cost micro-computers, such as Apple s Macintosh, 
a new simulator, based on the ideas in STARTLE, has been created that utilizes the graphical interface 
of the Macintosh to allow the students to spend more time understanding what the simulator is doing rather 
than understanding how to run the simulator. Objective In our machine organization and assembly language 
course, we want the students to learn about different architectures and the advantages and Permission 
to copy without fee all or part of this material is granted provided that tha copies are not made or 
distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its data appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. e 1991 ACM 
0-89791-377-9/91 /0002-0347 . ..$1 .50 disadvantages of each. We do not wish to restrict ourselves to 
a particular machine, since that would narrow the student s experience and perceptions of machine architecture. 
In addition, the usage of a real machine would require the students to spend a lot of time learning peripheral 
details (of a machine they will probably never program at the machine level). For similar reasons, we 
also want to stress machine organization rather than assembly language programming, which is essentially 
symbolic machine language. Meeting our obiectiv~ Because we can not afford to provide a lab full of 
hardware containing the different architectures, especially due to the time the students would have to 
spend! learning how to run each machine, several years ago we searched for simulators. We encountered 
many of the same problems as Tangorra [2] with existing simulators. We were not happy with simulators 
that only simulated simplle accumulator-based machines with a small fixed set of machine instructions 
and few addressing modes. We adopted STARTLE because of the way it allowed the users to design the architecture 
they wanted to simulate at the register transfer level, including the registers, flipflops, i/o channels, 
and stores, as well as all the micro-instructions and machine instructions. Using STARTLE, we could require 
the students to develop an architecture themselves and then create and run machine-language programs 
on it. To accomplish this, we developed a series of lab exercises to gradually introduce the students 
to more and more program that reads in an arbitrarily long complex machines. list of positive integers, 
followed by a negative integer sentinel, and then prints Laboratory uroiects out the positive integers 
in reverse order. The series of projects we have used The fact that this can t be done on the should 
give an idea of how such a Wombatl without writing self-modifying simulator might be used in any classroom. 
code helps the students to quickly In the first project, the students are understand the need for either 
indirect given a machine description and a sample addressing or the use of a stack. machine language 
program for a simple The second project asks the students one-accumulator machine, called the to upgrade 
the Wombatl to the Wombat2, Wombat 1, with only direct addressing and which contains a hardware stack 
and the no stack operations. We felt it was very operations of push and pop, which must be important 
that the students be given the defined using micro-instructions. This first machine so as to avoid the 
difficulty project requires the students to begin to of creating a machine completely from familiarize 
themselves with the multilevel scratch. In line with our gradual, concepts, working at the register-transfer 
incremental approach, the students are level. They are then asked to redo the initially asked to modify 
the sample previous program on reversing a list using program for the Wombat 1. After the enhanced machine. 
familiarizing themselves with the The third project requires the Wombat 1, they are asked to write a 
students to add call and return machine 6 File Edit Modifu Run DisDlau Wombat 1 Nf3Ht machine instruction: 
Time so fac input NeHt JI-instruction: pc->mar -0 r ir 0000000000000000 Input by: User top 111111111111 
Output to: User Flipflops: Steck O: 001 I 000000000000 ;read n -> acc o: 0000000000000000 1: 0101 000000001010 
;add 999 to n 1: 0000000000000000 2: 1010 000000000111 ;jrnp.z to line ...= 2: 0000000000000000 3: 0110 
000000001010 ;acc:= acc -!.. .3$ 3: 0000000000000000 t: 0101 000000001011 ;add it to the.. w4: 0000000000000000 
 ,W 5: 0010 000000001011 ;store new sum..ljij 5: 0000000000000000 6: 1001 000000000000 ; j mp O to reac... 
H 6: 0000000000000000 7: 0001 000000001011 ; Iood the sum ~ 7: 0000000000000000 8: 0100 000000000000 
;wite the sum I&#38; 8: 0000000000000000 9: 0000 000000000000 ; stop, 9: 0000000000000000 Figure 1. instructions, 
creating the Wombat3, so that assembled into machine language, and subprograms can be written and run. 
then run these programs on the Wombat3 They are then asked to write using STARTLE. programs using subprograms, 
including As students proceed through the recursive subprograms. project phases they also write a simple 
Finally, the fourth project asks the interpreter in Pascal for each Wombat. students to create a much 
more realistic This interpreter reads the machine machine, the Wombat4, with direct, language file and 
stores the instructions in indirect, immediate, and stack addressing an array simulating memory. Then 
the modes. Programming assignments for this basic machine cycle is followed: fetch machine include the 
writing of instruction, increment program counter, subprograms that pass parameters by decode instruction, 
and execute reference rather than just by value. instruction. STARTLE only accepts programs The students 
gain a great deal from written in machine language, and so does writing an interpreter. They improve 
not allow for assembly language their programming ability, especially in programming. However, the second 
constructing well-documented and author has written an assembler for the organized programs easily upgraded 
from Wombat3 machine, and so the students are one Wombat version to the next, and their given the opportunity 
to write some simple implementation of the machine cycle assembly language programs, have them provides 
reinforcement of the concepts. 6 File Edit ~ Run DisDlau O decimal by fields EDIT THE STORECONTENTS Display 
in: O decimal as one number m Edit line: @ binary by fields - 0 ~ ~ 1 Notes ... 1: 0101 000000001010 
; add 999 to n 2: 3: 1010 0110 000000000111 000000001010 ; ; jrnpz ace:= to line acc - 7, 999 else ;::2.:::::;::::fi: 
@ZKl 4: 0101 000000001011 ; add i.t to the sum 30 far. 5: 0010 000000001011 ; store new sum to location 
11 M­ 6: 1001 000000000000 ; jmp O to read more numbers. 7: 0001 000000001011  load the sum from location 
11 IJm 8: 0100 000000000000 ; write the sum ~:;++ 9: 0000 000000000000 ; 3top. 10: 0000 001111100111 
; data : 999 (sentinel) ~m 11: 0000 000000000000 ; data : 0 (initial sum) 12: 0000 000000000000 l!lm 
13: 0000 000000000000 ; his program repeatedly add3 input. 14: 15: 0000 0000 000000000000 000000000000 
; until the number -999 is read. Mm@w,:; 16: 0000 000000000000 17: 0000 000000000000 II - 18: 0000 000000000000 
19: 20: 0000 0000 000000000000 000000000000 Ijlj;>::i}:;;ii; (mEEEl 21: 0000 000000000000 22: 0000 000000000000 
B GEE) 23: 0000 000000000000 10 EiEcl Figure 2. The new simulator and the time the simulated machine 
has These exercises have worked very successfully for us. The students have felt they learned a lot through 
the use of the simulator. However, STARTLE was written in Pascal with purely textual i/o. This has meant 
that too much time has to be spent teaching the students how to run the simulator; in particular, they 
had to be instructed in the proper format of the input and output for the simulator, which included many 
values whose meaning was not immediately clear. There seemed to be some frustration with this that detracted 
from the purpose of the course. However, with the purchase of a lab of Macintosh IIcx s, Colby obtained 
the hardware to do much more in the way of providing the students with a user-friendly environment. For 
this reason, a project was started to create a new simulator, based on the ideas in STARTLE, that fully 
utilized the Macintosh interface to allow the students to concentrate on the simulation rather than the 
simulator. The result, called CPU SIM, has a main display (see Figure 1) showing the registers, flipflops, 
channels, the main store and stack of the simulated machine, and their contents (in decimal or binary 
form). It also displays the current machine instruction, micro-instruction, used up to this point. After 
a hypothetical machine has been created or loaded by the user (including the hardware description, micro-instructions, 
and machine­instructions), and after initial values have been loaded (see Figure 2 to see how the contents 
of main memory are loaded and edited), the simulator can start running the program loaded in main memory. 
It starts executing the instruction at the address specified in the program-counter register. The simulator 
can run the program until it halts and then display the final values in all memory devices, or several 
break points can be set, halting the machine at these points for inspection. The user can also step through 
the program, one machine instruction or one micro-instruction at a time. Finally, the user can backup 
one machine instruction at a time. This flexibility allows the user to easily find any point at which 
the program did not perform as expected. At any time during the execution or before, the user can modify 
the contents of any of the components. Furthermore, the user can modify the actual simulated hardware, 
such as changing the widths of registers or adding new machine or micro­instruction. The hypothetical 
machine Machine Edit machine instruction: Name: ~ , (m) Op code: ~] @ inary() Decimal Its u-instruction 
list: write-store IIEnd. @I@ ~-instructions: Type: ~ mbr->ir mbr->acc II II Iacc->outcwt I I Figure 3. 
350 descriptions created for the simulator can be saved as text files for reloading and execution or 
modification at a later time. Similarly, the machine language programs to be run on the hypothetical 
machines and the input data can be saved in separate text files. The output can be directed to a window 
on the screen or saved as a text file. The user can create or modify a simulated machine very easily. 
By selecting appropriate menu items, windows will appear allowing the user to modify or create new hardware 
components, or change or create new machine or micro­instruction. As an example, Figure 3 shows the window 
in which machine instructions are edited. CPU SIM was designed so that the user would have to do as little 
typing as possible, thus avoiding most of the usual typing and syntax errors. Requirements CPU SIM was 
designed using Allegro Common LISP, and runs on any Macintosh with 2.5 megabytes of RAM and a 13-inch 
(or larger) monitor. The RAM is necessary because of the overhead needed to support a LISP program: the 
compiled code for CPU SIM is a little over 1 megabyte. A large monitor is needed since several of the 
CPU SIM windows are too large for the standard 9-inch Macintosh screen. Plans are under way to revise 
CPU SIM so that it will use less memory and a smaller monitor. The text files in which the hypothetical 
machine descriptions are saved consist of actual LISP code utilizing Allegro s Object LISP extensions 
to the language. Therefore, these files could be modified by the user with any word processor, but could 
easily result in an unreadable file if the result is not proper LISP code. In any case, it is much easier 
for the user to modify the machine description using CPU SIM, so this should rarely be necessary. The 
machine language program and data files just consist of integers and comments and so allow easy modification 
by the user at any time with any text editor. The standard version of STARTLE is written in Pascal and 
has been ported to UNIX and to MS-DOS (using Turbo Pascal). Limitations CPU SIM does not display the 
contents of its components in HEX or octal because it seemed sufficient to have it display both decimal 
(to help the students create their input and output) and in binary so that the actual bits can be seen. 
The only representation mode allowed is two s complement. The only input and output data the simulator 
will accept is integers in base 10. The standard version of STARTLE reads and displays all data in decimal 
integers, but it does allow the choice of two s complement, one s complement, or signed magnitude for 
internal representation of data. Conclusion A very versatile multilevel simulator is valuable for use 
in the classroom. It allows the students to use and create many different hardware configurations for 
comparison. It also allows the students the opportunity to experiment on their own in creating or improving 
existing simulated machines. We have found it to be an essential component of our course since it gives 
students hands-on experience with a multilevel approach to machine organization. References [1] J.M. 
Kerridge and N. Willis, A Simulator for Teaching Computer Architecture, ACM SIGCSE Bulletin, Vol. 12, 
No. 2, July 1980, pp. 65-71. [2] F. Tangorra, The Role of the Computer Architecture Simulator in the 
Laboratory , ACM SIGCSE Bulletin, Vol. 22, No. 2, June 1990, pp. 5-10.
			