
 Finding motifs in the twilight zone Uri Keith Department of Computer Science and Engineering University 
of California San Diego La Jolla, CA 92093, USA  keich @cs.ucsd.edu ABSTRACT We introduce the notion 
of a multiprofile and use it for find­ing subtle motifs in DNA sequences. Multiprofiles generalize the 
notion of a profile and allow one to detect subtle consen­sus sequences that escape detection by the 
standard profiles. Our MULTIPROFILER algorithm outperforms other lead­ing motif finding algorithms in 
a number of synthetic mod­els. Moreover, it can be shown that in some previously stud­ied motif models, 
MULTIPROFILER is capable of pushing the performance envelope to its theoretical limits. 1. INTRODUCTION 
In its simplest form, the motif finding problem can be for­mulated as follows: given a sample of sequences 
and an un­known pattern (motif) that is implanted at different un­known positions, can we find the unknown 
pattern? If an l-letter pattern is implanted without mutations in each se­quence, one can find the motif 
by a straightforward enu­meration of all l-letter substrings that appear in the sam­ple. However, biological 
motifs are subject to mutations and usually do not appear exactly. A natural model is to allow the unknown 
pattern to be implanted with some mutations (e.g. mismatches) in the sample sequences. An (1, Ic)-motif 
(or pattern) is a pattern of length 1 that is implanted in sequences from the sample with at most k mutations 
(the implants are called instances). Motif finding resulted in a number of excellent software tools based 
on greedy algorithms (CONSENSUS), Gibbs sam­pling (GibbsDNA), EM algorithms (MEME), and other ap­proaches. 
Pevzner and Sze, 2000 [14] asked: What are the limits of these motif finding algorithms? . They demon­strated 
that CONSENSUS, GibbsDNA, and MEME are un­able, for the lack of a good starting point, to detect rather 
strong motifs, for example a (15,4)*-motif in the Motif Chal­lenge Problem (instances of a motif of length 
15 with 4 mu­tations are implanted once in each sequence in a sample of twenty 600 bp sequences). These 
studies led to an algo- Permission to make digital or hard copies of all or part of this work for personal 
or classroom use is granted without fee provided that copies are not made or distributed for profit or 
commercial advantage and that copies bear this notice and the full citation on the first page. To copy 
otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission 
and/or a fee. RECOMB 02, April 18-21, 2002 Washington, D.C., USA Copyright 2002 ACM ISSN l-58113-498-3-02/04 
. ..$5.00 Pave1 A. Pevzner Department of Computer Science and Engineering University of California San 
Diego La Jolla, CA 92093, USA ppevzner@cs.ucsd.edu rithm (WINNOWER) that solves the Motif Challenge 
Prob­lem. Recently, Buhler and Tompa, 2001 [5] were able to find more subtle motifs that the Pevzner-Sze 
algorithm failed to detect. They accomplished this through a novel approach to providing an EM algorithm 
with a good starting point. Probably the best tools for finding consensus based motifs are the pattern-driven 
algorithms (Brazma et al., 1998 [3]) that test all 4l l-letter patterns, score each pattern by the number 
of approximate occurrences in the sample (or by a more involved function) and find the high-scoring patterns 
(Staden, 1989 [18]; Pesole et al., 1992 [13]; Wolfertstetter et al., 1996 [25]; van Helden et al., 1998 
[23]; Tompa, 1999 [22]). However, an exhaustive search through all 4l l-letter pat­terns becomes impractical 
for large 1 and Tompa, 1999 [22] raised the problem of extending this approach for longer pat­terns. 
One way around this problem is to use the sample­ driven approach that limits the search to the patterns 
ap­pearing in the sequences from the sample (Bailey and Elkan, 1995 [l], Fraenkel et al., 1995 [6], Rigoutsos 
and Floratos, 1998 [15], Li et al., 1999 [la]; Gelfand et al., 2000 [8], Pevzner and Sze, 2000 [14]). 
If, by chance, the pattern has an exact occurrence in the sample, this approach is as good as the pattern-driven 
approach. If not (which is usually the case for biological samples), the hope is that the implanted in­stances 
of the pattern appearing in the sample will reveal the pattern itself via local improvements. However, 
in the case of subtle signals, this approach needs to be taken with caution. The problem is that it is 
difficult to distinguish the instances of the pattern from many random substrings that are similar to 
the pattern just by chance. Pevzner and Sze, 2000 [14] addressed this problem by developing the WIN-NOWER 
and SP-STAR algorithms and further testing them with a variety of samples generated in bacterial comparative 
genomics studies (Sze et al., 2001 [al]). Although these al­gorithms worked for the challenge problem 
 that CONSEN-SUS (Hertz and Stormo, 1999 [9]) , GibbsDNA (Lawrence et al., 1993 [ll]) and MEME (Bailey 
and Elkan, 1995 [l]) failed to find they did not work in the twilight zone of (15,4)*-motifs implanted 
in 1600 bp sequences. Below we describe a new approach that finds very subtle patterns in the twilight 
zone and works very fast in practice. In particu­lar, according to Pevzner and Sze, 2000 [14], CONSENSUS, 
GibbsDNA and MEME have all failed to find a (15,4)*-motif implanted in N = 600-letter sequences, SP-STAR 
failed at N = 1000, and WINNOWER became very time-consuming and unusable for N > 1300. While definitely 
improving on these algorithms, Buhler and Tompa [4] report they succeed in 16 out of 20 times in detecting 
the same (15,4)*-motif in twenty 2000 nucleotide sequences. They mention that they cannot attribute the 
failures to spurious, or strong random, motifs. Using their scoring method we are able to success­fully 
detect the same motifs in more than 99% of the time (in about lhr and 15min on a 500 MHz G4). Moreover, 
we can detect more than 98% of such motifs implanted in twenty 3000-long sequences. Note that when looking 
for subtle mo­tifs one is generally very likely to encounter random motifs whose score is at least as 
good as that of the sought motif (indeed that is the essence of our definition of a subtle mo­tif given 
in Section 6). This raises the issue of how do we determine whether or not an implanted motif is detected 
by an algorithm (Section 6). Since the pattern-driven approach is too time-consuming and the sample-driven 
approach often misses subtle pat­terns, a natural idea is to design a hybrid approach that ex­tends the 
search capabilities of the sample-driven approach still avoiding the computational complexity of the 
pattern­ driven approach. Two patterns are called k-neighbors if they differ by at most I; substitutions. 
In an extended sample­ driven (ESD) approach we look for (1, Ic)-motifs by generat­ing all k-neighbors 
for every substring of length 1 in the sam­ple (Waterman et al., 1984 [24] and Galas et al., 1985 [7]), 
and also Sagot et al., 1995 [17], and Sagot, 1998 [IS]). The number of patterns explored in this approach 
is roughly nN(:)3 versus 4 in the pattern-driven approach, where n is the number of sequences of length 
N in the sample. Although the ESD approach is faster than the pattern-driven approach for typical 1 and 
k, it is still slow in practice. Our new motif-finding algorithm is a fast emulation of the ESD approach. 
It is based on the observation that very few of the neighbors generated in the ESD approach may steer 
us to the pattern P while others are not likely to help in finding the real pattern. The question is: 
Can we still capture the pattern by generating very few neighbors instead of ($3k neighbors for every 
substring in the sample? . Our new MULTIPROFILER algorithm achieves this goal both in the context of 
very subtle signals implanted in synthetic data as well as in looking for regulatory patterns, including 
ones which include spacers, in biological samples. We end the introduction by addressing a couple of 
issues that might raise some concerns among the experienced read­ers. The first is the issue of profiles 
or weight matrices vs. consensus based patterns ([19]). Although MULTIPRO- FILER adopts a combinatorial 
consensus approach to motif finding, it is also able to present its results in the form of profiles (similarly 
to MEME and others). The top scoring patterns can also be used as seeds for stochastic optimization algorithms. 
Moreover, since a typical profile of length 1 cor­responds to a pattern of length 1 formed by the most 
frequent nucleotides in every position of the profile, a search with this consensus pattern would typically 
return the correct motif leading to a successful reconstruction of the original profile. Thus, for a 
typical profile, the pattern-driven approaches might be at least as good as the profile-based approaches 
for many biological samples. In fact, Sze et al., 2001 [21], recently benchmarked different motif finding 
algorithms and demonstrated that pattern-based approaches may perform better than profile-based methods 
for some difficult biologi­cal samples. Similarly, Pevzner and Sze, 2000 [14] and Buh­ ler and Tompa, 
2001 [5] demonstrated that pattern-driven approaches perform better than the profile-based methods on 
simulated samples with implanted motifs. In summary, there is currently no evidence that the profile-based 
methods perform better than the pattern-based methods on either bi­ological or simulated samples. The 
second concern that the reader might have is that MUL- TIPROFILER was designed with synthetic motif models, 
such as the (l,k)-motif, in mind. The (.J,Ic)-motifs and the (l,p)-motifs (where the positions of each 
instance are in­dependently misspelled with probability p < 1) are both special cases of what we call 
diffused motifs . These can be characterized by the fact that the misspelled positions in each instance 
are chosen independently of the other in­stances. As an anonymous observant referee points out this feature 
is a significant departure from the norm for published biological motifs, in which mutations occur preferentially 
on a small subset of positions. However, the assumption of in­dependence makes the motif-finding problem 
harder rather than easier, so it should not be considered a flaw in the algorithm . 2. NEW IDEA In this 
section we introduce the two new ideas behind MUL- TIPROFILER. The first one is the utilization of a 
neighbor­hood of each word in the text as a possible dictionary that suggests the correct spelling of 
that word. The second is the usage of multi-positional profiles. Our goal is to find the pattern P which 
is the consensus back-bone of the (diffused) motif. Let I(P) = {PI,. , Pn} be the set of instances of 
the motif. In a synthetic model the instances are implanted in the randomly generated sam­ple according 
to some rule. For example, the motif can be an (1, Ic) one, meaning that in each instance exactly k out 
of P s 1 positions are mutated. These instances can be im­planted either in one long sequence S, or, 
as in Pevzner and Sze s FM model [14], exactly one instance in each of the n sequences S = {Si . . . 
, a}. Alternatively, the motif can be an (1, p)-motif (p < l), where the positions of each instance of 
P are mutated, independently of all other positions, at a constant rate p. Unless otherwise stated we 
are, of course, oblivious to both P and I(P). Generally speaking, if the motif is very subtle recovering 
the exact set of instances, I(P) is a hopeless task due to good random matches of P. Note that this is 
a different issue than recovering P though (POI). Assume for a moment that the set of instances, I(P), 
is disclosed to us. Finding P in this case, reduces to the triv­ial task of aligning PI,. . . , P, and 
deducing the consensus sequence from the positional profile. For example, if the in­stances we align 
are of a (15,4)*-motif, then the expected frequency of the correct nucleotide in each of the 15 posi­tions 
equals to g M 0.73 while the expected frequencies of the other nucleotides are only about 0.09. Suppose 
now that we are not as fortunate and only PI is pointed out to us. Typically, PI is not a perfect image 
of P, indeed in the FM model d(Pl, P) = k, where d(W, W ) is the Hamming distance between the words W 
and W (i.e. the number of mismatches between them). We would like to correct the mutated, or misspelled, 
positions of Pi, only we do not know who they are neither do we know the correct spelling of those positions. 
By an o-neighborhood of Pi in S we mean the set of all words in S which agree with Pr except on at most 
cx posi­tions: N,(Pl,S) = {W E s : d(W,Pl) I a}. As explained next, this a-neighborhood of Pi will be 
our reference dictionary as we attempt to correct the spelling errors in Pi (or equivalently, to find 
P). For example, if by some miracle, N,(Pi, S) = I(P) then the errors in Pi will be self evident from 
studying the positional profile ob­tained from aligning all the words in N,(Pi, S). Indeed, this is the 
same trivial task we just alluded to above. Typ­ ically, however, N, (PI, S) would contain only a subset 
of I(P) and, moreover, it would include many random words. Clearly, a delicate balance needs to be struck 
between allow­ing as many instances of P as possible into N,(Pl, S) (read, large cy) and decreasing the 
noise, or the random words in N,(Pl,S) (read, small CY). In the case of an (1,/c)-motif, CY = 2k is usually 
the only sensible choice. Other motif models might require a more sophisticated analysis ([lo]). For 
a given cy, N, (PI, S) contains m random words and ni (5 n) instances of P (see Table 1 for an example). 
In a typical application m > n1 so there is a substantial amount of noise in the alignment making it 
harder to detect P. We enlist bipositional and multi-positional profiles to help us separate the noise 
from the pattern. A positional profile of an alignment of words of length 1, is a 4 x 1 matrix (qN,i) 
where qN,i is the frequency of nucleotide N in the i-th po­sition of the alignment. A bipositional profile 
of the same alignment is a 16 x (i) matrix {qN,bf,i,j} where qN,iw,i,j is the frequency of the dinucleotide 
NM at positions i 5 j re­spectively (see Table 1 for an example). Bipositional profiles are better in 
separating the pattern from the noise because the noise gets distributed among 16 dinucleotides instead 
of only 4 possible nucleotides, for the same noise, in positional profiles. For example, suppose we are 
given an alignment of words that contain 5 instances which perfectly conserve the first two letters of 
a pattern P=cc . . . , as well as 50 totally random words. If we try to recover the first two letters 
of the pattern using the positional profile of the alignment of all 55 words, then the probability that 
at least one of the c-s will loose to the noise is 0.50. This should be compare with the probability 
of only 0.16 that the dinucleotide cc will loose to the noise in positions (1,2) of the bipositional 
profile. Regardless of whether we use positional or bipositional pro­files we have to address the issue 
of bias when our align­ment comes from the set N,(Pl , S). Unlike the totally random words mentioned 
in the previous paragraph, the random words that enter N,(Pl, S) satisfy the very non­ random condition 
d(Pl, W) 5 cy. Thus, while the ni in­stances of P cluster around P, the m random words in N,(Pl , S) 
cluster around PI and for sufficiently large m/n1 the profiles would exhibit a bias toward PI (see for 
exam­ple the positional profile in Table 1). We handle this bias by ignoring all entries in the profiles 
that include the nu­ cleotides of PI at the observed positions. For example, if PI starts with aa then 
we ignore any entry in the profile that has an a in one of the first two positions (see Table 1). Note 
that beside being forced upon us by the nature of the problem, this policy is consistent with our goal 
of correcting the misspelled positions of PI. Although bipositional pro­files now have only 9 available 
dinucleotides over which the noise is distributed, positional profiles are now reduced to only 3 nucleotides, 
so there is still a clear advantage to using bipositional profiles as the next example demonstrates. 
Suppose 20 instances of an (8,2)*-motif are implanted in a random sequence, S, of 4,000 nucleotides. 
Then, Nd(Pl, S) will include all 20 instances in I(P) and on the average about 450 random words W for 
which d(W, PI) 5 4. We can as­sume without loss of generality that P starts with cc and PI starts with 
aa . , then it is virtually certain that the most frequent nucleotide in the first two positions of the 
positional profile of N4 (PI, S) is a. Moreover, we estimate that the probability that c would fail to 
be the most fre­quent letter among the remaining three (c,g, t) in at least one of the first two positions 
is about 0.43. Compare that with an estimated probability of 0.15l that cc would fail to achieve a majority 
among the dinucleotides (which do not contain an a) in the same two positions. More generally, multi-positional 
profiles could gain us even more power to resolve the noise where appropriate. For ex­ample, consider 
20 instances of a (16,4)*-motif implanted in a random sequence, S, of 26,000 nucleotides. Then, Ns(Pl, 
S) will include all 20 instances of P, and on the average about 700 random words W. Assuming that P starts 
with cccc . . . and that PI starts with aaaa . . . we are essentially guaranteed that a will dominate 
all 4 initial positions. We estimate the probability that c would fail to be the most fre­quent nucleotide 
among c ,g, t in at least one of the first 4 positions at 0.79, while the probability that cccc would 
fail to be the most frequent in the same four positions (excluding 4-mers that include an a) is only 
0.10 . The above discussion was based on the assumptions that we were led to PI by the kindness of strangers. 
Deprived of that resource, we can try all possible options for PI. For exam­ple, in the case of one instance 
per sequence as in the FM model, we can explore all the words of the first sequence, as one of them is 
bound to be PI. We call such a candidate for PI a reference word . For a given reference word A we proceed 
as outlined above: assuming we seek a (15,4)*-motif (exactly 4 mutations the 15 bp long P), we look for 
possible corrections to the misspelled positions of A (assuming it is indeed PI) among the peaks of the 
quad-positional profile of Ns(A, S). Note that as explained above these peaks should not contain any 
letter from A at the relevant positions. On the average the correct modification to PI is expected to 
appear in (n - 1) (y) / ( , ) M n/4 of the P,s. This is signif­icantly more than what we typically expect 
from a random 4-mer. Note that in restricting our attention to the peaks of the quad-positional profile, 
we risk loosing the pattern P but [0.4297,0.4307] and [0 .1468,0.1476] are the respective 2 lop5 confidence 
intervals [0.7873, 0.78811 and [0.0932, 0.09381 are the respective 2 10m5 confidence intervals Alignment 
of N4 ( (A, PI, S)  m 6 7 6 5 42 6 3 3121-12 1311-l aa ac ca ;: at ta cc cg fF ct tc gg gt t g tt 
 Table 1: Example of positional and bipositional profiles. The (8,2)*-motif is based on P=cccccccc. There 
are four instances in the sample S: 4,. , P4. The neighborhood N4(Pi,S) also contains the random words 
W1,. , W, (some of which are at a substantial distance from the pattern P). Note that in the second column 
of the oositional orofile c is ranked third while the oair cc is top ranked for the mutated positions 
of Pl (1,2) if we exclude all pairs that cont&#38;in an a (;I1 pairs above the dividing line). as we 
demonstrate below the tradeoff is more than accept­able. This description sweeps under the rug a few 
technical details which would be addressed in the next section. Although the hitherto discussion was 
somewhat specialized to the case of an (I,k)*-motif, it should be noted that the algorithm can easily 
be modified so it can handle other motif models just as well. For example, by simply applying the previously 
described procedure over a range of i = 0. . . lc, we can handle an (1, k)-motif (where each instance 
has at most k mutations). The same approach will work for an (1,p)­ motif where the positions of each 
instance are independently misspelled at a rate p < 1 (this is the motif model that is used in the VM 
model defined in [14]). We can also modify the algorithm so it could be applied in an iterative fashion 
which can be useful for (1, k)*-motifs with relatively large lc (work in progress). 3. THE MULTIPROFILER 
ALGORITHM Given words, W and B of the same length, define d(W, B) as the Hamming distance between them. 
The distance between a word W, of length 1, and a sequence S is: d(W, S) = rninBcs d(W, B), where the 
minimum is taken over all words (substrings) of length 1 in S. Finally, the total distance between W 
and the sample S = {Sl, . . . , S,}, or simply the total distance of W, is d(W) = Ci d(W, Si). Total 
distance is our choice of a scoring function. We use the term (k-)wordlet to denote a, typically non­consecutive, 
k-letter subsequence of a word. A k-wordlet is defined in terms of its k positions in a word and their 
con­tent. For example, the word atcgaa contains the 3-wordlet -t--aa. Subsequences of wordlets are called 
syllables, so -t---a is a syllable of size 2 of the 3-wordlet -t--aa. Note that like wordlets, syllables 
are not consecutive in general. A syllable, or a wordlet, is disjoint from a word if it differs from 
the word in all its positions. For example, the wordlet -t--aa is disjoint from the word cccatt but not 
from the word tttttt. Table 2: Examples of modifying wordlets. For simplicity, we concentrate in this 
section on the fixed mutation (FM) model (Pevzner and Sze, 2000 [14]) that as­sumes that one instance 
of the pattern P, with ezactly k mu­tations is randomly implanted into each of the sequences in thesampleS= 
{Sl,... , Sn}. We first describe the simplest variant of the algorithm. We choose one reference sequence, 
say S1 and we sequentially consider each of the words in 5 1 as a reference word, denoted by A. If A 
coincides with 9, the instance of P in S1, then it contains exactly k mu­tated positions. Let y(Pl) denote 
the wordlet which cor­rectly modifies PI (see Table 2 for an example). Our main idea is that some of 
the other Pis, should have either pre­served y(Pl) in its entirety or at least some syllables of it. 
Of course, we do not know the locations of the other Es, how­ever, we do know that d(Pl, Pi) 5 2k. It 
follows that with 01 = 2k, each Pi (i = 2,. , n) will reside in the correspond­ing list of A s neighbors: 
Ji = {B E Si : d(B,A) 2 a}, where B is a word of length 1. Since we know that the Pis are present in 
N,(Pl, S) (= UiJi), and that I will, most likely, appear in a few of those Pis, all we need to do is 
to scan the (multi) k-positional profile of iV,(Pl, S) for k-wordlets that appear in at least p words 
from distinct sequences, where p is a predetermined threshold. It is im­portant to realize that, we only 
look for wordlets that are disjoint from A. One can think of looking for popular wordlets (which are 
disjoint from y(A)) as, again, a motif finding problem, only this one has a different nature. First of 
all, this sub-motif can be very weak meaning that most likely there will be many random motifs (wordlets) 
that will be stronger than cation of PI. erence word A, to produce the modified word A,. the correct 
wordlet. The reason our method works is that this motif lies in a much smaller search space so we can 
ap­ply an exhaustive search to detect these weaker signals and then test them back in the reference word. 
That is, we use the popular wordlets to appropriately modify the reference word (see Table 2 for an example) 
and then find the total distance of the modified reference word3. The algorithm would therefore detect 
the signal ([lo]) provided ~(4) has been preserved in sufficiently many other F is. Since it is more 
likely that parts of ~(4) are preserved rather than the whole wordlet, we introduce a variant of the 
algorithm that looks for syllables of y(Pi) that are present in N,(Pi, S). For example, if the syllable 
size is s = 2 and the best match to the wordlet y=-a--c-cg--- in Ji is -a--t-cg---, then we say that 
(i) = 3 of y s syllables are present in Ji and that the count of (syllables of) y in the sequence Si 
is 3: C(y, Si) = 3. The count of y in in the whole sample S is C(y) = Cy= =, C(y, Si). As before, if 
C(y) 2 p, the total distance of the reference word modified by y, A, (see Table 2), is computed and ranked. 
If A, = P then the motif is detected. Note that setting s = Ic returns us to the first variant of the 
algorithm. In this case, C(y) is the count of the number of sequences Si for which y is present in Ji. 
 A detailed analysis of the performance of MULTIPROFILER can be found in [lo], here we only report the 
highlights. In both variants of the algorithm described above the thresh­old /3 regulates the performance 
of the algorithm. On the one hand, if we set S too small we will be overwhelmed by random wordlets whose 
count will exceed S. On the other hand, if we set ,B too large our detection rate (the probability that 
the hidden pattern is detected) will drop. In order to make an informed decision about /3 we need to 
compute the expected number of random wordlets y for which C(y) 2 ,S. This expectation is the only term 
in the overall cost analysis which varies with /3, though there are other non-negligible costs such as 
the cost of managing the multi-positional pro­files, or equivalently, of counting the wordlets/syllables. 
We should then contrast the overall cost with the detection rate which is essentially given by P [C(~(pr)) 
2 ~1, where y(Pi) is the correct modification of the mutated wordlet in PI. Ta­bles 3 and 4 provide partial 
results in the case of a (15,4)*­ motif (exactly 4 mutations in a pattern of length 15) in a sample of 
twenty 1500 bp sequences. The tables demonstrate that, using one reference sequence, the s = 2 variant 
has an advantage over the s = 4 one at high detection rates. That is, we need to invest less effort in 
the s = 2 case to obtain the same or better signal detection rate with the s = 4 variant. However, it 
is important to note that counting pairs incurs a rather high fixed counting costs, thus increasing /3 
speeds up the s = 4 variant much more significantly than it does to the s = 2 variant. This will be important 
next. So far we used only the first sequence in the sample, Si, as our reference sequence, but we can 
use any number of the sequences as a reference sequence. For example, using all 3A considerable amount 
of time can be saved by noting that the relevant total distance can be computed directly from Na(Pl, 
S) Table 3: Analysis of the MULTIPROFILER algo­rithm (s=k=4). P 3 4 5 6 7 expected cost of observedtotal 
distance detection computation rate observed detection rate using n reference sequences 4.8106 1O1 0.9356 
1.0000 8.2245. 10 0.8299 1.0000 1.0718. 10 0.6627 1.0000 1.0964.10 0.4617 0.9998 8.9781. lo6 0.2745 0.9933 
 /3 is the threshold for the total count of the wordlet. To find the expected total cost one should add 
the expected fixed costs (the ones which do not depend on S) of 1.37.10*+4.5. 10 to the corresponding 
entry in the second column. The observed detection rate data was derived from a Monte Carlo simulation 
that generated lo6 random samples of our problem. Note that if we set /3 = 7 and use n reference sequences 
then we get a detection rate of about 0.9933 at an expected cost of 20 (1.37 . 10 + 4.5 . lo6 + 9.0 106). 
Achieving the same detection level using either this variant with one reference sequence (/3 > 3), or 
the s = 2 variant (fixed costs of 20 . 4.2 . lo ), would be significantly moreexpensive. Note that all 
cost figures should be calibratedagainst the particular machine the algorithm is running on. Table 4: 
Analysis of the MULTIPROFILER algo­rithm (s=2<k=4). P expected cost of observedtotal distance detection 
computation rate observed detection rate using n reference sequences 50 3.8971. 1011 0.9994 1.0000 55 
1.0393 loll 0.9914 1 .oooo 56 7.3879 1o1O 0.9867 1 .oooo 57 5.2098 1o1O 0.9804 1.0000 58 3.4310 1o1O 
0.9707 1.0000 59 2.3319 1o1O 0.9594 1.0000 60 1.4789 1o1O 0.9426 1.0000 65 11.1853.10 0.7919 1 .oooo 
 The expected fixed costs is 4.2 . lOlo. This dominates the expected total distance cost starting at 
/3 = 58. Note that if we require detection rates over 90% and we use only one reference sequence, then 
this variant is better than the s = lc one. The observed percentage data was derived from a Monte Carlo 
simulation that generated lo6 random samplesof our problem. n possible sequences for reference we improve 
our detection rate considerably but at an obvious increase in the complex­ity. However, even with a naive 
implementation we do not have to incur the full n-fold increase in cost. The main ad­vantage of using 
n reference sequences instead of one is that we can increase ,0 so that the cost per reference sequence 
will decline and although the detection rate per reference sequence will decline as well, the overall 
detection rate will increase significantly. Since the costs, as a function of p, of the s = 4 variant 
have a steeper gradient, it is better suited to take advantage of the move to n sequences as can be verified 
by Tables 3 and 4.  4. BENCHMARKING Pevzner and Sze, 2000 [14] establish that the well known weight 
matrices based algorithms , CONSENSUS, Gibbs- DNA and MEME fail to solve their challenge problem: find­ing 
(15,4)*-motifs implanted in 600 bp sequences. WIN-NOWER [14] is able to solve the challenge problem but 
fails to detect (15,4)*-motifs implanted in 1300 bp sequences. Buhler and Tompa s random projections 
algorithm, PRO-JECTION 2001 [5], was able to push the performance bar even further beyond 1300 bp. In 
order to be able t,o compare MULTIPROFILER. and PRO-JECTION we had to change our scoring function (total 
dis­tance). The authors of PROJECTION chose to score a pu­tative pattern P by counting the number of 
sequences in the sample whose distance to P is not bigger than k. Clearly, this scoring scheme heavily 
favors (1, k)-motifs whose in­stances appear in every sequence in the sample. As men­tioned earlier, 
Buhler and Tompa [4] report they succeed in 16 out of 20 times in detecting a (15,4)*-motif in twenty 
nucleotide sequences of length 2000. They mention that the failures are not attributed to maximally scored 
random motifs, rather PROJECTION finds a sub-optimal pattern. Testing our algorithm adapted to use PROJECTION 
s scor­ing scheme (instead of the total distance) we found that we are able to successfully detect the 
same motifs in more than 99% of the time (in about lhr and 15min on a 500 MHz G4). Moreover, we can detect 
more than 98% of such mo­tifs implanted in twenty 3000-long sequences (about 3 hrs on a 500 MHz G4).4 
We also compared our results in the bor­der line case of a (9, P)*-motif implanted in twenty 600-long 
sequences. As noted in [5] in 4 out of 20 cases PROJEC-TION failed to find a maximally scored pattern 
which of course has a score of 20. Our tests show that in less than a minute running time, we essentially 
never fail to include the implanted motif among the patterns we list with a score of twenty (on the average 
there are 2.6 such [5]).  5. FINDING REGULATORY PATTERNS IN DNA SEQUENCES Although the FM model that 
we use to study our algorithm call for exactly one instance of the signal, P,, in each se­quence, the 
existence of more than one instance (invaded samples), as well as none (corrupted samples), is tolerated 
 4These success rates are based on simulation studies of 250,000 random samples. 50ur algorithm succeeded 
to detect the implanted motif in all 100,000 simulation trials.  by our algorithm making it a viable 
tool for finding a reg­ulatory pattern. Throughout the paper we assumed the background distribution is 
uniform. Heavily biased sam­ples should require a slightly more sophisticated metric than the Hamming 
distance as well as more involved counting function. As for gapped patterns, one approach might be to 
look for spatial relations between discovered consecutive patterns. These modifications are currently 
under develop­ment, however our described algorithm is flexible and robust enough to find biological 
motifs, used as tests in previous papers, without any modifications6. We tested our algorithm on a few 
biological samples with known motifs. Our data consisted of: The sample of experimentally confirmed E. 
coli CRP binding sites containing 18 105-nucleotide sequences (Storm0 and Hartzell, 1989 [20])  Four 
samples from a variety of organisms taken from regions upstream of four eukaryotic genes: preproin­ sulin, 
dihydrofolate reductase (DHFR), metallothioneins, and c-fos (Blanchette, 2001 [2] and Buhler and Tompa, 
2001 [5]). A collection of promoter regions from the yeast S. cere­ visiae known to contain a shared 
promoter (Buhler and Tompa, 2001 [5]). The promoter regions were from genes SW14, CLN3, CDCG, CDC46, 
and CDC47. Table 5 summarizes the performance of our algorithm in these cases. To demonstrate the algorithm 
s flexibility, we set the length of the signal in all the samples to 1 = 20 even though this is not the 
case in any of the samples. In all cases any arbitrary choice of k worked and the runs took a few seconds 
each. These tests demonstrate that our algorithm is able to identify signals (even ones with spacers) 
in corrupted and biased samples without any modifications of the basic algorithm and that no exact apriori 
knowledge of the pattern length is required. Significant improvement can be expected once a mechanism 
to weed out parasite signals will be implemented.  6. ANALYSIS OF SUBTLE MOTIFS AND MOTIF FINDERS In 
this section we ask what is a subtle motif and how can we objectively evaluate the performance of a motif 
finder. We offer answers to these questions and demonstrate them in the context of a the previously mentioned 
FM and VM models, although much of the discussion in this section holds more generally. We assume that, 
relying on the scoring function, the motif finder tries to find a motif that is implanted in a sample 
randomly generated according to the sample model. The motif itself is generated and implanted in accordance 
with the motif model. We mainly discuss the total-distance scoring function, but in the context of the 
(1, k)*-motif (FM model) we also consider the sequence-count scoring func­tion used by Buhler and Tompa, 
2001 [5], where we count 6As was pointed out by a keen eyed referee, these biologi­cal examples are much 
less subtle than the synthetic models studied here. In particular, they have all been found pre­viously 
using standard profile-driven motif finders . Sequence E. Coli CRP length 1890 Table 5: Biological motifsFound 
motif of length 20 TGTGAnnnnGnTCACAnttt detection. reference motif TGTGAnnnnGnTCACA Ref. preproinsulin 
DHFR metallothionen c-fos veast ECB 7689 800 6823 3695 5000 gcAGACCCAGCAccagggaa aattgcagCCTCAGCCCCca 
gCCCTAATGGGCCAggcggc TTCGCGCCAAACTtgacngc ctcTGCGCCCGGccccgtcc ggtGCTCTGCACcCggcccg CCATATTAGGAnATCTGcgt 
gtnTTTCCCgtTaAGGAAAa AGACCCAGCA CCTCAGCCCC CCCTAATGGGCCA TTCGCGCCAAACT TTGCGCCCGG AGCTCTGCACTC GGATGTCCATATTAGGACATCTG 
TTTCCCnnTnAGGAAA [a; ii; [ii ;z; (3)  The first column provides the name of the gene. Length is the 
total number of base pairs in the sample. We only look for motifs of length 1 = 20. Under the reference 
column we provide either an established biological motif or one found by alternative algorithms. Positions 
for which no consensus letter was found (at least %50) are reported as n. We do not report the new motifs 
found by our algorithm. (1) was taken from Storm0 and Hartzell, 1989 [20], (2) from Blanchette, 2001 
[2], and (3) from Buhler and Tompa, 2001 [5]. the number of sequences in the sample whose distance to 
the putative pattern is greater than k. The derivation of the numerical results presented in this section 
can be found in [lo]. Loosely speaking, we consider a motif as subtle if its score is unremarkable when 
compared with the scores of some ran­dom motifs present in the same sample. This raises the question 
of what is the twilight tone of scores beyond which we can expect to start seeing random motifs. Clearly, 
this threshold depends on the sample model and on the choice of the motif scoring function. The sample 
model determines the distribution of the scores of random motifs and in par­ticular it determines the 
expected number of random motifs at any given score. Generally, we expect the twilight zone threshold 
to lie around the score, for which the expected number of random motifs that exceed this score, is about 
1 (clearly the choice of 1 is somewhat arbitrary, 2 or l/2 are equally plausible however lo6 or 10p6, 
for example, are dubious choices). Figures 1 and 2 demonstrate how this threshold can vary with the the 
size of the sample and with the choice of the scoring function. Assume for a moment that the score, y, 
of the implanted motif is identical for all motifs generated according to our motif-sample model (for 
example, the sequence-count score will assign a score of 0 for any FM model). A plausible (though somewhat 
arbitrary) definition of a subtle motif is that its score lies beyond the twilight zone. In other words, 
we say the motif is dim if the expected number of random motifs with a score of y or better is above 
1. More generally though, the score of the implanted motif will vary not only with the particular motif, 
generated according to the motif model, but the score might also vary with the sample for the same particular 
motif (for example the total distance score will vary with good random matches of the pattern). Thus, 
in order to determine the subtlety of the motif we need some idea about how the score of the implanted 
motifs is distributed (see Figure 3 for examples of such distribu­tion functions). We call a motif subtle 
or dim if its median score lies beyond the twilight zone. It is interesting to note the impact of the 
scoring function on this definition. For example, a (15,4)*-motif (FM model) implanted in 20 se­quences 
of length 1600 is dim when viewed with the total 707274 7678 80 a2 a4 aa aa tota, dl?&#38; CB Figure 
1: The expected number of random motifs as a function of the total distance score. The point (~,y) is 
on the graph if y is the log,, of the expected number of random motifs with a score z or worse (i.e. 
x or bigger for the total distance score). The two graphs correspond to sample models of 20 sequences 
with 1600, respectively 3000 bp. The points are connected by lines merely to facilitate visualization. 
Note how the onset of the twilight zone shifts from a score of 80 to 74 when we move from 1600 to 3000 
bp sequences. distance score, however, the exact same motif shines quite brightly through the sequence-count 
binocular, indeed using this score we can extend the sequence length to over 3000 before this motif becomes 
dim (see [lo] for details). The performance of a motif finder is determined by its reli­ability (how 
well does it find motifs) and its complexity (at what cost). Clearly, how well an algorithm detects a 
motif might vary with the motif-sample model. However, it also depends on how one defines what constitutes 
a detected mo­tif. Firstly, do we demand that all (or most) of the instances of the pattern be discovered, 
or are we willing to settle for the recovery of the pattern? Generally speaking, recover.  Figure 2: 
The expected number of random motifs as a function of the sequence count score. In this example the onset 
of the twilight zone shifts from a score of 4 to 1 when we move from 1600 to 3000 bp sequences. ing the 
exact set of instances of a dim motif is a hopeless task due to good random matches of the pattern (for 
ex­ample, see the poor average performance coefficient , or apt, reported in [4]). Secondly, since a 
subtle motif is unre­markable recognizing such a motif would often require some additional knowledge 
(obtained for example from biological experiments) to which the motif finders we consider here are not 
privy to. In particular by stating that the implanted motif is found by the algorithm if it appears among 
the 5, 10, or 100 top scoring motifs reported by the algorithm , we unfairly place the burden of the 
motif subtlety on the shoul­ders of the algorithm: the algorithm might fail to detect the motif because 
its score is too low and/or the user was too impatient to look sufficiently down the ranked list of motifs 
suggested by the algorithm. To obtain a less user/subtlety dependent evaluation of the algorithm s reliability 
we say the unknown motif is detected if the algorithm correctly computes its score. For example, MULTIPROFILER 
[lo] detects a (15,4) FM model implanted in 20 sequences of length 1600 over 99.4% of the time. One implication 
of this definition is that a dim motif is not necessarily one that is difficult to detect, for example, 
pattern-driven algorithms (Brazma et al., 1998 [3]) that test all 4 l-letter patterns are 100% reliable 
according to our definition and for a small 1 the cost is not too bad. A more refined gauge of the subtlety 
of a motif can be ob­tained from what we call the subtlety graph. It is gener­ated by combining the graph 
of the distribution of the motif scores with the graph of the (log-) expected number of ran­dom motifs 
per score. The subtlety graph provides us with the expected number of random motifs whose score will 
be as good as the given quantile of motif score. More precisely, the point (~,y) will be on the graph 
if 10 is the expected number of random motifs whose score will be as good as the y-th quantile of motif 
scores, or equivalently, as good as any of the scores in the low 100 y percent of motif scores. Figure 
3: The distribution of the score of implanted motifs. The point (z, y) is on the graph if y is the probability 
that the score of the imolanted motif will be z or worse (i.e. z or bigger for the total distance). The 
points are connected by lines merely to facilitate visualization. The two FM models consists of a (15,4)*-motif 
implanted once in each of the 20 sequences with 1600 and 3000 bp. In the VM model the positions of the 
15 bp pattern are mutated independently in each of the 20 instances (implanted in 1600 bp sequences) 
with probability 0.3. Turning this on its head we note this is equivalent to the following useful information: 
we will loose 100 y percent of the implanted motifs if we set a score based threshold that allows no 
more than 10 random motifs (on average). An important advantage of subtlety graphs is that the informa­tion 
is presented in a way which is independent of the scoring function as you can verify with the examples 
in Figure 4.  7. ACKNOWLEDGMENTS We would like to thank Jeremy Buhler for providing us with the biological 
samples used for generating table 5. We also extend our gratitude to anonymous referees for their insight­ful 
comments.  8. REFERENCES PI T. Bailey and C. Elkan. Unsupervised learning of multiple motifs in biopolymers 
using expectation maximization. Machine Learning, 21:51-80, 1995. PI M. Blanchette. Algorithms for phylogenetic 
footprinting. In Proceedings of the Fifth Annual International Conference on Computational Molecular 
Biology (RECOMB-Ol), Montreal, Canada, April 2001. A. Brazma, I. Jonassen, I. Eidhammer, and PI D. Gilbert. 
Approaches to the automatic discovery of patterns in biosequences. Journal of Computational Biology, 
5:279-305, 1998. J. Buhler. Search Algorithms for Biosequences Using [41 Random Projection. PhD thesis, 
University of Washington, August 2001.  C. Lawrence, S. Altschul, M. Boguski, J. Liu, A. Neuwald, 
and J. Wootton. Detecting subtle sequence signals: a Gibbs sampling strategy for multiple alignment. 
Science, 262:208-214, Oct. 1993. M. Li, B. Ma, and L. Wang. Finding similar regions in many strings. 
In Proceedings of the 31st ACM Annual Symposium on Theory of Computing, pages 473-482, Atlanta, Georgia, 
May 1999. G. Pesole, N. Prunella, S. Liuni, M. Attimonelli, and C. Saccone. WORDUP: an efficient algorithm 
for discovering statistically significant patterns in DNA sequences. Nucleic Acids Res., 20:2871-2875, 
1992. P. Pevzner and S. Sze. Combinatorial approaches to finding subtle signals in DNA sequences. In 
Proceedings of the 8th International Conference on Intelligent Systems for Molecular Biology, pages 269-278, 
San Diego, USA, 2000. AAAI Press. P51 I. Rigoutsos and A. Floratos. Combinatorial pattern discovery in 
biological sequences. Bioinformatics, 14:55-67, 1998. P61 M. Sagot. Spelling approximate or repeated 
motifs using a suffix tree. Lecture Notes in Computer Science, 1380:111-127, 1998. M. Sagot, V. Escalier, 
A. Viari, and H. Soldano. P71 Searching for repeated words in a text allowing for mismatches and gaps. 
In Proceedings Second South American Workshop on String Processing, pages 87-100, Valparaiso, Chile, 
April 1995. P81 R. Staden. Methods for discovering novel motifs in nucleic acid seqences. Computer Applications 
in Biosciences, 5:293-298, 1989. PI G. Stormo. DNA binding sites: representation and J. Buhler and M. 
Tompa. Finding motifs using Fl discovery. Bioinformatics, 16(1):16-23, 2000. random projections. In 
Proceedings of the Fifth Annual International Conference on Co,mputational G. Storm0 and G. Hartzell 
III. Identifying PO1  Molecular Biology (RECOMB-Ol), pages 69-76, protein-binding sites from unaligned 
DNA fragments.Montreal, Canada, April 2001. ACM Press. Proc. Natl. Acad. Sci. USA, 86:1183-1187, 1989. 
Y. Fraenkel, Y. Mandel, D. Friedberg, and PI [2li S. Sze, M. Gelfand, and P. Pevzner. Benchmarking of 
H. Margalit. Identification of common motifs in motif finding algorithms. In Proceedings of the Pacific 
unaligned DNA sequences: application to Escherichia Symposium on Biocomputing 2002, pages 235-246,coli 
Lrp regulon. Co,mp. Appl. Biosci., 11:379-387, 2002. 1995. P21 M. Tompa. An exact method for finding 
short motifs PI D. Galas, M. Eggert, and M. Waterman. Rigorous in sequences with application to the 
Ribosome pattern-recognition methods for DNA sequences. Binding Site problem. In Proceedings of the Seventh 
Analysis of promoter sequences from Escherichia coli. International Conference on Intelligent Systems 
for Journal of Molecular Biology, 186:117-128, 1985. Molecular Biology, pages 262-271, Heidelberg, Germany, 
August 1999. AAAI Press. M. Gelfand, E. Koonin, and A. Mironov. Prediction of PI transcription regulatory 
sites in Archaea by a J. van Helden, B. Andre, and J. Collado-Vides. [231  comparative genomic approach. 
Nucleic Acids Res., Extracting regulatory sites from the upstream region 28:695-705, 2000. of yeast genes 
by computational analysis of G. Hertz and G. Stormo. Identifying DNA and protein oligonucleotide frequencies. 
J. Mol. Biol., 281:827-842, PI  patterns with statistically significant alignments of 1998. multiple 
sequences. Bioinformatics, 15:563-577, 1999. [241 M. Waterman, R. Arratia, and D. Galas. Pattern PO1 
U. Keith and P. Pevzner. Subtle motifs: defining the recognition in several sequences: consensus and 
limits of motif finding algorithms. Bioinformatics, in alignment. Bulletin of Mathematical Biology, press, 
2002. 46:515-527, 1984. [25] F. Wolfertstetter, K. Frech, G. Herrmann, and T. Werner. Identification 
of functional elements in unaligned nucleic acid sequences. Computer Applications in Biosciences, 12:71-80, 
1996.  
			