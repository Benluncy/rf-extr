
 Simple Path Selection for Optimal Routing on Processor Arrays (Extended Abstract) Christos Kaklamanis 
Danny Krizanct Satish Rao$ Harvard University Department of Computer Science NEC Research Institute Aiken 
Computation Laboratory University of Rochester 4 Independence Way Cambridge, Massachusetts 02138 Rochester, 
New York 14627 Princeton, NJ 08540 Abstract 4. An on-line randomized algorithm for routing a permutation 
in an n x n torus in time n + In this paper, we consider the problem of per-O(log n ) time using constant 
sized buffers. mutation routing in two-and three-dimensional mesh-connected processor arrays. We present 
Also, while optimal algorithms for routing on new on-line and off-line routing algorithms, all of two-dimensional 
meshes were known, we give which are optimal to within a small additive term. new algorithms that are 
simpler and/or require In particular, our results include the following: smaller buffers. 1. An off-line 
algorithm for routing a permuta­ 1 Introduction tion in an n x n mesh in time 2n 1using buffers of 
size 4. In this paper, we consider the problem of per­mutation routing in two-and three-dimensional 
2. An off-line algorithm for routing a permuta­mesh-connected processor arrays. We present tion in an 
nx nx n mesh in time 372 1using new on-line and off-line routing algorithms, all of buffers of size 
10. which are optimal to within a small additive term. While optimaJ algorithms for routing on two­ 
3. An on-line randomized algorithm for rout­dimensional meshes were known, our algorithms ing a permutation 
in an n x n x n mesh in are significantly simpler and/or require smaller time 3n + O(log n) time using 
constant sized buffers. Our algorithms for three-dimensional buffers, meshes are the first to achieve 
an optimal bound. We also present a simple optimal algorithm for ·Supported in part by NSF Grant NSF-CCR-87-04513. 
This work was done while visiting NEC Research Institute. routing on the two dimensional torus. E-mail: 
kakl@harvard.harvard .edu We are interested in worst case permutation t This work was done while visiting 
N EC Research In­ routing using small communication buffers at each stitute. E-mail: krizanc@cs. rochester.edu 
node. While Leighton [5] showed that for almost t E-mail: satish@research .nj.nec.com all permutations 
, one can use greedy paths to route optimally with buffers of size four, there are permutations that 
will cause this algorithm Permission to copy without fee all or part of this material is granted provided 
that the copies are not made or distributed for direct to fail. That is, one cannot use greedy paths 
with commercial advantage, the ACM copyright notice and the title of the constant-sized buffers for routing 
permutations in publication and its date appear, and notice is given that copying is by the worst case. 
permission of the Association for Computing Machinety. To copy other­wise, or to republish, requires 
a fee and/or speeitic permission. SF AA 92-61921CA @1992 ACM O-89791-484-8192K)O0610023. . . . . .. $1.50 
23 We endeavor to solve our problems using the simplest possible path selection. Our algorithms are all 
based on path selection strategies that en­sure for every packet that its path is shorter than the diameter 
of the mesh, Previous approaches to off-line routing used longer packet paths [1, 2], and previous approaches 
to on-line routing had complicated path selection strategies for ensuring that path lengths were short 
[8, 6, 7]. Our ap­proach is to route each packet to an intermediate destination in a single dimension 
so that the total distance any packet travels in that dimension is at most n 1. We should mention that 
this path selection scheme is a form of the strategy of choosing an intermediate destination for each 
packet so that no packet travels too far. Strategies like this have been proposed before for routing 
in various net­works [9]. This paper, however, is the first to prove that such a strategy can have optimal 
be­haviour on the mesh. Our main results depend upon showing how to reduce)) the routing of a single 
permutation in a d-dimensional mesh to the routing of two per­mutations in a (d 1)-dimensional mesh. 
This reduction, when combined with the well-known result that two permutations can be routed in a linear 
array in time n will yield the following the­orem concerning off-line permutation routing on a mesh. 
Theorem 1 Any permutation can be off-line routed in an n x n mesh in time 2n 1 using bu.ers of size 
four at each node. This improves the routing time of previous off­line routing results at a small cost 
of additional storage at each node. For example, one can route in 3n time using buffers of size one [1], 
in 2.5n time using buffers of size two, or in 2.25n time using buffers of size four [2]. Conversely, 
we im­prove upon the buffer requirements and the com­plexity of the more general and deterministic, on­line, 
2n 2 time, constant buffer-size algorithm of [6]. Their path selection strategy is complicated and even 
with the improvements made in [7] the buffers are of size 58. Thus, if off-line computa­tion is available, 
our methods are preferable. We can show that two permutations can be routed in the mesh both off-line 
and on-line, as described in the following theorems. Theorem 2 There is a randomized on-line algo­rithm 
that routes .2 permutations in a n x n mesh in 2n + O(log n) time using constant size buflers with probability 
1 O(l/nc). Theorem 3 There is an ofi-line algorithm that routes 2 permutations in a n x n mesh in 2n 
time using buflers of size 8. These are the first optimal results for these problems. Their importance 
becomes apparent when one considers the previously mentioned re­duction. Theorems 2 and 3 when combined 
with the appropriate version of the reduction will im­ply the following theorems for optimal on-line 
and off-line routing in a three-dimensional mesh. Theorem 4 There is an on-line randomized 3n+ O(log 
n) time algorithm for routing a permutation in an n x n x n mesh with probability 1 O(l/nC) with constant 
bufler size. Theorem 5 There is an off-line 3n 1 time al­gorithm for routing a permutation in an n x 
n x n mesh with bufiers of size 10. The best previously known results for on-line routing in a three-dimensional 
mesh are by Kunde [4]. He presents algorithms for routing in d­dimensional meshes, for arbitrary d. For 
three dimensions, he has a deterministic algorithm that can route in time 3.333n + 0(n/~(n)112) using 
buffers of size j(n). For the off-line routing prob­lem the best previously known running times are 5n 
with buffers of size one [1], 4.5n with buffers of size two, and 4.25n with buffers of size four [2]. 
Finally, we give simple randomized algorithms for routing permutations in the mesh and torus. In particular, 
we analyze the following routing scheme for the two-dimensional mesh. · Path Selection: A packet starting 
at (i, j) and destined for (i , j ) routes itself to (i, r) and then greedily to (i , j ) where r is 
picked uni­formly over {1 : \/-il+\i-i l <n-l}. · Queueing Strategy When two packets con­tend for the 
same edge, the packet with the farthest to go will be sent across the edge. This algorithm has the property 
that no packet travels more than n 1 total distance in the row (or column). Theorem 6 The above strategy 
routes a permu­tation in the n x n mesh in time 2n + O(log n) with buflers of size O (log n), with probability 
1 O(l/nc). An algorithm of [8] achieves the same running time and buffer-size bounds, but has a more 
com­plicated path selection strategy. Our algorithm, as with the algorithms of [8], can be modified to 
work with constant size buffers, using a slightly more complicated queueing strategy. Similarly we provide 
a simple algorithm that will route optimally on a torus as stated in the following theorem. Theorem 
7 There exists a randomized path se­lection strategy where no packet travels more than n/2 row or column 
distance that yields an on-line algorithm that routes a single permutation in a n x n torus in n + O 
(log n) time using constant size bu~ers, with probability 1 O(l/nc). A deterministic algorithm that 
routes in time n + O(n/f(n)) using buffers of size j(n) was pre­viously described in [3]. Our algorithm 
improves upon both the buffer size and the running time. We proceed by giving some preliminary defini­tions 
in section 2. This is followed by a description of how to reduce the off-line or on-line routing of a 
single permutation in d dimensions to routing 2-relations in d 1 dimensions. Theorem 1 follows directly 
from this section. In section 4 we show that 2-relations can be optimally routed off-line and on-line 
in a 2-dimensional mesh. These re­sults imply theorems 4 and 5. Finally, in section 5, we describe very 
simple optimal algorithms for routing on the two-dimensional mesh and torus. In the technical portion 
of the paper we analyze the performance of our randomized algorithms as­suming O (log n)-size buffers. 
Using techniques similar to those used in [8], these algorithms can be made to work with constant-sized 
buffers. 2 Preliminaries The n x n mesh-connected array of processors (or two-dimensional mesh) contains 
N = n2 pro­cessors arranged in a two-dimensional grid with­out wrap-around edges. More precisely, it 
cor­responds to the graph, G = (V, E), with V = {(x, Y) I Z,Y 6 (n)} and ~ = {((z, Y), (z, Y+ 1)) I XC 
(n), yc (n l)}U {(( Z,y), (x+l, y))lx ~ (n -l), y G (n)}, where (n) = {l,. ... n}. Nodes in the graph 
correspond to processors and edges to bidirectional communication links. The two­dimensional torus-connected 
network (or torus) is a mesh with wrap-around edges. The d­dimensional mesh and torus are the logical 
exten­sions of their respective two-dimensional versions to higher dimensions. The input to a routing 
problem consists of a set of packets, R = {p]p = (m,s, d)}, where m. is a message and s = (i, j) (the 
so&#38;_rce) and d = (k, 1) (the destination) are processors. We de­fine a packet s source (destination) 
column to be SC(P) = i (d.(p) = k). In an h-h routing problem each processor is the source of at most 
h packets, and the destination of at most h packets. An h­relation routing is the h-h routing problem 
and a l-relation is called permutation routing. The routing above is to be performed using the following 
model of the mesh: During a single par­allel communication step, each processor can send and receive 
a single packet along each of its inci­dent edges. Between communication steps, pro­cessors can store 
packets in their local queues, which are of bounded size. We claimed in the previous section, that we 
could reduce routing permutations in d dimen­sions to routing 2-relations in d 1 dimensions. In fact, 
for randomized routing we have a weaker result. We specify the result using the following definition. 
Definition 1 We consider a set of packets to be an &#38;approximate h-h routing problem in a d­dimensional 
mesh if for any set of processors, P, that are contiguous in a single dimension at most h\P\ + 6 packets 
start at a processor in P, and at most h 1 PI + 6 packets are destined for a proc­essor in P. An 6-approximate 
h-relation is a b-approximate h-h routing problem. Our randomized algorithm actually reduces the problem 
of routing a permutation in d-dimensions to routing an O (log n)-approximate 2-relation in a (cl I)-dimensional 
mesh.  s Permutation routing and 2­relation routing In this section, we discuss the reduction from per­mutation 
routing to 2-relation routing, For the purposes of this abstract we only consider the ran­domized on-line 
case. 3,1 Reduction We give a randomized on-line algorithm that routes in a cl-dimensional mesh in expected 
time n + O(logn) + T(n, d 1), where T(n, d 1) is the expected time for simultaneously routing an O(log 
n)-approximate 2-relation in a d 1­dimensional mesh. We state the randomized on-line algorithm as follows. 
Here we assume that n is a multiple of 4. We describe the algorithm for the two­dimensional mesh, but 
the result translates di­rectly to higher dimensions. o Path Selection: Each packet, p, chooses a col­umn 
as follows. 1. If s.(p) e {l...;}, and de(p) ~ {l...;} then randomly select a column in {1...2}. 2. 
If s.(p) 6 {l...;}, and de(p) E {~ + 1.. .n} then randomly select a column in {;+l...~}. 3. If s.(p) 
E {f + l...n}, and cL@) E {l...;} then randomly select a column in {~ + l... ~}. 4. If s.(p) c {~+ l...n},and 
cL(P)E {~+ 1.. .n} then randomly select a column in {y+l...?z}.  · Queueing Strategy: Using a farthest 
to go strategy at each node, route each packet in its starting row to its intermediate column, and then 
in its intermediate column to its destination row, and finally in its destination row to its destination. 
 Theorem 8 The algorithm above routes a per­mutation in the mesh in n+ O(log n)+l (n, 1) time with probability 
at least 1 -O(l/nc) with buflers of size O(log n), where T(n, 1)is the time required to route an O(log 
n)-approximate 2-relation in a linear array with probability 1-O(l/nc). Proof Sketch: We describe the 
main lemmas in the proof of this theorem. Lemma 1 With probability at least 1 O(l/nc), no set of k-rows 
delivers more than 2k + O(log n) packets to a single column. This lemma implies that the first row rout­ing 
problems are O(log n)-approximate 1-2 rout­ing problems, the column routings are O(log n)­approximate 
2-relations, and the final row rout­ings are O (log n)-approximate 1-2 routing prob­lems. Now we consider 
a packet to be in its first phase if it still being routed in its starting row. We consider it to be 
in its second phase if it is being routed in a column. We consider it to be in its third phase if it 
is being routed in its destination row. The analysis proceeds by bounding the time spent in each phase 
by a packet. Lemma 2 No packet is delayed in its jirst phase as long as each node has a queue of size 
at least Q(log n) with probability at least 1 O(l/nc). We justify this lemma by recalling that a 1­2 
routing problem is routed without delay in a linear array, and noting that this is an O(log n)­approximate 
1-2 routing problem. Lemma 3 With probability 1 O(l/nC), a packet that uses column j completes its second 
phase in time !! I (n,1) + i(j) + O(log n), where I n j whenj E {~+1...~$}  i(j) = (1) when j E{~ + 
lo..f} j j ~ when j E {~+ l...n} This follows from our path selection strategy and the definition of 
T (n, 1). Lemma 4 With probability at least 1-O(l/nc), every packet completes its third phase in time 
n + O(log n) + T(n, 1). We justify this lemma by recalling that a 2-1 routing problem is easily solved 
in a linear array, and noting that this is an O (log n)-approximate 1-2 routing problem. 1 The reduction 
above does not depend at all on the fact that the second phase is implemented in a linear array. Thus, 
the proof above suffices to prove the following theorem. Theorem 9 The algorithm above routes a per­mutation 
in the d-dimensional mesh in n + O(log n) + T (n, d 1) time with probability at least 1 -O(l/nC) with 
bu~ers of size O(log n), where T(n, d 1) is the time required to route an O(log n)-approximate 2-retation 
in a (d l)­dimensional mesh with probability 1-O(l/nC). For off-line routing, we have a stronger reduc­tion. 
Theorem 10 There is an ofl-line routing algo­rithm that takes time To(n, d 1) + n 1 steps and requires 
buflers of size qO(n, d 1)+ 2, where TO(n, d 1) is the time required to route a 2­relation off-line 
in a (d 1)-dimensional mesh us­ing buflers of size qO(n, d 1). 3.2 Applications Our most immediate 
applications depend on the following well-known lemma. Lemma 5 Any x-approximate 2-relation can be routed 
deterministically on a linear array in n + x steps. Proof Sketch: A simple farthest to go queueing strategy 
can be used to achieve this result. 0 This lemma when combined with theorem 10 yields theorem 1. When 
combined with theorem 9 we get the following result. Theorem 11 There is a randomized on-line al­gorithm 
that routes one permutation in a n x n mesh in 2n + O(log n) time using O(log n) size bu.ers, with probability 
1 O(l/nc). Note that a much simpler algorithm for routing a single permutation in a mesh is discussed 
in sec­tion 5. We continue in the next section by showing that we can route an approximate 2-relation 
in 2 dimensions in 2n+O(log n) time. When combined with theorem 9, this implies that we can route a permutation 
optimally in 3 dimensions.  4 Routing 2-relations and rout­ing in three dimensions In this section, 
we discuss on-line and off-line routing of two permutations in a 2-dimensional mesh. With the reduction 
of the previous section, this leads to optimal algorithms for routing in 3 dimensions. We proceed by 
describing the ran­domized on-line algorithm and sketching a proof of its correctness, and then we briefly 
describe the off-line algorithm. 4.1 On-line 2-relations We sketch a randomized algorithm for routing 
two permutations simultaneously in 2 dimensions in time 2n + O(log n). The algorithm is stated be­low, 
We will show that the result holds for routing O(log n)-approximate 2-relations as well. Theo­rem 9 together 
with this result implies that there is an on-line 3n+O(log n) time algorithm for rout­ing a permutation 
in an n x n x n mesh. We proceed by describing the algorithm for si­multaneously routing two permutations. 
. · Path Selection: Each packet randomly chooses with equal probability 1. a row-column-row path as in 
the previ­ous section, 2. or a column-row-column path in the analogous fashion.  Queueing Strategy: 
Route the packets using farthest to go in the dimension to resolve con­ tentions within permutations 
and using the phase number to resolve contentions between permutations. Theorem 12 With probability at 
least 1 0( l/nc), the above algorithm routes both permu­tations in time 2n + O (log n) time using queues 
of size O(log n). Proof Sketch: We must show that the two permutations do not interfere wit h each other 
in a fatal way. We begin with the following lemma about packets in their first phase. Lemma 6 No packet 
is delayed in its first phase as long as each node has a queue oj size at least O(log n) with probability 
at least 1 O(l/nC). Now we state and sketch a proof for the crucial lemma of this proof. This lemma 
bounds delivery times of second phase packets. Lemma 7 All packets that use row j in their sec­ond phase 
and use the edge, e, between nodes (i, j) and (i+ l,j)cross edge e by time max(~, i(j)+ i)+ O(log n) 
with probability 1 O(l/nC). (Recall that i(.) is defined in equation 1.) Proof Sketch for lemma: We define 
J2 to be the set of packets that use row j in their second phase. We define J2(t) to be the packet in 
J2 that have reached row j by time t.We define Z to be the packets in J2 that cross edge e. We only consider 
the most difficult case. That is, where j ~ {~ + 1... ~}, In this case, i(j) = j, and thus we must show 
that all the packets in Z have crossed e by time max(~, j + i) + O(log n). We state without proof the 
following claims. Claim 1 IJ2 J2(~)\ is an O(log n) approximate l-relations with probability 1 O(l/nC). 
The above claim states that the packets that have not reached the row after ~ steps form a permutation 
in the worst case. Claim 2 J2(j) = J2. This claim states that all the packets in J2 reach j by time j. 
This follows from lemma 6. Now we define X to be Z (1 J2(~), i.e. the pack­ets that use e and have reached 
j by time ~. And we define Y to be Z X, i.e., the rest of the packets that need to use e. To illustrate 
our argument, we wiIl assume a worst case situation. In the full paper, we will prove that the following 
conditions are indeed the worst case. We assume that i > ~. This implies that ]ZI < 2(n i) + O(log n) 
with high probability since Jz forms an O (log n) approximate 2-relation with high probability. We assume 
that IX I = IYI = n i + O(log n). We also assume that both X and Y enter row j in its first n i O(log 
n) nodes. Furthermore, we assume that all the nodes in X enter at time ~ and all the nodes in Y enter 
at time j. The packets in J2 Z do not interfere with the packets in Z as long as the buffers are large 
enough, since the packets in Z have farther to go in row j than the packets in J2 Z. This fact implies 
the following claim. Claim 3 If at time T, x packets of Z occupy x positions within distance d of any 
edge e in row j, then at least x packets of Z cross edge e by time !i! +d +x-x . Recall that at time 
~, 1X1 = n i packets of Z occupy the first n i O(log n) positions of j with high probability. Thus, 
by the claim above, at time ~ + i + O(log n) at least [XI packets cross edge e, Now we consider the case 
where the packets in Y were adjacent to packets in X. If this was the case, then at least \Y I packets 
would immediately follow the I-X I packets previously sent so the time for all the packets to cross e 
would be ~ + i + O(log n)+ IYI. Otherwise, from the claim the time would be j+ i+ IYI (n i O(log n)), 
since all the elements of Y occupy the first n i O(log n) positions of j at time j with high probability 
y. Now substituting ]Y] = n i + O(log n), we get that the time is bounded by ~ + O(log n) or by j + 
i + O(log n). Thus, the lemma holds for this case. 1 We derive two important properties from the lemma 
above; that the packets in J2 get to their third phase on time , and that the packets in J2 do not interfere 
with the packets that use j in their third phase (denoted by J3). The first property follows from the 
lemma and the fact that on time is j + n + O(logn). We proceed by arguing that the packets in J3 are 
routed to their final destinationin time 2n + O(log n). Claim 4 With probability 1 O(l/nc), J3 COn­sists 
of two separate O (log n) approximate ~-to-l relation in each half of the row, That is, there is an approximate 
2-to-l-relation in the first ~ nodes of j, and another one in the last ~ nodes of j. Furthermore, since 
the second phase is assumed to work correctly we can make statements about when various packets of J3 
appear, Claim 5 Any packet in J3 appearing at column 1, appears by time n + i(l) + O(log n) with high 
probability. Now we show that packets will reach their final destination by time 2n + O(log n). We consider 
a packet in J3 that enters j at col­umn 1 and is destined for (i, j). For the sake of brevity, we only 
consider the case where 1 E {~ + l...%} and i > j. This packet enters col­umn 1 by time n + 1+ O(log 
n) by lemma 7. By time max(~, j + 1) + O(log n), the second phase packets are out of the way. Thus, the 
only packets that can delay this packet are packets in J3 with higher priority. But if the packet has 
to travel d distance only n 1 d packets in J3 have higher priority in this direction. Thus, the packet 
arrives at time n+l+O(logn) +d+(n 1 d) = 2n + O(log n) with probability 1 O(l/nc). Thus, the theorem 
holds. This theorem along with theorem 9 of the pre­vious section imply the following theorem about routing 
in three dimensions. Theorem 13 There is an on-line randomized 3n + O(log n) time algorithm for routing 
a per­ mutation in an n x n x n mesh with probability 1-0(1/n ) with O(log n)-si.zed buflers. As we stated 
in the introduction, all our ran­domized results hold for constant size buffers with more complicated 
queueing strategies as in [8], See for example theorems 2 and 4. 4.2 Off-line 2-relation Routing For 
the off-line routing problem, as above, we send one permutation along row-column-row paths and the other 
along column-row-column paths. We select paths so that the second phase packets us­ing any row or column 
consists of two 1-2 rout­ings in the worst case. Furthermore, we ensure that one of the 1-2 routings 
will consist of pack­ets that travel at most ~ distance in their first phase. Thus, the second phase 
can be completed so that it will not interfere with the third phase packets as in the previous on-line 
algorithm. The path selection procedure uses matching in bipar­tite graphs to achieve the desired properties 
as in [1, 2]. This will suffice to prove theorem 3, which states that two permutations can be routed 
off­line in 2n steps in a n x n mesh using buffers of size eight. This result, when combined with the 
reduction in theorem 10, implies theorem 5, which states that a permutation can be routed off-line in 
3n 1 steps in a n x n x n mesh using buffers of size ten.  5 Simple Two-dimensional Rout ing In this 
section, we give simple optimal randomized algorithms for routing permutations in the mesh and torus. 
First, consider the following strategy for routing on the mesh: · Path Selection: A packet starting at 
(i, j) and destined for (i , j ) routes itself to (i, r) and then greedily to (i , j ) where r is picked 
uni­ formly over {1 : ll-il+[l-i l <n-1}. · @cueing Strategy When two packets con­tend for the same 
edge, the packet with the farthest to go will be sent across the edge. This algorithm has the property 
that no packet travels more than n 1 total distance in ei­ther dimension; furthermore, the packets flow 
continuously throughout the network and they use a uniform priority scheme. With probabil­ityy 1 O ( 
l/nc), the algorithm routes any per­mutation in time 2n + O (log n) with buffers of size O (log n) as 
was stated in theorem 6. Using a slightly more complicated queueing strategy (as in [8]) we have the 
following theorem. [2] D. Krizanc. A note on offline routing on mesh­connected processor arrays. Parallel 
Processing Letters, 1:65-69, 1991.  Theorem 14 There exists a randomized on-line algorithm that uses 
the above path selection strat­egy and routes any permutation on the n x n mesh in time 2n + O (log n) 
using constatnt size bu.ers, with probability 1 O(l/nc). The following analogous algorithm routes opti­mally 
on the torus: e Path Selection: Every packet randomly chooses with equal probability either a row­column-row 
path or a column-row-column path. A row-column-row packet starting at (i, j) and destined for (i , j 
) routes itself to (i, r) and then greedily to (i , j ) where r is picked uniformly over {1 : 11 il + 
11 i \ < ; 1}. . Queueing Strategy: When two packets con­tend for the same edge, the packet with the 
farthest to go will be sent across the edge. Theorem 15 The above strategy routes a single permutation 
in a n x n torus in n + O(log n) time using O (log n) sized buflers, with probability y 1 O(l/nc). Again, 
by using a more complicated queueing strategy the above algorithm may be modified to yield theorem 7. 
 Acknowledgments We would like to thank Leslie Valiant and Thana­sis Tsantilas for helpful discussions. 
Also, the first author thanks Michael Rabin for his constant sup­port and encouragement. References 
[1] F. Annexstein and M. Baumslag, A unified ap­proach to off-line permutation routing on parallel networks, 
In Symposium on Paraliel Algorithms and Architecture, pages 398 406. ACM, 1990. [3] M. Kunde. Routing 
and sorting on mesh con­ nected arrays. In Aegean Workshop on Computing: VLSI algorithms and arch~tectures. 
VoL319 of Lee­ture Notes in Computer Science, Springer Verlag, NY, pages 423-433, 1988. [4] M. Kunde. 
Balanced routing: Towards the dis­tance bound on grids. In Symposium on Parallel Algorithms and Architecture, 
pages 260-271, 1991. [5] T. Leighton. Average case analysis of greedy rout­ing algorithms on arrays. 
In Symposium on Para[lei Algorithms and Architecture, pages 2-10, 1990. [6] T. Leighton, F. Makedon, 
and I. Tollis. A 2n-2 step algorithm for routing in an n x n array with constant size queues. In Symposium 
on Parallel Algorithms and Architecture, pages 328-335, 1989. [7] S. Rajasekaran and R. Overholt. Constant 
queue routing on a mesh. In Proc. STAG S 91. Vol. 480 of Lecture Notes in Computer Sc~ence, Springer 
Verlag, NY, pages 444-455, 1991. [8] S. Rajasekaran and Th. Tsantilas. Optimal rout­ing algorithms for 
mesh-connected processor ar­rays. Algorithmic (to appear), 1991. Preliminary version in Proc. AWC)C 88, 
Lecture Notes in Com­puter Science, vol. 319, Springer-Verlag (1988), pp. 411-422. [9] L. G. Valiant. 
General purpose parallel architec­tures. In J. van Leeuwen, editor, Handbook of The­oretical Computer 
Science, pages 943 971. Else­vier Science Publishers, B. V., Amsterdam, The Netherlands, 1990. 
			