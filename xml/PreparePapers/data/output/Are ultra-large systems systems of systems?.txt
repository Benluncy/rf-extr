
 Are Ultra-Large Systems Systems of Systems? Ivica Crnkovic Mälardalen University, Mälardalen Real-time 
Research Centre Västerås, Sweden +46 73 960 71 73  ivica.crnkovic@mdh.se, www.idt.mdh.se/~icc ABSTRACT 
Ultra Large Systems are characterized by its complexity, size, diversity of concerns and missions. As 
complexity of systems grows and the demands on interoperability between them grow, the concerns of how 
to build, maintain and manage them becomes more important. It is however a question how this complexity 
can be managed, or how the complexity can be simplified. A second question is related to a question whether 
an ultra-large system is the same as ultra-large integration of systems, i.e. systems of systems? In 
this short position paper we exploit a hypothesis that ultra-large systems are either loosely integrated 
systems and in that case they should be treated as systems of systems, or tight­coupled systems and in 
that case they should have an layered architecture. As illustration, the paper shows some examples from 
Scandinavian industry that manage systems which are approaching the size of ultra-large systems. Categories 
and Subject Descriptors D.2 [SOFTWARE ENGINEERING] Software Architecture  General Terms Management, 
Design. Keywords System of Systems, Services, Layered architecture. 1. INTRODUCTION To illustrate large 
software-intensive systems (further in text referred to as ultra-large systems ULS) we show a few examples 
of such systems from Swedish industry. 1.1 Example 1. Paper mill Production of papers goes through continuous 
increase of efficiency and flexibility. While thirty years ago a typical plant would control in total 
a few hundred sensors and actuators, with a Permission to make digital or hard copies of all or part 
of this work for personal or classroom use is granted without fee provided that copies are not made or 
distributed for profit or commercial advantage and that copies bear this notice and the full citation 
on the first page. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires 
prior specific permission and/or a fee. ULSSIS 08, May 10 11, 2008, Leipzig, Germany. Copyright 2008 
ACM 978-1-60558-026-5/08/05...$5.00. shortest production cycle of several days and with a staff of several 
hundred or a thousand people, today a plant controls several hundred of thousands signals and actuators 
with a possibility to narrow down a production cycle to an hour, and all that with a few dozen of workers. 
Not only that this up-scaling (which corresponds to a continuous addition of 10-30 of signals per day 
during last 30 years) occurred, but in the same time significant changes in optimization of the technological 
and production process has been improved. Varity of products has dramatically increased. In eighties, 
the main concern of technologies, in addition to increased productivity, was the preservation of the 
environment new processes that significantly less pollute the environment have been introduced. In nineties 
and up today the main concerns were improvements in saving energies and optimization of the processes 
in relation to use of energy. Today the main development efforts are put in increasing flexibility and 
promptness to the market requirements, just-in­time orders and changing prices in the market and order 
magnitude. By this the scope of the production automation significantly increased from a pure control 
systems, up to global optimizations relating to technological and marketing reasons. The first type of 
changes (the technological process) is about scaling-up similar processes with repeating patterns in 
which the main challenges were related to a) achieving flexibility to easy continuously adding new signals 
in the process, and b) to ensure scalability - in keeping performance, real-time requirements, reliability 
and robustness. The second type of changes is related to a fast response to and interaction with external 
events (such as energy price or new orders) not directly integrated into the process and driven by external 
processes. In the first case we clearly identify one system (large or ultra large), in the second case 
we distinguish several systems in the play, or the entire system as a system of systems . What made these 
dramatic changes possible? The first reason is of course the increased capacity of hardware without 
this increase these changes would not be possible. However this is only a necessary condition, but not 
a sufficient one. The second principle important here is the stepwise increase of the abstraction. The 
objects and concerns of different levels are different; on the higher level, although as a result of 
integration of the previous level(s), objects and their properties are emerging they do not exist on 
the previous level. The architecture of a plant system is illustrated in Figure 1.  Figure 1. Topology 
of a paper mill control system The figure shows how the complexity is managed by an architectural solution: 
 Layard architecture - the system has four layers: (i) field busses, (ii) control real-time units with 
a control network, (iii) operator stations with a plant network, and (iv) optimization and information 
system layer. Further, a characteristic of the layered architecture is that the objects processed on 
each layer are on different abstraction level; While the lowest level process simple signals, the middle 
level manages objects of a higher abstraction level, the objects like pumps, valves, motors and similar. 
The highest level deals with technological processes and their optimization.  Achieved parallelism/concurrency 
and location transparency within a layer; A middleware is responsible for interoperability. Different 
field busses are integrated as components with a well defined interface. The same paradigm but on another 
abstraction level repeats in the upper layers; there is a middleware and plant components that can be 
integrated into the system.  The figure does not show communication over the Internet with services 
form the stock market for the energy and for paper orders. In this case it is clearly about different 
systems that interoperate in form of services. This integration doe not use layered architecture pattern, 
but client-server. 1.2 Example 2. Cooperative computing units The industrial robots are examples of 
relatively high complex systems that can perform different and complex functions. In a production factory 
such robots are usually used in a line in which the robots perform relatively independent tasks, but 
the entire line is defined by an overall process. In recent years a need for a cooperative work between 
the robots has been recognized; many functions can be performed significantly better in a coordination; 
for example while a robot holds and possibly move/rotate a sheet metal another robot performs an operation 
on the sheet. This strongly synchronized performance is implemented by a concurrent language and an underlying 
synchronization mechanism supported by the middleware and operating system. It can be worth to mention 
that in this case a common control system controls both robots, while synchronization of work of more 
robots with several controllers is still a challenge due to problems in synchronization. Specification 
of the entire process in the line is defined by a language that is similar to service-based languages 
and scripts in which services are orchestrated. Another example of a cooperative systems (not implemented 
but considered) is a cooperation of constriction equipment vehicular in a process of building (for example 
a road, or buildings, or similar). The idea is to optimize the complete process by optimal use of available 
resources, such as raw material, and synchronization of workflows. While the entire process can be seen 
as a result of an ultra-large system, in reality it is about a cooperative process of independent systems 
(so we can talk about systems of systems), similarly to ants colonies; On the individual level, the systems 
repeat a particular pattern or set of patters and have ability to choose particular patters depending 
on the external stimuli and internals state, while the entire logic is built in interoperations of the 
entities (systems).  2. Layered Systems or System of Systems The examples show clearly two patterns 
in building large and ultra-large systems. The first pattern is related to system with tightly integrated 
components. The layered architecture is the best means of hiding and encapsulating complexity and simplifying 
the system by focusing on functions and properties on a higher abstraction level. After all, nature shows 
the same model in physics and biology for example. The second pattern of ultra-large systems belongs 
to loosely­coupled systems. Such systems are indeed systems of systems where each system is a loosely 
coupled component. Such systems can be configured in a design phase, but it is equally common that they 
are integrated ad-hoc or at least that their configuration is dynamic. For a successful approach, service-based 
and component-based principles should be applied here; strictly and formally defined interfaces, and 
connections, connectors, protocols, and communication patters. Composition formalisms similar to composition 
of components and services should be applied in order to achieve predictability of these systems. Heterogeneity 
and complexity of interfaces are the largest challenges in building such systems. An interesting challenge 
and possible topic for a discussion could be to find whether any ultra-large system can be built either 
as layered-architecture system or as a system of systems with well specified services.  
			