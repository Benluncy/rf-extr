
 Combining Fairness with Throughput: Online Routing with Multiple Objectives Ashish Goel * Adam Meyerson 
t Serge Plotkin University of Southern California Stanford University Stanford University Abstract This 
paper presents online algorithms for routing and bandwidth allocation which simultaneously approximate 
fair and max-throughput solutions. In fact, the algo- rithms solve a more difficult problem: for any 
band- width b, the number of sessions that get bandwidth b in the online algorithm is not smaller than 
the number of sessions receiving vb offiine, where V is the compet- itive ratio. This problem is provably 
harder than the problem of maximizing throughput (e.g. [4]) or the problem of maximizing the bandwidth 
assigned to the most starved session (e.g. [3]). For the case where the algorithm assigns bandwidth- 
s, we present an O(log 2 n log 1+~ U/e)-competitive algo- rithm, for any e, where U is the minimum (over 
all choic- es of routes) of the 'maximum number of sessions routed along any single link. We also show 
an ~(log 1+~ U/e) lower bound in this model. For a more practically interesting model where the algorithm 
assigns routes and weights, and where these weights are used to drive the Weighted Fair Queuing policy 
in the routers, we present an O(log2nlogU) - competitive algorithm. We also show that the depen- dence 
on U is necessary by presenting an ~(~) lower bound. The upper and lower bounds presented in [4] for 
on- line maximization of throughput become invalid if we *Department of Computer Science, University 
of Southern Cali- fornia, Los Angeles CA 90089-0781. Emaih agoel@cs.usc.edu. t Department of Computer 
Science, Stanford University CA 94305. Emaih awm@cs.stanford.edu. $Supported by ARO Grants DAAG55-98-1-0170 
and ONR Grant N00014-98-1-0589. Department of Computer Science, Stanford Uni- versity CA 94305. Emaih 
plotkin@cs.stanford.edu. Permission to make digital or hard copies of all or par(of this work for personal 
or classroom use is granted without fee provided that copies are not made or distributed for profit or 
commercial advantage and that copies bear this notice and the thll citation on the first page. To copy 
otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission 
and/or a fee. STOC 2000 Portland Oregon USA Copyright ACM 2000 1-58113-184-4/00/5...$5.00 are allowed 
to assign weights. We prove an ~(log n) low- er bound for this model and present an O(log n log log n)- 
competitive online algorithm. We present preliminary simulation results which show that our algorithm 
is effective in attaining high through- put without significantly sacrificing fairness. 1 Introduction 
Simultaneous fairness and throughput In a best-effort communication network two natural goals are to 
divide the available resources (bandwidth) as fairly as possible and, at the same time, to maximize the 
total bandwidth allocated to the users (throughput). The accepted definition of fairness is max-rain 
fair- ness [8]. Roughly speaking, bandwidth allocation is considered max-min fair if "poor" sessions 
cannot in-crease their bandwidth by stealing from "richer" ses-sions that share links with them. Since 
this defini-tion assumes that the routes are given, the standard approach consists of two independent 
steps. The first step computes the routes, and the second step divides the bandwidth along these routes 
in a max-min fair way. The first step can be implemented using algorithms such as in [4, 3]. Several 
efficient distributed algorithms that implement the second step are known [1, 2, 5, 7]. Unfortunately, 
as long as the final step implements exact max-min fairness, it is impossible to approximate globally 
optimum total throughput. (Locally maximum throughput, i.e. maximum throughput without rerout- ing, can 
be approximated by distributed algorithms such as in [6]). On the other hand, by "averaging" fair and 
throughput-optimum solutions one can always exhibit bandwidth allocation that is within a factor of two 
of maximum throughput and where each session receives at least half of the bandwidth it would get in 
a fair so- lution. In this paper we address the problem of getting close to such allocation online. Since 
max-min fairness assumes that routes are giv- en, we need a more general fairness definition which will 
be equivalent to max-min fairness when the routes are already known. Kleinberg et al. [11] proposed the 
following definition of fairness in a variable-route sce- nario. Compute a bandwidth vector composed 
of the bandwidth allocated to connections, in increasing or-der. The ith coordinate is thus equal to 
the bandwidth of the connection receiving ith least bandwidth. Also define a prefix vector where the 
ith coordinate is equal to the sum of the bandwidths assigned to the i minimum sessions (i.e. the sum 
of the first i coordinates from the previously computed vector). Note that the first co-ordinate of the 
prefix vector represents the bandwidth given to the "most starved" connection while the last coordinate 
is equal to the total throughput. An alloca- tion with lexicographically maximum bandwidth vector is 
considered globally fair. It's not difficult to show that the allocation with the larger bandwidth vector 
also has the larger prefix vector. If routes are preassigned, the globally fair assignment of bandwidths 
is identical to the max-rain fair allocation [8]. Using the above definition of global fairness, we can 
restate our goal as follows: We need to design an online algorithm which assigns routes and bandwidths 
so as to guarantee that throughput is within polylogarithmic factor s . of optimal and each term of the 
bandwidth vec- tor is within polylogarithmic factors of the globally fair bandwidth vector. The alternative 
approach of requir- ing the minimum bandwidth assigned to approximate the fair minimum bandwidth is unsatisfactory; 
one can construct a case where the fair allocation is forced to give a small number of requests very 
small bandwidth but where most requests receive much more. For such a case, this definition will break 
down (almost every request could receive very small bandwidth, while the globally fair solution gives 
most requests much more). The natural thing to do might seem to be an aver- aging of approximate optimal 
bandwidth with approxi- mate global fairness. However, no previously known al- gorithms approximate global 
fairness online! All of our lower bounds will apply against approximating global fairness. In certain 
cases, there may be an alternate assign- ment of bandwidths which is more desirable than the average 
of optimal throughput and global fairness. Con- sider a path that consists of n unit-capacity edges. 
As- sume that there are n requests going along the line and, in addition, each link has ~ requests using 
that single link. Maximum throughput is n; global fairness assign- s each connection 1/(n + v/-n) bandwidth 
and achieves O(v/'n) throughput. One can assign 1/2 to n "short connections", one per link, and assign 
1/2(n + vrn) to all the other connections. Observe that this achieves a constant fraction of the optimum 
throughput while each connection in this assignment gets at least a con- stant fraction of its "fair 
bandwidth". Now consid- er an alternative assignment, where each short con-nection gets 1/(2v/-n) and 
each long one gets 1/(2n). This assignment increases the bandwidth allocation of a high percentage of 
the requests without sacrificing much throughput or significantly decreasing the band- width of the low-bandwidth 
requests. Intuitively, this allocation is "better" than both the globally fair and optimal throughput 
allocations! Our results The above example indicates that we need to modify our goal. Instead of trying 
to approximate the throughput and the globally fair bandwidth vector, we will simultaneously approximate 
all of the possible bandwidth vectors. More precisely, our goal is to design an algorithm that assigns 
routes and bandwidths such that its corresponding bandwidth vector is coordinate- wise at least a 1/7 
fraction of any possible bandwidth vector. We call 7 the competitive ratio of the algo- rithm. A 3,-competitive 
bandwidth allocation guaran- tees, for any b, that the number of connections which were assigned bandwidth 
_> b is not lower than the number of connections which were assigned bandwidth > 7b in any legal solution. 
It's fairly straightforward to show that our prefix vector is also coordinate-wise at least the same 
7 fraction of any possible prefix vec- tor. Thus a -),-competitive bandwidth allocation also achieves 
throughput which is within a 7 factor of opti- mum. While we present such an algorithm in Section 5, 
we concentrate on a slightly different model, which we believe to be much more appealing from the practical 
perspective. We assume that the algorithm assigns a weight to each connection and that the routers imple- 
ment a Weighted Fair Queuing (WFQ) [9, 13] scheme using these weights when forwarding the packets. In 
worst case terms this ensures that a connection will get at least the minimum, over all links that it 
uses, of BwJ ~-~j wj, where B is link bandwidth, wi is the weight for connection i, and the sum is over 
all the connections assigned to the link. We choose WFQ be- cause it is widely accepted as a standard 
fair scheduling paradigm in the networking community and is support- ed (in one form or another) by most 
modern routers and switches. It is important to note that our model is differ- ent from the model of 
Awerbuch et al.and Aspnes et al. [4, 3]; our model allows the assignment of variable weight or bandwidth 
to each request while the previous models assumed that requests had fixed, predetermined bandwidths. 
In particular, the logarithmic upper and lower bounds presented on throughput-competitiveness in [4] 
do not apply for our model. However, we present an f~(logn) lower bound on throughput-competitivity in 
our model (see Section 8.1). We also show an O(log n log log n) throughput-competitive upper bound (see 
Sec- tion 4). Our main result is an online algorithm which achieves O(log 2 n log U) coordinate-wise 
competitive ratio. For each coordinate, U is the reciprocal of the maximum value (over all solutions)of 
that coordinate. For the first coordinate in the bandwidth vector (for which U will be largest), U is 
equal to the minimum (over all solutions) of the maximum (over links) of the number of sessions routed 
along a link. We show that the de- pendence on U is necessary by presenting an f~(~) lower bound on prefix-competitivity 
even if we need on- ly approximate the globally fair prefix vector. In the case where bandwidth has to 
be assigned explicitly during the routing phase, we present an al-gorithm that achieves O(log 2 n log 
1+~ U/e) coordinate-wise competitivity (for any chosen e). We also show an f~(log 1+~ U/e) lower bound 
in this model. Related work Kleinberg et al. [11] addressed the prob- lem of obtaining prefix optimality 
for scheduling and for single source unsplittable flow problem in an offline setting. For the single 
source unsplittable flow problem, they produce a solution which is a coordinate-wise two approximation 
of the globally fair allocation. In con-trast, we study a more general problem in an online setting. 
We consider the multiple-source online case where the objective is coordinate-wise approximation of any 
bandwidth allocation (not just the fairest). The problem of fair bandwidth allocations for single source 
fractional flows was first studied by Megiddo [12]. The problem of online throughput maximization was 
considered in [4]. If one uses the algorithm in [3] where each connection is assumed to have unit bandwidth, 
it is possible to maximize the bandwidth allocated to the poorest session. It is interesting to note 
that, exper-imentally, the second approach achieves a very good approximation of global fairness. None 
of the above algorithms can be used to address the simultaneous ap- proximation of fairness and throughput, 
considered in this paper. Simulation Results Preliminary simulation results are presented in Section 
7. Instead of implementing the pro- posed algorithm directly, we have implemented a mod- ified version 
which attains the same competitive ratio up to a constant factor. By assigning bandwidth on half the 
capacity and allowing max-rain fairness to run on the other half, we can improve our approximation on 
the lowest-bandwidth requests while maintaining (with- in constants)our overall prefix-competitive ratio. 
This modified algorithm achieves results much better than worst case bounds and indicates that our algorithm 
is effective in achieving its goals: we get significantly larg- er total throughput without significantly 
deviating from optimum fairness. 2 Model We are given a directed (or undirected) graph with n nodes 
and m < n(n -1) edges. Requests arrive in an online fashion; each request specifies a source and sink 
node. When a request arrives, our algorithm must as-sign a route (path from source to sink) for the session, 
as well as a weight which will be used to determine the session bandwidth. All weights assigned by our 
al- gorithm will be between zero and one, although this requirement is not needed for our lower bounds. 
The fi- nal bandwidth given to each session will be determined according to Weighted Fair Queueing [9, 
13]. Our anal- ysis only requires that each session receive bandwidth at least equal to the minimum, 
over edges along its route, of the session weight divided by the total weight of all sessions using the 
edge. We assume that sessions, once set up, remain in the network forever. We also assume that the various 
re-quests have equal priority, and that all edges have equal total bandwidth. None of these three assumptions 
are necessary for our algorithm to work; slight modifica- tions will encompass the three scenarios described. 
We mention such modifications in Section 6. Definition 1 The bandwidth vector for an assignment of routes 
and bandwidths is composed of the assigned bandwidths in nondecreasing order. Definition 2 The globally 
fair solution is the assign- ment of routes and bandwidths which produces the lex- icographically largest 
bandwidth vector. There may be several globally fair solutions, each with an identical bandwidth vector. 
Observe that every globally fair solution is also max- min fair; moreover, if routes are preassigned, 
the max- min fair solution is unique and therefore globally fair. Definition 3 A solution is 7c coordinate-wise 
compet- itive against all solutions if, for every i, the ith coordi- nate in the bandwidth vector is 
at least 1/Vc times the maximum value, over all bandwidth vectors, of the ith coordinate. Definition 
4 A solution is "yp prefix competitive a-gainst global fairness if the sum of the first i coordi-nates 
of the bandwidth vector is at least 1/Vp times the sum of the first i coordinates in the globally fair 
optimal bandwidth vector, for every i. Our algorithm will guarantee coordinate-wise com- petitivity 
of O((log n) 2 log U) against every possible so- lution on the given graph and request sequence. We de- 
fine U to be minimum over all solutions of the maximum number of requests routed along any link. Equivalently, 
U is also equal to the reciprocal of the minimum band- width assigned in the globally fair optimal solution. 
Observe that any solution which is coordinate-wise competitive against all other solutions must also 
be pre- fix competitive against all other solutions. Since the to- tal throughput of a solution is equal 
to the final prefix, it follows that our algorithm is also O((logn) 2 log U) throughput competitive. 
Using the methods detailed in Section 4, we can prove an O((logn) 2 loglogn) bound on our algorithm's 
throughput-competitivity.  The GMP Algorithm The algorithm maintains a number of stages; virtual "copies" 
of the network. Each stage maintains loads on each edge, where A~ is equal to the number of requests 
which stage i has routed along paths which include edge i. Each stage can compute costs, c~ = 2~', - 
1, on the various edges. When a request comes in, the algorithm finds the minimum cost path from source 
to sink in all stages. The lowest-numbered stage which has a path of cost n -1 or less will route the 
request. If stage i is to route the request, then the new session will follow its minimum stage i cost 
path, and will be assigned weight 1/(i -1 + logn). The loads along this path in stage i will be increased 
by one; all other loads remain unchanged. The next request will again be considered by every stage. The 
algorithm used by each stage closely resembles the algorithm used in [4] running with capacity log n. 
Intuitively, this algorithm is running many copies of the Awerbuch, Azar, Plotkin algorithm. Request-s 
which can be routed without conflict with other re-quests will be routed in an early stage and receive 
high bandwidth, while requests which create contention for resources will tend to be rejected by the 
low-numbered stages and will end up with lower weights and less band- width. Single Stage Analysis We 
wish to compare the number of requests routed at a single stage to the number of requests which could 
be routed using capacity u~ on each edge e. Suppose request sequence R reaches the current stage (these 
are the requests which no lower stage routed). We rewrite the cost function in terms of u~ as ce = n 
:~°/Au~ -1 for a constant A (note that A = (logn)/u~ yields our stan- dard weight function). We route 
requests online, along their minimum cost route. If a request's minimum cost route has cost greater than 
n- 1 then the request will be rejected by the current stage and passed on to the next; otherwise the 
request is accepted and we increment the loads ()~) along its path. We compare the total number of requests 
we accept- ed (PA) to the maximum possible number of requests which could be accepted offiine, using 
capacity u~ on each edge (p*). The following lemmas are modification- s of lemmas appearing in [4]. They 
relate the value of the cost function to the number of sessiohs routed. Lemma 3.1 If Aue > logn, then 
~e Aueee(L + 1) _< 2pA log n Lemma 3.2 PA ~_ Ap*/(A + 21ogn) provided Aue >_ log n for all edges e. Lemma 
3.3 The load on edge e is )~e <_ Aue. For our algorithm, every stage has Aue = logn. Treating every edge 
as having bandwidth b, we derive the following theorem which relates the number of re- quests accepted 
in a stage (p) with the maximum num- ber of requests reaching that stage which could be rout- ed using 
capacity b on each edge (p~). Theorem 3.1 p >_ p;/(2b + 1) Proof of Competitivity We now analyze the 
entire algorithm and prove our O((log n) 2 log U) coordinate-wise competitivity against all other solutions. 
Define p~ to be the total num-ber of requests which could be routed using capacity b. The number of requests 
which the optimal assigns bandwidth 1/b or more must clearly be smaller than p~ since all such high-bandwidth 
requests could be routed using capacity b. Define ri to be the number of requests which the online algorithm 
routes in stages 1 through i.  We will first bound the number of requests (of those which could be 
routed with bandwidth b) remaining af- ter the first i stages. Lemma3.4 For any b > 1 and i >_ 1, ri 
> p~(1- ( 2b )i) . Proof: The proof will be by induction on i. For i -- 0, the lemma is obvious since 
both sides are zero. After the 673 first i stages, there are at least p; -ri requests remaining which 
could be routed using capacity b. Theorem 3.1 guarantees that at least 1/(2b + 1) of the remaining requests 
are routed in the next stage. 2b p~, ri+l _> ri + (p; -ri)/(Zb + 1) = ri(2-~--~) + --2b+ 1 Making use 
of the inductive hypothesis yields 2b 2b i+1 , 1 ri+l >-P;(2b + 1 (2-b--~) ) + Pb(2-~-~) = p;(1 - We 
will now prove that the algorithm routes at least as many requests in the first b + 2b log m stages as 
any algorithm could routes using capacity b on each edge. It will follow that the first b + 2blog m stages 
capture at least as many requests as any solution routes with bandwidth 1/b or more. Lemma 3.5 For any 
b >_ 1, rb+2blogm ~_ P~. Proofi We know that 21/2b --1 < 1/2b. It follows that (2b + 1)/2b > 21/2b and 
reciprocating both sides yields 2b/(2b + 1) _< (1/2) 1/2b. PIugging i = 2blogm into Lemma 3.4 and using 
this inequality yields r~blogm >P;(1-( 2b )zblogm) >p;(l_ :1) -2b+ 1 -m Since p~ requests can be routed 
using capacity b, it follows that p~ < rob, so after 2b log m stages we have r2blog m ~_~ fl; --b. Since 
each stage routes at least one session before forwarding anything to the next stage, it follows that 
b stages later, we will have rb+2blog m > P~ as desired. When a request is routed in stage i, we assign 
a weight to the request of 1/(i-1 + log m). It follows that all the requests in the first b + 2blogm 
stages receive weight at least 1/(3blogm). For any given b at least as many requests receive weight 1/(3blogm) 
or more in the online as receive bandwidth 1/b or more in the optimal. We need to bound the total weight 
on an edge in order to relate weight to bandwidth in the online algorithm. Lemma 3.6 The total weight 
on any edge is at most O((log n)log U) where U is the minimum over all solu- tions of the maximum number 
of requests routed along any edge. Proof: Since each stage uses capacity log n, no stage places more 
than log n requests on an edge. There ex- ists a solution which routes all the requests placing at most 
U on any edge; thus Pb is equal to the number of requests. After U + 2U log n stages, lemma 3.5 implies 
that the entire request sequence will be routed. So the total weight on edge e is bounded by: U+2Ulogn 
1 We <~ (log n) i _ 1 + log i=1 U+(2U+2) logn 1) log m--1  < (logn)(( i -(Z )) i=1 i=1  = O((log n) 
log u) We can now prove our coordinate-wise competitive ratio. Theorem 3.2 The GMP algorithm attains 
O((logn)2(log U)) coordinate-wise competitivity against all solutions. Proof: Define R to be the request 
sequence, with a total of ]RI requests. Suppose the ith coordinate of a solution is 1lb. It follows that 
this solution routed at least IRI -i + 1 requests using capacity b, and thus p~ _> tRI -i + 1. Using 
lemma 3.5, we know rb+2blogm > IRI -i + 1. Thus our online algorithm routed at least [R I - i + 1 requests 
with weight 1 / (b -1 + 2b log m) > 1 / (3b log m) or more. Thus at most i -1 requests received weight 
less than 1/(3b tog m). Using lemma 3.6, a session with weight w receives bandwidth at least w/k(log 
n log U) (where k is a con- stant independent of U and n). It follows that at most i-1 requests received 
less than 1/(3bk(logn)21ogU) bandwidth. So coordinate i in our online solution is at least 1/(3bk(logn) 
2 log U), for a coordinate-wise com-petitive ratio of "Yc = O((logn) 2 log U). 4 Throughput-Only Competitivity 
Previous algorithms for approximating throughput as-sumed that sessions request specific (known or unknown) 
bandwidth [4, 3]. We give an O((logn)loglogn) ap-proximation algorithm for throughput, in the model where 
weights are assigned to sessions as they arrive. The same algorithm achieves O((log n) log log n) com-petitivity 
if we must assign actual bandwidths up fron- t (rather than weights). Our GMP-THPT algorithm will run 
only the first stage of the GMP algorithm. If the stage finds a path of cost n -1 or less, we assign 
674 weight 1. Otherwise we assign weight 0. Alternative-ly, we can assign bandwidth 1/logn to the requests 
we give weight 1 and bandwidth 0 to the ones we give weight 0 (the analysis will remain the same). We 
will prove the existence of a near-optimal offline solution which assigns either zero or at least 1/logn 
bandwidth to each request and places at most 1 total unit of band- width on any link. This offline solution's 
throughput is within constant factors of the best possible through- put using arbitrary bandwidths totaling 
at most one unit of bandwidth per link! In other words, using smal- l nonzero bandwidths cannot help 
the throughput by much. We will then show that our algorithm approxi- mates the near-optimal to within 
O((log n)(log log n)), from which it follows that our algorithm approximates the true optimal throughput 
to within a constant of the same bound. Theorem 4.1 There exists an assignment of bandwidth- s and routes 
in which every request receives either ze- ro or at least 1/logn bandwidth, such that the total throughput 
is within a factor of 32 of the optimal through- put. Proof: Consider two possible assignments of routes 
and bandwidths. Assignment one gives bandwidth equal to the optimal bandwidth to every request which 
the op- timal gave 1/logn or more. All other requests receive bandwidth zero, and all requests use the 
same routes as in the optimal. Assignment one must be legal, since the optimal assignment is legal and 
all requests receive at most the same bandwidth along the same route as in the optimal. Assignment one 
attains throughput Pl. Assignment two gives bandwidth equal to the opti- mal bandwidth to every request 
which the optimal gave less than 1/log n. All other requests receive bandwidth zero, and all requests 
use the same routes as in the opti- mal. Assignment two is legal, since each request receives at most 
the same bandwidth, along the same route, as in the optimal. Assignment two attains throughput P2. The 
optimal throughput is given by p* = Pl + P2. One of the two assignments must therefore attain at least 
half the optimal throughput. If assignment one at- tains half the optimal throughput we are done, since 
as- signment one gives each request either zero bandwidth or at least 1/logn as required. Otherwise p2 
> (1/2)p*. We perform a randomized rounding on the second solution. Let c~ > 1 be a number whose value 
we will specify later. Each request in this randomized assign- ment will receive bandwidth 1/logn with 
probability (1/a)blogn where b is the bandwidth assigned to the request in assignment two. Otherwise, 
the request gets bandwidth zero. If the total bandwidth along any edge is more than 1 we assign zero 
bandwidth to all connec- tions which use that edge. We thus obtain a feasible solution. The randomized 
throughput is p~. Let Xb be the bandwidth assigned to a connection in the rounded solution, where b < 
1/logn is the bandwidth assigned to the connection by the second component of the op- timal solution. 
b Lemma 4.1 E[Xb] > 7Sa" Proof: Xb = 0 if either the connection did not get rounded up to 1/logn, or 
if it got rounded up but some edge along the path of this connection exceeded its capacity. The probability 
of the first event is exact- ly 1 - (1/a)blogn. Since each connection traverses at most n edges, the 
probability of the second event is at most n Z. (1/a)blogn, where Z is the probability of any edge exceeding 
1 - 1/logn. Assume for simplicity that log n is integral. Then Z is the probability that some edge either 
exceeds its capacity, or is packed to capacity. The expected number of connections on an edge is at most 
# = log n/a. Also, the edge can ac-commodate log n connections. Therefore, for an edge to exceed its 
capacity, the number of connections which are "ON" must be more than c~ times the mean. We now apply 
Chernoff bounds to obtain ( ea-1 )log n/c~ It is easy to see that Z < 1/(2n) for a = 8 and for large 
enough n. Therefore, P[Xb = 0] < 1 -lblogn i.e. E[Xb] > Summing over all connections, we get E[p~] >_ 
p2/(2a) It follows that there exists a solution which (without ex- ceeding total bandwidth one on any 
edge) has through- put at least p*/4a while assigning every request band- width either zero or at least 
1/logn. Theorem 4.2 Our algorithm obtains throughuput with- in 1/O((log n) log U) of the throughput of 
any other "op- timal" solution, where U is the reciprocal of the mini- mum nonzero bandwidth assigned 
to any request by the optimal. Proof: Suppose our algorithm routes r requests and obtains throughput 
p. We define b* to be the total number of requests which the optimal routed with band- width between 
1/i and 1/(i + 1). We define r~' to be the maximum number of requests which could be routed without exceeding 
i ÷ 1 requests per link. We will now relate the number of requests which the optimal routes at various 
bandwidths to the maxi- mum number of requests which can be routed without exceeding capacity i + 1. 
All the requests which the optimal assigns band-width 1/i or more could be routed without exceeding 675 
 i requests per link; the optimal has to do this so as to not exceed one unit of throughput on any link. 
It fol- i . lows that r* > ~j=l bj. From this we can derive the following equation: U-1 1 1 U-1U-a 1 
U-I h* h* 1 )b; = S~-'(~---J-~J) E(i i+l )r* -> E E( i i+1 j__~'j U" i=1 j=l i=j The total throughput 
of the optimal is at most p* = V , ~-~j=l(bj/3). It follows that U-1 r_~+ E(I_)I r*>p* U z-i+1-/ - i=1 
 Theorem 3.1 indicates that r >_ r*/(2i + 1) and therefore r* <_ r(2i + 2). Using this in the equation 
above yields the following: (2U-{-2)r.4_~'~U-1 ~ __ U P* < v --~i=1 =--2r+Ei=l ~ =O(rl°gU) Since the 
throughput of the online is p > (r/log n), it follows that O(log n log U)p > p*. We have shown that there 
is a near-optimum (within constant factors) solution with minimum nonzero band- width U > 1/logn. We 
have also shown that our algo- rithm approximates the throughput of any other solu- tion to O(log n log 
U). Combining these theorems will give the result we want. Theorem 4.3 Our algorithm obtains throughput 
with- in 1/O((log n) tog log n) of the best possible throughput. 5 Assigning Bandwidth Directly We consider 
a model where our algorithm must assign routes and bandwidths to each request (rather than as- signing 
routes and weights). We modify our approxima- tion algorithm to obtain competitive ratio O((logn) 2. 
(log U)l+~/e) in this model, where e is a new parame- ter for the algorithm. We also present a lower 
bound of 12((log U)l+~/e), which suggests that the increase in competitive ratio was a necessary one. 
The algorithm is identical to the one given in sec-tion 3, except that requests routed in stage i are 
as-signed bandwidth e/((i - 1 +log m) (log n) (log (i + 1)) 1 We ) instead of being assigned a weight. 
Only the assignment of bandwidths has changed, so lemma 3.5 still holds. Therfore, for any given b, at 
least as many requests receive bandwidth ((3b log m) (log n) (log(b + 1)) l+e) as received bandwidth 
1/b in the optimal. Provided we can show that our algorithm never overflows any edges, it will follow 
that we are O ((log n) 2 (log U) l+e/e) competive, as desired. Theorem 5.1 The bandwidth-assigning algorithm 
does- n't overflow any edges. Proof." Stage i places at most logn sessions on any edge. Thus the total 
bandwidth placed on an edge by stage i cannot exceed el((/-1 + log m)(log(i + 1))x+~). The total number 
of stages will not exceed U+2U log m, so the total bandwidth on any edge is at most U+2U log m E e/((i 
+ log m)(log(i + 1)) 1+~) i=1 U+2U log rn < e E 1/i(log(i + 1)) 1+'. i=1 As U goes to infinity, the 
summation is bounded by l/e, a fact which can be seen by using the integral as an upper bound. It follows 
that the total bandwidth is at most 1 and our algorithm does not overflow any edges. We present a lower 
bound suggesting that the com- petitive ratio when bandwidths are assigned must de-pend superlinearly 
on the logarithm of U. Theorem 5.2 Any deterministic online algorithm which assigns bandwidths directly 
has competitive ratio w(log U) Proof: Consider a network composed of a single edge. Suppose our algorithm 
achieves a competitive ratio of ~/(U), expressed as a function of U. Requests arrive on- line, each across 
the single edge. After i requests have arrived, the globally fair solution would give every re- quest 
bandwidth 1/i. Thus the first prefix is l/i, so our first prefix must be 1/i~/(i). It follows that every 
request received bandwidth at least 1/i'y(i). In particu- lar, request i receives bandwidth 1/i~/(i) 
or more. The total bandwidth of all requests cannot exceed one. It follows that i=U 1 E i~(i) <- 1 i=1 
 We can lower bound this sum with an integral, so it follows that the integral of 1/i'y(i) as i goes 
from 1 to infinity is at most 1. If "~(i) = O(logi), the integral would be infinite. It follows that 
"y -- w(log U). On the other hand, ~/(i) = (logi)l+e/e will converge to one as U goes to infinity, for 
any e > 0. 6 Further Extensions The algorithm in [4] also applies when requests have variable profit 
and when sessions have given start and finish times (instead of remaining forever). It should be straightforward 
to extend our algorithm (by varying the profit and/or time-expanding the network) to achieve competitive 
ratio of O((log #)2 (log U)) where/z is the product of the number of nodes in the graph, maximum to minimum 
request profit ratio, and maximum time duration of a request (assuming all time durations are integer). 
In this case, U is the maximum number of active sessions along any edge at any time unit for the globally 
fair solution. The proofs for this follow directly from [4]. 7 Simulation Results In order to make our 
algorithm practical, we need to modify it slightly. Experimentally, the log n factors in the competitive 
ratio seem to disappear. This was not unexpected, since [10] showed that exponential algo- rithms attain 
very tight approximations for throughput when the traffic is Poisson in nature. However, we es- sentially 
sacrifice a log U factor on the least-bandwidth requests. We avoid this problem by assigning half the 
bandwidth directly to requests and splitting the other half according to max-min fairness. Our algorithm 
will assign a route and bandwidth to each request; we di- vide all bandwidths by two to ensure at least 
half the bandwidth remains free. Free bandwidth is divided at the end in a max-min fair fashion. We also 
modified our algorithm to reduce the num- ber of stages. Instead of using O(Ulogn) stages each with capacity 
log n, we can use O(logUlogn) stages and increase the capacity by a factor of two for each stage. Weights 
are proportional to the total capacity of the stage. This modification seems not to effect our performance 
from a practical standpoint (theoretically we can show that we lose at most a constant factor). However, 
the reduction in the number of stages speeds up the running time significantly. Our sample graph is a 
pair of parallel lines, each sixty-four nodes long. Two kinds of requests arrive on- line, "long" requests 
which specify one of the two lines (75% the top line, 25% on the bottom line), and "short" requests which 
which connect two randomly chosen n- odes and may be satisfied along either line. We ran five thousand 
requests, with 20% of them being long and 80% short. This essentially represents a network con- nected 
by two ethernet lines (with only a single line, there are no routing decisions to be made and max-min 
fairness is globally fair). 50 45 ~ 4o as ao ,a 25   ~ 20 U 10 * 5 0 1 2 3 4 5 6 7 8 9 10 Sessions 
 Figure 1: Comparing optimum fairness to combined fairness/throughput algorithm Figure 7 shows a comparison 
of our modified al- gorithm to an algorithm which routes over a random shortest path and to a modified 
AAFPW algorithm [3]. Our experimental results show that the latter algorithm achieves close to global 
fairness. We graph the average bandwidth of requests in every decile. Note that the leftmost point corresponds 
to the minimum bandwidth assigned to a connection, while the rightmost point cor- responds to average 
bandwidth per connection, i.e. to- tal throughput divided by the number of connections. Observe that 
our total throughput is significantly more than the other algorithms while our minimum assigned bandwidth 
does not suffer too much. 8 Lower Bounds We present lower bounds for online approximation of the globally 
fair prefix. These two bounds suggest log- arithmic dependence on both n, the number of nodes in the 
graph, and U, the maximum number of request- s routed by the globally fair solution along any edge. Both 
bounds will use directed graphs. 8.1 Dependence on the number of nodes The lower bound given in [4] does 
not apply directly to our weighted model. We present a new f/(logn) lower bound for deterministic online 
throughput approxima- tion. Theorem 8.1 There is an fl(logn) lower bound on the 677 competitive ratio 
of deterministic online throughput to globally fair throughput. Proof: The graph consists of a line of 
length n directed from node 1 towards node n with additional source and sink nodes. The first request 
goes either from node 1 to node n/2 or from node (n/2) + 1 to node n. In other words, it uses either 
the left or right half of the line. We introduce a source node connected to node 1 and (n/2) + 1 and 
a sink node which can be reached from nodes n/2 and n for this. The online uses either the left half 
of the line or the right half (or both). Supposing the online uses the left half, the next source will 
connect to nodes 1 and (n/4) + 1 and the sink will be reachable from n/4 and n/2. Again the online algorithm 
uses the right or left half of the half of the line it's already used. Continuing this process, we end 
up with logn requests all of which the online overlapped on a single edge. The online throughput cannot 
exceed 1 with this edge as a bottleneck, regardless of the assignment of weights. By choosing the opposite 
half of the line at each step, the optimal can route all requests without any overlap and give them all 
throughput 1. We need to introduce enough source and sink nodes to allow this process regardless of the 
online choices. This means one source at stage one, two at stage two, four at stage three, and so on. 
The total number of sources will be at most 2n for a total of 5n = O(n) nodes. This completes the proof 
that the online throughput is Q(logn) less than the optimal. Theorem 8.2 There is an f~(logn) lower bound 
on the competitive ratio of deterministic online throughput to optimal throughput.  8.2 Fairness Depends 
on the Maximum Requests per Link We prove that any online algorithm which obtains prefix competitivity 
against the globally fair optimal better than ~(n) will have competitive ratio dependent on the maximum 
number of requests which the optimal places along any edge (U). The proof of the following theorem is 
deferred to Appendix A. Theorem 8.3 The prefix-competitivity of a determin- istic online algorithm against 
the globally fair solution is lower-bounded by ~t(min(n, love-G)). 8.3 Unit Weight Lower Bounds We consider 
the model where the algorithm can only assign routes; bandwidths are determined by max-min fairness. 
We prove that we can approximate neither optimal throughput nor global fairness to better than O(n) in 
this model; this is the reason for our introduc- tion of weights. We omit the proofs of Theorems 8.4 
and 8.5 from this version of our paper. Theorem 8.4 As long as max-min fairness determines bandwidths, 
deterministic online throughput competitiv- ity is bounded by 12(n). Theorem 8.5 There is an f~(n) lower 
bound on prefix- competitivity for deterministic online algorithms against global fairness as long as 
max-min fairness determines the bandwidths.  References [1] Y. Afek, Y. Mansour, and Z. Ostfeld. Convergence 
complexity of optimistic rate based flow control al- gorithms. Proceedings of the 28th A CM Symposium 
on Theory of Computing, pages 89-98, 1996. [2] Y. Afek, Y. Mansour, and Z. Ostfeld. Phantom: A simple 
and effective flow control scheme. ACM SIGCOMM, pages 169-182, 1996. [3] J. Aspnes, Y. Azar, A. Fiat, 
S. Plotkin, and O. Waarts. On-line load balancing with appli-cations to machine scheduling and virtual 
circuit routing. 25th A CM Symposium on Theory of Com- puting, pages 623-31, 1993. [4] B. Awerbuch, Y. 
Azar, and S. Plotkin. Throughput competitive online routing. 34th IEEE symposium on Foundations of Computer 
Science, pages 32-40, 1993. [5] B. Awerbuch and Y. Shavitt. Converging to ap- proximated max-min flow 
fairness in logarithmic time. Proceedings of the 17th IEEE Infocom con-ference, pages 1350-57, 1998. 
[6] Y. Bartal, J. Byers, and D. Raz. Global optimiza- tion using local information with applications 
to flow control. 38th Annual Symposium on Founda- tions of Computer Science, pages 303-312, 1997. [7] 
Y. Bartal, M. Farach-Colton, M. Andrews, and L. Zhang. Fast fair and frugal bandwidth allo-cation in 
atm networks. Proceedings of the lOth Annual ACM-SIAM Symposium on Discrete Algo- rithms, pages 92-101, 
1999. [8] D. Bertsekas and R. Gallager. Data Networks. Prentice-Hall, 1992. [9] A. Demers, S. Keshav, 
and S. Shenker. Analysis and simulation of a fair queueing algorithm. Inter-networking: Research and 
Experience, 1(1):3-26, 1990. [10] A. Kamath, O. Palmon, and S. Plotkin. Routing and admission control 
in general topology networks with poisson arrivals. 7th A CM-SIAM Symposium on Discrete Algorithms, pages 
269-278, 1996. [11] J. Kleinberg, Y. Rabani, and E. Tardos. Fairness in routing and load balancing. Proceedings 
of the 35th Annual Symposium on Foundations of Computer Science, 1999. [12] N. Megiddo. Optimal flows 
in networks with sources and sinks. Math Programming, 1974. [13] A. K. Parekh and R. G. Gallager. A general-ized 
processor sharing approach to flow control in integrated services networks -the single node case. IEEE/ACM 
Transactions on Networking, 1(3):344-357, June 1993. A Proof of Theorem 8.3 We will first construct 
the graph. The graph contains n + 1 nodes labelled ao through as along a line, with edges from ai to 
ai+l for each i. In addition, we have another line of n + 1 nodes labelled b0 through bn with edges from 
bi to bi+l for each i. The two lines inter- sect at a0 = b0. We have n additional source nodes So through 
sn-1 with edges from si to ai and from si to bi. We have n additional sink nodes tl through tn with edges 
from ai to ti and bi to ti. The total number of nodes is 4n + 1 and the total number of edges is 6n. 
The request sequence begins with n "short" requests. Short request i will be from si-1 to ti. The graph 
only permits two possible routings for short request i, either (8i-1, ai-1, ai, ti ) intersecting line 
a, or ( si-1, bi-1, bi , ti ) intersecting line b. We assume without loss of generali- ty that the online 
algorithm routes at least half of these requests intersecting line a. Define ~ to be the max-imum weight 
assigned to any short request which the online routed intersecting line a. The request sequence continues 
with U "long" requests. Each long request is from a0 to an. The graph permits only a single possi- ble 
routing for each long request. Suppose the online algorithm assigns weight wj to the jth long request. 
Lemma A.1 wj >_ t~/(j~/p) Proof: After the first j long requests, the optimal will give the j long requests 
each bandwidth 1/j and the n short requests bandwidth 1 along the b-intersecting route. It follows that 
the first prefix for the optimal will be p~ = (l/j). The first prefix for the online must therefore be 
pl >_ (1/j~/p). It follows that every on- line request receives bandwidth at least (1/j~'p). There exists 
a short request which intersects line a and has weight t~. The edge with this request will be a bottle- 
neck edge. Long request j receives bandwidth at most wj divided by the total weight of the bottleneck 
edge, no more than wj/~. It follows that wj/t~ >_ (1/jTp) and therefore wj > t~/(j-yp) as desired. A 
total of U + n requests have been made. Consider the prefix consisting of the U + (n/2) requests receiving 
least bandwidth. The optimal assigns the long request- s bandwidth 1/U and the short requests bandwidth 
1 along the b-intersecting route. The U + (n/2) prefix in- cludes all the long requests and half the 
short requests, and the optimal obtains Pb+ n 2 ---- (n/2) + 1 > (n/2). (/) The online algorithm gives 
bandwidth 1 to the short requests which intersect line b, but there are at most (n/2) of those and none 
of them will be included in the prefix. Prefix U + (n/2) will be at most the total bandwidth of long 
requests plus the bandwidth of short requests which were routed intersecting line a. The long requests 
cannot exceed total bandwidth 1. Each short request gets weight at most ~. But the total weight on every 
edge of line a is at least ~ wj >_ (~ log U)/~/p. So each short request gets bandwidth at most (TP/log 
U). Since there are at most n short requests intersecting line a, it follows that the online prefix is 
PU+(n/2) <_ 1 + (n~p/log U). In order to guarantee our prefix-competitive ratio of 7P, we need to have 
"~PPU+(n/2) > P* -u+(n/2)" If (nTp)/(logU) _< 1, then it follows that the on-line prefix is at most 2 
compared to the optimal prefix of n/2, and this implies that 7P _> (n/4). Otherwise, the online profit 
is at most (2nTp)/(log U) from which it follows that 2n~,~/logU > (n/2). Solving this in- equality for 
7P, it follows that ")'p ~ (1/2)(logU) 1/2. Combining the two cases yields 7P >- rain(n~4, (1/2)~) = 
f~(min(n, lo~))  
			