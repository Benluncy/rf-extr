
 Distributed Exploratorium for High Performance Computational Techniques Sridhar V. Iyer, Alan Beck, 
Umberto Ravaioli, and Jeff Terstriep Beckman Institute and National Center for Supercomputing Applications 
University of Illinois at Urbana-Champaign. Abstract The exploratorium described here consists of hyper­linked 
tutorials and quizzes on high performance com­putational concepts and computational modules imple­mented 
on different computer systems: desktop work­stations, vector and parallel supercomputers. The ex­ploratorium 
provides a highly interactive environment in which students can experiment with computational modules 
and visually compare algorithms, numerical techniques, performance and implementation related issues. 
Such a hands-on simulation and experimen­tation based learning will enable students io gain a deeper 
understanding of advanced concepts. The world wide web based exploratorium fosters the easy devel­opment 
of instructional material from research sofl­ ware. INTRODUCTION Traditionally, students in science and 
engineering disciplines are exposed to high performance techniques through courses that require considerable 
program­ming exercises. Some universities offer a sequence of courses, each concentrating on one particular 
as­pect of supercomputing, i.e., vector processing, paral­ lel processing, distributed computing, etc. 
In some ad­ vanced courses, the students may be exposed to three or four different supercomputers, i.e., 
Cray, Convex, CM-5, etc., in a sequential manner during the dura­ tion of the course. Each high performance 
computer system incorporates its own extensions to standard languages like C or Fortran. In addition 
to the lan­ guage extensions, the programming environment, es­ pecially the compiler options, debuggers, 
etc., is also different. Considerable effort is required to learn and master the intricacies of each 
programming environ­ ment and the numerical technique. Students are usu­ally busy trying to finish a 
programming exercise on a particular system and do not always have the op­portunity to experiment with 
the code they have just implemented or compare the solutions to the same problem implemented on different 
computer systems. While the programming exercises are intended to fos­ter experimentation, in reality 
the students do not have the time to experiment. These classes utilize research oriented supercomputers 
and students typi­cally lose their access to these computers at the end of the course or semester. To 
make effective use of the limited coursework oriented access to supercomputers, we have developed a alternate 
approach: provide the students with computational modules and hand-out exercises that encourage students 
to explore the be­ havior of different numerical techniques or computer systems. The primary aim is to 
relieve the students of programming exercises and encourage them to con­ centrate on understanding computational 
techniques through on-line experimentation. Simulation based learning has long been recognized as a superior 
in­ structional methodology [1-3]. Algorithm animation packages [4, 5], and illustrating compliers [6] 
are some examples of systems currently in use that foster ex­ perimentation based learning. The system 
described here provides a very interactive and distributed envi­ ronment with hypertext capabilities. 
The above men­ tioned packages can also be incorporated within the framework of the exploratorium described 
here. One of the issues is whether to develop the com­ putational modules from scratch, or to utilize 
exist­ ing research code. In some cases the only choice is start with the research code because the concepts 
in­ volved may not be widely understood. The latest computational techniques are normally not available 
for instruction, because of the considerable effort that would be necessary to prepare research code 
for inex­ 1063-9535/94 $4.00 @ 1994 IEEE perienced users. If a method for quickly developing some type 
of instructional material was readily avail­able, then a transfer of software from research to ed­ucation 
would be much more likely. The World Wide Web (WWW) has become widely used in both indus­try and academia. 
Many research groups have started their own web servers. Our WWW based approach can easily be adapted 
by interested research groups for their own use. The proposed approach is multi­platform since Mosaic 
is widely available. The goal of our effort is to enable the students to gain a deep understanding of 
how the choice of a particular algorithm or computer system can affect the final solution. The students 
can visually analyze how solutions evolve during the computation and thus compare and contrast the behavior 
of different tech­niques and computational methodologies. Such exper­iments involve just supplying input 
parameters, leav­ing plenty of time for the students to (visually) analyze the dynamics of the solution 
technique and the final results. The knowledge gained through such compu­tational experiments will enable 
them to evaluate the suitability of a particular numerical technique or a par­ticular computational system 
for a given problem. The distributed exploratorium, based on the popu­lar Mosaic package developed at 
the National Center for Supercomputing Applications at the University of Illinois is described in detail 
in section II. A proto­ type system incorporating different modules for the solution of partial differential 
equations is described in section III. Problems that require extensive compu­tations are handled through 
the use of a digital library where interesting problems and solutions are precom­puted and stored. This 
avoids repetitive computation of the same solution. Such a digital library is described in section IV. 
Conclusions based on our development experience and comments on intended use are given in section V. 
 DISTRIBUTED EXPLORATORIUM  Mosaic is based on the world wide web, a dis­tributed hypertext basecl information 
system devel­oped at CERN [7]. With Mosaic, users can browse networks, retrieve and exchange information, 
and con­duct asynchronous collaborative work sessions. Mo­saic has become an extremely popular retrieval 
engine for information on the Internet. The incorporation of an exploratoriurn within the Mosaic framework 
en­sures widespread accessibility y of the course material. Mosaic is available on UNIX, Macintosh and 
Windows platforms. The course material, in the form of tu­torials is incorporated using standard HTML 
docu­ments. While HTML offers limited support for equa­tions?], we have incorporated equations as images. 
The HTML documents contain hyper links (across the network) to other documents and simulation front­ends. 
The general architecture of the distributed ex­ploratorium is shown in Fig 1. While Mosaic is commonly 
used as an information retrieval engine, the recently incorporated Forms fa­cility in Mosaic offers a 
very attractive interactive and graphical front-end for numerical programs. The Forms facility is like 
a conventional Graphical User Interface with a very significant difference: the user interface is detached 
from rest of the program. The user supplied inputs from the Form front end can be sent to programs on 
any node in the Internet through the Common Gateway Interface (CGI). Special rou­tines are required to 
parse the input values sent by the Form utility through the CGI. A schematic represen­tation of the simulation 
framework, and the message passing paradigm is illustrated in Fig 2. For each high performance cornputationa.1 
topic, a list of techniques and algorithms that a senior/first year graduate student should be exposed 
to is evalu­ated in consultation with experts in the field. When­ever feasible, high-performance computational 
mod­ules are also gathered from these experts. The main aim is to collect a repository of modules illustrating 
different numerical techniques/algorithms or solutions in one area. These modules are then implemented 
on different computer systems, i.e., generic or worksta­tion module, vectorized module, parallelized 
module, etc. A comprehensive tutorial is developed on the so­lution techniques are incorporated into 
HTML docu­ments (using Mosaic as the front-end). The instructional strategy used in the development of 
the exploratorium is illustrated in Fig 3. At the end of the tutorial on a particular numerical topic, 
the students are required to take a short quiz. The aim of this quiz is to ensure that the student has 
a grasp of the fundamental concepts before proceeding to the simulation based experimentation. At the 
click of a button, the student can start the execution of complex modules on multiple supercomputers. 
With­out sufficient knowledge about the numerical tech­nique, a student can conduct frivolous experiments 
and waste large amounts of CPU time. Only those students meeting a pre-determined threshold (on the preliminary 
quiz) are allowed access to the on-line ex­perimentation laboratory, After the simulation based 118 
experimentation, students go through a more compre­hensive quiz/testing to ensure that they have learned 
all of the important concepts. In a simulation based learning environment, the students can easily miss 
sev­eral concepts. The comprehensive quiz will incorpo­rate questions from all of the concepts the student 
should know. Work is underway to incorporate mod­ules that will analyze quiz responses and guide the 
students to the appropriate segments in the tutorial. The issue of security is one that is often raised 
when making research codes publically available. Mo­saic provides several ways for providing security. 
The first is to make people type in a password when they try to run one of the computational modules. 
This has the advantage of letting people look at what is available, but not let them run anything. The 
second method is to limit who can access the server and from where. The software which is used to implement 
the server(NCSA s HTTPD) allows you a variety of way of specifing who can access the server. First you 
can specify that anyone from a certain machine can access the server. Second you can specify that certain 
users can access the server for any machine. Various combi­nations of lhese two methods are possible. 
So there is strong support for making the computational modules secure. PROTOTYPE DEMONSTRATION A prototype 
instructional system for hands-on learning of numerical solution techniques for partial differential 
equations has been developed to demon­strate the the functionalities and capabilities of the simulation 
oriented learning environment. The bulk of the course material is incorporated in the form of tutorials. 
One of the authors (U .R) has taught sev­eral courses on numerical techniques at both under­graduate 
and graduate levels. The tutorials were de­veloped based on notes prepared for these courses [8] and 
standard text books [9, 10]. The solution tech­nique, i.e., the algorithm, reliability and speed factors 
are discussed in depth in the tutorial. Currently only solvers for the PDE are implemented. There exist 
Jacobi, Gauss-Seidel, Alternating-Direction-Implicit and Successive-Over-Relaxtions methods Following 
a short preliminary quiz, the students are provided with a hands-on simulation environment to experi­ 
ment with (and learn through such experimentation) the numerical concepts they have just been exposed 
to. The simulation environment consists of a Form front end with pre-defined widgets for inputing sev­ 
eral parameters for the evaluation of the solution. The students can start with the default values and 
proceed further by changing some of these values. The total number of variables in numerical techniques 
is lim­ited. The simulation based instructional system thus can incorporate all the variables an user 
is likely to encounter in real-life problems. The input parameters are used to drive the simulator. The 
results are visual­ized using the LUG package and returned as a GIF file and then included into a HTML 
document. This doc­ument is returned to Mosaic and includes a snapshot of the results, a link to the 
full image, and the num­ber of iterations it took to converge. The images from different runs can be 
kept on screen simultaneously to compare results. The tolerance used can be interac­tively adjusted and 
the effect on the solution can be studied. The Form front-end for the simulation envi­ronment as well 
as some of the visualized output are shown in Fig 4. Grid Size SOR Gauss-Siedel Jacobi 15x15 29 135 246 
30X30 57 460 813 By using this system students can try various meth­ods and compare the outputs and 
execution times. The table above gives the number of iterations that the given method took to converge 
for a given prob­lem. The number of iterations is one of the parameters used in evaluating a method. 
Work is under way to produce vector and parallel versions of the previously mentioned algorithms. The 
students will be able to compare and evaluate diRerent algorithms as well as their implernentations on 
different architectures. They will be able to do all of this from a single workstation and without extensive 
knowledge about the machines being used. After the simulation environment, the student is en­couraged 
to take a quiz to evaluate what the student has learned. In a university setting, the students will be 
required to talk the quiz to get credit for their work. The quiz consists of several multiple-choice 
type ques­tions chosen carefully by faculty members with several years of teaching experience in the 
course area. Be­sides text, these questions can incorporate visualized images. A server will also be 
implemented to auto­mate the book-keeping of student scores. The prototype system described here is undergo­ing 
preliminary testing and will be used this Fall as part of a beginning graduate level course on numeri­cal 
techniques, We plan to conduct tests to evaluate the effectiveness of such a simulation and experimen­tation 
based instructional system. The answers that the student gives to the quiz will be used to deter­ mine 
which parts of the tutorial have been mastered course on numerical techniques this fall. Extensive and 
which portions still need review. tests will be carried out on the effectiveness of our approach. Preliminary 
results from such tests will be included in the oral presentation. 4 DIGITAL LIBRARY Acknowledgements 
 One potential shortcoming of the simulation and experimentation based instructional strategy is the 
The research reported here was supported by a Cur­amount of duplication in the student initiated numer-riculum 
Development in Computational Science and ical experiments and the resulting CPU usage. Some Engineering 
grant from the National Science Founcla­iterative techniques require large amounts of compu-tion (NSF 
grant EEC 93-15536). tational resources and each duplication of a numeri­cal experiment becomes computationally 
very expen­sive. To avoid such duplications, experiments requir- References ing large computational 
time ( greater than 5 minutes of CPU time), a digital library of numerical experi-[1] Anzai, Y. and Simon 
H. A,, The theory of learn­ments is being implemented. The schematic diagram ing by doing, Psychological 
Review, 86, pp. 124­of such a digital library is shown in Fig 5. A student 140, 1979. initiated numerical 
experiment is compared with ex­ [2] Papert, S., Windstorms. New York: Basic Books. periments already 
available in the digital library. The values of the input fields are used in the search. In­[3] Dennis, 
J. R., Computer Simulation and Its In­ stead of using the exact student supplied input value, siructionai 
Use. Report No. 8e, The Illinois Se­ a range of values is used in the search. The range is ries on Educational 
Applications of Comput­ determined based on student supplied input as well M ers. Urbana IL: University 
of Illinois at Urbana­ based on the numerical technique. Champaign, 1979. The present visualization 
strategies used are rela­tively primitive: visualization of a single variable on [4] Brown, M. H., Exploring 
Algorithms using a 2D grid. Work is underway to integrate numeri-Balsa-II, , IEEE Computer, X, pp. 14-36, 
1991. cal data produced by more complex solvers, i.e., 3D [5] Stasko, J. T., Tango: A Framework and Systemsystems, 
time-dependent problems, etc., to commer­for Algorithm Animation, IEEE Compuier, X,cially available visualization 
systems like AVS and Ex­pp. 27-39, 19g0. plorer. Through such systems, the students can have more control 
over the visual analysis of the numerical [6] Henry, R. R., Whaley, K. M., and Forstall, data. The digital 
library is also useful for potential in-B., The University of Washington Illustrating tegration with 
tools like ParaGraph [11]. ParaGraph Compiler , Proceedings of the ACM SIGPLAA enabies a user to monitor 
the execution and perfor­ 90 Conference, pp. 223-233, White Plains, New mance of parallel programs. The 
exploratorium can be York, 1990. linked to such performance monitoring tools through the CGI. [7] Berners-Lee, 
T. J ., Cailliau, R., Groff, J-F., Pollermann, B., World-Wide Web: The Infor­mation Universe , published 
in Electronic Net­ 5 V. CONCLUSIONS working: Research, Applications and Policy , Vol. 2 No 1, pp. 52-58 
Spring 1992, Meckler Pub-WWW is an extremely popular concept on the In-lishing, Westport, CT, USA. ternet. 
Almost all research institutions have a few [8] Ravaioli, U., Class Notes. HTML pages describing their 
activity. Research insti­tutions can now incorporate executable software mod­[9] Ames, W. F., Numerical 
Methods for Parial Dif­ ules in such HTML documents. Students can try in­ferential Equations, Academic 
Press. teresting programs at different sites and learn from such experimentation. In this way research 
level code [10] Heath, M. T. and Etheridge, J. A., Visualiz­can also be a very useful teaching tool. 
ing the Performance of Parallel Programs, IEEE The system described here will be used as a com-Software, 
pp. 29-39.1991. panion laboratory to a senior/begirming graduate level 120 Tutorial, Quiz, and Simulation 
front-end Visualized output (Workstations, Mac, PC) Generic Code (Workstations) Figure 1: Schematic Vectorized 
Code (Cray Y-MP) representation of the distributed Parallelized Code (CM-2, CM-5) exploratorium.  MOSAIC 
c r\ FORMS Facility LJ Internet Connection (Common Gateway Interface) \ f\ Input Data Parser \) fv 
\ Computational Module LJ  fv \ Visualizer </ Figure 2: Representation of the simulation front-end. 
122 w  G==l--J EVALUATION QUIZ 1- NEXT TOPIC Figure3: Theinstructional strategy used inthe prototype 
demo.  MOSAIC Directory Server L v \ Input Data Parser Computational Module \J Figure 5: Schematic 
representation of the digital library 
			