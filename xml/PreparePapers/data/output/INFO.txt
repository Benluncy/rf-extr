
 INFO: A Simple Document Annotation Facility Scott Tilley* Hausi Muller Department of Computer Science 
University of Victoria P.O. Box 3055 Victoria, BC Canada Abstract INFO is a simple hypertext facility 
that can be used to annotate standard documents (such as source code) in an unobtrusive fashion. Experience 
with INFO has shown that programmers tend to provide more detailed design and implementation decisions 
if they have more than a few lines in which to do so, and are allowed to document these in a free-format 
fashion. INFO is not meant to be the ultimate hypertext system. Rather, it can be used in conjunction 
with standard tools un­der IBM s VM/CMS to provide a simple yet efficient document annotation facility. 
Key words: Annotation, documentation, hypertext, maintenance, software, Introduction Most of us have 
quietly excoriated the remote and anonymous author of some skimpily documented program. [1] Why is most 
program documentation so poor? Many people now recognize the importance of good documen­tation in software 
development and maintenance. Soft­ware documentation has a significant effect on program understanding. 
Without accurate documentation the *On leave from the IBM Toronto laboratory. Disclaimer: The views and 
conclusions contained in this paper are those of the authors, and should not be interpreted ss representing 
the official policies, either expressed or implied, of IBM Canada Ltd. Permission to copy without fee 
all or part of this material is granted pro­vided that the copies are not made or distributed for direct 
commercial advantage, the ACM copyright notice and the title of the publication and its date appear, 
and notice is given that copying is by permission of the Association for Computing Machirre~. To copy 
otherwise, or to republish, requires a fee and/or specific permission. @ 1991 ACM 089791 -452-X/91 /OO10/O030 
$1.50 V8W 3P6 only source of reliable information is the source code itself [2]. Hence, the most obvious 
way to support pro. gram comprehension is to produce and maintain ade­quate documentation [3]. One reason 
for the lack of quality documentation may be that software documentation, whether preparing manuals or 
writing maintenance guides, is usually one of the last activities to take place during program devel­opment. 
Software documentation seems to be of little interest to the majority of programmers and designers. If 
is often considered something to be put off until the last possible moment; in many cases it is postponed 
indefinitely. While there do exist model programmers that carefully document design and implementation 
de­ cisions not it wants rithm while developing a piece of code, more often than is tacked on as an after-thought. 
After all, who to spend time detailing the operation of an algo­if its design changes every day? Another 
reason for leaving documentation until after the fact is that many corporations have rigid standards 
for program commentary. These standards usually in­volve excessive verbiage near the top of the file 
and be­ fore the body of the major plate comment may not example, it may not have describe the design 
include fields that In either case such more of a hindrance For the programmer paging past this The result 
is that of a are not functions. This type of tem­be suitable for every need. For enough room to adequately 
complex algorithm. Or it may needed for this piece of code. standardized comment structures are than 
a help [1]. developing the code, repeatedly repetitive information is a nuisance. code remains bare until 
complete, at which point the programmer attempts to remember why certain decisions were reached, and 
in all likeli­hood quickly sprinkles spartan comments throughout the code so that he or she may get on 
with real work. One solution to this problem is to move all program commentary out of the source code 
and into develop­ment workbooks. In the early days of software this is ex­actly what was done. However, 
this immediately leads to the problem of program documentation being out of date, misleading, incorrect, 
or even absent with respect to the source code. Keeping one document accurate and up-to-date is hard 
enough. Asking a programmer to keep two (or more) synchronized seems to go against human nature, Brooks 
states that A Basic principle of data processing tech­niques teaches the folly of trying to main­tain 
independent files in synchronism. It is far better to combine them into one file. . . . Yet our practice 
in programming docu­mentation violates our own teaching, We typically attempt to maintain a machine­readable 
form of a program and an inde­pendent set of human-readable documenta­tion. [1] In fact, it was Brooks 
who put forth the idea of the self­documenting program by moving detailed information about the program 
into the source. However, this leads to the problems discussed above. Hence, Brook s idea of merging 
the program source and documentation is good, but perhaps not the best solution. Yet neither is maintaining 
separate documents, INFO solves this apparent dilemma by assuming that the source code and its associated 
documentation are different and distinct objects, and provides embedded links from one to the other. 
In this way a program is self-documenting, but without the documentation tak­ing up valuable real estate 
in the code. The information (should it be required) is easily accessible. Thus, INFO provides a middle 
ground between separate documents and merged documents. An important bonus of this technique is that 
the associ­ated information need not be simple textual documen­tation. It can be (in theory) true multimedia, 
including graphics, images, voice, and even video [4] in which the original coder explains the program. 
CASE tools may also be used to enable the maintainer to further explore the design. There are many aspects 
to INFO related to hyper­text, software maintenance, and program documenta­tion. This paper focuses on 
the program documen­tation facets of INFO. In particular, how its use has affected programmers and their 
document at ion habits. Section 2 describes the INFO approach to the software documentation problem and 
provides a brief overview of how it works. Section 3 discusses how INFO is used for authoring and browsing 
documents, and describes its use during program development and maintenance, In Section 4 the experience 
of software engineers with INFO is discusse d. Finally, Section 5 offers some con­ clusions, 2 The INFO 
approach The solution, I think, is to merge the files, to incorporate the documentation in the source 
program. [1] INFO is a simple hypertext facility that can be used to annotate standard documents (such 
as source code) in an unobtrusive fashion. The semantic links [5] to information nodes are embedded in 
comments in the source text. By a hypertext system we mean a tool that provides nonlinear access to desired 
information [6]. This flexible structure and nonlinear access of hy­pertext makes it ideal for program 
documentation [7]. While the idea of hypertext has been around for a long time, it has not been fully 
exploited in conventional ac­tivities such as program documentation [2, 8]. On the one hand, by placing 
program documentation in hy­pertext nodes instead of in-line with the source, people familiar with the 
code can avoid excessive noise when browsing or editing the file. On the other hand, those less familiar 
with the document (such as new program­mers on a project, or those maintaining existing soft­ware) can 
access detailed information when required. INFO was developed to address the issues discussed in the 
previous section. Namely, how to improve program documentation while keeping distracting in-line com­mentary 
to a minimum. One of the main requirements of INFO was for it to be as simple as possible, Equally important 
was for it to work with existing tools under VM/CMS without requiring new hardware or software. This 
meant that INFO must work on 3270-style termi­nals which have no built-in windowing facilities and no 
mouse. While not as attractive as the modern personal workstations with high-resolution bit-mapped graphical 
displays and pointing devices, 3270 terminals are still prevalent in large numbers, with a considerable 
amount of code development and maintenance still being done on them. It was felt that INFO should be 
written in such as way that the installed equipment base is pro­ tected, and to allow mainframe programmers 
access to some of the newer tools that their workstation counter­parts might already have. Too much of 
the new software written today requires special equipment. 2.1 How INFO works INFO is designed to run 
inside of Xedit, the standard editor on VM/CMS. The hypertext links in the source code are implemented 
using GML (Generalized Markup Language) tags embedded in comments. This simple approach has the advantage 
that the programmer can see the tag without any special highlighting. Moreoverj documents annotated with 
info tags are fully compat­ible with existing tools such as compilers and text pro­cessors. An example 
of an annotated C++ code frag­ment with an info tag is shown in Figure 1. int parse( Node &#38; ) ; II 
: info kw=parse. Figure 1: An annotated C++ code fragment. A GML tag begins with a colon, followed by 
the tag name and an optional list of attributes of the form attribute= vaiue. In Figure 1, the prototype 
of the function pars e is given. In C++, the // characters are comment delimiters, which mean anything 
past them until the end of line is ignored by the compiler. Hence the compiler will completely disregard 
the // : info kw=pars e. construct. However, it is used by the INFO system to indicate the presence of 
a semantic link be­tween this line of C++ code and the related piece of documentation. INFO was written 
by the first author of this paper as an internal-use-only tool in an attempt to improve program documentation. 
It is written in Rexx, a high-level pro­gramming language readily available under VM/CMS. Since one can 
write both system applications and Xedit macros in Rexx, it was an ideal candidate for the devel­opment 
of INFO. The hypertext information is stored in a normal text file, which itself is annotated with info 
tags which cor­respond to the source document(s). By default, the name of the INFO file associated with 
a source docu­ment is the same as the file name of the source code file, but has a file type of INFO. 
1 However, this may be changed by the user by providing the name of the linked document (the database) 
on the db= attribute of the info tag, In this fashion a source code file may have hypertext links directly 
to product documentation (and vice-versa). Another advantage of using GML tags as hypertext link indicators 
is that the INFO file may be processed by one of the standard text processing systems that also uses 
1Under VM/G MS, files are made up of three parts: file name, file type, and file mode. GML (e.g., BookMaster) 
to provide a hardcopy record of the linked information. Information developers can also use info tags 
in documents that will be format­ted using BookMaster. INFO provides GML definitions of the info tag 
so that the keyword is highlighted in the formatted output. This serves as a reminder to the readers 
that the information is being referenced by other documents. An example of this is shown in Fig­ure 2. 
The information nodes may also be extracted from the INFO file and merged with the source document to 
pro­duce an expanded version of the original, which may then be used as standard (in-line, linear) documenta­tion 
would be (e.g., in code reviews). Hence, INFO pro­vides a simple mechanism in which a single document 
can be processed by traditional formatting systems and by a hypertextual front-end, similar to that described 
by Rahtz et al. [9], In the absence of a WEB system, INFO may be used to simulate some of the aspects 
of literate programming [10].  3 Using INFO The INFO implementation is intended to be as self­contained 
as possible. No special hardware or software is needed to use it (other than INFO itself). To the user 
it is simply an Xedit macro which may be associated with a chosen PF-key.2 Because of its simple interface, 
INFO documents and their associated hypertext files may be used and stored with the usual library systems 
and file management tools. 3.1 Authoring documents For a tool such as INFO to be successful, it must 
be easy and painless to add to the documentation of source code, whether the program already exists, 
or is just being written [5]. If one is also authoring documents (i.e., adding new hypertext nodes and 
info tags), an­ other PF-key can be set to invoke INFO with the correct parameters.3 Once this simple 
setup is complete, one can use INFO to author and/or browse documents. To add an info link and the associated 
hypertext node, the user simply places the cursor on the line desired and hits the correct PF-key. A 
window pops up which is essen­ tially a mini-editor. In this window the author enters the relevant information, 
When complete, the system 2A PF-key is a programm able function key. A standard 3270 terminal has 12; 
some models have 24. 3 If no PF-keys are free, the same effect can be achieved by typing the appropriate 
commands on the editor s command line. typedef struct { /* :info kw=node db= symtab script g , */ char 
*id; : ] node;  .cm This document is part of the front-end workbook. ,* setup (fe setup) .im (info macro) 
.* :hl ld=symtab.Symbol table structure :p.The symbol table manipulates objects called :info kw=node.s. 
They are produced by the parser and passed on to the table building routines. A detailed description 
of the :xph.node:exph. layout is given in :hdref refid=nodes. . Symbol table structure The symbol table 
manipulates objects calledm~. They are produced by the parser and passed onto the table building routines. 
Adetailed description of the node layout is given in Section 2.3 onpage 7. Figure2: AC code fragment 
with aninfo ta,glinked to BookMaster product documentation. promptsthe user forakey and then zmnotatesthedocu-3.2 
Browsing documents merit with the info tag. This key is identified with the ku= attribute on the info 
tag. As stated previously, the tagis embedded ina comment. INFO knows how Since the most common application 
of hypertext is to automatically add comments to most of the docu­ browsing [7], INFO provides a simple 
way of retriev­merits commonly used under VM/CMS.4 The comment ing information nodes pointed to by info 
links. When is correctly placed at the end ofan existing line, or on browsing a document containing info 
tags, the user a new line containing just the comment and the info places the cursor on the line with 
the desired info link, tag. The document types supported include program­ and strikes the appropriate 
PF-key. A window display­ming languages such as C, C++, and FORTRAN as ing the information related to 
this link pops up on top wellas Script documents and JCL procedures, just to of the current file being 
edited. This window is smaller nameafew. Ifthedocument typeisunknown toINFO, than the current screen. 
The effect is similar to conven­the usercanspecify acomment delimiter tobe used and tional windowing 
systems currently available on most where to place it.5 In this way, INFO can be easily ex­ personal 
computers and workstations. tended for new types ofdocuments. Since info tags are embedded in comments 
and the tool Any tool by itself cannot replace good documentation. itself does not require any change 
to the document,6 ex-INFO can only aid in the understanding, presentation, isting documents may be incrementally 
augmented with and retrieval of it. There is no substitute for clear and info tags as necessary, This 
means that the existing descriptive prose when it comes to aiding program un­ software base may gradually 
take advantage of INFO s derstanding. capabilities, while new software may be documented in a hypert 
extual fashion from the start. 4 Files are identified by their file type. 5For exmple, Script documents 
use ; . * :info kw=xxx. placed at the end of the line they refer to, while FORTRAN will use C : info 
ks=XXX, placed on the lime previous to the one they refer to. 60 ther than the addition of the info links 
when desired. setup: /* :~nfo kn=setup. */ env = addresso exit_rc = O action = 1 /* :info ku=action_block. 
*I lpgopts = verbose = O run = 1 /* :info kw=run. */ escape_default = % /* LPG default escape */ blockb_default 
= /. /* LPG default block begin */ blocke_default = ./ /* LPG default block end */ GLOBALV SELECT 
LPG GET ESCAPE> if (escape = ) then GLOBALV SELECT LPG SETLP ESCAPE escape.default return Figure3: 
Rexxfunction with INFO tags and normal comments. 3.3 Using INFO during development INFO tags are not 
meant to completely eradicate nor­mal comments from program code. Much of the more informative (and short) 
documentation in many pro­gramscomes from single line comments attheend of the physical source line they 
refer to. Most documentation fails with respect to providing an adequate overview of thesoftware [l] 
, which maybe (partially) attributed to the reluctance ofprogramers to write lengthy expla­ nations in-line 
with the code. A goal ofINFO was to movedetailed and lengthy design discussions and main­ tenance information 
out of the source and into linked documents. An example ofa Rexxfunction within-line comments and info 
tags is shown in Figure 3. An advantage oflinked documentation, as opposed to in-line documentation, 
is that the information nodes may contain different levels ofdetail. Different levelsof documentation 
are required for the casual userof apro­gram, for the developer who is familiar with the code, and for 
the maintainer [1, 11, 12]. A person browsing a file attempting to get an overview of its functional­ity 
may be satisfied with short, descriptive comments concerning algorithms, data structures, and design 
de­cisions that affected the file. A fellow developer may require detailed information about a particular 
func­tion. These different views of the documentation are a great help to anyone looking at the source 
code, since they will all have different objectives. It also enables the owner of the document to provide 
sensitive information to a restricted audience. For example, code examples are frequently included in 
the user s guide for a software product. Those respon­sible for this user documentation often spend a 
consid­erable amount of time wading through product code! screening out inappropriate comments looking 
for a us­able description of its functionality. If info tags are used, internal documentation required 
by developers and maintainers could be hidden by placing just the external view in the code. A real-life 
example would be documenting C library functions and their header files.  3.4 Using INFO during maintenance 
The fastest growing application of hy­pertext, particularly for general-purpose, personal-computer-based 
systems, is for au­thoring computer-based instruction materi­als . [7] INFO can be used effectively during 
program mainte­ nance. By placing instructive information in hypertext nodes, the original developer 
can leave an automated instructor behind for the maintainer. As today s soft­ ware ages, the task of 
maintaining it becomes both more complex and more expensive. Software which is 10-25 years old is generally 
in poor condition, due to various reasons such as lack of accurate documentation, the un­ structured 
programming methods used in the system s design, the fact that the original system designers and programmers 
are no longer available, and the complica­ tion that the software has been changed several times since 
its first release, and thus has evolved into some­ thing different than the original [13, 14, 15, 16]. 
Software maintenance routinely consumes from 50% to 8070 of a products lifecycle and budget. For this 
reason, any improvement in documenting the changes a piece of software goes through will help track code 
changes and greatly ease the tasks of the maintenance team. oneofthe exemplary uses ofinfo tags is theannota­tion 
of existing code. For example, when a customer reports a problem with a program and it is traced to a 
defect in the code, an identification number may be issued so that the problem and its fix may be tracked. 
Figure 4 shows the header of a C module that has had (documented) maintenance twice, one time for fixing 
a bug associated with key PL60036. The maintainer can open up the information node that contains a complete 
description of the original problem, the fix that was in­corporated into the program, and the affected 
areas of code. This information can also be used by the test team when planning the test suite. For the 
developer, this information would be a nuisance to have in-line all the time, and in conventional systems 
this would usu­ally mean that the information is never recorded. With INFO, both are satisfied since 
the information is avail­ able to both when needed, but it is not as obtrusive as eight pages of in-line 
documentation would be.  4 User experience Experience with INFO has shown that programmers tend to provide 
detailed design and implementation de­cisions more often if they have as much (or as little) room as 
they desire in which to do so, and are allowed to document these in a free-format fashion. Standards 
have their place, but they tend to restrict the more cre­ative members of a team. If they feel too constrained 
by documentation templates that must be used at spec­ified points in the code, more often than not the 
fields will be left blank, or contain essentially meaningless comments. The linked information nodes 
provided by INFO offer unlimited free-format space in which the programmers can document their code. 
Developers have found that the removal of noise from the code enables them to concentrate more on those 
as­pects of the program they are most interested in, with­out distracting comments blocks getting in 
the way, It also makes a program easier to read, since the code tends to stand out more without a forest 
of comments surrounding it. However, INFO also has its disadvantages. Some peo­ ple still find having 
the documentation and code in one place better than having it split into multiple files, even if the 
relevant documentation is instantly accessible at the strike of a PF-key. The other current shortcoming 
of INFO is related to a problem most hypertext sys­ tems must face: link integrity. INFO does provide 
a facility that allows the programmer to directly edit the information nodes. r However, if an info tag 
is removed when a line is deleted from the source code and if this tag was the only one pointing to the 
information node, then the node becomes the documentation equivalent of dead code. The next version of 
INFO will provide a facility to automatically verify link consistency. 5 Conclusions INFO offers the 
mainframe community an unobtrusive, simple, yet effective documentation annotation facility. that does 
not require any new hardware or software, and allows documents to be gradually annotated with info tags 
as needed. By placing program documentation in hypertext nodes instead of in-line with the source, peo­ple 
familiar with the code can avoid excessive noise when browsing or editing the file. INFO is not meant 
to be the ultimate hypertext system, it does not at­tempt to provide a comprehensive hypertext environ­ment 
for complete lifecycle management [17]. Rather, it can be used in conjunction with standard tools under 
VM/CMS to provide a simple yet efficient document annotation facility. User experience of INFO over the 
past year and a half indicates that it aids program development and main­tenance by removing distracting 
in-line documentation to linked hypertext nodes. The info tags can be used to track program evolution 
for maintenance purposes.  References [1] Frederick P. Brooks Jr. The Mythical Man-Month. Addison-Wesley, 
1982. [2] Nigel T. Fletton and Malcolm Munro. Redocument­ing software systems using hypertext technology. 
In Proceedings of the IEEE 1988 Conference orI Software Maintenance, pages 54 59, October 1988. [3] Johannes 
Sametinger. A tool for the maintenance of C++ programs. In Proceedings of the IEEE 1990 Con­ference on 
Software Maintenance, pages 54-59, Novem­ber 1990. [4] Frank A. Cioch. An audiovisual document for software 
maintenance. In Proceedings of the IEEE 1988 Confer­ence on Software Maintenance, pages 390 394, October 
1988. [5] Nigel T. Fletton. A hypertext approach to brows­ing and documenting software. In Ray McAleese 
and Catherine Green, editors, Hypertext: State of the Art, Chapter 21. Intellect, 1990. 7 They ~~ &#38;o 
be ~ated directly, since the nodes are actua~y just part of a text file. /***************************************************************************/ 
/* */ /* I.IODULE NAME: EDCTXDBG */ /* */ /* -------------------------------------------------------------------------*/ 
/* Change activity: */ /* @Ol=pT ------ CBE---­ 9004iOT1LLEy :info kw=PL60036. */ /* @02=pT------ CBE---­ 
90i124T1LLEy :info kw=csect_test. */ /* +/ /***************************************************************************/ 
Figure4: Cfileannotated with maintenance information. [6] B. I. Blum. Documentation for maintenance. 
In Pro­ [12] Duane Ressler and Dee Stribling. Designing and pro­ ceedings of the IEEE 1988 Conference 
on Soflware totyping a portable hypertext application. In SIG­ kfaintenance, pages 23-31, October 1988. 
DOC 90 Conference Proceedings, pages 88-94, October [7] David H. Jonassen. Hypertext/Hypermedia. Educa­ 
1990. tional Technology Publications, 199o. [13] Girish Parikhand Nicholas Zvegintzov, editors. Tuto­ 
[8] Jeff Conklin. Hypertext: An IEEE Computer, 20(9):17-41, introduction September and 1987, survey. 
rial on Software Press, 1983. Maintenance. IEEE Computer Society [9] Sebastian Rahtz, Les Carr, ing multimedia 
documents: and Wendy Hall. Creat-Hypertext processing. In [14] Peter IEEE Freeman, Computer editor. Society 
Tutorial: Press, So&#38;ware 1987. Reusability. Ray McAleese and Catherine Green, editors, Hypertezt: 
[15] Will Tracz, editor. Tutorial: Software Reuse: Emerging State of the Art, Chapter 20. Intellect, 
1990. Technnologg. IEEE Computer Society Press, 1988. [10] John L. Bentley and Don E. Knuth. Literate 
program­ [16] David H. Longstreet, editor. Tutorial; Soflware Main­ ming. Communication. of the A CM, 
29(5):364-369, tenance and Computers. IEEE Computer Society May 1986. Press, 1990. [11] P. J. Brown. 
Interactive documentation, Sofiware  [17] Pankaj K. Garg and Walt Scacchi. A hypertext sys- Practice 
and Eqwrience, 16(3), March 1986. tem to manage life cycle documents. In Proceedings ofthe21st Annual 
Hawaii International Conference on System Science, pages 337-346, January 1988.  
			