
 Integrated Security Framework for Low Cost RFID Tags Mark Muwanguzi Elmarie Biermann Tshwane University 
of Technology Infobahn RDT Private Bag X 680 19 Bethanie Road Pretoria, 0001 Durbanville, 7550 +27 73 
486 5381 +27 21 975 9521 mmuwanguzi@gmail.com elmarie@infobahnrdt.co.za ABSTRACT Radio Frequency Identification 
(RFID) systems are becoming more popular today because of the wide area of applications. It is being 
used in several industries such as the transport industry, sports, medical and government institutions. 
Its advantages such as the capacity to store more information than other identification technologies 
as well as the ease with which data can be read (since it doesn t require line of sight and human intervention), 
have sparked its widespread use and implementation in the various industries. The most widely used class 
of RFID tags is the class 1 tag because it offers identification functionality at low cost. Class 1 tags 
have limited computational power and memory resources. Due to these limitations, common authentication 
protocols such as AES cannot be implemented on the class 1 tags. As these tags provide essential implementation 
capabilities for development countries such as South Africa, it is vital that researchers focus on providing 
adequate security solutions. Taking into account the information security needs and performance limitations 
of the class 1 tags, we present a lightweight protocol based on the Hopper and Blum s human authentication 
protocol.  Categories and Subject Descriptors B.7.1 [Types and design styles]: Algorithms implemented 
in hardware General Terms Algorithms, Security.  Keywords RFID; Security; HB protocol; Authentication; 
Class 1 tags. 1. INTRODUCTION Radio Frequency Identification (RFID) is an identification system set 
to replace barcode systems in the near future [1]. RFID systems are made up of tags, a reader and a backend 
database containing the information of the objects identified by the tags [2]. An RFID tag or sometimes 
called a transponder contains identifying data of the object it is placed on and it generates a signal 
containing that respective information. There Permission to make digital or hard copies of all or part 
of this work for personal or classroom use is granted without fee provided that copies are not made or 
distributed for profit or commercial advantage and that copies bear this notice and the full citation 
on the first page. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires 
prior specific permission and/or a fee. SAICSIT 10, October 11 13, 2010, Bela Bela, South Africa. Copyright 
2010 ACM 978-1-60558-950-3/10/10 $10.00. are four different types of tags based on their power source 
namely: Passive tags: These tags get their power to transmit the signal from the magnetic field produced 
by the RFID reader [3]. This tag is smaller and cheaper because it doesn t have an onboard battery. They 
have a maximum transmitting range of 10 meters.  Semi Passive tags: These are passive tags that have 
an onboard battery that is used to power the onboard circuitry but isn t used to produce the signal, 
it uses the magnetic field produced by the reader to achieve this [4]. These can transmit up to about 
100 meters.  Active tags: These tags have an onboard battery used to communicate and send signals to 
the reader and power the onboard circuitry [3]. The onboard battery enables it to transmit signals up 
to 1 000 meters.  Semi Active tags: These are similar to active tags with a slight difference of they 
remain in sleep mode until they receive a signal from the reader which wakes them up [5].  Communication 
between the tag and the reader is achieved through radio frequencies, and the reader is securely connected 
to the backend system. It is important to point out that there are two main policy bodies working on 
the standards and protocols that govern the use of RFID systems, namely AUTO-ID Center that uses the 
Electronic Product Code (EPC) system from EPCglobal and the International Standards Organization (ISO). 
In this paper we focus on the low cost RFID tags, thus the EPCglobal standard Class 1 Gen 2 tags which 
is equivalent to the ISO 18000-6 standard [6]. Table 1 gives a brief summary of the five different EPC 
class standards, while the different ISO standards relating to tags are portrayed in Table 2. Table 
1: EPC system RFID Tag Classes Name Description Class 0 The simplest of tags with the main functionality 
to offer electronic article surveillance (EAS). The tags in this class are passive. Class 1 These tags 
contain the unique identifying data stored on write once read many (WORM) memory. They are usually passive 
tags, and are simple identifiers with little logic [7]. Class 2 Have read and write capabilities and 
can thus be recycled and used to identify different items until destroyed. The tags in this class are 
passive. Class 3 Data is stored in read and write many memory. Contains an onboard battery that is  
used to enhance the transmitting range. The tags in this class are semi passive. Have read and write 
memory capabilities as well as an active transmitter for initiating communication [7]. The tags in this 
class are active.  Class 4 Table 2: ISO RFID Tag Standard Name Description 18000 1 Generic Parameters 
for Air Interface Communication for Globally Accepted Frequencies 18000 Part 2 Parameters for Air Interface 
Communications below 135KHz. It is the ISO standard for Low Frequencies 18000 Part 3 Parameters for 
Air Interface Communications at 13.56 MHz It is the ISO standard for High frequencies and it has Read 
\ Write capabilities. 18000 Part 4 Parameters for Air Interface Communications at 2.45GHz It is the 
ISO standard for Microwave Frequency. It also has Read \ Write capabilities. 18000 Part 5 Parameters 
for Air Interface Communications at 5.8GHz 18000 Part 6 Parameters for Air Interface Communications 
at 860 930 MHz. It is the ISO standard for UHF Frequency. It also has Read Write capabilities. 18000 
 Part 7 Parameters for Air Interface Communications at 433.92 MHz. This is the Manifest tag for the United 
States Department of Defense (DOD) First world countries such as the United States implement RFID systems 
on a wide scale within various industries such as the transport industry, sports, medical and government 
[2][8][9]. Advantages such as the capacity to store more information and the ease with which data can 
be read (since it does not require line of sight) have contributed to its wide spread implementation 
in these countries [2]. Less developed countries such as South Africa are however still lagging behind 
in this identification technology advancement despite its advantages over its predecessor, barcode technology. 
The primary hindrance of this is implementation costs and security issues. Security issues such as: eavesdropping, 
tag spoofing, tag cloning, unauthorized tag tracking, unauthorized tag disabling, cross contamination 
and man in the middle attacks are inhibiting the widespread adoption [2]. A large portion of research 
within the last decade has focused on solving these security issues and some solutions have been proposed, 
for example the hash lock scheme proposed by Weis in 2003 [7] and the mutual authentication algorithm 
using AES proposed by Toiruul and Kyungoh Lee in 2006 [10]. In [11] the authors point out that the class 
1 tag present some unique implementation problems as hash functions and AES implementations require much 
more gates than the class 1 tag has to offer. The solution lies in lightweight security protocols and 
not in increasing the number of gates, as this will exponentially increase the cost of the tag. In 2001 
Hopper and Blum [12] proposed a lightweight human executable scheme for the identification of humans 
to computational devices. This HB protocol relies on the computational hardness of the Learning Parity 
with Noise (LPN) problem. In 2005, Juels and Weis [13] proved that while the HB protocol is secure with 
passive adversaries, it is not to active adversaries and they proposed a modification to the protocol 
which they called HB+. However, later in 2005 Gilbert et al were able to prove that the HB+ protocol 
is vulnerable to certain attacks [14]. In 2006 Bringer et al [15] modified the HB+ protocol to secure 
it from the attacks pointed out by Gilbert et al and called it HB++ . Later that year Piramuthu pointed 
out the vulnerabilities of the HB++ [16]. Munilla and Peinado early in 2007 then came up with their own 
protocol HB-MP which is based on the HB+ protocol [17]. In this paper we propose another modification 
to the HB+ protocol, a protocol that provides more efficient performance and information security. We 
need to first establish the need for another protocol. Considering their strengths and weaknesses, in 
the next sections we shall look at the several available countermeasures, we shall then focus our research 
on the original HB protocol proposed by Hopper and Blum and the Juels and Weis HB+ protocol that our 
protocol is based on. Section IV presents the protocol proposed in this paper and lastly a security analysis 
will be carried out for the proposed protocol.  2. SECURITY COUNTERMEASURES As discussed in the previous 
chapter, RFID has several advantages over its predecessor, barcode technology; in addition to that RFID 
can be implemented in various industries. However it is still failing to get world wide acceptance because 
of its disadvantages such as implementation costs and the security and privacy concerns. Because of this 
research has been put into finding solutions to secure the communication between the components that 
make up an RFID system. A good solution should be able to secure the RFID system at a low cost without 
hindering the system from performing its purpose. The most widely used class of RFID tags is the class 
1 tag because it offers identification functionality at low cost. The classes above it offer added functionality, 
such as sensory capabilities and ad hoc networking, which make them quite expensive. Before we look at 
the different countermeasures it is important to point out the important features of a low cost RFID 
tag, the EPC class 1 Gen 2 tag. The EPC class 1 Gen 2 tag has 128 512 bits of read only storage, with 
32 128 bits of volatile read write memory. Unlike the Gen 1 tag that is read only, the Gen 2 tag has 
read and write capabilities with up to 10 000 write/erase cycles. A typical class 1 Gen 2 tag has 1 000 
 10 000 gates of which 200 2 000 are budgeted for security. Its operating frequency is 860  960 MHz 
(UHF) and it is passively powered by a readers radio frequency signal.  2.1. Hash Functions Three main 
solutions to secure the system have been proposed by different researchers that use hash functions. A 
hash function is a simple mathematical procedure that converts a volume of data into a cipher. Bogdanov 
et al [11] point out that the area or number of gates and power consumption used in most hash functions, 
is too large to be placed on low cost RFID tags. In Dr Marie O Neill s paper [18] she points out that 
most SHA­1 designs for RFID have a gate size ranging from 8120 gates to 10641 gates and a power consumption 
of 19.5uW to 35.24uW. As seen from the previous section, low cost RFID tags put aside only 200 to 2000 
gates for security and use up to 10uW power. From these tag specifications it is seen that the hash function 
designs cannot be used on the current tag architecture. In RFID tags, the silicon area and the gates 
have a significant impact on the cost of the tag, the greater the area, the higher the cost. 2.1.1. Hash 
Lock Scheme The Hash Lock Scheme was proposed by Weis in 2004 [5]. In this scheme, a metaID is stored 
on the tag and in the backend database. When a tag receives its metaID, it enters its locked state. In 
its locked state, a tag answers all queries from readers with its metaID and does not offer any other 
functionality. The unlock process can be seen in Figure 1. In order to unlock the tag, the reader queries 
the tag (1), the tag responds with its metaID (2). The reader then uses this metaID to get the tags key 
from the back end database (3). The reader then sends the retrieved key to the tag (4), where it is hashed 
and the output is compared to the metalD (5), if it s the same then the tag enters its unlocked state 
and it offers full functionality to the reader (6). Figure 1: Tag unlocking process for Hash-Lock Scheme 
It can be noted from the explanation of this scheme that locked tags answer all queries with the same 
response, its metaID, because of this individuals carrying these tags can still be tracked by use of 
the metaID that never changes. 2.1.2. Randomized Hash Lock Scheme Weis et al [19] realize the weakness 
of the hash lock scheme and add a new mode of operation to it, where a locked tag responds unpredictably 
to every query made by a reader. In this scheme, a hash function, tag data and a pseudorandom number 
generator are embedded within each tag. The tag responds to a query in several steps as listed bellow 
and illustrated in Figure 2: It generates a random value (r) by use of the pseudorandom number generator. 
 It hashes the concatenation of its ID and the random value r to give an output H. [ h( ID || r ) ] 
 It then sends this hashed value H and the random value r to the RFID reader (2). [ r, h( ID || r ) 
]  The reader sends these two values, the hashed value H and the random number r, to the database (3). 
 The server then finds the corresponding ID by hashing the concatenation of the saved ID s in the database 
and the random number r received from the reader giving an output H . All the H values for the different 
saved ID s are compared to H that was sent by the reader, and the corresponding ID of the equal H and 
H values is sent to the reader (4).  The reader sends this ID to the tag which unlocks the tag (5). 
  Figure 2: Tag unlocking process for the randomize Hash- Lock Scheme This scheme solves the previous 
problem we encountered with the hash lock scheme since the tag does not respond in a predictable way. 
However, hash functions at this stage cannot be implemented on low cost RFID tags. The resources on the 
tags are not sufficient enough to accommodate algorithms like the hash functions.  2.1.3. Hash Chain 
Scheme The hash chain scheme was proposed by Ohkubo, Suzuki and Kinoshita in 2003 [20]. In this scheme 
we have two hash functions H and G, Read Only Memory (ROM) and Non Volatile Random Access Memory (NVRAM) 
embedded in each tag. The tag stores a secret key (s) in its NVRAM and its ID in the ROM. The back end 
server and database stores the values of the ID s and secret keys of all the tags it communicates with. 
The first hash function (H) is used to hash the value sent to the server from the tag and the second 
hash function (G) is used to create the new secret key (s1). The tag responds to a query in the several 
steps listed bellow and illustrated in Figure 3: The tag responds with a value (X) which is retrieved 
from hashing the secret key (s) and the id concatenated (2). i.e. X = H( id || s )  The tag updates 
its secret key by hashing the current secret key using the second hash function G. i.e. s = G (s)  
The reader sends the value X to the server (3).  The server finds the id corresponding to the value 
X sent to it by hashing all the possible values of ID s stored in the database concatenated to the secret 
key (s) from the reader, using the hash function H.  i.e. Xi = H (idi || si) And the problems noted 
with this If the reader is not authenticated then the tag wouldn t countermeasure? respond to any queries. 
2.2. AES (Advanced Encryption Standard) According to Lopez [5], a standard AES implementation is between 
20k gates to 30k gates which is way beyond the capacity of low cost RFID tags. He continues to point 
out that because of this several researchers such as Feldhofer, Dominikus and Wolkerstorfer [21] have 
redesigned the algorithm to cut it down to RFID specifications. Most of the scaled down AES designs have 
an area size of 3400 gates to 7000 gates. Although this is greatly scaled down from the standard implementation, 
it is still a little bit higher than what is allocated for RFID tags. Feldhofer, Dominikus and Wolkerstorfer 
[21] designed a 128 bit AES standard which only required 3400 gates and needed power of approximately 
8.15uW. This is better than the hash functions discussed above but still above the gate limit for low 
cost RFID tags. 2.2.1. Strong Authentication RFID system using AES algorithm. Feldhofer, Dominikus and 
Wolkerstorfer [21] proposed an AES cryptographic algorithm with unilateral authentication. This algorithm 
worked in such a way that the tag sends a random number to the reader; the reader encrypts the random 
number with a shared key and sends it back to the tag. The tag then decrypts this message and compares 
the result with the random number it had originally sent. If the two are the same then it authenticates 
the reader and unlocks itself, if not, it ends the communication between it and the reader. Toiruul and 
Lee [10] argue that this protocol is subject to the man in the middle attack mainly because of the unilateral 
authentication. 2.2.2. An advanced mutual authentication algorithm using AES for RFID systems. This is 
an authentication protocol developed by Toiruul and Lee [10] that uses AES for its cryptographic encryption 
algorithm and mutual authentication. Mutual authentication simply means both parties communicating authenticated 
each other. There are three things to consider when setting up this protocol: In order for a reader to 
obtain the tag ID, the tag needs to first authenticate the reader and the back end database that stores 
the extended tag information, needs to authenticate the tag. This occurs in three steps: Step 1: The 
reader selects the tag (T1) it wants to communicate with. It sends an encrypted cipher text (CA) of the 
two random numbers k1 and k2 obtained from the back end database for that specific tag T1. CA = E(k1 
k2) Step 2: The tag (T1) authenticates the reader by encrypting its two keys k1 and k2 to create the 
cipher text CT. To authenticate the reader, the tag checks if CA = CT. Once authenticated, the tag (T1), 
using AES-128 algorithm, generates a new cipher text (CN) including the two keys (k1 and k2) and the 
unique ID (IDk) and sends this to the reader. CN = E(k1 XOR k2 XOR IDk ) Step 3: The reader sends CN 
to the backend database. The backend database deciphers CN using the shared cipher key and random numbers 
k1 and k2 to obtain the unique id (IDk). to authenticate and verify that the message came from a valid 
tag, the back end database checks if the unique id (IDk) is the same as that stored in the database. 
Once verified, the database retrieves the information associated with that ID and sends it to the reader. 
The benefit of this solution is that it uses mutual authentication and this prevents attacks such as 
tag spoofing, cloning, tracking and unauthorized tag reading. The weakness of this solution is that it 
is not ideal for RFID tags because the number of gates it requires for its implementation on the tags 
is more than what is available on the tags. This is further explained in the following chapter.   3. 
HB: HUMAN AUTHENTICATION PROTOCOL Hopper and Blum in 2001 present an authentication system that is based 
on the learning parity in the presence of noise (LPN) problem [12]. In order to explain the protocol 
we first need to introduce some notations: -XOR operation k -Length of the secret key shared by the 
reader and the tag a -Random k-bit binary vector from the reader x -Secret key shared by the tag and 
the reader v -Noise bit a.x -bitwise AND operation Figure 3: One Round of HB Protocol Step 1: The reader 
generates a random challenge a and sends it to the tag. Step 2: The tag computes z as follows z = a . 
x v Step 3: The reader authenticates the tag if: z = a . x This is a lightweight protocol because only 
AND and XOR bitwise operations are performed for authentication. An eavesdropper needs to solve the LPN 
problem to obtain the secret key x from the challenge-response observed because of the noise bit v . 
 Juels and Weis prove that if an eavesdropper captures the challenge response pair between the tag and 
reader, he will be able to calculate the value of the secret key x by use of Gaussian elimination [13]. 
 4. HB+ PROTOCOL After carrying out a cryptanalysis on the HB protocol and proving that it is vulnerable 
to active attacks, Juels and Weis modify the protocol to secure it from those attacks and call it the 
HB+ protocol [13]. Their modification introduces a new shared secret key and the protocol is initiated 
by the tag and not the reader like the original HB protocol. We introduce some more notations we are 
going to use to explain the protocol: a -Random k-bit binary vector from the reader b -Blinding factor 
from tag x,y - Secret keys shared by the tag and the reader v -Noise bit a.x -bitwise AND operation 
Step 1: The tag sends a random number b to the reader Step 2: The reader sends a challenge random number 
a to the tag Step 3: The tag computes z as follows z = a.x b.y v Step 4: The reader calculates z in 
the same manner and compares it to the z received from the tag. If they are Figure 4: One Round of 
HB+ Protocol This protocol is lightweight and ideal for low cost RFID tags with regards to the size and 
number of gates used for its implementation. However Gilbert et al prove that this protocol can be subject 
to the man in the middle attack and through this attack the secret keys x and y can be calculated [14]. 
In their attack model, an adversary captures the challenge a from the reader and sends its own challenge 
a1 to the tag. After several rounds of this attack they show how one can extract the secret keys x and 
y. Bringer et al then proposed the HB++ protocol to secure the tags against Gilbert et al. s man in the 
middle attack [15]. Piramuthu then proves that HB++ is vulnerable to active attacks and modifies it slightly 
and calls it the HB* protocol [16]. Within here I propose you put a table that highlights the benefit 
and especially the weakness of each mentioned solution as security answer to the class1 tag. Then be 
sure to mention the need for a new solution.  5. PROPOSED PROTOCOL The main challenge in providing security 
protocols for the low cost class 1 RFID tags is the low computational power and storage capacities of 
these tags. The family of lightweight protocols based on Hopper and Blum s [12] HB protocol is ideal 
for these tags because the scheme does not require a large number of gates for its implementation. Before 
our proposed protocol is looked at, the tag and backend software need to be initialized as follows: 
Each tag is given a 32 bit secret random number x which is stored by the individual tag and the backend 
software.  The reader is given a 32 bit secret random number y which is stored by each tag and the backend 
software.  The tag is given an access (unlock) password and a kill password which are stored by both 
the tag and the backend software.  The tag is given a tag ID which is associated to a record in the 
backend database that holds the item information the tag is identifying.  Before explanation of the 
protocol, some key notations are introduced: x: 32 bit tag secret number shared by the backend and the 
tag y: 32 bit reader secret number shared by the backend and the tag a: 16 bit random number produced 
by the reader b: 16 bit random number computed by both the backend and the tag using the random value 
a and upper 16 bits of x v: blinding noise value :XOR bitwise The protocol consists of the following 
four steps: Step 1: The reader sends a 16 bit random number a to the tag Step 2: The tag computes z as 
follows:  The tag first rotates its 32 bit secret number to the right by 1 bit and the reader 32 bit 
secret number to the left by 2 bits  The tag then calculates a second random number b by performing 
an XOR bitwise function with the 16 bit random number a and the 16 most significant bits of the rotated 
tag number  Using the 16 least significant bits of the 32 bit tag number and the reader number, z is 
then calculated as follows:  z = (a.x16) (b.y16) v The tag then sends the value z to the reader Step 
3: The reader then calculates z1 the same way the tag calculated it above in step 2. The reader then 
authenticates the tag if z = z1 else it rejects the tag and ends the communication. Step 4: If authentication 
of the tag is positive, the reader  scans the database for the tags unlock password that corresponds 
to the secret numbers x and y and sends it to the tag  Figure 5: Integrated Security Framework  6. 
PROTOCOL EVALUATION To evaluate the framework, the different data packets exchanged between the reader 
and the tag must be examined. Figure 6 shows these data packets. As observed from the definition of the 
framework, the only difference between this framework and the other variations of the HB protocol is 
the response of the tag and the rotation of the keys. This means that the security advantages of the 
HB protocol are still experienced. According to Juels and Weis the HB protocol is vulnerable to active 
attacks [13]. They are able to prove that if an eavesdropper captures the challenge response pair between 
the tag and reader, he will be able to calculate the value of the secret key x by use of Gaussian elimination. 
Our protocol is resistant to this attack because on every authentication attempt, the secret numbers 
are rotated and thus changed. According to Gilbert et al, the HB+ protocol is vulnerable to the man in 
the middle attack and through this attack the secret keys x and y can be calculated [14]. An adversary 
captures the random challenge a from the reader and sends its own challenge a1 to the tag. After several 
rounds of this attack they show how one can extract the secret keys x and y. Our protocol is resistant 
to this attack because of the following reasons: The secret numbers keep rotating on every attempted 
 authenticatication process.  The random number b that is used to calculate the tag response z depends 
on the random number a from the reader and the secret number x  Taking into account the possible attacks 
to RFID systems, it is vital to evaluate our proposed solution in terms of providing protection against 
these attacks. Figure 6: Data Packet Analyzer between Reader and Tag 6.1. Tag Spoofing and Tag Cloning. 
Both of these attacks entail copying of the tag information and broadcasting it as a valid tag. With 
reference to Figure 6, when a reader sends Packet A, which is a random number a , this value is AND to 
the tags secret number x and XORed to the AND value of another random number b and the readers secret 
number y and the result is further XORed with a noise value v . The resulting value z is then sent to 
the reader. If an adversary wants to copy the tag information and falls on the response z , or tries 
to initiate an authentication trial, he will not be able to get the secret numbers x and y from the 
tag response z . This is because the secret numbers keep rotating on every authentication process and 
the random value b depends on the value a and the upper 16bits of the tag secret key. Without knowledge 
of x and y , an adversary can not create a tag that will be able to respond correctly to a challenge 
from a valid reader. 6.2. Unauthorized Tag Tracking. This is the unauthorized tracking of individuals 
carrying tagged items. This framework is resistant to this attack because the same challenge of each 
authentication trial doesn t yield the same response z from the tag. This response value is different 
on every authentication trial since the secret numbers rotate each time and the random value b depends 
on the value a . Since this response changes, individuals can not be tracked by their tagged items. 
 6.3. Tag Disabling, Unauthorized Tag Reading and Tag Data Corruption Tag disabling is the disabling 
of the tag permanently by adversaries causing a denial of service risk to legitimate readers. Unauthorized 
tag reading and tag data corruption is the reading and editing of tag data by adversaries. In this framework 
the tag begins off in a locked state. While in the locked state the tag responds to all challenges with 
the value z and does not accept any commands from the reader until it is unlocked. A tag is only unlocked 
once it has been authenticated by the reader and the reader has been authenticated by the tag. A tag 
can not experience these attacks because it only accepts commands after a successful authentication process. 
 6.4. Eavesdropping This is the unauthorized listening by an adversary to communication between a reader 
and a tag. Using Figure 6, it can be proven that if any of the packets exchanged between the tag and 
the reader is obtained by an adversary it will render useless to the adversary because he will not be 
able to understand the packet. 6.4.1. Packet A (Random number a ) This is a random number sent by the 
reader to the tag which doesn t signify anything. Even if the adversary stores this random number with 
the hope of deducing the secret keys from the response, he will not be able to because these keys keep 
changing every single authentication trial. 6.4.2. Packet B (Response z ) This packet is the response 
from the tag of the reader challenge. If an adversary gets a hold of this packet it will be useless because 
the reader will not be able to make sense of the content nor deduce the keys from it as explained above. 
6.4.3. Packet C (Unlock Password) This is a hashed value that unlocks the tag but on every authentication 
trial, the backend software computes a new unlock password hash value and updates the tag. This packet 
is useless because it keeps changing all the time. 6.4.4. Packet D (Tag ID) This is also a hashed value 
of the tag identification and it points to a record in a secure database located on the backend system. 
Without access to the database, this value is also useless to an adversary. 6.5. Cross Contamination 
This is when information got from the tag is used in a totally different context than what it was intended 
for. From the data packets displayed in Figure 6, the information exchanged between the tag and the reader 
is totally useless to an unauthorized person without access to the backend system database.  6.6. Man 
in the Middle Attack This attack occurs when an adversary pretends to either be an authorized reader 
or a tag by sending messages to both entities. If the tag and the reader were responding predictably 
on each challenge like in the HB+ protocol, after a numerous number of rounds, the adversary would be 
able to deduce the secret keys from the tag responses. This framework is resistant to this attack because 
the response from the tag of the challenge a , is unpredictable because the secret numbers x and y and 
the random number b change on every authentication trial.  7. FRAMEWORK IMPLEMENTATION RFID tags have 
three main components: memory, control logic and the radio frequency unit. This dissertation focuses 
on the control logic unit. The reason is that the control logic controls the behavior of the RFID tag 
when it is interrogated or queried by a reader. During manufacture, the control logic of an RFID tag 
is programmed using a special RFID compiler and it cannot be reprogrammed thereafter. The tag memory 
can be written to but the control logic cannot. With that in mind, the researcher used a microchip PIC 
18f4520 to mimic the control logic of an RFID tag. The PIC program was coded in C and compiled using 
the MCC18 C microchip compiler. A program written in VB.NET was used to act as the reader and back-end 
software. Communication between the two RFID components (the reader and the tag) was established using 
the RS232 serial communication port. The researcher did not deem it necessary to use a radio frequency 
unit for communication because what is being tested is the authentication process between the tag and 
reader and the packets sent between the two. These packets can still be examined irrespective of the 
communication medium being used. The main control logic functions for the tag written in C language. 
 8. FUTURE WORK AND CONCLUSION Against the RFID attacks, the proposed framework has been evaluated and 
it can be seen that the framework is resilient to the attacks. On top of that, the framework is lightweight 
and can be implemented on the current class 1 Gen 2 tags. Class 1 Gen 2 tags are the most common RFID 
tags currently used. The protocol proposed in this paper is specifically applicable to these set of tags. 
It is believed that if the security of these tags is improved there will be a widespread use of the technology 
in these less developed countries like South Africa. Future research includes additional work in regards 
to the lightweight algorithms; mutual authentication; low cost RFID tag specifications and data encryption. 
Lightweight algorithms: More research needs to be centered on lightweight protocols that can be implemented 
on the low cost RFID tags. Mutual authentication: RFID systems, like any other information system, have 
different components communicating and transferring sensitive data between each other over an insecure 
communication RF channel. In order for the components to communicate they need to trust each other, one 
way of achieving this is by the use of mutual authentication. Our framework achieves this by use of the 
HB protocol variant and the access key that comes standard on low cost RFID tags. Additional work is 
still required here as we believe the access key is not a strong enough authentication mechanism. Low 
cost RFID tag specification: We believe more research needs to be conducted in regards to the RFID standards. 
Without majorly altering the standard for low cost tags, a new standard can be proposed with a higher 
security level. Data encryption: Information transferred between the tag and the reader needs to be encrypted. 
In our framework we propose storage of the more sensitive information in the back end database. Without 
access to the database, an adversary cannot gain access to more personal or company information. We believe 
even the non-sensitive information should still be encrypted. Additional research into a lightweight 
encryption algorithm that can be implemented on the low cost tags, are thus required. 9. ACKNOWLEDGMENT 
We would like to thank God, who without, nothing is possible. 10. REFERENCES [1] S. Piramuthu, HB and 
related lightweight authentication protocols for secure RFID tag/reader authentication, in: CollECTer 
Europe Conference, Basel, Switzerland, 9-10 June, 2006. [2] S. Ahson, M. Ilyas, RFID Handbook: Applications, 
Technology, Security and Privacy, CRC Press, 2008. [3] Vangie, B. 2005. All about RFID. [Online] Available 
from: www.techsolutions.co.za [Accessed 12/03/2008] [4] Karygiannis, T., Eydt, B., Barber, G., Bunn, 
L. &#38; Phillips, T. 2007. Guidelines for securing Radio Frequency Identification (RFID) Systems. Gaithersburg: 
National Institute of Standards and Technology [5] Lopez, P.P. 2008. Lightweight Cryptography in Radio 
Frequency Identification (RFID) Systems. Ph.D Thesis. Carlos III University of Madrid [6] Alien Technology. 
2005. EPCglobal Class 1 Gen 2 RFID specification. California: Alien Technology. Available Online: www.alientechnology.com. 
[Accessed: 02/10/2008] [7] Weis, S.A. 2003. Security and privacy in radio frequency identification devices. 
M.Sc. dissertation, Massachusetts, MIT. [8] Angeles, R. 2005. RFID Technologies: Supply-chain applications 
and implementation issues. In: Information Systems Management, 22(1), pp. 51-65. [9] Shoewu, O. &#38; 
Badejo, O. 2006. Radio Frequency Identification Technology: Development, Application, and Security Issues. 
Pacific Journal of Science and Technology. 7(2):144-152. [10] Toiruul, B. &#38; Lee, K. 2006. An Advanced 
Mutual-Authentication Algorithm Using AES for RFID Systems. International Journal of Computer Science 
and Network Security, 6(9B), 156-162. [11] Bogdanov, A., Leander, G., Paar, C., Poschmann, A., Robshaw, 
M.J.B., &#38; Seurin, Y. 2008. Hash Functions and RFID Tags: Mind the Gap. In: Cryptographic Hardware 
and Embedded Systems CHES 2008, 283-299. [12] Hopper, N.J. &#38; Blum, M. 2001. Secure human identification 
protocols. In: Advances in Cryptology ASYACRYPT 2001, Lecture Notes in Computer Science, vol. 2248, 
pages 52 66. Springer-Verlag. [13] Juels, A. &#38; Weis, S. 2005. Authenticating pervasive devices with 
human protocols. In: Advances in Cryptography - CRYPTO 2005, Lecture Notes in Computer Science, Volume 
3126 of LNCS, pages 293 308. Springer-Verlag. [14] Gilbert, H., Robshaw, M., &#38; Silbert, H. 2005. 
 An active attack against HB+ a provable secure lightweight authentication protocol. Cryptology ePrint 
Archive, Report 2005/237. [Online]. Available from: http://eprint.iacr.org/2005/237.pdf. [Accessed on: 
06/05/2009]. [15] Bringer, J., Chabanne, H., &#38; Dottax, E. 2006. HB++: a Lightweight Authentication 
Protocol Secure Against Some Attacks. In IEEE International Conference on Pervasive Services, Workshop 
on Security, Privacy and Trust in Pervasive and Ubiquitous Computing - SecPerU, 2006. [16] Piramuthu, 
S. 2006. HB and related lightweight authentication protocols for secure RFID tag/reader authentication. 
In Proceedings of Collaborative Electronic Commerce Technology and Research - CollECTer 06 Europe Conference, 
9-10 June 2006, Basel, Switzerland. [17] Munilla, J. &#38; Peinado, A. 2007. HB-MP: A further step in 
the HB-family of lightweight authentication protocols. Computer Networks, 51(9):2262-2267, June 2007 
[18] O neill (Mcloone), M. 2008. Low-Cost SHA-1 Hash Function Architecture for RFID Tags. In: Hands-on 
of Conference on RFID Workshop. Singapore [19] Weis, S.A., Sarma, S.E., Rivest, R.L. &#38; Engels, D.W. 
2004. Security and Privacy Aspects of low - cost Radio Frequency Identification Systems. In: Proceedings 
of security in pervasive computing, volume 2802 of LNCS, pages 201-212. Springer-Verlog [20] Ohkubo, 
M., Suzuki, K. &#38; Kinoshita, S. 2003. Cryptographic approach to Privacy - Friendly Tags. In: Garfinkel 
S, Rosenberg B (eds.) RFID: applications, security, and privacy. Addison-Wesley, Reading. Available from: 
http://www.rfidprivacy.us/2003/papers/ohkubo. pdf. [Accessed: 01/10/08] [21] Feldhofer, M., Dominikus, 
S., &#38; Wolkerstorfer, J. 2004. Strong authentication for RFID systems using the AES algorithm. In 
Conference of Cryptographic Hardware and Embedded Systems, pages 357-370, Springer-Verlag.   
			