
 A Practical Algorithm for Recovering the Best Supported Edges of an Evolutionary Tree (Extended A bstract) 
 Vincent Berry* David Bryant t Tao Jiangt Paul Kearney~ Ming Li ¶ Todd Warehamll Haoyong Zhang** Abstract 
It is now routine for biologists to conduct evolutionary analyses of large DNA and protein sequence datasets. 
A computational bottleneck in these analyses is the recov-ery" of the topology of the evolutionary tree 
for a set of sequences. This paper presents a practical solution to this challenging problem. In particular, 
a new technique, called hypercleaning, is presented that can be combined with various tree-building algorithms 
to efficiently recon- struct from sequence data the best supported edges of the evolutionary tree. More 
precisely, the hypercleaning technique computes from sequence data a small subset of edges that is likely 
to contain most edges of the correct tree. A tree-building algorithm then attempts to iden-tify edges 
in the subset that are compatible with each other and hereby produces an evolutionary tree. We also propose 
a simple greedy agorithm that builds a tree by *.-~4-d~ress: D~partement d'Informatique Fondamentale 
et Applications, LIRMM, Universit4 de Montpellier II, France. Part of this work was done at the D~partement 
de Math~matiques, EURISE, Universit~ de Saint-Etienne, France. E-mail: vberry@lirmm.fr tSupported in 
part by a Bioinformatics Postdoc Fellowship from the CIAR, Evolutionary Biology Program and by NSERC 
and CGAT grants to D. Sankoff. Address: CRM Universit~ de Montrdal. E-mail: bryantQcrm.umontreal.ca **Supported 
in part by NSERC Research Grant OGP0046613, a CITO grant, and a UCR startup grant. Department of Computer 
Science, University of California, Riverside, CA 92521. jiang@cs.ucr.edu. On leave from McMaster University. 
~Supported in part by a CITO grant and NSERC Research Grant 160321. Address: Department of Computer Science, 
University of Waterloo, Waterloo, ON, N2L 3G1, Canada. E- mail: pkearney@math.uwaterloo.ca ISupported 
in part by NSERC Research Grant OGP0046506, a CITO grant, and the Steacie Fellowship. Address: Department 
of Computer Science, University of Waterloo, Waterloo, ON, N2L 3G1, Canada. E-mail: mli~math.uwaterloo.ca 
IIDepartment of Computer Science, Memorial University of Newfoundland, St. John's, NF AIB 3X5, Canada. 
Work done at McMaster University. Email: harold@garfield.cs.umn.edu **Department of Computer Science, 
University of Wa- terloo, Waterloo, ON, N2L 3G1, Canada. E-mail: h2zbang~wh.math.uwaterloo.ca screening 
the edges provided by hypercleaning in the de- creasing order of support from sequence data. This tech- 
nique is a substantial improvement over previous algo- rithms in its ability to recover edges of the 
evolution- ary tree. Hypercleaning also incorporates a detailed error model that relates errors in the 
data to the topology of the evolutionary tree. The results of a simulation study that strongly support 
the practicality, efficiency and ef- fectiveness of hypercleaning are also presented. 1 Introduction 
Advances in DNA sequencing technology this decade have resulted in an exponential growth in the amount 
of sequence data available for biological analysis [8]. As a consequence, it is now routine for biologists 
to conduct evolutionary analyses of large sequence datasets [16, 17, 21]. However, standard methods for 
inferring evolutionary trees from sequence data, such as maximum likelihood [14] and maximum parsimony 
[26], are plagued by computational difficulties. An evolutionary tree T for a set S of sequences is a 
rooted and edge weighted tree where the leaves of T are labeled bijectively by S. The topology of T (that 
is, T without edge weights) describes the speciation events resulting in the evolution of sequences in 
S from the root. The edge weights of T are proportional to the amount of evolution (sequence substitutions, 
insertions and deletions) between speciation events. This paper presents new insights on the difficult 
computational problem of determining the topology of an unknown evolutionary tree T given only the set 
S of sequences that label the leaves of T. This prob- lem is of practical importance since once the topol-ogy 
of T is known, T can be rooted and edge weights determined, resulting in a hypothesis describing the 
evolutionary history of the sequences in S. Determin-ing the topology of T is considered to be the most 
difficult computational step in the reconstruction of T from S. It is well-known that the topology of 
an evolu-tionary tree can be specified by its set of edge-induced bipartitions. An evolutionary tree 
T labeled by S contains the bipartition (X, Y) of S if there is an edge e in T such that T -{e} consists 
of two trees where one is labeled by X and the other by Y. This is denoted e = (X, Y) and we use the 
terms 'edge' and 'bipartition' interchangeably. A set of bipartitions is compatible if there is a tree 
that contains these bi- partitions. Compatibility of a set of bipartitions is characterized by the property 
that for every pair of bipartitions (A, B) and (C, D) in the set, at least one of A or B is a subset 
of C or D [11, 22]. One standard method for estimating evolution- ary trees is to determine a support 
function that mea- sures how well the sequence data S supports a bi-partition (X, Y) and then construct 
a tree topology from the best supported bipartitions. An example of this approach is the spectral decomposition 
method of [18]. In this paper we describe a support function based on quartet data. The set of all possible 
bipartitions is enormously large, and so, cannot be explicitly computed even for moderately sized S. 
Instead, we present a polynomial time algorithm for constructing a (polynomial-sized) collection of bipartitions 
most strongly supported quartet data. 1.1 Measuring the Support for a Bipartition Recently the quartet 
method for constructing evolu- tionary trees from sequence data has received much attention in the computational 
biology community [2, 6, 9, 13, 20, 7, 25]. Given a quartet~ of sequences {a,b,e,d} and an evolutionary 
tree T, the quartet topology induced in T by {a, b, c, d} is the path struc- ture connecting a, b, c 
and d in T. Given a quartet {a, b, c, d}, if the path in T connecting labels a and b is disjoint from 
the path in T connecting e and d, the quartet is said to be resolved and is denoted ablcd. Otherwise, 
the quartet is said to be unresolved and is denoted (abcd). The four possible quartet topologies induced 
by a quartet are depicted in Figure 1. ab l cd ac I bd ad I be {abcd) Figure 1: The four quartet topologies 
for quartet {a,b,c,d}. The quartet method first estimates the quartet topology induced in T by each 
quartet in S. There are many methods for estimating quartet topology, including maximum likelihood [14], 
maximum parsi- mony [15], neighbor joining [23] and the ordinal quar- tet method [20]. Although many 
of these methods cannot be feasibly appliedto the entire dataset S to infer the topology of T directly, 
they can be applied feasibly to infer tree topologies of size four. Restrict- ing the analysis to smaller 
subsets also allows the alignment of a greater number of sites, while combin- ing a large number of smaller 
analyses can lead to a more stable phylogenetic estimation [27]. Let Q be the set of these (~) inferred 
quartet topologies. The quartet topologies in Q can be viewed as pieces of a larger puzzle T. The second 
step of the quartet method, quartet recombination, is to recombine the quartet topologies into an evolutionary 
tree topology T' that is an estimate of T. A number of heuristics for quartet recombination are available. 
There are methods based on clustering [24, 1, 4], leaf insertion [25, 27], greedy selection and quartet 
closure rules [13], semi-definite programming [2], and smooth polynomial integer programming [19]. Exact 
polynomial time algorithms for various restricted cases are given by [6] and [10].  o,o,o,o, :X: :X: 
:X: :X: o oooo °o Figure 2: An evolutionary tree T and its set QT of induced quartet topologies. The 
computational challenge of quartet recombi- nation derives from the fact that the set Q of esti- mated 
quartet topologies can contain quartet errors. Define QT to be the set of quartet topologies induced 
by sequence quartets from S (see Figure 2). The quartet {a,b,c,d} is a quartet error if ab[cd E QT but 
ablcd ¢_ Q. Furthermore, {a, b, c, d} is a quartet error across edge e in T if the removal of e from 
T disconnects a and b from c and d. Effectively, this defines the distribution of quartet errors throughout 
T. Quartet errors also permit us to assess how well Q supports an edge e by counting the number of quar- 
tet errors across e. This measure can be extended to measure the support for any bipartition. For a bipar- 
tition (X,Y) define Q(x,Y) to be the set of quartet topologies of the form xx'lyy' where x,x' E X and 
y, y' E Y. The distance from a set of quartets Q to a bipartition (X, Y) is defined to be [Qcx,Y) -QI. 
 Note that the number of quartet topologies in Q(x,Y) is ]X](tX ] -1)]YI(iY]-1)/4. In order to compare 
the support for two bipartitions, the distance function must be normalized. We define the normalized 
distance from Q to (X, Y) by 41Q(x,Y) -QI 5(Q, (X,Y)) = [xl(]X I _ 1)ly]([y ] _ 1)" When (X,Y) is trivial 
(IX] = 1 or ]YI = 1), the normalized distance is defined to be 0. We will be using 6 as our bipartition 
support function: the bipartitions with smaller distances from Q are those better supported by Q. 1.2 
Interesting Neighborhoods of Q Using the normalize distance 5 defined above, we can implicitly define 
a bipartition list that orders all bipartitions of S by increasing distance from Q. Assuming that bipartitions 
of T are well-supported by Q (a claim supported by the simulation study presented in Section 3) and appear 
near the start of the list, the task is to generate a bipartition neighborhood of Q of the form {(x,y) 
I s(Q,(X,Y)) _<.r} which is called the closed r-neighborhood of Q. When the inequality is strict it 
is called the open r-neighborhood of Q. When r = 0 the closed r-neighborhood of Q corresponds to those 
bipartitions that have 0 quartet topology differences with Q. There is an O(n 4) time algorithm, called 
the Q* method, for recovering this set of bipartitions [6]. However, the Q* tree is a very conservative 
estimate of T since it includes only those bipartitions with 0 quartet topology difference with Q. We 
must search for bipartitions that are a greater distance from Q. When r = ~ .) the open r-neighborhood 
of Q is compatible [7]. An algorithm that constructs this r-neighborhood is called a local edge cleaning 
algorithm. In this paper we provide an O(n s) time local edge cleaning algorithm, the first polynomial 
time algorithm for this problem. We observe that the closed r-neighborhood of Q is not necessarily compatible 
[19]. Although a local cleaning algorithm is guaran- teed to return a set of compatible bipartitions, 
it is not guaranteed to return all n-3 compatible, nontriv- ial bipartitions of the underlying evolutionary 
tree T. In fact, the simulation study presented in Section 3 demonstrates that local edge cleaning often 
does not obtain all bipartitions of T. We widen the search by introducing a parameter rn > 0 and defining 
2m Best(Q,m) = {(X,y) l S(Q,(X,Y)) < j-~l}. Thus the set Best(Q, m') contains the set Best(Q, m) for 
all m ~ > m. Note that Best(Q, 1) is the set obtained by local edge cleaning and the limit of Best(Q,m) 
as m tends to zero is the set of bipartitions in the Q* tree. An algorithm that constructs the set Best(Q, 
m) is called a hypercleaning algorithm 1. In this pa-per we give a hypercleaning algorithm that takes 
O(nS f(2m) + n~ f(m)) time where f(m) = 4m2(1 + 2m) 4m. For bounded values of m, the hypercleaning algorithm 
runs in polynomial time making it fixed parameter tractable. The simulation study presented in Section 
3 indicates that small values of m are suf- ficient to recover all bipartitions of T. In particular, 
we have the following accuracy guarantee: THEOREM 1.1. The hypercleaning algorithm recovers all bipartitions 
(X, Y) in the underlying evolutionary tree T with fewer than m(]X[ -1)(]Y] - 1)/2 quartet elTors. Hence, 
if Q is reasonably correlated to T then hyper- cleaning is a powerful tool for estimating evolutionary 
trees. 1.3 Constructing trees from strongly sup-ported bipartitions The focus of this paper is the efficient 
generation of Best(Q, m), the set of bipartitions strongly sup- ported by Q. However, Best(Q, m) may 
contain in- compatible bipartitions. How can a tree be obtained from this set? Several options are considered 
here. The first is a simple greedy algorithm, that at-tempts to produce a tree that is as resolved as 
possi- ble and that maximizes the agreement with the input set Q. More precisely, it tries to select 
a maximal set of compatible bipartitions (X, Y), with the smallest distance to Q, i.e., minimizing ~-~(x,Y) 
5(Q, (X, Y)). Let (X1,Y1), (X~.,Y.2), ..., (Xk,Yk) be the biparti- tions in Best(Q, m) ordered by increasing 
normalized distance to Q. The greedy algorithm selects the fol- lowing subset, called Comp(Q, m), of 
Best(Q, m): (X1,Y1) e Comp(Q,m) (Xj,Yj) E Comp(Q,rn) if (Xj,Yj) is compatible with all (Xi, Yi) E Comp(Q, 
m) where i < j. 1The term "hyper" indicates that m can take on values greater than 1. Observe that Comp(Q,m) 
is a set of compati-ble bipartitions and can be easily obtained from Best(Q,m). The simulation study 
of Section 3 demonstrates that this simple algorithm obtains sys- tematically and significantly better 
results than the local cleaning algorithm even when m = 2 illustrating the potential of hypercleaning. 
Note that the above simple algorithm is only a heuristic to select the maximal set of compatible bipartitions 
that minimizes the sum of normalized distances to Q. For other criteria there are exact polynomial time 
algorithms. For example, having inferred a set Best(Q,m) with enough edges to construct a tree, we can 
aim at selecting the maximal set of compatible bipartitions (X, Y) minimizing max(x,y) {5(Q, (x, Y))}, 
which is the Loo norm on bipartitions. For this criterion, we can use the exact polynomial time algorithm 
of [9] which runs in O([Best(Q, m)[ 2) time. Other criteria for which we have no exact polyno- mial time 
algorithms also make sense. For example, we may consider selecting the maximal compatible subset T of 
bipartitions in Best(Q, m) that minimizes [QT - Q[. This criterion differs from the one used by the greedy 
heuristic presented above in the sense that each incorrect quartet topology inferred is here ac- counted 
for only once and not with every bipartition (X, Y) by which it is induced. This criterion is also strongly 
related to the principle of the well-known O(n 4) time quartet puzzling heuristic [25] (whose el- ementary 
step aims at producing a tree minimizing the number of quartets of Q it contradicts), since in a fully 
resolved tree every incorrect quartet inferred implies a correct quartet not recovered. However, hy- 
percleaning has an advantage over quartet puzzling in that hypercleaning preselects the set Best(Q,m) 
of bipartitions to which we can confidently restrict ourselves (cf simulation results). When removing 
the maximal resolution constraint, i.e. not seeking a tree as resolved as possible, the O(n 3 + IQ[) 
time heuristic and bootstrap procedure of [3] can be consulted. 1.4 Summary of Results In this paper 
we present an O(n 5) time local edge cleaning algorithm. This is the first polynomial time algorithm 
for this problem [7]. A more powerful and flexible technique than local edge cleaning, called hypercleaning, 
is introduced. We give a polynomial bound on the number of bipartitions inferred by the hypercleaning 
technique, namely O(n3f(2m)), where f(m) = 4m2(1 + 2m) ~m. We present an O(n 5 f(2m)+n7f(rn)) time hyper- 
cleaning algorithm. When m is bounded this yields a polynomial time algorithm. We present a simulation 
study showing the signif- icant increase in accuracy due to hypercleaning (even with m = 2) over the 
local edge cleaning technique. However, due to its efficiency, local edge cleaning re- mains useful for 
processing large data sets. Results also show that hypercleaning combined with a greedy bipartition selection 
algorithm almost always recov- ers the underlying evolutionary tree. 2 The Hypercleaning Algorithm Let 
S = {Sl,S2,...,sn}, Sk = {Sl,S2,...,Sn} and Qk be the subset of Q induced by Sk. The hypercleaning algorithm 
proceeds by first computing sets of the form Best~v(Qk,rn)= { (X,Y) Ix E X,y E Y, there are fewer than 
m quartet errors across (X, Y) involving x and y} for all x,y E S and 1 < k < n in time O(n5f(m)) where 
f(m) = 4m2(1 +2m) Ym. These sets are then combined to form the sets Best(Qk,m) = {(X,Y)IS(Q, (X,Y)) < 
2m/(IXllY[)} for all 1 < k < n in O(nSf(2m)+nTf(m)) time. Ob- serve that Best(Q,m) = Best(Qn,m). Hence, 
the time required to construct is O(nSy(2m) + nTf(m)). We note that, unlike quartet puzzling [25], the 
re-sulting set of bipartitions does not depend on the ordering Sl, s2,... , sn. 2.1 Computing Bestzv(Qk,m) 
Let x and y be two sequences in S and 1 < k < n. We define a recurrence for Best.~y(Qk,rn) by the following 
theorem: THEOREIVl 2.1. Ilk = 1 then Best~y(Qk,m) = O. If k > 2 then Best~v(Qk,m) C_ Lxu U R~v U M~v 
 where L~v = {(XU{sk},Y) l(X,Y)eBest~v(Qk_,,m) } R~v = {(X, YtA {sk}) l (X,Y) e Best~v(Qk_,,m)} M~ v 
= {({sk},Sk-1)} Proof. When k = 1 there are not enough sequences to form a bipartition, and so, Best~u(Qk,m) 
= O. Suppose k _> 2 and (X U {sk},Y) E Best~y(Qk,m). If (X U {Sk},Y) is trivial then either Y = {si} 
for i < k or X = 9. In the former case (X,Y) E Best~u(Qk-l,m). In the latter case (X U {Sk},Y) E M~y. 
Suppose (X U {Sk},Y) is not trivial. Since (X U {Sk}, Y) E Bestxy(Qk, m) there are fewer than m quartet 
errors across (X U {Sk},Y) involving x and y. It follows that there are fewer than m errors across (X,Y) 
involving x and y, and so, (X,Y) E Best~y(Qk-l,m). The algorithm for computing Best~u(Qk,m) for all x,y 
E S and 1 _< k <_ n follows from Theorem 2.1: For all x,y E S, for k ranging from 1 to n, and for all 
(X, Y) E L~ u U R~u U M,y, place (X, Y) in Bestzy(Qk,m) if there are fewer than rn quartet errors across 
(X, Y) involving x and y. In order to analyze tile complexity of this algo- rithm a bound on the size 
of each set Bestxy(Qk, m) is obtained. To begin, define f(m) = 4m2(1 + 2m) 4m. THEOREM 2.2. The number 
of bipartitions in Bestxy(Qk, m), for any 1 < k < n, is O(nf(m)). Proof. Let (X, Y) be a bipartition 
in Best~u(Qk, m) with x E X and y E Y. We first bound the number of bipartitions (X', Y') E Best~y(Q, 
m) with x E X' and y E Y' that are incompatible with (X, Y). There exists nonempty sets A = X M Y~ and 
B = X ~ N Y since (X, Y) and (X', Y') are not compatible. Let G be a directed graph with vertex set X 
and for each u,v E X, (u,v) is an edge of G if uxlvy E Q. Notice that an edge from a E A to v E X -A 
indicates that {a, v, x, y} is a quartet error across (X', Y') involving x and y since v,x E X' and a, 
y E Y'. It follows that the number of edges from vertices in A to vertices in X -A is less than m. Analogously, 
a directed graph can be constructed on vertex set Y with the result that the number of edges from vertices 
in Y -B to B is less than m. Notice that, for each a E A and b E B, {a, b, x, y} is a quartet error across 
either (X, Y) or (X', Y'). It follows that IAIIB] < 2m. Consequently, IAI < 2m and IBt < 2m. The number 
of bipartitions (X', Y') incompatible with (X, Y) is bounded by the number of choices for A _C X such 
that IA] < 2m and there are less than m edges from A to X -A in the above graph with vertex set X. Similarly, 
the number of choices for B _C Y such that IBI < 2m and there are less than m edges from Y -B to B in 
the above graph with vertex set Y. We use the following lemma to give us this bound where for a directed 
graph G, in(v) and out(v) denote the out-degree and in-degree of a vertex. Similarly, let in(V') and 
out(V') denote the number of edges leaving or entering a subset V' of the vertex set. LEMMA 2.1. Let 
G = (V,E) be a tournament. There are at most (k + 2m/k) k subsets V' of V such that IV'I = k and in(V 
~) < m. Thus, by symmetry, there are at most (k + 2re~k) k subsets V' of V such that IV' I = k and out(V') 
< m. Proof. Omitted. When a = [A I and b = IBt, the number of bipartitions (X', Y') is bounded by (a 
+ 2m/a)a(b + 2re~b) b. Summing over all set sizes we have the bound 2rn 2m + 2m/a)°(b + 2re~b) b a=l 
b=l 2m < 2m(1 + 2m) 2m + 2 /a) ° <_ 4m2(1 + 2m) 4m Now let (X1,Y1),(X2,Y2),...,(Xh, Yh) be a maximal 
compatible collection of bipartitions in Best~y(Q,m). Every other bipartition in Best~y(Q,m) is incompatible 
with at least one (Xi, Yi). Since h = O(n) we have that IBest~u(Q, m)l is O(nf(m)). There are O(n 3) 
sets Best~y(Qk, m) to construct. Constructing each set Bestxy(Qk, m) takes time pro- portional to the 
size of Best~y(Qk-l,m) times the complexity of testing if a bipartition has fewer than m quartet errors 
involving x and y. Without loss of generality suppose the bipartition is (X U {Sk},Y) and is not trivial 
(trivial bipartitions have no quartet errors). It follows from Theorem 2.1 that (X, Y) E Best.~y(Qk_l,m). 
At this point assume that on the previous iteration we have counted and stored the number of quartet 
errors across (X, Y) involving and y. It then suffices to count the number of quar- tet errors across 
(X, Y) involving x, y and sk. There are O(n) of these quartets to examine. It follows that the complexity 
of constructing all sets Best~u(Qk, m) is 2.2 Computing Best(Qk,m) We define a recurrence for Best(Qk,m) 
by the fol- lowing theorem: THEOREM 2.3. If k = 1 then Best(Qk,m) = 9. If k > 2 then Best(Qk, m) C L 
U R U M 292 where L = {(X U {s~},Y) : (X,Y) Best(Qk_l,rn)} R = {(X,Y u {sk}): (X,Y) Best(Qk-x,m)} 
M = U=~sk_~Bestzsk (Qk, m) Proof. Suppose (X U {sk},Y) E Best(Qk,m) but (X,Y) ~ Best(Qk-t,rn). It follows 
that there are less than mlXI(IY I - 1)/2 quartet errors across (X U {sk},Y) but at least re(IX I -1)(IY 
I - 1)/2 quartet errors across (X, Y). Let sin denote the number of quartet errors across (X U {Sk}, 
Y) involving sk and let Sour denote the number of quartet errors across (X U {sk}, Y) not involving sk: 
   mlXl(IYI-1) 8in + Sout < 2 Sour > m(IXl- 1)(IYI- 1) - 2 Sin m(IY I - 1) 2 A key to the design 
of the hypercleaning algo- rithm is that quartet errors are relatively sparse for small m: there are 
[X[(IX [ - 1)[YI([Y I - 1)/4 quar- tets across e = (X, Y) but only m(lXl- 1)(IYI- 1)/2 quartet errors. 
This ratio suggests that we consider the average number of quartet errors across e involv- ing a pair 
of labels x X and y Y. Each quartet error across (X U {Sk }, Y) involving sk also involves two elements 
Yl and Y2 from Y. Hence, the average number of quartet errors across (X tO {sk}, Y) involving sk per 
element of Y is less than 2m(lY[-1)/21Y[ < m. This implies that there exists y E Y such that sk and y 
are involved in less than m quartet errors across (X U {sk},Y). In particular, (X U {sk},Y) E Best~s-k(Qk,m) 
for some y E Sk-x. The algorithm for computing Best(Qk,m), for 1 <_ k < 'n follows from Theorem 2.3: 
For k ranging from 1 to n, and for all (X,Y) E L U RU M, place (X,Y) in Best(Qk,rn) if there are fewer 
than re(iX I -1)([Y I - 1)/2 quartet errors across (X, Y). In order to analyzethe complexity of this 
algo- rithm a bound on the size of each set Best(Qk, m) is obtained. Let f be defined as in Section 2.1. 
THEOREM 2.4. The number of bipartitions in Best(Qk,m), for any 1 < k < n, is O(n3 f(2m)). Proof. Let 
(X, Y) E Best(Qk, rn). Each quartet error across (X, Y) involves 4 pairs of the form x E X and y E Y. 
Suppose every pair x E X and y E Y is involved in at least 2m quartet errors across (X,Y). This requires 
at least 2mIXI[Y[/4 = rnIX]lY[/2 quartet errors across (X,Y). However, this is a contradiction since 
(X,Y) E Best(Qk,m). We conclude that (X, Y) E Best=u(Qk, 2m) for some pair x E X and y E Y. This yields 
the following: IBest(Qk'm)l < E IBest~u(Qk'2rn)] x,y6S By Theorem 2.2 it follows that Best(Qk,m) is 
O(n3f(2m)). There are O(n) sets Best(Qk,m) to construct. If (X,Y) E Best(Qk-x,m) then to determine if 
(X U {sk},Y) E Best(Qk,m) (or to determine if (X,Y U {sk}) E Best(Qk,m)) we can assume that on the previous 
iteration we have counted and stored the number of quartet errors across (X,Y). To this we add the number 
of quartet errors across (X U {s~},Y) that involve sk. There are O(n 3) of these quartets to examine. 
Finally, there are IBest(Qk_l,m)l = O(nf(2m)) bipartitions (X,Y). Otherwise, if (X,Y) E Bestzsk(Qk,m) 
then we can use an adaption of the path covering algo-rithms of [5, 6] in O(n 4) time. Finally, there 
are IBestzs~(Qk,m)I = O(nf(m)) bipartitions (X,Y) and x takes on O(n) values. This results in the time 
complexity of O(nh f(2m) + nZ f(m)). The overall complexity to compute Best(Q, m) is O(n5 f(m) + n5 f(2m) 
+ nZ f(m)) = O(nS f(2rn) + nTf(m)). This establishes the problem of determin- ing Best(Q,m) as fixed 
parameter tractable [12]. Like other fixed parameter tractable problems, we ex- pect more efficient implementations 
to be achieved. 2.3 Local edge cleaning To improve the complexity of the hypercleaning algo- rithm when 
m =- 1 we introduce an intermediary set of bipartitions. Let x be a sequence in S and define the set 
of bipartitions Bestx(Q, 1) = {(X,Y) Ix E X and there are less than (IYt-1)/2 quartet errors across (X, 
Y) involving x}. Then Best=(Q, 1) is com- patible, and can be constructed in O(n a) time by first computing 
sets of the form Best=u(Qk , 1), for all x, y E S and 1 < k < n and then computing sets of the form Best~(Qk), 
for all x E S and 1 < k < n using the following recurrence: THEOREM 2.5. If k = 2 then Best~(Qk,1) = 
{({x}, {H)}- When k > 3 we have Best=(Qk, 1) C L= U R= U M~ where L~ {(XU {sk},Y) : (X,Y) Best~(Qk_l,1)} 
R~ {(X, Yu {sk}): (X,Y) Best~(Qk_l,1)} Mx -= Best,s~ (Qk, 1) Proof. Omitted. Finally, Best(Qk, 1) can 
be constructed for 1 < k < n using the following recurrence in O(n 5) time: THEOREM 2.6. If k = 2 then 
Best(Qk,1) {({x}, {y})}. When k > 3 we have Best(Qk, 1) c L' u R' U M' where L' = {(XU{sk},Y) : (X,Y) 
E Best(Qk_l,1)} R' = {(X, YU {Sk}): (X,Y) e Best(Qk_l,1)} M' = Bestsk(Qk,1) Proof. Omitted. Simulation 
Results The simulation study was designed to address the following questions: Does hypercleaning obtain 
more edges of the un- known evolutionary tree than local edge clean- ing?  How large must rn be so that 
Best(Q,m) con-tains all edges of the unknown evolutionary tree?  To answer these questions, DNA sequences 
were artificially evolved using the Kimura 2 parameter model of evolution [26] with transition/transversion 
ratio of 5 : 1 on an evolutionary tree T sampled from the Ribosomal Database Project prokaryotic tree 
[21]. This tree T represents the evolutionary history of the TRP saccharophilum subgroup and contains 
10 leaves. The tree appears in Figure 3. Site-to-site rate variance was simulated using the gamma function 
with parameter 1. To better explore the parameter space, sequence length and edge length were varied. 
More specifically, the sequence length was varied over values 100, 200, 500 and 1000. The evolutionary 
tree T was scaled by factors 0.25, 0.5, 1.0 and 2.0 so that trees with recently diverged sequences and 
trees with distantly diverged sequences were examined. For each set of sequences generated, a quartet 
set Q was obtained by applying the ordinal quartet method[20] to the sequences. The hypercleaning algorithm 
was then applied to Q to obtain Best(Q,O), Best(Q, 1), ..., Best(Q,5). Similarly, the sets Comp(Q,O), 
Comp(Q, 1), ..., Comp(Q, 5) were obtained. The results appear in Table 1. Each cell of the table is indexed 
by an edge length scaling factor, a value of m between 0 and 5 and a sequence length. Each cell contains 
four values computed as the average over 200 trials. The first value is the percentage of the nontrivial 
edges in T that appear in Best(Q, m). It is clear from the results that as m increases Best(Q, m) approaches 
100%. In particular, Best(Q,5) almost always contains every nontrivial edge of T. Notice that Best(Q,3) 
approaches 100% for sequence lengths greater than 200. This clearly demonstrates that hypercleaning is 
effective for small values of m. The second value is the number of bipartitions in Best(Q,m) expressed 
as a percentage of the number of nontrivial edges in T. The ratio of the first value to the second value 
is the density of nontrivial edges of T in Best(Q,m). As m increases it is clear that this density decreases 
rapidly supporting the assumption that edges of T cluster near the beginning of the bipartition list 
defined by the support function d. The third value is the percentage of the nontriv- ial edges in T that 
appear in Comp(Q, m). The third value measures the accuracy of the local cleaning algorithm (m = 1) and 
of the greedy algorithm (m > 1) that selects edges of T from Best(Q,m). In all cases, there is a significant 
improve of hypercleaning with only m = 2 over local cleaning (i.e., when m = 1). However, it's lower 
time complexity makes local cleaning still useful for dealing with larger data sets. For moderate sequence 
lengths of 200 to 500, Comp(Q, m) contains approximately 85% of T's nontrivial edges. Since T has 7 nontrivial 
edges this implies that Comp(Q, m), on average, con- tains all edges of T except 1. The model tree T 
used in the simulation contains a very short edges that is difficult to recover. For a less chal- lenging 
tree it is expected that accuracy will only improve. Note that as sequence length increases so does accuracy. 
This is to be expected since as sequence length increases so does the amount of information available 
for recovering edges of T. OTrp.saccha#Trcponema saccharophilum str PB O Trp.CA#Tmponema sp. str CA 0 
Trp.succin#Trcponema str 6091 succilfifacicns O Trp.pectin~mpomema pectinovorum O Trp.bryant~reponeraa 
bryantii sir R US- I O ¢nv.spUN2Oclone UN2 OTrp.~top~Freponcmamahophilum t . ~3 str.spaO 12t~tr.sp40-12 
f env.spUN39#~loneUN39 env.spUN 10#clone UN10 .01 Figure 3: The TRP saccharophilum subgroup tree. The 
values for m = 1 indicate the number of nontrivial edges of T obtained by local edge cleaning. Comparing 
these to the rn = 5 values it is clear that hypercleaning in conjunction with the greedy algorithm is 
much more effective at obtaining nontrivial edges of T. The fourtla value is the number of bipartitions 
in Comp(Q; m) expressed as a percentage of the number of nontrivial edges in T. This provides a measure 
of the degree of resolution of the tree inferred by the greedy heuristic. In all cases, Comp(Q, 2) gives 
an almost fully resolved tree (in some cases the tree is already fully resolved), which explains that 
few more improvements are observed when resorting to higher values of m, i.e. going from m = 2 to rn 
= 5. In the study, Best(Q,5) most often contains all nontrivial edges of T and Comp(Q,5) is 100%. However, 
Comp(Q, 5) does not contain all nontrivial edges of T. This indicates that for some bipartition (X', 
Y') not in T and some bipartition (X,Y) in T, that 5(Q, (X',Y')) < 5(Q, (X, Y)). Consequently, the greedy 
algo- rithm is fooled since an incorrect bipartition is ranked ahead of a correct edge of T. Future re-search 
includes the development of less simplis- tic algorithms for selecting a set of compatible bipartitions 
from Best(Q, rn). References [1] H. J. Bandelt and A. Dress. Reconstructing the shape of a tree from 
observed dissimilarity data. Advances in Applied Mathematics, 7:309-343, 1986. [2] A. Ben-Dot, B. Chor, 
D. Graur, R. Ophir, and D. Pelleg. From four-taxon trees to phylogenies: The case of mammalian evolution. 
Proceedings of the Second Annual International Conference on Computational Molecular Biology, pages 9-19, 
1998. [3] V. Berry., G. Gascuel and G. Caraux Choosing the tree which best explains the data: another 
look at the bootstrap in phylogenetic reconstruction. Com-putational Statistics and Data Analysis, to 
appear, 2000. [4] V. Berry. Phyloquart vl.3 -quartet programs for phylogeny reconstruction. Technical 
report RR 99150, LIRMM, 1999. [5] V. Berry and D. Bryant. Faster reliable phyloge- netic analysis. Proceedings 
of the Third Annual In- ternational Conference on Computational Molecular Biology, pages 59-68, 1999. 
[6] V. Berry and O. Gascuel. Inferring evolutionary trees with strong combinatorial evidence. Proceed-ings 
of the Third Annual International Comput-ing and Combinatorics Conference, pages 111-123, 1997. [7] V. 
Berry, T. Jiang, P. Kearney, M. Li, and T. Ware- ham. Quartet cleaning: Improved algorithms and simulations. 
In European Symposium on Algo-rithms, 1999. [8] M. Boguski. Bioinformatics - a new era. In S. Bren- ner, 
F. Lewitter, M. Patterson, and M. Handel, ed- itors, Trends Guide to Bioinformatics, pages 1-3. Elsevier 
Science, 1998. [9] D. Bryant. Structures in Biological Classifica- tion. Ph.D. Thesis, Department of 
Mathematics and Edge Length Sequence Length Scalin~ Factor m 100 200 500 1000 0.5 0 28 (31) 28 (31) 
35 (37) 35 (37) 50 (51) 50 (51) 63 (64) 63 (64) 0.5 1 50 (64) 50 (64) 62 (73) 62 (73) 82 (87) 82 (87) 
89 (93) 89 (93) 0.5 2 68 (102) 63 (87) 80 (112) 74 (93) 92 (119) 88 (98) 97 (115) 94 (100) 0.5 3 84 (216) 
65 (98) 93 (231) 76 (100) 98 (238) 89 (100) 100 (237) 94 (100) 0.5 4 92 (387) 66 (99) 98 (415) 76 (100) 
100 (439) 89 (100) 100 (450) 94 (100) 0.5 5 96 (666) 66 (100) 99 (703) 76 (100) 100 (725) 89 (100) 100 
(733) 94 (100) 1.0 0 28 (29) 28 (29) 35 (37) 35 (37) 51 (52) 51 (52) 61 (61) 61 (61) 1.0 1 57 (66) 57 
(66) 68 (76) 68 (76) 83 (87) 83 (87) 90 (92) 90 (92) 1.0 2 74 (109) 70 (92) 84 (117) 78 (96) 95 (118) 
90 (99) 97 (116) 95 (100) 1.0 3 87 (225) 73 (100) 95 (233) 80 (100) 99 (238) 91 (100) 100 (237) 95 (100) 
1.0 4 95 (408) 73 (100) 99 (417) 80 (100) 100 (438) 91 (100) 100 (448) 95 (100) 1.0 5 98 (700) 73 (100) 
lOO (715) 80 (lOO) 100 (724) 91 (100) 100 (727) 95 (100) 2.0 0 24 (25) 24 (25) 30 (31) 30 (31) 46 (47) 
46 (47) 63 (63) 63 (63) 2.0 1 50 (60) 50 (60) 68 (76) 68 (76) 82 (86) 82 (86) 92 (93) 92 (93) 2.0 2 69 
(107) 63 (89) 85 (118) 78 (96) 94 (120) 90 (99) 99 (114) 96 (100) 2.0 3 88 (227) 67 (99) 96 (234) 80 
(100) 100 (239) 90 (100) 100 (234) 96 (100) 2.0 4 96 (399) 68 (100) 99 (414) 80 (100) 100 (431) 90 (100) 
100 (453) 96 (100) 2.0 5 99 (704) 68 (100) 100 (711) 80 (100) 100 (715) 90 (100) 100 (727) 96 (100) 
Table 1: Summary of the Simulation Study Results Statistics, University of Canterbury, 1997. [19] T. 
Jiang, P. E. Kearney, and M. Li. Orchestrat- [10] D. Bryant and M. Steel. Fast algorithms for con- ing 
quartets: Approximation and data correction. structing optimal trees from quartets. Proceedings Proceedings 
of the 39th IEEE Symposium on Foun- of the lOth Annual ACM-SIAM Symposium on Dis- dations of Computer 
Science, pages 416-425, 1998. crete Algorithms, pages 147-155, 1999. [20] P. E. Kearney. The ordinal 
quartet method. Pro- [11] P. Buneman. The recovery of trees from measures ceedings of the Second Annual 
International Con-of dissimilarity. In F.R. Hodson, D.G. Kendall, and ference on Computational Molecular 
Biology, pages P. Tautu, editors, Mathematics in the Archaeological 125-134, 1998. and Historical Sciences, 
pages 387-395. Edinburgh [21] Bonnie L. Maidak, James R. Cole, Charles T. University Press, Edinburgh, 
1971. Parker, George M. Garrity Jr, Niels Larsen, Bing Li, [12] P. Downey and M. Fellows, Parameterized 
Com- Timothy G. Lilburn, Michael J. McCaughey, Gary J. plexity, Springer-Verlag, 1998. Olsen, Ross Overbeek, 
Sakti Pramanik, Thomas M. [13] P. ErdSs, M. Steel, L. Szdkely, and T. Warnow. Con- Schmidt, James M. 
Tiedje, and Carl R. Woese. structing big trees from short sequences. Proceed-A new version of the RDP 
(Ribosomal Database ings of the 2~th International Colloquium on Au-Project). Nucleic Acids Research, 
27:171-173, 1999. tomata, Languages, and Programming, 1997. [22] C. A. Meacham and G. F. Estabrook. Compatibility 
[14] J. Felsenstein. Evolutionary trees from DNA se-methods in systematics. Ann. Rev. Ecol. Syst., quences: 
A maximum likelihood approach. Journal 16:431-446, 1985. of Molecular Evolution, 17:368-376, 1981. [23] 
N. Saitou and M. Nei. The neighbor-joining [15] W. M. Fitch. Toward defining the course of evolu- method: 
A new method for reconstructing phyloge- tion: Minimal change for a specific tree topology. netic trees. 
Molecular Biology and Evolution, 4:406-Systematic Zoology, 20:406-41, 1971. 425, 1987. [16] V. A. Funk 
and D. R. Brooks. Phylogenetic System- [24] S. Sattath and A. Tversky. Additive similarity trees. atics 
as the Basis for Comparative Biology. Smith-Psychometrika, 42:319-345, 1977. sonian Institution Press, 
1990. [25] K. Strimmer and A. yon Haeseler. Quartet puz- [17] R. Gupta and B. Golding. Evolution of 
HSP70 gene zling: A quartet maximum-likelihood method for re- and its implications regarding relationships 
between constructing tree topologies. Molecular Biology and Archaebacteria, Eubacteria and Eukaryotes. 
Jour-Evolution, 13(7):964-969, 1996. nal of Molecular Evolution, 37:573-582, 1993. [26] D. L. Swofford, 
G. J. Olsen, P. J. Waddell, and [18] M. D. Hendy and D. Penny. Branch and bound D. M Hillis. Phylogenetic 
inference. In D. M. Hillis, algorithms to determine minimal evolutionary trees. C. Moritz, and B. K. 
Mable, editors, Molecular Mathematical Biosciences, 59:277-290, 1982. Systematics, 2nd Edition, pages 
407-514. Sinauer Associates, Sunderland, Massachusetts, 1996. [27] S. Willson. Measuring inconsistency 
in phylogenetic trees. Journal of Theoretical Biology, 190:15-36, 1998.  
			