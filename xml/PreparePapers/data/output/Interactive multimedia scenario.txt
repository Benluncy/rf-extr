
 INTERACTIVE MULTIMEDIA SCENARIO: MODELING &#38; RENDERING M. Vazirgiannis I. Stamati M. Trafalis M. 
Hatzopoulos Dept of El. &#38; Comp. Eng., National Dept. of Informatics, University of Athens, Technical 
University of Athens, TYPA buildings, 15771, Athens, Greece 15773, Athens, Greece mike@di.uoa~gr michalis@dbnet.ntua~gr 
 KEYWORDS Interactive Multimedia Presentations, Event Modeling, Event Detection, Scenario Modeling, Scenario 
Rendering ABSTRACT In this paper we present an integrated System for modeling &#38; rendering _Interactive 
Multimedia A_.p.plications ~(IMAPs). The modeling covers widely the issue of interactive scenaria and 
its constituents: events (atomic and complex, as carriers of interaction) and spatiotemporal composition 
of presentation actions. The result of IMAP specification under this approach is a declarative script. 
In order to render the presentation specifications, the appropriate algorithms have to be developed. 
We present the transformation into algorithms of the declarative specifications eroduced during the authoring 
phase. Subsequently, the scenario rendering strategy is presented, based on a generic s,ngle threaded 
architecture that regularly detects and evaluates events that occur in the presentation context. The 
detected events trigger the execution of the appropriate-synchronized presentation actions imposed by 
the scenario. The system is fully implemented using the authoring tool Asymetrix/Toolbook 4.0 under Windows 
95. INTRODUCTION An Interactive Multimedia Application (IMAP) involves a variety of individual multimedia 
objects presented according to the IMAP scenario. The multimedia objects that participate in the IMAP 
are transformed, either spatially or temporally, in order to be presented according to author's requirements. 
Moreover, the author has to define the spatial and temporal order of objects within the application context 
and to define the relationships among them. Finally, the way that the user will interact with the application 
as well as the way that the application will Ixeat application or system events, has to be defined. The 
related application domains ate quite challenging and demanding. Among others, these can be: interactive 
"IV, digital movies, virtual reality applications. In the framework of IMAPs we consider the following 
as cornerstone entities: * Events: fundamental entities of interaction in the context of the IMAP, raised 
by user actions, or by objects participating in the IMAP. They may be simple (i.e. not decomposable in 
the IMAP context) or complex. For details refer to [16]. Permission to make digital/hard copy of all 
or part of this work for personal or cl~sroom use is granted without lee provided that copies are not 
made or distributed for profit or commercial advantage, the copyright notice, the title of the publication 
and its date appear, and notice is given that copying is by permission of ACM, Inc. To copy otherwise, 
to republish, to post on servers or to redistribute to lists, retlu res prior specific permission and/or 
a fee ..........  Spatiotemporal Composition: it is an essential part of an IMAP and represents the 
spatial and temporal ordering of media objects in the corresponding domain. At this point, the issue 
of spatial and temporal relationships among the objects is critical [17].  Scenario: it stands for the 
integrated behavioral contents of the IMAP, i.e. what kind of events the IMAP will consume and what presentation 
actions will be triggered as a result. In our approach, the scenario consists of a set of self- standing 
functional units (scenario tuples) that include: triggering events (for start and stop), presentation 
actions (in terms of spatio temporal compositions) to be carried out in the context of the scenario tuple 
and related synchronization events.  s Scenario Rendering: it is the process of defining an execution 
plan for the IMAP scenario, i.e. when, where, for how long and under what transformations each media 
object will be presented. This task is rather straightforward in "pre-orchestrated" applications [10], 
while in the case of IMAPs with rich interaction it becomes more complicated. In this paper we present 
an integrated system for modeling and rendering IMAPs. The modeling covers widely the issue of interactive 
scenaria and its constituents: events (atomic and complex) and spatiotemporal composition of presentation 
actions. The result of IMAP specification under this approach is a declarative script. The appropriate 
algorithms have to be developed in order that the presentation specifications are rendered. We present 
the transformation of the declarative specifications into procedures. The rendering of the scenario is 
based on a generic single threaded architecture that regularly detects and evaluates events that occur 
in the presentation context. The detected events trigger the execution of the appropriate synchronized 
presentation actions included in the scenario tuples. The system (both the authoring and the rendering 
environment) was fully implemented using the authoring tool Assymetrix/Toolbook 4.0 under Windows 95. 
The paper is organized in the following way: in the next section we briefly describe the theoretical 
model for the representation of IMAPs. In Section 3. we elaborate the architecture of the IMAP rendering 
system which is presented in detail. There, we present the event detection and evaluation mechanism, 
the IMAP engine architecture and the presentation actions triggering approach. In Section 4. we present 
a sample application, namely its verbal scenario and the specifications of the participating objects, 
events and scenario tuple. In the conclusions we present related work and we conclude by summarizing 
and discussing further research and development directions. THE IMAP MODEL Spatiotemporal Composition 
To support complex Interactive Multimedia Applications (IMAPs), a system that offers both a suitable 
high-level modeling of IMAPs and interactive multimedia presentation capabilities is needed. The modeling, 
should comprise the spatial and temporal composition of the participating media, the definition of interaction 
between the user and the IMAP (external interaction), the interaction between internal IMAP entities 
(internal interaction) and the specification of media synchronization in the temporal and spatial domains. 
The representation of an IMAP scenario is a complex issue since we have to deal with representation of 
interactivity and events, and also with presentation of media objects (involving spatial and temporal 
synchronization). We claim that in modeling IMAPs, more emphasis should be put to the interactive parts. 
In principle, the modeling of interaction should cover all the procedures that involve the machine, the 
user and the objects participating in an IMAP. As regards the external interaction, apart from button 
manipulations, it should also include scrolling, drag and drop actions and temporal access control actions 
for multimedia objects (such as: "start", "stop", "pause", "resume"). However, interaction is not limited 
to the actions of, or interaction between a user and the IMAP; it can also be IMAP internal. For instance, 
objects that participate in an IMAP interact spatially and/or temporally with each other, e.g. an audio 
clip ends and this event triggers the start of a video clip. Moreover, resources or devices produce messages/signals 
that may trigger actions in the context of the IMAP, e.g. if no audio device is available the equivalent 
text representation is displayed. When presenting multimedia scenarios, all occurring interactions must 
be sensed and reacted to as fast as possible. Hereafter we define some fundamental concepts that will 
be used in IMAP modeling presented in the following sections. Basic Concepts First, we refer to some 
fundamental entities that are essential for the representation of spatial and temporal features of objects 
participating in an IMAP: spatial instance, is a point in the two dimensional space represented by its 
orthogonal coordinates (x,y) spatial_instance :== "('x "," y ")" temporal instance, is a point in the 
temporal space represented by the length of the temporal interval (in some accepted unit) that has elapsed 
from some reference point: temporaUnstance :== TIME origin of the spatiotemporal space (of the IMAP) 
is the spatial and temporal origin of the application: 0 :--'= application start :(0,0,0) spatiotemporal_instance: 
is a point in the spatiotemporal space of the IMAP represented by the corresponding spatial and temporal 
instance: spatio._temporal._instance :== ®l(spatial_instance,temporaLinstance) The fundamental utility 
of Multimedia objects (actors) is to be presented according to the authors' requirements. The primitive 
actions for presentation of time dependent media objects are defined as Temporal Access Control (TAC) 
Actions in [l 1]. However there are features of presentation related to the spatial domain (i.e. presentation 
of an image at a specific point, hiding an image, moving an object between presentation layers, etc.). 
We would like to remark that the dominating aspect in most of the cases is the temporal domain. Therefore, 
the TAC actions are extensively addressed in the literature unlikely to spatial ones. 463 The "action" 
concept is related to the presentation of actors (multimedia objects) participating in IMAPs. In the 
past, the term synchronization has b~n widely used to describe the temporal ordering of actors in a multimedia 
application [11]. However, a multimedia application specification should describe both temporal and spatial 
ordering of actors in the context of the application. The spatial ordering (i,¢. absolute positioning 
and spatial relationships among actors) issues have not been adequately addressed. We claim that the 
term "synchronization" is poor for multimedia applications and, instead, we propose the term "composition" 
to represent both the temporal and the spatial ordering of actors. Many existing models for temporal 
composition of multimedia objects in the framework of a MAP are based on Allen's relations [!]. Nevertheless, 
these relations are not suitable for composition description, since they are descriptive (they do not 
reflect causal dependency between intervals), they depend on interval duration and they may lead to temporal 
inconsistency. More specifically, the problems that arise when trying to use these relations are the 
following [5]: = The relations are designed to express relationships between intervals of fixed duration. 
In the ease of multimedia applications, it is required that a relationship holds independently of the 
duration of the related object 0.¢. the relationship does not change when the duration changes) Their 
descriptive character does not convey the cause and the result in a relationship. Temporal &#38; Spatial 
Relationships The topic of relations between temporalintervals has initially been addressed in [1]. 
We exploit the temporal composition scheme as defined in [17]. We briefly introduce such scheme that 
also captures the causality of the temporal relationships. In the mentioned scheme the start &#38; end 
points of a multimedia instance are used as events. Moreover, the well- known pause (temporarily stop 
execution) and resume procedures (start the execution from the pointwhere the pause operation took place) 
are also taken into account. Hereafter we present a set of TAC operators that represent the temporal 
composition of media objects, together with the causality of temporal relationships among presentation 
intervals. For more details refer to [17]. These operators correspond to the well known TAC actions: 
start (>), stop(!), pause (ll), resume ([>). Therefore: TAG_operation :== ">" I'!" I'll" I'l >" For instance, 
assume A is a multimedia object, then A> represents the start of the multimedia instance, A! the stop, 
All the pause and A[> the resume actions. We have to illustrate the events arising from the temporal 
state changes of a multimedia object, i.e. when the object A starts its presentations then the "A>" temporal 
event is raised. Special attention should be paid to the event generated when the object finishes its 
execution ("<") and to distinguish this event from the TAC operation "!". Therefore: t_event :== ">" 
I'<" I "I >" I'II" Now we define a temporal operator to be used for temporal composition representation. 
Let A, B two multimedia objects, then the expression: A t,event t_instance TAC_action B, represents all 
the temporal relationships between the two multimedia instances, where t~mstanee corresponds to the length 
of a vacant:tenll~ral il¢~.rval: Therefore: temporal_composition :== ( I object) [{temp_rel object}] 
temp_rel:==t_event Linstance TAC..action For instance: the expression: "A >4! B <0>(2" conveys: "Start 
A, after 4 time units stop B, and just after start C". Finally, we define the duration d A of a multimedia 
object A as the temporal interval between the temporal events A> and A<. Another aspect of multimedia 
objects' composition in IMAPs, is related to the spatial layout of the application, i.e. the spatial 
arrangement and relationships of the participating objects. The spatial composition aims at representing 
three aspects: the topological relationships between the objects (disjoint, meet, overlap etc.)  the 
directional relationships between the objects (left, right, above, above-left etc.)  the distance characteristics 
between the objects (outside  5era, inside 2era etc.) A thorough presentation of these issues may be 
found in [17]. Spatiotemporal Composition Model An IMAP scenario presents media objects composed in spatial 
&#38; temporal domains. A model that captures these requirements is presented hereafter. For uniformity 
reasons, we exploit the Spatiotemporal origin of the image, O, that corresponds to the spatial and temporal 
start of the application (i.e. upper left comer of the application window and the temporal start of the 
application). Another assumption we make is that the objects that are included in the composition include 
their spatiotemporal presentation characteristics (i.e. size, temporal duration etc.). Hereafter we define 
the spatiotemporal model: Definition: Assuming two spatial objects A, B, we define the generalized spatial 
relationship between these objects as: sp_rel = (qj, vi, vj, x, y) where qj is the identifier of the 
topological-directiunal relationship between A and B, v i, vj are the closest vertices of A and B respectively 
(as defined in [17]) and x, y are the horizontal and vertical distances betw~n vi, vj. Now, we define 
a generalized operator expression to cover the spatial and temporal relationships between objects in 
the context of a multimedia application. It is important to stress the fact that in some cases we do 
not need to model a relationship between two objects but to represent the spatial and / or temporal position 
of an object relative to the application spatiotemporal origin, O (i.e. object A to appear at the spatial 
coordinates (110, 200) on the 10th second of the application). Definition: We define a composite spatiotemporal 
operator that represents absolute spatial/temporal coordinates or spatiotemporal relationships between 
objects in the application: ST_R(sp_rel, temp_rel), where sp_rel the spatial relationship and temp_rel 
the temporal relationship as defined above. The spatiotemporal composition of a multimedia application 
consists of several independent fundamental compositions. The term "independent" implies that actors 
participating in them are not related explicitly (either spatially or temporally). Though, there is always 
an implicit relationship through the origin O. Thus all compositions are explicitly related to O. 464 
 We call these compositions composition_tuples and these include spatially and / or temporally related 
objects. Definition: We define the composition_tuple in the context of a multimedia application as: composition_tuple 
:== Ai [{ ST R Aj}], where Ai, Aj are objects participating in the application, and STIR is a spatiotemporal 
relationship (as defined above). Definition:. We define the composition of multimedia objects in the 
context of multimedia applications as a set of composition tuples: composition = Ci{,O~, where Ci, Cj 
are composition tuples. The EBNF definition of the spatiotemporal composition based on the above definition 
is as follows: composition :== composition_tuple{Lcomposition_tuple]} composition_tuple :== 19 "[" spatiotemporaLinstance 
"]" action composition_tuple :== object [{spatio_temporal._relationship object}] spatio_temporal_relationship 
:== "[('[sp rel')" ,'('temp_rel')]" sp rel :== "(" q" vj "," x "," y ")" x INTEGE~J,, "," vi "," y :== 
INTEGER temp_rell :== t_event t__instance TAC_operation where qj denotes a topological-directional relationship 
between two objects and vi, vj denote the closest vertices of the two objects (see definition above). 
The term action is defined on previous sections. Event Modeling &#38; Composition The concept of events 
is defined in several research areas. In the area of Active Databases [6, 7, 4] an event is dcf'med as 
an instantaneous happening of interest [6]. An event is caused by some action that happens at a specific 
point in time and it may be atomic or complex. In the multimedia literature events are not uniformly 
defined. In [12] events are defined as a temporal composition of objects, thus, they have a temporal 
duration. In other proposals for multimedia composition and presentation, e.g., [8, 14], events correspond 
to temporal instances. However, multimedia information systems widen the context of events as defined 
in the domain of active databases. In addition to the temporal aspect of an event, which is represented 
by a temporal instance, there are events in IMAPs that convey spatial information. These may be represented 
by a spatial instance. For example, an event may capture the position of the presentation of visual objects 
at a certain point in time We adopt the event definition from [16]: An event is raised by the occurrence 
of an action and has attached a spatial and temporal instance. The event is recognized by some interested 
human or process. An event occurs due to an action, caused by an object (subject) that may be one or 
a group of presentation objects participating in the IMAP. Each event occurs at a specific point in time 
and/or position to which we further refer to as the event's spatiotemporal signature In principle, the 
event may affect or could be related to one or to a group of media presentations, further called object 
of the event. In [16] an I Specifically in the current implementation we adopted the "'A" operator. Then 
the composition AAB that corresponds to the expression (A>0B>);(A<0B!);(B<0A!), that may be expressed 
in natural language: "Start A and B and when the shortest of the two ends stop the other". event classification 
and composition model has been presented. We have used parts of that scheme in our implementation design. 
As for event composition we distinguish between: Algebraic composition (composition of events according 
to algebraic operators), and Spatiotemporal composition (reflecting the spatial and temporal relationships 
between events). In the next sections we will present the implementation of the algebraic and temporal 
event composition operators as defined there. Hereafter we refer to the composition operators that were 
implemented in our system. It is important to help the authors of IMAPs by providing them with a rich 
set of events that the application will be able to detect and evaluate. Events are classified into two 
basic categories (each of which can be further divided into sub-categories): simple and complex. By the 
term simple we imply atomic events that are triggered whenever a stand-alone action (generated by an 
object, the IMAP or the system) occurs; while the term complex is used for events that are the result 
of simple events' composition. In the following sub-section we describe the subset of events types that 
were implemented. Simple Events Simple events are generated by atomic actions (i.e. that cannot be decomposed 
in the IMAP context, for instance: mouse left button down) and may be classified into the following categories: 
User events: generated by input devices manipulated by the user(s). These events are generated by the 
corresponding user actions during the IMAP execution. The most common input devices and, hence, event 
categories are the following: - mouse events: are related to the mouse and involve mouse clicks (click, 
double-click or right-click). The spatial signature of the event may be of interest in the case that 
another interaction entity is involved (i.e. a button). - keyboard events: are generated by keystrokes, 
each time the user presses a key such as: "Enter", "Spacebar", "keyDown", "PageUp" etc. lntra-object 
events: this category includes events that are raised due to internal IMAP object functionality. There 
are two types of such events. In fact, the second type involves conditions on objects' states, rather 
than actual events. - State-change events: Such events are generated by changes in the state of an object. 
An object's state may be dependent on time (active, paused, idle) or space (visible, not visible, etc.). 
Additional events are related to button objects that may also become enabled or disabled, as well as 
timers used in an IMAP as objects. Timers' state change when they become active, when they are stopped 
and when they arrive to the end of a predefmed temporal interval (timer-indication events). - State events: 
As mentioned earlier, these are not events in the narrow context since they are not related to a temporal 
signature. They are rather conditions on the IMAP objects' states, and raised "on demand". As mentioned 
above, an object's status may be "active" or "'idle" or "paused" or even "enabled" and "disabled" (for 
spatial objects). In IMAPs there are several cases in which a set of actions to be started depend on 
an object's state. This purpose is facilitated by state events. Such an event is raised when a related 
condition is applied to the object and is evaluated as true. Application events: in this category we 
are interested in events related to the application Although the state of an IMAP depends on the state 
of each of the participating objects the implemented system deals only with the following tyI~s of apphcation 
- ApplicationTimer(temp_inst), where temp_inst is a temporal instance (of the form: "minutes:seconds"). 
Such events are raised when the ApplieationTimer, indicates terap_inst. The dpplicationTimer is considered 
to start when the application becomes active and stops only when the command ExitApplication is issued. 
During the application, the ApplicationTimer is used for synchronization of all the actions occurring 
in the IMAP. - StartApp is the event raised when the IMAP starts. This event is raised only once during 
each IMAP execution session. System events: the events of this category are related to the system under 
which the IMAP is running. More specifically, two types of such events may be detected: - SystemSettings(TIME(system_time))and 
- SystemSettings(DATE(system_date)). In the first case, the event is raised whenever the system real-time 
clock indicates "system_time" (e.g. 12:00:00); while in the second case the event is raised when the 
system date indicates "systemdate" (i.e. 02/02/1997). Synch events: in this category we are interested 
in simple events that are related to a scenario mple start or stop. Each scenario tuple may be related 
to up to two such events. If defined, the first event (called start "synch event") is raised when the 
scenario tuple becomes active (its start event is raised). In the same way, if defined, the stop synch 
event is raised when a scenario tuple becomes idle, due to a specific command in the application or to 
the completion of the presentation actions. The synch events used for the synchronization of the autonomous 
modules are defined in an IMAP scenario (scenario tuples) and may be used in the same way as all non-state 
events. Complex Events This category includes the events that may be arbitrarily defined by the author 
of the scenario, in accordance with the algebraic and temporal composition operations proposed in [I 
6]. The author may define such composite events according to a provided set of composition operators 
and functions. In the case of functions, the events to be composed are instances of simple non-state 
events and not already defined complex events or state events. The only simple event that may not be 
part of any complex one is the StartApp, since no other event may be raised at the beginning of the application 
except for StartApp. The operators and functions used for the definition of complex events are the following: 
Operators "l ": which is used for the disjunction (algebraic OR) of events. The complex event "el IeT' 
is raised if at least one of the events el or e2 is raised. The term "raised" implies that either an 
event (such as user, state-change, application, system or synch event) is raised or that a state event 
(condition) is true. The 'T' operator may also be used with complex events, each of which is enclosed 
in a set of brackets.  ": ": which is used for the conjunction (algebraic AND) of events. Therefore, 
the complex event "el ; e2" is raised only if both el and e2 are satisfied. As in the ease of the "1" 
operator, this operator may be used with both simple and complex events.  "NOT": the negation operator; 
may be related to all kinds of events, e.g. "NOT (el ; e3)" where el is a state event, e3 is a state 
change event and (el ; e3) forms a complex event.  Functions A:t:B, where A and B are different (non-state) 
events: - when t > 0, event A:t:B is raised when B is raised, if A last occurred t time units earlier, 
 - when t < 0, event A:t:B is raised when A is raised, if B last occurred t time units earlier, - when 
t = 0, event A:t:B is raised each time A and B are raised simultaneously.   ANY(k;el;... ;en), where 
k>0 and n>l, defines an event that is raised when at least k of the n different (non-state) events el...e 
n have occurred during the execution of the application.  ANYNEW(k; el;...;en), where k>0 and n>l, defines 
an event that is raised when at least k of the n different (non- state) events e 1... e n are raised 
simultaneously. When k = n this function is the conjunction of the n events. The order of event appearance 
is irrelevant in this case.  SEQ(el;...;en.1;en), where n>l, defines an event that is raised when the 
event e n is raised, if all el...en. 1 events have occurred before e n in the same temporal order that 
they appear in the expression. All the events used with this function must be different non-state events. 
 IN(el;tempint ), where temp_int may be a temporal interval such as:  - (start, end) where start < 
end and start, end are specific time instances of the application or, - (start, end) where start < end 
and start, end are specific instances of the system time or, - (start, end) where start < end and start,end 
are specific  system dates. This event occurs when the simple non-state event e I is raised between 
the limits of the temporal interval temp_int. TIMES(n;el), where n>0, defines an event that is raised 
when the non-state event el is raised for the n-th time since the IMAP start. An issue to be raised is 
a partial semantic overlapping among the previous functions. For instance the operator "[" may be equivalent 
to the function ANYNEW. We deliberately retained this set of operators and functions in order to provide 
an expressive set of primitives to the IMAP author. Formal Event Definition In this subsection we define 
formally the event. The semantics of the definitions may be found in the previous subsections: Event 
:== subject',' action ',' object ',' spatio temporal_signature subject :== objectlist object :== objecUist 
action :== actionlist objectlist :== object_id [{object_id}] action_list :== action II algebraic composition 
of events Event :== Event [{operator Event}] operator :== T I ';' Event :== ev_Function ev_Function:== 
ANY(parameter,ev_list) ANYNEW(parameter,ev_list) l SEQ(ev_list)l TIMES(parameter,event) I IN(event,temp_int), 
parameter :== INTEGER ev_list :== Event [{Event}] //spatiotemporal composition of events event :== event 
[{ st_operator event }] st_operator:== (spatial_relation, temporal_relation, sp_temp_dist) temporal_relation 
:== "after" [ "before" I "simultaneously" spatial_relation :==Ri_j Scenario Modeling The term scenario 
in the context of IMAPs stands for the integrated behavioral contents of the IMAP, i.e. what kind of 
events the IMAP will consume and what actions will be triggered as a result. The scenario, in the current 
approach, consists of a set of autonomous functional units (scenario tuples) that include the triggering 
events (for starting and stopping the scenario tuple), the presentation actions to be carried out in 
the context for the scenario tuple, related synchronization events and possible constraints. Initial 
efforts for definition of scenario tuples may also be found in [13, 14]. More specifically a scenario 
tuple has the following attributes: Sta~_.event: represents the event expression that triggers the execution 
of the actions described in the Action_list.  Stop_event: represents the event expression that terminates 
the execution of this tuple (i.e. the execution of the actions described in the Action_List before its 
expected termination.  Action_List: represents the list of synchronized media presentation actions that 
will take place when this scenario tuple becomes activated. The expressions included in this  attribute 
are in terms of compositions as described in previous sections and as in [17]. * Synch_events: refers 
to the events generated at the beginning and at the end of the current tuple execution. These events 
may be used for synchronization purposes. The scenario tuple may be defined as follows: scenario:== 
scenado_tuple [{,scenario_tuple}] scenado_tuple :== Sta~._event ',' Stop_event', 'Action_List ',' Synch_events 
Start._event :== Event Stop_event :== Event Action_List :== composition Synchevents :== '(' start, end 
')' start :== string stop :== string In the following sections we use interchangeably the terms "composition 
tuple" and "instruction stream". THE SCENARIO RENDERING SYSTEM The declarative representation, result 
of the authoring process which was described in the previous section, is close to human understanding. 
In order that this representation becomes usable (i.e. the scenario to be executed and the desired presentations 
take place), we need to transform it into a form closer to the machine so that it may be executed in 
an algorithmic context. In the case of pre-orchestrated scenarios this is rather simple. The IMAPs are 
not this case, though. Most of the presentation actions are dependent on user actions or events that 
occur within the application (intra-lMAP interaction). That would be the case of an interactive movie, 
for example, where the user and/or the actors behavior would change the flow of the movie. The declarative 
IMAP script is transformed into a set of algorithms that are "assembled" into a generic IMAP template 
to form the specific application module. The process is illustrated in Figure 1. The IMAP Template is 
a generic IMAP execution module skeleton that includes several modules for: IMAP Initialization, Scenario 
tuple manipulation (Enabling tuple, Disabling tuples), Error Logging (record exceptions occurring at 
mntime), Events Detection &#38; Evaluation mechanism i, j :== [1,13] 466(presented in further sections) 
along with generic algorithms spatio_temp_dist :== spatio..temporal_distance   CONCLUSIONS REFERENCES 
We presented an integrated system for modeling specification &#38; rendering IMAPs. The model covers 
widely the issue of interactive scenaria and its constituents: events, spatiotemporal composition of 
presentation actions and scenario tuples. The result of IMAP specification under this approach is a declarative 
script. The rendering of the scenario is based on a generic single threaded architecture that regularly 
detects and evaluates events that occur in the presentation context. The detected events trigger the 
execution of the appropriate synchronized presentation actions imposed by the scenario tuples. The system 
(both the authoring and the rendering environmen0 was fully implemented using the authoring tool Asymetrix/Tooibook 
4.0 under Windows 95. The salient features of our work are summarized as follows: Expressive set of 
temporal operators, enabling the definition of essentially any temporal composition expression, as they 
capture the causality of the temporal relationships among presentation intervals.  Emphasis on Interaction: 
we provide a rich modeling and specification scheme for user-and intra-application interaction. The interactions 
are modeled in terms of events. We also provide a rich scheme for algebraic and temporal composition 
of events in order that arbitrarily complex events may be expressed. The proposed interactive scenario 
model is generic and open and it can be utilized in several applications domains where interaction and 
spatio temporal configuration is crucial. An example is virtual worlds, where there is intensive spatiotemporal 
configuration while the internal interactions (e.g. collisions etc.) could be represented as events. 
 Declarative specification of the multimedia scenario, in terms of scenario tuples. In the scenario 
tuples we find autonomous synchronized presentation actions along with the event(s) that trigger or stop 
these actions. This approach makes feasible the storage of scenarios in databases having, thus, the well 
known advantages of databases support.  Generic Interactive Scenario rendering System (single thread 
architecture): we elaborated a sophisticated event detection and evaluation system and thereafter a scenario 
rendering mechanism that is based of the former for interactive scenario rendering.  The rendering system 
raises some issues due to the assumptions that are imposed from the single thread architecture: The 
presentation actions are triggered according to the granularity of the Timer that regularly expires (i.e. 
every T time units). This means that the presentation actions may be initiated or stopped at multiples 
of T.  When the system is in "Active" state, it does not detect events of certain types (i.e. input, 
and system ones).  The divergence between the ApplicationTime and System real time, due to the duration 
of the "Active" state, may become significant if the application is long in the temporal domain or if 
the duration of the "Active" state is not negligible compared to T, duration of the "Suspended" period. 
 No provision of QoS is provided; it is assumed that the underlying hardware and software system is 
capable of maintaining an acceptable QoS or that there is an architectural layer that is in charge of 
QoS maintenance.  These issues are confronted by current research in a multithreaded Client Server Design. 
 [I] Allen J. F., "Maintaining Knowledge about Temporal Intervals", Communications of the ACM, vol. 26(11), 
November 1983. [2] Buford J., "Evaluating HyTime: An Examination and Implementation Experience", Proceedings 
of ACM Hypertext '96 Conference, 1996. [3] Candan K. S., Prabhakaran P., Subrahmanian V.S., "CHIMP: A 
framework for Supporting Distributed Document Authoring and Presentation", Proceedings of dCM Multimedia 
1996 Conference, pp. 329-340. [4] Chakravarthy S., Mishra D., "Snoop: An Expressive Event Specification 
Language For Active Databases", Technical Report, UF-CIS-TR-93-00, University of Florida, 1993. [5] Duda 
A., Keramane C., "Structured Temporal Composition of Multimedia Data", CNRS-MAPG, Grenoble, France 1995. 
[6] Gehani N. H., Jagadish H. V., Shmueli O., "Composite Event Specification in an Active Databases: 
Model &#38; Implementation", Proceedings of VLDB Conference, 1992, pp. 327-338. [7] Gehani N. H2, Jagadish 
H. V., Shmueli O., "Event Specification in an Active Objec~ Oriented Database", Proceedings of the ACMISIGMOD 
Conference, 1992. [8] Hirzalla N., Falchunk B., Karrnouch A., "A Temporal Model for Interactive Multimedia 
Scenarios", IEEE Multimedia Magazine, 1995. [9] lino M., Day Y. F., Ghafoor A., " An Object - Oriented 
Model for Spatio-Temporal Synchronisation of Multimedia Information", Proceedings of the IEEE Multimedia 
Conference, 1994, pp. i 10-119. [10] Karmouch. A, Emery J., "A playback Schedule Model for Multimedia 
Documents", IEEE Multimedia, voL 3(!), 1996, pp. 50-63 [11] Little T., Ghafoor A., "Interval-Based Conceptual 
Models for Time Dependent Multimedia Data", IEEE Transactions on Knowledge and Data Engineering, voi. 
5(4), pp. 551-563. [12]Schloss G., Wynblatt M., "Providing definition and temporal structure from multimedia 
data", Multimedia Systems Journal, vol. 3, 1995, pp. 264-277. [13] Vazirgiannis M., Mourlas C., "An Object 
Oriented Model for Interactive Multimedia Applications", The Computer Journal British Computer Society, 
voi. 36(1), 1/1993. [14] Vazirgiannis M., Sellis T., "Event And Action Representation And Composition 
For Multimedia Application Scenario Modelling", ERCIM workshop on Interactive Distributed Multimedia 
Systems and Services, BERLIN 3/1996. [15]Vazirgiannis M., "Multimedia Data Base Object and Application 
Modelling Issues and an Object Oriented Model" in the book "Multimedia Database Systems: Design and Implementation 
Strategies" (editors Kingsley C. Nwosu, Bhavani Thuraisingham and P. Bruce Berra), Kluwer Academic Publishers, 
i 996, pp 208-250 [16]Vazirgiannis M., Boll S., "Events In Interactive Multimedia Applications: Modeling 
And Implementation Design", Proceedings of IEEE International Conference on Multimedia Computing and 
Systems (ICMCS'97), 1997. Ottawa, Canada. [17]Vazirgiannis M., Theodoridis Y., Sellis T., "Spatio-Temporal 
Composition and Indexing for Large Multimedia Applications", to appear in ACM/Springer-I/erlag Multimedia 
Systems Journal, 1997. 470 
			