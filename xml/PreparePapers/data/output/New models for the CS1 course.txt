
 New Models for the CS1 Course What Are They and Are They Leading to the Same Place? Moderator: Panelists: 
Barbara Boucher Owens Robert D. Cupper Stuart Hirshfield St. Edward s University Allegheny College Hamilton 
College Austin, TX 78704 Meadville, PA 16335 Clinton, NY 13323 owens@ acad.stedwards.edu cupper@ spare 
1.alleg.edu shirshfi@ harnilton.edu Walter Potter Richard Salter Southwestern University Oberlin College 
Georgetown, TX 78626 Oberlin, OH 44074 potter(ihlph.txswu. edu rms @occs.cs.oberlin. edu Owens: The first 
course in Computer Science has been beset by several diverse approaches in the past few years. This panel 
proposal suggests that a reasonable way to discuss these different models is to have a representative 
from each of several positions describe the first course at his/her school and then speculate on where 
the students will be at the end of the third year in the program. Each panelist will discuss core topics 
covered. This panel is not intended to be a debate as to the one best way to do things, but is intended 
to reassure the Computer Science community that there are many paths to a solid CS foundation. Cupper: 
The introductory course sequence at Allegheny College has followed a breadth-fiist approach since 1982. 
The original rationale was to dispel the notion that computer science was just programming. Moreover, 
it seemed only fair that a student contemplating a major in computer science ought to know what he or 
she is getting into prior to encountering the theory course perhaps as late as the junior year. We began 
by introducing topics via examples and problems in the second course, and expanded this to a surveys 
component, and finally a true breadth-first introductory course sequence including the first two courses. 
Currently, students at Allegheny take a first course which fully integrates components from discrete 
mathematics, logic and problem solving, traditional programming techniques, an introduction to computer 
organization, and a unit on social issues. The enabling vehicle is a concomitant weekly closed laboratory 
session where much of the traditional language syntax is taught and exercised. The first course is part 
of a triad of what we call Introductory Courses , which also includes a required course in discrete mathematics 
taught by mathematicians, and a second computer science course which continues the breadth-first approach 
to include data structures taught in an object-oriented environment, analysis of sorting and searching 
algorithms, introductory units on language compilation and operating systems, and another section on 
social issues. The introductory courses are followed by a series of four Core courses: Computer Organization, 
Theory of Computation and Formal Languages, Programming Languages, and Analysis of Algorithms. By the 
end of the third year, the student has completed the introductory and core courses and a seminar on research 
methods in computer science in preparation for a required senior thesis. Hirshfield: Our approach at 
Hamilton College is to use object-oriented programming as the paradigm of choice in CS 1. We have come 
to this decision as the result of years of frustration with our students lack of general problem solving 
and basic software engineering skills-even after taking what we regarded as a progressive, carefully 
constructed Pascal sequence. 00P allows us to address these kinds of high-level problem solving skills 
right from the start of the student s programming experience. We can talk realistically and concretely 
about program design, code reuse, iterative and incremental software development, and program testing, 
all in the context of interesting, non-trivial problems, and can also address all of the structured, 
procedural programming concepts that we have addressed previously. Plus, the more procedural topics now 
occur in the meaningful context of an object-oriented design. 364 Potter: At Southwestern University 
we teach our first year computing students how to derive and verify algorithms using formal methods involving 
the use of weakest preconditions. This entails the study of the predicate calculus, weakest preconditions 
for the assignment statement, the selection statement, concatenation of statements and the invariance 
theorem for loops. The students derive their algorithms in the Guarded Command Language and then translate 
their programs into Pascal and run them. The course covers material including the calculation of GCDUS, 
polynomial evaluation, the division algorithm, tail recursion, searching by elimination , linear search, 
and sorting arrays. Lectures are given on the structure of Pascal including functions and procedures. 
At the end of the third year our students will have taken the following required courses: two courses 
in program derivation, computer architecture, programming languages, operating systems, discrete mathematics, 
automata theory and the analysis of algorithms. They will also have taken a selection of courses such 
as database management, numerical analysis, artificial intelligence and compiler design. It is our expectation 
that the students apply their knowledge of formal methods in their courses beyond the first year. Salter: 
Computer Science Education has matured greatly over the past 20 years, particularly at the introductory 
level where courses designed primarily to develop programming skills are being replaced by ones with 
more conceptual content. Just as students of Calculus are taught the conceptual framework of derivatives 
and integrals, so that they know why the problem solving techniques that use them work, so should students 
of computer science understand what underlies the tools they use to create programs. As Alan Kay pointed 
out in last year s SIGCSE keynote address, we should be stressing the most profound and important ideas 
regarding the nature of computation, rather than simply conveying techniques by rote. Students need to 
be exposed to a wide range of ideas about programming in order to formulate a proper point of view, while 
at the same time not be bogged down by low-level details, imposed only by efficiency considerations, 
that restrict their expressive power. The Scheme programming language, a modern Lisp dialect, offers 
a remarkable combination of simplicity and power. Scheme s design is based on a small number of abstraction 
mechanisms which areas general as possible. This makes the semantics of Scheme both simple and powerful. 
If students are exposed first to a language like C, mastering complexities of the language becomes the 
primary focus of the course. The student then naturally concludes (even if told otherwise) that the primary 
challenges of programming are mastery of syntax, coping with semantic restrictions, and like issues. 
This gives the wrong impression of where the primary challenges of programming lie. If students are exposed 
first to Scheme, however, attention can be focused from the start on the true challenges of programming, 
such as the control of complexity through abstraction, the design of algorithms, and major issues of 
algorithmic efficiency (rather than issues of language construct efficiency, which are usually minor). 
In many cases students also discover through Scheme not just the satisfaction of obtaining the desired 
performance from a computer, but the joy of doing so elegantly. 365
			