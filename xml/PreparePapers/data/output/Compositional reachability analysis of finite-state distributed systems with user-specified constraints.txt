
 Compositional Reachability Analysis with User-Specified S.C. Cheung Department of Computer Science Hong 
Kong University of Science and Technology, Clear Water Bay, Hong Kong Email: scc@cs.ust.hk, Abstract 
The software architecture of a distributed system can be described as a hierarchical composition of subsystems, 
with interacting processes as the leaves of the hierarchy. Process behaviour can be specified using finite-state 
machines. A global state machine describing the overall system behaviour can be constructed using compositional 
reachability analysis techniques. These techniques compose the global state machine of a system from 
its component processes in stages, based on the specified hierarchy, This staged composition may however 
exacerbate the state explosion problem. A promising way to alleviate this problem is to include, in the 
analysis of each subsystem, the behaviour constraints imposed by its environment. Behaviour constraints 
can be derived algorithmically but may be too weak to adequately constrain the compositional analysis. 
In this paper, we describe a technique which enables software developers to also specify behaviour constraints 
based on their application knowledge. These constraints can be combined with those derived algorithmically. 
As constraints specified by software developers may be incorrect, the technlqtre incorporates an effective 
mechanism to detect incorrect constraints and give an indication of how to correct them. Incorporation 
of the mechanism does not increase the complexity of analysis. The mechanism is supported by augmenting 
the state machine model with a special undefined state m The undefined state is used to capture automatically 
potential errors in the constraints specified by software developers. The mechanism can also be utilised 
to detect violation of design assumptions, A gas station system is used as a case study in our discussion, 
Permission to make digital/hard copies of all or part of this material with­out fee is granted provided 
that the copies are not made or distributed for profit or mmmeroial advantage, the ACM copyrighVserver 
notme, the title of the publication and ik date appear, and notice is given that copyright is by permission 
of the Association for Computing Machinery, Inc. (ACM). To copy ofherwisej to republish, to post on servers 
or to redistribute to lists, requires prior specific permission and/or a fee. SIGSOFT 95 Washington, 
D.C.. USA 01995 ACM 0-89791-71 8-2/9510010...$3.50  of Finite-State Distributed Systems Constraints 
 J. Kramer Department of Computing Imperial College of Science, Technology and Medicine, London SW72BZ, 
UK jk@doc.ic.ac.uk 1 Introduction 1.1 Background Behaviour analysis is useful at all stages in the software 
life cycle. Its objectives are to discover software defects and to check if a system performs as intended. 
It is a crucial software engineering discipline for building quality into software. A distributed system 
is normally decomposed into an hierarchy of processes. The hierarchy, referred to as the compositional 
hierarchy, describes how the system can be built successively from its constituent processes. It reflects 
the conceptual view held by software developers of the design, and at the same time it offers the key 
to guide the compositional software analysis. Distributed systems are more complex to analyse than their 
sequential counterparts. The inherent nondeterminism dramatically increases the number of combinations 
of behaviour and generates a need to co-ordinate access to shared resources. Even for small systems, 
analysis of their behaviour is impractical without the support of an effective automated technique. Each 
finite-state process in the compositional hierarchy can be modelled as a transition system (or state 
space graph) whose transitions are labelled by communicating actions. A formal definition of transition 
systehs can be found in section 2. A process is primitive if a LTS describing its behaviour has been 
given explicitly; otherwise it is composite. For example, processes at the leaves of a compositional 
hierarchy are primitive, and processes representing subsystems are composite. In our discussion, we use 
subsystems and composite processes interchangeably.  1.2 Related Work A common approach to the analysis 
of distributed systems is to construct a semantically equivalent representation of the global system, 
However, the search space involved generally increases dramatically with the number of parallel processes. 
Great effort has been made to avoid this state explosion problem by not having to construct the complete 
state graph. Roughly, the proposed methods can be classifed into two categories, reduction by partial 
ordering and reduction by compositional minimisation. In the former category, reduction is achieved by 
avoiding the generation of all paths formed by the interleaving of the same set of transitions [4, 8, 
15]. In the latter category, reduction is achieved by intermediate simplification of subsystems [10, 
12, 13, 14, 17]. Techniques in this category are known as compositional reachability analysis. However, 
these analysis techniques do not consider environment constraints in the construction of LTSS for subsystems. 
These environment constraints, known as context constrains, are behaviour restrictions imposed on each 
process by its neighbors via the need for communication synchronisation. As a result, these LTSS may 
be excessively large and contain many spurious traces. As such, the state explosion problem could be 
exacerbated. Contextual reachability analysis is a promising technique to alleviate the problem by including 
context constraints in compositional minimisation [1, 5, 16]. These constraints can be derived algorithmically 
[1] but may be too weak to adequately constrain the compositional analysis. Users may therefore wish 
to provide their own constraints based on their knowledge and intuition about the target system. This 
approach was studied by Graf [5] and Yeh [16]. The technique of Graf allows users to specify context 
constraints as finite-state interface processes which introduce undefinedness predicates wherever the 
processes inhibit some transitions. Since users may possess an imprecise knowledge of the system, interface 
processes given by users may be incorrect. To cater for this, the technique flags an error at the end 
of the analysis if it has included some erroneous interface processes. The technique of Graf however 
requires an additional step of backward projection which may introduce spurious traces to subsystems 
and thus reduce the effectiveness of contextual reachability y analysis. The technique of Yeh allows 
users to insert start and stop primitives to impose context constraints. However, the use of these primitives 
makes the parallel composition operator non­associative. Both techniques of Graf and Yeh have not included 
a mechanism to trace back the errors and transitions that are missing in the erroneous interface processes. 
This poses a problem if users wish to correct the interface processes and conduct the analysis technique 
again. To tackle this problem, we have refined the technique of Graf and introduced an error detection 
mechanism that is capable of identifying erroneous interface processes and locating the source of errors, 
The mechanism is supported by augmenting the state machine model with a special undefined state z. The 
state is used to capture potential errors in the constraints specified by users. The mechanism is effective 
in the sense that it does not increase the complexity of the contextual reachability analysis and does 
not require the backward projection step as in the technique of Graf. The compositional operator in our 
technique Proc &#38; Figure 1: An LTS Description of a Process is both commutative and associative. 
In the paper, we also show how context constraints provided by users can be combined with those derived 
algorithmically for contextual reachability analysis, and how to utilise the mechanism to detect violation 
of design assumptions. 1.3 Paper Outline In the next section, we introduce the labelled transition systems 
and present a gas station system which is to be used as a case study in our discussion. Section 3 presents 
a technique to include context constraints in compositional reachability analysis. An account of a mechanism 
to detect erroneous context constraints is also given. Section 4 gives an illustrative example of the 
use of the technique to check violation of design assumptions. This is followed by conclusions in section 
5. 2 Preliminaries 2.1 Labelled Transition System Behaviour of a synchronous communicating process in 
a distributed system can be modelled as a labelled transition system (LT.S for brevity). An LTS of a 
process is a state transition diagram containing all reachable states and executable transitions. For 
instance, figure 1 represents an LTS of a process Proc which can be in either state O or 1. The process 
can go from state O to 1 as the consequence of an action prepayl and back to state O from 1 by an action 
chargel. Alternatively, the process can go back to state O from O by executing charge2. The set of actions 
that are considered relevant for a particular description of a process P is called its communicating 
alphabet, written as ctF [7]. In the above example, ~Proc equals {prepayl, charge], charge21. The alphabet 
is a permanent predefine property of a process. Logically, a process may only perform actions belonging 
to its alphabet. An alphabet is so chosen as to make analysis tractable. This involves decisions to ignore 
properties and actions considered to be of lesser interest. Formally, an LTS of a process P is a quadruple 
< ,S, A, A, q > where (i) S is a set of states; (ii) A = A u {T}, where A is the communicating alphabet 
 of P which does not contain the internal action ~; Figure 2a: The LTS Description of ~ (iii) A c S 
x A x S, denotes a transition relation that maps from a state and an action onto another state; (iv) 
q is a state in .S which indicates the initial state of P. An LTS of P = < S, A, A, q > transits into 
another LTS of P = < S,A, A, q > with an action a e A if and only if (q, a, q? e A and q # n, where n 
is a special undefined state to be discussed shortly. That is, <S, A,+, q>~<S, A,+, q > iff (q, a,q )~Aandq 
#n. Since there is an one-to-one mapping between a process P and its LTS, we use the term process and 
LTS interchangeably. Therefore, the above statement can be rewritten as follows: P>P iff (q, a, g ) E 
Aandq #rt. An LTS < S, A u {~), A, q > is said to be deterministic if and only if V S,S and s 6 S, (s, 
a, s )e A A (s, a, s )eA implies s = s ; otherwise it is said to be non-deterministic. A trace of a process 
P is a sequence of actions that P can perform starting from its initial state. For example, the sequence 
c prepayl, chargel, charge2 > is a trace of Proc in figure 1. We denote the set of possible traces of 
a process P as tr(f ). The formal definition of traces can be found in the work of Hoare [7]. An LTS 
may contain a special state n, which is called the undefined state. A process is considered to be P- 
--%P 1a. (ae L, P #l_I) P t L &#38;P ~L Pall lb. (a~L) PTL -J% I-I P-J+P 3a. (a@aQ, P #II) PIIQ+P IIQ 
P-J4rI 3b. (a@cxQ) PllQ_H 5a. P---%P Q-Q (a= cxPnccQ, P #H, Q #H) PIIQ+P IIQ Proc X**, charge 1 / 
$rr% *.N.4 8&#38; Figure 2b: A Process with an undefined state undefined when it is in state X. An undefined 
process is denoted as H = c {rc), -!4, 0, rc >, where -%is the universal set of actions (see figure 2(a)). 
A process P = <S, A, A, q > transits into 11 after the e~ecution of an action a if and only if P can 
perform the transition (q, a, n). That is, <S, A,--+, q>~<{n}, Z@, n> iff (q, a,rc)= A. Alternatively, 
we may write: P--% iff (q, a, z) e A. For instance, figure 2(b) represents a process Proc that transits 
into H after executing char-gel. Hence, PCSIH In the LTS computational model, there can be no transitions 
emerging from state z Thus, H is essentially a termination process. A trace is said to be undefined if 
its execution turns a process into ~. For instance, Ccharge2, chargel~ is an undefined trace in Proc. 
Normally, all processes in a system design are defined; they are free of undefined state rc and do not 
contain undefined traces. The constructs of n and n are used to handle the situations where specified 
system behaviour is not consistent with that perceived by users. In the LTS computational model, actions 
of a process can be restricted by a restriction operator ~. P ?L represents the process projected from 
P in which only the actions in set L are observable. The restriction operator ensures that P has undefined 
traces if and only if P~L has undefined traces. Q~Q 4a. (a@cxP, Q #H) PIIQ-++PIIQ Figure 3: Processes 
A, B 5b. PAP Q&#38;Q (a= cxPnrxQ, P =flor Q =~) PIIO AI-I 142 Processes in a distributed system can 
also be composed by a composition operator II similar to that used in CSP [7]. PIIQ is the parallel composition 
of processes P and Q with synchronisation of the actions common to both of their alphabets and interleaving 
of the others. The alphabet of PIIQ is given by the union of their individual alphabets (i.e. ctPuctQ). 
The transition relation for the composite process is defined by rules 3, 4 and 5. The composition operator 
is both commutative and associative. Figure 3 shows the LTS of A IIB composed from processes A and B 
by following the transition rules. For example, the initial state O of A IIB denotes the situation where 
both A and B are at their own initial state O. According to the rules, process A cannot fire the action 
u at state O until B has fired action b and reached state 1. Thus only action b can be initially executed 
by A IIB. After that a can be executed. The execution of a however leaves process A and thus A Ill? in 
an undefined state. Rule 5b specifies that a composite process PIIQ never proceeds if either P or Q equals 
the undefined process ~ whose alpabet is the universal set of actions. The rules enforces that a composite 
process PIIQ is undefined when P or Q is undefined. The restriction operator ? can be distributed into 
the composition operator II if internal actions of constituent processes do not have conflicting names. 
That is, 16. for any two processes P, Q and two sets of actions L, M: ((txP-L)n(aQuM) )u((cxQ-M)n(cxPuL)) 
= 0 implies P~L II Q~M = (P II Q)?(LuM) The sufficient condition in rule (6), which can be achieved 
by action renaming, is assumed in our discussion. 2.2 Behavioral Equivalences Strong semantic equivalence, 
denoted as -, is used to relate two processes whose behaviors are indistinguishable to an observer even 
if internal z-actions are observable. Weak semantic equivalence, denoted as =, is used to relate two 
processes whose behaviors are indistinguishable to an observer if internal ~-actions are not observable. 
Both equivalences assume external observers are notified if processes have assumed state n. Let A be 
the basic set of actions including ~. A strong semantic equivalence -is the union of all relations R 
c SXS satisfying that (P, Q) ~ R implies: and their Composite Process AlIll (i) P=Hifandonly ifQ=~. 
(ii) forallae A: (a) P&#38;P implies 3 Q , Q-&#38;Q and (P , Q )= R. (b) #-@ implies 3 P , PAP and 
(P , Q )= R.   Let P ~ P denote P(~)*<&#38;) *P . A weak semantic equivalence = is the union of all 
relations R G SXS satisfying thai (P, Q) E R implies: (i) P=~ifandonlyif Q=H. (ii) forallae A: (a) 
P~P implies 3 Q , Q ~ Q and (P , Q ) e R. (b) Q--&#38;Q implies 3 P , P $ P and (P , Q ) c R.   The 
strong and weak semantic equivalences coincide with the strong and weak equivalence (cf. Milner [11]) 
respectively if the first of the two requirements (i) is dropped. In other words, if two processes P 
and Q are free of the undefined state n then (i) P -Q implies P and Q are strongly equivalent; (ii) 
P = Q implies P and Q are weakly equivalent.  2.3 A Gas Station Example As an illustration of our discussion, 
we present a gas station example originally proposed by Helmbold and Luckham [6]. The system models an 
automated gas station with an operator, I a pump, two customers and a queue holding customers requests. 
Figure 4 gives the LTSS presenting the behaviour of the operator and the request queue. The operator 
may initially choose to accept money prepaid by customers (prepayi) or accept the amount to be charged 
from the pump (chargei). After accepting money from a customer, the operator activates the pump if it 
is available; otherwise does nothing. On receiving the charge information from the pump, the operator 
gives the change (= prepayi -chargei) to the customer and activates the pump again if there are other 
customers waiting for the pump. Figure 5 shows the behaviour of the pump and that of the two customers. 
A customer who has paid the money can start the pump once it has been activated. After starting the pump, 
the customer may at any time request the pump to finish pumping and wait for the change from the operator. 
Upon receiving the finish request, the pump informs the operator of the charge information. Ope~tor prepay1, 
charge 1, prepay2 charge2 P 0 1 Queue ump_occupied 3 cust_nOnechange1, activate change2 pump_avail 
 ;/O !7 cust_wait 42 Figure 4: Behaviour of the Operator and the Queue holding customers request Custl 
o repayl 1 cust2 o repay2 1 charge 1 stafl 1 change1 start1 change2 start2 Pump timsh 1 finish2 32 32 
charge2 stafi2 %=x xi Figure 5: Behaviour of the Pump and two customers Custl and Cust2 ( Station I 
( Clients J Figure 6: Compositional Hierarchy of the Gas Station System The gas station system 1 is formed 
by a parallel composition of The hierarchy reflects a conceptual view held by software the primitive 
processes Operator, Queue, Pump, Cusll and developers of the gas station system. Subsystems are Cust2 
using a compositional hierarchy as shown in figure 6. introduced to make the system more modular and 
Subsystems, represented by boxes with rounded corners, are comprehensible. This is achieved by hiding 
internal actions of composite processes formed by composition of simpler a subsystem from external processes 
For instance, subsystem subsystems or primitive processes. Primitive processes, Counter hides actions 
pump_avail, pump_occupied, cust_none represented by boxes with sharp corners, are leaves of the and cust_wait 
from processes outside the Counter Textually, compositional hierarchy. The behaviors of primitive we 
write: processes are given as LTSS. Counter = ( Operator II Queue )?L, where L = ( aOperator u aQueue 
) ­ { pump_avail, pump_occupied, cust_none, cust_wait ] If necessary, the system can be extended to accommodate 
more customers and pumps,  [ Counter ~   EIEIIZ Figure 7(a): Component Processes of Counter Let us 
assume in the following discussion that the software developers wish to reason about the global behaviour 
of the system on actions prepayl and prepay2. In other words, only these two actions are observable in 
the global LTS of GasSystem. GasSystem = ( Station II Clients)?{ prepayl, prepay2 ] 3. Contextual Compositional 
Reachability Analysis 3.1 Inclusion of Context Constraints Recent literature has reported promising resuks 
by employing a compositional approach to generate the model of a system using reachability analysis [12, 
13, 17]. The model is given as an LTS. which describes the overall behaviour of the target system. Given 
a compositional hierarchy, the LTS of a system is composed step by step from those of its subsystems 
in a bottom-up manner. In each intermediate step, the LTS of a subsystem is simplified by hiding all 
internal actions. For instance, the LTS of GasStation in figure 6 can be composed in four steps. First, 
compose the LTS of Counter from Operator and Queue. Second, use that LTS and Pump to generate the LTS 
of Station. Third, construct the LTS of Clients from Custl and Cust2. Fourth, compose the LTS of GasStation 
from that of Staiion and that of Clients. Although this mechanism of intermediate simplification during 
composition is attractive for the analysis of modular Suppose Z and Ifc are two processes; and relation. 
Z-( ZIIIJC) if (i) ctffc~ ct~ (ii) tr(Z Ta Ijc) C tr(fjc);  (iii) fjc is a deterministic process free 
of  fcO-c)%%Y3 charge2 fc m fc -cx%o Figure 7(b): Example Interface Processes systems, it has a drawback 
in that the state explosion problem could be exacerbated. The LTSS of subsystems are constructed without 
considering their interaction with neighboring processes in the system [5]. As a result, LTSS of subsystems 
may contain many behavioral traces that can never be executed in the system as a whole. Researchers have 
thus proposed techniques to tackle this problem by including context constraints in the construction 
of LTSS for subsystems [1, 5, 16]. Context constraints are behaviour restrictions imposed on the subsystem 
by its neighboring processes. This technique is known as contextual reachability analysis. For example, 
suppose we wish to construct an LTS for subsystem Counter. Originally, the subsystem is composed of two 
primitive processes Operator and Queue. However, the LTS constructed by simply composing the LTSS of 
Operator and Queue contains spurious behavioral traces that are forbidden by processes Pump, Custl and 
Cust2. In the contextual reachability analysis, we imagine that Counter is composed of Operator, Queue 
and an interface process Ifc as shown in figure 7(a). The interface process Ifc is used to abstract context 
constraints imposed on Counter by Pump, Custl and Cust2. To ensure that the inclusion of t fc does not 
affect the overall behaviour of GasStation, Ifc has to satisfy the interface theorm in figure 8 [1]. 
The theorem gives the sufficient conditions for a process Z to behave the same as ZllIfc. The first condition 
ensures that Ifc does not introduce any actions that cannot be performed by Z. The second condition ensures 
that inclusion of Ifc does not eliminate any valid traces of Z. The third condition -denotes the strong 
semantic equivalence internal action r Figure 8: Interface Theorem U-cxs=o Figure 9(a): Interface Specified 
by Users ensures that Ifc does not introduce extra non-determinism or divergence to Z. To apply the theorem, 
we assume a system Z formed by the parallel composition of the primitive processes of the target system. 
For example in the case of GasStation, we assume a system Z given by (Operator II Queue II Pump II Custl 
II CU.W2). By rule (6) in section 2, Z~ {prepayl, prepay2 ] behaves the same as GasStation. As a result, 
the behaviour of GasStation can be given by the composed LTS formed by (Zll~c)~{prepayl, prepuy2 ). Therefore, 
Operator, Queue and f$c can be grouped together in the evaluation of the behaviour of GasStation. Candidate 
interface processes satisfying the interface theorem can be derived algorithmically [1]. Figure 7(b) 
shows three candidate interface processes derived algorithmically for the composition of the LTS of Counter. 
In fact, these interface processes can be composed together forming another interface process. For instance, 
Ifc in figure 7(a) is a composite process of IfcO, Ifcl and Ifc2 in figure 7(b). In many situations, 
users have further knowledge and intuition of the system behaviour. Users may therefore be able to specify 
the behaviour constraints imposed by the environment on some subsystems. This information can be exploited 
during the contextual reachability analysis by means of interface processes. These user-supplied interface 
processes can be composed directly with those derived algorithmically for effective reduction of state 
spaces. The main problem with this approach is that interface processes specified by users could be incorrect, 
While satisfaction of the first and third conditions in the interface theorem can be easily achieved, 
these interface processes may violate the second condition. Inclusion of them in the analysis can result 
in violation of system behaviour: the global LTS thus constructed might not faithfully represent the 
behaviour of the target system. Therefore a mechanism is incorporated to identify problematic interface 
processes and provide an indication of how to correct them.  3.2 Error Detection Mechanism To check 
the violation of the second condition, the error detection mechanism refines an interface process I = 
(A, S, A, 9) provided by users into another process I = (A, Su {n], A , q), referred to as the image 
interface process. The image interface Figure 9(b): Image Interface Used in the Analysis process I accepts 
all traces formed by actions in the alphabet of 1 but those which cannot be exhibited by 1 become undefined 
in I . The refinement can be performed using the following procedure: (i) initialise A to A (ii) for 
all a c A ands E S where there does not exist s ~  S such that (s, a, s ) c A : add (s, a, rc)to A 
I is so refined that, when given a process Z where al G aZ, all traces in tr(Z) -tr(ZllI ) are flagged 
as undefined in the composite process ZII1 . Hence, ZIII contains undefined traces if and only if tr(Z) 
is not a subset of tr(ZllI ); i.e. tr(Z~aI ) ~ tr(I ). In other words, ZII1 is free from undefined traces 
if and only if tr(Z~oT) c tr([ ). This property of 1 in turn also holds for Zlll and other processes 
composed using I . Figure 9 shows the original interface process lU supplied by users and the one Iu 
refined by the error detection mechanism for the contextual reachability y analysis of GasStation. Note 
that [u and Iu have the same set of defined traces. The image interface process Iu is then used, instead 
of Iu, for the contextual reachability analysis of GasStation. Any valid traces of GasStation that have 
been eliminated in the analysis become undefined in the global LTS. Since the undefinedness of traces 
is preserved by the restriction operator, an absence of undefined traces from the global LTS means an 
absence of undefined traces from Iu II Z, where Z equals (Operator II Queue II Pump II Custl II Cust2). 
Given that ct[u is a subset of aZ, this implies tr(Z~aIu ) G tr(lu ). As a result, Iu and Z satisfy the 
interface theorem, and (Z II Iu ) behaves equivalently to Z. The global LTS obtained in the contextual 
reachability analysis thus faithfully reflects the behaviour of GasStation. In general, users may specify 
a number of interface processes at various stages of the contextual reachability analysis to express 
their knowledge of system behaviour related to different subsystems. When the global LTS has a reachable 
undefined state, some of its legal traces have been eliminated by the given interface processes. Error 
correction requires users to re-specify the interface processes. However in many situations users may 
not be able to identify exactly which transitions are missing. For the error detection mechanism to be 
useful, this kind of information should be provided automatically. change 1 Operator prepay2 prepay2 
) Iu 1~ Ifco Ifcl c ~?pactiva e %1$ Figure 10: (a) The Compositional Hierarchy and (b) The Composite 
LTS of Counter   -GO+> Figure 11: The Global LTS of GasStation (c) In the step of process minimisation, 
update To provide this information, the error detection mechanism both [P~l_Il and [Q--%I] to [P~~lu[&#38;% 
if P = Q can be designed to keep track of the relation between those 3.3 An Example transitions leading 
to the undefined state n in the global LTS and those missing in the interface processes specified by 
users. Suppose Iu in figure 9(a) represents an interface process given by users to express their intuitive 
understanding of the For convenience, we use [P +H] to denote the set of behaviour constraints imposed 
on subsystem Counter by its transitions in the image interface processes that contributed to neighboring 
processes. The process is refined into Iu in the transition of F ~~. We call [F ~H] the set of ancestor 
figure 9(b) to cater for any potentially missing transitions. prepayl , transitions of P-%~. Let Iu 
o be Iu and lu~~ Iu 1 in figure This image process can then be combined with those derived 9(b). The 
values of [Iu o~H] and [Iu l q~~] are algorithmically in the construction (i.e. I~cO, Ifcl, Ifc2) of 
a {(o, activate, rt)lu] and {(1, prepayl, TC)J~} respectively. The composite LTS for Counter as shown 
in figure 10(a). The LTS subscript h identifies the LTS that owns the transition. In the of Counter is 
therefore given by a parallel composition of contextual reachability analysis, processes are successively 
Operator, Queue, Iu , IfcO, Ifcl and Ifc2. After simplification composed, restricted to some actions 
and then minimised based and hiding internal actions, the LTS of Counter is shown in on the rules in 
section 2. In each of these analysis steps, the figure 10(b). Let Counter. be Counter and prepay2 set 
of ancestor transitions are updated as follows: Countero~ Counter2. Using the above mechanism, the value 
of [Counter2 ~~] is derived to be {(O, activafe, ?t)~u}. (a) In the step of parallel composition using 
rules (3b, 4b, This indicates that the transition of Counter2 ~~ in 5b), update Counter is caused by 
the transition of lu ~n in Iu . [PM#+ll] to [PLIII if Q--%l . [PII*R] to [Q--%] if P-%1 Note that the 
transition of IU 1 1~1~ does not introduce any -[PIl&#38;~] to [P4~lu[&#38;%Il if p~ll and &#38;H undefined 
traces in Counter. That transition is made impossible by the behaviour of Operator who requires that 
any two (b) In the step of action restriction, update consecutive executions of prepay 1 have to be 
separated by an [PtL~III to IP&#38;%Il if P~L&#38;~ is derived using rule execution of activate. (lb) 
 [PTL~IIl to[P~TIl if P?L---%l is derived using rule Figure 11 gives the global LTS obtained in the 
contextual ( b) reachability analysis. Let GasStationo be GasStation and pre[3uy2 GasStationo~ Gas Stationl. 
Then, the value of (- )activate  &#38; Figure 12(a): A Correct Specification of Iu Figure 12(b): The 
Image LTS for Iu in the left prepayl, GasStation + O prepay2 @ Figure 13: The Global LTSof GasStation 
 Figure 14: (a) Theassumption and(b) [GasStatkml&#38;~]isd erivedtobe {(O, activate, rc)Zu~}. The existence 
of the transition of GusSratkml&#38;H in GasStation indicates that the LTS does not faithfully represent 
the behaviour of the system. This due to the omission of transitions in [Ga,rStationl~H]; i.e. an outgoing 
transition Iabelled with activate from state O in the interface process Iu. The information helps users 
to track the error down to particular transitions. A correct specification of Iu is given in figure 12(a). 
The global LTSof GasSystern derived using lu in figure 12(b) is given in figure 13. Since the LTS is 
free of reachable undefined state, it correctly reflect the behaviour of GasSystem. The error detection 
mechanism can be fully automated and it does not change the order of complexity of the contextual reachability 
analysis technique since the sizes of the subsystems increase by at most one to accommodate the undefined 
state n. 4 Exception Raising for Violation of Design Assumptions In some situations, software developers 
may specify the behaviour of a subsystem based on certain assumptions of its environment. For instance, 
the LTS of Operator carries no therefined assumption made by the Operator information that CUSCI always 
receives the appropriate change. The developer of the process Operator in figure 4 has not specified 
explicitly that charge] must be followed by changel rather than change2. The assumption that Custl and 
Cust2 always receive the appropriate change has been made in the specification of Operaror, Thus the 
correctness in the behaviour of Operator relies on the validity of this assumption. In this situation, 
it is useful to state the assumption and detect if there is any violation during the contextual reachability 
analysis. Design assumptions can be considered as an interface process specified by users. For example, 
figure 14(a) shows the above assumption made at the specification of Operator. The error detection mechanism 
can be used to check violation of assumptions. The design assumption is refined into another LTS as discussed 
in section 3.2 by adding (figure 14(b)). appearance of error detection which violation the global LTS 
 transitions leading to the undefined state rr Any violation of the assumption causes the state n in 
the global LTS. If this is the case, the mechanism would indicate the transitions at occurs. In the case 
of GasStation, we find that remains the same as that in figure 13 after the inclusion of the LTS in figure 
14(b). Since the global LTS is free of state n, figure 14(a) is a valid (supported) assumption. Using 
the same philosophy, we can express various safety properties as user-specified interface processes and 
include them in the contextual reachability analysis. Violation of these properties is flagged as the 
appearance of state rr in the global LTS. The error detection mechanism can then identify those safety 
properties being violated. Conclusion This paper presents a technique that enables users to exploit 
their additional knowledge of the behaviour of a distributed finite-state system when performing behaviour 
analysis. The additional knowledge, specified as interface processes, helps to reduce the computational 
costs in contextual reachability analysis. However knowledge specified by users could be incorrect and 
affect the correctness of the analysis result. An error detection mechanism is introduced to check tbe 
correctness. This is achieved by augmenting the model of labelled transition systems (LTS) with a special 
undefined state n. A process is said to be undefined when it is in state n. The analysis result is incorrect 
if the global LTS representing the overall system contains the state rc. The error detection mechanism 
is effective in the sense that it does not increase the order of computational complexity of the contextual 
reachability analysis. The utilisation of the mechanism only increases the size of subsystem by at most 
one state to accommodate state rr. The error detection mechanism incorporates procedures to identify 
erroneous interface processes and missing transitions. Interface p~ocesses supplied by users can be combined 
directly with those derived algorithmically for behaviour analysis. The combination of these two sources 
of context constraints facilitates an effective contextual reachability analysis which can be used to 
support the design activities of large-scale distributed systems. Assumptions about the behaviour of 
environment made during the design of subsystems can be validated during the construction of the global 
LTS. A prototype supporting the technique has been built. To further explore the potential of the technique, 
we are applying it to more complex examples, implementing support tools on workstation?, and proposing 
to incorporate this form of analysis support in an environment for the design and construction of distributed 
systems, the System Architect s Assistant [9]. We are also experimenting with a framework to integrate 
the described technique with a dataflow analysis technique [2, 3]. Acknowledgement We are indebted to 
Dimitra Giannakopoulou and the anonymous referees for many helpful comments. We would also like to acknowledge 
the financial support of the RGC Direct Allocation Grant DAG94/95.EGl 5, EPSRC Grant GR/J 87022 and the 
DTI IED 410/36/2. References [1] S. C. Cheung and J. Kramer, Enhancing Compositional Reachability Analysis 
with Context Constraints, in Proc. Ist ACM International Symposium on the Foundations of Software Engineering, 
Los Angeles, California, December 1993. [2] S. C. Cheung and J. Kramer, An Integrated Method for Effective 
Behaviour Analysis of Distributed Systems, in Proc. 16th IEEE International Conference on Software Engineering 
(ICSE16), Sorrento, Italy, May 1994. [3] S. C. Cheung and J. Kramer, Tractable Dataflow Analysis for 
Distributed Systems, IEEE Transactions on Software Engineering, August 1994. [4] P. Godefroid and P. 
Wolper, Using Partial Orders for the Efficient Verification of Deadlock Freedom and Safety Properties, 
in Proc. 3rd International Conference on Computer Aided Verification (CA V), Aalborg, Denmark, July 1991. 
[5] S. Graf and B. Steffen, Compositional Minimization of Finite State Systems, in Proc. 2nd Intern a~ional 
Conference of Computer-Aided Verification, New Brunswick, NJ, USA, June 1990. [6] D. Helmbold and D. 
Luckham, Debugging Ada Tasking Programs, IEEE Software, vol. 2, pp. 47-57, March 1985. [7] C. A. R. Hoare, 
Communicating Sequential Processes: Prentice-Hall, 1985. [8] G. Holzmann, P. Godefroid, and D. Pirottin, 
Coverage Preserving Reduction Strategies for Reachability Analysis, in Proc. Protocol Specification, 
Buena Vista, Florida, [9] J. Kramer, J. Magee, Architect s Assistant Distributed Systems, Future Trends 
of 12th International Symposium on Testing, and Verification, Lake North-Holland, June 1992. K. Ng, and 
M. Sloman, The System for Design and Construction of in Proc. 4th IEEE Workshop on Distributed Computing 
Systems, Lisbon, September 1993. [10] J. Malhotra, S. A. Smolka, A. Giacalone, and R. Shapiro, A Tool 
for Hierarchical Design and Simulation of Concurrent Systems, in Proc. BCS-FACS Workshop on Specification 
and Verification of Concurrent Systems, Stirling, Scotland, July 1988. [11] R. Milner, J. Parrow, and 
D. Walker, A Calculus of Mobile Processes Part I and II, Technical Report, University of Edinburgh, June 
1989. [ 12] K. K. Sabnani, A. M. Lapone, and M. U. Uyar, An Algorithmic Procedure for Checking Safety 
Properties of Protocols, IEEE Transactions on Communications, vol. 37, pp. 940-948, September 1989. 
[ 13] K. C. Tai and V. Koppol, Hierarchy-Based Incremental Reachability Analysis of Communication Protocols, 
in Proc. IEEE International Conference on Network Protocols, San Francisco, California, October 1993. 
 [14] K, C, Tai and V. Koppol, An Incremental Approach to Reachability Analysis of Distributed Programs, 
in Proc. 7th International Workshop on Software Specification and Design, Los Angeles, California, December 
1993. [15] A. Valmari, Stubborn Sets for Reduced State Space Generation, in Advances in Petri Nets 90, 
vol. LNCS 483; G. Rozenberg, Ed., Springer-Verlag, 1991, pp. 491-165. [16] W, J, Yeh, Controlling State 
Explosion in Reachability Analysis, Technical Report, SERC-TR-147-P, SERC, Purdue University, December 
1993. [17] W. J. Yeh and M. Young, Compositional Reachability Analysis Using Process Algebra, in Proc. 
Symposium on Testing, Analysis, and Verification (TA V4), Victoria, British Columbia, October 8-10, 1991. 
 
			