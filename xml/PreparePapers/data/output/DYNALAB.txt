
 DYNALAB A Dynamic Computer Science Laboratory Infrastructure Featuring Program Animationl Michael 
Samuel D. Introduction DYNALAB, short for D YNAmic LABomtoTy, is a soft­ware system that supports interactive, 
highly visual, and motivating lecture demonstrations and laboratory experiments in computer science. 
In its current form Version 1. O DYNALAB consists of a virtual computer called the Education Machine 
(E-machine for short) [Pat89], an E-machine Emulator [Bir90], a Pascal com­ piler for the E-machine [Go093], 
an Ada subset compiler for the E-machine [Po094], comprehensive program ani­mators for X-windows [Pra94] 
and MS-windows [Bor95], and an extensive library of programs. The rest of this paper describes DYNALAB 
in more detail. Background There has been much discussion recently need for laboratories in the computer 
lum. The discussion was brought to the widely referenced reports Computing [DCG+89] and Computing Curricula 
Subsequently, numerous in the SIGCSE Bulletin nual SIGCSE Symposia. 1 Support for this project tional 
Science Foundation, 9354655, from DOD/DISA, R. Birch, Christopher M. Boroni, Frances Patton, David K. 
Poole, Craig M. Pratt, Computer Science Department Montana State University Bozeman, MT 59717 ross@cs 
.montana. edu http: //www. cs .montana. edu/dynalab/ W. Goosey, Rockford J. Ross related articles regarding 
the science curricu­forefront in two as a Discipline 1991 [Tuc91]. have appeared and in presentations 
at the an- However, the move towards has come in part from the Na­ grant numbers USE-9150298 and DUE 
 grant nmnber DCA1OO-94-1-OOO9, and from Montana State University, EES grant number 162615. Permissionto 
co y without fee all or part of this material is granted provided tI at the copies are not made or distributed 
for direct commercial advantaqa. the ACM eapyright rwtiee and the title of the publication and Its date 
appear, and notice is given that copyi is by permission of the Association of Computing Machinery. %o 
copy otherwise, or to republish, requirea a fee and/ors ecific permission. SIGCSE! 953/95 Nashville, 
TN USA @ 1995 ACM 9-89791-s93-W9510003....$35O laboratory-based curricula has been hindered the most 
by a simple impediment: the lack of a computer science laboratory infrastructure. Traditional sciences 
such as biology, chemistry, and physics have long repertories of tried experiments, as well as lab equipment, 
lab man­uals, and established teaching practices, that form the laboratory science What various infrastructure 
in those disciplines. Computer has no such counterpart. is needed is a set of tools that elucidate the 
aspects of programming (e.g., recursion), algo­ rithms and data structures (e.g., hashing and hash t,a­bles), 
and other specific computer science concepts (e.g., intractability y and NP-completeness). Indeed} exciting 
visual tools are being developed in each of these areas. These include and computer A program vides the 
user source code of program animators, algoTzthm animatom, science concept animators. animator (as found 
in DYNALAB) pro­with a detailed, highly visual view oft he a program in execution, thus permitting studies 
of programs and program constructs: selection, iteration, functions, procedures, recursion, variables, 
parameter passing mechanisms, arrays, sets, pointers, and so forth. Experiments in time and space complex­ity 
are also easily accommodated by a good progra,m animator. Visual debuggers that accompany many pro­gramming 
languages (e.g., [Bor] and [Vis] ) can som~e­times be pressed into service as program animators, but 
most of them are severely lacking in the kind of peda­gogical features that are useful to novices or 
that allow for easy study and experimentation with programs. Al­gorithm animators, on the other hand, 
do not in general display program murce code at all; instead, they pro­vide a graphical picture of an 
algorithm (e.g., sorting) in action. Examples of algorithm animators include Tango [Sta90], Zeus [NB94], 
GAIGS [Nap94], and the work of [RPF94]. Computer science concept animators gener­ally focus on a specific 
topic, such as Turing machines, finite state automata, parsing, compiling, machine lan­guage execution, 
and so forth. Active projects in this area include [BJR94], [B FG+94], and [MD94]. A sys­tem that incorporated 
each of these types of animations would present a comprehensive laboratory infrastruc­turefor computer 
science. DYNALAB represents astep in this direction. DYNALAB As noted, DYNALAB is currently focused 
on program animation. As shown in figure 1, when DYNALAB is started, a window with four panes and a control 
panel is displayed on the screen. The source code pane in the up­per left corner displays the program 
being animated; the variable display pane in the upper right corner displays the values of all variables, 
constants, and parameters used in the program; the input/output pane stretch­ing across the entire window 
just below the source code pane and the variable display pane holds the values in­put by the user and 
those output by the program during execution; and the execution cost pane in the bottom right corner 
displays an ongoing count of the number of underlying E-machine instructions executed during the course 
of a program animation (the RESET but­ton in this pane allows the counter to be reset to zero so that 
the run time efficiency of just a portion of the program for example, a function or procedure can be 
studied). The control panel in the lower left corner con­tains a number of buttons for orchestrating 
an anima­tion. The File pulldown menu in the upper left corner also provides access to the many programs 
in the DY-NALAB library. The source code, variable display, and input/output panes all scroll and can 
be resized. Figure 1 is a snapshot of the animation of program fact, shown during the third successive 
call to the recur­ sive function factorial. The highlighted portion of the source code is ifn=O which 
indicates that this is the line that will be ex­ecut ed next. The input/output window contains the message 
printed by the write statement just before the first call to factorial was made. It also contains the 
value (4) typed in by the user. The value in the execu­t ion cost window (625) indicates how many E-machine 
instructions have been executed to this point. Notice also that the Nopause mode (described later) has 
been selected. Animation continues as the user clicks on the FOR WARD EXECUTE button, or in reverse as 
the RE-VERSE EXECUTE button is clicked. 3.1 The DYNALAB Library To animate a program, the user clicks 
on the We pull­down menu, selects the open option (which lists all of the programs in the library), and 
then highlights one of the listed programs, The source code of the chosen pro­gram is then displayed 
in the source code pane, ready for animation. At any point during animation of a pro­gram, selecting 
the open option of the File menu allows the user to quit the current animation and choose an­other program 
for animation. Other options in the File pulldown menu include restart for restarting a program at any 
point during program animation, and quit to exit DYNALAB. Animation of a selected program then proceeds 
under complete user control by way of various buttons on the screen and keys on the keyboard. The library 
of programs is actually a key compo­nent of DYNALAB. DYNALAB is not intended to sup­plant regular compilers 
for the development of pro­grams. Rather, DYNALAB is intended to allow stu­dents to study and explore 
examples from an extensive library of expertly constructed programs. There are many benefits to this 
approach. In closed laboratory ex­periments, students all have the same programs for the experiments, 
ensuring that the experiments are consis­tent across the class, that they are repeatable, and that they 
can be accomplished during the lab period. The library can be constructed to match a particular lab manual 
or textbook, and can be stocked with the types of programs and programming styles that an instructor 
wants the students to see. A text editor is not yet part of DYNALAB but programs can be typed with an 
existing editor, compiled by a DYNALAB compiler, and stored in the library. Thus, both instructors and 
students can enter programs of their own into DYNALAB if they so desire. However, as noted, the focus 
of DYNALAB is not on program development by students, but rather on program study and experimentation. 
 3.2 Program Animation DYNALAB is oriented towards complete novices and towards effective use in time-limited 
laboratory classes. It is therefore very user-friendly and intuitive, requiring virtually no instruction 
in its use and no set up time. Clicking on the START button (which appears when the animation window 
is first displayed) initiates pro­ gram animation, which is completely controlled by the user as described 
earlier. Execution can occur either forwards or in reverse, and there are three animation modes: Pause, 
Nopause, and Auto execute. 3.2.1 Forward and Reverse Execution Two buttons Forward Ezecute and Reverse 
Ezecute al­low the user to alternate between forward and reverse ..­ ~ile IPogram Fact{ input, output): 
Variable Display . {computes n I 3 -=-=­fact ----­ vat­ n: inte~er; m=4 -=-=- Factorial -=-=­ fund Ion 
{returns fa=torza n ! } 1(n: 1nte9er): Integer: ?l= 4 factorial LS undefzned -=-=­factwlal ----­ . . 
? factjri al is undefined then factorial := 1 -=-=­n.z factor ial =-=­ else factOrlal end; {factorial} 
:= n * Factor ial(n-l) factor~ al IS u def %ned begin {fact} wxte( Please enter an integer O or larger: 
> ); readln(n): while n < 0 do begin writeln; wlte<>lnput < O; bad data: , :1, . ): w-ite(-Please 
trg again: > ): t-.aadln(n) end ; Urlteln: urito(n:l,  factorial = , factor-ial(n):l, . ) end. {fact> 
,,,,, .. . k . .  .- . .. .. ~lease , enter .+_: an integer O or larger: > 4 , , R ~v# ;VEEEEXECU+ 
+ Pause mode .,,. . . ,, ,,, , -. ,.-.,,.. .. . .. ... . ~ Nopause mode RESET ! d. ,,,,,,. . . . . .....+ 
. . .. . ., . ... .* Fwto ,. ....... . execute Imode 625 ; Figure 1: DYNALAB Program Animator During 
an Animation of a Recursive Factorial Program execution (and animation). Reverse execution was de-the 
current portion of the source program code under signed into the project from the start as a result of 
us-consideration is highlighted twice-once before it is exe­ing an earlier pilot version of DYNALAB in 
the class-cuted and once after it is executed. With the first high­room [Ros9 1]. That version was not 
capable of reverse lighting, the user can ponder what will happen when execution, and there was no way 
short of restarting the highlighted source code is finally executed. Clicking the entire program to respond 
to frequent questions on FORWARD EXECUTE then causes the highlighted code arising from students about 
what had just happened to actually be executed and all other window panes to during the animation. With 
DYNALAB, it is possi-be updated accordingly, but the highlighting remains ble to reverse execution, step 
backwards arbitrarily far, paused at the same location in the source program code and then step forwards 
again as many times as desired (but in a different color). At this juncture, the user through any section 
of code that needs special explana-can examine the other window panes to see if the re­tion. Students 
find this feature very helpful in study-sult of executing the highlighted code was what he/she ing programs 
on their own as well. Confusing portions expected (e.g., did the variable display change as ex­of the 
program can be reviewed repeatedly, reversing pected?). Once that question has been answered, the through 
read statements allows different inputs to be user can then try to determine where execution should tried 
for effect, and error situations can be backed out proceed nezt (most useful, of course, in branch state­of 
to see what caused the problem. Additionally, the ments). Clicking on FORWARD EXECUTE at this point ability 
to control program execution this way seems to causes the animator to highlight the next portion of intrigue 
students and instructors alike, providing a nat-the source code that is about to be executed, and the 
ural incentive for DYNALAB use. process repeats. 3.2.2 The Pause Mode 3.2.3 The Nopause Mode The Paw. 
mod. io the default mode. It is particularly In the Nopause mode, the animator executes the high­helpful 
for instructors explaining new concepts and stu-lighted portion of the source code under consideration 
dents studying new concepts on their own. In this mode just once. Clicking on FORWARD EXECUTE causes 
the highlighted portion to be executed, all other window panes to be updated, and the source code highlight 
bar to move to the next source code portion to be executed (in a manner similar to common debuggers). 
This al­lows the program to be executed more swiftly, when each highlighted portion does not need to 
be examined in such detail. The user can toggle between the Pause and IVopause modes at will during program 
animation. 3.2.4 The Auto Execute Mode Selecting this mode causes the program to execute seam­lessly 
and at full speed to the end. This mode is particu­larly useful when program time complexity is the object 
of study, as the execution cost window is updated to re­flect the number of E-machine instructions executed. 
 3.2.5 User Selectable Input Version 1.0 of DYNALAB also includes a user choice of whether input should 
come from the keyboard or a prepared file. Selecting input from the keyboard allows the user to see what 
happens with different input val­ues on the spot (particularly in conjunction with reverse execution). 
The file choice allows the user to create nu­merous, perhaps large, files ahead of time for use in lab­oratory 
experiments (e.g., to empirically establish the time complexity of a particular algorithm).  4 The 
Status of DYNALAB DYNALAB currently runs under X-windows on some Unix platforms and under Microsoft Windows 
(with Win32 installed) on IBM PC compatible platforms. The only programming language that is essentially 
fully sup­ported at present is Pascal (with some Turbo Pascal ex­tensions). An Ada subset compiler has 
been developed, but it is not yet in form for release. A C/C++ compiler is also in embryonic form and 
not yet ready for release. DYNALAB can currently be used very effectively in introductory Pascal programming 
courses and in algo­rithm and data structures classes. It is particularly suited to introductory laboratories 
associated with new curriculum models. For example, it is being used at MSU in the formal laboratories 
associated with the breadth-first curriculum (see [PRS93] and [PRS94]), where student enthusiasm for 
program animation has been high in the laboratories. Closed laboratories can be designed around DYNALAB 
that cover all aspects of programming as well as experiments in time and space complexity. Room does 
not permit a description of sample laboratories in this paper, but laboratory as­signments and syllabi 
are available from the authors at the e-mail address cited at the beginning of this paper. Suffice itto 
say that a wealth of varied and motivat­ ing laboratory experiments are easily designed around DYNALAB. 
DYNALAB can also be used as an ancillary to stan­dard Pascal textbooks. The programs of a particular 
textbook can be compiled into the DYNALAB library, and the entire DYNALAB system can be packaged on a 
single disk with the textbook. The result is a much en­hanced teaching package (in comparison with the 
stan­dard disks normally packaged with textbooks, which just contain the source code of the programs 
in the book). 5 Evaluation No controlled studies of DYNALAB use compared with standard teaching and 
laboratory techniques have yet been conducted, as the current version of DYNALAB is relatively new. However, 
anecdotal evidence is over­whelmingly positive. When a pilot program animator was tested in a second 
semester programming course, the class itself became quite animated at one point, as students placed 
bets on the outcome of run time costs as the size of the input was changed for various pro­grams (quite 
remarkable for a large class of more than a hundred students). And when a recursive program was animated, 
one student fairly shouted from the back of the room, So that s how recursion works! 6 The Future of 
DYNALAB DYNALAB is a project that will never really end. More features are being incorporated into the 
system even as this paper is being written, features such as ezecute to, which will allow a user to click 
on a certain portion of a displayed program and then cause the animator to ex­ecute seamlessly to that 
point, annotation, which will provide a running commentary about the program be­ing animated (eventually 
even with sound) as the execu­tion of the program proceeds, and an extensive browser for the library. 
Also, algorithm animation and com­puter science concept animation are planned extensions to DYNALAB, 
which would make DYNALAB a com­plete dynamic laboratory infrastructure in support of camputer science 
experlmentatmn and InstructIon. References [BFG+94] Alan W. Biermann, Amr F. Fahmy, Curry Guinn, David 
Pennock, Dietolf Ramm, and Peter Wu. Teaching a Hierarchical Model of Computation with Animation Software 
in the First Course. In Twenty-jijlh SIGCSE Technical Symposium on Computer Science Education (SIGCSE 
Bulletin), volume 26, Dynamics. Master s thesis, Montana State pages 295 299, March 1994. University, 
June 1989. [Bir90] Michael R. Birch. An Emulator for the E-[PO094] David K. Poole, An Ada/CS Compiler 
jfor machine. Master s thesis, Montana State the E-machine. Master s thesis, Montana University, June 
1990. State University, July 1994. [BJR94] Stephen A. Blythe, Michael C. James, and [Pra94] Craig Pratt. 
An X-windows Program Ani- Susan H. Rodger. LLparse and LRparse: Vi-mator for DYNALAB. Master s thesis, 
Mcm­sual and Interactive Tools for Parsing. In tana State University, December 1994. In Twenty -fij3h 
SIGCSE Technical Symposium progress. on Computer Science Education (SIGCSE [PRS93] John T. Paxton, Rockford 
J. Ross, and Bulletin), volume 26, pages 208-212, March J. Denbigh Starkey. An Integrated, Breadth­1994. 
First Computer Science Curriculum Based [Bor] Borland International, 1800 Green Hills on Computing Curricula 
1991. In Twenty-Road, Scotts Valley, CA. TURBO Debug-Fourth SIGCSE Technical Symposium on geT 2.0. Computer 
Science Education (SIGCSE Bul­letin), volume 25, pages 68-72, March 19!13. [Bor95] Christopher M. Boroni. 
An MS-Windows Animator for DYNALAB. Master s thesis, [PRS94] John T. Paxton, Rockford J, Ross, and Montana 
State University, June 1995. In J. Denbigh Starkey. A Methodology for progress. Teaching an Integrated 
Computer Science Curriculum. In Twenty-Fij3h SIGCSE Te,:h­[DCG+89] Peter J. Denning, Douglas E. Cormier, 
on Science nical Symposium Computer Edu-David Gries, Michael C. Mulder, Allen B. cation (SIG CSE Bulletin), 
volume 26, pages Tucker, A. Joe Turner, and Paul R. Young. 1-5, March 1994. Computing as a Discipline. 
Communications of the Association for Computing Machin-[Ros91] Rockford J. Ross. Experience with the 
DY­ ery, 32( 1):9 23, January 1989. Seminal pa-NAMOD Program Animator. In Twenty­per resulting in Computing 
Curricula 1991. second SIGCSE Technical Symposium on Computer Science Education (SIGCSE Bul­[Go093] Frances 
W. Goosey. A miniPascal Compiler letin), volume 23, pages 35 42, March 19!11. for the E-machine. Master 
s thesis, Montana State University, April 1993. [RPF94] Klchard Rasala, Viera K. Proulx, and Har­ riet 
J. Fell. From Animation to Analy­[MD94] Ryan McFall and Herbert L. Dershem. Fi­ sis in Introductory Computer 
Science. In nite State Machine Simulation in an Intro­ Twenty-j$fih SIGCSE Technical Symposium ductory 
Lab. In Twenty-jijlh SIGCSE Tech­ on Computer Science Education (SIGCSE nical Symposium on Computer Science 
Edu- Bulletin), volume 26, pages 61 65, March cation (SIGCSE Bulletin), volume 26, pages 1994. 126 130, 
March 1994. [Sta90] John Stasko. Tango: A Framework and S;ys­[Nap94] Thomas L. Naps. An Object-Oriented 
Ap-tem for Algorithm Animation. IEEE Com­proach to Algorithm Visualization Easy, puter, 23(9):27 39, 
1990. Extensible, and Dynamic. SIGCSE Bulletin, [TUC91] Allen B. Tucker, editor. Computing Cur7tic­ 26(1):46 
50, March 1994. This paper cites ula 1991. ACM Press (order number 201910) other papers describing GAIGS. 
and IEEE Computer Society Press (order [NB94] Marc A. Najork and Marc H. Brown. A li-number 2220), 1991. 
Report on computer brary for Visualizing Combinatorial Struc-science curriculum guidelines. tures. Technical 
Report 128a, DEC Systems [Vis] Visible Software, P.O. Box 7788, Princeton, Research Center, 130 Lytton 
Avenue, Palo NJ. Use? Manual for DT. Pascal. Alto, CA 94301, September 1994. This tech report lists numerous 
references to other al­gorithm animation systems.  [Pat89] Samuel D. Patton. The E-machine: Sup­porting 
the Teaching of Program Execution 
			