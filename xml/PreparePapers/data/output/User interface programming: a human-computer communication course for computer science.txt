
 USER INTERFACE PROGRAMMING A Human-Computer Communication Course for Computer Science Steve Cunningham 
Computer Science Department California State University Stanislaus Turlock, CA 95380 This paper describes 
a course designed but relies primarily on the implementation to fill the need for education in the Human-overviews 
in Brown and Cunningham [3] Computer Communication area as described and supplemental library readings 
such as in the Denning report [4]. The course is still Brown [2] and Shneiderman [6], and system evolving, 
but it seems to illustrate a successful manuals-[7]. approach to undergraduate computer science This 
course differs somewhat from the education in this increasingly important area. Human-Computer Communications 
User Interface Programming is an component of the Computer Science core upper-division elective for computer 
science described in the draft ACM/IEEE curriculum majors. Since it is taught in the January term proposals 
[1]. These proposals focus on of a 4-1-4 curriculum, its lectures are human factors and emphasize psychological 
somewhat abbreviated so it might serve as a results and experiments. I disagree very model for only part 
of a similar course in a strongly with such an approach. An full semester. Its focus is on the undergraduate 
computer science program implementation of user interfaces for fairly should focus on material important 
to the simple programs but it also gives an overview largest possible number of its ~aduates, and of 
human-computer interaction examples, for most computing professionals this means theory and principles. 
It uses no single text emphasizing user interface tools and Permission to copy without fee all or part 
of this material is implementation. Computer science students granted provided that the copies are not 
made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given should learn something about the nature and that copying is 
by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires 
a fee application of user-interface tools, what kinds and/or specific permission. e 1991 ACM 0-89791 
-377-919110002-0330 ...$1 .50 of tools are available or possible, and how to build an interface for 
a program. They need not learn how to design a user interface, since such design seems to be too specialized 
and to require too much depth in psychology and task analysis for undergraduate Computer Science students 
(though it might be an excellent graduate or special topics course in the proper setting). The course 
described in this paper is designed to give students experience in using real user interface tools so 
they may contribute productively to software projects and have a basis to continue to learn about interfaces. 
The course includes minimal lectures and discussions because it is taught in a one-month period. This 
is probably a weakness, but the project work described below is intensive and its weight balances the 
lectures. The lectures describe fundamental issues in creating software that supports the user s task 
comfortably and is as invisible as possible. They cover such concepts as the user model and the need 
for invisible software, user-directed vs. program-directed interfaces, use of recall vs. recognition 
memory, implicit vs. explicit control, concepts of software usability, and an exploration of appropriate 
roles for programmers and computer scientists in user interface design teams. In addition to these general 
discussions, our implementation emphasis means that we spend quite a lot of time discussing interface 
technologies. We describe text-only interfaces (provided by libraries such as curses), bitmapped screens 
on their own systems (Macintosh, SunView), and networked systems (X, NeWS). We give serious consideration 
to object-oriented software technology for user interfaces, such as Actor, MacApp, and ICpak 201 for 
Objective-C, although we do not have enough PC s or Macintoshes for the first two or experience with 
the latter to use these seriously in the course (yet). Students say that the implementation experience 
they get in the course is very satisfying and that they get a sound background to understand interface 
concepts. We would like to extend the lectures to discuss interfaces that go beyond the current WIMP 
(window, icon, mouse, pointer) environment into the realm of virtual reality [4]. As noted above, student 
projects are a critical part of our course. There are two key criteria for a good user interface project. 
First, the program should be interaction intensive, not computation intensive, and second, the program 
should be relatively small and if possible the +----------------------------------------------------------+ 
Di t-ect i ons: complete code for a version I I + + + Iyku I I \l/ + ++1 h--1 1+ of the program with 
a poor I I I /l\ I + +++ + Ibjn interface should be available. I I + + + I Commands: II I wait for end 
I I t: telepot-t 1+ ++ Iq: quit We decided to focus on a I I w: I L: t-edraw screen ++ I I I Legend: 
game program, although I g I I students with other interests I I + ~ ~ ~ ~~theap were allowed to choose 
I + + ++++ I Score: 322 ++ + I Wait bonus: 18 I 1 another program (as was I + -----------------------------------------------------------+ 
Figure 1: a screen from robots done by a couple of students). Since games programs are especially sensitive 
to variations in control, they are particularly valuable for this course. We chose the program /usr/games/robots 
as the basis for our projects. This comes with source code in many standard Unix distributions. This 
program uses text-oriented full screen operation. Figure 1 shows a standard robots screen. A similar 
game, named Daleks, is available for older models of the Macintosh; its screen is shown in Figure 2. 
The game has a playing field containing a single player and several robots. The player can move one step 
in any direction but on each turn, each robot attempts to move toward the player by decreasing the horizontal 
and/ or vertical distance between the itself and the player, if possible. If a robot moves onto the player 
s position, I U4U the player dies and the game Game control ptildown menu \l / Daleks Player, with direction 
is over; if two robots try to arrows M collision pile occupy the same position, both die and a junk pile 
is created at that point. Robots do not know about junk Figure 2: a screen from Daleks with some features 
indicated piles, and if a robot hits a junk pile it also dies. At any point theplayer may teleport from 
thecurrent position toa random unoccupied position on the board, but the robots get one move after a 
teleport and may kill the player then. The user gets points for each robot that dies. We analyzed the 
structure of the robots game and developed the vocabulary shown in Table 1. We then implemented three 
versions of this game using SunView on Sun 3/60 workstations. One version, shown in Figure 3, has a totally 
explicit interface; all the :player s control is made on a control panel to the right of the playing 
field. This version plays much like robots (and, possibly surprisingly, is almost as fast). It seems 
to be easy to learn but its technique for controlling the moticm of the Vocabulary for robots player 
robot is quite different The standard behaviors of robots are listed here, with optional behaviors from 
the other two game given in italics. 1. Fundamental constructs in the game: self, robots, junkpile implementations. 
This allowed Each is displayed with a character > could be an icon or even a color us to compare user 
models quite 2. Fundamental action: moving the pieces Self moves in single steps with input direction 
 well. > could move to ~ mm point with point input Robots reduce difference in x and y directions, one 
unit per step A second version of the Robots can be moved automatically with self in place ( wait mode) 
game offers a mix of implicit 3. Fundamental action: destruction of self or pieces Self is destroyed 
by teleporting next to a robot or by a wait collision with a robot and explicit control. This is the 
> could also be destroyed by any robot moving to self position Robots are destroyed in one of two ways: 
most fully developed of the collision of two robots, leaving a junkpile collision of robot with a junkpile 
games, and its screen is shown > could add sonic screwdriver analogue, with various options in Figure 
4. The user can move 4. Fundamental action: teleporting the the player robot by clicking 5. Fundamental 
action: scoring points Score per robot destroyed the mouse anywhere on the Bonus score per robot destroyed 
while in wait mode Scores saved in common file with limit on scores per user playing field, and the player 
6. Fundamental action: representing control options Command summary at right of screen robot will move 
toward that > could be click-sensitive squares or arrows, with pulldown menus > some such options are 
teleport, undo, screwdriver ... point using the same algorithm 7. Options for the game as the robots 
use in moving Board size, number of robots, etc. toward the player. However, Table 1: The vocabulary 
of robots all other game control must be made on a control panel. As the game progresses, double-speed 
robots (who move two steps per play) appear on the playing field, and later there are gems which may 
be picked up for extra points but are destroyed whenever a robot hits them (these are not shown on the 
figure). The robots and junkpiles are implemented as cursors, and the player and controls are icons. 
The controls use text, stylized drawings of devices from the Dr. Who series (the sonic screwdriver or 
the Tardis for teleports), or a drawing of a disk for file access. This version plays more like an improved 
version of Daleks, although in Daleks the analogue of the control panel is a pulldown menu from the top 
menu bar as Figure 2 shows. Code for this game version has been posted to comp.sources.games as sunbots 
by the author, Kevin Wright. A third version of the game, whose screen in shown in Figure 5, has fully 
implicit control. There is no control panel on the screen and no menu bar; instead, the left mouse button 
controls player moves in the same way as it NO k MOVE I p TdePon L8st Std .- -. - -.-.-. --. --------- 
New Gem [1 QUIT &#38; Level o Smen O Figure 3: A partial screen from the explicit control implementation: 
all game actions are controlled from the right-hand panel. 5,: . . ,.,, n RE5ET &#38;n t #&#38; tn C!UIT 
M a &#38; &#38; 2;:% #J\= LF15T # M 5TFlND DtM t / ?- S/ n M m ll!!ll8 t ElI Figure 4: A partial screen 
from the mixed-control implementation the right-hand panel controls everything but player motion. 334 
. 1A o Screen O %= Plww &#38; = Robot i&#38;=Jurk does intheprevious version, the middle I button teleports 
the player, and the right button opens a pop-up window that controls all the other game actions. This 
is quite a pleasing version since the screen is not cluttered with control devices. As the player, robots 
and junkpiles show, this version was &#38; derived from the version in Figure 3. The finished programs 
show several styles as a result of individuals choices and decisions. The students rated each others 
programs on Figure 5: A partial screen from the implicit control implementation the right-button menu 
is normally playability: leading to discussions of invisible but has been activated. software usability. 
We have made these versions of the game available to other students for their comments, which could lead 
to discussions of user testing, but time did not permit any formal discussions in this area. The User 
Interface Programming course has met its goals of providing both a good overview of the subject and some 
concrete implementation experience. While it will continue to be improved, it is a worthwhile approach 
to the user interface side of human-computer communication. For the general computer science student, 
I believe this is superior to a course that emphasizes the psychology of human factors. The author would 
like to acknowledge the work of our laboratory technician, Kevin Wright, and students Mike Malone and 
Nancy Biedenweg. This material is based cm work supported by the National Science Foundation under Grant 
No. USE 8852038. Any opinions, findings, and conclusions or recommendations expressed in this material 
are those of the author and do not necessarily reflect the views of the National Science Foundation. 
References [1] Barnes, Bruce H., Allen B. Tucker, et.al. Draft Report of the ACM/IEEE Joint Curriculum 
Task Force, June 1990. [2] Brown, C. Marlin. Hwnan-Cmnputer Intwjace Design Guidelines. Ablex, Norwood, 
NJ, 1988. [31 Brown, Judith R. and Steve Cunningham. User Interface Programming: Principles and Examples. 
John Wiley &#38; Sons, Inc, New York, 1989. [41 Denning, Peter et.al. Computing as a Discipline. Communications 
of the ACM, 32 (January 1989), 9-23. [51 Kreuger, Myron. Artificial Reality. Addison-Wesley, Reading, 
MA, 1985. [61 Shneiderman, Ben. Designing the User Interface. Addison-Wesley, Reading, MA, 1987. [7] 
Sun Microsystems. SunView 1 Systems Programmer s Guide, SunView 1 Programmer s Guide, Pixrect Reference 
Manual, May, 1988.
			