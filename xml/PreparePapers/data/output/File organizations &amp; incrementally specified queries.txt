
 File Organizations and Incrementally Specified Queries Caroline M. Eastman Department of Computer Science 
University of South Carolina Columbia, South Carolina 29208  Abstract Queries to information retrieval 
systems are often incrementally specified as a.resuh of user interaction with the system. However, most 
discussions of file organizations consider only completely specified queries. The choice of file organizations 
to support such incremental specification is discussed qualitatively in this extended abstract. (Quan- 
titative comparisons are partially complete and are not presented here.) Organizations which are advantageous 
for completely specified queries are not necessarily so for incrementally specified queries (and vice 
versa). Introduction Algorithms for searching are of vital importance in the informa-tion sciences. 
Searching algorithms which are hased upon a single key are fairly well understood, even though advances 
in this area continue. Much of the recent work on searching has concentrated on multiattri- bute searching, 
which is also called multikey searching, multiple attri- bute searching, or associative searching. (Here 
"key" is used in a gen- eral sense to refer to any atlxibute which may be used for searching rather than 
in the restricted sense of a set of attributes which uniquely identifies a record). Permission to copy 
without fee all or part of this material is granted provided that the copies are not made or distributed 
for direct commercial advantage, the ACM copyright notice and the title of the publication and its date 
appear, and notice is given that copying is by permission of the Association for Com- puting Machinery. 
To copy otherwise, or to republish, requires a fee and/or specific permission. &#38;#169; 1987 ACM 089791-232-2/87/0006/0217--75Â¢ 
Overviews of searching are given in Gudes and Ganesh (1981), Knuth (1973b), Lefkovitz (1969), van Rijsbergen 
(1976), and Yang (1978). Specific topics within the broad area of multiattribute search- ing which have 
been surveyed include range searching (Bentley and Friedman, 1979), text retrieval (Faloutsos, 1985), 
and hierarchical structures (Samet, 1984); a more general survey is presented in Mehlhom (1984). In addition, 
searching is discussed in many text and reference books on information systems. Extended discussions 
in the context of database management systems are contained in Cardeaas (1985), Date (1981), and Wiederhold 
(1983). Searching in information retrieval systems is discussed in Heaps (1978), Salton (1975), and van 
Rijsbergen (1979).  Incrementally Specified Queries Most work in the area of file organizations has 
implicitly assumed that the workload consists of a sequence of complete queries. (This was the ease in 
all of the papers surveyed in Eastman (1983).) The system retrieves the appropriate information in response 
to one query and then goes on to the next query. In fact, it may be the ease that the next query is a 
modification of the previous query. The query is built up in a series of stages until the user is satisfied 
with the result. Such queries are referred to here as incrementally specified queries. Interactive specification 
of this nature is common in current informa- tion retrieval systems; it may well become more common in 
other con- texts as greater attention is given to the interactive aspects of systems, 217 Classes of 
Query Modifications Severn kinds of simple modifications can be identified. An expansion of the query 
retrieves a superset of the original set of items. This is a broadening operation; it can result from 
an OR operation. A reslriction of the query retrieves a subset of the original set of items. This is 
a n~owing operation; it can result from the use of an AND or a NOT operation. A shifting of the query 
translates the retrieved set into a different set, which may or may not overlap the original set. Such 
a shifting could result from a change in a specific attribute value or from a shift in the range specified 
for anattribute. Moditicatious can be classified on the basis either of the changes to the set(s) of 
retrieved items or on the basis of the query language operations used. The subject of effective modifications 
for queries to information retrieval systems has been extensively studied, and several classifications 
and lists of suggestions exist (e.g., Bates, 1979; Fidel, 1985; Harter and Peters, 1986). It is possible 
to relate the changes in the sets to the operations used. Some, but not all, of these mappings are straightforward. 
 Appropriate F'de Organizations A file organization to support incrementally specified queries must be 
able to efficiently support the identification and perhaps the retrieval of partial results and their 
later combination. One obvious approach is simply to handle each modified version as a separate query. 
In many cases this will result in additional work as many of the same operations will need to be repeated. 
Inverted files are frequentiy used in information retrieval sys- tems, and their use to support incrementally 
specified queries is well understood. A number of proposals for alternative structures to support information 
retrieval systems have been made in recent years. A possi- ble use of MAT files for information retrieval 
is described by Rao et al. (1985). Work on hashed access to retrieval systems has been inves- tigated 
for many years (e.g., Files and Huskey, 1969; Moore, 1961). Some recent references on signature files 
include Christodonlakis (1984), Christodoulakis and Faloutsos (1984), Faloutsos (1985), Rabitti and Zazki 
(1984), and Tsichristzis and Christodonlakis (1983). The comparisons that have been made in these proposals 
have been based upon the handling of complete queries. The problem of incrementally specified queries 
has not been considered. Incremental specification of best match queries to information retrieval systems 
is more difficult to handle than boolean combinations of partial match queries. The possible modifications 
can not be clearly mapped into standard set operations. Although many of the same file structures can 
be used, the processing is somewhat more complex. The processing of best match queries using signature 
files has been exam- iued by Mohan and Willett (1985). The use of inverted files has been examined by 
Buckley (1985), Murtagh (1982), Perry and Willett (1983), and Smeaton and van Rijsbergen (1981). Clustered 
files are described in Salton and Wong (1978). In these cases complete queries were eousidered. Prototype 
Queries Considered The current comparison does not involve experimental evalua- tion. Thus a realistic 
workload of queries is not considered. Instead, a few simple prototypical queries are considered. These 
are summarized below; A and B are used to represented arbitrary requested terms. Query Sl: A Query O1: 
A OR B Query 02: A; A OR B Query 03: A; B; A OR B Query AI: A AND B Query A2: A; A AND B Query A3: A; 
B; A AND B Query NI: A NOT B Query N2: A; A NOT B Query N3: A; B;'A NOT B  Queries S1, O1, A1, and 
N1 do not involve incremental specification; only one stage is required. Queries 02, A2, and N2 require 
two stages. First, term A is requested; then it is combined with term B using one of the logical operators..However, 
term B is not searched for separately. Queries 03, A3, and N3 require three stages of search. Term A 
is requested. Then term B is requested. Then A and B are combined using one of the logical operators. 
The above classification is intended for use in discussing search performance in different file organizations. 
It is intended to cover pos- sible processing orders rather than to be a model of either user behavior 
or of a specific system. It can clearly be extended to handle more than two terms. Signature Files Hash 
functions may be used to construct a multiattribute file organization. The two basic approaches to combining 
the hash func- tions for multiple attributes involve superimposed codes and con-catenated codes. Such 
files are sometimes referred to as signature files. Comparisons of alternative approaches to constructing 
signature files are contained in some of the references mentioned earlier. A query to a retrieval system 
can be mapped into a correspond- ing bit pattern. This pattern is then compared to each signature, and 
those which are potential matches are selected. False drops are possi- ble, but can be kept at a reasonably 
low level with careful design. Although a sequential search is required, the signature file is much smaller 
than the original document file. Also, the comparison of the bit patterns is easy. Consider an incrementally 
specified query. If the modification involves a broadening, the entire signature file must be scanned 
again for the new version of the query. However, if the query modification is a narrowing of the query, 
two approaches are possible. Either another search through the entire signature file must be performed, 
or the items already retrieved must be examined to select the appropriate subset. If pointers to the 
signatures originally selected have been kept, then only those signat~es need to be checked. Or ff pointers 
to the records selected are available, those records may be examined. In either case, the processing 
required begins to resemble inverted file list merging.  Inverted Files The use of inverted files to 
handle boolean queries is well under- stood, and the details will not be repeated here. Each term is 
located in the index, and the lists of associated items are manipulated appropri- ately. The use of incremental 
specification has little impact on the searching efficiency of a system based on inverted files. Each 
term must still be located, and the same manipulations on the associated lists must still be performed. 
However, incremental specification does mean that there is less potential for query optimization (e.g., 
Liu, 1976). Tree Structured Files Tree structured files that have been proposed for use in retrieval 
systems include clustered files (e.g., Salton and Wong, 1978; van Rijsbergen, 1979), MAT files (e.g., 
Ran et al., 1985), and a modification of k-d trees (Eastman and Weiss, 1982). Clustered files have generally 
been proposed for use in systems using best match searching. Most of the other multidimensional tree 
structures have been designed for use in formatted databases with a few distinct attri- butes. It is 
not always feasible to extend them to the information retrieval environment. Multidimensional tree structured 
files generally perform best for complex queries involving many attributes since the number of sub- trees 
to search is much lower for such queries. However, suppose that a query is modified. As with the signature 
files, either a complete new search for the modified query must be performed or the sets of items previously 
found must be examined. The latter case is only feasible if the query is narrowed. Comparison The comparison 
here focnsses on the handling of incrementally specified queries. Comparisons involving other aspects 
of pcrforman~ can be found in some of the references already mentioned. The impact on performance of 
the number of terms specified (a simple measure of query complexity) and of the number of stages are 
considered. In a signature file, the total number of terms specified has little impact on the search 
time. However, each stage can involve an addi- tional scan of the signature file. The pcffurmance of 
an inverted file is not sensitive to the number of stages. In the absence of automatic query optimization, 
essentially the same work must be done no matter how many stages there are. However, additional work 
must be done for each additional term. The specification of additional terms cuts down on the search 
time required in most tree structured files. However, many such organizations perform best for complex 
queries involving many of the possible attributes. If several stages are used to specify a complex query, 
the advantages arc seriously reduced. The consideration of incrementally specified queries adds an additional 
level of variability to the description of the workload and thus further complicates the process of evaluation. 
The various kinds of mulfiatffibute query must still be considered. However, a given query can now be 
specified in a number of different ways. Database Management Systems Incremental specification is currently 
less frequently used in interactions with database management systems. Query languages typ- ically provide 
only limited capabilities to modify previous queries. For example, it might be possible to enter a query 
in which a different attri- bute value has been substituted for the value used in an earlier query. Although 
users can generally modify a query during editing, there is no expectation that partial results will 
be either identified or retrieved. At the present time there is really no data available on the extent 
to which database queries are incrementally specified, let alone how much incre- mental specification 
would be used if such capabilities were better sup- pomed. However, there are some experimental database 
management systems which do allow incremental specification. For example, the user interface to the RABBIT 
system (Williams, 1984) is based upon retrieval by refc~rmulation. After a user enters an initial query, 
the sys- tem presents one or more examples of the objects specified and a menu of possible modifications. 
Efficient retrieval of the intermediate objects was found to be a problem in a LISP implementation of 
RABBIT. Some recent experimental comparisons of file structures for mul- tiattribute relrieval in a 
database context are presented in Beckley et al. (1984, 1985a, 1985b), Dandamudi and Sorenson (1985), 
and Kriegul (1984). The structures considered in these comparisons include inverted files, grid files, 
k-d trees, multidimensional B-trees, and BD trees. A variety of query types were used in the comparisons. 
How- ever, only complete queries were considered in these comparisons. Possible Future Work Interactions 
with information systems of various kinds have been extensively studied. Borgman (1986) and Penniman 
and Dominick (1980) provide overviews of studies of interactions with information retrieval systems. 
Jarke and Vassiliou (1985) and Reisner (1981) pro- vide overviews of the work on database query languages. 
For example, Cooper (1983) presents information on the distribution of the numbers of terms in search 
statements and on the use of different logical opera- tors. However, studies of more complex systems 
and patterns of interactions would be appropriate in future work. Almost all of the work referenced 
here has been done in the con- text of current hardware technology. The nature of the problem is largely 
independent of the hardware used. However, it is clear that changes in hardware technology may change 
the structure of any specific solution and may well change the nature of interactions. An example of 
such work is a prototype implementation of an information retrieval system on a connection machine; an 
overview is provided in Stanfill and Kahle (1986). Some Related Problems The problem of handling incrementally 
specified queries can be contrasted with some related problems: The question of batching queries has 
been examined by a number of authors, including Batory and Gotlieb (1981), Christodoulakis and Faloutsos 
(1984), Piwowarcki (1985), and Shneiderman and Goodman (1976). The problem here is that of determining 
efficient mechanisms for handling two or more separate queries which are assumed to be presented concurrently. 
However, if two parts of a query are incrementally presented, con- current processing is not possible. 
The problems also differ from thos e involved in query optimiza- tion, in which a good sequence of steps 
to handle a complete query is identified. A survey of query optimization techniques for database management 
systems is given in Jarke and Koch (1984); Liu (1976) discusses the optimization of searches using inverted 
files to handle boolean queries to information retrieval systems. The different parts of an incrementally 
specified query must be handled in the order in which they are presented. The general problem of handling 
incrementally specified queries has much in common with the problem of handling incremental parsing (Ghezzi 
and Mandrioli, 1979; Medina-Mora and Feiler, 1981; Pollock and Sofia, 1985). In both cases an attempt 
is made to make use of as much of the previous work as possible. However, the problem domains are distinct. 
BIBLIOGRAPHY Bates, Marcia J., "Information search tactics," Journal of the Ameri- can Society for Information 
Science, vol. 30, no. 4, pp. 205-214, July 1979. Batory, D. S. and C. C. Goflieb, "A unifying model of 
physical data- bases," ACM Transactions on Database Systems, vol. 7, no. 4, pp. 509-539, December 1982. 
Beckley, D A., M. W. Evens, andV. K. Raman, "An experiment with balanced and unbalanced k-d trees for 
associative retrieval," IEEE COMPSAC 1984, pp. 256-262, Chicago, Illinois, No- vember 1984. Beckley, 
D. A., M. W. Evens, and V. K. Raman, "Empirical comparis- on of associative file structures," Proceedings 
of the Internation- al Conference on Foundations of Data Organization, ppo 315- 326, Kyoto, Japan, May 
1985. Beekley, D. A., M. W. Evens, and V. K. Raman, "Multikey retrieval from k-d trees and quad-trees," 
International Conference on Management of Data, pp. 291-301, Association for Computing Machinery, New 
York, NY, May 1985. ACM Order number 472850 Bentley, Jon L. and Jerome H. Friedman, "Data structures 
for range searching," Computing Surveys, vol. 11, no. 4, pp. 297-409, July 1975. Borgman, Christine L., 
"Why are online catalogs hard to use? Lessons learned from information retrieval studies," Journal of 
the American Society for Information Science, vol. 37, no. 6, pp. 387-400, November 1986. Buckley, Chris, 
"Optimization of inverted vector search," in Proceed-ings of SIGIR 85, pp. 97-105, Montreal, Quebec, 
June 5-7 1985. Cardenas, Alfonso F., "Analysis and performance of inverted database structures," Communications 
of the ACM, vol. 18, no. 5, pp. 253-263, May 1975. Carderms, Alfonso F., Data Base Management Systems, 
Second Edi- tion, Allyn and Bacon, Inc., Boston, MA, 1985. Christodoulakis, S., "Framework for the development 
of an experi- mental mixed-mode message system," in Research and Development in Information Retrieval: 
Proceedings of the Third Joint BCS and ACM Symposium, ed. C. J. van Rijsbergen, pp. 1- 20, Cambridge 
University Press, Cambridge, 1984. Christodoulakis, S. and C. Faloutsos, "Design considerations for a 
message file server," IEEE Transactions on Software Engineer- ing, vol. I0, no. 2, pp. 201-210, March 
1984. Cooper, Michael D., "Usage patterns of an online search system," Journal of the American Society 
for Information Science, vol. 34, no. 5, pp. 343-349, September 1983. Dandamudi, Sivarama P. and Paul 
G. Sorenson, "An empirical com- parison of some variations of the k-d tree and BD tree," Interna-tional 
Journal of Computer and Information Science, vol. 14, no. 3, pp. 135-160, June 1985. Date, C. J., An 
Introduction to Database Systems, Third Edition, Addison-Wesley Publishing Company, Inc., Reading, MA, 
1981. Eastman, Caroline M., "Current practice in the evaluation of mnitikey search algorithms," Proc. 
SIGIR 1983, pp. 197-204, ACM, New York, May, 1983. Eastman, Carofine M. and Stephen F. Weiss, "Tree structures 
for high dimensionality nearest neighbor searching," Information Sys-terns, vol. 7, no. 2,pp. 115-122, 
1982. Faloutsos, Chris, "Access methods for text," ACM Computing Sur- veys, vol. 17, no. 1, pp. 49-74, 
March 1985. Fidel, Raya, "Moves in online searching," Online Review, vol. 9, no. 1, pp. 61-74, February 
1985. Files, J. R. and H. D. Huskey, "An information retrieval system based on superimposed coding," 
Proc. AFIPS FJCC, vol. 35, AFIPS Press, Arlington, VA, 1969. Ghezzi, Carlo and Dino Mandrioli, "Incremental 
parsing," ACM Tran- sactions on Programming Languages and Systems, vol. 1, no. 1, pp. 58-70, July 1979. 
Gudes, Ehud and S. Ganesh, "A survey of file organizations and per- formance," in Advances in Information 
Systems Science, Volume 8, ed. J. T. Tou, pp. 1-73, Plenum Press, New York, NY, 1981. Harter, Stephen 
P. and Anne Rogers Peters, "Heuristics for online in- formation retrieval: a typology and preliminary 
listing," Online Review, vol. 9, no. 5, pp. 407-424, October 1986. Heaps, H. S., Information Retrieval: 
Computational and Theoretical Aspects, Academic Press, New York, NY', 1978. Jarke, Mattlfias and Jurgen 
Koch, "Query optimization in database sys- Salton, Gerard, Dynamic Information and Library Processing, 
Prentice tems," ACM Computing Surveys, vol. 16, no. 2, pp. 111-152, Hall, Inc., Englewood Cliffs, NJ, 
1975. June 1984. Jarke, Matthias and Yannis Vassiliou, "A framework for choosing a database query language," 
Computing Surveys, vol. 17, no. 3, pp. 313-341, September 1985. Knuth, D. E., The Art of Computer Programming. 
Volume 3: Sorting and Searching., Addison-Wesley Publishing Company, Inc., Reading, Massachusetts, 1973. 
Kriegel, H., "Performance comparison of index structures for multi- key retrieval,'" ACM-SIGMOD 1984 
International Conference on the Management of Data, pp. 186-196, Association for Com- puting Machinery, 
New York, NY, June 1984. Letkowitz, D., File structures for on-line systems, Spartan Books, Ro- chelle 
Park, NJ, 1969. Liu, J. W. S., "Algorithms for parsing search queries in systems with inverted file 
organization," ACM Transactions on Database Sys- tems, vol. 1, no. 4, pp. 299-316, 1976. Medina-Moru, 
Ranl and Peter H. Feiler, "An incremental program- ruing environment," IEEE Transactions on Software 
Engineer- ing, vol. 7, no. 5, pp. 472-481, September 1981. Mehlhom, Kurt, Data structures and algorithms 
3: multidimensional searching and computational geometry, Springer Verlag, New York, New York, 1984. 
Mohan, K. C. and P. Willet, "Nearest neighbor semehing in serial files using text signatures," Journal 
of Information Sciences, vol. I 1, no. 1, pp. 31-40, 1985. Moore, R. T., "A screening method for lar'ge 
information retrieval files," in Western Joint Computer Conference, pp. 259-274, 1961. Murtagh, F., "A 
very fast exact nearest neighbor algorithm for use in information retrieval," Information Technology: 
Research and Development, vol. 1, pp. 275-283, 1982. Penniman, W. and W. Dominick, "Monitoring and evaluation 
of on- line information system usage," Information Processing and Management, vol. 116, pp. 17-35, 1980. 
Perry, S. A. and P. Willett, "A review of the use of inverted files for best match searching in information 
retrieval systems," Journal of Information Science: Principles and Practice, vol. 6, pp. 59- 66, 1983. 
Piwowarski, Marek, "Comments on the batcbed searching of sequen- tial and tree-structured files," ACM 
Transactions on Database Systems, vol. I0, no. 2, pp. 285-287, Jane 1985. Pollock, Lori L. and Mary Lou 
Sofia, "Incremental compilation of lo-- cally optimized code," in Proceedings of the Twelth Annual ACM 
Symposium on Principles of Prograraraing Languages, pp. 152-164, New Orleans, LA, January 14-16, 1985. 
Rabitti, F. and J. Zizka, "Evaluation of access methods to text docu- ments in office systems," in Research 
and Development in Infor- mation Retrieval: Proceedings of the Third Joint BCS and ACM Symposium, ed. 
C. J. van Rijsbergen, pp. 21--40, Cambridge University Press, Cambridge, 1984. Ran, S. V. Nageswara, 
S. Sitharama Iyengar, and C. E. Veal Madha- van, "A comparative study of multiple attribute tree and 
inverted file structures for large bibliographic files," Information Pro- cessing and Management, vol. 
21, no. 5, pp. 433--442, 1985. Reisner, Phyllis, "Human factors studies of database query languages: 
a survey and assessment," Computing Surveys, vol. 13, no. I, pp. 13-31, March 1981. Roberts, Charles 
S., "Partial-match retrieval via the method of super- imposed codes," Proceedings of the IEEE, vol. 67, 
no. 12, pp. 1624-1642, December 1979. Salton, Gerard and Michael J. MeGilI, Introduction to Modern Infor- 
mation Retrieval, McGraw-Hill Book Company, New York, NY, 1983. Salton, Gerard and A. Wong, "Generation 
and search of clustered files," ACM Transactions on Database Systems, vol. 3, no. 4, pp. 321-346, December 
1978. Samet, Hanan, "The quadtree and related hierarchical data structures," ACM Computing Surveys, vol. 
16, no. 2, pp. 187-260, 1984. Shneiderman, Ben and Victor Goodman, "Batched searching of sequential and 
tree slructured files," ACM Transactions on Data- base Systems, vol. 1, no. 3, pp. 268-275, September 
1976. Smeaton, A. F. and C. J. Van Rijsbergen, "The nearest neighbour problem in information retrieval: 
an algorithm using upper bounds," in Proceedings of the Fourth Annual ACM S1GIR Conference, pp. 83-87, 
Oakland, California, May/June 1981. Stanfill, Craig and Brester Kahle, "Parallel free text search on 
the con- nection machine system," Communications of the ACM, vol. 29, no. 12, pp. 1229-1239, December 
1986. Tsichritzis, Dennis and Stavros Christodoulakis, "Message files," ACM Transactions on Office Information 
Systems, vol. 1, no. 1, pp. 88-98, January 1983. van Rijsbergen, C. J., "File organization in library 
automation and in- formation retrieval," Journal ofDocuraentation, vol. 32, no. 4, pp. 294-317, December 
1976. van Rijsbergen, C. J., Information Retrieval, Second Edition, Butter-worths, London, England, 1979. 
 Wiederhold, Gio, Databse Design, Second Edition, McGraw-Hill, Inc., New York, NY, 1983. Williams, Michael 
David,' 'What makes RABBIT run?," International Journal of Man-Machine Studies, vol. 21, no. 4, pp. 333-352, 
October 1984. Yang, C. S., "Design and evaluation of file structures," in Annual Re- view of Information 
Science and Technology, ed. Martha Willi-ams, 1978.  
			