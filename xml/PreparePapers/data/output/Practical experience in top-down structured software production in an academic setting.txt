
 PRACTICAL EXPERIENCE IN TOP-DOWN STRUCTURED SOFTWARE PRODUCTION IN AN ACADEMIC SETTING W. C. Tam and 
S. N. Busenberg Harvey Mudd College Claremont, California 91711 I. INTRODUCTION Much has been said about 
tile importance of teaching top-down program design and structured programming in computer programming 
courses. However, instruc-tion in these concepts has usually been limited to short homework assignments 
and at most to term projects. This type of experience is very diffe-rent from the production programming 
environment encountered in industry, where the problems tackled are generally more complex and on a larger 
scale. Also, in many cases industrial programs are pro-duced by a programming team under constraints 
in both time and resources. For students who aspire to a career in the software area, experience in a 
realistic production programming environment is desirable. Such experience is not provided in the traditional 
courses and novel ways have to be devised in order to bring it on campus. At Harvey Mudd College, an 
academic program, called the Mathematics Clinic, has been insti- tured with the aim of providing this 
type of realistic experience to the student. The Mathe- matics Clinic brings problems from industry to 
be studied and solved by small teams of students under faculty supervision. The problems are selected 
for their educational value, but atten- tion is paid to the feasibility of producing results that are 
of value to the sponsoring indus- trial concern. The general organization of the Clinic program has been 
described by Spanier (1). In the present paper, a production programming project under- taken by the 
Mathematics Clinic is described with emphasis placed on the mode of instruction and the experience gained 
by the students. 2. PROJECT DESCRIPTION The project described here was sponsored by the Marine Systems 
Division of Honeywell, Inc., of West Covina, California. The goal of the pro-ject was to produce the 
software for the instructor console of a sonar system training laboratory. The instructor console consists 
of an IMLAC PDS4 Gra- phics Display Computer with two CRT screens, a keyboard, and a light-pen. Besides 
the instruc-tor console, the sonar system training laboratory includes a trainer computer (a Honeywell 
716 computer) which simulates the movements of various sea vehicles and their sonar characteristics. 
The trainer somputer generates, in real time, all the data needed to update ship positions on the instructor's 
console and also to create on the student's console the response of a sonar unit operating in the simulated 
environment. The major functions of the instructor console software are: I. Display Generation. The instructor 
control generates two displays for the instructor. The first is an alphanumeric display (see figure I) 
of all pertinent information, including the depth and position of all vehicles in the training mission, 
and all the commands available to the instructor. The instructor can monitor commands entered on an alphanumeric 
keyboard, or by using the light-pen to change any variables or display parameters. The second display 
is a geoplot display (figure 2) that shows the present position and course of all vehi-cles within the 
geoplot radius selected by the instructor. 2. Handling the Instructor's Changes of Variables. The program 
allows the instructor to change the variables that are pertinent to the training mission. These variables 
are of several types: a. Nission Variables -the variables that directly affect the operation of the training 
mission, i.e. target type, depth, speed, and so on. These variables are needed by the trainer computer 
to enable it to simulate the motion of the vehicles and their sonar res- ponse. These variables are coded 
and sent to the trainer computer which~ in turn, sends back the necessary information for the up- dating 
of the geoplot display. b. Display Variables -the variables that affect the way the information is displayed 
to the instructor. These include the geoplot radius, the centering of the students ship in the geo- plot, 
and the swapping of the two displays.  3. Other Capabilities. Other capabilities of the program are 
the availability of a freeze mode, a playback mode and the normal run mode. The freeze mode allows the 
instructor to stop the simulated mission at any point, thus allowing him to discuss with the student 
salient points of the mission. The run mode allows the instructor to restart the mission at the point 
where it is frozen. Finally, the playback mode allows the instructor to play back any previously run 
mission, starting at any one 31 PROBLEM CONTROL QI IDENT: XXXXX-XXX Q2 REPLAY: NORM/ACCEL Q3 INITIALIZE 
Q4 RUN/FREEZE Q5 TERMINATE Wl W2 W3 W4 W5 R/T 2 HR 15MIN SEA STATE 3 LAYER DEPTH 1200 FT SURF SOUND VEL 
474G5 FT/SEC LAYER SOUND VEL 4800.0 FT/SEC CONV ZONE RANGE XXXXXX YD O0 SEC E OWN SHIP I CENTER ON/OFF 
2 GYRO ON/OFF 3 DEPTH I00 FT 4 COURSE 63.5 DEG 5 SPEED 20.0 KN R TARGET TYPE= I DO 2 SSNA 3 SSN 4 SS 
5 TR 6 AG TI TZ T3 3"4 T5 T6 DO SSNA SSN SS TR AG I BEARING 135.2 DEG 157.5 356.7 151.6 282.2 138.2 2 
RANGE 38400 YD 82500 22080 51710 32000 29560 3 DEPTH 0 FT 140 I I0 120 0 0 4 COURSE 90.0 DEG 90.0 116.5 
90.0 90.0 90.0 5 SPEED 15.0 KN 40.0 40.0 5.0 I0.0 15.0 6 SONAR. ON I OFF ON/'. OFF oN/OFF ON/OFF Y GEO 
PLOT RADIUS: I 128000 YD 2 64000 YD 3 32000 YD U EVENT INVALID ENTRY LIMJT EXCEEDED PARA NOT VARIABLE 
TRANSMISSION ERROR INPUT/OUTPUT XMIT : I' 121314151~ 171819101-I-I DELl 12 ALT Figure 1 32  SCALE XXXXXXYD 
IO 1~3SS N  j " 5TR/OS' IDD 2SSNA II N.T Figure 2 33 of a regular sequence of twenty minute intervals 
counted from the initiation of the mission. During playback, a mission can be run at either the normal 
or at ten times the normal speed. 3. TEAM ORGANIZATION AND RESPONSIBILITIES The software system of this 
project was developed by a student team with four undergraduate members (one junior, two sophomores and 
a freshman). The freshman received one credit unit of course work for his part in this project while 
each of the other three members received three credit units. The team was supervised by two faculty members, 
one (S. Busenberg) from the mathematics department acting as project supervisor, and one (W. Tam) in 
computer science who served as consultant. Although none of the student team members had had any previous 
experience in large-scale software development in a team environment, they were all experienced programmers 
familiar with the Imlac computer. It should be noted that this particular team was a typical size for 
a Mathematics Clinic team, but it was a younger average age than most such teams which ordinarily include 
a senior, and often, a master's degree candidate in applied mathematics. The division of responsibilities 
among the team members was similar to the Chief Programmer Team approach described by Baker (2). Thus, 
the team had a chief programmer, two backup programmers, and a librarian. However, in order to maximize 
the learning experience of all the students, each of the team members assumed each one of these roles 
during some phase of the pro- ject. More specifically, at the overall program design level, the most 
experienced student was chosen as the chief programmer. After the pro- gram had been broken up into functional 
modules, different students were assigned the role of chief programmer for the detailed design of the 
various modules. In making this assignment the difficulty of the particular module and the experience 
of the student chosen to be chief programmer for that module were taken into account. Furthermore, a 
rule was adopted that a program module that was designed by one student, the chief programmer, had to 
be coded by a second student, the backup programmer, and tested and documented by a third student, the 
programming librarian. Thus, the design and code for each module had to be examined in detail by at least 
two students. This proce-dure enforced clarity and reliability in the pro- gram design and coding, and 
assured that each student fully understood every aspect of the project. It also had the desirable side 
effect of enforcing the practice of "egoless programming" throughout the entire project. 4. PROGRAM 
DEVELOPMENT AND IMPLEMENTATION The project was divided into different phases as follows: a. Program Design. 
 b. Coding. c. Debugging and Testing. d. Integration. e. Documentation.  At the start of the project, 
a detailed schedule of each phase was generated with one month scheduled for the design phase; two months 
for coding, debugg-ing and testing; and three weeks for program inte- gration with the trainer computer. 
The documenta- tion was developed along with each of the phases above, and the entire program with complete 
docu- mentation was expected to be delivered to Honeywell four months after the start of the project. 
Top-down program design and proper documentation were constantly stressed during the program design phase. 
An overall top-down function flow diagram (shown in figure 3) which divided the program into various 
functional modules was first developed. The detailed design of each module was then assigned to the student 
who served as the chief programmer for that particular module. Every week, the entire student team, the 
faculty advisors and at least one programmer from the Marine Systems Division of Honeywell went over 
the details of design proposals for the modules that were being developed. During these walk-throughs, 
a number of revisions of the proposed designs were made. Most of these revi- sions were due to the insistence 
of the faculty that the modules adhere to top-down design concepts. In this way, the students gained 
first hand expe- rience in applying top-down design concepts to the development of a large-scale program 
with complex requirements and stringent standards. The complete program design took one and a half months 
to com-plete, two weeks more than originally planned. The students were not allowed to code until the 
design of the program was completed and accepted by Honeywell. The team was forced to program in the 
assembly language of the Imlac computer because Imlac did not have a working high level programming language. 
To facilitate ease of understanding, good documentation, and the imposition of top-down structure on 
the assembly code, ALGOL 60 was used with English statements as a program description language. This 
description of each module in a high level language formed a basis for the even-tual refinement of the 
program in the assembly language and it also provided comments to the assembly language program. Structured 
coding with the use of single-entry single-exit flow control structures was emphasized throughout the 
coding phase. The coding approach described above worked out very well and proved to be extremely useful 
in debugging the assembly language program. The testing and integration of the program modules were done 
in a top-down fashion as much as possible. However, because of the shortage of time and other practical 
considerations, such as the degrees of difficulty of the modules and the even distribu- tion of work 
load among students, some of the modules were implemented and tested either in parallel or in a bottom-up 
fashion. In fact, it was found that a strict top-down approach was generally not practical during this 
phase of the project. After the program design was supposedly finalized, there were a number of design 
changes that were dictated either by changes in the requirements imposed by Honeywell, or else, by particular 
idiosyncracies of the Imlac that had not been anticipated. Despite this, the instructor console program 
was completed and delivered on time. 34 !4  ~'~ 0 ~o )_ o o~ -. 2': ~C3h ~3CI ,~ ~o U- e ~ oo'~ (.9 
I.- ~ -o,-ouc c9 ~ (.9 h ~ c ~ .o _o ~,l ~° o~. E ,.;_ u--o ,.,.~ ,.-.-~ ~.-_~_c t ~'~ I t =~ ~ o ~, 
~.~- o c c ~_ ~ .'~-,. '~-'.'" ~,-=. o >.~ ~J, --- ~ L v E ~ J3 ...~o N ~) d ~i L ~ 0 0 0 0 0 OJ~l ~1 
(1.0 35 This can be attributed, at least in part, to the good documentation and the highly modularized, 
tup-down nature of the program design which permitted the incorporation of program changes without too 
much trouble. The final program consisted of 16,750 lines of assembly language code, 8750 lines of which 
were written for program testing pur-poses. A rough breakdown of the hours spent by the four member student 
team was as follows: Total time in program design and meetings: 240 man-hours Total time coding, debugging, 
testing, and documenting: 800 man-hours Other tasks (clerical work, etc.) 50 man-hours In terms of productivity, 
this comes to about 16 lines of total code per man-hour, and about 8 lines of code per man-hour for the 
program without the testing routines. Each student spent more hours in this project than in a typical 
three unit course. In particular, each student had to spend more time in preparing the large volume of 
documentation that was requested by Honeywell than one would design in an ideal learning situation, the 
final documents completed and submitted to Honeywell included: a. Computer Program Design Specifications. 
 b. User's Manual. c. Computer Maintenance and Utility Manual. d. Common Data Base Design Document. 
 e. Subprogram Design Document.  5. EXPERIENCE AND CONCLUSIONS While it was obvious that successful 
and timely completion of the project was important, the other educational aspects of doing such a pro-ject 
were never overlooked. For example, the rotation among the students of the positions of chief programmer, 
backup programmer and programming librarian was aimed at providing the maximum challenge and management 
experience to each of them, although it was undesirable from the standpoint of efficiency. This rota-tion 
was methodically undertaken down to the last deadline of the project. Also, a number of discussion sessions 
were devoted to the exploration of various aspects of structured and top-down programming. In retrospect, 
the educational benefits of this project would have been enhanced if the work were spread over two semesters 
instead of one. This would have allowed the first semester to bedevoted to program design and the second 
semester to program coding, debugging, testing and inte- gration. The hiring of a secretary to handle 
much of the clerical work would also have been desirable because it would have allowed the stu-dents 
to concentrate on the intellectual aspects of the project. It is perhaps pertinent at this point to describe 
the reaction of the students to this mode of instruction. As mentioned before, the students were all 
experienced programmers, and in fact, were quite proud of their programming skills. However, they were, 
to varying degrees, quite skeptical of both top-down and structured programming practices. They showed 
a considerable degree of impatience at the start of the overall design, and in the case of-the chief 
programmer at this stage (he was also the most experienced student) some belligerence at the insistance 
of the faculty that the design adhere to strict top-down standards. This phase of the design was, in 
fact, revised three times before it was adopted. However, when the coding phase of the project was under 
way, the students became more and more convinced of the value of top-down design in such a large project; 
a typical student comment being "this is the way I al~ways thought through my programs, even if I did 
not write everything down'l. The student reaction to structured programming did not show such a complete 
conversion of basic beliefs. They started from an initial view that structured programming was nothing 
but an intellectual game that worked only for simple programs. They ended with some conviction that techniques 
of structured programming, and in particular, the use of a highly structured language like Algol for 
design purposes was very beneficial in endowing clarity and adapt- ability to lengthy programs. However, 
in all honesty, it should be mentioned that none of these students would, even after this experience, 
start a short or medium size assembly language program by first writing it out in Algol. From this experience 
it can be concluded that, under proper supervision, student teames can develope and produce software 
in highly professional manner. More importantly, with a project like the one des-cribed in this paper, 
students gain relevant train-ing and practical experience in top-down program design and structured programming 
in a realistic environment. The experience gained by working as a team and the acquired communication 
skills (both written and oral) are things that can not be dupli- cated in a traditional classroom situation. 
Fur-thermore, the importance of good software documen-tation which must meet stringent industrial stan-dards 
can be driven home in a most effective manner. Perhaps a good indication of the success of the pro-ject 
is the fact that, after the completion of the project, two of the students involved were immedia-tely 
hired for the summer as production programmers at Honeywell. ACKNOWLEDGMENT The authors wish to thank 
the dedicated student members of this clinic team: Messrs David Bakin, Frederic Feldman, Mark Johnson, 
and David Vann. They also wish to thank Mr. Norton Lehner, the liaison programmer from Honeywell, who 
contributed so much to this educational experiment. REFERENCES I. Jerome Spanier, "Academic realism: 
an innovative approach", SlAi~ NEWS, Volume 9, #3, pp. I-2, June 1976. 2. F. T. Baker, "Chief programming 
team management of production programming", IBM Systems Journal, Vol. II, #I, pp.56-73, 1972. 36  
			