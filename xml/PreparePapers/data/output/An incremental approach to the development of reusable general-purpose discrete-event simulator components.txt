
 An Incremental General-Purpose Approach to Discrete-Event the Development Simulator of Reusable Components 
Lisa M. Levy Kortright Department of Computer Science Nicholls State University Thibodaux, LA 70310 e-mail: 
in-dt%eality.nich.edu Abstract In this paper, we discuss an incremental approach to the development 
of reusable components for general­purpose, discrete-event simulation using Ada as the im­plementation 
language. The goal of this paper is to illustrate how a well-designed simple model can be ex­tended in 
small increments to a more general system. We show that the use of Ada is a key element in this style 
of software engineering. The design of the sys­tem is object-based, and the components developed are 
reused in each successive step of the design and imple­ment ation. Introduction The need for reusable 
software components has been recognized for quite some time now [4]. Reusability is a key concept of 
any engineering discipline. However, the programming languages and software engineering technologies 
used to produced reliable, maintainable, reusable components are still in their infancy (compare, for 
example, with techniques such as the differential and integral calculus used so successfully and for 
such a long time in several engineering areas). While significant im­provements have changed the way 
we develop software, and languages and system development techniques con­tinue to break significant barriers, 
we believe that there is a need to improve on the way that existing tools and languages are presently 
used. In this paper, we show how an incremental develop­ment style can be used to construct a number 
of sets of components for discrete-event simulation in increasing levels of complexity. We show through 
this case study that simple components can be generalized using exist­ing language mechanisms such as 
parameterization and Permission to copy without fee all or Part of this material is granted providedthat 
the co@s a s not made or d ktributed for direct con&#38;ercial advantage, the ACM copyright nctirs and 
the title of the publirstlon and its date appear, and notice is given that copying is by permission of 
the Association for Computing Machinery. To copy otherww or republish, mquues a fee and/Or specific penniasiom 
 486 the use of generics. We show how these components are developed and implemented in Ada, and how 
avail­ able features of this language effectively allow for useful generalizations with little additional 
effort. 2 Simulation In a simulation, we use a computer to imitate real­world systems. Real-world systems 
are complex, and thus in order to study such as a system, we make sim­plifying assumptions about the 
system. This abstract view of the world is referred to as the model. It is this model of the real world 
that is then simulated [6,8]. The state of a simulation refers to the collection of objects or data that 
characterize a snapshot of the sys­tem at some point in time. In discrete-event simulation, the state 
of the simulation changes at discrete points in time and only when an event occurs [6,8]. The objects 
involved in a discrete-event simulation include entities, servers, queues, events, and a calendar to 
hold the upcoming events. An entity is an object that requires service. A server is the object performing 
a service for an entity. The server may be in one of two states: either busy, if it is serving an entity, 
or free, if it is available for service. A queue is used to hold entities waiting for a server. An event 
designates the arrival or departure of an entity from the system. A calendar is used to hold the events 
that are to occur in the future; the calendar is ordered by the time of an event. A simulation model 
must describe how the objects interact with each other. Budd notes that there is a re­lationship between 
simulation and object-oriented pro­gramming, and he states that ... in object-oriented programming, we 
have the view that computation is simulation. ([5], pg. 9) 3 Models for Discrete-Event Simulation In 
this section, we discuss several discrete-event sim­ulation models, each successive model being more 
gen­ 1This research has been sponsored in part by the Louisiana Education Quality SUpport Fund (LEQSF) 
under Grant No. LEQSF(1993-95)-RD-A-22. @1994 ACM 0-89791-666-2/94/0011-0486 3.50 eral than the previous. 
These models are parameterized over the number of servers and the number of queues. Our goal is to develop 
a general discrete-event simulator that allows any number of servers and any number of queues. In all 
of the models that we discuss, the servers are nonpreempt ive (that is, once an entity is assigned to 
a server, the entity remains at the server until its ser­ vice is completed) and the queue discipline 
is first-come first-serve [7,9]. The simulation models we examine include:  l-server l-queue: There 
is only one server and only one queue in the simulation.  m-servers l-queue: There are multiple servers 
(m ~ 1) and one queue.  m-servers m-queues: There are multiple servers and multiple queues (m z 1) such 
that the number of servers is equal to the number of queues and there is a one-to-one mapping between 
servers and queues.  m-servers n-queues: There are multiple servers (m ~ 1) and multiple queues (n ~ 
1) such that the number of servers is not necessarily equal to the number of queues and a queue is not 
associated with any one particular server.  general m-servers n-queues: There are are multiple servers 
(m ~ 1) and multiple queues (n > 1). In this model, the number of servers need not equal the number of 
queues. If the numbers are not equal, then a queue is not associated with any particular server. However, 
if the numbers are equal, then there is a further parameter to this model which indicates whether there 
is a one-to-one mapping between queues and servers, or whether a queue is not associated with any one 
particular server.  4 Reusable and Generalized Compo­ nents In the next sections, we incrementally build 
the com­ponents required to implement each of these models. Components for the simpler models are reused, 
in some cases after suitable generalizations, in the construction of components of more complex models. 
For example, the queue type, the event type, and the priority queue type remain unchanged throughout 
the different simu­lation models. Since the definitions of a queue and a priority queue are not dependent 
on the type of the ele­ments being stored, both oft hese types are implemented as generics. In a simulation, 
the queue is instantiated to be a queue of entities, and the priority queue is in­stantiated to be a 
priority queue of events. We define a sim.queue type for the simulation model. The sim.queue type captures 
the queue of entities as well as additional information needed to be saved about the queue for statistics 
purposes, such as the maximum length of the queue. In keeping with the idea of reusing components and 
having components be as general as possible, we chose not to simply rewrite the queue type to include 
the additional information needed. Rather, we developed a generic sim_queue type which has as one of 
its components a generic queue. When the sire-queue is instantiated, it is instantiated over two types: 
the entity and the queue of entities. Some of the components require slight modifications to be reused 
from the l-server l-queue model to the succeeding phases. For example, the entity type in the l-server 
l-queue model did not save any information about the server to which it was assigned, since there was 
only one server. However, for the more general mod­ els, the server id number, representing the id number 
of the server to which an entity was assigned, is stored as part of the information about an entity. 
Other modifications are required in the simulation algorithms themselves in order to allow for more general 
cases. However, as we shall see, most of the code that was developed for the l-server l-queue model was 
able to be reused up through the most general m-servers n­queues model that waz implemented. We are currently 
working to further generalize the components described in this paper to fully take advan­t age of Ada 
9X [1,2,3]. The use of object-oriented fea­tures, including inheritance, in Ada 9X will enhance the reusability 
of these components. Using inheritance, for instance, we can redesign the sim_queue type so that it is 
a subclass of queue and thus inherits all of the opera­t ions of a queue. In this way, we need only add 
the extra statistical information to the sim_queue type. This is the subject of on-going research and 
will be reported in a future paper. An alternative that we considered was the use of Ada tasks for the 
next step in component generalization. We chose not to pursue this approach in favor of using the more 
common notion of object that is fully supported in Ada 9X. 5 l-Server l-Queue Model In this section, 
we build the simulation components (simulation state and simulation algorithms) of the 1­server l-queue 
model. As we shall see, some of these components will remain the same for multiple servers and for multiple 
queues. When implementing the model, the simulation components are encapsulated in an Ada package. 5.1 
Simulation State Before giving the simulation procedure, we discuss the represent ation for the state 
of the simulation. The simulation stat e is a record consisting of, at least, the following components: 
the calendar of events, a server, a queue, a clock holding the current simulation time, and the next 
entity id number (generated for arriving entities). 487 The representation for the simulation state 
is given by: type sim.state is record cal: priority.queue; --calendar of events clock: time; .-simulation 
clock time serv: server; server q: sin-queue; --simulation queue queue + statistics ent-id: natural; 
--next entity id number to be generated end record; SS: sin-state; --state of the simulation The declarations 
for the simulation state would occur in the package body and would be global to the var­ious simulation 
procedures (which are declared within the package body) that need access to thestate of the simulation. 
 5.2 Simulate The simulation algorithm is straightforward. First we initialize the simulation state; 
for example, set the clock to be O, set the calendar to be empty, set the queue to be empty, etc. Then 
we schedule the first ar­rival by getting the entity s arrival time and its service time and then inserting 
this arrival event into the cal­endar. Arrival information may be obtained from the input or maybe generated 
from arandom number gen­erator baeed on some probability distribution. As long as the simulation is to 
continue, we get the next event from the calendar, update the the clock tothe timeof this event, and 
process the event. When the simulation terminates, we then report the necessary statistics, such as the 
number of entities serviced, the maximum length of the queue, the average time an entity must wait, the 
server utilization, etc. The simulate procedure is as follows: procedure simulate is evt: event; --event 
 begin --initialize the e.ismlat ion initialize; --schedule the first arrival schedule-arrival; while 
continue-simulation loop --select next event from the calendar aseign (evt, select-elt (SS. cal)); --remove 
that event remove (SS. cal); --update clock to the time of the event SS.clock := ev-time (evt); --process 
the event process-event (evt); end loop; --output statistics report_statistics; end simulate; Event processing 
and scheduling components axe built next. 5.3 Processingan Event Procedure process-event processes the 
next event by simply calling procedure process_arrival if the event is an arrival or by calling procedure 
process.departure ifthe eventis a departure. In order to process an arrival, the current arriving entity 
must either go to the server, if the server is free, or to the queue, if the server is not free. Also, 
another arrival event is scheduled (by inserting it into the calen­dar). Thus, the procedure to process 
an arrival isgiven by: procedure procees-arrival (ev: in event) is ent: entity; -­ entity associated 
-­ with the arrival event begin --schedule another arrival event schedule.arrival; --get the entity 
associated with the current arrival event assign (ent, ev-entity (ev)); --check if the server ie free 
if is-free (SS.serv) then --if so, then schedule the departure of the entity schedule-departure (ent); 
--and assign the entity to the server set-busy (ent,SS.serv); else --otherwise, put the entity in the 
queue enqueue (ent,SS.q) ; end if; end process_arrival; When processing a departure event, the server 
is made available and the queue is checked to see if any entities are waiting for the server. If an entity 
is wait­ingfor the server, then the front entity is removed from the queue, its departure is scheduled, 
andthe entityis assigned to the server. The actions are given by the procedure process_departure: procedure 
process-departure (ev: in event) &#38; departing-ent, --entity that is departing vaiting_ent: --waiting 
entity in queue 488 entity; begin --get the departing entity assign (depart ing-ent, ev-entity(ev)); 
--set the server free set-free(SS. serv); --check if an entity is waiting if not is-empty(SS.q) then 
--if so, get the waiting entity assign (waiting-ent, front(SS.q)); --remove it from the queue dequeue 
(SS.q); --schedule its departure schedule.departure (waiting-ent); --and assign it to the server set-busy 
(waiting-ent,SS.serv);  end if; end process-departure;  5.4 Scheduling an Event As seen above, when 
an event is predicted for the future, it is placed in the calendar. The scheduler for each type ofevent 
contains and processes the informa­tion necessaryto determine the time that the event will occur. To 
schedule an arrival: procedure schedule-arrival is ent: entity; --entity ev: event; --event service_time, 
--service time of entity time-to-occur: --time event is to occur time; begin if there is another arrival 
then --the arrival. time and the service time may be read from the input or may be generated by the 
program get the time that the arrival is to occur and the service time for the entity associated with 
this arrival; --create an entity with the necessary attributes create-entity (SS.ent-id, service-time, 
time-to-occur, ent); --and create an arrival event create-event (arrival, ent, time-to-occur, ev); --insert 
arrival event into calendar insert (ev, SS.cal); --generate the next entity id SS.ent-id := SS.ent-id 
+ 1; end if; end schedule_arrival; To schedule a departure: procedure schedule-departure in out entity) 
is time_to-occur: -­time time; ev: event; -­event (ent: event is to occur begin --compute the depertue 
time time.to_occur := SS.clock + service_time (ent); --set the entity>s departure time set-departure_time 
(time-to_occur,ent); --and create a depacture event create-event (departure, ent, time-to_occur, ev); 
--insert departure event into calendar insert (ev, SS.cal); end schedule_departure; 6 M-Servers I-Queue 
Model Wecanextend the I-server l-queue model tomultiple servers. In the the m-servers l-queue model, 
there are m~l servers and lqueue, In this section, we discuss the modifications that mustbe madetothe 
l-server l-queue model to handle multiple servers. As for the simulation state, the field serv winnow 
have the type server.array, which is an array of servers. The procedures affected by the extension include 
process_arrival and process_departure. Theproce­duresschedule_arrival and schedule_departure are not 
affected. The procedure process-arrival mustnowlookfor a free server, and if there is one, assign the 
arriving entity to a free server. procedure process-arrival (ev: in event) is ent: --entity associated 
with arrival event entity; sid: --server id number natural; begin --same as l-server l-queue schedule-arrival; 
--same as l-server l-queue assign (ent, ev-entity (ev)); --find the first free server -. and return O 
if no free server s id := avail_server (SS.serv); --check for a free server if sid /= O then --if there 
is a free server, then ent is going to server sid set.server_id (ent, sid); --schedule the entity s departure 
schedule-departure (ent); --assign the entity to the server set_busy (ent,SS.serv(sid)); else --same 
as l-server l-queue enqueue (ent,SS.q); end if; end process_errival;  The procedure process~eparture 
must get the server idnumber from thedeparting entity and set that server to be free. Then, if the queue 
is not empty, it must assign the next entity from thequeue to the server that wasjust made available. 
procedure process-departure (ev: in event) is departing_ent, --entity that is departing Waiting-ent: 
--waiting entity in queue entity; sid: --server id number natural; begin --same as l-server l-queue assign 
(departing-ent, ev-entity(ev)); --get the server id s id := server_id (departing-ent); --and free that 
server set-free(SS. serv(sid)); --check if an entity is waiting in the queue if not is_empty(SS.q) then 
--same as l-server l-queue assign (waiting-ent, front(SS.q)); --same as l-server l-queue dequeue (SS.q); 
--the waiting entity is going to server sid set_server_id (waiting-ent, sid); --schedule its departure 
schedule-departure (waiting-ent); --and make server sid busy set-busy (waiting-ent,SS.serv(sid)) ; end 
if; end process-departure;  This model is parameterized over the number of servers. One way to do this 
is to make the package generic withthe number observers being aparameter of the package. That is, we 
would have the following: generic num_servers: in positive := 1; package simulate_package is .... end 
simulate.package;  Then num-servers is known throughout the package, and we could write the type declaration 
forservarray to be an array(i . .num.servers) of server. How­ever, if the package is generic, the package 
must be in­stantiated for each different number ofservers. A better design would be to parametrize the 
pro­cedure sinmlate over the number of servers. In this way, the simulation could be run for any number 
of servers without instantiating the package for each differ­ent number observers. In this case, the 
package would not be generic, and the heading for procedure simulate would be: procedure simulate (num-servers: 
in positive := 1); If the simulation state record is declared global to procedure simulate as it is 
in the l-server l-queue model, then we cannot declare serv in the simulation state record to be an array 
from l..nnm-servers since num.servers would not be known. Thus, in order to have the number of servers 
known so that we can de­clare a server array and so that the simulation record remains global to the 
subprograms within the package body, the type declarations, variable declarations, and subprogram declarations 
now all appear within proce­dure simulate. That is, we have the following: procedure simulate (num_servers: 
in positive := 1) is type server-array is array (1 ..num-servers) of server; type sire-state is record 
.... end record; SS: sim_state; --simulation state evt: event; --event subprogram declarations for other 
simulation routines, such as schedule-amival, schedule-departure, etc. begin . . . . body of simulate 
end simulate;  490 It is worthwhile to emphasize that in this case we waiting-ent: -­ waiting entity 
in used parameterization as the tool for component gen­ entity; eralization. This is a good example that 
generalization sid: -­ server id number need not involve the use of generics. As we have shown, natural; 
a solution using generics would have been inappropriate e. 7 M-Servers M-Queues Model The m-servers 
m-queues model can be obtained by extending the m-servers l-queue model to m queues for m> 1. In the 
m-servers m-queues model, we assume that there is a one-to-one mapping between servers and queues. That 
is, each queue is assigned to a specific server. In the algorithm we give, we assume that queue i is 
paired with server i. A constant num.queues with the value of mm-servers is added to the package body, 
and in the simulation state record, the type of q is changed to sim_queue-array, which is an array (1. 
. num_queues ) of sim.queue. The procedures schedule_errival. and schedule.departmre remain unchanged. 
The proce­dures processarrival and process-departure re­quire slight modifications. The procedure process-arrival 
must look for a queue in which to place an arriving entity if there is no free server, procedure process-arrival 
(ev: in event) is ent: --entity associated vith arrival event entity; sid, --server id number qid: --queue 
id number natural; begin ... . same as process-amival for n-servers l-queue if sid /= O then . . . 
. same as process-arrival for m-servers l-queue else --select a queue to place the entity qid := select-queue 
(SS. q); --and put the entity in the queue enqueue (ent, SS. q(qid)); end if; end process-arrival; After 
server i is made free, the procedure processdeparture must check ifqueuei is empty. If it is not empty, 
the next entity from queue i is assigned to server i. begin . . . . same as process-departure for m-servers 
l-queue if not is_empty(SS .q(sid)) then --added the index sid for a queue assign (waiting-ent, front(SS.q(sid))); 
dequeue (SS.q(sid)); . . . . rest same as process-departure for m-servers l-queue end if; end process-departure; 
 8 M-Servers N-Queues Model The m-servers m-queues model can be extendedto the case of m-servers and 
n-queues (m~l, n~l) such that thenumber observers is notnecessarily equaltothe number ofqueues and such 
that aqueueis not assigned to anyone particular server. This extension results in another parameter num-queues 
to be added to procedure simulate. The heading ofprocedure simulate isnow: procedure simulate (mm-servers: 
in positive := 1; num.queues: in positive := 1); In the simulation state record, the field last-qid is 
added to store the numberof the last queue from which an entity was selected to go to a server. The procedures 
schedule_arrival, schedule_departurej andprocess_arrival arenotaf­fected by allowing nqueues, rather 
than mqueues. Procedure process.departure requires amodifica­tion. In procedure process_departure, after 
server is freed, we look for a non-empty queue. If there is a non-empty queue j, then the entity atthefrontof 
queue j is assigned to server i. procedure process-departure (ev: in event) is depart ing-ent, --entity 
that is departing waiting-ent: --waiting entity in queue entity; sid, --server id number qid: --queue 
id number natural; procedure process-departure (ev: in event) is begin depart ing-ent, --entity that 
i.s departing . . . . same as process_departure for 491 m-servers m-queues --following two lines of code 
replace -. the line: if not is-empty(SS.q(sid)) then .. in m-servers m-queues --find a non-empty queue 
qid := find-non-empty_queue (SS.q, SS.last-qid); --if there is a non-empty queue if qid /= O then SS.last-qid 
:= qid; --then use qid, not sid as index assign (waiting_ent, front(SS.q(qid))); dequeue (SS.q(qid)); 
. . . . rest same as process-departure for m-servers n-queues end if; end process-departure;  General 
M-Servers N-Queues Model The previous m-servers n-queues model can be ex­tended to ageneral m-servers 
n-queues modelin which there is another parameter which indicates in the case that m=n whether there 
is a one-to-one mapping be­tween servers and queues. That is, if there is a one­to-one mapping, then 
queue i is paired with server i; otherwise, aqueue is not assigned to a particular server. In this model, 
procedure simulate has athird pa­rameter corresp of type correspondence. The type correspondence is an 
enumerated type consisting of two values: one-to-one and many-tonm.ny. Ifthenum­ber observers is equal 
to the number of queues, then the third parameter corresp indicates whether to as­sign queue ito server 
i or not. The procedure heading for simulateis now: procedure simulate (mm-servers: in positive := 1; 
mm-queues: in positive := 1; corresp: in correspondence := many-to-many); The only procedure affected 
by this change is pro­ cedure process.departure. Now, when a process de­parts and the number observers 
is equal to the number of queues, the parameter corresp must be checked to see how to select a queue. 
procedure process-departure (ev: in event) is deperting-ent, --entity that is departing waiting-ent: 
--waiting entity in queue entity; sid, server id number qid: queue id number natural; begin assign (departing_ent, 
ev_entity(ev)); sid := server-id (departing_ent); set_free(SS. serv(sid)); if (num_servers = mm-queues) 
and (corresp = one-to_one) then if not is_empty(SS.q(sid)) then --queue is assigned to a server qid := 
sid; else qid := O; end if; else --check for any free queue --find a non-empty queue qid := find-non-empty-queue 
(SS.q, SS.last-qid); end if; --if there is a non-empty queue if qid /= O then SS.last_qid := qid; assign 
(waiting_ent, front(SS.q(qid))); dequeue (SS.q(qid)); set-server-id (waiting-ent, sid); schedule-departure 
(waiting_ent); set-busy (waiting_ent,SS .serv(sid) ); end if; end process_departure;  10 Conclusion 
Wehaveshownhow it impossible toincrementally de­velop packages of reusable components with increasing 
levels of complexity. Ada features such as generics and the ability tovary the size of a data structure 
through the use of parameters made it possible to reuse the sim­pler components with little modification. 
Our experience has shown that well-engineered soft­ware components that exhibit the usual desirable fea­tures 
result more easily from anincremental processor refinement and generalization. Each new version of a 
component k made more general, and thus potentially more reusable, and inherits a good fraction oftherelia­bilityof 
the previous generation. Through ineffective use of generalization tools, such as those available in 
Ada, we have shown that it is possible to take existing components and enhance their usefulness. At a 
time when software development costs continue to escalate and the complete replacementof a software system 
may be impossible, the approach we described may wellbe a more cost-effective alternative. Instead of 
throwing 492 away software components that appear to have reached the end of their lifetime due to limits 
in their applicabil­ity, we suggest that in many cases it is fessible to reuse them by making them more 
general using the methods that we have described in this paper. References [1] Ada 9X Rationale, Version 
4.0. Intermetrics, Cam­bridge, MA, September 1993. [2] Ada 9X Reference Manual: Proposed ANSI/ISO Standard, 
Version 4.0. Intermetrics, Cambridge, MA, September 1993. [3] Introducing Ada 9X: Ada 9X Project Report. 
Office of the Under Secretary of Defense for Acquisition, Washington DC, September 1993. [4] G. Booth. 
Software Components with Ada: Str-uc­tunx, Tools, and Subsystems. Benjamin/Cummings, Menlo Park, CA, 
1987. [5] T. Budd. An Introduction to Object-Oriented Pro­gramming. Addison Wesley, Reading, MA, 1991. 
[6] A.M. Law and W.D. Kelton. Simulation Modeling&#38; Analysis, Second Edition. McGraw-Hill, New York, 
1991. [7] M. Maekawa, A.E. Oldehoeft, and R.R. Olde­hoeft. Operating Systems: Advanced Concepts. Ben­jamin/Cummings, 
Menlo Park, CA, 1987. [8] A.A.B. Pritsker. Introduction to Simulation and SLAM II, Second Edition. Systems 
Publishing Cor­poration, West Lafayette, IN, 1984. [9] A. Silberschatz and P.B. Galvin. Operating Systems 
Concepts, Fourth Edition. Addison Wesley, Reading, MA, 1994. 
			