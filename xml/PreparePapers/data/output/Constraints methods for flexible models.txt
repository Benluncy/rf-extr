
 ~ Computer Graphics, Volume 22, Number 4, August 1988 Constraint Methods for Flexible Models John C. 
Platt Alan H. Barr California Institute of Technology Pasadena, CA 91125 Abstract Simulating flexible 
models can create aesthetic motion for computer an- imation. Animators can control these motions through 
the use of con- straints on the physical behavior of the models. This paper shows how to use mathematical 
constraint methods based on physics and on opti- mization theory to create controlled, realistic animation 
of physically- based flexible models. Two types of constraints are presented in this pa- per: reaction 
constraints (RCs) and augmented Lagrangian constraints (ALCs). RCs allow the fast computation of collisions 
of flexible models with polygonal models. In addition, RCs allow flexible models to be pushed and pulled 
under the control of an animator. ALCs create ani- mation effects such as volume-preserving squashing 
and the molding of taffy-like substances. ALCs are compatible with RCs. In this paper, we describe how 
to apply these constraint methods to a flexible model that uses finite elements. KEYWOKDS: Elasticity, 
Modeling, Dynamics, Constraints, Simula- tion CK categories: G.1.6 --Constrained Optimization; 1.3.7--Three- 
Dimensional Graphics and Realism (Animation)  1 Introduction A primary goal of simulating flexible models 
is to animate physically realistic motions. Examples include simulating the musculature of a human body 
to create realistic walking; simulating the flow of viscous liquids, such as lava over volcanic rocks; 
or simulating a sculptor mold- ing clay. This paper takes a step towards these goals, by adding constraint 
properties to flexible models; and other properties, such as moldability and incompressibility. Using 
these properties, we can now simulate materials, such as clay, taffy, or putty, that have been very difficult 
to simulate using previous computer graphics models. 1.1 Desirable Properties of Flexible Models In order 
to create pleasing and supple motions discussed above, we incorporate many of the following properties 
for our flexible models: Physical Realism --Flexible models should be able to move in natural, intuitive 
ways. Using the theory of elasticity to animate flexible models is very helpful in creating natural motion. 
Permission to copy without fcc all or part of this material is granted provided that the copies arc not 
made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. &#38;#169;1988 
ACM-0-89791-275-6/881008/0279 $00.75 Controllability --Flexible models should be able to follow an animation 
script. Models should be able to follow pre-defined paths exactly, while still wriggling in an interesting 
manner and interacting with other models.  Non-interpenetration --Flexible models should be able to 
bounce off other models while using a small amount of computer time.  Limited Compressibility-- Flexible 
models should be able to have constant volume, even while being squashed. Models that squash without 
retaining their volume look as if they are made of sponge: they do not bulge out enough at the sides. 
 Moidabili~y ~ Flexible models should be moldable: external forces should mold the rest shape of the 
model. Models should follow the theory of plasticity, which describes materials that do not return to 
their rest shape after large deformation.   1.2 Force-Based Constraint Methods Constraint methods that 
add external forces to physical systems yield physically realistic motion and allow simulation with simple, 
commer- cially available, differential equation solvers. I constraints I constraints I (RCs) Figure 1: 
A hierarchy of constraint methods There are at least three force-based constraint methods that allow 
the creation of flexible models with the properties listed in the last section. Dynamic constraints [3] 
use inverse dynamics to create critically damped forces which fulfill the constraints. Dynamic constraints 
are easy to use on systems which have simple dynamics. Elastic models have many state variables, however; 
this makes the dy- namics hard to invert. We do not apply dynamic constraints to elastic models in this 
paper.  Reaction constraints, presented in this paper, use a modified pro- jection method for simple 
constraints, such as guiding flexible models along a path and preventing flexible models from pene- trating 
a polygon, l~eaction constraints supply reaction forces that cancel other forces that would violate the 
constraint. Reac- tion constraints require no extra differential equations, but they are limited in scope. 
 Optimization constraints use ideas from optimization theory to constrain physical systems. Physical 
systems perform optimiza- tion, because the total energy of any physical system with dissi- pation decreases. 
  There are two types of optimization constraints. The simplest kind of optimization constraint is the 
well-known penalty method, where an extra energy that penalizes incorrect behavior is added to the physical 
system. The penalty method is analogous to adding rubber bands that attract the physical system to the 
constraints One large disadvantage of the penalty method is that the constraints are enforced in the 
pres- ence of external forces only as the ratios of the strengths of the rubber band to the external 
forces increases to infinity The ALC method is a constrained optimization method that adds differential 
equations that compute Lagrange multipliers of the physical system. These additional differential equations 
cause the system to eventually fulfill multiple constraints, even in the presence of external forces 
 1.3 Previous Work As discussed in the last section, this paper combines physically-based modeling techniques 
with constrained optimization methods There has been a growing interest in physical models in the field 
of computer graphics. Elastic models have been proposed previously [7] [11] [15] [17] that simulate deformable 
models quite well. Of these, [7] and [15] were based directly on variational principles, which are easily 
modified by constrained optimization techniques. The physically-based elastic models are based on classical 
elastic- ity theory A recommended explanation of elasticity may be found in Truesdell [16]; Fung [8] 
is another useful reference for both elasticity and plasticity. In order to make controllable modeling 
and animation, researchers in computer graphics have previously studied constraint methods [2] [9] [18]. 
Witkin, et al. [20] applied the penalty method to parametrized constraints. Barzel and Burr [3] and Isaacs 
and Cohen [13] developed dynamic constraints. We extend their work to flexible models RCs are related 
to techniques that enforce boundary conditions of partial differential equations [21]. ALCs are based 
on the method of multipliers first developed by Ar- row, et al. [1]. A comprehensive review paper was 
written by Bertsekas [4]. 1.4 Preview Sections 1- 5 of this paper discusses optimization and various 
constraint methods. Section 2 explains why optimization theory is applicable to flexible models Section 
3 discusses the penalty method. Section 4 presents ~Cs and section 5 presents ALCs. Section 6 shows the 
appli- cation of the general constraint methods in the first part of the paper to flexible models Section 
7 shows various animation effects made by the constraints. The appendices of this paper contain the mathematical 
details of how to apply RCs and ALCs to flexible models. The appendices de- scribe the finite element 
flexible model, the equations necessary for an- imation control and collision, the equations for incompressibility 
and plasticity, and an explanation of why ALCs work.  2 Flexible Models Minimize Functions This section 
illustrates that simulating physically-based flexible models is an optimization procedure. An optimization 
procedure finds a vector .T. to locally minimize f(x) (1) where z_ is a position in a high-dimensional 
space; and f(~_) is a scalar function, which can be imagined as the height of a landscape as a function 
of position ~ (see figure 2). In figure 2, the arrows represent the action of an optimization procedure, 
where ~_0 is the state of the system before the optimization procedure and .~min is the state of the 
system afterwards. ~0 Xmln Figure 2: An optimization landscape Physically-based flexible models minimize 
a particular function f. Consider the simplest flexible model, a spring. The energy of the spring comes 
in two forms: kinetic energy (the energy of motion) and potential energy (the energy stored in the tension 
of a spring). As a spring oscillates, the kinetic energy turns into potential energy, and back into kinetic 
energy. Because of friction, however, a spring eventually slows down and stops, with all of the energy 
having been converted into heat. The total energy of the spring always decreases. In general, any physical 
system with dissipation always loses energy, yet the total energy is always bounded below Hence, physically-based 
flexible models will minimize their total energy as time increases. Even non-dissipative physical systems 
extremize energy over all paths in space-time. ~ince simulating a flexible model is an optimization procedure, 
we can use optimization concepts to modify the flexible model. A useful concept is that optimization 
procedures, like computer graphics models, can be constrained. A constrained optimizalion procedure finds 
a minimum of a function on a specified subspace. The prototypical constrained optimization problem can 
be stated as locally minimize f(~_), subject to g(~) = 0, (2) where g(z) = 0 is a scalar equation describing 
a subspace of the state space. During constrained optimization, the state vector z should be attracted 
to the subspace g(z) = 0, then slide along the subspaee until it reaches the locally smallest value of 
f(~) on a(~_) = 0 (see figure 9). Solutions to a constrained optimization problem are restricted to a 
subset of the solutions of the corresponding unconstrained optimization problem. Since physically-based 
flexible models minimize a function, we use constrained optimization algorithms as physical constraint 
methods. Applying constrained optimization algorithms to a physical system still decreases the total 
energy of the system, while enforcing external con- straints; thus, optimization constraints do not destabilize 
physical sys- tems. There are other optimization procedures than simply simulating a physical system. 
The simplest optimization algorithm is gradient descent, where the values of ~ ski downhill, in the opposite 
direction of the gradient Uff (see figure 3). ~Yf points in the direction of the maximum increase in 
f. 0.f 5:i --0zi (3)   ~ Computer Graphics, Volume 22, Number 4, August 1988 Inexact Constraints --Forofinite 
constraint strengths ca, the penalty method does not fulfill the constraints precisely. Un-der many circumstances, 
however, constraints should be fulfilled energy contour gradient i) energy "valley" flexible model energy 
"hill" Figure 3: Both Gradient Descent and Flexible Models Minimize a Func- tion The Penalty Method 
This section discusses a traditional constrained optimization technique called the penalty method; the 
method has previously been used in constraining computer graphics models [15][20]. The physical interpretation 
of the penalty method is a rubber band that attracts the physical state to the subspace g(~) = 0. The 
penalty method adds a quadratic energy term that penalizes violations of con- straints [12]. Thus, the 
constrained minimization problem (2) is con- verted to the following unconstrained minimization problem: 
minimize ~penalty(.~) = f(.ff~_) q- e(g(~)) 2. (4) Figure 4: The penalty method makes a trough in state 
space The penalty method can be extended to fulfill multiple constraints by using more than one rubber 
band. Namely, the constrained optl- mization problem minimize f(z), subject to ga(.~.) = 0; a = 1,2,..., 
n; (5) is converted into unconstrained optimization problem (see figuTe 4) minimize Ep~lty(x) = f(~) 
+ fi c~(g~(~)) ~. (6) ce~i The penalty method has a few convenient features. Inerac~ Constraints --There 
are situations in which it is not necesssary to exactly fulfill constraints; sometimes it is desirable 
to compromise between constraints.  Ease of Use --.Adding a rubber band to a physical system is simple 
and requires no extra differential equations.  However, the penalty method has number of disadvantages. 
exactly. Using multiple rubber band constraints is like building a machine out of rubber bands; the machine 
would not hold to- gether perfectly. Sliffness of Equations --Second, as the constraint strengths i~- 
crease, the differential equations become sti1~, that is, there are widely separated time constants. 
Most numerical methods must take time steps on the order of the fastest time constant, while most modelers 
are interested in the behavior at the slowest time constant. As a result of stiffness, the numerical 
differential equa- tion solver takes very small time steps, using a large amount of computing time without 
getting much done. 4 Reaction Constraints When flexible models are constrained to be on the outside of 
another model, or when they are constrained by an animator, they should fulfill these constraints quickly 
and exactly. As discussed in the last section, the penalty method has difficulties with swiftly fulfilling 
precise con- strMnts. RCs are a constraint method that retains the advantages of the penalty method while 
avoiding many of the disadvantages. RCs can force a point to follow a path, or to lie on the outside 
of a polygonal model. RCs are fast and simple to use, and do not require additional differential equations 
to be added to the physical system. However, only one RC can be applied to a mass point at any time. 
RCs cancel forces that violate constraints and add forces that would critically damp the distance from 
the state to the constraint surface. RCs are a combination of the projection method [12] and dynamic 
constrainta. RCs work on individual mass points. Since elastic models are fre- quently discretized into 
mass points, RCs are applicable to constraining elastic models on a polnt-by-point basis.  _F_un~onstr~in~ 
> _P_ \/ / F constrained _~output Figure 5: The reaction constraint cancels undesirable force components. 
A reaction constraint is a procedure that processes the net force at a point, .K-input created by physics 
or other constraint techniques, in order to yield a constrained force at a point F output, needed to 
fulfill a particular constraint. The RC first projects out undesirable compo- nents of.if_input to yield 
_~unc~nstralned (see figure 5). Next, _~_constrainedis computed to yield critically damped motion that 
fulfills the constraint. Finally, the control force routput is the sum of the constrained and unconstrained 
forces: ~o~tput = Eeon~tr~nea + Eunconstr~i~d (7) To fulfill Newton's second law, the reaction force 
_~_inptt~--~Fouepueshould be applied to the object that is interacting with the flexible model. Let 
the vector D be the deviation in the position of the mass point. That is, the vector D points from the 
mass point towards where the mass point should be. The constrained force that eventually sets ._~ to 
Zero is d  where k is the strength of the constraint and c is the damping. If c = x/2k, then the mass 
point fulfills the constraint with critically damped motion. If the damping is too low, then the constraint 
force overshoots. For critically damped motion, if k is increased, then the time needed to fulfill the 
constraint is decreased. In the appendices, we describe the equations necessary for imple- menting two 
useful reaction constraints (see figure 6): Path Following --In constraining flexible models, we frequently 
want to constrain a mass point to follow a specified spatial path parameterized by time, without speeding 
up or slowing down. The pre-defined path is a useful constraint in animation, where flexible models need 
to be picked up and moved around. If only a few mass points of the flexible models are constrained, then 
the rest of the model is free to wriggle in a physically realistic manner. The equations for the path-following 
reaction constraint are contained in Appendix A. Attraction ~o a Plane --Another useful constraint is 
to force a mass point to lie on a plane. A mass point inside of a polygonal model can be forced outside 
of the polygonal model by using a planar reaction constraint. The equations for the planar reaction constraint 
are contained in Appendix B. S path following plane repulsion Figure 6: Examples of Reaction Constraints 
 Using reaction constraints is an easy way to implement simple con- straints. Similar to the penalty 
method, no extra differential equations are required. Unlike the penalty method, the constraint is fulfilled 
in the presence of outside forces. If a flexible model is being lifted by a reaction force against gravity, 
then the lifting path is followed, even if gravity increases by a factor of ten. The reaction constraint 
thus re-duces the amount of parameter adjustment needed in modeling elastic objects. Reaction constraints 
are an extension of the projection method of constrained optimization, where any motion outside an allowed 
region is projected back into the region. Keaction constraints are more ap-propriate for physical models 
than the projection method, because the projection method needs to manipulate the physical state variables 
directly. Reaction constraints manipulate only forces, hence are com- patible with both dynamic constraints 
[3] and with ALCs. In addition, reaction constraints do not need special numerical routines. Reaction 
constraints are much faster than the penalty method for collisions. The penalty method tries to cancel 
a large penetration force by adding a force that is a rapidly changing function of position. Small numerical 
step sizes are needed for the penalty method in order to pre- vent unstable oscillation. However, reaction 
constraints cancel a pen- etration force, independent of the depth of the penetration. Reaction constraints, 
therefore, can take much larger step sizes.  5 Augmented Lagrangian Constraints In the animation of 
flexible models, more than one constraint per mass point is needed. Constraints may be more complex than 
simple path following or repulsion from a plane. In addition, we wish to enforce real properties of flexible 
models, such as incompressibility and moldability. This section presents a type of constraint, called 
an augmented Lagragian constraint, that enforces the complex, multiple constraints needed for flexible 
models. The differential equations used in ALCs were first developed by Arrow in 1958 [1]. 5.1 Lagrange 
Multipliers Lagrange multiplier methods, like the penalty method, convert con-strained optimization problems 
into unconstrained extremization prob- lems. Namely, a solution to the equation (2) is also a critical 
point of the energy 6L~rnn~e(g) = f(~_) + Ag(z). (9) A is called the Lagrange multiplier for the constraint 
g(x) = 0 [12]. A direct consequence of equation (9) is that the gradient of f is coltinear to the gradient 
of 9 at the constrained extrema (see Figure 7). The constant of prgportionality between Vf and Vg is 
-A : V£La~r~ge = 0 = V/+ AVg. (I0)  We use the collinearity of Vf and Vg in the design of the ALC. 
/ contours off/ / )= 0 Figure 7: At the constrained minimum, Vf = -AVg ]  A simple example shows that 
Lagrange multipliers provide the extra degrees 'of freedom necessary to solve constrained optimization 
prob- lems. Consider the problem of finding a point (x, y) on the line x--by = 1 that is closest to the 
origin. Using Lagrange multipliers, gLa~range= Z 2 + y2 + A(z ÷ y --I) (Ii) Now, take the derivative 
with respect to all variables, z, y, and A. 3gLa~r~n~e = 2x + A = 0 (12) 0= ~gLagr~nge  = 2V+A=0 03) 
0y 0~La~ran~e = Z + y --1 = 0 (14) 0A With the extra variable A, there are now three equations in three 
un- knowns. In addition, the last equation is precisely the constraint equa- tion.   '~ ~ Computer 
Graphics, Volume 22, Number 4, August 1988 5.2 Gradient Descent Does Not Work with La-grange Multipliers 
Applying gradient descent in equation (3) to the energy in equation (9) yields coSLagrange Of COg (15) 
co~Lagrange = -0A = --g(:e_). (16) Note that there is an auxiliary differential equation for X, which 
is necessary to apply the constraint g(x) = O. Also, recall that when the system is at a constrained 
extremum, XTf _-- --A~Tg, hence, dei = 0. Solutions to the constrained optimization problem (2) are saddle 
points of the energy in equation (9), which has no lower bound [1]. If the vector x_ is held fixed where 
g(x) -~ 0, the energy can be decreased to -oo by sending A to +oo or -oo. Gradient descent does not work 
with Lagrange multipliers, because a critical point of the energy in equation (9) need not be an attractor 
for equations (15) and (16). A stationary point must be a local minimum in order for gradient descent 
to converge. 5.3 The Basic Lagrange Constraint , . , Figure 8: The sign flip from equation (16) to equation 
(18) makes Lagrange multipliers stable We present an alternative to differential gradient descent that 
estimates the Lagrange multipliers, so that the constrained minima are attractors of the differential 
equations, instead of "repulsors." The differential equations that solve (2) are Of (9g (17) = +g(~_). 
(18) Equations (17) and (18) are similar to equations (15) and (16). As in equations (15) and (16), solutions 
to problem 2 are stationary points of equations (17) and (18). Notice, however, the sign inversion in 
the equation (18), as compared to equation (16). The equation (18) is performing gradient ascent on X. 
The sign flip makes the method stable, as shown in Appendix G (see figure 8) The system of differential 
equations (17) and (18) gradually fulfills the constraints. Notice that the function g(x) can be replaced 
by kg(x_), without changing the location of the constrained minimum. As k is increased, the state begins 
to undergo damped oscillation about the constraint subspace g(x) = 0. As k is increased further, the 
frequency of the oscillations increase, and the time to convergence increases. 5.4 Extensions to the 
Algorithm One extension to equations (17) and (18) is an algorithm for constrained minimization with 
multiple constraints. Adding an extra differential constraint subspace N o ~ o f algorithm initial state 
%finalstate'~ Figure 9: The state is attracted to the constraint subspace equation for every equality 
constraint and summing all of the constraint forces creates the energy ~multiple : f(~_) + E ~aga(_X_), 
(19) which yields differential equations a f ~ Og. _ ao~-, (20) L~ = +go(z_). (21) Another extension 
is constrained minimization with inequality con- straints. As in traditional optimization theory [12], 
one uses addi-tional slack variables to convert inequality constraints into equality constraints. Namely, 
a constraint of the form h(z) _> 0 can be ex- pressed as g(~_) = h(~_) -?. (22) Since z 2 must always 
be positive, then h(_z) is constrained to be posi- tive. The slack variable z is treated like a component 
ofz in equation (17). An inequality constraint requires two extra differential equations, one for the 
slack variable z and one for the Lagrange multiplier ~. Alternatively, the inequality constraint can 
be represented as an equality constraint. For example, if h(x_) is constrained to be greater than zero, 
then the optimization can be constrained with {[h(x)] 2, if h>0  (23) g(~) = 0, otherwise. Combining 
the basic Lagrangian constraints with the penalty method yields augmented Lagrangiart constraints (ALCs). 
ALCs have better convergence properties than basic Lagrangian constraints, as shown in Appendix G. The 
basic Lagrangian constraints are com-pletely compatible with the penalty method. If one adds a penalty 
force to equation (17) that corresponds to an quadratic energy e 2 Epenalty : ~(g(.x)) , (24) then the 
set of differential equations for an ALC is o~°/ (25)  --.°g eg~,Og x ~ -a b~ S - The extra force 
from the penalty does nat change the position of the stationary points of the differential equations, 
because the penalty force is zero when g(x) = 0, independent of the value of c. There is a minimum necessary 
penalty strength c required in some cases for the ALC to converge (see appendix G). The minimum penalty 
strength in the ALC is usually much less than the strength needed by the penalty method for an accurate 
solution [4]. ALCs are applicable to more general constraints than RCs, especially when more than one 
non-linear constraint is associated with each mass point. Constraining Flexible Models with The complete 
differential equation for an incompressible element is given in Appendix E. Augmented Lagrangian Constraints 
Es _r7 Es r l Figure 10: An element of flexible material ALCs are ideal for the non-linear constraints 
that arise from adding new properties to flexible models. The augmented Lagrangian constraints are applied 
to the differential equations that govern an element of ma- terial. Flexible models are created by aggregating 
these elements in a grid, which may be difficult in the case of complex rest shapes [19]. The internal 
forces on a element are fully derived in Appendix C. The forces depend on the average metric tensor, 
Gq(r_l,r~,...rs), which describes the current shape of an element, and is computed for each element of 
material using the finite element method (see figure 10) [19]. Each element of material also has a rest 
state, which is described by Rq. For a Hookean elastic material, the internal force encourages the metric 
tensor of each element to be close to the metric tensor of the rest state [15]. ~ force motion motion 
rest state I force Figure 11: Incompressibility preserves the volume of an element Hookean elasticity, 
however, does not fully describe the range of materials that are desirable to animate. For example, a 
Hookean elastic model can be easily compressed. If an elastic model undergoes violent deformation, as 
is common in computer graphics, then it will behave more like ~. sponge than like gelatin. If an incompressible 
material is desired (see figure 11), then ALCs are added to the equations for an elastic element. The 
volume squared of one element is the determinant of the metric tensor G~j of that element [6]. To constrain 
the volume of an element to be a constant Vo, we apply the augmented Lagrangian method, using the constraint 
g = det Gij --V02 = 0. (27) deformations of elastic object deformations of a moldable object do not 
change rest state change the rest state Figure 12: The rest shape of plastic materials changes after 
strong deformation. Many materials, such as taffy and putty, are moldable. Moldable materials do not 
return to their rest shape after being strongly deformed (see figure 12). Augmented Lagrangian constraints 
can be applied to each element's rest state so that it roughly approximates the theory of strongly deformed 
materials. A moldable element has a rest metric .R/j that is constrained to be close to the metric Gij 
[8]. Mathematically, there is an inequality constraint, based on the von Mises ~ yield criterion from 
the theory of plasticity [8], P = (c,~ -P~)(a,j -R~) -P0 < 0. (2S) Using the method described in equation 
(23), we use the constraint function [ 1/2P2; if P > O, (29) 7/= L0; if P_< 0. For plasticity, there 
are differential equations for R/i derived from ap- plying equations (20) and (21) to the constraint 
in equation (29). The general differential equations for ~ moldable element are given in Ap- pend/x F. 
The general equations for applying an ALC to a flexible model are given in appendix D. To apply an ALC 
to a flexible model, forget that the position and velocity are related, and simply apply equations (25) 
and (26) directly. In general, using ALCs on flexible models.results in equations of the form - :~ = 
vl ud=_,v_) (30)  6i = Fi - ~, -~,~(~,~_) (31) where ui and vi are functions determined by applying 
various ALCs. Equations (30) and (31) do not appear to be in the form of a standard physical system. 
However, we can change the differential equations in (30) and (31) into one second-order differential 
equation: d ~i "4- ¢~i ---- Fi -eui -w(z, ~. + U) -~ui(z, v). (32) The left-hand side of equation (32) 
is a standard form for a physical system; therefore, ALCs add only forces to flexible models. 7 Results 
We have simulated all of the constraints discussed in this paper using standard differential equations 
solvers [14]. Since differential equations are simulated over a time interval, the results are in the 
form of anima- tion. The figures in this section are individual frames from a sequence. Figures 13 and 
14 show frames from an animation of a compressible elastic cube of gelatin which is lifte d up and then 
bounced off a table. The lifting of the cube is done with a path-following reaction constraint, and the 
table is implemented with a reaction constraint that keeps the cube above a plane. Notice that since 
the cube in compressible, its volume can vary through the course of the simulation. Figure 15 shows a 
compressible seat cushion being squashed with a sphere. The sphere is a physical model with mass. An 
RC prevents the sphere from penetrating the cushion. Figure 16 shows an incompressible moldable cube 
striking a surface. Instead of bouncing off the surface, the moldable cube sticks to the  ~ Computer 
Graphics, Volume 22, Number 4, August 1988 surface, with its sides near the surface bulging out. Incompressiblity 
forces the sides to bulge, and the moldability updates the rest shape so that the shape is no longer 
a cube. Both the incompressibility and the moldability are enforced with augmented Lagrangian constraints. 
Figures 17-20 illustrate the moldability of the models. A sphere squashes the model in figure 17; but 
the elastic models bounces back to its rest shape in figure 18. In figure 19, a moldable model starts 
with the same rest shape, and is squashed by the sphere; but in figure 20, the moldable model has a dented 
edge. Conclusions In the past, researchers have made models that simulate the behavior of flexible materials. 
These models automatically move in a physically realistic way, without specifying the exact positions 
and velocities of the model at all times. The "hands-off" nature of the physically-based models, however, 
makes them hard for an animator to control. By adding physical modeling constraints to the elastic models, 
a compromise can be reached between completely specifying the motion of a model and allowing a simulation 
package to run freely. Constraint methods are useful for controlling the flexible models, while retaining 
the physically realistic motion created by the physics. This paper presents two constraint techniques, 
based physics and optimization theory, for constraining the physical simulation of flexi- ble models: 
reaction constraints and augmented Lagrange constraints. Both reaction constraints and augmented Lagrange 
constraints even- tually fulfill specified constraints exactly, unlike the penalty method. Reaction constraints, 
based on the projection method, are a simple way of enforcing path following or repulsion from a polygon. 
Reaction constraints require no extra differential equations, because they project away undesirable components 
of the force. Only one reaction constraint can be applied to a mass point at a time. Reaction constraints 
are useful for guiding flexible models along a path and for reducing the amount of computation time needed 
for collisions. ALCs are a differential version of the method of multipliers from optimization theory. 
ALCs are a general technique for constrained op- timization. In this paper, we use ALCs for constraining 
flexible models to be incompressible and moldable. Compressible elastic models look as if they are made 
out of sponge. To simulate other materials, such as rubber, an augmented Lagrange incompressibility constraint 
should be added to the elastic model. Many natural substances, such has clay and taffy, do not return 
to their rest shape after strong deformations. Purely elastic models are in- adequate for these substances. 
Using ALCs to keep the rest shape near the current shape is an effective model for these moldable substances. 
In addition, by applying forces to these plastic substances, we can mold interesting shapes without numerically 
specifying the rest shape. Acknowledgements We wish to thank Jed Lengyel for rest state models and 
John Snyder for rendering software. This paper was supported by grants from Apple Computer, Hewlett-Packard 
Company, Symbolics Inc., and an AT&#38;T Bell Labs Fellowship. References [1] Arrow, K., IIurwicz, 
L., Uzawa H., Studies in Linear and Non- linear Programming, (Stanford University Press, Stanford, CA, 
1958). [2] Badler, N., "Multi-Dimensional Input Techniques and Articulated Figure Positioning By Multiple 
Constraints," 1986 Workshop on Interactive 3D Graphics (Chapel Hill, NC, 1986). [3] Barzel, R.., Barr, 
A., "Modeling with Dynamic Constraints," in Topics in Physically Based Modeling, SIGGR.APtI Tutorial 
17 Notes, (1987). [4] Bertsekas, D., "Multiplier Methods: a Survey," Automatica, 12, 133-145, (1976). 
[5] de Boor, C., A Practical Guide to Splines, (Springer-Verlag, NY, 1978). [6] do Carmo, M., Differential 
Geometry of Curves and Surfaces, (Prentice-Hall, Englewood Cliffs, N J, 1974). [7] Feynman, C., Modeling 
the Appearance of Cloth, MSc Thesis, EECS Dept. , (MIT, Cambridge, MA, 1986). [8] Fung, Y., Foundations 
of Solid Mechanics, (Prentice-Hall, Eagle- wood Cliffs, NJ, 1965). [9] Girard, M., Maciejcwski, A. "Computational 
Modelling for the Computer Animation of Legged Figures," Proc. SIGGRAPH 1985 263-270, (1985). [10] Goldstein, 
H, Classical Mechanics, (Addison-Wesley, Reading, MA, 1950). [11] Haumann, D., "Modeling the Physical 
Behavior of Flexible Ob- jects", in Topics in Physically-Based Modeling, SIGGRAPH Tuto- rial 17 Notes, 
1987. (12] Hestenes, M., Optimization Theory, (Wiley &#38; Sons, NY, 1975). [13] Issues, P., Cohen, M., 
"Controlling Dynamic Simulation with Kinematic Constraints, Behavior Functions and Inverse Dynam- ics," 
Proc. SIGGRAPH 1987, 215-224, (1987). [14] Press, W., Flannery, B., Teukolsky, S., Vetterling W., Numerical 
Recipes, (Cambridge University Press, Cambridge, 1986). [15] Terzopoulos, D., Platt, J., Burr, A., Fleischer, 
K., "Elastically Deformable Models," Proc. SIGGRAPH 1987, 205-214, (1987). [16] Truesdell, C., "The Non-Linear 
Field Theory of Mechanics," in Encyclopedia of Physics, S. Fliigge, ed., III/3 (Springer-Verlag, Berlin, 
1965). [17] Well, 3., "The Synthesis of Cloth Objects," Proc. SIGGRAPH 1986, 49-54 (1986), [18] Wilhelms, 
J., Baxsky, B., "Using Dynamic Analysis to Animate Articulated Bodies such as Humans and Robots," Proc. 
Graphics Interface '85, 97-104 (Montreal, 1985) [19] White, R., An Introduction to the Finite Element 
Method with Applications to Non-linear Problems, (John Wiley &#38; Sons, NY, 1985), [20] Witkin, A., 
Fleiseher, K., Barr, A., "Energy Constraints on Parametrized Models," Proe. SIGGRAPH 1987, 225-232, (1987). 
[21] Zienkiewicz, O., The .Finite Element Method, Third Edition, (McGraw-Hill, London, 1977). Appendices 
 A Equations for a Path Following Re The deviation vector D to a path is the difference between where 
the mass point is and where it should be on the path at that time. Let (_x(t), v_(t)) be the current 
position and velocity of the mass point, and (x*(t),v_*(t)) be the desired position and velocity of the 
mass point. Then, __D = ~_*(t) - r(t) (33) d ~._O_ = v*(t) -v(t) (34) Since we want to control the velocity 
along the path, we do not allow any unconstrained force: F ...... trained = O (35) The final control 
force is: F o.tput = e(~*(t) -~_(t)) + k(~_'(l) -~_(t)), (36) Notice how the control force in this case 
is independent of the input force, F input. SIGGRAPH '88, Atlanta, August 1-5, 1988 B Equations for 
a Planar R C Consider the plane with normalized plane equation P(x(t)) = Ax(t) + By(t) + Cz(t) + D = 
0 . Let the homogeneous operator be Q(x(t)) _ Ax(t) + By(t) + Cz(t). The normal, n, to the plane is (A 
B C)T . We want the distance of the mass point to the plane to be zero : D = nP(x) , (37 ) Q(v) (38 
) dtD n where the vector x is the position of the mass point and the vector v_ is the velocity. The components 
of the input force normal to the plane need to b e controlled . The force tangent to the plane should 
be unconstrained . Funconstrained = Finput ( Finput ' ?O n-(39) Using equation (8) yields Fconstrained 
= (kP (x) + cQ(v))n . (40 ) The output of a planar RC is F' output = Fnput (kP(x) +cQ(v) + Fiaput . 
n) n . (41 ) To constrain a point to lie on one side of the plane, P(x) < 0, we apply the reaction constraint 
only if the mass point is on the wrong side of the plane and if the input force is not lifting the point 
away from the plane : P(x) < 0 and F_''input . n > F'' constrained (42 ) The one-sided planar RC can 
be extended to prevent any mas s points from entering a solid polygonal model. From inside of the model 
, choose the closest polygon, then apply the one-sided planar RC to forc e the mass point to the surface 
of that polygon .  C Finite Elements for Elasticity Following [15], there is a potential energy for 
each flexible element that encourages the metric tensor to be near the rest metric : i] P+j) z , (43) 
where s is the stiffness of the material . The energy in equation (43 ) describes an isotropic material 
with a Poisson ratio of zero . The forc e on the the points that make up the element is the derivative 
of th e potential energy [10] : F+k antic = s > (Gt.i. _ Ri7) aGij (44) a rk id where rk is the position 
of the kth corner . In addition, there is a viscous damping force that , resists changes in the metric 
tensor : SCOUe _ aG ij _ aGij aG ij Fk' ij -1 v,n ark , (45) 1E Gark ar,, i,j where vv ,,, is the velocity 
of the mth corner, and 1 is the viscous damping of the element. If s >> 1, then the material acts like 
a solid. If 1 >> s, then the material acts like a fluid [16] . Using Newton's Second Law , the differential 
equations for an unconstrained viscoelastic element i s d = vi (46) dtri F elastic +(viscous (47) = dt 
v' The viscoelastic forces and the constraint force depend on Gij . Fol­lowing the finite element method, 
the G ij in each element is assume d to be the integrated average of Gij over the entire element . Leta 
be the material coordinates of a point in the element and let r(a) be th e position of the points a . 
Then, from the definition of metric tensor , ar ar dV (48) Gij faai aaj Assuming a position in the 
element is a linear interpolation of the positions of the corners of the element (see figure 11), the 
average Gij can be analytically computed from the positions of the corners . To compute Gij , estimates 
of the spatial derivatives are required : ai = r2i r2i-1, i = 1,2,3,4 (49 ) Q1 = r3 T'I,N2 = r4 N3 
= r7 -725,114 = rs, (50 ) 7i=ri+4 ri, i=1,2,3,4 (51 ) Averages of the spatial derivatives are also 
required : 4 44 a=Eai, b =E3i, c=E7i. (52) i.1 i =1 i.1 Finally, the various components of Gij can be 
computed, assuming the element has unit length, width, and height in material coordinates . Goo a mil 
-a4 -12 13) (53 ) 18 (2a Gil 26 .6 -/9 1/34-Qz . $3 ) (54 ) 18 ( G22 (2c c 7i 74 72 .73) (55) 18 Gol 
= G1a 24[1'6 (crl +02) (/j1+ ) Rq +(Cr3 + a4) (Y3 + Q4)] (56 ) G 02 = G2o (al+a3) (Yi+72 ) 24 ~ +022 
+ (14) ' ( ')'3 + 74)] (57 ) R G12 = G21 C (N1+13)(7'1+)3 ) Z4 ~ (58 ) +(i32 +/24) (72 + P4)] As in 
the continuous case, the diagonal terms of the metric tensor Gij in equations (53) (58) depend on various 
distances in the cube, while the off-diagonal terms depend on angles. Also, the Gij are quadratic functions 
of the ri. Thus, aGij/ari are complicated, although linear , functions of ri . The finite element is 
equivalent to a set of mass points with non ­linear springs between them . D Equations for a Flexible 
Model ALC This appendix illustrates how to apply ALCs to physical systems . A s stated in section 2, 
physical systems perform optimization, but no t gradient descent . ALCs, however, are easily added to 
physical systems . Consider a typical flexible model, with forces Fi (x) and damping e . The differential 
equation for this system is xi = vi, (59 ) Vi = F,1 ev i . (60) Let us constrain the flexible model 
in equations (59) and (60) to lie on the subspace g(x) = O. There are 2N optimizing state variables : 
x i and We can apply an augmented Lagrangian A to the equatio n for x to fulfill g(x) = O. We can also 
add a penalty term (dg/dt) 2 to the v equation to provide extra damping in the direction of violation 
of the constraint . (Notice that this extra damping force is zero when the constraint is fulfilled.) 
The final form of an ALC applied to a physical model is xi = vi -(A+kg)-x , (61) -2 8g v Vi = F, evi 
 c (62) axi axj " a = g(x) . (63 )   '~' Computer Graphics, Volume 22, Number 4, August 1988 As section 
in 4, multiple constraints are performed by creating an auxiliary differential equation for each constraint 
and summing all of the constraint forces. E Equations for Incompressibility The constraint for an incompressible 
element is g = det(aff) -Vg = 0. (64) The derivative of the constraint g with respect to the spatial 
variables r i is needed for an ALC. Let Cij be the matrix of cofaetors of Gij. Then, the derivative is 
  Og = c,~ °o--~ (65) Then, the differential equations for an incompressible element with other forces 
Ft are d = v_~ - (~ + ~g)~,Og (66) ~_~, d ~ 03g Og ~v_~ = ~_,-~b~,, (67) i = ~. (68) F Equations for 
a Moldability The constraint for a moldable element is: P = (Gij -Rij)(Gij -Rij) -P0 < 0 (69) 1/2P2; 
if P > 0, (70) r/= /0; if P_< 0. Again, the derivative of the constraint function with respect to the 
state variables is needed by an ALC. For stretchable models, however, the rest metric is also a function 
of time. We thus need the derivative of o with respect to Rij. Let Q =PifP > 0 and Q=0, otherwise. Then, 
Or/ OGij Or--'~ = Q(Vi~ -Ri~) ~r I (71) Or/ --Q(Gij -RO). (72) Using these derivatives yield the differential 
equations for a mold- able element with other forces Et: d ¢9r/ (73) ~_~z = _~_t-(~+er/)b-~ d Or/ O~ 
 &#38;~ _ or/ (75) = ~, (76) G Why ALCs Work The damped oscillations of equations (20) and (21) can 
be explained by differentiating equation (20) and then substituting (21): Og~ Equation (77) is the equation 
for a damped mass system, with an inertia term, xi; a damping matrix, 02f 02g~ ---~, (7s) Aij --OxiOgxj 
q- and an internal force, ~a gaOge,/Oxi, which is the derivative of the internal energy, __ I70) If the 
system is damped and the state remains bounded, the state falls into a constrained minima. As in physics, 
we can construct a total energy of the system, which is the sum of the kinetic and potential energies. 
If the total energy is decreasing with time, and the state remains bounded, then the system will dissipate 
any extra energy, and will settle down into the state where go(x) = 0, (81) , ~ ~ = o, (82) which is 
a constrained extremum of the original problem in equation (2). The time derivative of the total energy 
in equation (80) is Oga ~. = /~= ~ x,x,+ ~g~(x_)~zi , --~ xiA,,.~,. (83) If damping matrix Aij is positive 
definite, the system converges to fulfill the constraints [1]. ALC always converges for quadratic programming, 
a special case of constrained optimization. A quadratic programming problem has a quadratic function 
f(x) and pieeewise linear continuous functions ga(z), such that __ b2g~ d2f is positive definite and 
~ = 0. (84) 0xi0~j Under these circumstances, the damping matrix Aij is positive definite for all z_ 
and A, so that the system converges to the constraints. It is possible, however, to pose a problem that 
has contradictory constraints. For example, gx(z) = x = 0 and g2(x) = x-1 = 0. (85) In the case of conflicting 
constraints, the ALC compromises, trying to make each constraint g~ as small as possible However, the 
Lagrange multipliers Aa go to ±o~ as the constraints oppose each other. It is possible, however, to arbitrarily 
limit the A~ at some large absolute value. For a given constrained optimization problem, it is frequently 
nec- essary to alter the ALC to have a region of positive damping surround- ing the constrained minima. 
Arrow [1] combines the multiplier method with the penalty method to yield a modified multiplier method 
that is locally convergent around constrained minima [1]. The damping matrix is modified by the penalty 
force to be ~gga Og,~ 02ga (86) dxiOzj Ox~ Ozj + cg oz~.Ozj " Arrow [1] proves a theorem that states 
that there exists a c* > 0, such that if c > c*, the damping matrix in equation (86) is positive definite 
at constrained minima. Using continuity, the damping matrix is positive definite in a region/:/surrounding 
each constrained minimum. Ifthe system starts in the region R and remains bounded and in R, then the 
convergence theorem is applicable, and the augmented Lagrangian method converges to a constrained minimum. 
   
			