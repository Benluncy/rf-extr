
 STAMPS: A State-Machine Based Processor Simulator Mike Livesey mjl@dcs.st-and.ac.uk Division of Computer 
Science, University of St Andrews North Haugh, St Andrews, Scotland KY16 9SS Abstract This paper describes 
the STAMPS software workbench that supports Honours level computer architecture teaching. STAMPS was 
developed in response to a need perceived from experience of such teaching. It is a hierarchically structured 
CPU simulator that can be customised to any architecture and implementation of that architecture. STAMPS 
is written as a Tel/wish application. Tel facilitates interaction with the file system, simple naming 
conventions and highly flexible user interaction. STAMPS runs on auy Unix platform. Introduction It 
is pointed out in [3] that courses in computer organisation often use simulators to provide some form 
of laboratory workbench. Other ex<amples are presented in [2, 4, GJ and elsewhere. STAMPS was designed 
to fultil a similar role, but in the context of an Honours computer architecture module that uses a textbook 
by Patterson and Hennessy [7]. This book is based on the MIPS R2000/R3000 architecture, and provides 
detailed descriptions at the function unit level of three implementations of a small subset o.AfIPS) 
of the instruction set. This makes for a course with real technical content yet couched at a suitably 
high block diagram level. The laboratory work accompanying a module is intended to support the teaching 
directly by providing an opportunity to manipulate the concepts being taught. 111 this respect, it is 
p,articularly important that the experimentation take place at the same conceptual level as the lecture 
material. That is, the simulator must be able to operate at the level of block diagmms, yet also be able 
to represent low level components such as gates or multiplexors where necessary. This strongly suggests 
laboratory assignments in which the student experiments with or modifies the textbook JJMIPS implementations, 
say by adding back some missing Permlsslon to make digital/hard copy of part or all of this work for 
personal or classroom use is granted without fee provided that copies are not made or distributed for 
profit or commercial advantage, the copyright notice. the title of the ublication and its date appear, 
and notice is given that copying Is &#38;y permission of ACM, Inc. To copy otherwise, to republish, to 
post on servers, or to redistribute to lists, requires prior specific permission and/or a fee. SIGCSE 
97 CA, USA Q 1997 ACM O-89791 -889-4/97/0002...$3.50 instructions into the p.MIPS subset or incorporating 
an unimplemented feature such as branch prediction. Such an approach demands a simulator with user extensibility 
to provide the necessary experimental environment. Unfortunately, the only software support that accompanies 
the textbook is the SPIM simulator for MIPS, which is aimed solely at the use of MIPS. As a consequence, 
the laboratories in the first run of the course were no more than paper exercises in modifying the JJMIPS 
implementations, and were inevitably inadequate. However, attempts to find ready-made software support 
of the right kind were unsuccessful. Commercial software is not only expensive, but emphasises functionality 
rather than concepts. The existing educational simulators are either not extensible or aimed at too low 
a level. As a result, the STAMPS simulator was developed to fill the need. STAMPS has two particukar 
characteristics. First, it is building-block independent. The customisation includes defining the basic 
functional units. This enables STAMPS to operate at the level most appropriate to the topic being supported. 
It has been used primarily at the block-diagram level for computer architecture teaching, but also to 
model daisy-chained bus arbitration with devices as the functional units. It could equally well be used 
at the gate level for teaching digital logic. For recasons of space, this paper will confine itself to 
the use of STAMPS &#38;as a processor simulator. Second, STAMPS is architecture independent. It is a 
hierarchical shell, which can be customised to specific architectures <and then further customised to 
model particular implementations of that architecture, such as pipeline. The hiemrchical design blurs 
the boundaries between author, developer and user. STAMPS is written as a Tel/wish application, so is 
extensible simply by writing Tel. The student will normally write only the simple Tel scripts that defiue 
the function units for a specitic simulation. The teacher will customise STAMPS to the generic architecture 
or system being studied. Some faniliarity with Tel is assumed in the examples. 2 The STAMPS Design STAMPS 
is written as a Tel [S] application, providing the user with a Wish command shell. It also provides a 
GUI via Tk [S] and ezd [l]. STAMPS runs on any Unix platform with these packages installed. It was developed 
267 under SunOS, and the students currently use it on DEC Alphas under OSWl . The underlying model of 
a STAMPS application processor is a synchronous state-machine structured as a directed graph of functional 
components, called units. Fig. 1 shows part of the WIPS single cycle implementation as an example of 
a typical graph structure. The long narrow rectangular box is the Instruction Register (IR), with the 
instruction fields indicated. For graphical convenience, the register file appears in three separate 
places: indexed into by the two register numbers fields rs and rt in the instruction for reading; and 
as the rightmost rectangular box for writing back. The second rightmost rectangular box is the data cache. 
The square box marked lF (Instruction Fetch) is the PC, while that feeding the IR is the instruction 
cache. The small round-end boxes are multiplexors. Phase 2: The latch states are updated in accordance 
with these new inputs. There is an important difference between the update protocols for latches and 
nodes, relating to situations where units of the same type are cascaded, with the output of one unit(X) 
being an input to another unit (Y): . Latches are intended to update synchronously at the clock tick, 
so it is important that Y sees the old output of X. Thus Y must be updated before X. . Node outputs 
are intended to ripple through until everything has settled (in Phase l), so X must be updated before 
Y. Sometimes latches may have transitions that refer to each others values. This is consistent provided 
that there is an Figure 1: An example STAMPS unit graph structure Units divide into Zafchm and nodes. 
A latch represents the content and output of a stateful device, while a node represents the output of 
a stateless (combinational) device. The CPU registers and data cache (collectively called the store), 
and the instruction cache are arrays of stateful devices and are treated sepamtely. The combined outputs 
of all the units represents the instantaneous global state of the processor, while the combined states 
of the latches represents the stable glob al state of the processor. The global state update is triggered 
from the command line, and takes place in two phases: Phase 1: 1 The latch states are passed through 
the nodes until they reach latch inputs again . . . intended order of update, For example, suppose that 
two latches lJ and V have such a mutual dependence, with the proviso that ZJ should see the new value 
of V while V should see the old value of U. Then the order of update is clearly V then IJ. Since STAMPS 
uses the structure graph of the architecture to determine update order, the graph should reflect that 
order. It should no1 retlect the mutual dependence, which would create a cycle of latches. In the example 
just cited, the graph structure would therefore be IJ + V, not U t) V.  2.1 Stages Each unit in a processor 
architecture belongs to a unique st~r~c. The exact signiticance of a stage depends on the kind . ~----~.I 
-. .._. ---------.__ of processor implementation being modelled, but broadly it represent a functional 
subdivision of instruction execution, and has a mnemonic name. STAMPS recognises the existence of stages, 
but assumes only that each stage name corresponds to a Tel variable (which may but need not be a unit) 
whose content is the address of an instruction in the object program being executed, These are called 
the stage-PCs. The only particular stage whose existence is assumed is Instruction Fetch (lF) -any architecture 
implementation must fetch instructions. For example, the STAMPS stages in a pipeline implementation will 
normally correspond to the physical pipeline stages, whereas a single cycle implementation will use only 
the IF stage. Table 1 shows the five stages of the @lIPS pipeline implementation. Stage FulI Name IF 
Instruction Fetch ID Instruction Decode Jzx Execute MEM 1 Memory WB 1 WriteBack I Table 1: The @iIPS 
stages STAMPS provides hvo Tel commands which take a stage name as parameter and return information about 
the object instruction pointed to by that stage-PC. One (INST) returns the hex of the instruction, while 
the other (OP) returns its mnemonic opcode.  3 Creating a CPU Architecture Each unit has a name. STAMPS 
models a unit by a Tel variable that holds its current output, and a Tel nullary function, called its 
transition, that defines its I/O mapping. The variabIe and the function both have the unit name. A unit 
is defined by a Tel script file with the same name. The script comprises a call of the built-in command 
UNIT with the following usage: IUNIT bow stage inputs I The name of the unit is generated automatically 
from the script file name, and the first parameter is the body of the unit s transition. The second parameter 
specifies the stage of the unit, and the third is a list of the units that input to the unit being defined. 
It is this list of inputs to each unit that encodes the architecture s graph structure. The data cache 
and the CPU registers are each modelled <as a Tel array with hvo associated nodes that provide the address 
and data inputs for writing. The instruction cache is read only, and is identified with the object program 
(see Section 4). As an example, here is the definition file of a unit called EX from the @fIPS pipeline 
implementation. EX is the PC of the instruction in the Execute stage. Its inputs are the units: . ID, 
the Instruction Decode stage-PC . HCU, the Hazarcl Control Unit that controls pipeline stalls . MEM branch, 
which is a signal line indicating that there% a branch instruction currently in the Memory pipeline stage 
whose branch is to be taken. The script returns a new EX value that is either the current ID value or 
0. The former models the normal pipeline flow into the EX stage from the preceding ID stage. The latter 
models the insertion of a bubble into the EX stage, and is determined by the presence of a branch instruction 
in the Memory stage or a hazard indication from the HCU. # This is the PC for stage J3X UNIT { if {$MEM~branch 
II $HCUl then {return 0) else {return $ID} ) EX ID HCU MEM-branch The complete CPU <architecture is constructed 
by a Tc1 script called make . t c 1, whose job is to source the individual unit scripts. There are two 
constructor functions LATCH and NODE with the following declarations: These can he used to construct 
a unit of the corresponding type given its definition file. The argument unitName is optional, and defaults 
to the tail of unitFileName. Units may he multiply defined, but only the first is effective. This allows 
an implementation to be modified simply he overlaying** new unit detinitions, without having to remove 
existing units. For example, if the units files for CPU architecture my-cpu are held in -me /my-cpu / 
{ LATCH, NODE 1, the following script will apply the appropriate constructor function to each unit tile 
in my-cpu. foreach p {LATCH NODE) { foreach f [exec Is nyspu/$pl { SP Wx?U/SP/Sf I Here, the inner foreach 
iteration is executed for p set to each of LATCH and NODE, and does an 1s on my-cpu/ $p to set f to a 
list of the files in the directory. Then for each of these files, p is invoked on the file as the corresponding 
constructor function. 269 4 Assembling Object Programs On start-up, STAMPS creates a Tk window which 
is used to display the text of an object program. The snapshot in Fig. 2 shows a pMIPS object program. 
Each line of text displays one instruction, in the format: address 1 -hex 1 mnemonic form When the object 
program is being executed, the stage information is used to determine colour-coded highlighting of the 
instruction text. For example, in the pipeline implementation of @lIPS when there are no bubbles in the 
pipeline, there are five instructions in the program window corresponding to the five pMIPS stages in 
Table 1, each highlit in a different colour. Oli 00159020 add 9 1 5 012 0026a022 sub 10 2 6 013 0037b020 
add 11 3 7 015 0012d02a s1t 13 1 2 016 0023e02a slt 14 2 3 Figure 2: STAMPS program window The command 
got o allows the IF stage-PC to be set manually. It can be passed an optional instruction address parameter, 
which defaults to the address of the instruction in the text line containing the insertion point. STAMPS 
exploits the capabilities of Tel to incorporate very simple object program assembly and loading facilities. 
Assembly is effected by Tel instruction co~mfmis xuamed after the opcodes in the processor instruction 
set. An instruction command takes the operands for that opcode as its parameters and generates the hex 
form of the instruction. Loading is done by the command Q , which loads instructions into a global array 
indexed by instruction addresses: I @ address opcode parameters . . . I opcode is treated as the mame 
of an instruction command and invoked with parameters to get a hex instruction. If address is a number, 
the instruction is loaded at that address; otherwise address is treated as a variable pointing to the 
load position, and it is incremented after the instruction has been loaded. This enables simple consecutive 
instruction loading. For example, in the following sequence the first line would assemble a s w instruction 
into the address held in the v ariable ADDR, which would be incremented; the second line would assemble 
a j al instruction into the address 54; and the third line would assemble a lw instruction into the address 
held in the variable n. However, n would not be incremented because only its content is mentioned, not 
the variable itself. 8 ADDR SW . . . @ 54 jal . . . @ $n lw . . . Because the source program is a Tel 
script, loading is triggered from the command line simply by sourcing the program file. Fig. 3 shows 
;~n example of a J.NIPS program load script, The first @ loads a SW instruction into address 17. All 
the other @s use the variable ,A as the load address. This is initiated to 11 (set -A 1 I), so the six 
following loads t arget addresses 11 through 16. start @ 17 SW 2 4 100 set -A 11 @ -A add 9 1 5 @-Asub 
2 6 @ -A add 11 3 7 @ -A sit 12 0 1 @ -A s1t 13 1 2 @ -A s1t 14 2 3 end Figure 3: A @vlIPS load script 
start and end are special commands that must bracket every source program. start does some initiation, 
while end sorts the instructions into address order then displays them in the progrnrn text window. 
 5 The Interface 5.1 The Command Shell Since this is written in Tel, every command can be invoked by 
the user. One major use of this is to load an architecture interactively ;ia the command: This constructs 
the architecture caIIed by tirhlg up the GUI, loading the unit dclinitions and doing some consistency 
checks. The log is automatically re-initiated on st art up if the system structure has been altered. 
The name p arameter is optional, and defaults to the current architecture. This is useful for reloading 
an updated version of the current architecture. 270 5.2 The GUI Window When the cpu command is invoked, 
STAMPS creates an ezd window, The reason for using ezd rather than Tk for the GUI is partly historical 
and partly because ezd gives a smoother grid and easier mouse interaction than does a Tkl canvas, The 
GUI window displays the contents of store in two grids of cells, as illustrated in Fig. 4. The values 
FRONT and VT are explained in section 6. Each cell shows the address and data of a store location. In 
keeping with the philosophy of representation independence, the GUI allows each cell content to be displayed 
selectively as signed decimal, unsigned decimal or hexadecimal, The GUI also supports both keyboard entry 
and dmg n drop cell poking. VT 0 HcRory 012 0 01s 0 01) 0 016 0 O@B 0 009 0 010 0 011 0 004 0 061 0 0,6 
0 00, 0 080 0 061 0 002 0 003 0 Roes 012 0 013 00000000 014 00oooooO 016 0, 008 0 009 0 010 0 011 0, 
001 4 006 5 066 6 007 7 000 0 001 i 002 2 003 3 Figure 4: The STAMPS GUI window  6 The Persistent Log 
A student workbench without some form of persistence is of limited utility. Persistence enables a student 
s work to progress through multiple laboratory sessions and allows demonstrations set up by the teacher 
to be picked up easily by the students. In fact, an effective laboratory environment needs more than 
just the current system state to persist. Experimentation and play-through demonstration require backtrack 
and retry/replay capabilities, which in turn require a full state history. In a Unix based application 
the simplest form of persistence is the memory mapped (ran-tapped) file, and STAMPS keeps its state history 
in a memory mapped log file. The logged states are numbered from 0 through FRONT, the current maximum. 
If the system is backtracked to an earlier state in the log, the index of this state is called the virtual 
the (VT), These values <are displayed in the GUI, and CM be seen in Fig, 4. The system can then be replayed 
through subsequent log states, causing the VT to be incremented. Alternatively, the system can be run 
live Tk version 3.6,the STAMPS development version. from the current VT, truncating the log at the VT, 
which becomes the new FRONT. The log is then grown afresh as the new operation proceeds. Tel commands 
are provided to manipulate the log position. 7 Further Work One obvious omission from STAMPS is a GUI 
for building the application architecture. This is currently being built as a student project. It supersedes 
the existing ezd GUI, and upgrades STAMPS to Tk version 4.0. The input is of the form illustrated in 
Fig. 1, compatible with the diagrammatic style of [7]. Finally, STAMPS currently models the CPU only 
as f ar as the cache, and omits the cache/memory interface. It is planned to include this interface in 
a subsequent version. References 1. Bartlett, J.F. Don t fidget with widgets, draw! DEC WRL Research 
Report 9 l/6, May 1991. 2. Fuller, R.. Microcode simulator for Apple Macintosh, ACM SZGCSE Bulletin 
24, 4 (1992) 49-Sl &#38; 64. 3. Magagnosc, D., Simulation in computer organization: a goals based study, 
Proc. 25th SIGCSE Technical Symposium on Computer Science Education, Phoenix, Arizona, March 10-11, 1994. 
ACM SIGCSE Bulletin 26, 1 (1994) 178- 182.  4. Meyer, R-M., CANLOGS: a logic gate simulator for all 
seasons, Proc. 27th SIGCSE Technical Symposium on Computer Science Education, Philadelphia, Pennsylvania, 
February 15-18, 1996. ACM SIGCSE Bulletin 28, 1 (1996) 58-62. 5. Ousrerhout J.K., Tel md the Tk Toolkit, 
Addison-Wesley 1994. 6. Parker, B.C. and Drexel, P.G, A system-based sequence of closed labs for computer 
systems organisation, Proc. 27th SIGCSE Technical Symposium on Computer Science Education, Philadelphia, 
Pennsylvania, February 15-18, 1996. ACM SIGCSE Bulletin 28(l) 53-S7.  7. Patterson, D.A. and Hennessy, 
J.L., Computer Orgtmisution mui Design: the hordwure/so~wure interflrce. Mog,an Kaufmann, San Mateo, 
1994. Further information and access to STAMPS is available via: http://www.dcs.st-andrews.ac.uk/-mjl 
271 
			