
 Active Services for Federated Databases Genoveva Vargas-Solar* LSR-IMAG Christine Collet LSR-IMAG Helena 
G. Ribeiro t LSR-IMAG BP 72 38402 BP 72 38402 BP 72 38402 Saint Martin d'Heres, France Saint Martin d'Heres, 
France Saint Martin d'Heres, France Genoveva.Vargas@ imag.fr Christine.Collet @ imag.fr Helena.Ribeiro 
@ imag.fr ABSTRACT This paper presents an architecture of a component based active mechanism suitable 
for federated database systems, i.e., a collection of autonomous DBMS with a common un-derstanding of 
their universe of discourse. The main compo- nents of the mechanism are flexible event and rule services 
that cooperate to execute active rules, The event service specifies and generates event managers that 
detect, produce and notify events using an event management model. The rule service manages Event-Condition-Action 
rules global to federated database systems. Rules are triggered by events notified by event managers. 
They are executed according to an adaptable execution model. Conditions and actions can concern multiple 
DBMS.  Keywords active databases, unbundling active capabilities, federated database systems 1. INTRODUCTION 
Database management systems (DBMS) are becoming part of environments composed of large-scale distributed 
hetero-geneous and networks of autonomous, loosely coupled com-ponents. In particular, federated database 
management sys- tems (FDBMS) can be seen as networks that integrate a number of pre-existing autonomous 
DBMS which can be homogeneous or heterogeneous. They can use different un-derlying data models, data 
definition and manipulation fa-cilities, transaction management and concurrency control mechanisms. DBMS 
in the federation can be integrated by a mediator providing a unified view of data: a global schema, 
a global query language, a global catalog and a global trans- action manager. The underlying transaction 
model con-siders, in general, a set of transactions synchronized by a *Supported by the CONACyT of the 
Mexican Government and the ECOS-ANUIES program. tSupported by the CAFES of the Brazifian Government. 
Permission to make digital or hard copies of all or part of this work for personal or classroom use is 
granted without fee provided that copies are not made or distributed for profit or commercial advantage 
and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, 
to post on servers or to redistribute to lists, requires prior specific permission and or fee.  SAC'00 
March 19-21 Como, Italy (c) 2000 ACM 1-58113.239-5/00/003>...>$5.00 global transaction. Synchronization 
is achieved using proto- cols such as the Two-Phase Commit protocol. FDBMS ap- plications are built upon 
this global environment and they interact with the mediator to execute global database oper- ations (i.e., 
operations that can concern various DBMS in the federation). In order to illustrate intuitively the use 
of FDBMS, con-sider a financial context where a shareholder has two bank accounts in Mexico and in France 
managed by database ap- plications. This person needs to execute banking operations either accessing 
the accounts independently or making ap- plications cooperate to have a global view of his/her finan- 
cial situation. Clearly, an FDBMS application would fulfill these requirements, letting to execute transparently 
banking global (e.g., consult of the global credit) and local operations (e.g., withdraw 1000 pesos from 
the account in Mexico). Assume now that shareholders need specific operations to be executed timely when 
certain conditions come up: When the dollar price changes in France, IF my account in France has more 
than 100000 francs THEN send an e-mail to advise me to buy dollars. When money is withdrawed from my 
bank accounts, IF my global credit is less than 1000 pesos THEN abort the operation. Even if some DBMS 
provide some active capabilities (trig- gers), federated database systems are often limited when considering 
the encoding of the behavior of data and the re- action of the system(s) to data changes. Operations 
are exe- cuted after explicit request submitted by a user or an appli- cation. These systems may be referred 
as passive FDBMS, in opposition to active FDBMS that are able to execute au- tomatically predefined actions 
in reaction to specific events when some conditions are satisfied. As in active DBMS [13] the major idea 
in active FDBMS is to add a reactive mechanism as ECA rules. Rules are pro- cessed in a specific environment 
defined as an active FDBMS application including global transactions. In such environ- ments, possible 
uses of active rules are numerous, for in- stance, view maintenance, global schema updates, verifica-tion 
and validation of global integrity constraints, notifica-tion, application and component integration 
and coopera- tion, etc. The use of rules in FDBMS applications implies at least three challenges. First, 
the inherent heterogeneity of the system imposes the need of a flexible rule execution model adaptable 
to the characteristics of the participating DBMS. Second, the active mechanism must deal with the auton-omy 
of both the global system itseff and the participating 356   4. RULE SERVICE A rule service manages 
(define, update, activate, deactivate) and executes ECA active rules. Rule Definition Defining a rule 
means to describe its ECA components (ON-|F-DO) and its behavior properties. Events describe FDBMS operations 
or external operations. Conditions are generally predicates on database states expressed with a query 
lan- guage. Actions are sequences of operations that can con* cern multiple DBMS, applications, the operating 
systems and services. The behavior properties of the rule depend on application needs and they are defined 
according to the execution model. In our application example, we can define the rule Rdottar as follows: 
RULE Rdollar CONSUMPTION consume E_PROCESSING instance NET EFFECT off COUPLING immediate, independent, 
separate ON after (UpdateDollar, [9:00, 17:00]) with delta(price: real, country: string) where country 
= 'France' IF select myaccount from myaccount in Accounts where myaccount.country = "France" and myaccount.credit 
> 100000 DO system(mail(myaccount.clientname+ebank.fr','Buy dollars')); The rule is triggered by events 
of type UpdateDollar that represent the dollar price in France produced after an update that occurred 
at an instant in [9:00, 17:00]. If the credit of the account myaccount in France is higher than 100000 
dol- lars -which is tested by the Condition part of the rule - a mail is automatically sent to advise 
the owner to buy dol- lars. Here we assume that when evaluated, the query in the Condition will be rewritten 
according to the global catalog. The following presents behavior properties determined by the execution 
model. Rule Execution The core of the rule service is a parametric execution model based on a set of 
parameters and pre-defined values [8]. This model specifies: i) when to execute a rule with respect to 
the notification of events and how to synchronize its execution with applications and FDBMS execution; 
ii) how to order possibly inter-related rules triggered at the "same" time. Events are particularly important 
for rule execution, since they trigger rides. Event consumption policies specify how to handle an event 
that has triggered a nile. Events are considered for rule execution during their validity time in- terval. 
An event can be taken into account either for one execution of the rule or for several executions after 
its noti- fication until the end of its validity time interval. Rules can be triggered every time their 
triggering event is notified or only once for a set of triggering events. Furthermore, one can specify 
whether the net effect must be taken into ac- count or not, for the execution of each rule. The net effect 
is the result of the execution of a sequence of operations on the same data (or object). In the previous 
example, Rdon~r is triggered by events of type UpdateDollar. Each event instance is considered for only 
one execution (CONSUMPTION consume). The rule is executed for each update of the dollar price in France 
(E_PROCESSING instance-oriented). The net effect of update operations executed during the triggering 
transaction, will not be computed (NET_EFFECT off). As said before, rule execution has to be coupled 
with the underlying transaction model of the FDBMS. Rule execu-tion can start either immediately after 
the notification of its triggering event or it can be deferred, for example to the end of the global 
triggering transaction 2 . A rule is executed either as a new transaction that belongs to the same global 
triggering transaction or as a separate global transaction. In addition, the global transaction in which 
a rule is exe- cuted can be or not dependent from the global triggering transaction. Clearly, coupling 
aspects imply that the rule service has both sui~cient access over global transactions to be informed 
of their execution status, and influence to abort, block and restart them according to rule behavior 
properties. In our example, the execution of Rdouar starts immediately after the notification of events. 
The rule is executed as a separate independent global transaction (COUPLING imme-diate, independent, 
separate). Finally, several rules can be triggered by the same event. When this situation comes up, one 
has to determine when and how these rules have to be executed. This is done by building an execution 
plan based on execution strategies specified according to different criteria [5]. In general, cri- teria 
combine sequential and parallel execution based upon rule dependencies. Sequential execution is achieved 
using rule ordering strategies that consider rule priorities, trigger- ing and definition order and execution 
cycles.  5. RELATED WORKS The research trend that aims to offer active functionalities as open services 
is recent. Basically, approaches intend to make active capabilities available for (non) database applications 
in distributed environments. C2offein [10] proposes separately usable components for dis- tributed systems 
supported by CORBA. The system con- sists of parametric wrappers enabling event processing and a rule 
engine whose characteristics are tailored to specific applications. FRAMBOISE [7] proposes a construction 
sys- tem of ECA-services decoupled from a particular DBMS. Event detection is performed by event detectors 
which have to be specialized for the respective DBMS. A rule service is responsible for the maintenance 
of the rule base and imple- ments ride execution. CoopWARE [12] and TriggerMan [9] also propose execution 
mechanisms for distributed rules. The former has been de- veloped for a workflow environment, and the 
latter proposes an asynchronous trigger processor as an extension module for an object-relational DBMS. 
[2] propose an architecture of a framework to support ECA rules suitable for distributed and heterogeneous 
systems. In general, these works resemble insofar to ours as they de- fine active mechanisms to execute 
rules in distributed envi- ronments. Similar to us, rules can be triggered by events stemming from different 
sources. Event management in [10; 7] resembles to ours as it supports different monitoring tech- niques 
with different qualities of communication protocols. However, none of them propose event managers that 
can be adapted dynamically at run-time. Different to us, in [10; 9] rules are always executed as separate 
transactions, indepen- dent of the triggering transactions. 2 The triggering transaction is the transaction 
within which events are produced; a triggered transaction is the one that executes a triggered rule. 
 359 L  6. CONCLUSIONS AND FUTURE WORKS The main contribution of our work is a service based ar-chitecture 
that provides flexible and independent active ca- pabilities suitable for FDBMS applications. A rule 
and an event services are proposed to cooperate to specify and exe- cute ECA rules. They respectively 
offer flexible rule execu- tion and event management adapted to different participat- ing DBMS characteristics. 
The implementation of the services is underway. We have chosen an object oriented environment (CORBA) 
to unify the services between each other. In particular we use (i) CORBA interface definition language 
(IDL) to specify inter- faces between event managers, event producers and the rule service (ii) CORBA 
Event Service as a "low level" commu- nication infrastructure for event managers. We have speci- fied 
an FDBMS that integrates two 02 DBMS that provide XA/XOpen interfaces for a 2PC protocol. A mediator 
offers a global view of the FDBMS and implements a 2PC proto- col to execute global transactions. The 
rule service interacts with the mediator to execute rules (i.e., evaluate conditions and execute actions). 
Further research directions include making active capabili- ties available to other applications such 
as electronic com- merce, real-time financial analysis, cooperating systems, etc. We want to explore 
the execution of rules adapted to dis- tributed and cooperative applications considering aspects such 
as dynamic modifications of rules and quality of service (e.g., unpredictability of clients behavior 
versus performance requirements, timely execution of reactions). 7. REFERENCES [1] G. Biitzingsloewen, 
A. Koschel, P. Lockemann, and H.- D. Walter. ECA Functionality in a Distributed Environ- ment. In N. 
W. Paton, editor, Active Rules in Database Systems, Monographs in Computer Science. Springer Verlag, 
1998. [2] S. Chakravarthy, R. Le, and R. Dasari. ECA Rule Processing in Distributed and Heterogeneous 
Environ- ments. In Proceedings of the Fourteenth International Conference on Data Engineering, Florida, 
USA, Febru- ary 1998. IEEE Computer Society Press. [3] C. Collet and G. Vargas-Solar. Flexible and semantic 
event managers: toward a seamless communication be-tween distributed database applications. Technical 
re-port, LSR-IMAG, Grenoble-France, 1999. [4] C. Collet, G. Vargas-Solar, and H. Grazziotin-Ribeiro. 
Toward a semantic event service for database appli-cations. In Proceedings of the 9th. International 
Con- ference, DEXA98. Lecture Notes in Computer Science Springer-Verlag, Viena-Austria, august 1998. 
[5] C. Collet, G. Vargas-Solar, and H. Grazziotin-Ribeiro. Active capabilities for federated database 
systems. Technical report, LSR-IMAG, Grenoble-France, 1999. [6] T. Coupaye and C. Collet. Semantics based 
implemen- tation of flexible execution models for active database systems. In les actes des 14idmes Journdes 
Bases de Donndes Avancdes, Hammamet- Tunisie, october 1998. [7] H. Frithschi, S. Gatziu, and K. Dittrich. 
Framboise -an approach to construct active database mechanisms. Technical Report 97.04, Department of 
Computer Sci- ence, University of Zurich, Zurich, April 1997. [8] H. Grazziotin-Ribeiro and C. Co[let. 
Behavior of active rules within multi-database systems. In Proceedings of the XIV Symposium on Databases, 
Florianopolis-Brazil, october 1999. [9] E. Hanson and S. Khosla. An introduction to the triggerman asynchronous 
trigger processor. Technical Report TR-97-007, CISE Department, University of Florida, United States, 
April 1997. [10] A. Koschel, R. Kramer, G. Biiltzingslrwen, T. Bleibel, P. Krumlinde, S. Schmuck, and 
C. Wein. Configuration Active Functionality for CORBA. In Proceedings of the ECOOP97 Workshop, Jyv~kul~i, 
Firm]and, June 1997. [11] L. L. and P. Melliar-Smith. Synchronizing Clocks in the Presence of Faults. 
Journal of the ACM, 32(1):52-78, 1985. [12] J. Mylopoulos, A. Gal, K. Kontogiannis, and M. Stan- ley. 
A generic integration architecture for cooperative information systems. In Proceedings of the 1st IFCIS 
International Conference on Cooperative Information Systems (CooplS'96), pages 208-217, Brussels, Bel-gium, 
June 1996. IEEE. [13] N. W. Paton. Active Rules for Databases. Springer Ver- lag, 1998. [14] S. Schwiderski. 
Monitoring the behavior of Distributed Systems. PhD thesis, University of Cambridge, April 1996.  Biographical 
Information Christine Collet is Professor at the INPG (National Po- litectmical Institute of Grenoble) 
in France. She is leader of the Database Group and responsible of the NODS project (Networked Open Database 
Services) at the laboratory LSR (Logiciels, Syst~mes, R4seau). Genoveva Vargas-Solar, and Helena Grazziotin-Ribeiro, 
assistant professor at the Univer- sidade de Caxias do Sul- Brazil, are currently Ph.D students at the 
University Joseph Fourier in Grenoble. Their research interests are active and distributed databases, 
distributed and cooperative systems, database services for internet applications (i.e., data and application 
servers) and data-warehouses. 360   
			