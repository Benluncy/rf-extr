
 Chapter On-Line Weighted Bala Kalyanasundaram Abstract We study on-line versions of weighted matching 
problems in metric spaces. We present a simple algorithm for on­line minimum weighted bipartite matching 
that is 2k 1 competitive, where 2k is the number of nodes. We show that this bound is optimal. For on-line 
maximum matching, we prove that the greedy algorithm achieves an optimal competitive factor of 3. In 
contrast, we prove that greedy algorithm performs exponentially poorly for on-line minimum matching. 
We show how lower and upper bounds can be translated between this problem and the standard k-server problem. 
1 Introduction The assignment problem, finding a bipartite matching of minimum weight, is one of the 
archetypical problems in algorithmic graph theory and in combinatorial op­timizat ion [Ca, PS]. We investigate 
a natural on-line version of this problem. Let G be a complete bipartite graph with bipartitions S and 
R, each of cardinality k. The weights on the edges are revealed on-line at k different time intervals. 
During the ith time interval, the weights of all the edges incident on ri, the ith ver­tex in R, are 
divulged and one vertex from S must be selected to be matched with ri. It is common for the weights to 
represent distances in some metric space. So, for the time being, let us assume that the weights are 
posit ive and satisfy the triangle inequality. The goal of the on-line algorithm is to minimize the weight 
of the matching being produced. In our analysis, we will adapt the paradigm of competitive analysis [ST]. 
That is, we want to minimize the worst-case ratio of the weight of the on-line matching divided by the 
cost of the mini­mum weight perfect matching. An on-line algorithm is said to be a-competitive if this 
ratio less than a for all possible inst antes. Most introductory texts on combinatorial optimiza­t ion 
present as an application of the assignment problem an example similar to the following fire station 
problem. The partition S represents k fire stations and R repre­ University of Pittsburgh ; Supported 
in part by NSF under grant CC R-9009318. t University of Pittsburgh. 26 Matching * Kirk Pruhs t sents 
k fires. Each fire station can handle exactly one fire. The weight on an edge (si, rj ) is the distance, 
or equivalently time if we assume that time is proportional to distance, between fire station Si and 
the location of fire rj. The goal in the problem is to match the fire stations with the fires so as to 
minimize the the aver­age response time. The optimal solution is given by the minimum weight perfect 
mat thing. However, as we all know, life is not so convenient that all fires will break simultaneously. 
If fire stations must be assigned to fires as they break out, then this problem is essentially our on-line 
version of the assignment problem. Notice that the fire station problem and our on­line version of the 
assignment problem are not exactly equivalent. In the fire station problem we have the apparent benefit 
of knowing the metric space and the location of the fire stations a priori However, as we shall see, 
this additional knowledge will not provide any benefit in the worst case analysis. We should also point 
out that the triangle inequality implies that it never pays to have one fire station preempt another 
already assigned fire station. So no loss of generality occurs by not allowing preempt ion. Besides many 
obvious direct applications of on-line assignment, an additional motivation for our invest iga­tion is 
the relationship between this problem and the recently much investigated k-server problem (for recent 
bibliographies on this problem see [BBKT, CDRS]). In the k-server problem we are given a metric space 
M and k servers. The input consists of an on-line sequence of points in M. In response to a request one 
of the servers must move from its current location to the re­quest point. An on-line algorithm for the 
k-server prob­ lem is a-competitive if over all sequences of requests the cost incurred by the on-line 
algorithm is less than a times the optimal off-line cost plus some constant that can depend on the metric 
space. There are three main differences between the k­server problem and on-line minimum weight matching 
(rein-matching, for 8hort). Firstly, in the k-server problem it is assumed that the time required to 
handle a request is negligible compared to the interrequest times, while in on-line rein-matching it 
is essential to assume that the time required to handle a request is much longer a. LA ON-LINE WEIGHTED 
MATCHING than the interrequest times. Secondly, in the the k­ server problem the servers are mobile and 
do not have a~ fixed location. Thirdly, there is a difference in the way competitiveness is defined, 
A competitive algorithm for the k-server problem need only be competitive in the limit, and thus may 
perform arbitrarily badl:y on the initial requests. Despite these differences, there are some connec­tions 
between the k-server problem and on-line rein­matching. It has been conjectured that there is a k­competitive 
algorithm for each k-server problem [MMS]. We will call this the strong k-server-conjecture. Despite 
much effort, this conjecture has only been proven for special types of metric spaces [CDRS, CHPV, MMS]. 
In section 2, we show that an cr-competitive algorithm for the for the k-server problem in a finite metric 
space M can be modified to give a (2a I )-competitive algorithm for on-line rein-matching. Also, we 
show (2cz 1) is the best possible bound. So our goal is to find a (2k l)­competitive algorithm for 
on-line rein-matching, a prob­lem that is in some sense strictly easier than solving the strong k-server 
conjecture. It was our hope that such a solution would shed some light on the strong k-server conjecture. 
Unfortunately, we show that it is not pos­sible to translate an upper bound for the on-nine rein­-matching 
problem on a metric space M to an upper bound for the k-server problem on M. The on-line rein-matching 
problem also has some resemblance to k-server problems with excursions stud­ied by Manasse et al. [MMS]. 
However, these lproblems are essentially different for the same reasons that the standard k-server problem 
is different from on-line mis­matching. Our investigation into weighted matching problem complements 
Karp, Vazirani, and Vazirani s [KVV] study of on-line unweighed maximum cardinal­ity matching. In section 
3, we present our main result, a (2k l)­competitive algorithm Permutation for on-line mis­matching. 
Hence, Permutation is strongly competitive [MMS], that is it gives the minimum possible competi­t ive 
factor, We should point out that, given our reduc­t ion of on-line rein-matching to the k-server problem, 
a solution to the strong k-server conjecture would not render Permutation obsolete for several reasons. 
Permu­tation does not need a priori knowledge of the metric space, and Permutation does not require that 
the metric space to be finite. Additionally, our reduction produces a very unnatural inefficient algorithm 
for on-nine mis­matching. In contrast, Permutation is simple and natu­ral, and only requires solving 
one single source shortest path problem for each request. Moreover, Perlmut ation can be extended to 
trade on-lineness for competitive­ness. In some applications of on-line mat thing it may be case that 
the input is not fully on-line in the sense that several requests may arrive simultaneously. If the requests 
arrive in t groups, then a natural extension of Permutation is (2t 1)-competitive. This algorithm does 
not require a priori knowledge oft. If we force the grouping artificially, we can also view this as a 
trade-off between competitiveness and on-lineness . We consider the on-line version of the maximum weight 
bipartite matching problem [Ca, PS] in section 5. We will call this problem on-line max-maiching. Once 
again we assume that the weights are nonnegative and satisfy the triangle inequality. We show that the 
greedy algorithm Farthest Neighbor, which services a request with the farthest available server, is 3-competitive. 
 That is, it produces a matching of size at least 1/3 of the off-line maximum weight matching. We will 
also prove that there is no on-line algorithm that achieves a competitive factor less than 3. Perhaps, 
this is not surprising since such behavior has been shown for the off-line greedy algorithm that chooses 
the largest available edge as the next matched edge. The off-line greedy algorithm for maximum matching 
produces a matching of weight at least half the maximum matching [Av]. For off-line rein-matching, Reingold 
and Tarjan [RT] have shown that a greedy algorithm, which chooses the smallest available edge, produces 
a matching of weight at most a linear factor larger than the minimum matching. (Their actual result is 
stronger and shows that the factor is @(k058496).) We have already shown that a linear factor is the 
best possible for on-line minimum weight mat thing. One might hope that, as in the maximum matching case, 
the on-line greedy algorithm Nearest Neighbor does not perform too much worst than the off-line greedy 
algorithm. Unfortunately, this is not the case. We show in section 4 that Nearest Neighbor is only (2k 
 I)-competitive, an exponential blowup from the optimal value. Unless otherwise mentioned, we always 
assume that the triangle inequality holds. If the triangle inequality does not hold, then in general, 
the competitive factor will worsen without bound with the increase in the disparity in the triangle inequality. 
2 On-Line Min-Mat clling Versus k-Server In this section we show how on-line rein-matching is related 
to the k-server problem. We also give a general lower bound for the competitive factor for on-line mis­matching 
in a general metric space. We begin with some basic definitions. We use R to denote the set of requested 
points, with ri being the ith requested point, and Ri denoting the set {rl, , , , , ri }. We use analogous 
notation S, Si and Si for set observing points, ith server and the set of first i servers (used) respectively. 
We will use d(si, rj ) to represent the weight of an edge (si, rj ). THEOREM 2.1. If there is an es-competitive 
algo­rithm A for the k-server problem on some finite metn c space M, then there is a (2cY I)-competitive 
algon thm A for on-line rein-matching on M. Proof Sketch: Let S = {sl, sz,..., s~} be an arbitrary initial 
configuration of the servers for the min­matching problem. We construct A separately for each such S, 
Without loss of generality, assume A is lazy [MMS]. That is, if there is a server at the requested point 
then A serves the request with that server. Otherwise, the only server that is moved is the one answering 
the request. Our proof proceeds by simulating A in phases. At the start of each phase we guarantee that 
the current position of the servers is S. Let X = {31, z2, . . . . ok} be an arbitrary ordered set of 
k points in hf. We simulate A independently on each such X such that an unmoved (in that phase) server 
is used to serve each request, We call this simulating algorithm (a potential algorithm for on-line rein-matching) 
A (X). The simulation A (X) is divided into stages (within the phase). At the start of stage j the jth 
point xj is revealed to A. We inductively assume that immediately before stage j starts it is the case 
that there is exactly one server on each of the j 1 points in Xj_l = {%~, Z~,..., Zl-l } , and all the 
other servers have not moved yet in this phase. We feed A the request xj. If A moves a server that has 
not moved in this phase to handle xj, then we have A (X) use that server to handle xj. Otherwise, we 
repeatedly query the one uncovered point in Xj = {Z1, ZZ, . . . , Zj } until an unmoved server handles 
that request. A (X) then uses that server to handle Xj. By the triangle inequality the cost incurred 
by A (X) over this phase is at most the cost incurred by A over this phase. We call an X good if the 
cost of A (X) is less than (2a 1) times the minimum matching between S and X. If all X s are good, then 
A can use this simulation to obtain a (2CI 1)-competitive algorithm when the initial configuration is 
S. Otherwisej we need to continue our simulation for S. Let X be a bad X. During the first half of this 
phase we select X as the actual input that was given to S. We now end the phase by forcing A to move 
the servers back to S by repeatly querying the points in S. We are now ready to start a new phase. The 
simulation of A in the next phase will start at this point. The cost to A is this phase is at least (2a 
 1) times the minimum mat thing for the simulation on X , plus at least one minimum matching to move 
back to S. The KALYANASUNDARAM AND PRUHS off-line cost is at most twice the minimum matching. For all 
possible initial configurations, it must be the case that at some finite phase there are no bad X s. 
Otherwise, one could derive a contradiction to the hypothesis that A is m-competitive. Therefore, we 
obtain a (2cr 1)-competitive algorithm for each starting configuration by simulating A on the phase 
in which there are no bad X s. Since there are only finitely many starting configurations we obtain the 
algorithm A by collecting the algorithms for each possible starting configuration. ~ It is important 
to observe that in the above t heorem the on-line rein-matching algorithm must know the starting configuration 
of the servers a prior-i. However, this algorithm will work for all starting configuration in M. Notice 
that the finiteness of the metric space is needed in the above theorem to give the simulating algorithm 
finite cent rol. The following corollary is the contrapositive to the above theorem. COROLLARY 2.1. A 
lower bound of a competitive­ness for on-line rein-matching in a metric space M im ­plies a lower bound 
of (a+l)/2 for the k-server problem on M. If the strong k-server conjecture is true then we would then 
have a 2k 1 competitive algorithm for un­line tin-matching. We now show that 2k 1 is the best possible 
bound that can be achieved in general metric paces THEOREM 2.2. For every k there is a jinite metric 
space M for which every deterministic on-line algorithm for the rein-matching problem on M has a competitive 
factor of at least 2k 1. Proofi Let A be any deterministic algorithm. Let M be a star, that is a tree 
with k leaves and k + 1 vertices. Let all edge weights be one. The distances between points are the shortest 
paths. The first query is to the one nonleaf vertex. The ith query, 2 ~ i ~ k is to the point formerly 
occupied by the server that A used to handle the (i l)st query. The cost to A is 2k 1. The minimum 
matching matches the center point with the one unqueried leaf for a total cost of 1. ~ Manasse et al 
[MMS] showed that one can not obtain better than k-competitive algorithms for the k­server problem on 
any metric space with at least k + 1 points. In contrast we show, in Theorem 2.3, that there are some 
metric spaces for which one can obtain on-line rein-matching algorithms that are arbitrarily close to 
l-competitive. This shows that we can not in general translate an upper bound for on-line rein-matching 
in a metric space M into an upper bound for the k­ server on M. If the strong k-server conjecture is 
true then the competitive factor for the k-server problem is independent of the metric space. Theorem 
2.3 says that ON-LINE WEIGHTED MATCHING the competitive factor for on-line rein-matching depends critically 
on the metric space. THEOREM 2.3. For all c >0, there is an al bitrarily iarge metric space M such thai 
there is a (1 + c)­competitive for on-line rein-matching on M. Proof Sketch: Let the points of M be a 
subset of the real line, with distances measured along the real line. Let a(n) be monotonically increasing 
function of n. Let SI = 1. Inductively let Si = a(n) ~~.~~ sj. Consider the following algorithm A for 
on-line rein-mat thing on M. A services each request with rightmost available server to the left of the 
current request point. Ijf no such server exists, A services the request with the leftmost free server. 
A is (1 + l/(cr(rz))-competitive on M. We omit full proof in this version ~ 3 Deterministic Algorithm 
-Permutation In this section we present a strongly competitive algo­rithm for on-line rein-matching. 
We call this algorithm Permutation. Before describing Permutation we first need some technical definitions 
and results. ,4 partial matching of a subset &#38; of R is a perfect matching of R; with a subset of 
S. Let Mj be a minimal weight partial matching on Ri with a minimal number of edges in Mi Mi -~. If 
more than one partial mapping sat.. isfy this minimalit y condition, we may select one in an arbitrary, 
but fixed manner, and call it the minimum weight partial matching. Where no ambiguity will re­sult, we 
will also use Mi to denote the weight of this minimal matching. The exclusive-or, El @ E2, of two subsets 
of the edge set of a graph contains those edges that are in exactly one of El and E2. An augmenting path 
(cycle) in El @ E2 is a simple path (cycle) with edges alternately in El and E2. An augmenting path is 
balanced if the aggregate weight of the edges from one set equals the aggregate weight of the edges from 
the other set. We state the following lemmas without proof. LEMMA 3.1. The exclusive-or of Mi and h4i_l 
con­sists of exactly one unbalanced augmenting paith. LEMMA 3.2. Let Li be the subset of S that contains 
the servers incident on an edge in Mi. For euch i, the set difference Li Li_l contains exactly one vertex. 
Note these lemmas do not require the triangle in­equality. We are now ready to describe Perrnutation. 
Let Pi to denote the partial matching constructed by Permutation for the first i service requests. lPermuta­tion 
gets its name because it maintains the following invariant: For all i, the vertices in S incident to 
an edge in Mi are exactly the vertices in S that are incident to an edge in in Pi. Permutation then responds 
to the (i + l)st request by computing Mi+l and servicing ri with the unique vertex in S that is in Mi+l 
 Mi, Such a vertex exists by Lemma 3.2. Before proving, in Theorem 3.1, that Permutation is (2k 1)-competitive 
we need the following lemma. LEMMA 3.3. The weight of the Mi s, the minimum partial matchings, form a 
monotonically nondecreasing sequence. Proofi By Lemma 3.2 we need only consider the one unbalanced augmenting 
path P in H = Mi _ 1 @Mi. One endpoint of P is ri. Let P be the path obtained from P by deleting the 
edge from Mi incident on ri. The aggregate weight of the edges from Mi in P must be at least as large 
as the aggregate weight of the edges from M$_l in PI or we would get a contradiction to the minimalit 
y of M{_ 1. Since the edge incident on ri in Mi is nonnegative the result follows. ~ THEOREM 3.1. Permutation 
is 2k l-competitive. Proofi We prove inductively that the weight of Pi is at most 2i 1 times the weight 
of Mi. For i equal to 1, Mi = Pi and the result follows. Now assume that the result holds for i 1. Assume 
P services si with rj. Let M be the union of the matching Mi_l and (sj, ri) and let H be the exclusive-or 
of Mi and M . By Lemma 3.2, the server vertices in Mi and M are identical, and hence H consists of one 
augmenting cycle. By the triangle inequality we have d(sj, ri ) is at most the aggregate weight of the 
edges in H minus d(sj, ri), which is less than Mi.l + Mj. Hence Pi Pi_l < Mi + Mi-l. Using the fact 
that Mi ~ Mi _ ~ and the inductive hypothesis we have Pi<(2(i 1) l)Ma-l +2M~~(2i l)Mi 4 Note that by 
remembering Mi _ 1, Permutation can compute Mi, and thus handle a request, in time that it takes to solve 
one single source shortest path problem in a graph with n + i vertices and ni edges. This problem can 
be solved in time O(ni + n log n) [FT]. If some of the k requests arrive simultaneously we can obtain 
a better competitive factor. More precisely, if the requests come in t groups we obtain a (2t -l)­competitive 
algorithm, which is optimal, and it is based on the following lemma. LEMMA 3.4. The exclusive-or of Mi 
and Mi_j con­sists of exactly j disjoint augmenting paths. Assume that the ith group has j requests, 
Let H be the exclusive-or of the new minimum partial matching and the previous minimum partial matching. 
The on-line algorithm matches the endpoints of the j augmenting paths in H. 238 THEOREM 3.2. This variant 
of Permutation as (2t 1)-competitive for on-line man-matching if the re­quests arrive in t groups. Proof 
Sketch: The proof closely parallels the proof of theorem 3.1. A 4 Analysis of Nearest Neighbor In this 
section we analyze the competitiveness of the greedy algorithm, Nearest Neighbor, that chooses the closest 
available server to handle the current request, breaking ties arbitrarily. We show that Nearest neigh­bor 
is (2k I)-competitive and that this bound is tight. THEOREM 4.1. Nearest Neighbor achieves a com­petitive 
factor of 2k 1. Proof Sketch: Let Ni be the partial matching con­structed by Nearest Neighbor after 
i vertices have been revealed. We can assume, without loss of generality, that by renumbering the vertices 
that Nearest Neigh­bor services r; with Si. We prove inductively that Ni < (2i l)lvfi. For i = O, Mi 
= IVi and the result follows. Now assume that the result holds for i 1 and we will verify it holds for 
i. Assume that ri is matched with Sj in Ati. If the weight of the edge selected by Nearest Neigh­bor 
to service ri is less than or equal the weight of the edge incident to ri in I14i we are done. Other­wise, 
it must be the case that sj is incident on an edge in Iti i 1. Let H be the exclusive-or of IVi _ 1 and 
Mg, There is a unique maximal augmenting path P start­ing from ri and ending at a vertex SI not incident 
to any edge in Ni _ 1. Then d(ri, Si) ~ d(ri, SI) by defini­t ion of nearest neighbor. AlSO d(r~, S1) 
< Mi + Ni 1 by the triangle inequality. Since Ni = lVi-1 + d(si, ri), Ni ~ 2Ni_1 + Mi. Then by the inductive 
hypothesis Ni ~ 2(2i-1 l)i14~.1 + A4i. By lemma 3.3 the Mi are monotone nondecreasing. Hence we can 
conclude Ni s (2i -l)illi. 4 THEOREM 4.2. For all k there is a jinite metn c space M for which Nearest 
Neighbor has a competitive factor of 2 1 Proof: M is a subspace of the real line with distances being 
defined in the standard way. Let S1 = 1, and si = 2~-~ ~,2<i<k. The request points are 2,-1 r~ = 1, 
1 < i ~ k. We can assume Nearest Neighbor uses si+l to service request ri for i < k and services rk with 
SI. The cost to Nearest Neighbor is 2k 1. The optimal matching is obtained by matching each ri to the 
corresponding si for a total cost of 1. 6 5 Maximum Weighted Matching In this section we analyze the 
competitiveness of the greedy algorithm, Farthest Neighbor, that chooses the KALYANASUNDARAM AND PRUHS 
farthest available server to handle the current request, breaking ties arbitrarily. We show that Farthest 
Neigh­bor is 3-competitive and that this bound is tight. THEOREM 5.1. Farthest Neighbor achieves a com­ 
petitive factor of 3 for on-line bipartite maz-matching. Proof : Let rl, rz, . . ..r~ be the sequence 
of requests in that order and for 1 < i ~ n, let si be the server chosen by Farthest Neighbor to match 
ri. For all j > i, d(sj, ri) ~ d(si, ri). Otherwise Farthest Neighbor would have chosen sj instead of 
Si. NOW consider the optimal matching in which the request r~ is served by Sin(i). We will prove that 
if i > r(i) then D(ri) = d(i~(i), l i) d(S; , 7 i) is at most 2 * d(Si(i), T =(i) ). Also, if i < ~(i) 
then D(ri) = O. Therefore, ~~=1 D(r~) < Z:=l 2 * d(sm(i)j rm(i)) SinCe ~ # ~ implies ~(i) # ~(~), the 
right hand side of the above inequality is two times the matching induced by Farthest Neighbor. The left 
hand side is the difference between optimal matching and the matching induced by the Farthest Neighbor. 
Therefore, optimal mat thing is at most three times the matching induced by Farthest Neighbor. Therefore, 
we are left with one inequality to prove; if i > m(i), then D(r~) ~ 2 * d(sm(i), rn(~)). We use the triangle 
inequality to prove this. We know (by Farthest Neighbor) d(sr(i), r~(;)) ~ d(si, ~m(~)). BY triangle 
inequality, d(sm(i), si) s 2 * d(sm(i), rm(i)) and D(ri) < d(sn(i), si). A We will prove that Farthest 
Neighbor is optimal by showing that there is no algorithm that achieves a competitive factor strictly 
less than 3 for a metric space, THEOREM 5.2. No on-line algorithm for on-line max-matching can obtain 
a competitive factor better than 3. Proof Sketch : We construct a metric space M Initially, we place 
the servers si s and the first request point rl in a star shaped configuration where rl occupies the 
center and Si s are the wings. They are placed in such a way the distance between any two servers is 
2 and the distance between any server and the center rl is 1. Depending on the server used by the algorithm, 
we create another star with second request point as the center and the rest of the servers as the wings. 
We also fix the distance between the first server used by the algorithm and the second request point 
to be 3. Observe that this satisfies the triangle inequality. We recursively repeat this trick to define 
future request points. At the end, when there is only one server left, the last query point r~ coincides 
with this server. We now claim that for any n and for any algorithm A, the star trick described above 
forces the algorithm to a competitive factor of exactly 3. Observe that the matching induced by the algorithm 
d is n 1. On the other hand, the optimal maximum matching is ON-LINE WEIGHTED MATCHING l+3(n 2) +2=3( 
n l), ~ 6 Conclusion and Open Problems This paper reports on preliminary results from our ongoing investigate 
ion into on-line mat thing problems. This area is filled with many interesting open problems. We conclude 
by presenting several of these problems. One common variant of weighted matching is bot­tleneck matching 
[PS]. In bottleneck matching, the cost of a matching is the weight of the largest edge and the goal is 
to find the matching with minimum bottleneck weight. The combinatorics of on-line bottleneck match­ing 
seem to be more complicated than those of regular bipartite matching. Permutation achieves a (2k 1) 
competitive factor for bottleneck matching. If ties are broken arbitrarily, we can prove that (2k 1) 
is the opti­mal bound for Permutation. But, the best lower bound (on competitive factor) we know of for 
this problem is k+l. One might also consider on-line transportation problems [Ca, PS]. For example, consider 
the following generalization of the fire station problem. Each fire sta­tion may have more than one fire 
crew. We assume that it takes one fire crew to handle each fire. The goal is still to minimize the ratio 
of the on-line cost to the min­imum off-line cost, which is given by a b-matching [PS]. If there are 
k fire crews occupying t stations Nearest Neighbor achieves a (2t 1) competitive factor. This shows 
that one can achieve a competitive factor inde­pendent of k. We conjecture that Permut at ion achieves 
a (2t 1) competitive factor. Randomization has been shown to be very helpful in designing on-line algorithms 
[BBKT, CDRS, FKLMSY]. However, harnessing the full power of randomization is often not easy. In studying 
randomized algorithms for on-line problems, there is no clear choice for the correct type of adversary. 
There seem to be 3 natural ways of defining an adversary [B BKT], only two of which are of interest to 
us here. An oblivious adversary would have to a priori fix the graph and the order that the vertices 
would be revealed. An on-line adaptive algorithm would have to fix the graph, but could choose the ith 
vertex to reveal after seeing the on-line algorithm s response to the (i l)st query. It would be interesting 
to deter­mine the power that randomization provides against an oblivious adversary aa well as against 
an adaptive on­line adversary. We have a k lower bound for the com­petitiveness factor against an on-line 
adaptive adversary and a 211k 1 lower bound for the competitiveness fac­tor against a oblivious adversary. 
Here Hk = ~~~=1 l/i is the kth harmonic number. (Note, Hk = @(log k).) We have a k-competitive randomized 
algorithm against an especially virulent type of on-line adaptive adversary, which we call a hole jilling 
adversary. A hole filling adversary selects the query points such that the symmetric difference between 
these query points and the initial configuration of the servers is exactly one point. A hole filling 
adversary is roughly equivalent to what Raghavan and Snir [RS] call a lazy adversary for the k-server 
problem. If the adversary is lazy in the k-server problem, Raghavan and Snir show how one can obtain 
a k-competitive randomized algorithm by breaking the input sequence down into stages of games that they 
call cat and mouse games. Ragavan and Snir s cat and mouse game is played in stages in a finite metric 
space M. At the start of the stage the cat and mouse are at the same point. The mouse, who is invisible 
to the cat, then moves to some new point. The stage ends when the traveling (the metric space) cat arrives 
at the point where the mouse is hiding. It is important that the cat not be informed when a stage has 
ended. The goal is minimize the ratio of the cat s movement to the mouse s movement. If the adversary 
is hole filling, then on-line rein-matching reduces to a cat and mouse game similar to Raghavan and Snir 
s, with the exception that the cat must be informed when a stage has ended. This new cat and mouse game 
seems interesting in it s own right. On the real line, it is possible for the cat to achieve a constant 
competitive factor, and on the plane the cat can achieve a competitive factor of W. This gives us algorithms 
for on-line rein-mat thing in the line and the plane with the same competitive factors against a hole 
filling adversary. It an open question whether these bounds can be extended to nonhole filling adversaries. 
It is easy to show that an Q(k(d-l)ld) bound holds for the competitive factor in d-dimensional Euclidean 
space. We should note that for 3 servers on a line the worst case competitive factor for on-line rein-matching 
cannot be achieved by a lazy adversary. Our results suggest that, at least for the plane, it may be difficult 
for a nonhole filling adversary to make the competitive factor worse by more than a constant factor as 
compared to a hole filling adversary. One natural direction of future investigation is to extend the 
results to nonbipartite graphs. It is not completely clear what the correct way of defining on­line nonbipartite 
matching is. One natural way is the following. In each step, an unmatched vertex is identified along 
with the weights of the edges incident on it. This vertex should be matched immediately, if it is not 
already matched. Our results on max-mat thing for bipartite graphs carry over to this problem. However 
we do not know how to extend our tin-matching results. We mentioned the importance of the weights sat­isfying 
the triangle inequality. One might consider spaces that in some sense almost satisfy the trian­gle inequality. 
For a ~ 1, we call a space a-metric if all distances are positive and for all z, v and z, d(z, z) s a(d(z, 
y) + d(y, .z)). All of our results carry over to a-metric spaces with an additional factor of Q in competitiveness. 
For example, Permutation is a(2k l)­competitive for the on-line rein-matching problem on an a-metric 
space, and this is the minimal possible bound for a general metric space. It is interesting that for 
many simple metric spaces finding strongly competitive algorithms for on-line mis­matching seems to be 
much harder than finding strongly competitive algorithms for the k-server problem. For example, for 3-server 
problem on a line, the optimal competitive factor is 3 [CKPV] and the algorithm that achieves this is 
simple and natural. In contrast, the opt imal competitive factor for on-line rein-matching with 3 servers 
on a line is: (1 +3* 2/3+ 13/(9+(97/54+ ~ 23@/(6*31i2))lj3 )+(97/54+231 2/(6* 31i2))113) (1+ 3*(2/3 +13/(9 
*(97/54 +23112 /(6*31 i2))1i3)+(97/54+ 23112/(6*31j2)) 113)+2*(2/3+ 13/(9*(97/54+23 ll2/(6* 3112) )1/3) 
+ (97/54+ 231/2/(6* 3112) )113) 2)1/2 )/( 1 (2/3 + 13/(9* (97/54+ 231/2/(6* 3112) )1/3) + (97/54 + 231/2/(6 
* 31/2) )1/3) + (1 + 3 * (2/3 + 13/(9 * (97/54 + 23112/(6* 3112))li3) +(97/54 +231i2/(6* 31i2))li3) +2* 
(2/3 + 13/(9* (97/54+ 23112/(6* 31/2) ) 13) + (97/54 + 231/2/(6 * 3112) )1/3)2)1/2). The value of this 
expression is approximately 3.6494359. In addition, the optimal algorithm is quite complicated and seems 
to have no short description. Acknowledgements: It has recently been brought to our attention that some 
of the results presented in this paper for on-line rein-matching were obtained indepen­dently by Khuller, 
Mitchell and Vazirani [KMV]. References [Av] D. Avis, A Survey of Heuristics for the Weighted Matching 
Problem , Networks, vol. 13, pp. 475-493, 1983. [BBKT] S. Ben-David, A. Borodin, R. Karp, and G. Tardos, 
On the Power of Randomization in On-Line Algorithms , Proceedings of the 22nd ACM STOC, pp. 379-386, 
1990. [CDRS] D. Coppersmith, P. Doyle, P. Raghavan, and M. Snir, Random Walks on Weighted Graphs, and 
Applications to On-Line Algorithms , Proceedings of the 22nd ACM STOC, pp. 369-378, 1990. [Ca] B. Carre, 
Graphs and Networks, Clarendon Press, 1979. [CHPV] M. Chrobak, H. Karloff, T. Payne, and S. Vishwanathan, 
New Results on Server Problems , Proceedings of the 1st SODA, pp. 291-300, 1990. [FKLMSY] A. Fiat, R. 
Karp, M. Luby, L. McGeoch, KALYANASUNDARAM AND PRUHS D. Sleator and N. Young, Competitive Paging Alg~ 
rithms , Technical Report CMU-CS-88-196, School of Computer Science, Carnegie Mellon, 1988. [FT] M. Fredman, 
and R. Tarjan, Fibonacci Heaps and Their Uses in Improved Network Optimization Algorithms , JACM, vol. 
34, pp. 596-615. [KMV] S. Khuller, S. Mitchell, and V. Vazirani, On­line Algorithms for Weighted Matching 
and Stable Marriages , Technical Report TR 90-1143, Department of Computer Science, Cornell University, 
1990. [KVV] R. Karp, U. Vazirani, V. Vazirani, An Opti­ mal Algorithm for On-Line Bipartite Matching 
, Pro­ ceedings of the 22nd ACM STOC, pp. 352 358, 1990. [MMS] M. Manasse, L. McGeoch, and D. Sleator, 
Competitive Algorithms for On-Line Problems , Pro­ceedings of the 20th ACM STOC, pp. 322 333, 1988. [PS] 
C. Papadimitriou and K. Steiglitz, Combinatorial optimization, Prentice-Hall, 1982. [RS] P. Raghavan 
and M. Snir, Memory vs. Ran­domization in On-Line Algorithms , Proceedings of lbth ICALP, pp. 687-703, 
1989. [RT] E. Reingold and R. Tarjan, (on a Greedy Heuris­tic for Complete Matching , SIAM Journal of 
ComPut­ing, vol. 10, pp. 676 681, 1981. [ST] D. Sleator and R. Tarjan, Amortized Efficiency of List Update 
and Paging Rules , Communications of the ACM, vol. 28, pp. 202-208, 1985.
			