
 Re-Approaching the Refactoring Rubicon Aharon Abadi Ran Ettinger Yishai A. Feldman IBM Haifa Research 
Lab {aharona,rane,yishai}@il.ibm.com Abstract Fowler saw the availability of automated support for the 
Ex­tract Method refactoring in modern IDEs as an indication for the crossing of the refactoring Rubicon. 
In spite of the ad­vances in refactoring technology, it seems that this Rubicon has not yet been crossed, 
and refactoring support in modern IDEs leaves a lot to be desired. We performed a case study in which 
we converted a Java servlet to use the model-view-controller pattern, using as much automated support 
as available. We found that while the whole conversion could be described as a series of refac­torings, 
most of these were inadequately supported by the IDE, and some were not supported at all. Based on these 
.ndings, we outline the requirements from a refactoring framework that will support much more of the 
conversion process, and will also enable the composi­tion of small refactorings into larger ones. 1. 
Introduction In 2001, Martin Fowler was excited by the level of automa­tion for Extract Method exhibited 
by contemporary IDEs, and saw it as crossing refactoring s Rubicon, with seri­ous tool support for refactoring 
in Java.1 Support for refac­toring in popular IDEs has made a lot of progress since 2001 (Fuhrer et al. 
2007), but a growing number of sources agree that they have many de.ciencies (Verbaere et al. 2006; Daniel 
et al. 2007; Murphy-Hill and Black 2008) and have yet to become fully adopted by the developer community 
(Murphy-Hill and Black 2007). 1 Crossing Refactoring s Rubicon, http://www.martinfowler.com/ articles/refactoringRubicon.html. 
Permission to make digital or hard copies of all or part of this work for personal or classroom use is 
granted without fee provided that copies are not made or distributed for pro.t or commercial advantage 
and that copies bear this notice and the full citation on the .rst page. To copy otherwise, to republish, 
to post on servers or to redistribute to lists, requires prior speci.c permission and/or a fee. WRT 08, 
October 19, 2008, Nashville, Tennessee, USA. Copyright c &#38;#169; 2008 ACM 978-1-60558-339-6/08/10. 
. . $5.00 Even the following example from Fowler s website2 is not supported by current IDEs. The challenge 
is to refactor the following method void printOwing() { printBanner(); //print details System.out.println("name: 
" + _name); System.out.println("amount " + getOutstanding()); } to this form: void printOwing() { printBanner(); 
printDetails(getOutstanding()); } void printDetails(double outstanding) { System.out.println("name: " 
+ _name); System.out.println("amount " + outstanding); } Current implementations of Extract Method cannot 
sup­port this case. (Of course, it can be achieved by a series of refactorings, but adequate automation 
should not require the user to break a single conceptual operation into sub-steps.) The problem is the 
call getOutstanding(), shown in ital­ics; it is impossible in current IDEs even to specify that this 
call should not be part of the extracted method but should be a parameter to it. (Note that this example 
is slightly different from the example in Fowler 2000, which does not have this problem and is easily 
automated.) Fowler rightly sees the automation of the Extract Method refactoring as the refactoring Rubicon, 
the one that shows the depth of refactoring support in an IDE. Moreover, sup­port for Extract Method 
is a precondition for the automation of many more transformations. Indeed, the mechanics of 14 out the 
27 refactorings in the Refactoring to Patterns cat­alog (Kerievsky 2004) make either direct or transitive 
refer­ence to Extract Method. 2 http://www.refactoring.com/catalog/extractMethod.html. In order to understand 
the requirements from automated refactorings in general, and in Extract Method in particu­lar, we performed 
a case study in which we transformed a program to the model-view-controller (MVC) pattern, using automated 
refactorings as much as possible. This allowed us to delineate existing support from what is missing. 
Based on this study, we conclude that it is possible to break a complex transformation into well-de.ned 
refac­toring steps. However, only a third of these steps were amenable to automation using current refactoring 
tools. We claim that the major reason for this lack is the fact that cor­rectly implementing Extract 
Method and similar refactorings requires more analysis capability than is available in current IDEs. 
2. A Case Study in Enterprise Refactoring Our case study is based on Alex Chaffee s Refactoring to Model-View-Controller 
article.3 While we start and end at the same versions as Chaffee, we do not follow his path, which uses 
several complicated transformations (such as the replacement of a method parameter with a constructor 
parameter and .eld). Instead, we chose a path that makes maximal use of documented refactorings. Chaffee 
describes the transformation of a Java servlet that displays a photo album to the MVC pattern. We expressed 
the transformation as a series of 36 refactoring steps, con­sisting of 14 different types of refactorings. 
Of these, all but four are already documented in Fowler s catalog. Of the re­maining four, one (Delete 
Methods) is from Opdyke (1992); another (Extract Temp) is a natural dual of a documented refactoring 
(Inline Temp), and is supported in Eclipse un­der the name Extract Local Variable ; and the .nal two, 
for the substitution of expressions and statements, could be considered simple cases of Fowler s Substitute 
Algorithm. These substitution refactorings were used to turn near-clones into exact ones, so that they 
could be replaced with a single reusable method. Table 1 lists the automated refactorings that were used 
in the transformation, and Table 2 lists those refactorings we could not perform automatically. The upper 
part of Table 2 shows refactorings whose implementations were not robust enough for the task; the lower 
part lists refactorings that have no implementation. Of the refactorings in Table 2, Replace Method with 
Method Object and Extract Class are the most complex, but should also be amenable for automation. Extract 
Class was added in Eclipse 3.4, but is still limited and does not sup­port the refactoring step needed 
in our case study. Replace Temp with Query seems to be supported by IntelliJ IDEA4 in its simplest case 
(a variable is assigned only once and its initializing expression is extracted). However, the case 3 
http://www.purpletech.com/articles/mvc/ refactoring-to-mvc.html. 4 http://www.jetbrains.com/idea. Table 
1. Fully automated refactorings used in the case study. Refactoring Uses Extract Method 3 Extract Temp 
3 (Self) Encapsulate Field 2 Replace Magic Number with Symbolic Constant 1 Inline Temp 1 Extract Superclass 
1 Delete Methods 1 Move Method 1 Total 13 Table 2. Manual refactorings used in the case study. Refactoring 
Uses Extract Method 10 Replace Temp with Query 3 Extract Class 1 Substitute Expression 5 Replace Method 
with Method Object 2 Substitute Statement 1 Move Statement (or Swap Statements) 1 Total 23 study involves 
a more complicated case of this refactoring, in which the initialization of the variable requires several 
statements (see Fowler 2000, p. 27). Our transformation exercise has revealed a number of limitations 
of implemented refactorings, especially Ex­tract Method. Out of our 13 uses of Extract Method, only three 
(appearing in Table 1) were successfully supported by Eclipse. The unsupported 10 (appearing in Table 
2) display four types of cases: (a) multiple fragments (two instances); (b) partial fragment, with selected 
sub-expressions as param­eters (.ve instances); (c) loop duplication with data .ow (a single particularly 
interesting instance); and (d) the extrac­tion of code with conditional exits from an enclosing scope 
(two instances). A full implementation of Extract Method can also be used in the implementation of other 
types of refactorings. For example, the general version of Replace Temp with Query mentioned above could 
be implemented by a sequence of two refactorings (Ettinger 2006): Extract Method (in its most general 
form) followed by Inline Temp. Case (a): non-contiguous fragments. We would like to extract all but the 
third statement (in italics) of the following fragment: response.setContentType("text/html"); disableCache(response); 
String albumName = request.getParameter("album"); PrintWriter out = response.getWriter(); Since this 
case is not supported, we .rst switched the third and forth statements to make the others contiguous, 
then ap­plied Eclipse s Extract Method on those. Switching state­ments in a program is easy to do, but 
dangerous: there might be hidden dependences between the statements, for example if there are side effects 
on shared structures. We therefore call this a Swap Statements refactoring (a special case of Move Statement). 
Refactoring tools should check that there are no violations before performing this refactoring. Case 
(b): partial fragments. In this example we want to extract the boilerplate HTML-printing code without 
the spe­ci.c content (the italicized error message) in the following fragment: out.println(DOCTYPE_HTML); 
out.println("<html>"); out.println("<head>"); out.println("<title>Error</title>"); out.println("</head>"); 
out.print("<body><p class= error >"); out.print("Could not load album " + albumName + " "); out.println("</p></body>"); 
out.println("</html>"); In this case, the error message should be passed as param­eter to the new method. 
Using current capabilities, we em­ployed Eclipse s Extract Local Variable on the expression to be parameterized. 
Unfortunately, this puts the new variable declaration just above its use, which interferes with the code 
to be extracted, as in the previous case. After moving that declaration out of the way, Eclipse could 
extract the method and even automatically discover the other clone (not shown here). With the envisioned 
availability of general method­extraction support, such a sequence of small refactorings would be replaced 
by a single operation. This case is similar to Fowler s printOwing example shown above. In both cases, 
current IDEs do not even have a way of specifying the code to be extracted, but something like the Box 
View tool of Murphy-Hill and Black (2008) could be used for this purpose. Case (c): loop duplication 
with data .ow. The following fragment interleaves the details of what to print and how to print it. We 
want to extract the code that produces the view (italicized): out.println("<table border=0>"); int start 
= page * 20; int end = start + 20; end = Math.min(end, album.getPictures().size()); for (int i=start; 
i<end; i++) { Picture picture = album.getPicture(i); printPicture(out, picture); } out.println("</table>"); 
This change requires untangling the fetching of all pictures from the printing loop. It is particularly 
challenging, since it requires the addition of an auxiliary data structure to hold the pictures, and 
the generation of a new loop that iterates over this data structure. (In languages such as C# that support 
coroutines this data structure would not be necessary.5) The result of these transformations, just before 
extracting the methods, is: int start = page * 20; int end = start + 20; end = Math.min(end, album.getPictures().size()); 
List<Picture> pictures = new ArrayList<Picture>(); for (int i=start; i<end; i++) { Picture picture = 
album.getPicture(i); pictures.add(picture); } out.println("<table border=0>"); for (Picture picture : 
pictures) printPicture(out, picture); out.println("</table>"); A number of formulations have been proposed 
for the semantics-preserving extraction of contiguous (Opdyke 1992; Griswold and Notkin 1993) as well 
as non-contiguous code (Lakhotia and Deprez 1998; Komondoor 2003; Ettinger and Verbaere 2004; Ettinger 
2006). Despite the fact that trans­formations such as the one shown above are supported by none of those, 
we believe that it can be automated, and we are currently developing the required analysis capabilities. 
Case (d): code with conditional exit. The following frag­ment, which contains the result of the refactoring 
shown in case (b) above, after an application of Replace Method with Method Object: if (album == null) 
{ new ErrorPage("Could not load album " + album.getName() + " "). printMessage(out); return; } // ... 
5 Thanks to Mathieu Verbaere for the discussion that led to this comment. This fragment contains a conditional 
return from the en­closing method. Extracting this into a separate method re­quires the new method to 
return an indication of whether to continue or return after the call. Komondoor (2003) shows how this 
case can be automated. 3. Crossing the Rubicon As demonstrated in our case study, refactoring support 
in current IDEs is not suf.cient for many tasks. Moreover, such higher-level tasks as refactoring to 
MVC require the compo­sition of small refactorings into bigger ones. In addition to the usability issues 
raised by Murphy-Hill and Black (2008), we point to three areas of de.ciency in existing tools: Flexibility: 
In certain cases, there are several different ways of implementing the same refactoring. For example, 
con­sider the case of extracting a method from code that has two sub-expressions that are not to be extracted 
(as in case (b) above). The two sub-expressions could be calls to two different methods of the same object. 
It is pos­sible to call the extracted method with two parameters containing the two values, or with a 
single parameter that is the object from which they are computed. The Extract Method refactoring should 
provide a way of selecting be­tween different implementations in such cases. Applicability: Existing 
implementations have precondi­tions on refactorings that are too strong, because of insuf­.cient analysis. 
For example, Extract Method in Eclipse rejects cases in which it thinks that the new methods need to 
return the value of two local variables. However, in some cases one of the values is not actually used 
after the method call, and need not be returned. Reliability: Existing implementations have subtle errors 
(Verbaere et al. 2006; Daniel et al. 2007), again caused by insuf.cient analysis. Some of these are easily 
discov­ered, since they cause compilation errors, while others are more elusive. For example, Inline 
Temp will replace a variable by its initializer. This would be incorrect if the initializer has side 
effects, or if it depends on variables that have been modi.ed between the original de.nition of the variable 
and its uses. These problems are bad enough for a programmer in­voking refactorings one by one, but completely 
prevent au­tomatic composition of refactorings. A refactoring frame­work that supports .exible, applicable, 
and reliable refac­torings must contain deep analysis capabilities. Such a ca­pability could then also 
be used to check preconditions for seemingly-simple refactorings such as Move Statement. Performing deep 
static analysis for every refactoring may be prohibitive, especially if it includes time-consuming anal­yses 
such as pointer analysis. It will be necessary to pro­vide controls on when to use the heavier analyses, 
when to skip them, and when to defer them. Using the terminology of Murphy-Hill and Black (2007), it 
may be possible to forgo these techniques for .oss refactoring, but not for root-canal refactoring. 4. 
Conclusions We have proposed, in this position paper, to re-approach the refactoring Rubicon by providing 
more general support for method extraction, and then to actually cross it by designing and implementing 
highly .exible, applicable, and reliable refactoring tools, based on deep program-analysis capabil­ities. 
At IBM s Haifa Research Lab, we are in the process of building a language-independent infrastructure 
based on static analysis capabilities to support such refactorings. At the same time, we are investigating 
the composition of small refactorings to support bigger transformations. References B. Daniel, D. Dig, 
K. Garcia, and D. Marinov. Automated testing of refactoring engines. In Proc. Joint Meeting European 
Software Engineering Conference and Int l Symp. Foundations Software Engineering, pages 185 194, 2007. 
R. Ettinger. Refactoring via Program Slicing and Sliding. PhD thesis, University of Oxford, Oxford, UK, 
2006. R. Ettinger and M. Verbaere. Untangling: A slice extraction refac­toring. In Proc. 3rd Int l Conf. 
Aspect-Oriented Software Devel­opment (AOSD), pages 93 101. ACM Press, 2004. M. Fowler. Refactoring: 
Improving the Design of Existing Code. Addison-Wesley, 2000. R. M. Fuhrer, A. Kiezun, and M. Keller. 
Refactoring in the Eclipse JDT: Past, present, and future. In First Workshop on Refactoring Tools, 2007. 
W. G. Griswold and D. Notkin. Automated assistance for program restructuring. IEEE Trans. Software Engineering, 
2(3):228 269, 1993. J. Kerievsky. Refactoring to Patterns. Addison-Wesley, 2004. R. Komondoor. Automated 
Duplicated-Code Detection and Proce­dure Extraction. PhD thesis, University of Wisconsin Madison, 2003. 
A. Lakhotia and J.-C. Deprez. Restructuring programs by tucking statements into functions. Information 
and Software Technology, 40(11 12):677 690, 1998. E. R. Murphy-Hill and A. P. Black. Breaking the barriers 
to suc­cessful refactoring: Observations and tools for extract method. In Proc. 30th Int l Conf. Software 
Engineering (ICSE), pages 421 430, 2008. E. R. Murphy-Hill and A. P. Black. Why don t people use refactor­ing 
tools? In First Workshop on Refactoring Tools, 2007. W. F. Opdyke. Refactoring Object-Oriented Frameworks. 
PhD thesis, University of Illinois at Urbana-Champaign, 1992. M. Verbaere, R. Ettinger, and O. de Moor. 
JunGL: a scripting language for refactoring. In Proc. 28th Int l Conf. Software Engineering (ICSE), pages 
172 181. ACM Press, 2006. 
			