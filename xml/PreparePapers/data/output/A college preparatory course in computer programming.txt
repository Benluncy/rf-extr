
 A College Preparatory Course in Computer Programming Robert L. Sedlmeyer* Purdue University at Fort 
Wayne Fort Wayne, Indiana William Parman** New Haven High School New Haven, Indiana Abstract In the 
last five years we have witnessed a mushrooming of interest in computer education at the secondary level, 
the primary focus of which has been on computer literacy. Few guidelines exist for designing a course 
at this level which emphasizes programming. In this paper, we de- scribe a computer programming course 
for high school students who are considering entering data processing or computer science degree programs. 
The course was developed jointly by members of the Computer Technology Department of Purdue Uni- versity 
at Fort Wayne and the Mathematics Depart- ment at New Haven High School. I. INTRODUCTION Poirot [POIR79] 
discusses three problems associated with the explosive growth of computer education at the secondary 
level: teacher pro- ficiency, hardware access, and curriculum development. Many solutions have been 
proposed and/or implemented to alleviate the shortage of qualified teachers. Presently, at least ten 
states offer teacher certification in data processing [BOYD78] and five states (Minnesota, Ohio, Texas, 
Utah, Wisconsin) offer programs of study which are specifically designed for the certification of secondary 
school computer science teachers [KING79]. In addition many colleges, universi- ties and school districts 
are sponsoring workshops for in-service teachers [QUIG70] [WAGN76] [KING79]. We also suspect that there 
have been a number of informal meetings between computer science educators and secondary school teachers. 
We are confident that in the 1980's teacher certification programs will be offered nationwide and the 
severity of teacher shortages in computer education will be diminished. Access to computer hardware 
is necessary to support any computer programming course. In the past, the high cost of computer resources 
has often been prohibitive for high schools. Today, however, this is no longer true. For school systems 
with modest funds, Poirot [POIR79] sug- gests two alternatives: timesharing and micro- computers. He 
strongly advocates the adoption of microcomputers, claiming that they are more economically advantageous 
and will soon be affordable to even the smallest school system. In equipping the computer laboratory 
at New Haven High School (see section III.) we also found that microcomputers were the most cost effective. 
 Curriculum development of computer education at the secondary level has been primarily directed toward 
computer literacy. Moursund and the ACMES B subcommittee have provided a strong impetus for developing 
instructional materials and teacher certification programs for this area [ACM79]. Computer literacy 
at all levels of education has been the subject of panel dis- cussions at recent computer conferences 
(e.g. COMPSAC-78, NCC 78, 1979 SIGCSE Technical Symposia); however, little attention has been devoted 
to formulating guidelines for courses *on leave at the University of Minnesota, Minneapolis, Minnesota. 
**author's current address: 702 North Argonne, Sterling, Virginia, 22070. Permission to copy without 
fee all or part of this material is granted provided that the copies are not made or distributed for 
direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, 
and notice is given that copying is by permission of the Association for Computing Machinery. To copy 
.otherwise, or to republish, requires a fee and/or specific permission. "~ 1980 ACM 0-89791-013-3 80 
0200~0166 $00.75 166 which emphasize computer programming. We theorize that computer science educators 
consider high school programming courses to be simply watered down versions of college level introductory 
programming courses and hence directly amenable to current ACM recommendations. While we generally agree 
with this sentiment we would argue that the high school environment is different enough to warrant further 
consideration. The absence of such guidelines is further compounded by the dearth of programming textbooks 
appropriate for high school students [POIR79]. II. IMPACT ON COLLEGE CURRICULA Lack of curriculum guidelines 
was the major motivation for the development of the course described in this paper, but another aspect 
of computer education at the secondary level provided additional impetus: namely, its impact on the Computer 
Technology degree programs offered by Purdue University at Fort Wayne. In the past two years we have 
encountered an increasingly larger proportion of students in our introductory programming classes who 
have had prior programming experience. Unfortunately, this "experience" has proven more harmful than 
helpful. Typically, previous programming efforts have consisted of coding exercises in BASIC to solve 
mathematically oriented problems. More often than not these students have been taught by a mathematics/science 
teacher with minimal training who lectured from a textbook emphasizing language syntax. It was evident 
that these students had been taught programming language syntax--not programming skills. As might be 
expected, a student with this background is actually at a disadvantage compared to a student with no 
prior programming experience. He has already picked up many undesirable programming practices which must 
be unlearned before any progress can be made in his development as a programmer. This presents a tough 
challenge to the instructor. Too often such a student is unwilling to change even when confronted with 
the gross inadequacies of his programming efforts. Subsequently, his performance in the course is adversely 
affected. In order to improve the quality of computer education in the area high school system and also 
to remedy the situation presented above, repre- sentatives of the Computer Technology Department of Purdue 
University at Fort Wayne and the Mathematics Department of New Haven High School participated in a joint 
effort to design a secondary level computer programming course which embodied state-of-the-art programming 
principles. Since this course would ultimately be based on the Computer Technology Department's own 
intro- ductory course, the Computer Technology curriculum was revised to accommodate these students by 
adding an accelerated version of the introductory programming sequence [CPT79]. III. LAB FACILITIES 
 Like many secondary schools, New Haven had difficulty obtaining hardware to support a computer education 
curriculum. As early as 1975 proposals were submitted to equip a computer laboratory. At that time a 
laboratory was created which only included Wang and Monroe programmable calculators. Later, several circuit 
board experi- meter kits were added. Proposals for more sophisticated computer equipment were continually 
rejected: these ranged from a $90,000 Hewlett- Packard 30-user timesharing system to a $25,000 DEC PDP-II 
4-user system. Finally a proposal for four Apple II microcomputers, at the nominal cost of $10,500, was 
approved in ]977. Presently the computer laboratory contains the following equipment: 4 Apple II microcomputers 
with 32 K RAM 5 disk units (i dual disk drive) 1 Centronics printer 4 color television/monitors The 
laboratory is open to students enrolled in the course from 7:30 a.m. to 4:30 p.m. on weekdays. Equipment 
is available on a first- come, first-served basis. Depending on the instructor, the laboratory may be 
opened on some evenings and Saturdays. IV. COURSE DESCRIPTION Objectives. Being preparatory in nature, 
this course is designed for high school juniors and seniors to pursue a computer-related career and 
who plan to enter a college or vocational program after graduation. Prospective students must have taken 
at least two years of high school mathe- matics, including geometry, prior to enrolling. These prerequisites 
are based on the belief that mathematics fosters problem-solving skills and logical thought processes. 
 The goal of this course is to instill basic programming skills that will be expanded upon in a college 
level curriculum. The objectives we consider necessary to meet this goal are based on Schneider's ten 
principles of programming [SCHN78]. These objectives are summarized below: I. The student should understand 
the basic logical, physical and functional com- ponents of a computer system and how they interact (computer 
architecture and organization). 2. The student should acquire the problem- solving skills necessary 
to develop a computer program from a problem defi- nition.  3. The student should be introduced to structured 
programming techniques.  4. The student should write programs for representative applications.  5. 
The student should develop an appreci- ation for the role of program documenta- tion in program design, 
debugging and maintenance.  167 A detailed course outline is given in Appendex A. Metbods. Material 
is presented using a lecture/discussion format. Lectures cover reading assignments from the text, Apple 
II documentation and supplemental handouts. Frequent in-class demonstrations reinforce lecture material. 
These are made possible by the portability of the Apple II and also by the proximity of the laboratory 
to the classroom. Demonstrations are particularly helpful when explaining the operation of both system 
commands (LOAD,RUN,SAVE) and language constructs (FOR,GOTO,PRINT). Presence of the Apple II in the classroom 
also aids discussion of computer components. To familiarize students with new systems or language features 
they are given in-class mini- labs. The mini-labs consist of simple, step-by- step "experiments" which 
reinforce new topics introduced during the lecture. These labs can usually be completed in 5-10 minutes. 
The mini- labs provide the instructor with immediate feedback on the effectiveness of his presentation 
and allow the students to test their uwn compre-hension. A sample mtnl-lab Is given in A1)pendlx B. Several 
outside class lah excerctses are assigned. These ;ire expanshms of the mlnl-labs and require somewhat 
more preparation time; hnwever, ti fitnt/le 15-minute session wlth the c.mput, er ta adequate with proper 
preparntlon. Each student is required to complete 4-6 programming projects. Each project covers concepts 
from several lab exercises. Project topics are primarily business-oriented because business applications 
allow students to concen- trate more on decision structures and looping constructs than on mathematical 
processes. For an acceptable grade students must employ structured programming techniques and follow 
style and documental.Ion standards. A llampl, e programming project Is given in Appendix C. quizzee and 
exams are given frequently and emphasize material reinforced on the laboratory exerci~e, and programming 
projects. V. DTSCUSSION The course was-offered for the first time in the Spring of 1979 with an enrollment 
of 26 students. Overall, we Judged the course to be a 100% improvement over previous offerings. We based 
our enthusiasm on two observations: as compared to previous classes test results showed a much broader 
understanding of the programming process and the programming projects completed by all students were 
much more complex. In addition the programs tlu,m~elves w(,re better tit:ructured and documented. Both 
the course instructor and t.h(} s~uden~ agreed their ~he volume ~nd level of work were approprl~e for 
n college pr~parntory course. We believe ~he hand,=on computer experlene~ will prove va]unble a~ ~he~e 
~tudengB cheer college level progrnmmlng classes. In particular, students entering the Computer Technology 
curriculum of Purdue Ilntveralty at Fore Wayne will no longer have to overcome the poor programming practices 
that handicapped their predecessors. Some students will have the opportunity to enter our accelerated 
programming sequence. Even though we are pleased with the results, we acknowledge that there is much 
room for improvement. In the remainder of this section we share some of the problems encountered during 
the Implementation of this course. (living the students sufficient access to the computer laboratory 
was a constant problem. Students with heavy class loads and/or extra- curricular activities found themselves 
hard pressed during the day to enter anddebug programs. Several class periods were set aside to alleviate 
this problem. Still, with 26 students competing for four Apples II's, the average time per student seldom 
exceeded 15 minutes. This unfortunate situation necessarily diminished the complexity of some programming 
projects. Also, in order to provide extra laboratory time some course topics were abbreviated. The access 
problem was compounded by the m~rprlMng discovery that runny students did not know how to type! This 
not only Increased the time necessary to enter and modify preflrams but also caused undue frustration 
and discouragement--ewm among the brtl/hter students. In the future we are qtrongly recommending typing 
aa a prerequislte. We were severely limited in the choice of language. BASIC was selected simply because 
it was included with the Apple II system. Since our version of BASIC lacked nice control structures it 
was necessary to give the students a means to mimic them using REM and GOTO statements. Invariably, something 
was lost in the translation from algorithm to code, usually in the form of a misp]aced GOTO. Eventually 
we plan to obtain a mort, suitable language, such as Pascal, for the Apples. Early in ~he course we realized 
that we would h~w~ to fnmIllnr~ze the s~udent,~ wlth the Apple II D~k Oper~ting System. Several mlni- 
lab~ were devoted to learning the vnrlous monitor directives. Conslderablc class tlme was spent in this 
effort. Although time spent making the students feel comfortable wlth the operating system detracted 
from the development of programming skills per se, it did serve to better acquaint the students with 
some of the functional components common to all computer systems. In the same vein we taught the students 
the boot- strapping procedures and a subset of the file commands. Vl. FUTURE DIRECTIONS After our initial 
experience with thl,~* eourm~ we concluded that neither enough I~l;tterilll can b¢ cowrod nor enough 
programming oxperlonee g~itned in n t~$ngle course to allow a vliudent to enter an accelerated flrf~t,.year 
computer clip.. riculum. Ae a result we are refermat t ins the material for a two course sequence, The 
fir,it course wlll coilcentrttte on rlon,-tlrol~,l:amm[ll~ ~, top tc~i 168 such as binary arithmetic, 
boolean logic and computer components, and will familiarize the student with the Apple II microcomputer. 
The second course will focus on problem-solving, algo- rithmic design and programming, In order to accommodate 
estimated enrollments in tiles(, two courses the computer laboratory must be expanded. A preputial It4 
being ri,ndted to purclmm, fllx murv Apple I[ mlcrocomput(,rs and s(_,veral more prt.ters. W(, are confident 
that thu administration wll] treat this as n priority item. Vll SUMMARY Lack of guidelines for computer 
programming courses at the secondary level has placed the burden of curriculum development on largely 
inexperienced and ill-prepared teachers. This has resulted in poorly structured courses at the secondary 
level and has also adversely affected student performance in college level programming courses, A joint 
effort between members of the Computer Technology Department of Purdue University at Fort Wayne and 
the M;Jthematl('s Department of New Ilav(,n lligh S('luml W~lS und(,rl'¢~kon to develop ,'I collage pr(qmr;~tory 
computer programming (,ourm,. Tlu, suecem~ of thi~ course htm promoted addltlonnl effortt~ to expand 
the computer edu(.atlon cvrrlcu-lure at New llaw,n lligh Sch(ml, APPENDIX A. COURSEOUTI,INE T(}plc~ are 
not lluc(,u~arily covered in the order given. Soma toptc~ may be covered in parallel. I. 10% A. HISTORY 
OF coMPUTING B. INTRODUCTION TO APPLE'S SYSTEM COMMANDS C. DEFINITION OF A COM]'UTER D. I I)ENT I F 
[ CAT l ON OF MAJOR COMPUTI'IR SYSTEM COMPONENTS AND TIIE COMMUNICATION BETWEEN TllEM E. BRIEF [NTRODUCTION 
TO WIlAT AN ALCORIT|]M AND COMPUTER PROGRAM ARE F, OPERATION OF APPLE IN IMMEDIATE MODE VS. DEFERRED 
MODE Ii. 5% A. BINARY, OCTAL, AND IIEXADECIMAL ARITHMETIC B. DEFINING A BASIC PROGRAM C. READING AND 
INTERPRETING BASIC PROGRAMS D. EXECUTING CANNED PROGRAMS E. OVERVIEW OF BASIC STATEMENTS ill. 57 A, 
N)RE ON APPLE'S NY~TEM COMMANDS B, COMPUTEB FILEfl C, PROGRAM MODIFICATION D. DATA SET~ VS. INPUT STATEMENT 
 IV. 5% A. INTRODUCTION TO ITERATIVE REFINEMENT FOR PROBLEM SOLVING B. INTRODUCTON TO PSEUDOCODE C, 
ERROR MESSAGES AND THEIR MEANING D, INTRODUCTION TO PROGRAM DOCUMENTATION  V. 5Z A, DECISION AND ITERATION 
STRUCTURES B. ARITHMETIC PRECEDENCE C. LIBRARY FUNCTIONS  VI. 10% A. NESTED CONSTRUCTS B. MORE ON 
READ-DATA STATEMENTS C. TRACING  VII. 10% A. FOR-NEXT AND COUNTER CONTROLLED LOOPS B. MORE PSEUDOCODE 
 VllI. 10% A. INTRODUCTION TO ARRAYS (l- &#38; 2- I) I MEN S I ONAI,) B. DIM STATEMENT  IX. 102 A. 
MODULAR PRO(;RAM I)ESlCN B. MODUI,EI)IAGRAMS  C. GOSUB - RETURN  X. 25% A. INDEPENDENT STUDY OF -WITI{ 
LECTURES ON, PROGRAM DEBUCCING AND TESTING, SIMULATION, SOME BASIC SIiORT-HAND: DEF, ON...COTO, ON...COSUB, 
WELL WR]TTEN PROGRAMS. B. SEMESTER PROJECT  APPENDIX B: ~AMPLE MTNI=LAB OBJECTIVE: TO ¢~AIN EXPERIENCE 
WITH T|tE MOIHFI= CATION OF PROGRAMS BY INSERTING; NEW STATEMENTS, DELETING STATEMENTS, AND REPLACING 
STATEMENTS. I. KEY-IN TIlE FOLLOWING PGM AND RUN IT. i0 IIOME LIST TIlE PCM OUTPUT HERE: 20 LET A = 
7 30 LET B = 8 40 LET C = A + B 50 PRINT A   iTiiiii iiiiiiiiilfill 60 PRTNT B 70 PRINT C 80 END 
2, TYPE: LIST 3, TYPE; 75 PRINT TYPE: LTST OBSERVE THE DIFFERENCE BETWEEN Tills LISTINC AND TIlE ONE 
IN #I ABOVE. 169 4. TYPE: 35 LET C = 9 c~ TYPE: LIST # MAKE THE SAME KIND OF OBSERVATION AS YOU DID 
 STUDENT COUNT: IN #3 ABOVE. FAILURES: 5. TYPE: 40 TYPE: LIST PASSING: CO~ARE THIS LISTING TO THE 
PREVIOUS ONE DEAN'S LIST: 6. TYPE: 45 LET D = A + B + C TYPE: LIST Requirements: COMPARE TO PREVIOUS 
LISTING i. Turn-in a neat pseudocode algorithm 7. TYPE: 80 PRINT D TYPE: LIST 2. Turn-in your first 
final runs COMPARE TO PREVIOUS LISTING 3. Both in your algorithm and Basic code 8. TYPE: 90 END TYPE: 
LIST a. Only compute the student's average COMPARE TO PREVIOUS LISTING if he does not have a score 
of less than 40 on either grade. ANSWER THESE QUESTIONS: b. Use the INT function to round all i. HOW 
IS A PGM STMT DELETED? averages to the nearest whole number. 2. HOW IS A STMT INSERTED INTO A PGM? 
 c. Remember to print the messages as 3. HOW IS A STMT IN A PGM CHANGED OR REPLACED? indicated in the 
sample report. NOTE: THESE QUESTIONS PRESUME THAT A PGM ALREADY 4. Be sure to process an example for 
each IS RESIDENT IN PRIMARY STORAGE. possible case described in the problem. APPENDIX C 5. Process 
at least 20 students. The following programming project was given approximately mid-way into the semester. 
6. Get your source listing on one page of computer paper. Student's enrolled in Podunk University's 
Intro to Computers course must take two exams. BIBLIOGRAPHY If a student gets less than 40 on either 
e~am, he fails. If their average is less than 60, he [ACM79] "Report of the ACM Elementary and fails. 
An average of 60 through 90 is a~sin_~; Secondary Schools Subcommittee," an average above 90 is Dean's 
List. Evaluate D. Moursund, Chairman, (September each student in the course and then stop. No 1979). 
student has a student number less than i0 or greater than 99. [BOYD78] Boyd, D. R. and I. Chance: "Data 
 Processing Teacher Certification: Use the input statement to enter each A Recommendation," The Journal 
of student's I.D. number and two test scores. Data Education, (July 1978). A sample report might look 
like this: [CPT79] 1979-80 Computer Technology Curriculum, Department of Computer Technology, col. ii 
5 PODUNK UNIVERSITY Purdue University at Fort Wayne. col. 13 .... b GRADES REPORT col. I0 > CO>~UTER 
TECHNOLOGY [KING79] King, R. S., D. C. Rine, DuWayne D. col. 14 -. "~DEPARTMENT Furman and William A. 
Schaefer: "Competency in Computer Instruction o0 c~ in Illinois Public Schools," 4 A ~ Proceedings 
of lOth SIGCSE Techni- o o cal Symposium, (February 1979). STU. '1I ,1. ! I [POIR79] Poirot, J. L.: 
"Computer Education in GR #2 GRADE RESULTS NO. GR #i AVERAGE the Secondary School: Problems and Solutions," 
Proceedings of I0 39 52 NONE FAILING 10th SIGCSE Technical Symposium, (February 1979). Ii 62 30 NONE 
FAILING 12 60 80 70 PASSING 13 90 98 94 DEAN'S LIST [SCHN78] Schneider, G. M.: "The Introductory 14 
50 56 53 FAILING Programming Course in Computer Science--Ten Principles," Proceedings of 9th SIGCSE 
Technical Col. 2 Col. 8 Col. 14 Col. 19 Col. 28 170 [QUIG70] [WAGN76] Symposium, (February 1979). 
 Quigley, M. B.: "An In-Service Training Program," The Journal of of Data Education, (October 1970). 
 Wagner, G. E.: "Data Processing Teacher Training--A Modular Approach," The Journal of Data Education, 
(January 1976). 
			