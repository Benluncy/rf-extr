
 Maintaining multiple views in feature modeling Klaas Jan de Kraker, Maurice Dohmen and Willem F. Bronsvoort 
 Faculty of Technical Mathematics and Informatics Delft University of Technology Zuidplantsoen 4, NL-2628 
BZ Delft, The Netherlands Abstract A new feature modeling concept and its implementation are pre- sented. 
In the multiple-view modeling concept, a set of open fea- ture views of a product is maintained. The 
implementation does not rely on the existence of certain views, but instead is generic since generic 
view specifications are used. Views are maintained using feature conversion techniques, in- cluding constraint 
techniques. For adding a view to the set of open views, an open view function has been developed. This 
function uses the specified view properties, including its feature definitions. It derives a meaningful 
feature interpretation for the opened view. Geometric constraint solving is used to propagate feature 
param- eter changes between views, and a priority mechanism is used in case of conflicting constraints. 
In case of a conflict, a new incre- mental version of the open view function is invoked, which updates 
the feature model of the reopened view efficiently. Introduction Multiple-view feature modeling is the 
concept of having a product model that contains multiple views of a product. A view represents the way 
an engineer from a certain discipline looks at the product, and has a feature model that reflects this. 
A feature model consists of features that contain both geometric and functional information, the latter 
is expressed in constraints. For an introduction to feature modeling and a state-of-the-art description 
of its applications, see (Shah and Mantyhi 1995). Figure 1 depicts the feature models of two different 
views of our example product used throughout this paper. The design view fea- ture model (a) consists 
of a base block, a protrusion on two sides, a thru slot, and two thru slots. The manufacturing view feature 
model (b) consists of a stock, two steps, a thru slot and two thru holes. These feature models are meaningful 
feature interpretations for the views. The design view reflects the way the product has been designed 
with both additive and subtractive features, and the manufacturing view consists of one stock and only 
subtractive fea- tures that correspond to manufacturing operations. The multiple view feature modeling 
concept can be applied in concurrent engineering, particularly in designfor X (Huang 1996) where a view 
corresponds to a life-cycle activity. By maintaining (a) (b) Figure 1: Two views of one product. different 
views, and by allowing to alter the product from any view, the design can be optimized with respect to 
all life-cycle activities. For example, Hsu, Lee and Su (1993) generate redesign sugges- tions based 
on evaluation of an assembly plan. The main problems when maintaining a product model with multiple views 
are: establishing a feature model for a certain view, which is called opening a view, and propagating 
changes to the other views after editing a view. The first problem is how to find a good feature interpretation 
for that view. The second problem requires management of constraints from the different views. The basic 
idea of multiple view feature modeling has been pre- sented earlier (de Kraker, Dohmen and Bronsvoort 
199.5). Related work is reported by Brunetti, De Martino, Elter and Falcidieno (1996) who discuss ongoing 
work on a multiple-view feature repre- sentation. A major restriction is that it can be edited only from 
the design view. Other related work on experimental feature mapping techniques is summarized in (Shah 
and Mantyla 1995). In this paper we present a new way to generically maintain mul- tiple views, and particularly 
methods for opening a view and for propagating changes between views, which has been fully imple- mented. 
Section 2 elaborates the multiple-view feature modeling concept. Section 3 presents the way the product 
model is represented and maintained. Section 4 explains how a feature model for a view is obtained, and 
updated incrementally. Section 5 presents conclu- sions and future work. Multiple-view feature modeling 
An attractive concept in feature modeling for concurrent engineer- ing is the possibility to simultaneously 
have available different views on a product for different life cycle phases. Different views can be specified 
generically, and several views on a product model can be considered simultaneously. Therefore, a set 
of open views is main- tained. Each of these views has a feature model that can be edited to modify the 
product. All views are validated simultaneously using constraints. When a product model with one or more 
views exists, and an- other view is to be considered, for example to evaluate product properties from 
the corresponding life cycle phase, a function for opening the view determines a new, view-specitic feature 
model. It adds the newly opened view to the set of open views. The obtained feature model is geometrically 
consistent with the current product model, which means that is has equal geometry. The open function 
is general in the sense that it only uses the current product model and specified properties of the view, 
and does not use any a priori knowledge of relations between certain views, hence it does not rely on 
the existence of other views. The manufacturing view feature model of Figure 1 b has been derived using 
the open function. Editing can be done in one view, the edit view. Considered views are maintained using 
a new scheme that specifies allowed edit operations in the views. This scheme propagates allowed changes 
to the other views using constraint techniques, and an incremental version of the open view function. 
Newly used constraint tech- niques include conflict detection of constraints and a priority mech- anism. 
Reopening a view is efficiently done with a new incremental version of the open view function. We have 
argued in (de Kraker et al. 1995) that it should be possible to edit the product model from any view. 
In some views, however, it may be undesirable to make substantial modifications to the prod-uct. For 
example, in a manufacturing view, it is undesired to make modifications to the product that destroy certain 
product proper- ties intentionally created in a design view. However, it is desired to allow certain 
modifications to the product that accomplish that the product can be manufactured cheaper. For that purpose, 
three types of edit operations are distinguished: changing a feature pa- rameter, adding a feature instance, 
and removing a feature instance. For each feature class, it can be specified which edit operations are 
allowed. An allowed edit operation is propagated from the edit view to the other views using constraint 
techniques, To resolve conflicts, each view is assigned a priority that is used to decide whether the 
edit operation will be carried out and propagated. When a feature parameter is changed in the edit view, 
this change is tried to be propagated to the other views. If propagation is suc- cessful, the feature 
models in the other views are adjusted accord- ingly, and thus the edit view determines the feature parameter 
val- ues in the other views, In the propagation process, one of three situations occurs: I. No conflicts 
are caused, and the parameter change is propa- gated to the other views using geometric constraints. 
2. The parameter change in the edit view causes a conflict with a constraint in another view. 3. The 
parameter change in the edit view causes a conflict in the sense that another view gets a different topology. 
 An example of situation I is shown in Figure 2. In the design view, one of the dimensions of one protrusion 
is changed. No con- flicts occur in the constraints, thus the change in the design view is propagated 
to the manufacturing view. In the manufacturing view, a step parameter is adjusted automatically. Alternatively, 
if the step parameter in the manufacturing view is edited, this change is propa- gated to the design 
view by automatically adjusting the correspond- ing protrusion parameter. (b) Figure 2: Propagate parameter 
change: no conflict. Both conflict situations (2 and 3) are detected using constraints. They are resolved 
by reopening the view that conflicts with the edit view, which is either successful or not, and by using 
the priorities specified for the views. If reopening is successful, and thus a feature model for the 
re- opened view that is consistent with the edit view has been obtained, the parameter change has successfully 
been propagated. Reopening may also be unsuccessful. In this case, a valid feature model for the reopened 
view does not exist. For a manufacturing view, for exam- ple, this means that the product cannot be manufactured 
with the given feature library. In this case, another type of manufacturing view may be tried. If reopening 
a view is not successful, and that view is of a higher priority than the edit view, then the parameter 
change is canceled. In this way, an allowed edit operation in a lower-priority view, for example a manufacturing 
view, can be blocked by a higher- priority view, for example a design view. If the unsuccessfully re- 
opened view is of a lower priority than the edit view, then the con- Rict is presented to the users of 
the conflicting views. The param- eter change may be canceled, keeping the same set of open views, or 
it may be confirmed, after which the parameter change is carried out and the conflicting view is discarded 
until it is reopened explic- itly by a user. In this way, views that can no longer be maintained are 
discarded, because there is no feature model that represents the product. Two conflict examples are shown, 
in which the conflicting view can be successfully reopened. An example of situation 2 is shown in Figure 
3. If the width of the slot in the design view is decreased, this may cause a conflict with a minimum 
slot width constraint in the manufacturing view. When the manufacturing view is reopened, the slot is 
replaced by a different type of slot that is manufactured differently. An example of situation 3 is shown 
in Figure 4. If the posi- tion of a protrusion in the design view is changed as depicted, the manufacturing 
view is reopened. This introduces a new step in the manufacturing view. If a feature is added or deleted 
in one view, this always causes a conflict, since the product topology is changed from the edit view 
and the other views still represent the original product topology. This edit operation is propagated 
to the other views in the same way as in the conflict situations above. An example is shown in Figure 
5. If in the design view, a protrusion is added as depicted, (h) Figure 3: Propagate parameter change: 
conflicting constraints. (h) Figure 4: Propagate parameter change: conflicting topology. the manufacturing 
view is reopened. The slot is replaced by two smaller slots, and the two holes have been replaced by 
four less deep holes. Product model representation The multiple-view modeling concept has been implemented 
in our feature modeling system SPIFF. In SPIFF, view and feature class specifications are made in an 
object oriented programming lan- guage. SPIFF uses these specifications to generate modeling com- mands, 
which are interpreted. The SPIFF graphical user interface consists of several windows: a central main 
window, and for each view a control panel, camera windows for visualizing the geometry, and a window 
for displaying the view s feature graph, see Figure 6. Since declarative feature modeling is performed, 
the represen- tation of features consists of two different levels: specification and maintenance (de 
Kraker et al. 1995). At the specification level, view and feature classes and their properties are specified. 
Properties of a view that must be specified include: its name, feature library, allowed edit operations, 
and specifications for the reopen function. The view s name and feature library are speci- fied in its 
class definition. Allowed edit operations are specified by declaring for each feature class whether instances 
may be created and/or removed, and whether their parameters may be changed. The reopen specifications 
consist of feature removal criteria and the strategy, see also Section 4. For reopening a view, it may 
be (a) (h) Figure 5: Propagate feature addition. necessary to first remove some feature instances. Therefore, 
cri- teria are specified that declare which feature instances must be re- moved. After removing several 
instances, new feature instances will be created. For this, the view s strategy is used. A strategy prescribes 
the feature model structure, which is the model s hierar- chical organization. At the maintenance level, 
several managers maintain the prod- uct model. The view instances are maintained by the View Man- ager. 
The View Manager communicates with the Feature Geometry Manager and the Constraint Manager. The latter 
two store feature and constraint instances, and maintain validity of the feature mod- els. The Feature 
Geometry Manager maintains a cellular model, which represents the product geometry. A cellular data structure 
has been suggested by Pratt (1988); we have added data for multi- ple views. Cells in the cellular model 
are volumetric and represent all feature intersections; they can have overlapping boundaries, but they 
cannot have overlapping volumes. Because they reflect all fea- ture intersections, they can have any 
shape. With each cell, for each view, it is stored to which features the cell belongs. This informa- 
tion is stored with the cell volume, and all its faces, in an owner list for each view. An owner list 
is thus an ordered list of feature ele- ment names. The nature of a cell with respect to a view, is defined 
as the nature of the last feature in the cell s volume owner list. A cell is consistent if it has the 
same nature for each view. All views are consistent if all cells are consistent. For information on how 
the Cellular Model is created and maintained, see (de Kraker, Dohmen and Bronsvoort 1997a). Figure 7 
shows cellular model instances with owner lists for the cell volumes. Additive cells are depicted shaded; 
subtractive cells are transparent. Figure 7a depicts the cellular model with respect to the design view. 
Figures 7b and c depict two stages of the cellular model with respect to the manufacturing view during 
opening of the manufacturing view. In Figure 7b only a stock, two steps, and a slot have been added. 
The two views are not yet consistent, because some (cylindrical) cells have different natures. After 
also two holes have been added in the manufacturing view, the views have been made consistent, see Figure 
7c. When a view is (re)opened, feature instances are identified au- tomatically, see Section 4. The geometry 
of a feature is identified in the cellular model using the feature s shape type and validation constraints. 
Feature validation constraints are constraints that are embed- ded in the feature class definition and 
declare validity conditions for feature instances. They act on feature topology elements, or feature 
elements, and on feature parameters. Figure 6: The SPIFF graphical user interface. (b) Cc) Figure 7: 
Cellular model with owner lists The Constraint Manager stores and maintains all constraints, see also 
(Dohmen, de Kraker and Bronsvoort 1996). All constraint instances are stored in a constraint graph, containing 
subgraphs for each view. To maintain the constraint graph, constraints that specify geometric properties 
of feature elements are mapped onto a primitive geometric-constraint graph that is handled by a dedicated 
geometric constraint solver. Similarly, algebraic constraints are handled by a dedicated algebraic-constraint 
solver. After the prim- itive algebraic graph has been solved, the constraint graph main- tained by the 
Constraint Manager is updated. The primitive geo- metric constraint graph is updated accordingly and 
then solved. In this way, the interdependence of the solvers is handled by the Con- straint Manager. 
while the primitive graphs are solved efficiently using dedicated solvers. To propagate parameter changes 
from the edit view to the other views, the constraint subgraphs of different views are connected by inter-view 
constraints called links. A link restricts degrees of freedom of a feature element of an other view with 
respect to a feature element of the edit view, and is thus uni-directional. In this way, each of the 
other views is linked to the edit view. In each of the other views, the feature parameters are determined 
from the edit view, using the links with the edit view and the geometric constraints in the view. Different 
views will have feature elements that overlap geomet- rically. Because the only relationship between 
consistent views is that they represent the same geometry, feature elements are linked only if they overlap 
and are at least partly on the product boundary. For an example, Figure 8 depicts a link that is used 
to propagate the parameter change of Figure 2. Among other feature elements, the step face indicated 
is linked to the protrusion face indicated. A link constraint for two planar faces specifies coplanarity, 
with equal or opposite orientation for the face normals, depending on the nature of the features. Figure 
8: Link between two views. Links are automatically created by the modeling system, after a view has 
been chosen for editing. For this, the cellular model faces are traversed, and the natures of adjacent 
cells are used to find the product boundary faces. The feature elements in the owner lists of the different 
views stored with these faces, are the feature ele- ments that are linked. Link constraints are added 
to the constraint graph, and they are mapped onto the primitive geometric constraint graph, which contains 
the mapping of the geometric constraints of all views. When a parameter is changed in the edit view, 
the primi- tive geometric graph is solved. Then, the geometric constraint vari- ables are used to determine 
the new feature parameter values for all other views. These values are then checked against the other 
vali- dation constraints; if a conflict is detected, see also Section 2, the view is reopened. The View 
Manager stores the set of open views. For (re)opening a view, the View Manager uses the reopen function. 
This function first removes several features according to the specified removal criteria. After that, 
it adds new feature instances using the specified strategy, until the view s feature model is geometrically 
consistent with the edit view, or until it is detected that consistency cannot be reached. The reopen 
function is elaborated in the next section. 4 Reopening a view incrementally When a view on an existing 
product model must be created, a mean- ingful feature model must be created that is consistent with the 
product geometry. A method for such opening of a view has been described in (de Kraker, Dohmen and Bronsvoort 
1997b). This method is summarized here, and an extension is presented for in- crementally updating, or 
reopening, a view. Important properties of the method are that it is generic for different views and 
features, and that it can deal with feature intersections. The first property is achieved by using generic 
view and feature specifications. The sec- ond property is achieved by deriving parameter values from 
faces in the Cellular Model, rather than using topological adjacency re- lations, and creating a feature 
shape with these parameters. For opening a view, each view has a strategy, which specifies the feature 
model structure. The structure of a feature model is determined by the features in the model, particularly 
their instan- tiation order and natures. A strategy thus ensures that the feature model built is a good 
feature interpretation for that view. The strategy prescribes feature classes, of which instances are 
to be identified in the product geometry. Identification is successful if an instance is found. Feature 
classes are prescribed and identi- fied in a certain order, which is repeated until the view is consistent. 
This implies specification of the structure of the feature model that will be found. Strategies of different 
views that have the same fea- ture classes, may prescribe these classes in different orders. By first 
identifying some additive features, then some subtractive features, and then maybe some additive features 
again, a meaningful feature model for a design view is created. By first identifying a stock, and then 
only subtractive features, a meaningful feature model for a manufacturing view is created. This is how 
our example part is structured, see Figure 1. The design view consists of several in- tersecting additive 
and subtractive features, and the manufacturing view consists of a stock and several subtractive features. 
After successful identification of a feature, the same feature class is tried again. This ensures that 
no occurrences are missed. Currently, a strategy uses generic rules of its view that are reflected in 
the order in which the feature classes are prescribed. To further tune a strategy, other view-specific 
rules can be added, for exam- ple rules on the instance level such as Vandenbrande and Requicha (1994) 
use. Rules on the generic level can use the outcome of pre- vious identifications, for example to skip 
certain feature classes. When a feature class has been prescribed by the strategy, an instance of it 
is sought. A feature s class specification declares its validation constraints and its shape type. We 
use these validation constraints for identifying an instance in the Cellular Model. When a feature instance 
must be identified, in fact a shape in- stance that satisfies the vahdation constraints must be identified. 
Often, more than one such shape can be found. We choose the largest feature shape that satisfies the 
feature s validation constraints. This minimizes the number of features, resulting in a meaningful feature 
interpretation. We use the attach and semantic constraints on generic feature faces for identifying a 
shape instance. Attach constraints are used for positioning a feature. An attach constraint makes a feature 
face coplanar with a model face. A feature is attached with one or more faces, and its other faces have 
semantic constraints declaring they must at least be partly on the product boundary. The generic shape 
faces, which are known since the shape type is known, are matched with selected Cellular Model faces. 
When a feature is instantiated by a user, it is attached to the boundary of the current feature model. 
Therefore, attach face in- (b) Cc) Figure 9: Candidate faces and shape. stances are sought on the boundary 
of the feature model of the view that is currently being opened, which is not yet consistent. Since the 
other faces have the mentioned semantic constraints, they are sought on the product boundary. For both 
face types, a list of can- didates is generated by querying the Cellular Model. Since incon- sistent 
cells indicate areas where features must still be identified, candidates are selected from faces of such 
inconsistent cells. These candidates are matched with the generic shape faces. For this, ge- ometric 
tests are used such as parallelism, perpendicularity, and signed distance. If a match is successful, 
the shape parameter val- ues are derived from the candidate faces, and a shape instance with those parameters 
is created. This shape is added to a list of candi- date shapes. The candidate shapes are checked against 
the remain- ing feature validation constraints, such as dimension and semantic volume constraints. The 
largest candidate shape that satisfies these constraints, is selected as the feature s shape. If no candidate 
shape satisfies the validation constraints, identification of the feature fails, and the strategy prescribes 
the next feature class. In this way, a generic scheme is provided for identifying any type of feature 
with a certain shape. Figure 9 depicts how candidate shapes are created for a slot feature with three 
attach and three other faces. For a slot, faces without straight edges can be discarded. Boundary faces 
adjacent to inconsistent cells are candidate faces. Candidate attach faces are boundary faces in the 
currently opened view, see Figure 9a. Candi- date other faces are boundary faces in the edit view, see 
Figure 9b. These candidate faces are matched with the generic shape faces. In this case, only one shape 
parametrization is derived from these faces, which is depicted in Figure 9c. This shape satisfies all 
slot validation constraints, including specified allowed feature intersec- tions. If an instance has 
been found, its shape is inserted into the Cel- lular Model, which is used to check view consistency 
by comparing all cell natures for the different views. Of course a feature interpretation cannot be found 
if one does not exist. However, if feature interpretations do exist, the presented method will find a 
meaningful feature interpretation. Since opening a view is a computationally expensive operation, and 
since it must often be invoked for maintaining different views, an incremental version of the open view 
function has been developed. This reopen function can deal with both additive and subtractive features. 
It incrementally updates a view by first removing several features, and then adding new features. Laakko 
and Mantyla (1993) have developed a modeling method that uses incremental feature recognition. This method 
can be used for creating a feature model within the design view; it has not been developed for deriving 
feature models for different views. It is ca- pable of updating a feature model after a previously recognized 
solid model has been further edited by means of solid-modeling operations. Only the edited region is 
recognized, which enforces a certain feature interpretation. In incremental feature recognition, the 
responsibility for en- forcing a desired feature interpretation is with the user. He en- forces an interpretation 
by indicating the moment of interpretation. For opening a view, we specify in the view s strategy how 
to obtain a meaningful feature interpretation. A meaningful interpretation is ensured in our incremental-update 
version by first removing several features before adding new ones. In their method for incrementally 
updating a manufacturing view from a design view, Han and Requicha (1994) have regarded only features 
that are subtractive. If in the design view a subtrac- tive feature is either added or deleted, in the 
manufacturing view this corresponds to adding or deleting one or more subtractive fea- tures. They do 
not support additive design features. If it is allowed in the design view to add additive features as 
well, then it is not sufficient to add subtractive features in the man- ufacturing view. In that case, 
since the manufacturing view does not have any additive features, one or more subtractive features must 
be removed. See also Figure 10 where the large slot is removed after which two smaller ones are added. 
(a) (b) Figure 10: Update manufacturing view after adding an additive de- sign feature. Even if it is 
possible to update a view by only adding features, it is not always advisable to do so. Often a better 
feature interpreta- tion, with less feature fragmentation, can be found by first remov- ing several features 
before adding new ones. After adding a feature in one view, updating another view by only adding features, 
may lead to a suboptimal solution with feature fragmentation. For ex- ample, if a designer added a second 
slot instead of a protrusion, the manufacturing view may be updated by also adding a second slot. However, 
if the manufacturing view has a T-shaped slot class, it may be cheaper to have a block with a T-slot. 
This solution could be obtained by first removing the manufacturing slot, and reinter- preting the area 
as a T-slot, see Figure 11. (a) (b) Figure 11: Update manufacturing view after adding a subtractive 
design feature. Therefore, the following approach has been taken. For reopening a view, first several 
features are removed, and then several features are added. To decide which features must be removed, 
several cri- teria can be used. Two criteria that appeared very useful for most feature classes are: 
(1) the feature intersects with a cell in the cellu- lar model that is inconsistent with respect to the 
reopened view, (2) and the feature was attached to such an intersecting feature. Base features, such 
as a stock in a manufacturing view, are considered as constants and are therefore never removed. Each 
feature class has a member function that uses these conditions to decide whether an instance of it must 
be removed. After removing the features that meet the criteria, an intermediate feature model has been 
created. The open function is then invoked with this model. For example, if in the design view a protrusion 
is added as in Figure lOa, the manufacturing feature model of Figure lob is ob- tained in the following 
way. First the features that intersect with the inconsistent protrusion cell are removed, see Figure 
12a in which the slot and holes have been removed. The open view function is then invoked with this inconsistent 
model. First two smaller slots and then four holes are identified, see Figure 12b. After this, a con- 
sistent feature model for the manufacturing view has been obtained incrementally. An important property 
of the incremental open view function is that the same feature model is obtained as when the entire model 
would be reinterpreted. Furthermore, compared to the old open view function, the incremental version 
is more efficient, because only areas of the model are reinterpreted that need to be reinter- preted. 
(al (b) Figure 12: Update manufacturing view incrementally. 5 Conclusions and future work A concept 
and implementation of methods for maintaining multiple views in feature modeling have been presented. 
The implementation is generic in the sense that it uses view specifications, rather than that it can 
deal with predefined views only. It uses feature validation techniques for maintaining feature models 
in the different views, and constraint and feature conversion techniques for maintaining the set of open 
views. For propagating feature model changes, constraint techniques are used. For each view, it is specified 
which edit operations are allowed. Allowed edit operations are tried to be propagated to the other views 
by solving geometric constraints. These edit operations may be in conflict with other views, which is 
detected using con- straints, and a priority mechanism is used to decide which changes are carried out. 
The priority mechanism provides a useful way to deal with inter-view conflicts. A generic method for 
opening a view has been discussed. It is more general than existing methods, and can be applied for dif- 
ferent views. For reopening a view, an incremental version of the original opening method has been presented. 
This new method effi- ciently propagates feature model topology changes to the reopened view. Future 
work consists of developing techniques for how a meaning- ful feature interpretation can be valued. A 
related issue is that the current method to get new feature interpretations is quite straight- forward; 
it needs further improvement in the future. Other future work consists of extending the system with more 
application specific features, such as assembly features. Further- more, current work on feature interaction 
management and feature visualization will be integrated. Acknowledgments Klaas Jan de Kraker s work is 
supported by the Netherlands Com- puter Science Research Foundation (SION), with financial support from 
the Netherlands Organization for Scientific Research (NW(I). References Brunetti, G., De Martino, T., 
Elter, H. and Falcidieno, B. (1996). Modeling shape and semantics through an intermedi- ate model, in 
D. Roller (ed.), Proceedings 29th International Symposium on Automotive Technology &#38; Automation, 
pp. 71- 81. Dohmen, M., de Kraker, K. J. and Bronsvoort, W. F. (1996). Fea- ture validation in a multiple-view 
modeling system, in J. M. McCarthy (ed.), CD-ROM Proceedings of the ASME 1996 Design Engineering Technical 
Conferences and Computers in Engineering Conference. Han, J. and Requicha, A. A. G. (1994). Incremental 
recognition of machining features, Proceedings of the I994 ASME Comput- ers in Engineering Conference, 
pp. 143- 149. Hsu, W., Lee, C. S. G. and Su, S. F. (1993). Feedback ap- proach to design for assembly 
by evaluation of assembly plan, Computer-Aided Design 25(7): 39.5-409. Huang, G. Q. (1996). Design for 
X; Concurrent engineering im-peratives, Chapman &#38; Hall. de Kraker, K. J., Dohmen, M. and Bronsvoort, 
W. F. (1995). Multiple-way feature conversion to support concurrent engi- neering, in C. Hoffmann and 
J. Rossignac (eds), Solid Mod- eling 95, Third Symposium on Solid Modeling and Applica- tions, ACM Press, 
pp. 105-l 14. de Kraker, K. J., Dohmen, M. and Bronsvoort, W. F. (1997a). Fea- ture validation and conversion, 
in D. Roller and P Brunet (eds),CAD Systems Development, Springer-Verlag, pp. 121- 142. de Kraker, K. 
J., Dohmen, M. and Bronsvoort, W. F. (1997b). Multiple-way feature conversion - opening a view, in M. 
Pratt, R. D. Sriram and M. J. Wozny (eds), Product Modelling for Computer Integrated Design and Manufacture, 
Chapman &#38; Hall, pp. 203-212. Laakko, T. and Mantyla, M. (1993). Feature modelling by incremental 
feature recognition, Computer-Aided Design 25(8): 479-492. Pratt, M. J. (1988). Synthesis of an optimal 
approach to form fea- ture modelling, in V. A. Tipnis and E. M. Patton (eds), Pro-ceedings of the 1988 
ASME International Computers in Engi- neering Conference and Exhibition, Vol. 1, pp. 263-274. Shah, J. 
J. and Mantyla, M. (1995). Parametric and feature-based CAD/CAM; concepts, techniques, and applications, 
Wiley, New York. Vandenbrande, J. H. and Requicha, A. A. G. (1994). Geometric computation for the recognition 
of spatially interacting ma- chining features, in J. J. Shah, M. Mlntyki and D. S. Nau (eds),Advances 
in feature based manufacturing, Elsevier Sci- ence B.V., Amsterdam, pp. 83-106. 
			