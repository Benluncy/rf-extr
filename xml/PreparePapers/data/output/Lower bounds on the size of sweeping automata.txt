
 Lower Bounds on the Size of Sweeping Automata Michael Sipser * Computer Science Division University 
of California Berkeley, California 94720 1. Introduction Establishing good lower bounds on the complexity 
of languages is an important area of current research in the theory of computation. However, despite 
much effort, funda- mental questions such as P =? NP and L =? NL remain open. To resolve these questions 
it may be necessary to develop a deep combinatorial understanding of polynomial time or log space computations, 
possibly a formidable task. One avenue for approaching these problems is to study weaker models of computation 
for which the analogous prob- lems may be easier to settle, perhaps yielding insight into the original 
problems. Sakoda and Sipser [3] raise the following question about finite automata: Is there a polynomial 
p, such that every n-state 2nfa (two-way nondeterministic finite automaton) has an equivalent p(n)-state 
2dfa? They conjecture a negative answer to this. in this paper we take a step toward proving this conjecture 
by showing that 2nfa are exponentially more succinct than 2dfa of a certain restricted form. Call a 2dfa 
a sweeping automaton if it does not change its head direction except at the ends of the input tape. Thus, 
its head motions consist of a series of one way sweeps back and forth across the input. Our main result 
is that there are languages which can be accepted by an n-state lnfa yet which require a 2n-state sweeping 
automaton. A number of other researchers have compared the suc-cinctness of various models of finite 
automata. Some of the earliest such results were obtained by Meyer and Fischer [1] who used information 
counting arguments to derive lower bounds. More recently, Schmidt [2] has compared nondeter- ministic, 
unambiguous nondeterministic, and deterministic one-way finite automata. He introduced the important 
idea of associating states with vectors over the field GF(2); this tech- nique is also among those used 
he~'e. Besides presenting the above open question, Sakoda and Sipser introduced the com- plete languages 
B n which play a role in our lower bound proof. Berman and Lingas [4] consider this same question and 
prove a relationship between a variant of it and the L = ? NL question. 2. Sweeping Automata DEFINITION: 
A sweeping automaton (sa) is a two-way deter- ministic finite automaton which can halt or change the 
direc- tion of its head motion only at the ends of its input tape.  lit endmarkeoinput tape motion 
of tape head accept ~ or reject Supported by NSF grant MCS75-21760-A01 Presented at the Eleventh Annual 
ACM Symposium on and an IBM Graduate Fellowship. Theory of Computing, May 1979. 360 &#38;#169; 1979 
ACM 0-89791-003-6/79/0400-360 $00.75 See page ii It is easy to see that sweeping automata can be exponen- 
tially more succinct than ldfa, e.g. {x#x]xe{O, 1}"} can be accepted by an O(n) state sa, yet requires 
a 2" state ldfa. It is not known whether general 2dfa are exponentially more succinct than sa, though 
for certain languages they appear to be so. Nevertheless, sweeping automata can behave cleverly and accept 
languages using surprisingly few states. For exam- ple, let K,, be the set of strings which have two 
l's separated by n places, i.e. K,, = (0+1)*1(0+1)"1(0+l)*. Clearly K,, can be accepted by an O(n)-state 
2dfa and at first glance seems to require an exponentially large sweeping automaton. Yet, there is an 
O(n) state sweeping automaton accepting K,,. 3. Main Result THEOREM: For all n there is a language B,, 
which is accepted by an n-state lnfa yet which is not accepted by any sweeping automata with fewer than 
2" states. It is interesting to note that, by the subset construction, there is a 2n-state ldfa accepting 
B n and thus this theorem is optimal. In fact, this means that sometimes the ability of the sweeping 
automaton to move back and forth does not enable it to save even a single state. The language B, is defined 
in [3] and we briefly describe it here. The symbols of its alphabet, Z,,, are graphs with two columns 
of n nodes. Arcs are drawn only between left nodes and right nodes. A sequence of such symbols forms 
a string by identifying left and right nodes of adjacent members of the sequence. A string is in B, if 
there is a path connecting a leftmost node with a rightmost node. oo O O O O O O O O Some members of 
Z 4. 0 .. ..,-" .. 0 , 0 0 . ' ". ., . . 0 O O " "". O." O A string in B 4. The following automata 
model plays a central role in the proof of the main theorem: DEFINITION: A parallel finite automaton 
P is a collection of ldfa {A 1 ..... Ak} called components and a set F_c_ Qi×  XQk×QlX .  XQk where 
Qi is the state set of A i. A string s is accepted by P if the tuple <Al(S) ..... A~.(s),At(s r) ..... 
Ak(S r) > is a member of F, where Ai(s) is the state reached by running A i on s and where s r is the 
reverse of s. The computation of P on s can be viewed as follows: A I : > ! Ak: > A 1 : <- Ak: < LEMMA 
1: For any language L, if there is an k-state sweeping automaton accepting L then there is a parallel 
automaton accepting L whose components all have k states. The proof of this is fairly simple and we defer 
it to the end of this section. LEMMA .2: If a parallel automaton accepts B n then one of its components 
has at least 2"- 1 states. This lemma alone is an interesting theorem about paral- lel computation. It 
says that accepting B n is a problem which in some sense cannot be subdivided into significantly easier 
problems. Briefly, the proof of this lemma proceeds by isolating one of the components, called the "victim", 
based upon its ability to distinguish certain strings in B, from one particular string out of B,. Then, 
using this property of the victim, we show that it must have 2 n- 1 states. First, some notation. The 
symbols _c and C mean subset and proper subset respectively, and ISI means the car- dinality of set S. 
If q is a state of a ldfa then q(s) denotes the state reached by starting at state q and applying input 
s. For S a set of strings and R a set of states let R(S) be {q(s)lqeR and s¢S}. Let symbolxin Z, be the 
complete bipartite graph on 2n nodes. DEFINITION: A string in Z, is live if it is in B,. Otherwise it 
is dead. DEFINITION: Let A be a ldfa with state set Q. A live string g is A-generic if [ Q (g) I ~< I 
Q (t) I for any live string t extending g. Say g is k-generic if it is A-generic for every ldfa A with 
.~ k states. 361 LE~MA: Every live extension of an A-generic string is A- generic. Hence it is clear 
that k-generic strings exist for every k. Let P be a parallel automaton accepting B,. To simplify matters 
a bit, let us first assume that the components of P only read the input and not the reverse of the input. 
Let Q1 ..... Qt be the state sets of the components and let Q be the (disjoint) union of the Q~. Let 
k be the size of the largest Qi. Our goal is to prove that k/>2"-1. Choose g to be a k-generic string 
that ends in an x, and let/~ = Q (g). Say a block is any string that has g as a suffix. We begin by establishing 
the following two facts about/~. 1) If s is a live block then R (s) =/~. 2) If s is a dead block then/~ 
(s) c/~. The first fact follows purely from the properties of gen- eric strings since by definition 
Q(g) =R and thus .R (s) c for any block s. Yet, if .R(s)CR then IO(gs)l < [0(g)l contradicting the genericity 
of g. The second fact depends upon the fact that P accepts B,. Again we know that .i~ (s) ~ .R. If, however, 
R (s) =.R then s induces a permutation on /~ and consequently for some i > 0, s' induces the identity 
permutation on R. This is bad for P since the dead string s i is now "invisible". In other words, both 
the live string g and the dead string gs ~induce the same mapping on Q and are therefore indistinguishable 
to P, a contradiction, Thus, for every dead block s, there is a state qs ~ .1~ - .R (s). We say that 
s avoids qs. We now construct a particular block d which is dead in a complex way. Write down 2" columns 
of n nodes, numbered from 0 to 2"-1. In column i', circle the nodes corresponding to the binary representation 
of i and draw in arcs connecting all circled nodes to the right end of the string and all uncir- cled 
nodes to the left end. The block d is obtained by adding the string xg to the right end of this string. 
The special property of d that we will use is that, even though it is dead, it becomes live if any substring 
between columns 0 and 2"-1 is removed. This is true because for i < j there is an uncircled node in the 
i 'h column whose corresponding node in the j,h column is circled. So if column i is directly connected 
to column j a live path through that node is created. r 3 "~f "M , 0 1 2 3 4 5 Since d is a dead block, 
we know that d avoids some state qd, i.e. qa ~ R -1~ (d). The component of P which con- tains this state 
is called "the victim". Let Q be the state set of the victim and let R = Q(g). R inherits certain properties 
of /~, namely that R(s)=R for any live block s and that qa~ R- R (d). Intuitively speaking, this means 
that the vic- tim has the difficult task of distinguishing in some sense all possible live blocks from 
the complicated dead block d. We will show that this requires at least 2"- 1 states. Let r i be the prefix 
of d of length i for 0 ~< i ~< 2 n- 1 and let d i be the remainder. Recall that the block rid j is live 
if i <j. Let R i -= R (ri). Note that for any i and j, Ri(d-i)=R (rid/) and that Ri(d i) =R(d). Since 
R =R(s) for any live block s and qd ¢ R (d) we obtain: 3) R =Ri(d j) for <j 4) qd~ Ri(di) With every 
state q in Q we associate a vector ~'=(Co, C 1 ..... c2,,_ 1) where c it{O,1} and c i =l iff q (di) = 
qa. For every S c Q we associate a vector q~S Addition is over the field of characteristic two, i.e. 
 1 +1 =0. Even though we have little a priori knowledge about the vectors q'i, we do have a lot of information 
about the vectors Ri. Firstly, since qaCRi(di) we know that no state in Ri maps to qd under di. Consequently 
the i th coordinate of Ri is 0. Secondly, since qaER =Ri(d-i) for i<j and since IRil = IR I for all i 
< 2"- 1 we know that exactly one state in Ri maps to qd under dj. Consequently the fh coordinate of R'i 
is l for i < j. d 3 ............................ h  , 9 [I I J 6 7 The block d for n = 3. 362 This 
information is represented below. R0 = (0,1,1,1, . ,1) R1 = (?,0,1,1, . ,1) Rz = (?,?,0,1, -. ,1) ,0) 
 t~2,,_ 1 = (?,?,?,?, It is easy to see that the above vectors, except for /~2"-1' are linearly independent 
and hence the span of the Ri is a vector space of dimension at least 2"- 1. However, since the Rj are 
linear combinations of the qi, the ~ span at least the same space and thus there must be at least 2"-1 
of them. Therefore the victim has at least 2 n- 1 states. [] Extending this proof to the case where the 
components of the parallel automaton also read the reverse of the input is not difficult. In place of 
g use a k-generic string ,~ =xggrx whose reverse is also k-generic. Redefine blocks to be strings which 
both begin and end with g. Instead of d use the block ,~ which begins and ends with ,~. Since the parallel 
automaton must be able to distinguish the live string ,~ from the dead strings ~,~'~, i>0 we show that 
It(s)=R(s r) =R for any live block s and that either t~ [d) C R or ./~ [dr)psbsetR. Using this we again 
isolate a victim, and the remainder of the proof proceeds as before. Proof of lemma 1: Let S be the k-state 
sweeping auto- maton accepting language L. Let qi be the starting state of S. Define a parallel automaton 
P with components A 1 .... ,A k as follows. Each A~ is an exact copy of the state set and tran- sition 
function of S except that its starting state is altered to be qi. We show that for any input string t, 
if we run each A~ on both t and t r the we can then reconstruct the computation of S on t, A tuple < 
r 1 ..... t'k,l] ..... / k > is in Fif there is a sequence i I ..... i m such that: r I ~ qi I lil = 
qi z ri2 ~ qi 3 li3 ~ qi 4 t o and q~,,,is an accept state of S. The sequence of states qh ..... q~,, 
corresponds to the states entered by S at the ends of the input tape. Clearly, such a sequence exists 
iff S accepts t. [] Actually, we need a slightly stronger version of this lemma for the main theorem. 
If a 2"- 1 state sweeping auto- maton S accepts Bn then in fact there is a parallel automaton whose components 
have 2"-2 states and which accepts B,. This depends upon the fact that if S is really a sweeping auto- 
maton and not a ldfa then it must have at least one state which moves left on all input symbols and one 
state which moves right on all input symbols. We omit the details. COROLLARY: Any series automaton [3] 
accepting B, must have 2 n states. This settles an open question about a particular machine model presented 
in [3]. 4. A Relationship With LOGSPACE Berman and Lingas [4] prove the following theorem, relating 
two-way finite automata succinctness with the L = ? NL question. THEOREM: If L = NL then for some polynomial 
p and for all integers m and k-state 2nfa A, there is a p(mk)-state 2dfa accepting a subset of the language 
of A including all such strings of length ~ m. The proof constructs the desired 2dfa from a particular 
deterministic log space Turing machine. Define B,, m to be the set of strings of length ~< m in B,. Modifying 
the Berman-Lingas construction yields the fol- lowing result about sweeping automata: THEOREM: If L = 
NL then there is a polynomial p such that, for every n, there is a p (n)-state sweeping automaton accept- 
ing B,,,. Thus one possible way o1' provirJg L ~ NL would be to show thai n() SLIch polynonnial p exists. 
Unfortunately, this is not a conNCClLICI1CC of the main thcorem, since its proof requires stiing~ ~ho~e 
lenglh are 2 °~" h,.~ .) However. some of the techniques used to prove that theorem may be applica- ble 
here. 363 Ackno~ Icduclq/ctlls I am grateful to many of my fellow graduate students at Berkeley for 
helping me to crystalize these ideas. The languages K, and their small sweeping acceptors are due to 
Alon Itai and Barbara Simons. I also wish to thank Dexter Kozen and Albert Meyer for pointing out references 
[2] and [4]. I am especially indebted to Bill Sakoda who started me off on this topic and to Manuel Blum 
for his many ideas and his boundless enthusiasm. References [II Meyer, A.R. and M.J. Fischer, Economy 
of descrip- tion by automata, grammars, and formal systems, Twelfth Annual SWAT, 1971, 188-191. [2l Schmidt, 
E.M., Succinctness of description of con-text free, regular and finite languages, Ph.D. Thesis, Cornell 
University, 1978. [3] Sakoda, W.J. and M. Sipser, Nondeterminism and the size of two-way finite automata, 
Tenth Annual STOC, 1978, 275-286. [4l Berman, P. and A. Lingas, On the complexity of reg- ular languages 
in terms of finite automata, Report 304, Polish Academy of Sciences, 1977. [5] Cook, S.A., The conlplexi~y 
o1 thcorcn~ provulg pro- cedures, Third Annuul 151()(, 1971, 151-15~. [61 Karp, R.M., Reducibilily :ullon~ 
~,. IOlll~,, ill "('(uqH~Ic\iT\ , * ( ~ J L ' ~ ' I ~' ~ bil~:lt~u'i:tl prob- ((Hlt[~Llltlli()llS", 85-104. 
[71 Savitch, W.J., Rclatic>n~,ip I~c .,~'c,. ¢,' dcicrrninisiic and determinsitic tripe c~,nlplcxitic.~, 
J(SS 4, 1970, 177-192.   
			