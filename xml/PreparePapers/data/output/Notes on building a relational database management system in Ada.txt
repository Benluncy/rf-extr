
 NOTES ON BUILDING A RELATIONAL DATABASE MANAGEMENT SYSTEM IN ADA Olavi Poutanen, Kari-Matti Varanki, 
Tapio Viilim~ki Oy Softplan Ab, Box 209, SF-33101 Tampere, FINLAND Abstract. [t seems, at the moment, 
that although there have been i H ii i J papers published that deal with database management in an Ada 
environment there is still very little practical experience in that field. Using Ada we have developed 
an Ada compatible relational database management system, called DMS/MPSl0. In this paper we discuss some 
of its basic implementation ideas as well as some Ada specific issues that have arisen in the course 
of the work. Mostly we concentrate on describing how database design and documentation can take place" 
using Ada concepts. That is, defining database domains as Ada types, defining table rows as Ada records 
etc. At the end of this paper there are some notes on the DMS/MPS10 runtime arrangements. 1 INTRODUCTION 
The DMS/MPS10 (Nokia 19841 Poutanen &#38; Varanki 198~), henceforth referred to as the DMS ,is a relational 
database management system (DBM5). It manages tabular data structures and supports a high level SElL-like 
data definition language. It can be used from Ada applications and later interactively by means of a 
query language. The DMS is a full scale DBMS (todd 1982)/ designed for use in demanding production applications. 
It features= - data storage, retrieval and update - a data dictionary - transaction support -recovery 
services -concurrency control -support for user defined domains DMS is available for the Nokia MPS10 
(Nokia 1983), a 32-bit supermini computer developed by Nokia Electronics, Finland. The MPS10 is an Ada 
machine and it has an object oriented system architecture and a capability-based addressing scheme which 
provide for good data abstraction and encapsulation. An object in the system (including databases) is 
accessible only through an object type manager (OTM) of the type, using the operations that the OTM provides. 
s 2 THE DMS/MPS10 SYSTEM, AN OVERVIEW-: :-:!i~;~i)::;~ ~:/-:", The main components of the DIvi5 system 
~ Ultjs~,tC~.ir'l fig. 1 below. /definiti . t t Interactlve UBA- too ] s / [compiler Ruery nterprefer 
I DMS DBA support package I application  support data dictionar~i 'applicatlon ~ relational view JJl 
iview operations packages Ill Ipackages in views ] ! ,,, I~ Ii, , t DMS-kernei ("database engine") i 
database objects on disk Figure 1. Overview of the DMS/MPSiO system The application program gets from 
the package DMS application,.support general operations for the database, such as opening and closing, 
transaction delimeters, etc.. The views are first defined in SQL form according to-the specific needs 
of ..... the application. Then they are compiled with a view compiler to Add packages, which are then 
compiled with the Ada compiler. The vie~v packages provide operations for manipulating the view rows. 
Their bodies implement the relational algebra expressions contained in the SQL definitions and let an 
application manipulate, with simple-to-use operations, the virtual tables they thus derive row by row 
from the stored tables. The application program may also use the services of the DMS DBA SUPPORT package. 
It contains maintenance-like operations for the database, such as table and index creation, taking database 
backup, performing recovery actions, etc. The system component "Interactive DBA-tools" is a collection 
of utility programs which can be used from a terminal for the purposes of database design and maintenance. 
The view compiler is one of these DBA tools but because of its importance in the system it is shown as 
a separate utility. The query language/report writer is a sketch for the future. The DMS kernel performs 
a multitude of functions ranging from handling the physical tables to concurrency control and recovery. 
These topics are discussed further in chapter 4. A person (or role) of central importance, the database 
administrator (DBA) supports application development by, for example, generating view packages from SQL 
definitions, defining domains, defining and creating tables and indices. He is also responsible for maintaining 
the data dictionary and performing maintenance activities such as making backup copies and recovery. 
As an object in the virtual memory of the MPS10, a OMS database consists of two sets of tables, the user 
tables and the system tables comprising the data dictionary, cf. fig. 2. dictionarytables user tables 
l,, l Figure 2. The DMS database object in the virtual storage of the MPSIO. 3 APPLICATION DEVELOPMENT 
.... :;-'. - Domains =e an essential concept in both ,th~::ra~ilti~ne[~rnodel and the DMS. They allow 
modelling reality with a database ~i~g ~ncepts of the application rather than the DBMS or the machine. 
In databesetable$, those columns that describe some common feature of the real world are defined'over 
the same domain. On the other hand domains enable the system to enforce sensibility checking to the comparison 
of values (preventing, e.g. the comparison between prices and weights). The use of Ada types to represent 
domains was a natural way of expressing them in our environment. This enables an application to take 
full advantage of the possibilities Ada typing has to offer. In principle all different type classes 
of Ada (with soma exceptions, like access types) can be used in defining domains. Data defined over these 
domains can directly be stored in a database and retrieved from it. No conversions by applications are 
necessary. To make domains available to an application they are defined in so called domain packages. 
These are Ada packages having type (or subtype) definitions and they may be any packages that the application 
uses. For example, the personnel register of a company might be defined over domains such as the following= 
package PERSONNEL DOMAINS is subtype CHRISTIAN NAME is STRING (1..20); subtype FAMILYNAME is STRING (1.30); 
type EMPLOYEE_ID is new INTEGER range 1000,9999; type SALARY is new FLOAT; end PERSONNEL_DOMAINS; To 
an application using the package PERSONNEl.. DOMAINS all the above types are available. They can be used 
in a normal way and deposited as such into the database the application is using. To enable the DMS system 
to manipulate domains defined within packages that ale out of control of the DMS system (packages are 
"controlled" and "interpreted" by the compilation system) information must be given to the DMS about 
how to deal with each domain. This information is given by the DBA and it is fed into the data dictionary 
of the system. What the DBA must tell the DMS about each domain includes a unique domain name (package 
name and type name)~ the Ada base type (integers floats character etc.) of the domaln~ whether the domain 
is scalar, whether it is composite or whether it is something of which the DMS system needs to know only 
the allocated storage size. It is the responsibility of the DBA to make sure that this "interpretation" 
of domains to the DMS is valid. To certain extent the DMS system could at run time check the validity 
of these definitions. These checks can be based on Ada's attributes, like SIZE and FIRST BIT. Once the 
domains have been defined to the DMS system the tables of the database can be defined. Also these definitions 
are given by the DBA, using a DBA tool, and they are fed into the data dictionary. This defining can 
take place in terms of Ada. That is, the row structure of a table is defined as an Ada record, see below 
type PERSONNELL TABLE REC is record EMP ID I : PERSONNEL DOMAINS.EMPLOY EE_ID; NAME : PERSONNEL DOMAINS.FAMILY 
NAME; IS MARRIEI D : BOOLEAN; DEPT NO : DEPARTMENT DOMAINS.DEPT_ NUMBER; end record~ Application development 
using the DMS can begin once the database design phase has ended (or at least produced a sufficiently 
stable conceptual schema of the database). What is required for application development is that the database 
has been created (as a "skeleton", containing only the data dictionary tables) and that user tables have 
been described in the data dictionary. The next step is to define the needs of the applicatior~;:1n:!t~S~f 
the database tables. This is done by defining views in SQL, for example= : "-":~~ DEFINE VIEW MARRIED 
PEOPLE OF DEPT AS " SELECT NAME, EMP ID FROM PERSONNEL TABLE D WHERE IS MARRIED = TRUE AND DEPT NO -= 
$1 (The notation DEPT NO = $1 means that the value of the field DEPT NO is m m compared with a parameter 
given to the view at runtime by the application,) The specification parts of the corresponding view packages 
are then generated from the 5QL language view definitions using the view compUer~ el. fig. 3. i vie. 
L iew '  I vi ew efinitio~ _._m_. Ipackage compi I er n SQL ,?peci fi caJn [ table V  |definitions 
Kfrom data I dictiOnary) Figure 3: The view compiler -" T The specification, of the generated view 
package looks as follows (those parameters that are not essential to this presentation have been omitted): 
with PERSONNEL_DOMAINS, DEPARTMENTJ:)OMAINS! package MARRIED_PEOPLE OF DEPT is type VIEW ROW is record 
NAME : PERSONNELDOMAINS.FAMILYNAME; EMP IO : PERSONNEL DOMAINS.EMPLOYEEJD; end record; procedure OPEN 
( ... ); procedure CLOSE; procedure PARAMETERIZE ( -.d PAR1: DEPARTMENT DOMAINS.DEPT NUMBER); procedure 
FETCH ( ...; ROW: out VIEW ROW; ...); procedure UPDATE ( ...; ROW: in VIEWROW; ...); procedure INSERT 
( ...; ROW: in VIEW ROW; ...); procedure REMOVE ( ... ); see end MARRIED_PEOPLE OF DEPT; Application 
development can now proceed up to compilation phase using the view package specifications. Note that 
at this stage it is not necessary that user tables have been created in the database. The compilation 
time arrangements for an application using the DMS are given in fig. ~. The arrows represent with relations 
between compilation units. J'z ~l packages Appiication application view packages DMS application I support 
 bodies boay ]  ,L I 1 DMS-Kerne] Figure 4: Compilation time arrangements. At this point, both database 
design at the conceptual level and external modelling of the database to the needs of the application 
have been completed. What remains is physical database design. This includes definition of indices to 
be utilized as access paths and definition of storage allocation for tables. The DBA can define the storage 
allocation for tables into the data dictionary. Within the DMS system, this means using the record representation 
clause of Ada, for example: for PERSONNEL TABLE REC use I record EMP IO at 0 range 0..14; OEPT NO at 
0 range 15.,2g; IS MARRIED at 0 range 30-30; NAME at i range 0..239; end record; The DMS system itself 
determines the storage representation, if it is not given by the DBA. After physical database design 
the bodies of the view packages can be generated by the view compiler. The bodies utilize indices but 
the information needed for generation can be obtained from the data dictionary. Thus, the application 
can be linked (after compiling the bodies of view packages) and the physical user tables must be created 
only when starting to use the application. As shown above, application development can flexibly proceed 
in parallel with database design. On the other hand, the fact that views are implemented as Ads packages 
means that it is relatively easy to tune the implementation later, e.g. on the basis of experience from 
using the database, by generating new bodies to the desired view packages. The new bodies possibly use 
a new strategy for accessing data, e.g. utilize a new index, thus giving better performance. Only those 
regenerated bodies need then to be compiled and, once linked, the application is again ready for use. 
The new bodies possibly use a new strategy for accessing data, e.g. utilize a new index, thus giving 
better performance. 4 THE RUNTIME ENVIRONMENT The application interfaces are the DMS application support 
package and the view packages (cf. fig. 1.). The view packages show the database data with user defined 
Ada types . The view packages also implement the relational algebra using the lower level primitives 
of the DMS kernel. The DIvIS kernel manages the stored database, maintains indices to tables, provides 
services for transaction processing, enforces concurrency control and provides services for recovery. 
The DMS uses two phase locking (Date 1981). Within a transactions all data that an application reads 
or writes, will be locked. Locks will be collected until the end of the transaction and released only 
then. There ace two locking granules, namely a view row and a view. The locking is directly reflected 
in the stored tables as row and table locks. In cases of lock conflicts the DMS schedules the exeeut,on 
of.-¢l~n!L~!~et'd~tt'ansactiOnSo Corcurrency control in the DMS allows serialization of concurrent access 
to common data from different Ada programs. Concurrency control between tasks of a program is left to 
the application. if a DMS operation fails, it raises an exception. The choice between the use of an exception 
and an out-parameter in each procedure of the DMS was not an obvious one. In earlier versions of the 
DMS the status parameter approach was adopted instead of exceptions. This was, however, abondoned later. 
Some reasons are given below. With the use of exceptions we hope to gain better clarity and readability 
in applications using the DMS, since checking the status parameter after every procedure call clearly 
makes the program logic in source form more difficult. Many error situations are also by nature such 
that there is no sensible way for an application to recover and retry. In this case it seems suitable 
that control is transferred out of that part of the application where the error occurred and exceptions 
are an Ada way of doing that. The DMS raises only one exception in all error cases (that arise within 
the DMS). This is to assure that exception handlers in applications won't grow too large (an application 
will probably have to handle a wealth of other exceptions in any case). An application can, e.g. in the 
exception handier, call a subroutine of its own that pinpoints the failure and the exact reason for it 
by using services the DMS offers and, finally, performs the necessary closing actions. On the other hand, 
to make sure an application can recover and retry in cases where it is conceived possible means adding 
block statements and exception handlers to appropriate places. 5 SUMMARY AND FUTURE DIRECTIONS In this 
paper we have highlighted some of the implementation ideas of our relational database management system 
DMS/MPS10. It has been implemented using Ads in an environment that also was rapidly evolving (the hardware, 
operating system, programming environment). This has caused some additional challenge. The system supports 
database design in terms of both Ads and the relational model. We can provide the conceptual and operational 
power of both to application designers and programmers. In managing domains the DMS is not dependent 
on the compilation library. The DMS has been operational since September 1983. Some major demonstrative 
and prototyping systems have been built on it. Currently there are many projects in progress whose purpose 
is to produce production applications where the DMS will be used. The acceptance of the DMS in the user 
community has been promising. Currently we are working especially on implementing the view compiler (now 
the views are edited upon "skeletons") and extending the DBA tools for manipulating the data dictionary 
tables. We estimate to have a release with these features in the coming months. References Codd, E.F. 
(1982). Relational Database= A Practical Foundation for Productivity. Communications of the ACM, Feb, 
vol 25, No. 2. Date, C.3. (1981). An Introduction to Database Systems, Volume II. Addison-Wesley Publishing 
Company, Inc,, pp 102-107. Nokia (1983). MNS 10 Ookumentation series, vol. 1 &#38; vol. 2. Nokia Data, 
Terminal Systems, Finland. Nokia (1984). MPSI0 Database Management System, User's Manual vol. [ &#38; 
vol. II. Nokia Electronics, Finland. Poutanen, O. &#38; Varanki, K-M. (1984). An Ads Implementation of 
a Relational DBMS. Third Scandinavian Research Seminar on I Information Modelling and Data Base Management, 
Edited by Hannu Kangassalo. Acts Universitatis Tamperensis set B vol. 22, pp 503-513. 
			