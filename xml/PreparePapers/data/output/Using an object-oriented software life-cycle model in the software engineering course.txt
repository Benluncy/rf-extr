
 USING IAN OBJECT-ORIENTED SOFTWARE LIFE-CYCLE MODEL IN T-HE SOFTWARE ENGINEERING COURSE ,, , I1, -, 
Arturo I Conkepcion Department of Computer Science *: **. California State University, San Bernardino 
San Bernardino, CA 92407 concep@csci.csusb.edu ..> Key Words: software engineering, object-oriented 
paradigm, and software life-cycle. 11 Abstract An object-oriented software life-cycle model, the Modi- 
fied Spiral Model, was successfully used as the software process in the software engineering course in 
the,Depart- ment of Computer Science,, California State Umversity, San Bernardino. The model lends itself 
quite-naturally to the object-oriented approach of producing software systemsain the iterative and incremental 
manner. The software engineering class is run- like a virtual software company which is composed of teams 
and team leaders where performance is measured on being able to submit the software deliverables and 
the success of the task(s) assigned to the team. The paper reports on the im- plementation of the software 
project, Algorithma (Al-gorithm Animation), in the virtual software company ,using the Modified Spiral 
Model. (I.., Introd&#38;on . The current industry trend towards object-oriented 1 programming languages 
(OOPL) and object-oriented analysis and design (OOA/D) has prompted many de- partments of computer science 
to incorporate OOPL and OOA/D into their curriculum. Many begin by changing the introductory programming 
languages in the CS 1 and CS 2 courses to exclusively use, or at least include COPL like Cl++ instead 
of the structured languages like, P+cai or C. ,OOA/D methods are later introduced in classes dealing 
iith data structures, file systems, and in some cases an optional elective class on a particular O,OP,L. 
In any case, because of the lack of training of the students in OOA/D methodology, the ,,I 1 I/ Pefmission 
to m&#38;. digitaLhard copies of all or pak of thk material for personal 6; cl&#38;r~om usd is granted 
without fee p&#38;d&#38;l that the copies are not made or dhibuted foi profit or commercial advantage, 
the copy- right notice, the title of the publication and i&#38;date appear, and notice is given that 
copyrightisby permission of the ACM, Inc. TO copy otherwise, to republish, to post on servers or to redistribute 
to lists, requires specific permission and/or fee. SIGSCE 98 AthtaGA USA Copyri@t1998 0.89791-994-7l98/2..%5.00 
 30 students more often apply the procedural oriented paradigm in their programming projects using an 
OOPL. The procedural oriented paradigm is intuitive while the object-oriented (00) paradigm is not. So 
an issue in many departments of computer science is how to continue the use of the object-oriented paradigmin 
their upper-division courses, such as software engineering. If the 00 paradigm is adopted in software 
engineering, what is an appropriate softivare life-cycle to use in the development of a programming project 
in this course? The software engineering course is a course where the principles and concepts of building 
large software systems are taught to students in computer science. It is an accepted universal problem 
on how to teach this course because of the need to find an appropriate size and complexity of a programming 
project that the stu- dents will be involved in, developing. So another issue is, what constitutes a 
good programming project. This paper reports on the experiences of the Depart- ment of Computer Science, 
CSUSB, in teaching the soft- ware engineering course in the period lasting from 1991 through 1996. Section 
2 deiscribes the software project that is done in the software engineering course, the Al- gorithma (Algorithm 
Animation) Project. This project was found to be of appropriate size and complexity for this course. 
The section also discusses the virtual soft-ware company and the growing maintenance problem of the programming 
project for the software engineer- ing course. Section 3 talks about the object-oriented software life-cycle 
model that was used in implementing the Algorithma Project. Finally, Section 4 contains our conclusion 
and future directions. 2 The Algorithma Project The Algorithma Project is a software package that animates 
the effect of each algorithm step to the data structure that it manipulates. The general format of the 
display consists of two windows: the left window shows the algorithm being ,demonstrated and the right 
*window shows the data structure (array, list, stacks, queues, etc.) the algorithm~is manipulating. In 
addition to animating algorithms, the user can author a user- defined algorithm using Algorithma s pseudo-code 
lan- guage. Currently, it can suppoit simple data types, such as real, integer, and character, and one-dimensional 
ar- ray. When the user is satisfied with the behavior of the user-defined algorithm by running the animation, 
the user can have Algorithma generate the source code in C. The Algorithma Project is an appropriate 
project for a software engineering course because it involves so many expertise that not a single student 
may have, such as knowledge of data structures, file systems, graphics, and compilers. The project must 
be done by using mul- tiple programming teams. 2.1 Virtual Software Company To reflect real world situations, 
the software engi- neering class is conducted as a virtual software ,com- pany. The class is organized 
into teams: one manage- ment team and several programming teams. Each team has a team leader and a librarian. 
The team leader of the management team is also the project leader and its librarian is the over-all librarian 
for the entire -project. The management team functions as the quality assur-ante team that conducts inspections, 
reviews, and tests source code produced by the programming teams. Of course, the instructor is the president 
of the virtual soft- ware company! The grade of the student depends on the following deliverables: software 
requirement specifi- cation, architectural and detailed software designs, soft- ware quality assurance 
plan, integration and system test plans, unit test plan, maintenance manual, and docu- -mented source 
code. There are no quizzes, assignments, midterms, nor final examinations. Their grade is de- pendent 
on the submission of the above deliverables and the success of their software project. At the end of 
the course, a demonstration of the new version of Algorithma is done and each team presents their con-tribution 
to the project, i.e., the added features they have implemented and/or the maintenance task(s) they have 
performed. This gives the student pride in their work and a chance to show-ofl to their classmates and 
faculty members who attend the class demonstration. i.2 Maintenance Problem The concepts of the Algorithma 
Project was started in Winter 91 and since then the project became an on- going project in the software 
engineering class which is offered once a year, i.e., every Winter Term. Each software engineering class 
maintains the project through the documentation left by the previous class. The following is a brief 
chronology of maintenance performed on the AlgorithmaProject: In Winter 91, the software design was completed 
but no implementation was made. In Winter 92, the first version was completed on two operating systems: 
DOS and the AT&#38;T Unix on personal computers (386 PCs). It was written in C and used cursor graphics. 
It included demonstrations of stacks, queues, -and some sorting algorithms (bubble sort and insertion 
sort). In Winter 93, the second ver- sion was completed on IBM RS/6000, AIX, and used C and XGKS graphics. 
It included more sorting algo- rithms, searching algorithms, and more data structures. The beginnings 
of an authoring system was also imple- mented in thii version. In Winter 94, the third version was completed 
on SGI Indigo workstations, Irix, and used C and SPHIGS graphics. It included trees and graph algorithms. 
The authoring system included a C source code generator. In Winter 95, the fourth version still runs 
in the same environment as the previous year with the added features of hypertext interface and mul- 
timedia. A research and development (R&#38;D) team was formed to explore the implementation in C++ and 
find an object-oriented software life-cycle model. In Winter 96, the fifth version still runs on the 
same environment with more sorting algorithms, added doubly linked lists, and more multimedia. The R&#38;D 
team was successful in implementing a prototype entirely written in C++ and using an object-oriented 
software life-cycle model. From 1991 to 1995, the course was taught using the conventional Waterfall 
life-cycle model and structured approach. Using this software process, it became ap- parent that the 
maintenance aspect of the project was cumulative. Each maintenance task, decision, and im- plementation 
were carried on to the next version and each year, more and more time were spent on debug- ging maintenance 
changes than upgrading the software. Exploration of an object-oriented approach was stud- ied as early 
as 1995, but not until 1996, when the en- tire course was taught using an object-oriented software life-cycle 
called the Modiied Spiral Model, was such an implementation successful. 3 Object-Oriented Software Life-Cycle 
A search into literatures yielded several object- oriented software life-cycle models: Round-Trip Gestalt 
Design [3], Recursive/Parallel Model [2], Fountain Model [4], Chaos Model [8], McGregor and Sykes Model 
[6], and Methodology for Object-Oriented Software En- gineering (MOSES) [5]. But most of these models 
are not yet fully developed or are too complex to apply to a software project in a software engineering 
course. We need an object-oriented software life-cycle model that is simple enough to be used and reflect 
the iterative nature of software development using the CO approach. 3.1, Modified Spiral Model Boehm 
s Spiral Model [l] is a software process that consists of several spirals of the development of software 
where each spiral consists of one or more software liie- cycle phase. At the end of each phase, a prototype 
is 31 produced which is tested and then a risk analysis is done before proceeding to the next spiral. 
The risk analysis is done to study the different risks that will be involved in the development of the 
next phase and how to deal with these risks if it occur. The spiral nature of the Boehm s model lends 
itseIf suitable for the object-oriented ap- proach since this approach is iterative in nature. (a) An 
Individual Spiral. (b) Multiple Spirals. . Figure 1. The Modified Spiral Mbdel. We proceeded to modify 
Boehm s Spiral Model into the Modified Spiral Model (MSM), see Figure 1. As shown in the,figure, MSM 
consists of spirals for a com- plete software life-cycle, instead of one or, more soft- ware life-cycle 
phase. Each spiral consists of: specifi- cation, planning, design, implementation, integration, . and 
risk analysis, see Figure l(a). At the end of each spiral a prototype is produced; Risk analysis is done 
to study the risks involved in producing the next pro- totype. Note that the final product is developed 
after several spirals thereby producing the software incremen- 32 tally. Figure l(b) s ows the final 
product is produced h after several spirals. Another advantage is that the client or customer is involved 
in the software process be cause a prototype is produced for evaluation. This fea- ture is not possible 
in the conventional Waterfall Model. Also the 00 approach can be applied because each succ ceeding prototype 
is built on top of previous prototype through objects, classes, inheritance, dynamic binding, and polymorphism. 
Therefore, each specification in the spiral is the software requirements specification for the prototype 
that will be produced in the current spiral. The production of the first prototype is thus very crit- 
ical to the whole software development. The first proto- type must contain the primitive and basic objects 
from where other objects will be built on through inheritance, aggregation, or association. If the first 
prototype does not contain the primitive and basic objects, the whole scheme of incremental growth will 
fail. Also note that in the MSM, the planning phase overlaps all the phases of the software life-cycle 
and that the design phase over- laps the implementation phase. The later spirals after the complete product 
is produced refers to the mainte nance phase and the retirement phase of the software life-cycle, see 
Figure l(b). 3.2 Software Requirements Specification The software requirements specification (SRS) is 
a document that specifies what the software, in this case the prototype at the current spiral, can do. 
There are three standard formats used in writing the SRS docu- ment: National Bureau of Standards, IEEE 
(Standard No. 830-1984), and the U.S. Department of Defense. We adopted the format as suggested by Pressman 
173 because of its simplicity and ease of use. The following is the suggested major sections of the SRS 
from Pressman with the addition of the section on the first cut object model: : I. Introduction . II. 
Information Description III. Functional Description IV. Behavioral Description V. Validation and Criteria 
 VI. First Cut Object Model VII. Bibliography VIII. Appendix . The addition of the first cut object 
model in the SRS is suggested by Schach [lo] which was used as the textbook for the software engineering 
course. More discussion of the purpose of the first cut object model is found in Section 3.4. As mentioned 
earlier, the SRS is written for every prototype in the spiral. This is considered to be an in- cremental 
development of the specification wh&#38;h has the advantage of writing the specification incrementally 
. when it is very hard to write the complete specification because of the complexity of the software 
and the pres: ence of many assumptions which may not be correct. 3.3 Software Quality Assurance Plan 
The software quality assurance (SQA) plan is a docu- ment that defines the responsibilities of all the 
teams in the virtual software company, standards, procedures for conducting reviews, inspections, and 
tests, and schedule of activities from. specification to risk analysis of a. spi- ral. Note that the 
responsibilities of teams and schedule of activities will change for every spiral. All the rest will 
remain the same. The following gives the major sections for the format of the SQA Plan as suggested by 
Pressman [7] with the added section on schedule of activities: I. - Purpose of Plan II. References III. 
Management Iv. Documentation V. Standards, Practices, and Conventions VI. Reviews and Audits VII. Test 
VIII. Problem Reporting and Corrective Action IX. Tools, Techniques, and Methodologies X. Code Control 
XI. Media Control XII. Supplier Control XIII. Records Collection, Maintenance, and Retention XIV. Training 
XV. Risk Management XVI. Schedule of Activities The SQA Plan is the responsibility of the management 
team and must be written by them. The project leader follows the directives of the S&#38;A and the members 
of the management team implements them. The schedule of activities mark the milestones in the development 
of the prototype. It measures the progress of the programming teams and use it to solve problems if some 
teams fall behind the schedule.  3.4 Analysis and Design The object-oriented design and analysis (OOA/D) 
is carried out through the combined effort of the manage- ment team with feedback from the programming 
teams. The project leader may conduct a meeting of all the members of the programming teams to discuss 
about analysis, designs, and ,decisions or the project leader may only meet with the programming team 
leaders and then they in turn pass the information down to all their programmers. The OOA/D methodology 
adopted in the software engineering course is the Object Modeling Technique (OMT) [9]. The OMT methodology 
consists of three steps [9]. The first step is analysis whereby the goal is to develop a model of what 
the system will do. The model is ex- pressed in terms of objects and relationships, dynamic control flow, 
and functional transformations. So after constructing the object model, the dynamic model is constructed. 
This model depicts the changes in the ob- jects and their relationships over time. The dynamic model 
is, represented by a finite state machine where each node is the state of the system and the edges rep- 
resents the events and what action was taken. Then after the dynamic ,model is constructed and analyzed, 
the functional model is developed. This model depicts how the output values are computed from the given 
in- put values. The functional model is represented by a data-flow diagram. The three models are iterated 
for refinement until the user is satisfied that the analysis is complete. The second step is the system 
design where the high- level structure of the system is chosen. In this step, the object model is organized 
into subsystems and de- termine if there are any global resources that will be needed and how to access 
them. The output of this step is the architectural design of the software system. The third step is the 
object design where elabora- tion of the analysis step is done to provide a detailed design for software 
implementation. In this step, the operations and methods of the. objects are determined and their algorithms 
are designed. The relationships be- tween objects are studied to produce maximu inheri- tance. Associations 
are then designed for implementa- tion in the OOPL and then classes and associations are packaged into 
modules. The output of this step is the detailed design of the system. Note that in the SRS document, 
the last section is the first cut object model of the system. Although this may be a violation of the 
contents of SRS, in the 00 approach, the first cut object model is part of the spec- ification. This 
is the starting point for the analysis step of the OMT methodology whereby the object model is modified 
or is iterated depending on the result of the analysis through the dynamic model and the functional model 
[9]. 3.5 Incremental Development The software engineering class of Winter 96 was able to have two spirals 
following the Modiied Spiral Model. As mentioned- earlier, a prototype was pro- duced at the end of each 
spiral. The first prototype is the most crucial of iall, the prototypes because it is in this prototype 
that the most primitive and basic ob- jects will be implemented. This is important in order to maximize 
the benefit of inheritance in later proto- types. For the Algorithma Project, the first proto- type contains 
two modules: the menu and graphic mod- 33 ules. The menu module contains the following objects: arrow, 
graphic-object, rectangle, menu, button-object, and text-container. The graphic module contains the following 
objects: arc,.graphic, line, point, poly, rectan- gle, shapes, text, and triangle. The software engineering 
class took about.8 weeks out of the lo-week term to fin- ish Spiral #l. This is due to the fact that 
the class was just learning the OMT methodology and it took time to decide which objects were considered 
basic for the first prototype. : Spiral #2 produced the second prototype. This pro- totype contains three 
demonstration packages: stacks, queues, and #link-list. The stack demonstration has push, ,pop, and top 
algorithms. The queue demonstra- tion contains insert and delete algorithms. The link-list demonstration 
contains insert, delete, and,search algo- rithms. So using the,first prototype, we were able to build 
the second prototype on top of it. The basic ob- jects in the first prototype were used to build the 
mod- ules for each of the.demonstration operation of stacks, queues, and linkilist. It took the class 
the remaining 2 weeks to go through-spiral #2 and was able to produce the second prototype with more 
features than the first prototype. _ ,* ,,/4 Conclu$qn ,and Future Directions 1 In this paper, we have 
presented a successful integra tion of object-oriented analysis and design (OOA/D) methods in thesoftware 
engineering course. Using the conventional Water Fall Model has proven to be inade- quate to handle the 
maintenance problem that needed to be done to ihe Algorithma Project for every year of revision. OOA/D 
provided the tool and mechanism whereby through inheritance I and polymorphism, the project was developed 
in an incremental manner. The problem faced by many departments of computer sci- ence is how to teach 
OOA/D in the software engineering course which gives the student the best opportunity to apply this new 
paradigm in the development of software. We have seen the advantage of,using OOA/D and the students were 
very.enthusiastic.in going into Spiral #2 when they saw how the project was developed in Spiral #l. The 
students began to realize the power of reusabil- ity and understood how OOA/D cansbe used. Our ob- servation 
was that it took the class about 8 weeks of the 110 week quarter term to understand OOA/D and im- plement 
Spiral #l. But once the students acquired the experience of using OOA/D, it took them just 2 weeks to 
design and implement Spiral #2 with more features than Spiral #l. Actually the students were excited 
and raring to design and implement SpirAl#2 once they saw their objects communicating and successfully 
executing object s methods. We predict that the next spirals will also be developed rapidly. One. suggestion 
is to have 34 OOA/D taught in the lower division courses so that the students would have acquired this 
knowledge when they get into the upper division courses. ,This is a study cur: rently being done in the 
Department of Computer Sci- ence, CSUSB, where the introduction to OOA/D is to begin as early as the 
CS 1 and CS 2 courses. A future direction of the Algorithma Project is to implement the entire project 
in Java. This will have the advantage of Algorithma being accessible in any platform and any operating 
system. The application of OOA/D and the use of the Modified Spiral Model to the Javabased Algorithma 
Project will not change be- cause Java is an object-oriented programming language. Acknowledgement We 
would like to acknowledge Steven Griffin and Casey Crampton for their contributions to this paper. Both 
were students from the software engineering class of Winter 96 and 97, respectively. References I [l] 
B.W. Boehm, A Spiral Model of Software Devel- opment and Enhancement, IEEE Computer, Vol. 21, May 1988. 
 [2] E.V. Berard, Essays on Object-Oriented Software Engineering, Volume 1, Prentice Hall, 1993. [3] 
G. Booth, Object-Oriented Analysis and Design with Applications, Benjamin/Cummings, 1991. [4] B. Henderson-Sellers 
and J.M. Edwards, The Object-Oriented Systems Life Cycle, Comm. of the ACM, Vol. 33, No.9, Sep 1990. 
 [5] B. Henderson-Sellers and J.M. Edwards, Book Two of Object-Oriented Knowledge: The Working Object, 
Prentice Hall, 1994. [S] J.D. McGregor and D.A. Sykes, Object-Oriented Software Development: Engineering 
Software for Reuse, Van Nostrand Reinhold, 1992. [7] R.S. Pressman, Software Engineering: A Prao titioner 
s Approach, 4th Ed., McGraw-Hill Pub. co., 1997. [S] B.S. Raccoon, The Chaos Model and the Chaos Life 
Cycle,: Software Engineering Notes, Vol. 20, No.1, Jan 1995. [9] J. Rumbaugh et. al., Object-Oriented 
Modeling and Design, Prentice Hall, 1991. [lo] S.R. Schach, Classical and Object-Oriented Soft- ware 
Engineering, .3rd Ed., Irwin Pub., 1996. / 
			