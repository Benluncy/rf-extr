
 MEASURE+ A Measurement-Based Dependability Analysis Package Dong Tang and Ravishankar K. Iyer Center 
for Reliable and High-Performance Computing Coordinated Science Laboratory University of Illinois at 
Urbana-Champaign Abstract Most existing dependability modeling and evaluation tools are designed for 
building and solving commonly used models with emphasis on solution techniques, not for identi­fying 
realistic models from measurements. In this paper, a measurement-based dependability analysis package, 
MEASURE+, is introduced. Given measured data from real systems in a specitied forma~ MEASURE+ can gen­erate 
appropriate dependability models and measures including Markov and semi-Markov models, k-out-of-n availability 
models, failure distribution and hazard func­tions, and correlation parameters. These models and meas­ures 
obtained from data are valuable for understanding actual error/failnre characteristics, identifying system 
bottlenecks, evaluating dependability for real systems, and verifying assumptions made in analytical 
models. The paper illustrates MEASURE+ by applying it to the data from a VAXcluster multicomputer system. 
Models of field failure behavior identified by MEASURE+ indicate that both traditional models assuming 
failure independence and those few taking correlation into account are not representa­tive of the actual 
occurrence process of correlated failures. 1. Introduction Significant progress has been made in developing 
dependability and performance modeling and evaluation tools (reviewed by [Johnson88], [Geist90], and 
Meyer92]). The emergence of these tools has given impetus to applica­tions of state-of-the-art modeling 
and evaluation techniques. Models built with these tools include reliability block diagrams, fault trees, 
Markov chains, queuing networks, and Petri nets. Performabllity ~eyer80], hierarchy [Sahner87], and reward 
lJlivedi92] modeling techniques have also been implemented in the tools. Solution tech­niques used in 
these tools include analytical and numerical methods investigated in the past decade (e.g., ~urcht­gott84], 
[de Souza89], [Reibman89]), and simulation methods incorporating importance sampling [Goya192]. Results 
yielded by the tools include availability, reliability, performability, reward rate, and other dependability 
and Permission to copy without fee all or part of this material is granted provided that the copies are 
not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the 
publication and its date appear, and notice is given that copying is by permission of the Association 
for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. 
1993 ACM SIGMETRICS-5/93 /CA, USA @ 1993 ACM O-89791 -581 -Xj9310005/01 10... $1.50 performance measures. 
The tools are useful for evaluating dependability as well as performance in system design and research. 
However, all of these tools are developed for building models based on some assumptions and parameters, 
with emphasis on model solution techniques. They do not address fundamental issues such as: 1) if the 
underlying models are realistic, and 2) if the parameters used are appropriate. It is obvious that the 
accuracy of evaluated results by these tools greatly depends on the above two issues, i.e., model assumptions 
and input parameters. The best way to address these issues is through measurement­based analysis. Although 
measurement-based analysis of computer system dependability has evolved significantly over the last 15 
years, the data analysis work is normally done manually with ad hoc techniques, using programming languages 
or statistical packages such as SAS [SAS85]. However, these statistical packages provide only standard 
procedures, not a complete methodology in the context of dependability analysis for computer systems. 
It would be beneficial to have a software package which integrates a wide range of the state-of-the-art 
techniques in measurement-based dependability analysis and modeling (e.g., data coalescing and Markov 
modeling incorporating correlations) and which can generate appropriate dependability models and measures 
from field data in an automatic fashion. MEAS -URE+ is developed for this purpose, thereby providing 
an automatic means for studying issues such as realistic models and appropriate parameters. In the next 
section, we present an overview of MEASURE+. Section 3 discusses models and measures generated by MEASURE+. 
Section 4 details MEASURE+ including its functions, user interface, and implementation features. Section 
5 shows a complete application example. Section 6 concludes the paper. In the whole discussion, MEASURE+ 
will be illustrated with the error data collected from a VAXcluster multicomputer system. 2. Overview 
of MEASURE+ MEASURE+ is designed based on past experience from measurement-based studies (e.g., l?kao831, 
[Iyer861, [Hsueh88], [Tang93]). Figure 1 outlines MEASURE+, where ellipses represent input and output 
files. The current Flgure 1. MEASURE+ Diagram 00 i Data Coalescing i  w -+ 00 w MODEL DISTRI COR 
 GzD­ 33 For Each Pair K-out-of-n Std. Deviations, I Analysis of Statistical Significance II implementation 
of the MEASURE+ main body includes classifying errors and failures, extracting necessary infor­three 
functional modules: MODEL, DISTRI, and COR. The mation from field data (the result can be a form of modular 
construction allows easy implementation of addi-compressed data, or flat data), and coalescing repeated 
error tional functionality. Details of the diagram will be discussed reports. In a computer system, a 
single problem commonly in Section 4. results in many repeated error observations occurring in rapid 
succession. To ensure that the anatysis is not biasedGiven field error da@ a measurement-based study 
by repeated observations of the same problem, all errorcan be divided into three phases, shown in Figure 
2: 1) data entries which have the same error type and occur within aprocessing, 2) model identification 
and measure acquisition, short time interval (e.g., 5-minutes) of each other should beand if necessary, 
3) model solution. Phase 1 includes Figure 2. Measurement-Based Anatysis Field Coalesced Data Measure 
Acq. Mode]s Model Data Data Measures > >> Processing * Model Identif. Solution Phase 1 Phase 2 Phase 
3 coatesced in data processing. Thus, the output of this phase be from a stationary stochastic process 
for the user­is a form of coalesced error data. This phase is highly specified time segment in which 
models and measures are dependent on the measured system. Different systems may generated. have different 
data formats and need different time intervats in data coalescing. A recent study [Hansen92] proposed 
an 3.1. Multifailure Groups algorithm based on statistical models to select an appropri- Recent studies 
on DEC VAXcluster systems ate time interval in data coalescing. MEASURE+ will [Tang90] Nein90] and Tandem 
fault-tolerant systemsinclude a module which incorporates this atgorithm, to lJAe91] have found that 
correlated failures exist in multi­facilitate data coalescing, as shown in Figure 1. The module computer 
systems. By a correlated failure we mean the would require users to provide a type of flat data of the 
fol­ occurrence of more than one failure on different subsystemslowing forma~ (e.g., processors) within 
a small time window. In [Tang90], the multifailure group concept was used to characterizeentry logging 
error dev$e other fields correlated failures. Figure 3 illustrates a multifaihne group number tune type 
scenario. In the figure, the dashed lines denote subsystem This type of data can be easily extracted 
from error logs failures. From time t ~ to tz, failures occur on three different generated by many computer 
systems such as IBM and subsystems in rapid succession and intersect with each DEC machines. Users are 
also allowed to provide coalesced other. We call the set of failures which occur within the data with 
a format defined in Section 4 to MEASURE+ and time window from the beginning of the first failure (t 
1) to are encouraged to do so to avoid possible errors produced the end of the last failure (tz) a mulf~ailure 
group. MEAS­by the data coalescing module because of system-dependent URE+ identifies these multifailure 
groups from the data and factors. summarizes their occurrence with the following statistics: frequency 
and percentage of subsystem failures involved in Phase 2 includes identifying models (such as Markov 
the multifailure groups, and tlequency and percentage of models) and acquiring measures (such as TBF 
distributions multifailure groups. and steady-state availability) from the coalesced data. The three 
MEASURE+ function modules shown in Figure 1 per-Figure 3. A Multifailure Group Scenario form this analysis. 
Phase 3 solves these models to obtain some other measures (such as reliability and transient reward rates). 
Existing depmdability evaluation tools, such as SHARPE [Sahner87], can be used in this phase. 3. Models/Measures 
Generated by MEASURE+ The construction of measurement-based dependabil­ity models is different from that 
of analytical models. 3.2. Markov Model Analytical models are typically built based on individual subsystem 
parameters (such as failure and recovery rates). MEASURE+ can generate Markov (or semi-Markov) All composite 
parameters in the model (such as transition models of the form in Figure 4, where $ means that there 
rates in a Markov model) are analytically determined from are i failed subsystems (components or machines) 
in the individual subsystem parameters, based on some assump-system. Note the model is not necessarily 
a birth and death tions. In measurement-based models, all parameters are process. Transitions between 
any two states are allowed if actually measured from data without any assumption on they exist in the 
data. In the future, more complicated relationship among subsystems. In this section, we discuss models 
such as the model in which the states depend also models and measures generated by MEASURE+ and their 
on failure types (CPU, disk, etc.) witl be implemented in the differences from those used in traditional 
modeling package. We will call the models generated by approaches. In the discussion, the data used are 
assumed to Figure 4. A Markov Model for a System with n Subsystems Figure 5. A Markov Reliability Model 
for the VAXcluster oF4 Table 1. Parameter Estimatom for the Independent Model MEASURE+ measured models. 
In the construction of measured models, every transition rate is estimated based on the transition frequency 
and holding time measured fmm data. Let Lij denote the transition rate from state i to state ~, fij the 
observed transition frequency (number of transitions) from state i tostate j, and hi the measured total 
holding time of the system in state i. Then, Lij is estimated by (3.1) Thus, there is no need to calculate 
transition rates using individual subsystem parameters as done in analytical modeling. In the construction 
of analytical models, if the assumptions made in calculating transition rates are not realistic, the 
constructed model may be far from the real system. We use an example to illustrate differences between 
the two approaches. Assume we want to evaluate the reliability of a VAXcluster multicomputer system which 
consists of seven VAX machines [Tang93]. By the VAX­cluster Quorum algorithm @EC86], the system fails 
if four or more machines fail, That is, the VAXcluster can be treated as a 4-out-of-7 system. Figure 
5 shows a Markov reliability model for the system. In the model, state Fi denotes i failed machines in 
the system; \,i+l and ~i,i-l are failure and recovery rates when the system is in state Fi. F4 is the 
system failure state, so it is an absorbing state. Given the failure rate Ii and recovery rate Pi of 
machine i (which are measured from data), analytical modeling methods typically assume independent failures 
on different subsystems and use formulas in Table 1 to calcu­late transition rates (ki,~+l and Pi,i_l) 
for the model in Fig­ure 5. In the table, wi 1s the proportion of the holding time of machine i in state 
F1; Wij is the proportion of the holding time of machines i and j in state F2; and wti~ is the propor­tion 
of the holding time of machines i, j and k in state F3. We will call the model built in this way the 
independent modeL In the measured model generated by MEASURE+, no assumptions are made on relationships 
among different subsystem failures, and all transition rates in the model are measured from data. Table 
2 lists the transition rates of these two models based on the VAXcluster data. Table 2. Transition Rates 
Comparison Between Models for the VAXcluster Rate(@) %1 &#38;2 h3 b4 P1O k, 132 Independ. 0.98 0.84 
0.69 0.54 28.4 59.7 93.6 Measured 0.82 3.31 34,0 72.3 26.2 77.3 198.9 Mess./lnd. 0.84 3.9 49.3 133.9 
0.92 1.3 2.1 It is seen that there are major differences between the measured and the independent transition 
rates, especially for the failure rate representing the transition to a mul­tifailure state (Xlz, &#38;3, 
Au). The measured value is far higher than would be expected by the independence assumption. This is 
because there are correlated failures in the measured system. When a machine fails, the chance that another 
machine will fail is greatly increased because of correlated failures. That is, transition rates cannot 
be simp­ly specified according to an independence assumption for such a system. The modeling tool SAVE 
[Goya186] can account for correlation by allowing users to specify the failure probabilities of other 
components when a component fails. It is not clear how SAVE uses these correlation parameters to build 
models because its internal models are not pub­lished. A common approach used in the modeling of corre­lated 
failures is shown in Figure 6. In the figure, hand p are failure and recovery rates of the individual 
components in the system (assuming all three components have the same rates). The p 03and p 1 are traditional 
coverage parameters [Arnold]. The associated arrows are directed to the system failure state (SJ. The 
poz is the probability that the second component will fail when the tirst component fails, The associated 
arrow is not directed to the system failure state so it is also called partial coverage. However, the 
models generated by MEASURE+ from the VAXcluster failure data [Tang93] indicate that correlated failures 
occur in the form of propagation from one machine to another, not simultaneously as modeled in Figure 
6. This result is consistent with those reported in vein90], which observed that staggered machine interr­uptions 
(failures) occur and related interruptions across machines need not occur simultaneously. Thus, as men­tioned 
in the study, these failures were not satisfactorily explained by the concept of coverage used in many 
analyt­ical models. That is, the model shown in Figure 6 does not reflect the propagation process of 
correlated failures in real systems. The propagation time on these transient states is observed to be 
several minutes to several hours [Tang93] or tended to fall within an hour mein90], both of which are 
on the same order of normal failure recovery times. Thus, the propagation process is not negligible in 
dependability modeling. MEASURE+ generates both discrete-time and continuous-time Markov (or semi-Markov) 
models (they can be converted to each other). Discrete-time mcxlels can be used in simulations to obtain 
distributions of time to absorbing states. Continuous-time models can be fed to an existing dependability 
evaluation tool to obtain steady-state and transient solutions. In addition, MEASURE+ generates all instances 
of the holding time of the system in each state and the associated failure subsystems and failure types. 
This information can be used to identify holding time distribu­tions and to examine interesting instances 
in detail (failure Figure 6. A Common Approach in Modeling Correlated Failures  3pl)3A 2po~x (Po2 k 
prhrd coverage) subsystems, types, and times). 3.3. Unavailability for K-out-of-n Models K-out-of-n 
models are widely used to describe a sys­tem with redundant subsystems in dependability evaluation. Let 
N be the set of all combinations of {1,2, ....n) (where n is the number of subsystems in the system under 
study) and U; be the unavailability of subsystem i measured from data. If failures on the subsystems 
are independent the probabil­ity that m subsystems have failed and that the remaining n m subsystems 
are functioning , W., can be estimated as [Trivedi82] Wm= ~ Uj, Uj~(l-Uj~+l )  (l-ujn) . (3.2) jl,,..,jneN 
 The unavailability Of a k-Out-Of-n model, Uk/., iS then Cal­culated by U,,n = ~ Wm. (3.3) m =n k+l 
If failures on different subsystems are dependen~ it is difficult to use combinatorial models to calculate 
unavaila­bilities for k-out-of-n systems, It may be argued that una­vailabilities for such systems can 
be evaluated from Markov or other models. But still, the construction of these models has to take correlation 
into account. However, unavailabili­ties for k-out-of-n models can always be accurately meas­ured from 
data. MEASURE+ produces both measured una­vailabilities and calculated unavailabilities (using Eq. (3.3)), 
as well as their ratios. Table 3 shows some results given by MEASURE+ based on the VAXcluster failure 
data. In the table, independent values mean the calculated unavailabilities using Eq. (3.3). The ratio 
listed in the bot­tom line shows that there is a significant difference between measured and independent 
values for the VAXcluster. Table 3. Unavailability for k-out-of-n VAXcluster Models Model 5-out-of-7 
4-out-of-7 3-out-o f-7 I Measured I 4.1X1O-4 I 1.9X104 I 1.3X1O-4 I Independ. 3.5X1O-6 1.4X1O+ 3.3X1O-11 
Mea.s./Ind. 1.2xl@ 1.3X104 4.OX1O6 3.4. Correlation Parameters Although the statistics on multifailure 
groups cau give an insight into the extent to which correlated failures exist, it does not quantify correlations 
between two subsys­tems and among multiple subsystems. Parameters that quantify two-way correlations 
(between two subsystems) and multiway correlations (among multiple subsystems) are useful for both the 
construction of analytical models and the evaluation of correlations inside a system. MEASURE+ produces 
two types of correlation parameters: the correla­tion coefficient and the conditional failure probability. 
The correlation coefficient is a commonly used meas­ure in statistics for quantifying the linear dependence 
between two random variables. Given random variables Xi ad Xj$ the correlation coefficient of Xi ~d Xj, 
Cor(Xi, Xj) or pij, is defined* [Hogg83] E [(xi+i)(xj+j)]Cor(Xi, Xj) = p~j = , (3.4) OiOj where vi ~d 
Pj are the means of Xi ad Xj, ~d ~i ad ~j the s~tid deviations of Xi and Xj, respectively. When computing 
correlation coefficients, MEASURE+ uses esti­mates of these parameters from data. For a measured system, 
Xi and Xj represent the states of subsystems i and j, respectively. For each time unit of the measured 
system, Xi (~d Xj) is defined in this way 1 subsystem i in failure state Xi= (3.5) O subsystem i in normal 
state . { Thus, Pij CZUIbe cdcuhted using ~. (3.4) ~d Eq. (3.5) for each pair of subsystems based on 
the measured dam given a time unit (e.g., 5-minutes). This integrated correlation analysis procedure 
has not been implemented in other tools. The measure pij has been used in [Tang92] to calculate unavailability 
for a system with only two-way correlations. To quantify multiway correlation, we introduced another 
measure conditional failure probabdity [Tang92]. When i (i>O) subsystems have failed in a multisubsystem 
system, two possible events may follow: 1) recovery of one failed subsystem, and 2) failure of one more 
subsystem. Based on this assumption, we define Pi,i+l to be the proba­bility that one more subsystem 
will fail, given that there are i failed subsystems. This conditional probability quantities the dependence 
of the (i+l)th failure on the ith failure. The measure has been used in [Tang92] to construct approxi­mate 
reliability Markov models for systems with multiway correlations. Table 4 shows some of correlation coefficients 
(with time unit being one minute) and conditional probabilities obtained from the VAXcluster data. Although 
these corre­lation parameters are not very high, it is shown in [Tang92] that they have significant impact 
on system availability and reliability. Table 4. Selected pij ad pij from the VAXcluSter Data Correlation 
Coefficient Conditional Probability lp121p~lp371p451P121PXl P341 I 0.055 I 0.088 I 0.109 I 0.230 I 0.112 
I 0.306 I 0.267 I 3.5. Autocorrelation Coefficients The correlation parameters dkcussed above quantify 
the linear dependence of failures (or errors) on different subsystems in the same time unit (window). 
Another way to view the dependence of failures is from the time perspec­tive (i.e., the correlation of 
failures across time windows). Given a time lag At >0, the autocorrelation coe~cient of a random variable, 
X, of a stochastic process X(t) is defined as Autocor(X, At)= Cor(X(l), X(t+At)). (3.6) Autocorrelation 
quantMes the time serial correlation in the data with a lag At (we will also call it window in the following 
discussion). In MEASURE+, tis only defined on discrete values (At, 2At, 3At, ...). which is consistent 
with Eq. (3.5). Thus, autocorrelation can be calculated using Eq. (3.4) and (3.5). Our experience [Tang93] 
shows that the correlation across machines is relatively insensitive to the window size, while the autocorrelation 
is very sensitive to the selected At. A high autocorrelation could be used to predict error frequency 
in the next window based on the error frequency in the current window. MEASURE+ can find the maximum 
autocorrelation coefficient and the corresponding window size for which the maximum auto­correlation 
was found, by trying different window sizes. Table 5 lists the results given by MEASURE+ for several 
types of the VAXcluster errors. Table 5. Maximum AutoCorrelation for VAXcluster Errors Err. Type CPU 
Memory Disk Network Software AU Autocor 0.33 0.99 0.61 0.28 0.31 0.60 At (hr.) 2.1 1<0 24 1.6 53 24 
3.6. Empirical Distribution and Hazard Functions Probability distributions of Time Between Failures (TBF) 
and Time To Recovery ( ITR) and hazard rates are needed in dependability modeling and evaluation. MEAS-URE+ 
can generate empirical TBF and ITR distributions and hazard functions for a subsystem as well as for 
the whole system. When MEASURE+ is given a set of multiple subsystem failure data, the multiple subsystems 
are viewed as a single resource. Every failure on all subsystems is sequentially ordered and then a distribution 
is constructed. In this way, the whole system is treated as a black box in which a failure on any subsystem 
is considered to be a failure of the whole system. MEASURE+ also gives the sample mean, median and standard 
deviation along with the distribution. The hazard rate can be considered to be the probabil­ity that 
a failure will occur within the coming unit of time, given that no failure has occurred since the start 
of the sys­tem or the last faiture occurrence. The mathematical definition of the hazard rate [Ross85] 
is as follows: Pr{failure in (t, t+df)) = * (3.7) h t)= Pr{no failures in (O, t)] dt where fit)and F(t) 
are the probability distribution function Figure 7. TBF Distribution for VAXcluster 1.00 _ Mean = 1.01 
Median = 0.09 0.1o- Std. DeV. = 1.87 f (t) 0.01­ 0.00 , 0 24 6 810 t (days) Figure 8. Failure Hazard 
for VAXcluster ~   0.3 h (t) 0.2 11 0.1­ 0.0 o t , , nI r 10 20 30 40 50 t (hours)  and the cumulative 
distribution function of TBE, respec­tively. In MEASURE+, an empirical hazard function is con­structed 
based on the empirical TBF probability distribu­tion, using a dt specitied by the user. Figures 7 and 
8 show the empirical TBF distribution and hazard functions gen­erated by MEASURE+ for the VAXcluster 
failure data. 4. Details of MEASURE+ The current implementation of the MEASURE+ main body includes three 
modules (Figure 1): MODEL, DISTRI and COR. The measured system is assumed to have n sub­systems such 
as a multicomputer system with n processors. The input files consist of a specification file and n data 
files containing coalesced data from n subsystems. All data files have the same format. In the following 
subsections, we describe the input data format, the specification for models and measures, and the output 
results. We also discuss implementation features including analysis of space and time complexity for 
the package. 4.1. Input Data Format Although it is impossible to make a tool that can accept any data 
forma~ the data format used in MEAS-URE+ can be easily extracted from on-line error logs of most computer 
systems. The format is designed based on the data analysis experience from previous measurement­based 
studies. MEASURE+ provides two levels of data interface: flat raw data and coalesced data (Figure 1). 
The tentative format of the flat data has been discussed in Sec­tion 2. This format must be transformed 
to the coalesced data format by a preprocessing (data coalescing) module before the MEASURE+ main body 
can use it. The coalesced data format is more machine-independent and users are encouraged to provide 
this type of data to MEAS-URE+. Each coalesced data file consists of a number of data records called 
error events which were defined in [Tang93]. SimMr concepts were used in several other stu­dies [Tsao83], 
[Iyer86], [Hansen92]. An error event is a set of coalesced errors caused (usually) by the same problem. 
It represents the occurrence of one or more errors of the same type in rapid succession. An error event 
should have at least the following five pieces of information: (1) event_id identification of the event 
 (2) no.entry number of error entries coalesced in the event (3) start_time logging time of the first 
entry in the event (4) end_time logging time of the last entry in the event (5) err_type error type 
of the event (i.e., of the error entries in the event)  MEASURE+ requires each error event to have at 
least these five fields. Users may include more fields in their data records. Table 6 shows a piece of 
the coalesced data for a machine (Earth) in the VAXcluster, In the VAXcluster data, the time unit is 
second. Errors are classified into seven different types: software, CPU, memory, disk tape, net­work, 
and unknown. An error type followed by an exclama­tion mark represents the corresponding failure type 
(i.e., a reboot is observed after the error). These details are left to users (other systems may have 
different definitions). Table 6. A Piece of Coalesced Data for Earth event_id no_entr y start.time end_time 
em_type 12793 11 32177392 32178646 Network! 12838 24 32178134 32178650 Disk 12896 1 32180179 32180179 
Network 12928 2 32182015 32182025 CPU 13470 2 32963455 32964054 Software !  4.2. Specification A specification 
file is required to give MEASURE+ the information about the data files (number and names of the files), 
the data format (number of fields in a record), the subset of data to process (e.g., to choose records 
with par­ticular error types and within a particular time segment), and some necessary parameters for 
model constmction (such as the number of states in the Markov model and the time window used in the calculation 
of correlation coefficients), Specifications for the three modules in MEASURE+ am slightly different. 
But a specification file must include the following information: (1) no_subsys number of subsystems 
(number of data files) (21) (2) no_fields number of fields in an error event (25) (3) no_types number 
of error types to process (20; O means all error types) (4) type_l error type 1 type.k error type 
k (k=no_typ%) (5) star_time start time of the segment to process end.time end time of the segment 
to process (6) datafile.1 name of &#38;ta file 1  datafile.n name of data file n (n=no.subsys) In 
the specification, users need to specify the error types to be processed. The user cai specify that all 
or only a subset of the error types be processed. This is done by giv­ing the number of error types followed 
by the name for each error type in the specification. In the VAXcluster example, disk, tape and network 
errors are grouped into a subset L@ errors. If we only want to process 1/0 errors, we ean set no_types 
to 3, and type_l, type_2, and type_3 to Disk, Tape, and Network, respectively. The start_time and end_time 
in the specification determine a time segment (could be the whole measurement period) used to build models 
and to acquire measures, All error events whose logging times fall into this period are to be processed. 
 4.3. Output Results When MEASURE+ generates models and measures, the statistical parameter estimators 
used are the sample mean, sample variance, sample percentage or probability, etc.. Whenever possible, 
confidence intervals for these esti­mates are also generated. The output results include the fol­lowing 
models and measures: Discrete-time Markov model transition frequen­cies and probabilities . Continuous-time 
Markov model transition fre­quencies, probtillities and rates, total and mean holding times, and occupancy 
probabilities Multifailure group statistics  Unavailabilities for k-out-of-n models (k =1, ....n) 
  Conditional failure probabilities P{ i +lth failure I ith failure} . Correlation coefficient for 
each pair of subsystems  Maximum autocorrelation coefficient with window size  Subsystem parameters 
 failure rate, recovery rate, and unavailability for each subsystem  . TBF mean, median, standard deviation, 
PDF and CDF . ITR mean, median, standard deviation, PDF and CDF Hazard rate function In addition to 
the above results, module MODEL also generates the holding time distribution and the associated error 
types for eaeh state in the Markov model. Table 7 shows a sample of the holding times for state 6 of 
the VAX­cluster error model [Tang93]. Each line in the table deseribes a visit of the system to state 
6 (six machines are in error state). Column 1 is the holding time (in seeonds) of the visit. Columns 
2 to 8 show the type and event_id (in parentheses) of the errors which lead to this visit (None means 
no error) for the seven machines in the VAXcluster. For example, the bottom line means that the system 
enters state 6 for 75 seconds due to disk errors suffered by machines 1 to 5 and 7. The event ids for 
these errors are 17075,9714,8690, 12807, 14094, and 11228, respectively. Table 7. A Sample of Holding 
Trees for State 6 of the VAXcluster Error Model HT Machinel Machine2 Machine3 Machine4 Machine5 Machine6 
Machine7 420 Disk(16708) Disk(9532) Disk(8525) Disk(12611) O Disk(13214) Disk(l 1059) 6 Disk(16847) Disk(9626) 
Disk(8602) O Disk(13947) Disk(13347) Disk(ll141) 30 Disk(9626) Disk(8602) Disk(12705) Disk(13947) Disk(13347) 
Disk(ll141) 283 Network(16946) Network(9673) Network(8638) Network(12745) Network(13994) O Network(ll 
172) 75 Disk(17075) Disk(9714) Disk(8690) Disk( 12807) Disk(14094) O Disk(l 1228) The holding time dktribution 
can be used to deter­mine if the transition model buitt is Markov (exponential distribution) or semi-Markov 
(nonexponential distribution). The distribution of the holding time at state O is also the dis­tribution 
of Time Between Failures (TBF) on any machines. Figure 9 shows the analytical function fitted by SAS 
for this distribution in the VAXcluster failure model. The ~z p­value ~ogg83] shown in the figure is 
the highest significance level at which a Chi-square goodness-of-fit test could be accepted (the lowest 
significance level for accep­tance is usually chosen as 0.05). An attempt to fit the meas­ured TBF to 
an exponential function failed to pass a Chi­square test at the significant level of 0.05. That is, the 
model built is a semi-Markov model, not a Markov model. It is seen from the figw that the TBF of the 
measured mul­ticomputer system can be modeled as a 2-phase hyperex­ponential function urived182], or 
a combination of two exponential modes: a lower failure rate mode and a higher failure rate mode. Figure 
9. Fitted TBF Distribution for VAXcluster that most rows are zero vectors (the system is in the normal 
state most of the time). Thus, a compression technique is used to store only non-zero rows. We can break 
T down into two parts: T. which represents the total time when the system is in the normal state, and 
Tf which represents the total time when the system is in a failure sate (at least one subsystem has failed). 
Usually we have Tf < Tn. The size of the compressed matrix can then be expressed as O (Tf/Al). This technique 
can typically save more than 90% of the memofy space as well as computation time. For the VAX­cluster 
failure dam the ratio Tf/T is about 0.01, i.e., the matrix size is reduced by 9990. The time complexity 
analysis for MEASURE+ is a little more complicated. Firs~ every data record must be processed. Thus, 
the time complexity is at least O(N) (as defined above, N is the number of records). In the construc­tion 
of a Markov model, all time units falling into Tf are examined step by step (because failure situations 
within this range can change very fast) while all time units falling into T. are skipped (to reduce computation 
time). Therefore, the time complexity for MODEL is O (N)+O (Tf). On a Sun Sparkstation ELC, it takes 
about one minute of CPU time for MODEL to build the VAXcluster failure model, and three minutes to build 
the VAXcluster error model. In the 0.8-~(t) = ~lkle-k + ~~e-~2 calculation of correlation coefficients, 
each pair of subsys­ rxl=0.81 11=0.17 tems needs a loop to construct the corresponding 0.6­ ~=0.19 ~=10.24 
compressed matrix (O (N/n)) and to compute the correla­ f(t) 04 tion coefficien~ using the compressed 
matrix (O (T/At)). (~ p-value = 0.43) Let the number of subsystem pairs in the system o.2-{ (M= ~ , where 
n is the number of subsystems as defined IT 0.0+ 1 before). Then the time complexity of the algorithm 
can be 10 t (alzys) 02468  4.4. Implementation Features MEASURE+ is written in the C programming language. 
The memory space used by the package depends on the size of input data. Data records (error events) are 
dynamically allocated according to input needs. The space complexity for MODEL and DISTRI can be described 
as O(N), where N is the input data size. Since the input is highly compressed, coalesced da@ it does 
not consume much memory. In the VAXcluster example (27788 error events), the memory space required for 
running MODEL is about 1.7M bytes. In addition to the input data size, the memory space taken by COR 
also depends on the time segment used to calculate correlation coefficients. When calculating corre­lation 
coefficients, we need to construct a matrix according to Eq. (3.5) based on the input data [Tang93]. 
The size of the matrix is O (T/At) where T is the length of the time seg­ment and At is the window size, 
specified by the user. The matrix size can be extremely large if T is large and At is small. However, 
the matrix is usually a sparse matrix in expressed as O (A4N/n)+O (MT/At). It takes about four minutes 
of CPU time for COR to process the VAXcluster error data on a Sun Sparkstation ELC, with M being 21, 
NAz being 3969, and T/At behg 10800. 5. A Complete Application Example In this section the VAXcluster 
data is used to illus­trate MEASURE+ applications. Assume that we want to use MODEL to process the VAXcluster 
failure data. Table 8 shows the contents of the specification file. This specification tells MEASURE+ 
to build a 5-state (F. to F4 in Figure 4) Markov model based on all seven types of failures, i.e., software, 
CPU, memory, dkk, tape, network, and unknown failures (exclamation mark means failure). If the number 
of states is specified as zero, MEASURE+ will automatically generate a k +1 -state model, where k is 
the maximum number of subsystems involved in multifailure groups. The specification also tells MEASURE+ 
that the failure data are in the seven files: earth.evt, .... saturn.evt (collected from the seven VAX 
machines). The time seg­ment used to build the model is 250 days, starting from 29548800 (relative time 
in seconds) and ending at 51148800. Table 8. Specification for the VAXcluster Failure Data Number of 
machines is 7. Number of statesin the Markov model is 5 (FO Fd). ; Number of fields in an error event 
is 5. Number of failure types is 7. Software! Software failures. CPU ! CPU faitures. Memory ! Memory 
Failures. Dkk! Disk failures. Tape! Tape failures. Network! Network failures. Unknown! Unknown faitures. 
29548800 Start time is 12arn, 1219187. 51148800 End time is 12am, 8/15/88. earth.evt Data file for machine 
Eaxth. europa.evt Data file for machine Europa. jupiter.evt Data file for machine Jupiter. leonardo.evt 
Data file for machine Leonardo. mars.evt Data file for machine Mars. mercury.evt Data file for machine 
Mercury. satum.evt Data file for machine Saturn. Table 9. Output Discrete-Tree Transition Frequency and 
Probability State to State Frryoy:l o 0 o 198 1 h 198 1 652652 ; 24 1 3 1 L ; 2 27912 3 10 ; 3 : ;;63 
3 4 4 4 4 4 ; 4057 Continuous-Time Transition Frequency, Probability, and Rate State to State ~;8quency 
o 1 : 198 1 24 : ; ;5 2 : 10 3 11 : 4 ; 3 4 State Holding Time (HT) and Occupancy Probability State 
Total HT (hours) o 5808.43 1 181.35 7.76 : 1.33 4 1.13 Multi-Failure Groups Events In Single Number 179 
PercentiConf. Int. 73.1*5.6  Based on the VAXcluster Failure Data Transition Model Prob.*Conf. Int. 
0.999991*OIMOO01 o.0000OHo.OOoool 0.000303MMMO042 0.999658MMIOO045 o.0ooo37to.0ooo15 o.000002*o.000002 
0.000895HU300351 0.998748f0.000451 0.000358~0.000222 0.002302Ml.001359 0.996861+0.001586 0.000837~0.000820 
0.000984~0.000965 0.999015k0.000965 Transition Model Prob.+Conf. Int. 1.000000 0.887892+0.041410 0.107623f0.040675 
0.004484*0.008770 0.714286+0.149666 0.285714~0.149666 0.733333k0.223792 0.266667&#38;0.223792 1.000000 
Mean HT (minutes) 1760.13 48.79 13.31 5.31 16.92 In Multiple 66 26.9t5.6 Rate(day) 8.181e-01 2.620287e+Ol 
3.176106e+O0 1.323377e-01 7.728915e+Ol 3.091566e+Ol 1.989117e+02 7.233152e+Ol 8.510219e+Ol Occ. Prob.iConf. 
Int. 0.968071*0.000074 0.030226*OMM072 0.001294ifMMOO15 0.000221i0.000006 o.ooo188*o.000006 Atl 245 100 
 Groups Single Multiple Number 179 PercentiConf. Int. 90.4*4.1 !Kti4.1 Probability {i+ltb failure I 
ith failure} itb failure ; 3 Subsystem 1 2 3 4 5 6 7 Model l-out-of-7 2-out-o f-7 3-out-o f-7 4-out-o 
f-7 5-out-of-7 6-out-o f-7 7-out-o f-7 i+l tb failure ; 4 Subsystem Parameters Failure Rate(day) 0.180912 
0.301466 0.112276 0.072120 0.080194 0.121061 0.117083 Unavailability for k-out-of-n Measure&#38;Conf. 
Int. O.oooe+oo 7.657e-05t3,690e-06 1.319e-04&#38;4.843e-06 1.880e-04&#38;5.782e-06 4.092e-04*8.529e-06 
1.703e-03*1 .739e-05 3.193e-02*7.414e-05 The output results are given in Table 9. In the output file, 
only non-zero results are printed. For example, if a transition frequency from state i to state j is 
zero, the transi­tion frequency, probability and rate from state i to state j are not printed in the 
file. This substantially reduces the size of output list. In the table, all results are actually measured 
from data except unavailabilities of independent k-out-of-n models, which are calculated using Eq. (3.2) 
and (3.3) for comparison with measured values. For most statistical esti­mates (such as probability and 
unavailability), 95% confidence intervals are also given. 6. Conclusion In this paper, we introduced 
MEASURE+ a new software package developed for measurement-based depen­dability analysis of a system 
with multiple subsystems. We discussed models and measures generated by the package. Commonly used models 
and measures in dependability evaluation including Markov and semi-Markov models, k­out-of-n availability 
models, failure distribution and hazard functions, and correlation parameters have been incor­porated 
into MEASURE+. We also discussed the MEAS-URE+ functionality, interface with users, and implementa­tion 
features, including data and specification formats, sta­tistical estimators, and space and time complexity. 
FinaUy, we gave a complete example to show how to use MEAS-URE+. Compared with most existing dependability 
and per­formance modeling and evaluation tools which are all Probability 0.112 0.306 0.267 Recovery Rate(day) 
35.696251 61.702533 45.637533 43.430423 33.122484 13.696314 12.539850 Models Independent 1.947e-17 3.984e-14 
3.293e-11 1.421e-08 3.453e-06 4.730e-04 3.396e-02 Alt 198 100 UnavailabilitytConf. Int. o.oo5045io.000030 
0.004866+0.000029 0.00245&#38;t0.000021 0.001659k0.000017 0.00240HMOO021 0.008758ifM100039 0.009252N.000040 
l$eas.e-hlgp. l1922e+09 4.006e+06 1.323e+04 1.185e+02 3.6ooe+oo 9.402e-01 parameter-based (i.e., input 
are parameters, not measured data) with emphasis on model solution techniques, MEAS- URE+ is a data-based 
tool with emphasis on the identification of realistic models and acquisition of appropriate parameters 
from measurements, While the evaluated results of the existing tools are highly dependent on the model 
assumption and input parameters, all models and measures generated by MEASURE+ are obtained from field 
data. No assumptions such as failure independence are made in the construction of models and in the acquisition 
of measures. These models and measures are accurate reflections of system behavior. They are valuable 
for understanding actual error/failure characteristics, identify­ing system bottlenecks, evaluating dependability 
for real systems, verifying assumptions and providing accurate parameters for analytical models. The 
models identified by applying MEASURE+ to the failure data from a VAXcluster indicate that neither traditional 
models assuming failure independence nor those few models believed to take correlation into account am 
representative of the actual occurrence process of correlated failures observed in multicomputer systems. 
Such informa­tion can be obtained only through analysis on measurements as MEASURE-t does. In the future, 
more function modules can be incorporated into MEASURE+. Acknowledgements The authors would like to 
thank Prof. Kishor Trivedi at Duke University for useful discussions on the partial coverage models. 
Thanks are also due to Dr. Robert Dimpsey, Kumar Goswami, and Inhwan Lee for their valu­able comments 
on this manuscript. This research was sup­ported by the Office of Naval Research (ONR) under Con­tract 
NOO014-91-J-1116. References [Arnold73] T.F, Arnold, The Concept of Coverage and Its Effect on the Reliabdity 
Model of a Repairable System, IEEE Transactions on Computers, Vol C-22, March 1973, pp. 251-154. [de 
Souza89] E. de Souza e Silva and H.R. Gail, Calculat­ing Availability and Performability Measures of 
Repairable Computer Systems Using Randomization, 36, No. 1, pp. 171-193,1989. J. ACM, Vol. [DEC86] Digital 
Equipment tems Handbook, April 1986. Corporation, WiXcluster Sys­ wurchtgott84] D. Furchtgott and J.F. 
Meyer, A Performa­bility Solution Method for Degradable Nonrepairable Sys­tems, IEEE Trans. Computers, 
Vol. 33, No. 6, pp. 550­554, June 1984. [Geist90] R. Geist and K. Trivedi, Reliability Estimation of 
Fault-Tolerant Systems: Tools and Techniques, IEEE Computer, pp. 52-61, July 1990. [Goya186] A. Goyal, 
et al., The System Availability Esti­mator, Proc, 16th Znt. Symp. Fault-Tolerant Computing, pp. 84-89, 
June 1986. [Goya192] A. Goyal, P. Shahabuddin, P. Heidelberger, V.F. Nicola, and P,W. Glynn, A Unified 
Framework for Simu­lating Markovian Models of Highly Dependable Systems, IEEE Trans. Computers, Vol. 
41, No. 1, pp. 36-51, Jan. 1992. [Hansen92] J.P. Hansen and D.P, Siewiorek, Models for Time Coalescence 
in Event Logs, Proc. 22nd Int. Symp. Fault-Tolerant Computing, pp. 221-227, July 1992. [Hogg83] R.V. 
Hogg and E.A. Tanis, Probability and Sta­tistical Inference, Second Edition, Macmillan Publishing Co., 
Inc., 1983. [Hsueh88] M.C. Hsueh, R.K, Iyer, and K.S. Trivedi, Per­formability Modeling Based on Real 
Dam A Case Study, IEEE Trans. Computers, Vol. 37, No.4, pp. 478-484, April 1988, [Iyer86] R.K. Iyer, 
D.J. Rossetti and M.C. Hsueh, Meas­ urement and Modeling of Computer Reliability as Affected by System 
Activity, ACM Trans. Computer Systems, Vol. 4, No. 3, pp. 214-237, Aug. 1986. [Johnson881 A.M. Johnson, 
Jr. and M. Malek, Survey of Software Tools for Evaluating Reliability, Availability, and Serviceability 
, ACM Computing Surveys, Vol. 20, No. 4, pp. 228-269, Dec. 1988. [Lee91] I. Lee, R.K. Iyer and D. Tang, 
Error/Failure Analysis Using Event Logs from Fault Tolerant Systems, Proc. 21st Int. Symp. Fault-Tolerant 
Computing, pp. 10-17, June 1991. [Meyer80] J.F. Meyer, On Evaluating the Performability of Degradable 
Computing Systems, IEEE Trans. Comput­ers, Vol. 29, No. 8, pp. 720-731, Aug. 1980. [Meyer92] J.F. Meyer, 
Performability: A Retrospective and Some Pointers to the Future, Perj40rmance Evaluation, Vol. 14, pp. 
139-156, Feb. 1992.. [Reibman89] A. Reibman, R. Smith, and K. Trivedi, Mar­kov and Markov Reward Model 
Transient Analysis: An Overview of Numerical Approaches, European Journal of Operational Research, Vol. 
40, pp. 257-267,1989. [Ross85] S.M. Ross, Introduction to Probability Models, 3rd Edition, Academic Press, 
Inc., 1985. [Sahner] R.A. Sahner and K.S. Trivedi, Reliability Model­ing Using SHARPE, IEEE Trans. Reliability, 
Vol. 36, No. 2, pp. 186-193, June 1987. [SAS8S] SAS Institute Inc., SAS User s Guide: Statistics, Version 
5 Edition, Cary, NC, 1985. [Tang90] D. Tang, R.K. Iyer, and S.S. Subramani, Failure Analysis and Modeling 
of a VAXcluster System, Proc. 20th Int. Symp. Fault-Tolerant Computing, pp. 244-251, June 1990. [Tang92] 
D. Tang and R. K. Iyer, Analysis and Modeling of Correlated Failures in Multicomputer Systems, ZEEE Trans. 
Computers, Vol. 41, No. 5. pp. 567-577, May 1992. [Tang93] D. Tang and R.K. Iyer, Dependability Measure­ment 
and Modeling of a Multicomputer System, IEEE Trans. Computers, Vol. 42, No. 1, Jan. 1993. [Trivedi82] 
K.S. Trivedi, Probability and Statistics with Reliability, Queuing, and Computer Science Applications, 
Prentice-Hall, Englewood Cliffs, NJ, 1982. [Trivedi92] K.S. Trivedi, J.K. Muppala, S.P. WooleL and B.R, 
Haverkorl Composite Performance and Dependabil­ity Analysis, Pe@ormance Evaluation, Vol. 14, pp.197­215, 
Feb. 1992. [Tsao83] M.M. Tsao and D.P. Siewiorek, Trend Analysis on System Error files, Proc. 13th Int. 
Symp. Fault-Tolerant Computing, pp. 116-119, June 1983. [Wein90] A.S. Wein and A. Sathaye, Validating 
Complex Computer System Availability Models, IEEE Trans. Relia­bility, Vol. 39, No. 4, pp. 468-479, Oct. 
1990.  
			