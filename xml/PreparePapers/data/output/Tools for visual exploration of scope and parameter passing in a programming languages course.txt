
 TOOLS FOR VISUAL EXPLORATION OF SCOPE AND PARAMETER PASSING IN A PROGRAMMING LANGUAGES COURSE Thomas 
L. Naps, Lawrence University, napst @lawrence.edu Jeremy Stenglein, Lawrence University, stenglej @lawrence.edu 
 INTRODUCTION In a programming g languages course, a student must struggle with numerous parameter passing 
tectilques and also with different means of resolving the scope of variables that are not local to a 
procedure. Parameter passing methods typically studied include value, reference, copy-restore (valueresult), 
and macro (pass-by-name). Scope resolution teetilques include dynamic and static scoping, with static 
scoping implemented either by static chains or displays. Coping with all of these issues requires that 
the student have a solid understanding of the stack of activation records that is maintained by an exexuting 
program. We have developed a miniature Pascal-like language and accompanying user environment (called 
PSVE) expressly designed to allow exploration of parameter passing and scoping questions. By providing 
links to the GAIGS algorithm visualization system, the PSVE system allows a student to view a graphical 
rendering of the stack of activation records at user-selected key points of program execution. BACKGROUND 
The study of parameter passing and scope of variables does not require a language with decisional logic 
and iterative constructs. Nor does it require structured data types. Hence the progr amrning language 
underlying the PSVE (Parameter and Scope Visualization Environment) offers only assignment statements 
and procedures, However, understanding parameter passing and scope does requires an astute awareness 
of the role played by the stack of activation records that is maintained by an executing program. The 
PSVE system provides students with such an awareness by producing detailed graphical snapshots of th~ 
stack at key points within a program s execution. These snapshots are rendered by the GAIGS algorithm 
visualization system that has been developed by faculty and students at Lawrence University. The syntax 
of the PSVE language strongly resembles Pascal except for extensions to the syntax of formal parameter 
lists. The PSVE language has the same block structure as Pascal. Each program consists of a title line, 
a variable declaration line, procedure declarations, and a main statement block. Each procedure itself 
has a title line, a variable declaration line, procedure declarations, and a Permission to copy without 
fee all or part of this material is gmnted provided that the copies am not made or distributed for direct 
commercial advantage, the ACM copyright notice and the fiUe of the publication and k date appear, and 
notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise 
or to republish, requires a fee andlor specific pemdke.ion. SIGCSE 96 2/9S Philadelphia, PA USA 199S 
ACM O-89791 -757 -X/9S10002 ....50.5O statement block. Ile structure of the main program title lime is 
as follows: PROGRAM prog.name; where prog_name is a user-specifkd identifier. Identifiers can be made 
up of letters, numbers, and underscores, with the provision that the fiit letter of an identifier must 
be a letter. LAe Pas@ the PSVE language is not case sensitive, The variable declaration lime of both 
the main program and the procedures has the following structure VAR v_namel, v_name2, .... v_namelV : 
INTEGER; The variable declaration line is optional in both the main program and the procedures. As the 
structure of the variable declaration lime indicates, the only data type in the PSVE language is integer. 
The procedure title lime has the following form: PROCEDURE procedure_name (val]araml, .... val]aramN 
: INTEGER; VAR var>araml, .... var~aramN : INTEGER; COP YRESTORE CRparl, .... CR_ParN : INTEGER; MACRO 
Macro~arl, .... Macro>arN : INTEGER): Like Pascal, the formal parameter liit is optional, and not every 
type of formal parameter needs to be included in it. The PSVE language supports four types of parameter 
passing: pass by reference, pass by value, pass by copy­restore, and pass by macro. Pass by reference 
and pass by value are also available in Pascal, and they have the same semantic behavior in PSVE as they 
do in Pascal. Pass by copy-restore and pass by macro, on the other hand, are not found in Pascal, so 
they will be discussed here briefly. If a program in PSVE contains a procedure Foo, and Foo has a formal 
copyrestore parameter X, and X has the corresponding actual parameter A in a call to Foo, then the value 
of A is copied into X when Foo is entered. Changes to X while Foo executes do not affect the value of 
A, However, when Foo is finished executing, the value of X is copied back to A. If a program in PSVE 
contains a procedure Foo_2, and Foo_2 has a formal macro parameter Y, and Y has the corresponding actual 
parameter B in a call to Foo_2, then any reference to Yin Foo_2 will be replaced with the textual string 
B at runtirne. Like Pascal, the main program statement block k enclosed between the reserved words BEGIN 
and END, and the block is terminated with a period. The statement blocks of procedures are also enclosed 
between BEGIN and END, but a semicolon, not a period, ends the procedure s block. Three types of statements 
are allowed inside statement blocks, and each type of statement is terminated with a semicolon. The first 
type of statement is the TRACE statement. A TRACE statement takes a snapshot of the runtime stack when 
it is encountered in a user s program -­a snapshot which can then be viewed with GAIGS. The second statement 
type is the procedure call, which has the form: Procedure_Name (Actual-1, Actual_2, .... Actual_N); Passing 
in expressions (such as 5 + x) to macro and value formal parameters is allowed, but such expressions 
cannot be passed to var and copyrestore parameters. The third type of statement is the assignment statement, 
which has the form Leji_hand_side-ident@er := expression; Lefl-hati_skle=kient@er must be a valid variable 
or formal parameter withtn the current scope, and expression may be one of the following: an integer 
number, a declared variable, a formal parameter, expression + expression, expression ­expression, expression 
* expression, expression DIV expression, expression MOD expression, (expression), or -expression. Multiline 
comments are permitted by the PSVE language and are enclosed in curly braces {--). If the PSVE interpreter 
attempts to compile a program that contains a syntax error, it will detect that error, and display an 
appropriate error message so that the user can track down where the error occurred. Specific examples 
of programs that have been written in the PSVE will be discussed at length in the sections that follow. 
Beyond the parameter passing options that PSVE offers, the environment of the interpreter presents a 
variety of options with respect to both the scoping of non-local variables and the input/execution of 
programs. When a user enters the PSVE environment, she will be presented with a choice of three different 
scoping options for non-local variables. These options are static binding implemented with static chains, 
static binding implemented with displays, and dynamic binding. The PSVE interpreter is able to create 
GAIGS snapshots that graphically illustrate how each of these three methods work. For example, if a user 
selects displays as her desired non-local variable access method and enters a program in PSVE, the interpreter 
will create snapshots that illustrate how the pointers in the display array are maintained while her 
program executes. In addition to being able to select the non-local variable reference method, users 
of the PSVE interpreter may choose two different ways to input their program: they may load their program 
from a text file, or they may enter their program interactively. If a user selects interactive entry, 
she can enter her PSVE program using a full-featured text editor. Finally, users can choose to run the 
PSVE interpreter separately from or concurrently with GAIGS. When run separately from GAIGS, the PSVE 
interpreter produces show fdeis that can be rendered by GAIGS at a later time. When run concurrently 
with GAIGS, the PSVE interpreter communicates its snapshots to GAIGS by using the interprocess communication 
facilities of Microsoft Windows. PARAMETER PASSING VISUALIZED IN PSVE To illustrate how the PSVE language 
environment may be used to study parameter passing, consider the following PSVE program. Figure 1 displays 
several of the key snapshots rendered by GAIGS as this program executes. program pararnpas% var a, b: 
integeq procedure pvalue(x, y, z : integer); begin y:=y+l; Z:=z +x; TRACE end; begin a :-2; b := 3; 
pvalue(a+b, a, a); TRACE end. Following the Pascal convention that the absence of a parameter-passing 
keyword in front of a formal parameter implies that pass-by-value semantics will be used, Figure 1a clearly 
illustrates how copies of the actual parameters are situated in the activation record upon entry to the 
procedure. Entering Procedure pvaiue Trace VALUE-Z 2 VALIJI-Z 7 ~ VALUE-Y VALUE-X 2 5 la VALUE-Y VALUE-X 
3 5 b LOCALB 3 LOCAL-B 3 LOCAL-A 2 LOCAL-A 2 Returning from procedure pval ue &#38; lC LO.=AL-B 3 LCC.M-A 
2 Figure 1--Stack snapshots for pass-by-value semantics Figure lb shows how these copies have been altered 
just prior to returning from the procedure. Finally, Figure lC reinforces the notion that the calling 
program s variables have been left untouched by procedure pw-due upon return. Now suppose that we keep 
unchanged the main program from the previous example with the exception that we replace the call to pvalue 
with the call prefia +b, a, a) where pref is defined by: procedure pref(x : intege~ var y, z : integer); 
begin y:=y+l; Z:-z +x; TRACE end; Note that pref is essentially the same as the previous pvalue procedure 
except that we have changed the parameter passing semantics of y and z to pass-by-reference instead of 
pass-by-value. Figure 2 illustrates the GAIGS­rendered stack snapshots produced by PSVE for this example. 
Figure 2a indicates that, upon entering procedure pref the formal parameters y and z are actually references 
to the global variable a instead of being copies of the value of a as they were in Figure 1. The TRACE 
snapshot of Figure 2b, produced just prior to leaving prej shows that a, the variable associated with 
y and z, has already been altered during prefs execu~ion. Figure 2C emphasizes to the student that the 
value of a is altered upon return to the main program. TraceEntering Procedure pref VAR-Y Act 2a VARYAct 
2b + vALm-x 5 + VALUE X5 WC AL-B 3 LOCALB3 LOCAL-AZ LCX2AL A8 Returning from procedure pref 2C LWALB 
3 LOC AL-A 8 !!!!!!? Figure 2--Stack snapshots, pass-by-reference semantics To illustrate copy-restore 
semantics, we keep unchanged the main program from our previous examples with the exception that the 
critical procedure call is replaced by pcopyrestore(a +b, a, a) where the pcopyrescore procedure is defiied 
by: procedure pcopyrestore(x : integeq copyrestore y, z : integer); begin y:=y+l; Z:=z +x; TRACE end; 
Procedure pcopyres{ore is the same as pvalue and pref except that we have changed the parameter passing 
semantics of y and z to copy-restore. Figure 3 illustrates the GAIGS-reudered stack snapshots produced 
by PSVE for this example. Figure 3a indicates that, upon entering procedure pcopyrestore, the formal 
parameters y and z are linked to the global variable a but have copies of a s value to work with during 
the execution of the procedure. The TRACE snapshot of Figure 3b, produced just prior to leaving pcopyrestore, 
shows that, although the values of y and z have been altered from what they were upon entry to the procedure, 
the global variable a has not been altered at this point in time (compare to the reference semantics 
of Figure 2b). Fmlly, Figure 3C depicts that the value of a is altered only upon returning to the main 
program. Because the semantics of copy-restore are different from those of reference, a comparison of 
the snapshots in Figures 2 and 3 clearly illustrates to the student why different results are odu&#38;d 
by these two methods. - Entering Procedure pcopyrcstore Trace 3a 3b LOCAL-B SLOCAL-B 3 LOCAL-A 2 LOCAL-A2 
Returning from procedure peopyrestore 3C LOCAL-B 3 LOCAL-A 7 !!!!!! Figure 3--Stack snapshots for copy-restore 
semantics We can now illustrate that macro semantics coupled with the same basic program produces different 
results than any of the three previous methods. We merely replace the procedure call with pmucro(a +b, 
a, a) where procedure pmacro is defined by: procedure pmacro(macro x, y, z : integer); begin y:=y+l; 
TRACE; Z:=z +x, TRACE end; Procedure pmacro is the same as pvalue, pre~ and pcopyreslore except that 
we have changed the semantics of all three parameters to macro passage. Figure 4 illustrates the key 
GAIGS-rendered stack snapshots produced by PSVE for this example. Figure 4a indicates that, upon entering 
procedure pmacro, the formal parameters x, y, and z are now to have the textual strings a+b , a , and 
a substituted for them when the pmacro procedure is executed. Hence the TRACE snapshot in Figure 4b, 
following execution of the instruction y := y + 1, shows that the value of a in the global environment 
has changed. Similarly, the TRACE snapshot of Figure 4c, produced just prior to leaving pmacro and after 
the execution of the instruction z : = z + x, shows that the global variable a has been altered as per 
execution of the instruction a := a + a + b. Finally, Figure 4d reinforces that the value of a upon return 
to the main program is now different than what it was under any of the three prior examples. Entering 
Procedure pmacro Trace ,b Trace Returning from procedure pmacro *4C h4d igure 4 --Stack snapshots for 
macro semantics SCOPING VISUALIZED IN PSVE Consider the program given below. Though its style is not 
one we would encou;age students to fofiow, i~ scoping complexities will tax even the best of students 
in a programming languages course. PSVE will execute and visualize this program under three options --static 
scoping with static pointers accompanying the runtime stack of activation records, static scoping with 
a display accompanying the runtirne stack, or dynamic scoping. PROGRAM MAIN; VAR c, d : integeq PROCEDURE 
BigSuQ ( BigSub} VAR a, b, c : integeg PROCEDURE Subl; { Subl ] VAR a, b : intege~ BEGIN a:= 13; b := 
14; c:= 15;d:= 16; TRACE; END; { of Subl ] PROCEDURE Sub2; { Sub2 ] VAR d, e : intege~ PROCEDURE Sub3; 
( Sub3 ] VAR c, e : intege~ BEGIN c := 12; e := b+a+d; Subl; TRACE, END; { of Sub3 ] BEGIN a:=7; b:== 
8;c:=9; d:= 10, e:=ll; Sub3; TRACE; END; { of Sub2) BEGIN a:=3; b:=4; c:=5; d:=6; Sub2; TRACE END; 
( of BigSub) BEGIN c:=l; d:=2; BigSub; END. [of MAIN) 14 141A 5a -Static chains 5b -Displays 5C -Dynamic 
Figure 5--Static scope semantics versus dynamic scope semantics Although a run of the program produces 
an entire sequence of snapshots, Figure 5 compares only the snapshots produced by each of the three modes 
of scoping at the TRACE prior to exiting PROCEDURE Subl. In Figures 5a and 5b, we note that the contents 
of all memory locations are the same --shading is used by PSVE to highlight the non-local variables that 
are referenced in Subl. The only differences between Figures 5a and 5b are in the technique used to fmd 
non-lccal variables in the runtime stack. Figure 5a shows that this search path is maintained by static 
pointers that are embedded directly into the stack while Figure 5b shows an array of display pointers 
that allow random access to any of the activation records that are accessible from Sub2. The shading 
in Figure 5c, in which dynamic binding is depicted, indicates that different locations in the runtime 
stack are accessed when the non­local variables of Subl are accessed under these semantics. With dynamic 
binding the search for the non-local variables c and d in Subl is a purely linear search beginniig at 
the top of the stack no static pointers or displays interrupt the sequential nature of this search, Thk 
variation in the runtime search employed for non-local variables results in distinctly different program 
behavior under dynamic and static binding --a difference that is made clear by comparing the locations 
changed in Figure 5C with those that are changed in 5a and 5b. AVAILABILITY AND FUTURE DIRECTIONS PSVE 
and the GAIGS algorithm visualization system that must be used to render PSVE snapshots are both written 
in Borland s Delphi Development System for Pascal and run under Microsoft Windows 3.1. Both are available 
by anonymous ftp from jlp. hzwrence. edu. After logging in to th~ site, change your directory to muth.dir 
and consult the README file in that directory for directions on how to download and install both systems. 
As downloaded, the system is ready to use both by instructors who wish to visually present the nuances 
of parameter passing and scope and by students who wish to visually explore the same nuances in self-study 
mode. We are also intrigued by possible modifications and extensions that may be made to the system in 
the future. One of our goals during the development of the PSVE interpreter was to make it as extensible 
as possible, The following discussion will attempt to show how an enterprising user could extend the 
interpreter in two ways: fret, by changing or extending the language it accepts, and second, by creating 
a new interactive environment. The interpreter inside the PSVE system was developed with a software tool 
called Visual Parse+ + (from Sandstone Technology, Inc.). Visual Parse++ performs the same functions 
as the UNIX-based Lex and YACC tools that is, it makes it easy to create a lexical analyzer and a parser 
for a given input grammar. During the development of the PSVE interpreter, we created a grammar that 
led to the Pascal-like language we have described in th~ paper. When provided with thk grammar as its 
input, Visual Parse++ creates a Delphi-based lexical analyzer and parser for the PSVE. After using Visual 
Parse++ to create the lexical analyzer and parser, we developed the actual PSVE interpreter. This interpreter 
executes the source program in the following manner. First, it feeds the source program to the parser 
that was constructed by Visual Parse++, Thk parser checks the syntax of the input program and informs 
our interpreter every time a reduction in the grammar occurs. Using this reduction information, the PSVE 
interpreter builds an abstract syntax tree that represents the user s source program. By traversing this 
tree, the PSVE interpreter creates the relevant symbol tables and then executes the source program. There 
is nothing about the structure of the abstract syntax tree that requires it to be built using the Pascal-like 
language we presently employ. For instance, thk language could be enhanced to allow parameters that are 
themselves procedures. In its simplest form, such an enhancement would only allow such parameters to 
be input parameters, That is, a procedure could accept other procdeures as parameters it would use, but 
a procedure could not construct procedures that it would return to the calling program. A more complex 
enhancement along these lines would allow procedures to be viewed as fiist-class values, that is, procedures 
could create new procedures and return them as computed values. For an instructor whose students are 
not familiar with Pascal, another possible alteration to the PSVE language would be to drastically alter 
its syntax to make it resemble the language in which her students are well-versed --for example, C or 
Modula-2. Such an extension would require providing a new grammar as input to Visual Parse++, in addition 
to modifying the way in which the abstract syntax tree is built, If one kept the new input language relatively 
small, and lirnhed the data structures and semantics of the new language to those supported by the present 
PSVE, then adding the new language would only require rewriting a small subset of the source code modules 
of the PSVE interpreter. Another way to extend the PSVE interpreter would be to create an input environment 
that would allow a user of the interpreter to interactively select locations within the source program 
at which snapshots were displayed, much like an interactive debugger, instead of usirtg the current TRACE 
instruction to create snapshots. This debugger for the PSVE interpreter could work in several ways. For 
example, it could allow a user to single step through an input program and create GAIGS snapshots of 
the current runtime stack when a certain hot key is pressed, or it could create snapshots at places where 
the user has interactively selected a line, much like a programmer would select a breakpoint in a debugger, 
Such an extemion would be facilitated by the software tools that we have used to develop PSVE. Visual 
Parse++ supplies detailed information on the location of tokens within the source file as it performs 
its grammatical reductions. This information could be coupled with the event-driven interface supported 
by Borland s Delphi (the language in which PSVE is written) to correlate user-triggered tracing requests 
with the structure of the abstract syntax tree, thereby enabling program execution and snapshot creation 
to be controlled in a fashion more resembling that of a typical debugger, Bibliography 1. Brown, Marc. 
Algorithm Animation. MIT Press, Cambridge, MA, 1987. 2. Delphi for Windows User s Guide, Borland International, 
Inc., Scotts Valley, CA, 1995. 3. GAIGS User Manual, Ver. 3.0, Lawrence Computing Center Publications, 
Appleton, WI, 1994. 4. Kamin, Samuel K., Programming Languages: An Interpreter-Based Approach, Addison 
Wesley, Reading, MA, 1990. 5. Louden, Kenneth C., Programming Languages: Principles and Praclice, PWS-Kent, 
Boston, MA, 1993. 6. Sebesta, Robert W., Concepts of Programming Languages, Benjamin-Cummings, Redwood 
City, CA, 1994, 7. Visual Parse + + Reference Manual, Sandstone Technologies, Inc, Carlsbad, CA, 1995 
 
			