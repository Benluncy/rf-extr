
 leaching Compiler Development Bill Appelbe Department of Applied Physics and Information Science University 
of California, San Diego La Jolla, Abstract Although a course in Compiler Development is common in 
both undergraduate and graduate computer science curriculum there has been little agreement on how to 
achieve a balance between theory and practice within a single semester course. This article proposes 
a new approach to teaching compiler development, to enable students to gain both the experience of writing 
a modular compiler and a theoretical background in compiler design, within the scope of a one semester 
course. The approach advocated is based upon the integration of the course project and the course lectures, 
enabling students to develop a modular compiler for a general purpose high level algorithmic language. 
Tilecourse project uses a simple parser generator and syntax- directed translation techniques to minimze 
the programming effort without oversimplifying the design of the compiler. The course was taught at 
Southern Methodist University to a senior undergraduate class, who developed and debugged useable compilers 
without the common symptom of major programming projects: programming to meet a deadline rather th3n 
a design. Section I. Introduction Although a course in Compiler Development is not normally required 
as a prerequisite in a computer science curriculum, it is often offered as an option or "topics course" 
at the senior undergraduate or graduate level [Aust 77]. There are two principal reasons for the popularity 
of the course: it provides insight into the implementation and design of programming languages, and it 
provides familiarity with the development of system California 92093 software. Unfortunately there 
is an immediat~ conflict between these two goals of theory and practice. A pragmatic approach to compiler 
development, based upon the philosophy that the best way of "learning" is "doing", usually involves students 
in a major programming project. Unfortunately the effort devoted to the project frequently reduces the 
breadth of the course, and may divorce the project from the course material. A theoretical approach to 
compiler development usually involves the students in several assignments directly related to the course 
material, such as analyzing context free grammars or code generation algorithms. In this case the students 
avoid the experience of developing a compiler, and may not gain an appreciation of the interactions between 
different components of a compiler. Many of the practical issues in compiler development, such as symbol 
table manipulation, are difficult to appreciate without a detailed knowledge of the design of a compiler 
for a reasonably powerful high-level language. An effective compromise between theory and practice can 
only be achieved if the course project is directly related to the course material, and suitable tools 
are used to reduce the programming effort devoted to the project. Section II. Integrated Compiler Development 
 Students enrolling in a senior level course on Compiler Development must have a strong background in 
computer science, covering the core of the ACM curriculum recommendations. The minimum prerequisites 
should cover: (I) Familiarity with at least one high-level block structured language such as PASCAL, 
PL/I or ALGOL. (2) Familiarity with at least one assembly language.  (3) An introduction to data structures, 
including sorting and searching, list and stack organization. (4) An exposure to BNF notation.  The 
topics usually covered by a senior level course in compiler development are listed in Table I. Although 
the emphasis on different topics varies the sequence of topics is usually based upon the sequence of 
operations performed by a compiler: scanning, parsing, and code generation. Although there is little 
agreement regarding the course project for a course in Compiler Development, the majority of senior undergraduate 
courses are structured as follows: I. Overview of Compilation Structure of a Compiler Syntax and Semantics 
 Source and Object Languages 2. Scanning  3. Parsing Top-down and bottom-up techniques  4. Semantics 
Symbol tables Run-time organization Intermediate representation Syntax-directed translation  5. Optimization 
 6. Object Code Generation  7. Case Studies and Compiler Writing Aids  Table I. Compiler Development: 
Course Outline Despite the similar content of most courses in compiler development there is great variation 
in the course projects [Ahma 78] [Shap 76]. The major problem encountered in devising a suitable course 
project is in limiting the size of the project while keeping it relevant to the course material. There 
are three plausible approaches to limiting the size of the project: (I) Reduce the complexity of the 
source language.  (2) Reduce the complexity of the object language.  (3) Provide tools to reduce the 
time devoted to programming.  Although all three of these approaches can be combined there is a danger 
in reducing the project to an "academic exercise". In the author's experience the project has value if: 
 (1) The source language is sufficiently complex that students can write and run meaningful programs 
using their compilers. A suitable choice is a syntactically simple subset of a language that the students 
are already familiar with. The language should permit recursive procedures, arrays, and control structure 
for conditional and repetitive statements. There is little point in writing a compiler for a poorly structured 
langugage such as Fortran as the structure of the compiler invariably reflects the language.  (2) The 
object language should preferably be as simple as possible, and may be chosen to reflect the source language 
of the compiler. The complexity of the object code generation phase is directly dependent upon the complexity 
of the object language. Efficient object code generation depends on a detailed knowledge of the machine 
and usually is independent of the structure of the compiler. (3) The tools used should reduce the complexity 
of developing the compiler, but should not hide the function of the compiler from the student. Thus even 
if a powerful translator writing system were available, its use might be restricted as the aim of the 
project is not merely to "generate" a compiler. One of the most convenient approaches is to write the 
compiler in a suitable systems programming language, such as PASCAL, PL/I or C. Although languages such 
as Assembler and Fortran can be used to implement sophisticated comilers, the implementor faces the task 
of encoding the data structures of the compiler such as lists, tables, and records, using simple multidimensional 
arrays.  The most valuable experience in a Compiler Development course is the task of developing a 
compiler, through the stages of design, coding, and testing. Thus the aims of a Compiler Development 
course overlap those of a Software Engineering Laboratory, with the distinction that a course in Compiler 
Development has a specific focus, and much of the implementation detail of the project will only be learnt 
as the course progresses. Ideally the course project and the course topics outlined in Table I should 
be developed in parallel. Although the course project may be done in small groups of students rather 
than by individuals the aim of the project is not to teach project management techniques. The author's 
experience is that teams may spend as much time settling conflicts as in designing. 24 The tools adopted 
should minimize the programming effort required to implement the compiler, while maximizing the students 
 understanding of the compiler's function. The best model for compiler design is Syntax Directed Translation, 
which can be used in conjunction with either a top-down or bottom-up Parser. The most adaptable modern 
parsing technique is LR parsing [Aho 77], as the majority of languages can be expressed naturally using 
restricted LR grammars, such as a SLR(1) or LALR(1) grammar. Traditionally, the most common parsing techniques 
have been top-down approaches such as recursive descent and bottom- up approaches such as precedence 
parsing [Grie 71]. Although these are easy to implement manually for small grammars, they tend to become 
unwieldy when applied to complex grammars. LR grammars offer the advantage that the LR parser is table 
driven and independent of the complexity of the grammar. LR parsers can also be used in conjunction with 
syntax- directed trans]ation methods. Although the implementation of a table driven LR Parser is relatively 
simple, the construction of the tables is manually impractical even for small grammars. Thus if the course 
project uses an LR Parser the students must be provided with a Parser Generator to produce the tables. 
 Using a Parser Generator to analyse grammars has a major advantage, as the students get "hands on" experience 
with the problems of language definition. The grammar that was used to define the source language for 
the project was deliberately chosen to be ambiguous, so that the students would have to modify the grammar 
without altering the language. Although LR Parser Generators are not commonly available they are being 
implemented in increasing numbers. A portable SLR Parser Generator, written in Fortran, has been developed 
at Southern Methodist University and can be obtained from the author. Section III. Project Description 
 The primary aim in the course project was to give students the experience of working in a small team 
to develop a usable compiler. The secondary aims of the project were as follows: (I) To learn how to 
prepare a project timetable, and implement a software project in stages. The only feasible technique 
for organizing a major software project, through the phases of the design, coding, debugging, and testing 
is by means of a detailed timetable. The project must specify that students submit an initial design 
outline and project timetable. Students must then submit regular progress reports, accounting for any 
difficulties or delays in meeting the timetable. The author's experience has been that many students 
will delay working on the project unless they prepare and submit a personal timeta~le, followed by regular 
progress reports. Progress reports also allow the instructor to identify and correct faults in the students 
designs or the specifications before they require major recoding. (2) To develop the ability to manipulate 
grammars, and to appreciate the interaction between the source language syntax and the parsing techniques 
used in a compiler. (3) To develop an appreciation for the interaction between the source language syntax 
and semantics, using single pass Syntax Directed Translation.  While designing the compiler students 
face problems such as forward function references, backpatching instructions, and generating code to 
compute array addresses.  (4) To integrate the course material with the project (Table 2) so that the 
compiler could be developed in a modular system.  I. 2.  3.  4. 5. 6. Table 2. Overview of Project 
Structure of the Compiler Project Source Language Project Object Language and Machine Each team must 
submit a timetable, and use a "project workbook" Scanner Implementation Parser Implementation Modify 
the grammar to be compatible with the Parser Generator, and implement the driver. Semantics Extend the 
symbol tables and LR parser stack to include semantic attributes. Write code generation procedures for 
each production in the source language. System Testing Project Evaluation Compiler Development: Project 
Outline Section IV. Conclusion The majority of students were able to complete the entire project within 
the semester, although two part-time students were unable to finish debugging because of work commitments. 
A major achievement was the limited time actually spent in system integration. Modular compiler design 
appears to dramatically reduce the time spent in tracing down minor errors. Several students expressed 
surprise at the complexity of the source language programs which their compiler could handle. Initially 
the compilers were debugged using small routines such as Ackermanns function and Euclids GCD Algorithm, 
then were let loose on a 150 line program which solved the 8 queens problem, which included most combinations 
of data and control structures. Some students became sufficiently enthusiastic to make extensions to 
the source language, such as adding a REPEAT ... UNTIL statement and automatic type conversion. The 
major criticism of students of the project specification was that the object language was not provided 
in detail. Instead, a basic list of three address codes was provided [Aho 77], and the students were 
asked to write an interpreter for an object language developed from these three address codes. Although 
the task.of writing an i~terpreter is relatively straightforward, the students were not taught three 
address codes in detail until late in the semester. Thus most students continued to modify the object 
language and the interpreter until late in the semester. A better approach is to specify the object language 
in detail (Appendix B). The interpreter can either be written by the instructor or be assigned as part 
of the project. Students may then extend the object language and the interpreter if time and motivation 
are available. Appendix A The following grammar is designed to be a usable subset of PASCAL. The primary 
advantage of using a subset of a common language is that students can test their programs by means of 
another compiler. Other high-level algorithmic languages such ms PL/I or ALGOLW could also be used as 
a basis for a suitable source language for the project. MINIPASCAL Syntax Many of the detailed decisions 
regarding the syntax can be omitted from the project specifications. The students should define regular 
expressions for integer and real constants, identifiers and the operators, consistent with the host language 
PASCAL. MINPASCAL Grammar program: PROGRAM ID ( id-list ) var-decls proc-decls block . id-list: ID 
id-list , ID var-dec]s: NULL VAR vat-dec-list vat-dec-list: var-dec ; var-~ec ; var-dec-list var-dec: 
 id-list : standard-type id-list : ARRAY [ CONSTANT .. CONSTANT ] OF standard-type standard-type: 
INTEGER REAL proc-decls: NULL proc-decls proc-decl proc-decl: FUNCTION ID arguments : standard-type 
; var-decls block ; PROCEDURE ID arguments ; var-decls block ; arguments: NULL ( parameter-list ) 
parameter-Iist: VAR vat-dec parameter-list ; VAR vat-dec block: BEGIN statement-list END statement-list: 
 statement statement-list ; statement statement: compound-statement procedure-call variable ASSIGNOP 
expression IF expression THEN statement ELSE statement IF expression THEN statement WHILE expression 
DO statement procedure-call: ID ID (expression-list) variable: ID ID [ expression-list ] expression-list 
 expression expression-list , expression expression: variable procedure-call CONSTANT UNOP expression 
 expression BINOP expression ( expression ) Appendix B The suggested object language is based upon 
a simple stack machine. The object language is similar to other intermediate languages such ms PCODE 
[Nori 76], but it is designed to be simple and readable, rather than efficient. All arithmetic, logical, 
and relational operators reference the top elements in the stack, which may be either integer or real 
(booleans are represented integers). LOAD and STORE instructions are used for variables, and LOADINDEXED 
and STOREINDEXED are used for arrays, after the array offset has been loaded. Stack offsets are used 
to address local and global variables, and procedure parameters. All parameters are passed by reference, 
as stack addresses using the LOADPARAM instruction. Call by value can be simulated by using local variables 
and copying the parameters. An assembly language object program consists of a sequence of procedures, 
with one procedure designated as the main program by an ENTRY psuedo instruction. Each procedure consists 
of a BEGIN psuedo instruction, followed by a sequence of instructions terminated by an END psuedo instruction. 
Each procedure is assigned a unique integer index, which is used by CALL instructions. Instructions within 
a procedure are referenced by their instruction index. Thus JUMP,IO will transfer control to the 10th 
instruction in the procedure. External and intrinsic function calls such as READ and WRITE can be defined 
in the specifications by procedure CALLs using negative procedure indexes provided by the interpreter. 
 .~ggested Instruction Set Notation: {...} denotes alternative opermnds ...-index denotes a positive 
integer Psuedoinstructions: ENTRY, Procedure-index BEGIN, Procedure-index END, Procedure-index Instructions: 
LOAD, {Int, Real}, {Local, Global, Parameter}, Offset-index LOADINDEXED, {Int, Real}, {Local, Global, 
 Parameter} LOADCONST, {Int, Real}, Initial Value STORE, {Int, Real}, {Local, Global, Parameter}, Offset-index 
STOREINDEXED, {Int, Real}, {Local, Global, Parameter} BINOP, Op-index UNOP, Op-index BRANCH, Instruction-index 
BRANCHTRUE, Instruction-index BRANCHFALSE, Instruction-index LOADPARAM, {Int, Real}, {Local, Global, 
 Parameter}, Offset-index CALL, Procedure-index RETURN References [Ahma 78] Ahmad, S.,I~ Design and 
Use of Instructional Tools for Computer Science SIGCSE Bulletin. 10:1 (1978 February), pp. I-6. [Aho 
77] Aho, A.V., and Uhlmann, J.D. Principles of Compiler Design. Addison-Wesley, 1977. 604p. [ISBN O- 
201-00022-9] [Aust 77] Austing, R.H., et. al. Curriculum Recommendations for the undergraduate Program 
in Computer Science. SIGCSE Bulletin. 9:2 (1977 June), pp. 1- 16. [Grie 71 ] Gries, D. Compiler Construction 
for Digital Computers. John Wiley, 1971 [ISBN 0-471-32776-X]. [Nori 74 ] Nori, K.V., Amman, U., Jensen, 
K., and Nageli, H.H. "The PASCAL 'P" Compiler: Implementation Notes". Technical Report Number I0, Berichte 
des Instituts fur Informatik, Eidgenossische Technische Hochschule, Zurich, 1974 December. 57p. [Shap 
76] Shapiro, H.D., and Mickunas, M.D. New Approach to Teaching a First Course in Compiler Construction. 
SIGCSE Bulletin. 8:2 (1976 February), pp. 158-166. 
			