
 AN APPLICATION TO SUPPORT A COURSE IN NUMERICAL ANALYSIS Mark Temte Department of Computer Technology 
Indiana University -Purdue University at Fort Wayne (IPFW) Fort Wayne, Indiana 46805  ABSTRACT An 
original numerical method is presented which is suitable for use in a course in numerical analysis. It 
combines numerical differentiation with numerical integration to extend the solution of a particular 
kind of partial differential equation  throughout a rectangular grid. An implementation of the method 
together with a friendly user interface is available from the author for instructional use.  INTRODUCTYON 
During the past 35 years, the relative importance of numerical analysis in computer science education 
has dimin- ished from its central position to that of a specialization. However, for computer science 
students, familiarity with the major issues and techniques of the discipline are still important. Even 
though graduates will most likely never work primarily in this area, they should be prepared to occasionally 
work on engineering or scientific applications that involve numerical issues. When the need arlses, one 
would expect a computing professional to properly choose and apply numerical techniques and to be aware 
of the care that must be taken to avoid loss of accuracy. This objective is central to the junlor-level 
course entitled Numerical Methods, required of Computer Science Option students in the Computer Technology 
Department at IPFW. Although we find it difficult to cover all the topics listed in the ACM Curriculum 
'78 recommendations for CS17 found in [ACM], we do attempt to  Permission to copy without fee all or 
part of this material is granted provided that the copies are not made or distributed for direct commercial 
advantage, the ACM copyright notice and the title of the publication and its date appear, and notice 
is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, 
or to republish, requires a fee and/ or specific permission. &#38;#169;1987 ACM 0-89791-217-9/87/0002/0455 
75¢ achieve the recommended balance between application of numerical techniques and theory, and try to 
provide students with the experience they will need as profes- sionals. In addition to the usual computer 
science prerequisites, the course carries a mathematics prerequisite of two semesters of "science and 
engineering" calculus and linear algebra. It is taught at a level appropriate for Juniors. Upon teaching 
Numerical Methods for the first time in 1985, I discovered a dearth of good applications of numerical 
differentiation. Even though numerical differentiation is a minor topic (often relegated only a page 
or two in text- books), I am a strong proponent of its value early in an introductory course in numerical 
methods. In the familiar context of differentiation, a good foundation lot the course can be laid by 
presenting the finite difference calculus and using it to develop finite difference expressions of various 
orders of accuracy for the first derivative. In each case, forward difference, backward difference, and 
central difference formulas can be obtained. The error estimates are rela- tively easy to derive and 
the student can compare absolute errors resulting not only from equations of different orders but also 
from using forward or backward difference equatlons instead of a central difference equation. The process 
may also be repeated for higher derivatives. A good exposition of this topic can be found in [Ho]. 
One benefit to be obtained from this effort is a genuine appreciation of the meaning of order of accuracy 
and of the relative merits of formulas of the same order. Another benefit is early mastery of a collection 
of tools and formulas that have application later in the course in major topics such as interpolation 
and integration. The tedious chore of deriving some of the higher order formulas can also ~erve as an 
ideal way to intro- duce and motivate the use of a language for symbolic manipulation of algebraic expressions 
(e.g. REDUCE or MACSYMA), if one is available on campus [Re].  455 Still, I sought a good example of 
numerical differentiation applied to a practical problem to reinforce the topic. The application presented 
below, which I developed with support from the School of Engineering, Technology, and Nursing at IPFW, 
appears to fulfill this search. I would llke to contribute it to the betterment of computer science education 
in general and to the teaching of numeri- cal methods in particular.   THE APPLICATION Conjugate harmonic 
functions are real valued functions U(x.y) and V(x,y) of two real variables x and y which satisfy the 
Cauchy-Ri emann equations ~U/~x = ~V/~y and "~U/~y = -"~V/~x. When the values of conjugate harmonic 
 functions are known along a line segment, the values of U(x,y) and of V(x,y) can be inferred, in principle, 
throughout their domain of definition by means of a process known as continuation. A special case concerns 
complex analytic functions, such as exp(z) = eXcos(y) + ieXsin(y), where i ffi sqrt (- I) , z = x 
+ i'y, U(x,y) = eXcos(y), and V(x,y) = eXsin(y). Here the real and imaginary parts, U and V, of the analytic 
function are conjugate harmonic functions in the complex plane, and the process of inferring the values 
of the analytic function throughout its domain from initial values is known as analytic continuation 
[CBV]. In light of the Cauchy-Riemann equations, it is not surprising that an effective discretization 
method for performing continuation throughout a domain for a given pair of conjugate harmonic functions 
involves the direction- al derivatives of the functlons. We proceed by subdividing the desired domain 
with a rectangular grid. The initial values of the two harmonic functions are specified at grid positions 
along a single line within the domain, as illustrated in Figure I. Numerical differentiation is used 
to determine the first derivatives of both functions at all points along the line. The Cauchy-Riemann 
equations are then applied to determine the directional derivatives of the harmonic functions in the 
direction orthogonal to the line. A numerical integration method can then be applied at each point along 
the line to determine the values of the functions along the next grid line (parallel to the original 
llne). Successive application of this process determines functional values in an expanding domain around 
the initial line. Care must be taken in choosing the particular differentiation and integration methods 
used and in determining how they work together to preserve stability and reduce error. Numerical differentiation 
is unstable relative to numerical integra- tion and a proper balance must be achieved between the two. 
The inherent instability of differentiation is made worse near endpoints because central difference equations 
cannot be used. It was not at all clear at the outset that useful results could, in fact, be obtained. 
 THE NUMERICAL METHOD As it turned out, good results can indeed be obtained with a simple constant 
mesh grid by using a fourth-order central difference differentiation equation in conjunction with a modification 
of the familiar fourth-order Runge-Kutta integra- tion method. Near boundaries, however, a flfth-order 
forward (or backward) differ- ence differentiation equation is used instead of the central difference 
equa- tion. In addition, it is necessary to have a non-square grid in which the spacing in the direction 
of differentia- tion is larger than that in the orthogonal direction of integration. This is done to 
prolong stability by reducing the relative importance of small errors during differ- entiation; the price 
paid is a slight loss of accuracy. In practice, it is best to regard the ratio of differentiation spacing 
to integration spacing as a parameter that can be used on an ad hoc basis to trade accuracy for stability. 
 Given an initial value problem q'(t) ffi f(t,q), q(t0) = q0,  the classical fourth-order Runge-Kutta 
integration method (e.g., see [CdB]) generates approximate values Qn (n~0) for Initial !±i  llne --o 
 o. T .=......-e -- ¢-: o~ Solution known to here  Figure 1: Expanding Grid Domain q(t 0 + nh) using 
the recurslve formula~ Q0 = q0 and Qn+l = Qn + (kl + 2k2 + 2k3 + k4)h/6,  where kl = f( tn, Qn ), 
 k 2 = f( tn+h/2, Qn+klh/2 ), k 3 = f( tn+h/2 , Qn+k2h/2 ), and k 4 = f( tn+ I, Qn+k3 h ).  In the 
traditional application of the Runge-Kutta method, the single derivative q'(t) is provided by evaluating 
f. For the problem at hand, the derivatives must be calculated for each harmonic function using a numerical 
method. Furthermore, there are k's for both of the conjugate harmonic functions, U(x,y) and V(x.y). Imagine 
differentiation as taking place in the x-direction and integration in the y-dlrection. The formulas for 
k 1 (for U and V, respectively) are - ~V/bx and ~U/bx  and for k 2 are (~/~x) [ U -(~V/~x)h/2 ] 
 and (~/~x)[ V + (~U/~x)h/2 ].  For k I , the Cauchy-Riemann equations have been used to convert directional 
derlva- t ives taken in the x-dlrectlon to the directional derivatives that are needed in the y-dlrectlon. 
Formulas for k 3 and k 4 can be expressed similarly. For the purpose of computing the directional derivatives, 
the simple fourth-order central difference equation df/dx = (f-2 -8f_! + 8f+i -f+2)/12h  is used, where 
f is a generic function of x, h is the grid spacing along the x-axls, and fk = f(x+kh) . This cannot 
be used when x is either an endpoint of the line or a point adjacent to an endpolnt. For these cases, 
the flfth-order forward difference equation for the "left" side is df/dx = ( -137f 0 + 300f I -300f 
2 + 200f 3 -75f 4 + 12f 5 ) / 60h.  The corresponding backward difference equation for the "right" 
side can be obtained by replacing each fk in the forward difference expression by -f-k- The details 
of the numerical method are captured in the Pascal procedure CauchyRiemann, reproduced in Figure 2. This 
implementation assumes that numerical continuation is to take place throughout a rectangular domain 
and that the conjugate harmonic functions are initialized with values along the "bottom" boundary line. 
Continuation takes place upward, llne-by-llne, by invoking the nested procedure RungeKutta. Because 
of the intricate interplay between the integration and differentia- tion methods, it was not feasible 
to carry out a meaningful error analysis of this algorithm. Instead, an empirical approach was adopted 
which demonstrated the effectiveness of the algorithm, at least in the case of "well-behaved" conjugate 
harmonic functions. Figure 3 gives the result of applying the algorithm to the complex analytic function 
f(z) = z2; only the real part U(x,y) = x 2 _ y2 is shown. The initial values of the real part lle on 
the bottom row; all values lying above were calculated by CauchyRiemann. Both the horizontal and vertical 
spacing is one unlt. The accuracy is expected since a fourth order method is being applied to a second 
order polynomial. Figure 4 gives both the real and imaginary parts resulting from applying the algorithm 
to the complex exponential function exp(z), mentioned earlier, which is periodic in the vertical direction 
with period 2*Pi. Initial and computed values are located as for z 2 However, the horizontal grid spacing 
used for differen- tiation is 0.5 and the vertical spacing for integration is Pi/lO; consequently, the 
display represents a band of one complete period. Analytic continuation over more than twice this vertical 
distance is possible before instability becomes manifest. INSTRUCTIONAL SOFTWARE I have implemented 
a friendly, menu-drlven user interface around the procedure of Figure 2. The user is provided with services 
that help to establish a rectangular grid, initialize the harmonic functions along the line segment on 
the bottom boundary of the grid, compute the numerical continuation, and define and view windows displaying 
regions of the grid. The llne segment may be initialized to a number of predeflned functions built into 
the system. I would be happy to send a listing of the Pascal source code for this software to any interested 
person for instructional use. For Turbo Pascal source code in machine readable form together with an 
executable image that will run on an IBM PC or compatible (MS-DOS 2.0 or greater or PC--DOS 2.0 or greater), 
please mall a blank 5.25 inch diskette with a return envelope. This micro version uses intermediate 
precision reals (6 bytes) and and , having been provided with the can accommodate grids of slightly over 
implemented system, being asked to adjust 5000 points. It can easily be modified grid parameters with 
the goal of maxlmlz- for larger grids, ing stability and accuracy. There are a number of ways the system 
The system would also be suitable for could support instruction. Foremost is as use by our mathematics 
colleagues in any an interesting application of numerical course in complex analysis to illustrate differentiation 
that can deepen the the reality of analytic continuation. student's understanding of other topics Many 
of their students have difficulty such as error propagation, stability, and visualizing analytic functions. 
Some numerical integration. Although the class interesting applications include polyno- must cover integration 
as a prerequisite mials, linear fractional transformations, topic, the delay is worthwhile; the trigonometric 
functions, log(z), exp(z), conjunction of differentiation and and the Riemann zeta function. integration 
enhances both. Some prior understanding of partial differentiation In a course involving computer is 
also helpful, but not necessary. graphlcs, the system could simply be used to generate some beautiful 
dlsplays. The For a capable class, a possible graphs U(x,y) and V(x,y) are surfaces in project would 
be to develop an algorithm 3-space over the rectangular domain. similar to that of Figure 2. This is 
how Finally, numerical continuation would I hope to use the application this year. serve to introduce 
the concept of grid If this is not feasible, a class could calculations (e.g., see [TWM]), which is still 
gain a great deal of experience by prevalent in large-scale scientific being introduced to the basic 
concepts computat ions.  BIBLIOGRAPHY [ACM] ACM Curriculum Committee on Computer Science, "Curriculum 
"78 --Recommendations for the Undergraduate Program in Computer Science," Comm. ACM, Vol. 22, No. 3 (March 
1979), pp. 147-166. [CBV] R.V. Churchill, J.W. Brown, R.F. Verhey. Complex Variables and Applications 
(3rd Ed.), McGraw-Hill (1974). [CdB] S.D. Conte, C. de Boor. Elementary Numerical Analysis (3rd Ed.), 
McGraw-Hill (1980). [He] A.C. Hearn. REDUCE User's Manual, Rand Corporation Publication CP78 (1985). 
 [Ho] R.W. Hornbeck. Numerical Methods, Quantum Publishers (1975). [TWM] J.F. Thompson, Z.U.A. Warsl, 
C.W. Mastln. Numerical Grid Generation, North-Holland (1985). 4.58 Figure 2: Pascal Implementation of 
the Numerical Method System constants and types for CauchyRiemann: MaxRow, MaxCol { maximum number 
of rows and columns available } Top, Bottom, Left, Right { indictes of grid boundaries } hHoriz, hVert 
{ horizontal and vertical grid spacing } ArrayType = array[ 0..MaxRow, 0..MaxCol ] of Real; { the grid 
} System functions to initialize the bottom row of the grid to values of function f: RealPart( f, x 
), ImagPart( f, x ) procedure CauchyRiemann( vat U : ArrayType; vat V : ArrayType ); type DerivType 
= array[ 0..MaxCol ] of Real: var DU, DV DerivType: { arrays for saving derivatives on current row 
} function Cent4( Ymm, Ym, Yp, Ypp : Real ): Real; { function for fourth order central difference calculation 
} begin Cent4 := ( Ymm -8*Ym + 8*Yp -Ypp ) / ( 12.0 * hHorlz ) end; function Forwb( Y, Yp, Ypp, Yppp, 
Ypppp, Yppppp: Real ): Real; { function for fifth order forward difference calculation } begin Forw5 
:= ( -137"Y + 300*Yp -300*Ypp + 200*Yppp -75*Ypppp + 12*Yppppp) / ( 60 * hHoriz ) end; procedure Diff( 
Row : Integer; var Y : ArrayType; vat DY : DerivType ); { procedure to calculate derivatives at points 
along row Row } var I, J, R : Integer; begin { Diff } R := Row -Bottom; { compute derivatives in row 
R } for J := 0 to I do DY[J] :ffi Forw5( Y[R,J],Y[R,J+I],Y[R,J+2],Y[R,J+3],Y[R,J+4],Y[R,J+5] ); for 
J := 2 to Right-Left-2 do DY[J] :ffi Cent4( Y[R,J-2],Y[R,J-I],Y[R,J+I],Y[R,J+2] ); for J := Right-Left-I 
to Right-Left do DY[J] :ffi Forw5(Y[R,J],-Y[R,J-I],-Y[R,J-2],-Y[R,J-3],-Y[R,J-4],-Y[R,J-5]) end; { Diff 
} procedure RungeKutta( Row : Integer; var U, V : ArrayType; DU, DV : DerivType ); type LocalArrayType 
ffi array[ I..4, 0..MaxCol ] of Real; var KU, KV : LocalArrayType; { function values used to calculate 
k values } KDU, KDV : LocalArrayType; { k values along current row } l,J : Integer; procedure LocalDiff( 
R : Integer; var Y, DY : LocalArrayType ); var l,J : Integer; begin { LocalDiff } for J := 0 to I do 
 DY[R,J] := Forw5( Y[R,J],Y[R,J+I],Y[R,J+2],Y[R,J+3],Y[R,J+4],Y[R,J+5] ); for J :ffi 2 to Right-Left-2 
do DY[R,J] := Cent4( Y[R,J-2],Y[R,J-I],Y[R,J+I],Y[R,J+2] ); for J := Right-Left-I to Right-Left do DY[R,J] 
:ffi Forw5(-Y[R,J],-Y[R,J-I],-Y[R,J-2],-Y[R,J-3],-Y[R,J-4],-Y[R,J-5] ) end; { LocalDiff } Figure 2: 
Continued begin { RungeKutta } for J := 0 to Right--Left do begin KU[ ], J ] := U[ Row-Bottom-l, J 
7; KV[ I, J ] := V[ Row-Bottom-I, J ]~ KDU[ I, J ] := DU[ J ]; KDV[ I, J ] := DV[ J ]~ end ; for J 
:= 0 to Right-Left do begin KU[ 2, J ] := KU[ I, J ] -hVert * KD~[ I, J 7/2.0; KV[ 2, J ] := KV[ I, J 
] + hVert * KDU[ I, J ]/2.0 end; LocalDiff( 2, KU, KDU ); LocalDiff( 2, KV, KDV ); for J := 0 to Right-Left 
do begin KU[ 3, J ] := KU[ I, J ] -hVert * KDV[ 2, J ]/2.0; KV[ 3, J ] := KV[ l, J ] + hVert * KDU[ 2, 
J 7/2.0 end; LoealDiff( 3, KU, KDU ); LocalDiff( 3, KV, KDV ); for J := 0 to Right-Left do begin KU[ 
4, J ] := KU[ I, J ] -hVert * KDV[ 3, J ] ; KV[ 4, J ] := KV[ I, J ] + hVert * KDU[ 3, J ] end; LocalDiff( 
4, KU. KDU ); LocalDiff( 4, KV, KDV ); for J := 0 to Right-Left do begin U[Row--Bottom,J] := KU[I,J] 
-(hVert/6.0)*( KDV[I,J]+2.0*KDV[2,J]+2.0*KDV[3,J]+KDV[4,J] ); V[Row-Bottom,J] := KV[I,J] + (hVert/6.0)*( 
KDU[I,J]+2.0*KDU[2,J]+2.0*KDU[3,J]+KDU[4,J] ); end" Diff( Row, U, DU ); Diff( Row, V, DV ) end; { RungeKutta 
} begin { CauchyRiemann } { initialize row 0 of arrays U and V } for j := Left to Right do U[ O, j-Left 
] := RealPart( AnalyticFunction, hHorlz*j ); for j := Left to Right do V[ O, J-Left ] := ImagPart( AnalytlcFunetlon, 
hHoriz*J ); { inlt[alize array of derivatives } Dill( Bottom, U, DU ); Diff( Bottom, V, DV )~ { perform 
analytic continuation } for i := Bottom+l to Top do RungeKutta( i, U, V, DU, DV ) end; ( CauchyRiemann 
} 460 Figure 3: Real Part of f(z) = z 2. ........................ Real Part ........................................................ 
 13 169.0-168.0-165.0-160.0-153.0-144.0-133.0-120.0-105.0 -88.0 -69.0 -48.0 -25.0 0.0 12 -144.0-143.0-140.0-135.0-128.0-119.0-108.0 
-95.0 -80.0 -63.0 -44.0 23.0 0.0 25.0 II -121.0-120.0-117.0-112.0-105.0 -96.0 -85.0 -72.0 -57.0 -40.0 
-21.0 -0.0 23.0 48.0 I0 -100.0 -99.0 -96.0 91.0 -84.0 75.0 -64.0 -51.0 -36.0 -19.0 -0.0 21.0 44.0 69.0 
9 -81.0 -80.0 -77.0 -72.0 -65.0 -56.0 -45.0 -32.0 -17.0 0.0 19.0 40.0 63.0 88.0 8 -64.0 -63.0 -60.0-55.0-48.0-39.0-28.0 
-15.0 -0.0 17.0 36.0 57.0 80.0 105.0 7 -49.0 -48.0 -45.0 -40.0 -33.0 -24.0 -13.0 -0.0 15.0 32.0 51.0 
72.0 95.0 120.0 6 -36.0 -35.0 -32.0 -27.0 -20.0 -II.0 0.0 13.0 28.0 45.0 64.0 85.0 108.0 133.0 5 -25.0 
-24.0 -21.0-16.0 -9.0 0.0 11.0 24.0 39.0 56.0 75.0 96.0 119.0 144.0 4 16.0-15.0-12.0 -7.0 -0.0 9.0 20.0 
33.0 48.0 65.0 84.0 105.0 128.0 153.0 3 -9.0 -8.0 --5.0 0.0 7.0 [6.0 27.0 40.0 55.0 72.0 91.0 112.0 135.0 
160.0 2 -4.0 -3.0 0.0 5.0 12.0 21.0 32.0 45.0 60.0 77.0 96.0.117.0 140.0 165.0 I -I.0 0.0 3.0 8.0 15.0 
24.0 35.0 48.0 63.0 80.0 99.0 120.0 143.0 168.0 0 0.0 1.0 4.0 9.0 16.0 25.0 36.0 49.0 64.0 81.0 I00.0 
121.0 144.0 169.0 0 I 2 3 4 5 6 7 8 9 I0 11 12 13 Figure 4: Real and Imaginary Parts of exp(z). ........................ 
Real Part .................................... 20 0.223 0.368 0.606 1.000 1.649 2.717 4.480 7.389 12.181 
20.077 19 0.211 0.348 0.574 0.947 1.561 2.573 4.243 6.996 11.534 19.014 18 0.179 0.295 0.486 0.801 1.321 
2.179 3.592 5.922 9.764 16.097 17 0.129 0.213 0.351 0.578 0.953 1.571 2.591 4.272 7.042 11.611 16 0.067 
0.II0 0.181 0.298 0.492 0.811 1.337 2.204 3.634 5.992 15 -0.002 -0.004 -0.006 -0.010 -0.017 -0.028 -0.047 
-0.077 -0.128 -0.210 14 -0.071 -0.117 -0.193 -0.318 -0.525 -0.865 -1.426 -2.352 -3.877 -6.393 131 -0.133 
-0.219 -0.361 -0.595 -0.983 -1.618 -2.667 -4.397 -7.249-11.952 121 -0.182 -0.299 -0,494 -0.814 -1.342 
-2.212 -3.647 -6.014 -9.915-16.347 ill -0.213 -0.351 -0.578 -0.953 -1.572 -2.591 -4.273 -7.044-11.614-19.148 
I01 -0.223 -0.368 -0.606 -i.000 -1.649 -2.718 -4.481 -7.388-12.181-20.084 91 -0.212 -0.349 -0.576 -0.949 
-1.565 -2.580 -4.253 -7.013-11.562-19.062 81 -0.180 -0.296 -0.489 -0.806 -1.328 -2.190 -3.611 -5.953 
-9.815-16.182 71 -0.130 -0.215 -0.354 -0.584 -0.963 -1.587 -2.616 -4.314 -7.112-11.726 61 -0.068 -0.112 
-0.185 -0.305 -0.503 -0.829 -1.367 -2.254 -3.716 -6.126 51 0.001 0.001 0.002 0.003 0.006 0.009 0.016 
0.026 0.043 0.070 41 0.070 0.115 0.189 0.312 0.514 0.847 1.397 2.303 3,797 6.260 31 0.132 0.217 0.358 
0.589 0.972 1.602 2.642 4.356 7.181 11.840 21 0.181 0.298 0.491 0.810 1.335 2.201 3.629 5.984 9.866 16.266 
II 0.212 0.350 0.577 0.951 1.568 2.586 4.263 7.029 11.589 19.107 01 0.223 0.368 0.607 1.000 1.649 2.718 
4.482 7.389 12.182 20.086 -3 -2 -I 0 I 2 3 4 5 6 ..................... Imaginary Part ................................ 
20 -0.003 -0.005 -0.009 -0.014 -0.023 -0.038 -0.062 -0.102 -0.173 -0.282 19 -0.072 -0.118 -0.195 -0.321 
-0.530 -0.874 -1.441 -2.376 -3.919 -6.459 18 -0.133 -0.220 -0.363 -0.598 -0.986 -1.625 -2.679 -4~417 
-7.284-12.008 17 -0.182 -0.300 -0.495 -0.816 -1.345 -2.218 -3.656 -6.028 -9.939-16.387 16 -0.213 -0.351 
-0.579 -0.954 -1.573 -2.594 -4.277 -7.052-11.626-19.169 15 -0.223 -0.368 -0.606 -I.000 -1.648 -2.718 
-4.481 -7.388-12.181-20.082 14 -0.212 -0.349 -0.575 -0.948 -1.563 -2.577 -4.248 -7.004-11.548-19.039 
13 -0.179 -0.296 -0.487 -0.804 -1.325 -2.184 -3.601 -5.938 -9.790-16.140 12 -0.130 -0.214 -0.352 -0.581 
-0.958 -1.579 -2.604 -4.293 -7.077-11.668 11 -0.067 -0.III -0.183 -0.302 -0.497 -0.820 -1.352 -2.229 
-3.675 -6.059 10 0.002 0.003 0.004 0.007 0.012 0.019 0.031 0.052 0.085 0.140 9 0.070 0.116 0.191 0.315 
0.519 0.856 1.412 2.327 3.837 6.326 8 0.132 0.218 0.359 0.592 0.976 1.610 2.654 4.376 7.215 11.896 7 
0.181 0.299 0.492 0.812 1.339 2.207 3.638 5.999 9.890 16.306 6 0.212 0.350 0.578 0.952 1.570 2.589 4.268 
7.037 11.601 19.128 5 0.223 0.368 0.607 1.000 1.649 2.718 4.482 7.389 12.182 20.085 4 0.212 0.350 0.576 
0.950 1.567 2.583 4.258 7.021 11.575 19.085 3 0.180 0.297 0.490 0.808 1.332 2.196 3.620 5.969 9.841 16.224 
2 0.131 0.216 0.356 0.587 0.967 1.595 2.629 4.335 7.147 11.783 1 0.069 0.113 0.187 0.308 0.508 0.838 
1.382 2.278 3.756 6.193 0 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . -3 -2 -I 0 I 2 3 4 5 6 
			