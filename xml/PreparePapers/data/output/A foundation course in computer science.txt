
 A FOUNDATION COURSE IN COMPUTER SCIENCE ALI BEHFOR00Z ONKAR P. SHARMA MOORHEAD STATE UNIVERSITY 
MOORHEAD, MINNESOTA 56560 Abstract The discipline of computer science has matured to the extent that 
now it has become necessary to define a foundation course primarily designed for majors in computer science. 
Such a course will include an introduction to the basic areas to which these students are later on exposed 
at their junior and senior years. In particular, the syllabus may consist of five core areas: problem 
solving including algorithm design, development and testing; data structures including representation 
and implementation of arrays, stacks, queues, trees, lists and files; computer systems including traditional 
hardware and software concepts; program design and development including modern programming methodology, 
debugging and documentation; and finally the syntax and semantics of one or two programming languages. 
The duration of the course will be one full academic year for a total of 12 quarter or 8 semester credits 
of work. The course will assume an entry level equivalent to college algebra, computer literacy and collegiate 
maturity measured by completion of a total of about 32 quarter or an equivalent amount of semester credits 
of college level work. Introduction A large number of universities and colleges often use the same 
syllabus for introductory courses on computers and computer programming which are taken by students from 
a variety of disciplines such as Business, Engineering, Education, Science, Liberal Arts, and Computer 
Science. The last decade has seen a rapid growth in students' enrollment in the Business area to the 
point that the discipline has a well-defined syllabus; a large number of textbooks are available in the 
market to go with this syllabus ~nd there are course offerings that primarily cover the materials from 
this syllabus. As a result, two different syllabi now exist at a Permission to copy without fee all 
or part of this material is granted provided that the copies are not made or distributed for direct commercial 
advantage, the ACM copyright notice and the title of the publication and its date appear, and notice 
is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, 
or to republish, requires a fee and/or specific permission. &#38;#169; 1984 ACM-0-89791-126-1/84/002/0159 
$00.75 number of larger universities and colleges--one for the Business major and the other for all 
the disciplines combined together. For the last five years or so, the enrollment in computer science 
is growing by leaps and bounds and has now reached a point where it is not only necessary but also economically 
feasible to address separately the need for a foundation course for computer science majors. Realizing 
that this new discipline is philosophically closer to sciences rather than liberal arts, this foundation 
course may be designed on the same pattern as the foundation courses in other science areas such as physics, 
chemistry, and mathematics. To be specific, the syllabus of an introductory course in computer science 
should include a solid foundation to all the basic and important concepts to which students will be later 
on exposed, in the same manner that an introductory course in physics exposes physics majors to all the 
basic areas in physics such as mechanics (statics and dynamics), heat, light, electricity and magnetism, 
hydraulics and sound. In a previous paper E33, the authors have discussed the drawbacks of offering 
the same first course on computers for majors from different disciplines and teaching a programming language 
as the first topic in such a course. There they have also presented a rationale of and proposed an outline 
for an introductory course for computer science majors. The following topics were considered for inclusion: 
-Computer System (traditional hardware and software concepts) -Structured Problem Solving (algorithm 
design, development and testing) -Data Representation and Processing )arrays, stacks, queues, lists and 
trees) -Programming Language (syntax, semantics and uses) Several papers supporting these views have 
appeared in recent SIGCSE proceedings. In an outline for an introductory course in computer science, 
Harrison and Magel [6] recommend that the teaching of a high level language should begin in the tenth 
week and should be preceded by topics in problem solving, machine organization and machine level programming. 
Meinke and Beidler ~73, in their outline of the first two courses for CS majors, propose that algorithm 
development must be emphasized in the first course and specify number system representation, basic computer 
architecture, data structure, elementary operating systems, and compilation techniques as the topics 
for the second course. Gabrini [15] comes out strongly in favor of teaching design and programming methodology 
in beginning computer science courses and is opposed to teaching this very important topic at a later 
time in the curriculum. At the university of Kansas, as indicated by Bulgram and Wetzel [4], the introductory 
course includes computer organization, algorithms, top-down algorithmic design, programming concepts 
and software system concepts. Ayen and Grief [2], in discussing their experience gained by the teaching 
environment at the air force academy, point out that separation of problem solving from programming is 
not by itself sufficient for success of an introductory course. They, however, support the teaching 
of problem solving and recommend that pseudocode language should be similar in structure to the programming 
language to be used. In consideration of ACM C S [ I ] recommendations, the suggestions of various scholars 
reported in the literature, and their own experience, the authors have developed a detailed outline and 
curriculum materials for such a course. These materials have been used to teach the first two introductory 
courses at Moorhead State University for the last three years. During this period, while the materials 
have been tested more than 9 times, criticisms and suggestions have been collected both from the faculty 
and students and several reorganizations and revisions have been made. This paper attempts to present 
the syllabus of this foundation course in its present form which is the final result of three year's 
work of development, field test and revision. The Course Rationale A foundation course in computer 
science should minimally include the following major topics : I. Problem Solving 2. Data Structures 
 3. Computer Systems  4. Program Design and Development  5. Programming Language Syntax  The justification 
for inclusion of each topic is now presented. I. Students who complete introductory courses that teach 
programming languages only, understand the syntax of the language well but still don't know where to 
begin when it comes to writing a program. The main problem appears to lie in their inability to distinguish 
between the planning and design phase on one hand and the coding phase on the other. This is so because 
in these courses, they are invariably being prompted in the class to write programs without first being 
required to plan and design a solution. Students sit down to write code without a clear understanding 
of the problem definition and/or requirements. A proper emphasis on problem solving techniques helps 
alleviate this problem. 2. Programming is not a straightforward process of writing codes from an algorithm. 
Of particular interest in any problem-solving process is the organization of data. This topic is seldom 
covered in an introductory programming course. As a result the students are lead to believe that the 
only data organization possible are those provided by the language and they don't see any need or justification 
for any other type of organization. For example, sequential allocation is the limit of imagination for 
those who start with FORTRAN. A discussion of basic data organization and processing concepts along with 
but independent of a programming language gives a good start to the understanding of this very important 
topic and additionally facilitates presentation of nontrivial programming problems to bring out the intricacies 
of the programming language taught in the classroom (specially true if Pascal C or Ada is used as a 
programming language in the course). 3. It is important for students taking introductory courses to 
understand the functions of and interaction between various computer components. If students don't have 
a clear picture of the organization and function of internal storage, it is difficult for them to visualize 
how data are represented, stored and referenced within computers. For example , why in their programs 
should they try to minimize the numnber of variables or try to use an integer rather than real representation 
for data whenever possible? Similarly, without an introduction to the topic of system software, it is 
difficult for students to either write efficient programs or even understand the execution environment 
of their programs. For example, why in their program should they try to mix I/0-bound and compute-bound 
statements. Moreover without a good understanding of the characteristics and the operations of secondary 
storage devices, students will not be able to select proper organization and processing methods. For 
example, how do they know that for an airline reservation system or an inventory system, direct access 
organization and processing should be selected? In short, a student may not even think in terms of writing 
an efficient program if these introductory system concepts are not covered along with the coverage of 
a programming language.  4. It is well understood that the development of a 500-1ine program is much 
more than ten times harder than the development of a 50-line program. It may be possible to write a 50-line 
program without the development of a detailed solution. However, creating a 500-line structured program 
without first developing a detailed solution is outright impossible. The topic of solution design and 
development is thus an important topic for computer scientists and an introduction to this topic must, 
therefore, be included in a foundation course.  Equally important is the topic of programming methodology. 
A good design will not by itself lead to the development of structured programs. Furthermore, .it is 
necessary to teach good programming habits early as it is difficult to change habits acquired during 
the early learning periods. Too often programs are developed but not effectively used for lack of good 
documentation which is essential both to facilitate the use of the programs and to maintain them. More 
often than not students first write their programs and then sit down to complete documentation, A discussion 
on documentation is thus a must for an introductory course in computer science. 5. Programming language 
syntax is one area whose inclusion needs no justification. However there is no universal agreement as 
to what programming language should be included in a foundation course. Earlier most people used FORTRAN 
but the current trend seems to favor Pascal or some similar procedure-oriented languages. No matter what 
language is used, it is important that problem solving is taught before and independently of the language 
syntax by using some English-like pseudocode language for the purpose of algorithm development. The 
Course Objectives The curriculum of the foundation course should meet the following five important objectives. 
 I. It should lay a solid foundation at an introductory level for the computer science majors in the 
four major areas of problem solving, data structures, computer systems, and program design and development. 
This objective may be accomplished by including in the curriculum one complete unit for each of these 
four areas and presenting a clear and concise description of different topics that are considered basic 
in each area. 2. It should make a language-independent presentation of the units on problem-solving 
and data structures. This goal may be met by using an English-like pseudocode language for representation 
of problem solutions, that is, algorithms and for representation and processing of data.  3. It should 
keep the discussion of computer system concepts independent of any specific machine architecture. This 
objective may be met by specification of a very simple hypothetical machine.  4. It should teach skills 
to develop, document and maintain programs. This task may be accomplished by including a complete unit 
on program design and development. By the very nature of the task, this unit would be language-dependent 
when it comes to presenting examples to bring out the concepts. The languages used should obviously be 
the ones taught by the instructor in his classroom.  5. It should teach the syntax, semantics and uses 
of programming languages. To this end, separate language texts should be used. The main curriculum should 
in no way depend on the language text. This approach will allow the instructor to select the programming 
language of his choice.  Detailed Course Outline The course outline is divided into four separate 
units, each unit containing three separate chapters. UNIT I: STRUCTURED PROBLEM SOLVING Chapter I: Problem 
Solving Introduction Problems and Solutions What is a problem? What is a solution? Problem Solving 
Phases: Sample Problems Phase one: Problem Statement Investigation Phase two: Input and Output Investigation 
 Phase three: Problem Solution Structures Top-down Refinement Solution Attributes Phase four: Solution 
Testing Major Examples Chapter 2: Algorithms Introduction Basic Properties of an Algorithm The Development 
Process for an Algorithm Algorithm Representation Pseudocode Representation Operations and Hierarchy 
Sequence Structures Selection Structures Iteration Structures Flowchart Representation Attribute of 
an Algorithm Correctness Structure Feasibility Properness Chapter 3: Solution Structures Introduction 
Sequence Structure Statements Declaration Statements Computation Statements Structural Statements Selection 
Structures Multi-way Selection Structures Compound Selection Structures Iteration Structures Condition-Controlled 
Iterations Counter-Controlled Iterations Other Iterations Procedures and Functions Rationale For Use 
Linkage and Argument Transmission Nesting UNIT 2: DATA ORGANIZATION AND PROCESSING Chapter I: Introduction 
to Data Structures Introduction Arrays (Single and Multi-level) Array Storage Stack and Queues (Operations, 
Application and Implementation) Expression Representation, Evaluation and Conversions Linked List Singly-linked 
lists Doubly-linked lists Trees, Binary Trees and Their Representation Binary Tree Traversal Trees Applications 
 Chapter 2: String Data Elements and Processing Introduction String Data Record Structures Basic String 
Operations Intermediate String Operations Text Editing Basic Definitions and Concepts A Sample Text 
Editor and Its Implementation Type Set Process Format Specification Chapter 3: Data Organization in 
Secondary Storage and Application Introduction Secondary Storage Devices File Organizations (Sequential, 
Direct) File Accessing Methods File Operations Sequential File Processing Direct File Processing Internal 
Sort Algorithms Search Algorithms External Sort Algorithms UNIT 3: COMPUTER SYSTEMS Chapter I: Information 
Representation Introduction Number Systems and Base Conversion Counting Base Conversion Complements 
Arithmetic Operations Information Representation in Computers Integer Numers Real Numbers Characters 
 Logic Functions Chapter 2: Computer System Organization Introduction Memory Unit Arithmetic/Logic Unit 
Control Unit Input Unit Output Unit Chapter 3: Computer Languages and Software Introduction (Evolution) 
System vs Application Software Programming Languages Language Translation Compilers Assemblers Linking 
Loader Operating Systems Simultaneity of Processing and Input/Output Spooling Input/0utput Processors 
Multiprogramming Batch Processing Operating System Timesharing Operating System A Hypothetical Machine 
 UNIT 4: SOFTWARE DESIGN AND IMPLEMENTATION Chapter I: Program Development Process and Modern Programming 
Methodology Introduction Development Phase Maintenance Phase Development Goals Typical Academic Programming 
Environment The Development Phase Requirement/Specification Definition System Design Programming Language 
Selection System Implementation Program Development Input Data Format Design Output Data Format Design 
Data Structure Design Subprogram Design Programming Style Choose Proper Identifiers Include Comment 
Lines Indent The Program Lines Simplicity of Expressions Proper Use of Boolean Variables Proper Use 
of Constant Definition Program Errors Compiling Errors Execution Errors Truncation Errors Logical Errors 
 Program Efficiency and Improvement External Documentation Chapter 2: Program Correctness Introduction 
Correctness Proof Inductive Proof Proving Program Correctness Input/output Statements Computational 
Statements Iteration Structures Major Examples Chapter 3: Case Studies Entry Level During the last 
three years, authors and also some graduate students have collected and analyzed data to determine the 
factors contributing to the success of students in this course. The results of these studies show that 
the following three factors in order of their listings have the most pronounced effect on the success: 
 I. College Maturity: A good measure of this factor was indicated by completion of a minimum of 32 quarter 
credit of work. 2. Mathematics Background: A minimal math background equivalent to at least one college 
algebra course was found helpful.  3. Computer Literacy: Students who were previously exposed to some 
computer concepts performed better in the course.  How To Teach The Course This foundation course 
should be taught as an intensive two-semester (8 credit) or three-quarter (12 credits) course in computer 
fundamentals with at least one high level programming language. The following time allocation should 
be used: Problem Solving (Unit I): 20 hours Data Structures (Unit 2): 30 hours Computer Systems (Unit 
3): 20 hours Program Development (Unit 4): 20 hours Programming Languages: 30 hours It is recommended 
that units I and 2 be covered in that sequence. Also the teaching of the syntax of the first programming 
language should start on completion of Unit I and continue in parallel with Unit 2. These two parallel 
activities should be planned to terminate approximately at the same time. The concepts related to program 
development should be summarized as indicated in Unit 4 and also discussed throughout the course. These 
concepts would need to be constantly emphasized and reinforced by the instructor in the course. While 
teaching Unit 4, a good deal of time should be devoted to a discussion of some large size programming 
projects. These case study discussions should be used to teach concepts in program design, development, 
testing, debugging, maintenance and documentation for large-size projects which should be assigned on 
completion of Unit 2 in the course. If a second language is taught in the course, its syntax should 
be introduced after completion of the first programming language and completed before assigning the project. 
 There are two different ways in which the materials from Unit 3 may be taught. a. It can be started 
after the completion of Unit 2 and one of the programming languages and completed before the introduction 
of the second programming language and Unit 4.  b. The materials related to information representation 
can be taught any time prior to Unit 2 and those dealing with hardware and software may be taught as 
suggested in (a) above.  Conclusion The proposed curriculum covers all the topics mentioned in CSI 
and CS2 (recommendation of ACM C~S), and some basic topics from CS3 (about 30%), CS4 (about 30%), CS5 
(about 20%) and CS6 (about 5%). Universities and colleges who adopt this curriculum and follow ACM recommendations 
in design of their courses, may like to include more recent and up-to-date topics in courses paralleling 
CS3, CS4 and CS5. For example, the topic of assembler construction (G) in CS3 may be considerably expanded 
from a meager 5% to 25% by including algorithms on assemblers and linking loaders or a more in-depth 
discussion of the assembly language of a real-machine. With regards to time allocation for the curriculum, 
the experience gained by teaching the curriculum at Moorhead State indicates that it is not possible 
to fully cover the contents of the course in less than the time proposed. PS. While sending this paper 
to ACM for printing, we received the la test recommendation of the ACM Curriculum Committee ~Koffman, 
Miller and Wardle] on CSI. This recommendation is in line with the curriculum proposed here but some 
aspects of it require further considerations. References I. ACM Curriculum Committee on Computer Science, 
 "Recommendations for The Under Graduate Program in Computer Science", Communication of ACM Vol. 22, 
No. 3 March 1979. 2. Ayen W. and Grief S., "A New Environment For Teaching Introuctory Computer Science", 
 Proc. SIGCSE Bulletin, Vol. 15, No. I, February 1983  3. Behforooz A. and Sharma 0., "A One-year Introductory 
Course for Computer Science Undergraduate Program", Proc. SIGCSE Bulletins Vol. 13, No. I February 1981 
 4. Bulgren W. and Wetzel G., "Introductory Computer Science Education", Proc. SIGCSE Bulletin, Vol. 
14, No. I February  5. Gabrini P., "Integration of Design and Programming Methodology into Beginning 
Computer Science Courses", Proc. SIGCSE Bulletin, Vol. 14, No. I, February 1982  6. Harrison W. and 
Magel K., "A Suggested Course in Introductory Computer Programming",  Proc. SIGCSE Bulletin Vol. 13, 
No. I, February 1981 7. Meinke J. and Beidler J., "Alternative to The Traditional First Course in Computing", 
Proc. SIGCSE Bulletin Vol. 13, No. I, February 1981 
			