
 . Some text in this electronic article is rendered in Type 3 or bitmapped fonts, and may display poorly 
on screen in Adobe Acrobat v. 4.0 and later. However, printouts of this file are unaffected by this problem. 
We recommend that you print the file for best legibility. Defunctionalization at Work OlivierDanvyandLasseR.Nielsen 
t BRICSDepartmentofComputerSiene UniversityofAarhus: Abstract 1. Background and Introduction Reynolds'sdefuntionalizationtehniqueisawhole-program 
transformationfromhigher-ordertofrst-orderfuntional programs.Westudypratialappliationsofthistrans­formationandunovernewonnetionsbetweenseemingly 
unrelatedhigher-orderandfrst-orderspeifationsandbe­tweentheirorretnessproofs.Defuntionalizationthere­foreappearsbothasaspringboardforrevealingnewon­netionsandasabridgefortransferringexistingresultsbe­tweenthefrst-orderworldandthehigher-orderworld. 
 Categories and Subject Descriptors D.1.1[ProgrammingTehniques]:Appliative(funtional) programming;D.3.3[ProgrammingLanguages]:Lan­guageConstrutsandFeatures-Abstratdatatypes,Con­trolstrutures,Datatypesandstrutures,Proedures,fun­tions,andsubroutines,Reursion;E.1[Data]:DataStru­tures-Reords;F.3.3[LogisandMeaningsofPrograms]: 
StudiesofProgramConstruts-Funtionalonstruts;F.4.1 [MathematialLogiandFormalLanguages]:Lambda alulusandrelatedsystems;I.2.2[ArtifialIntelligene]: 
AutomatiProgramming-Programtransformation.  Keywords Churhenoding,losureonversion,ontinuations,on tinu­ation-passingstyle(CPS),CPStransformation,defuntion­alization,diret-styletransformation,frst-orderprograms, 
higher-orderprograms,lambda-lifting,ML,regularexpres­sions,Sheme,superombinatoronversion,syntatitheo­ries. 
+NyMunkegade,Building540,DK-8000AarhusC,Denmark E-mail:{danvy,lrn} bris.dk *Anextendedversionofthisartileisavailable 
astheBRICStehnialreportRS-01-23. tBasiResearhinComputerSiene(www.bris.dk), fundedbytheDanishNationalResearhFoundation. 
Permission to make digital or hard copies of part or all of this work or personal or classroom use is 
granted without fee provided that copies are not made or distributed for profit or commercial advantage 
and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, 
to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee. PPDP 
01 Florence, Italy &#38;#169; ACM 2001 1-58113-388-x/01/09 $5.00 Infrst-orderprograms,allfuntionsarenamedandeah 
allreferstothealleebyitsname.Inhigher-orderpro­grams,funtionsmaybeanonymous,passedasarguments, andreturnedasresults.AsStraheyputit[49],funtions 
areseond­lassdenotablevaluesinafrst-orderprogram, andfrst­lassexpressiblevaluesinahigher-orderprogram. 
Onemaythenwonderhowfrst-lassfuntionsarerepre­sentedatruntime. First-lassfuntionsareoftenrepresentedwithlo­sures,i.e.,expressiblevaluespairingaodepointer 
andthedenotablevaluesofthevariablesourring freeinthatode,asproposedbyLandininthemid­1960's[30].Today,losuresarethemostommonrep­resentationoffrst-lassfuntionsintheworldofeager 
funtionalprogramming[1,17,32],aswellasastan­dardrepresentationforimplementingobjet-oriented programs[23].Theyarealsousedtoimplementhigher­orderlogiprogramming[8]. 
 Alternatively,higher-orderprogramsanbedefun­tionalizedintofrst-orderprograms,asproposedby Reynoldsintheearly1970's[43].Inadefuntion­alizedprogram,frst-lassfuntionsarerepresented 
withfrst-orderdatatypes:afrst-lassfuntionis introduedwithaonstrutorholdingthevaluesof thefreevariablesofafuntionabstration,anditis 
eliminatedwithaaseexpressiondispathingoverthe orrespondingonstrutors.  First-lassfuntionsanalsobedealtwithbytrans­latingfuntionalprogramsintoombinatorsandusing 
graphredution,asproposedbyTurnerinthemid­1970's[51].Thisimplementationtehniquehasbeen investigatedextensivelyintheworldoflazyfuntional 
programming[27,29,37,38].  Comparedtolosureonversionandtoombinatoronver­sion,defuntionalizationhasbeenusedverylittle.Thegoal 
ofthisartileistostudypratialappliationsofit. Wefrstillustratedefuntionalizationwithtwoonrete examples(Setions1.1and1.2).Inthefrstprogram,two 
funtionabstrationsareinstantiatedone,andinthese­ondprogram,onefuntionabstrationisinstantiatedre­peatedly.Wethenharaterizedefuntionalizationinanut­shell(Setion1.3)beforereviewingrelatedwork(Setion1.4). 
Finally,weraisequestionstowhihdefuntionalizationpro­ videsanswers(Setion1.5). 1.1 A sample higher-order 
program with a static number of closures InthefollowingMLprogram,auxispassedafrst-lassfun­tion,appliesitto1and10,andsumstheresults.Themain 
funtionallsauxtwieandmultipliestheresults.Allinall, twofuntionabstrationsourinthisprogram,inmain. (*aux:(int->int)->int*) 
funauxf =f1+f10 (*main:int*int*bool->int*) funmain(x,y,b) =aux(fnz=>x+z)* aux(fnz=>ifbtheny+zelsey-z) 
Defuntionalizingthisprogramamountstodefningadata typewithtwoonstrutors,oneforeahfuntionabstra­tion,anditsassoiatedapplyfuntion.Thefrstfuntion 
abstrationontainsonefreevariable(x,oftypeinteger), andthereforethefrstdata-typeonstrutorrequiresanin­teger.Theseondfuntionabstrationontainstwofree 
variables(y,oftypeinteger,andb,oftypeboolean),and thereforetheseonddata-typeonstrutorrequiresaninte­gerandaboolean. 
Inmain,thefrstfrst-lassfuntionisthusintrodued withthefrstonstrutorandthevalueofx,andtheseond withtheseondonstrutorandthevaluesofyandb. 
Inaux,thefuntionalargumentispassedtoaseond­lassfuntionapplythateliminatesitwithaaseexpression dispathingoverthetwoonstrutors. 
datatypelam=LAM1ofint ILAM2ofint*bool (*apply:lam*int->int*) funapply(LAM1x,z) =x+z Iapply(LAM2(y,b),z) 
=ifbtheny+zelsey-z (*aux def:lam->int*) funaux deff =apply(f,1)+apply(f,10) (*main def:int*int*bool->int*) 
funmain def(x,y,b) =aux def(LAM1x)*aux def(LAM2(y,b)) 1.2 A sample higher-order program with a dynamic 
number of closures Areviewerwonderedwhathappensforprogramsthat"dy­namiallygenerate"newlosures,andwhethersuhpro­gramsleadtonewonstantsandthusrequireextensiblease 
expressions.Thefollowingexampleillustratessuhasitu­ationandshowsthatnonewonstantsandnoextensible aseexpressionsareneeded. 
InthefollowingMLprogram,auxispassedtwoarguments andappliesonetotheother.Themainfuntionisgivena numberiandalistofnumbers[j1,j2,...]andreturns 
thelistofnumbers[i+j1,i+j2,...].Onefuntionab­stration,fni=>i+j,oursinthisprogram,inmain,as theseondargumentofaux.Givenaninputlistoflengthn, 
thefuntionabstrationisinstantiatedntimesintheourse oftheomputation. (*aux:int*(int->int)->int*) funaux(i,f) 
=fi (*main=fn:int*intlist->intlist*) funmain(i,js) =letfunwalknil =nil Iwalk(j::js) =(aux(i,fni=>i+j))::(walkjs) 
inwalkjs end Defuntionalizingthisprogramamountstodefningadata typewithonlyoneonstrutor,sinethereisonlyonefun­tionabstration,anditsassoiatedapplyfuntion.The 
funtionabstrationontainsonefreevariable(j,oftype integer),andthereforethedata-typeonstrutorrequires aninteger. 
Inmain,thefrst-lassfuntionisintroduedwiththeon­strutorandthevalueofj. Inaux,thefuntionalargumentispassedtoaseond­lassfuntionapplythateliminatesitwithaaseexpression 
dispathingovertheonstrutor. datatypelam=LAMofint (*apply:lam*int->int*) funapply(LAMj,i) =i+j (*aux def:int*lam->int*) 
funaux def(i,f) =apply(f,i) (*main def:int*intlist->intlist*) funmain def(i,js) =letfunwalknil =nil Iwalk(j::js) 
=(aux def(i,LAMj))::(walkjs) inwalkjs end Givenaninputlistoflengthn,theonstrutorLAMisused ntimesintheourseoftheomputation. 
 1.3 Defunctionalization in a nutshell Inahigher-orderprogram,frst-lassfuntionsariseasin­stanesoffuntionabstrations.Allthesefuntionabstra­tionsanbeenumeratedinawholeprogram.Defuntional­izationisthusawhole-programtransformationwherefun­tiontypesarereplaedbyanenumerationofthefuntion 
abstrationsinthisprogram. Defuntionalizationthereforetakesitsrootsintypethe­ory.Indeed,afuntiontypehidestypingassumptionsfrom 
theontext,and,aspointedoutbyMinamide,Morrisett, andHarperintheirworkontypedlosureonversion[32], makingtheseassumptionsexpliitrequiresanexistential 
type.Forawholeprogram,thisexistentialtypeanbe representedwithafnitesumtogetherwiththeorrespond­inginjetionsandasedispath,andthisrepresentationis 
preiselywhatdefuntionalizationahieves. Thesetype-theoretialrootsdonotmakedefuntional­izationastraitjaket,toparaphraseReynoldsaboutAl­gol[42].Forexample,oneanuseseveralapplyfuntions, 
e.g.,groupedbytypes,asinBell,Bellegarde,andHook's work[4].Oneanalsodefuntionalizeaprogramseletively, 
e.g.,onlyitsontinuations,asinSetion3.Oneaneven envisionalightweightdefuntionalizationsimilartoStekler 
andWand'slightweightlosureonversion[47],asinBaner­jee,Heintze,andRieke'sreentwork[2]. 1.4 Related work 
Originally,Reynoldsdeviseddefuntionalizationtotrans­formahigher-orderinterpreterintoafrst-orderone[43]. 
Hepresenteditasaprogrammingtehnique,andneverused itagain[44]. Sinethen,defuntionalizationhasnotbeenusedmuh, 
thoughwhenithas,itwasasafull-fedgedimplementation tehnique:Bondorfusesittomakehigher-orderprograms amenabletofrst-orderpartialevaluation[5];Tolmahand 
OlivauseittoompileMLprogramsintoAda[50];Fegaras usesitinhisobjet-orienteddatabasemanagementsystem, lambda-DB[18];WangandAppeluseitintype-safegarbage 
olletors[54];anddefuntionalizationisanintegralpartof MLton[7]andofBoquist'sHaskellompiler[6]. Onlylatelyhasdefuntionalizationbeenformalized:Bell, 
Bellegarde,andHookshowedthatitpreservestypes[4]; Nielsenproveditspartialorretnessusingdenotationalse­mantis[35,36];andBanerjee,HeintzeandRiekeproved 
itstotalorretnessusingoperationalsemantis[2].  1.5 This work Funtionalprogrammingenouragesfold-likereursivede­sents,typiallyusingauxiliaryreursivefuntions.Often, 
theseauxiliaryfuntionsarehigherorderinthattheiro­domainisafuntionspae.Forexample,ifanauxiliary funtionhasanaumulatoroftypea,itso-domainis 
a-(,forsome(.Foranotherexample,ifanauxiliary funtionhasaontinuationoftypea-(,forsome(, itso-domainis(a-()-(.Howdothesefuntional 
programsomparetoprogramswrittenusingafrst-order, data-strutureorientedapproah? Wand'slassialworkonontinuation-basedprogramtrans­formations[53]wasmotivatedbythequestion"Whatisa 
data-strutureontinuation?".Eahoftheexampleson­sideredinWand'spaperrequiredaeurekasteptodesign adatastrutureforrepresentingaontinuation.Aresuh 
eurekastepsalwaysneessary? Continuationsarevariouslypresentedasafuntionalrep­resentationoftherestoftheomputationandasafuntional 
representationoftheontextofaomputation[20].Wand's workaddressedtheformerview,soletusonsiderthelatter 
one.Forexample,inhisPhDthesis[19],Felleisendeveloped asyntatiapproahtosemantisrelyingonthefrst-order 
notionsof'evaluationontext'andof'pluggingexpressions intoontexts'.Howdothesefrst-ordernotionsompareto 
thenotionofontinuation? Intherestofthisartile,weshowthatdefuntionalization providesasingleanswertoallthesequestions.Allthepro­gramsweonsiderperformareursivedesentandusean 
auxiliaryfuntion.Whenthisauxiliaryfuntionishigher­order,defuntionalizationyieldsafrst-orderversionwithan 
aumulator(e.g.,treefatteninginSetion2.1andlistre­versalinSetion2.2).Whenthisauxiliaryfuntionisfrst­order,wetransformitintoontinuation-passingstyle;de­funtionalizationthenyieldsaniterativefrst-orderversion 
withanaumulatorintheformofadatastruture(e.g., stringparsinginSetion3.1andregular-expressionmath­inginSetion5).Wealsoonsideradefnitionalinterpreter 
forasyntatitheoryandweidentifythatitiswrittenin adefuntionalizedform.Wethen"refuntionalize"itand obtainaontinuation-passingdefnitionalinterpreterwhose 
ontinuationsrepresentstheevaluationontextsofthesyn­tatitheory(Setion4). Inaddition,weobservethatdefuntionalizationandChurh 
enodinghavedualpurposes,sineChurhenodingisa lassialwaytorepresentdatastrutureswithhigher-order funtions.WhatistheresultofdefuntionalizingaChurh­enodeddatastruture?Andwhatdoesoneobtainwhen 
Churh-enodingtheresultofdefuntionalization? Similarly,weobservethatbaktrakingisvariouslyimple­mentedinafrst-ordersettingwithoneortwostaks,and 
inahigher-ordersettingwithoneortwoontinuations.It isnaturalenoughtowonderwhatistheresultofChurh­enodingthestaksandofdefuntionalizingtheontinua­tions.Oneanwonderaswellabouttheorretnessproofs 
oftheseprograms-howdotheyompare? Intherestofthisartile,wealsoanswerthesequestions. WedefuntionalizetwoprogramsusingHughes'shigher­orderrepresentationofintermediatelistsandobtaintwo 
eÆientandtraditionalfrst-orderprograms(Setion2.2). WealsolarifytheextenttowhihChurhenodingandde­funtionalizationanbeonsideredasinversesofeahother 
(Setions2.3,2.4,and2.5).Finally,weompareandon­trastaregular-expressionmatheranditsproofbeforeand afterdefuntionalization(Setion5). 
 2. Defunctionalization of List-and of Tree-Processing Programs Weonsiderseveralanonialhigher-orderprogramsover 
listsandtreesandwedefuntionalizethem.Ineahase, defuntionalizationyieldsaknown,butunrelatedsolution. WethenturntoChurhenoding,whihprovidesauniform 
higher-orderrepresentationofdatastrutures.Weonsider theresultofdefuntionalizingChurh-enodeddatastru­tures,andweonsidertheresultofChurh-enodingthe 
resultofdefuntionalization. 2.1 Flattening a binary tree into a list Tofattenabinarytreeintoalistofitsleaves,wehoose 
tomapaleaftoaurriedlistonstrutorandanodeto funtionomposition,homomorphially.Inotherwords,we mapalistintothemonoidoffuntionsfromliststolists. 
Thisdefnitionhingesonthebuilt-inassoiativityoffun­tionomposition. datatype'abt=LEAFof'a INODEof'abt*'abt 
(*ons:'a->'alist->'alist*) funonsxxs =x::xs (*flatten:'abt->'alist *) (* walk:'abt->'alist->'alist*) 
funflattent =letfunwalk(LEAFx) =onsx Iwalk(NODE(t1,t2)) =(walkt1)o(walkt2) inwalktnil end Eta-expandingtheresultofwalkandinliningonsando 
yieldsaurriedversionofthefastfattenfuntionwithan aumulator. (*flatten ee:'abt->'alist *) (* walk:'abt->'alist->'alist*) 
funflatten eet =letfunwalk(LEAFx)a =x::a Iwalk(NODE(t1,t2))a =walkt1(walkt2a) inwalktnil end Itisalsoinstrutivetodefuntionalizeflatten.Twofun­tionalvaluesour-onefortheleavesandoneforthenodes­andthereforetheygiverisetoadatatypewithtwoonstru­tors.Sineflattenishomomorphi,thenewdatatypeis 
isomorphitothedatatypeofbinarytrees,andtherefore theassoiatedapplyfuntionouldbemadetoworkdiretly ontheinputtree,e.g.,usingdeforestation[52].Atanyrate, 
wereognizethisapplyfuntionasanunurriedversionof thefastfattenfuntionwithanaumulator. datatype'alam=LAM1of'a 
ILAM2of'alam*'alam (*apply:'alam*'alist->'alist*) funapply(LAM1x,xs) =x::xs Iapply(LAM2(f1,f2),xs) =apply(f1,apply(f2,xs)) 
(*ons def:'a->'alam*) funons defx =LAM1x (*o def:'alam*'alam->'alam*) funo def(f1,f2) =LAM2(f1,f2) 
(*flatten def:'abt->'alist*) (* walk:'abt->'alam*) funflatten deft =letfunwalk(LEAFx) =ons defx Iwalk(NODE(t1,t2)) 
=o def(walkt1,walkt2) inapply(walkt,nil) end Themonoidoffuntionsfromliststolistsorrespondsto Hughes'snovelrepresentationsoflists[28],whihwetreat 
next.  2.2 Higher-order representations of lists Inthemid-1980's,Hughesproposedtorepresentintermedi­atelistsaspartiallyappliedonatenationfuntions[28],so 
thatinsteadofonstrutingalistxs,oneinstantiatesthe funtionabstrationfnys=>xs ys.Thekeypropertyof thishigher-orderrepresentationisthatlistsanbeonate­natedinonstanttime.Therefore,thefollowingnaivever­sionofreverseoperatesinlineartimeinsteadofinquadrati 
time,aswiththeusuallinkedrepresentationoflists,where listsareonatenatedinlineartime. (*append:'alist->'alist->'alist*) 
funappendxsys =xs ys (*reverse:'alist->'alist*) funreversexs =letfunwalknil =appendnil Iwalk(x::xs) 
=(walkxs)o(append[x]) inwalkxsnil end Letusdefuntionalizethisprogram.First,likeHughes, wereognizethatappendingtheemptylististheidentity 
funtionandthatappendingasingleelementamountsto onsingit. (*id:'alist->'alist*) funidys =ys (*ons:'a->'alist->'alist*) 
funonsxxs =x::xs (*reverse:'alist->'alist *) (*walk:'alist->'alist->'alist*) funreversexs =letfunwalknil 
=id Iwalk(x::xs) =(walkxs)o(onsx) inwalkxsnil end Thefuntionspae'alist->'alistarisesbeauseofthree funtionalvalues:id,inoneonditionalbranh;and,inthe 
other,theresultsofonsinganelementandofallingwalk. Wethusdefuntionalizetheprogramusingadatatype withthreeonstrutorsanditsassoiatedapplyfuntion. 
datatype'alam=LAM0 ILAM1of'a ILAM2of'alam*'alam (*apply:'alam*'alist->'alist*) funapply(LAM0,ys) =ys 
Iapply(LAM1x,ys) =x::ys Iapply(LAM2(f,g),ys) =apply(f,apply(g,ys)) ThisdatatypemakesitplainthatinHughes'smonoidof 
intermediatelists,onatenationisperformedinonstant time(herewithLAM2). Therestofthedefuntionalizedprogramreadsasfollows. 
(*id def:'alam*) valid def=LAM0 (*ons def:'a->'alam*) funons defx=LAM1x (*o def:'alam*'alam->'alam*) 
funo def(f,g)=LAM2(f,g) (*reverse def:'alist->'alist*) (* walk:'alist->'alam*) funreverse defxs =letfunwalknil 
=id def Iwalk(x::xs) =o def(walkxs,ons defx) inapply(walkxs,nil) end Theauxiliaryfuntionsareonlyaliasesforthedata-type 
onstrutors.WealsoobservethatLAM1andLAM2arealways usedinonnetionwitheahother.Therefore,theyanbe fusedinasingleonstrutorLAM3andsoantheirtreatment 
inapplylam.Theresultreadsasfollows. datatype'alam alt=LAM0 Ingeneral,eahoftheinjetionfuntionsdefningadata 
ILAM3of'alam alt*'a (*apply lam alt:'alam alt*'alist->'alist*) funapply lam alt(LAM0,=ys Iapply lam 
alt(LAM3=apply lam alt(f, (*reverse def alt:'a(* walk:'afunreverse def altxs =letfunwalknil =LAM0 Iwalk(x:: 
ys) (f,x),ys) x::ys) list->'alist *) list->'alam alt*) xs) =LAM3(walkxs,x) inapply lam alt(walkxs,nil) 
end AsinSetion2.1,weanseethatdefaltembedsits reverseinputlistintothedatatypelamalt,homomorphially.The 
assoiatedapplyfuntionouldthereforebemadetowork diretlyontheinputlist.Wealsoreognizeapplylamalt asanunurriedversionofthefastreversefuntionwithan 
aumulator. Hughesalsouseshisrepresentationofintermediatelists todefnea'felds'funtionthatextratswordsfromstrings. 
HisrepresentationgivesrisetoaneÆientimplementation ofthefeldsfuntion.Andindeed,asforreverseabove,de­funtionalizingthisimplementationgivesthefastimplemen­tationthataumulateswordsinreverseorderandreverses 
themusingafastreversefuntiononethewholewordhas beenfound.Defuntionalizationthusonfrmstheefetive­nessofHughes'srepresentation. 
 2.3 Defunctionalizing Church-encoded non-recursive data structures Churh-enodingavalueamountstorepresentingitbyaA­terminsuhawaythatoperationsonthisvaluearearried 
outbyapplyingtherepresentationtospeifA-terms[3,9, 24,33]. Adatastrutureisasuminadomain.(Whenthedata strutureisindutive,thedomainisreursive.)Asumis 
defnedbyitsorrespondinginjetionfuntionsandaase dispath[55,page133].Churh-enodingadatastruture onsistsin(1)ombininginjetionfuntionsandasedis­pathintoA-termsand(2)operatingbyfuntionapplia­tion. 
Intherestofthissetion,forsimpliity,weonlyonsider Churh-enodeddatastruturesthatareunurried.This way,weandefuntionalizethemasawhole. 
Forexample,monotypedaredefnedasfollows. (*Churh pair:'a funChurh pair(x1, =fns:'a*'a Churhpairsandtheirseletors 
*'a->('a*'a->'a)->'a*) x2) ->'a=>s(x1,x2) (*Churh fst:(('a*'a->'a)->'b)->'b*) funChurh fstp =p(fn(x1,x2)=>x1) 
(*Churh snd:(('a*'a->'a)->'b)->'b*) funChurh sndp =p(fn(x1,x2) ApairisrepresentedasaThisargumentisaseletorseondprojetion. 
=>x2) A-termexpetingoneargument. orrespondingtothefrstorthe struturehasthefollowingform. inji=A(Xl,...,X,).A(Sl,...,Sm).Si(Xl,...,X,) 
SowhathappensifonedefuntionalizesaChurh-enoded datastruture,i.e.,theresultoftheinjetionfuntions? Eahinjetionfuntiongivesrisetoadata-typeonstrutor 
whoseargumentsorrespondtothefreevariablesintheterm underlinedjustabove.Thesefreevariablesarepreiselythe 
parametersoftheinjetionfuntions,whiharethemselves theparametersoftheoriginalonstrutorsthatwereChurh enoded. 
ThereforedefuntionalizingChurh-enodeddatastru­tures(i.e.,theresultoftheirinjetionfuntions)givesriseto 
thesamedatastrutures,priortoChurhenoding.These datastruturesareaessedthroughtheauxiliaryapply funtionsintroduedbydefuntionalization. 
Forexample,monotypedChurhpairsandtheirseletors aredefuntionalizedasfollows. Theseletorsarelosedtermsandthereforetheor­respondingonstrutorsareparameterless.Bydef­nition,aseletorispassedatupleofargumentsand 
returnsoneofthem. datatypesel=FST ISND (*apply sel:sel*('a*'a)->'a*) funapply sel(FST,(x1,x2)) =x1 Iapply 
sel(SND,(x1,x2)) =x2 Thereisoneinjetionfuntionforpairs,andthere­foreitgivesrisetoadatatypewithoneonstrutor 
forthevaluesofthetwofreevariablesoftheresult ofChurhpair.Theorrespondingapplyfuntionper­formsaseletion.(N.B:applypairallsapplysel,re­fetingtheurriedtypeofChurhpair.) 
datatype'apair=PAIRof'a*'a (*apply pair:'apair*sel->'a*) funapply pair(PAIR(x1,x2),s) =apply sel(s,(x1,x2)) 
Finally,onstrutingapairamountstoonstruting apair,aalaTarskioneouldsay[21],andseletinga omponentofapairisahievedbyallingapplypair, 
whihinturnsalls (*Churh pair deffunChurh pair def =PAIR(x1,x2) (*Churh fst deffunChurh fst def :p =apply 
pair(p, (*Churh snd def:funChurh snd defp =apply pair(p, applysel. :'a*'a->'apair*) (x1,x2) 'apair->'a*) 
FST) 'apair->'a*) SND) Anoptimizingompilerwouldinlinebothapplyfuntions. Theresultingseletors,togetherwiththedefuntionalized 
paironstrutor,wouldthenoinidewiththeoriginaldef-initionofpairs,priortoChurhenoding. 2.4 Defunctionalizing 
Church-encoded recursive data structures LetusbriefyonsiderChurh-enodedbinarytrees.Two injetionfuntionsour:onefortheleaves,andoneforthe 
nodes.AChurh-enodedtreeisaA-termexpetingtwo arguments.Theseargumentsaretheseletorsorresponding towhetherthetreeisaleaforwhetheritisanode. 
funChurh leafx =fn(s1,s2)=>s1x funChurh node(t1,t2) =fn(s1,s2)=>s2(t1(s1,s2),t2(s1,s2)) Duetothereursivenatureofbinarytrees,Churh-node 
propagatestheseletorstothesubtrees. Ingeneral,eahoftheinjetionfuntionsdefningadata struturehasthefollowingform. 
inji =A(Xl,...,X,). A(Sl,...,Sm).Si(Xl,...,X.(Sl,...,Sm),...,X,) whereX.(Sl,...,Sm)oursforeahX.thatisinthedata 
type. SowhathappensifonedefuntionalizesaChurh-enoded reursivedatastruture,i.e.,theresultoftheinjetionfun­tions?Again,eahinjetionfuntiongivesrisetoadata­typeonstrutorwhoseargumentsorrespondtothefree 
variablesinthetermunderlinedjustabove.Thesefreevari­ablesarepreiselytheparametersoftheinjetionfuntions, 
whiharethemselvestheparametersoftheoriginalon­strutorsthatwereChurhenoded. ThereforedefuntionalizingChurh-enodedreursivedata 
strutures(i.e.,theresultoftheirinjetionfuntions)also givesrisetothesamedatastrutures,priortoChurhen­oding.Thesedatastruturesareaessedthroughtheaux­iliaryapplyfuntionsintroduedbydefuntionalization. 
LetusgetbaktoChurh-enodedbinarytrees.Sine defuntionalizationisawhole-programtransformation,we onsiderawholeprogram.Letusonsiderthefuntionom­putingthedepthofaChurh-enodedbinarytree.This 
funtionpassestwoseletorstoitsargument.Thefrstis theonstantfuntionreturning0,andaountingforthe depthofaleaf.Theseondisafuntionthatwillbeapplied 
tothedepthofthesubtreesofeahnode,andomputesthe depthofthenodebytakingthemaxofthedepthsofthe twosubtreesandaddingone. 
funChurh deptht =t(fnx=>0, fn(d1,d2)=>1+Int.max(d1,d2)) Thiswholeprogramisdefuntionalizedasfollows. Theseletorsgiverisetotwoonstrutors,SELLEAF 
andSELNODE,andtheorrespondingtwoapplyfun­tions,applyselleafandapplyselnode. datatypesel leaf=SEL LEAF 
funapply sel leaf(SEL LEAF,x) =0 datatypesel node=SEL NODE funapply sel node(SEL NODE,(d1,d2)) =Int.max(d1,d2)+1 
Asfortheinjetionfuntions,asnotedabove,they giverisetotwoonstrutors,LEAFandNODE,andthe orrespondingapplyfuntion. 
datatype'atree=LEAFof'a INODEof'atree*'atree funChurh leaf defx =LEAFx funChurh node def(t1,t2) =NODE(t1,t2) 
Finally,thedefuntionalizedmainfuntionappliesits argumenttothetwoseletors. (* depth def:'atree->int *) 
(*apply tree:'atree*(sel leaf*sel node)->int*) fundepth deft =apply tree(t,(SEL LEAF,SEL NODE)) andapply 
tree(LEAFx,(sel leaf,sel node)) =apply sel leaf(sel leaf,x) Iapply tree(NODE(t1,t2),(sel leaf,sel node)) 
=apply sel node(sel node, (apply tree(t1, (sel leaf,sel node)), apply tree(t2, (sel leaf,sel node)))) 
Again,anoptimizingompilerwouldinlinebothapplyfun­tionsandSELLEAFandSELNODEwouldthendisappear.The resultwouldthusoinidewiththeoriginaldefnitionofbi­narytrees,priortoChurhenoding. 
 2.5 Church-encoding the result of defunction­alization AsanbeeasilyverifedwiththeChurhpairsandthe Churhtreesabove,Churh-enodingtheresultofdefun­tionalizingaChurh-enodeddatastruturegivesbakthis 
Churh-enodeddatastruture:theapplyfuntionsrevert tosimpleappliations,themaindata-strutureonstrutors beomeinjetionfuntions,andtheauxiliarydata-struture 
onstrutorsbeomeseletors. Inpratie,however,oneofteninlinesseletorsduring Churhenodingiftheyonlyourone-whihShivers 
referstoas"super-beta"[45].Doingsoyieldsanatual inversetodefuntionalization,asillustratedinSetion4.3. 
This"refuntionalization"isused,e.g.,inDanvy,Grobauer, andRhiger'sworkongoal-diretedevaluation[13].Wealso 
illustrateitinSetion4.3. InChurh-enodeddatastrutures,seletorshavethefa­vorofaontinuation.Inthenextsetion,weonsiderhow 
todefuntionalizeontinuations.  3. Defunctionalization of CPS-Transformed First-Order Programs Asfuntionalrepresentationsofontrol,ontinuationspro­videanaturaltargetfordefuntionalization.Inthissetion, 
weinvestigatetheproessoftransformingdiret-stylepro­gramsintoontinuation-passingstyle(CPS)programs[12, 
48]anddefuntionalizingtheirontinuation.Wethenom­parethisproesswithWand'sontinuation-basedprogram­transformationstrategies[53]. 
3.1 String parsing 0,1, Weonsiderareognizerforthelanguage.Wewrite itasafuntionoftypeintlist->bool.Theinputisa 
listofintegers,andthereognizerhekswhetheritisthe onatenationofalistofn0sandofalistofn1s(and thereforeoflength2n). 
Westartwithareursive-desentparsertraversingthe inputlist. (*re0:intlist->bool *) (*walk:intlist->intlist*) 
funre0xs =letexeptionNOT funwalk(0::xs') =(asewalkxs' of1::xs'' =>xs'' I =>raiseNOT) Iwalkxs =xs in(walkxs=nil)handleNOT=>false 
end Theauxiliaryfuntionwalktraversestheinputlist.Every timeitenounters0,itallsitselfreursively.Whenitmeets 
somethingelsethan0,itreturnstherestofthelist,and expetstofnd1ateveryreturn.Inaseofmismath(i.e., alistelementotherthan1forreturns,oralistthatistoo 
shortortoolong),anexeptionisraised. Letuswritewalkinontinuation-passingstyle[12,48]. (*re1:intlist->bool 
*) (*walk:intlist*(intlist->bool)->bool*) funre1xs =letfunwalk(0::xs',k) =walk(xs',fn(1::xs'') =>kxs'' 
I =>false) Iwalk(xs,k) =kxs inwalk(xs,fnxs'=>xs'=nil) end Theauxiliaryfuntionwalktraversestheinputlisttail­reursively(andthusdoesnotneedanyexeption).Ifit 
meetssomethingelsethan0,itsendstheurrentlisttothe urrentontinuation.Ifitenounters0,ititeratesdownthe 
listwithanewontinuation.Ifthenewontinuationissent aliststartingwith1,itsendsthetailofthatlisttotheur­rentontinuation;otherwise,itreturnsfalse.Theinitial 
ontinuationtestswhetheritissenttheemptylist. Letusdefuntionalizere1.Twofuntionabstrations our:onefortheinitialontinuationandoneforinterme­diateontinuations. 
datatypeont=CONT0 ICONT1ofont (*apply2:(ont*intlist)->bool*) funapply2(CONT0,xs') =xs'=nil Iapply2(CONT1k,1::xs'') 
=apply2(k,xs'') Iapply2(CONT1k,) =false (*re2:intlist->bool *) (*walk:intlist*ont->bool*) funre2xs =letfunwalk(0::xs',k) 
=walk(xs',CONT1k) Iwalk(xs,k) =apply2(k,xs) inwalk(xs,CONT0) end Weidentifytheresultasimplementingapush-downautoma­ton[26].Thisautomatonhastwostatesandoneelementin 
thestakalphabet.Thetwostatesarerepresentedbythe twofuntionswalkandapply2.Thestakisimplemented bythedatatypeont.Thetransitionsarethetail-reursive 
alls.Thisautomatonaeptsaninputifproessingthis inputendswithanemptystak. WealsoobservethatontimplementsPeanonumbers. 
LetusreplaethemwithMLintegers. (*apply3:(int*intlist)->bool*) funapply3(0,xs') =xs'=nil Iapply3(k,1::xs'') 
=apply3(k-1,xs'') Iapply3(k,) =false (*re3:intlist->bool *) (*walk:intlist*int->bool*) funre3xs =letfunwalk(0::xs',k) 
=walk(xs',k+1) Iwalk(xs,k) =apply3(k,xs) inwalk(xs,0) end Theresultistheusualiterativetwo-statereognizerwitha 
ounter. Insummary,westartedfromafrst-orderreursiveversion andweCPS-transformedit,makingithigher-orderandthus 
defuntionalizable.Weidentifedthatthedefuntionalized programimplementsapush-downautomaton.Notiingthat 
thedefuntionalizedontinuationimplementsPeanoarith­meti,wehangeditsrepresentationtobuilt-inintegersand 
weidentifedthattheresultistheusualiterativetwo-state reognizerwithaounter. 3.2 Continuation-based program 
transforma­tion strategies, reconsidered Wand'slassialworkonontinuation-basedprogramtrans­formation[53]suggestsone(1)toCPS-transformapro­gram;(2)todesignadata-struturerepresentationforthe 
ontinuation;and(3)tousethisrepresentationtoimprove theinitialprogram.Weobservethatineahoftheexam­plesmentionedinWand'sartile,defuntionalizationan­swersthehallengeoffndingadatastruturerepresenting 
theontinuation-whihissignifantbeausefndingsuh "data-strutureontinuations"wasoneofthemotivations ofthework.Nevertheless,defuntionalizationisnoton­sideredinthetextbooksandartilesthatrefertoWand's 
artile.l Atanyrate,Wand'sworkwasseminalinthatitshowed howdetouringviaCPSyieldsiterativeprogramswithau­mulators.Inaddition,Reynolds'sworkshowshowdefun­tionalizingtheontinuationofCPS-transformedprograms 
givesrisetotraditional,frst-orderaumulators. lThetextbooksandartilesweareawareofinludethose foundintheResearhIndeathttp:..iteseer.nj.ne.om.. 
x Wealsoobservethatdefuntionalizedontinuationsa­ountfortheall/returnpatternsofreursivelydefnedfun­tions.Therefore,aspointedoutbyDijkstrainthelate 
1950's[16],theyevolveinastak-likefashion.Aorollaryof thisremarkisthatbeforedefuntionalization,ontinuations 
arealsousedLIFOwhentheyresultfromtheCPStransfor­mationofaprogramthatdoesnotuseontroloperators[10, 11,12,14,15,39,40,48]. 
  4. A Syntactic Theory in the Light of Defunc­tionalization Inthissetion,wepresentadefnitionalinterpreterfora 
syntatitheory[19,56]ofarithmetiexpressions.Weob­servethatthisdefnitionalinterpreterorrespondstothe outputofdefuntionalization.Wepresenttheorrespond­inghigher-orderinterpreter,whihisinontinuation-passing 
style.Itsontinuationrepresentstheevaluationontextof thesyntatitheory. 4.1 A syntactic theory Weonsiderasimplifedlanguageofarithmetiexpressions. 
Anarithmetiexpressioniseitheravalue(aliteral)ora omputation.Aomputationiseitheranadditionoraon­ditionalexpressiontestingwhetheritsfrstargumentiszero. 
e::=nIe+eI...eee Asyntatitheoryprovidesaredutionrelationonex­pressionsbydefningvalues,evaluationontexts,andre­dexes[19]. 
Thevaluesareliterals,andtheevaluationontextsare defnedasfollows. v::=n E::=[]IE[[]+e]IE[v+[]]IE[...[]ee] 
PlugginganexpressioneintoaontextE,writtenE[e], isdefnedasfollows. ([])[e]=e (E[[]+e'])[e]=E[e+e'] (E[v+[]])[e]=E[v+e] 
(E[...[]ele2])[e]=E[...eee2] l Theredutionrelationisthendefnedbythefollowing rules,wheretheexpressionspluggedintotheontextonthe 
left-handsidearealledredexes. E[nl+n2]-E[n3]wheren3isthesumofnlandn2 E[...0ele2]-E[el] E[...nele2]-E[e2]ifn 
=0 Thesedefnitionssatisfya"uniquedeomposition"lemma [19,56]:anyexpression,e,thatisnotavalueanbeuniquely 
deomposedintoanevaluationontext,E,andaredex,r, suhthate=E[r].  4.2 Implementation Arithmetiexpressionsaredefnedwiththefollowingdata 
type. datatypeae=Vofint ICofomp andomp=ADDofae*ae IIFZofae*ae*ae Inae,wedistinguishbetweenvalues(literals)andomputa­tions(additionsandonditionalexpressions),astraditional. 
Evaluationontextsaredefnedwiththefollowingdata type. datatypee=EMPTY IADD1ofe*ae IADD2ofe*int IIFZ0ofe*ae*ae 
 Theorrespondingpluggingfuntionreadsasfollows. (*plug:e*ae->ae*) funplug(EMPTY,e) =e Iplug(ADD1(x,e2),e) 
=plug(x,C(ADD(e,e2))) Iplug(ADD2(x,i1),e) =plug(x,C(ADD(Vi1,e))) Iplug(IFZ0(x,e1,e2),e) =plug(x,C(IFZ(e,e1,e2))) 
 Aomputationundergoesaredutionstepwhen(1)itis deomposedintoaredexanditsontext,(2)theredexis ontrated,and(3)theresultispluggedintotheontext. 
(*redue1:omp*e->ae*) funredue1(ADD(Vi1,Vi2),x) =plug(x,V(i1+i2)) Iredue1(ADD(Vi1,C2),x) =redue1(2,ADD2(x,i1)) 
Iredue1(ADD(C1,e2),x) =redue1(1,ADD1(x,e2)) Iredue1(IFZ(V0,e1,e2),x) =plug(x,e1) Iredue1(IFZ(Vi,e1,e2),x) 
=plug(x,e2) Iredue1(IFZ(C0,e1,e2),x) =redue1(0,IFZ0(x,e1,e2)) Evaluationisspeifedbyrepeatedlyperformingaredu­tionuntilavalueisobtained. 
(*eval:ae->int*) funeval(Vi) =i Ieval(C) =eval(redue1(,EMPTY))  4.3 Refunctionalization Weobservethattheprogramabovepreiselyorrespondsto 
theoutputofdefuntionalization:plugistheapplyfuntion ofe.Theorrespondinginputtodefuntionalizationthus 
readsasfollows. (*redue1:omp*(ae->'a)->'a*) funredue1(ADD(Vi1,Vi2),x) =x(V(i1+i2)) Iredue1(ADD(Vi1,C2),x) 
=redue1(2,fne2=>x(C(ADD(Vi1,e2)))) Iredue1(ADD(C1,e2),x) =redue1(1,fne1=>x(C(ADD(e1,e2)))) Iredue1(IFZ(V0,e1,e2),x) 
=xe1 Iredue1(IFZ(Vi,e1,e2),x) =xe2 Iredue1(IFZ(C0,e1,e2),x) =redue1(0,fne0=>x(C(IFZ(e0,e1,e2)))) (*eval:ae->int*) 
funeval(Vi) =i Ieval(C) =eval(redue1(,fne=>e)) Weobservethatredue1iswritteninontinuation-passing style.Itsontinuationthereforerepresentstheevaluation 
ontextofthesyntatitheory. 4.4 Back to direct style Sineredue1usesitsontinuationanonially,itanbe mappedbaktodiretstyle[10,14].Thediret-styleversion 
ofredue1readsasfollows. (*redue1:omp->ae*) funredue1(ADD(Vi1,Vi2)) =V(i1+i2) Iredue1(ADD(Vi1,C2)) =C(ADD(Vi1,redue12)) 
Iredue1(ADD(C1,e2)) =C(ADD(redue11,e2)) Iredue1(IFZ(V0,e1,e2)) =e1 Iredue1(IFZ(Vi,e1,e2)) =e2 Iredue1(IFZ(C0,e1,e2)) 
=C(IFZ(redue10,e1,e2)) (*eval:ae->int*) funeval(Vi) =i Ieval(C) =eval(redue1) Theresultisadefnitionalinterpreterwithanimpliit 
representationofontexts. 4.5 Summary and conclusion Wehaveonsideredanaivedefnitionalinterpreterforasyn­tatitheory,andhaveobservedthattheontextsandtheir 
pluggingfuntionarethedefuntionalizedounterpartofa ontinuation.Thisobservationhasledustoimplementthe defnitionalinterpreterindiretstyle.(Inthatsense,Se­tions3and4aresymmetri,sineSetion3startswitha 
diret-styleprogramandendswithadefuntionalizedCPS program.) Onemaywonderhowthevariousrepresentationsofon­textsinasyntatitheoryinfuenereasoningaboutpro­grams.Inthenextsetion,weomparetwoorretness 
proofsofaprogram,beforeandafterdefuntionalization.  5. A Comparison between Correctness Proofs before 
and after Defunctionalization: Matching Regular Expressions Weonsideratraditionalontinuation-basedmatherfor 
regularexpressions[26],wedefuntionalizeit,andweom­pareandontrastitsorretnessproofbeforeandafterde­funtionalization.Tothisend,Setion5.1briefyreviews 
regularexpressionsandthelanguagestheyrepresent;Se­tion5.2presentstheontinuation-basedmather,whihis higher-order,anditsdefuntionalizedounterpart;andSe­tion5.3omparesandontraststheirorretnessproofs. 
5.1 Regular expressions Thegrammarforregularexpressions,r,overthealphabet 2andtheorrespondinglanguage,£(r),areasfollows. 
r::=o£(o)=o I1£(1)={t} I£()={}whereE2 Irr£(rlr2)=£(rl)£(r2) Ir+r£(rl+r2)=£(rl)£(r2) ** Ir£(r)=£(r)*=iEW(£(r))i 
WerepresentstringsaslistsofMLharaters,andregular expressionsaselementsofthefollowingMLdatatype. datatyperegexp=ZEROIONEICHARofhar 
ICATofregexp*regexp ISUMofregexp*regexp ISTARofregexp Wedefnetheorrespondingnotionof"thelanguageofa regularexpression"asfollows. 
£(ZERO)={} £(ONE)={nil} £(CHAR)={[]} £(CAT(rl,r2»)=£(rl)£(r2) £(SUM(rl,r2»)=£(rl)£(r2) £(STARr)=iEW(£(r))i 
TheonatenationoflanguagesisdefnedasLlL2 ={x yI xELl/yEL2},whereweusetheappendfuntion(noted asinML)toonatenatestrings. 
 5.2 The two matchers Ourreferenematherforregularexpressionsishigher-order (Figure1).Wethenpresentitsdefuntionalizedounterpart 
(Figure2). 5.2.1 The higher-order matcher Figure1displaysourreferenemather,whihisomposi­tionalandontinuation-based.Compositional:allreursive 
allstoaeptoperateonapropersubpartoftheregular­expressionunderonsideration.Andontinuation-based: theontrolfowofthematherisdrivenbyontinuations. 
Themainfuntionismath.Itisgivenaregularexpression andalistofharaters,andallsaeptwiththeregular expression,thelist,andaninitialontinuationexpetinga 
listofharatersandtestingwhetherthislistisempty. Theaeptfuntionreursivelydesendsitsinputregular expression,threadingthelistofharaters. 
Theaeptstarfuntionisalambda-liftedversionofa reursiveontinuationdefnedloallyintheSTARbranh. (Thesituationisexatlythesameasinaompositional 
matherforanimperativelanguagewithwhileloops.There, onewritesanauxiliaryreursivefuntionaswell.)This reursiveontinuationheksthatmathinghasprogressed 
inthestring. Reently,Harperhaspublishedasimilarmathertoil­lustrate"proof-direteddebugging"[25].Playfully,heon­sideredanon-ompositionalmatherthatdoesnothek 
progresswhenmathingaKleenestar.Hisartileshows (1)howonestumblesonthenon-ompositionalpartwhen attemptingaproofbystruturalindution;and(2)how 
onerealizesthatthematherdivergesforpathologialregu­larexpressionssuhasSTARONE.Harperthen(1)makeshis matherompositionaland(2)normalizesregularexpres­sionstoexludepathologialregularexpressions.Instead, 
westartfromaompositionalmatherandweinludea progresstestinaeptstar,whihletsushandlepatholog­ialregularexpressions. 
 (*aept :regexp*harlist*(harlist->bool)->bool*) (*aept star:regexp*harlist*(harlist->bool)->bool*) funaept(r,s,k) 
=(aserofZERO =>false IONE =>ks ICHAR =>(asesof('::s')=>='andalsoks' Inil =>false) ICAT(r1,r2)=>aept(r1,s,fns'=>aept(r2,s',k)) 
ISUM(r1,r2)=>aept(r1,s,k)orelseaept(r2,s,k) ISTARr' =>aept star(r',s,k)) andaept star(r,s,k) =ksorelseaept(r,s,fns'=>not(s=s')andalsoaept 
star(r,s',k)) (*math:regexp*harlist->bool*) funmath(r,s) =aept(r,s,fns'=>s'=nil) Figure1:Higher-order,ontinuation-basedmatherforregularexpressions 
datatyperegexp stak=EMPTYIACCEPTofregexp*regexp stakIACCEPT STARofharlist*regexp*regexp stak (*aept def 
:regexp*harlist*regexp stak->bool*) (*aept star def:regexp*harlist*regexp stak->bool*) (*pop and aept:regexp 
stak*harlist *) funaept def(r,s,k) =(aserofZERO =>false IONE =>pop and aept(k,s) ICHAR =>(asesof('::s')=>='andalsopop 
and aept(k,s') Inil =>false) ICAT(r1,r2)=>aept def(r1,s,ACCEPT(r2,k)) ISUM(r1,r2)=>aept def(r1,s,k)orelseaept 
def(r2,s,k) ISTARr' =>aept star def(r',s,k)) andaept star def(r,s,k) =pop and aept(k,s)orelseaept def(r,s,ACCEPT 
STAR(s,r,k)) andpop and aept(EMPTY,s') =s'=nil Ipop and aept(ACCEPT(r2,k),s') =aept def(r2,s',k) Ipop 
and aept(ACCEPT STAR(s,r,k),s') =not(s=s')andalsoaept star def(r,s',k) (*math:regexp*harlist->bool*) 
funmath(r,s) =aept def(r,s,EMPTY) Figure2:First-order,stak-basedmatherforregularexpressions 5.2.2 The 
.rst-order matcher DefuntionalizingthematherofFigure1yieldsadatatype representingtheontinuationsanditsassoiatedapplyfun­tion. 
Thedatatyperepresentsastakofregularexpressions (possiblywithasideonditionforthetestinKleenestars). Theapplyfuntionmerelypopsthetopelementofthis 
stakandtriestomathitagainsttherestofthestring. Wethusnamethedatatype"regexpstak"andtheapply funtion"popandaept".Wealsogiveameaningfulname 
tothedatatypeonstrutors.Figure2displaystheresult.  5.3 The two correctness proofs Wegiveaorretnessproofofboththehigher-orderversion 
andthefrst-orderversion,andweinvestigatewhethereah proofanbeonvertedtoaprooffortheotherversion. Theorretnessriterionwehooseissimplythatforall 
regularexpressionsrandstringss(representedbyalistof haraters), { math(r,s»terminates,and sE£(r)9math(r,s».true 
Whenwritingmath(r,s».true,wemeanthatevalu­atingmath(r,s»terminatesandyieldstheresulttrue. Moregenerallyweequateexpressionsiftheyevaluateto 
thesameresult(andthereforedivergentexpressionsarenot equivalenttoanything).WealsoreasonaboutMLprograms 
equationally. 5.3.1 Correctness proof of the higher-order matcher Sinemath(r,s»=aept(r,s,fns'=>s'=nil», 
bydefnition,itissuÆienttoprovethatforsandras above,andforanyfuntionfromlistsofharaterstobooleans terminatingonallsuÆxesofs,denotedbyk, 
{ aept(r,s,k»terminates,and sE£(r)£(k)9aept(r,s,k».true wherewedefnethelanguageofa"string-aeptor"kasthe 
set{sIks.true}. Theproofisbystruturalindutionontheregularex­pression.Intheasewherer=STARr',asubproofshows 
thatthefollowingholdsforanystring. { aeptstar(r',s,k»terminates,and sE£(r') * £(k)9aeptstar(r',s,k».true 
Thesubproofisbywell-foundedindutiononthestruture ofthestring(suÆxesaresmaller)forthe"."diretion,and bymathematialindutiononthenaturalnumbernsuh 
thatsE£(r'),£(k)forthe"="diretion.Bothsubproofs usetheouterindutionhypothesisforaept(r',s,k». Weantransferthisprooftothedefuntionalizedver­sion.Sinekstranslatestopopandaept(k,s»,we 
defne£(k)toread{sIpopandaept(k,s».true}. Theproofthengoesthroughinexatlythesameformat. 5.3.2 Correctness 
proof of the .rst-order matcher Alternatively,ifweweretoprovetheorretnessofthefrst­ordermatherdiretly,wewouldbelessinlinedtoreognize 
thestakkasrepresentingafuntion.Instead,weould easilyendupprovingthefollowingthreepropositionsby mutualindution. 
Pl(r,s,k):= aept(r,s,k».true9sE£(r)£(k) P2(k,s) := popandaept(k,s».true9sE£(k) P3(r,s,k):= aeptstar(r,s,k».true9sE£(r) 
* £(k) wherewedefnethelanguageofastakofregularexpres­sionsasfollows. £(EMPTY)={nil} £(ACCEPT(r,k»)=£(r)£(k) 
£(ACCEPTSTAR(s,r,k»)=(£(r) *£(k)){s} Forbrevityweignoretheterminationpartoftheproof andassumethatallthefuntionsaretotal.Weprove,by 
well-foundedindutiononthepropositionsthemselves,that Pl,P2,andP3holdforanyhoiesofs,r,andk.The orderingisanintriatemappingintowxw,orderedlexio­graphiallysothattheproofofapropositiononlydepends 
on"smaller"propositions. Thisproofismoreonvolutedthanthehigher-orderone fortworeasons: 1.itseparatesthelanguageoftheontinuationfromthe 
funtionthatmathesit,soonehastohekwhether thefuntionreallymathestheorretlanguage;and 2.itombinesthetwonestedindutionsofthehigher­orderproofintoonewell-foundedindution. 
Stillthisproofrevealsapropertyoftheontinuationsinthe higher-orderversion,namelythatthereareatmostthreedif­ferentkindsofontinuationsinuse,somethingthatannot 
beseenfromthetypeoftheontinuation-afullfuntion spae. Weouldthusdefneasubsetofthisfuntionspaein­dutively,sothatitonlyontainsthefuntionsthatanbe 
generatedbythethreeabstrations.Thefrst-orderproof ouldthenbeextendedtothehigher-orderprogrambyas­sumingeverywherethattheontinuationkliesinthissubset 
andshowingthatnewlygeneratedontinuationsdotoo.In efet,thesetofontinuationsispartitionedintodisjoint subsets,justasthefrst-orderdatatyperepresentsasum, 
andthenweanprovesomethingaboutelementsineah part.  5.4 Summary and conclusion Wehaveonsideredamatherforregularexpressions,both 
inhigher-orderformandinfrst-orderform,andwehave omparedthemandtheirorretnessproof.Thediferene betweenthefuntion-basedandthedatatype-basedrepre­sentationofontinuationsisreminisentoftheoneptof 
'junk'inalgebraisemantis[22].Onerepresentationis afullfuntionspaewheremanyelementsdonotorre­spondtoanatualontinuation,andtheotherrepresen­tationonlyontainselementsorrespondingtoatualon­tinuations.Thisdiferenefndsanehointheorretness 
proofsofthetwomathers.Inthefrstweannotknow whatthefuntionwilldo,andintheseondweaninspet thevalue.Ontheotherhand,weouldmakeassumptions 
aboutthefuntionsbyrestritingthefuntionspae(evenif onlyintheproof)toasmalleronethatisstilllosedunder theonstrutionsused. 
Anotherdiferenebetweenthetwoproofsiswherethe languageofaontinuationistreated.Inthefrst-order ase,aontinuationanbeinspeted,soweanprovesome­thingforallontinuationsindependentlyofwhereeahone 
isdefned.Inthehigher-orderase,however,theonlyplae whereweknowanythingaboutaontinuationiswhereit isonstruted,beauseintheproof,weanlookinsidethe 
abstrationwherethisontinuationappearstextually. Moregenerally,thissetionalsoillustratesthatdefun­tionalizingafuntionalinterpreterforabaktrakinglan­guagethatusessuessontinuationsyieldsareursivein­terpreterwithonestak[13,31,41].Similarly,defuntion­alizingafuntionalinterpreterthatusessuessandfail­ureontinuationsyieldsaniterativeinterpreterwithtwo 
staks[13,34].  6. Conclusions and Issues Reynolds'sdefuntionalizationtehniqueonnetstheworld ofhigher-orderprogramsandtheworldoffrst-orderpro­grams.Inthisartile,wehaveillustratedthisonnetion 
byonsideringavarietyofsituationswheredefuntionaliza­tionprovesfruitfulinadelarativesetting. Higher-orderfuntionsprovideaonvenientsupportfor 
speifyingandfortransformingprograms.Aswehaveshown, defuntionalizationanleadtomoreonretespeifations, e.g.,thatusefrst-orderaumulators.Andaswehaveseen 
withWand'sontinuation-basedprogram-transformation strategies,defuntionalizationanautomateeurekastepsto 
representdata-strutureontinuations. Conversely,defuntionalizationalsoinreasesone'saware­nessthatsomefrst-orderprogramsnaturallyorrespond 
toother,higher-order,programs.Forexample,funtional interpretersforbaktrakinglanguagesarevariouslyspe­ifedwithoneortwoontrolstaksandwithoneortwo 
ontinuations,butthesespeifationsarenotdisonneted, sinedefuntionalizingtheontinuation-basedinterpreters 
yieldstheorrespondingstak-basedones.Onarelated note,CPS-transforminganinterpreterwithoneontinua­tionisalreadyknowntoautomatiallyyieldaninterpreter 
withtwoontinuations[12].Weare,however,notawareof asimilartransformationfortheirstak-basedounterparts. 
Wealsohaveomparedandontrastedtheorretness proofsofaprogram,beforeandafterdefuntionalization. Wehavefoundthatwhilethefrst-orderandthehigher­orderprogrammingmethodssuggestdiferentproofmeth­ods,eahoftheproofsanbeadaptedtofttheotherversion 
oftheprogram. Finally,wehavepointedoutatthetype-theoretialfoun­dationsofdefuntionalization. Acknowledgments 
AndrzejFilinskiandDavidTomanprovidedmosttimely ommentsonanearlierversionofthisartile.Thiswork hasalsobeneftedfromtheanonymousreviewers'satten­tionaswellasfromDanielDamian,JuliaLawall,Karoline 
Malmkj<r,andMortenRhiger'somments. WewouldalsoliketothankJohnReynoldsforhisenour­agingwordsandHaraldS0ndergaard,ourprogramhair­man,forhispatiene. 
 7. References [1]A.W.AppelandT.Jim.Continuation-passing, losure-passingstyle.InM.J.O'Donnelland S.Feldman,editors,ProeedingsoftheSixteenth 
AnnualACMSymposiumonPriniplesof ProgrammingLanguages,pages293-302,Austin, Texas,Jan.1989.ACMPress. [2]A.Banerjee,N.Heintze,andJ.G.Rieke. 
Semantis-baseddesignandorretnessofontrol-fow analysis-basedprogramtransformations.Unpublished, Mar.2001. 
[3]H.Barendregt.TheLambdaCalulus:ItsSyntaxand Semantis,volume103ofStudiesinLogiandthe FoundationofMathematis.North-Holland,1984. 
Revisededition. [4]J.M.Bell,F.Bellegarde,andJ.Hook.Type-driven defuntionalization.InM.Tofte,editor,Proeedingsof 
the1997ACMSIGPLANInternationalConfereneon FuntionalProgramming,pages25-37,Amsterdam, TheNetherlands,June1997.ACMPress. 
[5]A.Bondorf.Self­AppliablePartialEvaluation.PhD thesis,DIKU,ComputerSieneDepartment, UniversityofCopenhagen,Copenhagen,Denmark, 
1990.DIKURapport90/17. [6]U.Boquist.CodeOptimizationTehniquesforLazy FuntionalLanguages.PhDthesis,Departmentof 
ComputingSiene,ChalmersUniversityof Tehnology, , GoteborgUniversityGoteborg,Sweden, Apr.1999. [7]H.Cejtin,S.Jagannathan,andS.Weeks. 
Flow-diretedlosureonversionfortypedlanguages. InSmolka[46],pages56-71. [8]W.Chen,M.Kifer,andD.S.Warren.Hilog:A 
foundationforhigher-orderlogiprogramming.The JournalofLogiProgramming,15(3):187-230,1993. [9]A.Churh.TheCaluliofLambda­Conversion. 
PrinetonUniversityPress,1941. [10]O.Danvy.Baktodiretstyle.SieneofComputer Programming,22(3):183-195,1994. 
[11]O.Danvy.Formalizingimplementationstrategiesfor frst-lassontinuations.InSmolka[46],pages88-103. [12]O.DanvyandA.Filinski.Representingontrol,a 
studyoftheCPStransformation.Mathematial StruturesinComputerSiene,2(4):361-391,1992. [13]O.Danvy,B.Grobauer,andM.Rhiger.Aunifying 
approahtogoal-diretedevaluation.InW.Taha, editor,ProeedingsoftheSeondWorkshopon Semantis,Appliations,andImplementationof 
ProgramGeneration(SAIG2001),LetureNotesin ComputerSiene,Florene,Italy,Sept.2001. Springer-Verlag.Toappear. 
[14]O.DanvyandJ.L.Lawall.BaktodiretstyleII: First-lassontinuations.InW.Clinger,editor, Proeedingsofthe1992ACMConfereneonLispand 
FuntionalProgramming,LISPPointers,Vol.V, No.1,pages299-310,SanFraniso,California,June 1992.ACMPress. 
[15]O.DanvyandF.Pfenning.Theourreneof ontinuationparametersinCPSterms.Tehnial reportCMU-CS-95-121,ShoolofComputerSiene, 
CarnegieMellonUniversity,Pittsburgh,Pennsylvania, Feb.1995. [16]E.W.Dijkstra.Reursiveprogramming.InS.Rosen, 
editor,ProgrammingSystemsandLanguages, hapter3C,pages221-227.MGraw-Hill,NewYork, 1960. [17]R.K.Dybvig.ThreeImplementationModelsfor 
Sheme.PhDthesis,DepartmentofComputer Siene,UniversityofNorthCarolinaatChapelHill, ChapelHill,NorthCarolina,Apr.1987.Tehnial 
Report#87-011. [18]L.Fegaras.lambda-DB.Availableonlineat http://lambda.uta.edu/lambda-DB/manual/, 1999-2001. 
[19]M.Felleisen.TheCaluliofA­v­CSConversion:A SyntatiTheoryofControlandStateinImperative Higher­OrderProgrammingLanguages.PhDthesis, 
DepartmentofComputerSiene,IndianaUniversity, Bloomington,Indiana,Aug.1987. [20]D.P.Friedman,M.Wand,andC.T.Haynes. 
EssentialsofProgrammingLanguages,seondedition. TheMITPress,2001. [21]J.-Y.Girard.Loussolum.MathematialStruturesin 
ComputerSiene,11(3),2001.Toappear. [22]J.A.Goguen,J.W.Thather,andE.G.Wagner.An initialalgebraapproahtothespeifation, 
orretnessandimplementationofabstratdatatypes. InCurrentTrendsinProgrammingMethodology, volumeIV,pages80-149.Prentie-Hall,1978. 
[23]A.GoldbergandD.Robson.Smalltalk­80:The LanguageanditsImplementation.Addison-Wesley, 1983. [24]M.Goldberg.ReursiveAppliationSurvivalinthe 
A­Calulus.PhDthesis,ComputerSiene Department,IndianaUniversity,Bloomington, Indiana,May1996. [25]R.Harper.Proof-direteddebugging.Journalof 
FuntionalProgramming,9(4):463-469,July1999. [26]J.E.HoproftandJ.D.Ullman.Introdutionto AutomataTheory,Languages,andComputation. 
Addison-Wesley,1979. [27]J.Hughes.Superombinators:Anewimplementation methodforappliativelanguages.InD.P.Friedman 
andD.S.Wise,editors,ConfereneReordofthe 1982ACMSymposiumonLispandFuntional Programming,pages1-10,Pittsburgh,Pennsylvania, 
Aug.1982.ACMPress. [28]J.Hughes.Anovelrepresentationoflistsandits appliationtothefuntion"reverse".Information 
ProessingLetters,22(3):141-144,1986. [29]T.Johnsson.Lambdalifting:Transformingprograms toreursiveequations.InJ.-P.Jouannaud,editor, 
FuntionalProgrammingLanguagesandComputer Arhiteture,number201inLetureNotesin ComputerSiene,pages190-203,Nany,Frane, 
Sept.1985.Springer-Verlag. [30]P.J.Landin.Themehanialevaluationof expressions.ComputerJournal,6:308-320,1964. 
[31]C.MellishandS.Hardy.IntegratingProloginthe POPLOGenvironment.InJ.A.Campbell,editor, ImplementationsofPROLOG,pages147-162.Ellis 
Horwood,1984. [32]Y.Minamide,G.Morrisett,andR.Harper.Typed losureonversion.InG.L.SteeleJr.,editor, ProeedingsoftheTwenty­ThirdAnnualACM 
SymposiumonPriniplesofProgrammingLanguages, pages271-283,St.PetersburgBeah,Florida,Jan. 1996.ACMPress. 
[33]T.A.Mogensen.EÆientself-interpretationin lambdaalulus.JournalofFuntionalProgramming, 2(3):345-363,1992. 
[34]T.NiholsonandN.Y.Foo.Adenotationalsemantis forProlog.ACMTransationsonProgramming LanguagesandSystems,11(4):650-665,Ot.1989. 
[35]L.R.Nielsen.Adenotationalinvestigationof defuntionalization.Progressreport(superseded by[36]),BRICSPhDShool,UniversityofAarhus, 
June1999. [36]L.R.Nielsen.Adenotationalinvestigationof defuntionalization.TehnialReportBRICS RS-00-47,DAIMI,DepartmentofComputerSiene, 
UniversityofAarhus,Aarhus,Denmark,De.2000. [37]S.L.PeytonJones.TheImplementationofFuntional ProgrammingLanguages.PrentieHallInternational 
SeriesinComputerSiene.Prentie-Hall International,1987. [38]S.L.PeytonJonesandD.R.Lester.Implementing 
FuntionalLanguages.PrentieHallInternational SeriesinComputerSiene.Prentie-Hall,1992. [39]J.Polakow.Linearlogiprogrammingwithordered 
ontexts.InM.GabbrielliandF.Pfenning,editors, ProeedingsoftheSeondInternationalConfereneon PriniplesandPratieofDelarativeProgramming, 
pages68-79,Montreeal,Canada,Sept.2000.ACM Press. [40]J.PolakowandK.Yi.Provingsyntatipropertiesof exeptionsinanorderedlogialframework.In 
H.KuhenandK.Ueda,editors,FifthInternational SymposiumonFuntionalandLogiProgramming, number2024inLetureNotesinComputerSiene, 
pages61-77,Tokyo,Japan,Mar.2001. Springer-Verlag. [41]T.A.Proebsting.Simpletranslationofgoal-direted 
evaluation.InR.K.Cytron,editor,Proeedingsofthe ACMSIGPLANN97ConfereneonProgramming LanguagesDesignandImplementation,SIGPLAN 
Noties,Vol.32,No5,pages1-6,LasVegas,Nevada, June1997.ACMPress. [42]J.C.Reynolds.TheesseneofAlgol.InvanVliet, 
editor,InternationalSymposiumonAlgorithmi Languages,pages345-372,Amsterdam,The Netherlands,1982.North-Holland. 
[43]J.C.Reynolds.Defnitionalinterpretersfor higher-orderprogramminglanguages.Higher­Order andSymboliComputation,11(4):363-397,1998. 
Reprintedfromtheproeedingsofthe25thACM NationalConferene(1972). [44]J.C.Reynolds.Defnitionalinterpretersrevisited. 
Higher­OrderandSymboliComputation, 11(4):355-361,1998. [45]O.Shivers.Control­FlowAnalysisofHigher­Order 
LanguagesorTamingLambda.PhDthesis,Shoolof ComputerSiene,CarnegieMellonUniversity, Pittsburgh,Pennsylvania,May1991.TehnialReport 
CMU-CS-91-145. [46]G.Smolka,editor.ProeedingsoftheNinthEuropean SymposiumonProgramming,number1782inLeture 
NotesinComputerSiene,Berlin,Germany,Mar. 2000.Springer-Verlag. [47]P.A.SteklerandM.Wand.Lightweightlosure 
onversion.ACMTransationsonProgramming LanguagesandSystems,19(1):48-86,Jan.1997. [48]G.L.SteeleJr.Rabbit:AompilerforSheme. 
TehnialReportAI-TR-474,ArtifialIntelligene Laboratory,MassahusettsInstituteofTehnology, Cambridge,Massahusetts,May1978. 
[49]C.Strahey.Fundamentaloneptsinprogramming languages.Higher­OrderandSymboliComputation, 13(1/2):1-49,2000. 
[50]A.TolmahandD.P.Oliva.FromMLtoAda: Strongly-typedlanguageinteroperabilityviasoure translation.JournalofFuntionalProgramming, 
8(4):367-412,1998. [51]D.A.Turner.Anewimplementationtehniquefor appliativelanguages.Software-Pratieand 
Experiene,9(1):31-49,1979. [52]P.Wadler.Deforestation:Transformingprogramsto eliminatetrees.TheoretialComput.Si., 
73(2):231-248,1989. [53]M.Wand.Continuation-basedprogramtransformation strategies.J.ACM,27(1):164-180,Jan.1980. 
[54]D.C.WangandA.W.Appel.Type-safegarbage olletors.InH.R.Nielson,editor,Proeedingsofthe Twenty­EighthAnnualACMSymposiumonPriniples 
ofProgrammingLanguages,pages166-178,London, UnitedKingdom,Jan.2001.ACMPress. [55]G.Winskel.TheFormalSemantisofProgramming 
Languages.FoundationofComputingSeries.TheMIT Press,1993. [56]Y.Xiao,A.Sabry,andZ.M.Ariola.Fromsyntati 
theoriestointerpreters:Automatingproofsof deompositionlemma.Higher­OrderandSymboli Computation,14(4),2001.Toappear. 
  
			