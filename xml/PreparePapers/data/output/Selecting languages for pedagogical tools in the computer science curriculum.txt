
 Selecting Languages for Pedagogical Tools in the Computer Science Curriculum Carol Smith and Jon Ricknmn 
Southern Illinois University, Computer Science Department Carbondale, Illlno~is 62901 Abstract The selection 
of languages for use as pedigogi-cal aids in the teaching of computer science is still a big issue at 
most universities. The rebellion against FORTRAN has given rise to nu-merous heirs Co the throne, as, 
PL/1, ALGOL, PASCAL, etc. In deciding how to resolve this issue small departments have to consider the 
effect the decision might have on the produc-tivity of their faculty. The analysis of this problem as 
viewed at SIU-Carbondale is de-scribed within. The analysis is performed by applying a set of criteria 
to a list of poten-tial languages. I. Introduction The specification of a core curriculum for an undergraduate 
computer science degree is one of the more challenging aspects of computer science education. This 
document investigates the effect that language selection for the core curriculum can have on the entire 
currlc- ulum specification, The authors feel that it is important to state that they have no vested 
interests in a par- tlcular language. This becomes important when one views the flavor of the papers 
that have been wrltten addressing the issue of language selection in a computer science curriculum. 
 Some of these papers claim that: 1) We prefer language Y and by the way we have written a compiler 
for Y that is available at a nominal fee or 2) language X is the best language to use in teaching 
"dodads" and please consider our text "Dodads for the Computer Scientist" in which all examples and 
exercises are written in lan- guage X. Despite the fact that these papers are well written and offer 
sound arguments, the vested interests of the authors tend Co diminish their effect. It is not our intent 
to belittle the contributions that have been made in thls area. The contribution made by compiler wrlters 
and language text authors has had a tremendous in- fluence on upgrading computer science curricula. 
 However, for purposes of clarification, the au- thors of this paper want to state clearly that they 
are not selling any compiler or language dependent text. For the most part, thls paper will address 
the issues of language selection for our Computer Science Department curriculum at SIU-Carbondale. We 
feel that the seemingly egostistical theme of the paper is somewhat Justified in that the situ- ation 
in our department appears to be representa- tlve of the situation as it exists in a large number of cQmputer 
science departments. We are a young department wlth a rapidly expanding student body. Weflnd our responsibilitles 
to our majors and the university (service courses) growing at a more rapid rate than our faculty size 
can accom- modate. As such we tend to find ourselves con- tlnually attempting to solve the problem of 
maxi- mizing our output, both in a qualitative and quantitative sense, subject to the constraints of 
 a small faculty. SIU, in accord with the majority of computer science departments, uses FORTRAN for 
the lan- guage vehicle in its introductory course - CS 202. This course is normally the first course 
taken by our majors. CS 202 also doubles as a service course for other students who desire some know- 
ledge of FORTRAN programming. ~avlng completed CS 202, our majors are then required to take CS 302 - 
a course in IBM Assembler Language. CS 202 and CS 302 are normally taken during the students first year 
in our major (their sophmore year). This situation has recently come under review. Three of the more 
serious reasons for the review are~ (1) In our upper level courses only a know- ledge of FORTRAN or 
Assembler can be assumed. As a result we find ourselves using these lan- guages rio support our upper 
level courses even if we would prefer Co use another language better suited to our needs. If the desire 
to use another language is strong enough, we must take the tlme to introduce it in the upper level courses. 
 (2) The use of FORTRAN in an introductory course is criticized for the effect it has on future programming. 
Heavy reliance on the GO TO, for instance, is something students tend to stick wlth even when they are 
programming in a language where thls is not necessary.  39 (3) If we focus our attention on only the 
core courses, then exposure to other program- ming languages is deferred until late in the program when 
our students take CS 411, a course in Programming Languages. In CS 411 the stu- dents are introduced 
co ALGOL, PL/i and LISP (language selecclon varies here). The con- sCralnts of a semester course results 
in a superficial exposure Co progr-mmlng in these languages. As a result our students are most familiar 
and most comfortable in programming only wlCh those constructs found in FORTRAN and Assembler.  In searching 
for a solution to this problem we are trying to find a set of languages that is truly supportive of our 
curriculum. Like most users we are trying to find a language (or a small set of languages) that is (are) 
well suited to our needs. There are obviously a hast of languages that can be considered. For our purposes 
we have investigated the following: ALGOL W, APL, ASSEMBLER, BASIC, COBOL, EULER, FORT:gAN, (STRUCTURED) 
FORTRAN, LISP, PASCAL, PL/1, PL dlalects (eg. PLC, SP(k), SNOBOL, WATFIV and OWN). OWN refers to speciallzed 
lan- guages that have been developed to support a par- tlcular department's needs. MIX and ECL are ex- 
amples of this category of languages. We have rejected any attempt at developing our version of OWN - 
a luxury that large department's might consider but small departments have to forget. Having defined 
a set of potential candidates the next step is to see how these candidates measure up a:~alnst our departmental 
needs. It is impor- tant to note that departmental needs vary over the time spectrum. In maklng language 
selections a fen years ago the service aspects of the course were the primary criteria. Adding an undergrad- 
uate and master's program has resulted in a redef- inltlon of our departmental needs and Chelr respective 
priorities. II. Criteria There are several factors which influence the choice of languages co be used 
in supporting a computer sciefice curriculum. The factors that have effected this selection at SIU are 
discussed in t:he following paragraphs. These include A. Pedagogical factors Ci) Availability of a 
subset for beginners (ii) Support for upper level courses (iii) Support for the process of teach- ins 
about progr-mmlng (iv) Text availability B. Resource Constraints (1) Influence of a departmental mini- 
computer ~ii) The time constraint of a three year program (ill) Cost effleclency and/or turnaround 
time C. Polltlcal issues (1) Languages used in the "real world"  (ii) Service courses   In measuring 
the suitability of a language as compared with the criteria, a pseudo grading scale has been used when 
appropriate. In these ratings, "A" represents the highest score and "E" the lowest. Subset for beginners 
 In teaching beginning students their first pro- grammlng language, it is desirable to make assignments 
requiring program composition and de- bugging as early as possible. The sooner stu- dents can create 
code in the context of a com- plete alogrithm the sooner they will be able to verify the semantics of 
statements and not Just the syntax. We've found students are more likely to succeed in their first crucial 
programming experiences when programs containing a relatively few simple statement types can be composed 
and tested. The property of a language to contain a well defined small subset of statements which 40 
 define a complete language in the sense that they are capable of encoding interesting algorithms, we 
term the subset property. At the present time the subset property doesnVt eliminate many lan- guages, 
but it is important because some of the ones that are weak by this criterion have other attributes which 
could easily make them a loglcal selection. The language which has been best known for its subset property 
i8 BASIC. In this language only 6 or 7 simple statements can be learned quickly and simple programs coded 
after only 5 to 8 hours of instruction. The subset property has been im-proved for many languages through 
new definitions of the language by compiler writers who are more interested in meeting the needs of educational 
environments. WATFIV, PLC, and SP(k) are the prime examples of improving the subset property for FORTRAN 
and PL/1. It is worth noting the strong similiarities between these auhaets and BASIC. They all have 
in common the format-free input and output statements and very simple con- ditional statements. COBOL 
is the weakest in terms of the subset property by requiring three division, containing 20 to 50 statements, 
before imperative statements of the Procedure Division can be coded. Even if these statements are given 
to beginning students confusion increases and the constraints imposed by the Data Division can cause 
additional prob- lems for beginners debugging their first programs. Of course, the number of statements 
in the subset isn't the only consideration in determining the subset property. Statements need to be 
simple, or capable of being reduced in scope to simple statements, both syntactically as well as seman- 
tically. Here for example the relatively few statements required to code interesting programs in LISP 
are difficult for beginners to understand semantically and survive syntatlcally in an early coding and 
debugging. Our ratings of several languages on the subset property are: ALGOL W B APL B ASSEMBLER 
C BASIC A COBOL D EULER B FORTRAN (WATFIV) B(A) STRUCTURED FORTRAN A LISP D PASCAL A PL/1 (PLC, 
SP k ) B(A) SNOBOL B Support of upper level courses Once a language meets the demands set by beginning 
courses the next question is, will it support up-per level courses? It is especially important for the 
language to support the required core of upper level courses. The most important attri-butes required 
by advanced courses are the ability of a language to handle the more complex internal data structures 
and being capable of interfacing easily with the more specialized external file access methods. These 
attributes are necessary for data structures and file structures courses as well as application areas 
like systems design. The internal data structures should also handle character string manipulation and 
have recursive subroutine capabilities for compiler courses. Capabilities such as these are not common 
to most of the languages which have the subset property. Extensions have been attempted for several lan- 
guages but they usually appear as artlflclal ap- pendages and fall to really help in solving specialized 
programming problems with appropriate well designed statements from the language. The property that 
permits a language to handle a wide range of problems we will refer to as the completeness of the language. 
The completeness property is a measure of a language's ability to provide programming language constructs 
necessary for programming a wide range of applications. Completeness is not a property in high demand 
for the typical user who has a specialized applica- tion. Computer science departments are atypical 
 41 users in desiring a language with this property. The alternative, using a dedicated language for 
each application, is infeasible to most depart- ments who have to face the real time constraints built 
into a curriculum. Completeness may also be relative to the hardware and operating system on which a 
language is im- plemented. Core, auxiliary storage devices, and available file access methods can all 
be real con- stralnts in supporting a language which is robust and complete enough to handle a wide range 
of problems. Our evaluation of the languages by completeness is: ALGOL W B APL E ASSEMBLER A BASIC D 
COBOL B EULER B FORTRAN (WATFIV) C(C) STRUCTURED FORTRAN C LISP C PASCAL A PL/1 (PLC, SP k ) A(B) SNOBOL 
B When considering the support of middle and upper level courses special consideration must be given 
to assembler languages. Courses including assem- bly language play specialized roles in a computer science 
curriculum. Assembler language code is not only capable of producing efficient running applications and 
operating systems but can also be considered a tool in teaching computer hard- ware organization or architecture. 
In our cur- riculum, assembly language has been taught in the second course required by majors and is 
covered in more detail in the traditional systems progra~ing course. Even as assembly languages approach 
high level languages through firmware implementation the special roles played by assem-bly language will 
continue to warrant special consideration. Support of programmln a style techniques The most controversial 
subject in programming is the concept of structured programming. Since there is no universal agreement 
on the meaning of this concept it seems inappropriate to attempt to compare languages on the basis of 
their abili- ty to support structured programming. One point that is not controversial is that in asking 
our students to write programs we are stressing more than, simply solvins the problem. We are asking 
them to exhibit a knowledge of programming style. The Kernlghan &#38; Plauger text (2), for instance, 
 contains numerous examples of programming tech ~ niques that can be used in the production of more readable 
code. Obviously, the use of good programming techniques is something that must be practiced independently 
of the language being used. However, there are certain techniques that are language dependent. We canlt 
use an IF--THEN--ELSE is our language doesntt have one. We can't eliminate as many GO TO's as we might 
wish to if our language does not provide superior control structures. In selecting a language for an 
introductory course it is desirable to pick a language that provides as much freedom as possible in expressing 
good programming techniques. A student is better off trying to figure out how to get along without the 
IF--THEN--ELSE after knowing how to use one than in not using the construct (should it be- come avaiable) 
because of unfamiliarity with the benefits of the IF--THEN--ELSE. The support of control structures, 
data struc- tures, etc., for good programming techniques is something that is common in the newer language, 
PASCAL, for example, and lacking in the older languages, eg. FORTRAN. Our ratings for the languages on 
this criterion are: ALGOL W B APL E  42 ASSEMBLER E BASIC D COBOL D EULER B FORTRAN (WATFIV) 
D(D) STRUCTURED FORTRAN C LISP D PASCAL A PL/1 (PLC, SP k ) B(B) SNOBOL C  Text availability In 
an introductory course it is deslrable to have a text that is helpful to the beginning programmer. The 
security of a readable text can be a great benefit to the student. It is beyond the scope of this paper 
to attempt to review the numerous texts available for the lan- guages being considered. The ratings on 
this criterion simply reflect the availability of texts so that FORTRAN gets a higher rating than PASCAL, 
ALGOL W and EULER because there are more FORTRAN texts available. Since the ratings are based on a quantitative 
rather than a qualita- tive measure, they may be misleading. However, the small number of texts available 
in support of some of the languages may very well result in the inability to find a text to support the 
desired course. In the same sense, a large supply of texts implies a better chance of find- ing an appropriate 
text for a given course. The ratings on the basis of text availability are: ALGOL W D APL C ASSEMBLER 
A BASIC B COBOL B EULER D FORTRAN (WATFIV) A(A) STRUCTURED FORTRAN B LISP C PASCAL D PL/1 (PLC, 
SP k ) C(B) SNOBOL C  Influence of a departmental minicomputer The introduction of the departmental 
mini- computer (a Cal Data 135 Emulating a PDP 11-40) into our curriculum was one of the main factors 
which precipitated our recent efforts in language selection. As with many minicomputers the vendor supplied 
an assembler and a FORTRAN compiler and others are becoming available. The mini was in- troduced into 
the curriculum as a tool for teach- ing architecture and systems programming via the assembler language 
but then the question arose, where did IBM 370 assembler fit into the curri- culum previously used in 
teaching architecture and systems programming? It was agreed that IBM Assembler should be retained in 
the core curri- culum for comparison and relevancy and then two assembly languages were required. If 
some other high level languages were to be used for systems programming on the mini then possibly two 
addition languages could be required in the core curri- culum for an undergraduate giving something like: 
 FORTRAN Intro to program- ming IBM ASSEMBLER Intro to Machine Language MINI ASSEMBLER Intro to Machine 
Architecture PL/I Programming Lan- guages MINI SYSTEMS PROG LANGUAGE System Program- ming  where the 
first 3 languages would be covered in first year and a half. This means that students would be trying 
to learn 3 languages very rapidly and not gaining enough depth or skill in any one language for use in 
upper level courses where the languages should not be emphasized as much as the 43  problem solving 
techniques and applications. Also PL/I 'would be introduced too late for use in middle level and most 
upper level courses which could effectively use its data structure and pro- gramming structure attributes. 
 Time Constraints In theory it would be best to require a signifi- cant amount of programming in several 
program- ming languages from each of our students. In practice, the time constraints of an undergraduate 
program impose severe restrictions on both the number of languages that can be introduced and the amount 
of programming that can be done in each language. The typical undergraduate has several programming 
 assignments that must be completed in his career, These assignments fall into one of three types-- 
 introductory, expository and production. As the title implies, introductory programming assign- ments 
are used to acquaint a student with a language--usually his first language~ Exposi- tory assignments 
are used to expose a student to a new language or new language feature. Assign- ments of~this type are 
usually geared to demon- strate how a particular language feature can accommodate some special application. 
In pro- duction type assignments, the language used takes on secondary importance. The student has 
to pro- duce an assembler, compiler, data base routine or operating system and usually has freedom 
to choose a language for the implementation of this software. At SIU, most of our students choose 
either FORTRAN or IBM ASSEMBLER as their production languages. Their familiarity with these languages 
is the primary motivation. In attempting to decide which languages we should stress early in the program, 
the requirements of the production assignments have been consid- ered. If FORTRAN is the only high 
level language stressed in the first year, then we are forcing our students to chooseFORTRAN for their 
 production assignments if they choose to use a high level language. It is important to note why we 
can only stress one high level language. The reason for this stems from the fact that our introductory 
course doubles as a service course. Any attempt to gear this course to the pace and requirements of 
our majors diminishes its usefulness as a service course to the university. An obvious alternative is 
to split the course and set up a special introductory course for our majors. This alternative has two 
serious drawbacks. First is the lack of faculty necessary to accommodate the split courses. Secondly 
is the issue of pre-requisite strings. A significant number of students decide to become computer science 
majors midway through the intro- ductory course and if we don't allow the service course to function~as 
a prerequisite for the rest of our program we are discouraging the latent computer science major. Efficiency 
and turnaround When a department depends on a heavily scheduled computer for processing student programs 
there is an immediate concern that programs assigned in classes with high enrollments be processed effic- 
 iently. There is also the desire that students in these classes (for that matter all classes) receive 
fast processing or quick turnaround. In our situation, we donVt have enough interactive ter- minals 
on campus to support beginning classes with enrollments of several hundred students and therefore the 
efficiency and turnaround of batch processed languages is our main concern. In literature, (see Peck 
(3) and Adams etal (i)), has reported information on the processing times for various languages and 
they boil down to our following ratings by language. ALGOL W B APL A ASSEMBLER (ASSIST) D(A) BASIC 
A COBOL C rULER B FORTRAN (WATFIV) B(A) STRUCTURED FORTRAN A LISP B 44  PASCAL B PL/1 (PLC, SP[k]) 
. D(B) SNOBOL B A more subtle criteria is whether or not a lan- guage has an in-core compiler. Our centralized 
computer center, as is the case wlthmany academic computing centers, supports an express system where 
programs with short processing times and little output are run with very high priority and given high 
priorities in the output queue. These systems or monitors usually require that only in-core compilers 
are run under them so as to reduce the number of Z/O's per Job. Therefore the criteria to ensure rapid 
turnaround in our situation depends more on the binary pro- erpty of the languages having an in-core 
compiler which will run under our express system~ The most readily available and proven in-core com- 
pilers (or assemblers or interpreters) are WATF~V, PLC, BASIC and ASSIST. It has been our experience 
that good turnaround is important pedlgoclally and for maintaining high morale in beginning courses with 
large en- rollments. Beginning students dontt improve their debugging methods that much when turnaround 
time increases because they Just don't have that many debugging techniques that they understand how to 
use at an early stage in their development, Political  One final language selection criterion that 
must be considered is the issue of relevance. Is it necessary to teach the languages which are most widely 
used outside the classroom in order to keep the curriculum relevant to the real world? Proponents of 
some of the newer languages claim that this should not be an issue and that by making it an issue computer 
science departments are dogmatically reinforcing a stagnant status ~o. Pressure supporting the relevance 
issue comes from many groups. Students are probably the most in- terested in this point. Their interest 
stems from the fact that they are constantly reading adver- tisements for COBOL programmers, ASSEMBLER 
pro- grammers, PL/i progr----ers, etc. If we were to pick a language solely on the basis of use outside 
the classroom COBOL would be the obvious winner. The lack of a well defined subset as noted earlier, 
has forced us to reject COBOL as a candidate for the introductory course. At present we offer COBOL as 
a non-core course (except for students in our business track). Whenever the introductory course also 
serves as a service course outside pressures enter the plctur~ As a result of the strong historical position 
enjoyed by FORTRAN, most non-computer science departments are geared to FORTRAN. Text avail- ability, 
instructor knowledge and applied soft- ware packages all give FORTRAN the edge. However this is changing 
slowly and in fact some depart- ments here at SIU have shown strong interest in PL/i for their students. 
 Even though university politics could dictate langauge selection for beginning courses itvs only true 
when beglnnlng core courses for the computer science major doubles as service courses. Splitting these 
courses by function is no trivial decision when staff production is considered. llI. Relating the Criteria 
to our Curriculum In measurlng the potential languages against the criteria imposed by our curriculum 
we have come up with three overall ranklngs - hard failures, soft failures and candidates. The hard 
failures constitute those languages which are definitely not appropriate in supporting both our introductory 
and upper level courses. These hard failures include FORTRAN, LISP, BASIC, COBOL and OWN. Some of the 
languages were considered as viable alternatives but had to be rejected for secondary reasons. These 
constitute the soft failures - APL, SNOBOL, EULER and ALGOL W. Having eliminated these languages we 
were left with PASCAL, ASSEMBLER and PL (the phrase 'PL' refers to all the PL/Z dlalects) as the candi- 
dates available for supporting our curriculum. The primary reason for eliminating FORTRAN is its inability 
to support our upper level courses. FOHTRAN's control structure faults have been  45 remedied somewhat 
by the STRUCTURED FORTRAN compilers. However, we do not view the use of STRUCTURED FORTRAN as a solution 
to this problem. It is merely a postponement of the issue. Pro- duction assignments would be coded in 
FORTRAN G or H, not in STRUCTURED FORTRAN. BASIC was eliminated as a candidate for both the introductory 
and upper level courses. It is too simplistic a language to be of much use at either level. The semantic 
beauty of LISP is something that one must acquire a taste for. In tackling an initial language, beginning 
student can do better than attempting to learn either the semantics or syntax of LISP. As we have indicated, 
COBOL would be an obvious choice if we let outside use of the language play the major role in language 
selection, The low rating of COBOL on the subset property to- gether with its expense has forced rejection 
of this choice. We have not listed a rating for the OWN variety of languages. There are too many OWN's 
with too wide a range of properties to permit any generalized rating. For the most part these languages 
are unsupported and somehwat expensive with respect to execution time. They also come with a guarantee 
that the student will never program in the language after they leave the university. We agree the outside 
political in- fluences should not be the ultimate concern in choosing a language, but we are not of 
the belief that this issue should be entirely ignored. As a result languages of the OWN variety have 
been rejected. Some of the languages considered were not deemed appropriate for somewhat less vehement 
reasons. There were the soft failures - APL, SNOBOL, EULER and ALGOL W. All of these languages could 
be useful at the introductory level and somewhat appropriate throughout the upper level. The lack of 
demand for any of these languages from outside the department would imply that we would be settirg up 
a special introductory course for majors while having to maintain the staffing of service courE~es. We 
are simply not in a position to do this. If our situation should change, in that a special course for 
majors would be feasible, our probable language choice would be PASCAL. PASCAL is viewed as a strong 
candidate for use in our curricula particularly at the introductory level. Our decision with respect 
to PASCAL is to view it as the most likely candidate for adoption in a specialized introductory course 
for majors. It is quite likely that by the time our department can consider this option some of the faults 
of PASCAL, i.e., text availability and availability of fast, supported compilers, may be remedied. By 
the processes of choice and elimination we are left with ASSEMBLER language and PL as our primary candidates. 
The motivation for these selections is detailed below. As noted previously, we feel a strong commitment 
to actively supporting Assembler language in our curricula. In fact we intend to introduce both IBM 
ASSEMBLER and PDP-Ii/40 ASSEMBLER in our core courses, The advantage of knowing two assemblers based 
on two radically different machines is very useful in the comparative analysis phases of our computer 
architecture and computer organization courses. We have chosen PL as our primary high level language 
candidate. We are pleased with this choice since PL does a very good Job in meeting most of our criteria. 
In considering some criteria, i.e., support for programming style techniques and text availability, 
PL is not necessarily the best contender but it does appear to be the stronger contender by more criteria. 
 PL has been attacked on several grounds because of its attempt to be universal in the sense that its 
offers numerous divergent constructs geared to handle diverse application. The resultant overhead in 
speed and compiler size is great and worthy of criticism. However it is precisely this aspect of PL that 
makes it very attractive to a computer science department. In theory we would like to expose our students 
to as many languages as possible. In practice we can't do this but we can get at the heart of the problem, 
i.e., exposing the students to a variety of language constructs, within the confines of PL. PL offers 
a progression of compilers -say PL/C, PL/i - F and the PL Optimizing compiler. The variety of constructs 
together with the levels of compilers makes PL very attractive. 46  IV. Conclusions As of this wrltlngD 
the final selection of lan- guages to support our curriculum has not been made. However as a result of 
our analysis we are actively trying to work PL into a primary position in our curriculum. The result 
of attempting this move is depicted in Figure 1. In Figure i, we have attempted to indicate the effect 
of switching from FORTRAN to PL as the primary high level language. In this figure we have listed only 
those courses which require programming and have identified the effectiveness of using FORTRAN, ASSEMBLER 
and PL in supporting these courses. In two of our courses, namely CS 470 - Simulation and CS 536 - Artificial 
Intelligence we still feel that additional languages should be used in supporting the course content. 
For the majority of our courses we feel that PL instead of FORTRAN~ Figure 1 demon- strates quite effectively 
the fact that switching to PL does give us a better return for our efforts. Underaraduate Courses FORTRAN 
ASSEMBLER PL CS 202 introductory Program- ming (service course) 2 1 1 CS 302 Introductory Assembler 1 
CS 304 Information Structures 2 1 1 CS 306 Fundamentals of Comput- ing Systems 1 CS 342 Discrete Structures 
1 1 CS 361 Numerical Calculus 1 1 CS 401 Computer Organization 1 CS 411 Programming Languages 3 1 CS 
414 Systems Progrannners 3 1 1 CS 430 File Structures 2 1 1 CS 435 Information Systems Analysis 3 1 1 
CS 464 Numerical Analysis 1 1 CS 470 Simulatlon 2 2 2 CS 536 Artificial 2 Intelligence CS 564 Advanced 
Numerical Analysis 1 Legend 1~ appropriate for the course 2: appropriate for part of the course 3: inappropriate 
~: not appllcable  Figure 1: Analysis of the Effect of Language Selection on the Curriculum V. References 
 1. Adams, J.M., W.H. Inman, and J. Shirly,  "PL/I in the Computer Science Curriculum," SIGCSE~ Vol, 
4 t No. 1, 1972,  2. KerniEhan, Brian W., and P.J. Plauger, The Elements of ProErannninE Style, McGraw- 
Hill, 1974.  3. Peck, J.E.L. "Comp4rlson of Languages", in Programming Teaching Techniques, (W.M. Turskl, 
ed.) North Holland Publishing Company, 1973.  Graduate Courses CS 501 Advanced Computer Organization 
CS 514 Advanced Systems Programming CS 516 Compiler Construction CS 531 Text Processing and Information 
Retrieval FORTRAN ASSEMBLER PL 1 3 1 1 2 1 1 2 1 1 47  
			