
 The Documentation and Evaluation of Team-Oriented Database Projects D. V. Pigford Department of Computer 
Science Western Kentucky University Bowling Green, KY 42101 Abstract This paper focuses on documentation 
and evaluation techniques for monitoring and assessing team oriented database projects in a senior level 
database course in computer science. Instead of effecting documentation as the last phase in traditional 
software development the documentation procedures are implemented as nine separate staggered deliverables 
during the project development. These deliverables are revised and organized into a final documentation 
binder. Evaluation techniques are monitored through four distinct phases: Project Plan, Ongoing Documentation, 
Progress ReporL and Project Presentation (Demonstration): Key Words: Database, team project, documentation, 
evaluation, assessment Overview Integrating successful team projects into the standard database curriculum 
in a one semester course requires a high overhead of student/professor time, expertise, and knowledge 
of available implementation tools [Pigford87]. The importance of blending theory and application in computer 
science programs through team projects is well documented [Hartog85] [Potvin84] [Wood83]. Achieving a 
functional knowledge of database along with the added skills of effective written/oral communication 
skills is a highly desirable outcome for undergraduates [Potvin84]. For these reasons efficient and efficacious 
techniques are essential to student progress and achievement in mastering both theoretical and applied 
database concepts. These goals can be (partially) implemented by the parallel design and implementation 
of team projects within the standard database class. A structured methodology of Project Plan Ongoing 
Documentation Progress Report Project Presentation (Demonstration) Permission to copy without fee all 
or part of this material is grantad provided that tha copias are not mada or distributed for direct commercial 
advantage, the ACM copyright notice and the title of the publication and its date appaar, and notica 
ia given that copying is by permission of tha Association for Computing Machinery. To copy otharwisa, 
or to republish, requirea a faa andlor spacific permiaaion. e 1992 ACM 0.89791 -468.6 /92/0002/0028... 
$ 1.50 can be used to implement the team project. Each of these activities can be sequenced in parallel 
with the standard curriculum. Each activity requires a written and/or oral report from the team and a 
subsequent evaluation by the instructor. The implementation phases are sequential except for the documentation. 
Instead of requiriig documentation at the end of the team project [Plgford87], documentation is effected 
through a series of nine separate deliverables throughout the course. The nine documents are given in 
Figure 1. At the end of the semester each team presents their fiial project demonstration. These deliverables 
are revised and organized into a documentation binder and used in the presentation. This staggered technique 
breaks the database project into small steps. The body of this paper details the team philosophy, the 
designhmplementation phases, and the ongoing documentation sequence. Philosophy/Assumptions of the Team 
Project The rationale of a team project for database classes rests in the assumption that learning is 
best achieved by enhancing lectures with practical implementations. Writing a generic SQL example on 
the board is quite dtiferent than implementing an SQL query that answers a particular question from an 
existing database. With the myriad of database terms­attribute, foreign key, normalization, referential 
integrity, etc.­-the need for hands-on experiences with database software tools is even more essential. 
Another rationale for the team philosophy is the reality of team projects in industry, business, and 
scientific applications lJIartog85]. As the complexity of the database environment grows and as the amount 
of data increases, the need for better team performance, efficacy, and management is apparent. It is 
far better for undergraduates to make beginning mistakes in database design and implementation within 
the academic world rather than within the frost years of their professional careers. This learning experience--without 
permanent damage to the student s career--can be effected within the team-oriented database project. 
Another assumption about databases is the difference between the skills required to design a database 
application and the skdl to implement a design within the existing hardware, software, and time constraints 
of a pruticular environment. Designing databases have some common inherent uniform principles--normalization, 
consistency, integrity, etc---but the related techniques of loading, defiiing, and implementing the application 
varies from tool to tool. An appreciation of the time, expertise, and skill required to accomplish practicrd 
implementations is better achieved by utilizing different databasee tools rather than adhering to just 
one. Another basic assumption is the importance of communication skills for the computer science student. 
Industry suggests that these skills include the ability to: communicate effectively to both technical 
and nontechnical groups listen effectively work independently or in teams display the art of tact and 
diplomacy exidbit loyalty to the employer and profession adjust to technological changes The team approach 
to database instruction is a fertile arena to foster the development of these important competencies. 
A fiial assumption for a database curriculum is the importance of sound softwrue design principles and 
usable documentation. Students in computer science need to be exposed to these concepts as soon as possible. 
Completing a course in Software Engineering is meaningless unless these principles arc extended across 
the curriculum. The database class is an excellent opportunity to reinforce these concepts. With these 
basic assumptions as a background philosophy for curriculum development, the next sections will describe 
the planned instructional strategies for developing such a database curriculum. A Four Phase Development 
Scheme for Team Projects This section will describe the details of a four phase development plan for 
team projects. This sequence parallels the development of lecture topics in the database curriculum. 
The four stages are: Project Plan Ongoing Documentation Progress Report Project Presentation The project 
plan is designed to identify the specitlc type of application and to divide tasks among t-members. Part 
of the form is given in Figure 2. The Project Plan lists eighteen tasks which are to be divided between 
a team of four students. All members are required to contribute to the overall plan and to the programming. 
Members check off their responsibilities, sign the documen~ and hand in to the professor. Other information 
included on the project plan include List of names, telephone numbers, and E-mail accounts Name of the 
application Purpose of the application Resources/documentation for hardwarelsoftware Constraints Time 
Line Proposed common meeting time and place Cost time estimates at $30 an hour. Each team is allowed 
to select their own application and tool--with the guidance and approval of the professor. The philosophical 
basis for this practice is the assumption that one cannot design a database for an enterprise one does 
not understand. Each team is guided in the selection of a database tool depending on availability, documentation, 
user end­requirements, and team functionality. VAX/RDB is the database software [Matthes91 ] that all 
students use for three sequential homework assignments (in addition to the project work). Students are 
required to hand in this document about the ftith week of class. Teams also present their project plan 
to the entire class. Recent student project titles and database implementation tools are included in 
Figure 3. The second phase of the database project is the continuous or ongoing documentation. The normal 
documentation usually due at the end of the project is turned in by the team at staggered weekly intervals. 
At the end of the project, these deliverables are revised and organized into a documentation binder. 
Details and sequencing of these documents will be discussed in the next section. The third phase of the 
project development is a team progress report. Students present an oral and written progress report of 
their work to the professor and the class. This fifteen minute oral team presentation includes a review 
of the application, purpose, and design. A demonstration of the database sofhvare developed so far is 
required, and an adjustment of scope, plans, and is allowed, The written form requires the same information 
under the topics Purpose, HardwareJSoftware Specifications, Tasks Completed, Tasks Not Completed, Adjusted 
Timeline and Cost Estimates. The final project development work is presented to both the class and the 
professor in the last two weeks of claw. This thirty minute oral presentation includes a review of the 
application ad an actual demonstration of the database software. The corresponding evaluation form includes 
three bread areas: quality of the oral presentation, quality of the demonstrated software, and achievement 
of the originat database goal. The final documentation binder is used in the oral presentation. All the 
revised deliverables are organized into a three ring binder. The evaluation form (Figure 4) has four 
spectilc categories: the revised deliverables, programming style, organization of the binder, and user 
evaluation. The programming style is evaluated from a hardcopy of the database code found in the appendix 
of the binder. Besides well-structured and modular code, emphasis is placed on clarity of the code organization, 
internal headers, and useful internal comments. The binder itself must be well-organized and easy to 
use for both technical and nontechnicrd users. The code is also evaluated for its ease of use for additions, 
deletions, and updates for the intended database application. The importance of implementing the organization 
s purpose via efficient user friendly methodologies is found in all four phases of the project. The next 
section focuses of the specifics of the staggered deliverables. Ongoing Documentation for the Database 
Project The most novel or unique aspect of this project methodology is the staggered deliverables to 
parrdlel the textbook. Students have to lean the concept and then immediately turn in a written document 
related to the task. Sequencing these tasks with a standard database textbook is not as easy task. From 
Figure 1 the first deliverable is the ESP or the Enterprise System Plan. This documents describes the 
basic components or functions of the specified organization. Each function is in turn described by a 
list of tasks called processes which is then subdivided into actions. The resulting outline structure--Function, 
Process, Action--summarizes the overall operation of the given enterprise. An abbreviated example for 
a hospital [MacFadden91] is given in Figure 5. As simple as the concept appears, beginning database students 
can have trouble accurately reducing an application to this schematic. The second deliverable in the 
project contains the essential report formats and screen designs. The formats for reports or screens 
include information such as titles, subtitles, text positioning, spatial arrangements, and numerical 
columns and totals. Since very little about good report formatting and screen design is found in database 
books, this task required a special lecture with visuals. fnstead of a list of do s and don t s, the 
author presented sample information depicting poor design and then followed with the same information 
arranged in a better design format. This procedure helped to effect better student designs than lecture 
alone. The writing of the User s Guide is the next deliverable. This short two or three page manual explains 
to the user where the system is located, its purpose, scope, logidlogout procedures, and help facilities. 
This is written before a single line of database code is written. Following this exercise, the students 
turn in graphical pictures of the ESP, the Entity-Relationship (E-R) Diagram and a Backman Diagram. Both 
diagrams are required because past experiences in database courses revealed to the author the student 
s ease with E-R diagrams but difficulty with Backman diagrams. These documents prepare the students to 
next compose a written Data Dictionary for their application. The data dictionary used for this project 
is not on-line, but is limited to an alphabetical listing of each attribute with its associated attributes. 
Common elements for a data dictionary item include name, synonym, meaning, abbreviation, source, update 
authority, inclusion in reports, etc. Since the data dictionary concept is the central concept in the 
modern database environment, this deliverable is a critical concept builder. The next deliverable, data 
and schemas, requires the student to use the preselected database tool. The data is loaded in some electronic 
form and the data elements are defiied in the specific data definition language format. The next two 
deliverables, coded report and coded update, require the team to turn in programs that output a report 
followed by a database program that updates a specific attribute. Screen displays validate the output 
and update integrity. The last deliverable is known as the Programmer s Abstract. This document is a 
clear, concise, and comprehensive overview of the design, modularity, and data structures in the programs. 
Consequently, each team abstract is somewhat different because of the different databases and tools. 
This document is crucial in assisting a technical person to have an overview of the important or unusual 
features in a large software project. To facilitate the timely monitoring of these nine team deliverables, 
a mailbox for each team is established. When the deliverable is due, the team member responsible for 
the document places it in the mailbox. The professor then evaluates the reports and returns them to the 
team at the next class meeting. Instead of precise grades, otdy comments, suggestions, or remarks are 
placed on the documents. Final grades, however, are given after the documentation binder is handed in 
at the final project demonstration. This technique allows the students to correct errors within the course, 
one of the basic philosophical assumptions discussed earlier. Conclusions and Summary The use of a four 
phase development cycle with ongoing documentation is an efficacious pedagogical technique for implementing 
the team database project. The team philosophy not only reinforces database theory, but builds valuable 
oral/written communication skills. Designing a Swence of s~ggered deliverables--enterprise system P@ 
screens/reports, user s guide, E-R/Bachman diagrams, report program, update program, and programmer s 
abstract--can parallel the conceptual and skill development in a database curriculum. References and 
Experiences in Teaching Team Project Courses. SIGSCE Bulletin, (15,1), 1983, pp. 62-65. [Bickerstaff85] 
Bickerstaff Jr., D.D., TheEvolutionofa Project Oriented Course in Software Development. SIGSCEBulletin, 
(17,1), 1985, pp. 13-22. [Carver85] Carver, D. L., Comparisono fTechniquesin Project-Based Courses. SIGSCE 
Bulletin (17,1), 1985, pp. 9-12. [DPMA83] Profile of Ideal Graduate in Information Processing. Business/Education 
Forum, Michiana Data Processing Association, South Bend, IN, 1983. [Hartog85] Hartog, C., Of Commerce 
and Academe. Datarnation, September 1, 1985, pp 68-78. [Joe187] Joel, W.J., Realistic Student Projects. 
~ Bulletin, (19,1), 1987, pp. 244-247. [Henr83] Henry, S., A Projected Oriented Course on Software Engineering. 
 SIGSCE Bulletin, (15,1), 1983, pp. 57-61. [Hirm88] Hirmanpour, I., Choosing Group Projects for Advanced 
Systems Courses. SIGCSE Bulletin, (19,1), 1988, pp. 109-113. [Matthes91] Matthew, L., Referential Integrity 
in Rdb/VMS , DBMS, April, 1991, p. v. [McFadden91] McFadden, F. R., and J. A. Hoffer, Data Base Management, 
Menlo Park, California Benjamin/Cummings Publishing Co., 1991. [Pigford87] Pigford, D. V., A Management 
System for Monitoring and Evaluating the Group-Oriented Database Project. SIGCSE Bulletin (18,1), February 
1987, pp. 9-17. Pigford82] Pigford, D. V., Improving Personal Efficiency: Time Management in Today s 
Changing University Computing Environment. published Conference Paper, SIGUS, Chicago, IL, November 11-12, 
1982. [Potvin84] Potvin, J. H., Using Team Reporting Projects to Teach Concepts of Audience and Written, 
Oral, and Interpersonal Communications Skills. DL!3!2 Transactions on Education, (E-27,3), August 1984. 
[Pratt87] Pratt, P., and Adamski, J. J., Database Systems: Mana~ement &#38; Desire, Boston, Massachusetts, 
Boyd &#38; Fraser, 1987. [Wood83] Woodfield, S. N., J. S. Coolofello, Some Insights FIGURES -  ­ 1. 
Enterprise System Plan (ESP) 2. Screen/Report Designs 3. User s Guide 4. Ssstity-Relation Diagrem/Bachman 
Diagram 5. Data Dictionary 6. SchSMeJData 7. Working Report+eretissg Source Cede 8. Working Update 
Source Code 9. Programmr 1s Abstract Or the Cede  Figure 1: Staggered Deliverables for the Database 
Project Project Plan Comon Meeting Tiaa: Uhere: Assignment of Responsibilities: ! 11 ] 12 ~T3 ~T4 ~EST(HR)! 
I ! Define Project Plan lx~x~ x:x!! ;:ESP 1. . . 3. Define E-R Diagrem [!11 . / . I 4. Daflne BachesanDiagram 
!1!1! .  , Daf ine DD/COnstrai nts I 1!! :: Oaf1ne Screens I / 1 I l i l : 7, Define Querle5/updates 
l_l_ _ I 8. Define Report Fomats !!! ! :::t:BSchema/Tabl es  . [!1 l l i1:: !  ! Design DE program 
IX!xlx lx!. ;:: Code IXlxlxl xl! 13. Debug/Test !X!xlx lx!! 14. Docueantation/( Final ) 1.11! ! 15. 
Proof W tten Materiels II!! / . Create Backups I 1 l !  H: Urite Programar s Abstract I / 1 1 18. 
PI m Presentet i ons lx~xjx~ xl! !  . ::: l_!_l_l_ i : Figure 2: Project Plen for the Detabase Project 
TSAM DATABASE APPLICATIONS TOOLS 1. Academic Grading Syetems Turbo Pascal 5.5 Database Tool Kit 2! software 
(InvantorY) system VAxlxoa .. . SQL Pascal 3. ACH Student Databaee HyperCard Macintosh script  4. Tornado 
Statistical Database DataEase ISN/80386  5. SocCer Team Management .?ySteIn VAX/ROB SQL Cobol  Figure 
3: Sample Project Titles and Tools A. Table of Contents Sopts. 1. This page 7. Screens 2. Projact Plan 
8. RapOrts 3. BSP 9. Umer*s Guide 4. overview 10. Programmer e Abstract 5. Ej24 Diagr.sm 11, Data 
Files  s. Programming Style ..........,.....................100ptS. structured Coda :: Internal Documentation 
 c. Documentation Binder ............ ..................25pts.  1. Appearance 2. Title Pag@ 3. Page 
Numbers 4. Well-organized  D. User evaluation ..................................25pts.  1. Ease of 
use 2. Adds, deletee, updatea 3. Integrity 4. Extamaivenes.9 5. Ueefulnees   TOTAL OF 200 pts . 
Figure 4: WValuatiOn of DQOUUWIf.atiQ?I Patient care Administration patient scheduling Patient R*giatratiOn 
Admit patient Assign to bad Trrmefer patient Releaae patient Doctor orders Laboratory report ing Patient 
care services Di@JMW NU2Ving Surgery Rehabilitation Perform physical therapy Slwd banking Figure ~ : 
Partial Snterpriee System Plan for a Hoepital
			