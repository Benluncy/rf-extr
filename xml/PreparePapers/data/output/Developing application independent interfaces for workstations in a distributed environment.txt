
 Developing Application Independent Interfaces for Workstations in a Distributed Environment Michael 
A. Bauer and Henry K. Ting The Department of Computer Science The University of Western Ontario London, 
Ontario, Canada, NSA 5B7 Abstract The development of suitable user interfaces to applications can be 
a difficult task. This task is further complicated when deslgnlng appllcatlons to operate in a distributed 
environment where one could take advantage of powerful workstations. This paper reports on current work 
investigating approaches for specifying and deslgnlng application Interfaces In a distributed environment. 
In the approach belng lnvestlgated, the application's interface Is specified separately from the application 
code itself and can be interpreted by a user interface manager (UIM). Tim UIM can be operational on a 
workstation and the application code executed on a different host. The paper presents an overview of 
the general model, briefly describes one approach for tim definition of interfaces and outlines how the 
UIM and the application communicate.  1. Introduction The use of microcomputers as powerful personal 
workstations is becoming more commonplace In the working environment. Such workstations provide a _ variety 
of capabilities making sophisticated user interfaces possible -interfaces using multiple windows, bit-mapped 
graphics, color, pointing devices, etc. This has made the task of designing and implementing application 
interfaces challenging. This task Is even more complicated if one ls developing applications which are 
to be operational In a distributed environment, especially in an environment where the capabilltles of 
workstations may vary greatly. A common approach is to pick one "typical" workstation (often a terminal 
with limited capablllth~s) and design the application interface around that dcvlce. This approach has 
two significant drawbacks. First, the application interface does not take advantage of the potential 
of workstations to provide superior interfaces. To do this would require that the application designer 
hnplcnmnt several "versions" of the Interface, thus increasing developnmnt and maintenance costs. For 
interfaces requiring graphics, color, etc., this might significantly increase the computational load 
on a single host If the code providing the interface must also rnn on the sante host as the application. 
Second, anti rclate(i to the latter point, the application often runs oil a I)art,lcular host and the 
workstation is used primarily as a sophisticated terminal device. In order t,~) take advantage of the 
power of the workstation, the application designer would have to tlesl~n tim application in such a way 
that part of it could be executed on the workstation. This makes tim task of the application designer 
even more complex. This paper reports on research hlto the devel(>l)nmltt of techniques for the design 
of al)plit'.atlon Interfaces hi a distributed environment. The broad goals of the research can be outlined 
as follows: 1. To examine ways of developing dlstrlbuted applications and, in particular, look at the 
separation of an application Into an interface component and a proeesslng component. Permission to copy 
without fee all or part of this material is granted provided that the copies are not made or distributed 
for direct commercial advautage, the ACM copyright notice and the title of the publication and its date 
appear, and notice is given that copying is by permission of I~te Association for Computing Machinery. 
To copy otherwise, or to republish, requires a fee and/or specific permission. &#38;#169; 1986 ACM 0-89791-211.-4/86/1200-0007 
75Â¢ 7 2. To investigate approaches to interface dcslgn whlch could simplify the task of the application 
designer and permit modifications to an interface independent of application processing code.  3. To 
explore Interfaces which allow a user to select preferences In presentation (e.g. menus vs. commands) 
or which automatically adjust to the experience  level of tlle user. The work reported herein addresses, 
In particular, the problem of how an application can be decomposed into a processing component and an 
interface component. If the application's Interface component must be codcci for each apPllcatlon and 
for each different type of workstatlon, then little Is gained. Instead. the appllcatlon Interface component 
is replaced by a more general Interfacc manager -a User Interface Managemenl System (UIMS). The UIMS 
is driven by a description of the appllcatlon's interface. This is illustrated In Figure 1. The UIMS 
cannot be totally portable from workstation to workstation since It must use primitives local to each 
particular type of workstation. Workstation  UIMS T Descrlptlon of Appllcatlon Interface i T However, 
one aspect of the research Is to Isolate the components which must be device dependent and to minimize 
what must be developed for each workstation. The following section expands on the nature of the UIMS. 
This Is followed by an overview of one approach to the description of application interfaces and how 
the application and UIMS communicate within this model. 2. User Interface Management System The concept 
of a UIMS Is not new. The Seehelm workshop on graphical interfaces proposed a model for the development 
of applications with graphical Interfaces [Pfaff85]. The Seehelm model is similar to the one described 
here, although it Is oriented toward graphical Interfaces and, at least by implication, oriented toward 
appllcations and Interfaces being tightly coupled, I.e., running on the same host. The model has been 
the basis for other research Into the area of graphical interfaces (e.g. Green [Green85]). The primary 
differences between the Seehelm model as originally formulated and the model described here is a) the 
distributed processing orientation and b) the use of a description of the application interface to drive 
the UIMS. Application Host  ) Processing Component  Figure 1: Application and UIMS The UIMS being 
studied can be divided into the following components (see Figure 2): 1. An appllcatlon interface description 
which consists of two components. The first Is the user interface definition (UIDF) -a description of 
the internal states or behavlour of the interface. A second component is the user interface data definition 
(UIDD) -this provides a description of the abstract data structures required by the application and how 
the lnformatlon Is to be presented.  2. User interface manager (UIM) -the  control agent that utilizes 
the definitions stored In UIDF and UIDD. It mediates the communications between users and applications. 
 3. Presentation manager -The module responsible for the actual display of the data, input of data from 
devices and for device management. This module would be workstation dependent.  4. Communications Component 
-The component which handles the basic communications between the UIM and tile application.  Even though 
the three components form the UIMS and interact wlth each other, the user will only see the UIMS Instance 
of the Interface as defined within UIDF :tnd Interpreted by UIM during execution. Users do not need to 
know of the existence of other COml)On('nt~ <,f the system otlmr than the UIM. The following scctlon 
provides a brief overview or tile descriptive components: the U1DF and the UIDD. 3. Describing Interfaces 
The Interface definition is based oll transltl(m diagrams to describe its behaviour. A ]ntcrfacc designer 
can 'program' the Interface by 'drawing' transition diagrams. 3.1. Transition Diagram Representations 
A major objective of the UIMS design Is to provide a method that Is conceptually simple, yet explicit 
in Its description of control of the lntcrfac(~. Transition diagrams provide this flexibility and have 
been used by others [Jacob83, Chung78, Wm~scrmat179, Wasserman85]. Our design method follows that of 
Wasserman which defines a interface as a collection of transition diagrams Indicating the control and 
data flow of the Interface. Transition dlagrams, however, do not convey Information such as the semantic 
constraints on a Input token, the transformations to be performed on a datum, etc., within each state. 
It, Is, therefore, necessary to augment the diagrams with Appl. Interface Descrlptlon UIDD UIDF ~=~===~ 
Interface deslgner C R UIM 0 USER > E M < application S M Figure 2: Model of UIMS additional descriptions. 
This Is done by appending a The transition conditions may depend on data local to the UIM, the Internal 
state of dcscrlptlon of tile actions to be executed within each application, the current UIM state, or 
the state to the diagram. user Input. Each transition may specify a single state which the UIM may transfer 
A transition dlagram consists of states and transltlons to; for multiple transitions whose from one state 
to others. The designer describes a conditions are satisfied, the first appearing diagram (see 3.2) In 
terms of the states wlthln the In the definition will be the one selected. diagram; transitions are specified 
within each state. 3.2. A Simple Example A state in a diagram corresponds to a state of the The following 
example will help to Illustr~te how U[M, which in turn, corresponds to a state of the transition diagrams 
are used. The following presents interface. The description of a state Includes: a simple interface specification 
for creating new data 1. Its name. for a database of employee records. Each employee record consists 
of the employee's name, social 2. Inputs or data Items required by the state. Insurance number (SIN), 
age, sex, and home address. All Inputs must be defined upon entry to The Interface utilizes a form for 
data input and the state. It Is not necessary for every state to have Inputs, but all Inputs must display. 
be listed. In Figures 3 and 4, states are represented by boxes 3. Actlons of the state. These would 
Include containing their names and transitions between states testing and setting conditions, validating 
are indicated by arrows. Inputs to a state are user input, transformation of data, enclosed In angle 
brackets (<,>). ']'he keywords transition to another state, or invocation Start and End signify tile 
starting and ending states of another diagram. of a diagram. The diagrams only Illustrate the basic 4. 
The transitions from that state. These structure of the transition diagrams; the actual would include 
the condltlons necessary for specification of each Is presented In Figure 5. each transition from that 
state to another. Add record; stars   Â° reo i ; I pro r.o ] ,rec_def>  f a0OreoO I 'Â°ewreÂ°rO 111ro0 
I end -~  Figure 3: Create new employee record F111rec:  <recdef>  <number>'~~ etafld 1 stars  
getfldnum I <newrecrd> end ( <fldstr> <newrecrd> <ftype>  <value> I storeval.l Figure 4: Getting field 
values for a record i 10 DIAGRAM Add_record;  VAR PERSONAL_DATA: rec_def, newrecrd; START Getrec- A: 
GET_U_RDEF(rec_def); GOTO Prntrec; Prntrec-I: rec def; A: DISPLAY_U(ree def); GOTO Flllrec; Flllrec~ 
I: rec_def, newrecrd; A: GOTO Addrecd; Addrecd-I: newrecrd; A: Insert_Employee(newrecrd); GOTO End; 
END.  DIAGRAM Flllrec(rec_def) RETURNS (newrecrd); VAR INTEGER: number; STRING: value, fldstr, ftype; 
PERSONAL_DATA: recdef, newrecrd; START Getfldnum-I: rec def;  A: GET U FNUM(rec def,number); CREXT:Urec(re~_def.newreerd); 
GOT0 Ge~afld; Getafld-I: number, newrecrd; A: IF number <> O THEN GET U_FLD(fldstr.value); GET U_FTYPE(rec 
def,fldstr,ftype); number := numbe~ -I; GOTO Storeval; ELSE GOTO End; FI Storeval-I: flds~r, ftype, 
value; A: INSRTU_FLD(newrecrd.fldstr.ftype.value); GOTO End; END.  Figure 5: Specification of Transition 
Diagrams Figure 3 illustrates the sequence of events that take diagram. When Fillrec terminates, a new 
instance of place when Inserting a new employee record Into the Personal Data is created and can be inserted 
Into database. Once the user indicates that a new record the database through actions of state Addrecd. 
is to be inserted (say via another diagram), the UIM Figure 4 shows the events that must occur in ()r(!cr 
t,o retrieves the definition of the diagram Add record add the values of the fields to an employee record. 
from the UIDF and begins interpreting it. The first Details on how tile UIM processes ch:tracl,crs, state 
encountered by the UIM is a request to locate determines which field the user Is currently workin~ the 
employee record definition from the UIDD. on, etc., will be left for discussion at :tn()t,h~r t,im(,. 
Assume that its type is Personal Data. Once the Figure 5 provides a complete description of eaci~ definition 
has been retrieved, the UIM moves to state diagram In the language that the designer uses to Prntrec 
which presents a form to the user. The UIM specify interfaces. then moves to state Fillrec for completion 
of the form. This corresponds to the invocation of another 11 The hlentlfier after kcyword DIAGRAM uniquely 
Identifies a diagram In the UII)F. E:tch diagram can have Its own local variables. These are declared 
In the variable section after keyword VAR. The variables within a dhtgram are local only to that diagram. 
Whenever UIM encounters the keyword GOTO, it transfcr control to tile state whose name follows imnmdiatcly 
after tile keyword. The symbol '~' after ~1 st:ill! iilllne hldJ('at(,s (hal, t, hc sl,:ttc corresl)onds 
t,o shot, her dhlgram. The UIA4 first retrieves I,he definition of the diagram, then determines the import 
data items and then transfers control to the "called" diagram, In tills case Fillrec. After diagram Fillrec 
is done, control is pmused back to the first action statement of state l'~llrec In diagram Add record. 
In this eÃamplc, the input of each ficld Is specified with the diagram Fillrec. The interface designer 
might choose to do thls is order to verify values via the application (e.g. file look-up for valid names). 
Should the designer not wish to specify the Interface in this detail, dcfault mechanisms arc provided 
within the UIM for input of data and simple data type (:hacking. To Interface with the UIM and the application, 
the designer uses service functions. Service functions are classified into 2 broad categories: (a) those 
that are serviced by the UIM directly, and (b) those that are provided by the application. The functions 
provided by the UIM are predefined as part of the UI~I. These functions provide access to the information 
within the UIDD, display primitives, Input prlmltlves, communications with the application, etc. These 
would operate locally on the workstation. The second set of functions are those provided by the applh~atlon. 
The designer specifics these as function calls within the transition diagram. The name of the function 
rcprcscnts a service that the application wlll carry out and the arguments to the functions correspond 
to the data values sent and/or to be returned. The UIM converts such application function calls to messages 
(see 4.). In thts example the function Insert Employee In state Addrecd Is an al)l)lh',ath)n service. 
 3.3. User Interface Data Definition In the preceding example, rec def was defined to be of type Personal 
data. The specification of the type Personal Data is defined In the User Interface Data Definition portion 
of the UIMS. The specification of a type serves two functions: to define the actual data values that 
should be input or displayed and, second, to provide information on how the data values should be presented. 
Tile following section provides a brief overview of how this is done In the current system. Assume, first, 
that the appllcation Is to be written in PASCAL, and that an employee record Is defined within the appllcatlon 
program as follows: Employee_Data = RECORD Name : PACKED ARRAY [I..32] OF CHAR;  Age, Sin : INTEGER; 
 Sex : CHAR; Address : PACKED ARRAY [1..100] OF CHAR;  END ; The interface designer specifies the definition 
of Personal data In the UIDD as a Frame. When a request to add a new employee record is processed by 
the UIM, It retrieves the UIDD definition of an employee record identified as Personal Data. The UIM 
examines Personal Data and uses the information contained within It to display a form, and waits for 
the user to fill In the values. From the application point of view, it does not really care how the UIMS 
wlll perform the actual input/output as long as the essential data are available. As for the UIM, while 
It Is executing the interface definition, It must at least be able to perform error checking on simple 
data values and be able to display the data In a reasonable fashion. Therefore, It must know what a Personal 
Data is composed of, what constitutes a name, an address, etc.. During execution, UIM uses these definitions 
as a means to provide mapplngs between the data requested by application and the structure used to store 
Information retrieved from user. Each frame Is ldentlfied by an unique name and is made up a number of 
non-overlapping sub-structures call boxes. One can define a frame with particular 12 video attributes 
such as reverse video, bllnk, etc., and other physical attributes such as access control list, -size 
of frame, etc.. " ..... Boxes are structures within a frame in which Information Is gathered or displayed, 
I.e. Input/output is done via boxes of a frame. The type of a box specifies the type of data that may 
be entered or displayed; It may be defined as a particular frame. Boxes are numbered and Inherit the 
properties of the frame as default properties. However, one can choose to override such attributes (within 
allowable limits) by defining attributes for specific boxes. When order of information gathering or display 
is critical (e.g. in a command language Interface), the box number will determine the order of execution. 
Frames and boxes are also being used to explore how the user may alter the structure of his/her interface. 
Once the frames have been defined, the Interface designer will use the frame definitions In the UII)D 
as If they are the actual data definitions. Figure 6 presents part of a frame definition for Personal 
Data. In this example, Personal Data Is defined to be a frame of 24 rows by 80 columns and is of type 
IO, which allows Input/output to be performed through Its boxes. The top left corner of the first box 
is located at, row 1, column I of the frsme. It reserves 47 character position for displaying the prompt 
 FRAME Personal Data; SIZE= 24~80; TYPE= IO:  BOX(1): POSN= [1.1]; SIZ = 1.47; TYPE= STRING; BGRD= 
"Employee FGRD= Name;  BOX(2): POSN= [3.1]; SIZ = 1"7; TYPE= INTEGER; BGRD= "Age: "; FGRD= Age ; ENDFRAME. 
 Figure 6: Part of the (background -BGRD) and user Input (foreground -FGRD). User Input Is expected 
to be a charact(,r string and will be stored in the field Name. For a more complete discussion on the 
relationships or mappings between data frames and data display, please refer to [Ting 86]. It is suffice 
to say here i~hat a frame Is almost Identical to a form in structure. 4. UIM-application Communication 
As noted, communication between tile UIM and tile application Is done Indirectly through function calls. 
This ls made possible by using a message passing mechanism for communications between the UIM and application. 
Whenever UIM-appllcatlon communication Is necessary, the U1M collects relevant data from Its global context 
to compose a message and sends It to the application. The application recovers the data from the message 
received and proceeds to service the request. The syntax and semantics of the messages defined for this 
specific purpose arc outlined below: The header Is used to send control information such as who Is the 
sender, the receiver, and an Identifier to Identify the message to the recelver. It can also he used 
to send acknowledgements Instead of sending a different acknowledgement message. A tad Is an end-flag 
appended after each segment of the message. Name: ";  Personal Data Frame 13   I 0a0er I hod, Header 
of Message: Body of Message:  Figure 7: Syntax of A Message A Block  attribute N I Blk_type [ Blk_name 
I attribute 1 I :::I tag I An Attribute  Atr_type I Atr_name Atr_value ] tag I Figure 8: A Block of 
a Message the receiver. Consequently, each block has to be Tile body of the message includes data about 
the identified by its name, its type, followed by the type of message (e.g. Request for service, Data 
only), attribute list of the parameter. A control tag Is number of blocks In tile message body, and the 
actual appended at the end of attribute list to Indicate end message blocks. of a block. Messages are 
composed by service routines. Each parameter of a routine Is given a block in a message. The message 
sent by the UIM with the data for a new The message block (see Figure 8) contains all the employee record 
would look something llke: information necessary to reconstruct the parameter by R S N TYPE M BTYPE BLOCK 
NAME ATR I : I Personal_Data I Name I Joe I R - recelver A - appllcatlon N - message identifier S -sender 
UI - UIMS M - number of blocks t - tag in message TYPE - message type ATR 1 - first attrlbute BTYPE- 
block type  Figure 9: Sample Message 14 In this framework, the application is essentially passive, 
i.e., It Is driven by messages from the UIM. This may not be appropriate for all applications and a more 
"cooperatlve" approach may be needed. However, the UIi-drlven approach seems to apply to a wlde variety 
of applications and Its pros and cons are just beginning to be explored. 5. Conclusion In this approach, 
the Interface designer specifies the behavlour of a Interface using transition diagrams. The diagrams 
are then 'compiled' and generate action tables which the UIMS uses to drive the Interface. The approach 
separates the UIMS Into different components that,can be designed and maintained Independently. In addition, 
the structure of the UIAiS and the application Is conducive to a distributed environment with microprocessors. 
The two male processing components, the Interface manager (UIM) and the application, are viewed as separate 
processes that communicate via messages. The Interface definition components (the UIDF and the UIDD) 
can reside at locations apart from either the code for the UIM or the application. For example, the UIM 
may run on a particular workstation and the UIDF and UIDD can be downloaded from a host onto the workstation. 
The application might run on another host within the network. The current system has been Implemented 
on a slngle host -the UIM and applications running as separate processes communicating via the messages 
described. This was done as a first step to simplify the process of debugging and testing the UIM and 
the communications. It Is currently being extended to operate In a workstation-host environment; the 
workstation currently being used Is an IBM-PC. Tim definition of transltlon diagrams do not, Include 
details for error handling, error recovery and for providing help. Some errors could be handled by the 
UIM while others are clearly appllcatlon specific and should be handled by the application. How errors 
should be dealt with In terms of states, transitions, escapes, etc., Is an area of current Investigation. 
Help processing couhl he handled wll, hhl I,he I,r:u(sitlon diagrams. However, an alternatlve al)proa('h 
would Involve a separate Intelligent hell) f:t(.llll,y =lva,ll:d)l(! to the UIM. A request I)y the nser 
for hell) w()lll(l (.:l, tls(, the UIM to communicate wlth the Imlp I'aclllt, y. Sii(.h an "application" 
could reside on a different host and be available to a wlde variety of users and applications. This Is 
also being currently pursued [Azarshah186]. References [Azarshah186] -Glta Azarshahl, "Te('hniqu(~s for 
the Development of Intelligent tlelp System", M.Sc. Thesis. (expected 1986) The University or W(,sl,crn 
Ontario, London, Canada. [Chung78] -P. Chung, B. Galman, "Use of State Diagrams to Engineer Communication 
Software", Proc.. of 3rd International Conference on Software Engineering, Atlanta 1978, pp.215-22 !. 
[Green85] -Mark Green, "Report on 1)ialogue Specification Tools", Proceedings of the  Workshop on User 
Interface Management Systems, Seehelm, France, 1985, pp 9-20. [Jacob83] -Robert Jacob, "Using Formal 
Specifications In the Design of a tluman-Computer Interfacen, CACM, April 83, pp 259-264. [Pfaff85] -G. 
Pfaff (ed.), "User Interface Management System", Proe. of the Workshop on User Interface Management System, 
Seeheim, France, 1983. Sprlnger-Verlag. [Tlng86] -Henry K. Ting, "Design of User Interface Management 
System", M.Sc. Thcsls (expected 1986), The University of Western Ontario, I,ondon, Cans(In. [Wasserman79] 
-S. Stlnson, A. I. Wasscrman, "A Specification Method for Interactive Information Systems", Proc. 1979 
conference on Specification of Reliable Software, IEEE Computer Society, pp 68-79. [Wasserman85] -Anthony 
I. Wasserman, "Extending State Transition Diagrams for the Speclflcatlon of Human-Computer Interaction", 
IEEE Transaction on Software Engineering, Vol. SE-i 1, No. 8, Aug. 1985, pp. 699-713. 15  
			