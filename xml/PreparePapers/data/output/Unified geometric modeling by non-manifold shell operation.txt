
 Unified Geometric Modeling by Non-Manifold Shell Operation Masatake Higashi*, Hideki Yatomi**, Yoshihiro 
Mizutani** and Shin-ichi Murabata*** *. Toyota Technological Institute, 2-12-1, Hisakata, Tempaku-ku, 
Nagoya 468, Japart **. Nihon Unisys Ltd., 1-1-1, Toyosu, Koutou-ku, Tokyo 135, Japan ***. Toyota Motor 
Corp., 1, Toyota-cho, Toyota Abstract We propose a method for unified geometric modeling by non-manifold 
shell operations. The method enables a designer to generate a solid shape freely combining shells which 
are composed of surface (lamina) shapes and solid shapes, Our march emphasis is on the process for modeling 
a non-manifold model as well as its representation. Considering that a new shape is constructed by combining 
two shells so as to interchange their surface connections and separate the combined non-manifold shell, 
we establish a unified algorithm to process a regularized set operation of solids and construction of 
a solid from a surface shell and a solid or from several surface shells. A designer can thus obtain a 
desired solid shape easily by combining shells whose shapes are determined locally according to design 
requirements, Ilw non-manifold shell which appears as an intermediate shape in the design process or 
in the calculation is repr­esentedby a cycle structure and entirely manipulated by Euler operators.The 
cycle structureis a data structureextended fromahalf-edge structuretorepresentanon-manifold shape and 
cycles around a vertex and an edge as well as a face. Non-manifold Euler operatorsinclude vertex connection 
and two types of edge connection in addition to the manifold Euler operators. We treat a surface shape 
as a non-manifold shape which is &#38;genemted from a solid shape and is an open shell with two surfaces. 
This makes it possible to treat outer and inner surfaces equally, while only outer surfaces which make 
closed shells have meaning for a solid shape. We show the effectiveness of the method by presenting some 
examples produced by a prototype system which realizes the shell operation by geomerncal and topological 
routines. Permission to copy without fee all or part of this material is granted provided tha[ the copies 
are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of 
the publication and its date appear, and notice is given that copying is by ~rmission of the Association 
for Computing Machinery. To copy o[herwise, or to republish. requmes a fee and/or specific permission. 
471, Japan Keywords: geometric modeling, non-martifold geometry, shell operation, EulerlPoincare formula, 
regularized set operation, halkdge structure,cycle structure 1. Introduction Nowadays, CAD/CAM systems 
enjoy wide spread use in industry [6]. The key for integrating the systems from the beginning of the 
design to the manufacture is a geometric model in the computer. In paticukar, a solid model which represents 
a three-dimensional solid shape in the computer is necessary for applications involving threedimensional 
topology, such as FEM analysis of solid elements and NC machining of products. But for various reasons 
designers may not use a solid modeling system to design a &#38;sired shape: -The human interface to generate 
a solid such as Boolean set operation of primitives ad local operation of solids is not matchedto designers 
feeling d thinking prmess. -The designers are not allowed to create imperfect or ambiguous shapes which 
appear in the designing process and are determined part by part accordiig to the design requirements. 
-Expressing and performing engineering changes or simple corrections of design error cannot be easily 
done by designers. -CAD/CAM systems are unstable and calculation stops during operations sometimes because 
of numerical errors. These problems arise from insufficient flexibility of the geometric modeling framework. 
To enhance modelling capabilities, many approaches, such as parametric or variational design, form feature 
manipulation, geomernc reasoning, and non-manifold geometric modeling, have been studied and implemented 
in practical systems. One of the basic technologies here is coexistence of different dimensional entities 
in the data structure, namely a vertex, an edge, a face ad a region. A non-manifold geomernc model is 
expected to deal with this. Weiler proposed a non-manifold data structure [11], called a radial edge 
structure, and its manipulation operators [12]. Gursoz et al. [1] extended this to a vertex-based representation 
which presents new entities such as zones and disks around a vertex. Other non-manifold modeling technologies 
are also proposed [5][ 13][14]. Such studies focus on representation and lower level operators of the 
non-manifold model. On the other hand, Rossignac and OConnor [7] proposed Selective Geometric Complexes 
 (1) closed shell (2) open shell(SGC) which are composed of finite collections of mutually disjointed 
cells and provide a framework for representing objects of mixed dimensionality. And Rossignac and ;. 
,;.;:. .. .. : ,.. (3) complex shell  !. +3Q . . . .,; ;,. ,. , Requicha [8] proposed Constructive 
Non-Regularized . ............ ..  Geometry (CNRG) for dealing with mixed-dimensional @ objects as extended 
Constructive Solid Geometry (CSG). A geometric and topological algorithm for the intersection between 
objects with different dimensionality was proposed by Gursoz et al. [2]. Compared to the above approaches, 
we focus on generation of a solid as our research objective, seeking to enable designers to generate 
an imperfect shape as an intermediate one, to freely combine shells composed of surfaces and solids, 
and to extract a solid from the non-manifold shell without manual trimming and deleting operations. We 
present a geomeuic modeling framework to manipulate solids and surfaces in a unified way and generate 
a solid through a simple algorithm. The framework is constructed according to the following strategies: 
(1) We treat only shells (two-non-manifold) and generate all the shapes which designers require. (2) 
We distinguisha surface from a solid. A solid has only outer faces, while a surface has two faces, outer 
ad inner, which should be treated equally and be useful in shell separation by peeling off them. (3) 
We present a unified simple algorithm for the shape generation which combines shells so as to interchange 
their surface connections and separate the comected non-manifold shell without changing the connectivity. 
  Our framework for shell operation is a natural extension of the conventional two-manifold solid modeling. 
So the algorithm of the shell operation is common for the set operation of solids including the regularized 
operation and the solid generation from the non-manifold shell which is a combination of surfaces and/or 
solids. It uses only two-dimensional shells and represents three-dimensional regions as subdivisions 
of a three-dimensional Euclidkm space E3 by the boundaries that are shells. There are two parts: geometrical 
calculation and topological manipulation, whose roles are clarified and can be implemented independently. 
These make the algorithm simple. Further­more, since the intermediate process of the operation is stored 
in the data structure, the algorithm becomes rigorous by restarting the process when the system stops. 
To represent and manipulate the non-manifold shell, we also propose a data structure, named a cycle structure, 
and its Euler operators. The cycle structure is an extension of the half edge structure by Miintyla [4] 
and manages cycles around a vertex and an edge as well as a surface. The Euler operators corresponding 
to the extended Euler-Poincare formula include edge connection id vertex connection of Fig. 1 Classification 
of shells the shells. This paper covers shell operation in Section 2, data structureand Euler operation 
set in Section 3, generation of solids by set operation ad closed shell extraction in Section 4, ad a 
summary is given in Section 5. 2. Shell operation In this section, we first define a shell and terminology 
used in this paper. And next we present the concept of the shell operation which generates solids. Then 
w describe a general algorithm of the shell operation. 2.1 Shell and shell operation A shell is defined 
as a collection of faces which are oriented by their boundaries and connected at the edges. A shell must 
satisfy the following two criteria. . The orientations of adjacent faces must be the same. . A shell 
does not intersect at other than edges. We ck+ssi~ the shell into three types: a closed shell, an open 
shell &#38; a complex shell.  A closed shell has no boundaries and is homomorphic to a sphere. It has 
only outer faces to divide E3 into an outer region and an inner region which corresponds to a given volume. 
The outer region is represented by the directions of the normal vectors of the faces, and cycles going 
around boundaries, which are called surjizce loops, are directd for the surface normals. Typical examples 
of this type of shell are the primitive solids shown in Fig. 1 (1). An open shell has boundaries, which 
we call botmdq edges, and is homomorphic to a disc. We also call the open shell a surjace shell or merely 
a surjie. The open shell has faces, which can be termed outer faces, on both sides of the shell. Since 
it cannot divide E3 into regions, there is one tree-dimensionsl open space surrounding it. So we consider 
that the surface shell is a non-manifold shape, whose shape is a lamina and whose two faces are degenerated 
[9]. An example is given in Fig. 1 (2). A compfex shelf is a combination formed by making the above types 
of shells intersect. This type of shell has more than two faces at the intersecting edges. Examples of 
this type are shown in (1)orgmal shells (2)modifed shells (3)connected shell (4)generated shells (a)Shell 
operations  e.... surfaceloop e with adimetion sign (1) sohd-solld . )% &#38; !2mJ (2) surface surface 
(3)solid surface (b) Patterns of shell connection &#38; Fig. 2 Shell operation and patterns of shell 
connection Fig. 1 (3). The shell can be classified from another point of view into manifold and non-manifold 
types. A manifold shell is defined in [4]: a two-manifold shell is a logical space where every point 
has a neighborhood topologically equivalent to an open disc of E*. By definition, only a closed shell 
is a manifold shell, because a surface shell has boundaries and a complex shell has branches at the intersection 
edges. We manipulate these types of shells by shell operation so as to connect and separate shells. An 
intermediate shape in the calculation for generating solids is represented as a complex shell. On connecting 
shells, the shell operation interchanges the connecting surfaces of the shells and separates the connected 
shell without changing the connectivity (see Fig. 2 (a)). These shell operations generate different shells 
from the original ones. For example, in the set operation of solids, the union and intersection of the 
given solids am generated ad when a solid intersects with a surface and has a loop intersection curve, 
two solids and a surface with a hole ate generated. The connectivity of shells is represented by a link 
of faces of the shell along the common edges. Since faces are oriented by the surface loops, the directions 
of the two adjacent loops to lx linked should be opposite. When two shells intersect with each other, 
the face linkage is changed to achieve this. This re-link assures compliance with the first criterion 
of the shell: the same orientation of the adjacent faces. Signs of two surface loops along the edge are 
noted + and - according to their directions. If a direction of a surface loop is the same as the geometrical 
direction of the edge, its sign is plus; otherwise it is minus. We classify the shell connection at the 
edges, using the above notations, into three types according to the types of shells to be combined as 
shown in Fig. 2 (b): a solid with a solid, a surface with a surface, or a solid with a surface. In the 
figure, arrows indicate the connectivity before and after connation. When a solid and a solid intersect, 
there is one degnx of freedom to interchange + and - surface loops because the number of faces for each 
shell at the intersecting edge is two. Interchanging the link for the loops with different signs means 
compliance with the criterion of the shell connectivity. But when a surface and a surface intersect, 
the number of faces is four for each shell. The selection of the link is determined using the direction 
of the surface normal there to divide the E3 into appropriate regions. Looking at one side of surface 
A, there is one surface branch of the other surface B. So we can link the + surface loop of this side 
of A and - surface loop of the branch of surface B. Lastly, when a surface and a solid intersect, the 
link may be selected freely, depending on which part of the shape the designers want inside or outside 
of the solid. This selection should be established beforehand by the designers. Next we separate the 
combined shell if possible. At the time, the combined shell is separated without changing the shell connectivity 
along its edge. By combining and separating the shells, we obtain shapes different from the original 
ones. In case of that the shells are both solids, this operation generates union and intersection shapes 
of the solids. And for the closed shell extraction from the non-manifold complex shell, we obtain positive 
or negative solids by the separation. 2.2 General algorithm of shell operation In this section, we present 
a general algorithm of the shell operation and focus on the roles of geometrical and topological processing. 
The data structure and lower level Euler operators which execute topological shell operations in the 
data structure ate &#38;scribed in the next section. Fig. 3 shows a general flow chart of the connection 
of two shells A and B. The calculation is repeated between all the surfaces of shell A and all the surfaces 
of shell B. First, the intersection curves of two surfaces are ea.lculated by the geometrical tracing 
method [3]. And the inner parts of the for all surfaces  b-t-h.usz I geometrical intersection calculation 
and vatid intemat determination I edges and vertices generation for both shells I connection of the non-manifold 
vertices and edges Fig. 3 General flow chmt of shell connection Table 1-1 Generation of topological 
entities Nex~ the corresponding vertices and edges are connected according to end-points pattern of the 
intersection by the non-manifold Euler operators, to satisfy the shell start Vertex Edge Faca I connectivity 
according to the shell connection pattern. After all the intersection calculations and connections are 
 Venex ~1:~1 (a)E,V:V=;,7*) (mav) (@2v#E,F (8)VSE,F (a)2WEEdge (b)(asmv,mav) F_:,::r, qxj::) (a~2V,+2-1 
(a)2V,2E v) (a)E,V Face (mav) (aamv,mav) Jid! ? {lr%drlr,maf) 4 (a) (b) ,,,,,; ,x,,,, (c) . . ..>. ... 
. . ,:.:j:jy +**.,.$y###$*, ;.:::,y,jy:,. .:;;;;.$;l+.+ . +.:~... $!//fY  + w<fi<fitt,j~jjj<, , @F: 
:$.:.:,, .. .....*.. @$, E ..,Y4..,, ..,<*A,, ,<:fi;~&#38;.y.y *#&#38;@@ .:.:.,,.,,,,... ..... ... .. 
 ,,,+.!..V+ ....+.,...,,,,.,.. . ... ..<. <fi... .,.,.,.>j;;~>:,,. m D Table 1-2 Generation of topological 
entities (in case of edge coincidence) intersection curves for the both surface loops are determined 
and mgan3?das edges. These are performed by geomernc routines. If all the intersections are detected 
without omission by the geometric routines, the second criterion for the shell is satisfied. Next, the 
end points of the curves, which are calculated as intersection points among three surfaces and to be 
vertices, are classified acccnding to a pattern of their locations in each surface. The pattern consists 
of a point coincident with the original vertex, a point on the edge and an independent point on the face. 
Also, an edge where two surfaces intersect is classified by whether it corresponds with the original 
edge or not. According to the geometrical pattern check of the start and end points and the edge coincidence, 
topological modification of the data structure is determined as shown in Table 1: it is determined whether 
a new vertex (V), a new edge (f?) and a new face (n should be generated or not. In Table 1-1, the pattern 
of the intersection curve is divided into three types according to face cycles: (a) within the same face 
cycle, (b) between different &#38; cycles (e.g., between an outer boundary and an inner boundq of an 
island), and (c) an intersection curve forming a loop by itself. Appropriate topological modifications 
for each shell are performed by Euler operators shown in parentheses in the table, Table 1-2 shows the 
case in which the intersection curve corresponds with the existing edge. normally completed, the intersection 
curves make loops or reach the tmmdary edges of the open shell. This can be checked automatically by 
a topological routine. Lastly, the combined complex shell is separwd by the non-manifold Euler operators 
which separate edges and vertices without changing the shell connectivity. Since all the topological 
shell operations are done using Euler operators, generated shells satisfy the shell topological criterion. 
 3. Data structure and Euler operation set In this section, we presenta datastructurewhich represents 
the shells describedin Section 2 andan Euler operation set which manipulates the topology of the datastructure.Befcne 
this, we discuss the mathematical foundation of the non-manifold and introchm an extended Euler-Poincan$ 
formula. To represent the comectivity, we apply the circularity and the connectedne.rsof the bounalzryconcept 
from mathematics to the data structure and the Euler operation set. Circuhzrity means that one gces along 
a path and eventually reaches the starting point again. Connectedness is dekd as that a certain path 
exists between any two arbitrarypoints on the object. A path which has circularity is called a cycle. 
A cycle which breaks the connectedness of an object and separates it into two objects is called a boundary 
cycle or simply a boundary. We can localize the above discussion, concentratingon a certain element and 
its vicinity. Its local cycles are paths which circle around the element and are included in its arbitrary 
neighborhoods. Its local bounaku-yis defined as a local cycle which breaks the connecfedness between 
the element and the object supporting it and separates it ffom the object. A local boundary corresponds 
to the central element in a one-to-one relationship. We distinguish the localized concepts from the previous 
global ones by adopting the term local in this paper. Conventional surfaceloops which representorientations 
of faces are regarckdas local cycles of the face, since they repeatan edgeanda vertexalternatelyarounda 
certainface, as shown by (1) in Fig. 4. The whole of loops at the face is a local boundary, since it 
separatesthe face from the model by cutting the face along the loops. Considering the duality of a vertex 
and a face, the same discussion applies to a vertex. We take an example of a vertex where two vertices 
are connected into one in non-manifold models, as shown by (2) in Fig. 4. There are local cycles which 
are dual in relation to face cycles and which repeat an edge and a face alternatelyaroundthe vertex. 
The whole of the cycles is a local boundarywith duality which retains the connemdness between the vertex 
and the model. The same applies to edges, as shown by (3) in Fig. 4. Edge cycles repeata tltm manifold 
stete Vb-Eb+Fb=2(S-H) w /../ .7 \ ,< ,/0 .1 / @)~ 747 /0. ... / ~hnn~:iate delete an edge .1+2=+1 * ./--+ 
4 &#38; 0.,./ ; &#38; g~ J ,/ d> .-./ vertexface non-menifold state (Vb-Vr)-(Eb-Er)+( Fb-Fr).2(S-H) Vr,Er,Fr: 
degeneracy numbers Fig. 4 Transition into non-manifold and vertex two times around an edge, and the whole 
of those is a local boundary of the edge. All of these cycles must satisfy the topological shell criterion. 
 3.1 Extended Euler-Poincar4 formula We introduceanextendedEuler-Poincar4formula to satisfy the shell 
topological criterion in the shell connection and separation, by treating the non-manifolds as an extra­polation 
of the manifold theory in mathematics. We suppose that a non-manifold state such as a vertex connection 
or an edge connection is an extreme state of the transition from a certain manifold state due to degeneration 
of some elements as shown in Fig. 4. The figure indicates a certain element ad its neighborhood in a 
model. In the case of (1) a surface loop for a face, one edge disappemsthrough the transition from the 
upper manifold to the lower non-manifold. We treat the lower state with surface loops as the non-manifold, 
although it is treatedas the manifold in the conventional solid modeling by subtracting a number of loops 
from the original Euler-Poincar6 formula in mathematics: Vb-Eb+Fb-L=2(S H), (1) where Vb, Eb, Fb, L, 
S andH are numbers of vertices, edges, faces, loops, shells ad holes. Instead we consider that the non-manifold 
state should have a hypothetic edge to be a manifold state. When two vertices are connected as in case 
(2), an edge &#38;generates into a vertex, and there exists a hypothetic edge in the non-manifold state. 
For an edge connection as in case (3), one edge and one hole disappear. We should count a hypothetic 
edge and hole in the non-manifold state. We obtain the Euler formula of the non-manifold from that of 
the manifold ~g the hypothetic edges ad holes: Vb -(Eb +Vr +Er +Fr) +Fb =2(S -(H +Er)), (2) where Vr, 
.&#38; and Fr are numbers of the hypothetic edges dded to each of the dimensional entities. A transition 
from a manifold to a non-manifold state in Fig. 4 dcls 1, 1 or +1 to eq. (1), respectively. Arranging 
terms of the equation (2) for ezwhof the entities, we obtain (Vb -Vr) -(Eb -Er) +(Fb -Fr) =2(S -H). (3) 
whmVr, Er ad Fr are numbers of degeneracies, that are hypothetic edges, for each of the entities. As 
a result, the hypothetic edge corresponds in a one-to-one relationship to each of the &#38;generacies 
in the non-manifold and converts the non-manifold state to the manifold state by subtracting a number 
of degerteracies from a number of corresponding geometric elements. In the manifold state, H can have 
the obvious meaning of a number of geomernc holes. On the other hand, in the non-manifold state, it is 
a mere number for logical adjustment and may take a minus value. We cannot determine whether the non-manifold 
shape (3) in Fig. 4 is made from a shell with a hole or horn two shells contacting each other, There 
are multiple ways to make the transition. Our formula is unique to the transition, but not to the non-manifold 
shape. This multiplicity is controllable by considering the sequence of dynamic transitions arKImakes 
the shell operation able to change the shell inter­connections.  3.2 Data structures We propose a data 
structure which we call a cycle structure. The cycle structure is an extension of the hu~edge structure 
by Miintyla [4] to represent non-manifold shells appearing in a shell operation. The half-edge structure 
represents solid volumes by their boundaries, i.e., shells, but it cannot allow the existence of more 
than one vertex and edge cycle which are made by a shell connection. So, we ti vertex cycle and edge 
cycle entities to it in zddition to face cycle entities, i.e., face loops. This makes the cycle structure 
symmerncal to the geometric entities and their cycles, while the half-edge structure is hierarchical 
for only face cycles. The cycle structurerepresentsglobal topologies and local topologies of a shell. 
A global topology of a shell is representedby a child ring of the shell, and a local topology is represented 
by linking pointers in half-edges. Traversal in the data structure using pointers in half-edges obtains 
ordxed faces in an edge and vertex cycle which divide threedimensional regions at the vicinity of the 
geomernc element. As a result, the edge cycle corresponds to the radial relation of the radial edge structure 
[11] and the vertex cycle correspondsto the zone proposed by Gursoz et al. [1j. Since the cycle structure 
is entirely manipulated by Euler operators which satisfy the conditions of the Euler-Poincar6 formula 
when shells are generated and modified by shell operations, topological consistency of the shell is maintained 
in the structure. All entities in topology and geometry are mapped onto the hierarchical ring structures, 
as shown by Fig. 5. The hierarchical ring structure becomes a topological graph structure by local linking 
of half-edges. Each disjointed object Ob has a child ring of shells Sh, where only one is a positive 
shell and the others are negative cavities for a solid shape. A shell is the entity which represents 
global connectedness in the 2D B-reps model. Therefore, most of the information squired by global operations 
such as the rantob global Fa rl Flfa rt Eba rl  -4c s Vba rl cyde 0 Qa rf !Q]Ibllfl halt# El 2D anobact 
local He hhob nextOb u 8 6% half-adgea L } rantV/d Sh ari e Fig. 5 Hierarchy in topologies Fb k!!?KLJ 
 &#38;g$&#38;g= c C2 clc cc Fig, 6 Local boundariesand local cycles shell operation concentrates at 
this shell. The shell has a number of holes and five child rings: three local boundaries, a vertex boundary 
Vb, edgebounalzryEb andfme boundary Fb, which correspond to OD, 1D and 2D geomernc ob~cts, and faces 
F and geometries G. The Iod boundaries have a child ring of local cycles: vertex cycles Vc, edge cycles 
Ec rmdface cycles Fc. Only the local face cycle has a child ring of half-edges He. The other local cycles 
for vertices and edges have no child rings. The fae boundarylinks to all theface cycles belonging to 
the !%ceas a ring. The vertex boundary similarly holds all the vertex cycles concentrating at the vertex. 
And the edge boundary links all the edge cycles which are co-axial or radial with the curve. The edge 
cycles consist of a pair of half-edges and have an ordaed circularity like haif+xige rings (see Fig. 
6). The h@%dge is the entity which represents local comectedness in contrast with the global one of the 
shell, and indicates rhree local cycles in its neighborhood by three pointers: link Ec, link Vc and parent 
Fc. Link Ec indicates an edge cycle which involves this half-edge as one of a pair, link Vc indicates 
its starting vertex of the half-edge, and parent Fc indicates the face cycle which invoIves it. The mate 
He indicates another half-edge in the same edge cycle. The local cycles around the geometric entity are 
shown by Fig, 7, ml traversed using the half-edges as follows: The fme cycle is a counterclockwise circuk.w 
loop of halj%dges cluainedby next. The vertex cycle is a clockwise radial loop of ha(f-edges chained 
by mate and n ext alternately. Theedgecycle isaloop ofhalf-edgeschainedbymate, Fc Qnext Fc HaQnaxtHa 
parentFb parentFc :~ e ~lng rruteHa linkEC c cle He IlnkVc ?m mateHa Fc Ec + Vc I acccycle venexcycle 
edgecycle Fig. 7 Local cycles and half-edges a faceent F next F psrent Sh \ positive F ne ativeFb s H 
 su sce @!!LJ d:;: Inelde n;ll a face on surfscs s fsee in solid Fig. 8 Face entity i.e., a pair of 
half-edges. Theface cycle entity has a pointer indicating a half-edge which circulates around the face 
cycle as in Fig. 7. The vertex cycle entity has a pointer indicating a halkdge which radiates from the 
vertex cycle. And the edge cycle has two pointers indicating a positive halfdge and a negative one according 
to the direction of the geometric curve. The face entity F, shown by Fig. 8, is introduced for resolving 
non-uniqueness: F should correspond to a pair of face boundaries for the surface shape, but in fact corresponds 
to only a face boundary for the solid shape and indicates a geometric surface. So it has two pointers 
indicating a positive face boundary and a negative one according to the direction of the surface normal. 
The faa boundary has the same property as the half edge and can be considxecl as a haf fme. The face 
boundary has a mate pointer indicating another face boundary in the face entity. The mate pointer has 
a null value for a solid shape, but an active value only for a surface shape. Geometric entities G contain 
geometric data such as surface equations, curve equations and point locations which are affected by the 
coordinate transformation. The vertex boundary and the edge boundary have pointers indicating geometric 
entities. On the other hand the face boundary has a pointer indicating the face entity F, andrefers indirectly 
to a geometic surface through the k entity. 3.3 Euler operation set To perform shell operations consistently, 
we d four operations and their inverses ones to the conventional Euler operation set which Miintylti 
[4] has proposed. They comprise one connecting operation for vertices, two connecting operations for 
edges ad a local uansforrnation --* a taco cycte Not*s: TermmologyandnolatmnareconventionalmISmakmg,kiskjlli 
g,sIS sphmng,I ISjommg.r ISdegenerating (ratherthsn ring),h is Me And swaqxng beiween m and k, s and 
j, makes reverse operator names. Vertex cycles and lace cycles vary in operations, especially in rwn.mantloldoperations 
 Fig. 9 Set of the conventional Euler o~rations by Milntyla (c) (((  n. ....  t J­ . . \\ -,( / i{,. 
 J!3.J H j-,-,,-,)1 ~ .~; !­.-_ -J w a vertex cycle surface Fig. 10 Set of new Euler operations between 
a solid and a surface. As a result, we obtain a whole set of operations for B-reps non-manifold models. 
The conventional Euler operation set is shown in Fig. 9. Our additions are given in Fig. 10. Conventional 
operations are applied to the manifold part maintaining conespondence in a one-to-one relationship txtween 
a bmmdary and a cycle in vertices and edges, respectively. And they are applied to a non-manifold surface 
by transforming the surface to a solid with two faces ad transforming it back to a surface after the 
corresponding manifold operations. New operations are introduced as follows. We examine the duality between 
vertices and faces in the conventional operations. The operators mev and mef obviously have a dual relation 
to each other, mvfs has this in itself and semv has no involvement with duality. But operators kemr and 
kfmrh have no dual operators in the set. We make their partners according to the duality between vertices 
and faces. We akl kehmr and kehmrl from kemr, and kvmrh from kjhwh. We discuss the functions of akkd 
operators compared to those of the partners. The dual functions maintain the topological shell connectivity 
in the data structure . First, we introduce kehmr as a partner of kmr. In the data structures, kemr 
and its inverse mekr swap next pointers between two half-edges in the same face cycle or in different 
face cycles at the same face boundary by deleting or creating an edge, join two face cycles into one, 
or separate a cycle into two. We can consider the dual functions at a vertex, and make an edge connection 
operator kehmr and its inverse mehkr that is an edge separation operator. They swap mute pointers between 
two half-edges in the same vertex cycle or different vertex cycles at the same vertex boundary by deleting 
or creating an edge, join two vertex cycles into one, or separate a vertex cycle into two. The edge cycles 
are simultaneously joined or separated, swapping their positive half-edge pointers corresponding to the 
swapped mare pointers. However, these operators cannot conclude at one vertex only, because an edge has 
two ending vertices arKItwo matcxlhalf-edges. As a resul~ they change a number and pathes of vertex cycles 
at both vertices, and are divided into three cases, as shown in Fig. 10, according to thestatesof thevertexcycles 
atbothends.l%ew operations satisfy shell connectivity at a vertex to divide E into regions. On the other 
hand, we introduce another edge connection operator kehmrl and its inverse mehkrf. They do not swap the 
mute pointers of two half-edges and do not change the vertex cycles there, but edge cycles are joined 
or separated in the same manner as kehmr and mehkr. These edge connection operators, as well as semv, 
have no duality for a vertex and a face and their ring manipulations are similar to those of kfmrh d 
kvmrh. ........... .. ... ............. .. . . . . . . . . -­ , % , ,,,1 : , ... lm ~ ~ +$: 1 .... 
.. ... . .. . .. ------ :: hmrl HO . -.Hlm -Eel , Vco EbO . Vbo Vcl Vbo EcO HO~ B C.-._._ - . HI mate 
swap no mate swap Fig. 11 Edge connections Fig. 11 shows functions of two edge connection operations 
at one vertex of two. The shells comected are different in a number of vertex cycles, half-edge pointers 
in the edge cycles and mate pointers of the half-edges. These operators can be applied only at the place 
where ending vertices of the two edges are connected into common vertex boundaries. Therefore, they are 
always used after the vertex connection operations. For applying kehmr or kehmrl to two edges, they must 
be arranged in the same direction geomerncally. Next, we introduce kvmrh as the panner of kfmrh. The 
Table 2 Transition vector VbEb FbVr ErFr HS o 1 mvfs/kvis mef/kef mev/kev All 11 0100001 00000 000000 
semv/jekv 1 000000 : kemr/mekr : -lo 0 0 1 0 0 I5 ~~~ kfmrh/mfkrh O 00 0 ~~ g g ; O 10 -1 6):$ kvmrh/mvkrh 
-1001 -1001 000-1 00 1 0 7):: kehmr/mehkr O -1 0 -lo -2 0 1 1 0 0 :: : 1-c : -1021 000 8 kehmrl/mehkrl 
O -lo 0 1 0 -1 0 19 degsur/gensol 00000000 operator kfirh is a connection operation for faces. It deletes 
onefaceboundaryandjoins itsfacecyclewithanotherfice boundary, and degemxates the face. By memly replacing 
a face with a vertex, we easily obtain the dualized operation kvrnrhwhich is a connection operatorfor 
vertices. It deletes one vertexboundary,and joins its vertex cycle with another vertex boundary, and 
degenerates the vertex. We also obtain the inveixe opmtor rnjkrh. The operators l$mrh and kvmrh are diW 
into two types by their functions. Applying different shells, they join two shells into a single shell. 
Applying one shell, they make a hole. The inverse operations mjkrh and mvkrh separate a single shell 
into two if the target local cycle is a global boundary, or delele a hole if it is not. The last operations, 
degsur and gensof, = a local transformation between a solid and a surface and the opposite. The operator 
&#38;gsur is applied between two tics boundaries which have the same local structure and share all edges 
and all vertices; it deletes a face F of one fhce boundary, conjoins two face boundaries together with 
anotherface F, anddegeneratesa local 3D region into a thin skin. As a result, two face boundaries become 
the up and the down side of the surface. Next, let us consider the transition vectors of these operators. 
A vector consists of eight tuples such as (V6, Eb, Fb, Vr, Er, Fr, H, S), Table 2 shows transition vectors 
of the conventional operations and our adding operations, which indicate only positive ones. The operators 
kvmrh and kj?nrhare similar to each otherand two vectors: one is for the same shell, the other for differentshells. 
The operator kehmr has three vectors. The firstoneis fordifferentcycles at both vertices. The second 
one is for the same cycle at one vertex and di!%rent cycles at the other vertex. The last one is for 
the same cycles at both vertices. On the other hami kehmrl has only one vector. The operators kehmrl 
and kehmr reduce the hole number H. The number of holes H in kehmrl is reduced by 1, but in kehmr it 
is nduced by 1 only when two vertex cycles conjoin at each vertex, respectively. This seems to be somewhat 
complex, but makes natural transitions between non-manifolds and manifolds. Fig. 12 shows an example 
of the transitions with their vectors from a manifold to two manifolds ~ a vertex cycte (WWW,EWIS): vactw 
Fig. 12 Example of trrmsitions mfkrh mvkrh (1) colorlng recuralvely &#38;@g:~ (2)aaparatlng atructurea 
&#38;@~; $ Fig. 13 Global shell separation through non-manifold states. There, figure (1) is equal to 
figure (2) geometrically, but not topologically. There are two transition paths. All operations are accessed 
with input parameters of a half-edge pointer or a pair of half-edge pointers and return a halkige pointer 
as output, because all entities can be indicated locally by a half-edge. Selection of a halkige in shell 
operation is performed according to the shell connection pattern in Fig. 2. 3.4 Check and separation 
of a global shell The operators mfirh and mvkrh are associatd with the global shell structure and accessed 
by inputting a local cycle. It is necessary to check whether the target local cycle is a global boundary 
cycle or not. The operators separate a shell into two shells if the local cycle is a global boundary, 
but annihilate a hole without separating, if not a global boundary. These operations consist of two stages, 
coloring and separating, and can execute this global check automatically as shown in Fig. 13. The coloring 
indicates a connected shell to the local cycle, setting a global flag at each node. It is recursively 
performed as follow: (1) The coloring routine sets the flags of all half-edges :.-..; .,. ,....:.;.. 
 l.! ,,, : &#38;. ,,, :,:: .. ::., ,:, ,, ..,. .  Fig. 14 Union and Intersection Fig. 15 Exclusive-or 
of solids of solids Fig. 16 Regularized set operation belonging to the initial local cycle as a barrier 
against which the routine does not move to any nodes, and applies the color set to the mated half-edges 
of all the halfaiges in the initial cycle, (2) The coloring routine traces recursively in the hierarchy 
of topologies from the bottom half-edge nodes to the upper boundary nodes through cycle nodes by utilizing 
the local links of half-edges, setting the color flag at ~h node, ad terminates if it can go nowhere. 
As a result, if the local boundary involving the initial local cycle has been colored, the initial one 
is a global cycle but not a global boundary. And if not so, it is a global boundary, because the initial 
cycle is barricadedwith the flags at the first step. Next, when the local cycle is a global boundary, 
the shell is separated into two. The separating routine recursively separates the hierarchy of the structure 
under the shell according to the resulting color. For the convenience of this process, a shell has many 
entries to access child rings, such as geometry data d so on. 4. Generation of solids We present two 
applications of the shell operation. One is a Boolean set operation and the other a solid extraction 
from the non-manifold shell which is generated by the shell connection among surfaces and solids. 4.1 
Set operation In the conventional algorithm for the set operation proposed by Mhntyla [4], shells of 
the given two polyhedron solids A * 4. ..1. }. .. ...- .,;.;. ..... .. . . . >. Fig. 17 Separationof 
a solid by a flee-form surface  r-$=b Fig. 18 Generation of a solid by combining surfaces and B are 
classified into AinB, AoutB, Bin4 and AoutB and recomected using new vertices, null edges and null faces 
along the intersection curves. Here the algorithm owes to vertex neighborhoodclassification which decides 
the side of the edges of the vertex cycle for the intersecting plane, and inserts null edges ad null 
frees for the appropriate edges. Furthermore, the algorithm uses three tables for vertices, edges ad 
faces, ad needs detailed classification when planes or an edge ad a plane of the two solids coincide. 
Instead in our shell operation, we directly connect two shells by non-manifold Euler operators. We do 
not need tempormy tables or entities in the data structure. The vertex neighborhood classification is 
replaced with a simple algorithm of geomernc and topological routines. In the geomernc routines we calculate 
intersections including coincidence among vertices, edges ard faces as described in Section 2. ln the 
topological routines, we first generate new vertices, edges and faces on each shell according to the 
classification in Table 1 in Section 2. Next, we connect the corresponding intersecting edges by the 
extended Euler operators kvmrh and kehmr. In the connection, there is no fmdom because of the constraint 
for the surface loops. We need not give any special treatment to danglingfaces which appear in the non-regularized 
set operation. The dangling faces are connected and separated automatically by the shell operations. 
The shell operation separates the combined shell at the edges where there am more than one edge cycle. 
We introduce here some examples of set operation of the solids. Fig. 14 shows the results which are union 
and intersection of the solids. Fig. 15 shows the results which are exclusive-or of the solids and generated 
after the reverse operation for the subtracting solid. Fig. 16 shows an example of the regularized set 
operation which separates a dangling face 4.2 Solid extraction Wecanextract asolidfrom anon-manifold 
complex shell when the shell incorporates a closed shell as a component. First, we check whether the 
shell incorporates a closed shell or not. This is done by recursive traversal through the data structure 
similar to the case of shell separation in Sec. 3.4. If the shell has a bounulzry euge where mated hay-edges 
belong to the same face entity, it is not a closed shell. So, we start from an arbitrary haffedge and 
traverse all the comected hay-edges checking for the existence of a boundary edge. We continue this until 
all the hay-edges are checked. Next, we separate the closed shell from the non-manifold shell. This is 
done in a manner similar to the case of a separation in the set operation for the ha f-edges belonging 
to a closed shell. By way of example, Fig. 17 shows the separation of a solid by a tke-form surface. 
In this example, a user specifies that an inner part of a solid is effective for the fteedom of the shell 
connection, and invokes only the solid extraction command. Fig. 18 shows generation of a solid by combining 
surfaces. An extncted closed shell and the remaining non-manifold shell am genemted automatically. 5. 
Summary We have proposed a shell operation concept and its algorithm in an integrated framework to enable 
designers to generate a solid ffedy combining solids and surfaces. The algorithm is simple, efficient 
and common to any types of two-dimensional shells as follows: -Three-dimensional regions are represented 
in the cycle structure by vertex and edge cycles of shells which are boundaries of the regions. Only 
shells are manipulated for generating solids uniformly by shell operations, i.e., combining ad separatingshells. 
- The shell operations maintain the topological consistency of shells utilizing geometrical routines 
and Euler operators. The geometrical routines detect all the intersections of shells, and determine geometric 
entities to be generated and their topological relations. The Euler operators corresponding to a non-manifold 
Euler-Poincar 4 formula modify the data structure. We are presently conducting funkier research on the 
algorithms for a rigorous shell operation to prevent numerical errors and to allow designers to modify 
the model as they like by direct removal and parameter changes of form-features. References 1. E.L. Gursoz, 
Y. Choi, F.B. Prinz: Vertex-based representation of non-manifold boundaries, in: M.J. Wozny, J.U. Turner, 
K. Preiss (eds), Geometric Modeling for Product Engineering, North-Holland (1990), pp. 107-130 2. E.L. 
Gursoz, Y. Choi, F.B. Prinz: Boolean set operations on non-manifold boundary representation objects, 
Computer-aided Design, Vol. 23, No. 1 (1991), pp.33-39 3. M. Higashi, T. Mori, M. Hosaka: Interference 
Calculation of Surfaces based on their Geometric Properties, in: F. Kimura, A. Rolstadas (eds), Computer 
Applications in Production and Engineering CAPE 89, North-Holland (1989), pp.275-282 4. M. Ma ntyla An 
Introduction to Solid Modeling, Com­puter Science Press (1988) 5. M. Masuda et al.: A mathematical theory 
and applications of non-manifold geometric modeling, in: F.-L. Krause, H. Jansen (eds), Advanced Geometric 
Modelling for Engineering Applications, North-Holland (1990), pp.78-92 6. A.A.G. Requichai J.R. Rossignac: 
Solid Modeling and Beyond, IEEE Computer Graphics and Application, Vol. 12, No. 5 (1992), pp.25-37 7. 
J.R. Rossignac, M.A. O Connor: SGC: A dimension­independent model for pointsets with internal structures 
and incomplete boundaries, in: M.J, Wozny, J.U. Turner, K. Preiss (eds), Geometric Modeling for Product 
Engineering, North-Holland (1990), pp. 145-180 8. J.R. Rossignac, A.A.G. Requicha Constructive non­regularimd 
geometry, C.omputer-ai&#38;d Design, Vol. 23, No. 1 (1991), pp.21-32 9. I. Stroud: Modelling with degenerate 
objects, Compufer­ai.iedDesign, Vol. 22, No. 6 (1990), pp.344-351 10. K. Weiler: Edge-based data structuresfor 
solid modeling in curve&#38;surface environments, IEEE Computer Graphics and Application, Vol. 5, No. 
1 (1985), pp.21 ­40 11. K. Weiler: The radial edge structure: A topological representation for non-manifold 
geometric boundary modeling, in: M.J. Wozny, H.W. McLauglin, J.L. Encamacao (eds), Geometric Modeling 
for CAD Applications, North-Holland (1988), pp.3-36 12. K. Weiler: Boundary graph operators for non-manifold 
geometric modeling topology representations, in: M.J. Wozny, H.W. McLauglin, J.L. Encamacao (eds), Geometric 
Modeling for CAD Applications, North-Hohnd (1988), pp.37-66 13. K. Weiler, D. McLachlan: Selection sets 
and filters in geometic modeling and their application in a non­maninifold environment, in: J. Turner, 
J. Pegna, M. Wozny (eds), Product Modeling for Computer-Aided Design and Manufacturing, North-Holland 
(1991), pp,l17-139 14. Y. Yamaguti, K. Kobayashi, F. Kimura: Geometric modeling with generalimi topology 
and geometry for product engineering, in: J. Turner, J. Pegna, M. Wozny (eds), Product Modeling for Computer-A 
i&#38;d Design and Manufacturing, North-Holland (1991), pp.97-115    
			