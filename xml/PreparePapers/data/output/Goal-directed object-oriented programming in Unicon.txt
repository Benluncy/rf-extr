
 Goal-directed Object-oriented Programming in Unicon Clinton L. Jeffery Department of Computer Science 
University of Nevada Las Vegas Las Vegas, Nevada jeffery@cs.unlv.edu ABSTRACT Goal-directed languages 
offer excellent expressive power for complex algorithms, while object-oriented languages offer outstanding 
expressive power for complex data structures. The Unicon programming language allows rapid develop- ment 
of complex applications by seamlessly integrating these two paradigms. This paper explores the impact 
of goat- directed expression evaluation on traditional object-oriented programming style. It is hoped 
that new programming id- ioms and techniques will emerge that exploit generators and goal-directed evaluation 
in an object-oriented setting. Categories and Subject Descriptors D.3.3 [Software]: Programming Languages--Language 
Con- structs and Features  Keywords goal-directed evaluation, object-oriented programming, Uni- con 
1. INTRODUCTION Object-oriented programming languages provide good sup- port for mapping application 
domain semantics onto data structures, but offer no special features to facilitate algo- rithm development. 
Goal-directed languages such as Prolog and Icon facilitate algorithm development through features such 
as implicit backtracking. Most attempts to gain the benefits of both object-oriented and goal-directed 
styles, such as Prolog++ [11], are ham- pered by the difficulty of merging imperative and declar- ative 
programming paradigms. The LEDA programming language provides object-orientation and goal-directed solu- 
tions to logic equations in a multiparadigm setting [5]. 1.1 Backtracking The concept of backtracking 
is widely known but fairly consistently underdocumented in the computing literature. Permission to make 
digital or hard copies of all or part of LMs work for personal or classroom use is granted without fee 
provided that copies are not made or distributed for profit or conmaercial advantage and that copies 
bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on 
servers or to redistribute to lists, requires prior specific permission and/or a fee. SAC 2001, Las Vegas, 
NV &#38;#169; 2001 ACM 1-58113-287-5/01/02...$5-00 It is the primary element of added expressive power 
in goal- directed languages, so we review it briefly here. A backtracking algorithm performs a brute-force 
exhaus- tive search of a problem space whose solutions consist of a series of decisions or choices, where 
each choice may depend on all prior choices. At each step forward, every potential solution is tried 
in turn until an answer (if any) is found. Backtracking performs a tree traversal of the problem solu- 
tion space, which might not have any actual tree represen- tation in memory. Backtracking has been applied 
to pat- tern matching and parsing[2], intelligent play of turn-based games[l], classic graph algorithms 
such as the 3-coloring problem[10], and many other problem domains. Writing backtracking algorithms in 
imperative languages is cumbersome due to the necessity of saving and restoring the state in between 
each attempt to take the next step toward a solution. Goal-directed languages provide built-in backtracking 
semantics that greatly simplify many coding tasks. 1.2 The leon Experience The Icon programming language 
[6] is perhaps the most successful integration of goal-directed expression evaluation into a procedural 
language. Icon elegantly addresses the "backtracking granularity problem": because backtracking is an 
exhaustive search technique, it handles small problems elegantly, but does not scale well to large problems. 
Prolog uses backtracking as its primary mode of expres- sion evaluation, causing scaling problems both 
for perfor- mance and for programmer understanding. In practice Pro- log programmers use "cuts" to limit 
backtracking, at the expense of proper declarative style. In contrast, Icon uses an imperative style 
and allows the programmer to introduce backtracking in specific contexts where it will be helpful. Icon 
provides normal conditional and looping control struc- tures, as well as generators. Generators are expressions 
that can produce more than one result. Generators generalize the notion of iterators found in other languages, 
in which a con- trol structure allows the traversal of aggregate structures. Icon generators are expressions, 
not control structures, al- lowing them to be composed and used to direct control flow in more interesting 
ways than to drive a for-loop. Genera-tors allow Icon programmers to mix goal-direction and back- tracking 
into applications in those specific situations where it is needed. Icon-style generators and goal-direction 
have been documented elsewhere, and its formal semantics are well-understood [7]. Icon's success as a 
procedural goal-directed language in- spired efforts to add goal-direction to other procedural lan- 306 
 guages such as C [4]. The Icon approach also suggests a means by which goal-directed evaluation can 
be integrated into object-oriented languages. Languages that integrate goal-directed evaluation and object-orientation 
have the po- tential of offering superior prototyping capabilities for larger applications that exhibit 
significant complexity in both their data structures and algorithms. 2. GOAL-DIRECTED OBJECT-ORIENTED 
LANGUAGES This section explores the nature of the benefits that goal- directed evaluation and object-orientation 
provide each other. One cannot always predict such outcomes; we integrated the features in order to see 
what happens. But the combination has to have some potential in order to justify the experiment in the 
first place. 2.1 Generator Objects are Not Enough It is interesting to compare generators in Unicon with 
the generator objects that can be written in ordinary object- oriented languages. The generator object 
approach has been explored with an implementation [3]. Any object-oriented language allows the construction 
of objects that know how to iterate through a series of values by providing two methods, first () and 
next (). One obvious difference is that Unicon generators may be pure computations that aren't tied to 
any particular object. This is interesting, but the real question is whether object- oriented languages 
need Icon-style goal-direction, since they can try to simulate it using objects. Real generators and 
goal-directed evaluation offer substantial advantages. There are many generators appropriate for even 
simple objects such as strings: generating the characters one at a time forwards and backwards and in 
random order; generat- ing substrings and words; searching the string for multiple results, and so on. 
Supporting many generators for a con- ventional object muddies the object's public interface with many 
generator methods with varying names (first_a(), next_a(); first_b(), next_b(), and so on). The potential 
for excessive memory use is severe because the number of extra state variables that must be added to 
the object is proportional to the number of generators. Now suppose the object is in the middle of a 
sequence of calls to a genera- tor, and a new call to first() is made. Most generator objects will reset 
state variables to begin the sequence, and lose track of the generation in progress. In contrast, Unicon 
generators are implemented by sin- gle methods and the suspension of results and resumption protocol 
is implicit, as is the case for Icon procedures. The extra state variables for maintaining generators 
are kept on the stack, rather than bloating the size of each object in- stance. More importantly, Unicon 
generator methods are re-entrant, allowing for both recursion and parallel invoca- tion of a generator 
by multiple threads. 2.2 Objects Make Goal-Directed Languages More Useful Some advocates of goal-directed 
languages may see no reason to integrate object-oriented features into their lan- guage. The same debate, 
and the same reasoning, has al- ready been conducted for imperative procedural program- ming languages. 
Object-orientation has attained a promi- nent role in mainstream languages because it adds substan- tial 
value for some applications (especially large ones requir- ing software engineering methods and complex 
data organi- zation) while not precluding the procedural style where it is more appropriate. The case 
for goal-directed languages is only strengthened by applying them in object-oriented contexts. Complex 
data structures and relationships between objects call for complex traversals and communication patterns, 
where the notational power of goal-directed evaluation is especially useful. If objects improve software 
scalability by reducing the size of modules that may be understood independently, goal-direction improves 
software scalability by reducing the amount of notation needed to express specific algorithms. Budd made 
an argument for multi-paradigm program- ming in LEDA by citing an example of a graph package in which 
the overall structure was object-oriented, and goal- direction (in LEDA's case, logic programming) was 
used in the areas where it excels, such as search algorithms [5]. Uni- con integrates objects and goat-direction 
at a finer grain, since the control structures in every method of every class are governed by goal-directed 
semantics.  3. THE UNICON LANGUAGE Unicon is a modest superset of Icon containing extensions that make 
it suitable for a broader range of modern appli- cations. The syntax and semantics of the language are 
de- scribed at http://icon, cs. truly, edu/and in a forthcoming book [8]. Unicon adds less to Icon than 
C++ adds to C, be- cause Icon is already a very high level dynamically typed, garbage-collected language. 
As a short summary, Unicon adds: * classes and inheritance, including a novel multiple in- heritance 
semantics based on transitive closure packages support the development of large programs  parameter 
coercion syntax, for rigorous interface check- ing  a multi-platform system and networking interface 
 a multi-platform database interface based on ODBC, SQL, and DBM  an execution monitoring architecture 
(Alamo) for writ- ing programs that monitor, debug, or visualize other programs[9].  Like C++ and unlike 
Java, Unicon supports classes with- out requiring them; execution begins from a main procedure. Like 
Java and unlike C++, Unicon is garbage collected, and all methods are implicitly virtual. Unlike both 
Java and C++, fields and methods are public by default in Unicon; the notation is intended to empower 
programmers, not to protect them from themselves. Protection occurs when the public interfaces (parameters 
and return values) are used. This philosophy makes sense in a very high level language that is used for 
rapid prototyping, where requirements are different than in systems programming languages. Unicon classes 
are related to Icon records like CW+ classes are re- lated to C struct declarations; they are records 
with asso- ciated procedures. Run-time typing and pervasive polymor- phism in the set of built-in operators 
obviate the need for concepts such as templates and operator overloading. 307 4. EXAMPLES Goal-directed 
evaluation enhances routine programming in numerous small ways. There is no true or false; if an ex- 
pression is able to compute its intended result that success enables the surrounding expression to be 
evaluated. Elimi-nating boolean semantics frees up normal algebraic notation to act in more convenient 
and intuitive ways. For example, 0 < x < 10 is legal and means what one would expect. It is also possible 
to test whether either of two values meets a criterion with (xly)=0 rather than the cumbersome C expression 
(x==0) I I (y==0). The examples given below do not catalog such features, but instead illustrate the 
interplay between goal-direction and object-oriented systems. 4.1 Structure Traversal In a turn-based 
science fiction game, the state of the entire game has been represented within a large, heterogeneous 
tree of objects, where different classes of objects axe used to represent regions of space (such as galaxies, 
stars, or planets) and the entities that interact within those regions during game play. Several structure 
traversals are performed during different phases of each turn in order to accomplish specific game tasks, 
such as identifying locations where a combat may take place. A conventional iterator-based approach to 
such traversats might look like: every sector := galaxy.gen() do every starsystem := sector.genO do every 
planet :--starsystem.gen() do every environ := planet.gen() do # test the environ for game actions  
The local variables associated with the several iterators are not useful, and the nesting depth of of 
these loops points to an excessive cyclomatic complexity by common software engineering standards, for 
a common operation that ought to also be a simple operation. Goal directed evalation allows an expression 
like every environ := galaxy.gen().gen().gen().gen() do # test the environ for game actions  4.2 User 
Interface Example A more interesting example arises in Unicon's user inter- face toolkit, written by 
Robert Parlett. The toolkit employs generators and backtracking to simplify the central mecha- nism by 
which events are routed to appropriate widgets. If a widget handles an event it succeeds; if not, the 
event router (a generator expression) is resumed to pass the event to the next candidate widget object. 
When recursion is thrown in ("recursive generators"), this routing aceomodates arbitrary hierarchies 
of widgets. The code for event handling is method handle_event (e) every c := components.gen() do { if 
not c.is_shaded() then suspend c .handle_event (e) if parent_Dialog.unique() then break ) end The caller's 
expression context might cause this method to terminate with the first result it is able to produce via 
the suspend expression. In other expression contexts, implicit backtracking will resume the method repeatedly, 
forcing ev- ery component that can handle the event to do so.  5. CONCLUSIONS AND FUTURE WORK Unicon 
is a close, direct descendant of Icon that allows large-scale object-oriented systems in which goal-directed 
expression evaluation and backtracking are utilitized in a myriad of specific situations where they are 
needed. Uni-con's implementation is based on Icon's implementation, al- lowing relatively complete functionality 
and performance to be achieved with a modest effort. An obvious possibility for future work would be 
to design a new language from scratch to avoid making any conces-sions to backward compatibility with 
an existing language. This sounds good in theory but introducing a new language without an existing installed 
base would require an extraor- dinary commitment. A more promising approach would be to take an object-oriented 
language and add goal-directed evaluation. One of Icon's advantages relative to its successors was a 
familiar syntax, and one of the primary reasons Java has succeeded was its close adherence to C syntax; 
goal-directed evalua- tion can be added with minimal distortion of this industry- dominant syntax. We 
have proposed, but not yet imple- mented, a goal-directed dialect of Java called Godiva. If Godiva is 
able to retain and leverage full interopability with Java, it will make goal-directed object-oriented 
languages immediately more accessible to multitudes of programmers. 6. REFERENCES [1] A. Aho, J. Hopcroft, 
and J. Ullman. Data Structures and Algorithms. Addison Wesley, Reading, Massachusetts, 1983. [2] A. Aho, 
R. Sethi, and J. Ullman. Compilers Principles Techniques and Tools. Addison Wesley, Reading, Massachusetts, 
1986. [3] T. Budd. A Little SmaUtalk. Addison-Wesley, Reading, Massachusetts, 1987. [4] T. A. Budd. 
An implementation of generators in C. Computer Languages, 7:69-87, 1982. [5] T. A. Budd. Multiparadigm 
Programming in LEDA. Addison-Wesley, Reading, Massachusetts, 1995. [6] R. E. Griswold and M. T. Griswold. 
The Icon Programming Language, third edition. Peer-to-Peer Communications, San Jose, California, 1997. 
[7] D. A. Gudeman. Denotational semantics of a goal-directed language. A CM Transactions on Programming 
Languages and Systems, 14(1):107-125, Jan. 1992. [8] C. Jeffery, S. Mohamed, R. Pereda, and R. Parlett. 
Programming with Unicon. icon.es.unlv.edu/ub/, 2001. [9] C. L. Jeffery. Program Monitoring and Visualization: 
an Exploratory Approach. Springer, New York, 1999. [10] U. Manber. Introduction to Algorithms: a Creative 
Approach. Addison Wesley, Reading, Massachusetts, 1989. [11] C. Moss. Prolog++: The Power of Object-Oriented 
and Logic Programming. Addison Wesley, Reading, Massachusetts, 1994. 308   
			