
 Dichotomization, Reachability, and the Forbidden Sub~raph Problem (Extended Abstract) H.B. Hunt,III 
1 Harvard University, Cambridge, ~assachusetts 02138 and T.G. Szymanski 2 Princeton University, Abstract: 
We present several techniques for proving lower bounds that can be ap- plied to problems about grammars, 
formal languages, program schemes, simple program- ming languages, and automata. These tech- niques 
include dichozomization, extensions of dichotomization to certain classes of relational problem~, recursive 
analogues of the Post Correspondence Problem, and the reachability problem. These techniques provide 
many new lower bounds and provide a unified framework for viewing much of the work on the complexity 
of problems about grammars, languages, schemes, and automata. We ~how how to Drove the undecidability 
of a problem by efficiently reducing the mem- bership problem for Tms that always halt to it. ' We also 
introduce the forbidden subgraph problem. I. Introduction We are interested in the general problem 
of proving nontrivial lower bounds for classes of problems. Here, we consi- der problems about grammars, 
languages, schemes, and automata. Several ideas and techniques, which we have found useful in studying 
the complexity of such problems, are presented. These techniques are uti- lized to develop a general 
framework for studying the complexity of such problems. In Section 2 we present these tech- niques. 
They include dichotomization, ex- tensions of dichotomization to certain classes of relational problems, 
recursive analogue~ of the Post Correspondence Prob- lem, and the reachability problem. We in- troduce 
the forbidden subgraph problem and briefly discuss how such problems can be used to prove upper bounds 
on the complex- ity of problems about schemes and graphs. We also show how to prove the undecidabi- lity 
of a problem by efficiently reducing the membership problems for Tms that al- ways halt to it. This is 
especially use- ful in developing dichotomies for grammar problems. In Sections 3 and 4, we show how 
these techniques are used to prove non- Princeton, New Jersey 08540 trivial lower bounds for problems 
about grammars (Section 3) and schemes, automata, and languages (Section 4). The basic definitions about 
grammars and languages used here can be found in [i] and [2]. The basic definitions about pro- gram schemes, 
interpretations, equivalence of schemes, etc. can be found in [3]. We abbreviate context-free grammar 
by cfg, context-free language by cfl, Turing ma- chine by Tm, infinitely often by i.o., and almost everywhere 
by a.e. Here, almost everywhere means except for a finite set of nonnegative integers. The definitions 
of polynomial time bounded reducibility, de- noted by pt~me' p' NP, PSPACE, NP-hard, NP-complete, PSPACE-hard, 
etc. are standard and can be found in [4]. In what follows Z and &#38; denote finite nonempty alphabets. 
Def. i.I: A log-space transducer M is a de- terministic Tm with a 2-way read-only input tape, a 1-way 
output tape, and several 2-way read-write work tapes such that M, given input x, always halts with some 
string y on its output tape and such that M never uses more than O(loglxl) tape cells on its work tapes. 
A function f:E* -~ ~* is said to be log-space computable if and only if there exists a log-space transducer 
M such that M, when given input x ~ E *, eventual- ly halts with output f(x). For L c E ~ and N c ~*, 
we say that L is log-~pace reducibTe to N, written L i<_ N, if and Only if there is a log-space°~omputable 
function f:E*~&#38;~ such that for all xEZ*, xEL if and only if f(x)~N. If in addition If(x) l -< t(Ixl) 
and some log- space transducer that compute f is O(t(Ixl)) time-bounded, we denote this by L-< N [] 
 t (n) log (space+time) " Def. 1.2: Let D c Z*. A ~redicate H on D i'S any function f~om D into {True,False}. 
A predicate H is decidable if and only if there is a Tm M such that ~, when given in- put x~D, always 
halts and outputs I, if iResearch supported in part by NSF Grant No. DCR 75-22505. 2Research supported 
in part by NSF Grant No. DCR 74-21939. 126 xED, and outputs 0, otherwise. If ~ is not decidable, N 
is said to be undecidable. [] Def. 1.3: Let D c Z*. Let M be a Tm with input alphabet Z-that always 
halts on ele- ments in D. The function tM, with domain the nonnegative integers, is defined by, for 
all n, t~(n) equals the maximum number of moves made,by M on any xED with IxI=n. We denote t~ by t M. 
[] The reader should note that in Def.'s 1.2 and 1.3 D need not be a recur- sire subset of z *. 2. Dichotomization 
and Reachability 2.1 Dichotomization~ Relations T and Tms That Alwa[s Halt In this section, we present 
our ba- sic results on dichotomies, relations, and Tms that always halt. We show how these ideas can 
be used to develop uniform lower bounds for classes of problems. More de- tailed examples of their 
use appear in Sections 3 and 4. Our first theorem is a simple but basic result on the use of dichotomies 
to prove lower bounds for classes of problems. In what follows, Z is a finite nonempty alphabet. 
Thm. 2.1: Let @ c Z*. Let A, B, and C be su~e~--of @ such-that (i) A N B = ~ ~ and  (ii) for all x~C, 
either xEA or xEB. Let F be any subset of @ such that  (iii) and (iv) rAn~Br~c~.- Let f(n) ~ tM(n) 
i.o., for all Tms M such that M, when given input x6C, always halts with output I, if xEA, and 0, other- 
 wise. Then, f(n) ~ t~(n) i.o. , for all Tms N such that N, when given input xE@, always halts with 
output i, if xEF, and 0, otherwise [] Proof: By assumption, f(n) ~ t~(n) i.o. t~n) [] Thm. 2.1 asserts 
that any lower time bound for testing if a member of C is an element of A is also a lower time bound 
for testing if a member of @ is in F, for any F satisfying conditions (iii) and (iv). The next result 
extends the obvious implications of Thm. 2.1 to a class of related relational problems. Thm. 2.2 is 
the basis of our grammar complexity theory in [5] and Section 3 below. Thm. 2.2: Let @ c Z*. Let A, 
B, and C be su~e~-of @ such-that (i) A N B = ~,. and  (ii) for all x~C, either x£A or x£B. Let p be 
any binary relation on @, for which there exist disjoint subsets D and E of @ such that  (iii) for 
all xEA, there exists y~D for which xpy, and (iv) for all x6B I if xpy, then yEE. Let f(n) 5 rE(n) 
|.o, , for all Tms M such that M, when given input xEC, always halts with output i, ~f xEA, and 0, otherwise. 
Then, f(n) 5 t~(n) LO. , for all rms N such that N, when given input x~@, always halts with output I, 
if xpy for some yEF, and 0, othe rwise. [] Proof: For all xEC, there exists yEF such t~at xpy if and 
onl~ if xEA. Thus by as- sumption, f(n) ~ t~(n)[.O. ~ t~(n), [] Thm. 2.2 is illustrated pictorially 
in Figure 1 below. Applications of Thms. 2.1 and 2.2 to a variety of different clas- ses of grammars 
and grammar problems appear in Section 3. Figure 1 8  Next, we show how the efficient re- duction 
of the membership problems for Tms that always halt can be used to develop di- chotomies satisfying the 
conditions of Thms. 2.1 and 2.2. Thm. 2.3: Let @ c ~*. Let A and B be dis- ~-5~i~t-~bsets of N. Suppose, 
fur all suf- ficiently fast growing recursive functions t(n) and for all t(n) time-hounded determi- 
nistic Tms M, that there exists a function fM computable by some t H time-bounded de- terministic Tm 
such that, for all inputs x to M, fM(x)~AUB and fM(x)~B if and only if xEL(H). Let F be any subset of 
@ such that A c F and FNB=$. Suppose there exists a recur~ive function T(n), such that for all Tms M 
that always halt, T(n) ~ tM(n ) a.e. Then, for all recursive functions f(n) and for all Tms N such that 
N, when given input xE@, always halts with output i, if x(F, and 0, otherwise, f(n) < t~(n) i.o. [] 
 Proof: The proof of Thm. 2.3 follows from tle~ollowing two well-known properties of the recursive 
sets and Tms that always halt: (i) Let M be a deterministic Tm that halts for all inputs. Then, there 
exists a strictly increasing recursive function T(n) such that t,(n) ~ T(n).  (2) For all~"recursive 
functions f, there is a recursive language L~ such that for any Tm M with L(M)=Lf, f(~) < t~(n) i o. 
The  proof is by contradiction. Suppose for some such @ ~nd F, that there exist a strictly increasing 
recursive function F(n) and a Tm N such that N, when 127  given input xE@, always halts with output 
 i~ if xEF, and 0, otherwise, and such that tNU } F(n), a.e. Let M be any Tm that al- ways halts. Consider 
the Tm~that ope- rates as follows. x)~. For all inputs x to M,~ constructs  Step 2. If f (x) EF, then~outputs 
0. Otherwise,~outputs i. Then, L(~)=L(M) and~is [T(n)+F(T(n))] 2 time-bounded a.e. But, since this 
is true for any ar- bitrary Tm M that always halts, this con- tradicts Fact (2) above. [] Cor. 2.4: 
Let F and @ satisfy the condi- t~s-~ Thm. 2.3. Let @ be a recursive subset of Z*. Then the predicate 
N on @ defined by H(x)=True if and only if xEr is undecidable. [] The technical importance of Thm. 
 2.3 lies in its elimination of Tm computa- tions that do not halt. The next example shows how Thm. 
2.3 is used to derive di- chotomies satisfying the conditions of Thm. 2.1. 2.5: Let M be a deterministic 
Tm.  e an input to M. Then a linear cfg G[M,x] can be constructed effectively in time less than c'Ixl, 
where c is a constant depending only upon M not x, as follows -- The productions of G are S ~ A I B, 
 A ~ xiA~ i I xi$e i, and B ~ xiB~i I xi$~i, for 1 ~ i ! n, where (~I,~i) ..... (an,~n) are the pairs 
of strings constructed from M and x as in the proof of Thm. 14.1 in [2]. Then, (a) if M halts and accepts 
x, G[M,x] is ambiguous;  (b) if M halts and rejects x, G[M,x] is BRC; and  (c) if M does not halt, 
then G[M,x] is  not BRC but is also unambiguous. However, if we know a priori that M al- ways halts, 
then G[M,x] is either BRC or ambiguous, and G is BRC if and only if x~L(M). But, the above construction 
satis- fies the conditions of Thm. 2.3 and Cor. 2.4. Thus, letting @ be the set of linear cfgs, letting 
A be the set of linear BRC cfgs, and letting B be the set of ambi- guous linear cfgs, we have a dichotomy 
satisfying the conditions of Thm. 2.1. Thus, as an immediate corollary, we have the following -- Thm. 
2.6: Let F be any subset of the li- near c~s such that (i) every linear BRC cfg is an element of F, 
and  (ii) no ambiguous linear cfg is an ele-  ment of F. Then, it is undecidable if an arbitrary li- 
near cfg is an element of r. [] Other applications of Thms. 2.1, 2.2, and 2.3 appear in Sections 3 and 
4. 2.2 Post Correspondence Problems Recursive analogues of the Post Cor- respondence Problem (PCP) 
are presented, These analogues can be used to obtain proofs of lower bounds on several decidable gram- 
 mar and scheme problems by just "reading off" from the undecidability Droofs for the corregponding 
undecidable grammar and scheme problems, respectively. Def. 2.7: An instance I of a correspondence prOf'--is 
a pair of m-tuples of nonempty strings, with m ~ I. The size of I, de- noted by III, is the sum oif--t]~e-Te~gths 
of the compound strings, e.g. if I = {(x I .... ' Xm), (Yl..... ym)}S then III: IXll+ ... + IXml + 
lyll + ... + lyml. Def. 2.8: Let xEZ*. Then, fx if Ix[ ~ k,  Firstk(x) = [y if x=yz and lyl=k. [] 
 Def. 2.9: Let f(n) be an increasing positive integer valued function. (i) An instance I={(x I ..... 
Xm),(y I .... , Ym)} of the f(n)-bounded PCP is said to have a solution if and only--rf there is a nonempty 
sequence of integers ii, ... with 1 ~ il, ... ,i s } m, such that 'is Xil "'" Xis = Yil "'" Yis and 
 Jxi 1 ... XisJ ~ f(JIJ). (ii) Lf = {I I I is an instance of the f(n)- bounded PCP that has a solution}. 
[] Two useful observations are the fol- lowing. Thm. 2.10: Let f(n) = rnr~ where r is a positS-rational. 
Then, Lf is NP-complete. Gl.  Thm. 2.11: Let f(n) = 2 n. Then, there exist constants c,d>0 such that 
 (i) Lf is recognizable by some 2 dn time- bounded nondeterministic Tm, and  (ii) any nondeterministic 
Tm that recognizes Lf makes more than 2 cn moves, i.o. []  Thus, if any rnr~-bounded PCP is poly- nomially 
reducible to a problem ~, then is NP-hard. Similarly, if the 2n-bounded PCP is lEg-reducible to ~ using 
only linear intermediate storage, then there is a con- stant c>0 such that any nendeterministic Tm that 
solves ~ makes more than 2 cn moves, i.o. Two fairly direct applications follow. Thm. 2.12: Let F = 
U F be a class of n~l n parameterized linear cfgs such that (i) for all n ~ i, each linear cfg that 
is simultaneously BRC(n,n), BC(n,n), and LR(n) is a member of Fn, and  (ii) no ambiguous linear cfgs 
are elements of F. Then, (iii) the language L u = {(G,~) I G  is a linear cfg, v is a unary numeral 
for the positive integer n, and Gfr n} is NP- hard. (iv) There exists a constant c>0 such that any nondeterministic 
Tm that recognizes the language L b = {(G,~) m G is a linear cfg, ~ is a binary numeral for the positive 
inte- l'For all reals x, ~1 is the least integer greater than or equal to x. 128  gern and G~F n} 
makes more than 2 cn moves, i.o. [] Proof sketch: To Drove that L u is NP-hard ~'t--~ff~ to consider 
instafices I = {(Xl' ''" 'Xm)'(Yl' "'" 'Ym ) } of the n- bounded PCP such that if Firstk(Xil...Xis ) 
= Firstk(Yil...Yis) for some sequence il, ... ,is, then k<II I . For such ins- tances I, consider the 
linear cfg G I con- structed as in Example 2.5 The produc- tions of G I are S + A IB , A ÷ iAxili$xi, 
 and B4 iBYili$Yi, for 1 ! i _< m. G I is constructible from I deterministically in time bounded by 
a polynomial il~ }l,J Moreover, G I is BRC(III,III) , BC(JI If), and LR(IIJ) if I has no solution; and 
G I is ambiguous, otherwise. Thus, GifF[iI if and only if I has a solution. [] Thm. 2.1316]: The language 
{SIS is a mul- ~ple variable program scheme without loop- ing and S is not free} is NP-complete. [] Informally, 
Thm. 2.12 asserts that the problem of determining if a linear cfg G is rn, with both G and n parameters, 
is NP-hard, if n is expressed in unary, and requires nondeterministic exponential time, if n is expressed 
in binary. Similarly, Thm. 2.13 asserts that the problem of de- termining if a multiple variable program 
scheme without looping is free is NP- complete. Our next theorem is a PCP analogue of Thin. 2.3: Thm. 
2.14: Let D be the set of instances I o~he~P such that for each I = {(Xl, .... Xm),(y I .... ,ym)} in 
D, there exists a positive integer xI such that if Firstk(Xil...Xis) = Firstk(Yil...Yis), for some sequence 
i I, ... ,i s, then k _~ i I. Then, there exists a Tm M such that M, given input IED, always halts and 
outputs i, if I has a solution, and outputs 0, otherwise. For each such Tm M and for all recursive functions 
f(n), f(n)<tMD(n) i.o. [] Thus, the correspondence problem for instances in D is decidable but is not 
recursively time-bounded. Finally, we- note that the various f(n)-bounded PCP's (for recursive functions 
f(n)) yield a hierarchy of arbitrarily hard recursive sets. 2.3 Reachab~lity In this section, we introduce 
the Teachability problem. The reachabi!ity problem can be used to prove uniform lower bounds on classes 
of problems about schemes, automata, and languages. It underlies the proofs of many of the lower bounds 
or unde- cidability results in [3], [6], [7], [8], [9], and [i0], etc. Here, we only discuss the Teachability 
problem for program schemes. Detailed examples appear in Sec- tion 4. Def. 2.15: Let S be a program 
scheme; and let A-~--a label of some instruction in S. The label A is said to be reachable (in S) if 
there is some interpretation of S ~d- assignment of values to the input variables of S such that in the 
resulting computation the instruction labeled by A is executed.~ Def. 2.16: The Teachability Totem for 
pro- gram sc~mes is the problem of determ~ing, o~ a sc~ S and a label A appearing in S, if A is reachable 
in S. [] Def. 2.17: Let S be a program scheme with exactly Two halt statements,~abeled A and B, respectively. 
Let~andY~be schemes, whose start statements are also labeled by A and B, respectively. Then [S_L~_~] 
is the scheme that results by replacing the statements A.Halt and B.Halt in S by~and.~l ~, respectively. 
 The scheme [S,~,~] is shown graph- ically in Figure 2 below. s / N , ~, ~iqur~ 2  Thm. 2.18: Let~ 
be a set of progxam sc~m~ such that each scheme inC. has ex- actly two halt statements labeled A and 
B, respectively. Let ~" = {IS, ~Z.,~] ISE~-}. Let @ be any set of program schemes such that~-c @. Let 
IT be any predicate on @ such thaT, for all schemes [S,~,9] in ~.', ~([S,~,~]) = True if and only if 
the label A is reachable in [S,~,~]. (i) Let M be any Tm such that M, given input SEC., always halts 
and outputs I, if A is reachable in S, and 0, otherwise. Let f(n) be any function such that, for all 
such M, f(n)<tM(n) i.o. Let N be any rm such that N, g~ven input S "(@, always halts and outputs i, i~ 
II(S ~ = True, and 0, other- wise. Let t~(n) be increasing. Then, there exists k>_l such that f(n)<t~(kn)+cn 
i.o., where c>0 is a constant. (ii) If~ EP, then {SIS( C. and A is is reachable} log {SJSE@ and ~I(S) 
= True}. Proof: For all SE~, A is reachable in S if ant only if I[([S,~ ,~]) = True. Moreover, for all 
SEt, [S, ~,~] can be constructed from S deterministically in time linear in  Isl. Our next theorem 
is an application of the Teachability problem to certain kinds l'We assume that the only label appearing 
in both S and ~.is A. Similarly, we assume that the only label appearin F in hnth ~ ~.~d~i.s B. 129 
of relations. In what follows, strong e- quivalence is denoted by ~, weak equiva- lence is denoted by 
~, and isomorphism is denoted by ~. Thm. 2.19: Let~ be a set of program sc~m~ ~uch that each scheme in 
~has ex- actly two halt statements labeled A and B, respectively. Let d~be the scheme A.HALT; and let 
7~ be the scheme B.HALT. For each S~, let ~Z S be the scheme{A.c. HALTZ÷h(z)' where h is a function 
symbol not appearing in S and z is the output variable of S. Let ~ ~ {[S, ~Z-, ~] }I SE~}U{ is, IsE }. 
Let @ be any set of program schemes such that ~ ~ @. Let p be any binary relation on @ such that, for 
all S1,S2E@, S I ~ S 2 implies SlO$ 2 and SlPS 2 implies S 1 ~ S 2.  (i) Let M be any Tm such that 
M, given in- put SEE, always halts and outputs l, if A is reachable in S, and 0, otherwise. Let f(n) 
be any function such that, for all such M, f(n)<t~(n) i.o. Let N be any Tm such that N, g~ven ;input 
(S ,S ~0 with S %S ~'E@, always halts and outputs l, if S ~S ', and 0, otherwise. Let t~(n) be increasing. 
Then, there exists kel such that f(n) <t~(kn)+cn i.o., where c>0 is a constant~  (ii) If~EP, then (SIS~and 
A is reachable}  leg {(S"S'')IS"S''E@' and ~(S~pS'')}. [] Proof: For all SE ~, IS,de,A] and ~-~,~]~@, 
and [S,~s,~p[S,~,~] if and only if A is not reachable in S. This follows since, (I) if A i~ reachable 
in S, then ~([S,~s,~]m[S,~,~] ) and, hence, ~([S,~s,~]p[S,~, ~1), and (2) if A~s not reachable in S, 
then ([S,~s,f~]~[S,~,~]) and, hence,  ([S,~s,~l ~[S,~,~). The remainder of the proof is similar to 
that of Thm. 2.18 and is left to the reader. [] Thm. 2.19 shows how to use the reachability problem 
to prove lower bounds on a variety of relations including iso- morphism, strong equivalence, weak equiva- 
lence, and containment. Examples of its use appear in Section 4. We conclude by briefly discussing forbidden 
subgraph properties. These pro- perties provide partial converses of the reachability problem and can 
be used to prove upper time bounds on some scheme problems. The simple forbidden subgraph prob- lem 
is defined as follows. Def. 2.20: Let @ be a set of program schemes. l~--~--~-any predicate on @ for 
which there exists a scheme~such that, for all SE@, H(S) = True if and only if~ , possibly with a relabeling 
of statements, is a reachable subscheme of S. Then, ~ is said to have the simple forbidden subgraph property. 
[] For such IT to decide if ~(S) = True, it suffices to verify that there is a reachable copy of~Z-in 
S. Thus, for all classes @ of program schemes for which the reachability problem is decidable determi- 
nistically in polynomial time, and, for all predicates H on @ with the simple forbidden subgraph property, 
~ is decidable determi- nistically in polynomial time. In our next example, we present several such @ 
and ~. All definitions can be found in [3] or [Ii]. Example 2.21: @ is the set of free program schemes. 
H is the predicate "S does not diverge for all interpretations." Then, H(S) = True iff S contains a HALT 
statement. @ is the set of tree-program schemes. H is the pre- dicate "S does not halt for all interpre- 
tations." Then, H(S) = True iff a reach- able leaf of S is a LOOP statement. [] The simple forbidden 
subgraph prop- erty, however, fails to be applicable to many interesting predicates H. For example, l~t 
@ be the set of free program schemes and n be the predicate "S does not halt for all interpretations." 
Then, ~ does not have the simple forbidden subgraph property since ~(S) = True if and only if S contains 
a LOOP statement (which is a simple forbid- den subgraph property) or S's flow diagram contains a loop 
(which is not). However, does have a more general but easily veri- fied forbidden subgraph property. 
If S con- tains no LOOP statements, then ~(S) = True if and only if the structure~in Figure 3 is a substructure 
of S, where the arrow de- notes a path of instructions. Many other predicates ~ have such more com- plex 
forbidden subgraph properties, e.g. "S is not weakly reducible to a D chart" [12] and "S is not re- 
ducible" [13]. Again, for all @ for which the reachability problem Figure 3 is decidable deterministically 
in polynomial time, and, for all predicates on @ having more complex forbidden subgraph properties for 
which the presence of~is verifiable deterministically in polynomial time, is decidable deterministically 
in polynomial time. Open Problem: How complex can such struc- t~s-~'~'-~f the presence of His verifi- 
able deterministically in polynomial time? 3. A Comple~ity Theory of Grammar Problems In this section, 
the techniques and theorems of Sections 2.1 and 2.2 are used to develop a general complexity theory of 
grammar problems. We continue the work be- gun in [4] and IS]. We study the complexity of problems about 
different subsets of the cfgs including the LR regular grammars, the linear cfgs, and the cfgs that 
generate  130 bounded languages. In each case, we use Thm. 2.2 to extend lower bounds, resulting from 
dichotomies satisfying the conditions of Thm. 2.1, to many different relational problems. We use Thm. 
2.3 to develop these dichotomies. Def. 3.1: (i) A cfg G is said to be inhe- a~it~u--~mbiguous if all 
equivalent c graTe ous, i.e. if L(G) = L(H), then H is ambiguous. We denote the set of inherent- ly ambiguous 
cfgs bye. (ii) A language L c z~ is said to be bounded if and onl~ if there are words Wl, ... ,WkEE~ 
such that L ~ Wl~-...'Wk *. We denote the set ,qf cfgs generating boun- ded languages by Y~. (iii) 
We denote the intersection of the sets of strong LL, SLR, and BRC grammars bye. [] I O(I) A(II. ' B(I) 
D.(I) E(I) i fgs C gL £- 2 cfgs ~LR(i,t) ~ USeR(l,t) grammars grammars 3 linear linear ~N linear ~N 
cfgs BRC linear BRC linear grammars cfgs grammars cfgs 4 LR ~ LR LR regular grammars ~ grammars cfgs 
 Figure 4 Thm. 3.2: Let IE{1,2,3,4,5}. Let @(1) be ~'~n~a--as in Figure 4. Let p be any bi- nary relation 
on @(1) such that (a) for all grammars GEA(I), GpH for some grammar HED(1); and  (b) for all grammars 
GEB(1), GpH implies  that HEE(I). Let F be any subset of @(I) such that (c) D(1) c r; and (d) rn 
~(T) ¢. = Then, (i) letting 1=1,2,3, or 4, it is un- decidable, for a grammar GE@(I), if there exists 
a grammar HEr such that GpH. (ii) There exists a constant c>0 such that, if M is a nondeterministic 
Tm that, given input GE@(5), always halts with output i, if GpH for some HEF. and 0, otherwise, then 
2 cnl±°g n < t~(S)(n) i.o. [] We will not prove Thm. 3.2 here. The proof of (i) for I=l appears in [~]. 
The proofs of (i) for I=2 or 4 are similar to that for I=l. The proof of (i) for I=3 follows from the 
proof sketch in Example 2.5, We note that any reflexive binary relation p on @(I) such that GpH implies 
L(G) = L(H) satisfies the conditions of Thm. 3.2, for I = 1,2,3,4, or 5. Such re- lations include the 
following: (i) GpH if and only if G = H;  (ii) GpH if and only if L(G) = L(H);  (iii) GpH if and 
only if G and H are struc- turally equivalent; (iv) GpH if and only if G left (right) covers H;  (v) 
GpH if and only if G is left (right) covered by H;  (vi) GpH if and only if there is a surjec- tive 
homomorphism from G to H; and  (vii) GpH if and only if there is a surjec- tire length-preserving homomorphism 
from G to H. The definitions of structural equivalence and covering can be found in [I]. Homomor- phisms 
between grammars are discussed in [17]. The corollaries and implications of Thm. 3.2 are too numerous 
to mention here. Many of them appear in [5]. Corollaries, which have not appeared before, include the 
following. Cor. 3.3: For all kal, it is undecidable Yif--a-n-~bitrary cfg is, is equivalent to, is structurally 
equivalent to, left (right) covers, or is left (right) covered by an FSPA(k), SLR(k,-), or LR(k,~) grammar. 
Moreover, it is undecidable, for an arbi- trary cfg G, if there is a surjective (sur- jective length-preserving) 
homomorphism from G to some grammar in F. [] Definitions of the FSPA(k), SLR(k,~), and LR(k,~) grammars 
appear in [14] and [15]. Cor. 3.4: It is undecidable if an arbitrary LR regular grammar is, is is equivalent 
to, is structurally equivalent to, left (right) covers, or is left (right) covered by a strong LL, 
LL, SLR, LALR, or LR grammar. Moreover, it is undecidable, for an arbi- trary LR regular cfg G, if 
there is a sur- jective (surjective length-preserving) homomorphism from G to some strong LL, LL, 
SiR, LALR, or LR grammar. [] The definition of the LR regular grammars can be found in [16]. Analogous 
corollaries hold for the linear cfgs and the cfgs generating boun- ded languages. Subrecursive analogues 
of rhm. 3.2 also hold. Let~(k) denote the intersection of the strong LL(k), SLR(k), and BRC(k,k) grammars. 
Then, for example, the following holds. rhm.~ 3.5:. Let F= k~l F(k) be any class of parameterized 
cfgs such that (i) for all kzl,~(k) c ~(k), and  (ii) F contains no inherently ambiguous  cfgs. Let 
p be any reflexive binary relation on the cfgs such that GpH implies L(G) = L(H). Then, (i) NP < {(G,~)IG 
is a cfg, ~ is a unary numeral ~ the positive integer n, and ~(GpH) for some HEr(n)}; and (2) there 
exist a constant c>0 such that any nondeterministic Tm that recognizes {(G,~)I G is a cfg, ~ is a binary 
numeral for the positive integer n, and ~(GpH) for some HEF(n)} makes more than 2 cn moves, i.o. [] 
Thm. 3.5 extends Thm. 2.6 in [4], where we showed that the conditions of Thm. 3.5 hold for the relation 
p defined by --GpH if and only if G = H. It is known [4] that there  131 exist relations ~ satisfying 
the condi- tions of Thm. 3.5 fer which the lower bounds of (i) and (ii) are obtained. Thus, the lower 
bounds of Thm. 3.5 are tight. Another problem area, where Thm. 2.3 yields results not previously obtainable 
is that of separability. Several recent pa- pers [14], [16], [18] have generalized the LR parsing technique 
by developing tech- niques, which rely on some sort of separa- ting sets to determine the local structure 
or context of a string being parsed. Def. 3.6: Let ~be a family of languages. Two languages L 1 and 
L 2 are said to be (i) ~separable if there exists a language S~ such that L 1 ~ S and L 2 n S = ~ ,-or 
L 1 n S = ~ "and L 2 5 S; and (ii) ~_ H-separable if there exist disjoint languages Si, $2~ ~ such that 
L 1 c S, and. L2 ~ $2" --[]I. Def. 3.7: A language L c Z * is said to be a ~--de~nite event if and only 
if there ex- ist finite sets~,B c Z* such that L = A'Z*UB; and (ii) generalized definite event if and 
only if there exist fi~i-te sets A, B, and C c Z * such that L = A'Z*'B C. Our next two theorems solve 
the decidability of separability for most clas- ses~of grammars and most classes ~of languages studied 
in the literature. Thm. 3.8: Let~be any family of language9 t~at contains all definite events. Let.d- 
be any class of grammars that contains all simple LL(1) grammars. Then, it is unde- cidable if the languages 
generated by two arbitrary grammars in~are~ or~H-sepa- Table. [] Thm. 3.9: Let~be any family of languages 
 t~at contain~ all generalized definite e- vents. Let.g#-be any class of grammars that contains all 
linear simple LL(1) grammars. Then, it is undecidable if the language~ generated by two arbitrary gram- 
mars inn areal or~H-separable. [] Thm. 3.8 extends results in [5]. Thm. 3.9 is new. Here, we only sketch 
the proof of rhm. 3.9. Let I = {(Xl, ... ,Xm) , (YI' ~'" 'Y~)} be an instance of a PCP satisfying The 
conditions of 2.14. Let G 1 be the linear simple LL(1) grammar -- S~iSi, for l}i~m, and Si~3Sjx i -_rev 
 x rev for l~i j~m. i '  Let G 2 be the linear simple LL(1) grammar -- S~iSi, for l~i~m, i. rev and 
Si~jSjy .Fee  Yi , for l~i, jim. If I has a solution, then L(Gi)nL(G2) ~ ~ ,- and L(Gi) and L(G2) are 
not ~or~ H-sepa- rable for any~. If I has no solutions, then L(G1) and L(G2) are separable by gene- ralized 
definite events. l'H-separability is named for Hausdorf separab41ity in Topology [19]. Finally, we 
note that the emptiness of intersection, the regular separability, and the definite event separability 
prob- lems for ~, the set of cfgs generating bounded languages, all require exponential time on nondeterministic 
Tms. 4. ~ Complexit~ Theory of Scheme Problems The Teachability problem and the theorems in Section 
2.3 can be used to de- velop a complexity theory of scheme, auto- mata, and simple programming language 
prob- lems. Variants of the Teachability problem underlie many of the known proofs of lower bounds or 
undecidability of these problems. Here, only program scheme problems are considered. We present several 
examples of how the Teachability problem can be used to derive uniform lower bounds for scheme problems. 
First, we consider single variable program schemes. Example 4.1: Let @ be the class of single earle 
program schemes. Let F denote the set of all Boolean forms in disjunc- tive normal form with exactly 
three lite- rals per clause. Let f~F. Let Sf be the scheme constructed as illustrated in Figure 5 below. 
Then, A is reachable in Sf if and o~ if f is}not a tautology. Let {Sflf~F f = Xl~2X 3 v x-~x3x 4 v 
... v xixjx k  . Figure 5  Prop. 4.2: (i) NP log {SJS~ and A is reachable }. _ (ii) {SISE (~and A 
is reachable}~NP. [] Thm. 4.3: Let~ be any predicate on @ for w~h'-t~re exlst single variable schemes 
~and 7r~such that, for all S~ , n [s,~ ) r(achab = if and only if gg is "z]ele True in [S,~,~]. Then, 
NP lug {SIS~8 and IT(S) = True}. [] Proof: Immediate from Thm. 2.|8 and Prop. Thm. 4.4: Let p be any 
relation on 0 such t~ ~-~ S" implies SpS', and SpS" implies ~(spsS_~ S'.j }.Then' NP log {(S,S')IS,S'E@ 
and[] Proof: Immediate from Thm. 2.|q and Prop. rFz:-[] 132  Cor. 4.5 [6]: The following languages 
are ~-comte te : (i) {S|SE@, S does not diverge for all in- terpretations};  (ii) {SJSE@, S does not 
halt for all inter- pretations};  (iii) {(S,S')IS,S'E@, S and S" are not iso- morphic}; (iv) {(S,S')IS,S'E@, 
S and S" are not strong- ly equivalent}; and  (v) {(S,S')[S,S'E@, S and S" are not weakly  equivalent}. 
[] Proof: Cor. 4.5 follows immediately from m~. 4.3 and 4.4. For example, for all SEE , [S,A.HALT,B.LOOP] 
does not diverge for all interpretations if and only if A is reachable in S. [] Another corollary of 
Thm. 4.3, that is not true for arbitrary sets of schemes, is the following. Thm. 4.6 [4]: Let p be any 
relation on @ su~ t~t S m S" implies SpS', and SpS" implies S m S'. Let S O be any non-diver- gent scheme 
in @. Then, NP ~ {SJSE@ and ~(SpS0)}. [] Proof: For all SEe , let~sbe the scheme ~/--~h (x) [C. HALT 
, where h is a function symbol not appearing in S O . Then, [S,%,S0]PS 0 if and only if A is not reachable 
in S. Since S contains no looping or function symbols, if A is not reachable ~n S, then [S,~,S0] ~ 
S O . Otherwise, [S,~s,S0] is not ~eakly equivalent to S O . ~ [] A version of Thm. 4.3 and a weaker 
version of Thm. 4.4 appears in [6]. [] Next, the multiple variable program schemes are considered. 
El~ae~vae 4.7: Let @ be the set of all mult- rl~le program schemes. Let @" be the set of all multiple 
variable program schemes that halt for all interpretations. If only Tms that always halt are considered, 
then the constructions in [3] satisfy the conditions of Thm. 2.3 and the resulting schemes halt for all 
interpretations. Let ~be the set of all such schemes. Then, the following is an immediate corollary 
of Thm. 2.3. tPro~ 4.8: Let f(n) be any recursive func- zon. -'~ M be any Tm such that M, when given 
$6~ as input, always halts and out- puts i, if A is reachabl~ in S, and 0, otherwise. Then, f(n)<tM(n 
) i.o. [] Thm. 4.9: (i) Let N be any predicate on^ ~'r-To~--Qhich there exist schemes 62. and ~ such 
that, for all $6~, IS, ~,~iE@" and N([S,~,~]) = True if and only if g4, is reachable in [S,g~,~]. Let 
M be any Tm such that M, when given SE@ as input, always halts and outputs i, if N(S) = True, and 0, 
otherwise. Let f(n~,be any recursive func- tion. Then, f(n)<t~ (n) i.o. (2) Let ~ be any predicate on 
@ fo K which there exist program schemes ~ and~ such that, for all SE C, N([S,~ ,~) = True if and only 
if g~is reachable in [S,~-,,~]. Then, it is undecidable, for $6@, if H(S) = True. [] Proof: Immediate 
from Thm. 2.18, an~rop. 4.8. [] Thm. 4.$0: Let p be any relation on @ such t~ ~--~--S" implies SpS', 
and SpS" implies S m S'. Then, it is undecidable, for S,S'E@, []  if SpS'. Proof: Immediate from Thm. 
2.1q , an~rop. 4.8. [] An analogous result holds for @" Co r. 4.11.-[3]: It is undecidable, for S,S'E@, 
iY (i) S diverges for all interpretations;  (ii) S halts for all interpretations;  (iii) S and S" 
are isomorphic; (iv) S and S" are strongly equivalent; and  (v) S and S" are weakly equivalent. [] 
A weaker version of Thm. 4.10 appears in [3]. [] The reachabilitv problem and theorems in Section 2.3 
apply to many other sets of program schemes such as monadic recursion schemes [20], parallel program 
schemes [9], and program schemes augmented with special  features, e.g. parallel primitives or spe- 
cial data structures. In our last example, we present a useful application of the reach- ability problem 
to program schemes augmented with parallel primitives. tEXa~ le 4.12: Let @i [~ he any class of ~ch~mes 
 ~ten~ the set of single [mu]tiDl~ variable program schemes by adding parallel primi- tives. Let ~ be 
any predicate on @i [@2 ] such that (i) H is true for all schemes in which no parallel primitives are 
executable for any interpretation, and  (ii) there is some scheme~@1 [@~] such that for any scheme containing 
g~i~ whlchg~,is reachable, ~ is false. Then,  (i) NP leg {SIS6@i and n(S) = False}, and  (2) It is 
undecidable, for S~@2, if N(S) = True.  One immediate easy corollary from the literature is the following. 
Thm. 4.13 [21]: It is undecidable if an ar- 5~i-~aFy program scheme (augmented as in[21]) is hangup-free. 
[] [] Bibliography  [1] A.V. Aho and J.D. Ullman, The The~ of Parsing, Translation, a~--Co~-piling, 
V~is.~d T~-P~r~-Ha~, Ingle-wood Cliffs, N.J., 1972 and 1973. [2] J.E. Hopcroft and J.D. Ullman, Formal 
Languages and Their Relation to-'ud~- mata, Addis~-W~'ir~y, Reading~--Ma~., YV6~7.  [3] D.C. Luckham, 
D.M.R. Park, and M.S. Paterson, On formalized computer prog- rams, JCSS 4 (1970), 220-249. [4] H.B. 
Hunt, III and T.G. Szymanski, On 133 the complexity of grammar and related problems, Pro(:. 7th Annual 
ACM Symp. on Th. of Comr~ti~,-~--f9~, ~F z-6-5-.  ] H.B. Hunt, II", A complexity theory of grammar problems, 
Conf. Rec. 3rd ACM Symp. on Principles~ Ram- ming Langu~e~L, Jan. 197~, [6] R.L. Constable, H.B. Hunt, 
III, and S. Sahni, On the computational comp- lexity of scheme equivalence, TR 74- 201, Dept. of Computer 
Science, Cor- nell University, Ithaca, New York.  [7] H.B. Hunt, III, On the complexity of finite, pushdown, 
and stack automata, to appear in Math. Systems Th. [8] N.D. Jones and S.S. Muchnik, Even simple programs 
are hard to analyze, Conf. Rec. 2nd ACM Symp. on Principles of Programm~n. ~ L~guages,-Tan. 1975, 106-118. 
 [9] R.E. Miller, :Some undecidability re- sults for parallel program schemata, SIAM J. Computing 1 (1972), 
119-129. [I0] D. Tsichritzis, The equivalence prob- lem of simple programs, J. ACM 17 (1970), 729-738. 
 [ii] Z. Manna, Program schemas, in Cur- rents in the Theory of Computing, ed~d-~y~.V.~,~entice-Hall, 
Englewood Cliffs, N.J., 1973, 90-142. [12] S.R. Kosaraju, Analysis of struc- tured programs, JCSS 9 
(1974), 232-255. [13] M.S. Hecht and J.D. Ullman, Flow graph reducibility, SIAM J. on Com- puting 1 
(1972), 188-~. [14] T.G. Szymanski, Generalized bottom- up parsing, Ph.D. Thesis, Cornell University, 
Ithaca, New York, May 1973. [15] T.G. Szymanski and J.H. Williams, Non-canonical extensions of bottom- 
up parsing techniques, to appear in SIAM J_~_ on C_.2mputing. [16] K. Culik and R. Cohen, LR-regular 
grammars --an extension of LR(k) grammars, JCSS 7 (1973), 66-96. [17] E. Bertsch, A decidability result 
for sequential grammars, in Auto- mata, Languages, and Pro~rammin$, edited by J. Loec x~, 1974, 577-583. 
 [18] C.N. Fischer, On parsing context-free languages in parallel environments, Ph.D. Thesis, Cornell 
University, Ithaca, New York, April 1975. [19] J.L. Kelley, General Topology, Van Nostrand, New-n,--1955. 
 [20] S.J. Garland and D.C. Luckham, Program schemes, recursion schemes, and formal languages, JCSS 7 
(1973), 119-160. [21] B.P. Lester, Program schemas with concurrency: execution time and hangups, Conf. 
Rec. 2nd ACM Symp. on Princi~leso~P~grammlng Tang~eT, Jan. 1975, ~5-193. 134    
			