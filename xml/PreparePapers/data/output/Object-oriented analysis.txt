
 OBJECT-ORIENTED ANALYSIS Sara F. Stoecklln Computer Science Department Florida A&#38;M University Tallahassee, 
Florida Evans J. Adams and Suzanne Smith Computer Science Department East Tennessee State University 
Johnson City, Tennessee i. STATEMENT OF THE PROBLEM Since its introduction in the early seventies, 
structured analysis and design has evolved into a widely used systematic, phase-by-phase software development 
methodology. Structured analysis and design provide data flow diagrams as the structured analysis tool, 
structure charts as the design tool, and transform analysis and transaction analysis as the transitions 
from data flow diagrams to structure charts. The intent of structured analysis is to decompose the system, 
functlon-by-functlon, until the "essence" of the system is understood [6] and depicted in data flow dlagrans. 
The intent of structured design is to determine programs and modules for system implementation. Structured 
analysis and design have yielded substantial life-cycle benefits for systems implemented using conventional 
languages such as Cobol and Fortran. However, features of obJect-orlented languages such as Ada and Modula-2 
(i.e. , packages, generics) are not fully exploited when software is developed using structured design 
techniques. Booth [I] has devised a partial llfe cycle method for object-orlented design. However, no 
tool presently supports object-orlented analysls. Moreover, no formal transition technique has been developed 
to allow the software engineer to use the traditional structured analysis techniques coupled with object-orlented 
design. 2. BACKGROUND In recent years, graphical tools for structured analysis and design have been 
developed to aid the software engineer in software development. Some of the modeling tools used in structured 
analysis include the context diagram [7], logical data flow diagram [5], event llst [3], and entity 
relationship (ER) diagram [2]. The context diagram provides a view of how the outside world interacts 
with the system while the logical data flow diagram provides a view of how the functions of the system 
interact with the system's data. The event llst is a llst of the system's actions which affect the system's 
processlng. This llst can be  COPYRIGHT 1988 BY THE ASSOCIATION FOR COMPUTING MACHINERY, INC. Permission 
to copy without fee all or part of this material is granted provided that the copies are not made or 
distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is 9iven that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. stated in a 
standard sentence format with a subject, verb, and direct object. An ER diagram can be derived from event 
llst by defining the subjects and direct objects as entities and the verbs as relationships between the 
entities. An entity is "some individual item of interest in the problem domain" [9] , and the ER diagram 
is a network which depicts how entities of the system are interrelated. The context diagram and logical 
data flow diagram graphically depict the dynamic interrelationships of processes and data for the system. 
The ER diagram graphically depicts the static nature of the major entities of the system and their respective 
interrelationships.  3. OBJECT-ORIENTED ANALYSIS TECHNIQUES This article summarizes research which 
has defined a methodology which provides a systematic method for performing the transition from structured 
analysis to object-orlented design [8] . This object-orlented methodology uses the traditional steps 
of structured analysis to derive the essential system [6], provides the transition to object-orlented 
design, and specifies object-orlented design units. Section 2 identifies the structured analysis tools 
used in this methodology. Transformations based upon the logical data flow diagram and ER diagram yield 
the transition technique from analysis to design. Visibility matrices and modular design charts [i0] 
define object-orlented design unlts. Figures I, 2, 3, and 4 contain the context diagram, logical data 
flow diagram, event llst, and ER diagram, respectively, for the video rental system example [4] which 
is used to illustrate the main principles of object-orlented analysis.  3.1 Entity Cate~orles The ER 
model provides a static view of a system. This static view is a building block for the data abstra c 
tlon o f object-orlented design. The usefulness of the ER diagram is that it provides a frame of reference 
for identifying the objects of the ob]ect-orlented design. However, not all entities from the ER diagram 
will become objects in the final design. In order to derive the objects from these entities, the entities 
must first be categorized.  The following entity categories have been identified [8]: I. external entities, 
 2. internal entities,  3. user-vlew entities,  4. dependent entities, and   5. identifiable entities. 
External entities are the terminators on the context diagram which do not "own" any data in the problem 
domain. Internal entities, in contrast, are the terminators on the context diagram which do "own" data 
in the problem domain. In other words, the internal entities require data definition within the scope 
of the system while the external entities do not. User-vlew entities are those entities which present 
a "view",i.e., a report or screen, to the user. A dependent entity is an entity which has little significance 
to the system alone and must be associated with another entity for identification. An identifiable entity 
is an independent system element. Table 1 lists the categories of entities derived from the ER diagram 
in Figure 4. ENTITY CATEGORY customer external entity member identifiable entity movie identifiable 
entity overdue notices user-view entity company external entity movie order user-vlew entity bank deposit 
user-view entity rental form user-vlew entity payment dependent entity Table 1 -Categorized Entity Table 
 3.2 Mappin$ Cate$orized Entities onto Objects At this point in the development process, the entities 
which are derived from nonautomated events are eliminated from further consideration in a two-step process 
using the logical data flow diagram (see Figure 2) and the ER diagram (see Figure 4). First, automation 
boundaries are established for the system on the logical data flow diagram. For our example, the nonautomated 
processes are "order new movie" and "prepare bank deposit". The events which produced these two processes 
will not be automated, hence their associated entities (bank deposit and movie announcement) are eliminated 
from further consideration. Other processes and perhaps objects may need to be created to support these 
nonautomated processes. In our example there are two supporting processes and objects which must be 
created, namely "create movie listing" (P8) and "llst daily payments" (P9) in Figure 5. The new objects 
created as a result of these new processes are "movie listing" and "payment listing". Both are user-vlew 
objects denoted by dotted rectangles. The remaining automated entities,  which are not external entities 
or dependent entities, are the objects for the object-orlented design. The external entities are excluded 
from the design since they are not part of the problem domain, and the dependent entities are excluded 
 since they are represented in the design by the objects upon which they are dependent. Based upon this 
analysis, the objects for our example are member, overdue notice, movie listing, payment listing, rental 
form, and movie.  3.3 Establishing Visibility The next step in this methodology is to establish the 
visibility of the objects [ 1 ] . This visibility is the interdependence among objects as dictated by 
their respective operations. The purpose of this step is to illustrate the scope of control and scope 
of effect of the input and output data. The goal of establishing visibility is to provide the limited 
visibility among operations necessary to make the operations loosely coupled. Visibility is determined 
from the input and output data flows associated with an operation as seen on an Object/Operatlons Data 
Flow Diagram (OODFD) (see Figure 5) [8]. The OODFD is a transformation of the logical data flow diagram 
based upon the objects derived from the ER diagram. The OODFD is derived from the processes and data 
flows from the logical data flow diagram augmented with the objects determined as the identifiable, user-view, 
and internal entities from the ER diagram. The OODFD also distinguishes the user-vlew objects, which 
are now identified as secondary objects, from the identifiable and internal objects, which are now identified 
as primary objects. The OODFD uses conventional data flow diagram symbols for the operations (processes) 
and data flows while the primary objects are denoted by a rectangle, and the secondary objects by a dotted 
rectangle. The data flows between objects and operations on the OODFD illustrate the required visibility 
of the Interconnections between objects and operations. Using the OODFD as a guide, visibility matrices 
(see Figures 6-9) are created to provide a concise representation of the dependency among the objects 
and their operations [8]. The visibility matrices are useful in creating modular design charts [I0] or 
Boochgrams [ 1 ] and in resolving problems such as circular dependency and improperly categorized objects. 
A primary visibility matrix (see Figure 6) is created by depicting the operations on the y-axis, and 
the primary objects on the x-axls. A secondary visibility matrix (see Figure 7) is created by again depicting 
the operations on the y-axls, and the secondary objects on the x-axls. The data flows between objects 
and operations on the OODFD are denoted as intersections on these visibility matrices. The primary visibility 
matrix is useful for the detection of improperly categorized objects. Improperly categorized objects 
include objects which were derived from mislabelled entities on the categorized entity table (see Table 
i). The following scenario based on the video rental system example illustrates the detection of such 
a problem by means of the primary visibility matrix. An entity called "customer" is identified on the 
ER diagram and is categorized as an identifiable entity. Figure 8 shows the primary visibility matrix 
with this additional object included. All of the processes with intersections to the object "member" 
on Figure 8 also have intersections to the object "customer" This consistent intersection is due either 
to one of the objects being a dependent object or to the two objects being circularly dependent. In this 
scenario, the objects "member" and "customer" are defined in the problem domain by the same information; 
therefore, they are combined making "customer" dependent on "member". There are instances in which objects 
do not share all same information in the problem domain but do share enough common information to allow 
the objects to be combined. The principle of modularity prohibits the combination of objects which do 
not share significant information.  3.4 Resolution of Circular Dependency Another benefit of the primary 
visibility matrix is that it delineates circular dependency within a system and then provides a means 
of viewing alterative solutions to the problem. Circular dependency occurs when an operation depends 
on more than one object in the primary visibility matrix. Circular dependency is a problem because program 
units (i.e. , packages, subprograms) may not use objects of another program unit which have not been 
defined (i.e., compiled). If two or more program units depend on the other's definition (i.e., compilation), 
then a circular dependency exists. To eliminate circular dependency, one of the program units must be 
freed of that definition dependence. The elimination of circular dependency is achieved through either 
moving the definition of operations to one object, combining the definitions of the objects in question, 
or creating new objects. The primary visibility matrix provides a clear view of circular dependency. 
Circular dependency is present in a system where any operation intersects on the primary visibility matrix 
with more than one primary object. In our example, the operations which present a circular dependency 
problem are "check in movie", "check out movie", and "review for overdues" since these operations intersect 
with both "movie" and "member" on the primary visibility matrix in Figure 6. Upon discovering the circular 
dependency, matrices can be created which depict possible solutions for dependency resolution (see Figure 
9). The circled intersections represent the resolved mapping from the primary objects to the operations. 
 After creating a resolved primary visibility matrix (i.e., one that contains no circular dependency) 
, the secondary visibility matrix is created. The secondary visibility matrix maps the secondary objects 
to their respective operations and, therefore, provides an indirect mapping to their respective primary 
objects. In Figure 7, the secondary object "overdue notices" is mapped to the operation "review for overdues". 
Using the resolved primary visibility matrix in Figure 9, the operation is then mapped to its primary 
object "member". The secondary visibility matrix is used to produce the I/0 design units whether these 
units are independent units or incorporated in the units of the primary objects. Modular design charts 
[I0], depicting the overall software architecture of the modeled system, are then created from the 
 resolved primary visibility matrix. An object can be modeled as an abstract data type in Ada. The 
operations which intersect with that object become operations of the abstract data type. Figure i0 
presents the modular design charts for the video rental system example.  4. CONCLUSION As development 
of object-oriented systems becomes more prominent, more relationships between the tools used in structured 
analysis and the techniques necessary to derive object-orlented design will be recognized. This paper 
presents a preliminary view of these relationships. Further research is required to observe the usability 
and comprehensiveness of this methodology in the software development life cycle. REFERENCES 1 Booch, 
G . , "ObJ ec t-Oriented Development," IEEE Transactions on Software Engineering, Vol. SE-12, No. 2, 
February 1986. 2 Chen, P., "The Entity Relationship Model --Toward a Unified View of Data," ACM Transactions 
on Database System, March 1976. 3 DeMarco, T., Structured Analysis and System Specifications, Yourdon 
Press, New York, 1978. 4 Echols, S., How to Design and Develop Business Systems, Mike Murach and As- 
sociates, Fresno, California, 1978. 5 Gane, C. and Sarson, T., Structured Systems Analysis: Tools and 
Techniques, Prentice-Hall, Englewood Cliffs, New Jersey, 1977. 6 McMenamin, S.M. and Palmer, J.F., Essential 
Systems Analysis, Yourdon Press, New York, 1984. 7 Mellor, S.J. and Ward, P.T. , Structured Development 
of Real-Tim~ Systems, Yourdon Press, New York, 1986. 8 Stoecklin, S., An Object Oriented Methodology 
for the Development of Softwar~ Systems, Master's Degree Thesis, East Tennessee State University, July, 
1987. 9 Stark, M. and Seideweitz, E., "Towards a General Object-Oriented Ada Lifecycle," Goddard Space 
Flight Center, March 1987. 10 Wiener, R. and Sincovec, R., Software En~ineerin~ with Modula-2 and Ada, 
John Wiley and Sons, New York, 1984.  CONTEXT DIaGRaM UIDEO RENTAL SYSTEM LEVELED EPENT LIST QIDEO 
RENTAL SYSTEM /-._~ t~\'~"# ~a~ . n~" ~1) FILM 1 ISTRIBUTOR I ~r/~o~i~ ~ ,~ annottn~enents ~/'4/I bank%8 
~.si t 1. 2. 3. 4, 5. 6. Customer ~equest to Be a member HeMber rents movie (a) MeMber ~equests ~ovie 
(b) Compan9 issues ~embe~ rental movie (c) Membe~ pags rental paNment (d) Rental £o~ms issued to membe~ 
Overdue notices sent to member Member retuPns Rovie Compan9 places movie orde~ (a) Distributor sends 
new movie (b) Distributov sends movie announcements (c) New movie ordered £~om film distNbuto~ Company 
makes bank deposit FI GIIRE 1 FIGIIRE 3 LOGICflL I)NTA FLOH DIAGRAM .... m me~dt~shi P ,~ ~n~ai lot s 
applichtion venti~l I ~ovie_request~ movie ~ ..... " "=~e hbe P "-Z..;;---L ~. rent~,J, car~'~, f FI 
ENTITY RELATIONSHIP DIAGRAM UIDEO RENTAL SYSTEM movie I, ,,",...... ~ ./ ~ -7 ,,movie ) 2°~ e I ,~ ',. 
~, ., ~owe pa~eii',,t ~a~. depos i t FIGURE 2 FIGURE 4 OBJECT/OPERATIOM DATA FLOH DIAGRAM SECOHDARV 
VlSlRILITV MATRIX ,3, l  / +)x-,..J/ FIGURE 5 ENROLL NEW MEMBER CHECR OUT MOVIE CHECR IN MOVIE REVIEH 
FOR OVERDUES *I LIST DAILY PAYMENTS RECORD NEH MOVIE CREATE MOVIE LISTING FIGURE 7  PRIMARV VISIBILI?V 
MATRIX PRIMARV VlEIBILIIV MAIRIX IROLL HEH MEMBER *I ENROLL NEH MEMBER IECR OUT MOVIE CtlECR OUT MOVIE 
HECR IM MOVIE CHEC~ IN MOVIE EVIEH FOR OVERDUES * REVIEH FOR OVERDUES IST DAILY PAYMEHIE LIST DAILY PAVMEMI$ 
ECORD MEN MOVIE * RECORD NEH MOVIE REnTE MOVIE LISIING * FIGURE 6 CREATE MOVIE LISTING FIGURE 8 VISIBILITY 
MATRIX --VIDEOREHTALSYSTEM RESOLVED ~ROLL NEH MEMRER ® tEC~ OUT MOVIE IECR IH MOVIE *~) EUIEH FOR OVERDUES 
IST DAILY PAVMEHTS *® ECORD HEH HOV]E REATE MOVIE ISTINC FIQURE MODULARDESIGN CIIART MOVIE MEMBER [] 
 Pecord new enPoll new check out ~ovie ~eate Movie check in ~ovielisting review fo~ ovePdttes list ~aily 
payments produce rental forms J VIDEO | |i' RENTAL ~,-~ SOFT~ARE BUS FIQURE I0 
			