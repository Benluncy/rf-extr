
 Tutorial Formal Methods in the First Course by Douglas R. 7beger Department of Computer Sciences The 
City College of New York Convent Avenue at 198th Street New York, New York 100.91 Content Indimtion and 
Taqet Audiencz. The firat course in computer science at City College (CSC 102) was successfully restructured 
in 1990 ss an introduction to problem solving and programming, bssed on the methodology of Floyd, Dijkstra, 
and Hoare. The main goals of the new version of the course are to develop students skill in designing 
programs, and to equip students with logical tools enabling them to explain how and why their programs 
work. The course has enjoyed the support of the National Science Foundation since 1991. This tutorial 
is based on the introductory modules of CSC 102, and is intended for those seeking a selfÂ­contained introduction 
to the Floyd-Dijkstra-Hoare approach to programming. The pedagogical structure of the modules will be 
discussed as well, and the tutorial should also be of interest to those wishing to explore the incorporation 
of these idess into their own beginning programming courses. Context: The Introduction of Fomnal Methods 
in CSC 102. Programming is presented from the beginning as a process of moving back and forth between 
specification and code, where a specification consists of informally stated pre and peat-conditilons. 
We prevent this horn degenerating to the usual guess, test, guess again, test ... style of program development 
by sharing with students the simple yet remarkably useful idea that the meanings of program variables 
ought to be precisely defined. These definitions arise in the course of developing a design idea for 
a program, and are then kept at the front of the mind during the refinement process: one always asks 
(i) what must I do to keep the definitions true? , and (ii) are the definitions I have really as useful 
as I thought? Thus one obtains a rudimentary guide to programming rather than adjusting code on an ad 
hoc bssis, one adjusts it systematically, with an eye towards maintaining the intended representational 
roles of the program s variables. The complexity of problems to which this technique is usefully applied 
in the classroom setting is limited only by the students preparation in logic. Taking the view that programming 
is an excellent way to teach logic, we gradually increase the difficulty of our examples and exercises, 
pausing to explain the necessary logic as we go. By term s end, students are making informal but essentially 
full-blown use of the assertion-based (invariant) methodology on programs involving arrays, procedures, 
and functions. l%torial Outline. We focus on the first part of CSC 102, showing the development of simple 
while pr~ grams from variable definitions, the transition to programming with intermediate assertions, 
and the use of invariants in the development of a few more involved programs. Pedagogical aspects of 
presenting this material will be discussed as well, with special emphasis on the ~ust in time use of 
logic. Participants will be provided with materials (notes and laboratory/homework exercises) selected 
from those used in CSC 102. 378
			