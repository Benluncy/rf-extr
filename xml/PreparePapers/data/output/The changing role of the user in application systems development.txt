
 THE CHANGING ROLE OF THE USER IN APPLICATION SYSTEMS DEVELOPMENT Ilene V. Kanoff Keith E. Ickes Senior 
Consultant University Registrar Peat, Marwick, Mitchell &#38; Co. Cornell University 345 Park Avenue 
Ithaca, New York 14853 New York, New York 10154 (607) 256-6218 1:212) 758-9700 Abstract User participation 
in developing application systems has evolved rapidly over the past ten years. The user's role has changed 
from a passive one, with little or no involvement in data processing and computer technology, to that 
of an active partner in designing and successfully implementing a system. In this paper, the authors 
examine the changing extent of user involvement, the effect of this involvement on user and data processing 
organizational structures and systems development techniques, and the outlook for the future. By exploring 
the pros and cons of this expanded interaction between user and data processing personnel, the authors 
show that, for the most part, this symbiotic relationship benefits both the institution and the quality 
and success of the application systems. The authors cite past and present experiences of users and data 
processing professionals in application systems development. The authors themselves have recently worked 
on a joint application system development project. Background Historically, data processing professionals 
and users have had almost a parent- child relationship. Data processing professionals, with their often 
difficult-to-understand terminology and acronyms, used the technology to keep users dependent on them 
to develop application systems. As if they had knowledge which users could not comprehend, data processing 
professionals managed, and to some extent still manage, to relegate the user to a submissive and passive 
Permission to copy without fee all or part of this material is granted provided that the copies are not 
made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. &#38;#169; 
1982 ACM0-89791-088-5/82/011/0010 $00.75 role in systems development. "Users may be seen but not heard" 
was clearly the rule of the past: data processing people advocated this rule and users, for the most 
part, accepted it. As a result, application systems were developed with little or no user participation. 
Data processing professionals alone did system requirements definition, design, development and implementation, 
instructing users to "let data processing handle this complicated job." Although the resulting systems 
might have functioned well technologically, users seldom got what they needed to manage their operations. 
This situation, for the most part, left users frustrated, and they often used the systems reluctantly 
or not at all. Even when users voiced their concerns to data processing departments they were met with 
a barrage of technical jargon which they were afraid to confront. It seemed that neither side was willing 
to change. Today, however, application systems development has evolved to allow a more equitable role 
for both data processing professionals and users. Many factors contribute to this new relationship. However, 
three new concepts, in particular, have altered the way data processing professionals and users interact: 
 Technology awareness -hardware and software developments have affected data processing and users. 
 User dynamics -understanding user taxonomy helps systems designers apply that knowledge to determine 
how much users should be involved and what kinds of services they need.  Change management -recent approaches 
to introducing change allow smoother systems implementations.  Tech nology Awareness A typical computer 
application system implemented about ten years ago basically used batch processing. Users had only superficial 
contact with the technology, which data processing departments controlled. Users submitted data into 
and received output from the system but did not directly interact with it. Response time was measured 
in days, so even when something went wrong it was often easily resolved by either party without a personal 
confrontation. This situation allowed greater tolerance for error at the expense of timely information. 
Today, on-line application systems are standard in most organizations. Technology has emerged from the 
back room to the "firing line". Users rely on terminals with instantaneous feedback to manage their operations 
and can get results in seconds instead of days. They can now judge whether or not the system is functioning 
effectively and meeting their needs. In effect, users now "run" the system. Another factor in increased 
user involvement, is that experienced users are now in the midst of their second, third, or fourth systems 
development project. They have, at least, some "computer savvy" learned from an application system which 
may or may not have worked for them in the past. This experience leads them to increase both their information 
requirements and their unwillingness to sit back and watch a potential system failure in the making. 
Not only are these technological changes happening within organizations, but information about computer 
hardware and software is appearing virtually everywhere. Although they were once relegated to technical 
journals and specialized publications, advertisements and articles about computer technology may now 
be found in newspapers, popular magazines, radio and television. It is difficult to ignore this technology 
invasion, which some predict will result in "a computer in every home." In addition, new software developments 
will begin to make it possible for users to develop their own applications. Where once computer systems 
were written in highly structured languages, such as PL/I and COBOL, nonprocedural languages are evolving 
to either supplement or replace the formal ones as application development tools. These new languages, 
some believe, will increase user participation, since users are the primary beneficiaries of these products. 
Purchased software packages, as well, require less participation from data processing departments and 
more from users, who must now help evaluate, select and implement them. User Dynamics One factor hindering 
increased user participation in developing application systems is the narrow classifications into which 
data processing professionals try to put all users. This pigeonholing adversely affects how they interact 
with users, especially in creating viable project team structures. For example, Couger (1981) has given 
us the "carnivorous (user) manager." Synnott and Gruber (1981) have expanded upon that to include the 
categories of "passive", "overly active", and "semi-informed" users. But the data processing attitude 
was perhaps best summed up by a systems engineer for a large mainframe company when he referred to "dangerous" 
users. In past system development efforts, the predominent user type was "passive." This individual, 
who may have been a manager, often presented his or her information needs to data processing but retreated 
when confronted with either technical terminology or delays beyond reasonable expectation. Consequently, 
this user became disenchanted with data processing. Currently, while the "passive user" might still exist, 
some have evolved into other user types which are coming to dominate the new user taxonomy. We suggest 
that several new user categories may be identified, many simply reflecting a movement for increased user 
involvement in systems development. These include: 12 Â° Micro-users Experienced users  Advised users 
 Organized users  Micro-users, a relatively new but expanding class, are primarily interested in personal 
systems. These individuals, if successful in their endeavors, may in the future resist centralized application 
systems development. Experienced users have participated in developing and implementing many application 
systems using various technologies. As discussed previously, this group is unwilling to "sit on the sidelines". 
In addition, because they are highly experienced, many organizations hire them precisely to participate 
in a systems development effort. Advised users, while they have limited experience in developing application 
systems, recognize the need to engage experienced professionals to assist them. They often hire outside 
consulting services which supply people with the needed skills for a project. Finally, Organized users 
are creating "user networks" which share data processing information and resources including training, 
developing and maintaining standards and "programming" support (Dotson, 1982). These networks may lead 
to the "information center" concept which is currently receiving wide recognition as an organization 
for developing and implementing the applications users want. Change Management The way in which an application 
systems project is introduced can profoundly influence its chances of success or failure. Resistance 
to technological change, as Gerald Zaltman and Robert Duncan point out in Stratesies for Planned Change 
(1977), comes from the "inability to understand the technology involved, the absence of the necessary 
technical skills, lack of good communication systems and distrust of outsiders who demonstrate or explain 
the application of the technology." Generally, an organization will resist change most if management 
is not fully committed to the project, if users are not sufficiently informed, and if the new technology 
is too advanced for that organization. Those who are most directly affected by a new system, express 
the most reluctance to change, not surprisingly. Zaltman and Duncan, as well as others, have identified 
strategies for dealing with this problem. Some approaches, while successful in the short run (e.g., the 
system gets implemented), may be quite unsuccessful in the long term and inhibit future system development 
efforts. These "power strategy" or "bulldozer approach" techniques prevailed during early systems development 
projects where data processing organizations imposed a particular system design on an unwilling user 
group. Data processing professionals adopted a "winning through intimidation" (Ringer, 1974) attitude, 
and users felt coerced into accepting a system which they did not want. No one really benefitted. On 
the other extreme, some researchers advocated a "participatory approach" or "persuasive strategy" for 
introducing change through joint data processing and user participation. Enid Mumford and Don Henshall 
advocate this approach in A_ Participative Approach to Computer Systems Design (1979). All change involves 
some conflicts of interest. To be resolved, these conflicts need to be recognized, brought out in the 
open, negotiated and a solution arrived at which largely meets the interests of all parties in the situation. 
Differences of interest will not be confined to management and subordinates but will occur between employees 
at different hierarchical levels as shown by grading systems, and in different functions. Therefore successful 
change strategies require institutional mechanisms which enable all these interests to be represented, 
and the participative design group which consists of representatives of all the different groups in a 
department will fulfill this function. This argument requires one other element for it to be valid. This 
is the members of the representative design group have an excellent relationship with their constituencies 
and are viewed as being well able to represent the interests of these." The Mumford-Henshall method, 
while time consuming, can help make everyone --data processing professionals, users, and an organization 
--satisfied with a new system. Project Experiences The technological, user and change management factors 
previously mentioned all contribute to the increased involvement by users in an application systems "life 
cycle". The most radical shift has occurred in defining requirements, where users and data processing 
professionals now function as equals. The authors were recently involved in a large systems application 
project. While it did not use a true "participative approach", the project employed a full-time key user 
and a data processing professional as co-project leaders. It is interesting to note that the user project 
leader participated in selecting the data processing project leader and had an option to reject "unsatisfactory" 
candidates. This opportunity enhanced project team cohesiveness and communication. As a third key participant, 
the team engaged a member from a major consulting firm. This professional functioned as a catalyst during 
requirements definition, and helped shorten that systems development stage. All three team members had 
significant development experience related directly to the project's objectives. During the requirements 
stage, project team members jointly documented the technology and function of the current computer system, 
determined processing requirements for the new system and developed a phased implementation plan including 
a timetable and resource estimates. As they moved into the next development stage, the project team became 
two teams. The user and data processing co-project leaders kept their equal roles, but now also directed 
other individuals participating in the project. The data processing team now included programmers and 
technical support personnel and the user team included personnel assigned to testing, training and documentation. 
Project management and communication, for the most part, continued to be between the two project leaders 
and their managers. Team structure remained the same throughout the project but with varying amounts 
of user and data processing participation. Selected data processing and user personnel with specific 
technical and functional skills were used as needed. Most inter-team conflicts were not between the project 
leaders, but the result of outside problems. For example, one project leader could commit money and people 
to meet project requirements while the other could not. The two leaders resolved this imbalance somewhat 
by advocating the same development approach. However, although the two came to a good understanding of 
user information needs, the data processing team leader could not bring the needed resources to the project. 
Overall, the project team's structure and composition proved highly successful in developing an application. 
This example illustrates a change in group dynamics that occurred because data processing professionals 
and users communicated, realizing that past efforts were financially and functionally unsuccessful. Data 
processing professionals throughout the industry are beginning to view users as clients they must serve, 
focusing on business solutions. In addition, where once data processing professionals inundated users 
with technical terms, they are now explaining the information to them more clearly and acquiring "business" 
skills from them. Users, on the other hand, are realizing that they need to play a responsible role in 
a project team with data processing professionals instead of an antagonistic one. As users acquire technical 
skills, their involvement had also helped reduce their belief that systems are developed "magically". 
Conclusion Our experience has been that significant user participation in application systems development 
undoubtedly makes a project more successful. Getting users involved means better systems, satisfied users, 
satisfied data processing departments and possibly, lower costs for an organization. Perhaps the most 
dramatic change has occurred in the user community, but the benefits will be realized by the entire organization. 
In effect, the parent has become more supportive and the child is growing up. Notes and Bibliography 
The authors wish to express their appreciation to Janet Lewis from Peat Marwick who helped edit the article. 
Couger, J. Daniel, "The Project Manager: Kingpin in Personnel Motivation", Computerworld/Extra, 1981, 
p.55. Dotson, Tracy, "The Information Center: Fast Backlog", Computerworld/In Depth, 1982, p.27. R elief 
from Pr ogramming Mumford, Enid Systems Design, and Don Henshall, A Participative New York: John Wiley 
&#38; Sons, 1979. Appr oach to Computer Ringer, Robert J., Winning Through Book Publishers Co., 1974. 
Intimidation, Los Angeles: Los Angeles Synnott, William R. and William H. Gruber, Information Resource 
Management, New York: John Wiley &#38; Sons, 1981, p.98. Zaltman, Gerald and Robert Duncan, Strategies 
for Planned Change, New York: John Wiley ~, Sons, 1977. 
			