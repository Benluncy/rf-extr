
 An optimal algorithm for checking regularity (Extended Abstract) * Y. Kohayakawa V. RSdl t L. Thoma 
§ Abstract We present a deterministic algorithm .4 that, in O(m 2) time, verifies whether a given m by 
m bipartite graph G is regular, in the sense of Szemerddi [18]. In the case in which G is not regular 
enough, our algorithm outputs a witnessto this irregularity. Algorithm .4 may be used as a subroutine 
in an algorithm that finds an ¢-regulax partition of a given n-vertex graph F in time O(n2). This time 
complexity is optimal, up to a constant factor, and improves upon the bound O(M(n)), proved by Alon, 
Duke, Lefmann, RSdl, and Yuster [1, 2], where M(n) = O(n ~'sv6) is the time required to square a 0-4 
matrix over the integers. Our approach is elementary, except that it makes use of linear-sized expanders 
to accomplish a suitable form of deterministic sampling. Introduction and the Main Result  Szemerddi's 
regularity lemma [18] is a fundamental re- sult in graph theory (see [15] for an excellent sur- vey). 
Roughly speaking, this lemma states that any graph admits a partition of its vertex set so that most 
pairs induce 'pseudorandom' or regularbipartite graphs. The original proof of the regularity lemma was 
non-constructive, but Alon, Duke, Lefmann, RSdl, and Yuster [1, 2] succeeded in developing a fast determin- 
istic algorithm for finding such a partition. Many of the existential results based on the regularity 
lemma could then be turned into algorithmic results. The al- gorithm in [1, 2] finds a regular partition 
of an n-vertex graph in O(M(n)) deterministic time, where M(n) = O(n 2"a7~) (see [7]) is the time required 
to square a 0- 1 matrix over the integers. More recently, Frieze and Kannan [9] (see also [10]) showed 
that sampling can first author was partially supported by MG'T/CNPq through ProNEx Programme (Proc. CNPq 
664107/1997-4), by CNPq (Proc. 300334/93-I and 468516/2000-0), and by FAPESP (Proj. 96/04505-2). The 
second author was partially supported by NSF Grant 0071261. The third author was partially supported 
by NSF grant DMS-9970622. The collaboration of these authors is supported by a CNPq/NSF cooperative grant. 
tIrmtituto de Matemgtiea e Estatfstiva, Universidade de S~o Paulo, Rua do MatZo 1010, 05508-900 S~Lo 
Paulo, Brazil. yoshi@ime.usp.br tDepartment of Mathematics and Computer Science, Emory University, Atlanta, 
GA 30322, USA. rodl@mathcs.emory.edu §Department of Mathematics, University of Rhode Island, Kingston 
RI 02881, USA. thoma@math.uri.edu be used to develop a O(n) time randomized algorithm that, given an 
n-vertex graph G, outputs a partition for G that is regular with high probability. In both algorithms 
above (and in all algorithms for variants of the regularity lemma), the main algorith- mic problem is 
to decide whether a given m by m bi-partite graph G is regular; if G is not regular, we axe required 
to find a 'witness' for this irregularity. In this extended abstract, we present a deterministic algorithm 
that solves this problem in O(m 2) time. This algorithm immediately gives an algorithm for Szemerddi's 
regular- ity lemma that finds a regular partition of an n-vertex graph in time O(n2). A key feature of 
our approach lies in the use of linear-sized expanders for carrying out a certain procedure that may 
be thought of as determin-istic sampling. 1.1 The main result. Let G = (V1,V2;E) be a bipartite graph. 
If O # U~ C V~ (i = 1, 2), the density of (U1, U2) in G is d(U1,U2) --e(U1, U2)/IUltlU21, where we write 
e(U1,U2) for the number of edges with one endpoint in /]1 and the other endpoint in U2. We say that G 
is c-regular if, for all Ui c 1I/ (i = 1, 2) with ]Uil _> civil, we have (1.1) Id(U1, V2) - d(V1, V2)I 
<_ s. If G is not e-regular and a certain pair (U1, U2) certifies this fact, then we say that (U1,U2) 
is a witness to the c-irregularity of G. If F = (If, E) is a graph and V = [J~=l Vi is a partition of 
V such that [[V~ I -IVj[~ < 1 for all-i and j, then we say that the partition (V~)i:__ ~ is an ,- gular 
p tition for r if > (1 pain W,,Vj), where 1 < i < j < k, are e-regular. We say that a pair (U, W) is 
c-regular if the bipartite graph induced by (U, W) is e-regular. Szemerddi's remarkable result may be 
stated as follows. THEOREM 1.1. For any c > 0 and any ko ~ 1, there is K0(¢, ko) such that any graph 
F admits an e-regular partition into k parts for some k satisfying ko ~ k < Ko(c, ko). The algorithmic 
version of Theorem 1.1, due to 278 Alon, Duke, Lefmann, RSdl, and Yuster [1, 2], may be stated as follows. 
TIIBOREM 1.2. There is a deterministic algorithm `40 that, given ~ > O, ko >_ 1, and F, produces an s-regular 
partition for F ~nto k parts for some k satis-lying ko <_ k <_ K~, where K~ = K~(~,ko) depends only on 
~ and ko. Moreover, algorithm .Ao runs in time ) = O&#38; 3 6) if r has vertices. Consider now the following 
closely related decision problem. PROBLEM. Given a graph G, a pair (U,W) of non- empty, pairwise disjoint 
sets of vertices of G, and a positive s, decide whether (U, W) is z-regular with respect to G. As it 
turns out, the problem above is coNP-complete [1, 2]. However, as observed already in [1, 2], to prove 
Theorem 1.2, it suffices to solve an approximate version of the decision problem above. For instance, 
the following result [8] suffices. THEOREM 1.3. There exists an algorithm .41 for which the following 
holds. When ,41 receives as input an s > 0 and a bipartite graph G---- (V1, V2; E) with tVI[ = [Vzl = 
m > (2/¢) 5, it either correctly asserts that G is e-regular, or else it returns a witness for the e 
I-irregularity of G, where ~' = zAx' (~) = ¢5/16. The running time of ,4x is O(M(rn)) = O(m2"376). (See 
Frieze and Kannan [11] for a somewhat different approach to verifying regularity, based on singular values 
of matrices.) Our main result is an improvement of Theorem 1.3 above, and may be stated as follows. THEOREM 
1.4. (The main result) There exists an algorithm `4 for which the following holds. When .4 receives as 
input an s > 0 and a bipartite graph G = (V1, V2; E) with I111[= IV21 = rn >_ too(S), it either cor-rectly 
asserts that G is e-regular, or else it returns a witness for the e'-irregularity of G, where ¢' = ¢'A(¢) 
= ~2°/542 as. The running time of ,4 is O(rn2). We describe our algorithm .,4 in §2.2. Deriving an algorithm 
for the regularity lemma from Theorem 1.4 is standard, and we omit the details. COROLLARY 1. I. There 
is a deterministic algo-rithm ~o that, given e > O, ko > 1, and a graph F, produces an e-regular partition 
for F into k parts for some k satisfying ko < k < K~', where K~' --- K~'(z, ko) depends only on z and 
ko. Moreover, algorithm ¢4~ runs in time O(n 2) ifF has n vertices. Clearly, Algorithm A~ above has optimal 
time complex- ity, up to the constant implicit in the big-O notation. In I1, 2], several algorithmic 
consequences are derived from Theorem 1.2. In the examples presented there, the time complexity of the 
algorithms is O(M(n)). Us-ing ~ from Corollary 1. l, one obtains algorithms with optimal time complexity 
O(n2). We also observe that a similar improvement may be obtained from Theorem 1.4 for the subgraph counting 
algorithm given in Duke, Lef- mann, and RAkll [8]. We explicitly state examples of these improvements 
at the end of this introduction. Let us also mention that an important variant of the regularity lemma, 
suitable for finding induced subgraphs, was recently discovered by Alon, Fischer, Krivelevich, and Szegedy 
[3, 4], in the context of property testing (see, e.g., [12] and [13, 14]). In the applications of their 
regularity lemma in [3, 4], the authors do not need algorithms for finding their regular partitions; 
however, they observe that an algorithmic version of their lemma readily follows from results such as 
Theorem 1.3. Again, a O(n 2) time algorithm follows immediately from Theorem 1.4. Finally, we mention 
that one may prove a 'non-bipartite version' of Theorem 1.4. This variant of our result implies that 
one may check in time O(n 2) whether a given n-vertex graph F is quasi-random, in the sense of Ghung, 
Graham, and Wilson [6]. Moreover, if F is not quasi-random, then our algorithm will produce a suitable 
witness proving this (an induced subgraph with f~(n) vertices whose density deviates substantially from 
the density of F). Local conditions for regularity. One may prove Theorem 1.3 by considering a certain 
'local condition' on G = (V1,V2;E), IV1[ = IV2[ = m, that is essentially equivalent to the regularity 
of G. For simplicity, let us suppose that G is degree-regular. The condition is simply that the following 
inequality should hold: (1.2) Idc( , u) -p(v) ml < v(G) , ~, yE V~ where da(x,y) = [NG(x) n NG(y)I 
is the so-called eodegree of x and y, and p(G) = }El/IV,]IV21 = IEi/rn ~-is the density of G. Clearly, 
inequality (1.2) may be checked in O(m 3) time, and, in fact, using fast matrix multiplication, one may 
verify (1.2) in O(M(rn)) = O(m 2"376) time. The precise meaning of the equivalence of the e-regularity 
of G and the validity of (1.2) is as follows: for all ¢ > 0 there is 5 > 0 such that if (1.2) holds, 
then G is z-regular. Moreover, for all 5 > 0, there is z' :> 0 such that if (1.2) fails then G is not 
e'-regular, and, in fact, a witness to this z'-irregularity may be constructed explicitly. Some of the 
ideas described in this paragraph have appeared in the literature under many guises--basically, we are 
obtaining a somewhat surprising amount of information from 'pairwise independence'. We do not go into 
details here. The key idea in the proof of Theorem 1.4 is that we may restrict the sum in (1.2) to a 
small, randomly selected collection of pairs {x, y} (and, naturally, scale down the right-hand side). 
This would not be so satisfactory, as we would have a randomized procedure: we in fact show that we may 
achieve the same effect by 'deterministic sampling', using the edge set of a linear- sized expander J 
(see the definition of property "P(J, ~) in §2.2.3). Algorithmic applications. As we stated above, our 
algorithm immediately implies an improvement on de- terministic algorithms which are based on the Szemerddi 
regularity lemma. Here we present three typical exam- ples of algorithms for finding and counting given 
sub- graphs. For more algorithmic applications of the regu- larity lemma see [2] and [8]. The first two 
propositions describe problems of finding specific subgraphs in a given graph. PROPOSITION. For every 
e > 0 and every integer h, there exists a positive integer no = no(e, h) such that for every graph H 
with h vertices and chromatic number x(H), there exists a deterministic algorithm of time complexity 
O(n 2) that, given a graph G = (V, E) with n > no vertices and minimum degree d > ~ n, finds a set of(1 
-e)-~ vertex disjoint copies of H in G. For the proof of existence see [5]. PROPOSITION, Let k > 3 be 
an integer and c > O, e > 0 be constants. Then there exists an integer no = no(k, e) and a function f(k, 
e) such that if G = (V, E)/s a graph with n >_ no vertices and cn 2 edges, then either (i) there exists 
a subgraph G' = (V', E ~) of G with X(G') >_ k and [V'[ _< f(k, e), or (//) there ex/sts a set E" C_ 
E with [E"[ < en 2 such that the subgraph C" : (V, E \ E") satisfies x(G") k-1. Fhrthermore, there is 
an algorithm that receives as input a graph G = (V, E) as above and has running time O(n 2) which either 
outputs a subgraph G' as in (i) or a set of edges E" as in (ii), together with a proper coloring A : 
V --~ {1,... ,k- 1) of the subgraph G". For the algorithms proving both propositions above see [2]. To 
describe our third example let us introduce some notation. We will follow [8]. Let G = (V,E) be a labeled 
graph on n vertices whose vertex set V = (vl,...,vn) is ordered by V 1 < "'" ( 72 n. Let the set W = 
{Wl,...,wk},k < n, be ordered bywl < ..-< wk. We say that a graph H with vertex set W is order isomorphic 
to an induced subgraph H' of G if there exists an isomorphism ¢ : H --~ H t with the property that for 
each i and j, 1 _< i,j <_ n, if wi < w i, then ~b(wl) < ¢(wi). Let H1,...,Ht, where t = 2(~), be a list 
of all labeled graphs on the set W and let ak(C) ---(hl,...,ht) be the t-dimensional vector in which 
for each i, 1 < i < t, hi is the number of induced subgraphs of G to which Hi is order isomorphic. The 
following proposition asserts the existence of a certain type of approximation algorithm for the vec-tor 
ak (G). For more details, see [8]. PROPOSITION, Let k >_ 4 be in integer. There is an algorithm whose 
input is a labeled, ordered graph on n vertices and a list of a//labeled graphs on an ordered set of 
k vertices and whose output in an approximation = = to the vector k(C) = (hi,...,ht) with the property 
that ~l<i<t [hi -hit -< 1 -i ~'~1<i<~ hi . The algorithm runs in O(n 2+l/l°gi°gn) time. 2 Preliminaries 
and the Algorithm 2.1 Auxiliary results on expander graphs. Let 0 < ~ _< 1 and L > 0 be fixed. We say 
that a graph J on m vertices is (~,L)-uniform if, for any U, W C V(J) such that UnW = ¢ and 1 <_ IU I 
< IWI < rlU h where r = gin, we have (2.3) lej(U, W) -elulIwl] _< L r[Uv~l. Here ej(U,W) stands for the 
number of edges be-tween the sets U and W in the graph J. The cele-brated Ramanujan graphs of Lubotzky, 
Phillips, and Sarnak [16, 17] are explicitly constructible examples of linear-sized (Q, 2)-uniform graphs. 
We shall make cru-cial use of the fact that linear-sized (p, O(1))-uniform graphs may be constructed 
efficiently. The following three lemmas are easy. LEMMA 2.1. Let R = (V,E) be a (~,L)-uniform, n-vertex 
graph and let 0 ~ A C V be given. Put J = R[A], i.e., J is the subgraph o] R induced on the set A. Then 
J is an (P, L')-uniform graph with L' --L~. The Ramanujan graphs X ----X p'q constructed in [16, 17] 
depend on primes p and q, which have to satisfy certain simple arithmetical conditions. These graphs 
X p'q are (p + 1)-regular and have n = q(q2 _ 1)/2 vertices. We shall need to construct linear-sized 
(~,O(1))-uniform graphs with rn vertices and average degree around r, where m and r are integers, which 
we may suppose to be large. The following lemma asserts that this can be done efficiently. LEMMA 2.2. 
There exists a constant r 1 such that for all ro > rl there is an rnl = ml(r0) such that the following 
holds. Let m > rn] be given. Then we may explicitly construct an adjacency list representation of a particular 
( ~, 5)-uniform graph J on V ( J) = {1,..., rn} with average degree r = ~n satisfying ro < r < 2to in 
time O(rn(log m) °(1)). To construct the graph J as in Lemma 2.2, one first finds suitable primes p and 
q so that n = q(q2 _ 1)/2 is only a little larger than m (the existence of such primes follows from Dirichlet's 
theorem on primes in arithmetic progressions). We have plenty of time for finding these p and q. We now 
construct X ~',q and then take an arbitrary induced subgraph J C X p'q on m vertices; the (~, 5)-uniformity 
of J follows from Lemma 2.1. We omit the details. NOTATION. We use the following non-standard nota-tion: 
we write 01 (x) for any term y such that [y[ < x. LBMMA 2.3. Let 71o > 0 and L > 0 be given. Then there 
is an r0 = r0(W0, L) such that any rn-vertex (~, L)-uniform graph J with ~rt >_ r0 has the following 
property: if X C V(J) is such that rl = IXl/n > no, then e(d[Xl) = (1 + O~(~o))zfe(J). Here, as usual, 
e( J) stands for the number of edges of the graph J. 2.2 The algorithm. Our algorithm ,4 first prepro- 
ceases the input graph G and only then runs a more sophisticated procedure. We first describe the prepro-cessing 
stage quite informally and then proceed to de- scribe the heart of Algorithm A in detail in §2.2.3. However, 
we have to start with setting up some constants. 2.2.1 Definition of the constants. Algorithm .4 is 
given a constant 0 < 6 < 1. We first let 1 1 s (2.4) 6o = ~6, 5 = -4eo, and r A = 15006o "s. Now we 
put 1 2 ~lt  (2.5) 0=~,  =.an 0,~6 'l~ ° J' e'= (6") 2 < min ~ ~1 e6, 1-1--6g) and -( 400 160 " We 
also let (2.6) el = rain { 3---~52~6, 1630~ and 10 j T/0=min {' '0l} ~e ,~e , 0 . We set L = 5 and 
let rB = r0(r/0,L) be as given in Lemma 2.3. Finally, we let (2.7) r0 = max{rA, rB}. The reader may find 
it useful to keep in mind the following relationship among the constants:   (2.8) 6 I<<~'<<~, r/o<<~'<<8<<6, 
and e r<<61<<6, ~, 9. 2.2.2 The preprocessing stage. We first observe that if the graph G = (V1,V2;E) 
is such that p(G) = d(V1,V2) = IEI/rn 2 <_ 6 3, then G is ~-regulax (we omit the proof of this standard 
observation). Therefore, we suppose that (2.9) p(G) > ~3. We now observe that we may remove some vertices 
of our graph G so that we either obtain a subgraph H C G that is essentially degree-regulax (all degrees 
axe about the same), or else in the process of removing these vertices we locate a witness to the ~'-irregulaxity 
of G. This is formalized in the following lemma (a sketch of the proof is given in the appendix). LEMMA 
2.4. Suppose C = (V1,V2;E) is a balanced bipartite graph with IV~l = 1½[ = m, and s~ppos~ that (2.9) 
holds. There is a procedure that runs in time O(rn 2) such that either ( i) our procedure produces a 
bipartite subgraph H C G, say H = (U1,U2;F), such that (a) iym~ = IVd (i = 1, 2), then (2.10) (1 -2e')m 
< mi < m, (b) qp(H)= IFI/mlrnz, then (2.11) p(H) = p(G) + O1(56'), and (c)/or aU ~ e V~ (i = 1, 2), 
wc have (2.12) d(ui) = (p(n) + 01(lOe'))rna-i, where d(ui) stands, as usual, for the degree of the vertex 
ui in the graph H, or else (ii) our procedure produces a witness to the 6'-irregularity of G. For convenience, 
we let ~(rn, 6 l) be the family of subgraphs H of G that satisfy (a)-(c) in (i) of Lemma 2.4 above. 2.2.3 
The main procedure. In view of Lemma 2.4, we now suppose that we have a subgraph H = (U1,U2;F) C G with 
H ~(m,~'). Our algorithm A now generates a (~,L)-uniform graph J with vertex set U1 and with average 
degree r = gin1 satisfying (cf. Lemma 2.2) (2.13) ro<r<2ro. We now introduce some notation. We say that 
property 7~(J, 6) holds if (2.14) ~ ]dH(=,y)-p(Hfms[ ~ 6e(J)p(H)Sms, where we write {x,y} J to mean 
that {x, y} is an edge of J, e(J) stands for the number of edges J, and p(H) = e(H)/IUI[[U2[ = [FI/m 
s. Moreover, let us write J(u) (u Us) for the graph J[N(u)] induced by the neighbourhood N(u) of u in 
H. We define a 0-1 matrix M = (M(e, u))e,u indexed by E(J) × Us as follows: M(e,u)=(10 ife J(u) (2.15) 
otherwise. Therefore, clearly, M(e,u) = 1 if and only if both endpoints of e are adjacent to u. Algorithm 
.4 now proceeds as follows: 1..4 verifies whether P(J, 6) holds; if it does, then .4 claims that G is 
~-regular and halts. 2. If P(J, 6) does not hold, then .4 computes the ma-trix M = (M(e, u))~,~ defined 
above. Moreover, .4 finds and fixes a vertex u0 ~ [/2 for which we have (2.16) ~ M(e,u') > 1 + p(H)am2e(J). 
utCU2 eE:J(uo) [The existence of such a vertex u0 is proved later.] 3..4 now sets U = N(uo) and sets 
 (2.17) where (2.18) Z M(e,u') >_ (1 + O)p(H)%(J). eEJ(uD) 4..4 outputs (U, W) and claims that this is 
a witness to the e'-irregularity of G. 2.2.4 Correctness and analysis of Algorithm .4. The correctness 
of .4 follows from Lemmas 2.5 and 2.6 below. The first lemma says that if Algorithm .4 claims that G 
is z-regular in Step 1, then this is indeed the case. LEMMA 2.5. I] property 7)(J, 6) holds, then G is 
E- regular. LEMMA 2.6. /] proper~y P(J, 6) fails, then G is not s'- regular, and the pair (U, W) produced 
by Algorithm .4 is indeed a witness for the el.irregularity of G. We shall prove the two lemmas above 
in §3. The next simple lemma tells us that .4 has time complex- ity O(m 2). LEMMA 2.7. Algorithm .4 described 
in §2.2 runs in time O(m2). Proof. This is quite straightforward and we omit the proof. Let us only observe 
that the fact that J has O(m) edges is crucial, as it is this that allows us to check (2.14) in O(m ~) 
time. 3 Proofs of the Main Lemmas 3.1 Proof of Lemma 2.5. We say that the graph H has property Q(J, 6) 
if the following inequality holds true: Z [d(x, y) + p(H)2m2 -(d(x) + d(y))p(H)[ (3.19) <_ 6p(H)Srn2e(J). 
CLAIM 3.1. Let 6 > 0 be fixed. If a graph H E ~(m,E I) has property T~(J, 6), then it has property Q(J, 
26). The proof of Claim 3.1 is quite straightforward and can be found in the appendix. In view of the 
above claim, to prove Lemma 2.5 it is enough to show that Q(J, 26) implies the e0-regularity of H. Let 
A = (a~,t)~,t be a matrix indexed by U1 x U2, with entries = ~-(1-p) if{k,l} E(g) ak,l tp otherwise. 
 Moreover, for i E U1, let vi = (a~A,...,ai,m2) be the ith row of A. Straightforward calculations show 
that (vi,vj) = d(i,j) + p(H)2ms -(d(i) + d(j))p(H), and hence the following claim follows easily from 
the definition of property Q (see (3.19)). CLAIM 3.2. For every H ~(m,~ ~) that has prop- erty Q(J, 
26), the rows of A are such that   (3.20) I(v,,-j>l <_ 2@(H)2m2e(Y). {~,j}eJ 282 Let U C U~ and W 
C U2. To shorten our notation U ~'~ij~J will denote summation over {i, j} ~ E(J) such that i, j ~ U. 
Furthermore, for i ~ U let wi be the restriction of the vector vi to W, i.e., w i ----(aij)jew. u We 
clearly have ~Oej[(vi,vj)[ < )-'~t~,j}es [(vi,vj)[- U We now compare Y~ej(v~, vj) with )-]~ej(wi, w~). 
We have (3.21) U U u kf~W U a For k E U2 we set S~ = )-~i~J ai,~ j,k, and proceed to estimate this quantity. 
For k ~ U2 let U + C U be the set of non-neighbours of the vertex k in U and let U-C U be the set of 
neighbours of the vertex k in U. Set c~ = [U- I and/~ = [U+I. Note [U] = a +ft. Thus, using the definition 
of the matrix A, we can write S U = ej(U-)(1 --p(H)) 2 + ej(U+)p(H) 2 (3.22) --ej(U-, U+)p(H)(1 -p(H)). 
The (Lo,L)-uniformity of J implies the following claim, whose proof is given in the appendix. CLAIM 3.3. 
For all k E W and U C U1, we have (3.23) S~ = ~e [a(1 --p(g)) -/Yp(H)] 2 + 01(3Lye. IVl) Identity (3.21) 
and Claims 3.2 and 3.3 above imply an U upper and a lower bound on Y]~/ej(wi,wj) as follows (cf. appendix): 
U (3.24) ~_~,jej(w,, wj) <_ 25p(H)2m2e( J) + 3Lv'TIUI(m2 -IWI) and (3.25) U >_ ~IUIZlWI[d(U, w) -p(H)[ 
~- - 3Lvr~IUI fW[. Now we are ready to show that H is s0-regular. Fix U c U~, }UI > E01U~I = ~0m~, and 
W C U2, [W[ _> ~o[U2[ = s0m2. Set u = [U[ and w = [W[. Recall that d(U, W) stands for the Szemer&#38;ti 
density of the pair (U,W) and d(U1,U2) = p = p(H) in our notation. Combining the lower and upper bounds 
on U w )-]ijeJ(i,wj) (cf. (3.24) and (3.25)), we infer [d(V, W) p(H)[2 2 < (2Jp(H)2m2e(J) + 3Lye" urn2) 
--~u2w <_ 46p(H)2m2 x rml + 6Lv/-~ urn2 ~uzw --~ ~u2w < 2~p(H)2m2m2 + 6Lrn2V~ --u2w ~uw 25p(H) 2 65 
< + < + = -2  The last inequality follows because of our choice of di and r > ro >_ rA. Finally, we 
observe that the e0-regularity of H = (U1, U2; F) implies the G-regularity of G = (V1, V2; F). This follows 
because ~ << s0 < e. We omit the details. 3.2 Proof of Lemma 2.6. For this proof, the reader may find 
it convenient to recall the hierarchy of the constants given in (2.8). Recall we have constants 6 and 
~ with 0 < 5 << s. We also have 1 3 (3.26) p = p(H) >__ ~e . Note that (3.26) is guaranteed to hold 
for the graph H that we obtain after preprocessing H as described in §2.2. Suppose that property 7~(J, 
5) fails for H. Thus (3.27) ~ Id(x,U) -p2rn2[ > 6e(J)p2m2 . {=,u}eJ A short calculation (see appendix) 
shows that we can write 2 2  (3.28) (d(x, yl-pm2) {x,u}eJ = ~_~ d(x,y) 2 - (1 +01(6e#))p4mZ~e(g). Applying 
the Cauchy-Schwarz inequality to the left-hand side of (3.28) and using (3.27) we get (3.29) p2 2 {x,y}EJ 
2 2 {~,y}CJ :> 62p4rn2e(J). Comparing (3.28) and (3.29), and recalling (2.5), we deduce that (3.30) 
E d(x,y)2>-(1+ ~-)pam29e(3). /~,u}eJ The following claim evaluates the sum on the left-hand side of (3.30) 
in terms of the matrix M = (M(e,U))e,, defined in §2.2. CLAIM 3.4, (3.31)>--~ d(x,y)2= ~ ~ ~ M(e,u'). 
 The proof of (3.31) is included in the appendix. Combining (3.30) and (3.31), we infer that there is 
a vertex u0 E U2 for which we have (3.32) E   E M(e,u')>- (l+~)pam2e(J)" u'EU2 eEJ(uo) Following the 
algorithm, we let such a vertex u0 be fixed. As in the algorithm, we now put U = N(uo) and consider (3.33) 
W= Wo = {u' E U2: E M(e,u') > (1+0)p%(3)}. eEJ(uo) One may prove that both U and W are large sets (the 
proof is given in the appendix). CLAIM 3.5. We have IUI >_ elm 1 and IWt >_ elm2. Before we proceed, 
we observe, using the definition of matrix M, that for all u' E U2 we have (3.34) E M(e,u') = e(J[N(uo) 
A N(u')]). eeJ(uo) We now infer a lower bound for the codegree d(u0, u') for the case in which u' E W 
using (3.34) and the fact that the edges of J are extremely well distributed. CLAIM 3.6. For all w E 
W, we have d(uo,w) >_ (1 + 0/3) p2m 1. See the appendix for the proof of Claim 3.6. It follows immediately 
from Claim 3.6 that e(U, W) > (1 + o)p2mtiWt, which implies d(U,W) -e(U,W) (1 + O/3)p2mllWI IUIIWI ~ 
(1 + 6")pmxlWI (3.35) > (l+~)p>p+zl. Since we have already proved that IUI _ elm~ and IwI >_ ~xm2 (see 
Claim 3.5), inequality (3.35) tells us that (U, W) is a witness to the el-irregularity of H. We shall 
now prove that (U, W) is in fact a witness to the e'-irregularity of G. We have (3.36) IUI > etmt > el(1 
-2e')m > e'm and (3.37) -tWl _> elm2 _> 61(1 --2~')m _ e'm. Because of (2.11) and (3.35), we have (3.38) 
d(U, W) > p + et > p(G) - 5e' + el >_ p(G) + e'. In view of (3.36), inequality (3.38) tells us that (U, 
W) is indeed a witness to the d-irregularity of G, as required. References [1] N. Alon, R. A. Duke, H. 
Lefmann, V. R6dl, and R. Yuster, The algorithmic aspects of the regularity lemma (extended abstract), 
33rd Annual Symposium on Foundations of Computer Science (Pittsburgh, Penn- sylvania), IEEE Comput. Soc. 
Press, 1992, pp. 473- 481. [2] N. Alon, R. A. Duke, H. Lefmann, V. R6dl, and R. Yuster, The algorithmic 
aspects of the regularity lemma, Journal of Algorithms 16 (1994), no. i, pp. 80- 109. [3] N. Alon, E. 
Fischer, M. Krivelevich, and M. Szegedy, E.~cient testing of large graphs (extended abstract), 40th Annual 
Symposium on Foundations of Computer Science (New York City, NY), IEEE Comput. Soc. Press, 1999, pp. 
656-666. [4] N. Alon, E. Fischer, M. Krivelevich, and M. Szegedy, E~cient testing of large graphs, Combinatorica 
20 (2000), no. 4, pp. 451--476. [5] N. Alon and R. Yuster, Almost H-factors in dense graphs, Graphs and 
Combinatorics 8 (1992), no. 2, pp. 95-102. [6] F. R. K. Chung, R. L. Graham, and R. M. Wilson, Quasi-random 
graphs, Combinatorica 9 (1989), no. 4, pp. 345-362. [7] D. Coppersmith and S. Winograd, Matrix multiplica- 
tion via arithmetic progressions, J. Symbolic Comput. 9 (1990), no. 3, pp. 251-280. [8] R. A. Duke, H. 
Lefmann, and V. RSdl, A fast approxi- mation algorithm for computing the frequencies of sub- graphs in 
a given graph, SIAM Journal on Computing 24 (1995), no. 3, pp. 598-620. [9] A. Frieze and R. Kannan, 
The regularity lemma and approximation schemes for dense problems, 37th An- nual Symposium on Foundations 
of Computer Science (Burlington, VT, 1996), IEEE Comput. Soc. Press, Los Alamitos, CA, 1996, pp. 12-20. 
[10] A. Frieze and R. Kannan, Quick approximation to matrices and applications, Combinatorica 1O (1999), 
no. 2, pp. 175-220. [11] A. Frieze and R. Kannan, A simple algorithm for con- structing Szemerddi "s 
regularity partition, Electronic Journal of Combinatorics 6 (1999), no. 1, Research Pa- per 17, 7 pp. 
(electronic). [12] O. Goldreich, Combinatorial property testing (a sur- vey), Randomization methods in 
algorithm design (Princeton, N J, 1997), Amer. Math. Soc,, Providence, RI, 1999, pp. 45-59. [13] O. Goldreich, 
S. Goldwa.sser, and D. Ron, Property testing and its connection to learning and approxima- tion, 37th 
Annual Symposium on Foundations of Com- puter Science (Burlington, VT, 1996), IEEE Comput. Soc. Press, 
Los Alamitos, CA, 1996, pp. 339-348. [14] O. Goldreich, S. Goldwasser, and D. Ron, Property testing and 
its connection to learning and approxima- tion, Journal of the Association for Computing Ma- chinery 
45 (1998), no. 4, pp. 653-750. [15] J. Koml6s and M. Simonovits, Szemergdi's regu-larity lemma and its 
applications in graph theory, Combinatorics--Paul Erd6s is eighty, vol. 2 (Keszthely, 1993) (D. Mikl6s, 
V. T. S6s, and T. Szfnyi, eds.), Bolyai Society Mathematical Studies, vol. 2, JAnos Bolyai Mathematical 
Society, Budapest, 1996, pp. 295- 352. [16] A. Lubotzky, R. Phillips, and P. Sarnak, Explicit ex- panders 
and the Ramanujan conjectures, Proceedings of the Eighteenth Annual ACM Symposium on The-ory of Computing 
(STOC '86) (Berkeley, California), ACM, 1986, pp. 240-246. [17] A. Lubotzky, R. Phillips, and P. Saxnak, 
Ramanujan graphs, Combinatorica 8 (1988), pp. 261-277. [18] E. Szemerddi, Regular partitions of graphs, 
Problbmes Combinatoires et Th4orie des Graphes (Colloq. inter- nat. CNRS, Univ. Orsay, Orsay, 1976) (Paris), 
Collo- ques Internationaux CNRS n. 260, 1978, pp. 399-401. Appendix: Some proofs We summarize all the 
postponed proofs and calculations in this appendix. Proof of Lemma ~-.~. (Sketch) We first omit the vertices 
u in V2 for which the condition (3.39) d(u) = (p(G) + Ol(~'))m fails. If the number of such vertices 
is >_ 2c'm, we may easily produce a witness to the ~'-irregularity of G as in (ii) in the statement of 
our lemma. Suppose therefore that the number of such vertices is < 26'rn. Let Us C 172 be the resulting 
subset of V2, and let rn2 : tY21 > (1 -2e')m. We now omit the vertices u 6 V1 for which the condition 
(3.40) d(=) = (p(C) + O,(e'))m2 fails. Again, if the number of such vertices is >_ 2e'm, we may easily 
produce a witness to the e'-irregularity of G. If the number of such vertices is < 2e'm, the resulting 
graph H is as in (i} in the statement of our lemma. Deferred proofs for Lernma 2.5 Here we present the 
proofs of the claims and identities used in the proof of Lemma 2.5. Proof of Claim 3.1. Let H satisfy 
7~(J, 6) and H e ~(m, et). We have (3.41) [d(=, y) + p(H)2m2 -(d(x) + d(y))p(H)l {=,~}ea < ~ [d(x,y)-p(H)2m21 
{z,y}eJ + 2p(H) ~ Ip(glm~ - d(x) ldA=) zEU, 26p(H)2m2e(J) since ~' < 6/40 (see (2.5)). Proof of Claim 
3.3. Recall that for two numbers a, b we write a = O1 (b) if and only if lal < b. Since J is a (~, L)-uniform 
graph, we get .(;) + O1 (2Lvfr -~) _ 8~ 2 e~ +O, (2Lv/r -~) 2 2 ej(U +) ~-~°~a 8/~ + O, (2Lv~- fl) 2 
2 To bound S~ we are going to use the inequalities a(1 -p(H)) 2 + f~p(H) 2 _< a +/3 and 2(a + fl) + ~ 
_< (a +/3). We get for the upper bound on S[ 1 S~ --~e [a(1 --p(H)) -/Yp(H)] 2 j3 2 _< --e~(l --p(g)) 
2 -- 8~p(H) +2Lv~ ~(1 -p(H)) 2 + 2Lye. f~p(H) 2 +Lye" v/~ " p(H)(I -p(H)) < 2Lv~(~ + fl) + Lye- vf~ 
_< 3Lv~(~ + Z) = 3Lv~-IUI. We note that we got a bound linear in IUI since L and r are eonstants. Similarly, 
we get for the lower bound sU __ 1 ~p [a(1 -p(H)) -tip(H)] 2 > -Lo~(1 -p(H)) 2 - ~ p2 -2Lye- a(1 -p(H)) 
z - 2Lye./~p(H) z -Lye- x/-~" p(H)(1 -p(H)) ce > -0~(a +/!1) -2Lv¥' (o~ + ,6) - Lye" V~ _> -~(~ + ~)-Lye-5 
~(~+~) z -IUI ~-+ ~Lv~" ) > -3Lv'7. IUI. Derivation of the upper and lower bounds (3.24) u and (3.25) 
on ~iiej(wi, wj). To derive an upper bound u on ~_,Oej(w~,wi) we use (3.21). We get u u = -E sZ k~w 
 Note that (3.23) implies Sk U > -3Lv~IUI . Thus Claim 3.2 and this lower bound on S[ imply u Eijej(wi,wj) 
< 25p(H)Zm2e(J) +3Lv'71UI(m2 -IwI). U To estimate ~-~ije J (wi, wj) from below, we first write u ~--~v 
kEW kEW Set u = Iut, ~ : twl, and write du(k) = Iu-I = -for the size of the intersection of the neighbourhood 
of the vertex k with the set U and ~ = IU\U-I (as introduced in the main text). We have u kEW Z kEW 
which, by Cauchy-Schwarz, is at least o2w [~-'b,~ (a(1 -p(H)) -~p(H)) -3Lv~u~ = ~le(U, W) -p(H),~,~l 
~ - 3L~,~, = ~u~,~ld(U. W) -p(n)l ~ - 3L,,'~- u,~. Deferred proofs for Lemma 2.6 This section contains 
the proofs of the claims and identities used in the proof of Lemma 2.6. Derivation of identity (3.28). 
Let us first observe that (3.42) E ( d(x'y)-p2m2)2 {~,u}eJ = E (d(x,y)2 _ 2d(x,y)p2m2 +p4m~) (~,u}eJ 
 {x,y}6J (~,u}eJ However, IN(x) n N(y)I {~,V}ed = ~ e(JtN(u.)]) u2EU2  = ~ (1 + ox(n0))0 + ol(~"))%~e(J), 
u26U~ where we used that IN(uz)l = d(uz) = (p + O1(10¢'))ml = (I + Ol(~'l))pml _> rl0ml. Therefore (3.43) 
E d(x,y) = (1 + Ol(3e"))pZm2e(J). From (3.42) and (3.43) we obtain that 2 2 Z (e(~,y) -p .,~) {:z,y}e 
J = ~ d(~,y)~ -(1 + Ol(6~"))p%ie(J), as claimed in (3.28). Proof of Claim 3.,~. Clearly, if e = {x, 
y} E J, then (3.44) d(x,y) = Ig(z) nN(y)l = ~ M(e,u), uEU2 and hence (3.45) d(x'y)2: Z Z M(e,u)M(e,u'). 
ueY2 u'~U2  Therefore = Z M(e,.,) uEUa eEJ u'EUa ueU2 e~J(u) u'~O~ uEUa u' EUa e~J(u) Proof of Claim 
3.5. Using (2.12) we, clearly, have (3.46) IUI = (p + o,(10~')),~, = (1 + O,(g'))pm~ _> Elm,. By the 
definition of W, we have (3.47) ~ ~ M(e,u') u'EU2 eeJ(uo) < (1 -b O)p4m2e(J) nLIW[(1 q- O1(710))(]9 "at" 
Ol(10~'))2p2e(,]) = (1 + O)p4mue(J) + (1 + O,(3z"))lWIp4e(j). Comparing (3.32) and (3.47), we obtain 
 (3.4S) 2tW[p2e(J) >__ (1 + O,(3E"))[WIp2e(g) > 162p4m2e(J), and hence 1¢2 2 3~ (3.49) [W[ ~ ~O p m2 
~ 52e6m2 _> ~lm2, as required. Proof of Claim 3. 6. Suppose to the contrary that our claim fails. Then 
we have (3.50) e(J[N(,~o)nN(w)l) < (l+O~(no)) l+g pee(J) if d(uo, w) >_ floral, and we have (3.51) e(J[N(uo) 
N N(w)]) < 2r/~e(J) if d(uo, w) < ~loml. In either case, we have (3.52) e(J[g(uo) n N(w)]) < (1 + 0)p%(J) 
. However, in view of the definition of W (see (3.33)) and (3.34), inequality (3.52) cannot hold. This 
contra- diction shows that our claim must indeed hold.  
			