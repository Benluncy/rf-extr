
 Generating Well-Shaped Delaunay Meshes in 3D Xiang-Yang Li * Shang-Hua Teng t Abstract A triangular 
mesh in 3D is a decomposition of a given geometric domain into tetrahedra. The mesh is well- shaped if 
the aspect ratio of every of its tetrahedra is bounded from above by a constant. It is Delaunay if the 
interior of the circum-sphere of each of its tetrahedra does not contain any other mesh vertices. Generating 
a well-shaped Delaunay mesh for any 3D domain has been a long term outstanding problem. In this paper, 
we present an efficient 3D Delannay meshing algorithm that mathematically guarantees the well-shape quality 
of the mesh, if the domain does not have acute angles. The main ingredient of our algorithm is a novel 
refine- ment technique which systematically forbids the forma- tion of slivers, a family of bad elements 
that none of the previous known algorithms can cleanly remove, es- pecially near the domain boundary 
--needless to say, that our algorithm ensure that there is no sliver near the boundary of the domain. 
Keywords: Mesh generation, Delannay triangula- tions, slivers, computational geometry, algorithms. 1 
Introduction Mesh generation is the process of breaking a domain into a collection of primitive elements. 
In this paper we exclusively consider three-dimensional Delannay meshes whose elements are tetrahedra. 
A mesh is Delaunay if the circumsphere of any tetrahedron element does not contain any mesh vertices 
inside. We assume that the spatial domain is given in terms of its piecewise linear complex boundary 
(PLC) [16]. The size and shape of the tetrahedra is important because it influences the convergence and 
stability of numerical algorithms such as the finite element method; see Strang and Fix [15]. Generating 
meshes with small --'~t. of Computer Science, University of Illinois at Urbana- Champaign, 1304 W. Springfield 
Ave. Urbana, IL 61801. And Dept. of Computer Science, Illinois Institute of Technology, 10 W. 31st Street, 
Chicago, IL 60616. Emaih xli@cs.iit.edu. ?Dept. of Computer Science, University of Illinois at Urbana- 
Champaign, 1304 W. Springfield Ave. Urbana, IL 61801 and Akamai Technologies, Cambridge, MA 02139. Emaih 
eteng~cs.uiuc.edu. aspect ratio is one of the most important steps in numerical simulations. The aspect 
ratio of a tetrahedron is usually defined as its circumradius divided by its inradius. The aspect ratio 
of a mesh is the largest aspect ratio of all of its tetrahedral elements. A mesh is well-shaped if it 
has small aspect ratio. Unfortunately, currently there is no method that guarantees to generate well-shaped 
3D Delannay meshes. An alternative but weaker quality measurement is to use the radius-edge ratio [10]. 
It is the circumradius divided by the shortest edge length of the tetrahedron. The radius-edge ratio 
of a mesh is the maximum radius-edge ratio among all of its elements. A mesh is almost good if it has 
small radius-edge ratio. Numerous methods [3, 7, 9, 11, 13, 14] guarantee to generate 3D almost-good 
Delannay meshes. Slivers are the only elements that have small radius- edge ratio but have large aspect 
ratio. Talmor [16] notes that even well-spaced vertex set does not prevent slivers from its Delaunay 
triangulation. Thus the main difficulty of three-dimensional mesh generation comes from the existence 
of slivers. Mitchell and Vavasis [12] use oct-trees to generate a well-shaped tetrahedral mesh for a 
domain bounded by a specified polyhedral boundary. But the final mesh is not Delaunay. The Delaunay refinement 
or sphere packing based method fail to address the problem of slivers. Chew [4] sketched an algorithm 
that eliminates slivers by adding points in a randomized manner. For each tetrahedron with circumradius 
larger than the unit length, it adds a random point within a half unit of the circumcenter to the point 
set. Chew showed that there exists a point that will not introduce new slivers with circumradius less 
than one unit. The Delaunay triangulation is then updated if no new sliver is introduced by the new point. 
However, his algorithm generates constant density meshes. In addition, his algorithm does not address 
the slivers completely. Recently, Cheng et al. [2] developed an algorithm that, given an almost good 
Delaunay triangulation, constructs an assignment of weights so the weighted Delaunay triangulation is 
free of slivers inside. We refer the reader to [2] for a description of weighted Delaunay triangulations. 
Then Edelsbrunner et al. [5] developed a new algorithm that perturbs the vertices of an almost- good 
mesh such that the Delaunay triangulation of perturbed vertices is free of slivers inside. Notice that 
there are no any boundary treatments by these two algorithms presented in [2] and [5]. The main result 
of this paper is a refinement-based technique that generates meshes with small aspect ratio. It first 
eliminates all tetrahedra with large radius-edge ratio. It then adds points around the circumcenter of 
any sliver 7- so that it avoids creating new small slivers at the same time. Here a created sliver is 
small if its circumradius is less than a constant b factor of the circumradius of this sliver 7-. It 
keeps adding points until the mesh has small radius-edge ratio and does not have slivers. The tetrahedra 
with large radius- edge ratio have priority over slivers to be refined. We prove that for any element 
7- of an almost-good mesh, there is a point p around its circumcenter such that the insertion ofp will 
not introduce new small slivers. When circumcenter of bad tetrahedron encroaches boundary triangles or 
segments, we split these boundary triangles or segments instead of refining that bad tetrahedron. We 
prove the termination guarantee of our algorithm by showing that the distance between the closest mesh 
vertices is just decreased by a constant factor compared with that of the input mesh. Our algorithm differs 
from Chew's algorithm in that we generate a non-uniform mesh and our algorithm eliminates all original 
slivers without introducing any slivers in final mesh. The remainder of the paper is structured as follows. 
Section 2 introduces the basic concept such as Delaunay triangulation, sliver, picking regions. Our refinement- 
based algorithm is presented in Section 3. It specifies how to avoid creating new large slivers, how 
to eliminate existed slivers, and how to remove elements with large radius-edge ratio. The termination 
guarantee of the algorithm is presented in Section 4. In Section 5, we show that the generated well-shaped 
mesh has size within a constant factor of the size of any almost-good meshes for the same domain. Section 
6 concludes the paper with discussions. 2 Preliminaries 2.1 Delaunay Triangulation Due to their nu- merous 
desirable properties, and the abundance of the well studied algorithms to construct them [1, 6], Delau- 
nay triangulations are widely used in generating tetra- hedral meshes. The following properties about 
Delau- nay triangulations are extensively used in this paper. After inserting a new vertex p, all new 
tetrahedra cre- ated in the Delaunay triangulation of the new vertex set are incident on p. And the new 
Delaunay triangulation can be obtained by efficient operations local the new ver- tex. The nearest neighbor 
graph defined by a vertex set is contained in the Delaunay triangulation of the vertex set. In other 
words, the shortest edge length of the De- launay triangulation is the closest distance among mesh vertices. 
This fact is used in proving the termination guarantee of our algorithm. 2.2 Parameterizing Slivers For 
later conve-nience, we use R-r, Lr and p(r) to denote the circumra- dius, the shortest edge length and 
the radius-edge ratio of an element 7-. Let pqrs be a tetrahedron with volume V and the shortest edge 
length L. As [2, 5], we define a = a(pqrs) = V/L 3 as a measure of its quality. Call pqrs a sliver if 
p(pqrs) <_ ~o and a(pqrs) < ao, where ~0, a0 are constants that we specify later. Figure 1: A sliver 
example. The following lemma verifies our definition of a(r) for tetrahedron r. LEMMA 2.1. The aspect 
ratio of 7" is at most ~. The proof is omitted here. Hereafter, we use (c, R) to denote the sphere centered 
at a point c with radius R. For any base triangle qrs, there is a set of points p such that pqrs is a 
sliver. We call them the forbidden region Far8 of base triangle qrs. Let Y be the circum- radius of triangle 
qrs. The following lemmas proved in [8] are essential for analyzing our algorithm. LEMMA 2.2. [FORBIDDEN 
VOLUME] For any base tri- angle qrs, the volume of the forbidden region Fqr~ is at most c3Y s, where 
c3 = 27rZ(48#0a0) 2. LEMMA 2.3. [FORBIDDEN AREA] For triangle qrs and a plane 7-l, the intersection of 
the forbidden region Fqr~ with 7-I has area at most c4Y 2, where c4 = 1927rQoao. LEMMA 2.4. [FORBIDDEN 
LENGTH] For triangle qrs and a line £, the intersection o/the forbidden region Fqrs with £: has length 
at most csY, where c5 =  16v'Yoo o. 2.3 Picking Region A tetrahedron is called bad if it has large radius-edge 
ratio or is a sliver. The algorithm removes each bad tetrahedron by inserting a point inside its circumsphere. 
We then discuss where to select such point. Let's consider a tetrahedron T. We only pick a point from 
the interior of sphere (cr,SRr), where 5 < 1 is a constant to be specified later. We call the solid ball 
(cr,t~Rr) the picking region of r. A PLC domain satisfies the projection condi-tion [14] if for any vertex 
p encroaching a boundary triangle, there is a boundary triangle that contains the projection of p inside. 
We will always assume that the input domain satisfies the projection condition. We only split the boundary 
triangle containing the projection of the encroaching point p. We always assume that the PLC domain does 
not have acute angles similar to [14]. This will guarantee that the boundary protections ter- minate 
in finite number of steps. For a triangle qrs, its equatorial sphere is the small- est sphere containing 
points q, r, and s. For a segment qr, its diametric sphere is the smallest sphere contain- ing points 
q and r. Without confusion, sometimes we will just use circumsphere to denote the smallest sphere containing 
a triangle or segment. A point encroaches boundary if it is contained in the circumsphere of any boundary 
triangle or segment. Here a triangle is bound- ary triangle if it belongs to a two-dimensional Delaunay 
triangulation of a boundary face; a segment is boundary segment if defines the polygonal boundary faces. 
We call the element, whose circumcenter encroaches a bound- ary triangle or segment, the encroaching 
element; that boundary triangle or segment is called the encroached element. Shewchuk [14] proved the 
following radii rela- tion between the encroaching element and encroached element. LEMMA 2.5. [ENCROACHMENT 
RELATIONS] The cir-cumradius o/the encroached element is at least ~ /ac-tor o] the circumradius o] the 
encroaching element. We are now in the position to study how to split the encroached boundary triangles 
or boundary segments. Consider a boundary triangle qrs. Let (cqrs,Rqr,) be its circumcircle. We call 
the disk (cqrs,SRqrs) the picking region of qrs. A point from the picking region is inserted if triangle 
qrs is encroached. Then consider an encroached boundary segment qr. Let c be its middle point. Then a 
point from segment qr with distance no more than 511qrll to c is selected to split qr. In other words, 
the picking region of qr is a subsegment on qr centered at c with length 2511qrll. Without confusion, 
we will use (cr, 5Rr) to denote the picking region of an element T. Here V can be a tetrahedron, a triangle 
or a segment. See Fig. 2 for illustrations. Figure 2: The picking region of a tetrahedron, a boundary 
triangle and a boundary segment respectively. 3 Refinement Algorithms In this section, we present the 
refinement-based algo- rithm to generate well-shaped Delaunay meshes. 3.1 Algorithm Outline For any bad 
element in the mesh, we add a point p inside its picking region. The insertion of point p removes this 
bad element, but may create many new bad tetrahedra. It is possible that inserting any point in the picking 
region will create a new sliver [8]. The algorithm has the following four components. Algorithm: REMOVE-SLIVER-BY-REFINEMENT 
(~0, a0, 5, b) Enforce Empty Encroachment: For any en-croached boundary segment, add its midpoint and 
update the Delaunay triangulation. For any en- croached boundary triangle, add its circumcenter c and 
update the Delaunay triangulation. If c encroaches any boundary segment, we split the encroached boundary 
segment instead of adding c. Clean Bad Elements: For any bad tetrahedron v, find a point p in its picking 
region whose insertion avoids creating small slivers. If such p does not exist, then add the circumcenter 
ar of T. Here, tetrahedra with a large radius-edge ratio have priority over slivers to be split. If the 
circumcenter c~ encroaches boundary, we apply the following rules instead. Encroach Equatorial Sphere: 
For any encroached boundary triangle it, add a point p, whose insertion avoids creating new small slivers, 
from the picking region of #. If such p does not exist, then add the circumcenter cu of it. Update the 
Delaunay trian- gulation. However, if cu encroaches any boundary segment, apply the following rule instead 
of finding p from (c~, 5R~). Encroach Diametric Sphere: For any diametric sphere of boundary segment, 
if it contains point cr or c t, inside, then add a point p, whose insertion avoids creating new small 
slivers, from the seg- ment's picking region. If such p does not exist, we split the segment by adding 
its midpoint. Update the Delannay triangulation. 3.2 Select Point in Picking Region The key part of the 
algorithm is to find a point p whose insertion avoids creating new small slivers. One approach is based 
on a randomized selection as Chew did [4]. We randomly select a point p from the picking region and construct 
a local mesh whose elements are all incident on p. If there is a small sliver in the local mesh, we discard 
p and reselect a new point from the picking region randomly. The above procedure is repeated for constant 
rounds. By defining slivers and small slivers properly, we can show that the above procedure is expected 
to find point p if such a point exists. 4 Termination Guarantee In this section, we prove that the algorithm 
will termi- nate if we define what is bad element properly. After the algorithm terminates, the generated 
mesh elements have small aspect ratio. 4.1 Existence Notice that the tetrahedra with large radius-edge 
ratio have priority to be refined than the slivers. Miller et al. [10] proved that, given an almost-good 
mesh, the lengths of edges sharing a com- mon vertex are within a constant factor of each other, where 
the constant depending on the radius-edge ratio of the mesh. We call it the length variation bound uo. 
LEMMA 4.1. [CONSTANT SMALL SLIVERS] There are at most constant number of triangles that can form small 
slivers with points from the picking region of an element. PROOF. Let's consider an element 7- of an 
almost-good mesh. Let T be set of all triangles that can form small slivers with points from (c~, 6Rr) 
in the new Delaunay triangulation. Assume that triangle qrs forms a sliver pqrs together with a point 
p from the picking region. Then edges ofpqrs have lengths at most 2Rvqr, , which is at most 2bR~ from 
Rpqr8 _< bR¢. Then the edges incident on vertex q before point p is introduced have length at least 2bR.r/Vo, 
where u0 is the length variation bound of meshes with radius-edge ratio ~o. It implies that the closest 
distance among all vertices of all triangles of T is at least 2bRr/vo. It is simple to show that the 
vertices of all triangles in T are inside the sphere (Cr,(~ + 2b)Rr). Then by a volume argument, we know 
that the number of vertices of T is bounded from above by a constant. For convenience, we will use W 
to denote such constant. [] It remains to show that, given an almost-good mesh, there is a point in the 
picking region of any element to avoid creating new small slivers. The following conditions are sufficient: 
(1) W.c3(bRr) s < ($Rr)3; (2) W'c4(bRr) 2 < (~Rr)2; and (3) W'csbRr < ~Rr, where W is a constant depending 
on Q0, 6 and b. Recall that c3 = 27r2(48Qoa0) 2, c4 = 192rQ0ao, and c5 = 16v/'Sgooffff. In other words, 
the a0 used to define sliver has to satisfy all three inequalities. Volume : a0 < 6vq < (~o-2).¢~ff=~. 
--48~2Wb~'~ob --1921rQ~V~ '  Area : ao < 1927rW~ob2 _~ 7687tWig' 6~  Length : We summarize the above 
discussions by the follow- ing Existence Theorem. THEOREM 4.1. [EXISTENCE] Given an almost-good mesh, 
there is a point in the picking region of each ele- ment whose insertion will not introduce small slivers. 
4.2 Termination We then show that the algo- rithm terminates. We first classify the bad elements to three 
classes: original slivers in the mesh, created slivers by inserting some points, tetrahedra with large 
radius- edge ratio. See Figure 3 for data flow illustration of __.__(~ Origirlal slivers ) [ ____ Tetral 
Nil 1 Figure 3: Dataflow diagram illustrating the bad ele- ments evolution. these three bad tetrahedra. 
Then the operations of the algorithm are categorized as eliminating original slivers, eliminating created 
slivers, and eliminating tetrahedra with large radius-edge ratio. Observe that the distance among mesh 
vertices generated by this algorithm will possibly decrease along the insertion of new points. For example, 
the insertion of a point p in the picking region of a sliver T could possibly decrease the shortest distance 
by a constant factor. However, on the other hand, we will show that the shortest distance for any intermediate 
mesh is at least a constant factor of that of the original mesh. Then by a volume argument, we know that 
the algorithm will terminate. For convenient, we use lorg to denote the shortest edge length of the original 
mesh after enforcing that all equatorial spheres of boundary triangles and diametric spheres of boundary 
segments are empty. 4.3 Eliminate Original Slivers For simplicity, assume that the input mesh is almost-good. 
Let's first study the case of eliminating original slivers of the input mesh. Notice that in the algorithm, 
we do not distinguish the original slivers from the created slivers by point insertion. For the sake 
of convenience of analysis, we assume that all original slivers are removed first. LEMMA 4.2. [ORIGINAL 
SLIVERS] After eliminating all original slivers, the length of the shortest edge of the mesh is at least 
(1 - 5)/4 of that of the original mesh. PROOF. We consider an original sliver T and assume that point 
p is inserted to eliminate . If p is selected from the picking region of T, then for a mesh vertex v 
II v -Pll > (1- 5)R.,- > (1 -5)ir12 > (1-5)lo,.J2. If p is selected from the picking region of an encroached 
boundary triangle or boundary segment #, then R# > Rr/2. And R~- > LT/2 > lorJ2 implies IIv -pll >_ (1 
- 5)R, > (1 - 5)lorg14. Then the lemma follows. [] 4.4 Eliminate Large Radius-Edge Ratio Then let's 
study the scenario when we insert points to remove tetrahedra with large radius-edge ratio. These tetrahedra 
could be original or be created by inserting points. Consider a tetrahedron T with R~ > #0L~. The following 
lemma bounds the shortest edge length after a point p is inserted to process T. LEMMA 4.3. [LARGE RADIUS-EDGE 
RATIO] The length of the shortest introduced edge after eliminating T with > ~o is at least 2 -r. Lr 
PROOF. There are two cases when eliminating a tetrahedron 7- with large radius-edge ratio. The first 
case is that a point p from the picking region of v is inserted to remove T. The length of the shortest 
edge introduced after inserting p is at least (1 - 5)Rr > (1 - 5)QoLr. The second case is that the circumcenter 
cr en-croaches domain boundary. Assume that c~ encroaches the circumsphere (v, Rv) of a boundary triangle 
or seg- ment. Recall that Rv > Rr/2. Thus the shortest edge introduced after selecting p from (v, 5Rv) 
has length at least 1p--ARt _> ~QoLr. Notice that it may need split- ting the domain boundary several 
times till tetrahedron T is eliminated. The above argument is true for each boundary splitting. [] Thus, 
if (1 - 5)Q0 > 2, inserting points to eliminate any tetrahedron with radius-edge ratio larger than #o 
will not introduce shorter edges to the mesh. 4.5 Eliminate New Created Slivers It remains to show that 
the shortest edge length will not decrease when points are inserted to eliminate created slivers. Let's 
consider a sliver r created by inserting a point from the picking region of an element; say f(T). In 
other words, f(v) is responsible for creating the new sliver v. Element f(~-) is called the parent of 
sliver T. There are three cases: f(T) is a sliver; f(T) is a tetrahedron with large radius-edge ratio; 
f(r) is a boundary triangle or segment encroached by a bad element directly or indirectly. Let us first 
consider the case that f(T) is a sliver. Then we have Rr _> bRf(r ) because the insertion of point in 
the picking region of sliver f(T) will always avoid creating small slivers. LEMMA 4.4. [LARGE SLIVER- 
SLIVER] The length of the shortest introduced edge after eliminating sliver r is at least l~_Ab. Lf(~), 
where L/(r) is the shortest edge length of the parent sliver element f(T). PROOF. First consider the 
case that the circumcenter cr of r does not encroach the boundary. The shortest edge introduced after 
inserting a point from the picking region of v has length at least (1 -5)Rr, which is at least (1- 5)bRt(r) 
> (1-5)bL/(r)/2. Then consider the case that cr encroaches the circumsphere (v, Rv) of a boundary triangle 
or segment directly or indirectly. Notice that Rv > Rr/2. Thus the length of the shortest edge introduced 
after inserting a point from (v, SRv) is at least 1-6 -5-Rr, which is at least (l~6)bLf(7). Then the 
lemma follows. [] Then we study the second case that the parent f(r) is a tetrahedron with large radius-edge 
ratio. LEMMA 4.5. [LARGE SLIVER -LARGE R/L] Assume sliver T iS created by eliminating tetrahedron ](r) 
with LT > Qo. Then the length of the shortest edge introduced by eliminating sliver r is at least (1-~)2~°4 
 Ll(r) , where Li(~) is the shortest edge length of f(v). PROOF. We first consider the case that the 
circum- center cr of r does not encroach the boundary. The shortest edge e introduced by eliminating 
T has length at least (1 -6)Rr. Assume that v = pqrs is created by the insertion of point p from the 
picking region of f(T). Then the shortest edge connected to p has length at least (1 -6)Ri(T). From Put 
~_ ]lP~qll, we have Rr > (1-~)R~/.) Then the length of e is at least --2 " (I --6)2Rf(r) 2 We then consider 
the case that cr encroaches the circumsphere (v, Rv) of a boundary triangle or segment directly or indirectly. 
Notice that Rv > Rr/2. Thus the length of the shortest edge introduced after selecting a point from (v,6Rv) 
is at least 1-~ -T-Rr, which is at least (1 -6)2Rs( ) 4 Then Ri(r) .~ QoLI(r) completes the proof. [] 
 It remains to show that splitting a sliver T created by splitting a boundary triangle or segment # will 
not introduce shorter edges. LEMMA 4.6. [LARGE SLIVEPw BOUNDARY] Assume sliver v is created by splitting 
a boundary triangle or segment ~. Then the length of the shortest edge intro- duced by eliminating T 
iS at least le I _> (1-,~)%oLpt~S , where Lv(~) is the shortest edge length of p(~) and p(p) has large 
radius-edge ratio.  le I > (1-6)bL, where L~ is the shortest edge length  --4 ' of # and parent element 
p(#) is a sliver. PROOF. Recall that we split # because there is a bad tetrahedron whose circumcenter 
encroaches the domain boundary. Let p(#) be that bad tetrahedron. There are two cases about p(#): it 
is a sliver or it is a tetrahedron with large radius-edge ratio. Let us first study the case that p(#) 
has radius- edge ratio larger than Qo. Then as proved by previous lemmas, the length of the shortest 
edge e introduced by splitting T is at least 0-6)2R" where R~, is the 4 circumradius of #. Notice that 
here, we may need split boundary triangles or segments if the circumcenter of sliver T encroaches the 
domain boundary. It is always true that R~ > Rp(~)/2. From Rv(~) _> ~oLv(~), we have R~ _> QoLr(~)/2, 
where Rp(~) and Lp(~) is the circumradius and the shortest edge length of p(#) respectively. Consequently, 
we have (1 - 6)20oLv(,)  lel _> s We then study the case that p(~) is a sliver. Recall that the mesh 
should be almost-good when we split sliver p(#). Then the Existence Theorem 4.1 guarantees that v is 
not a small sliver, i.e., Rr _~ bR~. Notice that the length of the shortest edge e introduced by splitting 
~- is at least (1-6)R. which is at least (1-6)bRe The 2 ' 2 " fact that R~ _> L~/2 implies that [e[ 
_> (1--5)bL~4" [] The above lemma implies that, if (1 - 6)b > 4 and (1 -6)2Q0 > 8, eliminating a created 
sliver v will not introduce shorter edges. 4.6 Main Theorem Combining all the above analysis, we have 
the following theorem. THEOREM 4.2. [SHORTEST EDGE LENGTH] The length of the shortest edge introduced 
by eliminating all original slivers is at least (1 - 6)/4 factor of that of the original mesh. If we 
select b, 6 and Qo such that (1 -6)b _> 4 and (1 -6)2~o > 8, the shortest edge length of the mesh will 
never decrease after all the original slivers are eliminated. Consequently, the shortest distance between 
all mesh vertices is at least ~A factor of that of the original mesh. It is straightforward to show that 
the above algorithm is guaranteed to terminate by a volume argument. Then refinement algorithm generates 
well- shaped three-dimensional Delaunay meshes. 5 Good Grading Guarantee This section is devoted to study 
the mesh size of the generated mesh, or more specifically, the relation between the nearest neighbor 
function N 0 defined by the final mesh and the local feature size function lfs 0 defined by the input 
domain. Here N(v) is the distance from v to the second nearest mesh vertex; and mathitlfs(x) is the radius 
of the smallest sphere centered at x intersects two non-incident input segments or input vertices. We 
study the spacing relations among intermediate meshes by using similar idea as Ruppert and Shewchuk did. 
With each vertex v, associate an insertion edge length ev equal to the length of the shortest edge connected 
to v immediately after v is introduced into the Delaunay mesh. Notice that v may not have to be inserted 
into the mesh actually. For the sake of convenience of analyzing, we also define a parent vertex p(v) 
for each vertex v, unless v is an input vertex. Intuitively, for any noninput vertex v, p(v) is the vertex 
"responsible" for the insertion of v. We discuss in detail what means by responsible here. If v is inserted 
inside the picking region of a tetrahedron T with p(T) ~_ ~0, then p(v) is the most recently inserted 
end point of the shortest edge of v. If v is inserted inside the picking region of an original sliver 
T, then p(v) is an end point of the shortest edge of r. If v is inserted inside the picking region of 
a created sliver % then p(v) is the vertex of T that is responsible for creating T, i.e., the most recently 
inserted vertex of T. If V is inserted inside the picking region of an encroached boundary triangle or 
segment, then p(v) is the encroaching vertex. For the sake of simplicity, always assume that the encroaching 
vertex is not an input vertex, because Ruppert [13] and Shewchuk [14] showed that the nearest neighbor 
function N 0 defined on the Delaunay mesh after enforcing the domain boundary is within a constant factor 
of the local feature size function, i.e., U(v) ~ lfs(v). Notice that the parent vertex p(v) of v does 
not need to be inserted into the mesh actually. We then show that the insertion edge length ev for any 
introduced mesh vertex v is related to that of its parent vertex p(v). Notice that here v may not be 
inserted due to encroaching also. LEMMA 5.1. [INSERTION EDGE LENGTH] Let v be a vertex of the final mesh 
generated and let p = p(v) be the vertex responsible for the insertion of v. Then we have ev > lfs(v) 
for an input vertex v; and ev > C . ep for Steiner point v, where . C = (1-6)0o ifv is selected from 
the picking region of a tetrahedron with R~ ZT > 00; C = ~ if v is selected from the picking region 
of an original sliver; 1-5 . C = l~b if v is selected from the picking region of a created sliver and 
the parent f(v) is also a sliver; . C = 1-_.__A if v is selected from the picking region 2 of a created 
sliver and the parent element f(T) has radius-edge ratio more than 00; . 1-5 C=y4~b if v is selected 
from the picking region of a created sliver and the parent f(T) is a boundary triangle or segment encroached 
by a sliver; . C= 1-5 -V-if v is selected from the picking region of a created sliver and the parent 
element f(r) is a boundary triangle or segment encroached by a tetrahedron with large radius-edge ratio; 
7. C -~ 1--5 if v is selected from the picking region of an encroached boundary triangle or segment. 
 PROOF. Ifv is an original input vertex, then the length ev of the shortest edge connected to v is at 
least lfs(v) from the definition of lfs(v). Thus ev > lfs(v) and the theorem holds. Then consider non-input 
vertex v. Assume that v is selected from the picking region of an element r. It is always true that ev 
> (1 -5)Rr, where Rr is the circumradius of v. If v is a tetrahedron with radius-edge ratio at least 
Q0, then parent p is one of the end points of the shortest edge of v. Here p could be the most recently 
inserted Steiner vertex or an original vertex of r. Let L~ be the length of the shortest edge pq of T. 
Then q is original vertex or is inserted before p. In both cases, we have ep<[Ip-ql[. 1 Thenep<[Ip-qH=Lr 
< ~ Thus ev > (1-6)/5- _> (1 -5)00 ep. If r is an original sliver, then parent p is one of the end 
points of the shortest edge of T. Assume T has four vertices p, q, r, s. Let Lr be the length of the 
shortest edge pq of r. Then R~. > Y > Lr/vf3, where Y is the circumradius of triangle pqr. Similar to 
previous case, we have ep < lip - q[[ < Vf3RT. Thus 1-5 ev > (1-5)R > ep. Then consider that r is a 
created sliver. There are three cases about the parent element f(T) of T: f(T) is a sliver; f(z) has 
large radius-edge ratio; f(r) is an encroached boundary triangle or segment. Recall that the parent vertex 
p = p(v) is the most recently inserted vertex of 7. We first study that the parent element f(r) is a 
sliver. Recall that the insertion of p = p(v) from the picking region of sliver f(T) will always avoid 
creating small slivers. Thus, we have Rr _> bRf(r), where R f(r) is the circumradius of element f(z). 
The length of the shortest edge connected to p is ep < (1 + 5)Rf(r). Thus, we have 1-J ev > (1- 5)bRl(r) 
> ~-~b.ep. Then we study that parent element f(z) has radius- edge ratio at least Qo. Assume that tetrahedron 
~- has four vertices p, q, r, s. Notice that ep is no more than [IP-qtl. We also have R~- _> I[P- all~ 
2. Thus, we have 1-5 ev > (1- 5)R~ _> --~-- ep. The final subcase is that the parent element f(T) is 
an encroached boundary triangle or segment. We first I'~ can not guarantee that ep = lip - q[[, because 
the shortest edge connected to p after p is introduced could be in other tetrahedron incident on p. consider 
the scenario that f(T) is encroached by a sliver directly or indirectly. We then know that the insertion 
of the parent vertex p of f(r) will always avoid creating small slivers. Thus we have Rr > bRl(r ), where 
Rf(r) is the circumradius of element f(r). The length of the shortest edge connected to p is ep < (1 
+6)Rf(r). Thus, we have 1 -6 b ev > (1-6)bRf(r)_> ~ . ep. We then consider the scenario that f(r) is 
en-croached by a tetrahedron with large radius-edge ratio directly or indirectly. Here parent p is selected 
from the picking region of f(r). Assume that tetrahedron r has four vertices p, q, r, s. Notice that 
ep is no more than liP - qH. We also have R~ _> liP -q[[/2. Thus, we have 1-6  e~ _> (1- 6)R~ > ----~--- 
 ep. Finally, we study the situation that T is a boundary triangle or boundary segment. Here p is always 
an encroaching circumcenter of a bad tetrahedron or a boundary triangle p. Notice that here p was considered 
for insertion but was rejected due to encroaching. It is simple to show that R~, < vr2Rr, where R~ is 
the circumradius of #. Recall that we split boundary triangle r only if it contains the projection of 
the encroaching circumcenter inside. The length e v of the shortest edge connected to point p (if it 
was inserted) is at most (1 + 6)R,. Thus we have 1-6 ev _> (1 -6)R~ > ~v/~(1 + 6)" ep. [] The previous 
lemma 5.1 is concerned about the relationship between the insertion edge length of a child and its parent, 
if there is any. For a vertex v, as [14], we define Dv = Vs(v) We call Dv the density ratio eu at point 
v. Clearly, initially Dv is at most one for an input vertex v, and after inserting new vertices, Dv tends 
to become larger. Notice that Dv is defined just immediately after v is introduced to the mesh; it is 
not defined based on the final mesh. The next lemma will discuss the relationship between D~ and Dp of 
parent vertex p = p(v). LEMMA 5.2. [DENSITY RATIO RELATIONS] Let v be a vertex with parent p = p(v) if 
there is any. Assume that ev > C . ep. Then D~ <11_~6~ + ~. PROOF. If v is inserted inside the picking 
region of a bad tetrahedron r, p is then on the circumsphere of T. Thus ev > (1 -6).Rr, and [[v-p[[ < 
(1 + 6)Rr, where Rr is the circumradius of r. If v is inserted inside the picking region of an encroached 
boundary triangle or segment ~u, then p is inside the circumsphere of ju. Thus ev > (1 - 6)R~, and ]]v 
- p[[ > (1 + 6)R,, where R, is the circumradius of #. In both cases, we have From the 1-Lipschitz condition 
of the local feature size function lfs(), we have  giN(V) < l/s(p) + IIv -Pll 1+6 <_ D~,. ep + 1--~6e,, 
~_ 1+6 <_ e~+ _~e~. 1 The lemma follows by dividing both side by e~ > 0. [] THEOREM 5.1. [BOUNDED DENSITY] 
There are fixed constants D1 _> 1, D2 > 1 and D3 > 1 such that ]or any vertex v inserted or rejected 
at the picking region of a bad tetrahedron, Dv < DR; for any vertex v in-serted or rejected at the picking 
region of an encroached boundary triangle, Dv < D2; ]or any vertex v inserted or rejected at the picking 
region of an encroached bound- ary segment, Dv < D1. Hence, there is a constant D = max{D1,D2,D3} such 
that Dv _< D ]or all mesh vertex v. PROOF. We prove the theorem by induction. First consider any original 
input vertex p, the length ep of the shortest edge connected to p is at least lfs(p) from the definition 
of Ifs(p). Thus Dp = ifs(v) < 1. Then ep assume that the lemma is true for the parent vertex p of vertex 
v. Hereafter, let a = ~=~. If v is selected from the picking region of a tetra- hedron r with radius-edge 
ratio at least ~, then ev > (1 - 6)0o" ep. Therefore, by above Lemma 5.1, we have 1 + 6 Dp aDp my< I_~+ 
(1-6)80 <a+ 80  Notice that here point p could be an original input vertex, or a Steiner vertex. In 
other words, we have Dp < max{D,,D2,D3}. Thus a sufficient condition that one can prove that Dv < Ds 
is max{Di,D2, DR} < Ds  (5.1) a + (1 -6)~0 If v is selected from the picking region of an original 
sliver T, then ev >_ ~ ep. Here p is an original input vertex, i.e., Dp < 1. Apply Lemma 5.1 to v. Thus 
a sufficient condition that one can prove that Dv < Ds is (5.2) a + .v~'3~ _< D3 10 Then consider that 
v is selected from the picking region of a created sliver T. There are three cases about the parent element 
f(r) of v: .f(r) is a sliver; f(T) has large radius-edge ratio; f(T) is an encroached boundary triangle 
or segment. 1-5 If parent element f(T) is a sliver, then ev _> i~b.ep. Here, we have Dp _< D3. Thus 
a sufficient condition that one can prove that Dv < D3 is (5.3) a + a-~ < Da If parent element f(T) is 
a tetrahedron with large radius-edge ratio, then ev > 1 ~__A. ep. The fact that p is inserted from f(r) 
with large radius-edge ratio implies that ep > (1-5)Q0 &#38;(p), where p(p) is the parent element of 
vertex p. Apply Lemma 5.2 to vertices v and p(v). Notice that Dp(p(v)) < max{D1, D2,Da}. Thus a sufficient 
condition to prove Dv < D3 is (5.4) a + 2a 2 + 2a 2 max{D1, D2, D3} < Da 0o We then study that the parent 
element f(T) is an encroached boundary triangle or segment. We first consider the scenario that f(V) 
is encroached by a sliver 1-5 directly or indirectly. Thus we have ev >_ y~b. ep. Notice that parent 
vertex p is from a boundary face or segment. Then a sufficient condition to prove Dv < D3 is max{D1,D2} 
 (5.5) a + a _< D3 b We then consider the scenario that f(T) is" en- croached by a tetrahedron # with 
large radius-edge ratio directly or indirectly. Thus we have ev > I~__A. ep. If 1-5 f(T) is encroached 
directly by #, then ep > 2(~'ec~' where c~ is the circumcenter of tetrahedron #, i.e., the parent vertex 
ofp. If f(T) is encroached by the circum- center p(p) of a triangle that is encroached by #, then we 
have ep(p) _> ~1-5. ec~. Because # has large radius- edge ratio, we have ec, > (1 - 5)Ooev(c, ). Similarly, 
we apply Lemma 5.2 to vertex v, p, p(p) and c~. Notice that parent vertex p(c~,) of c~ could be from 
interior or on boundary. Then a sufficient condition to prove Dv _< Da is (5.6) a + 2a 2 + 2vf2a 3 + 
4a 4 + 4a 4 max{D1, D2, D3} _< D3 Qo If V is selected from the picking region of a boundary triangle 
~u then e. > 1-6 -v'~(1+6) " ep. Here parent p could be the circumcenter of a tetrahedron with large 
radius- edge ratio or a sliver. In other words, Dp < D3. Thus a sufficient condition that one can prove 
that Dv <_ D2 is (5.7) a + V~aD3 _< D2 If v is selected from the picking region of a boundary segment 
#, then ev > -1-6 v~(I+5) "ep. Here parent p could be the circumcenter of a tetrahedron or a boundary 
triangle. In other words, Dp < max{D2, D3}. Thus a sufficient condition that one can prove that Dv < 
D1 is (5.8) a + Vf2a max{D2, Da} < 91 Notice that some inequalities are satisfied if other inequalities 
were satisfied. One can show that above inequalities are simultaneously satisfied if we choose D3 ~ ~0(a 
+ 2a 2 -{- 2Vf2a a + 4a 4) + 4a 5 + 4Vf2a 6 ~o - 8a ° ab + a2 + vf~a3 Da _> b-2a 3 D3 _> a+~/3a, D2 
= a + vf2aDa, D1 : a+vf2a 2 +2a2D3. [] Thus, to guarantee a good grading on the final mesh generated, 
we need that Q0 > 8a 6 and b > 2a 3. The following theorem concludes that the generated mesh has good 
grading, i.e., for any mesh vertex v, N(v) is at least some constant factor of Ifs(v). Ruppert and Shewchuk 
had similar theorems for classic Delaunay refinement methods; see [13, 14]. THEOREM 5.2. [GOOD GRADING] 
For any mesh vertex v generated by refinement algorithm, the distance con-nected to its nearest neighbor 
vertex u is at least zla(v) D+I * The proof is omitted here. Ruppert showed that the nearest neighbor 
value N(v) of a mesh vertex v of any almost-good mesh is at most a constant factor of lfs(v), where the 
constant depends on the radius-edge ratio. The above Theorem 5.2 shows that the nearest neighbor N(v) 
for the sliver-free Delaunay mesh is at least some constant factor of lfs(v). Then we have the following 
theorem. THEOREM 5.3. [LINEAR SIZE] The size o] the gener- ated sliver-free Delaunay mesh is within a 
small con-stant ]actor o] any almost-good mesh for the same do-main, where the constant depends on the 
radius-edge ratio of the meshes. This theorem also implies that given an almost-good mesh with n vertices, 
our refinement algorithm will remove the slivers by introducing at most O(n) new mesh vertices. Thus 
the time complexity of the algorithm is O(n log n) given an almost-good mesh with n vertices. Discussions 
In this paper, we present a refinement based method that guarantees to remove all slivers in the mesh. 
In other words, any tetrahedron generated in the mesh has radius-edge ratio no more than Q0 and the volume 
is at least a0 times the cube of its shortest edge length. Notice that the ao derived from all the proofs 
may be too small for any practical use (even it is better than previous results [2, 5]). We would like 
to conduct some experiments to see what a0 can guarantee that there is no small slivers created. Recall 
that the termination guarantee does not depend on the definition of sliver. Only the existence of point 
p, which will not introduce small slivers, in the picking region depends on the sliver definition. Based 
on this observation, we can have a variation of this algorithm. We remove a tetrahedron T with small 
value a(T) only ff we find a point p in the picking region of 7- such that the new tetrahedra with circumradius 
less than bRr is better (with larger V/L 3 value than a(r)). In other words, there is a point p inside 
the picking region to improve the local mesh quality. Moreover, we could have different definitions about 
slivers depending upon the location of the tetrahedron: inside or near the domain boundary. Then using 
the same proofs as before, we can prove that it will generate a sliver-free three-dimensional mesh with 
termination and quality guarantees. References [1] CAVENDISH, J. C., FIELD, D. A., AND FREY, W. H. An 
approach to automatic three-dimensional finite element mesh generation. Internat. J. Numer. Methods Engrg. 
el (1985). [2] CHENG, S. W., DEY, T. K., EDELSBRUNNER, H., FACELLO, M. A., AND TENG, S. H. Silver exudation. 
 In Proc. 15th ACM Symposium on Computational Ge- ometry (1999), pp. 1-13. [3] CHEW, L. P. Constrained 
Delannay triangulations. Algorithmica 4 (1989), 97-108. [4] CHEW, L. P. Guaranteed-quality delaunay meshing 
in 3d (short version). In 13th ACM Sym. on Comp. Geometry (1997), pp. 391-393. [5] EDELSBRUNNER, H., 
LI, X. Y., MILLER, G., STATHOPOULOS, A., TALMOR, D., TENG, S. H., I.INGOR", A., AND WALKINGTON, N. Smoothing 
and cleaning up slivers. In A CM Symposium on Theory of Computing (STOCO0) (2000). [6] EDELSBRUNNER, 
H., AND SHAH, N. R. Incremental topological flipping works for regular triangulations. Algorithmica 
15 (1996). [7] LI, X. Y. Functional delannay refinement. In 7th In-ternational Conference on Numerical 
Grid Generation in Computational Field Simulations (2000). [8] LI, X. Y. Sliver-free Three Dimensional 
Delaunay Mesh Generation. PhD thesis, University of Illinois at Urbane-Champaign, 2000. [9] LI, X. Y., 
TENG, S. H., AND 0NO6R, A. Biting: advancing front meets sphere packing. Int. Jour. for Numerical Methods 
in En9 (2000). [10] MILLER, G. L., TALMOR, D., TENG, S. H., AND WALKINGTON, N. A delannay based numerical 
method for three dimensions: generation, formulation, and partition. In Proc. 27 th Annu. ACM Sympos. 
Theory Comput. (1995), pp. 683-692. [11] MILLER, G. L., TALMOR, D., TENG, S. H., WALKING- TON, N., AND 
WANG, H. Control volume meshes using sphere packing: generation, refinement, and coarsen- ing. In 5th 
International Meshing Roundtable (1996), Sandia National Laboratories, pp. 47-61. [12] MITCHELL, S. A., 
AND VAVASIS, S. A. Quality mesh generation in three dimensions. In ACM Symposium on Computational Geometry 
(1992), pp. 212-221. [13] RUPPERT, J. A new and simple algorithm for qual- ity 2-dimensional mesh generation. 
In Third An- nual ACM-SIAM Symposium on Discrete Algorithms (1992), pp. 83-92. [14] SHEWCHUK, J. R. Tetrahedral 
mesh generation by delannay refinement. In l~th Annual ACM Symposium on Computational Geometry (1998), 
pp. 86-95. [15] STRANG, G., AND FIX, G. J. An Analysis of the Finite Element Method. Prentice-Hall, 1973. 
[16] TALMOR, D. Well-Spaced Points .for Numerical Meth- ods. PhD thesis, Carnegie Mellon University, 
1997.  
			