
 I. Roubine Informatique Internationale Centre de Ddveloppement de Sophia-A, ti~olis 06560 Valbonne -FRANCE 
 Abstract. the pare|tel processing faciliLie~ of Ada are band,on ihe ¢onceoL oF rendezvous, uhich introduces 
a liohl couo|inobeiuaen two coo~eratino tasks, because of the a~V~setrv of ~he rendezvous, and of the 
t~oing'systen, these Facilities cannot be used direct|u in a,¢ePtein nuRber of cases uilh oarticular|u 
severe constraints on "the susie, in terns of size. Flexibilitu or ex[ensibilitt#, ge indicate so~e:t~pica| 
such cor, straints, and ~nvestioate ~ossibte so|utions in Ada. Y~e Derfornance oF such solutions-is analuzed, 
teadino to an ~rov~d solution,uhich is then sh0un to be aoplicab|e to "a largeVarie~ oF situations. I 
INTRODUCTION The parallel processing facilities o~ Ada (OdD ~983) are based on the powez~ful concept 
o~ rendezvous. It is characterized by a tight coupling between two tasks, ano by an asymmetric naming 
scheme, whereby the caller o~ an entry must name the other task, while the celled task generally does 
not know the identity o~ its caller. [his paper reports on an investigation per~for~d in order to test 
the suitability of the language to program large systems upon which a certain number o~ stringent requirements 
ape imposed, especially in terms o~ ~le×ibility and extensibility. ~hese constraints are detailed in 
section ~. In seeking adequate solutions to our problem, we have been substantially inspired by the 
ideas c~f Lauer ~ Needham (19'78), who make a parallel between the so-called message-oriented and "l:mocedure,oriented 
systems [we ~ound it more appropriate, in the context o~ Ade, to use the term "trar~saction" instead 
o~ "procedure" to reset to the latter approach). Both approaches are described in section 3, where prel~minary 
 solutions are proposed. In section 4, these solutions are examined with respect to the original requirements, 
and section ~ pPopo=e$ improved solutions that exampli?y the use crf Ada taskinE primitives in what can 
be viewed as a typical problem. * Ada is a registered trademark crf the U.S. Government (Ada dolnt Program 
Ofgice ) 2 PROB_ENDESCRIPTION In order to focus our attention on a concrete example, we will consider 
the case of a system that can process various requests in order to implement some complex functions. 
For example, one can think of a telephone switching system, where, for each incoming cell, various operations 
must be performed, such as decoding, routing, transmitting, logging, etc.. We impose a variety of constraints 
on the system, among which: - Size and Power: a power increase is essentially translated by a replication 
of some part of the system. Thus, when a request must be handled, several possible (similar) units could 
be available. The selection of the appropriate "server" is therefore done dynamically. - Flexibility: 
it should be possible to handle a given request in one of several different ways without effect on the 
behaviour of the system (this Kind of requirement is also frequent in systems that implement software 
redundancy). - Extensibility: it should be possible to add new kinds of requests, or new ways to handle 
a request, without incurring recompi!ation costs if they can be avoided. In some such systems, with no 
downtime, these changes must be installed while the system remains in operation! - EFficiency: the intricacies 
of a solution should not have an adverse effect on the performance of the system. One should note that 
each of these constraints is not overly severe when taken in isolation. Most of the difficulties stem 
from their conjunction. 3 POSSIBLE APPROACHES The implementation of a complex function is viewed as 
a sequence of operations that have to be performed. These operations are performed by specialized (software) 
processors, operating on some input and producing some possible output, which may influence the subsequent 
operations. For each operation, a request must be made to the appropriate processor. Two major strategies 
are distinguished, called respectively the "message approach" and the "transaction approach". 3.1 The 
message approach In the message approach, a request is formulated as a "message", i.e., a set of data 
items that identify both the kind of action to be performed, and the data it is to be performed on. A 
message is "sent" to a designated server or group of servers (or, in some cases, to any server) in an 
asynchronous fashion, in that the sender does not wait for any reply. The message approach involves more 
than just message communication: because of this form of communication, the application is structured 
so that each processor decides, once its own processing is finished, which request should be made next, 
and to whom. One could thus say that each server "passes the task on" to the next. . . . . . . J . , 
. S M: ....... >: S  M : s :: .... . . . . . = . . . , . , °, . ,  (S = server -M = message) Figure 
1: messaKe approach 3.2 The transaction approach In the transaction approach, each request is imolemented 
as a collaboration between a requester and a server: the requester initiates the request, with appropriate 
input parameters; the server then pez-forms the request while the requester waits for its completion,~ 
at which point results are transferred back. The same requester can then proceed to the next request 
in the same manner. A request can thus be viewed as a transaction between the requester and the server. 
 in this case, all the decisions con~ernin~whicn requests should be made, and to whom, are localized 
in the requester, leading to a clear separation between the basic functions implemented by. the servers, 
and the hiEh-level ones that are implemented in the requesters. r ..,., S a ( r . .. ° . S a < 
 .°.,. r .... S a < ..... (R = Requester -S = Server) [r = request a = answer) FiEure 2: transaction 
approach It can be noted that the cooperation paradigm used in the transaction approach is very close 
to the notion of rendezvous in Ada. .-, %...:. = . 4 INITIAL SOLUTIONS In either approach, the constraints 
described in 2 cause two problems that must be addressed: firstly,the appropriate server that will be 
the destination of a message, or the target of e transaction request will have to be selected dynamically; 
secondly, it should be possible for servers of different kinds to handle the same request. Ada offers 
a certain degree of dynemicity in the way tasks can be created and named, by the use of an access type 
designating task objects. However, such an access type can only designate tasks of one given type. As 
our requirements are somewhat more demanding, we are led to associate a specialized interface task with 
each server. All interface tasks corresponding to a given kind of transaction (or message] are of a unique 
type, and they are identified by access values. Each server will have the responsibility of allocating 
its own interface. 4.1 Solving the dynamic selection problem The dynamic selection mechanism can now 
be implemented as follows: for a given Kind of request, we will introduce a "dispatch" task that keeps 
a list of the servers presently available to handle the next request of that kind. When a server is ready 
to handle a request, it informs the dispatcher, and passes along the identity of its interface task (it 
is actually the identity of this interface, rather than that of the server itself, that will be saved 
by the dispatcher]. When a request must be issued, the requester obtains from the dispatcher the identity 
of the next available server interface, and can issue the request directly to that interface. Thus, requesters 
and servers are isolated from each other as much as possible. The typical form of a dispatcher is something 
like: t,ask DISPATCHER i__s -- INTERFACE is an access type to interface tasks entry available (I: in 
INTERFACE); --~AILABLE is call~ by a server when ready to accept a --request. e__~find (I: out INTERFACE]; 
O is calleo~y a requester to obtain the identity --of the next available interface. end DISPATCHER; 
task body DISPATCHER i_s --Here should be some data structures to maintain pool --of available interi~aces. 
 function emotv return BOOLEAN; ~-~e~ns TROE-T~ere is no available interface.  ~OOD select accept 
available [I: in INTERFACE] do --save I in pool-- end available; or when not empty => --e~o~-~ind 
(~; out INTERFACE) do ~:= --some interface takeR-from pool end find; end select; end l~o; end D~PA~R; 
 In the gollowin6, we will assume the existenc~:~:~ehi~oiaiSPatcher, operating on interface tasks. We 
can now attempt ~i:~:~&#38;~ solutions for both of the approaches identified. , . - 4.2 Preliminary solution 
with messages -. The basic requirement of a message passing sMs%em is that a sender is not required to 
wait for the receiver when ;~s message is sent. As a consequence, the messa£e must be queued somehow. 
The canonical Ada solution consists in introducin£ an auxiliary task £o take the message ÷tom the sender, 
and wait until the receiver is ready to acoe4~t it. The messaKe will actually be delivered to the interface, 
whose main purpose is to bring together the messenger and the receiver in a three-party rendezvous, as 
illustrated below. task tvDe RECEIVER INTERFACE is entry z-eceive [In Msg: in-~SSAGE); " " --~is entry 
ls ~alleo oy the messenger, which passes the --message along as a parameter. entry transmit [Out Ms~: 
out MESSAGE); --J nis entz-y is caIied byte actual receiver to obtain --the message. end RECEIVER_INTERFACE; 
tvoe RECEIVER is access RECEIVER_INTERFACE; task body RECEIVER_INTERFACE is fOOD select accept z'eceive 
(In_I~s£: in MESSAGE} do ~zeot transmi~ [Out=~s~: OUt ME~A~E) do ---Jut Ws~ := In MS~, " ' -- end traSsmxt 
; end ~eceive; oz___/ terminate; end sezecz ; end I~6o ; end REUEI~ INTERFACE; A messenKer task is equally 
simple: task tvoe MESSENGER TASK is --entz-v send (M: -in ME~3AGE: To: E6RECEIVER); end MESSENGER_TASK; 
-- MESSENGER is access MESSENGER_TASK; task b_QdxMESSENGER TASK is -Parcel : MESSAGET- Destination : 
RECEIVER; begin accept send [M: in MESSAQ£; To: ~6 RECEIVER) do --durin£ the-~endezvous, "-The task 
merely saves the --messa£e and the identity o9 the destination. Parcel := M; Destination := To; end send; 
 --The messenEer now waits for the message to be accepted, --then dies. Destination.receive (Parcel); 
 end MESSENGERTASK; 4.3 Preliminary solution with transactions Contrarily to a messeRe system, in the 
case of transactions, the requester must wait for the result of the transaction, thus reenactin R the 
Ada rendezvous. Unfortunately, the requester does not know the identity of the server, and cannot therefore 
rendezvous directly with it, havinR to invoke a Riven server interface instead. On the other hand, the 
interface can only accept calls from the server; it cannot call the server directly, for otherwise, the 
interface type would be dependent on the server type, and would thus defeat the very purpose of interfaces, 
wiz. to allow requests to be handled by different types of servers. The transaction must therefore be 
performed in three distinct steps: (a) the server obtains the input parameters from its interface [start 
of transaction); (b) the actual actions are perfo~ed; (c) the server passes the output parameters back 
to the inter~Face (end of transaction). If no transaction has been requested, the server will wait at 
step a. The requester is blocked until the end of the transaction. task tvoe SERVER INTERFACE is --entry 
request (In ParamE-: in ... ; Out Params : 55t ) --This entry is calle0 oy a requester to enter a --transaction 
entry start transaction (Input : out ... ); --]nis enEry is called by the server to obtain the --parameters 
for the next transaction. e__~ end transaction (Output : in ... ); is eStry is called by the--server 
when the work is --done, to release the requester, and pass the result --parameters. end SERVER_INTERFACE; 
 tvoe SERVER is access SERVER_INTERFACE; task body SEBVER_INTERFACE i_~  -- nooo select accept request 
(In Params : in ...; OuR Params : ~Jt ... ) d_o acceot start transaction ~6put : out ... ) d__o --'--r~put 
:=-In Params; end start trans~ction; --~The interface waits here while the server --performs the work. 
accepDt end transaction [Output : in ... ) do Out PaEams := Output; ---- end enO-transaction; end request[ 
 o_£ terminate ; end select ; end IY550; end BEBVEIT~fNTERFACE; A typical server will contain a sequence 
such as¢~,~m~i~G~J ~ My_Interface : SERVER := new SERVER_INT~£; OISPATCHER.available (My Interf@ce) 
My_Interface. start_trans~ction ~ [... i ; --perform the request My Interface. end transaction (...); 
 end iOOO; " . . . end; 5 EXAMINATION OF THE INITIAL SOLUTION In the preliminary solution, we have 
addressed ~WO aspects of the initial set of constraints: the dynamic switching requirement, and, to a 
large extent, the flexibility requirement, since we have made no assumption on the structure of a receiver 
[rasp. server in the transaction approach). These tasks can be programmed in any we M that is consistent 
with the protocol that has been chosen. We must now consider how these solutions affect the efficiency 
and extensibility aspects. In terms of efficiency, the problem may come from the introduction of extra 
interface tasks, and also, in the mefsege approach, of the creation of an extra task for each message 
to be transmitted. Fortunately, owing to the work of HaDermann G Nessi [1979), it can be observed that 
a task that contains only accept statements or selective waits [possibly nested inside loops ~ can be 
subjected to a very efficient optimization whereby no separate physical "process" need be created to 
execute such a task. This is in particula] ~ the case of the receiver and server interfaces. However, 
no such optimization can be performed on a messenger. From an efficiency point, of view, the transaction 
approach is satisfactory, but the message solution should be improved. With respect to extensibility, 
one must consider the possibility of adding new kinds of requests, or new Kinds of messages. It is possible 
to add new inter-face tasks for each kind of request oF message that can be handled by a given task. 
However, a receiver [rasp. server) communicates with its interface by issuing an entry call and cannot 
wait for the first message [rasp. request) among different Kinds:: One solution would be to encode message 
{or r~uest} kinds with a certain key. Thus we would not have to ex~end~ the existing inter.~aces, but 
only the interpretation of keys. Note that this would precluOe the use of an enumeration type for "the 
key, singe the type would have to be modified whenever a new Kind of request is added to the system; 
hence, the key should be of an integer type. This unfortunately compromises the safety introduced by 
strong typing. 6 IMPROVEMENTS We first study the efficiency problem posed by the message approach. 
We then consider mechanisms to allow multi-way waits in order to increase the flexibility; such mechanisms 
are presented in the server approach, and can be easily extrapolated for the message approach. 6.1 Efficiency 
improvement for the message approach In order to improve the efficiency, ¢ scheme must be devised, where 
the messenger does not have to initiate the transmission. This can be achieved in two steps: when the 
sender sends the message, the receiver interface is notified that a message is pendin&#38;, and is given 
the identity of the messenger. When the destinee is ready to accept a message, it is given the identity 
of the messenger, and it can then issue an entry call to obtain the actual message. This solution is 
feasible only if the receiver inte~ace can respond sufficiently quickly, so as not to unduly delay the 
sender. The MESSENGER INTERFACE task type now becomes: task type MESSENGER_INTERFACE i_s entry send 
(Msg in MESSAGE;From z~ MESSENGER; To z~RECEIVER); -- This entry is ca~ed by a senders who gives the 
message to be sent, indicates the destznation (TO), and also the identity of the messenger interface 
itself (i.e., FROM snould always refer t~ the task accepting the -- cell). (Msg : out MESSAGE);  
e itransmit s entry is calle~-~rom the receiver when it is ready --to accept the message. end MESSENGER_INTERFACE; 
task body MESSENGER INTERFACE is Saved_Message: ~ESSAGE; begin ~-'TRe messenger interface when created, 
will obtain the -- message from the senOer, and will immediatel~ notify the --receiver interface. It 
then waits for the recelver to ask --for the message, delivers it, then terminates. accept send (Msg 
: in MESSAGE~ ~rom E6MESSENG_R; To ~RECEiVER) d._o Saved Message :=']is2;To.weTting message [From);.end 
send; acceot transmit (Msg : out MESSAGE) do "-"--~r~g : Saved Message; end transmit; - end MESSENGER_INTERFACE; 
The RECEIVER_INTERFACE is also modified. It is now mostly in charge of keeping track of pending messengers. 
task tvpe RECEIVER_INTERFACE i._s entry waiting message [From : in MESSENGER);--~is entry-is railed by 
a "~essenger to indicate that --there is a message to be sent. The messenger passes --its identity, which 
will be recorded so that it can be --celled beck later for the actual message. ent~ next messenger (Orig 
: out MESSENGER); . . ==--FRis angry is called by thE-~ccuaz recezver wnen it is --ready to service the 
next request: the identity of one --of the pending messengers will be transmitted, and --deleted from 
the memory of the receiver interface. end RECEIVER_INTERFACE; C , .... , . 205 task body RECEIVER INTERFACE 
is " .... " ... -- data stru ure pending --messengers. be~in " : " : --TOdd select ._ acceot waiting 
message (From ::i~ MESSENGER) do --recordthe iOentity FROM-end waiting message; or wnen waitin~ message'COUNT 
= 0 --THis cIause gives a priority to the --MESSENGERs and is waitinLmessage => --This clause wiIl block.the 
receiver if --there is no message pen~in~. acceot next messenEer (Orig : u~ MESSENGER) do Ori~ :=---some 
MESSENGER SeleCZed from-~the --list Kept by the receiver --interface, eccordin E to some --criterion; 
end next,messenger; o_z terminate ; end select; end I~EGo; end FECE~E~INTERFACE; A server could obtain 
the next message by calling the following procedure. procedure get_message (From : in BECEXV~; Msg : 
~Ut MESSAGE] is Sender: MESSENGER; beEin From.next messenger (Sender); Sender.transmit [Ms£]; end get 
message; The RECEIVER_INTERFACE is coded so that a minimum amount of time is spent inside rendezvous, 
so as to maximize the availability to a MESSENGER_INTERFACE; this availability is also increased by the 
priority given to a messen£er over a server through the guards. The time spent while the sender is blocked 
is reduced to a minimum that is commensurate with the time normally spent in a message Kernel to register 
the message. Note that, in terms of implementation efficiency, each MESSENGER_INTERFACE, and each RECEIVER_INTERFACE. 
as well, is now a passive task in the sense of Habermann and Nassi, so that none of the rendezvous involved 
requires a context switch (there will of course be a context switch at some point, at least on a monoprocessor 
system, since the server will eventually take control after the sender), lhe full messaEe transmission 
will require four calls that can be implemented as procedure calls. This is to be contrasted with the 
initial solution, which took only two calls, but with a minimum of three context switches. .~ . =. 6.2 
Pro~rmmminlmulti-wey waits It is worth exeminin~ in more detail what has been achieved by the solution 
presented in 6.1: a messenger still acts as a messase holder, but it will transmit its message on demand 
directly to the server. The purpose of the PECEIVEH INTERFACE is no longer to achieve a three-way rendezvous 
between the messen@er and the server, but merely to keep track of who is waitin~ to transmit messages. 
@essa~es are no lonser queued, but only the identities of messensers are. This can be exploited, since 
when the receiver knows there is a message waiting, it does not have to receive it right away. In this 
way, we can program any selection al~orithm among messages of the same type, by passing some extra information 
concernin~ the messa£e. This can obviously also apply to transactions. In the remainder, we focus more 
on the latter approach, chiefly to present a variety of points of view. The reader will easily transpose 
whet is presented to the case of messages. In order to treat the problem of messages or requests of different 
types, two strategies are possible: pollin~ techniques, or identification techniques. In the first case, 
the server would have to interroKete its different interfaces to find out which of them know of pending 
requests; in the second case, an additional ~eneral interface can centralize the list of requests, and 
tell the server which kind is available. In both cases, a common necessity appears, namely the need 
to siEnal that there is at least one request pendin E [so that the server can be suspended if there is 
none). Each server needs a unique "door bell" so that whenever a new messaKe arrives, whatever its kind, 
the server can be notified. In the solution Kiven below, such a door bell is provided by the task type 
GATE_INtERFACE. task type GATE_INTERFACE i~ e~ si~na~ request; is ent.~ is called by the requester to 
inform the --server that a request has been issued. entry request_pending; --~is entry will block the 
server if no request has been --issued. end GATE_INTERFACE; tvoe GAlE is access GAIE_INIERFACE; task 
body GATE INIERFACE is -----N~uests-: INTEGER ~ 0; --indicates the number of --pending requests that 
have not been serviced. befin -------FOOD --select acceot signal request do N HequestE := N ~e~ests 
+ I; end slgnal request:- o_r w_nen N ReqOests > O => acceot-request pending do .... N Hequests--:= 
N ReqUests -1; end r~quest_pending~ o_z terminate; end select; end o~o~ end ~ATE~TEBFACE; The server 
interface has to be modified sliahtly to signal the server gate of a newly arrived request (this form 
of server interface is extrapolated £rom then one given in 4.3, and from the receiver interface shown 
in 6.1).  task type SERVER_INTERFACE i._s entry initialize [G : iD. GATE); -% ::;~.~;~: > ~_ ::-TSis 
entry is calle~ by the servel when ~e-new InterFace --is allocated, so that ~he SERVER INTEg~E can 
in~oiMm --the gate of a newly arrived request. " i entrv request [In Params : in IN PARAM TYPE; OuT 
Params : 5Ut OUT PAR~ .TYPE); --}his. entry, is~ called b~ the-reque~te~, who will be OlOC~eO unK!l tne 
transactzon is perTormea. entry start transaction (Input : out IN PA~ TYPE)~ rz-~Sis entry is called 
by the server ~o ~start executing --the request. e__~ end t~-ansaction [0utput : in OUT ~AR~ YYPE); 
is ~ntry is al~o called'3y th~ server aster the --request has been executed end SEFWER_INTERFACE ; 
type SERVER is access SERVER_INTERFACE; task body SERVER INTERFACE is Boo--ell : ~A]E; -~-The particular 
gate associated with the server. " Deqin --acceot initialize (G : in GATE) do Door Bell := G; ---- en0 
initialize; iE6o select accest reouest (In Params : in IN PABAM TYPE; ' 0uE Params : 55t 0UT PABA~ ~YPE) 
do Door Bell.signal reauest; acceSt start traRsadtion [Input : out IN_PA~AM_TYPE) d_q ±nDut :=-In Params; 
end start tr~ns~ction; acceot en~ transaction (Output : in OUT PA~AM TYPE) d_o -----OUt Pa~ams := Output; 
---- end enO transaction; end request[ o_r terminate ; end select; end T650 ; end SEFTVE'E fNrEBFACE; 
 A server can wait for any request by a call such as: My_Bate.request_pending; but past this point, 
the server only Knows that theme is a request pending, without Knowing form which source. The part!cula~ 
request must be served by some form o? polling, for instance using conditional entry calls: select 
~ter~ace_1 start_transaction- [ . . ) ; else --select inter-Face 2. start transaction (...); else 
 end select; end seleCT--- This polling can be avoided if inter~aces are identified by a key that is 
 passed to the gate by the requester, and from the gate to the server. In both cases, it is possible 
to use different kinds of interfaces, and therefore different types of parameters, since each interface 
is designated explicitly when the request is serviced. In terms of efficiency, it can be noted that 
all the extra tasks introduced (server interfaces and gate] are passive tasks. The number of calls involved 
to execute a request is five, but with only the minimum number of full context switches possible, namely 
two. ? CONCLUSION The sample system structures that have been considered here are quite typical of 
a variety of complex software systems. Two apparently different approaches have been dealt with, and 
it has been shown that satisfactory solutions can be developed in both cases, One would be tempted to 
think that the tight coupling of the transaction approach is closer to the Ada concept of rendezvous, 
However, a look at the full solutions shows that as soon as all the constraints are taken into account, 
the structure they impose on the overall system prevails over any other consideration, and that the two 
solutions are strikingly similar. In terms of efficiency, the feasibility of the solutions relies on 
known implementation techniques. It is important to stress the desirability of these optimizations. At 
the time of writinK, the author knows of at least two validated Ada compilers where provisions have been 
maOe to incorporate such optimizations. The introduction of small "interface" tasks of reduced complexity, 
whose identity can be passed back and forth, comes as an eleKent solution to a variety of problems. Inte1~aces 
can be considered as one example of objects that are implemented as AOa tasks: they are objects in the 
sense that they -represent a rather passive abstraction (e.K., a communication port). The ability to 
depart from the traditional one-to-one correspondence between tasks and processes seems to be of substantial 
importance in order to make full use of the Ada tasking facilities, lhese can then be of substantial 
use to solve a number of problems that do not have any specific real-time characteristics. A typical 
application is the use of an object-oriented programming style. Related ideas have been presented by 
Hilfinger [1982). On the negative side, one can regret that although an efficient solution can be attained, 
efficiency should impose a certain style on the program. Furthermore, when examinin&#38; the solutions, 
as seen by the implementor of the system, rather than by the user, a certain complexity can be observed, 
which can be t~-acked to the fairly static aspect of the naming and typing rules of the language. REFERENCES 
"~ ~ ""~~" -~~ : ": ~'~. " DoD (1983). Re-Ference Manual -For the Ada Programming Language. ANSIIMIL-STD 
1815A, United States Depert~nt o-F Defense, January 1983. Habermann, A.N. ~ Nassi, I.R. (1980). E?~icient 
Impiementation of Ado ~osks. Technical report C~U-CS-80-103, Department of Computer Science, Carnegie-Mellon 
University, January 1980. Hil£inger, P.N., [19B2]. Implementation Strategies for Ad= Tasking Idioms. 
Proc. Ada~EC Conference on Ado, Crystal City (Va.), October 1982. Lauer, H.C., and Needham, R.M. (19?8). 
On the Duality of Operating System Structures. i.n Proc. Second International ,Symposium on Operating 
Systems, IRIA, Rocquencourt (FRANCE], October 1978. (Reprinted in OperQting Systems Review, 13,~ no.2, 
April 1979.  
			