
 Permission to make digital or hard copies of part or all of this work or personal or classroom use is 
granted without fee provided that copies are not made or distributed for profit or commercial advantage 
and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, 
to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee.&#38;#169; 
1979 ACM 0-12345-678-9 $5.00 THE LOGIC OF A RELATIONAL DATA MANIPULATION LANGUAGE Marco A. Casanova* 
and Philip A. Bernstein** Aiken Computation Laboratory Harvard University Cambridge, MA 02138 ABSTRACT 
A logic for a relational data manipulation language is defined by augmenting a known logic of programs 
with rules for two new state­ments: the relational assignment, which assign a relational expression to 
a relation, and the random tuple selection, which extracts an arbitrary tuple from a relation. The usual 
operations on relations-retriever insert, delete, update-are then defined as special cases of the relational 
assignment, and the for-each construct scanning a relation tuple by tuple is introduced with the help 
of the random tuple selection. 1. Introduction A database contains data that models some aspect of the 
world. The description of a database consists of a set of data structure descriptions and a set of consistency 
criteria for data values. To say that the data values in a database satisfy the consistency criteria 
is to say that the data adequately models the world. As a consequence, users expect to observe consistent 
data and are re­quired to submit updates that will preserve con­sistency. Such updates are called transactions 
[ES2] . Most of the work concerned with the correct­ness of multi-user database systems [BE1,ES2,LA2, 
PA1,ST1,TH1] assumes that only transactions access the database and curb the interaction among trans 
actions by a general correctness criterion. HOW­ever, we know of no attempt to provide a data manipulation 
language (DML) with a logic permit­ting us to prove that a transaction indeed pre­serves consistency, 
or that a set of transactions executed concurrently is correct. A DML logic becomes especially important 
when the set of trans­actions is known in advance, as the general correctness criterion can be tailored 
to the application in question and verified beforehand [LA21 . Examples of such database applications 
are credit card verification, airline and hotel reserva­tion, point-of-sale inventory control and electronic 
funds transfer [BE2]. We will investigate in this paper the logic of a (sequential) data manipulation 
languagej in the future, we plan to embed it in a general parallel language in the manner of [OW1]. We 
view our work as the first step towards studying the correctness of database applications such as those 
quoted above. To support our DML logic, we start by selecting a framework that is adequate to describe 
databases and that has a reasonable underlying logic. In fact, we will argue that the Relational Model 
[C02] is so close to Predicate Calculus that the former can be subsumed by the latter [cA1,MI1,NI1,VA1]. 
Hence, the question of the underlying logic is solved gratuitously. As for the, DML logic, we will augment 
a known logic of programs, Dynamic Logic [PRl], with rules for two new statements: the ?e~ationa~ assignment, 
assigning a relational expression to a relation, and the random tuple selection, extracting an arbitrary 
tuple from a relation. The familiar operations [cH1,co1,HE1,LAII --retrieve, insert, delete, update­-will 
be defined as special cases of the relational assignment. The for-each construct of [SC1] will also be 
given a translational definition. We finally note that our commitment to Dynamic Logic is not essential, 
and our results should be translatable to any .Logic of (non-determini stic) programs. 2. A Iogic for 
Data of Type Relation As mentioned in the Introduction, we choose the Relational Model [C02] as our framework 
for de­scribing databases mainly because it can be assimi­lated into Predicate Calculus. By assimilated 
we mean that the key notions of the former can be re­phrased as some of the very basic concepts of the 
latter (see Fig. 1). The similarities between the Relational Model and Predicate Calculus have profi­tably 
been used before [cA1,MI1,VALI, but the iden­tification of relational schema and first-order theories, 
although clear, appeared only recently (and independently) [NIII. To substantiate the claims of Fig. 
1, let us first review some concepts. In the Relational Model, stored data is viewed as relations (unordered 
tables) and is described by relation schemes giving names to the tables and their columns. An integrity 
asser+ion then becomes a relational expression written in some appropriate language. A relational schema 
R is a set of relation schemes and a set of * Research supported by the Conselho National de Pesquisas, 
CNPq~Brasil , Grant 1112.1248/76. ** Research supported by the National Science Foundation under Grant 
MCS-77-05314. integrity assertions. If a set S of relations, one for each relation scheme of R, satisfies 
all integrity assertions, then S is called a con­ sistent database state of R. FIGURE 1 1. Relational 
Model 2. schema 2.1 attribute name 2.2 relation name 2.3 integrity assertion 3. consistent state 
 3.1 union of underlying domains 3.2 relation extension 1. Predicate Calculus 2. theory 2.1 standard 
unary predicate symbol 2.2 non-standard predicate symbol 2.3 non-logical axiom 3. model  3.1 domain 
3.2 relation Hence, we have paved the way to the following definition: DEFINITION 2.1. A first order 
theory T= (LT,DT) is called a re~ationa~ schema iff (i) LT, the set of non-logical symbols of T, includes 
a finite set of predicate symbols Ri ~Pki (l~i<m) and Aj~lF1 (l~j~n); (ii) the non-logical axioms of 
T, includes T for each Ri exactly one axiom of the form (where ( l:iP~n) k, VX1 . . . Vxk, Ri(xl, . 
. ..xk. )*A~ Ai (X ) 1 Ip=l ) P Moreover, we say that: Ri is a database relation name and is an j att~ibute 
nome (l<i<m; l<j<n); .--­ the special axiom for Ri is the relation scheme (which we abbreviate Ri[Ail, 
.--,Aiki]); of Ri IEDT is an integrity assertion; a model s of T is a consistent database state. 0 However, 
not all integrity assertions can be translated as axioms. The so-called dynamic inte­grity assertions 
[ES1,HA1] impose restrictions on the possible state transitions of the database, rather than on the set 
of acceptable states. A well-known example is: (1) the salary of each employee listed in table EMP must 
be non-decreasing. In [ES1], the prefixes NEW-r and OLD , as in NEW-EMP and OLD-EMP, were proposed to 
indicate which state must provide the value of EMP. We do not judge this approach elegant because it 
alters the definition of interpretation from Predicate Calculus in a fundamental way. Therefore, we pro­pose 
a novel rewrite for dynamic integrity assertions, using pairs of formulae, that avoids this problem. 
(1) is then rewritten as follows: (2) (VeVs(EMPo(e,s) ~EMP(e,s)), de Vsb s (EMP(e,s) AEMPo(e,s )*s> s 
)) where EMPO is a defined predicate symbol whose sole purpose is to freeze the value of EMP in the initial 
state (that is, EMPO plays the role of OLD-EMP). We then define the notion of schema with dynamic integrity 
assertions as follows: DEFINITION 2.2. A triple T= (LT,DT,D+) is called a relatiowl schema with dynamic 
integrity assertions iff (i) (LT,DT) is a relational schema; (ii) D+ is a finite set of pairs of formulae 
of LT, the dynamic integrity assertions. The role of relational schemas WI1l become clear later on when 
we discuss the notion of trans­action. For the time being, it suffices to remember that stored data is 
viewed as relations. Finally, we introduce the notion of a key of a relation: DEFINITION 2.3. Let = 
 LT DT) be a re­ lational schema and Ri[Ail, . . ..Aiki] be the relation scheme of RigLT. A key of Ri 
is a set kC[l,ki] such that l-TVIV~R~)AR(~)A~ Xj=Yj-;=i () j Ek where ;={xl, . . ..xk. =}, ;= {Ylr. 
..rYki}. In words, the value of Ri at any consistent database state of T must be a relation such that 
if two tuples agree on the coordinates m k, they are equal. Note that we allow subsets of k to be themselves 
keys of Ri. Hence, our definition, although sufficient for our purposes, differs from that in [c02]. 
3. A Logic for a Data Manipulation Language Our efforts in this section are directed towards defining 
a DML logic by augmenting Dynamic Logic [PR1] with rules for two new statements--the relational assignment 
and the random tuple selection. The logic thus obtained w~ll be called Relational Dynamic Logic (RDL) 
. In $3.1 we discuss the overall architecture of RDL and then proceed to Introduce the two new state­ments 
in $$3,2 and 3.3. 3.1 The Architecture of Relational Dynamic Logic Let DL[LE,LA,DA,U] be the Dynamic 
Logic over and U (see Appendix I). We assume E, AJ A that there is a set of d~stinguished predicate symbols 
of LE, LR, the stored relation names. We construct RDL by adding two new statements to DL, the relational 
assignment and the random tuple selectlon, together with their corresponding axioms, as discussed in 
~~3.2 and 3.3. To stress the para­meters of Relational Dynamic Logic, we write RDL[LR,LE,LA,DA,U] . We 
say that RDL[LR,LE,LA,DA,U] has an adequate universe iff (i) for any variable x of $ and any An example 
may clarify the construction of Q:: individual a EVU, there is a state 16U such that xl=a; (ii) for anybinary 
stored relation name REIPn and any binary relation u, there is a state R* c Vn I~U such that R1=R*. The 
motivation for this concept follows closely the note in Appendix I and will become clearw hen we discuss 
relational assignments. Finally, we say that a schema T=<LT,DT> is a schema of RDL iff LT coincides with 
L$A, the database relation names and attribute names of T are stored relation names, and the underlying 
deductive system of T is DA. Similarly, we define a dynamic schema of RDL. 3.2 The Relational Assignment 
Examples of relational assignments, using the relation schemes BOOKS IISBN,EDITOR,AUTHOR,TITLE] and WRITERS 
INAME,CITY], are: (1) BOOKSl(a,t) := Zi3e(BOOKS (i,e,a,t) AWRITERS(a, PISA )) that retrieves into BOOKS1 
authors and titles of all books written by Piss citizens; (2) WRITERS(n,c) := 3c (WRITERS(n,c ) A (n+ 
GALILEI +c!= c ) A (n= GALILEI +c= PADUA )) that updates the city listed with Galilei to Padua. Likewise, 
we could give examples of insertions and deletions written as relational assignments. Thus , we achieve 
a certain economy by adding the relational assignment to DL, as just one statement suffices to describe 
the operations commonly pro­vided by existing relational DMLs [CH1,CO1,HE1, LAII (i.e., retrieve, insert, 
delete and update). Our approach to the relational operations iS further justified by the simplicity 
of the relational assignment: DEFINITION 3.1. Formation Rules for the Relational Assignment. R(=) :=A[lI 
={(I,J) 6u2/ I ~JA(V~CV~)(RJ(=) iff I ~ A[~/~1)} is called a relational assigment of RDL[LR,LE,LA, DA,U~, 
where R is an n-ary predicate symbol of LR, X={X~, . . ..Xn} is a set of distinct variables of LE, and 
A[X] is an open Wff of E With free variables xiEZ. 0 Hence, (I,J) is in the binary relation associated 
with iff I and J tR(~) := A[~] !! differ only on R and RJ consists of those tuples =Ev: such that, when 
Z IS given 5 as value, A becomes valid in I. The central result about relational assignments goes as 
follows: THEOREM 3.1. Suppose that RDL[LR,LE,LA,DA,U] has an adequate universe. Then, for any wff q of 
LA, ~u [R(x) := A[x] ]Q 0 Q: where Q: denotes the Wff of XA obtained by replacing each atomic formula 
in Q of the form R(tl,. ..,tn) by A [tl/X~,..., tn/xn] , where A IS a variant of A created by renaming 
bound variables of A that also occur. in Q. R (3) s= BOOKSl(a,t) := 3i3e(BOOKS (i-,e,a,t) AWRITERS(a, 
PADUA ))  (4) Q~qi(BOOKSl ( GALILEE ,i) AINDEX-PROHIBITORUM(i)) (5) [s]Q~~i (2i qe(BOOKS(i ,e, GALILEI 
,i) AWRITERS ( GALILEE , PADUA )) AINDEX-PROHIBITORUM (i))  Calling A the right-hand side of s, the 
equivalence in (5) is obtained by replacing BOOKS1( GALILEI ,i) in Q by A [ GALILEI /a,i\t], where A 
is created by renaming i in A by i (avoiding conflict with the use of i in Q). The usual relational operations 
are defined as follows: DEFINITION 3.2. Relational Operations. (a) retPieve R(Z) 2J? 2ere A[~l R(;) 
:= A[~l , where R does not occur in A  (b) insert R(;) tikere A[=I = R(X) :=R(~) vA[=I (c) deZete R(z) 
tikere A[=I = Fi(~) :=R(~) A-A[~] (d) update R(~(;)) wkere A[;I = R(;) := ~~(R(j) A (=A[~]*==~) A (A[~l+~= 
=(~))) .  0 The translation of the update, the only non­trivial one, should be read as follows (where 
R is the relation name affected in a transition from I to J): (6) fm eack t~ple ?I in RI do if Y1 does 
not satisfy A tken add ~1 _to Rj; ebe add ~l(yl) to Rj; 3.3 The Random Tuple Selection and the For-each 
Construct The purpose of introducing the random tuple selection is confined almost entirely to the defi­nition 
of the for-each construe-t, the main theme of this section. The for-each construct has the same flavor 
as the synonymous construct of [SCII: (1) for each WRITERS(a,c) where c= USA key NAME do .:=0; for each 
BOOKS(i ,e ,a ,t )tihePe a =akey ISBN do n:=n+l end; if .>10 then dispZay a; end that only displays American 
authors with more than 10 books published. In terms c$ a loose ALGOL with the relational assignment, 
the for-each construct is defined as follows: (2) for each R(=) where A[~] key Kdo s end = A. Ro(~) := 
fake ARo(;) ; B. R (~) := R(~) AA[?); C. uzzZe 37(R ~-(y)) do D. begin RAND MTUPLE (~iz); E. ~(;) :=~(y)vy 
=x; F. s; G. RT(~) := R(j) AA[~] A-3~(Ro(~) A~[K] =~[K]); end where ;= {xl,..., ~} is a set (of distinct 
variables of K encodes ,3 key of R; and ~ and ~ are E; auxiliary <predicate symbols of LR. The definition 
of the for-each sketched above can be explained as follows: A. the set of tuples already scanned is the 
value of ~ (equal to @ initially); B. the set of tuples eligible for scanning comprises the value of 
~ (equal to the set of tuples in the initial value of R and satisfying A, initially) ; c. the loop will 
terminate when all tuples have been scanned. D. a random tuple is selected from those not yet scanned, 
hence giving the system freedom for implementing the scanning operation; E. the tuple selected above 
is added to the value ofR.  o F. s is executed; G. as s can modify the value of R, we have to recompute 
the set of tuples not yet scanned. This is done with the help of the key K as follows: a tuple in the 
current value of R iS eligible for scanning if it satisfies A and, moreover, its key value does not match 
that of any tuple already scanned (hence the third conjunct in G). In order to express (2) in DL, we 
need the relational assignment, which we already have, tests over quantified wff s, which are readily 
obtained, and a new statement, the random tuple selection, defined as: DEFINITION 3.3. Formation Rule 
for the Random Tuple Selection. RANDOMTUPLE( R;~) ={(I,J) EU2/I~JAR1(;J)} x is called a random tuple 
selection of RDL[LR,LE, LA,DA,U], where R is an n-ary predicate symbol of LR and X= {xl,... ,xn } are 
distinct variables of 0 E Hence, (I,J) is in the binary relation associated with RANDOMTUPLE(R;~) iff 
I and J differ only on ;, and ~J comes from RI. The central result about the random tuple selection goes 
as follows: THEOREM 3.2. Suppose that RDL(LR,LE,LA,DA,U] has an adequate universe. Thenr for any wff 
Q of LA, ~u[RANDOMTUPLE (R; Z)l Q= Vi2(R(=)+Q). 0 We emphasize that the random tuple selection is in 
itself uninteresting, but it gives precision to the definition of the for each construct sketched in 
(2) . DEFINITION 3.4. The for-each Construct for eaeh R(;) whe~e A[x] keu Kdo s end = ~(y) :=fa2se A~(Y); 
RT(~) :=R(~) AA[7]; (dy(~(j?) ?; RANDOMTUPLE( R.;;); ? is called a for-each construct of RDL[LRrLE,LA,DA, 
and ~ are n-ary predicate Ulr where R? % sYmbOIS in LR (R. and ~ are chosen anew for the translation 
of each for-each construct occurring in a program) , z={xl, . . ..xn } are distinct variables of LE, 
A[~] is a wff of with free variables XiC%, Kc{l, . . . ,n} is aL~On-minimal key of R, s is a statement 
of RDL. 0 Although no special rule for reasoning about the for-each construct is needed, an induction 
rule on the number of tuples already scanned has been found useful [CA2]. The basic idea lies in intro­ducing 
an invariant with certain properties in order to hide the translation contained in Defini­tion 3.4. With 
such a rule one can prove, for instance, that p-[w]Q, where: (3) P= true Q = di Va dt (BOOKSo(i , SPRINGER 
,a ,t ) = BOOKS(lOi , SPRINGER ,a ,t )) w = for each BOOK(i,eJart) key EDITOR,AUTHOR, TITLE do if e= 
SPRINGER then update BOOKS (lOi ,e ,a ,t ) where i =iAe =eAa = a A t =t; end using as inductive assertion: 
(4) I = Vi da d(B OOKSo(i (, SPRINGERER ,a ,t ) -BOOKS(lOi , SPRINGER ,a rt )) The rule we have in mind 
is stated below. THEOREM 3.3. Suppose that RDL[LR,LE,LA,DA,U] has an adequate universe. Then Rule FE 
stated below is valid in U (FE) 1. -@;(Ro(j)) AP+I, 2. R(~) AA[; ]AI +[s]I,  V;(R(;)AA[;l-31(Ro(~)A 
A Yi=Xi))AI+Q , (-,. P+[w]Q where R,RO are predicate symbols in LR, as in Definition 3.4, P is a wff 
of LA, possibly containing ~, I is a wff of LA, possibly containing R. but with no occurrences of XiCZ, 
I is obtained from I by replacing each atomic formula of I of the form ~(~) by Ro (;) A=+=, and w = 
 fop each R(=) ti?tere A[~] key K do s end .n Rule FE should be read as follows (we remind that R. holds 
the tuples in R already processed) : Premisse 1 assexts that, before entering the for-each, P and the 
fact that no tuple was processed must imply I. premisse 2 asserts that if s is started in a state J where 
~J holds a tuple in RJ satisfying A, ~J iS already in ~ (see Defi­n~tion 3.4) and I holds for all tuples 
in NJ, except ~J, then s must lead to state K where I holds for all tuples in R. (in­cluding =J) . K 
 Premisse 3 asserts that, when the fo~-eaeh ends, I and the fact that all tuples have been processed 
must imply Q. 5. Conclusion In retrospect, Dynamic Logic was augmented to 3.4 Summary include a relational 
data manipulation language, creating a logic of programs that we called The relational data manipulation 
language we Relational Dynamic Logic (RDL). RDL contains twoconsider in this paper is created by adding 
two axioms, in addition to those of DL, for the new basic statements to those considered in DL, the relational 
assiqnrnent and the random tuple selec­relational assignment and the random tuple tion. These new axioms 
are sound and the wholeselection. The corresponding logic of programs, formal system can be made complete, 
with certain called Relational Dynamic Logic (RDL) , is obtained provisos as in [HA2]. by adding two 
new axioms to the system of DL: The virtue we see in our work lies in its simplicity: the four operations 
on relations-­(RS) [WNDOMTUP~(R;z) lQ~Vz(R(z)+Q) retrieve, insert, delete, update--were defined in terms 
of the relational assignment and the for-each Theorems 3.1 and 3.2 assert that Axioms RA and construct 
was accounted for with just one more RS are sound and, moreover, that the assertion statement, the random 
tuple selection. language is expressive (in the sense of [HA2]) ( Finallyr from the point c)f view of 
programfor the new statements. Hence, following [HA2], verification, the Relational Model was shown to 
we can state: provide a reasonable programmin~ language inter­face to databases. No special. purpose 
logic isTHEOREM 3.4. RDL Arithmetical Completeness. needed, as the Relational Model can be understoodSuppose 
that RDL[LR,LE,LA,DA,U] has an adequate as an application of the very basic concepts ofuniverse, LA contains 
arithmetic, each stake in Predicate Calculus. the universe U assigns the standard interpretation to arithmetical 
symbols and the deductive system for LA is complete for U. Then, for any wff Q REFERENCES 0 [BEII Bernsteinr 
P.A. et al. The ConcurrencyThe relational operations--retriever insert, Control Mechanism of SDD-1: A 
System fordelete, update -and the for-each construct, as Distributed Databases , Computer Corporationdefined 
symbols of FU)L, need no special treatment. of America Tech. Rep. 77-09, Dec. 1977. However, an induction 
rule (omitted for reasons of brevity) on the number of tuples already scanned [BE21 Bernstein, P.A. et 
al. An Approach to the can be stated in order to hide some details of the Design and Implementation of 
Interactive definition of the for-each construct. Information Systems , (Draft, Nov. 1977). [CA1 ] Cadiou, 
J.M. On Semantic Issues in the Relational Model of Data , Proc. Int. Symp. 4. Transactions on Math. Foundations 
of Computer Science, Given a relational dynamic schema Gdansk, Poland, Lecture Notes in Computer T= (LT,DT,D;), 
we say that a program s is a Science , Springer-Verlag, Sept. 1976. transaction w.r.t. T if s preserves 
the con­ [CA2 ] Casanova, M-A. The Logic of a Data Mani­sistency of the database described by T, that 
is, pulation Language (technical report iniff s satisfies two conditions: progress). (i) s maps consistent 
states into con­ [CH1] Chamberlain, D.D. et al. SEQUEL 2: A Uni­sistent StateS; fied Approach to Data 
Definition, Mani­ (ii) for each dynamic integrity assertion pulation and Control , IBM Tech. Rep. (A,B) 
ED:, if s starts in a state satisfying A, RJ1798, June 1976. s mUSt terminate in a state satisfying B. 
[Col] Codd, E.F. A Database Sublanguage Founded It would certainly be helpful if we could on the Relational 
Calculus , Proc. 1971 ACM find a formal characterization of (i) and (ii). SIGFIDET Workshop on Data Description, 
But as we noted in $3.4, Relational Dynamic Access and Control. Logic is arithmetically complete (in 
the sense of [C02 ] Codd, E.F. A Relational Model of Data for [HA2], with the necessary provisos stated 
in Large Shared DataBanks , CACM 13, 6, JuneTheorem 3.4). Therefore, we have: 1970. THEOREM 4.1. Let 
RDL be constructed as in [C03] Cook, S.A,, $xiomatic and Interpretative Theorem 3.4 and T= (LA,DT,D~) 
be a relational Semantics for an ALGOL Fragment , TR 79, dynamic schema of RDL. Then, a program s of 
RDL Univ. of Toronto, Feb. 1975. is a transaction iff [ES1] Eswaran, K.P. and D.D. Chamberlain. Func­ 
(i) for any axiom A~DT, DT l-~LIs]A tional Specifications of a Subsystem for Database :Cntegrity , Prc>c. 
of the Int. (ii) for any dynamic integrity assertion  Conf. on Very Large Data Bases, 1975. c! A~B) 
D $~ T I-RDL + [sIB. [ES2] Eswaranr K.P. et al. The Notion of Con-Thus , at least in theory, we will 
fail to sistency and Predicate Locks in a Data Base not prove that a program is a transaction due to 
weak-System , CACM 19, 11, Nc)v. 1976 (pp. 624­nesses of RDL. Evidentlyr the much more difficult 633) 
. question of finding a proof procedure for our logic remains unanswered. [HAll Hammer, M. PI. and D.J. 
McLeod. Semantic APPENDIX I Integrity in a Relational Data Base Manage­ ment System , Proc. of the Int. 
Conf. on Concepts from Dynamic Logic Very Large Data Bases, 1975. [BA21 Harel, D. Arithmetical Completeness 
in We review here just what is essential to under- Logics of Programs , MIT Laboratory for stand Sections 
3 and 4, referring the reader to Computer Science TM-103, April 1978. [PRII for a full description of 
Dynamic Logic (DL for short). [HE1] Held, G.D., M.R. Stonebraker and E. Wong. INGRESS -A Relational Database 
System , Proc. AFIPS National Computer Conf., 1975 (pp. 409-416). Dynamic Logic is based on a few parameters: 
a first order language LE, the expression language, specifying the expressions allowed in programs; an 
extension of E LA, the assertion Zanguage, whose [LA11 Lacroix, M. and A. Pirotte. Oriented Relational 
Languages , Int. Conf. on Very Large Data (pp. 370-378). Domain Proc. Bases, of 1977 the wffs are used 
to express correctness assertions; a deductive system DA for formulae of A; and a univeYse U of states 
with common doma~n vu, each state being a structure for A with domain vu together with an assignment 
of values [YA1] for the [LA21 Lamport, ness for L. Towards Multi-User a Data Theory Base of Correct-Systems 
, variables Dynamic of Logic, LA. we To often stress write these parameters DLILE,LA,DA,UI of . Massachusetts 
Computer Associates Tech. Rep. A program in DL is defined as a binary CA-761Q-0712, Oct. 1976. relation 
on U. TWO basic programs (or statements) are provided: [MIII Minker, J. Search Strategy and Selection 
Function for an Inferential Relational (1) l,X ;= t,, ={(I,J)EU2/I = JAXJ= tl} is called System , ACM 
TODS 3, 1, March 1978 (pp, 1-31). an assignment, where x x is a variable and t [NT: 1 Nicolas, J. First 
Order Logic Formalization is a term of LE(I=J indicates that I for Functional, Dependencies , Multivalued 
ACM SIGMOD and Int. Mutual Conf. on and J differ only x on the value of x). Management of Datar May 1978 
(pp. 40-46). (2) T!p?Tf = {(I,J) EU2/I ~P} is called a test, [Ow: I Owicki, S-S. Axiomatic Proof Techniques 
where P is a wff of LE (I ~P indicates for Parallel Programs , Science, Cornell Univ., Dept. Tech. of 
Comp. Rep. 75-251, that P is valid in I). July 1975. Programs are created by the following [PA1 ] Papadimitriou, 
C.H., P.A. Bernstein and J.B. operations : Rothnie­ Some Computational Problems Related Proc. of Waterloo, 
to Database Concurrency Control , Conf. on Theoretical Comp. Science, Aug. 1977 (pp. 275-282). (3) 1;s2 
and S1US2 reflexive and S*, transitive the composition, closure of their union components. [PR1] Pratt, 
V.R. Semantical Considerations on Floyd-Hoare Wgic , Proc. of the 17th IEEE In order to express facts 
about programs, a Found. (pp. of Comp. 109-120). Science Conf., Oct. 1976 new formation rule is added 
to those of first-order languages: [Sell Schmidt, J.W. Some High-Level Language Constructs TODS 2, 3, 
for Sept. Data of 1977 Type (pp. Relation , 247-261). ACM (4) if P program, is a wff then, of <S>P DL 
is or a A wff and of s DL . is a [ST1] Stearns, krantz. R.E., P.M. Concurrency Lewis and Control D-J. 
for Rosen-Data Base The notion of interpretation is extended to Systems , Proc. of the 17th IEEE Found. 
of <S>p as follows: Comp. Science Conf., Oct. 1976 (pp. 19-32) . (5) I ~<s>P if 3J((I,J)Es AJ ~P) [TH11 
Thomas, Problem R.H. for A Solution Multiple Copy to the Databases Update which [s]P is then introduced 
as ~<s>~P with Uses Distributed COntrOls , BBN Tech. Rep. interpretation; 3340, July 1975. (6) I \ [SIP 
iff VJ((I,J)ES+J ~P) [VA11 van Emdenr M.H. Computational and De­ ductive Information Retrieval% , Proc. 
of DL contains the following axioms and rules of the IFIP Conf. of Formal Specifications the Working 
of Prog. Group Lang., on Aug. inference, in addition to those of A (Q is a 1977 (pp. 17.1-17.19). wff 
of LA): [YA1] Yasuhara, A. Recursive Function Theory and Logic, Academic Press, 1971. (7) [x:=t]Q ~ 
Qt (8) [P?]Q : PX* Q (9) [sl U S2]Q = [SIIQA [S2]Q (lo) bi; s21Q = lS1l [S2]!2 (11) Necessitation 
: ~ ls]=[sIQ P=+[S]P (12) Invariance :  -[S*JP DLILE, LA, DA, UI has an adequate universe iff for 
any variable x of LE and any individual aEVu, there is a state 16U such that xl=a. For adequate universes, 
Axioms 7 to 10 are sound and Necessitation and Invariance are valid. We refer the reader to [HA2] for 
a discussion of the relative completeness [C03] of DL. Note: Universes are in principle arbitrary. How­=, 
when discussing a logic of programs, atten­tion must be paid to the choice made. For instance, if no 
state I in U valuates x as 5, the binary relation associated with x:=5 is empty, permitting us to derive 
l% [x: = 51~aZse ~ true, Hence, Axiom 7 is not sound in U. The notion of adequacy of universes cures 
this anomaly. APPENDIX 11 Proofs Before proving Theorem 3.1, We state a le~ @ about the construction 
of from M (as de­ scribed in the statement of the theorem) . We use MwN to indicate that N is a variant 
of M (that is, N is obtained from M by renaming variables) . LEMMA 3.1. (.M)~ a~~ N~v N~N(MvN)~ 3XM; 
*(~xM)A R (Mi)A N (M:) ~ xx x is free in M and i is a constant. (The proof follows trivially from the 
con­struction of M;) . 0 THEOREM 3.1. SUppOSe that RDL[L ,L ,L D R E A A U] has an adequate universe. 
Then, for any wff Q of L A? Pu [R(l) :=AIZll Q~Q; . 0 Proof: Suppose that RDL[LR,LE,LA,DA,U] has an adequate 
universe. Let Q be a wff of LA and s = R(~): =A[;l be a relational assignment of RDL . (In the sequel, 
denotes the domain of u U and n denotes the arity of R). We observe initially that (1) $Q;~ [s]Q = (VI@) 
(IF Q; = [sIQ) =(VIEU)(I/+Q~= (VJEU)( (:[,J)6S+JEQ) ) = (h I@J) (11= Q; = s(I) I=Q) by Def. 3.1. and 
RDL has an adequate universe, s is a total function on U. Therefore, all we have to prove is that for 
(I,J) Es: . (2) I/=Q:=J~Q Moreover, by Def. 3.1, we know that (I,J) E s i ff  (3) I ~ J A (V;E~)(RJ(;) 
iff I l=A[;/;]) We then fix (I,J) CU2 satisfying (3) and prove  (2) by induction on the height of Q. 
Basis: Assume Q = S(;), S a,predicate symbol of L  A Case 1: S=R (4) J/=Q . J l=R(~) = RJ(;J) . I /=A[~J/;] 
. by (3) . I l=A[~@ . by . I l=A [~/;] . A is a, variant of A with no variable of Q bound . construction 
of Q; I I=Q; . Case 2: S # R (follows similarly) Induction step: Assume (2) for formulae of height less 
than k and let Q be of height k. We consider only the case where Q = 3XM: (5) J I=Q . J /=&#38;l . J 
/=Mi i is the name of some in-. x dividual of J, by clef. of J l=~xM . 1 1= (Mi)A induction hypothesis, 
as ML XR x and M h,ave the same height . I I=(FR): Lemma 3.1 and Variant Theorem . I @X~ i is also the 
name of some individual of I, as I and J have the same domain, and by clef. of J ~~xN . I ~ (axM); Lemma 
3.1 A . I I=Q; construction of Q R This conciudes the proof. 0 THEOREM 3.2. Suppose that RULILR,LE,LA,DA,U] 
has an adequate universe. Then, for any wff Q of LA, hUIRAWDOMTUpLE (R; ~)1 Q~ &#38;(R(l) *Q) . D Proof: 
Suppose that RDL[LR,LE,LA,DA,U] has an adequate universe. Let Q be awff of LA and s = IRANDOMTupLE(R; 
~) ,, be a random tuple selection of RDL. (In the sequel, v denotes the domain u of U and n denotes the 
arity of R). Let IEU. Then we have: (1) I I=[s]Q = (VJEU)( (I,J)ES=+JI=Q) . clef. of I l=k]Q = (VJEU)(R1(;J) 
AI E J+JI=Q) . clef. 3.3 x = (VJCU)(R1(;J) AI ~ J+Il=Q[~J/~] . I and x J differ only on G . FU)L has 
an ade­quate universe = (V;CV~)(Il=R1(;)*Q[~/;]) clef. of II=M*N . 11= /j(R(j) =+Q[~/;]) . clef. of 11= 
V;M Il=V;(R(~) *Q) From (1) we can conclude our result: (.2) (VICU)(I~ [s]Q = Il=V~(R(~) *Q)) 1 iff (VIEU)(II=[SIQ 
~ V=(R(Z) *Q)) clef. of I 1= MEN iff &#38;s]Q ~Vi(R(=) -Q) This concludes the proof. 0 THEOREM 3.3. 
Suppose that RDL[LR,LE,LA,DA,U] has an adequate universe. Then Rule FE is valid in u. 0 Proof: The proof 
is a straightforward appli­cation of the system of RDL. For brevity, we present just a summary in the 
style of [OW1]. : {P} 1 : Ro(~):=@&#38;AR o(x); 1 : {T3Z(Ro(Z))Ap} 2 : {T3X(RO(Z)) AI} 3 W2: RT (:) 
:=R(i?) AA[~]; : {VZ(~(Z)~R(2)AA1xl A&#38;~(Ro(~)) AI} 4 P5: {V~(~(X) =R(i)AAIZl A&#38;(Ro(~)A~n=~n) 
)AI) ({3=(~(z))*P5} W3: 3;(@) ?;{P51 P6: {VZ(~(Z) ZR(Z)AAIZl AT3~(R.o(~) A~k=~k) AI} W4: RANDOMTUPLE(RR;z); 
P7: {R(2) AA[Z]A72j(Ro(j) Ajk=2k) AI} {R(Z) AAI1] AI} 8: 5: P: 9 6: lo: w: 7 u 11: 8: 12 P 13: 14: 
THEOREM 3.4. RDL Arithmetical Completeness Suppose that RDL[LR,LE,LA,DA,U] has an adequate universe, 
L contains arithmetic, each state in A the universe U assigns the standard interpreta­tion to arithmetical 
symbols and the deductive system for L is complete for U. Then, for A any Wff Q of RDL, ~UQ iff I=mL 
Q. 0 Proof: We argue here that the completeness of DL [HA2] extends to the completeness of RDL. It follows 
from Theorems 3.1 and 3.2 that, for any relational assignment or random tuple selection s andanywff P 
and Qof LA: (1) there is a wff R of LA such that I=u [s]Q2R  (2) \uP*[s]Q iff I-DL p+[sIQ (3) I=u P*<s>Q 
iff I-DL P=<s>Q Hence, using the completeness of DL and the above results, by induction on the structure 
of a formula S of RDL and on the structure of a program s of RDL, we can prove: (4) for any wff S of 
RDL, there is a wff S of L such that /%s;s! ( expressibility  A of LA for RDL)  (5) for any program 
s of RDL and any wffs P and Q of LA, l~p*[sIQ iff twLR[sl Q (6) for any program s of RDL and any wffs 
P  and Q of LA, lfiP+<s~ Iff l-mLP*<s>Q From (4), (5), (6) we can then conclude the result: (7) for 
anywff P of RDL, &#38;P iff I-mL P 0 THEOREM 4.1. Let RDL be constructed as in Theorem 3.4 and T = <L 
,D ,D > be a dynamic TTT schema of RDL. Then, a program s of RDL is a transaction of T iff (i) for any 
axiom A~DT, D~ l-mL [s.IA; and (ii) for any dynamic integrity assertion (A, B) ~D;, DT t~L A+[s]B  
0 Proof: Let s be a program of RDL. Let is the univexsal closure A~D ~= A A ,where Al T of A. Then s 
is a transaction of T iff (1) (VI@) (VJf3J)(Il=i +( (I,J)Es*J~=~)) and for any (A,B) ~D~, (VIEU)(VJEU)(Il=fi 
*(II=A*( (I,J)6s-J1=B))) BY definition of [s]Q, (1) is equivalent to:  (2) ~u ~-[sl~ and, for any (A,B) 
ED; , ~u ~=+(A-[.s]B) By Theorem 3.4 and assumptions on RDL, (2) is equivalent to: (3) I-mL ~+(s]~ 
and, for any (A,B) CD; , l-mLI*(A+[S]B)  Finally, by the Deduction Theorem and ~ is closed, s is a transaction 
iff (4) i I-mL [S]z and, for any (A,B) (lD~ , ~ I-mL A+ [s]B. 0 
			