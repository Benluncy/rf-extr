
 Story Engine for Interactive Characters C:\meeting&#38;semi\2007\CG........\...\capture_small.png Katsutoki 
HAMANA, Hiroshi MORI, Atsushi NAKANO, Junichi HOSHINO System and Information Engineering, University 
of Tsukuba info@entcomp.esys.tsukuba.ac.jp Introduction In recent years, many entertainment systems 
have relied on the progress of interaction technology to create characters that act autonomously. To 
show these lifelike characters, it is important for them to perform various actions, such as daily actions, 
reflex actions that require reacting to input from a user, perceiving actions where the character perceives 
an object and reacts to it, and actions based on personalities or feelings. This results in the problem 
of complex action planning. A character has to carry out the actions listed, keep schedules and maintain 
a personality, and react flexibly to user interaction, while still maintaining story flow. In this paper, 
we propose the Story Engine, which can execute various actions in multiple characters. Story Engine ..PerceptionsVisualAuditoryHapticInternal 
statesMemoriesFeelingsPersonalities.Direction of eyes, Gestures, Appearances, etc.Narrative World ModelEpisode 
Selection MechanismRankType1Rejection2Order3Play::Social motivesEvent execution mechanismEvent selection 
mechanismEnd judgments mechanism of episodes and eventsEvent local time update mechanismAttentionStageActorEpisodedaily 
routine episodesjob dependent episodescharacter specific episodesEpisodeTree DatabaseLily Figure 2: 
Story Engine system configuration To construct lifelike animated characters, it is important to have 
them perform various actions, such as daily tasks, reflexes, acts based on their perceptions, and actions 
based on personalities or feelings. The Story Engine performs these various actions in complex narrative 
situations. Each character uses the system (Figure 2). The inputs to Story Engine are sensory information 
from the external narrative world, the character s current actions, and its internal status. Story Engine 
outputs various actions based on the input information and the stored episode group. Episodes in which 
multiple characters interact are shared by the characters. This system has three main features: . Structuring 
Actions: Conditional branching becomes very complex when the control system treats individual actions 
that are elements of units, such as standing, sitting, or waving. Thus, we define each action as one 
structure (episode tree), where multiple elements and the start or end conditions are combined hierarchically. 
 . Prioritizing Actions: A character s intentions are important in entertainment systems. Therefore, 
our system prioritizes actions based on internal states, such as the character s personality, significant 
motivations behind the actions, and the character s feelings at that time. . Interpolating Actions: 
If a character s action sequence changes without notice, the action will not seem natural. Therefore, 
it is necessary to create transitional actions to link a sequence of actions smoothly together. Pre-processing 
before each episode tree node assists in transitioning between actions and returning to an action performed 
in the past. Post-processing cleans out previous actions at the end of an episode and when current actions 
are interrupted. Story Engine interpolates the actions by inserting special processes automatically. 
 And, this system consists of four mechanisms of event selection, event execution, updating event time, 
and end judgments for episodes/events. . Event selection mechanism: This mechanism extracts events satisfying 
AND/OR conditions of a higher rank class from the episode tree under execution and selects an event 
having the highest priority in the episode. The event selection process is as follows. 1 Extracting 
candidates for the next event considering a recently finished event. 2 Adding candidates to task lists 
if conditions in an event are satisfied. 3 Sorting tasks in order of the priority. 4 Selecting the 
event having the highest priority as the next event.  . Event execution mechanism: This mechanism performs 
all actions included in the selected event. An event has a local timeline, which begins when the event 
starts. The characters perform the appropriate action corresponding to a moment in local time. . Event 
Local Time Update mechanism: This mechanism updates local time in events. . End judgments mechanism 
of episodes and events: This mechanism judges the end of episode trees and events.  Figure 1: An interactive 
application called Spilant World system using Story Engine By repeating and processing these mechanisms, 
each character selects and executes events. However, when multiple characters share the same talk like 
the narrative as an exception, these characters share the same event and perform it synchronously. 
			