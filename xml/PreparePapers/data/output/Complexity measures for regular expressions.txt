
 C~{PLEXITY MEASURES FOR REGULAR EXPRESSIONS Andrzej Ehrenfeucht and Paul Zeiger Department of Computer 
Science University of Colorado Boulder, Colorado ABSTRACT Several measures of complexity of a regular 
expression are defined. (Star height and number of alphabetical symbols are two of them.) Upper and lower 
estimates for the complexities of ex- pressions for certain standard sets (e.g. the set of all paths 
on a complete graph) are derived. I. INTRODUCTION The authors have been operating in an en- vironment 
where some thought is being given to using regular expressions for sequences of instructions executed 
in a program as tools in a static analysis of the program. The question naturally arose of how bad things 
could get, i.e., how large or complex the expressions so generated might be. The four measures of complexity 
con- sidered are: i. N = size (number of alphabetical symbols) 2. H = star height (depth of nesting 
of stars)  3. L = length (length of longest non- repeating path through the expression)  4. W = width 
(maximum number of symbols summed)  These measures are defined inductively in Table i. any alphabetical 
symbol (@%) R I U R 2 1 N(RI)+N(R 2) 0 max(H(R1),H(R2)) i max(e(Rl),L(R2)) i W(RI)+W(R 2) Tab le 
1 75 The complexity of a regular se__~t with respect to any of these measures is defined as the minimal 
measure over all expressions for that set. The sets considered are the sets of all paths between two 
nodes on each of the following arc-labelled graphs on n nodes: 1. complete graph -directed edge between 
every node pair, self loops included.  2. half complete graph -number the nodes 1 through n and place 
a directed arc between each node and each higher numbered node. Consider the set of paths between i and 
n.  For the complete graph on n nodes we have found: 2 (n-l) < N < 6-4 (n-2) H = n W < n Ign+l 
L < nlgn+nlgn For the half complete graph: n2/3(ig(2/31gn) -i)< N < 2n Ign+2 H=0 R~ RIR 2  N(RI)+N(R2) 
N(R) max(H(Ri),N(R2) ) H(R)+1 L(RI)+L(R2) L(R) max(W(R1),W(R 2) W(R) 2/3(ig(2/31gn) -i)-i nlgn+l n < 
W < L = n -1  All logarithms are to the base 2. In addition, all paths of length ! k in a complete 
graph on n nodes has N < (2n) Igk. We are disappointed that so many of the lower bounds are worse than 
polynomial. This is a preliminary working paper; the reader may expect some rough edges. II. LOWER 
BOUNDS The next few paragraphs are devoted to the tools we shall use for the lower bounds. Given a 
finite, directed, graph G, we con- sider paths (i.e. connected sequences of arcs) on G, and call a set 
of paths on G a sheaf if all paths in it have a common starting point and a common ending point. A path 
whose starting point = its ending point is called a !0o~, and if a sheaf consists entirely of loops we 
call its starting and ending point its base point. By % n  we mean the loop of length zero on base 
point n. If P and Q are sheaves for which the ending point of all paths in P = the starting point of 
all paths in Q, we define PQ, the con- catenation of P and Q, as the set of all paths gotten by following 
a path from P by a path from Q. If P is a sheaf with base point n, we define   P* = {An}U P ~ PP 
I A sheaf will be called resular if it can be built up from sheaves consisting of single arcs by union, 
concatenation, and *. The corresponding algebraic expression on (distinct) arc labels will be said to 
represent the sheaf. Expressions representing sheaves form a subclass of all regular expressions, and 
have the pleasant property that any subexpression of one also represents a sheaf. This allows us to talk 
about starting points, ending points, and base points for subexpressions. All regular ex- pressions mentioned 
in this paper are to be interpreted as representing sheaves. A sheaf S covers a path p if there is a 
path q in S for which p is a contiguous sub- path of q. If there is a greatest integer n for which a 
sheaf S covers p , we call it I (S), the index of p in S, and say that S is P  p-finite; otherwise 
we say S is p-infinite. Using definitions of N and L from the intro- duction, we have: (for all paths 
p, sheaves R and S.) I (alphabetical symbol) = 0 or i P I (R U S) = maX(Ip(R),Ip(S)) P Ip(RS) ~ Ip(R) 
+ Ip(S) + i I (R*) = max{l (Rk): k > O} P P --  Comparing the inductive inequalities for i + I with 
those for L we find: P I (E) < 2L(E) -i if E is p-finite p  and as a corollary; I (E) < 2N(E) if 
E is p-finite. P  If E is p-infinite, the set of subexpressions of E that are p-infinite is fine and 
nonempty, hence has elements that are minimal with respect to the sub- expression relation. By the inductive 
inequalities for index, each such minimal p-infinite sub- expression is of the form F*, where F is p-finite. 
 A parse P is a function from substrings of a string w in a regular set IEI to subexpressions of E that 
is generated via the following procedure: i. set P(W) = E 2. If P(r) = F and a. F = G + H, change 
P(r) to G if rgG else change P(r) to H.  b. F = G-H, choose strings s and t so that st = r, scG and 
tEH, and set P(s) = G, P(t) = H.  c. F = G*, choose i~teger k so that r = t and tEG, and set P (t) = 
G.  3. The procedure terminates when a value of P has been set for every letter in W. A series of choices 
leading to termination is possible if and only if wglE I.  Observations: For each r in domain (P), 
rEIP(r) I.  If E is star-free, range (P) is a binary tree with respect to concatenation. If E is star-free 
L(E) = length of longest string in E, for the function f: each subexpression ~-~ the longest string 
it contains obeys the same inductive equations as L. One can similarly check that L(E) = length of 
 longest string in E having a parse that never uses k >i in step c. This completes the discussion of 
tools. Each of the next four section headings is the inequality to be proved in that section. 2 (n-l) 
~ N (for the complete graph on n nodes)  We shall show that there is a loop p with base point 1 on the 
complete graph with nodes i, 2, ..., n for which N(any sheaf covering p) > 2 (n-l).  We proceed by 
induction on n. The assertion is trivial for n = i, taking p to be the self loop. Suppose we have a 
loop p with base point i on the complete graph on n -i nodes for which N(any sheaf covering p) > 2 n-2. 
 ?6 In the complete graph on n nodes, define Pk as the loop gotten from p by the cyclic per- mutation 
of nodes that replaces node i with node k. p. has base point k, and misses node k-l, the K minus being 
taken modulo n to keep the indices in range. Consider the loop m m m q = Plal2 P2a23"''Pnanl where 
m = 2 n and a is the arc from node i to i node j. Let the expression E represent any sheaf covering 
q. For each k, index Pk in E > 2 n so either N(E) > 2 n-I and we're done (by th~ inequality about f~nite 
index) or E is Pk- infinite for all k. In the latter case, for each k, choose a minimal Pk-infinite 
subexpression F~, and among these F~, choose one minimal with respect to the subexpresslon relation, 
and call if F*. F* has a base point, say j; choose G* from among the F~ covering Pj+I" Now if, in E, 
we replace F* with e, G* Pj+istillmissesCÂ°Vers (since J ~ j+l after sothe replacement N(G*) > 2 n-2 
after the substitution N(F*) > 2 n-2 before the substitution. N(E) > 2 n-I before the substitution. 
 H ~ n (for complete graph on n nodes) This was first proved by R. Cohen [i]. We include here a proof 
along much the same lines as the preceding result, i.e. for each integer m, there is a loop p with base 
point i on the complete graph on n nodes for which, given any expression E for a sheaf covering p, either 
 N(E) > m or (H(E) > n and I (E) = ~). _ --p m For n = i we take p = all, and the induction basis 
is again trivial. Suppose we have that there is a loop p with base point i on the complete graph on 
n -i nodes for which, given any E for a sheaf covering p, and any integer m, either N(E) > m or (H(E) 
> n -i and I (E) = ~). _ _ p To get the desired result, cons~er the loop on the complete graph on 
n nodes q , where q = Pla12P2a23...Pnanl . 2m Let E represent any sheaf covering q ; by the inequality 
about finite index, since I~(E) ~ 2m, either N(E) > m or E is q-infinite ~ and -- ~ m hence has a 
minimal star F* covering q . If N(E) < m, so is N(F*), so F* is p~-infinite for each k. Choose minimal 
starred s~expressions G~ of F*, each covering the corresponding p.  If for some k, G~ # F*, then we 
are done, for F* is of star helght n, but the G* cannot all be k  equal, by the argument in the preceding 
proof, i.e. pick a minimal one and observe the effect of annulling it on the covering of appropriate 
p's by another. n -i ~ L (for the half-complete graph on n- nodes) This is a trivial consequence of 
the third observation following the definition of a parse. n2/3(ig(2/Blgn) -i) N (half-complete graph) 
 For this result, we lean heavily on the use of concatenation as a binary operator (left associate all 
multiple concatenations) and on the observation that a parse of a string into an expression E leads to 
a binary tree of subexpres- sions whose nodes are concatenations and whose tips are the letters in the 
string. Lemma: The number M of (binary) concatenations in an expression E is ! N(E) -i. Proof: M(letter) 
= 0 M(E+F) = M(E) + M(F) M(E F) = M(E) + M(F) + 1 M(E*) = M(E) Comparing these equations with the ones 
for N, we find i + M is dominated by N. We also need to observe that each multiplication in an ex- pression 
representing a sheaf (uniquely) identifies a node in the graph. Hence each path on the half complete 
graph that passes through k nodes defines a binary tree with k (non-tip) nodes, each tree node being 
labelled with a graph node. So number of number of (non-isomorphic) maximum number paths on ~ binary 
trees of ways of k nodes with k (non-labeling one tree tip) nodes There are (~) paths on k nodes, 
which we will k n underestimate as ~-~. We will overestimate the number of trees as 4 k (since each 
child of each node may either be a tip, or not). We overestimate the maximum number of labelings as 
: number of ways of labeling all number of but the longest Â° ways of labeling path through the that 
path. t ree The left factor above is overestimated as n k-lgk, for the longest path is at least igk 
long. The right factor is overestimated by the total number M of multiplications because, since each 
tree node (viewed as a subexpression) has a unique parent, fixing the bottom one on the path to one of 
the M multiplications fixes them all.  ?7 Finally, overestimating M by N, we get: f(k) < knlÂ°g2 k. 
 k n < N or kk4 k nk-lgk -- N >__ exP2(ign.lgk -2k -k.lgk) Choice of k = 1/31gn yields: N > n 2/3(Ig(2/31gn) 
 A lower bound on W for the half-complete graph is found by observing that L x W >s N, and, since every 
expression for the half-complete graph has L= n-i, n2/3(ig(2/31gn) -i) W > n-i III. UPPER BOUNDS 
 As before, we first devote some attention to tools. Consider a finite, directed, graph on n nodes with 
at most one (labelled) branch between any pair of nodes. Let T G be the matrix of one- step transitions, 
i.e., the i, j-element of T G = the label on the branch that goes from node i to node j in G if there 
is such a branch and 0 otherwise. + + 2 k  As is well-known, I T G T G + ... + T G is a matrix whose 
i, j-element is a regular expression for the set of all,paths of length k from node i to node j, and 
T G = the matrix X that is a minimal solution to X = I + TGX is a matrix whose i, j-element is a regular 
expression for the set of all paths from node i to node j. The algorithm given below is based on computations 
involving the matrix T G.  PATHS OF LENGTH < k. 2 k  Let Fk(T) = I + T G + T G + ... + TG, and note 
that, for k even, (i) Fk(T G) (I + TGk/2 ) = (Fk/2 (r G) -I).  Let g(k) be the maximum number of alphabetical 
symbols appearing in any element of T G and note that, for k even t g(k) _< 2ng(k/2), and g(1) = i. 
 Hence, for k = a power of 2, g(k) < (2n)lÂ°g2 k = knlÂ°g2 k Let f(k) be the maximum number of alphabetical 
symbols appearing on any element of Fk(T) and note that, for k even, f(k) _< n[f(k/2) + g(k/2)] and 
f(1)=l.  Hence, for k = a power of 2, by induction, For k # a power of 2, let j be the greatest power 
 of 2 strictly less than k, then since Fk(T) = (I + TG(k-J))(Fj(T) -I), f(k) ! n[g(k-j) + f(j)] ~ n[g(j) 
+ f(j)] ~ 2njnlÂ°g2 j < 2jnrlÂ°g2 k] < 2kn[ lÂ°g2 k]" We note in passing that the resulting expressions 
preserve ambiguity. In addition to this estimate for the sizes of expressions for paths of length ~ 
k, we will need that each path on an n-node graph can be written as (path on <__n/2 nodes) (loop) (path 
on <__n/2 nodes) n-i  Where, if n is odd, take n/2 to be -~-. For, by choosing the shortest prefix 
of the path that hits n/2 + 1 distinct nodes, and the shortest suffix that hits n/2 + 1 distinct nodes, 
we force some node to be hit by both. As before, we use the inequalities as section headings. N ~ 6Â°4(n-2)(complete 
graph)  We operate on the matrix T G by the classical method of node elimination. Ellminating node k 
is done via the replacement aij Ã· aij + aikakkakj i, j # k  and an expression for all paths from i 
to j is obtained by repeating this replacement n-2 times, then writing the desired expression by inspection 
at the resulting 2-node graph. By symmetry, each node elimination quatruples the size of each re- maining 
matrix element, producing elements of size 4 (n-2) The inspection step at most sextuples the size, since 
all paths from 1 to 2 on a 2-node graph is (all + a12a22a21)*a12a22 Therefore N < 6o4 (n-2) H ~ n 
(complete graph)  This follows immediately from the same construction. L ~ n Ign + nlgn (complete graph) 
 Let Pij(n) be the sheaf of all paths from node  i to node j on the complete graph on n nodes. Use the 
same three parameters (i, j, n) in the same positions on N, H, L, W. 78 Since Pii(n) = (~JjkaijPjk(n-l)aki)* 
we have Lii(n) ! 2 + Lij(n-l) Henceforth we use L for same-node lengths, and L d for different-no~e 
lengths, e.g. Ls(n) ~ 2 + Ld(n-1). By representing each path as (path on <_n/2 nodes) (loop.) (path on 
<_n/2 nodes) we get Pij (n) = ~all pairs of Ukeik(n/2)Pkk(n)Pkj (n/2) subsets con- taining n/2 nodes 
 from which Ld(n) --< 2Ld(n/2) + Ls(n)  Substituting the former equation in the latter, we get Ld(n) 
~ 2Ld(n/2) + Ld(n-l) + 2 We substitute this equation n/2 times into it- self in the Ld(n-l) position 
to get Ld(n) ~ n(Ld(n/2) + i) so Ld(n) ~ n Ign + nign W ~ n Ign + i Here we use a technique similar 
to the preceding proof, except that the identity (UiAi)* = (~iAi)* allows us to reduce the width of 
a loop to Ws(n) !Max(Ws(n-l), Wd(n/2)) (Here the union over pairs of subsets and the union over k were 
both suppressed by the above trick.) Similarly = .ck~Â¢ Q..(n)P..(n)Q_.(n) Pij Â±EK~n IK KK KJ  Where 
the Q's, although possibly involving up to n nodes, consist of paths of length <_n/2, and hence have 
expressions of size < n.nlg (n/2) = nlg n W d j n max(n Ign, Ws(n))  Repeatedly substituting the former 
estimate in the latter, and using the monotonicity of W and s  W d in n and the associativity of max 
we find W d ~ n max(n Ign, Wd(n/2)) Assuming that Wd(n/2) > n Ign quickly leads to a contradiction, so 
Wd ~ nonlgn = nlgn + i There now remain to be treated only the upper bounds for the half-complete graph. 
N ~ 2n Ign + 2 (half complete graph) This follows immediately by substituting k = n in the formula for 
all paths of length <k. L ~ n -i (half complete graph) Here, equality holds for all expressions representing 
Pln(n) as discussed in the section on parsing. W ~ n Ign + i (half complete graph) Here we have not 
improved on the width bound from the complete graph. IV. COMMENTS AND CONCLUSIONS It is too bad that 
most of these measures are worse than polynomial in n. Incidentally, if difference of sets is allowed 
as an operation, everything becomes polynomial, for example ~.Jij Pij (n)  can be written in terms 
of the set A of all arcs, as: A* - VA*abA*  where the union is taken over all pairs (a, b) of edges 
for which b does not follow a. A similar construction works for intersection of sets. We would be pleased 
if some other researchers were inspired to narrow some of the gaps between upper and lower bounds. Finally, 
we had a lot of fun working on this problem, and we thank our more practical-minded colleagues for suggesting 
it. REFERENCES [1] "Star Height of Certain Families of Regular Events" by Rina S. Cohen in the Journal 
of Computer and System Science 4, 281-297 (June, 1970). 79  
			