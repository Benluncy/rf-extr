
 DECENTRALIZED ROUTING ALGORITHMS FOR AUTOMATED GUIDED VEHICLES Jeffrey T. L. Soh, Wen-Jing Hsu, Shell-Ying 
Huang and Adrian C. Y. Ong Division of Software Systems, School of Applied Science Nanyang Technological 
University Singapore 639798 ABSTRACT Automated Guided Vehicles (AGVs) are driverless vehicles that are 
becoming a popular means for material handling. Existing methods for routing AGVs are generally based 
on centralized control. The central controller is potentially a bottleneck of communication and the single 
point of weakness of the system. Moreover, the computational cost required to preplan all AGV routes 
may be too high as to affect the scalability of the solution. Our project aims to design and develop 
decentralized routing strategies for an AGV system deployed within a container port. Two routing algorithms 
were developed : Row-First and Semi-Random. The goal is to minimize deadlocks and congestion and maximize 
throughput. The performances of the algorithms were monitored and compared with each other using a graphics 
based computer simulator called SIM-PORT. I. Introduction Automated Guided Vehicles (AGVs) systems are 
widely used in the manufacturing and shipping industries. For instance, AGVs can be employed to handle 
the containers within a container port. Particularly in this example, the AGVs involved can be numerous 
and hence computer controls are required. Existing methods of routing AGVs may be classified into either 
centralized or decentralized. With centralized methods, each AGV accepts routing instructions from a 
central computer. Routing is usually done by finding a shortest path that does not cause collision with 
any other AGVs on the move[l]. In the decentralized routing schemes, each AGV is controlled by an onboard 
computer which directs it to its destination. Presently only very simple "Permission to make digital/hard 
copy of all or part of this material without fee is granted provided that copies are not made or distributed 
for profit or corranercial advantage, the ACM copyright/server notice, the title of the publication and 
its date appear, and notice is given that copying is by permission of the Association for Computing Machinery, 
Inc.(ACM). To copy otherwise, to republish, to post on servers or to redistribute to lists, requires 
prior.specific permission and/or a fee." &#38;#169; 1996 ACM 0-89791-820-7 96 0002 3.50 473 decentralized 
routing schemes are found in the literature. To be fair, AGVs were only deployed in simple loops, hence 
there was no need of sophisticated routing algorithms[2,3]. Centralized routing methods can effectively 
avoid problems like collisions and deadlocks. However the entire system will shut down if the central 
computer malfunctions. In addition, the computational costs to preplan all AGV routes and the communication 
costs to tra"fismit all the routing plans may be too high as to affect the scalability of the solution. 
The objective of this project is to design and develop routing and scheduling algorithms for an AGV system 
used for material handling in a mesh-like configuration, typical in environments such as container ports, 
Two decentralized routing algorithms are investigated. Though decentralized routing may not be as simple 
as centralized routing, it is capable of adapting to changing conditions (for example, an AGV failure 
or maintenance of tracks). Here we still deploy a central controller that functions not as a route planner, 
but as an AGV dispatcher. A graphics based computer simulator called SIM- PORT [4,5] of the AGV operation 
is developed to visualize the system operations and monitor the outputs. Specific issues to be explored 
in this project are: 1) Design and develop two AGV routing algorithms that reduce the probability of 
deadlocks and congestion and maximize throughput. 2) Evaluate these algorithms for their throughput, 
scalability, robustness, and efficiency. 3) Design and develop AGV scheduling algorithms that indirectly 
aid the routing algorithms in minimizing deadlocks and congestion. All that are highlighted in bold above 
will be further discussed in Section 5. The following assumptions are made: a) The continuous routes 
within the topology are discretized into tiles, with each tile representing a segment of the route; each 
tile can only be occupied by one AGV at any one time. b) Each AGV has the capacity for one unit load 
and each load is transported by only one AGV. The traveling speed of each AGV is a constant. c) The load 
transfer between AGV and ship or between AGV and the selected storage area are at the designated pickup/drop-off 
points. d) The arrival pattern is assumed to follow a Poisson distribution with a user definable mean. 
Simulations were conducted to compare the performance of thetwo routing algorithms. Section 2 will provide 
the general information on the simulation package. Section 3 discusses deadlocks and prevention techniques 
used in this project. Section 4 introduces the two decentralized routing strategies. Section 5 compares 
the performance of the two routing algorithms and Section 6 summarizes our findings and results. 2. Simulation 
Environment The track topology considered in the simulation is a mesh with horizontal and vertical tracks. 
The traditional coordinate system is used to label the mesh. The junctions between horizontal and vertical 
tracks are referred to as intersections in this paper. At one side of the port area is the sea and the 
ship loading/unloading bays. Other features of the layout are chosen in the belief that the routing algorithms 
alone cannot solve the problems of deadlocks and congestion[5]. Factors such as track topology, and the 
container storage allocation strategy are also important: Virtual Topology[6,7] : Each horizontal edge 
of the mesh contains three bi-directional tracks and each vertical edge has two uni-directional tracks 
allowing AGV traffic in opposite directions. Along the horizontal tracks if an AGV is blocked by another 
AGV in front, the blocked AGV may switch to a neighboring track. However along a vertical track an AGV 
cannot change tracks. This is equivalent to traffic control at the lowest level. AGV Parks: To prevent 
idle vehicles from blocking the other vehicles along the tracks and to reduce energy consumption, there 
are facilities to station them. Randomized Storage Allocation: A randomized storage allocation scheme 
is applied to help spread the AGVs across the port and thereby reduce congestion. The most important 
feature is in the routing control strategy. The discretized tracks called tiles are represented within 
the simulator as an array. Each index into the array describes a section of the topology. The tiles hold 
information regarding the virtual topology, that is, the direction assigned for that track. Three types 
of tiles can be found: the uni-directional vertical tile, the bi-directional horizontal tile and the 
intersection tile. Each AGV will query the tile it is currently on to determine the direction(s) it is 
allowed to travel. Given the coordinates of its destination, an AGV will try to proceed onto a next tile 
that reduces the distance with its destination. Before an AGV can enter into a new tile, it will query 
and get access of that tile to ensure no collision. If the next tile is free, the AGV will advance without 
blocking; otherwise, the AGV will attempt to make a detour. The detour algorithm is described in the 
following section. This Decide-Query.Then-Moveln routine is executed locally by the AGV before it moves 
into a new tile, and repeats itself untill the AGV reaches its destination. 3. Deadlocks and Avoidance 
Techniques A set of vehicles are deadlocked if each vehicle in the set waits indefinitely in a cyclic 
fashion. This is a very possible situation in the AGV systems. If there is no detour algorithm to break 
out from this situation, all vehicles would remain trapped within the loop forever. Coffman[8] showed 
that four conditions must hold simultaneously for a deadlock to occur in a system. In terms of the AGV 
system, these conditions are 474  1) Mutual exclusion condition: each tile can be occupied by only one 
AGV at any one time. 2) Hold and wait condition: an AGV will move into the next tile and release the 
current one only if the former is free. 3) No preemption condition: no AGV can force another AGV out 
of the tile the latter is in. 4) Circular wait condition: vehicles forming a circle would be the case. 
 Of the four necessary conditions for deadlock, the first three conditions already present in our model. 
This makes the fourth condition the one that should be negated. This is implemented via the virtual topology 
that works together with a detour algorithm. The virtual topology is implemented by providing three bi-directional 
tracks along the horizontal edges of the mesh, This enables AGVs to break out from a circular wait condition 
by a detour algorithm. The detour algorithm is presented below [5]. Case I: The AGV is on an intersection 
tile. Try to move to any of the four directions(left, right, up, down). If unsuccessful in all directions, 
stay where it is. Exit from the detour algorithm. Case 2: The AGV is on a horizontal tile. Try to switch 
to an adjacent track; if not successful, try to back track; if again unsuccessful, stay where it is. 
Exit from the detour algorithm. Case 3: The AGV is on a vertical tile. Stay where it is and exit from 
the detour algorithm, Another technique used to reduce the likelihood of deadlock is the randomized 
allocation of storage locations, which helps to spread the vehicles around the port. Each of the two 
routing algorithms incorporates a method within to reduce the probabilities of deadlocks, which are discussed 
next. 4. Routing AGVs This section presents the two routing algorithms, and discusses their performance 
and tradeoffs. Both algorithms are used in determining which next tile the AGV moves to bring it closer 
to its destination location. If however, the selected tile that an AGV is attempting to move into is 
occupied by another vehicle, this AGV is considered to be blocked and the detour algorithm mentioned 
earlier is invoked. 4.1 Algorithm !: Row-Then-Column Routing The Row-Then-Column algorithm routes an 
AGV to its destination row first before advancing to its destination column. The algorithm is given below. 
1. While the AGV has not reached its destination Do { 2. If the AGV is on the destination row, Move(right) 
or Move(left) depending on whether the destination is on the right or left of the current position. Otherwise, 
execute Step 3. 3. Case 1: The AGV is on a bi-directional horizontal tile.. Move(righO or Move(left) 
depending on whether the nearest intersection is on the right or left. Case 2: The AGV is on an intersection 
tile. Move(up) or Move(down) depending on whether the destination row is above or below the current position, 
Case 3: The AGV is on a uni-directional vertical tile, Move to the next tile along the same direction. 
 4. } 5. Perform its destination task. Report to central controller.  The Move function in the above 
algorithm checks if the AGV is blocked in its direction of travel. If it is, activate the detour procedure 
described earlier. Otherwise update the AGV's current position to the new position. The main feature 
of the Row-Then-Column routing algorithm is to seek the destination row first before searching out the 
destination column. By doing so, it reduces the number of turns an AGV makes to reach its destination. 
This can effectively reduce the likelihood of circular deadlocks. In the ideal situation where a traveling 
AGV is not blocked along its path, the row-first routing algorithm will approximate any shortest path 
routing algorithms. Notice that it is more expensive for an AGV to make a turn than to travel along a 
straight path. Thus making minimum number of turns is another advantage of the row-first routing algorithm. 
4.2 Algorithm lh Semi-Random Routing To route between any two points within a mesh network, it suffices 
to traverse in the general 475  direction that monotonically reduces the distance to the destination. 
Therefore, at each intersection, the decision is to either go up/down or left/right, till the destination 
point is reached. This decision can be made by a throw of dice. The semi-random routing algorithm uses 
such information to influence its routing decision. In real life the route network is often an incomplete 
mesh, hence two stages of routing are required to properly guide an AGV to its destination. One will 
guide it to the intersection point closest to its actual destination, which will bring it to the correct 
row, while the other will guide it towards its actual pickup or drop-off location. After it reaches the 
intersection closest to its destination, the AGV needs only to travel along the row to reach its destination. 
The details can be found in [51. The semi-random routing algorithm has the effect of spreading out the 
AGVs thereby reducing the chances of congestion and deadlocks. 4.3 A Comparison of the Two Algorithms 
Both algorithms share a similar approach in deadlock prevention via the same detour algorithm and the 
virtual topology. However, as verified in simulations, the row-first routing results in congestion around 
the AGV park. Several ways to get around this problem have been suggested. One possibility is to stagger 
the AGV .parks layout. Unfortunately the current version of SIM-PORT does not allow the user to modify 
the port topology and hence no experiment has been done to determine the optimal configuration. Another 
solution, as implemented in the semi-random algorithm, is the Ostrich Solution [9]: By making the routing 
decision to be as random as possible, we try to spread out the AGVs at all points within the port in 
anticipation that no heavy congestion will Occur. The advantage of the semi-random routing algorithm 
is, in some ways, its disadvantage. Because of the randomization, it is difficult to predict the number 
of corners an AGV will take, and hence, the distance that will be traveled by an AGV. Distance traveled 
may at times approximate any shortest path routing algorithm, but its performance is not as good as the 
row- first algorithm (cf. Fig. 1). Furthermore, as a side effect of its random decision making, the distance 
traveled may be longer as more corners might be taken. 5. Performance of Algorithms Three statistics 
are gathered to evaluate the performance of the routing algorithms in SIM- PORT : Throughput -The performance 
of the system defined as the average number of containers which are handled per unit time (in this case, 
the unit of time is the hour). Efficiency - The performance of the routing algorithms as a function of 
the following factors: a) Average job turnaround time, defined as the average duration of time taken 
to deliver a load request. This includes the time it takes for the AGV to pick-up and drop-off the load 
(travel + load + block time), load transfer time, and time taken for the AGV to return home (home time). 
b) The proportion of time during the simulation run that the vehicles were : -- idling in its vehicle 
park (Idle Time). --empty and traveling to pick up a container (Travel Time). -- loaded and traveling 
(Load Time). --empty and traveling back to its vehicle park (Home Time). --blocked and had to make a 
detour or come to a complete stop (Block Time). Robustness - This is a measure of the degree of fault 
tolerance of the routing algorithms. A fault within the port is defined as any circumstances, such as 
an accident occurring, that result in certain routes or tiles being (permanently) blocked. The performance 
of the algorithms are gauged using these measures when the system is in stable state; statistics for 
a ten hour duration were captured. The interarrival time of ships follows a random exponential distribution 
with the mean (user definable) of one ship arriving in every five minutes. Each ship arriving would load 
and unload a random number of containers, lying between one and a user defined maximum. The maximum container 
load for each ship is 476  varied. The number of AGVs utilized per park were varied from 10 to 30. The 
scalability of the routing algorithm is measured by varying the number of AGVs. It is noticed that the 
virtual topology, container allocation strategy, and idle vehicle management policy also influence the 
effectiveness of the routing algorithm [5]. 5.1 Throughput The system's throughput is related to the 
average job turnaround time. If an AGV is able to complete a job faster, it will be able to perform more 
jobs during an interval of time, subject to the availability of jobs. Since we are interested in maximum 
throughputs, we drive the system to saturation to ensure that there is a constant availability of jobs 
for the AGVs. This information could then be used to determine the ideal number of AGVs to operate. The 
system's throughput can be affected by the routing algorithm in many ways. For example, if a longest 
path routing algorithm is used, the system's throughput would definitely be reduced. Simulations show 
( see Fig. 1) that the number of containers handled per hour is consistently higher for row-first routing 
than semi-random routing regardless of the number of AGVs utilized. Hence row-first routing has a higher 
level of throughput than semi-random routing. This can be attributed to the shorter traveling distance 
achieved by routing row-first. However, as the number of AGVs is increased, throughput drops as congestion 
sets in. This is due to the finite capacity of the routes as well as other factors [3]. 5.2 Efficiency 
Two measures are used to determine the efficiency of various aspects of the system. The average container 
load per ship is kept at the system's maximum. The average job turnaround time is shown in Figure 2. 
This is calculated using the formula [(total simulation time- total idle time)/total load served per 
hour]. The bar is partitioned into two parts to take into account the homing time due to the idle vehicle 
management policy chosen. In any case, with row-first routing, the average job turnaround time is reduced. 
This can also be attributed to the shorter distance it takes to route row first. However, in line with 
what was mentioned earlier, the job turnaround time increases when the number of AGVs utilized is increased. 
Figure 2 shows another measure of the overall efficiency of the.AGV scheduler. From the pie charts, it 
can be seen that as the maximum load increases, the reduction in vehicle idle time implies that in both 
cases, the AGVs are heavily utilized. On the other hand, as the maximum load increases above twenty, 
row-first routing generates more blocking than semi-random routing. This can be attributed to the concentration 
of vehicles on the vertical routes as opposed to semi-random routing, which tries to spread the vehicle 
about the port randomly. In SIM-PORT, blocking time does not take into account the time an AGV takes 
to travel an alternate route; it includes only the time it takes to make a detour and the amount of time 
it spends sit idling when it is 6locked. In both cases, the AGVs spend a minimal amount of time being 
blocked. This does not necessarily mean that congestion is reduced as the AGVs might be shuffling about 
in a congested area. It is noted that overall, each AGV spends about a quarter of its time traveling 
back home. This is rather inefficient as an AGV which has delivered its load should be free to take another 
pending job on the spot, rather than having to go back home. Hence, setting the idle vehicle management 
policy to stay may increase the AGVs efficiency and improve the throughput of the system. 5.3 Robustness 
Robustness is measured by the degree of blocking that can be tolerated by the routing algorithms before 
serious performance deterioration occurs. Since the current version of SIM-PORT does not allow the user 
to artificially create a permanent blocking of the routes, in our analysis, we shall define blocking 
as the time taken for an AGV to switch to an alternative route and the time spent sitting still, as a 
result of its next tile being occupied by another AGV. Figures 3, 4 and 5 shows the hourly average blocking 
time of each AGV. Figures 3 and 4 are used along with Figures 1 and 2 to determine the system's robustness. 
The steep peaks in the graphs of Figures 4 and 5 indicate an increase in load demand during an 477  
-. ':~ ~i~ ~, ~.'~-~?.:~:~Z. ~"%~ hourly interval. These sudden surges may represent congestion in certain 
areas of the port. As the maximum load increases the average blocking time also increases. The ability 
of these sudden surges to correct themselves shows that there is no serious performance deterioration 
of the two routing algorithms, although heavy blocking may occur at times. However, the graphs did not 
show a clear winner in terms of robustness between the two routing algorithms. 6. Discussions and Conclusions 
We have presented the framework for studying AGV routing strategies. Related is'sues have been identified 
and discussed. Two decentralized algorithms, row-first and semi-random routing are presented. Row-first 
routing has the advantage of shorter distance over random routing; hence, it has a higher throughput 
and efficiency. The AGV parks help to clear unnecessary blocking along the tracks within the container 
storage locations. However, a portion of the AGVs' time is wasted in traversing to these designated areas. 
This has a significant impact on the average job turnaround time. Ironically, the vehicles tend to become 
congested around these parks. This brings us to another issue: since the capacity of the tracks within 
the port is finite, there is a limit to the number of AGVs that can be operated. An increase in the number 
of AGVs does not translate directly to an increase in the system's throughput. On the contrary, the throughput 
and efficiency might just decrease due to congestion, as more vehicles may be out and moving about. The 
detouring algorithm will work only if there is spare capacity on the tracks. However, when adjacent tracks 
are nearly filled up, the AGVs will have no buffer space to move onto and hence, deadlocks may occur. 
Therefore, the number of AGVs to operate is an important parameter which requires further research. There 
are many recommendations which could be made, such as optimizing the route layout, assigning traffic 
lights at intersection, modifying the virtual topology, etc. In conclusion, our work makes it even clearer 
that much work is still needed to clarify this new research area. References [1] S. C. Daniels : "Real 
Time Conflict Resolution in Automated Guided Vehicle Scheduling", Ph.D. thesis. The Pennsylvania University. 
1988. [2] J. J. Bartholdi IIl and L. K. Platzman : "Decentralised Control of Automated Guided Vehicles 
on a Simple Loop", liE Transactions. Vol. 21, No. 1. 1989. [3] Y. A. Bozer and M. M. Srinivasan : "Tandem 
Configurations for Automated Guided Vehicle Systems and the Analysis of Single Vehicle Loops", liE Transactions. 
Vol. 23, No. 1. 1991. [4] A. C. Y ONG : "Routing Automated Guided Vehicles", Nanyang Technological University, 
School of Applied Science, Computer Engineering, FYP 1994/5. [5] J. T. L. SOH : "Routing Automated Guided 
Vehicles", Nanyang Technological University, School of Applied Science, Computer Engineering, FYP 1994/5. 
[6] W. J. HSU and S. Y. HUANG: "Route Planning of Automated Guided Vehicles", Proc. Intelligent Vehicles, 
Paris, 1994, pp. 479-485. [7] S. Y. HUANG and W. J. HSU :"Routing Automated Guided Vehicles on Mesh-Like 
Topologies", lnt'l Conf. on Automation, Robotics and Computer Vision, 1994. [8] E. G. COFFMAN, M. J. 
ELPHICK, and A. SHOSHANI. : "System Deadlocks", Computing Surveys, vol. 3, pp. 67-78, June 1971. [9] 
A. S. TANENBAUM : "Modem Operating Systems", Prentice Hall International Edition, 1992. [10] W. J. HSU 
: "Two Arms Are Faster Than One", The Int'l Journal of Robotics Research, Vol. 13, No. 4, Aug. 1994, 
pp. 364-368. 478  91}. Com~e~ Se~'~d 70. + 30 . ~3oi  to2 P<X) : Row-First with X AGVs SR(X') : Semi.Random 
with X AGV~ Figure |. Thro~ghputs: Row-First vs Semi-Random SR R Timo w/o Horn. T~+ R Ro,~First SR S,m/R~dom 
 50 I00 150 200 250 Figure 2. Average Job Turnaround Time R,~DOM ROUTING ROW-FIR,q'I" 2 2% 2,2% ~ ~:~.,:. 
2~.9% 29.s% ?~.~,~:., . W~ Iv~bximuf'n Loed of 40 C, onte/n,e¢'$ 2.~'M, 2 ~'*¢b 4,6q4b t ...... $2%% 
 42 38 Figure 3. A Breakdown of AGV's Activities Idl, "rim, Lodd Time Ttaval Tieaa Block Tita~ 479 
 $ Ave Block Tithe (rams) 7 4 1 Time 0 l' 2' 3' 4' 5' 6' 7' S' 9' I0' (1"~) Figure 4 Average AGV Blocking 
Time in Semi-Random Routing I 0 Ave Block Time <rains) 6 4 2 Time (m,) 1' 2' 3' 4' 5' 6' 7' S' "9' '10' 
 Figure 5. Average AGV Blocking Time in Row-First Routing 
			