
 A COMPLETE AXIOMATIZATION FOR A LARGE CLASS OF DEPENDENCIES IN RELATIONAL DATATBASES Fereidoon SadriJ" 
 Princeton University Jeffrey D. Ullman~ Stanford Uniwrsitjf ABSTRACT Relational database theory has 
discovered complete axiomatizations for functional and multivalued depend- encies. However, a database 
design system that makes use of dependencies declared by the user must deal with some more general kinds 
of dependencies than these--- at least with embedded multivalued dependencies. Yet no axiomatization 
for embedded multivalued depend- encies is known. In this paper, we define a more general class of dependencies, 
called "template dependencies" and give a complete axiomatization for these. We then discuss the interaction 
between functional dependencies and template dependencies. I. Definitions A relational database scheme 
consists of a universal set of attributes U and a set of "dependencies." The at- tributes in U are names 
for the components (columns) of relations in the database, and the dependencies, in the most general 
sense, are simply subsets of the set of all possible relations over U. The purpose of asserting dependencies 
is to limit the set of relations that could be the "current value" of the database; by doing so we may 
be able to use database organizations that we could not use if we knew nothing about what might appear 
in the database. The most common forms of dependencies are functional dependencies (FD's) and multivalued 
de- pendencies (MVD's). Functional dependencies are denoted syntactically by X --4 Y, where X and Y are 
(not necessarily disjoint) subsets of U, the set of all attributes. The semantics t Work supported by 
a grant from Idahan University of Tech- nology. Work partially supported by NSF grant MCS-79-04528. Permission 
to copy without fee all or part of this material is granted provided that the copies are not made or 
distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. of FD's is 
as follows. We say that a relation R satisfies FD X ~ Y if whenever R has two tuples that agree on all 
the attributes in X, those tuples also agree on the attributes in Y. Thus, X ~ Y defines a subset of 
all possible relations over U, those that satisfy X ~ Y. It is known (Armstrong [1974]) that every FD 
is equivalent to a set of FD's where each right side is a singleton. That is, if Y -~- (A1, .... ,An), 
then X--~ Y can be replaced by X --~ Ai,...,X ~ An.J" We shall assume henceforth that FD's have singleton 
right sides. Furthermore, we assume of X ~ A that A is not in X. In the opposite case, the FD is trivially 
satisfied by all relations anyway. In database theory, a tuple is formally regarded as a mapping from 
attributes to values, rather than as a list of component values, although the latter viewpoint is handy 
when the order of the attributes in the list is understood. We often use ~[Z], where t is a tuple and 
Z is a set of attributes, to stand for ~ restricted to domain Z, that is, the components of t for the 
attributes in Z. Thus the meaning of FD X --~ Y can be stated more precisely as: if tl and ~2 are in 
R, and ~i[X] ~ t2[X], then tl[Y] ~-~[YJ. Functional dependencies were introduced in the paper by Codd 
[19770]. A complete axiomatization is due to Armstrong [1974]. Multivalued dependencies are denoted syntactically 
by X --~ Y. The meaning of this dependency is that if relation R satisfies the dependency, then for every 
tl and t2 in R, if tl[X l -~ ~[X] then there exists ts in R such that: 1. ~3[~ = ~[~ -~ ~[~, 2. ~[~ = 
~[~, and 3. ~3[u -- x -~I = ~[u -- x-- ~I. Less formally, whenever we have two tuples that agree on 
X, we can interchange their values for the attributes in Y, as a group, and be assured that the two new 
tuples 1" We conventionally denote setm of attributes by the concatena- &#38;#169; 1980 ACiVI 0-89791-017-6/80/0400/0117 
$00.75 tion of their members, no Ad hi shorthand for ~Ad~, and ABe stands for ( A,B, C ~. 117 are also 
in R. Another viewpoint, somewhat simplistic, says that the set of Y-values associated with any X- value 
is independent of the values in all other attributes. Multivalued dependencies were developed independ- 
ently by Fagin [1977], Zaniolo [1976], and Delobel [1978]. A complete axiomatization for FD's and MVD's 
was given by Beeri, Fagin, and Howard [1977]. Example 1: Consider the relation R in Fig. 1, where U = 
{A,B,C,D}. The FD AC --~ D holds in R. In proof, note that the first and fourth tuples agree on both 
A and C, but they also agree on D. Similarly, the second and third tuples agree on A and C, but also 
on D. No other pairs of tuples agree on A and O. ABCD 0 1 2 3 0 2 1 4 0 1 1 4 0 2 2 3 5 1 3 2 Fig. 
I. The relation R. The FD CD --~ B fails to hold, since the second and third tuples agree on C and D, 
but not on B. The IVIVD A ) ~ B holds. For example, if t I and ~2 are the first two tuples in Fig. 1, 
then we may check that the tuple ~3, where ~3[A] ffi t1[A] ffi O, ~3[B] ----~,[B] = I, and ta[CD] -~ 
t2[CD] ~-1, 4, is present; it is row three. The reader should observe that we may decide whether a dependency 
holds for a given relation by direct consideration. However, the question whether a dependency holds 
"in general" cannot be resolved (at least not in the positive) by examining one relation, or any finite 
number of relations. The assertion that a dependency holds is the responsibility of the database designer, 
and it cannot be "proved." H. Inference of Dependendes The design of a relational database involves 
the selec- tion of a set of relation schemes, that is, subsets of the set of attributes U; each relation 
scheme forms the set of column headers for one relation in the database. The goal of the design is to 
produce a set of relation schemes whose relations will be free of redundancy and other awkwardnesses 
called "anomalies" in Codd [1970]. The presence or absence of anomalies and the correct choice of relation 
schemes are influenced by the set of depend- encies that we assume, as the next example illustrates. 
Example 2: Let our universe of attributes be { S, A, C }, standing for Student, Address, and Course, 
respectively. If we assume S ~ A, that is, each student has a unique address, then keeping the data in 
one relation SAC causes redundancy; we repeat the student's address once for each course he is taking. 
A preferred design is to use relations SA and SC. Then, the address of a student is recorded only once, 
in the SA relation. However, i| S ~ A does not hold, that is, the address we record for a student depends 
on the course (it might be the address at which the student attends his section of tile course), then 
the decomposition of SAC into SA and SC might lose information and cannot be allowed (see Aho, Beeri, 
and Ullman [1979]). U While there are several methods we can use to design a database that is free of 
anomalies for a given a set of dependencies, it appears that we always need to solve the inference problem 
for dependencies (see Ullman [1980] for details). This problem, formally stated, is: Given a set of dependencies 
~ and given another dependency a, is it true that every relation R satis- fying all the members of I~ 
also satisfies o? If so, we write I~ ~ o and say that I~ logically implies o. For example, { A --~ B,B 
--~C} ~ A -+ C This observation is a simple example of the "transitive law" for functional dependencies. 
It is known that if cr and the members of E are FD's and/or 1VIVD's, then it is decidable whether I3 
~ o (Beeri, Fagin, and Howard [1977]). ]]I. More Complex Forms of Dependencies It appears that FD's and 
MVD's are almost sufficient to describe the "real world," and thus could be used for a database design 
theory. However, there is at least one, more general form of dependency that appears naturally, and this 
form causes severe difficulties when we try to infer dependencies. This type of dependency, called an 
embedded multivalued dependency (EMVD), was first studied byFagin [1977] and Delobel [1978]. For disjoint 
X, Y and Z, we say X ~ Y ] Z holds if, when any "legal" relation over the universal set of attributes 
is projected onto the set of attributes X tJ Y t3 Z (we project by restricting tuples to these attributes), 
the 1VIVD X --~ Y holds.~ Another way of looking at the EMVD X --w, Y [ Z is that if the relation R over 
universal set of attributes U satisfies the dependency, then whenever we have two tuples ~1 and t2 in 
R, and tl[X] -~- ~[X], it follows that there is some t3 in R, where: I. = = 2. t3[r]= tj[r], and 3. 
t3[z] = Note that ~3[U -- X --Y --Z] can be arbitrary; we can assert nothing about the values t3 has 
in these com- ponents. t Note that by Pagin [1977], X --~ Y holds in X tJ Y tJ Z if and only if X ~ Z 
holds. Also, by Aho, Beeri, and Ullman [1979], there is no such thing as an "embedded FD"; every FD that 
holds in a projection must also hold in the original relation. I18 Example 3: Consider U = { C, S, 
P, Y }, standing for Course, Student, Prerequisite, and Year (in which the student took this prerequisite 
for the course). We can reasonably assert the FD SP -~ Y, that is, each student enrolled in a course 
took each prerequisite for that course in at most one year. There are no full (nonembedded) MVD's to 
assert, but there is the EMVD C ~ S [ P. That is, the set of students taking a course is independ- ent 
of the prerequisites for the course. The reader should check that full MVD's likeC ~ Sor C ~ P fail to 
hold. For example, C --~ S is not valid since just because R contains the tuples clslply} and cis2p2y~ 
does not mean it contains clslp2y2. True, student e must have taken prerequisite P2 in some year Y3, 
since he is taking course c b and P2 is a prerequisite for cl. However, there is no reason to believe 
that students sl and s2 took p2 in the same year. Unfortunately, when we try to make inferences about 
EMVD's, we appear to run into a stone wall. There is no known algorithm to decide E ~ o in the case that 
~ includes EMVD's, yet it is not known that inference for EMVD's is undecidable. Neither is a com- plete 
axiomatization for EMVD's known. To tackle these problems for EMVD's, some more general types of dependencies 
have been studied recent- ly, with the hope that the more general class would have an axiomatization 
or would provide insights that lead to a decision procedure for the EMVD inference problem. These classes 
include the "subset dependencies" of Sagiv and Walecka [1979] and the "transitive dependencies" of Paredaens 
[1979], which are really subset dependencies plus functional dependencies. The present paper reports 
on the smallest superset of the EMVD's known to have a complete axiomatiza- tion. Our class of dependencies, 
called "template de- pendencies," or TD's, also include a variety of other de- pendency classes that 
have been studied recently, such as join dependencies (Rissanen [1978]), mutual depend- encies (Nicolas 
[1978D, generalized mutual dependencies (Mendelzon and Maier [1979]) and embedded versions of these. 
 IV. Template Dependencies A template dependency is an assertion, about a rela-tion R, that if we find 
tuples ri,..., rk in R with certain specific equalities among the symbols of these tuples, then we can 
find in R a tuple r that has certain of its symbols equal to certain of the symbols in rb...,rk. Other 
components of r may be arbitrary. Formally, we write a template dependency T-~ rl,...,r~ r where the 
ri's and r are strings of abstract symbols. The length of the r~'s and r equals the number of attributes 
in the universal set, and positions in these strings are assumed to correspond to attributes in a fixed 
order. No symbol may appear in two different components among the ri's and r. It is, of course, permissible 
that one sym- bol appear in the same component of several of the r~'s or r. For convenience, we often 
write TD's in line as rl,  , rk/r. Relation R is said to satisfy TD T if whenever there is a homomorphism 
h on the symbols appearing in the r~'s such that for all i, h(ri)~ is a tuple in R, then we can extend 
h to those symbols that appear in r but do not appear among the ri's, in such a way that h(r) is also 
in R. Example 4: Let U ~ {A,B,C,D} and let R be the relation previously given in Fig. 1. Let T be the 
TD: a~ b~ cl d~ a2b~d2 a~ b2 c2 ds a2~c2&#38; Define h by: h(al) = h(a2) = 0; h(bl) = h(cl) -~-1; h(b~) 
= h(~) = 2; h(d2) = h(d3) = 3, and h(dl) = 4. Then h(alblcldl) = 0114, h(a2blc2da) = 0123, and h(alb2c2d3) 
-~- 0223, which are rows three, one, and four of Fig. 1. Thus, we must exhibit a value b for h(ba) such 
that h(a2b3c2dl) is in the relation of Fig. 1, if that relation is to satisfy the TD T. However, for 
no value of b is 0b24 a row of Fig. 1, so we may conclude without further ado that .R does not satisfy 
T. Of course, if a value of b had been found, we would then have to check all other possible homomorphisms 
that mapped the first three rows of T into rows of Fig. 1. 0 The following terminology will prove important. 
If T = rb... ,r~/r is a TD, then rl,...,rk are called the hypothesis rows, or hypotheses, and r is the 
conclusion (row). A symbol that appears in the conclusion but not in the hypotheses is said to be a unique 
symbol. For example, b3 is the only unique symbol in the TD T of Example 4. A homomorphism h is safe 
if when- ever h(a) ~ h(b), for a ~ b, neither a nor b are unique symbols. Let us close this section with 
the following two ob- servations. Fact I: The following are special cases of TD's: (a) MVD's (b) EMVD's 
(c) subset dependencies (d) mutual dependencies (e) generalized mutual dependencies (f) join dependencies. 
 Fact 2: The TD's with two hypothesis rows are exactly equal to the subset dependencies. Example 5: 
Let U ~ {A,B,C,D}. Then the MVD A --~ B is synonymous with the TD: t h(al" "an) is defined, as usual, 
to be h(al)" "h(a.). i19 ax bx cl dt al b~ o~ d2  a~ h c~ d~ The EMVD A ~ B I C is written: al bx 
cl dl ax b2 ~2 d2 ax bx c~ d~ Note that the EMVD needs a unique symbol, d3, while MVD's never require 
unique symbols when ex-pressed in the TD language. V. A Partial Decision Procedure for TD's The following 
procedure, known as the "chase process" in Maier, Mendelzon, and Sagiv [1979], will partially decide 
the inference problem for TD's, in the sense that if ~3 ~ o, the procedure will eventually affirm this 
fact, but the procedure will not always halt in the opposite case. Let ~3 ~-~ {Ti,...,Tn} be a set of 
TD's and o ~---rx,...,rk/r be another TD. We construct a tableau, which is a (possibly infinite) set 
of rows, as follows. 1. Let So ~- {ri,...,rk}. 2. Construct S~+x from S~ by starting with S~+x S~ and 
then considering each Tj ~-sl,... ,sm/s in  and each homomorphism h such that for all p, 1 < p .< rn, 
h(sp) is in Si. If for no extension f; of h to the unique symbols of T$ is ft(s) in Si, then pick new 
symbols f~(a) for each unique symbol a of T$, and add h(s) to S~+i. 3. Let S -~- U~°~0 si. Theorem 1: 
If ~ and o are as above, then ~3 ~ a if and only if the relation S constructed above has a row r t that 
differs from r (the conclusion of o) only in positions where r has a unique symbol. (We call r t a winning 
row in this case.) Proof: (sketch) The proof follows the ideas of Maier, Mendelzon, and Sagiv [1979]. 
Observe first that S must satisfy ~3, since any violation of some TD T$ in ~3 that appears in S~ is repaired 
in S~+1, although the "repair" may introduce new violations of dependencies. If there is no row r t in 
S, then o is violated~ because its hypotheses are in So, hence in S, yet no extension of the identity 
homomorphism on the symbols appearing in these hypotheses yields a row in S (such a row would serve as 
rs). Conversely, if some winning row r S is in S, then a proof of E ~ o can be constructed directly from 
the steps that lead to the placement of r I in some S~. Note that if E consists of MVD's, or more generally, 
of TD's with no unique symbols (full TD's), then we never have a chance to create any new symbols in 
any of the S~'s. Thus the infinite union S on = U,=o s, con- verges to a finite relation. Hence, there 
is a decision procedure for the inference problem for full TD's, since after convergence, we need only 
test whether r is in S. VI. Axioms for TD's We shall now give our axiomatization of TD's. TDI: (Homomorphism). 
Let T -~ rl,..., rk/r be a TD and let h be safe on T (i.e., h does not map a unique symbol and a nonunique 
symbol to the same value). Also, assume h does not map symbols appear- ing in different components to 
the same value. Then T implies the TD h(rl),...,h(rk)/h(r). TD2: (Augmentation). Let T ~ rl, . . . , 
rk/r and let rk+l be a row that does not contain any unique symbols of T, nor does it have a symbol in 
one component that appears in a different component in T (r~_t_l may con-tain symbols not appearing in 
T at all). Then T implies rl,  , rk, rk-~-l/r. TD3: (Transitivity). rl,..., rk/r and r~,..., rk--l/rk 
imply rl,..., rk--1/r. TD4: (Weakening). Let T ~-rx,..., rt/r and let r t be r with some symbols replaced 
by entirely new sym- bols, not appearing in T. Then T implies rl,..., re/r t. TD5: (Trivial dependencies), 
r/r is true for any r. Theorem 2:TD1-TD5 are sound. Proof: (sketch) We shall prove TD1 to give the flavor 
of the arguments and, in particular, to indicate why the safety of h is necessary. (Note that the additional 
condition that h not identify symbols not in the same component is required so that the result will be 
a TD.) Suppose T holds for relation R, but h(rl), . . . ,h(rk)/h(r) does not. Then there is a mapping 
g such that for all i, g(h(ri)) is in R, yet for every extension ~ of 9 to the unique symbols of h(r), 
~(h(r)) is not in R. Let y .~ gh. Since T holds for R, and f(r~) is in R for all i, there must be an 
extension f of f such that f(r) is in R. Because h is safe, the positions holding unique sym- bols in 
r and h(r) are the same. If a is a unique symbol of r, define ~(h(a)) ~ f(a). This rule properly defines 
an extension ~ to g, since it is not possible that h(a) ~ h(b) for any b ~ a. But then ~(h(r)) ffi ?(r) 
is in R, contrary to our assumption that no such ~ exists. I] Theorem 3:TD1-TD5 is a complete set of 
axioms for TD's. Proof: (sketch) Suppose E ~ o, where o ~ rl,..., rk/r. Then by Theorem I we know there 
is a finite sequence of rows, rl,..., rm, with n; > k, such that each ri, i > k, is added during the 
chase process when we start with rows rl,..., rk. Furthermore, rm is a winning row; that is, either rm 
is r, or r can be formed from rm by replac- ing certain symbols by other symbols not appearing in rl,..., 
rk. Finally, we know that each r~, i > k, is added during the chase because of some TD in E applied to 
some subset of rl,..., ri--1. 120 Since we have the weakening axiom, TD4, we may as well assume that 
rm -~ r, for if we can infer rl, rk/rm ,  o will then follow immediately by weakening. We shall prove 
by backwards induction on j -~ m, m --1,..., k that rl,..., rffrra follows from E by TD1-TD5. Basis: 
j ----m. rm/rm follows from TD5. As rm/rm has no unique symbols, we can use the augmentation rule, TD2, 
to infer rb..., rm/rm. Induction: Suppose rl,..., rffrm has been proved. If j -~ k we are done. Otherwise, 
rj must have been added in the chase process because there is some TD sl,... ,sn/s in E, and a homomorphism 
h such that for 1 < i < ,, h(si) ~ rn, for some 1 <_ pl < j. Further, h can be extended to h so that 
fs(s) -~- U, and if a is a unique symbol of s, then f~(a) does not appear among rl,..., rj--1. The latter 
assertion follows from rule (2) of the chase process definition given in Section V. Thus/~ is safe, and 
we may infer rm,..., r~./ry from sl, ..., s,/s and TD1. Note that the rp,'s need not all be distinct, 
but since, technically, the hypotheses of TD's are sets of rows, no problems will arise if we pretend 
they are distinct. Next we use TD2 to augment the hypotheses of rm,... ,r~/rj and infer rl,...,rj--l/rj. 
We can do so because symbols of rj either appear in one of the rm's , or do not appear at all among rb..., 
rj--l. Finally, we use TD3 to infer rl,.. , ry--l/rm from rl, ..., ry/rm and  n,..., ~#-,/~#. D VII. 
TD% and FD's While TD's apparently include all the realistic tuples that are of the form "given certain 
tuples in a relation, we can expect some other, related tuple to be in the relation," TD's do not include 
any constraint of the form "given certain tuples in a relation we can infer something about those tuples." 
The FD's are by far the most im- portant class of dependencies of the latter type. Thus, a realistic 
database design system must include facilities to manipulate TD's and FD's, and such facilities are probably 
sufficient. While we have presented a theory of TD's here, and Armstrong's theory of FD's is well known, 
we still need to explore those FD's that can be inferred from TD's and vice-versa, and develop a theory 
for mixtures of TD's and FD's. Fact 3: Let E be a set of TD's. Then for no FD o is ~ o true. Proof: (sketch) 
Consider the relation R consisting of all binary tuples of length equal to the number of at- tributes. 
Then R satisfies every TD but no nontrivial FD. Theorem 4: There is a partial decision procedure for 
~ o when E and o consist of TD's and FD's. Proof: The proof again generalizes the ideas of Maier, Mendelzon, 
and Sagiv [1979]. The FD's are applied to the tableau by identifying symbols if their equality can be 
inferred by applying an FD to the rows of the tableau. When identifying symbols, replace the newer symbol, 
that is, the one that appeared last as the tableau was constructed, by the older symbol. This rule guarantees 
that for each symbol there is some finite time after which the symbol will remain unchanged, even if 
the chase process goes on forever. If o is a TD, and we create a winning row in the chase process, then 
we again have a proof that E ~ o. The only nuance is that if an FD equates two symbols of the hypotheses 
of o, then we may have to change our goal regarding the symbols to be found in a winning row. If we never 
get a winning row, then the "limit" relation, consisting of all tuples that after some finite time are 
unchanged (recall changes occur by applying FD's) serves as a counterexample to ~==o. If o is an FD, 
say X ~ A, we test whether two rows that agree on X and differ in all other components are ever inferred 
to have equal A-components. 0 Theorem 5: Let E/be a set of FD's and Eta set of TD's. Construct E~ from 
E! by replacing each FD X ~ A in E/by the TD of Fig. 2, where ~I and z2 represent strings of symbols 
in the X-components; al and a2 represent values for the A-component. The symbols 91, I/2, and !/3 represent 
all components other than X U {A }. (Note that the TD of Fig. 2 is trivially implied by X ~ A, since 
if that FD holds, then al and a2 must be the same symbol.) Then if o is a TD such that ~! U Et ~ o, it 
is also the case that E~ U E~ ~ o. xl al 91 Zl a2 ~a z2 al ys Z2 ~ Fig. 2. The TD constructed from X 
~ A. It follows from Theorem 5 that inferences of TD's can be made by converting FD's to TD's and then 
work- ing with TD's alone. This result is analogous to the result of Beeri [1977] that says we can infer 
MVD's by converting X --~ Y to X : : Y and then working with MVD's only. Note, however, that the TD of 
Fig. 2 is weaker than the MVD X ~ Y. Also, in analogy with Beeri, Fagin, and Howard [1977] we can extend 
the axioms TD1-TD5 to a set of axioms for FD's and TD's by adding the following two rules: 1. From X 
~ A we can infer the TD of Fig. 2. 2. We can infer the functional dependency X ~ A from the IVIVD X 
--w, A (stated as a TD, of course) and any FD Y ~ A, where A is not in Y.  A proof of Theorem 5 and 
the matters above ap- 121  pears in Sadri and Ullman [1980]. tabase relations," Dept. of EECS, Princeton 
Univ., VIII. Othzr Rehsted Work Recently, C. Beeri has informed us that he and M. Vardi have obtained 
essentially the same results as reported here, and some alternative axiomatizations as well (Beeri [1979]). 
Further, Fagin [1980] reports on a class of de- pendencies called implicational dependencies, that prop- 
erly include the TD's. Another class of dependencies, called algebraic dependencies, also properly contains 
the TD's and has been shown to have a complete axiomatiza- tion {Papadimitriou and Yannakakis [1980]). 
Acknowledgement We would like to thank C. Beeri for pointing out an error in our original statement of 
Theorem 5. Bibfiography Aho, A. V., C. Beeri, and J. D. Ullman [1979]. "The theory of joins in relational 
databases," ACM Trans- actions on Database Systems 4:3, pp. 297-314. Armstrong, W. W. [1974]. "Dependency 
structures of data base relationships," Proc. 19741FIP Congress, pp. 580--583, North Holland, Amsterdam. 
Beeri, C. [1977]. "On the membership problem for multivalued dependencies in relational databases," TR229, 
Dept. of EECS,PrincetonUniv., Princeton, N.J. Beeri, C. [1979]. Private communication to J. D. Ullman, 
Dec., 1979. Beeri, C., R. Fagin, and J. H. Howard [1977]. "A complete axiomatization for functional and 
multi- valued dependencies," ACM SlGMOD Internation-al Symposium on Management of Data, pp. 47- 61. Codd, 
E. F. [1970]. "A relational model for large shared data banks," Comm. ACM 13:6, pp. 377-387. Delobel, 
C. [1978]. "Normalization and hierarchical dependencies in the relational data model," ACM Transactions 
on Database Systems 3:3, pp. 201- 222. Fagin, R. [1977]. "Multivalued dependencies and a new normal form 
for relational databases," ACM Trans- actions on Database Systems 2:3, pp. 262-278. Fagin, R. [1980]. 
"Horn clauses and data dependencies," these proceedings. Maier, D., A. O. Mendelzon, and Y. Sagiv [1979]. 
"Test- ing implications of data dependencies," ACM Trans-actions on Database Systems 4:4, pp. 455-469. 
Mendelzon, A. O. and D. Maier [1979]. "Generalized mutual dependencies and the decomposition of da- Princeton, 
N. J. Nicolas, J. M. [1978]. "Mutual dependencies and some results on undecomposable relations," Proc. 
Inter. national Conference on VeryLargeData Bases, pp. 360-367. Papadimitriou, C.H. and M. Yannakakis 
[1980]. "Alge- braic dependencies," unpublished memorandum, Laboratory for Computer Science, M. L T., 
Cam- bridge, Mass. Paredaens, J. [1979]. "Transitive dependencies in a database scheme," R387, MBLE, 
Brussels, Belguim. Rissanen, J. [1978]. "Relations with functional and join dependencies and their representation 
by independ- ent components," IBM, San Jose, Calif. Sadri, F. and J. D. Ullman [1980]. "The interaction 
between template dependencies and functional de- pendencies," submitted to 1980 SIGMOD Conf. Sagiv, Y. 
and S. Walecka [1979]. "Subset dependencies as an alternative to embedded multivalued depend- encies," 
U1UCDCS-l~-79-980, Dept. of C. S., Univ. of Illinois, Urbana, Ill. Ullman, J. D. [1980]. Principles of 
Database Systems, Computer Science Press, Potomac, Md. Zaniolo, C. [1976]. "Analysis and design of relational 
schemata for database systems," Ph. D. Thesis, Dept. of C. S., UCLA, Los Angeles, Calif. 122 
			