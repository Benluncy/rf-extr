
 STOC(Milwaukee 1981), 202-206 LALR(k) TESTING IS PSPACE-COMPLETE Esko Ukkonen and Eljas Soisalon-Soininen 
Department of Computer Science, University of Helsinki Tukholmank~tu 2, SF-00250 Helsinki 25, Finland 
 Abstract. The problem of testing whether or not an arbitrary context-free grammar is LALR(k) for a fixed 
integer k ~ I (i.e. only the subject grammar is a problem parameter) is shown to be PSPACE-com- plete. 
The result is in contrast with testing the membership in several other easily parsed classes of grammars, 
such as LR(k), SLR(k), LC(k) and LL(k) grammars, for which deterministic polynomial time membership tests 
are known. The PSPACE-hardness of the problem is proved using a transformation from the finite state 
automaton non-universality problem. A nondeterministic algorithm for constructing sets of LR(k) items 
leads to a polynomially space bounded algorithm for LALR(k) testing. Key Words: computational complexity, 
context-free grammars, parsing, LALR(k) grammars, PSPACE-complete problems. CR Categories: 5.25, 5.23, 
4.12. i. Introduction In [5] several results are given concerning the problem of testing whether or 
not an arbitrary grammar is in some easily parsed subclass of con- text-free grammars. Particular attention 
is paid in [5] to LR(k) grammars, and an O(n k+2) time bounded algorithm is given for testing the LR(k) 
 Permission to copy without fee all or part of this material is granted provided that the copies are 
not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the 
publication and its date appear, and notice is given that copying is by permission of the Association 
for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. 
&#38;#169;1981 ACM 0-89791-041-9 /80/0500/0202 $00.75 property. This algorithm has the lowest worst-case 
behaviour presently known for LR(k) testing; it is an improvement of an O(n 4k+4) algorithm implicit 
 in the fundamental work by Knuth [6]. The O(n k+2) algorithm carries over to many other parameterized 
 classes of grammars, such as the LL(k), strong LL(k), SLR(k), LC(k) and strong LC(k) grammars [5]. An 
improvement for LL(k) testing is found in [8] where an O(n k+l) algorithm is established. Unfortunately 
the methods used in obtaining the above upper bounds do not apply to the problem of testing whether or 
no~ a context-free grammar is LALR(k). The LALR(k) grammars [2] are extensively used in different compiler 
compilers and parser generators. From the practical point of view they therefore constitute an important 
subclass of the deterministically bottom-up parsable grammars. The LALR(k) grammars are the largest 
subclass of LR(k) grammars for which k symbol lookahead will resolve all parsing action conflicts arising 
in the LR(0) parser construction. Thus the LALR(k) condition is given essentially in terms of LALR(k) 
parser construction, and LALR(k) testing can be done, of course, by attempting to construct the LALR(k) 
parser. The complexity of such an LALR(k) test is, however, exponential in time and space since even 
LR(0) parsers may be of exponential size. All attempts to circumvent the parser con- struction in LALR(k) 
testing and so possibly achieve a polynomial time test have been fruitless. Only some practical improvements 
in LALR(k) parser construction not decreasing the exponential worst- case nature of the algorithm have 
been reported (for example [3,7]). Even finding a nondetermin- istic polynomial time algorithm for LALR(k) 
testing seems impossible. In this paper we demonstrate that a polynomial time LALR(k) test is highly 
improbable by proving that LALR(k) testing is PSPACE-complete. 2. Definitions and notation We presume 
the basic knowledge of LR(k) and LALR(k) parsing as described e.g. in [I], and we freely use the notation 
and definitions from this reference concerning strings, grammars and parsing. We recall that (i) G 
= (N,Z,P,S) denotes a (context-free) grammar where N is the set of nonter- minals, Z is the set of 
terminals, P is the set of productions, and S is the start symbol, (2) A, B, C,... denote nonterminals, 
(3) a, b, c, ... denote terminals, (4) X, Y, Z denote nonterminals or ter- minals, (5) x, y, z, u, 
v, w denote terminal strings and a, ~, y general strings, and (6) e denotes the empty string. By the 
size [G[ of grammar G we mean the sum of the lengths of the productions of G (the length of production 
A ~ ~ is the length [A~[ of the string At0). For completeness, we repeat here the LALR(k) definition 
and some preliminary definitions needed in it. Let G = (N,Z,P,S) be a grammar. The augmented grammar 
for G is the grammar G' = (NU{S'},Z,PU{S'~S}, S') where S' is not in N. If A ~ ~B is a production of 
the augmented grammar and u E FIRSTk(~* ) then [A ~ ~.B,u] is called an LR(k) item for G. The set of 
items [A ~ a.~,Ul] , [A ~ a.~,u 2] .... , [A ~ a.~,u n] with the same core A ~ ~-B is written [A ~ 
a.B,Ul/U2/.../Un] , for short, and item [A ~ a.B,e] is written [A ~ a.B]. If A is a set of LR(k) items 
then the closure of A, denoted by CLOSURE(A), is the smallest set of LR(k) items for G containing A such 
that if [A ~ a.B~,u] is in CLOSURE(A) then [B ~ .y,v] is in CLOSURE(A) for every B ~ y in P and every 
v E FIRSTk(BU). The function GOTO is defined for all sets A of LR(k) items and for all X in NU[ such 
that GOTO(A,x) = CLOSURE(A') where A' consists precisely of items [A ~ aX.B,u] such that [A ~ a.XB,u] 
is in A. In an obvious way GOTO(A,a) is then defined generally for strings a in (NUK)*. The canonical 
collection of sets of LR(k) items is the set {A I A = GOTO(CLOSURE([S'~.S,e]),a) for some a 6 (NUZ)*}. 
A set A of LR(k) items is called consistent, if no two distinct members of A are of the form [A ~ B.,u] 
and [A ~ BI.B2,v], where u is in EFFk(~2v) The LR(k) property of G can now be character- ized: Proposition 
I. [i] Grarmnar G is LR(k) if and only if every set of items in the canonical collection of sets of 
LR(k) items is consistent. The core of a set A of LR(k) items is a set of LR(O) items defined as CORE(A) 
= {[A ~ a.B] I [A ~ a.~,u] E A for some u}. The LALR(k) collection of sets of LR(k) items is constructed 
by merging those sets in the canon- ical collection that have identical cores. In other words, the LALR(k) 
collection contains for each set of items A in the canonical collection an item set A r which is the 
union of precisely those sets B in the canonical collection such that CORE(A) = CORE(B). Definition 
2. [I] Grammar G is LALR(k) if every set of items in the LALR(k) collection of sets of LR(k) items 
is consistent. Let us still briefly review some concepts pertaining to computational complexity; a more 
de- tailed exposition can be found e.g. in [4]. PSPACE denotes the class of all languages recognizable 
by polynomial-space baunded Turing machines. A language L' is polynomial-time reducible to a language 
L if there is a polynomial-time bounded deterministic Turing machine that for each input x produces an 
output y that is in L if and only if x is in L'. Definition 3. Language L is PSPACE-hard (with re- spect 
to polynomial-time reducibility) if every language in PSPACE is polynomial-time reducible to L. Language 
L is PSPACE-complete if L is PSPACE- hard and, moreover, L is in PSPACE. Thus, to prove that a language 
L is PSPACE- hard, it suffices to describe a polynomial-time reduction to L from some language L' which 
is known to be PSPACE-hard. 3. The result Stockmeyer and Meyer [i0] have shown that the problem of 
determining whether a regular expression over the operators {U,.,*} and the alphabet {0,I} represents 
a set different from (0UI)* is PSPACE- complete (regular expression non-universality prob- lem). By 
a straightforward polynomial-time trans- formation from regular expression non-universality it follows 
that regular expressions can be replaced by finite automata, i.e. the problem of determining whether 
a finite state automaton over the input alphabet {0,i} accepts a set different from (0UI)* is PSPACE-complete, 
too. To obtain a simpler con- struction we will use the result of ~0] in this form. Here a finite automaton 
M = (Q,{O,I},6,qo,F) consists of a finite set Q of states, input alphabet {0,I}, transition function 
6 mapping Qx{0,l,e} to subsets of Q, initial state qo' and a set FcQ of final states. The language 
accepted by M we de- note L(M). If we let NUFA = { M I M is finite automaton over alphabet {0,I} such 
that L(M) # (OUI)*}, then the above considerations can be sunmmrized: Proposition 4. [I0] Language NUFA 
is PSPACE-complete. Fix an integer k ~ I and write NLALR k = { G Igrammar G is not LALR(k)}. In the 
following two theorems we now prove the PSPACE-completeness of NLALR k. Theorem 5. Language NLALR k 
is in PSPACE for every k ~ i. Proof. We must describe an algorithm which accepts a context-free grammar 
G if and only if G is in LALR k and whose space complexity is a polynomial in the size of G. By Savitch's 
theorem [4], the algorithm may be nondeterministic. The membership of G in NLALR k can be tested by 
 the following algorithm: First, generate nondeter- ministically two arbitrary sets of items A and B 
in the canonical collection of sets of LR(k) items for G. Then, if CORE(A) = CORE(B) and AUB is an 
inconsistent set of items, accept G. Correctness of this method is almost ir~ne- diate. If G is accepted 
after constructing A and B then AUB must belong to the same set in the LALR(k) collection of sets of 
items for G. This set is in- consistent and thus G is in NLALR k. Conversely, if G is in NLALRk, there 
must be an inconsistent pair (11,12 ) of items in some set C in the LALR(k) col- lection of sets of LR(k) 
items. Because C is the union of those sets in the canonical collection of sets of LR(k) items that have 
the same core as C, the canonical collection must contain sets A' and B' such that I I is in A', 12 is 
in B'. But this means that our algorithm accepts G because it may happen in the algorithm that A = A', 
B = B', and such A and B clearly satisfy the acceptance condi- tions. To establish the polynomial space 
complexity of the NLALR k membership test we first describe how an arbitrary set of items C in the canonical 
col- lection of sets of LR(k) items can be generated in polynomial space. Starting from the initial set 
A 0 = CLOSURE([S'~ .S,e]) and using the GOTO function this is done as follows. Let C ÷ A O. Then repeat 
the following for zero or more times (the actual number of repetitions is determined nondetermin- istically): 
Set C'÷C and C ÷ GOTO(C',X), where X is taken nondeterministically from NUK. After this the computation 
terminates with output C. Since every set of items C equals GOTO(Ao,a) for some a in (NUK)*, it is 
possible to generate in this way all sets C. Space is needed only for storing C and C'. Thus the space 
requirement is a polynomial in IGI because there are at most IGl k+l different LR(k) items for G and 
each item is of length at most IGi + k, and because GOTO(C',X) clearly can be evaluated in polynomial 
space. (Note that the method is not of polynomial time since we may not assume that J~l would be polynomially 
 bounded in IGl.) In this way our NLALR k membership test may generate sets A and B in polynomial space. 
Since the rest of the method, that is, the test whether or not CORE(A) = CORE(B) and AUB is consistent, 
 can clearly be done in polynomial space, the whole method is of polynomial space complexity. Theorem 
6. Language NLALR k is PSPACE-hard for every k ~ i. Proof. We will describe a polynomial-time transfor- 
mation from finite automata with input alphabet {0,i} to context-free grammars. Let M = (Q,{O,I}, 6,qo,F) 
be any finite automaton, and let G = (N,Z,P,S) be the grammar, where N = (S,E,E',B,B',B"} UQ, 5-= {0,l,a,b,c,d,f,<S>,<E>,<E'>} 
U {<qi > I qi 6 F} O {<qixqj > I qj 6 6(qi,x) , qj'qi E Q, x 6 {e,O,l}}, and P consists of the productions 
(a k denotes the string of k a's) S ~ E I q0<S> I aE' E'-~ Bck<E'> I B'dk<E'> E-~ OE IIE I Bdk<E> I 
B'ck<m> qi -" xqj<qixqj> whenever qj 6 6(qi,x) in M; qi ~ Bdk<qi > I B'ck<qi > I B"fk<qi> for each 
qi 6 F in M; B-~b B' -~b B" ~ b Obviously, such a grammar can be produced by an algorithm with deterministic 
time bound linear in the size of M. We must still establish that L(M) # (OUI)* if and only if G is not 
LALR(k). Observe that without S -~ qo<S> and the qi-productions the grammar G can- not be LALR(k) since 
productions E' -~ Bck<E'> I B'dk<E'>, E -~ Bdk<E> I B'ck<E>, and B ~ b, B' -. b result in an inconsistent 
set {[B ~ b.,ck/dk], [B' -~b.,ck/dk]} in the LALR(k) collection of sets of LR(k) items. But also now 
when the qi-productions are present, this is the only LALR(k) conflict pos- sible for G because the form 
of the qi-productions ensures that the possible ambiguity of M cannot cause any conflicts in G. The LALR(k) 
conflict turns out to occur if and only if the two sets V I = { a I aE is a viable prefix} and V 2 = 
{ a I aq i is a viable prefix and qi is in F} are not equal; recall that a is a viable prefix if and 
only if GOTO(CLOSURE([S' ~ .S,e],a) is not empty. This proves the theorem since V I = (OUI)* and V 2 
= L(M). The above outline of proof is now given in more detail. We first analyze what kind of LALR(k) 
conflicts are possible for G. Suppose [A ~ a.] is in CORE(A) for some set A in the canonical collec- 
tion of sets of LR(k) items for G. If a # b, it is inanediate by the form of the productions that CORE(A) 
cannot contain any other items [A' ~ B.Y] where B # e, since B should be a suffix of a or a a suffix 
of B. This implies CORE(A) = {[A ~ a.]} which is consistent. Hence the set A' in the LALR(k) collection 
with the property CORE(A') = CORE(A) must be consistent, too. On the other hand, if a = b in [A ~ a.] 
then CORE(A) must be equal to A 1 or A 2, A I = {[B ~ b.],[B' ~ b.]}, A 2 = {[B ~ b.],[B' ~ B.],[B" 
~ b.]}, If CORE(A) = A 2 then we always have (I) A = {[B ~ b.,dk],[B '~b.,ck],[B''~b.,fk]}. Hence 
the set in the LALR(k) collection with core A 2 must be equal to A and therefore consistent. So it remains 
for us to consider the case CORE(A) = A 1. Then we have two possibilities, either (2) A = {[B ~ b.,ck],[B 
' ~ b.,dk]} or  (3) A = {[B ~ b.,dk],[B ' ~ b.,ck]}.  The canonical collection of sets of LR(k) items 
for G always contains set (2). In fact, set (2) is the value of GOTO(A0,ab) where A 0 = CLOSURE([S'~.S,e]) 
is the initial set of LR(k) items. If the canonical collection contains set (3), too, then merging of 
sets with identical cores would produce the set {[B ~ b.,ck/dk],[B ' ~ b.,ck/dk]} to be included in 
the LALR(k) collection. This set is inconsistent, To complete the proof it therefore suffices for us 
to show that (3) is in the canonical collection for G if and only if L(M) # (0UI)*. Suppose L(M) # (0UI)*. 
Then (0UI)*~L(M) # ~. Choose a string w in (0UI)*NL(M). Then GOTO(A0,w ) contains, among others, items 
 [E ~ .Bdk<E>,e],[E ~ .B'ck<E>,e]. These are the only items with the dot followed by B, B' or B", because 
the E'-productions trivially cannot appear in the items of GOTO(A0,w) and the only possibility for 
the configuration .B" to appear is in an item of the form [qi ~ "B"fk<qi>'u] for some final state qi 
which would imply that w is in L(M). Hence GOTO(Ao,wb) equals (3). Let conversely L(M) = (0UI) ~. If 
set (3) ap- pears in the canonical collection it must be the value of GOTO(A0,wb) for some w E (0UI) 
~. But be- cause every such w is now in L(M), GOTO(A0,w) must contain, for some u, items [qi ~ "Bdk<qi 
>'u]' k [qi ~ .B'c <qi>,u], [qi ~ "B"fk<qi>'u]' where qi is some final state of M that accepts w. 
Consequently, GOTO(A0,wb) always equals (i) and set (3) cannot appear in the canonical collection of 
sets of LR(k) items for G. Combining Theorems 5 and 6 gives finally: Corollary 7. Language NLALR k 
is PSPACE-complete for each positive integer k. The same is true, of course, for language LALR k = 
{ G I grammar G is LALR(k)}. 4. Conclusion All algorithms known for LALR(k) testing are of exponential 
worst-case complexity even when k is considered a fixed positive integer. In this paper we gave strong 
evidence that this situation is not by accident by proving that LALR(k) testing is PSPACE-complete for 
each fixed positive k. The com- plexity of the uniform testing problem, i.e., both the subject grammar 
and the integer k are problem parameters, is analyzed in [9], where the problem is shown to be PSPACE-complete 
when k is expressed in unary and complete for nondeterministic exponen- tial time when k is expressed 
in binary. Acknowledgements. The authors are grateful to Seppo Sippu for many enjoyable and illuminating 
discus- sions on the topic of this research. The work of the first author was supported by the Academy 
of Finland. References i. Aho,A.V. and J.D.Ullman: The Theory of Parsing, Translation and Compiling, 
Vols. I &#38; II. Prentice-Hall, Englewood Cliffs, N.J., 1972 and 1973. 2. DeRemer,F.L.: Practical translators 
for LR(k) languages. Ph.D.Thesis, MIT, Cambridge, Mass., 1969.  3. DeRemer,F.L. and T.J.Pennello: Efficient 
compu- tation of LALR(k) lookahead sets. In: Proceedings of the SIGPLAN Symposium on Compiler Construc- 
tion. SIGPLAN Notices 14:8 (1979), 176-187.  4. Hopcroft,J.E. and J.D.Ullman: Introduction to Automata 
Theory, Languages, and Computation. Addison-Wesley, Reading, Mass., 1979.  5. Huht,H.B.,lll, T.G.Szymanski 
and J.D.Ullman: On the complexity of LR(k) testing. Comm. ACM 18:12 (1975), 707-716.  6. Knuth,D.E.: 
On the translation of languages from left to right. Info. Contr. 8:6 (1965), 607-639.  7. Kristensen,B.B. 
and O.L.Madsen: Methods for computing LALR(k) lookahead. DAIMI PB-IOI, Computer Science Department, Aarhus 
University, 1979.  8. Sippu,S. and E.Soisalon-Soininen: Characteriza- tions of the LL(k) property. In: 
J.W. de Bakker and J. van Leeuwen (eds.), Automata, Languages and Programming (Seventh Colloquium, Noordwijkerhout, 
the Netherlands, July 1980), Lecture Notes in Computer Science, Vol. 85, Springer-Verlag, 1980, pp. 596-608. 
 9. Sippu,S. and E.Soisalon-Soininen: The complexity of uniform LALR(k) testing. Submitted for publication. 
  i0. Stockmeyer,L.J. and A.R.Meyer: Word problems requiring exponential time. In: Proceedings of the 
5th Annual ACM Symposium on Theory of Computing, Association for Computing Machinery, New York, 1973, 
pp. 1-9. 
			