
 Online information and reduced interval in publishing Impact on the information developing cycle Peter 
Fournier Department 8L15 Information Development Bell-Northern Research Abstract The reduction in the 
rime required to publish online information in the CAD/CAM writing group in BNR is forcing writers into 
a more iterative approach to planning, writing, getting approwd for, and fiiing documentation. This is 
the natural result of reduced interval in software development. Online documentation has become the only 
option for keeping up with the softwsre. It is the only medium that allows writers to produce documentation 
in parallel with software &#38;velopmen~ production and distribution. More iteratiom more frequent distribution 
and especially shorter production intervals has required significant changes in the documentation development 
process. These changes are solving some problems and creating or exacerbating others. managed to keep 
up with the software changes but at a significant Introduction cost the sequence in some parts of the 
traditional publishing I joined the CAD/CAM writing group in BNR in the fall of 1989. model had to be 
abandoned. It seems they are gone for good. In the spring of 1990 I participated in the group s last 
traditional Among the sequences we abandoned wer~document developrmmt and publication cycle. Editing: 
A major release of the Silicon Design System (SDS) software was due for the spring of 1990. Plauning 
for this release began almost a Gur documentation was edited but not all changes could be year before 
the expected due date. Major new software products or incorporated in the documentation before publication. 
We had major revisions of the software were well underway by the fall of to write a priority list of 
things to do, the must haves, and 1989. Writing for these revisions and new documents began in leave 
the rest for future updates. September/October and proceeded throughout the fall and winter  Quality 
checking: The documentation went through a quality check but not all Publication for this release was 
to be both on paper and ordine. By changes could be incorporated before publication. Another January 
of 1990 it was evident tiL once agm schedules were of 1989/1990. priority liit was written and more 
work was deliberately slipping and deadlines were going to be missed. The situation was delayed to future 
updates. complicated by the fact that we had converted from SCRIPT-GML on IBM mainframes to Microsoft 
Word 4.0 on Macintosh Restructuring:  computers before work on the release began and the conversion 
Some documents that would have benefited from restructur足had not been clean. All of our documentation 
required a major ing and rewriting were left intac~ with the intention of effort to bring it up to paper 
publishing standards. restructuring and rewridrig for a later update. Fortunately the software development 
schedules also slipped and Technical sign-ofi we were able to beat the software to the deadline. So, 
all s well Significant software changes occurred after sign-off by man足 that ends well, sort of. agement. 
Complete documents were signed-off but the changes occurring after sign-off were approved one at a time. 
While we met our paper publishing deadlines it became apparent Complete documents were never reapproved 
for that release. that interval in publishing had become a critical issue. In the last Reapproval of 
complete documents was delayed to future three months of the project we watched our documents become 
outdate~ after sign-off, even before they were published. We updates or major releases.  Usability testing: 
Usabfi~ testin~ was done but the intend between having a complete document to test and publication was 
too short to incorporate the results. Another priority list was written and more work was delayed until 
a future update. P _mmqy*mf=~m@dti~k_~Mtitie This liit indicates that the project was getting close to 
being out of copies amnctmadeoxdkibukd for dka amid advantage., the ACM ccpyight control. It wss to some 
extent but the availability of an effective n&#38;=mdtieWeoftie@fi_ mdk&#38;&#38;a~adnfik ~tiq@gk by 
-m of the A-km for Ccquting Madimxy. To CCpy @k w i% or to **_af=ti=mpMa. @ 1992ACM O89791-533-W92IOO1OIOO73$1.50 
SIGDOC 92 online documentation system changed the dynamics of the project. In the tradhiottal publishing 
prccess, if work is delayed it often means that it will not get done. In contras~ online publishing allowed 
the CAD/CAM documentation group to declare, for this release and all subsequent relesses, that the online 
version of any document was the published , definitive, version. Paper products were provided for the 
convenience of the users and only their convenience. Since we expected to reissue the documentation with 
softsvsre updates every few months, delaying srtd prioritizing work became a valid option. Iterative 
documentation development had srrked and was hereto stay. Of the iterns on the list of things-to-do-later 
we managed to work our way through the quality checking and editing work before the end of the summer. 
Other items were delayed by other factors, the most importsnt beiig budget cuts and changes to the life 
expectancy of some of the products. However, the deviations from the standard publishing model we experienced 
in this release of the SDS software were carried forward and became standard in otier product lines, 
especially the Circuit Board Design System (CBDS). Today s process There the motMied process has continued 
to evolve in the CBDS environment. The driving force of reduaxl interval has led us to the following 
situatiotx the turnaround time from new to published information is less than 12 hours for some documents 
. the normal turnaround time for maintenance release publica足tion of the complete CAD/CAM documentation 
suite (3,500 pages/six writers) is four weeks . about half of the 3,500 pages of documentation is published 
in three separate, customer specific versions (raw page counts, in the first six months of this yesr, 
was approximately 35,000 pages) for major releases of new products, the documentation cycle, excluding 
planning, is six months . documents sxe typically developed along with the software products they document 
software developers are increasingly involved in producing the end user documentation for their programs 
users are increasingly involved in designing, evaluating and testing the end user documentation all information 
development is increasingly iterative , end user documentation appears earlier in software develop足 ment 
process and chzutges more ofte~ but in smaller steps To understand how we went from publishing, reliably, 
14,000 paper pages of CBDS documentation every year to being able to publish 70,000 pages online with 
the same number (or fewer) writers, we have to examine to the traditional publishing process developed 
in the BNR writing groups and compare it to the process developed to cope with publishing the demands 
of the CAD/CAM software development groups. The paper process Figure 1 shows the process followed by 
most BNR writing groups, most of the time, in rhe lsst five years. Essentially the same model is used 
when revising documentation. The time sssumed to be available in this model is the major problem when 
dealing with reduced intervals in software development. For example, getting 7,000 pages of documentation 
laid OUL printecl.and into distribution will take about four to six weeks, if everything goes well. Usability 
testing, if it s done, will always take one to two months since there is only one chance to test and 
chsnge the document. !Ymilsrly, editing will always progress at about 30 to 40 pages per &#38;y per editor 
because everything must be caught in one pass. Inmrpmating those editing c4nnments will take more or 
less time &#38;pending on the quality of the wtiting, but it will be signMcant amount of time since there 
is only one chance to make the changes. Whatever steps are taken to shorten the interval before production 
and distribution, they remain the most importsnt restrictions because of effort and cost. The effort 
requires a signiilcsnt amount of time and the cost rules out going through the whole process, or even 
significantly changing i~ more than is absolutely necessary. The online process Figure 2 shows the process 
followed by 8L15, the CAD/CAM writing group. Note that the time required to produce and distribute documentation 
is now measured in days rather tlum months. This increases the number of times a writer can put a document 
through the documentation process from once or twice a year to as many as required by the software supported 
by the documentation. The shortened interval allowed us to move several activities, such as usability 
testing and editing, outside of the once-through linear process and turn them into a continuous process 
of improvement on a four to six week cycle. For example, we restructured access to the documentation 
on one maintenance release. On others we have switched from using Microsoft Word to FrameMaker as our 
authoring tool. With every release, we correct the documentation to match fixes in the software affecting 
the content of user guides and reference manuals. Reduced interval in publication has also sffected the 
way we &#38;velop documentation. Special editions for specific test user groups have been created and 
maintained with very little difilcuhy. During intensive periods of new product development, the draft 
documentation has been updated and distributed on a weekly basis. More importantly, documentation for 
new products has been produced in parallel with the softwsze, the documentation for a feature being drafted 
and reviewed as the feature became available. This has to better coordination between development szhedules 
and documentation schedules. This padlel development has also created a extended time period in which 
to test documentation. We are now developing SIGDOC 92 methodologies that enable writers to usskdity 
test their own docurnentatiom The methodology takes advantage of the increased number of releases of 
the documentation by seeking to address smaller problems more oftem and rolling changes into the documentation 
much faster thart was possible in the paper development process. Overall the net effect of a reduced 
publishing interval has been that documentation is no longer written and published so much as drafted 
and evolved. A detailed example of the process The release notice for every maintenance release of the 
CBDS software sre the fastest turmirotmd documents in the CBDS suite. I will use it to illustrate some 
of the impacts of reduced publishing interval on the documentation process. The CBDS software development 
groups respond to problems encountered in the field by fixiig as many ss possible every four to six weeks. 
Those fries are distributed every four to six weeks in maintenance releases. The release notes document 
the-se changes. They are issued online and on paper. They run anywhere from 20 to 80 pages, and the average 
length is about 35 pages. Every release note is issued in three versions for three different groups of 
customer. A typical four week schedule follows this pattern Six weeks before the release software fixes 
are started. . Two weeks before the release software fixes go into testing (software fixes for the next 
release start here.) Figure 1: Paper process . One week before the release managers know what going out 
and are willing to commit to the content release notes. fixes are of the . Five to seven days before 
the release raw information release notice arrives in the writing group. for the . Three to four &#38;ys 
before the release the release note is writ足tetL formatted, compiled and tested online and sent out for 
wv~. . Zero to seven &#38;ys before the release something in the soft足ware breaks or new fixes to tix 
previous fixes are inserted. . Two to three days before the release notice come in fiorn management. 
approvals for the release . In the morning of the release day tirtal changes made to the release notice 
because of late changes. Depending on the change, approvals for very late changes are obtained verbally 
or the changed page is shown to one or two developers or mimagers. . In the afternoon of the release 
day the release notes are recompiled and tested online and then patched into the soft足ware load. . One 
to seven days after the release the paper masters for dis足tribution with the tapes containing the software 
are completed (the lag time is caused by the tape prepsration and distribu足tion process.) Document Quality 
Checking Develop足 F=a F ment Process 5? wcxumem Planning Designing Production Distribution IA v Y1 r 
Document Usabil ~ Virtual Office End-users Research Testing Testing I  II n 1 II In Developers Developers 
End Users Developers End Users Time writers writers Developers writers Sales and and Marketers Documentation 
writers Vo testers marketingPeople Capy edisors Tim= weeks Time: days specialists Usability specialists 
Involved Time CkiyS Editors Printers to weeks Time Weeks to months m eeu SIGDOC 92 This process illustrates 
several characteristics ~ical of the effects of reduced interval on the documentation process: The writing 
is iterative-information is captured as it becomes available. . Approvals are iterativ%infotmation is 
appoved as it becomes available. Only rhe dra incomplete document is a~oved sa a whole final approvals 
of late changes are done on an as needed basis. . Final online documentation is available within hours 
of the final changes, paper documentation lags by at least a day this is due to a required quality check 
on the formatting of paper documents and getting the masters printed larger docu足ments smffer a larger 
lag time.  Current problems No transition to a new process is painless. Although the effort meeting 
the reduced interval requirement has been successful, it has lead to some unexpected consequences. Approvals 
The uroblem of what constitutes a simt-off on a document . continues and is getting worse. With reduced 
software development inteNals and reduced writing intervals, there is no time to approve all 3500 pages 
at sny point other than a major release. Figure 2 Online process Continuous r~lor regular process Document 
Dwument Develop足 ~ent F+ esi;n Process v, Document Research Time Developers Developers and writers 
writers Marketers Documentation People Time: NO CHANGE specialists  Involved Time NO CHANGE Also, sa 
the writing process becomes more iterative, the a~ovals tend to follow sui~ smaller pieces of the documentation 
set are reviewed in detail. This increases the responsibility placed on writers to ensure accuracy since 
the people approving small changes are not the ssme as those approving large changes at major release. 
We are tdso losing our paper approval trail. Frequently, the final approval on a change is done verbally 
snd since the change is available online, it tends to be checked online. If we only have a &#38;y to 
tmn a document around, getting a hardcopy out to a half dozen reviewers may be impossible. Therefore, 
the tendency is to get a hard copy out for approval earlier, get approval on the draf~ and never print 
the fiial version. The system does work and works we~ but it depends on experienced writers who are competent 
to work with little supervision. Role of writers The ease and speed of publishing online has been a great 
benefit and allowed us to keep pace with software development. However, it has also become very easy 
to do and some development groups are questioning why are wtiters required at all. Some development groups 
now maintain and distribute their own documentation. This trend is pixticukirly hard to resist if the 
development group has only had contact with writing groups that provide little more than a reformatting 
service. The trend is also hard to resist because large portions the final docutnentatiom especially 
reference and application note material, obviously belongs to the &#38;velopem. In the CAD/CAM context 
this material tends to be very technics addressed to a technical - Distribution End-users End Users 
Developers End Usets Developers writers Writetz Vo testers Sales and marketing Usability specialists 
Copy editors Time: days Editors Printers Time: NO CHANGE Tie: hours to days SIGDOC 92 audience at the 
same level as the developer, and very hard for writers to change accurately if they aren t engineers 
thanselves. If the developers can take on this part of the documentation load why shouldn t they take 
all of it? The reduced interval is also forcing developers into a writing role. Even with the shortened 
production cycles we have achievecL it isn t fast enough in some cases. Why involve a writer in a simple 
documentation fix on a weekend? Why involve a writer at all? The opposite face to this problem is that 
writers are getting involved in the sofmvare development process at a very early stage in order to meet 
deadlines. In some cases, writer involvement begins at the software planning stage. Overall this is a 
positive trend but it tends to merge the writing process into the software development process. The full 
implications of the merger are not clesr, but we do know that unless the writer is encouraged and trained 
to assume the role of the user representative and communication expert in the development group, he or 
she becomes driven by development group requirements rather than user and writing requirements. Quality 
Although increased frequency of publishing allows more opportunity for improving documentation it also 
tends to encourage the assumption that an improvement can be delayed because it will be caught on the 
next turn. This problem isn t unique tn orditte publishing but it seems to be a bigger temptation than 
it is with paper documents. Planning and execution of plans Online, iterative, documentation is less 
predictable than paper docurnentatiom Increased iteration gives everyone involved in the documentation 
process more opportunities to change their minds. Deviationa hm a documentation plan are therefore to 
be expected in an online environment. These deviations should be encouraged if they can focused on improving 
the end prcduct through a series of small, practical, changes consistent with the rest of the otime documentation 
suite. However the lack of predictability requires more planning effort early in the process because 
rapid change must have a fii context in which to operate. The planning process also needs to address 
new issues unique to online information. It should includq as a minimum, some assurance that users will 
~md the online documentation easy to use and a firm definition of the online environment and distribution 
process. Issues such as layering and navigation of information online must be also solved early on because 
rapid changes at the detail level must be consistent with the rest of the online information suite. 
Future opportunities The deliberate exploitation of iteration in the document development and maintenance 
process is the direct result of trends in the software development process we support. The software developers 
in CAD/CAM have been moving steadily towards a participatory model of software development supported 
by rapid prototyping. Participatory software development involves end users in the initial design and 
development phases of the software development process. End users me seen as patlners in development 
rather than as clients. Online documentation is ideally suited to support this type of software development. 
The shon turnaround time in publication allows end-user documentation to react quickly to changes in 
software design. Because online documentation process allows &#38;velopmen~ productio~ and distribution 
of documentation in parallel with the software it supports, it has a significant advantage in software 
development projects as compared to paper documentation. The role defhition problems encountered in the 
transition to online systems are I believe, temporary. Some technical writing work will be moved out 
of the domain of technical writers snd given to developers wherever the cost-benefit makes such a move 
&#38;sirable. However, in an increasingly iterative environment it will be found that the role of the 
technical w-her is essential. The ability to make thousands of changes to a documentation suite will 
accelerate the shift of technical writers away from detailed technical documentation towards information 
management, quality control, and process documentation. These functions become more critical as information 
becomes more volatile and control of the information is more widely distributed. 
			