
 The Top 10 Reasons Why Object-Oriented Can t Be Taught in CS 1 Programming Rick Decker and Stuart Hi.rshfield 
Department of Mathematics and Computer Hamilton College Clinton, NY 13323 Science Abstract. Over thepost 
year we have changed our CS 1 coursefrom a standard PascaLbased, procedural prograrnnu ng course into 
one that emphasizes C++ and object-oriented programming [OOP). While our experience to&#38;e indicates 
that this was a good deciswn for both our students and our department, the decision did not come easy. 
We struggled long and hard with many, if not most, of the questions and Lrsues that have come to be associated 
with teaching 00P to undergraduates. This paper recounts our struggles, and presents our responses to 
the more serwu of the pedagogical questwns that we considi?red. In hindsight, many of the reasons we 
came up with for not using 00P in CS 1 are seen to rejlect our lack of urrderstaruiing of the paradigm, 
our fear of the kmguage, and our part ~erience teaching Pascal and the procedural paradigm. Furthermore, 
we believe that our reservatwns (which appear to be quite common) stemrnedfiom a grrnving body of rru 
sleading 00P folklore that k contrary to our experience and that thti paper attempts to dispel. Introduction 
We had ttsed Pascal and the procedural paradigm as our amrning tools in CS 1 for marry years. Ind@ together 
they constituted the linguistic and problem solving eomerstoncs of our curriculum. The introductory sequence 
was intertd~ in pm to present and develop Pa our students skills with thetm and our middle-and ttpperÂ­ 
level courses presumed that students ecmld use them to model, analyze, and solve problems on their own. 
Despite out best efforts (teaching modem, highly interactive and integrated implementations of Pascal, 
incorporating extensive hands-on laboratory ex~ences, providing students with interesting and complete 
sample programs to read, analyze, Permission to copy without fse ell or part of thie meteriel ie granted 
provided that tha copies ara not mada or distributed for direct commercial advantage, the ACM copyright 
notice and the titte of the publication and its date appear. and notice 19 given that copying is by permission 
of the Association for Computing Machinery. To copy otherwise, or to republieh, requires a fea and/or 
specific permission. SIGSCE 94-W, Phoenix ArfzonaJJSA @ 1994 ACM 6-89791 ~..$3.= and experiment wi~ and 
so on), our experien~ in recent years had indicated otherwise. That is to say, alt but our very best 
students _ to us to lack what are currently regarded as basic software engineering skills. Of those students 
who produce working ptugrsms, relatively few wrote programs that could be described as modular, readabh> 
traceable, testabl% or maintainable. Still fewer were capable-even after our Cs 1 course-of analyzing, 
specifying, &#38;signing, and managing even modest-sized programs of their own. Rhetoric and ettrrent 
progr amtnittg texts notwithstanding, our students were not bektg trained as problem solvers, and were 
not &#38;velopirtg skills that we regarded as essential to bo{h their subsequent emuse work and to their 
careers. Our frustration with this situation led us to question not only how we had been teaching our 
majom, but also what we had been teaching them. If what we had been rcadmg and hearing was accurate (and 
it was consistent with our experience teaching HypetCard/HypetTalk in our CS O course), objcct- Onettted 
progr arrtming was the answer. In principle, 00P appeared to extend the familiar procedural paradigm 
to effectively address all of our problems, 00P was &#38;scribed as emphasizing a strategic, problem-solving 
approach to progr amming. Such art approach, in which design decisions are not ordy psrsmotm~ but are 
alscI clearly reflected in the resulting co&#38;, brings us a stqp closer to the idealized program development 
life cycle that most of us have been advoeatirtg for some years now. 00P was said to support directly 
many of the software engineering concepts that are among the most dil%cult to convey in procedural terms: 
code reuse, encapsulation incremented development and testing,, sn~ of emu-se, program design. Most importantly, 
teaching and designing an undergraduate curriculum around 00P appeared to be justified by our feeling 
that the real value of the paradigm-and its significance to computer science education-is that it effectively 
raises the level of abstraction for all programmers, novices included. Who, after all, stands to benefit 
more from a higher-level progr arnming interface than do novices. In practice, as is often the case, 
the decision to resmtcture our ctmicuhun was much more intimidating. L&#38;e the many educators who had 
considered this question before and sin% we were confronted with a long list of reasons (some real and 
some, as it turns OUL imagined) for not changing over to 00P. The fact is, we did it and we re glad. 
At the end of this paper, we will describe the benefits we and our students have derived from the decision. 
The bulk of this paper, though is devoted to presenting and responding to (in the classic Turing-Letterman 
tradition) some of the more compelling arguments for not adopting 00P 55 the paradigm of choice for CS 
1. To be sure, we struggled long and hard with eaeh of these, but have since come to recognize them all 
to reflect one or more of the following: (1) our lack of understanding of the psradi~ (2) our fear of 
the commonly-used 00P languages (most notably C++), (3) our procedural biases derived horn years of teaching 
Pssc~ or (4) what we now see as a growing body of 00P folklore that refleets a number of myths about 
00P. In what follows, them we attempt at once to articulate our responses to ten of the most commonly 
cited objections to using 00P in CS 1, and to dispel some of these myths. For each of the top ten objections, 
we describe briefly our original rationale for considering it as a legitimate detetrent to using 00P, 
end then present our eventual response as it has evolved from our teaching experience. Reason #10: OOP 
is just a fad! This objection can be restated as: Why invest my time and energy revising CS 1 to fit 
a paradigm that will be outdated andfor obsolete next year? After initially being somewhat put off by 
all of the hoopla surrounding 00P, we don t see it that way any more for a number of reasons. First off, 
00P is not new. Neither is the idea of using 00P to teach novice. programmers (why do you think they 
call it Smalltrdk?). 00P has survived as long ss it has, despite not being widely supported by either 
industry or academi~ because it is a powerful means for modelling real word applications, particularly 
those with sophisticated user interfaces. Also, it can be seen as the coming together of a number of 
seemingly dkparate concepts (for example, the software engineering principles of code reuse, data-oriented 
analysis and desig~ and modularity, and the ArtMcial Intelligence notions of declarative knowledge representatio~ 
frames, end scripts), all applied to the task of programming. Most convincing to us, thoug~ is the response 
(and this is particularly true when thinking in terms of C++) that 00P is a natural step in the evolution 
of higher-Order pogramminJndeecL we see OOP 55 g languages. extending the procedural paradigm to not 
ordy allow for new data-oriented forms of abstraction but also to provide a context within which functional 
decomposition and algorithm development can effectively take place (more on this in our discussion of 
Reason #7, below). Reason #9: 00P is too hard for my CS 1 students! While many instructors are willing 
to acknowledge the potential value of the paradigm, most still regard it as an advanced topic suitable 
only for upper-level majors. We thought this way, too. In fac~ it was our experience in teaching an upper-level 
elective in 00P and C++ that finally convinced us to take the CS 1 plunge. We had for many years been 
teaching HyperCard and HypetTalk as part of our introductory, survey course (CS O). Each semester we 
were repeatedly amazed at the sophistication of the progr amming projects turned in by these students, 
most of whom had no previous programming experience, and no intention of sampling our CS curriculum any 
further. To be sure, much of the pizzazz of these programs was attributable to the graphic nature of 
HyperCarc$ but still we were impressed by the fact that many of these CS O projects were far better designed 
and organized than were the Pascal programs our CS 1 students were producing in CS 1. The 00P/C++ course 
was populated with students who had been through OUT introductory programming sequence. Their collective 
response to the cottme expressed two basic themes. FirsL they wished they had gone right from HyperCsrd/HyperTsllt 
to 00P/C++, because of the more obvious parallels between these programming worlds. Many felt let down 
going from CS O to a Pescrd course because they were suddenly forca to deal with what they regarded as 
a great deal of progr smrning minutiae. In sho~ the programs they could write in CS 1 were nowhere near 
as interesting as those they could write in CS O. Even more telling was their (rind our) recognition 
that many of the software engineering concepts that we had harped on in the Pascal course had at long 
last become tangible and had (somewhat belatedly) taken on meaning in the context of 00P/C++. The students 
suddenly saw virtue in distinguishing sn interface from an implementation, in developing reuseable code, 
and in paying careful attention to how their programs were designed. Furthermore, many students said 
that they felt far more comfortable attacking a complex problem from scratch with 00P/Ctt than they did 
with Pascal. We maybe slow, but it eventually occurred to us that OOP fit much more closely with the 
goals of OUT introductmy sequence than it did with those of any of our upper-level electives. In= these 
were the kinds of skills that we wanted to instill in our majors horn the beginning of their programming 
careers. The trick for use, as we ll describe later, was to introduce 00P by playing to the paradigm 
s strengths-that is, by letting students focus from the start of CS 1 on declaring, deiiming, and using 
classes. Reason #8: The dreaded paradigm shift! This objection appears to be a textbook example of what 
psychologists call projection and we fell prey to it, When we fiit begart to give serious wnsideration 
to using 00P in CS 1, we looked through a few 00P texts, found it tough going, and assumed that our students 
would be likewise confused. The fault in our argument lay in the presumption that our students would 
confront the same paradigm shif~ from procedural languages to 00P ones, that had confronted us. The reality 
of our situation is that we have for many years devoted a good deal of energy to nun-teaching those of 
our students who come to college with programming g experience. By and large, we want such students to 
unlearn their bad progr amrning habits and to pickup new, more principled ones. In fac~ this was one 
of our reasons for developing our CS O course-it forced incoming students to cool their programming heels 
for a semester, and to solve problems using a paradigm that wss new to most of them. Herein lies a stunning 
virtue of using 00P in CS l it renders the notion of a paradigm shift moot. There simple isn t one for 
most students, and for those with more extensive Pascal experience, it is most often a positive change. 
That is, these students can exploit their procedural programming g expertise (agb particularly in C++), 
and extend it to address the aforementioned software engineering concepts. It also avoids having to shift 
gears when introducing it later, say in CS 2. Many who have made the leap, including us, now see that 
the paradigm shift is tough only in one direction-from procedural to 00P. Using 00P as a means for developing 
procedural progr Smming skills is much easier, in p@ becaose it reflects how the paradigms are meant 
to fit together-lasses providing a context for functions. Reason #7: You still need algorithms! This 
objection cart be restated in a number of forms, most of which translate into but how can you ignore 
 loops, or selection statements, or stepwise refiiemen~ and the like? We were particularly naive in this 
regard. As 00P noviax we couldn t see how all of these traditional CS 1 topics could fit with the the 
00P paradigm, and couldn t imagine how smdettts could write interesting programs without using them. 
We said in our previous response that classes provide a context for functions, but tha~ we now realize, 
is only part of the story. More generally, 00P provides a framework within which conventional tdgorithm 
development (including functional decomposition, stepwise retlmemert~ and algorithm control structures) 
not only c-but must still oaur. One of the beauties (to us) of the 00P paradigm is that by merely describing 
classes one imposes an organization on a problem that not only clearly reflects those aspects of the 
real world being modelle4 but also serves as a fiist crack at an algoritilc description of those same 
aspects. By associating functions (in C+-+) with classes, you have already taken a giant step, and for 
many students this is the toughest step by far, toward breaking a problem down into more manageable subproblems. 
At that point, much of what we have always taught our students about algorithm development comes into 
play and it works! Reason #6: The OOP-lsh overhead! We considered this a serious objection to usrng 00P 
anywhere in the curricuhun, much less in CS 1, until we had developed as better appreciation of the paradigm, 
along with a bit of historicrd perspective. Inded one of the more intimidating and least appealing aspects 
of 00P to us was the seemingly inordinate amount of formalism associated with the paradigm. Every text 
that we picked up seemed to describe its own cumbersome notation and pseudo-language for describing clsses 
and their interrelationships, some devoting many chapters to defiig and using the formalism. If mastering 
such a formalism were a prerequiahe to 00P, we feared that our CS 1 students might never get to write 
a program. History and our brief experience teaching 00P has convinced us that such is not the case. 
Those of us old enough to remember (and we certainly qualify) the early days of the structured programming 
movemen~ which in turn led to the development of Pascal, recall the fiirst texts that used that phrase 
in their titles. They, too, devoted chapters to graphically illustrating, via structure charts, IPO diagrams, 
and the like, the salient features of the paradigm. These formalisms helped to express, perhaps more 
directly than a program cm how the paradigm work~ what it was capable of representing, and how to exploit 
it as a programmer. Flowcharts served a similar purpose for the FORTRAN generation. The fact remains 
that as we all become more familiar with a particular paradigm, we have less need for the associated 
formalism-either when we use the paradigm ourself, or when we try to teach it to others. After gaining 
experience with a paradigm we get good at recognizing its important features as they manifest themselves 
in programs. From our perspective, it doesn t take much experience with 00P to be able to identify its 
virtues directly in a progr~ particularly when the program is written in C++. Distinguishing header files 
(declarations) from implementation files (definitions) and from program files (a main function that uses 
the declarations and definitions to solve a problem), has some nice side benefits. In effec~ the language 
itself serves as a perfectly adequate formalism. FirsL it describes a problem by revealing successive 
levels of detail. Secon~ it provides a readable notation for each level of &#38;tail. Finally, it engenders 
a poweriid problem-solving methodology with minimal notational overhead. Reason #5: 00P languages are 
ugly! speaking of pro *g l~suagess why WO~d snYone who has resisted teaching C to novice programmers 
for 15 years now want to teach those same students a better C ! Truth be told we were petrifkd of C++. 
We felt thaL pressure from industry and our stttdenta notwitbstandittg, most of the reasons we had for 
adopting Pascal (over C) as the language for teaching CS 1 some years ago still held. As soon as we began 
to apply the language to a vmiety of sample programs it became clear to us that C++ succeeds in overcmning 
most of what we regarded as the awkwardnesses of C (by, for example, providing reference parameters, 
and loo setting its dependence on the preprocessor). The ugliiess that remains pertains almost entirely 
to the detailed description of algorithms, and cart be minimized by sticking fast to and concentrating 
on the 00P paradigm. In shofi we regard C-I-+ as much more than a better C. Based upon its strengths 
as a design too~ and its support of the entire software engineering life cycle, and its hybrid nature 
(which allows our, and some of our students , experience with algorithms and top-down design to come 
more directly irtto play than it might had we chosen a pure 00P language), we consider it as a better 
Pascal, and thus as a solid choice for teaching CS 1. Reason #4: There s already too much materiai in 
CS 1! We should preface our response to this objectiou which is a particularly timely one given the move 
toward breadth-fiist introductory courses, with a reminder about our CS O course. Since our CS O course 
is a fuUÂ­ blown survey of computer science, and is required of ail majors no matter how much programming 
experience they enter wi* we are free m our version of CS 1 to concentrate otu as most of us have for 
years, problem solving and prOgr amtning. So, in one sense, we didn t have to worry about using 00P in 
CS 1 while sise trying to incorporate a variety of other non-prograttutimg computer science topics. Still, 
even just considering programming, most standard CS 1 syllabi are extremely tight. How, we though~ could 
we ever expect to cover 00P and all of the traditional programming topics in a single-semester course? 
The fact is we can t-and it doesn t matter. The trick here for us was to recognize that our goals for 
the introductory programming sequence were more irnpo~t thsn our gO&#38; for CS 1. That is, we wanted 
students to leave the introductory sequence with a certain set of problem solving and progr atmning skills. 
The order in which they acquired those skills was unimportant so long as they had them all before proceeding 
to the upper level of the curriculum. As we said befor% using 00P doesn t mean that one ignores algorithm 
development. It simply means that algoritbnts come in the context of-and after one has a developed proficiency 
for-data description. Thus, by inverting the traditional CS 1 and CS 2 ordering of topics, which clearly 
reflects the procedural emphasis on algorithms, one can easily accomplish the goals for a conventional 
introductory sequence. One fiial note-replacing one paradigm with another in CS 1 doesn t add anything 
to a syllabus. Most Pascal-based texts spend at least one chapter on what is essentially an introduction 
to procedural progr amming, and many talk additionally about problem solving techniques as they relate 
to the paradigm. Replacing these portions of a course with comparable coverage of 00P represents an even 
exchange in tcnns of amount of material. Reason #3: It screws up the rest of our curriculum! We were 
led to believe (we aren t sure by whom or by what) that adopting 00P as the programming paradigm for 
CS 1 would cause grievous harm to our entire curriculum. In hindsigh~ what we might have suspected was 
that using 00P in CS 1 would cause a restructuring of our introductory programming sequence (which, in 
our case, is only two courses that cover problem solving, Programming, and data structures)-attd it did. 
Once, thougk one is willing to be flexible in terms of the order in which topics are presented witbin 
the introductory sequence (whatever your introductory progr amming sequence entails), the remainder of 
the curriculum remains intact. The only substantive change is that middle-and upper-level courses can 
no longer be built around Pascal. If C++ (or Small~ for that matter) works as well in academia as it 
is alleged to work in industry, it should be even better-suited to the upperÂ­ level offerings, particularly 
those that involve lergeÂ­scale programs, than was Pascal. Reaaon #2: It fits perfectly with CS 2 and 
data structures! It is tough to argue with this objection. 00P does fit perfectly with material that 
has traditionally been covered in CS 2 and in data structures courses. For this reason many teachers 
choose to defer presentation of 00P to these later courses. We thought about i~ too, but didn t for two 
resaorta that have already been brought up in previous responses. First if the real virtue of 00P as 
a paradigm is that it raises the level of abstraction available to all programmers for solving problem-and 
we believe that it does and is-then why &#38;ny this tool to precisely those students who stand to benefit 
the most from it. Introducing the paradigm after the fiist course simply does not play to its strengths. 
%cort~ and equally importartq the kind of problem solving and software engineering skills that 00P mpports 
most directly me those that we want our students to adopt when they write their fiit programs. We couldn 
t see ourselves teaching them procedural progr amtning as art operative problem solving paradigm and 
then asking them to make the aforementioned paradigm shift in their second programming course. Reason 
#1: It s too hard for us! This objection is ranked #1 for two reasons. FirsL it is brutally honest. No 
matter what we decided to do in terms of incorporating 00P into our curriculum, it was going to take 
a great &#38;al of effort. If we did so in a way that impacted more than one course, it would take even 
more effort. FirsL we would have to learn the material ourselves, and become comfortable enough with 
it to teach it. We would have to choose a programming language, and then fm~ secure, and learn a particular 
implementation of it. An&#38; what about a text? Ugh . . . Second, it is the one objection that we have 
no good response for, especially after having made the change to 00P. Doing so certainly entailed much 
more work than it would have been to teach Pascal again, Fortunately for us, and thanks in large part 
to the support and enthusiasm of our students, we feel it was well worth the effort. The advantages of 
this approach to teaching novices are both numerous and tangible. FirsL introducing the object-oriented 
paradigm from the beginning allows us to exploit it as a design medium. Second doing so puts the procedural 
paradigm (alcng with the i&#38;as of top-down design and stepwise refinement) into a meaningful and useful 
problcmÂ­solvittg context. fltir~ it eliminates (at lesa~ for the student! ) the dreaded paradigm shift 
from procedural programtnin g to object-oriented programtnin g. Finally, and most importantly, it helps 
students to develop their problem solving skills in conjunction with their programming ones. References 
[1] Decker, R. and Hirshfleltl S. The Analytical EnÂ­~ Introduction to Commter Science Using H VDerim, 
Wadsworth Publishing, Inc., San Francisco, 1989. [2] Decker, R. and Hirshfield, S. Pascal s Triangle: 
.. ~eadiniz. Wntum and Reasortim Abo Ut Pro erarr@, Wadsworth Publishing, Inc., San Francisco, 1991. 
[3] Decker, R. and Hirshlield, S. The Obiect Concq~ Introduction to ComD uter Prom ammirw using c ++, 
Pws Publishing, Inc., Bostom 1994. [4] Mazaitis, D. The Object-Oriented Paradigm in {the Undergraduate 
Curriculum A Survey of Implementations and Issues, SIGCSE, Vol. 25 No. 3, pp. 58-64, 1993. [5] Temte, 
M. Let s Begin Introducing the Object-Oriented Paradigm SIGCSE, Vol. 23 No. 1, pp. 73-78, 1991.
			