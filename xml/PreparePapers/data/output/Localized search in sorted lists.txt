
 STOC(Eilwaukee 1981),62-69 Localized Search in Sorted Lists # S. Rao Kosaraju Department of Electrical 
Engineering The Johns Hopkins University Baltimore, Maryland 21218 Abstract It is well known that every 
one of the set operations insert, delete and member can be performed in O(log n) steps, where n is the 
number of elements currently in the set. Here we implement these operations and a move operation for 
a sorted list with f fingers (points of reference) established on the list. It is shown that these operations 
can be per- formed in O(log d) steps, where d is the distance between the corresponding finger and the 
key involved. I. Introduction Many implementations exist for per- forming the dictionary operations, 
insert, delete and member, on a set of numbers [i]. Any one of the many data structures like (2,3) trees, 
AVL trees, and weight- balanced trees realizes a worst-case speed of O(log n) steps for every one of 
the above operations. Here we consider the following operations on a sorted list of n keys with f fingers 
(points of reference) established on the list: #Supported by NSF under grant MCS-79-05163 Permission 
to copy without fee all or part of this material is granted provided that the copies are not made or 
distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. &#38;#169;1981 
ACM 0-89791-041-9 /80/0500/0062 $00.75 i) Insert a new key, 2) Delete a key, 3) Test whether a given 
key is a member, and 4) Move a specified finger to a specified key. In every case let the distance 
from the finger (nearest finger in 1-3) to the key involved be d . Here we prove that every one of the 
above 4 operations can be (individually) performed in O(log d) steps. References [2,3,6] address the 
same problem. Brown &#38; Tarjan [2] explored the application of level-linked (2,3) trees. They showed 
that this data structure per- forms well when the inserts and deletes are not intermixed. However, the 
worst case for inserts and deletes is 8(log n), where n is the size of the list. The main advantage of 
their implementation is the simplicity of the data structure. Guibas et al [3] essentially makes use 
of m (~ , m)-trees (minimum value of m= 24) with some other pointers to facilitate linking nodes at 
a level. Their basic strategy is not to allow "too many occur- rences" of m/3-nodes (nodes with m/3 sons) 
or m-nodes on the path from any finger (leaf) to the root. This translates into 2 reasonably complex 
regularity conditions. (Without these regularity conditions, in- sertions and deletions can result in 
the rearrangement along the complete path from a leaf to the root -resulting in ~(log n) steps.) They 
showed that every one of insert, delete and member operations can be handled in O(log d) steps. However 
moving a finger can require ~(log n) steps, due to the fact that the regularity conditions must be 
established for the complete path from the new leaf to the root. Mehlhorn's approach [6] is a com- 
 bination of the above two approaches, and still cannot realize the worst case speed of O(log d) Here 
we give an O(log d) implementation by following an entirely new technique. We first illustrate our basic 
procedure for a simplified problem. We skip the details of implementation so that we can emphasize the 
salient features. II. Generalized Priority Queue Given a sorted list of n keys, we want to perform 
every one of insert, delete and member operations in O(log d) steps, where d is the distance of the key 
in- volved from the left end (smallest element). That is, we assume that there is only one finger, 
and that it points to the left end. Ideally we would like to organize the n keys as shown in Figure 
i, where every T. is a (2,3)-tree of height i . An example organization for the list con- taining 1,2,...,10 
is given in Figure 2. T1 ~ght i Figure 1 Ideal Organization  Picture 2 An example organization It is 
trivially seen that any member operation requires O(log d) steps. How-  ever insert and delete operations 
pose problems. For example, if the insertion of an element into T. results in increas- 1  ing its height 
by i, then the new sequence of heights is 1,2,3,..., i-l,i+l,i+l,i+2, .... To bring it back into the 
ideal sequence 1,2,3,...,i-i,i,i+i,i+2,..., we could split up the first tree of height i+l into 2 height 
i trees (by deleting its root). Then we can merge the second height i tree with the height i+l tree, 
which could result in a tree of height i+2 It is easily seen that the sequence of splits and merges might 
propagate to the right end, resulting in ~(log n) , rather than O(log d) , steps. To get around this 
problem, we provide some flexibility in the height distribution. The basic structure of our realiza- 
tion is also as shown in Figure i, where every T. is a (2,3)-tree, and let its height be h. Also let 
 l n(h)=number of distinct T's of height h l = {ilhi=h} , h N(h)= [ n(i) , and i=l h =max h s.t. 
n(h) ~ 0 . m We dynamically maintain the following con- ditions (A) The h.'s are monotonically nondecreas- 
 1 ing, (B) n(h) < 3 , for every h <h , -- --m (C) n(h)+n(h+l)+n(h+2)> 0 , for every h<h-2 , and 
 (D) h_< N h) _< , for every h_< h m  Let us denote (A), (B) and (C) as the monotonicity, m__ultiplicity, 
and gap proper- ties, respectively. Note that the multi- plicity property insures that no height occurs 
more than 3 times, and the gap prop- erty insures that three consecutive heights cannot be missing. The 
inequality h < N(h) is the L-requirement ('L' for low) and the inequality N(h) ~ I~I is the H-requirement. 
Any sequence of trees (or heights) satisfying (A)-(C) is a s~m~valid sequence. If a semi-valid sequence 
also satisfies (D) then it is a valid sequence. Let n(.) and N(.) be the count func- tions of the sequence. 
It is easily seen that for the above implementation, the member operation can still be performed in O(log 
d) steps. Before we address the delete and insert operations, we develop two procedures and establish 
their properties. Correct-deficienc~ procedure The input sequence of trees satis- fies the following 
conditions: (i) the sequence is semi-valid, and  (ii) a height h 0 and a constant c are specified s.t. 
  h N(h) ~ p~q for h < h 0 , and h-c N(h)~ F~~ -c for h~h 0 . This procedure transforms the input 
sequence into a sequence that is semi- valid and the new count function N' (-) satisfies the conditions 
 h N' (h) ~ ~ for h < h 0 , and h-(c-l) ~N' (h) ~ ~-(c-l) for h~h 0. Procedure Find the smallest height 
h > h 0 , say h I , s.t. n(hl-l)=0 ,n(h I) > 0 and n(h I) +n(hl+l)>l . (For h I to be h0+l , the additional 
condition n(hl-2)~l must be satisfied. Assume that n(0)=0 and n(hm+l)=l.) Then split the first tree of 
height h I as follows. Y x y root has 2 sons x y z y z root has 3 sons Claim: The new sequence of 
heights is semi-valid, and h~N' (h) < I~i z for h < h 0 , and h-(c-l) ~N' (h) ~ F~-(c-l) for h ~ h~ 
 Proof: The new sequence is clearly semi- valid. Observe that N' satisfies the H-requirementsF~ (N' (h)~ 
I~I for h < h 0 , and N' (h) ~ i~i-(c-l) for h~h 0) for all heights other than hl-i . If hl#h0+l , then 
N' (hl-l) =N(hl-l)+2 = N(hl-2)+2 <-- ~ --h~ -c+2 <- ~ ---a---~,-(c-l) hl-~ If hl=h0+l { then N' (hl-l) 
=N(h0)+2 --7--I --7--I all the H-requirements hold. It is easily seen that N' satis- fies the L-requirements 
for all heights h, h~h0-1 or h~hl-i . Let h' be the minimum height at which the L-requirement fails to 
be satisfied. Thus N(h'-l) > h'-l-(c-l) and N(h') < h'-(c-l) , which results in N(h'-l) = h'-l-(c-l) 
and n(h') =0 . If n(h'+l) =0 , then N(h'+l)= h'-l-(c-l) , which violates the input con- dition. If n(h'+l)+n(h'+2)<l 
, then N(h'+2) < h'-(c-l) , which again violates the input condition. Thus n(h')=0 , n(h'+l) > 0 and 
n(h'+l)+n(h'+2) > 1 , which violates the choice of h I . Hence such an h' cannot exist. Correct-surplus 
procedure The input sequence of trees satisfies the following conditions: (i) the sequence is semi-valid, 
and  (ii) a height h 0 and a constant c are specified such that  h~N(h) _< F~ ~ for h <h 0 , and 
h+c~N(h) ~ ~+c for h~h 0 . This procedure transforms the input sequence into another that is semi-valid 
and the new count function N' (.) satis- fies the conditions:  h~N' (h) ~ l~I for h < h 0 , and h+(c-l) 
~N' (h) ~ F~+(c-l) for h~h 0 .  Procedure Find the smallest height h~h 0 , say h I , such that n(hl-l)+n(hl-2)~4 
, n(hl)~2 and n(hl+l)<3 . (Assume that n(0)=l and n(hm+l)=0 .) Then merge the last 2 trees of height 
h I into a tree of height hl+l. Claim: The new sequence of heights is semi- valid, and satisfies the 
conditions h~N' (h) ~ ~ for h < h 0 , and h+ (c-l) ~N' (h) ~ ~+(c-l) for h~h 0 .  The proof proceeds 
along the same lines as the one for the correct-deficiency procedure, and will be included in the final 
version. Now we discuss how deletions and insertions are handled in O(d) steps, while preserving the 
validity of the sequence of trees. Deletion Operation First perform a member operation to locate the 
element to be deleted in some (2,3)-tree of height h 0 in the sequence of trees. The deletion in the 
(2,3)-tree is performed as usual [i]. If this does not decrease the height of the tree, then the deletion 
is completed. However some adjustments are needed when the height becomes h0-1 . We can assume that this 
tree, say T 1 , was the leftmost tree of height h 0 (Otherwise, very simple transformations can insure 
this property. For example, if there is another tree, T 2 , of height h 0 to the left of T 1 , then make 
T 1 the rightmost son of the root of T 2 , and make the leftmost son of T 2 a tree of height h0-1 .) 
 The net effect so far is that n(h0-1) gets incremented by 1 and n(h 0) gets decremented by 1 . The 
fol- lowing cases can result.  Case i: The new gap between h0-1 and the next higher nonzero count height 
is greater than 3. (This can happen when n(h0)=l originally and n(h0+l)=n(h0+2)=0.) Then remove the 
leftmost subtree of height h0-1 from the leftmost tree of height h0+3 and make a tree of height h 0 with 
this subtree and the rightmost tree of height h0-1 . If the height of the (h0+3) height tree does not 
decrease (to h0+2) , the procedure terminates. Otherwise, let the new h 0 be h0+3 and apply this case 
again. Note that this case cannot be applied more than h0 times in succession. The 4 worst case is realized 
when N(h0-1) = h0-1 3 ~ and (N(h0+3i+l)=N(h0+3i+2)=0 and N(h0+3i+3)=l for i=0,...,x-i , where 3 h0-1 
+x ~ h 0 + 3x (L-requirement)). 2 When case 1 cannot be applied anymore, let the count functions be 
n' (.) and N' (.) . Case 2: N' (h0-1) ~3 or (N' (h0-1)=2 and N' (h0-2) > 0) . Then make a tree of 
height h 0 with the 2 rightmost trees of height h0-1 . The net effect on the original count func- 
tion is that n(h0-1) gets decremented by 1. Now call correct-deficiency pro- cedure for the height 
h0-1 and constant c=l . Case 3: (N' (h0-1)=2 and N' (h0-2)=0) or N' (h0-1)=l . In this case no correction 
is needed. Verify that all the L- and H-requirements hold. The complete delete operation requires O(h0) 
steps, where the deleted element occurs in a tree of height h 0 in the sequence of trees. Insertion 
Operation As in the case of the delete opera- tion, a member operation locates the ele- ment to be 
inserted in some (2,3)-tree of height h 0 in the sequence of trees. The insertion in the (2,3)-tree 
is performed  in the standard way [i]. If this does not result in increasing the height of the tree, 
 then the insertion is complete. Otherwise. split the resulting tree of height h0+l into 2 trees, each 
of height h 0 . This  has the net effect of incrementing n(h 0) by 1. Now the following cases can arise. 
 Case i: n' (h0)=4 and n(h0+l) > 0 . Then merge the rightmost tree of height h 0 with the leftmost tree 
of height h0+l . If the resulting tree is of height h0+l , then terminate the prooedure. Other- wise, 
split the resulting tree of height h0+2 ihto 2 trees, each of height h0+l . Let the new h 0 be h0+l 
, and then apply this case again. This case cannot be repeated more than __h0 times (when N(h0-1)=h0-1 
, n(h0)= 3 n (h0+l) =n (h0+x-l) =3 where h0-1+3x 3(ho-l+x) 2 )  Case 2: N' (h0)=4 and n~h0+l)=0. Then 
merge the rightmost 2 trees of height h 0 into a tree of height h0+l . This fixes all the requirements. 
 Case 3: n' (h 0) ~3 . In this case call the correct- surplus procedure with height as h 0 and constant 
c=l . Implementation  So far we have not discussed the im- plementation of a valid sequence of trees. 
The individual (2,3)-trees are implemented as usual. Every node in the sequence stores a key, a path 
difference and 5 pointers. The path difference stores the difference in the heights of its (2,3)-tree 
and the (2,3)-tree to its right. Note that this can take values from {0,1,2,3} . The 5 pointers are assigned 
as follows: Pl points to the father in the sequence, P2 points to the son in the sequence, P3 points 
to the root of the (2,3)-tree it supports, and P4 and P5 function as L-pointer and R-pointer, respectively 
(described below).  The application of Pl 'P2 and P3 is illustrated below. -->  The L-and R-pointers 
facilitate the implementation of correct-deficiency and correct-surplus procedures, respectively. Recall 
that the correct-deficiency proce- dure assumes that from any height h 0 in the sequence we can find 
the smallest height h > h 0 , say h I , such that n(hl-l)=0, n(h I) > 0 and n(h I) +n(hl+l) > 1 . Denote 
any height h with n(h-l)=0 , n(h) > 0 and n(h)+n(h+l) > 1 as an L-heiqht. For any L-height h , the L-pointer 
of the first tree of height h points to the first tree of the next higher L-height. The L-pointer fields 
of all other trees are filled with a special terminator. Note that during a member op- eration, the 
last non-terminator L-pointer encountered in the sequence before entering a (2,3)-tree of height h 0 
points to the leftmost tree of the smallest height h>h 0 , say h I , such that n(hl-l)=0 , n(h I) > 
0 and n(h I) + n(hl+l) > 1 . The H-pointer is defined in an ana- logous fashion based on the inequalities 
n(hl-l)+n(hl-2) ~4 , n(hl)~2 and n(hl+l)<3 of the correct-surplus procedure. Since no height can be 
both an L-height and an H- height, no node can have both the L- and the H-pointers as non-terminators. 
Consequent- ly, if we so desire, we can have a single pointer field for both these pointers. II!. A 
general one finger problem Now we treat the general one finger problem, in which the finger can be moved. 
In this case, at any instant, the lists to the left and the right of the finger are organized, independently, 
as valid sequen-B ces of trees. A typical organization is shown schematically in Figure 3. A A B 
Figure 3 Consider the case in which the move operation results in repositioning the finger in between 
T m and Tm+ 1 (at B). (If the new position is inside a tree, a divide [i] followed by a few other simple 
operations are needed.) In all but the most trivial cases, the sequence of trees to the right of B will 
not satisfy the L-requirement, and the sequence to the left of B will not even satisfy the monotonicity 
property. The deficiency on the right side is corrected by decompos- ing Tm+ 1 into a valid sequence 
of length approximately m+l , making use of Lemma I, and then eliminating the approximation by calling 
correct-deficiency or correct- surplus a constant number of times. The transformation of the right side 
is a little more complex. First merge TI,T2, ...,T m , into a single (2,3)-tree, say ~ , and then merge 
a sufficient number of T'S , say TI,...,Tm,, SO that this (2,3)-tree has approximately the same height 
as ~ . Finally merge the two resulting trees into a single (2,3)-tree, say T. Then decom- pose T into 
a valid sequence of length approximately m'+l , and finally correct the approximation. The basic steps 
are shown schematically in Figure 4. Figure 4 In the following, we give more details of the transformation 
on the right side. The left side transformation can be similarly justified. First we develop the decomposition 
result. Lemma i: For any h > 2 and m , h < m < ~3~ , any given (2,3)-tree of height h can be replaced 
by a valid sequence of trees of length m and of maximum height in {h,h-l,h-2} In addition, the trans- 
formation can be performed in O(h) steps. Proof: The proof is by induction on h . Let the transformation 
be denoted as f . Basis: If h=2 , then m=2 . In this case apply one of the following transforma~ons. 
 x ~ y z V J z Inductive step For any general h > 2 and m , r- h<m< I 3 ~I , apply one of the following 
 i $ transformations. Case l: If m=h , then y f (x, m-i )/~ x v I y z Case 2: If m>h , then the transformation 
can be concisely represented as follows.  ~y,z  XlX2YI~Z 2 XlX2X3YlY 2 ~ ~X2X3YlY2Y 3 ~ ,, %x2YlY2Y3 
&#38; f (x,m-2)~ U . ^ ^  f (xl,m-3 k x/~ Yl 2 ~  " k x3 2 /X x3 y/ q I yf \ y y Y2 1 Y2 2 3  Note 
that x,y,z are the sons of the root and Xl,X2,X 3 and yl,Y2,y 3 are the sons of x and y , respectively. 
It is easily seen that the transfor- mation can be performed in O(h) steps. Let the first tree, Tm+ I, 
to the right oft ~ -IB is of height h 0 . Note that h0<m< 13'~_~0 I By the above lemma, we can replace 
Tm+ 1 byFa valid~_1 sequence of length m 0 , h 0 < m 0 < 13 h0-~_l. --~--~ Thus there -  can be a difference 
of at most 3 from the needed m+l . In addition, since Tm+ 1 gets removed, the gap property might be disturbed. 
These two problems can be fixed as in the earlier deletion opera- tion. IV. Multiple finger problem 
 Finally we discuss the general prob- lem with f fingers. Figure 5 shows a typical case for f=3 . The 
implementation maintains the following conditions dynamically. Every one of the sequences A 1 to C , 
A 1 to BI, A 2 to BI, A 2 to B2, A 3 to B2, and A 3 to D is a valid sequence. When f is fixed, the member 
operation can be per- formed in O(log d) steps. When f is also a parameter, by having an auxiliary (2,3)-tree 
of the f keys pointed to by the f fingers, the member operation can be performed in O(log f + log d) 
steps. Insertions and deletions can be per- formed essentially as in the one finger case. In the final 
version, we will show how moving a finger a distance of d can be performed in O(log d) steps. Even though 
the move operation involves consid- eration of many cases, the basic principle is similar to the one 
used for the move in the one finger case. V. Conclusions In this paper we established that every one 
of the member, insert, delete, and move can be performed in O(log d) steps, where d is the distance between 
the corresponding finger and the key. A more important contribution is the demon- stration that the powerful 
technique developed in [4,5] can be applied to this problem. This technique is essentially captured in 
the L- and the H-requirements, which form the backbone of this paper. In addition, the technique provides 
a great deal of flexibility. For example, a valid sequence can be defined as a sequence with the monotonicity 
property, and which sat- isfies h < N(h) < 2h for 1 < h < h The ---- m  constructions become significantly 
simpler with this definition, even though we believe that the multiplicity and the gap properties are 
very desirable features. Figure 5  References [i] A.V. Aho, J. E. Hopcroft, J. D. Ullman: The Design 
and Analysis of Computer Algorithms, Addison-Wesley, Reading, MA, 1974. [2] M. R. Brown, R. E. Tarjan: 
Design and Analysis of a Data Structure for Repre- senting Sorted Lists, SICOMP, 1980, 594-614. [3] 
L. J. Guibas, E. M. McCreight, M. F. Plass, J. R. Roberts: A new Represen- tation of Linear Lists, 9th 
STOC, 1977, 49-60. [4] S. R. Kosaraju: Real-time Simulation of Concatenable Double-ended Queues by Double-ended 
Queues, llth STOC, 1979, 346-351. [5] B. Leong, J. Seiferas: New Real-time Simulations of Multihead 
Tape Units, JACM, 1981, 166-180. [6] K. Mehlhorn: A New Data Structure for Representing Sorted Lists, 
Work- shop WG80 "Graph Theoretic Concepts in Computer Science" in Bad Honnef, 1980.  
			