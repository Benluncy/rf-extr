
 Experiences with The Ada Semantic Interface Specification (ASiS) Developing A Tooi With A View Steven 
J. Blake James B. Bladen TeleSoft 5959 Cornerstone Court West San Diego, CA 92121 (619) 457-2700 The 
Ada Semantic Interface Specification (ASIS) was developed by TeleSoft under contract to the STARS (Software 
Technology for Adaptable Reliable Systems) program. ASIS is an open and published callable interface 
which gives tool developers access to the Ada syntactic and semantic information contained in Ada libraries. 
For detailed information on ASIS refer to Ada Semantic Interface Specification (ASIS) , TRI-Ada 91 Conference 
Proceedings, October 1991. ASIS is intended to replace fnt generation solutions to the problem of tool 
support for the resolution of Ada semantics. Without ASIS, sophisticated Ada tools are dependent on invalidated 
syntax analyzers or tight coupling to Ada libraries. Neither approach is portable to multiple compiler 
technologies or easily maintained. ASIS allows Ada tool developers to take advantage of the latest Ada 
compilation technology without becoming dependent on a particular vendor s Ada library and its internal 
representation of data. This will be especially important during the A&#38;9X transition period as compilers 
and Ada libraries change to accommodate new Ada 9X features. Ada tools which are built on ASIS will be 
unaffected by Ada 9X changes to compilers unless the tool developer wishes to take advantage of new Ada 
9X feahms as they m added to ASIS. The experiences summarized below rmdtcd from use of the prototype 
version of TeleSoft s ASIS Toolkit which implements the spedlcation on the TeleSoft Ada compiler and 
Iibrmy. These results give early indication that the Pe-ion to copy without fee all or part of this material 
IS granted provided that the copies am not made or distributed for direct commemial advanta~, the ACM 
copyright n~ice and the title of the publication and its date appear, and notice is given that copying 
is by permission of the Assoaation for Computmg Machmq. To copy otherwise or republish, quires a fee 
and/or specific permismon. following ASIS goals are realizable -Achieve a significant increase in software 
development productivity for Ada tool developers -Increase portability of tightly integrated Ada tools 
between platforms and Ada compilers -Realize Ada semantically dependent functionality not possible with 
conventional syntax analyzers -Build on and reuse existing A&#38; compilation technology as the foun&#38;tion 
for next generation Ada tools and environments TeleSoft s ASIS Toolkit has since been fully implemented 
and a product version is currently available on a variety of platforms I Overvleyf ASIS provides a uniform, 
consistent interface to static semantic information stored in an Ada Library. For each Ada compiler vendor, 
ASIS clients are shielded from the evolving proprietary details that implement the library representations 
and internal forms. Through ASIS, clients can query the Ada Library for its compilation units and their 
attributes. Semantic relationships and dependencies between compilation units can be analyzed. Some client 
tools may only be intermted in an external or white box view of compilation units. A compilation unit 
s text fde name (if there is one), the time is was compiled, and its related supporting units, if any, 
are all examples of such external information. Other tools may want to query compilation units for the 
lexical elements that comprise them. This internal or black box view is provided by ASIS through operations 
@1992 ACM 0-89791 -529-1 /92/0011-0458 1.50 that query Ada elements such as declamations, expressions, 
and statements. Some ASIS queries break an element ,such as a package declaration, into its component 
elements, like a list of the declarative items in the package visible part. Other ASIS queries work in 
reverse, semantically resolving a name back to its declaration. ASIS promotes tool portability by providing 
a standardized open architecture. Its loosely-coupled specification provides flexibility across multiple 
vendor implementations. ASIS follows Ada LRM terminology and style to promote consistency and familiarity. 
ASIS has adopted an evolutionary approach, paving the way for future extensions to support Ada 9X. This 
paper describes experiences using ASIS to build an application tool and in applying a simple development 
mwlel used while building ASIS tools on several earlier projects. This model for building ASIS Tool Applications 
uses the following step by step approach 1. Identifying Application Tool Requirements 2. Designing an 
Application View 3. Implementing the Application View 4. Implementing the Application Main Program 
 This model is based on the key concept of an Application View which can be applied regardless of the 
application problem domain. An Application View is a constrained subset of ASIS primary operations along 
with secondary operations that specifically support the tool requirements. The view establishes an understandable 
and manageable interface that supports the functionality needed by the Application TOOL This approach 
can greatly streamline the development process while increasing portability and modifiability of the 
tool. The employment of an Application View has the pleasant si&#38; effect of providing potentially 
reusable ASIS utilities and service components for use in future tools. The remainder of this paper examines 
a problem that was solved with an ASIS Application Tool and describes how the tool was developed using 
this four step approach. Source code examples from the tool are used as illustrations. NI H.umfah of 
the Wklm One of TeleSoft s long term customers at McDonnell Douglas Corporation (MDC) notified Customer 
Support that they required additional functionality in the TeleGen2 Cross-refemur tool to list renamed 
variable objects that are set by updates that refer to the new names. On further investigation it turned 
out that the customer had spent two months developing a tool which parsed the cross-referencer s listing 
file as a means of retrieving information from the TeleGen2 Ada library. They were using this information 
to automatically generate documentation. TeleSoft added the rename set f-to the cross teferencer to 
meet the customer s near term requirement. TeleSoft also pointed out that their approach, although innovative, 
was constrained by the limited amount of Ada library information available through the cross reference 
listing. TeleSoft worked with MDC personnel to define requirements for an ASIS tool to replace the crossÂ­referencer 
in this documentation process. The ASIS tool implemented a simple cross reference utility report generator. 
It is referred to in this paper as the MDC Documentation Tool. The MDC Documentation Tool executes against 
the Ada library for the F-15 Central Computer which contains 200,000 executable Ada statements. MDC now 
intends to develop additional ASIS based tools. The solution was implemented using the four step development 
paradigm described in the Abstract above. The next sections examine each of the steps. t) 1. ldentlf~a 
Aqpllcation T@ Initially, the customer described the desired output of the tool and what it should look 
like. Their goal was direct and simply stated List the names of selected packages that have variables 
set or referenced by other units. Discussion with the customer produced the following liit of definitions 
and requirements. Peflnltlona Direct Supporter Unit A direct supporter unit is one that is mentioned 
in a with clause of another unit. Din?ct Dependent Unit A direct dependent unit is one that mentions 
a direct supporter unit in a with clause. 4.59 sourceUnk If a direct dependent unit sets a variable 
declared in a direct supporter package, then the unit is a source unit of the package. Destination Unit 
Ifa direct dependent unit references a variable declared in a direct supporter package, then the unit 
is a destination unit of the package. The following list identifies the functional requirements of the 
tool as they pertain to ASIS. User interface requirements are not presented in this paper. 1. Initialize 
ASIS and open the Ada Library. 2. Fetch a specific library unit by name from the Ada Library. 3. Fetch 
the list of compilation units in the closure of the library unit, 4. Select only those compilation units 
that are package declarations whose names end with the suffm _pim . 5. For each selected unit, determine 
all compilation units that are direct dependents of that unit. 6. For each of the direct dependent units, 
determine if the unit is a source unit or a destination unih or both 7. Write the information to the 
standard output as shown in the sample output report below. The package name is the direct supporter 
unit. The names of Direct Dependent  Units appear under the source and/or destination unit column. See 
sample output below. 8. Finalize ASIS and close the Ada Library. Once the ~uirements were identifkxl 
and agreed to, it was determhed that ASIS could meet each requiremen~ and that the design of the Application 
Tool could begin. 2. Des-an ~ View ASIS is a large interface (387 operations in 11 packages) and is designed 
to support a wide range of tool needs. Most applications focus on a set of requirements specific to the 
problem domain. This focus can be modeled nicely by defining an Application View as a layer above ASIS. 
A view can incorporate one or more packages and subprograms serving to encapsulate the operations useful 
to client tools much like an Ada package encapsulates groups of logically related entities. The view 
creates a higher level of abstraction. Clients of the view are generally smaller and simpler, making 
fewer calls to accomplish the desired results. A constrained abstract view and its client application 
is easier to understand and maintain. Views can be reusable in whole or in part, providing building block 
components for future use. The view increases the transportability of the client Application Tool by 
hiding vendor specific normalizations that can be the View Si3eclflc~ encountered through ASIS. Even 
though ASIS is vendorÂ­independen~results of some queries can be different yet Ada Specifications that 
constitute the Application View semantically equivalent, For example, a multiple object can then be created 
by mapping the requirements to ASIS declaration is equivalent to a sequence of the corresponding queries 
and secdary operations. number of single object declarations, (E.G. A, B : Integw, is equivalent to A: 
Integ@, B : Integm,). A view that deals with identifiers rather than declarations will be consistent. 
 PACKAGE NAME SOURCE UNITS DESTINATION UNITS aflim . . . . . . . . . . . OO* main aflim f_f unc . . . 
. . . . . . . . . . . . a~i.m fflroc f~roc Requirements 1 and 8 can be satisfied with a simple The view 
allows implementation of the Application Main pge of two operations that each abstnwt two primitive Program 
to proceed in parallel with implementation and functions into one subprogram. testing of the view itself. 
>ackage ASIS Library_View i.s  procedure Open_Library ( Liblst : in String ) ; -Â­-Â­-Â­-- Initialize Opens 
A library the ASIS library handle and nais open the med Liblst. maintained Ada within Library. this state 
package. -Â­-- Raises opened. Failed i.f the library could not be procedure Close_Library; --Finalize 
ASIS and close the Ada Library. --Closes the library opened by a previous call to Open_Libr~y. .Â­ --Raises 
Failed if the M.brary is already closed. md ASIS_Library_View; The Unit Declamn Vkyf The next package 
offera operations to meet requirements 2 in this view, the functions all deal with objects of the through 
5. These functions retrieve and manipulate the subtype Declaration. This simplifies the view and hidea 
compilation units that will be analyzed later. Notice that the gateway operations to convert between 
the types the ASIS abstract type Compilation_Units is not exposed Compilation_Unit and Declaration in 
the package body. with ASIS_Ada_Program; with ASIS_Elements; with ASIS Declarations; package M IS_Unit_Declaration_View 
is --RENAMED ASIS ENTITIES AND PRIMITIVES Nil_Element : ASIS_AA_Program. Element renames ASIS_Pda_Progrem. 
Nil_Element; Nil Element List : ASIS Ada Pro~ram. Element List renames ASIS_Ada_Program .Nil_Element_Li. 
st; subtype Element is ASIS_A*_Program .Element; subtype ASIS_List_Index is ASIS_Ada_Program.ASIS_List_Index; 
--A subtype of Integer. subtype Element_List is ASIS_Ada_Program.Element_List; --This list is an unconstrained 
array of elements. --The index subtype is ASIS_List_Index, Inappropriate_Program_Element : exception 
renames ASIS_A&#38;_Program .Inappropriate_Progra_Element; -------------. --------Â­--UNIT DECLARATION 
SECONDARY OPERATIONS subtype Declaration is ASIS_Ada_Program.Declaration; function Li.br~y_Uni.t_Declaration 
( Identifier : in String ) return Declaration; --Returns the Declaration for the requested Library --Compilation 
Unit.  --A Nil_Element is returned if the identified compilation --unit does not exist in the library. 
funCtiOn Unit_Declaration_Name ( Uni.t_Declaration : in Declaration ) return Strifig:  Returns the 
identifier name of the unit. Raises Inappropriate_Progran_Element if the given declaration is not a library 
level unit declaration. subtype Extended-Family_List is Element_List; function Fetch_Extended_Family 
( Main_Progran_Declaration : in Declaration ) return Extended_Family_List; Returns a list of compilation 
unit declarations that form the extended family of the given main program. Raises Inappropriate_Program_Element 
if the given declaration cannot be a main program. subtype Package_Declaration_List is Element_List; 
function Fetch_Library_Units ( Name_Tag_Suffix : in String; Unit_Declarations : in Extended_Family_List 
) return Package_Declaration_List; --Returns a list of package declarations from the unit --declarations 
list whose names end in a case insensitive match --with the name tag suffix. A neme tag suffix of * matches 
all --package declarations. --For example, given the suffix _PIM , the following package names --match: 
Package 1 PIM, ABC~im.   --A Nil_Element_List is returned if the library contains no package --declarations 
matching the suffix. subtype Package_Declaration is Declaration; subtype Direct_Dependent_List is Element_List; 
function Direct_Dependent_Units ( Supporter_Unit : in Package_Declaration; Unit_Declaratlons : in Extended_Family_List 
) return Direct_Dependent_List; --Returns a list of the unit declarations which are direct --dependents 
of the given supporter unit. --Direct dependents are units for which with clauses mentioning --the supporter 
unit apply. See LRM 10.1.1(4). --A Nil_Element_List is returned if the unit declaration list --contains 
no direct dependents of the supporter unit. md ASIS_Unit_Declaration_View; The functionality of requirement 
6 isprovided by the by the Detennke_Informstion function. l heinformation fo~otigae. ~m~~fanmuti~kptiomti 
queriesprovidevtdues tobeusedtogenerate thereport. rith ASIS_AdS_PrOgram; ]ackage ASIS_Source_Destination_View 
is type Information is private; subtype Declaration is ASIS_Ada_Program.Declaration; Inappropriate_Progrm_Element 
: exception renames ASIS_A*_Program .Inappropriate_Progrm_E kment; --INFORMATION CONSTRUCTOR function 
Determine_Information ( Direct_Supporter_Unit : Declaration; Direct_Dependent_Unit : Declaration ) return 
Information; Returns a list containing one Information value for each direct supporter package of the 
given dependent unit. --Raises Inappropriate_Program_Element if the --given declaration is not a library 
level unit declaration. 463 --INFORMATION QUERIES function Direct_Supporter_Unit ( Info : Information 
) return Declaration; --Returns the declaration of the library package that is a --direct supporter of 
the information. function Direct_Dependent_Unit ( Info : Information ) return Declaration; --Returns 
the declaration of the dependent unit of the information. function Is_Source_Unit ( Info : Information 
) return Boolean; -Â­-Â­ Returns variable True of if the the direct dependent supporter unit is a source 
unit for a unit. -- A source unit sets (updates) the value of a variable. function Is_Destination_Unit 
( Info : Information ) return Boolean; --Returns True i.f the dependent unit is a source unit for a --variable 
of the direct supporter unit. --A destination unit references (reads) the value of a variable. >rivate 
... :nd ASIS Source DeStinZildOn View; These three paekages constitute the Application View for ~ Reusable 
UtÂ­theMDCDoeumentation Tool. Implementing the opxitionsinthethree paekageswasin most cases simple and 
straightforward. However, even ~te~ 3. Implementing the AWllCatlon Vle~ within simple operations, a number 
ofeommon utility operations canbe easily identified. These utilities were Implementation of the Application 
View lead to two collectedandgroupedintopackages. Forexample,ASIS practieesthathad bothanimmediate andfutureimpaet. 
provides operations that turn aeompilation unit into a They are deelarationandbaek. Sineethiaapplicationdealswithlists 
ofcompilation units, two handy utilities take care ofthis I.IdentifyingReusable Utilities conversionoflistx 
2.IncorporatingReusable Services Eachisdiseussedin the followingsections. function ( List return To_Unit_Declaratdon_List 
: in ASIS_Ada_Program.Compilation_Unit_List ASIS_Ada_Program.Element_List; ) -Â­-Â­-- Returns a list This 
just turns the application of non-nil compilation can deal declarations. units into strictly with declaration 
elements. elements so function ( List return To_Compilation_Unit_List : in ASIS_Ada_Program.Element_Li.st) 
ASIS_A&#38;_Program.Compilation_Unit_List; -Â­-- Returns elements a list in the of the element enclosing 
list. compilation Units of the These utilities offer useful secondary capabilities implemented with 
theprimary ASIS operations that deal tracethenameofeachentitybacktoitsdeclaration. Ifthe with singleunita. 
declarationisthatof avariableandappears inthedirect supporter unit then it mustbe determined whether 
the variable is either set or referenced or both. This Reusakle Servlceq determinationiabased onthemodeofthefonnal 
parameter associatedwiththeactualparameter. Parameteraofmode The DeterminerInformation function in the 
inarejust~d. Parameters ofmodeoutare onlyupdated. ASIS_Source_Destmation_View mustdoafairamount of Parameters 
of mode in outareboth read and updated. work and is the center of the cross-reference utility functionality. 
The following reusable service was designed to facilitate One task it must do is examine the actual mrameters 
of the association of actual parameters to formal parameters each subprogram or entry call of a direct 
depe~ent unit and and determine the parameter mode. ith ASIS_Ada_Pmgram; ith ASIS_Declarations; ackage 
ASIS_Subprogram_Parameter_Services is type Corresponding_Parameter is private; -- Provides an abstract 
association of the expression supplied as -Â­ an actual parameter with the identifier of the formal parameter 
-Â­ specification. type Corresponding_Parameter_List is array (ASIS_Ada_Program.ASIS_List_Index range 
<>) of Corresponding_Parameter; function Corresponding_Parameters (Subprogram_Or_Entry_Call : in ASIS_Ada_Program.Element) 
return Corresponding_Parameter_List; Returns a list of the corresponding parameters of the call. function 
Corresponding_Formal_Parameter (Parameter : in Corresponding_ParaIaeter ) return ASIS Ada Program.Identifier_Definition; 
 --Returns the identifier of the formal parameter. 465 function Corresponding_Acimal_Parsmeter (Parameter 
: in Corresponding_Parameter ) return ASIS_Ada_Program.Identifier_Defini.tion; --Returns the actual 
parameter expression . function Corresponding_Parameter_Mode (Parameter : in Corresponding_Parameter 
) return ASIS_Declarations.Parameter_Kinds; --Returns the mode of the parameter; in, in out, or out. 
?rivate type Corresponding_Parameter is record Formal : ASIS_Ada_Program .Identifier_Defini.ti.on; Actual 
: ASIS_Ada_Program.Expression; end record; snd ASIS_Subprogram_Parameter_Servi.ces; 4bstract semiceslilce 
thisone contributeto welldesigned ~tep 4. 1~ the A?-on m and implemented ASIS applications and will be 
reusable in manyotherprogmms ~gardlessofthe Application View or theproblemdomain. Themainprogram oftheMDCDocumentation 
Tool does not have to deal with ASIS directly, instead it simply withseachunit intheApplication Viewsincethey 
contain allthenecessaryoperationsandrenamings. Â­ rith ASIS_Library_View; rith ASIS Unit Declaration View; 
rith ASIS-Sour~e Destinati~n View;  rith Text~IO; >rocedure MDC_Documentation_Tool is Columnl : constant 
Text 10.Positive_Count := 5; column2 : constant Text~IO.Positive Count := 30; column3 : constant Text_IO.Positive~Count 
:= 55; Separator : constant String := (1..75 => * ); >egin ASIS_Libra~_View .Open_Library ( mdc.alb 
); SUPPORTER_UNITS_BLOCK : declare  Closure : constant ASIS_Unit_Declaration_View.Extended_Family_List 
:= ASIS_Unit_Declarat ion_View.Fetch_Extended_Fami ly (ASIS_Unit_Declaration_View .Library_Unit_Declaration 
(wmdc_main )); Supporter_Units : constant ASIS Unit Declaration View.Package Declaration List := ASIS_Unit_~ecla=ation_View.~etch_Library~Units 
( ~imw, Closure); beqin -Print the Header Text_IO.Put_Line (Separator); Text_IO.New_Line; Text_IO.Set_Col 
(Columnl); Text_IO.Put ( PACKAGE NAME ); Text_IO.Set_Col (Column2); Text_IO.Put ( SOURCE UNITSm); Text_IO.Set_Col 
(Column3); Text_IO.Put ( DESTINATION UNITS ); Text_IO.New_Li ne; for Each_Supporter in Supporter_UnitstRange 
loop DEPENDE~_UNITS_BLOCK : declare Dependent_Units : constant ASIS_Unit_Declarat~on_View.Direct_Dependent_List 
:= ASIS_Unit_Declaration_View .Direct_Dependent_Units (Supporter_Units(Each_Supporter), Closure); begin 
for Each_Dependent in Dependent_UnitslRange loop DETEIWINE_INFORMATION_BLOCK : declare Info : constant 
ASIS_Source_Destination_View.Information := ASIS_Source_De stination_View .Determine_Inforxnation (Supporter_Units 
(Each_Supporter ),Dependent_Unit s(Each_Dependent )); begin if ASIS_Source_Destination_View.Is_Source_Unit 
(Info) or ASIS_Source_Destination_View.Is_Destination_Unit (Info) then Text_IO.New_Line; Text_IO.Set_Col 
(Columnl); Text_IO.Put(ASI S_Unit_Declaration_View .Unit_Declaration_Name (ASIS_Source_DeStination_View 
.Di.rect_Supporter_Unit (Info))); if ASIS_Source_DestinatAon_View.Is_Source_Unit (Info) then Text_IO.Set_Col 
(Column2); Text_IO.Put (ASIS_Unit Declaration_View.Unit_Declaration_Name (ASIS_Source_De stin~tion_View 
.Dependent_Unit (Info))); elsif ASIS_Source_Desldnation_View.Is_Destination_Unit (Info) then Text_IO.Set_Col 
(Column2) ; Text_IO.Put ( . . . . . . . . . . . . ... ). end if; if ASIS_Source_Desti.nation_View.Is_Destination_Unit 
(Info) then Text_IO.Set_Col (Column3); Text_IO.Put(ASI S_Unit_Declaration_View .Unit_Declaration_Name 
(ASIS_Source_Destination_View .Dependent_Unit (Info))); elSif ASIS_Source_Destination_View.Is_Source_Unit 
(Info) then Text 10.Set_Col (Column3); Text_IO.Put ( . . . . . . . . . . . . ... ). end if? end if; end 
DETERMINE INFORMATION BLOCK; end loop; end DEPENDENT UNITS BLOCK;  end loop; end SUPPORTER UNITS BLOCK; 
 ASIS_Library_Vi ew.Close_Library; ml MDC Documentation Tool: ASIS promises to give Ada engineeas the 
next generation of Ada sensitive tools that am portable, flexible, and easily customized. Development 
of ASIS Application Tools using Application Views will reduce the development effort to days instead 
of months, and will result in much lower lifeÂ­cycle costs. Pleasant side effects will include the development 
of reusable collections of utility and service components. [1] A&#38; Semantic Interface Spccification(ASIS), 
TRI-Ati 91 conference Pmcee@ngs. [2] Reference Manual for the Ada Progmmming Language (ANSUMIL-STD-1815A-1983) 
Steve Blake is TeleSoft s ASIS architect, and is the technical lead in the implementation of ASIS on 
TeleSoft s Ada compiler and library. He has worked with TeleSoft as a contractor and employee for 9 years. 
During that time he has developed extensive test suites, led the porting and validation of TeleSoft s 
compilation environment to the Cray X-MP and Cray-2, and supervised development of many Ada tools including 
the TeleSoft Debugger. He was a founder and President of Tachyon Corporation specializing in Ada training 
and reference software. He holds a BS in Computer Science from National University. Jim Bladen is the 
manager of TeleSoft s Advanced Development Group which is responsible for TeleSoft s Distributed Ada, 
Ada 9X, Core Technology, and Ada Semantic Interface Specillcation (ASIS) programs. Mr. Bladen has been 
involved with Ada since its beginning when he developed an early A&#38; subset compiler which cross-compiled 
to an embedded processor in an Air Force test seL He holds a BS in Electrical Engineering from George 
Washington University and an MS in Computer Science from the University of Virginia. 
			