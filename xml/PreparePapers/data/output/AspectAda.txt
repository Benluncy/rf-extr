
     aspect body Reentrannt_Locks is advice Around(A : in out Lock_Aspect) is begin A.L.Lock; Proceed; 
A.L.Unlock; exception when others => A.L.Unlock; raise; end Around; end Reentrant_Locks; The aspect 
defined modularizes the synchronization concern using the mutex defined for the aspect type. An around 
advice is used for this aspect too, since an exception block is needed to be able to unlock the lock 
in case of exceptions. The association of the pointcut to the generic aspect is done in the weaving/composition 
rules program unit. We define a pointcut that designate the subprograms declared for the tagged type 
Pro­tected_Type and for the Extended_Type that extends the Pro­tected_Type. Finally the aspect Reentrant_Lock_Object 
is instan­tiated with this named pointcut. weaver My_Rules is My_Hierarchy : Pointcut := execution(Protected_Objects.*(..) 
and execution(Protected_Objects.Extended.*(..); aspect Reentrant_Lock_Object is new Reentrant_Locks(My_Hierarchy); 
end My_Rules; The result of using AspectAda is that the Ada program contains business logic in the methods 
declared for the objects and the aspect contains the synchronization logic and these two concerns are 
associated using the weaver/composition rules. We illustrate this by showing the object methods for the 
aspect-oriented system. procedure Op1(O : in out Protected_Type) is begin -- perform operation end Op1; 
 We see that the business logic is not tangled with synchronization logic. The same applies to the overriding 
method: procedure Op1(O : in out Extended_Type) is begin -- potentially some extra manipilation of data 
OP1(Protected_Type(0)); -- potentially some extra manipulation of data end Op1; The removal of the 
synchronization code of the object methods will be true for all methods. Hence the scattering of the 
synchro­nization code is also removed. We can based on this conclude that ApsectAda has managed to modularize 
the crosscutting concern removing code tangling and code scattering. 4. WEAVER IMPLEMENTATION 4.1 Architecture 
The prototype of a compiler for the AspectAda language is a pre­processor like compiler that takes Ada95 
code, aspect code, and weaving/composition rules to generate weaved source code. The generated source 
code is compiled, bound and linked with a stan­dard Ada95 compiler to an executable. AspectAda also has 
a run­time component for accessing static information of a join-point (subprogram name, parameter names 
etc.) The conceptual design view of the AspectAda compiler is shown in Figure 1 using the architectural 
notation from [9]. Weaver :Executable :ObjectCode Figure 1. Conceptual Architecture The AspectAda tool 
is separated into two subsystems: a weaver and a run-time. The weaver subsystem realizes the executable 
for the AspectAda tool. The run-time is a library that is used by the produced code to access information 
about the current joinpoint. The input to the weaver subsystem (external ports) is of three types: Ada95 
source code, aspect source code and composition rules. Additionally the weaving can be configured through 
a set of weaver parameters. The three parsers (components) are connected to the weaver through three 
separate parse trees (connectors). The parse trees can be traversed and queried from the weaver. The 
weaver is performing the merging of aspects to the Ada95 source code and is producing Ada95 source code. 
The produced source code has source code dependency to the AspectAda run-time li­brary and is thus bound 
and linked with the object code of the run-time library. The compilation, binding and linking of the 
gen­erated source code is achieved using a standard Ada95 compiler that produces object code and an executable. 
The module architecture of the AspectAda compiler reflects the conceptual architecture. The two subsystems, 
weaver and run­time, are also modular subsystems. The majority of functionality is in weaver subsystem. 
To support the parsing of the input lan­guages we selected to use two third party libraries: AdaGOOP 
and ASIS. AdaGOOP [4, 5] is a flex/yacc like parser generator that supports generation of an object-oriented 
syntax tree with the visitor design pattern [8]. AdaGOOP is used for parsing the aspect source code and 
the weaving/composition rules. The aspect source code is complete Ada95 grammar with extensions to recognize 
advices. The weaving/composition rules contain pointcut defini­tions and aspect definitions. The grammar 
for this is a mix of As­pectJ grammar with a touch of Ada95 like grammar. Ada95 source code parsing is 
done using the Ada Semantic Interface Specifica­tion (ASIS) [10]. ASIS is an ISO standardized interface 
that pro­vides semantic and syntactic information to the clients. The weav­ing module needs to select 
the appropriate joinpoints that are designated by the pointcuts in the Ada95 source code and to merge 
advices with Ada95 code to produce weaved source code. The modular architectural view (see Figure 2) 
shows the layering and subsystems. The parsing of AspectAda s language extensions    
			