
 USING~4ULATORSASV~ICLES FOR INSTRUCTION IN SYSTEMS PROGRAMMING: PROSPECTIVE CONSIDERATION Amos O01agunju 
Elvis Borders Department of Mathematics and Computer Science North Carolina A &#38; T State University 
Greensboro, NC 27411 between machines of varying capabilities Microprogramming is a technique for ABSTRACT 
 and internal organizations. Today user- microprogrammable machines are implementing machine language 
instruction proliferating the computer market. sets --it is critical in today's co~uter architectures 
and operating systems. An Ideally, a course in systems emulator is a set of microprograms that programming 
should emphasize the concepts i~pl~nents the architecture of one machine on another; microprogramming 
is often used and techniques underlying the design and implementation of vendor supplied in emulation 
to make one computer system operating system add its support programs. appear as if it were another. 
This paper The goal of the systems programming course presents the architecture for a at North Carolina 
A &#38; T State University microprogrammed computer system, the VS~4. is to introduce basic software 
components The simulated virtual computer system, its monitor and a simulated concurrent PASCAL and 
hardware features of computer systems; to expose the student to the organization are discussed. The 
usefulness of the VSI~4, and design of editors, linkers, loaders, its monitor and the concurrent PASCAL 
as vehicles for instruction in systems assemblers, compilers, and operating systems; to provide the 
technical programming is addressed. knowledge for the analysis and modification of micro based operating 
 1. INTRODUCTION Microprogramming is attributed to systems; and to introduce the practice and probles~solving 
techniques of the systems Professor Maurice Wilkes who presented concepts [Wi51] that now form the 
basis of programmer. During the 1984-85 academic year, we current microprogramming techniques. He 
discovered that the students enrolled in saw the control unit as the areawhere the the systems prograrmdng 
class at North greatest level of conplexity arises, Carolina A &#38; T State University had especially 
when a comprehensive set of problems perceiving the concepts of instructions is used. The concept of 
 fir~are and algorithms for the microprogramming did not receive implementation of mutual exclusion 
 widespread attention or acceptance in the 1950s because of the high cost of control primitives. The 
course requires senior undergraduate standing in computer memory, Hoover, during the 1960s the science; 
the assumption is that the reduced cost of memory allowed computer students would have completed a course 
in manufacturers to usemicroprogramming to impl~ment machine language instruction assembly langauge 
programming and another couxse in computer organization and sets [Wi69]. In the late 1960s and early 
 1970s dynamic microprogramming was hardware. developed to allow machine instruction 2. THE VSEM AND 
ITS MONITOR  sets to vary dynamicallyand frequently. In order to introduce firmware in The major thrust 
for the acceptance of general and to convey the flavor of microprogramming came from the strive to 
 microprogramming in particular, we have achieve instruction set compatibility designed and impl~nented 
a small hypothetical microprogrammed computer, the VSEM and its monitor. The design of VS}~4 is based 
on that presented by Rauscher and Adams in their excellent tutorial paper Permission to copy without 
fee all or part of this material is granted provided [~80]. that the copies are not made or distributed 
for direct commercial advantage, The VSI~4 and its monitor were the ACM copyright notice and the title 
of the publication and its date appear, designed and implemented with the and notice is given that copying 
is by permission of the Association for following goals in mind: (i) to provide an Computing Machinery. 
To copy otherwise, or to republish, requires a fee and/ environment for demonstration of or specific 
permission. &#38;#169;1987 ACM 0-89791-217-9/87/0002/0132 75Â¢ 132 microprogramming techniques, ( 2 ) 
to provide an interface that serves as the monitor between the user and the hypothetical virtual machine, 
and (3) to provide a simulated environment where students can run machine language programs and trace 
the execution as the programs are being interpreted by the VSEM microprogram. The design of the virtual 
machine reflects a typical machine composed of registers, machine language instruction set, microoperations, 
and microprogram that interprets the machine language programs. A schematic view of the architecture 
for the VS~4 and its monitor is shown in Figure i. The VS~M has an accun~/lator register that is involved 
in all arithmetic operations. Each instruction in the machine language has two 8-bit fields, an operation 
code and a storage address. The VS~M processor has an arithmetic and logic unit for performing certain 
calculations. Although not shown in Figure i, the VS~4 has a separate register for each of the following 
operations: (a) locating the next machine language instruction to be executed, (b) holding the address 
of the location in primary storage being read from or written to, (c) receiving data being read or holding 
data being written, (d) extracting the address portion of the machine instruction in a storage data 
register, (e) pointing to the location of the next microinstruction to be executed, and ( f ) pointing 
to the current microinstruction being executed. The VS~4 machine operates by first loading the microprogram 
into control storage; each instruction in the microprogram resides in one location of control storage. 
The machine fetches the next instruction pointed to by a control storage instruction address register 
 (CSIAR), decodes the instruction and transfers control to the appropriate routine in the microprogram 
to interpret the current microinstruction; the control storage instruction address register is updated 
and the entire process is repeated. Similarly, the microprogram fetches the primary storage address of 
the next machine language instruction pointed to by a primary storage instruction address register (PSIAR), 
interprets the instruction and then updates the primary storage instruction address register. Appendix 
A contains the machine language instruction set for the VSID4. Note that the instruction set and user 
operations are limited; this restriction will facilitate learning of the VSEM language and its architecture. 
The microoperations that the machine can perform are presented in Appendix B. The microoperations are 
combined in sequences to impl~ent the machine language instructions of the VS~4 machine. The microprogram 
which interprets VSEM machine language instruction is also presented in the Appendix B. The microprogrammed 
VS~4 first sets the CSAIR to 0 (i.e the location of the microcode routine that performs a machine language 
fetch instruction). The machine fetches the next machine language instruction from the location whose 
address is in the PSAIR. The GET ~peration causes the instruction to be loaded from memory into the storage 
data register (SDR). The address of the proper microcode routine in control storage for interpreting 
the machine language instruction is decoded from the SDR and copied into the CSIAR. After executing the 
current microinstruction control is transfered to the microcode routine. We have simulated the operations 
of the VS~4 machine to allow us present and demonstrate the concepts of fir~are to senior undergraduate 
students. Though virtual, the VS~M is an emulator of a typical computer machine. The design and implementation 
of the VSI~4 monitor reflects the basic operations of a disk operating system. The functions of the VS~4 
monitor commands are presented in Appendix C; these commands are self-explanatory and will not be described 
further. The BNF syntax structure of the VS~4 monitor commands will be made available to the reader upon 
request.  .......................................................... t t System Message Table Tor 
PASCAL-AT Error Messages and Prompts ~compiler I" , \ L ................................. ~---------------......... 
% Ma|n me~-y fence l Symbol i c | Address .I..----~ | J  Registers Stack --local data store  ' I 
! Machine I, I Interpreter 1 Figure 1 Schematic View c~f the VSEH and its Monitor 133 3. IMPL~4ENTATION 
OF A CONCURRENT PASCAL The main objective for the i~pl~mentation of a concurrent PASCAL (PASCAL-AT) 
was to provide an environment for demonstration of problems associated with concurrent execution of processes. 
The PASCAL-AT is a modification of the PASCAL-S interpreter that was originally written by M. Ben-Ari 
[Be82]. The implementation of a PASCAL-AT system is a simulation of concurrent execution. The PASCAL-AT 
system compiles a subset of pascal pseudocode and then simulates the execution of this code; the object 
language pseudocode is simulated on a stack machine. The reader is encouraged to contact the authors 
for further details on the BNF syntax structures and the implementation of the PASCAL-AT system.  4. 
RESULTS AND CONCLUSIONS During the 1985-86 academic year, the VSEM has been found useful at North Carolina 
A &#38; T State University in introducing the concepts of firmarare. Students were successfully able 
to write VSI~4 machine language programs that add, multiply, and divide (see Appendix D for two exanples 
) the contents of memory locations and to trace the execution. The VSI~4 monitor provided a forum for 
the discussion of the data structures and inrplementation of R0M monitors. Through the simulated PASCAL-AT 
system, students were exposed to many asynchronism problems and their solutions. These problems range 
from one-process and n-process deadlock to indefinite postponement. The systems programming course at 
North Carolina A &#38; T State University emphasizes theory and practice in many areas of computer science: 
operating systems, compilers, assembler languages, linkers and loaders, macroprocessors, editors and 
computer hardware. With these many broad areas it is doubtful that an effective instruction in systems 
programming can be presented to senior undergraduate students without the aids of simulated and emulated 
systems. This claim is based upon the premise that a systems programming course designed for the undergraduate 
students should not be presented as a survey course. Record todate shows that the student performance 
in systems programming course is inproving. It is too early to conclude that the improvement is attributable 
to the newly-developed emulators since the variability of the ability in the group of students in the 
course continues to fluctuate from one semester to another. Nevertheless, we will continue to simulate 
the operations of assemblers, linkers and loaders, and macroprocessors in our future investigation of 
student learning process.  REF~CES [Se82] Ben-At|, M. (1982) Principles of Concurrent Programming, Prentice-Hall 
International, Inc. pp. 133-164. [Ra80] Rauscher, T. G., and Adams P. N. (1980) "Microprogramming: A 
Tutorial and Survey of Recent Developmente," IEEE Trans. on Computers, Vol. C-29, NO. i, pp. 2-20. [Wi69] 
Wilkes, M. V. (1969) "~ne Growth of Interest in Microprogramming: A Literature Survey," Computer Surveys, 
Vol. i, No. 3, pp. 139-145. [WiSl] Wilkes, M. V. (1951) The Best Way to Design an Autumatic Calculating 
Machine, Reprint in Earl E. S~rtzlander, Jr. (ed.), Computer Design Development -Principal Papers, Rochelle 
Park, N. J. : Hayden Book Co., 1976, pp. 266-270. APP~IX A: Machine Language Instruction Set for the 
VSEM <instructions> : := <micro-instruction><program-end> <micro-instruction> : := <micro-commands> 
I <micr o-c~mands > <micrc~instruction> <micro-commands> ::= <junp-statement> | <direct-addressing> 
| <conditional-state> | <Pr ogram-words > <address > <jim, p-statement> : := 'BRANf~'<nt~,erie-address> 
<direct-addressing> : := <program-words><indexing> <conditional-state> ::= 'COND'<jump-stetement> <program-words> 
::= 'S~DRE' J 'PRINT' I 'ADD' I 'LOAD' ! 'SUB'  <program-end> ::= 'HALT' <address> : := <symbolic-address> 
| <n~ric-address> <indexing> : := ' ( '<symbolic-address>' )' <symbolic-address> ::= 'A' <numeric-address> 
: := <digits> { length limited to 3} <digits> : := <digit> } <digit><digits> <digit> : := 0 | 1 | . . 
. | 9 FUNCPION 0 TO 256 Represents the range of VSEM memory locations for program and data; 256 is reserved 
for the symbolic <A> HALT Ends program and causes a dump of m~nory locations used for data at end of 
program execution. SUB Subtracts the contents of a specified location in primary storage fram the contents 
of accumulator. ADD Adds the contents of a specified location in primary storage to the contents of 
accumulator. LOAD Loads the contents of specified location in primary storage into the acc~m/lator. 
 ST~E Stores the contents of acc~ulator at the specified location in memory. PRINt Displays the content 
of specified location. ~RAN(~ Transfers control to specified location. CO~) BRAN(Z4 Skip to specified 
location if the contents of acctm/lator is zero. VSEM Micrcoperations and Microprogram VS~4 Microoperations 
 Register Transfers: Memory Operations: SDR <= RAG GET {memory location to SDR} REG <= SDR FJT {from 
SDR to mmmory location} SAR <= R~G Sequencing Operations: Operations dealing with Accumulator: CSIAR 
<= CSIAR + 1 ACC <= ACC + RRG CSIAR <: decoded SD~ ACC <= ACC - REG CSIAR <: constant AOC <= RSG JL~R~ 
((AOC = 0) => CSlAR +2 RES <= ACC else => CSIAR +i) AOC <= REG + I where {R~ is ACC, PSIAR, or T~4PR} 
TEMPR is used to extract address portion of the machine instruction in the SDR. ACC is the acctumllator 
register. 134 VSEM Microprogram  Fetching Instruction: ADD: [00] SAR <= PSIAR [i0] AOC <= PSIAR + 
i [01] G~ [ill PSIAR <= ACC [02] CSIAR <= decoded SDR [12] TEAR <= SDR [13] SAR <= TEMPR SUB: [14] 
GET [20] ACC <= PSIAR + i [15] TEMPR <= SDR [21] PSIAR <= AOC [16] ACC <= AOC + TEMPR [22] TEMPR <= 
SDR [17] CSIAR <= 0 [23] SAR <= T~4PR [24] GET LOAD: [25] TEMPR <= S~ [30] AOC <= PSIAR + i [26] 
ACC <= ACC - TEMPR [31] PSIAR <= ACC [27] CSIAR <= 0 [32] T~4PR <= SDR [33] SAR <= TEMPR STORE: [34] 
GET [40] ACC <= PSIAR + i [35] T~PR <= SDR [41] PSIAR <= ACC [36] ACC <= T~4PR [42] T~4PR <= SDR [37] 
CSIAR <= 0 [43] SAR <= T~PR [44] SDR <= ACC BRANCH: [45] PUT [50] PSZAR <= SUR [46] CSIAR <= 0 [51] 
CSIAR <= 0 C0ND BRAN(~: [60] JUMP [61] CSIAR <= 0 [62] PSIAR <= SDR [63] CSIAR <= 0 AppÂ£~qDIX D: 
SAMPLE VSEM PROGRAMS 0 > LOAD 17 0 > LOAD 45 1 > SUB 15 I > STORE I00 2 > STORE 17 2 > STORE 47 3 > 
LOAD 16 3 > SiDORE A 4 > ADD 18 4 > [DAD (A) 5 > STORE 18 5 > ADO i00 6 > LOAD 17 6 > STORE i00 7>C0~ 
7 > LOAD A 8 > BRANCH i0 8 > ADO 46 9 > BRAN(~4 0 9 > STORE A i0 > PRINT 18 i0 > LOAD 48 ii > HALT ii 
> ~JB 46 12 > STORE 48 Program A. 13 > COND 14 > BRANCH 16 15 >BRANCH 4 16 > PRINT i00 17 HALT Program 
B.  Program A adds the contents of the range of specified address locations contained in memory locations 
16 and 17 and stores the stun in location 18. Program B multiplies the content of location 45 by the 
content of location 46 and stores the product in location i00. ~221~IL~-C: VSEM Monitor Commands ~AND 
ACCPION { Input/Output} MAKE Creates a new file; if the file already exists the user is allowed to overwrite 
it or to specify a new filename. (~ Opens an old file for processing. GEt Reads a oopy of a program from 
the diskette. PUT Writes the current program on the diskette. PURGE Deletes a file from the VS~4 directory. 
DATA/I Allows input data to be keyed in from the terminal. DATA/R R~ds a copy of the data file from the 
diskette. {miscellaneous service commands} DIR Displays the VSEM directory. LIST Displays the current 
program in memory. CLEAR Clears the screen of the terminal. N~ Clears the program and data from n~mory. 
DEBUG Checks the syntax error of the current program. RUN Begins program execution. GOID Begin execution 
at a specified program line. ~qD Terminates processing and session. {editor } ~DIT Invokes the editor 
 /I Replaces specified old line with the new source code statement. /s Inserts new source code statement(s) 
at end of current program line and starting with the new line ntmnber. /s Searches for a suh6tring within 
a target string and replaces the old su~tring by the new substring. /R Removes a substring from the 
target string. /L Lists all program lines. /D Deletes specified source code lines. /E Terminated editing 
and returns control to the monitor.  135  
			