
 Collision Detection for Fly-Throughs in Virtual Environments Martin Held* James T. Klosowskit Joseph 
S.B. Mitchell$ State University of New York, Slony Brook, NY 11794-3600 1 Introduction Real-time collision 
detection is of criticaJ importance in phys­ical simulations and in interactive use of virtual environ­ments. 
For example, the goal of one application in the air­craft industry is to let mechanics verify the serviceability 
of an aircraft in a VR environment (CAD model of the air­craft), rather than on a full-scale physical 
mock-up. Wear­ing a sensor-laden suit, they should be able to test and train routine maintenance tasks 
such as the inspection and replace­ment of parts. High-speed collision detection within the vir­tual 
environment is essential in order to provide interactive feedback about the feasibility of the mechanics 
actions, Hap­tic force-feedback can require about 1000 simulation updates per second. We have been investigating 
various approaches to collision detection in a polyhedral environment 2 (whose boundary representation 
is given), in which one or more polyhedral flying objects move. The assumption is that the environ­ment 
t may be huge (millions of facets), but that it is largely static and can be preprocessed to support 
efficient intersec­tion queries with the flying objects, which are assumed to be relatively small in 
number and moderate in complexity (thousands of facets). heldfhrns.sunysb .edu. Supported by NSF Grants 
DMS­9312098 and CCR-9504192. On sabbatical leave from Universitiit Salzburg, Salzburg, Austria. tjklosow@ams.suuysb. 
edu. Supported by NSF grant CCR­9204585, and by a grant from Boeing Computer Services. ijsbm@ams.sunysb. 
edu. Partially supported by NSF grants CCR-9204585, CCR-9504192, and by grants from Boeing Com­puter 
Services and Hughes Aircraft. Permission 10 make digital/hard copies of all or pan of Wk material for 
personal Or classroom use is granted without fee provided that the copies are not made or distributed 
for profit or commercial advantage, the copy­ right notice, the title of the publication and ita date 
appear, and notice is given that copyright is by permission of the ACM, Inc. To copy otherwise, to republish, 
to post on servers or to redistribute to lists, requires specific permission andfor fee. Computational 
Geometry 96, Philadelphia PA, USA 01996 ACM O-8979 1-8045/96/05. .$3.50 The video depicts a few representative 
runs of our exper­iments, based on two methods: the mesh-based method, and the bounding voiume hierarchy 
method. Details of our algo­ rithms, implement ation issues, and experimental results are reported in 
[3, 4]. For other recent related work on collision detection, see [1, 2, 6, 7]  2 Mesh-Based Method 
This method is motivated by recent results on efficient ray/segment shooting queries using meshes (triangulations) 
of low stabbing number [5, 8]. The complexity of an int ersec­tion query with an object F is proportional 
to the number of cells (t etrahedra ) of the mesh that are intersected by F. The first task is to preprocess 
S in order to construct a conforming tetrahedral mesh, M. Ideally, this mesh will be one of low stabbing 
number; however, recent theoretical results suggest that, in general, there may not exist three­dimensionrd 
meshes of low worst-case st abbiug number, and finding provably good meshes may be quite difficult. Thus, 
our implementation takes a first stab at a heuristic solution by constructing a conforming triangulation, 
based on com­puting a Delaunay triangulation of obstacle vertices and then selectively adding Steiner 
points to make it conform to the boundary of C. Clearly, the mesh we obtain is not necessarily of low 
stabbing number. (Bad examples exist. ) Our goal in this preliminary study was to obtain some conforming 
mesh, hopefully nice in some respect. We are now developing new heuristics designed to give much lower 
stabbing numbers. In performing collkion detection for flying object F in S, we apply a two-phase search: 
In phase I we compute BI?(F), the bounding box of F, and enumerate all tetrahedral r,hat lie partially 
inside the bounding boxl. Provided that one tetrahedron containing one of the corners of BB(F) is known, 
these tetrahedral can be determined by a straightfor­ward (and comput ationall y inexpensive) breadt 
h-first search 1For the sake of simplicity, our implementation enumerates the {possibly leu-~er) set 
of att tetrahedral whose bounding boxes over. lap with Elf?(F). V-13 of M. (The video highlights the 
edges of the tetrahedral enu­merated. ) If none of the facets of these tet rahedra is part of an obstacle 
boundary, then we are done (no collision). Other­wise, in phase II a full-resolution collision check 
is performed, checking each facet triangle of F for collision with any of the (hopefully few) obstacle 
facets determined in phase I. Implementation Issues We note that the robustness of the mesh generation 
is a major issue. Since real-world mod­els tend to have a lot of degeneracies, such as four or more points 
being coplanar, an assumption of general position is inappropriate. Thus, for robustness in the generation 
of the Delaunay triangulation, we have adapted Mucke s implemen­tation, which is based on simulation 
of simplicity . As our algorithms rely on the availability of the bounding box of F, we also implemented 
a fast method of updating l?B(F) during the flight. In particular, with each step, the new bounding box 
is obtained efficiently by a hill-climbing algorithm applied to the (recomputed) convex hull of F. Bounding 
Volume Hierarchy We implemented and tested a few different box-based methods, and variants thereof. We 
mention here only one method, which we found to be most promising, based on variants of R-trees . In 
general, we consider bounding volume hierarchies, which are trees whose nodes correspond to a subset, 
S, of facets of &#38;, and a bounding volume , b(S), defined to be the minimum-volume superset of S whose 
shape is specified by a simple class (e.g., boxes, spheres, convex polytopes having fixed surface normals, 
etc.). There are many different ways to construct such trees, and we have been studying several of these 
choices, and how they affect efficiency of collision de­tection [3, 4]. We use bounding volume hierarchies 
for both the polyhedral environment and the flying objects. It is straightforward to perform collision 
detection using a bounding volume hierarchy, The video illustrates a fairly ba­sic version of the algorithm, 
based on simple bounding boxes (hyperrectangles). We animate the search of the hierarchy, highlighting 
(in white) those boxes that are visited and (in red) those boxes that indicate a potentizd collision 
(and thus require further exploration down the subtree). We have implemented several enhancements to 
the basic method. One improvement comes from using bounding vol­umes that are convex polytopes whose 
normal vectors come from some small set of k vectors, roughly uniformly spaced about the sphere. Simple 
bounding boxes are the case of k = 6; we have been using also k = 14,18,26,... (obtaining bounding 14gons 
, 18-gons , and 26-gons ), and have seen that these bounding sets yield substantial improvements in many 
cases [4]. The video illustrates (using Geomview) the improvement one gets in the tightness of fit when 
us­ing 14-gons, 18-gons and 26-gons to build a bounding volume hierarchy of a model of a Spitfire airplane. 
4 Animation For our experiments, we implemented a form of billiard paths : the flying object F is moved 
along a random path, and it is allowed to bounce off an obstacle that it hits. We do not attempt to simulate 
any real bounce ; rather, we sim­ply reverse the trajectory when a collision occurs. The mo­tion of F 
is generated using a simple scheme of randomly per­turbing the previous motion parameters (displacement 
vector and angles of rotation) to obtain the new motion parameters. In all of the video examples, the 
graphics rendering is occu­pying the majority of the running time. We measure running time in terms of 
frame rate (number of collision checks per second), even when we turn off visualization, and count only 
the time to check for collision and to simulate the motion of flying objects. Our frame rates for pure 
collision detection are much higher than what we can show in real-time graphics. For example, for the 
scene of 50 tetrahedral (2OO facets) and a bouncing soccerball (116 facets), the mesh-based method achieves 
a frame rate of 953 frames per second, and the box hierarchy achieves 761, 1406, 1534, or 1748 frames 
per second (depending on if we use axis-aligned boxes, 14-gons, 18-gons, or 26-gons). (These are average 
frame rates. There were 1525, 1576, 709, 593, and 445 full-resolution checks, resp., during the 10,000 
steps of the flights.) The machine used in this video is a Silicon Graphics In­digo 2, with a single 
150 MHZ R4400 processor, an Extreme Graphics board, and 160MB of memory. Acknowledgements: Jai Chafrrapani 
implemented the first version of the mesh-based algorithm. We thank Claudio Silva and Nikolai Zsifkov 
for valuable assist ante. Our work has greatly ben­ efited from the support of the VR group at Boeing, 
including Jeff Heiserman, David Mizell, Henry Sowizral, and Karel Zikan.  References [1] J.D. Cohen, 
M.C. Lin, D. Manocha, and M.K. Ponamgi. Ex­act collision del ection for interactive environments. In 
Proc. 10th Annu. ACM Sympos. Comput. Geom., 391 392, 1994. [2] A. Garcia-Alonso, N. Serrano, and J. Flaquer. 
Solving the collision detection problem. IEEE CornputeT Graphics and Applications, 14:36 43, May 1994. 
[3] M. Held, J.T. Klosowski, and J.S.B. Mitchell. Eval­ uation of collision detection methods for virtual 
real­ity fl y-throughs. In PTOC. 7%h Canad. Conj. Conw put. Geom., 205 210, 1995. (Full paper available 
at http://www.cosy.sbg. ac.at/ held/papers/ccc@5 -VR.ps.gz. ) [4] M. Held, J.T. Klosowski, and J.S.B. 
Mitchell. Speed compar­ison of generalized bounding box hierarchies. 199s. [5] J. Hershberger and S. 
Suri. A pedestrian approach to ray shooting: Shooi a ray, take a walk. In PTOC. Jth A CM-SIAM sym~.s. 
Discrete Algo~ithms, 54 63, 1993. [6] P. M. Hubbard. Collision detection for interactive graphics applications 
IEEE TTan~actions Of Vwualizata on and Com­puter Graphtcs, 1:218 230, 1995. [7] M.C. LIn and D. Manocha 
Fast interference detection be­tween geometric models. The Visual Cornpute~, 11(10 ):542 561, 1995 [8] 
J.S.B. Mitchell, D.M. Mount, aud S. Suri. Query-sensitive ray shooting. In PTOC. 10th Annu. ACM h ympos. 
Comput. Geom., 359-368, 1994. To appear, IJCGA. V-14 
			