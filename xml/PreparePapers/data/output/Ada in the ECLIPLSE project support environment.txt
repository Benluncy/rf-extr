
 ADA IN THE ECLIPSE PROJECT SUPPORT ENV~~?~- ~........... R.H. Pierce Software Sciences Ltd, London 
and Manchester ~use~ Park Street, Macclesfield, Cheshire, SKI! 6SR, U.K. Abstract. This paper outlines 
the object management system provided in the ECLIPSE project support environment and describes how Ada 
compilers are supported by this system. The structure of a common Ada program library is described and 
the support tools provided with it. 1 BACKGROUND Eclipse is an integrated project support environment 
(IPSE), which is being developed by a consortium led by Software Sciences Ltd (SSL) and supported by 
the UK Alvey programme. The other members of the consortium are CAP (UK) Ltd., Learmonth and Burchett 
Management Systems, the Universities of Lancaster and Strathclyde, and the University College of Wales, 
AberyStwyth. Eclipse is built upon SDS-2, a database management System developed and marketed by SSL 
and designed specifically to support software development by large teams (Software Sciences Ltd 1985a). 
SDS-2 employs an entity relationship data model with hi-directional links, which is formally equivalent 
to the network model. Data fields are inherently variable length and a wide variety of data i types 
is supported including user defined types, and sets of links and subrecords. It is these, together with 
the experimental update capability and the support for very long transactions, which justify the statement 
that SDS-2 is designed specifically to support software development. As in SDS-2, a basic database schema 
will be provided which must be used if the Eclipse kernel is to run. This schema can be extended to meet 
the needs of specific tools (e.g. tools based on specific methodologies) or the needs of a specific project. 
 ~ i~ ~ ~ ~ ~ ~÷ i~ ~ ~"   ~" ~ ~ 2 THE OBJECT MANAGEMENT SYSTEM An object in Eclipse terminology 
is the smallest unit of information (in any representation -source code, display file, natural language 
text, etc.) which can be handled by the Eclipse naming scheme. Objects normally consist of control attributes, 
 which are SDS-2 database fields, and a body, which contains the user's information. A minimal set of 
control attributes for items is included in the basic schema; it can and normally will be extended to 
meet the needs of a project and of specific tools. The body of an object may be a host filestore file. 
 The naming scheme is hierarchical; nodes on the tree are catalogues and the leaves are items and synon~ 
tables. Objects normally belong to precisely one item and are named by naming the item to which they 
belong and then specifying a control attribute which serves to identify the object from among the set 
of objects belonging to that item. The intended interpretation of objects and items is that an item represents 
a component of a software system and an object represents a version of that component. The control attribute 
used to select an object might be the creation time and date or might be a project defined version name 
or number or some other attribute, at the user's choice. Synonym tables allow a user to set up his own 
names to identify objects, items and catalogues. A search path containing catalogues and synonym tables 
is used to find the appropriate interpretation of a name. Objects are produced by executing transformation 
procedures (themselves stored as objects), which are procedures defined in a parameterised form of the 
host operating system command language; they are the means by which existing software tools are incorporated 
into Eclipse. Such tools are known as "foreign" tools since they are written without knowledge of the 
database. For example, a compiler would be executed as a transformation taking as input a source text 
object and producing object code and listing file objects. The writing of transformation procedures is 
regarded as a privileged activity to be undertaken by system programming staff, since such procedures 
must not compromise the integrity of the database. The ordinary user may define which consist of invocations 
of transformation pro~edu~es¢~gether with flow of control statements. When an object is created, all 
the details of the procedures which created it are recorded in its derivation history. This allows the 
objectrs body to be recreated at any time by the automatic rebuild system. 3 OBJECT MANAGEMENT AND ADA 
COMPILATION The operation of an Ada compiler is more complex in Eclipse terms than that of a compiler 
for a conventional language, due to the presence of the program library and separate compilation concepts. 
While a compiler for a language such as RTL/2 or Fortran takes a source file as input and produces, say, 
an object file and a listing file, an Ada compiler typically takes a program library and a source f[le 
and generates an updated version of the program library. Depending on the implementation of the compiler 
and possibly on the nature of the source text, the compilermay produce a number of outputs such as object 
code, DIANA tree, symbol table, debugger table and a host of others. These outputs will usually exist 
for each compilation unit in the source text, but may not. It seems unreasonable to require the user 
of an Ada compiler to decide in advance exactly which outputs will be produced by any given compilation, 
and to create Eclipse objects to represent these outputs. The problems are exemplified by considering 
two obvious cases. A library subprogram being compiled for the first time into a particular l[brary may 
create compilation units representing both the specification and the body of the subprogram, while a 
subsequent compilation of the same text would be treated as generating o~ly a body, leaving the specification 
unchanged. A particular compiler may decline to produce an intermediate code tree for a secondary unit 
unless it contains a generic body which may be needed in a later instantiation. The user however is 
not interested in these subtleties; moreover, we wish to be able to incorporate more than one Ada compiler 
into Eclipse (rather than just one compiler with more than one back-end), and each compiler will have 
its own particular set of outputs. The approach taken to overcome the difficulties mentioned above is 
to regard the program library as the only user-visible output from an Ada compilation, apart from a possible 
compilation listing. The Ada compiler is thus run as a transformation taking as its inputs the source 
text and initial program library (which are Eclipse objects) and producing an updated program library 
as its output. In Eclipse, no object can be updated, so in practice the compilation produces a new object 
representing the updated program library. This leads naturally to the idea that a program library is 
an Eclipse item, with each compilation of some source text object into the program library producing 
an object which is a version of the item. The various outputs of the compiler, which logically form 
part of the program library object, are created by the compiler rather than by the user. The Ada compiler 
is thus an "integrated" tool rather than a foreign tool, in that it has direct access to the Eclipse 
object management system. It is still useful to run the compiler as a transformation since this provides 
automatic derivation history recording for the output program library. Note that there is in this scheme 
no concept of a version of a compilation unit within a given library; this Ks replaced by the concept 
of versioning the program library itself. 4 THE COMMON PROGRAM LIBRARY The Ada program library structure 
in ECLIPSE is intended to support (at least potentially) compilers produced by more than one supplier. 
Use of a common library system has a number of advantages. It enables a common set of program library 
management functions and other tools to operate across a range o~ compilers (the common tools are described 
in section 6 below), this making it easier for users to migrate from compiler to compiler as the project 
(or target computer) on which they are working changes. Moreover, in an integrated PSE other tools may 
wish to invoke an Ada compiler directly, and although the parameters which must be supplied for a :!-.. 
.... 313 :...... 3:!{ compilation will vary in detail from compile ~e invoking tool can be assured that 
the effect of the ~o~ilation on the library will not depend on the particular compiler in use. The disadvantage 
is that each compiler to be incorporated into the Eclipse environment will have to be rehosted to conform 
to the Eclipse program library conventions. This can be done either by modifying the implementation of 
those parts of the compiler which interface to the program library structure, or by converting the program 
library structure produced by the compiler to the Eclipse form by a post-processing phase (a pre-processing 
step to convert from Eclipse to compiler form would also be necessary prior to executing the compiler). 
If it is possible, modifying the compiler is by far the best solotion, and may be the only practicable 
one. A compiler rehosted under Eclipse in this way would have to be separately validated. True integration 
of an Ada compiler into Eclipse (or indeed into any [PSE) demands that the database be used to represent 
the inputs and outputs of the compiler, which inevitably demands that an existing compiler be modified 
in some way. The advantages of representing the Ada program library in the Eclipse database will emerge 
in the following sections. 5 REPRESENTATION OF THE PROGRAM LIBRARY The database structure representing 
an Ada program library is shown in Fig. [. The program library itself exists in a number of versions, 
resulting from successive compilations into it, Each compilation unit produced by a compilation is also 
represented by an Eclipse database object. The dependencies between compilation units are recorded in 
a dependency map, which is stored in the body of the program library object. One compilation unit may 
participate in many program library objects, and there is a database l~nk between the compilation unit 
object and each program l~brary object in which it appears (this may not be true for the predefined Ada 
units such as STANDARD or SYSTEM, to avoid an excessively large number of links from these units). All 
links in the database are bi-direetional, so that given a compilation unit all the libraries Figure 
la -Program library versions and derivations PROGRAM LIBRARY ITEM "MYLIB" PROGRAM LIBRARY OBJECTS 
 CREATE COMPILE ] i COMPILE i Derivati°n "MYLIB" "UNIT1" "UNIT2" History  ~ ADA SOURCE TEXT OBJECTS 
 body body Source I -- Text Figure Ib -Program library structure PROGRAM Dependency LIBRARY Map References 
to CU objects Units compiled COMPILATION into previous _ UNIT versions "ACQUIRED" Link to another 
Containers for CU Library in which it appears can be found; conversely, all ua~t~:;~n>a given library 
can be located. There is in addition a link between an Ada source text object and the compilation units 
which have been compiled from it; these units may be in different program libraries or different versions 
of one library. A source object can also give rise to a number of compilation unit objects in one library, 
since the source may contain or generate more than one Ada compilation unit. The compilation unit object 
itself exists to enable these links to be set up (their use for "impact analysis" is described below). 
The compiler will also require to store bulk output such as the object code and symbol table for a compilation 
unit. These bulk outputs can be represented as further database objects ("containers") linked to the 
compilation unit object, the bulk information being stored in the bodies of the containers. Bodies in 
this scheme are just host filestore files and once created by the ECLIPSE object management system can 
be accessed as such by the compiler. An alternative implementation being considered is to make the body 
of the compilation unit object a UNIX directory. This directory would then contain all the bulk output 
files produced by the compiler for the given compilation unit. The dependency map is a directed graph 
containing nodes representing the compilation units in the program library and arcs representing their 
dependencies. Both forward and backward dependencies are recorded, that is if ~ names B and C in its 
with-clause, then there is a "with" relationship between A~~rom B and C and a "withed-by" relationship 
from B and C to A. This allows compilation units made obsolete by compilations of the things on which 
they depend to be marked, and to be brought to the users" notice or automatically recompiled as required. 
 The nodes in the dependency map representing the compilation contain references to the corresponding 
compilation unit objects. The use of a separate map rather than direct dependency links between compilation 
objects allows the same object' to be shared by many program libraries; the dependencies between units 
may differ from library to library. A compilation unit object can appear in many libraries for two reasons. 
Firstly, a compilation unit (CU) object is generated by compiling some Ada source into a new version 
of a program library. Subsequently, this same CU object will appear in all subsequent versions of the 
library until it is deleted or recompiled, either because of a unit on which it depends being changed 
or because its source text has been changed. Secondly, the user may acquire the unit into another library. 
In both these cases, CU objects on which a given CU depends do not change, but the units depending on 
it may change, in which case its reverse links will differ ~rom library to library. From the above discussion, 
it is clear that creating a new version of the program library for each run of the Ada compiler is not 
very expensive. All that is required is to create a new program library object (in the database) and 
the corresponding new dependency map, which is a relatively short binary file (the body of the object). 
The choice of storing the dependency map in the body rather than as a set of linked database nodes is 
made largely on efficiency grounds; there is a greater overhead expected in creating database nodes than 
in copying and amending a file. The two structures are logically identical and a change to an all database 
representation could easily be made. Multiple compilations Despite the low cost of producing a new 
version of the program library for each compilation, there are some cases where this is clearly wasteful. 
For example, if several compilation units have to be recompiled after a unit on which they depend has 
been modified, it would be desirable to recompile all the units in one transformation so that only one 
new version of the program library is created. In another example, it might be necessary to release a 
complete Ada system consisting of many units in source text form, for example from a development team 
to an integration team; the receiving team would probably wish to compile all of the source text as one 
transformation since the release is of no use unless it all compiles. The conclusion is that the "Ada 
compile" transformation must be prepared to accept as input a list of source text items to be compiled; 
the new program library generated~£~ibyl;}!~!~h a transformation (if it succeeds) contains all the o~l,~:~p=ti:objects 
produced by the compilation. THE COMMON ADA TOOLSET The Ada support tools in Eclipse which are common 
to all compilers are described in the following sections. They comprise an Ada linker, an Ada program 
library enquiry to01, and a program library update tool. The program library enquiry tool cannot make 
changes to a library, whereas the update tool can, and consequently has to be run as an Eclipse transformation. 
A particular compiler may offer tools other than the standard ones described below. 6.1 The Ada linker 
 The Ada linker takes a program library as input and performs the language defined operations necessary 
to produce an executable program. This tool is the first component of the cross-development system described 
in section 7 below.  6.2 The program library enquiry tool This tool enables the compilation units in 
a given version of a program library to be examined. The library unit-subunit structure can be displayed, 
together with the dependencies of various kinds between units, in general, information can be requested 
about a single unit, a named collection of units, or the entire library. There is also a facility to 
survey the history of a given compilation unit or units across many versions of the program library. 
These facilities are fairly standard, and do not make any special use of the Eclipse database. These 
are however used by the "impact analysis" function. Given a named source text object, it is possible 
to trace the potential effect of a change to this object on other source text objects and program libraries. 
Using the database link from the source object to the compilation unit objects compiled from it, and 
the links from the compilation units to the program library objects containing them, all versions of 
all program libraries affected by the change ~L ~ ~ -~ L ~ can be discovered. Then by using the dependency 
graphs of these program libraries, all the other compilation units made obsolete by the potential change 
can be determined) and this in turn allows the source text objects corresponding to the affected units 
to be displayed. This gives a very useful mechanism for project management. It is up to human intelligence 
to determine from the proposed change whether there is an actual interface change (e.g. an altered subprogram 
specification) which will require corresponding changes in the affected source objects, or whether these 
can simply i be recompiled without change to their text. In addition to the standard impact analysis 
function provided by the program library enquiry tool, the user also has the possibility of writing ad-hoc 
enquiries about the program library system using the DML (data manipulation language) provided by the 
database. These enquiries can make use of standard or tailored management information stored in the Eclipse 
database. For example, a source text object could contain a link to an implementor or team leader record 
in the project management part of the database; this would allow the persons responsible for each source 
object to be notified of potential changes revealed by impact analysis.  6.3 The program library update 
tool This tool provides the facilities to create a new program library, delete compilation units from 
a library, acquire units from other libraries and recompile units made obsolete by changes to units on 
which they depend. This tool is always run as a transformation which produces a new version of the program 
library. Recompilation is possible since when a unit is made obsolete it is not deleted from the program 
library but merely marked as being "invalid". The link to the source text object from which the unit 
was compiled is used to find the source for the recompilation (if the user has put more than one unit 
in the source file, there is no way of stopping the other units from being compiled also; this is a good 
argument for having only one unit per source object).  Acquisition is the .rocess of compiled into 
one library available in others. In EClipSe this is very easy. All that is necessary is to make an entry 
for the compilation unit in the dependency map of the receiving program library, and make a database 
link from this library to the compilation unit object(s) being acquired. Once created~ a compilation 
unit object is never changed, so sharing units in this way is safe. The tool allows one or more units 
to be acquired~ and provides the option of acquiring either just a library speciflction, or the specification 
plus its body and subunit tree. When a unit is acquired, all the units on which it depends (and their 
bodies) are acquired, unless they have already been acquired previously. Acquisition is not allowed to 
replace a pre-existing unit. The program library update tool can performas many deletion, acquisition 
and recompilation steps as necessary within one transformation. 7 THE CROSS DEVELOPMENT SYSTEM The Eclipse 
PSE contains a complete cross-development system. In addition to the standard Ada compilation environment 
described above, there is a target-dependent builder, which can combine the output of the Ada linker 
with modules written in other languages and produce an executable image. This can be down-line loaded 
into a remote target machine and the Ada program run under the control of a test controller in the host. 
Initially, Eclipse will offer the Telesoft Ada compiler cross-compiling to the Intel 80286 microprocessor. 
The work on the cross-development system is being done by CAP(UK) Ltd. In the first version of the system 
machine-level debugging will be offered. It is anticipated that full Ada symbolic debugging will be introduced 
later. 8 CONCLUSION The Eclipse project support environment will offer a complete Ada compilation 
system integrated into the database and configuration control mechanisms. It is thus an APSE in the sense 
of STONEMAN (USDOD 80). :" i ¸I : ~ ~ " , 9 ACKNOWLEDGEMENTS The authors would like to thank the 
Alvey directorate for their financial support for the project, Software Sciences Ltd for permission to 
present this paper, and their many colleagues who have contributed to the work described. Much of the 
Eclipse kernel is based on a product called Foundation (Software Sciences Ltd 1985b); this has been supported 
financially by the National Computing Centre under the Software Products Scheme and this support also 
is gratefully acknowledged. REFERENCE LIST Software Sciences Ltd (1985a). SDS-2 User-Reference Manual. 
Software Sciences Ltd (1985b). Foundation Functional Specification. USDOD(1980). Requirements for Ada 
programming support environments, "Stoneman", Washington DC.  
			