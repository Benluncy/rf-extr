
 Builcling and Using Davicl Dobkin Department of Princeton Princeton, This animation shows the techniques 
used to build a hierarchy of polyhedra as a preprocessing step for in­tersection detection algorithms. 
It is an animation of ideas developed in the papers [1,2]. We show here how the hierarchy is created 
from a polyhedron and animate an algorithm for detecting the intersection between a polyhedron and a 
plane. The hierarchical data structure gives a concise repre­sentation for polyhedra that is useful in 
various search­ing tasks. Given a polyhedron, P, we build a hierarchy P. = P, PI, .... Pk such that Pk 
is a tetrahedron. Each Pi+l is the convex hull of a subset of the vertices of its parent Pi. Pi+ 1 is 
formed by removing in turn each vertex in V(Pi+l ) V( Pi ). The cone of faces attached to the vertex 
is also removed. This leaves a hole in the polyhedron. This hole is retriangulated in convex fash­ion. 
By removing an independent set of vertices, we assure that the apexes of removed cones are not con­nected. 
As a result we can reattach one or many cones and retain a convex object. We only remove vertices of 
degree less than 12. As a result, the hierarchy has loga­rithmic depth. Computing the hierarchy requires 
linear time and it can be stored in linear space. The initial segment of the video shows the creation 
of a 6 level hi­erarchy from a convex polyhedron built on 30 vertices. Colors are used to code the levels 
. The hierarchy has been constructed as a search tool. We demonstrate its use in searching during the 
final segments of the video. We begin with the task of de­ termining if a polyhedron intersects a plane. 
This is done by determining if the polyhedron at each level of the hierarchy intersects the plane and 
finding the closest vertex if there is no intersection. At the initial level, this *This work supported 
in part by the National Science Foun­ dation under Grant Number CCR90-02352 and by The Geometry Center, 
University of Minnesota, an STC funded by NSF, DOE, and Minnesota Technology, Inc. Permieeion to copy 
without fee ell or pert of thie meterial ie granted provided that the copies are not made or distributed 
for direct commercial advantage, the ACM copyright notica and the title of the publication and ite data 
appear, and notice is given that copying ia by permission of the Association for Computing Machinery. 
To copy otherwise, or to republish, requirea a fee arrd/or epacific parmiseion. 9th Annual Computational 
Geometry,5/93/CA, USA e 1993 ACM ~.~979j-583.6j93 \OO05\0394...~J .50 Polyheclral Hierarchies * Ayellet 
Tal Computer Science University NJ 08544 computation can be done in constant time by enumera­tion. The 
hierarchy was constructed to simplify growth between levels. In particular, we need only consider growth 
affecting two edges adjacent to the closest ver­tex. This amounts to a maximum of 4 cones reattached 
at each level. Since the cones are formed from vertices of bounded degree, this growth can be done in 
constant time, also. As a result, a preprocessed polyhedron s intersection with a plane can be detected 
in O(log n) time. We trace the hierarchical growth by highlighting the closest vertex and extremal edges. 
We also display the separating plane. Watching the cones return to the polyhedron we are able to see 
the algorithm determine if a near vertex is closest or new edges are extremal. This video was prepared 
in the computer science de­partment at Princeton University, Animation software was attached to code 
for computing the hierarchy and detecting intersections. The programs were written in C to run under 
UNIX on a Silicon Graphics Iris. Record­ing was done at the Interactive Computer Graphics Lab at Princeton 
and editing was done with the assistance of the Princeton Department of Media Services. We thank Copper 
Giloth for helping with various artistic aspects of the animation. Kirk Alexander and Mike Mills led 
us through many difficult tasks in helping us produce the final video. References [1] D. Dobkin and D. 
Kirkpatrick, Fast detection of polyhedral intersections, Journa/ of Algorithms, 6, 381-392, 1985. [2] 
D. Dobkin and D. Kirkpatrick, Determining the sep­aration of preprocessed polyhedra a unified ap­proach, 
ICALP-90, LNCS 443, 400-413, Springer Verlag, Berlin, 1990. 394 
			