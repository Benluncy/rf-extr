
 Data Access Performance in a Large and Dynamic Pharmaceutical Drug Candidate Database Zina Ben Miled 
1 Yang Liu 2 Dave Powers 3 Omran Bukhres 2 Michael Bem3 Robert Jones 3 Robert Oppelt 3 Samuel Milosevich 
3 1 ECE Department, Indiana University Purdue University Indianapolis, IN 46202 2 CS Department, Indiana 
University Purdue University Indianapolis, IN 46202 3 Eli Lilly &#38; Company, Indianapolis, IN 46202 
Abstract An explosion in the amount of data gener­ated through chemical and biological experi­mentation 
has been observed in recent years. This rapid proliferation of vast amounts of data has led to a set 
of cheminformatics and bioinformatics applications that manipulate dynamic, heterogeneous, and massive 
data. An example of such applications in the phar­maceutical industry is the computational pro­cess involved 
in the early discovery of lead drug candidates for a given target disease. This computational process 
includes repeated sequential and random accesses to a drug can­didate database. Using the above pharmaceutical 
application, an experimental study was conducted in this paper that shows that for optimal perfor­mance, 
the degree of parallelism exploited in the application should be adjusted according to the drug candidate 
database instance size and the machine size. Additionally, di.erent degrees of parallelism should be 
used depend­ing on whether the access to the drug candi­date database is random or sequential. Keywords: 
cheminformatics, bioinformatics, multithreading, SMP, databases. I. Introduction Modern research in chemistry 
and biology in­creasingly depends upon data intensive applications and database capabilities with unique 
characteris­tics. The large volume and high .ow of dynamic and heterogeneous data present signi.cant 
technical 0-7803-9802-5/2000/$10.00 (c) 2000 IEEE. challenges to current database systems. For exam­ple, 
introduction of process technology has led to ad­vances in the Human Genome Project which result in daily 
release of additions to an ever-accumulating base of DNA sequence data and annotation informa­tion. In 
the same way, the early drug discovery pro­cess produces data accumulations that challenge the limits 
of current systems from routine use of combi­natorial synthesis of new chemical compounds and high-throughput 
screening of those compounds for potential medical activity. The primary focus of this paper is on the 
exploita­tion of large-scale databases. Speci.cally, we explore the impact of the dynamic and large size 
character­istics of the data on the performance of random and sequential access to a drug candidate database. 
This database is used in the pharmaceutical industry to extract potential drug candidates for a given 
target disease. We show that to obtain optimal performance for this application, it is critical to adjust 
the degree of parallelism explicitly de.ned by using multithread­ing. Multithreading is a parallel processing 
paradigm that is based on lightweight threads running con­currently on a shared multiprocessor system 
(SMP). Threads are lightweight compared to processes be­cause they share the same memory space. Thus, 
switching between threads can be done rapidly [1]. Multithreading is attractive for applications, such 
as databases, where parallelism can only be exploited through extensive data sharing between concurrent 
threads or processes. We also show that a solution that is adequate for a small SMP may not be appropriate 
for a large SMP machine. Similarly, a solution that is adequate for a given database instance or type 
of access may not be optimal for other database instances and other types Drug Candidate Descriptor Value 
1 100 54 2 100 55 2 101 56 2 102 1.5 ... ... ... 6555 100 32 6555 102 2.4 TABLE I Example of drug candidate 
library of accesses. The drug candidate database is described in Sec­tion 2. The performance of the application 
under varying database instance sizes is discussed in Sec­tion 3. Section 4 includes the results of a 
compara­tive study obtained from executing the driving appli­cation on a high-end and a mid-range SMPs. 
Related work is included in Section 5. Section 6 summarizes the .ndings of this study. II. Application 
Given a target disease, such as cancer, the drug discovery process consists of determining a pharma­ceutical 
therapy for this target disease. This involves .nding a strategic macromolecule that is pivotal to the 
disease state. Knowledge of the receptor on the macromolecule allows the scientist to .nd molecules that 
will .t it, much like a key .ts a lock. These molecules constitute lead drug candidates. The more accurate 
the .t, the more e.cient is the drug. This paper focuses on the computational process involved in extracting 
lead drug candidates from a database containing millions of drug candidates. Once a set of lead drug 
candidates is extracted for a given target disease, further tests are conducted to .nd at least one drug 
candidate that can be sold as a pharmaceu­tical therapy for the target disease. The database includes 
several libraries, where each library represents a speci.c set of characteristics in the molecule. A 
typical library is shown in Table I. The .rst column of this table represents the drug can­didates (i.e., 
molecules). The second column identi­.es the descriptor for which the corresponding drug candidate has 
a value. The third column contains the value of the corresponding descriptor (column 2) for the given 
drug candidate (column 1). These descrip­tor values are actual numerical values representing di.erent 
characteristics of the molecule such as the ID Library Descriptor Descriptor Number Name Value TABLE 
II Single Item Record (SIR) table. ID desc1 desc2 ... descn TABLE III All Items Record (AIR) table. 
number of sequences of a given set of atoms that are present in the molecule (drug candidate). In gen­eral, 
descriptors quantify the characteristics of the molecule that are important in drug discovery. Drug candidates 
may not have values for all the descriptors in a given library. For example, if the descriptor rep­resents 
the presence of a given sequence of atoms in the drug candidate, that sequence may not be present in 
all the drug candidates. Instead of representing this information as a record of type drug candidate 
number, descriptor number, descriptor value = 0 , the entire record is omitted. The choice of the representation 
of Table I is ad­equate for sparse libraries where a large number of drug candidates do not have values 
for all the de­scriptors. The alternative is to represent the library as a table where the rows correspond 
to the drug candidate and each column is associated with a de­scriptor. Under this alternative representation, 
each drug candidate will occupy exactly one row in the ta­ble. This alternative representation may be 
adequate for dense libraries where most of the drug candidates have values for all the descriptors. The 
tables for the .rst representation (Single Item Record) and the al­ternate representation (All Item Record) 
are shown in Tables II and III, respectively. In [2], we concluded that a homogeneous data rep­resentation 
where all the libraries are either in the SIR or in the AIR data representation is not optimal. This 
is due to the heterogeneity of the data stored in the database. A more e.cient data representation is 
obtained by using the best data representation for each library. The data representation of choice for 
each library is based on the number of descriptors in the library and whether the library is sparse or 
dense. Today a typical drug candidate database includes about 7 million drug candidates and this number 
grows continuously. In this study, we start with a  51 (x)+0.3 × d 73 (x), 51 (x) and d 73 (x) are the 
values of descriptor If the model does not accurately re.ect Fig. 2. Frequency of descriptor values in 
library 11. subset of the large database containing 350,000 drug candidates. In Section 4 and in order 
to evaluate the impact of the database instance size on perfor­mance, the number of drug candidates is 
doubled and quadrupled to 700,000 and 1,400,000 drug candi­dates, respectively. The database used in 
this study contains 12 libraries with a varying number of unique descriptors. Figures 1 and 2 show the 
descriptor value frequency for each descriptor in libraries 6 and 11, respectively. This frequency is 
the ratio of the number of drug candidates that have a value for a given descriptor to the total number 
of drug candi­dates in the library. In the optimal data represen­tation, library 6 is represented using 
the SIR table and library 11 is represented using the AIR table. This choice correlates with the frequency 
curves of Figures 1 and 2. In the optimal data representation, all libraries except for libraries 4 and 
6 are repre­sented using the AIR table. Libraries 4 and 6 are represented using the SIR table. This hybrid 
choice The purpose of this step is to extract lead drug can­didates. III. Dynamic Data If the drug candidate 
list contains randomly se­lected drug candidate IDs, the experiment replicates the process involved in 
building the computational model. Whereas, if the drug candidate list contains drug candidates whose 
IDs are consecutive, then the experiment replicates the process involved in apply­ing the computational 
model to the entire database in order to extract lead drug candidates. An SMP Sun Enterprise E10000TM 
[3] with the con.guration shown in Table IV was used to conduct this experi­ment. The data in the cheminformatics 
application under study in this paper is often dynamic. The number of drug candidates can increase rapidly. 
This can occur, for example, because of the discovery of a new screening method. In order to evaluate 
the impact of this dynamic characteristic of the data, a query was designed to return all the descriptor 
values included in an input descriptor list for all the drug candidates  Fig. 3. Performance of HV1 
with varying numbers of consec­utive drug candidate IDs in the drug candidate list. whose IDs are listed 
in an input drug candidate list. The input descriptor list contains randomly selected descriptors from 
all the 12 libraries. 8iTM Oracle [4] was used to implement the database and Oracle Call InterfaceTM 
[5] was used to implement the application. The application ex­plicitly speci.es the degree of parallelism 
by vary­ing the number of threads that are spawned per li­brary. When the number of threads is one per 
library, each thread will be used to query a single library. If there is more than one thread per library, 
then the input drug candidate list is partitioned into a num­ber of ranges equal to the number of threads 
and each thread is assigned one of these ranges. For ex­ample, when three threads are issued per library, 
the input drug candidate list is divided into three parti­tions and each of these partitions is assigned 
to one thread. The number of threads in the application varies from one per library to four per library. 
These versions of the applications are denoted HV1 to HV4, Fig. 4. Performance of HV2 with varying numbers 
of consec­utive drug candidate IDs in the drug candidate list. respectively. Increasing the number of 
threads increases the de­gree of parallelism. However, increasing the number of threads beyond a threshold 
value can also lead to resource contention which can in turn lead to reduced performance. The optimal 
number of threads is ap­plication speci.c because it depends on the number of computations and number 
of I/O accesses in each thread. In the remainder of this paper we explore this trade-o.. The performance 
is measured as follows: number of descriptor values retrieved 100 × Execution time in seconds A normalization 
factor of 100 was selected because the smallest computational model contains 100 de­scriptors. Figures 
3, 4, 5 and 6 show the performance of HV1 through HV4 for sequential accesses. Simi­larly, .gures 7, 
8, 9 and 10 show the performance of these applications for random accesses. In each .gure, and for each 
database instance (350,000; 700,000 and 1,400,000), three experiments are conducted. In the .rst experiment, 
the number of descriptors in the input descriptor list is 100 and the number of drug candidates in the 
input drug can­didate list is 10,000. In the second experiment, the number of drug candidates is raised 
to 50,000. In the third experiment, the number of descriptors is 500 and the input drug candidate list 
contains 10,000 drug candidates. The percentage on each bar rep­resents the percentage change in performance 
com­pared to the database instance with 350,000 drug candidates. For the input drug candidate list with 
consecu­tive IDs (.gures 3, 4, 5 and 6), the performance of  Fig. 6. Performance of HV4 with varying 
numbers of con­ secutive drug candidate IDs in the input drug candidate list. the applications HV1 through 
HV4 increases when the number of descriptors increases. Furthermore, in each of these cases, the performance 
of the database with 1,400,000 drug candidates is consistently lower than the other two database instances. 
Additionally, for the large size database, increasing the number of threads results in a lower performance 
for sequen­tial accesses. For example, the throughput for the 1,400,000 drug candidate database is above 
600 for HV1 (Figure 3) and it is below 400 for HV4 (Fig­ure 6) when the input list contains 100 descriptors 
and 10,000 drug candidates. This behavior is more prominent for small descriptor lists. Figures 7, 8, 
9 and 10 show the throughput asso­ciated with random access to the database. As in Fig. 8. Performance 
of HV2 with varying numbers of random drug candidate IDs in the input drug candidate list. the case of 
the consecutive access to the database, this throughput also increases when the number of requested descriptors 
increases. This trend is due to the fact that most of the libraries are in AIR format. In this format, 
descriptors from a given library are stored in the same record on disk. If multiple de­scriptor values 
are needed from a given library for a drug candidate, the AIR format reduces the amount of data that 
has to be fetched from disk. Increas­ing the number of requested descriptors increases the likelihood 
that more than one descriptor will be re­trieved from the same library. Additionally, .gures 7, 8, 9 
and 10 show that the throughput decreases as the number of threads per library increases. Comparing .gures 
3, 4, 5 and 6 with .gures 7, 8, 9 and 10, shows that higher throughput is obtained for sequential accesses. 
In general, applying the com­putational model, which requires sequential access to the database, is more 
e.cient than building the com­putational model which requires random access to the database. Also, the 
application favors computational models with more descriptors.  IV. High-End versus Mid-Range SMPs The 
E10000TM used for the experiments of the pre­vious section is a high-end SMP. We repeated some of these 
experiments on an E3000TM , a mid-range SMP, with the con.guration shown in Table V. Figure 11 shows 
the throughput of HV1 through HV3 running on the E10000TM and the E3000TM with 10,000 consecutive drug 
candidates and 100 de­scriptors. As opposed to Figure 11, random drug decreases for increasing number 
of threads. In order to explain this behavior, several system parameters were monitored during execution, 
includ­ing the number of context switches and the portion of time running in user mode with some process 
waiting for I/O. The value of this latter parameter, shown in Table VI, explains the di.erence between 
the consec­utive access and the random access behavior for the E3000TM . This parameter will be denoted 
by WIO in the remainder of this paper. Table VI shows that as the number of threads increases, WIO decreases 
slightly for consecutive accesses and it increases for random accesses. In the sequential access case, 
requests for I/O from multiple threads can be consolidated because of the spatial locality properties 
of the data on-disk. Con­solidating requests for I/O from multiple threads in the random access case 
is often not possible because the target data is randomly distributed across the database. Thus, increasing 
the number of threads  Fig. 12. Performance of application on the E10000TM and E3000TM when the input 
drug candidate list includes 10,000 random drug candidate IDs and the input descrip­tor list includes 
100 descriptors. increases the mismatch between the degree of paral­lelism in the application and the 
degree of I/O paral­lelism available in the machine. E.cient disk access mechanisms can hide this mismatch 
for sequential ac­cesses but not for random accesses to the database. Contention for I/O resources in 
this latter case can be alleviated by increasing the number of disk arrays at­tached to the E3000TM . 
The same behavior was not observed for the E10000TM because the database for this machine was distributed 
across twelve disk ar­rays. When the load increases to 50,000 drug candidates, both the sequential and 
random access have higher throughput for the E10000TM . This is also true for the E3000TM in the random 
access case. The ex­ception to this trend is for the E3000TM during se­quential access to the database. 
The 10,000 consec­utive drug candidates case (Figure 11, E3000) has higher throughput than the 50,000 
drug candidates case (Figure 13, E3000) for HV1, HV2 and HV3. This observation can be correlated with 
the data of Table VI. For the consecutive case (rows 1 and 3), WIO increases as the load increases. For 
the random case (rows 2 and 4), WIO decreases as the load increases. This is due to the fact that in 
the sequential access case, the percentage of the data retrieved from disk that is needed by the application 
is high. Increasing the load will increase the amount of data retrieved, Access Input size HV1 HV2 HV3 
consecutive random consecutive random 10,000 10,000 50,000 50,000 6.43 14.18 7.73 6.64 5.57 64.23 7.31 
11.44 4.67 84.97 7.03 19.52 TABLE VI Portion of the time running in user mode with some process waiting 
for I/O. The reported numbers are averages across the four processors in the E3000TM . The input size 
reflects the number of drug candidates in the input list. The access type indicates whether these candidates 
have consecutive IDs or random IDs. but it will not change the percentage of the data re­trieved from 
disk that is needed by the application. In the random access case, this percentage increases as the size 
of the load increases. When evaluating the impact of increasing the num­ber of threads on di.erent load 
sizes, we can make the following observations. For the sequential ac­cess and 50,000 drug candidates 
case (.gures 13), the throughput increases as the number of threads increases. This is similar to the 
trend in Figure 11. However, in the case of the random access to the database, the 10,000 (Figure 12) 
and the 50,000 (Figure 14) drug candidates input lists yield di.er­ent throughput trends. In particular, 
the throughput for the E3000TM decreases as the number of threads increases for the input list with 10,000 
drug candi­dates. For the 50,000 drug candidates input list, the throughput remains nearly the same as 
the number of threads increases. This is the result of di.erent I/O demands. For the .rst case, WIO (Table 
VI, second row) increases sharply as the number of threads in­creases. In the second case, the di.erences 
in WIO (Table VI, third row) among HV1, HV2 and HV3 are small, thus explaining the nearly equal through­put 
for these three applications. V. Related Work Scalability issues in parallel databases have been addressed 
in several previous studies [6], [3], [7]. These studies cover the three main parallel comput­ing technologies, 
namely SMP, MPP, and Cluster. In [6] it was noted that highly-parallel, shared-nothing architecture, 
MPPs are more scalable than SMPs for database applications. However, in [3] and [7] it was shown that 
SMPs are more favorable to data ware­house applications than MPPs because SMPs do not require physical 
partition of the database instance across di.erent processors. Furthermore, currently several SMPs bene.t 
from high bandwidth inter­connection among processors, which reduces the com­munication bottleneck previously 
observed in these machines. In this paper we show that the perfor­mance advantage of SMPs can be further 
increased if the degree of parallelism in the application can be tuned to a speci.c type of access, database 
instance size, and machine size. In [8], the performance of database applications was investigated in 
the context of an SMP ma­chine with an Online Transaction Processing (OLTP) workload. The characteristics 
of an OLTP workload are di.erent from the characteristics of the driving application used in this paper. 
The pharmaceutical drug database application falls under the category of Decision Support Systems (DSS). 
An OLTP system is usually characterized by a large number of small transactions. In contrast, decision 
support systems have fewer numbers of queries. Furthermore, these queries tend to be large and tend to 
access many records in the database [9]. The impact of architectural features of modern processors on 
the performance of Database Manage­ment System (DBMS) was studied in [10]. By moni­toring the performance 
of a single processor machine at the instruction level, the authors of [10] found that second level data 
cache stalls are responsible for a major portion of the query execution time. Perfor­mance issues as 
they relate to data warehouses on distributed memory processors were explored in [11]. The study conducted 
in this paper extends [10] and [11] by focusing on the importance of tuning the de­gree of parallelism 
in database applications running on SMP machines. VI. Conclusions In this paper we used a pharmaceutical 
applica­tion to show that the characteristics of the data and the type of access of a set of emerging 
cheminformat­ics and bioinformatics applications can dictate the performance of the application on a 
given machine. These characteristics include heterogeneous, dynamic and massive. The types of accesses 
are random or se­quential. We established that the degree of exploited parallelism should be tuned to 
avoid I/O contention especially for a random access to the database. Addi­tionally, we showed that the 
optimal degree of paral­lelism that should be exploited is machine speci.c. Fewer threads should be spawned 
on a mid-range SMP than on a high-end SMP, particularly for ran­dom accesses to the database. Furthermore, 
because of spatial locality, the sequential access throughput is less sensitive to an increase in the 
number of threads. In conclusion, optimal performance can be ob­tained by 1) using the appropriate data 
represen­tation in order to overcome the impact of the het­erogeneous data on performance, and 2) selecting 
a new degree of parallelism as the database instance increases or decreases in order to reduce the impact 
of the dynamic and massive data on performance. Additionally, as the application migrates from one SMP 
to another, the degree of parallelism should be tuned to the new machine in order to avoid loss of performance. 
Acknowledgment The authors would like to thank the engineers at Sun Microsystems who assisted with the 
experi­ments presented in this paper. Special thanks goes to Shirley Penman (Sun Microsystems benchmark 
cen­ter, Menlo Park, CA) for providing us with insights into the results of the experiments and to Teresa 
Ray (Sun Microsystems, Indianapolis) for her help with preparing the machines. This research was supported 
in part by Eli Lilly &#38; Co, the Purdue School of Engineering &#38; Technology, and the Purdue School 
of Science at Indianapolis. References [1] Wilkinson, B. and Allen, M. Parallel Programming. Pren­tice 
Hall, 1999. [2] Liu, Y., Ben Miled, Z., Bukhres, O., Bem, M., Jones, R., and Oppelt, R. E.cient Schema 
Design for a Pharma­cutical Data Repository. Proceedings of the 13th IEEE-CBMS, 2000. [3] Charlesworth, 
A. STARFIRE: Extending the SMP En­velope. IEEE MICRO, 1998. [4] Lane, P. Oracle8. Oracle Corporation, 
December 1997. [5] Locke, P. Oracle Call Interface : Programmer s Guide. Oracle Corporation, March 1999. 
[6] DeWitt, D. and Gray, J. Parallel Database System: The future of high performance database systems. 
Communi­cation of the ACM, 1992. [7] Papadopoulos, G. Mainstream Parallelism: Taking Sides on the SMP/MPP/Cluster 
Debate. Proceedings of the 1st European Conference on Parallel Processing, 1995. [8] Keeton, K., Patterson, 
D. A., He, Y. Q., Raphael, R. C., and Baker, W. E. Performance Characterization of a Quad Pentium Pro 
SMP Using OLTP Workloads. Pro­ceedings of the 25th International Symposium on Com­puter Architecture, 
1998. [9] Chauduri, S. and Dayal, U. An overview of data ware­house and OLAP technology. SIGMOD Record, 
1997. [10] Ailamaki, A. G., DeWitt, D. J., Hill, M. D., and Wood, D. A. DBMSs on modern processors: Where 
does time go? Proceedings of the 25th International Conference on Very Large Data Bases, 1999. [11] Datta, 
A., Moon, B., and Thomas, H. A Case for Paral­lelism in Data Warehouse and OLAP. 9th International Workshop 
on Database and Expert Systems Applications, 1998. 
			