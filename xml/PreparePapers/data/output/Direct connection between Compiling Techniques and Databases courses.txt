
 DIRECT CONNECTION BETWEEN COMPILING TECNNIOUES AND DATABASES COURSES Nadia Thalmann Facult6 des Sciences 
de l'Administration Universit~ Laval QuEbec, Canada I.-INTRODUCTION Two of the most demanding subjects 
in a Computer Science Curriculum are Compiling Techniques and Databases. In both courses, a major problem 
is: what should be the main project in the laboratory? For the course on Compiling Techniques, we do 
not quite agree with Daley who said (1): "The implementation of a language trans- lator is a project 
which can be notoriously time-consuming leaving little time for theoretical study". Since 1974, we have 
had students at various universities write compilers (2) in such a course. In each case, a complete compiler 
has been imple- mented. In this manner, students have developed their own compilers and have really learned 
how to put the theory into practice. During this academic year, we have tried to establish a direct connec-tion 
between the Compiling Techniques Course and the Databases Course because both can be selectively chosen 
by the same students. In the Databases course, it seems to us, as to other authors (3), that it is necessary 
for students to build a small database. But we had the following problem to solve: with which database 
system? We chose a relational Database Management System (DBMS) because o~ its numerous merits (4). Therefore, 
in the Compiling Techniques Course, students implemented a small relational language and in the Databases 
Course, students used this language to query a database which they had implemented. The avail- ability 
of such a language frees the programmer from worrying about how the data structures are implemented and 
what algorithms are operating on the stored data. Students in the Compiling Tech- niques ~ourse have 
to be concerned about these considerations, but not those in the Databases Course. Furthermore, this 
approach results in a language whic~ shows the influence of the relational approach in language design 
(5,6). This paper is divided into three parts: first, we outline the content of each course and the relationship 
existing between them; secondly, we analyse the criteria for language selection with Daniel Thalmann 
D6partement d'Informatique et de Recherche Op~rationnelle Universit~ de MontrEal MontrEal, Canada regards 
to both courses (also with respect to methodology and to structured programming); third, we discuss the 
language and illustrate it using some examples. 2o-THE COMPILING TECHNIQUES COURSE The first goal of 
our Compiling Techniques Course (7) is to have the students write a compiler. For each topic, theoretical 
material is introduced, but the majority of time is devoted to discussing algorithms. These algorithms 
have been introduced in Pascal (8,9); some of them have been translated from Algol 60 or PL/I, others 
are original ones. For some algorithms, more emphasis is placed on the clarity than on the efficiency. 
Major topics presented in this course include the followina fundamental elements of compiling theory: 
- lexical analysis -syntactic analysis -code generation -optimization -error recovery Methods of syntactic 
analysis are presented in two groups: top-down and bottom-up methods. Since a symbol table is necessary 
for each compiler, we study various access methods and the problems associated with local variables. 
In order to discuss code generation, we introduce an assembly language for a hypothetical computer. In 
addition to these topics, two other fundamental con-cepts are discussed in the course: the design and 
implementation of data struc-tures and subprograms. We think that the links between syntactic analysis 
and code generation are very interesting in the case of arithmetic expressions, so we concentrate on 
this topic. Because of its importance, we also discuss in detail various algorithms used in code opti- 
mization. However, we emphasize the danger of these optimizations in the sense that they should not modify 
the meaning of the source program. The error 131 handling at each level (lexical, syntactic, semantic 
and execution) is also presented. Due to the evolution of compilers written in high level languages, 
we devote several class sessions to explaining the port-ability of compilers and various bootstrap-ping 
techniques. The language needs to be "gotoless", because of the well-known reasons cited by Dijkstra 
(19) and others (20,21) and because it is much easier for the algorithms of code optimization (22). 5o-WHAT 
GUIDELINES DO WE USE TO SELECT A LANGUAGE FOR THE DATABASES COURSE? 3.-THE DATABASES COURSE We believe 
that an increasingly important aspect of commercial data processing activities is Database Management 
System (DBMS). The DBMS world often seems very confusing because of the variety of options available 
to implement such systems. However, most authors (IO,ll,]2) consider three general database models:. 
i) the hierarchical model ii) the network model iii) the relational model The major part of our course 
(13) concen- trates on presenting these models and systems based on them: IMS (14) and SYSTEM 2000 (15) 
for the hierarchical model, SOCRATE (16) and CODASYL (17) for the network model and ALPHA (18) for the 
relational model. On discussing the relational model, we present the two fundamental approaches: relational 
algebra and relational calculus. We also study more general problems in the DBMS. For instance, we discuss 
the very important problem of data independence and the advantages of the concept of schemas and sub-schemas. 
Problems of database integrity and security are also examined at the end of the course. Having covered 
all these topics, we feel the student has a solid base with which he/she can design and implement a database. 
4.-WHAT GUIDELINES DO WE USE TO SELECT A LANGUAGE FOR THE COMPILING TECHNIQUES COURSE? We think it is 
better to define a language in a Compiling Course rather than trying to compile an existing one, since 
the process of defining a language is an important learning experience for the students. We have selected 
a type LL (1) language because it is easy to modify plus the parser can be written quickly. Our goal 
is the following: the major topics presented in the course must be practiced in the laboratory° That 
means that the language has to include the following basic features: i) data types ii) data structures 
iii) control statements iv) expressions to optimize The Databases Course is the second part of a Management 
Information System Course given at the University of Montr6alo The two parts are: i) Design and Analysis 
of Information Systems ii) Introduction to Database Concepts In the methodology of such a course, it 
is difficult to build a complete small data-base in a limited period of time. Furthermore, existing systems 
such as IMS ~r CODASYL are very complex, and we think it is better for the students to work with a small 
system if this system is based on the relational approach. Therefore, it is very important for us to 
define a language with regards to the concepts of structured programming (23). Moreover, it is essential 
to have very quick access to data with simple requests. So the criteria used in designing the query language 
were the following: i) relational model ii) good control statements iii) data types iv) very simple requests 
v) no machine-dependence vi) performance 6.-WHAT FEATURES MUST A GOOD LANGUAGE POSSESS? 6.1 Scalar data 
types A data ~ defines the set of values w~h may be assumed by a variable or an expression. A scalar 
data type is an unstructured data type or ~'ic type such an integer or real. Good program- ming requires 
basic types and a method to construct more complicated types. This point is very fundamental, e.g. when 
we write a function to calculate the cubic root of a real number, it is necessary to check if the actual 
parameter is not a character. 6.2 Data Structures Data Structures (24,25) can be definers conglomerates 
of component values of constituent types. The wealth of a programming language can be measured by the 
quality of its data structures. The choice of data structures has to be scrupulous with consideration 
being given to the goal of the language and the computer size (26). 6.3 Control Statements 7.4 Data 
Structures It is generally admitted (23) that good control statements share the property of having a 
single entry and a single exit. 7.-THE CHOICE In this section we shall discuss the language features 
considering the criteria for both courses° 7.1 DDL and DML In the methodology of the Databases Course, 
it is very important to show the differences between the data description language (DDL) and the data 
manipulation language (DML). In the Compiling Tech- niques Course, the same aspect is devel-oped. The 
data description is the best way of building a symbol table while the statements only are the source 
of code generation. Consequently, in our language, we have decided to separate data descrip: tion from 
data manipulation. 7.2 Data independence In the Databases Course, we emphasize the concept of data independence. 
In the Compiling Techniques Course, it is shown that it is possible.to define and to compile high-level 
languages which have no machine-dependent features. The code generation is in no way more difficult to 
realize and we use a top-down approach to separate the machine-dependent part from the other compiler 
parts. Conse-quently, our language is a high level language with no machine-dependent features 7.3 Data 
Types Data type validity has to be presented in both courses. In the Compiling Tech- niques Course, we 
emphasize the semantic analysis while in the Databases Course it is shown that for each request, the 
DBMS checks the data type validity by referring to the schema. We decided on the following data types: 
integer, real, boolean and alpha n, where alpha is a st~'~ng type of n characters maximum. IF SRLRRV 
~ 10000. THEN TRX := ELSE TRX := LOOP RERD NRNE7 N := N+I7 Ek'IT-WHEN N > P~INLIN~ SET-PERS := SET-PERS 
UNION END-LOOP~ We have noticed that the relational model is the most popular model for the students 
in the Databases Course. In the Compiling Techniques Course, the data structures implementation is an 
important part. Although we devote a few class sessions to explaining the array imple-mentation, students 
have much more pleasure to implement relations because the problem is not solved completely. We are ready 
to accept their propositions and to discuss them. In conclusion, the basic data structure of our language 
is the relation. Each attribute of the relation has one of the four basis types: e.g. relations person 
(name :alpha 15; age :integer; married :boolean; salary :real); We have also introduced sets in a more 
general way than in PASCAL. Set elements can be of alpha type and their size is not limited. e.g. colors 
:= ['RED', 'YELLOW', 'GREEN', 'BLUE'] ;  Such sets are very useful in a query language because they 
free students from the hard manipulation of quantifiers. The usual languages have not this extended set 
structure and the implementation allows the students in the Compiling Techniques Course to be creative. 
 7.5 Control Statements We have chosen to define and imple- ment four powerful control statements. These 
are very similar to those in the PASCAL language, because students in both courses have got a strong 
background in this language. Let us explain the control statements by the means of the following examples: 
150. 0.015*SRLRR~ END-IF~ CNRNE] FOR I := I TO 58 DO RERD RNOUNT.; TOTRL-DUE := TOTRL-DUE + RNOUNT" 
END-FOR~ CHOICE RGE > 17 RND ROE < 22 , HOLIDRVS ,= 147 BENEFITS ,= G.I~SRLRR~ END7 ROE } 21RND RGE ~ 
42 : HOLIDR~'S := 217 BENEFITS := 0.5*SRLRR~ END~ ROE 3 41RND RGE < 62 : HOLIDRVS == 287 BENEFITS := 
O.8~SRLRRY END ELSE IqRITE ~ERROR: ROE OUT OF RRNGE ~ END-CHOICE7  7.6 Re~uests~ The best way to demonstrate 
the simplicity of the requests is to give an example. We have chosen a department store database which 
was presented in a paper by Chamberlain (27). This database consists of three relations: i) The "employee" 
relation giving for each employee his name, salary, manager's name and department. ii) The "sales" relation 
giving the dollar volume of each item sold by each department. iii) The "location" relation giving the 
floor on which each depart- ment is located. With data types, the three relations can be defined as: 
RELRTION5 ENPLOVEE (NRME : RLPHR 15~ SRLRRY : INTEGER~ MRNRGER, DEPRRTMENT : RLPHR 15> REPRESENTED BY 
E, El, E2J SRLES (DEPRRTNENT~ ITEM : RLPHR 15J VOLUME : INTEGER> REPRESENTED BY 5~ LOCRTION (DEPRRTMENT~ 
FLOOR : INTEGER> REPRESENTED BV L~ E,EI, E2, S and L are tuple identifiers, Here are three examples: 
representing the relations. i) Find the SMITH'S manager's salary. WITH El, E2 SELECT I C EI.NRME = ~SMITH 
~ RND Ei.NRNRGER = E2.NRME> HRITE E2.SRLRRV~ less than $I0,000.00 and employees ii) Find among the third 
floor who have a salary greater thanemployees those who have a salary $15,OOOoOO LESS ,= [3~ MORE := 
E3; WITH E, L SELECT RLL (E. DEPRRTMENT = L.DEPRRTMENT RND L.FLOOR = 3) IF E:SRLRRV < leO00 THEN LESS 
:= LESS UNION [E. NRME3 ELSE iF E.SRLRRV > 15GOG THEN MORE := MORE UNION [E.NRME] END-IF END-IF~ WRITE 
LESS~WRITE ~ ~ WRITE MORE. iii) Find the total dollar volume of the "TOY" department. TOTRL ~= 8~ WITH 
S SELECT RLL  (S. DEPRRTMENT = "TOY"> TOTRL : = TOTRL + S. VOLUME WRITE TOTRL~ 8o-CONCLUSION relations 
implementation in a relational database system? In the Compiling Tech- We think that our approach has 
been niques Course or in the Databases Course?" successful because we have tried to get To answer this 
question, we have tried to off the usual partitions existing between make a link between both courses. 
As the Compiling Techniques Course and the conclusion, we have observed a greater Databases Course. Our 
starting-point motivation of students in the Compilinghas been the following question: "In Techniques 
Course to work on a "real" which course do we have to introduce the project which will be used. Then, 
these students feel very interested to pursue their study in the field of databases. This is important 
because we do need people who have received a large background on the numerous problems existing in databases 
 implementation and also who know how to solve them. Moreover, students are conscious that the realization 
of large projects in computer science requires techniques which are presented in different courses and 
this is the fundamental advantage of interdisciplinarity. 9.-ACKNOWLEDGEMENTS The authors would like 
to thank Professor R. Aiken of the University of Tennessee for his assistance in preparing this paper. 
References (1) Daley, J. S. "A Laboratory Approach to Teaching Compiler Writing" Proc. SIGCSE/CSA Techn. 
Symp., Detroit, Sigcse Bulletin, lO (1978)I, pp. 19-21 (2) Thalmann, D. and Levrat, B. "Un semestre 
pour Ecrire un Compilateur: RALBOL" Proc. IFIP 75, Computers in Education, Marseilles, North-Holland, 
1975, pp. 561-566. (3) Lochovsky, F. U. and Tsichritzis,  D. C, "Teaching Data Management Using an 
Educational Data Base Management system", Proc. SIGCSE/CSA Techn. Symp., Detroit, Sigcse Bulletin, lO(1978)l,pp. 
65-69. (4) Codd, E. F. "A Relational Model of Data for Large Shared Data Banks" Comm. ACM,13 (1970)6,pp. 
377-387. (5) Thalmann, D. and Thalmann,  N. "L'Apport du Calcul Relationnel dans la D~finition et l'Implantation 
des Langages", Proc. Canadian Computer Conf., CIPS Session '78, Edmonton. (6) Schmidt, J. W. "Some High 
Level Constructs for Data of Type Relation", ACM, TODS, 2 (1977) 3, pp. 247-261.  (7) Thalmann, D. "La 
Construction des Compilateurs", Vol. I-2, Swiss Federal Institute of Technology, Lausanne, 1976.  (8) 
Jensen, K. and Wirth, N. "Pascal-User Manual and Report", Springer-Verlag, 1976.  (9) Thalmann, N. and 
Thalmann, D. "The Use of Pascal as a Teaching Tool in Introductory, Intermediate and Advanced Computer 
Science Courses", Proc. SIGCSE/CSA Techn. Symp., Detroit, Sigcse Bulletin, lO (1978)I, pp. 277-281. 
 (lO) Adida. M. and Delobel, C. "Les ModUles Relati~nnels de Bases de Donn~es", IRIA, 1976. (ll) Date, 
C. J. "An Introduction to Database Systems", Addison-Wesley, 1975. (12) Wiederhold, G. "Database Design", 
McGraw-Hill, 1977. (13) Thalmann, N. "Etude Comparative des Syst~mes de Gestion de Bases de Donn~es", 
Document de Travail #99., DEpart-ment d'Informatique et de Recherche Op~ra- tionnelle, Universit~ de 
MontrEal, 1978 (14) IBM "IBM/360 Applications Descrip-tion Manual", White Plains, N. Y., GH-20-0765. 
 (15) "System 2000 General Information Manual", MRI Systems Corp., Austin, Texas, 1972. (16) Abrial, 
J. R. "Projet Socrate", Univ. Scientifique et M~dicale de Grenoble, 1972. (17) CODASYL, "Data Base TASK 
Group Report", ACM, N.Y., 1971. (18) Codd, E. F. "A Data Base Sublanguage Founded on the Relational 
Calculus", Proc. 1971 ACM SIGFIDET Workshop on Data Description, Access and Oontrol. (19) Dijkstra, 
E. Wo "Goto Statement Considered Harmful", Comm. ACM, II(1968)3, pp. 147-148. (20) Wulf, W. A. "A Case 
Against the GOTO", Proc. ACM Annual Conf., Boston, 1972, pp. 791-797. (21) Clint, M. and Hoare, C. A. 
R. "Program Proving: Jumps and Functions", Acta Informatica, I(1972), pp. 214-224. (22) Zelkowitz, M. 
V. and Bail, W. G. "Optimization of Structured Programs", Software-Practice and Experience, 4(1974), 
pp. 51-57. (23) Dijkstra,.E.W. "Notes=on Structured Programming u , N. Y., Academic Press, 1972o (24) 
Hoare, C. A. R. "Notes on Data Structuring", N. Y., Academic Press, 1972. (25) Wirth, N. "Algorithms 
+ Data Structures = Programs", Prentice-Hall, 1976.  (26) Thalmann, D. "Data Structures in Mini-and 
Microcomputers", Proc. MIMI 77, Montreal, IEEE Press, 1978  (27) Chamberlain, D. D. and al "Views, Authorization 
and Locking in a Relational Data Base System", Proc. National Computer Conf. 1975, pp. 425-430.  
			