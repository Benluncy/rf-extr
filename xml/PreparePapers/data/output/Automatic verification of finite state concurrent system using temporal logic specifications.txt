
 Permission to make digital or hard copies of part or all of this work or personal or classroom use is 
granted without fee provided that copies are not made or distributed for profit or commercial advantage 
and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, 
to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee. &#38;#169; 
1983 ACM 0-89791-090-7 $5.00 the path such that f2 holds at tie last state of the prefix and fl holds 
at all other states along the prefix. We define the semantics of CTL formulae with respect to a labeled 
state-transition graph. Formally, a CTL structure is a triple M = (S, R, P) where 1. S is a finite set 
of states. 2. R is a binary relation on S(R L S x S) which gives the possible transitions between swtes 
and must be total, 3. P is an assignment of atomic propositions to states i.e.  P: S+2AP. A path is 
an infinite sequence of states (s@ Sl, ST...) such that Vi [(s1, Si ~ ~) c R]. For any strucwr e M = 
6.fLpJ and State SO(S, there is an irrfifii~e cornpu(ation tree with root labeled So such that s --+ 
t is an arc in the tree iff (sjt) ~ R. A structure The corresponding tree for start state SO /sO\ s, 
S.2 II /s0\,2 [0 . .. .  Figure 21 We use the standard notation to indicate truth in a structure: 
M, so t= f means that formula f holds at state so in structure M, When the structure M is understood, 
we simply write So ~ f. The relation # is defined inductively as follows: Sol=p iff p c P(so). Sok=+ 
 iff not(so t= f). So+fl A :2 iff so 1= fland so k= fy so+ Axfl iff for all srates t such that (sot) 
6 R, t * fl. Sok= Exfl iff for some state t such that (swt) < R, t 1= fr sob= A[fl VTf2] iff for all 
paths (Sv sl,...), ~i[i >0 A Sik= f2A Vj[O <j < i-+sj 1= fill. sol= E [fl U f2] iff for some path (sO 
su...), ~i[i 20 A Si + f2A V JIOSj < i+si + fl]]. 3. Model Checker Assume that we wish to determine whether 
formula f. is true in the finite structure M = (S, R, P). We design our algorithm so that when it tinishes, 
each state will be labelled with the set of subformulae true in the state. We let label(s) denote this 
set for states. Consequently, M,s 1= f iff f c label(s) at termination. In order to explain our algorithm 
we first consider the case in which each state is currently Iabelled with the immediate subformulae of 
f which are true in that state. We will use the following primitives for manipulating formulas and accessing 
the labels associated with states: argl(f) and arg2(~ give the first and second arguments of a two argument 
formula f such as A[fl U f2].  labelled (s, f) will return true (false) if states is (is not) Iabelled 
with formula f.  add-label(s, f) adds formula f to the current label of states.  Our state label]ing 
algorithm (procedure Iabelgraph (f)) must be able to handle seven cases depending OH wncther f is atomic 
or has one of the following forms: -fl, fl A f,, AXfl, EXfl> . A[fl U fJ, or E[fl U f2]. We will only 
consider the case in which f = A[fl U fl] here since all of the other cases are either straightforward 
or similar. For the case f = A[fl U f2] our algorithm uses a deuth first search to explore the state 
graph. The bit array marked[l: nstates] is used to indicate which states have been visited by the search 
algorithm. The algorithm also uses a stack ST to keep track of those states which require additional 
processing before the truth or falsify off can be determined. The boolean procedure stacked(s) will determine 
(in constant true) whether states is currently on the stack ST. begin ST: = empty_stack; for alls e S 
do marked(s):= false; L: foralls6Sdo if Y marked(s) then au(~s,b) end The recursive procedure au(~s,b) 
performs the search for formula f starting from state s. When au terminates, the boolean result parameter 
b will be set to true iffs k= f. The annotated code for procedure au is shown below: procedure au(f,s,b) 
begin {Ifs is marked and stacked, return false (see lemma 3.1). If S is already labelled wifi f, men 
return me. o~e~ise, if s is marked but neither stacked nor labelled, then return fafse.} if marked(s) 
then begin if stacked(s) then begin b:= false; return end; if labelled(s,f) then begin b:=tme; return 
end; b:= falsq return end: {Mark states as visited. Let f = A[fl U f2]. If f2 is tme at s, f is true 
ats; so labels with f and return true. If fl is not true ats, then f is not true ats; so return false. 
} marked(s): = true; if labelled(s,arg2( f)) then begin add_label(s,f); b:= true; return  end else 
if Ylabelled(s,argl( fl) then begin b : = false; return end; {Push s on stack ST. Check to sce if f 
is true at afl successor states ofs. If there is some successor state S1 at which f is false, then f 
is false at s also; hence remove s from the suck and return false. If f is true for all successor states, 
then f is true ats; so removes from the stack, labels with t and return true.} push(s,ST); for all S1 
c successors(s) do begin au (f,sl,bl); if lbl then begin pop(ST); b:= fals~ return end end; pop(ST~ 
add_label(s,~, b:= true; return  end of procedure au. To establish the correctness of the algorithm 
we must show that Vs clabelled (s,fl H sl=f] holds on termination. Witbout loss of generality we consider 
only the case in which f has the form A[fl U f2]. We further assume that the states are already correctly 
labelled with the subforrnulae fl and fz The first step in the proof is an induction on depth of recursion 
for the procedure au, Let I be the conjunction of the following eight assertions IL M states are correctly 
Iahclled with the subformulae fl and f~: Vs[labelled(s,f,) Hs K f,] for i = 1.2. 12. The states on the 
stack form a path in the state graph: Vi [l<i< length(ST) -+ (ST(i), S I (i+ 1)) c R]. 13. The current 
state parameter of au is a descendant of the state orI top of the stack: (ToP(ST), s) c R. 14. fl A 
Y f2 holds at each state on the stack :  vi. [ ].~ i < lerrgth(ST) -+ ST(i) &#38; fl A 1 ~]. 15. Every 
state on the stack is marked but unlabeled : Vi ~ lSiS@ltil(sT) ~ marked(ST(i)) A -la oclIed( ST(i), 
f) ].  16. If a state is labelled with f, then it also marked and f is true in that state: Vs [Iabelled(s,f) 
~ marked (s) As k= f]. 17. If a state is marked but neither labellcd with f nor on the stack, then f 
must be ~alse in that state ~s[markcd(s) A ~ labelled(s,~ A 7 ~i[ l<iSlength(ST) As = ST[i]] -+ sI= -f]. 
 18. STO records the contents of the stack: ST = STm  We claim that if 1 holds before execution of au(f, 
s, b), then I will also hold on termination of au; Moreover, the boolean result parameter b will be true 
iff f holds in state s. In the standard Hoare triple notation for partial correctness assertions the 
inductive hypothesis would be {1} au (f,s, b) {I A (b-s &#38; ~}. Once the inductive hypothesis is proved, 
the correctness of our algorithm is easily established. If the stack is empty before the call on au, 
we can deduce that both of the following conditions must hold: a. ys [marked(s) -[labelled(s, f) -+ += 
~] (from 11). b. V S [marked(s) --i [mlabclled(s,f) -+ s~~f I] (from 12, 13).  Itfollows that Vs[markcd(s) 
~ [labelled (s, f) w sF= f ]]. Because of the for loop L in the calling program for au, every state will 
eventually be marked. Thus, when loop L terminates Vs[labclled (s, f) H s+f] must hold. F roofhf the 
inductive hypothesis is straightforward but tedious and will be left to the reader. The only tricky ca~t 
cccurs when the state s is marked and on the stack. In tltiis situation the procedure au simply sets 
b to false and returns. To sce chat this is the correct action, we make use of the following observation: 
3.1 Leonna: Suppose there e.yists a path (S1, S2 .... Sm, sk)in ihe slate graphsuch[ha/1Sk smandVi[ 1<ism+ 
si~ -f,], thens, *1 A[fl U f,]. 0 Assuming that the states of the graph are already correctly Iabelled 
with fl, and f2, it is easy to see that the above algorithm requires time O(card(S) + card(R)). llc time 
spent by one call of procedure au excluding the time spent in recursive calls is a constant plus time 
proportional to the number edges leaving the smte s. Ilus, all calls to au together require time proportional 
to the number of states plus the number of vertices since au is called at most once in any state. Wc 
next show how handle CTL formulas with arbitrary nesting of subformulas. Note that if we write formula 
fin prctix noration and count repetitions, then the number of sobformulae of f is equal to the length 
of f. (The Icngth of f is determined by counting the total number of operands and operators.) We can 
usc this fact to number the subformulae of f. Assume that formula f is assigned the integer i. If f is 
unary i.e. f= (op fl) then we assign the integers i+ 1 through i + lcngth(fl) to the subformulae of fl. 
If f is binary i.e. f = (OP fl f2) then we assign the integem from i + 1 through i + length(fl) to the 
subformulae of fl and i + length(fl) through i + length(fl) + length(f2) to the subformulae of fz Thus, 
in one pass through f we can build two arrays nfll : length(~] and sfll : length(~] where nfii] is the 
im subfortmda off in the above numbering and sfii] is the fist of the numbers assigned to the immediate 
subformulae of the iti formula. For example, if f = (AU (NOT X) (OR Y Z )), then nf and sf are given 
below: nf[l] (AU (NOT X) (OR Y Z)) Sf [1] (2 4) nf[2] (NOT X) Sf [2] (3) nf[3] X Sf [3] nil nf[4] (OR 
Y Z) sf [4] (5 6) nf[5] Y Sf [5] nil nf[6] Z sf [6] nil Given the number of a formula f we can determine 
in constant time the operator off and the number assigned to its arguments. We can also efficiently implement 
the procedures Iabellecf and add_label . We associate with each states a bit array L[s] of size length(f). 
The procedure add_label(s,ti) sets L[s][fi] to true, and the procedure labelled(s,fi) simply returns 
the current value of L[s][fi]. In order to handle an arbitrary CTL formula f we successively apply the 
state labelling algorithm described at the beginning of this section to tic subformulas of f, starting 
with simplest (i.e. highest numbered) and working backwards tot for fi: = length(f) step -1 until 1 do 
labclfiraph (fi); Since each pass through the loop takes time O(sizc(S) we conclude that the entire algorithm 
requires (card(S) j­card(R))). + card(R)), O(lcngth(f) 3.2 Theorem. There is an algorithm for determining 
whether a CTL fivrrrula f is (rue in slates of [he souc!ure M = (S,R, P) which runs in ~ime O(lcngth(f) 
. (card(S) + card(R))). 0 We illustrate ~Ae model checking algorithm by considering a finite state solution 
to the mufzd exclusion problem for two o 7  Fig. 3.20: Globol stote transition graph for two process 
mutuol exclusion problem. Fig. 3.2 b : Global state transition groph ofter termination of model checking 
olgorithm. processes PI and PI In this solution each process is always in one of Lhree regions of code: 
N i rhe Noncritical region, Ti the ~rying region, or Ci the Critical region. A global state transition 
graph for this solution is shown in figure 3.la. Note ~hat we only record transitions between different 
regiotw-of code; moves entirely within the same region are not considered at this level of abstraction. 
In order to establish absence ofs~arva~ion for process 1 we consider the CTL formula Tl + AFCJ or, equivalently, 
lT1 V AFCI, where AFP s A[troe U p] means that p occurs at some point on all execution paths. In this 
case the set of subfonnulae contains -IT1 v AFCl, -ITl, T]. AFCl and Cl. The states of the global transition 
graph will be labelled with these subforcnulae during execution of the model checking algorithm. On tercnina~ion 
every state will be labcllcd with lTI v AJ?C1 as shown in frgurc 3.lb. Thus, wc can conclude that so 
1= AG(T1 a AFCI) where AGP * 1 E[troe U -p] means that p holds globally on all computation paths. lt 
follows that process 1 cannot be prevented from entering its critical region once it has entered its 
trying region. 4. Introducing Fairness into CTL Frequently, in verifying concurrent systems we are only 
interested in the correctness of fair execution sequences. For example, with a sys~em of concurrent processes 
we may wish to consider only those computation sequences in which each process is executed infinitely 
Often. When dealing with network protocols where processes communicate over imperfect (or Iossy) channels 
we may also wish to restrict the set of computation sequences; irr this case the unfair execution sequences 
are those in which a sender Process continuously transmits messages without any reachkg the receiver. 
Since we are considering only finite state swtems, each of these notiol~s of fairness requires that some 
collection of states be repeated infinitely often in every fair computation. It follows from [5] that 
correctness of fair executions cannot be expressed in CTL. In fact, CTL cannot express the property that 
some proposition Q should eventually hold on all fair executions. In order to handle fairness and still 
obtain an efficient model checking algorithm we modify the semantics of CTL. The new logic, which we 
call CTLF, has the same syntax as CTL. But a structure is now a 4-tuple (S, R. P, F) where S, R, P have 
the same meaning as in the case of t3L, and F is a collection of subsets of S i.e. F L 2s. A path p is 
fair iff the following condition holds: for each c E II there are irrjlnitely many instances on p ar 
which some sta/e in c appears. Cfl F has exactly the same semantics as CrL except that all path quantifiers 
range over fair paths. An execution of a system Pr of concurrent processes is some interleaving of the 
execution steps of the individual processes. We can model a system of concurrent processes by a structure 
(S, R, P) and labelling function L:R ~ Pr. S is the set of globsl states of the system, R is the single 
step execution relation of the system, and for each transition in R, L gives the process which caused 
the transition. By duplicating each state in S at most card(Pr) times, we can model the concurrent system 
by a structure (S*, R*, P*, F), where each state in S* is reached by the execution of at most one process, 
and F is a partitioning of S* such that each element in F is the set of states reached by the execution 
of one praess: thus card(F) = card(Pr). The fair paths of the above structure are exactfy the fair execution 
sequences of the system of concurrent processes. A similar approach can be used to model nerwork protocols 
(see section 5), We next extend our model checking algorithm to CTL . We introduce an additional proposition 
Q, which is true at a state iff there is a fair path starting from that state. This can easily be done, 
by obtaining the strongly connected components of the graph denoted by the structure. A strongly connected 
component is fair if it contains at least one state from each Ci in F. We label a state with Q iff there 
is a path from that state to some node of a fair strongly connected component. As usual we design the 
algorithm so that after it terminates each state will be labelled with the sub formulae off. true in 
that state. We consider the two interesting cases where f c sub(fJ and either f = E[g U h] or f = A[g 
U h]. We assume that rhe states have already been labelled with the immediate subforrnulae off by an 
earlier stage of the algorithm. (i) f = E[g U h] : f is true in a state iff the CTL formula ~g U (h A 
Q)] is true in that state, and this can be determined using the CTL model checker. A state s is labeled 
with f iff f is true in that state. (ii) f = A[g U h] : It iseasyto seethat A[g U h] = m(E[Th U (~g A 
qh)] V EG[-dI)). For a states we can easily check ifs != E[=h U (-g A Yh)] using the previous technique. 
To check if s W EG(~h) we use the following procedure. Let CR be the graph corresponding to the above 
structure. From GR eliminate all nodes v such that h c label(v) and let GR be the resultant labeled graph. 
Find all the strongly connected connected components of CTR and mark those which are fair. Ifs is in 
GR and there is a path from s to a fair strongly component of GR then s E= EG(+): otherwise s l== 7 EG(lh). 
As in (i), s is labeled with f iff f is true ins. If n = max(card(S), card(R)), m = length(o and p = 
card(F ), then h can be shown that the above algorithm takes time O(n ~m.p). 5. J&#38;rm the Extended 
Model Checker to Verifv the Alternating Bit Protocol In this section we consider a more complicated example 
to illustrate fair palhs and to show how the Extended Model checking (,Eh4C) system might actually be 
used. The example that we have selected is the Merrradrrg Bit Pro/ocol (ABP) originally proposed in [2]. 
This algorithm consists of two processes, a Sender proces~ and a Receiver process, which ahemate]y exchmrge 
messages. We will assume (as in [11]) that messages from the Sender to the Receiver are da~a messages 
and that messages from the Receiver to the Sender are ackrzowledgmerr~s. We will forther assume that 
each message is encoded so that garbled messages can be detected. Lost messages will be detected by using 
time-outs and will be treated in exactly the same manner as garbled messages (i.e. as error messages). 
Ensuring that each transmitted message is correctly received can be tricky. For example, the acknowledgment 
to a message may be lost. in this case the Sender has no choice but to resend the original message. The 
Rcceivcr must realize that the next data message it rccei} es is a duplicate and should be discarded. 
Additional complications may arise if this message is also garbled or lost. These problems are handled 
in the algorithm of [2] by including with each message a control bit called the alternation bit. In the 
EMC system finite-state concurrent programs are specified in a restricted subset of the CSP programnr 
ing language [7] in which only boolean data types arc permitted and all messages between processes must 
be ~ignak. CSP programs for the Sender and Receiver processes in the A!3P are shown in figures 5.la and 
5.lb. To simulate garbled or lost messages we systematically replace each message transmission statement 
by a (nondeterministic) alternative statement that can potentially send an error message instead of the 
original message. Thus, for example, Receiver ! messO would be replaced by ~roe ~ Receiver ! messo 0 
True ~ Receiver! err] A global state graph is generated from the state machines of the individual CSP 
processes by considering all possible ways in which the transitions of the individual prwesses may be 
interleaved. Since construction of the global state graph is proportional to the product of the sizes 
of the state machines for tie individual processes, various (correctness preserving) heuristics are employed 
to reduce the number of states in the graph. Explicit construction of the globs! state machine can be 
avoided to save space by dynamically rccomputhrg the successors of the current stitc. The global state 
graph for the ABP is shown in the figure 5.2. Once the global state graph has been constructed, the algorithm 
of section 4 can be used to detcrmirrc if the program satisfies its specifications. In the case of the 
ABP we require that every data message that is generated by the Sender process is eventually accepted 
by the Receiver process AG[gen_dmO -+ AX[A[7 (gen_dmO V gen_dml) U acc_dmO]] A AG[gen_dml + AX[A[= (gen_dmO 
v gen_dml) U acc_dml]] This formula is not true of the global state graph shown in figure 5.2 because 
of infinite paths on which a message is lost or garb!ed each time that it is retransmitted. For this 
reason, we consider only those fair paths on which the initial state occurs infinitely often. With this 
restriction the algorithm of section 4 will correctly determine that the state graph of figure 5.3 satisfies 
its specification. As of October 1982, most of the programs that comprise the EMC system have been implemented. 
Theprogram which parses CSP programs and constructs the global state graph is written in a combination 
of C and lisp and is operational. An efficient top­down version of the model checking algorithm of section 
3 has also been implemented and debugged. The extended model checking algorithm of section 4 (which only 
considers fair paths) has been implemented in LISP and is currently being debugged. (Note: dm stands 
for data message; am stands for acknowledgement message.) *[ gen_dmO; RCV ! dmOi *[Rev ? amo + exit; 
L1 Rcv ? aml ~ RCV ! dmO; D RCV T err + RCV ! dmO; 1 gen_dml; RCV ! dml; *[Rm ? ml -exit; u RCV ? amO 
+- RCV ! dml; Figure 5.la: Sender Process (SND) *[ [ SND ? dmO exit; n.. SND ? dml -V SND ! aml; 0 SND 
? err + SND ! aml; 1 acc_dmO; SND ! amo; *[SND ? dml -D exit; IJ ~D ? dmO + SND ! amO; ~D ? err-+SND 
1 amO; acc dml; SND ! ad; 1 Fi?ur. !5.M: Receiver Process (RCV)  gen-dml o occ-dml &#38; Figure 5.2 
Globol sfote transition groph for olternoting bit protocol. . 124 6. Extended Lociics In this section 
we consider Iogics which are more expressive than CTL and investigate their usefulness for automatic 
verification of finite state concurrent systems. CTL severely restricts the type of formula that can 
appear after a path quantifier. In CIT.* wc relax this restriction and allow an arbitrary formula of 
linear time logic to follow a path quantifier, We distinguish two types of formulae in giving the syntax 
of CTI.*: state formulae and path formulae. Any state formulae is a CTL* formula. <state-formula>:: = 
<atomic proposition> I <state-formula> A <state-formtda>l m <state-formula> I E(<parh-formula>) <path-formula>:: 
= <state-formulOl <path-formula> U <path-fonrrulO\ A<path-formula> I <path-formula> A <path-fonnulrO 
I X <path-formula> I F<path-formulb We use the abbreviation Gf for 7F7f and A(f) for lET(f). We interpret 
state formulae over states of a structure and path formulae over paths of a structure in a natural way. 
The truth of a CTL* ?ormula in a state of a structure is inductively defined. A fommla of the form E(<path 
formula>) is true in a state iff there is a path in the structure starting from that state on which the 
path formula is wue. The troth of a path formula is defined in much the same way as for a formula in 
linear temporal logic if we consider all the immediate state -sub formulae as atomic propositions [5]. 
BT* will denote the subset of the above logic in which path formulae only use the F operator. CTL+ will 
denote the subset in which the temporal operators X, U, F are not nested. Fairness can be easily handled 
in CTL*. For example, the following formula asserts that on all fair executions of a concurrent system 
with n processes, R eventually holds: A((GFP1 A GFP2 A ...GFPn) -+ FR) Here Pp P2,...Pn hold in a state 
iff that state is reached by execution of one step of process Pv P2...Pn, respectively. 6.1 Theorem. 
The model checking problem for CTL* is PSPACE-cornplete. El Proof Sketch: Wc wish to determine if the 
CrL* formula f is true in state s of structure M. l,et g be a subformula off of the form E(g ) where 
g is a path formula not containing any path quantifiers. For each such g we introduce an atomic proposition 
Qg. Let f be the formula obtained by replacing each such subformula g in f by Qg. Wc modify M by introducing 
the extra atomic-propositions Qg. Each Qg is true in a state of the modified structure iff g is true 
in the corresponding state in M. The latter problem can bc solved in polynomial space using the algorithm 
given in [13]. f is true at state s in M iff f is true in states in the modified structure. We successively 
repeat the abo},e procedure, each time reducing the depth of nesting of the path quantifiers. It is easily 
seen that the above procedure takes polynomia3 space. Model checking for CrL* isPSPACE-hard because model 
checking for formulas of the form E(g ), where g is free of path quantifiers, is shown to be l%PACE-hard 
in ~ 3]. l 6.2 Theorem. The model checking problem for BT* (r3L*) is both NP-hard and co-NP-hard, and 
is in A:. c! Proof Sketch: The lower bounds follow from the results in [13]. In [13] it was shown that 
the model checking problem for formulas of the form F(g ), where g is free of path quantifiers and uses 
the only temporal operator F, is in NP. Using this result and a procedure like the one in the proof of 
previous theorem it is easily seen that the model checking problem for IIT* is in A;. A similar argument 
can be given for CTL+. 0 We believe that the above complexity results justify our approach in section 
5 where fairness constraints are incorporated into the semantics of the logic in order to obtain a polynomia3­time 
model checking algorithm. 7. Conclusion Much research in protocol verification has attempted to exploit 
the fact that protocols are frequently finite state. For example, irr [15] and [14] (global-state) r-eachabilify 
tree constructions are described which permit mechanical detection of system deadlocks, unspecified message 
receptions, and non-executable process interactions in finite-state protocols. An obvious advantage that 
our approach has over such methods is flexibility; our use of temporal logic provides a uniform notation 
for expressing a wide variety of correctness properties, Furthermore, it is unnecessary to formulate 
protocol specifications as reachability assertions since the model checker can handle both safety and 
liveness properties with equal facility. The use of temporal Ioglc for specifying concurrent systems 
has, of course, been extensively mvestlgated ( [8], [6], [10]). However, most of tlus work requires that 
a proof be constructed in order to show that a program actually meets its specification. Although this 
approach can, in principle, avoid the construction of a global state machine, it is usually necessary 
to consider a large number of possible process interactions when establishing non­interference of processes. 
The possibility of automatically synthesizing finite state concurrent systems from temporal logic specifications 
has been considered in [3] and [9]. But this approach has not been unplemented, and the synthesis algorithms 
have exponential-time complexity in the worst case. Perhaps the research that is most closely related 
to our own is that of Quielle and Sifakis ([11], [12]), who have independentJy developed a system which 
will automatically check that a finite state CSP program satisfies a specification in temporal logic. 
The logical system that is used in [11], is not as expressive as CTL, however, and no attempt is made 
to handle fairness properties. Although fairness is discussed is [12], the approach that is used is much 
different from the one that wc have adopted. Special temporal operators arc introduced for asserting 
that a property must hold on fair paths, but neither a complexity analysis nor an efficient model checking 
algorithm is given for the extended logic. Acknowledemen! The authors wish to acknowledge the help of 
M. Brinn and K. Sorenson in implementing an experimental prototype of tJre system deacribcd in section 
5. References 1. M. Ben-Ari, Z. Manna, A. Pneuli. TheLogico fNextime. ( .Elghrh ACh4 Symposium on Principles 
of Programming Languages, Williamsburg, VA (January 1981),164-176.  2. K.A. Bwtlet.R.A. Scantlebury,P. 
T.Wilkinson. ANoteon Reliable Full-Duplex Transmission o;er Half-Duplex Links. Communications of the 
ACM 12,5 (1969), 260-261.  3. E. M. Clarke, E.A. Emerson. SynrJrcsis of Synchronization Skeletons for 
Branching T]me Temporal Logic. Proceedingsof the Workshop on Logic of Programs,Yorktown-Heights, NY, 
Lecture Notes in Computer Science #131, 1981.  4. E.A. Emerson, E.M. Clarke. Characterizing Properties 
of Parallel Programs as Flxpoirrts. Proceedings of the Seventh Intematinnal Colloquium on Automata, Languages 
and Programming, Lecture Notes in Computer Science #85, 1981.  5. E. A. Emerson, J.Y. Halpcm. Sometimes 
mrd Not Never Revisited: On Branching versus Lmcm Time. POPL83 6. B.T. Hailpem, S. Owlcki. Verify mgNmwork 
Protocols Using Temporal Logic. Tech. Rept.192, Compute rSystcmLaboratory, Stanford Uni~ersity, June, 
1980. 7. C. A. R. Hoarc. CommunicatingS cqucntialP recesses. Commumcallons of [he ACM 21,8 (August 197$3),666-667. 
 8. Z. Manna, A. Pneuli. Verificationo fConcurrentP rograrns: lle Temporal Framework. The CorrecmessP 
i-o/Jemin Computer Sclence(R.S. BoyerandJ.S. A~oore, edsJ, international Lecture Ser!es in Compufer Sctencc 
(1981), 9. Z. Manna, P. Wolper. Synthesis of Communicatmg Processes from Temporal Logic Spcclticatlons, 
Proceedings of the Workshop on Logic of Programs, Yorktown-Heights, NY, 1981, 10. S. Owickl, L. Lamport. 
ProvingL ivenessProperdcsof Concurrent Programs. Slanford University Technical Report (1980). 11. J.P. 
Quiche, J. Sif~kis. Spccifuation and Vcrificationof Crmcurrent Systcmsin CESAl<. Procccdmgs of the Fifth 
lntemational Symposium m Programmmg, 1981. 12. J.P. Quiche, J. Sifakls. Fairness and Related Properties 
in Transition Systems. IIMAG, 292 (March 1982). 13. A.P. SistJa,E.M. Clarke. Complexity of Propositional 
Temporal Logic. (1982). 14. D.P. Sidhu. Rules for Synthesizing Correct Communication Protocols. PNL 
Preprint, to appear in SIGCOMM 15. P. Zafiropulo, C. West, H. Rudin, D. Cowan, Il. Brand. Towards Analyzing 
and Synthesizing Protocols. IEEE Transactions on Communications COA4-28, 4 (April 1980), 651-671.  
			