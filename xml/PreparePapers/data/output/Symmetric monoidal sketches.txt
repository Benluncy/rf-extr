
 = ~. X . I = X id X . j . . X . X m ~= X . (X . X) . (X . X) . X X . mm . X .. X . XX . X m m X . id 
. X . X . X s. X . X . . m m. . |. X Now consider the free symmetric monoidal category gener­ated by 
such a commutative monoid: it is equivalent to the category Setf of .nite sets and functions, which in 
turn is equivalent to the dual of Milner s construction. There is one di.culty with this analysis and 
that is that for­mally, it is not mathematically precise in that we have not said exactly what we mean 
by consider symmetric monoidal structure . So in this paper, we make the idea of the above de.nition 
and construction precise, including examples such as those of commutative monoids, commutative comonoids, 
bimonoids, and relational bimonoids, and see what results follow in general, rather than having to deal 
with the speci.c examples separately. We restrict our attention to symmetric monoidal structure, not 
dealing with the additional struc­ture such as that of a lifting monad, but our results extend to pseudo-commutative 
2-monads on Cat, allowing us to include endofunctors and the like, which we shall do in a later paper. 
The central de.nitions we develop here are those of sym­metric monoidal sketch S and the category of 
strict models Mods(S,C) (in Section 2) of S in any symmetric monoidal category C. In particular, any 
symmetric monoidal sketch S generates a generic model or theory, Th(S). The generic model is characterised 
by the property that if C is a small symmetric monoidal category, Mods(S,C) is isomorphic to the category 
SMs(Th(S),C) of strict symmetric monoidal functors from Th(S)to C, and this is natural in C. Such generic 
models are exactly the various categories of wirings, etcetera, studied by Milner et al, and, subject 
to the addi­tion of a little more structure, by Fiore, Winskel, et al. Symmetric monoidal closed categories 
play the same role in regard to the linear .-calculus as cartesian closed categories play in regard to 
the simply typed .-calculus. So, subject to consideration of closedness, one could consider our mathe­matical 
development here as starting with a linear language, as one might use to model state, and considering 
the addi­tion of data types, which correspond to sketches, to it. We say S is single-sorted (see Section 
3 for details) if all the objects of S are generated by a single base object X:this holds in all our 
examples, such as that above for a commu­tative monoid. We say S is commutative if all the maps in S 
commute witheachother in a precise sense. If S is both commutative and single-sorted, it follows that 
every object of Th(S) has an S-structure on it, so for instance, every object of Th(CMon), where CMon 
is the sketch for a commutative monoid, has a commutative monoid structure. That allows us to characterise 
Th(S) as the free category with structure on the category 1, which is how several au­thors have presented 
their work, e.g., Fiore et al [5] and Milner et al [10, 11]. For any commutative single-sorted sketch 
S, the functor Mods(S,- ): SymMons -. SymMons possesses the struc­ture of a comonad, and the construction 
that sends a small symmetric monoidal category C to the category Mods(S,C) of strict models of S in C 
can be characterised as a right ad­joint to the forgetful functor Mods(S,- ) - Coalg -. SymMons In contrast, 
our characterisation of Th(S) as a free category with structure on the category 1 is a characterisation 
of the image of the left adjoint of the forgetful functor Mods(S,- ) - Coalg -. Cat applied to the object 
1 of Cat. For many sketches, including those of primary interest to us, there is an elegant characterisation 
of the category of coalgebras, Mods(S,- )-Coalg. We explore the situation in Section 4. The reason is 
essentially the Eckmann-Hilton ar­gument [4]: this shows that given a group in the category of groups, 
the two group structures must agree and must be Abelian. This result generalises to all our leading ex­amples, 
showing that the category Mods(S,Mods(S,C)) is coherently isomorphic to Mods(S,C), which in turn allows 
us to characterise Mods(S,- )-Coalg. For instance, in our commutative monoid example, this shows that 
the forget­ful functor from the category of small categories with .nite products to the category of small 
symmetric monoidal cate­gories has a right adjoint given by sending a small symmetric monoidal category 
C to the category CMon(C)of commu­tative monoids in C. The main mathematical technique we use in the 
course of the paper is the theory of sketches for an arbitrary .ni­tary 2-monad on Cat as developed in 
[9]. The reader does not require knowledge of that work to follow this paper. For most of the paper, 
for ease of exposition, we shall gloss over coherence questions relating to the distinction between preservation 
and strict preservation of category theoretic structure: part of the reason that does not create major 
di.culty is because every monoidal category is equivalent to a strict monoidal category, so we shall 
tend to con.ate the two notions: only at one point, where we de.ne single­sortedness, might that be a 
little misleadingly simple, but we have been careful to be correct. We investigate the relevant two-dimensional 
issues seriously in Section 5. Ultimately, they may be resolved by reference to [2] and [8]. The paper 
is organised as follows. In Section 2, we de­.ne the notion of symmetric monoidal sketch, the category 
Mods(S,C) ofstrict models ofa sketch S in an arbitrary small symmetric monoidal category C and the notion 
of generic model Th(S) of a symmetric monoidal sketch S, and we give our leading examples. In Section 
3, we investi­gate general conditions under which Th(S) can be seen as the free category with speci.ed 
structure generated by 1. This involves de.ning the notions of single-sortedness and commutativity of 
a sketch. In Section 4, we generalise the Eckmann-Hilton argument, for all our leading examples, to characterise 
the target category Mods(S,- )-Coalg of the right-adjoint functor Mods(S,- ). Finally, in Section 5, 
we explain the subtleties that arise in needing to distinguish be­tween preservation and strict preservation 
of category theo­retic structure, and how they can be resolved in this context. 2. THE DEFINITION OF 
A SYMMETRIC MONOIDAL SKETCH There has long been study of .nite product sketches [1]. But one needs some 
subtlety in adapting that de.nition to sym­metric monoidal structure: symmetric monoidal structure does 
not have cones, but it does have non-identity structural maps, such as the symmetry maps as in the commutativity 
diagram for a commutative monoid, that must be respected, and no coherence theorem can avoid that. So 
our de.nition requires care. We .rst need to de.ne the notion of a family of diagram types. This is unnecessary 
in de.ning .nite product sketches as all the properties of products are determined by their universal 
property, and the data required for the universal property is completely given by universal cones. For 
sym­metric monoidal categories, that is not the case. Despite this being the .rst de.nition of the paper, 
it is ultimately a supplementary de.nition, as we shall soon see. The de.nition of .nitely presentable 
category is subtle: see [1] for details. But for the purposes of this paper, it su.ces to know that all 
categories that are freely generated by a .nite graph are .nitely presentable. De.nition 1. A family 
D of diagram types (ci,di,ji : ci . di,ki : di . Tci) is a small family of 4-tuples where ci and di are 
.nitely presentable categories, Tci is thefreesym­metric monoidal category on ci,and ji and ki are functors, 
subject to the condition that the following diagrams com­mute: ki di . T(ci) . . . ji. .ci . ci where 
. is the unit of T. We generally suppress ji and ki, leaving them implicit in ci and di. So we speak 
of (ci,di). De.nition 2. A symmetric monoidal sketch S consists of a small category X together with a 
family D of diagram types and a D-indexed family of functors fi : di -. X.A map of symmetric monoidal 
sketches from (X,fi)to (Y,.i) is a functor f : X . Y such that ffi = .i for each i. We defer examples 
until later in the section. The reason is that the notion of sketch only becomes interesting when accompanied 
by the notion of a model of a sketch, and the leading example of a model is the generic model; so we 
shall describe those notions, then provide examples. For .xed D, sketches and maps of sketches give a 
cate­gory SymMonD-Sketch, which is .nitarily monadic over Cat.: in fact, we can enrich it to give a 2-category 
.ni­tarily monadic over Cat using structure-respecting natural transformations: this observation becomes 
crucial when we investigate coherence issues in Section 5. We now turn to the notion of a model of a 
sketch. A sketch S has models in a small symmetric monoidal category. We use the term strict model here: 
strict models relate to models as functors sending assigned .nite products are to functors that preserve 
.nite products in the usual sense. This has been made precise in [2] and [8]. The former are easier for 
writing an abstract account, but the latter are more natural. So for most of the paper, we restrict attention 
to the former, but in Section 5, we shall explain the more re.ned notion of model and how a theory of 
models follows from the theory we present of strict models. Let C be a small symmetric monoidal category, 
and let S = (X,fi) be a symmetric monoidal sketch. De.nition 3. A strict model of (X,fi)in C is a functor 
f : X -. C such that the following diagrams commute: ki. T(ci) di f fi (ffiji) * . . X . C where (ffiji) 
* is given by using freeness of T(ci). For most of the paper, we shall simply refer to these as mod­els 
rather than strict models. For small symmetric monoidal categories B and C, there is a homcategory SMs(B,C)as 
usual. For a symmetric monoidal sketch S =(X,fi)and a small symmetric monoidal category C, we need to 
de.ne a category of strict models of S in C. The simplest and most elegant way to do that is in terms 
of a limit in Cat. De.nition 4. The category Mods(S,C) is the limit in Cat of the diagram with vertex 
Cat(X,C)and for each fi,two maps from Cat(X,C)to Cat(di,C), the .rst given by com­position with fi, the 
second given by .rst precomposing with fiji, then applying ( ) * , then precomposing with ki : di -. 
Tci. An object of Mods(S,C)is a strict model of S in C and a map is a natural transformation between 
models that re­spects the sketch data. So, given models f and f. ,amap from f to f. is a natural transformation 
from f to f. which extends commutativity of the above diagram from commu­tativity of two diagrams of 
functors, one diagram for each of f and f', to commutativity of a corresponding diagram of natural transformations. 
Composition in Mods(S,C)is given by composition of natural transformations. The central result of [9] 
yields Theorem 1. For any symmetric monoidal sketch S,there is a small symmetric monoidal category Th(S) 
and there is amodel . of S in Th(S) such that composition with . in­duces an isomorphism of categories 
from SMs(Th(S),C) to Mods(S,C). This says that for any model f : X -. C of a sketch (X,fi) in a small 
symmetric monoidal category C, there is a unique strict symmetric monoidal functor ¯ f : Th((X,fi)) -. 
C such that . X . Th((X,fi)) . . .f ¯f .| . C commutes. f' Moreover, for any map a : f . of models, 
there is a unique symmetric monoidal natural transformation a¯: f¯. ¯ f. that, composed with ., yields 
a. We call Th(S) together with . : S -. Th(S)the generic model of S. Giving an explicit description of 
Th(S)is often di.cult. Much of the work in the examples is devoted to describing Th(S) explicitly; the 
proof of its existence in [9] relies upon a complicated construction involving a sophisti­cated series 
of colimits. For examples, we start with something that illustrates how the de.nitions work but is not 
of itself of interest to us. We then proceed with our leading examples. Example 1. Let D consist of one 
pair (2,3), with j the (ordered) inclusion of the discrete category 2 into the .rst two components of 
3, and k the inclusion of 3 into the sym­metric monoidal category T(2), generated by 2, yielding that 
part of T(2) that gives the tensor product of the two base objects. That it satis.es the condition on 
a family of dia­gram types amounts to the assertion that k sends the .rst two components of 3 to the 
respective generating objects of T(2). A symmetric monoidal sketch S with D as above is a small category, 
which we also denote by S, together with a se­quence of three objects (c,d,e). It follows from our de.ni­tion 
of model of a sketch that we could reasonably denote the object e by c . d. Amodel of S in a small symmetric 
monoidal category C is a functor H : S -. C such that H(e)= H(c). H(d), This de­termines a strict symmetric 
monoidal functor from Th(S)to C. Since it preserves symmetric monoidal structure strictly and it extends 
H, it still takes .(e)to H(e)= H(c) . H(d). Example 2. Let CMon be the sketch for a commutative monoid. 
As we mentioned before, every monoidal category is equivalent to a strict monoidal category, so for general 
category theoretic reasons [2], it is safe for us to con.ate the two notions. So in describing the sketch 
here, we shall do that for simplicity. The underlying category of CMon is required to express the data 
and commutativity axioms for a commutative monoid: so it has four objects X0, X1, X2,and X3. Its arrows 
are freely generated by arrows j : X0 -. X1, m : X2 -. X1, ml,mr : X3 -. X2, s : X2 -. X2,and jl : X1 
-. X2, subject to commutativity of the following diagrams: id . X3 s X3 X2 . X2 ml mr m m X2 . X2 . X1 
. id . X1 . mm .. X1 . X1 id id . X1X1 id jl .. . X1 X2 m The family D and the maps fi : di -. CMon 
are those required to force X0 to be sent to the unit in any model, X2 to be sent to the tensor product 
of the image of X1 with itself in any model, etcetera. So the sketch has two diagram types. The .rst, 
(c0,d0,j0,k0), has c0 as the category with one object A and no non-trivial arrows, d0 as the category 
containing four objects A0,A1,A2,A3 andwitharrows gen­erated by one non-identity arrow t : A2 -. A2. 
The functor j0 sends A to A1, and the functor k0 sends A0 to I, A1 to A, A2 to A. A,and A3 to (A. A) 
. A, or equally, as Tc is the free strict symmetric monoidal category on c, A . (A. A). The functor k0 
sends t to the symmetry A. A -. A . A. The second diagram type, (c1,d1,j1,k1), has c1 given by the category 
with three objects B0,B1,B2 and non-identity arrows j : B0 -. B1 and m : B2 -. B1. We shall describe 
the category d1 and the functor k1 together by giving a subcategory of Tc1,with k1 being understood to 
be the inclusion of the subcategory d1 into Tc1. The category d1 has arrows given by j and m and by m 
. B1, B1 . m, and j . B1; taking domains and codomains of these arrows determine the objects of d1 It 
remains to de.ne f0 : d0 -. CMon and f1 : d1 -. CMon. The former sends Ai to Xi for each i, and sends 
t to s. The latter sends j to j, m to m, m. B1 to ml, B1 . m to mr,and j . B1 to jl. With these de.nitions, 
Th(CMon) is, up to equivalence, the free symmetric monoidal category on a commutative monoid, and equivalently, 
Setf . It may also be characterised as the free category with .nite coproducts on 1. Example 3. Let CComon 
be the sketch for a commuta­tive comonoid. This is just the same as Example 2 ex­cept that the arrows 
are all reversed. The generic model Th(CComon)is equivalent to Setopf ,which may bealso be characterised 
as the free category with .nite products on 1. The construction sending a small symmetric monoidal category 
C to the category of commutative comonoids in C gives the cofree category with .nite products on C [6]. 
It is equivalent to Milner s category of wirings. For Milner, the wiring category models data.ow; he 
then freely adds con­trols as, for instance, in the p-calculus, and .nally adds a local order to model 
reduction. Example 4. Let Unit be the sketch for an object X to­gether with a unit j : I -. X. So the 
underlying category of Unit is the arrow category, D =(0,1), and the functor f :1 -. Unit sends 1 to 
I. The generic model Th(Unit)is given by the category of .nite sets and injections. Example 5. Let Counit 
be the sketch for an object X to­gether with a counit c : X -. I. This is dual to Example 4. The generic 
model Th(Counit) is equivalent to the opposite of the category of .nite sets and injections. Example 
6. Let RBimon be the sketch for a relational bimonoid, i.e., an object X together with both a commuta­tive 
monoid structure on X and a commutative comonoid structure on X that commute with each other and for 
which the comultiplication followed by the multiplication gives the identity on X. The generic model 
Th(RBimon) is then the category of .nite sets and relations. We shall outline a proof for this. Up to 
equivalence, the objects of Th(RBimon) are given by natural numbers, as there is one generator and one 
must freely add symmetric monoidal structure. For maps, using commutativity of the maps in RBimon with 
respect to each other, any map can be seen to be given by a string of counits and comultiplications, 
followed by a string of multiplications and units. So by the (well-known) results for monoids and comonoids, 
each map from m to p is given by the inverse of a function from a .nite set, followed by a function. 
To give an inverse function followed by a function amounts, up to isomorphism, i.e., renaming, to giving 
a matrix. The coherence axiom asserts that there can be no redundancy, in the sense that there may be 
at most one possible route via the inverted function and the function between any two elements, but that 
is exactly the condition saying that the pair forms a relation. The category Th(RBimon) is that Plotkin 
proposes to use to model wiring in CCS. Examples 3 and 6 both relate to categories of wirings: one by 
Milner, the other by Plotkin. But they use wiring cat­egories in di.erent ways. Milner uses wiring categories 
to describe the connection between names given by data.ow. In contrast, Plotkin uses wiring categories 
to describe con­nections between input and output actions: for him, a mor­phism from a to b describes 
the connection between an input action a and an output action b * . His work is in the spirit of interaction 
categories rather than that of Milner s action calculi. Nevertheless, both use categories of wirings 
and un­derstand them as categories of wirings, so we believe our mathematical results showing them as 
instances of the same phenomenon re.ect a computational relationship. Example 7. Let Bimon be the same 
sketch as that for relational bimonoids but without the condition that the co­multiplication followed 
by the multiplication be the identity. The generic model Th(Bimon) is given by .nite sets and matrices 
valued in the free commutative monoid N on 1, where N is the set of natural numbers with monoid struc­ture 
given by addition. Philippa Gardner is considering other examples of the struc­ture we describe here 
too, for instance allowing a unit, a counit, and a diagonal, but not a codiagonal, to model the p-calculus. 
 3. THE GENERIC MODEL AS FREE ON 1 We now have a notion of symmetric monoidal sketch S and we have a 
notion of the generic model Th(S) of a symmet­ric monoidal sketch. Our leading example has S being the 
sketch for a commutative monoid, in which case Th(S)is the category Setf .But Setf is also characterised 
by being the free category with .nite coproducts on 1. The situation for this sketch is typical, so we 
investigate that phenomenon in this section. De.nition 5. A single-sorted sketch consists of a sketch 
S together with an identity on objects strict symmetric monoidal functor . : Th(1) -. Th(S), where 1 
is the sketch given by the unit category and with no diagram types. We usually suppress the functor . 
in referring to a single­sorted sketch. The single-sortedness condition trivially holds of all our leading 
examples. Th(1) can be described explic­itly; up to equivalence, it is given by the category P whose 
objects are natural numbers and whose maps are permu­tations. The condition is essentially the same as 
that in the formal de.nition of Lawvere theory with the routine generalisation from .nite products to 
symmetric monoidal structure. Given a single-sorted sketch S, for any small symmetric monoidal category 
C, composition with . induces a forgetful functor for which we give the suggestive notation ev1 : Mods(S,C) 
-. C Observe that for every small symmetric monoidal category C, and for every single-sorted symmetric 
monoidal sketch S, the category Mods(S,C) possesses a symmetric monoidal structure: it is not quite given 
pointwise. Given h and h. in Mods(S,C), de.ne (h . h')(1) = h1 . h'1. Now extend the de.nition of h. 
h. to arbitrary objects of S by induction on the complexity of the tensor product description. Finally, 
de.ne h . h. on arrows by conjugation using the canonical isomorphisms induced by induction between (h. 
h')(n)and h(n) . h'(n). It follows that Mods(S,- ) extends to an endofunctor SymMons -. SymMons on the 
category of small symmetric monoidal categories and strict symmetric monoidal functors. Moreover, ev1, 
i.e., composition with . : Th(1) -. Th(S) yields a natural trans­formation Mods(S,- ) . IdSymMons So 
Mods(S,- ) together with ev1 form a copointed endo­functor on SymMons. De.nition 6. Let Mods(S,- )-Coalg 
denote the category of coalgebras for the copointed endofunctor (Mods(S,- ),ev1). So an object of Mods(S,- 
)-Coalg consists of a small sym­metric monoidal category C together with a strict sym­metric monoidal 
functor . : C -. Mods(S,C) such that ev1 · . = id,and a map in Mods(S,- )-Coalg is a strict structure 
preserving functor. For an example, if S is the symmetric monoidal sketch CMon for a commutative monoid, 
the category Mods(S,- )-Coalg is the category of small categories with .nite coproducts: an object of 
Mods(CMon,- )-Coalg is a small symmetric monoidal category C together with, for each object x,a monoid 
structure on x that respects the symmetric monoidal structure of C, but that is exactly to give a diagonal 
and a counit, which is exactly equivalent to giving coproduct structure for reasons we shall explain 
in the next section. A right adjoint to the forgetful functor Mods(S,- ) - Coalg -. SymMons exists [7] 
and is given by a complicated limit. Later, we shall study the situation more carefully. But here, our 
primary interest is in characterising a left adjoint to the forgetful functor Mods(S,- ) - Coalg -. Cat 
The copointed endofunctor Mods(S,- ) is special: for that particular copointed endofunctor, the category 
Mods(S,- )-Coalg is .nitarily 2-monadic over Cat. So it follows from general category theory that the 
forgetful functor to Cat must have a left adjoint [8]: the main point of this section is to .nd conditions 
under which we can characterise the value of that left adjoint on 1 by Th(S). To do that, we need to 
add a commutativity condition on single-sorted sketches that holds of all our leading examples. When 
we say need , we mean something speci.c. We know how to deal with non-commutative sketches, and we intend 
to deal with them in further work, extending our analysis here to incorporate Frobenius and separable 
sketches for ex­ample. But the techniques and results are di.erent. Here we characterise Th(S) in a particular 
way, and for this par­ticular way, we require commutativity of S. The commutativity condition amounts 
to the assertion that every arrow of the sketch commutes, in a precise sense, with every other arrow 
of the sketch. Recall that Th(S)has the same objects as Th(1), which is equivalent to P.So for natural 
numbers m and p,wedenote by m × p, the tensor product of m copies of p.So m ×- is functorial in Th(S). 
De.nition 7. A single-sorted sketch S is commutative if for all maps f : m -. n and g : p -. q in S,the 
two maps from m × p to q × n,one given by m × gq × f m × p . m × q . q × m . q × n, with the other dual, 
where the unlabelled maps are given by canonical isomorphisms in P, agree. Proposition 1. For a commutative 
single-sorted sketch S, there is a canonical strict symmetric monoidal functor s : Th(S) -. Mods(S,Th(S)) 
that splits ev1, i.e., the diagram s Th(S) . Mods(S,Th(S)) . . ev1 id . .. | Th(S) commutes. Proof. It 
follows from the de.nition that s(1) = . : S -. Th(S). So s(n) is determined by preservation of monoidal 
structure. The commutativity condition is only required to prove that the evident construction of s on 
a map gives a map in Mods(S,Th(S)). We shall use the Proposition to characterise Th(S)as the free category 
with speci.ed structure on 1. We have already observed that, using s, one can regard Th(S)as anobject 
of Mods(S,- )-Coalg. Theorem 2. If S is a commutative single-sorted sketch, the pair (Th(S),s) is the 
free Mods(S,- )-coalgebra on the category 1, i.e, the image of the left adjoint of the forgetful functor 
Mods(S,- ) - Coalg -. Cat applied to the object 1 of Cat. Proof. Let (C,.)be a Mods(S,- )-coalgebra. 
To give a functor from 1 to C is equivalent to giving an object of C, which in turn is equivalent to 
giving an object f : S -. C of Mods(S,C) such that .(f1) = f. But to give such an f : S -. C is equivalent 
to giving a strict symmetric monoidal ¯ functor f : Th(S) -. C and the condition is equivalent to preservation 
of coalgebra structure: the forward direction is a routine veri.cation, and the reverse is given by considering 
the commuting square required of a coalgebra map applied to 1. This result routinely extends to 2-categorical 
structure. The only reason we needed the commutativity condition was in order to make (Th(S),s) into 
an object of the category Mods(S,- )-Coalg. Commutativity buys us more than this as it allows consid­erable 
simpli.cation of the description of the right adjoint to the forgetful functor Mods(S,- ) - Coalg -. 
SymMons First, the forgotten, trivial, part of the Eckmann-Hilton ar­gument, which we analyse more thoroughly 
in the next sec­tion, says essentially Lemma 1. If S is a commutative single-sorted sketch, there is 
a natural transformation with C-component dC : Mods(S,C) -. Mods(S,Mods(S,C)) such that Mods(S,- ) together 
with ev1 and d form a comonad on the category SymMons. Lemma 2. For commutative single-sorted S, the 
strict sym­metric monoidal functors Mods(S,ev1): Mods(S,Mods(S,C)) -. Mods(S,C) and (ev1)Mods(S,C) : 
Mods(S,Mods(S,C)) -. Mods(S,C) are jointly monomorphic in the category SymMons. The two lemmas immediately 
yield Proposition 2. For any commutative single-sorted sketch S, the category of coalgebras for the copointed 
endofunctor (Mods(S,- ),ev1) is equal to the category of coalgebras for the comonad (Mods(S,- ),ev1,d) 
. This implies that for commutative single-sorted sketches, the right adjoint to the forgetful functor 
Mods(S,- ) - Coalg -. SymMons is given simply by Mods(S,- ). This is a vast simpli.ca­tion of the situation 
for an arbitrary single-sorted sketch. In the next section, we characterise the category Mods(S,- )-Coalg 
for a class of examples including all our leading ex­amples.  4. THE ECKMANN-HILTON ARGUMENT The Eckmann-Hilton 
[4] argument asserts that to give a group in the category of groups is equivalent to giving an Abelian 
group. The argument restricts to monoids. We include the proof here although it appears widely in the 
lit­erature because the fundamental construction of this section is the generalisation of part of the 
proof to our setting. One can speak of a monoid in any symmetric monoidal cat­egory, so in the following, 
we consider the category Mon as the category of monoids, together with the symmetric monoidal structure 
given by the .nite products in the cate­gory Mon. Theorem 3. Eckmann-Hilton[4] A monoid in the cate­gory 
Mon of monoids is exactly a commutative monoid. Proof. Let (M,. ,e)and (M,. . ,e ') be monoids whose 
operations commute with each other. Observe that e = e . because the map e :1 -. M respects the units 
of 1 and (M,. . ,e '), and the unit of 1 is the identity. Next observe that commutativity of . with . 
', together with the equality of the two units, implies that x . y = y . . x. Finally, use the same commutativity 
again but with units in di.erent places to deduce that x . y = x . . y. Putting this together, we are 
done. None of this argument is special to the situation of monoids in Set. It all holds with Set generalised 
to an arbitrary sym­metric monoidal category. Moreover, the argument regard­ing units does not require 
even the existence of the composi­tions; and the argument, holding for an arbitrary symmetric monoidal 
category C,also holds for Cop, so one has the dual. The heart of the result asserts that taking Mon to 
be the sketch for not necessarily commutative monoids, the cate­gory Mods(Mon, Mods(Mon, C)) is coherently 
isomorphic to the category Mods(CMon,C), where CMon is the sketch for commutative monoids that we have 
already introduced. We do not address the full generality of that here, as we are restricting attention 
to commutative sketches. In that re­stricted situation, we can rephrase the result as saying that d, 
the comultiplication for the comonad Mods(CMon,- ), is an isomorphism. That is to say that Mods(CMon,- 
)is an idempotent comonad. The signi.cance of being an idempotent comonad is that each object C of SymMons 
has at most one coalgebra struc­ture on it. That suggests that the coalgebra structure is probably given 
by a universal property, and indeed that is the case in our leading examples. In particular, it means 
that Th(S) has a description in terms of a universal prop­erty. We shall spell all this out in detail 
in order to capture our examples. For any small symmetric monoidal category C, write Unit(C)for Mods(Unit, 
C), where the sketch Unit is as we de.ned it earlier. So an object of Unit(C) consists of an object X 
of C together with a map e : I -. X,and an arrow is a map in C that respects the units. Proposition 3. 
The forgetful functor Unit(Unit(C)) -. Unit(C) that forgets the inner structure is an isomorphism of 
cate­gories. Proof. To give an object of Unit(Unit(C)) is to give an object (X,j : e -. X)of Unit(C) 
together with a map e . : I -. X such that e . . id = e. Trivially, e = e . . Here, Mods(Unit, - )-Coalg 
is the category of small sym­metric monoidal categories for which the unit is the initial object. So 
we may conclude that Unit(C)is the cofree small symmetric monoidal category for which the unit is the 
initial object on C,and Th(Unit) is the free such on 1. By considering the symmetric monoidal category 
Cop,the same result holds for Mods(Counit,- ). So Counit(C)is the cofree small symmetric monoidal category 
for which the unit is the terminal object on C,and Th(Counit)is the free such on 1. Similarly, denote 
Mods(CMon,C)by CMon(C) for any small symmetric monoidal category C. It is the category of commutative 
monoids in C. Proposition 4. The forgetful functor CMon(CMon(C)) -. CMon(C) forgetting the inner structure 
is an isomorphism of cate­gories. Proof. This is the Eckmann-Hilton argument for a sym­metric monoidal 
category C. So Mods(CMon,- ), which agrees with CMon(- ), is right adjoint to the forgetful functor 
from the category of small categories with .nite coproducts to the category of small symmetric monoidal 
categories, and Th(CMon)is the free category with .nite coproducts on 1. Taking a dual, the functor CComon(- 
) is right adjoint to the forgetful func­tor from the category of small categories with .nite prod­ucts 
to that of small symmetric monoidal categories, and Th(CComon) is the free category with .nite products 
on 1. Putting Proposition 4 together with its dual, the right ad­joint statements immediately extend 
to bimonoids and rela­tional bimonoids. So Bimon(- ), with the evident de.nition, is right adjoint to 
the forgetful functor from the category of small categories with .nite biproducts to the category of 
small symmetric monoidal categories, and Th(Bimon)is the free category with .nite biproducts on 1. Similarly, 
RBimon(- ), again with the evident de.nition, is the right adjoint to the forgetful functor from the 
cat­egory of small categories with relational .nite biproducts to the category of small symmetric monoidal 
categories, and Th(RBimon) is the free category with relational .nite biproducts on 1, i.e., the category 
of .nite sets and binary relations Relf as studied by Plotkin. 5. TWO-DIMENSIONAL ISSUES Until now, 
we have restricted our attention to strict models. Here, we extend our analysis to models. The problem 
with strict models is illustrated by the following. One could write a symmetric monoidal sketch for a 
monoid identifying the base object m with m. 1, for instance by taking a fragment of the Lawvere theory 
for a monoid. But in Set,a set X is not equal to X × 1 in general, but only isomorphic to it. So although 
the models of the sketch are monoids as expected, there are no strict models of this sketch. A similar 
concern was central to [2]. One can avoid such a problem in an ad hoc way by simply not writing sketches 
like that, but being careful in writing a sketch speci.cally not to identify two objects that one wants 
to allow to be distinct in models. For instance, one could write a sketch for monoids without identifying 
m with m. 1. We have done something a little more subtle than that in our de.nition of single-sorted 
sketch, as our precise de.nition of single-sortedness implies that m and m . 1must bekept separate. But 
traditionally, sketches such as that outlined for monoids above have been considered as reasonable, and 
the notion of model has been de.ned to allow them. So we follow suit. We solve the problem in general 
by extending our de.nition of model to agree with the usual one in our examples, then proving that for 
any sketch S ,there is a sketch S . such that the category of models of S is isomorphic to the category 
of strict models of S . . Thus we extend our main theorem, Theorem 1, from strict models to models. For 
an elegant account of this, we must .rst extend our de.nition of map of SymMonD-sketches. De.nition 8. 
A pseudo-map of SymMonD-sketches from (X,fi)to (Y,.i) is a functor f : X -. Y together with, for ¯ every 
i, an invertible natural transformation fi : .i . ffi ¯ such that fiji = id. SymMonD-sketches and pseudo-maps 
form a category we denote by SymMonD-Sketchp. In fact, both SymMonD-Sketch and SymMonD-Sketchp form 2-categories. 
There is an evident inclusion J : SymMonD-Sketch -. SymMonD-Sketchp, and we have Proposition 5. The inclusion 
J : SymMonD - Sketch -. SymMonD - Sketchp has a left adjoint (- ). . Proof. This is essentially an example 
of the main result of [2], and we use the notation of [2] freely. Given (X,fi), .rst take the pseudo-colimit 
.i : pifi . qi : d -. Xi''of each fi. Then take the coidenti.er ri : Xi''-. Xi'of .iji to ensure that 
the equation is satis.ed for each i. Finally, take . the colimit X' = X Xi'of ripi s with injections 
si. In fact, one can prove, as in [2], that every sketch S is equiva­lent, in the 2-category SymMonD-Sketchp,to 
S ' . To de.ne a model, let C be a small symmetric monoidal category, and let S =(X, fi)bea SymMonD-sketch. 
For ease of nota­tion, we shall henceforth leave the subscripts on the elements of D implicit. De.nition 
9. A model of (X, f)in C is a functor f : X -. C together with an isomorphism k d . Tc f . ¯f (ffj) 
* . . X . C f such that ¯fj = id. [1] M. Barr and C. Wells. Toposes, Triples, and Theories, Grundlehren 
der math. Wissenschaften 278. Springer-Verlag, 1985.  It is routine to modify the de.nition of Mods(S 
,C) to de.ne the category Mod(S ,C). We need to analyse that category. Proposition 6. Given a SymMonD-sketch 
(X, f),for every model of (X, f) in a small symmetric monoidal cat­egory C, there exists a unique D-structure 
on C such that the data for the model is exactly that for a pseudo-map of SymMonD-sketches, and the axioms 
hold. Proof. Existence is immediate from the de.nitions of model and pseudo-map of SymMonD-sketches. 
Unicity fol­lows directly from the coherence condition. Corollary 1. For every SymMonD-sketch S ,there 
ex­ists a SymMonD-sketch S ' and a pseudo-map j : S-.S ' of SymMonD-sketches such that composition with 
j yields an isomorphism of categories from Mods(S ' ,C) to Mod(S ,C) for every small symmetric monoidal 
category C. This result solves our problem, as it may be combined with Theorem 1 to yield Corollary 2. 
For every SymMonD-sketch S ,compo­sition with .j : S-. Th(S ' ) yields an isomorphism of cat­egories 
from SMs(Th(S ' ),C) to Mod(S ,C) for any small symmetric monoidal category C. One can go a little further 
than this. If one wants to re­strict attention to strong symmetric monoidal functors, i.e., functors 
that only preserve structure up to coherent isomor­phism rather than strictly, then we can adopt the 
theory of [2] directly. If one extends SymMons to SymMon,the 2-category with the same objects as SymMons, 
but with strong symmetric monoidal functors as 1-cells, then it fol­lows as a consequence of the main 
theorem of [2] (see [9] for more detail of this) that we have Theorem 4. For every SymMonD-sketch S ,composi­tion 
with .j : S-. Th(S ' ) yields an equivalence of cat­egories from SM(Th(S ' ),C) to Mod(S ,C) for any 
small symmetric monoidal category C. Now we have these results, it follows that Mod(S ,- )gives a functor 
from SymMon to Cat and hence to SymMon as explained before.  6. REFERENCES [2] R. Blackwell, G. Kelly, 
and A. Power. Two-dimensional monad theory. J. Pure Appl. Algebra, 59:1 41, 1989. [3] G. Cattani, M.P.Fiore, 
and G. Winskel. A theory of recursive domains with application to concurrency. In Proc. LICS 98, pages 
214 225, 1998. [4] B. Eckmann and P. Hilton. Group-like structures in general categories i: multiplications 
and comultiplications. Math. Annalen, 145:227 255, 1962. [5] M. Fiore, G. Plotkin, and A. Power. Cuboidal 
sets in axiomatic domain theory. In Proc. LICS 97, pages 268 279, 1997. [6] T. Fox. Coalgebras and cartesian 
categories. Comm. Algebra, 7(4):665 667, 1976. [7] P.Johnstone,A.Power, T.Tsujishita, H. Watanabe, and 
J. Worrell. An axiomatics for categories of transition systems as coalgebras. In Proc LICS 98, pages 
207 213, 1998. [8] G. Kelly and A. Power. Adjunctions whose counits are coequalizers, and presentations 
of .nitary enriched monads. J. Pure Appl. Algebra, 89:163 179, 1993. [9] Y. Kinoshita, A.Power,and M. 
Takeyama.Sketches. J. Pure Appl. Algebra, 143:275 291, 1999. [10] A. Mifsud, R. Milner, and A.J.Power. 
Control structures. In Proc. LICS 95, pages 188 198, 1995. [11] A. Power. Elementary control structures. 
In Proc. CONCUR 96, Lecture Notes in Computer Science 1119, pages 115 130, 1996. 
			