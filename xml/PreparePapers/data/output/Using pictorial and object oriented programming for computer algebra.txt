
 Using Pictorial and Object Oriented Programming for Computer Algebra Trevor J. Smedley Technical University 
of Nova Scotia Abstract Much current research in the area of computer algebra is focussed on applying 
techniques from object oriented programming. This is being attempted in order to reduce the duplication 
of code present in many ccrmputeralgebra systems, and to make it easier m add new domains of computation, 
a task which is very difficult in a computer afgebra system which is not object oriented. This research 
is proving this to be a very worthwhile endeavour. Unfortunately, by combiniig object oriented programming 
and computer slgebr% the task of writing a program in such a system becomes very complicated. Also, most 
people who use a comput­er algebra system more than casually end up needing to write their own programs, 
since they are often dealing with a special­ised problem which uses algorithms which have not been imple­mente~ 
or the problem involves computation in a mathematical domain which is not built in to the system. So, 
what is needed is a way to apply object oriented programming to computer afge­bra, while keeping the 
task of writing a program reasonably sim­ple. The aim of this project is to study the possibility of 
applying new technologies in the areas of pictorial and object oriented program­ming to computer algebra. 
Pictorial programming, by allowing the programmer to speci~ the program in terms of pictures rather than 
tex~ can greatly simplify the programming process. It is hoped that by using pictorial and object oriented 
programming for computer algebra we would have the benefits of being object ori­ented (reduction of duplication 
of code, and ease of introduction of new domains of ~mputation) without the disadvantage of the resulting 
difficulty in programming. This paper is a preliminary report on the project. Intreduction Over the past 
thirty years quite a number of computer algebra sys­tems have &#38;en developed. In the early 1960 s 
these were mostfy just libraries of FORTRAN subroutines, with interactive systems, mostly written in 
LISP, appmring towards Lhe end of the decade. Since that time development has continued, with the systems 
bc­coming more and more powerful as new algorithms were discov - Permission to copy without fee all or 
part of this material is granted provided thet the copies ore not made or distributed for directcommarcitdedventege, 
the ACM copyright notice end the title of the publication and its dote appeer, and notice is given that 
copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, 
requires a fee and/or specific permission. 01992 ACMO-89791-502-X/9210002/l243...$1.50 cred and implemented. 
Some of the moat powerful and better known current day systems are REOUCE[1], MACSYMA12],Maple [31and 
Mathematica[A]. Development of REDUCEand MACSYMAstarted in the late 1960 s and early 1970 s, and both 
systems are based on LdsP. Maple and Mathematic~ on the other hand are both based on C, with Maple development 
starting in 1980, and Mathematical in the late 1980 s. Programming in these systems, although the specifics 
are quite di­verse, is generally the same as programming g in any normal pro­gramming language. It is 
procedure oriented as opposed to ob­ject oriented. There are two other systems which do not fit into 
this classifica­tiorG Scratchpad (t%om IBM research) [5] and Views (from Xerox PARC) [6], both object 
oriented systems. Although &#38;velopment of the Views systems seems to have stoppe4 work on Scratchpad 
continues, and the results of applying object oriented program­ming techniques to computer algebra seem 
quite promising. There have been a number of other sttemprs at &#38;veloping objec( oriented computer 
algebra systems, but there has been little pub­lished on any of these [7]. Although the fact that Views 
and Scratchpad SIC object oriented sets them apart from the other computer algebra systems, they still 
have something in common with them: They all employ text based languages. With the widespread availability 
of inexpensive grapfics worksta­tions and desktop computing, it is now possible to get away from linear, 
text based languages, and move to two (or more) dimen­sional pictorial programming environments. Over 
the past ten years or so numerous such experimental projects have been start­ed and more recerttfy there 
are even a number of commercial ap­plications available. One of these systems, Prograpb can be de­ scribed 
as a ... v~ ~lgh level, object orient~ visual, dataffow programming language. [s] The following section 
will give a brief description of this system, pointing out the features which make it particularly auractive 
for this project. For a more thor­ough discussion of visual programming in general, see any one of [%Ill 
11;12 13; 14]. Prograph: Pictorial and Object Oriented Programming There are many different varieties 
of visual programming km­guagcs, systems, and tools. Prograph cm be considered to be a truly visuaf programming 
language in that all aspects of the pro­gram are visual. There is no textual representation of the program 
  SH B sl-Sort 1:2SEIEI13EM Figure 1 A Prograph Class Hierarchy code. Since Prograph is an object oriented 
language, there must be some way to apcci~ a class hierarchy (which classes inherit methods and attributes 
from which classes). This is also specified visually. A class hierarchy in Prograph is represented by 
icons (for the classes) connected by inheritance links (indicating the subclass structure). For exsmpl~ 
F@e 1 is a Prograph class structure to representfarm animals. The left side of a class icon represents 
the attributes, and double clicking here brings up a window where class and instance at­ !xibutcs can 
be created, &#38;Ietcd and edhcd. The right side repre­sents the class methods, and double clicking here 
brings up a win­dow containing the class methods. A Prograph method (or procedure) consists of nodes 
comccted by arcs, as in a directed graph. The nodes represent calls to methods (or subroutines) and the 
arcs are paths along which data flows. Objects flow into the top of a node, the methnd represented by 
the node is called with the incoming objects as inputs, and the outputs from the method flow out the 
bottom. When using the object ori­ented capabilities of Prograph, which method is called depends on the 
type of the leftmost input object to the node. When defiiirtg a method, the inputs come in a bar at the 
top of the window, and the outputs go out a bar at the bottom. Figure 2 is an example of a simple Prograph 
program for quicksort. There are special constructions for looping and conditional execu­tion, as well 
as many built in primitives for string and list proccss­ ingt along wirh the s~~ mathematical ad logical 
timitives. There are afso built in methods for creating objects, and extract­ ing and setting the attributes 
of an object. For a more thorough discussion of Frogrsph see 181. ObjectOriented Programming and Computer 
Algebra Implementation of algorithms in standard computer algebra sys­ tems such as REDUCE, MACSYMA, 
Maple and Mathcmatica is hampered by the fact that there is necessarily much duplication of effort. For 
example, in Maple there are at Icast four separate im­ plementations of the basic polynomial quoticntircmaindcr 
opcra­ lion; one for polynomials over the rationals, onc for polynomials llgure 2 A Frograph Method 
over ZP where p is a prime, one for polynomials over algebraic extensions of ZP and one for polynomials 
over algebraic exten­sions of the rationaf numbers. Each of these is essentially the same. The only difference 
is that the coefficient operations are the ones for the specific field in question. If we want to be 
able to do the quotient/remainder operation for polyrmrtials over a field for which there is no procedure 
available we have to copy the code from one of the existing proccdttres, and change the coeffi­cient 
operations to ones which apply to the field we wish to work with. This is a very time consuming, tedious 
and error prone task. By utilising tedmiques from object oriented programming, we cart avoid this redundancy. 
We can write a single polynomial quotient/remainder operation which operates on polynomials with coefficients 
from any field. In order to do quoticnthetnainder for polynomials over a new field we need only implement 
the basic field operations our generic quotient/remainder procedure will automatically use them. Thii 
ability to reuse code was one of the major driving forces bc­hmd she development of the objsxt oriented 
computff algetia sys­tems Views and Scratchpad. Sitwe there are many mathematical algorithms which can 
lx applied to any domain of a specific type (eg. group, field, polynorniafs over a ring, etc.), the potcntiaf 
for reuse of code in computer algebra systems is enormous. Aa a re­sult of this, Scratchpad haa quickly 
grown to be a very complete system complete in the sense of having many algorithms for many dlffcrent 
domains available.  Visual Programming and Computer Algebra Programming in normal non-object oriented 
languages such as Pascal is not an easy task. To be able to do it well, profcssionaf programmers require 
extensive training. They must be capable of taking an application spci!ication and transforming this 
into a linear form. Most problems are not inherently linear in nature, so this translation is non-bivisf. 
Programming in systems such as Maple and Mathematical, even if we ignore their inubility [o reuse generic 
code, is even harder. The algorithms are often quite com­plex and just rmdezstanding them is a formidable 
task. Translating these algorithms into the linear form required requires a high level of expertise in 
programming. This is even more of a problem for the large number of computer algebra system users who 
are not computer scientists. These sys­tems are often used by mathematicians, physicists and engineers. 
If these people have a problem for which there is no existing algo­rithm implemented in any of these 
systems,t they can either try to become expert programmers so they can implement it themselves, or try 
to fmd an existing expert programmer who is also capable of understanding the problem which they want 
to solve. Existing computer algebra systems almost never completely meet the needs of the users. At some 
point anyone who uses a comput­er algebra system more than just casually ends up having to write a program. 
Although the users of computer algebra systems are usually quite tcduricsdly oriented, it is still often 
a very difficult task to convert the problem they want to solve into a linear, texttr­al program. By 
allowing them to specify their programs in a more natural two dimensional format, many of the difficulties 
normally encountered will not occur. Also, many visual program­ming systems (and Prograph is a particular 
y good example of tiis) provi&#38; very powerful debugging muls. Fnr example, in Prograph. it is possible 
to stop the execution at any !ime and ex­amine the data values at any point in the cxectrtion. The data 
val­ues or the program code can be changed, and execution rolled back to immediately before where the 
change was made. All of this is done visually.  The Project Computer algebr~ visual programming, objeci 
uriented program­ming and datsflow programming are sfl relrstivcly new areas of research within computer 
scicncc. The prospect of combining these technologies is exciting indeed, and the potential for progress 
is enormous. The goaf of this project is to explore how these areas of research can be combined in order 
to make rcscsrch, dcvclopmcnt and usc of algorithms for computer algebra much simpler than it is today. 
Through appropriate use of visual programming, the general lask of programming a computer should be much 
more accessible than with current textual languages. It will no longer Ix necessary for mathematicians, 
physicist and engineers to also become expert computer programmers in order to take advantage of what 
com­puter algebra has to offer. By applying object oriented programming techniques, onc of the more diftlcult 
problems with procwhrrc oriented curnputcr ttigcbra systems that of teaching the systcm to deal with 
new computa­tional domains should no longer be an issue, With proper ap­ t Which is very oftcsr the 
case since the areas we so diverse, and she p~~fl~m~~algebm systastcndtohave vc~ specialised s M omporsnded 
by the fat{ hat comparer atgcbra systems are quite new, and although many can handle a very Iargc variety 
of problems, there is still much that is no[ implcnscntcd. plication of inheritance and genezic procedures, 
it will be a simple matter of adding the basic operations for the new dom~ and the rest of the system 
will automatically know how to deal with the objects, Current State Currently we have implemented classes 
for arbitrarily large inte­gers, integers modsdo a prime numbes, rationaf expressions and polynomials. 
In each of these classes we have the basic arith­metic operations, and whae applicable, quotient remainder 
and greatest common divisor operations. Even with only this small set of classes in placq it is afressdy 
enough to indicate the future potential of the projec~ as well as some obstacles that will have to be 
overc4sme. The following section d=ses tlw problems which are evident at this stage, and some of those 
which we ex­pect will appear as the Foject grows.  Open Problems Speed The current system is slower 
dtart we would like. We expect that this is, to a large extenL due to the way that lswgeintegers arc 
im­plemented. Large integers are used everywhae throughout any computer algebra system, and as such, 
if the opaations on them are slow, the entire system will be slow. Ilse current implanenta­tion is a 
standard Prograph class, with a large integer r.cpesented as a list of ordinary integers, each one being 
abase 10,000 digit of the large integer: Because of the way lists are implemented in PrograpL this results 
in a huge amount of overhead in any large integer operation. The easiest way to solve this would be to 
de­fine large integers as a built-in data type, avoiding the overhead of Prograph in dsii case. It is 
pssible d-tat a few other data types would have to be added to Prograph to make it eftlcient for use 
for computer algebr% but itshould only be a few: perhaps matricea, polynomials and rstio­naf expressions. 
This is similar to the way, in the Maple system [15}operations that are crucial to the eftlcicrscy of 
the system are dcfmed internally (writwn in C) and the rest are &#38;ne extemalfy (written in the Maple 
language). It was discovered m the devel­opment of Maple that by deftig only a smalf number of critical 
things internally, the efficiency can be improved substantially.  Class Structure This is probably the 
problem that will require the most time, ef­fort and research. We wifl be able to take advantage of the 
les­sons learned in the development of Views and Scratchpad. Currently, there are simply separate classes 
for the types that have been implemented thus fru, with one superclass of which they are all descendants 
(see Frgure 3). We are now at the stage whae we have to seriously consider the future plans for the class 
structure. Mathematics cart be thought of as being inherently object orierst­ed. We can think of the 
different mathematical domains (ring, field, group, etc.) and afso concrete examples of these (such as 
ra­ t Base 10,OGOia used for two SUSOSSS:It mskes inpsrthsrtprst mrwersicsredsy, md it snows multiplicationto 
be done readily,as LISeproductof two digits will fit in one word sized integer. Figure 3 Current Class 
Structure tionsd numbers, or two by two matrices of integers) each as a class. What has to be done is 
to take the object orientation inher­ent in mathematics and specify it in a more formaf way. Parametrised 
Classes Quite often in Mathematics wc have what could be called parame­trised domains or classes. For 
example, exactly how a polynomi­al behavea depends on which doma m the coefficients are from. Univariate 
polynomials over a field are elements of a Euclidian domain. whereas, if the coef?lcicnta only form a 
ring, then the polynomials rdso only form a ring. We will require a way to sPlfY CISSWXwith parameters, 
and alter the bchaviour of ~. stances of the class according to the parameters. This will likely be the 
hsrdeat sub-problem in dealing with the class structure, and will require much thought, research and 
experimentation.  Multiple Inheritance Currently, Prograph only provides for simple inheritance. This 
will have to be changed for this project. Ext~ding the previous example, if we have polynomials over 
a tic14 we would want them to inherit operations from both the polynomial class and the Euclidkm domain 
class. Some work has already been done on including multiple inherit­ance in Prograph, and all that really 
remains is to implement it. However, once a suitable itnplemcntation is in place, there will still remain 
the formidable task of determining a good class struc­ture one which makes sense from a mathematical 
point of view, and also provides the advantages we are secklng by intro­ducing object oriented programming. 
 Automatic Coercion Another major problem which will have 10be addressed is that of how to perform automatic 
coercions (or conversions). For exam­ple, we would like to be able to add a polynomial with integer co­efficients 
to art ordinary integer by having the coercion of the in­teger to a constant polynomial take place automatically. 
One approach to U-k would be to provide a method within Prograph for visuafly defining a conve~ion graph 
which specifics which classes can be converted to which other classes and how.t t flris would be a directed 
graph with classes as the nodes snd dre edges representirs cwsversion routines from one class to another. 
Ilremethod by w/ lch a conversica would he chosen if there is more than are possible th between the classes 
is yet LObe dcterrnincd. Similar probfrans rave bear dealt wilh in other areas (for example Then, whenever 
Progrsph attempts to do an operation on objects from two different chases, it could search for art appropriate 
con­version (or conversions) in this graph and perform it frst. This is certainly a non-trivial problem, 
and has been such in other attempts at object oriented computer algekxA and object oriented programming 
in general. It is hoped that some visual programm­ing tecluiquea could be applied in this htstanceto 
simplify the solution.   Interactive Use and Program Development This is an areamoreof potentisfthandifficulty. 
The standard paradigmforinteractiveusefora computer algebra system hasn t changed much in the last 20 
years. Both input and output are ASCH. The user types in expressions, assigns them to variablea, and 
then crdfs procedures with the expressions as arguments. De­bugging facilities range horn primitive to 
none. In recent years there have beers some improvements to this, mainly in tie form of allowing cut 
and paste of expressions and subexpressions, and improving the format of the input and output. The debugger 
which is part of the Progrsph environment allows the user/programmer to step through the execution of 
a pmgrarn, stopping at any time @ exarnining or changing any data values. If a piece of data is changed, 
execution is automatically rolled back to a point before the chsng% and execution can continue. It is 
also possible to change the program while it is executing in the same manner. These capabfities allow 
the debugger to be used for what can be called interactive programming. The user can build a procedure 
incrementally, noticing how the computations proceed altering data vafues to see what changes take place, 
and also modifying the pogram and immediately seeing how this alters the computa­tion. This method of 
programming although perhaps not appropriate for building large applications that are normally the result 
of de­ velopment teams is exactly what is needed in computez alge­ bra. Users of computer algebra systems 
are most often involvwf in experimental mathematics In fac~ one of the major praises of computer algebra 
systems is that they allow for thii. However, in current computer algebra systems, the experimentation 
is still more difficult than it should be. Repeating a series of computa­ tions, particularly if there 
are minor changes that one wants to make, is quite difficult. The user has to remember all the &#38;tails 
of the Ccsmputstiomwrite them as a progrartL and then debug this program. Even once this is done, it 
is not gsmerally possible to watch the progression of the cotrtputatio~ something which can provide insight 
into the problem being studied. The interactive programming paradigm which is provided by the visuaf 
programm­ing environment achieved through the Progrsph debugger is ex­actly what is needed in computer 
algebra On thing that it will be necessary to add to Rogrsph for this is ways to sikplay and edit the 
computcx algebra objects. In the cur­ rent implcmentatiom inputting and edhittg expressions is even C++) 
andthe lesscms fsursrthese efforts could bs applitd to this situ­ ation. more difficult than in standard 
computer algebra systems. How­ever, by adding meti to Prograph for WYSIWYGediting of ex­pressions, we 
will achieve a much more natural interface.  The Future Current efforts are concentrated on making large 
inlcgcrs (and pessibly a few other basic classes) internaf to Prograph, and providing ways to inpss~ 
display and edit them easily. Once this is in place the basic classea will be much easier to use, facilitating 
tither research and experimentation. The next step would be to deal with the problems of multiple in­heritance%class 
orgsnisation, pstrametnscd classes and automatic conversions roughly in that order. Of these, the first 
(putting multiple inheritarsca in place) is really just a dcvclopmcnt projec~ but once this is done we 
will have a useful tool for further re­search into applying visual and object oriented programming to 
computer algebra [1] A.C. Hearn. The REDUCEprogram for computer algebra. In Proceedings of the Third 
Colloq. on Advanced Computing A4ethoo%in Theoretical Physics. CNRS, 1973. [2] R.A. Bogen at al. MACSYMAreferenu 
manual. Technical report, M.I.T. Laboratory for Computes Science, 1977. [3] B.W. Char, K.O. Geddes, G.H. 
Gonne.G M.B. Monagan, and S.M. Watt. Maple Reference Manuoi. WATCOM lhtblicatio~ 1988. [4] s. wolfram. 
Mathesnatica A System for Doing Mathemattks by Crnnputer, Addison-Wesley Publishing Company, 1988. [5] 
R.D. Jenks, R.S. Sutor and S.M. Watt. Scratchpad 11: An abstract Datotype system for mathensaticol conqmtatiom 
Trends in Computer AlgebrL S@nger-Verlag, 1988. [6] S.K. AMali, G.W. Cherry and N. Soiffes. An objwt 
oriented approach to algebra system design. In Proceedings SYMSAC 86, pages 24-30. Aswciation for Computing 
Machiiery, 1986. [7] R.J. Fateman. Advances smd trends in the design snd construction of algebraic manipdstion 
systems. In Proceed­ings ISSAC 90, 1990. [8] The Gunakara Sun Systems Limited. Progrquh Reference Munuol. 
TGS Systems, 1990. [9] E. Gliner~ edhor. Visuol Prograrnmbtg Environments: Ap­plications and Issues. 
IEEE Computer Society Press, Los Alarnitos, CA, 1990. [10] E. Glinert, editor. Visuol Progr arnming Environments: 
Par­odignu and System. IEEE Computer Society Press, Los Alamitos, CA, 1990. [11] S-K Chang, editor. Visuul 
Lutsguages and Viruol Progr~ ng. Plenum Press, New York, 1990. [12] S-K Chang, editor. Principles of 
Visuol Programming Systems, Prentice-Hall International, Englewood Cliffs, NJ, 1990. [13] N.C. Shu. Visual 
Programming. Van Nostrand Reirtholdt New York, 1988. [14] T. Ichikawa E. Jungert and R.R. Korfhag%txlitors. 
Visuuf L.aguages ond Applications. Plenum Press, New York 1990. [15] B. Char, G. Fee, K.O. Geddes, G.H. 
Gonnet, M.Il. Monagam S.M. Watt. On the design and performance of the Maple sys­ tem. in Proceedings 
of the 1984 MACSYMAUser sCon@­ence,1984.  
			