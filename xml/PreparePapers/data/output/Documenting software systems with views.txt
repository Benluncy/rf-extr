
 Documenting Software Systems with Views~~ Scott R. Tilley Hausi A. Muller Mehmet A. Orgun Department 
of Computer Science, University of Victoria P.O. Box 3055, Victoria, BC, Canada V8W 3P6 Tel: (604) 721-7294, 
Fax: (604) 721-7292 E-mail: {st illey, hausi, morgun}@csr. uvic. ca Abstract Software professionals 
rely on internal documentation as an aid in understanding programs. Unfortunately, the documentation 
for most programs is usually out-of-date and cannot be trusted. Without it, the only reliable and objective 
information is the source code itself. Personnel must spend an inordinate amount of time exploring the 
system by looking at low-level source code to gain an un­ derstanding of its functionality. One way of 
producing accurate documentation for an existing software system is through reverse engineering. This 
paper outlines a reverse engineering methodology for building subsystem structures out of software building 
blocks, and describes how documenting a software system with views created by this process can produce 
numerous benefits. It ad­ dresses primarily the needs of the software engineer and technical manager 
as document users. Key words: Software documentation, reverse engi­neering, software maintenance. Introduction 
 As today s software ages, the task of maintaining it be­ comes both more complex and more expensive. 
A con­ tributing factor to this cost increase is the generally poor t This work was supported in part 
by the IRIS Federal Cen­tre of Excellence, the Natured Sciences and Engineering Research Council of Canada, 
the British Columbia Advanced Systems In­stitut e, Science Council of British Columbia, the University 
of Victoria, and IBM Canada Ltd. $The positio~ expressed herein are solely the views of the authors and 
are not a reflection of IBM Canada Ltd. s position. P~~qy*mtf*~ m~tititidk_~Wtitie copicsarenotmsdeor 
(k@nued for direct conmszcid advantag+ the ACM CO@ght notice and the title of thepublicatim snd its dste 
a-and nodre is given thst copying is by mm of the As.uxisticm for Computing Msckkry. To -y othawisq or 
to VbW, XIX@= afee sndkr qecifie pmnkim. condition of the software. This can be partly attributed to 
the lack of accurate documentation, the unstructured programming methods used in the system s design, 
the fact that the original system designers and programmers are no longer available, and the complication 
that thle software has been changed several times since its first release, and thus has evolved into 
something different from the original [1, 2, 3, 4]. Of these deficiencies, the lack of detailed, accurate, 
and up-to-date program documentation is critical for soft­ware engineers and technical managers responsible 
for the maintenance of existing software systems. Witlh­out it, the only reliable and objective information 
is the source code itself [5]. Maintenance personnel must spend an inordinate amount of time attempting 
to cre­ate an abstract representation of the system s high-level functionality by exploring its low-level 
source code. With software maintenance routinely consuming upwards of 50% of a product s lifecycle and 
budget [6], any improve­ment in documenting a program s evolution and overidl architect ure would ease 
the tasks of the maintenance team. One way of producing accurate documentation for an existing software 
system is through reverse engin­ eering. Reverse engineering is the process of extracting sys­tem abstractions 
and design information out of exist­ing software systems for maintenance, re-engineering, and reuse. 
This process involves identifying software artifacts in a particular representation of a subject s:ys­tem 
via mental pattern recognition by the reverse engi­neer, and the aggregation of these artifacts to form 
more abstract system representations. A reverse engineering methodology is outlined in [7] for building 
subsystem structures out of software building blocks. This method­ology is supported by Rigi,l a system 
and framework for analyzing large software systems [8]. We have concentrated on investigating algorithms, 
tech­ 1Rigi is named after a mountain in central Switzerland. niques, and tools for the composition, 
analysis, and pre­ sentation of subsystem structures. In particular, we have focused on methods and algorithms 
for summariz­ ing software structures by building hierarchies of subsys­ tems [9]. The generated structures 
embody visual and spatial information that serve as organizational axes for the exploration and presentation 
of the composed sub­ system structures. These structures can be augmented with views: hypertext (and 
potentially multimedia) an­ notations that highlight different aspects of the soft­ ware system under 
investigation. Our semi-automatic reverse engineering methodology can serve as a precur­ sor for maintenance 
and re-engineering applications, as a front-end for conceptual modeling and design recovery tools, as 
a documentation and program-understanding aid for large software systems, and as input to project decision-making 
processes. This paper shows how documenting a software system with views created through reverse engineering 
can be used to provide numerous benefits. The next section de­scribes some of the deficiencies of traditional 
methods of software document ation. Section 3 explains why visual and spatial information play a crucial 
role in program understanding, and how Rigi uses views for software documentation. Section 4 highlights 
some of the bene­fits that reverse engineering and documenting a software system with views can bring. 
Section 5 reports on some of our early experience of applying and using Rigi on real-world software systems. 
2 Deficiencies in traditional documentation techniques The documentation for a typical project must serve 
a di­verse group of readers. Two very distinct audiences are authors and end-users. The former includes 
both soft­ware engineers and t ethnical managers: they require an internal view of the system to understand 
how it actu­ally works. The latter requires an external view, which may include a description of the 
program s functional­ity and a tutorial on how to use it. While the exter­nal view of a program may change 
very little over its lifetime-even if its functionality is enhanced the pro­gram s internal architecture 
might change dramatically. In an ideal situation, the internal documentation would be continually updated 
to reflect frequent changes in the source code. In practice, documentation and source code are not always 
synchronized. This sect ion concen­trates on documentation deficiencies as they relate to the first group: 
authors. High-quality documentation is widely recognized as an important part of any software system 
[10]. It has a significant effect on program understanding. Software engineers and technical managers 
base many of their project-related decisions on their understanding of the architecture of the software 
systems they are responsi­ble for. While they rely on original design documents, maintenance histories, 
and experienced project mem­bers (if they are available) to help them understand how a program works, 
internal documentation is of­ten their primary source of information. Hence, the most obvious way to 
support program comprehension is to produce and maintain adequate documentation [11]. Regrettably, documentation 
for most older programs is sadly out-of-date. One reason for the general lack of quality documenta­tion 
may be that preparing software documentation is usually one of the last activities to take place during 
program development. Software document ation seems to be of little interest to the development community; 
it is the poor stepchild of most software development efforts [12]. If is often considered something 
to be put off until the last possible moment; in many cases, it is postponed indefinitely. While there 
do exist model programmers who carefully document design and im­plementation decisions while developing 
a piece of code, usually documentation is tacked on as an after-thought. Other pressures of day-to-day 
development seem to take precedence over documentation. These may include the following: Getting versions 
of the software to the testing de­partment or customer beta-test sites.  Managers feeling that the project 
s schedule is slip­ping and hence all extras must be eliminated to meet the deadline.  Programmers moving 
on to new projects.  Another contributing factor to the inadequacy of most software documentation is 
the age and maintenance his­tory of the software. Managing complexity and support­ing evolution are two 
fundamental problems with large­scale software systems [13]. Keeping the documentation in synchronization 
with the program s evolution is given a lower priority than getting the code fixed or enhanced, and is 
often left until later which may mean never at all. The philosophy of get it working quickly, with­out 
keeping the documentation up-to-date, is doomed to failure. As changes to the program continue, the orig­inal 
documentation quickly becomes useless. A direct consequence is the increased time required by software 
engineers to understand the system. The short-term gain of getting the program fixed and shipped as soon 
as possible will be overwhelmed by the long-term in­crease in costs. It is a common misconception that 
maintenance is eas­ier than new development. Consequently, new program­mers are often placed in maintenance 
situations when they start a new job. Since they have not been involved in the product s development 
prior to maintaining it, they become heavily reliant on support documentation. Software documentation 
has many different audiences. Different levels of documentation are required for the ca­sual user of 
a program, for the developer familiar with the code, for the maintainer unfamiliar with the sys­tem, 
for testers and technical writers trying to under­stand its functionalist y, and project management per­sonnel 
looking for the big picture : an external view of the system s architecture and history [14, 15, 16]. 
A person browsing a file attempting to get an overview of its functionality may be satisfied with short, 
descriptive comments concerning algorithms, data structures, and design decisions that affected the file. 
A fellow devel­oper may require detailed information about a particu­lar function. With traditional source-code 
documentation, it is very difficult to provide different levels of information to such a diverse community. 
Although each person may have different objectives, everyone will see the same thing: in­line and block 
commentary with the source code, and original design documents and maintenance logs.2 It would be far 
better to be able to provide each user with a view of the program that suited their needs. Rigi accomplishes 
this goal with views. 3 Using views for program documentation The Rigi system uses views to direct the 
user s focus on visual data and to guide the exploration of spatial data to support program documentation 
and understanding. Such a view represents a particular state and display of a software model. In the 
realm of software struc­ture modeling and analysis, spatial and visual repre­sentations of artifacts 
seem to be the key to forming mental models of software structures [17]. The spatial component constitutes 
information about the relative positions of the meaningful parts of a software struc­ture, whereas the 
visual component supplies informa­tion about how a software structure looks. The reverse engineer exploits 
both spatial and visual information when identifying components and building abstract ions. The Rigi 
editor is an interactive graph editor that al­lows the reverse engineer to maintain software struc­tures 
stored in a graph database [18]. It supports a 2Assuming these documents exist at all. variety of operations 
to manipulate visual and spatial represent ations of graph structures. Among Rlgi s most important visual 
representations are overviews and pro­jections. System overviews can be depicted in various patterns 
and arrangements using graph editor opera­tions such as grouping, scaling, layout, and filtering Projections 
are overviews at different levels of detail. Different views of the same software model can be usec[ 
to address a variety of target audiences and applications. Views can be collected into sequences to form 
relatecl sets of documentation, to represent guided tours for tu­torial purposes, to highlight system 
components that need to be analyzed and understood when performing specific maintenance or re-engineering 
tasks, to sum­marize change, impact, or performance analyses, or to annotate critical sections with measurements 
that serve as input to decision-making (for example, project prior­ities or personnel assignments). Figure 
1 shows an overview of tbl: a document format­ting preprocessor for -&#38;off which enables tables to 
be typeset in the UNIX3 system [19]. The t bl program is writ ten in C and consists of 22 modules. Such 
a view might be used by management personnel to gain an urL­derstanding of the overall architecture and 
subsystem interaction, or by new employees just learning the sys­tem. Without such views, these users 
would be forced to read through many thousands of lines of source codle to even begin to understand the 
system s functionality and architecture. Several views of the same system, at different levels of detail 
targeted to diverse users, are described in Section 4. 4 Benefits Reverse engineering a software system, 
and subsequently documenting it using views, can provide numerous ben­efits. The views can be used to 
aid management dec­isions, recover lost information, and improve system comprehension. Each of these 
benefits are discussed b,e-Iow. 4.1 Aiding management decisions One of the biggest advantages of reverse 
engineering a software system with Rlgi can be realized by man­agement personnel. Project management 
and planning at inost corporations is a complicated process. T he software systems they are responsible 
for exist in var­ious life-cycle stages: new product development, test­ 3UNIX is a trademark of AT&#38;T 
Bell Labs. P Standard Window (74.s152%) -src - FE1 Load View 3 Figure 1: A high-level view ing, maintenance 
of existing code, and different ver­sions. Management personnel must also manage the human element of 
the project: identify the strengths of team members, allocate resources based on various needs (both 
personal and financial), incorporate new personnel into the project, and compensate for the de­parture 
of experienced staff. Other considerations in­clude funding, experience and talents of the people avail­able, 
schedules, effect on other products and develop­ment groups, and market analysis. All of these things 
make the task of management very difficult. This prob­lem is exacerbated when the complexity of the project, 
both technical and organizational, threatens to over­whelm even the most prepared managerial personnel. 
Because of this complexity, many managers rely on in­put from other sources to help make their decisions. 
Since they may lack in-depth technical knowledge of the products they are managing, they must rely on 
data provided by members of their team, gut feelings, and of the tbl program s architecture experience. 
For these reasons, software analysis tools such as Rlgi can aid the project manager in making im­ portant 
management decisions that will affect the out­  come of the project. Views can aid in making decisions 
such as where to allocate precious funds, where to place key personnel, and where to concentrate effort 
for max­imum pay-back by exposing system structure and mod­ule dependencies. The graphical representation 
of the system makes central and fringe components immedi­ately obvious. One can then tailor activities 
such as testing, monetary and personnel allocation, and subse­quent development efforts on the components 
desired. Dead code is quickly identified and can be eliminated from the system, thereby reducing overall 
complexity and maintenance. The view shown in Figure 1 can be used by managers as a guide to the high-level 
architecture of the tbl program. The view in Figure 2 which depicts the same program but at a different 
level of detail might be used to as­sign work to personnel in areaa of the system best suited to their 
knowledge and experience, based on the visual information provided by the spatial relationships of cen­tral 
and fringe components. The highlighted nodes are central components, hence modifying them should be done 
with care, preferably by experienced personnel. -L r El Arc Threshold Exact Interf ace Wmber of Acss 
&#38; 1 ~zo( )= a &#38; mde TYDe @ CenWal Arc Direction @ Both Arc Type @ Composite J Provisions -32 
a Standard Window C74.51 S2%) -src Internal 1zat? ons -16S a0 . ----­ ~ Exact Interface f Qr subsystem 
tabl eput: B m. main Provlslons -1 I ----­ ~ rp ---l--­  ,; !g ~ 1 .1[ I swapln M. J = table put 
/ /%, /\ =.: /\ IJ / \ I/ . / \, /, ~ ~ rm m!!.-1 A prOees~biS save fill mode restcie fill mode m 
 3 rigiedit -/neWkulm/kulm/cYsti lley/riUi/db/rig ipool/aIIocate.txt, din = the threshold set by the 
reverse engl neer i n the control panel) can be identi fled. The Exact InterFace wi ndow shows the exact 
provisions and requi resents OF each central component.+  Figure 2: Allocating personnel based on component 
location 4.2 Recovering lost information tenance. If they are, the updates resemble appendices to the 
original, and the documentation quickly becomes difficult to follow. The reverse engineering facilities 
prc+ Reverse engineering can produce consistent and accu­ vialed by Rigi allows one to produce an accurate 
op­rate documentation. As large systems evolve over their erational design document describing the architecture 
product life-cycle, information concerning the original of the software system s current state-not that 
of the design is Iost. Even if the system was designed using original system before numerous maintenance 
changesmodern software engineering principles of modulariza­ were made. tion and information hiding, 
the original design becomes compromised during maintenance. Bug fixes and en-Many end-user documents 
are becoming available onL­hancements that seem small at the time soon resemble line, either as a replacement 
of, or in addition to, tradi­patches instead of a smooth extension of the original tional hardcopy manuals. 
For existing systems, work is code. A side-effect of these changes is that documenta­ also going on to 
move the traditional documentation tion is usually not kept up-to-date. from hardcopy to online and hypertext 
mediums (for ex­ample, [20]). The methodology presented here provides Even worse is documentation that 
no longer reflects a twc-fold benefit that is analogous to the moderniza­reality; the code has changed 
but the documentation tion of end-user documentation. Firstly, the reverse en­has not. One often relies 
heavily on programmers who gineering process produces accurate and up-to-date doc­know the system intimately, 
or one invests substantial ument ation; it does not directly rely on existing source­ amounts of time 
for maintainers to explore and learn code annotations. Secondly, the views created are not the system. 
Given time, most programmers will at­ just textual; they can serve as hypertext documenti~­tempt to keep 
in-line documentation and source code tion that augments traditional source-code commentary.synchronized, 
but project work books and higher level However, there is no reason to limit the view concept design 
documents are rarely updated to reflect main­ to textual and two-dimensional graphical images. The online 
documentation produced by the reverse engineer can (in theory) be true multimedia, including graphics, 
images, voice, and even video [21], in which the original software engineer explains the program.4 New 
software development projects may use and pro­duce a variety of technical documents, such as design specifications, 
performance goals, functional specifica­tions, design decisions, and maintenance logs. These may be found 
in-line with the source code, as tradi­tional hardcopy documents, or (in the most modern systems) online 
in various hypertext and multimedia formats. Unfortunately, older software systems rarely provide such 
a wide range of documentation. Typically all that is available is a single document that is used to represent 
the entire system. However, during reverse engineering, a variety of docu­ ments and graphical representations 
of the system can be generated by Rigi. These views of the system can be saved and replayed at a later 
date, serving as tutorials for other team members, as operational design docu­ ments, or as system overviews 
for management person­ nel and external documentation. For example, a more detailed view describing the 
three high-level susbsytems of the tbl program is shown in Figure 3. This view might be used by the maintainer 
responsible for this part of the system; it provides a description (both graphical and textual) of the 
subsystem s structure. Hence, the programming team can rely less on chief (or original) programmers 
who may not be available-and more on automated tools to provide them with the knowledge they need to 
better understand the system. Reverse engineering the system can recover some of the original design 
decisions. The salvaging of corporate knowledge from earlier projects can greatly improve the quality 
of new projects, as well as reduce cycle time from design to delivery. Full design recovery is the next 
step after reverse engineering, and semi-automatic tools such as Rlgi are a step in this direction. 4.3 
Improving system comprehension When faced with the task of maintaining a software sys­tem, system comprehension 
is typically the most impor­tant prerequisite. Educating new members of the devel­opment team is a never-ending 
and important aspect of most software development companies. These education sessions are often held 
informally, by having new em­ployees sit down with experienced developers who then explain the code to 
them. Rigi offers a semi-automated 4Multimedia program documentation is an area of research we are planning 
on pursuing in the future. alternative to this education problem. For example, visible in the bottom-right 
corner of Fig­ure 2 is the Load View window. This window contains a scrollable list of views that may 
be investigated at the user s convenience. Taken together, these views form an introductory tutorial 
describing all of the tbl pro­gram s architecture and call structure. Such a tutorial might be used by 
new personnel as an aid in program understanding. Graphical representations have long been accepted as 
comprehension aids. The Rigi system allows the soft­ware system to be viewed in a variety of ways. This 
graphical representation of information can greatly in­crease one s understanding of the software system. 
The new employees can work with the code and explore the entire system on their own, using the spatial 
and visual information, views, and linked documentation [22] to guide them in understanding the software 
system. As they gain knowledge about the system from examina­tion of the source code and the tutorial 
views, they can record this information by creating new views, either for themselves or for the whole 
maintenance team. Rigi al­lows views to be either local or global, which enables the user to save views 
of the software system that they find useful for their particular task, yet still be able to look at 
different views of the same software system created by other members of the team. Rigi also provides 
textual information (for example, soft­ware quality measures [23] ) that augment the graphical displays. 
The same mechanism can be used to present an overview (or a detailed discussion) of some or all of the 
software system to other management personnel, other departments, or other development teams. In this 
way, a high-level understanding of the system is dissem­inated throughout the organization. Each user 
will have his/her own requirements for sys­tem comprehension. Managerial personnel might use the high-level 
view shown in Figure 1. Software engi­neers unfamiliar with the system might use the tuto­rial views 
as shown in Figure 3. Experienced personnel which require detailed knowledge of subsystem architec­ture 
might also use some of the views available in the tutorial, or a lower-level view describing the hierarchi. 
cal structure of any subsystem. Figure 4 depicts just such a view: the arc hierarchy of the proc ess 
table subsystem. It is not just time that is spent (relearning the system. The monetary cost of understanding 
software is signifi­cant, and it is multiplied every time a new person must learn the system anew. The 
views generated by reverse engineering can greatly reduce the overall cost of soft­ware by lessening 
the time required to understand the El Standard Window (74.S1.S2%) -st t standard Window (96.s30s%) 
-process table v F+ -. -r- ­ ~D 8 == ,, F ta~eput A. , // \.. : /\ / standard window (100%) -mstors 
fill mode / m prwe5@rW iave fill mode m Standard Window (100%) -save fill mode 3 rigiedit -/net/kulm/kulm/c/sti 
lley/rigi/db/rig ipool/dstailed4xt, di~ = I_he three rnaln Darts of the tbl the process table. rnindau. 
this 1s c1earl the most complicated part of the ?nti re program It is made up of four furt 1er susbsy 
tens. each of which ml d be explored to the desi red 1evel.  Figure 3: A detailed view of the three 
main subsystems system. When a programmer is assigned a particular maintenance task, often he/she has 
little knowledge of the overall system design. A system such as Rigi can provide (subsystem overviews 
at various levels of de­tail. Conclusions Rigi is a versatile framework for analyzing large soft­ware 
systems. Many of its capabilities can be used to document existing software systems for program under­standing 
and maintenance purposes, and by manage­ment personnel to support some of the complex deci­sions they 
face in project management. These include resource allocation, personnel placement, system com­prehension, 
investigations into reuse potential, and in­formation recovery. We have successfully applied our reverse 
engineering methodology to several real-world software systems. In 1990, we analyzed the Practice Manager 
a 57,000 line COBOL program by Osler Management Inc. of Victoria [24]. It is a comprehensive software 
system for the man­agement of physician s practices in British Columbia. The main purpose of the analysis 
was to build up-to­date subsystem structures to assess the quality of the entire system with respect 
to maintenance and to iden­ tify subsystems that are candidates for re-engineering. In 1991, we analyzed 
an 82,000 line C program for the isotope separator experiment at TRIUMF in Vancou­ver. The main objective 
of the analysis was to iden­tify components for re-engineering. In late 1992 we are planning to analyze 
a large commercial database man­agement system in conjunction with IBM Canada Ltd. References [1] Giri.sh 
Parikh and Nicholas Zvegintzov, editors. T.to­rial on Software Maintenance. IEEE Computer Society Press, 
1983. [2] Peter Freeman, editor. Tutorial: Sofiware Reusability. IEEE Computer Society Press, 1987. c 
E Standsrd Window (74.165S.%1-wc main &#38;I - l--- MOD   r24., I== n,,m ,,ry == swap, n1Q.bleput 
/A\ ,5/\ .: ,21 Are Hieramhv for node @m=ss table Display ~ All Tyme @ Level Subtype ~ Syntactic -= 
 iii.-:jziolll pwes~c+a Tr lm n= Standard Window [87976S% -process tab Ie HI 1­ ?fill mode IL4ES3 14m-k 
Oducgm.s- ---lz-­ ~~;  -,4$2. . . -. \\ J -. v / Fg 11 Figure 4: The arc hierarchy for the process 
table subsystem [3] Will Tracz, editor. Tutorial: Teclwznoiogy. IEEE Computer [4] David H. Longstreet, 
editor. tenance and Computers. IEEE 1990. Software Reuse: Emerging Society Press, 1988. Tutorial: Software 
Main-Computer Society Press, [5] Nigel T. Fletton and Malcolm Munro. Redocument­ing software systems 
using hypertext technology. In Proceedings of the IEEE 1988 Conference on Software Maintenance, pages 
54-59, October 1988. [6] Nicholas Zvegintzov. Nanotrends. Datasnation, pages 106-116, August 1983. [7] 
H.A. Miller, B.D. Corrie, and S.R. Tilley. Spatial and visuzd representations of software structures: 
A model for reverse engineering. IBM Canada Ltd., April [8] Hausi A. Miiller. Rigi -Construction, Integration, 
s.deInter/ace Specifications. August 1986. Technical Report TR-74.086, 1992. A Model for Software System 
and Evolution based on Mod-PhD thesis, Rice University, [9] H.A. Miiller and J .S. Uhl. Composing subsystem 
struc­tures using (k,2)-partite graphs. In Proceedings of the Conference on Software Maintenance 199o, 
(San Diego, California, November 26-29, 1990), pages 12­19, November 1990. [10] Jane E. Huffman and Clifford 
G. Burgess. Partially automated in-line documentation (PAID): Design and implementation of a software 
maintenance tool, In Pro­ceedings of the IEEE Conference on Software Mainte­nance 1988, pages 60 65, 
October 1988. [11] Johannes Sametinger. A tool for the maintenance of C++ programs. In Proceedings o,f 
the IEEE 199o Con­ ference on Software ber 1990. [12] L.D. Landis, P.M. Documentation in In Proceedings 
of Maintenance [13] Frederick P. accidents of 20(4):10-19, [14] Frederick P. Addison-Wesley, [15] P. 
J. Brown. Practice and [16] Duane Ressler 1988, Maintenance, pages 54-59, Novem- Hyland, A.L. Gilbert, 
a software maintenance the IEEE Conference pages 66-73, October Brooks Jr. No silver bullet: and A.J. 
Fine. environment. on Sofiware 1988. Essence and software engineering. IEEE Computer, April 1987. Brooks 
Jr. The Mythical Man-Month. 1982. Interactive documentation. Software Experience, 16(3), March 1986. 
 and Dee Stribling. Designing and proto­ typing a portable hypertext application. In SIGDOC 90 Conference 
Proceedings, pages 88-94, October 1990. [17] S.M. Kosslyn. Image and Mind. Harvard University Press, 
1980. [18] H.A. Miiller and K. Klashinsky. Rigi A system for programming-in-the-large. In Proceedings 
of the 10th International Conference on Software Engineering (ICSE), (Raves City, Singapore, April 11-15), 
pages 80-86, April 1988. [19] M.E. Lesk. Tbl A program to format tables. Tech­nical report, AT&#38;T 
Bell Laboratories, October 1986. [20] Vicki Coleman. Hardcopy to hypertext: Putting a tech- Ncal manual 
online. In Proceedings of SIGDOC 91, (Chicago, IL, Oct. 10-12), pages 67-72, October 1991. [21] Frank 
A. Cioch. An audiovisual document for software maintenance. In Proceedings of the IEEE 1988 Confer­ence 
on Sojhuare Maintenance, pages 390-394, October 1988. [22] Scott R. Tilley and Hausi A. Miiller. INFO: 
A simple document annotation facility. In Proceedings of SIG­DOC 91, (Chicago, IL, Oct. 10-12), pages 
30-36, Oc­tober 1991. [23] H.A. Miiller. Verifying software quality criteria using an interactive graph 
editor. In Proceedings of the Eighth Annual Pacijic Northwest Software Quality Conference, (Portland, 
Oregon, October 29-31), pages 228-241, Oc­tober 1990. [24] H.A. Miiller, J.R. M6hr, and J.G. McDaniel. 
Apply­ing software re-engineering techniques to health infor­mation systems. In Proceedings of the IMIA 
Working Conference on Software Engineering in Medical Infor­rnatics (SEMI), (Amsterdam, October 8-10, 
1990), Oc­tober 1990.  
			