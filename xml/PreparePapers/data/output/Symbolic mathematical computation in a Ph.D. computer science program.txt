
 Symbolic Mathematical Computation in a Ph.D. Computer Science Program* by B. F. Caviness 1'2 G. E. 
Collins I I Computer Sciences Department 2 Mathematics Research Center- University of Wisconsin Madison, 
Wisconsin Considering how many fools can calculate, it is surprising that it should be thought either 
a difficult or a tedious task for any other fool to learn how to master the same tricks .... Being myself 
a remarkably stupid fellow,...[I] now beg to present to my fellow fools the parts that are not hard. 
Master these throughly and the rest will follow. What one fool can do, another can. Silvanus P. Thompson 
(1919) INTRODUCTION is an important component of most symbolic mathe- matical computational systems. 
Actually the dis- This paper describes a graduate course cur- tinction between numerical and nonnumerical 
algo- riculum, currently being taught, in the area of rithms is quite fuzzy. Consider exact computations 
 symbolic mathematical computation. The subject in a subfield of the field of complex numbers in area 
is described and is then followed by a which the subfield is a finite extension of the description 
of the courses. A bibliography for field of rational numbers. Although only numbers each course is 
also given. The relationship of are involved, the calculations are calculations on the symbolic mathematical 
computation curriculum multivariate polynomials and/or rational functions to an overall Computer Science 
curriculum is dis- over the rational field since in order to do the cussed. Ph.D. theses which have 
been written are calculation exactly, quantities like ~ and ~must listed and some topics for future 
research are be handled in a manner similar to the way indeter- outlined. The paper ends with a summary 
of the minates are handled in polynomial and rational strengths and weakensses of the curriculum. 
function calculations. Traditional symbolic mathematics (if there is SUBJECT AREA such a thing) includes 
the study of algorithms for Symbolic Mathematics is the study of algo- computations with polynomials 
and rational func- rithmic procedures for manipulating symbols that tions. We call this area alsebraic 
al$0rithms. represent mathematical objects. Important compo-Calculations with elementary transcendental 
nents of this study are the development of new functions are also an important part of symbolic algorithms, 
theoretical and empirical analyses of mathematics. We denote the study of such calcu- old and new algorithms, 
and the development of lations by the phrase transcendental function al- computer systems for the implementation 
and use of $orithms. Here also we observe that the distinc- such algorithms. tion between algebraic and 
transcendental function Symbolic mathematical computation includes algorithms is not sharp. The integration 
of ratio- the study of numerical as well as nonnumerical nal functions, for instance, could be considered 
a algorithms. Exact or infinite-precision arithmetic problem in either algebraic or transcendental func- 
 tion algorithms since the complete integral in- volves, in general, logarithmic terms. But the problem 
can be restricted so that only the rational *National Science Foundation Grants GJ-239, part of the 
integral is computed and then no transcen- GJ-434 and GJ-30125X and U.S. Army Contract dental functions 
enter into the calculations. Never- DA-31-124-ARO-D-462 supported the development of theless the distinctions 
between numerical, algebraic much of the material taught in the courses dis- and transcendental function 
algorithms are useful ones cussed in this paper. and form broad guidelines for our curriculum design 
as 19 will be seen later. The study of algorithms in any branch of mathematics would, according to 
our original defi- nition, be a part of symbolic mathematics. And indeed there are important instances 
of automated calculations in such areas as group theory, ten- sors and topology. However our curriculum 
is re- stricted almost entirely to the study of arith- metic, algebraic and transcendental function algo- 
rithms for reasons given later and hence these other areas will not be discussed further. COURSE DESCRIPTIONS 
 Currently a four-semester sequence of courses is being offered in symbolic mathematical compu- tation 
in the Computer Sciences Department at the University of Wisconsin. Detailed catalog-type descriptions 
are given below for each course. In general the courses emphasize the development of efficient algorithms 
with particular attention paid to the mathematical foundations of the algorithms, their computer implementations, 
and analyses of their computing times. The first semester is offered at the senior and first-year graduate 
level on exact numerical computations. The course covers infinite-precision integer, rational, modular, 
interval and Gaussian- integer arithmetic. The second, third and fourth semesters are graduate courses 
which are normally taken in the second year or later. The second semester covers the fundamental operations 
on multivariate poly- nomials, emphasizing recently-discovered modular homomorphism algorithms and culminates 
with poly- nomial greatest common divisor and resultant algo- rithms. The third semester topics include 
basic operations on rational functions, exact solution of systems of linear equations with polynomial 
coefficients, exact calculation of polynomial zeros, and multivariate polynomial factorization. The 
fourth semester deals with operations on the elementary transcendental functions and empha- sizes the 
representation (or simplification) prob- lem and indefinite integration. A detailed description of each 
course follows: Course I-Arithmetlc Algorithms. 3 hours/week. Review of data structures and list processing. 
Analysis of algorithms: dominance and codominance, maximum, minimum and average computing times. Infinite-precision 
integer arithmetic algorithms: addition and subtraction, multiplication (classi- cal and fast), division, 
greatest common divisors (classical, extended, Lehmer and Knuth algorithms), base conversion and input-output. 
Rational number arithmetic: classical and Henrici-Brown algorithms. Modular arithmetic: addition, subtraction, 
multi- plication, division (computing multiplicative in- verses in GF(p) ), Euclidean algorithm, Fermat's 
 theorem, Chinese remainder theorem, prime number generation. Exact interval arithmetic. Gaussian- integer 
arithmetic including greatest common divisor calculations. Additional topics: finite field arithmetic, 
factorization of integers. Prerequisites: Elementary Calculus and Introduction to Data Structures. 
Bibliography i. B. F. Caviness, A Lehmer-type Greatest Common Divisor Algorithm for Gaussian Integers, 
 (In preparation). 2. B. F. Caviness, M. R. Newton and T. P. Vaughan, The SAC-i Gaussian-lnteger Arithmetic 
and Poly- nomial System, (In preparation).  3. G. E. Collins, Algebraic Algorithms (In preparation). 
 4. G. E. Collins, Computing Multiplication In- verses in GF(p), Math. Comp,, Vol. 23, No. 105 (Jan. 
1969), pp. 197-200.  5. G. E. Collins, The SAC-i List Processing System, University of Wisconsin Computer 
Sciences Dept. Tech. Report #129 (July 1971), 34 pages.  6. G. E. Collins, et al, The SAC-i Modular 
Arith- metic System, University of Wisconsin Computing Center Technical Report #i0 (June 1969), 50 pages. 
 7. G. E. Collins and D. R. Musser, Analysis of the Pope-Steln Division Algorithm, University of Wisconsin 
Computer Sciences Department Technical Report #55 (Jan. 1969), i0 pages.  8. G. E. Collins and J. R. 
Pinkert, The Revised SAC-i Integer Arithmetic System, University of Wisconsin Computing Center Technical 
Report #9 (Nov. 1968), 50 pages.  9. J. D. Dixon, The Number of Steps in the Euclid- ean Algorithm, 
Jour. Number Theory, Vol. 2 (1970), pp. 414-422.  I0. J. D. Dixon, A Simple Estimate for the Number 
of Steps in the Euclidean Algorithm, Amer. Math. Monthly, Vol. 78, No. 4 (April 1971), pp. 374-376. 
ii. P. Henrici, A Subroutine for Computations with Rational Numbers, Jour. ACM, Vol. 3, No. i (Jan. 1956), 
pp. 6-9. 12. E. Horowitz, Modular Arithmetic and Finite Field Theory: A Tutorial, Proc. of the Second 
Symposium o nSymbolic and Algebraic Manipula- tion (March 1971), pp. 188-194.  13. D. E. Knuth, Seminumerical 
Algorithms, The Art of Computer Programming, Vol. II, Addison- Wesley Publishing Co., Reading, Mass., 
1969, pp. 229-360.  14. D. E. Knuth, The Art of Computer Programming- Errata et Addenda, Stanford University 
Computer Science Department Technical Report #STAN-CS- 71-194 (Jan. 1971), 28 pages.  15. D. E. Knuth, 
Mathematical Analysis of Algorithms, Stanford University Computer Science Department Technical Report 
#STAN-CS-71-206 (March 1971), 26 pages.  16. R. E. Moore, Interval Analysis, Prentice-Hall, Inc., Englewood 
Cliffs, N. J., 1966.  Course II-A!gebraic Algorithms I. 3 hours/week. Review of analysis of algorithms. 
Multivariate integral polynomials: internal and external rep- resentations, input-output, erasure. Modular 
homo- morphisms and Chinese remainder algorithms. Evalu- ation homomorphisms and interpolation. Modular 
al- gorithms for polynomial multiplication and division. Polynomial remainder sequences and subresultants-- 
the fundamental theorem. Polynomial resultant cal- culation. Unique faetorization domains, Euclidean 
domains, GCD domains. Finite divisibility. Units and representatives. Polynomial greatest common divisor 
algorithms. Prerequisites: Arithmetic Algorithms and Modern Algebra. Bibliography i. W. S. Brown, 
On Euclid's Algorithm and the Computation of Polynomial Greatest Conmnon 20 Divisors, Jour. ACM, Vol. 
18, No. 4 (Oct. 1971), pp. 478-504. 2. W. S. Brown and J. F. Traub, On Euclid's Algo- rithm and the 
Theory of Subresultants, Jour. ACM, Vol. 18, No. 4 (Oct. 1971), pp. 505-514.  3. G. E. Collins, The 
SAC-i Polynomial System, University of Wisconsin Computer Sciences Department Technical Report #115 (March 
1971), 66 pages.  4. G. E. Collins, The SAC-i Polynomial GCD and Resultant System (In preparation). 
 5. G. E. Collins, Subresultants and Reduced Poly- nomial Remainder Sequences, Jour. ACM, Vol. 14, No. 
1 (Jan. 1967), pp. 128-142.  6. G. E. Collins, et al, The SAC-i Modular Arith- metic System, University 
of Wisconsin Computing Center Technical Report #i0 (June 1969), 50 pages.  7. G. E. Collins, The Calculation 
of Multivariate Polynomial Resultants, Jour. ACM, Vol. 18, No. 4 (Oct. 1971), pp. 515-532.  8. I. N. 
Herstein, Topics in_ Algebra, Ginn &#38; Co., Waltham, 1964.  9. N. Jacobson, Lectures in Abstract Algebra, 
Vol. 1 (Basic Concepts), D. Van Nostrand Co., New York, 1951.  i0. D. E. Knuth, The Art of Computer 
Programming, Vol. 1 (1968), Vol. II (1969), Addison-Wesley, Reading, Mass. ii. J. D. Lipson, Chinese 
Remainder and Interpola- tion Algorithms, Proc. of the Second Symposium on Symbolic and Algebraic Manipulation 
(March 1971), pp. 372-391. 12. B. L. van der Waerden, Modern Algebra, Vol. I, Ungar Publ. Co., New York, 
1953 (second ed.). Course lll-Algebraic Algorithms II. 3 hours/week. MultiVariate integral rational 
functions: canoni- cal form and representation, arithmetic operations, differentiation and substitution. 
Linear systems with polynomial coefficients: determinant calcu- lation, solution of equations, matrix 
inversion, null space calculation. Exact calculation of poly- nomial zeros: Sturm's theorem, Routh-Hurwitz 
 theorem, isolation and refinement. Polynomial factorization: finite fields, Berlekamp's algo- rithm, 
Hensel's lemma, cyclotomic polynomials, Musser's theorem. Prerequisite: Algebraic Algorithms I. Bibliography 
 i. E. H. Bareiss, Computational Solutions of Matrix Problems over an Integral Domain, Argonne National 
Laboratory Tech. Memo. No. 222 (Dec. 1970), 76 pages. 2. E. R. Berlekamp, Algebraic Coding Theory, McGraw-Hill, 
New York, 1968.  3. E. R. Berlekamp, Factoring Polynomials over Large Finite Fields, Math. Comp., Vol. 
24, No. iii (July 1970), pp. 713-735.  4. I. Borosh and A. S. Fraenkel, Exact Solutions of Linear Equations 
with Rational Coefficients by Congruence Techniques, Math. Comp., Vol. 20, No. 93 (Jan. 1966), pp. 107-112. 
 5. S. Cabay, Exact Solution of Linear Equations, Proc. of the Second Symposium o__n Symbolic and Algebraic 
Manipulation (March 1971), pp. 392-  398.  6. G. E. Collins and L. E. Heindel, The SAC-i Polynomial 
Real Zero System, University of Wisconsin Computer Sciences Department Techni- cal Report #93 (August 
1970), 72 pages.  7. G. E. Collins, The SAC-i Rational Function System, University of Wisconsin Computer 
Sciences Department Technical Report #135 (Sept. 1971), 31 pages.  8. G. E. Collins and M. T. McClellan, 
The SAC-i Polynomial Linear Algebra System, University of Wisconsin Computer Sciences Department Technical 
Report (In preparation).  9. G. E. Collins and D. R. Musser, The SAC-i Polynomial Factorization System, 
University of Wisconsin Computer Sciences Department Technical Report (In preparation).  i0. L. E. 
Heindel, Algorithms for Exact Polynomial Root Calculation, Ph.D. Thesis, University of Wisconsin Computer 
Sciences Department, Aug. 1970, 153 pages. ii. L. E. Heindel, Integer Arithmetic Algorithms for Polynomial 
Real Zero Determination, Jour. ACM, Vol. 18, No. 4 (Oct. 1971), pp. 533-548. 12. J. A. Howell and R. 
T. Gregory, An Algorithm for Solving Linear Algebraic Equations Using Residue Arithmetic, BIT, Vol. 9 
(1969), pp. 200-224 and pp. 324-337.  13. J. A. Howell and R. T. Gregory, Solving Sys- tems of Linear 
Algebraic Equations Using Residue Arithmetic, BIT, Vol. i0 (1970), pp. 23-27.  14. D. E. Knuth, The 
Art of Computer Programming, Vol. I (1968), Vol. II (1969), Addison-Wesley, Reading, Mass.  15. M. Marden, 
The Geometry of Zeros of a Poly- nomial in a Complex Variable, Mathematical Surveys No. III, Amer. Math. 
Soc., Providence, 1949.  16. M. T. McClellan, The Exact Solution of Systems of Linear Equations with 
Polynomial Coeffi- cients, University of Wisconsin Computer Sciences Department Technical Report #136 
(Sept. 1971), Ph.D. Thesis, 258 pages.  17. D. R. Musser, Algorithms for Polynomial Factorization, University 
of Wisconsin Com- puter Sciences Department Technical Report #139 (Sept. 1971), Ph.D. Thesis, 174 pages. 
 18. H. Zassenhaus, On Hensel Factorization I, Jour. Number Theory, Vol. 1 (1969), pp. 291-  311. 
 Course IV-Transcendental Function Algorithms. 3 hours/week. Formalism for function class representations. 
Canonical and normal forms. Diophantine sets and relation to recursively enumerable sets. Richardson's 
theorem. Lindemann theorems. Canonical and normal form algorithms-- Brown, Caviness, Richardson and Johnson. 
Funda- mental operations on polynomials and rational functions with Gaussian integer coefficients. Fundamental 
operations on first-order exponentials. Integration of rational functions: classical and Hermite-Horowitz 
algorithms. Differential fields. Liouville integration theory. Risch indefinite integration algorithm 
for elementary transcenden- tal functions. Prerequisites: Algebraic Algorithms II and Re- cursive Function 
Theory. Bibliography I. W. S. Brown, Rational Exponential Expressions and a Conjecture Concerning ~ 
and e, Amer. Math. Monthly, Vol. 76, No. i (Jan. 1969), pp. 28-34. 2. B. F. Caviness, On Canonical Forms 
and Simpli- fication, Jour. ACM, Vol. 17, No. 2 (April 21 1970), pp. 385-396. 3. B. F. Caviness, M. 
R. Newton and T. P. Vaughan, The SAC-I Gaussian-Integer Arithmetic and Polynomial System, (In preparation). 
 4. B. F. Caviness, P. L. Pollack and C. M. Rubald, An Existence Lemma for Canonical Forms in Symbolic 
Mathematics, Info. Proc. Letters, Vol. 1 (1971), pp. 45-46.  5. G. E. Collins and E. Horowitz, The SAC-i 
Partial Fraction Decomposition and Rational Function Integration System, University of Wisconsin, Computer 
Sciences Department Technical Report #80 (Feb. 1970), 47 pages.  6. M. Davis, Computability and Unsolvability, 
McGraw-Hill Book Company, Inc., New York, 1958.  7. E. Horowitz, Algorithms for Partial Fraction Decomposition 
and Rational Function Integra- tion, Proc. of the Second Symposium o_n Sym- bolic and Algebraic Manipulation 
(March 1971), pp. 441-457.  8. E. Horowitz, Algorithms for Symbolic Integra- tion of Rational Functions, 
Ph.D. Thesis, University of Wisconsin Computer Sciences Department (Nov. 1969), 132 pages.  9. S. C. 
Johnson, On the Problem of Recognizing Zero, Jour. ACM, Vol. 18, No. 4 (Oct. 1971), pp. 559-565.  i0. 
Ju. V. MatiJasevic, Enumerable Sets are Di- ophantine, Soviet Math. Dokl., Vol. ii (1970). ii. J. Moses, 
Symbolic Integration: The Stormy Decade, Comm. ACM, Vol. 14, No. 8 (Aug. 1971), pp. 548-560. 12. D. 
Richardson, Some Unsolvable Problems In- volving Elementary Functions of a Real Vari- able, J_c Symbolic 
Logic, Vol. 33 (1968), pp. 514-520.  13. D. Richardson, Solution of the Identity Prob- lem for Integral 
Exponential Functions, Zeitschr. Math. Logik, Vol. 15 (1969), pp. 333-340.  14. R. H. Risch, The Problem 
of Integration in Finite Terms, Trans. Amer. Math. Soc., Vol. 139 (May 1969), pp. 167-189.  15. R. H. 
Risch, The Solution of the Problem of Integration in Finite Terms, Bull. Amer. Math. Sot., Vol. 76 (May 
1970), pp. 605-608.  There are no textbooks currently available which are entirely suitable for any 
of the above courses. Knuth's Volume Two of The Art of Com- puter Programming subtitled Seminumerical 
Algo- rithms covers many of the topics of the first two courses. Collins currently is working on a textbook 
that will cover at least the material of the first three courses. Much of the material in courses three 
and four appears in individual papers in the Proceedings of the Second Symposium o_n Symbolic and Algebraic 
Manipulation which was held in Los Angeles in March, 1971. A number of these papers also appear in the 
August, 1971 is- sue of the Communications of the ACM and the October, 1971 issue of the Journal of the 
ACM. RELATIONSHIP OF SYMBOLIC MATHEMATICAL CURRICULUM TO OVERALL COMPUTER SCIENCE CURRICULUM At the 
University of Wisconsin a doctoral student in Computer Science must pass a prelimi- nary examination 
in at least two of seven areas. The seven areas are (i) Algebraic and Combinato- rial Algorithms, (2) 
Artifical Intelligence, (3) Foundations of Computing, (4) Mathematical Pro- gramming, (5) Natural Language 
Processing, (6) Numerical Analysis and (7) Systems Programming. Symbolic mathematical computation is 
in the Alge- braic and Combinatorial Algorithms area along with graph theory and analysis of algorithms. 
 Any one of the areas of Foundations of Com- puting, Numerical Analysis or Systems Programming makes 
a suitable companion area for work in sym- bolic mathematics and most students should have some knowledge 
about all three of these supporting areas. A good preparation in mathematics, espec- ially algebra, is 
also necessary. Ph.D. THESIS RESEARCH To date four theses have been written in the area of symbolic 
mathematical computation and two more students are currently beginning work on theses, all under the 
supervision of G. E. Collins. The completed theses and their authors are: i. Ellis Horowitz, Algorithms 
for Partial Fraction Decomposition and Rational Function Integration, November, 1969, 132 pages. 2. 
Lee E, Heindel, Algorithms for Exact Polynomial Root Calculation, July, 1970, 153 pages.  3. Michael 
T. McClellan, Algorithms for Polynomial Linear Algebra, August, 1971, 258 pages.  4. David R. Musser, 
Algorithms for Polynomial Factorization. August, 1971, 174 pages.  There are practically unlimited 
possibilities for future dissertation research in this area. Some of the possibilities which are particularly 
ripe for more work include research on exact cal- culation of the complex zeros of polynomials, solution 
of systems of polynomial equations, quantifier elimination methods for the elementary theory of real 
closed fields, calculations with algebraic numbers, integration of multivariate rational functions, factorization 
of polynomials over algebraic number fields, better computing time analysis of various algorithms and 
theoretical investigation of various subalgorithms of the Risch integration algorithm. SUMMARY There 
are a number of aspects of symbolic mathematical computation that are almost entirely or completely 
ignored by the above curriculum. One such area is computing systems for symbolic mathematics. Although 
one such system, SAC-i (c.f., G. E. Collins, The SAC-I System: An Introduction and Survey, Proc. of 
the Second Sym- posium o nSymbolic and Algebraic Manipulation (March 1971), pp. 144-152) is examined 
in detail, the problems of language design and comparison, interactive systems and graphical input-output 
 are not considered. Also, as was mentioned before, no attention is given to symbolic calculations in 
 group theory, topology and other areas of mathe- matics not mentioned above. Applications in such 
areas as physics and astronomy are also not studied. The omission of these important topics in deference 
to the topics listed in the course descriptions reflects the interest of our faculty, although we certainly 
feel that the important fundamentals of the developing theory of symbolic mathematical computation 
are covered by our curri- culum. Also our students have an opportunity to 22 study systems programming 
in other courses so this aspect is not ignored in the overall educational program. We believe that our 
curriculum gives a stu- dent a strong foundation in those theoretical aspects of symbolic mathematics 
that will be a part of the field for many years to come. Further- more we believe the student develops 
a strong ap- preciation for the careful and orderly development and comparison of practical algorithms 
through both the theoretical and empirical analyses that are emphasized. 
			