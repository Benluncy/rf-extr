
 -...--. . -.,-. rrC ,.---,._-.-_. ., ,. _._,__.. -c, .~,., ~ .i,:r~--r~-..,-..-*,;~,~ Design and Implementation 
of an Interactive Tutqrial Framework ,,., Lewii B&#38;ne&#38; Justin Casi, David Green, and joseph F. 
Kent (Ibarnett I jcasp I dgreen2 I jkent@richmond.edu) Department of Mathematics ,and Computer Science 
I  University of Richmond Richmond, VA 23173 1. Introduction f The work described in this paper is 
@art of an NSF funded project* to develop tutorial materials for introductory com- puter science courses.We 
had several general goals for these materials that had an impact on their design andiimplemen- tation: 
/ I,,,,,: l they should be delivered on-line; l they should be highly interactive; l , they should be 
useful on a wide variety of hard; ware/software platforms; and it should be easy to extend the content 
to different courses or contexts. In trying to meet these goals we designed and implemented a package 
of Java classes that provided a framework for cre- ating our set of tutorials, yet was general enough 
to be used in other contexts such as interactive laboratories. This pa$er describes the framework and 
the design decisions that gov- erned the implementation. Information about obta&#38;g the package is 
included in section 7. 2. Project Organization Design of the project fell into two broad categories:, 
estab- lishing the feature set of the framework upon whrch,the tutorials would be built, and determining 
the tutorial content and organization. We set out to de&#38;n a software fiame- work that would support 
the develoIjment of interactive instructional materials, and then proceeded to construct the particular 
tutorials for this project using that framework. This paper focuses on the framework s design and imple- 
mentation. Design of the tutorial materials themselves is a separate issue and a detailed discussion 
is beyond the scope of this paper. However, what we wanted to be able to do in our tutorials did influence 
the feature set of the tutorial .* 1.NSF grant DUE-9652982. Permission to make digitaLhard copies of 
all or part of this material for personal or ~~~~m use is granted without fee provided that the cop&#38;are 
not made ordistributed for profit or commercial advantage, the ap+ right noh2, the title of the publication 
and its date appear, and notice is &#38; a ht wPyn &#38;t is by p&#38;ion of the ACM, Inc. To copy otherwise, 
to republish, to post on servers or to redistribute to lists, re@ra specific permission antior fee. SIGSCE 
98 AtlantaGA USA Copyright 1998 O-8979L994-7/9812..%5.00 fmmework, so we will cite examples from the 
tutorials themselves when it is useful. 3. Project Requirements . We wanted the framework to support 
many of the features that are familiar to users of Web browsers -hype&#38;&#38;s, nav-igation buttons, 
graphics, sound, and animation. The basic mot.8 of the software is that of an interactive, hyperlinked 
slide presentation with the understanding that a slide is the collection of information that is visible 
at. a given time. Slides could be purely textual, or they could contain images, animations, video clips, 
and/or opportunities for user input. Because we planned explanatory voice-overs for each slide, we considered 
support for audio to be very important. To enable use on computers which do not support audio output, 
the text of the voice-over could optionally .be viewed in a pop-up window. We anticipated modifying the 
content of the tutorials based on classroom experience, so the framework needed to be flexible and highly 
configurable. Modifying text, adding slidesor removing slides should be easy, and modifying the navigation 
paths should not require recompilation. For several reasons, we needed to be able to record informa: 
tion about the progress of individual students. From the stu- dent s point of view, such a capability 
would make it possible to suspend a tutorial, then resume it from the same . filace at a later time. 
For evaluation purposes, this capability would allow us to record information about the performance of 
students on the integrated self tests. Finally, we would be able to track the pathways students took 
through the materi- als; which could suggest ways in which the tutorials might be revised. i * , / l%ally, 
the framework should be as platform independent as possible. We felt this to be a crucial characteristic 
from the point of view of long-term viability in our local environ- ment as well as being advantageous 
for distribution to other institutions. 4. Framework Design Our system is ,a hyb;d which falls somewhere 
between a c,ompletely custom built tutorial on one hand and general purpose authoring tools such as Macromedia 
Director on the other. The Tutorial Generation Toolkit (TGT) frame- 87 work provides a general sequencing 
engine and several sup port classes for audio and animation while leaving some details of the appearance 
of individual slides to be pro- grammed directly, As a result, a slide will actually be a pro- gram in 
the implementation language. Once the development platform was chosen, many design questions were whether 
a feature or behavior could be incorporated into the framework, or whether it must be programmed directly 
when dictated by the content of a slide. 4.1., Platform selecJion I Preliminary consideration narrowed 
the choices for an implementation platform to the following: 1. An X-Window system application; 2. An 
HTML application using CGI scripts for interac-  / tion; 3. An application developed using an authoring 
tool such as Macromedia Director or Authorware; .  4. ,A set of Java applets designed to be viewed 
with a web browser; or:  5. A stand-alone Java application: :a Our goal of the highest degree of platform 
independence essentially eliminated the X-windows system or the various authoring platforms. X applications 
are usable on PCs only through the use of expensive or difficult to use PC X server packages, and most 
of the authoring packages do not sup- port the.Unix environment. For maximum platform independence, only 
an HTML/CGI script approach or Java were feasible. Given the highly interactive nature of the tutorials 
we had in mind, we felt that ,a, solution involving IITML forms, image maps, and CGI scripts would be 
difficult to implement, maintain, and distribute., We therefore elected to use Java as our imple- mentation 
language. The resulting application would be rel- atively self-contained, and easily distributable via 
FTP or CD-ROM. The decision between Java applets and a stand-alone Java application.was difficult. Applets 
have the advantage that they can run in any Web browser and therefore can be deliv- ered via a web server. 
This high degree of accessibility was appealing. However, we intended to incorporate animation and sound 
in our tutorials, and concluded that dissemination of this,high volume,of material via ,me Internet might 
not be -feasible. We :tlms, settled on writing a stand-alone Java application. . When the software design 
began in earnest, we had a choice between Sun s Java 1.0 and Java 1.1 for the development of our software. 
Java 1.1 supported a more elegant event model, but had the disadvantages of not being supported by any 
of the major browsers. Once the decision was made to develop a starid$one application, the issue of browser 
sup- , . / port was no longer relevant. We also knew that when browser support was available and the 
Java Media Frame- work (JMF) API[l] was fully implemented, we would be able to quickly create a workable 
applet version of the tuto- rials based on Java 1.1. (The JMF provides management of large media files 
delivered over network and fast modem connections and would reduce the problem of playing large audio 
clips over the Web.) 4.2. Sequencing mechanism When a tutorial is viewed as a collection of slides, 
the over- all organization of a tutorial consists of a description of how the slides are connected to 
each other. Our preliminary tuto- rial designs suggested that the typical organization would be linear, 
but that we would also need a type of hypertext link- ing capability similar to the notion of an anchor 
in an HTML, document. In addition, there were several links that should be available from any slide: 
links to a menu of tutori- als or topics, a slide which allowed optional behavior to be selected, a Help 
slide, etc. Consequently, each slide had a similar organization, with a standard set of navigation but- 
tons along the edges and the content of the slide in the cen- ter. It would obviously be possible, to 
program the connections, directly into the slides, but this approach was undesirable because it would 
make editing a tutorial (in the sense of adding slides, removing slides, or rearranging slides) very 
difficult. Instead, we decided to use the state machine approach to handle sequencing of slides within 
a tutorial. Each slide has a unique ID associated with it. Sequencing of slides is specified by constructing 
a state transition table consisting of tuples of the form <slide ID, event, qestination slide ID> where 
slide ID is the ID of the slide currently being dis- played, event is a code for the link selected by 
the user, and destination slide ID is the ID of the slide that should be displayed as a result of this 
transition. The table is cre- ated at run-time from a text file. One advantage of this organization is 
its flexibility. For example, it makes it very easy to implement context sensi- tive help by allowing 
each slide to specify exactly what slide in a help system it should link to. Adding or deleting slides 
(modulo some implementation magic described below) becomes a matter of editing the configuration, rather 
than an exercise in directly modifying source code for the affected slides. Hypertext links are handled 
by associating event codes with a text string or an image on a slide. 4.3. Evaluation and data collection 
We were interested in evaluating the impact of the tutorials on student learning, and thus needed to 
incorporate some method of testing and of logging test results. There were three possibilities for logging: 
88  1. log the test results to a file in the student s home. directory and retrieve it later, 2. log 
the test results to a centralized file in me instruc- tor s directory, or 3. log the test results to 
a network database. , The hrst two choices are simple to implement,. but are not very cross-platform, 
since the notion of a home directory is somewhat rooted in the multi-user computing paradigm and defining 
a centralized file depends on the local environ- ment. We decided on the final alternative, logging results 
to an mSQL[2][3] database using Java s JDBC[4][5] features. This allows great flexibility in terms of 
data analysis and presentation. 5. Implementation - The TGT Classes The design features and requirements 
plus Java s support of object-oriented programming meant that the implementa- tion would be a collection 
of Java classes. The classes were designed with re-use in mind. The class diagram for the TGT framework 
is shown in Figure 1. The relationships in all cases are has-a. The StateManager MainFrame DBiogger Slide 
   AnimatorBox Gldssary Figure 1: Class diagram. Tutorial class manages the collection of information 
about the user, then instantiates the StateManager. StateManager reads the state transition file and 
creates the state transition table, which is implemented as a hash table. It then instanti- ates the 
MainFrame and instantiates the initial slide. Its job thereafter is changing to a new state whenever 
an event T occurs. MainFrame extends the Java Frame class and hence pro- vides the window in which all 
the other visual elements of the program display. MainFrame s job is to create and man- age the navigation 
buttons and display the current slide. 89 The Slide class extends Panel, and is really just a base class 
from which the individual slides in a tutorial can be derived. This is a minimal class; its main functionality 
is displaying the pop up window containing the text of the voice-over for systems that cannot handle 
audio output. 5.1. Sequencing revisited Sequencing between slides and hypertext linking were accomplished 
using a state transition table. There were two implementation issues involved in this design. First, 
how should the.state transition table be constructed, and second, how would the slide references in the 
transitions be trans- lated into instantiations of the appropriate Slide class descendents?The states 
for the tutorial system correspond to the slides, and we use the two terms interchangeably. Rather than 
hard wire? me state transition table into the StateManager class, all of the information about state 
transi- tions was stored in a state transition file, which the State- Manager processes at mn time. Each 
slide has an entry in this file, preceded by its name. All of the transitions for the state follow the 
name, enclosed in braces. A typical entry is shown in Figure 2. Each item in a state description specifies 
SlideCMlO { Register-Event next SlideCMll RegisterJvent menu SlideTL05 RegisterJWent cm06 SlideCM06 Register-Event 
cm07 SlideCM07 Register-Event cm08 SlideCM08 1 L -1 Figure 2: Transition fle entry. an event and a successor 
slide which should be displayed when the event occurs. The designator Register-Event indicates that the 
item is registering the action associated with a new event for the state. There is one other type of 
item, Initial~state. This item has no associated informa- tion, and should appear in one state description 
only. The state containing this item type is the state that the program displays when it tirst starts 
up. The event codes next and menu have special meanings. The successor slide associ- ated with the next 
event code specifies the slide to display when the Next button is clicked. The successor slide asso- 
ciated with the menu event code specifies the slide to dis- play when the Menu button is clicked. The 
remaining items specify slide-specific events which cause a jump to some other portion of the tutorial. 
These are typically asso- ciated with a button on the slide itself, or a term in the text which is explained 
elsewhere. The final piece of the sequencing puzzle is taking the name of a successor state, specified 
in the state transition file and .-.. I-,L., _.,_ -__ _._ ._.... stored as a String;~and causing the 
new state to be displayed. Recall that the appearance of each state is actually pro- grammed as a class 
which extends the Slide class. The class has the same name as the slide ID used in the state table, but 
you can t just use the contents of a string as a class name in Java and hope to do anything with it. 
The brute force method involved writing a big ugly switch statement with a case for every slide which 
created the appropriate object ,and made the call on that object to draw the appearance of the slide. 
We wanted to avoid this, because it would require ,modifying and recompiling the program whenever a new 
slide was added. In C++, you could use a table of pointers to functions or something similar to handle 
this situation, I though, that approach would still, likely have involved recompiling the program for 
any changes to sequencing. In Java, we were able to take advantage of the Reflection pack- age [6] (part 
of version 1.1) to overcome this difficulty. To instantiate an object of a class given only the name 
of the class as a string, you create an object of type Class (a generic class object) using the name 
of the class you wish to instantiate. To call a method: an analogous Method class exists, which is used 
in a similar fashion. Using these classes, the application needs no pre-compilation knowl- edge of what 
slide classes it will use; the only requirement is that the compiled class files be available at mn time 
for any slides referred to in the state transition table. 5.2. Sound in Java applications Manipulation 
of sound information in Java applets is a given, but for applications, the situation was cloudy when 
we began implementation. There were two choices: the sunaudio package or the Java Media Framework (JMF). 
The sun.audio classes-are provided by Sun as demonstra- tions of Java s capabilities, but they are officially 
unsup- ported! The JMF is a full featured multimedia management APL handling sound, images, and video 
in various sophisti- cated ways. Its main, problem was that it was at that time only a preliminary API 
specification. Early release imple- mentations were available from Intel for Pentium based sys- tems 
and Silicon,Graphics for SGI workstations. Sun had made no announcements at that, time about when it 
might have a version available for its own SPARC hardware. This pointed up one of the major difficulties 
of using Java for a large project at this stage in its development: since the lan- guage has not yet 
been standardized and, is under active development, the implementor is shooting at a moving tar- get. 
,We settled for encapsulating our use of the sun.audio class in our own audio class to make it easy to 
change over to a more robust API should one become available. 5.3. Inteiactivity and animation The requirements 
for interactivity were that users be able to select areas of a slide with a mouse (to make choices from 
a list, for,example), manipulate buttons, and t$pe text into text 90 input areas. Data collected from 
these interactions might be used to control the execution of a sample algorithm, submit values for input 
to an algorithm, make choices in a pre- or post-test question, etc. Several of the preliminary tutorial 
designs made use of ani- mation. For example, a tutorial on the fetch-execute cycle included animating 
the propagation of signals from the CPU to memory. A tutorial on sorting dynamically showed com- parisons 
and exchanges in an array while highlighting steps in the associated algorithm. A simple sprite-based 
anima- tion class called AnimatorBox was implemented to fill these needs. Background images, sprite images, 
position coordi- nates and timing information for an animation are read in from a text file at mn time, 
allowing an animation to be reconfigured or edited without recompilation of the Slide subclass that uses 
it. The cIass handles double buffering, playback (starting, stopping, pausing), and looping. 5.4. The 
database interface Once the decision to log pre- and post-test information to a database and the decision 
to use Java as the implementation platform were make, it became clear that logging to a net- worked database 
server using the Java Data Base Connec- tivity API was the most desirable implementation option. This 
gave us a great deal of flexibility in terms of where the data would be logged and what the actual back 
end database would be. The DBLogger class has constructors that specify the JDBC driver to be used as 
well as the database name and server, all of which can be specified in the tutorial s configuration file. 
We do assume that logging will use SQL commands as that is the basis for the JDBC API. In our specific 
configuration we used the mSQL server and a driver designed to work with it because both were free for 
educational use. . 5.5. Creating content The ideal situation for content creation would be a GUI slide 
builder with built-in text handling, drawing, and ani- mation tools. This was beyond the scope of our 
project. Instead, we required that images and animations be con- structed in other applications, and 
that the GUI to bring 3 together the various components of a slide be programmed directly in Java by 
extending the Slide class. In the design of our tutorials, we stuck to the vanilla AWT GUI as provided 
with Java 1.1, which attempts to translate generic GUI ele- ments such as buttons, text fields, list 
boxes, etc. into equiv- alent elements in the windowing system where the program runs. This was clearly 
a content design decision: it was not dictated by the TGT classes, and in fact, any other Java GUI package 
(such as the Java Foundation Classes) could have been used to implement the slides. We realized from 
the beginning that regarding the content of tutorials, there was an essential conflict between ease of 
. maintenance of the information and presenting a high qual- ity, exciting appearance. In even the simplest 
case of dis- playing straight textual material, we needed to choose between the native text display of 
the selected implementa- tion platform and rendering the text in a graphics processing program and displaying 
it as an image. The former approach was by far the most maintainable, but in some cases (i.e. the absence 
of anti-aliasing for font display) pro- duced unacceptable results. The latter produced a great visual 
appearance, but was a nightmare from the point of view of the simplest maintenance activities, such as 
fixing typographic errors. Further, there were certain textual com- ponents such as mathematical expressions 
that were not supported by the implementation platform, and which must therefore be handled as images. 
The layout and alignment of many images and text elements on a panel was difficult: We solved this problem 
by using native text except for titles and equations. A customized layout manager was created that allowed 
precise alignment of both images aird text. The solution was not perfect but minimized the pkeviously 
cited problems. 6. Conclusions The TGT package of classes provide the framework needed to create interactive 
tutorials. Furthermore, the classes can be used to create other self-guided, interactive materials such 
as laboratory experiences. The continuing evolution of Java provided us with special challenges, yet 
we feel Java was a good choice on balance. We gained maximum plat- form independence (although support 
for Java 1.1 on Macintoshes[2] still lags behind that available on PC s and Unix computers), and could 
make good use of object-ori- ented methods in our design. The tutorials and their content are a work 
in progress. The framework described in the paper means that topical threads may be moved from the author 
s content description to an implementation in a very short time. 7. Getting the Package Information about 
downloading the TGT package with doc- umentation is available by anonymous FTP at ftp://ftp.mathcs.richmond.edu/pub/TGT/README. 
Read- ers interested in the tutorials should contact the authors by mail. A limited number of beta copies 
on CDROM are available for class testing. References 1. JavaSoft, Java Media Framework, http://java.sun.com/products/java-media/jmfY. 
 ! 2. Hughes Technologies, mSQL, http:/iHughes.com.au/. 3. George Reese, The Imaginary JDBC Driver for 
 mSQL, http://www.imaginary.coml-borgfJava/. 4. JavaSoft, The JDBCTM Database Access API, http://java.sun.comlproduct.s~jdbcl. 
 5. George Reese, Database Programming with JDBC an Java, O Reilly and Associates, 1997. 6. JavaSoft, 
Reflection, http://java.sun.com/prod- ucts/jdk/l.l/docs/guide/reflection/index.html. 7. Apple Computer, 
Inc., Apple &#38; Java Developers, http://applejava.apple.com/textldevelopers.html.  91   
			