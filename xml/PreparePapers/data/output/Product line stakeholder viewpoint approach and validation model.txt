
 Product Line Stakeholder Viewpoint Approach and Validation Model Khaled Jaber Case Western Reserve University 
Computer Science Department Cleveland, Ohio. 44106 Phone: (614) 860-2149, Fax: (614) 868-3998 Email: 
jaber@lucent.com  Abstract In this paper we present views of stakeholders in the product line approach. 
We defined a product line model to present and capture these views, and we defined the development process 
used to capture these views. Furthermore, we present an experimental model for adopting and evaluating 
the product line approach. Keywords Product line, Product line architecture, Product line family, COTS, 
Organizational components, Stakeholders, and System-unique components. 1. Introduction Organizations 
that develop similar products are adopting the product line or product family approach to deploy systems 
faster, at a lower cost, and a higher quality. Systems are produced in a product line using common architecture 
and assets that are used across products. Organizations reuse common assets, integrated assets, etc. 
that would otherwise have to be needlessly repeated for each system. Each stakeholder, i.e. management, 
systems developers, and reuse team is interested in and wishes to leverage a particular view of the product 
line. Management, for example, might be interested in viewing products of a product line to estimate 
time and schedules. Systems developers might be interested in a view of a product line looking for common 
assets. The reuse team might be interested in a view of a product line to assess the level of reuse in 
a product line. These are some of the interesting views. * Research funded in part at GMU by NSF Number: 
CCR-9812448. Permission to make digital or hard copies of all or part of this work for personal or classroom 
use is granted without fee provided that copies are not made or distributed for profit or commercial 
advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, 
to republish, to post on servers or to redistribute to lists, requires prior specific permission and 
or fee. SAC'O0 March 19-21 Como, Italy (c) 2000 ACM 1-58113-239-5/00/003>...>$5.00 Nader Nada* and David 
Rine* George Mason University Computer Science Department, MS 4A5 Fairfax, VA. 22030 Phone: (703) 993-1530, 
Fax: (703) 993-1710 Emaih nnada@gmu.edu We present a product line viewpoint model that shows different 
views of the product line, its derived products, and common assets used. Also, we show how the model 
conveys particular views of interest to management, systems developers, and reuse teams.  2. Product 
Line Concept A 'product line' (PL) is defined as a group of products sharing a common, managed set of 
features that satisfy specific needs of a selected market or mission [1, 4]. Products in the PL are engineered 
through customization from base requirements and common architectures, and rely on the integration of 
common components rather than using system-unique software [2]. The PL's common architecture is one of 
the important assets shared by the systems in a PL. It provides the common structure for building systems 
in the PL. All products are based on the PL's common architecture. PL assets are used across products 
in the PL. PL assets depend on the solutions common to the products in a PL. Reusing these solutions 
reduces or eliminates work that otherwise would be required to build each product [3]. In PL development, 
a dual life-cycle model can be used in which domain engineering is the process used to create domain 
artifacts (including the above-mentioned a common, managed set of features) useful across the entire 
PL. And, application engineering is the process used to produce a single product by adapting the domain-wide 
assets [ 1 ]. 3. PL Views Model This section defines a PL model that is used to capture views of interest 
to the stakeholders of the produce line. The views are presented in the next section in this paper. The 
PL model is defined from its derived products and the common assets used in the PL. The 871 following 
sections describe the PL views-point model. 3.1. Product Line A PL [1, 4] has a I:M relation with its 
products. A PL has a h l relation with its common architecture. 3.2. Product Line Common Architecture 
The PL's 'common architecture' (CA) provides the structural elements and their interfaces by which products 
are derived in the PL [18]. Products are customized using the PL's CA. PL CA might evolve during the 
PL life cycle. New releases of the PL CA could be seen and this is due to change in customers' requirements, 
new technologies, design fixes, etc. The PL CA has a 1 :M relationship with its releases. The PL CA releases 
(CARs) specify the common components used in the PL CA; they could specify the functionality needed by 
these components and might specify their interfaces. An M: N relationship is established between PL CAR 
and common component description/interface. 3.3. Products Products in a PL are engineered through customization 
from base requirements, standard PL CAs and integration of common components, and might use system unique 
components. Each product is associated with its releases (PR). Each PR has CA associated with it called 
product release CA (PRCA). Product has a 1 :M relationship with its PRs, whereas, a PR has a h l relation 
with its CA.  3.4. Product Release Common Architecture PRCA is derived from the PL CAR and must conform 
to the PL CAR. It uses many common components described by the PL CAR; for each common component used, 
it uses one of the releases of that component. In addition, it might use many product-unique components; 
for each product-unique component used, it uses a release of that component. 3.5. Components Components 
are the building blocks of products in a PL and are classified into two categories: a common component 
and product- unique component. A common component is used across products of a PL and could be a commercial-off-the-shelf 
(COTS) component or an organizational component. Organizational components refer to common components 
developed by the PL organization. They could be developed internally by the organization owning the PL 
or externally by a different organization within the business unit of which the organization is a part. 
A product-unique component is used in specific products. Both types of components, common and product-unique, 
could have releases associated with them and have a I:M relationship with their releases. They are used 
in many product releases and have an M: N relationship with product CAR. 4. Product Line Views This 
section describes interested views for stakeholders in the PL approach. These views are interested to 
management, system developers, and a reuse team. The views defined in this section are captured by the 
PL model defined in the previous section. Furthermore, this section describes the development process 
used to capture these views. 4.1 Stakeholder views 4.1.1 Management View Management of an organization 
that adopts the PL approach has authority, vision, and leadership. They manage the development of products 
in a PL. They manage staffing, training, cost, directions, and schedules through the PL cycle. They have 
a clear vision about the direction of a PL. They interact with customers and make business decisions. 
The structural of management view and its relationships presented by the model answers questions related 
to what are the products of a PL and assets used in these products. Attributes used in model's entities 
answer questions related to who is the customer, contact person, time interval, cost, staffing, etc., 
of products in a PL. 4.1.2. Reuse Team View A reuse team of an organization that adopts a PL approach 
supports reuse across PLs. They support reuse of components through asset identification. With systems 
developers they ensure successful use of asset bases in and across PLs. They assess the reuse level across 
PLs. The structural of reuse team view and its relations presented by the model shows products of a PL 
and assets used in these products. Attributes used in the model's entities answer question related to 
the type of components used, number of times an asset is reused. The reuse team can use this information 
through asset identification, ensuring a 872 successful use of asset base in and across PLs, and assessing 
the level of reuse.  4.1.3. Products Developers View Product developers in the PL approach are also 
interested in viewing PLs, their derived products, the PL CA, its evolution, assets used and their evolution, 
the operating system(s) and platform(s) are used, components types, their interfaces. The structure of 
product developers view and its relations presented by the model shows the products derived in a PL, 
the PL CA, its evolution, components used and their evolution. Attributes used in the model's entities 
answer questions related the contact person of an asset, components interface, component type, operating 
system(s) and platform(s).  4.2. Viewpoints' Development Process. We used the method called VORD [17] 
for the development of viewpoints. Also, this method is principally intended for requirements discovery 
and analysis, it includes steps that help to translate this analysis into a viewpoint. We considered 
only the first three stages of the VORD method concerned with viewpoint identification, structuring, 
and documentation. Viewpoint Identtfication involves discovering stakeholder viewpoint and identifying 
the specific attributes, tasks, and sub- viewpoints. Viewpoint Structuring involves grouping related 
viewpoints into a hierarchy. Common viewpoints are provided at higher levels in the hierarchy and are 
inherited by lower-level viewpoints. Viewpoints documentation involves refining the description of the 
identified viewpoints. 5. Repository Support Organizations adopting the PL approach can use a repository 
to implement the model. The repository supporting the PL approach can capture the entities and their 
related attributes, and the relationships between these entities to covey the model's views. A web-based 
repository is a good choice to implement the model. It provides an easy access for many users internally 
or externally to organizations developing PLs. The Web-based repository can model the entities, some 
of their related attributes, and relationships as Hyper-text links to present a complete picture of the 
entire PL. 6. Empirical Model for PL Adaptation and Validation In this section an experimental model 
for adopting and evaluating the PL approach is presented. The model contains the steps: 1-making the 
PL adaptation decision, 2-PL planning, 3- utilization and management, and 4- PL expansion. The following 
sections describe these steps. 6.1. Making the PL Adoption Decision PL adoption is defined in the context 
of an organization rationale to agree, sponsor, commit, or allocate resources for initiating a PL plan 
or project. Organization adopting the PL approach required to define and assess their organization context. 
6.1.1 Organization context Organization context describes the environment in which the organization exists 
or existed when it launched the PL effort. The following lists common factors that are used in the adoption 
phase to evaluate the existing environment before applying the PL approach. The software Reuse Reference 
Model (RRM) [10] will be used to record and evaluate the organizations context factors. Process or technology 
objective.  Costs/benefits.  Commonalties and variabilities.  Common architecture.  Assets used. 
 Level of reuse  Organization structure.  Process.  Training.  Tools.  Software reuse assessment 
[10] is a key function of this phase. Historical methods are used to collect data, e.g., survey and/or 
legacy.  6.2. PL Planning Organizations use this phase as a plan for the transition to PL software development 
approach. Organizations can use this phase to record, evaluate, and assess the planning for the PL approach. 
The following lists common factors used in this phase. Organizations intending to adopt software reuse 
use this phase to put the software reuse in practice. 873  Management support.  Cultural change. 
 Organization structure.  Training and processes.  New technologies.  Tools support.  Software reuse 
measurement [10] is a key function of this phase. Historical methods are used to collect data, e.g., 
survey and/or legacy. Our early research results have shown that software development organizations at 
a high success (capability) level usually carry out several pilot (experimental) projects to help them 
in the construction of a prototype repository, component model definition, components classification 
scheme definition, domain model, CA, and product-line as follows: I. Develop a prototype (pilot project) 
 II. Learn and evaluate of risk versus opportunities (including assessment of effort, quality, schedule, 
tools, and procedures) III. Expand prototype to a safer version of product line with the necessary adjustment 
Repeat step (II) and (II) until you achieve a stable PL version. This approach to the successful learning 
and evolving the RRM within an organization is like the Boehm Spiral Life-Cycle Model [8] applied to 
the RRM implementation plan.  6.3. Utilization and Assets Management 6.3.1. Assets Utilization PL utilization 
is defined in the context of an organization as the creation of assets with the specific "intention" 
to be reused and the utilization of assets that had been specifically created with the "intention" of 
being reused. Utilization includes asset utilization where identification, modifying or tailoring selected 
asset(s), and integrating these assets are used. 6.3.2. Assets Management Reuse management is defined 
in the context of an organization that manages the creation, utilization, and evolution (i.e., maintenance) 
of reusable assets. The reuse management and control is based on the classic plan, enact, and learn 
cycle. The plan, enact, learn cycle in the reuse management idiom is based on the following principles 
as described in the STARS CFRP [111. Software reuse monitoring is the main function of this phase. Observational 
and historical methods are used to collect data, e.g., survey, case study, historical analyze and/or 
legacy. 6.4 PL Expansion In this phase, organizations look for new product opportunities and asses the 
customer needs and reuse future plan. Software reuse adaptation is the main function of this phase. Observational 
and historical methods are used to collect data, e.g., survey, case study, historical analysis and/or 
legacy. 7. Conclusions Organizations that produce similar systems are moving towards implementing the 
PL approach (See Fig. 1). Products in the PL approach are engineered through customization from base 
requirements and PL CAs, integration of common components and system-unique components. The model described 
in this paper is intended to capture a view of the PL, its derived products, and assets used in the PL. 
The model is defined to present views interested to management, system developers, and a reuse team in 
the PL approach. 8. References [1] Bass, L., Clements, P., Cohen, S., Northrop, L., and Withey, J., "PL 
Practice Workshop Report", June 1997, http://www.sei.cmu.edu/about/website/indexes/si telndex/sitelndexTRnum.html 
[2] Cohen, S., Fridman, S., Martin, L., Poyer, T., Solderitsch, N., and Webster, R., "Concept of Operations 
for the ESC PL Approach", Sept. 1996. [3] Brown, A., and Wallnau, K., "Engineering of Component-Based 
Systems", Proceedings of the 2 nd IEEE International Conference on Engineering of Complex Systems, 1996, 
IEEE Computer Society Press 1996. [4] Brownswod, L., and Clements, P., "A Case Study in Successful PL 
Development", Oct. 1996, http://www.sei.cmu.edu/about/website/indexes/si teIndex/sitelndexTRnum.html 
[5] Clements, P., "Report of the Reuse and Product Lines Working Group of WISR8", Aug. 1997, http://www.sei.cmu.edu/about/website/indexes/si 
telndex/sitelndexTRnum.html 874    
			