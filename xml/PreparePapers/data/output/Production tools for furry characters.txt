
 Production Tools for Furry Characters Kengo Takeuchi* Nick Petit Gaetan Guidet Marcelo M. Maes Sega 
Sammy Visual Entertainment Inc.  Figure 1: Clumping fur; clumping fur recursively; network consisting 
of a styling descriptor; segmented curves in bounding boxes. 1 Introduction There are several challenges 
when representing and rendering an­imal fur. Among them, the degree of freedom in styling and ren­dering 
optimizations are important factors. However, these two re­quirements are not adequately handled in existing 
tools. We present here a series of fur tools developed for CG animation production. For styling, we apply 
the basic fur creation approach in [Bruder­lin 2003] to polygon meshes. We assume that the mesh and guide 
curves are modeled in Maya, and we implement an original fur model based on Maya s Dependency Node Graph. 
The fur model is passed to a RenderMan DSO and rendering is done as curve prim­itives. The number of 
fur strands that can be rendered has greatly improved, and the performance increased around 7 to 10 times 
for fur with over 5 million strands. 2 Production Tools 2.1 Node Base Architecture The fur node network 
model is composed of the following com­ponents. The Skin Mesh and the Guide Curves components build the 
rough .ow of the fur. The Instancer component de.nes the root of the fur, and becomes the curve origin. 
The clumping effect is achieved by making a dependency between two Instancers and making one to clump 
around the other. The Descriptor component de.nes the style by adjusting the direction of the fur, then 
making it curly or swept. It is possible to use the Instancer and the Descriptor components recursively 
to represent layered tufts of fur and also to reuse them. 2.2 Data Flow The fur node network is analyzed 
by a special RIB Exporter, and is passed as a RenderMan DSO procedural call. The fur generation engine 
provides a preview plug-in, and it renders correctly on the viewport. The RIB Exporter writes the Skin 
Mesh and Guide Curves as an intermediate .le. The nodes on the network are analyzed, and all parameters 
are written as arguments for the DSO. The reference to the intermediate .le is also passed to the DSO 
call. * e-mail:{TakeuchiK2,PetitN,GaetanG,MaesM}@soj.sega.co.jp Figure 2: Anteater with optimized bounding 
boxes. 2.3 Rendering Optimization The rendering was optimized by using RenderMan s Procedural Primitive. 
We use the technique in [Ryu 2007] to generate bound­ing boxes covering tufts of the curves. The fur 
is generated as a preprocessing, before the .nal rendering, for the calculation of the bounding box. 
The bounding box is subdivided by recursively splitting the UV space of the surface where fur grows. 
The space from the newly delimited area where fur grows becomes the new bounding box. Subdivision is 
recursively repeated until the area of the bounding box projected in screen space is below a threshold, 
or the num­ber of fur strands enclosed in the bounding box is bellow another threshold. The recursion 
also stops when the size of the subdivided bounding box does not shrink considerably. In that case, the 
en­closed curves are segmented length-wise and bounding boxes are generated for each segment.  Acknowledgements 
We would like to thank DNA Research/3Delight for their support. References BRUDERLIN, A. 2003. A basic 
hair/fur pipeline. In SIGGRAPH 03: ACM SIGGRAPH 2003 courses, 1 12. RYU, D. 2007. 500 million and counting: 
hair rendering on rata­touille. In SIGGRAPH 07: ACM SIGGRAPH 2007 sketches, ACM, New York, NY, USA, 51. 
Copyright is held by the author / owner(s). SIGGRAPH Asia 2009, Yokohama, Japan, December 16 19, 2009. 
ISBN 978-1-60558-858-2/09/0012  
			