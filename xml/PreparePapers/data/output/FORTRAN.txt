
 FORTRAN: A Self-Paced, Mastery-Based Course Mr. Henry A. Etlinger, Assistant Professor Schoool of Computer 
Science and Technology Rochester Institute of Technology One Lomb Memorial Drive Rochester, NY 14623 
 Mr. Gordon I. Goodman, Instructional Developer The Office of Instructional Development Rochester Institute 
of Technology Dr. Charles Plummer, Instructional Developer The Office of Instructional Development Rochester 
Institute of Technology Abstract A new FORTRAN service course has been developed and is being pilot-tested. 
The course was designed to reduce the number of redundant FORTRAN courses, make more efficient use of 
faculty time, and provide more consistent and predictable learning outcomes for down-stream courses while 
improving faculty and student satisfac- tion. The course is largely self-instructional, mastery-based 
and self-paced. Incentives are used to reward students for mastery of learning outcomes and prompt completion 
of assignments. Preliminary evaluations of the course show that we have been largely successful in meeting 
design goals. Key Phrases self-paced course mastery-based course FORTRAN programming language programming 
language instruction faculty productivity Permission to copy without fee all or part of this material 
is granted provided that the copies are not made or distributed for direct conm~ercial advantage, the 
ACM copyright notice and the title of the publication and its date appear, and notice is given that copying 
is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires 
a fee and/or specific permission. &#38;#169; 1981 ACM 0-89791-036-2/81/0200/ 0062 $00.75 62 History 
 At RIT's School of Computer Science and Technology (CS&#38;T), both enrollment of Computer Science majors 
and the demand for courses by non-majors have been growing significantly while the size of the faculty 
has not kept pace with the increases. This has created a consider- able strain on the faculty and reduced 
the School's ability to respond to changing course requirements within the Computer Science curriculum 
and the demand for courses by other schools and departments at the Institute. Programming courses represent 
an area of particular strain. Courses on programming have proliferated. By virtue of the large number 
of students taking programming courses and the number of different courses offered each quarter, providing 
programming languages instruc- tion has come to consume a major portion of our instructional resources. 
We chose to look for efficiencies in providing instruction on FORTRAN as the most com- monly taught 
language (primarily to non- majors). The Department of Computer Science and Technology (it became a 
School in 1977) started modestly enough around 1973. The initial curriculum was gen- erously laced with 
programming language courses such as FORTRAN, COBOL, assembler, and the like. The initial growth period 
through the mid 70's saw the number of majors climb into the hundreds and although there was continual 
curriculum adjustment, one constant e]ement ~as the relatively ]erqe number of programming courses that 
a student coul( ~ take and get credit for toward a c~egree in Computer Science. In addition, outside 
majors (in diverse fields such 3s Enqineering, Engineering Technology, M~th and Science, Packaging Science, 
Printing Management, Business, and others) beqan to use language courses designed originally for majors 
in ever increasing numbers. Since courses for majors often @Jd not meet the needs of non-majors, variations 
of exist- ing programming courses began to appear in an attempt to address the different requirements 
of non-Compu ter Science stu- dents. Nowhere are the difficulties with these spin-off courses so clearly 
highlighted than in the case of FORTRAN. The current RIT Course Description Catalog lists five apparently 
different FORTRAN courses offered through our School alone, There's a 1-credit course for Engineering 
Technology students to introduce them to programming, a 3-credit course for Engineering Technology, Packaging 
Science, and other students that covers a modest amount, a 4-credit course that also includes a brief 
treatment of numerical methods for Engineering students, a course designed for Computer Science majors 
(but taken by some others, like Math and Compu- tational Math majors), and a hybrid course in Pascal/FORTRAN 
for Computer Engineers. Aside from the drain on faculty and 63 other resources that such a d~versified 
set of courses creates (the School has now ~own to some t~;enty full-time faculty, over J 00~ undergraduate 
an~ qraduate r~grs , Pnd perhaps another 2~8 outsi~e students who may t0kc a course from us during the 
}'ear), there are significant "~rob]ems of continuity. Although the variety of FOPTRAN courses were created 
f'or noble reasons, to meet goals mutually aqrced upon with major client groups such as the Department 
of Electrical Engineer- ing, the learning outcomes of these 6ourses varied from one section to 'a~other, 
and within sections, from one quarter to another. Do~nstr eam courses, whfch depended upon consistent, 
predict- able results, experienced difficulties building upon the initial programming opurse. ~hat we 
face~ in the academic year 1979-8~ was a collection of FORTRAN courses that were overcrowded, a drain 
on resources, courses that sometimes failed ~o meet the outside departments' needs, "and courses that 
were often unpopular with students and instructors alike. Needs Assessment As it became clear that the 
FORTRAN s~tuation was worsening, a plan was dev- ised. Faculty in the major departments requiring FORTRAN 
were contacted and a general informational meeting was arranged. At that meeting we tried to assess current 
feelings about our FORTRAN courses and re-discover the learning out- comes clients felt their students 
should a ieve as a result of successfully com- pleting a FORTRAN programming course. The meeting was 
followed Lip by administering a survey. Using a comprehensive list of FORTRAN/programming skills that 
were con- sidered to be potential outcomes for an introd uc tory course, departmental representatives 
were asked to identify and rank the skills they wanted their students to gain as a result of taking 
a FORTRAN course. The results of the dialogue and the survey showed a high degree of unanimity on 
a core of fundamental programming skills and indicated reasonable chances for success in designing 
a new FORTRAN service course package that was aligned witlh the expectations of diverse user groups. 
The units cover the following topics: unit topics 1 course introduction; bat~-6 processing exercise 
2 computer terminology; overview of com- puter systems; time-sharing exercise 3 straight-line programming; 
variables, constants, datatypes, simple input/output statements; arithmetic assignment statements; simple, 
but complete program examples 4 intrinsic functions; control state- ments such as IF, GOTO, block IF; 
basic logic patterns such as loops 5 formatted input/output; use of I,F,E,X,T,A,/,' ', repeat factors 
and combinations of these 6 arrays and DO LOOPS; array input/output; DATA statements 7 subprograms; 
definition and use of FUNCTION and SUBROUTINE subprograms; passage of information via argument lists 
and COMMON blocks 8 applications; use of a plotter; use of IMSL package; examples of standard numerical 
methods for classical prob- lems such as solving a non-linear equation or sets of simultaneous equations 
 9 miscellaneous topics, including char- acter manipulation, direct access 64 files, advanced subprogram, 
array and formatting features The courses for our own majors and the hybrid Pascal/FORTRAN course were 
left out as their enrollment was relatively small and the prior programming experiences and motivational 
levels of the students taking these courses were considerably different from the other three service 
courses. An internal RIT grant called a Pro- ductivity Grant was applied for and subse- quently awarded. 
The goals of the grant were i) decrease the number of redundant FORTRAN courses for non-majors, and as 
a result, 2) decrease the number of faculty assigned to these courses, freeing them for other pressing 
areas. At the same time, if the project was to be fully suc- cessful, the resulting redesigned course 
had to 3) increase student and faculty satisfaction with the course (low at the start of this project), 
4) result in predictable learning outcomes that down- stream courses could depend upon, and 5) meet the 
stated needs of the client departments. Monies from the grant pri- marily provided salaries and release 
time for the personnel who developed course materials over the summer of 1980 and the production costs 
of materials for students in the pilot run of the course during fall quarter 1980-81. In preparation 
for the project, intensive efforts were undertaken by the primary content specialist and instruc- tional 
developer to review the pre- existing instructional materials for introductory FORTRAN. Some eighty 
prospec- tive texts and self-instructional packages were reviewed. At the same time, the FOR- TRAN 77 
compiler running on the Honeywell Sigma 9 (the campus academic computer sys- tem) was investigated to 
determine if early bugs had been sufficiently fixed to permit its use rather than a FORTRAN com-piler 
based on the earlier 66 standard. This would simplify the use of structured programming methodologies 
in the revised course Besides the FORTRAN-related con- siderations, other significant factors shaped 
the course development. There was a growing faculty dissatisfaction with course loads and realization 
that accus- tomed methods of teaching programming to small classes might not be as effective for classes 
of 60, 100, or more students. Programming demands attention to detail, an ability to work in a systematic 
fashion and a repertoire of algorithmic and heuristic problem-solving strategies. A programming course 
ideally represents a combination of elements such as presenta- tion of information, opportunities for 
practicing and cementing learning, fre- quen£, specific feedback and evaluation, and a clear set of intended 
learning out- comes which the other elements of the course are intended to bring about. Struc- tured 
properly, it provides the resources and opportunities necessary for a student who puts forth reasonable 
effort in the course to succeed. While our methods of teaching small closses may be far from optimal 
, the smaller faculty/student ratio makes it easier to use frequent quizzing as a diag-nostic too], ~ttend 
to individual student problems and to make midstream corrections and mo@ifications. Larqer classes lose 
some of this responsiveness and are there-fore less tolerant to flaws in the origi-nal design of the 
course. Examining approaches to instruction that ~ppear to efficiently use faculty time such as Kenneth 
Bowles' [i] use of stand-alone computers for on-line testing, drill and practice and course management, 
or the work at Cornell University with the PL/CS program synthesizer[~], a software development environment 
that encourages top-down, structured programming, we see future directions in which we might like to 
move. Over the next few years we may be able to acquire enough hardware/software support to begin to 
run what is at the moment fondly referred to as the "super lab," a lab for programming language instruction. 
It is hoped that students from diversified backgrounds will be able to learn a variety of programming 
 languages in a computer-based, self-paced, and largely self-instructional lab set- ting. We feel that 
students, especially Computer Science majors,ought to view pro- gramming languages as tools which one 
can readily acquire particularly after their first language has been learned. Computer Science is much 
more than programming languages and such courses should not con- sume a disproportionate share of the 
School's faculty resources. The Course The future is pleasant to ponder, but our present situation required 
a more readily implemented solution. We chose to r~evelop a largely sel f-instructional course sharing 
similarities with PSI courses such as the use of study guides, but differing significantly in the approach 
to testing and pacing. The course permits a flexible pace for learners but, because we were not prepared 
to accept the large number of incompletes often associ- ated with PSI courses [3] , has definite deadlines 
for completion of units of study, assignments and the course as a whole. We chose the study guide approach 
of PSI because FORTRAN is a well-defined language with a wealth of pre-existing instructional materials 
to build upon. In order to do the job correctly, one not only has to leave enough time to create draft 
materials, have them reviewed, polished, produced and distri- buted to students, but also to go through 
the process again after at least the first run of the course as one gains actual experience using the 
materials. The major components of the course development process were "Design and Develop Course ," 
"Manage Course ," "Instruct Students," and "Redesign and Refine Course." 66 Component One: Design and 
Develop Course We have previously described many of the major needs of and directions for the course. 
Software support for the course was also identified as a crucial factor. Fairly early on the decision 
was made to use a compiler based on the ANS 77 standard. The redevelopment of the course also offered 
an opportunity to incorporate changes in FORTRAN and newer programming design methodologies in the course 
con- tent. This compiler had rarely been util- ized before because it still had a number of bugs in it. 
Some of these bugs have now been identified and corrected, and in retrospect, the choice of this compiler 
has proven to be the right one. Aside from not supporting the block IF statement (this compiler came 
out before the 77 standard was adopted), it does support the other features of the new 77 standard. Students 
can write reasonably well- structured programs using it. Students can run programs interactively (load 
and go), can run standard jobs in batch or time- sharing modes, and can utilize packages such as IMSL 
or one designed for the plotter. The compiler diagnostics are sensible and the computer resources needed 
are modest. We attempted to find a standard text to anchor the course to so that we could eliminate 
the need to completely generate our own materials. We eventually decided on a book by Gordon B. Davis 
and Thomas R. Hoffman titled FORTRAN: A Structured, Disciplined Style (1£7£, McCraw-Hi]l Book Company). 
The advantages of the book for us are: i) it covers most of the FORTRAN language, based on the latest 
77 standard, 2) it uses a consistent and reasonable style when presenting program examples (a style 
that students are encouraged to copy), 3) it gives us the ability to stop at selected points for different 
groups of students, 4) it's organization adheres to a pattern of presenting new concepts and statements 
followed by several completely worked problems, including flowcharts, pseudocode, program listings, sample 
input/output, and discussion of interest- ing features of the solution, and 5) it's written in a mature 
style for people who are serious about learning to program.* Component Two: Manage Course The ongoing 
control of all develop- ment, implementation, and revision work cast the instructional and support staff 
in the primary roles of course managers, with each individual having responsibili- ties for one or more 
elements, ranging from delivering instruction to recording grades. The professor and instructional developer 
wrote and produced study guides to complement and supplement the text, prepared quizzes, and coordinated 
all * We examined the materials for an ap- parently successful PSI FORTRAN course taught by Professors 
James Burnett and Floyd LeCureux at Michigan State Universi- ty[2]. Were it not based on the 6G FORTRAN 
standard, it might very well have circum- vented the need to develop most materials locally. Even using 
an already existing text, developing our own study guides has still been a time-consuming process. admlnlstrative 
staff and instructional functions (tester, grader, programming consultant, grade recorder, etc.) and 
hardware, software and logistical support. The evaluator coordinated the development of the evaluation 
system, analyzed data, and was a catalyst to promote effective use of timely, accurate feedback in course 
refinement decisions. Component Three: Instruct Students The delivery of instruction placed students 
in active roles, highly responsi- ble for their own learning, within the context of a highly supportive 
and respon- sive instructional system. There were two sections of the course. One section took the course 
for three credits, the other for four credits. Each section followed their own calendar or schedule. 
Several classes each week were set aside as quiz days. A student could come in and request a unit quiz 
for the unit of the course the student is currently working on. During the first trial run of the course, 
quiz sessions were run by a quiz administrator. The other class sessions during a week were HELP sessions, 
run by the course instruc- tor. Lectures were not a significant part of the course. Instead, HELP sessions 
were run where students could ask ques- tions about the readings, work throughg practice exercises, go 
over questions from previous quizzes, get advice on how to solve a programming assignment, get some reassurance, 
and the like. A ~raduate assistant maintained a log (by hand) of all grades. Quizzes were generated 
by hand and graded by hand the same day, and rel-urned to students via mail folders near a bulletin board 
which serves as the pri- mary course information area. Programming assignments were graded by student 
graders and returned within five days. Special programming consultants (undergraduates) were available 
at selected hours each day for help on programming assignments. Both the 3-credit and 4-credit groups 
worked with our materials. For the 3- credit group, the course consisted of a maximum of 7 units. For 
the 4-cred it group, the course consists of these units plus 2 others. So one of the differ- ences in 
the two groups was a matter of pace and the total amount of material available to cover in the quarter. 
For each unit, there was a study guide. Study guides consist of the following sections: - an introduction 
to the unit - the instructional objectives to be mastered and an indication of how this mastery is to 
be demonstrated (through a quiz or a programming assignment?) - suggested study procedures, such as 
what to read, what exercises to try, what must be completed, etc. - supplemental readings - a self-quiz 
and answers to help stu- dents isolate areas of difficulty and prepare for actual quizzes - a programming 
assignment commensurate with the topics discussed in the unit An exciting aspect of the course is its 
modified self-paced nature and the use of :rewards rather than punishments to spur students on. Students 
can proceed as fast as they want (and theoretically could fin- ish the course in four to five weeks; 
there is no final exam to contend with), but we've established dates after which a student can no longer 
request a quiz for a given unit to prevent slower students from falling too far behind. Up until that 
point, students can take a quiz as often as they like(a different version each time), trying to reach 
the mastery level which is defined as S5% correct. Should they score ~5% or better on a quiz, they will 
receive a perfect score for that unit quiz(l~0%). Failing to achieve mastery, their best score is used 
in grade calcula- tions. We also use a similar approach to reward students for successfully completed 
programming assignments submitted on time. Assignments submitted on or before a recommended date (that 
received an 85% or better grade), receive full credit (100%) and bonus points. Although this may seem 
unnecessarily easy, in practice, the grades are essentially equivalent to the more traditional approach 
of punishing assignments that are late but we feel it is more productive to reward promptness and success. 
Programming assignments can be resubmitted a second time should corrections be necessary, but successful 
written programs are not handed back until the deadline for assignments has passed. Since overall grades 
for the course are based upon mastery of learning, we feel that the grades assigned at the end of the 
quarter more clearly than usual reflect what material a student has mastered. For the 3-credit group, 
a "C" will correspond to completion of 5 units, a "~" almost 6 completed units, and an "A" almost 7 completed 
units. For the 4-credit group, the correspondences are 6 units for a "C", 7 for a "B", and between 8 
and g for an "A". This global and consistent interpretation should prove useful to out~ side departments, 
for example, Engineer- ing, who require their students to use FORTRAN in subsequent engineering courses. 
When they look at the FORTRAN grades, we hope they will have a clearer picture of their students' capabilities 
and know what topics their students have covered. Component Four: Redesign and Refine Course An evaluation 
system was designed to provide relevant information to aid in course revision and improvement decision- 
making. First, our information needs were examined and specified. Based upon these needs, a system for 
obtaining the informa- tion was developed. The first step in the evaluation planning was to explicitly 
describe and document the course design. This took the form of a graphic network containing the major 
components of the course which dis~ closed their functional interrelation- ships. As previously noted, 
the major com- ponents of the course were "Design and Develop Course," "Manage Course ," "Instruct 
Students," and "Redesign and Refine Course." The second step was to plan the evaluation system. The 
course instructor, .~ 69 in collaboration with an instructional developer and evaluator, reviewed the 
course desiqn and existing materials and generated a listing of information needs stated in the form 
of evaluation ques- tions. These included questions not only about the instructional strengths and weaknesses 
of the course, but also about the success of the course in meeting the larger needs of the School of 
Computer Science and Technology faculty and curri- culum, and outside client groups. These questions 
were placed on a matrix as column headings. Possible measurement pro- cedures (quizzes, analyzing records, 
stu- dent evaluation of the course, etc.) were then listed as row entries on the matrix. The completed 
matrix therefore contained all evaluation questions to be answered, and the possible means for obtaining 
relevant information in the form of meas- urement procedures that might help answer the questions. Each 
measurement procedure was critiqued to determine which evalua- tion questions it could be used to help 
 answer. A check was placed in the inter- secting box. This provided a simple, graphic representation 
of potential methods to evaluate the course. After the evaluation planning matrix was completed, an 
analysis was conducted. The evaluation planning matrix at this point represented an information wish 
list. Since resources for conducting the evaluation were limited, we determined which questions were 
most crucial. The most credible (reliable and valid) meas- urement procedures that could be used to 
collect answers to the greatest number of crucial questions (shown in the evaluation planning matrix) 
which were also practical to implement were selected. Since developing measurement procedures and instruments 
is time consuming and diffi- cult, we wanted to create as efficient a system as possible without sacrificing 
the information needed to manage the course effectively. The implementation plan was designed to assure 
that relevant, timely, and use- ful information was available to the course instructional staff as the 
course proceeds, to guide decision-making and refinement. As a result of this development and review 
process an evaluation plan was gen- erated. The entire evaluation plan con- sisted of 13 evaluation questions, 
and ii measurement procedures used to collect information. Some procedures included: unit appraisals, 
interviews with all key course personnel and selected students, further contact with user departments, 
and other mechanisms are being employed to insure that the course met its objectives. A pre-test was 
administered at the begin ~ ning of the quarter to both the students in this course and a "regular" section 
of the 3-credit course. This test measured both initial FORTRAN knowledge, as well as certain attitudes 
towards computers, pro- gramming and the course. We followed this 70 up with a post-test at the end 
of the quarter to assess gains in learning and shifts in attitudes. Course Revisions and Refinements 
 Since this was a formative evalua- tion, we have chosen to focus here upon the terminal point in the 
usage of this data and are therefore summarizing the nature of decisions made on course improvement and 
refinement. Student performance on quizzes, com- parisons of the re-tests and post-tests for students 
in both sections of the course and a smaller, traditionally run course, indicate that students were largely 
successful in achieving the intended learning outcomes of the course. It is important to remember that 
an expli- cit assumption of our approach is that each successive run of the course provides opportunities 
to make revisions guided by evaluations from previous trials. The first evaluation of the course materials 
did not reveal any major problems requir- ing immediate attention but, this quarter, we are evaluating 
the study guides in greater detail to prepare for the first major revision this summer. Hopefully, each 
iteration of the course will improve upon its predecessor. We have found it difficult to quanti- tatively 
compare the programming skills of students in the revised course with those in other more traditional 
FORTRAN courses. Student program graders grade most pro- grams. They are given a detailed checklist 
of objective gra~ ing criteria for each programming assignment. Th~s has eliminated much of the ambiguity 
of grad- ing programs. Based purely upon students' ability to write programs that employ a structured 
approach and produce correct output, we have experienced some success. Our graders, most of whom have 
worked with us in other FORTRAN courses for similar students, are of the opinion that students are writing 
better programs. This may be a result of the increased practice students taking this course are given 
(six to eight programs in the 4 credit version, depend- ing upon how many units they complete in a quarter) 
. It may also reflect our insistence upon certain elements of coding style that makes reading the programs 
easier. One area of continued d~fflculty for students is their lack of adequate strategies for debugging 
and testing pro- grams. We are working on additions to the study guides and class exercises to help them 
locate program errors more effi- ciently. Student evaluation of the first trial (student attitudes towards 
the course) indicated several areas needing attention. Students commented that the initial orien- tation 
to the computer facilities and using the operating system were not ade- quate. This quarter, we have 
arranged tours of the facilities, demonstrations of using equipment such as keypunches and terminals, 
and preparing programs for sub- mission, in addition to the explanations 71 contained in the study 
guides. We hope that this will alleviate some initial anx- iety student felt and help them get off to 
a better start. Many students expressed a need for greater structure in the Help sessions. The Help 
sessions during the first quarter used an unstructured format in which stu- dents could ask questions 
on any relevant topic they wished. This approach worked better for the more motivated and success- ful 
students than for students having dif- ficulty learning FORTRAN. To remedy the imbalance, Help sessions 
this quarter use programming exercises to focus the session on topics the majority of students are working 
on. This also helps students hav- ing trouble identifying problems frame questions. Attendance at Help 
sessions is not required. We have found that given ade- quate feedback, students self-select along reasonable 
lines for these sessions. A large portion of the students, when they are doing well in the course, choose 
not to attend. This reduces the size of the class and provides more opportunity for individual attention 
from faculty for those who feel they need it. Just as the traditional lecture-oriented class does not 
meet the needs of all students, self- paced, self-instructional courses are not to everyone's liking. 
The Help sessions have provided the contact with the profes- sor many students need. With the exception 
of the expressed need for more structure in class, students felt that Help sessions were a productive 
use of their time and that they were able to get adequate atten- tion and assistance when they needed 
it. Undergraduate programming consultants employed by the course were not well util- ized. Outside of 
class, students were more likely to seek assistance from the Com- puter Center staff or other students. 
 Help sessions also provided an oppor- tunity for faculty to obtain the types of rewards normally associated 
with lecture- oriented courses. Students attending Help sessions, being there willingly, were a more 
receptive group than had been the case in the past. This quarter, a faculty member not involved in the 
course develop- ment but who previous taught this course is trying the new version. His reactions have 
been very positive. The modifications made have apparently addressed many of the areas of dissatisfaction 
he felt teaching the course previously. The logistics of running the course is a major area of difficulty 
at present. The large number of quizzes and program- ming assignments to prepare and grade, and the number 
of grades to record is substan- tial. This quarter, we are machine scoring quizzes. We are also developing 
a test item pool and plan to use a quiz genera- tion program that runs under the UNIX operating system 
on CS&#38;T's PDP 11/45 to simplify quiz preparation. Recent software for an on-line grade book that 
accepts files output by the test scoring program 72 is being investigated. We feel that these steps 
will largely improve the situation. The course materials have been sub- mitted to three CS&#38;T faculty 
for review. They have expressed satisfaction with the content of the course and quality of the materials. 
This quarter, we are presenting the course to a wider audience, including faculty from user departments, 
in the hope of bringing about widespread support for the course. User departments have been supportive 
of our efforts but they have justifiably reserved final judgment until they see if the course improves 
the pro- gramming skills of their students. Conclusion The approach we,re taken is as appli- cable to 
other programming languages as it is to FORTRAN. We hope that it will enable us to provide courses of 
high quality, to an increasing number of students, using comparatively few faculty without sacrif- icing 
student or faculty satisfaction. In its generic form, we feel that this approach has utility to other 
Computer Science faculty faced with a similar situation. Acknowledgements. The authors wish to express 
their appreciation to the RIT Pro- ductivity Committee for funding this pro- ject. We also wish to thank 
Jack Hollings- worth, Director of CS&#38;T, Wiley McKinzie, Assistant Director of CS&#38;T, Lawrence 
Belle, Director of the Office of Instruc- tional Development and Ronald Stappenbeck of the Office of 
Computer Services for their support and assistance. References I. Bowles, K.L. The UCSD PASCAL Project. 
EDUCOM BULLETIN ]3,1 (Spring 1978), 2-7. 2. Burnett, J., LeCureux, F. Comparing PSI and Lecture Students 
in the Next Class. Frontiers In Education Conference proceed- ings (1976), 311-314.  3. Kulik, J.A. 
et al. A Meta-Analysis of Outcome Studies of Keller's Personalized System of Instruction. American Psycholo- 
gist 34,4 (April 1979), 307-318.  4. Teitelbaum, T. The Cornell Program Syn- thesizer: A Syntax-directed 
Programming Environment. SIGPLAN Notices 14,10 (October 1979), 75.  
			