
 Statement for SACMAT 2001 Panel Robert Watson NAI Labs and the FreeBSD Project A variety of mandatory 
access control technologies have been developed and deployed in the past, in the form of research prototype 
operating systems, extensions to commercial products, and adaptations of open source systems. Up until 
now, trusted systems have at best been a small niche market. However, we appear to be at an interesting 
turning point, as the prospects for improved accessibility of trusted systems seems to be on the rise 
as a result of the open source movement. There are a number of projects seeking to implement new access 
control mechanisms based on a variety of free UNIX-like systems, both modeling the systems after existing 
trusted OS products and exploring new architectures. One risk associated with the development of a variety 
of systems is that their access control models will be incompatible, making it difficult or impossible 
to write portable applications. Selecting a single model for trusted system design would allow the development 
of consistent APIs and well-integrated applications. Yet despite years of research, we still don't know 
what the optimal access control mechanism is. Some consumers believe strongly in the MLS confidentiality 
policy, or Biba integrity policy. Type Enforcement may offer a more flexible vehicle for policy expression. 
Role-based access control may offer greater parallels between the policy expression and real-world human 
activities. And DTE offers us a low-management labeling solution building on TE-like concepts. These 
and other mechanisms provide a wide variety of options with only low levels of compatibility. And none 
of this is helped by clear deficiencies in deployed discretionary access control systems. The reality 
is that at this point, when addressing a problem, we turn to a suite of possible solutions, or discover 
that we re fudging aspects of the application by generalizing a single insufficiently broad policy tool. 
The natural question that needs to be asked is: what if there is no one right access control model for 
everyone? Past research has explored both flexible enforcement and access control policy as a means to 
address the need for diverse access control mechanisms in operating systems. Of particular interest are 
those mechanisms that provide fixed enforcement points but flexible policy; there has been increasing 
exploration of flexible access control environments that offer to abstract the actual policies and decision 
making away from the enforcement points. These efforts include NSA s Flask model, as well as recent interest 
in GACI on the Linux platform. However, the idea of an entirely flexible policy environment raises both 
substantial challenges from the implementation perspective, especially with a desire to maintain performance, 
and from the perspective of providing a consistent and well-defined environment to application writers. 
The inability of applications to adapt to changing security environments has long been a problem in traditional 
trusted operating systems: applications discover a variety of new and unexpected failure modes, often 
failing poorly and possibly failing open. Similarly, such over-arching flexibility makes it difficult 
to develop, test, and deploy solutions due to user and system manager expectations and experience. The 
problems of too flexible an environment are similar to the problems of highly divergent security solutions 
in the face of a desire for portable applications. As a result, even if we don t select one true model 
for access control, it makes sense to try and explore and develop constraints for viable models that 
applications writers will be able to rely on. Copyright is held by the author/owner(s). SACMAT 01, May 
3-4, 2001, Chantilly, Virginia, USA ACM 1-58113-350-2/01/00005. 
			