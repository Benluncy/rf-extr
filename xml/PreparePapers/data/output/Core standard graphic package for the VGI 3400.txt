
 CORE STANDARD GRAPHIC PACKAGE FOR THE VGI 3400 Ken Levtne, Vector General, Inc., Woodland Hills, CA. 
 ABSTRACT Implementing the 1977 Core System standard proposal of ACM/Stggraph for a state-of-the-art 
microprogram- mable refresh display system presents a number of design tradeoffs. Thus, there are areas 
of contention between a strict interpretation of the standards and the advanced capabilities of the display 
that led the user to purchase such a system in the first place. These methodological differences lead 
to a '~loosely defined" Core system, which adheres to the spirit of the standards without sacrificing 
display performance. Keywords and Phrases: Graphics Package, Display System CR Categories: 4. 39, 8. 
2 INTRODUCTION The main focus of this paper will be to address the problems encountered in implementing 
the 1977 Core System standard proposal of ACM/Slggraph for a mieroprogrammable calligraphic refresh display 
sys- tem. The advanced hardware features embedded in the display system require a liberal interpretation 
of the standards: that is, a strict interpretation would lead to an unacceptable loss of performance. 
Thus, we are lead to what may be termed a 'rioosely de- fined" Core system. It is believed that this 
approach retains the flavor, methodology and major advantages of the Core approach, while allowing the 
user to take advantage of the advanced features that led him to buy a '"nigh powered" display system 
in the first place. THE STATE OF THE ART The latest generation of refresh calligraphic display systems 
presents a variety of features that allows much of the work to be done in the display system hardware/ 
firmware that previously fell to the software package. These features allow the central processor-display 
processor interaction (i. e., the display list) to be at a higher level than was previously possible. 
Further-more, much of the interactive device communication and image transformation processing burden 
is re- moved from the domain of the central processor. So, the requirements of a display software package 
are at a different level than, for instance, one written for a plotter. The Vector General Series 3404 
is an example of such a display system. It provides facilities for not only graphic programming on the 
object/subobJect level, with full image transformations, including: rotation, displacement, scale, zoom, 
pan, clip, window, viewport, and perspective; but also full inter- active device support, requiring no 
central processor intervention, and a facility for defining display oper- ands to be (evaluated as) the 
value of a display regis- ter, device register, display list cell, or external (CPU memory) table entry. 
Other examples of dis- play systems that provide some of these facilities include the Evans and Sutherland 
Picture System 2 and the Adage 430. The software system, FGP34, which is oriented to the Core standard, 
may be divided into a device- independent level and a device-dependent level. The major design goal is 
for the user to be able to ignore such device-dependent features as display list construc tion, display 
processor instruction set and the device handler. Device independence promotes user program portability, 
and the package is implemented as a li- brary of FORTRAN-callable routines with the code breadboarded 
in FORTRAN to insure overall package portability. Although the requirements of interactive graphics require 
actual implementation in machine language, transporting the package to another family of computers requires 
only a recoding of the library and a new device driver. In the context of the demands of real-time interactive 
graphics, the above was determined to be the most favorable method of complying with the major Core objectives 
of program (and programmer) portability, device-independence and machine independence. Furthermore, FGP34 
is based upon the sixfold Core model of the graphics world: (1) the separation of input and output; (2) 
the use of a (floating point) world coordinate system, a (floating point) normalized de- vice coordinate 
system, and an (integer) device co- ordinate system; (3) the use of a display file; (4) the partition 
of a display file into segments; (5) the use of 298 viewing transformations to convert world coordinates; 
and (6) the use of image transformations on the device coordinate representation of display objects. 
This was attempted within the general programming principles of cleanliness, consistency, completeness, 
orthogon- ality and lack of (process) interaction and side effects. THE IMPLEMENTATION The bulk of FGP34 
is designed to conform with the Core system standard proposal. For example, the input primitives and 
functions defined in Chapter 6 of the proposal have been followed very closely, e.g., devices may be 
enabled, events may be flushed, asso-ciations may be defined between event-causing devices and sampled 
devices. The list of primitives and func- tions not actually implemented at this time is very short (e. 
g., no line width attribute and no markers ex-cept simple points). FG34 differs from the proposed standards 
in two important ways: divergence, for speed optimization and amplification for enhancement. Some features 
are implemented in such a manner as to conform with the display hardware, where doing so would allow 
the user to take advantage of the speed ad- vantages therein. The most notable example of this is the 
definition of perspective, which is couched in 3404 language (i. e,, a register is loaded which varies 
the view from parallel to 90 degrees divergent as the value is varied from zero to maximum). Another 
register may be loaded to vary the degree of intensity depth cueing (Z-axis modulation) from uniform 
density (value equals 0) to maximum intensity variation from bright frentto dim rear (value equals maximum). 
The second major area of difference is in the imple- mentation of features not supported by the proposed 
standards. These features have not been implemented by the proposed '"nooks and escapes" facility, for 
reasons of efficiency. The most important of these are facilities for picture building and editing, dynamic 
displayvariables, and the addition of a file mainten- ance package. PICTURE BUILDING AND EDITING I 
One may view the graphics display scene as being com- posed of a picture, this picture in turn is made 
up of sub-pictures, consisting of a set of images that, in turn, consist of groups of primitive elements. 
Further, image transformations may be applied to these sub- picture images and detection (,picking") 
may be done at the (group of) primitive(s) level. Judicious use of this model requires the ability to 
build sub-pictures, images and groups of primitives, with names being applied to these constructions. 
Such name constructs are natural candidates for further, later building (i. e., reopening), for replacement 
(i. e., emptying and rebuilding), and for deletion. The notion of images being composed of sub-images 
with further transformations leads to the concept of nesting of im- ages. Thus, a tree structure is defined 
with the picture at the root; descending the tree one composes trans- formations; with the '~eaves" of 
the tree being com- posed of the groups of primitives. FGP34 supplemente the proposed standard system 
by allowing grouping of (commonly named) primitives and allowing segments (l. e., images) to be reopened, 
emptied, and deleted, and by allowing segments (and their transformations) to be nested. It is felt that 
this "extension" to the standard is a pre- requisite to successful picture manipulation in a real- time 
interactive graphics application. DYNAMIC VARIABLES There are many circumstances in graphics program- 
ming where it is desirable to couple a display variable to the value of a device, a display processor 
parameter, or an entry in an external (i. e., CPU memory) table, etc. Examples of this include varying 
picture intensity depth cueing by the value of a valuator, or setting the center of a pick device window 
with the X and Y coor- dinates of a locater. The 3404 display system allows display list operands to 
be defined as the value of de- vice registers, display processor registers, and CPU memory locations. 
These values are automatically updated each "refresh cycle" (e.g., 60 Hz) by the dis- play processor. 
This facility allows the above require- ment to be satisfied with no CPU intervention. To implement this 
feature, FGP34 allows the user to define variables to be of the following types: display register, or 
device register or external, (much as FORTRAN defines variables to be integer or real). Subsequent usage 
of these variables in display calls will be translated by FGP34 into the requisite operands in display 
instructions to implement the desired feature. FILE MAINTENANCE PACKAGE The ability to create picutres 
of objects, save them on backing store, and later recall them is as fundamental to a graphics package 
as is the analogous facility in a program development system. The user may wish to save a given picture 
or one or more sub-picture objects to be later recalled by name. FGP34 implements suoh a facility; calls 
are defined to save a sub-picture object or a whole display scene and to recall such an object or scene. 
In addition, the ability to define sub-pictures and invoke them from the main picture (i. e., treating 
the picture as a graphics program and the invocations as "calls," analogous to calls in machine language) 
demands the ability to scan the present scene for calls to sub-pictures that exist in a library (this 
is analogous to dynamically loading by referencing library-based subroutines). The implementation of 
these features is in machine- independent ASCII format, allowing both the editing of saved pictures and 
portability to other installations. 299 APPENDIX: THE SERIES 3404 GRAPHICS DISPLAY SYSTEM The interface 
between the Series 3404 Display System and the host computer consists of a DMA channel for the transmission 
of the user's display list, a pro- grammed I/O channel to read/write device and display registers and 
status information, and an interrupt channel. The display list is interpreted by the Graphics Pro- cessor 
Unit (GPU) which outputs the refresh list to the Refresh Buffer Unit (RBU). The display list pro- cessed 
by the GPU consists of display programs that are accessed through an indexed directory resident in the 
host's memory. An object's display list consists of links to sub-pictures, local variables and actual 
dis- play code, followed by a return instruction that returns to the calling picture, or, at the top 
level, ends the frame. The display list is used to move the beam, create lines, characters, arcs and 
circles, cubic curves and rectangles, and to create arbitrary RBU code. One may also jump in list, call 
or return from sub-pictures, nest and push/pop display and trans- formation parameters, load display 
and device system registers, perform display image transformations, clip, window and viewport date, perform 
perspective and intensity depth cueing, and perform the mapping from user space to display space. The 
refresh list is accessed by the Display Control Unit (DCU) during each refresh cycle to recreate the 
displayed picture on the view surface. This may occur simultaneously with the generation of the now refresh 
list without display interference. The DCU processes the refresh list, routes the refresh data to the 
Vector Generator Unit (VGU), the Font Generator (FGU) and the Monitor Control Unit (MCU) and generates 
the control signals required to display these data. The VGU is a high-speed analog vector generator, 
which utilizes a smoothing technique during incre- mental vectors to draw curved lines of the display 
surface. The FGU uses a programmed ROM and "stroke" characters to provide full character and editing 
symbol support. The MCU is used to select the desired (one of 4 or 8) monitor and provides the unblanking 
and intensity signals required. Interactive devices supported by the Series 3404 Dis- play System include 
Alphanumeric Keyboard, Light Pen, Data Tablet, Function Switch Box with associa- ted lights, Control 
Dials and Joystick. The values input from these devices may be read by the host computer or used as arguments 
in the display list in- structions. The keyboard, light pen, data tablet and function switch box, as 
well as the DCU and GPU may generate interrupts to the host computer. The joy- stick and data tablet 
may be used as window control for the hardware "pick" feature. Selected elements may be highlighted or 
used to halt the display and in- terrupt the host CPU. Reference: Status Report of the Graphics Standards 
Planning Committee of ACM/Siggraph. Proceeding of Siggraph 77, San Jose, July 77. 300 
			