
 COMPETENCY TESTING IN INTRODUCTORY COMPUTER SCIENCE: THE MASTERY EXAMINATION AT CARNEGIE-MELLON UNIVERSITY 
 PRESENTER: Jacabo Carrasquel Carnegie-Mellon University ABSTRACT In this presentation, a unique competency-based 
testing program which is used in the introductory computer science courses at Carnegie-Mellon University 
will be described. After discussing this master examination, its background at CMU and its educational 
justification, evidence about its validity and reliability in testing student acheivement will be discussed. 
Finally, some of the more pertinent experiences in the administration and evaluation of the masteries 
as they have developed over the past four years will be described. The mastery examination at CMU requires 
the students to complete a single programming task. It is administered on-line, and must be completed 
within a five-hour period. Problems are chosen at random, from a pool known to the students for a substantial 
period prior to the exam. We have attempted to standardize the degree of difficulty of the several versions 
of the examination. They share very similar functionality, and require similar data structures. Among 
them are a simple line editor, a monitor simulator, a payroll system, and a flight reservation system. 
 Typically, student achievement in programming methods courses is measured by a variety of indicators, 
such as programming assignments, homework and written examinations. Certainly, if the students do, in 
fact, complete them without depending too heavily on others' help, programming assignments are useful 
indicators of their achievement. However, particularly in examination settings, explicit testing of students' 
actual programming abilities does seem to be neglected at best. We would like to be able to claim that 
the above educational justification provided the initial impetus for the mastery examination program 
at Carnegie-Mellon. However, there was another practical problem which we had to confront: namely that 
of widespread cheating on examinations. We suspect that such difficulties are all too common elsewhere 
as well. By requiring our students to complete a moderately difficult programming problem, in a limited 
period of time, in a secure computing environment, we think that we have reduced cheating markedly at 
our institution. On face validity grounds, one can make a reasonably convincing argument that these 
mastery examinations do accurately guage the students' abilities. We provide them with books, other reference 
materials, and on-line help facilities. While they are familiar with the questions beforehand, they are 
of an order of difficulty that makes it extremely unlikely for students to commit them to memory, certainly 
not for more than a marginally passing grade. Indeed, we think that this sort of exercise is a good indicator 
of our students' abilities to solve a general class of problems. We intend to present some additional 
evidence about the masteries' construct validity; that is, the degree to which the mastery examinations 
are related to other indicators of student performance, both in the introductory computer science course 
and elsewhere. For this analysis, we will draw information from an extensive grading database which we 
maintain for the introductory courses at CMU. Of course, one might question the extent to which the 
various versions of the masteries do measure similar skill levels. We are quite conscious of the difficulties 
involved in constructing comparable exams. Hence, we also will discuss issues of reliability across the 
different exams. There are a number of educational implications which we think can be drawn from our 
experiences with the mastery examinations over the past four years. Thus far, we have emphasized what 
we consider to be some of our notable successes with the program. But, there is a down side to the story 
as well. For example, we recognize that some students can be overwhelmed by the demands of such an examination. 
On balance, however, we think that this approach is well worth further consideration for computer science 
education. 24O 
			