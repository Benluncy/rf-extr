
 Permission to make digital or hard copies of part or all of this work or personal or classroom use is 
granted without fee provided that copies are not made or distributed for profit or commercial advantage 
and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, 
to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee. &#38;#169; 
1980 ACM 0-89791-011-7 $5.00 Our primary (but not exclusive) concern in the present report is the analysis 
of the class L of simple programs, mainly because nontrivial questions about the behavior of programs 
in Ln, for n .4 2, are recursively undecidable. And in order to go beyond the work of Tsichritzis [2], 
our LOOP Pro9r~s will use more general instructions then those mentioned earlier in this section. II. 
DIFFERENT BASES OF PRIMITIVE STATEMENTS We consider therefore extending the language of loop programs 
in the following way. We leave their itera­tive structure unchanged, but we allow other types of assignment 
statements in addition to the three men­tioned above. Primitive assignment statements in loop programs 
will now be of the following types--listed alongside equivalent arithmetic operations, each of which 
being later used to abbreviate the corresponding type of assignment: (1) X+o O (the conatent zero) (2) 
X+Y id (the identity operator) (3) X+succ(x) Succ (4) X +pred(X) pred (5) X+succy(x) SUCCY (the Y-th 
successor) (6) X +predy(X) predy (the Y-th predecessor) (7) X+max(YrZ) max (8) X +min(Y, Z) min (9) 
X+Y+Z i­ (10) X+-Y:Z :  where X, Y, andyZ, may be replaced by the names of any variables. Note how 
the operators SUCC, pred, Succy, and pred , are used; e.g., a statement of the form X + SUCC(Y) will 
not be primitive (as opposed to macro ) if X and Y are distinct variables. We shall require that if a 
statement of the form X + SUCCY(X) or X * predy(X) appears inside a LOOP-END pair, then variable Y cannot 
be mentioned on the left-hand side of any assignment statement inside the LOOP-END pair in qUeStlOn. 
(Without this restriction assignment type (5) is equivalent to type (9), and type (6) equivalent to type 
(10).) Other possible primitive statements will be conditional statements, taken in the followin9 fOrm-­alongside 
its abbreviation: (11) IF X=O THEN Al ELSE A2 IF-THEN-ELSE where X is any variable, and Al and A2 are 
finite blocks of already defined statements. A base 8 over which loop programs may be written ie then 
defined to be any subset of the primitive statements just listed. The corresponding class of loop programs 
with loop-nestings of depth S n is de­noted by L (~), and the class of functions they compute by 8 (~). 
Thus if ~= {O, id, SUCC}I which is the setnof assignment statements over which loop programs w&#38;e 
originally considered by Meyer and Ritchie, we then have that &#38;n(w) $ &#38;n+l (8) for all n, and 
#2(fi) is the class of elementary functions. Moreover, the equivalence problem of L..(a) for n 2 2 is 
undecidable, whereas the equivalence problems for LO(8) ~d L1(6-) are decidable. n - We mainly consider 
here the claeses LL(3) of simple programs over different bases % of primitive statements. One of our 
aims is to study how changes in B affect the analysis of programs in L1(~)--in particular, we examine: 
(1) the equivalence problems of the classes L1(W), for different S s, and the difficulty of the decision 
procedure involved;  (2) questions of translatability between different classes Ll(~), for different 
D s, and the dif­ficulty of the txanslatic.ns involved.  In pursuing these objective, we aleo discover 
that for come of these classes Ll(w), the run tike Of any program can be bounded above from its syntax, 
and/or mathematical expressions can be uniformly assigned to programs in a natural manner. By considering 
loop programs over different bases of primitive statements, as explained above, some of the issues raised 
here will be similar to those raised by Constable and Borodin in [3]--except that they were dealing with 
subrecursive programming languages in general, whereas our particular focus is on classes of programs 
computing subelementary functions, for which many of the decieion problems are decid­able (and sometimes 
easily so). III. TRANSLATABILITY RESULTS Let L and L be classes of programe, and ~andg thecorresponding 
classes ofnumber-theoretic func­ tions they compute. We say that L is (effectively) translatable into 
L if for every program P e L there is (a constructive way to obtain) a program P G L! such that P and 
P~ compute the same function. If there is a translation from L to L , we shall use the notation: L-L 
. And if the translation ,,*,, may be replaced by C , t I P , r is in addition effective, we shall write: 
L ~ L , where the e , according to whether the translation is the (trivial) inclueion map or produces 
a program P E L which is of length at most linear , polynomial , or exponentialtt , in the length of 
the original P E L. A few comments are in order about the complexities involved: (1) Whenever one of 
our translation procedures is Q , or p , or e , it also happens that it will take at meet linear, or 
polynomial, or exponential time, respectively --but not more--as a function of the size of the source 
program P. (Of course, the time complexity of a translation procedure cannot be of order less than that 
of the etring, i.e. the object program P , it writes out.) (2) Although we do not have optimality proofs 
for our translation procedures, it seems that there is no room for improvement on their complexities: 
from exponential to polynomial, and from polynomial to linear. In particular, the nature of the programming 
languages considered in Theorem 3 below suggests that the translations labeled e cannot be replaced by 
equivalent polynomial translations. This question will be pursued in a subsequent report. (3) ?+n important 
question, which we have not investigated, is to also compare the run times (in ad­dition to the sizes) 
of an original program 1? c L and its translated version P e L .  Clearly the aesertion L ~ L is equivalent 
to the assertion &#38;c ~. But while L &#38; L necessarily implies <~< , the opposite implication is 
not always tr~e. Some translatability results are trivial; e.g., if n < n and ~~ ~ then Ln(&#38;) ~Ln, 
(~ ). Others are by no means obvious, and we list some of them next. 1. THEOREM . Let B be any subset 
of {id,pred,succy,predy,max,min,+,: ,IF-THEN-ELSE}. Then for all n 2 3, c Ln(O,succ) ~ Ln(O,SUCC,ti) 
, where the degree of the polynomial translation depends on ~ and never exceeds 2. That is, for loop-nestings 
of depth 3 or more, the computational power of 100p progrms becomes in­sensitive to the addition of primitive 
statements other than X * O and X +-SUCC(X). It is important to keep in mind the kind of additional primitive 
statements we allow here; e.g., using Theorem 4.3 in [3], we can easily show that if ~ were allowed to 
include assignment instructions of the fern X + Y X Z, then the ebove theorem would no longer be true- 
The situation is quite different for loop-nestings of depth < 2. 2. THEOlU3M . Let Ml and ti2 be non-empty 
subsets of {id,pred,succyrpredy,maxrmin,+,: ,IF-THEN-ELSE]. Then L2(0,succ) ~ L2(0,succ, W1) ~ L2(0,succ,Y32) 
,T where the degrees of the polynomial translations depend on ~1 and ~2, but never exceed 2. 3. THEOP.EM 
. Let )331 and ~2 be subsets of {id,pred,IF-THEN-ELSE}. All possible translations from L1(O,succ, ~l) 
to L1(0,succ,X32) can be read off the following diagram: L1(O,succ,pred) / \ L1(O,SUCC)<L(O,~uccrzd) 
>L~:ISUCCIPTedIid) P Ll(O,succ,pred ,IF-THEN-ELSE )1 e n i1 [P L1(O,SUCC,IF-THEN-ELSE) L1(O,succ,pred,id, 
IF-THEN-ELSE) [ (4n L1(O,SUCC,IF-THEN-ELSE, id) If an omitted arrow in the above diagram cannot be obtained 
by composition from the arrows already drawn, then it is a case of non-translatability, which also requires 
some proof. One conclusion of the preceding theorem is that in the presence of loops, id and IF-THEN-ELSE 
are equivalent proqranuning features, in that they add the same computational power to programe. This 
ie not the case in-the absence of loops, where id does not add to the computational power of programs 
while IF-THEN-ELSE does, as seen from the next result. 4. THEOREM .  /:0 -::\ Lo (O,succ) Lo(O,succ,pred 
,IF-THEN-ELSE) !t Lo 1 n (O,succ,id) Q o t~ in Lo(Orsucc,pred,id, IF-THEN-ELSE) \ / LO(O,SUCC,IF-THEN-ELSE) 
in ti Lo(O,succ,id, IF-THEN-ELSE) Again here, if an omitted arrow is not obtainable by composition from 
the arrows in the diagram, then it is a case of non-translatability. IV. CHARACTERIZATIONS OF SOME SUBELEMENTARY 
CLASSES Let fl, f2, . . . . be number-theoretic functions. The class of all functions obtained through 
composition from fl, f2, . . . . will be denoted by: [f1,f2,. ..l. For the next theorem we need to define 
special functions on, u:, L./k], and W: On(xlr. ..,xn) = o; U;(X ,...,xn) =xi, withl<i <n: 1 Cx\k] = 
integer division of x by constant k; xl, ifx=O 2 W% X2) = o { , ifx *O. 2 1. THEORFM . We have the following 
algebraic characterizations: (I) %l(o,succ) = [On,U:,SUCC,W,+l ; (2) #l(O,succ,pred) = [on,u~,succ,w,+,:l 
; (3) <l(O,succ,Pred,IF-THEN-ELSE) = [on,u~,succ,w,+,s,[.fil 1 .  Proving tha c the sets on the right-hand 
side are included in the corresponding sets on the left-hand side is an easy programming exercise; proving 
the opposite inclusions is the difficult part of the theorem, which consists in finding for every loop 
program of the kind under consideration a function it computes from the set on the right-hand side. By 
Theorem 111.3, <l(O,succ,pred, IF-THEN-ELSE) in (3) above may be replaced by~l(O,succ,pred, id) or by 
xl(O,succ,pred,id,IF-THEN-ELSE) . Also, these three characterizations should be compared with the characterization 
obtained by Tsichritzis [2] in proving the decidsbility of L1(O,succ,id) , which can be expressed as: 
~l(o,succ,id) = [on,u~,succ,w,+,pred,[./k],[.,k] 1 , where Cx,kl = remainder upon dividing x by constant 
k. For part (3) of the next theorem we need to make the following restriction. All assignment statements 
included in a base w as primitive statements can each be executed in one time unit; all other statements 
are macros, and the time cost of each is the time required to execute a macro definition for it in terms 
of the primitives. Furthermore, if conditionals IF X=O THEN A, ELSE A. are also primitive then the time 
re­ quired to execute each one of them = 1 (the cost for X=O ?*) + the cost of Al or A2--depending on 
which of the two branchee is executed. Let us say that f: ~k + ~ is linear (respec. , a.e. linear) in 
xi, 1< i s k, if for all sets of con­stants a ,...,a, ,ai+l,.. .r ~ c q , the function f(alt-. .,xi,~). 
,~) is linear (respect. , a-e. linear). 1 l-l 2. THEOREM . We have the following alternative characterizations: 
(1) ~l(O,succ,pred) = {flf is a.e. linear in each of its variables]; (2) ~l(O,succ,pred,IF-THEN-ELSE) 
= {all functions computable in linear time}.  (<l(O,SUCC) is not equal to the set of all functions f 
such that f is linear in each of its variables, but properly includes it.) For the next reeult, the restriction 
introduced for the preceding theorem may be lifted. That is, the result holds even if we do not assign 
a uniform cost of one time unit to every primitive statement; in particular, instructions of the form 
X + SUCCY(X) may be assigned arbitrary costs of polynomial order. 3. THEOREM . Let ~ be a subset of {O,id,succ,pred,succy,predy,max,min,IF-THEN-ELSE}. 
Then ~l(O,s.ccy,TF-THEN-ELSE, %3) ={ functions computable inpolynomial time], where the time complexity 
of function may be measured on any other model of computation which is poly­nomially related to loop 
programs over the primitives under consideration. v. DECISION PROCEDURES Using Theorems 111.1 and 111.2, 
and the fact that KLeenels predicate T(n,xry) is elementary (i.e. its characteristic function is elementary) 
, the following result is immediate. 1. THEOP.EM. Let ~ be any subset of {O,id,succ,pred,succy,predy,max,min,+,~,IF-THEN-ELSE]. 
Then for all n > 2, the equivalence problem of Ln(O,succ,~) is recursively unsolvable. 2. THEOREM . 
Let P, P c L1(O,SUCC), and IPI and 1P*I be the respective lengths of P and P . Then whether  P is equivalent 
to P is solvable in time proportional to IP[ + lPt 1; that is, the equivalence problem of L1(O,SUCC) 
is solvable in linear time. 3. THEOREM. The equivalence problem of Ll(O,succ,pred) is solvable in exponential 
time. (Proved by reduction to a problem of establishing the positivity of linear forms over %.) In light 
of the next result, it does not seem that we can cut the time complexity of the decision procedure in 
the preceding theorem down to polynomial order. 4. THEOREM. The inequivalence problem of L1(O,succ,pred) 
is NP-hard. (Proved by reducing the Satisfiability Problem to the inequivalence problem considered here.) 
 5. THEOREM . The equivalence problem of Ll(O,succ,pred,id) --and thus, by Theorem 111.3, that of  L1(O,succ,pred,IF-THEN-ELSE) 
and that of L1(O,succ,pred,id,IF-THEN-ELSE) too--are each solvable in time exponential in the time required 
by the decision procedure for Presburger arithmetic. (Proved by reduction to Preeburger arithmetic.) 
Ueing the best known bound for a decision procedure of Presburger arithmetic, the time complexity of 
the procedure in Theorem 5 is: C(IF I+IP 1) 22 0(22 ). Although this complexity makes the decision procedure 
impractical, it improves by one exponential level a similar result in Cherniavsky [5]. The next result 
shows that, if this bound can be improved further, then it cannot be improved by more than one additional 
exponential level. 6. THEOREM . The problem of deciding the truth of Presburger formulas is polynomially 
reducible to the equivalence problem of Ll(O,succ,pred,id). (Proved by using the characterization of 
part (3) in Theorem IV.1.) 1. Meyer and Ritchie, The complexity of Loop p rograms, Proc. 22nd Nat. Conference 
ACM, 1967. 2. Tsichritzis, The equivalence problem of simple programs, JACM, 17 (1.970), PP. 729-738. 
 3. Constable and Borodin, Subrecursive programming languages, Part 1: Efficiency and p rogram structure, 
JACM, 19 (1972), pp. 526-568. 4. Jones and Muchnick, Even simple programs are hard to analyze, JACM, 
24 (1977), PP. 338-350 (also 2nd ACM SIGACT-SIGPLAN Symposium record, p. 106). 5. Cherniavsky, Simple 
programs realize exactly Presburger formulas, SIAM J. Comp., 5 (Dec. 1976), no. 4.  
			