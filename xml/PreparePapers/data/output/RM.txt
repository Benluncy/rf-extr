
 RM: A RESOURCE-SHARING SYSTEM FOR PERSONAL COMPUTERS Rita C. Summers, Christopher Wood, John M. Marberg, 
Mostafa Ebrahimi, Kenneth J. Perry, Uri Zernik IBM Los Angeles Scientific Center Los Angeles, CA 90045 
 ABSTRACT With the recent advances in personal computer tech- nology, time-sharing of a processor is 
no longer a necessity; each user can have his own machine. It is valuable, however, to share resources 
among the individual machines. This paper discusses a system structure for interactive computing in which 
per-sonal computers are connected by a local-area net-work for the purpose of resource sharing, and describes 
an experimental prototype that is being implemented using the IBM Personal Computer. 1.0 INTRODUCTION 
It has been widely recognized that a good way to support interactive computing is to provide a com-puter 
for each user. A set of isolated individual computers is not sufficient, however. Although sharing of 
a processor is no longer necessary (each user can have one), it is still valuable to share resources, 
such as databases, program libraries, and expensive I/O devices. It becomes necessary, therefore, to 
link the individual computers together for the purpose of resource sharing. This paper describes system 
software that is being designed to support such a structure, and an experimental pro- totype system that 
is being implemented using the IBM Personal Computer. The prototype system is called RM (Resource-sharing 
Machines). Typically, resource sharing for small systems involves a set of servers, which are devices 
or" com- puters dedicated to one kind of function. For example, there may be a file server and a print 
ser-ver. If, however, resource sharing is viewed as a general way to provide interactive computing, the 
system structure must be far more capable and flex- ible than in the usual server-machine approach. Time 
sharing has been the standard way of provid- ing interactive computing. The objective of our Permission 
to copy without fee all or part of this material is granted provided that the copies are not made or 
distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. &#38;#169; 
1983 ACM 0-89791-123-7/83/012/0091 $00.75 work is to contribute to the software technology for resource-sharing 
systems, so that they can become as usable, capable, efficient, and secure as time-sharing systems. We 
are currently examining which facilities should be available to users and application programs, what 
resource-sharing mech ~ anisms are needed, and what underlying operating system support is appropriate. 
Time sharing provides a useful model for the fea-tures that are needed and desirable -priority and access 
control, for example. However, our system structure differs strongly from time sharing in that it avoids 
centralized data or control. Resource sharing has several advantages over time sharing. A personal computer 
typically provides a more congenial user interface and behaves more con- sistently. A system can grow 
continuously as its user population grows. The physical configuration directly reflects the users and 
their sharing requirements. For example, program libraries accessible to different groups of users can 
be pro- vided by different service machines. Logical sepa-ration is thus reinforced by physical separation. 
Availability is enhanced, because each machine can operate independently. Private data can be kept at 
the personal machine, inaccessible to other users. Certain threats to security which arise from sharing 
a processor and memory are eliminated. A time-sharing system is complex because it must grant each user 
a fair share of the processor and memory, and must protect users against one anoth-er. The resource sharing 
approach minimizes these problems. The remainder of the paper" is organized as follows. In Section 2 
we discuss different approaches to the design of operating systems for distributed process-ing. In Section 
3 we describe the resource sharing structure, as used in the design of RM. Then, in Section 4, we discuss 
in more detail services, requests for services, and the system features that support them. Section 5 
gives an overview of the design and implementation of RM. Section 6 pre-sents a comparison between o'ur 
approach and other approaches to distributed systems design. Section 7 concludes and describes the current 
status of our work. 91 2.0 OPERATING SYSTEMS FOR DISTRIBUTED PROCESSING Many products and research projects 
involve net-works of personal machines. Some of the better known products are Nestar[16], Omninet [11], 
and the Apollo Domain System[I]. Many of the architec- tural characteristics of RM are also shared by 
local networks of larger machines. Research systems such as Cocanet[15] and Locus[13] (which are dis-tributed 
versions of Unix[14]), the NOS system developed at Lawrence Livermore[20], and Roches-ter University's 
RIG[7] are relevant to this dis-cussion. Operating systems which support networks can be categorized 
as either Network Operating Systems (NOS) or Distributed Operating Systems[18]. In a Network Operating 
System each node (or personal machine) continues to run its old operating system; the NOS is implemented 
as a collection of application programs or as a 3uest operating system at each node, running under the 
existing operating system. In a Distributed Operating System, on the other hand, the old operating system 
is replaced with a single homogeneous system specifically designed to support distributed processing. 
One advantage of the NOS approach is that existing applications run unchanged in local mode. However, 
in order to run in a distributed mode they normally have to be encapsulated so that file references, 
for instance, could be redirected by the NOS. A second advantage is that heterogeneous nodes are sup-ported. 
A disadvantage is that the user is pre-sented with different environments, depending on whether local 
or remote processing is used. Some systems, such as the Lawrence Livermore NOS, are designed not only 
to operate as guest sys- tems but also to operate efficiently as the native operating system, providing 
an evolutionary growth path to a homogeneous distributed system when there is no longer a need to provide 
the old operat- ing environment. A distributed operating system, on the other hand, provides a homogeneous 
environment and is typically a more integrated system. Heterogeneous nodes are not supported and existing 
applications normally cannot run unmodified. An interesting approach to overcome the latter problem is 
used in Locus; only the kernel of the existing operating system has been replaced, in order to provide 
support for distrib-uted processing. Locus is therefore an example of a distributed operating system 
which still preserves compatibility with the existing operating system. We shall see that the RM approach 
falls between the two extremes of Network and Distributed Operating Sys- tems. Distributed operating 
systems are often further classified as being based on either the process model or the object model[18]. 
In the process model each resource is managed by a process, whereas in the object model the system is 
considered as a set of objects or abstract data types, each having a repre- sentation and a set of operations 
which are used to manipulate the object. We shall see, once again, that RM falls between these two camps. 
 3.0 THE RESOURCE SHARING STRUCTURE We consider a set of machines in a local area, con-nected by a mechanism 
such as Ethernet [10] or Omninet [11] 1. A machine may be used by one per-son, or it may provide services 
for users at other machines, or both. A machine whose main role is to support one user is called a personal 
machine (PM), while a machine that specializes in providing ser-vices to others is called a service machine 
(SM). It is not always appropriate to dedicate a PM to a sin- gle user; although a machine supports one 
user at a time, it can be shared serially. The SM's provide services, such as printing on a shared printer, 
access to a shared database, com-munication outside the local network, or program compilation. Large 
applications can be built as mul- tiple services. This structure does not assume a "host"; that is, rather 
than a single computer pro-viding all services, the services are distributed among a set of SM's. The 
interface unit that connects a machine to the network provides not only the usual low-level proto- cols, 
but also higher-level control functions. It can perform some operations and has a small amount of stable 
storage. One of its functions is to authenti- cate a user who requests connection to the network. The 
system provides a user with a set of services and files. A service or file may be located anywhere in 
the network. It may be local (residing at the user's machine) or nonlocal (residing at some other machine). 
To a great extent, a service or file may be used without concern as to its location. Location transparency 
is not complete; for example, if several machines provide the same service, the user may explicitly select 
one of the machines. In gener- al, however, programs may be written in a location-independent manner, 
and commands can refer to services and files on nonlocal machines. A user's view of the network is shaped 
by access rights to files and services and by the relationship of his machine to other machines. Each 
machine has a name, and the user specifies which other machines are of interest; the user's view is then 
limited to this machine subset. Files and services are accessi-ble only if they are public, or if access 
has been explicitly granted to the user. We have discussed location-transparency, which is a goal of 
many distributed systems. Another common goal is machine autonomy -the ability of each machine to manage 
its own affairs. With personal machines, autonomy is both a goal and a problem. The user could, for example, 
modify standard oper- ating system components of his machine. Each machine must therefore protect itself 
against improper behavior of other machines. Each machine has exclusive control over its own resources, 
both hardware and software. If the machine provides services to others, the local user controls when 
and to whom those services are available. Since a machine depends on no centralized resource or con-trol, 
it can use services despite failure of other Our work assumes some network mechanism and concentrates 
on other aspects of resource shar-ing. machines. Services providing the same function may be defined 
at multiple machines. When one machine is unavailable, another may be used. (Discussions of machine autonomy 
and location transparency can be found in [8, 9, 13, and 19].) This structure applies to personal machines 
in gen- eral. We are currently developing an experimental prototype that uses the IBM Personal Computer 
and its PC-DOS operating system [3]=. We use the term RMOS for the RM operating-system component that 
is used with DOS, enabling the machine to partic-ipate in resource sharing. In our prototype, all the 
machines run DOS and a uniform RMOS. The machines are connected by a Corvus Omninet [11]. Our goal is 
for existing programs to run without change and to use files in a location-independent way. DOS commands 
behave as they would in a regular DOS environment, but they are generalized to invoke services as well 
as programs, and to refer to nonlocal files.  4.0 SERVICES AND REQUESTS This section describes some 
of the features of RM. In particular, we discuss services and requests and the facilities that support 
them. For" a description of other features see [17].  Overview of Basic Concepts The user of RM issues 
commands that start units of work called actions. An action consists of one or more requests, each of 
which invokes a service (such as compiling or printing). Multiple actions can proceed in parallel. For 
example, the user may look at a graphic display at his PM while compiling at one SM and printing at another 
SM. Requests may also be issued from within a program. A service is an application providing a set of 
oper- ations. Operations are grouped together because they have a related purpose. For example, a print- 
ing service will include operations such as "print a file" and "query printer status". Services are implemented 
by programs. A program is executed by a process at a specific machine. Multiple proc-esses can execute 
concurrently at each machine. A request is the means by which a service is invoked. A request may be 
initiated from within a program or by a user command. A process that issues a request is called the client 
of that request; the process that handles the request is called the server. The request establishes a 
channel of com-munication between client and server through which they may communicate by sending and 
receiving messages. One may view requests as a controlled form of inter-process communication, whose 
seman-tics indicate that the server executes on behalf of the client. A request is handled uniformly, 
whether it origi-nates at the machine providing the service or at another machine. Similarly, a user 
or application requesting a service does not need to know which machine handles the request. A process 
is not restricted to be either a client or a server; a server may issue requests to other services as 
part of the handling of a request for its own service, thereby becoming a client for the newly-issued 
requests. Figure ] illustrates these concepts by means of an example. The user at the PM issues a command 
which starts a request for a local service. The ser-ver that handles the request uses local files, and 
also issues a request for a service at SM1, thus becoming a client of the server at SMI. In order to 
carry out the request, the server at SMI needs data from a file at SM2; normal file I/O is used in reading 
the nonlocal file. Finally, the server at SMI issues a request for a service at SM2. All of this work 
belongs to the action whose scope is indicated by the dotted line. --~ lilt occl== , > I prace== reqt, 
e~t tllo Figure 1. Overview of RM Concepts RM uses the DOS file system, which has a hierarchi- cal directory 
structure. DOS filespecs 3 are extended to allow for nonlocal file access. D-letters (drive letters) 
other than those indicating a local drive are permitted; each d-letter is associated with a drive on 
a specific machine. Thus, the same syn- tax is used in RM for both local and nonlocal filespecs, thereby 
enhancing location transparency. A file access control mechanism is implemented to monitor nonlocal file 
access. Access control informa-tion is maintained in a special file within each direc-tory; access rights 
are granted on an individual user basis per file. RM extends DOS command interpretation to allow for 
invocation of services and reference to non-local files. = We assume that the reader is familiar with 
the 3 DOS filespecs have the form d:filename.ext whe-basic concepts and structure of DOS. re d is a drive 
letter. Writing Services and Applications RM provides a programming interface for writing services and 
applications that use these services. The interface consists of a set of RM calls that invoke RMOS facilities, 
similar to supervisor calls of an operating system. A separate interface is pro-vided for each programming 
language. It is imple-mented as a run-time library, hence RM calls are issued by means of procedure calls. 
We now describe some of the RM calls. To request a service, a process issues a SendRequest call, speci-fying 
as parameters the name of the service, the machine from which the service is to be obtained, and an initial 
message to the server. The call estab- lishes a request and returns a request-identifier that is used 
in subsequent RM calls related to this request. The requesting process becomes a client for the request. 
Requests for a service are queued by RMOS accord- ing to a priority discipline specified for that ser-vice. 
To start handling a request, a server issues a ReceiveRequest call. The call returns the request-identifier 
and the initial message of the next request queued for the service. Depending on the service, a server 
may need no interaction with the client beyond the initial message of SendRequest, or it may require 
additional exchange of messages. Figure 2 shows how to use a service named PRINT. The client issues a 
SendRe- quest, specifying as parameter the name of the file to be printed; no further" interaction with 
the server is needed. SendRequest('PRINT', 'MYFILE') Figure 2. Using a service that needs no client/server 
interaction If further interaction between server and client is required, the two communicate by means 
of Send and Receive calls. Each call specifies a request-identifier and a message. The protocol for exchanging 
messages is not defined by RM. Rather, each application defines its own protocol. Figure 3 outlines the 
client/server interaction protocol for a service named ENERGY, which calculates the energy required to 
heat, cool and light a building. The cli- ent sends data, receives results, and sends more data, until 
all calculations have been performed. Part (a) shows the steps taken by the client, and part (b) the 
steps taken by the server. A server handles a sin91e request at a time. Multi-ple requests for the same 
service may be handled simultaneously by running multiple servers concur-rently. A server ends its work 
on a request by issuing an EndRequest call or by terminating its execution. The client/server structure 
is hierarchical, in the sense that during the course of handling a request the server may itself have 
to issue requests for oth- er services. In other words, a server may itself (a) Steps taken by the client 
 SendRequest('ENERGY') {a request-id is returned} until all data is sent do begin {prepare next data} 
 Send(data, request-id) Receive(result, request-id) {use result} end (b) Steps taken by the server 
 ReceiveRequest {a request-id is returned} until all data is received do begin Receive(data, request-id) 
 {perform calculation} Send(result, request-id) end EndRequest(request-id) Figure 3. Example of client/server 
interaction protocol become a client for a number of other requests. For example, consider a service 
that performs statistical analysis on data supplied by the client; the results are needed in graphical 
form. After performing the calculations, the statistics service invokes a graph- ics service to plot 
the results. Each of these ser-vices my be provided at a different machine. The TransferRequest call 
allows a server to transfer the request it is currently handling to a new ser-vice. As a result of this 
call, a new server is asso- ciated with the original client, and the current server is no longer involved 
with the request. Facilities such as TransferRequest can be used in building distributed applications, 
which is partic-ularly important in an environment of personal com-puters where each machine has relatively 
limited resources. As an example, consider a word-processing application. It could involve text formatting 
at machine M1, followed by post-processing and printing on a special output device at machine M2. Once 
the formatting server at M1 has completed its work there is no reason for it to remain involved. It can 
transfer the request to the printing server at M2 and start working on another request. Defining and 
Using Services A service is defined by creating a service definition file. This file contains the information 
needed to create server processes, such as the name of the program that implements the service and the 
priority of the service. The name of the service definition file becomes the name of the service. All 
service definition files have the same reserved file exten-sion. A defined service cannot be used until 
it is acti-vice, these facilities are not exposed to application vated. This is done either by the operator 
of the service machine or by RMOS at initialization time. When first defined, a service is accessible 
only from the machine where it is defined. A nonlocal user is given access to a service by granting him 
access to the service definition file. Thus, service access con- trol is implemented through file access 
control. From within programs, services are invoked by RM calls, as described earlier. Services are also 
invoked by user commands. The DOS search order for commands is augmented to include service defi-nition 
files". A nonlocal service is invoked if the appropriate d-letter is used in the command. A user may 
query the availability of a service by locat-ing its service definition file. DOS directory com-mands 
are extended (by means of d-letters) to search for files on any machine. This approach also provides 
a convenient way to install applications that are not written as services -for example a compiler. One 
only needs to create a service definition file, and specify in it that the standard input and output 
of the application be redirected to the client. 5.0 DESIGN AND IMPLEMENTATION The design of RM has been 
guided both by the technical requirements of resource sharing and by practical requirements imposed by 
the environment of the project. Since the personal computer field is marked by tremendously rapid change 
in both hard-ware and software, it is necessary to design for flexibility and portability. RMOS has a 
modular structure that allows for replacement of components, it is implemented in a high-level language 
(Pascal), and its dependency on DOS is circumscribed. Our choice of DOS reflects our belief that it will 
be the most widely-used operating system for the PC. This section addresses the following issues: 1) 
the operating-system facilities needed at each machine, 2) the relationship of RMOS to DOS, 3) the organ-ization 
and structure of RMOS, and 4) the choice of an implementation language. Needed Operating System Facilities 
After studying the requirements for resource shar-ing and the design of other systems, we concluded that 
each machine should support processes that communicate by means of queues. Our design expe- rience has 
confirmed the widely-held view that proc-esses and queues are valuable system-structuring tools. The 
components that perform RMOS work within each machine are most conveniently imple-mented as queue-driven 
system processes. The RMOS kernel provides processes, storage man-agement, queues, and locking. Except 
for locking, which is needed by the multiple servers of a ser-programs, but used only by RMOS itself. 
Applica-tions use the request mechanism for inter-process communication, and they do not depend on the 
RMOS notion of a process. Other parts of RMOS have well-defined interfaces to the kernel, so that the 
 kernel could be implemented differently in the future. For its part, the kernel has no knowledge of 
services and requests, or of the network. Relationship of RMOS to DOS In Section 2 we outlined different 
approaches that can be taken in relating resource-sharing facilities to operating-system facilities. 
Here we discuss the approach adopted for the RM prototype, which is to augment DOS with a structured 
set of facilities. To DOS, RMOS is simply a program that is loaded and executed. Once RMOS has initialized 
itself it remains in memory and its facilities can be used by other programs. RMOS interacts with DOS 
in three different ways. First, RMOS uses DOS functions -for file I/O and program loading, for example. 
Second, RMOS must intervene when applications programs issue certain DOS calls; for example, RMOS must 
intercept calls for file I/O. Third, RMOS must intervene in com-mand interpretation in order to allow 
for invocation of services. RMOS must also ensure that process-switching does not occur while the current 
process is executing within DOS, since DOS is not reentrant. Proc-ess-switching may be requested asynchronously 
(for example as a result of a timer interrupt), but it actually occurs only at selected points, such 
as upon exit from the kernel. Organization of RMOS RMOS consists of several components, each of which 
provides a set of related facilities. The components are: process management, storage management, queue 
management, lock management, network man-agement, request management, service management, and action 
management. All system facilities and applications execute as pro- cesses. Process management dynamically 
creates processes, loads their code, and controls their exe-cution. Storage management allocates control 
blocks used by RMOS, and maintains a pool of spaces that are used for messages and for loading of programs. 
Queue management provides two types of queues: request queues and message queues. They are used by the 
request mechanism to pass requests and messages between client and server. Request queues have the property 
that an enqueued message can trigger the creation of a server process. Queues are cre-ated dynamically, 
and they follow either FIFO or priority discipline Lock management provides synchronization by means 
In DOS, user commands invoke built-in com-of software-defined locks. There are two types of mands, batch 
commands, external commands, locks: shared and exclusive. Locks are used inter- and executable code. 
The latter three are files nally by RMOS, and can also be used in services to with reserved extensions. 
synchronize multiple servers of the same service. 95 Network management handles inter-machine commu-nication. 
It consists of two levels. The lower level drives the network hardware and sends and receives packets; 
a portion of it is device-dependent. The higher level transforms messages to packets and vice versa. 
Request management implements the request mech-anism and the request-oriented RM calls. Service management 
maintains service definitions, controls the activation of services and provides information about services 
to other components of RMOS. Action management initiates and controls actions resulting from user commands, 
and handles the sharing of tile display and keyboard among concur- rent actions. RMOS is implemented 
as kernel functions, system functions, and processes. Figure 4 illustrates the relationship among these 
elements. Kernel functions do not depend on any other-RMOS function or on DOS functions that involve 
I/O. They are atomic, in that they run to completion without possibility of process-switching. System 
functions are at a high- er level than kernel functions (similar to the relatioriship between DOS and 
BIOS functions s). Kernel and system functions execute as subroutines under the process that invokes 
them. We distinguish between system processes and appli- cation processes. System processes perform inter-nal 
RMOS work; for example, one process at each machine distributes messages from other machines to the appropriate 
request and message queues. Application processes are those which execute user programs and services. 
System processes may invoke system functions and kernel functions direct-ly. Application processes enter 
the RMOS environ- ment through the RM call mechanism described earlier. RMOS has two types of interrupt-handling 
routines: external interrupt routines, which handle asynchro- nous interrupts (such as from the timer), 
and pre-interrupt routines, which intercept DOS and BIOS interrupts to perform preliminary RM process- 
ing before entering the DOS environment. Implementation Language One of our goals has been to implement 
RMOS in a high-level language, as this will result in increased portability and modularity. We considered 
two lan-guages: PC-Pascal[12] and C[6] (see [4] for a com- parison of the two languages). All the C compilers 
we investigated had the limitation that pointers were implemented as 1G-bit values, so that no more than 
64K were addressable. PC-Pascal, on the other hand, allows addressing of tile entire memory space and 
has several machine-oriented features to sup-port systems programming. For this reason PC-Pascal was 
chosen. PC-Pascal also has a feature called unit, which sup-ports modular programming. Programs may consist 
of several units, each of which is compiled separate- s BIOS functions perform low-level I/O oper-ations. 
Application i System I Processes Processes I I RHI Procedure! i Kerne 1 calll call; tcall I I RH interface 
I I 1 I I procedurei 1 calli I L   v i iI System Functions ' 1 Kernell I calll I v V Kernel Functions 
, 1 IKernel I Procedure call igernel 1 EFunctionl IFunctionl L J f I Figure 4. Relationship among kernel 
functions, system functions and processes ly and has a defined interface with other units. The components 
of RMOS are being implemented as separate Pascal units. 6.0 COMPARISON WITH OTHER APPROACHES In Section 
2 we indicated that there are two distinct approaches to the design of operating systems for distributed 
processing: the Network Operating Sys- tem (NOS) approach, and the Distributed Operating System approach. 
Properties of both approaches can be found in RM. On the one hand, RM can be considered an NOS because 
PC-DOS runs unchanged at each machine. While currently RM does not sup-port a heterogeneous network, 
we hope to support at least all the different versions of DOS in the future. Unlike the NOS approach, 
however, a con-sistent enhanced DOS environment is provided to the user, as in a distributed operating 
system. This approach was chosen because we recognized that programs written for DOS must run on RMOS 
without change. To implement a complete distributed operating system would have meant duplicating all 
the features of DOS and adopting all future enhancements to DOS as they occur. Section 2 also discussed 
the process model and the object model for distributed operating systems. Again, RM has properties of 
both models. At the high level, the user is presented with a view of a world consisting of services, 
operations that can be performed with these services, and facilities for maintaining services. Thus, 
a service can be con-sidered an abstract data type. At the low level, however, the implementation of 
RM is closer to the process model. System Network/ Dedicated Heterogeneous Transaction Compatibility 
Resources Name Distributed OS Servers OS Support with Old OS Shared Yes Yes No Yes FilesOmninet/ Network 
Printers Nestor No Different Yes Yes Processes Locus Distributed Unix Versions Files NO Yes No Yes 
ServersRIG Network Dif£erent Planned Yes Services &#38;M Both No DOS Versions Files ......................................................................................................................... 
 Figure 5. Comparison of system characteristics A number of popular local-area networks implement ACKNOWLEDGEMENTS 
resource sharing using specialized servers. Omni- net[t1] and Nestar[16] are both systems of this Major 
contributions to the design and implementation type. While RM uses the Corvus Omninet local-area of RM 
were made by Richard B. Talmadge and network, it does not rely on Omninet servers to Claude Coray. implement 
resource sharing. RM allows existing files and services to be shared without first moving them to a special 
machine. Also important are the REFERENCES types of resources that may be shared. A wide range of resources, 
both hardware and software, 1. Apollo Domain Architecture, Apollo Computer are shared in RM, whereas 
in some systems only Inc., Billerica MA, 1981. files and printers are shared. 2. D.W. Davies et al., 
Distributed Systems If concurrent updating of data is allowed, it is Architecture and Implementation: 
an desirable for the operating system to support a Advanced Course, B.W. Lampson, M. Paul transaction 
concept[5]. While this is not currently and H.J. Siegert (Eds.), Springer Verlag, implemented in RM, 
the RM notion of an action is the 1983. germ of a transaction, and it is planned to develop this facility 
in the future, incorporating integrity, 3. Disk Operating System Version 2.00, IBM accounting and security 
features. Personal Computer, Computer Language Series, IBM Corp., Boca Raton, FL, 1983. To summarize 
the comparison among approaches, a table of characteristics of several systems is shown 4. A.R. Feuer 
and N.H. Gehani, "A Comparison in Figure 5. It should be kept in mind, however, of the Programming Languages 
C and Pascal," that the categorizations are idealized and that in Comput, Surv. 14, 1 (March 1982), 73-92. 
practice systems often fall between categories. For a more complete review of distributed systems see 
[2]. 5. J.N. Gray, "Notes on Database Operating Systems," Lecture Notes in Computer Science GO, Springer 
Verlag, 1978, 393-481.  7.0 CONCLUSION 6. B.W. Kernighan and D.M. Ritchie, The C This paper has described 
the structure, concepts Programming Language, Prentice-Hall, 1978. and features of a system that connects 
personal computers for the purpose of resource sharing. 7. K.A. Lantz, "Uniform Interfaces for Distrib-Operating-system 
facilities reflect the physical dis-uted Systems," TR63, Dept. of Computer Sci- tribution of resources, 
allowing applications to be ence, University of Rochester, May 1980. structured as services and to span 
multiple machines. Files residing at one machine may be 8. B. Lindsay and P.G. Selinger, "Site Auton- 
accessed from any other- machine, omy Issues in R*: A Distributed Database Management System," IBM Research 
Report Our design is based on existing facilities for per-RJ2927, San Jose, CA, Sept. 1980. sonal computers 
and therefore new facilities need not be extensive or complex. The DOS environment 9. B. Liskov, "On 
Linguistic Support for Dis-has been extended in an upward compatible fashion tributed Programs," IEEE 
Trans. Software to provide these new facilities. Implementation of an Engr. SE-8, 3 (May 1982), 203-210. 
experimental prototype is underway using the IBM Personal Computer and PC-DOS Version 2.00. The 10. R.M. 
Metcalfe and D.R. Boggs, "Ethernet: initial hardware configuration consists of 8 PC's Distributed Packet 
Switching for Local Com-connected by a Corvus Omninet. We plan to evalu- puter Networks," Comm. ACM 19, 
7 (July ate the benefits of the system by using the proto-1976), 395-404. type in several different user 
environments. 11. Omninet Local Network: Technical Overview. Corvus Systems, San Jose, CA. 12. Pascal 
Compiler, IBM Personal Computer, Computer Language Series, IBM Corp., Boca Raton, FL, 1981. 13. G. Popek 
et al., "Locus: A Network Trans- parent, High Reliability Distributed System," Proc. 8th Symposium on 
Operating System Principles, 1981, 169-177. 14. D.M. Ritchie and K. Thompson, "The Unix Time-Sharing 
System," Bell System Technical Journal 15, 6, Part 2 (July-Aug. 1978), 1906-1930. 15. L.A. Rowe and 
K.P. Birman, "A Local Net- work Based on the Unix Operating System," IEEE Trans. Software Engr. SE-8, 
2 (March 1982), 137-146. 16. E.P. Stritter, H.J. Saal and L.J. Shustek, "Local Networks of Personal 
Computers," Proc. IEEE COMPCON Spring 1981, 2-5.  17. R.C. Summers, M. Ebrahimi, J.M. Marberg,  K.J. 
Perry, R.B. Talma'dge and U. Zernik, "RM: A System of Personal Machines and Ser-vice Machines," Report 
G320-2734, IBM Los Angeles Scientific Center, Nov. 1982. 18. A.S. Tanenbaum, Computer Networks, Pren-tice 
Hall, 1981.  19. I.L. Traiger, J. Gray, C.A. Galtieri and  B.G. Lindsay, "Transactions and Consistency 
in Distributed Database Systems," ACM TODS 7, 3 (Sept. 1982), 323-342. 20. P,.W. Watson and J.G. Fletcher, 
"An Archi-tecture for Support of Network Operating System Services," Computer Networks 4, 1 (Feb. 1980), 
33-49.   
			