
 The Complexity of Multiway Cuts (Extended Abstract) E. Dahlhausl, D. S. Johnson2, C, H. Papadimitriou3 
P. D. Seymour4, and M. Yannakal&#38;2 Absfrast. In the Multiway Cut problem we are given an edga­weighted 
graph and a subset of the vertices called termimds, and asked for a minimum weight set of edges that 
separates each ter­minal from all the others. when the number k of terminals is two, this is simply the 
min-cu~ msx-flow problem, and can be solved in polynomial time. We show that the problem becomes NP-hsrd 
as sxrn as k = 3, but ctm be solved in polynomial time for planar graphs for any fixed k. The planar 
problem is NP-hsrd however, if k is not tixad. We also describe a simple approximation slgo­ rithnt for 
arbkmry graphs that is guaranteed to come within a fsc­ tor of 2 2/k of the optimal cut weight. 1. 
Introduction The Mdtiwwy Cut problem can be defined as follows: Given a graph G = (V,J??), a set S = 
{sl ,s2,.,.,s~) of k specified vertices or termz nals, and a positive weight w(e) for each edge e E E, 
find a minimum weight set of edges E G E such that the removal of E from E discomects each terminal from 
all the others. When k = 2 this problem reduces to the famous min­cut/max-flow problem, a problem of 
central significance in the field of eombinatoria.1 optimization due to its many applications and the 
fact that it can be solved in polynomial time (e.g., see [6,14,15,17]). The k-way cut problem for k >2 
has been a subject of discussion in the combinatorics community for years (closely-related variants were 
pro­posed as early as 1%9 by T. C. Hu [14,p.150]). A variety of applications have been suggested, most 
having to do with the minimization of communication costs in parallel computing systems. In [20], Stone 
points out how the problem of assigning program modules to processors can be formulated in this framework. 
Other applications involve partitioning tiles among the nodes of a network, assigning users to base computers 
in a multicomputer envi­ronment, and partitioning the elements of a circuit into the subcircuits that 
will go on different chips. It is known that such problems can become NP-hard even fork = 2 if there 
is a constraint imposed on the size of the components into which the graph is cut [8,9]. In this paper 
we ask whether the problem might be tractable without such a constzahtt (as it isfor k = 2), Our first 
results concern the planar case. The restriction to planar graphs, besides its basic graph-theoretic 
significance, has potential relevance in the circuit partition­ing application. Theorem 1. (a) For k 
= 3, theplanar Multiway Cut problem can be solved in time O (n3 logn). (b) For anyjixedk23, the planar 
MuMway Cut prob­lem is solvable in polynow al time. The algorithms of Part (b) are, unfortunately, exponen­tial 
in k. (Specifically, they are 0((4k) kn 2k-1 logn).) That such exponential behavior is likely to be unavoidable 
fol­lows horn the next result. Theorem 2. If k is not@d, the Multiway Cut problem for planar graphs is 
NP-hard even if all edge weights are 1Universityof Bonn. CurrantAddress:Departmentof ComputerScience, 
Universityof Sidney,New South Wales, Australia 2AT&#38;T Bell Laboratories, Murray Hill, NJ 07974 3Department 
of Computer Ssience and Engineering, University of Califor­nia at San Diego 4 Bellcore, Morristown, NJ 
07960 Permission to copy without fee all or part of this material is grantad provided that the copias 
are not made or distributed for direct commercial advantage. the ACM copyright notice and the title of 
the publication and its date appear, and notice k ghren that copying is by permission of the Association 
for Computing Machinary. To copy otherwise, or to republish, raquires a fae and/or specific permission. 
24th ANNUAL ACM STOC -5/92/VICTORIA, B. C., CANADA 01992 ACM 0-89791-51 2-7/9210004/0241 . ..$1.50 equal 
to 1. For the Multiway Cut problem in arbitrsry graphs, NP­hardness sets in much earlier. Theorent 3. 
The Multiway Cut problem for arbitrary graphs is NP-hard for alljixed k 23 and all edge weights equal 
to 1. This theorem is proved using a gadget that has inter­esting properties on its own (as a counterexample 
to a con­jecture about the possible submodularity of 3-Way Cut). The ttvarem s negative consequences 
are partially miti­ gated by technical lemmas that may yield substantial reduc-and lb). Section 3 elaborates 
on the negative result for the tions in the sizes of instances encountered in practice. planar case (Jleorem 
2). Section 4 covers our results for Finally, we have the following two approximation results, one positive 
and one negative. Theorem 4. There is a polynomial-time approximation algorithm for the Multiway Cut 
problem that for arbitrary graphs and arbitrary k is guaranteed to fmd cuts that are within 2(k -1)/k 
of optimal. Theorem 5. For anyjixedk23, thek-Way Cut prob­ lem is MAX SNP-hard (and hence unlikely to 
have a poly­nomial time approximation scheme). The results presented here can be contrasted to those 
of [11,13,19], which concern what might be called the Multi­way Split problem. In this problem we are 
given G, k, and w as above (but not S), and are asked merely for a mini­mum weight set of edges E whose 
removal separates the graph into at least k nonempty connected components. It is reported in [11] that 
although this problem is NP-hard for arbitrary k, it is solvable in polynomial time for each fixed k 
>2., even for arbitrary graphs. The running time is O(nk 12-k+ll12 ). Fork= 3 and unweighed planar graphs, 
a faster O(n 2) algorithm is presented in [13]. Thus the Multiway Split problem is significantly easier 
than the problem we study here, although we note that for fixed k 26, our planar Multiway Cut algorithm 
will provide a better method for solving the planar Multiway Split prob­lem than will the general Multiway 
Split algorithms of [11]: Simply run our algorithm for all possible sets S of k vertices and take the 
least-weight solution found. A factor proportional to nk is added to our running time, but the resulting 
time lxmnd is still O (n3k-1 logn). Reference [19] concerns approximation results for the Multiway Split 
problem, showing that the bounds we obtain in Theorem 4 for Multiway Cut can be obtained for Multiway 
Split with­out having to apply our result to all possible sets of k ver­tices. To avoid bibliographic 
confusion, we should mention that, with the exception of Ilmrem 5, the results in the current paper were 
first announced in 1983 in an unpub­lished but widely circulated extended abstract of the same title 
[3]. The abstract has since been widely cited, both in the above-mentioned work on Multiway SpliC and 
in follow-up work on the Multiway Cut problem itsek In [1], Chopra and Rao observe, as we failed to do 
in our original abstract, that for trees and 2-rrees, the general k-Way Cut problem can be solved in 
linear time by a straightforward dynamic programming algorithm. (This can be generatizcd to graphs of 
bounded tree-width for any fixed bound, by standard techniques.) The facets of the Multiway Cut poly­hedron 
are studied in [1,2], An interesting generalization of the Muhiway Cut problem, about which we shall 
have more to say in our concluding section, is studied in [4,5]. The paper is organized as foltows. In 
Section 2 we cover the positive results for the planar case (Theorem la general graphs (Theorems 3,4, 
and 5 and associated techni­cal lemmas). A concluding Section 5 discusses additional variants and generalizations 
of Multiway Cut to which our techniques can apply, and points out some of the remaining open problems 
in the area. Because of space limitations, we have omitted most of the proofs in this extended abstract. 
A full version of this paper containing all the proofs is available from the authors. 2. Algorithms for 
The Planar Case Our main result for planar graphs (Theorem 1) says that for all fixed k, the Multiway 
Cut problem is solvable in polynomial time. This is in contrast to Theorem 3, which says that for arbitrary 
graphs, the problem is NP-hard for any fixed k 23. The key advantage we gain from planarity lies in the 
existence of a planar dual to our given graph G. We will assume without loss of generality that our graph 
G = (V,E) is connected and that we have fixed an embed­ding of it on the plane. We will use a superscript 
D to denote a dual object. Thus GD is the dual graph of G. If F is a subset of the edges of G, F~ is 
the corresponding set of edges of GD. (Nottx FD is not the dual of the subgraph (V,F) of G.) We start 
with Theorem la and the case of k = 3, and then show how our proof techniques can be generalized to cover 
the case of general fixed k (Theorem lb). 2.1. Planar 3-Way Cuts Figure 1 shows a graph G with a 3-way 
cut C, together with the duals GD and CD of each. The thicker edges in the figure are those of C and 
CD, respectively. Note that the edges of CD partition the geometric embedding of GD into three regions. 
(In the case of Figure 1, two of these regions are single faces of GD, but the other is the union of 
several faces.) Let us say that a vertex of G is in a given ~gion if the face of GD to which the vertex 
corresponds is part of that region. Then observe that in the figure, each of the terminals of G is in 
a separate region of CD. This is clearly a general property C is a 3-way cut of a graph G if and only 
if the terminalss 1, S2, S3 are in different regions of CD. Thus if D is an optimal 3-way cut, CD has 
exactly three regions, each one containing a distinct terminat. Fur­thermore, removing any edge from 
CD must merge two tegions, as otherwise the corresponding edge of C is not needed in the cut. For a general 
instance of the 3-way cut problem, there are two topologically distinct possibilities for an optimal 
cut CD. Cut Type I. CD consists of two edge-disjoint cycles. See Figure 2a,b. Note that the cycles may 
have one vertex in common and/or one cycle may lie inside the other, as in Figure 2b. They cannot have 
more than one vertex in com­ (a) (b) FIOURE1. Aplanar3-waycut(a) and its dual (b). men, however, as 
this would imply that CD had more than three regions. Cut Type II. Each pair of regions of CD shares 
an edge. SeeFigure 2c. For Type I cuts, the cut C consists of hvo edge-disjoint cuts (corresponding to 
the two cycles of CD), each isolating one of the three terminals from the other two. The notion of such 
an isolating cut will also be of use in treating the case of Type II cuts. We define it formally (and 
generalize it to arbitrary k) as follows. Definition. For a given tem nal Si, an isolating cut for si 
is any set of edges that cuts all paths between si and all the other terminals. Note thata minimum weight 
isolating cut for si can be constructed by merging all the terminals other than si into a special vertex 
so, and then finding a minimum si -so cut in the resulting graph by a standard 2-terminal minimum cut 
algorithm. We shall now &#38;scribe how to find an optimal 3-way cut. We provide procedures that work 
for each type of cut. Each procedure either returns the best cut of the corre­sponding type, or else 
reports (correctly) that any optimal cut is of the other type. Our procedure for Type I cuts is straightforward. 
We simply compute the three minimum weight isolating cuts for s ~, 52, and S3 respectively, Note that 
a minimum weight Type I cut must have weight at least as large as the sum of the weights of the hvo smallest 
of these the isolat­ing cuts. If the two smallest are edge-disjoint, then their union is optimal among 
all 3-way cuts of Type I. If the two smallest are not edge-disjoint, then their union is a 3-way cut 
that has strictly smaller weight (since all edge weights are by assumption positive). Consequently, the 
best 3-way cut is not of Type I. Our procedure for Type II cuts is significantly more complicated. Suppose 
we have an optimal 3-way cut that is of Type II. Look again at Figure 2c. The cycle that bounds each 
region corresponds to an isolating cut for the terminal contained in that region, but these isolating 
cuts are not necessarily optimal, as they overlap. Consider the two ver­ti~stitmofde~3tiC~mdwekbld aandbin 
the figure. The following lemma allows us to fix one of the three paths connecting a and b in GD. Lemma 
2.1. Suppose that the dual of an optimal 3-way cut C is of Type II and a and b are the two vertices of 
&#38;gree 3 in CD. Let P be any shortest path from a to b in GD. Then there is an optimal 3-way cut Co 
that is of Type II, has a and b as its two vertices of degree 3 in C~, and such that P is one of the 
three paths that join a to b in Cfl. In light of Lemma 2.1, our procedure for Type II cuts can work by 
repeatedly calling a subroutine, once for each potential pair a,b of degree-3 vertices in CD. The subrou­tine 
either constructs a minimum weight 3-way cut C which is of Type II and has a and b as the two degree-3 
vertices in CD, or reports (correctly) that no minimum weight 3-way cut has that form. The subroutine 
proceeds as follows iilm (a) (b) (c) FIGURE 2. Types of 3-way cuts: Typo I (a) and (b), Type II (c). 
First, construct a shortest path P between a and b in GD. By Lemma 2.1 we may assume that P is contained 
in CD. Delete the edges in G corresponding to the edges of P, obtaining a new graph H. In the embedding 
of this new graph induced by our original embedding of G, all the regions of G corresponding to vertices 
on P in GD are merged into a single region. This corresponds in 11~ to coalescing all the vertices along 
the path P from u to b into a single vertex VP. This coalescence turns CD from a Type II cut into a Type 
I cut like the one in Figure 2b in which the two edge-disjoint cycles shate a common vertex, in this 
case Vp. (The two cycles need not however be nested as they are in the figurq they can have disjoint 
interiors.) We can now apply our previously described procedure for Type I cuts to H, obtaining a Type 
1 cut C~, or a report that the best 3-way cut for His notof Type I. In the latter case, an optimal 3-way 
cut for G could not have been of Type II with the pair a,b as its degree-3 vertices, and we report this 
fact. In the former case, the cut C~ will, when augmented with the edges of G corresponding to the edges 
of P in GD, be a 3-way cut for G. It cannot be an optimal cut, however, unless C% has the &#38;sired 
form of two edge­disjoint cycles with Vp as a single common vertex. Other­wise the edges corresponding 
to P can be deleted and a valid (and lighter) 3-way cut for G will remain. Thus if C~ does not have the 
desired form, we once again report that no optimal 3-way cut for G is of Type II with a, b as its two 
degree-3 vertices. Our overall algorithm for finding an optimal 3-way cut Cm thUS proceed as fO1lOwS: 
Procedure 3-Way 1. Perform the Type I procedure on G. If a valid Type I cut is foun~ put it on the list 
of potential optima. 2. Construct the dual graph G~ and perform an all-pairs shortest path computation 
for G~. For each pair a,b of vertices in GD, do the following  2.1. Let P be the shortest path in GD 
between a and b as constructed in step 2, and let H be the graph obtained from G by deleting the edges 
corresponding to edges of P. 2.2. Perform the Type I procedure on H. 2.3 Let Vp be the coateseed vertex 
in HD corre­sponding to the path P. If a valid Type I cut C~ for H is found and has a dual consisting 
of two edgedisjoint cycles having VP as their unique common vertex, do the following 2.3.1 Let C~ be 
the 3-way cut for G consist­ing of C~ together with the edges of G corresponding to the edges of P in 
G*. 2.3.2 Add Cc to the list of potential optima. 3. Output the lightest 3-way cut on the list of potential 
optima. Theorem la. Given a planar graph G with specijied ternu nalss ~, S2, and S3, Procedure 3-Way 
outputs an opti­mal 3-way cut, and can be implemented to run in time 0(n3 logn), where n is the number 
of vertices in G. 2.2. Planar Multiway Cuts In this section we turn to the case of k-way cuts where k 
>3. The algorithm we present will work for all k 23 and will have a running time tha~ although exponential 
in k, is polynomial whenever k is fixed. It can be viewed as a (major) generalization of the algorithm 
of the previous sec­tion for the k = 3 case. For our discussion here, it will be convenient to assume 
that no two subsets of edges has the same total weight. (we can make sure that the assumption is satisfied 
in various ways. For instance, if A is the weight of the lightest edge and the edges are ordered el ,e2,. 
... em, we could use the revised edge weights W (f3i) = W(ei ) + A/2i.) The key consequence of the assumption 
is that optimal cuts, shortest paths, etc. are unique, so that we can refer to theoptimal cut etc. A 
less desirable consequence is that the cost of doing additions and comparisons of edge weights may go 
up by a factor of n, given the large number of bits needed to represent them, but given that our main 
goal here is to show that running times are O(n ~) for some c, a factor of n will not make a significant 
difference. In the k = 3 case, we observed that the dual CD of the optimal cut was a subgraph of GD that 
partitioned the embedding of GD into three regions, each containing a dis­tinct terminal. We then reduced 
the problem to the compu­tation of 2-way cuts and shortest paths by first guessing (i.e., trying all 
possibilities for) some information about CD. In particular, we guessed the topology (whether the cut 
consisted of two edge-disjoint cycles or not) and (in the latter case) the identity of the two degree-3 
nodes a and bin CD. For general k 23, we follow the same approach. Assume as before that we have previously 
decided on some fixed embedding of G. Suppose C is the optimal k-way cut, and once again let CD be the 
dual of C viewed as a sub­graph of a predetermined planar embedding of GD. Then CD must partition the 
embedding of GD into precisely k regions, each containing a distinct terminal. Our notion of a topology 
for CD is derived as followx Consider the con­nected components of CD, and call such a component com­plex 
if it contains more than one vertex that has degree thr= Or more in CD. Let C~,C~, ..., C: bean enumem­tion 
of the complex components of CD, and for each i, 1 <is q, let IVi be the set of vertices with degree 
three or more in C?. (Note that we must have q Sk-1, since every connected component of CD must enclose 
at least one terminal, and the infinite region of CD contains one ter­ N1 = {V2,V~,V~,V~,V~,V~2) N2 
= FIOURE3. The dual CD of an optimal minal.) Let N = U~=lNi. The topology of CD is simply the (unordered) 
partition of N given by the sets N1,N2,. ... Nq. See Figure 3 for an example of a CD and its topology, 
consisting of two sets N1 and N2. In the figure the vertices of degree three or greater are high­lighted. 
Note that the degree-6 vertex v lfj does not partici­pate in the topology because its connected component 
con­ tains only one vertex of degree three or greater. Lemma 2.2. If G is a connected planar graph with 
n vertices, let C be an optimal k-way cut for G, and let CD be the planar dual of C, viewed as a subgraph 
of GD. Then the number of distinct possibilities for the topology of CD is O((2n)2k-4). Our algorithm 
for the general k-way cut problem will work by considering in turn each of the possibilities for the 
topology of the optimal cut. For each we will invoke a sub­routine analogous to those used in our 3-way 
cut algorithm. The subroutine will either output the shortest cut that has the given topology, or else 
report (correctly) that the opti­mal cut cannot have the given topology. In order to specify the subroutine, 
we will need to know some structural results about the topology of the optimum cut, So suppose we are 
given a topology N1 ,N2,..., N~. If this is the optimal topology, then CD contains connected components 
C? ,C~, ..., C~,q 2 q, where for 1 S i <q, Ni is the setof vertices with degree three or more in C?, 
and for q < is q , C? contains at most one vertex with {V~,V~,V~,V~,V~~,V~7,V~9,V2z,V2~ cut C and its 
topology (Nl ,N2 ). degree three or more. The artalogue of Lemma 2.1 for this general k case is that 
for each C?, i < q, we can efficiently identify a subtree T? of C? that spans all the vertices of Ni. 
This was the case in Lemma 2.1, where for N1 = {a,b) (Figure 2c), we identified a path between the two 
degree-3 vertices a and b by doing a shortest path computation. For the general case, we shall need both 
shortest paths and min­imum spanning trees. For a given topology, the trees T?, i < q, are con­structed 
as follows. We treat the sets Ni, i < q, in turn. (Order is not important,) Given Ni$ we construct an 
auxil­iary weighted complete graph Hi with Ni as its vertex set and with the weight of the edge linking 
u and v being the length of the shortest path in GD between u and v. Com­pute the minimum spanning ti 
T[Hi ] of Hi, and let T? be the subgraph of GD formed by replacing each edge in T[Hi ] by the corresponding 
shortest path in GD. We shaIl call T? the mu nimum spamu ng tree of Ni (although note that it may not 
even be a tree if CD does not have the given topology). Figure 4 portrays the CD of Figure 3 with the 
trees T? (chosen according to the correct topology) high­lighted. @or future reference, the figure also 
indicates which terminal is contained in which region of CD.) The next lemma establishes the key properties 
satisfied by T? when CD has the given topology. Lemma 2.3. Let C be the optimal k-way cut and C D be 
its planar dual, viewed as a subgraph of GD. Let C?, ~GUXU34. The dual CD with the trees Tf highlighted 
and the lcwations of terminals indicated. 245 ~GURE 5. The graph CIO]~ obtained by coalescing the spanning 
trees ~ in CD. I < i s q, be &#38; co~lex connected components of CD, and let Ni be the set of vertices 
with degree three or greater in C?, 1 s is q. Then (a) each C?, 15 i S q, con­tains the m nimum spanning 
tree T? for Ni, and (b) no two of the paths in T? corresponding to edges of T[Hi ] inter­sect except 
at a common endpoint (and hence T? is indeed a tree). Lemma 2.3 treats the connected components C? of 
CD in isolation. Let us now look at how they interact. First note that the trees T? are all vertex disjoint, 
since each is a subgraph of a different connected component of CD. Thus they constitute a subforest of 
CD. Let TD represent this subforest, the union of all the edges in the T?, and let T be the subset of 
edges in G whose planar dual is TD. By Lemma 2.3, the optimal cut C for G will consist of T plus some 
additional edges, assuming we chose the correct topology for C. To find those additional edges, we delete 
T from G to obtain a new graph that we shall call GIO]. Assuming we have the correct topology, the optimal 
cut for GIO] will be CIO] = C-T. Let G [O]D be the embedded dual of GIO] obtained by coalescing all the 
edges of each T? in G~ to a single poin~ Note that G [0] D remains connected, and has lost none of the 
regions from G* since only trees were coalesced Assuming that we have the optimal topology, CIO]~ will 
be a collection of k -1 simple cycles in GIO]D, each of which is a biconnected component of CIO] D. That 
is, a connected component of CIO] D may consist of more than one cycle, but all such cycles must share 
a single common vertex. (In particular, the coalesced vertices corresponding to the T: will be such common 
vertices, although there may be others that were already present in CD.) See Figure 5. Note that in the 
embedding of G [0] D, some of the cycles of C [0] ~ will contain others. An innermost cycle will constitute 
the complete boundary of a region in C [0] D, whereas other regions may have boundaries made up of the 
edges of several cycles. We shall show that if one treats the cycles in an appropriate inside out order, 
each of these cycles can be viewed as a minimum isolating cut in an appropriately constructed graph. 
Let us identify each region with the termiml si it contains, and construct a par­tial order <on the terminals 
as follows: si < Sj if and only if the outermost cycle bounding si s region is contained in the outermost 
cycle bounding sj s region. (By convention, we assume that the outermost bounding cycle for the infinite 
region contains all other cycles, so that the terminal contained in the infinite region is > all other 
terminals.) Note that by this definition, the outermost bounding cycle for Si must separate Si from all 
terminals Sj > Si. Let z be an ordering of the terminals that is consistent with this partial order, 
i.e., if si < sj, then n(i) S z(j). For instance, for the C [O]D depicted in Figure 5, such an order­ing 
WOU1dbe S6, Sl, S4, S7, S5, S2, S1O, S3, Sll, S12, Sg, S15, s13, s9, S16, S14, s17. We define a sequence 
of graphs and isolating cuts as follows. For 1< is k 1, let A? be the setof edges in G [0] ~ making 
up the outer boundary cycle for the region containing terminal s%(i). Let Ai be the cor­res onding set 
of edges in GIO]. Note that CIO] = l-l Ui.l Ai. NOW let G[i] &#38; the graph obtained from GIO] by deleting 
the edges of u;. ~Aj. Lemma 2.4. For 1< i S k 1, A i is a rru m mum isolat­ing cut for term nal smci) 
in graph G [i 1]. Given Lemmas 2.3 and 2.4, the following procedure will handle any given topology N 
1,N2, . . . . N~ appropri­ately, either outputting the minimum weight cut with that topology or reporting 
correctly that the optimal cut cannot have that topology. Assume that as a preprocessing step we have 
constructed our standard embedding of the dual graph GD and computed all shortest paths between vertices 
of GD. Procedure CheckTopology (N l,Nz, ..., Nq) 1. For 1 < i < q, do the following. 1.1 Construct the 
auxiliary graph Hi, the minimum spanning tree T[Hi], and the subtree Tf . 1.2. If any two paths in T: 
corresponding to edges of T[Hi ] share a vertex other than a common endpoint, reject the topology. 2. 
If any two subtrees T? share a common vertex, reject the topology. Otherwise, let TD be the union of 
the edge sets T?, let G [0] be the graph obtained from G by deleting all edges in the dual set T.  
3. Let W* = 00 (our initial estimate of the optimal cut weight), For all possible permutations Sx(l) 
,sn(z,, . . . . sxw of the terminals, do the following.  3.1. SetC = T. 3.2. For1S i<k 1dothefollowing: 
3.2.1. Find a minimum isolating cut Ai for ~Z(i) in G[i 1]. 3.2.2. Set C = C u Ai, and let G[i] be the 
graph obtained by deleting the edges of Aifiom G[i-l]. 3.3. If w(C) < W*, setW* = w(C) andC* =C (the 
current best cut with this topology). 4. output c*. It should be clear from the above discussion that 
this subroutine has the desired properties, Its running time is domimted by that for the minimum isolating 
cut computa­tions occurring at Step 3.2.1. As discussed, each such com­putation can performed using a 
standard 2-terminal mini­mum cut algorithm in time O (n2 logn), assuming a machine model in which additions, 
subtractions, and com­parisons take constant time. Given our proposed method for imposing the restriction 
that all sets of edges have unique weights, however, such a model is inappropriate. Even given the standard 
assumption that the original instance has edge weights that fit into a single computer word, our method 
for insuring the subset weight uniqueness restriction gives rise to weights whose binary representa­tions 
involve @(n) bits. With such large numbers, the time bound for the isolating cut computations grows to 
0(n3 logn). We perform k 1 such computations for each of the k! permutations of the terminals, yielding 
total of O(kk ) for each topology. The overall algorithm then consists of performing Pro­cedure CheckTopology 
for each possible topology, of which there are 0((2n) 2k-4 ) by Lemma 2.2, and out­putting the best cut 
found for any non-rejected topology. Thus we have our claimed result for general fixed k, stated here 
in slightly more precise form than given in the intro­duction: Theorem lb. Given a planar graph G with 
n vertices and k specijied terminals, a minimum k-way cut can be con­strutted in time 0((4k) kn 2k-1 
logn). Note that if we specialize this result to the previously considered case of k = 3, the time bound 
is 0(n5 Iogn), substantially larger than the O (n 3logn ) of Theorem la, This is a result of two factors: 
(1) A factor of n because we can t in general find the needed isolating cuts using planar 2-terminal 
cut algorithms, as we could when k = 3, and so have to use general 2-terminal cut algorithms. (2) A factor 
of n because we needed to operate with @(n)-bit weights in order to insure that every subset of edges 
had a unique weight. It may well be that more efficient algorithms can be derived by careful algorithmic 
design and analysis, but the bounds we have presented adequately fuliill our goal of showing that the 
k-way cut problem can be solved in poly­nomial time for fixed k and planar graphs. Moreover, as the NP-completeness 
result of the next seetion implies, it is likely that any algorithms for the general problem will have 
exponential (or at least super-polynomial) running times. /.NH Complexity of Planar Multiway Cut Our 
proof of NP-completeness for the general planar multiway cut problem is via a transformation from PLA-NAR 
3-SATISFIABILITY [16], using an elaborate compo­nent design construction (details in the full paper). 
The problem remains NP-complete even if all edge weights are equal to 1 and no vertex degree exceeds 
11 (a degree bound that should be reducible to 6 by a mom-complicated variant on our proof). If one allows 
atlows edge weights to range over the set (1,2, 3,4, 5) rather than requiring them all to be equal, the 
degree bound can be Educed to 3. The prob­lem is of course trivial if the maximum degree is 2. 3. Multiway 
Cut for Fixed k and Arbitrary Graphs This section covers our results about the multiway cut problem on 
arbitrary graphs. We begin with our NP­completeness result for fixed k >3 and then discuss ways of coping 
with the implied complexity of the problem. Note that it suffices to prove the problem NP-complete for 
k = 3, since the problem for higher values of k can trivially be derived from that for k = 3. We discovered 
the key gadget needed our NP-completeness proof while pursu­ing what at first seemed like a promising 
algorithmic approach to the 3-Way Cut problem, based on results on submodular set functions by Grotschel, 
Lovdsz, and Schri­jver [12]. 3.1. Cuts as Submodular Set Functions In order to understand the results 
of [12], we first need some definitions. Let U be a finite set. A function~ defined on the subsets of 
U is submodular if for any two subsets X and Y of U, f(X) +f(Y) > f(X n Y) +f(X U Y). Grotschel, Lovdsz, 
and Schrijver [12] show that if a sub­modular set function~can be computed in polynomial time, then ~ 
can also be minimized, i.e., set Y with ~(Y) = min V(X): X c U) can be found, in polynomial time. (The 
algorithm involves an appropriate application of the ellipsoid method.) A paradigmatic example of a submodular 
set function involves the usual (2-way) minimum cut problem. In this case, U is the set of nonterminal 
vertices V (s 1,s2 ], and ~(X) is the total cost of the edges which have precisely one endpoint in the 
set X u {s 1}. The submodularity of this function is easy to verify, as is the fact that min~(X): X G 
U) is the weight of a minimum 2-way cut. We of course aheady know how to minimize this function~ in polynomial 
time without resorting to the ellipsoid method, but the formulation is suggestive. Could it be pos­sible 
that 3-way cuts might also be computable as minima of a submodukw set function? It is easy to define 
a set function for 3-way cuts that is analogous to the one above for the 2-way case. Let U = V -(S I 
,Sz ,Sq ) be the set of nonterminal vertices. For any 3-way cut E , let us say that a set X G U is associated 
with s ~ under E if (1) X contains neither S2 nor S3 and (2) every edge of G with precisely one endpoint 
in X u {sl ) belongs to E . Note thatif a 3-way cut E disconnects some ver­tices from all three terminals, 
then more than one set can be associated withs 1 under E . (Under a minimum 3-way cut however, the set 
associated with s 1 is uniquely deter­mined.) For any subset X of U, let $(X) be the minimum cost of 
a 3-way cut under which X is associated withs 1. It is easy to see that the minimum value for this function 
over all X G U equals the minimum weight for any 3-way cut. Moreover, we can use a polynomial-time algorithm 
for the 2-way cut problem to evaluate~ in polynomial time Given a subset X of U, find a minimum weight 
cut separating S2 from S3 in the graph obtained by deleting SI and all the vertices in X from G. Add 
to the weight of this cut the weight of all edges with precisely one endpoint in X u {sl ). Therefore, 
if~ were submodular (for all graphs), we could solve the 3-way cut problem in polynomial time. Unfortunately, 
this is not the case. Consider the 9­ vertex graph C depicted in Figure 6. Note that in addition to the 
three terminals s 1,s2 ,s3, the graph contains two specified vertices x and y. The 12 edges incident 
on the ter­ minals have weight 4, as indicated in the figure. The other 6 edges, unlabeled in the figure, 
have weight 1. Let c* be the cost of an optimal 3-way cut for C. For each i ,j, 1 <i, j <3, let an i,j-cut 
be. a s-way cut that leaves vertex x connected to si and vertex Y comected to sj, and let 4 S1 4 HGURE 
6. Graph C: Submodularity counterexsmple and NP-completeness gadget. c(i, j) be the cost of a minimum 
i,j-cut. The sets X and Y that cause~to violate submodularhy are defined as follows: Let X be the set 
of vertices connected tos 1 in an opti­mal 1,2 cut. (Note that by definition of i,j-cut, x is in X and 
y is not.) Let Y be the set of vertices connected tos 1 in art optimal 2,1 cut. (Note that y is in Y 
and x is not.) By definition, we have \(X) = c(1,2) and ~(Y) = c(2, 1). We also must have ~(X u Y) 2 
c(l,l) and ~(X n Y) 2 min{c(2,3) ,c(3,2) ,c(2,2) ,c(3,3)). ~US if ~ were sub­mochdar, we would need to 
have c(1,2) + c(2,1) 2 c(l,l) + min{c(2,3),c(3,2 ),c(2,2),c(3,3)). In light of the following lemma, however, 
this claii is false. Lemma 4.1. For the graph C of Figure 6, the follow­ ing properties hold: (a) c(1,2) 
= c(2,1) = c*, (b) c(i,j) 2 c* + 1for all other pairs i, j, and (c) C(l,l) = C(2,2) = c* + 1.  3.2. 
The NP-Completeness of 3-Way Cut As mentioned above, the graph C does more than sim­ply mle out a promising 
algorithmic approach. It is the key gadget in our NP-completeness for 3-WAY CUT, a local replacement 
transformation from the SIMPLE MAX CUT problem [8,9]. One replaces each edge of the original graph with 
a copy of C, identifying the vertices x and y with the edge s endpoints. Details are in the full paper. 
The graph constructed in our proof does not have bounded vertex degrees. TMs is unavoidable, so long 
as we assume all edge weights are equal. If k is fixed, all edge weights are equal, and there is a bound 
don vertex degree, then Muhiway Cut can be solved in polynomial time! Observe that in thk case the weight 
of a cut is simply the number of edges it contains, and an optimal cut can contain no more than kd edges 
(since the cut that simply breaks all the edges incident on each terminal is no bigger than this). But 
since k and d are fixed, kd is a constant independent of n. Consequently, we can use exhaustive search 
and still take time that is polynomially bounded inn. If we ~move the restriction to equal-weight edges, 
however, the fixed-k problem becomes NP-complete even if all vertex degrees are three or less. 3.3. Reducing 
the Instance Size The results of Sections 4.1 and 4.2 effectively dash any hope of finding optimal k-way 
cuts, k z 3 efficiently by means of 2-way cut (i.e. max flow) algorithms. Such algo­rithms may still 
be useful, however, as we shall see in this and the next section. Recall that an isolating cut for a 
ter­minal si is a set of edges that separates si from the other two terminals, and that minimum weight 
isolating cuts can be found in O (nmlog(n2/nz)) time by performing max flow computations in a modified 
graph. The following Lemma implies that the computation of minimum weight isolating cuts can be used 
to reduce the number of vertices 248 in an instance. Suppose G = (V,E) is a connected graph with s~ltied 
te~mds ~1,$2, ..., sk. Lemma 4.2. Suppose i = {1,2,...,kJ,k23. Let Ei be a minimum weight isolating cut 
for terminal si, and let Vi be the set of vertices that rew n connected to si when the edges of Ei are 
removedfiom G. Then there exists an opti­mal k-way cut for G that leaves all the vertices of Vi con­nected 
to si. Using Lemma 4.2, we can reduce the number of ver­tices in our instance by IVi -1 ~ Simply construct 
a new graph in which all the vertices of Vi are merged into the terminal si. An optimal k-way cut for 
this shrunken graph will induce an optimal cut for the original one. In order to get the maximum effect 
from applying Lemma 4.2 in this way, we should start with the minimum isolating cut for si such that 
Vi is as big as possible. Let us say that a set Vi is an isoiation set for a terminal Si if it is the 
set of vertices left connected to si by some minimum weight isolating cu~ Let us call it an optimum isolation 
set for si if it has maximum cardinality over all isolation sets for si. From observations made in [6, 
pp.10-13], it can be seen that the optimum isolation set for a given terminal is unique and contains 
all other isolation sets for that termi­nal. It can be found by performing one maximum-flow computation 
followed by some linear-time post-processing. A corollary of the following Lemma is that k optimum iso­lating 
set computations suffice to shrink G as far as it can go. Lemma 4.3. Let Vi be the optimum isolation 
set for si, I < i <k, ad let ~ bethe graphobtainedfr~m G by merg­ing all the vertices of VI into s ~. 
Then in G the optimum isolation set for s ~ is {s ~}, and the optimum isolation set forsiis Vi-V1,2<i 
<k. Lemma 4.3 indicates both the efficiency with which we can apply Lemma 4.2 to reduce the instance 
size, and the bounds on how much shrinkage can be obtained. In partic­ular, k optimum separation set 
computations suffice to yield all the shrinkage one can expecc Note that the proof of Lemma 4.3 would 
apply just as well if we renamed the ter­minals in any order. So let GO = G, and inductively obtain Gi 
from G i-1 by performing an optimum isolation set computation for si and merging all the vertices in 
the set obtained into the terminal si. Lemma 4.2 says that an opti­mal k-way cut in Gi induces one in 
G i -1 (~d, by induc­tion, in G), and Lemma 4.3 says that the optimum isolation set for si in G i is 
(si ) (and by induction, the optimum iso­lation set for SA, 1< h S i, is (sA)). Thus in Gk, the opti­mum 
isolation set for each terminal consists of the terminal itself, but a minimum weight k-way cut still 
induces one in the original graph G. Thus Gk is a maximally shrunken graph that can still induce an optimal 
k-way cut. 3.4. Near-Optimal Multiway Cuts If one is willing to settle for cuts that are only near­optimrd, 
one can exploit a bit further our ability to construct optimum isolating cuts. Consider the following 
straightfor­ward heuristic. Isolation Heuristic 1. For ~ < i < k construct a minimum weight isolating 
cut Ei for terminal si. 2. Determine h such that ~A has maximum weight among dl the Ei s. 3. ht ~ be 
the union of dl cuts ~1 except ~h. 4. Return ~.  Note that the Isolation Heuristic clearly outputs 
a k-way cut. Moreover, it can be implemented to run in 0(knmlog(n2/m) time by using the max flow algorithm 
of [10] to compute each of the k required isolating cuts. This is the heuristic to which we referred 
in Theorem 4 of the Introduction. A more precise statement of that theorem can now be given, Theorem 
4. The Isolation Heuristic constructs a k-way cut whose weight is guaranteed to be no more than 2(k -1)/k 
times the optimal weight. Proof. We first consider the upper bound, Let ~ bt_an opti­malk-way,andletW 
=w(~). For1Si< k,let~i bethe set of vertices left connected to si by ~, and let Ei be the setof edges 
in ~ with one endpoint in ~i. Note first that for ea~h i, the set fii is an isolating cut for si. Hence 
w(zi) 2 w(Ei). Thus On the oth~r hand, each edge ~ ~ is in exactly two d~ffer­ent se~ Ei, and so Z$=lw(Ei) 
= 2i7. Th~ w(E) S W(2(k -1)/k), as claimed. (Note that it is easy to show that this bound cannot be improved.) 
0 For k = 3, the ratio guaranteed by Theorem 4 is 4/3 and fairly close to 1. An interesting question 
is whether there are any polynomial time heuristics that provide better guarantees. In particular, is 
it conceivable that we could guarantee ratios arbitrarily close to 1? Formally, is there a polynonu al 
time approximation scheme for 3-way cut, i.e., a sequence of polynomial time algorithms A ~, where A 
~ is guaranteed to find a 3-way cut of weight at most 1 + 1/t times the optimal weight? (The algorithms 
need not be polynomial in t,only in the instance size.) There is significant evidence that the answer 
to this question is no. In particular, our proof of Theorem 3 implies that the 3-Way Cut problem is MAX 
SNP-hard [18]. As a consequence, it is no more likely to have a poly­nomial time approximation scheme 
than optimization ver­sions of a variety of other problems for which no such schemes are known, such 
as MAX 3-SAT, the problem of finding a truth assignment for a (not-necessarily satisfiable) instance 
of 3-SAT that maximizes the number of satisfied clauses. See the full paper for a more-detailed explanation 
of these matters. 4. Related Results and Open Problems Our NP-completeness results in Sections 3 and 
4 can be adapted to several related problems of interest. In 1969, T. C. Hu [14] raised the question 
of the complexity of the fol­lowing problem. Suppose we are given a list of vertex ptis (Ui, Vi), 1< 
is k, and are asked to find a minimum c(u~,u*,...,~&#38;,vl,v2,..o,v~) cut, i.e., a minimum weight set 
of edges separating =h pti of vertices ~i, vi, 1< i <k. This is just 2-way Cut when k = 1. The prob­ 
lem is also polynomial time solvable when k = 2, by using two applications of a 2-way cut algorithm [21]. 
Our result for 3-Way Cut implies that it is NP-hard for arbitrary graphs when k = 3, even if all edge 
weights are equak merely let the three pairs be (S1 ,S2), (S2,S3), and (s3 ,sl). (If one wants M the 
ui rind vi to be distinct, the problem remains NP-hard, as can ke proved via a simple modification to 
the input graph.) Note that for any fixed k the Isolation Heuristic of Sec­tion 4.4 can be used in the 
design of a polynomial-time approximation algorithm for Hu s problem. For each parti­tion P of the vertices 
ul ,uz,...,uk,vl ,vz,...,v~ into sets s~,..., S Ipl such that no pti (~i ,vi) is in the same S@ let GP 
be the graph obtained by merging all the vertices in set Sj into a single terminal vertex sj$ 1 S j S 
1P) Run the Isolation Heuristic on each such graph Gp, and output the best cut found. Since the optimal 
C(UI ,z42,...,u~,v1 ,v2,.,.,v~) cut must induce one of the partitions P, and since no partition contains 
more than 2k sets, the weight of the cut we output is at most 2(2k -1)/2k = (2k -1)/k times optimal by 
Theorem 4. The running time is 0(2Uknmlog(n2/m)), which is poly­nomial for fixed k. The question remains 
open, however, as to whether there is a polynomial-time approximation algo­rithm that works for arbitrary 
k and provides a similar guar­antee. More recently, Erdos and Szdkely in [4,5] proposed the following 
generalization of Multiway Cut. Suppose you are given a graph G = (V,E) weighted edges, and a partial 
k-coloring of the vertices, i.e., a subset V G V and a func­tion~:V + {1,2 ,... ,k). Can ~ be extended 
to a total func­tion such that the total weight of edges that have different colored endpints is minimized? 
The k-Way Cut problem is the special case where IV I = k and ~ is 1-1, i.e., each color is initially 
assigned to precisely one vertex. It is easy to see that for general graphs, this problem is in fact 
equiv­alent to Multiway cuc simply merge all the vertices with the same color, call the resulting merged 
vertices termin­als, and find the minimum weight k-way cut for the resulting graph. For special classes 
of graphs, however, the Colored Multiway Cut problem can be more general. (The above merging trick need 
not for instance preserve planarity or acyclicity.) Nevertheless, the dynamic pro­gramming algorithm 
mentioned in the Introduction for MuMway Cut on trees extends in a natural way to the Col­ored Multiway 
Cut problem, yielding an O (nk) algorithm, as Erd6s and Sz4kely observe. This in turn implies that if 
G is such that &#38;leting all the terminals renders it acyclic, then Multiway Cut can itself still be 
solved in O(nk) time. (Simply split ~ch terminal si into &#38;gree(si ) separate ver­tices, one for each 
edge incident on si, assign color i to all the derived vertices, and apply the abovementioned algo­rithm 
for Colored Multiway Cut on trees to the resulting graph [5].) An obvious question is whether our algorithms 
for pla­nar graphs also extend to Colored Multiway Cut problem. The answer is no. Colored Multiway Cut 
is clearly polynomial-time solvable if k = 2, even for general gmphs. For any fixed k 23, however, it 
remains NP-complete even for planar graphs and all weights equal to 1. The k = 4 case follows directly 
from our proof of Theorem 2. For k = 3, the result can be proved by a transformation from PLANAR 3-COLORABILITY 
[8,9], using a local replace­ment argument in which each edge is replaced by a par­tially colored structure 
designed to make it expensive for the endpoints of the original edge to get the same color. We leave 
the details to the enterprising reader. (Note that this last result provides us with an alternate proof 
of the NP-completeness of 3-WAY CUT for general graphs: once again simply merge all vertices with the 
same color. The fact that such an operation may destroy planarity is in this case irrelevant.) Returning 
to the original Multiway Cut problem, in our opinion the most interesting open problem is whether one 
can improve upon the approximation results of Theorem 4. Although polynomial-time algorithms with worst-case 
ratios arbitrarily close to 1 are unlikely in light of Theorem 5, can we do better than the 2(k 1)/k 
guarantee we proved for the Isolation Heuristic? Noga Alon [private communi­cation, 1991] has observed 
that for the special cases of k = 4 and k = 8 improvements can be obtained using a variant of our approach. 
For k = 4, the Isolation Heuristic provides a guarantee of 3/2. An improved guarantee of 4/3 can be obtained 
as follows For each partition of the termi­nalsintosetsS~,S2ofsizetwo,usemaxflow techniquesto compute 
the minimum cut that separates the termiruds in S ~ from those in S2. Output the union of the two best 
such cuts. The reader can readily verify that this union is a 4­way cut whose weight is at most 4/3 optimal. 
Note that this approach requires only three max flow computations versus the four needed by the Isolation 
Heuristic, so it is faster as well. (Cunningham reports in [2] that F. Zhang has independently obtained 
this k = 4 improvement.) For k = 8, the guarantee of our theorem can be improved tlom 7/4 to 12/7. Here 
one computes minimum 2-way cuts based on partitions of the set of terminals into sets of size four. 
It can be shown that the average weight of these cuts is at most 4/7 times the weight of art optimal 
8­way cut, and that there exists a set of three of these cuts whose union is art 8-way cut and whose 
total weight is no more than average. This yields the claimed bound. More­over, the running time is once 
again an improvement on the Isolation Heuristic, which in this case would require eight max flow computations. 
This is because we can show that it suffices to restrict attention to just seven of the 35 possi­ble 
partitions of the eight terminals into sets of size four (the seven being derived from the rows of a 
Hadamard matrix). Unfortunately, the above approach does not yield improvements over the Isolation Heuristic 
for any values of k other than 4 and 8. Is there some general technique that will improve on the Isolation 
Heuristic for arbitrarily large values of k? What about simply beating our bound for the caseofk =3? 
Turning to our optimization algorithms for the planar case, the obvious question is whether the running 
times can be improved, although for the case of general k the improvement would have to be substantial 
to be interesting. For instance, although we would expect any algorithm to be exponential in k, the exponent 
containing k might not have to be attached to n. Could there be an algorithm whose running time was ckna, 
where a was independent of k? REFERENCES 1. S. CHOPRAAND M. R. Mo, On the multiway cut polyhe­dron, 
Networks 21 (1991), 51-89.  2. W. H. CUNNINGHAM The optimal multiterminal cut prob­lem, DIMACS Series 
in Disc. Math. and Theor. Comput. Sci. 5 (1991), 105-120. 3. E. DMIIJMUS, D. S. JOHNSON,C. H. pAPADIHOU, 
P. D. SEYMOUR, AND M. YANNAXAXIS, The complexity of multi­way cuts, extended abstract (1983). 4. P. 
L. M&#38; AND L. A. SZEXELY, Evolutionary trees: An integer mukicommodity msx-flow rein-cut theorem, 
Adv. in Appl. Math., to appear. 5. P. L. EIU)?SAND L. A. SZEKELY, On weighted multiway cuts, unpublished 
manuscript (1991). 6. L. R. FORD,JR, ANII D. R. FULKERSON,Flows in Networks,  I-MmcetonUniversity 
Press,F%mceton,NJ, 1962. 7. G. N. FREDERICXSON,4 Fast algorithms for shortest paths in planar graphs, 
with applications, SIAM J. Comput. 16 (1987), 1004-1022. 8. M. R. GAMY ANDD. S. JOHNSON,Computers and 
Intractabil­ity: A Gw de to the Theory of NP-Completeness, W. H. Free­ma New York, 1979. 9. M. R. GARRY,D. 
S. JOHNSON,ANDL. STOCKMEYZR, Some simplified NP-complete graph problems, Theor. Comput. Sci. 2 (1976), 
237-267. 10. A. V. GOLDBERGANDR. E. TARJAN, A new approach to the maximum-flow problem, J. fiSSOC. bmput. 
Mach. 35 (1988), 921-940.  11.0. GOLDSCHWDTAND D. S. HOCHBAUM Polynomial algo­rithm for the k-cut problem, 
in Proceedings 29th Ann. Syrnp. on Foundations of Computer Science, IEEE Com­puter Society, Los Angeles, 
Calif., 1988,444-451. 12. M. GR&#38;SCHEL, L. LOV~SZ, AND A. SCHRIJVER, The ellip­soid method and its 
consequences in combinatorial optimiza­tion, Combinatorics 1 (1981), 169-198. 13. D. S. HOCHBAUMAND 
D. B. SHMOYS, An 0( IV12)algo­rithm for the planar 3-cut problem, SL4M J. Algebraic and Discrete Methods 
6 (1985), 707-712. 14. T. C. I-Iu, Integer Programming and Network F1OWS, Addison-Wesley Publishing 
Co., Redmg, MA, 1969. 15. E. L. LAWI.ER,Combinatorial Optimization: Networks and h4atroids, HoIt, Rinehart 
and Winsto~ New York, 1976. 16. D. LIECHTENSTEIN, Planar formulae and their uses, SIAM J. Comput. 11(1982),329-343. 
 17. C. H. PAPADIhn raIouANDK. SI EIOUTZCombinatorial Opti­mization: Algorithms and CompLmity, Prentice-Hall, 
Inc., Englewood Cliffs, NJ, 1982. 18. C. H. PAPADIhtrTRIOUAND M. YANNAKAXIS, Optimization, approximatio~ 
and complexity classes, J. Comput. System Sci. 43 (1991), 425-440. 19. H. SARANAND V. V. VAZIRANI, Finding 
k-cuts within twice the optimal, in Pzoceedmgs 32nd AuL Symp, on Founda­tions of Computer Science, IEEE 
Computer Society, Los Angeles, Cslif., 1991,743-751. 20. H. S. STONE, Multiprocessor scheduling with 
the aid of net­work ftOW alg;riduns, IEEE -Trans. Soj?ware Engirwering SE-3 (1977), 85-93.  21 M. YANNAKAKLS,P. 
C. KANELLAIUS,S. c. COSMADAIGS,ANO C. H. PAPADIMITRIOU, Cutting snd partitioning a graph after a fixed 
patt~ in Automata, Languages, and Program­ming, Lecture Notes in Computer Science, Vol. 154, Springer, 
Berlin, 1983,712-722.   
			