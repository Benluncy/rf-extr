
 On the Approximation of Protein Threading Tatsuya Akutsu and Satoru Miyano Human Genome Center, Institute 
of Medical Science, University of Tokyo 4-6-l Shirokanedai, Minato-ku, Tokyo 108 Japan e-mail: {takutsu, 
miyano}@ims.u-tokyo.ac.jp Abstract In this paper, we study the protein threading problem, which was proposed 
for finding a folded 3D protein structure from an amino acid sequence. Since this problem was already 
proved to be NP-hard by Lathrop, we study polynomial time approximation algorithms. First we show that 
the protein threading problem is MAX SNP-hard. Next we show that the protein threading problem can be 
approximated within a factor 4 for a special case in which a graph representing interaction between 
residues (amino acids) is planar. This case corresponds to a P-sheet substructure, which appears in most 
protein structures. Introduction The protein folding problem is, given an amino acid sequence (a string), 
to find its correctly folded 3D protein structure. It is one of the most important computational problems 
in molecular biology. Although this problem can be defined as a minimization problem, it is too hard 
to be solved directly. Recently, an indirect approach called inverse folding was proposed [2, 4, 6, lo]. 
In inverse folding, given an amino acid sequence and a set of protein structures (structural pat-terns), 
a structure into which the sequence is most likely to fold is computed. To test whether or not a sequence 
is likely to fold into a structure, an alignment between spatial posi-tions of a 3D structure and amino 
acids of a sequence is com-puted using a suitable score function. That is, an alignment which minimizes 
the total score (corresponding to potential energy) is computed. This minimization problem is called 
a protein threading problem, and an alignment between a sequence and a structure is called a threading 
(see Fig. I) [4, 9, lo]. Note that, in Fig. 1, gaps (insertions and deletions of amino acids) are not 
allowed in core regions, but allowed only in loop regions, where a protein structure is partitioned into 
core regions and loop regions: This assumption is used in Ref. [lo] and seems reasonable. Although we 
employ this assumption in this paper, our results may be extended for the case in which insertions and 
deletions of amino acids in core regions are allowed. Pemlissiotl to make digitalihard copies of all 
or part ofthis nlaterinl for personal or cl.assrootn USC is granted without fee provided that the copies 
are not made or distributed for profit or commercial advantage, the copy- right notice. the title ofthe 
publication and its date appear. and notice is given that copyright is by permission ofthc ACM, Inc. 
To copy otherwise. to repuhlir.h, to post 013 servers or to redistribute to lists, rqlires specific permission 
and/or fee. RECOMH 97, Sn~lta I:c New Mexico (ISA opyright 1997 ACM O-R9791-X82-Ri97101 $3.50 A variety 
of studies have been done for the protein thread-ing problem. However, there are only a few studies that 
try to find an optimal threading (i.e., a threading with the min-imum score) [4, 9, lo]. Bryant and Lawrence 
used exhaus-tive search to examine all possible threadings [4]. But, their method can only be applied 
to very small structures. Lath-rop proved that the protein threading problem is NP-hard [9]. However, 
Lathrop and Smith applied the branch-and-bound search technique to the protein threading problem in a 
clever way and succeeded to compute optimal threadings for proteins of medium size [lo]. Although Lathrop 
and Smith s algorithm is very nice, long time is required if it is applied to a large protein struc-ture. 
Moreover, if we allow insertions and deletions of amino acids in core regions, it would take too long 
time. Thus, this paper studies a computational aspect of the protein thread-ing problem. Since it was 
already proved to be NP-hard, we study (polynomial time) approximation algorithms. Of course, approximate 
solutions are different from optimal so-lutions corresponding to 3D shape. However, they are useful from 
the following reasons: the correct structure could be se-lected if the guaranteed error bound were sufficiently 
small; approximate solutions might lead to optimal solutions if it is combined with local search; approximate 
solutions might be useful for speeding up the branch-and-bound procedure. Note that an approximation 
algorithm has been already de-veloped for the protein folding problem (not the inverse fold-ing problem), 
but its model was too simple [7]. In this paper, we first show that the protein threading problem is 
MAX SNP-hard. Moreover, we show that ap proximation of the problem is at least as hard as approx-imation 
of the DENSEt-SUBGRAPH problem, for which only an O(r~ .~ss ) ratio approximation algorithm is known 
[8]. Next we consider a special case in which a graph repre-senting interactions between residues (amino 
acids) is pla-nar. This case corresponds to most P-sheet substructures. For this case, we show a polynomial 
time algorithm which approximates the optimal score within a constant factor. 2 The Protein Threading 
Problem As mentioned in Introduction, the protein threading prob- lem (PROTEIN THREADING, in short) is, 
given a se- quence and a 3D protein structure, to find an alignment (a threading) between the sequence 
and the structure with the minimum score. Lathrop and Smith defined this prob-lem in a formal way [9, 
lo]. In this paper, we modify their definition into much simpler form without loss of generality as follows 
(see Fig. 1).  e core region He-.,@ -loop region 0residue position Figure 1: The protein threading 
problem. Input: sequence s = sls2 f.. s,, over a fixed alphabet C (usually ICI = 20), core lengths cl, 
~2, . . . , cm, score function g(i, j,ti, tJ) (g(i, j, ti, t,) 1 0), output: m-tuple t = (tl, . . . 
, tm) which maximizes a total score: score(t) = C g(i, j, ti, t3) i<J under the condition that 1 5 tl 
, ti + ci 5 ti+l, t*+cm <n+l. This definition may look strange since it is defined as a maximization 
problem. However, the protein threading problem is intrinsically a maximization problem as well as the 
protein folding problem is. Indeed, usual score func-tions can take negative values and the minimum score 
can become negative. Thus, by inverting the sign of values of score functions and by adding a constant 
factor, we can treat the protein threading problem as a maximization problem. This definition seems more 
natural when we consider ap proximation algorithms for the problem. In Lathrop and Smith s definition, 
two kinds of score functions gl(i, ti) and gz(i,j, ti, t,) are used, while only one kind is used in the 
above definition. However, letting g(i, i+ 1, ti,ti+l) = gl(i, ti) + gz(i, i + 1, ti, ti+*), we can treat 
any score functions used by Lathrop and Smith. Note that we ignore the time for computing g(i, j, ti, 
tj) because it can be computed in polynomial time for most score functions. Although the lengths of loop 
regions are included in au input in Lathrop and Smith s definition, the effect of loop regions can be 
taken into account in the above definition by adding a length of a loop region to a length of a core 
region and by modifying g(i, j, ti, t3) suitably. Therefore, in the above definition, there is no loss 
of generality. We call t = (tl,..-, tm) a threading if it satisfies the above condition (1 5 tl, ti + 
ci 5 ti+l, 1, + cm 5 vz + 1). C, denotes the i th core (with length c,). For an instance PT of the problem, 
we associate a directed (multi) graph GPT(VPT,EPT) such that VPT = {s.,G}, EPT = EPTU{(Ci,Ci+l) 11 2 
i < m}, where EPT = {(Ci,CJ) 1 i < j and 3(ti, tJ)(y(i, j, tiy t3) # 0)). Note that GPT can have multi-edges, 
where the maximum multiplicity is at most 2. In this paper, we consider two special cases: a case in 
which the maximum vertex degree of GPT is bounded by a constant B, and a case in which GPT is planar. 
The former case is called PROTEIN THREADING-B. Most protein structures correspond to this case because 
each core inter-acts with small number of other cores if we ignore weak interactions. Indeed, most scores 
become very small when the distance between residues exceeds a threshold value [9]. The planar case corresponds 
to P-sheet substructure, which appears in most core regions and is known aa a kind of secondary structure 
(see Fig. 2) [3]. ,&#38;sheet consists of multiple P-strands. To classify P-sheet structures, topol-ogy 
diagram has been used [3]. In topology diagram, /3-starnds are usually arranged parallel in a plane, 
and each P-strand strongly interacts with at most two neighbor /3-strands. Thus, in most P-sheet substructures, 
GPT can be considered a planar graph. Although other substructures (e.g., cy-helices) can appear in core 
regions, good approxi-mations might be obtained even if we only consider P-sheet substructures. At least, 
this special case would be useful to identify P-strands in a given amino acid sequence. Identi-fying 
&#38;strands is also an important problem in molecular biology. protein structure .~ , topology diagram 
Figure 2: P-sheet and topology diagram. In this case, p2 strongly interacts with ,&#38; and p3. Figure 
3: Correspondence between the maximum cut and the optimal threading. In this paper, we consider polynomial 
time approxima-tion algorithms. Recall that the performance ratio of an approximation algorithm for a 
maximization problem is the worst-case ratio of the size of the optimal solution to the size of the approximate 
solution. If there exists an approxima-tion algorithm with performance ratio f(n) for a problem X where 
n denotes the size of an input, we say that X can be approximated within a factor f(n) [I]. 3 Hardness 
Results First, we show that PROTEIN THREADING is MAX SNP-hard even if the maximum vertex degree is bounded 
by a constant B. From this result, a constant size lower bound of performance ratio follows under the 
assumption of P # NP [l, 131. Note that the following theorem also gives a much simpler proof of NP-hardness 
of PROTEIN THREADING than that in [9]. Theorem 3.1 PROTEIN THREADING-B is MAX SNP-hard. Proof We use 
L-reduction from MAX CUT for graphs of bounded vertex degree B -2, which was already proved to be MAX 
SNP-complete [13]. MAX CUT is, given an undi-rected graph G(V, E), to find a subset V c V maximizing 
the cardinality of the cut (i.e., the number of edges between V and V -V ). From G(V, E) of bounded degree 
B -2 where V = {WI,... , v~}, we construct an instance of PRO-TEIN THREADING-B in the following way: 
n-01 s s = -over C= {O,l}, c1=c2=...=c,=1, g(i, j, ti, t,) = 1 if i < j, (Vi,Vj) E E and st, # 'tj > 
otherwise g(i, j, ti, t,) = 0. Then, each threading corresponds to a cut and the score of a threading 
is equal to the size of the corresponding cut (see Fig. 3). Therefore, this reduction is L-reduction 
and the theorem follows. 0 Next, we show a result suggesting that approximation of PROTEIN THREADING 
is much harder, using a reduc- tion from the DENSE-LSUBGRAPH problem [8]. DENSE-k-SUBGRAPH is, given 
an undirected graph G(V, E) and an integer k, to find a subset V C V of cardinality k with maximum number 
of edges (in an induced subgraph by V ). Although no lower bound of performance ratio has been proved, 
DENSE-L-SUBGRAPH is considered to be hard to approximate. Currently, an approximation algorithm by Kortsarz 
and Peleg achieves the best performance ratio of O(n o.3885) [8]. Theorem 3.2 If PROTEIN THREADING can 
be approx- imated within a factor f(lsI) in polynomial time, DENSE-LSUBGRAPH can be approximated within 
a factor f(lV12) in polynomial time. Proof. From an instance (G(V, E), k) of DENSEk-SUB GRAPH where V 
= {q , . . . , v }, we construct an instance of PROTEIN THREADING in the following way. n-l n-1 S = g?ij 
al e a2 oao . . n-1 n2-kn 00 . . .o Uk 00. . . 0 over C = {O,l) where ai = 1 for all i, and cj = 1 for 
all j, g(i, j, t,, t3) = 1 if i < j, (ui,VJ) E E and st, = stj = 1, otherwise g(i, j, ti, tj) = 0. Then, 
a subset of cores {Ci I sti = 1) corresponds to a subset V . From this observation, it is easy to see 
that the maximum score in PROTEIN THREADING is equal to the maximum number of edges in DENSELSUBGRAPH. 
Moreover, given a threading t, we can obtain V c V of cardinality at most % having score(t) edges in 
polynomial time. Since IsI (length of s) is n2, the theorem holds. I Note that if the maximum degree 
of G(V, E) is bounded by a constant, there is a trivial constant ratio approximation algorithm for DENSE-L-SUBGRAPH. 
In the above con-struction, an instance of PROTEIN THREADING-B is con- structed from such a graph. Thus, 
the above theorem does not suggest the hardness of PROTEIN THREADING-B. However, we can show that approximating 
PROTEIN THREADING-B is at least as hard as approximating DENSE LSUBGRAPH for general graphs. Theorem 
3.3 If PROTEIN THREADING-B can be ap- proximated within a factor f (IsI) in polynomial time, DENSE- LSUBGRAPH 
can be approximated within a factor f(lVl ) in polynomial time. Proof. Modify the construction in Thm. 
3.2 as follows, where we assume without loss of generality that k < n -1: ,a no na n= ---A 9 = OO...O 
b1 00.--O b2 OO...O ... OO..-0 bk n=-kn=-kn roe . . . over C = {O,l} where each bi is a sequence of l 
s with length n, Cl = c2 = . . . = C2 2 = 1, g(Wi--l)+j, Wj-l)+i, t2n(i-l)+j,t2n(j-l)+i) = 1 if 0 < i 
< j 5 n, (vi,eJ) E E and st3,C,-I)tj = St2n(,-1)-t* = 1, otherwise g(i, j, ti, tJ) = 0. f= this case, 
consecutive cores C2n(i-1)+1C2n(i--1)+2.. . zn(s-l)+n correspond to a vertex v,. Note that cores C2n(i--l)+n+lC2n(i-l)+n+2 
*..CZ~(L-~)+Z~ are introduced SO that one b, does not correspond to multiple vertices. Since G~T(VPT, 
EPT) is a graph of bounded degree 3, the theorem can be proved using a similar discussion as in Thm. 
3.2. 0 Next, we consider the case in which GPT(VPT, EPT) is planar. For this case, we will show a constant 
ratio approxi-mation algorithm in the next section. But, even in this case, the problem remains NP-hard 
as shown below. Theorem 3.4 PROTEIN THREADING-B is NP-hard even if GP@PT, EPT) is planar. Proof. We use 
a reduction from the longest common sub-sequence problem (LCS) over a binary alphabet, which was already 
shown to be NP-hard [II]. LCS is, given strings s1 = 3; . . . sl 32 = ST.. ..&#38; . . .) Sk = 91k . 
 . .sf, over 1 C = (0, 1) and an integer L, to decide whether or not there exists a string s of length 
L such that s is a subsequence of s for each i 5 k. We assume without loss of generality that k is even. 
Let (s )- denote the reversed string of s (i.e., (.9 )- = sL,sk,-l . . sf ). From an instance of LCS, 
we construct an instance of PROTEIN THREADING as follows. s = b s1 aa (s )- aa s3 aa (s )- aa . . . sk- 
aa (s )- b over C = (0, 1, a, b}, Cl = c2 = . . . = ck(L+2) = 1, g(i,j,h,t,) = 1, if (1 < 3p 5 k -l)(l 
< 3g 2 L)( i = (L + 2)p -g and?= (L+2)p+ 1 +g and sti = stj E {O,l} ), (Y, if (1 < 3p 5 k -l)(i = (L 
+ 2)p and j = (L + 2)p + 1 and st, = stj = a), 0, otherwise. Note that GJJT(VPT, EPT) becomes a planar 
graph in this case (see Fig. 4). We let CY > kL. Then, it is easy to see that there exists a common subsequence 
s of length L if and only if there exists a threading t such that score(t) > (k -l)(L + a). Cl _..... 
:::::: _..... _..... ..:.. ::: :,.: ::: ::: ..:: ::: . . .._. .T.... . . . . . . . . . . . . ..,._. . 
. . . . . . . . . . . . . . Figure 4: GPT(VPT, EPT) appeared in the proof of Thm. 3.4. Shaded part corresponds 
to LCS. 4 An Approximation Algorithm for a Planar Case In this section, we show a constant ratio approximation 
al- gorithm for PROTEIN THREADING in a special case in which an associated graph GPT(VPT, EPT) is planar. 
To develop approximation algorithm, we partition a set of edges EPT into three subsets (see Fig. 5): 
E, (a set of upper edges), El (a set of lower edges), E, (a set of loop edges). First we show that an 
optimal threading can be obtained using a simple dynamic programming algorithm if El = E, = 0 or E,, 
= E, = 0. Next we show an approx-imation algorithm with performance ratio 2 for a case of El = E, = 0. 
Combining those, we obtain an approxima-tion algorithm with performance ratio 4. Although we only describe 
a method to compute scores of approximate threadings, it can be modified for computing such threadings. 
-11.1 -w-w-   -El4 El EC? Figure 5: Partition of EPT into E,, El and E,. In this figure, cores are 
arranged on a horizontal line where each core is denoted by a circle. 4.1 An Algorithm for Upper Edges 
In this subsection, we assume that a.ll edges in G are upper edges (i.e., EI = E, = 0). Obviously, a 
case of E, = E, = 0 can be treated in an analogous way. First, we can see the following property from 
the fact that any two upper edges do not cross. Observation. Assume that (Ci, Cj) E E, holds and ti, 
tj are fized. Then, the values of ti+l, ti+2,. *. , tj-1 do not affect the scores of edges that do not 
contain any of Ci+l, ,Cj-1. From this observation, we can develop a simple dynamic pro gramming algorithm 
as follows (see Fig. 6). We define score w(i, j, 2, Y) by w(i,j, 2, Y) = maxt{~;<h<k<j g(h, k th, tk)), 
where the maximum is taken from all thread&#38;gs t such that ti = z and t, = y (Z < I). For each pair 
(Ci, C,) E E,, we compute w(i, j, z, y) in the following way. For each Ck, (Ci, C,) E E, is denoted by 
parent(&#38;) if i < k < j holds and there exists no (C,,C,) E E, such that i < p < k < g 5 j or i 5 
p < k < g < j. Let (Ci = Cr,,Cr:,,,... , C,, = C, ) be a sequence of cores such that parent(C,,) = (Ci,CJ) 
for all 1 < k < h, and i = 71 < ra < ... < Th = j. Then, w(Tl,Th,trl,t,.h) iS computed by: g(Q,Th,trl,trh), 
if rh = 71 + 1, ~(TI, Th,trl, b-j,) = !J(Tl,Th,trl,trh) otherwise , +Wl(Th, tr,), if z = t,,, otherwise, 
Wl(Ti+l,Y) = ,,:':r {W(Ti,Ti+l,~,Y)+Wl(Ti,2)}. -I It is easy to see that the score of an optimal threading 
is given by maxz,v ~(1, m, z, y). Here we analyze the time complexity of this procedure. First note that 
there are O(m) edges in EPT because GPT is planar (with multiplicity at most 2) and IVp/p~l = m. For 
all (C;,C,) E E, and z, y (r < y), we must com-pute zu(i, j, 2, y). Therefore, the number of w(i, j, 
2, y) s to be computed is O((lE,,I + m) n ) = O(mn ). To compute each w(i, j, x, y), O(h,,,n2) time is 
required, where h,,, is the number such that C, = C,, and C, = C,, . Since hi,, is O(m), the total computatidi 
time isc (Cs,Cj)EEtt 0(mn4j.  --I-- c,c, 3 b-4 5 c6 However, wl(. .) s used to compute w(i, j, x, y) 
can also be used to compute w(i, j, x, y ) for y > y. Using this fact, the time complexity is reduced 
to O(mn3). Lemma 4.1 An optimal threading can be computed in O(mn3) timeifEl=E,=BorE,=E,=B. Ci =Cr, Cr, 
Cr3 Cr, Cr5 Cr6 Cj =Cr, Figure 6: Computation of an optimal threading for upper edges. 4.2 An Approximation 
Algorithm for Loop Edges In this subsection, we assume that all edges in EPT are loop edges (ie., E, 
= El = 0) until Thm. 4.4. Such a case is called a loop case. Note that, in a loop case, the following 
property holds: for any two edges (Ci,C,), (Ci,,C,l) E E,, j 5 j if i 5 i . First we begin with a very 
simple case (see Fig. 7) in which the following condition holds: there exists a num-ber b (1 < b 5 m) 
such that every edge (Ci, Cj) E E, must satisfy i < b < j. For each i, j such that 1 5 i < b and b 5 
j 5 m, let wb(i, j, x, y, z) be the maximum score b-t c l<h<,,bjk<j g(h, k, th, tk)) under the condition 
that th + ch 5 2 2nd tk-2 z. Then wb(i, j, x, y, z) is determined by the following recurrence (#) (see 
Fig. 7): g(l,b,x,y), ifx+cl Izandylz,wb(l,b, 2, Y, z) = -00, otherwise, Wb(i,j, 2, Y, z) = !J(i,j, 
2, Y)+ maxy ~y--cj-l Wb(i,j -1, z, Y , z), if (ci, cl-,) E &#38;, maw+-ci-l Wb(i -1, j, x , y, z), otherwise. 
 { Computing maxZ,Z,y ?&#38;(l, m, x, y, z) where x < z 5 y, we can obtain the maximum score in this 
very simple case. Next we consider a case in which there exists no three edges (Ci, Cj), (Ci,, C,,), 
(Ci,, , Cj~~) in E, such that i', i , j 5 i and i < j (see Fig. 8). In this case, E, can be partitioned 
into disjoint sets (blocks) B1, B2,. . . , Bh where each block Bi corresponds to a very simple case (see 
Fig. 8). This case is called a simple loop case, and we say that E, is simple. Let l(Bk) = min{i I (Ci,C,) 
E &#38;}, m(Bk) = min{j ) (Ci, Cl) E Bk}, and T(Bk) = max{j 1 (Ci, C,) E Bk}. For convenience, we define 
i(Bh+l) = T(B),) and m(&#38;+l) = 7(Bh+l) = m. Lemma 4.2 An optimal threading can be computed in O(mn4) 
time if E, is simple. Proof. Partition E, into BI, Bz, , Bh, For any B, and for any I, y (1 5 3: _< y 
5 n), an optimal score under the condition that &#38;(B,) = x and &#38;(B,) = y can be computed using 
the recurrence (#). Since T(Bi) < I(Bi+l) holds, an Figure 7: Example of a very simple loop case, where 
loop edges are described in upper half plane. In this case, an op-timal threading can be computed using 
dynamic program-ming. optimal score for E, can be computed using a simple dy-namic programming algorithm. 
The total computation time is O(mn ), where details are omitted here. cl . I a------- 2 L----w-.-! Figure 
8: Example of a simple loop case. E., can be parti-tioned into blocks. Next we show that a loop case 
problem can be reduced to two simple loop case problems (see Fig. 9). Lemma 4.3 E, can be partitioned 
in O(m2) time into two disjoint sets El and E2 each of which corresponds to a simple loop case. Proof. 
we use the following simple algorithm: begin El := 0; fori:=ltom-ldo forj:=i+ltomdo if (Ci,CJ) E E, 
and EI U {(Ci, Cj)} is simple then EI := EI U {(Ci,Cj)}; E2 := E, -El end Obviously, El obtained by this 
algorithm is simple. Here, we consider a partition of El into B1 , B2, . . . , Bh. Then, each edge (Ci, 
C,) E E2 satisfies the following condition: there ex&#38;s k su&#38; that m(Bk) 5 i < 7(8k) &#38;d T(Bk) 
5 j < m(Bk,,). Therefore. E2 also becomes simde. Moreover. this algorithm can be implement so that it 
works in O(m2 j time. 0 Combining Lemma 4.2 and Lemma 4.3, we can see that PROTEIN THREADING can be approximated 
within a fac- tor 2 in O(mn4) time if E, = El = 0. Finally, we obtain the following theorem. [2] J. 
U. Bowie, R. Liithy and D. Eisenberg, A method to identify protein sequences that fold into a known three-dimensional 
structures, Science, Vol. 253, pp. 164-170, 1991. I---- El E2 [3] C. Branden and J. Tooze, Introduction 
to Protein Struc-ture, Garland Publishing, 1991. Figure 9: Partition of E, into El and Ez, [4] S. H. 
Bryant and C. E. Lawrence, An empirical energy function for threading protein sequence through the fold-ing 
motif, PROTEINS: Structure, Function, and Ge- Theorem 4.4 PROTEIN THREADING can be approzimated netics, 
Vol. 16, pp. 92-112, 1993. within a factor 4 in O(mn ) time if Gpr(Vp~, EAT) is pla- nar. [5] C. Chothia, 
One thousand families for the molecular Proof. We use the following simple algorithm. First com-biologist, 
Nature, Vol. 357, pp. 543-544, 1992. pute a planar embedding of GPT(V~T, EPT) and a parti- [6] A. Godzik 
and J. Skolnick, Sequence-structure match-tion of EAT into E,, El, El, Ez. Next compute an optimal ing 
in globular proteins: application to supersecondarythreading t, by letting EI = El = Ez = 0. tl,tl, 12 
are com-and tertiary structure determination, Proc. Nationalputed in a similar way. Finally select the 
one (t,,,) having Academy of Science USA, Vol. 89, pp. 12098-12102, the maximum score from t,, TV, ti, 
tz. 1992. It is easy to see that score(tmaz) 1 (1/4)score(&#38;t) holds since [7] W. E. Hart and S. 
Istrail, Fast protein folding in the hydrophobic-hydrophilic model within three-eights score(t+) 5 score(L) 
+ score(t4) + score(tl) + score(&#38;) , of optimal, Proc. 27th ACM Symp. Theory of Comput- ing, pp. 
157-168, 1995. where top* denotes an optimal threading. Therefore, the performance ratio of this simple 
algorithm is at least 4. [8] G. Kortsarz and D. Peleg, On choosing a dense sub- Since a planar embedding 
of GpT(VpT, EPT) can be com- graph, Proc. 34th IEEE Symp. Foundations of Com-puted in 0(lVp~J) = O(m) 
time [12], we can obtain a par-puter Science, pp. 692-701, 1993. tition of G into E,, El, El, E2 in O(m2) 
time. There- [9] R. H. Lathrop, The protein threading problem with fore, the total computation time is 
O(mn ) from Lemma 4.1, sequence amino acid interaction preferences is NP- Lemma 4.2 and m 5 n. cl complete, 
Protein Engineering, Vol. 7, pp. 1059-1068, 1994. Conduding Remarks flO1 R. H. Lathrop and T. F. Smith. 
A branch-and-bound In this paper, we have shown that approximation of the pro L aalgorithm for -optimal 
protein threading with pairwise tein threading problem is hard in a general case but there (contact potential) 
amino acid interactions, Proc. 27th exists a polynomial time approximation algorithm for a spe- Annual 
Hawaii International Conference on System Sci-cial case. However, there is still a big -1-nap between 
the neg-ences, Vol. 5, pp. 365-374, 1994. ative results and the positive result presented in this paper. 
[ll] D. Maier, The complexity of some problems on sub-Thus, we are currently working for shortening the 
gap. Such sequences and supersequences, J. ACM, Vol. 25, pp. studies may lead to practical algorithms 
for protein thread- 322-336, 1978. inn. -Although we have not discussed details about score func- [la] 
T. Nishizeki and N. Chiba, Planar Graphs: Theory and tions, using a good score function is also important 
in pro- Algorithms, Elsevier Science, 1988. tein threading [lo]. However, most of known score functions 
were not satisfactory from the viewpoint of predictive accu-[13] C. H. Papadimitriou and M. Yannakakis, 
Optimiza-racy if they were applied to the threading problem. Thus, we tion, approximation, and complexity 
classes, J. Com-are currently studying a method for deriving a good score puter and System Sciences, 
Vol. 43, pp. 425-440, 1991. function from known three-dimensional protein structures [14] H. Tashimo 
and T. Akutsu, Learning score function for [14]. Details about the method and the experimental re- protein 
threading using linear programming, Technical sults will be reported elsewhere. Report (in Japanese), 
MPS-8-4, Information Processing Society of Japan, 1996. Acknowledgment This work was partially supported 
by the Grant-in-Aid for Scientific Research on Priority Areas, Genome Science , of the Ministry of Education, 
Science, Sports and Culture in Japan. [1] S. Arora, C. Lund, R. Motwani, M. Sudan and M. Szegedy, Proof 
verification and hardness of approxima-tion algorithms, Proc. 99rd IEEE Symp. Foundations of Computer 
Science, pp. 14-23, 1992.  
			