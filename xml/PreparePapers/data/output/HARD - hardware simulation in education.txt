
 HARD - Hardware Simulation in Education Ivan Tomek Acadia University Wolfville, Nova Scotia Canada Abstract. 
Introduction to digital circuits and computer organization is usually a required course in com-puter 
science curricula. The subject is often taught as a textbook course although experience shows that students 
enormously benefit from simple laboratory experiments and enjoy them. Another form of contact with basic 
physical realities is via computer simulation of hardware. The use of simulation can n~only replace experiments 
if nec-essary but also and insight into aspects of the function of hardware not easily observable in 
the lab, such as the effect of delays and noise and allow the study of phenomena that cannot be observed 
such as data transfer bet~;een registers hidden inside a component. Exposure to simulation also introduces 
students to one major application of computers -simulation -which is often some-what neglected in computer 
science curricula. More-over, simulation is becoming an essential compon-ent of design and student's 
perspective of the de- sign process is incomplete without some experience with it. Three main reasons 
why hardware simula- tion is not usually used in introductory hardware courses are the orientation of 
typical hardware simulation languages towards the professional de-signer and the resulting structure 
poorly suited for education, the scarcity of easily available, inexpensive, and portable languages, and 
the lack of coverage of the subject in most textbooks on hardware. A hardware simulation language called 
HARD devel- oped at Acadia University is an attempt to remedy the above mentioned problems. It is designed 
specifically for education. It includes features typically required in a computer organization course, 
namely simulation at the gate and RTL levels, and simulation of delays and noise. The syntax is quite 
flexible in that there are prac- tically no reserved words. Th] ~a~guage is not Permission to copy without 
fee all or part of this material is granted provided that the copies are not made or distributed for 
direct commercial advantage, the ACM copyright notice and the title of the publication and its date 
appear, and notice is given that copying is by permission of the Association for Computing Machinery. 
To copy otherwise, or to republish, requires a fee and/or specific permission. &#38;#169; 1u81 ACM 0-89791-036-2/81/0200/0268 
$00.75 based on any programming language so that no pre- vious experience with computers is necessary. 
The structure of circuit descriptions is natural and English-like. The translator and simulator are interactive. 
The language allo~:s modular descrip- tions and their connections into multi-level hier-archies as required 
by the problem. The system is very portable since it is written in Pascal with a minimal use of non-standard 
features. The language is not as complete as a professional design tool since its intended use is in 
education. It is, however, expected that new features will be added to it in the future in response to 
the feedback from the system's users. Introduction. Computer simulation of hardware has become a stan- 
dard tool of sophisticated digital design. This is o~vious from the existence of a number of hard- ware 
simulation languages (I). Somewhat surpris- ingly the subject has not penetrated into compu- ter :science 
curricula as much as one would expect. Apart from the fact that simulation is standard in industrial 
design, hardware simulation has some specific benefi~ for education: it can provide a very realistic 
insight into the function of digi- tal systems to a degree not attainable in labora- tory experiments. 
As an example a simple CPU can easily be simulated at the RTL level and the data transfers can be observed 
even between registers which are normally hidden insiGe the chip. Exper- mentation can be performed at 
the "microscopic" timing level of the machine cycle. At the circuit level one can study effects of delays 
and noise, phenomena not easily demonstrated in an introduc- tory course for computer scientists. It 
can also be used for preliminary testing of designs of lab experiments in a way similar to how it is 
used in industrial design. It can even replace a lab completely if necessary. It provides a very good 
example of the power of computers in one area of computer applications which is increasingly impor- tant 
in the "real world" but somewhat neglected in computer science curricula -computer sim, lation. It can, 
if properly implemented, also introduce non-programmers to computers. There are probably two or three 
main reasons for the relative absence of hardware simulation in CS education. 268 I. The scarcity of 
simulators designed speci- fically for those with no programming and little engineering background. As 
a result most existing simulators are viewed as tools which are rather complex to use and not worth the 
effort of learning them. 2. Most of the simulators are quite expensive or not easily portable or both. 
 3. Hardware simulation has not penetrated into introductory hardware textbooks (with the exception of 
(2), (3) and its introduction into a course would thus represent an addit-  ional effort not supported 
by the available text. The system developed at Acadia and outlined below is an attempt to provide a hardware 
simulation tool which does not suffer from the first two problems. It is used in the teaching of several 
hardware courses and covered at an introductory level in the textbook used in the course (3). HARD. Every 
computer-based educational tool should have at least the following properties: I. It should be as natural 
to use as possible. Ideally communication with it should imi-tate natural language communication. 2. 
It should be as interactive as possible. Amonq other aspects response to users' errors Should be immediate 
and helpful. 3. It should be portable to allow wide dissem- ination. It should be written in a stan- 
dard modern language available on most com-puters, including microcomputers. 4. From the pedagogical 
point of view the tool should encourage the user to use preferred methodologies, such as modular design 
in programming and engineering design, etc.  Before showing how HARD measures up to the above criteria 
we shall summarize its major character- istics: I. Simulation is possible at the gate and RTL level. 
2. The set of built-in components and func- tions is logically sufficient to build any digital circuit. 
At the same time the set is limited in size and therefore easy to master. 3. Systems can be built from 
independent de- scriptions of modules, and a combination of RTL and gate level descriptions referred 
to within a larger description is possible. 4. Delays and noise in gate level components and connections 
can be simulated.  HARD will now be outlined and ev~Idated on the basis of the criteria listed above. 
I. Natural use. Let us restrict our attention to gate level descriptions (called "circuit" descriptions 
in HARD). mTL descriptions follow the same style. Each circuit de-scription consists of a sequence of 
major blocks some of which are not compulsory: A description begins with a heading giving the type of 
description (CIRCUIT or RTL) and the name of the module. The name is important for the connection of 
independently de- scribed modules. The heading is followed by the listing of parts, optionally fol- lowed 
by the specification of noise and delay parameters, and a description of con-nections. Two examples follow: 
....... I .... I ,-ooo" Example a -Figure I: Full adder. The HARD description of the circuit is: CIRCUIT: 
ADDER PARTS: INPUT: CIN, A, B OUTPUT: SUM, COUT AND: AI(2),A2(2),A3(2) [each gate has two inputs~ OR: 
OR(3) Ikeywords are not reserved[ XOR: XORI(2),XOR2(2) END. CONNECT: CIN TO: XORI,A2,A3 A TO: XORI,AI,A2 
B TO: XOR2,AI,A3 XORI TO: XOR2 etc. END. s,, L / Ac,; =o I L~cl~ I s,J M cL~ i _l__l Example b. A two-bit 
adder built from full adders as in Example a and Figure 2: CIRCUIT: ADDER 2 PARTS: ADDER: AI,A2 ~Modules 
of type ADDER called Al and A21 INPUT: A(m),B(2) OUTPUT: SUM(2),COUT END. CONNECT:~'TO: AI.CIN !Al's 
input CIHL Ai.COUT TO: A2.Clrl etc. END. 269 The description is quite natural and self- explanatory, 
and students with no previous experience with programming and therefore unaccustomed to formal specifications 
have no difficulty writing such descriptions after a twenty minute exposition. 2. Interactivity. Simulators 
are generally quite interactive at the simulator level but not at the compilation level at which the 
description file is created and trans- lated into an internal description file for use by the simulator 
proper. HARD attempts to introduce interactivity into the first phase as well. This is not too difficult 
because of the rather simple syntax of the language. HARD descriptions are generated in direct interaction 
with the compiler. The com- piler is basically a combination of a prim- itive editor with a translator. 
The editor prompts the user, forces him to maintain correct syntax, immediately catches errors and allows 
the user to make instant correc- tions. As a consequence, upon completion of a description the translation 
is complete as well and there is no after-creation compil- ation and debugging. As an example, after 
the user enters the heading the compiler ptints PARTS: and so reminds the user of the correct syn-tax. 
The user now enters part specifica- tions and makes corrections when the trans-lator points out syntax 
errors. Upon com- pletion of this segment the user enters END. and the editor-translator responds with 
DELAY: If no delay is required in the given de- scription the user types END. and the system deletes 
the DELAY part from the final source description that it gener- ates, etc. Every line is immediately 
parsed and trans- lation is only stored if no errors are found. Discovery of errors leads to a prompt 
to update the information by retyp- ing the line, or adding a missing compo- nent to the declaration, 
etc. 3. Portability is achieved by the use of Pascal. Non-standard features are used only where standard 
definition fails, such as in inter-active I/0. Their o ccur'~c~ce is properly documented. 4. There is 
probably only one basic principle of "correct" design and this is modularlty. HARD does not force the 
u3er to design lar-ger systems from modules but allows him to do this. It does not restrict the consti- 
tuent descriptions to be all of the same type and modules described at the gate level can be mixed with 
modules described at the RTL level. Conclusion. The language is beginning to be used at Acadia in several 
hardware courses in conjunction with the author's text (3) which introduces simulation as an important 
component of hardware theory and practice. Classroom experience with the passive use of the language 
(testing of the syntax and the ease of its use) has been excellent. Exper-ience with the active use of 
the simulator is very limited so far since the system was implemented only recently, is currently under 
major revision, and its use has been only experimental. A micro- computer implementation is under development. 
References. I. Sajjan G. Shive, Computer hardware description language -A tutorial, Proceedings of IEEE, 
December 1979. 2. Frederick J. Hill, Gerald R. Peterson, Digital systems: Hardware organization and design, 
Wiley 1973 and second edition. 3. Ivan Tomek, Introduction to computer organi- zation, Computer Science 
Press, 1981. 4. W. M. van Cleemput, Computer-Aided Design Tools for Digital Systems, IEEE, 1979. 5. 
M. A. Breuer (editor), Design automation of digital systems, Prentice-Hall, 1972. 6. M. A. Breuer (editor), 
Digital system design automation, Computer Science Press, 1975. 7. Yaohan Chu, Computer Organization 
and Micro- programming, Prentice-Hall, 1972.  270  
			