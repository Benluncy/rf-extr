
 Full Integration of Subtyping and If-expression * Gang Chen Computer Science Department Boston University 
Boston MA 02215 USA  Email: gangchen@types.bu.edu ABSTRACT The combination of full subsumption and conditional 
ex­pression is a challenging problem, because in such a system, a term might not have a type which is 
a representative of all types of the term. Therefore, the traditional type checking technique fails. 
Due to such a di.culty, Java typing rule for if-expression uses only a restricted form of subtyping. 
In this paper, we propose a type system which includes both of the above mentioned features and enjoys 
decidable type check­ing. We also show that the system has the subject reduction property. It is expected 
that this technique could be used to improve the type system of Java with full subsumption.  Categories 
and Subject Descriptors D.3 [Software]: Programming Languages  General Terms Languages  Keywords subtyping, 
if-expression, type checking, Java 1. INTRODUCTION Subtyping is one of the essential features in object 
oriented programming languages. A subtyping relation is normally de.ned on a set of base types and extended 
to structural types by subtyping rules. Sometimes, as in Java, the set of base types does not form a 
lattice, that is, not any pair of base types has a join and a meet. In such a case, the type system will 
lose the minimal typing property when both subtyping and if-expressions are present. In other words, 
a term might have more than one type such that none of them is a subtype of another. To put it in another 
way, one can say that such a term does not have a type which * Partially supported by the NSF Grant No. 
CCR-9988529 Permission to make digital or hard copies of all or part of this work for personal or classroom 
use is granted without fee provided that copies are not made or distributed for pro.t or commercial advantage 
and that copies bear this notice and the full citation on the .rst page. To copy otherwise, to republish, 
to post on servers or to redistribute to lists, requires prior speci.c permission and/or a fee. is a 
representative of all types of this term. For the type checking algorithms known to the author, they 
all work by deriving representative types of terms, therefore, they can not be used to solve the problem 
in this situation. To perform a formal study of this problem, we use a min­imal calculus containing subtyping 
and if-expressions. It is formed by adding if-expressions to .=,the simply typed .­calculus with subtyping 
(see [Cas97]). We refer to this calcu­lus as .if The main contribution of our work is a complete = . 
and terminating type checking algorithm. Our algorithm uses only a few type annotations for a function 
s arguments and results, which are available in Java, C, Pascal and other imperative languages. No additional 
type annotation will be needed. Therefore, this technique could be used in Java to improve the subtyping 
without altering its syntax. In the remainder of this section, we will explain the dif­.culty of type 
checking with subtyping and if-expressions, and then outline our approach. We also discuss a related 
subject reduction problem, which appeared in the TYPES mailing list in June 1998 and gave the impetus 
to start this research. Problem In a programming language with subtyping, a non-restricted typing rule 
for if-expressions could be: b : Bool e1 : A = Ce2 : B = C (1) b?e1:e2 : C where the expression b?e1:e2 
will return e1 if b is true, or e2 otherwise. Type checking algorithms are normally based on the in­ference 
of a minimal (or principal) type of a term. For the if-expression b?e1:e2, such an algorithm would proceed 
as follows: .rst, it .nds out the minimal upper bounds, say A and B,for e1 and e2 respectively; then, 
it derives the unique least common upper bound, say D, of A and B; .nally, it veri.es that D is a subtype 
of C. In fact, such an algorithm wasproposedin[BCM+93]. A requirement of this method is that every pair 
of types which has a common upper bound should have a common least upper bound (and also because of covariance, 
a similar statement with lower bounds). Un­der such a condition, each term has a unique minimal type. 
But there are cases where some types do not have a least common super type, and, as a consequence, (b?e1:e2)might 
not have a unique minimal type. In those cases, no com­plete type checking algorithm has yet been reported 
in the literature. PPDP 02, October 6-8, 2002, Pittsburgh, Pennsylvania, USA. Copyright 2002 ACM 1-58113-528-9/02/0010 
...$5.00. If-expression and Subject Reduction InJava, the if­ expression b?e1:e2 allows only a restricted 
use of subtyping. Its typing rule can be written as: b : Bool e1 : Ae2 : B (A = B) . (B = A) JavaIf (b?e1:e2): 
max(A, B) (2) where max(A, B)equals to A if A = B or to B other­wise. Furthermore, the evaluation of 
a well-formed expres­sion (containing a if-expression) might lead to a result which can not be typed 
by the typing rules stated in Java reference book. This later problem was pointed out in the message 
Subject reduction fails for Java , posted by Haruo Hosoya, Benjamin Pierce and David Turner [HPT98] in 
TYPES mail­ing list in June 1998. This message provoked an active dis­cussion among participants in the 
mailing list and it moti­vated this work. The problem discussed in [HPT98] can be reformulated in terms 
of typed .-calculus. Assume a context G containing the subtyping declarations A = C, B = C, then, we 
can derive the judgment: G,a : A, c : B . (.x:C..y:C.(b?x:y))ac : C where the following typing rule has 
been used in the typing derivation, .x:A.M : A . CN : B = C (3) (.x:A.M)N : C After ß-reduction, we get 
(b?a:c), which is not typable by rule (2). This strange behavior has attracted interest among re­searchers. 
Here is a brief summary of some proposals1: The .rst proposal (by Sophia Drossopoulou, Donald Syme et 
al.) is based on the observation that the term (b?a:c)in the above example can be typed by more powerful 
typing rule like (1). This means that such a run-time code is still ty­pable. Therefore they propose 
to use two sets of typing rules: the weak one is for the source programs and it is amenable for type 
checking, the strong one is used to ensure that the run-time codes are always typable. This method alters 
nei­ther the de.nition nor the implementation of Java. But the acceptable if-expressions are still limited 
by the weak typing rules. The second approach (by H. Hosoya et al.) is to change the ß-reduction rule 
so that the type information can be kept in the reduction. But it is not clear if this approach is practical 
in real implementations or not. Nevertheless, it is possible to add type annotations to the if-expression 
in the form b?(a:A):(c:A)2, which ensures that the whole expres­sion is of type A. This approach can 
type more terms than the .rst approach, but it will change the syntax of Java and requires programmers 
to write additional type annotations. The third suggestion (by Tony Dekker et al.) is to extend Java 
so that each pair of base types (classes in Java) has a least upper bound and a greatest lower bound. 
Should it be possible this would be the best method. But the current version of Java does not have this 
property. Whether this feature could be implemented in the future or not is an open problem. 1 For more 
details the reader can refer to the discussion on this subject in the TYPES mailing list during June 
and July of 1998. 2This is pointed out by a referee of this paper. Our approach Recall that type A is 
a subtype of B if any term of type A canbe used inevery context where a term of type B is expected. On 
the other hand, an expression b?e1:e2 has type C if b has type Bool and both e1 and e2 have thesametype 
C. These statements can be formulated as typing rules: G . M : A G . A = B Subsumption G . M : B b : 
Bool e1 : Ce2 : C If (b?e1:e2): C The rule (1) can be derived by using the two rules above. Obviously, 
these rules are more powerful than (2) and the system will enjoy subject reduction. The hard problem 
is to .nd a type checking algorithm. The rule If itself appears amenable to type checking: to check (b?e1:e2): 
C, just check b : Bool, e1 : C and e2 : C. The di.culty is the subsumption rule, which does not have 
the subformula property: type A in the assumption does not appear in the conclusion. One approach to 
get around this problem is to avoid using the subsumption rule directly, and instead, combine it with 
other rules. For example, the rule (3) combines application and subtyping. Similarly, we might use (1) 
instead of If. But this modi.cation still does not solve the problem of type checking because minimal 
type does not always exist for an if-expression. In order to avoid the inference of minimal types, we 
use complete bottom-up type checking. The main idea is to en­sure that each rule has a full subformula 
property, which is to say that, each term and type in the assumption appears in the conclusion. An example 
of such a rule is the abstraction rule in lambda calculus. A counter-example is the applica­tion rule 
(Both rules appear among the weak typing rules in next section). To achieve our aim, the application 
rule is replaced by the rule ApL: G,x : B . MN2..Nn : A G . N1 : Bx . Fv(Ni) ApLG . (.x:B.M)N1..Nn : 
A The motivation of this rule comes from the observation of a typing equivalence in simply typed .-calculus: 
G . (.x:B.M)N1..Nn : A . G . (.x:B.MN2..Nn)N1 : A where G . N1 : B . x .Fv(N2, .., Nn). Other rules should 
be modi.ed accordingly. The new set of rules is called strong type system and is presented in Section 
4. This approach does not need the assumption that the set of base types forms a lattice. Furthermore, 
we will not change the syntax of Java. Type annotations are needed, but only for the arguments and results 
of functions that are available in most popular imperative languages such as Java, C and Pascal. The 
only thing remains to do is the improve­ment of the type checking algorithm and the modi.cation of the 
typing rule. The later modi.cation will not only simplify the typing rule but also make it more powerful. 
Besides, the subject reduction is valid in the proposed calculus. Organization of the Paper The next 
section presents the syntax of the calculus and the weak typing rules, which is a direct extension of 
simply typed .-calculus with subtyping and if-expression. In Section 3 , we give the algorithms for subtyping 
checking. Section 4 is the main part of this paper, where we present the strong type system, which types 
more terms than weak system and at the same time is a type checking algorithm. The strong typing rules 
are still intuitively acceptable. Besides, it enjoys good properties, including subject reduction(Section 
5). All terms typable in the weak system are still typable in strong system. In other words, the strong 
system is complete with respect to the weak system. This result is stated at the end of Section 4 and 
is proved in Section 6. In the last section we summarize the contribution of this paper, discuss related 
works and future works. 2. THE .if -CALCULUS = The abstract syntax for terms and types is: M ::= true 
| false | x | MM | .x:A.M | (M?M:M) A ::= B| A .A where B denotes a base type. There is a type Bool in 
the set of base types. One step reduction relation .ßif is the compatible closure of (.x:A.M)N (true?M:N) 
(false?M:N) .ß .if .if M[x := N] M N The ßif-reduction relation is the re.exive and transitive clo­sure 
of .ßif .The ßif -conversion relation is the re.exive, symmetric and transitive closure of .ßif .Two 
terms M, N are ßif -convertible if the pair (M, N) belongs to the ßif ­conversion relation. Let G be 
a context containing prede.ned typing and sub­typing declarations. G= {B1 =C1, ...Bk =Ck; x1 : A1, ..., 
xn : An} where x1, ..xn are distinct variables. A1, .., An are types, C1, ..Ck,B1, .., Bk are base types. 
Note that G is a set, not a sequence. We use the notation G,x : A to denote the context G .{x : A}. The 
set of variables in a type A is denoted by dom(A). The domain of G, denoted by dom(G), is the set {B1, 
··· ,Bk,x1, ··· ,xn}. In the following, we use M, N, .. to denote terms, x, x1, ... to denote term variables, 
A, B, C, .. to denote types. . de­notes the empty subtyping context. We assume that the subtyping relation 
de.ned in the con­text forms a preorder. The subtyping rules are fairly stan­dard: Subtyping rules: A 
=B .G Prim G A =B G C =A G B =D .= G A.B =C.D G A =B G B =C Trans G A =C Refl G A =A The typing rules 
are formed by adding to .= the weak typ­ing rules for if-expressions and for the constants true, false. 
Weak Typing System (WTS) True G W true : Bool False G W false : Bool x : A .G Var G W x : A G W b : Bool 
G W e1 : C G W e2 : C If G W (b?e1:e2): C G,x : B W M : A Lam G W .x:B.M : B.A G W M : B.A G W N : B 
AppG W MN : A G W M : A G A =B Subsumption G W M : B The combination of subtyping and if-expression 
brings with it some unusual features. For example, without the if-expression, the system enjoys the following 
property: M : A . M : B . M : C . C =A . C =B which does not hold in the presence of if-expressions. 
Con­sider the term (b2?a1:a2)in the Example 4.2 (Section 4). Ithas two types A, B, but there is no common 
lower bound, G,of A, B such that (b2?a1:a2): G. We put typing and subtyping declarations in one context 
to avoid an additional subtyping environment. The typing declaration in a context G is actually irrelevant 
to subtyping. Therefore, G,x : A B =C . G B =C  3. SUBTYPING CHECKING The subtyping checking algorithm 
can be formed by the standard technique. See for example the work of Curien and Ghelli for F=[CG92]. 
In fact, we can construct the following algorithmic subtyping system. A =B .GG B =C Prim G A =C G C =A 
G B =D SApp G A.B =C.D Ais a base type ReflB G A =A Note that this system does not contain the transitivity 
rule. Both the transitivity (Trans) rule and the general re.exivity (Re.) rule are admissible. Such a 
technique of achieving the transitivity elimination can be traced to the early work of Curien and Ghelli 
in their study of F=[CG92]. Using the standard transitivity elimination technique, it is easy to show 
that this algorithmic subtyping system is equivalent to the original subtyping system. Lemma 3.1 (Decidability 
of Subtyping). 1. The algorithmic subtyping system is equivalent to the orig­inal subtyping system; 2. 
The algorithm de.ned by the algorithmic subtyping sys­tem terminates; 3. Subtyping checking is decidable. 
 The proofs of these results are easy and omitted. Since the algorithmic subtyping and original subtyping 
are equivalent, we will always use the notation G . A = B for a subtyping judgment.  4. STRONG TYPING 
AND TYPE CHECK-ING Now we study the type checking problem. Recall that the type checking problem is that 
Given G, M, A,Check G . M : A . The traditional type checking method is to derive the minimal type of 
M. Thus the information of the type A is not used. In contrast, we check M : A, but not ensure to derive 
the minimal type for M. Strong Typing System (STS) True G true : Bool False G false : Bool x : B1.···.Bn.A. 
.GG A. =A G Ni : Bi ApVG xN1..Nn : A G,x : B MN2..Nn : A G N1 : Bx .Fv(Ni) ApLG (.x:B.M)N1..Nn : A G,x 
: B M : A G B. =B ALam G .x:B.M : B. .A G b : Bool G e1N1..Nn : A G e2N1..Nn : A ApIf G (b?e1:e2)N1..Nn 
: A This set of rules can be divided into three groups. The .rst two rules (True, False) are typing rules 
for the two con­stants. The rule ALam is for . abstraction. The remaining rules, ApV, ApL and ApIf, are 
for functional applications. In these three rules the terms in the conclusions are of the form : MN1..Nn,where 
M can be a variable (ApV ), a . abstraction (ApL) and a if-expression (ApIf), respectively. The meanings 
of the rules True and False are clear. The rule ApV states that if x is an n argument primitive function 
of type B1.··· . Bn.A. , A. is a subtype of A,each Ni has type Bi, then the application of x to N1,.. 
, Nn will have type A. In the special case where n = 0 this rule becomes: G x : A. G A. =A G x : A In 
other words, it becomes a subsumption rule for variables. A careful reader may notice that this rule 
does not say that the type of each argument Ni could be a subtype of Bi. One may wonder if this type 
system can accept all of the terms that the previous one does. The answer to this question is Yes. Each 
typing rule in the STS is syntax oriented, so this set of rules can be straightforwardly turned into 
a type checking algorithm, which is terminating. The subtyping checking in this algorithm will use the 
algorithmic subtyping rules de.ned in the previous section. Theorem 4.1 (Termination). The type checking 
al­gorithm de.ned by the strong type system terminates. Proof. First, the subtyping checking is decidable. 
Sec­ond, the size of each term in a typing judgment in the as­sumption of each rule is smaller than that 
of the term in the conclusion.  Thus we have the decidability of type checking. On the other hand, the 
worst case complexity of the algorithm is exponential: due to the rule ApIf, the number of typing judgments 
appearing in the typing derivation tree is expo­nential to the number of embedded conditional expressions. 
This system is complete with respect to the weak type system: G W M : A . G M : A The proof of this 
assertion is presented in Section 6. On the other hand, the STS is not sound with respect to the WTS. 
This is mainly due to the ApIf rule. The following is an example. Example 4.2 (A non-typable if-expression). 
Assume aset of base types A, B, C, D, E and a set of prede.ned sub­typing relation: C =A, D =A, C =B, 
D =B Note that C, D have two common upper bounds A, B,but not any least common upper bound. Assume b1,b2 
: Bool, e1 : A.E, e2 : B.E, a1 : C, a2 : D. Then the following typing is derivable in the weak type system: 
(b1?(e1(b2?a1:a2)) : (e1(b2?a1:a2))) : E The following term is ßif -convertible to the above term, but 
it is typable only in the STS, not in the WTS: (b1?e1:e2)(b2?a1:a2) Observe that (b2?a1:a2) has two 
types: A and B, (b1?e1:e2) has two types C.E and D.E, which are the only common upper bounds of A.E and 
B.E. Neither A nor B is a subtype of C or D. This example shows that this set of rules is more powerful 
than the set of WTS. That is, STS can type more terms than WTS does. This is justi.ed since each rule 
in STS has intuitively reasonable interpretation. For example, the rule ApL says that if, under the environment 
x : B, M is a function applicable to N2, .., Nn and the application has the type A,then .x:B.M should 
be applicable to N1, .., Nn where N1 is of type B. On the other hand, we show that this system has good 
properties, including admissibilities of subsumption and application and subject reduction (see Section 
5). Therefore, we recommend using STS in practice. 5. SUBJECT REDUCTION Before proving the main results, 
we present a set of struc­tural lemmas. Because their proofs are standard, so they are omitted. At the 
end of this section, we show the subject reduction and a key lemma. Lemma 5.1 (Narrowing). G,x : A . 
M : B . G . A. =A . G,x : A. M : B Lemma 5.2 (Weakening). G . M : B . x . G . G,x : A M : B Lemma 5.3 
(Generation of subtyping). G . A . B =C .D . G C =A . G B =D Lemma 5.4 (Generation of typing). G x : 
A . x : B .G . G B =A G .x:B.M : A . A =C .D . G C =B . G,x : B M : D G MN : A .M =(b?e1:e2)N1..Nn 
 . .B. s.t. G M : B .A . G N : B G (b?e1:e2)N1..Nn : A . G e1N1..Nn : A . G e2N1..Nn : A . G b : Bool 
 where n =0. Note that the condition M . is necessary = (b?e1:e2)N1..Nn in the third property. The assertion 
 G MN : A ..B. s.t. G M : B .A . G N : B is not valid in general. A counterexample is the term (b1?e1:e2)(b2?a1:a2) 
in the example from the previous sec­tion. Lemma 5.5 (Unicity of type arity). 1. G C =A1 .···.An . C 
=B1 .···.Bn 2. G A1 . ···.An = C . C =B1 .···.Bn 3. G M : A1 .···.An .A . G M : B1 .···.Bm .A . n = 
m  Proof. 1., 2. Induction on the structure of C; 3. induc­tion on the structure of M. Lemma 5.6. G 
(.x:B.M)N1..Nn : A . G (.x:B.MN2..Nn)N1 : A . G N1 : B Proof. The assertion is proved by using the generation 
of typing lemma and the typing rules. (.). G (.x:B.M)N1..Nn : A . G (.x:B.M)N1..Nn-1 : Bn.A . G Nn : 
Bn . x .Fv(Nn) ··· ···  . G .x:B.M : B1.···.Bn.A . G Ni : Bi . x .Fv(Ni) i =1..n . G,x : B M : B2.···.Bn.A 
. G B1 =B . G Ni : Bi i =1..n . G,x : B MN2..Nn : A . G B1 =B . G N1 : B1 . G (.x:B.MN2..Nn): B.A . 
G N1 : B . G (.x:B.MN2..Nn)N1 : A  Due to the if-expression (b?e1:e2), the reverse of this lemma is 
not always valid. Consider the judgment G (.x:B.(b?e1:e2)N2)N1 : A and assume x . Fv(N2). The derivability 
of this judg­ment implies that G,x : B . eiN2 : A for i =1, 2. But this does not mean that the if-expression 
b?e1:e2 itself is typable. Therefore, we do not know if the judgment G . (.x:B.(b?e1:e2))N1N2 : A is 
derivable or not. Lemma 5.7 (Unique derivation). In STS, a typable term has exactly one derivation. Proof. 
Just notice that the last rule in the derivation of a term is uniquely determined. Lemma 5.8 (Admissibility 
of Var and Lam). The rule Var and the rule Lam in WTSare admissibleinSTS. Proof. Observe that the rule 
Var in WTS is a special case of the rule ApV in STS (with n = 0); and that the rule Lam in WTS is a special 
case of the rule ApL in STS (with n =1). Now, we prove that both the subsumption rule and the application 
rule are admissible in the STS. The proofs are standard induction on a main term M in the statement. 
Since each term has a unique typing derivation by the STS, the case analysis in this proof is closely 
related to the strong typing derivation. Lemma 5.9 (Admissibility of subsumption). G M : A . G A =B . 
G M : B Proof. Induction on the size of M. M can be written in the form of PN1..Nn where P is not an 
application. The proof proceeds by analyzing the form of P . We treat only the case where M = .y:B.M. 
. G .y:B.M. : A1 .B1 . G,y : B. M. : B1 . G A1 =B. ALam G A1 .B1 =A2 .B2 . G A2 =A1 . G B1 =B2 . G,y 
: B. M. : B2 . G A2 =B. IH . G .y:B.M. : A2 .B2 ApL  Lemma 5.10 (Admissibility of application). G M 
: A .B . G N : A . G MN : B Proof. Induction on the size of M. M can be written in the form of PN1..Nn 
where P is not an application. The proof proceeds by analyzing the form of P . We treat only the case 
where M = .y:B.M. . G .y:B.M. : A .B . G N : A assumption . G,y : B. M. : B . G A =B. ALam . G N : B. 
Lemma 5.9 . G (.y:B.M)N : B ApL  Lemma 5.11 (Substitution). G,x : B M : A . G N : B . G M[x := N]: 
A Proof. Induction on the size of M. M can be written in the form of PN1..Nn where P is not an application. 
The proof proceeds by analyzing the form of P . We treat only the case where M = xN1..Nn. G,x : B xN1..Nn 
: A assumption . B =B1 . ···Bn .A. . G A. =A . G,x : B Ni : Bi where i =1..n ApV  . G Ni[x := N]: Bi 
i =1..n IH . G NN1[x := N]..Nn[x := N]: A Lemma 5.10 . G M[x := N]: A  The main result of this section 
is the subject reduction, which states that the type of a well-formed term will be preserved in the reduction. 
Theorem 5.12 (Subject reduction). G M : A . M .ßif M. . G M. : A Proof. Induction on the derivation of 
G . M : A.We treat the case where the last rule used in the derivation is ApL: G,x : B MN2..Nn : A G 
N1 : Bx .Fv(Ni) ApLG (.x:B.M)N1..Nn : A There are three cases. Case N1 .ß N1. . By induction hypothesis, 
G N1 . : B,the result follows. M. N. M, then by induction hypothesis, G,x : B MN2..Nn : A, N. Case M 
.ß or Ni .ßi i =2..n. Assume M .ß the result follows. The cases for Ni .ßi i =2..n are similar. Case 
(.x:B.M)N1..Nn .ß M[x := N1]N2..Nn.Since x .Fv(N2, .., Nn), we have G,x : B MN2..Nn : A . G N1 : B . 
G M[x := N1]N2..Nn : A Lemma 5.11  6. COMPLETENESS OF STRONG TYPING In this section, we prove that 
terms typable in the WTS are all typable in the STS. First, we show that the use of sub­sumption in the 
WTS can be kept to minimum. This tech­nique of subsumption elimination is adapted from [Cas97]. This 
is one of the essential steps for the proof of complete­ness. More precisely, we show that the subsumption 
rule (along with Var and Lam rule) can be replaced by the rules Var+and ALam in the following intermediate 
type sys­tem. Var+ combines subsumption with the typing of the term variable, ALam can be viewed as the 
subsumption rule for .-abstraction. Intermediate Typing System (ITS) True G I true : Bool False G I false 
: Bool x : A .GG A =B Var+ G I x : B G,x : B I M : A G C =B ALam G I .x:B.M : C.A G I M : B.A G I N 
: BM =(b?e1:e2)N1..Nn App G I MN : A G I b : Bool G I e1N1..Nn : A G I e2N1..Nn : A ApIf G I (b?e1:e2)N1..Nn 
: A Lemma 6.1 (Elimination of subsumption). The WTS is equivalent to the ITS. Proof. First note that 
the new rules Var+and ALam are admissible in the WTS. So we need only to show that each typing judgment 
derivable in the WTS can be derived in the ITS. The proof proceeds by induction on the typing derivation 
G W M : A. Analyze according to the form of M. The result follows from the following transformations 
on typing derivation. We use the notation G W M : A =B as a shorthand for the conjunction G W M : A and 
G W A =B. Similarly, we use the notation G I M : A =B. G W M : A.B G W N : A G W MN : B =C G W MN : C 
 . G I M : A.B =A.C G I M : A.C G I N : A G I MN : C G,x : A W M : B G W .x:A.M : A.B =C.D G W .x:A.M 
: C.D . G,x : A I M : B =D G,x : A I M : D G C =A G I .x:A.M : C.D G W b : Bool G W e1 : D G W e2 : 
D G W (b?e1:e2): D =C G W (b?e1:e2): C . G I e1 : D =C G I e2 : D =C G I b : Bool G I e1 : C G I e2 : 
C G I (b?e1:e2): C  Theorem 6.2 (Completeness of strong typing). Any judgment derivable in the ITS 
is derivable in the STS. There­fore, any judgment derivable in the WTS is derivable in the STS. Proof. 
Induction on the size of the term in the ITS typ­ing judgment. We need only to consider the case where 
the last step is derived by the rules Var+or App.The Var+ rule is the special case of the ApV rule by 
setting n =0. For the App rule, assume the last step of the typing derivation is: G I M : B.A G I N : 
BM =(b?e1:e2)N1..Nn AppG I MN : A M can have only two possible forms: xN1..Nn and (.x:C.P )N1..Nn. Case 
M =xN1..Nn. Assume x : C .G, G I xN1..Nn : B .A . G I x : B1 .···.Bn .B .A . G I Ni : Bi i =1..n  x 
: C .G . G C =B1 .···.Bn .B .A . C =B1 . . ···. Bn . .B. .A. . G A. =A . G B =B. . G Bi =Bi . i =1..n 
 . G I Ni : Bi . i =1..n . G Ni : Bi i =1..n IH  G I N : B . G I N : B. . G N : B. IH . G xN1..NnN 
: A ApV  Case M =(.x:C.P )N1..Nn. G I (.x:C.P )N1..Nn : B .A . G I N : B . G I (.x:C.P ): B1 .···.Bn 
.B .A . G I Ni : Bi i =1..n  . G,x : C I P : B2 .···.Bn .B .A . G B1 =C  . G,x : C I PN2..NnN : A . 
G I N1 : C . G,x : C PN2..NnN : A . G N1 : C IH . G (.x:C.P )N1..NnN : A ApL   7. CONCLUDING REMARKS 
Summary In this paper, an extension of simply typed .­calculus with both if-expression and subtyping 
is presented. The challenging aspect of this research is that the calculus does not have the minimal 
typing property, because we do not assume that the base types form a lattice. We propose a weak type 
system (WTS) and a strong type system (STS). Both systems are more general than the typ­ing rules used 
in Java for type checking if-expression. The WTS is close to the traditional presentation of type sys­tem, 
and is intuitively understandable. The STS types more terms than the WTS and it is an algorithmic typing 
system. The type checking for the STS is decidable. The STS is shown to be complete with respect to the 
WTS. We have proved that the STS enjoys subject reduction. This work would be particularly useful for 
a full implemen­tation of subtyping in imperative object oriented languages. From the methodological 
point of view, our type checking algorithm does not belong to the traditional type checking technique 
which is based on the derivation of representative types (principal types, minimal types etc.). Therefore 
this method might be adapted to other situations where tradi­tional type checking technique fails. Related 
Works In[BCM+93], Kim Bruce et al. proposed a type checking algorithm for a calculus with subtyping and 
if-expression. But they have assumed that the set of base types forms a lattice, so that terms in their 
calculus have minimal types. Our work does not need this assumption. Various works exist on the subject 
of polymorphic subtyp­ing. Among these is the Henglein s [Hen96]. In his system, it is possible to introduce 
a constant if with type scheme .a.(Bool . a . a . a). Henglein has proposed a sound and complete type 
checking algorithm which, given a typing environment G and a term e, derives a principal typing judg­ment 
of the form C, G e : t ,where C is a set of additional subtyping assumptions (called constraints). The 
typability of e depends on whether the set of constraints C is solvable or not. In our approach, we check 
G e : t directly without the need of the constraints C. Future Works This work represents one step toward 
re­solving the problem of combining subtyping and if-expression. More work remains to be done. One direction 
is to extend this technique to allow the full use of subsumption in Java. Another is to extend this technique 
to add if-expression to F=[CG92], which is a second order .-calculus with bounded quanti.cation and is 
taken as a formal model for object­oriented language. Acknowledgment This study is inspired by the message 
subject reduction fails in Java posted by Haruo Hosoya, Benjamin Pierce and David Turner in types mailing 
list. Later discussions around this message by Kim Bruce, Hosoya et al and others on the types mailing 
list have clari.ed the problem. The author would like to thank John Maraist, Martin Odersky, Hongwei 
Xi and Christophe Zenger for helpful discussions. Thanks go to anonymous referees for their remarks. 
Iam grateful to Paul Johnson at Berlitz for his help with my English. 8. REFERENCES Kim B. Bruce, Jon 
Crabtree, Thomas P. Murtagh, Robert van Gent, Allyn Dimock, and Robert Muller. Safe and decidable type-checking 
in an object-oriented language. In OOPSLA 93, 1993. G. Chen. Subtyping and if-expression. Technical Report, 
School of Computer and Information Science. University of South Australia, 1999. G. Castagna. Object-Oriented 
Programming: A Uni.ed Foundation. Progress in Theoretical Computer Science. Birk¨auser, Boston, 1997. 
ISBN 3-7643-3905-5. P. L. Curien and G. Ghelli. Coherence of subsumption, minimum typing and the type 
checking in F=. Mathematical Structures in Computer Science, 2(1):55 91, 1992. J. Gosling, B. Joy, and 
G. Steele. The Java Language Speci.cation. Addison Wesley, 1996. F. Henglein. Syntactic properties of 
polymorphic subtyping. TOPPS Technical Report (D-report series) D-293, DIKU, University of Copenhagen, 
Universitetsparken 1, DK-2100 Copenhagen, Denmark, May 1996. H. Hosoya, B. Pierce, and D. Turner. subject 
reduction fails in java, June 1998. Message on Types electronic mailing list.  
			