
 Automatic Reconstruction of Surfaces and Scalar Fields from 3D Scans12 Chandrajit L. Bajaj3 Fausto Bernardini34 
Guoliang Xu5 Department of Computer Sciences Purdue University ABSTRACT We present an ef.cient and uniform 
approach for the automatic reconstruction of surfaces of CAD (computer aided design) models and scalar 
.elds de.ned on them, from an unorganized collection of scanned point data. A possible application is 
the rapid computer model reconstruction of an existing part or prototype from a three dimensional (3D) 
points scan of its surface. Color, texture or some scalar material property of the physical part, de.ne 
natural scalar .elds over the surface of the CAD model. Our reconstruction algorithm does not impose 
any convexity or differentiability restrictions on the surface of the original physical part or the scalar 
.eld function, except that it assumes that there is a suf.cient sampling of the input point data to unambiguously 
recon­struct the CAD model. Compared to earlier methods our algorithm has the advantages of simplicity, 
ef.ciency and uniformity (both CAD model and scalar .eld reconstruction). The simplicity and ef­.ciency 
of our approach is based on several novel uses of appropri­ate sub-structures (alpha shapes) of a three-dimensional 
Delaunay Triangulation, its dual the three-dimensional Voronoi diagram, and dual uses of trivariate Bernstein-B´ezier 
forms. The boundary of the CAD model is modeled using implicit cubic Bernstein-B´ezier patches, while 
the scalar .eld is reconstructed with functional cubic Bernstein-B´ezier patches. CR Categories and Subject 
Descriptors: I.3.5 [Computer Graph­ics]: ComputationalGeometryandObjectModeling;J.6[Computer-Aided Engineering]: 
Computer-Aided Design. Additional keywords: Geometric modeling, shape recovery, range data analysis, 
algebraic surfaces, triangulations, alpha-shapes. 1Thisworkhasbeensupportedin partbyNSFgrantCCR92-22467,AFOSRgrant 
F49620-94-1-0080, ONR grant N00014-94-1-0370 and ARO grant DAAH04-95-1­0008. 2See also http://www.cs.purdue.edu/research/shastra/shastra.html 
 3Department of Computer Sciences, Purdue University, West Lafayette, IN 47907­ 1398 USA. Email: fbajaj,fxbg@cs.purdue.edu 
4Additional partial support from CNR, Italy 5Computing Center, Academia Sinica, P. O. Box 2719, Beijing, 
100080, P. R. China. Email: xuguo@cs.purdue.edu Permission to make digital/hard copy of part or all of 
this work for personal or classroom use is granted without fee provided that copies are not made or distributed 
for profit or commercial advantage, the copyright notice, the title of the publication and its date appear, 
and notice is given that copying is by permission of ACM, Inc. To copy otherwise, to republish, to post 
on servers, or to redistribute to lists, requires prior specific permission and/or a fee.  INTRODUCTION 
In this paper we present an approach for the reconstruction of a surface, and scalar .elds de.ned over 
it, from scattered data points. The points are assumed sampled from the surface of a 3D object, and the 
sampling is assumed to be dense and uniform (these terms will be given a more precise meaning later in 
the paper). Laser range scanners are able to produce a dense sampling, usually organized in a rectangular 
grid, of an object surface. Some models also allow to measure the RGB components of the color (i.e. three 
scalar .elds) at each sampled point. When the object has a simple shape, this grid of points can be a 
suf.cient representation. However, objects with a more complex geometry, e.g. objects with holes, handles, 
pockets, cannot be scanned in a single pass, and the various scans are not easy to merge [42]. Other 
applications, for example recovering the shape of a bone from contour data extracted from a CT scan, 
require reconstruction of a surface from data points organized in slices. The approach of considering 
the input points as unorganized has the advantage of generating cross-derivatives by a uniform treatment 
of all spatial directions. The reconstruction problem we are considering may be formally stated as follows: 
Letan unorganizedcollection ofpoints P=f(xi,yi,zi)g R3 and associated values W=fwigR1, i=1n,be given. 
The points Pare assumed sampled from a domain D in R3 (the boundary of a three-dimensional object) while 
the values Ware assumed sampled from some scalar function F on the domain D. Construct a C1 smooth piecewise 
polynomial surface SD: fD(x,y,z)=0and a C1 smooth piecewise polynomial function (surface-on-surface) 
SF: fF(x,y,z)on some do­main that contains Psuch that, for i=1n: (a) jfD(xi,yi,zi)jED (b) jfF(xi,yi,zi) 
wijEF  where EDand EFare user-de.ned approximation parameters. The user can also choose the degree of 
the Bernstein-B´ezier polynomial patches used in the approximation. Additionally, generate different 
visualizations of the domain surface SDand the surface-on-surface SF . In this paper we reconstruct the 
C1 smooth domain SDusing a piecewise algebraic surface (the zero contour of a C1 trivariate piecewise 
polynomial function). The surface is constituted by &#38;#169;1995 ACM-0-89791-701-4/95/008 $3.50 barycentric 
implicit Bernstein-B´ezier patches, which are guaran­teed to be single-sheeted within each tetrahedron. 
We have also developed a method similar to the one described here, but based on tensor-product Bernstein-B´ezier 
patches [5]. Some researchers have focused on reconstructing a piecewise­linear representation of the 
unknown surface D[38, 25, 13, 30, 43]. These papers provide a very nice survey of both the varied nature 
of applications and past approaches. Related prior work [2, 6, 7, 15, 16, 27, 28, 35, 33] of .tting with 
smooth implicit surface patches, minimally all require an input surface triangulation of the data points. 
The surface .tting paper of [32] is similar to ours in that it only assumes a suf.ciently dense set of 
input data points but differs from our approach in the adaptive nature of re.nement, in time ef.ciency 
and in the degree of the implicit surface patches used. The authors propose either a C0 reconstruction 
algorithm based on an adaptive tetrahedral decomposition, or a scheme that uses tri-quadratic (degree 
six) tensor product implicit surface patches with a Powell-Sabin type split to achieve C1 continuity. 
Our scheme effectively utilizes the incremental Delaunay tri­angulation for a more adaptive .t; the dual 
Voronoi diagram for ef.cient point location in signed distance computations and degree three implicit 
surface patches. Furthermore, in the same time it also computes a C1 smooth approximation SFof the sampled 
scalar function. A different, three-step solution is described in papers [30, 31, 29]. In the .rst phase, 
a triangular mesh that approximates the data points is created. In a second phase, the mesh is optimized 
with respect to the number of triangles and the distance from the data points. A third step constructs 
a smooth surface from the mesh. If the surface SDis given, the problem of constructing the scalar function 
SFis known as surface interpolation on a surface, and arises in several application areas, e.g. in modeling 
and visualizing the rain fall on the earth, the pressure on the wing of an airplane or the temperature 
on the surface of a human body. Note that the trivariate scalar function SFis a two dimensional surface 
in R4 since its domain is the two dimensional surface SD(and not all of R3). The problem is relatively 
recent and was posed as an open question by Barnhill [9]. A number of methods have been developed since 
then for its solution (for surveys see [10, 26, 37, 34]). Most of the proposed approaches interpolate 
scattered data over planar or spherical domain surfaces. In [12] and [35], the domain surface is generalized 
to a convex surface and a topological genus zero surface, respectively. Pottmann [39] presents a method 
which does not possess similar restrictions on the domain surface but requires it to be at least C2 differentiable. 
In [11] the C2 restriction is dropped, however the interpolation surface is constructed by trans.nite 
interpolation using non-polynomials. A similar non­polynomial trans.nite interpolant construction is 
used in [36], while the interpolation scheme in [41] requires at least C4 continuity. Another approach, 
based on interpolation with cubic (for C1)or quintic (for C2) polynomials, is described in [8]. 1 OVERVIEW 
OF THE ALGORITHM Our algorithm consists of the following three phases: 1. Preprocessing: Preprocess the 
data points so that a signed­distance function is de.ned and ef.ciently computable. I.e., given a query 
point q, the function must return the approxi­mate distance of the point from the domain surface SD, 
with a positive sign if qlies outside the object, and a negative sign otherwise. We use a-shapes [21] 
to compute a piecewise linear approximation of the domain SD, from which the ap­proximated signed distance 
is computed. Details on this part are given in Section 2. 2. Approximation: Incrementally decompose the 
space into tetrahedra. For each tetrahedron Tthat contains a portion of the domain D, compute Bernstein-B´ezier 
trivariate im­plicit approximants fDand fFfor both the domain Dand ;; the .eld F, based on data points 
and on the signed-distance function described above. Then compute the errors of the approximants for 
the given data points, and repeat the pro­cess, re.ning at each step the decomposition, until the errors 
meet the speci.ed requirements. The use of a global signed­distance function in the computation of the 
coef.cients of each patch guarantees C0 continuity of the reconstructed sur­faces. We use an incremental 
3D Delaunay triangulation scheme together with a suitable point-insertion scheme to avoid badly-shaped 
tetrahedra in the spatial decomposition. This part of the algorithm is further detailed in Section 3. 
3. Smoothing: Use a Clough-Tocher 12-way split to make the reconstructed surfaces C1-smooth. See Section 
4 for details. Our domain surface SDand surface-on-surface SFreconstruc­tion scheme does not impose any 
convexity or differentiability re­strictions on the original domain surface Dor function F, except that 
it assumes that there is a suf.cient sampling of the input point data to unambiguously reconstruct the 
domain surface D. While it is dif.cult to precisely bound the required sampling density, we ad­dress 
this issue in Section 2.4 and characterize the required sampling density in terms of an a-shape (subgraph 
of a Delaunay triangu­lation of the points) which matches the topology of the original (unknown) sampled 
surface D. Compared to the above methods our algorithm thus has the following advantages: 1. It uni.es 
the reconstruction of the domain surface Dand the scalar function Fde.ned on the domain surface; 2. 
It is adaptive and approximates large dense data sets with a relatively small number of C1 smooth patches. 
 Outline of the paper: The rest of our paper is as follows. In Sections 2, 3 and 4 we present a detailed 
description of Phases 1, 2 and 3 of the reconstruction algorithm as outlined above. In Section 5 we illustrate 
all the phases of the algorithm with the aid of a simple 2D example. In Section 6 we show some examples 
of reconstructed surfaces and surface-on-surfaces, and discuss possible directions of future investigation. 
More details on the algorithm and additional examples can be found in [4].  2 PHASE 1: PREPROCESSING 
AND THE SIGNED-DISTANCE FUNCTION As we mentioned in Section 1, our algorithm relies on the computa­tion 
of the signed-distance 8(q)of a query point qfrom the domain surface D. The absolute value of 8(q)is 
de.ned as the Euclidean minimal distance of the point qfrom the domain surface D, while its sign is arbitrarily 
de.ned to be positive when qlies outside the object whose boundary is D, and negative otherwise. In our 
implementation of the algorithm, we use a-shapes to compute a piecewise linear approximation LDof the 
domain D, and make use of the associated data-structures (3D Delaunay tri­angulation and Voronoi diagram) 
to ef.ciently locate qw.r.t. the object and compute the associated signed-distance. An alternative method 
for computing an approximated signed-distance function, based on propagation of normals, is described 
in [30]. Before describing the actual signed-distance computation, we brie.y review some concepts and 
results from Computational Ge­ometry used in the algorithm. The style of this presentation is informal. 
The reader can refer to the papers in the references for more details.  (a) (b) (c) (d) Figure 1: A 
set of points in 3D (a), and three different a-shapes. 2.1 Delaunay Triangulations Given a set Pof points 
in R3 one can build a tetrahedralization of the convex hull of P, that is, a partition of conv(P)into 
tetrahedra, in such a way that the circumscribing sphere of each tetrahedron Tdoes not contain any other 
point of Pthan the vertices of T. Such a tetrahedralization is called a (3D) Delaunay triangulation and, 
under non degeneracy assumptions (no three points on a line, etc.) it is unique. Many different techniques 
have been proposed for the computation of Delaunay triangulations (see [19, 40, 18]). For our purposes, 
an incremental approach is particularly well­suited, as it can be used in both the preprocessing phase 
and the incremental re.ning of the adaptive, approximating triangulation (see Section 3). The algorithm 
we use is the randomized, incremental, .ipping­based algorithm proposed in [22], with heed paid to robustness 
issues due to .nite precision calculations [18]. At the beginning the triangulation is initialized as 
a single tetrahedron, with vertices at in.nity , that contains all points ofP. At each step a point from 
P is inserted as a new vertex in the triangulation, the tetrahedron in which plies is split and the Delaunay 
property is re-established by .ipping tetrahedra. This algorithm uses a data structure, called the history 
DAG, that maintains the collection of discarded tetrahedra. The DAG is used to locate the tetrahedron 
in which the point to be inserted lies. When a tetrahedron is split or groups of tetrahedra are .ipped, 
they become internal nodes of the DAG while the newly created tetrahedra become their children in the 
DAG. To locate a point, one starts at the root of the DAG (the single tetrahedron of the initial triangulation) 
and follows links down to a leaf. It is possible to build the Delaunay triangulation of a set of n ddl2e 
points in Rdin O(nlog n+n)expected time. The second term in this expression is of the same order as the 
maximum number of possible simplices. In practice, the running time of the algorithm (for d= 2, 3) is 
much better than this theoretic bound (the actual running time depends on the distribution of points). 
 2.2 Voronoi Diagrams Voronoi diagrams are well known tools in computational geometry (see [3] for a 
survey). They provide an ef.cient solution to the Post Of.ce Problem, that is an answer to the query: 
what is the closest point p2Pto a given point q? Voronoi diagrams are related to Delaunay triangulations 
by duality. It is easy to build a Voronoi diagram once one has the corresponding triangulation, and vice-versa. 
A Voronoi diagram is a partition of the space into convex cells. There is a cell for each point of p2P,and 
the cell of a point pis the set of points that are closer to pthan to any other point of P. So, all one 
has to do to answer the closest­point query is to locate the cell the query point lies in. Ef.cient point-location 
data structures can be built on top of the Voronoi diagram. Using the randomized approach described in 
[14], one builds the point-location data-structure (called an RPO-tree,for Randomized Post Of.ce tree) 
on top of the Voronoi diagram in 2+e O(n)expected time, for any .xed E0, and is then able to answer the 
closest-point query in O(log n)expected time. The data 2+e structure requires O(n)space in the worst 
case. We use the RPO-tree data structure for our point location and signed-distance computations. 2.3 
a-Shapes Given the Delaunay triangulation Tof a point set P, regarded as a simplicial complex, one can 
assign to each simplex (2T(vertices, edges, triangles and tetrahedra) a size de.ned in the following 
way. Let T0be the smallest sphere whose boundary contains all vertices of (. Then the size of (will be 
de.ned to be equal to the square of the radius of T0,and (will be said to be con.ict-free if T0does not 
contain any point of P other than the vertices of (. The subcomplex Saof simplices (2Twith either one 
of the following properties: (a) The size of (is less than aand (is con.ict-free (b) (is a face of Tand 
T2Sa,  is called the a-shape of P. a-Shapes have been introduced in the plane in [20] and then extended 
to the three-dimensional space in [21]. One can intuitively think of an a-shape as the subcomplex of 
T obtained in the following way: imagine that a ball-shaped eraser, p whose radius is a, is moved in 
the space, assuming all possible positions such that no point of Plies in the eraser. The eraser removes 
all simplices it can pass through, but not those whose size is smaller than a. The remaining simplices 
(together with all their faces) form the a-shape for that value of the parameter a.Two extreme cases 
are the 0-shape, which reduces to the collection of points P,and the 1-shape, that coincides with the 
convex-hull of P. Notice that there exists only a .nite number of different a-shapes. The collection 
of all possible a-shapes of Pis called the family of a-shapes of P(see Figure 1), and can be computed 
in time proportional to the number of simplices in T.We use the a-shape computation for our generating 
an initial piecewise linear approximation LDof the domain surface D(see Section 2.4).  2.4 Signed-Distance 
Computation Obviously the domain surface Dis unknown, so we need to build some suitable approximation 
of it to classify points as either internal or external to the object being reconstructed, and to compute 
a distance from it. In the preprocessing phase the Delaunay triangulation of the set of input points 
Pis computed, and then the Voronoi diagram and the family of a-shapes of Pare constructed. During the 
process, the history DAG and the RPO-tree data structures are built to allow a fast location of the tetrahedron 
and Voronoi cell a query point q lies in. Note that all these data structures are intimately related. 
Tetrahedra in the Delaunay triangulation are classi.ed as either internal or external (and assigned a 
corresponding sign) based on a particular a-shape chosen as a good linear approximationLD to the surface 
to be reconstructed. The computation of the signed­distance is then reduced to locating the query point 
qin both the Delaunay triangulation, to decide its sign s=±1, and in the Voronoidiagram,to .ndtheclosestpoint 
p2P. The approximated signed-distance sjpqjis then returned. A dif.culty in the process outlined above 
is the choice of a suitable value for a. We assume that the input data is dense enough so that there 
exists an asuch that the a-shape approximates the object with the same topology as the original unknown 
surface D. In our current scheme a suitable ais selected interactively. The boundary of the selected 
a-shape must possess the following properties: (a) It does not contain any singular (i.e. isolated) 
vertex;  (b) There are no missing edges, i.e. there can be missing triangles in the boundary, but if 
two adjacent triangles are missing, their common edge must be in the a-shape.  These properties make 
a slightly weaker condition than requiring that there exist an a-shape that correctly approximates the 
object and that has a complete boundary. In our experience it is sometime dif.cult to .nd an avalue such 
that these stronger conditions are satis.ed, even for reasonably dense samplings. When an a-shape with 
the above properties is determined, it is easy to distinguish between internal and external tetrahedra 
in the underlying triangulation T. One does a breadth .rst search on the dual graph of T, starting with 
a tetrahedron that is known to be external (e.g. one that has a vertex at in.nity) and continuing with 
adjacent tetrahedra. These tetrahedra are marked as external (positive sign) and put in a queue for further 
processing. When one hits a tetrahedron Tbelonging to Sa, Tis marked as internal and not enqueued. The 
same happens when, visiting an adjacent tetrahedron Tof a positive tetrahedron (, one .nds that the common 
face (or all three edges of the common face) belongs to Sa.This means that going from (to Tone crosses 
the boundary, so Tis marked as internal (negative sign) and not enqueued. When the data points are not 
very dense or uniform, the error caused by using the approximated distance computation described above 
can be too large. In these cases, it is possible to improve the error by returning the distance of the 
query point from LD, instead of P.  3 PHASE 2: INCREMENTAL REFINEMENT AND APPROXIMATION In Phase 2 
of the algorithm a 3D Delaunay triangulation Tis ini­tialized and incrementally re.ned, and C0-continuous 
piecewise­polynomial functions (approximants) fDand fFare generated. For each tetrahedron T2Tthat contains 
a portion of Dwe compute two Bernstein-B´ezier trivariate polynomials f;Dand f;F,to approximate the part 
of domain surface and scalar .eld contained in T, respectively. The coef.cients of the polynomials are 
com­puted using data points within Tand the signed-distance function described in Section 2.4. After 
computing the two polynomials, the errors of the approx­imants are estimated and, if one or both the 
errors are too large, the current triangulation Tis re.ned, until the errors are within the given bounds. 
The triangulation re.nement is done by adding at each step a new point to split the tetrahedron with 
the maximum error, and using the incremental Delaunay triangulation algorithm to update the triangulation. 
Before describing in further details the computation of the ap­proximating functions, we recall some 
facts and terminology related to Bernstein-B´ezier trivariate forms. 3.1 Bernstein-B´ezier (BB) Form 
Let p1,p2,p3,p4 2R3 be af.ne independent. Then the tetrahe­dron Twith vertices p1,p2,p3,and p4,is T=[p1p2p3p4].For 
4 X any p=aipi2T, a=(a1,a2,a3,a4)Tis the barycentric i=1 coordinate of p.Let p=(x,y,z)T , pi=(xi,yi,zi)T 
. Then the barycentric coordinates relate to the Cartesian coordinates via the following relation 2 3 
2 3 2 3 x x1 x2 x3 x4 a 1 6 4 y z 7 5 = 6 4 y1 z1 y2 z2 y3 z3 y4 z4 7 5 6 4 aa 2 3 7 5 (1) 1 1 1 1 1 
a 4 Any polynomial f(p)of degree ncan be expressed as a Bernstein­B´ezier (BB) form over Tas X f(p) 
= bhBhn (a), 2Z+ 4 jhj= n where n n!hhhh 1 234 Bh(a)= aaaa 1 234 P 1! 2! 3! 4! 4 is a Bernstein polynomial,j 
j= iwith =( 1,2,3,4)T i=1 a=(a1,a2,a3,a4)Tis the barycentric coordinate of p, bh= bh1 h2 h3 h4 (as a 
subscript, we simply write 1 2 3 4 for ( 1,2,3, 4 are called B´ezier ordinates, and Z+ stands for the 
set of all four dimensional vectors with nonnegative integer components. The points 1 2 3 4 ph=p1 +p2 
+p3 +p4,j j=n nnnn are called the regular points of T. The points (ph,bh)2R4 are called B´ezier points 
and their piecewise linear interpolation B´ezier net. The following lemma gives necessary and suf.cient 
conditions for continuity. P Lemma 3.1 ([24]). Let f(p)= aBhn(a)and g(p)= jhj= nh P bhB hn(a)be two polynomials 
de.ned on two tetrahedra jhj= n [p1p2p3p4]and [p10 p2p3p4], respectively. Then (i) fand gare C0 continuous 
at the common face [p2p3p4]if and only if ah=bh,for all =0 2 3 4,j j=n(2) , T 4)) p 1 p Positive 
1 Negative  Layer 3 p Layer 3 p 4 4  p 3 p 3 Figure 2: The layers of B´ezier ordinates in a 
tetrahedron. (left) Three-sided patch. (right) Four-sided patch. p p 1 1  p  4 p p 3 3 Figure 3: 
The splitting of a tetrahedron (right) into four sub­tetrahedra (left). Only one of the resulting sub-tetrahedra 
is shown. (ii) fand gare C1 continuous at the common face [p2p3p4]if and only if (2) holds and, for all 
=023 4, jj=n1, bh+e1 = 1ah+e1 + 2ah+e2 + 3ah+e3 + 4ah+e4 (3) where =( 1,2,3,4)Tis de.ned by the following 
rela­tion p 0 1 = 1p1 + 2p2 + 3p3 + 4p4,j j=1 The relation (3) will be called coplanar condition. The 
following Lemmas give suf.cient conditions for a patch to be single-sheeted (see [6] for proofs and further 
details). Lemma 3.2 Let T=[p1p2p3p4]. The regular points of Tcan be thought of as organized in triangular 
layers, that we can number from 0 to ngoing from p1 to the opposite face [p2p3p4](see Fig­ure 2). If 
the B´ezier ordinates are all positive (negative) on layers 0,,k1 and all negative (positive) on layers 
k+1,,n (0 kn), then the patch is single-sheeted (i.e., any line through p1 and p2[p2p3p4]intersects the 
patch only once). Lemma 3.3 Let T=[p1p2p3p4]. The regular points of Tcan be thought of as organized in 
quadrilateral layers, that we can number from 0 to ngoing from edge [p1p2]to the opposite edge [p3p4] 
(seeFigure2). IftheB´ezierordinatesareallpositive(negative)on layers 0,,k1 and all negative (positive) 
on layers k+1,,n (0 kn), then the patch is single-sheeted (i.e., any line through p2[p1p2]and q2[p3p4]intersects 
the patch only once). In the Lemmas above, the B´ezier ordinates on layer kcan have any sign. Patches 
satisfying the conditions of Lemma 3.2 will be called three-sided; those satisfying the conditions of 
Lemma 3.3 will be called four-sided.  3.2 Outline of Phase 2 of the Algorithm We are now ready to present 
in details the steps required to compute the approximant functions fDand fF . 1. Build an initial bounding 
tetrahedron T, such that PT.Set T=fTgand V= vertices of T.Mark Tas new. 2. For each new tetrahedron 
T2T, compute the signed­distance at all its regular points ph. If the values of 8(ph), j8j=n, do not 
satisfy either Lemma 3.2 or Lemma 3.3, then set 1D; =; =1. Otherwise, compute local approximants  1F 
X D Dn f;(p)= bhBh(a) (4) jhj=n X F Fn f;(p)= bhBh(a) (5) jhj=n for the domain surface Dand scalar .eld 
Fas follows: For the domain approximant, the coef.cients bDare com­ h puted by .rst interpolating the 
computed values of the signed­distance function: D f;(ph)=8(ph),jj=n (6) The tetrahedron Tis then split 
into four sub-tetrahedra T1 T4 (see Figure 3) by joining the baricenter of Twith its four ver­tices (Tkis 
the sub-tetrahedron opposite to vertex pk). The regular points on the faces of the sub-tetrahedra coincide 
with those of the original tetrahedron T. For these points we use the coef.cients computed from (6). 
Notice that on the shared face of two adjacent tetrahedra these coef.cients will coin­cide, as fD, restricted 
to that face, interpolates the signed distance at a number of points equal to the number of its co­ef.cients. 
All interior coef.cients of the sub-tetrahedra are computed by solving the least squares problem fD(pi)=0,pi2PnTk,k=14 
;kf;D(ph)=8(ph),jj=n,60,k=14 k= k (7) where we use the values of the signed-distance at regular points 
(of each sub-tetrahedron Tk) in addition to the data points contained in T. The signed-distance data 
helps in avoiding multiple sheets in the approximating patch. For the scalar .eld approximant we compute 
a least squares approximation of the .eld values at data points within T: f;D (pi)=wi,pi2PnT (8) Notice 
that the .eld approximant is not globally continuous. Continuity will be achieved by averaging and interpolating 
values of the approximant at the vertices Vof Tin a subse­quent phase, described in Section 4. 3. If 
the coef.cients computed in the step above do not satisfy the conditions of either Lemma 3.2 or Lemma 
3.3, set 1D; = 1F; =1. Otherwise, compute the approximation error for both functions: q P 4 P k=1 pi2Pn; 
f;D(pi)2 1D; = Card(PnT) qP (fF(pi)wi)2 ; pi2Pn; F 1 = ; Card(PnT) DF (if TnP=.,then set 1; =0and 1; 
=0), and keep track of the following two quantities: 1D =max f1D g 0 0 ;;2T and FF 1000 =max f1g ; ;2T 
4. If both 1D ED000 EFthen the algorithm stops 00and 1F the incremental re.nement phase and begins the 
smoothing phase. Otherwise, either (0or (00is selected for further re­.nement(accordingtoauser-de.nablestrategy. 
E.g.: choose always (0.rst, assigning priority to the surface, as variations of the scalar .eld Fgenerally 
correspond to variations of the surface). The circumcenter qof the selected tetrahedron is computed and 
added to the set Vof vertices of the tri­angulation, qis inserted in Tand Tis updated with splits and 
.ippings to accommodate the new vertex and restore the Delaunay property (adding the center of the circumscribing 
sphereof (is utilizing the empty sphere property of Delaunay triangulations and in general yields good 
aspect ratio tetrahe­dra in the .nal triangulation [17]). At the same time the subset PnTof points that 
lie within each modi.ed tetrahedron T is updated. This is done by considering the points originally within 
the modi.ed simplex, and reclassifying them with re­spect to the splitting/.ipping planes. Then mark 
all split/.ipped tetrahedra as old and all newly created ones as new and go back to step 2.  4 PHASE 
3: ACHIEVING C1 CONTINUITY VIA A 3D CLOUGH-TOCHER SCHEME The functions fD(p)and fF(p)computed in phase 
2 of the algo­rithm are not C1 continuous. To achieve C1 continuity, we apply a subdivision scheme to 
the tetrahedra of T, and compute C1-smooth Bernstein-B´ezier patches on the re.ned triangulation. We 
base our trivariate scheme on the n-dimensional Clough-Tocher scheme given by Worsey and Farin [44, 23]. 
In this scheme, one computes for each vertex in the original triangulation an average of the values of 
the functions fDand fFand their gradients, for all patches that share that vertex (the surface approximant 
is already C0, so only the gradient needs to be averaged). In addition, the average gradient at the middle 
point of each edge is computed. Each tetrahedron is then split into twelve sub-tetrahedra by inserting 
the incenter of each tetrahedron and a point on each face (the point on the face shared by two adjacent 
tetrahedra must be collinear with their incenters [44]), and joining these points with the original vertices. 
A cubic trivariate polynomial is built on each sub-tetrahedron. The coef.cients of the twelve resulting 
patches are computed based on the value of the function at each vertex, the average gradient at vertices 
and mid-edge points, and the continuity constraint. The resulting patches are C1 continuous and interpolate 
the averaged values and gradient of the functions. Another trivariate Clough-Tocher scheme (see [1]) 
splits each tetrahedron into four sub-tetrahedra. However the interpolants in each sub-tetrahedra are 
now of quintic degree and furthermore re­quire C2 data at the vertices of the main tetrahedron. Since 
our data at the vertices of the tetrahedral mesh comes from the averaging of locally computed low degree 
interpolants, the higher order deriva­tives tend to be un-reliable in general. We therefore prefer to 
use the lower degree cubic scheme that uses only .rst order derivatives at the vertices. An alternative 
approach to build a C1 interpolant with cubic patches has been presented in [8], and its application 
to our method is described in [4]. 5 A SIMPLE 2D EXAMPLE We present in this section an example of the 
three phases of the algorithm. For presentation purposes, the steps are illustrated with the aid of a 
2D example. The method is in fact perfectly suited for being applied in 2D reconstruction, and we chose 
to describe it only for the 3D case to keep the notation simple and because the most interesting applications 
arise from the study of .elds on the surface of 3D objects. Restricting ourselves to a bi-dimensional 
example allows us to illustrate the various steps with pictures which we believe are more easily understood. 
The generalization of the techniques involved should be clear from the text. In the following we refer 
to Figures 4(a) (n). Figure (a) shows the sample points P2R2. Figure (b) shows the associated function 
values W. The computed Delaunay triangulation and associated Voronoi diagram are depicted in Figure (c). 
These data structures will be used for fast point location in signed-distance computation. The chosen 
a-shape is shown in Figure (d). Four steps of the approximation phase are illustrated in Figures (e) 
though (i). Notice the adaptive subdivision of the plane. The implicit Bernstein-B´ezier patches are 
shown in red. Empty triangles are light-blue and those containing a patch are grey. These triangles lie 
on the zero plane, so their intersection with the patches form the implicit curve fD =0. Figures (l) 
and (m) show the .nal reconstructed C1 implicit patches, after Clough-Tocher subdivision, for both the 
domain and the scalar .eld. The zero contour of fDis .nally shown in Figure (n). 6 EXAMPLES AND CONCLUSIONS 
Some examples of reconstruction of 3D objects and associated scalar .elds are presented in this Section. 
The data for the human femur in Figure 5, 9223 points, comes from contouring of a CT scan. The algorithm 
does not use the fact that the data is arranged in slices. The reconstructed C1 surface is made by 400 
cubic patches. The reconstruction algorithm took about 10 minutes on a SGI Indigo2. The engine in Figure 
6 has been reconstructed from a data set containing 9800 points. The number of patches generated in the 
approximation phase is 382, with an error equal to 1/100 of the size of the object. Each patch is of 
degree 3, and is therefore de.ned by 20 coef.cients. At the same time, an approximate C1 scalar .eld 
(pressure form a simulated experiment) over the surface has also been computed. Several techniques can 
be used to visualize this surface-on-surface data. In Figure 6(c) we show iso-pressure regions. With 
the normal projection method, each point pon the domain surface SDis projected in the direction normal 
to SD,toa distance proportional to the value fF(p)of the .eld at that point. The projected surface is 
visible in transparency in Figure 6(d), with iso-contours of the pressure projected on it. The data for 
the head of Spock is a subsampling (about 104 points have been used) of scan data obtained with a laser 
3D digitizer. The reconstructed surface is constituted by 1100 cubic patches.  REFERENCES [1] ALFELD, 
P. A trivariate clough-tocher scheme for tetrahedral data. Computer Aided Geometric Design 1 (1984), 
169 181. [2] ALFELD, P. Scattered data interpolation in three or more vari­ables. In Mathematical Methods 
in Computer Aided Geomet­ric Design, T. Lyche and L. Schumaker, Eds. Academic Press, Boston, 1989, pp. 
1 34. [3] AURENHAMMER, F. Power diagrams: properties, algorithms and applications. SIAM J. Comput. 16 
(1987), 78 96.  (a) (b) (c) (d) (e) (f) (g) (h) (i) (l) (m) (n)   Figure 4: An example of reconstruction 
of the boundary of a two-dimensional shape and an associated scalar .eld. (a) (b) (c) Figure 5: (a) 
Data set for the upper part of a human femur. Data from a CT scan. (b) Final decomposition (wireframe). 
(c) Reconstructed object. (a) (b) (c) (d)  Figure 6: A jet engine. (a) C0 reconstructed domain. Patches 
are visible in different colors. (b) Reconstructed domain (after C1 smoothing). (c)Iso-pressurecontoursandregionsofasurface-on-surfacepressurefunctiondisplayedonthesurfaceofthejetengine. 
(d)Thereconstructed engine surface and visualization of the pressure surface function surrounding the 
jet engine using the normal projection method. (a) (b) (c) Figure 7: (a) A set of dense, scattered, 
noisy data points. (b) and (c) C1 smooth reconstructed surface. In (b) patches have been randomly colored. 
[4] BAJAJ,C., BERNARDINI,F., AND XU, G. Reconstruction of [16] DAHMEN,W., AND THAMM-SCHAAR, T.-M. Cubicoids: 
mod­surfacesandsurfaces-on-surfacesfromunorganizedweighted eling and visualization. Computer Aided Geometric 
Design points. Computer Science Technical Report CSD-TR-94-001, 10 (1993), 93 108. Purdue University, 
1994. [17] DEY,T. K., BAJAJ,C. L., AND SUGIHARA, K. On good tri­ [5] BAJAJ,C., BERNARDINI,F., AND XU, 
G. Adaptive reconstruc-angulations in three dimensions. Internat. J. Comput. Geom. tion of surfaces and 
scalar .elds from dense scattered trivariate Appl. 2, 1 (1992), 75 95. data. Computer Science Technical 
Report CSD-TR-95-028, [18] DEY,T.K., SUGIHARA,K., AND BAJAJ, C. L. Delaunay trian-Purdue University, 
1995. gulations in three dimensions with .nite precision arithmetic. [6] BAJAJ,C., CHEN,J., AND XU, 
G. Modeling with cubic A-Comput. Aided Geom. Design 9 (1992), 457 470. patches. ACM Transactions on Graphics 
(1995). To Appear. [19] EDELSBRUNNER,H. Algorithms in Combinatorial Geometry, [7] BAJAJ,C., AND IHM,I. 
C1 smoothing of polyhedra with vol. 10 of EATCS Monographs on Theoretical Computer Sci­implicit algebraic 
splines. Computer Graphics 26,2 (July ence. Springer-Verlag, Heidelberg, West Germany, 1987. 1992), 79 
88. Proceedings of SIGGRAPH 92. [20] EDELSBRUNNER,H., KIRKPATRICK,D., AND SEIDEL,R. On [8] BAJAJ,C., 
AND XU, G. Modeling scattered function data on the shape of a set of points in the plane. IEEE Trans. 
on curved surfaces. In Fundamentals of Computer Graphics, Information Theory 29, 4 (1983), 551 559. Z. 
T. J. Chen, N. Thalmann and D. Thalmann, Eds. Beijing, [21] EDELSBRUNNER,H., AND MUCKE, E. P. Three-dimensional 
China, 1994, pp. 19 29. alpha shapes. ACM Transactions on Graphics 13,1 (Jan. [9] BARNHILL, R. E. Surfaces 
in computer aided geometric de-1994), 43 72. sign: A survey with new results. Computer Aided Geometric 
 [22] EDELSBRUNNER,H., ANDSHAH,N.R.Incrementaltopological Design 2 (1985), 1 17. .ipping works for regular 
triangulations. In Proc. 8th Annu. [10] BARNHILL,R. E., AND FOLEY, T. A. Methods for constructing ACM 
Sympos. Comput. Geom. (1992), pp. 43 52. surfaces on surfaces. In Geometric Modeling: Methods and [23] 
FARIN, G. Triangular Bernstein-B´ezier patches. Computer their Applications, G. Farin, Ed. Springer, 
Berlin, 1991, pp. 1 Aided Geometric Design 3 (1986), 83 127. 15. [24] FARIN,G. Curves and Surfaces for 
Computer Aided Geometric [11] BARNHILL,R. E., OPITZ,K., AND POTTMANN,H. Fat sur- Design: A Practical 
Guide. Academic Press, 1990. faces: a trivariate approach to triangle-based interpolation on surfaces. 
Computer Aided Geometric Design 9 (1992), 365 [25] FAUGERAS,O. D., HEBERT,M., MUSSI,P., AND BOISSONNAT, 
 378. J. D. Polyhedral approximation of 3-D objects without holes. Computer Vision, Graphics and Image 
Processing 25 (1984), [12] BARNHILL,R. E., PIPER,B. R., AND RESCORLA, K. L. Interpo­169 183. lation to 
arbitrary data on a surface. In Geometric Modeling, G. Farin, Ed. SIAM, Philadelphia, 1987, pp. 281 
289. [26] FRANKE, R. Recent advances in the approximation of sur­faces from scattered data. In Multivariate 
Approximation, [13] BOISSONAT, J. D. Geometric structures for three-dimensional C.K.Chui, L.L.Schumarker, 
and F.I.Utreras, Eds. Academic shape representation. ACM Transactions on Graphics 3,4 Press, New York, 
1987, pp. 275 335. (Oct. 1984), 266 286. [27] GUO, B. Surface generation using implicit cubics. In Scienti.c 
[14] CLARKSON, K. L. A randomized algorithm for closest-point Visualizaton of Physical Phenomena, N. 
M. Patrikalakis, Ed. queries. SIAM J. Comput. 17 (1988), 830 847. Springer-Verlag, Tokyo, 1991, pp. 485 
530. [15] DAHMEN, W. Smooth piecewise quadratic surfaces. In Mathe­[28] GUO, B. Non-splitting macro patches 
for implicit cubic spline matical Methods in Computer Aided Geometric Design,T. Ly­ surfaces. Computer 
Graphics Forum 12, 3 (1993), 434 445. che and L. Schumaker, Eds. Academic Press, Boston, 1989, pp. 181 
193. [29] HOPPE,H., DEROSE,T., DUCHAMP,T., HALSTEAD,M., JIN, H., MCDONALD,J., SCHWITZER,J., AND STUELZLE, 
W. Piece­wise smooth surface reconstruction. In Computer Graphics Proceedings (1994), Annual Conference 
Series. Proceedings of SIGGRAPH 94, ACM SIGGRAPH, pp. 295 302. [30] HOPPE,H., DEROSE,T., DUCHAMP,T., 
MCDONALD,J., AND STUELZLE, W. Surface reconstruction from unorganized points. Computer Graphics 26, 2 
(July 1992), 71 78. Pro­ceedings of SIGGRAPH 92. [31] HOPPE,H., DEROSE,T., DUCHAMP,T., MCDONALD,J., AND 
STUELZLE, W. Mesh optimization. In Computer Graphics Proceedings (1993), Annual Conference Series. Proceedings 
of SIGGRAPH 93, ACM SIGGRAPH, pp. 19 26. [32] MOORE,D., AND WARREN, J. Approximation of dense scat­tered 
data using algebraic surfaces. In Proceedings of the 24th annual Hawaii International Conference on System 
Sciences (1991), V. Milutinovic and B. D. Shriver, Eds., vol. 1. [33] NIELSON, G. M. Modeling and visualizing 
volumetric and surface-on-surface data. In Focus on Scienti.c Visualization, H. Hagen, H. Muller, and 
G. M. Nielson, Eds. Springer, 1992, pp. 219 274. [34] NIELSON, G. M. Scattered data modeling. IEEE Computer 
Graphics &#38; Applications 13 (1993), 60 70. [35] NIELSON,G. M., FOLEY,T., LANE,D., FRANKE,R., AND HAGEN, 
H. Interpolation of scattered data on closed surfaces. Computer Aided Geometric Design 7, 4 (1990), 303 
312. [36] NIELSON,G. M., FOLEY,T. A., HAMANN,B., AND LANE,D. Visualizing and modeling scattered multivariate 
data. IEEE Computer Graphics &#38; Applications 11, 3 (May 1991), 47 55. [37] NIELSON,G. M., AND FRANKE, 
R. Scattered data interpola­tion and applications: A tutorial and survey. In Geometric Modeling: Methods 
and Their Applications, H. Hagen and D. Roller, Eds. Springer, 1990, pp. 131 160. [38] O ROURKE, J. Polyhedra 
of minimal area as 3D object models. In Proc. of the International Joint Conference on Arti.cial Intelligence 
(1981), pp. 664 666. [39] POTTMANN, H. Interpolation on surfaces using minimum norm networks. Computer 
Aided Geometric Design 9 (1992), 51 67. [40] PREPARATA,F.P., AND SHAMOS,M. I. Computational Ge­ometry: 
an Introduction. Springer-Verlag, New York, NY, 1985. [41] RESCORLA,K. C1 trivariate polynomial interpolation. 
Com­puter Aided Geometric Design 4 (1987), 237 244. [42] TURK,G., AND LEVOY, M. Zippered polygonal meshes 
from range images. In Computer Graphics Proceedings (1994), Annual Conference Series. Proceedings of 
SIGGRAPH 94, ACM SIGGRAPH, pp. 311 318. [43] VELTKAMP, R. C. 3D computational morphology. Computer Graphics 
Forum 12, 3 (1993), 115 127. [44] WORSEY,A., AND FARIN, G. An n-dimensional clough-tocher interpolant. 
Constructive Approximation 3, 2 (1987), 99 110.  
			