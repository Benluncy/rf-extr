
 Monitoring User Actions in the Hypertext System HyperMan A. Mykal U. Guntzerl F. Sarre2 1Wilhelm-Schickard-Institut, 
Universit~t Tiibingen, Sand 13, D-74oo Tiibingen, Germany 2iXOS Software GmbH, Technopark, Abstract The 
hypertext system HyperMan provides for tomatic conversion of linear machine-readable ments into hypertext 
by applying text partitioning link generation methods. After completion of the ation process, the graphical 
user interface of the enables users to browse through the converted ments very easily. To determine whether 
user Bretonischer an au­docu­and gener­system docu­actions allow conclusions to be drawn about a generated 
hy­pertext, a special component that records user actions has been integrated into the system. In this 
way se­quences of actions can be identified that provide hints of relationships between two document 
passages or be­tween two terms that occur in the text. Then, the re­lationships can be stored as links 
or thesaurus entries, respectively, in the system s data base and can be made available to subsequent 
users. In addition to acquir­ing relationships, the user observation component also provides for hints 
about the acceptance of system com­ponents. These hints can serve as a basis for further development 
of the system. The HyperMan System The HyperMan system, being developed at the Techni­cal University 
of Munich and the Eberhard-Karl Uni­versity of Tubingen since 1988, has two goals. First, a generation 
component should manage the automatic conversion of linear, electronically available documents into hypertext. 
Second, a browsing component should enable the user to navigate through the enriched text structure very 
easily. Both components are based on the relational database management system TransBase that serves 
as a storage medium for the hypertexts (see fig. 1). P~@~Y~~f=~mW~ti~k~ti~&#38;titie c@==nOtti~~ fctr 
dim% cornmcmial advsntage, the ACM cupjmight notkz snd the title ofthc.publication and its date appear, 
snd n&#38;ce is givcm thst cqying is by pcmission &#38; the Asmcistion for Cmqxuing Machimq. To mpy @h_ 
or tG republish, IeqUims a fee stldku qnxiflc pmlissim. Ring 12, L,..., d---roll !Ilf ~ I Figure D-8ol 
1 Grasbrunn, Germany CemF.m Iemt. of the Hn=rM*.%*~== ----------~ (mciud. Wm.dow System) I Documents 
,,, (SunView, Oper../Windnws)s) ! inks ::::: Fulltext Search L.t.ra. Hm. rsrar.h Browser C.*D. E ;R:::ex 
~ran,B*,e T?d (SQL-Imte?faCe) I 1: Architecture of the HyperMan System The Generation Component These 
days, the transformation of printed material into an electronic format can be managed by optical scan­ners. 
If the documents have to be processed further, OCR software can be applied. Documents stored in a computer 
are, however, more useful to a user, if a hy­pertext representation is provided instead of a linear version. 
Therefore, a special component was integrated in the HyperMan system that performs this transfor­mation 
almost automatically. By this, the manual and intellectual effort of transformation is reduced drasti­cally. 
The automatic conversion is performed in two steps. First, the given text is divided into single parts 
that form the hypertext nodes. Second, these parts are in­ @ 1992 ACM O89791-533-XI92IOO1OIO1O3 $1.50 
terconnected by links. The partitioning of the text is performed by a lex­ical scanner and a parser. 
During this process, hier­archical and sequential links are generated by means of which the original 
structure of the text can be re­constructed, if necessary. Because the scanner and the parser are both 
generated byrneans of the UNIX tools lex and yacc , other document types can easily be accommodated. 
At present, we have implemented auto­maticconversion forsoftware manuals, research reports, and program 
sources that are available in an ASCII or LATEX format. Besides the hierarchical and sequential links 
men­tioned above, which for technical reasons are generated during the node generation phase, all other 
links are generated after completion of the node generation pr~ cess. The link generation is based on 
the analysis of the nodes, which are now managed in the relational database. First, possible link sources 
and destinations are iden­tified. Then, link sources are assigned to link desti­nations in an appropriate 
manner, and the resulting links are inserted into the database. The separation of the two link generation 
phases is grounded on the fact that the identification of link sources and destinations is link type 
dependent (possible link types are ezpJana­tory links, see also links, etc.) and has to be performed 
for every link type separately, while the assignment of link sources to link destinations can be done 
in one step independently of the link type. The Browsing Component Before we give an overview of the 
browsing component, it has to be emphasized that the graphical user interface presented here describes 
an early development state, be­fore the user observation component was introduced in February 1991. Features 
like dynamic semantic links which were introduced after that date, are ignored to avoid distort ions 
of the observation int,erval. The browsing component provides the following fea­tures: Selection of 
nodes: The user may select a node from the set of all nodes to display the node. This se­lection can 
be done from the candidate list, from the hypergraph browser (graphical representation of the node hierarchy) 
or after a full text search from the KWIC window (Key Word In Context: it displays all text lines that 
contain a hit).  Traversing a link: The user may traverse a link by clicking at the link source.  . 
Selection from a keyword index list: If t he user does not know what to search for, he or she can find 
his or her way by means of a keyword index list (like an index in a book). Clicking on an index term 
in this list leads to a set of qualifying nodes that contain the index term or an inflected form of it. 
Global full text search: The user can select one or two search terms and initiate a full text search. 
The search is either based on the complete set of nodes or on any subset specified previously. Using 
former search queries: Search results of for­mer search queries are stored temporarily and can be used 
at any time later on. Local full text search: Local full text search refers to a node selected by the 
user. Note, however, that a user is allowed to have several nodes displayed at the same time. Printing 
a node: The content of a viewer window (used to display a node) maybe printed. Deletion of a viewer: 
The user may delete viewers that are no longer needed. A user has to delete a viewer if the maximum number 
of open viewers is reached. Reset: If a new information search is to be initi­ated, a system reset can 
be performed. This re­set regenerates the original state when the system comes up. Manual link generation: 
If the user wants to add links to the set of links generated by the system, he or she can do so. The 
user can also modify or delete existing links as long as he or she has the appropriate access rights. 
Display the mouse button settings: Because the user can perform many functions with the mouse, a special 
window is displayed on request that indi­ cates which functions can be performed by which mouse buttons. 
 Observing Users Goals of the User Observation Before the introduction of a user observation compo­nent, 
the H yperMan system was a hypertext system the bases of which could be regarded as almost completely 
static (apart from the manual generation of links). But especially the automatic generation of hypertext 
in­cludes an element of uncert aint y. Therefore, it was sen­sible to take this fact into account and 
make the system dynamic in nature. This alteration mainly focused on the set of links. On the one hand, 
this set may contain links that are of no use to the users. On Lhe other hand, this set is definitely 
incomplete (it has to be incomplete because of the subjectivity of links). If done by a system administrator, 
such a hypertext updating has to be regarded as extremely laborious. In case of large hypertext, it is 
even impossible. Therefore it is more reasonable to detect and use indications to de­sirable adaptations 
by observing the users of the system. This proceeding is based on the methods implemented in the TEGEN 
system which was developed at the TU Munich as well [GJSS89]. This system transforms the observation 
of users while dealing with an information retrieval system into entries of a thesaurus. Therefore, the 
monitoring of user actions pursues the following two main goals: 1.Monitoring should give information 
about whether it is possible to draw conclusions from the users be­haviour with regard to a certain hypertext 
( ojjline). Possible conclusions may be the recognition of new links, important terms, entries of a thesaurus 
or the valuation of existing links. 2. Behaviour patterns hinting at such conclusions can be implemented 
in the system in the form of rules. These rules form the basis of machine learning: If a behaviour pattern 
matches the template of a cer­t ain rule, the system should modify the hypertext base according to the 
rule under consideration (on­line). If possible, this learning should be done with no or at least little 
interference with the user, i.e. an explicit feedback should only take place if it is either absolutely 
necessary or if the user has previoulsy agreed to a di­rect questioning. This condition seems to be sensible 
because the revision of the hypertext base should in­crease the system s acceptance in the end. However, 
a frequent disturbance of the user by the system would have an opposite effect. In addition, the observation 
of users should enable the answering of general questions, too, e.g. concerning the usage frequency of 
system components. At the same time, the observation component should be able to accommodate major modifications. 
This is pos­sible only within the boundaries that were established according to the concepts connected 
with the design of the observation component. Classification of User Actions The answers to the following 
questions serve as a basis for the construction of an observation component: Which actions of the users 
have to be recorded? . Which characteristics are considered relevant with regard to a certain type of 
action? An action s characteristics include all features that are significant to its type, e.g. time, 
keys pressed, move­ments of the mouse, present list of nodes etc. Supporting a multitude of actions that 
cannot con­tribute to the achievement of the goals described above, with the HyperMan system it was necessary 
to restrict the set of relevant actions for the time being. For ex­ample, an action that was estimated 
as containing little information is the movement of a window. However, the following types of actions 
were considered impor­tant (with the used short forms in brackets): traversal of a link (link traversal) 
 manual generation of a link (manual link genera­tion)  start of a full text search (local search, 
global search, keywordj  creation of a text viewer (node seiection)  quitting of a text viewer (viewer 
deietion)  printing of a text viewer (print)  reset of the system (reset)  reverting to the results 
of a previous full text search (previous /ist)  display of the mouse button settings (mouse set­tings) 
 The following characteristics are considered fundamen­tal with regard to all types of action: point 
in time  session in which the action was carried out  user who started the action  On the one hand, 
the point in time at which action was carried out is necessary in order to support the recon­struction 
of action sequences. On the other hand, it gives insight into the user s proceeding speed during a special 
session. Together with the recording of the user s identification, the registration of different sessions 
al­lows the distinction between different application runs. Furthermore, the recording of user identification 
enables the analysis of observation data of a single user (such an analysis can be interesting in order 
to support the auto­matic adaptation of hypertext to the individual needs of a specific user; cf. [BGP90]). 
The registration of indvidual characteristics that are appropriate to the different action types will 
be ex­plained below with the link traversal and the full text search. During the observation of a link 
traversal the ques­tions which link was traversed? and  which viewer contained the link source that 
was clicked on and which viewer displayed the destina­tion of the link?  are in the centre of interest. 
It is important to know, which link was traversed in order to increase the knowl­edge about a single 
link. On examination of preceding or succeeding actions, it may be decided whether there is an implicit 
evaluation of the link by the user. To ex­amine such an interrelation between different actions, it is 
important to record the viewers that were involved. The main questions with regard to the observation 
of full text searches are the following: Which kind of full text search was started (global search, local 
search or selection from the keyword index)? Which term or terms respectively were searched for? How 
many nodes were included in the resulting node list? Did the user truncate the search term(s)? Which 
search options were involved? Of course the registration of search terms is of great im­portance. But 
to arrive at the recognition of the terms relevance, the number of hits (delivered by the search) and 
the used options have to be recorded, too. For example, these two details may possibly refer to the connection 
between the search under concern and a di­rectly preceding search if the preceding search did not have 
any hits and the same options were involved in both searches. Implementation With regard to the oilline 
analysis, the permanent stor­age of the observation data was realized using a rela­tional database. Doing 
this, it is possible to evaluate the data in a flexible and comfortable manner using the SQL interface 
of the database management system. In addition, the fact that both the hypertext base and the observation 
data are stored within a single database can be used advantageously when connecting both sets of data. 
The problem with using a database management sys­tem is that inserting pieces of observation data into 
the database takes a lot of time (l-2 sees on average). Be­cause of that the performance of the system 
decreases to an extent that is intolerable for interactive systems. Therefore, all actions are stored 
within a UNIX file first (using a special format). At the end of a session, this file is spooled into 
the database. Thus the time to store a single action is reduced by factor 10. On the other hand, the 
time it takes at the end of a session to spool the UNIX file into the database (2 3 sees) is of no con­sequence, 
as at this time immediate system reaction is not required any more. To ease the evaluation, all data 
is stored within a single relation. Doing this, expensive joins between dif­ferent relations can be avoided. 
The resulting fragmen­tation of memory can be justified with the significant increase in ease and performance 
of the evaluation. Thereby, the online evaluation of user actions cannot be based on database entries 
because observations are not recorded directly in the database itself. For this rea­son and additionally 
in order to speed up the necessary evaluations, the relevant observation data is stored in the main memory, 
too. Thereby, in case of ambiguities of interpretation, it is possible that the system checks with the 
user which interpretation is appropriate, di­rectly after the occurrence of an ambiguous action. Analysis 
oft he Observation Data The HyperMan system was used in the database courses at the Wilhelm Schickard 
Institute of the University of Tiibingen and the Institute of Computer Science of the Technical University 
of Munich. Thereby a user­-friendly access to the manuals of the relevant database management system 
was put at the students disposal. At the same time, employees of the university and stu­dents writing 
their diploma theses used (and still use) this special hypertext. Analyzing the users actions as shown 
in this paper, only actions of those users have been taken into consid­eration that were not involved 
in the development of the system. This condition proves to be sound, considering the fact that a large 
portion of actions was initiated for reasons of testing the system only. Therefore the inclu­sion of 
such actions in the analysis would have caused a distortion of the results. Usage of System Components 
First of all, the relevance of HyperMan system s com­ponents had to be be examined in order to find desir­able 
modifications of the system (cf. [ERG L89]). With this aim in view, all actions recorded by the observa­tion 
component were classified according to their type. Then, the frequency of every action type was deter­mined 
(see table 1). This classification as done in all following examinations, too distinguishes between 
global full text search, local full text search and selec­tion from the keyword index. This is done because 
these types of action are different both in their appearance .. und their effects. However, in analyzing 
the selection of nodes, no distinction is made between the selection Table 1: Frequency of action types 
action tvDe. . freauencv. rIercent. action type first action during session viewer deletion 63; -32.7 
% global search 52 21 node selection 505 26.1 % node selection 42 12 link traversal 318 16.4 % mouse 
settings 6 1 global search 306 15.8 % previous list 66 3.4 % local search 43 2.2 % keyword 30 1.5 % 
reset 21 1.1 % key setting 11 0.6 % print 2 0.1 % manual link generation 1 0.1 % sum: lnclc lYi)u Inn 
L(JU w. /0 from the node list, the KWIC or the graphical browser because the differences do not go beyond 
the surface. Looking at table 1 it is remarkable that viewer dele­tion is the most frequent action type. 
The action types that are of central interest for information searches in hypertext systems node selection 
, link traversal and global search only follow in second, third and fourth position. This result may 
be explained by the fact that the number of viewers is restricted to the limit of six. In addition to 
that fact, a large number of exist­ing viewers contributes to the user s confusion. There­fore, a careful 
user probably deletes a viewer as soon as it is no longer needed. Considering the less frequently used 
components of the HyperMan system, it is surprising that a link was generated manually only once. This 
may be ascribed to the fact that the user community was made up of students to a large extent. As a rule, 
these students dealt with the system for one semester only. It appears to be plausible that users make 
use of the manual gen­eration of links only if they work with the system over a long period of time. 
In this case they want to introduce subjective shortcuts in order to quicken their succeeding searches 
for information. Separation of Information Searches It is necessary to analyze which information searches 
can be distinguished within one user session in order to arrive at the right conclusions. Therefore, 
it is impor­tant to know which indications hint at the end of an old or at the start of a new search 
for information. For that, we analyzed which action types were mainly used at the beginning of a H yperMan 
session. The re­sults of this analysis are shown in table 2 under the heading of first action . The same 
table contains the results of a second examination that analyzed which 11 reset 4 L 7previous list keyword 
5 viewer deletion 5 Table 2: First actions of an information search action type aver. time mouse settings 
2:30 min previous list 1:04 min global search 0:45 min keyword 0:43 min link traversal 0:38 min viewer 
deletion 0:35 min node selection 0:34 min manual link generation 0:29 min local search 0:27 min print 
0:22 min reset 0:15 min all actions 0:37 min Table 3: Average time before an action types of actions 
mainly followed certain separating ac­tions ( during sessions ). This set of separating actions is formed 
by action types that can be regarded prima facie as the end or the start of an information search: reset 
, print and previous list . The set of actions that can be carried out at the be­ginning of a session 
is very restricted. This is because the preconditions for some action types cannot be sat­isfied at this 
time. For example an existing viewer is necessary in order to traverse a link, print a node or delete 
a viewer. Further indications about the start and end of an in­formation search can be obtained by analyzing 
ratios of time. Doing this, the characteristics of the Hyper-Man system are taken into account: above 
all it is a system that provides the user with an easy access to online documentation and accelerates 
the discovery of the information needed by the user. It is not designed as a hypertext system which a 
single user reads more or less completely. Therefore, it can be assumed that the following hy­pothesis 
holds in most cases: After the completion of an information search (i.e. the user has found the de­sired 
piece(s) of information), the period of time that Table 4: Average time after an action action type aver. 
time mouse settings 3:27 min reset 1:02 min node selection 0:48 min local search 0:35 min link traversal 
0:34 min viewer deletion 0:33 min print 0:31 min global search 0:31 min keyword 0:17 min previous list 
0:16 min manual link generation 0:07 min all actions 0:37 min passes before the next action is started 
is longer than the period that passes between two actions within a sin­gle information search. Again, 
this fact can be used in order to find action types that especially characterize the start or the end 
of an information search. There­fore, for every action type the average times that passed before (see 
table 3) and after (see table 4) the start of such actions were determined. Ignoring the action type 
mouse settings , table 3 shows that in particular before the restoring of a previ­ous search, the global 
search and the selection from the keyword index, a period of time passes that is above av­erage. The 
occurrence of previous list in this context supports the thesis mentioned above that actions of this 
type hint at the start of a new information search or at least at the start of a new section of an information 
search. The examination of average periods of inactivity fol­lowing an action (table 4) shows that particularly 
ac­tions of the types reset and node selection can be found at the end of an information search. Again, 
the action type mouse settings should be ignored because normally the opening of such a help window will 
be embedded within a real information search. Further­more only a small number of actions of this type 
have been carried out. Therefore the meaningfulness of the average time has to be doubted in this special 
case, al­t bough it seems plausible nevertheless. Typical Action Sequences During the examination of 
the user observation data, the analysis of action sequences was of great impor­tance. This analysis should 
reveal the most frequent sequences of actions. Together with the examinations described above, it was 
the goal of this analysis to deter­mine the action sequences that can be seen most surely No. First action 
-+ Second action Frequency 1 viewer deletion + viewer deletion 228 2 node selection + viewer deletion 
18S 3 global sear&#38; 4 node selection 18S 4 link traversal -+ viewer deletion 146 5 link traversal 
+ link traversal 132 6 viewer deletion + global search 122 7 node selection link traversal 116 8 viewer 
deletion + node selection 102 9 node selection 4 node selection 96 10 global search 4 global search 71 
11 viewer deletion 4 link traversal 51 12 node selection + local search 21 13 viewer deletion + previous 
list 19 14 keyword 4 node selection 19 15 local search + viewer deletion 17 16 local search 4 local search 
15 17 viewer deletion + keyword 13 18 node selection + global search 12 19 previous list + reset 11 20 
global search 4 viewer deletion 11 Table 5: Most frequent action sequences (length two) as part of a 
coherent information search. After the recognition of typical information searches, we exam­ined whether 
these sequences reveal the starting points and targets of possible shortcuts (links). This analysis was 
done stepwise, that is first action sequences of length two (table 5), afterwards sequences of length 
three (table 6) and finally sequences of length four (table 7) were examined. Longer sequences were not 
examined because, considering the results of the examinations mentioned, new insights could not be ex­pected. 
Certainly longer action sequences have to be taken into account if there will be an analysis of more 
complex information searches in the future. However, at the moment this does not seem to be reasonable 
be­cause until now the quantity of recorded actions is too small a8 well. An additional condition was 
used in order to estab­lish the connection between the actions within a single sequence at least to 
a certain extent. Only those sequences were taken into consideration in which the period of inactivi 
ty between two succeeding actions did not exceed four minutes. Disregarding sequences that contain the 
action type viewer deletion (because actions of that type cannot be included directly in an information 
search), table shows that sequence 3, global search + node selec­tion , is of great importance during 
the user s search for information. This result is plausible because it is reasonable to restrict the 
number of candidates under consideration (via full text search) before the nodes are inspected for the 
information the user needs. With regard to the recognition of dead ends at which users can arrive during 
their information searches, ta­ble 5 shows that both after a node selectlon (no. 2) and after the traversal 
of a link (no. 4) a viewer is deleted again rather often. Even if the connection between two succeeding 
actions was not determined unambiguously (in order to arrive at this goal for example the viewers that 
were involved in the action sequence would have to be considered), it can be assumed that succeeding 
actions are connected with each other in many cases even considering the fact that it is advisable to 
be care­ful if those actions are involved that can be regarded aa separating actions according to the 
previous subsection ( Separation of Information Searches ). Therefore, the deletion of a viewer succeeding 
the selection of a node or the traversal of a link strongly hints at the possibility that the information 
shown in this viewer did not sat­isfy the needs of the user (provided that the last opened viewer was 
deleted). The results shown in table 6 confirm the insights gained up to now: The most frequent action 
sequences of length three are sequences that were represented at the top of table 5 as well this time 
these sequences are extended by an action oft ype viewer deletion that indicates that the user has finished 
a special information search or has arrived at a dead end. The most frequent sequences of actions that 
can be regarded as continuous information searches are listed below: link traversal + link traversal 
+ link traversal (no. 4): Succeeding traversals of links are not re­stricted to sequences of length two, 
but can be of greater length, too.  global search + node selection + link traversal (no. 9): Such a 
sequence can forma complete infor­mation search. In the previous subsection, it was shown that in many 
cases a global full text search marks the beginning and a link traversal marks the end of an information 
search.  global search + global search +-node selection (no. 15): Two succeeding global searches (without 
any node selection in between) indicate that the user has not been satisfied with the results of his 
first full text search. Therefore, he or she started a second one that delivered a more promising set 
of candidates. Finally one node was selected from this set.  node selection -+ link traversal -+ link 
traversal (no. 17): No new insights can be gained from this action sequence. Instead two previously obtained 
results are affirmed: In many cases a link traversal succeeds another one and the node selection forms 
a prerequisite for a succeeding traversal of a link.  global search + node selection + node selection 
(no. 19): In many cases the user does not leave it at selecting only one node out of the search space 
 term 1 term 2 term 1 term 2 datetime format I float format datetime tbx insert example delet eval inst 
allat ion phase described following locks compatible do until merkurexec ownint errupt esql tastat name 
Ufi esql transaction null extern expression definition null file extern files null value file null numeric 
tbx Table 8: Terms used in global full text searches with two search terms that was restricted by a 
previous global search. In­ stead he or she inspects various nodes. This does not necessarily mean that 
the user is discontent with the information which is contained in the first node. Rather, further tests 
are necessary, for exam­ ple with regard to the time ratio in order to decide on the satisfaction or 
dissatisfaction of the user. Finally, the same analysis was done considering the frequency of action 
sequences of length four (see table 7). It is remarkable that in most sequences no continu­ous information 
search can be noticed apart from two exceptions (no. 1 and no. 21). Instead in almost every sequence 
there is at least one caesura by the deletion of a viewer. Concentrating on the fundamental structures 
of information searches in the HyperMan system, this indicates that the important sequences of actions 
can be found by analyzing sequences of length three. It has to be added that the examinations presented 
in this subsection were also made considering the actions of H yperMan system developers. Because the 
results of this analysis did not differ from the results shown above, it is not possible to distinguish 
between test sessions and real sessions on the basis of different action sequences. Frequency of Search 
Terms An examination of search queries was carried out to re­veal whether the use of terms in these queries 
can indi­cate their significance. Only global search actions were taken into consideration, as the keyword 
index by de­sign only contains relevant terms, and the significance of terms used in local search actions 
can only be evaluated in a narrow context. Table 8 contains some of the term pairs used in global full 
text searches with two search items. As can be seen, the relevance of terms can hardly be judged by their 
use in such a query; in many cases, terms such as following or example , which only have reduced significance, 
are used. An analysis of global search actions with only one search item proves to be more revealing. 
Table 9 shows No. First action + Second action + Third action Frequency 1 link traversal viewer deletion 
viewer deletion 90 2 viewer deletion global search node selection 78 3 viewer deletion viewer deletion 
viewer deletion 75 4 link traversal link traversal link traversal 71 5 global search node selection viewer 
deletion 59 6 node selection link traversal viewer deletion 58 7 viewer deletion viewer deletion global 
search 55 8 node selection viewer deletion viewer deletion 48 9 global search node selection link traversal 
48 10 node selection node selection viewer deletion 47 11 node selection viewer deletion node selection 
47 12 link traversal link traversal viewer deletion 45 13 viewer deletion node selection viewer deletion 
45 14 node selection viewer deletion global search 43 15 global search global search node selection 42 
16 viewer deletion viewer deletion node selection 34 17 node selection link traversal link traversal 
33 18 link traversal viewer deletion link traversal 31 19 global search node selection node selection 
31 20 viewer deletion global search global search 30 Table 6: Most frequent action sequences (length 
three) No. First action + Second action + Third action + Fourth action Freq. 1 link traversal + link 
traversal -+ link traversal + link traversal 40 2 node selection + link traversal + viewer deletion + 
viewer deletion 39 3 node selection + node selection + viewer deletion + viewer deletion 37 4 viewer 
deletion -+ viewer deletion + global search + node selection 36 5 viewer deletion -+ global search + 
node selection . + viewer deletion 32 6 link traversal + link traversal + viewer deletion + viewer deletion 
31 7 node selection + viewer deletion + node selection + viewer deletion 30 8 node selection + viewer 
deletion + global search + node selection 29 9 global search + node selection + link traversal + viewer 
deletion 29 10 viewer deletion + viewer deletion + viewer deletion + viewer deletion 28 11 link traversal 
+ viewer deletion -+ viewer deletion + viewer deletion 27 12 link traversal + viewer deletion + viewer 
deletion + global search 26 13 link traversal + link traversal + link traversal + viewer deletion 25 
14 global search + node selection + viewer deletion + node selection 21 15 global search + node selection 
+ viewer deletion + global search 21 16 viewer deletion + node selection - viewer deletion -+ node selection 
19 17 viewer deletion + global search + node selection + link traversal 19 18 node selection + node selection 
+ node selection + viewer deletion 18 19 node selection + viewer deletion + viewer deletion + viewer 
deletion 18 20 viewer deletion + global search -+ global search + node selection 18 21 node selection 
~ link traversal + link traversal + link traversal 17 22 link traversal + viewer deletion + link traversal 
+ viewer deletion 17 Table 7: Most frequent action sequences (length four) Table9: Frequency ofsearch 
terms used inglobal full text searches with one search term search term frequency data type numeric 1 
database 1 databases 1 date 2 datetime 11 deadlock 3 define 6 defined as 4 delete 4 delete tuples 1 desc 
1 distict 1 distinct 2 empty 1 error 1 escape 1 esql 11 eval 4 expr* 6 expr. 1 search term frequency 
expr 4 express* 1 expression 15 extern 1 extern files 1 external 1 external file format 1 extren files 
1 field 1 file 1 fix 3 fix. 1 fixnlul 4 fixm-lult 1 float 2 following picture 1 fopen 2 fopen. 1 for 
update 2 format 1 search term frequency general concepts 1 get -tast ate 2 given 1 grant 8 group 1 group 
by 2 hallo 1 having 2 identifier 12 index 4 indicator 1 insert 16 install 4 installation 4 int rc 1 is 
a 1 is~mpt-tuple 6 is=mt.tuple 1 isemptytuple 1 join 2 that in this case, a meaninglessor insignificant 
term is rarely used, while a significant term is used more fre­quently. Conclusions Relevance of System 
Components It turns out that the user of the system spends a rel­atively large amount of time deleting 
existing viewers (cf. table 1). While this fact was not a matter of com­plaint in a poll among participants 
of the database class, it nevertheless seems sensible to implement a solution which performs this task 
automatically. One obvious way would be the replacement of existing viewers, when­ever the system limit 
of six viewers is reached. Strate­gies resembling those used in operating systems, esp. in the paging 
of virtual memory, could be applied; e. g.: First In First Out: the advantage of this method would be 
that all information needed for its imple­mentation is already collected by the monitoring component. 
However, as this strategy implies the danger of potentially deleting a viewer that is still needed, it 
cannot be used in its pure form. Least Recently Used: by this method, the user s access to a certain 
viewer is taken into consid­eration. This reduces the danger of the system accidentally deleting viewers 
still needed by the user. On the other hand, the definition of the term user s access to a viewer is 
quite a problem, as actions like reading a viewer (fortunately) cannot be monitored by the system (unless 
other methods of observing users are involved; cf. [CaEh89]). As a result, activities that can be registered 
by the sys­tem have to be used, which in some cases might lead to wrong conclusions. As an example, a 
user could move a viewer either because he or she wants to put it into the screen foreground and subsequently 
read the viewer s text, or because he or she wants to get it out of his or her way. In any case, the 
moni­toring component would need enhancement to gain the information necessary for implementing such 
a strategy. This relatively simple example shows that an observa­tion component cannot be designed from 
the beginning that covers all possible matters of future interest. It seems to be more important to design 
the observation component in a way that facilitates expansion of the original concept, than to initially 
construct a system with a scope so wide that an administrator cannot dis­cover any regular patterns when 
he or she manually evaluates the enormous amount of data produced. As this case shows, the monitoring 
system of the H yperMan system not only allows conclusions about the brows­ing component and the processed 
hypertexts, but also about itself. The viewer deletion action belongs, together with the node selection 
, link traversal and global search actions to the core of the H yperMan system that is used in 91 percent 
of all user activities (cf. ta­ble 1). Therefore it seems sensible to implement these core functionalities 
first, if the system is ever ported to a different environment (currently, a port to the X sys­ tem is 
planned), in this way giving users quick access to a system which at least offers basic functionality. 
Less often used components can then be ported to the target system in a second step. Some care is necessary 
in evaluating the importance of the print function: this function was used very rarely and, as a result, 
seems to be unnecessary. This conclusion should, however, not be drawn prematurely: this evaluation is 
based on users which were participants in the database class. In this class the HyperMan sys­tem was 
used as an online help system during the work with the DBMS. For this group of persons, the ability to 
print the information presented to them on screen seems to be less useful than it would be on other occasions. 
Machine Learning One of the basic concepts of the observation of users was to find ways of learning previously 
undiscovered links between parts of the text and transforming them into rules. The anal ysis of action 
sequences of length 3 (cf. table 6) gave important hints in this respect. Some of the basic search patterns 
discovered there can be di­rectly transformed into learning rules, while others need more attention. 
The best example for a directly transformable scheme is the sequence link traversal + link traversal 
+ link traversal (table 6, no. 4). Obviously, such a cascading link traversal can be reduced to a single 
link, leading from the link source of the first link traversed, to the target of the link traversed last. 
However, tables 5 and 7 also show that the length of such a cascade is not predetermined, which means 
that this length must not be hard wired into the corresponding rule. Moreover, checking mechanisms examining 
the con­text of two consecutive link traversals have to be taken into account. An appropriate method 
would be the ex­amination of timing characteristics and the viewers in­volved. Problems arise if more 
complex patterns have to be transformed (cf. [MSG92], [SGMJ92]) for example p@­terns that start with 
a global full text search. In this case, no direct reference to a link source is present, and a rule-based 
examination of references to possible other link sources has to take place. A description of one fea­sible 
method can be found in [MSG92]. The action sequence global search + global search (cf. table 5, no. 10) 
can be exploited in a completely different way. Between the two search actions, no in­spection of the 
first action s results takes place. This may lead to the conclusion that the user was not sat­isfied 
with the results of the first search and for this reason has started a new search. Assuming that the 
ob­ject of his search will not have changed (which is true in most cases), a connection between the search 
items of the first and second search often exists. Such a connec­tion can be stored in a thesaurus structure, 
again under the necessary restriction of a checking mechanism. The information stored in the thesaurus 
helps support sub­sequent users, and also allows an improved automatic generation of links. The evaluation 
of queries also gives information con­cerning possible additions to the keyword index. As this list only 
contains items of special importance to the sub­ject of the hypertext at hand, it is appropriate to detect 
important keywords in the queries and add them to the keyword index, if necessary. Table 9 shows that 
terms frequently used in single-word global search usually are of great importance. An entry into the 
keyword index can therefore be made by the system, if the keyword has been used often enough in queries. 
It has to be emphasized that the concepts presented here are only some of the idess on which actual imple­ment 
ations of learning rules are or can be based. To prevent the acquisition of large amounts of erratic 
con­nections, it is absolutely necessary to introduce mecha­nisms that guarantee the correctness of the 
connections learned as far as possible. Such mechanisms include the implicit or explicit confirmation 
of a learning result by the user, or the repeated acquisition of the same results (see [GJSS89], [MSG92], 
[SGMJ92]). The viewer deletion action type is of central im­ portance to the implicit evaluation of 
links that were learned or automatically generated. Actions of this type nearly without exception indicate 
that the viewer s contents no longer match the user s information needs; therefore, this implicit valuation 
of a link target can be transferred to the link itself. However, since this evalu­ation of links can 
be used to verify or falsify links, great care must be applied in the interpretation of the evalua­tion 
results. As the viewer deletion action type is very frequent (cf. table 1), further criteria have to 
be taken into account. For example between link traversal and the deletion of the viewer in which the 
link target was displayed, no other activities should have taken place; also, viewers deleted because 
the system limit of open viewers was reached have to be disregarded. Because of the nature of HyperMan 
as a system that makes it possible to generate hypertexts from technical documentations, the hypertext 
managed by the system are often large as well as shortlived. Because of this, it may happen that a hypertext 
becomes outdated for instance, because it is substituted by a newer version before the learning facility 
can produce substantial results. Therefore, in the case of a HyperMan like sys­tem it is necessary to 
implement a learning facility with emphasis on its ability to learn fast, even at the risk of sometimes 
learning things that are not of great use. The situation is different if the knowledge can be passed 
to possible successor systems (e.g. thesauri, glossaries etc.). In this case the quality of learned relations 
 that is precision becomes more important than the learning speed that is recall. However, to prevent 
the learning facility from pr~ ducing correct results only for a certain kind of hy­pertext, it is of 
help to be able to adjust the learn­ing speed with respect to the type of document under concern. When 
adjusting the corresponding parame­ters, the tradeoff between precision and recall should be taken into 
consideration. Taking the next step the ad­justment of parameters could be done by the machine, too. 
For example, this learning of parameters could be based on the knowledge of how many links were learned 
during a fixed period. With respect to hypertext systems (browsing sys­tems) in general, it can be said 
that a HyperMan like learning facility makes sense only if the hypertext base to which it is applied 
has a certain stability. This does not imply that a hypertext has to be static, but rather that the substitution 
of hypertext bases should not take place too often. A statement on how long at least a hy­pertext base 
should be stable in order for a learning facility to be able to produce a noticeable improvement of the 
system can in general not be made. This de­pends on a number of factors, for example on frequency of 
use, size of the hypertext base, complexity of topics dealt with in the hypertext, and the level of knowledge 
of the users. Summary The introduction of an observation component proved to be an appropriate means 
of showing what can be learned from users actions, how it can be learned and where it can be learned. 
This learning process can directly improve the data of the hypertext base at hand (for example by learning 
or unlearning links), or it can be used independently from the system (for example a thesaurus). The 
possibilities shown here are by no means complete. Also of importance are the results showing the rele­vance 
of different components of the hypertext system (including the monitoring component itself), that can 
be used in the further development of the system. To summarize, it should be noticed that an observa­ 
tion of users, carefully evaluated, can be of great use in the improvement of a hypertext system, or 
information retrieval systems at large. This is especially true since the prerequisite for an efficient 
storage and evaluation of the data, a database management system is in many cases used by such systems 
anyway. [BGP90] [CaEh89] [ERGL89] [GJSS89] [MSG92] [SGMJ92] Acknowledgements The authors would like 
to thank Alexander Clemm and Mathias Myka for their active support of this paper. The work described 
in this paper is part of the project Objektbanken fur Experten and is supported by the Deutsche Forschungsgemeinschaft 
. References Biennier, F.; Guivarch, M.; Pinon, J.-M.: Browsing in Hyperdocuments with the As­sistance 
of a Neural Network. In: Rizk, A.; Streitz, N.; Andr6, J.: Hypertext: Con­cepts, Systems and Applications. 
Proceed­ings of the European Conference on Hyper­text, INRIA, France, Cambridge University Press, November 
1990, pp. 288-297. Campagnoni, F. R.; Ehrlich, K.: lnjor­mation Retrieval Using a Hypertext-.Based Help 
System. ACM Transactions on Infor­mation Systems, Vol. 7, No. 3, July 1989, pp. 271-291. Egan, D. E.; 
Remde, J. R.; Gomez, L. M.; Landauer, T. K.; Eberhardt, J.; Lochbaum, C. C.: Formative Design-Evaluation 
of Su­perllook. ACM lllansactions on Informa­tion Systems, Vol. 7, No. 1, January 1989, pp. 30-57. Giintzer, 
U.; Jiittner, G.; Seegmiiller, G.; Sarre, F.: Automatic Thesaurus Construc­tion by Machine Learning from 
Retrieval Sessions. Information Processing &#38; Man­agement, Vol. 25, No. 3, 1989, pp. 265-273. Myka, 
A.; Sarre, F.; Guntzer, U.: .Rule-Based Machine Learning of Hypertext Links. International Workshop 
on Database Sys­tem Intellectualization -IDS 92 , May 25 -30, 1992, Kaliningrad -Svetlogorsk; to be published 
in: Upravlyaemye Sistemy Machiny, 7/8, 1992. Sarre, F.; Giintzer, U.; Myka, A.; Jiittner, . Maschinelles 
Lernen von Relationen ~; Thesauri und Hypertext. In: Godert, w.; Jaenecke, P.; Schmitz-Esser, W. (Eds.): 
Kognitive Ansatze zum Ordnen und Darstellen von Wissen, Fortschritte in der Wissensorganisation, Band 
2 (1992), pp. 265-276. 
			