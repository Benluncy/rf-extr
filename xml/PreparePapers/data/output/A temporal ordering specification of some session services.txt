
 A TEMPORAL ORDERING SPECIFICATION OF SOME SESSION SERVICES Vincenza Carchiolo, Alberto Faro , Gluseppe 
Scollo Istltuto di Informatica e Telecomunlcazionl Facolt~ di Ingegneria - Universit~ di Catania viale 
A.Doria 6, 95125 CATANIA (Italy) ABSTRACT The achievement of widely accepted standards for Open Systems 
Interconnectlon (OSI) is closely tied to the ability of producing unambiguous and implementation independent 
specifications of re- lated protocols and services. LOTOS, the L_anguage fOr Temporal Ordering Specification, 
is a Formal Description Technique (FDT) whose definition, though not completed, has already reached such 
a state as to allow trial specifications of rather sophisticated services and protocols. Thls paper explores 
the specification In LOTOS of some of the session services whose discussion is underway within various 
standardization bodies. Concise- ness of specification is tried by adopting a few notational variants 
which are guessed to be use- ful at various OSI layers. The session services selected for this trial 
specification comprise the Basic Combined Subset (BCS) enriched wlth the Expedited Data service. I. 
INTRODUCTION The challenging goal of producing a set of inter- related standards for Open Systems Interconnect- 
ion (OSI) has already forced the standardization bodies mainly involved with it -ISO and CCITT -to set 
up ad-hoc groups for the definition of Formal Description Techniques (FDT's) such as to allow the production 
of unambiguous and imple-mentation independent specifications of OSI protocols and services. The narrative 
form in which those standards are currently being defined will be necessary anyway for helping their 
understanding "at a first glance"; however, formal definitions must be pro- vided if one wants to give 
a precise meaning to concepts llke "integration of a protocol with an Permission to copy without fee 
all or part ofthis material is granted provided that the copies are not made or distributed for direct 
commercial advantage, the ACM copyright notice and the title of the publication and its date appear, 
and notice is given that copying is by permission of the Association for Computing Machinery. To copy 
otherwise, or to republish, requires a fee and/or specific permission. &#38;#169; 1984 ACM 0-89791-136-9/84/006/0107 
$00.75 underlying service for offering an higher layer's service" or "OSI conformance assessment of pro- 
ducts"; while the former concept comprises the verification of a protocol specification, the latter opens 
the scope of validation of products implementing the protocols. It is desirable that both the verification 
pro- blem and the validation one might employ a common notational framework so as to directly relate,for 
instance, the definition as well as the results of testing sequences (which constitute the typi- cal 
validation runs) to a formal conformance statement which should be a major constituent of the (hopefully 
verified) protocol specification. Integration of verification and validation in a common notation is 
one of the major motivations for the development of the temporal ordering specification approach <V 83>; 
various authors <B 83>, <K 83>, have defined languages showing an algebraic flavour which owes much to 
Mllner's Calculus of Co~mmnlcatlng Systems <M 80>. The Subgroup C of the ISO Ad-Hoc Group on FDT's has 
produced a Draft Tutorial on the Language fOr T_emporalOrderingS_pecification (LOTOS) <ISO 83a--> which, 
though lacking features llke value speci- fication facilities <CFMS 84>, can be considered as having 
reached a rather stable definition of the kernel concepts as well as of the relevant notation. Thls language 
Is currently being check- ed against trial specifications of OSI draft service and protocol standards. 
 Clear formal specifications can be used in a variety of situations, e. g. by implementors as a guidance 
both in the design and in the testing phases of their products, by service users for understanding at 
the desired level of detail what the service can provide them with, by third-party check agencies for 
industrial or legal certifl- cation. The availability of mechanical tools for checking that an implementation 
complies with the require- ments of its specification will greatly facili- tate thls process. The development 
of such tools for LOTOS is planned for the near future. The aim of thls paper is to present a temporal 
 ordering specification of the Basic Combined Sub- set (BCS) of the Session Service (SS) enriched with 
the Expedited Data service <ISO 83b>. This choice is motivated by two considerations: first, 107 among 
the OSI layers, the Session one is well known for being a rather complex one, with a va- riety of services 
and so-called functional units (the top-down taste induced the authors to st=art with the Service); second, 
the specification of a richer target (llke, e.g., Synchronization or Activity services specification) 
was inhibited by the available time and space. A formal description technique is proposed which is based 
on LOTOS extended by a few notational variants to gain in conciseness and readability. Thus sect.2 gives 
a brief review of LOTOS and of some extensions. Sect.3 discusses the se~rlce model adopted. Finally sect.4 
gives the target formal specification. Appendices A and B provide some definitions which are necessary 
for a com-plete understanding of the target specification and in order to obtain a self contained paper. 
2. BRIEF REVIEW OF LOTOS AND SOME EXTENSIONS LOTOS uses the model of event algebra introduced by Milner 
in <M 80> and allows one to describe the behaviour of an information system by descri- blng the temporal 
ordering of its interactions with its environment. In LOTOS a system consists of a set of parts interacting 
each other and/or with the environ- ment. The interaction is the basic concept of LOTOS. It is defJ~ed 
as a common activity of parts on information. The simplest kind of inter- action is called "event". 
An event consists of the synchronized passing of a value at a gate from a part to another one at a 
given moment in time. Thus, one can associate with an event: the time of passage, the value passed, 
the gate of passage and the direction of passage. An event generally has a non-null time duration but 
it is atomic in the sense that it cannot be disrupted; the time associated with an event is the time 
at which it is terminated. The event expressions of LOTOS allow one to spe-cify the behaviour of a 
system (or part) by de-scribing the temporal ordering of the events ob-servable at its event gates. A 
process is any behaviour specified in LOTOS. An event is a part- icular kind of process. LOTOS uses the 
following simple ordering principles: a process can be i) enabled by the termination of 2) disabled by 
the starting of 3) unrelated to another process; in addition a process can be influenced by the values 
of events in different processes. A LOTOS expression defines only one of the pro- cesses involved in 
an event, so it gives only the perspective that a process is prepared to parti- cipate in this event. 
In particular the following principal cases are possible : -a process can be prepared to accept the 
value x of type t at gate a. x denotes a free variable which is bound by the occurrence of the event 
to the value accepted by the process when the event has taken place. This is expressed in LOTOS by using 
the notation: a?x:t. - a process can be prepared to produce the output value e at gate a. This ~s expressed 
in LOTOS by using the notation: ale (~) The concept of event at some internal gate is also used in LOTOS 
to represent unknown internal conditions which can influence the observable behaviour at the outside, 
obtaining in this way a certain degree of internal nondeterminism. LOTOS has only one representation 
of the events at internal gates by means of the notation i. Event expressions are built by using the 
opera-tors of sequence, choice, composition, disable and restriction defined in appendix A, where some 
other features of LOTOS are also shown which make more easy and expressive the representation of a system 
behaviour. Finally appendix B presents some operators which might be added to the language without affecting 
its kernel in order to obtain some gain in conciseness and readability of specifications, at least for 
OSI, as discussed by the authors in <CFMS 84>. These operators are mere notational variants of the kernel 
language definition (in the sense formalized in <BPW 81>). LOTOS still lacks value specification facilities 
for both function and type definitions. Currently a PASCAL-like type specification notation is provisionally 
adopted with a few extensions llke: string m ... M of <type> representing a sequence of elements of 
type <type> whose length can range from m through M; M can be "undefined": in this case, when m-0 the 
shorter notation string of<type> is adopted. The function definitions needed for the specification tried 
in this paper have been introduced inform- ally. 3. A MODEL OF THE BASIC COMBINED SUBSET OF THE SESSION 
SERVICE In this section a brief informal description is given of the session service model which will 
be formalized in the next section. Session services are offered to the Presentation Layer at Session 
 Service Access Points (SSAP's) through defined service primitives. The communication at two SSAP's is 
assumed as a model of the service (fig. 1), which is specified as a single connection between a pair 
of session service users. The specification is purely extensional: it comprises the offering of service 
primitives execution at SSAP's; these events actually take place when the specified service is experimented 
by its users; each SSAP has been specified as a pair of gates. In particular the SS provides its users 
with the means to establish a connection, to exchange data in a synchronized manner, to organize the 
data exchange into activities and dialogue units and to orderly release the connection. A negotiation 
is performed in the connection establishment phase in order to let the users agree upon the quality of 
service (defined by parameters like throughput, error rate, transit delay etc.), the 108 initial assignment 
of tokens -which control the exclusive right to request the associated servi- ces -, the service elements 
to be available after FUNCTIONAL UNIT SERVICE ELEMENT SERVICE TYPE the connection is established (users' 
session requirements). ua ub USER_A session connection' ,__ USER_B pa pb SSAP A SSAP B Fig.l The 
token concept can be recalled as follows: a token is defined w.r.t, a set of associated services; a token 
is either available, in which case it can be assigned to only one user (its "owner") who has the exclusive 
right to request the associated services, or not available, in which case either both or none of the 
users can request the associated services (hence none of the users has the exclusive right to request 
them). Service elements are provided by distinct Funct-ional Units (FU's): the kernel one comprises 
connection establishment, normal data exchange and orderly release which are essential and not negotiable; 
either duplex (two way simultaneous) or half duplex (two way alternate) normal data exchange has to be 
agreed during the negotiation. The other FU's provide the optional service elements; they are selected 
according to the negotiated session requirements ( ) . Any combin- ation of the kernel FU with either 
duplex or half-duplex FU and with optiona~ FU's may be defined as a service subset (~). The Draft International 
Standard <ISO 83b> (hereafter termed "DIS") proposes three different subsets: i) Basic Combined Subset 
(BCS) 2) Basic Synchronized Subset (BSS) 3) Basic Activity Subset (BAS). Only the "data" token can be 
available in the BCS, which comprises the following FU's: - kernel -half duplex -duplex. The expedited 
data FU provides the corresponding additional optional service element. None of the subsets proposed 
in the DIS comprises it expli- citly. The authors argue ~hat it can be optional- ly added to any of them 
('). This service element can be provided only when the transport expedited data service is available. 
 kernel S CONNECT confirmed S--DATA unconfirmed S--RELEASE confirmed S--U ABORT unconfirmed S P ABORT 
prov.-init. half duplex S TOKEN PLEASE unconfirmed S--TOKEN--GIVE unconfirmed duplex no additional service 
elements expedited data S EXPEDITED DATA unconfirmed Tab.l 4. FORMAL SPECIFICATION The specification 
is organized as follows: a PASCAL-like type declaration which defines all the used types but one, the 
abstract type "nxqueue", which has been formally specified in <CFMS 84>; the latter consists of a sequence 
of two distinct kinds of objects, "normal" (N) and "expedited" (X): Fig.2 gives a pictorial repre sentation 
of its access functions; the function "nox" returns the number of expedited objects in the sequence; 
the symbol * denotes the empty sequence; a temporal ordering specification which consti- tutes the "body" 
of the specification: here the processes are defined in a top-down fashion, hence the definitions of 
the atomic ones are placed at the bottom; these may be looked at as a quick glossary of the abbreviations 
of serv ice primitives. rest nin t I I'£[NIXININI ........ . IXlNI N 1 ~flrst xln [ : firstx ' ~ 
' restx According to the service conventions outlined in <ISO 83c> a service element can be of type 
confirmed, unconfirmed or provider-initiated; Tab.1 summarizes the service elements and types of BCS+expedlted 
data FU's. The service elements are denoted by the names of the corresponding service primitives, abstracted 
from their type. The following simplifications have been assumed in the formalization of the next section: 
 - the interactions denoted by service primitives are modeled as atomic events; -no quality of service 
negotiation is modeled. Short informal descriptions of the specified ser- vice elements are given in 
the form of comments throughout the formal specification. Fig. 2  In order to allow a nice use of the 
restriction operator, each SSAP has been specified as a pair of gates (a "channel"), one for request 
and response primitives, the other for indication and confirm ones: if c is a channel, the functions 
u(c) and p(c) return its respective gates, and the function remote(c) returns the channel to which the 
remote user is attached. Comments are inserted in the form (* comment *) as an aid to understanding 
the formal expressions which follow them.  109 .Syst SS BCS X (* type declaratlons *) type (* Architecture 
elements *) (* SSAP channels *) SSAP = (a,b); (* SSAP gates *) gate = (ua,pa,ub,pb); (* Functional 
Units *) FU = (K,H,D,X); (* Session Service Primitive *) SSP = record case code:sspcode o_~f (* S CONNECT 
-This service is used to establish a se~slon connection and to negotiate the session requirements and 
initial token assignment; a result parameter (accept or reject) is given in the response/conflrm primitive: 
a reject value can he quallfled as due to user or provider (the latter only in the confirm primitive); 
a limited amount of user data can be carried in the service primitives. *) (*S__CONNECTrequest/indication*) 
Ci:(parms:crlp); (*S_CONNECTresponse/confirm*) Cc:(parms:crcp); (* S DATA -This service is used to 
carry normal Sesslon Service Data Units (SSDU's) over an esta bllshed session connection. When the data 
token is available (half-duplex FU selected) only its owner can send data by means of a S DATA request. 
,) (*S_DATArequest/indication*) D: (parms:SSDU); (* S RELEASE -This service is used to orderly re le~se 
an established session connection without loss of data; all the available tokens are re qulred to be 
assigned to the user initiating tlhls service; a limited amount of user data can be carried in the service 
primitives. *) (*S_RELEASErequest/indication*) Ri: (parms:rud); (*S_RELEASEresponse/confirm*) Rc:(parms:rrcp); 
 (* S U ABORT -This service is used to instant- --w aneously release the session connection; this may 
cause loss of data; a few octects of user data can be carried in the service primitives. *) (*S_U_ABORTrequest/indlcation*) 
AU: (parms:aud);  (* S P ABORT -This service is used to indicate the release of a session connection 
for reasons internal to the SS-provlder; this may cause loss of data; a reason parameter is provided 
which may assume one of the values: transport disconnect, protocol error, undefined. *) (*S_PABORTindlcation*) 
AP: (parms:par);  (* S TOKEN PLEASE -This service is used to request specific--available tokens; this 
request can be issued only by the user who does not own the re quested tokens. An S TOKEN PLEASE indication 
does not constrain the user to give the requested tokens. *) (*S_TOKEN_PLEASErequest/indic.*) P : (parms:tpp); 
 (* S__TOKEN GIVE -This service is requested by the owner of--some tokens to surrender one or more of 
them to the other user. *) (*S_TOKEN__GIVErequest/indic.*) T : (parms:tk); (* S EXPEDITED DATA -This 
service is used to carry Exp--edited Sesslon Service Data Units (XSSDU's) over an established session 
connection. The transfer of an XSSDU is not constrained by the right to send normal SSDU's. The SS provider 
guarantees that an XSSDU will not be delivered after any subsequently submitted normal SSDU on that session 
connection. The size of an XSSDU is limited to a few octets. *) (*S_EXPEDITED_DATAreq./indlc.*) X:(parms:XSSDU) 
end (* service primitive parameter types *) (* S CONNECT *) (*conn. user data*) cudffistrlng 0..512 
o_~f octect; (* the following unspecified types are used for S CONNECT primitive parameters which are 
unspeci- fied also in the DIS *) (*user-provlded session connection identifier*) sci = unspecified; 
(*SSAP identifier*) ssapid ffi unspecified; (*reason for failure in user reject of connection*) urf 
= unspecified; (*reason for failure in pro vlder reject of connection*) prf = unspecified; (* S CONNECT 
request/indication *) (*session requirements: half duplex FU,duplex FU,expedited data FU*) sr ffi (H,D,X); 
(*requestor requirements*) rsr=set of sr; (*proposed token assignment (by re questor): requestor side, 
accept or side, acceptor choice*) pta=(rqs,acs,ach); crip ffi record conn__Id:scl; calllng,called:ssapid; 
ud:cud; case sr:rsr o_~f(H),(H,X),(H,D,X): (ita:pta) end; (* S CONNECT response/confirm *) (*result of 
connection establishment*) ru ffi record case r:(acc,urJ,prJ) of (*accepted*) acc:O; (*user rejected*) 
urJ:(rs:urf); (*provider rejected*) prJ:(rs:prf) end; (*half-duplex allowed session requirements*) hsr 
= (H,X); (*duplex allowed session requirements*) dsr = (D,X); (*acceptor session requirements*) asrfunlon 
of (set of hsr,set of d sr~, (*token assignment*) ta = (rqs,acs); crcpfrecord corm Id:sci; called:ssapld; 
ru:ru; ud:cud; case sr:asr of (H),(H,X): (ita:ta) end; (* S__DATA *) SSDU = string of octet;  (* S 
RELEASE *) (* release user data *) rud = cud; (* release result *) rru = (affirmative); (* S RELEASE 
response/conflrm *) rrcp = record ru:(rru); ud:rud end; (* S U ABORT *) (* user data *) aud ffi string 
0..9 o_ff octet; (* S P ABORT *) (* reason *) par = (td,pe,uf); (* S TOKEN GIVE *) (*set of available 
tokens*) tk = set of (da); (* S TOKEN PLEASE *) (* user data*) pud = string 0..64 o_~f octet; tpp = 
record tk:tk; ud:pud end; (* S EXPEDITED DATA *) (*expedited SSDU*) XSSDU = string i..14 o_~foctet; 
 (* data transfer and orderly release phases parameters *) (*token availabil./assignment*) taa=(na,rqs,acs); 
 dtorph = record (*requestor and acceptor channels*) a,b: SSAP; (*selected functional units*) sfu: asr; 
(*data token availability/asslgnment*) dk: taa; (*information flows [source channel] *) S: array SSAP 
o_~fnxqueue; (*orderly release *) tel: array SSAP of array (*phase control: *) (req,lnd) of bo---olean 
end (*see data transfer phase *) endtype (* temporal ordering *) ~ spec SS BCS X(a,b:SSAP) := session 
connection(a,b) session_--connectlon(b,a) );SS BCS X(a,b) (* Hereafter a and b respectively denote the 
requestor's and acceptor's channels. *) (* connection establishment phase it is specified that a connection 
can be termin- ated only after the connection establishment has been requested. Termination processes 
starting in this phase are specified after those of the normal course of action *) session connection(a,b:SSAP) 
:= ~req(a~x);(Cind(b,x);pending(a,b,x) 0early_termination(a,b,x) ) (*the connection pending process 
starts after the S CONNECT indication has taken place, and trans- forms into the conflrmln~ one after 
the S CONNECT response is given; the "gates weak dlsab~e" ope- rator is introduced in appendix B. *) 
 pending(a,b:SSAP,x:crip) := let g = any of (a,b) in (abort_termination(g,remote(g)) >gl< (Crsp(bly); 
if (H in x.sr and H in y.sr) -----> con~rming(a~,b,x,y,y.lta,**f) else conflrmlng(a,b,x,y,na,*,f) fl 
 )) (* in the confirming process the acceptor is already either in the data transfer phase or dis- connected, 
whereas the requestor is waiting for the connection confirm; sfu: selected functional units; r becomes 
true when the acceptor requests the orderly release before the connection confirm has taken place *) 
 conflrmlng(a,b:SSAPpx:crlp,y:crcp, dk:taa,Sb:nxqueue,r:boolean) :ffi if y.ru.r=acc --> let sfuflntersection 
__°f (x.sr,y.sr) inn (Ccnf(a,y);data transfer (a,b, sfu,dk,(*,S~),((f,f),(r,f))) DD i_~nsfu or (H i_nnsfu 
and dR=acs)--> (Dreq(blz);conflrming (a,b,x,y,dk,nin((D,z),Sb),r) ~Rreq(b|z);(confirming ) (a'b'x'y'dk'nin((Ri'z)'Sb)'t)\u(b)) 
DX i__nn sfu-->Xreq(blz);confirming (a,b,x,y,dk,xin((X,z),Sb),r) DH i__n_nsfu-->i_f dkfacs --> TGreq(b,(da));confirming 
(a,b,x,y,na,nin((T,(da)),Sb),r) else TPreq(bJz);confirming ---~,b,x,y,dk,nin((P,z),Sb),r) fi ) else Ccnf(a,y) 
fl (* data transfer phase both requestor and acceptor are in the data transfer phase which, in this 
specification, includes the (orderly) release phase; the latter is controlled by the values of re1: rel[xxx,~ 
becomes true when the primitive S RELEASE xxx... is executed at SSAP g. The function onside(g) returns 
rqs,acs for g -a,b respectively. *) data transfer(ps:dtorph) := with ps do for all g in (a,b) ( (* S_DATA 
request or S_RELEASE request *) D in sfu or (H in sfu and dkfonslde(g)) --> (Dreq(gJz);data transfer 
(ps where S[g]<-nln((D,z),S[g])) (* it can be easily verified that a release co111slon can happen only 
in duplex mode *) ~not rel[ind,g]--> Rreq(g[z); i_ff rel[req,remote(g)J --> release collision (ps--where 
S [g] <-nin ( (Ri, z ) S [ g] ) ) else data transfer (ps wh~re S[g]<-nin((Ri,z),S[g]), rel[req,g]<-t)\u(g) 
fl  iii (* S DATA indication or S RELEASE indication or S RELEASE confirm *) ~S[g]<> * --> with first(S[g]) 
do code=D -->Dind-d~emote(g),parms-~;data transfer (ps where S[g]<-~est(S[g])) 0code-Ri-->Pc[nd(remote(g),parms);data 
transfer (ps where S~E]<- *,rel[ind,rem~te(g)] <-t) ~codefRc-->Renf(remote(g),parms) od (* S_RELEASE 
response *) ~rel[ind,g] --> Rrsp(gJz);data transfer (ps where S[g]<-~in((Rc,z),S[g]), S[remote(g)] <- 
* )\g (* S EXPEDITED DATA service *) 0X in sfn--> (~eq(g[z);data transfer ~ps where S[g]<-xin((X,z),SCg])) 
Dnox (s [g] ) >o--> Xind(g,firstx(S[g]).parms);data transfer (ps where S[g]<:restx(S[g])) ) (* S TOKEN 
services (data token) *)  ~H in sfu--> (i_ dkfonside(g) --> TGreq(g,(da));data transfer (ps where dk<-na, 
S[g]<-nln((T,(da)),S[g])) else TPre---~[z);data transfer (ps where S[g]<-nin((P,z),S[g])) fi 0S[g]<> 
* --> wlth first(S[g]) do codeffiT-->TGind--~emote(g),parms-~;data transfer (ps where dk<-onslde(r~mote(g), 
S [g] <-rest (S [g] ) ) ~code=P-->TPind(remote(g),parms);data transfer (ps where S[g]<-rest(STg])) od 
 ) ) od (* release collision the release collision is specified by the arblt- rary interleaving of 
the provider outputs. The execution of the S RELEASE indication at ,each SSAP enables the involved user 
to realize the occurrence of the collision. Two solutions are then conceivable: either this event is 
considered as terminating the connection (at the SSAP where it occurred) or another termlnatlon request 
primitive is accepted by the provider; no problem is detected by the autlhors if this is an S U ABORT 
request, since it is clearly stated in the DIS that data conveyed by abort primitives can be lost; on 
the contrm~] a not allowable loss of data occurs if an S RELEASE response is accepted (as the state tables 
of the DIS indicate) since their user data can never be delivered. *) (* release collision as specified 
by the DIS state tables *) release_collision(ps:dtorph) := with ps do for all g in (a,b) I~ d~a_transfer(ps--~remote(g)\u(g);Rrsp(g[z)) 
od (* release collision without SRELEASE response *) release__collision(ps:dtorph) := with ps d_~odatatransfer(ps)\u(a)\u(b) 
od (* immediately release processes *) (* three kinds of occurrences are represented by the following 
process: - a "local rejection" of a connection request,  - a provlder-lnltlated abort before S CONNECT 
indication,  - a (requestor) user-initlated abort before S CONNECT indication.  *) early termination 
(a,b : SSAP,x: crtp) := i[y:prf);Ccnf(a,x where ru <-(prJ,y)) _~CY: par ) ; PAind (a, y )-~---- (~k__~ 
~Cind (b ,x) ;pabort_pending (b ,x,y) ) UAreq (aly) ; (skip 0 Cind (b, x ) ; u_abor t_pending (b, x, 
y ) ) [abort_pending(a,b:SSAP,x:crip,y:par) :. y:par);PAind(b,y)~PAind(b,y))>< (Crsp(b[z);l_~f (H in 
x.sr and H in z.sr) --> co-nfirmin~,b,~,z,z.lta,*,f) else conflrmlng(a,b,x,z,na,*,f) fi\a ) u abort_pending(a,b:SSAP,x:crip,y:par) 
:= (i__Cy:par);PAind(b,y)0UAind(b,y))>< (Crsp(blz);i_ff (H in x.sr and H in z.sr) --> c~nflrmlng--~,b,~,z,z.lta,*,f) 
else confirming(a,b,x,z,na,*,f) fi\a ) (* the following process represents the immediately release, 
either user-or provider-initiated, at any moment after the S CONNECT indication has taken place. *) 
aborttermlnation(a,b:SSAP) :-UAreq(alx);UAind(b,x) for all x in par ~PAind(s,x);PAind(b,x) (* service 
prlmitlves *) (* S CONNECT *) (* request *) Creq(g:SSAPjx:crlp):-u(g)?(Ci,x) (* indication*) Cind(g:SSAP,x:crlp):= 
p(g)~(Ci,x) (* response *) Crsp(g:SSAPJx:crcp):-u(g)?(Cc,x) (* confirm *) Ccnf(g:SSAPjx:crcp):= p(g)l(Cc,x) 
 (* S DATA *) (* r~quest *) Dreq(E:SSAPlx:SSDU):= u (g) ? (D,x) (* indication*) Dind(g:SSAP,x:SSDU):-p 
(g)! (D,x) (* S RELEASE *) (* r~quest *) Rreq(g:SSAPIx:rud) := u(g) ? (Ri,x) (* indication*) Rind(g:SSAP,x:rud) 
:= p(g) I (R/,x) (* response *) Rrsp(g:SSAPlx:rrcp):= u(g)? (Re,x) (* confirm *) Rcnf(g:SSAP,x:rrep):-p(g) 
I (Rc,x) (* S U ABORT *) (* request *) UAreq(g:SSAPlx:aud):-u (g) ? (AU,x) (* indication*) UAind(g:SSAP,x:aud):-p(g) 
I (AU,x)  (* S P ABORT *) (* tn--di--cation*) PAind(g:SSAP,x:par):- p(g) l(AP,x) (* S TOKEN PLEASE 
*) (* r~quest-- *) TPreq(g:SSAPlx:tpp):= u(g)?(P,x) (* indication*) TPlnd(g:SSAP,x:tpp):ffi p(g) l(P,x) 
(* S TOKEN GIVE *) (* r~quest-- *) TGreq(g:SSAP,x:tk) :ffi u(g)?(T,x) (* indication*) TGind(g:SSAP,x:tk) 
:ffi p(g) r(T,x) (* S EXPEDITED DATA *) (* r~quest "7 Xreq(g:SSAPIx:XSSDU):- u(g)?(X,x) (* indication*) 
Xind(g:SSAP,x:XSSDU):= p(g)!(X,x) 5. CONCLUSIONS The secret aim of this paper consisted of showing how 
an event algebra can effectively be employed for the specification of rather complex abstract services. 
 The goal can be considered reached, in the opi- nion of the authors, at least for the specified subset. 
This effectiveness remains to be shown for more complex target applications like the whole SS or the 
Session Protocol. Some pitfalls of the current draft definition of LOTOS have been compensated in this 
example by the definition of some additional operators which do not affect the kernel language semantics, 
while seeming to be very useful at various OSI layers for the purpose of their concise specifi- cation. 
 Work is underway to complete the LOTOS definition with function and abstract type specification fa-cilities. 
6. ACKNOWLEDGEMENT The authors llke to acknowledge the contributions of Chris Vissers, Ed Brinksma, 
Jan De Meer and GUnter KarJoth, with whom they cooperate both in the COSTII bis project on Temporal Ordering 
Specification and in ISO/TC97/SCI6/WG1/FDT/-Subgroup C. 7. REFERENCES <B 83> E. Brinksma, An Algebraic 
Language for the Specification of the Temporal Order of Events in Services and Protocols, Proc. of the 
European Teleinformatics Conference, Varese, Italy, Oct.3-6, 1983, North-Holland (1983) pp.533-542 <BPW 
81> M. Broy, P. Pepper, M. Wirsing, On Design Principles for Programming Languages: An Algebraic Approach, 
in: De Bakker, Van Vllet (eds), Algorithmic Languages, North-Holland (1981) <CFMS 84> V. Carchlolo, 
A. Faro, F. Minlssale, G. Scollo, Some topics in the design of the specification language LOTOS, to 
appear. <ISO 83a> ISO, Information Processing Systems, Open Systems Interconnection, Draft Tutorial Document, 
Temporal Ordering Specification Language, ISO/TC97/SCI6/ /WGI/N 157, August 12, 1983 <ISO 83b> ISO, 
Information Processing Systems, Open Systems Interconnectlon, Basic Connection Oriented Session Service 
Deflnltion,Draft International Standard DIS8326, 1983 <ISO 83c> ISO, Information Processing Systems, 
Open Systems Interconnection, Proposed DP for Services Conventions, IS0/TC97 /SC16/WG1/N 122 revised, 
October 1983. <K 83> G. KarJoth, BDL,a Behavlour Description Language,IFIP WG6. l,Thlrd International 
Workshop on Protocol Specification, Testing and Verification, ZurlchMay 1983, (North Holland). <M 80> 
R. Milner, A Calculus of Communicating Systems, LNCS 92, Springer - Verlag, Berlin (1980) <V 83> C. A. 
Vlssers, Architectural Require- ments for the Temporal Ordering Speci- fication of Distributed Systems, 
Proc. of European Telelnformatics Conference, Varese, Italy, Oct. 3-6, 1983, North- -Holland (1983), 
pp.79-95 NOTES (i) A type specification for e is not needed since e is a defined value at the time 
of occur- rence of the output event; however, it might be useful, in some cases, to allow for a concise 
notation of internal nondetermlnlsm in the output value generation: this could be expressed by a typed 
notation, where the type identifier would denote the range of the values that the output event may transfer. 
 (2) A distinguished feature of the FU's definit- ion is that their I/O dictionaries (in terms of parameterized 
service primitives) are disjoint. Nevertheless the high number of interdependencies among the FU's makes 
unpractical a model of the service which would describe it as the parallel composition of processes representing 
the FU's.  (3) There are some restrictions concerning the selection of related FU's: for instance, the 
exception reporting FU can be selected only if the half-duplex FU is included.  (4) Clause 10.12.1 of 
the DIS, on "extended control parameter", states that " the extended control parameter allows the SS 
user to make use of the resynchronize, abort and activity (discard and interrupt) services, when normal 
flow is congested. Note -when the expedited functional unit has been selected the extended control QOS 
is always provided to the SS user". The "always" adverb in the note should be referred to the ser- vices 
present in the agreed subset.   APPENDIX A: KERNEL LOTOS or w.r.t, an identifier of a parameter list: 
 This appendix shows the operators and other features of the kernel LOTOS now being developed by Subgroup 
C of ISO/TC97/SC16/WG1/Ad-Hoc group on FDT's. LOTOS operators: -sequence operator denoted by ";": if 
p and q are processes, also (p;q) is a process which initially behaves like p and, when p terminates, 
then it behaves like q. -choice operator denoted by "~ ": if p and q are processes, also (p D q) is a 
process which beh~es either like p or like q. The choice may be ex-tended to an indexed set of processes 
by means of a construct of the form: for all <index> i_~n <type> ~ p(<index>)  -composition operator 
denoted by [B[ where B is a set of gates; if p and q are processes, then (p [B[ q) is a composed process 
which transforms complementary offers at gates in B into internal events, whereas arbitrary interleaving 
is allowed of events of p and q at gates not in B. -disable operator denoted by >< ; if p and q are 
processes (p >< q) is a process which behaves llke q until the occurrence of the first event of p; after 
this occurrence the process may only continue with the rest of p. -restriction operator denoted by "\B" 
where B is a set of gates; if p is a process, p\B is a process which behaves llke p without derivations 
starting with an event at a gate of B. Other language features are: -guarded commands in the form: e 
--> p  which establishes that process p may be executed only if expression e is true. Mutually exclusive 
guards can be expressed in the form: if e --> p else q f i -behaviour identifiers in the form : alfa 
:= p  which establishes a way to start the process p simply by using in the language expressions the 
identifier alfa. The identifier can be also parameterized in such a way as to give rise to a (possibly 
infinite) number of identifiers simul- taneously. -recursion that means that we may use the behaviour 
identifier itself in defining the language expressions. -substitution either in the form: <identifier> 
where <where substitution list>  The Pascal with clause is adopted. Finally we note that a high degree 
of flexibility in modularising our specifications can be obtain- ed by using the notions of export values 
list and import values list. The export list of a process p is a set of parameters having a defined 
value for every termination of p. The input list of a process p is the set of parameters which must 
be defined before the execution of p. These lists are represented in LOTOS by using the following notation 
: P (i I ..... i N [ e I ..... e M)  where i. is a generic imported value and is a genericXexported 
value. The symbol "[" ~ used instead of "([" when the import list is empty. Process p may be the internal 
"unobservable" event i, in which case the internal value gener- ation~s represented by the export list. 
 APPENDIX B: LOTOS EXTENSIONS This appendix presents some of the new operators proposed in <CFMS 84> 
to be added to the kernel LOTOS in order to obtain more readable and concise specifications. In the sequel 
A denotes a set of gates. When A consists of one gate, A=[aJ, a will be used instead of A. I. ">[<" 
:"weak disable"; if p and q are process- es, then p>l<q is also a process which behaves like p[[q until 
the last event of either p or q takes place; this event actually terminates the resulting process. 2. 
">A]<":"gates weak disable"; if p and q are processes then (p>A[<q) is also a process which behaves llke 
q unt~l the first event of p takes place; after this event it behaves like p'>l<(q'\A) where p' and q' 
are the processes in which p and q respectively transformed. let <let substitution llst> in ( <LffFOS 
expression> )------ 
			