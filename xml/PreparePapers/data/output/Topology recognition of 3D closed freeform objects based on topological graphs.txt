
 Topology Recognition of 3D Closed Freeform Objects Based on Topological Graphs D. Steiner CMSR Laboratory 
for Computer Graphics and CAD Department of Mechanical Engineering Technion- Israel Institute of Technology 
Haifa, Israel 32000 972-4-8292334  ovir@tx.technion.ac.il 1. Introduction In the reverse engineering 
process, surface reconstruction of freeform objects with arbitrary topology should satisfy geometrical 
and topological criteria. Most reconstruction methods described in the literature are based on a bottom-up 
approach, in which an initial dense triangular mesh is created. Then, the mesh is simplified and surface 
patches are reconstructed over the simplified mesh. These methods, however, are local due to parameterization 
and fitting, so that continuity and smoothness problems with the merging elements occur frequently. Several 
fitting methods that extract shape topology in a pre-processing stage have been developed to avoid the 
above problems [4]. Using these methods, the surface fitting process was applied on the resulting topological 
structure. Two main methods that extract the topology are the Morse Theory [3] and the Reeb Graph [4]. 
These methods detect the topology of the shape from contour slices data. With these methods, shape topology 
and geometry are described as a sequence of finite basic operator. The main drawback of the Morse theory 
is that the sequence of operations does not uniquely represent the objects. The same sequence of operators 
might be related to objects with different connectivity [3]. The main advantage of the Reeb graph is 
that it represents a family of objects using the same topology. However, the critical points, their heights 
and their topological relations are defined manually by the user, who must be familiar with operator 
terminology. In addition, for complex shapes, the intermediate shapes are non-intuitive. In [2], the 
height function is based on a Dijkstra function. The function is invariant to the orientation and is 
relatively fast. Although the paper focuses on objects of genus-0, it can be extended to genus-n. However, 
at genus-n the method creates branches, which can cause noisy behavior around holes. In order to cope 
with the above problems, a new method is proposed that extracts the topological graph directly from the 
object. The method is based on a new height function. The proposed method is robust and can be applied 
on objects with an arbitrary topology of genus-n. The method, which is applied directly on a dense triangulated 
mesh, creates the topological graph of a complex object that is represented by thousands of facets in 
tens of seconds. Moreover, the topological extraction process is automatic and transparent to the user. 
The proposed Permission to make digital or hard copies of all or part of this work for personal or classroom 
use is granted without fee provided that copies are not made or distributed for profit or commercial 
advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, 
to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or 
a tee. Solid Modeling 01 Ann Arbor Michigan USA Copyright ACM 2001 1-58113-366-9/01/06...$5.00  A. Fischer 
CMSR Laboratory for Computer Graphics and CAD Department of Mechanical Engineering Technion- Israel Institute 
of Technology Haifa, Israel 32000 972-4-8293260  memnath@tx.technion.ac.il method is based on two 
stages: (1) creating 3D non-self-intersecting iso--curves from the 3D triangulated mesh, and (2) extracting 
a topological graph. The approach is described in Section 2, and the implementation is presented in Section 
3. 2. The Topological Approach The proposed method is applied directly on a dense triangulated mesh. 
The topological graph is dedicated to the connectivity of the mesh elements. In the proposed approach, 
topology extraction is based on two stages: (a) calculation of the 3D iso- curves, and (b) extraction 
of the topological graph. Each stage will be described in detail in the following sections. Iso-curves 
are determined according to a pseudo-potential problem that can be formulated as a Laplacian PDE. The 
main advantage of solving the Laplacian equation is that the 3D iso-curves are non-intersecting. Moreover, 
the iso-curves do not split. First, boundary conditions are determined. Two points on the mesh are assigned 
initial potential values. Then, the PDE is solved numerically, and points on the mesh are assigned potential 
values. Finally, a Marching Cube algorithm is applied, and the iso-curves are calculated. As a pre-processing 
stage of topological graph construction, the sequence of the iso-curves is defined. The topological graph 
has a looped structure that can be mapped one to one to the holes in the object. Note that the graph 
will be invariant to shapes with the same topology. The method is robust and can extract topologies of 
complex objects. 3. The implementation The given mesh is represented by a boundary representation with 
all relations between facets, edges and point elements. Next, initial conditions are determined. Then, 
the potential values of the mesh vertices are calculated. The isc~curves are calculated from the potential 
values. Next, the iso-curves sequence is determined according to a parent-child order. Finally, the topological 
graph is calculated. In the subsequent sections, each stage will be described in detail. Determining 
the Initial Conditions: The Start-Point is defined arbitrarily. The End-Point is defined with respect 
to the Start- Point as the farthest point on the mesh. Once the Start-Point has been chosen as the first 
point, the point End-Point with the maximal distance in respect to Start-Point is sought. The algurithm 
begins from Start-Point and searches the neighbors recursively. The last point that the algorithm 'visits' 
is defined as the End-Point. The search algorithm has O (n) complexity, where n is the number of vertices 
on the meshes. Calculating the potential values of points: In this stage the potential values of the 
mesh vertices are calculated. Each internal vertex inside the boundary is assigned the average potential 
values of its adjacent vertices. In our implementation, the Gauss-Seidel iterative method was used to 
solve the equations set, where each vertex inside the boundary is assigned 305   
			