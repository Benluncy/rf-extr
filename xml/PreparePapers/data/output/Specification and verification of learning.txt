
 Specification and Verification of Learning Ka-Wing Wong Department of Mathematics, Statistics and Computer 
Science Eastern Kentucky University Richard A. McBride Department of Computer Science University of 
South Dakota Abstract This paper discusses the specification and verification of the leaxn.mg behaviors 
of objects. A proof procedure that can be automated is introduced. Key Words or Phrases : learning, 
knowledge, distributed sys- tem, specification, verification, temporal logic Introduction An organization 
(e.g., an office) is a distributed system which consists of a number of objects. Each object is an expert 
in an area and serves a role in the orga- nization. These knowledge objects interact with each other 
to learn new facts that are necessary to carry out a task. The learning behavior of knowledge objects 
is an important factor determining the efficiency of the organization. The study of knowledge of objects 
has been an area of active research for many years. In the mid 1980's, Tsichritzis [7] introduced an 
interesting object world model which described the knowledge ac- quisitions, dissemination and manipulation 
of knowl- edge objects called KNO's. Halpern and Moses [5] defined a knowledge hierarchy in which various 
types of knowledge in a distributed system are introduced. In the early 1990's, Halpern and Zuck [6] 
applied the concept of knowledge in the specification of commu- nication protocols. A formal model of 
the knowledge specification has been introduced to the literature by Fagin, Halpern and Vaxdi [3]. Recently, 
a knowledge- based approach has been apphed to object oriented system design and analysis [9]. A knowledge-based 
approach is very useful in software development. It is very important that we have a systematic way to 
Permission to copy wilhout f~ all or pan of th~ n~'iai is grained ptovidad the copies arc not made or 
distributed for direct commercial advaatag¢, the ACM copyright notic¢ and the title of the publication 
and ks date appoint, aad notice is given that copying is by pctrai.~ion of the Association for Computing 
Machin¢15,. To copy otherwise,,or to rc:publi.~ requires fee and/orspecific permission.  reason about 
the learning behavior of objects. This paper discusses the speification and verification of the learning 
behaviors of objects. Specification of Learning Objects possess knowledge. Let y be an object and P 
be a fact; object y possesses the knowledge P can be specified by a knowledge predicate KuP (y knows 
that P is true). Objects can improve their knowledge by learning from another object. Let P~ be a fact 
that is known to y only (e.g., a secret), an object z can obtain the knowledge of P~ by learning it from 
y via a learning action learnz(y). The following two location predicates are defined to specify an object's 
state of learning with respect to a learning action: at learnx(y)  after learn~:(y)  The location 
predicate at learns(y) specifies that object x is performing the learning action learn~(y) to wait for 
object y to tell the fact Py. Object x will continue to perform the learning action until it ob- tain 
the needed knowledge. The location predicate after learnz(y) specifies that object z has finished performing 
the learning action. These two location predicates form the basic elements for building state- ments 
to specify the learning behaviors of objects. Due to the nature of distributed systems, objects can perform 
learning actions concurrently. Concurrent learning actions introduces nondeterminism into the learning 
behaviors of objects. We will use branching time temporal logic [1, 2, 8] to specify and verify the learning 
properties of objects because this type of logic is good for reasoning about nondeterministic computa- 
tions. In branching time temp'oral logic, time is viewed as a branching, tree-like structure. At each 
moment, time may split into alternative courses representing O 1994 ACM 089791-.647-.6/94/0003 $3.50 
different possible future sequence of states about the knowledge of the objects. Six branching time temporal 
logic operators, are employed in our specifications: V all future operator  3 some future operator 
 D always operator  <> some time operator  * t> until operator ~ modified until operator The V operator 
asserts that a statement holds in all branches of future states. The B operator asserts that a statement 
holds in some branches of future states. For each branch of future states, the O operator as-serts that 
a statement holds for all states, and the <> operator asserts that a statement holds at some state. The 
> operator relate the temporal truth values of two predicates in a sentence. The ~ is a modified t> operator 
which additionally permits the two predicates to be true at the same instant. The knowledge predicate, 
location predicates, branching time temporal logic operators and operators from propositional logic (A, 
V, ~, D) form a language for the specification of learning behaviors of objects. For example, if we want 
to specify that object y does not know a fact P: (a fact that is known to z only), we may apply the V 
and D operators to the knowledge predicate ~K v P= to form a sentence VD~K v P~ which specifies that 
for all the branches of future states, ob- jects y does not know P,. If we want to specify that there 
exists some branch of future that object z knows the fact Pv, we may write BOKxPv. If we want to spec- 
ify that object z cannot obtain the knowledge of Pv from object y until object y obtains the knowledge 
P~ from z in all branches of future, we may specify it in a statement like V(KvP~ > IK~,Pv). As another 
exam- ple, we may use V(after learns(y) > K~Pv) to specify that for all branches of future, object x 
finishing learn- ing from object y has to be true at or before object z possesses the knowledge of P~,. 
 Verification of Learning The correctness of a statement about the learning be- haviors of objects can 
be verified by performing a proof procedure with the statement as input. The proof pro- cedure contains 
the following elements: axioms and inference rules of propositional logic. * axioms, inference rules, 
and theorems of branch- ing time temi~oral logic.. . axioms, lemmas, and theorems that describe the learning 
properties of objects. Axioms and inference rules of propositional logic [4] are useful in describing 
the fundamental properties of reasoning. For example, le~ wl,w2,..., w,~ be state- ments, the A-Introduction 
inference rule describes that Wl, w:,..., wn conclude wi A w2 A... A wn. Axioms, inference rules and 
theorems of branching time temporal logic form the basic tools to describe the temporal truth values 
of statements. As examples, consider the following temporal logic theorems [1, 2, 8]: TI: V(Wl b wl) 
~- VO-~wi r2: v( l A v( 2 w3) v(w > T3: V(Wlb W2) A V(W2 ~ w3) D V(wi b W3) T4:V(w2 t> wl) A VO-~w2 D 
VO~wl T1 specifies that for all branches of future, Wl can- not be true until after wl becomes true. 
The circular waiting condition implies that wl will not be true for all branches of future. T2 is a transitive 
property of the t> operator. It specifies that for all branches of future, if w2 cannot be true until 
after wl is true and w3 cannot be true until after w2 is true then w3 cannot be true until after wi is 
true. T3 is similar to T2 except w~ and w3 can be started to be true at the same time. TT4 specifies 
that if for all branches of future, wl cannot be true until w2 is true and w2 is never true, then wl 
will never be true. Axioms, lemmas, and theorems describing the gen- eral properties of how objects learn 
are given below. Let P~ be a fact that is known to object x only and Py be a fact that is known to object 
y only. Axiom i spec- ifies how the learning action improve the knowledge of an object z. Axiom 1/ An 
object z obtains the knowledge of a fact P~ only af- ter it has finished learning from object y. Learning 
can be conditional sometimes. An object wants to learn a fact may have to wait until a certain condition 
holds. Axiom 2 specifies how objects improve their knowledge when they try to learn from each other conditionally. 
 Axiom 2. at learns(y)A V(Ky.P~ I> K.Pv) :) V(KvPz !>" after learns(y)) Axiom 2 specifies that if object 
z wants to learn from object y and there is a condition that y has to know a fact, Px, from z before 
z knows the fact Pv, then y will ahvays know Pz before z finishes learning from y. When an object wants 
to learn a fact, it performs a learning action to gain the knowledge. The object will be performing the 
learning action as long as it has not obtain the knowledge about the fact that it wants to learn. Lemma 
1 describes this learning behavior. Lemma I. at learnz(y) A Vl2-~after learns(y) D VI2at learnz(y) Lemma 
1 specifies that if object z is learning a fact from object y and z never finishes learning, then z will 
continue to learn forever. The proof of this lemma is given in [8].The situation described by this lemma 
is called blocking which is defined as follow. Definition 1. blocked~(y) =_ X/Oat tearn~(y) An object 
can be blocked if it never finishes learning a fact from another object. The blocking of one object may 
cause another object to be blocked. Theorem 1 describes such a blocking property in learning. Theorem 
1. at learny(z) A V(KzPv I> KvP~) A bloeked~(y) D blocked~(z) Theorem I specifies that if object y wants 
to learn Pz from object z and the condition for learning is such that z has to know Pv before y can obtain 
the knowl- edge about Pz and when z is blocked, then y becomes blocked also. The proof of this theorem 
is also given in [8]. When objects are blocked in a learning pro- tess, the system becomes deadlocked 
which is defined as follow. Definition 2. deadlocked(z, y) -: blocked~(y) A bIockedy( z) If two knowledge 
objects are blocked when trying to learn from each other, then the system of objects are said to be deadlocked. 
  Example As an example to illustrate the application of our proof procedure, let us consider the property 
of deadlocked learning. A system will be deadlocked if all the objects want to learn from others but 
refuse to tell their facts first. Consider the case of two objects z and y. Prove that at tear~.(v) A 
V(KyP~ t~ K=Pv) ^ at tearnv(z) ^ V(K.Pv t> KvP=) D deadlocked(x, y) Proof: 1. at learn=(V)^ V(KvP= t> 
K=P~) Given 2. V(KvPr t> alter learn=(y)) 1,Axiom 2 3. ai learn=(y) Given  4. V(af*er learn=(y) t~ 
K=Pv) 3,Axiom 1 5. V(KvPz D after l,arn=(y))^ V(after learn=(y) t~ K=Pv) 2,4,A-Introduction 6. " V(KvP= 
i:> K=P~) 5,T3 7. at Iearnv(z)A V(KzP~ t> KvP= ) Given  S. V(KzPv ~ after learnv(x)) 7,Axiom 2 9. 
at Iearnv(z ) Given 10. V(after learnv(z ) ~ KvP= ) 9,Axiom I 11. V(K,Pv t> after lear~v(x))A Y(af*er 
learnv(z) ~ KvP= ) 8,10,A-Introduction 12. V(K=Py ~ KvP= ) ii,T3 13. V(KvPx I> K=P~)A V( K~P v I> KyP= 
) 6,12,A-Introduction 14. V(KvPz D KyP=) 13,T2  15. VO'~KvP= 14,T1 16. V(KvP= D after learn=(y))A VO-~KyP~ 
2,15,A-Introduction 17. VD-~afterlearrt=(y) 16,T4 18. at learnz(y)A YO-~a f ter lear,=(y) 3,17,A-Introduction 
 19. VOat learnt(y) 18,Lemma 1 20. blocked=(y) 19,Definition 1 21. a~t learnv(z)A Y(KzPv I> KyPz) A 
blockedz(y) 7,20,A-Introduction 22. blockedv(z ) 21,Theorem 1 23. blocked=(y) A blockedv(x) 20,22,A-Introduction 
24. deadlocked(z, y) 23,Definition 2 The above proof can be automated by applying a search strategy 
to the set of axioms, lemmas, theorems and definitions of propositional logic, branching time temporal 
logic and learning properties defined in the previous section. Conclusions The knowledge-based approach 
to software develop- ment has been demonstrated to be useful in system development. This paper introduces 
a formal method to specify and verify learning properties of objects: A proof procedure which can be 
automated is intro- duced. The technique outlined in this paper can be of value in formallyreasoning 
about systems which in- volve objects. References [1] M. Ben-Ari, Z. Manna, and A. Pnueli. The tempo- 
ral logic of branching time. In Conference Record of the 81h Annual ACM Symposium on Principles of Programming 
Languages, pages 164-176, 1981. [2] E. Clarke and E. Emerson. Characterizing proper- ties of parallel 
programs. In Proceedings of ~he 7th International Colloquium on Automata, Languages and Programming, 
LNCS 85, 1981. [3] R. Fagin, J...Halpern, and M. Vardi. What can machines know? On the properties of 
knowledge in distributed systems. Journal of ACM, 39(2):328-349, April 1992. [4] D. Gries. The Science 
of Programming. Springer-Verlag, 1983. [5] J. Halpern and Y. Moses. Knowledge and com-mon knowledge in 
a distributed environment. In proceedings of ~he 3rd A CM Symposium on Princi- ples of Distributed Computing, 
pages 50-61, 1984. a revised version apoears as IBM RJ 4421. [6] J. Italpern and L. Zuck. A little knowledge 
goes a long way: knowledge-based derivations and cor- rectness proofs for a family of protocols. Journal 
o.fACM, 39(3):449-479, July 1992. [7] D. Tsichritzis. Object world. In D. Tsichritzis, ed- itor, Office 
Automation, pages 379-398. Springer- Verlag, 1985. [8] Ka-Wing Wong. An Active Message System. PhD thesis, 
Kansas State, University, 1990. [9] Ka-Wing Wong. Kn0wledge-based OOA and OOD. In Proceedings of the 
1994 Annual CSC Confer- ence, 1994. 
			