
 COMPUTABLE QUERIES FOR RELATIONAL DATA BASES (Preliminary Report) Ashok K. Chandra and David Harel IBM 
Thomas J. Watson Research Center P. O. Box 218 Yorktown Heights, N. Y, 10598 Abstract The concept of 
a "reasonable" query in a relational data base is investigated. We provide an abstract characterization 
of the class of queries which are computable, and define the com-pleteness of a query language as the 
property of being precisely powerful enough to express the queries in this class. Our main result is 
the completeness of a simple programming language which can be thought of as consisting of the relational 
algebra augmented with the power of iteration. 1. Introduction The relational model of data bases, introduced 
by Codd [C1,C2] is attracting increasing attention lately [ABU, ASU, AU, B, BFH, CM, P]. One of the significant 
virtues of the relational approach is that, besides lending itself readily to investigations of a mathematical 
nature, its modelling of real data bases is quite honest. And so, theoretical results in the area are 
often of imme- diate practical value. One of the central themes of research in relational data bases 
is the investigation of query languages. A query language is a well-defined linguistic tool, the expressions 
of which correspond to requests one might want to make to a data base. With each such request, or query, 
there is associated a response, or answer. For example, in a data base which involves information about 
the personnel of some company, a reasonable query is the one with which the names and addresses of all 
employees earning over $15,000 a year is associated as an answer. A large portion of the work done on 
query languages involves the first order relational calculus (or its closely related relational algebra, 
cf. [ABU, B, CM, C2, P]). Besides the fact that this language resembles conventional predicate calculus 
and, as such, is known and is easy to comprehend, it seems that one of the reasons for this phenomenon 
is rooted in the choice made by Codd [C2]. There, one version of this calculus is taken as the canonical 
query language, to the point of terming any other lan- guage having at least its power of expression 
- complete. In a recent paper, Bancilhon [B] questions this particular choice and voices the opinion 
that a universal class of queries should be defined, and its choice justified, independently of any language 
considerations. The term completeness, if adopted, then becomes appropriate; if indeed a reasonable set 
of queries is chosen, a language expressing the queries in that set could con-ceivably be called a complete 
one. The motivation of the present paper is that of [B]. In Section 2 relational data bases and queries 
are defined, and a class of queries, which we call computable, is identified. These are those queries 
which, when regarded as functions acting on data bases, are partially recursive and which furthermore 
are consistent with the data bases they operate on in the sense that they preserve isomorphisms betweenthese 
data bases. In Section 3 we introduce the general notion of a query language and define the properties 
of boundedness, expressiveness and completeness. The rest of that section is devoted to the intro- duction 
and comparison of the other two definitions of complete- ness appearing in the literature, namely those 
of [C2] and [B]. Section 4 contains our proposed query language QL. In Section 5 the main result, i.e. 
the completeness of QL, is proved, and in Section 6 we provide a generalization of the simple basic model, 
and the appropriate generalized version of the main result. The nontrivial part of the proof of the theorem 
is in showing that a program in QL can reconstruct a data base up to isomorphism by computing its set 
of automorphisms, and then, from this set, generate the desired output. One can view the language QL 
as being essentially the iterative programming language obtained by taking the fight-hand side of assignment 
statements to be expressions in a simple ver- sion of the relational algebra. Alternatively, it will 
become appar- ent that our language can be simulated by the relational algebra augmented with a least-fixpoint 
operator, as suggested in [AU]. 309  &#38;#169; 1979 ACM 0-89791-003-6/79/0400-309 $00.75 See page 
ii 2. Data Base Queries 3. Query Languages and Their Completeness. Let U be a fixed countable set, called 
the universal domain. Let D c U be finite and let R) ..... R k for k>0, be rela- tions such that, for 
all i, RicD ai. B = (D,Ri,_.,Rk) is called a relational data base of type a (or data base for short), 
where a = (al,..,ak). R i is said to be of rank a i ; D is called the domain of B and is also written 
D(B). Two data bases of type a, B = (D,Ri,...,Rk) and B ~ = (Dt,Rlr,...,Ri ~) are said to be isomorphic 
by isomorphism h, (or h-isomorphic) written B~-h-~B r, if h:D--D t is an isomorphism and h(Ri) = Ri r 
for all i. An important special case is when B = B r. If B4-h~B then h is an automorphism on B. A data 
base query of type a (or query for short) is a partial function giving, for each data base B of type 
a, an output (if any) which is a relation over D(B). Formally, .with -.-~ denoting partial, Q:{BIBa data 
base of type a }-.-,.Uz l'JJ" i where, if Q(B) is defined, Q(B)cD(B) j for some j. A query Q is said 
to be computable if Q is partial recursive and satisfies the following consistency criterion: if B~h--B 
r then Q(B ~) = h(Q(B)) i.e. Q preserves isomorphism. The set of computable queries satisfies the principles 
postulated in [AU], namely, that the result of a query should be independent of the representation of 
the data in a data base and should treat the elements of the data base as uninterpreted ob-jects. Also, 
we will see in Section 3 that our consistency criterion is the appropriate generalization of the condition 
appearing in [B, P]. There, the outcome of a query Q (which is the subject matter of [B, P], not the 
query itself as a function) is to have the proper- ty that it cannot distinguish between tuples which 
are "equivalent" as far as the data base B is concerned. In other words, if B~h--B, then (d 1 ..... d 
j)E Q(B) iff (h(d 1 ),.-.,h(dj)) ¢ Q(B). Although our constraints on a computable query seem to be necessary 
for it to be "reasonable" it is not intuitively clear whether or not additional ones are also called 
for. However, we wish to enforce our belief in the sufficiency of these constraints, and hence to substantiate 
our argument that the set of computable queries plays a role in relational data bases analogous to the 
role played by the set of partial recursive functions in the framework of sets of natural numbers. Accordingly, 
in Section 4 we define an operationally computable data base query language and show that it computes 
precisely the set of computable queries. Now that we have defined data bases, queries and com- putable 
queries, we can turn to the question of designing lan- guages for expressing queries. We will think 
of a query language as consisting of a set L of expressions and a meaning function M, such that for any 
EEL and for any data base B, the meaning of E in B, denoted by ME(B), is either undefined, or is a relation 
over D(B). Throughout, for convenience, we assume that for any data base B each query language has at 
least one expression E for which ME(B) is undefined. (This can be achieved, e.g., by letting the meaning 
of an expression referring to more relations than the data base has, be undefined.) As examples of query 
languages one might consider the relational algebra and (first-order) relational calculus of Codd [C2]. 
Using the definitions appearing in [P] and [B] respectively, the following are expressions in these languages: 
(1) ((Ri u R2) × R3)(2=5), (2) (Rl(Xl,x2)VR2(xl,x2)) A R3(x3,x4,Xs) A x 2 = x 5.  Given a data base 
B = (D,Ri,R2,R 3) of type (2,2,3), the meaning of both these expressions is the relation consisting of 
all 5-tuples over D whose first two components are a pair in either R 1 or R2, whose last three components 
are a tuple in R 3 and whose second and fifth components are equal (i.e. the same ele-ment of D). We 
do not further define these languages here. Definition: An expression E in a query language expresses 
the query Q of type a if for each data base of type a, either both ME(B) and Q(B) are undefined or else 
ME(B) = Q(B). We write (¥B) (ME(B) -= Q(B)), where B is understood to range over data bases of type a. 
 Definition: A query language is bounded if its expressions express computable queries only. It is expressive 
if every computable query is expressed by some expression. A query language is complete if it is both 
bounded and expressive, i.e. it expresses exactly the set of computable queries. Our notations for boundedness 
and expressiveness, respec- tively, are (*) (Va) (rE) (]Q) (VB)(ME(B)~Q(B)) (Va) (VQ) (]E)(VB)(ME(B)---Q(B)) 
 where E ranges over expressions in the language and Q and B, respectively, range over computable queries 
and data bases of type a. There have been two other definitions of completeness in the literature, both 
of which turn out to be, in a sense, strictly weaker than ours. Definition (Codd [C2]): A query language 
is C-bounded if it is no more expressive than the relational calculus, it is C-expressive if it is at 
least as strong in expressive power as the relational calculus, and it is C-complete if it is both C-bounded 
and C-expressive. Codd used the term "complete" for our C-expressive. We have taken the liberty, here 
and below, of renaming notions to be more consistent with our terminology. Codd [C] showed that the relational 
algebra is C-expressive (it is in fact C-complete also). Aho and Ullman [AU] have shown, however, that 
there are computable queries which are not expressible in the relational calculus or algebra. Consider 
the query transitive closure of type a=(2), defined as TC(B)=R* for B=(D,R), where R is a binary relation 
over D and R* is its reflexive and transitive closure. 17~eorem 3.1 (Aho and Ullman [AU]): There is no 
expression in Codd's relational algebra which expresses the query TC. Observing that TC is a computable 
query we can conclude Corollary 3.2: Neither the relational algebra nor the relational calculus are expressive 
(or complete). If a query language is C-bounded it is also"bounded but not necessarily vice versa. Likewise, 
an expressive query language is also C-expressive but not vice versa. See fig. 1. In order to introduce 
the second definition, taken from Bancilhon [B], we define, for a data base B, the set of relations 
consistent with it in the sense of the previous section. Define: I B = {R I ReD(B) m for some m, and 
whenever B~h-~B, R= h(R)} / Definition (Bancilhon [B]; see also Paredaens [P]): A query lan- guage is 
BP-bounded if for every data base B and expression E, either ME(B) is undefined or there is an REI a 
such that ME(B) =" R. It is BP-expressive if for every data base B and for every REI B there is an expression 
E such that MB(E) = R. A query language is BP-complete if it is both BP-bounded and BP- expressive. Bancilhon 
[B] and Paredaens [P] proved, respectively, that the relational calculus and relational algebra are BP-complete. 
(It has been pointed out to us by L. Marcus that these results follow quite easily from known facts in 
model theory. Bancilhon's result, in that framework, states that a relation is first-order definable 
in a finite structure iff it is invadant under the automorphisms of that structure.) Bancilhon used the 
word "complete" for our BP-expressiveness. Paredaens, on the other hand, did not use the term completeness 
at all, but rather regarded his result as a char- acterization of the power of the relational algebra 
to express relations. In order to better see the connection with our defini-tion, we show: Lemma 3.3: 
A query language is BP-complete iff, using the nota- tion of (*), (**) (Va)(VE) (VB)OQ)(ME(B)mQ(B)), 
and (Va)(¥Q)(VB)(3E)(ME(B)---Q(B)) The first line asserting BP-boundedness and the second BP- expressiveness. 
Proof: We prove that the second line asserts BP-expressiveness. The proof of the other claim is similar. 
Assume L is BP- expressive and let Q and B be a computable query and a data base, respectively, of type 
a. By the definition of a computable query Q(B) is either undefined or is in I a. In the former case 
take E to be an expression such that ME(B ) is undefined, and in the latter take E to be the expression 
existing by the assumption. Conversely, assume (**) and let REI B for some data base B of type a. Define 
the query Q of type a as ~h(R) if h is a function such that B~-h-,-B ' Q(B') = (undefined if B and B' 
are non-isomorphic  It can be shown that this definition is sound; in particular if h I ! B~Ia-~B r 
and B~- -~B , then h(R) = h'(R). Clearly, Q is a computable query with R=Q(B) and by (**) there is an 
E such that ME(B) =Q(B) =R.[] Comparing (*) with (**), BP-completeness can be seen to be a measure of 
the power of a language to express relations (as nicely captured by the title of [P]) and not of its 
power to express functions having relations as outputs, i.e. queries. The notion of BP-boundedness is 
not restrictive enough for queries, in that a query language can contain expressions that are not partial 
reeursive and still be BP-bounded. For example, the relational calculus augmented with the expression 
E 0, whose meaning is given by I ~0 if the k-th Turing Machine halts on input k, ME0(B) = ~ where k = 
I D(B) I {0} otherwise ME0 is not partial recursive but the language is BP-bounded. Also, the notion 
of BP-expressiveness is fairly weak for queries. One can define a query language, each expression of 
which has the property that its meaning is defined only for data bases of some fixed size. This language 
will clearly be neither expressive nor C-expressive, but can be made to be BP-expressive. For example, 
consider expressions of the form (E,k), where E is an expression of the relational calculus and k_>0, 
with meaning given by ~ME(B) if k= I D(B) I M(E'k)(B) ---- {undefined otherwise If a query language is 
bounded it is also BP-bounded but not vice versa, and if a query language is expressive it is also BP-expressive 
but not vice versa. See fig. 1. Our choice of a stronger notion of completeness cannot' be justified 
solely on the basis of it apparently being a more natural one for queries (as opposed to relations), 
but must be accompa- nied by a feasibly "computable" language which is indeed com-plete in our sense. 
Before presenting such a language, we refer the reader to [AU] in which it is suggested that the defi6iency 
of the relational algebra as expressed in Theorem 3.1 be remedied by augmenting that language with a 
least-fixpoint operator on mono- tonic functionals over relations. Our results in the present paper can 
be viewed as justifying this approach; it will turn out that an appropriate way of carrying out the suggestion 
of [AU] indeed results in a complete language. C-bounded bounded ~ BP-bounded ~ C-expressive expressive 
BP-expressive C-complete J complete BP-eomplete Fig. 1. 4. The Query Language QL. The language we define 
(QL) is essentially a programming language computing finite relations over some domain. Its access to 
a given data base however, is only through a restricted set of operations: equality, complementation, 
intersection, a test for emptiness and primitive versions of projection and cartesian prod- uct. The 
ability to simulate arbitrary Turing machines is an im-portant consequence of this choice. Let us now 
define QL more formally. Syntax: yl,y 2 .... are variables in QL. The set of terms of QL is defined inductively 
as follows: (1) E is a term, and for i>_ 1, rel i and Yi are terms. (2) For any terms e and e t, ene', 
~e, e,~, e÷ and e ~ are terms.  The set of programs of QL is defined inductively as fol-÷ : EXi-*-EXi+i, 
projecting in on the right, is given by lows: (1) yi~-e is a program for a term e and i_>l. (2) For 
programs P and pr (P; P'), if t then P else P', and while t do P are programs, where t is Yi for some 
i> 1. Semantics: Assume given a data base B = (D,R!,..,R k) of type a = (a I ..... ak). Expressions 
of QL take on values as relations over D=D(B). For technical reasons it will be convenient to associate 
a rank, rank(e), with each term e, forcing us to distinguish between empty relations of various ranks. 
Thus, if rank(e)=i, i>_0, then e is either a nonempty subset of D i or the empty set of rank i, ¢i. For 
example, there are precisely two relations of rank 0, ~0 and {()}. Denote by EX i the set of all relations 
over D of rank i, in the above sense. The expression E, equality, is a fixed relation of rank 2 given 
byE = {(d,d) ld~D}. The value of rel i is given by R i i<k rel i = ¢0 i>k and is thus either of rank 
a i or of rank 0. n is a binary operator on relations having the standard value (intersection) when both 
its arguments are of rank i (¢i if the intersection is empty) and ¢0 otherwise. ~, ¢, ÷, and ~ are unary 
operators on relations acting as follows: : EXi--EXi, complementation, is given by D i-e e#D i, rank(e) 
= i ,e = [¢i e=D i +: EXit EXi'-I, Projecting out first coordinate, is given by rank(e) = i, i>l, e#¢ 
rank(e) = 1, e#¢ t e=ff i+l f {(d2,...,di) I (d ..... d i) e e} rank(e) = 0 i f {(d I ..... di,d) l(deD,(dl,.,di)¢e} 
rank(e)=i,l_>l,e#q~ e+ =~{(d) JdED} e={O} ~dp i+l e = ¢i (Note that in fact {()} ¢ = E+.) ~:EX i- EXi, 
exchanging the two rightmost coordinates, is given by { (dl ..... dn_2,dn,dn_ l)l(dl ..... dn)~e} rank(e)>l 
e~ = rank(e)_< 1 Programs in QL act in the obvious way; all variables are initialized to ~0, and the 
test Yi in the if then else and while do constructs is true iff the value of Yi is empty, i.e. ~J for 
some j. Given a program P and a data base B the value of P in B, Mp(B), or P(B) for convenience, is undefined 
if P does not termi- nate, and is otherwise defined to be the value of the variable Yl upon termination. 
(If Yl has the value e~ i then the output is the empty set; empty sets are not typed as far as the output 
behavior of queries and programs is concerned.) Given a query Q of type a, we now know what it means 
for a program P to express Q. P expresses Q (we will also say computes Q) if for every data base of type 
a, P(B)_=Q(B), i.e. either P(B) and Q(B) are both unde- fined or P(B)=Q(B). Our main result, to be proved 
in the next section is: Tl~w'em 4.1. QL is complete. Before embark!rig on the proof we show how several 
conventional operations on relations are expressible in QL. Ob-serve first that in effect we have counters. 
I=E+ +, which is {()}, plays the role of 0, and if e plays the role of the natural number i then e+ and 
e+ play, respectively, the roles of i+l and i-1. (Counters need never attempt to subtract 1 from 0.) 
Testing whether e is "equal" to 0 is accomplished by testing e+ for empti- ness. Note that this gives 
QL the power of general Turing ma-chines (cf. [HU]). Hence in the sequel, besides using n,m.., in programming 
to denote natural numbers, we will freely use Turing machine terminology. At this point the reader should 
also be convinced that we can simulate the test "non-empty" in the if and while constructs. Denote "Yi 
non-empty" by Yi" where for all 1 <_ j <_ p, ij _< rank(e) = m. In order to do this, observe Now we 
show how to compute, in n, the value rank(e): that, denoting E+(÷ i) by D i, if .e then fl 1 o ~e else 
y I o e; no0 ; while Yl do (YlOyl+ ; non + 1); non-l; Define e(÷~) n to be the value of Y2 in the program 
Y2oe ; while n#0 do y2o((y2÷)~); in other words e(÷~) n is e with n columns projected in to the left 
of the rightmost column. (We will use similar notations for single connectives, e.g. e(÷n).) Now, we 
can project in on the left of a relation, an opera- tion we denote by e+: Yl oe+; n~-rank(e) ; _ _rank(e) 
while n#0 do (y2~-E(+ ~) Yl o (Yl÷nY2)+; non-l)  Projecting out the last (fightmost) coordinate, denoted 
by e+, is similar and is left to the reader. We can now compute the cartesian product of two rela-tions: 
e I xe 2 = {(d 1 .....drank(el),bl,...,brank(e2)) [ (d l,...,drank(el)) E el and (bl,...,b rank(e2)) 
E e2} This is done by: o(e ( ÷ rank(e2))Ne ( ~'rank(el))) Yl 1 2 " We denote -(~e I n -e2) by e I ue 
2, and call it the union of el and e 2. It should be clear that one can also compute the general- ized 
projection of e, e[il,...,ip I = {(dil,...,dip) [ (d I ..... dm)~e} e[iv...,ip] = N (Dij- 1 x E( + ~)rank(e)-ij+j-1 
x DP-J))(+rank(e)) l<j<p ((exDP)n We leave the programming to the reader. As an example of a naturally 
arising query, consider again the transitive closure. The following program computes TC: yl~-E ; Y2orell 
; Y3oEuY2 ; y4o.E n Y2 ; while j7 4 do (Yl °Y3; Y3°Y3 u (((Y3 xY2)n E( ÷ ~)2 )[1,4]); Y4O-YlnY3 ) It 
is clear that the ÷, 4, and ~ operators can be replaced by cartesian product and generalized projections. 
Thus, the read- er might want to regard our language QL as being, in a sense, the "closure" of the relational 
algebra under sequencing and iteration, with the ability to test for emptiness. Also, the reader familiar 
with Aho and Ullman's [AU] independent work on the power of query languages, will be able to see that 
their suggestion of aug- menting the relational algebra with least fixpoints gives rise to a complete 
language. This follows from Theorem 4 of [AU] and the (easily checked) fact that the language described 
in section 7.2 of [AU] is as powerful as QL. In Section 6 of the present paper an extension of the model 
of a data-base is given, with the aid of which one can specify predicates which are to be "preserved 
by the renamings" in the sense of [AU], and still have a complete query language. We can now turn to 
the proof of Theorem 4.1. 5. Proof of Theorem 4.1. It is straightforward to show that QL is bounded: 
given a program P and query Q of type a such that P computes Q, it is obvious that Q is partial recursive. 
Furthermore, to see that Q preserves isomorphism, consider the simultaneous behaviors of P on two h-isomorphic 
data bases B and B ~ of type a. One can easily show that all expressions of QL preserve isomorphism. 
(E.g. if e I and e 2 are, respectively, h-isomorphic to el t and e2 ~, 314  then e 1 ne 2 is h-isomorphic 
to el'ne2~.) Also, if e and e ~ are h-isomorphic then e is empty iff e ~ is. Hence, tests evaluate to 
the same truth values in both computations and it is clear, there- fore, that P(B) is defined iff P(B 
p) is, and that if defined P(B) and P(B') are h-isomorphic.t Turning to the other direction, i.e. expressiveness, 
let Q be a computable query of type a = (al,...,ak). We will describe the construction of a program PQ 
such that PQ computes Q. The computation of PQ, given an input data base B of type a, will consist of 
the following four main steps: (1) Compute the set of automorphisms of B. (2) Compute an internal, "model" 
data base B N isomorphic to B. (3) Compute Q(BN) using the Turing machine capability. (4) Compute Q(B) 
from Q(BN) using the set of automor- phisms.  In order to be able to spell out this process more precisely 
and show how to program it in QL, we will be needing some additional notation. Let B = (D,Rp..,R k) be 
a data base of type a. Let n= I D I, and denote by perm(D) the n-ary relation over D consisting of all 
permutations of the n elements of D. Now, let d = (d 1 ..... dn) be some tuple ofperm(D). For ReD r denote 
by R/d the index set {01 ..... ir) l (dil,...,dir) E R}- We note that two different elements, d and 
d ~, of perm(D) may have the same index set. Accordingly, define d~R dr iff R/d = R/d ~. It is clear 
that ~R is an equivalence relation. The equivalence class of d with respect to ~R will be called (following 
[P]) the cogroup of R via d: CGd(R) = {d' IdtEperm(D) A d~Rd'} = {(da(1),...,da(n )) I a is a permutation 
of {1 ..... n} and R = {(da(i0,...,da(ir))l(dil,...,dir)ER}} Observe that CGd(R)/d gives the indices 
corresponding to the permutations of D which preserve R. Also, note that dE CGd(R). Example: Let d = 
(dl,d2,d3,d4)and R = {(dl,d2),(d2,dl),(d3,d3),(d4,d4)}. Then R/d = {(1,2),(2,1),(3,3),(4,4)] and CGd(R)/d 
= {(1,2,3,4), (2,1,3,4), (1,2,4,3), (2,1,4,3)}. Now, for our data base B = (D,Ri,...,Rk) let CGd a abbre-viate 
n CGd(Ri). Certainly CGdBcperm(D), and CG~/d can be l<i<k thought of as representing the set of automorphisms 
of D relative to the ordering d, which preserve the relations of B. Here too, note that d ¢ CG~. Let 
us now give a more precise desription of the four steps of the computation of PQ on input B. (Describing 
how to program these steps in QL will be done below.) (1) Compute CG~ for some dEperm(D). (CG~ is an 
n-ary relation over D.) (2) Compute and "store on tape" the tuple of sets  B N = ({1,2,...,n}, R1/d,...,Rk/d) 
(Each Ri/d is an' a i - ary relation over { 1,2,...,n}.) (3) Compute, using the Turing machine capability, 
the value Q(B N) of the given function Q applied to the argument B N. (Q(BN) is an m-ary relation over 
{ 1,2,...,n].) (4) Compute (in Yl)  S m U (CGdB)[jl,...,jm ]" (J l"'."Jm ) E Q(B N) (S is an m-ary 
relation over D.) Step 3 makes the execution of PQ depend on the given computa- ble query Q. The fact 
that Q is partial recursive is what enables the "Turing machine part" of QL to carry out this step, and 
the fact that Q preserves isomorphism will be essential in establishing that S=Q(B). Note that if Q(BN) 
is undefined the Turing ma- chine will not halt and PQ(B) will be undefined too. ILemma 5.1: Q(B)eS, 
where S is as described above. Proof: We will show that in fact Q(B) corresponds to a very "small" part 
of S, namely that part obtained by replacing the relation CG~ in the definition of S by the singleton 
{(d I ..... dn)}, a subrelation of CG~. Indeed, we now show that t This argument is analogous to theorem 
1 of [B] and lemma 2 of Q(B) = {(djl ..... dim) l(Jl ..... jm)EQ(BN) }. [P] in which, respectively the 
constructs of Codd's [C2] relational calculus and algebra were shown to preserve isomorphism. First, 
observe that BN~-h~B, where for 1_<iS n, h(i) = d i. This 315 follows immediately from the definition 
of R/d. Hence, Q being a computable query, we must have Q(BN)--h--Q(B), or h(Q(BN)) = Q(B), which is 
precisely what was required. [] Lemma 5.2: ScQ(B), where S is as described above. Proof: Let s = (Sl,...,Sm)ES. 
Then there is (jl,...,jm)¢Q(BN) and (da(l),....,da(n))E CGd B, such that for 1 _<i<m, s i = da(ji ). 
We show that (d,(il),...,da(jm))¢ Q(B). Note that, by definition of CGdB B~-~'-~B, where ar(di) = da(i). 
It follows that a'(Q(B)) = Q(B) or that (djl ...... dim) E Q(B) iff (da(jl),...,da(jm)) ¢ Q(B). But (Jl,"',Jm) 
being in Q(BN) by as- sumption, implies (djl,...,djm) e Q(B) by the characterization of Q(B) in the proof 
of Lemma 5.1. [] The way in which CG~ is computed, for some dEperm(D), is by utilizing the Turing machine 
power of QL to cycle through all possible choices of a set {Xl,...,Xk} where, for each i, XicN ai. For 
each such choice the following program is executed (assuming for the moment that we can compute if): 
Y3~-perrn(D) for all l <_i_<kdo y3~-q.,(Y3,ai,Ri,Xi). and upon its completion Y3 is tested for emptiness. 
It is easy to see that Y3 is nonempty (i.e. Vj,Y3#~ j) iff for some d¢perm(D), X i = Ri/d for every 1 
<i<k. In fact, Y3 will then have the value (...((perm(D) n CGd(R 1 )) n CGd(R2)) n ..... n CGd(Rk)) = 
CGdB. Hence we have established that the above four steps, if executable, correctly compute Q(B). We 
now set out to show how (1) -(4) can be programmed in QL. We first show how to compute perm(D) in some 
variable, say Y2, and simultaneously compute n= I D I in a "numerical" variable n. For any expression 
e and l_<i<j<rank(e), denote by e(i#j ) the expression e o -~ (D i- ! x E( ÷ ) (j-i- 1) x D rank(e) -i) 
(The same expression, but without the "~", is denoted e(i=j)). Denote by e(#) the relation obtained by 
executing (*) y~-e; for all 1 _<i<j_<rank(e) do Y~'Y(i#j) where y is a suitable fresh variable. Certainly 
(*) is programma- ble in QL. pectin(D) and n are now calculated by n ~-0; y2 ~-E ,~ ; while Y2 do (y3~-Y2÷ 
; y2--Y3(#) ; non + 1) ; y2~Y3+. We now show how to calculate CG~ in QL, for some deperm(D). Let Nf{1,2,...,n}. 
Consider the function tk(V,r,R,X), where Vcperm(D), ReD r and XeN r, defined as follows: {¢r VdEV, X#R/d 
tk(V,r,R,X) = CGd(R)nV X=R/d, dEV Moreover, cycling through all possibilities of {X 1 ..... Xk} must 
result in our falling upon a nonempty Y3" Note that the "successful" set {Xp...,Xk} is that required 
in step (2) of the computation of PQ, so that it can be essentially stored on tape and used for step 
(3). Turning now to ,/,, given V and R as relations, the follow- ing program computes ~k(V,r,R,X) in 
Y3 (As earlier, the reader should convince himself that (**) can be rewritten precisely in QL.) (**) 
y3~-V ; for all (i 1 ..... i r) ¢ N r do (if (il,...,ir)EX then y4~-RxY3 else y4~ ~R×Y3; forall l<_j_<r 
do y4~Y4(j=r+ij); y3 ~-y4(+ r)) For each element of X (respectively of ~X), (**) eliminates from V all 
permutations with which no tuple of R (respectively of ~R) is consistent. Denote by T the final value 
of Y3 in (**). Noting that TcV, we now prove the following two lemmas which serve to establish the validity 
of (**): ILemma 5.3: If X#R/d for every dEV, then T=,~. Proof: Let d = (dl,...,dn)~T. We show that X=R/d. 
Let (i 1 ..... ir) ¢ X. We have to show (i 1 ..... i r) ¢ R/d, or equivalently (dil,...,dir) ER. In order 
to be in T, d had to "survive" each execu- tion of the body of the main loop of (**). In particular, 
d had to be left in Y4, concatenated with some element (da(1),...,da(r)) of R, and such that for all 
1 <j_<r, da(j) = dij. But this implies (dil,...,dir) E R. Conversely, let (i! ,..,ir) E R/d, or (dil,...,dir) 
E R. Using a similar argument, if (il,..,ir)¢X, then d would have survived the inner loop of (**) with 
the given (i 1 ..... ir), from which it would follow that (dil,...,dir)¢R. [] Lemma 5.4: If X=R/d and 
d¢V then CGd(R)nV= T. Proof: Assuming that X=R/d for some d = (dl,...,dn)eV, we first let d r = (da(1),...,da(n))ET 
and show that d~R dr. By our assump- tion we need only show that X = R/d r. Indeed, if (i 1 ..... ir)eX 
then the appropriate inner loop of (**) with (i! ..... ir) would have eliminated d r from Y4 if it were 
not the case that (da(il),...,da(ir)) E R. But this implies that (il,...,ir) E R/d r. Con- versely, if 
(i 1,...,i r) ~ R/d r then (da(i~),...,da(ir)) E R, and similarly, if (i 1 ..... i r) ¢X then we would 
have eliminated d r in the inner loop of (**) with (i 1 ..... it). For the other direction, let R/d r 
= X. We have to show that dr c T. The reader should be able to use arguments similar to the previous 
ones in order to show that if d ~ was eliminated in a "positive" inner loop, i.e. where (i 1,...,ir) 
¢ X, then (i I ..... ir)¢R/d r, and if d r was eliminated in a "negative" one, i.e. where (i l,..,ir) 
¢X, then (il ,...,ir)e R/d r, in both cases a contradic- tion to X=R/d. [] To complete the proof of Theorem4.1, 
note that S of step (4) in the computation of PQ is easily programmed in QL using the computed CGd B 
and the programs described earlier for the union and generalized projection operators. 6. Extensions 
When relational data bases are used in practice, several operations outside the formal relational framework 
are useful. Consider the query "sum the salaries of all employees." Answer-ing this query requires the 
ability to recognize numbers in the data base, to add, and to produce a number as output. Or consider 
the query "what is the length of the longest name of a department." Answering this query requires a length 
operator on strings. The problem with these additional operations is that their results can be in a potentially 
infinite domain. We abstract the essence of these additional operations to produce the set of extended 
queries as follows. In addition to the universal domain U, there is another countable, enumerable domain 
F = {f0,fl,f2,...}, where Fn U = ~. F is intended to include interpreted features such as numbers, strings 
(if needed), etc. An extended data base B = (D,Ri,...,Rk, S I ..... Sm) has a finite domain DcU, finite 
relations R i, and operations Si:Dbi-~F which serve to connect the "uninterpreted" domain D to the interpreted 
domain F. Thus the requirement FnU = e~ is not restrictive since if overlap is needed, F could contain 
a "copy" which is obtainedby applying on S i of rank 1 performing the "identity" operation. The rank 
a i of rela- tion R i is (not a natural number but) a finite 0,1 sequence, with RiCZai where Zai is defined 
recursively as follows: Z x = {0], Z0c = DXZc, Zlc = FxZ c. The type of B is (a I ..... ak,b 1 ..... 
bin). Two extended data bases B = (D,R 1 ..... Si,...) and B' = (Dt,Rlr,...,Slt,...) of the same type 
are said to be isomorphic by isomorphism h (or h-isomorphic, B~-I~-~B r) if h:D-~D r is an isomorphism 
and for all i, h(R i) = Ri t (where h is extended to be the identity function on F) and h(Si) = Si ~ 
(where S i is treated as a relation for purposes of applying h). An extended data base query of type 
a (extended query for short) is a partial function Q:{BIB a data base of type a }-'-U ~z¢ g where, if 
Q(B) is defined, Q(B)cZ c for some c and, Q(B) is finite. An extended query is said to be computable 
if it is partial recursiv¢ and satisfies the following consistency criterion: if B~h~B ' then Q(B') = 
h(Q(B)). The query "sum the salaries of all employees" can be modeled as follows. B=(D, R) where D is 
the set of employee names, F = {0,1,2,...}, and RcDxF is of rank 01 and associates salaries with names. 
The desired query has output { i} and is a (x,i) ~R computable extended query. The same query could 
also have been modeled by a data base B=(D,R,S) where D is the set of employee names and salaries (tagged 
to make them disjoint from F), F = {0,1,2,...}, RcDxD is of rank 00 and associates salaries with names, 
and S:D-*F maps salaries in D to the corresponding values in F. The desired query has output { E S(i)} 
and is a (x,i) ~ R computable extended query. In this data base, the query "output the names of people 
who make the highest salary" has output {x[3i, (x,i) ER A S(i) = gax{S(j) [ (x,j)¢R} } and is also a 
computable extended query. An example in which S is not used merely for providing "copies" of elements 
of D, is the query "length of the longest name of a department" in which S:D~F might associate with each 
department name, viewed as a string of characters, its length. We define an extended query language 
(EQL) consisting of the same constructs as those in QL with the extension that a term can also have the 
forms Si(Yj) and fYi" The semantics of EQL is the appropriate extension to that of QL. Values of varia- 
bles have ranks in {0,1]*, variables are initialized to q x, and ~e has value Zc-e where e has rank c. 
The new term fYi has value {(fk)} if Yi has rank O k, and has value ,~h otherwise. Si(Yj) has value {Si(x 
1 ..... x m) I (x I ..... Xm)Cy j} if yj has rank 0 m and b i = m, and has value ~h otherwise. T/~orem6.I.EQL 
is complete in the extended sense, i.e., the set of queries computed by programs in EQL is precisely 
the set of extended computable queries. The theorem is proved essentially the same way as was Theorem4.1, 
but here, computing rank(e) (say as a string in {f0,fl}*) is slightly more complicated. Also, the program 
will compute, on its Turing machine tape, the set of all elements in F which are either in the Ri's, 
or are reachable from D via the Si's. We leave the details of this proof, as well as additional generaliza- 
tions of Theorem4.1, to an extended version of the paper. Acknowledgement: We are grateful for the superb 
typing assistance of Marcia Bollard. RefeFenc~; [ABU] Aho, A. V., C. Beeri and J. D. Ullman. The Theory 
of Joins in Relational Data Bases. Proceedings 18th IEEE Syrup. on Foundations of Computer Science. Providence, 
R.I., Oct. 1977. [ASU] Aho, A. V., Y. Sagiv and J. D. Ullman. Equivalences Among Relational Expressions. 
SIAM J. Computing, 1978. [AU] Aho, A. V. and J. D. Ullman. Universality of Data Re- trieval Languages. 
Proceedings 6th ACM Syrup. on Prin- ciples of Programming Languages. San-Antonio, TX, Jan. 1979. [B] 
Bancilhon, F. On the Completeness of Query Languages for Relational Data Bases. Proceedings 7th Symp. 
on Mathematical Foundations of Computer Science. Zako-pane, Poland. (Springer-Verlag Lecture Notes in 
Comput- er Science.) Sept. 1978. [BFH] Beeri, C., R. Fagin and J. H. Howard. A Complete Axio- matization 
for Functional and Multivalued Dependencies. IBM San Jose Research Report RJ 1977, [CM] Chandra, A. K. 
and P. M. Merlin. Optimal Implementa- tion of Conjunctive Queries in Relational Data Bases. Proceedings 
9th ACM Syrup. on Theory of Computing. Boulder, CO, May 1977. [C1] Codd, E. F. A Relational Model for 
Large Shared Data Bases. Communications of the ACM, Vol. 13, No. 6. June 1970. [C2] Codd, E. F. Relational 
Completeness of Data Base Sub- languages. In Data Base Systems (Rustin, Ed.), Prentice Hall, 1972. [HU] 
Hopcroft, J. E. and J. D. Ullman. Formal Languages and their Relation to Automata. Addison-Wesley, Reading, 
MA, 1969. [P] Paredaens, J. On the Expressive Power of the Relational Algebra. Information Processing 
Letters, Vol. 7, No. 2, Feb. 1978.  
			