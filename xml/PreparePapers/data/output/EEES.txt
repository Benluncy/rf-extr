
 EEES: The "Hanhattan Project" for Embedded Systems Engineering Joseph J. (Jay) Joh~i~h National Radio 
As~r~omy Observatory P.O. Box O, Socorro, NH $7801 (505) 835-5742 ABSTRACT There is a great need for 
teaching tools that present the newest concepts of systems and software engineering to undergraduates. 
This need is especially great for embedded systems engineering because available environments are unsuitably 
scaled to educationa] resources. The EEES (or Engineering Environment for Embedded Systems) is a proposed 
project that will produce an engineering environment specifically designed Â¢o be a suitable teaching 
tool for universities and colleges. The reasons for this project are explained and suggestions on how 
such an environment might be put together are presented. I. INTRODUCTION The following was inspired 
by the recent "Future APSE" -workshop in Santa Barbara, California. I attended that workshop, and participated 
in the working group on "Hethodologies and Environments for Embedded Systems Lifecycle Support". This 
paper is an effort to condense the conclusions reached by that working group into a workable proposal. 
The product of the proposed process will be an "Engineering Environment for Embedded Systems", or "EEES" 
 pronounced "ease". Since the working group did not address specific hardware or methodology choices, 
the recommendations for specific hardware or methodologies are mine. I have no COPYRIGHT 1985 BY THE 
ASSOCIATION FOR COMPUTING MACHINERY, INC. Permission to copy without fee all or part of this materiel 
is granted provided that the copies are not made or distributed for direct commercial advantage, the 
ACM copyright notice and the title of the ~9 publication and its date appear, and notice is given that 
copying is by permission of the Association for Computing ~achinery. To copy otherwise, or to republish, 
requires a fee and/or specific permission. interest, either financial or professional, in the companies 
or products mentioned, but I do feel that they are the best choices as of September, 1984. 2. EMBEDDED 
SYSTEMS REALITIES Embedded systems have qualities that must be addressed by the engineering environment 
that is used to design them. Unfortunately~ the present environments for embedded systems are either 
dreadful or obscure. Present environments are dreadful because they either do not provide a consistent 
model throughout the engineering process, or that mode] is so baroque and steeped in 1970's mainframe 
methods that it is useless for anything except the largest projects. Present environments are obscured 
by the veils of secrecy surrounding the DoD contractors that design these proprietary environmen:s. 
Also, because these present program development and engineering environments are designed to address 
the needs of large systems, they tend to use large amounts of resources just to implement the environment. 
Most universities and colleges cannot spare the resources necessary to support these environments and 
instead have usually opted to adapt a Unix based environment as a poor substitute. The resultant lack 
of exposure produces college graduates that have little experience with modern systems engineering practices. 
The environments that are used for teaching have almost universally ignored the special problems of embedded 
systems engineering. Unfortunately, the demand for embedded systems engineers is growing so rapidly, 
that, without new ways to train these engineers, an engineer shortage crisis may well materialize. The 
EEES program is designed to put a practical systems design methodology, specifically designed to address 
the problems of embedded systems, in the hands of graduate and undergraduate students as soon as possible. 
Presently available teaching tools do not cover the entire engineering cycle, and full scaled engineering 
support environments are too cumbersome to be valuable as teaching tools. The EEES will provide a comprehen~ive, 
albeit abbreviated, methodology and supporting environment that can be used as a teaching tool and, also, 
as a test bed for new engineering Lools. Additionally, the EEES will use commonly available hardware 
to produce practical designs for factory automation, scientific instrumentation, and other real "medium 
sized" embedded systems' projects. The model that the methodology is based on must be scaled to this 
abbreviated, "medium sized" environment as well. The number of output documents must be limited to a 
few essential intermediate products. Although available tools should support the entire spectrum of engineering 
tasks from requirements to verification to maintenance, and, although those tools should follow one logical 
model that Page 4 describes how each tool is used with the other tools, integration of those tools 
should be loosely coupled with human decision and text file intermediate products replacing true automation 
and integration of tool sets. As we find out what tools are useful, we can better predict how best to 
assemble an integrated approach. This "tool bag" approach is necessary if we wish to see embedded engineering 
methodologies in common use as soon as possible. 3. FEATURES OF THE EEES THE METHODOLOGY The EEES 
methodology must satisfy the following requirements: * The methodology must be scaled to "fit" the resources 
of colleges and universities.  * The methodology must cover the entire engineering cycle.  * The methodology 
must address specific embedded systems' issues.  * The methodology is needed yesterday.  The firsu 
requirement means that ~he EEES environment must share a VAX 11/750 class computer and not take over 
a VAX 11/780 and several disks. The second requirement means that the EEES methodology must address 
all aspects of the engineering lifecycle from planning to maintenance. But since the first reqirement 
limits the number of design steps and their associated documents to a comprehendible and storeable minimum, 
some of the steps of a more complex engineering environment will either be combined into one EEES step 
or spread our over several EEES steps. The third requirement is necessary because a comprehensive, teachable 
embedded systems' engineering methodology does not now exist. The last requirement means that the EEES 
must use hardware and techniques that exist today to do as much as possible and rely on human effort 
for the portions of the methodology not yet addressed by the technology. If hardware systems and techniques 
are picked that are practical today, the EEES will not suffer the delays that integrating newer elements 
will produce. Fortunately, there are good techniques for each stage of the engineering cycle available 
today. Unfortunately, those techniques are spread over several different methodologies. The EEES must 
use the techniques from these different methodologies to produce a comprehensive engineering environment 
for embedded systems. Likewise, the tools for the EEES methodology must be designed using the presently 
available tools as models. The major design chore for the EEES implementation team will be to integrate 
these different techniques into a consistent methodology that covers the entire engineering cycle. The 
"tool bag" approach must be used until there is a better idea of just exactly what tools are necessary 
in an "integrated" environment. Meanwhile, the EEES will welcome additional tools as long as they conform 
to the EEES reqirements. The EEES methodology, as described in this paper, will concentrate on the problems 
of embedded systems software. The hardware portion of the methodology is also important, but the size 
of the software problem is so great that a general hardware design methodology is left to later versions 
of the EEES. Instead a "standard hardware environment" will be used. This standard hardware environment 
includes three classes of computers (minicomputer, microcomputer, and microcontroller) that can be mixed 
in many combinations to service a wide range of embedded systems applications. (Component level board 
design, layout, etc., will not be included in the first release of the EEES.) The EEES methodology will 
support the hardware design effort by supplying a graphical description of hardware functions and logic 
that are derived from the formal requirements and, also, by supporting the integration of the hardware 
modules with the software modules throughout the design process. (Below I describe the EEES software 
methodology using the present tense, possibly giving the impression that the methodology already exists. 
It does not, but the present tense allows a clearer description of the proposed development process.) 
 The software methodology The EEES software methodology follows the following steps: * Requirements 
 * Decomposition  * PDL * Coding  * Integration  Three of these categories: Requirements, Decomposition, 
and Integration, are shared with the hardware me=hodology. Requirements The requirements part uses 
expert knowledge and project goals ~o produce rigid functional requirements ~ha~ include; I. the logic 
of the system, 2. sequencing constraints, 3. timing constraints (relative and hard), 4. error recovery 
requirements, 5. physical constraints (weight, size, location, etc.), 6. requirements for maintenance 
and evolution, and 7. the idenzification of requirements that are likely to change during the engineering 
process (the engineering process is assumed to cover the entire lifecycle of the system being engineered). 
The functional requirements include requirements made necessary by the operations and maintenance of 
the eventual system. A complete model of the operational environment, describing every environmental 
stimulus that the system must respond to, is included in the requirements description. An integration 
scheme for the various modules (hardware and software) as well as a documentation list (manuals, operator 
instructions, etc.) also add to the requirements. The output of this part of the methodology is a Functional 
Requirements Data Object. The requirements part of the methodololgy uses SADT, originally developed at 
SofTech by Doug Ross, et al, as the basic model for human interaction, i.e., structured procedures are 
used to guide the process of contacting the experts and collecting the information that is used to specify 
the requirements. Procedure driven tools make the procedures easy to follow and understand. The requirements 
describe all of the functions the system will perform, how those functions fit together both logically 
and in time, and any other special constraints important to the total system. An "object based" requirements 
language is used to describe the specifications. A good example of this kind of description is PAISLey, 
a requirements specification language developed by P. Zave at ~he University of Page 9 Maryland. Decomposition 
 The Decomposition part uses the Functional Requirements Data Object as the input object and outputs 
"cloud" drawings of the decomposed system as output objects. A cloud drawing is a graphical representation 
of the basic modularization of system functions including control flow, data flow, and module interfaces. 
Each cloud in a drawing can be further refined into another cloud drawing representing the next level 
of functional abstraction. This process of refinement continues until only required functions remain 
in the clouds. These basic functions are allocated to hardware and software modules, and the interfaces 
between all functions and all modules are defined at an abstraction level equal to that of the functions 
themselves. These interfaces are further refined to include necessary low level mechanisms that implement 
the functional abstraction level. At this point, all the abstraction levels of the design are still 
language and hardware independent, but all the functionally necessary structure is in place. The cloud 
drawings include all of the requirements, either in the form of the drawings' "logic" or explicitly expressed 
as "constraints" in nouations that appear on the drawings themselves. T~,o sets of cloud drawings result. 
One set, showing hardware functions, is used to design the hardware portion of the system; and the other 
se~, showing Page 10 software functions, is used by the PDL part of the software methodology. The decomposition 
part of the EEES methodology uses DCDS, developed at TRW by Mack Afford, et al, as the basic model for 
allocating functions and defining interfaces of real-time systems. The cloud drawings are, in essence, 
R-Nets that are modified to represent a slightly higher level of design abstraction. PDL The PDL part 
refines the general "cloud drawings" into PDL features by following several steps, with the last few 
steps being at different language specific levels. Thus, if the target language is FORTRAN, the methodology 
stops the refinement process at an abstraction level appropriate to FORTRAN. If the target language is 
Ada, the refinement process is followed to completion, and a compilable Ada-PDL representation results. 
 Fortunately, the most pressing bottleneck of the Decomposition and PDL phases of this methodology is 
now being addressed by technology: the manipulation of graphical concepts and their representations in 
documentation. Structure driven graphical tools can be used to describe large concepts quickly; and, 
given the right methodology, convert those large concepts into language specific structures. The process 
of describing the various struc:ures in the cloud diagrams is aided by these Page 11 interactive graphical 
techniques. The work that best illustrates the power of this technique is being done by Ray Buhr at Carleton 
University, Ottawa. Buhr's technique, called CADA, is a working prototype of the PDL methodology described 
in this paper. In the PDL part, the engineer uses these graphical techniques to transpose the cloud 
drawings into graphical representations of PDL language structures. In unison with this graphical representation, 
the tools generate a parallel PDL text representation. The PDL text and the graphical representations 
describe a superset of Ada facilities. A full Ada is supported along with extensions that support the 
representation of the more general concepts of modu]arization, precise interface specification, and abstraction. 
Each of the language specific levels are color coded, so, when your PDL graphical representation is all 
the right color, you are done. Ads standard features are represented in green (of course), allowing the 
programmer an instant idea of where his design is still non-Ads. A change in the PDL text representation 
automatically produces the same change in the graphical representation and visa versa. Coding The Coding 
part of the methodology is supported by structure driven editors and advanced modeling tools. Other tools 
are used to test software components by providing stubs and drivers and by evaluating performance. Cepage, 
by Meyer and Nerson, is a good example of a strucCure driven editor that could be used as the basic 
model for EEES editors. Integration The Integra=ion part of the methodology includes tools that help 
verify performance of various combinations of subassemblies and predict their effects on superassemblies. 
The work in this area is spread over many proprietary development systems, and a clear model for the 
EEES is not yet apparent. Other features Throughout this methodology a "verification process" is also 
stressed. Each stage is required to verify that it has satisfied the original goals of the project. This 
is accomplished by linking the verification proÂ¢ess. The requirements must fulfill the goals; the cloud 
drawing must fulfill the requirements; the PDL must provide the functions of the cloud drawing; the code 
and integration phases must fulfill the PDL description; and, finally, the overall end product must fulfill 
the goals (as determined by testing). The special constraints of real-time systems are represented at 
each level of the design (as comments in the PDL, notations on the cloud drawing, constraints in the 
requirements, etc.). The representation of these constraints is standardized in a form that can be recognized 
as useful by the tools. The work by Luckham, et al, called Page 13 the "Stanford Pascal Verifier", 
is probab2y =he best example of how the EEES verification system is handled. THE ENVIRONMENT a The methodology 
described above will require specialized environment like the one described below: The tools The production 
of "embedded systems specific" tools will be another major goal for the EEES project. TtÂ¢o major factors 
make tools for embedded systems difficult to design; the "real-time" nature and the "embedded" nature 
of these systems. The real-time nature of embedded systems makes the requirements determination phase 
and the verification process much more difficult. Sequencing, minimum response timing, and hard timing 
specifications all complicate the picture. The tools must reduce this complexity to manageable levels. 
 The embedded nature of embedded systems refers to the quality of "nesting" and the necessity for co-development 
of components of embedded systems. Embedded systems are usually nested within other systems and/or have 
systems nested (or "embedded") within them. These super-systems and sub-systems all influence the design 
of embedded systems. Not only do embedded systems have to meet very rigid specifications, ~he specifications 
are subject to change  Page 14 with changes in these other related systems. This "system in flux" nature 
of systems engineering requires a methodology that delays decisions in areas that have a high probability 
for change, and a model that provides a convenient way to make design changes when they do have to be 
made. Specifically, the process of decomposing the functions into hardware and software, as well as 
the process of modularization in general, should be supported by methodology and tools. Another aspect 
of "embedded" systems is that "target" computers are downloaded from "host" development systems. Although 
the Host/Target arrangement does allow extensive testing in simulation on the Host (~here it is much 
easier), the final debugging process on the target has proved to be quite cumbersome. An important design 
feature of the EEES will be a "window" into the target computers that can be used to do "real-time" tuning 
of running systems. This window will survive through testing and main%chance, and provide a convenient 
way to "look in" on a system. Output documents from each of the above steps can serve two purposes. 
First, they will always be humanly readable, either as text descriptions or as graphical representations. 
Second, these same output documents will capture enough information to act as input for the next tool. 
Thus, tools will be tied to each other with humanly readable intermediate products. Page 15 The tools 
will control their own data objects and will be responsible for providing the mechanisms for distributing 
a task over several team members. A task may also be spread over several sessions in time, with team 
members working asynchronously. As the design matures, the output daza objects will evolve. The user 
 A very advanced user interface standard will be a major goal of the Eggs. Associated with this standard 
will be a set of utilities that will be bundled with the EEES. These utilities will provide a convenient 
interface ro the user and the toolsmith (a la ~|ac). Tools for complicated embedded systems will almost 
universally require a high resolution graphics interface. Additionally, the user should have some of 
the EEES available on a personal workstation (the editor and the mail system are a must). The hardware 
and the software Although the EEES will support both the software and the hardware engineering efforts, 
the stress will be on software tools for the first release. A standard "Embedded Systems Hardware Environment" 
will be used for the first release. This standard hardware environment will include three classes of 
computer: minicomputer, microcomputer, and microcon=roller. I0 busses and peripherals will also be standardized. 
Additionally, standard communications interfaces will be provided so that the different classes of computers 
can talk to each other at the "task to task" level. The EEES will be built using available technology 
that is scaled for the college and university user. This level of scaling is appropriate for many medium 
sized factories as well. Since In=el is the clear leader in the m~cro-controller market and is up front 
in the microcomputer market as well, the 80286 and the 8051/8044 by Intel are CPU contenders for the 
two lowest "classes" of computers. Since these contenders are available on Hultibus compatible single 
board computers, since Multibus is the defacto standard for 16 bit IO systems, and since that defacto 
~Jultibus I0 standard has generated cheap commodity peripherals, a Nultibus/Intel system is a good choice 
for the microcomputer and microcontroller classes of computer. Likewise, the VAX is the defacto "Host" 
for many Ada compilers as well as the defacto computer standard for most universities. These two facts 
make the VAX the obvious first choice for the minicomputer class of computer. The IB~I/AT, upgraded with 
a bit mapped graphics engine and associated display, would fill the dual role of a work stazion and a 
standard graphics display device. (Notice that the "AT" uses an 80286 as well.) Communications between 
the work/graphics stations, the minicomputers, and the microcomputers would utilize the IEEE 802.3(Ethernet) 
standard. Communications between the microcomputers and the microcontrollers would utilize Page 17 
Intel's Bitbus DCN standard, already supported in Hultibus hardware. Although Ada will be used as the 
root language, other languages will be supported (FORTRAN and Pascal for the first release). These languages 
will integrate (i.e., modules from different languages can be used together in programs). The host operating 
system should be VMS. UNIX has many "features" that appeal to programmers but that are counter to the 
goals of systems engineering. Also, the pipeline concept is more limiting than the communicating tasks 
model in VMS. (Please, no poison pen letters.) R~|X is the clear choice for the microcomputers and the 
microcontrollers, 5ut Ada compilers for these systems must be available. The S02$6 will have several 
soon, but there is some question whether a full Ada is possible for microcontrollers. Because of address 
space limitations on the microcontrollers, a "subset-Ada" will have to do, but, since microcontrollers 
are used in well defined environments, some of Ada's features can be sacrificed without affecting reliability. 
Ada packages for communications on =he Bitbus will be available on the microcontrollers and on the microcomputers. 
Ada pa&#38;kages for communications on IEEE802.3 will be provided for the V~X, the microcomputers, and 
the workstations. These packages will have several levels of abstraction; from "task to task" protocols 
to "named bit" operanions, and each level will be available to toolsmiths and users. Page 18 The host 
"Data Base" will follow the "Permanent Named Object" abstraction, built upon a VMS backbone. Since a 
tool will manage its own data objects, the tool is responsible for making information in those data objects 
available to other tools. Interfaces between tools will be humanly readable data objects. These intermediate 
data objects, taken together, provide a complete documentation of the abbreviated methodology. PERSONPOWER 
 It will take personpower and extreme cooperation to produce the EEES. The project should run under an 
accelerated development schedule, with the first release date targeted for a date t~o years from the 
day money is available. This speed is necessary because the technology that this system is based on will 
last only six years and mewer technology will delay the system for several years (due to the hardware 
debugging time). To achieve this speed of development a rather unique engineering team is necessary. 
Twenty to fifty programmers, systems engineers, and toolsmiths must assemble in a central location. They 
should be supported by individual workstations (IBN/ATs with bitmapped graphics), connected to several 
VAX II/750's via Ethernet(IEEE 802.3). This group of design professionals will design the EEES and supervise 
the implementation of the various ~ools and features. In order to attract top talent and to keep personalities 
out of the design process, everyone in the design group will be of the same rank and Page 19 will be 
compensated equally. Tools and features will be handled by specialist pairs; two professionals that are 
familiar with a particular tool or feature. These pairs will be chosen such that the interests of one 
pair member complements the other member's interests. Thus, each important feature of the EEES will have 
two different views of how it must be implemented. This will produce a lot of discussion that could slow 
the project, so, an arbitration team will decide small squabbles or recommend further action. The final 
authority will be vested in a design coordinating team. This team should be small; three or four persons 
who have proven that they have a firm grasp of the entire project and that they can work together. This 
group will be elected from the general body after the first few months work. After the two year period, 
the team should be reduced by an order of magnitude and relocated with a revised mission: oversee the 
development of the EEES in universities and industry. Major contractors should be given a four year licensing 
agreement for the system, and new contractors for tools should be encouraged. The rest of the design 
team should be reformed with new goals, such as special environments for distributed systems (EEDS), 
or for supercomputer systems (EESCS).  Page 20 FUNDING ETC. The scale of the project should be about 
five million dollars a year for the first t~o'years. Half of this amount would be used for the design 
team mentioned above while the rest would be used for various contractors. Funding at this level must 
come from a DoD source: DARPA, STARS, or the Software Engineering Institute. A less "jargon" oriented 
federal organization should administrate this project; recommend the National Bureau of Standards' Institute 
for Computer Sciences and Technology. A real scientific or commercial project should provide the first 
"demonstration" system to be engineered by the EEES. This system must be unclassifled and open to public 
scrutiny. Several of the National Science Foundation's projects come to mind. The EEES program should 
foot the software engineering bill for this first demonstration system. The DoD, by funding this type 
of "fast track" development effort, will provide a realistic engineering environment that universities 
and colleges can use to teach, and to experiment with, embedded systems engineering. Ada will be the 
cornerstone of this system, providing the basic model for the environment. Al~hough ~he first release 
will be geared to non-defense hardware and the alternate languages were chosen because they are already 
supported by the hardware and operating systems mentioned, the second release should support impor=ant 
languages and hardware currently in use by zhe DoD. As a general ~rend the EEES  Page 21 will evolve 
until it supports a full set of DoD software, hardware and documentation standards. Thus, the evolution 
of the EEES can help the standardization process by providing a test bed and the standardization effort 
can help drive the evolution of EEES by providing direction. 4. SU:IMARY The. EEES' design philosophy 
is to borrow from the best efforts of past methodologies and reorganize those borrowed methods into a 
"medium sized" embedded systems' engineering environment that can be used for the teaching of embedded 
systems engineering and for the design of practical "medium sized" engineering projects. The methodology 
uses graphical and textual methods for displaying and storing information. That information is formalized 
in several formats (a PDL, cloud drawings, functional logic, etc.). The tools will reduce the chore of 
representing the design to a byproduct of the design process itself by manipulating the representations 
for the engineer. Once the requirements have been rigorously defined, the methodology and tools will 
move the engineer quichly from the requirements to integrated, tested systems. If a requirement does 
change, the entire engineering process can be iterated without undue cost. This feature recognizes that 
the morphology and functionality of systems are always changing. During the implementation process we 
call it "design changes"; la=er on we call i~ "maintenance". Page 22 Either way we are dealing with 
"systems in flux" and we must provide flexible engineering environments that will accommodate that flux. 
 WHERE CREDIT IS DUE This paper represents a synthesis of many ideas, none of them my own. I wish to 
thank everyone with whom I worked in the "Methodologies and Environments for Embedded Systems Lifecycle 
Support" working group of the ACM-SIGAda "Future APSE" (Setember 1984) workshop for their ideas. Also, 
the next time I see ~lack Alford, I will blush abashedly, because, without his clear view of the engineering 
process, this document would not exist. Page 23 REFERENCES i. Afford, M.W., "Requirements Engineering 
Methodology for Real-Time Processing Requirements", IEEE Transactions on Software Engineering SE-3, vol. 
I, January 1977, pp. 60-69. 2. Afford, M.W., "Distributed Computing Design System [DCDS]", presented 
to the AC~I-SIGAda "Future APSE" Workshop, September 17-20, 19S4.  3. Buhr R.J.A. System Design with 
Ada, Prentice-Hall Inc., Englewood Cliffs, New Jersey, (1984).  4. Buxton, J.N. and L.E. Druffel, "Requirements 
for an Ada Programming Support Environment: Rationale for Stoneman", Proceedings of CO~IPSAC80, October 
1980, IEEE Press.  5. Control Data, The Development of Ada Program Design Languages, January 6, 1984, 
submitted to the Department of the Army by Control Data, Government Systems Ada Development, Atlanta, 
Georgia.  6. Gomaa, H., "A software design method for real-time systems", Communications of the AC~| 
27(9), September 1984, pp. 938-949.  7. Luckham D.C., et al, The Stanford Pascal Verifier User Manual, 
Stan-CS-79-731, SVG-ii, Computer Science Department, Stanford University, Stanford, Califronia, (~larch 
1979).  8. McConnell, P.R.H. and W.B. Strigel, "Results of modern software engineering principles applied 
to small and large projects", Proceedings of the National Computer Conference 1984, vol. 53, AFIPS Press, 
pp. 273-281.  9. Meyer, B. and J-M Nerson, "A Visual and Structural Editor", TRCS84-03, UCSB Department 
of Computer Science, Santa Barbara , California, (March 1984).  I0. Ross D.T. and K.E. Schoman, Jr., 
"Structured Analysis for Requirements Definition", IEEE Transactions on Software Engineering SE-3, January 
1977, pp. 60-69. II. Zave P. and R.T. Yeh, "Executable Requirements for Embedded Systems", IEEE Transactions 
on Software Engineering SE-5, March 1981, pp. 295-304. Page 23 REFERENCES I. Afford, H.W., "Requirements 
Engineering Hethodology for Real-Time Processing Requirements", IEEE Transactions on Software Engineering 
SE-3, vol. I, January 1977, pp. 60-69. 2. Afford, M.W., "Distributed Computing Design System [DCDS]", 
presented to the ACH-SIGAda "Future APSE" Workshop, September 17-20, 1984.  3. Buhr R.J.A. System Design 
with Ada, Prentice-Hall Inc., Englewood Cliffs, New Jersey, (1954).  4. Buxton, J.N. and L.E. Druffel, 
"Requirements for an Ada Programming Support Environment: Rationale for Stoneman", Proceedings of COHPSACS0, 
October 1980, IEEE Press.  5. Control Data, The Development of Ada Program Design Languages, January 
6, 1984, submitted to the Department of the Army by Control Data, Government Systems Ada Development, 
Atlanta, Georgia.  6. Gomaa, H., "A software design method for real-time systems", Communications of 
the ACH 27(9), September 1984, pp. 938-949.  7. Luckham D.C., et al, The Stanford Pascal Verifier User 
Hanual, Stan-CS-79-731, SVG-II, Computer Science Department, Stanford University, Stanford, Califronia, 
(Harch 1979).  8. HcConnell, P.R.H. and W.B. Strigel, "Results of modern software engineering principles 
applied to small and large projects", Proceedings of the National Computer Conference 1984, vol. 53, 
AFIPS Press, pp. 273-281.  9. Meyer, B. and J-H Nerson, "A Visual and Structural Editor", TRCS84-03, 
UCSB Department of Computer Science, Santa Barbara , California, (Hatch 1984).  i0. Ross D.T. and K.E. 
Schoman, Jr., "Structured Analysis for Requirements Definition", IEEE Transactions on Software Engineering 
SE-3, January 1977, pp. 60-69. Ii. Zave P. and R.T. Yeh, "Executable Requirements for Embedded Systems", 
IEEE Transactions on Software Engineering SE-5, March 1981, pp. 295-304. 
			