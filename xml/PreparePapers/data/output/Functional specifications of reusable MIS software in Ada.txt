
 Functional Specifications of Reusable MIS Software in Ada G. S. Owen, R. Gagliano, P. Honkanen Georgia 
State University Atlanta, GA 30303 ABSTRACT One of the most important keys to significant gains in 
programmer productivity is the development and use of reusable software. The possibility of reusable 
software is claimed as one of the potential strengths of using the Ada language~ because the Ada package 
concept is an excellent mechanism for the development o~ reusable software. This research project addresses 
the problem of providing succinct functional descriptions of Ada software packages which are applicable 
to the domain of Management Information Systems (MIS) and in particular to U. S. Army STAMMIS. In this 
paper we review issues concerning software reusability including functional specifications and general 
methods of storage and retrieval of the software packages. INTRODUCTION There have been numerous discussion 
concerning the "software crisis". The cost of software has been rapidly rising and it is estimated that 
the U. S. Department of Defense (DoD) will spend $30 billion/year on software by 1990 [HOR84]. In the 
private sector there are substantial backlogs in MIS departments nationwide and these backlogs are increasing 
[STA83]. Software backlogs in corporations have grown from an average of 19 months in 1981 to an average 
of 30 months in 1986 [SUY87]. Since the cost of development of software is an exponential rather than 
linear function [FAI85], reducing the amount of new code needed for software systems is an effective 
method of decreasing the development expense. The use of Reusable Software Components (RSCs) is a mechanlsm 
for achieving this goal. A second advantage in using RSCs is an increase in software reliability. In 
developing software the expense of achieving high reliability must be balanced against the potential 
cost of software failure. [LUB86] has derived formulas which indicate that if a RSC is to be developed 
then it is cost effective to provide for higher reliability since the cost will be amortized over several 
uses rather than just one application. Ada FEATURES FOR DEVELOPING RSCS The Ada language has several 
features which strongly supportthe development of RSCs. These include the following: i. Packages with 
separate compilation and checking across program unlts and separate specifications and bodles for program 
units. 2. In~ormatlon hiding constructs such as private ~yDes.  3. Generics  4. Strong data typing. 
  CONSIDERATIONS FOR DEVELOPMENT AND USE OF RSCs The development and reuse of software is not an easy 
task and there are several conditions which must be met if it is to be successful. There are several 
qualitative admonitions or "metacharacteristics" which if met can can ensure software reusability [DEN86]. 
These metacharacteristics can give rise to certain measurable characteristics of the software. We will 
make two assumptions about the reusable software. The first is that it is well-engineered software, i.e. 
it is designed and coded according to the best software engineering practices known today. The second 
is that the software can be reused both with and without modification. It would be preferable to use 
the software packages as black boxes wlth tailoring to a specific application being performed only via 
the modification of certain passed parameters or, in the case of generics, the instantiation with Joint 
Ada Conference 1987 19 different generic parameters. While this is the ultimate goal, given the general 
inexperience of the Computer Science community in designing reusable software, the reuse may involve 
some modification. This makes the first assumption of well engineered code particularly important. The 
first metacharacteristlc is that the software for reuse must be able to be found. The findable software 
must comprise both the code and a complete and succinct functional specification of the software. The 
specification should include such attributes as the author, hardware dependencies, execution times on 
particular computer systems, limitations on input data, and so forth. Ideally this functional specification 
would be in a computer based database management system which would allow for both dlrected queries as 
well as browsing. With this storage method it would be convenient for potential users to query the database 
and to determine what software is available for their use. If such an implementation is not possible, 
then high quallty external documentation must serve the same functlon. Methods for finding RSCs are discussed 
below. The second metacharacteristic is that the software, once found, must be understood well enough 
tobe used and it must be feasible to reuse the software. This involves both the functional specification 
and the code. The functional specification must be clear and complete enough so ~hat the user can declde 
whether modifications are necessary and if so what they are and how extensive they will be. If it is 
determined that the software must be modified then the code must be engineered well enough that users 
can examine the code and make changes which do not introduce errors and which do make the desirea modifications. 
This means that the code must be initially built for reuse, for example there should not be hidden side 
effects. The above metacharacteristics can be achieved by ensuring that the software achieves the following 
characteristics: i. The interface is both syntactically and semantically clear. 2. The software component 
does not interfere with its environment, e.g. global variables are not used.  3. As much as possible, 
the component is designed as "object-oriented", i.e. packaged as typed data with procedures and functions 
which act on that data.  4. The components exhibit high cohesion  and low coupling. 5. Both the component 
and the interface are written to be read by someone other than the author.  6. The component is written 
with a correct balance between generality and specificity.  7. The component is accompanied by sufficient 
and clear documentation.  8. The component can Be used with no change or only minor changes.  9. The 
component should be somewhat isolated from its environment, that is it should not assume some implicit 
environment.  I0. The component is standardized in terms of being invoked, performing its functlon, 
handling errors, and other communication. METHODS FOR FINDING RSCs  For a RSC to be useful and cost 
effective it must: (a) be available to a broad class of users who may or may not have knowledge of its 
existence, (b~ be readily retrieved, and once retrieved easily understood as to what its limitations 
and conditions for use are, (c! be completely self contained and documented.  In order to achieve these 
goals for as large a number of programs as are currently being used some type of automated storage and 
retrieval system must be used. The most feasible way of doing this is by using a database management 
system (DBMS) in conjunction with a data dictionary. Again considering the large number of pzograms 
being used it appears that the best approach to tnis problem would be to classify existing programs and 
programming systems along with projected future needs into a set of generic equivalence classes, and 
use a tov aown search procedure to retrieve the required information. We shall focus on the retrieval 
of a RSC since the storage algorithm is analogous, but rather than looking for a particular piece of 
information an empty slot is located into which the RSC to be stored can be placed. Once the equivalence 
classes have been determined, each of these would become a node in an associative tree structure representation 
of a conceptual cluster space [DEP83]. This would serve as a front end to the DBMS thereby reducina 
the overall database search required. This could be compared to using an indexed file structure rather 
than a sequential file for data manipulation. Once the equivalence class has been determined then the 
database could be searched uslng a SQL like language. We shall use the SQL DBMS language as representative 
Decause it is fast becoming the de facto standard of relational DBMSs. Furthermore, since the SQL language 
is the same when it is used for on-line, or ad hoc, queries as it is when it is embedded in a host programmzng 
language, it has the further advantage that often repeated queries can be packaged and not require reformulation 
each time they are run. Once the storage and retrieval algorithms have been developed we must turn our 
attention toward maintaining the library of RSCs so that they are current and correct. One method to 
accomplish this that is going to be explored is to maintain a dynamic system RSC table that would have 
one entry for each RSC. Included in thls entry would be an indicator as to whether the RSC was valid 
or not. Anytime that a system change, index structure, change in the cluster space, etc. occurs RSCs 
that would be effected by these changes would be marked invalid. Then, if possible, when the RSC is recalled 
it would be modified in such a manner as to make it valid once more. Using this scheme, re evaluation 
of RSCs would occur only as required. FUNCTIONAL SPECIFICATIONS OF SOFTWARE PROGRAMS AND MODULES To 
determine the equzvalence classes for the RSCs, and their more detailed placement in a DBMS, functional 
specifications must be developed. Program and module specifications can be either formal, using a formal 
specification language, or informal using a textual specification. There are two types of specifications: 
purely functional specifications, which give the effect of the module, and performance specifications 
which describe the speed and resource characteristics of the module [LIS79]. Both functional and performance 
specifications must be available for RSCs and unless otherwise specified we will include both under the 
name of functional specifications. There are several advantages to using formal specifications. Formal 
specifications can be analysed mathematically to determine correctness of the specification and for 
possible equivalence between different sets of specifications. These analyses can be automatically processed 
by a~ computer. Formal specifications can also be used to check for consistency and completeness. The 
primary disadvantage of formal specifications is that they are more difficult than informal methods. 
 FORMAL METHODS One formal specification language  which was developed for Ada is Anna (Annotated Ada) 
[LUC85]. Anna is implemented as an extension of Ada using special comment symbols. These comment symbols 
(e.g. --: for virtual Ada text or --I for annotations) are ignored by an Ada compiler but can be manipulated 
by an Anna compiler for compile time or even run time checks. Anna can be used in developing and debugging 
programs, in checking program performance against specifications, in verification and validation, in 
giving a description of the domain of variables, etc. It is a powerful tool which can be used in conjunction 
with informal methods. Since Anna is an extension of Ada with its own syntax and semantics it is more 
difficult to actually write the code since the programmer must know not only Ada but also Anna. If Anna 
is to be effective, it must be used throughout the code, i.e. in package bodies, subprograms, etc. This 
will require more upfront training of the programmers. It also requires the development of Anna specific 
tools such as syntax checkers, translators, etc. A second class of formal specification languages, which 
are not Ada specific, uses algebraic specification methods. For example, in [LIT84], the functionality 
of Ada generic units are specified by using Category Theory, which is the branch of mathematics which 
deals with properties characterizing classes of algebraic structures. [LIT84] uses the functional specification 
language CLEAR [BUR80] to implement this method. Using algebraic specification methods allows for automated 
processing of the specifications. It is external to the Ada code and could be produced by the designer 
of the package, rather than the implementor. There are two problems with this method. First it describes 
the static semantic component of the functionality but not dynamic behavior, e.g. efficiency, reliability, 
space requirements, etc. The Joint Ada Conference 1987 21 second problem is the difficulty in training 
designers to use this method. INFORMAL METHODS One possible informal model is an external catalog with 
a full functional description of each package. This could be either a hardcopy or online catalog. If 
it were an online catalog then it could be organized by keyword descriptors, similar to a reqular computerized 
literature database (eg. INSPEC). The advantage of this model is that it would be easy to create and 
search. A disadvantage would be that when the RSCs are modified it may be difficult to keep the catalog 
properly updated. This problem will be worse if an actual hardcopy catalog is used. A variation on 
this model would be having a full description of each package included in the package specification. 
This description could be delimited by special comment characters, e.g. --%% .... --%% and then the package 
specifications could be automatically searched for these descriptions which would then be inserted into 
an online database as discussed above. An advantage of this method is that it would be as easy to create 
as in the other catalog method. It would be easier to keep current since the description is stored directly 
in the code and could be modified when the code was modified. An exception to this would be if a package 
body were to be modified but not the specification. But the source code fo~ the package specification 
would usually be stored with that for the package body. After the modification was made, a database update 
program could be used to insert the new description into the online database. A disadvantage of this 
method is that by keeping the functional description in the source code this causes the size of the source 
code to be somewhat "bloated". This method also assumes that the creator of the code is literate enough 
to write a coherent and concise description. [STAB4] states that the simple approaches given above would 
be very effective in promoting software reuse, i.e. indexing and retrieving the RSC descriptions using 
the same methods as for literature retrieval. This simple method has worked quite well for FORTRAN mathematical 
subroutines, e.g. the IMSL set of subroutines [RIC83]. The IMSL library comes with a hardcopy catalog 
of about a thousand pages organized by a hierarchical category code. The functional description for 
each subroutine occupies one page and consists of the subroutine interface specification, a definition 
of the input and output parameters, and a brief description of the algorithm used. No performance specifications 
are included. [BUR85] has developed a prototype Ada package library, called the Ada Software CATalog 
(ASCAT) using Byron, Intermetrics Ada-based program design language and a commercial relational database 
system. They have used both the IMSL type hierarchical category code and keyword descriptors for RSC 
retrieval. A different method for classifying software for reusability has been developed by [PRI87]. 
Rather than using a hierarchical method with keyword descriptors, [PRI87] uses a faceted classification 
scheme. Each software module is described by a tuple of classes composed of descriptors from a controlled 
vocabulary. This is combined with a conceptual distance model, which is a method to estimate the closeness 
among terms in a facet. SPECIAL CONSIDERATIONS IN THE MIS AREA As pointed out previously, one of the 
aims of this research is to obtain generic equivalence classes for all the automated data processing 
operations in order to facilitate the use of RSCs. Some typical operations that are generally placed 
under the broad umbrella of MIS are: (a). Systems analysis using established aids, e.g., Gane Sarson 
Data Flow Diagrams (DFD), Yourdan analysis, Structured Analysis and Design (SADT), hierarchical Input 
Process Output (HIPO), etc. All of these could be considered as one generic group, namely aids in establishing 
the requirements process. Many of these operations involve existing commercially available computer aided 
design (CAD) products, whereas others use particular perturbations of these existing systems.  (b). 
Process management aids, such as PERT, GANTT chart techniques, etc. Again, the elements of this equivalent 
set would contain many commercially available CADs. (c). Data processing, which includes a myriad of 
operations all of which focus on a nucleus of activities that deal with routine report generation, insertion 
and deletion of data into the database, and the modification of existing data.  (d). Managerial use 
of data, other than those functions that use the reports arising from the routine data processing activities. 
The data obtained in these operations is used by management for decision making purposes. Characteristic 
of these operations are the ad hoc queries made on-line into the database by a non programming professional 
using a fourth generation language (4GL), or some existing program packages. Thus, it can be seen that 
the MIS area spans the entire spectrum of operations from the initial design phases though the routine 
day to day operations. To classify these operations in such a manner as to be all inclusive yet not so 
detailed as to yield an unwieldy number of classes is no small task that needs to be carefully planned 
out. Furthermore, the present environment appears to consist of an almost uncountable number of disjoint 
programs, in the programming and sharing of data sense. This type of operation places serious integrity 
constraints on all operations. COBOL appears to be the universal language being used. COBOL is not very 
amenable to the concept of reuseable code. To suggest that all operations be converted to Ada just for 
reusability is out of the question. However, to suggest a conversion to using Ada for new applications 
and for programming applications that are being drastically revised is a reasonable goal. The determination 
of the threshold that constitutes "drastically revised" is in itself a significant research area. In 
addition this would require research into the interface between existing COBOL programs and files with 
newly emerging Ada program modules. These new applications need to be capable of interfacing with existing 
COBOL programs without any modification of existing production programming systems. The guidelines for 
developing new MIS applications and/or implementations in reuseable Ada need to be defined. In addition, 
for reuseable code to be useful it must be able to be retrieved and under stood by the user. As mentioned 
above, the only feasible way of accomplishing this is via a DBMS in conjunction with a data dictionary. 
Thus, a standard for such items as input and output interfaces, algorithmic notation, documentation, 
restrictions and limitations, etc. needs to be very clearly defined and appropriate guidelines established 
for their use. Furthermore the topic of specifying what code is directly reuseable, capable of being 
modified, and which should not be modified is a topic of significant importance. The development of these 
 classification characteristics in a general sense, and then specifically in an Ada environment would 
constitute a significant piece of work. In addition the database itself needs to be clearly defined and 
structured in such a manner that reuseable modules can be retrieved without total searches. The structure 
devised should fit into a relational model, and must retrieve all the data requested without redundancy. 
This is a major research area. STAMMIS APPLICATIONS This research is being partially supported by the 
Army Institute for Research in Management Information, Communications and Computer Sciences (AIRMICS), 
a unit of the U.S. Army Information Systems Engineering Command (ISEC). The long-term research objectives 
of AIRMICS and the day-to-day operation of ISEC involves several hundred large information systems known 
as the STAMMIS or the Standard Army Multi-command Management Information Systems. Many of the activities 
designed to helping these, the Army's administrative computing community, are just beginning to explore 
the use of Ada for such purposes or the development of RSC's in Ada. This has guided our research towards 
the concept of the functional specification as previously discussed. This functional specification, while 
yet an abstraction, requires that significant aspects of the various STAMMIS be distilled and standardized. 
This in turn would require descriptions of the fundamental processes involved in these systems in order 
to produce generic functional specifications. What may make the task of providing a STAMMIS design methodology 
easier will be the use of a 3-tiered approach (DSS, MIS, and TPS) in analyzing specific functions. By 
looking at general information systems [BEN83] in the following way, it is possible to separate tasks 
associated with: i. Transaction Processing Systems (TPS): The routine, clerical activities such as gathering, 
updating, posting, dispatching, and acting upon information items in such systems.  Joint Ada Conference 
1987 23 2. Management Information Systems (MIS): The aggregating, condensing, statistics gathering and 
reporting sub-systems.  3. Decision Support Systems (DSS): The "what-if" model-based sub-systems designed 
to support decision-making at middle and upper management.  Generically then, the processes at the 
three levels might look something like this:  I. TPS i. Request Resources (Assets) 2. Request Status 
of Assets/Actions  3. Report availability of assets  4. Report status of assets/actions   II. MIS 
 i. Generate summary activity a. Totals, rates, averages, etc.  b. Categories, distributions, etc. 
 c. Least, most -recent, frequent, available, difficult, costly, etc.  2. Create reports with above 
data  III. DSS I. Mathematical models, e.g., Regression, linear programming 2. Graphs, charts, etc. 
 3. Spreadsheets  4. Other tools for projections (all of which could be described like the mathematical 
specifications that are alluded to)   Underneath the first two (TPS and MIS) are various processing 
routines such as searches, sorts, merges, collations, updates, purges, correction routines, etc., etc. 
For the DSS, there would be libraries of mathematical routines for such use. A review of the ISEC RAPID 
Report by Softech [SOF86] indicates that these routines might be distilled in the breakdown of functions 
and entities given in Table I. CONCLUSION  In this paper we have surveyed several issues concerning 
software reusability, particularly as it applies to the MIS applications area. Our next objective is 
to develop a model for abstracting the STAMMIS applications into equivalence classes and for specifying 
the functionality of the modules composing the equivalence classes. We must also develop an overall scheme 
for the storaqe and [BEN83] [BUR80] [BUR85] [DEN86] [DEP83] [JON84] [JON85] [LIS79] retrieval 
of the RSCs. References: J. L. Bennett, Building Decision Support Systems, Addison-Wesley, 1983. R. 
M. Burstall and J. A. Goguen, "The Semantics of Clear, a specification language", Proc. 1979 Copenhagen 
Winter School on Abstract Software Specification (Lecture Notes on Computer Science, vol. 86). New 
York:Springer-Verlag, 1980, pp.292-332. B. Burton and M. Broido, "Development of an Ada Package Library", 
Proceedings of the Fourth Annual Conference on Ada Technology, Atlanta, Georgia, March, 1985. R. St. 
Dennis, P. Stachour, E. Frankowski, and E. Onuegbe, "Measurable Characteristics of Reusable Ada Software", 
Ada Letters, Vol. VI, No. 2, pp.41- 50, March, April, 1986. R. W. DePree, "Pattern Rcognition in Software 
Engineering", IEEE Computer, Vol. 16, no. 5, pp. 48- 55. May. 1983. T. C. Jones. "Reusability in Programming: 
State of Transactions Engineering, pp. 544-552, B. Jones, A Survey of the the Art", IEEE on Software 
 Vol. SE-10, No 5, September, 1984. S. Litvintchouk, J. Mungle, H. Krasner, J. Melby, and H. Willman, 
"Issues in Software Reusability", ACM SIGSOFT Software Engineering Notes, vol. 10.2, pp.108-109, April, 
1985. B. H. Liskov and V. Berzins, "An Appraisal of Program Specifications", Research Directions in 
Software Technology, edited by P. Wegner, pp. 276-301, MIT Press, 1979.  [LIT84] S. D. Litvintchouk 
and A.S. Matsumoto, "Design of Ada Systems Yielding Reusable Components: An Approach Using Structured 
Algebraic Specification", IEEE Transactions on Software Engineering, Vol. SE-10, No 5, pp. 544-552, September, 
1984. [LUC85] D. C. Luckham and F. W. von Henke, "An Overview of Anna, a Specification Language for 
Ada", IEEE Software, Vol. 2.2, pp. 9- 24, March, 1985. [PRI87] R. Prieto-Diaz and P. Freeman, "Classifying 
Software for Reusability", IEEE Software, Vol. 4. No. i, pp. 6 -16, January, 1987.  [RIC83] J. R. Rice, 
Numerical Methods, Software, and Analysis, IMSL Reference Edition, McGraw-Hill Book Company, 1983. [SOF86] 
ISEC RAPID Investigation Analysis of RAPID Potential: Interim Report, SofTech, Inc., September 2, 1986. 
 [LUB86] M. D. Lubars, "Affording Higher Reliability Through Software Reusability", ACM SIGSOFT Software 
Engineering Notes, vol. 11.5, pp.39-42, October, 1986.  [STA84] T. A. Standish, "An Essay on Software 
Reuse", IEEE Transactions on Software Engineering, vol. 10.5, pp. 494- 497, September, 1984. [SUY87] 
W. Suydam , "CASE Makes Strides Toward Automated Software Development", Computer Design, Vol. 26, no. 
i, pp. 49-70, January i, 1987. This work is being sponsored by the United States Army Institute for 
Research in Management Information, Communications, and Computer Science (AIRMICS) under contract number 
DAAL03-86-D-0001. Table I Operations Resources Actions Plans Balances Assets Status ................................................... 
Direct X Manage X Apply X Track X X X Control X Manipulate X Coordinate X Report X X X Release X Order 
X Assign X Review X Joint Ada Conference 1987 25 About the Authors G. Scott Owen is an Associate Professor 
of Mathematics and Computer Science at Georgia State University in Atlanta. He received his B.S. degree 
from Harvey Mudd College and his Ph.D. from the University of Washington. His research interests are 
in Software Engineering, Ada Technology, Computer Graphics, and Computer Science Education. Ross A. 
Gagliano is an Associate Professor of Mathematics and Computer Science at Georgia State University in 
Atlanta. He received his B.S. degree from the U.S. Military Academy at West Point and his M.S. and Ph.D. 
from the Georgia Institute of Technology. His research interests are in Software Engineering, Ada Technology, 
and Modeling and Simulation. Pentti A. Honkanen is a Professor in the Department of Computer Information 
Systems at Georgia State University in Atlanta. He received his B.S. degree from the University of Colorado, 
his M.S. degree from Syracuse University and his Ph.D. from the Pennsylvania State University. His research 
interests are in Data Base Management Systems, and Software Engineering.  
			