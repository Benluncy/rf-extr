
 Modeling TCP Throughput: A Simple Model and its Empirical Validation * Jitendra Padhye Victor Firoiu 
Don Towsley Jim Kurose {jitu, vfiroiu, towsley, kurose}@cs.umass.edu Department of Computer Science University 
of Massachusetts Amherst, MA 01003 USA Abstract In this paper we develop a simple analytic characterization 
of the steady state throughput, as a function of loss rate and round trip time for a bulk transfer TCP 
flow, i.e., a flow with an unlimited amount of data to send. Unlike the models in [6, 7, lo], our model 
captures not only the be-havior of TCP s fast retransmit mechanism (which is also considered in [6, 7, 
lo]) but also the effect of TCP s timeout mechanism on throughput. Our measurements suggest that this 
latter behavior is important from a modeling perspec-tive, as almost all of our TCP traces contained 
more time-out events than fast retransmit events. Our measurements demonstrate that our model is able 
to more accurately pre-dict TCP throughput and is accurate over a wider range of loss rates. 1 Introduction 
A significant amount of today s Internet traffic, including WWW (HTTP), file transfer (FTP), email (SMTP), 
and re- mote access (Telnet) traffic, is carried by the TCP transport protocol [18]. TCP together with 
UDP form the very core of today s Internet transport layer. Traditionally, simula-tion and implementation/measurement 
have been the tools of choice for examining the performance of various aspects of TCP. Recently, however, 
several efforts have been directed at analytically characterizing the throughput of TCP s con-gestion 
control mechanism, as a function of packet loss and round trip delay [6, 10, 71. One reason for this 
recent in-terest is that a simple quantitative characterization of TCP throughput under given operating 
conditions offers the pos- sibility of defining a fair share or TCP-friendly [6] through- put for a non-TCP 
flow that interacts with a TCP connec-tion. Indeed, this notion has already been adopted in the design 
and development of several multicast congestion con-trol protocols [19, 201. *This material is based 
upon work supported by the National Science Foundation under grants NCR-95-08274, NCR-95-23807 and CDA-95-02639. 
Any opinions, findings, and conclusions or recommen- dations expressed in this material are those of 
the authors and do not necessarily reflect the views of the National Science Foundation. Permission to 
meks digital or herd copies of dl or pen of this work for personal or classroom use is granted without 
fee provided that ccpoes are not made or distributed for profit or commercisl advan- tage and that copies 
bear thin notice and the full citation on the first page. lo copy otherwiss, tc republish. to post on 
oerver8 or to redastribute to lists. rsquires prior opeciflc permission end/or a fee. SIGCOMM 98 Vancouvsr, 
B.C. 0 1998 ACM l-58113~003.1/98/0008...35.00  In this paper we develop a simple analytic characteriza-tion 
of the steady state throughput of a bulk transfer TCP flow (i.e., a flow with a large amount of data 
to send, such as FTP transfers) as a function of loss rate and round trip time. Unlike the recent work 
of [6, 7, lo], our model captures not only the behavior of TCP s fast retransmit mechanism (which is 
also considered in [6, 7, lo]) but also the effect of TCP s timeout mechanism on throughput. The measure-ments 
we present in Section 3 indicate that this latter behav-ior is important from a modeling perspective, 
as we observe more timeout events than fast retransmit events in almost all of our TCP traces. Another 
important difference between ours and previous work is the ability of our model to accu-rately predict 
throughput over a significantly wider range of loss rates than before; measurements presented in [7] 
as well the measurements presented in this paper, indicate that this too is important. We also explicitly 
model the effects of small receiver-side windows. By comparing our model s predictions with a number 
of TCP measurements made be-tween various Internet hosts, we demonstrate that our model is able to more 
accurately predict TCP throughput and is able to do so over a wider range of loss rates. The remainder 
of the paper is organized as follows. In Section 2 we describe our model of TCP congestion control in 
detail and derive a new analytic characterization of TCP throughput as a function of loss rate and average 
round trip time. In Section 3 we compare the predictions of our model with a set of measured TCP flows 
over the Internet, having as their endpoints sites in both United States and Europe. Section 4 discusses 
the assumptions underlying the model and a number of related issues in more detail. Section 5 concludes 
the paper. 2 A Model for TCP Congestion Control In this section we develop a stochastic model of TCP 
conges-tion control that yields a relatively simple analytic expres-sion for the throughput of a saturated 
TCP sender, i.e., a flow with an unlimited amount of data to send, as a function of loss rate and average 
round trip time (RTT). TCP is a protocol that can exhibit complex behavior, especially when considered 
in the context of the current In-ternet, where the traffic conditions themselves can be quite complicated 
and subtle [14]. In this paper, we focus our at-tention on the congestion avoidance behavior of TCP and 
its impact on throughput, taking into account the depen-dence of congestion avoidance on ACK behavior, 
the manner in which packet loss is inferred (e.g., whether by duplicate ACK detection and fast retransmit, 
or by timeout), limited receiver window size, and average round trip time (RTT). Our model is based on 
the Reno flavor of TCP, as it is by far the most popular implementation in the Internet today [13, 121. 
We assume that the reader is familiar with TCP Reno congestion control (see for example [4, 17, IS]) 
and we adopt most of our terminology from [4, 17, 161. Our model focuses on TCP s congestion avoidance 
mech-anism, where TCP s congestion control window size, W, is increased by l/W each time an ACK is received. 
Con-versely, the window is decreased whenever a lost packet is detected, with the amount of the decrease 
depending on whether packet loss is detected by duplicate ACKs or by timeout, as discussed shortly. We 
model TCP s congestion avoidance behavior in terms of rounds. A round starts with the back-to-back transmis-sion 
of W packets, where W is the current size of the TCP congestion window. Once all packets falling within 
the con-gestion window have been sent in this back-to-back manner, no other packets are sent until the 
first ACK is received for one of these W packets. This ACK reception marks the end of the current round 
and the beginning of the next round. In this model, the duration of a round is equal to the round trip 
time and is assumed to be independent of the window size, an assumption also adopted (either implicitly 
or ex-plicitly) in [6, 7, lo]. Note that we have also assumed here that the time needed to send all the 
packets in a window is smaller than the round trip time; this behavior can be seen in observations reported 
in [2, 121. At the beginning of the next round, a group of W new packets will be sent, where W is the 
new size of the con-gestion control window. Let b be the number of packets that are acknowledged by a 
received ACK. Many TCP re-ceiver implementations send one cumulative ACK for two consecutive packets 
received (i.e., delayed ACK, [16]), so b is typically 2. If W packets are sent in the first round and 
are all received and acknowledged correctly, then W/b ac-knowledgments will be received. Since each acknowledgment 
increases the window size by l/W, the window size at the beginning of the second round is then W = W 
+ l/b. That is, during congestion avoidance and in the absence of loss, the window size increases linearly 
in time, with a slope of l/b packets per round trip time. In the following subsections, we model TCP 
s behavior in the presence of packet loss. Packet loss can be detected in one of two ways, either by 
the reception at the TCP sender of triple-duplicate acknowledgments, i.e., four ACKs with the same sequence 
number, or via time-outs. We denote the former event as a TD (triple-duplicate) loss indication, and 
the latter as a TO loss indication. We assume that a packet is lost in a round independently of any 
packets lost in oth,er rounds, a modeling assumption justified to some extent by past studies [l] that 
have shown that periodic UDP packets that are separated by as little as 40 msec tend to get lost only 
in singleton bursts. On the other hand, we assume that packet losses are correlated among the back-to-back 
transmissions within a round: if a packet is lost, all remaining packets transmitted until the end of 
that round are also lost. This bursty loss behavior, which has been shown to arise from the drop-tail 
queuing discipline (adopted in many Internet routers), is discussed in [2, 31. We discuss it further 
in Section 4. We develop a stochastic model of TCP congestion con-trol in several steps, corresponding 
to its operating regimes: when loss indications are exclusively TD (Section 2.1), when loss indications 
are both TD and TO (Section 2.2), and when the congestion window size is limited by the receiver s advertised 
window (Section 2.3). We note that we do not model certain aspects of TCP s behavior (e.g., fast recov-ery) 
but believe we have captured the essential elements of TCP behavior, as indicated by the generally very 
good fits between model predictions and measurements made on nu-merous commercial TCP implementations, 
as discussed in Section 3. A more detailed discussion of model assumptions and related issues is presented 
in Section 4. Also note that in the following, we measure throughput in terms of packets per unit of 
time, instead of bytes per unit of time. 2.1 Loss indications are exclusively triple-duplicate ACKs In 
this section we assume that loss indications are exclu-sively of type triple-duplicate ACK (TD), and 
that the window size is not limited by the receiver s advertised flow control window. We consider a TCP 
flow starting at time t = 0, where the sender always has data to send. For any given time t > 0, we define 
Nt to be the number of pack- ets transmitted in the interval [0, t], and Bt = Nt/t, the throuahrmt on 
that interval. Note that Bt is the number of packers sent per unit of time regardless of their eventual 
fate (i.e., whether they are received or not). Thus, Bt represents the throughput of the connection, 
rather than its goodput. We define the long-term steady-state TCP throughput B to be We have assumed 
that if a packet is lost in a round, all re-maining packets transmitted until the end of the round are 
also lost. Therefore we define p to be the probability that a packet is lost, given that either it is 
the first packet in its round or the preceding packet in its round is not lost. We are interested in 
establishing a relationship B(p) between the throughput of the TCP connection and p, the loss prob- ability 
defined above. A sample path of the evolution of congestion window size is given in Figure 1. Between 
two TD loss indications, the sender is in congestion avoidance, and the window increases by l/b packets 
per round, as discussed earlier. Immediately after the loss indication occurs, the window size is reduced 
by a factor of two. We define a TD period (TDP) to be a period between two TD loss indications (see Figure 
1). For the i-th TD period we define Yi to be the number of packets sent in the period, Ai the duration 
of the period, and Wi the window size at the end of the period. Considering {Wi}p to be a Markov regenerative 
process with rewards {Y;}% (see for example[15]), it can be shown that B - m-1 E[ AI In order to derive 
an expression for B, the long-term steady-state TCP throughput, we must next derive expressions for the 
mean of Y and A. Consider a TD period as in Figure 2. A TD period starts immediately after a TD loss 
indication, and thus the current congestion window size is equal to Wi-1/2, half the size of window before 
the TD occurred. At each round the window is incremented by l/b and the number of packets sent per round 
is incremented by one every b rounds. We denote by cri the first packet lost in TDP,, and by Xi the round 
where this loss occurs (see Figure 2). After packet cr;, W; -1 more packets are sent in an additional 
round before a TD loss indication occurs (and the current TD period ends), as discussed in more detail 
in Section 2.2. Thus, a total of Y; = cr, + Wi -1 packets are sent in X; + 1 rounds. It follows that: 
E[Y] = E[a] + E[W] -1 (2) L TDP , TDP 2 TDP c, Figure 1: Evolution of window size over time when loss 
indications are triple duplicate ACKs packets I LEGEND cl ACKed packet -wi w lost packet nenultimate 
round -* I Figure 2: Packets sent during a TD period To derive E[o], consider the random process {ai},, 
where Finally, to derive an expression for E[X], we consider the cyp is the number of packets sent in 
a TD period up to and evolution of W, as a function of the number of rounds, as in including the first 
packet that is lost. Based on our assump-Figure 2. To simplify our exposition, in this derivation we 
tion that packets are lost in a round independently of any assume that Wi-1/2 and Xi/b are integers. 
First we observe packets lost in other rounds, {a;}, is a sequence of indepen- that during the i-th TD 
period, the window size increases dent and identically distributed (i.i.d.) random variables. between 
W,-1/2 and W,. Since the increase is linear with Given our loss model, the probability that cyI = k is 
equal slope l/b, we have: to the probability that exactly k - 1 packets are successfully acknowledged 
before a loss occurs wi-l w, = -+$-, i= 1,2,... 2 P[a=k]=(l-p)k-lp, k=1,2,... (3) The fact that Yi 
packets are transmitted in TDP, is ex-The mean of (Y is thus pressed by 03 X;/b-1 E[a] = X(1 -p) - pk 
= f (4) Y, = ( (8) c k=l k=O Form (2) and (4) it follows that LqY] = ++E[W] = + W, -1) + p, using (7) 
(10) To derive E[W] and E A], consider again TDP8. We de- where /3i is the number of packets sent in 
the last round (see fine rij to be the duration tround trip time) of the j-th round Figure 2). { Wi}, 
is a Markov process for which a stationary distribution can be obtained numerically, based on 7) and 
of TDP,. Then, the duration of TDP, is Ai = ~Jff: rlj. (10) and on the probability density function 
of {ai \ givenWe consider the round trip times rzj to be random variables, in 3). We can also compute 
the probability distribution that are assumed to be independent of the size of congestion of i Xi}. However, 
a simpler ap roximate solution can be window, and thus independent of the round number, j. It obtained 
by assuming that {X; f and {W;} are mutuallyfollows that independent sequences of i.i.d. random variables. 
With this E[A] = (E[X] + l)E[r] (6) assumption, it follows from (7), (10) and (5) that Henceforth, we 
denote by RTT = E[r] the average value of round trip time. E[W] = ;E[X] (11) and, 1 -P p + E[W] = y (y 
+ E[W] -1) + E[P] (12) We consider that PI, the number of packets in the last round, is uniformly distributed 
between 1 and II ,, and thus E[/3] = E[W]/2. Prom (11) and (12), we have E[W] = ~.+p&#38;qg (13) Observe 
that, E[W] = (14) i.e., E[W] z ,/&#38; for small values of p. Prom (ll), (6) and (13)) it follows E[X] 
= T + Jy + (y!> (15) E[A] = RTT(y+/m++j Observe that, E[X] = (17) Prom (1) and (5) we have ? + E[W] 
B(P) = (18) EMI = (19) Which can be expressed as: B(P) = &#38; &#38; + 4llJjl) (20)d Thus, for small 
values of p, (20) reduces to the throughput formula in [6] for b = 1. We next extend our model to include 
TCP behaviors (such as timeouts and receiver-limited windows) not consid-ered in previous analytic studies 
of TCP congestion control. 2.2 Loss indications are triple-duplicate ACKs and time-outs So far, we have 
considered TCP flows where all loss indi- cations are due to triple-duplicate ACKs. Our measure-ments 
show (see Table 2) that in many cases the majority of window decreases are due to time-outs, rather than 
fast re-transmits. Therefore, a good model should capture time-out loss indications. In this section 
we extend our model to include the case where the TCP sender times-out. This occurs when packets (or 
ACKs) are lost, and less than three duplicate ACKs are received. The sender waits for a period of time 
denoted by 2 0, and then retransmits non-acknowledged packets. Follow-ing a time-out, the congestion 
window is reduced to one, and one packet is thus resent in the first round after a time out. In the case 
that another time-out occurs before successfully retransmitting the packets lost during the first time 
out, the period of time out doubles to 2To; this doubling is repeated for each unsuccessful retransmission 
until 642 0 is reached, after which the time out period remains constant at 64To. An example of the evolution 
of congestion window size is given in Figure 3. Let ZT denote the duration of a sequence of time-outs 
and Z,r the time interval between two consecutive time-out sequences. Define S; to be s. = zTD + ~70 
1 * Also, define Mi to be the number of packets sent during 5 ;. Then, {(Si, Mi)}; is an i.i.d. sequence 
of random variables, and we have * --wfl E[Sl We extend our definition of TD periods given in Section 
2.1 to include periods starting after, or ending in, a TO loss in- dication (besides periods between 
two TD loss indications). Let ni be the number of TD periods in interval ZT . For the j-th TD period 
of interval ZTD we define Y;j to be the number of packets sent in the period, Ai, to be the dura-tion 
of the period, X;, to be the number of rounds in the period, and Wij to be the window size at the end 
of the period. Also, Ri denotes the number of packets sent during time-out sequence ZTO. Observe here 
that R, counts the total number of packet transmissions in ZT , and not just the number of different 
packets sent. This is because, as dis- cussed in Section 2.1, we are interested in the throughput of 
a TCP flow, rather than its goodput. We have i n; M,=CYii+R,, Si=CA,,+Z,TO j=l 3=1 and, thus, E[Ml = 
E&#38; y,j] + E[R], E[S] = E[c Ai,] + EIZTo] j=l 3=1 If we assume {ni}i to be an i.i.d. sequence of random 
variables, independent of {Yij} and {Aij}, then we have E[Cc Kj)il = E[nlE[Yl, E[(e Ail)ll = E[nlE[Al 
j=l j=l To derive E[n] observe that, during ZFD, the time between two consecutive time-out sequences, 
there are 7~~ TDPs, where each of the first ni -1 end in a TD, and the last TDP ends in a TO. It follows 
that in Z,r there is one TO out of ni loss indications. Therefore, if we denote by Q the probabil-ity 
that a loss indication ending a TDP is a TO, we have Q = l/E[n]. Consequently, WI + Q * E[Rl (21) B = 
E[A] + Q * EIZTo] Since Ytj and Aij do not depend on time-outs, their means are those derived in (4) 
and (16). To compute TCP through-put using (21) we must still determine Q, E[R] and E ZTo]. We begin 
by deriving an expression for Q. Consi cl er the round of packets where a loss indication occurs; it 
will be re- ferred to as the penultimate round (see Figure 4) . Let w In Figure 4 each ACK acknowledges 
individual packets (i.e., ACKs are not delayed). We have chosen this for simplicity of il-lustration. 
We will see that the analysis does not depend on whether ACKs are delayed or not. Figure 3: Evolution 
of window size when loss indications are triple-duplicate ACKs and time-outs srquence number TD occurs, 
RTt last round Figure 4: Packet and ACK transmissions preceding a loss indication be the current congestion 
window size. Thus packets fl fw are sent in the penultimate round. Packets fl..fk are ac-knowledged, 
and packet fk+l is the first one to be lost (or not ACKed). We again assume that packet losses are corre- 
lated within a round: if a packet is lost, so are all packets that follow, till the end of the round. 
Thus, all packets fol-lowing fk+l in the penultimate round are also lost. However, since packets fl.. 
fk are ACKed, another k packets, si ..sk are sent in the next round, which we will refer to as the last 
round. This round of packets may have another loss, say packet s,+i. Again, our assumptions on packet 
loss corre- lation mandates that packets Sm+Z...?k are also lost in the last round. The m packets successfully 
sent in the last round are responded to by ACKs for packet 6, which are counted as duplicate ACKs. These 
ACKs are not delayed ([16], p. 312), so the number of duplicate ACKs is equal to the num-ber of successfully 
received packets in the last round. If the number of such ACKs is higher than three, then a TD in-dication 
occurs, otherwise, a TO occurs. In both cases the current period between losses, TDP, ends. We denote 
by A(w, k) the probability that the first k packets are ACKed in a round of w packets, given there is 
a sequence of one or more losses in the round. Then (1 -P) PA(w, k) = 1 -(1 -p) Also, we define C(n, 
m) to be the probability that m packets are ACKed in sequence were sent) and the rest are lost. Then, 
C(n,m) = { in the last round (where ~2 packets of the packets in the round, if any, (I-pyp, m<n-1 (1 
_ p) , 77l=7l Then, w is a(w),, a TO, is given the probability by that a loss in a window of size 1 
ifw<3 Q(w) = since a TO occurs if the number of packets successfully transmitted in the penultimate 
round, k, is less than three, or otherwise if the number of packets successfully transmit-ted in the 
last round, m is less than three. Also, due to the assumption that packet sm+i is lost independently 
of packet fk+l (since they occur in different rounds), the probability that there is a loss at fk+l in 
the penultimate round and a loss at .sm+i in the last round equals A(w, k) * C(k, m), and (22) follows. 
After algebraic manipulations, we have (1-(1-p)3)(1+(1-p)3(1-((1--p) -s)) Q(w) = ruin 1, 1 - (1 - p)W 
( > (53)Observe (for example, using L Hopital s rule) that lim $(w) = 3. P+o w Numerically we find that 
a very good approximation of Q is o(w) M min(1, 3) w Q, the probability that a loss indication is a TO, 
is Q = 2 &#38;(w)P[W = w] = E[fj] w=l We approximate Q = &#38;Wl) (25) where E[W] is from (13). We consider 
next the derivation of E[R] and EIZTo]. For this, we need the probability distribution of the number 
of timeouts in a TO sequence, given that there is a TO. We have observed in our TCP traces that in most 
cases, one packet is transmitted between two time-outs in sequence. Thus, a sequence of k TOs occurs 
when there are k -1 consecutive losses (the first loss is given) followed by a suc- cessfully transmitted 
packet. Consequently, the number of TOs in a TO sequence has a geometric distribution, and thus P[R = 
k] = p - (1 -p) Then we can compute R s mean E[R]=FkP[R=k]=-&#38; (26) k=l Next, we focus on EIZTo], 
the average duration of a time- out sequence excluding retransmissions, which can be com-puted in a similar 
way. We know that the first six time-outs in one sequence have length 2i- T~, i = 1.. .6, with all im-mediately 
following timeouts having length 64Tu. Then, the duration of a sequence with k time-outs is Lk = (2 -1)To 
for k < 6 (63 + 64(k -6))To for k > 7 and the mean of ZTo is m EIZTo] = xLkP[R= k] k=l = T 1+p+2p2+4p3+8p4+16p5+32p6 
0 1-P Armed now with expressions for Q, E[S], E[R] and EIZTo] we can now substitute these expressions 
into equation (21) to obtain the following for B(p): * + -WV]+ Q(E[W])&#38; (27)B(p) = RTT(E[X] + 1) 
+ fj(EIW])Toe where: f(p) = 1+ p + 2p2 + 4p3 + 8p4 + 16p5 + 32p6 (28) Q is given in (23), E[W] in (13) 
and E[X] in (16). Using (24), (14) and (17), we have that (27) can be approximated by HP) = (29) RTTflfTomin 
 2.3 The impact of window limitation So far, we have not considered any limitation on the con-gestion 
window size. At the beginning of TCP flow estab-lishment, however, the receiver advertises a maximum 
buffer size which determines a maximum congestion window size, W Tnaz. As a consequence, during a period 
without loss indi- cations, the window size can grow up to Wmaz, but will not grow further beyond this 
value. An example of the evolution of window size is depicted in Figure 5. To simplify the analysis of 
the model, we make the fol-lowing assumption. Let us denote by W,, the unconstrained window size, the 
mean of which is given in (13) E[W,] = 5 + (30) We assume that if E[W,,] < W,,,, we have the approxima- 
tion E[W] z E[W,]. In other words, if E[W,] < W,,,, the receiver-window limitation has negligible effect 
on the long term average of the TCP throughput, and thus the TCP throughput is given by (27). On the 
other hand, if W,,, 5 E[W,], we approximate E[W] = Wmz. In this case, consider an interval ZTD be-tween 
two time-out sequences consisting of a series of TD periods as in Figure 6. During the first TDP, the 
window grows linearly up to W,,, for Ui rounds, then remains con-stant for VI rounds, and then a TD indication 
occurs. The ;vuow then drops to W,,,/2, and the process repeats. which implies E[U] = (b/2)Wmas. Also, 
considering the number of packets sent in the i-th TD period, we have u, wnmz Y, = -yJ( -+ Wmz) + v,wnw 
2 and then E[yl = + mazE[u] + Wm,,E[v] = fw&#38; + W,,,qv] Since Yi, the number of packets in the i-th 
TD period, does not depend on window limitation, E[Y] is given by (5), E[Y] = (1 -p)/p + W,,,, and thus 
E[V] = l-p + 1 - ;wmaz PWnmz Finally, since Xi = Vi + V,, we have E[X] = E[U] + E[V] = ;wmaz + l-p + 
1 PWnLm By substituting this result in (27), we obtain the TCP through-put, B(p), when the window is 
limited In conclusion, the complete characterization of TCP through- put, B(p), is: ~+E[Wl+Q(E[WI)~ RTT( 
~E[W,J+l)+C&#38;E[WI)To $$ if E[W,] < Wmaz B(P) = ~+w~,,+o@k,,)~ RW$Wm +&#38;+2)+o(wma,)To~ otherwise 
(31) w i3 Ri=2  rl eT I- Z,l .I_ I3 ITO I 2-b -I.,-, I Li ~4 % Figure 5: Evolution of window size 
when limited by W,,, . Ul Vl u2 v2 u3 v3 no. of rounds . L Xl .- x2 -- x3 - TDP 1 TDP 2 TDP 3 Figure 
6: Fast retransmit with window limitation where f(p) is given in (28), s is given in (23) and E[W,] in 
(13). full In the model . following sections we will refer to (31) as the The following approximation 
of B(p) follows from (29) and (31): B(p) x5 min W maz -RTT RTTfl+Tomin In Section 3 we verify that equation 
(32) is indeed (32) a very good approximation of equation 31. Henceforth we will refer to (32) as the 
 approximate model . 3 Measurements and Trace Analysis Equations (31) and (32) provide an analytic characteriza- 
tion of TCP as a function of packet loss indication rate, RTT, and maximum window size. In this section 
we empiri- cally validate these formulae, using measurement data from 37 TCP connections established 
between 18 hosts scattered across United States and Europe. Table 1 lists the domains and operating systems 
of the 18 hosts. All data sets are for unidirectional bulk data transfers. We gathered the measurement 
data by running tcpdump at the sender, and analyzing its output with a set void 1 US site 1 Linux 2.0.30 
of analysis programs developed by us. These programs ac- count for various measurement and implementation 
related Table 1: Domains and Operating Systems of Hosts problems discussed in [13, 121. For example, 
when we an- alyze traces from a Linux sender, we account for the fact that TD events occur after getting 
only two duplicate acks instead of three. Our trace analysis programs were further verified by checking 
them against tcptrace[9] and ns [8]. Table 2 summarizes data from 24 data sets, each of which corresponds 
to a one hour long TCP connection in which the sender behaves as an infinite source -it always has 
data babe1 tow 83944 1516 1 1514 0.194 0.520 pif alps 83971 762 0 760 0.168 7.278 pif imagine 44891 
1346 15 1329 0.229 0.700 pif manic 34251 1422 43 1377 0.257 1.454 Table 2: Summary data from lhr traces 
 to send and thus TCP throughput is only limited by the TCP congestion control. The experiments were 
performed at randomly selected times during 1997 and beginning of 1998. The third and fourth columns 
of Table 2 indicate the mimber of packets sent and the number of loss indica- tions respectively (triple 
duplicate ack or timeout). Dividing the total number of loss indications by the total number of packets 
sent, yields an approximate value of p. This ap-proximation is similar to the one used in [7]. The next 
two columns show a breakdown of the loss indications by type: the number of TD events, and the number 
of timeouts. Note that p depends only on the total number of loss indications, and not on their type. 
The last two columns report the average round trip time, and average duration of a single timeout To. 
These values have been averaged over the entire trace. When calculating round trip time values, we follow 
Karn s algorithm [5], in an attempt to minimize the impact of timeouts and retransmissions on the RTT 
estimates. Table 3 reports summary results from additional 13 data sets. In these cases, each data set 
represents 100 serially- initiated TCP connections between a given sender-receiver pair. Each connection 
lasted 100 seconds, and was followed by a 50 second gap before the next connection was initi-ated. These 
experiments were performed at randomly se-lected times during 1998. The data in columns 3-10 of Ta- ble 
3 are cumulative over the set of 100 traces for the given source-destination pair. The last two columns 
report the av-erage value of round trip time and single timeout. These values have been averaged over 
all one hundred traces for the given source-destination pair. An important observation to be drawn from 
the data in these tables is that, in all traces, timeouts constitute the majority or a significant fraction 
of the total number of loss indications. This underscores the importance of including the effects of 
timeouts in the model of TCP congestion con-trol. We have also noticed that exponential backoff due to 
multiple timeouts occurs with significant frequency. More details are provided in [ll]. Next, we use 
the measurement data described above to validate our model proposed in Section 2. Figures 7-12 plot the 
measured throughput in our trace data, the model of 310 Table 3: Summary data from 100s traces [7], as 
well as the predicted throughput from our proposed model given in (31) as described below. The title 
of the trace indicates the average round trip time, the average single timeout duration To, and the maximum 
window size W,,,, advertised by the receiver (in number of packets). The Z-axis represents the frequency 
of loss indications, p, while y-axis represents the number of packets sent. Each one-hour trace was divided 
into 36 consecutive 100 second intervals, and each plotted point on a graph repre-sents the number of 
packets sent versus the number of loss indications during a 100s interval. While dividing a continu- 
ous trace into fixed sized intervals can lead to some inaccura- ties in measuring p, (e.g., the interval 
boundaries may occur within timeout intervals, thus perhaps not attributing a loss event to the interval 
where most of its impact is felt), we believe that by using interval sizes of loos, which are longer 
than most timeouts, we have minimized the impact of such inaccuracies. Each 100 second interval is classified 
into one of four categories: intervals of type TD did not suffer any timeout (only triple duplicate acks), 
intervals of type TO suffered at least one single timeout but no exponential backoff, 2 1 represents 
intervals that suffered a single ex-ponential backoff at least once (i.e a double timeout) etc. The line 
labeled TD Only (stands for Triple-Duplicate acks Only) plots the predictions made by the model de-scribed 
in [7], which is essentially the same model as de-scribed in [6], while accounting for delayed acks. 
The line labeled Proposed (Full) represents the model described by Equation (31). It has been pointed 
out in [6] that the TD Only model may not be accurate when the frequency of loss indications is higher 
than 5%. We observe that in many traces the frequency of loss indications is higher than 5% and that 
indeed the TD Only model predicts values for TCP throughput much higher than measured. Also, in sev-era1 
traces (see for example, Figure 7) we observe that TCP throughput is limited by the receiver s advertised 
window size. This is not accounted for in the TD Only model, and thus TD Only overestimates the throughput 
at low p values. Figures 13-17 show similar graphs, where each point rep-resents an individual 100 second 
TCP connection. To plot the model predictions, we used round trip and timeout du-rations that were averaged 
over all 100 traces (these values also appear in Table 3). Equation (32) in Section 2 rep- resents the 
simple, but approximate form (32) of the full model, given in (31). In Figure 18, we plot the predictions 
of the approximate model along with the full model. The results for other data sets are similar. In order 
to accurately evaluate the models, we compute the average error as follows: manic-ganet. RTT=0.2150. 
TO=2.6076. WMax=6.0. 100x100s manic-mafalda. RTT=0.2501, TO=2.5127, WMax=6.0. 100x100s 1oOQo -.i.-10000 
 1000 1000 100 100 10 10 U11 0.001 0.01 0.1 1 0.01 0.1 1 Frequency of Loss Indications (p) Frequency 
of Loss Indications (p) Figure 13: manic to ganef Figure 14: manic to mafalda manic-spiff. RTTT=0.2539. 
TO=2.4545. WMaw32.0. 100~100s mamc-baskerville, FiTT=0.4735, TO=3.2269, WMax=B.O. 100x100s 1 0000 1mo/ 
1000 100 TD * T2 x10 T3otmore 1 1 -c . ...\I 0.001 0.01 0.1 1 0.01 0.1 Frequency of Loss lndicalions 
(p) Frequency of Loss Indications (p) Figure 15: manic to spiff Figure 16: manic to baskerville RTT=0.2539. 
TO=2.4545. WMae32.0. lOOr100s 1 OOQO E 1000 s z4 0 P a 100 TD 0 i 5 x T2z 10 T3ormore A TD Onl -----Proposed 
(Ful ) Y -Proposed (Approx) L I I .u 1 d.001 0.01 0.1 1 0.001 0.01 0.1 1 Frequency of Loss Indications 
(p) Frequency of Loss Indications (p) Figure 17: manic to Sutton Figure 18: manic to spiff, with approximate 
model are identified by sender and receiver names. The order It can be seen from Figures 19 and 20 that 
in most cases, in which the traces appear is such that, from left to our proposed model is a better estimator 
of the observed right, the average error for the TD Only model is values than the TD Only model. Our 
approximate model increasing. The points corresponding to a given model also generally provides more 
accurate predictions than the are joined by line segments only for better visual rep- TD Only model, 
and is quite close to the predictions made resentation of the data. by the full model. As one would expect, 
our model does not match all of the observations. We show an example of this l 100 second traces: We 
use the value of round trip in Figure 17. This is probably due to a large number of time and timeout 
calculated for each loo-second trace. triple duplicate acks observed for this trace set. The error values 
are shown in Figure 20. Figure 19: Comparison of the models for lhr traces 4 A Discussion of the Model 
and the Experimental Re-sults In this section, we discuss various simplifying assumptions made while 
constructing the model in Section 2, and their impact on the results described in Section 3. Our model 
does not capture the subtleties of the fast re- covery algorithm. We believe that the impact of this 
omis-sion is quite small, and that the results presented in Section 3 validate this assumption indirectly. 
We have also assumed that the time spent in slow start is negligible compared to the length of our traces. 
Both these assumptions have also been made in [6, 7, lo]. We have assumed that packet losses within a 
round are correlated. Justification for this assumption comes from the fact that the vast majority of 
the routers in Internet today use the drop-tail policy for packet discard. Under this pol-icy, all packets 
that arrive at a full buffer are dropped. As packets in a round are sent back-to-back, if a packet arrives 
at a full buffer, it is likely that the same happens with the rest of the packets in the round. Packet 
loss correlation at drop-tail routers was also pointed out in [2, 31. In addition, we assume that losses 
in one round are independent of losses in other rounds. This is justified by the fact that packets in 
different rounds are separated by one RTT or more, and thus they are likely to encounter buffer states 
that are inde- pendent of each other. This is also confirmed by findings in PI. Another assumption we 
made, that is also implicit in [6, 7, lo], is that the round trip time is independent of the window size. 
We have measured the coefficient of correla- tion between the duration of round samples and the number 
of packets in transit during each sample. For most traces summarized in Table 2, the coefficient of correlation 
is in the range of -0.1 to +O.l, thus lending credence to the sta-tistical independence between round 
trip time and window size. However, when we conducted similar experiments with receivers at the end of 
a modem line, we found the coefficient of correlation to be as high as 0.97. We speculate that this is 
a combined effect of a slow link and a buffer devoted ex-clusively to this connection (probably at the 
ISP, just before the modem). As a result, our model, as well as the models described in [6, 10, 7] fail 
to match the observed data in the case of a receiver at the end of a modem. In Figure 21, we Figure 20: 
Comparison of the models for 100s traces fWinGp5. RTT=4.726, TO=16.407, WMax=22. 1x1 hr 10000 e 1000 
d 3 m 3 % 100 i 2 10 T3ormore A TD Only ~---Proposed (Full) - ; I 0.01 0.1 1 Frequency of Loss Indications 
(p) Figure 21: manic to p5 plot results from one such experiment. The receiver was a Pentium PC, running 
Linux 2.0.27 and was connected to the Internet via a commercial service provider using a 28.8Kbps modem. 
The results are for a 1 hour connection divided into 100 second intervals. We have also assumed that 
all of our senders implement TCP-Reno as described in [4, 17, 161. In [13, 121, it is ob- served that 
the implementation of the protocol stack in each operating system is slightly different. While we have 
tried to account for the significant differences (for example in Linux the TD loss indications occur 
after two duplicate ACKs), we have not tried to customize our model for the nuances of each operating 
system. For example, we have observed that the Linux exponential backoff does not exactly follow the 
algorithm described in [4, 17, 161. Our observations also seem to indicate that in the Irix implementation, 
the expo-nential backoff is limited to 25, instead of 26. We are also aware of the observation made in 
[13] that the SunOS TCP implementation is derived from Tahoe and not Reno. We have not customized our 
model for these cases. Conclusion References In this paper we have presented a simple model of the TCP- 
Reno protocol. The model captures the essence of TCP s congestion avoidance behavior and expresses throughput 
as a function of loss rate. The model takes into account the behavior of the protocol in the presence 
of timeouts, and is valid over the entire range of loss probabilities. We have compared our model with 
the behavior of sev- eral real-world TCP connections. We observed that most of these connections suffered 
from a significant number of timeouts. We found that our model provides a very good match to the observed 
behavior in most cases, while models proposed in [6, 7, lo] significantly overestimate throughput. Thus, 
we conclude that timeouts have a significant impact on the performance of the TCP protocol, and that 
our model is able to account for this impact. We have also presented a simplified expression for TCP 
bandwidth in Equation (32), which is a good approximation for t,he proposed model in most cases. This 
simple approxi-mation can be used in protocols such as those described in [19, 201 to ensure TCP-friendliness 
. A number of avenues for future work remain. First, our model can be enhanced to account for the effects 
of fast re-covery and fast retransmit. Second, a more precise through- put calculation can be obtained 
if the congestion window size is modeled as a Markov chain. Third, we have assumed that once a packet 
in a given round is lost, all remaining packets in that round are lost as well. This assumption can be 
relaxed, and the model can be modified to incorporate a loss distribution function. Estimating this distribution 
func-tion for a given path in the Internet is a significant research effort in itself. Fourth, it is 
interesting to further investigate the behavior of TCP over slow links with dedicated buffers (such as 
modem lines). We are currently investigating more closely the data sets for which our model is not a 
good esti- mator. We are also working on a TCP-friendly protocol to control transmission of continuous 
media. This protocol will use our model to modulate its throughput to ensure TCP friendliness. Acknowledgments 
 We would like to thank Gary Wallace and the CSCF staff at the Department of Computer Science, University 
of Mas-sachusetts, Amherst, for helping us with tcpdump setup and general system administration. We are 
grateful to P. Krishnan of Hofstra University, Zhi-Li Zhang of University of Minnesota, Andreas Stathopoulos 
of College of William and Mary, Peter Wan of Georgia Inst. of Tech., Larry Peterson of University of 
Arizona, Lixia Zhnag of Univer- sity of California, Los Angeles, John Bolot and Phillipe Nain of INRIA, 
Chuck Cranor of Washington University, St. Louis, Grig Gheorhiu of University of Southern Cali-fornia, 
Stephen Pink of Swedish Institute of Science, Hen-ning Schulzerinne of Columbia University, Satish Tripathi 
of University of Maryland, College Park, and Sneha Kasera of University of Massachusetts, Amherst for 
providing us with computer accounts that allowed us to gather the data pre-sented in this paper. We also 
thank Dan Rubenstein and the anonymous referees for their helpful comments on earlier drafts of this 
paper. [II J. Bolot and A. Vega-Garcia. Control mechanisms for packet audio in the Internet. In Proceedings 
IEEE Infocona96, 1996. K. Fall and S. Floyd. Simulation-based comparisons of Tahoe, Reno, and SACK TCP. 
Computer Communication Review, 26(3), July 1996. PI S. Floyd and V. Jacobson. Random Early Detection 
gate-ways for congestion avoidance. IEEE/ACM Transactions on Networking, l(4), August 1997. [31 V. Jacobson. 
Modified TCP congestion avoidance algorithm. Note sent to end2end-interest mailing list,, 1990. [41 P. 
Karn and C. Partridge. Improving Round-Trip time esti- mates in reliable transport protocols. Computer 
Communi-cation Review, 17(5), August 1987. 151 J. Mahdavi and S. Floyd. TCP-friendly unicast rate-based 
flow control. Note sent to end2end-interest mailing list, Jan 1997. PI M. Mathis, J. Semske, J. Mahdavi, 
and T. Ott. The macro-scopic behavior of the TCP congestion avoidance algorithm. Computer Communication 
Review, 27(3), July 1997. [71 S. MCanne and S. Flyod. ns-LBL Network Simulator, 1997. Obtain via http://www-nrg.ee.lbnl.gov/ns/. 
PI S. Ostermann. tcptrace: TCP dump file analysis tool, 1996. http://jarok.cs.ohiou.edu/software/tcptrace/. 
PI [lOI T. Ott, J. Kemperman, and M. Mathis. The stationary be-havior of ideal TCP congestion avoidance. 
in preprint. [Ill J. Padhye, V. Firoiu, D. Towsley, and J. Kurose. Modeling TCP throughput: A simple 
model and its empirical valida-tion. Technical report UMASS-CS-TR-1998-08. P21 V. Paxson. Automated packet 
trace analysis of TCP imple-mentations. In Proceedings of SIGCOMM 97, 1997. V. Paxson. End-to-End Internet 
packet dynamics. In Pro-ceedings of SIGCOMM 97, 1997. [I31 V. Paxson and S. Floyd. Why we don t know 
how to simulate the Internet. In Proceedings of the 1997 Winter Simulation Conference, 1997. F41 S. Ross. 
Applied Probability Models with Optimization Ap-plications. Dover, 1970. [I51 [W W. Stevens. TCP/IP Illustrated, 
Vol.1 The Protocols. Addison-Wesley, 1994. W. Stevens. TCP Slow Start, Congestion Avoidance, Fast Retransmit, 
and Fast Recovery Algorithms. RFC2001, Jan 1997. [I71 K. Thompson, G. Miller, and M. Wilder. Wide-area 
internet traffic patterns and charateristics. IEEE Network, 11(6), November-December 1997. W31 [I91 T. 
Turletti, S. Parisis, and J. Bolot. Experiments with a layered transmission scheme over the Internet. 
Technical report RR-3296, INRIA, France. Obtain via http://www.inria.fr/RRRT/RR-3296.html. L. Vicisano, 
L. Rizzo, and J. Crowcroft. TCP-like congestion control for layered multicast data transfer. In Proceedings 
of INFOCOMM 98, 1998. PO1 
			