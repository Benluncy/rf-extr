
 Utilizing cross-domain SOAP web services using client­side languages in an Enterprise Mashup Platform 
 Cleyton Messias dos Santos Roberta Spolon Marcos A. Cavenaghi UNESP - São Paulo State University Av. 
Edmundo Carrijo Coube, 14-01, Bauru-SP, Brazil +55-14-3103-6079 Renata S. Lobato UNESP-São Paulo State 
University R. Cristóvão Colombo, 2265, São José do Rio Preto-SP,Brazil +55-17-3221-2203 renata@ibilce.unesp.br 
{cleytonm,roberta,marcos}@fc. unesp.br ABSTRACT Service oriented architectures (SOA) based on Simple 
Object Access Protocol (SOAP) Web services have attracted the attention of enterprises mainly for business-to-business 
integration and to create composite applications that execute business processes. An existing problem 
is the lack of preoccupation with non technical users due to the fact that to create a composite application 
to fulfill user s needs, it is necessary to be in contact with IT staff. To overcome this issue, enterprises 
can take advantage of web 2.0, introducing in the development stage some technologies like mashups and 
some concepts like user empowerment, collaborative work and collective intelligence. Some results [3] 
[13] have shown how web 2.0 concepts can help non technical users to produce relative complex business 
processes. However, traditional enterprise requirements goes beyond typical web 2.0 solutions in several 
aspects: (1) traditional enterprise systems are based on heterogeneous stack of technologies that are 
not directly exploitable from a web-based client (where SOAP web services play an important role); (2) 
web browsers set some cross-domain security constraints making difficult to integrate services from diverse 
domains. In this paper, a contribution to two web 2.0 research projects [14] [15] partially solves the 
problems described: provide a way to invoke cross-domain backend services (based on SOAP technologies) 
directly only using client­side languages, without a need for any adaptation layer.  Categories and 
Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications; D.2.11 [Software Architectures]: 
patterns; Permission to make digital or hard copies of all or part of this work for personal or classroom 
use is granted without fee provided that copies are not made or distributed for profit or commercial 
advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, 
or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or 
a fee. WebMedia 09, October 5 7, 2009, Fortaleza, CE, Brazil. Miguel Angel Cañas Vaz Telefónica Investigación 
y Desarrollo Emilio Vargas, 6 Madrid, Spain +34-62-639-5283  mac@tid.es General Terms Management, Design, 
Experimentation, Standardization. Keywords Enterprise Mashup, SOA, SOAP Web Service, Enterprise 2.0. 
1. INTRODUCTION Service-oriented architecture provides the necessary vision to deal with technical problems 
faced in the development and integration of current and legacy enterprise applications, as well as their 
alignment with business. It emphasizes some basic software architecture principles like software reuse 
and encapsulation, but it is most focused on building distributed applications [1]. A widely adopted 
technology that is being used to implement SOA is web services. It is used because it is the technology 
that fulfills many of SOA s characteristics, such as interoperability and loose coupling. Through this 
technology, it is possible to break down legacy monolithic applications into loosely coupled services 
that could be combined in order to create composite applications. However, current technologies and tools 
used to create composite applications, like BPEL (Business Process Execution Language) and WSCI (Web 
Service Choreography), are mainly designed for IT professionals demanding specific knowledge as well 
as a supporting infrastructure. Besides these, there are two other issues: when a composite application 
is deployed, it is hard to customize it according to user needs or even be customized by a user, because 
it involves a cycle of design, development and testing until next deployment; and these applications 
do not integrate well with existent web applications, for example, maps API s [2]. These issues have 
become obstacles in enterprises for a wider adoption of SOA related technologies. There is a need to 
offer services and functionalities, but prioritizing final users, in order to improve their productivity, 
creativity and innovation. This approach is called Enterprise 2.0. It combines concepts of a brand new 
wave of applications called Web 2.0 [4], but in the enterprise context, and changes SOA and composite 
applications conception, focusing on user friendly interaction with IT services, Copyright 2009 ACM 978-1-60558-880-3/09/0010 
$10.00. instead of designing it only for machine-to-machine integration [3]. With this approach, which 
is a user-centric SOA, the development of composite applications will be closer to knowledge workers. 
It is possible to allow them to compose their own applications according to their needs, using a user 
friendly interface to access many services (back-end resources of the enterprise or services from the 
internet), combining them and creating a customized application, fulfilling the needs, without having 
to be in contact with IT staff, increasing the agility to solve business problems, cutting the traditional 
cycle of development. The concepts of Enterprise 2.0 focus on including human beings and their resulting 
collective intelligence to produce not only knowledge, but to create composite applications cooperatively. 
An Enterprise 2.0 application that allows users with a low level of programming skills should support: 
(i) The use of the web as design-time tool and runtime to create a composite application; (ii) fast customization 
and deployment, allowing a user to create the required application quickly and; (iii) The easy reuse 
and remix of existent resources like services and data available not only inside the company, but also 
on the internet. The Web 2.0 concept that can be used inside a company and can provide these features 
is known as mashup . It allows consumers to retrieve data from many sources (web services, databases, 
web APIs) simply by dragging and dropping components and wiring them in order to produce a composite 
application, through a user friendly web interface [2]. A problem on creating an application that combines 
data from many sources and present it to a user is the security restrictions imposed by web browsers. 
It is not allowed to browser side languages, for example javascript, to access data localized in different 
domains. With this in mind, this paper will present two research projects published in [3]: FAST (Fast 
and Advanced Storyboard Tools) and EzWeb. The aim of the first one is to create a complex gadget development 
environment; and the second one is to build a reference architecture and implementation of an open Enterprise 
2.0 Mashup Platform. Using the two projects as basis for further research, this work describes how a 
FAST gadget is created extending its functionality, and proposes a way to allow it to access cross-domain 
SOAP web services (these web services can represent any kind of system, like enterprise back-end systems, 
legacy systems, and services available by providers) without using the JavaScript API provided by EzWeb. 
This paper also presents the difficulties in accessing cross-domain web services and proposes a solution 
that works for the both projects. Section 2 describes in more details enterprise mashup concepts, showing 
as samples EzWeb and FAST projects; and presents some existent techniques to cross-domain communication. 
Section 3 presents the proposed solution: a gadget accessing a cross-domain web services without using 
the available techniques. Section 4 presents conclusions and future work. 2. CONCEPTS AND RELATED WORK 
A legacy application tends to be a monolithic system that was and is being developed inside an organization 
through time. They play an important role inside the enterprise, but they are not intended to be easily 
pluggable with other systems [7]. On the other hand, services are designed to interoperate with other 
applications and services, making it possible to connect them to develop composite applications [5]. 
Web 2.0 concepts are different from the traditional use of the internet. Web pages are not created to 
be static anymore, but to let the user interact and create content for them, it is not a read-only internet 
anymore, it allows writing as well. Users can enrich the web page s contents and share it with others, 
improving collective intelligence. It relies on using the web as a platform, where it s possible to run 
entire applications inside the browser [4]. Samples of web applications using these concepts are wikis, 
social­networking sites, and blogs, among others. Besides these applications, there are the so-called 
mashups, also known as hybrid web applications, because they combine content from more than one source 
and present it to the user in a single view, appearing to be a single application. This definition fits 
well in a web context, but not in the enterprise context. To define mashup in enterprise context, it 
is necessary to consider other factors like security, governance and integration. John Crupi and Chris 
Warner state that an acceptable definition of enterprise mashup could be a user-centric micro-combination 
of standards­based internal and external data sources . This definition can be divided in three parts 
[6]: User centered: Because it is created to offer a more friendly way to manage data and business process. 
 Micro-Combinations: The number of data sources being handled is not as big as traditional enterprise 
applications, not even the amount of records.  Standards-based internal and external data sources: Data 
sources should be described in well known formats like WSDL (Web Service Description Language), REST 
(Representational State Transfer) and RSS (Really Simple Syndication), to be easily handled through the 
web browser and connectable with others data sources.  Cross-domain communication is a problem that 
emerges when a mashup is developed. It occurs because a mashup combines data from different domains and 
present it on a web browser. Solutions can be used to overcome this issue, for example, server-side proxies, 
cross-domain tags, but both have some drawbacks. Using server-side proxies increases the bandwidth and 
takes more time to access a resource than accessing it directly. A cross-domain tag lets the page more 
insecure, because it is not possible to check the script that is being loaded from other domain [16]. 
As a proof of concept, this work uses as basis for further research two projects: EzWeb and FAST. The 
aim of the FAST project is to create a visual and easy environment that allows non technical users to 
develop their own composite applications according to their needs utilizing front-end gadgets, resulting 
in the execution of relative complex business processes that represent resources like web services, data, 
and others. The aim of the EzWeb project is to allow the intercommunication between gadgets created using 
the FAST approach, creating a hybrid web application. Besides, users can use EzWeb to publish their improvements 
for further reuse, adaptation or specialization by other users, improving the web 2.0 concepts like collective 
intelligence and user collaboration [3]. 3. CROSS-DOMAIN COMMUNICATION Considering that the technologies 
used to build front-end gadgets according to the model provided by EzWeb and FAST are those a web browser 
can render (XHTML, flash, applets), the aim of this work is to provide a way to access cross-domain SOAP 
web services using some of these technologies combined with techniques not available natively to these 
projects. These web services can represent back-end systems, an SOA infrastructure, web APIs offered 
for example by Amazon [8]; and their functionality can be combined to other gadgets in order to create 
composite applications. But, there is the cross-domain restriction that occurs when it is necessary to 
combine services from different sources. Cross-domain is a restriction imposed by web browsers to browser-side 
programming languages like JavaScript that prevents a web application residing in a domain, like http://www.example.com, 
from accessing other resources available on other domains, like http://www.myservice.com/service.asmx 
[9]. The approach used in this work was to combine two technologies: JavaScript and Adobe Flash. The 
Adobe Flash plug-in was used because it has a security model implemented in versions 9.0.124 and above 
that allows cross-domain communication. A JavaScript code invokes an invisible flash object that acts 
as a client-side proxy for requests, and gadget code. For this purpose, the flXHR project was used [10], 
allowing a secure cross-domain communication, not using workarounds like IFRAME proxies, dynamic script 
tags, or server-side proxying. This behavior is depicted in Figure 1: Figure 1 - Gadgets invoking a 
web service The flash plug-in only allows to send data in cross-domain, but not to load it. To load data 
from other domains, it is necessary to create a cross-domain policy file and store it on the server that 
contains the resources that it is intended to access [11]. This file is a Flash Player security control 
that can be used to load data between domains, enabling browser-side applications to access directly 
resources residing on different domains, in this case, making it possible to the gadget to access directly 
a web service. 4. EXPERIMENTATION As a proof of concept, some experiments were carried out to check 
if all the concepts presented work correctly together. A SOAP web service that receives a parameter as 
input was developed, accepting both POST and GET methods, and returning a result in response. In a real 
environment, this web service can represent any kind of resources and return any kind of supported data, 
letting the responsibility of choosing what method best fits their needs to the client which is invoking 
it. In the web service deployment directory, a cross-domain policy file called crossdomain.xml was created. 
This file is a Flash Player security control that is used to enable data loading between domains. In 
this file, all domains were allowed, but it is possible to restrain it to a few ones if needed. Therefore, 
the web service was deployed in a sample domain like http://localhost/WebServices/Service1.asmx. In another 
domain, to represent a call from a different server, an EzWeb environment was installed according to 
manuals available at [12]. Then, a simple gadget was created, following the FAST s model, which invokes 
the deployed web service using GET and POST methods. In the POST method, it was necessary to mount the 
SOAP envelope with the necessary headers and then use the flXHR project to make the post to the web service. 
Using the GET method, it was necessary to pass parameters through query string and also to invoke the 
service using the flXHR project too. The returning object is an XML document that is handled using JavaScript 
and parsed to present the resulting data to the user. FlXHR is responsible for the client-side proxy 
between the gadget and the web service. The experimentation is depicted in figure 2: Figure 2 - Cross-domain 
communication between EzWeb and a Web Service It was observed that without the cross-domain policy file, 
it is not possible to invoke the web service. For the POST method, it was necessary to include another 
tag to the file, in order to accept headers. These headers are inside the SOAP envelope, and they are 
needed so that the POST method works correctly. Figure 3 shows the file: <?xml version="1.0"?> <!DOCTYPE 
cross-domain-policy SYSTEM "http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd"> <cross-domain-policy> 
<allow-access-from domain="*" /> <allow-http-request-headers-from domain="*" headers="*" /> </cross-domain-policy> 
Figure 3 The cross-domain security file With this configuration, it was possible to access cross-domain 
SOAP web services directly from the FAST gadget without the need to use a server-side proxy to handle 
problems related to resources residing in another domain, even if the gadget is inside the Mashup Platform 
EzWeb. 5. CONCLUSION AND FUTURE WORK This paper presented concepts related to enabling Web 2.0 on enterprise 
context to empower users by introducing Enterprise Mashup. As an open source reference implementation, 
it presented two research projects, EzWeb and FAST, which served as basis for further research. The paper 
showed issues related to accessing resources residing in different domains. To overcome this problem, 
it was proposed a solution using only browser-side languages to access cross-domain SOAP web services 
directly (without a server-side proxy). All tests worked correctly, making the reuse of existing web 
services with Enterprise Mashup possible, providing a user-friendly interface for users to access. Both 
GET and POST methods worked correctly. As future work, a parser of data returned by web services it will 
be developed to serve as input to other existent FAST gadgets, in order to create real composite applications. 
Security issues will be investigated to ensure that enterprise mashups can really be implemented in an 
enterprise context. 6. ACKNOWLEDGMENTS The authors would like to thank Brazilian research funding agencies 
FAPESP and Fundunesp. 7. REFERENCES [1] Srinivasan, L. and Treadwell, J. An Overview of Service­oriented 
Architecture, Web Services and Grid Computing., http://h71028.www7.hp.com/ERC/downloads/SOA-Grid­HP-WhitePaper.pdf. 
[2] Liu, X., Hui, Y., Sun, W., and Liang, H., Towards Service Composition Based on Mashup. In IEEE Congress 
on Services. pp. 332-339. [3] Lizcano, D., Soriano, J., Reyes, M., and Hierro, J.J. 2008. EzWeb/FAST: 
Reporting on a Successful Mashup-based Solution for Developing and Deploying Composite Applications in 
the Upcoming Web of Services. In Proceedings of the 10th International Conference on Information Integration 
and Web-based Applications &#38; Services (Linz, Austria, November 24 - 26, 2008). ACM Press, New York, 
NY, 15-24. DOI=http://doi.acm.org/10.1145/1497308.1497317 [4] O Reilly, T. What Is Web 2.0., http://oreilly.com/web2/archive/what-is-web-20.html. 
[5] Cetin, S., Altintas, N., Oguztuzun, H., Dogru, A., Tufekci, O., and Suloglu, S. 2007. A Mashup-Based 
Strategy for Migration to Service-Oriented Computing. In IEEE International Conference on Pervasive Services. 
pp 169-172. [6] Crupi, J., and Warner, C. Enterprise Mashups Part I: Bringing SOA to the People., http://www.soamag.com/I18/0508-1.asp 
[7] Iocola, P. 2007. When Legacy Meets SOA: Achieving Business Agility by Integrating New Technology 
with Existing Software Asset. 1st Annual IEEE Systems Conference. pp 1-8. [8] Amazon Web Services. http://aws.amazon.com/. 
[9] Takesue, M. 2008. A Protection Scheme against the Attacks Deployed by Hiding the Violation of the 
Same Origin Policy. In The Second International Conference on Emerging Security Information, Systems 
and Technologies. pp 133-138 [10] flXHR. http://flxhr.flensed.com/. [11] Adamski, L. Cross-domain policy 
file usage recommendations for Flash Player. http://www.adobe.com/devnet/flashplayer/articles/cross_dom 
ain_policy.html. [12] Guides and Manuals MorfeoWiki. http://forge.morfeo-project.org/wiki/index.php/Guides_and_Manuals 
[13] Soriano, J., Lizcano, D., Cañas, M.A, Reyes, M., and Hierro, J.J. 2007. Fostering Innovation in 
a Mashup-oriented Enterprise 2.0 Collaboration Environment. In SIWN International Conference on Adaptive 
Business Systems (ICABS 2007). pp 62-68. [14] EzWeb official web page. http://ezweb.morfeo-project.org/. 
[15] FAST official web page. http://fast.morfeo-project.eu/. [16] Jackson, C., Wang, H.J. 2007. Subspace: 
secure cross­domain communication for web mashups. In Proceedings of the 16th international conference 
on World Wide Web (Alberta, Canada, May 8 - 12, 2007). ACM Press, New York, NY, 611-620. DOI=http://doi.acm.org/10.1145/1242572.1242655 
  
			