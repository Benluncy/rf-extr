
 Worst-Case Optimal Algorithms For Constructing Visibility Polygons With Holes Subhash Suri Joseph 0 
'Roerke  Department of Electrical Engineering &#38; Computer Science The Johns Hopkins University Baltimore, 
MD 21218 1, Introduetlon EIGindy and Avis [EA] considered the problem of determining the visibility 
polygon from a point inside a polygon. Their algorithm runs in optimal O(n ) time and space, where n 
is the number of the vertices of the given polygon. Later their result was generalized to visibility 
polygons from an edge by EIGindy [Eli, and Lee and Lin ILL I. Both independently discovered O(nlogn) 
algo-rithms for this problem. Very recently Guibas e|. ai. [GH] have proposed an optimal 0 (n) time algorithm. 
None of these algorithms work for polygons with holes. In this paper we consider the problem of computing 
visi- bility polygon.q inside a polygon P that may have holes. Our first result is an algorithm for computing 
the visibil- ity polygon from a given point inside P. The algorithm runs in 0 (nlogn) time, which is 
proved to be optimal by reduction from the problem of sorting n positive integers (Aaano st. al, [AA] 
have obtained this result independently). Next we consider the problem of deter- mining the visibility 
polygon from a line segment. As our main result, we establish a worst-ease lower bound of N(n 4) for 
explicitly computing the boundary of the visibility polygon from a line segment in the presence of other 
line segments, and design an optimal algorithm to construct the boundary. We also present an 0 (n 2) 
time and space algorithm if the visibility polygon can be represented as a union of several polygons. 
The latter algorithm is also proved to be optimal in the worst case. Permission to copy without fee all 
or part of this material is granted provided that the copies are not made or distributed for direct commercial 
advantage, the ACM copyright notice and the title of the publication and its date appear, and notice 
is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, 
or to republish, requires a fee and/or specific permission. &#38;#169; 1986 ACM 0-89791-194-6/86/0600/0014 
$00.75 Throughout the paper, we consider the slightly more general problem of computing visibility polygons 
in the presence of a set of line segments S ~ (sl, a~ ........ s~ ) instead of a polygon with holes, 
where two line segments st, sjE$ do not intersect except perhaps at their endpoints. Our results hold 
for this problem as well. Notice that in this more general setting "visibility polygons" may be unbounded 
regions. Our paper is organized as follows. Section 2 presents the algorithm for point visibility polygon, 
and a proof of the lower bound. Worst-case lower bounds for computing the visibility polygon from a line 
segment are established in Section 3. Section 4 presents algorithms for various visibility problems from 
a line segment. Finally, Section {~ concludes with a discussion of several related results. 2. The general 
Point Visibility Problem In this section, we outline an algorithm to com-pute a point visibility polygon 
amidst line segments in time O(nlogn), and prove this to be optimal in the worst case. The basic idea 
behind the algorithm is as follows. Let z be the point from which the visibility polygon is to be computed, 
and d be any half-ray with z as an endpoint. Let st, s~ .... , s t be an ordered list of segments of 
$ intersecting d such that if s/ inter-sects d at zj then, in the ordered list, i < j 2> [zzs I < I zzj 
], l<_i,j<_k, where I zzi [ denotes the distance from z to z i. Clearly, ex is on the boundary of V (z). 
The algorithm rotates the half-ray d around z and outputs the sequence of seg- ments that intersect d 
first. The algorithm is, roughly speaking, an angular plane sweep, and can be imple- mented in time O 
(niogn) in a straightforward manner. The optimality of the algorithm is established by the fol- 14 
lowing construction. V(e). We show two configurations of O (n) line seg- We prove an fi(nl0gn ) lower 
bound on the com-putation of point visibility inside a polygon with holes by reduction from the problem 
of sorting n integers, (zl,z 2 ...... z~ ). Let zma z and zmi u be the largest and the smallest numbers 
among zl, zs, ..... , z~, and let A__.~ z,n4fz ross. We create an instance of point visibility problem 
as follows. The outermost polygon is a rectangle whose ver- tices are located at (zmi~l ,-A/2), (zm,f+l,-A/2), 
(zm,ffi+l, A/2) and (zmi~l, A/2). With each number zi, 1_~i _n, we associate a rectangular hole with 
ver-tices (z,,-~), (zi+c ,-e), (zi+e , e) sad (zi, e), where e-----0.1, for example. Figure 1 illustrates 
the construction ror n =4. A I / /i j, /, I I / / // 1 / / I / / /  ///' ,;/-" .- ._I b, --,-. ¢ x 
3 X2 x I x4 Figure I: Lower bound proof for Point Visibility. The point from which the visibility polygon 
is to be computed is set to be the lower left corner of the outer rectangle: z =(z,~i~l , -A/2). It can 
be easily shown that the lower left corner of each hole occurs at every fifth vertex of the boundary 
of V(z ) in order of increas- ing values of z s 's. It is therefore easy to extract the sorted order 
of z,'s from an algorithm that outputs the boundary of V(z) as a sorted list of vertices. Since sorting 
n integers is known to require i~(nlogn ) time in the general algebraic decision tree model, any such 
algo- rithm must spend ~(niogn ) time in the worst-case. 3. Worst-Case Lower Bounds For Visibility Polygon 
From A Line Segment In this section, we establish a worst-case lower bound of 12(n 4) for constructing 
the visibility polygon from a given line segment e amidst n other line seg- ments. We denote the visibility 
polygon from e by ments that force fi(n 4) vertices on the boundary of V(e ). Both configurations follow 
the same main idea: two rows of closely spaced collinear segments are placed parallel to e, one above 
the other. Imagine that e is a fluorescent tube of light. Then i2(n ) rays of light emerge from the gaps 
between the segments of first row, and fi(n2) rays emerge from the gaps of second row. These f~(n 'a) 
rays then intersect in fl(n 4) points in the region above the second row. We begin the description of 
these configurations by allowing point gaps between the segments so that the light emerges in "ideal" 
rays from the second row of gaps. Later in the section we enlarge the gaps so that the rays become finite 
conical beams, resulting in non-degenerate visibility polygons of C~(n 4) vertices. The first configuration, 
called the Integer Configuration, uses only integer coordinates, but requires a number-theoretical argument 
to establish the bound on number of distinct intersections. The second configuration, called the Rational 
Configuration, permits a more direct lower- bound proof, but uses rational coordinates. Both configurations 
establish the same geometric fact, but their algorithmic implications depend on the precise model of 
computation. Despite this dependence, both lead to the same i2(n 4) lower bound on any algorithm for 
constructing V(c ). 3.1: Integer Configuration Let the segment e have coordinates ((-n -1/2,0), (2n +1/2,0)} 
for its two endpoints. Our first set of segments H lies on the line y = 1. Each seg- ment h# is an open 
segment from a i to bs, where a i ----(i,1) and b i =(i+l, 1) for0<i<n-1. Finally, two more open segments 
h_ I and h~ with the coordi- nates {(-n-I, 1), (0, 1)} and {(n, 1), (2n +1, 1)), respectively, are included. 
An identical set of segments H' is constructed at the line y = 2. Finally, we enclose this set of segments 
in a rectangular polygon P whose corners have the coordinates {(-n -2, -1), (2n +2, -1), (2n +2, n +2), 
(-n -2, n +2)}. Now let S be the union of H, H', P and e. Let gi (resp. g/') denote the point gap between 
two consecutive segments hi_ I and h i (resp. hi'_ I and h i' ). Let G and G' denote the set of gaps 
for H and H' respectively. It should be clear that every pair of gaps giEG and gs' EG' , O~i,j~_n, determines 
a maximal line segment with one endpoint on e and the other on a side of P, and which does not intersect 
any other seg- ment. We will call such a maximal line segment a "ray" (in slight abuse of standard terminology). 
There are q~ ~(n ~) rays altogether. Figure 2 shows the construction n )) ((-T -3, -1), (2n -I-3, -1), 
(2n +3, n ), (-~ --3, for n ----4; the outer polygon P is not shown. Let pt be the intersection of the 
half space // ~> 2 and the region bounded by P. It is clear that the visibility from c within P' is restricted 
to rays only. Therefore, an inter- section point of two rays in P' is a vertex on the boun- dary of V(e 
). If we can show that the t'~(n ~) rays inter- sect in ~(n4) distinct points in P', the bound will fol- 
low immediately. However, the intersection counting argument is a bit involved because many rays are 
paral- lel, and many intersection points have more than two rays passing through them. We will postpone 
this proof until Section 3.4, and proceed to describe another configuration for which a lower bound of 
t~(n 4) is more readily demonstrated. 3.2, Rational Configuration Our second configuration uses open 
segments of rational lengths. The main idea behind this construction is to arrange the gaps so that t'I(n 
2) rays can be concep- tually bundled into t~(n ) bundles, each containing t'~(n ) rays, such that t~(n 
~) bundle-to-bundle intersections are all distinct, and each generates t~(n 2) distinct ray inter- sections. 
In this way, the problem of counting multiple intersections is avoided. We will first describe this configuration 
and then prove the lower bound of t'~(n 4) on the number of distinct intersection points. The segment 
e has endpoints (-~-I, 0), (2n +I, 0). The first set of segments H is arranged along the line y ~ I, 
and is composed of two parts: one lying to the right of the origin, H÷, and the other lying to the left 
of the origin, H_. Each segment hl EH+ is an n open segment (a,, bs), where a~--~ (n--i-, 1) and b i 
= (n-~-~,n 1), 0<i<n Each segment hiGH_ is n +n 1) and an open segment (al, bi ), where al = (-~ i n 
n bi ---- (-~- +-~-~, 1), for l<i <n . H_ has two addi- tional segments with coordinates {(-? -2, 1), 
(-2' 1)) and {(-, 1), (-~ +1, 1)}, and H+ has two segments with coordinates {(n-1, 1), (n, 1)~ and {(n, 
1), (2n +2, 1)). The second set of segments H' is arranged at y ~ 2, and consists of open segments (a,, 
~,), . n 0~ t < ~, where a i = (i, 2) and b, = (i+l, 2). H' is completed by adding two more open segments 
with coordinates {(-?-2, 2), (0, 2)) and {(2' 2), (2n +2, 2)}. Finally, this set is enclosed inside a 
rectangular polygon P with corners Figure 3 shows this construction for n -----I0; only certain rays 
of interest are drawn to minimize cluttering. Using the notation introduced in Section 3.1, the set of 
gaps between the consecutive segments of H can be split into two sets G+ and G.~ with G+ having strictly 
posi- tive X-coordinates for each gap. A gap glEG+ has X- n coordinate of the form n--~--~- , and a gap 
giEG_ has X-coordinate of the from -~ +n ; note that the point (0, 1) is a gap in G~. The set of gaps 
for H' consists of points whose X-coordinates have integer values between n 0 and ~-. We will call this 
set G' . For convenience, we will refer to a gap by its X-coordinate whenever there is no possibility 
of confusion Let P' be the intersection of the half space y >_ 2 and the region enclosed by P. It should 
be clear that the visibility from s in P' is res- tricted to rays determined by two gaps, one in either 
G or G+ and the other in G' . An intersection point of two rays is a vertex on the boundary of V(e ) 
Our pri- mary concern now is to show that fl(n ~) rays con-structed in this way intersect at f~(n 4) 
distinct points in pt. 3.3s Proof Of Lower Bound For Rational Configuration In order to prove the bound 
on the number of intersections, we will consider only the region of pt that lies between two vertical 
lines C L and C n , where C/, denotes the line z = 0, and CS denotes the line z ~ ~. n We call this region 
P'' LetRs be the set of all rays determined by gap i of G', 0<i <~, n and gap n--: n of G~ where i <j 
~n. Similarly, let L~ be the J set of all rays determined by gap i of G' , 1<i <2'  n n n and gap -~ 
+--rj of G_, -~ -i < j _< n. Note that these definitions imply that I R, [ = (n -i ), and 11 [Li I -~ 
(~ +i). Next we will show that if riER ~ (resp. rs ELi) and rj ERj (resp. rj ELi ), i ~j, are two rays, 
then rs and rj do not intersect inside P". If i =j, then it is clear that r~ and rj intersect at the 
gap point (i, 2) only. Hence we will concentrate on the case i ~j. We prove the claim for Ri; an identical 
reason- ing works for Li. n Lemma lz Let rsER i and rjER/, 1~i~3<_~ , he two rays. Then, r i and rj do 
not intersect each other 16  y=2 y=l y=O0 I 2 3 4 CL ] CR Figure ~: Integer Configuration for n =4. 
y=2 @ CLI 5 \ 6.66 CR Figure 8: y=l Rational Configuration for n -~I0. A= y ~'°X-A'-y min,L --J ~~÷1 
B ~ Figure 4: Proof of Lemma 1. n n E  n F G 0 2 inside P' ' . r i e EL i. But this implies that the 
rays r iER i and Proof." First, note that P is chosen suitably tall to ensure that both r~ and r i intersect 
C/. inside P' ' , say at #, and Pi respectively. Without loss of generality, we assume i < j and show 
that Pi < Pj. It suffices to prove the lemms for two consecutive indices, namely, i and j----i +1. Let 
ri max (rj n~a) be the ray of R i (R i) with maximum (reap. minimum) slope as measured clockwise about 
i (reap. j). Let ri mix intersect C t at pi raM, and let r/nln intersect CL at p ntu. We show that y 
rnax = p/rain. It is clear that rl n~x is determined by gap i ft of G' and gap n--~-~-of G+, and rj ntn 
is deter- mined by gap j of G' and gap n of G~ Figure 4 illustrates this situation. By considering the 
similar tri- angles AABD and AAEG, we obtain AE EG pjntn n AB BD ,i.e., (1) pi n~u -I i +1 And, by 
considering the similar triangles AA ' BC and AA ' EF , we obtain B A' E EF . Pi n=x n-i+l n 2 A ' B 
=-ff~ ,i.e., --= = yin~_I i "~-1( ) It follows from (1) and (2) that p nffix= iljmln. Since any other 
ray of R, intersects C L below p UmX and any other ray of R i intersects C'~ above p1 n/n, it follows 
that no ray of R, intersects with s ray of Rj in P' '. Q.E.D. A similar reasoning holds for L. 's. The 
locations of the gaps were chosen specifically to ensure that yinmx _ pjn/n. Now we can establish a 
lower bound on the number of distinct intersections between L i's and Rj's in P' '. Every ray in L i 
intersects with every ray n of R), i<j<g (see Fig. 3). Since I L, I = ('~ + i) and I Ri I ----(n-j), 
the lower bound on number of intersections is --.a_ 1 2 s(n)= ,~tlL, I'(IR,+ll + IR,+tl +...IR,/~-ll) 
-I n -I 2 B . i  = ,~,(T +' )'i ~+, (" -.I ), (3) which is ~(n4). It is easy to show that all intersection 
points reported in (3) are distinct. For a contra~liction assume that two intersection points :~x and 
=2 are the same, where z i is the intersection of rays r IER, and r i' GLj and ~ is the intersection 
point of rays r~Rl and r~ER l also intersect at zi=z i, which contradicts the claim of Lemmx I. Hence, 
there are C;(n 4) distinct inter- section points between the f~(n 2) rays determined by the segments 
of our Rational Configuration. This completes our discussion on the Rational Configuration. &#38;4s Proof 
Of Lower Bound For Integer Configuration We now show that, despite multiplicities, the number of distinct 
intersections in the Integer Configuration is f/(n4). Let p be a point of intersection above p ----2 
of at least three rays. Then p is the apex of at least two triangles based on the bottom row, as illus- 
trated in Figure 5. i 7 - \ i Figure 5: Counting intersections. Let b i ud o I be the widths of the 
left triangle at the bottom and top rows respectively, and let b I and a I be the corresponding widths 
for the triangle that includes the left triangle; again see Figure 5. Then we must have b~ b I bin 2 
-~--or b~= Since apa~bx, b ~ are all U 2 U 1 al integers, a I must divide blu ~. Suppose first that a 
1 and bl are relatively prime. Then ax must divide aw and the larger triangle is just an integer multiple 
scale version of the smaller. Suppose second that ai and b x are not relatively prime. Let a 1---- ca 
l' and b l= cb t' , with a t' and b l' relatively prime. Then bl ~ a2 which implies that a~' divides 
a~ Let b2~ al I , a~=da z I . Substitution yields b ~db l: Thus ai and b~ are not relatively prime. 
Thus both triangles are integer multiple scale versions of yet a smaller triangle of widthsul' and b~ 
. 18 The conclusion of this analysis is that all multiple (3 n2CX + o (1))----- nCn 2) (see ICrl, PP- 
108). This intersections can he obtained as scale multiples of a left- most, thinnest triangle with relatively 
prime a and b widths: leftmost because we are treating the scaling as expanding towards the right, and 
thinnest in that a and b are relatively prime. Thus the number of distinct intersections is equal to 
the number of leftmoet, thinnest triangles. We now proceed to count these triangles. Let a triangle he 
determined by a left line through (b 1,1) and (a 1,2) on the bottom and top rows, and a right line through 
(b2,1) and (a~,2), and let b~b~-b 1 and a--a~-a t [note the notation here is different from above]. Let 
n be the number of gaps in each row, numbered from 1 to n. The number of choices for each of these quantities 
is as follows: b : b may t~ke any value from 2 to n. b -~I cannot result in an intersection above y -~2. 
b t: b I may range from 1 to n-b. We will partition / this range from 1 to rain(b, n-b ), and the remainder. 
 b2: b~is fixed at bt+b once b is set. a : If a > b, then the triangle does not result in an intersection 
point above #----2; thus a <b. Moreover, a must be relatively prime to b, oth- erwise the triangle is 
not thinnest. al: a I can range from 1 to n-1 when bl<b, hut only from 1 to a when b 1~ b, otherwise 
the tri- angle would not be leftmcet. When b t<b (and note that mln ( b, n -b ) <_ b ), the situation 
is simpler; we will partition this range into two parts, from I to n -b, and the remainder. a2: a~-~ 
a t+a cannot be greater than n, and since a <b, it must be less than al+b. Within the range a t~l,...,n-b, 
the latter limit applies, and in the remainder the former limit~gpplies. To simplify the calculations, 
we will ignore the ranges of b I and a I that interact with the boundaries of the rows. Thus b t will 
range from 1 to rain ( b, n-b ) and a t will range from 1 to n-b. Therefore the quan- tity we obtain, 
S (n), is s lower hound on the number of leftmost and thinnest triangles. Concatenating the four choices 
above yields the following formula~ S(n) = ~. rain (b, n-b ) ~(b ) (n-b) (4) where ~b ) is the number 
of numbers lees than b and relatively prime to b. We now show that this sum is n(. 4). Jt It is known 
that tE ~b ) s~/4 easily implies that b ~/4~(b )~f~(ne). Using these sum- mation limits, and replacing 
rain (b, n -b ) and (n -b ) in n . equation (4) hy their lower bounds of -~- yields n n s~/4  s(n) 
> (¥)(¥) ~/4 ~(b) = ~(n4). Therefore $ (n)=f~(n 4). This concludes our discussion of the Integer Configuration. 
We now modify the open segments used in the above two constructions to closed segments, and obtain non-degenerate 
V(c)'s with the same lower bounds. This requires computing a sufficiently small rational number e such 
that modifying the point gaps of our original constructions into e-gaps, which enlarges the rays to beams, 
does not merge distinct intersection points. It is shown in the full version of this paper that a bound 
of e<O(n-X4) suffices for the integer configuration, and e<O(n "el) suffices for the rational con§guration. 
The implication is that the coordinates need only polynomial accuracy as a function of n. The main result 
of this section can be summar- ized as follows. Theorem 1: There exist configurations of n line seg- 
ments and a specified segment v such that the visibility polygon V(e ) has f~(n ¢) vertices on its boundary. 
Although the lower bound configurations described in Sections 3.1 and 3.2 establish that V(e) contains 
fi(n ¢) edges on its boundary, many of them are collinear. Therefore, fi(n 4) computation may not be 
required if the boundary need not be reported explicitly. However, in both the configurations there are 
f~(n 2) dis- tinct rays that lie along the boundary of V(e ). Conse-quently, any algorithm designed to 
compute V(c ) must consider each of these fl(n ~) rays. Theorem 2: Any algorithm that computes the region 
of the plane visible from g specified segment e in the presence of n other line segments must spend fi(n 
2) time in the worst case. 4. Algorithms for Vlslbility Polygon From A Line Segment Let S -----(st, s~ 
...... an, ab) be the given set of segments, where the visibility polygon is to be computed from ab. 
Let P ~-(vl, v~ ...... v N, a, b) be the set of endpoints of segments of S, where N ~2n. We a~ume that 
no three points of P are collinear. The visibility polygon from ab is denoted by V(ab ). 19 Our algorithm 
uses the straight line visibility graph G between the endpoints of segments in S as the underlying data 
structure. The vertex set of G is P, and two vertices vl and v/ are connected by an edge if segment vl 
v) does not intersect any segment of S. The following lemma shows that the edges of G when extended in 
both directions until they hit a segment of S are sufficient to construct VIab ). We omit the simple 
proof of this lemma. Lemma 2: Let z be a point on the boundary of V (ab). Then z lies on a line determined 
by two vertices of P. Consider extending each edge of G at both ends until it hits a segment of S. For 
an edge v, vj, let s i and o~ be the segments hit, respectively, at zl and zj, where z, is closer to 
u, than uj. A segment at co is implicitly assumed to ensure that each edge of G when extended intersects 
with segments of S. Let E v be the set of all edges of G extended with one endpoint on ob. Ifv, E{a, 
b } then the segment vi v i is extended only in one direction, i.e., vi-v j. Now, we can formally state 
a corollary of Lemma 2. Corollary 1: The set of edges E -~ EvUS suffices for computing the boundary of 
the polygon V(ab ). Throughout the remaining discussion, we consider the extended visibility graph Go, 
whose edge set is E v and whose vertex set consists of the endpoints of edges inE v. Let L (v ) be the 
list of O(N)edgesofE v that pass through v, sorted around v counterclockwise. Let L(v) = (e x, e 2 ..... 
, st). The edge e~ is-determined by the vertices v and v,, and its two endpoints are denoted by z, and 
z i' respectively, where one endpoint z i lies on ob and the other endpoint zi' lies on a segment si' 
ES. We assume that the edge e, is directed from z~ to z/. If an edge e, ELIv) can be rotated infinitesimally 
counterclockwise about ~ while maintain- ing its contact with ob and si, we output a triangular region 
bounded by e~, e~+~ and s~. This triangle is con- ~idered "rooted" at v. A simple argument will show 
that this triangle is entirely visible from a~. In addition, we show that the union of all such triangular 
regions is, in fact, V (oh). We defer the proof of these claims, s.nd proceed with the description of 
an algorithm for ¢on- structi~:g these triangular regions. Algorithm-A: Trianoulor Reoions Of VisibiLity 
From ab 1. I'or each vertex v EP do begin 2. Let L (v)=(e 1, e 2 ...... et ); {ei= z, z/ , z, Ea6 } 
 3. for i = 1to k do begln 4. if z i is closer to v than v~ then 5. If v# lies to the right of e, then 
 i r I 6. Zi+l *--ei+lNSi ; pt 7. Output the triangle Az,' vzi+ x 8. else 9. %i ~'-segment with 
u i as an endpoint;  tt 10. Xi.p1 ~ ei.t.lASvi; 11. Output the triangle LXv, vz,+' 1 ; 12. else 13. 
if v i lies to the left of el then  sp t 14. Zi+ 1 *'-ei+lr'l# i ; s t  15. Output the triangle ASs' 
vzi+ ] ;  16, end {for i = 1 to k } 17. end {for each vertex} We now proceed to prove the correctness 
of Algorithm-A. Consider rotating each edge e i about v counterclockwise. If the rotation is realizable 
such that e i maintains its contacts both with ab and 8i, the entire region swept by e, during the rotg.tion 
must be visible from ab. Since we consider rotating the edge ej about the vertex v, it does not m~tter 
on which side of e i the segment containing v lies. Therefore there are only four cases to be considered 
depending upon the locations of v and v. along the segment ei. Figures 6a through 6c illustrate the three 
cases handled respectively by lines 5, g and 13 of AIgorlthm-A. The fourth case shown in Fig. 6d does 
not give rise to a visible triangle and the algorithm treats it correctly by not producing the corresponding 
triangle, Notice that the cases involv- ing v E{a, b } or v, E{o, b } nre hnndled correctly by the algorithm. 
This argument establishes the following claim-. Lemms $: A triangular region output by Algorithm-.4 is 
entirely visible from ab. With the aid of Lemma 3, we can now show that the union of all triangles output 
by Algorithm-A is in fnct v(ob). -Lernms 4s Let T i ~ U~.i/, where ~ii is a triangle J rooted at ~iEP 
output by A~odlhm-A. Then, UT, ffi Vlob). t Proof: 20 I x _Si I  Xi+l V i  Si+ I ~ /. ,v (6b) ,~-----( 
I )  +1 /i"' \ \ \ \ o x+ b O _ b I I Xi÷l Xi Si I --~ : // xi ~'~ ,-,"/--triangle "/ output  12)"~..:,v 
previously i/V' ./.." \'\ v / " k \,___ (8c) , ~ "~vi \(I) ," ~ \ (6d) r , k \ 0 b O xi b Figure 
6: Proof of Correctness for Algorithm -B. l (i) Triangles output in Fig. 6a, 6b and 6c are shown shaded. 
ii) The counterclockwise rotation may be blocked by a vertex either in position (1) or (2). iii) A counterclockwise 
rotation is impossible in Fig. 6d. SX . Sx Xl l --"1" , / I I t t , / i ' i x~/ i\/ t t t Z2 i iI _. 
I i .= ~ il '| 0 b o v v b Y Yl Y Yl Figure 7: Proof of Lemma 4. z must lie in the visibility triangle 
rooted at z I with one side coilinear with ZlZ 2. 21 ¢ Follows immediately from Lemma 3. [.iT, ___V(ab 
): We prove the claim by contradiction. Let z6V(ub)beany point such that x~ LIT'" Lety6ab ! be any 
point that is visible from z. Imagine "swinging ~ the segment zy counterclockwise about z until it hits 
some vertex zlEP. Let y,Eab and ZlESffi be the two points at which segment z 1 z extended in both directions 
intersects the segments of $, where s z ES. Now, con-sider rotating the segment y ,z 1 clockwise about 
z 1 such that YlZl maintains its contact with ab and 8,. Let zs be the first vertex of P contacted by 
this rotating seg- ment z~y,. There are two cases to be considered, depending upon the relative positions 
of z~ and zs (see Fig. 7). Notice that the case z,6{a, b } is possible and does not require separate 
treatment. It is easily seen that in either case z lies in the triangle rooted at z~ with one side collinear 
with the segment z ,zs. But since this triangle belongs to ~..JT,, the assumption that z ~ ~.JT, is contradicted. 
Q.E.D.. 4.1. Time Complexity of AigorlthmoA For a vertex v, 6P, the number of visibility edges incident 
on it are at most 0 (N)=O(n). The size of EL (v i ) is, therefore, O (n 2). Since Algorithm-A visits 
each vertex once, and considers each edge incident on it at most once, the worst-case time taken by Algorithm-A 
is O(nS). Hence, we only have to show that L(vi) for each v iEP can be computed in O(n 2) time. We observe 
that a minor modification of Wehrs algorithm [We] suffices for our purpose. Wehl maintains a data structure 
R that maps each vertex v i to an edge s,, where e i is the first edge intersected by a half-ray starting 
from v i in the current direction d (of angular sweep). R is updated each time the direction d coin- 
cides with one of the (5) directions determined by ver- tices of P. Let v/v/ be a visibility edge. Let 
the direc- t tion determined by vj vj be dj. Let R i be the state of the data structure when direction 
is d/. Let v~ map onto the segment s/ in R/. Then vj vj r extended must intersect, s i first, say at 
z/. The other segment inter- sected by v i ,J/ extended, say s/ at z/ , is determined by R when d has 
advanced by 1800 . The segment zj z/ is the extended edge determined by v/v/. We summarize in a lemma. 
Lemma 5z G, can be computed in O(n 2) time and space. Combining Theorem 2 with Lemmas 4 and 5, we obtain 
the following result. Theorem 4z The visibility polygon V(ub ) can be com- puted in O(n ~) time if output 
as a union of 0(, s) tri-angular regions. This time complexity is optimal in the worst-case. Next we 
consider the problem of computing the boundary of the visibility polygon V(ab ). 4.2. Computing the boundary 
of V(ab ) We show that V(ab ) can be output as a polygon in O(nSlogn +k) time and O(n2+ k) space, where 
k = O (n4). We already have the region visible from ub in the form of 0 (n 2) triangles output by Algorithm-A, 
and we want to determine the boundary of this region. We make use of a data structure introduced by Chazelle, 
called a hammock [Ch], to compute Ml the intersections of the 0 (n s) triangles output by Algorithm-A. 
Since each triangle is bounded by three segments, the number of intersections is 0 (n4). We set up the 
planar graph induced by these triangles, and then traverse the faces of the graph to decide whether a 
face is visible from ab or is a hole in the visibility polygon V(ab).The idea is very similar to that 
used by McKenna for hidden surface removal [M]. The details are given in the full version of this paper 
[SO]. The conclusion is the following theorem. Theorem Sz The boundary of V(ab ) can be computed in O(n2logn 
+k) time and O(n2+k) space, where k = O (n4). The time and space complexity are optimal in the worst-case. 
5. Discussion Several other related visibility problems can also be solved in worst-case near optimal 
time by using the triangular regions of visibility output by Algorithm-A. Given a polygon with holes 
and an edge source of light, we can report all connected pieces of the boundary that are illuminated. 
We intersect 0 (, s) triangles output by AIoorithm-.4 with the boundary to obtain illuminated segments. 
Sorting these segments along the boundary sutfices to compute the illuminated maximal connected pieces 
of the boundary in total 0 (n21ogn) time. This is nearly optimal since there can be t~(, 2) disjoint 
pieces; an edge of the polygon aligned with line C L or C R in the Rational Configuration has f/(n 2) 
disjoint illuminated segments. Similarly, given a point zEs, with s i specified, we can locate a point 
y on the illuminating edge that is visible from ~ in O(loon) time after an O(n2ioon) time and 0 (n ~) 
space preprocessing. The results of this paper are summarized in the following table. Problem Lower Bound 
Algorithm Point visibility fl(nlogn ) 0 (nloen ) Edge visib, w. boundary fI(n 4) 0 (n 4) Edge visib, 
w/o. boundary fI(n ~) O (n 2) Visible parts of segments fi(n ~) 0 (n ~logn ) Aeknowledgements It is 
a pleasure to thank Michael McKenna for useful suggestions. The research for this paper was par- tially 
supported by NSF grant DCR-83-51468, and grants from Martin-Marietta, GM, and IBM. 6. References IAA] 
T. Asano, T. Asano, L. Guibas, J. Hershberger H. Imai. "Visibility Polygon Search and Euclidean Shortest 
Paths," Pro¢. ~Oth FOCS, 1985, pp. 1~5-164. [Ch] B. Chazelle, "Intersecting Is Easier Than Sort-ing, 
~ 16 t~ $TOC (1984), pp. 125,134. [CG] B. Chazelle and L. J. Guibas. "Visibility and Intersection Problems 
in Plane Geometry," Sym- po#ium on Computational Geometry, pp. 135-146 (1985). lEA I H. El Gindy and 
D. Avis. "A Linear Algorithm for Computing the Visibility Polygon from a Point, ~ Journal of Algorithms, 
~, pp. 186-197 (1981). JEll H. El Gindy. "An Efficient Algorithm for Com- puting the Weak Visibility 
Polygon from an Edge in Simple Polygons, ~ Technical Report, School of Computer Science, McGill University, 
(Jan. 1984). [Gr] E. Grceswald. Topics From The Theory Of Numbers, Macmillan, New York, 1966. [GH[ L. 
Guibas, J. Hersberger, D. Leven, M. Sharir, R. Tarjan, "Linear Time Algorithms for Visibility and Shortest 
Path Problems inside Simple Polygons," these Proceedings, June 1988. [IA] H. Imai, T. Asano &#38; T. 
Asano. "Visibility of Dis- joint Polygons," Technical Report, Dept. of Math. Engineering and Instrumentation 
Physics, Faculty of Enginnering, University of Tokyo, Tokyo, Japan 113 (1985). ILL] D. T. Lee and A. 
Lin. "Computing Visibility Polygon from an Edge," Technical Report, Department of Electrical Engineering 
and Com- puter Science, Northwestern University, (Jan. 1084). [M I M. McKenna. *'Worst-Case Optimal Hidden 
Sur- face Removal", Technical Report, The Johns Hop- kins University, (March, 1986). ISO] S. Suri and 
J. O'Rourke. "Worst-Cage Optimal Algorithms For Constructing Visibility Polygons With Holes," Technical 
Report, The Johns Hop- kins University, (August 1985). [We] Emo Welzh "Constructing The Visibility Graph 
For n Line Segments In O (n 2) Time," Informa-tion Processino Letters, Volume 20, Number 4, 10 May, 1985. 
  
			