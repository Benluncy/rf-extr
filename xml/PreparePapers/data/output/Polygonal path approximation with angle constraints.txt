
 Polygonal Path Approximation with Angle Constraints Danny Z. Chen~' Ovidiu Daescu~ John Hershberger~ 
Peter M. Kogge,* Jack Snoeyink § Abstract We present efficient geometric algorithms for several problems 
of approximating an n-vertex polygonal path with angle constraints in the d-D space for any fixed d _> 
2, improving significantly the corresponding graph- theoretic solutions based on known techniques (e.g., 
by (nearly) a factor of n for d = 2, 3). As a key step in our solutions, we formulate and solve an interesting 
problem called off-line ball exclusion search (OLBES), that may be of interest on its own. 1 Introduction 
 We consider the following problem of approximating a polygonal path with angle constraints: Given a 
polygonal path P = (Pl,P2,... ,P~) in a fixed d-D space (d > 2), find a path P' = (Pi,,pi~,...,pi~), 
such that for each j E {1,2,...,m}, (1) ij E {1, 2, . . ., n}, (2) ij < ij+l, (3) the subpath (pij,pij+l,...,pii+,) 
of P is entirely contained in the error-tolerance zone of the segment pijpij+, of P', and (4) for any 
two Ph,Pi with h < i, if PhPi is a segment of P', then the angle between PhPi and the next segment ~" 
of pi (i < k) is no smaller than a specified value ~(~') > 0 (see Figure 1 for a 2-D example). We use 
the error-tolerance zone defined in [2], and consider both the minT# (given an error-tolerance e > 0, 
minimize m) and min-e (given m, minimize ¢) versions of the problem. Due to the space limit, we mainly 
discuss our min-# results in what follows. This problem arises in several applications, such as vehicle 
routing (cars, airplanes), robotics, computer graphics, cartography, data compression, etc. While there 
are known results on polygonal path approximations in d-D without angle constraints (e.g., "-'~t. of 
Comp. Sci. and Eng., Univ. of Notre Dame, Notre Dame, IN 46556, USA, {chen,kogge}~lcse.nd.edu. Chen's 
re-search was supported in part by the National Science Foundation under Grants CCR-9623585 and CCR-9988468. 
~Dept. of Comp. Sci., Univ. of Texas at Dallas, Richardson, TX 75083, USA, daeseu@utdalleus, edu. lMentor 
Graphics, 8005 S.W. Boeckman Road, Wilsonville, OR 97070, USA, j ohn_hershberger~mentor.com. §Dept. of 
Comp. Sci., Univ. of North Carolina at Chapel Hill, Chapel Hill, NC 27599, USA, snooyink~lcs.une.edu. 
This re-search was supported in part by the National Science Foundation under Grant 9988742 ~mW P~ _.~..~.:.~-~-'"~ 
P k Ph i ) J '1 (a) (b) Figure 1: Illustrating the (2-D) angle constraint condi- tion: edges ~ and plpk 
can (resp., cannot) be consec- utive (a) (resp., (b)) on the path P'. [2, 4]) and on curvature-constrained 
geometric paths (mainly in 2-D, e.g., [1]), we are not aware of any published work on the specific problem 
we consider. However, one may use some known techniques to reduce the problem to computing shortest paths 
in a graph of O(n 2) vertices and O(n 3) edges. For the unconstrained polygonal path approximation problems 
in d-D, the best known solutions [2, 4] build a directed acyclic graph Gp = (Vp,Ep) on P, where Vp is 
the vertex set of P and the O(n 2) edges of Ep are all valid approximating segments for their corresponding 
subpaths of P, and compute a shortest path from Pl to Pn in Gp. For the angle-constrained versions, the 
main difficulty is how to compute the desired shortest paths in Gp. Our min-# results are as follows: 
(1) O(n 2) time algorithms in 2-D; (2) O(n21ogn) time algorithms in 3- D; and (3) O(n3-2/([~J+l)polylogn) 
time algorithms in d-D, d > 4. Note that the time bounds of our min-# al- gorithms match those of the 
best known unconstrained polygonal path approximation algorithms [2, 4]. The time bounds of our min-¢ 
algorithms also match their unconstrained counterparts [2, 4]. As the main technique, we use a dynamic 
program- ming approach that enables us to formulate as a key subproblem a special off-line range searching 
problem: Given n weighted balls of arbitrary radii and m points in d-D, for each point p, find the minimum-weight 
ball that does not contain p. Since standard range query tech- niques would not give us very efficient 
solutions, we ex- ploit the special properties of this range search problem, and formulate and efficiently 
solve an interesting (more general) problem that we call off-line ball exclusion search (OLBES): Given 
a sequence g = {el, e2,..., en} such that each ei is either a ball Bi of an arbitrary radius or a point 
Pi in d-D, for every point Pk E E, find the smallest-index ball Bj E {el, e2,..., ek-1} such that Pk 
~ Bj. The time bounds of our min-~ and min-e algorithms crucially depend on how fast we solve the OLBES 
problem. We develop efficient data structures that solve the d-D OLBES problem in O(n(logn) a-~) time 
for d = 1,2. For d > 3, a data structure sim-ilar to that in [2] can handle the OLBES problem in O(n2-2/(L~J+l)polylogn) 
time. Since there is a (d-1)-D OLBES instance associated with each Pi of P in d-D, the overall time bounds 
of our min-# and min-e algorithms follow. Our 1-D and 2-D OLBES data structures can also handle on-line 
point queries in O(log n) time each. Further, our solutions can be extended to other types of objects 
than balls, and can be applied to a class of geometric paths and other problems. We mention here that 
other somewhat related problems (e.g., off-line ball inclusion testing [2], off-line range searching 
[3]), have been considered recently. 2 Min-~ Algorithmic Paradigm We first construct the O(n 2) size 
directed acyclic graph Gp = (Vp, Ep) on P that contains all valid approximat- ing segments for the unconstrained 
version, by using the algorithms in [2, 4]. We then compute an angle-constrained shortest pl-to-pn path 
in Gp by a dynamic programming algorithm. Let ACSPj (k) denote the angle-constrained short- est path 
from Pl to Pk in Gp such that the last edge of ACSPj(k) is PjPk. Suppose at the end of itera- tion i 
(i > 1), ACSPj(k) is available for every j : 1,2,...,i and every k = 2,3,...,n such that j < k. At iteration 
i + 1, from the available ACSPj(i + 1)'s, j = 1,2,...,i, we compute ACSPi+i(k ~) for every k' = i + 2, 
i + 3,..., n. This dynamic programming is clearly different from the standard Dijkstra short- est path 
approach. Further, it enables us to perform batched off-line computations, that is, we can compute ACSPi+i 
(k ~)'s for k ~ = i + 2, i + 3,..., n all in the same time (instead of one after another). We sketch 
our ideas below by considering the 3-D case (i.e., P is a polygonal path in the 3-D space). At iteration 
i + 1, note that PjPi+i is the last edge of the available shortest path ACSPj(i + 1) for every j < i+1 
such that Pjpi+1 is an incoming edge to Pi+l in Gp. Let PjPi+i, j < i+1, be such an edge. An outgoing 
edge pi+lpk ofpi+l in Gp, i+ 1 < k, can succeed PjPi+I to extend an angle-constrained (shortest) pathin 
Gp only ifpi+lp~ is not contained in the cone Cone(j, i+ 1) corresponding to the given constrained angle 
J(pj~) for the incoming edge PjPi+i (the vertex of Cone(j, i+1) is at pi+l). Let Pi+l be the center of 
a 3-D unit sphere Si+l. By intersecting each cone Cone(j, i+1) (j < i+1) and each outgoing edge Pi+lPk 
of Pi+l (i W ] < k) with S/+1, we have (at most) i weighted disks Dh of different radii (a disk weight 
is the length of the shortest path along the corresponding incoming edge to Pi+l) and (at most) n - i-1 
points qr on Si+l. For every such point qr, we need to find the minimum-weight 2-D disk Dh on Si+l such 
that q~ ~ Dh. One could use standard off-line range query techniques for this problem, but the solution 
would not be very efficient. (E.g., if we had the same constrained angle for all incoming edges at Pi±l, 
which gives equal-radius disks on Si+l, an O(n4/3polylog n) time solution for this range query problem 
would be possible.) Fortunately, we can do much better by reducing this problem to a 2-D OLBES problem 
and by solving the OLBES problem efficiently. The reduction is done by first sorting the disks Dh by 
their weights and then attaching the points q~ to the resulted disk sequence (at the end of the sequence). 
To solve the 2-D OLBES problem, we do the following: (1) build a complete binary tree T, with each leaf 
storing a disk Dh ; (2) go up the tree T, and at each node v, compute and store the common intersection 
of the disks at all leaf descendants of v, by using an algorithm in [2]; (3) search for the desired disks 
for all the O(n) query points q~, starting at the root of T. Observe that the searching for the smallest-index 
disk Dh that does not contain a query point qr traverses a root-to-leaf path in T. At the root of T, 
we select the query points that do not fall inside the common intersection stored at the root, partition 
those points in two sets (based on inclusion in common intersection at the left child of root) and proceed 
to the corresponding subtree. Since the computation on each level ofT can be done altogether in O(n) 
time, the 2-D OLBES problem is solved in O(nlog n) time. Acknowledgment The authors would like to thank 
Pankaj Agarwal for useful discussions and references. References [1] P.K. Agarwal, T. Biedl, S. Lazard, 
S. Robbins, S. Suri, and S. Whitesides, "Curvature-constrained shortest paths in a convex polygon," Proc. 
l~th ACM Syrup. on Comp. Geom., pp. 392-401, 1998. [2] G. Barequet, D.Z. Chen, O. Daescu, M.T. Goodrich, 
and J. Snoeyink, "Efficiently approximating polygonal paths in three and higher dimensions," Proc. l~th 
ACM Syrup. on Comp. Geom., pp. 317-326, 1998. [3] B. Chazelle, "Lower bounds for off-line range search- 
ing," Discrete Corap. Geom., Vol. 17, pp. 53-65, 1997. [4] D.Z. Chert and O. Daescu, "Space-efficient 
algorithms for approximating polygonal curves in two-dimensional space," Proc. 4th International Computing 
and Com- binatorics Conf., pp. 55-64, 1998.  
			