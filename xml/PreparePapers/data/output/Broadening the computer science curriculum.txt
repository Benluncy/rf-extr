
 Broadening the Computer Science Curriculum James Roberg and C. R. Carlson Department of Computer Science 
and Applied Mathematics Illinois Institute of Technology Chicago, Illinois 60616 roberge@csam.iit.edu 
carlson@csam.iit.edu Abstract Too often, students in undergraduate computer science programs come to 
equate computer science with the nuts and bolts of the field-programming, data structures, algorithms, 
operating systems, programming languages and so forth. If we are to attract students to computer science 
and produce graduates who will excel in the profession, we must broaden our students perspective on our 
discipline. In this paper, we examine an initiative that seeks to broaden the undergraduate computer 
science experience by introducing three new elements into the cmxiculm: a first-year experience that 
focuses on the challenges of computer science, a fourth-year experience that focuses on the initial stages 
of the software design process, and a student portfolio that unities the existing curriculum, broadens 
its content, and provides us with a mechanism for assessing the growth of our students technical and 
non-technical skills. Introduction The typical computer science curricula (ours included) begins with 
a year-long course sequence in programming. Although necessary, these courses tend to have the unfortunate 
consequence of riveting our students attention on the mechanics of computer science. As students move 
through the curriculum, we then struggle to raise their gaze from this limited-and limiting-horizon as 
we This work was partially supported by grants from the AT&#38;T Foundation and Microsoft Corporation 
Permission to make digital/hard copy of part or all this work for personal or classroom use is granted 
without fee provided that copies are not made or distributed for profit or commercial advan-tage, the 
copyright notice, the title of the publication and its date appear, and notice is given that copying 
is by permission of ACM, Inc. To copy otherwise, to republish, to post on servers, or to redistribute 
to lists, requires prior specific permission and/or a fee. SIGCSE 97 CA,USA 0 1997 ACM 0-89791-889-4/97/0002...$3.50 
explore the various elements that form the theory and practice of computer science. Unfortunately, we 
have all seen bright students leave the field early in their studies because they find programming to 
be a mundane, tedious exercise and fail to see that programming is a means, not an end. Even more common 
are the students who leave the field because they find programming to be difficult and fail to see where 
the intellectual pay-off lies in mastering this skill, Most unfortunate of all, however, are the many 
students who succeed in mastering the various technical elements in the curricula but who fail to understand 
that while technical skills are a defining quality of a computer science professional, these skills are 
not the be-all and end-all of the practice of computer science. Other skills-particuhzly, the ability 
to articulate one s ideas in an engaging, motivating manner-are pivotal to success. These are not novel 
insights, They have been the subject of considerable discussion within the computer science education 
community and many efforts have been made to address these problems--ranging from breadth- first curricula 
[lo]; to the use of collaborative [4], case- based [3], experiment-based [l], and discovery-based learning 
[2]; to efforts directed at introducing writing across the computer science cnrriculum [7,9]. This paper 
describes an initiative that we began two years ago which attempts to broaden our curriculum by including 
elements that introduce students to the role of science and technology professionals in today s society--including 
the economic, social, ilnd ethical issues faced by technical professionals examine the fundamental challenges 
of computer science and the interplay between theory and practice in addressing these challenges emphasize 
the non-technical facets of our profession -especially written and oral communications skills 320 . 
explore the initial stages of the software design process-where innovation, experimentation, and internal/external 
marketing combine to define a software product Our goal was to enhance our students perspective on the 
professional practice of computer science by showing them from the beginning of their studies how the 
skills that they are struggling to master are applied to challenging problems in research and industry. 
In so doing, we sought to communicate to our students the interdisciplinary nature of computer science, 
the need for computer professionals to take into account the non-technical aspects of the problems they 
are solving, and the importance of being able to effectively communicate one s ideas to both technical 
and non-technical audiences. We began implementation of this initiative by introducing a pair of year-long 
course sequences that provide a counterpoint to the more technical courses that form the core of our 
cuniculum. The first course sequence, entitled Introduction to the Professions, is required of all first-year 
students. This sequence looks at computer science through the eyes of practitioners and emphasizes the 
breadth and depth of the field. The second course sequence, entitled Senior Design, is required of all 
seniors and explores the less-structured aspects of the design process-including the impact of technological 
change on software products and the importance of selling one s ideas to one s colleagues and one s customers. 
These course sequences represent concentrated efforts at broadening our curriculum. We felt that it was 
critical that these focused experiences be complemented with an increased emphasis on non-technical skills 
throughout our program. We chose student portfolios as a framework for encouraging this emphasis and 
for evaluating our progress and that of our students. Introduction to the Professions Several efforts 
have been made to expand the breadth of the introductory phase of the computer science curriculum. These 
efforts have tended to focus on two strategies: introducing major paradigms or subjects in computer science 
into the programming-oriented CSIKM courses [lo] and introducing the fundamental concepts of computation 
and computability into the non-major, computer-literacy course. Our CS lOO/lOl Introduction to the Professions 
course sequence represents an alternative approach-one directed at majors, but one which emphasizes perspective 
on the field, rather than programming. The CS lOO/lOl sequence consists of weekly lectures and laboratory 
experiences (for a total of four semester hours), In CS 100, the lectures and laboratories are loosely-coupled. 
The lectures are used for a campus-wide lecture series in which invited speakers discuss the social and 
economic impact of technology; the intellectual, ethical, and professional challenges faced by practicing 
scientists and engineers; and the rich career opportunities for creative, energetic people in science- 
and engineering- related professions. One lecture period per month is reserved for meetings of the student 
chapters of professional societies such as the ACM and the IEEE. The laboratory sessions in CS 100 are 
used for a contemporary computer literacy course, with a emphasis on information access (e.g., using 
the University s electronic library and the Web) and communications skills (e.g., presentation graphics 
and Web page creation). Issues raised in the campus lecture series are used as topics for student papers, 
oral presentations, and Web materials. In CS 101, the laboratory and lecture experiences dovetail with 
one another. The lectures are used for a series of presentations by faculty and working professionals 
in computer science and computer engineering (Fig. 1). Each presentation focuses on a particular area 
and explores the challenges faced, the solutions developed, and the current state of the art -including 
a discussion of relevant research being done at our institution and at our industrial affiliates. The 
laboratory sessions in CS 101 partner with the presentations. In the laboratory, students explore a particular 
problem in a given area. These explorations may entail discussing various approaches to a problem or 
experimenting with software that illustrates a technique or algorithm. Little code is written, for the 
goal of the laboratory experience is not to improve the students programming skills, but to show them 
where these skills can lead. Following the lecture/lab series, the class divides into teams. Each team 
researches a particular area in computer science and delivers an oral presentation-with a companion Web 
document-that examines the history and impact of the work conducted in that area. Computer networking 
protocols Database systems Designing computers Robotics and motion planning Software engineering Graphics 
and image processing The Internet and the World Wide Web Figure 1. Selected topics from CS 101 Introduction 
to the Professions II Senior Design Course Sequence The CS 4931494 Senior Design course sequence is 
intended to complement our software engineering course-a required course in which students work in teams 
321 to design and develop a software product using well-defined design and development methodologies-by 
providing an experience that focuses on the background context in which a design evolves, particularly 
the early stages of the design process. These courses form a two-semester design practicum (for a total 
of three semester hours). CS 493 emphasizes communications and analysis skills. Students deliver a series 
of biweekly presentations-with supporting written documentation. They begin by describing their professional 
skills, software they have written, and the technical problems that arose in the development of their 
software. They then propose solutions to a set of open- ended problems that focus on issues such user/client 
expectations and cost-benefit analysis (Fig. 2). Extensive feedback is given on the style and the content 
of the student presentations. In addition to faculty input, students critique their own work and that 
of their peers. CS 494 continues this focuses on analysis and design. In CS 494, particular emphasis 
is given to the dynamic nature of software products and on the need to include user input and seemingly 
outrageous ideas in the design process. Students work in teams to deveIop design proposals that range 
from the addition of new features to existing products, to the development of applications based on new 
technologies, to the creation of new computer services (Fig. 3). Each design proposal is developed in 
a three-stage process: Stage I Blue sky meeting. A design problem is presented and ideas are openly discussed. 
 Stage 2 Rough cut meeting. Design teams outline their approaches. These approaches are then discussed 
and culled to a small, common set that will be fleshed out by each of the teams. Stage 3 Final meeting. 
Teams present design proposals that reflect their interpretation of the approaches that were selected 
in the rough cut meeting. Note that each of these meetings is run by a student facilitator (with faculty 
supervision). Feedback in this course focuses upon content, more than style. Students also review each 
other as teamma tes based on criteria such as leadership, creativity, enthusiasm, and effort Our goal 
for this sequence is to break our students perception of software development as simply a coding problem 
and to refocus them on other, more important, elements of the software development process-including 
the need to evaluate both the utility and usability of software products, the importance of the user 
in software development, the importance of pushing the technological envelope, and the opportunities 
that exist in creating computer-related services, as well as software products. 322 Student Portfolios 
Student portfolios have long been used as the principle means of assessing student ehieriences and e>;pertise 
in fields such as architecture and design. Others in computer science have suggested using student portfolios 
for similar purposes in our field [S]. Our goals in introducing student portfolios were somewhat more 
modest. We saw the process of defining the content of student portfolios as providing a means for evaluating 
the scope of the technical and non-technical experiences in our curriculum, In addition, we saw the portfolio 
contents themselves as providing evidence of student achievement-for us and our students. We began the 
process of defining the student portfolio by asking all faculty members to identify at least one portfolio 
element (paper, project, design, etc.) in each of their courses. The key feature of a portfolio clement 
is that it must clearly demonstrate what a student has learned in a course and it must do so using the 
student s own words and images-in this way, each portfolio element provides both a technical and a non-technical 
component (Fig, 4). The results of this process have been quite illuminating. In some cases, existing 
assignments met this standard and merely had to be identified. In other cases, existing assignments met 
the technical standard, but lacked a written or oral presentation of ideas beyond the design documents 
and program documentation required of all programming projects. In these cases, faculty have worked-or 
are presently working-toward broadening the nature of their assignments to better incorporate non-technical 
components. It was the rare course that was entirely lacking in portfolio elements. In most such cases, 
this absence was a consequence of the limited scope of individual assignments and a lack of cohesion 
bctwecn assignments.  Discussion of Results Evaluating a curriculum initiative can be a diflicult task. 
Did this initiative make a substantial contribution to our students educational experience? To be frank, 
it is too soon to tell. What results we can provide are anecdotal in nature. Based on comments in student 
course reviews and on our own observations as faculty, this initiative has clearly made a material impact 
on our students ability to present their ideas in a coherent, professional mamrer. This was most apparent 
in the case of the CS 493/494 design sequence. The transformation in the students was remarkable-they 
moved from stumble, fumble, and mumble to polished, comfortable speakers who could present their ideas 
and respond to (often aggressive) questioning from their peers. It was clear to them, and to us, that 
the biweekly presentations made a difference. Presenting a professional persona Describing what a program 
does Describing implementation issues Analyzing content and goals Outlining a solution (Individual) 
Presentation describing a student s educational background and professional skills-both technical and 
non-technical. (Individual) Presentation describing a program that a student has created for a class 
or on the job. (Individual) Presentation describing the implementation problems encountered/solved while 
creating the program described above. (Team) Presentation analyzing a company s Web site and suggesting 
improvements. (Ram) Pair of presentations proposing how a company s sales force might take advantage 
of notebook computers. ?igure 2. Design studies from CS 4s 3 Senior Design I Enhancing a software product 
New technologies New technologies Entrepreneurial spirit cream> Design proposal for an improved line/arc 
tool and two new tools for Microsoft PowerPoint. (Team) Design proposal for new GUI controls, including 
a calendar tool and a pick list tool that uses voice input technology. (Ram) Design proposal for a communications 
network monitoring system based on virtual real&#38; technology. (Team) Proposal for a new company that 
produces a computer- based product or service. Figure 3. Design studies from CS 494 Senior Design II 
The CS 101 Challenges in Computer Science have done in high school. As they move through our lecture/lab 
series also elicited positive feedback from the program, they will add portfolio elements from their 
students. Students reported that they had a better sense of courses and work experiences. Using the Web 
as the what computer science is and what computer professionals repository for the portfolios should 
engage the students do (besides write programs). This is a measure of success interest-and encourage 
their cooperation-while at the in itself, since the point of this series was to open the same time providing 
them with a potentially valuable tool students eyes to the possibilities that lie in front of them. for 
marketing themselves to prospective employers or Whether this information will lead to an improvement 
in graduate programs. our rates of attracting and retaining students is unknown at this point, With respect 
to the student portfolio, the chief benefit References thus far has been the process itself [S]. The 
task of identifying portfolio elements has lead faculty to 1. Baldwin D. and Koomen, J. Using Scientific 
re-evaluate the goals and scope of their assignments-Experiments in Early Computer Science Laboratories, 
particularly with respect to the assignments non-technical Proceedings of the SIGCSE Technical Symposium 
on components, In addition, the portfolio elements have Computer Science Education 23, (1992), 102-106. 
proven to be excellent inputs to program assessments that are based on student outcomes rather than credit 
hours 2. Baldwin D. Discovery Learning in Computer Science, counts-a major emphasis of accreditation 
agencies [6]. Proceedings of the SIGCSE Technical Symposium on Where do we go from here? Our main thrust 
over the Computer Science Education 27, (1996), 222-226. coming year will be to increase the impact of 
the student portfolio, Students in this year s CS lOO/lOl sequence will 3. Clancy, M and Lirm, M. Case 
Studies in the be asked to prepare a professional Web page to Classroom, Proceedings of the SIGCSE Technical 
complement their personal Web page. Initially, this page S posium on Computer Science Education 23, will 
contain their resume and examples of work they may (1992), 220-224. 323 I 1 , 4. Daigle, R, Doran, M., 
and Pardue, J. Integrating 8. Riper, J., Cross, V., Delissio, D., Sobel, A. and Troy, Collaborative Problem 
Solving Throughout the D. Perspectives on Assessment Through Teaching Curriculum, Proceedings of the 
SIGCSE Technical Portfolios in Computer Science, Proceedings of the Symposium on Computer Science Education 
27, SIGCSE Technical Symposium on Computer Science (1996), 237-241. Education 27, (1996), 200-203. Derming, 
P. Educating a New Engineer, 9. Pesante, L.H. Integrating Writing into Computer Communications of the 
ACM35, (1992), 83-97. Science Courses, Proceedings of the SIGCSE Technical Symposium on Computer Science 
6. Engineering and Accreditation Commission, Education 22, (1991), 205-209. Accreditation Board for Engineering 
and Technology, Inc. ABET Engineering Criteria 2000, Baltimore, 10. Tucker, A. and Gamick, D. A Breadth-First 
Maryland, 1996. Introductory Curriculum in Computing, Computer Science Education 3, (1991), 271-295. 
- 7. Fell, H., Proulx, V., and Casey, J. Writing Across the Computer Science Curriculum, Proceedings 
of the SIGCSE Technical Symposium on Computer Science Education 27, (1996), 204-209. Course Portfolio 
elements Non-technical components CS 330 Discrete Structures Influence graph program Report analyzing 
an organization s Security system based on a FSA influence graph Interactive text editor User s manuals 
BTML browser Analysis of an existing database system Report analyzing the database I model, features, 
impl., and use CS 430 Intro to Algorithms Testbed for analyzing execution times Report analyzing timing 
studies of sorting algorithms CS 450 Operating Systems System using interprocess communication Reports 
analyzing various Virtual memory system communications and natring schemes 1 CS 455 Data Communications 
Simulation of a three-layer network and Reports analyzing simulation aMAC studies CS 471 Computer Architecture 
II Design of a MIPS processor (team proiect) Engineering design document CS 487 Sojlware Engineering 
Design and development of a software Series of reports and companion product (team project) presentations 
-including requirements analysis, problem specification, system design, and test plan Note: m programmin 
g projects require design documents and program documentation. Figure 4. Sample portfolio elements I--~- 
 324 
			