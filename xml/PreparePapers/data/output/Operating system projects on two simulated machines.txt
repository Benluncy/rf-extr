
 Operating System Projects on Two Simulated Machines James L. Wolfe Computer Science Department Indiana 
University of Pennsylvania Indiana, PA 15705 (412) 357-6104 Abstract: Descriptions of the capabilities, 
implementation, and pedagogic worth of operating system projects based on two simulated machines are 
presented. One machine requires a batch- oriented operating system, involving a complete spooling system 
and multiprogramming. The other machine requires a terminal-oriented operating system that handles a 
command language and performs simple file operations. The simulators perform the actions of a real machine, 
monitor the operating system's performance as it handles simulated workloads, generate reports on the 
quality and quantity of service provided by the students" systems, and help the students debug their 
programs by providing traces and dumps on request. BACKGROUND The material covered in an operating 
system course can vary considerably from university to university or even professor to professor. Some 
courses lean toward the theoretical, emphasizing queueing theory, concurrency handling and mutual exclusion 
problems. Some courses are surveys of several of the best-known operating systems, their functions and 
features. Some courses emphasize the practical side by covering oper- ating system concepts, discussing 
implementation approaches and involving the students in pro- Ere'mint projects. This last course description 
applies to the undergraduate operating systems course at Indiana University of Pennsylvania (IUP); and 
the programming projects include the writing of an operating system for a simulated machine. The texts 
used in this course have been Deitel"s [2] and Peterson &#38; Silberschatz's [4]. Permission to copy 
without fee all or part of this material is grar~ted provided that the copies are not made or distributed 
for direct commercial advantage, the ACM copyright notice and the title of the publication and its date 
appear, and notice is given that copying is by permission of the Association for Computing Machinery. 
To copy otherwise, or to republish, requires a fee and/ or specific permission. &#38;#169;1987 ACM 0-89791-217-9/87/0002/0212 
75Â¢ Writing an operating system (even a simple one) for a real machine in a one-semester course presents 
overwhelming problems: hardware idio- syncrasies, students who are not familiar enough with the architecture, 
non-availability of a systems programming language. The only reason- able solution to these problems 
that provides sufficient instructor control is to use a simulated machine. Several papers have been 
written exploring the use of simulated machines for operating system projects. Shay [6] describes a three 
 phase project involving memory management, CPU schedulJ.ng and job synchronization. Schiper [5] suggests 
an elaborate system, complete with paging, spooling and job command language, to be done in two semesters. 
Shub [7] has the stu-dents simulate the machine as well as write the operating system. The simulators 
at IUP have some similarities to these projects; however, there are significant differences as well 
IUlfs two simulated machines are called HAL and OGRE. HAL is modeled after another simu- lated machine 
(also called HAL), developed at Penn State [1]. It is a simple machine based on 6Ys technology, having 
card readers, printers, spooling drums and memory. The operating system for the machine is meant to be 
batch-oriented. HAL has been in use in IUF's operating systems course for several years; it has proven 
to pro- vide an interesting, challenging project for the s t udents. OGRE was developed at IUP through 
a student independent study project; its purpose was to provide a more modern (termlnal-oriented)opera-ting 
system experience for the students. It is a somewhat more complicated machine, having terminals, printers, 
a spooling drum and a file drum, and memory. The operating system for the machine is meant to be interactive 
and to pro-vide file management. OGRE has not yet been used in the operating system course; it is still 
in the testing stage. OPERATING SYSTEM PROJECTS For HAL, the assignment can be stated in one sentence: 
write an operating system for HAL that includes a complete spooling system and provides for multiFrogramming. 
Naturally, this sentence is embedded in a fairly large document that describes HAL to the students. 
Programming a spooling system gives the students experience in interrupt handling, in controlling many 
simultaneous operations on different devices, in buffering data, and in drum and memory storage management. 
The lectures suggest implementing a spoollng system simitar to the one in Madnick &#38; Donovan [3]. 
Requiringmultiprogramming adds additional experience in memory management and forces the students to 
consider the issues of CPU scheduling and managing state transitions. For OGRE, the assignment can also 
be stated simply: write a timesharing operating system for OGRE that supports a given group of inter- 
active users and a file system. Again, a docu- ment describing the hardware is provided. The details 
of the issues are slightly different, but the students must address interrupt hand- ling, device control, 
memory and drum space management, and CPU scheduling in concrete terms while writing the operating system. 
 The operating system project is assigned in two parts: design and implementation. Students are required 
to produce a design specification before they start programming. The specifica- tion must show the organization 
of the operating system data base, how their operating system will handle the principal tasks associated 
with running jobs and controlling devices (preferably in flowchart form), how the memory and drum space 
is to be allocated and recovered, and how the overall operating system is structured. The design is evaluated 
and returned to the students before they begin the implementation. For the implementation, students are 
permitted to program in either Pascal or PL6. The simulators are written in PL6; but there are separate 
versions to accommodate operating systems in either language. Students are permitted to work on the oper- 
ating system project (both design and implemen- tation) in partnerships or individually. Normally, only 
the better students are encour- aged to work alone; others are encouraged to choose a partner. COMMON 
SIMULATOR FEATURES Although there are differences in detail, the HAL and OGRE simulated machines have 
much in common: the "architecture" and device inter- face, the organization of the simulator program, 
and the information that is reported about a student operating system's performance. The "Architecture" 
The students are given a manual that describes the functions of the hardware. Figure I shows a smnmary 
of the simulators" memory and devices. HAL OGRE Memory 6K bytes 6K bytes Drums 2 spooling 1 spooling 
8 tracks each (IK / track) 1 file (2K / track) Card Readers Up to 3 None Termina I s None Up to 19 Printers 
Up to 2 Up to 5 Figure I. Simulated Hardware The manual tries to make the devices seem real by specifying 
device control registers, port numbers, operation speeds, and actions that are almost identical to real 
devices. The manual also describes registers that control the running of programs (jobs), that keep the 
system's clock, that distinguish interrupts, and that can be used as a timer. OGRE has a few extra registers 
to control the terminals and the tracks on its drums are sectored. HAL's drums have tracks that may be 
accessed in any size blocks. The systems may seem small, with so little memory and drum storage space, 
but everything from the size of a card image to the execution time of a program (job) is scaled to fit. 
This scaling keeps the memory needs of the simulators within reasonable limits as they run on IUlfs mainframe. 
 Simulator Organization On a programming level, the simulator is the main, controlling program which 
calls the student operating system's principal procedure, which must be named OPSYS, whenever operating 
system service is required. These calls consti- tute interrupts from the operating system's point of 
view; OPSYS is expected to be an inter- rupt handler, deciding the interrupt cause and calling student-written 
procedures to service the interrupt. When the service is complete, the operating system is expected to 
issue a privileged instruction that releases control of the CPU and lets the simulator run programs (jobs) 
and perform device actions. The simulator then goes through a loop, advancing the clock, allowing the 
current program (job) to execute, performing data trans-fers and followlng a script of other device/job 
actions until a situation arises that requires generation of an interrupt. The simulator then sets the 
appropriate registers and calls OPSYS again. This cycle continues until the operating system issues a 
privileged instruction that shuts down the machine. A special language feature of PL6 removes activation 
records from the runtime stack so that the simulat0r is not burdened with incomplete calls to OPSYS. 
The way in which the simulator takes control after the privileged instruction is issued makes the simulated 
machine appear to have two operation modes: user mode in which jobs may run and interrupts are-allowed 
and supervisor mode in For both simulators, the students have many which the operating system rims 
and interrupts options in managing memory and scheduling the are not allowed. CPU. HAL and OGRE use 
base and bound registers The privileged instructions that are used roughly correspond to the kind of 
machine instructions that might be reserved for use by the operating system on a real computer. Figure 
2 shows the instruction names on the two machines and briefly describes them. Instruction OGR__j HAL 
Simulator Action STATUS STATUS Sets a register to indicate the status of a specified device. S TART IO 
S IO Initiates a data transfer for a device. HALT FNRDN Terminates the simulation and produces a report. 
WAIT WAIT Advances the clock, performs data transfers, device actions, and scripted events when the time 
is right. RUN LDPSW' Same as WAIT, except that progr~s (jobs) are also executed. DROP --- Deactivates 
a terminal line. Figure 2. Privileged Instructions Note: The operating system can issue PWRDN or HALT 
only once because this instruction termin- ates the simulation. During operating system development, 
students often set up their program to use this instruction to obtain an orderly end to the simulation 
when something goes wrong, The "User Progr~s" A user program that is run on HAL is called a job. Under 
HAL, a job begins as a simulated deck of cards to be read from one of the card readers. The deck begins 
with two job cards that provide the operating system with the job's parameters: job identification, maximum 
execu- tion time, maximum output and memory needed. The student's operating system must use these parameters 
in allocating memory and controlling execution. Single jobs or stacks of jobs are permitted in the readers. 
 A user program that is run on OGRE is called simply a program. Such programs are contained in files 
on the file drum and are executed in response to a user command. The students are given a set of universal 
parameters for memory, CPU and printer usage by programs; they must make their operating system use these 
parameters to control program execution. For both simulators, the programs (jobs) require no compilation, 
no linking and no memory relocation adjustment prior to exeCution. Once started, a job (on HAL)reads 
its data card imaged through input interrupts and generates output for spooling through output interrupts. 
Once started, a program (on OGRE) reads its data from one file and writes to another file through interrupts. 
 for program (job) control so that contiguous memory allocation is required. However, students may use 
fixed or variable partitions; and swapping is possible. Many scheduling techniques (Shortest-Job-First, 
Shortest- Remaining-Time-First, even multi-level feedback queues) are possible; but most students use 
a simple round-robin approach. No student has yet tried to use swapping or multi-level feedback queues. 
 The 'Workload" In order to make a reasonable looking workload for the simulated machines and their 
operating systems, data scripts are used. For HAL, the scripts are short but intricately arranged; only 
a few scheduled interrupts and job parameters are needed in the script. For OGRE, these scripts are complex 
and are produced with the aid of utility programs; all input characters and program events, and many 
device actions are included in the script. For both machines, considerable planning is required to generate 
particular situations for the operating systemS, A typical simulated workload for an operating system 
on HAL consists of 6 to 10 jobs that can be run completely through HAL in 25 to 40 simulated seconds. 
Scripting determines the timing of jobs entering the card readers and directs each job's actions as it 
executes. A variety of normal and abnormal job termimtions are included in the workloa&#38; A typical 
simulated workload for an operating system on OGRE consists of about I0 users who logon, enter a series 
of commands, perhaps run a program and logoff over about 5 minutes of simulated time. A workload includes 
 the use of each OGRE command at least once, several commands which are expected to cause the operating 
system to generate error messages and multiple logons by users. Evaluation Actions The simulators 
monitor all operating system actions. Thus, whenever the student operating system issues an improper 
privileged instruction or fails to react properly to an interrupt, the simulator displays an error message. 
Depending on the cause of the error, if the operating system does not take corrective action (such action 
is rarely possible), the error message may be repeated several times or related error messages may appear. 
 The simulators also provide a convenient way to trace both simulator and operating system actions. The 
student may trace privileged instructions, interrupts, and data transfers separately or simultaneously 
in almost any combination. The student may also request a dump of specific areas of a drum or the memor 
y. The simulator generates recognizable card images (HAL), file records (OGRE) and print images. Thus, 
the students can examine a dump and deter- mine whether or not information is in its proper place without 
extensive analysis. Simulator Report The report that the simulator produces when a PNRDN or HALT is issued 
is primarily for the instructor's use. It would he an exceeding difficult task for the instructor to 
evaluate a student operating system by examining the program alone. These programs are typically 1200 
to 1600 lines of Pascal and are quite intricately put together. The simulator report reveals what the 
student operating system does and measures how well it does these things. The report also shows what 
is not done The report is divided into several parts: device actions, terminal events (OGRE only), program 
(job)actions, program (job) progress, user actions (OGRE only) and statistics. By carefully examining 
the simulator report, the instructor can gain a good understanding of what a student's operating system 
is doing and often where it is going wrong. Each of the report parts is described briefly in Figure 3. 
 Report Section Information Contained Device Actions Ntnnber of initiations and errors per device, number 
of reads and writes for drums. total time each device was available and was in use. T~minal ~ents Numbers 
of users; commands, and characters input; and lines output. Job Actions Number of card images or file 
records read, print images output, execution time, memory residency time, job status at shutdown, etc. 
Job Progres s Starting and ending times per job for reading cards, execu- ting, and printing output. 
User Actions Command counts, connect time, lines of output. Statistics Numbers of interrupts, errors, 
privileged instructions ; measures of operating system efficiency. Figure 3. Simulator Repot t OGRE 
OGRE provides several significant features which do not correspond to anything in HAL; these include 
the use of terminals, user inter- action and a file system. These features complicate the OGRE simulator 
in that all user commands must be scripted, logon IDs must be stored initially on the file drum. and 
starter files must be set up for use during the simulation. The'~s~s" Simulated users logon through a 
terminal and can then perform actions by using OGRE's command language. The operating system must recognize 
valid logon IDs and reject invalid ones. The operating system must interpret the commands and respond 
to ,them in an appropriate way. The OGRE commands are described briefly in Figure 4; their syntax is 
not shown. Comand Operating STstem Action Make a new file which is a duplicate of an existing file. 
 CREATE Add a new logon ID to the valid IDs. DELETE Delete a file. DIR Display the directory of files. 
 LDIR Display all valid logon IDs. LOGOFF Terminate the user's terminal session. PRINT Spool a file 
to he printed and then print it. REMOVE Eliminate a logon ID. RUN Run a progrm that is contained in 
a file, taking input from a second file and sending output to a third file. STATUS Display the number 
of current users. clock time and user's logon ID at the terminal. TYPE Display a file on the teminal. 
Figure 4. OGRE Commands Many of the operating system's responses to OGRE commands requires generation 
of a display. The form for each display is rigidly controlled so that the simulator can determine whether 
or not the operating system's response is correct. The operating system must also respond by sending 
a specified warning message to a terminal when a user enters an invalid command. The "File System" All 
of OGRE's files have the same form and are accessible by all users. Files are not stored in contiguous 
sectors on the files drum. An entry in the master file directory for each file specifies the location 
of the sectors that hold the records of a file. All sectors that are part of a file are full of records, 
except possibly the last sector. The master file directory contains one file descriptor block (FDB) for 
each file. T~e master file directory itself may be regarded as a file in that it is also distributed 
in non-contiguous sectors on the file drum. The FDB for the master file directory and a list of the valid 
logon IDs are kept in a fixed location on the files drum (originally placed there by the simulator at 
the start of simulation). CONCLUS IONS REFER~ CES Both HAL and OGRE provide a programming experience 
that the students may view as ranging from very interesting and exciting to night- marish. Students who 
heed the warnings about the size and complexity of the project and who pick up on the many design and 
implementation hints given in lecture generally do well. Less serious students who are not as diligent 
or persistent find the project more like a puzzle that has no solution. HAL is a fairly rigid system, 
representing older technology with cards and a batch orienta- tion. Students who have had little or no 
use of card readers have some difficulty with the hardware description of them. OGRE represents a more 
modern system, one that students are better able to relate tO. There is no need to explain to them how 
a terminal works or the basic nature of e file system. The OGRE simulator is more complex than the HAL 
simulator; but it's organization can provide better feedback to the students. HAL's simula- tion actions 
are so closely tied together that students must have e working spooling system, CPU scheduler and memory 
management scheme before they can see positive results in the simulator report. OGRE's simulation actions 
are more independent; the student can achieve partial success with each command that is imple-mented 
(once the operating system recognizes logons ). OGRE is a great deal more flexible than HAL in the kinds 
of operating system projects that may be assigned. Operating system projects that implement only a portion 
of the command language may be given. For example, the RUN command may be omitted if the instructor wants 
to concen- trate on terminal interactions. In addition, other features such as file protection, printer 
assignment, and terminal communications may be included in a project by adding commands to OGRE or sllghtly 
modifying the file system. These features combined with its more modern archi- tecture make OGRE an great 
improvement over HAL for both the student and the instructor. I. Comer, D., "The IIAL/411 Simulator 
Student Manual," Pennsylvania S tate University, June 1975. 2. Deitel, H.M., An Introduction to Overatin~ 
Systems, Addison-Wesley, 1984.  3. Madnick, S.E. and J.J. Donovan, Overating Systems, McGraw-Hill, 19~4. 
 4. Peterson, J. and A. Silberschatz, Overatin~ System ConcEpts, Addison-Wesley, 1985.  5. Schiper, 
A., et.al., "A Paged Operating System Project," SIGCSE Bulletln, 16, l (Feb. 1984), 34-38.  6. Shay, 
W., "A Project fur Operating Systems Simulation," SIGCSE Bulletin, 18, 1 (Feb. 1986), 289-295.  7. Shub, 
C., "A Project for a Course in  Operating Systems," SIGCSE Bulletin, 15, I (Feb. 1983), 25-30.  216 
			