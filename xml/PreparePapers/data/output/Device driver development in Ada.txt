
 DEVICE DRIVER DEVELOPMENT IN ADA A CASE STUDY Lee G. Slocum Norden Systems 40 Continental Blvd. Merrimack. 
NH 03054 OVERVIEW A fair amount of skepticism persists in the software community over using the Ada 
language to solve real time systems programming problems. The refrain is often heard, "Sure, we support 
Ada in principle, but the compilers and tools needed to do the kind of work we have to do just aren't 
ready yet." The perception that existing tools are immature discourages the widespread use of Adao It 
also leads some people to conclude that Ada, as a result of its complexity, is intrinsically unsuited 
to handling applications with severe performance constraints. Norden Systems has perodically encountered 
skepticism about Ada in marketing its line of Mil VAX computers. In order to address concerns about real 
time responsiveness, Norden Systems, with support from Digital Equipment Corporation, developed a device 
driver specifically to evalute Ada for the VAXELN(R) environment. VAXELN is Digital's VAX based operating 
system for real time applications. One of the selling features of this product is the ability to develop 
device drivers in a higher level language, quickly and efficiently. Our impression is that writing a 
device driver in Ada for this environment is a reasonable thing to do. Functionality required to write 
device drivers in the Ada language is available under VAXELN and is, in fact, equivalent to functionality 
provided in other languages supported by VAXELN. Driver I/0 overhead, which is dependent upon the organization 
of the driver, is on the order of 100 microseconds on a VAX 3500. A driver can be implemented relatively 
quickly. Most of the language constructs available in Ada for driver development were quite useful, although 
there were instances where some facilities were used in what could be described as a "creative," i.e. 
unorthodox, manner. COPYRIGHT 1988 BY THE ASSOCIATION FOR COMPUTING MACHINERY, INC. Permission to copy 
without fee all or part of this material is granted provided that the copies are not made or distributed 
for direct commercial advantage, the ACM copyright notice and the title of the publication and its date 
appear, and notice is given that copying is by permission of the Association for Computing Machinery. 
To copy otherwise, or to republish, requires a fee and/or specific permission. DRIVER IMPLEMENTATION 
ALTERNATIVES The writer of a device driver for the VAXELN environment has the option of employing a "monitor" 
or "process" type of structure for the design of his driver. A monitor structure incorporates the non-interrupt 
level driver processing within the context of the applica- tion, i.e. the driver functions are implemented 
as subroutines. The advantage of this approach is that overhead associated with calling the driver is 
minimized. The disadvantage is that the driver/application boundary is not as distinct as it otherwise 
could be. In the case of VAXELN, the application code runs in kernel mode in order to allow the driver 
code to perform functions using privileged system services. Driver modularity and integrity are therefore 
compromised somewhat. A process structure separates the driver from the application so that the driver 
runs as a concurrent process or task. The advantage of this approach is that the driver and the application 
interface via message passing which offers a more formal interface and promotes a more modular design. 
The major disadvantage is in the performance overhead that is incurred through message passing between 
the application program and the driver. This overhead, which includes at least one context switch, may 
be unacceptable to an application with severe real time performance constraints. When a driver is structured 
to run as an inde- pendent process, different mechanisms can be used to communicate between the device 
driver and the application program. "Native" operating system services can be used for the communication 
as opposed to the Ada rendezvous mechanisms. Native mechanisms use Send/Receive system services. There 
are, of course, performance differences when using different mechanisms. The monitor and process structures 
are represented pictorially in Figures I and 2. There are "shades of gray" between the monitor and process 
type of structures. Hybrid types of structures can be employed that offer a more formal boundary between 
the application and the driver but the driver uses a reduced context that is less expensive to swap. 
This is the 25 SUBROUTINE INTERFACE [-- PASSING INTERFACE i~rrR l~ H SERVICE [I ! 0 S K E R N E L FIGURE 
1 MONITOR STRUCTURE ! S K E R N E L ,ll FIGURE 2 PROCESS STRUCTURE approach adopted, for example, by 
VMS. More on the concept of monitors is described by Hansen [3]. In real time systems, a key measure 
of performance is the amount of time that elapses between raising an interrupt on an I/O bus and the 
execution of the application program waiting for the interrupt. In a monitor based system, this time 
consists of the interrupt latency, the time spent in the Interrupt Service Routine and what is normally 
referred to as scheduling latency. In the process type system, the overhead associated with message passing 
is added to the overhead associated with a monitor based system to obtain the I/O overhead. In order 
to gain an understanding of the performance characteristics of VAXELN, three different variations of 
a primitive driver were implemented that used the following interfacing techniques: * Monitor procedure 
call interface Process structure using native SEND/RECEIVE operating system communication services. 
 * Process structure using rendezvous mechanisms  The functionality of the driver consisted of sending 
or receiving a character from a terminal. On the receive side, the presence of a character would cause 
an interrupt to be generated, which would result in the running of an Interrupt Service Routine (ISR). 
The ISR would obtain the character from a hardware register and place it in a software buffer. The non-interrupt 
mode of the driver would then be activated so that the character could be processed further. In view 
of the experimental nature of this driver, "further processing" consisted of passing the character through 
to an "application" which displayed it. There was a great deal of code commonality between driver variations. 
Coding differences were confined, for the most part, to the interface between "application" code and 
driver code. Procedures for building the system also varied slightly depending upon the version of the 
driver used. Measurements of I/O overhead were taken on a VAX 3500. Elapsed time values were captured 
by the driver and the associated application and were transmitted back to a host system using the distributed 
debugger and its supporting network service (more on the tools used is described in a following section). 
For the monitor type structure, the I/O overhead was approximately 140 microseconds. This was a surprising 
result because an overwhelming percentage of the processing performed is incurred by the SIGNAL DEVICE 
service which takes 90 microseconds, according to the VAXELN Release Notes[6]. When we inquired about 
this discrepancy with a key VAXELN developer, the following explanation was offered. The VAX 3500 has 
a two level cache, some of which is on the CPU chip. Programs that use a small amount of address space 
really benefit from this cache. Because our benchmarks relied on the distributed debugger and the network 
service to transmit performance measurements back to a host, a very large amount of address space was 
used and the cache became purged, as far as our routines were concerned. DEC's measurement of the SIGNAL 
DEVICE time was performed in a stand-alone environment. It is reasonable to assume that the cache would 
have been hit at a much higher rate in this environment. We did not have an opportunity to verify this 
explanation but consider it to be reasonable. In any event, 140 microseconds is an impressive time. For 
the process type structure using Send/Receive mechanisms between two separate executeable images, the 
I/O overhead was measured at 730 micro- seconds. Of these times, 450 microseconds was consumed by the 
Send/Receive and the rest was related to other processing. For the process type structure using rendezvous 
mechanisms, the I/O overhead was 545 microseconds and of this, 300 microseconds were related to the rendezvous 
itself. When comparing this number with the rendezvous time for other environments, it's important to 
keep in mind that the rendezvous involved two separate processes, that is, a dispatch, and not a subroutine 
interface. We did not have an opportunity to experiment with multi-processing hardware configurations. 
Ada LANGUAGE INTERFACE TO MACHINE-DEPENDENT FUNCTIONS Use of representation specification features of 
the language to represent hardware characteristics of a specific controller is straightforward and relatively 
routine. Some interesting complications are encountered, however, in interfacing with the VAXELN system 
services and VAX hardware using the abstract types constructed for this purpose. In order to understand 
the interface, it is necessary to understand the purpose of a system service called the CREATE DEVICE 
system service. The CREATE DEVICE system service binds together a device d~iver, the controller hardware, 
and interrupt service routines which handle normal and powerfail interrupt conditions. It is normally 
called during the initialization phase of the driver. The procedure call for a CREATE DEVICE is defined 
by DEC [7] as follows: CREATE DEVICE ( STATUS : out COND VALUE TYPE; DEVICE NAME in CREAT-E DEVI~E NAME 
TYPE; VECTOR-NUMBER : in VECTOR--NUMBER_--TYPET SERVI~ ROUTINE : in ADDRESS; REGION SIZE : in UNSIGNED 
LONGWORD; REGION-: out ADDRESST, REGISTERS : out ADDRESS; ADAPTER REGISTERS : out ADDRESS; VECTOR - : 
out ADDRESS; PRIORITY out UNSIGNED LONGWORD; DEVICE ARRAY : in DEVICE__ARRAY TYPE; DEVICE--COUNT : in 
INTEGER; POWERFAIL ROUTINE : in ADDRESS); The binding together of the three major elements, that is, 
the driver, the controller hardware registers, and the interrupt service routines occurs as a result 
of the driver passing information to the VAXELN kernel about such things as the name of the device involved, 
the size of the communication region shared by the driver and interrupt service routines, and the location 
of interrupt service routines. The kernel in turn communicates to the driver, through CREATE DEVICE output 
parameters, the location of hardware registers and the location of the communication region allocated 
for communication between the driver and interrupt service routines. The kernel obtains information about 
the location of registers and the device as a result of the system building process, eliminating the 
need to hard code this information in the application. The first complication encountered involves the 
allocation of the communication region. This region has to be specially allocated by the VAXELN kernel 
because the interrupt service routines (ISR's) do not have the same context as the normal driver code. 
The address of the communication region is delivered to the ISR as an argument when it is run. The communication 
region is best defined by a record consisting of fields for the data of mutual interest. The VAXELN CREATE 
DEVICE system service does not know about the Ada types defined for the particular driver and simply 
returns an address of a region, with the size of the region specified by the caller. The ADDRESS type 
is provided with VAXELN to refer to a memory location without specifying the type of the object at that 
location. For the device driver to access the communication regibn using the normal Ada mechanisms, the 
returned address has to be associated with an object. There are at least two solutions. The first sol 
uti on makes use of the UNCHECKED CONVERSION function which is provided in the Ada language. With this 
method, the writer of the device driver declares a record type whose fields will hold the data to be 
passed between the driver and the interrupt service routine. An ACCESS type variable is declared, to 
be used to reference a record of that type. The UNCHECKED CONVERSION function can then be used to convert--the 
ADDRESS returned by CREATE DEVICE to the ACCESS variable, causing the ~CESS variable to point to the 
appropriate record. Since the UNCHECKED CONVERSION function avoids Ada's type checking,--it is always 
up to the user of the function to make sure that the bit pattern of the one type will correspond correctly 
to the other type. The conversion between ADDRESS and ACCESS types is appropriate since both types represent 
VAX addresses. An example of this method follows: type COMM REGION TYPE is re-cord - end record; type 
COMM REGION ACCESS is access -COMMSEGIONTYPE; --Point to record REGION : COMM REGION ACCESS; --Set by 
CREATE DEVICE COMM REGION ADDRESS : ADDRESS; --Instantiate Unchecked Conversion Function function LOCATION 
is new UNCHECKED CONVERSION (SOURCE => ADDRESS, TARGET =>COMM REGION ACCESS); REGION := LOCATION (COMM_REGION_ADDRESS); 
This mechanism is similar to that described by Lucas and Dent [4] which was concerned with programming 
in the Alsys Ada environment. The second solution is to define the location of the record with a variable 
as follows: COMM REGION : COMM REGION TYPE; for COMM REGION use at C~M REGION_ADDRESS; COMM REGION is 
the record variable while COMM--REGION ADDRESS is a variable of type ADD~SS. This mechanism will fail 
unless the elaboration of COMM REGION is performed after COMM REGION ADDRESS lis assigned a legitimate 
val~. Thi-s requires that the declaration of COMM REGION be located in the source code after the CREATE 
DEVICE call, perhaps as follows: CREATE DEVICE ( ......... REGION => COMM_REGION ADDRESS, ........ ); 
declare COMM REGION : COMM REGION TYPE; for ~OMM_REGION use--at COMM REGION_ADDRESS; begin e...., ,..,,. 
end; The problem of locating the hardware registers used to control a device is handled in the same way. 
For the registers as well as for the communication region, the address is returned by the cal I to CREATE 
DEVICE, rather than hard-coded a priori. The registers are normally accessed by reading and writing what 
appear to be memory locations residing at a very high physical address. The reading and writing is supposed 
to be performed by using a subset of the VAX instruction set that consists of uninterruptable instructions. 
Unpredictable results will occur if interruptable instructions are used. The Ada language provides mechanisms 
for defining these registers and for controlling the address at which they reside. However, to access 
the registers, system services must be used outside of Ada to guarantee that uninterruptable instructions 
are involved. To control access to I/0 registers, VAXELN provides READ REGISTER and WRITEREGISTER system 
services anT, in the case of privileged registers such as system console registers, Move From/To Privileged 
Register system services. However, these services assume the use of either UNSIGNED LONGWORD, UNSIGNEDWORD, 
or UNSIGNED-BYTE types. In view -of Ada's strong type checking, it is not possible to use these services 
directly with a user defined record. There are a number of techniques for working around this problem. 
 To improve readability of the code, the designer might define a record that describes the register to 
be accessed. Ada's representation specification features can be used to align the bits in the record 
to match the format of the machine's registers. An example of this is shown in the following statements: 
29 type CONTROL STATUS REGISTER is record DUMMY : UNSIGNED6; -- Filler for bits unused by drive INTERRUPT 
: BOOLEAN; -- Interrupt enable bit DONE : BOOLEAN; -- Done bit READY : BOOLEAN; -- Controller ready bit 
DUMMY2 : UNSIGNED 6; -- More filler ERROR : BOOLEAN; -- Device error end record; for CONTROL STATUS 
REGISTER use record at--mod 2;-- DUMMY at 0 range 0..5; --Specify bit position of INTERRUPT at 0 range 
6..6; --each field. DONE at 0 range 7..7; READY at 0 range 8..8; DUMMY2 at 0 range 9..14; ERROR at 0 
range 15..15; end record; for CONTROL STATUS REGISTER'SIZE use 16; --Specify number of --bits in record. 
A variable of type CONTROL STATUS REGISTER can be used to set up the-- fields before a WRITE REGISTER 
call and to examine the results after--a READ REGISTER call. However, a type conversion is--needed for 
the parameters in the calls themselves. Ada provides the UNCHECKED CONVERSION function to handle such 
cases. An un-~hecked conversion of a variable of type UNSIGNED WORD to type CONTROL STATUS REGISTER soTves 
the problem with a modest performance penalty. In the case of VAXELN Ada, the use of UNCHECKED CONVERSION 
can add one or two move instructions.- An alternative approach may avoid the performance cost. Ada's 
representation specifications can be used to declare two variables of different types in such a way that 
they occupy the same location in memory. The two variables may then be used interchangeably, with the 
choice between the two types based on convenience. The danger of using this technique is that it may 
make the software less maintainable, since the type conversion is implicit, as opposed to the explicit 
use of the UNCHECKED CONVERSION function. An example of the technique is shown below. In the example, 
it is assumed that CONTROL STATUS REGISTER has been declared as shown above. The control and status register 
is read by using the READ REGISTER service with a work area. --Define variables to hold a working copy 
of the hardware register. --Overlay the two types of variables at the same location. CONTROL STATUS WORK 
: UNSIGNED WORD; CONTROL~STATUS--: CONTROL~TATUSREGISTER; for CONTROL STATUS WORK use at CONTROL__STATUS'~DRESS; 
--A specific bit in the control and status record can then --be tested as follows: begin -- Copy out 
contents of register identified by Create Device CONTROL STATUS WORK := READ REGISTER (REGTSTER.~NTROL 
STATUS~; if not CONTROL STATUS.DONE then -- Do action end; The Ada purest may cringe at this use of the 
language which was intended to avoid problems through strong typing. In fact, according to the Ada standard 
[I], the use of overlaying is "erroneous" and may not actually work. In the DEC environment, it does 
work, however. Overlaying can be used in many instances in such a way that it optimizes performance, 
and, therefore, it may be preferable to the use of an unchecked conversion. In these instances, the elaboration 
of an object (and the overlaying of that object) can be performed as part of initialization code. When 
the object is referenced later, a register used to access the object may be already set up. Unfortunately, 
it does not seem to be possible to use overlaying in an Interrupt Service Routine without incurring the 
same performance costs as are incurred by unchecked conversion. This is due to the fact that the elaboration 
of objects is performed each time the ISR is called. Another approach would be to use assembly language 
code to access the I/0 registers directly. The assembly language code could be written using an assembler 
and then INLINE'd into the driver. An alternative technique for introducing assembly language into the 
code is to use Ada representation specifications to represent the instructions of the machine. This technique 
is described by Booch [2] in the chapter "Exception Handling and Low-level Feature s". A third interesting 
consideration involves the technique for specifying the location of the interrupt service routines. To 
make the addresses of the routines visible to the CREATE DEVICE call, it is necessary to separately package 
them and to use the PRAGMA EXPORT. The EXPORT pragma provides visihility between the Ada ISR addresses 
and the non-Ada VAXELN kernel. Finally, there is an important constraint that is placed upon the writing 
of Interrupt Service Routines. Interrupt Service Routines run in a different context than does the non-interrupt 
portion of the driver. It is not possible, therefore, for ISR code to reference any variable outside 
the local scope of the ISR procedure. It is not possible, for example, for the ISR code to reference 
objects defined in the specification of the same package that contains the ISR. The Ada language, of 
course, does allow upward referencing so the compiler will accept statements that do this. But, there 
will be invalid results at run time if this is done in a procedure that is called by the kernel using 
a reduced context. COMMENTS ON TOOLS The tools used on the project consisted of an editor, the DEC Ada 
compiler, library manager, linker, the VAXELN menu driven build utility(used to configure and build the 
system image), and the remote debugger. As an introductory, learning exercise, we decided to recode a 
subset of an existing DEC driver from Pascal to Ada. We did not use the DEC language sensitive editor 
on the project because we thought that switching back and forth from Pascal to Ada within the editor 
during the introductory exercise would have been a problem. The DEC distributed, symbolic debugger is 
a very effective tool which can be used on most of the code written for a device driver. This debugger 
allows a programmer sitting at a terminal connected to a VMS host to download a system image to a VAXELN 
target over an Ethernet link and to debug in the context of the high level language. The use of the symbolic 
debugger is restricted to non-interrupt code, however, since the debugger can not activate the Ethernet 
driver if the system were stuck in an interrupt caused by another I/0 device. In effect, the ISR represents 
a "black out" zone to the symbolic debugger. The ISR is a small, but important part of a driver. There 
are a number of options when confronted with a bug in an ISR. The first option is to use the VAXELN kernel 
debugger from the target machine's console. In order for this to be done, the programmer must have a 
knowledge of the virtual to physical translation and the assembly language code generated by the compiler. 
A second option is to comment out code in the ISR and then selectively add it back in and retest until 
the bug is found. This is not as arduous as it might seem because ISR's are small and systems can be 
rebuilt quickly. A third option is to pull code out of the ISR's and insert it in the non-interrupt portion 
of the driver, even though it's not appropriate. This allows the symbolic debugger to be used on the 
code which can be moved back up to interrupt mode when it's fixed. We used a combination of the last 
two options in finding our bugs in the Interrupt Service Routine. There are two debuggers available for 
debugging in the VAXELN environment across a network, the Remote Debugger and EDebug. The Remote Debugger 
supports symbolic debugging in the Ada language while EDebug does not. However, EDebug is able to monitor 
concurrent tasks which may exist on other nodes in the network. The remote debugger restricts visibility 
into tasks to certain specific situations and clears breakpoints, etc. when switching from one task to 
another. It would be most helpful if DEC would add the functionality of EDebug into the remote debugger 
or vice versa. Time measurements were taken using CPU internal clocks. The driver was initially debugged 
on a VAX 11/750 which has a priviledged register called the Interval Count Register. This register is 
incremented every microsecond. Access to the register is provided by issuing a call to the VAXELN run 
time library. It turned out that the timing mechanism used on the VAX 11/750 could not be used on the 
VAX 3500, however. The VAX 3500 has a newer architecture that does not allow software to read the Interval 
Count Register as it is maintained in the older architectures. Instead, high resolution timers are located 
in what is called VAX I/O space which is accessed by using a very high physical address. The timer we 
used is named TIRO. Mapping to TIRO requi red use of the ALLOCATE SYSTEM REGION system service which 
assigns --a virtual address to a given physical address. Since the virtual address utilizes system page 
tables rather than process page tables, this virtual address can be used in the Interupt Service Routine 
where the full process context is not available. The virtual address can be passed to the Interrupt Service 
Routine through the Communication Region. DIFFICULTY OF THE TASK The two people working on this project 
were both experienced with real time operating systems but had never coded using Ada, although both had 
some familiarity with Ada through articles and Booch' s book. The introductory exercise involving the 
recoding of the existing driver into the first driver variation took about 6 days, which does not seem 
to be very long. Code, debug, and performance measurements of all variations of the driver on the VAX 
11/750 took about four weeks. Time was spent in addition to this for transitioning to the VAX 3500 and 
to a new release of VAXELN. Most of the problems involved getting the CREATE DEVICE service set up properly 
and understanding-the mechanisms involved in writing an Interrupt Service Routine. The upward referencing 
constraint mentioned above was not fully understood by us, even though it is described in DEC documentation, 
and was especially troublesome. 32 It would be helpful if the compiler could check for upward references 
when a procedure is identified as an interrupt service routine. The ability to debug an ISR through the 
symbolic debugger could have also helped uncover our mi stake. LESSONS LEARNED Writing a device driver 
is a good project for getting to know some of the more unusual features of the language, especially those 
features covered in Chapter 13 of the Ada standard. The need to locate work areas in specific areas of 
memory as well as the need to define the bit structure of these areas provides a good learning exercise. 
The need to perform an unchecked conversion requires an explicit undemstandi ng of the machine' s internal 
representation of data types. We recommend the exercise to anyone starting out with the language. Developing 
real-time Ada programs in the VAXELN environment is simpler than developing for the VMS environment because 
VAXELN is designed to be a much simpler environment than VMS. While there is a need to be familiar with 
a package called VAXELN SERVICES for interfacing with the operating system, this is not anywhere as extensive 
as dealing with Starlet and Tasking_Services as is described by Schacht [5]. The number of diagnostics 
we obtained from the compiler during the initial coding phases was remarkable. Most of the diagnostics 
related to type checking situations. It was very apparent that much of the debugging of the driver was 
being done even before checkout began. While the compiler didn't catch everything, it caught a lot, and 
changed the nature of the development process. The optimal structure of the driver is, as has been stated 
before, somewhat dependent upon the performance constraints of the application. If I/O overhead tolerances 
permit, however, it is our impression that the best approach would be to structure the driver as a separate 
executeable image using a SEND/RECEIVE interface. This approach optimizes modularity and transportability. 
Modularity is optimized because the boundry between the driver and the application is more distinct and 
the application does not have to run in kernal mode. Transportability is improved because applications 
that use SEND/RECEIVE can be moved around the network to other processors which may have need of the 
peripheral supported by the device driver. Transportability is, of course, not facilitated to other vendor 
Ada environments through the use of SEND/RECEIVE. We would also have to say that when given a choice 
between violating the principles of the language or having to escape to another language to perform a 
function that Ada was not suited for, we elected to stay in Ada and violate the principles of the language. 
This decision was made in the use of overlaying and, to some extent, in the use of unchecked conversions. 
We acknowledge that such practices adversely affect maintainability but feel the risk is controllable. 
Corporate software development procedures could ensure that such instances do not become the rule by 
requiring waivers during code reviews whenever something like overlaying is performed. In addition, it 
appears that such instances can be confined to the driver and do not have to propagate into the application 
code. It is obviously important that the end result of coding in a higher level language be efficient 
and support the time constraints of the application. However, it is not easy to make a judgment about 
efficiency in this case because there is no standard driver benchmark. Drivers are, by their nature, 
not portable, making comparisons with compilers on other architectures difficult. The efficiency of a 
compiler in supporting a device driver is dependent upon the efficiency of object code generated for 
driver internal processing and upon the efficiency of statements which link the driver to the outside 
world. In view of the fact that driver internal processing varies substantially depending upon the purpose 
of the driver and the environment in which the driver is running, the efficiency of a compiler in performing 
driver internal processing is best measured by such benchmarks as the Dhrystone or Whetstone. These benchmarks 
are well known, portable, and accepted by the technical community. VAX Ada runs them well. In fact, the 
Whetstone is 25% faster in VAX Ada than it is in the original Fortran due to the fact that one of the 
Whetstone tests is optimized out of existence by the compiler. Our effort was principally concerned with 
the efficiency of linkage statements which are dependent upon how the compiler handles the interface 
to the operating system. These linkage statements perform actions which can, in some cases, be compared 
to similar functions in other environments. The SIGNAL DEVICE service essentially sets up a conte~t swap. 
The SEND/RECEIVE functions have analogous functions in other environments. The rendezvous mechanism is 
pure Ada and can be compared to the same function in other environments. It is our impression that an 
I/O overhead of slightly over 100 microseconds, which was the result using the monitor oriented structure, 
is not a bad time. I/O overheads on the order of hundreds of microseconds are also tolerable by many 
real time applications. It was especially interesting that the I/O overhead of performing a rendezvous 
was approximately the same as the overhead when using the native Send/Receive mechanisms. We conclude 
from this that Ada is a viable language for writing a device driver for the VAXELN environment. ACKNOWLEDGEMENT 
The author wishes to thank Linda K. Pedersen of Digital Equipment Corporation for her invaluable assistance 
in developing this paper. REFERENCES 1) ANSI/MiI-Std-1815A-1983, Reference Manual for the Ada Programming 
Language 2) Grady Booch, "Software Engineering with Ada," The Benjamin/Cummings Publishing Company, 1983 
3) Per Brinch Hansen, "Operating System Principles," Prentice-Hall, 1973 4) L. Lucas and D. Dent, "Real-Time 
Ada Demonstration," ACM SigAda International Conference on Using Ada, ACM 0-89791-243-8/87/0012/0159. 
5) Eric N. Schacht, "Ada Programming Techniques, Research, and Experiences on a Fast Control Loop System," 
ACM SigAda International Conference on Using Ada, Dec 87,ACM
			