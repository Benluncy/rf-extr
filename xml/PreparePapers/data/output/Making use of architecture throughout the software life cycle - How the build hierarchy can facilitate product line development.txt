
 Making Use of Architecture throughout the Software Life Cycle How the Build Hierarchy can Facilitate 
Product Line Development  Hataichanok Unphon IT University of Copenhagen &#38; DHI Water Environment 
Health Denmark unphon@itu.dk  Abstract This paper presents an empirical study of how the application 
of genuine architecture can be employed beyond the design phase of product line development. The study 
is based on a co-operative research project with a company developing product line architecture for hydraulic 
modelling software. By concretising the architecture as a build hierarchy the architecture mediates the 
evolution of the design throughout the whole software life cycle. The empirical evidence has confirmed 
the improvements of (1) the software quality and flexibility, (2) the communication and co-operation 
with new developers, (3) the distribution of work and parallel implementation, and (4) the foreseen usage 
by hydraulic and environmental consultants who tailor the software. Our research further indicates requirements 
for the architectural analysis tools that are deliberately embedded in the daily development practices. 
 1. Introduction An ambition to establish architecture as the key aspect of software development prompts 
this work. The importance of software architecture has been recognised in the software engineering community 
for decades [3]. But, in many software industries, the use of explicit architecture is very limited. 
This paper presents empirical evidence of how developers can make use of architecture beyond the initial 
design phase. A case study shows that a team of software developers concretises architecture as a build 
hierarchy1. The developers use the build hierarchy to check the compliance of their source code against 
the architecture s structure when they build the software. The developers get constant feedback about 
the match between design architecture and code architecture. As a consequence, it improves (1) the software 
quality and flexibility, (2) the communication and cooperation with new team members, (3) the distribution 
of development tasks and parallel implementation, and (4) the usage by hydraulic and environmental consultants. 
However, there are some challenges to the build hierarchy and its consequence with respect to different 
aspects of evolvability which should be explored in further detail later. Instead of inventing a new 
insight, the contribution of this work emphasises on making use of the architectural knowledge throughout 
the software life cycle. This paper is outlined as follows. Section 2 presents some challenges towards 
evolving architecture that is intentionally shared with a family of software products. Section 3 presents 
case description. Section 4 explains research approach. Section 5 illustrates concretisation of the architecture 
as the build hierarchy. Section 6 shows beneficent effects of build hierarchy. Section 7 presents challenges 
towards evolvability. Section 8 is discussion. Section 9 draws conclusion and requirements for the architectural 
analysis tools. 2. Evolving product line architecture A software product line consists of a product 
line architecture and a set of reusable components that are designed for incorporation into the product 
line architecture. In addition, the product line consists of the software products that are developed 
using mentioned reusable assets [6]. Software architectural design is one of the important incorporation 
elements in the software product line. When design architecture and code architecture are handled independently, 
the code architecture usually diverges from the design architecture [12]. The design architecture can 
be thought of as the ideal implementation structure. The design architecture can be described using layers. 
Layers are usually described using stacked rectangular boxes. Proximity between these boxes represents 
allowable interfaces between components in different layers. The code architecture describes how the 
source code, binaries, and libraries are organised in the development environment [19], and should be 
implemented in the design architecture. The problems, then, are (1) how to describe the compliance between 
the design architecture and the code architecture, and (2) how to maintain that throughout the development. 
1 A build hierarchy is a technique to organise a series of generating executable code based on dependencies 
between components. 3. Case description DHI Water Environment Health (DHI) is a pioneering organisation 
that develops software applications for hydraulic modelling [8]. In 1972, System 11 and System 21 were 
one of the first computational modelling systems developed at DHI to simulate water flow patterns with 
the help of one-dimensional and two-dimensional models. A three-dimensional simulation was developed 
in the 1980s. Originally, the organisation focused on hydraulic characteristics research, not on software 
engineering. Software development and software maintenance were challenges on only a small scale. In 
the late 1980s, DHI released the MIKE 11 and the MOUSE software products. Both products were originated 
from System 11 following the requests of different usages, i.e. open channels and pipe networks. The 
main users of these products are consultants that do simulations of hydraulic conditions, i.e. water 
level and flow, and analyse the hydrological effects of environmental change, so-called hydraulic and 
environmental consultants. Due to the different market needs the ownership was split into different consultancy 
departments and, in the last decades MIKE 11 and MOUSE have been developed and maintained in parallel. 
Released in 2005, MIKE URBAN followed the request to have a more complete and integrated modelling framework 
for both water supply and waste water systems. After decades of successful use and development, the requirements 
of the software have evolved as well. In particular there is a growing tendency that the software is 
used in a more general setting e.g. scripting and scheduled forecasts. The company was faced with the 
challenge of identifying and developing a kernel for data handling, simulation setup, and graphical interaction 
with simulations and their results. For this reason the idea of re-engineering the existing software 
products was initiated. The first re-engineering project started with the MIKE 11 engine2. Later on, 
the MOUSE engine was merged into the MIKE 11 re-engineering project. While the merged re-engineering 
project was under way, the organisation was undergoing change. DHI set up a software product department 
in order to strengthen the software development process and the design. The software product department 
has taken development activities and ownership of DHI s software products. As a consequence, the department 
decided to re-engineer the core computational parts of some of the one-dimensional simulation software 
products, i.e. MIKE 11, MOUSE and MIKE URBAN, in a project called MIKE 1D. The project is estimated for 
360 person weeks of implementation. 4. Research approach The cooperation with DHI addressed the introduction 
of product line architecture into product development. The basis for the research described here is the 
fieldwork which I have been involved in for two and a half years. I wrote a research diary documenting 
daily observations, interviews, and meetings. As a field worker, I was expected not only to observe, 
but also to influence the projects in which I participated. The research was designed as action research 
by following the cooperative method development approach (CMD) [9]. Due to a lengthy period of the cooperation, 
the research activities can be divided in to three cycles: (1) the MIKE 11 re-engineering project, (2) 
the merging of MIKE 11 and MOUSE re-engineering project, and (3) the MIKE 1D project, as shown in sub-section 
4.1-4.3 respectively. 4.1. The MIKE 11 re-engineering project Participant observation. I studied the 
functionalities and code architecture of the MIKE 11 engine and its related product, i.e. the MOUSE engine. 
I also compared similarity of the source code between MIKE 11 and MOUSE engines. In the meantime, I conducted 
informal interviews with DHI staff members. I found that organisation of software development influenced 
the development of product line architecture [21]. Deliberating change. After finding a striking similarity 
in the source code between MIKE 11 and MOUSE engines, I presented a poster highlighting identical code 
parts in order to initiate a discussion among software developers. Subsequently, I made a presentation 
on software architecture and product line architecture making visible the benefits of merging MIKE 11 
and MOUSE engines. Later, I participated in a subproject that discussed a new data access module architecture 
for the MIKE 11 re-engineering project and developed a prototype of the module. Evaluation of the prototype 
and implementation efforts. When I organised an evaluation workshop with a group of DHI software specialists, 
we evaluated the flexibility of the new data access module. We also looked at different change scenarios 
at DHI and their implication in terms of implementation efforts. I continued my participant observations 
of the data access module subproject, the merging MIKE 11 and MOUSE engines re-engineering project, and 
the informal interviews with DHI staff members. 2 An engine is a basic part of simulation. 4.2. The 
merging of MIKE 11 and MOUSE engines re-engineering project Participant observation. In order to be 
close to the project, I took on a task to create the architectural documentation. I had reviewed some 
of DHI s architectural documentation and online user references systems. I also observed development 
practices and technical infrastructure of the MIKE 11 and MOUSE engines. I reviewed a number of documentation 
generators which automate technical document production from the source code. I interviewed developers 
and internal users of MIKE 11 and MOUSE about how they can make use of the architectural documentation. 
I found that architectural knowledge was more in the discussion than in the documentation. Deliberating 
change. After analysing the code, I proposed a layered architecture to represent architectural knowledge. 
I reported a comparison of documentation generators and recommended a generator that was suitable for 
the project. I created a prototype of an online architectural knowledge system. The system contained 
a project overview, architectural knowledge, user references, and examples. The overview of the project 
explained the vision of MIKE 1D project. The architectural knowledge presented the overall design, layered 
architecture, and diagrams along with their precise explanations. The user references showed technical 
documentation, which was automatically generated from source code, e.g. class overviews, namespace overviews, 
and interface overviews. The examples described use scenarios of some components in a number of programming 
languages. The evaluation of this cycle was not possible because the merging project quickly moved to 
the MIKE 1D project. However, the prototype of the online architectural knowledge system has been set 
up and recently used internally. 4.3. The MIKE 1D project Participant observation. I had reviewed static 
code analysis tools, e.g., [10], [13] and [5]. Employing those tools, I analysed the MIKE 1D source code 
and identified the relative complexity of the MIKE 1D components. I also compared the static analysis 
of the MIKE 1D project s source code with that of the MIKE 11 re-engineering project, and the merging 
of MIKE 11 and MOUSE engines re-engineering project. I continued informal interviews with MIKE 1D team 
members and joined the weekly meetings of the MIKE 1D project. I found that architectural analysis tools 
and technique embedded in daily routine were welcome by the development team. Deliberating change. I 
and a group of software architecture experts conducted a workshop on architecture discovery with MIKE 
1D team members. We also introduced the basic idea of checking for architectural conformity. We recommended 
tools for automated (1) checking source code and architecture at build time, (2) continuous integration 
server [7], and (3) checking source code for proper format [15]. After finding the good and bad parts 
of the source code by using static code analysis tools, I presented my findings at the weekly meetings 
of the project. The source code comparative analysis was presented in the form of a Kiviat metrics graph 
[20]. The interdependencies between components were represented in a layered architecture and a dependency 
structure matrix [16]. Evaluation of the uses of architecture. I had interviewed MIKE 1D team members 
about how they can make use of the architecture as an aspect of software development. I continued with 
my participant observation of the MIKE 1D project. At the time of writing, the team members and I are 
planning a workshop on architecture-level evolvability assessment. Part of the workshop will present 
the online architectural knowledge system, which the first feedback on the system are expected to be 
given. 5. The concretisation of the architecture as the build hierarchy This section explains on how 
MIKE 1D developers design MIKE 1D architecture and how the developers concretise the build hierarchy 
into the development environment, as shown in sub-section 5.1 and 5.2 respectively. 5.1. Designing architecture 
 Based on the architecture discovery workshop, the architecture of the MIKE 1D was explicitly defined. 
Figure 1 shows a sample of the MIKE 1D design architecture. Firstly, MIKE 1D developers divided the whole 
core computational part into a Data Access layer and an Engine layer. Secondly, the developers divided 
the Engine layer into two sub-layers: Topology3 and Pure Calculation4. Thirdly, the Data Access layer 
is further divided into a number of components. So is the Engine. Later on, the developers focused on 
having the interfaces of the components as close to finished as possible. The interfaces identify how 
the components should communicate with each other. The developers logically categorised the components 
into the layers. Finally, the developers assembled everything based on design rules. The design rules 
defined acceptable dependency between components, i.e., (a) prohibition of upward relationships, it is 
inherent to layered architectures that references from lower to upper layers are not allowed in other 
words, only downward relationships are allowed; (b) interface violations, usage of non interface artefacts 
of components by other components is not allowed; (c) several layer downward relationship is acceptable; 
and (d) prohibition of relationships within a layer, components in different line of products should 
not relate to each other. A build hierarchy is implied in the design architecture. The components in 
upper layers must be built after those in lower layers. For example, in Figure 1, the Network Engine 
component in the Topology layer must be built after the Network Data Access component, the Structure 
Module component, and the Cross Section Data Access component in the Data Access layer. 3 Topology handles 
a static model data, e.g. network topology. 4 Pure calculation handles a dynamic model data which is 
used in the actual computations and simulation state. 5.2. Concretisation of the build hierarchy into 
development environment Part of the reluctance to work with an explicit architecture was the fear of 
having outdated documents and a diverging code base. Introducing the architectural compliance checking 
into the daily routine was thus welcomed by the development team. Currently, a build hierarchy is defined 
in such a way that developers specify the build order. But, Microsoft Visual Studio has another way of 
handling the logic of a build hierarchy. Microsoft Visual Studio has a Solution, a top collection of 
Projects. MIKE 1D developers work under the same Solution, i.e. the MIKE 1D Solution. In the Solution, 
there is a list of Projects. Each developer is responsible for his Project(s) in the MIKE 1D Solution. 
Each Project contains actual source code and its unit tests. Each Project represents a component. Hence, 
the developers define the dependency between components through the Projects. Afterwards, the developers 
can see in which order the Projects are built. When the developers compile or build the Solution, the 
build hierarchy will automatically check whether the developers have followed the design architecture. 
When the developers check out from the source control system and re-compile or re-build the Solution, 
they will be aware of what the other developers have been doing. The developers also use unit test to 
assure that any functionality change will not break the architecture. Concretising the build hierarchy 
could be followed beyond Microsoft Visual Studio. A few examples of other build automation tools are 
GNU Make [11], Apache Ant [1], Apache Maven [2], and SCons [17]. 6. Beneficent effects of build hierarchy 
 This section identifies advantages of concretisation of the architecture as the build hierarchy into 
software development. Confirmed by MIKE 1D team members, the advantages are categorised into (1) software 
quality and flexibility, (2) communication and cooperation to new developers, (3) distribution of work 
and parallel implementation, and (4) usage by hydraulic and environmental consultants, as shown in sub-section 
6.1-6.4 respectively. 6.1. Software quality and flexibility MIKE 1D developers iteratively work on 
the design architecture and keep on refining the architecture. For instance, with the help of the build 
hierarchy the developers are able to see if dependencies point to the wrong direction. In order to turn 
around the order of dependency, the developers will tweak a number of the other dependencies or introduce 
a new component. Consequently, the refined design architecture is reflected in the build hierarchy. Since 
the architecture has become modularised, each component can easily be tested thoroughly separately. The 
core components can be replaced. For example, to change the equation of water flow in a core component, 
a developer implements a specialised component with the same interface as that core component. Without 
knowing how the core component is internally implemented, the developer only sees the interface of the 
core component and implements his specialised functionality. Afterwards, he moves the core components 
out, and replaces the core components with the specialised component without impacting anything else 
in the build hierarchy.  Figure 1. A sample of the MIKE1D design architecture When the consultants 
needed a specific feature, the developers would look everywhere in the code and implement the specific 
feature even if the feature would benefit only that particular consultancy project. As a consequence, 
the software product will have changed between releases, and the specific feature is maintained, even 
though nobody else uses it. Also, the specific feature may give rise to additional work when the software 
product is upgraded or released in a new version. Even with interface in place, changes can degrade system 
if performance or other quality attribute of new version differs substantially from that of old version. 
With the design architecture, the developers can create a special component in a specific file for a 
specific feature and add it on independently of changes to other components. As long as the interface 
of the specific component does not change, the developers do not need to update the specific component. 
 6.2. Communication and cooperation to new developers When new team members are introduced to the MIKE 
1D project, their tasks are explained from an architectural point of view. The main developer shows the 
MIKE 1D design architecture, albeit not in much detail, but it helps the new members to start on the 
project. The new members can easily picture how the components will fit together. It is a strong point 
of the MIKE 1D project, one of the members said; the project has a walking architecture5 that can go 
out and tell people about the architecture. The new team members are initially assigned to implement 
a self-contained component6 of the design architecture. Thus, the new team members will not change anything 
in the core components. The new developers have templates to start implementing. When asked how to figure 
out into which component he should put the physical equation, one of the developers who had been introduced 
to the team replied: Actually, the main developer showed me the component and told to put the equation 
here and here. Then I started it. For the framework of MIKE 1D, I didn t really know how it works. . 
Another new member had experienced being a new developer in another project. He had to understand what 
the project was doing strictly by deciphering the source code. That was a time consuming task, but much 
less now after I moved to MIKE 1D , he reported. 6.3. Distribution of work and parallel implementation 
 The idea of a build hierarchy is straightforward to the developers. MIKE 1D developers distribute the 
work after the architecture has been designed. They decide on a protocol for communication and dependencies 
between components up front. They can work on their own implementation without compromising each other 
s work. Before the concept of design architecture was introduced, functionalities were often mixed together 
in the same file and on the same unit. The developers would practically always write on the same files 
at the same time. Then, they would merge their changes. They would sometimes experience that merging 
a file was not an agreeable approach to all. After the introduction of architecture as a way of thinking, 
the process of using architecture more explicitly has decreased the number of conflicts. For example, 
the developers hardly ever work on the same file. Even though their source control system becomes better, 
they do not need to merge a file as often as before because they are working in separate components. 
One of the MIKE1D developers said, It s just ways easier to handle it. It is much easier to test. It 
is just a lot easier for us to work with, and it works better. The idea of out sourcing MIKE 1D development 
to the other developers that know both MOUSE and MIKE 11 engines was mentioned. The developers can implement 
some of the components if they have time. They can work on it in parallel without affecting the rest 
of the MIKE 1D developers. A milestone and release plan has been decided from a functional point of view. 
However, thinking in terms architecture and build hierarchy has implicitly impacted on the plan. 6.4. 
Usage by hydraulic and environmental consultants At the time of writing, the MIKE 1D project is still 
in the production phases, i.e. it is not yet finished; the developers are already beginning to see the 
benefits that MIKE 1D will eventually yield. With the flexibility in design, as mentioned in sub-section 
6.1, the users, i.e. the hydraulic and environmental consultants will be able to replace any components 
without impacting on the whole software product. The users can tailor the core components by adding a 
specific component without changing any of the core components. Other than that, the users can change 
the non interface code of the specific component without (a) waiting for the next release or (b) impacting 
the general software product. 5 a.k.a. a chief architect or a main developer who carried most if not 
all the architectural knowledge and makes design decisions. 6 A self-contained component refers to an 
independent component or a component that barely uses or is used by another component. 7. Challenges 
towards evolvability During the interview on perspectives of using architecture in development, MIKE 
1D team members raised many interesting challenges towards evolvability. The challenges can be seen from 
different contexts, i.e., use context, technical infrastructure, technical selection, software engineering 
organisation, and software engineering practice. Use context. The developers are in favour of generic 
programming. They design the MIKE 1D architecture in such a way that generic components are clearly separated 
from the specific components. Then, users, i.e. hydraulic and environmental consultants, can replace 
components without consequence problem. On the other hand, the users are in favour of generic modelling 
. Separating the components does not guarantee that the users can model in the generic way. If the developers 
are not aware of the use side, it will be more annoying for the users. For example, there was a discussion 
about how to specify hydraulic resistance. Previously, the users had to specify the hydraulic resistance 
in many different files. Then, the first architectural recommendation was to do it in a specific way 
that required a lot of editing. But, the users would make more decisions and take time to set up their 
initial models. One of the users exaggeratedly said, In the way I understand it, the data should be located 
together with --- data and we could get it from that. You can do everything with it, but it will be terrible 
to work with the model in that way. You have repeated the number over and over again. That is not really 
the way to do it. I do not want to copy my information. I want to have it at one place that can be pointed 
in. Oh, it should be thirteen, not ten! I do not want to change 2,000 places. I want to change at one 
place. . The truth of this matter is that the users have slightly more work in some respect, but the 
architecture reduces the users work in another respect. Technical infrastructure. MIKE 1D components 
are implemented in the C# programming language. But the software products predating MIKE 1D were implemented 
in the C++, C#, and Delphi programming languages. Handling the mixture of different languages would not 
be an easy task. Technical selection. The ancestors of MIKE 1D have different approaches of implementing 
a similar functionality. In fact, the MIKE 1D s initial ambition is to make a common component between 
MIKE 11 and MOUSE. But there are some places where two approaches are equally good. For example, the 
time step calculation between MIKE 11 and MOUSE engines are different. MOUSE uses a smaller time interval, 
so the calculation takes longer time than in MIKE 11. Due to the general difference in length and time 
scales used by applications of MOUSE and MIKE 11 engines, they are optimised differently with respect 
to stability and accuracy. It is two different focuses that should be maintained. Although the developers 
try to merge the two approaches of implementing the same functionality as much as possible, they sometimes 
end up in the situation that we need both . Software engineering organisation. The software product department 
develops general purpose software products which can be sold to customers in great numbers. The consultancy 
departments have implemented very specific functionalities based on the needs of their projects. It is 
usually not possible to include a specific functionality into the generic products because (a) the functionality 
is not useful for the common user and (b) the functionality is implemented in a specific way rather than 
in a general sense. Thinking in terms of architecture is extremely important in the current DHI organisational 
structure. Without being aware of how the architecture looks, development in the consultancy department 
will diverge from that of the software product department. If the consultancy departments do not comply 
with the architecture in the software product department, they will potentially increase the maintenance 
as they may not be able to re-use components between releases. Software engineering practice. Everyone 
in the MIKE 1D project can program and gradually learn about the architecture. But it always ends up 
that only a walking architecture can set up the architecture for the others. One of the mentioned benefits 
is the interface-based design. But it becomes one of the weaknesses. Many interfaces have to be maintained. 
If the developers change the interfaces all the time, it will be difficult for the other people to work 
on any components. Therefore, the challenge is to define a viable interface of the core components as 
early as possible. 8. Discussion This section notes general observations and findings, as shown in 
sub-section 8.1 and 8.2 respectively. 8.1 General observations Relation between design architecture 
and code architecture. During the whole software lifecycle, architecture is being developed. Planned 
solution at the start of project usually signals the design architecture to control the code architecture. 
When the project is progressing, the code architecture might not conform to the design architecture with 
a good reason. For instance, the code architecture may reveal an infeasibility of the planed solution. 
Thus, the design architecture must be adjusted in order to align itself with the code architecture. A 
build hierarchy facilitates the code architecture conformance checking. The build hierarchy instantly 
reveals a divergent coincidence between the design architecture and the code architecture at the build 
time. Waterfall process, iterative/incremental process, and agile methods. Development cycles regardless 
of waterfall process, iterative/incremental process, or agile methods are composed of analysis, design, 
implementation, and test. But time to complete a development cycle is what varied [4]. Moreover, a focus 
on the architecture in the design phase in each process/method is differed. The waterfall process requires 
the design of the complete architecture before the implementation, also called a big design upfront . 
The iterative/incremental process comes into the architecture at each design phase. The agile methods 
replace the big design upfront with just enough design upfront and design as you go . However, an architectural 
style [18] is taken as foundation of the agile methods. 8.2 Findings Limitations of the build hierarchy. 
When I interviewed the MIKE 1D developers about the uses of the architecture, we came across the informative 
issues of the build hierarchy. The main developer put emphasis on keeping the architecture simple, neat, 
and explainable so that the developer can easily introduce a new developer to the architecture within 
a day or two. Having a strictly layered architecture on the build system is one way of doing it. Developers 
have a preconceived idea about the layers into which the components belong. However, the boundaries of 
layered architecture are rather implicit. If a new developer comes from outside and sees the MIKE1D s 
code architecture, he or she will not see the layer at first glance. When the architecture has isolated 
functionality in several components, the connectivity between those components becomes complicated. The 
developers will have difficulty understanding how the functionality is invoked. The build hierarchy gives 
an overview of how the components are connected and dependant on each other. But it does not tell what 
and when the components are invoked unlike the UML diagrams, more specifically, class and sequence diagrams. 
The build hierarchy initially follows the design architecture, as noted in architecture documentation, 
but both of them are easily out of sync during development. Acknowledged eXtreme programming practices 
and component-based software engineering. The eXtreme programming (XP) is one of the most mature and 
best-known agile practices [14]. Some of the practices have been used in the MIKE 1D project, e.g. a 
unit testing and an open work space. The unit testing and the build hierarchy play a mutual role in order 
to facilitate the code architecture conformance checking. When the developers change something in the 
component that will effect or fail somebody else s component, the unit test and the build hierarchy will 
capture that effect and instantly notify the developers. Confirmed by the MIKE 1D team members, the open 
work space is one of the important elements that promotes decentralisation of the architectural knowledge 
during the development. The members work in a common airy room where they can sit near each others. When 
it comes to architectural discussion, the roommates easily perceive what and why the architecture has 
been changed. A considerable extent of component-based software engineering provides flexibility for 
handling changes at the level of design architecture. A component interface design helps the MIKE 1D 
developers introduce new functionality with the minimum impact with regard to all changes. However, it 
is important that a walking architecture keeps an eye on any changes that could break the interface. 
Increasing awareness of architecture in the evolution of software product line. Handling the evolution 
of software assets in a product line is more intricate than that of a tailored product. Supported by 
the DHI case study and [6], the main reasons are (1) most of the assets rely upon various software products 
and versions, and (2) multiple organisational units are involved. To maintain an overview of the status 
of the asset base, the build hierarchy significantly increases awareness of architecture. When the software 
products are upgraded or released in new versions, changes at the asset base must comply with the previous 
release versions. With the help of interface-based design, if developers want to change some component 
in the assets base, the developers create a new component with the same interface as the previous version. 
When the developers build software with the new component, the build hierarchy will notify developer 
whether the new component complies with the architecture of the previous releases. Thus, maintainability, 
one of MIKE1D quality attributes, is influenced positively by the increased separation of components. 
However, the management among multiple organisation units should be optimised in parallel. 9. Conclusion 
and requirements for the architectural analysis tools Architecture is taken as a foundation of many 
development processes or methods, but the use of explicit architecture throughout the software life cycle 
is hardly ever taken seriously, especially in the agile methods. But, this work shows that after the 
architecture was concretised as the build hierarchy, the architecture becomes the first class citizen 
of the software development. Whenever developers build the software, the development environment immediately 
notifies the developers of the compliance between the design architecture and the code architecture. 
However, the build hierarchy does not give any information on what, when and why the components are invoked. 
Confirmed by DHI case study, the concretisation of the architecture as the build hierarchy has improved, 
as shown in Section 6, (1) the software quality and flexibility, (2) the communication and cooperation 
to new team members, (3) the distribution of development tasks and parallel implementation, and (4) the 
foreseen usage by hydraulic and environmental consultants. Based on the case study, we reveal requirements 
for the architectural analysis tools that are meant to be embedded in the daily development practice. 
The tool should (a) give frequent feedback, the compliance between the design architecture and the code 
architecture should notify the developers at the build time; (b) not show only dependencies, each line 
of the dependency or the uses relationship should be displayed further in the UML diagrams; (c) support 
different programming languages, the software products often invoke or build on top of legacy objects; 
and especially (d) support product line architecture, relationships among multiple software products 
and releases are complex any changes at the core components effect not only different products but also 
different releases. The tool arising from the build hierarchy could pragmatically promote the application 
and awareness of architecture throughout the whole software life cycle. 10. References [1] Apache Ant 
website, http://ant.apache.org, last visited 10-02-09. [2] Apache Maven Project website, http://maven.apache.org, 
last visited 10-02-09. [3] Bass, L., P. Clements, and R. Kazman, Software Architecture in Practice, 2nd 
ed., Addison-Wesley, 2003. [4] K. Beck, Embracing Change with Extreme Programming , IEEE Computer, October 
1999, pp. 70-77. [5] W. Bischofberger, J. Kühl and S. Löffler, Sotograph - A Pragmatic Approach to Source 
Code Architecture Conformance Checking , Proc. 1st European Workshop on Software Architecture (EWSA2004), 
LNCS 3047/2004, Springer-Verlag, Germany, 2004, pp. 1-9. [6] Bosch, J., Design and Use of Software Architectures: 
Adopting and evolving a product-line approach, Addison-Wesley Professional, 2000. [7] CruiseControl.NET 
website, http://sourceforge.net/projects/ccnet, last visited 24-01-2009. [8] DHI Water Environment Health 
website, http://www.dhigroup.com, last visited 21-01-2009. [9] Y. Dittrich, K. Rönkkö, J. Erikson, C. 
Hansson and O. Lindeberg, Co-Operative Method Development: Combining qualitative empirical research with 
method, technical and process improvement , Empirical Software Engineering Journal 13(3), Kluwer Academic 
Publishers, 2008, pp. 231-260. [10] Lattix website, http://www.lattix.com, last visited 21-01-2009. [11] 
GNU Make website, http://www.gnu.org/software/make, last visited 10-02-09. [12] G. C. Murphy, D. Notkin, 
and K. J. Sullivan, Software Reflexion Models: Bridging the Gap between Design and Implementation , IEEE 
Transactions on Software Engineering 27(4), IEEE Computer Society, 2001, pp. 364-380. [13] NDepend website, 
http://www.ndepend.com, last visited 21-01-2009. [14] R.L. Nord, and J.E. Tomayko, Software Architecture-Centric 
Methods ad Agile Develoment , IEEE Software 23(2), IEEE Computer Society, 2006, pp. 47-53. [15] NStyle 
website, http://www.vadesoft.com/help/help.htm, last visited 24-01-2009. [16] N. Sangal, E. Jordan, V. 
Sinha, and D. Jackson, Using Dependency Models to Manage Complex Software Architecture , Proc. 20th Annual 
ACM SIGPLAN Conf. on Object Oriented Programming Systems Languages and Applications, ACM, 2005, pp. 167-176. 
[17] SCons website, http://www.scons.org, last visited 10-02-09. [18] M. Shaw, and P. Clements, Toward 
boxology: Preliminary classification of architectural styles , Proc. 2nd Int. Software Architecture Workshop, 
ACM, 1996, pp. 50-54. [19] D. Soni, R.L. Nord, C. Hofmeister, Software Architecture in Industrial Application 
, Proc. 17th Int. Conf. on Software Engineering (ICSE 95), ACM, 1995, pp. 196-207. [20] SourceMonitor, 
Campwood Software website, http://www.campwoodsw.com, last visited 22-01-2009. [21] H. Unphon, and Y. 
Dittrich, Organisation matters: How the Organisation of Software Development Influences the Development 
of Product Line Architecture , Proc. IASTED Int. Conf. on Software Engineering, Innsbruck, Austria, Feb. 
2008 , pp. 178 183. 
			