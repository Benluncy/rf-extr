
 Balloon: Representing and Querying the Near Future Movement of Predictive Moving Objects Hechen Liu 
&#38; Markus Schneider* Department of Computer &#38; Information Science &#38; Engineering University 
of Florida Gainesville, FL 32611, USA {heliu, mschneid}@cise.u..edu ABSTRACT The spatio-temporal uncertainty 
is an inherent feature of moving objects. One scenario where uncertainty exists is the movement of moving 
objects in the future, which results from lacking the knowledge of the prediction method. To solve this 
problem is useful, for example, to predict the lo­cations of a hurricane and its relationships with points 
of interest on the land. The solution calls for a sound model to describe and handle the uncertainty 
properly. This paper in­troduces such a model which represents the spatio-temporal uncertainty in the 
near future. We introduce an uncertainty model called the balloon model speci.cally for future move­ments. 
We discuss how to implement the balloon model in the moving object database and de.ne some important 
operations on querying the uncertainty.  Categories and Subject Descriptors H.2.8 [Database Management]: 
Database Applications Spatial databases and GIS  General Terms Design, Algorithms  Keywords Moving 
objects, uncertainty, balloon 1. INTRODUCTION Moving objects such as hurricanes, cars and animals have 
been studied intensively in the past decade in terms of mov­ing object database [9, 8]. The movement 
of a moving object *This work was partially supported by the National Science Foundation (NSF) under 
the grant number NSF-IIS-0812194 and by the National Aeronautics and Space Administration (NASA) under 
the grant number NASA-AIST-08-0081. Permission to make digital or hard copies of all or part of this 
work for personal or classroom use is granted without fee provided that copies are not made or distributed 
for pro.t or commercial advantage and that copies bear this notice and the full citation on the .rst 
page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior 
speci.c permission and/or a fee. SSO 11 Chicago, Illinois USA Copyright 2011 ACM 978-1-4503-1039-0/11/11 
...$10.00. can be tracked by some GPS devices which report its loca­tion periodically. However, in the 
periods when a moving object is not recorded, its location is not deterministic, and the uncertainty 
exists. One scenario where the uncertainty exists is the movement of moving objects in the future. We 
may ask, for example, whether a hurricane will possibly en­ter a speci.c region on the land during a 
period of time. Since hurricanes can move freely in the 2D Euclidean space and are not limited by constraints 
such as road networks, their movements in the future is unknown. However, if we obtain the knowledge 
related to the pattern of a hurricane s movement, such as its movement function at the current mo­ment, 
the location of this hurricane at a time instance in the near future could be predictable. Queries like 
What is the probability that Hurricane Katrina will traverse Florida in the next 5 days? could be answered. 
The .rst goal of the paper is to represent the spatio­temporal uncertainty of moving objects in the near 
future. We introduce a spatio-temporal uncertainty model, called the balloon model, which was .rst proposed 
by one of the authors in [15]. In that paper, we introduce some basic con­cepts regarding the representation 
of the historical and fu­ture movements. However, the problems such as how to im­plement the model in 
databases, as well as some important operations and their algorithms, have not been addressed. In this 
paper, we propose a comprehensive view of the balloon model by discussing the uncertainty model together 
with the implementation concepts and the algorithms of some func­tions. The balloon model is applied 
speci.cally to handle the uncertainty of moving objects in the near future. In­stead of restricting the 
uncertainty movement of a moving object to a cylinder or a cone, the balloon model does not have a maximum 
speed constraint and thus can be applied to more movements in general, i.e., it can represent the un­certainty 
in various kinds of movements. An advantage of this is that one can apply the uncertainty queries without 
knowing how the uncertainty is formed, since they are pro­vided by the domain experts. For example, a 
hurricane re­searcher can provide us the various wind speed and wind density of a hurricane in a period 
of time, then the balloon model will help them generating the uncertainty volume of the hurricane and 
help them make prediction. Considering the storage, retrieval and manipulating as­pects in the database 
context, the handling of queries on un­certain moving object data is important since a large amount of 
queries will be generated and processed. The second goal of the paper is to provide a solution to query 
the uncertainty in the near future. We introduce a set of powerful operations on the proposed balloon 
model, which can be further inte­grated into database query languages. This will enable the use of the 
database language to query the near future move­ment. The bene.t of this approach is that the operations 
can be used as selection and join conditions. Users who are comfortable with the database query languages 
such as SQL will understand it and use it smoothly, and more complex predicates can be de.ned on the 
basis of them. These op­erations can be integrated into an SQL-like query language. Assume that we have 
two database relations, airplanes (flightNo:string, flight:balloon) hurricanes (name:string, extent:balloon) 
where balloon denotes the uncertainty data types. We may want to detect all airplanes that will possibly 
cross the projected extent of hurricane Katrina, then we can write the following query, SELECT flightNo 
FROM airplanes, hurricanes WHERE hurricanes.name="Katrina" AND possibly_cross(flight, extent) The contributions 
of this work are, It formalizes the uncertainty of moving objects in the future and their properties 
as a database model, which will further enable the query step easier.  It introduces the operations 
on the model and how to query the spatio-temporal uncertainty on the basis of these operations.  The 
rest of the paper is organized as follows. Section 2 discusses related work on uncertainty models and 
queries in spatio-temporal database. Section 3 proposes our bal­loon model representing the uncertainty 
of moving objects. Section 4 discusses how to integrate the balloon model in databases, and introduces 
the operations on the balloon model and provides the algorithms. Section 5 draws con­clusions and discusses 
the future work.  2. RELATED WORK In this section, we classify the related literature of this work into 
two categories, the uncertainty models for moving objects and querying moving objects in databases. A 
famous uncertainty model is the 3D cylinder model [17]. The possible location of a moving object at a 
time instant is within a disc representing the area of uncertainty. Thus, the trajectory of a moving 
point is not a polyline but a cylinder in the 3D (2D+time) space. The cylinder model assumes that the 
degree of uncertainty is constant in a pe­riod of time. A comparable approach, the space-time prism (beads) 
model [14, 5, 13, 16] represents the uncertain move­ment of a moving object as the union of two half-cones 
(a bead) in the 3D space. Given the source location and the de.nition location, as well as the maximum 
speed of a mov­ing object, all possible trajectories between two locations are bounded within the bead. 
The beads model reduces the uncertain volume by two thirds, according the geometric properties of cones. 
Besides the 3D cylinder model and the beads model, there are some other approaches dealing with spatio-temporal 
uncertainty. [11] proposes a path prediction method for range queries. [18] introduces the uncertain 
tra­jectories hierarchy method to solve the problem of uncertain probabilistic range queries. Both methods 
are applied in a road network environment. [10] designs a hybrid prediction model for querying the position 
of moving objects in the near future, by considering both the pattern information and the existing motion 
functions. [2, 3] propose the uncertain re­gion concept to solve probabilistic range queries (PRQ) and 
probabilistic nearest-neighbor queries (PNNQ). Our previ­ous own work in [12] proposes the pendant model, 
which is based on the space-time prism model to represent the spatio-temporal uncertainty. In particular, 
we propose the spatio-temporal uncertainty predicates (STUP) to model the uncertain topological relationship 
between moving objects. The authors have proposed a new model called the balloon model of querying the 
historical and future movement in [15]. In this paper, we will give a comprehensive view of the balloon 
model by introducing the implementation concept of the balloon data type in databases, the operations 
on the data as well as their algorithms. The study on moving objects includes an important as­pect: querying 
moving objects. [4] proposes Spatial SQL, which is a minimal extension to the interrogative part of SQL. 
It preserves the SQL concepts, and treats spatial ob­jects at a high level by incorporating the spatial 
opera­tions and relationships. Similarly, spatio-temporal query languages are built on top of SQL as 
well. Before creat­ing spatio-temporal query language, an important step is to represent moving objects 
as spatio-temporal data types such as moving point, moving lines and moving regions [8]. Based on the 
data types, a concept called spatio-temporal predicate is proposed which is later integrated into spatio­temporal 
query language [6]. The evolving relationships be­tween moving objects are represented as binary predicates, 
such as cross and enter, which are later integrated into the spatio-temporal query language. Thus users 
can use the bi­nary predicates in the SQL-like languages easily.  3. BALLOON: REPRESENTING THE UN-CERTAINTY 
OF FUTURE MOVEMENTS In this section, we describe our uncertainty model for querying moving objects. We 
.rst show some observations on the spatio-temporal uncertainty problems and how they are solved using 
the space-time prism model (beads). Then, we introduce our balloon model. This model is a generic one 
since it incorporates di.erent applications, especially for those free movements in the 2D space such 
as airplanes, hurricanes and freely driving cars. 3.1 Observations on Spatio-temporal Uncer­tainty The 
study of spatio-temporal uncertainty is to represent all the possible trajectories of a moving object, 
with a lim­ited number of certain spatio-temporal records (GPS points) given. Assume that a moving object 
travels from the source location A(x0 ,y0) at time t0 and heading to the destina­ ''' tion B(x,y)at t, 
then a list of GPS points are recorded ' ''' as p0(x0,y0,t0), p1(x1,y1,t1), p2(x2,y2,t2 ), and p(x,y,t) 
' respectively, with the condition t0 <t1 <t2 <t, as illus­trated in Figure 1 (a). The movements at time 
instances other than when the query points are recorded are uncer­tain. If the object travels the minimal 
distance between two  P: (a) (b)   (c) (d)    (e) (f) Figure 1: A set of GPS points (a), certain 
trajectory (b), uncertainty trajectory using the beads model(c) and uncertainty trajectory with lower 
sampling rate using the beads model(d), the change of the speed in c (e) and the change of the speed 
in d (f) consecutive locations, we can approximate the movement as a linear function of time, as illustrated 
in Figure 1 (b). This can be seen as a certain movement. Considering the un­certainty feature, the movement 
can be represented using beads , as illustrated in Figure 1 (c). The reason is that, at any time instance 
when the position of the moving object is not recorded, its possible position is within an area. If the 
speed of the moving object cannot exceed a threshold, all the possible trajectories of this moving object 
between two consecutive query points are within a double-cone vol­ume [5]. The projection of the movement 
in 2D space is a series of ellipses [14]. The more frequently the locations are updated, the less the 
uncertainty. If we only record the lo­cations at the source and the destination of the movement, the 
uncertainty volume is within a larger bead, as illustrated in Figure 1 (d). The speed of the moving point 
is bounded by the maximum speed between two consecutive locations, as illustrated in Figure 1 (e) and 
(f) respectively. Figure 1 (c) shows that the movement between two un­certain query points has a maximum 
speed as the threshold, thus we can treat the speed to be constant between two con­secutive locations. 
In the real world, we observe that not all movement follow the same pattern as the one in Figure 1 (c). 
For example, we study the hurricane data of Atlantic Ocean, provided by the National Hurricane Center 
(NHC) [1]. The sensors keep tracking the hurricane and update the sensed data of the hurricane every 
6 hours. The format of  (b) Figure 2: The data of hurricane Katrina captured by sensors in year 1999 
(a) and the changing wind speed of Katrina observed in the .rst 4 days in year 1999 and 2005 respectively 
the data .le is illustrated in Figure 2 (a), which shows the observed Hurricane Katrina in the .rst 4 
days in year 1999. The wind speeds are encapsulated by the square. From the data we can .nd that the 
wind speed of the hurricane varies. Similar situation happens to Katrina in year 2005. If we draw the 
change of the wind speed in the .rst four days of Katrina both in year 1999 and 2005 respectively, we 
can get the diagram shown in Figure 2 (b). We .nd that the wind speed is not constant but increasing 
with time. As the speed grows larger, the hurricane travels farther. Therefore, the uncertainty becomes 
larger and larger in the future as time passing by. The cone is not enough to bound all possi­ble trajectories 
since it has the maximum speed restriction. Therefore, an alternative model to represent the uncertainty 
of the movement in the near future is needed. In order to in­troduce the model properly, we .rst de.ne 
some important concepts as follows. De.nition 1 (Historical Movement) Let point denote the spatial point 
data type in the 2D space, tnow denote the cur­rent time, and t denote the historical movement constructor. 
The historical movement of a moving point is de.ned as, t (point)= {f : time . point | i) dom(f )= ni=1[t2i-1,t2i], 
.t . dom(f ): t = tnow ii) .1 = i<n : t2i <t2i+1 iii).1 = i = n : lim t.t + f (t)= f (t2i-1), 2i-1 lim 
t.t - f (t)= f (t2i), 2i .t . (t2i-1,t2i),f (t) is derivable } In De.nition 1, i) and ii) state that 
the moving point function is de.ned in a union of non-overlapping intervals of the historical time. iii) 
states that the function is continuous in its domain. De.nition 2 (Future Movement) Let region denote 
the spatial region data type in 2D space, tf denote a near future  c' ' uncertainty region 2 re iction 
a e at :  : y : (a) (b) Figure 3: Representing the uncertainty of near fu­ture movements using balloon. 
time instance,which is the threshold of future time de.ned by the user, and . denote the near future 
movement con­structor. The future movement of a moving point is de.ned as, .(region)= {f : time .region 
| i) dom(f )=(tnow ,tf ] ii).t .dom(f ),f (t) is closed} In De.nition 2, i) shows that the future movement 
is de­.ned from now to a time threshold in the future. ii) shows that the value of the function at any 
instance in the future is a closed region. After obtaining the observations of the historical move­ment 
and the future movement of a speci.c moving object, we are able to introduce the balloon concept.  3.2 
Balloon: Representing the Near FutureMovement with Uncertainty As discussed in Section 3.1, there are 
two parts composing a moving point object, i.e., the historical movement and the future movement. The 
historical movement can be repre­sented as a polyline in the 2D+time space, and the future movement is 
an uncertain volume. Therefore, we use the term balloon to represent such kind of movement. The his­torical 
movement corresponds to the string of the balloon, and the future movement corresponds to the body of 
the balloon. Figure 3 (a) shows the near future movement of a moving object predicted at the current 
time t0. The past movement before t0 is already known and thus is represented as a function from time 
to point. The curve of the function is a polyline. The future movement is within the body of the balloon. 
Since the speed of the moving object varies and is potentially growing with time, we no longer use the 
cone to represent it. Figure 3 (b) shows di.erent balloons that are predicted at di.erent time instances. 
Since the position of an observed moving object is updated all the time, the predicted locations varies 
at di.erent time instances. For example, the predicted uncertain volume containing all the possible trajectories 
of the near future movement at time t0 is shown as the lowest balloon in Figure 3 (b). At time t1 , the 
trajectory of the moving point is updated, and there is a new balloon which represented the movement 
of the bal­loon right after t1. As the speed increases, we see a growing uncertainty over time. Now, 
we are able to de.ne our balloon type which contains the past movement and the near future movement together. 
De.nition 3 (Balloon) Let O denote the constructor of a composed movement function which integrates the 
movement of a moving point in the past and in the near future, then O(point, region)= f : t (point) ×.(region) 
The above de.nition introduces our balloon model. We de.ne balloon as a new data type to represent moving 
ob­jects. A balloon data is concatenated by the historical and future movements of a moving object. A 
special feature is that it takes the uncertainty of the near future movement into consideration. Similar 
to the cylinder model and the beads model, at any time instance, the possible location of a moving object 
in the near future is not a single point in the 2D space, but is within an area potentially. Now we give 
the de.nition of the concept uncertainty region, as shown in Figure 3 (a). De.nition 4 (Uncertainty Region) 
Let f denote a bal­loon movement function, t . dom(f ) is a time instance, f (t)= S is called the uncertainty 
region at instance t. Lemma 1 The area of the uncertain region for a moving point at any instances in 
its historical movement is 0. Proof. Let t0 denote the current time, obviously, if t< t0, f (t) .point,then 
area(f (t))=0 As we have mentioned above, since the speed of the mov­ing object varies over time, its 
uncertainty also changes. We formalize a situation in which the degree of uncertainty is increasing, 
as stated in De.nition 5. De.nition 5 (Uncertainty Growing) Let f denote a bal­loon movement function, 
I . dom(f ). I is called the Un­certainty Growing Interval, if .t1,t2 .I, t1 <t2 : area(f (t1)) =area(f 
(t2)) Now, we give the de.nition of con.dence, which shows the degree of certainty that a spatial 2D 
object(point or re­gion) at a time instance is the potential location of a moving object. De.nition 6 
(Con.dence) Let f denote a future move­ment function, t . dom(f ), a spatial object so . a and a .{point, 
region},then con(so, t) is a value between [0, 1] that shows the con.dence of the 2D spatial object so 
to be traveled by the moving point at instance t. It satis.es the following conditions, i) .t>tnow ,so 
.point :con(so,t)=0 ii) .t>tnow ,so .region:con(so, t) =0 iii).t =tnow ,f (t)= p :conf(p,t)=1 iv) .t>tnow 
,f (t)= S :conf(S,t)=1 Lemma 2 The con.dence of a spatial point p at any in­stance of a historical movement 
is either 0 or 1. Proof. In the historical movement, when t<t0, f (t) . point.If p . f (t), p is the 
exact location that has been traversed by the moving point, according to De.nition 6 (iii). Then if p 
is not in f (t), its con.dence to be the location traversed by the moving point is 0.  (a) (b) Figure 
4: Uncertain regions with di.erent con.­dence distribution functions. De.nition 7 (Con.dence Distribution 
Function) Let f denote a future movement function, t . dom(f ),and r de­note a region, p =(x, y) is a 
spatial point and p . r,then cdf ((x, y),t) is a function called con.dence distribution func­tion which 
shows the density of the con.dence distributed at di.erent point in a region. It satisfy the following 
condition, i).t>tnow : con(r, t)= cdf((x, y),t)dxdy p=(x,y).r ii).t>tnow ,f (t)= S : con(S, t)= cdf((x, 
y),t)dxdy =1 p=(x,y).S Lemma 3 If the con.dence is uniformly distributed in the uncertainty region f 
(t) at any instance t, then the con.dence of a spatial point p in a future movement is monotonically 
decreasing with time in an uncertainty growing interval. Proof. Since the sum of the con.dence for all 
points in the uncertainty region of a time instance is 1, in the uncer­tainty growing interval, the area 
of the uncertainty region is growing with time. Therefore, if the con.dence of the uncer­tainty region 
is uniformly distributed inside the region, the con.dence of a certain region will be non-decreasing. 
The con.dence distribution function shows how the con­.dence are distributed among the 2D space and varies 
from di.erent applications. The bene.t of introducing this con­cept is that the con.dence distribution 
function is provided by domain speci.c experts, thus the users can directly ap­ply it to predict the 
near future movement. Figure 4 (a) and (b) show two di.erent con.dence distribution functions. Figure 
4 (a) shows that the cdf value of points is decreasing when traversing to the right of the region. Figure 
4 (b) shows the case in which the cdf is a normal distribution function. If the two uncertain regions 
overlap with a same polygon in the 2D plane, although the two overlapping parts have the same area, the 
con.dences of the two areas are di.erent.  4. DATABASE MODEL In this section, we introduce the concept 
of implementing the balloon model into databases. This includes creating the balloon data type in the 
databases that can enable users to create instance on it (Section 4.1), as well as a set of functions 
and predicates which can be used in uncertainty queries (Section 4.2 and Section 4.3). 4.1 Creating 
the Balloon Data Type in Exist­ing Databases The balloon data type is de.ned on the basis of primitive 
data types that have already existed in the database. The underlying data types include integer, string 
(or varchar), timestamp, as well as spatial data types such as point, region that have been supported 
by many nowadays commercial databases. For the implementation purpose, we de.ne the balloon data type 
at the discrete level, that we only store the un­certainty region of the balloon at some time instances 
in the database. We give the de.nition of the balloon data type for databases in De.nition 8. De.nition 
8 (Balloon Data Type) A balloon data object in databases is composed by a .nite set of tuples, < (t0,t1,p1,r1 
,c1 ),... (t0,ti,pi,ri ,ci),... > with the following conditions, i) ci . [0, 1] or ci = null ii) t0 is 
the instance of the current time iii) if ti = t0 , then ri = null, ci = null iv) if ti >t0, then pi = 
null A tuple (t0,ti,pi,ri,ci) is called a slice . The above de.nition shows that the balloon database 
type consists of a set of tuples and each tuple is composed by 5 attributes, which are two timestamps, 
one point, one region and one numeric number. In i) ci denotes the con.dence distribution function. ii) 
states that t0 is an indicator of the current time when the database was updated at the last time. This 
is important since the database can be updated frequently and the uncertainty may change over time, thus 
a future movement may become a historical movement with the updating of the database. iii) states that 
if ti is less than or equal to the current time, it is the historical part of the movement, then the 
movement at this instance is a point object, thus uncertainty region and the con.dence distribution function 
have null values. iv) states that if ti is greater than the current time, it is the future movement and 
thus the uncertainty is represented as a region with a con.dence distribution function, therefore, the 
point value is null. De.nition 8 gives a discrete representation of the balloon data type in databases 
and enables the approximation of the uncertainty volume. It is similar to our approach of ap­proximating 
smooth movements of moving objects in [7, 12]. Under this approach, a balloon object can be represented 
as shown in Figure 5 (a). To represent the historical movement, we store the trajectory of the moving 
object which is com­posed by line segments. To represent the future movement, we store the predicted 
snapshots of the uncertainty moving object at future time instances. We call a historical point or a 
future uncertainty region as a slice. The transition of the uncertainty region between consecutive time 
instances is constructed through linear approximation. Our slice ap­proach can also represent a 2D region 
object in terms of a spatio-temporal object, with the assumption that the posi­tion and the extent of 
the region keep constant over time. De.nition 9 (Uncertainty Relation) An uncertainty re­lation of moving 
objects has the following attributes, moving objects (indicator:string, movement:balloon)  (a) (b) Figure 
5: Slice representation of a balloon data (a) and a region object (b). An example of the uncertainty 
relation is similar to the one we have mentioned in Section 1: airplanes (flightNo:string, flight:balloon) 
where the .ightNo attribute is an identi.er of an airplane object, and the .ight attribute denotes the 
uncertain move­ments of the airplane.  4.2 Instant Operations on Balloon Data In the following two subsections, 
we de.ne some important operations on the balloon data type, which are implemented as user de.ned functions 
of the database. In [12], we have de.ned the at instance operation. Simi­larly, we de.ne two corresponding 
operations on the balloon type, which are at past instance and at f uture instance, as shown in De.nition 
10 and De.nition 11 respectively. De.nition 10 (at past instance) Given a balloon object representing 
the uncertainty movement of a moving point, and a time instance before or at the current time, the at 
past instance operation will return the location of the moving object at that past instance as a point. 
It has the following signature, at past instance : balloon × instant . point The algorithm of at past 
instance is shown in Figure 6. get next slice is the operation of .nding the next slice of the current 
slice. In the algorithm, we .rst .nd the interval that containing the time instance, which can be achieved 
in O(log n) by performing binary search on t, where n is the number of slices in the balloon object. 
Then we .nd the point from the speci.c interval by calling get instance in slice method, as shown in 
Figure 7. The get instance in slice takes O(1) time, thus the total complexity is O(log n). The operation 
at f uture instance is de.ned similarly. The get f uture instance(f, s1,s2,t)) will .nd the region at 
an instance between two stored slices. The uncertainty move­ment between two time slices is part of the 
balloon, which is a 3D volume. This volume is represented as a function of time by approximation, thus, 
we can approximate the value of the function at time t. The algorithms of these two func­tions are shown 
in Figure 8 and Figure 9 respectively. The at f uture instance also takes O(log n) time. De.nition 11 
(at future instance) Given a balloon ob­ject, and a time instance after the current time, the at f uture 
instance operation will return the uncertainty re­gion of the moving object at that future instance. 
It has the following signature, input A balloon object bo, a time instance t output Apoint p method at 
past instance(bo, t) 1 if t > now 2 return null 3 else 4 s1 := the last slice in bo that s1.t <= t 5 
if s1.t = t 6 return s1.p 7 else 8 s2:= get next slice(s1) 9 return (get past instance(s1,s2,t)) 10 end 
Figure 6: The at past instance algorithm input two point slices s1,s2, a time instance t output Apoint 
p method get past instance(s1, s2, t) 1 if t<s1.t or t>s2.t 2 return null 3 else 4 f := linear function 
determined by 5 (s1.t, s1.p), (s2.t, s2,p) 6 p := f (t) 7 return p 8 end Figure 7: The get past instance 
algorithm at f uture instance : balloon × instant . region input A balloon object bo, a time instance 
t output A region r method at future instance(bo, t) 1 if t<= now 2 return null 3 else 4 s1 := the last 
slice in bo that s1.t <= t 5 if s1.t = t 6 return s1.r 7 else 8 s2:= get next slice(s1) 9 return (get 
f uture instance(f, s1,s2,t)) 10 end Figure 8: The at future instance algorithm The conf idence at operation 
is also of signi.cant mean­ing. It describes how certain (or uncertain) a region can intersect with a 
moving object in the future. We give the following de.nition, De.nition 12 (con.dence at) Given a balloon 
object, a region in the 2D space, and a time instance in the future, the conf idence at operation will 
return the con.dence of the moving point to be potentially inside the region at that time instance. It 
has the following signature, conf idence at : balloon × region × instance . real The algorithm of conf 
idence at is shown in Figure 10. The Intersection operation is a set operation, which will input two 
region slices s1,s2, a time instance t output A region r method get future instance(f , s1, s2, t) 1 
if t<s1.t or t>s2.t 2 return null 3 else 4 v := volume function determined by 5 (s1.t, s1.r), (s2.t, 
s2.r) 6 r := v(t) 7 return r 8 end Figure 9: The get future instance algorithm input A balloon object 
bo, a region r, a time instance t output A decimal number d between [0,1] method con.dence at(bo, r, 
t) 1 d := 0 2 if t > now 3 r1:= at f uture instance(bo, t) ' 4 5 r := Intersection(r, r1) d := Integral 
all (x, y) . r ' with bo.cdf 6 return d 7 end Figure 10: The con.dence at algorithm return the common 
part of two regions. This operation will call the at f uture instance, thus it calls O(log n) time. 
 4.3 Periodical Operations on Balloon Data In comparison with the instant operations on the balloon data 
we introduced above, we de.ne some operations which last for a period of time. We .rst give an important 
opera­tion temporal selection, as shown in Figure 11. De.nition 13 (temporal selection) Given a balloon 
ob­ject, and a time interval I =[t1 ,t2] in the balloon s life time, the temporal selection operation 
will return part of the balloon object. It has the following signature, temporal selection : balloon 
× interval . balloon The temporal selection will .nd all slices between the interval. The .rst slice 
in the interval may have t greater than the start of the interval, then we will add the previous slice 
to the result. Similarly, the time of the last slice in the interval might be less than the end point 
of the interval, and we add the next slice to the result as well. It will traverse all slices in the 
worst case, ths the complexity is O(n). Now, we de.ne the operation had crossed. This opera­tion is an 
boolean predicate on the historical part of the movement that tells whether a moving point had crossed 
a speci.c region in the given time interval. cross indicates a transition of di.erent relationships between 
the moving point and the region. The moving point is disjoint with the region at .rst, then inside the 
region, then disjoint the re­gion again, as illustrated in Figure 14 (a). The algorithm of had crossed 
is shown in Figure 12. From the above subsection, we have de.ned how to cal­culate the con.dence of a 
2D region to be traversing by an input A balloon object bo, an interval I, output A balloon object rbo 
method temporal select(bo, I) 1 rbo := null 2 if t1 < bo.mintime or t2 > bo.mintime 3 return null 4 else 
5 s1 := the .rst slice that s1.t>I.t1 6 s11 := get prev slice(s1) 7 s2 := the last slice that s2.t<I.t2 
8 s22 := get next slice(s2) 9 s := s11 10 while s not s22 11 rbo := rbo . s 12 s := get next slice(s) 
13 add all slices between s11 and s22 to rbo 14 return rbo 15 end Figure 11: The temporal selection algorithm 
input A balloon object bo, a region r, an interval I, output A boolean value method had crossed(bo,r,I) 
 1 if I.t2 >= now 2 return false 3 else 4 bo ' := temporal selection(bo, I) 5 sa := the .rst slice in 
bo ' 6 sb := the last slice in bo ' 7 while disjoint(sa.p, r) 8 sa := get next slice(sa) 9 while disjoint(sb.p, 
r) 10 sb := get prev slice(sb) 11 if sa.t <= sb.t and inside(sa.p, r) 12 return true 13 else 14 return 
false 15 end Figure 12: The had crossed algorithm uncertain moving point. Since the con.dence value 
is be­tween [0,1], we partition the interval into four sub-intervals. Then, we introduce four terms that 
indicates the di.erent degrees of con.dence. possibly indicates that the con.dence is in greater than 
0.25. likely means that the con.dence is in greater than 0.5. probably means that the value is greater 
than 0.75, and de.nitely means that the con.dence value is 1. Therefore, we can use these terms to show 
di.erent degree of uncer­tainty. For example, the predicate probably enter will tell whether a moving 
object will enter a 2D region with a con.­dence greater than 0.75. Now, we de.ne the possibly enter operation 
under the balloon model. Its algorithm is shown in Figure 13. De.nition 14 (possibly enter) Given a balloon 
object, a region in 2D space, and a time interval, the possibly enter operation will return a boolean 
value, indicating the maxi­mum con.dence of the object entering the region in the fu­ture is no less 
than 0.25. It has the signature, input A balloon object bo, a region r, an interval I, output A boolean 
value method possibly enter(bo,r,I) 1 max conf := 0 2 bo ' = temporal select(bo, I) 3 if I.t1 < now 
or conf idence at(bo,r,I.t1) > 0 4 or conf idence at(bo,r,I.t2)=0 5 return false 6 else 7 for each slice 
s in bo ' 8 conf := conf idence at(s.r, bo ' ,s.t) 9 if conf > max conf 10 max conf = conf 11 if max 
conf >=0.25 12 return true 13 else 14 return false 15 end Figure 13: The possibly enter algorithm possibly 
enter : balloon × region × interval . bool Line 2 performs a temporal selection given the time in­terval. 
I.t1 and I.t2 denote the start and end time instance of I respectively. Line 3 to Line 4 indicate that 
the moving object should be disjoint with the region at I.t1 and should have intersection with the region 
at I.t2. Line 7 to Line 10 calculate the con.dence of the region in each slice, and keep recording the 
maximum one. If the maximum con.dence is greater than or equal to 0.25, the function will return true. 
 1 1   (a) (b) Figure 14: The had cross predicate(a) and possibly enter predicate (b).   5. CONCLUSIONS 
AND FUTURE WORK In this paper, we address the problem of modeling and querying the uncertainty of a moving 
object in the near future in the database context. We introduce the balloon model, which represents the 
uncertainty of moving objects in the near future properly. A balloon object is composed by two parts, 
the body that represents the near future un­certainty, and the string that represents the past certain 
trajectory. We also propose an implementation concept of representing the balloon model in the database 
by slice rep­resentation. We design the functions of di.erent kinds of uncertainty queries as part of 
the model and show the al­gorithms. Our next step will be implementing the system of the balloon model 
and perform the e.ciency experiments on various kinds of spatio-temporal uncertainty queries on the near 
future movements of moving objects.  6. REFERENCES [1] National hurricane center archive of hurricane 
seasons. http://www.nhc.noaa.gov/pastall.shtml. [2] R. Cheng. Evaluating probabilistic queries over imprecise 
data. In SIGMOD, pages 551 562, 2003. [3] R. Cheng, D. Kalashnikov, and S. Prabhakar. Querying imprecise 
data in moving object environments. IEEE Transactions on Knowledge and Data Engineering (TKDE), 16(9):1112 
 1127, 2004. [4] M. J. Egenhofer. Spatial sql: A query and presentation language. IEEE Transactions on 
Knowledge and Data Engineering (TKDE), 6:86 95, 1994. [5] M. J. Egenhofer. Approximations of geospatial 
lifelines. In SpadaGIS, Workshop on Spatial Data and Geographic Information Systsems, 2003. [6] M. Erwig 
and M. Schneider. Spatio-temporal Predicates. IEEE Trans. on Knowledge and Data Engineering (TKDE), 14(4):881 
901, 2002. [7] L. Forlizzi, R. H. G¨uting, E. Nardelli, and M. Schneider. A data model and data structures 
for moving objects databases. In SIGMOD, pages 319 330, 2000. [8] R.H.G¨ohlen, M. Erwig, C. S. J. N. 
A. uting, M. H. B¨Lorentzos, M. Schneider, and M. Vazirgiannis. A Foundation for Representing and Querying 
Moving Objects. ACM Trans. on Database Systems (TODS), 25(1):1 42, 2000. [9] R.H.G¨ uting and M. Schneider. 
Moving Objects Databases. Morgan Kaufmann Publishers, 2005. [10] H. Jeung, Q. Liu, H. T. Shen, and X. 
Zhou. A hybrid prediction model for moving objects. In ICDE, pages 70 79, 2008. [11] H. Jeung, M. L. 
Yiu, X. Zhou, and C. S. Jensen. Path prediction and predictive range querying in road network databases. 
The VLDB Journal, 19:585 602, 2010. [12] H. Liu and M. Schneider. Querying moving objects with uncertainty 
in spatio-temporal databases. In DASFAA, pages 357 371, 2011. [13] H. J. Miller. A measurement theory 
for time geography. Geographical Analysis, 37:17 45, 2005. [14] D. Pfoser and C. S. Jensen. Capturing 
the uncertainty of moving-object representations. In SSD, pages 111 132, 1999. [15] R. Praing and M. 
Schneider. Modeling historical and future movements of spatio-temporal objects in moving objects databases. 
In CIKM, pages 183 192, 2007. [16] G. Trajcevski, A. Choudhary, O. Wolfson, L. Ye, and G. Li. Uncertain 
range queries for necklaces. In MDM, pages 199 208, 2010. [17] G. Trajcevski, O. Wolfson, K. Hinrichs, 
and S. Chamberlain. Managing Uncertainty in Moving Objects Databases. ACM Trans. on Database Systems 
(TODS), 29:463 507, 2004. [18] K. Zheng, G. Trajcevski, X. Zhou, and P. Scheuermann. Probabilistic range 
queries for uncertain trajectories on road networks. In EDBT, pages 283 294, 2011.  
			