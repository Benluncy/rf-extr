
 Design and Implementation of a Personal Computer Local Network KEIJI SATOU, YOSHIHIRO NAKAMURA, SADAO 
FUKATSU, NOBUO WATANABE, and TAKASHI KIMOTO FUJITSU Laboratories Ltd., 1015 Kamikodanaka, Nakahara-ku, 
Kawasaki 211, Japan i. INTRODUCTION With the increase in the number of Personal Computers in offices 
and factories, a demand has been created to connect these independent units in a network and to share 
not only data but also expensive peripheral equipments. On the other hand, local area network technology 
has become an active area of research and development during the last few years. (I) The local area 
network designed for super-personal computers or mini-computers is not suitable for personal computers. 
 The reason for this is the interface devices would be more expensive than some of the devices to be 
interconnected. We have developed small, low-cost experimental network which connects these devices. 
The network has following characteristics: - The network is designed using simple twisted-pair cables 
meeting the RS422 standard for data transmission between personal computers and Network Subsystem (NS). 
 - A simple network adapter board, containing the Motorola MC6854 advanced data link controller and RS422 
differential driver and receiver, is used in a Personal Computer. - The NS provides three kinds of data 
transfer rates and allows the user to select the best rate for his personal computer. Permission to 
copy without fee all or part of this material is granted provided that the copies are not made or distributed 
for direct commercial advantage, the ACM copyright notice and the title of the publication and its date 
appear, and notice is given that copying is by permission of the Association for Computing Machinery. 
To copy otherwise, or to republish, requires a fee and/or specific permission. &#38;#169; 1983 ACM 0-89791-123-7/83/012/0222 
$00.75 - The NS is provided with two types of buffers for handling packets. With those buffers and three 
Control signals, the network prevents buffer overflows in NS and reception overruns in Personal Computers. 
 - To prevent more than one Packet being transfered on the common data bus at a time, DB-Token signal 
circulated on a control loop is used in NS. The software required for communication between personal 
computers should have a simple structure due to their small main storage and micro- processor capacity. 
 - We design a simple data transfer protocol. -We devide the communication software into some hierarchical 
modules and a few modules are resident on main storage. READ or WRITE system call will be processed 
by Inter Process Comminucation (IPC) Process as if the file system will do. In this paper, we concentrate 
on the following operations of an experimental network and evaluation of this experimental system. - 
 The interface between NS and pesonal computers - The packet switching mechanism in NS  - The data 
transfer protocol in IPC process  2. BASIC SYSTEM CONFIGURATION Concept We intend to design our network 
for personal computers, each having built-in 8 or 16 bit microprocessors. Our experimental network system 
uses Fujitsu Micro 8s (FM-8s), which are high- performance personal computers using MC6809 microprocessors. 
The major advantage of a personal computer network system is that resources can be shared (including 
files) by independent stations. 222 The Local Area Network (LAN) designed for super personal computers, 
minicomputers, or mainframe computers is not suitable for personal computers. The major reasons for this 
is as follows: The relative cost of the LAN in comparison with the personal computers connected by the 
network is high. The performance provided by such a high priced network is not required in computer network. 
 To solve this problem, we developed what we call the Node Subsystem (NS) shown in Figure i. Communication 
between personal computers at a given site is done through the NS. To connect networks of personal computers 
between sites or to a network of super personal computers, minicomputers, or mainframe computers, is 
a simple matter to connect the NS to the LAN hierarchy. NS would exchange information through gateway 
to LAN. Planning the personal computer network The basic network development plan is outlined below. 
 (i) The performance levels of the network were to be as follows: - Maximum of personal computers per 
NS : 80 - Data transfer rate : 100K bits/sec and IM bits/sec - Transmission distance : iKm (for 100K 
bits/sec) 120m (for IM bits/sec) (2) Transmission media and interfaces had to be easy to handle. So 
we used two twisted pair lines and one ground line.  (3) Invalid transmission packets had to be prevented 
for efficient communication. The disappearance of packets during transmission was to be prevented by 
buffering in the network and using some control signals.  (4) Packets had to be switched at high speeds. 
Increases in traffic were to have no affect on packet switching time.  (5) The network system had to 
be highly reliable. Errors had to be detected easily and localized immediately.  (6) The NS had to be 
provided with interface functions enabling connection with standardized LAN.  We developed a working 
personal computer network system based on this plan and tested it on site. 3. EXPERTMENTAL SYSTEM CONFIGURATION 
 (i) Interface between the NS and the personal computer The interface between the NS and the personal 
computers in the network has the following characteristics: - The line driver and line receiver conform 
to the RS422 standard (CCITT VII recommendation) , and consist of five metalic lines. There is a twisted 
pair lines for data transmission, a twisted pair lines for data reception, and one ground line.  - The 
interface hardware in adapter unit (ADP) was simplified by using low-cost communication LSl (such as 
the Motorola MC6854) to assemble and disassemble data packets in the network. Figure 3 shows the data 
packet format.  - The NS provides three data transfer rates for each line interface unit (IM bits/sec, 
100K bits/sec, and 10K bits/sec) and allows the user to select the test data transfer rate for his personal 
computer. -The network's sending buffer was provided with control signals to prevent buffer overflow 
during continuous data transfer.  - The NS was provided with a function for requesting personal computers 
in the network to prepare for packet reception and to wait for reception ready signals before sending 
packets in the NS receiving buffer. These functions are designed to prevent data reception overruns caused 
by packets arriving prior to the computer being ready, for example, while the computer is processing 
earlier data. This NS sending and receiving buffer control function is implemented by transmission and 
reception of the following three signals:  i. SEND GRANT: The NS sending buffer is empty (from NS to 
PC).  ii. RECEIVE REQUEST: The NS sending buff- er is full (from NS to PC). iii. RECEIVE GRANT: A 
PC is ready to re- ceive a packet (from PC to NS). These signals do not use the HDLC frame format created 
by the communication LSI. They are generated as one-byte binary codes framed by two flag bytes, and are 
sent and received while the HDLC frame is idle. (2) Packet switching -To simplify packet switching 
and the hardware it requires, the line interface units (L.INF A) in the NS send and receive packets between 
buffers through the common date bus. 223  -To prevent more than one date packet being transfered on 
the common date bus at a time, and to avoid overwriting a receiving buffer in a destination line interface 
unit, TOKEN signals circulated on one control loop is used. The following describes how the above functions 
are implemented (Figure 2). Each line interface unit (L. INF A) in the NS is provided with sending and 
receiving buffers for handling data packets. A data packet transmitted by a personal computer is first 
loaded in the sending buffer of the line interface unit that receives the packet. Then a data packet 
in the sending buffer are sent at a burst to the receiving buffer of the destination line interface unit. 
TOKEN signals indicating authorities to use the common date bus (DB) and the receiving buffers of line 
interface units (RBi where i=l~N), are simultaneously circulated on the control loop that connects the 
line interface units. The line interface unit that obtains both authorities (one to use the receiving 
buffer of the destination line handling unit, and the other to use the common data bus) then transfers 
the packet. Figure 4 shows the control loop frame format. Thus, personal computers that access a common 
resource can be easily managed and controlled by circulating TOKEN signals on one control loop. This 
technique also enables the common data bus to be efficiently used. If a TOKEN signal is lost or destroyed 
(a line interface unit is locked when holding a TOKEN signal or a TOKEN signal is destroyed by noise), 
the entire system will go down. To prevent a system down, the network requires a function to constantly 
monitor the TOKEN signals on the control loop and to generate identical signals to replace lost signals. 
 i) DB-TOKEN recovery The looper was used to monitor the interval when the common data bus is used, 
and to insert a replacement DB-TOKEN signal if a TOKEN signal is not returned within a specified time. 
 The monitoring interval was determined as follows: When the NS contains N line handling units and operates 
normally, the maximum interval for which the TOKEN signal must be circulated is the interval required 
for all line handling units connected to the looper in the direction of control loop circulation to 
successively receive the TOKEN signal. The transfer time for a single packet is expressed by the maximum 
packet length, Lmax, and the common data bus data transfer rate, Cs, as follows: Lmax * (i/Cs) Therefore, 
the looper mon itor interval is expressed as: Tm >= N * Lmax * (i/Cs) (i) ii) RBI-TOKEN recovery Line 
handling units were designed to monitor the conditions on the interface between the units and their 
respective personal computers as well as the signal conditions on the control loop. They were also designed 
to initialize their receiving circuits (including their receiving buffers), and to insert their receiving 
buffer TOKEN signals (RB: Indicates respective receiving buffers) if either of the following conditions 
is satisfied: - The interface between a personal computer and the assinged line handling unit does 
not send a FLAG IDLE signal within the specified time interval. The interface between a personal computer 
and the assigned line handling unit is designed to send a FLAG IDLE signal except when transferring a 
packet or sending a buffer control signal. The maximum internal for which no FLAG IDLE signal need be 
sent is expressed by the line data transfer rate, Ls, the maximum packet length, Lmax, and the monitoring 
time interval, Tf, as follows: Tf = Lmax * (i/Ls) (2)  -The reception buffer is empty, the TOKEN (RBI) 
signal is held, and the DB-TOKEN signal is not inserted within a fixed time interval. The monitoring 
interval, Te, is expressed by the control loop data transfer rate, Cs, and the control loop frame length, 
M, as follows: Te = 2 M * (i/Cs) (3)  (3) Packet transfer procedure Data packet transfer between a 
personal computer and the assigned reception buffer is explained below. (a) From a computer to an assigned 
sending buffer The sending computer uses the SEND GRANT signal to check the sending buffer of the assigned 
line interface unit before sending a data packet. This prevents overflow in the sending buffer.  (b) 
From assigned sending buffer to destination receiveing buffer The source line interface unit  224 
monitors TOKEN signals circulated on the control loop to verify that the destination receiving buffer 
is empty and that the common data bus is not being used before transferring a data packet. (c) From 
destination receiving buffer to receiving computer The RECEIVE REQUEST signal notifies the receiving 
computer that a destination packet for it has arrived. When it receives the RECEIVE REQUEST signal, the 
receiving computer prepares for data packet reception. Once preparation is completed, the receiving computer 
sends the RECEIVE GRANT signal before transmission of data packet to prevent overrun at the receiving 
computer.  (4) Software structure When building a network of personal computers, the software required 
for communication between computers should have a simple structure due to their smaller main storage 
and MPU capacities. We divided the communication software by functions and arranged those functions into 
modules, as shown if Figure 6. The software is also designed so as not to place restraints on the use 
of main storage or affect the performance of a computer if a particular application program does not 
use the communication function. (a) Function process The function process is used to transfer and delete 
files and activate other process modules that run on other computers. This process can be activated by 
a use command as well as by an application program. (b) Inter Process Communication (IPC) process The 
IPC process can be activated by the function process or directly by an application program. An activated 
process links itself to the IPC process of a computer for communication over a logical path, enabling 
communication between IPC processes. In addition, during communication, the IPC process assembles packets 
and handles error recovery. Requests for IPC or WRITE or READ system call commands are done as for I/O 
file operations. The purpose of this message request method is to enable an application program to send 
and receive messages easily without having to directly recognize the network. (c) Packet sending and 
receiving controller, send process, and receive process Only the packet sending controller, packet 
receiving controller, send process, and receive process are resident on main storage. This is done so 
as not to place restraints on the use of main storage by application programs. The send process sends 
packets containing messages received from IPC process modules to the network. The receive process sends 
packets received from the network as messages specified IPC process module. to the (5) Communication 
between processes Figure 7 shows the protocol used communication between processes. for To simplify 
data processing, the IPC process sends a single message from the function process as a packet and receives 
an acknowledgment (response) for each packet. For a source application program to be able to process 
a message immediately after it is received, and to prevent queueing of messages beyond the specified 
limit on the destination application program side, the IPC processes on both sides of the source and 
destination application programs have sending and receiving windows to control data flow. (The number 
of message buffers is called the window size.) In destination personal Computer; The IPC process reduces 
the receiving window Counter (RWC) by one when a message arrives from source personal computer. If the 
window count become non zero, the IPC process returns response to source IPC process. The IPC Process 
increases the receiving window Counter by one when response which means destination function process 
two already processed the previous message. In source personal Computer; The IPC process reduces the 
sending window Counter (SWC) by one when a message to be sent arrives from function process and increases 
it by one when a response is received from the destination IPC process. If either window count become 
zero, the IPC process stops returning responses until the count of the windows becomes one. This is the 
basic control on data flow between application programs. 4. EVALUATION  In this section, the performance 
of the packet transmission is determined from the measured transfer rates of data packets between processes. 
The first calculation is for the time to transfer a data packet in the data communication modes of Section 
3.(3) and 3.(5) under 225 normal conditions.  When the window size is one, the time for transmission 
of a single data packet, including the response packet, is calculated by Expression (7) below. T = (OSp 
+ OSr) + (Sp + Sr) A * L + (2*8 * L + 64) * (i/is)  + (8*L + M) * (I/Cs)  + (2*8 * HD +64) * (i/Ls) 
 + (8*HD + M) * (i/Cs) (7)  OSp + OSr: operating system overhead Sp + Sr: Processing required for 
each process A: Processing according to packet length for each process L=HD+DL: packet size HD: packet 
header length DL: packet data length LS: line speed CS: control loop speed /common data bus speed M: 
control loop frame size Constant value 64: Number of buffer control signals  The following averages 
for unfixed values (OSp + OSr) + (S + Sr) and A in Expression (7) were calculated by transferring data 
packets and measuring the data transfer rate under normal conditions. Measuring conditions Number 
of packets transferred: 3000 Processing function: Data transfer from main storage Ls: 1 Mbits/sec, 
Cs: 10 Mbits/sec M: 100 bits, HD: 14 bytes Calculated values A = 36.2 s (OSp+OSr) + (Sp+Sr) = 72000 
s  Figure 8 shows the packet transfer rates measured after changing the data length of a packet transferred 
from main storage by a functon process under normal conditions. (i) Influence of line data transfer 
rates  The data transfer rate of the line is set to a maximum of IM bits/sec to account for the capabilities 
of the microprocessors and peripheral LSIs(ADLC- MC6854).  If twisted-pair cables are used for data 
transmission, and driver and receiver elements conforming to the RS422 standard are used, data can 
be sent up to about 120 meters at 1 M bits/sec. If the data transfer rate is lower, the data transfer 
 distance can be extended. To show how the effective data transfer rate is influenced by Ls, Figure 
8 shows the effective data transfer rates calculated by changing Ls in Expression (7).  As Figure 
8 shows, the effective data transfer rate fell to 3.5K bytes/sec at a packet length of IK bytes, a 
Ls of 100 bits/sec, a window size of I, and Cs of 10M bits/sec. Under these conditions, when Ls is increased 
to IM bits/sec, the effective data transfer rate is 8.0K bytes/sec, and is only marginally improved by 
increasing Ls. These tests indicate that to significantly improve the effective data transfer rate, 
the IPC process should be optimized. The reason is that we wrote the IPC process in high level language 
but we have not optimized it yet. When transferring a packet of 5~0 bytes or more, the influence of 
the packet header on the data transfer rate is small enough to be ignored. Our experimental system allows 
packets of up to 1.5K bytes, depending on the capacity of main storage (64K bytes) and the size of the 
application program. (2) Influence of CS under overload conditions The average data transfer rate under 
overload conditions is calculated as follows. An overload condition occurs when there are packets sent 
by all computers in the network on the common data bus at once. If more than one packet transfer request 
exists simultaneously on the common data bus, the packets will attempt to simultaneously obtain a DB- 
TOKEN signal for authorization for using the common data bus in the NS. Packets failing to obtain the 
DB-TOKEN signal wait for release of the signal and attempt again to obtain it. If there are n packet 
transfer requests on the common data bus at the same time, the average number of times a packet attempts 
to obtain a DB- TOKEN signal is expressed as: K = (n -i) / 2 The average time a packet is on the common 
data bus is expressed as: To = (8 * La + M) * (i/Cs) La: Average packet length Therefore, the average 
time it takes a packet to obtain a DB-TOKEN signal is expressed as: Tw = K * To = K * (8 * La + M) * 
(I/Cs) Figure 9 shows effective data transfer rates calculated by Expression (7), assuming that all 
data packets are of the same length. The time it takes a packet to obtain a DB-TOKEN signal is also considered. 
The following parameters were used to calculate the rates shown. window size: i, packet size: 1K bytes 
 Ls : 1Mbits/sec Cs : 5 Mbits/sec, 10 gbits/sec,  226 15 Mbits/sec  Figure 9 shows that, if 80 personal 
computers are connected to the NS, and the data transfer rates (Cs) of the common data bus and control 
loop are set to 10Mbits/sec or higher, the data transfer rate is reduced by 20% for IK byte packets 
during overload. (3) Effect of window size on transfer rate Since the NS uses a communication protocol 
in which a response is requested for each packet sent, as shown in Section 3 (5), if the window size 
is one, the source processor is idle from the moment a data packet is sent until a response packet is 
reurned. This clearly lowers the data transfer rate, and can be avoided to some extent by increasing 
the window size. Figure 10 shows the data transfer rate measured after changing the window size. The 
upper two curves were determined with the function process operating under a minimum load. The lower 
two curves were determined under overload conditions. The figure indicates that as the amount of load 
increases, the effect of the window increases. 5. Conclusion  This paper proposed and reported on a 
Node Subsystem (NS) network for personal computers. The intention in using the NS network system is 
to connect personal computers, which are not suitable for available LAN systems. The network was designed 
using twisted-pair cables for data transmission between personal computers and the NS itself, making 
it economical and easy to use . The NS is designed to guarantee that packets sent by a personal computer 
in the network will not be lost or destroyed, provided there are no transmission line errors. This increase 
in transmission efficiency improves the effective data transfer rate. our experimental NS network has 
the following capabilities: Maximum number of personal computers: 80 Line data transfer rates and distances: 
IM bits/sec at up to 120 m, 100K bits/sec at up to IKm Maximum packet length: 1.5K bytes  Evaluation 
of this experimental system, based on our measurements, showed the following: -The effective data transfer 
rate fell to 8.0Kbytes/sec at a packet length of iKbytes, an Ls of iMbits/sec, a window size of i, and 
a CS of 10Mbits/sec. These tests indicate that to significantly improve the effective data transfer 
rate, the IPC process should be optimized. -While the NS was operating under overload conditions (where 
th~ packet length was IK bytes, Ls was IM bits/sec, and the window size was i, and Cs was 10M bits/sec; 
80 personal computers were connected to the MS), the data transfer rate is reduced by 2@%. This rate 
of deterioration was small enough to be ignored. -The effect of the window size on the IPC process was 
determined by the data transfer rate when the window size was 1 and 2. With IPC operating at a window 
size of 2 under a minimum load, the data transfer rate was about 5% better than with a window size of 
i. This improvement can be attributed to the IPC process beginning the transmission of the next packet 
before the receiving computer completes reception of the current packet. We have been working on optimizing 
the IPC process for further improvement of the effective data transfer rate. We have also been developing 
a shared file system enabling concurrent updating of a single file from more than one personal computer. 
 Acknowledgement We wish to extend special thanks to Dr. Kurokawa, director of the Basic Technology 
Research Department, Mr. Minejima, director the Systems Research Depart,nent, and Mr. Soma, director 
of the First Research Section of Systems Research Department for their valuable assistance in the research 
of the NS network system. References (i) R.M Metcalfe and D.R.Boggs, "Ethernet: Distributed packet 
switching for local computer networks", Communic. ACM vol.19 , no 7, July 1976  (2) Bruce T. Bisehard, 
"Corvus Omninet and its position in a hierarchical network"  COMPCON 82 Fall. IEEE COMPUTER 5OCIETY 
PRESS, 1982 227 I ....... personal ~ter nay~°rk LAN : Local Ar~t Net.~ork If- I train film I ComputerI 
(~200) ,J   Pr,~r -I.:..~U I ~per personal coe~ter J LAN 0O.. Printer Hard Ollk I Printer I .Mr I 
I /----~, \\ ~r~ Di,k ------~ Gate May J \ /" \~ r~ ~r,.,°r "l~sys~ [ ~/'~--~/,1 Experimentalsystem 
/llprinter (Fts.2) Fig. 1 Basic system confisuration Personal coam~ter Node Subeyetem (NS) I F. A I n 
I~fram I . . ! . I ~ GATE ~Y I----r--I ~ ~ ~ L'INF C [H I-9-1 processor ~--" ~[~] FD commn data bus : 
10Hbit/esoo Fi8.2 Experimntel ~ystem confisuration 228 DATA CRC I 'F ' is start of packet flaB, 'DA' 
is destination host addrm, 'SA' is source host addresa, 'DLCN' la destination loBical channel number 
(process' ID) 'SLOt ie source losicei channel number (proce~' ID) 'Fr' le packet tYPe 'NUN' is nunber 
of Packet field 'PlCrY' ie the Parity bit 'DFA' is deetination function process' ID 'SFA' is source function 
process' ID 'CTL' is control field 'OLN' is the lenBth of the data field 'DATA' is the data field 'CRC' 
is flam check sequence field Fig.3 Packet structure of the network ....... lOObit " ~1 'FLAG' is synchronizin8 
pattern 'RBi' indicates the condition of the receivin8 buffer correspondlns to the co~utar at addr~s 
i 'DE' indicates common data bus ia busy or idle Fis.d Control loop fraN format Personal Computer Node 
Subaystu Personal Cceputar (daatirmtion) (Iour~)R.buffer $.buffer send 'Brant data data packert I receive 
reques~ N receive Brant data packet ADP L. INF A L. INF A ADP FIB,5 packet transfer procedure 229 Personal 
Cosputer Netmork ,,,l,-[ i Punotion cation -'* proceon prograll t-.-- l,PC i ~ process I I ,,..-- Send 
prOCess I S/R crL Appli-IPC ---Receive cation ' process prnce~, progras , i , I I IPC: Inter Process 
Comunication L resident S/R CTL : packet sending and receiving controller Fig.6 Consunication software 
structure < source PC > <destination PC> function ;~: ipc fuectlon 'ec ~ <source PC > <destination PC> 
S~ nwrl te (21 r~) ~1 readfunction |Pc ' ipo function ~D ' reap IX) --~ --~ 4 ................. .(1) 
nfork CN ffork 4 ......... D roap connection , CN~SP reap Ill ~-~ -~ 4; ................. nNri ta (2) 
~) , 'CN' is connection request reap (Z) --~ 'CNRSP' is connection response .................. (0) nwrita 
stead @ I Pig.7 (,a) Connection sequence (0) reap 4 ................. , ....... !:L resp (1} nresd 
® * ...... .~,.'?.~ ....... 4 (l)(2) <source PC > <destination PC> nresd function ipc ipc function I 
nexit DICN disconnection reap '1 (2) DICNRSP SHC : sending window counter [~C : rm~eivini windon ~onnter 
(i) : the nosher of empty message buffers 0 : the seqonnae nu,d~r of data packet  'DICN' is disconnection 
request .----receive requont p~het 'OlSCNI~SP' is disconnection response *"--data packet .... mponae 
packet Fig.'/ ( b ) Disconnection sequence Pii.7 ( c ) Data packet transfer 230 .~ ~, ;:-: :::::::::::::::::::::::::::::::::::::::::::::::::: 
~ , u--_ -h .--_.~::=-:~-~:-:~---:---~ .......... ~-...... ; ...... ::: Packet s~ze (bytes) .-::--~== 
~=:~.---------~-]---~ ~~-~:-:~--="~:::£" Fig.8 Influence of line data transfer razes O.s) .¢:-'-~~ Yig.lO 
Effect of .indo. size 231   
			