
 The Pebbling Problem is Complete in Polynomial Space!/ John R. Gilbert ~/ Thomas Lengauer ~/ Robert 
Endre Tarjan ~/ Computer Science Department Stanford University Stanford, California 9h305 Abstract. 
We examine a pebbling problem ~hich has been used to study the storage requirements of various models 
of computation. Sethi has shown this problem to be NP-hard and Lingas has shown a generalization to be 
P -space complete. We prove the original problem P -space complete by employing a modification of Lingas's 
proof. The pebbling problem is one of the few examples of a P -space complete problem not exhibiting 
any obvious quantifier alternation. Keywords: computational complexity, P -space completeness, pebbling, 
register allocation. 1. Introduction. In this paper, we consider the following 2ebble game. Let G be 
a directed acyclic graph, all of whose vertices have at most two predeces- sors. 2/ Given a collection 
of pebbles, we wish to place a pebble on a distinguished vertex of G , called the goal, starting with 
no pebbles on the graph, by applying the following rules: (i) A pebble may be removed from a vertex 
at any time. (ii) If all predecessors of an unpebbled vertex v are pebbled, a pebble may be placed on 
v. (iii) If all predecessors of an unpebbled vertex v are pebbled, a pebble may be moved from a predecessor 
of v to v . We shall consider time to be divided into integral steps. At each time step, one of rules 
(i)-(iii) is applied once. The space required by the pebbling is the maximum number of pebbles ever on 
the graph at one time; the time required is the number of applications of rules (i)-(iii). This pebble 
game has been used to model register allocation [14], to study flowcharts and recursive schemata [9], 
and to analyze the relative power of time and space as Turing machine resources [1,6]. Our interest lies 
in determining the compu- tational complexity of the following problem, which we call the pebbling problem: 
given a graph G , can a given vertex v in G be pebbled using no more than s pebbles? This problem is 
not l/ Research partially supported by National Science Foundation Grant MCS-75-22870 A02 and Office 
of Naval Research Contract N00014-76-C-0688. Reproduction in whole or in part is permitted for any purpose 
of the United States government. 22 Research partially supported by a Hertz Fellowship. ~/ Research 
partially supported by the German Academic Exchange Service. ~/ Research partially supported by a Guggenheim 
Fellowship. 52 We shall use the following graph-theoretic terminology. A directed graph G = (V,E) is 
a collection of vertices V and a collection of edges E . Each edge is an ordered pair (v,w) of distinct 
vertices. If (v,w) is an edge, v is a predecessor of w and w is a successor of v . A source is a vertex 
with no predecessors; a sink is a vertex with no successors. A Path from v to w is a sequence of vertices 
v = Vl, V2,...,v k = w such that vi+ 1 is a successor of v. for 1 < i < k . A eycle is a l path of at 
least two vertices from v to v . A graph is acyclic if it has no cycles. 237 &#38;#169; 1979 ACM 0-89791-003-6/79/0400-237 
$00.75 See page ii ./  necessarily in NP, -j since the number of moves necessary to pebble G with s 
pebbles may not be polynomially bounded [lO]. However, the problem is in polynomial space, since a sequence 
of moves can be guessed and checked by a non-deterministic machine; only polynomial space is necessary 
to remember a single arrangement of pebbles on the graph (or configuration). By Savitch's theorem [12], 
such a non-deterministic machine can be converted into a deterministic machine for which the space bound 
is at most Squared. Most of the known P-space complete problems,  such as the quantified Boolean formula 
problem [15] and various game problems [3,4,7,13] possess an obvious quantifier alternation not present 
in the pebbling ~problem. Thus we might expect difficulties in showing the pebbling problem P-space complete. 
Sethi [14] was able to show the problem NF-hard, and NP-eomplete in the special case that each vertex 
can be pebbled only once. Lingas [8] generalized the problem by allowing "or" vertices (an "or" vertex 
can be pebbled if at least one of its predecessors is pebble@) and proved the generalized version p-space 
ccmrplete. We sha3_l prove the original pebbling problem P-space com- plete by modifying Lingas's construction. 
The next section of the paper contains the proof. The concluding section mentions some additional conse- 
quences of our construction. 2. The Construction. Quantified Boolean Formulas. In order to prove the 
pebbling problem P-space complete, we must reduce a known P-space complete problem to the pebbling problem. 
For this purpose we choose the quantified Boolean formula problem (QBF) [15]: Determine whether a quantified 
formula of the form %x 1 ~x2... %XnF is true, where each x i is a Boolean variable, each ~ is either 
an existential or a universal quantifier, and F is an unquantified Boolean formula involving only the 
variables x i , in conjunctive normal form with exactly three literals per clause. From the quantified 
formula we construct a graph G with a goal vertex ql and a number of pebbles s such that the quantified 
formula is true if and only if ql can be pebbled with s pebbles. It will be evident that the transformation 
from formula to graph can be accomplished in logarith- mic space; it follows that the pebbling problem 
 is log-space complete in P-space. We need a notation to denote substitution of  truth values in F 
. For technical reasons we substitute for the literals rather than for the variables: F(el, e2, ..., 
e2k_l , e2k ) denotes the formula obtained from F by replacing each occur- rence of x i by e2i_l and 
each occurrence of xi by e2i , for 1 < i < k . Here each ej is either true or false. Thus F(true, false) 
 denotes making x I true (and Xl false), F(false, true) denotes making x I false (and true), and F(false, 
false) denotes the "double false" substitution making x I false and Xl also false. (We shall have no 
need to consider the "double true" substitution F(true, true) .) Note that if F (el, ..., e2k.2 , false, 
false, e2k+l , ..., e2n ) is true, then both F(el, .., e2k_2, true, false, e2k+l , ..., e2n ) and F 
(el, ..., e2k_2, false, true, e2k+l , . .., e2n ) are true. Thus if Qk+lXk+l . .. %XnF(el, ... , e2k_2 
, false, false) is true, so is VXkQk+iXk+l... %XnF(el, .... e2k_2 ) . Some Useful Technology. An important 
building block in our construc- tion is the "pyramid" graph exhibited in Fig. l, which we shall abbreviate 
with a triangle as indicated in the figure. Cook [1] has shown that the sink (or a p.ex) of a pyramid 
with k sources can be pebbled if and only if at least k pebbles are available. One use of a pyramid is 
to lock a pebble on a given vertex for a given time interval. This can be done by making the vertex the 
apex of a pyramid which is so large that in order to repebble the vertex, so many pebbles have to be 
taken off the graph for use on the pyramid that the results achieved after the vertex was first pebbled 
are lost. ~/ We use standard concepts from complexity theory without defining them. For a thorough discussion 
of NP, P -space, and completeness, see [5 ]. We also note that if any source of a k-pyramid contains 
a pebble which cannot be moved3 then the apex can be pebbled with k-i additional pebbles. [Figure i] 
 We now make some general observations about pebbling strategies which are similar to those of Pippenger 
[ll]. We partition the pebble place- ments into necessary and unnecessary placements as follows. The 
first placement on the goal vertex is necessary; all other placements on the goal vertex are unnecessary. 
A placement on any other vertex v is necessary if and only if the pebble placed remains on v until a 
necessary placement occurs on a successor of v . The necessary placements are well-defined since the 
graph is acyclic. Deletion of all unnecessary placements from a pebbling strategy results in another 
pebbling strategy. We call a pebbling strategy with no unnecessary placements frugal. The follow- ing 
statements are true of any frugal pebbling strategy. (i) At all times after the first placement on 
a vertex v , some path from v to the goal vertex contains a pebble.  (ii) At all times after the last 
placement on a vertex v , all paths from v to the goal vertex contain a pebble. (This is true also of 
non-frugal pebbling strategies. )  (iii) The number of placements on a non-goal vertex is bounded by 
the total number of placements on its successors. We call a pebbling strategy normal if it is frugal 
and if it pebbles each pyramid P in G as follows: after the first pebble is placed on P , no placement 
or removal occurs outside P until the apex of P is pebbled and all other pebbles are removed from P . 
No new placement occurs on P until after the pebble on the apex of P is removed. Lemma 1. If the goal 
vertex is not inside a pyramid, any pebbling strategy can be transformed into a normal pebbling strategy 
without increasing the number of pebbles used. Proof. Consider any pebbling strategy. First obtain 
a frugal strategy by deleting all unneces- sary placements; this does not increase the number of pebbles 
used. Then let t I be a time at which a pebble is placed on a k-pyramid P . Let [t0, t2] be the largest 
time interval containing t I such that P is never pebble-free during [to, t 2] . Since the pebbling 
strategy is frugal and the goal vertex is not in P , the only pebble on P at time t 2 is on the apex 
of P . Since at time t0-1 no pebbles are on P ~ there must be a time t 3 during [to, t 2] at which k 
pebbles are on P . Modify the pebbling strategy as follows. Delete all placements and removals from 
P during [t0, t 2] . Insert at t 5 a con- tiguous sequence of moves which pebbles the apex of P using 
k pebbles and then removes all pebbles on P except the one on the apex. This transformation results in 
a pebbling strategy since no vertex in P has a predecessor outside P , and the only vertex in P which 
precedes vertices outside P is the apex. If the inserted sequence contains no unnecessary placements, 
then the transformed strategy is frugal. Furthermore it uses no more pebbles than the original strategy. 
Repeating this transformation for each placement on a pyramid results in a normal strategy. [] Details 
of the Construction. To describe the construction we need a little more notation. Recall that n is the 
number of quantifiers. The number of pebbles we allow is s = 3n+3 . For 1 < i < n+l , let s i = s-3i+ 
3 thus s I = s and Sn+ 1 = 3 Roughly speaking, we use three pebbles to keep track of each quanti- fier 
and its associated variable, and three more to check the validity of the clauses of F under a given 
assignment to the variables. Let F con- tain m clauses _ for (ljlV1j2V~j3) 1 < j < m, where each ljk 
is a literal. For any variable x , we shall regard ~ as synonymous with x . The graph G to be constructed 
consists of n+m blocks of vertices, one for each quantifier and its associated variables and one for 
each clause in F . The quantifier block for ~.x i includes four vertices to represent the variable x. 
, aS illustrated in Fig. 2. Two pebbles placed l on this subgraph encode the truth values of x. l and 
x. as illustrated in Fig. 2(b)-(d). The 1 remainder of a quantifier block depends on the quantifier. 
[Figure 2] Figure 3 illustrates a universal quantifier block. The way this block works is as follows. 
There are essentially two ways to pebble qi with s i pebbles: (i) pebble qi+l twice with si+ 1 pebbles, 
each time with three pebbles fixed on the i-th quantifier block, once representing x. true 1  and 
once representing x. true (the third pebble l  is fixed on d i or a i respectively); or (ii) pebble 
qi+l once with si+ 1 pebbles, while three pebbles representing x. false and x. false are l l  fixed 
on the i-th quantifier block. [ Figure 3 ]  Figure 4 illustrates an existential quantifier block. The 
only way to pebble qi with s i pebbles is to pebble qi+l with si+ 1 pebbles, while three pebbles representing 
one of the three possible truth assignments to x. and x. are l 1  fixed on the i-th quantifier block 
(the third pebble is fixed on d i ). [Figure 4] Figure 5 illustrates the block of vertices representing 
a clause. After s-3 pebbles are used on the quantifier blocks to fix an assignment to the literals, the 
remaining three pebbles are available to pebble the clause blocks. For each literal ~jk ' there is a 
fixed pebble on vertex ~jk if the literal is true, or on vertex ~' if jk  the literal is false. Thus 
if F is valid, the clause pyramids can be pebbled in the order PO'Pl' "" "'Pro = qn+l with three pebbles; 
however, if seme clause (~jlV~j2V~j3) is false, pj is the apex of an empty 4-pyrsmid and cannot be 
 pebbled with three pebbles. [Figure 5 ] Figure 6 illustrates the entire construction. Note that PO is 
a single vertex, and that Pm= %+1 [Figure 6]  Proof of the Reduction. Our main result is as follows. 
 Theorem 1. The quantified Boolean formula QlXl Q2x2 ... QnXn F is true if and only if vertex ql in 
the graph G constructed as above can be pebbled with s = 5n+3 pebbles. We prove this theorem by means 
of two lemmas which state that if we use s-s i pebbles to fix truth values for the literals corresponding 
to the first i-1 variables, then we can pebble qi with the remaining s i pebbles if and only if the quantified 
formula is valid after making the appropriate substitution. The lemmas are proved by induction on i . 
For 1 < i < n+l , we define N i to be the set of configurations fixing truth values for the literals 
corresponding to the first i variables. An arrangement of exactly s-s. pebbles on G is in N. if and only 
if, for 1 1 < j < i , two conditions hold: (1) If Qj = V , there are exactly three pebbles on the j-th 
quantifier block, on one of the following three sets of vertices:  (a) "[aj, xj, x[.] , indicating x.j 
true,  d-  (b) {dj, xj, x~} , indicating xj false, or  (C) {dj,x~,x~} , indicating double false. 
  (2) If Q~ = ~ , there are exactly three pebbles on the j-th quantifier block, on one of the following 
three sets of vertices:  (a) {dj,xj,x~] , indicating xj true,  (b) {dj,xj,x~} , indicating xj false, 
or  (c) {dj,x~,x~} , indicating double false.   Note that N 1 contains only the configuration with 
no pebbles on the graph, and Nn+ 1 contains all configurations in which a truth assignment has been made 
to each literal and three pebbles remain to test whether the assignment makes F true. Lemma 2. Let 1 
< i < n+l . Suppose the graph is initially in a configuration in N. For 1  i _< j < i , let e2j_l 
be the truth assignment defined for x. by that configuration, and let J e2j be the truth assignment 
defined for x.. If J Qixi... ~XnF(e l,e2,...,eRi_3 ,e2i_2 ) is true, then vertex qi can be pebbled with 
s i addi- tional pebbles without moving any of the s-s. pebble s initially on the graph . i Proof. to 
1 . Proof is by induction on i f rom n+l Basis. Let i = n+l and suppose that the assignment defined 
by the N. configuration makes F true. 1 We must show that vertex qn+l =Pm can be pebbled with Sn+ 1 
= 3 additional pebbles without moving any of the pebbles of the N i configura- tion. For each clause 
(~jlV~j2V~j3) of F , there is a pebble of the configuration on ~jl or ~j2 or ~J3 ' and if there is not 
a pebble on ~jk then there is a pebble on 2jk ' for 1 < k < 3 It follows that with three additional 
pebbles we can pebble po, Pl,...,p m in turn as described earlier. Note that we need at least three 
addi- tional pebbles, since each pj for j ~ 1 is the apex of a three-source pyramid initially containing 
no pebbles. Inductive step. Suppose that the lemma holds for i+l , and that the assignment defined 
by the N i configura- tion makes the substituted formula ~x i ... QnXnF(el, e2,...,e2i_3, epi_2) true. 
 Case 1 (universal quantifier). Suppose Qi = V . Then %+lXi+l "'" Q~XnF(el,...,e2i_2, true, false) and 
 Qi+lXi+l ... QnXnF(el, ..., epi_2 , false, true)  are both true. Vertex qi can be pebbled with s i 
pebbles as follows. First use all s i pebbles to pebble x: leaving a pebble there. Then use the remaining 
si-i pebbles to pebble d i , leaving a pebble there, and the remaining si-2 pebbles to pebble x. , leaving 
a pebble there. The current configu- i ration is in Ni+ 1 , representing x i false. Applying the induction 
hypothesis, pebble qi+l with the remaining si+ 1 = si-3 pebbles. Move the pebble on qi+l to c i , b 
i , and a i . Move the pebble on x! to x.. Leaving pebbles on a. 1 1 l and x i , pick up the rest of 
the pebbles and use the s.-2 free pebbles to pebble x! , leaving a l l pebble there. The current configuration 
is in Ni+ 1 , representing x i true. Applying the induction hypothesis, pebble qi+l again. Finish by 
moving the pebble on qi+l to gi ' fi ' and qi " If ~+iXi+l .. %XnF(el, .... e2j_2, false, fs.Ise) is 
true, there is a way to pebble qi which only pebbles qi+l once. First pebble x! 1 ' di ' and x!l ' which 
gives a configuration in Ni+ 1 repre- senting x. and x. both false. Applying the 1 l induction hypothesis, 
pebble qi+l " There are now s.-h > 2 free pebbles. Place one on x. and 1 -i move it to e i , b i , 
and a i . Move the pebble on ~:l to gi ' and finish by moving the pebble on x!l to xi ' fi ' and qi 
" Case 2 (existential quantifier). Suppose = Z . Then either ~+lXi+l ... ~XnF(el,...,e2i_2,true, false) 
or %+lXi+l "'- %XnF(el,...,epi_2, false, true) is true.  Suppose first that the former is the case. 
Vertex qi can be pebbled with s i pebbles as follows. First pebble x! leaving a pebble i ' there. Then 
pebble d i and fi ' leaving pebbles there. Move the pebble on fi to x!l ' and move the pebble on x! to 
x.. The current configu- l l ration is in Ni+ 1 , representing x i true. Applying the induction hypothesis, 
pebble qi+l with the remaining si+ 1 = s -3 pebbles. There l are now s.-4 > 2 free pebbles. Place one 
on x. and finish by moving it to c i , b i , a i , and qi" Alternatively, suppose that Qi+lXi+l ... 
QnXnF(el, ..., e2i_2 3 false, true) is true. To pebble qi with s i pebbles, begin by pebbling x!l ' di 
, and f.l in turn, leaving pebbles there. Move the pebble on fi to x: l and xi ' which gives a configuration 
in Ni+ 1 representing x i false. Applying the induction hypothesis, pebble qi+l " Move the pebble on 
qi+l to c i and b i . Pick up all the pebbles except those on b. and x! , and use the s.-2 l % l free 
pebbles to pebble f.. Move the pebble on l fi to x~l and a i , and finish by moving the pebble on x:l 
to x.l and qi " Lemma 3. Let I < i < n+l . Suppose the graph is initially in a configuration in N i 
. For 1 ~ j < i , let e2j_l be the truth assignment defined for x. by that configuration, and let J 
e2j be the truth assignment defined for xj . If vertex qi can be pebbled with s i additional pebbles 
without moving any of the s-s i pebbles initially on the graph, then ~xi ... ~XnF(el, ep,..., epi.3 
, e2i_2 ) is true. Proof. Again, proof is by induction on i from n+l to i . Basis. Let i = n+l and 
suppose qi = Pm caabe pebbled with s i = 3 pebbles without moving any pebbles in the N. configuration. 
Then each l pyramid of size four representing a clause of F must contain at least one pebble of the 
N i con- figuration, corresponding to a true literal; that is, the assignment defined by the N i configura- 
tion must make F true. Inductive step. Suppose that the lemma holds for i+l , and that there is a strategy 
which pebbles qi with s. pebbles without moving any pebbles in the N. l l configuration. By Le~mua 
1 we can assume that the strategy is normal. Case 1 (universal quantifier). Suppose Qi = ~ " By frugality, 
each of qi ' ai ' bi ' ci ' di ' fi ' and gi is only pebbled once. Let t O be the last time s i pebbles 
appear on the s i -pyramid. After t O , x!l is only pebbled once. At t O no pebbles appear on vertices 
outside the s i -pyramid. Since the pebbling is frugal, no placement before t O occurs outside the s 
i -pyramid. Thus x:l is only pebbled once, and this occurs before anything else happens. Let t I be the 
tinge x!l is pebbled. From t I until qi is pebbled, a peoble is on x!l ' xi , or f.1 " From t I until 
a i is pebbled, a pebble is on x! . l To pebble a i requires pebbling d i . This requires removing 
all pebbles from the graph except the one on x! . By normality, therefore, l d i is pebbled before anything 
other than x! and a pebble remains on d. until b. is pebbled. l l To pebble b i requires pebbling 
c i and hence x! . This requires removing a/_l pebbles except l those on x! and d.. Therefore x! is 
pebbled l l l inm~ediately after d i and a pebble remains on x! l or x. until c. is pebbled, which 
happens before l l b. is pebbled. By normality, all pebbles except l the one on ~! are removed frcm 
the s.-2 -pyramid l l as soon as x! is pebbled. Let t 2 be the time l these pebbles are removed, and 
let t 3 be the first time after t 2 that qi+l is pebbled: At t 2 there are pebbles on x!l ' di , and 
x! . Pebbles must remain on x! and d i until l l t 3 , and a pebble must be on either x! or x. l l 
 until t 3 . Suppose first that a pebble remains on x!l from t 2 until t 3 . The configuration at t 
2 is in Ni+ 1 with a double false assign- ment to x. , and none of the pebbles on the graph l at t 
2 can be removed until t 3 . Therefore the induction hypothesis says ~hat %+lXi+l . .. ~XnF(el, . . 
. , e2i_2 , false, false) is true, so Vxi%+iXi+l... ~XnF(el,...,e2i_2 ) is true and the lemma holds 
in this case. Alternatively, suppose that the pebble on x! i does not remain until t 3 . In this case 
we will argue that qi+l must be pebbled twice, first with a false assignment to x. and then with a true 
 l assignment to x.. i Either x! or x. must have a pebble from i l t 2 to t 3 . The only successors 
of x! are x. l l and gi ' and gi cannot be pebbled before t 3 . Therefore we can rearrange the strategy 
so that at t2+l the pebble on x!l is moved to xi ' where it must remain until t 3 . The configuration 
at t2+l is then in Ni+ 1 with a false assignment to x i , and none of the pebbles on the graph at t2+l 
can be removed until t 3 . By the induction hypothesis, ~+iXi+l ... ~XnF(el, ... , e2i_2 , false, tr/le) 
is true. At t 5 , there are pebbles on di ' xi ' x! i ' and qi+l " Vertices qi ' ai ' bi ~ ci ' fi ' 
and gi are vacant because they can't be pebbled before qi+l is pebbled. Vertex x~l cotLldn't have been 
repebbled between t2+l and t 3 because three pebbles were fixed on di ' xi ' and x!l during that interval; 
thus x! and (by normality) the i entire s.l-2 -pyramid are also vacant at t 5 . There may or may not 
be a pebble on x i at t 3 . We will now show that immediately after t 3 , a configuration in Ni+ 1 with 
a true assignment to x i is created, and that qi+l must be repebbled while the pebbles in the configuration 
are fixed. By frugality, the pebble on qi+l at t 3 remains until either c i or gi is pebbled. Vertex 
qi+l cannot retain a pebble until gi is pebbled, because to pebble gi requires placing all but two of 
the pebbles on the s.~2 -pyrsmid, and in addi- l tion to the pebble on qi+l' two pebbles are fixed, 
 ! one on x i, x i , or fi and the other on d i, b i, or a i, until qi is pebbled. Thus the pebble 
on qi+l at t 3 remains until c i is pebbled and is removed before gi is pebbled. Since xi has a pebble 
at t 3 , we can rearrange the strategy so that the pebble on qi+l is moved to e i at ts+l .  242 Now 
the only successors of c. and b. are l 1  b. and a. respectively, and since d. and x: both contain 
pebbles at t3+l , we can rearrange the strategy so that the pebble on c. is moved to l b i at t3+2 and 
to a i at t3+3 . A pebble must then remain on a i until qi is pebbled. Since a. is only pebbled once 
and is the only successor of x!l except x i , we can further rearrange the strategy so that the pebble 
on x! is moved to x. 1 l  at t3+4 (or is picked up if there is already a pebble on x i ). At t3+4 
, a i contains a pebble which will remain until qi is pebbled, and x.1 contains a pebble which will remain 
until f. is pebbled. l Vertex x! must be repebbled before f. is l l  pebbled, which must happen before 
qi is pebbled. To pebble x~ requires all the pebbles except the l  ones on a i sad x i , so by normality 
x! is 1  pebbled immediately after t3+4 , and is only pebbled once before fi is pebbled. Let t h be 
the time all the pebbles except the one on x! are l  removed from the s.-2 -pyramid after x! is first 
 l l  pebbled after t3+4 . At t 4 there are pebbles on a i , x i , and x! and nowhere else on the i-th 
 i '  quantifier block. This configuration is in Ni+ 1 with a true assignment to x i 3 and none of the 
pebbles on the graph at t 4 can be removed until after qi+l is repebbled. By the induction hypo- thesis, 
%+lXi+l ... %XnF(el, ..., epi_2,true, false ) is true. Therefore Vxi%+lXi+l... %XnF(el,...,epi_2 ) 
is true. This finishes the inductive step for a ilniversal qu~ant i fie r. Case 2 (existential quantifier). 
Suppose ~ = Z . By frugality, each of qi ' a i , b i , c i , d i , and qi+l is only pebbled once. Exactly 
as in Case (i), normality implies that x! is only pebbled once, l and is pebbled before anything else 
happens. A pebble remains on x!l or x.l until qi is pebbled, and a pebble remains on x! or x! until 
l l a i is pebbled. To pebble a i requires pebbling d i , which requires removing all pebbles from the 
graph except one on x! . Thus d. is pebbled l l before anything else except x! and a pebble i ' remains 
on d i until b i is pebbled. To pebble b i requires pebbling c i and hence fi " To pebble fi requires 
removing all pebbles except those on x: and d.. Thus f. l l l  is pebbled only once before b. is pebbled, 
and l this happens immediately after d. is pebbled. l A pebble remains on fi ' ~!l ' or x'l until c. 
is pebbled. The only successor of f. is x.I , and a l  pebble remains on x: buqtil x: is pebbled, so 
 l l we can rearrange the strategy so that the first move after picking up the pebbles on the s.-2 
l -pyramid (except the one on fi ) is to move the pebble on fi to x! . Let t I be the time of l this 
move, and let t 2 be the time qi+l is pebbled. Note that since f. is not repebbled 1 between t I and 
t 2 , neither is x[l " At t 1 there are pebbles on x! x: and d i , and i ' i J  until t 2 there must 
be pebbles on X!l or x i , x[ or x! x! or xi ' and d.. l i ' l ~. Case 2a. The pebble on x! is removed 
before t 2 . l -I  Since the only successors of x!z are x i and x i , and x:x is not repebbled before 
t 2 , we can rearrange the strategy so that the pebble on x! l is moved to x i at %l+l . The configuration 
at tl+l is then in Ni+ 1 with a true assignment to x i , and none of the pebbles can be removed until 
t 2 . By the induction hypothesis, ~+lXi+l ... QnXnF(el,..., epi_2,true, false ) is true. Case 2b. 
A pebble remains on x!l until t 2 , and the pebble on x: is removed before t 2 . We can l  rearrange 
the strategy so that the pebble on x! i  is moved to xi at tl+l . The configuration at t l+l is in 
Ni+ 1 with a false assignment to x i, and no pebble can be removed until t 2 . By the induction hypothesis, 
 ~+lXi+l ... ~XnF(el, ..., epi_2, false, true ) is true. Case 2c. Pebbles remain on x! and x: until 
 l l t 2 . The configuration at t I is in Ni+ 1 with a double false assignment to x i , and no pebble 
is removed until t 2 . By the induction hypothe- sis, %+iXi+l ... QnXnF(el, ...,epi_2, false , false) 
is true. In each of subcases 2(a) -(c), Zxi%+iXi+l f.. ~XnF (el,..., epi_2) is true. This completes 
the inductive step for sn existential quantifier, and the proof of the lemma. D Proof of Theorem i. 
Theorem i is simply the case i = 1 of Lemmas 2 and 3. 3. Remarks. Variants of our construction give 
a couple of additional interesting results. Lingas [8] exhibited an infinite family of graphs with the 
following property: pebbling an n-vertex graph in the family with the minimum number of pebbles requires 
Q(2 k~n ) time, but allowing two addi- tional pebbles reduces the time to O(n) . Van ~nde Boas and van 
Leeuwen [2] independently obtained a similar result; in their construction only one additional pebble 
is necessary to reduce the pebbling time to 0(n) . We can obtain the same result as follows: Select 
any value of k . Let s = 3k+2 . Con- struct a graph G k corresponding to the formula VXlVX 2... Vx k(xlV~l) 
A (X 2Vx2) A ... A (XkVX k) as described in Section 2~ representing each clause by a three-source pyramid 
as in Fig. 7 instead of by a four-source pyramid as in Fig. 5. G k has 0(~) vertices and requires at 
least s pebbles, since it contains a pyramid of size s . Since the formula is true, G k can be pebbled 
with s pebbles, but only in ~(2 k) time, since any double false substitution makes the formula false. 
With s+l pebbles, G k can be pebbled in O(~) time by selecting the double false assignment for all variables 
and using the remaining three pebbles to pebble the clause pyramids. Another variant of our construction 
shows the following problem to be P -space complete: given a graph G and a number of pebbles s sufficient 
to pebble a given vertex v , can v be pebbled within a specified time bound t ? We assume t is expressed 
in binary notation; if t is expressed in unary, it is immediate from Sethi's result [14] that the problem 
is NP-complete. We shall reduce the quantified Boolean formula problem to this problem of pebbling with 
a time bound. Let E = QiF~... QnXnF be a quantified Boolean formula. Construct a new formula E' = ~Vi... 
~/r n ~Xl... %XnF' , where F' is formed from F by adding clauses xi V xiVYi and VxiVYi to F for 1 < i 
< n . The new x i formula E' is true if and only if E is true, but a double false substitution for 
any universal- ly quantified variable in E' makes F' false. Let m be the ntmlber of clauses in F' (note 
that m ~ 2n ), and let n v be the number of universally quantified variables in E' . Construct a formula 
 E" = Vz 1Vz 2 . .. VZkZy I ... ~YnQlXl ... QnXn F'' from E' , where F" is formed from F' by replacing 
every clause ~jlV ~.~ V ~.~ by the set  J~_ JP of clauses {~jlV~j2V~j5 VZ ivz ill < i < k] . Here k 
is a suitably large integer whose value we shall select later. Let s = 3k+6n+5 Construct a graph G corresponding 
to the new formula as in Section 2, using a pyramid of size six to represent each clause. Since E" is 
true, G can be pebbled with s pebbles. If a double false substitution is made for some variable z. in 
E" 3 the l resulting formula is true if and only if the (2n+k)3)2 nV ) original formula E is true. 
Thus if -t k+ E is false, pebbling G recglires ~ mk2 n~) time. If E is true, G can be pebbled in O((mk+ 
time by selecting the double false assignment for every variable z i . Thus if k is sufficiently large 
( k m suffices for large m ), there is a time t(m) such that G can be pehbled with s pebbles in time 
t(m) if and only if E is true. Acknowledgement. We would like to thank Michael Loui for suggesting the 
existential quantifier block in Fig. 43 which considerably simplified our original construction. References. 
 [I] S. Cook, "An observation on time-storage trade off," Proc. Fifth Annual ACM Syrup. on Theory of 
Computing (1973), 29-33. [2] P. van Emde Boas and J. van Leeuwen, "Move rules and trade-offs in the 
pebble game," Technical Report RUU-CS-78-4, Dept. of C(znputer Seienee~ University of Utrecht, Utrecht, 
The Netherlands (1978). [3] S. Even and R. E. Tarjan, "A combinatorial problem which is complete in 
polynomial space, " Journal ACM 23 (1976), 710-719. [4] A. S. Fraenkel~ M. R. Garey, D. S. Johnson, 
 T. Schaefer, and Y. Yesha, "The complexity of checkers on an N x N board --prelimi- nal~j report" Proc. 
Nineteenth Annual S~n~9. on Foundations of Computer Science (1978), 55-64.  [5] Mo R. Garey and D. 
S. Johnson~ Computers and Intractability: A Guide to the Theory of NP-Completeness3 Freeman, San Francisco3 
1979. [6] J.E. Hopcroft, W. Paul, and L. Valiant, "On time versus spacer" Journal ACM 24 (1977), 332-337. 
 [7] D. Lichtenstein and M. Sipser, "GO is P-space hard," Proc. Nineteenth Annual Symp. on Foundations 
of Computer Science (1978), 48-54. [8] A. Lingas, "A PSPACE complete problem related to a pebble game," 
Automata, Languages~ and Programming, Fifth Colloquiums Udine (1978), 300-321. [9] M. S. Paterson and 
C. E. Hewitt, "Comparative schematology," Record of Project MAC Conference on Concurrent Systems and 
Parallel Computation (1970), 119-128. [lO] W. Paul and R. E. Tarjan, "Time-space trade-offs in a pebble 
game," Acta Informatica lO (1978), lnA-115. [ll] N. Pippenger, "A time-space trade-off," Journal ACM 
25 (1978), 509-515. [3_2] W. J. Savitch~ "Relationships between nondeterministic and deterministic tape 
complexities, " J. Computer and System Sciences h (1970), 177-192. [13] T. J. Schaefer3 "Complexity 
of decision problems based on finite two-person perfect-information games, " Proc. Eighth Annual ACM 
Syrup. on Theory of Ccmputing (1976), ~1-49. [14] R. Sethi, "Complete register allocation problems," 
SIAM J. CQmput. 4 (1975), 226-248. [15] L. J. Stockmeyer and A. R. Meyer, "Word problems requiring exponential 
time: preliminary report," Proc. Fifth Annual ACM Syrup. on Theory of Computing (1975), 1-9. A  Figure 
1. A 5-pyramid. i I Tx x! x: 0 x!   (a) (b) x! I i (c) Figure2. 3. (d)  (a) Vertices representing 
a variable,  (b) True configuration,  (c) False configuration.  (d) Double false configuration.  
 % s:< Figure 3. Universal quantifier block. Vertex qi+l is part of the i+l -st quantifier block. 
qi  a i ( ~ _ xi di t/h Figure k-. Existential quantifier bloeko Vertex c~+ 1 is part of the i+l -st 
quantifier block, loj \ P j- ~J3 J3  Figure 5- Block of vertices for clause ~jlV ~j2 V ~j3 " Note 
that the vertices ~jk and ~'jk occur among the quantifier blocks. Vertex Pj-1 is part of the j-1 -st 
clause block; PO is a single vertex and Pm = qu+l " ql PO Pl q= b Pe %  q6 = P4 Figure 6. Graph 
~o~ ~ = ~Jx~Vx~ 5 (i~ V ~2 V ~) A (~2 V ~ V ~4) A (X IVx 4VX~) A (X 5 VX 4Vx5) Number of pebbles = 5 
 5 +3 = 18 . 247 Pi  l°i_ I x i t -I  &#38; xl &#38; ~i Figure 7. Block of vertices for clause 
x i VX i 248  
			