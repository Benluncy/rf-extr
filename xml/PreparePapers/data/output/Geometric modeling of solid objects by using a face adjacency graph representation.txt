
 GEOMETRIC MODELING OF SOLID OBJECTS BY USING A FACE ADJACENCY GRAPH REPRESENTATION Silvia Ansaldi o 
Leila De Floriani and Bianca Falcidieno Politecnico di Milano Istituto per la Matematica Applicata del 
C.N.R. Piazza L. Da Vinci, 32 20133 Milano, Italy Abstract A relational graph structure based on a 
bounda ry representation of solid objects is described. In this structure, called face adjacency graph, 
nodes represent object faces~ whereas edges and vertices are encoded into arcs and hyperarcs. Based on 
the face adjacency graph, we define a set of primitive face-oriented Euler operators, and a set of macrooperator$ 
for face manipulation, which allow a compact definition and an efficient updating of solid objects. We 
briefly describe a hierarchi- cal graph structure based on the face adjacency graph, which provides a 
representation of an object at different levels of detail. Thus it is consistent with the stepwise refinement 
process through which the object description is produced. I. Introduction Geometric modeling is a relatively 
new research field, since the studies, which led to the geometric modeling systems currently in use, 
started about fifteen years ago. In these years, the attention of the researchers mostly concentrated 
on the problem of developing geometric representations of three-dimensional objects with the largest 
possi ble application domain. This intensive research activity has resulted in the development of current 
geometric modelers, most of which represent 3-D objects either in terms of the surfaces enclosing them 
(Boundary Representation), or as the boolean combination of volumetric primitives (Constructive Solid 
Geometry) /I0/. Current address: Selenia Autotrol, Via E. Ravasco, 10, 16121Genova, Italy. Permission 
to copy without fee all or part of this material is granted provided that the copies are not made or 
distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. &#38;#169; 
1985 ACM 0-89791-166-0/85/007/0131 $00.75 Via L.B. Alberti, 4 |6132 Genova, Italy  Although the study 
of complete, unique and general geometric models is still a current re- search issue in solid modeling, 
the attention is now mainly focused on the problem of the interface between the model and the designer, 
on one side, and the model and the application on the other side. This latter aspect of solid modeling 
is interesting and complex at the same time. Before, the choice of a mathematical model was done according 
to its capability of representing the largest possible number of solid objects, without taking into con- 
sideration at all the process through which the model is designed, or the application it is made for, 
for instance, whether the model must be trans- ferred to the manufacture or used as reference for recognizing 
objects with similar features. The current trend is to consider the geometric modeling step as a part 
of the whole production process. In this view, we define a relational structure based on a boundary 
representation, which completely reflects the design process. We make use of a boundary representation 
scheme, since it has a wide applicability, it is complete and unique, except for permutational non-uniqueness, 
provided that a partition of the object boundary into maximal, connected and quasi-disjoint faces is 
considered /2/. The edge-based model, commonly used in geo- metric modeling systems employing a boundary 
repre- sentation /6,9/, forces the designer to construct and manipulate an object, which is thought as 
the collection of its faces, by operating on vertices and edges. In our approach, on the contrary, we 
select faces as object defining entities and the edge-face relation as the fundamental relation between 
primitive object entities. Our relational model, called face adjacency graph, explicitly encodes also 
vertices in the form of hyperarcs, which associate each vertex with the set of faces which are concurrent 
into it. The encoding structure of this model in an adjacency list form is an al- ternative to the classical 
winged-edge structure generally used for storing edge-based models /4,11/. Based on the face adjacency 
graph, we designed an experimental geometric modeling system for de- fining and manipulating the boundary 
of three-di- mensional objects with planar faces, so as to demon-  G S I G G R A P H '85 strafe the 
practical advantages deriving from the use of our model in a CAD application. The system is based on 
a set of face-oriented primitive Euler operators defined according to the characteristics of our model, 
which guarantee the topological va- lidity of the resulting object. On this basis, we also define a set 
of topological macrooperators for a more efficient description and local manipulation of complex objects. 
These macrooperators are con- sistent with the model we use and essentially in- volve modifications of 
object faces. To reflect, in the model itself, the refinement process through which an object is designed, 
we propose a hierarchical organization of the face adjacency graph, which provides a representation of 
objects at different levels of detail. In fact, the design process is hierarchical in nature, since the 
designer constructs the model of an object by first specifying its overall shape, and then in- serting 
representation details as shape attributes. This information, relevant for applications like object recognition 
or manufacturing, is usually not maintained in classical boundary models, in which the graph structure 
represents all the parts of the model at the same level. The hierarchical design process is explicitly 
retained in the structured face adjacency graph, which is essentially a hier- archy of graphs, in which 
the root is the face adjacency graph representation of the general shape of the object and any other 
node is the adjacency structure describing one of its lower attributes. 2. A hypergraph-based model 
of the boundary ~f a solid object The topology of an object can be conveniently expressed in the form 
of a relational model, in which its primitive topological entities, namely faces, edges and vertices, 
together with their mutual relationships, are explicitly represented. A boundary representation of an 
object S can be defined as a triple B S = (Vs, ES, FS) , in which VS, E S and F S denote the set of 
vertices, edges and faces of S respectively. Nine adjacency relations can be defined on these primitive 
elements. Some of these relations are sufficient to reconstruct all of the others without error and 
ambiguity /11/. By reflecting the intrinsic hierarchy of geo- metric information, in which surfaces 
are considered as defining geometric entities and curves and points as derived ones, we define a relational 
model of a boundary representation scheme, called Face Ad- janceney Graph (FAG), in which the nodes correspond 
to the object faces, and the arcs represent relation- ships among faces induced by the edges and vertices. 
This model represents a further development of the edge-face graph defined in a previous paper /2/, in 
which only the adjacency relationships between pairs of faces defined by the edges are represented. 
In a boundary reprentation B S of an object S, sets E S and V S define two relations over F S. Two 
faces fl and f2 are called edge-adjacent if and only if there exists an edge e in E S shared by fl 
and f2" Also, two faces fl and f2 are called vertex-adjacent if and only if there exists a vertex v 
in V S shared by fl and f2" Face-edge re- lation and the partition of F S into equivalence classes 
defined by the face-vertex one can be repre sented in the form of a hypergraph, which can be intuitively 
defined as a graph in which arcs may connect an arbitrary number of nodes /5/. A face adjacency graph 
of an object S is a hypergraph G = (N,A,H) such that (i) for every face f in F S there exists a unique 
 node n in N corresponding to f;  (ii) for every edge e in E , shared by two faces S  fl and f2 of 
S, there exists a unique arc in A connecting the two nodes n I and n 2 of N, which correspond to fl 
and f2 respectively; (iii) for every vertex v in VS, we define Fv=F S as the set of faces of S concurrent 
into v and N Â¢N as the subset of nodes of G which v correspond to the faces of F ; then, for v every 
v in VS, there exists a unique element in H, called hyperarc, which connects the nodes of N . v Fig. 
I shows a cube and its face adjacency graph representation. In the diagram, dashed lines repre- sent 
hyperarcs, and continuous lines arcs. fltllf f  \N\\ a) (o) Figure 1. A cube and its FAG representation. 
In our terminology,we distinguish between arcs and hyperarcs of G, belonging respectively to sets A and 
H, the former connecting pairs of nodes, the latter arbitrary numbers of nodes of G. This sepa- ration 
is done because of the different semantics of the elements of A and H when referred to their corresponding 
topological entities of the objects. The above definition establishes a one-to-one corre spondence between 
N and F , A and E , and H and V . S S S Since two faces of S may share more than one edge, the FAG 
may have multiple arcs. The vertices bounding a given face are represented by the hyper- arcs incident 
into the corresponding node of G. All of the three primitive topological entities of a solid are explicitly 
represented in the FAG by different graph components. Despite the edge- face graph, the FAG contains 
additional information by encoding vertices as hyperarcs. In fact, the edgeface graph G'=(N,A) of S is 
a subgraph of G=(N,A,H) in which hyperarcs are missing. The FAG is also a more complete relational model 
of an object compared to the most common edge-vertex graph /7/, which can be regarded as the dual with 
respect to the edge-face subgraph of the FAG only if both graphs are planar, i.e. if the object under 
con- sideration has a null genus. The topology of an object is hence well-de- fined by its FAG. Other 
topological entities, such as shells and loops, defined as collections of the primitive ones, and topological 
parameters, such as the multiplicity, and the number of protrusions or depressions on the faces of an 
object, can be extracted from the FAG. Also, the genus of S can be computed under the special assumption 
that every handle or through hole defines a holeloop on exactly two faces of S /2,3/. The FAG encoded 
in a modified adjacency list form is used as internal representation of an object in our experimental 
geometric modeling system based on the operators described in the next two sections. In this representation, 
an ordering is defined over the arcs of G incident into a given node f, since these are organized into 
separate subsets according to the loops on the corresponding face of S. Also, the arcs in each subset 
are sorted in such a way that the corresponding edges of S define a loop in counterclockwise order. This 
organization is assumed in the abstract level description of the primitives for FAG manipulation, presented 
in the next two sections.  3. Euler operators The validity of a representation scheme can be checked 
by applying generalized Euler's rule. This rule, in the formulation given below, expresses a necessary 
validity condition as a relation among six parameters, the number of vertices (v), edges (e), faces (f), 
shells (s), and holeloops on the faces (h) and the genus (g) of an object: v -e + f = 2(s -g) + h. 
 Instead of performing a validity check at each updating, it is convenient to decompose each object modification 
into a sequence of atomic steps, called Euler operators, which ensure that the topological validity requirement 
expressed by Euler's formula is always satisfied /6,9/. In this section, we describe a set of five 
 constructive Euler operators. These operators have been chosen according to the FAG-based scheme defined, 
i.e. by operating essentially on the faces of an object considered as primitive defining enti- ties. 
The set of operators selected is listed below,  together with an informal description of their effect 
on both the object and its FAG. Only modifi- cations of topological entities are described, re- gardless 
of any geometrical information. MFV$ (fnew, vnew, snew) Make Face Vertex Shell Defines a new shell snew 
consisting of one face fnew and one vertex vnew belonging to fnew. The FAG is modified by inserting a 
new node, labeled fnew, corresponding to fnew and a hyperarc, labeled vnew, incident into fnew (see fig. 
2a). Transformation (v,e,f,g,h,s) --> (v+1,e,f+1,g,h,s#1) MEF (fnew, fold, enew, vold) Make Edge Face 
 Inserts a new face fnew and a new edge enew, which must have one extreme vertex vold already defined. 
 The contour of face fnew will consist only of edge enew and vertex vold. The FAG is modified by the 
 insertion of a new node fnew and a new arc enew  connecting nodes fold and fnew. Node fnew is added 
 to the set of nodes incident into the hyperarc vold already defined (see fig. 2b).  Transformation 
 (v,e,f,g,h,s) --> (v,e+1,f+1,g,h,s)  MEV (fold 1,fold 2, enew,vold,vnew) Make Edge Vertex Adds a new 
edge enew between two already existing faces, foldl and fold2, which connects an existing vertex vold 
with a new one vnew. The FAG is modified by adding a new arc enew between foldl and fold2. A new hyperarc, 
labeled vnew, is added, which connects nodes foldl and fold2 (see fig. 2c). Transformation (v,e,f,g,h,s) 
--> (v+1,e+1,f,g,h,s)  KFSMH (f,f',s,s') Kill Face Shell Make Holeloop Joins two faces f and f' belonging 
to two different shells, s and s' respectively, in such a way that the boundary of f', assumed to be 
simply connected, becomes a holeloop in f. Shell s' and face f' are eliminated as a consequence. The 
FAG is modified by transforming every arc or hyperarc incident into f', into an arc or hyperarc incident 
into f, and deleting node f', as described by algorithm JOIN NODES given below. Fig. 2d depicts the effect 
of the application of the above operator to two cubic shells. @ S 1 G G R A P H '85  Transformation 
 (v,e,f,g,h,s) --> (v,e,f-l,g,h+1,s-1) In the description of the algorithm, ARCS (G,f',f") denotes the 
set of the arcs of the FAG G connecting the two nodes f' and f" and INCIDENT HARCS (G,f) the set of the 
hyperarcs of G incident into f. The names of the primitives used are self-explanatory. Algorithm JOIN 
NODES (G,f,f') f":= FIRST ADJACENT NODE (G,f'); while f"# null do for every e' in ARCS (G,f',f") do 
(Vl,V2): = EXTREME VERTICES (e');  ADD_~C (G,f,f",vl,v2,e); DELETE ARC (G,e'); end for; f":= NEXT ADJACENT 
NODE (G,f',f")  end while; for every v' in INCIDENT ~L~RCS (G,f') do ADD EXTREME NODE TO HARC (G,v',f); 
DELETE EXTREME NODE FROM HARC (G,v',f'); end for; DELETE NODE (G,f') end JOIN NODES. KFMHG (f,f') Kill 
Face MaKe Holeloop Genus Joins two coplanar faces f and f' belonging to the same shell in such a way 
that the boundary of f', assumed as simply connected, becomes a holeloop in f. Face f' is deleted and 
the genus of the object is incremented as consequence. The FAG is modified in a similar way as in the 
case of operator KFSMH (see fig. 2e), ands hence, algorithm JOIN NODES is also a description of the effect 
of operator KFMHG on the FAG. Transformation (v,e,f,g,h,s) --> (v,e,f-l,g+1,h+1,s) The inverses of the 
above constructive operators are listed beloW. KFVS (f,v,s) Kill Face Vertex Shell KEF (e,f) Kill Edge 
Face KEV (e,v) Kill Edge Vertex MFSKH (f,f',s,s') Make Face Shell Kill Holeloop MFKHG (f,f') Make Face 
Kill Holeloop Genus 4. Definition and manipulation of solid objects Primitive Euler operators provide 
a minimally complete set of basic functions for defining and manipulating three-dimensional solid objects, 
which can be mathematically expressed as r-sets with planar faces /13/. Independently of the choice of 
the Euler's basis, the use of such primitives as basic design tools is often impractical and highly inefficient. 
In this section, we define a set of higher level operators, called macrooperators, which allow both a 
compact definition and an efficient manipulation of solid objects. A large variety of objects can be 
simply defined as the combination of a restricted number of primitive solids, each of which can be described 
on the basis of a few pa- rameters. A boundary representation of each primi- tive object can be expressed 
as an appropriate sequence of basic Euler operators'. More properly, such a sequence of Euler operators 
defines a class of objects all having the same topological structure. Many objects can also be described 
by a rigid movement of their cross sections, such as, for instance, translational or rotational sweeps 
applied to two-dimensional objects. As an example, we describe a translational sweep operator, called 
SWEEPLAMINA, which transforms a two-dimensional, even multiply connected, face into a three-di- mensional 
object by sweeping this face of a certain distance along a given direction. The face is specified as 
the collection of all loops bounding it. For each loop defining the two dimensional lami na, the bottom 
and the side faces are first con-structed, together with the edges shared by them. Then, the top face 
and the edges which separate it from the side ones are built. Finally, all of the shells defined by the 
internal loops of the lamina are merged into the one corresponding to the ex-ternal loop so as to construct 
an unique shell having a genus value equal to the number of interior loops. Algorithm SWEEP LAMINA presented 
below de- scribes the semantics of the corresponding operator in terms of primitive Euler operators. 
The names of the other primitives employed in the description are self-explanatory. Algorithm SWEEP LAMINA 
(L,d) // Sweeps a lamina bounded by a set L of edge loops, L = 411, 12 ....i k} along vector d. Loop 
 1 in L is assumed to be the external loop.// I for every I. in L do elast.:= LAST EDGE IN (li); vfirst.:= 
FIRST VERTEX IN (elasti) ;   MFVS (fi,vfirsti~si); MEF (fi, flasti, elasti,vfirsti); e,:= FIRST EDGE 
IN (li) ; f%i := /last i; vii= vfirst i; while e.# elast, do l 1-- MEF (f~ ,/side i,everti, vi) 
; v' := OTHER EXTREME VERTEX (ei, vi) ; MEV (f ,/side e ' )" i i' i'vi'vi ' e := NEXT EDGE IN (I ,e 
); i ----11 V := Vl;. i l ft:= fside 1 1 end while; let vtrans i be the vertex obtained from vfirst 
i by translation along d;  (o) MFVS (f . v .s, ; (b) MEF (~. r.e.v) U "kd (c) (d) MEv (r, .t, .e, .v, 
.v, ) t~FSMH (f ,f' ,s ,s' ) \\%N //// ~ x (e) KFMHO (f.f ') NN%\ %\ /// /I///// /I i/j / Figure 2. 
Effect of the five basic constructive operators on the FAG.  S I G G R A P H '85 MEV (fside.,flast 
,evert.,vfirst ,vtrans); l i i i 1 MEF(flast.,ftop.,etrans ,vtrans ); 1 1 1 1 e :=FIRST EDGE IN (I); 
 i ----l v :=vfirst.; i i while e.~ elast do l i- v':= OTHER EXTREME VERTEX (e ,v ); i ----l let 
v be the vertex obtained from v' i i by translation along d; fside := OTHER FACE SHARING (f.,e.)~ 
i ----1 l MEV (fside.,ftop.,e ,vtrans.,~.) ; I 1 1 i 1 e := NEXT EDGE IN (l.,e.) i ~ --i i  vtrans. 
:= v i i end while ; if i > i then KFSMH (fl'fi'sl "s');1 KFMHG (ftoPl,ftopl ")  end if end for 
end SWEEP LAMINA. Besides definition operators, we need to de- fine a set of macrooperators for manipulating 
valid representations of objects. Such macrooperators, which must be consistent with the representation 
scheme we use, essentially modify the faces of the object by performing operations like replacement of 
vertices and edges by faces, or "glueing" of different objects along coincident faces. Since our relational 
model is a purely topological one, we consider only operators which affect object topology. Operations, 
which modify the geometry of an object, like geometric transformations, or tweaking operations, and thus 
operate on the whole set of faces or on subsets of faces, do not al~er its topological structure. Also, 
set operators, which are the most commonly used macrooperators in geometric modeling systems, can be 
expressed in terms of a single join operation between the faces of temporary objects suitably computed 
from the original solids /9/. In the following, we present three macrooper- ators, namely GLUE_FACE, 
GLUE_FACEMAKEHANDLE and REPLACE_VERTEX_WITH_FACE, giving an informal de- scription of their effect on 
both the object and its FAG. Their algorithmic definition in terms of Ruler operators is presented so 
as to guarantee the topological validity of the resulting model at each step of its construction. This 
description is independent of the graph representation used as "/basic relational model. 4.1 Operators 
GLUE_FACE and GLUE_FACE MAKE_ HANDLE These operators are a generalization of the two primitive operators 
KFSMH and KFMHG to the case of coincident faces. Together with the two primi- tive ones, these two join 
operators are the funda- mental tools to perform set operations on boundary models. Operator GLUE FACE 
(f,f',s,s') joins two faces (coincident and simply connected f and f' belonging to shells s and s' respectively, 
in such a way that the two external loops of f and f' completely overlap. Shell s' and faces f and f' 
are deleted. The FAG is modified by merging the two connected components describing s and s', as shown 
in the example depicted in fig. 3. The two nodes n and n' corresponding to f and f' respectively are 
deleted and the adjacency relations of the nodes adjacent to n and n' are updated. The transfor- mation 
performed by the operator is: (v,e,f,s,h,g) --> (v-n,e-n,f-2,s-l,h,g) where n denotes the number of 
vertices and edges composing the exterior loop of f and f'. The names of the primitives employed in the 
de- scription of algorithm GLUE FACE given below are self-explanatory and, hence, their semantics is 
not described here. For the sake of simplicity only, we assume that the two faces are joined together 
by starting from the first edge of their external loop. Algorithm GLUE FACE (f,f',s,s') e:= FIRST BOUNDING 
EDGE (f); e':= FIRST BOUNDING EDGE (f'); while e # LAST BOUNDING EDGE (f) do f := OTHER F--CE SHARING 
(e,f); -- f':= OTHER FACE SHARING (e',f'); (Vl,V2): = EXTREME VERTICES (e); ii  (vl,v2): = EXTREME 
VERTICES (e'); KEV(e,v2);   KEV (e',v~); MEV (fl,f~,;,v I,v2) ; e:= NEXT BOUNDING EDGE (f,e); e':= 
NEXT BOUNDING EDGE (f',e') end while; f1:= 0THER_FACE SHARING (e,f); ! f|:= OTHER FACE SHARING (e',f'); 
 (v ,v ):= EXTRE~ VERTICES (e)~ I 2 t  (vl,v2): = EXTREME VERTICES (e');  KEV (e',v~); KEF (e,f); 
MEV(f 1,f ~,~,v I ,v2) ; KFVS (f',v2,s') end GLUE FACE. Operator GLUE FACE MAKE HANDLE joins two coinci 
dent and simply connected faces f and f' belonging to the same shell, in such a way that the loops defining 
f and f' completely overlap. Faces f and f' are deleted, and the genus of the object incremented. (a) 
 (~) (c) Figure 3. Effect of the application of macrooperator GLUE FACE to faces E and E' belonging to 
a pyramid and a cube respectively (a) FAG representation of a pyramid.  (b) FAG representation of a 
cube.  (c) FAG representation of the resulting object (d).  The algorithmic description of this operator 
is completely similar to algorithm GLUEFACE, provided that the last call to KFVS is replaced by a call 
to a primitive operator KFVMG (Kill Face Vertex Make Genus), not belonging to the basis defined in the 
previous section, which deletes a face and a vertex from an object, increasing the value of its genus. 
 4.2 Operator REPLACE VERTEX WITH FACE Operator REPLACE VERTEX WITH FACE (v,fnew) replaces vertex v with 
a new face fnew. The FAG is modified by replacing the hyperarc v with a new node fnew, and inserting 
a number of arcs incident into fnew equal to the number m of extreme nodes of v and m hyperarcs, each 
incident into fnew and into a pair of adjacent nodes in the set of extreme nodes of v. The transformation 
performed by this operator is: (v,e,f,s,h,g) --> (v+m-l,e+m,f+1,s,h,g) where m denotes the number of 
faces concurrent into vertex v. Algorithm REPLACE VERTEX WITH FACE presented below is a description of 
the semantics of the corre- sponding macrooperator in terms of Euler operators. Algorithm REPLACE VERTEX 
WITH FACE (v,fnew) // the list of faces concurrent into a vertex is assumed to be a circular linked 
list organized in counterclockwise order// facelist:= LIST OF FACES CONCURRENT INTO (v)~ f':= FIRST 
FACE IN (facelist); f:= NEXT FACE IN (facelist, f'); e':= EDGE SHARED BY (f',f,v); v':= OTHER EXTREME 
VERTEX OF (e',v); KEV (e',v); MEV (f',f,enew,v',vfirst); MEF (fnew,f',enew,vfirst); while f # null do 
 MEV (f,fnew,enew,vfirst,vnew); f:= NEXT FACE IN (faceiist,f); vfirst:= vnew end while; end REPLACE 
VERTEX WITH FACE. In a similar way an operator REPLACE EDGE WITH FACE may be defined, which replaces 
an edge of an object with a new face. Operators REPLACE VERTEX WITH FACE and REPLACE EDGE WITH FACE are 
usef--ul in The design process to perform operations like vertex- and edge- chamfering. 5. Structured 
representation of the FAG In any object representation scheme it is often important to separate the high-level 
description of the object from lower level representation details, or shape attributes. Examples of such 
attributes are protrusions, depressions, handles, or through holes which have a small overall size compared 
to the dimensions of the whole object. In our representation scheme, we consider a shape attribute as 
the collection of object faces bounding it. In this view, a boundary representation B = (V,E,F) of an 
object S can be considered as composed by a representation of S at the highest abstraction level, denoted 
B = (V,E,F), and the boundary description of the attributes of S, each denoted as B(r)=(v(r),E(r),F(r)), 
r=l,2,...,k. Any attribute can also be in turn specified as a main representation plus its lower level 
attributes, thus generating a boundary model of S at suc- cessively finer levels of specification. Such 
a model is conveniently represented by a hierarchy of relational models, in which the root gives a relational 
representation of the overall shape of the object, whereas any other tree node provides a graph description 
of an attribute attached to an element or a set of elements belonging to its direct ancestor model in 
the hierarchy. If a FAG is used as representation of the boundary of an object, then such a hierarchy 
gives rise to a structured face adjacency graph, which is a special case of the structured graph defined 
in /I/. A Structured Face Adjacency Graph (SFAG) is more formally defined as a pair T=(G,T), where T 
is the tree describing the structure of y and G  @ S I G G R A P H '85  is a family of FAGs such that 
every component of G of G is associated with a unique node of T, i denoted t.. The component of G associated 
with the l  root of T is the face adjacency graph representing B, whereas any other component G. is 
the FAG repre- 1 sentation of an attribute of the boundary model represented by the FAG which corresponds 
to the parent node of t. in T. l  Since any shape attribute of S is associated with one or more of 
its entities (faces, edges and vertices), every Gi, except for the root graph, is associated with an 
element (node, arc, or hyperarc) or with a subgraph of the graph G corresponding 3 to the parent node 
t. of t in T. Hence, G is j i i called expansion graph of such an element or sub- graph of G . A single 
element of G., expanded into J J a graph G , is called macroelement. Similarly, a i  subgraph expanded 
into a graph component of y is called macrosubgraph. The association between G i and the element or 
subgraph of G. expanded into G. 3 l is defined by a set of nodes, which belong to both G and G., and 
are called boundary nodes of G . i j i The set of the boundary nodes of a graph G of y l  is denoted 
BNÂ°. BN. corresponds to the set of faces i i  belonging to the subset B (j) of the boundary of S represented 
by G to which the attribute described J by G is attached. For instance, if G expands a i 1 node f, then 
BN ={f}, or if G is the expansion z i graph of an are e or of a hyperarc v, then BN will i be the collection 
of the extreme nodes of e or v in G.. Fig. 4b shows an example of a two level SFAG, J which represents 
the object depicted in fig. 4a. For the sake of clarity, the hyperarcs are omitted in the graph diagrams. 
The highest level specifi- cation of the object is the cube represented by graph G in fig. 4b. Graph 
G I represents the paral- O  lelepiped defining the protrusion on face E, where as graph G is the FAG 
description of the hole 2 through the object. Note that G I is the expansion graph of node E in G , 
while G 2 is associated with o the pair of nodes E and F of G . Also, BN {E} o I=  and BN 2 = {E,F}. 
 The complete FAG of an object S can be obtained from its SFAG by recursively applying a refinement transformation 
to its macroelements and to the macrosubgraphs of its components /I/. Given a macro element m of Â¥ belonging 
to a graph G. and expanded J into a component Gi, a refinement transformation (a) (0)  Figure 4. An 
object (a) and its SFAG representation (b).  applied to m and G. consists of inserting all the i elements 
of G i into Gj, except those belonging to BN.. Refining a macrosubgraph Gf of G. expanded z j 3 into 
G. consists of deleting Gf from G. and in- i j j serting G. into the resulting graph. Conversely, 
i  a structured representation of an object S can be obtained from its FAG by iteratively replacing 
sub- graphs representing attributes of S with simpler subgraphs or elements at a higher abstraction level. 
This transformation, which is dual with respect to refinement, is called abstraction. 6. Concluding 
remarks A boundary model for representing solid objects is presented, which is based on the adjacency 
re- lation between faces, and can be structured at differ ent levels of abstraction. The model has some 
im- portant theoretical advantages. All of the three primitive topological entities of a solid are 
ex- plicitly encoded into a hypergraph, by representii~g faces as nodes, and edges and vertices as 
arcs and hyperarcs respectively. Moreover, this relational model completely defines the topology of 
an object, being derived topological entities, like shells and loops, expressed as collections of the 
primitive ones. As shown in /2/, every shell of an object is represented by a different component in 
its FAG and also the decomposition of the FAG into its bicon- neeted and triconnected components /10/ 
allows a recognition of special topological features of the object, like depressions, protrusions, 
handles or through holes, these being related to the node con- nectivity of the FAG. The structured 
face adjacency graph has also been demonstrated to be a valid model in practical applications, Since 
the structure emphasizes face adjacency relations, object manipulation operations, which usually affect 
faces as primary entities, are greatly facilitated by the use of such a model. The model also clearly 
reflects the process of object design, because it allows object definition by face specification and 
an explicit encoding of the in- trinsic hierarchy among the overall shape of the object and its lower 
level, attributes.  If the internal encoding structure of our model maintains all the information needed 
to ensure its complete structurability, then the resulting data structure requires about 40 percent more 
storage space than the winged-edge one. On the other hand, if each expansion graph in the structured 
face ad- jacency graph is used only to define attributes of the object attached to any collection of 
its faces, then the space requirements for our SFAG-based and the winged-edge structures are comparable. 
 Furthermore, because of the possibility of both structuring the model at multiple levels, and of decomposing 
it into its k-connected components, the SFAG is especially useful in object recognition applications, 
where the hierarchical topological description of an object and properties like ad- jacencies and connectivity 
provide more important information than geometric data /2/. Moreover, the model has been shown to be 
useful in object manufacturing for form feature description. In fact, the SFAG has been used to represent 
the main shape of the object at the first level in the hierarchy and its design topological features 
at the second level. The structured model forms the input information of the process planning phase, 
which specifies how the object must be manufactured by defining the so-called manufacturing features 
/12/. These features are often the same as the design ones and thus, in this case, the object de- scription 
is transferred unchanged to the manu- facture. On the contrary, if some new features are identified in 
the process planning phase, or, con- versely, some parts of the object, previously de- fined as second 
level attributes, must be considered as main object characteristics, then the model can be easily restructured 
by locally applying the ab- straction and refinement transformations defined in seetion five. Acknowledgements 
This work has been supported by the "Progetto Finalizzato Tecnologie Meccaniche -Sottoprogetto 1.2" of 
the Italian National Research Council under grant 92531. The authors would like to thank Umber- to Cugini 
for the many helpful discussions during the preparation of this paper. The authors are grateful to Sandra 
Burlando for her help in typing this paper. References I, Ancona, M., De Floriani, L., Trebino, 0., 
Zama- na,A., "A System for Defining Structured Graphs", Rivista di Informatica,1984, to appear. 2. Ansaldi, 
S., De Floriani, L., Falcidieno, B., "Edge-face Graph Representations of Solid Objects", Proceedings 
Workshop on Computer Vision, Representation and Control, Annapolis, 1984, pp. 164-169.  3. Ansaldi, 
S., De Floriani, L., Falcidieno, B., "An Edge-face Relational Scheme for Boundary Representations", Computer 
Graphics Forum, 1985, to appear.  4. Baumgardt, B., "Winged-edge Polyhedron Repre- sentation", Stanford 
Artificial Intelligence Report No. CS-320, 1972.  5. Berge, C., Graphes et Hypergraphes, Dunod, Paris, 
1977.  6. Braid, I.C., Hillyard, R.C., Stroud, I.A., Stepwise Construction of Polyhedra in Geometric 
Modeling", in: Mathematical Methods in Computer Graphics and Design, edited by K.W. Brodlie, Academic 
Press, 1980.  7. Hanranan, PÂ°M.,r~reating Volume Models from  Edge-vertex Graphs", Computer Graphics, 
16, 3, 1982, pp. 77-84.  8. Harary, F., Graph Theory, Addison Wesley, Mass., 1969.  9. Mantyla~ M.~ 
Sulonen, R.~ "GWB: a Solid Modeler with Euler Operators", IEEE Computer Graphics and Applications, 1982, 
pp. 17-31.  10. Requicha, A.A.G., "Representation of Rigid Solids -Theory, Methods and Systems", A.C.M. 
Computing Surveys, 12, 4, 1981, pp. ~37-46~.  11. Weiler, K., "Edge-based Data Structures for Solid 
Modeling in Curved-Surface Environment", IEEE Computer Graphics and Applications, 5, I, 1985, pp. 21-40. 
 12. Wilson, P.R., "Features"~ CAM-I Interim Report III, October 1983.    
			