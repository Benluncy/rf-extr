
 Computer Graphics Volume 18, Number 3 July 1984 Priority Windows: A Device Independent, Vector Oriented 
Approach Richard J. Littlefield Battelle, Pacific Northwest Laboratories Abstract Priority windows are 
a basic tool for interactive graphics, underlying such techniques as pop-up menus and single screen viewing 
and control of multiple contexts. Most implementations of prior- ity windows are raster oriented, frequently 
rely- ing on special hardware capabilities such as high speed rasterops. This paper discusses an alter- 
native approach, based on vector clipping, that works with any display device capable of drawing and 
erasing vectors. It has been used to imple- ment a general purpose windowing package that sup- ports 
application programs using a vector graphics model. It is device independent, running without change 
on a desktop computer with integral graph- ics and on a timesharing system with a peripheral display. 
In purely device independent form, win- dowing performance depends on host processing speed and communications 
bandwidth. Techniques are described for improving responsiveness by overlapping some windowing computations 
with the user's think time. Performance improvements based on extended device capabilities such as rectangu- 
lar fill, hardware characters, and local display lists with clipping are also suggested. Presentation 
of this paper included a videotape showing the dynamics of one application on an HP-9000 desktop computer 
and on a VAX 11/780 plus Ramtek Marquis configuration. Keywords: CR Categories and Subject Descrip- 
tors: D.2.2 [Software Engineering]: Tools and Techniques -user interfaces; 1.3.3 [Computer Graphics]: 
Picture/Image Generation -display algorithms; 1.3.4 [Computer Graphics] Graphics Utilities -graphics 
packages; software support; 1.3.6 [Computer Graphics] Methodology and Tech- niques -device independence 
 General Terms: Algorithms, Design, Experimentation Permission to copy without fee all or part of this 
material is granted provided that the copies are not made or distributed for direct commercial advantage, 
the ACM copyright notice and the title of the publication and its date appear, and notice is given that 
copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, 
requires a fee and/or specific permission. &#38;#169; 1984 ACM 0-89791-138-5/84/007/0187 $00.75  I. 
INTRODUCTION  Priority windows provide a basic tool for imple- menting certain graphical interaction 
techniques, such as pop-up menus and single screen control of simultaneous processes. These techniques 
provide a very powerful and natural user interface. They are becoming common in vendor-specific products, 
and support for priority windows is now an inte- gral part of several computer systems, including the 
Apple Lisa [i], Apollo Domain [2], Symbolics Lisp machine [3], Xerox Star [4], and Bell Labs Blit [5], 
among others. Unfortunately, all this has been of little use to developers of portable application programs. 
The commercial implementations listed above are all tied to a particular hardware/software combina- tion. 
Their priority windows are supported only on a few specific displays that are very tightly coupled to 
the operating system and processor. Frequently special hardware capabilities are required, such as high 
speed block transfer ras- terops. This provides optimum performance, but is extremely inflexible. For 
example, one cannot add a foreign graphic~ display and expect the priority windows to work with it. This 
has hindered more widespread use of pop-up menus and similar techni- ques, because program developers 
are understanda- bly reluctant to spend much effort making their programs less portable. This paper 
describes a different approach to pri- ority windowing. It assumes that the display device can draw and 
selectively erase vectors, nothing more. Because of these minimal require- ments, the approach works 
with virtually any cur- rent generation display. We have used it to create a device-independent priority 
windowing package to support interactive graphics programs. Aside from the advantages of portability, 
the package has also proved to have surprisingly high performance in a highly interactive application. 
In part, this is because the package is structured to allow overlapping of some computations with the 
user's think time. The paper is organized as follows. Section 2 de- scribes functional specifications 
of the windowing package, while Section 3 discusses the implementa- tion of these functions. Section 
4 describes extensions that allow overlapping computations and think time. Statistics on package performance 
are  Computer Graphics Volume 18, Number 3 July 1984 screen as windows come and go. However, the windowing 
package is responsible only for main- taining the graphics. User interface issues, such as when and where 
to open new windows, are left to the application program or its other helpers. Each window has its own 
local coordinate system, which is initially specified by the application program and can be changed at 
any time. By ad- justing the local coordinate system and/or the screen location and size, windows can 
be zoomed and panned, as well as just being moved on the screen. Routines are provided for performing 
 forward and inverse coordinate transformations. These are particularly useful for processing gra- phic 
input that may be directed to any of several windows. They allow the input to be accepted in screen 
coordinates, with local coordinates being determined by which window the input appears to be directed 
to.  A concept of "current window" simplifies inter- facing to the windowing package. At any instant, 
one window is declared to be current, and all drawing primitives are directed to it. To draw in a different 
window, the application program must first declare it to be the current window. This shortens the calling 
sequences. It also allows primitive drawing routines in the window- ing package to have the same arguments 
as older, nonwindowing graphics packages. This facilitates adding windows to existing applications programs. 
 The windowing package can be envisioned as a gra- phics filter. Its input consists of vectors and window 
specifications, and its output consists of transformed and clipped vectors. Input to the windowing package 
can come directly from an application program. It could also come from another graphics support package 
such as CORE, GKS, or one of the many higher level special purpose packages. In that case, the windowing 
package would ordinarily be far along in the pipeline, after all other device independent operations. 
Output from the windowing package is directed to lower level device dependent routines for actually driving 
the display. 3. IMPLEMENTATION The whole idea of priority windows is to display only what is inside 
each window and outside all windows of higher priority. Other implementa- tions commonly accomplish 
this by converting graphics and text to raster form, then transfer- ring the highest priority pixels 
to the display. The techniques presented in this paper work directly on vectors. Figure 2 illustrates 
the organization of the win- dowing package. For the most part, the algorithms and data structures are 
straightforward. The win ~ dowing package maintains tables that describe the position, size, and priority 
of each window. Each window has a display list containing vectors drawn in that window. Incoming vectors 
are saved in the display list. Then they are clipped inside their own window, and outside ali windows 
of higher pri ~ ority. Any surviving fragments are drawn. When window is opened, its screen area is 
erased. When a window is closed or moved, affected areas of the screen are erased, then redrawn by extracting 
vec- tors from the display lists and clipping them again. Conventional algorithms are used for clipping 
vec- tors and maintaining the display lists. They can be found in any computer graphics text and will 
not be discussed here. Some subtle problems do arise, however, in attempting to optimize the erase/redraw 
operation. In general, display devices support selective erase in three ways: I. not at all (pen plotters, 
direct view stor- age tubes); 2. removing a vector from a local display list (refresh stroke writers); 
or  3. writing over graphics using background color (raster displays).  Most new devices being introduced 
fall in the third category, and the techniques discussed here apply primarily to them. These devices 
combine a raster display with a vector oriented communica- tions protocol. Selected areas can be erased 
by filling them with closely spaced vectors in back- ground color. The exact spacing is not critical 
 as long as it corresponds to no more than one pixel. However, finite display resolution can produce 
two undesirable effects if one does not take special care to avoid them. The first effect is intermittent 
thickening of lines that are drawn clipped and then redrawn un- clipped. This could happen, for example, 
if a line were partially hidden by a foreground window when first drawn, and then the foreground window 
were closed. Figure 3 illustrates the effect. l Linear t r~nsfor m, nominal coordinates to physical 
~} Clip inside own window (draw,), or clip inside inter- section of own v window and the one being removed~, 
(redraw)  I Clip outside higher priority windows Figure 2. The windowing package acts as a filter. 
Vectors and window descriptions go in; transformed, clipped vectors come out.   @SIGGRAPH'84 ndaries 
of (a) ~ cli~ng window II. Bou Pixel endpoint, I Pixel endpoint, clipped line I unclippedline XXX ,b, 
XXX I (c) ®O0000100 ® (d)  XX~.O00® (e) XXX×x~)o0 ® Figure 3. Only newly visible segments of lines 
should be redrawn. Suppose a line is clipped as shown in (a). After rasterizing, the clipped and unclipped 
versions may not line up perfectly (b, c). Drawing the entire unclipped line on top of the clipped can 
cause intermittent thickening because of the misalignment (d). Better results are obtained by drawing 
only the newly visible part (e). Because rasterizing is done by the display device, based on pixel coordinate 
endpoints, the raster- ized versions of clipped and unclipped vectors generally will not line up perfectly. 
This prob- lem is addressed in [5}, where it is solved by using a restartable rasterizing algorithm (DDA) 
on the individual fragments. Unfortunately, this approach cannot be used on most devices because their 
DDA parameters cannot be specified. To avoid the effect completely, one could erase the entire affected 
vector before redrawing its unclipped version. Unfortunately, this causes other problems if different 
colored lines cross each other. A more workable solution is to redraw only the newly visible portion 
of each vector when it is uncovered (see "clip inside", Figure 2). This approach restricts potential 
perturbations to the pixel or two at the boundary of the window. In practice, they are not noticeable. 
 The second effect is an incorrect display caused by erasing slightly too much or too little. The tricky 
part is erasing a low priority window with- out also erasing any part of a higher priority window that 
overlaps it. If one ignores the fin- ite display resolution, and clips exactly at the nominal window 
boundaries, then some pixels may be contained in both windows. When the low priority window is erased, 
lines on the edge of the high priority window may disappear also. One possible solution is to allow 
the erase to occur, and then redraw the boundary region of the high priority window. Unfortunately, this 
pro- duces unpleasant flickering effects. A better approach is illustrated in Figure 4. A "safety margin" 
is provided around each window. Vectors inside a window are clipped to the inner margin, while vectors 
in lower priority windows are clip- ped to the outer margin. Filling vectors to erase both windows are 
clipped half-way through the mar- gin. Thus, any pixels belonging to both windows may simply be erased 
more frequently. The safety margin width is not critical, as long as it cor- responds to at least two 
pixels. It might seem more reasonable to deal directly in pixel coordinates for both erasing and vector 
clipping, because then the operations are straightforward. However, there are good reasons to avoid this 
approach. Device driver support software often does not allow one to specify or obtain pixel coordinates. 
Even if nominal pixel coordinates are available, they cannot always be trusted. For example, if the same 
protocol is used to drive several devices, the actual resolu- tion may well be different from the nominal 
reso- lution assumed by the support software. For these reasons, software is more portable and reliable 
if it does not require exact pixel coordinates. The techniques described above produce quite good results 
with only a very rough estimate of display resolution. The simple scheme described above works very 
well with applications that update windows primarily by adding to them, with complete erases occurring 
periodically. Providing selective erase is some- what more complicated, at least in the general case. 
One classic method that application pro- grams use to erase something is to just draw it again, in background 
color. Although this method often works with windows, it can have unfortunate Old vector drawn in lower 
priority window, ~. partially erased ~' /,/ /" ~/'/ t Clipping safety /'/ / | margin, >=2pixels N ..... 
tot I I/// \ drawn in lower J//% Vector drawn in \ pr.iority window, '~//~"~higher priority \ chpped 
~ If wind .... lipped \ ,i \ Nomtnal boundaries of higher priority window / I Erasing vectors / |_ __ 
for higher priority f ~ --wi ndow Erasingv~ct°rs I 1 f for lower '~ / / priority window Figure 4. A "clipping 
safety margin" around each window guarantees correct results, without requiring exact pixel coordinate 
calculations.  Computer Graphics Volume 18, Number 3 July 1984 side effects. All the vectors ever drawn 
will accumulate in the display lists, increasing the memory and processor time required for window operations. 
Another problem arises if window visibility is changed between drawing and erasing a vector. As Figure 
2 illustrates, a line drawn in two or more pieces often is not quite the same as a one piece line between 
the same endpoints. If one is supposed to erase the other, chances are good that a ghost will be left. 
A final problem is that when part of a window is made visible, its entire history will be replayed. 
Although this effect is occasionally amusing, it would not be appreciated for long.  The best solution 
to these problems would be to identify selective erase as a desired function, and provide application 
program interface routines specifically for that purpose. The approach seems straightforward. The existing 
drawing routines would be changed to keep track of the various pieces of any lines that are drawn clipped. 
New erase routines would use this information to up- date the graphics display, and would also delete 
the indicated entries from the display lists. It should be noted, however, that we have not yet needed 
to do this. The windowing package is currently implemented as a set of Fortran subroutines, whose calling 
se- quences are outlined in Table i. Most of the routines and functions have been described in the preceding 
discussion. PREPARE_REMOVEWINDOW is discussed in the next section. One routine, FRAME_ WINDOW_USER, requires 
some explanation. The issue is how to draw a frame around a window. Since the package is general purpose, 
it is not appropriate to mandate any particular frame style. It might seem that the application program 
could frame its own windows as they are opened, using the standard drawing primitives. However, the frame 
requires special treatment, since it must be adjusted if the window changes size. This would not be possi- 
ble if the frame were subjected to normal display list processing. FRAME_WINDOW_USER is the solution 
to this quan- dary. It is supplied by the application program,  being known to the windowing package 
by its spe- cial name. Whenever a window is opened or re- drawn, the windowing package turns off display 
list processing and calls FRAME_WINDOW_USER, which uses the standard primitives to draw the frame. A 
flag is set during this time so that the frame graphics are not entered into the display list. The window 
identifier and associated parameters are passed in so that the frame style can be adjusted appropriately. 
 4. OVERLAPPING GDHPUTATIONS WITH USER THINK TIME In the vector oriented approach, the most expen- sive 
operation is removing a window from the dis- play. This requires scanning the display lists of all windows 
that are overlapped by the one being removed, clipping them against the removed window, and redrawing 
the results. If the display is com- plicated, this can require a significant amount of processor time. 
In our applications, the proces- sor time per se is of no concern, but the associa- ted delay is perceived 
by the user as degraded response. This problem can be avoided in some cases by overlapping the time-consuming 
calculations with the user's think time. This is done by intro- ducing a new application interface routine, 
called PREPARE_REMOVE_WINDOW in Table i. This routine is called after all prompts are issued, but before 
waiting for input. It goes through all the inter- nal processing to remove the window from the display, 
but does not produce any graphics out- put. Instead, its results are stored as physical plotting coordinates 
in another display list asso- ciated with the window, as shown in Figure 5. When the window is subsequently 
removed, this list is simply dumped to the display. Thus, the re- moval starts instantly and goes as 
fast as the device driver, communications line, and display device will allow. The total computation 
time is not affected, but the user sees greatly improved response. This technique is excellent for pop-up 
menus and help windows, for which it is certain that the windows will be opened and closed in stack 
order.  Table l. Calling sequences for ~ndowing package subroutines. INITIALIZE_WINDOWING_PACKAGE  
OPEN_INDOW (user_id,screen_limits,plot_limits,window_id) SET_CURRENT_WINDOW (window id) CLOSEWINDOW 
 POP_WINDOW PREPARE_REMOVEWINDOW  REMOVE_WINDOW RESTOREWINDOW SET_WINDOW_LIMITSAND_REDRAW (s creen_limit 
s, plot_limits ) PLOT IN_WINDOW (x,y ,ipen) WHERE_IN_WINDOW (x,y) NEWPEN_IN_WINDOW (npen)  NEWPAGE_IN_WINDOW 
CONVERT_SCREEN_TO_PLOT (window_id, x_s creen,y_screen, x_plot ,y_plot) CONVERT_PLOT_TO_SCREEN (window_id, 
x_plot ,y_plot, x_screen,y_s creen) FRAME_WINDOW_USER (user_id,screen_limits,plot_limits,window_id) 
 @SIGGRAPH'84 I rI Clip outside higher priority I I I [ windows I J /Output: transformed,~ \clipped 
vectors / Figure 5. The addition of a "remove" display list improves response time by allowing time 
consuming calculations to be overlapped with the user's think time. It cannot be used in all cases, 
however. The window's visibility must not be changed between calling PREPARE_REMOVE_WINDOW and actually 
remov- ing it. Also, graphics must not be drawn behind a window for which PREPARE_REMOVE_WINDOW has been 
called. Both cases invalidate the remove display list and can cause improper results. 5. PERFORMANCE 
 The windowing package as currently implemented is extremely device independent. It assumes that the 
display device can just draw vectors. Overall high performance relies on host processing power and fast 
transmission of vectors. As described in the next section, significant performance improvements could 
be made by taking advantage of more powerful display capabilities. Priority windows for graphics are 
usually imple- mented on a bitmap display equipped with high speed rasterops [5]. These represent the 
obvious standard for comparison. To be blunt, vector oriented windowing cannot hope to be as fast as 
 the rasterop approach. After all, just erasing part of a window will generally take at least half as 
long as a rasterop that completely updates the same pixels. (The erase only stores every pixel, while 
the rasterop must also fetch them.) The vector redrawing time is usually much longer. However, this is 
a specious comparison. We do not claim that vector clipping should be used instead of rasterops, but 
merely that it is a good substi- tute when a rasterop display is not available. This is an important 
point for anyone trying to produce a portable application, since rasterop displays are still much more 
the exception than the rule. It is more appropriate to consider some absolute measure of performance, 
such as responsiveness. The application shown in Figure 1 runs on an /{P 9000, a desktop computer with 
integral graphics. The time to open menu and help windows is negligi- ble, a small fraction of a second. 
The plotting time to remove a window depends on the amount of graphics behind it. Removing the menu window 
in Figure ib requires a fraction of a second; the help window in Figure la takes two seconds. The time 
to prepare for removing a window depends on the total amount of graphics in lower priority windows. 
Figure 1 requires about 4 seconds per window. However, since this is overlapped with the user's think 
time, the average user normally is not aware of it. The same application also runs on a VAX 11/780 
 using a Ramtek Marquis display system. This configuration is approximately twice as fast as the HP-9000. 
 The overhead introduced by passing graphics through the windowing package is small. In the application 
shown in Figures 1-3, the decrease in plotting speed caused by introducing windowing was about 30%. This 
application directs all output to the highest priority window, so the extra time is used mainly for subroutine 
calls, coordinate transformations, and display list management. If output were directed to lower priority 
windows, the extra clipping would require some additional time.  6. SUGGESTIONS FOR IMPROVING PERFORMANCE 
 The most likely bottlenecks in vector-oriented windowing are transmission time and host computing resources. 
Performance in both areas could be significantly improved by taking advantage of commonly available extended 
device capabilities. Many devices support filled rectangles as a primi- tive. The windowing package could 
take advantage of this by decomposing areas to be erased into rectangles that the display could fill 
by itself. This would avoid generating, clipping, and trans- mitting the closely spaced erasing vectors. 
Many devices also have hardware characters. Using these would greatly reduce the transmission time for 
pop-up menus and help windows. This would require modifying the clipping algorithms to treat character 
cells as indivisible units, as well as extending the display list formats. Finally, some newer devices 
support local display lists and clipping. The windowing package could use these by decomposing an area 
to be repainted into rec- tangular areas showing only a single window. Then each rectangle could be repainted 
by setting the device's clipping window and having it rerun the local display list. This would greatly 
reduce both transmission time and host processing, since the host would no longer have to traverse and 
clip potentially long display lists. These modifica- tions could be applied to many newer displays, such 
as the Tektronix 41xx series color displays. If the device does not support local display list management 
and clipping, then these operations must be done on the host. In this case, nothing can be done about 
the transmission time for re- drawing. However, the host computational require- ments could be greatly 
reduced by using more highly organized display lists. The performance described in the previous section 
comes from treating the display lists as strictly linear. The entire display list for each background 
window is scanned whenever a foreground window is opened, closed, or moved. Since the foreground window 
is typically rather small, the package spends much of its redraw computation time determining that vec- 
 tors do not in fact intersect the affected area. Most of this time could be avoided by indexing the 
 Computer Graphics Volume 18, Number 3 July 1984 display lists on vector endpoint position, so that vectors 
far away from the affected area would not even be considered. As our applications become more complicated, 
we will probably have to do this. 7. SUMMARY AND OONCLUSIONS This paper has described a device independent 
approach to priority windowing. The method is based on vector clipping operations, and assumes only that 
the display can draw and erase lines. Special hardware capabilities, such as high speed rasterops, are 
not required. The approach can thus be used with a wide variety of devices, in- cluding virtually all 
raster displays and terminals. Extended device capabilities such as rectangular fill, hardware characters, 
and local display lists and clipping can be used to improve the performance, without changing the basic 
ideas or the application program interface. Even in its device independent form, the approach works 
surprisingly well. In one highly interac- tive application, it supports background displays containing 
several thousand vectors, with pop-up menus and help windows in the foreground. Respon- siveness is enhanced 
by overlapping computations with the user's think time. In most cases, the user perceives no delay when 
windows are opened and closed. This vector oriented approach to priority window- ing provides an interesting 
alternative to more conventional raster oriented methods. By provid- ing both device independence and 
good performance, it allows program developers to take advantage of powerful interaction techniques while 
still sup- porting a wide variety of devices. ACKNO~g.~DGI~E~I~ S Thanks are due to Jim Thomas, whose 
enthusiasm for pop-up menus and their ilk encouraged me to stick with this problem, and to Dan Rosier, 
who used the result so convincingly in a real application. This work was funded by Battelle Corporate 
Tech- nical Development for Battelle Memorial Institute.  REFERENCES [1] Williams, G., "The Lisa Computer 
System", BYTE Magazine, February 1983, pp.33-50. [2] Apollo Computer, Inc., 1982, Apollo System User's 
Guide, Release 4.0., Chelmsford, MA. [3] Weinreb, D., and Moon, D., Introduction to Usin~ the Window 
System, Symbolics, Inc,, 1981. [4] Xerox Corporation, 1982, 8010 Star Information System Reference Guide, 
Dallas, TX. [_5] Pike, R., "Graphics in Overlapping Bitmap Layers", Computer Graphics, Vol.17, No.3, 
July 1983, pp.331-356.    
			