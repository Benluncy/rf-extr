
 short L~n@h Versions (EXTENDED Zvi Galil Department of Computer Science, Columbia University aucl Tel 
Aviv lJuiversity. Abstract Consider a simple n-vertex undirected graph and as­sume there are ~ edge-disjoint 
paths between two ver­tices u and V. We prove the following two results: There are K edge-disjoint paths 
between u and v, the average length of which is 0(7t/~) If all vertices have degree at least HI there 
are ~ edge-disjoint paths between u and v, each of which has length O(n/K). These bouncls are best possible. 
For directed graphs, the first result still holds but not the second. Some of the paths can be at least 
Q(n) long. We also describe how to use a minimum cost flow algorithm to find the paths irnpliecl by the 
above results in time O(tcrn). In a ~ edge-connected graph, we define the concept of B-distance (or bulk 
distance). The B-distance be­tween u and v is the minimum over all R edge-disjoint paths between u and 
v of the maximum path length. We prove that B-distance forms a metric. We give NP­hardness results on 
computing B-distances in two cases. The third remaining case is open but we give evidence to its difficulty. 
 1 Introduction The connectivity of a graph is an important area in graph theory and in algorithm research. 
It is also closely related to the reliability and stability of a network. *Work partially supported by 
NSF gra,lt ~~1%-93-lG209 and ~ISE I,~stitutio,~al infrastructure Cra;,t ~DA-$10-24735. Permission to 
copy without fee all or part of th~ material is granted provided that the copies are not mad? or cfis@utacf 
for direct comnyxcial advantage, the ACM copy ~ ht ~tceanctthe title of the publicat nn and ds date appear, 
a no e ISgiyen thatc~ym$isby.pefmis slon of the Association of Computing Machinery. o cop otherwise, 
or to republish, requires { a fee ancUorspec ICpermission. STOC 95, Las V as, Nevada, USA 631995 ACM 
O-897 91 -718-9/95/0005..$ 350 of M~n~er s Theorenl ABSTRACT) Xiangdoug Yu Department of Computer Sciencel 
Columbia University. Menger s Theorem[16] [9] is a classic result on graph con­nectivity. It has an 
edge version and a vertex version. For the case of edge connectivity, it gives an equiva­lence condition 
between the minimum edge cut sepa­rating two vertices and the existence of edge-disjoint paths between 
them. However, it does not state any­thing about the lengths of these paths, which is impor­tant if we 
view the graph as a circuit or communication network and the paths as signal/message transmission channels 
where both time and reliability are important. In this paper, we prove two short len,gth versions of 
Menger s Theorem, which say that in any simple (no self cycles and parallel edges) undirected graph with 
n vertices and m edges, there are K edge-disjoint paths between any pair of ~-edge connected vertices, 
the av­erage length of which is O(n/&#38;); and if in addition the degrees of all vertices are at least 
~, then there are ~ edge-disjoint paths between the pair of vertices, each of which has length O(n/~). 
These bounds are tight in the sense that there are graphs and vertex pairs in them such that the lengths 
of any K edge-disjoint paths between these vertices meet the bounds. In directed graphs, the first result 
(about the average length) still holds but not the second. We show that we may not be able to avoid paths 
of length Q(n). There are various algorithms to decide the edge con­nectivity of graphs and to find edge-disjoint 
paths be­tween vertices. See [6] and [15] for sequential algorithms and [13] for a parallel parallel 
algorithm. All these algo­rithms ignore the lengths of the edge-disjoint paths. [Js­ ing the approach 
of minimum cost flow, we propose an algorithm that finds the ~ edge-disjoint paths claimed above. It 
runs in time O(~m). In a K-edge connected graph, we define a new kind of distance called Bulk Distance, 
or B-Distance for short, between any two vertices. The B-distance between u and v is the minimum of length 
L such that between u and v there are K edge-disjoint paths each of which has length no more than L. 
We show that El-distance forms a metric for undirected graphs, and the short length version of Menger 
s Theorem can be restated using B­distance. Unfortunately, finding B-distance is hard. We give N P-hardness 
results for general weighted graph with K as small as 2 and for unweigted graph with vari­ able K. For 
unweighed graph but fixed K, we prove that unlike the usual flow problem (which ignores path lengths) 
where single commodity and multicommodity differ significantly, the single pair B-distance problem is 
in some sense equivalent to its multi-pair version. In their extensive work on Graph Minors , Robertson 
and Seymour designed a complicated polynomial time algorithm for finding edge/vertex-disjoint paths linking 
a fixed number of pairs of vertices [18]. But their tech­ niques do not seem to be directly applicable 
in our case when path lengths are also considered. A similar result on the ~-pair B-distance problem 
for fixed ~ may be as hard or harder. In [14], Lovasz, Neumann-Lara and Plumrner wrote a paper called 
Mengerian Theorems for Paths of Bounded Length . This is the only work known to us that takes into account 
the length of the paths. It deals exclusively with vertex connectivity and it investigates the relation 
between the size of vertex-cuts that break all short paths and the number of short vertex-disjoint paths 
between a given pair of vertices. Their work seems unrelated to ours. 2 Model and Definitions Definition 
1 Let G =< V, E > be a simple (wtthout self cycles and parallel edges) undirected graph wtth uer­ tex 
set V and edge set E, where IVI = n, IEI = m. Two vertices u, v E V are said to be tc-edge connected 
If for any subset VI C V wath u E VI and v# VI, the size of the cut, i.e. the set of edges with one end 
in VI and the other m V Vl, is at least K. Graph G is satd to be tc-edge connected if any two different 
vertices m G are K-edge connected. Definition 2 Given graph G =< V, E >, the length of a path p in G, 
length(p), is the number oj edges in It. Let PU,V = {PI, PZ7..., PK} be u set of K edge­dtsjoint paths 
between a pair of vertices u, v, we de­fine Avg(PU,~) = ~ ~~=1 length(pi) and Long(PU,v) = A4AX{length(pi)ll 
< i < K}. Let P.v~(u, v) be a path set mtnzmizing Avg(PU,V) and B$\(u, v) = Avg(PaVg(u, V)), let Plong(u, 
v) be one nimimmng Long(P~,~) and B$~g (u, v) = Long(P/o~,(u, w)), we call B&#38;~(u, v) the K-average 
distance between u and v, and B\~~Q(u, v) the K-bu!k distance between u and v. We usually stmpltfy the 
latter as B(K)(u) v) or B(u, v), and call zttc-B-dtstance, or just B-dtstance when K is clear from the 
context. Definition 3 Let P be a set of edge-disjoint paths be­tween vertex u and v In graph G, a uv 
orientation of P 1 i I \ \ \ \\ % - --- Figure 1: Removing a cycle in Lemma 1. is a digraph obtained 
from P by changing every edge In P into an arc pointing to the same direction the edge is passed as the 
path is traced from u to v. 3 Short Paths between a ~-edge Connected Pair of Vertices Let D be the uv 
orientation of P av~( ,v) Lemma 1 D is acyclic Proof: First, due to the optimality of Pa.g(u, V), each 
path in it is a simple path, i.e., does not contain cycle. Assume D contains a cycle C = al az . . . 
ak, where a~ are arcs, we will derive a contradiction below. (See Figure 1) Cycle C can be partitioned 
into segments, each of which appears in a single path. Of course, different segments may appear in the 
same path. Note that the ending vertex of a segment is the starting vertex of the other, whereas vertex 
u can only be the start of any arc and v can only be the end of any arc, hence these two vertices do 
not appear in the cycle. For each segment, there is an incoming arc attached to its start vertex and 
an outgoing arc attached to its end vertex. We list the segments in the cycle and their incoming and 
outgoing arcs as C = s]s2 . . .s{, incoming: rl, rz, . . ..rv. and outgoing: tl, ~2) ..., tl. Then we 
can rearrange the ~ paths so that they are still edge-disjoint but do not use any arcs in the cycle, 
which contradicts the optimality of l ~~~(u, v). The new paths go like this: At any moment, each new 
path proceeds along one old path. It leaves the old path that it follows when an ri is reached. Instead 
of getting into the cycle, the new path switches to the old path containing arc G--1, or t[ if ~ = 1, 
and ~ontin~les. Note that each edge has a unique distinct successor before the transformation. Since 
the transformation permutes and deletes some successors, each edge has a unique distinct successor after 
the transformation. We need to show two things. First, each new path will arrive at I). This follows 
from the unique distinct suc­ cessor property because if we do not arrive in v we must have a cycle and 
violate this property, The new paths are edge-disjoint again by the unique distinct successor property. 
1 Since D is acyclic, it can be represented as layered graph using topological ordering as follows. The 
first layer Ho consists of u. After defining a number of layers and deleting all vertices and edges in 
these layers, the next layer consists of all vertices with no incoming edges. We have the following definitions 
and lemmas about our layered graph. Definition 4 Assume layered graph D has 1+ 1 layer-s. Let H, be the 
set of vertices in layer i, for O < i < 1. interval H[i, j] ts defined as the subgraph obtained by Testrzciing 
D to vertex set Ui<h<j Hh. An s-tnterva~ ~s one satasfyang (j i + 1) = ;. We say that an arc a spans 
interval H[i, j] tf a E Hi xHj. Abase arcw one spanning H[i, i+ 1] for son~e i. The startzng ve~ez of 
a base are IS called a parent of the end vertex. For 0 s i <1, cut Ci is dejined as the set of arcs stariing 
al HIO, i] and ending at H[i+ 1,1]. Properties: For the layered graph D the following is true: 1. The 
highest layer HO = {u}; 2. The lowest layer H1 = {v}; 3. All arcs are downward, i.e., the starting vertex 
of any arc. is at a higher layer than the ending vertex. And, for O < i <1, there are exactly ~ arcs 
in Ci. 4. Long(P.vg(u, v)) <1. <. Any vertex not in Ho has an incoming base arc. But some vertices not 
in Hf may have no outgoing base arc. (They will still have outgoing non-base arc. ) 5 ([i) A 2-saturated 
interval with 5 layers (b) (b,d) issinked to (a,e), making the interval 3-saturated and (a,c) unsinkable. 
Figure 2: Operation SINIK. 6. Except for u and v, a vertex has an indegree equal to its outdegree. We 
next define an operation SINK that will help us modify the graph D into another graph with the same number 
of edges. We will be able to estimate the num­ber of the edges of the new graph. See Figure 2. Definition 
5 (Operation SINK). Interval H[i, j] is said to be s-saturated for some s satwfying 1 s s L (j i+ 1),zf 
i ~ j, and any of its s-.subintervals forms a complete s-partite graph if the orientation of arcs are 
ignored, t. e., between any two vertices in different layers in the subinterval there is an arc. The 
maxzmum such s is called the saturation degree of interval H[i, j]. H[i, j] is fully saturated tf s = 
(j i + 1). An arc spannzng H[i, j] can &#38; stnked Zf H[i, j] has a saturation degree s < (j i). In 
operation SINl~, the ori!~inal arc is takeTL away, replaced by a new arc wannin$l the hghest UIV saturated 
(s + 1)-subinterval in H[i, j]. A fully sinked in-l graph FS(D) from D is one obtained by repeatedly 
ap­plying operation SINK to D until no arc is sinkable. Properties: After a SINK, the graph has the same 
number of layers, each layer has the same set of vertices, the total number of arcs in the graph is unchanged, 
and the size of C; does not increase for O < i <1. In FS(D), whenever there is an arc spanning interval 
H [i, j], H [i, j] is (j i)-saturated. Theorem 1 If vertices u and v are ~-edge connected in an undirected 
simple graph, then B~)(u, v) = o(71/1,/Z). Proof: Let W = ~~=1 iength(p~), then Bk](u, V) = W /K. Note 
that W is just the number of edges in D, or equivalently, in F = F S(D). Below we bound W to be O(n@). 
For a set of layers A, let IIAII = ~~,~~ lHil. We divide the layers into two parts: Part S containing 
those Hi s with lHi I < W except the first and the last layer, and Part L. contains the rest. It follows 
that ILI ~ llL1l/fi+2. For any Hi ~ L, since lC ;-lUC il s 2H, we can estimate the number X of arcs touching 
or passing layers in L: X ~ ~ lC~_lUC il = O(KILI) = O(fillLll) = 0(7~fi) H,GL The rest of the arcs can 
only touch or pass layers in ,$ . TO analyse this case, we determine a sequence of layer numbers O = 
10,11, . . . . /h = 1 in F, such that for Os i< h, Ht,+, is the farthest layer to which any arc from 
Hl, can go. This, combined with the fact that F is fully sinked, implies that H[i~, li+l] is (i~+l 1~)­saturated 
and no arcs from layers above Hl, can reach layers below Hi,+,. We call interval H [ii, li+l] a trunk, 
denoted by Ti. See Figure 3. Consider any two layers Hz, Hv in L such that all layers in between are 
in , 3 . Let ,5 1 = {Hilx < i < y}, T., T.+l, . . . . Tb be the minimal such sequence of trunks that 
cover S1, and the intersections of S1 with those trunks be GI, Gz, .... Gg where q = (b a+ 1). Claim. 
For 1 s i ~ q, llG~ll = O(W). Proof: Assume [lGi[l > 5@ for some 1 ~ i ~ q, Since both the highest layer 
Hj and the lowest layer Hg in C;t have size smaller than W, there must be at least 3fi vertices in the 
intermediate layers. Since each intermediate layer has size smaller than fi, there must be one intermediate 
layer H3 in G~ such that [lH[f+l,j]nG~ll > /Z, and l\ H[j+l, g-l]nG,ll > W. Since H[f + l,g 1] is fully 
saturated, there would be more than @ . &#38; = K arcs in Cj, a contradiction. Therefore [lGill s 5fi. 
~ ($= A l~y~~ Trunksare:b /0,4),lf/4,6)jH[6,7] H~7,ilj, ~~d H[II,14) Any bipartite graph ~ A completebipartite 
graph Figure 3: Trunks in the proof of Theorem 1. Next we bound Y, the number of arcs that is not counted 
above in X (edges not touching or passing over layers of L). From the property of trunks we know that 
any such arc is either within a G ~, called internal arc, or from a CJ~ vertex to a Gi+l vertex, called 
ezternal arc. The number of internal arcs of Gi is bounded by llGi[\2. The number of external arcs from 
Gi to G,+l is bounded by llGil\ ~llGi+l 11, which is in turn bounded by  (IIC;3112S0 get + llGi+ll]2)/2. 
we G, where Gi ranges between all pairs of big layers Hz and HY described above. Since two such Gi s 
overlap in at most one layer, the total size of Gi is less than 211S[I. With constraint [\G, II <5-, 
it can be shown that Y achieves the rnaxirnurn when every Gi has maximal size (5&#38;, in which case 
Now W= X+ Y= O(nfi). I The same proof appleis in case of directed graphs. Corollary 1 If vertices u 
and v are K-edge connected in a simple dtrected graph, then B&#38;} (u, v) = O(n//R). Remarks. Example 
1 in Figure 4 shows that the bound given in Theorem 1 is tight and holds for the average length only; 
long paths may not be avoidable. In spite of the existence of such odd path, one can get a large enough 
set of edge-disjoint paths each of which is short. u 1 k 4 E E E 9 E **** E E * E **** E E ~2 k2-3 Figure 
4: Example 1: Theorem 1 is best possible. Corollary 2 If u and v are K-edge connected in graph G, there 
are Q(K) edge-disjoint paths between u and v such that each of these paths has length O(n/fi). 4 Better 
Results for Graphs of High Degree In section 3 we bounded the average length of a set of paths but gave 
an example that contains an odd long path. In this section we show that if the graph has degree ~ ~ then 
we can guarantee that all K paths are short, and the bound is even smaller. Definition 6 A graph is called 
mixed if it contains both dzrected and undirected edges. A cycle tn a mixed graph may have both types 
of edges, but the directions of the di­rected ones must be consistent. We say a cycle is heavy tf the 
number of undirected edges in it a s smaller than that of directed ones. Definition 7 An embedded uv 
orientation of a set P of edge-disjoint paths between u and v in graph C: is a mtxed graph obtained from 
G by changing edges in P in the same way as the uv orientation of P whtie keeping all other edges untouched. 
Given path set p~~g(u, v), one can wresent its UV orientation D as layered graph by topological ordering 
as in Section 3, then add in the remaining vertices and edges to form the embedded uv orientation M. 
Definition 8 Assume D has layers Ho, HI, . . . . Hi. Let e = (x, y) be a nonpath edge wath z ~ Hi. If 
y @Hi, we say y is e s outer end with respect to Hi, denoted by Outer~(e), or simply Outer(e) when i 
is clear. If this outer end falls znto one oj the layers, we call e a jump, otherwise, we call the outer 
vertex a satellite of H,. All the satellites of Hi form a set SATi, and the unzon ., of SvATi, SAT$+l, 
. . . , SAT] is denoted by SAT[i, j]. A Cluster is defined as the set of vertices dedicated ex­clusively 
to three neighboring layers, i.e. <~L[Ji = H[i, i+2] (J(SAT[i, i+2] SATIO, i l] J9AT[i+3, i]) Lemma 2 
Let M be the embedded uv orientation of Pavg(u, v). Then M does not contaan heavy cycle. Proof: This 
can be shown in nearly the same way as Lernrna 1. The difference is that here the heavy cycle will be 
written as slglszgz . . . slgi where si (directed) are path segments and g! (unciirectecl) contains zero 
or more edges that are not in any path. Each Si has an incoming arc r~ and an outgoing arc 4. Note that 
now u and v may be in the cycle, in that case we let the ri or ti be a dummy arc. Again we construct 
new paths from u following old paths. At its current vertex (which is u at the beginning), each new path 
mllst decide Which arc to choose as successor. The rule is: if the current vertex is not in the cycle, 
take the successor in the same way as the old path it currently follows. Otherwise, the current vertex 
must be the start vertex of an Si. Let j=i l, orlifi=l. If gj is empty, then choose tj as successor. 
Otherwise, let gj = el, (:2, . . . . ~h, Where el is adjacent to sj S end vertex and eh is adjacent tO 
si S start vertex. Orient edges in gj so that it forms a path going in counter direction: eh, . . . . 
ez, el. Tile new path then takes m turn as successors e~~, . ., ez, el, and takes tjafter that. (Of course, 
if tj is a ummJ one, that means v is reached and no further successor need to be taken). It is easy to 
see that different arcs have different successors, no arcs in any si are taken by any new path, and successors 
always exist unless v is reached. This implies that every new path must reach v and does not share arcs 
with others. The new set of paths drop all si s and introduce nothing more than the gi s. Since the cycle 
is heavy, the new path set would have shorter average length, a contradiction. # Theorem 2 If vertices 
u and v are K-edge connected (K)(u,v) = in an undirected degree z K graph, then Blong 0(11/K). Proof: 
It is enough to bound above Lo7~g(~av9(~, v)) ? Bf:Jg(u, v). The layers in D are classified into three 
types, and the number of layers in each type is shown to be 0(71/tc). Thus Long(P~~~(~, v)) which is 
not larger than the total number of layers, equals to O(n/~). Type I. Layer Hi is of type I if IC LU, 
I z w/6. Type II. Layers containing one vertex (a critical vertex) that has less than K/3 nonpath edges. 
Type III. Layers not of type I or II.  Figure 5: Heavy cycles in the proof of Theorem 2. Since CLIJiOG 
LIJJ = 0 for j > i+2, we have for each t, O < t <2, there can be at most O(n/R) type I layers in Ht, 
Htfs, Ht+z. s, Ht+szj . . So that total number of layers of type I is 3 ~O(n/~) = 0(71/~). For type II 
layers, we have the following obversation. The critical vertex has degree at least ~, more than 2/;3 
of its edges lay in the paths. Every path going through it uses exactly two of the 2~/3 arcs; there must 
be more than tc/3 paths passing through it. In the sequence of such layers listed top-down, we partition 
them in order into subgroups of size 5. Con­sider an interval If ~, q] that holds one such subgroup {AI, 
AZ, A3, A4, A5} such that HP = Al and H, = As. The critical vertex of any A~ has at least ~/3 arcs going 
down, which must end at different vertex (no parallel edges). If for all 1 s i < 4, more than ~/6 of 
the at least ~/3 arcs go below H~, plus the at least K/3 arcs going down from A5, there would be more 
than ~ arcs in Cq, which is impossible. Hence, one of the A~, 1 ~ z s 4 must have at least ~/6 end vertices 
in H~, q], causing the size of lif~, q] to be O(K). Since such intervals are disjoint for different subgroups, 
there should only be O(n/~) of them. The total number of type II layers is therefore 5 ~0(71/K) = O(n/x). 
In a type III layer Hi, every vertex has at least ~/3 nonpath edges. The outer ends of ~/6 of them must 
fall outside CLUi since lCLUi I ~ K/6. There are two pos­sibilities. First, every vertex in Hi is aclj 
scent to a non­path edge whose outer end is in LOWER_BLO(lI{ = H[i + 3,1] U ,$AT[z + 3, 1]. We will show 
this would imply a heavy cycle in M, and thus is not possi­ble. To find the heavy cycle, one starts from 
any ver­tex wo G Hi, goes along a nonpath edge from wo to ra E LO WER.BLOCJI<. If ro c ,$ ATj for some 
j, one can find rl E Hj such that (ro, rl) is a nonpath edge. This means that there is always a shortcut 
of length or2from W.toalower layer Hj, ~>i+2.Onthe other hand, from the ending vertex in Hj one Can al­ 
ways backtrack layer by layer to some vertex W1 in H, through j i > 2 base arcs. From WI one can repeat 
the same procedure as from WO, to get WZ, etc. This procedure is stopped when we reach a vertex t for 
the second time. All the vertices from t s first occurrence to its second occurrence form a cycle. This 
cycle is heavy because the rearrangement around t still keeps the shortcuts within length 2 and the directed 
segments above length 2. See Figure 5. So the only possibility left is the case in which at least one 
vertex w in HZ has K/6 of its nonpath edges adjacent to UPPERJ?LOCA = HIO, i 1] U(S ATIO, i 1] SAT[i, 
1]) and no nonpath edge to LOWER.BLOCIi . Call the set of outer end vertices of those up-going edges 
the cover set of w. If any member of the cover set had a nonpath edge jumpping down to H[i+3, 1], this 
rnernber would have the same effect as one in SAT[i + 3, 1] in causing a shortcut of length 2 from w 
to H[i + 3, 1], and the heavy cycle argument above would apply. So for at least one w the cover set has 
no nonpath edge jumpping down to H [i + 3, 1]. We call such vertex w interesting. Consequently, the cover 
set of an interesting vertex w in Hi is disjoint from the cover set of an interesting vertex WI in any 
type III layer Hj for j 2 i + 3. Since a cover set contains at least .Q(~) vertices, the total number 
of type 111 layers is 3 O(n/K) = 0(71/K). 1 Corollary 3 If C: is K-edge connected, then there are K edge-disjoint 
paths of length O(n/K) between any two different vertices. Remarks. Example 2 of Figure 6 shows that 
the bound given in Theorem 2 and in Corollary 3 is tight. It gives a K edge-connected graph such that 
for every set of K edge-disjoint paths between vertices u and v, each path in the set has length at least 
~(71/K). Theorem 2 and Corollary 3 do not hold for directed graphs. Example 3 in Figure 7 shows that 
one cannot avoid paths of length Q(n) even if the graph is ~ arc­ connected. 5 Algorithm In this section 
we describe an algorithm that given graph G and vertex s, t, finds a P.wg(s, t), thus it 1 23 k-2 k-1 
k u 1 2 3 E EEE EEEE EEE k-1 k v Figure 6: Example 2: Theorem 2 is best possible. achieves the bounds 
given by Theorem 1 ancl Theorem 2. Wegivea sirrll)le form~llation of theprol)lem asa~lin­imum cost flow 
problem. In fact Lernrna 1 ancl Lemma 2 follow from the well known fact that for a minimum cost flow 
of any value, the residual network has no neg­ative cost cycle. In our case we preferred giving a more 
intuitive combinatorial proof. Due to lack of space we give the details in the Ap­pendix. We transform 
G into a directed network F. The network has arcs with capacities in {O, 1} and costs in { 1, +1}. It 
follows from the construction that there is an integral minimum cost ~ flow in F and its cost is Bk}(u, 
v). Minimum cost flow is a well studied problem in com­puter science and operation research. Due to the 
spe­cial characteristics of Al cost network and the specific requirements of our question, we obtain 
the bound be­low by making some small changes to one of the earli­est algorithms for minimum cost flow, 
i.e. the succes­sive shortest path algorithm developed independently by Jewell[l 1], Iri[lO] and Busaker 
and Gowen[3]. Theorem 3 There is an O(Knt) time algorzthm that ei­ther finds a mzntnlum cost s t K-flow 
in F, or decndes that such flow does not ~ztst. Corollary 4 The K edge-disjotnt paths implaed by Th~­orem 
1 and Theorem 2 can be found an ttme O(Knl). Proof: The final subnetwork consisting of arcs (i, j) with 
positive unit flow must be an acyclic Eulerian di­graph. It is decomposable into ~ arc-disjoint paths 
in linear time. 9 hk-3 hk-2 hk-1 hk x A groupof arcsfrom/tokvertces[o/fromone -Acliqueofxvertices v (depsndingonthedirectionof 
theamow) Acompletebipartitegraph Anm Figure 7: Example 3: Theorem 2 and Corollary 3 do not hold for 
ciirected graphs.  6 B-Distance The usual concept of distance in graphs is based on the length of a 
single path. In R edge-connected graphs, B\~~~ and B&#38;} are generalized distances based on K edge-disjoint 
paths. A key property of any distance measure is that it forms a metric. For B-distance in an undirected 
graph, if B(u, u) is defirmd to be O, while B(u, v) = B(v, u) is obviously true, its metric property 
will be implied by the following triangular inequality theorem. Theorem 4 In a K edge-co7tnected graph 
G, for any three dtfferent nodes u, v and W, B~)(u, w) + B&#38;)(w, w) ~ B~)(u, v) M true for x = avg 
and r = lo71g. Proof: Let the set of paths achieving B.(u, w) he P = {pi, p2, . . . , pK} and the let 
set of paths achiev­ing B$(w, v) be Q= {ql, qz, . . . , q.}. Define a mapping R. :Q~ EU{A}, where Aisadummy 
edge, asfol­lows. If qi has common edges with paths in P, then Ro(qi) is the first such edge reachecl 
when tracing qi from v; otherwise, Ro(yi) = A. Basecl on Ro, one can derive a set Q1 of partial paths 
from Q by keeping only those edges in qt from v until Ro(qi) is incl~lded, or ~lntil w if Ro(qi) = A. 
One can also derive a set PI of partial paths from P by only keeping those edges in pi from u until an 
edge in RO(Q) is included, or until w if there is no such edge in pi. This operation is called conver­sion 
(P, Q, Ro, PI, Ql). It is easy to see that conversion (~1,Q,~I, ~2,Qz), (P2,Q, R2,Ps,Q3),... can be 
done in a similar way. This procedure is continued until Pt+l = Pt for some t as we shall see below. 
Note that we always use the entire set Q with PJ to generate Qj + 1 and Pj+l. Note also that the paths 
in Pj become shorter as j grows (except for j = t) and as a result the paths in Qj become longer. Time 
texists because each path in P has finite length. Note that for j >0, any path in Pj has either no com­mon 
edge with paths in Qj, or exactly one common edge. Since paths in Qj are edge disjoint, the exactly one 
common edge will be shared with exactly one path in Qj, and in this case we say the path in Pj and the 
one in Qj are coupled through this edge at time j. So, if q E Qt+l is not coupled at time t+ 1,itcan 
not share edge with any path in Pt+l. We claim that in this case q must equal to its complete form qi. 
For, if did not, its end edge Rt(qi) would be in a path p E Pt = Pt+l, a contradiction. Now ~ edge-disjoint 
paths can be formed by a num­ber of coupled pairs of Pt and Qt paths (possibly after deleting some shared 
edges), plus the remaining set of complete u w paths followed by the complete w v paths. Each suched 
u v path has length no larger than thelength sumofau wpath inPandaw vpath in Q, and their total length 
is at most the total length of P plus Q. So the triangular inequality is true for both z= long and z= 
avg. I We have shown an efficient algorithm for 13aVg in Sec­tion 5. But the computation of l?lO.g is 
more diffi­cult. The following two theorems are proved by sim­ple reduction from the classic NP-complete 
problems of NUMBER-PARTITION and MULTI-PAIR EDGE-DISJOINT PATHS [12]. Theorem 5 The problem of deciding 
if ll~~~g (u, v) s L gzuen an undirected graph G =< V, E >, general weight funct20n w : E -Z+, vertices 
u and v, and length bound L w NP-complete. Thts is true even if C; is a sample layered graph and K = 
2. Theorem 6 The problem of deciding if B[~~~ (u, v) < L given unweighed undirected graph G =< V, E >, 
K, vertices u and v, and length bound L is NP-complete. If P # NP, the only possible polynomial time 
al­gorithm could exist for E3-distance in the case when K is fixed and the edge is unweighed or polynomially 
weighted. However, below we show that it is probably harder than an already difficult problem. Definition 
9 Let [0, n I] be the set of K-tuples whose components take znteger values from O to 71 1. For any U,T 
E [O,n l]K, dejine u < r ifui ~ ~i for all 1~ i ~ K and Ui < Ti for at least one i. The partial order 
digraph H =< [0, n 1] , S > is defined by letting (u, r) E ,5 if and only if u < r and there is no AE 
[0,71 1] such that u<A+r. Definition 10 Given sources F = S1, 52, . . . . SK and sinks ~= tl, t2, ..,, 
tz in an undirected graph G, de­jine SP~(~ ~ to be the set of edge-disjoint path tuples (PI, P2,.. ., 
p~) such that for 1 s i ~ K, p, is a sample path linking si and ti.Let PLG(~~ = {(i1,12, . . ..iK)13(p1 
.p2, pK), pK) E SPG(.~ i) VI ~ i~ K, li = length}, the multi-patr B-distance MBG(~ ~ is defined as the 
set of mtnimal points in PLG(~ f ), t.e., Multi-pair B-distance is a generalization of single pair B-dist 
anc.e. In fact, where we use UK and VK, to denote a sequence of K u s and v s, respectively. A multi-pair 
B-distance algorithm can be used to find single pair B-distance right away. We will show below that a 
single pair B-distance algo­rithm can be used to find multi-pair B-distance with polynomial time penalty. 
Hence this two problems are in some sense equivalent. This is a contrast to flow problem, where single 
commodity version differs from multi-commodity version significantly. There is a sim­plified version 
of multi-pair B-distance problem, i.e., the MULTI-PAIR EDGE-DISJOINT PATHS problem used above, which 
just requires to decide if S PG (.?, ~ is empty, without worrying about path lengths at all. From the 
extensive work on Graph Minors by Robert­son and Seymour [18], we know for fixed K, that this problem 
is solvable in polynomial time by a complicated algorithm. But these techniques do not seem to be di­rectly 
applicable in our case when path lengths are also considered. A similar result on the K-pair B-distance 
problem for fixed K may be as hard or harder. Theorem 7 The existence of a single-pair B-dtstance algorithm 
A$ running in time T(A$) implies a K-pair B-distance algorithm Am running in time T(Am) = T(A$) . n . 
Proof: We apply procedure EXPLORE-PATHS to vertices in the partial order digraph H =< [1, 71 I]K, S 
> in topological order, starting from (O, 0,..., O). Whenever EXPLORE-PATHS returns success for a tuple 
I-, all the descendants of -r need not be consid­ered. As a result we generate exactly all elements of 
MB~(~ i). Procedure EXPLORE.-PATHS(T, G, ~, ~ begin Construct graph F from G by adding node s and t, 
and for 1< i < K, link sand Si by apath of length (7ti + n ~,) (new nodes need to be inserted to pad 
the path to that length), and link t;and t by apath of length n(~ i+ 1). Set L = 71(K + 2). return A$(F, 
s, t, L). end 9  7 Conclusion We proved short length versions for the classic Menger s Theorem in graph 
theory, and described an algorithm for finding the claimed edge-disjoint paths. We defined the concept 
of B-distance and proved its metricity. We pointed out that, B-distance is hard to compute. The related 
open problems are: Can we compute B-distances in unweighed graphs for a fixed ~ in polynomial time ? 
To what extent can we approximate it in all the cases? Acknowledgement We appreciate helpful discussions 
with Moti Yung.  References [1]R. K. Ahuja, T. L. Magnanti, and J. B. Orlin, Net­work Flows , Prentice 
Hall, New Jersey, 199;1. [2] R. K. Ahuja, A. V. Goldberg, J. B. Orlin, and R. E. Tarjan, Find­ing Minimum-Cost 
Flows by Doubling Scaling , Mathematical Programming 53, 1992, pp. 243-266. [3] R. G. Busaker and P.J 
.Gowen, A Procedure for De­ termining Minimal-Cost Network Flow Patterns , ORO Technical Report 15, 1961, 
Operational Re­search Office, Johns Hopkins University, 13altirnore, MD. [4] R. Dial, Algorithm 360: 
Shortest Path Forest with Topological Ordering , Communications of ACM 12, 1969, pi). 632-633. [5] J 
.Edmonds and R. M. Karp, Theoretical Improve­ments in Algorithmic Efficiency for Netowrk Flow Problems 
, Journal of ACM 19, 1972, pp. 248-264. [6] S.Even and R. E. Tarjan, Network Flow and Test­ing Graph 
Connectivity , SIAM .J. on Computing, 4:507-518, 1975.  507 [7] A. Frank, Packing Paths, Circuits, and 
(.hlts-A Survey , Algorithms and C;ornbinatorics 9, Paths, Flows, and VLSI-Layout, Springer-Verlag 1990, 
pp. 47-1oo. [8] A. V.(~oldberg and R. E. Tarjan, Solving Minimum Cost Flow Problem by Successive Approximation 
, 19th ACM Symp, Theory of Computing, 1987, pp. 7-18. Full paper in Mathematics of Operation Re­search 
1.5(1990), 430-466. [9] F. Harary, Graph Theory , ,4ddison-Wesley, Reading, Ma, 1969. [10] M.Iri, A 
New Method of Solving Transportation-Network Problems , Journal of the Operations Re­seach Society of 
Japan 3, 1960, 27-87. [11] W. S. Jewell, Optimal Flow through Networks , In­ terim Technical Report 8, 
1958, Operation Re­search Center, MIT, Cambridge, MA. [12] R. M. Karp, Reducibility among Combinatorial 
Problems , In: Miller, R. E., Thatcher,J.W. (eds.): Complexity of Corrrputer Computations. Plenum Press, 
New York, NY, pp. 85-103 (IBM Res. Symp. Ser., Vol 4) [13] S. Khuller and B .Schieber, Efficient Parallel 
Algo­rithms for Testing Connectivity, and Finding Dis­joint s t Paths in Graphs , 30th IEEE Symp. Found. 
Computer Science19i39, pp 288-293. [14] L. Lovasz, V. Neumann-Lara and M. D. Plurnmer, Mengerian theorems 
for paths with bounded length , Periodica Math. Hung. 9, 1978, pp. 269­ 276. [15] D. W. Matula, (Determining 
Edge Connectivity in 0(71771) , 28th IEEE Syrnp. Found. Computer Sci­ence, 1987, pp. 249-251. [16] K 
.Menger, Zur Allgemeinen Kurventheorie , Fun­dam. Math. 10, 1927, pp. 96-115. [17] J .B .Orlin, A Faster 
Strongly polynomial Mini­mum Cost Flow Algorithm , 20th STOC, 1988, pp. 377-387. Full paper to appear 
in Operation Re­search. [18] N. Robertson and P. D. Seymour, An Outline of a Disjoint F)aths Algorithm 
, Combinatorics 9, Paths, Flows, and VLSI-Layout, Springer-Verlag 1990, pp. 267-292. [19] R. E. Tarjan, 
Data Structures ancl Network Algo­ithms , CBMS-NSF Regional Conference Series in Applied Mathematics, 
1983. [20] N .Tomizava, On Some Techniques lJseful for So­lution of Transportation Network Problems , 
Net­works 1, 1972, pp. 173-194.  Appendix: Details of the Algo­rithm We transform G into a directed 
network F by replacing each edge (u, W) with a subgraph < VU, V, AU,V > where v ~lu = {U,7J, ZUUU,WVU 
} and AU,V consists of the four pairs of opposite arcs between u and wUV, wUU and v, v and WVU, and WUU 
and u, respectively. We associate capacity 1 and cost 1 to arcs in cycle UWUUVWUUU, and capacity O and 
cost, -1 to arcs in cycle UWVUVWUVU. Here the cost function is skew sgmmetric, i.e., cost(i, j) = co,st(j, 
i) for all arc (i, j) E A. Itis easy to see that a PUVg(s, t) in G can induce an integral minimum cost 
K flow in F and vice versa. Minimum cost flow is a well studied area in computer science and operation 
research. For an n-vertex, ni­arc. network N with C being the largest magnitude of any arc cost and U 
being the largest magnitude of any supply/demand or finite arc capacity, the best known time bound for 
this problem is[l] O(rnin{nrn log(n2/rn) log(nC), nrn(log log U) log(nC), (m log n)(rn + n logn)}), 
where the three bounds inside rnin are, respectively, due to Goldberg and Tarjan[$], Ahuja, Goldberg, 
Orlin, and Tarj an[2], and 0rlin[17]. While applying to the unit capacity + cost network F described 
above, this time bound becomes O(nrn log n). However, due to the special characteristics of+ 1 cost network 
and the specific requirements of our question, one can get a slightly better time bound by making some 
small changes to one of the earliest algorithms for min­imum cost flow, i.e. the successive shortest 
path algo­rithm developed independently by Jewell[l 1], Iri[l O] and Busaker and Gowen[3]. By applying 
the node potential technique invented independently by Tomizava[20] and Edmonds and Karp [5], one can 
transform an arbitrary arc length network into a nonnegative length network, thus makes the computation 
of shortest paths more ef­ficient. When the original network is of +1 cost, the shortest path problem 
on all the intermediate residual networks can be solved in linear time, therefore the log n factor typically 
associated with the time bounds can be dropped. Definition 11 Gtven network F =< V, A > with arc capacity 
junction u and skew sy7nntetric arc cost func­ tton c. A b-flow from node s to t is afunct~on z :A -R 
SUC}L that For all (i}j) E A, O ~ Xij < Wj and For all i ~ V, i # s, t, ~(~,~)GA Xji = D(i)j)CA ij; Z(j,$),.11 
~j$ + b = #2(s,j)&#38;A ~sj; Xtj + b = ~(~,t)EA lt and ~(Lj)cA The cost of this flOW iS cost(x) = ~(,,j)~A 
Cijzij . A minimu7n cost b-flow is one that mini7nizes cost(x). Gtven j?ow x, the restdual capacity function 
r is defined as 7-%] = U~~ + Zji Zij. The residual network F(z) reduced by x M 07te consisting only 
of arcs wtth posz ­tive residual capacities, with capacity functton r and the sa7ne cost functaon c. 
Definition 12 A node potenttal is a functton ~ : V H R. The reduced cost functton c is defined as c; 
= cij + ~(i) ~(j) for all arc (i, j) c A. We cite the following classic criterion in [I]. ~ell]ma 3 
(Reduced Cost Optimality Conditions (RCOC)). A b-flow x is mimmum cost Zf and only af some node potenttal 
~ satisfies the following reduced cost optmaltty condtttons: c:~o for every arc (i, j) in F(x). Proof 
of Theorem 3 An RCOC based successive shortest path algo­ rithm: 1. Initially, set all xij = O, n(i) 
= O. This O-flow meets RC~OC because C! = Cij = 1 for all (i, j) E F(0). Set b= O. 2. While (b < K) 
do: (a) Build a shortest path tree rooted at s with Cr as edge length, denote by d(i) the distance from 
s to node i. (b) If d(t) = m, return PATHS .NOT-EXIST; else set 7r = ~ + d and update c . (c) Merge 
into x one unit of flow along the short­est path from s to t,increment b by 1 and update F(z).   We 
need only to show the step of building the shortest tree takes time O(m). Since Cr is nonnegative, Dial 
s implernentation[4] of Dijkstra s algorithm is used. We apply the following observation to bound the 
length of the bucket sequence L: although c; may go Q(n) for some (i, j), Id(i)l and Ir(i)l are always 
bounded by O(n) because 7r(i) is just the s i distance in previous F (z) with the original c as arc 
length, thus n < m(i) < 71, and d(i) is the s i distance in current F(z) (still with original c as length) 
minus r(i), thus O < d(i) < 2n. In conclusion, the shortest path step takes time O(rn + L) = O(rn + n) 
= O(m) and the whole algorithm runs in time O(~nl). ~ 
			