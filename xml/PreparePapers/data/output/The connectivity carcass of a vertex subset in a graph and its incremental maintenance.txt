
 THE CONNECTIVITY CARCASS OF A VERTEX SUBSET IN A GRAPH AND ITS INCREMENTAL MAINTENANCE YE. DINITZ*12 
AND A. VAINSHTEINt 3 * Department of Computer Science, Technion Haifa, Israel 32000, dinitz@cs. technion. 
ac. il t School of Mathematical Sciences, Tel-Aviv University Ramat Aviv, Israel 69978, alek@math. tau. 
ac. il ABSTRACT. Let G = (V, E) be an undirected graph, S be a subset of its vertices, ts be the set 
of minimum edge-cuts partitioning S. A data structure representing both cuts in I.Z,S and the partition 
of V by all these cuts is suggested. One can build it in ISI -1 max-flow computations in G. It can be 
maintained, for an arbitrary sequence of u edge insertions, in O(min{]V]. Il?l, klV12 +wa(u, IVI)}) time, 
where k is the size of a cut in C.g. For two vertices of G, queries asking whether they are separated 
by a cut in C.S are answered in O (a (q, IV t) ) amortized time per query, where q is the number of queries; 
such a cut itself is shown in O ( IVI ) amortized time. The dag representation of all cuts in C,S separating 
two given vertices in S is obtained in O(min{lEl, klVl}) amortized time. 1. INTRODUCTION Connectivity 
problems play an important role in ap­plications of graph theory in computer science and have been extensively 
studied. In particular, much attention has been given to edge connectivity problems. A pair of vertices 
s and tof an undirected graph G = (V, E) is said to be i(-edge)-connected if there exist 1 edge-disjoint 
paths between them (equivalently, there is no V-cut, 1 <1 1, separating s and t).Evidently, l-connectivity 
is an equivalence relation, and its equivalence classes are called 1-connectivity y classes. It is known 
that the sys­tem of globally minimum cuts and connectivity classes formed by them in a graph has a cactus 
structure, i.e., is a tree of edges and cycles [DKL]. On the other hand, the lattice of all (s, t)-minimum 
cuts for fixed s and -t is represented by all closed sets of some directed acyclic 1This research was 
supported by the Fhnd for the Promotion of Research at the Technion, Israel. 2up to IWO: E. A. Dinic, 
MOSCOW. 3This research was partially done while visiting the Technion, Israel. Permission to copy without 
fee all or part of this material is granted provided that the copies are not made or distributed for 
direct commercial advantaqe, the ACM copyright notice and the title of the publication and Its date appear, 
and notice is given that copying is by permission of the Association of Computing Machinery. To copy 
otherwise, or to republish, requires a fee and/or specific permission. STOC 94-5/94 Montreal, Quebec, 
Canada CI 1994 ACM 0-89791 -663-8/94/0005..$3.50 graph (dag) with one source and one sink [K,PQ]. Both 
these data structures can be maintained efficiently un­der edge insertions (see [D, W93] for the first 
one and, e.g., [1] for the second). We suggest a new structure, which is a natural generalization of 
both the aforemen­tioned representations. This data structure represents all minimum cuts of G partitioning 
a fixed vertex sub­set and the corresponding partition of this subset into its connectivity classes. 
Our structure admits efficient increment al maintenance as well. One of the goals of connectivity studies 
is to pro­vide a basis for efficient incremental maintenance of 1­connectivity classes. The corresponding 
algorithms are presented in [WT] for 1 = 2, [GI] for 1 = 3, and [D, W93] for 1 = 4. We hope that our 
data structure can play the crucial role in solving the maintenance prob­lem for l-connectivity classes, 
1 arbitrary. Indeed, take for a vertex subset an (1 1)-connectivity class, then its connectivity subclasses 
are just l-connectivity classes of G. The totality of these subclasses gives the partition of V into 
l-classes. Thus, it suffices to maintain our data structures for all (1 1)-classes of the graph. However, 
an edge insertion can change connectivity structures not only for certain (1 1)-classes, but can imply 
also the merging of some (1 1)-classes. So, in general, (1 2)-, (l-3)-. . . connectivity y classes 
are involved as well, and we must maintain all the hierarchy of the above data structures for all k-classes, 
k < 1 1. The techniques for merging our structures are beyond the scope of this paper and will be presented 
elsewhere. Another application of connectivity structures is aug­ment ation problems of the type: given 
a graph, add the minimum number of edges so as to increase the connec­tivity of the whole graph to a 
prescribed value. The cactus structure of minimum edge-cuts was employed essentially in [NGM] to develop 
clear and fast schemes and algorithms for graph augmentation. One can sup­pose that the suggested generalization 
of this structure to locally minimum cuts will help to improve the results in this area. Let us consider 
a vertex subset Sand the set of all minimum S-cuts, that is, cuts of Gthat partition Sand have the minimum 
cardinality, k, among such cuts. Two such cuts are equivalent if they partition S in the same way. The 
system of all such partitions is represented by a cactus ?ls (the skeleton), similarly to [DKL]. Each 
partition is defined by a cut of l-1s. Each family of equivalent s-cuts is represented by a dag, similarly 
to [K,PQ]. Such a dag, up to orientation, is a quotient graph of G; we identify its nodes with their 
preimages in V under the quotient mapping. These dags agree on intersections in the following sense. 
First, if two non­terminal nodes of two dags intersect, then these nodes coincide. Thus, the total partition 
of V by all min­imum S-cuts subdivides only terminal nodes of each dag. The quotient graph by this total 
partition we de­note by ~5 (the flesh). Second, let two nodes of two dags coincide and, hence, have the 
same set of incident edges. Then the two 2-partitions of this set into incom­ing and outcoming edges 
in both dags coincide as well. So, though ~S, in general, cannot be oriented globally, at each node there 
exists a distinguished 2-partition of the set of incident edges (the inherent partition). An analog of 
an oriented path in FS is a path that agrees with inherent partitions; all such paths appear to be simple 
(and, thus, 7,s is, in a sense, acyclic). Finally, to each node of 3.s we assign the set of dags in which 
this node is nonterminal. The corresponding families of equivalent S-cuts define a subset of edges in 
XS (the projection r5 of the node), which appears to be a path. The data structure consisting of the 
skeleton, the flesh with the inherent partitions, and the projection map­ping is called the connectitnty 
carcass of S. The connectivity carcass can be easily glued from (s, t)-dags [K,PQ], S, t G S, s fixed, 
because of their coincidences on intersections . Upon inserting a new edge into G, all the four com­ponents 
of the carcass change accordingly, and all the changes are of a contractile nature (provided k does not 
change). The change of the flesh consists in contracting several vertices into a single new vertex. In 
particular, the endpoints U1 and U2 of the image of the new edge in Ys fall into the new vertex. The 
other flesh ver­tices that are contracted are just the vertices that can be visited by a path between 
U1 and U2 guided by the inherent partitions. The change of the skeleton consists in contracting its certain 
path, which is defined by pro­jections of U1 and U2. The set of flesh vertices for which the projection 
changes is defined by their reachability from U1 and U2 along guided paths. From the projec­tion of a 
vertex, certain parts of the sets nS(U1 ) \ms (U2 ) or TS(U2) \ TS(UI ) are deleted. The inherent partitions 
remain the same, except for the new flesh vertex, where the inherent partition is glued naturally from 
those of constituting vertices, or becomes trivial. The proposed data structure can be maintained in­crementally 
in 0(min{kn2, nm} + tm(u, n)) time, for an arbitrary sequence of u edge insertions preserving the value 
of k, where n and m are the numbers of ver­tices and edges in G, respectively, More exactly, the complexity 
is O(n m + ua(u, n )) where n < n and m < m, m = O(kn ), are the numbers of vertices and edges in the 
flesh, respectively. At any time we can an­swer the query asking whether two given vertices of G are 
separated by a minimum S-cut in O(a(q, n)) amor­tized time, where q is the number of queries, and show 
such a cut itself in O(n) amortized time. The dag rep­resentation of all (s, t)-minimum cuts for any 
pair of non-(k + I )-connected vertices of S can lbe obtained in O(m) amortized time. (For a comparison, 
in [GN] the (s, t)-dag is constructed in O(nm) time, for any pair of distinct vertices s and t). In Sect. 
2 we consider the case of a three-element subset S to gain an intuition and to prove the basic Lemma. 
Next, we define the components of the con­nectivity carcass and state their properties. In Sect. 3 we 
describe the transformations of the connectivity car­cass under the insertion of an edge to G. In Sect. 
4 we outline the algorithms and the calculaticm of complex­ity for maintaining our data structure and 
execution of queries. Sect. 5 presents two examples illustrating the notions and results of Sect. 2,3. 
It wouldl be helpful to read Sect.5 in parallel with Sect.2,3 according to refer­ences to figures in 
the text. 2. THE STRUCTURE OF THE CONNECTIVITY CARCASS 2.1. Preliminaries. Let us consider a connected 
undirected graph G = (V, E), possib~y with paral­lel edges. Each ordered 2-partition P = (VP, ~P), VP 
= V \ VP, of the vertex set V defines the set of edges EP whose ends lie in distinct parts of P. An ordered 
2­partition C is said to be a cut in G if no proper subset of Ec coincides with EP for some other 2-partition 
P. The cardinality c(C) = C(VC, Vc) of a cut C is defined to be the size of Ec. We say that a vertex 
v E V lies inside C if v c Vc, and outside C if v E PC. For any two cuts C and C , denote by C n C the 
2-partition (Vc n VCI, Vc U Vcl), and by C U C the 2-partition (Vc U VCI, i~ n VCI). For any cut C, the 
opposite cut C is defined by VC = VC, v~= Vc. Let S be a subset of V. Any cut C defines a 2­partition 
(SC, SC) of S, with SC = VC o S, SC= ~Cn S. A cut C is said to be an S-cut if both Sc and Sc are nonvoid. 
Let us denote by k the minimal cardinality among all the S-cuts. In this paper we are interested only 
in S-cuts of cardinality k (minimum S-cuts). In what follows, the cardinality of any cut under consider­ation 
is assumed to be equal to k, and so the adjective minimum is usually omitted. Two S-cuts are said to 
be S-equivalent if they define the same 2-partitionof S (Fig.4a). Equivalence classes of S-cuts are called 
bunches. It is well known that the intersection and the union of two equivalent cuts are cuts from the 
same bunch as well. Two vertices of G are said to be S-equivalent if they are not separated by any S-cut. 
Equivalence classes of vertices are called units (Fig.4b). We denote by 3s the quotient graph obtained 
from G by contracting all the vertices of the same unit into one vertex. Observe that under a con­traction 
we delete the obtained loops, but keep all the parallel edges. Let f: V + M be a mapping to an arbitrary 
set M. For any W ~ V, we denote by ~(w ) the set {~(w): w c W}. We say that a 2-partition P of M f-induces 
a cut C if VC = f-1 (MP). Similarly, given a mapping g: S + M, we say that P g-induces a bunch of S-cuts 
if Sc = g-l(MP) for any cut C in this bunch. 2.2. The case of a three-element subset. By [K,PQ], for 
s, tE V, s # t, minimum (s, t)-cuts corre­spond bijectively to the closed sets of a dag DS,t, which is 
a quotient graph of G. (Recall that a vertex subset of a dag is said to be closed if no other vertices 
of this dag can be reached from this subset.) So, in the case S = {a, b} the set of units coincides with 
the set of the preimages of the vertices of Da,b under the quotient mapping, and pja,b] coincides with 
Da,b up to orienta­tion of edges. To make our ideaa more intuitive and to prove the basic statement, 
let us consider separately the small­est nontrivial case: S = {a, b, c} and any two of these vertices 
are separated by an S-cut. Clearly, from the three possible types of S-cuts: (a, {b, c}), (b, {a, c}), 
and (c, {a, b}), at least two must exist. First, consider the case with no (b, {a, c})-cuts. Thus, every 
S-cut is an (a, c)-cut. Therefore, the dag Da,c represents the whole family of (minimum) S-cuts. Let 
us study its structure related to b (see Fig.la). We denote by (Lb, ~b) the intersection of all s-cuts 
of type ({a, b}, c). Similarly, (R~, ~~) is the intersection of all a $.? x,,,; .. LbLb %\ . %., ,,.­ 
&#38; ,<Rb .. +s ... %. ,, ,, \ ,., at -* ..a ,., ,> ... T ,., ,,, ,, .. \ Fig. 1 ({b, c}, a)-cuts. 
observe that: (i) the contraction of Lb in Da, C implies Db, C; (ii) the contraction of Rb in Da, C implies 
Da, b; (iii) the subset Lb fl Rb is the unit con­taining b; (iv) there are no edges between Lb fl Rb 
and ~b fl ~b. The latter is a consequence of the following general statement, which can be proved by 
considering a maximal (s, t )-flow (see Fig. lb). Lemma 1. For any two distinct minimum (s, t)-cuts (X, 
X) and (Y, Y), (i)c(Xr7V, YnX)=O; (ii) c(XnY, XnY) = c(xn~, XnY), c(XfIY, XnY) = c(Xn Y,xn7). A dag whose 
all closed sets generate cuts of the same cardinality w is called a strzp (of width w); these cuts are 
called regular. It is easy to see that a strip has exactly one source and one sink, both of degree w, 
and every other vertex has equal numbers of incoming and out­coming arcs (an equivalent characterization). 
In partic­ular, dags of type D~ ,t are strips. Let us build a one-source one-sink dag D by delet­ing 
all the vertices of Lb n Rb and contracting Lb (I ./&#38; to the source a and ~b fl Rb to the sink c 
. (Informally, D is the common part of Da,b and Db,c in D., C.) An S-cut C of G that generates an (a, 
c)-cut C t in D C is called an ezt ension of c (more exactly, C must sepa­rate the tails of all edges 
going from Lb n &#38; to ~b n Rb and heads of all edges going from Lb II ~b to ~b n R6). Lemma 2. (i) 
D C a s a strip of width k < k/2. (ii) All its regular cuts, and only they, are expendable to s-cuts. 
(iii) A 2-partition of Lb U Rb enters either the exten­sions of all regular cuts of Da=, or no such extensions 
(informally: all regular cuts of Da are interchangeable in S-cuts]. Second, let all types of {a, b, c}-cuts 
exist in G. Let Cc = (V~, VC), z E {a, b, c}, be the S-cuts of type (V\ z, z) with Vc minimum among such 
cuts (Fig.2a). As usual, these three 2-partitions define the following eight subsets OfV: VO = V.nvbnVc;Va 
= ~afIvbnVc; vb=vanvb nvc;vc=vanvb nvc;vab=~. n~bnvc; Vbc = v.f)~bf)~c;v= Fig. 2 The following statement 
is crucial for the rest of our results (see Fig.2b). 3-Star Lemma. (i) V * = 0. (ii) Vertices of VXY 
can be adjacent only to vertices of V ~, Vz, VY; here z,g~ {a, b,c}, z # y. Proo~ Let us consider the 
cut CxY y = Cz II Cz = (V u V y, V\(Vr UVZy)), z,y, z E {a, b,c}, z# y# z. Since both C z, Cc are minimum 
(z, z)-cuts, the cut CXIX$ is a minimum (z, ,z)-cut as well and hence IC C!ZY Similarly, Cy xy = C , 
nc y = {vYuv Y vl(vy~v~y~j > is a minimum (y, z)-cut, hence ICYIZY I = k. Therefore, both C= Y and C 
Y y are minimum (z, y)-cuts. Accord­ing to Lemma l(i), there are no edges between VZY and V \ (V U VCY 
U VY ), so assertion (ii) is proved. We know already that there are no edges between V bc and V Y. By 
Lemma 1 (i) applied to the minimum (x, y)-cuts C. and Cy, we get that there are no edges between V Y 
U Vabc and V U Vg. So, there are no external edges incident to Vabc at all, Since the initial graph is 
connected, we thus get Vabc = 0. l Lemma 3. (i) The result of the contraction Of VOUV , in F{a, b,cl 
coincides with the dag DY,Z, up to orientation of edges, x,y, ,zG {a, b,c}, x # y # z. (ii) Every unit, 
except for VO, corresponds, in this way, to vertices of either two or three dags. (iii) For all dag verttces 
corresponding to a unit U # VO, the unordered 2-partitions of the set of edges incident to U induced 
by the partition of arcs into in­commg and outcomtng cotnctde. Let us consider the triple: ~{., b)c}, 
the aforemen­tioned 8-partition of V, and the set of 2-partitions de­scribed in Lemma 3(iii). It turns 
out that all the dags Dp,g, p, q E {a, b, c}, p # q, can be restored from this triple. To establish this 
fact, we need, besides Lemma 3, the following unusual characterization of directed graphs. Recall that 
the star of a vertex is the set of edges (arcs) incident to this vertex. Lemma 4. For a weakly connected 
dzgraph, the orien­tations of arcs are restored canonically, up to the global reversal, from the underlying 
undirected graph and the unordered 2-partitions of all vertex stars to edges that underlie incoming and 
outcomtng arcs. One can say, thus, that these dags DP,q can be glued into the above aggregate structure 
because they coincide on intersections . It is interesting that the considered triple, implied canonically 
by an undirected graph, provides canonically the oriented related struc­tures, but cannot be canonically 
oriented itself. Such locally orientable structures, to the best of our knowl­edge, have not been studied 
in graph theory before. Similarly to the first case (see Lemma 2), one can build, on the base of D.,C, 
a one-source one-sink dag ll~~c by deleting all the vertices of VO, V= , Vc, Vbc and contracting V to 
the source and Vb to the sink. By Lemmas 3,4, the dag Dab, independently of the choice of a basic dag, 
is well defined and can be restored from the aforementioned triple. (Informally, this dag is a common 
part of all dags Dp,g, up to inversion.) We define similarly all dags DXY, z, y E {a, b, c}, z # y, where 
DYX is the inverse of DXY. Extensions to S-cuts are defined in the same way as in the first case. Lemma 
5. (i) Dags D Y are strvps of wtdth k y < k/2. (ii) All their regular cuts, and only they, are extend­abie 
to S-cuts. (iii) Each pair: {a regular cut of DZY, a regular cut of ezther DZZ or DZY }, z # x, y, has 
a mutual eztension to a minimum (x, y)-cut. (iv) Informally: regular cuts of these stripes and thew pairs 
of the above type are interchangeable in S-cuts. Comparing the two cases considered, one can assign to 
the first of them the structure of the path (a, b, c), a b .. -..-, Ib. a : b / c a>% \ .: . Fig. 3 
and to the second, of the 3-star with terminals a, b, c (Fig.3a,b). The l-cuts of these structures correspond 
bijectively to distinct partitions of {a, b, c} by minimum {a, b, c}-cuts in the original graph. Remark. 
The following concept seems to be interest­ing. One can consider a strip as a general model of a two-terminal 
graph object of a constant width. Then, the aforementioned triple represents a three-terminal object 
of a constant width. 2.3. The system of units, or the flesh of the connect ivit y carcass. Let us consider 
an arbitrary bunch 1? of S-cuts, and let (SB, S~) be the correspond­ing partition of S. In fact, B is 
the set of all minimum (S~, s~)-cuts. Following [K,PQ], we can represent the structure of 1? by a dag 
(Fig.4d,e). (The reduction to [K,PQ] ~s done by the contraction of S~ to the source and of SD to the 
sink.) Lemma 6. For any B there exwts a unique dag DB = (VB, AB) and a mappmg 6~: V + VB such that the 
6B­inducing provides a bijection between the closed sets of DB and the S-cuts in t?. Let ~ be the bunch 
of cuts opposite to cuts in 2?. Evidently, D~ is obtained from DD by reversal of arcs. The dag_D~ has 
exactly two terminal vertices: C5fi(S~) and ti~ (SB ). The first of them is the single source of DB, 
which is the complement of a closed set in DB and corresponds to the cut in 1? that is the intersection 
of all cuts in 1?; this cut is called the tight cut of B. The second one is the single sink of DB and 
corresponds to a similar cut in ~; the opposite to this cut is called the loose cut of t?. A bunch f? 
is said to distinguish a unit of G if this U1 (that is, the set of all units reachable from U1 ) splits 
unit lies outside the tight cuts of S~ and S~. We say into two reachability cones. that a unit is stretched 
if it is distinguished by some bunch of S-cuts (Fig.4b). All the other units are said to be ierrninal(Fig.4b). 
Evidently, only terminal units (but, ingeneral, notallof them) intersect S. The quo­ tient graph F,s 
is said to be the flesh of the connectivity carcass of S (Fig .4b). The vertices of 7S are naturally 
called units. Observe that for a 2-element set S there exists only one pair of opposite bunches of S-cuts 
and the flesh FS is exactly the dag of Lemma 6, up to orientation. It has two terminal units, namely, 
the terminal units of the dag, while all the other units are stretched. Moreover, the following statement 
holds. Lemma 7. For any bunch t?, ihe graph obtained from Y s by contracting all the units inside the 
tight cut oft? and ail the units outside the loose cut of B is isomorphic to D~ up to orientation. Clearly, 
the images of all nonterminal vertices of D~ are stretched units of ZS. The star of any nonterminal vertex 
of DD is partitioned into the sets of incoming and outcoming arcs, and these sets have equal cardinality. 
Thus, for any stretched unit distinguished by B, the isomorphism of Lemma 7 halves the star of this unit. 
The crucial observation is that the arising 2-partition does not depend on the choice of B. Theorem 1. 
Let a stretched unit of Fs be distinguished by two distinct bunches B and B , Then the unordered partitions 
of its star induced from D~ and D~, coincide. The partition of the star of any stretched unit in­dicated 
in Theorem 1 is called inherent (Fig.4b). To the star of a terminal unit of 7,s we assign the trivial 
2-partition (i.e., one of its parts is empty). A path Uo, el, Ul, e2, ..., er, Ur in 3.s is said to be 
coherent if for any of its inner units Ui, 1 < i < r 1, the edges e~ and ez+l belong to distinct parts 
of the inherent partition of the star of Ui (Fig .4b). Clearly, the inverse of a coherent path and a 
single unit path are both coherent paths. Theorem 2. All coherent paths in 3.s are simple. Thus, the 
flesh can be considered, in a sense, as a generalization of a dag. (By the way, at early stages we called 
our structure branching dag . ) We say that a unit U2 is reachable from a unit U1 if there exists a coherent 
path from U1 to U2. It follows from Theorem 2 that for any two coherent paths joining U1 and U2, their 
initial edges belong to the same part of the inherent partition of the star of U1. Indeed, other­wise 
the inverse of the first path concatenated with the second one would be a coherent path with the initial 
and the terminal unit U2. Thus, the reachability set of 2.4. The system of bunches, or the skeleton of 
the connectivity y carcass. For the case S = V, the structure of all minimum S-cuts is represented by 
a cac­tus (see [DKL]). The construction is based on Crossing Lemma of [B, DKL]. A generalization of this 
lemma to S-cuts and the existence of a cactus representation of all 2-partitions of S by minimum S-cuts 
were stated independently in [N, W93]. Two S-cuts C and C are said to be S-crossing if all the four subsets 
SC n SCI, SC n SC,, SC n SC,, SC n SCI are nonvoid (Fig.5a), and S-parallel otherwise. An S­cut C is 
said to be separating if there are no cuts S­crossing with C. Following [DKL], we can represent the structure 
of all separating S-cuts by a tree (Fig.5b; see also Fig.4c). Lemma 8. For any S ~ V, there exist a unique 
tree 7s with the node set Jfs and a mapping ps : S + N,, such that ps -inducing provides a bijection 
between cuts of Ts and bunches of separating S-cuts. Thus, we have a bijection between edges of Ts and 
pairs of mutually opposite bunches of separating S-cuts. It is convenient to assign weight k to each 
edge of Ts, thus equalizing the cardinalities of S-cuts and cuts of Ts. Observe that the image ps (S) 
does not necessarily coincide with NS. The nodes N for which p; 1(N) = 0 are called empty nodes (Figs 
.4c,5b). It follows from the construction that the degree of each empty node is at least three. In order 
to get an insight into the structure of non­separating S-cuts, we state the following basic property 
of such cuts. S-Crossing Lemma. Let C and C be S-crossing min­imum S-cuts, then _(i) ~(w_n wJ,Vc n ~1) 
= C(VC n VCI,VC n Vcl) = C(VC nVc~, VcnVc/) = c(Vcn Vc/, Vcnvct) = k/2 (hence, for odd k all minimum 
S-cuts are sep_arat~ng); (ii) C(VC n Vc,, Vc n Vc)) = c(Vc n Vcfl, Vc n Vc)) = O, and hence the 2-partitions 
C n C , C n C , Cn t?, Cn C are minimum S-cuts as well. Following [DKL], the set of all nonseparating 
S-cuts falls into parts corresponding invectively to some empty nodes of T... Each such part induces 
a cyclic ordering of the star of the corresponding node N. A cycle CN appears instead of N: we insert 
a new node into each edge of the star, connect the inserted nodes in the in­duced order and delete the 
new star of N. Weights k/2 are assigned to cycle edges. The mapping ps remains the same, so all the newly 
inserted nodes are empty. Evidently, any two cycles of the graph obtained have no common edges; a graph 
possessing such a property is called a cactus (Fig .5c). It is clear that each cut of our cactus has 
cardinality k and is defined either by a tree-edge (a one not belonging to any cycle), or by a pair of 
cycle-edges lying on the same cycle. Observe that the cut defined by two adjacent cycle­edges Cl, C2 
E CN ps-induces the same bunch aa that defined by the tree-edge adjacent to both S1, &#38;z. We say that 
the pair (cl, C2) represents the subbunch of this bunch consisting of the cuts that are the intersec­tions 
of nonseparating cuts corresponding to CN. It is easy to see that this subbunch is closed under intersec­tions 
and unions. The intersect ion of all its cuts and their union belong to this subbunch and are called 
its tzght and loose cuts, respectively (evidently, one of them coincides with the cut of the same name 
for the whole bunch). If the bunch is covered by (at most two) its subbunches generated by pairs of adj 
scent cycle-edges, then the corresponding tree-edge is contracted. Oth­erwise, consider the set of remaining 
cuts and add to it the intersection and the union of all these cuts (the tight and loose cuts), if they 
do not belong to it. This set forms the subbunch represented by the tree-edge. The structure thus obtained 
is said to be the skeleton of the connectivity carcass of the set S and is denoted by ?fs (Figs .4c,5d). 
Its edges are called structural edges (to distinguish them from the edges of the graph G). Theorem 3. 
For any S ~ V, the skeleton H,s pos­sesses the following properties: (i) each bunch of minimum S-cuts 
is p~-induced by at most three cuts of Hs; (ii) each cut of Hs represents a subbunch of S­equivalent 
minimum S-cuts so that each S-cut is rep­resented uniquely, except for tight, and loose cuts of sub­bunches, 
which may be represented twice;  (iii) HS has 0(1S1) nodes and edges. Remark. Without being precise, 
we can say that the maximum object generating the three cuts mentioned in (i) consists of a tree-edge 
and two pairs of adj scent cycle-edges incident to distinct ends of this tree-edge. Other cases are obtained 
by contractions of this object, except for the case of two nonadj scent cycle-edges. Let &#38; be an 
arbitrary structural tree-edge, N be one of its endpoints. Consider the cut of Hs corresponding to &#38; 
and containing N inside. The intersection of all S-cuts of the subbunch represented by this cut of Hs 
is also an S-cut of this subbunch, This cut is said to be the N-tight cut in direction c (Fig.4a). For 
an ar­bitrary structural cycle-edge s and its endpoint N, the definition of the N-tight cut in direction 
&#38; is similar but slightly different. Namely, denote by t the cycle-edge incident to the other endpoint 
of c and change in the above definition e by the pair (e, e ) (Fig.5a). Besides, for any node N lying 
on a cycle C of the skeleton, we define the N-tight cut m dmection c. To do this, we change c by the 
cycle-edge c # &#38; incident to N and proceed exactly as in the previous definition. Let U be an arbitrary 
unit of the flesh 3S. We say that U is projected to an edge &#38; = (Nl, N2 ) of the skele­ton H,s if 
U lies outside the N1-tight and N2-tight cuts in direction &#38; (Fig,4b), A path in MS is an alternating 
sequence (No, s1, Nl, . . . . N.) such that Ni # Nj, i #j, and &#38;i is incident to Ni _1and Ni for 
1$: i < r 1. The opposite sequence (N., . . . . N1, S1, No) clefines the same path traversed in the 
opposite direction. A path is said to be proper if it intersects each cycle of the skeleton by at most 
one edge (Fig.5d). Evidently, there exists at most one proper path between any tiwo nodes of the skeleton. 
Theorem 4. (i) For any stretched unii U of the jlesh, the set of structural edges to which U is projected 
is nonempty and is the edge set of some proper path in the skeleton. (ii) For any terminal unit U of 
the ,flesh, the set of structural edges to which U is projected is empty, and there exists a unique node 
NW of the skeleton such that U belongs to all Nu-tight cuts. Thus, the projection mapping xs is defined, 
assign­ing to the unit U the proper path of Theorem 4 (ob­serve that a single node is itself a pro,per 
path); the endpoints of this path are called the coordinates of U in fis (Figs.4b)5d). It is easy to 
see tlhat the projec­tions of distinct terminal units are distinct, and hence rs provides an injection 
of the set of terminal units into the set of nodes of XS. Consider an arbitrary proper path P with the 
end­points NI, N2. We say that a node N3 belongs to the visibility set of P in direction N2 if there 
exists a proper path from N1 to N3 containing the whole P as an initial part, (So, intermediate nodes 
of P are not visible from P). Lemma 9. Let U be an arbitrary stretched unit of Fs. The projections of 
all terminal units belonging to the same reachability cone of U form a nonernpty subset of one of the 
visibility sets of m.s(U). Similar projections for the other reachability cone belong to the other visi­bility 
set. since each reachability cone contains at least one ter­minal unit, there arises a natural correspondence 
be­tween the reachability cones of a stretched unit and the coordinates of this unit. This correspondence 
between cones and visibility sets allows us to mark cones (and thus the parts of the inher­ent partition) 
by coordinates. Namely, the reachabdity cone of U in the direction of its coordinate N is the cone that 
corresponds to the visibility set of ~,s (U) in direction N; it is denoted by 7i?~ (U). Theorem 5. Let 
U, U be two stretched unds of F,s with the coordinates N1, N2 and N;, N;, respectively. Let U be reachable 
from U in direction Nz and U be reachable from U1 in direction N;. Then there exists a proper path from 
N1 to N; containing ~5(U) as an initial part and T,s(U ) as a final part. 2.5. Several explicit constructions. 
Here we pro­vide an explicit description for several important ob­jects in terms of projections and reachability 
y cones. Let us consider a cut of the skeleton ?i,s defined by a structural tree-edge or a pair of cycle-edges. 
It repre­sents a subbunch B of a bunch B, f? ~ B. If we delete this edge (edges) from the skeleton, it 
falls into two connecte~ parts MS (B ) and ~s (1? ) containing ps(SB) and ps (SB ), respectively. Proposition 
1. The set of vertices lying inside the tight (resp. out.wde the loose) cut of B is the union of ali 
units U of XS such that m,s(U) ~ Hs(B ) (resp. 7rs(U) g %( B )). Assume now that we are interested in 
pointing out an S-cut separating two given vertices of G that lie in distinct units U1 and U2. Proposition 
2. (i) Let ms(U1) and Ts(U2) be distinct nodes of ?-is. Consider any cut of Hs separating them, and let 
B be any of the two corresponding subbunches. Then the tight and the loose cuts of B separate U1 from 
.. U2. (ii) Let one of the projections, say, ms(U1), contain a structural edge (Ml, N1), and let M, N 
be the coordi­nates of U1 in the corresponding order. Assume w.1. e.g. that U2 @ 77,~(U) (otherwise U2 
$! 7?~(U)). Then the union of %?N(U) and the inner vertices of the N1-tight cut in direction (Ml, N1 
) is the set of inner vertices of an S-cut separating Ul from Uz. Finally, let us consider two vertices 
in S that lie in distinct units U1 and U2 and describe the contraction of 3S that produces the dag representation 
D(U1, U2) of all minimum S-cuts separating these vertices (Fig. If). The projections of U1 and U2 are 
distinct nodes NI and N2 of %s. Evidently, there exist a unique path­of-edges-and-cycles P(N1, N2 ) connecting 
N1 and N2. Each node in P(N1, N2) is incident to one or two ele­ments of the path: structural tree-edges 
or cycles. As­sume for convenience that P(N1, N2) is oriented from N1 to N2. Proposition 3. (i) The Jag 
D(UI, U2), up to orien­tation, is obtained from Fs by contractions of subsets of units. Each such subset 
corresponds to a node N in P(N1, N2) and is equal to the intersection of N-tight cuts in directions of 
all the elements of P(N1, N2) inci­dent to N. (ii) An edge between two contracted subsets is ori­ented 
according to the order of the pair of the corre­sponding nodes in P(N1, N2). Any unit U that do not belong 
to the contracted subsets is stretched, and its pro­ jection has at least one edge in common with P(N1, 
N2). The orientation of any such edge in P(N1, N2) irnphes the choice of an endpoint of the projection 
and so of a part of the inherent partition of the star of U. Edges tn this part are oriented from U, 
while those in the other to u. 3. THE INCREMENTAL TRANSFORMATION OF THE CONNECTIVITY CARCASS 3.1. Preliminaries. 
In this section we describe the transformations of all the four components of the con­nectivity carcass 
caused by insertion into G a new edge (ul, U2) that preserves the value of k. In what follows U1 and 
U2 stand for the units containing U1 and U2, respec­tively. If U1 = U2, then the carcass does not change. 
In what follows we assume that U1 # U2. If the projec­tions PI = m.s(U1 ) and P2 = 7rs(U2) do not intersect, 
we define their link as the unique path-of-edges-and-cycles connecting P1 and P2 (Fig.5e). The proper 
part of the link consists of both its endpoints, all its articulation nodes and all structural edges 
joining nodes from this set (Fig .5e). 3.2. Basic Case 1: both U1 and U2 are terminal units. In this 
case the transformation of the skeleton is similar to the transformation of the ordinary cactus structure 
described in [GI, D, W93] (Fig .4g,ij), Theorem 6. Let both U1 and U2 be terminal units, then the transformation 
of the connectivity carcass con­sists in the following. (i) The proper part LP of the link of PI and 
P2 is contracted to a single new node. (ii) All the units whose projections lie in LP are con­tracted 
to a single new unit.  (iii) In the projection of any noncontracted unit, the intersection with LP is 
contracted. The projection of the new unit is the new node. (iv) The inherent 2-partitions for noncontracted 
 units remain the same. The inherent 2-partition for the new unit is trivial. 3.3. Basic Case 2: PI n 
P2 contains at least one structural edge (Fig.4g,h). It is easy to see that P1 n P2 is a proper path. 
Let us denote its endpoints by M and N. Upon deleting PI n Pz from PI U P2, except for ill and N, we 
get two connected components. Let us denote by Ml and M2 the coordinates of U1 and U2, respectively, 
cent ained in the same component with M; the remaining coordinates are denoted by NI, N2. Theorem 7. 
Let P1 n P2 cent ain at least one structural edge, then the transformation of the connectivity y carcass 
consists in the following. (i) The skeleton remains the same. (ii) The unzts U1, U2, and all the units 
lying on coher­ent paths between U1 and U2 are contracted to a single new unit. (iii) The projections 
of units not reachable from Ul or Uz remain the same. For each unit U G 7?~, (U1), the common part of 
rs(U) and the path between Ml and M is deleted from TS(U]; the same holds for the cones %?&#38;j, (Ul), 
%?jV, (Uz), ~M, (Us). The projection of the new unit is Pl II P2. (iv) The inherent 2-partitions for 
noncontracted units remain the same. The tnherent 2-partition for the new unit is glued from those for 
contracted units. Namely, the part of the star of U1 marked by N1 (resp. Ml) is glued with that for Uz 
marked by Na (resp. Ma). For other units, two parts are glued together if the cor­responding reachability 
cones contain the same unit out of U1 and U2. 3.4. Other cases. Case A: Uz is a terminal unit, and P2 
is a node of PI (Fig .4m,n). This case is similar to Basic Case 2, but even simpler. Namely, an analog 
of Theorem 7 holds with the following changes: in (ii) there are no coherent paths between U1 and U2; 
in (iii), only cones XNI (Ul ) and RMI (UI ) are involved, where Ml and NI are the endpoints of P1 in 
arbitrary order; in (iv), the inherent 2-partition for the new unit is trivial. Case B: PI n P2 does 
not contain any edges (Figs .4k,l,n,5e,f). The transformation in this case co­incides with the sequence 
of transformations caused by insertion of the three virtual edges: (UI, WI), (WI, W2), (Wz, U2), where 
WI, W2 are the corresponding end­points of the link of P1 and P2. (If the link terminates by a cycle 
having an edge in common with P1 (or Pa), such an endpoint is not defined yet. In this case a new empty 
node is inserted into the skeleton, which breaks this edge into two new edges. This new node is said 
to be the corresponding endpoint of the link.) The 1st and the 3rd transformations are covered by Case 
A, the 2nd one is covered by Basic Case 1. 4. THE INCREMENTAL MAINTENANCE OF THE CONNECTIVITY CARCASS 
Let n be the number of vertices in the initial graph G, nt < n be the initial number of flesh units, 
m) = O(kn ) be the initial number of flesh edges, u be the number of updates (edge insertions), q be 
the number of queries Are given two vertices of G (k + 1)-connected? . In order to maintain the connectivity 
carcass effi­ciently, we propose to keep track of the flesh, the skele­ton, the projections (in fact, 
the coordinates), and, instead of inherent 2-partitions for stretched units, a richer structure: reachability 
y cones. Following [1], we represent a reachability cone of a unit by a directed spanning tree rooted 
at this unit and make use of the n x n reachability matrix. When a new edge is inserted, it ti)kes O(a(u, 
n )) amortized time (via the standard union-find method) to locate the units containing its endpoints. 
Distin­ guishing between cases listed in the previous section and keeping track of the skeleton requires 
finding links between pairs of projections and contracting the proper parts of the links. The former 
can be achieved in O(1) amortized time and the latter in O(a(u, n )) amortized time per insertion by 
means of the nearest common an­cestor (NCA) technique [W92, W93]. Keeping track of the flesh requires 
contracting of the units whose projections lie in the proper parts of the links (Basic Case 1) and of 
the units lying in the inter­sections of the opposite reachability cones (Basic Case 2). We find the 
former units as a byprclduct of updat­ing the projections. To find the latter uriits, we execute DFS 
in the spanning tree of one of the cones and back­track each time when we leave the other cone. It takes 
O(1) amortized time plus O(k) worst-case time per in­sertion (since all the edges leaving the second 
cone are defined by the same S-cut). The contractions them­selves require 0(1 ) amortized time per insertion. 
The main problem when keeping track of projections is the analysis of the relative position of two proper 
paths given. It is done by means of N(3A techniques as a$ove. To find units whose projections are to 
be changed, we execute DFS in the spanning tree of each of the four cones involved and backtrack each 
time when we reach a unit whose projection lies sufficiently far. For the same reason as above, such 
a situation occurs at most k times for each cone. Again, we spend O(1) amortized time plus O(k) worst-case 
time per insertion. To keep track of reachability cones we extend to the flesh the techniques introduced 
in [1] for dags preserving the O(n rn ) complexity (the same as of [PL]) for an arbitrary sequence of 
edge insertions. To find whether two vertices of G are separated by a minimum S-cut, it suffices to find 
the correspond­ing units (in O(a(q, n )) amortized time) and to check whether they do not coincide. If 
it is the case, the par­tition of S corresponding to such a cut can be obtained via Propositions 1, 2. 
Finding a cut separating two given nodes of the skeleton, finding an edge of a projec­tion, and verifying 
the inclusion in Proposition 1 for a given unit takes O(1) amortized time (with the help of NCA techniques). 
To obtain the dag D(U1, U2) of Proposition 3, we check for each unit U whether its projection intersects 
the path P(N1, N2) by an edge. If it is not the case, a few NCA queries give us the endpoint N 6 P(N1, 
Nz) of the link of P(N1, Nz) and Ts(U). The unit U belongs to the contracted subset corresponding to 
N. To obtain the orientation, it suffices to execute DFS by coherent paths from any terminal node of 
the dag. c j M NC  h i().) Uo n k Fig. 4 00 3+%7 N N c N4 .-..N2 N, .., : ,.:. N3 m-,- <:., - ---... 
 $$ : .$ ...... . ,.. N  + +-e Fig. 5 724 Theorem 8. (i) The connectivity carcass of an arbt­traryuertex 
subset S can be constructeda n 1S[ 1 max­flow computations in G. (ii) It can be maintained in O(n m + 
ua(u, n )) time for an arbitrary sequence of u edge insertions preserving the value ofk, (iii) Queries 
asking whetheriwo vertices are sepa­rated by an S-cut can be answered in O(a(q, n )) amor­tized time. 
Such a cut itself can be shown in O(n) amor­tized time. (iv) The dag representation of all minimum S-cuts 
separating two given vertices of S can be obtained in O(m ) amortized time. 5. EXAMPLES Let us consider 
the graph of Fig.4a; large circles de­note vertices of S, thus )c=4. Observe that the cuts Cl an C2 are 
not S-crossing. All the units are single­tons, except for encircled by dotted lines. The flesh appears 
in Fig.4b. Large and small circles denote ter­minal units intersecting (not intersecting) S; rectan­gles 
denote stretched units and show the inherent par­titions. The edges el, ez, and ea form a coherent path. 
The white circle in the skeleton (Fig.4c) stands for the empty node. The S-equivalent cuts C3 and Cd 
are the N-and Ns-tight cuts in direction (N, N3). The unit UZ is projected to the edges (NI, N) and (N, 
N3), U1 to the edge (N, N3), and U only to the node N. Fig­ures 4d,4e show the dags of the bunches represented 
by the structural edges (N, N1 ) and (N, N3), respectively. Figure 4f shows the (u , u )-dag. When the 
edge (VI, V-Z) is inserted, the only change is the contraction of the corresponding units (see Fig.4g). 
The insertion of (VZ, v3) implies the flesh shown in Fig.4h. Both this cases are covered by Basic Case 
2. Basic Case 1 arises when (u , u ) is inserted. The new flesh and skeleton appear in Figs. 4i,4j. The 
path be­tween IVz and N3 is contracted to NO. All the units in the lower part of Fig.4g are contracted 
to the new unit UO, since their projections lie in this path. C= B is illustrated by Fig.4k (see Fig.41 
for the projections PI, P2). The transformation is reduced to the two in­sertions shown in Fig.4m (Case 
A both). The unit U1 containing U1 is contracted to the new unit ~ as a part of a contracted coherent 
path. The resulting flesh is shown in Fig.4n, For the graph of Fig.5a, all vertices, except for u and 
U1, are in S, so all the units are singletons, and k = 4. Here we find S-crossing cuts, e.g., Cl and 
C2, hence the skeleton contains cycles. The tree 7s inducing bunches of separating cuts is presented 
in Fig .5b. The insertion of cycles in place of empty nodes results in the cactus of Fig.5c. Observe 
that the three cuts shown induce the same bunch. All the tree-edges must be contracted, and we get the 
skeleton (see Fig.5d). The cuts C and C are N-and N -tight in direction (N, N ), and so the unit U corresponding 
to u is projected to (N, N ). The whole projection of U is the proper path between N and Nit. Let us 
insert the edge (ul, U2). The projection of U1 is the edge (N3, N4) with its endpoints, that of U2 is 
the node N2 (see Fig.5e). We get Case B with the link consisting of both cycles and the articulation 
point N. One of the endpoints is Nz, and the other is missing. So edge (Ns, NA) breaks by a virtual node 
N1. Now the proper part of the link consists of the nodes N, N1, N2 and the edge (N, N2). Its contraction 
leads to the skeleton shown in the Fig.5f. The new unit UO consists of U1 and U2. REFERENCES [B] 13ixby, 
R..I3., The minimum number of edges and vevtzces in a graph with edge connectivity n and m n-bonds, Net­works 
5 (1975), 253 298. [DKL] Dinic, E. A., Karzanov, A. V., and Lomonosov, M. V., On the structure of the 
system of minimum edge cuts in a gs-ap h, Studies in Discrete Optimization, A. A. Fridman (Ed.), Nauka, 
Moscow, 1976, pp. 290-306, (in Russian, for a review in English see [NGM]). [D] Dinitz, Ye., Maintaining 
the d-edge-connected components oj a graph on-/in e, Proc. 2nd Israel Symp. Theory of Com­puting and 
Systems (ISTCS93), IEEE Comp. Soc. Press, 1993, pp. 88 97. [Gil Grdil, Z. and Italiano, G. F., Maintaining 
the %edge­connected components o.f a graph on-line, SIAM J. Com­put. 22 (1993), 11 28. [GH] Gomory, R. 
E., Hu, T. C., hIulty-tes-minal nctwoTk 170ws, SIAM J. Appl.Math. 9 (1961), 551 560. [GN] Gusfield, D. 
and Naor, D., Extracting maximal infos-ma­tion about sets of minimum cuts, Algorithmic 10 (1993), 64 
89. Italiano, G. F., Amortized eflciency oj a path retrieval data stmctuTe, Theor. Comp. Sci. 48 (1986), 
273-281. ~~ Karzanov, A. V., Private communication (1977). Naor, D., Private communication (1991). iN-GMl 
Naor, D., GusfieM, D., and Martel, C., A fast algorithm for optimally increasing the edge-connectivity, 
Proc. 31st Annual Symp. on Foundations of Computer Science, 1990, pp. 698 707. [PL] Picard, J.C. and 
Leeuwen, J. van, Maintenance oj tran­sitive closuTe and transitive veduct~on of gTaphs, Proc. Workshop 
on Graph-Theoretics Concepts in Computer Science, Lecture Notes in Computer Science,, vol. 314, Springer-Verlag, 
Berlin, 1988, pp. 106-120. [PQ] Picard, J.C. and Queyranne, M., On the stswcture of all minimum cuts 
in a network and applications, Math. Pro­gr amrning Study 13 (1980), 8-16. [W92] Westbrook, J., Fast 
incremental planarity testing, Proc. ht. Symp. on Automata, Languages and Programming (ICALP 92), Lect. 
Notes Comp. Sci., Springer-Verlag, NY, 1992. [W93] Westbrook, J., Incremental algorithms jar four-edge 
con­n ectitiit y., The abstract of the lecture to be held at the CS seminar of Bell Labs on March 10, 
1993. [WT] Westbrook, J. and Tarjan, R. E., Maintaining bridge­connected and biconnected components on-line, 
Algorith­rnica 7 (1992), 433 464. [q  
			