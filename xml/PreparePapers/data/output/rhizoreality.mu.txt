
 rhizoreality.mu Christian Babski christian@fabric.ch Alternet Fabric Rue Langallerie, 6 CH-1015 Lausanne 
www.fabric.ch Patrick Keller patrick@fabric.ch Alternet Fabric Rue Langallerie, 6 CH-1015 Lausanne www.fabric.ch 
 Abstract Major multi-user systems based on VRML are mainly used to set up virtual communities on the 
Web. The ability of these systems to take in account the reality as an input or output is non-existent. 
They are restricted to the Web. We propose a more generic architecture that permits to set up 3D shared 
environments (by using VRML or not) but also to interact with reality (extension of the Web to the real 
world). Our multi-user system is a part of a larger mechanism that allows to inter-connect different 
type of servers in order to share more vast set of data than only 3D or text. We are going to present 
our multi-user system and its concept. We will also demonstrate its ability to face a large set of various 
tasks. This will be illustrated through real applications (artistic, conceptual or commercial). CR Categories 
and Subject Descriptors: I.3.2 [Graphics Systems]: Distributed network/graphics, C.2.4 [Distributed 
Systems]: Client/Server, C.2.2 [Networks Protocols]: Applications. Keywords: Multi-user, shared virtual 
worlds, VRML, Java, scalable system.  1 INTRODUCTION In this paper, we will present a multi-user system 
named rhizoreality.mu that is based on client-server architecture with inter-server communication capabilities. 
The particularity of our system resides in its capability to be adapted to a very large set of duties. 
It can be used in a classical 3D chat application on the Web as well as in live music show performances. 
We will underline the scalability of our system that can be connected to a SMS server (cellular phone 
short message system) as well as to a Sound server. These capabilities will be illustrated with real 
performances that were realized during year 1999 and 2000. Our work was guided by the set up of a very 
general-purpose system. Its application to multi-user 3D worlds is only a subset of the system capabilities. 
We will see that even by considering this subset of applications, it is already possible to use this 
system in a very large set of heterogeneous duties. Permission to make digital or hard copies of part 
or all of this work or personal or classroom use is granted without fee provided that copies are not 
made or distributed for profit or commercial advantage and that copies bear this notice and the full 
citation on the first page. To copy otherwise, to republish, to post on servers, or to redistribute to 
lists, requires prior specific permission and/or a fee. WEB3D '2001, Paderbon, Germany &#38;#169; ACM 
2001 1-58113-339-1/01/01 ...$5.00 In its current state, rhizoreality.mu server has the potential to communicate 
with other servers (i.e. we now have servers such as a cellular phone-SMS server, a Lego Mindstorms server, 
and a Sound server) and to potentially have any kind of clients. For that reason, we plan to make out 
of rhizoreality.mu a truly interactive and integrative multi-user system in the future. It will become 
a powerful mixed-media, real-virtual, and communication multiÂ­user system.  2 CONCEPT 2.1 Definition 
rhizoreality.mu: rhizo for rhizomic, .mu for multi-user. In other words, rhizomic realities in multi-user 
mode: realities that elaborate and inform themselves or each other that develop, extend and/or fold up. 
But also hybrid, mixed, in multi-user mode networked realities: single realities, multiple reality or 
plural reality. A paradoxical, re-qualified and recombinant space. 2.2 Approach and concepts rhizoreality.mu 
is today a multi-user system directed towards live performances, interaction, real-virtual mixture/integration 
and installation performance. rhizoreality.mu is a technology resulting from a particular development 
specific to Alternet Fabric. It is a work in progress that first deals with aesthetic, philosophical, 
technological and conceptual considerations: a life-science art. It is only after two or three steps 
of development, when the project has acquired a certain level of maturity, that it is facing a market 
logic (commercial exploitation). What was more an aesthetic and technological experimentation becomes 
a commercial product or a service. Nevertheless, it preserves the specific marks of its development process. 
In this sense and considering our technological developments, we speak easily about 'concept-ware' or 
'art-ware' due to the way we are producing it. We consider our applications in the same way we consider 
our contents: it must bring meaning and it must innovate (technically and/or conceptually, in their ways 
of approaching the technology development). 2.3 Development, phases 1 &#38; 2 (1999-2000) rhizoreality.mu 
is the result of a working process that intends to launch experimental approaches and projects at the 
technological level as well as at the aesthetic level. In order to answer to or to create other needs 
in setting the work initially with the less possible external constraints and then make the technology 
evolve on its own conceptual bases, thanks also to the projects it arouses and the problems it meets. 
An almost 'neo-Darwinian' development process, which drives it to unexpected results and states. The 
generic idea that subtends our working process is to define conditions that make the unexpected use of 
digital technology possible. At the same time, we are also trying to find new ways of using electronic 
media under new paradigms. This experimental approach is considered for each project. It gives birth 
to aesthetic and/or technological prototypes. Some die out, others find a commercial or a conceptual 
existence. rhizoreality.mu is close to finding both: it will probably disappear as a product, but will 
evolve into a new one (phase 3) or be part of a new one, more complex and that is already named NeuroSystem 
will be the next state of rhizoreality.mu. At this stage, the process and the experimentation will probably 
have become a product.  3 THE RHIZOREALITY.MU SYSTEM 3.1 General architecture The rhizoreality.mu system 
is based on a client-server architecture with local inter-servers communication and remote servers communication 
capabilities. The system is fully written in JAVA 1.1 making possible to run servers under any kind of 
operating system and machine (Windows, Linux, IRIX - PC, SGI, SUN). Functionalities we are presenting 
have to be seen as a particular use of the entire system. The system is able to receive information from 
lots of different sources: it includes dedicated servers that are producing and making available a particular 
information (such as a Sound server for example, delivering information on live music) but also particular 
devices such as movement or light detectors. In the same way, behaviours within rhizoreality.mu clients 
are not confined to the display of 3D worlds. A client can control a set of lights in order to produce 
a particular atmosphere in a room, or in order to deliver a real-time generated video used for modifying 
the real world perception (Figure 1). Inputs Outputs Projection Remote Lights Robots ... 3D Worlds 
Web Figure 1: An image of what could be a full rhizoreality.mu system 3.1.1 Servers organisation The 
system includes a server for shared 3D worlds (with 2D or 3D clients) as well as a server for chat. Both 
systems are completely independent. We can combine them at the main server level. It is possible to run 
only one 3D server as well as two Chat servers plus a 3D server on the same computer (Figure 2). Servers 
(Chat or 3D) running on the same computer can communicate with each other. For example, a request emitted 
by a chat client can be transmitted to a 3D client and reversed. To ensure such a purpose locally, all 
servers, whatever their types, are launched by the same object. This object is in charge of the general 
inter-servers communication. We will see later, that it is also used for remote administration purpose 
(see section 3.4). Computer Host Computer Host Configuration Configuration File File rhizoreality Servers 
Framework rhizoreality Servers Framework 3D server Chat server Chat server Figure 2: Two examples of 
main server configuration In addition to this local inter-servers communication, it is also possible 
to establish a communication between rhizoreality.mu frameworks. This communication is configured by 
declaring gates. Each gate corresponds to a server running in a particular rhizoreality.mu framework. 
The way a gate is activated depends on the type of server it is associated to. If it concerns a chat 
server, the use of a particular word can initiate the gate. In this case, the client is disconnected 
from the current server and is connected to the new server, associated to the gate. In 3D, the gate could 
be a volume standing in place of a door in order to inter-connect two 3D worlds for example. In addition 
to providing the ability of managing high number of simultaneous connections, it also allows to define 
a particular behaviour of the system. 3.1.2 Clients We have defined three types of clients for the rhizoreality.mu 
system. We have a classical 3D client using a VRML plug-in for visualisation. We have also defined a 
2D client and an experimental Shout3D client (Figure 3). All these clients are java applets that are 
running within a Web browser. It is possible to write any kind of client, even a stand-alone application 
(outside a Web context).  3D View Shout3D viewer Java applet rhizoreality clientrhizoreality client 
(3D+chat for example)(2D+chat for example)  Figure 3: from left to right, a normal VRML based rhizoreality.mu 
client, a 2D rhizoreality.mu client, and a Shout3D based rhizoreality.mu client and a stand-alone client 
Each set of these three objects adapted to a particular visualisation system is included in the rhizoreality.mu 
library. All existing clients are based on this kernel of java objects that constitute the basic library 
needed to write a rhizoreality.mu compliant client. Depending on the type of purpose the rhizoreality.mu 
system is dedicated to, we write a new specific client. A simple chat client, a 3D client or both combined 
in the same program can constitute a rhizoreality.mu client. There is no need to rewrite or modify a 
part of the rhizoreality.mu system to fulfil some specific needs for a customer. The only part of a client 
that needs to be developed for each new customer is the graphical lay-out. This enables anybody to very 
easily write their own rhizoreality.mu client. It is also possible to run several rhizoreality.mu clients 
independently from each other (distinct applets, see section 4.2). According to included functionalities, 
a rhizoreality.mu client package will be more or less heavy to download. The modularity of the entire 
system permits to include in the client package only what is effectively needed. Examples of weight are 
given in Table 1 for a client including a 3D or 2D graphical visualisation combined with a chat. It is 
important to notice that for the VRML client and the Shout3D client, the size of each viewer (VRML plug-in 
and the Shout3D JAVA package) has to be added to the specified size. VRML based 2D based Shout3D client 
client based client Size 84 Kb 62 Kb 76Kb Viewer Size From ~1Mb to 4Mb - ~170Kb Table 1: rhizoreality.mu 
clients weight according to visualisation (applets containing a 3D or 2D visualisation plus a chat) 
As both 3D and 2D client can be connected simultaneously to the same shared world, the rhizoreality.mu 
system ensures a spatial matching. The existing 2D client proposes a set of snapshots of the 3D world. 
For each snapshot, we associate a volume corresponding to the area shown. It allows the 2D client to 
emit and receive 3D locations of users. It means that a 2D client moving around will be seen moving in 
the corresponding 3D area. In the other way, a moving 3D client will be seen in 2D only on the corresponding 
background (Figure 4). The 2D dimension of a room in the 2D client is mapped to the floor dimension of 
the corresponding area in 3D. 3.1.3 Client-server communication Messages used for client-server communication 
are not linked to the VRML syntax. This choice can be justified by the fact that we do not only use a 
VRML client. As described in the previous section, we also have a 2D client and an experimental Shout3D 
client. By restricting the VRML dependency to the client level, the rhizoreality.mu system can use any 
kind of 3D language or graphics library for defining a new client. The entire system stays open to new 
emerging standard such as X3D [7] or MPEG4 [8]. All messages inherit a set of parameters from an initial 
message object. Each message can then define its own additional parameters. Each message is in charge 
of sending and receiving its data through a given network link. When implemented, a compression function 
can be used before sending a message. This compression function is defined in every message, giving the 
ability to precisely adapt the compression method to the type of data to transmit. The current version 
of rhizoreality.mu system includes a set of 37 different messages. As some of them have a very specific 
task, only a subset of them needs to be included in a rhizoreality.mu client. In fact, only needed messages 
have to be included, according to the kind of functionalities available in the client. This gives the 
ability to adapt very precisely a rhizoreality.mu client to the kind of use it is dedicated to (see section 
4 for examples of application).  3.2 Situation With rhizoreality.mu, we have tried to remain as generic 
as possible by restricting the VRML dependency at the client level but not at the message or server level 
like it could have been done in VNet [1] or DeepMatrix [2] for example. Doing so gives us the ability 
to connect to our multi-user system from a Web page using a VRML plug-in [5] [6], but it is also possible 
to write a complete stand-alone application based on another modelling language than VRML or a Shout3D 
client for example. In terms of functionalities and development, we can roughly locate our rhizoreality.mu 
multi-users system in-between professional systems like Blaxxun [5] and Cortona [6] and open source systems 
like VNet and DeepMatrix. What is completely different in comparison to these systems is that rhizoreality.mu 
system does not use VRML as a way to transmit or defined shared events. As explained in the following 
sections, shared events are defined in a particular set of configuration files at servers level. These 
settings can be used in conjunction with VRML as well as any other 3D languages. Because the system is 
able to connect to different kind of viewers, the VRML dependency has to be shifted at the client level. 
rhizoreality.mu has the ability to generate events and not only forwarding those produced by a client 
to all others. For example, the system can evolve according to the number of connected people. This kind 
of decision will be taken at the server level and will modify all concerned clients. This choice also 
avoids some security problems. By defining events routing in the 3D world file, it is possible for an 
end-user to edit this file, modifying routing statements and connect to the multi-user system again. 
This can eventually generates problems for all connected users. By confining this kind of settings at 
the server level, it minimizes this kind of risks. From a designer point of view, it means that the set 
up of shared world needs designers to learn the particular language used in our configuration files. 
This should not be more complicated than learning how other systems are defining their own VRML prototypes 
for shared events definition [9] [10] [11]. Even if it is using the VRML grammar, the way it is used 
within the multi-user system is not always that obvious to understand. 3.3 Protocols In the current 
version, all the communication is performed by using a TCP/IP link between the client and a server. The 
establishment of a connection between a new user and the server is initiated by a sequence of messages. 
This sequence is following a very classical protocol [12]. Once the network connection is established, 
the new client is receiving a signature for each already connected clients. This signature can contain 
the description of a graphical representation (avatar, embodiment) as well as some other information 
(current location, e-mail address, etc ). The content of the signature can vary depending on the kind 
of server the user is connecting to (Chat, 3D world, etc ). Then the new user will send its own signature 
to the server. As failures can also happen during the connection phase, the new client is officially 
declared to already connected clients once the initial set of messages are effectively all sent and received 
(acknowledgements and time out system). To avoid classical bottleneck within a client-server architecture, 
the inter-servers communication ability gives the system the possibility to deal with a large number 
of users. A world can be divided in a set of distinct zones (also commonly referenced as cells) ( Area 
Of Interest AOI in [13], Spatial Models of Interaction in [14] or RING cells inter-visibility in [15]), 
each zone managed by a particular independent 3D server. From the end-user point of view, this system 
is completely transparent. A user can switch from one server to another while navigating in the 3D world. 
The switch will be dealt between the two 3D servers automatically. As it can be decided to have the entire 
world in one file, the switch from one server to another does not mean obligatory the load of a new set 
of 3D objects (part of the entire world). This choice is mainly linked to the weight of the entire world. 
Because of the context of use of our system, the detection of dead connections is very important. Based 
on the kind of application we are facing now (see section 4.2 and 4.3), it concerns mainly users that 
are not familiar with network applications and 3D. They are generally accessing our system through a 
phone line, using a modem. It is not rare to receive several connection requests from the same machine/client 
within only few minutes. This was generating an important set of dead avatars in the 3D world as well 
as world inconsistencies and communication problems. First we have integrated the connection protocol 
described previously. Secondly, we have integrated in our servers a system of ghost detection. This system 
is based on a precise observation of the state of the network between a client and a server (the server 
is trying to determine as soon as possible that a client is having network problems). This survey is 
possible as long as there is an activity on the network (activity in the shared world). In our context, 
a client without any activity (no messages sent) is not considered as dead. The server in charge of the 
inactive user is able to decide to probe if the client is still alive (may be browsing the WEB for a 
while) or effectively dead. Whatever the situation (an effectively dead network connection or an inactive 
client that crashed, etc ), as soon as a client is detected as having problems, it is isolated from the 
entire system. No more messages are sent to it: they are buffered. During a given amount of time (parameter), 
the client will be tested regularly. If the client appears again as valid in term of network connection, 
it will be inserted in the system again, all buffered messages are then sent to it. On the contrary, 
if the client appears to be effectively dead, it will be completely removed from the system. These two 
levels in the ghost detection system avoid disconnecting people too fast. We have tested and used the 
system on dedicated high-speed network lines, as well as through a normal modem (phone line). Some of 
our real-time performances (see section 6) were realised by using V90 modem. It permits to validate the 
protocol within a context that corresponds to the one used by the major part of users of the system. 
 3.4 Remote administration client In order to ensure an easy and efficient maintenance of a multiÂ­user 
system, it would seem logical to set up a remote administration tool. Because the main server can be 
located anywhere, it is important to be able to modify the general settings of the main server as well 
as managing users in real-time. The remote administration functionalities can be divided in two main 
sections: A first set of functionalities that are specifically set up to maintain the system in real-time. 
In commercial usage, this typically includes management of users. It gives the ability to the owner of 
the system to exclude a given user or to communicate with another one. These set of functionalities are 
very close to those that can be found in a classical chat system such as IRC [20] for example.  A second 
set of functionalities modifying server s parameters. A subset of these functionalities may necessitate 
servers to be restarted. It provides an access to configuration files at the main server level. There 
are two main types of configuration files:  The first one defines the number of rhizoreality.mu servers 
running on the web server host and their parameters. The remote administrator downloads the configuration 
file, and can then edit it within the remote administration client graphical user interface (GUI). Once 
updates are performed (it could be the modification of a connection port or the addition of a new Chat 
server, for example), the administrator can upload the new configuration file to the server, still by 
using the remote administration client GUI. At this point, it is necessary to send a restart signal to 
the rhizoreality.mu server s framework in order to take in account the new parameters. This configuration 
file also includes the declaration of editable files within the system. Any kind of file can be declared 
editable: HTML files, VRML files, ASP files, etc Each editable file has a set of tags declared, and the 
administrator can only modify the value of these tags. The edition of these tags is made within the remote 
administration client and its GUI. Once the administrator has modified values of tags, it is sent to 
the rhizoreality.mu server s framework that will modify editable files in real-time. New versions of 
modified files are available immediately on the main server. This kind of capability enables the owner 
of the system to modify 3D files without having to edit them manually. It is possible with such a system 
to modify the link of an Anchor node or the URL of an image mapped in the 3D world without being familiar 
with VRML or any other 3D language syntax. The second one is linked to the 3D world and its configuration. 
It describes a set of functionalities that can be defined and/or driven by a 3D server. We can distinguish 
functionalities that are controlled by the server and functionalities that are managed at the client 
level. A detailed overview of these functionalities is described in the next section. In our system, 
the remote administration client is a JAVA applet that can be accessed from a Web browser (Figure 5). 
 Figure 5: A remote administration client Each server (Chat or 3D) can be contacted by an administration 
client. There are no different types of remote administration client according to the type of server 
it is connecting to. There is only one type of remote administration client with the same set of functionalities. 
It avoids having to maintain several remote administration objects with a particular protocol to set 
up for each of them. Taking advantage of the inter-servers communication feature described in the previous 
section, some orders sent to a particular server can be broadcasted to other servers. This functionality 
permits to perform general administration from any particular remote administration client, independently 
of the type of server it is connected to (Chat or 3D). As a basic feature, logs are broadcasted to the 
remote administration client. It gives the administrator an overview of the activity of the server in 
real-time. Concerning user management, in order to have a more precise control, the remote administration 
tool can be linked to a database. In addition to being able to expulse a given user at a given time, 
it gives the ability to ban any user for a given amount of time or forever. Of course this client database 
should also be checked each time a client is logging in the system (Figure 6). Concerning security, a 
remote administration client has to be officially declared at the server level. The remote administrator 
has a key that is specified locally when sending login information. This key is used to code login information 
prior to being sent to the network. At the server level, login information is decoded and verified by 
looking in the officially declared remote administrators list. Server Host with a Web server rhizoreality 
Servers Framework Chat server Chat server requests requests/updates Clients Database Remote Host socket 
Web Browser Remote Administrator Client Figure 6: the remote administration client with database link 
 3.5 3D specific functionalities The 3D server can control objects in the 3D world. Through a 3D configuration 
file, the 3D server can modify the shared world. Based on time or the number of connected clients, textures 
can be modified and 3D objects added or removed. This kind of functionality gives the ability to make 
the complexity of the 3D world evolve according to the number of connected clients for example. It is 
also possible to share sounds in the 3D world. A sound launched by a user can be heard by other connected 
clients. In a configuration involving a Sound server, a set of objects can be animated by the music. 
This is also done at the server level, using the 3D configuration file. Objects that have to be animated 
by the music are declared by using their names as a reference. The 3D server becomes a client of the 
Sound server (running remotely). Information received from the Sound server characterises the music (frequencies, 
beat, etc computed in realÂ­time). This information is used to compute geometrical transformations. These 
transformations are sent to each 3D client in order to locally animate the 3D world. The 3D server can 
also dynamically load additional 3D objects. In this case, these objects are linked to a volume corresponding 
to a control zone. Each time the user is entering or exits this control zone, a particular task defined 
in the configuration file can be performed (change in the world, opening of a Web page etc ). This behaviour 
can be extended to any kind of sensors, real or virtual. This 3D configuration file can be remotely modified 
by using the remote administration client (see section 3.4). It enables the modification of the 3D world 
(using dynamic load feature) and animations or behaviours without having to edit 3D files.  4 EXAMPLES 
OF CONCEPTUAL AND COMMERCIAL USES 4.1 An e-body An e-body (Figure 7) is one of the first public use of 
the rhizoreality.mu system. It is a kind of labyrinth standing for an electronic body. The connected 
user has to find the exit. During his discovery of the world, the user is triggering a set of sounds. 
These sounds are shared with other connected users, so that they can hear each other. The entire world 
reacts to the number of users: the more users are connected, the more lifts are available there is (lifts 
permit to go back to starting point when an user is lost). Figure 7: global view of the e-body world 
If the user succeeds in finding the exit, it is possible for him to download the music produced by his 
walking around in the labyrinth. Sounds launched by the user are mixed in real-time on the server side. 
The sound-mix is made using several tracks (4 in the presented version). Doing so allows the producing 
of an infinity of different music patterns. The rhizoreality.mu client is located in the lower part of 
the Web page. It includes a 3D client and a chat client embedded in a particular low-tech -like interface. 
rhizoreality.mu servers are running on a Silicon Graphics machine. This work has been presented at Siggraph 
99 in Los Angeles during the Web 3D roundup. 4.2 3D chat for a newspaper: the Digital CafÃ© This application 
of the rhizoreality.mu system was made for a Swiss newspaper. It is a 3D chat including a 3D server and 
four chat servers. The 3D world is organized in a huge tower that can contain an infinite number of rooms. 
In the current version, it includes a general room (entrance place) and a discussion room. In the discussion 
room, there is a set of three areas (tables) that are linked to particular topics. The left part of the 
main window contains the general chat client (in a particular frame), the middle part contains the 3D 
or 2D client (choice of the user) and the left part of the window contains chat clients linked to specific 
topics (Figure 8). Figure 8: global view of the digital cafÃ© application (discussion room) (see color 
plate) This last part is empty by default (no chat activated). When a user comes closer to a table, the 
connection to the associated chat server is made by loading the chat client in the right frame. When 
moving away, the user is automatically disconnected from the specific chat. The user has to use the 3D 
or 2D graphical interface for accessing and participating in chatting areas. Without having to manually 
edit any particular files, the newspaper s staff can partially modify the 3D world (rooms) and chat settings. 
This is a direct application of the editable file functionality of the remote administration client (see 
section 3.4). This system is linked to a database for maintaining customer information. Figure 9: an 
official discussion organised by the newspaper (see color plate) One of the highest numbers of simultaneous 
connections recorded with this system was 53 connections, dispatched to three servers (two chat servers 
and one 3D server). For this project, rhizoreality.mu servers are running on a Windows NT based PC. It 
is planned to add a new set of rooms in the tower with a new set of associated chat servers that will 
be linked to another newspaper (owned by the same company). 4.3 Live music show performances The rhizoreality.mu 
system was used in a set of live music shows performed in nightclubs. The first set of experiments was 
performed in one nightclub at a time using a local network (no external Web link). The rhizoreality.mu 
system was connected to a Sound server and an SMS server. It was possible to animate the 3D worlds according 
to the live music played in the nightclub. To perform this task, the 3D server sends geometrical transformation 
(scale, translation and rotation) produced according to information received from the Sound server (music 
beat, frequencies etc ). The SMS server is linked to the mobile phone technology (Short Message System). 
We install a SMS receiver (that has a cellular phone number associated to it) on a PC on which was running 
the SMS server. The rhizoreality.mu system was able to connect to this SMS server and to receive messages 
sent by people present in the nightclub or elsewhere (the cellular phone number was publicly distributed 
through flyers). SMS messages were displayed on the Web, as well as used as visual within a dedicated 
3D world. A set of PCs was dispatched in the nightclub to make the exploration of the 3D shared world 
by night clubbers possible (Figure 10). The latest use of the rhizoreality.mu system in such a context 
was performed for a party organised simultaneously in the five major cities in Switzerland (the SensUAll 
night in Zurich, Basel, Bern, Geneva and Lausanne). All places were connected via a satellite link (video 
and sound) and the Internet (phone line with a modem). The satellite was used for sending local video 
(fix and wireless cameras) to the main video editing premise located in the city of Lausanne. The source 
to be dispatched was chosen in Lausanne, locally encoded to realvideo format and made available in 3D 
within a rhizoreality.mu world through a Web server (Figure 11). The 3D world set up for this event was 
geometrically simple and specifically designed to be used as a visual animation. Live video stream was 
mapped in the 3D world (Figure 12 top), enabling people connected to the rhizoreality.mu system to follow 
the real party. In this configuration, the rhizoreality.mu system included one 3D server and one chat 
server (Figure 12 bottom). Internet   5 DISCUSSION 5.1 Results Concerning the link to VRML plug-in, 
this kind of application demonstrates the current limitation due to the EAI [19]. As soon as an important 
flow of information has to transit through the EAI, we experience lots of problems related to VRML plug-ins. 
In the best case, information sent to the VRML plug-in is buffered and finally executed with a more or 
less important delay. This was typically observed when animating 3D objects by using music information 
(beat). In the worst case, everything just freezes (the plug-in and subsequently the Web browser). This 
kind of problems, in addition of some others linked to rendering, has lead us to consider other solution 
for displaying the 3D world. The experimental Shout3D client was partially considered because of that. 
As it is a JAVA package, we do not have to use the EAI to update the 3D world. This experimental client 
confirms choices we have made for the global organisation of the system. Out of a set of 48 different 
objects, we need to partially rewrite only three of them. This is true whatever visualisation system 
is chosen. 5.2 Future Work The development of the system has now driven us to a point where we are considering 
a system that is truly and powerfully interactive, reactive and connective. Something that lets you map 
lots/heterogeneous inputs onto lots/heterogeneous outputs with the rhizoreality.mu layer in between our 
various adapted servers as data providers and our multiple clients as decoders. Real to real event and 
data mapping, virtual to real and vice versa, virtual to virtual, 2D to 3D, etc all kind of playable 
architectures. This open a wide range of new real-virtual Internet applications for Web3D and multi-users 
in general. This step further already has a name: neurosystems. It intends to be a sort of Internet meta-navigation 
multi-user system including all (or a subset of) we have presented in this paper. rhizoreality.mu is 
a 'concept-ware' that evolves like a living cell. It's a project rather than just a 'software'. We have 
no plans to make a software out of it for the moment, rather a service, if it becomes a 'product'. But 
more than a product, we conceive rhizoreality.mu (and maybe the incoming neurosystems) as a 'brain' service 
that will and should keep evolving.  6 ACKNOWLEDGEMENT We would like to thanks the Alternet Fabric team 
linked to this project: Marc Escher, StÃ©phane Carion and Christophe Guignard.  7 REFERENCES [1] Jeff 
Sonstein, VNet multi-user system, http://ariadne.iz.net/~jeffs/vnet/ [2] Geometrek, DeepMatrix multi-user 
system, http://www.geometrek.com/products/deepmatrix.html. [3] Wireless Application Protocol (WAP), http://www.wapforum.org/ 
[4] an [e-body2.0], http://www.fabric.ch/ElectroArt, SIGGRAPH 99, Los Angeles, 1999. [5] Blaxxun VRML 
plug-in, http://www.blaxxun.com/. [6] Cortona VRML plug-in, http://www.parallelgraphics.com/products/cortona/. 
[7] X3D Specification, http://www.web3d.org/x3d.html. [8] MPEG4, http://www.cselt.it/mpeg/ [9] Living 
World VRML Working Group. The Living World Specification. http://www.web3d.org/WorkingGroups/livingÂ­worlds/draft_2/index.htm 
[10] DeepMatrix V1.2. Documentation. http://www.geometrek.com/developer/docs/matrix_toc.html [11] Blaxxun. 
Designing World Documentation. http://www.blaxxun.com/support/developerguide/developer/in dex.html [12] 
Wolfgang Broll. Distributed Virtual Reality for Everyone A Framework for Networked VR on the Internet. 
IEEE Virtual Reality Annual International Symposium (VRAIS). 1997. IEEE Computer Society Press. pages 
121-128. [13] Michael R. Macedonia, Donald P. Brutzman, Michael J. Zyda, David R. Pratt, Paul T. Barham, 
John Falby and John Locke. NPSNET: A Multi-Player 3D Virtual Environment Over the Internet. Symposium 
on Interactive 3D Graphics. 1995. New York. pages 93-94. [14] Chris Greenhalg. Dynamic, embodiement, 
multicast groups in MASSIVE-2. Technical report NOTTCS-TR-96-8. Dept. Comp. Science. University of Nottingham. 
1996. [15] Thomas A. Funkhouser. RING: A Client-Server System for Multi-User Virtual Environment. SIGGRAPH 
Symposium on Interactive 3D Graphics. Monterey. 1995. pages 85-92. [16] An e-body, http://www.fabric.ch/ElectroArt/. 
[17] Digital CafÃ©, http://www.digitalcafe.ch/. [18] SensUAll night, http://194.38.80.19/parisienne/. 
[19] External Authoring Interface (EAI) reference page, http://www.web3d.org/Specifications/VRML97/part1/java.ht 
ml. [20] Internet Relay Chat (IRC), http://www.mirc.com/irc.html.   rhizoreality.mu Christian Babski, 
Patrick Keller 
			