
 COMPUTATIONAL PARALLELS BETWEEN THE REGULAR AND CONTEXT-FREE LANGUAGES by H. B. Hunt III* Dept. of 
Electrical Engineering Princeton University Princeton, New Jersey i. Introduction Recently there has 
been considerable activity devoted to studying the complex- ity of decidable problems in automata theory, 
formal language theory, and logic ([17], [18], [27], [28], [36], etc.). There has also been activity 
devoted to finding general sufficient conditions for undecidability of linguistic predicates ([ii], [13], 
[15], [16], [17]). We com- bine these two trends. Sufficient con- ditions for a linguistic predicate 
to be as hard as "=~", "=0"", or "={0,i}*" are presented. Numerous new nonpolynomial lower bounds and 
undecidability results follow. Finiteness and boundedness are shown to play important roles in the com- 
plexity of the equivalence and containment problems for the regular and context-free languages. A natural 
combinatorial struc- ture that complicates several problems related to context-free grammars such as 
structural equivalence [25,29], s-equiva- lence [23], LL(k) equivalence [33], and halting and divergence 
for monadic recur- sion schemas [3] is presented. Several examples are given where this structure causes 
provably exponential lower complex- ity bounds. Also, we investigate the limitations of the techniques 
used in [17], [27], and [28] for proving nonpoly- nomial lower complexity bounds. Several preliminary 
definitions are needed to read this paper. Def. Ioi: A language L c Z* is said to ~o]nded iff ~strings--w 
I .... , Wk~Z* such that L ~ Wl*...Wk*. A language that is not bounded is said to be unbounded Def. 
1.2: Let Z be a finite alphabet. PSPACE (Z) is the class of all languages over ~ recognizable by some 
polynomially tape bounded Tm (Turing machine) Def. 1.3: L < M if ~a function f ptlme 64 D. J. Rosenkrantz 
General Electric Research &#38; Development Center Schenectady, New York computable by some deterministic 
polyno- mially time bounded Tm such that xcL f(x)¢M. M is NP-hard if LcNP = L pt~me M. M is NP-complete 
if M~NP and M is NP-hard. M is PSPACE-hard if L is in PSPACE = L pt~me M. M is PSPACE-complete if M 
¢ PSPACE and M is PSPACE-hard. M is a Say- itch CSL if both (I) M is an NDCSL and (2) McDCSL ~ DCSL=NDCSLI 
 Def. 1.4: x\L = [ylx.ycL}. e/x = [yly'xcL}. x\L is called the left quo- tient, and L/~ the right quotient 
of L with respect to {x]I 2 Defo 1.5: (i) (A) = {x.ylx,y~A ]. (2) ~(A) = {xlx~ [0,1}*-A}.  (3) A 
+ B = {xlxcA or xcB}.  (4) A~ B = {xlxcAnB or x~%NB}.  (U,',*), (U,',*,A), (U,',*,2), (U,',*,~), and 
(U,',*,O) expressions over ~0,i} have the standard recursive definitions. See [19] or [28] for a formal 
definition 2. Undecidable Properties of the CFL's  Theorem 2.3 below shows that any pred- icate that 
sufficiently dichotomizes the cfl's (context-free languages) is undecid- able. The conditions for sufficient 
di- chotomy are that the predicate be true for some language that contains an unbounded regular subset, 
and that there exist some language which cannot be obtained, via several simple linguistic operations, 
from the set of languages for which the predi- cate is true. The properties of unbounded regular sets 
that we exploit are - *The research of the first author was supported in part by NSF Grant GJ-35570 
and by the General Electric Research and Development Center. Prop. 2.1 [8,14]: Let R be any regular 
set over {0,i}. Then the following are equiv- alent : (i) R is unbounded;  (2) 3r,s,x,y ~ [0,I]* such 
that r" (0x+ly)*" scR ; and  (3) r,s,x,y c [0,i}* such that  r. (x0+yl)*" sc__R Our first result 
is an important cor- ollary of 2.3 below - Thm. 2°2: Let P be any predicate on the cfl's over [0,i} 
such that (i) P({0,1)*) is true and  (2) Either Pleft = [L'IL'=x\L, x~[0,1)*,  P(L) is true} or Pright 
= [L'IL'=L/x , x~[0,1]*, P(L) is true] is a proper subset of the cfl's over {0,i]. Then for arbitrary 
cfg's or pda's G, the predicate P(L(G)) is undecidable One predicate satisfying the conditions of I! 
 2.2 but no% those in [II] is L = ILl rev'' -o "L L] rev'' It is easily seen that = [ is not preserved 
by quotient with single string on either the left or the right as re- quired in [ii] (see [16] or [20]). 
 The main result of this section is - Thm. 2.3: Let P be any predicate on the cfl's over [0,i] such 
that 3 a cfl L t and strings r,s,x,y ~ [0,i]* such that either - (a) r" (0x+ly)*.sC__Lt;  (b) P(Lt) 
is true; and  (c) Letting h I be the homomorphism defined by hl(0)=0x and hl(1)=ly ,  3a cfl over 
[0,i} ef4hl-l[{e'IL'= ~\[r~e/s], ~¢(0x+ly)*, and P(L) is true} ] ; or -(d) r'(x0+yl)*'sc_Lt; (e) P(Lt) 
is true; and  (f) Letting h 2 be the homomorphism  defined by h2(0)=x0 and h2(1)=yl , ~a cfl over 
[0,I~ Lf~h2-1 IlL'It' = [r\e/s]/~,~¢ (x0+yl)*, and P(L) is true}]. Then for arbitrary cfg's or pda's 
G, the predicate P(L(G)) is undecidable~ Prop. 2.4: Any predicate that satisfies the conditions of 
2.2, also satisfies the conditions of 2.3 Cor. 2.5: Let L by any cfl over {0,i} o that contains an 
unbounded regular subset. Then for arbitrary cfg's G, the predicate "L(G)=L " is undecidable O Cor. 
2.5 extends the results in [14], where L was restricted to be an unbounded regu- o lar set. The reader 
should note the following facts about 2.3. First (a), (b), and (d), (e) assert that P is true for some 
cfl L t which has an unbounded regular subset. However, L t need not be regular. Second, there is only 
one i-I homomorphism in- volved in the statement of (c) or (f). Third, h I and h 2 in (c) and (f) depend 
 only upon the r,s,x,y of (a) and (d), re- spectively. Fourth, P need not be pre- served by quotient 
with singletons on either the left or the right. Nor need P be preserved under inverse i-I homomor- phisms. 
All that is required is that the operations of (c) or (f), when applied to the set of cfl's for which 
P is true as in (c) or (f), do not generate all the cfl's. Thus, let P be any nontrivial predicate on 
the cfl's such that True(P)={LIP(L ) is true] is closed under quotient with single- tons on both the 
left and the right and under inverse I-I homomorphisms. Then for any predicate P' such that True(P')~True(P) 
and such the P' is true for some cfl with an unbounded regular sub- set, P'(L(G)) is undecidable. This 
is an important and useful property of 2.3; and its use is illustrated below. Thm. 2.6: Let S be any 
subset of the unam- biguous cfl's over [0,i} such that3Lt¢S, where L t has an unbounded regular subset. 
 Then for arbitrary cfg's G, the predicate "L(G)~S" is undecidable Cor.2.7: The following classes S 
of cfl's over [0,I] satisfy the conditions of Thm. 2.6. Hence for arbitrary cfg's G, the predicate "L(G)¢S" 
is undecidable. (I) The unambiguous cfl's;  (2) The LR regular languages [6];  (3) The LR(I,-) languages 
[38];  (4) The det. cfl's;  (5) The regular sets;  (6) The simple precedence languages;  (7) The 
operator precedence languages;  (8) The s-languages [23];   (9) For all kml, the LL(k) languages 
[24], [33]; (i0) The LL languages; (ii) The strict det. languages [12];  (12) The realtime strict det. 
languages [12];  (13) The LR(0) languages;  (14) Any subset of classes (2) through  (13) that has 
an element with an un- bounded regular subset; and  (15) The reversal of any of the above classes  
 2.6 and 2.7 explain why the PCP was used in almost identical fashion to prove that several of the above 
classes are undecid- able. We hope that future proofs that subclasses S of the unambiguous cfi's are 
undecidable will consist only of verifica- tions that some element of S has an un- bounded regular subset. 
The reader should note that 2.5,2.6, and (8) through (15) of  2.7 do not follow from the results in 
[ii]. Exact analogues of 2.2,2.3,2.5,2.6, and 2.7 hold for the linear cfl's, the metalinear cfl's, the 
online one counter pda languages ([4]), and the least AFL conhaining [anbnlnml] ([13]). In particu- 
lar, we have the following: Coro 2.8: Let L be any linear cfl over O [0,1} such that L contains an 
unbounded O regular subset. Then for arbitrary linear cfg's G, the predicate "L(G)=L " is undecidable 
~ o Cor. 2.9: Let L be any metalinear lan- O guage over [0,i} such that L contains an o unbounded 
regular subset. Then for arbi- trary metalinear cfg's G, the predicate "L(G)=L " is undecidable~ O 
Cor. 2.10: Let L be any online one O counter pda language over [0,i} such that L contains an unbounded 
regular subset. O Then for arbitrary online one counter pda M, the predicate "L(M)=L " is unde- O 
 cidable Cor. 2.11: Let L be any element of~, O the least AFL containing [anbnlnml}, such that L contains 
an unbounded regular o subset. Then for~- the predicate "=L " O is undecidable~ (We assume that cPis 
enumerated in such a way that it is an "effective" AFL. See [13].)  Open Problem: Does there exist a 
cfl [linear cfl, metalinear cfl, online one counter pda language] Lo, such that L ° has no unbounded 
regular subsets, for which "=L " is undecidable? o Finally, an analogue of 2.3 for the cfpg languages 
(see [31]) is presented. Thm. 2.12: Let P be any nontrivial predi- cate on the cfpg languages over [0,i} 
such that either - (a) ~a cfpg language L t and a string r¢ C0~I}* for which LtD__r'(0+l)* , P(Lt) 
is true, and Pleft = [L'IL'=x\L , x¢[O,l]*, P(L) is true]# cfpg languages over [0,I]; or (b) 3 a 
cfpg language L t and a string r( [0,i]* for which Lt~(0+l)*'r , P(Lt) is true, and Pright = [L'IL'=L/x,x¢[0,1}* 
, P(L) is true]# cfpg languages over [0,i}; or (c) For no string r and cfpg language L such that LD_r-(0+I)* 
is P(L) true; or  (d) For no string r and cfpg language L such that LD_(0+I)*'r is P(L) true.  Then 
for arbitrary cfpg's G, the predicate P(L(G)) is undecidable Coro 2.13: Let L be any arbitrary cfpg 
 O language over [0,i}. Then for arbitrary cfpg's G, the predicate "L(G)=Lo" is un- decidable 3. Hard 
Properties of the Regular Sets Many of the undecidable predicates that satisfy the conditions of 2.2,2.3, 
or 2.12 become "hard" but decidable when re- stricted to the regular sets; where how "hard" is determined 
by the descriptors used to enumerate the regular sets. In fact almost identical analogues of 2.2,2.3, 
and 2.12 hold. Thm. 3.1: Let P be any predicate on the regular sets over [0,i] such that (i) P([0,1]*) 
is true and  (ii) Either P. ~ =[e'Ie'=x\e,x([O,l]*,P(L)  le~E is true] or P =[L'IL'=L/x,xc{0,1] 
*, P(L) is right true] is properly contained within the regular sets over [0,i}.  Then (i) [RIR is 
a (~,.,*) expression over {0,i} and P(L(R)) is false] is PSPACE-hard and is an element of DCSL only if 
NDCSL = DCSL; (2) {MIM is a 2dfa and P(L(R)) is false} is PSPACE-hard;  (3) {RIR is a (U,',*,N)expression 
over  ~0,i} and P(L(R)) is true} requires space 2 cn/l°g n for some c>o,i.o. (infinitely often);  
(4) [GIG is a non-selfembedding cfg and P(L(R)) is true} requires space  2cn/log n for some c>o,ioOo; 
  (5) {RIR is a (U,',*,2) expression over {0,i} and P(L(R)) is true} require  space 2 cn for some c>o,i.o.; 
  (6) {RIR is a (U,.,*,~) expression over {0,i} and P(L(R)) is true} is not elementary recursive; and 
 (7) {RIR is a (U,°,*,~) expression over [0,i} and P(L(R)) is true} is not elementary recursive I  
 The proof of 3ol is almost identical to that of 2°2 once "=t0,1}*" is known to have the corresponding 
complexity. For the complexity of this predicate, see [28] for (1),(5), and (6); and [20] for (2),(4), 
and (7). Finally, the first author showed that (3) requires space 2 e#-fi/l°g n for some c>o,i.o. Subsequently, 
Stockmeyer [37] suggested a related construction yielding the bound in (3)° Thmo 3.2: Let P be any 
predicate on the regular sets over [0,I} such that ~ a regu- lar set L and strings r,s,x,y¢[0,1}* such 
that either - (a) r'(0x+ly)*'s~_Lt;  (b) P(Lt) is true; and  (c) Letting h I be the homomorphism defined 
by hl(O)=0x and hl(1)= ly, ~ a regular set over [0,i} Lf~hl-l[ [e' IL'=~\[r\e/s], =¢(0x+ly)*,P(L) is 
true}];   or - (d) r°(0)+yl)*'s~Lt; (e) P(Lt) is true; and  (f) Letting h 2 be the homomorphism defined 
by h2(0)=x0 and h2(1)=yl ,  a regular set over [0,13 Lf# h2-1[{L'IL'=[r\L/s]/~,~(x0+yl) *, P(L) is 
true]].  Then (I) through (7) of Theorem 3.1 holdI Thm. 3.3: Let P be any nontrivial predi- cate on 
the regular sets over t0,1} such that either (a) ~ a regular set L t and a string r¢{O,l~* for which 
LtD_r'(0+l)* , P(Lt) is true, and Pleft = {L'IL'=~\L,x~{0,1}*,P(L ) is true] is a proper subset of the 
regu- lar sets over {0,i]; or (b) ~ a regular set L t and a string r¢~0,1}* for which Lt2(0+l)*'r , 
 P(Lt) is true, and Pright = ~L'IL'=L~x,x~{0,1}*,P(L ) is true} is a proper subset of the regular sets 
over {0,i}; or (c) for no string r~[0,1}* and no regular set L such that Lm_r.(O+l)* is P(L) true; or 
 (d) For no string re[0,1}* and no reg- ular set L such that L2(0+l)*'r is P(L) true.  Then (2),(6), 
and (7) of 3.1 hold. More- over, {RIR is a (U,.,*,N) expression over [0~i} and P(L(R)) is false} (i) 
is PSPACE-hard if either (c) or (d) holds and  (2) requires space 2 en/l°g n for some c~o,i.o, if either 
(a) or (b) holdsI  Again the proof of 3.3 is almost identical to that of 2.12, once "=[0,i}*" and "=~" 
are known to have the corresponding com- plexity. See [28] and [20]. We illustrate the power of 3.1,3.2, 
and 3.3. The predicates in 3.4 and 3.5 with a * do not appear in r18], where an earlier and weaker version 
of 3.1 was pre- sented. Thmo 3.4: The following predicates satisfy the conditions of Theorem 3.2: (i) 
~unbounded regular sets R over O [0,i], "=R "" O (2) R is a star-event, i.e. R=R*;  (3) R is a 
code event, i.e. Wl,...,WkC[0,1]* such that  R=(Wl+...+Wk)*;   (4) kml R is a k-parsable eventj R 
is a locally parsable event;  (5) R is an ultimate, reverse ultimate, or generalized ultimate definite 
event;  (6) R is a comet, reverse comet, or generalized comet event;  (7) R=v(R), where ~(R)={yI~x~R, 
lyl=Ixl};   (8) R is prefix closed;  (9) R is suffix closed;  (I0) R is infix closed;  (ii) 
R is eofinite;  (12) kml R is a k-definite, k-reverse  definite, or k-generalized definite event; 
 (13) kml R is k-testable in the strict sense, or k-testable;  (14) R is locally testable, or locally 
testable in the strict sense;  (15) R is a definite, reverse definite,  or generalized definite event; 
*(16) R is a loop-free or FOL event; (17) R is a star-free, noncounting, group-  free, permutation-free, 
or LTO event; *(18) km2, R is a CM k event; *(19) k~l, R is of restricted star height = k;  (20) R 
is accepted by some strongly con- nected dfa; *(21) R is accepted by some permutation automaton; *(22) 
R is a pure-group event; and *(23) R = rR] revl For definitions of many of the above pred- icates see 
[26]. Thm. 3.5: The following predicates satisfy the conditions of 3.3 but not those of 3°2: *(i) ~bounded 
regular sets R over ~0,i} O "=R "" O  (2) R is finite;  (3) R is bounded; and *(4) R is commutative 
I  Cor. 3.6: For any unbounded regular set R over [0,1} O  (i) [RIR is a (U,°,*) expression over 
[0,i] and L(R)#Ro] is PSPACE-complete  and a Savitch CSL;  (2) [RIR is a (U,',*,N) expression over 
[0,i] and L(R)=Ro} requires space  2 cn/l°g nfor some c>o,i.o.;  (3) [GIG'is a non-selfembedding cfg 
and  L(G)=Ro] requires space 2 cn/l°g nfor some c>o,i.o.; and  (4) {RIR is a (U,.,*,2) expression 
over [0,i} and L(R)=Ro} requires space 2Cnfor some c>o,i.o.l  Cot. 3°7: For any regular set R over 
 {0,I~ o (I) {MIM is a 2dfa and L(M)#Ro] is PSPACE- complete;  (2) {RIR is a (U,.,*,~) expression over 
{0,1} and L(R)=R } is not elementary recursive; and v  (3) {RIR is a (U,.,*,~) expression over {0,1] 
and L(R)=Ro} is not elementary recursive I  3.6 and 3.7 provide a whole class of new hard sets and 
nonpolynomial lower bounds. 4. The Equivalence and Containment Problems for the CFL's-Revisited We continue 
the investigation of the equivalence and containment problems for the cfl's begun in [14]. We completely 
 characterize the complexity of predicates of the form "=R " for fixed regular sets o Ro, when applied 
to regular expressions, ndfa, or type 3 grammars. Prop. 4.1 ~28]: The set {RIR is a (U,.,*) expression 
over {0,I] and L(R)#0*} is NP-complete I Thm 4.2: Let R ° be any fixed regular set over {0,i}. (i) 
If R is finite, then [RIR is a (U,.,*) O expression over {0,i} and L(R)#Ro}¢P ; (2) If R ° is infinite 
but bounded, then  [RIR is a (U,.,*) expression over [0,i} and L(R)#Ro} is NP-complete.  (3) If R is 
unbounded, then {RIR is a  O (U,.,*) expression and L(R)#Ro} is PSPACE-complete and a Savitch CSL 
I  For fixed finite sets (i) of 4.2 holds However, if the finite sets are allowed to vary - Prop. 4.3 
[17]: {(R,S) IR,S are (U,.,*) expressions over t0,1}, L(R) or L(S) is finite, and L(R)#L(S)} is NP-completel 
 Thm. 4.4: There exists a deterministic polynomially time bounded Tm which given a (U,.,*) expression 
over {0,i] as input, decides if L(R) is bounded and if so out- puts strings Wl,...,w k such that L(R)~Wl*...Wk* 
, where lWll.... ,lWkl~ con- stant IN1 1 rhm. 4.5: (i) [(R,S) IR, S are (U,.,*) ex- pressions over 
[0,i}, either L(R) or L(S) is bounded, and L(R)#L(S)} is NP-complete. (2) The set {(R,S) IR,S are (U,.,*) 
expres- sions over [0} and L(R)#L(S)} is NP-com- plete.  (3) ~kml, [(R,S) IR,S are (U,.,*) expres- sions 
over {0,1} of restricted star height k and L(R)#L(S)] is PSPACE-complete and a Savitch CSL I Thus, (restricted) 
star height does not affect the complexity of the equivalence problem for regular expressions; but boundedness 
does. However, note that every bounded regular set is of restricted star height 0 or I.  Next 4.2 is 
extended to the cfl's and the linear cfl's. The proof is based upon several lemmas of independent interest. 
Lemma 4.6: If u'xi'w°y i z u'xJ'w'y k " ~ "g where i~j or i.~k and x,y are nonnull, then "~strings r,s 
and integers m,n,p~O such that xm=r's,yn=s'r, and w=(r's)P'r~ i i " k Lemma 4°7: If u'x °w'y °z = u°xJ'w'y 
-z, where i#j or i#k, and both x and y are nonnull, then [u°x1"w'yl'zlimO} is regular~ Lemm~ 4.8: If 
a cfl L over [0,17 is un- O bounded, then 3 strings w,x,y such that every string in w'(0x+ly)* is 
a prefix of some string in Lo, or every string in (x0+yl)*-w is a suffix of some string in e O Thmo 
4°9: Let L be any arbitrary cfl over O   {0,1}. (i) If L is finite, then {GIG is a cfg and O L(G)#L 
o} ~e. (2) If L is infinite, then [GIG is a cfg O and L(G)~Lo} is NP-hard. (3) If L ° is unbounded, 
then IGIG is a cfg and L(G)#Lo} is PSPACE-hard Prop. 4.10: Let L be any infinite cfl o over [0,i} such 
that L contains an in- O finite but bounded regular subset. Then [GIG is a cfg and L(G)~0*} < {GIG 
is a cfg and ptime + linear space L(G)#L o } Analogously for the linear cfl's the following holds: 
 Thm. 4.11: Let L be an arbitrary linear O cfl over ~0,I}. (i) If L ° is finite, then [GIG is a linear 
cfg and L(G)#Lo}~P.  (2) If L ° is infinite, then {GIG is a linear cfg and L(G)#Lo] is NP-hard.  (3) 
If L ° is unbounded, then {GIG is a linear cfg and L(G)#L o] is PSPACE- hard  There are infinite but 
bounded linear cfl's Lo,e.g.0* , for which the set [GIG is a linear cfg and L(G)#Lo]~NP. Thus (2) of 
4.11 is tight.  Open problems: (I) Are (2) and (3) of 4.9, and (3) of 4.11 tight lower bounds? (2) 
Is [GIG is a cfg and L(G)~0*} cNP or cPSPACE? 5. A Natural Exponential Combinatorial Structure Next 
a natural analogue of "squaring" (see [28]) that complicates several prob- lems related to the cfg's 
is presented. Several examples are given where this structure causes provably exponential lower bounds. 
We illustrate this struc- ture with an example S I -S2S 2 S 2 -$3S 3 S 3 -00 L(SI) = 08 = 023 A 
grammar of the above form with n non- terminals can generate strings of length 2 n" Thmo 5.1: The 
equivalence and containment problems for cfg's generating finite sets require nondeterministic time 
at least 2 2cn/[log n] , i.o. But, if the above structure is barred by requiring one of the cfg's 
to be a linear cfg, then Prop. 5.2: The equivalence and containment problems for cfg's generating finite 
sets, when one of the cfg's is linear, is NP- complete Thm. 5.3: The equivalence and containment problems 
for non-selfembedding cfg's re- quire space 2 cn/l°g nfor some c>0,i.o.~ Thmo 5.4: The equivalence 
and containment problems for cfl's one of which is bounded, when the cfl's are enumerated by the cfg's, 
require nondeterministic time at least 2 cn/[l°g n]2 i.o. There are constructions in [8] for solving 
 the problems described in Thm. 5.4, but these constructions are clearly exponen- tial. We can exploit 
5.1 to prove a meta- theorem about the complexity of predicates on the bounded cfl's -  Thm. 5°5: Let 
P be any predicate on the bounded cfl's over [0,I} such that (a) P is true for all regular bounded 
languages over [0,i} and (b) Pleft={e'Ie'=x\L, x¢{0,1}*, P(L) is true} or Pright=[L'IL'=L/x,x¢[0,1}*, 
 P(L) is true} ~ bounded cfl's over {0,i}. Then [GIL(G ) is bounded and P(L(G)) is true} requires nondeterministic 
time at  least 2 cn/[l°g n]2I.o. Moreover, this lower bound holds for a class of cfg's for which determining 
boundedness cP Thus regularity, linearity, metalinearity, unambiguity, and whether L(G) is a deter- ministic 
cfl all require nondeterministic exponential time for the bounded cfl's. We list several other problems 
which misht be exponential due to this cfg "squaring" structure. I. Structural equivalence for cfg's 
(see [25], [291).  Prop. 5.6: Structural equivalence for linear cfg's is PSPACE-complete 2. Boundedness 
for cfg's (see [8]).  Prop. 5.7: Boundedness for linear cfg's is decidable by some det. polynomially 
 time bounded Tm  3o Halting and divergence for monadic re- cursion schemata. Prop. 5.8 [5~: For linear 
monadic recur- sion schemata, halting, equivalence, and divergence are NP-complete  4. S-equivalence 
and LL(1) equivalence (see [23] and [33].) 6. Stack Automata and a Natural Exponential Complexity Gap 
 Thm. 6.1: (I) For all nontrivial predi- cates P on the 1-way det. SA languages, to decide P(L(M)), 
where M is a 1-way det. SA, requires det. time at least 2n/[log n] 2. (2): For all nontrivial predicates 
P on the 1-way nondet. SA languages [1-way nondet, nested SA languages] to decide P(L(M)), where M is 
a 1-way nondet. SA [1-way nondet, nested SA] requires det. 2 time at least 2 n /[log nj 3 ~  (3) For 
all nontrivial predicates P on the 1-way nondet. NESA languages, to decide P(L(M)), where M is a 1-way 
nondet. NESA, requires nondet, tape at least n2-¢for all ~>0; (4) For all nontrivial predicates P on 
the 1-way nondet. CSA, RPDA, NESA, or 1-way det. NESA languages, either P(L(M)) or NP(L(M)) is PSPACE-hard, 
where M is a l- way nondet. CSA,RPDA,NESA, or 1-way det. NESA; and  (5) 3 a rational number r>o such 
that for all nontrivial predicates P on the indexed languages, to decide P(L(G)), where G is an indexed 
grammar [01-macro grammar] requires  2 n det. time o n All bounds in 6ol are i.o. on any multi-tape 
Tm. Let P be any nontrivial predicate on the stack automata, the indexed, or Ol- macro grammars such 
that L(M)=L(N) = P(M)=P(N). Then P satisfies the conditions of 6.1 Cor. 6°2: The predicates "L(M)=~", 
"L(M) is finite", "L(M) is bounded", and "the empty string is in L(M)" satisfy (1)-(5) of 6.1.~ Coro 
6°3: Emptiness and finiteness for the context-free dendrogrammars in [34] or [35] r require det. time 
at least 2 n o 6.3 is of interest since the cf dendro-  grammars are a reasonable model for "context-free 
grammars on trees." Prop. 6.4: There are 1-way nondet. CSA,NESA, and RPDA languages that are NP- complete. 
Thus, P=NP iff 1-way nondet. CSA,NESA, or RPDA languages ~P. For definitions of the several kinds of 
stack devices and grammars above see [i] and [7]. Proofs may be found in [18] or [19]. 7. On the Equivalence 
Problem for DPDA  In this section we show that several decidable problems for dpda's cP. We first give 
a deterministic polynomial pro- cedure for converting a dpda into an equivalent one that always halts; 
a problem known to be computable [9]. Assume that the original dpda only pushes one symbol at a time, 
and the size of its description is proportional to the number of states, input symbols, stack symbols, 
and non- empty transitions. Thmo 7.1:3 an n 2 time bounded algorithm for converting an arbitrary dpda 
M into an equivalent dpda that always halts and whose size is proportional to that of M.~ ?0 Thm. 7.2: 
(I) The set {(M,R) IM is a dpda and R a dfa, and L(M)=L(R) [or L(M)DL(R), or L(M)C__L(R)]} ¢ P; (2) 
The set {(M,R) IM is a dpda, R is a regular expression, and L(M) Z L(R) ¢ P.~ Thus, a straightforward 
implementation of the techniques used in [28] or [17] cannot provide a nonpolynomial lower bound for 
the equivalence problem for dpda. These dpda results are applicable to classes of grammars for which 
a dpda can be obtained in polynomial time° Thm. 7.3: For any class of cfg's such that there is a deterministic 
polynomially time bounded algorithm that given a grammar G in the class constructs a dpda M such that 
L(G)=L(M), our dpda results hold. Thus for all regular sets R 0 the predicate "L(G)=R 0 ,! is in P.I 
 Cor. 7.4: For each of the following classes of cfg's and for all regular sets R0, the predicate "L(G)--R 
0 ~P. (i) LL(1) grammars;  (2) uniquely invertible simple pre- cedence grammars ;  (3) uniquely invertible 
weak preced- ence grammars ;  (4) simple mixed strategy precedence grammars ;  (5) strict deterministic 
grammars   Proofs can be found in [32]. Part i of Thm. 7.2 and a construction similar to that of 7.1 
also appear in [39]. 8. General Complexity Results General analogues of the theorems in Sections 2,3, 
and 6 are presented. Def. 8.1: A family of languages ~ over [0,i] is a quadruple (E,F,f,F), where (i) 
7~ is a finite alphabet; (2) FeZ* is a re- -T  uJ . F,2{0,i~'~fo r curslve set; and (3) f: which f(r) 
=F. ~is recursive if the function g:F×[0,1]*- [0,i} is recursive, where g(x,y)=l if ycf(x) and =0 otherwise. 
~ is effective if the partial function g:F×{0,1]*-[0,1] is partial recursive, where g(x,y)=l if y~f(x) 
and =0 or is undefined otherwise I Def. 8.2: An effective family of languages ~=(~,F,f,F) is effectively 
closed under union if ~ a recursive function 8:I'xF-F such that f(Srx,y]) = f(x)Uf(y). ~ is p-effectively 
closed under union if ~ a det. polynomially time bounded Tm M such that M, given input x~y, where x,y~F 
and ~E, outputs zcF such that f(z) = f(x)Uf(y). Other kinds of effective closures are de- fined analogously. 
I These definitions are similar to thos in Ell}. General analogues of 2.2-2.5, 2.12, 3.1-3.3,3.6, and 
3.7 hold. Here, we state the analogue of 2.2 and 3.1. Theorem 8.3: Let~= (~,F,f,F) be any effective 
family of languages over [0,i} that is effectively [p-effectively} closed under union; the homomorphism 
h defined by h(0)=00 and h(1)=01; and concatenation with (00+01)*'I0 and (0+i)*'i0 on the left, and 
i0.(00+01)* and i0"(0+i)* on the right. Let ~~(00+01)*'i0"(0+i)*] and ~~(0+i)*.i0"(00+01)*] be in F. 
Let P be any predicate on F such that (i) P({0,1}*) is true and (2) either F-Pleft=[L'IL '= x\L,x~[0,1]+,P(L)-is 
true] is not empty or F-Pright=[L'IL'=L/x,x~[0,1~ +, P(L) is true} is not empty. Then [xlx~F and f(x) 
= [0,i}*] is i-I Turing reducible [p-reduc- ible} to [xlxcF and P(f(x)) is true]. If "=[0,i]*" for~ 
is undecidable, then so is PI Thus, 2.2 and 3.1 are corollaries of 8.3. Moreover, the results in 6 
suggest a relationship to Rice's Theorem [30]. Both the results in 6 and Rice's Theorem follow because 
for classes of sufficiently power- ful language descriptors ~, the membership problem for any language 
enumerated by the elements of C is efficiently reducible to any nontrivial predicate on the languages 
enumerated by the elements of ~. Theorem 8.4: Let~=(%,r,f,F) be any re- cursive or effective family 
of languages over {0,i] such that either (i)~ is effectively [p-effectively} closed under intersection 
and quotient with singletons and concatenation or (2)~ is effectively [p-effectively} closed under 
the homomor- phism h defined by h(0)=00 and h(1)=01, concatenation with i0, concatenation, and quotient 
with singletons. Let P be any nontrivial predicate for which P(~) is false. Then~ycF, {wlw¢{0,1]* and 
wcf(y)} is i-i Turing reducible [p-reducible} to [xlx~F and P(f(x) is true}° I Cor. 8.5: Let~ = (~,r,f,F) 
be effectively [p-effectively} closed under intersection with singletons. Then ~y~r, {w[wE{0,1}* and 
w~f(y)} is i-i Turing reducible [p-reducible} to [xlxcF and ~(f(x)) is true}}. Thus, if emptiness for 
~ is decidable [decidable in P], then all lan- guages in F are recursive [are elements of P]. Cor. 
8.6: The membership problem for 2-way pda languages nlog(sp~ce+time) emptiness problem for pda This 
gives an 0(n 3 log n) recognition algorithm for 2-way pda languages based on the pda emptiness algorithm. 
Another algorithm for 2-way pda language recogni- ' " 3 tion, which takes time n on a random access 
machine, is given in [2].  Cor. 8.7: The lO-macro languages ~P~ Another interesting type of efficient 
closure is that called log effective in  [40] and log-space computable in [28]. Many of the p-effective 
closures in this paper are actually log effective closures. This is true for the (U,',*) and (U,',*,N) 
regular expressions, and the 2-way dfa. Jones [40] has shown that [MIM is a dfa and L(M)#~} is log reducible 
complete in nondet, tape log n. As a consequence, all our results in Section 3 go through for the dfa 
as well. For instance Cor. 8.8: FOr all regular sets R over O [0,I], [MIM is a dfa and L(M)#Ro} is 
log  reducible complete in nondet, tape log n 9. Summary This paper presents a complexity theory of 
formal languages. The main technique used is that of embedding "={0,i]*", "=0"", and "=~" into other 
linguistic predicates. In Section 2, the undecidability of "=[0,i~*" for cfl's is exploited to provide 
sufficient conditions for the undecidability of predicates on the cfl's. In Section 3, the same tech- 
niques are applied to regular sets. Pred- icates satisfying conditions similar to those of Section 2 
are shown to be hard, where how hard depends on the descriptors used to enumerate the regular sets. Sec- 
tion 4 concentrates on the equivalence and containment problems for cfl's. For cfl's, regular sets, and 
linear cfl's, the complexity of determining equivalence to a fixed language is linked to whether the 
fixed language is finite, infinite but bounded, or unbounded. In Section 5, the ability of cfg's to generate 
finite languages whose strings are exponential in the size of the grammar is used to obtain exponential 
lower bounds on several decidable problems for cfg's generating finite sets. In Section 6, all nontrivial 
predicates for certain specific classes of languages are shown to be hard. In Section 7, we show that 
a dpda can always be con- verted in polynomial time into an equiva- lent dpda that always halts. Therefore 
the predicate "={0,i]*" is in P for dpda's, and embedding this problem into other predicates on the dpda's 
will not yield nonpolynomial lower bounds. In Section 8, some of the preceding results are general- ized 
to other families of languages. References io Aho, A.V. [1969]. Nested stack automata, J. ACM 16:3, 
383-406. 2o Aho, A.V., J°Eo Hopcroft, and J.Do Ullman [1968]. Time and tape complexity of pushdown automaton 
languages, Information and Control 13:3, 186-206. 3. Ashcroft, E., Z. Manna, and A. Pneuli [1973]. Decidable 
properties of monadic functional schemas, J. ACM 20:3, 489-499. 4o Baker, B.S., and R.V. Book [1972]. 
Reversal-bounded multi-pushdown machines, IEEE Confo Rec. 13th Annual Symp. on Switching and Automata 
Theory , 207-211. 5o Constable, R.L., H.B. Hunt III, and S. Sahni [1974]. On the computational complexity 
of scheme equivalence (in preparation). 6. Culik, K. II, and R. Cohen [1973]. LR-regular grammars-an 
extension of LR(k) grammars, JCSS 7:1, 66-96. 7o Fischer, M.J. [19687. Grammars with macro-like productions, 
IEEE Conf. Rec. 9th Annual Symp. on Switching and Automata Theory, 131-142. 8. Ginsburg, S. [1966]. 
The Mathematical Theory of Context-Free Languages, McGraw-Hill, New York  9. Ginsburg, S., and S. Greibach 
[1966]. Deterministic context free languages, Information and Control 9:6, 620-647.   i0. Ginsburg, 
S., and J. Ullian [1968]. Preservation of unambiguity and inherent ambiguity in context-free languages, 
J. ACM 13:3, 364-368. ii. Greibach, S.A. [1968]. A note on undecidable properties of formal languages, 
Math° Systems Theory 2:1, 1-6. 12. Harrison, M.A., and I. Havel [1972]. Real-time strict deterministic 
languages, SIAM J. Computing 1:4, 333-349. 13 Hartmanis, J., and J.E. Hopcroft [1970]. What makes some 
language theory problems undecidable, JCSS 4:4, 368-376. 14 Hopcroft, J.E. [1969]. On the equivalence 
and containment problems for context-free languages, Math. Systems Theory 3:2, 119-124. 15 Hopcroft, 
J.E., and J.D. Ullman [1968]. Decidable and undecidable questions about automata, J. ACM 15:2, 317-324. 
 16 Hunt, H.B. III [1973]. On the time and tape complexity of languages, Ph.D. thesis, Cornell University, 
Ithaca, New York. 17 Hun¢, H.B. III [19733. On the time and tape complexity of languages I, Proco 5th 
Annual ACM Symp. on Theory of Computing, 10-19. 18. Hunt, H.B. III [1973]. Stack languages, Rice's theorem, 
and a natural exponential complexity gap, Princeton University Dept. of Electrical Engineering technical 
report number 142.  19. Hunt, H.B. III [1974]. On the complexity of stack automata (to be submitted 
for publication).  20° Hunt, H.B. III and D.J. Rosenkrantz [1974]. Computational parallels between 
the regular and context-free languages (in preparation). 21. Hunt, H.B. III and D.J. Rosenkrantz [19747. 
On equivalence problems for formal languages, to be presented at the 8th Princeton Symp. on Information 
Sciences and Systems, March 1974.  22. Hunt, H.B. III and D.J. Rosenkrantz [1974]o On the equivalence 
and containment problems for the regular and context-free languages (in preparation).  23. Korenjak, 
A.J., and J.E. Hopcroft [19661. Simple deterministic languages, IEEE Conf. Rec. 7th Annual Symp. on Switching 
and Automata  Theory, 36-46. 24. Lewis, P.M. II, and R.E. Stearns [1968], Syntax-directed transductions, 
J. ACM 15:3, 465-488.  25. McNaughton, R. [1967]. Parenthesis grammars, J. ACM 14:3, 490-500.  26. 
McNaughton, R. and S. Papert [1971], Counter-free Automata, MIT Press, Cambridge, Mass.  27. Meyer, 
A.R., [1972]. Weak monadic second order theory of successor is not elementary recursive-preliminary report, 
unpublished manuscript.  28. Meyer, A.R. and L.J. Stockmeyer [1973]. Word problems requiring exponential 
time: preliminary report, Proc. 5th Annual ACM Symp. on Theory of Computing, 1-9.  29° Paull, M.C., 
and S.H. Unger [1968]. Structural equivalence of context- free grammars, JCSS 2:4, 427-468. 30° Rodgers, 
H. Jr. [19671. Theory of Recursive Functions and Effective Computability, McGraw Hill, New York. 31o 
Rosenkrantz, D.J. [1969]. Programmed grammars and classes of formal languages, J. ACM 16:1, 107-131. 
 32. Rosenkrantz, D.J., and H.B. Hunt III [19747° Polynomial algorithms for deterministic pushdown machines 
(in preparation).  33. Rosenkrantz, D.J., and R.E. Stearns [1970]. Properties of deterministic top-down 
grammars, Information and Control 17:3, 226-256.  34. Rounds, W.C. [1970]. Tree-oriented proofs of some 
theorems on context- free and indexed languages, Proc. 2nd Annual ACM Symp. on Theory of Computing, 109-116. 
 35. Rounds, W.C. [1970]. Mappings and grammars on trees, Math. Systems Theory 4:3, 257-287.  360 
Rounds, W.C. [1973]. Complexity of recognition of intermediate level languages, IEEE Conf. Rec. 14th 
Annual Symp. on Switching and Automata Theory, 145-158.  37. Stockmeyer, L.J. [1973]. Personal communication. 
 38. Szymanski, T.G. F1973]. Generalized bottom-up parsing, Ph.D. thesis, Cornell University, Ithaca, 
New York.  39. Valiant, L.G. [1973]. Decision procedures for families of deterministic pushdown automata, 
Ph.D. thesis, University of Warwick, Coventry, England.  40. Jones, N. [1973], Preliminary Report: reducibility 
among combinatorial problems in log n space, Proc. 7th Annual Princeton Confo on Information Sciences 
and Systems, 547-551.   
			