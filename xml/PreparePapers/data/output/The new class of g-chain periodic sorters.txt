
 The New Class of g-Chain Periodic Sorters Ronald I Becker David Nassimi Yehoshua Perl Department of 
Mathematics CIS Department University of Cape Town New Jersey Institute of Technology IUmdebosch 7700 
Newark, New Jersey 07102 South Africa USA RIB@ucthpx.uct .ac.za Nassimi@cis.njit. edu, Perl@cis.njit.edu 
 Abstract A periodic sorter is a sorting network which is a cas­cade of a number of identical blocks, 
where output i of each block is input i of the next block. Previously, Dowd-Perl-Rudolph-Saks [4, 5] 
introduced the bal­ anced merging network, with N = 2k inputs/outputs and log N stages of comparators. 
Using an intricate proof, they showed that a cascade of log N such blocks constitutes a sorting network. 
In this paper, we introduce a large class of merging networks with the same periodic property. This class 
contains 22k-=-~ networks, where N = 2k is the num­ber of inputs. The balanced merger is one network 
in this clasa. Other networks use fewer comparators. We provide a very simple and elegatt proof of periodicity, 
based on the recursive structure of the networks. Our construction can also be extended to arbitrary-sized 
networks (not necessarily a power of 2).  Introduction A comparator is a device with two inputs and 
two outputs, with one designated output being the smaller of the two inputs and the other output the 
larger one. Given an input vector of numbers, the components can be fed in pairs into comparators, and 
the outputs can in turn be fed into further comparators, and so on, constructing a network, Such a network 
is called a mmparutor network. Comparator networks have been used for merging, sorting, selecting and 
routing [6]. Permission to copy without fee all or part of this material is granted provided that the 
copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the 
title of the publication and its date appear, and notice is given that copying is by permission of the 
Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific 
permission. ACM-SPAA 93-6/93 Nelen,Germany. G 1993 ACM 0-89791 -599 -2/93 /0006/0356 ...$1 .50 A periodic 
sorting network of sise N, and period p >2, is a concatenation of p identical blocks, where output i 
of each block is fed as input i of the next block, O < i < N 1. A periodic sorter is attractive since 
it offers the possibility of using only a single block, with the outputs of the block fed back to the 
inputs. Thus by recirculating the data through such a block p times, the numbers are sorted. The odd-even 
transposition sorter [6] (which con­ sists of N stage8 of comparators) is an example of a periodic sorter, 
with period N/2. On the other hand, Batcher s bitonic and odd-even sorting net­works [2, 8], which consist 
of (logz N + log N)/2 stages, sre not periodic. (The bitonic sort algorithm can be implemented with O(log2 
N) pasaea through a shuflle-exchange network [10]. However, the action of the comparators in the exchange 
stage need to be varied horn one paea to the next.) Dowd-Perl-Rudolph-Saka [4, 5] introduced the tral­anced 
merging network, with N = 2k inputs/outputs and log N stagea of comparators. Using a very in­tricate 
proof, they obtained a periodic sorting net­work as a cascade of log N balanced mergers. (The sorting 
network hsa exactly log2 N stages.) The bal­anced network consists of (N/2) log N comparators ­the smne 
as the bitonic merger. Other work on periodic sorters was done by Bilardi [3]. There it was shown that 
the balanced network can be obtained from Batcher s bitonic merging network by permuting input and output 
lines. It M fimther shown that there is a class of networks whose mem­bers are obtained by reversing 
the direction of certain comparators in Batcher s merging network, and which have the same effect on 
each vector as does the bal­anced network, provided that a fixed permutation of the input lines is first 
made. Thus they are periodic sorters. Rudolph [9] and Yen-Bastti-Leiss [11] have considered the robustness 
properties of the balanced periodic sorter. other subvector consisting of all the components with In 
this paper, we introduce a large class of merg­ing networks with N = 2k inputs/outputs and log N stages 
of comparator&#38; The balanced merger ia in­cluded in this class. A log N cascade of any merger in the 
class results in a periodic sorter. We provide a very simple and elegant proof of periodicity using the 
recursive structure of the mergers. This results in a much simpler proof than previously known for the 
balanced network. Other mergers in our class use less comparators than the balanced network. Our mergers 
are constructed using two basic de composition types. By using one decomposition type throughout the 
construction, we obtain the balauced network, with the maximum number of compar~ tore in the class. By 
using the other type of de­composition throughout, we obtain a merger with the minimum number of comparators 
in the class. The number of comparators in the latter network ia (N/2)(log N -1)+1, which is the same 
as that of Batcher s odd-even merger. In fact, it can be shown that these two networks are isomorphic, 
[fl. We give an account of the mergers in the class in terms of a decomposition tree. For N = 2k, this 
is a full binary tree with height k 1. We prove that either of the two decomposition types can be used 
for each non-leafnode in the tree. As a result, our class of mergers contains 22h-x -1 distinct networks. 
We ab30 identify a canonical subclass of our networks, with each merger having a distinct number of comparators 
in the range [(lV/2)(logN -1)+1, (N/2) log N]. Although we restrict our discussion in this paper tosize 
N= 2k mergers, our decomposition technique can be readily applied to obtain mergers (with peri­odic property) 
for any arbitrary size [71. 2 Chains and g-Chains For the analysis of periodic sorters, we need to explore 
diferent ways of dividing a vector into subvectora of equal size, where the size of a vector is the number 
of components. A vector of size N will be called an N-vector. We assume that all vectors are of size 
2k for some positive integer k. We will number the com­ponents of such a vector from O to 2k 1, and 
call these component numbers the indices of the vector. One way of dividing a vector into two subvectors 
is to have one subvector consisting of all the comp~ nents with even indices called the even chain and 
the odd indices called the odd chain. One can further divide each of these two chains recursively using 
the same rule , obtaining chains of diferent sizes up to chains of size 2. The components of a 2j-chain 
are the components of the original vector having identical k  j rightmost bits in the binary representation 
of their indices. For our analysis, we need tither to consider other waya of equally dividing a vector. 
We call the subvec­tora for these divisions generalized chains or in short g-chains, For each divkion 
into g-chains, one should be able to specify the components as being those com­ponents of the original 
vector having a certain reli+ tionship among the bits of the binary representation of their indices. 
In other words, the division ia accord­ing to some systematic rule that can be applied to an arbitrary 
vector of size 2m. In order to be useful in the construction of a periodic sorter, we will also require 
that the g-chain satis@ another condition which we call a transformation condition which will be specified 
in the section on transformers. Again we can further divide recursively each of the g-chains into g-chains 
obtaining g-chains of the original vector of diferent aizee down to size 2. The two main g-chain decompositions: 
Two possible g-chain decompositions are defined as follows, and are illustrated in Figure 1. 1. Let one 
g-chain have those components of v with the same rightmost two bits and let the other g chain have those 
components with diferent right­most two bits. These g-chains rue called cochains in [4], and we will 
use the same terminology. Figure l(a) shows the 23-cochaina of a 24­vector: One cochain is shown by 
solid lines (O, 3,4,7,8,11,12, 15) and the other cochain by dotted lines (1, 2,5,6,9,10,13, 14). 2. 
Let one g-chain have those components of v with second rightmost bit O and let the other g-chain have 
those components with second rightmost blt  1. We will call these g-chains the bichains since they are 
determined by the second rightmost bit. Figure l(b) shows the 23-bichaina of a 24-vector: One bichain 
is (O, 1,4,5,8,9,12, 13) and the other bichain is (2,3,6, 7,10,11,14, 15). Figure 2 illustrate recursive 
applications of cochain and bichain decompositions for a vector of size 16. D Examples of g-chains that 
are not useful for con­structing periodic sorters are the two subvectors, the first consisting of the 
firat half of the 2k-vector (left,­ ox .-..1 o ..-. ~,:. -­... .. >3 4< ;. :.5 ,.. 6 -t :- ... >7 8< 
:::.9 ...­,.-I@:: >11 ..... ..... 12< >.13 ,.. .. - ~4... .. w 15 / 14,< :.. -----­--15 Cochains Blchaina 
Figure bichains 1: The even/odd of a 24-vector. chains, cochains, and Cochai.ns Bichains Figure 2: 
Recursive applications of cochain and bichain decompositions of a 24-vector, down to the 4-g-chaina. 
most bit O), and the second consisting of the second half (Ieftmod bit 1). 3 The Transformer Our merging 
networka will be constructed recursively using smaller mergers followed by a trans~ormer stage. This 
section will establish some properties of such a transformer stage, We will assume in our terminology 
that an N-network has aa input and output an N­ vector. Definition of a 2k-Transformer: A 2~-transformer 
is a one-stage comparator network such that when it is applied to a vector whose two 2k 1-g-chains are 
sorted, it outputs a vector whose 2k -1 chains are sorted. We now introduce the two transformers that 
oper­ate correctly for the cochain and the bichain, respec­tively: I I I I I I Cotransformer Bitmnsformer 
Figure 3: The two 24-tranaformera. 1.For the cochaina of a 2k-vector, the correspond­ing cotransformer 
haa a comparator between components i and i + 1 for each even i < 2k. (See Figure 3.) 2. For the bichains 
of a 2k-vector, the corresponding bitransformer has a comparator between comp; nents i and i+ 1for each 
odd i < 2k 1. (See Figure 3,) Theorem 1 (Transformation Property) The co­ transformer and Transformer 
are the wrrect trans­formers for the cochain and bichain respectively. Proofi The proof follows easily 
from the simple fact that if a~bandc~d then min{a, c} s min{b, d} and max{a, c} s msx{b, d}. D Theorem 
2 (Preserving Property) Let j be any integer in the range [1, k 1]. If a 2k-tmnsformer is applied to 
a vector with sorted 2~-chains, then the redting vector will still have sorted 23-chains. Proof: Similar 
to the above proof. n We will need a further property of the transform­ers we have detined in order to 
wnstruct mergers. We will need to know that under certain conditions a transformer completely sorts a 
vector. The rank of an element of a vector y is the final position of that ele­ment in the sorted vector, 
with the smalleat element having rank 0, (For defining the rank, we assume a stable sort.) A 2k-vector 
y is said to be cobalanced if one of the elements with ranks (2i, 2i + 1) is in one cochain of y, and 
the other element ia in the other Cochain (o g i ~ 2~ 1 1). A 2k-vector g is said to be bibalanced if 
1. The smallest element (with rank O) iE in the the that bichain of y (i.e, the bicahin starting with 
element O of y). 2. The largest element (with rank 2k -1) is in the second bichain of y (i.e., the bichain 
starting with element 2 of y). 3. One of the elements with ranks (2i + 1, 2i + 2) is in one bichain 
of y, and the other element is in the other bichain (O ~ i ~ 2~-1 -2).  Theorem 3 Let a 2k-vector v 
be cobalanced (bibal­anced) and let its 2k-1 -cochains (bichains) be sorted wa th nxultant vector w. 
Then the cotransfornaer (bi­transfornaer) transforms w into a sorted vector. Proofi The cotransformer 
sorts vector w if (and only if) w(o), w(1) < w(2), w(3) <...< w(2~ 2), w(2k 1) and this holds if v 
is cobalanced and w has sorted Cochains. The bitranaformer sorts vector to if (and only if) w(0) is the 
minimum element, ?o(2~ 1) is the maxi­mum element, and w(l), w(2) < w(3), w(4) <... ~ w(2k -3), w(2k 
 2) and this holds if v is bibalanced and w hss sorted bichaina. 1 Theorem 4 A vector with sorted chains 
is cobal­anced and bibalanced. Proof: Deleted for this summary. D Corollary 1 Given a 2k-vector with 
sorted 2k-1­chains. The vector can be sorted by jirst sorting the 2k-1-cochains(bichains), and then applying 
the co­transformer(bitmns former). Proof: By Theorems 3 and 4. D 4 The Class of Merging Net­works In 
this section, we introduce our new class of merging networka. The proof of periodicity will be presented 
in the next section. Definition of a 2k-merger: When applied to a 2k­ vector whose 2k - l-chains are 
sorted, the merger out­ puts a 2k-vector which ia sorted. 4.1 The construction We will construct a 2k-merger 
by first choosing a g-chain decomposition for the 2k-vector, recursively constructing a 2k -1-merger 
for each of the two g­chaina, and then applying the appropriate trarw­former stage. We will describe 
the construction for­mally using the following procedures: AdEIZGEl?(IN :v, k, OUT :w) : Construct a 
2k­merger with input vector v and output vector w.  DIVIDE(IN :v, k, gchain, OUT :Vl, U2) : This procedure 
takes as input a 2k-vector v and gives as output its two 2k -l-g-chains of the type indi­cated by variable 
gchain, where VI ia the g-chain containing the first component of v.  UNITE(IN :Vl, U2, k, gchain, OUT 
:v) : Per­form the inverse operation to DIVIDE.  TRANSFORMER(IN :v, k, gchain, OUT :w): Apply the 2k-T!ra&#38;former 
associated with gchain to v putting the result in w.  Procedure MERGER(IN :u, k, OUT :w) if k = 1 then 
apply a single comparator else Choose either Cochain or Bichain deeomp~ sition. Let gchain be the type 
chosen. DIVIDE(U, k, gchain, U1, VZ); MERGER(u1, k 1, ~l); MERGER(vz, k 1, 22); UNITE(Zl, 22, k, gchain, 
z); TRANSFORMER(Z, k, gchain, w)  Note: If a cochain decomposition is chosen through­out the construction, 
the resulting network becomes the balanced network of [4, 5]. For k = 2 (i.e, 4merger), the two possible 
net­works generated by the above construction are shown in Figure 4. We will refer to the one with 4 
compar~ tora (i.e., cochain decomposition) aa quadratic, and the one with 3 comparators (bichain decomposition) 
as triangular. For k = 3, eight possible ~-merger networks are generated: There are two possible choices 
of g-chain decomposition for the 23 vector, and each 22-g-chain can be decomposed independently in two 
ways. , Quadratic Triangular Figure 4: The two possible 4mergers. Figure 5 shows four of the possible 
8-merger net­works. Each 8-merger in this figure uses the same construction for both of its 4merger subnetworks. 
Figure 6 shows the remaining four possible 8-mergers, where one type of 4merger is used for one subnetwork 
and another type for the other subnetwork. (The t­tal number of comparators ia shown for each network.) 
These figures are explained further in the followiug paragraphs. In our drawing of the mergers (Figure 
5), we have introduced a style which combines the recursive draw­ing of Batcher [2] with the line-representation 
of Knuth [6], where a comparator is shown as a ver­tical line connecting the proper input lines. This 
graphical representation enjoys the simplicity of line­representation, while highlighting the recursive 
na­ture of the network. Note that the input lines are shown passing through only the box representing 
the subnetworks in which they have comparators applied to them. (The firat network in Figure 5 is the 
bal­anced network.) A disadvantage of the graphical rep­resmtation is that it does not reflect the actuzd 
mun­ber of phasea, since a phase may consist of parts of two or more different boxes. Thus we draw on 
the right the presentation which groups the comparators in each stage together. The decomposition tree 
corresponding to a 2k­merger is full binary tree of height k 1, (See Fig­ure 6.) The root of the tree 
represents the 2~-vector at the output of the last stage of the network. The two children of the root 
node are its two 2k-1-g-chains de­termined by the type of decomposition at that node, and so on. Each 
leaf node corresponds to a single comparator at the first stage of the network. Figure 7 illustrates 
mixing of decomposition types for a 24-merger.  4.2 Number of 2~-mergers Let ~(k) be the total number 
of distinct 2*-mergers generated by our construction. There are two pcmai­ble choices of decomposition 
for the 2k-vector (associ­ated with the last transformer stage in the network). 360 (a) Cochain and 
 (b) C xhain and (c) Bichain and  L iil (d) Bichain and Figure 5: The 8-mergers which subnetworks. 
(The righthand ments of those on the left). 12   ZEiE Quadratic Triangular 11 Z!iz Quadratic Triangular 
use identical 4merger networks are rearrange (IJ c > \4 11 lJ B > ~,6 1 I I 2 ] 3 4 II + +1 I 7 I 
I ? 8 8 9­ 10__ . 9 10 11 12- I 11 Iz u 14 l.! Figure 6: The 8-mergers which use different 4merger mbnetworks. 
(The decomposition tree is shown next to each network: B=bichai.n decomposition, C=cochain decomposition.) 
Figure 7: (B=bichain tiorl.) A 24-merger and decomposition, its decomposition-tree. C=cochain decomposi­ 
 And each 2k-1-merger is instructed independently in ~(k -1) possible ways. Thus, f(k) ={ ;f2@-1) : 
:;. Y The solution of this recurrence is f(k) = 2 - - . There is an intuitive explanation for the number 
of networks, ~(k), in terms of the decomposition tree. This is a full binary tree of height k 1 corresponding 
to a 2k-merger. The total number of internal nodes (non-leaves) in the tree is 2k-1 1. For each internal 
node, there are two possible choices of decomposition. Thus the total number of distinct networka in 
the class is as given above. 4.3 Number of comparators Let N = 2k be the the number of inputs/outputs. 
First, let us consider the 2k-merger constructed by choosing a cochain decomposition throughout, i.e., 
the balanced network. This produces a network with the maximum number of comparators in the class. The 
number of comparators for this special case is 2cmaz(k 1) + 2k -l, k >1 cma=(~) = 1, k=l. { Thus, Cm==(k) 
= k2k-1 = (N/2) log N. An intuitive way of seeing this is by observing that there are k stagea and exactly 
2k-1 comparators per atage. The number of comparators in this network is the same as that of Batcher 
s bitonic merge net­work. In fact, the two networks can be shown to be isomorphic [3, 7]. At the other 
end of the spectrum, if a bichain de­composition is chosen throughout, a network results with the least 
number of comparators: 2Cmin(k -1)+ 2k-1 -1, k >1 Gain(k) = ~, k=l. { Thus, C ~in(k) = k2k-1 2k-1+1 = 
(N/2) logN N/2+1. The number of comparators in this network is the wune as that of Batcher s odd-even 
merge network. In fact, it can be shown that these two networks are also isomorphic [7]. Now for any 
arbitrary network in the class, the number of comparators may be easily derived using the demmposition 
tree. As observed above, thistree ha Zk-1 -1 internal nodes, each with two possible choices of decomposition. 
For each node, a choice of bichain partitioning results in one less comparator, as compared to a choice 
of cochain partitiotig. Thus, if ,8 is the number of nodes in the tree which use a bichain-decomposition, 
then the number of compara­tors in the network is C(k, ~) = k2k-1 -/3, where O s @ g 2k-1 -1. The number 
of distinct net works in the class with this many comparators is (The total number of networks in the 
CISSSis ~(k) = 2 - -1 E(k, ~) = 22 -1-1, as detived earlier.) Zfi.o Let S(k, ~) be the subset of networks 
with C(k, /?) comparators. We have identified a canonical subclass of our networks which contains exactly 
one network from each S(k, /3), O ~ /3 ~ 2k-1 1. The canonical sub class consists of these networks 
which use the same choice of decomposition for all nodes at each level of the decomposition-tree. Let 
1 if all level j nodes use bichain decomp, 6j = { O if all level j nodes use cochain decomp. (The root 
of the tree is at level O.) There are 2j nodes at level j. Therefore, the number of comparators in the 
corresponding 2k-merger network is k-2 j =0 Let the binary representation of@ (O ~ /? ~ 2k-1 1) be &#38;#&#38;a. 
-. Po. To construct the canonical net­ work wrresponding to each B (i,e., the network with C(k, /3) wmparators), 
we simply ChOCW 6j = Bj, 0< j<k 2,  4.4 The correctness of a 2~-merger Now we will formally prove that 
any 2k-merger con­structed as above works correctly. Recall a 2~-chain of a 2k-vector v, where j < k, 
is a subvector of v consisting of 23 elements whose indices are the same in the rightmost k j bits. 
There are 2k-j such 2~­chains. The 2j-chain of v starting with element i of v will be denoted as ~ k(v), 
O ~ i ~ 2k-j -1, (Thus, the even and odd chains of a 2k-vector v are C$-l k(v) and Cf-l k (v), respectively.) 
 Lemma 1 Let VI and Vz be the 2k-1-g-chains (either wchains or bichains) of a 2k-vectorv. The even and 
oddchainsofvl andvz are2k-2-chainsofv. Hence, 2~-chainsofvl andva are2j-chainsofv, j~k 2. Proofi Tkivial. 
D Theorem 5 If the even and odd chains of the input­vector to a 2k-merger a= sorted, then the complete 
2k-output-vector will be correctly sorted. Proofi By induction on k. For k = 1, a 2-merger is a single 
comparator which obviously worka correctly. For the induction step, we will assume that the cor­rectness 
holds for k -1, and we will prove the cor­rectness for k. B.ecall the recursive structure of a 2~-merger 
net­work: It consists of two 2~-1-merger subnetworka, constructed independently, followed by an appropri­ 
ate transformer stage. Each subnetwork operatea on a 2k -l-g-chain of the input vector. Now, since 2k­ 
l-chains of the input vector are sorted, 2k-2-chaina of the input vector are also sorted. By the above 
lemma, the latter means that the even and odd chains of the input vector to each subnetwork are sorted. 
By the induction hypothesis, each subnet­work will correctly produce a sorted Zk-l output vec­tor. This 
means that the g-chains of the initial input­vector have been sorted by the subnetworka. Hence, by Corollary 
1, the transformer stage will correctly produce a sorted 2k output vector. 1 Periodic Sorting Networks 
 Now we will prove that cascading k copies (replic* tions) of a 2k-merger, as constructed in the last 
sec­tion, results in a sorting network. This is proved easily by the following additional property of 
our merging networks. Theorem 6 Consider any 2k-merger network. Let j be an integer in the range [1, 
k]. It each 2~-1-chain of the input-vector is sorted, each 2j -chain of the output­vector will be sorted. 
Proofi The proof ia by induction on k. For j = k, the theorem is the same as Theorem 5. Thus, we will 
only consider j < k. For k = 1 (i.e, a single compara­tor) the theorem holds trivially. Now, assuming 
that the theorem holds for k 1, we will prove the theorem for k. Each 2i-%hain of the input vector is 
sorted. For j ~ k 1, we know horn Lemma 1 that each such chain is a 2i-%hain of the input vector to a 
subnetwork of size 2k-1. Thus, by the induction hypothesis, the 2i­chains of the output vector of each 
subnetwork will be sorted. Now, having established the above condition, let us see the efFect of the 
last 2k-transformer stage for the twocases ofj=k-landj <k-1: 1. For j = k 1, the above condition means 
that each 2k 1-g-chain of the vector at the input of the transformer stage is sorted. By Theorem 1, the 
transformer will produce sorted 2k 1-chains, which are 2j-&#38;ti. 2. For j < k 2, by Lemma 1, the 
above condi­tion m&#38;ns that 2j-chaina of the vector at the input of the transformer stage are sorted. 
From Theorem 2, we know that the transformer stage will preserve this property (as if the transformer 
stage did not exist) and output sorted 2j-chains.  o Corollary 2 Cascading k copies of any 2k-merger 
network results in a sorting network (with ezactly k2 stages). Pro&#38; Follows immediately horn the 
above th­rem. D Figure 8 shows a size 16 periodic sorter, which is constructed by wcading four copies 
of the 24-merger of Fig. 7. A atage marked as T (transform) corr~ sponda to case 1 of Theorem 6, and 
a stage marked as P (preserve) corresponds to case 2 of the theorem. References [1] M. Ajtai, J. Komlos, 
and E. Szemeredi, An O(n log n) sorting network, Combinaiorica, vol. 3, 1983, pp. 1-19. [2] K.E. Batcher, 
Sorting networka and theix appli­cation, Proc. AFIPS 1968 Spring Joint Com­pwter Con~ vol. 32, 1968, 
pp. 307-314. [3] G. Bilardi, Merging and sorting networka with the topology of the Omega network, IEEE 
llansactions on Computers, vol. 38, no. 10,1989, pp. 1396-1403. o 1 2 3 4 5 6 -J 8 9 10 11 12 lzl 14 
15 0 1 2 3 4 s 6 7 8 9 10 11 12 13 14 15 {M T P P} {M MT P} {M M M T}{M M M M} .. .. . ..-. >. . . . 
. . . . . . . . . . . . . . . . .. .. .. ... . . . . . . . . . . . . . . . . . . . . . . . .~ .. ., .. 
. . . . . . . . . . . . . . . . . . . . . . . . .. .. .. . . . . . . . . . . . . . . . . . . . . . . 
. . .. .- Figure 8: A 24 periodic sorter, using the 24-merger of Fig. 7. (M=merging, T=transform from 
g-sorted to chain-sorted, P=preserve chain-sorted.) [4] M. Dowd, Y. Perl, L. Rudolph, and M. Saks, The 
periodic balanced sorting network, Jour­nal of the ACiUj vol. 16, no. 4, 1989, pp. 738-757. [5] M. Dowd, 
Y. Perl, L. Rudolph, and M. Saka, The balanced mrting network, in Proceedings of the t?nd ACM Symposium 
on Pn nciples of Distributed Computing, Montreal, 1982, pp. 161­ 172. [6] D.E. Knuth, The Art of Computer 
Programming, Vol. 9 \ Sorting and Searching, Addison-Wesley, 1973. [7] D. NaArni, R. Becker, and Y. 
Perl, Generalia&#38; tiona of the claw of g-chain periodic aortera and relations to Batcher s networks, 
in preparation. [8] Y. Perl, Better understanding of Batcher s merging networks, Discrete Applied Mathemat­ics, 
vol. 25, 1989, pp. 257-279. [9] L. Rudolph, A robust sorting network? IEEE 7Yansactions on Computers, 
vol. C-34, 1985, pp. 326-335. [10] H. Stone, Parallel processing with the perfect ahuflie, IEEE Transactions 
on Computers, vol. c20, 1971, pp. 153 161. [11] I. Yen, F. Bastani, and E. Leias, An inherently fault 
tolerant sorting algorithm, Int. Parallel Proc. Symp., April 1991, pp. 37-42.   
			