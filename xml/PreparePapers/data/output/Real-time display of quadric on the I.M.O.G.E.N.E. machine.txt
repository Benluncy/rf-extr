
 Real-time Display of Quadric Obj:cts in the I.M.O.G.E.N.E. Machine Sylvain KARPF, Chl~stophe CHAILLOU, 
Eric NYIRI, Michel MERIAUX Laboratoire d Informatique Fondamentale de Line -URA 369 CNRS Bat M3, University 
de Line Flandres-Artois 59655 VILLENEUVE D ASCQ CEDEX -FRANCE Phone (33) 20434258-Fax (33) 20436566 e-mail: 
karpf@ lifl.lifl.fr Abstract 1 Introduction Many papers have been published for the definition of Scan-conversion 
is a strong bottleneck in the fast display machines using massive parallelism and VLSI visualization 
process. A huge amount of computation is components. Our goal is to design a real time object oriented 
required to convert objects into pixels. For example, the graphics system. To guarantee realtime, we 
choose to design display of 1000 objects whose average surface is 1,000 an object machine without frame 
buffer. Each object pixels requires 1,000,000 computations. processor handles one 3D object. All the 
processors are Many specialized chips have been developed to synchronous and work simultaneously on the 
same pixel. A handle this part of the visualization process. Most of them pipelined tree achieves inter 
objects processing (at least (PRC [19], SAGE [10], Silicon Graphics [1][2], PROOF hidden part elimination) 
and feeds a shading post processor. [18]) use 3D triangular facets with depth and intensity being We 
have built an Elementary Processor computing the interpolated from the exact values at the vertices (this 
expression: Z=aX2+bY2+cXY+dX+ eY+F for each pixel method was proposed by Gouraud [13]). GSP-NVS [7] also 
(X,Y). As we cannot define true quadric surfaces with such uses triangles, but with depth and nomlal 
interpolations. expressions, we had to look for accorate approximations (we Shading is then post-processed 
according to Phong s method have approximated spheres and cylinders with Phong s [16]. Hidden part elimination 
is achieved with the Z buffer shading). To overcome this limitation, we have defined a algorithm. This 
organization has many advantages:  true Quadratic Elementary Processor which can solve in Bilinear interpolators 
can be easily integrated with a real-time the general quadric equation: reasonable complexity.aX2+bY2+cZ2+dXY+eXZ+ 
fYZ+gX+hY+iZ+j = O (this  Current graphics modelers use triangular tessellation requires a real time 
square root extractor). Such processors in order to model objects (spheres, cylinders, cones, allow us 
to define a Quadric Object Processor that can salines,...).display true quadric surfaces in real time. 
Gouraud s interpolation method leads to correct visual results (even better with Phong s method). Keywords: 
Image synthesis, graphics hardware, quadric However, choosing triangular facets as basic graphics modeling, 
massive parallelism, real-time animation. primitives has some drawbacks:  Neither the borders of the 
objects, nor the intersections between objects are very accurate. A high number of triangles is required 
to model a * This work is supported by French Research Program on simple object (a sphere may contain 
several hundreds of New Architectures (PRC ANM) facets). When an object moves (especially if its size 
increases permi.mien to Gopywithout feed or part of this IIIr&#38;fial is granwd p~足 or decreases), 
tessellation must be recomputed in order to vided that the copies are not made or distributed for direct 
commercial advantage, the ACM copyright notice and the titte of the publication and keep its border as 
accurate as possible. its date appear, and notice is given that copying is by permission of the Association 
for Cornpudng Machinery. To CQpyotherwise, or to repubtish, To overcome these drawbacks, new architectures 
requires a fee and/or specific permission. using higher level graphics primitives have been developed 
@ 1991 ACM 089791427-9/91 /ooo6/0269 $1.50 Pixel-Planes 4 [8] and the Stellar Workstation [3] allow 
direct visualization of spheres (a pre-processing is required in Pixel-Planes). Pixel-planes 5 [9] computes 
for every pixel (x,y) the quadratic expression V(x,y)=Ax2+By2+ Cxy+Dx+Ey+F. Such expressions allow direct 
display of spheres and cylinders, using depth approximations (true depth values require a square root 
computation). The Ray-Casting machine [15] directly displays objects built by CSG from graphics primitives, 
with ray足tracing. The graphics primitives used in this system are true quadric objects, computed from 
their equations ~2+bY2+cZ2+dXY+eXZ+fYZ+gX+hY+iZ+j=0. Many (near) real time graphics architectures have 
been proposed and built for the past ten years [11]. In this section we are only interested in systems 
displaying graphics primitives with their own specific chips. Systems based on several general purpose 
processors working in parallel (e.g. the Pixel Machine [17]) can generate high quality images (with ray-tracing 
or radiosity), but not in real time. The earliest systems developed specific chips to avoid some of the 
bottlenecks of the visualization process: geometric transformation (clipping...) in the Geometry Engine 
[6], objects to pixels transformation in the PRC chip [19]. Current graphics workstations use several 
specific processors working in parallel to speed up image generation. The Silicon Graphics 4D/240 GTX 
[1][2] uses 20 asynchronous processors, each one handling l/20th of the pixels. The Stellar GS 1000 [3] 
uses 16 processors working on 4x4 pixel blocks. These processors are quite powerful, and can for example 
compute Phong shading. These machines can display up to 100,000 Gouraud-shaded small triangles (average 
smface 100 pixels) per second. Recently, new research projects have been carried out to define more powerful 
graphics systems that can display up to 1,000,000 miangles per second. Such performances are reachable 
only with massively parallel systems which can be divided into two groups [11][4]: Pixel-oriented systems 
(processors are associated with pixels): * The SAGE chip [10] handles 256 pixels of a given scan-line. 
A system made of several SAGE chips could reucler 1,000,WO Z-buffered Gouraud-shaded polygons per second. 
* pixel-planes 4 [8] uses one processor per pixel. Each processor computes the value V(x,y)=Ax+B y+C 
for its own pixel (x,Y). The Pixel-Planes 4 system may be seen as an intelligent frame buffer , that 
can display up to 39,000 Gouraud-shaded polygons per second, or 13,000 smooth shaded spheres per second. 
In Pixel-Planes 5 [9], a graphics unit called the Renderer handles a 128x128 array of pixels, with one 
processor per pixel. Each processor computes a quadratic expression for its own pixel (x,y). A system 
with 8-10 Renderers could display up to 1,000,000 polygons per second, but can be an effective base for 
algorithm development too. Object-oriented systems (processors are associated with objects): * GSP-NVS 
[7] generates 3D triangles. Each object processor handles one 3D triangle at a given scan足line. A pipeline 
of object processors makes hidden part elimination, and feeds a shading post-processor (Phong shading 
with 5 light sources). GSP-NVS could display 1,000,000 ~iangles per second. * PROOF [18] is quite similar 
to GSP-NVS, but includes pixel oversampling, which greatly improves image quality. The purpose of this 
paper is to present the I. M. O. G. E.N.E. machine (Image by Means of Objects GeneratEd by Numerical 
Expressions), which is our solution to the real time animation problem. We first describe the global 
architecture of the machine, then present the two generations of hardware high level graphics primitives 
we have implemented. 2 Architecture of I.M.O.G.E.N.E. Our purpose is to propose an architecture for a 
true real-time graphics system (see figure 1). Its main characteristics are: A massively parallel architecture, 
which is the only solution to the real-time problem. Au object-oriented machine architecture. As objects 
are independent, the host computer computing the animation and feeding the graphics module can be a parallel 
computer. Such an approach solves the problem of insufficient front足end computation power. Each Object 
Processor handles one object per frame. To limit the number of Object Processors, we intend to use high 
level graphics primitives. The whole graphics module works at pixel rate, which guarantees real time 
display. Moreover, the classical frame buffer, which is always a strong bottleneck, becomes useless. 
 Driving module (host) Graphics module Figure 1: Architecture of LM.O.G.E.N.E. We will now briefly describe 
the units of the I.M.O.G.E.N.E. machine. A more detailed description can be found in [5]. 2.1 The graphics 
module The Graphics Module includes the Object Processors, the Decision Unit and the Shading Processor. 
Each Object Processor handles one 3D object. All the Object Processors am synchronous (they work simultaneously 
on the same pixel), and work at pixel rate. At a given pixel (x,y), each Object Processor must deliver 
for its own object the following data: The depth of the object. The normal to the object. w The features 
of the objeet (texture, color...) The Decision Unit is a pipelined tree handling all the inter-object 
processing (at least hidden part elimination with a distributed Z-buffer) at pixel rate. The Shading 
Processor receives for each pixel (x,y) the visible object, and makes shading computations according 
to Phong method (with diffuse and specular reflections) with several light sources. This unit is heavily 
pipelined, and works at pixel rate. The whole graphics module is pipelined and built in hardware.Each 
unit works at pixel rate. 2.2 The Driving Module This module is a program running on a general purpose 
computer, and can be divided into three units: The configuration unit allocates the objects to the Object 
Processors and programs the Decision Unit if necessary. The animation unit sets the objects and the light 
sources in the scene. The computation unit computes the animation and delivers the corresponding data 
to the Objeet Processors. In the following, we will only focus on the description of the Object Processors. 
3 First generation of graphics primitives on I.M.O.G.E.N.E. 3.1 Introduction It is quite uneasy to choose 
the Object Processors, since on one band this choice determines the kind of scenes that can be displayed, 
and on the other hand the VLSI feasibility. Indeed, if we choose a too simple basic object, the number 
of processors ueeessary for a good modelling will be very high; but if it is too complex, VLSI integration 
might be impossible Whatever the Object Processor may be, it has to indicate the decision unit whether 
the corresponding objeet is present or not at the current pixel. If so, it outputs to the decision unit 
the depth of the object and the normal components at this point. Moreover, it seems interesting to choose 
objects as close as possible to the structure they have in the database, in order to limit the host work. 
We have chosen rather complex basic objects, which implies rather complex Object Processors, although 
they are composed of several Elementary Processors working synchronously in parallel. 3.2 The first and 
second order Elementary Processors The Object Processors have to output values all over the screen. The 
Elementary Processors must have the same features; moreover, these values must be produced with the correet 
sequence (i.e., after the value in (x, Y), they have to produce the value in (x+ 1,y) then (x+2,y)...). 
A simple solution consists in defining the Elementary Processor as an entity computing an expression 
V(x,y)=Ax2+By2+Cxy+Dx+Ey+F (or F(x,Y)=Ax+BY+C), with A, B.. .F integer constants and (x,y) the pixel 
coordinates; this value can be incrementally computed at pixel rate for every pixel (x,y). Let LM consider 
that this choice is not at all arbitrary, since the Pixel-Planes project [8] [9] [12] has clearly shown 
that such expressions could model rather realistic scenes. Such expressions can be quite easily computed 
at screen rate with a classical forward difference technique, which is well suited for hardware implementation. 
Figure 2 shows the principle of a quadratic Elementary Processor and its hardware implementation using 
48 bits integers (24 for a first order Elementary Processor). This processor is controlled by a microprogrammed 
controller. First and second order Elementary Processors work at pixel rate. As we are building a 512x512 
prototype, they have to deliver one pixel every 60 nS (16 Mhz). lvl1<--2A, M2c--2B,M3<-C, M4<--E-B,M5s-D-A, 
M6<-F For every screen line Do /registers set up/ RI<-M2, R2<-M4, R3<-M6 first adder computation second 
adder computation M4<-R2, M6<-R3 /registers backup/ R 1<-M3, R2<-M5 first adder computation M5c-R2, R1<-M1 
loading J Figure 2: Second Order Elementary Processor In the following, EP1 will mean First order Elementary 
Processor , and EP2 Second order Elementary Processor . 3.3 Building of an object To build au object, 
the outputs of the Elementary Processors may have the three following values: A binary value defining 
the 2D screen border of the object. The depth of the object in the screen reference. If the pixel (x,y) 
is out of the screen border of an object, then the depth is set to the highest depth value (Zmax). A 
component of the uomlal to the object. A pipelined tree (the Object Maker) combines these values to define 
the objects (see figure 3). NB: An object is also defined by its intrinsic features (e.g. its color). 
This value is constant, so we will not make it appear in our figures. Border [ Depth [ Normal [ Figare 
3: An Object Processor We will now describe the Object Makers for a triangle, a sphere and a cylinder. 
3.4 The Triangle Processor A 3D tiiangle is defined by the 3D plane it lies on, and by the intersection 
of three 2D half planes (see figure 4). If the triangle is part of a tessellated object, then the normal 
is computed by bilinear interpolation of the values at the vertices (Phong method [16]). If it is a true 
facet, then the normal is constant all over the facet. 1J Object Maker Object Processor Figure 4: The 
Triangle Processor 3.-5 The Sphere Processor Unlike the triangle, we cannot compute the Rue depth of 
a sphere, for it requires a square root evaluation. Indeed, the equation we can solve with one second 
order Elementary Processor is Z=aX2+bY2+cXY+dX+ eY+F. This equation allows us to define a true paraboloid, 
which can approximate the front half sphere with much accuracy. The equation of the best approximating 
paraboloid is the following: lslt . 157t . 21zR Z== X( Y Y1) + =X(.X JI) =+Z1 Let us note that Pixel-Planes 
4 and Pixel-Planes 5 [8][9] [12] also define spheres with paraboloids. However, their choice is different 
from our solution, because they use the same paraboloid for depth and border evaluation. Our choice is 
to define the true screen border of the sphere separately from the depth, so that we get a better approximation 
of the depth. A sphere is thus defined by (see figure 5) . one EP2 to define the true 2D border on the 
screen one EP2 approximating the front depth. Two EP1 to compute the components Nx and Ny (Nx and Ny 
are linear functions of x and y), one EP2 to approximate the component Nz (Nz is a linear function of 
x, yand z). EP2 z~ EP2 .. D ------足 - 1 z EP1 Nx * % EP1 .~o N N MAXZ 1%E P2 ~Z (Nx,NY.Nz) Figure 
5: The Sphere Processor 3.6 The Cylinder Processor A cylinder is made of two parts: the cylindrical 
surface and the front disc. We have to build the true screen border of each part. The border of the front 
disc is an ellipse, the one of the cylindrical part is more complex, and is built according to the method 
described in [12] (see figure 6). Border= ((PlmP2nP3nP4)uE2) -El Border=E 1 Figure 6: Screen border 
of a cylinder The depth of the front disc is the depth of the 3D plane it lies on. The normal to the 
front disc is constant. We cannot define the true depth of the cylindrical part with our Elemen&#38;y 
Processors. So the front half cylinder has to be approximated by a parabolic cylinder (see figure 7). 
Figure 7: A cylinder approximated with a parabolic cylinder Given MI(;)+) dx=xl -x2 dy=yl-y2 dz=zl-z2 
N1 =Tdx +dy N = Jdx2 +dy2 + dZ2 NxR T= NI ~ = (N1)2X64XR2 15x Ttx T the equation of the parabolic cylinder 
in the screen reference is: z= (f?#)xx2+(KJxyL2 x(9#2)xxxy   +~~-2x(*)xy,_2xg)xxqxx dyxdz [ ~-2x(W) 
x.r*-2x($)xyjxy Xxxy+ x.xl + xyl ( xd~xdy) :2 2 : 2 dxxdzxrl_dyxdz 21XIZ . xyl XT+Z1 2 26A N1 0 1 
 This expression can be conmuted by a second order Elementary Processor. 273 The three components of 
the normal to the cylinder are linear functions of x, y and z, and must be approximated by quadratic 
expressions too. Figure 8 shows the structure of a Cylinder Processor. Elementary Processors: o constant 
N o First order N o second orrjerN +Z Zbuffe! +N E-N Figure 8: The Cylinder Processor 3.7 Limitations 
The main limitations of this approach are: The objects we can define with second order expressions are 
approximated. So intersections of objects are not always very accurate (for example, a parabola or a 
segment instead of an ellipse). The approximations must be computed wheuever the objects move, which 
increases the host s work. . Objects more complex than cytinders (e.g. cones) cannot be easily built 
with second order expressions. We have to build at least three different kinds of Object Processors. 
To overcome these (strong) limitations, we have studied how to display Wle quadric objects with a single 
Qnadric Object Processor. 4 Second generation of graphics primitives in LM.O.G.E.N.E. 4.1 Solutions to 
the general quadric equation The quadric equation is Ax2+By2+Cz2+Dxy +Exz+Fyz+Gx+Hy+ Iz+J = O (l). Given 
S=EX+FY+I and T=AX2+BY2+DXY+GX+HY+J, (1) becomes: CZ2+SZ+T=0 (2). This quadratic equation can be easily 
solved. Given A=S2-LICT=f2(x,y), it follows that, if &#38;(), (2) has two ~oltltions: ~1. -S+JI ~2=-s-h 
and (assuming that 2C 2C c<> o). The coefficients of these expressions can be normalized, so that the 
solutions to (2) are zI .-S +&#38; and z2=-S -~ S is a first order expression, and so can be computed 
 with an EP1. A> is a second order expression, and so can be computed with an EP2. Given F(x,y,z) = AX2+By2+CZ2+DXy 
+EXZ+FyZ+GX+Hy+ IZ+J, the normal to the quadric is defined by (dF/dx, dF/dy, dF/dz). The three components 
of the normal Nx, Ny and Nz are Nx = 2Ax+Dy+Ez+G Ny = 2By+Dx+Fz+H Nz = 2Cz+Ex+Fy+I 4.2 Interpretation 
. The quadrics can be divided into seven groups: the ellipsoid, the cylinder, the cone, the paraboloid, 
the hyperboloid of one sheet, the hyperboloid of two sheets, and the hyperbolic paraboloid. If c=O, the 
solutions to (1) are a paraboloid or au hyperbolic paraboloid facing the screen (c=O involves that (1) 
has always a single solution all over the screen). The paraboloid can be built with one second order 
expression (see 3.5). As we will see later, we do not intend to use the hyperbolic paraboloid as a graphics 
primitive of I. M. O. G. E.N.E. So, in the following, we will only focus on the case where c-00. . Wheu 
A>O, the two solutions to the equation are the front and back depths of the quadric (see figure 9) . 
 Wheu A=o, the unique solution to the equation is the de@h of the border of the object. . When &#38;o, 
the equation has no solution. The pixel (x,y) is then out of the screen border of the quadric. 274 Figure 
9: Interpretation 4.3 Building of an object Except the ellipsoid, all the quadrics are infinite, which 
is not well suited for graphics primitives. In order to build finite primitives, we have decided to cut 
the quadric by two half planes perpendicular to its axis. Such a method eliminates quadrics with more 
than one axis (i.e. the hyperbolic paraboloid, which would require 3 half-planes). We have to build explicitly 
the true screen border of the new object. The method is the same as the one used for the approximated 
cylinder. Figure 10 shows the screen border of a truncated hyperboloid. ~rOntdisc These borders are defined 
by the sign of A P1 P2: L f ,, : j: El ~~ I i, ; \:L. J ON Border=E 1 Border=((PlnP2nA) uE2)-El Figure 
10: Screen border of a finite qnadric  4.4 Square root extraction True qyadrics require a real-time 
square root extractor. We use the method described in [14] to approximate the square root of an integer 
value X:. 2 n-l<X<2zIn) ~e~l if X is a2m bit integer (2 fi=~(X) =*+2m 1=Jv2m-1 Zm+l if X is a 2nk 1 
bit integer (22m-2~XK22 n-1) then fi=A(X) = 5+2 -1-2 -2 This method gives a rather accurate approximation 
(the error is about 6%). However, our simulations have shown that such an accuracy is much too low to 
approximate the depth of a quadric (intersections of objects are really different from the true ones). 
[14] also gives an iterative method to modify the initial value until a precise root has been evaluated 
&#38;A(X)-(A(~~~-x 2 This method requires about 4 iterations to get a precise root evaluation. However, 
as we intend to build a hardware square root extractor, we cannot afford more than one iteration. The 
error is then about 2~0, and our simulations have shown that this accuracy is adequate to approximate 
quadrics (intersections of objects are very close to the true ones). Figure 11 shows the functional scheme 
of the Square Root Extractor. Figurell: The Square Root Extractor 4.5 The Qnadric Elementary Processor 
QEP This processor solves the equation (1) (see 4.1). S is computed with one EPl, A>with one EP2. Then 
the QEP outputs the two solutions of the equation and the sign bit of A7 to allow further computation 
of the screen border. The functional scheme of the QEP is given in figure 12. Figure 12: The Quadric 
Elementary Processor  4.6 The Quadric Processor The Quadric Processor is quite similar to the Cylinder 
Processor described in section 3.6. In fact, we use QEP instead of EP2 for depth and normal computations 
(the three components of the normal are linear functions of x, y and z). At the moment, we do not intend 
to define hollow objects. We thus only need the front depth of an object (the QEP can deliver front and 
back depths). Figure 13 shows the Quadric Processor. Elementary Processors : o constant N> o EPI N) 
 o EP2 N; o QEP  z Zbuffe N N) 1 Ni Figure 13: The Quadric Processor 5 Current status and expected 
performance We are designing the second order Elementary Processor with a VLSI CAD software (standard 
cell 1.5P technology). We are also working on the design of the first order Elementary Processor, the 
Square Root Extractor and the Shading Processor. When all the chips are available, we intend to design 
a Quadric PCB that will display one quadric in real time, and a triangle PCB that will display several 
triangles in real time (512x512 50Hz non interlaced mode). Then several PCBS will be used to design a 
full scale prototype of the I.M.O.G.E.N.E. machine, which will of course only be able to display a small 
number of objects (but in real time). The driving module will be a Transputer-based parallel machine. 
The next step will be the design of an Object Processor Chip in full custom technology, which will allow 
us to build a more powerful prototype. Moreover, thanks to the evolution of integration technique, it 
will soon be possible to integrate several Quadric Object Processors into one chip. Then it will be pcssible 
to build a machine with 500 or 1,000 Object Processors which will be able to display up to 1000 quadrics 
simultaneously in real time, corresponding to 50,000 true quadrics per second (with a 50 Hz monitor). 
An equivalent tessellation-based graphics system would be able to display more than 1,000,000 Phong shaded 
facets per second. 6 Conclusion In this pa~r we have introduced a massively parallel object-oriented 
real time graphics system. We believe that the object approach is adequate to real time display, bc3CW 
S(3 it solves the problems of front-end power and frame buffer, which are the main bofflenecks in high 
speed graphics systems. We have described the hardware high-level graphics primitives of our system. 
Although high level primitives such as quadrics require a larger amount of hardware than classical triangles, 
we believe that they are an efficient solution for applications requiring real time performance with 
rather realistic objects (e.g. flight simulators, virtual worlds). 7 Acknowledgments We wish to thank 
Vincent Cordonnier for introducing us to this subject, and Samuel Degrande, member of our graphics team, 
for his work on the square root extractor. We also thank the referees for their valuable advice. 8 References 
[1] AKELEY K. The Silicon Graphics 4D1240GTX Superworkstation IEEE Computer Graphics rmd Applications, 
vol. 9 nmn. 4, JLdy 89, pp71-83 [2] AKELEY K. and JERMOLUK T. High-Performance Polygon Rendering ACM 
Computer Graphics, vol. 22 num. 4, August 19S8, pp 259足246 [3] APGAR B., BERSACK B. and MAMMEN A. A Display 
Sysiem for the Stellar Graphics Supercomput er Model GS1OO9 ACM Computer Graphics, vol. 22 man. 4, August 
1988, pp 255足262 [4] CHAILLOU C., KARPF S., MERIAUX M. and CORDONNIER V J.M.O. G.E.N.E: An Object Oriented 
Architecture fot-Real Time Image Genera lion Proc. ISMM It. Conf. on Parallel and Distributed Computing 
and Systems, Acts Press, October 90, pp 5-9 [5] CHAILLOU C., KARPF S. and MERIAUX M. 1.M.O.G.E.N.E: A 
Solution to the Real Time Animation Problem Advances in Compute~ Graphics Hardware V, Springer Verlag, 
1991,to appear in 1991 [6] CLARK J. The Geomet!-y Engine: A VLSI Geometry SYstem for Graphics ACM Computer 
Graphics, vol. 16 mnn.3, July 1982, pp 127-133 [7] DEERING M., WINNER S., SCHEDIWY B. and al. The Triangle 
Processor and Normal Vector Shader: A VLSI System for High Performance Graphics : ACM Computer Graphics, 
vol. 22 num. 4, August 1988, pp 21-30 [8] EYLES J., AUSTIN J., FUCHS H. and al Pixel-Planes 4: A Summary 
Advances in Computer Graphics Hardware II, Springer Verlag, 1988, pp 183-208 [9] FUCHS H., POULTON J., 
EYLES J. and al Pixel-Planes 5: A Heterogeneous Multiprocessor Graphics System Using Processor-Enhanced 
Memories ACM Computer Grrrphics, vol. 23 num. 3, Jrdy 89, pp 79-88 [10] GHARACHORLOO N., GUPTA S., HOKENEK 
E. and al Subnanosecond Pixel Rendering with Million Transistor Chips ACM Computer Graphics, vol. 22 
num.4, August 1988, pp41-49 [11] GHARACHORLOO N., GUPTA S., SPROULL R. and al A Characterization of 
Ten Razterization Techniques ACM Computer Graphics, vol. 23 mm. 3, July 89, pp 355-368 [12] GOLDFEATHER 
J., HULTQUIST J. and FUCHS H. iFast Constructive Geometry Display in tlw Pixel-Powers Graphics System 
ACM Computer Gmphics, vol. 20 mnn. 4, August 1986, pp 107足116 [13~GOURAUD H. Continuous Shading of Curved 
Surfaces IEEE Transaction on Computers, vol. C-20 num. 6, June 1971, pp 623-629 [14] HASHEMIAN R. Square 
Rooting Algorithms for Integer and Floating-Point Numbers IEEE Transaction on Computers, vol. 39 num 
8, August 1990, pp 1025-1029 [15] KEDEM G. and ELLIS J.L. The Ray Casting Machine Parallel Processing 
for Computer Vision and Display, Addison Wesley, pp 378-401 [16] PHONG B. T. Rumination for Computer 
Generated Pictures Communications ACM, vol. 18 num. 18, June 1975,pp311-317 [17] POTMESIL M. and HOFFERT 
E. The Pixel Machine: A Parallel Image Computer ACM Computer Graphics, vol. 23 num. 3, July 89, pp 69-78 
 [18] SCHNEIDER B.O. A Processor for an Object-Oriented Rendering System Computer Graphics Forum, num. 
7, 1988, pp301 -310  [19] SWANSON R. and THAYER L. A Fast Shaded-Polygon Renderer ACM Computer Graphics, 
vol. 20 nmn. 4, August 1986, pp 95-101  
			