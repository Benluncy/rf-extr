
 Software Reflexion Models: Bridging the Gap between Gail C. Murphy and David Notkin Dept. of Computer 
Science&#38; Engineering University of Washington Box 352350 Seattle WA, USA 98195-2350 {gmurphy, notkin}(lcs.Washington.edu 
Abstract Software engineers often use high-level models (for in­ stance, box and arrow sketches) to reason 
and com­ municate about an existing software system. One problem with high-level models is that they 
are al­ most always inaccurate with respect to the system s source code. We have developed an approach 
that helps an engineer use a high-level model of the struc­ ture of an existing software system as a 
lens through which to see a model of that system s source code. In particular, an engineer defines a 
high-level model and specifies how the model maps to the source. A tool then computes a software reflexion 
model that shows where the engineer s high-level model agrees with and where it differs from a model 
of the source. The paper provides a formal characterization of re­flexion models, discusses practical 
aspects of the ap­proach, and relates experiences of applying the ap­proach and tools to a number of 
different systems. The illustrative example used in the paper describes the application of reflexion 
models to NetBSD, an im­plementation of Unix comprised of 250,000 lines of C code. In only a few hours, 
an engineer computed sev­eral reflexion models that provided him with a useful, global overview of the 
structure of the NetBSD vir­tual memory subsystem. The approach has also been applied to aid in the understanding 
and experimen­tal reengineering of the Microsoft Excel spreadsheet product. *This research was funded 
in part by the NSF grant CCR-8858804 and a Canadian NSERC post-graduate scholarship. Permission to make 
digitallhard copies of all or part of this material with­out fee is granted provided that the copies 
are not made or distributed for profit or commercial advantage, the ACM copyrightkerver notme, the title 
of the publication and its date appear, and notice is given that copyright is by permission of the Association 
for Computing Machinery, Inc. (ACM). To copy otherwise? to republish, to post on servers or to redistribute 
to lists, requires prior specific permission and/or a fee. SIGSOFT 95 Washington, D.C., USA 01995 ACM 
0-89791 -716-2/95/0010...$3.50  Source and High-Level Models* Kevin Sullivan Dept. of Computer Science 
University of Virginia Charlottesville VA, USA 22903 sullivan@cs. Virginia. edu 1 Introduction Software 
engineers often think about an existing software system in terms of high-level models. Box and arrow 
sketches of a system, for instance, are often found on engineers whiteboards. Al­though these models 
are commonly used, rea­soning about the system in terms of such models can be dangerous because the models 
are almost always inaccurate with respect to the system s source. Current reverse engineering systems 
derive high-level models from the source code. These derived models are useful because they are, by their 
very nature, accurate representations of the source. Although accurate, the models created by these reverse 
engineering systems may differ from the models sketched by engineers; an exam­ple of this is reported 
by Wong et al. [WTMS95]. We have developed an approach, illustrated in Figure 1, that enables an engineer 
to produce sufficiently accurate high-level models in a differ­ent way. The engineer defines a high-level 
model of interest, extracts a source model (such as a call graph or an inheritance hierarchy) from the 
source code, and defines a declarative mapping between the two models. A software rejlexion model is 
then computed to determine where the engineer s high-level model does and does not agree wit h the source 
model.1 An engineer in­terprets the reflexion model and, as necessary, modifies the input to iteratively 
compute addi­tional reflexion models. 1The old English spelling differentiates our use of re­flexion 
from the field of reflective computing [Smi84]. reted By / \ Detines  Y3=- q Input Input Produces Source 
Source Extraction Code Tool Model O* Figure 1: The Reflexion Model Approach In essence, a reflexion model 
summarizes a source model of a software system from the view­point of a particular high-level model. 
This form of summarization is useful to engineers perform­ing a variety of software engineering tasks. 
In one case, an engineer at Microsoft Corporation, prior to performing a reengineering task, applied 
reflexion models to help understand the struc­ture of the Excel spreadsheet product. In an­other case, 
computing a sequence of reflexion models highlighted several places where calls be­tween modules violated 
the layers of the software architecture that an engineer had perceived to exist. We have developed several 
techniques for sim­plifying the engineer s task of defining high-level models and mappings. We have also 
developed tools that compute reflexion models for large sys­tems in a minute or two. As described in 
Sec­tion 2, these techniques and tools have made it possible for an engineer, in a few hours, to bet­ter 
understand a system of several hundreds of thousands of lines of code. To clarify the meaning and computation 
of re­flexion models, we present a formal characteri­zation of a reflexion model system in Section 3. 
The flexibility of our approach is demonstrated in Section 4 through descriptions of the use of re­ 
flexion models in a variety of settings. Section 5 considers the theoretical and practical perfor­mance 
aspect of the approach and our tools. In Section 6, we discuss key aspects of the approach that provide 
software engineers with the needed flexibility y. Section 7 considers related work. 2 An Example To convey 
our basic approach, we describe how a developer with expertise in Unix virtual mem­ory (VM) systems used 
reflexion models to fa­miliarize himself wit h an unfamiliar implement a­tion, Net BSD. The system is 
composed of about 250,000 lines of C [KR78] source code spread over approximately 1900 source files. 
The developer first specified a model he be­lieved, based on his experience, to be characteris­tic of 
Unix virtual memory systems. This model consists of a modularization of a virtual mem­ory implementation 
and the calls between those modules (Figure 2a). A calls relation between NetBSD functions was then computed 
using the cross-reference database tool (xrefdb) of Field [Rei95], and a small awk [AKW79] script was 
written to trans­late the output of Field into our input format. The extracted calls relation consisted 
of over 15,000 tuples over 3,000 source entities.2 Next, the developer defined the following map­ping: 
[ file=. *pager. * mapTo=Pager ] [ f ile=mn-xnap. * mapTo=VirtAddres sMaint 1 [ f ile=vm_f ault\. c mapTo=KernelFaultHdler 
1 [ dir= [un] fs mapTo=FileSystem 1 [ dir=sparc/mem. * mapTo=Memory 1 [ f ile=pmap. * mapTo=HardwareTrans 
1 [ f ile=vm_pageout \. c mapTo=VMPolicy 1 Each line in this declarative map associates en­tities in 
the source model (on the left) with enti­ties in the high-level model (on the right). The seeming difficulty 
of defining a mapping given the thousands of entities in the NetBSD source 2Each tuple cent ained the 
name of the calling function, the name of the called function, and the file and directory information 
for both functions. Memory ,= HardwareTrans I {b  ,tl I I I KemelFaultHdler I Pager FileSystem &#38;) 
L VirtAddressMaint II \ User / d+ II  n 0 * calls (a) High-level Model Figure 2: High-level and Reflexion 
 uMemory .: ;0:0 . v // / , , 4 I I I I I I I I I I 16 I I I I I I 4 I .. (0 ;0 ., I . . . . I \ l-l 
User . \ \ \ \ I I I I 3 ;6 I I I 16 I 1 I I I I I / / ,  - n Module > Convergence - ­ --> Divergence 
>Absence ...........  (b) Reflexion Model Models for the NetBSD Virtual Memory Subsystem 20 model is 
mitigated in three ways. First, the engi­neer only named entities in subsystems of inter­est. For example, 
the mapping above does not consider entities from the 1/0 subsystem. Sec­ond, the physical (e.g., directory 
and file) and logical (e.g., functions and classes) structure of the source are used to name many source 
model entities in a single line of the mapping. In this case, only physical structure is used since C 
pro­vides little logical structure. Finally, regular ex­pressions are used to obviate the need to enu­merate 
a large set of structures. For instance, the first line of the mapping states that all func­tions found 
within files whose name includes the string pager should be associated with the high­level model entity 
Pager. Given these three inputs, a reflexion model was computed to compare the source and high-level 
models (Figure 2b). The solid lines show the con­vergence, where the source model agrees with the high-level 
model. For instance, as the de­veloper expected, there were calls found in the source between functions 
in modules implement­ing VMPolicy and functions in modules imple­menting Pager. The dashed arrows show 
the divergences, where the source model includes arcs not predicted by the high-level model. For in$tance, 
the dashed line from FileSystem to Pager indicates that functions within modules mapped to FileSystem 
make calls to functions within modules mapped to Pager. The dotted lines show the absences, where the 
source model does not include arcs predicted by the high-level model. For instance, no calls were found 
be­tween modules mapped to Pager and modules mapped to FileSystem. The number associated with each arc 
in the figure is the number of source model relation values mapped to the convergence or divergence; 
absence arcs are annotated with the value zero. Computation and display of the reflexion model shown 
in Figure 2 takes twenty seconds on a DEC 3000/300 with our tools, which con­sist of several small C++ 
[Str86] programs and a user interface implemented in TCL/TK [OUS94]. Computed reflexion models are displayed 
using AT&#38;T s graphviz package. The tools allow the engineer to select arcs in a reflexion model, 
pro­ducing displays of the associated source model tuples. The screen snapshot in Figure 3 includes a 
window Arc Values that shows the result of selecting the divergence between FileSystem and Pager. Values 
in this window show the call­ing and called functions, including their directory and file information. 
 In a one hour session, the VM developer was able to iteratively specify, compute and interpret several 
reflexion models. (The source model was extracted beforehand, and it was not changed during this session.) 
Informally, the developer found the representation of the source code as a reflexion model useful in 
providing a global overview of the structure of the NetBSD im­plement ation. For example, from studying 
spe­cific divergences, the developer concluded that the implement ation of FileSyst em included op­timization 
that rely on information from pager. This information is useful for planning modifica­tions to either 
module. 3 Formal Characterization To make precise the meaning and computation of a reflexion model, we 
present a formal speci­ fication of a reflexion model system using the Z specification language [Spi92]. 
 3.1 Reflexion Model A static schema in Z describes a state the sys­tem can occupy as well as invariants 
that must be maintained across state transitions. Any sys­tem implementing the reflexion model approach 
must maintain the state components and in­variants described in the ReflezionModel schema presented below. 
The ReflexioniWodel schema uses two basic types, HLMENTITY, which represents the type of a high-level 
model entity and SMENTITY, which represents the type of a source model entity. Four type synonyms are 
also defined: HLMRelation and SiWRelation, which define re­lations over high-level model entities and 
source model entities respectively, and HLMTuple and SMTuple, which define the types of tuples in the 
HLMRelation and SMRelation. M file function dir file function Figure 3: The Reflexion Model Tool User 
Interface [HLMENTITY, SMENTITYj by the divergences variable describes where a source model differs from 
a high-level model; and the relation described by the absences vari- HLMReiation == HLMENTITY +-+ HLMENTITY 
able defines where a high-level model differs SMRelation == SMENTITY ++ SMENTITY from a source model. 
The fourth variable, HLMTuple == HLMENTITY x HLMENTITY SMTupie == SMENTITY x SMENTITY mappedSourceiWodel, 
defines a relation t hat de­scribes which source model values contribute to a convergent or divergent 
arc in the reflexion ReflexionModel r model. The information in mappedSourceA40del convergence : HLMRelation 
divergences : HLMRelation is used to support operations that aid an engi­absences : HLMRelation neer 
in interpreting a reflexion model, For ex­mappedSourceModel : HLMTuple * SMTuple ample, the information 
in mappedSourcehlodel is necessary to support a query of the form shown convergence n divergences = 0 
in Figure 3. divergences n absences = 0 convergence n absences = 0 In addition to declaring the state 
components dom mappedSourceModel = of a reflexion model, the static schema includes convergence U divergences 
 the definition of constraints (below the divid­ing line) that must be satisfied by all reflexion The 
variables (above the dividing line) in the model systems. The first three constraints state schema define 
the information that must be that the values of the convergence, divergences maintained by a reflexion 
model system. The and absences relations are disjoint. The fourth relation described by the convergence 
variable constraint states that the investigation of the defines where a high-level model agrees with 
source model values contributing to a reflexion a given source model; the relation described model arc 
is only meaningful for values in the convergence and divergences relations; absences have no contributing 
source model values. 3.2 Computing a Reflexion Model The dynamic schema, ComputeReflexionModel, presented 
below, describes the computation of a reflexion model from three inputs: a high-level model, a source 
model, and a mapping from the source to the high-level model. The high­level model (Mm?) is described 
as a relation over high-level model entities, and the source model (srn?) is described as a relation 
over source model entities. The mapping (map?) is an ordered list of map entries. Each map entry defined 
by the type MapEntry names zero or more source model entities and associates with these entities, one 
or more high-level model entities.3 SMENTITYDESC represents the type of a de­scription naming zero or 
more source model en­tities (e.g., a regular expression over logical and physical software structure 
in our tools). [SMENTITYDESC] MapEntry == SMENTITYDESC X (P HLMENTITY) -CompuieReflexionModel ARejlexionModel 
him? : HLMRe!ation ~m? ~ SMRelataon map? : seq MapEntry mapFunc : [seq MapEntry x SMENTITY) --+ (P HLMENTITY) 
rnappedSourceMod el = (J{t : SMTuple ~ t E sm? ( mapFunc ( map?, jirst t ) x mapFunc ( map?, second 
t ) ] x {t]] convergencest = him? n (dom mappedSourceModel ) divergences = (dom mappedSourceModei ) \ 
him? absences = him? \ (ciom mappedSourceMode l ) 3An additional invariant which constrains a map entry 
to name only high-level model entities specified in hkn? has been elided for presentation purposes. Computing 
a reflexion model also requires a function (mapl+mc) that matches entities from the source model to the 
specified map, producing a set of associated high-level model entities. The value of mappedSourceModel 
is computed by pushing the elements of each source model tuple through the map, resulting in two sets 
of high-level model entities. The cross-product of these sets is taken and each element in the re­sultant 
set is associated (through another cross­product) with the original source model tuple. Once the mappedSourceModel 
is computed, the values of the convergence, divergences, and absences relations are easily determined 
through set intersection and set difference operations.  3.3 A Family of Reflexion Models This Z specification 
defines a family of reflex­ion model systems. Different kinds of reflexion model systems result depending 
on the choices made for representing the source model entity de­scriptions in a map ( SMENTITYDESC) and 
for defining the mapping function (mapl%nc). Our reflexion model system describes source model entities 
using a combination of structural infor­mation and regular expressions. Our tools sup­port the use of 
two different mapping functions. The most common mapping function used pro­duces the set of high-level 
model entities associ­ated with the first match of a given source model entity to an entry in the map. 
Alternatively, our tools support the use of a mapping function that returns the set of high-level model 
entities result­ing from the union of all matches found in the map. Our tools can thus be configured 
to provide implement at ions oft wo different reflexion model systems.  4 Experience The reflexion model 
approach has been applied to aid engineers in performing a variety of soft­ ware engineering tasks on 
a number of different software systems that vary in size and implemen­ t ation language.  Reengineering 
A software engineer at Mi­crosoft Corporation applied reflexion models to assess the structure of the 
Excel spreadsheet product prior to a reengineering activity. The Excel product consists of over one million 
lines of C source code, The engineer computed reflex­ion models several times a day over a four week 
period to investigate the correspondence between a posited high-level model and a model of almost 120,000 
calls and global data references extracted from the source. A detailed mapping file con­sisting of almost 
1000 entries was produced and is being used to guide the extraction of compo­nents from the source. The 
engineer found the approach valuable for understanding the struc­t ure of Excel and planning the reengineering 
ef­fort. Design Conformance We used a sequence of reflexion models to compare the layered archi­tectural 
design of Griswold s program restructur­ing tool [GN95] with a source model consisting of calls between 
modules. The reflexion model highlighted, as divergences, a few cases where modules in the source code 
did not adhere to the layering principles. We are unaware of any other approach that would allow such 
violations to be found so directly. An industrial partner applied reflexion mod­els to check if a 6,000 
line C++ implementation of a subsystem matched design documentation (in the form of a Booth object diagram 
[Bo091]) prepared prior to implementation. This case was unique in that the reflexion model was fully 
con­vergent with the source model. System Understanding We used reflexion models to try to determine 
why a compiler used in undergraduate education at the University of Washington was difficult for the 
students to change. We computed a reflexion model com­paring an extracted Ada file imports relation with 
a conventional model of a compiler [PW92]. The reflexion model contained meaningful diver­gences between 
almost all pairs of high-level en­tities. This high degree of coupling explains, in part, why the students 
had difficulty changing the system. We later applied reflexion models to a newer version of the compiler, 
written in C++. The reflexion models for this compiler were far less cluttered than the Ada version. 
However, some unexpected interactions were identified using the reflexion model; these may provide the 
basis for either minor restructuring of the compiler or at least additional warnings to the students. 
 5 Performance Engineers iteratively specify, compute, and in­terpret reflexion models. The rate at 
which an engineer can interpret and iterate reflexion mod­els is dependent, in part, upon the the speed 
of the computation. The formal characterization presented in Sec­tion 3 provides a basis for considering 
the theoretical complexity of computing a reflex­ion model, From the dynamic Z schema, ComputeReflexionModel, 
we can see that the time complexity of computing a reflexion model is dependent upon the cost of computing 
the mappedSourceModel relation and the cost of comparing that computed relation to the high­level model. 
An upper bound, then, on the com­plexity of computing the mappedSourceModel re­lation is given by: O(#sm 
x #map x tcomp.rt$on)x ~((#~~~)2) where #sm is the cardinality of the source model relation, #may is 
number of entries in the map, tcompa,i.onis the cost of comparing a source model entity to a source model 
entity descrip­tion in a map entry, and #him is the cardinality of the high-level model relation. Since 
the num­ ber of entities in the high-level model is gener­ ally small and constant, the 0((#Mm)2) can, 
in practice, be ignored, yielding: O(#sm x #map x tcompartson) Our initial implementation of tools 
for com­puting reflexion models performed the compu­tation of a reflexion model in the straightfor­ward 
manner described by the dynamic schema in Section 3.2. This implementation was suffi­ciently fast for 
moderately large systems (with source models consisting of tens of thousands of tuples) and small maps 
(tens of lines), but was not fast enough to support the iterative compu­tation of reflexion models for 
larger systems or larger maps, For example, an early version of our tools required 40 minutes on a Pentium 
to compute a reflexion model for Excel. By trading space for time in the implementa­tion of our tools, 
we have been able to support the computation of reflexion models for large software systems and large 
maps in a minute or two (see Table 1). Specifically, our tools hash the mat ch of high-level model entities 
for a given source model entity the first time a source model entity is seen. The additional space requirements 
depend upon the naming scheme used for source model entities and the number of unique entities in the 
source model. In the case of Excel and the naming scheme used by our tools, there are 18,118 unique source 
model entities each requir­ing on the order of 100 bytes (less than 2 Mb in tot al). Our tools provide 
a variety of options to let the engineer determine the appropriate space time tradeoff. Discussion 
Reflexion models permit an engineer to easily ex­plore structural aspects of a large software sys­tem. 
The goal of the approach is to provide engi­neers with the flexibility to produce, at low-cost, high-level 
models that are good enough for performing a particular software engineering t ask (restructuring, reengineering, 
or porting, etc.). Three aspects of the approach critical to meet­ing this goal are the use of syntactic 
models, the use of expressive declarative maps, and support for querying a reflexion model. Syntactic 
Models As described in the formal characterization, reflexion models are computed without any knowledge 
of the intended semantics of the high-level or the source model. A benefit of this syntactic approach 
is the ability of an engi­neer to use reflexion models to investigate many different kinds of structural 
interactions in a soft­ware system (calls, data dependence, or event interactions, etc.). It also means, 
however, that it is the engineer s responsibility to ensure that it makes sense to compare a selected 
high-level model wit h an ext ratted source model. For ex­ample, comparing the specified calls diagram 
of Figure 2a with an extracted calls relation makes sense, but comparing the same high-level model with 
a source model representing the #include structure of NetBSD would probably be mean­ingless. In practice, 
engineers have exploited this flex­ibility by changing the meaning of their mod­els over time. For example, 
both the VM de­veloper and the Microsoft engineer first used a calls source model and later augmented 
the source models with static dependence of func­tion definitions on global data. By adding static dependence, 
both developers implicitly shifted their high-level model from a calls diagram to a communicates-with 
diagram. In both cases, the changes were driven by the need to understand, for the task being performed, 
additional aspects of the system structure. To aid the engineer in interpreting reflexion models computed 
wit h models cent aining differ­ent kinds of information, we are adding support for typing relations 
in both source and high-level models. Maps The declarative maps used in comput­ing a reflexion model 
enable an engineer to focus on information of interest in the source in two ways. First, an engineer 
may specify a partial map that cent ains entries for only those parts of the system relevant to the task 
at hand. Second, an engineer may iteratively refine a map to the appropriate e level of detail necessary 
for the task being performed. Generally, an initial reflexion model is cOrn­puted with a rough and partial 
map. Then, based on an investigation of the reflexion model, an engineer refines the map in the areas 
of in­terest until the necessary information about the system is obtained. Sometimes, as was the case 
when we applied reflexion models to assess the structure of the compiler implemented in Ada, a System 
Language Approx. Source Mapping High-Level SPARC 20/50 486 PC Lines of Model Model 100 MHz Code (Thples) 
(Lines) (Entities) (min:sec) (min:sec) Uw c++ 3,700 607 33 5 :00.5 :01 compiler Uw Ada 4,200 72 9 5 :00.2 
:01 compiler Restructuring CLOS 47,000 5,855 215 9 :04.3 :06 Tool NetBSD c 250,000 15,657 7 8 :04.0 :19 
(VM) Excel c 1,200,000 119,637 971 15 2:13.0 4:05 Table 1: Performance of Reflexion Model Tools fairly 
rough map was sufficient. In contrast, in absences in the computed reflexion model are the the case of 
Excel, a detailed map was desired to result of incompleteness in the map. plan reengineering activities. 
Based on the results of the interpretation, an The reflexion model approach enables an en­ engineer may 
either decide to refine one or more gineer to balance the cost of refining the map of the inputs, computing 
a subsequent reflexion wit h the level of detail necessary for performing model, or else may decide that 
sufficient informa­a particular software engineering task. We plan tion has been obtained to proceed 
with the over­to track the use of some declarative maps across all task. To better support an engineer 
in the in­the evolution of several systems to determine the terpretation process, we are currently developing 
degree of sensitivity of our mapping language to techniques to improve the querying and investi­changes 
made in the source. This will aid an en­ gation of a series of computed reflexion models. gineer in judging 
the amortization costs of cre­ating detailed maps for large systems, 7 Related Work Querying Reflexion 
Models Reflexion mod-Reverse Engineering The reverse engineer­ els bridge the gap between an engineer 
s high­approaches to use clustering Ievel model and a model of the source. The ing closest ours in­formation, 
which is generally culled from a com­ convergence, divergences, and absences summa­bination of human 
input and numerical com­ rize selected interactions in the source, while putation, to create abstract 
representations for the mappedSourceModel captures t he connec­the engineer, Examples of this approach 
include tions between the high-level and source model Rigi [MK89] and Schwanke s statistically-based 
arcs. Based on the summary information, the architectural recovery technique [Sch91]. engineer intersperses 
two kinds of queries to in­terpret a reflexion model for a specific software Reflexion models differ 
in a number of ways. engineering task. First, in our approach the engineer specifies the In the first 
kind of query, an engineer investi-high-level entities explicitly, whereas the archi­gates the source 
model values contributing to a tectural recovery systems instead infer them. convergence or divergence. 
In the second kind, Second, we focus on comparing high-level and an engineer performs queries to determine 
the source models, rather than on discovering high­source model entities and values that were not level 
models. Third, our mappings are declara­included in the reflexion model. This query en-tive, associating 
source and high-level entities, in ables an engineer to assess whether the map is contrast to approaches 
such as Rigi, which uses sufficiently complete and to investigate whether operational mappings. Rigi 
differs from our approach by enabling an engineer to build explicit hierarchical models of the software 
structure of a system. We instead support the investigation of substructure (i.e., a subsystem) by computing 
different reflexion models at various levels of abstraction. Model Comparison Ossher has considered the 
comparison of relational models of software structure for a fixed type of high-level model, a GRID [0ss84]. 
The intent of a GRID description of a system is to specify, represent, document and enforce the structure 
of large, layered sys­tems [0ss87, pg. 219]. The GRID mechanism permits an engineer to choose a concise 
descrip­tion of the software structure and then to anno­tate how the actual structure of the system de­viates 
from the description. Our approach is not intended to specify or enforce a desired structure of the system, 
but rather to compare two models of the structure using an explicit mapping be­t ween the two models 
provided by the engineer. Jackson s Aspect system [Jac93] compares partial program specifications (high-level 
mod­els) to data flow models extracted from the source to detect bugs in the source code that cannot 
be detected using static type checking. Aspect uses dependence between data stores as a model of the 
behavior of a system and as­sumes that this model is correct, focusing on how the source model differs 
from the posited behav­ior. In contrast, we focus on high-level structural models, and we are interested 
in both how the source model differs from the high-level model and also how the high-level model differs 
from the source. Jackson has also developed a semantic differ­ence approach for comparing the differences 
in input and output behavior between two versions of a procedure [J L94]. This approach derives an approximate 
model of the semantic effect of a procedure consisting of a binary relation that summarizes the dependence 
of variables after ex­ecuting the procedure upon the value of variables at the entry to the procedure. 
The semantic differencing tool compares the binary relations resulting from different versions of a procedure. 
We focus on the comparison of relations at differ­ ent levels of abstraction through an explicit and 
declarative mapping. 8 Summary A reflexion model summarizes information ex­tracted from source code into 
a high-level model that is sufficiently accurate to support an engi­neer in performing a software engineering 
task. The engineer defines three inputs to a reflexion model computation: a high-level model, a source 
model, and a map. The refiexion model presents the summary information in the context of the high-level 
model defined by the engineer. The engineer interprets and iteratively computes suc­cessive reflexion 
models until satisfied. The fea­sibility and flexibility of the approach have been demonstrated through 
its application in a num­ber of different settings on systems ranging from several thousand to over one 
million lines of code. Acknowledgments Robert Allen, Kingsum Chow, David Garlan, Bill Griswold, Michael 
Jackson, Kurt Partridge, Bob Schwanke, and Michael VanHilst each pro­vided helpful comments on earlier 
drafts of the paper. Conversations with Daniel Jackson helped clarify a number of aspects of our work. 
An anonymous Microsoft engineer applied reflex­ion models to Excel. Dylan McNamee was our VM developer. 
Pok Wong applied reflexion mod­els as part of a design conformance task. Stephen North of AT&#38;T provided 
the graphviz graph dis­play and editing package. We also thank the anonymous referees for their constructive 
com­ ments.  References [AKW79] A.V. Aho, B.W. Kernighan, and P.J. Weinberger. Awk A Pattern Scan­ning 
and Processing Language. Software Practice and Experience, 9(4):267-280, 1979. [Bo091] G. Booth. Object-oriented 
Design with Applications. Benjamin-Cummings, 1991. [GN95] [Jac93] [JL94] [KR78] [MK89] [0ss84] [0ss87] 
[OUS94] [PW92] [Rei95] [Sch91] [Smi84] W.G. Griswold and D. Notkin. Architec­tural Tradeoffs for a Meaning-Preserving 
Program Restructuring Tool. IEEE Transactions on Soflware Engineering, 21(4):275-287, April 1995. D. 
Jackson. Abstract Analysis with As­pect. In Proceedings of the 1993 Inter­national Symposium on Software 
Testing and Analysis, pages 19 27, 1993. D. Jackson and D.A. Ladd. Semantic Diff A Tool For Summarizing 
the Ef­fects of Modifications. In Proceedings of the International Conference on Software Maintenance, 
September 1994. B. Kernighan and D. Ritchie. The C Pro­gramming Language. Prentice Hall, 1978. H.A. Muller 
and K. Klashinsky. A Sys­tem for Programming-in-the-large. In Proceedings of the 10th International Conference 
on Software Engineering, pages 80 86. IEEE Computer Society Press, April 1989. H .L. Ossher, A New Program 
Structuring Mechanism Based on Layered Graphs. PhD thesis, Stanford University, Decem­ber 1984. H, Ossher. 
A Mechanism for Speci­fying the Structure of Large, Layered Systems. In Bruce Shriver and Pe­ter Wegner, 
editors, Research Directions in Object-Oriented Programming, pages 219-252. MIT Press, 1987. J.K. Ousterhout. 
TCL @ the TX Toollcat. Addison-Wesley, 1994. D.E. Perry and A. Wolf. Founda­tions for the Study of Software 
Architec­ture. ACM Sofiware Engineering Notes, 17(4):40-52, October 1992. S.P. Reiss. The Field Programming 
En­vironment: A Friendly Integrated Envi­ ronment for Learning and Development. Kluwer Academic Publishers, 
1995. R. Schwanke. An Intelligent Tool for Re­engineering Software Modularity. In Pro­ceedings of the 
13th International Con­ference on Software Engineering, pages 83-92, May 1991. B.C. Smith. Reflection 
and Semantics in LISP. In Proceedings of the 1984 ACM Principles of Programming Lan­guages Conference, 
pages 23-35. ACM, December 1984, [Spi92] J.M. Spivey. The Z Notation. Prentice Hall, second edition edition, 
1992. [Str86] B. Stroustrup. C++ Programming Lan­guage. Addison-Wesley, 1986. [WTMS95] K. Wong, S.R. 
Tilley, H.A. Miiller, and M.D. Storey. Structural Redocumenta­tion: A Case Study. IEEE Software, 12(1):46-54, 
January 1995.  
			