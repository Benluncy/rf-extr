
  The quality of this texture is crucial. Because our approach is an approximate one, the following 
problems may arise: sampling rare (blocky textures). This problem de­pends on the sampling step chosen 
by the user, which may be too coarse on particular areas of the mesh. This problem is evident in the 
case of surface patches where attribute val­ues change in a very abrupt manner (e.g. a face painted with 
a number of different colored stripes, and where adjacent stripes show sharp color discontinuity). But 
this problem cannot be solved by simply decreasing the sampling step size, because the size of the texture 
cannot be enlarged too much (texture memory available on graphics subsystems is often limited). Our tool 
adopts over-sampling to improve texture quality. Multiple samples are computed for each sampling point 
(distributed regularly in the small sampling area associated to p). and the mean of these samples is 
stored in the texture. Currently, the over-sampling value is one of the parameters specified by the user; 
 on the adjacency border between different textured faces. This problem is related to the fact that, 
once packed (see next paragraph), texture patches which are adjacent in the overall texture map are generally 
associated with non­adjacent faces of the mesh. During scan conversion of a mesh face, discrete texture 
coordinates might be produced which are not contained in the associated texture patch (this might occur 
frequently while scan-converting the edges of a face, due to insufficient numerical precision). To prevent 
erroneous color mappings due to imprecise computations of texture co­ordinates, we produce, for each 
mesh face, a texture patch which is slightly wider (one texture pixel wider in the discrete texture space). 
This give rise to slightly larger texture maps, but solves the above aliasing problem. 3.1 Packing texture 
patches in rectangular tex­tures The last step of our algorithm is to pack all the triangular texture 
patches into a single rectangular 2D texture. Different approaches are possible to store all of the triangular 
tex­ture patches in a single rectangular texture. A first approach may be based on the use of rectangular 
texture patches, which due to they regularity in shape result very simple to be packed in a rectangular 
texture [16, 28]. Each texture patch is generated in [16, 28] by: storing during simplification the color 
of the decimated vertices which map onto each simplified mesh face, and then by interpolating the color 
information associated with the removed vertices to build a high resolution triangular texture map. These 
techniques use only half-square right triangles, with a further limitation to square edge of size 2 in 
[28]. The use of only half­square texture patches means that they can be packed easily with a simple 
and regular rule: patches are stored in order of magnitude (biggest first), equal size patches are paired 
to form squares, and squares are stored in adjacent texture areas. The use of half-squared texture patches 
allows efficient packing, but this approach has two disadvantages: only a discrete number of patch sizes 
is available and the shape of the texture patch is fixed. In the case of the sampling-based approach 
proposed in this paper for the reconstruction of the texture patches, the first point implies that we 
don t use exactly the sampling step selected by the user: given the sampled edge e, we divide it into 
2 chunks such that the   Table 1: Processing time (in seconds), number of points sampled on the surface, 
and size (in pixels) of the texture map produced in output by our prototypal implementation on two simplified 
meshes and different sampling step sizes. 6 CONCLUSIONS We have presented a general method for preserving 
on a simpli­fied mesh the detail (e.g. color, high frequency shape detail, scalar fields, etc.) which 
is encoded in the corresponding high resolution mesh. Our approach is very general, because it allows 
one to pre­serve any attribute value defined on the high resolution mesh, and because it makes no assumptions 
about the simplification process adopted to reduce mesh complexity. Detail is encoded through tex­ture 
mapping, which is extremely efficient in many graphics subsys­tems. The texture encoding the detail of 
the high resolution mesh is built by an efficient scan conversion process of the simplified mesh. The 
results therefore suffer for some approximation: we preserve surface detail with the use of discrete 
texture maps, whose qual­ity depends on both the sampling step size used and the criterion adopted to 
locate matching pairs of points on the two surfaces. De­spite this limit, the results can be considered 
of sufficiently high quality for a wide range of possible interactive visualization appli­cations. We 
also propose an alternative application: the conversion of mod­els with attached 3D procedural textures 
into standard 2D-textured models. As a general point, our approach has to be compared with the other 
solutions which take into account high-frequency detail dur­ing simplification. Reasons for choosing 
our approach are the fol­lowing: simplification is de-coupled from preservation, and this allows the 
user to choose the more adequate simplification code: when operated as a post-processing action, the 
task is generally more efficient in time and simpler to be implemented (especially if different kinds 
of detail have to be preserved); not all simplification approaches can be simply adapted to preserve 
the mesh attributes. Our approach can be extended in several ways. The precision of the sampling process 
and texture size depend on the sampling step selected. The quality of the textures produced might be 
improved (and their size reduced) if a semi-automatic and adaptive selection of the sampling step were 
adopted. Once a texture patch has been computed for a given face of the mesh, this patch could be analysed 
to detect the degree of uniformity or smoothness of the detail coded. If the texture patch is nearly 
uni­form (e.g. if it corresponds to a constant value section of the mesh) or smooth, then its resolution 
could be reduced without losing qual­ity. Conversely, if the texture has a high discontinuous content, 
we could re-sample it using finer sampling, and increase the precision only locally. Mip-map representation 
of textures [29] is widespread, due to the necessity to reduce aliasing while mapping the texture at 
differ­ent scales. The problem solved by the mip-map approach is how to render faces which map to a large 
texture patch but, in a current view, map to only a few pixels. Storing our sampled texture under a mip-map 
approach is not straightforward. The problem is how to compute recursively the associated reduced resolution 
maps by tak­ing into account the fact that our global texture is subdivided into a number of independent 
triangular patches. This problem will be the subject of further research. 7 ACKNOWLEDGEMENTS  References 
J. Blinn. Simulation of wrinkled surfaces. Computer Graphics (SIGGRAPH 78 August A. Certain, J. T. T. 
Duchamp, D. and W. In­teractive multiresolution surface viewing. In Graph. Annual Series (Siggraph ACM 
Press, pages 91-98, Aug. 6-8 1996. A. Ciampalini, P. Cignoni, C. and R. Scopigno. Multiresolution deci­mation 
based on global error. Visual June 1997. R. L. Cook. Shade trees. Computer Graphics (SIGGRAPH 84 Proceedings), 
July 1984. David Kent Ken and and Modeling: A Procedural Appmach. Academic Press. October 1994. ISBN 
O-12-228760-6. K. Frank and Data dependent surface simplification. In D. ed­ itor, 9th Workshop on Visualization 
in Computing pages 100-109. 1998. M. Garland and P.S. Surface simplification using error metrics. In 
Graph. Annual Series ACM pages M.H. Gross and R. Koch. Visualization of multidimensional shape and texture 
features in laser range data using complex-valued wavelets. Trans. on Visual. and Graph., March 1995. 
 P. M. Garland. Survey of surface simplification algorithms. Tech­nical report, Carnegie Mellon University 
 Dept. of Computer Science, 1997. (to Paul S. Heckbea. Survey of texture mapping. IEEE Graphics H. Hoppe. 
Progressive meshes. In ACM Graphics Applications, November 1986. [ P. Hansen. Geometric optimization. 
In Visualization 93 pages October 1993.     Annual Conference Series, (Siggraph 96). pages 99-108, 
1996. Hoppe, Tony Tom Duchamp, John McDonald, and Werner Mesh optimization. In ACM Computer Graphics 
 Con­ference Series. (Siggraph 93). pages 19-26, 1993. A. D. and R.H. Taylor. Superfaces: mesh simplification 
with bounded error. IEEE C.G.M., 19%. V. and M. Fitting smooth surfaces to dense polygon meshes. In 
 Graph. Annual Series (Siggraph 96). ACM Press, pages ACM Press, 1996. M. Generating texture map from 
object-surface texture data. Computer Graphics Forum of 1995. Mark John and Brian bump mapping hardware. 
In SIGGRAPH 97 Conference Proceedings, Annual Conference Series, pages ACM SIGGRAPH, Addison Wesley, 
August 1997. ISBN 0-89791­ 896-1. K. An image synthesizer. Graphics, July 1985. POV-Team. Persistence 
of vision 3.0. Publicly available on web: http: 1996. K. M. Cohen, T. Duchamp, L. Shapiro, and W. based 
rendering: Visualizing real objects from scanned  and color In   Proceedings of 8th Workshop on 
Rendering (St. Etienne, France), June 1997. E. Principles  and Applications. In Tutorial Notes Association, 
 1997 (PS97  M. Reddy. Scrooge: Perceptually-driven polygon reduction. Computer Graphics 1996. R. 
and J. Rossignac. Full-range approximation of triangulated polyhe­dra. Computer Graphics Forum 1996. 
J. Rossignac and P.  Multi-resolution 3D approximation for rendering complex scenes. In B. and T.L. 
Kunii, editors. Geometric Modeling in Computer Graphics, pages 455-465. Springer  1993. S. A cellular 
texture basis function. In Graph. Series  pages 291-294. ACM Press, 1996. D. and C.    Decimation 
of 2D scalar data with error control. Tech­ nical Report CSD-TR-95-005, CS Dept., Purdue University, 
1995. William 1. Schroeder, Jonathan A.  and William E. Decima­ tion of triangle meshes. In Edwin E. 
 editor, ACM Computer Graphics (SIGGRAPH 92 volume 26, pages 65-70, July 1992.  Marc Guy  Marc Rioux. 
A texture-mapping approach for the compression of colored 3d triangulations. The Visual Computer, 1996. 
 L. Williams. Pyramidal Computer Graphics (SIGGRAPH 83 Pro­ceedings), July 1983.  
			