
 LOCATION OF A POINT IN A PLANAR SUBDIVISION AND ITS APPLICATIONS* D. T. Lee t and F. P. Preparata ~ 
Coordinated Science Laboratory University of Illinois at Urbana-Champaign Urbana, Illinois 61801 Abs 
tract Given a subdivision of the plane induced by a planar graph with n vertices, in this paper we con- 
sider the problem of identifying which region of the subdivision contains a given test point. We present 
a search algorithm, called point-location algorithm, which operates on a suitably preproc- essed data 
structure. The search runs in time at most O((log n)2), while the preprocessing task runs in time at 
most O(n log n) and requires O(n) storage. The methods are quite general, since an arbitrary subdivision 
can be transformed in time at most O(n log n) into one to which the preproc- essing procedure is applicable. 
This solution of the point-location problem yields interesting and efficient solutions of other geometric 
problems, such as spatial convex inclusion and inclusion in an arbitrary polygon. Keywords : Planar 
region identification, spatial convex inclusion, computational geo- metry, point location, computational 
complexity, analysis of algorithms, ~nclusion in polygon. 1. Introduction In this paper we shall consider 
the following problem referred to as "point location": A given planar straight-line graph (PSLG) on n 
vertices induces a subdivision of the plane; given a test point P, find which region of this subdivision 
contains P. We shall assume that the graph is originally given as the collection of the adja- cency-lists 
of its n vertices. From a computational viewpoint, any solution to the point-location problem should 
be evaluated with respect to the following three measures: (i) the search time, that is, the number of 
operations required to locate the test point in the subdivi- sion; (ii) the preprocessing time, that 
is, the number of operations required to construct the data structurepostulated by the search algorithm; 
 *This work was supported in part by the Joint Services Electronics Program (U.S. Army, U.S. Navy, and 
U.S. Air Force) under Contract DAAB- 07-72-C-0259. tDepartment of Computer Science, University of Illinois. 
~Department of Electrical Engineering, University of Illinois. (iii) the amount of storage required 
by the preproc- essed data structure. This problem occurs as a subproblem in a num- ber of applications 
in operations research, pattern recognition, computer graphics, and statistical analysis. Several workers 
have recently considered it. For example, Ketelsen [i] proposed algorithms whose search time is O(n). 
The most recent and interesting results are due to Shamos [2], whose approach is an adaptation of one 
of his "nearest- neighbor" algorithms: his method has search time O(log n) but preprocessing time and 
storage both O(n2). Shamos also conjectures another procedure with less severe storage and preprocessing, 
based on recursively splitting the planar subdivision by means of polygonal lines, so that at each step 
half of the regions to be subdivided lie on either side of a polygonal line. The idea of recursively 
halv- ing sets of regions, however, does not appear to lead to any successful procedure. The approach 
described below departs from this idea and yields as a result a search time at most O((log n) 2), with 
preprocessing time O(n log n) and storage O(n). Additional details can be found in [4]. 2. Complete 
sets of chains The basic device used in the point-location algorithm is an operation, used by Shamos 
in his nearest-neighbor algorithm, which we rename "dis- crimination of a point against a monotone chain." 
Hereafter a finite polygonal line will be termed a chain. Definition I. A chain C with vertices Ul,U2, 
...,Up is monotone with respect to a straight line if the orthogonal projections ~(u I) .....%(Up) of 
the vertices of C on ~ are ordered. Suppose now that a chain C is monotone with respect to ~ and assume 
that C has been extended on both ends with half lines parallel to 4. Given a point P, the discrimination 
of P against C consists of deciding on which side of the extended C the point P lies. Since the projections 
~(Ul),..., ~(Up) form a sequences, the projection %(P) of P on belongs to a unique interval (~(u i),£(ui+1)) 
on ~. Associated with (%(u i),%(ui+l)) there is a unique edge (ui,u~i+ 1 of C, and a simple comparison 
can determine on which side of the straight line through u i and ui+ 1 the point P lies (see Figure 
I). Thus discrimination of P against C can be done with O(log p) comparisons. 231 / i i P '~ i u ,"2_!_..~ 
iul / .,.,.,,.,--'~(ds) .... Figure i. Illustration of a "discrimination" of a point P against a chain 
C. Definition 2. A set C of chains is monotone if there is a staight line £ such that all members of 
C are monotone with respect to £. Consider now a PSLG G with n vertices and sup- pose that we can find 
a set C = (Ci,C2,...,C r) of monotone chains with the following properties: (i) each edge of G belongs 
to at least one chain of C;  (ii) for any two chains C i and Cj of C the vertices of C i which are not 
vertices of Cj lie on the same side of Cj.  Such C is said to be oo~,Z~te. For C i and Cj E C, let 
C i < Cj mean that C i lies on a selected side of C. with respect to a fixed observer. Thus, condition 
(ii) implies that < is a total ordering on a complete monotone set of chains. Applying binary search 
on C, with Flog(r + i)] discriminations we can determine a unique pair of consecutive chains C~ and Cj+ 
1 of C which comprise the given point P. ~inee the set C is complete, by property (i) in Definition 
2 the portion of plane comprised between two consecutive members of C is a concatenation of regions of 
G and (possibly) of chain segments (see Figure 2). Recall now that the discrimination of P against a 
chain Cj entails the identification of a unique edge e(J) of Cj. Thus, if P has been located between 
two con- secutive chains Cj and Cj+i, the two edges e(J) and e (j+1) uniquely identify the region of 
the graph G to which P belongs (see Figure 2). Therefore, if s is the maximum number of vertices in any 
chain of C, with O(log s log r) comparisons the point-location problem would he solved. Notice now that, 
if G has n vertices, each chain of a complete monotone set C on G has at most n vertices; moreover, by 
property (i) in Definition 2, there are at most (n -i) chains in C. It follows that point location requires 
at most O((log n) 2) comparisons. We shall now constructively show that for an arbitrary PSLG we can 
always find a complete mono- tone set of chains. 3. Chain construction procedure We begin by restricting 
ourselves to the class of graphs singled out by the following definitions (here (xi,Y i) are the (x,y) 
coordinates of a vertex vi, and for simplicity we assume x i ~ xj and Yi ~ Yj Figure 2. Location of 
a point between two consec- utive chains of a complete set. for i ~ j): Definition 3. Let G be a PSLG 
with vertices vl,...,Vn, labeled so that yl> ... > Yn" A vertex v.- of G is said to be regular if there 
are integers is< j < k such that edges (vi, ~ and (v~,~ k are in G; G is said to be regular if~all of 
i%s vertices but v I and v n are regular. In other words, through each vertex of a reg- ular G, except 
the two terminals v I and Vn, it is possible to draw a chain monotone with respect to the y-axis. The 
chain construction algorithm requires that a regular PSLG be given in a suitable representation (standard 
~p~sentation). This consists of a two- dimensional list obtained from the original adja ~ cency-list 
of G as follows. Let (Vil,Vi2,...,Vik) be the adjacency-list of vertex vi, with < i < < " if i. < i 
< " then il 2 " " " Zk' 3 lJ +I' (Vil , .... vij) and (vij+l,...,Vik) are respectively the column-and 
row-list of v i in the standard rep- resentation; the edges in each of these lists are sorted according 
to (counterclockwise ascending) slope. The construction of the standard represen- tation from the original 
adj acency-list requires scanning of all the edges (which runs in time O(n), since the G is planar) and 
sorting the lists (which runs in time O(n log n)). All the chains to be constructed have v$ and v n 
as their terminal vertices, and are conventlon- ally assigned the direction from v. to v_. The 1 LL 
 chain construction procedure is based on the observation that for each vertex v i (i ~ l,n) there are 
as many incoming as there are outgoing chains. Letting the weight of an edge denote the number of chains 
containing it, we must assign weight to the edges so t%at, for every nonterminal vertex vi, the sum Win(Vi) 
of the weights of incoming edges equals the sum Wout(V i) of the weights of outgoing edges. The balancing 
of the weights can be done in two passes over the previously described data structure (see Chain Construction 
Algorithm below). In the first pass we proceed from v n to v I and assign weights to the edges so that, 
for each non- terminal vi, Win(Vi) >_ Wout(Vi). The second pass, in turn, proceeds from v I to v n and 
modifies the 232 weights so that, Win(Vi) -< Wout(V i), for every non- terminal vi, thereby achieving 
the desired balanciig. During the latter pass we can also explicitly construct the chain data structure. 
It may appear at first glance that more than O(n) locations are needed to store the chains, since there 
are O(n) chains and there is no obvious way to bound the number of edges each of them may contain. However, 
we can obtain a very compact representation of this set using the fact that the chain set is to be used 
in a binary search. Indeed, it is well-known that a binary-search algorithm on a totally ordered set 
S induces a natural hierarchy on S as follows: each member of S is assigned to a vertex of a binary tree 
T(S) through a mapping T:S + T(S), and an actual search operation corresponds to traversing a path from 
the root to a leaf of T(S). Given two chains C i and Cj in C we shall say that C i is high- er than C 
i, and denote it by C i > C i, if the path from the ~oot of T(C) to T(Cj) contNins T(Ci). Assume now 
that C i > Cj and that C i and Cj share an edge e. Since, when performing binary search, the discrimination 
of a point P against Cj is preceded by the discrimination of P against Ci, then clearly edge e may be 
assigned to C i only. Thus each edge need be stored only once, resulting in a storage requirement O(n) 
for the chain data structure. In the interest of simplicity and with a neg]i- gible loss of search efficiency 
we shall adopt a stondard hierarchy for the set C = {C I,C 2 ..... C r} which is independent of the chain 
number, as fol- lows: for i ~ j, C.> C. ~ j £ [i - 2 pi + i, 1 3 i + 2 pi -i], where Pi is the largest 
power of 2 which is a factor of the integer i. For example for n = 20 we have the hierarchy illustrated 
in Figure 3. Figure 3. Hierarchy for n = 20. The data structure describing the set C of chains will 
be a list representation of the tree T(C), linking the chain nodes; in turn, the node for chain C i is 
the header of a list L(C i) , which gives the edge sequence of C i. For reasons to become apparent later 
(Section 4) each edge e = (vi,v j) is labeled with two pairs of integers, (Imi n[e],Imax[e]) and (L[e],R[e]). 
The integers Imin[e] and Imax[e] are respectively the minimum and the maximum value of j such that e 
e C.. The integers L[e] and R[e] are the labels of t~e plane regions respectively to the left and to 
the right of the edge e directed so that its y-projection is concurrent with the y-axis. We can no~ 
give a formal description of the algorithms which accomplish the chain construction. Chain Construction 
Algorithm Firs t Pass This pass accepts a PSIG G given by its stand- ard representation and assigns 
the weight of each edge so that for each nonterminal vertex v i we have Win(Vi) _> Wout(Vi). (l(vi) = 
size of cclumn-list of ~ i. For each edge e in coltmnn-list of vj, for j = 1..... n, set W[e] ÷ i. 
2, Set i ÷ n -i. 3. While 1 < i < n do:  4. Set Wou t ÷ sLma of weights in row-list of v i.  5. Set 
d ÷ first edge in column-list of v i.  6. If Wou t > l[vi], set W[d] + Wou t -l[vi]  + i.  7. Set 
i ÷ i -i.   8. Halt.  Comment: All edges are assigned weight 1 except for the first member of each 
column-list, which is assigned the value Wout(V i) -Win(V i) + i. In this manner, the condition Win(Vi) 
-> Wout(Vi) is achiev- ed for each nonterminal vertex. Computationally, the running time is O(n), since 
each edge of the graph is scanned a fixed number of times (Steps i, 4, and 5) and there are O(n) edges. 
 Second Pass This pass accepts the output of the first pass and performs the following actions: (i) 
it bal- ances the weight of each nonterminal vertex of G; (2) it constructs a complete set of chains 
for G;  (3) it labels the regions of the subdivision induced by G. The assignment of an edge to a chain 
makes use of a special arithmetic function, called PRE- DECESSOR (k,£), for two integers k and £ with 
k ~ £, which determines the common predecessor of both k and £ which is the lowest in the standard hierarchy; 
this functfon, which will not be described in detail, can operate directly on the binary representations 
of the integers k and £ and is easily seen to require a number of operations proportional to log n. 
 (Comment: Steps 1-3 initialize for the special vertex Vl.) i. Set A ÷ i, r + 2, L ÷ i, R+ i. 2. 
Set Win ÷ sum of weights in row-list of v 1.  3. Set i ÷ i.  4. While 1 -< i < n do:  5. Set Wou t 
+ sum of weights in row-list of vf  6. Set a ÷ W in -Wout"  7. Set e ÷ first edge in row-list of v 
i-  8. While there are edges in row-list of v i do: (Comment: Steps 9-12 assign an edge to a chain; 
Steps 13-14 label the regions sep- arated by an edge.)   9. Set Imin[e] ÷ A. i0. Set Imax[e] ÷ A + 
a + W[e] -i. ii. Compute c ÷ PREDECESSOR(Imin[e], Imax [e ]) 12. Assign e to list of chain c.  13. 
If e is first edge of row-list, set L[e] ÷ L; else set L[e] ÷ r and r÷ r+ I.  14. If e is last edge 
of row-~list, set R[e] ÷ R; else set R[e] + r.  15. Set a ÷ 0, A ÷ Imax[e ] + I.  233 16. Set e ÷ 
next edge in row-list of v i. 17. Set i ÷ i + 1 and r + r -i.  18. Set Win ÷ sum of weights in column-list 
of  v i  19. Set d I ÷ first edge in column-list of v i.  20. Set R + R[dl].  21. Set d 2 ÷ last 
edge in column-list of v i.  22. Let L ÷ Lid2], A + Imin[d2].  23. Halt. Comment: The second pass 
contains two nested loops. The primary loop (Steps 5-22) scans the vertices, the secondary loop (Steps 
9-16) scans the edges in the row-list of a vertex. For each vertex vi, the weight balance is achiew~d 
by modifying, if neces- sary, the weight of the first member of the row-list (Steps 5, 6, 7, 9, and i0). 
Each edge is processed only once, but the function PREDECESSOR requires times O(log n); thus the number 
of operations required is O(n log n). In summary, since the initial sorting, the first balancing pass 
and the second balancing pass run in times O(n log n), O(n), and O(n log n), respectively, the entire 
preprocessing tasks can be accomplished in time O(n log n). 4. Point-location algorithm (search) We 
shall now describe in detail the point- location algorithm which we have sketched in Sec- tion 2. The 
algorithm accepts the chain data structure described in Section 3 and a test point P E (x,y) and determines 
the planar region R to which P belongs in at most O((log n) 2) steps. The integer m denotes the number 
of chains. The search is characterized by a pair of integers (£,r), with I < r, to denote that the point 
P is comprised between chains C£ and Cr; the algorithm terminates when r -£ = i and the region is determined 
from the data associated with the edges. i. If y >_ Yl or y _< Yn, then set R + i (Com~nen~: P belongs 
to the infinite region of the plane) and~ halt. 2. Set g + root of T(C), £ ÷ 0, r ÷ m + i.  3. Set 
j ÷ index of the chain associated with g.  4. If I >_ j. set g + right descendant of g and go to Step 
3.  5. If r <_ j, set g ÷ left descendant of g and go to Step 3.  6. In the adjacency-list headed by 
g, find an edge (vi,vk) such that Yk -< Y <- Yi and set e ÷ (vi,v k) (Comment: This step is the binary 
  search of the edge against which P is to be dis criminated. ) 7. If P lies to the right of e, set 
~ ÷ Imax[e] and R ÷ R[e]; else set r ÷ Imin[e] and R + L[e]. (Corr~ent: this step discriminates P against 
the  edge e and makes a tentative region assignment ; this assignment is final if r -~ = i, as indi- 
cated by Step 8.)  8. If r -I = I, halt; else go to Step 3.  5. Generalizations ond ~pplications. 
 We now prove the generality of the preceding scheme, since an arbitrary PSLG G with n vertices can be 
transformed into a re'gular one in time O(n log n). We only need consider the case in which G is a polygon. 
 Referring for concreteness to Figure 4 vertex v of the illustrated polygon is not regular. The horizontal 
line I through v intersects a set of edges {el,e2,e3,e 4} in points Pi,P2,P3, and P4, respectively. Therefore 
vertex v falls in a unique part of the partition of £ determined by these points (in our example, in 
segment P2P3). Associ-ated with the pair of edges (e2,e 3) there is a vertex of minimum ordinate in the 
quadrangle P2ABP3 (in our case, vertex u): thus we can introduce an auxiliary edge (v,u) which is guaranteed 
not to cross any edge of the polygon and which renders v regular. y Axis el e4 Figure 4. A simple polygon 
and its regularized version. Thus the regularization procedure operates on the standard representation 
of a given polygon and consists of two passes; in the first pass we scan the vertices in order of decreasing 
y-coordinate and satisfy the requirements of vertices whose column-list is empty; in the second pass 
we satisfy the requirements of vertices with empty row-list. Each stage in the execution of the algorithm 
is characterized by an ordered set of edges (a sequence of edges). For every newly reached ver- tex v, 
the current edge sequence is updated as follows: if v is regular, a new edge replaces a previous edge, 
if v has empty column-list (row-list) two new edges are inserted (are deleted). There- fore, the natural 
data structure for the edge sequence is a list, realized by a balanced tree (an AVL tree, see [3], Sec. 
6.2.3.). Computationally, since traversing an AVL tree requires O(log n) operations, location of all 
ver- tices in interval sets requires work O(n log n); each update of the interval set also runs in time 
O(log n) and there are as many updates as there are vertices. Thus the running time of the regulariza- 
tion procedure is O(n log n). The same result can be easily shown to hold for an arbitrary PSLG. As 
we indicated before, the point-location problem occurs as a subproblem in a number of important applications. 
Thus our fast point-loca- tion algorithm provides interesting solutions for other problems. In particular, 
the following problems are solvable in time O((log n)2): (i) convex inclusion in a spatial convex set 
with n extreme points;  (ii) inclusion in an arbitrary planar polygon with n vertices;  (iii) location 
in the planar subdivision determined 234 by n straight lines. References [1] N. Ketelsen, Triangular 
tile identification, CS 389 course project, Department of Computer Science, University of Illinois, Urbana, 
Illinois, Dec. 1973. [z] H. J. Shamos, "Problems in Computational Geome try," Department of Computer 
Science, Yale University, New Haven, Connecticut, May 1975. [3] D. E. Knuth, The Art of Computer Programming, 
Vol. 3: Sorting and Searching, Addison-Wesley, Reading, Massachusetts, 1973. [4] D. T. Lee and F. P. 
Preparata, "Location of a point on a planar subdivision and its applications ," Coordinated Science Labo=atory 
Report R-699, University of Illinois, Urbana, Illinois, Nov. 1975. 
			