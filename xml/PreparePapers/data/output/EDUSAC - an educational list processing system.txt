
 EDUSAC - An Educational List Processing System William E. Kennedy and James R. Pinkert* The University 
of Tennessee, Computer Science Department Knoxville, Tennessee 37916 Abstract This paper describes an 
educational version of the SAC-1 list processing system. Educational systems such as WATFIV, WATB~L, 
and PL/C are available for teaching programming languages. However, the authors could find no comparable 
systems for list proces-sing~ Since such facilities would be useful in many courses (e.g., data structures, 
operating sys-tems, symbol manipulation), EDUSAC was developed. 1.0 Introduction SAC-1 (System for S.xmbolic 
and Algebraic Calcula-tions) is a computer independent,system for poly- nomial manipulation and other 
algebraic operations. One part of that system is the list processing module, designed to process entities 
represented by lists. For a complete discussion of the SAC-1 list processing module see Collins' guide 
to the SAC-1 list processing system [1]. EDUSAC is a user oriented system to facilitate the learning 
of Collins' list processing module (a production system with few diagnostics and no de- bugging aids}. 
Hence, with EDUSAC, users can learn the basic system requirements of the ,list proces-sing module while 
developing programs compatible with the full complement of SAC-1 algebraic rou- tines. EDUSAC provides 
a traceback from any routine de, tecting an error to the routine which initiated the error condition. 
Also provided are a list dump routine for a detailed analysis of user generated lists, and routines to 
turn a trace on or off so that a user may determine the exact system response to one of his/her requests. 
These routines enable the pinpointing of errors not possible with the production version of SAC-I. Section 
2 of this guide describes internal and external canonical forms for lists. Section 3 discusses the basic 
implementation of the list data structure. EDUSAC diagnostic routines not avail- able in SAC-1 are specified 
in Section 4. Section 5 provides an analysis of the error checking and system trace features. A sample 
run, including the necessary JCL to run EDUSAC with the WATFIV compiler for The University of Tennessee 
IBM 360/65 system, is included in Section 6. A summary of cur- rent applications is provided in Section 
7. Listings of the routines are available from The University of Tennessee Computer Science Department. 
Card decks and/or tape copies are also available. 2.0 List Representations A list is a finite sequence, 
some of whose elements may themselves be lists. Those elements which are not themselves fini.te sequences 
will be called "atoms". The above describes a list as an abstract object. For SAC-1 and EDUSAC, list 
representation are in two forms. One is the external canonical form for lists. Let an atom be any sequence 
of decimal digits d1...d n, n ~8, which may be preceded by the unary operators + or-. A first order list 
is a sequence of atoms separated by commas and en- closed in parenthesis, e.g., (+37,-5,17,0). A second 
order list is a list with at least one ele- ment which is itself a first order list. For exampl( the 
list (3,(4,-5)) is a second order list with an element which is a first order list, (4,-5). In SAC-1 
and EDUSAC lists may be of any order. The special case of a list with no elements is called the null 
list and is represented externally by (). A second way of describing a list is graphically as a collection 
of blocks connected by arrows. The list (5,4,1) may be represented graphically as: rl where the thirds 
block's arrow is shown pointing to ground, to indicated the end of the list. The tech- nique of describing 
lists may be expanded to include sublists of replacing the atom by a pointer to the corresponding sublist. 
For example, the list (5,(4,3),2) can be represented as: The special case of the null list ( ) is representedby 
 --dl, and, the graphic representation of a list ( ( ) ) with one element which is a sublist pointer 
to the null list is: ' 'I T '~ll Quite often a graphic form is more descriptive and thus will be used 
extensively in this paper. 3.0 List Structure and Available Space Initially, the user must invoke a 
system routine to format and link a 6000 word array into a list of 3000 cells available for list manipulation. 
This available list is the sole source of cells for generating user lists. An integer variable in labelled 
common points to the first available cell. When the user invokes a system routine requiring an available 
cell, the first cell is removed from the list and the pointer is changed to indicate the next cell in 
the available list. Thus, at any given time,.a cell is either part of a user list or is part of the available 
space list. When the user completes some operation and a cer- tain list is not longer needed, this list 
may be returned to the available space list by invoking one of the system routines to erase the list. 
The erasure routine clears each cell in the list and prefixes it to available space. The 3000 available 
cells are initially linked in a list whose structure is graphically; This graphic representation is independent 
of the actual hardware implementation and will be used extensively in future examples. EDUSAC's imple- 
mentation of a llst cell requires two FORTRAN words. The four fields are used to store linkage information, 
cell usage, and the actual informa- tion associated with the cell. The TYPE field may be either a zero 
or a one. A zero indicates the cell is an atom, while a one indicates the cell is a sublist pointer. 
The COUNT field contains the number of references to the list which begins with the current cell. This 
field enables cells to be shared by many l~sts, This reference count technique was first devised by Collins 
in 1960 [2]5 This field has a very special use for EDUSAC, Ini- tially, the 3000 cells are linked in 
the available space list with a reference count Of zero, As the cells are released to form user lists, 
the reference count is set to one. The user should never perform an operation other than erasure which 
results in the reference count returning to zero. Thus, system routines can determine ownership by a 
simple check of a cell's reference count. If the reference count is greater than zero, then the cell 
is part of a user list; if the reference count is zero, then the cell is part of the system available 
space llst. Erasure of cells with the reference count techniques has a very important implication. Before 
a cell is returned to the available space list, its reference count must first be checked to determine 
if it is a shared cell. If it is, then the remainder of the list beginning at that cell may be "erased" 
by de- creasing that cell's reference count by one. Overlapping of lists (via the sharing of cells) was 
developed by John McCarthy in 1960 [3]. McCarthy's system, LISP, reclaimed cells automatically (called 
garbage collection) when the cells were no longer needed by the user. The drawback to this technique 
is, however, that the time required to reclaim cells is proportional to the number of cells in use at 
the time. This is not true for the reference count system; erasure time is proportional only to the number 
of cells to be returned to the available space list. The SUCCESSOR field is the link of a given cell 
to the next cell in the list. A zero in a successor field indicates a ground cell or the last cell of 
a list. SAC-l, being an algebraic system, is based on a single link field since most algebraic operations 
proceed sequentially. EDUSAC is patterned after the SAC-1 list processing system. Therefore, EDUSAC also 
maintains a single link successor field. The VALUE field contains the actual information, numeric or 
symbolic, associated with the cell whose type is zero and contains the pointer to a sublist for a cell 
whose type is one, The graphic representation of a list consisting of one atom whose value is zero is: 
The external list representation is: (o) ~n the above graphic description it is important to note that 
the pointer to the cell points to the first word of the two words required for a cell. Every valid cell 
pointer must be aligned on the first word of a cell, and all system routines make an alignment check 
for each pointer sent before performing their respective operations. For the list represented graphically 
as: The corresponding external representation is: (I,(2),()) 4.0 Additional Routines The complete set 
of routines comprising the SAC-1 list processing system are described in [1]. This section considers 
the three diagnostic routines that are in EDUSAC, but not in SAC-I. It should be noted that all standard 
SAC-1 routines are called and used in exactly the same way in EDUSAC. However, their actual coding has 
been greatly expanded. Each EDUSAC routine provides every possible check to insure that proper proce- 
dure is being followed. If not, an extensive diagnostic message is printed. The additional EDUSAC routines 
are as follows. 4.1 Routine LDUMP Callin 9 Sequence: CALL LDUMP (L) Description: Routine LDUMP is a 
diagnostic routine to help the student locate errors in his/ her generated lists. If list L is improperly 
structured, then as much of the list as possible will be printed before the program is terminated. 4.2 
Routine TRACON Calling Sequence: CALL TRACON Description: Routine TRACON may be called by the student 
to turn on the system trace facility, If the trace has been turned on, each system rou-tine entered will 
have its name and the message ***ENTERED*** printed. As soon as the routine is exited, the routine name 
and the message ***EXITED*** is printed. The feature is helpful in following the system response to student 
sub-routines calls. 4.3 Routine TRACOF Callin 9 Sequence: CALL TRACOF Description.: To turn the system 
trace of routines off, the student simply calls routine TRACOF. 5.0 EDUSAC Error Checking Feature Probably 
the most common error made by list proces-sing novices is the generation of lists with invalid links 
or pointers. Another of the more common errors is the attempted traversal of a list or data struc- ture 
in an incorrect order. EDUSAC locates these errors and others in an attempt to teach students the proper 
technique of using the SAC-1 system. There are two methods of detecting improper links or pointers generated 
by a student. The first method is to check every time a user attempts to store a pointer (either as a 
successor to a cell or as a pointer to a sublist) that the pointer does in fact locate a user list. This 
checking procedure is very helpful in detecting problems as they occur rather than later, when pinpointing 
of the error is no longer possible. The second method can be illustrated with an example. If the student 
structures a list properly but later erases a section erroneously, the result would be an invalid pointer. 
Let M = (2,1,0) and N = (5,4,3) be two lists. Assume the following code prefixed list N to list M: M= 
PFL (N,M). Now the list would be  L' °"' IolJz I -,to I z I -I--I. Note that the prefix operation 
did not alter the list pointer N (generally one would not desire to do so), Thus, if the student were 
to erase list N, the first cell of list M would poin~to a sublist which had been returned to available 
space, clearly an error. This type of error is not detected im- mediately, but is detected when the user 
invokes a system routine which would try to traverse the erased sublist. 6.0 Sample JCL and. Program 
The following section describes the JCL to invoke EDUSAC along with the WATFIV compiler at The Univer- 
sity of Tennessee. It also includes a sample pro- gram using the list processing and diagnostic facili- 
ties of EDUSAC. The JCL required to invoke the EDUSAC-WATFIVE system is: //SAMPLE JOB (PROJ.#,PROG.#,R-192K),NAME 
//STEP EXEC WATFIV,GOREG=!92K //GO. FTO5FO01 DD DSN=J31841.P36318.EDUSAC.LIST,DISP=SHR // DD * USER'S 
PROGRAM The sample program is a simple list processing prob- lem -.- determine the correctness of an 
input project code and programmer number for a typical job card. The first step the program performs 
is to input all the correct project codes and the ranges of allow- able programmer numbers for each. 
(This could be read from a separate system disk. For simplicity, these will be read from the card reader.) 
The list structure for the program's valid project codes and programmer numbers is:    "~~Ii "'" 
This list is built by inputting a list triple of the form: (PROJECT CODE, LOWEST PROG.#,HIGHEST PROG.#). 
For example, the list (2975,133619,133919) could be an input to the list structure of valid project codes 
and programmer numbers. Once the valid user list has been input, then all that remains is to check each 
project code, program- mer number pair sent (read from the card reader) to the routine for validity. 
If the pair is valid, the routine waits (goes back and reads the next card) for the next validity check. 
Otherwise, a message is output indicating an error. The first part of the code performs the validity 
check correctly, The second section of code is wrong and enables the system to provide its trace-back 
feature to isolate the location of the error. INTEGER PFL,TAIL INTEGER FIRST,PCODE,HIGH, INITIALIZE 
THE SYSTEM CALL BEGIN READ THE VALID PROJECT CODES AND PROGRAMMER NUMBERS. A TRIP CARD OF A NULL LIST 
WILL BE SUED TO SIGNAL THE END OF THE INPUT TABLE. ICODES=O WRITE(6,2000) 2000 FORMAT(' THE VALID PROJECT 
CODES AND PROGRAMMER NUMBER RANGES =') 10 L=READ[5) IF(L)20,40,3020 WRITE(6tIO00) 1000 FORMAT( ERROR 
OR END OF INPUT FOR VALID CODES') STOP PREFIX THESE CODES TO THE OTHER CODES AS A SUBLIST. 30 ICODES=PFL 
(L, ICODES ) CALL LWRITE (16,L } GO TO 10 40 WRITE [6,200) 200 FORMAT(' INPUT OF VALID PROJECT CODES 
AND PROGRAMMER NUMBERS IS COMPLETE' ) C C C PART 1: THIS SECTION WILL PROCESS 5 PAIRS OF PROJECT CODES 
C AND PROGRAMMER NUMBERS; SOME WILL BE VALID AND OTHERS WILL C BE INVALID, (THE CHOICE OF 5 IS ARBITRARY.) 
C C DO 100 I=1,5 L=LREAD(5) I F(I.)50,60,70 50 WRITE(6,3OO) 300 FORMAT(' UNEXPECTED ERROR OR END~OF~FILE:) 
STOP 60 WRITE (6,400) 400 FORMAT(' ERROR---INVALID OR MISSING PROJECT CODE/PROGRAMMER #=:') GO TO 90 
C C NOW LOOP THRU THE VALID PROJECT CODES LIST, ATTEMPTING TO C MATCH ONE WITH THE INPUT CODE. C 70 IC:ICODES 
INPCOD=FIRST(L)  80 IF(IC.EQ.O)GO TO 60 C C GET A POINTER TO VALID PROJECT CODE LIST AND ADVANCE THE 
C TABLE POINTER. C CALL ADV(LIST,IC) C C NOW GET THE PROJECT CODE AND ADVANCE THE LIST POINTER TO C THE 
PROGRAMMER # RANGES. C CALL ADV(PCODE,LIST) C C ARE THE PROJECT CODES EQUAL? IF NOT, GO GET THE NEXT 
VALID C PROJECT CODE. C IF(INPCOD. NE.PCODE)GO TO 80 C C NOW THAT PROJECT CODES MATCH, CHECK FOR A PROGRAMMER 
C NUMBER IN THE PROPER RANGE. C INPNUM=FIRST(TAIL(L)) C C NOW GET THE LOW AND HIGH VALID PROGRAMMER #'S 
C CALL ADV(LOW,LIST) CALL ADV(HIGH,LIST) C C IS THE INPUT PROGRAMMER # IN RANGE? IF NOT OUTPUT A MESSAGE 
C IF(INPNUM. GE.LOW.AND. INPNUM.LE.HIGH)GO TO i00 GO TO 6O 90 CALL LWRITE(6,L) I00 CONTINUE C~~~~~~~~~~ 
C C PART 2: THIS SECTION OF CODE WILL CAUSE A SYSTEM TRACEBACK. C INSTEAD OF LOCATING THE INPUT PROGRAMMER 
NUMBER CORRECTLY, THE C INCORRECT PRIMITIVE SEQUENCE: C INPNUM=FIRST(FIRST(L)) C WILL BE USED. (NOTE: 
A SIMILAR TRACEBACK WOULD OCCUR IF C THIS OR THE PREVIOUS SECTION OF CODE ATTEMPTED TO PROCESS C A USER 
PROJECT CODE WITH NO PROGRAMMER NUMBER.) C C L=LREAD(5) INPCOD:FIRST(L) AGAIN LOCATE THE VALID PROJECT 
CODE. IC=ICODES 110 IF(IC.EQ.O)GO TO 120 CALL ADV(LIST,IC) CALL ADV(PCODE,LIST) IF(INPCOD,NE.PCODE)GO 
TO 110  THIS NEXT SECTION OF CODE WILL CAUSE THE ERROR AND THE RESULTING SYSTEM TRACEBACK. INPNUM=FIRST(FIRST(L)) 
 THE SYSTEM WILL TERMINATE IN ADV AS THE NEXT SYSTEM ROUTINE ENTERED AFTER A TRACEBACK. CALL ADV(LOW,LIST) 
 THE REMAINING CODE WILL NOT BE EXECUTED. CALL ADV(HIGH,LIST) IF(INPNUM. GE.LOW.AND. INPNUM.LE.HIGH)GO 
TO 120 CALL LWRITE(6,L) 120 STOP END Inputs to program: (2575,133649,133699) (2985,176659,177789) (3365,124579,124679) 
(4475,134679,134779) (2575,133659) (2985,177779) (1225,137689) (3365,124589) (4475,134579) Output of 
program: THE VALID PROJECT CODES AND PROGRAMMER NUMBER RANGES = (2575,133649,133699) (2985,176659,177789) 
(3365,124579,124679) (4475,134679,134779) INPUT OF VALID PROJECT CODES AND PROGRAMMER NUMBERS IS COMPLETE 
ERROR---INVALID OR MISSING PROJECT CODE/PROGRAMMER #=: (1225,137689) ERROR---INVALID OR MISSING PROJECT 
CODE/PROGRAMMER#=: (4475,134579) ***ERROR---INVALID POINTER: 4475 ***ERROR TRACE PROCEEDING BACK TO ROUTINE-' 
FIRST '-*** ***ERROR TRACE PROCEEDING BACK TO ROUTINE-' MAIN '-*** ***USER PROGRAM TERMINATED IN ROUTINE 
' ADV '*** 7.0 Current Application EDUS.AC has been used very successfully in both be- ginning and advanced 
data structures, classes. It has allowed students to learn a list processing language quickly, and also 
debug very complex appli- cations. This latter characteristic has also made it useful in classes in symbolic 
and algebraic com- putation. Becuase of the simplicity of the SAC-1 list struc- ture, EDUSAC has also 
been incorporated into the second quarter programming course. This has aided the student in achieving 
an early introduction to data structures other than arrays. Currently, other applications are also being 
studied. One potential area is systems programming and oper- ating systems courses, where data structures 
play sucil an important part. Several students have used EDUSAC in projects such as job queue and disk 
ac-cess managers. References 1. G. E. Collins, The SAC-1 list processing sys-tem, University of Wisconsin, 
Computer Science Department Tech. Report No. 129, July 1971, 34 pages. 2. G. E. Collins, A method of 
overlapping and erasure of list, COMM. ACM, No. 12, 3 (Decem- ber, 1960) 655-657.  3. J. McCarthy et 
al., LISP 1.5 Programmer's Manual, M.I.T. Press, Cambridge, Massachusetts, 1962.  
			