
 Syntax Directed Graphical Interaction Dan R. Olsen Jr. and Elizabeth P. De~_sey Conlouter Sciem~e Deparlm~nt 
Arizona State University i. Introduction %T/s paper describes SY~KAPH (SYNtax) directed GRAPHics) which 
is a user interface generator for interactive system graphics. ~lis syste~ applies the principles of 
syntax analysis, parser g~ation and data abstraction to ~le development of man-machine interfaces. 
A great deal of work has been done in the modeling of user interfaces using context-free grammars 
[JacoB2, Lafu78, Pars79, Reis81, Wassgl]. There also has been work done in using parser generation 
tools for simulating such interactions for prototyp_ing purposes [Hanu80]. The purpose of t/le system 
described here is to provide a functional tool for actually inplementing graphical user interfaces. 
 There are several goals and constraints t/~at we adopted in designing the system. ~%ese are s~marized 
as follows:  The user interface must be separable from the application's semantic routines.  The graphical 
devices Ira/st be integrated into the interaction specification.  Hierarchical interactions n~ist be 
supported.  Feedback, error reporting, prompting and correction of input must all be handled au%omatically. 
  It was, however, assumed from the beginning that t/~e semantic routines would perform all of the 
 graphics for displaying non-syntactic information. 2. Overall Approach Context-free grammars were 
chosen to express the syntax of the interaction because they provide Permission to copy without fee 
all or part of this material is granted provided that the copies are not made or distributed for direct 
commercial advantage, the ACM copyright notice and the title of the publication and its date appear, 
and notice is given that copying is by permission of the Association for Computing Machinery. To copy 
otherwise, or to republish, requires a fee and/or specific permission. &#38;#169; 1983 ACM 0-89791-108-3/83/006/0112 
$00.75 us with the most powerful formalism for %41ich well understood and easily implementable parser 
generation techniques exists. Because we wanted the system to be easy to use for individuals ~o are net 
skilled in c~mloiler construction, the class of ELL(l) grammars [Levi78] was chosen. %~lis provided us 
with option and iteration as well as a straightforward top-down parse which is easier for the novice 
to understand. It also allows insertion of sen%antic actions in a logically sir~ple sequence. At the 
outset it was assumed that the graphical devices could be integrated with the gl-~ as a special token 
set. This would allow the graI~lics portion of the problem to be primarily handled in the lexical analyzer 
with a standard ELL(l) parser to handle the syntactic analysis. As will be shown later this ass~i0tion 
was net entirely valid. To provide the s~mantics of the interaction the application supplies a set of 
data types and a set of procedures which manipulate those types. The data types define pictures to be 
displayed as well as parameters to the procedures. The procedures are invoked as semantic actions of 
the interactive input parser. In some sense this means that the application is viewed as a data abstraction. 
The syntax of t/%e cc[~rands in t/~is view is irrelevant. This aids in the separation of the interaction 
from the remainder of the program. An interactive application can, therefore, be designed functionally 
wit~hout regard for the sequence of inputs used interactively. The syntactic nature of the interaction 
can be left until later. In addition, multiple forms of input syntax can be easily brought up to adapt 
to a specific configuration of interactive devices. The interaction generator was implemented on top 
of an already existing parser generation tool (Rrippl) which was developed at Arizona State University. 
The generator produces PASCAL source code for a table driven recursive-descent parser. The recursive-descent 
technique was d%osen to allow attributes to be ir~pl~ented as parameters add local variables to the 
non- 'terminal procedures. This method also allowed semantic actions to be ir~lemented as PASCAL statements. 
This method of dealing with semantics makes non-terminals appear to the 112 progr~ like syntax directed 
PASCAL. The use of iteration and option map naturally onto the looping and conditional constructs that 
pro- grammers are already familiar with. This similarity is very in~ortant in a tool which will be used 
by progranlrers who are usually not trained in the finer points of compiler construction. The table-driven 
format provides more flexibility in dealing with errors and other exceptional conditions; however, more 
in~ortantly it provides, at run-time, a cc~plete specification of the interaction. This feature is important 
to several of the autcr~tically supported features. Using this syst~n an interactive graphics program 
is ccmloosed of: a lexical specification, a granmar specification, and an underlying data abstraction 
which is the semantics of the inter- action. The lexical specification defines the kinds of inputs that 
the interaction will use. This can include not only specific buttons and keys 'but also a set of virtual 
devices which the system will create and manage. Included in this are menu entries and simulated analog 
inputs. The grarm~tical specification describes the sequem~e of inputs required to formulate specific 
commands and the mapping of interactive to semantic actions. In addition, the non- terminals of the granmar 
provide a natural hierarchic arrangement of the dialogue. Semantic actions inserted in the gr~ allow 
interface manager to invoke the application- specific processing p1~vided by the application procedures. 
 A major goal in interactive systems is to make the application independent of the particular configuration 
of interactive devices that are available. The SYNGRAPH syste~ provides this independence on three different 
levels. The first is the virtual device level wherein devices that are not actually available are simulated. 
This concept is found in most modern graphics packages. It has been pointed out, however, that simulation 
of devices makes the application function on any configuration but does not necessarily make it a convenient 
or effective system to use [Baec79]. The second level of independence that SYNGRAPH provides is the binding 
of logical token names to physical devices. This allows easy substitution of devices by simply changing 
the logical to physical device bindings in the lexical specification. This alteration can also be performed 
by converting a logical device into a non-terminal which performs the desired function. The third level 
of independence is that the granmar as a whole can be restrucb~red without changing the application semantics. 
This is by far the most flexible approach and has been shown through our experience with the system to 
be relatively easy to do. These three levels of independer~ze form a much more powerful mechanism for 
adapting an interaction to a new environment than is found in normal graphics systems. 3. Lexical S~cifications__ 
 The lexical specification portion of the input defines most of the graphical interface to the syst~n. 
A sample lexical specification is shown in Figure i. Tokens are defined by name with a specification 
of their type. This specification cc~pletely defines their relation to the physical devices. In addition, 
this is where simulated devices are also declared. Although not yet designed or impl~L~_nted, it is hoped 
that user defined virtual devices can be J/~tegrated into the lexical specification. TE~NA~ loca locater; 
xpos valuator i-50, +50; Width valuator r LD, 10.0; bl button 2; eh character; '/' key; piewall pick 
walltype; picwindow, pick windowtype; draw~ erase: wa~;  window icon m ( O, O) d (o, i) d( i, Od( 
I, O) d( 00)m(0.5,0) d(O.5, i) m ('o. o.~) d ( i, 0.5); quit; ~# END._TERMINAL= quit; Figure i. Sample 
Lexical Specification  The various kinds of tokens are categorized by the type of semantic information 
that they return, the kind of prompting that they require, the echo feedback required when they are selected 
and the method of acquiring input from the token. For example, the locahor token must return a position 
on the screen, while the total information about a button token is the fact that it has been entered. 
Feedback for menu tokens is display of the token name, while feed- hack for the locator is marking the 
chosen screen position. There are two token characteristics that are worthy of notice here, although 
they will receive special attention later. The first is that correct pronpting for tokens requires sane 
knowledge of the state of the parse. The second is that in graphics, inputs are classified as event and 
sar~pled devices. The event devices such as function buttons and keyboard characters fit naturally in~ 
normal parsing strategies. The sanp_led devices, whose values are to be read by the program at appropriate 
stages of the parse, do not fit so naturally. Of particular interest is the treatment of picking. That 
is the selection of displayed images either by a light pen or by a locator device such as a tablet or 
mouse. The traditional method for handling picking is to provide the graphics system with an integer 
identifier generated by the application with each set of pickable display primitives. When a pick is 
performed, the graphics syste~ simply returns the identifier that was associated with the 113 selected 
image. It is then up to the application to decipher the meaning of this integer name. This use of integer 
nanes is inconsistent with the data abstraction view that has been adopted for the application semantics. 
In SYNGRAPH the view is taken that each displayed picture is simply a representation of same underlying 
data object. The identifier returned which such a picture is picked should therefore reference this object. 
This referenced data value natmrally becDmes a possible operand to be passed to a semantic routine for 
processing. To retain the data abstraction view of semantics, any user- defined data type must be suitable 
as a pick identifier. So as to alleviate the typing problems that this causes in PASCAL each data type 
 which can be associated with a picture for picking purposes must be declared as a pick token in the 
lexical specification. For each such declared pick type a routine is generated which the application 
can use to associate pointers to values of that type with graphical primitives. In addition to clarifying 
the semantics of picking, this use Of data typing has allowed certain ambiguities that arise in picking 
operations to be viewed as a name overloading problem which can then be autcrnatically solved by the 
system in most cases. The lexical s~ecification of the syst~n ~es most of the graphical concepts in 
the input specification. There are, however, several interesting problems in the parse algorit/m~ which 
are a result of the graphical nature of the tokens. These are discussed in the next section. 4. Grammatical 
Specification The cc~mand language grammar specification is in extended BNF form, as illustrated in 
Figure 2. Sequence implies concatenation, option is expressed by "I", iterations are enclosed in "({ 
and })", and parentheses are used for grouping. Each appearance in a production of a token which returns 
a value, such as a locator position or pick identifier, must be followed by a parameter of a suitable 
type to hold that value. These parameters, as well as variables and semantic actions, are expressed as 
PASCAL Gode strings, bracketed by " (#" and "#) ". %~%en dealing with the grammatical aspects of SYNGRAPH, 
there are three areas that need special treatment. The first is the parsing requirements imposed by the 
graphical tokens. The second is the analysis of the syntax necessary to correctly generate proni0ting 
output. The third area is the correct handling of errors and other exceptional conditions. ~l~wcol~ 
:heam-~= (//~): l~level]  :.='draw~TlTR~Wl~R ~f/f)"/' I ; [~,.bout] l~'r's = (~ xl, yl, ~,.V~ : real; 
thiswalt : welltype: ~); .an loca ~ m. yl #') bl ~a,~m ~xl. yl . ~, y2) ~) I window  !o=a~ xl. 
yi ~) bl dr~wwi~ow ~swaU, xl, ;~, w) J) Figure 2. Sample Grammatical Specification 4.1 Parsing Problems 
 The primary problem with parsing graphical tokens is the difference between event and sampled inputs 
[GSPC79]. Event tokens such as keystrokes and button presses are discrete in nature and fit naturally 
into the normal parsing strategy. In addition to their use to select transitions to be taken when parsing, 
they also embody the selection of a specific time when a transition should be taken. Events inputs are 
characterized by the parser waiting for such an input to occur before proceeding. Sampled inputs, such 
as reading the current value of a knob or tablet stylus, are very different in the relationship to eontrol 
of the parse. Sar~oled inputs by their nature do not control selection of the time when a transition 
should be taken because the ~ of sanpling is under parser control not user control. In addition, because 
sanpled values are more continuous than discrete they are not used to select parse transitions. One of 
the problems that the syst~n nmst solve is to associate with each transition on a s~mpled device, an 
event which will specify when that sampling should take place and sane selection token that can resolve 
conflicts between two transitions on sampled inputs. In general sampled devices can be viewed as a special 
kind of semantic action. When a locator device such as a tablet is used for picking values from the 
screen, a special problem arises. The pick tokens, unlike the other sarspled devices, do control the 
parse by the type of value that is picked. The use of the locator, which is sampled, means that there 
is no event to indicate when this decision should be made. A two-pass algorithm for ccmputing FIRST and 
FOLLOW sets has been devised which solves this problem and ~ssociates events with the other sampled devices. 
 114 In the subsequent discussions of these algorithms there are four classes of transitions to be considered. 
They are: event, sampled, pick and semantic action. Figure 3 shows a state machine which will be used 
as an ex~Lple for the discussion of this process.  PB /l~ A;,~2 - .~,'r,cs SI-53" 8v.~ Figure 3. 
In all phases of the algorithm the semantic actions are treated as being NIL transitions and the controlling 
inputs are propagated forward across th~n to determine the actual set of inputs on which the action transition 
is to be taken. In the initial pass of the algoritlml to ccr~oute FIRST and FOLI/~ sets, the sampled 
inputs and the pick inputs are also treated as NIL transitions. This is so that each transition has a 
set of event inputs associated with it to indicate when the transition should be taken. This means that 
after the first pass each transition has an additional "trigger" input associated with it. ~bre than 
one trigger input is handled by creating additional transitions. The results of the first pass are illustrated 
by Figure 4. It is important to note that simply waiting for any event before making a sampled or pick 
transition is not sufficient because, once having made such a transition a state must be reached where 
the event input is acceptable. To make a sanioled or a pick transition and then find that the event is 
not acceptable would entail backing up the parse. For these reasons the events are associated as triggers 
and if there is no trigger for that event then the event is immediately reported as an error without 
having made the transition.  B'L/PB .e,_~/P8 < Figure4.  A second pass through the automaton is required 
in order to handle pick tokens correctly. Because pick tokens in this imple- mentation are based on a 
tablet which is sampled, each pick token must have a trigger event associated with it. This trigger/pick 
associa- t/on was a~lished in the first mass. In the second pass, pick and tablet tokens are viewed as 
 valid inputs rather then NIL transitions. This means that trigger/pid[ and trigger/tablet pairs are 
propagated forward across sampled inputs and semantic actions. The reason that tablet inputs are also 
propagated forward is that they must be compared with pick inputs to determine if the tablet is to 
be used for picking or for inputting a point. The pick information must be propagated forward because 
like the event inputs it controls which transition is to be taken from a given state. It also must 
have an associated trigger which necessitated the two pass method for cc~puting FIRST, FOLIf~ and the 
select sets for each transition. Figure 5 shows the results of applying the second pass. Having computed 
the select sets it is necessary to check each state for conflicts between transitions. In order to formalize 
the conflict state it is necessary to define each transition as having a trigger, a pick (which may be 
nil or the tablet) and an action which may simply be a consume of the trigger or pick input or the calling 
of a non-terminal. A conflict exists for two transitions A and B leaving the same state when trigger 
(A) = trigger (B) and pick (A) = pick (B) 115 51/PA Figure 5. 4.2. Promoting  The prc~pting for 
required inputs is a primary capability in interactive systems. This has been automated in SYNGRAPH by 
the analysis of the input gr~. The pronpting for user inputs is organized into a hierarchy of dialogues. 
This hierarchy is specified by identifying some of the non-terminals in the gr~ as headers for new levels 
of discourse. All prompting analysis is performed within such a level. This includes looking ahead to 
determine the set of menu items which must be assembled to form a menu as well as the set of virtual 
input devices which must be allocated screen space in which they can be simulated. The menu set for 
a level is the union of all the tokens used in the non-terminal which is the level header, all tokens 
in called non-terminals which are not new levels, the first set of called non-terminals which are themselves 
new levels, and the follow set of the original non_ terminal. All tokens in the menu set which are menu 
items are allocated display space in the menu for the level. Items will be allocated space and displayed 
as names "or icons, depending on their declarations. ~enu width depends on the size of the largest item 
to be displayed. Simulated input devices are also allocated screen space, as is an area for feedback 
data. The screen layout for one level is shown in Figure 6. At run-t/me, the level display is changed 
as the parser is prepared to accept a token in a new level. Application area move erase move mall 
window  door qmt valuator valuator system message rubout last token token queue for rubout applicationmessage 
cancel helplnohelp  Figure 6. Screen Layout A second kid of prompt which is also supported is the 
indication of the legal inputs for the current state. All items in the menu which are acceptable either 
as the next token or as its trigger are marked by a dot next to the menu display. This information is 
easily obtained from the parse transition tables. It should be pointed out here that by isolating the 
interaction specification in a granmar it is possible to analyze an interaction to deduce its properties 
add make intelligent decisions about how devices should be handled. Any analysis of the interactive behavior 
of a system is alr~st impossible without the separate representation of its input language. In order 
to fully analyze J~%teractive behavior, an equivalent formalism must exist for the output and its relationships 
to the input language. 4.3. I_nput Correction The ability to back out of an erroneous input is inlooiW~nnt 
to an interactive system, t/tough not in normal ccaloiler construction. The problem is furt/Rer compothnded 
by the need to recover s~tically as well as syntactically. The error recovery mechanimn, in a generated 
interaction as in a generated compiler, is much more reliable in its behavior than one that is hand coded. 
 There are two forms of input oorrection that are supported by SYNGRAPH. The first is a cancel operation 
which is treated as a syntax error by the parser, ~ich provides a controlled semantic recovery to a level 
defined in the granmm~ specification. An optional "escape" clause in the grammar for each non-terminal 
may include semantic actions to be taken if the user decides to cancel an action at that level. It may 
also include a "handled" token to terminate the cancel with the return from that non-terminal. If no 
"handled" is specified, the cancel process- ing will continue with the escape clause at the next higher 
grammar level. If no escape clause is provided, the return is used. Figure 7 shows 116 the result of 
a cancel action in a simplified grammar. The parse state before and after the entering of a cancel is 
indicated by an up arrow. Grammar with Escapes: CYCLE ::= ~ COMMAND ~quit; COMMAND ::= DRAWCOM] MOVECOM 
I ERASECOM; escape ::= (# reset-counts #) handled', DEAWCOM ::= draw { DRAW]NSTR '/' ~; DRAWINSTR ::= 
wall boca Inca [ window picwal! loca width; escape ::= (# undo..draw #);  Inputstream: draw window 
cancel Parse state following cmncel: CYCLE ::= { COMMAND ~quit; Figure 7. Cancel Processing  Note 
that in the example the sequence of actions to be performed would be: UNDO DRAW, return frc~ DRAWINSTR, 
return from DRAWOC~I (it has no escape), RESET COUNTS, handle the cancel and return from C~D. The second 
form of input correction is rubout processing, which involves r~noving the last input event token and 
appropriately backing up the parse. The backing up operation is difficult only when one considers undoing 
the s~mantic actions caused by the input token. ~ubout processing is implemented by saving the input 
without performing the ses~tntics so that a rubout operation can remove inputs ~%en requested. In order 
for this to work, there n~Jst be specific points at which sen~ntics are processed and rubout of those 
inputs is no longer allowed. In textual interactions this point is usually characterized by the end of 
an input line. The end of line concept does not exist in graphical interactions. A similar effect is 
achieved when certain non-terminals are designated as supporting rubout. The inputs are saved aut/m~tically 
whenever such a non-terminal is entered and are then processed se~antically when the non-terminal has 
been cc~pletely recognized. The saved tokens are displayed to the user, showing what may be rubbed out. 
The problem lies in following the parsing state machine so as to produce the prompting and feedback while 
not performing the semantics. The s~tics are then performed by reparsing the saved input without producing 
the prompting and feedback. There are also situations in which a token does not advance the parse at 
all. %~en an interactively entered token has no transition from the current state, that fact is discovered 
 in the scanner. An error message is displayed to the user, ag~ the parse is unchanged until a syntactically 
correct token is supplied. Similarly, the scanner reoognizes certain special tokens which require immediate 
action regardless of the parse, notably cancel, rubout, help, and resetting the simulated input devices. 
Because all erroneOus and special tokens are r~noved fr~n the input strewn, the non-terminal procedures 
receive only valid tokens. 5. Conclusion The SYNGR~2H system applies parser generation tecJlniques 
and data typing concepts to graphical interaction systems. It shows how a significant portion of the 
man-machine interface can be autcm~tically generated, including prompting, feedback and error handling, 
using such techniques. References  Baecker/ Renald. "Towards an Effective Characterization of Graphical 
Interaction." Seillac II Workshop on Man-~chine Interaction Position Papers, Mathematisch Centum, Amsterdam, 
1979. GSPC. "Status Report of the Graphics Standards Planning Ccmmlittee." C/mputer Graphics 13,3 (Aug. 
1979). Hanau, Paul R. and IP_r~rovitz, David R. "Prototyping and Simulation Tools for User/ Computer 
Dialogue Design." Cc~puter Graphics 14,3 (July 1980), 271-278. Jacob, R.J.K., "Using Formal Specifications 
in the Design of a H~an-~uter Interface." Proceedings HLm~n Factors in Ck~puter Systems, Gaithersburg, 
MD, March 1982, 315-321. lafuente, J.M., D. Gries, "Language Facilities for Programming Interactive 
User-Computer Dialogues." I~4 Journal of Research and Developn~_nt 22,2 (March 1978), 145-158. Lewi, 
J., DeVlaminck, K., Huens, J., and Huybrechts, M. "q~e ELL(I) Parser Generator and the Error Peoovery 
Mechanis~a." Acta Informatica 10,3 (1978), 209-228. Parsons, I.T., "A Support System for Interactive 
Languages." Software Practice and Experience 9,1 (Jan. 1979), 73-86. Reisner, P., "Formal Grammar and 
HL~nan FactOrs Design of an Interactive Graphics System." IEEE Transactions on Software Engineering SE-7,2 
(~rch 1981), 229-240. Wassezman, A.I. "User Software Engineering and the Design of Interactive Syst~ns." 
Proceedings of the Fifth International Conference on Software Engineering, (March 1981), 387-393. 117 
 
			