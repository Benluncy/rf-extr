
 A General Purpose Graphic System for Computer Aided Design Sakae Uno Hideo Matsuka IBM Japan, Ltd. 
Tokyo, Japan ABSTRACT The experimental Advanced Integrated Designer's Activity Support (A-IDAS) system 
is intended to be a base for a total engineering system rather than a pure graphic system. The system 
provides a database in which graphic data, geometric data and engineering data are stored in a relational 
data model. It also provides a graphic management facility which can manipulate not only pictures drawn 
with lines, but those drawn as areas. Areas are represented by crosshatched lines or colors. In more 
complicated ways, they can be represented as texture or scenery. The system controls two kinds of graphic 
display devices: a vector display and a raster display. These devices are supported through a device 
independent user interface when pictures are drawn with lines. With this experimental system, it has 
been found out that one can develop an engineering system having fairly general purpose capabilities. 
KEY WORDS AND PHRASES: computer aided design, computer graphics, device independent graphics, engineering 
database, relational data model, scenery, texture. CR CATEGORIES: 3.20, 8.2. 1. INTRODUCTION Graphics 
plays an essential role in computer aided design (CAD). In developing a graphics system for CAD, we should 
consider: i) a variety of graphic devices, 2) the designer's interaction with these devices, and 3) use 
of data for reference and computation, e.g., for engineering analysis. For the first consideration, CAD 
systems are using a plotter and a graphic display and will eventually use more sophisticated devices. 
These devices are expected to be supported in a unified way, for example, by the proposed standard (5). 
 Authors' address: Tokyo Scientific Center, IBM Japan, 3-2-12 Roppongi Minato-ku, Tokyo 106, Japan The 
second consideration is that, although a picture on a display screen is traditionally drawn with lines, 
it should be drawn as areas if ares are designer's components. Further, it will be better that the areas 
are represented as images rather than as outlines when their texture is concerned. Some systems have 
been proposed to implement these functions (1), (7). The last consideration means that there must be 
an engineering database which includes more than graphic data. Since the structure of an engineering 
database is very complicated, its geometric data, graphic data and engineering data should be well integrated 
to structure a complete and satisfactory database (4). To satisfy all these requirements, the experimental 
Advanced Integrated Designer's Activity Support (A-IDAS) system is being developed. The system is designed 
as a nucleus for a variety of CAD systems. In general, designer~system interactions cause either of the 
following two: i) data transfer/input from graphics to a database for generation and modification of 
data, and 2) data transfer vice versa for output as a result of i). The ways of interactions for data 
input or the program modules that support these interactions, depend on design process (methodology) 
of an application. On the other hand, data output can be handled in a fairly independent way providing 
that data is stored in the database according to established rules. Therefore, the nucleus for a CAD 
system should be provided with general purpose modeling structures and output methods. And this paper 
discusses these points, proposing a solution to data modeling methodology and graphics for a CAD system. 
 2. GEOMETRIC MODELING Geometric data is a key bridge between an engineering database and graphics. 
The geometric model in the A-IDAS system is represented by a directed graph. That is, every geometric 
element is divided into four geometric "classes": vertex, edge, face and body. Each class consists of 
several geometric categories or "legion."  &#38;#169; 1979 ACM O-89791-004--4/79/0800--025 $00.75 See 
Copyright Pg. 2.5 The class edge, for example, includes a straight line, a circle (arc), a spline function 
curve, etc. Legions are application dependent and not pre-defined. This geometric information is stored 
in a tabular form or a relation of a relational data model. Although the system does not limit the number 
of geometric legions, the representation of a newly defined legion and its relating links should, however, 
be compatible with a structure proposed below. 2.1 ATTRIBUTIVE RELATIONS  Attributes of geometric elements 
are stored in tables called "attributive relations." Figure 1 shows the relationships of + ..... + !POINT! 
 ÷ ..... + .......... + ............ + ........... ÷ !geometric ] graphic !engineering! l data l data 
! data ! + .......... + ...... + ..... + ........... + !coordinate! line I l l +.......... + or !color!application! 
! x y z !symbol! ! dependent ! + .......... + ...... + ..... + ........... ÷ + .... + !LINE! + .... 
÷ ................. + .................. + ! geometric data ! graphic ! +....... ÷ ......... + and 
[ lpassing!directionl engineering l l point ! cosine I data ! + ....... + ......... + .................. 
+ l x y z [ 1 m n I same as POINT ! + ....... + ......... + .................. + + ...... + !CIRCLE! 
 ÷ ..... ÷+ ...................... ÷ ........... ÷ ! geometric data ! graphic l +...... ÷ ...... + 
......... + and l !center!radius!direction!engineering! l l ! cosine ! data ! + ...... ÷ ...... + ......... 
+ ........... + l ! ! [ same as l !x y z ! r ! 1 m n ! POINT ! + ...... @ ...... + ......... + ........... 
÷ + ..... + !PLANE!  + ..... + ................. + ................. + ! geometric data ! graphic 
l + ....... + ......... + and ! !passing!direction! engineering ! ! point I cosine l data ! + ....... 
+ ......... + ................. + ! x y z ! 1 m n l same as POINT l + ....... + ......... ÷ ................. 
+ Fig. i. Attributive relations  attributes to a legion. For example, the geometric attributes of a 
circle are: center, radius and direction cosine. In addition to geometric attributes, each legion is 
supported by graphic attributes and engineering attributes. The geometric and graphic attributes are 
used by the system for data manipulation and graphic output. The last attribute category (i.e., engineering 
data) is optional and is user- generated depending on application. This capability is designed into 
the database.  2.2 LINKING RELATIONS  Topological information about geometric elements should also 
be stored in tables called "linking relations" in terms of geometric classes. There are three linking 
relations: E-VV, F-EE and F-BB relations which show edge-vertex, face-edge and + .... + !E-VV! .... 
÷ .......... + ............ ÷ .......... + ! EDGE !start VERTEX!end VERTEX! + ...... +.._+ ....... + 
.... + ...... +___+ !legionXkey] legion! key!legion!key! +...... +___+ ....... + .... + ...... +___+ 
 + .... + ZF-EE!  ÷--+-+ ........ + .......... + ....... + ........ + ! ! !forward!backward! ! FACE 
l EDGE ! EDGE ! EDGE ! + ...... +---÷ ...... +---+ ....... + ........ ÷ [legionlkeyllegionlkey] key 
! key ! ! ! I I !(F-EE) I (F-EE) 1 ÷ ...... +---÷ ...... +---+ ....... + ........ ÷ + .... + !F-BB] 
 + .... + .......... + .......... + .......... + ! FACE !front BODY! back BODY! + ...... +--.+ ...... 
+--.+ ...... +--.+ !legion!key!legion!key!legion!key! +L ..... +--.+ ...... +.-.+ ...... +---+ Fig. 
2. Linking relations  face-body links, respectively (See Fig. 2). These relations are system defined. 
 The E-VV relation shows the start and end vertexes of each edge. An edge is, thus, directed from the 
start vertex to the end vertex. This direction is used in the F-EE relation as the sign of an element 
key: positive for the direction, and negative for the opposite. The F-EE relation expresses surrounding 
edges of each face. Since the number of surrounding edges is not fixed, some difficulties arise if edges 
are stored within a single row or a tuple. For example, the relation might need a variable column tuple 
or a multiple value column or many columns which are used only for an exceptionally large number of edges. 
Therefore, a single tuple of the F-EE relation represents one of surrounding edges of a face. The whole 
information about surrounding edges is expressed by the same number of tuples as that of the edges. Edge 
order information which shows an adjacent edge in the face is also stored in the tuple. The order forms 
a round robin because the edges of a face compose a closed loop. The direction of an order distinguishes 
an inner boundary from an outer one, i.e., a clockwise direction is for an inner boundary and a counterclock- 
wise for an outer one. The third linking relation, F-BB, shows 26 front and back bodies of each face. 
As a normal vector is defined for a face, the direction is determined uniquely. The main reason why the 
relation is expressed in terms of a lower class (face) instead of a higher class (body) is that an order 
of faces which constitute a body is not so clear as that of egdes constituting a face.  2.3 GEOMETRIC 
MODEL STRUCTURES Table 1 shows a classification of geometric model structures and examples of Table 
I. Geometric model structure ÷ .............. + .......... + ...... ÷ ........ ÷ ! structure!wire frame! 
area ! volume [ !background ! ! ! ! + .............. + .......... + ...... + ........ + !2-dimensional 
[ W2 [ A2 [ --! !S-dimensional ! W5 l A5 l V5 l + .............. + .......... + ...... + ........ + ! 
Examples ! !W2: wire printing, plate or sheet shape,! l engineering drawing ! IA2: house layout, plant 
layout, building! [ floor plan, land shape (2 and half! ! dimensional) ! !WS: piping, frame structure 
(tower,[ ! building, etc.) ! !AS: hull or shell structure (vehicle! l body, etc.) l [VS: machine parts 
(solid), building room,! ! ship compartment (spatial) [ ÷ ......................................... ÷ 
 applications. A set of adequate relations to express a structure differs from one to another. In the 
wire frame structure, needed are attributive relations for vertexes and edges and the E-VV (edge-vertex) 
linking relation. In the area structure, attributive relations for faces and the F-EE (face-egde) linking 
relation are necessary in addtion to what is needed in the wire frame structure. In the volume structure, 
attributes for bodies and the F-BB are also needed. A problem to be solved can be modeled by one of these 
structures (5). 5. GRAPHICS  5.1 GRAPHIC DATA AND DRAWING ROUTINES Graphic data in attributive relations 
is used as graphic output parameters for a vertex, an edge and a face. Every geometric element has a 
color attribute plus either a line attribute or a symbol code. The line attribute means the style and 
width with which a vertex or an edge is drawn (the style is neglected in the case of a vertex). In the 
case of a face, it means crosshatching the face with lines of a specified style and width. If the symbol 
code is used, a geometric element is illustrated by the specified symbol instead of a line. This is 
especially convenient to a map application. For example, a vertex which represents the location of a 
temple is indicated by the symbol "~" and a face where rice is cultivated is filled with the symbols 
"2" (Fig. 3). These symbols are registered into the Kanji (Chinese character) font database as special 
characters. The color attribute is used to specify the color of a line or a symbol. When graphic data 
is provided in the database, the system standard drawing routines can be invoked. These routines interpret 
graphic meanings and issue drawing commands using the device independent interface. If an object to 
be considered is in a 5-D representation, viewing transformation is achievable: perspective or parallel. 
During the transformation, hidden lines are partially eliminated. That is, if a face is rotated to the 
rear of the object, the edges of that face are not drawn. In order to completely eliminate hidden lines, 
the following are required. At the first step, a 3-D object is projected as a 2-D area structure, face 
by face. Body information disappears and faces remain as faces, by projection, inheriting graphic attributes. 
Faces are merged by set operations and rearranged to express a picture with hidden lines completely removed. 
The next step is to draw the picture without any transformation. The drawing routines have a selective 
output capability with which they draw only these geometric elements that have specified values in specified 
columns. For example, elements which have "red" in the "color attribute" column can be drawn. Any column 
of an attributive relation can be used for selective output. Unconditional selection is allowed to draw 
all elements in a relation. To crosshatch a face, additional parameters are needed, i.e., distance between 
lines and line gradient. These are not stored in the database, but in a global parameter area for the 
drawing routines. As crosshatching is used for appearance rather than to portray the nature of an element, 
a line distance is specified in terms of the physical device coordinates for presentation (Fig. 4). By 
setting the value for the distance to be one, a face can be colored. 5.2 DEVICE INDEPENDENT GRAPHIC 
MANAGEMENT FACILITY The A-IDAS system includes a device independent graphic management facility (it 
is in the form of subroutines so that they may be used independently of the A-IDAS system.) It currently 
supports an interactive vector storage tube with  27  database. The end output command causes physical 
transfer of data to a device. This command may not be necessary if the device coordinates are directly 
addressable. However, this is essential for such a device as a dot printer which is only sequentially 
addressable. When the end output command is issued, the graphic management facility compiles queued data 
and rearranges it against the physical device coordinates. In our system, the end output command should 
always be issued because the output buffering technique is used for any devices to reduce data transfer 
overhead. Color attributes are values of red, green and blue components and a specification mode, i.e., 
absolute or relative. The relative mode is useful when making a shadow or a shade of an object. It is 
also applicable when making a transparent object (Fig. 5). Line attributes are style and width. Character 
attributes are size and spacing. These are common to alphanumeric and Kanji characters. Two kinds of 
optional output files are maintained by the graphic management facility. These are a projection file 
and a display file. Excepting a device selection command, all the data passed on to the graphic management 
facility are stored in the projection file before being processed. Thus, the file contains device independent 
information and makes it possible to re-display onto a different device without referring to source data 
(database) nor viewing transformation. A display file is prepared for each device. device dependent 
codes so pictures rapidly reappear. It that contains output 5.5 15~GE DATA MANIPULATION It is quite 
valuable to include image data in computer graphics. At present, we are interested in images such as 
scenery, which is used as a background for landscape evaluation, and material texture, such as a wall 
for a building design. These images are obtained by scanning and digitizing a photograph. An image file 
which contains raster data is provided for image data manipulation. The graphic management facility 
is extended to include image manipulation functions. These functions are applicable only to a color display 
device. Major functions are background processing, image deformation, domain extraction and image composition. 
 Background processing is the setting of initial values in the work area for images or the image buffer. 
Either a uniform color value or the name of an image file is specified. If a color value is specified, 
the buffer is set to the color. In the case of a file name, data for all the pixels are read from the 
file. Image deformation includes geometric transformation and image expansion (Fig. 6). Geometric transformation 
means linear transformation, affine transformation, projective transformation or more complex transformation 
such as cylinder surface-to- development plane transformation. Image expansion is to provide periodically 
a part of an image. Smoothing of a periodic boundary is also available. The result can be stored as an 
image file. Thus, image deformation is useful for deriving a new image from a small sample of standard 
 texture. Domain extraction is the selecting of an area of interest out of an image. There are two mothods 
for specifying an area or a domain. One is extraction of the domain from the image by means of the clustering 
technique. By specifying both a reference raster which represents the domain of interest and a polygonal 
zone which comprises the domain, the rasters which have color values (or texture) similar to the reference 
raster within the zone are selected, within the specified allowable variance. This information is extracted 
and stored as an image mask. This method is useful in extracting a characterized texture with vague boundaries 
(Fig. 7). The other method of extraction is to indicate the vector boundaries of the domain. This is 
done either by manual input of a polygon or by reading face boundary information from the geometric model. 
 Image composition is the superimposing of one image onto another (Fig. 8). An "active image" which is 
represented in the image buffer is modified by an operation, an "operand image" and an image mask. The 
operand image is obtained from an image file of texture or is a uniform color value. The allocation of 
a corresponding file or a color value can be specified interactively. This makes it possible to compare 
one texture image with another by trial and error. Now the active image and the operand image are operated 
raster by raster if the image mask of the raster is "on". Supported operations are unconditional substitution 
of the operand image for the active image, addition/ subtraction of the operand and/from the active images, 
selection of a larger/ smaller color value and merging both images (e.g., taking a mean value). A complementary 
image of the active one can also be created as a special case of subtraction. The results of the operation 
are stored in the image buffer again. Multi-image superimposition is supported. Multi-masks are needed 
to achieve this. Each mask has an operand image, an operation and an operation priority. The graphic 
management facility interprets and executes image composition from the lowest  29  A mechanical scanner 
is used to input image data and make an image file from a photograph. It has the capability of color 
scanning using 8 data bits per color component through an analog-digital converter. For scanning image 
data, either a transmitted beam or a reflected beam is used. Sampling pitch can be selected to 25, 50, 
i00, 200, 500 or i000 microns.  4.2 SOFTWARE The A-IDAS system is running under VM/CMS. A virtual 
machine (VM) is logged on as an A-IDAS user through a character display terminal. Two interruption driven 
service VM's are running behind, waiting for special service requests from unspecific users. One is ETOILE 
VM which manages and controls all the peripheral devices under System/7 (2). The other is Kanji VM which 
manages the Kanji database (requests from the A-IDAS system to read the stroke database). These service 
VM's are designed to share and utilize resources in a time sharing environment. The A-IDAS VM communicates 
with the service VM's through virtual channel to channel adapters. The A-IDAS system issues an ETOILE 
command and asks the ETOILE VM to execute it whenever an input/output request from/to a graphic device 
is made. A geometric model of the A-IDAS system is implemented on top of the BARTH which is a relational 
database management system and provides a tuple-wise user interface (6). The A-IDAS system currently 
supports two kinds of graphic displays, DVST and color displays. Including a character display as a VM 
terminal, three CRT's are used in the system. This enables separated output of information. The graphic 
displays are free from non-graphic information. The character display, on the other hand, is used for 
input of command, data, etc., and for output of tutorial information, database contents, various paratemters, 
etc. Suppose that a perspective picture is displayed on a graphic display and the corresponding parameters 
are on a character display. If a command is issued for changing a parameter, a picture is re-displayed 
on the graphic display while the character display remains unchanged. 5. CONCLUDING REMARKS  Although 
many CAD systems have been developed, the majority of the systems are designed to solve specific problems 
and therefore, they have no flexibility, generality or expandability. This is not only because of performance 
reasons or speciality reasons, but because of lack of guidance on how to design a "rich" system. A special 
purpose system prevents itself from growing and becoming a total engineering system. From this point 
of vlew, the A-IDAS system is a design with an engineering application system which deals with geometric 
and graphic information as well as engineering data. To establish an application system, it is necessary 
to define the problems and select a suitable model structure. Once the model structure is selected, its 
geometric classes will be automatically determined. The geometric legions to be used should, then, be 
determined according to application. Further, engineering data of each legion needs to be determined. 
Besides typical legions that are already registered in the system, new legions if necessary can be added 
together with the corresponding drawing routines. The graphic management facility, on the other hand, 
can generally be used, whatever application one may consider, because graphic data stored in the database 
is common to all applications. The A-IDAS system has been used and evaluated for topography, cartography, 
iconic landscape simulation and house building applications. ACKNOWLEDGEMENTS The authors would like 
to thank George Takama of Waseda University and Teruo Yamada of Tokyo University for their assistance 
in implementing the A-IDAS system. REFERECES i. Dungan, W. Jr. Texture tile considerations for raster 
graphics. Computer Graphics 12, 3 (August 1978), 150-154. 2. Fujisaki, T., Ohkohchi, M., Morohashi, 
 M. and Mashita, H. ETOILE: A system su2porting a shared intelligent I/O controller. Proceedings of 3rd 
USA-Japan Computer Comference (1978), 477-481. 3. Matsuka, H. and Uno, S. Canonical geometric model 
in architecture or civil engineering. Tokyo Scientific Center Report GE18-1891, IBM Japan (December 1978). 
 4. Sibuya, M. and Uno, S. Specific requirements in engineering data base. (to appear).  5. SIGGRAPH 
GSPC. General methodology and the proposed standard. Computer Graphics ii, 3 (Fall 1977).  6. Uno, S. 
Basic relational table handler. Tokyo Scientific Center Report GE18-1816, IBM Japan (July 1975).  7. 
Weller, D. and Willams, R. Graphic and relational data base support for problem solving. Computer Graphics 
i0, 2 (Summer 1976), 185-189. 32  
			