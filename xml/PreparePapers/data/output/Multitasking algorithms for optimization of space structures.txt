
 Multitasking Algorithms for Optimization of Space Structures A. Saieh and H. Adeli Department of Civil 
Engin~nng, The Ohio State University, 470 Hitchcock Hall, 2070 Neil Avenue, Columbus, Ohio 43210-1275 
 Abstract Various multitasking approaches are inveirtigatczi for optimization of large space structures. 
Judicious combination of microtczrking, macrotarking, and autotasking is explored with the goal of achieving 
a vectorized and multitaskxd algorithm for optimization of large structure with marimum speedup p~ormance. 
Speedup results are presented and compared for three space trussstructure s with 526, 1046, and 3126 
members. Introduction Optimization of large structures with a few thousands members such as space stations 
requires an inordinate amount of processing time if a sequential algorithm and code is used. Our goal 
is to develop efficient algorithms employing both vector processing and multitasking capabilities of 
multiprocessor supercomputers [1,2]. Adeli and Kamal [4,5] presented parallel algorithms for optimization 
of structures through the use of the notion of cheap concurrency and the concept of threads. Hsu and 
Adeli. [8] presented a microtasking algorithm for optimization of structures on CRAY YMP 8/864. In this 
research we explore judicious combination of various multitasking approaches, that is, microtasking, 
macrotasking, and autotasking with the goal of achieving a vectoriz.ed and multitasked algorithm for 
optirnhtion of large structures with maximum speedup performance. Computing environment The computer 
used in this work is CRAY YMP 8/864. It is a shared-memory machine with eight processors, Up to 32 Mwords 
of main memory, dual instruction mode for 32-bit addressing, multiple memory ports, and a 6-ns clock 
cycle. It supports vectorization and multitasking in FORTRAN and C computer l~g~ges, using the UNICOS 
operating system. UNICOS IS derived from the AT&#38;T UNIX System V operating system and is also based 
in part on the Fourth Berkeley Software [6]. The computer language used in this research is CRAY Standard 
C version 3.0 [6]. This is the first version of C that supports macrotasking, rnicrotasking, and autotasking. 
It allows macrotasking and microtasking to be combined. But, it does not allow wmbination of autotasking 
with either macrotasking or microtasking. Vectorizntion On CRAY YMP 81864 a single vector operation 
can produce a vtitor containing up to 64 values. Vectorization is performed on the innermost nested loops. 
The code segments may have to be rearranged in order to optimize the vcctorization performance. Some 
complications in the loop structure may prevent loop vectorizat ion. Multitasking Concurrent processing 
on Cray YMP 81864 is performed by macrotasking, rnicrotasking, and autotasking. Macrotasking Macrotasking 
is performed at function level. Normally, major tasks that can be processed concurrently are macrotasked. 
Macrotasking is implemented by function calls and is suitable for tasks requiring large processing time 
because its overhead is large mmpared with that of rnicrotasking. Macrotaskcd tasks should be identified 
when the general concurrent algorithm is developed. Microtasking Microtaskmg is parallel processing at 
the loop level. lt is implemented by inserting compiler directives. Existing serial codes can be rather 
easily microtasked without creating new concurrent algorithms. But, in most cases and for computation 
intensive jobs 1063-9535/92 $3.0001992 IEEE microtasking by itself does not yield high qwedup; it should 
be combined with macrotasking in order to achieve maximum performance. Autotasking Autotasking is the 
automatic distribution of tasks to multiple processors by compiler. It attempts to detect parallelism 
in the code automatically. Basically, it combines vectorization and microtasking automatically. Multitasking 
algorithms In the finite element structural analysis, most of the time is spent in setting up and assembling 
the element stiffness matrices into the structure stiffness matrix, the assembling of the structure load 
vector, and solving the system of linear equation for displacement degrees of freedom. Thus, we will 
concentmte on the functions assemble that assembles the structure stift%ess matrix, load_vector that 
assembles the structure load vector, and solve that solves the resulting linear equations. Parallel algorithms 
are developed and compared using autotasking, microtasking, and macrotasking with the objective of improving 
the performance of these functions. In this work, three different multitasking algorithms are presented 
and compared. The first algorithm, called algorithm A, is based on the use of autotasking only [6]. In 
the second algorithm, microtasking directives are introduced in the loop level. No load balancing is 
used in this case. Irn the third algorithm, both microtasking and macrotaskixng are used with load balancing. 
The three algorithms are outlined in Table 1. Examples We solved three space structures using the algorithms 
outlined in Table 1. These examlples model space station structures. Example 1 is a 526-member space 
truss (Figure 2). It consists of 32 equal-span panels in the longitudinal direction and one square panel 
in the transverse direction. It has two simple supports at each end and two other supporta at the middle 
of the span. Thus, it is a symmetric continuous two-span truss. The upper nodes at the middle of each 
span are loaded in the vertical y-direction by a 60-kip downward load and in x and z directions by 20-kip 
loads. The displacements of the nodes at the middle of each span in the vertical y­direction are restricted 
to 1/200the of the span. Example 2 is a 1046-member space truss. The geometry of this example is the 
same as that of example 1, but it has 64 panels ( twice as many as example 1 ) and four supports at quarter 
points. The upper nodes at the middle of each span are loaded by a 60-kip downward load in the vertical 
y-direction and by 20-kip loads in the x and z directions . The displacements of the nodes at the middle 
of each span in the vertical y­ direction are restricted to l/200the of the span. Example 3 is a 3126-member 
space trusss ( Figure 3 ). The U-shape space truss has three wings, each consisting of 64 equal-span 
panels in the longitudinal direction (similar to example 2). It has 30 simple supports as indicated in 
Figure 3. The loading and displacement constraint are similar to those of example 2. Speedup results 
We study the speedup due to vectorization and multitasking for the three examples described in the previous 
section using the algorithms A, B, and C. The theoretical speedup due to multitasking is defined as the 
ratio of the execution time spent by a task in a sequential program to that spent in a concurrent program 
[7]. Speedup results due to vectorization and various types of multitasking are presented for three main 
functions of the algorithms: assemble , load-vector , and solve . The last function is divided into two 
parts: reduction of the stiffness matrix into the product of a lower triangular and an upper triangular 
matrix, and fotward and backward substitutions considered together. At the end of the paper we present 
speedup results for complete solution of the optimization problem. Figures 3 to 5 show the spxxlup reaulta 
for setting up the load vector, setting up the structure stiffness matrix, and the forward and backward 
substitutions for computing the nodal displacement vector for example 1, respectively. Figure 3 shows 
that autotasking improves the speedup for &#38;e timction load-vector substantially because this function 
consists of only nested loops without any dependencies among matrix elements and function calls within 
loops. Microtasking does not improve the performance of this function substantially. This is due to the 
relatively large overhead needed in microtasking (compared with the amount of the work done) and poor 
load balancing which in turn deteriorates the speedup due to vectorization. In algorithm C where microtasking 
is combind with macrotasking, uniform load balancing is achieved. Thus, the effect of stripmining is 
maximized in algorithm C. Figure 4 shows that vectorization and autotasking do not improve the speedup 
in the function assemble because of the existence of function calls and the guarded regions. Microtasking 
improves the speedup in the 65 function assemble because the amount of work done in setting up the element 
stiffness matrices and assembling them into the structure stiffness matrix is relatively large compared 
with the overhead required in rnicrotasking. Algorithm C produces higher speedup than both algorithms 
A and B . Figure 5 shows the speedup for the part of the function solve that performs the forward and 
backward substitutions for computing the nodal displacement vector. Both vectorization and multitasking 
are used in this part. Algorithm C produces substantially higher speedup compared with the algorithms 
A and B. Figures 6 to 8 show the @up results for setting up the load vector, setting up the structure 
stiffness matrix, and the forward and backward substitutions for computing the nodal displacement vector 
for example 3. Comparing Figttres 6 to 8 with the corresponding Figures 3 to 5 for example 1, we observe 
that the speedups due to both vectorization and multitasking increase with the size of the structure. 
The increase due to multitasking is specially substantial. These figures also demonstrate the superiority 
of algorithm C where we employed a judicious combination of vectorization, microtasking, and macrotasking 
with load balancing. The overall speedup results from the algorithm C for the complete optimization 
of three space structure examples without and with vectorization are presented in Figures 9 and 10, respectively. 
It is seen that the speedup increases substantially with the size of the structure. Conclusions Based 
on this investigation, a number of general conclusions may be drawn: 1. Autotasking works best in programs 
where most of the code consists of nested loops . Autotasking can not be performed when loop iterations 
contain inter dependent array elements or when there is a fi.mction call. Most of the speedup due to 
autotasking is achiewxi by vectorization. Basically, it is effective only when the program has a simple 
structure. 2. Microtasking is simple to implement but does not improve the spwdup substantially in complex 
problems without combining it with macrotasking. 3. Judicious combination of vectorization, microtasking, 
and macrotasking is required in order to develop an  efficient vectorized and multitasked algorithm. 
Algorithm C presented in this paper is an example of such algorithm for optimization of large structures 
where substantial processing power is required even on high performance machines. 4. The processing time 
requirtxl for optimization of large stmctures increase exponentially with the size of the structure ( 
number of design variables ). Example of this paper has 3126 members and 2226 displacement degrees of 
freedom. Development of efficient concurrent algorithms utilizing the unique architecture and capabilities 
of high-performance computers results in substantial reduction in the overall execution time. Acknowledgement 
This research has been partially supportal by a grant from Cray Research, Inc. Computing time was provided 
by the Ohio Supercomputer center. References 1. Adeli, H. [1992a], Suoercomputing in Engineering Analysis, 
Marcel Dekker, New York. 2. Adeli, H. [1992b], Parallel Processing in Computational Mechanics, Marcel 
Dekker, New York. 3. Adeli, H. and Kamal, O. [1989], Parallel Structural  Analysis Using Threads , 
Microcomputers in Civil Engineering, Vol. 4 No. 2, pp. 133-147. 4. Adeli, H. and Kamal, O., [1992a], 
Concurrent Optimization of Large Structures. Part I. Algorithms, Journal of Aerospace Engineering, ASCE,VO1. 
5, No. 1, pp. 79-90. 5. Adeli, H. and Kamal, O. [1992b], Concurrent Optimization of Large Structures. 
Part II. Applications, Journal of Aerospace Engineering, ASCE, Vol. 5, No. 1, pp. 91-110. 6. CRAY, 
[1990], CraY Standard C Programmer s References Manual , SR-2074 3.0, Cray Research Inc., 1990. 7. CRAY, 
[1987], Crav Y-MP Multitasking Programmer s Reference Manual , SR-0222 , Cray Research Inc., 1987. 8. 
HSU, H. L. and Adeli, H., A Microtasking Algorithm for Optimization of Structures , International Journal 
of Supercomputer Applications, vol. 5, No. 2, 81-90.  PP. TABLE 1 Multitasking algorithms for opi.imization 
of space structures with multitasking and vectorization. Algorithm A: autotasking and vectorization. 
Algorithm B: microtadcing and vectorization. Algorithm c: macrotasking, rnicrotasking, and vectorization. 
 1. Set the number of processors (NP). 2. Read in the input data and the starting design variables. 
 3. Set 1 ~ = 0.1, iteration= 1 and operation= 1, where operation is a factor to indicate whether / 
this step is in the analysis stage (operation =:1) or in the redesign stage (operation =2).  4. Assemble 
the structure stiffhess matrix. Do concurrently: i -Calculate element stiffness matrices. A ( autotasking 
) B ( ~crotasking ) C ( macrotaskin~ with load balancing). ii-Assemble element stiffness matrices into 
the structure stiffness matrix . A ( autotasking ) B ( nicrotaskin~ with EI.Iarded regions ) C ( microtaskirw 
with guarded JE@Q!l&#38; 5. Assemble total load vector. Do concurrently: Assemble the nodal forces 
into the total load vector . A ( autotaskin~ and veetorizat~ ) B ( rnicrotasking and veetorization ) 
C ( microtasking with load balancing and vectorization ). 6. Apply boundary wnditions. Do concurrently: 
i -Update the structure stiffness matrix. A ( autotasking ) B ( rnicrotasking with zuarded regions) C 
( rnicrotasking with guarded retions. ii-Update total load vector. A ( autotaskirm and vectorizat~ ) 
B ( rnicrotasking and vectorization ) C ( microtaskirw with load balancing and vectorization ). 7. Solve 
the linear equations. Do concurrently: i -Reduce the stmcture stiffness matrix. A ( vectorization ) B 
( ~orization ) C ( vectorization ).  ii-Forward substitution. A ( autotaskin~ and vectorization ) B 
( rnicrotasking and vectorization ) C ( microtaskin~ with load balancing and vectorization ). iii- Backward 
substitution. A ( autotasking and vectorization ) B ( rnicrotaskin~ and vectorization ) C ( m.crotaskinp 
with load balancing and vectorization ). 8. If operation= 1, calculate the member forces and stresses. 
 A ( autotasking ) B ( nicrotaskin~ ) C ( microtasking with load balancing). If operation= 2, go to step 
15.  9. Calculate the objective function (W). A ( autotasking ) B ( microlasking) C ( microtasking with 
load balancing ).  If the difference between the new and old objective timctions is less than 0.1 %, 
stop and print the results, otherwise, go to step 10. 10. Set operation= 2. If there is no constrsimxi 
displacements, set maximum displacement ratio= 1 and go to step 11. Otherwise, calculate the maximum 
displacement ratio and go to step 11. A ( autotaskin~ and vectorization ) B ( microtaskin~ with guarded 
regions and vectorization ) 67 C ( microtaskinp with marded re~ions and vectorization ). 11. Calculate 
the maximum stress ratio (stress_.ratio). A ( autotaskhw and vectorwation ) B ( microtaskin~ with marded 
regions and vectorization ) C ( microtasking with warded regions and vectorization ). If there is no 
constrained displacement, go to step 16. Otherwise go to step 12.  12. If iteration= 1, go to step 14. 
Otherwise, if the value of the objective function (W) is less than that of the previous iteration divide 
the value of 1 by two and go to step 14. /P  13. Find the active displacements, those within 0.1 % of 
the allowable values. A ( autotasking ) B ( microtaskin~ ) C ( microtaskinz with load balancing). 14. 
Apply unit loads in the directions of the most violated degrees of freedom one at a ti-, each time go 
to Step 6. 15. Calculate the displacement gradients. Do concurrently: i -Calculate the element stiffness 
matrices. A ( autotasking ) B ( microtaskin~ ) c(~ ). ii- Calculate the displacement gradients. A ( 
autotasking ) B ( microtasking ) C ( rnicrotaskin~ with load balancing). 16. Calculate the new design 
variablea for the next iteration as follows If streas_ratio > 1, modi~ the design variables using the 
stress ratio recurrence formula , otherwise, modify the design variables using the optirnality criteria 
recurrence formula. A ( autotasking ) B ( m crotasking ) C ( rnicrotasking with load balancing).  17. 
Calculate the new objective function and set iteration= iteration+ 1. 18. Go to step 4.  0 simple 
support XA . x+ 16X 60 z - 120 +-+ 16X 60 la ,z Y H­lzty +1 Side elevation Plan hY z M­ 120W Front 
elevation Figure 1 Example 1 (526-member space truss) 69 0 simple support 16X 60­  kiil Ila 1 16X 60­ 
16X 60 IEizI I -El 16X 60- E YEiil Y z 4-124+ * 12.4+ M-In+ Plan Side Elevation Y 4 120- Yx z Front 
Elevation Figure 2 Example 3 (3126-member space truss) lh.eoretical withwl  The.xetical wilhoui veck.fizalion 
(T) WlOrimioa (-r) _ Vectoriiation only (V)  Vccloriz.aticmonly(V) Aigofilhm A  Algoriihm A -T x Algorilhm 
6 c  Algorithm B + Algoriihm C  Algorithm C / 0 1 2 # precuwls 3 I 4 Figure 4 function Speedup comparisons 
for assemble in example the 1 o Figure 3 function _ 1 2 3 # pmesaels Speedup comparisons load=wector 
in T-hmret ml without Vectotiation O@ (W 4 for the example 1 TheOre!icai Veuofizatibn Veuorizatioa Algodhmc 
Wiihoul (1) 014Y(VI / /c ./ o 1 2 # pr0ct550rs 3 v i 4 / A x x x x 4Y=YT V.B 0. 0 1 2 3 4 # procusors 
Figure 5 backward solve Speedup comparisons substitutions in in example 1 for the the function forward/ 
Figure 6 function speedup load comparisons vector in for the example 3 71 Theofettil Vdhcut TheOfetkal 
Withcwl Vedofizatbn (T) vectorization (T) T T 4 _ Vedorization only (V) . _ Vectotiation onty (V) / . 
 Algorilhm A  Algoriihm A //c _ A!goriihm B Algorilhm C Io i o1234 012 3 4 #prOc-$p!w-Figure 8 Speedup 
comparisons for the Figure 7 Speedup comparisons for the forward and backward substitutionsfunction assemble 
in example 3­in the function solve in example 3 ~~- Veuorizatii (?-) Examplel(Aigdhm C without Veciorizatii) 
(El) I Examplal(-hmc wi?hvedorization) (El) x Exa@2(NgodhmC wilhoutvectotiation) T 4 (E2) Exanple3 
(AlgofithmC Wilhwt ~i) (E3) E3 / 3 1 I o 0-i i 012 34 o 1 234 # prac­ #processom Figure 9 Overall speedups 
Figure 10 Overall speedups 
			