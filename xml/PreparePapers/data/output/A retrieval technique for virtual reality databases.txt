
 A RETREIVAL TECHNIQUE FOR VIRTUAL REALITY DATABASES Venkat N. Gudivada Computer Science Department 
University of Missouri -Rolla Rolla, MO Jay Bhuyan Computer Science Department Tuskegee University Tuskegee, 
AL Ramesh Adusumilli Computer Science Department Alabama A &#38; M University Normal, Keywords: Virtual 
Reality Databases, Spatial Sim- ilarity, Content-based hnage Retrieval. Abstract We propose a novel arid 
efficient algorithm for pro- cessing 3D spatial similarity queries. Tile algorithin is based on surface 
normal list representation of vir- tual world images. It has linear time complexity in term.s of the 
total number of domain objects in the query and database images. Tile algorithm is also robust in tile 
sense that it can recognize translation, scaling, rotation variants, and variants generated by an arbitrary 
composition of translation, scaling, and rotation transformations of an image as spa-lially similar to 
the original image. We experimen- tally demonstrate the effectiveness of the proposed algorithm. 1 BACKGROUND 
AND MOTIVATION With the advent of the World-Wide Web (WWW or simply Web), and the recent ubiquitous interest 
in multimedia systems, many information repositories are being made available on the Web for browsing. 
"'Permission to make digital or hard copies of part or all of this work for personal or classroom use 
is granted without lee provided that copies are not made or distributed lbr profit or commercial advantage 
and that copies bear this notice and the lull citation on the first page. Copyrights for components of 
this work owned by others than ACM must be honored. Abstracting with credit is permitted. Fo cop.',' 
otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission 
and/or a fee." ,g11997ACM 0-89791-850-9 97 0002 3.50 328 AL Though text is tile predominant data comprising 
Web repositories, increasingly other data types such as images, graphics, animation, audio, and video 
are becoming common. However, locating information relevant to a user often requires enormous search 
time and effort. To facilitate searching information in the Web effectively and efficiently, many search 
tools have been developed recently. The current generation search tools are limited to handling text 
docmnents only. Though they execute fact, their search effectiveness is extremely poor. Without an effective 
retrieval system, multiinedia repositories on the Wet) will remain underutilized. Though there has been 
considerable work in spa- tial similarity based retrieval in 2D image databases [4, 9, 3, 8, 6], only 
recently there has been sonic work on 3D spatial similarity problem [1, 2, 10, 7] (see section 2). In 
this paper, we focus our atten-tion on retrieval aspects in databases intended to support virtual reality 
applications. Consider tile following virtual reality applications: architectural design, interior design, 
and Real (.'state marketing. Limiting the scope to residential buildings in the ar- chitectural design, 
typically, an architect has a large repository of designs for various milts of a house (e.g., bedroom, 
kitchen). Often, the architect likes to retrieve similar designs by specifying an exam-ple design as 
a query. Such a query is specified by spatially configuring graphic icons correspond- ing to flmctional 
and flirniture objects (e.g., win-(tow, door, table) in the aD space (figure 1). We refer to this class 
of queries as 3D spatial similarity queries. The retrieval system is expected to retrieve similar designs 
from the architectural database. Retrieval requirements in the interior design and (that is, no two 
objects have the same centroid co- ordinates). Formal definitions of various transformations are not 
given due to the restriction on tile length of the paper, and tile reader is referred to [7]. Intuitively, 
translation variant of an image is produced by mov- ing all the objects of an image in unison in the 
di- rection of z-, y-, or y-coordinate axes. Scaling transformation either brings objects closer to the 
plane about which scaling occurs (if scaling factor is < 1) or makes go farther away from the plane (if 
scaling factor is > 1). Under rotation transfor- mation, the objects in an image are rotated in 3D space 
about a line. It is quite possible for an im-age to go through a series of translation, scale, and rotation, 
transformations when it is edited. An im- age obtained by an arbitrary composition of trans- lation, 
scaling, and rotation is referred to arbitrary variant. It is important that an algorithm for pro- (:essing 
3D spatial similarity queries recognize vari- ants of a query image in the database as spatially identical 
images. SURFACE NORMAL REP-RESENTATION First we introduce some notation. Let olo, desig- nate the vector 
having ol and o2 as the starting and ternlinal points and Io~1 denote the magni- tude of the vector. 
Cross product of two vectors olo; a.nd olo3, denoted olo; x OlO3, is given by o14 × olo--; = t-~ Io74211o~1 
sin0, where ~ is a unit vector (or, surface nornlal) perpendicular to the plane formed by the objects 
ol,o~, and oa as vertices, and 0 ((1 _< 0 _< rr) is the angle between olo£ and oloa . The direction of 
tile unit vector is same as the direction a right-handed screw advances when its head is rotated in tile 
direction from olo2 to olo3 by angle 0. Without loss of generality, consider any three ob- jects, say 
ol,o2, and o3, of an image shown in fig- ur(' 2 e. Arbitrarily choose two of these three objc, cts (say 
ol and 02) and refer to olo; as the reference vector. Consider the plane formed by oa with the r(~fert'ncc 
vector and let tl be tile surface normal to this plane. We ref('r to tl as tile reference normal. Now 
wc have 77 - 3 remaining objects in the im-age. Consider tile planes formed by these objects with the 
reference vector. Associated with each of 2Though not evident in the figure, all objects in the image 
are not. aligned in one plane. Reference vector ~Surface normal ~ normal to e.O;O20~ plane O,O:O, Figure 
2: Surface normals of an image these n -3 planes, we have a surface normal. Let t~,ta,... ,t~_; designate 
these surface normals. We represent the surface normal list of an image I as SNLz, is given by SNLI = 
{(tk), 1 < k < n -2}. 5 SIM'3D -THE PROPOSED ALGORITHM FOR 3D  SPATIAL SIMILARITY Tile proposed algorithm, 
referred to as SIMaD, is based on tile surface normal list representation. Formally, we define SIMaD, 
as: SIMaD : [q x [d ~ [0, 1], where [q and Id are tile logical representations of tile query and databa~se 
images. A value of 1 is ex- pected when the input images are spatially identi- cal, otherwise, SIMaD 
should return lower values in the range [0, 1). These lower values must be propor- tional to the degree 
of disagreement in the spatial relationships between the corresponding objects in the input images. Note 
that SIMaD is not symmet- ric, that is, SIMaD(Iq, Id) # SIMaD(Id, lq). The algorithnl is shown in figure 
3 and the pseudo (:ode conforms to that used in a well-known textbook on algorithms [5]. Certain statements 
of tile algorithm are numbered for referencing purpose. The follow- ing discussion is cross referenced 
with these nun> hers. Given two images [q = {(Oj,.T,j,?]j,Zj), 1 <_ j <_ .,,,} (query) and ld = {(Ok,~k,:/k,zk), 
1 < k, < ..} (datal,ase), the algorithm first generates I'q and I~ ms follows (statements numbered 1 
and 2). I; is ob- tained from Iq by retaining only those objects that are common to Iq and lu. Similarly, 
I~ is generated 330 Algorithm S[i~/I3D (Iq ..= ((oj, .T,j, ~]j, gj)~ 1 ~ j ~ by dividing si'm. by q 
-3 (the number of surface .,.), ~ = ((o~,~, w, ~k), 1 < ~, < ,~)) normals in the query image minus one). 
This helps 1 I~ +-- ((oj,~j,.vj,zj) I oj c o~ n o~,,<j = g.os.~, w = &#38;.oj.:J, zj = g.o,.z) 2 I'd 
*--((o~., ~k, :j~, ~.) I o~ ~ o~ n oi~, .~+. = &#38;.ok..z, ~.Jk = Ia.ok.y, zk = [a.ok.z) a v ~ IlOz;ll 
= tlO<11 4 q ~ tlOr, II 5 SNLr; ~-- {(%), 1 < r < 1/- 2} 6 SNLI; ~ {(d~), 1 < r < p -2}, 7 si'm, ~-- 
0 8 forr ~-- 2top-2 do 9 ~ *-- angle_between(q1, %) 10 fl~ ~- angle_between(d1, dr) 11 sire +-- sire 
+ l+c°s(ta~-f~l) 2 end for 12 sire ~ sim/q-3 return sire end SIMaD Figurc 3: SIII/I3D : An algorithm 
for 3D spatial similarity from Ia. Let p be tit(; nmnber of objects common to lq and Id (statement 3) 
and q be the number of objocts in Iq (statement 4). Next, surface nor-mal list representations are computed 
for Iq and I/~ (statements 5 and 6). Not(' that tit(.' same pair of objects is used in both [q att(t 
I~ for the rcference vector, and the order of objects considered in com- puting the surface normals is 
the same for both I; and I~. Spatial similarity is computed incrementally (statements 8 -11). The angle 
((~) between the first and second surface normals of the query image is computed (statement 9). Likewise, 
the angle (fl~) between the first and second surface normals of the database image is found (statement 
10). Contri-bution to spatial similarity from the second query and database image surface normals is 
given by l+c°~(l~-°H) If (I,~-/#l) = 0, the expression eval- 2 uates to 1. On the other hand, if (le~ 
-[4.1) = 180, tile expression evaluates to {}a. Intuitively, for spa- tially identical images, (~ = 0 
= fl~. The more tile corresponding objects in tile query and database images differ in their spatial 
orientation, tit(.' greater is tim different(' between (~', and /3,.. The same procedure is repeated 
for the remaining pairs of surface normals: first and third, first and fourth, and so on. Similarity 
value is normalized 3It can be shown that 0 _< c~r, ~fl, _< 180. Thus, we have 0 _< [c~,. - flrl _< 180. 
to account for the objects that are in the query but not in the database image. Statements numbered 1 
and 2 require time pro- portional to the total number of objects in the query and database images. Computation 
involved here is similar to that in merging two sorted lists into one sorted list. Statements 5 and 6 
take constant time and the number of times they are executed is pro- portional to the number of objects 
common to the query and database images. Therefore, SIMaD has linear time complexity in terms of the 
total number of objects in the query and database images. It can be formally shown that SIlYIao recognizes 
translation, scale, rotation, and arbitrary variants of an image as spatially identical to the image. 
6 EXPERIMENTAL EVALU- ATION OF THE ALGO- RITHM Objectives for the experimental evaluation in-(:lude 
assessing how spatial similarity computed by SIfl/Iao corresponds to intuitively expected similar- ity, 
establishing that the algorithm recognizes vari- ous transformation variants of an image as spatially 
identical to the original image, and confirming that SIMaD recognizes subimages and transformation variants 
of a subimage as spatially identical to the subimage. To meet these three objectives, we have created 
three groups of images referred to as group 1, group 2, and group 3. hnage shown in figure 4 forms the 
base intage for generating members of group 1. This image has 14 objects. Ten variants of this image 
are gener-ated by incrementally and cumulatively removing one object at a time from the base image. Thus, 
the first variant has 13 objects, tit(' second variant has 12 objects, tile third variant has 11 objects, 
arid so on. Note that the tenth variant has 4 objects. We number group 1 images 1-11, first being the 
base image and the remaining are the variants. We refer to images in the group as database images. Each 
image in group 1 is considered as a query in turn, and its similarity with every image in the group is 
computed. Tit(' results are graphically de- picted in figure 5. It consists of I1 by 11 cells and each 
cell corresponds to a (query, database) image pair. The height of the bar of a cell denotes sim- ilarity 
of the database image with the query im-age associated with the cell. Consider image 1 a.s a query and 
its similarity with group 1 images. Intu- 331    
			