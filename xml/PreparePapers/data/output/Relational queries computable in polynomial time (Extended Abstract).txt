
 Relational Queries Computable in Polynomial Time Extended Abstract Nell lmmerman Tufls University Dept. 
of Mathematics l.aboratory for Computer Science M.H'. Med'lbrd, Mass. 02155 Cambridge, Mass. 02139 Inimduclhm 
aml ~unlln:,ry Query lauguagcs [br relational databases have received cunsidcrablc atteution. In 1972 
Codd [Cod721 showed that two natural mathcm::tical langnages tbr queries () ~] e algebraic and the " 
" odacr a version ¢~f first order predicate c~dculus --had identical pm,,¢rs of cxprcsb:ibility. Query 
languages whi,:h are as expressive as Codd's Rclation,d Calcul,as are somctimes cal/cd comp]_e~. This 
lcrm is misleading, however, hccausc many interesting queries are not expressible in "completc" languages. 
In 1979, Aho and UIIman [Ahl_l179] noted that relational calculus does not suffice to express the transitive 
closure propcrty. They suggested adding a least fixpoint operator to relational calculus in order to 
crcalc a query language which can exprcss transitive closure. In 1980. Chandra and I larel [ChllaS0b 
l studied the cxprcssive power uf relational calculus with addcd primitives such as a least fixpoint 
operator. They dclincd a Fixpoint Hierarchy of query classes, the queries in each particular class being 
those expressible with a certain number of applications of the least fixpoint operator, followed by a 
certain number of alternations of ordinary quantification. In this paper we show: Thenrcm 2: The Fixpoint 
Hierarchy collapses at the first fixpoint level. That is, any query expressible with several applications 
of least fixpoint can already be exprcsscd with one. We also show: Theorem 1: Let 1. be a query language 
consisting of relational calctdus plus the least fixpoint operator. Suppose that L contains a relation 
symhol for a total ordering relation on the domain (e.g. lcxicographic ordering). Then the queries expressible 
in 1. are exactly the queries computable in polynomial time. Permission to copy without fee all or part 
of this material is granted provided that the copies are not made or distributed for direct commercial 
advantage, the ACM copyright notice and the title of the publication and its date appear, and notice 
is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, 
or to republish, requires a fee and/or specific permission. &#38;#169; 1982 ACM0-89791-067-2/82/005/0147 
$00.75 Theorem 1 was discovered independantly by M. Vardi [Var82]. It gives a simple syntactic categorization 
of those queries which can be answered in polynomial time. Of course queries requiring polynomial time 
in the size of the database are usually prohibitatively expensive. We also consider weaker languages 
for expressing less complex queries. Section I: Background and Notation This section will briefly dellne 
and give examples of the objects under considcratiun. The reader is referred to lUlls0], [l!nd72], and 
[AHU74] for excellent discussions of relational query languages, first order predicate calctth~s, .rod 
computational complexity, respectively. First, a rclatinnal database B = <D,R] ... Rk> consists of a 
finite domain I) = {e I . . . en}, and a finite set of relations on the domcim R i is an afary relation 
on D, i.e. R i (5 D ai As an example consider the database: B 0 = <D 0, Ft£MA1.E, PARENT, IIUSBAND> consisting 
of a domain of persons: D O = {Abraham, Isaac, Sarah, l.eah, Rebckah, Jacob, Rachel, Joseph, Benjamin 
. . . } B 0 has a monadic relatkm, FFMA1.E, true of the female members of the domain, i.e. FEMALE = {Sarah, 
Leah, Rebckah, Rachel .... } and two binary relations, PARENT(x,y) true when x is a parent of y, and 
HUSBANI)(x,y) tr.,e when x is the husband of y. 71ms, PARENT = {<Abraham,lsaac>,<Sarah,lsaac>,<lsaac,Jacob>, 
<R ebekah3acob>,<JacobJoseph>,<Jacob,Benjamin>, <l~,achel,Joseph>, <Rachel,Benjanfin> .... } HUSBAND 
= {<Abraham,Sarah>,<Jacob,Leah>, <Jacob,Rachel>, <Isaac,Rebekah>, ... } A relational scheme <R t . . 
. Rk> is just a finite list of relation symbols. R i is an ai-ary relation symbol. For example B 0 is 
an instance of the relational scheme FAMII.Y = (FEMALE, PARENT, HUSBANI)>, where "FEMALE" is a monadic 
relation symbol, and "PARENT" and "HUSBAND" are binary relation symbols. Generally, the difference between 
relations and relation symbols will be determined by context --to be rigorous we should give the actual 
relations in B 0 the superscript "B0". We can now define Domain Relational Calculus, a query language 
based on first order predicate calculus. If S = <R 1 . . . Rk> is any relational scheme then L(S), the 
relational calculus language of S, is built up from the following: Relation Symbols: R 1 ..... R k , 
= I.ugit:al Connectives: A , V , -1 Variables: x , y , z .... Qu.nuif~els: IVx) , (3x) Wcll formed formulas 
(WFF's) are constructed using the above symbols in tile usual way. l:or example, we can express tile 
sibling relation by tlle formula: Sib(n,v)~ 3x ._ly (xay A PARI{NT(x,u} A PARENT(x,v) A ua:v A PARI{NT(y.u) 
A PARENI(y,v) ) Sib is a WFF in I (FAMII.Y) with two frcc variahlcs, u and v. It can be thought of as 
a query to a FAMII.Y daabase B. The answer would be the set of pairs (el,e 2> from I) such that B satisfies 
Sib(et,e2). For example, Bo's resptmse would include the pair, <lienjamin,Joseph>, because B 0 satislies 
Sib(P, enjamin,Joseph) --in symbols, II 0 I=Sib(l~cnjamin,Joscph). Note that any instance B of file relational 
schcme S "understands" any tbrmula from I.(S) because B has a relation corresponding to each relation 
symbol in S. The reader should convince himself or herself that many queries can be expressed in relational 
calcuh|s. As timber examples, we write the expressions for second cousin, ~md for second cousin once 
removed (Seer): 2ndCos{u,v) ~ (3 x y 7. wJ(Sib(z,w) A PARENT(z,x) A I'A R ENT(w,y)A PA I~l~Nl'(x,u)A 
PAR ENT(y,v)) Scor(w,z) ~ (3x)([PARENT(x,w) A 2ndcos(x,b)] V [PAI~,ENT(x,z) A 2ndCos(x,w)] ) Section 
2: Adding a I.easL Fixpoint Operator Relational Calcuhls corresponds exactly to the familiar notion 
of first order predicate logic. This language fomls a rich class of queries. Of course not all properties 
one might want to ask a database about are first order expressible. In the Relational Calculus for our 
FAMILY schcme it is impossible to express tile relation Ancestor(x,y). In [AhU179] Aho and Ulhnan suggest 
adding a least fixpoint operator to relational calculus so that transitive closures such as Ancestor(x#) 
may be expressed. For example, consider the following first order expression: %gR)[x,y] ~ (x:y V 341'ARF.NT(x,z) 
A !~,(z,yll) For any FAMII,Y database, B, q~A maps each binary relation, Ri, on tile domain of I/ to 
the binary relation: ¢#A(Ri) ~ { <x,y> I II ~ ~A(Rl)[x,y] } ¢PA is monotone, i.e, RiCR 2 implies q~a(l~l)~q~A(l~). 
Thus for any da~lbase II, CpA has a least fixpoint, i.e. a relation R 0 such that ¢PA(R0)=R0 and R 0 
is minimal with this property. It is well known that an expression, ~(R), is monotone iff it is equivalent 
to an expression cp'(R) in which R occurs only positively. Following [AhUI791 we will use a least fixpoint 
operator, IJ:P, on monotone expressions such as g'a" It is easy to see, for example, that Anecstor = 
LFP(tpA ) It is interesting to consider the computational complexity of evaluating queries that use this 
least fixpoint operator. The fi)llowing proposition is due to Chandra and l larel, [Chlla80a]. Proposition 
l: Given a database, B=<D R 1 . . . Rk) , and a monotone operator ~ in tile language of B, l.FP(~) exists 
and is computable in time p([DI) for some polynomial p. proof~ Let n=ll)[, the size of the domain, and 
let a be the arity of ¢p. Define R 0 = ¢p[na](~), i.e. R 0 is the relation resulting from composing ¢p 
with itself n a times and applying it to the empty set. Obviously Ro=LFP(cp) because each application 
of ¢p adds some tuples to the at most n a tuples in the relation. No additional tuples can be added after 
n a steps. Let ~(R)[Xl..,Xa] --_ (QlZl . , . Qkzk) M(xl...Xa,Zl...zk,R) where M is quantifier free. Given 
R as a list of tuples we can compute ep(R) in time na+klog(n) by cycling through all possible values 
of z 1 ... zk for each possible value of x. Iterating ~ n a times, we can compute l.Fl'(cp) in time n 
2a+k+l = p(n). I Chandra and Hard have considered a Fixpoint Hierarchy, Ik~, which consists of alternating 
applications of quantification and 1J-'~. Inductively: Z 0 = 17 0 = { M [ M is a quantifier free query. 
} Za+ 1 = {(3x)q/(x) I ~ e II a } nla = { ~ 1 ~o e 2 a } For ,8 a lintit ordinal, Eft = { 4'(v) [ ~ =l.FP(,p),cp 
monotone, rp e ~a, a<,8} Thuh Z n is die :,el of qumie~ c>Mressible with n alterm~tions of quailtifkalion 
beginning wid~ existential. Ewn is the set of queries expressible using n applicati~ms of I.FP with huermediate 
applications of quantification and negmion. The last line defines Zfl for ,8 a limil ordinal, as a substitutitm 
of variables, < into the l~zast fixpoint of a fiwmula q~ which is lu\xcr down in the hierarchy. N.B. 
we have slightly modilied the definition in [ChllaBtl] which did not allow such substitutions. It is 
known that additional alternations of first order quantification give increased cxpressibility and that 
transitive closure is not lirst order expressible. See [ChllaS0] and [AhU179], Tbus: 148 Fac__.~: The 
Fixpoint llierarchy is strict up to Xaa' that is, the following containments are all strict: E0C Z1C 
Z2C ,.. C Eta Chandra and Harel ask whcthcr the hierarchy continues past Eta and we will show in 'Fheorcm 
2 that it does not 'lhcy also considered the computational complexity of answering queries. Let QPTIME 
be the set of queries computable in polymnnial time in the size of the database: QFFIME ~ { ~ I Graph(rp) 
C P } where Graph(cp) = {<Ikc> ] B I== ~(c) }. We have already seen in Proposition 1 that Eoa is containcd 
in QPTIME. It follows that FP C_ QI'TIME. Chandra and Harcl show that equality does not hold. Theorcm[ChHaS0b]: 
FP ~ QFq'IME q he proof bas to do with the fact that queries in FP don't necessarily have the ability 
to count. Thus for example the query concerning family databases, "Is there an even number of females?", 
is not cxpi'cssible in the Fixpoint lticrarchy. The inability of our queries to count can be eliminated 
by adding to the language an ordering of the domain. Such an ordering, e.g. by bit representation, is 
always available in real databases. Let Q(<_)PTIIVlE be the set of queries computable in polynomial time 
on ordered databases. Tlmt is we only consider databases which have a total order, <, on the domain, 
l.ct FP(<) be the queries in FP, where _< must be interpretated as a total ordering of the domain. We 
shov,' in the next section that Q(<)PT1ME = FP(<), and in fact only one application of LFP is needed. 
Sectien 3: Mai, Results Theorem 1: Q(.<)PTIM E : Ere(<) proof skelci3: Tlmt Q(<)IrI'IMI?. contains 200(_< 
) is clear. We must shmv the converse. 1.et S = {<B/,cl> . . . } be a set or pairs of ordered databases 
B belonging to a certain relational scheme and r-tuplcs, c, from B, l.et M be a Tming machine that accepts 
S in time n k. We must sllow that there is a query a(xp..xr) E Eaa which expresses S," i.e. S = { <B,c> 
] BI== a(e) } . l:2Jch candidate for S is a pair, <Ill,c>, where B has an n element domain, 1), with 
a total ordering, <, on its elements. 'l13us we can fllink of I) as the set of integers fiom 0 to n-1. 
We can use k-tuplcs of variables to denote numbers between 0 and ok-1. We will use one application of 
LFP to write the query Cell(Xl...XrPr..Pk,tl...tk,a ) to express the statement that in M's computation 
the contents of cell number pl...pk at time tl...t t is a. More precisely, we will show that there is 
a first order sentence ~b(S)[xl...Xr,Pl...Pk,tl...tk,a ] such that Cell = LFP(4,), and that B satisties 
Cell(e,p,t,a) if and only if the instantaneous description of M*s computation on input <B,c> contains 
symbol a in cell p at time t. Once we have Cell we can let a(x) ~ Cell(x,C,nk-l,qr). Here a says that 
M is in its accept state, q~ after nLl steps. Thus, as desired,  B I= a(c) ~-~ <B,e> £ S . There are 
two steps to writing q, whose least fixpoint is Cell. First we must write the sentence M0(c,p,a) meaning 
that at time 0, cell p is a, i.e. that the initial input tape contains <B,c>. Suppose that B : <{0...n-1},R1...Rs>. 
Then the input will consist of an nal bit table for R> followed by an n a2 bit table for R 2, and so 
on, followed by some binary representation for c 1 ...c r It is easy to see that using < and relation 
symbols R! ... R k we can write the first order sentence M 0 saying that the input is correct. Consider 
the following monotone first order expression %:  +(S)[x,p,t,al ~ (t = 0 A M0(x,p,a ) ) V 3a.laoal(<a.laOal>-,a 
A S(x,p-l,t-i,a.l) A S(x,p.t-l,ao) A S(x.p+ 1,t-l,al) ) Here "<a_la0al>-+a" means that the triple <a 
la0al> leads to tile symbol a in one move of M. Thus each application of ~ gives us one more row of M's 
computation, so l_FP(q0 = Cell. 'Fo write a(x) = Ccll(x,0,nLl+qr ) would seem to require some quantification 
after the least fixpoint operator is used. In fact we can add an extra variable, z, to q, so that it 
does two things: case 1 (z;exl): compate Cell: case 2 (Z=Xl): check if Ccll(x,0,nk-l,qf) bolds. "lqms: 
A (3z' uva')[z'~xtAu =OA v=n-1 A a': qf A S(z',x,u...u,v...v,a')]) l.et S O = I.FP(q,), and let a(xl...Xr) 
= So(xl,xl...xr,xr..Xl). Then a is equivalent to Cell(xl...Xr0,nk-l,qf) as desired, I If we do not have 
an ordering then it is not possible in general to simulate a computation. However we can show that tile 
hierarchy still collapses at the first fixpoint level: Theorem 2: FP = ~to We first give the proof for 
an example: Claim: ~Ancestor E Z~o " proof: Recall the formula ~A such that 1.FP(~A) = Ancestor: ~pa(R)[x,y] 
--: (x:y) V 3z(Par(x,z) A R(z,y)) Our problem is to monotonically add infimnation about ancestors to 
some larger relation S so that after finitely many steps we will be able to tell that we are done, and 
for which values Ancestor(x,y) does not hold. Define rank(x,y) : rain k : ~A(k~(~)[x.y]. That is, rank(x,y) 
is the minimum number of applications of CpA needed to discover that Aneestor(x,y) holds. Clearly rank(x,y) 
= distance(x,y)+l. Even though our language do,bs not have access to numbers we can use LFP to make statements 
about ranL We will write first ordcr expressions ~1' ~2, q)3, with least fixpoints GE, GT, GS, respectively, 
meaning the following: GE(x,y,u,v) = ( rank(u,v)< oo A rank(x,y) >_ rank(u,v)) OT(x,y,u,v) ~ (rank(u,v) 
< oo A rank(x,y)> rank(u,v) ) GS(x,y,tD) ~ (rank(u,v) < O0 A rank(x,y) > ranl.{u,v)-:-l) Once we have 
these three predicates we can express -~,\nccstor withuut using negation, l:irst we can write l)iam(a,h) 
expressing tile propcrty that distance(a.b) is the maximum possible. r I)iam{a,b) =_ GE(a,b,a,b) A ~Vuv)l_Gl!(a,b,u,v) 
V (GT(u,v,a,b) A GS(u.v,a.h) )] Diam(a,b) says that rank(a,b) is finite and that no pair u,v satis,qes 
rank(u,v)=rank(a,b)+l. Now tile pairs of infinite rank are just those pairs with rank strictly greater 
than that of a diameter: ~Anccstor(x,y) =--3ab(Diam(a,b) AGT(x,y,a,b)) Ilere are the fonnulas, tpl. 
~2, and ~3' used to define GE, GT, and GS: ~l(Rl)[x,y,u,vl =_ (u=v) V [~(x = y) A (3u' Vx')((Par(u,u') 
A I~{x=x' V Par{x.x'))VRj(x',y,u',v)]}] eP2(R2)[x,y,u,v ] -= (u=v A x~y) V JR(x= yVPar(x,y))A (3u' Vx')((Par(u,u') 
A [~{x: x' V Par(x,x') V R2(x',y,u',v)1)] ~3(R3)[x,y,u,v] --= (u=v A xeyA-",Par(x,y))V [~(x=yVPar{x,y)V 
3z(Par(x,z)APar(z,y)) A (3u'x')((Par(u,u') A [~(x=x'VPar(x,x')VR3(x',y,u',v)] } ] It is easy to verify 
that GE=LFP(tct), GT=LFP(qo2), and GS=LFP(~3). We will be done once we show how to combine tpl, ~P2, 
tP3 into one simultaneous LFP: O(S)[zpzz, zyu,v,x,y] _= ((zl~z 2 A z2~z s) A w](S)[u,v,x,y]) V A A V 
((Zl=Z 2 A z2~z 3) A qo3(S)iu,v,x,y]) V ((zl=z 2 A z2=z 3) A (3a b)[Diam'(a,b) A S(a,b,b,x,y,a,b)]) 
uses the three variables, Zl,Z2,Z 3, to break the definition into four cases. We are assuming that the 
domain is of size at least two and that tile diameter is nonzero. I~et l)iam'{a,b) be l)iam(a3}) ~ith 
S(a,b,a,u,v,s,y), S(a,b,b,u,v,x,y), S(a,a,bm,v,x,y) substituted for {}E, Gq', and GS, respectively. Thus 
Diam'(a,b) will hold only when the fixpoint has been reached and a and b are of maximal distance. In 
this case S(a,b,b,x,y,a,b) is equivalent to GT{x,y,a,b).. Thus letting S{}::IJ:I}(,I~), we have ~A nccst{}r{x,y) 
~ S0(x,x,x,x,x,x,y ) . This proves the claim. Wc now sketch the general proof of Theorem 2. l.et R 0 
= Ll:P{q~) be an arbitrary least fiXl)oint of arity r. As above we defnc the £~3//~6~.~) to he the minimum 
k such that 9}(k}(.~)lx] holds. "l]ten as in thc above cxamnplc we can define the relations, GE, GT, 
and GS, as simuhancous fixpoints where GF~x,n) ~ (rank(u) < oo A rank(x) > rank(u)) GT(x,u) _= (rank(u) 
< ~ A rank(x) > rank(u)) GS(x,u) _= (rank(u) < oo A rank(x) > rank(u)+ 1) We can compute R 0 ahmg with 
its negation in a single fixpoint expression of arity 2r +3. Further steps of quantification and even 
other fixpoints can then be embedded in the last case of the definition of ~, as above. Using the next 
two lemmas we sketch the construction of q'l, eP2' and ~pj whose least fixpoints are GE, GT, and GS. 
respectively. 1.emma 2.1 : Suppose that R is an r-ary relation symbul and that tp(R)[xl...Xr] is monotonic 
iu R. Then cp may be expressed in an equivalent fonn: rp(R)[Xl...Xr] ~ (Qizi. Mi)...(Q t z t . Mi)(ax1...x 
r . Mr+ 1)R(Xl.-.Xr ) where M1...Mt+ 1 are quantifier free and contain no occurrences of R. Here, {Vz. 
M)P means (Vz)(M~P), and (3z . M)P means (3z)(MAP). example: Let tPB(R)[xvx21 m (Xl=X 2 V Par(xt,x2)) 
V 3zlR(xpz) AR(z,x2) ] We can express ~B in the above fonn as ~B(R)[xl,x2] m (Vz . M1)(3z)(Vu v . M2)(3xlx 
2 . M3)R(xpx2) where M 1 ~_ ~[xt=x2V Par(xpx2)] ,'l 2 --_-~ [(u-:x: A ~=z) Vfu-:zA v=:x2)] M, ~:. [=l:=u 
A x2=v] 1 hope th;lt the ~cadcr will convince herself {}r Ifimsclf that wc have indeed expresq,:d ~PB 
ill the corleCt filtH1. 'l'he proof of [.olrllD.fl 2.1 would hc I)5 induction on tilt" complexity of 
% Note our use ,}f an abbreviation trick --tile universal qll~/l'ltil]c:dion uf IJ and v, above, reduced 
the number of (~ccurrences of R. Sc¢ I.emma A.3 in [hnm82] for a similar result proved in some detail. 
I.emma 2.1 shows how to write any monotonic expresskm, tp(R). in a very simple form. For any such % tile 
folhB~ing ]emma shows how to write ~1, 'P2, ~3 whose fixpoims are GF, GS, and GT. respectively. The proof 
of Theorem 2 then follo',~s exactly as in the above example for ~Ancester. l.emma 2.7: Supose 7,(R)[x] 
~ QB(x)[R(x)] is in the form of I.emma 2.1, where QB(x) ~ (QtZl . Mi)... (Qtzt . Mi)(3x. Mr+l) 1.et QB(u) 
_= QB(n,z'/x,z) i.e. QB(x) with u i substituted fi)r x i, i= 1...r. and z/ substituted fi)r zj. j = 1...t. 
Let QI"""~ be QB with all V's rcplaee by 3's and vice versa. Put qol(Rl)[X,U ] ~ ~(O)[u] V Rl[X,u]V 
rP2(Rz)[X,U ] ~-(~(Z)[u] A ~(~)Ixl) V 1~2Ix,u] V (2) qo3(R3)[x,u] -~ (qo(~)lul-',~(~)[x]A~rp (~)[x]) 
V R2[x,u ] V [QI3(u)QI~x)](R3[x,u]) then: (a): l.FP(cpl) = GE (b): I.FP(~2) = GT (c): I.FP(~3) = GS 
proof of a: By induction on k we show fllat Cpl(k)(~)[X,U ] ~ ( rank(u)_<k A rank(x)>rank(u) ) (*) This 
is clear if k=l. Assume that (*) holds for k and consider the following assertion: ( rank(u 0) < k+ 1 
A rank(x0)>rank(u 0) ) (t) This holds iff either of the following conditions is tnle: ( rank(tl O) ~ 
k A rank(x°)_>rank(u O) ) (2) ( rank(u 0) ~ k-F] A rank(x 0) > k ) (3) By induclion equation (2) is 
eqnivaleut to cptfk)(~)ix0,u0 ]. F.quation (3) is cquivalcnt to: Ck+ ~l(~)[uO l A ~,/k~(~)lx°l Which 
in turn is equiwilent to: [QB(u0)]lk+I) (false) A [QB~x°)] (k) (true) (4) Now, since the variables in 
QB(u 9) and QB(x 0) do not intersect, we may transform equation (4) to: [Q.(,@ (ra,se) ^ ) Or, in other 
symbols: QB(u°)QB(x°)( rank(u).<k A rank(x)> k-1 ) (5) We have shown that equations (3) and (5) are 
equivalent. A consequence of (5) is: QB(u°)@l(x°)( rank(n)<k A rank(x)>rank(u)) (6) Which, by the inductive 
assumption, is equivalent to: QB(u°)QB(x°)(¢pltlO(IZl)[x,u]) Thus, the disjunction of (2) and (3) implies: 
~l(k)(JZi)[xO, n 0] V QB(u°)QB(x0)(Cpl(k)(O)[x,u]) (7) and so ~oltk+])(~I)[X0,U 0] holds. In a like 
fashion we can reverse the steps from (7) to (1), thus proving our claim, (*). It follows that l.FP(qol)_= 
GE. The prooZs of (b) and (c) are similar. This completes the proof of lemma 2.2 and of the proof sketch 
of Theorem 2. Section 4: Conclusions and Directions for Future Work. Another view of least fixpoint 
is as an iteration operator. For o/(R)[Xl...xk] monotone, the least fixpoint of qo is just q0 iterated 
n k times, i.e. LFP((p) ~ qo(nk). We propose a new query hierarchy which limits this iteration. Define 
lQ[f(n)] to be the set of queries expressible by iterating a first order query f(n) times to obtain a 
fixpoint, i.e. IQ[f(n)] ~ { R0(v) I R 0 ='P(ffn))(O) :: ~(ffn)+ I)(~) } This definition makes sense 
for non-monotone q0 in which ease tile iteration could proceed for more than n k steps and the fixpoi~lt 
computed need not be the minimal one. As an example, let qol(R#[x,y ] _= (x = y V Par(x,y) V (3z)[R(x,z) 
A R(z y)] ) It is easy to see that Anccstor = IJ:P(qO.r) = q0 (l°g n)(~). Thus Ancestor is in IQ[log 
n]. "llle following theorem states some results about IQ aud IQ(<). but many questions, such as, "Is 
there a strict hierarchy for IQ(<)?" remain unknown. Theorem 3: (a): IQ[1] = First Order Queries C_ QSPACE[log 
n] (b): IQ[Iog n] D Transitive Closures (c): IQ(<)[n k] = FP = QFFIME (d): IQ(<) = PSPACE Anothcr issue 
raised by Chhndra and Harel, among others, is that languages with an ordering such as FP(<) treat differently 
numbered isomorphic databases differently. That is, the answer to some queries will depend on the ordering: 
It would be nice to have a language rich enough to simulate Turing machines and yet without this difficulty. 
One suggestion is to add variables, i j .... whose range for a database of size n will be the integers 
1 . .. n. We would also add the natural ordering, <_, on these number variables plus "counting quantifiers": 
(3 i x's)P(x), meaning, "There exist i distinct x's such that P(x)." These counting quantifiers would 
remove the Acknowledgments most obvious counterexamples to the cquality of IQ(n 'K) and I would like 
to thank David Harcl, John Mitchel, Adi Shamir, and QPT1ME. They are also no stronger than adding <. 
More Venkataraman for their helpful ideas concerning this paper. This precisely: work was parially supported 
by NSF grant number MCS 8105754. Propositio!~: For ffn)>log(n), IO(count)[f(n)] C tQ(<)[f(n)] . We have 
sho:~n tha;. all quelic~ using first order quantification and a least fixpoint operator may bc expres.~sed 
with a siu,~le occurrence of least fixpoint applied to a first order cxpressi,m. }:urthermorc. in the 
presence of a total ordering, <, the queries so expressible are exactly the P'I'IMI~ computable queries. 
Finally, a further study of the number of iterations needed to compute fixpuints is desirable. The following 
open problems merit investigation: I:ind classes of query languages wlaose cnmplcxity is clear from 
the syntax, as FP(<)=PTIME, but for feasible complexity classes from the database point of view, e.g. 
TIME[n] and SPACE[logk(n)l . 2. Design Query languages using iterated queries. Study expressibility, 
complexity and optimization. 3. Prove Hierarchy theorems for: (a) 1Q[tf(n)] (b) 1Q(count)[ffn)] (c) 
IQ(<_)[ffn)]  4. Prove or disprove:  IQ(count)[nkl = IQ(<_)Inkl 5. David Hard and Haim Gaiffinan 
have both obtained some results concerning fixpoint hierarchies when the arity of the fixpoints are bounded, 
[HarS1]. Studying the arity of fixpoints is also related to measuring the number of distinct variables 
used in frst order expressions, a problem considered in [Imm82]. It would be interesting and fruitful 
to study the "exprcssibility resource" arity of fixpoints in conjunction with others resources such as 
number of fixpoints or number of iterations. [AIIU74] : [AhUI79] : [ChaSl] : [ChHa80a]: [Chlla80b] : 
[ChHa82]: [Cod72] : rEnd72]: [Har81]: [ImmS0]: [lmm81] : [lmm82] : lullS01 : [Var82]: Bibliography Aho,A., 
Hopcrofi,J., Ulhnan,J., il'he 13e+:~}~n. _a_[~d Analvsis~ of Ct!naputer All ,ori___fln/l___s, Addison-Wesley, 
1974. Aho,A., Ullman,J.D., "Universality ofl)ata Retrieval l.anguagcs," 6 th Syrup. on Principles of 
Programming I.anguagcs, 1979, pp. 110-117. Chandra,A., "Programming Prinaitives for 1)atabase l.anguagcs," 
8 th Syrup. on Principles of Programming l.anguagcs, 1981, pp. 50-62. Chandra,A., Harcl,I).,"Computable 
Queries for Relational l)atabases," .ICSS, Vul. 21, No. 2, October, 1980, 156-178. Chandra,A., HarelJ)., 
"Structure and Complexity of Relational Queric%" 21 s~ Syrup. on Foundations of Computer Science, 1980, 
pp: 337-347. Chandra,A..HarclJ).,"llorn Clause and the l:ixpoint Query Hierarchy," to appear. Codd.E.F., 
"Rclatkmal Completeness of l)atabase Subhmguages," in l)atabase System§, R.Rustin, ed., Prentice-Hall, 
1972, pp. 65-98. Endcrton,H., A Mathematical Introduction to Logic, Academic Press, 1972. Hard, David, 
personal communication. Immerman,N., "Upper and Lower Bounds for First Order Exprcssibility," 21 st Syrup. 
on Foundations of Computer Science, 1980, pp. 74-82. hnmerrnan,N., "Number of Quantifiers is Better than 
Number of Tape Cells," JCSS, Vo]. 22, No. 3, June, 1981, pp. 384-406. Immerrnan,N., "Upper and Lower 
Bounds for First Order Expressibility," to appear in JCSS, 1982. Ullman,J.D., Introduction to Database 
Systems, Computer Science Press, 1980. Vardi,M .,"Complexity of Relational Query I.anguages," this volume. 
152   
			