
 INTEGRATING LOGIC PROGRAMMING INTO A DATA BASE COURSE: VIEWS AS RULES IN DEDUCTIVE RELATIONAL DATA BASES 
Dr. Yuksel UCKAN Department of Systems Analysis Miami University Oxford, OH 45056 ABSTRACT This paper 
describes an approach adopt­ ed in introducing logic-based data base management and deductive data base 
systems into an undergraduate data base course, The fundamental concepts and terminology for deductive 
data base systems are briefly discussed. A con­ ventional relational data base manage ­ment system (DBMS) 
has some intrinsic deductive capabilities. These capabil­ities can be exploited effectively by defining 
and implementing deductive axioms as views, A variety of deduc­tive axioms including those with negat­ed 
formulas and those corresponding to integrity constraints are implemented as SQL views. This approach 
provides students with an instructional tool based, on a conventional DBMS, and en­ables them to appreciate 
various as ­pects of deductive data base systems, as well as pros and cons of using a conventional DBMS 
as a deductive DBMS. INTRODUCTION One of the emerging areas in data base management is logic-based data 
base systems. A logic-based data base Sys ­tern exhibits some form of intelligence and, through reasoning, 
can generate knowledge not explicitly stored in the data base. A traditional relational Permission to 
copy without fee all or part of this material is granted provided that the copies are not made or distributed 
for direct commercial advantage, the ACM copyright notice and the title of the publication and its date 
appear, and notice is given that copying is by permission of the Association for Computing Machinery. 
To copy otherwise, or to republish, requires a fee and/or specific permission. 01991 ACMO.89791.377-9/91/0002-0184...$l 
.SO DBMS provides efficient data manipula­tion capabilities for large volumes of data. On the other hand, 
a logic Sys ­tern can be used to process deductive axioms to generate knowledge from facts stored in 
a data base. A logic-based DBMS combines the data manipulation capabilities of conventional DBMSS and 
the inferential capabilities of logic systems into a single system. In a logic-based data base system, 
a data base is seen as a set of facts corresponding to tuples in relations, and a set of deductive axioms 
that can be used in deriving additional facts. In such a system, processing a query is equivalent to 
proving a theorem, i.e. , that some specified formula is the logical consequence of the axioms stor­ed 
in the data base. A logic-based system should exhibit at least the efficiency of the present-day relation­al 
DBMSS (e.g., SQL) , and the theo ­rem-proving capabilities of the artifi­cial intelligence tools (e.g. 
, Prolog). Currently, there is no commercial­ly available logic-based system for data bases. However, 
there are some experimental systems that may evolve into commercial products. For design and implementation 
of logic-based Sys ­terns, there are two basic approaches: heterogeneous and homogeneous. In the heterogeneous 
approach, two distinct systems, one for data base management in the conventional sense, and the other 
a theorem-proving system, are coupled through an interface. The ho­mogeneous approach integrates data 
manipulation and theorem-proving func ­ tions into a single system, and uses only one programming system 
for both functions. Homogeneous logic-based sys terns are also known as deductive data base systems. 
There have been some studies aiming to use Prolog as a deductive data base language [1]. Prolog is suitable 
for representing data base facts and deductive rules, and is capa­ble of deductive reasoning. However, 
it requires facts and rules to reside within the virtual memory. For large data bases, duplicating facts 
in Prolog notation in the virtual memory is, if not impossible, at least impractical, Also , unlike a 
DBMS, Prolog has no ability to optimize queries, does not permit concurrent access to facts, and does 
not provide security and recovery. To alleviate these shortcomings, exten­sions of Prolog to render it 
more effi­cient for data base processing have been proposed [2]. Also, new logic languages suitable for 
relational data bases are being studied. Among them is Datalog [3, 4], a version of Prolog with some 
differences. The major prob­lem with such extensions is that they all entail development of new DBMSS. 
A homogeneous logic-based system can also be developed by extending the capabilities of a conventional 
DBMS to handle deductive axioms. There is some ongoing research in this direction for the INGRES DBMS 
[5]. Clearly, a rela­tional DBMS has some deductive capabil­ities that can be exploited using views for 
formulating deductive axioms [6]. By focusing on the deductive capabilit­ies of relational DBMSS, it 
is possible to incorporate logic-based data base systems into a data base course . In this paper, we 
describe this approach. THE DATA BASE COURSES AT MIAMI UNIVER- SITY The subject of data base systems 
is taught in a sequence of two courses at the Department of Systems Analysis, Miami University, Oxford, 
Ohio. The first course covers fundamental data base concepts, architecture of DBMSS, semantic data base 
modeling, the rela­tional model, relational algebra, data structures for data base systems, set­oriented 
approaches and SQL, data base design and theory of normalization, and hierarchical and network data base 
modeling. The second course focuses on more advanced topics, including tup le calculus and INGRES/QUEL, 
domain calcu­lus and Query-by-Example, data base integrity, security, concurrency, and distributed data 
base systems. Through assignments , the students gain exposure to and experience in two actual DBMSS 
, SQL and INGRES, and the Query-by-Exam­ple language as part of the IBM s QMF interface. SQL is available 
on a main­frame running under CMS, and INGRES runs under Unix on a minicomputer. In the second course, 
we also introduce new and emerging technolo­gies, This year, we wanted to incorpo­rate logic-based systems 
into this course. Some of the recent data base textbooks have short chapters on logic­based systems [7, 
8, 9]. However, we noted two difficulties from an instruc­tional standpoint. First, because the subj 
ect of logic-based data base Sys ­terns is quite recent, there is a sub ­stantial amount of confusion 
in the . literature as to the concepts and ter­minology [7]. Second, there is no actual logic-based DBMS 
in existence that can be used as an instructional tool . To get around these difficul­ties , we presented 
the terminology and the fundamental concepts as given in the next section of the paper. Then, we emphasized 
the use of SQL views for implementing deductive axioms, thus rendering a data base deductive to some 
extent, and providing the students with an instructional tool. This approach is described in detail in 
this paper. FUNDAMENTAL CONCEPTS AND TERMINOLOGY OF DEDUCTIVE DATA BASE MANAGEMENT A relational data 
base consists of relations . Each relation contains tuples that represent data or relation­ships among 
data. Generally, relations are stored as files in the physical data base. Such relations are called base 
relations. All base relations in a relational data base constitute the extensional data base (EDB). Knowledge 
is information that can be derived from data. Using formal logic, it may be possible to derive knowledge 
from base relations in a data base . The most commonly used form of reasoning for knowledge derivation 
is deductive reasoning. In deductive reasoning, new facts are inferred from a given set of facts using 
the rules of inference. Instead of physically re­cording the derivable facts in a data base, it is preferable 
to represent them in an implicit fashion, and gener­ate them when needed. For this, an appropriate knowledge 
representation scheme is required. There is a variety of knowledge representation schemes such as predicate 
logic, semantic net­works, frames, and production rules. A production rule for deduction has the form 
IF PTHEN Q where P and Q are formulas of the prop­ositional logic (also called axioms). Using the Prolog 
(or Datalog) notation, a rule can be written as Q :-P. In a production rule, if P and Q involve variables, 
they are called non-ground formulas. For example, in parent(x, y) :-father(x, y). parent(x, y) and father(x, 
y) are non­ground formulas. If, on the other hand, variables in formulas are replaced by constants, the 
resulting formulas are called ground formulas. For example, the formulas parent(Paul, Mary) and father(Paul, 
Mary) in parent(Paul, Mary) :­father(Paul, Mary). are ground formulas. In a production rule, Q :-P, P 
is also referred to as the antecedent, and Q is called the consequent. Anteced­ents can be facts represented 
in an EDB . Deduced consequent become part of virtual relations. Virtual rela­tions that can be derived 
from an EDB using production rules form the inten­tional data base (IDB). Another term for IDB is knowledge 
base. Now, we are ready to define a deductive data base. A deductive data base is composed of an extensional 
data base and an intensional data base that can be derived from the EDB using a set of logical rules. 
 A rule can be generalized to the following form: QlVQ2V... VQn:-Pl&#38;P2&#38;. ..&#38;Pm. where V denotes 
disjunction, &#38; denotes conjunction, and P s and Q s are atomic nonground formulas. An antecedent 
in this form is said to be in conjunctive normal form. If there is at most one atomic formula in the 
consequent, the rule is referred to as a Horn clause. The following are Horn clauses: Pl&#38;P2&#38;... 
&#38;Pm. Q:-Pl&#38;P2&#38;... &#38;Pm. A collection of Horn clauses is called a logic program. In a deductive 
data base, the IDB can be defined using a logic program that is expressed in some logic language. A deductive 
data base management system (also called an expert DBMS,) is one that can deduce IDB facts from an EDB 
by applying deductive rules in a logic program. A CLASSROOM EXAMPLE FOR A DEDUCTIVE DATA BASE We consider 
a relational EDB of a sin­gle relation called people . Figure la shows an instance of people . Here, 
- represents a null value. The people: name father mother sex Alice - - F Bill lkm Ellen M Brian Bill 
Jeanne M Ellen - F Ira Bill Jeanne M Jason John Joanne M Jeanne - F Jim - M Joanne Jim Alice F John 
- M Kathy Jim Alice F Brian Kathy F sally Brian Kathy F Itm - M (a) An Instanceof people (b) Pedigree 
Genealogical ~ for people Figure 1. An Extensional Data Base Relation Lelation people corresponds to 
a pedigree genealogical chart as shown in Figure lb. In this chart, the repre­sented relationship is 
is-parent-of , as in Brian is a parent of Linda . Expressing Deductive Rules in Datalog We can view the 
relation people as being composed of a set of ground axi­ oms based on the domains father, moth ­er, 
and sex. Some of the ground axioms are listed in Figure 2. These ground axioms constitute an EDB represented 
in Datalog. They can be used in answering queries such as ? father(Bill, x). name(Alice). father(Bill, 
Tom). father(lllice, -). mother(Bill, Ellen). mother(Alice, -). sex(Bill, M).  sex(Alice, F). ............. 
name(Bill). ............. Fiqu.re 2. An Extensional Data Base: Gr~und Axioms in the Relation people 
 which should return x = Tom, as Bill s father, using the facts embedded in the relation people . Because 
of the semantic richness of the relation peo­ple , in addition to the ground axioms in it, many other 
deductive axioms can be defined as rules. They can then be used in answering queries based on family 
relationships such as parent, sibling, spouse, and so on. Some rule formulations expressed in Datalog 
are shown in Figure 3. The facts in Figure 2 together with the rules in Figure 3 form a logic program 
that can be used in defining a deductive data base, Clearly, every EDB relation is necessarily non-recur­s 
ive. However, IDB relations may be recursive. An example of a recursive IDB relation is ancestor, defined 
as: Y) father(x, parent(x, Y) :-mcthsr(x, y). [1)Perent(x,:-y). [2) Sibling(x, y) :-fathe.r(x, 21) &#38; 
father(y, zl) &#38; mthsr(x, 22) &#38; Ilmther(y, 22) &#38; x <> Y. (3) spouee(x, y) :-Fa.rsnt(z, x) 
&#38;parant(z, Y) &#38; x <> y.  (4) grandperent(x, y) :-parent(x, z) &#38;Farent(z, Y). (5) Cousin(x, 
y) :-parent(x, 21) &#38; parent(y, 22) &#38; Sibling(zl, 22).  kchelor(x) :-SaX(X, M ) &#38; lspouse(x, 
y). (6) (7) ancestor(x, Y) :-~t(x, Y). ancestor (x, y) :-perent(x, z) &#38; Psrent(z, Y). zmcestor(x, 
y) :-Farent(x, 21) &#38; persnt(zl, 22) &#38;  Parent(z2. Y). (8) irulel (y) :-father(x, y) &#38; SaX(Y, 
F ). Figure 3. ~ IIIk.!ISi* Dab SaSe: DedUCtiVe AxicmS Eissed on people ancestor(x, y) :-parent(x, y). 
ancestor(x, y) :-parent(x, z) &#38; ancestor(z, y). Here, the first rule is the non-recur­ sive base 
case. The second is the recursive definition of ancestor in terms of the IDB relations parent and ancestor, 
Some rule processing sys­ tems, such as Datalog and Prolog, can handle recursive rules. For systems 
that do not support recursion, it is possible to formulate recursive rules non-recursively. In this case, 
the scope of the rule should be reflected explicitly in its definition. For example, Rule 7 in Figure 
3 is the non­ recursive counterpart of ancestor. This set of rules can correctly compute the ancestor 
of any person in a pedi­ gree chart of up to four levels. Now that an IDB has been defined for people 
, we have a deductive data base. We can query such a data base using deductive queries. A deductive query 
is a query that is based on at least one IDB relation. For example, ? spouse(Bill, x). is a deductive 
query, and should return Jeanne as Bill s spouse. In addition to EDB and IDB rela­tions, a deductive 
data base may also include various types of data integrity constraints . For EDB relations, integ­rity 
constraints can be domain con­straints, primary key constraints , foreign key constraints, etc. Also 
, certain semantic characteristics of data can be expressed as integrity constraint~, and can be used 
in ascert­ aining the correctness of data. Such integrity constraints may be related to the EDB, or 
they may involve the IDB . For example, Rule 8 in Figure 3 is the Horn clause for the constraint All 
fathers are male . Integrity con­ straints of all kinds are included in the IDB of a deductive data base. 
 Occasionally, it may become desir­able to define IDB relations using rules with negations. For example, 
the relation bachelor can be defined as in Rule 6 of Figure 3. Strictly speaking, this rule is not a 
Horn clause. De­spite that, it can be used in deriving the bachelor relation. The tuples of the bachelor 
relation consist of the names of males provided such names do not appear in any tuple of the spouse relation. 
This interpretation is equivalent to the set difference opera­tion in relational algebra, and can easily 
be handled by a logic language. Expressing Deductive Rules as SQL Views In a relational data base, a 
view is a virtual relation, and not an actual relation, It is a definition of a relation that can be 
derived from the existing base relations and other views . A view definition is supplied by the user, 
and this definition is stored in the system catalog. Once a view is defined, it can be used as if it 
were a data base relation. Whenever a view is referenced in a query, the DBMS accesses its definition, 
substi­tutes it in the user query, generates the canonical form for the query, and processes it. Most 
relational DBMSS support views . They offer facilities for declaring, using, and deleting them from the 
system catalog. The concept of a view is very similar to that of an IDB relation. Like views, an IDB 
relation is also virtual, and its definition is based on the existing EDB relations. Therefore, it is 
easy to see that deductive axioms can be implemented as views using tra ­ditional data base languages. 
In Figure 4, we have the SQL view definitions for a complete IDB corre­sponding to the deductive axioms 
of Figure 3. Let us briefly examine these definitions. Two deductive axioms for parent in Rule 1 of Figure 
3 are com­bined together in View 1 of Figure 4 using the disjunction OR. Semantical­ly , it defines parent 
as one s father or mother, provided there is a tuple for that parent in people . 1) create view parent 
(naztel, nama2) as select a.name, b.nema frctn people a, people b where a.father = b.name = a.nmther 
= b.name 2) create view sibling (namel , nante2) as select x.name, y.nanka fran ~ple x, people y where 
x. father = y. fatlwf and x.mother = y.mothaI and X.nalne -= y.nalne and x. father is not null and y.mothar 
is not null 3) create view spouse (nanel, name2) as select distinct x.name2, y.name2 fJXmparent x,parenty 
where x.namel = y.namel Sm2 x.name2 = y.name2 4) create view grandparent (namel, name2) as select distinct 
x. name, y.name frceI people x, people y, parent 21, parent 22 where x.nalne = zl.namel and zl.nante2 
= z2.namel and z2. nalna2 = y.nana 5) create view cousin (namel, name2) as select x.namel, y.namal frm 
parent x, parent y, sibling z tie x.nama2 = z.namel ami y.nama2 . z.nanIa2 6) create view bachalor_c 
(name) as select a. name h people a where a.sex = M end not azistz (select * &#38;cm apouse_a s where 
a.name = s.namal) 7) create view ancestor_a (namel, name2) as select distinct a. name, d. name fmn ~le 
a, people d, mle b, people c where a. fathar=b.name and b. father=c.name ami c. father=d.name or a. father=b. 
name and b. fatbar=c. name and C.mother==.name or a. father=b. nema and b.mother=c. name and c. father=d.name 
or a. fathex=b. name and b.mother=c. name and C.mther=d.nanla or a.motber=b. nama and b. father=c. nama 
and c. fathered. name or a.ncklmr=b.name aml b. fathar=c. nama and C.mother==.name or a.mather=b.name 
and bmctber=c.name and c. father=d.name or a.motbar=b. name and b.motber=c. name d C.mther=d.name or 
a. fathar=b. name and b. father== .name or a. fatber=b.nama and b.mother=d. name or a.mother=b. nema 
and b. father== .nama or a.mother=b. nama and b.mother=d. name or a. fathex=d. name or a.mother=d. nama 
8) create view iru.1.el (name) as select distinct f. f ather h people x, people f, people s * f.nama 
= x.name and s.name = f. father and s.sex = F L%Jura 4. SQL view Oafhliclorm for tha LccJic Program of 
Fiw 3 View 2 for sibling defines name2 as namel s sibling, provided namel and name2 have the same person 
as their father, and the same person as their mother. In order to ensure that two persons whose fathers 
and/or mothers are not recorded in the data base are not related to each other uncle r the relation sibling, 
the SQL predicate x. father is not null and x.mother is not null is included in the predicate, The condition 
x. name = y.name is for the purpose of rendering the relation sibling irreflexive, that is, one is not 
one s own sibling. (The operator A = is the same as <>, not equal to.) View 3 for spouse is defined 
in terms of the IDB relation parent whose definition is given in View 1. We could have defined spouse 
in terms of the attributes of the EDB relation people . However, using other views in rule definitions 
frequently yields more elegant, meaningful, and simpler views in SQL. The only drawback in doing this 
is that queries based on Such views take somewhat longer to execute than those based on equivalent views 
. This is because of the extra time required in converting the view to its canonical form before processing 
such deductive queries. View &#38; for grandparent and View 5 for cousin in Figure 4 are also based on 
other views. Provided we ensure correct inter­pretation for negation, rules involving negated axioms 
can be expressed as SQL views with equal ease. For example, the view for bachelor in SQL, View 6 in Figure 
4, uses set difference. Let us now consider an integrity constraint as an example. The integri­ty constraint 
All fathers are male , expressed in Datalog as in Rule 8 of Figure 3, can easily be written as a SQL 
view irulel as shown in View 8 of Figure 4. Once the view irulel is included in the IDB by executing 
it, it is possible to verify the correctness of the data base from the point of view of this constraint 
by running the de ­ductive SQL query select ~~ from irulel. For a correct data base, this query should 
return a null relation. Other­wise, the tuples generated by this query will identify the tuples in the 
relation people that cause this type of integrity violations. Clearly, all deductive axioms that are 
expressible in Datalog are express­ible as SQL views. The major shortcom­ing of this approach, that of 
using SQL as a logic programming language, is with respect to recursive axioms. Let us consider the following 
example. Previously, we have defined the IDB relation ancestor recursively as ancestor(x, y) :-parent(x, 
y). ancestor(x, y) :-parent(x, z) &#38; ancestor(z, Y). This says, one s ancestors include one s parents 
and the ancestors of each parent. Stated somewhat differently in set-theoretic terms, the set of ances­ 
tors for a person is the union of the set of that person s parents, the set of the parents parents, the 
set of the parents grandparents, and so on. Because the relation ancestor is tran­ sitive, that is ancestor(x, 
z) :-ancestor(x, y) &#38; ancestor(y, z). the set of ancestors for a person can be computed using a 
special operator, known as the transitive closure opera­ tor, The transitive closure operator for the 
relation ancestor generates the set of ancestors by adding to a known set of ancestors all the tuples 
succes­ sively deduced by transitivity, until such additions do not result in a new tuple in the relation. 
The relation thus obtained is called the transitive closure set for ancestor. Let us illustrate the transitive 
closure operation in computing the set of ancestors for Sally in Figure 1. We begin by considering Sally 
s parents: ( <Sally, Brian>, <Sally, Kathy> }. Next, we consider parents of Brian and Kathy, who are 
Sally s parents, and due to transitivity, add to the above set the tuples <Sally, Bill>, <Sally, Jeanne>, 
<Sally, Jiti, <Sally, Alice>. The set of Sally s ancestors becomes: { <Sally, BriarO, <Sally, Kathy>, 
<Sally, Bill>, <Sally, Jeanne>, <Sally, Jim, <Sally, Alice> ). We continue this way until no more tuples 
are added to the set, and thus the closure set is obtained. It is easy to see that the transitive closure 
operation is a succession of the combi­ nation of join, projection, and union operations in relational 
algebra. However, as repetition cannot be repre­ sented in relational algebra, in the current versions 
of SQL there is no operator corresponding to transitive closure. This is the most important weakness 
of SQL as a logic programming language for data bases. It is possible to extend SQL such that recursive 
rules can be expressed as views. For the ancestor relation, the SQL view definition would be : create 
view ancestor (namel, name2) as select a.name, b.name from people a, people b, parent p, ancestor q where 
a,name = p.namel and b.name = p.name2 or a.name = p.namel and p.name2 = q.namel and q.name2 = b.name 
 Any deductive query based on such a view would require the computation of the transitive closure of 
ancestor. On the other hand, in many practical ap­plications, it is possible to express a recursive axiom 
non-recursively. This may even be considered feasible if the number of iterations necessary to com­pute 
the transitive closure of a rela­tion is small by virtue of the extent of the relation. In our example, 
the pedigree chart of Figure 1 has four levels. Hence, we can define ancestor for up to four levels in 
a non-recur­ sive fashion as in View 7 of Figure 4. Now that we have generated an extensive IDB based 
on the relation people , we have a semantically en­hanced data base. We can query it using conventional 
as well as deductive queries. An example deductive query is is Bill an ancestor of Sally? This can be 
formulated in SQL as: select * from ancestor where ancestor.namel = Sally and ancestor.name2 = Bill 
which should return the tuple <Sally, Bill> if the query is true. Otherwise, it should return a null 
relation, CONCLUSIONS Logic-based systems and deductive data bases are relatively recent data base topics. 
They are still being investi­gated by researchers . Undoubtedly, these topics are important, and they 
should be included in data base courses. However, in our efforts to do so , we came across two problems. 
First, although some textbooks on data base systems contain short chapters on this subject, we found 
that not only are such chapters sparse, but also they are usually confusing at least as far as the terminology 
is concerned. Second, as of now, there is no commer ­cially available deductive DBMS. This deprives the 
student of the opportunity to use a deductive DBMS as an instruc­tional tool. In order to resolve these 
prob­lems, we attempted to emphasize a more consistent set of related terminology, Also, we proposed 
to make use of SQL views to define and process deductive data bases. This enabled the students to use 
a conventional DBMS as a deduc­t ive DBMS . Furthermore, through this approach, the students could understand 
and appreciate the importance of views in relational systems, the strengths and weaknesses of conventional 
DBMSS in implementing knowledge-based systems, and the areas of primary emphasis in research and development 
of deductive DBMSS . The student response to the approach described in this paper was highly positive 
and enthusiastic. REFERENCES 1. M. Missikoff and G. Wiederhold, Toward a Unified Approach for Ex ­pert 
and Database Systems, Procs. of the International Conference on Expert Database Systems, 1984. 2. L. 
Naish and J, Thorn, The MU-PROLOG Deductive Database, Technical Re­port 83/10, Dept. of Computer Sci­ence, 
Univ. of Melbourne, 1983. 3. J. D. Unman, Principles of Data­base and Knowledge-Base Systems, Vol. I, 
Computer Science Press, Rockville, Maryland, 1988. 4. J. D. Unman, Principles of Data­base and Knowledge-Base 
Systems, Volume II, Computer Science Press, Rockville, Maryland, 1989.  5, M. Stonebraker and L. A. 
Rowe, The Design of Postgres, Proc. of the ACM SIGMOD International Conference on Management of Data, 
1986. 6. Y. Uckan, Knowledge Representation Using Views in Relational Deductive Data Base, submitted 
for publica­tion in The Journal of Systems and Software. 7. C. J. Date, An Introduction to Database 
Systems, vol. 1, Fifth Edition, Addison Wesley, Reading, MA, 1990. 8. R. Elmasri and S. B. Navathe, 
Fun­damentals of Database Systems, The Benjamin/Cummings Publishing Co., Redwood City, California, 1989. 
 9. G. Gardarin and P. Valduriez, Rela­tional Databases and Knowledge Bases, Addison Wesley, Reading, 
MA, 1989.  
			