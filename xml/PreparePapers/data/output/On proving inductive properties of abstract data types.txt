
 Permission to make digital or hard copies of part or all of this work or personal or classroom use is 
granted without fee provided that copies are not made or distributed for profit or commercial advantage 
and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, 
to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee. &#38;#169; 
1980 ACM 0-89791-011-7 $5.00 explicitly invoking an Irrrtuctlon principle, This mtrtltod @f proof, In 
which the Knuth-Bemdix methods play an h?ttt~ttii role, has been implemented In an experimental ptogrdtfi 
Verlflcation system at the USC Informstlon 8&#38;dcrrtGr4$ Institute, the AFFIRM system [23]. Experience 
wfti the method hes shown that In many cases It can Mtltp~ify considerably the task of proving inductive 
propettlws of data types, Before presenting the resin theorem we attempt in th@ followlng section to 
provide clear and concise defittltlt!tl$ of msny of the basic concepts relating to thtr p! @f theory 
of aigebraiceiiy specified data types, inoiudlngt the language of a type, ewrational ttreofy, consistency, 
and inductive theory. The Mn requirement placed on specification in order to lMiWlr!t the applicrMlon 
of the mtiin theorem Is a kind of completeness requirement c6riied Ifuii specificatioth it is cicrseiy 
reiated to sufficient compietenesa [? 4], but haa a Simpier definition, A iemma Is proved in Seetlott 
3 that shows that rewrite ruia techniques can be ut!ed to prove this property about collections of data 
ty~ specifications, Courcelie [4] has (independently) proved a result thdt appears to be simiiar to 
our main theorem, but % 8 recursive function theory setting. Among previous tiffcil t$ to appiy rewrite 
ruie techniques to proving data tYPQ prO@aftieS, the resuits reported by fNedsoe and i$l tidi [1], Soyer 
and Moore [2],, von Henke and LuckMtt [15], Lankford [1 9], and Suzuki [28] have been importartt sources 
of inspiration, For an introduction td WWIC rewrite ruie concepts, par ticuiarly the convetKtenOe property 
! (finite and unique termination of ail aequenaas of rewrites), see [23], For s broader discussion Of 
the AFFiRM system and reiated work by other authors, agath aee [23]. 2. ABSTllACT DATA TYPES: BASiC 
CONCEPTS Spociflcations An abstract data type speclflcatlon consists of a nainetj a syntactic part, specifying 
the ianguage of the type; and a semantic part, specifying the axioma whloh the expressions of the ianguage 
satisfy. We will use the slmpie phrase type T in piace cf abstract datti type specification for T, The 
syntactic part of the specification iists a 6et of function symbols fl ,...,fn beionging to the type 
and for each fi the names of its argument types and rahga type (the WY of fi). One or more h?ltlal fumtbh~ 
m@ be included in the syntactic specification. The&#38;e SW functions which have range type T but have 
no arWr@tt$ of type T. For each of the type names T that app&#38;Lw in the aritiea, other than T iteeif, 
we say that T @&#38;#Cfld# rJhsrX/y on 1 . For T and U in the refiexive, tratwdtive cioaure of this reiation, 
we say that T depends on U. We define the /anguage of T, written L(T), and a IWIPPIH!J TypeOf from expressions 
to type names, induotiveiy W foiiows: (a) For each type U on which T depend5, WI infinite set of variable 
symbois v, with TypeOf(v) * U, We contained in L(T), (b) For each type U on wtrio!t Y depends, and each 
function f beionging to U, iet the htity of f be U1 x .,, x Uk + Uk+l where k20; then for each tuple 
(el ,...,ek) of exprerrsions ei in L(T) with TYP6@f[t@ = Lit for i*l ,...,k, the expression f(el ,...,ek) 
is in L(7) with TypeOf(f(el ,...,ek)) = Uk+l. (c) NOother gxpressiona ar~ in L(T). This definition of 
L(T) differs from that in Guttag and Horning [14] in inciuding variabie symbois, but at$rees with a more 
recent definition in [11], Note that it Perrrtti$ mutual dependency among specifications, sfn~e the inductive 
definition is based on the structure O* expressions, rather than on a hierarchy in the organization of 
specifications. turning to the semantic part of the specification, the exloms of T are a finito set 
of equations in L(T). it i$ assumed that among the operators beionging to any tYPe T it? the qperator 
=T used to express the axioms. Tit4 arity of =T is T )( T + Boolean. (TYPe B-an i$ discussed beiow.) 
These equality symbois wiii usua~ty be written without the subscript T, since T can be !rtfetred as the 
type of the arguments. The axioms are aawtfed to inciude the refiexive property for T, i.e. (% *T X) 
=~iean true. (Discussion of other requirements WI equality operators appears in footnote 2.) if T is 
a collection {Tl ,...,Tn} of types, the kWJuaiW of ~, again denoted L(T), is the union of L(Ti),i=l ,...,n, 
end th~ axiom set A of T is the union of the axiom sets Ai Of TI, isl,...,n, These definitions are illustrated 
in the foliOWitt9 subsection and in the specification of typili SequenceOfElement given iater (Figure 
1). The followhtg Is a specification of a type nwned Btvoktft, U$?edto express logical values. It la 
exptarawsd in the Syntax accepted by the AFFIRMsystem, tgpe 900 Iatan~ declare p,q, r: Boolean: Intsrfaca 
true, false, If p thenq else r, not (p), p snd q, p or q, p Impllesq t Boolean! ox Ioim \p**@q if pthsmqeleen 
Qt(q), (p =p) -true, (if true then p else q) * p, (If false then p else q) = q, not(p) = if p then falee 
else true, (p and q) = if p then q eise falee, (por q) = if pthen true elee q, (p implieeq) -if p then 
q eise true; end (Boolean) : equality relationf containing all of the eqwitione generated, Wa write DX=fi(by 
A) for the resulting ewality relation, and call the eet of equations satlsfytng this relation the e~uat/ana/ 
tfreory of 4. If T ia a type or a Colfectionof types with axiom eet A, then the eqlkltkmld theory of 
T la defined to be the intersection of th~ equational theory of A with L(T).2 Constanta Theoonstantsof 
a type orcoiiectionof types, T,aretf?@ ground expressions of L(T), i.e., those expression M L(~) containing 
no variable symbolst A set of cttt?WO@ cortstdnt$ fer a type T with axiom set A 1$ a eset @f representatives 
of the equivalence classes of oatWttfft$ under the equality relation a = ~ (by A). With the specification 
of type Boolean given above, it can be ehown that each constant of L(Boolean)la equal (by the axioms 
of Boolean) to one of the symbols true w ~!fatae,u but Ittrue=falae!l does not follOW frttm the ax~w$~ 
end thus the set of canonical constants of type &#38;tah4hh oan be taken to be {true,false}. Cwtsi8tancy 
A set of equations ia cortsisterrt if true=fatse IS nut iit itsequational.theory. Atypeor collection 
oftyptsa T*h axioms A Is defined to be consistent tf A is conSiStetlt. For example, the Boolean type 
given above la oorksWtWtt. Notes: thv are declared to be varisbles with Typ@f(p)=TypeOf(q) :TypeOf(r)=[loolemn. 
Thes@ot8 tio d fai90n W@ conetant initial fmctiens (actually trwo and falsao, M AFFIRM p6n!ri@ dfwiftgthe 
on il i~); ifpthm!qolse rmi$amoreoonveniwit s@4XfW if-tham-else(p,q,r), p andq isthe infix form of and(p,q), 
ete.The~rW ef andn Is Soolean n Soeletm -> Bwlean, etc. This kind of axiometimtion of Propositionaloalovlve,intafrn$of 
anif-lhen-alseoperator,i$aimikr to * _atti byM@arthyandwadbySoyerandMoore. Type Baolean does not dsipend 
on any other type, bitt every type depends on Boolean (sines, atle&#38;et, *T htJs range Booiswin)o 
Predlaate expreiqsions are expres.sione P for VAtlott TypeOf(P)is Wlean. Thus allexpressions in L(B@fiWl) 
are predicate expressiona, as are all eqwattorte Ifl any L(T). Variables in predicate expressions that 
areaxto@M O? thraerems are implicitly universally quentifiwl; t?~ expilolt quantifiers are permitted, 
Equational theory Let Abe a finite set of equiatlons {ai=#i}. We heve, f~ each aquation ul=#l, a sat 
of equations obtatnad bY altowlng the variables of al and #i to ranga over that wA of att exprswsions 
(thia set is infinite untessbothu arid# are constant expre$aiotw). This defines a binary relatlori %W 
on expressions, and we extend = to tha sm~~$t Fully apecifiect types Let T be a collection of types with 
axiom set A. T IS fttlly specff/ed (by 4) if every constant c in L(T) ia equal (bY A) to a constant In 
L(TypeOf(c)). The fult specification property IS closety relat~d tb tht? *sufficient completeness property 
of ahr@te typa speciflcatione [1 4], Its signiflcwrce lies primarily M tttat If one haa e collection 
of types that has been sftewft to be fully specified, and one extends the cotlectton Wtth a Ilew type 
epecificatlon so that the augmented odflea&#38;Al 1 AneouaIitv relation (w, more frequently, conarwnca 
r*w I* an WfLdValOW relation that also has the property of being Weaerv&#38;d !#Jr *titvtien. 2 Notethattheaxiomsgivenfor 
theequalityoperatorof 0 !yb6!!tWt b ehsekedfor consistency with the equivalence and wb$tihtbrr PWP9WS0. 
~ ab$fitvfion pre#erty can be checked by confirming that for eaoh @OrS&#38;# of sw type, substitution 
of equal ergvrnents yields eqoal valwst 0.9., WI ~~ \uil i~~e$ A~(q,i) . A#(ql,il)n If the a~i~~ fw O@ity 
&#38;e S&#38; COMi8twtt wiffr the reflexive lmpnrty (x .7 x), then it can be shown tfra! tho ~~ic ~~ty 
(x T y i!i@ie$ y 7 x), ami t~ baneitive Pfwfy (* f Y @ Y =y z impliesx =7z), alsohold. Is also fully 
speclfled, then I:he added specifktttkft drWS 8. FULL SPECIFICATION PLUS Equational DtiCtOAWLIW not Introduce 
any new constants into the old types. YIELO INDUCTIVE PROOF Lemma (Reduction of constant predicates). 
Let T be @ oollectlon of types with axiom set A, and assume that ~ It! fully epeoifled by A. If PC,Is 
a predicate ccnstant M L(l ), then either P. = true (by A) or P. @false (by A). Proof. From the three 
facts (1) P. Is a constant, (i?j TyPftOf(PO) Ie Boolean, and (3) T is fully ePeaified bY h) we can conclude 
that there Is a ecnatant PI In L(B@ettt$) such that P. = P1 (by A). Wrce the set of oar%of$iWti constants 
of type Booleun la {true, false}j Whet PI = true (by A) or PI = false (by A); henae PO _ ttU@(by A) or 
P. = false (by A). QEO. Inductive theory Let T be a type or a collactlon cf types with axkm Wtt h. The 
Mucths theory of T is the set of all ptr$dk@tf expreeslone P such that every constant Po, cbt@ltWd by 
substituting conetants for the variables of P, stitl$~eil Po=true (by A). Thus the Inductive thecry of 
T k the theory obt@ttt&#38;d by adding to the equational theory A of T an Inductive tU$eOf Inference, 
of the following form (let P=Q(x1 ,...,xn) be A predicate expression in L(T) II: A 1-Q(c1 ,...,cn)=true 
for all tuples (cl ,...,Cn) of constanta such that TypeOf(ci) = TypeOf(xi) Vxl ,,..,xn, IQ(x1,...,Xn) 
A rule of inference of this form k sometimes aaliad a rule of infinite induction, since! there are infintteiy 
fftafiy Premisee to the ruie. As such, It k not directly appltcabks in proofs as a ruie of infererwe, 
but it can be rstpla@#KtbY other rules that have oniy finiteiy many premises corresponding to the structure 
of the corrstaittta-­structurttl induction, or, more generaliy, induction bttsed Ctft any weii-founded 
partiai ordering of the conatwrta. $uoh induction rules have been called genetatcr /nduct/crr [283 or 
date type /frduct/cn [12], These usuai rnethude Of inductive proof of data type properties are ciet$djf 
related to the atructurai Induction methods used by -t and Moore to prove properties of recursive furration% 
but the method of proof to be desicrlbed in the next 8ectkn i$ different from the Bcyer-Mccr e techniques. 
In the initiai aigebra approach of [3,8], the inwctl~ theory of T corresponds. to thtr initiai algebra 
of T. Theorem. Let T be a collection of types with axtarb $#~ &#38; and assume that T is fuiiy specified 
by A. if E k a #@t&#38;f equations, each in L(T), and A U E iS consistent) t~ff eech equation in E 1$in 
the Inductive theory of l . Proof. Let tssIJ be an equation in E, and tt&#38;#o X MY constant instance 
of a=~. We must ahcw that A !­(uo*Jlo)=true.. By tire iemma, either A {-(a&#38;~&#38;tr@e W A 1-(tsO=i90)=faise. 
SUPPOSOthe latter wet~ t~ IJ~@*~ then A U E 1-(#o=#O)=false (using a+ to repiace a~ By #0), and A U E 
1-true=faisrr (by the assumptfotr tket A contains the refiexive axiom for *U where USTYP@f@&#38;~, conttwdicting 
the assumed consistency of A U E. ?!tUe, A 1-(u@#@true. QED. This theorem shows that the Knuth-Bendix 
algodthm oah be ueed to prove inductivs properties: suPPo5e ms M$ a collection of data type epeclfication$, 
ttffMt axlomat!zations have previously been formed inti &#38; convergent eet of rewrite ruies,3 and it 
hSa b@@fl checked that the types are fuiiy specified by th@? axioms. To attempt to prove that an equation 
a+ }s h! the inductive theory of the ooilection of tYPea, Oft@adds a new rewrite ruie (either a -+ # 
or # + a accordhtg @ f~ finite termination criterion being used) and perfottit4 * Knuth-Bendix aigorithm. 
There are three ptxeekbfe outcomes. First, the aigorithm may terminate @f&#38;&#38; 9enetatin9 a finite 
number (possibly zero) of atJdititWd rukte, none of wh!ch is true * false, ~ ~ti convergence property 
affirmed. in this case, aaax to our theorem, the equation u=P is a theorem. N@s h@W this depends on the 
capability of deciding eqtrdoi rtt: via are certain that true= faise is not a consequwlae Of titf4 augmented 
equations because both true and fai~ aW irreducible constants. Second, the ruie true + faka t may be 
generated, In which case the equation @# b inconsistent with the axioms of the types. The thltd possibility 
is that th@ Knuth-Bendix algcrithm may nut b@ abie to find a finite convergent set of rulee, sftd COWWS 
generating ruies indefinitely. (Thu$, some athW provision must be made for terminating the aigorithm, 
6tt0tt as a limit on number of newiy generated ruiea ot tbtt. consumed. in the AFFiRM system, the user 
Seee the generated rules being printed on the terminai attd 04fl interrupt the process manually.) In 
this caae, no tiffn~ information la gained about whether a=d is e th@Wtimt, aithough the atructurm of 
tho ruies generated befort? th4 3 A $et of tswrite rulss is defined to bs ,c~-[M] If N hst both the _termination 
properties. W­ finite nd miqw A fwrdatil @f eonvw@ertl wt. of doe is that Ihay provide a decision F?cce&#38;o 
kt W a@lonel thaory of tha ~tion$ to which they corfe~. process Is stopped may be suggestive of ad~%~! 
equations that would lead to convergence, Thk$ &#38;tW@t~B IS slmllar to behavior of the Boyer-Moore 
theorem ptOW$t when It sometimes needs a lemma to be supplied by the USer bOfOre it can find a proof 
of a theorem. @&#38;l d these out~omes is Illustrated in the examples that ftik% Examples: inductive 
properties of sequences Figure 1 shows a specification of finite sequwrce~ bawsd ot i materlai presented 
by Dahl in [5], It cart be e%t$v+n that when the equations of this specification are trsatrad as I SiWrRe 
rules they are convergent; the proof of WS unique termination property is carried out by the AfWIW System 
using the Knuth-Bendix algorithm, wh~ ~ equations ape fed Into the system. Furthramor&#38;, tw coileetlon 
of types containing Sequenc@OfEIWIWwl&#38; Eiemwtt, and Boolean can ba ahown to be futiy apaetf~dj by 
application of a lemma to be proved at the ei-id O* *8 Section. ~efo~e examining how our theorem permits 
the kk$tMh Bendix algorithm to be used to prove induotive Pr@PWt~ about $aquencers, let us firet consider 
hoW 8~h properties wouid be proved by a more cow%~tw approach. According to the interface spealfie~ttotw 
and the prinelple of data type induction, the valuwr Of &#38;!&#38; type can be regiwded as the set of 
all em~~ exptesslon$ finitely constructabla using the n@i, *j Mt$d Onto functions, Thus prcof$ of inductive 
propertls?a -d bta attempted using the following rule of inferenee; P(null) P(s) impiles P(s + x) P(s) 
implies P(x ontos) P(s) If one first uses this rule of inference to prove a nMrm@ form lemma for the 
type, showing that occurrrm+044$of the onto operator can always be elimfnattjd frt%it constents, then 
the third premise of the above rti O@l be omitted in all subsequent proofs of I-t&#38;@ properties. Thus, 
to prove the property (s cnt [8 4 X j = (,s CMt s ) + x ), for example, one can take P(s) * ~$ ,x ~tl 
Gat (s* + x!) = (s cat s ) + x ], and It suffiaes to ptovth (~) P(null), and (2) P(s) implies P(s + x). 
The proof of P(nuii) simply requires two appiicatiofw U* the axiom [nuil cat e = s]. Two applications 
of ti re adorn [(s + x) cat s = s cat (x onto s )] reduce (2) td [P(a) Implies s cat (x onto (s + x )) 
= (s cat (x onto s )) * % ], to which the axiom [x onto (s + x ) = (x onto s) + X1l tippllea, yieldlng 
[P(s) implies a cat ((x onto s ) + X ) = ($ cat s ) + X1]. We may then use the induction hypoth~~, P(s), 
by renaming bound variables s to s and x &#38; x ) and takhlg s ~ * (x onto s!) and x = x to redtwxl 
ths conchJsion to an identity. Figure 1 Elam@nt and SequenceOfElament TYPfa$ t~pe Element! dsclare x, 
x : Element; lnte~face errElamsnt: Elemant: ax I om (x-x) -truet end s{Element) ; t~pa SequenceOfE I 
ement; deciarw e, s , s ,s : SequenceOfE leraantt declare x, x , x* $ Element; interfaca nuii, ltha saquence 
of zerc e 1aments) S+x, (the ssquence obtainad bg addino x to the end of a) x onto e, (the sequenca obta 
i nad bg adding X tc the front of s} i e cat e (the sequence obtained bg concatenate Ing s end s ) : 
SequenceC)fEi ernent; interface Ienul i (s) : Bcrolean: ax tom (s=s) = true, (null -s+rt) = false, (9+x 
-null) -falee, ($+X -S +x ) = ((x-x ) and (e=s )), x onto null * null + x, x onto (5+x ) -(x onto 9) 
+ x , null cats -s, (8+x ) cat e -s cat (x onto a ), Isnull (null) -*rue, Ianull(s+x) = fslsa] and 
KlequenceOfElemant) ; Note that this proof requiredl several nontrivial steP8t (~ 1 choice of Induction 
variable (if we had chosen $ IrlS~WLd of e, then even the basis case would not have btMHt directly provable); 
(2) application of the apfWOWMtt4 axioms to make equational substitutions, and (3) rsmtittnd bound 
variables and choosin{l an appropriate Instantidtfdti In epplyhrg the induction hypothesis Now consider 
how the same inductive property wetdd he proved using the Knuth-Bendix aigorlthm. To the Of@@@f set of 
rules obtained from the axioms, one adds tlW W* [s cat (s + x )+ (a cat s )+ x ]. it must be cheoked 
th#l the augmented set of ruies otlll has the finlta Mnhletioh property. When the Knuth-13endix aigoritttm 
IS them ptwformed, it shows that the! unique termination pt~bdy also still hoids; no additional ruies 
are required ta aut?lfwe convergence. $Inoe the collection of types has the fitll specification property, 
our theorem Implies *M* tha property is in the inductive theory of this colkc~ Of tYPes. (Readers familiar 
with the Knuth-Berrdix atgorlthhr may wish to examino how the construotiam of superpositions and critical 
pairs corresponds f@MY directiy to the main steps of the standard inductive proof. The main difference 
is that one has, in effect, a 8*($W tnduction hypothesis, since the InductIon oan be regwtkd as being 
on the maximum length of sequences of tstWI ltfJa of an expreeslon.) Now suppose one wishae to prove 
the Induotlvf$ P#P@tty [s cat null = s], Again, when this is added to the rllk$t% consisting of the axiom 
ruies and the rule [s cat (e + X ) 4 (S cat e ) + x ], the oonvetgence PrOPOrtY ie aftM@ by the Knuth-Bendix 
algorithm, If, however, OtW eonsldere the equation [s cat null = null], and adda thta M a rule, the Ktuth-Bendix 
algctrlthm qulokly generatee the rule [true * false], ehowlrrg that [a cat null * nutf~ i$ inconsistent 
with the axioms. This illustrates the aamewi of the three possible outcomes mentioned above. The third 
poaeibllity is slmpiy Iiiustrated by adding W Wfe [s cat null * s] to the axioms aione, without the ruts 
~$ cat (s + x ) + (a cat s ) + x ]. The Knuth-fhwrdix algorlthm begins generating the sequance of rulee 
 scat(nuii+x)+s+x acat ((null +X)+x!) + (S+x) +x! s cat (((nuii + x) + x$) + xi!) 4 ((a + x) + x )+ x 
 etc. It is essy to at$e from the form of these rules that * rule [s cat (s + XI) + (s cat s ) + x ] 
wouid prevent tmm from being formed since it permits the left side of SMWh$@ be reduced to the right 
sidw Thus one must have %&#38; added thts IIaseociativlty property, : or it must be sddfd $Imultaneousiy 
with [s cat nuli + s]. Another Interaatlrw exampla is associstlvity of cat + [tb cat (s cat s ) * (s 
cat e ) cat s !], When this Is added as a rule, the Knuth-Bendix algorithm generatee two tuk$ that appear 
to be the beginning of an Infinite 6equWttW uf rules, (e cat (x onto s )) cat s -0 s cat (xt onto (s1 
cat S1l)) e cat (x onto ((x1 onto e ) cat s )) 4 * cat (X onto (x onto (s cat 5 ))) However, it then 
generates another sssociativlty t ul~, @ onto s) cat s + x onto (e cat s )], which akrwS tm seocmd of 
the two rules above to ba discarded, and prevents generation of further similar ruies; ttte t&#38;MdWt# 
set of ruies Is found to be convergent. Thue, In thte W-W% the lemma needed to compiete the proof waa 
@srti#tW@d automatlcaliy, Additional functions can be added to the eeWen04i WfWh and many other inductive 
properties can ba prwed tYY this method. The main limitation is the diffiouity of WM8WJ the flnlte termlnatlorr 
property of the rules genefded. Figure 2 shows addltlonai functions and some Of tkft properties that 
have been shown to hold, aseumlrt$ fhfiWJ termlnetion, using the Knuth-Bendix algorlthm hl * AFFIRM syetem. 
Extettalons The Theorem ought to be generalized to Permit parametrized type specifications. We are stUdY@ 
tti proposals of Buratali end Goguen [3] and NakaJksa [24] for specification languages that Include ty@@ 
patametetiZatlon. Another area for extension Is to tikidy the effeots of Including exception handling 
M * spealflcatlons, In the manner presented by Gtrtttlg Ill [11], Another Issue is that of the practicality 
of meetlrt$j ti$Q requirement of fuli specifications. Coneh%rtibtv experience with algebraic specifications 
gehred by W author and others Indicates that this Is not a WWare rwqulrement. The restrictions on the 
form of axforrw that Guttsg end Horning [$4] have given for guaranteehW tlW related condition of sufficient 
completeness, h6wWtY%, appear to be stronger than necessary. A lees rWJtdt!tlVe approach is possibie, 
based on the foliowlng Lemma. Let T be a collection of typea with axMsa A. SUppoae the axioms of A form 
a set of rewrite rules *H the finite termination property, and under this set @f?u~$ every constant c 
In L(T) IS either reduaib~e or ie Ih L(TypeOf(c)). Then T is fuiiy specified by A. Proof. We must show 
that any constant c In L(T) I* &#38;c#w~ (by A) to a constant In L(TypeOf(c)), if c Ie not already M 
L(TypeOf(d), then by aesumptlon it la reduclble~ t~ _ Figure 2 Ext@nd@dSequenceOfElement Type tgipe 
!3equenceOfElementt x x in in null (e+x ) - false, = (not (x-x ) impllee x in s), declare declare s, 
x, e , x , 8 ,8 $ SeqU8nCeOfE x : Element; reveree(null) reverse(a+x) -- null, x onto reverse(a), interface 
null, 6+X, x onto 0, s cat s , butfiret(e), butle$t(e), errSeq, revsree(d : SequenceOfElementt noduplicatea(null) 
-true, noclupllcates(e+x) -(not (x in e) and nodupl lcatea(s)), null dl$jointfrom a = true, (s+x) dlsjolntfrom 
e * (not (x in e ) and a disjolntfroln t-ulelemrrm s ]! interface Ienui l(a), x in s, noduplic~tes(e), 
s dlsjolntfrom t Boolearu 8 s cat (e +x ) = (s cat e ) +x , e cot null = e, a cat (a cat e ) R (s cat 
a ] cat (e cat (x onto a )) cat S = e cat (x onto (e cat a )), (x onto a ) cat e = x* onto (a cat e ) 
a , interface flret(s), last(a) : Elemant\ Ianuil(x Isnull(e flrat(x onto e) cat e ) onto a) --w faleel, 
(19nul x, (s) and Isnullfe )), ax i Oln (g*e) M true, (nul I -s+x) -(8+x -null) _ (a+x = a +.x ) = false, 
false, ((x-x ) and (sine )), Iast(x onto 51 = If i8nul l(s) then butfiriat(x onto a) - x elee s, last(a), 
errSeq * null, butlaat(x If Isnul onto l(s) s) = then null eise x onto butlaSt(9)* x onto null * null 
+x, x onto (9+x ) = x onto e + x , null cat 9 -e, (e+x ) cat e -e cat (x onto isnull (null) = true, Ienull(e+x) 
-false, first(null) -erriElememt, first(e+x) -if isnul l(s) then Iaet(null) -arrElement, Iaet(e+x) * 
x, s ), x else first($), x In (x* onto e) -(nclt (x=x ) Impliae x In S), x In (e cat e ) -(not (x in 
e) implies x in e ), revw-se(x onto s) -rflveree(e) + x, reveree(e cat a ) = referee cat reiversets)$ 
nodupiicates(x onto s) = (not (x in s] ancl nodupl icatee(s)), e ctis]olntfrom null -true, e diejolntfrom 
(a +x ) -(not (x in e) and a disjointfrom a )! butflrat(nuil) butfiret(s+x) If ienul l(s) -arrSeq, = 
then null elee but flrat($j + x) end (SetquanceOfElement) t butlaet(null) butlaat(a+x) = errseq, = e, 
 constant c1 In L(T). We oontlnue in this way, obt$it dng a sequenae O,C1,c2,..., eventually reaching 
a cona&#38;artt on that 1s Irreducible (sirm the rules have the fb t~ termination property), and thus 
Is in L(TypeOf(cn)). Ttren c=cn(by A)and TypeOf(cn)= rypaOf(c), QED, Based on this lemma, the full specification 
property can be proved by first proving the finite termination property, then analyzing the reducibility 
of constants. An Important extension that needs to be made In thi AFFIRM implementation is to provide 
algorithmic cheektl fi% sufficient conditions for termination (finite termlna#on # arbitrary sets of 
rewrite rules is undecidable [1 ?,21 ]), rather than Ieavlng it up the user to deal with terrrdtttitkwt 
outside the system, as I:; currently done. Amor?o th~ Possltsle methods for proving termination being 
consittw ed are those described in [6] and [22], It would alao be useful to Implement come of tho generalizations 
of the Knuth-Bendix methods devtsad by Huet [1 6], Lankford and Ballantine [20], Nelson and Oppen [25], 
and Stlckel and Peterson [27], to hq~dl. lar~er classea of equations, Includlng many aases Of commutative 
and aeaoclative axicme, 4. CONCLUSION The method of proof described In this psper has b~sh used experimentally 
in ttle AFFIRM system to prove numerous Inductive properties of data types such as sequences, queues, 
acts, circular lists, and trees, The theorems about sequences shown in Figure 2 ar e fairly typical of 
the kinds of properties proved about these types, There are some kinds of uriuful data type properties 
fuf which our proof method IS not applicable, e.g. transltlvlty of the subset relation about sets. The 
difficulty that arises Is that expression of the property aa a rewrite rufe requlree use of the if-then-else 
operator, and although there sre cases in which convergent sete of rUkt# krvolvlttg thla operator ctin 
be obtained, moat oft@t * Knuth-Bsindix algcrlthm keeps on generating Iong#r and longer rules end doee 
not terminate, For most Inductive properth?s that can be expressed as simple equations, howaver, our 
method of proof hes usually been applicable. Except for the proof of finite termination, for which AFFIRM 
as yet provides nc assistance, this has permitted the proofs of ~utih properties to be obtained much 
more eaally than when such proofa are done by explicitly Invoking an Inductive rule of Inference, Aeknowledgmonts 
it IS a pleasure to acknowledge helpful diacusdorts Wfth Bob 8oyer, Rod Erickson, !Mtaan Gerhart, Joe 
Goglrerr, John Guttag, Jim ttcrning, Dallaa Lankford, Ralph Loden, d Moore, Derek Oppen, and David Thompson. 
TltMt Suggeatlons have helped In many waya to clarlfy the Ideas presented. Special thanks aredueto John 
@Ut&#38;~ fOr valuable comments on earner drafta of this paper. REFERENCES 1. Bledsoef W. W,, and P, 
Bruell, A Man-Machltte Theorem-Prcvlng System, Art/f/c/a/ /rrte///genoe, Vol. 5, pp. 51-72 (1974), 2. 
8oyer, R. S,, and J S. Moore, IA Lemma 0rlV9h Automatic Theorem Prover for Recuralve Function Theory,t 
Proceedings IJCAI-77 Conference, Vol. 1,pp. 511-899 (August 1977). 3. Burstall, R. M. and J. A. Goguen, 
Putting Th6WfhES Together to Make Specifications, Proceadlngs of ~lttfi International Jclnt Conference 
cn Artlflclal Intelligerme, August t g7?, pp. 1045-105S. 4. Courcelle, 8., On Recuralve Equations Having 
a Uniqufs Solutlon, IRIA-LABORIAReport No. 285, March 19? 8, 5. Dahl, O. J., Can Program Proving Be 
Made Praot}i2dl ?i) Institute cf Informatlcs, Univarslty of Oslo, Norway, (1978). 6. Dershowitz, N,, 
and Z, Manna, Proving Termination WNh Multlset Orderings, Computer Science Department l?~pdti No, STAN-CS-78-651, 
Stanfcrd University, March 1978. 7. Goguen, J.A., and J.J. Tardo, An Introduction to OBJ: A Language 
fcr Wrltlng and Testing Formal Algebraic Speclflcatlons, Proceedings of Spectflcat/on of #k@db&#38;$ 
Software Conference Boston, April 3-5, 1979, PP. ~?0  189. 8. Goguen, J,A., J,W. Thatcher, E.G. War$ner 
and J.B,Wrlght, Abstract Data Types as Inltlal Algebras attd the Correctness of Data Representations, 
Proo@tfln$&#38; of Conference on Computer Graphics, Pattern Rsoof@lOtr and Data Structure, Beverly Hills, 
Ca,, pp. 89-93 (1976). 9. Guttag, J. V., rhe Specification and AppltCatlOn to Programming of Abstract 
Data Typee, Ph. D. T h*##e, Unlverslty of Toronto, Department of Computer SclencIe, 1975, 10. Gutteg, 
J, V., Abstrsd Data Typee and We  Development of Data Structures, Comnwrricetiorrs of the AC&#38;f, 
VOL20, June 1977, pp. 397-404. llNot(Js on Type Abstra6tkMvw 11, Guttag, J, V,, P/ ooe@dlngs of Speclflcatiorm 
of Reliable SoftWWt) Conference, Boston, April 3-!5, 19?9, pp. 36-46. Af$o ~e appear In IEEE Transactions 
on Software Engineering, 12. t3tNtag, J. V,, E. Horowitz, and D, R, Mus6er, Vib$~f W?t Data Types and 
Software Valldatlon, Communicat/ot?a cf the ACM, Vol. 21, December 1978. 13. Guttag, J, V,, E, Horowitz, 
and D. R. Mvastsr, Th~ Design of Oata Type Specifications, In Cufkmt Trends Ilt Prwramming Methodology, 
Vol. IV, R, T. Yeh, cd., Prentice-Hall, i $78.  $4. Guttag, J, V,, and Horning, J. J,, The Al@ebrti46 
Speclflcatlon of Abstract Data Types, Actd /r)forlrMthN, 10, 27452, 1978. 15. von Henke, F. W. and Luckham, 
D. C., A Mthd­for Verlfylng Programs, Proceedings of 1$$?4$ international Conference on Reliabie Softwiwe+ 
La&#38; Angeles, April 1975, pp. f 56-163, f 6. Huet, G. ItConfluent Reductions: Abstraat pI OPW*hJ$ 
arrtt Appl!catlons to Term Rewriting Syetems,~~ IRIA - LA90RIA Report No. 250, Domalne de Volucisau, 
Y#ll 60 Ffocquencourt, France, 17. Huet, G, and D. S. Lnnkford, On the Uniform Haltht~ Problem for Term 
Rewriting Systems, lRIA -LAiWWA Report. 18. Knuth, D. E, and P, B. Bendix, Simple Word Ptobl@ms In Universal 
Algebras, In Cornputationa/ Problems In Abstract Algebra, J. Leech, cd., Pergarnon Preiem, Nt#W York, 
1970, pp. 263-297. 19. Lwrkford D, S,, Canonical Inference, University Of Texas Atitomatlc Theorem Pro@g 
Project Repert ATP-M!, December 1975, 20. Lank ford, D, S, end A, M. Bailantyne, OaeieAwr  Procedures 
for Simple Equational Theories With CommuttWive-Associative Axioms: Complete Wt41 @f Commutative-Assoclativa 
Reductions, Untverelty of T@x@s Automatic Theorem Proving Project Report ATP-39, Au@M 1977. 21. Lipton, 
R, and Snyder, L,, On the Helting of Tree Replacement Systems, Conference on Theoretioel Computer Sclenoe, 
University of Waterioo, 1977. 22. Musser, D. R,, A Data Type Verification System Be$~d on Fiewrlte Rules, 
Proceed/rigs of the S/xt/r TwW Conference on Computing Systems, Austin Tsixa&#38; November 1r27?,  23. 
Musser, D. R., llAbstracl Deta Type Specification in the AFFiRM System, Proceedings of the Specifications 
of Reliable Software Conference, Boston, April 3-5, 1Q?%),pp. 47-57. Also to appeer In IEEE TransactIons 
on Softwere Engineering, Nakejlma, Ft., IIsypes.-partiel Types--for Progr*m and 24. Specification Structuring 
and a First Order SySteln tets Logic, Research Report No, 22, Institute of Irrforttiatlea, Unlverslty 
of Oslo, November 1977. 25. Nelson, G. and D. C. Oppen, A Slmpilfler Bas&#38;d Wl Efflchant Decision 
Algorithms, Proceedings of the F/fth AcM Symposium on Principles of Progremmtti# Languages, Tucson Arlzone, 
Jarwery 1978.  20. Spltzen, J., and B. Wegbrelt, The Verification awt Synthesis of Data Structures, 
Acts lttformatic#, vW. 4, (lg75), PP. 127-144. 27. Stickel, M. E. and G. E. Peterson, iComplete Sate 
of Reductions for Equational Theories with &#38;m@%ts Wdfloatton Algorithms, Deptrrtment of Computer 
Scidte@t$, Unhreralty of Arizona, and Department of Matilwhfitleal Sciences, Unlveraity of Missouri, 
September, 1977. 28, Suzuki, N., Werifying Pr09raIr is bY Ai9ebraie amd Logical Reduction, Proceedings 
of f 976 tntertmtkmdt Conference on Reliable Software, Los Angeles, Aprlt 1Q1 5, pp. 473-481, 29. Zliies, 
S.N., An Introduction to Data Algebra, Df i%ti Working ~apw, IBM San Jose Research Lab., Sept. 19?5. 
 
			