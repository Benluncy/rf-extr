
 INT[~ODUCTION TO THE SYMPOSIUM COMPUTER SCIENCE AND SNALLER COLLEGES Preston C. Hammer Chairman, Computer 
Science Department Pennsylvania State University Of the many problems facing smaller colleges, the most 
difficult may well be the selection of a philosophy adequate for these changing times. While financial 
difficulties cannot be disregarded, these are pro~ably easier to understand than it is to provide educational 
opportunities which atzract students. I have in the course of the past twelve years visited over 100 
colleges. In many of these I was asked what the college should do about the hyperactive computing field 
which was customarily regarded as a threat by the mathematics faculty. The major handicaD seemed to be 
in the interpretation of the role which computer science education might conceivably have in a liberal 
arts college. The interpretations of computer science amounted to regarding it as vocational training 
rather than as a possibly vital component of a liberal arts education. Being a graduate of a liberal 
arts college myself, I have some idea of the ideals which such colleges have. I shall accordingly address 
myself to the roles which computers and computer science might play in colleges and, conversely, what 
the colleges may contribute to this new area.  COMPUTER SCIENCE AND RATIONALITY. Modern el~ztronic 
computers are time amplifiers. They are, in common with all our tools, extenders of our capabilities. 
Where they differ from such scientific apparatus as microscopes, telescopes (space amplifiers), accelerators, 
and other gear is in the universality of their applicability. In virtually every area of organized human 
activity there are at least some few individuals making use of computers. Applications are being made 
in health services, natural sciences, engineering, social sciences, architecture, fine arts, music, historical 
studies, businesses, governmental agencies, colleges and universities. In some of these applications 
computers do tasks which could be done manually but, in the best applications, tasks are being done which 
were not possible before. The versatility of electronic computers is, in large measure, due to their 
incompleteness. That is, the computer enables a large number of specific tasks to be done by following 
instructions provided for it by people. Thus a computer is not simply one machine: it is a possibility 
of myriads of machines depending on the ingenuity of its human users for the effectiveness of the help 
 it provides. The computer is best at repetitive tasks. It can carry out millions of arithmetic operations 
and make millions of decisions which it has been instructed to do. It will also carry out manipulations 
with symbols with great speed when properly instructed. Accordingly the most used branch of mathematics, 
arithmetic, achieves vastly increased usefulness when computers do the work. Computers, when provided 
with proper software, can carry out formal differentiation better than humans. However, people have to 
do the planning and provide the software, even as other people had earlier designed, made, and distributed 
the hardware. The utilization of computers then requires study of strategies to reduce classes of problems 
to computability. For example, I have stated and proved a rather large number of theorems. If computers 
are to be used effectively in proving theorems, then a study must be made of the strategies and flows 
of proofs in each area where they are to be used. Now, on the working level, I might claim to know how 
to both generate and prove theorems. Yet I do not know a strategy of proof which I can convey to a computer. 
While working on strategiÂ£s of proof is a higher level of activity than proving theorems, this does not 
mean that individuals who try to mechanize proofs are somehow superior to those who ably prove theorems. 
However, I anticipate that there will be some of the best mathematical minds of the future developed 
in the attempt. In some ways, the computer provides a means of separating the rational (i.e. computable) 
from the irrational. Any process which we comprehend thoroughly might be simulated in a computer, but 
those which we do not comprehend resist reduction to a computer. The problem of mechanical translation 
of languages was once deemed a matter of doing a rather moderate amount of work to achieve success. The 
attempts proved that language is not that simple, and a new appreciation of linguistic structure has 
b~en developed as a byproduct. It was once thought %hat computers would make great strides in meteorology 
possible. Today we must admit that the weather is too poorly understood and too complex to be well predicted 
by any yet known means. The computers are poorly suited for recognizing geometrical patterns. Biological 
problems are generally beyond their scope. It is easy to state me4ical problems for which solutions would 
be desirable which are simply too expensive to solve now. It is easy to give simple mathematical problems 
which would be beyond the reach of computers even though, in principle, they would so be managed. Thus 
the presence of a computer, which may be and has been used as a means of escaping the rigors of thinking, 
actually encourages greater use of the intell~ct by the promise of amplifying its product. % 3 There 
is scarcely a more rigid discipline than programming for computers. Very slight errors lead to completely 
erroneous results as the machines follow instructions exactly. One mathematical logician has pointed 
out that the discipline of programming is excellent preparation for study of logic. Conversely, a grasp 
of formal logic is a useful background for effective computer programming or computer design. To put 
this in the context of this paper, there is much in favor of having computer science in undergraduate 
programs in liberal arts colleges.  COMPUTER LANGUAGES. Having bean responsible for the initiation of 
two c:omputer science departments, and having a background in mathematics, I have mused on the necessity 
of establishing separate departments. The immediate necessity arose because of the necessity of teaching 
computer languages and software design. In general, the electrical engineering departments do not teach 
non-engin .ering students, and the teaching of computer languages was placed on the same plane as teaching 
English. Mathematicians in universities, on the other hand, while accustomed to teaching service courses, 
generally would not take computer languages seriously. Accordingly it was necessary to start a new discipline. 
Almost everyone admits that the learning of foreign languages is best started when young. The same is 
true of computer languages. Whether the learning is for the objective of a career An the computer profession 
or for applications in some area, developing real facility with computers requires more than casual efforts. 
 Despite several sporadic efforts the computers have not yet been effectively used in undergraduate education 
in courses in most areas. This is not because it would be ideally impossible to make use of computers, 
but because of the major revisions of courses which would be needed. Wherever the computer is used effectively, 
a drastic revision of educational procedures is necessary. I think that liberal arts colleges could 
take the initiative in experimenting with educational uses of computers. This belief is founded on the 
dedication of faculty to education as compared to the research emphasis cf universities. Moreover, the 
cultural aspects of computers are certainly more likely to be clarified and presented by scholarly educators 
rather than by technical research workers. l PRACTICAL ASPECTS OF COMPUTER SCIENCE. While some colleges 
may not admit it, all colleges of which I know are basically career preparation oriented. Rare is the 
student these days who feels he or she can afford to ignore planning beyond the baccalaureate degree. 
Communication skills are acquired and communicating with computers is becoming increasingly useful. Among 
the sciences and mathematics there is no discipline :which prepares a student for employment as well 
as computer science does at the baccalaureate level. For almost all areas of graduate study and research, 
prior study of computers is an asset, with the possible exception of pure mathematics. Why is computer 
science so practical? Because, what a student learns in one or more courses is almost all used in any 
computer applications the student may later make. In contrast, how much of other courses really is that 
effective? THEORETICAL ASPECTS OF COMPUTER SCIENCE. The theories needed for the study of computer science 
are mathematical in aspect but the emphases are different. Constructive logic in general, recursive functions, 
and algebra structures of logic achieve a relevance in computer science which was not noted before. Arithmetic 
and algebra are essential. Automata theory and formal linguistics are defined axiomatically. Graph theory 
and combinatory analysis are of concern in analyzing algorithms and organizing programs. How about such 
mathematical classics as geometry and calculus? Despite the tendency of many computer scientists to belittle 
these areas in favor of discrete mathematics, both are important in computer science. The calculus and 
analysis provide continuous models of real systems and =ontinuous implication systems (logics) to deduce 
their implications. Since only a few of the practical problems of analysis are solvable effectively in 
closed form, numerical analysts replace =ontinuous logics with discrete logics and enable more solutions 
via computers. Each real system as ~e idealize it is embedded in a four-dimensional space, but usually 
the number of its parameters places At in a higher dimensionll space. The forms and shapes of systems 
are usually represented jeometrically. Hence geometry should not be ignored. However, does computer 
science actually need any but extant theories and interpretation of ,athematics? The answer is that much 
important concepts, as that of function, take on new life and Beaning in computer science. For example, 
I pointed out three years ago that the customary synonym , transformation ,! , used for function, is 
better replaced by "transformer". This idea came to me when was interpreting a computer as a function 
which transforms input (program) into output. A computer is ~o~ a transformation of inputs: it is a transformer 
of inputs. 4 This means that from elementary algebra on, identities have been misinterpreted in mathematics, 
since they confuse the result with the process which produces the result. In computer science two algorithms 
which produce the same r~sults are not to be regarded as equivalent completely! In other words, the distinction 
between a verb and the object in a sentence is relevant in computer science. It was in using so-called 
random number sequences in computation that I Jelled my conclusion that randomness is nonsense, which 
it in fact is. Moreover, I have recently written an essay on the relationships between algebras and geometries. 
These relationships are necessary to computer science but have never been clarified in mathematics. Why 
are they necessary in computer science? Because each computer has only a finite number of symbols available, 
and it is necessary to use these symbol structures to represent systems. But the language (algebra) of 
geometry is finite, and so is the language of analysis. It is more important in computer science, then, 
to find out how these algebras work, than it has been in mathematics. Now in my estimate, the situation 
of computer science with respect to mahhematics is that computer scienc~ is restoring the dynamic and 
culture-sensitive aspect which was disappearing from mathematics. It is much easier tO USe the cook-book 
formulas of calculus than it is to design effective programs fcr computers. On the other hand, a thorough 
knowledge of mathematics is needed for many aspezts of computer science. Small abstract systems may be 
manipulated by computers in ways not possible by man. Patterns in such systems are still hard to discern 
using computers. Finally, computer science provides one of %he best filters for current mathematical 
effectiveness; it shows the limits of our knowledge with disconcerting sharpness.  CONCLOSION. Liberal 
arts colleges can do much to save computer science from becoming a merely technical specialized field. 
This capability rests, in part, on the usual dedication of scholar educators, and in part on the mental 
energies of the students, since the computers will enable new symbol structures, such structures may 
well be considered in liberal arts colleges. The research oriented college teacher may find that analysis 
of data, collection of data, and control of experiments can be helped by computers. However, such teachers 
should not be swayed toward trivial work, sod,cod by computers, but use computers to produce better results 
when it can be done. i  
			