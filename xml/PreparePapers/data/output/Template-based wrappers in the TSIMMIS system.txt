
 Template-Based Wrappers in the TSIMMIS System* Joachim Hammer, Hector Garcia-Molina, Svetlozar Nestorov, 
Ramana Yerneni, Marcus Breunig, Vasilis Vassalos Department of Computer Science Stanford Univemity Stanford, 
CA 94305-9040 Email: { joachirn,hector ,evtirnov, yemeni, vasselos}Odb. stanford. edu http: //wv-db. 
stanford. edu/tsimmis 1 Overview In order to access information from a variety of het­erogeneous information 
sources, one has to be able to translate queries and data from one data model into another. This functionality 
is provided by so-called (source) wrappers [4,8] which convert queries into one or more commands/queries 
understandable by the un­derlying source and transform the native results into a format understood by 
the application. As part of the TSIMMISproject [1,6] we have developed hard-coded wrappers for a variety 
of sources (e.g., Sybase DBMS, W WW pages, etc.) including legacy systems (Folio). However, anyone who 
has built a wrapper before can attest that a lot of effort goos into developing and writ­ing such a wrapper. 
In situations where it is impor­tant or desirable to gain access to new sources quicldy, this is a major 
drawback. Furthermore, we have also observed that only a relatively small part of the code deals with 
the specific access details of the source. The rest of the code is either common among wrappers or implements 
query and data transformation that could be expressed in a high level, declarative fashion. Based on 
these observations, we have developed a wrapper implementation toolkit [7] for quickly build­ing wrappers. 
The toolkit contains a library for com­monly used functions, such as for receiving queries from the application 
and packaging results. It also This work wss supported by ARPA Contrsct F33615-93­1-1339,by the Anderson 
Pnculty Scholar Fired, by the Center for Integrated Systems at Stanford Univemity, and by equip ment 
grants from Digitsl Equipment Corporation and IBM Corporation. The US Government is authorized to reproduce 
snd distribute reprints for Government purposes notwithstand­ing any copyright not ation thereon. The 
views and conclu­sions contained in this document sre those of the authors and should not be interpreted 
as necessarily representing the offi­cial policies or endorsements, either express or implied, of the 
US Government. Permission to make digitellhard copy of part or all this work for personal or clacsroom 
use is granted without fee provided that copies are not made or distributed for profit or commercial 
advan­ tage, the copyright notice, the title of the publication and its date contains a facility for 
translating queries into source­specific commands, and for translating results into a model useful to 
the application. The philosophy be­hind our template-baaed translation methodology is as follows. The 
wrapper implementor specifies a set of templates (rules) written in a high level declara­tive language 
that describe the queries accepted by the wrapper as well as the objects that it returns. If an ap­plication 
query matches a template, an implementor­provided action associated with the template is ex­ecuted to 
rovide the native query for the underly- F ing source . When the source returns the result of the query, 
the wrapper transforms the answer which is represented in the data model of the source into a representation 
that is used by the application. Using this toolkit one can quicldy design a simple wrapper with a few 
templates that cover some of the desired functionality, probably the one that is most urgently needed. 
However, templates can be added gradually as more functionality is required later on. Another important 
use of wrappers is in extend­ing the query capabilities of a source. For instance, some sources may not 
be capable of answering queries that have multiple predicates. In such cases, it is nec­essary to pose 
a native query to such a source using only predicates that the source is capable of handling. The rest 
of the predicates are automatically separated from the user query and form a jilter query. When the wrapper 
receives the results, a poet-processing en­gine applies the filter query, This engine supports a set 
of built-in predicates based on the comparison op erators =, #, <, >, etc. In addition, the engine sup­ports 
more complex predicates that can be specified M Part of the filter query. The postprocessing engine is 
common to wrappers of all sources and is part of the wrapper toolkit. Note that because of postprocessing, 
the wrapper can handle a much larger class of queries than those that exactly match the templates it 
has been given. Figure 1 shows an overview of the wrapper archi­ .. tecture as it IS currently implemented 
in our TSIM-MIS testbed. Shaded components are provided by the appear, end notice ia given that copying 
is by permission of ACM, 1A native query is not necessarily a string of a well­ Inc.To copyotherwise,torepublish,topostonservers,orto 
structured query language, e.g., SQL. In genersl, the term redistribute to lists, requires prior apecif 
ic permission sndlor a fee c (native query may refer tO .sny program used to sccess and SIGMOD 97 AZ,USA 
retrieveinformationfrom the underlying source. @ 1997 ACM 0-89791-911 -4/9710005 ...$3.50 532 ~ E Userinput 
m Toolkit I Application n So.rces~ific  =rtG I Native WrapperI A Native NativeQuery Result Source  
/-(e Figure 1: Wrapper architecture toolkit, the white component is source-specific and must be generated 
by ~he implementor. The driver component cent rols the translation process and in­vokes the following 
services: the parser which parses the templates, the native schema, as well as the incom­ing queries 
into internal data structures, the matcher which matches a query against the set of templates and creates 
a filter query for postprocessing if necessary, the native component which submits the generated ac­ 
tion string to the source, and extracts the data from the native result using the information given in 
the source schema. and the enoine. which transforms and packages the result and ap~lies a postprocessing 
falter if one has been created by the matcher. We now de­scribe the sequence of events that occur at 
the wrapper during the translation of a query and its result using an example from our prototype system. 
The queries are formulated using a rule-based language called MSL that has been developed as a template 
specification and query language for the TSIMMISproject, Data is represented using our Object Exchange 
Model (OEM), We will briefly describe MSL and OEM in the next section. Details on MSL can be found in 
[5], a full introduction to OEM is given in [I]. An Example OEM, is a self-describing object model with 
nesting and identity. Every object in OEM h= an object iden­tifier (OID), type, label, and value. The 
label carries semantic information about the object, i.e., describes the meaning of the object in a h~an 
readable form. The type is either atomic (e.g., integer, string, binary, etc. ) or complex. The value 
of a complex object is the set of the object references to its subobjects. Certain OEM objects are chosen 
to be top-ieuelor root objects, that have zero or more subobjects (also termed child objects). Toplevel 
objects provide entry points into the object structure from which subobjects can be re­quested, as explained 
below. For example, the follow­ing structure represents an object labeled ansuer that consists of several 
book subobiects. Each book ob iect has itself three subobjects lab~led author, year, md title. Note that 
we will omit the type and OID from all OEM objects in order to improve the readability of the examples: 
(answer { (book { (author Jones ) (year 1980 ) (title Database Theory )} ) (book { ... }) ..} )  OEM 
objects are created by the wrapper as the re­sult of an MSL query. Since our example only uses a small 
subset of its syntax we will not describe the full functionality here. MSL is a rule-based language that 
extracts OEM objects (including their subobjects) by 533 matching patterns in the query against existing 
OEM structures, for example, the wrapper templates. Each MSL query consists of a rule head and a rule 
tad sepa­rated by the :-symbol. Variables are represented by identifiers starting with capital letter, 
such as P and Y. The tail describes the search pattern, while the head describes the structure of the 
OEM objects that will be constructed. Intuitively, we match the tail pattern against the object stmcture 
exported by the wrapper, thereby bkding the variables to object components of the wrappers object structure. 
Note that when a field contains a constant (e.g., Jones ), the pattern binds successfully only with OEM 
objects that have the same constant in the corres~ondiniz field f~attem matching may descend recursiv~ly 
thr~ th~ object structure). The result of the query consists of all the objects (and their descendants) 
whose patterns match the query tail. For each of the matched objects, the object specified in the query 
head is returned. For the remainder of this example, we are assuming that we have a relational database 
containing biblb graphic information about papers and books for which we have developed a wrapper accepting 
MSL queries. Let us further assume that we have a user who is in­terested in all papem authored by Jones 
which have been published before 1984. A corresponding MSL query is: P : P: <book {< year Y >< author 
Jones >} > AND lt(~ 1984). (1) This query can be interpreted in plain English as Find all publications 
Iabeledbook which have subobjects year and author, and for which the author field has value Jones and 
the year jield value is less than 1984. The lt (Y, 1984) predicate in the MSL query shown in (1) specifies 
that the < comparison operator be used on the values of the year subobject rather than the de­fault = 
operator (as is the case with author subobject values). Upon receipt by the wrapper, the query is sent 
to the driver component which invokes the pamer. After the query is successfully pareed, the driver invokes 
the matcher to match the query against a set of template rules. These rules describe the queries that 
are ac­cepted by the wrapper; in a sense, template rules are parametenzed MSL queries. Associated with 
each rule is an action string that describes the correspond­ing native query. Since we are assuming a 
relational DBMS as our source in this example, the action string is a paramet erized SQL query. In order 
to demon­strate the postprocessing capabilities of the wrapper we have chosen not to include predicates 
on year in the templates. 21n a sense, we are sssuming that our source does not SUP port the < predicate 
on year. However, in a production­version wrapper we slways make use of all the natively sup ported predicates 
in order to msximize efficiency. The following is an example of a template (without its action string) 
that matches the query shown in (I): B : B :< book {< author $X >} > (2) This template matches the input 
query because the substitutions B~ P and $X + Jones transform the template into an MSL expression that 
subsumes the input query, i.e., the resulting query returns a superset of the expected results. For details 
on the matching process as well as a discussion on query sub­sumption in MSL refer to [7]. Note that 
we could have designed a template that matches the input query ex­actly had we decided to let the source 
execute predi­cates on year. Using the associated action  // W= select * from book where author =.l 
$X //. (3) and the substitution $X + Jones , the matcher pro­duces the following native SQL query: select 
* from book where author =  Jones) The driver then invokes the query processing part of the native 
component which submits the native query to the source. When the result is returned, the driver invokes 
the query engine to perform postprocessing that is necessary in order to remove all those publica­tions 
from the answer that were published on or after 1984 (since the ori@ml query was for publications be­fore 
1984). This is done by applying the foflowing MSL filter query to the result:  B : B:< book{ <year 
Y>}> AND it(Y, 1984). (4) Specifically, the postprocessing engine takes each an­swer object in the native 
query result, extracts the year field of the object and checks if it is less than 1984. If so, the mewer 
object is included in the result constructed by the engine. At the end, the engine re­turns only those 
entries whose year field is less than 1984. Finally, the driver passes the result back to the application 
that issued the original query. 3 Description of Demo We demonstrate the latest version of our wrapper 
toolkit aa described in the previous sections. Specifically, we show how to use our wrappers for accessing 
informa­tion from the following four different types of sources containing bibliographic data in heterogeneous 
formats. 1. A University-owned legacy system called FOLIO which is accessible through an interactive 
front­ end (called INSPEC). 2. A Sybase relational DBMS which is accessible through SQL. 534 3. A collection 
of UNIX tiles which are accessible through a Perl script file. 4. A World-Wide Web source which is accessible 
through our W WW extraction utility [3].  Although all four sources support different access meth­ods, 
the wrappers hide all source specific details from the application/end-user by exporting a common in­terface 
to the underlying data independently of where and how it is stored. By adding new templates or modifying 
existing ones, we show how one can quickly enhance the query capabilities of a wrapper or change the 
structure of the resulting answers without writing one line of code. Furthermore, we demonstrate the 
postprocessing capabilities of our wrappers. As part of the TSIMMIS project we have also de­veloped a 
graphical browsing tool called MOBIE [2] that lets users comect to TSIMMIS components using HTTP and 
the WWW. MOBIE provides mechanisms for submitting queries to wrappers and for navigat­ing through OEM 
answer objects, zooming in on their nested substructures as necessary. In our demo we use MOBIEfor submitting 
queries to the wrappers and for viewing the translated results as formatted, hyper­linked HTML pages. 
References [1] S. Chawathe, H. Garcia-Molina, J. Hammer, K. Ireland, Y. Papakonstantinou, J. Unman, and 
J. Widom. The TSIMMISproject: Integration of heterogeneous informa­tion sources. In Proceedings oj the 
10th Anniversary Meeting, pages 7 18. Information Processing Society of Japan, Tokyo, Japan, October 
1994. [2] J. Hammer, R. Aranha, and K. Ireland. Browsing TSIM-MIS data sources through the Web. Technical 
report, Department of Computer Science, Stanford, California, February 1997. [3] J. Hammer, H. Garcia-Molina, 
R. Aranha, and Y. Cho. Extracting semistructured information from the Web. Technical report, Computer 
Science Department, Stan­ford University, Stanford CA 94305-9040, February 1997. [4] J.W. Lewis. Wrappers: 
integration utilities and services for the DICE architecture. In Pmceedinga oj the Sec­ ond National 
Symposium on Concurrent Engineering, pages 445-457. Concurent Engineering Research Cen­ter, Morgantown 
WV, 1991. [5] Y. Papakonstantinou, H. Garcia-Molina, and S. Abit~ boul. Object fusion in mediator systems. 
In Proceed­ings oj the International Conference on Very Large Databases, Bombay, India, September 1996. 
 [6] Y. Papakon­stantinou, H. Garcia-Molina, and J. Widom. Object exchange across heterogeneous information 
sources. In proceedings oj the Eleventh International Conference on Data Engineering, pages 251 260. 
Computer Soci­et y of the IEEE, Taipei, Taiwan, March 1995. [7] Y. Papakonstantinou,A. Gupta, H. Garcia-Molina, 
and J. Unman. A query translation scheme for rapid im­plementation of wrappers. In International Conference 
on Deductive and Object-Oriented Databases, pages 97 107, August 1995. [8] D. Wells. Wrappers. Survey. 
URL. http: //www.objs.com/survey/wrap.htm. 
			