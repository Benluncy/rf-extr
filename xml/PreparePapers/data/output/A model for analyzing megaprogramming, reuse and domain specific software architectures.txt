
 A Model for Analyzing Megaprogramming, Reuse and Domain Specific Software Architectures J. Chris Commons 
and Mark Gerhardt ESL, Incorporated 495 Java Drive Sunnyvale, CA 94086 chris_commons @smtp.esl.com gerhardt(?ajpo. 
sei.cmu.edu ABSTRACT This paper describes the evolution of a model to deal with megaprogramming issues. 
Megaprogmmming is the reapplication of higher-level componentry. Megaprogmmming involves a problem space 
and an ar­chitecture space. The problem space represents the do­main boundaries of problem sets which 
will be solved within a given solution. The iirchitecture space repre­sents the detailed implementation 
artifacts which will be applied to a problem. Conventional reasoning about componentfy is concerned with 
attributes like size, number of source lines, etc. A concern not addressed by existing methods and models 
is the idea of generality, i.e., how generrd an architecture is, or alternatively, how general a problem 
are we try­ing to solve? We will derive a basis of how to discuss the interaction of these generaWies 
and how to forecast tractable and non-tractable combinations of problems and architec­tures. Megaprogramming 
suggests the collection and reuse of higher level components. As components get bigger and higher in 
level, they are more closely associ­ated with problem functionally rather than with hnple­mentation concerns. 
As an example, a megacomponent might be a resource manages that allocates CPUS rather than a low level 
qneue facility to hold requests for CPUS. We will consider the relationships between software reuse, 
portability, and the application of domain specific software architectures. We will analyze factors affecting 
application of a domain specific software architecture to a specific set of problems, and examine how 
this affects reusability. Permission to copy without fee all or part of this material is granted provkded 
that the copies are not made or distributed for direct commercial advantage, the ACM copyngbt notice 
and tie title of tie publication and its date appear, and notice is given that copying is by permission 
of the Association for Computing Machinery. To copy otherwise or republish, requires a fee and/or specific 
permission. @1993 ACM 0-89791-621-2 /93/0009--0058 1.50 58 REUSE -GENERALITIES Software reuse is often 
presented as beiig signifkantly more efficient and easier than the custom development of new software. 
This is only true if differences between the original and new applications are acceptable --i.e., not 
fatally inconsisten~ and if the architecture bases, models, and interfaces can be ported and extended 
effec­tively. If any of these conditions cannot be mq then reuse may or may not be more efficient than 
a new im­plementation. The intuitive approach to reuse is to try to arbitrmily reuse something that already 
exists. This will probably fail because we usually implement a point solution for a specific problem 
without regard for futme customization of that solution. We later attempt to adapt that point so­ lution 
to subsequent related problems. If the Mid so­lution was developed with reusability and portability as 
a primary objecliv~ then it could be exploited via adapta­tion to many mom related problems. Classical 
reuse exploits existing software bnt produces another point solution, and does not consider the possi­ble 
future reuse potential of that solution. Domain Spec~lc Software Architectures (DSSA) are a move to­wards 
investing effort in the initial development of gen­eml, portable software components. These efforts will 
result in non-traditional components in two respec~ 1) the components will be developed with generality 
of ap­p@ation in rnin~ and 2) these components will be ag­gregated into larger clumps of componentry 
than usual. These larger clumps achieve functionally dis­cussedin the problem domain mther than techniques 
used in the implementation domain. 9 YHAT IS ARCHITECTURE t. Distributed and complex systems have made 
concerns about architecture more prevalent than in the past. What are we concerned about when we talk 
about architecture? An architecture is conccmed with thee thing~ a tlame­work for logical and physical 
partitioning, a semantic model of communication and cooperation, and a layering capabfity to add algorithmic 
functionality on top of this framework to complete the solution for the problem at hand. Megaprogramming 
emphasizes exploitation of existing DSSAS. Solving a specitlc problem with a domain spe-CKICarchitecture 
means customizing it by adding to it. As an example, an Ada generic package maybe consid­ered a domain 
specific architecmre. The extras added are the declarations used for bhding the formal parameters and 
the instantiation of the generic. Remember that thk can include the construction of procedures and functions, 
and includlng them in the instantiation! For megaprogramming to succeed, architectures must be developxl 
with reuse and portabWy as a primary objec­tive. Such a DSSA would then be applied to a defined set of 
problems with little or no architecture recus­tornization when reapplied in the specified problem do­main. 
EFFORT -BLA CK BOXES VS, WHITE BOXES he advent of megaprogramming and Domain Spectilc Software Architectures 
have had a significant effect on the degree of abstraction that we deal with as a des@n evolves. As the 
archkduml components comprising a system are bundled into relevant subsystems, they be gin to provide 
fimctionality rdevant to the problem space. I he advent of information hkiing as a way to manage the 
complexity of these subsystems has caused us to build these subsystems as black boxes -e.g. components 
that we have no visibilty into, and whose fabrication may be done in a way different than what we would 
guess about its construction based upon our func­tional view of that component. White boxes are obvious. 
We can see into the inter­nals and can, as a consequence, predict the dynamic prop­erties which result 
from execution of the component, This is not the case for black box components. We have great difficulty 
guessing about performance of black boxes, and even more difficulty in guessing about com­bhations of 
black boxes and whether or not they are vi­able in combination. As a resul~ using black box com­ponents 
may require much more effort than expected from an understanding of just the external functiotilty of 
the component. The effort required to deploy a software architecture is therefore influenced by the complexity 
of the problem Wmg addressed and the degree of abstraction of that ar­chitecture, i.e., the degree of 
whiteness * or blackness of that archkcture. A black box architecture is more comp~ex than a monolithic 
white box archkcture in both its construction effort and use effort. If performance is an issue, then 
in order to predct the performance of the system containing the black box one must gain some understanding 
of its internal mechanisms. lMs ef­fort is required by a failure of our abslmction technolog~ we do not 
have a good mechanii to encapsulate side ef­fects or behavior effects of black boxes. We therefore have 
to go inside them and discover how they work, or to experiment with their use in order to predct perfor­mance 
of systems which contain them. The relationships of problem complexity, degree of ab­straction, and effort 
requin% to deploy 4 example point solution architectures me shown in figure 1. It is well understood 
that as the problem complexity goes up, the effort goes up. Less well understood is that as the ab­straction 
of the components goes up, the effort goes up. In addition, there is also anon-linear cross term increas­ing 
the required effort when they both go up. EI represents the effort required to implement a specific software 
solution. E2, E3, and Q represents the effort required to implement similar solutions differing in ei­ 
ther problem complexity (more complex), degree of ar­chitecture layering (more abstract), or both. E3 
illustrates M as expec~ deploying a point solu­tion using the same architecture as EI, but applied to 
a more complex probIem requires more effort. The more compleacthe problem the greater the degree of difficulty 
mapping the pmbkm to an architecture. E2 represents the effort requhed to deploy a point solu­tion addressing 
the same problem as El but mapped to a more abstract (and layered) arcidtecture. An increase in effort 
is due to an increase in archk.cture abstraction. Effort is also a function of the knowledge of the impl~ 
mentations and interconnections of archkcture compo­nents. Given the same problem space, the more layered 
(abstract) the architectural components, the greater the ef­fort m@red to deploy a solution. The degree 
of abstraction of architechmd components can be described in terms of white boxes and black boxes. The 
inner workings and behaviom of white box components are very visible and well understood. Interactions 
between white boxes are usually predicted with few unexpected side effects. The inner workings and behaviors 
of black box components are hidden tim the user. Interactions between black boxes are more difficult 
to predic~ and may result in surprising and un­desirable side effects. The presence of unexpected side 
effects between black box components is often the result of comWnent over-abstraction. Over-abstracting 
an ar­chitectural component can significantly increase the effort required to deploy that component in 
an archi­tecture, as well increase the risk in reusing that archi­tecture. Effort M&#38; Architecture 
Abstraction  m. mlCdratICqOkCdtOiIqlkEm@lC#hJaalfar lh88uw-aImddK4d bBubutwlllcamCx8 dlunaCC40fmdlkCUdmqmCa@. 
 m. lhedratrequkcdtoimphratapeiwaM.afaamaeampkxpmbfc4nlfmm$td Kbkca?dbyln,bulwahttlenlns-afmcbkcmdooulparus. 
 I M. 7beeffatre@edt0impkmauapoiatmhdcafakth*ma0am@rxpdkaa**lDa8dntmusc10f ad&#38;0uudcelnpm lhQthltuidlaKdty 
BL . A So f twmre Arch]tectu r q E4 shows thw as expectwX deploying an architecture addressing both 
a mom complex problem and using more layered architecture components than EI also m­quirea more effort. 
me difference m effort to layer an ~~, Wbik Sil?UdtWOUS&#38; in-g problem complexity is greater than 
the sum of the differences of the effort to &#38;ploy two different point arehitecturtw one difftxing 
in problem space and one diffkxing in ar­ emecture abstracliom (lU-El) > ( (E2-E1)+(E3-E1) ) Varying 
both the problem space and architecture gener-Wlty simuhaneously Nxults in an non-linear increase in 
the degree of diffkulty amdated with deploying an ar­ .. TECTURE~ ~­ ;domainspedtie arehitedum isusedtosolve 
arange of dated problems.~en museis SUCCeSSfd, tb= is a many-to-one mapping of the DSSA to the problem 
space within the domain. As shown in figure 2, what would have been a volume witbout DSSA becomes a plane 
since the same architecture is applied across the problem boundaries. The effort to produce a DSSA remains 
a function of three attributw architecture domain, problem domain, and experience (in both problem and 
architecture). fhe architectme and problem axes provide the coordinates to locate a potential solution 
in the archltectuwproblem plane. Effort represents the amount of work necessary to implement and successfully&#38;ploy 
that solution. The effort required to successfully deploy a DSSA is shown in Exidbit 1. fl models the 
effort attributable to problem space complexity and related experience in the problem space. Pe represents 
relevant experience in the problem space, and is usually embodied in form of problem domain expertsl; 
i.e., individuals with a detailed knowledge of the specified problem domain, but not necasan ly any detailed 
knowledge of how that problem will be solved architecturally. Aa shown by P , the problem space for a 
DSSA spans an interval of related problems and requires a broader moblem related knowkke across the interval 
bounded by (P2-PI). The witi-the interval, the more difll­ culty associated with deploying the amhitectme. 
Edm2T: .......... .. ,. %alml , :- : -t : . . , : \ s . : : , ; :*t : : : Care must be taken when defining 
the problem space for a DSSA to ensure that 1) all the problems con­tained within the problem space are 
related closely enough to be effectively implemented (i.e., the prob­lem space is not too large or general), 
and 2) all the problems contained within the problem space are con­sistent (i.e., they must not impose 
conflicting require­ments upon the architecture). As shown in figure 2, the minii case of a DSSA is a 
point solution. A point solution addresses a single problem, and the architectural components mapped 
to that problem are the simplest set required to generate a solution to that problem. A DSSA that solves 
a range of probIems forces us to examine generality. Examining generalhies involves analyzing differences 
and commonalties. Resolving the differences and commonalties requires a mo~ complex set of architec­tural 
components. Therefore, as the range of problems increases, the generality and complexity of the DSSA 
also incleases. Whemyou try to define an architecture general enough to solve two or more related problems, 
the complexity PI ~3 P2 Problem ~ Complexity *.::: *. .:** . : s : . ,.. -­ . . : . ** ** : s, .., 
-+*-:* : . . , . %981 , : --+ :- U. .. $ * ::.. .** . . $ . . . *:.*v­ : . . JJ . : .* *.-*­ . , 
: .* ~.* , *-: . .: . S*-:* , y** :.* ; : .=** , : ;- ----. .......... Arcbttecture Coutplexlty ure 
2, Domain S~ec ific Software Architectures? E = fl(p , PC)+ f2(A , AJ + f3(P , A , PAJ Whenx E= Effort 
required to deploy the architectme P = The complexity and range of problems the DSSA addresses. P can 
be expmsed ax P,+(P1-P2) whenx PI= Lower bound of the set of problems addresed by the architecture. 
P2= Upper bound of the set of problems addressedby the amhitecture. P,= T%ecomplexity of theproblem spaceaddressedfor 
a specific application of the DSSA. P~= P1when the DSSA addressesthe least complex problem in the problem 
interval. P,= Pz when the DSSA addresses the most complex problem in the interval. A representative intemnediate 
point in the interval (P1, P2 }mayalsobeused. (P2-P~)= The length of the problem space intema i.e., the 
range of problems the DSSA addmses. lldsisameasureof the generality of the problem spacq the wider the 
intervaL the more geneml the problem. P.= Related experience in the problem spacebounded by PI and P2 
A = ArcMecture complexity. A can be expressed as (~* AL ) where AC= Complexity of the architechual components 
AL= Degree of architectnm layering (abstraction) &#38;= Experience inthe architecture domain. PA= Related 
experience mapping the problem space to the architecture space. Exhibit 1. Effort Required To Deploy 
A Domain Specific Software Architecture. of the new architecture will be at least as complex as bnildersl; 
i.e., individuals having detailed knowledge the point solution for either problem, but will proba­of 
the implementations and interconnections of archi­ bly be more complex because of the generaMes. tecture 
components, but not necessarily any detailed knowledge of the problem space. fz models the effort attributable 
to architecture com­plexity and related experience in the architecture space. The complexity of the architecture 
space A for a given Ae represents related architecture experience, and is bSSA is a non-linear function 
of both architectural usually embodied in the form of infrastructure component complexity and degree 
of layering. A is the product of two factors: AC (the complexity of what s in the architecture, i.e., 
it s bulk ) and AL (the amount of architecture layering). General@ require­ ments usually cause the complexity 
of an arcMtecture, Ac. to increase. Ac and AL are not independent, however. As AC increases, more layering 
(i.e., ab­ straction) is introduced to manage that complexity, causing a related increase in AL. The 
more the inner workings of architcctnral components arc Eldden, the greater the risk that inter-component 
interactions will nxult in undesirable and unexpected side effects. fs models the effort attributable 
to mapping the archh tecture space to the problem space. In a point solution software architecture, there 
is a one-to-one mapping of architecture to problem. In a DSSA, however, there is a many-to-one problem 
space to architcctnre mapping. For all problems in the problem domain space, the problem properties must 
be consistent with the proper­ties of the architecture space. If all members of the problem space cannot 
be mapped to the architecture space for a DSS&#38; eithw the architecture or the prob­lem domain space 
must be modified. PAe represents related experience with mapping the ar­chiteuure to the problem space, 
and is usually embod­ied in application fabricators ; i.e., individuals who bridge the gap between the 
problem domain experts and the intiastructure builders. Experience in mapping any problem space to an 
architecture space will improve PAe.. The closer the architecture experience, the higher the PAe. Similar 
effects occur for the close­ness of the problem. More significant non-linear ef­fects occur when the 
combination of experience with closeness of problem and closeness of arcMecture ex­ist. As an example, 
when trying to build a telecomm system with MACH as a the framework, having built tekcomm systems would 
be a definite plus. UNIX ex­perience would also be a plus. Experience in both UNIX and telecomm would 
make the anticipated risk much smaller, and the anticipated cost much lower than either exprience thctor 
alone. The level of mapping experience required by the appli­cation fabricators in a DSSA is significantly 
greater than for a point solution. Interactions between the problem and architecture spaces of a DSSA 
increase non-linearly with the breadth of the problem space and the many-to-one mapping to the architecture. 
Successful application fabricators must not only have equivalent levels of expertise as infrastructure 
buildem, but must also possess sufficient problem domain ex­pertise to ensure a consistent and complementary 
prob­lem space mapping. Experience has already been recognized as an important factor in calculating 
the effort required to deploy an ar­chkecture, as shown by Boehm s COCOMO cost esti­mation mode12. COCOMO 
considers analyst s experi­ence, application experience, and language experience when estimating the 
effort to implement a software ar­chitecture. COCOMO also considers reusing existing software, but doesn 
t address the effort required to make a software implementation general. We are extending COCOMOS experience 
factors for the case when archi­tectural generalizations become dominant. REUSING A DOMAIN SPECIFIC ~ 
When reusing software architecture components, algo­rithm$ and methods are preserv~ but their impletnen­tations 
are customized for architectural context differ­ences. When the different components are combti in the 
new architecture, new behavioral side effects can occur. The prtilctability of possible side effects 
is an inverse function of the degree of abstraction of the ar­chitectural components being reused, and 
degree of the problem u)mplexity they are addressing. Reuse requires some degree of reimplementation. 
If the context differences between target environments are too great or if the architecture models and 
algorithms can­not be successfully ported, then the cost and difilculty of reusing a software architectme 
can easily exceed the cost and risk of a new custom implementation. The greater the differences between 
either the original and tafget problem spaces or architectures, the greater the amount of time (and risk) 
required to reuse the architec­ture. The presence of any unacceptable context changes (size, speedj too 
expensive, etc.) preclude reuse, and re­quires a dflcnmt custom awh&#38;xture, Existing systems are often 
expanded to solve an addi­tionrd set of problems within the bounds of their cur­rent architecture interval. 
As an example, consider a digi~ map display system. One type of reuse would be to add a new map projection 
type to the system (expanding the problem interval), but leave the system running with the same hardware 
and softsvam inf&#38;shuc­ture components. A different type of reuse would be to add the capability for 
a point and click user interface (expanding the architecture interval) while not adding any new functionality 
to the system. New architectures are developed whenever either cost and difficulty of extending an existing 
archkecture be comes too great. After a series of reuses, either the problem or architcctnre intervals 
will usurdly become too wide to be effectively reused further. Consider the example of computer memory. 
Early computer memory consisted of ferrite cores, which solved the problem of providing random access 
mem­ory (RAM). As memory size requirements increased (expanding the problem interval), the amount of 
physi­cal space and energy requhed for ferrite core RAM in­creased dramatically. If the RAM for a modem 
work­station were provided with ferrite coma, the wodcstation hardware would fill a large office buitding. 
In tlds case the cost of solving the expanding RAM problem inter­val with ferrite cores became too gr@ 
and a new phys­ical archkxture was required (i.e., solid state memory) that solved the ssme problem. 
EFINJNG THF AXES OF THE ARCHITECTURE The axesof the architecture model are not statiq they change over 
time. Yesterday s problems am, after solu­tion, today s architecture components. Items on the problem 
axis of the model are characterized by the statement how do I ub this? Items on the architecture axis 
am characterized by the statement how can I use this, now that I Imow how to do tids? An example of tids 
architecture model axis migmtion is the0S17 layer networking model. Previously, dis­t@bu@ networked computing 
was a signifkant prob­lem. One of the solutions to that problem was the 0S1 networking model. Today, 
distributed computing is no longer a primary problem. Inste@ d~tributed, networked computing using the 
components of the 0S1 model is now considered to be an urchitecrwe, rather than a problem. The migration 
horn the problem axis to the architec­ ture axis naturally results in the layered chamcteristics of modem 
software architectures. Modern architeuural components are typically complex, layered problem solutions, 
mthex than primary problem solutions. CONCLUSIONS Applying a DSSA really means customizing it to a new, 
related problem and incorporating it into a new context. The efficiency of reusing an architecture in 
a new problem specific context may or may not be more costly than a custom reimplementation because ofi 
1) differences in the problems, 2) differences between ar­chitectural contexts, 3).degree of problem 
complexity addressed by the original architecture, or 4) the levels (or lack or levels) of abstraction 
in the originat archi­tecture implementation. The key to developing or extending a DSSA is the specification 
of an appropriate problem interval. A DSSA problem interval is specified based upon experi­ence in that 
interval; i.e., the general case cannot be specified before complete solutions for several points $ in 
the problem interval have been obtained. The steps for spedfying a DSSA can be summarkd as follows 1) 
&#38;mate pointSOhltiOllS and point =Chik4?hUW for two or more related problems. 2) Define the problem 
interval, based upon the do­main knowledge gained instep 1. 3) Perform a commonality and differences 
analysis of the problems in the problem interval defined in step 2. 4) Specify anew, more general arcldteetnm. 
The new architecture should be the simplest one that meets the requirements of the problem interval specitied 
in step 3: Genera&#38; the mom geneml amhitecture. Perform layering to mitigate the complexity introduced 
by the mcmased generality. 4C) Perform an analysis to ensure if the new archi­tectme meets the requirements 
of the problem interval. If no6 repeat parts of step 4 as ap- W*. A DSSA that is highly abstracted carries 
a significantly higher risk to reuse than an architecture that allows mom insight into the workings of 
architectural compo­nents. Likewise, an architecture that addmawa simpler problems is easier to reuse 
because the bounds of the problemdomainarebetterundemtood.  BEFFR~NcFS kbaugh, R and (khard~ M., A 
Modem Development Proceax Experience Oained from 10PAZ pmj~ TRI-Ada Conference Pmceedm gs, November 16, 
1992. 2Boehm, B., Softwme Engineering Economics, Englewood Cliffs, Prentice-HalL 1981. *  
			