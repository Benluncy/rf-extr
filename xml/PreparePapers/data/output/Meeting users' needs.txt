
 Papers MEETING USERS NEEDS: CLOSING THE GAP BET WEEN SUPPORT AND DEVELOPMENT John B. Brandes Adjunct 
Professov Software Engineer Pace UniversiQ Sprint International 80 Broad Street New York, NY 10004 212-363-3700 
Fax: 212-344-2448 john.b.brandes@ sprint. sprint.com OVERVIEW We intend to present a pa~r on the issue 
of the application support function as an extension of the Software Quality Assurance process. The paper 
will focus on how to more effectively meet user needs by integrating user services during all phases 
of application develop­ment. It is intended for academic adminis~ators, user service, sup­po~ and technical 
managers. In order to fully support and troubleshoot users needs, User Ser­vices, must be included in 
the entire software development lifecy­cle. Knowledge of the development design, testing, and quality 
methodologies of a given application is essential in increasingly complex systems. The User Service Specialist, 
when confronted with an illusive technical aberration or non-standard use]r reques~ should be able to 
draw upon low level technical knowledge of the design and development history of a system to make reliable 
infer­ences as to program abilities in situations unforeseen during the development effort. Traditional 
user support is based upon training as to what a program does or does not do within a known reahn of 
user needs. Given the rapidly changing pace of technology, user needs can be quite differ­ent at time 
of release than they were at time of conception. New needs in such situations require that there be a 
more technically enlightened hand guiding users on the other end of the phone. The inclusion of the User 
Service Specialists as indicated above will both ensure this guidance and facilitate a more effective 
interface with the development staff when programming support is required. The software quality assurance 
process must be expanded to incor­porate all those involved in the software lifecycle; the systems ana­lyst 
programmer, and tester on one side, the end user on the other and the User Services Specialist as the 
link between the two. INTRODUCTION The maturation of applications development is most visible in an 
age where the coding of programs has become merely a part of the elaborate process now known as Software 
Engineering (!SE). The goal of SE is to define an integrated set of programs through higher Jean F Coppola 
Adjunct Professo~ University Microcotnputing Support Analyst Academic Computing Pace University School 
of Computer Science &#38; Inform~ion Systems 1 Pace Plqa 17th Floor New York,NY 10038 212-346-1388 Fax: 
212-346-1863 coppolati?pace vm.dac.pace. edu degrees of integrated technical management. The direct effect 
of this to implement and suppo~ for the long term, a particular soft­ware product that achieves realistic 
operational and user require­ments. Systems must meet various requirements; among them timing, usability, 
resource usage, reliability, and recoverability. All of these have a high impact on the user services 
function in their mandate to support the product in an operational environment. As such, since the maturity 
of the software product impacts User Ser­vices, it is only correct that User Semites should impact the 
birth of the product. There exists in software engineering various disciplines through which an organized 
development effort takes place. This process places different phases of responsibility with different 
depart­ments. There are three general tasks of SE which are most promi­nent to this paper. First, analysts 
evaluate user needs and transform those needs into a specific set of precise and organized require­ments. 
Second, programmers take these requirements and imple­ment them in theorem of programs, subroutines, 
and algorithms. Finally, testers evaluate code performance as measured against the original documented 
requirements for objective evidence of com­pliance. Disjoint from the above, however, it is left to User 
Ser­vices to ensure customer acceptability of the product. A given program at time of release may need 
to address a radically expanded set of needs than those which existed at time of software conception. 
It is at such a time the user calls for help, and for this reason that UserServices require involvement 
in the development process, from conception through release and beyond. Thus equipped with the global 
perspective conferred from total involve­ment in the software engineering effort, UserServices will possess 
the necessary technical background to address issues of increasing complexity. This shall be demonstrated 
in the course of the paper. There exists an assortment of software engineering lifestyle mod­els. Central 
to all, however, are the following disciplines: Requirements analysis.  Program design and coding. 
 Program verification  Figure 1 Graphically shows the interrelation of these functions, as linearly 
encountered and hierarchal structured. Problems encoun­ permi.mien to make digitabhani copy of part or 
all of this work for personal or classroom use is granted without fee provided that cop~es are nor made 
or distn buted forprqlt or commercial advantuge, the copyn~ht notice, the h tle of the publication and 
its akte appeac and notice is given that copying is by permimion of ACM, Inc. To copy oth.rwke, to republish 
$0post on servers, or to redistribute to lists, requires prior specific permission ardor a fee. @ 1995 
ACM ISBN # O-89791 -704 -9i95/WIO $3.50. Winning the Networking Game 59 Papers tered at any one particular 
phase during development are necessar­ily redressed back to the requirements phase, traced forward to 
the point of initial introduction to the system, to the correct point of problem resolution, and followed 
through to all subsequent phases and documentation as deemed necessary. All hierarchically infe­rior 
specifications are then updated to reflect agreed upon changes. The responsibility that an issue has 
been sufficiently evaluated and addressed, either in initial stages or as a result in re-engineering, 
is usually addressed with one depmttnent having prime responsibility and the others contributory. This 
system serves the field fairly well. As departments cooperate and openly discuss an issue, alternatives 
are spawned, pros and cons discussed and solutions derived. The user, however, is generally absent from 
the picture. His advocate, User Services, in most cases is excluded as well. While in some institutions 
User Services may often be consulted for their knowl­edge of userpattems and habits, their pmticipation 
is merely adhoc, thus effectively dismissing the real value of their experience. It is recommended that 
the value of User Services he amplified by their incorporation as a fully contributory member of the 
software engi­neering process. SOFTWARE ENGINEERING DISCIPLINES Requirements Analysts As the spear head 
for a new or enhanced software product Requirements Analysis (RA) is tasked as fol­ lows: To identify 
system functions. . To establish computer software relationships, (e.g., word size, memorysize, speed, 
110 requirements and program­ming languages). . To define computer interfaces with other programs. . 
To identify documentation to be developed (as required). System functions may be accurately identified, 
but could not UserServices derive a benefit from understanding the rationale for functioned division? 
As well, could not User Services better explain that functionality to the user in a way so as to make 
it more readily understandable to the user? Design with this reciprocal insight would in all probability 
lessen the reliance of the user for support. Timing, word and memory size, speed, etc. may well be defined, 
but are they realistic to the user s needs and projected needs? Could the user benefit from understanding 
why these parameters were selected? Computer program interfaces may be effective, but are they sufficiently 
versatile to allow for additional requirements, tutforeseen uses, and graceful recove~ when pushed to 
their limits as often occurs in real life as opposed to on paper. Necessary documentation may be identified, 
but will it be written to be understandable, concise, and have its information easily amessible? In short, 
will it be written so as to minimize the users reliance on User Services? The answers to these questions 
must necessarily be experienced in the real world. Hence, the need for the real life connection of User 
Services. When User Services is empowered to influence the Requirements Analysis function, time and effort 
is saved in all subsequent func­ tions. The programmer may experience less rewriting and the tester may 
derive a more meaningful test. Far from being a one way street in which all value flows toward the analysis 
function, User Services also reaps benefits from its early involvement that will be realized as fewer 
service calls and with faster response. Program Design and Coding A formal technical review of program 
requirements is necessary for design and implementation to begin. The design necessarily addresses the 
following concerns: Correlation of requirements to program functions Program functional flow. Algorithms 
and their efficiency. Database organization Coding being a low level concern (User Services should be 
associ­ated as being high level) User Services may provide limited input in this area (aside from a continued 
assurance of software viabil­ ity). TO be gained by UserServices, however, is intrinsic and invaluable 
low level technical knowledge of program flow. Thtts when a service call is received for an application 
or problem unforeseen at development time, the User Services Specialis~ hav­ing a background in development 
issues (i.e., functional division; program languag~ data types; interfaces and program relation­ships), 
may be able to make reliable inferences as to software abil­ities and restrictions in this new area. 
The user service specialist may thus be able to progress more reliably through the call for help, or 
at the very least be able to provide for a reliable and confi­dent shutdown and/or recovery Program Verification 
In this final development phase, a formal review of program func­tion is carried out as measured against 
the baseline documentation. The degree of formali~ will depend upon the volume and structure of documentation, 
and the strenuousness of tests. Test procedures must allow for verifying each allocated requirement in 
the reqttire­ments/performance specification for correct results as called out in the test specification. 
Personnel of all disciplines have heretofore been present at, and have contributed to, all meetings and 
reviews and have had sign-off authority commensurate with their degree of responsibility for that phase. 
And as we have seen above, the suc­cess of all subsequent efforts we keyed to the quality of informa­tion 
available during the preliminary and/or requirements phases. Program verification is no exception. We 
have demonstrated the benefit of User Services participation to the quality of the requirements process. 
As such it is only natural that the verification phase, which is so directly keyed to the requirements 
phase, should derive the same level of benefit. When the requirement calls for a specific task, User 
Services has the practictd knowledge as to whether the requirement is realistic or desirable for the 
target customer. In verifying the requirement, User Services again has the practical experience to advise 
on the effectiveness and robustness. or lack thereof, of the test. As much as the participatory value 
of User Services has been dem­onstrated in the preceding development phases, its most potent contribution 
may lay in this phase where all subsequent efforts ctd­tninate. A product maybe successfully written, 
marketed, and accepted by the user, while providing little real benefit, providing it has enough bells 
and whistles and complies with the follow­ing: Elicits a user friendly interface. Provides interoperability 
with external programs and vendors. Winning the Networking Game Papers Exhibits predicable functionality 
No software produc~ however, will be accepted if it fails to meet the above. User Services, having influenced 
the requirements and viability of the software, may now help ensore the fullness of the testing effort. 
Program Verification stands as the final safeguard as to program quality, and User Services as the logical 
determinant of qualitative level or degree. CONCLUSIONS In conclusion, at a time when increasingly complex 
software is composed of increasingly complex requirements, increasingly complex requirements, require 
increasingly strenuous methods of verification. Efforts to insure the highest degrees of performance 
and testing necessitate the participation of all involved patties. The wealth of practical experience 
embodied in the User Service func­ tion must be formally noted. This experience spans not only time (the 
life span of the product and its predecessors), but also the totality of the user base. As well, the 
value of this experience in a central repository, must be recognized as vital to successful future developments. 
User Services acts as central focus point for prob­lem resolution encountered from a myriad of diverse 
applications and customers. The benefits of utilizing such a repository are multi-faceted and complimentary 
to all the development disci­plines. To the development effort they are art improved product with greater 
user acceptance, while to the User Services function itself, the benefits are a decrease in problem calls 
and a decrease in response time. When management requires advice on products and resources they should 
seek all of their most experienced players. Winning tie Networking Game Papers Figure 1: SOFTWARE DEVELOPMENT 
LIFECYCLE BF: + System SystemRequirements Design Analysis Prototyping u I I II I Top Level Iterative 
I Design Loop I Mid Level I Design1 m@ i I ~  DOCUMENT: System Systems Prelim-Formal Source Object 
Test Specification, I Require-Specifi-inary Design Code Code Test Procedure I ments cations Top-Base- 
I 1 Level line I I / I erg I I VIEW: System System Prelim-Formal Code Test Test Require-Design inary 
Design Walk Readiness Results ments Review Design Review Through Review Review Review Review I I I Product/Operation 
SELINE: Functional All;cated Winning the Networking Game 
			