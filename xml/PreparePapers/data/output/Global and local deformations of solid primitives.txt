
 GLOBAL AND LOCAL DEFORMATIONS OF SOLID PRIMITIVES Man t7. Burr Computer Science Department t California 
Institute of Technology Pasadena, California Ab~r~t New hierarchical solid modeling operations are developed, 
which simulate twisting, bending, tapering, or similar transformations of geometric objects. The chief 
result is that the normal vector of an arbitrarily deformed smooth surface can be calculated directly 
from the surface normal vector of the undeformed sur- face and a transformation matrix. Deformations 
are easily combined in a hierarchical structure, creating complex objects from simpler ones. The position 
vec- tors and normal vectors in the simpler objects are used to calculate the position and normal vectors 
in the more complex forms; each level in the deforma- tion hierarchy requires an additional matrix multiply 
for the normal vector calculation. Deformations are important and highly intuitive operations which ease 
the control and rendering of large families of three- dimensional geometric shapes. KEYWORDS: Computational 
Geometry, Solid Modeling, Deformation Introduction Modeling hierarchies are a convenient and efficient 
way to represent geometric objects, allowing users to combine simpler graphical primitives and operators 
into more complex forms. The leaf-nodes in the hierarchy are the hardware/firmware commands on the equipment 
which draws the vectors, changes the colors of individual pixels, and operates on lists of line seg- 
ments or polygons. With the appropriate algorithms and interfaces, users can develop a strong intuitive 
feel- Permission to copy without fee all or part of this material is granted provided that thc copies 
arc not made or distributed for direct commercial advantage, the ACM copyright notice and the title of 
the publication and its date appear, and notice is given that copying is by permission of the Association 
for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. 
&#38;#169; 1984 ACM 0-89791-138-5/84/007/0021 $00.75 ing for the results of a manipulation, can think 
in terms of each operation, and are able to create the objects and scenes which they desire. In this 
paper, we introduce globally and locally defined deformations as new hierarchical operations for use 
in solid modeling. These operations extend the con- ventional operations of rotation, translation, Boolean 
union, intersection and difference. In section one, the transformation rules for tangent vectors and 
for nor- mal vectors are shown. In section two, several ex-amples of deformation functions are listed. 
A method is shown in section three to convert arbitrary local rep- resentations of deformations to global 
representations, for space curves and surfaces. Finally, in section four, applications of the methods 
to the rendering process are described, opening future research directions in ray-tracing algorithms. 
Appendix A contains a deriva- tion of the normal vector transformation rule. Deformations allow the user 
to treat a solid as if it were constructed from a special type of topological putty or clay, which may 
be bent, twisted, tapered, compressed, expanded, and otherwise transformed repeatedly into a final shape. 
They are highly intuitive and easily visualized operations which simulate some important manufacturing 
processes for fabricating ob- jects, such as the bending of bar stock and sheet me- tal. Deformations 
can be incorporated into traditional CAD/CAM solid modeling and surface patch methods, reducing the data 
storage requirements for simulating flexible geometric objects, such as objects made of me- tal, fabric 
or rubber. t Previous address, Raster Technologies Inc., N. Billerica, Mass. @SIGGRAPH'84 Although it 
is possible to use these techniques to accurately model the physical properties of different elastic 
materials with the partial differential equa-tions of elasticity and plasticity theory, simpler math- 
ematical deformation methods exist. These simpler methods have reduced computational needs, are widely 
applicable in modeling, and are described in the ex-amples section. It is beyond the scope of this paper 
to formulate the mathematical details of exact mechani- cal descriptions of physical deformation properties 
of materials. 1.0 Background and Derivations. A globally specified deformation of a three dimensional 
solid is a mathematical function F which explicitly modifies the global coordinates of points in space. 
Points in the undeformed solid are called (small) z, while points in the deformed solid are called (capital) 
X. Mathematically, this is represented by the equation X = F_(x_). [Equation 1.1a] The z, y, and z components 
of the three dimen- sional vector _x are designated Zl, z2, and z3. (For notational convenience, xl, 
z2, and x3 and x, y, and z are used interchangably. A similar convention holds for the upper case forms.) 
A locally specified deformation modifies the tangent space of the solid. Differential vectors in the 
substance of the solid are rotated and/or skewed; these vectors are integrated to obtain the global position. 
The differential vectors can be thought of as separate chain-links which can rotate and stretch; the 
local specification of the deformation is the rotation and skewing matrix function. The position of the 
end-link in the chain is the vector sum of the previous links, as shown in section three. Tangent vectors 
and normal vectors are the two most important vectors used in modeling -- the former for delineating 
and constructing the local geometry, and the latter for obtaining surface orientation and lighting information. 
Tangent and normal vectors on the undeformed surface may be transformed into the tangent and normal vectors 
on the deformed surface; the algebraic manipulations for the transformation rules involve a single multiplication 
by the Jacobian matrix J of the transformation function F. In this paper, the term "tangent transformation" 
substitutes for "contravariant transformation s and is the transfor- mation rule for the tangent vectors. 
The term "normal transformation s substitutes for "covariant transforma- tion" and is the transformation 
rule for the normal vectors. The Jacobian matrix J for the transformation function X ~ F__(_z) is a function 
of _z, and is calculated by taking partial derivatives of F F_ with respect to the coordinates Zl, z2, 
and as: O_F(~) J i(z-) --Ozi [Equation 1.1b] In other words, the i th column of J is obtained by the 
partial derivative of F(_z) with respect to zi. When the surface of an object is given by a parametric 
function of two variables u and v, x_-~ z_(u,v), [Equation 1.1el any tangent vector to the surface may 
be obtained from linear combinations of partial derivatives of _z with respect to u and v. The normal 
vector direction may be obtained from the cross product of two linearly independent surface tangent vectors. 
The tangent vector transformation rule is a restatement of the chain rule in multidimensional calculus. 
The new vector derivative is equal to the Jacobian matrix times the old derivative. In matrix form, this 
is expressed as: OX Oz ~u ~" J~u [Eq~:ation 1.2a] This is equivalent in component fcrm to: 3 Xi,u -~ 
E Jiyzj, u [Equations 1.2b] In other words, the new tangent vector OX/Ou is equal to the Jacobian matrix 
J times the old tangent vector Ox_/Ou The normal vector transformation rule in-volves the inverse transpose 
of the Jacobian matrix. A derivation of this result is found in Appendix A. [Equation 1.3] n (x) ~ det 
Jj-XTn(z) Of course, since only the direction of the normal vector is important, it is not necessary 
to compute the value of the determinant in practice, although it some- times is implicitly calculated 
as shown in Appendix A. As is well known from calculus, the determinant of the Jucobian is the local 
volume ratio at each point in the transformation, between the deformed region and the undeformed region. 
2.0 Examples of Deformations. Ezample ~.1: Scaling. One of the simplest defor- mations is a change in 
the length of the three global components parallel to the coordinate axes. This produces an orthogonal 
scaling operation : X~al Z Y = a2y [Equation 2.1a] ~ a3z The components of the Jacobian matrix are given 
by aXu Jff -~-Oz i ' SO J= [Equation 2.1b] The volume change of a region scaled by this transformation 
is obtained from the Jacobian deter- minant, which is axa2a~. The normal transformation matrix is the 
inverse transpose of the Jacobian matrix (optionally times the determinant of the Jacobian matrix), and 
is given by: det J j-IT = a 3  ('?Ca :) al a2 Without the factor of the determinant, the normal transformation 
matrix is: (1 :0 00) __j-1r = 1/a2 0 1~as To obtain the new normal vector at any point on the surface 
of an object subjected to this deformation, we multiply the original normal vector by either of the above 
normal transformation matrices. The new unit normal vector is easily obtained by dividing the output 
components by the magnitude of the vector. For instance, consider converting a point [Zl,Z2, Z3] T lying 
on a roughly spherical surface centered at the origin, with normal vector [nz, n2, ns] T. The transformed 
surface point on the resulting ellip- soidal shape is [al zz, a2 z2, as z3] r and the transformed normal 
vector is parallel to [nl/al,n2/a2,na/a3] T. The volume ratio between the shapes is ala2a3. The scaling 
transformation is a special case of general affine transformations, in which the Jacobian matrix is a 
constant matrix. Affine transformations i.~-- dude skewing, rotation, and scaling transformations. When 
the transformation consists of pure rotation, it is interesting to note that the inverse of the matrix 
is equal to its transpose. For pure rotation, this means that the tangent vector and the normal vector 
are transformed by a single matrix. For more general affine transformations, pairs of constant matrices 
are required. E=ample 2.2: Global Tapering along the Z Azis. Tapering is similar to scaling, by differentially 
changing the length of two global components without changing the length of the third. In figure 2.2, 
the function f(z) is a piecewise linear function which decreases as z in- creases (from page bottom to 
the top). The magnitude of the tapering rate progressively increases from figure 2.2 a through figure 
2.2 d. When the tapering function f(z) = 1 , the portion of the deformed object is un- changed; the object 
increases in size as a function of z when if(z) > 0, and decreases in size when if(z) < O. The object 
passes through a singularity at f(z) = 0 and becomes everted when f(z) < O. r -~-f(z), X = rx, [Equation 
2.2a] Y = ry, Z.=z The tangent transformation matrix is given by: J= r f' )yl [Equation 2.2b] 0 The local 
volumetric rate of expansion, from the determinant, is r 2. The normal transformation matrix is given 
by: --rft(z)x --rff(z)y r 2 The inverse transformation is given by: r(Z) = I(Z), z ~-~ X/r, [Equation 
2.2e] y -~ Y/r, z~Z Tronsfo rmotlon T~'~A~¢ Transformatio~ ....... "~ ] l Tronsformot;on TAPERS the 
reg;c~.n ] Tronsforrnotlon TAPERS the reg;on Figure 2.2 Progressive TApering of Ribbon Ezaraple ~.3: 
Global Azial Twists. For some ap- plications, it is useful to simulate global twisting of an object. 
A twist can be approximated as differential rotation, just as tapering is a differential scaling of the 
global basis vectors. We rotate one pair of global basis vectors as a function of height, without altering 
the third global basis vector. The deformation can be demonstrated by twisting a deck of cards, in which 
each card is rotated somewhat more than the card beneath it. The global twist around the z axis is produced 
by the following equations: O = f(z) Oo = cos(O) So = s~n(o) X = zCo -ySa, Y = zSo + yCe, [Equation 2.3a] 
Z=Z. The twist proceeds along the z axis at a rate of f(z) radians per unit length in the z direction. 
The tangent transformation matrix is given by Co -So --xSe ft(z) -yCo f (z) ~ J= Se Ca zCoft(z) ySof(z) 
-   o o 1 ) Note that the determinant of the Jacobian matrix is unity, so that the twisting transformation 
preserves the volume of the original solid. This is consistent with our "card-deck" model of twisting, 
since each individual card retains its original volume. The normal transformation matrix is given by: 
j_-IT = So Co --yft(z) --aft(z) Our original deck of cards is a rectangular solid, with orthogonal normal 
vectors. We can see from the above transformation matrix that the normal vectors to the twisted deck 
will generally tilt out of the z-y plane. Figures 2.3.1 a--d show the effect of a progressively increasing 
twist. In these line drawings of solids, vec- tors are hidden by the normal vector criterion--if the 
normal vector (as calculated by the above transforma- tion matrix) faces the viewer, the line is drawn, 
other- wise, the line segment is not drawn. Figure 2.3.3 shows an object which has been twisted and tapered, 
while figures 2.3.4 and 2.3.2 show the results from twisting an object around an axis not within the 
object itself. The inverse transformation is given by~ [Equation 2.3b] o = l(z), z = XCo + YSe, v = 
-x8o + YOo, z=Z which is basically a twist in the opposite direction. Figure 2.3.1 Progressive Twisting 
of a Ribbon %% %% Figure 2.3.2 Progressive Twisting of Two Primitives ! Figure 2.3.3 Twisting of a Tapered 
Primitive Figure 2.3.4 Tapering of a Twisted offset Primitive Ezaraple 2.~: Global Linear Ben&#38; along 
the Y-Azis. For other applications, it is useful to have a simple simulation of bending. The following 
equations represent an isotropie bend along a centerline parallel to the y-axis: the length of the centerline 
does not change during the bending process. The bending angle O, is constant at the extremities, but 
changes linearly in the central region. In the bent region, the bending rate k, measured in radians per 
unit length, is constant, and the differential basis vectors are simultaneously rotated and translated 
around the third local basis vector. Outside the bent region, the deformation consists of a rigid body 
rotation and translation. The range of the bending deformation is controlled by Y~in, and Y,~ax, with 
the bent region corresponding to values of y such that y,=i,<y<_y,~=. The axis of the bend is located 
along [s, yo, 1/k] T, where s is the parameter of the line. The center of the bend occurs at y ---- y0--i.e., 
where one would "put one's thumbs" to create the bend. The radius of curvature of the bend is 1/k. The 
bending angle 0 is given by:  o = k(# - yo), Co = cos(O), So = sin(O), where if y < y,,~, ~ = {Y?in, 
ifyrain<Y<yma, Y,=a=, if y> y,=== The formula for this type of bending along the y Computer Graphics 
Volume 18, Number 3 July 1984 axis centerline is given by the following relations: [Equation 2.4a] S~ 
 f-so(~-~) + ~0, y.~,._<y_<y.,==, r = (-s~(~-~) + yo + c,(y -y~.), . < ym,. I-So(~-~) + yo + co(y -y~..), 
y > v.... f(~o( z --i) ..}_1~ , Yrain ~__ Y ~__ Ymaz, z = icoCz ~) + i + so(y- y.,,.), ~ < ~... (c,(z 
1) + ~ + s0cy y...), ~ > ~..= These functions have continuous values at the boundaries of each of the 
three regions for y, and in the limit, for k ---- 0. However, there is a jump in the derivative of the 
bending angle 0 at the y ~ Ymi, and y ----ym~= boundaries. The discontinuities may be eliminated by using 
a smooth function for 0 as a function of y, but the transformation matrices would need to be re-derived. 
The tangent transformation matrix is given by:   (! 0 0) J coo -~z) = So(1 -- kz) Co where k, if~----y 
~:= 0, if~y.  The local rate of expansion, as obtained from the determinant, is 1 - kz. The normal transformation 
matrix is given by: (l _ kz)j_-lT Il -kz O 0 I _ -~--0 Co --S0(1 --kz) 0 So Co(1 -- kz) ] The inverse 
transformation is given by: [Equation 2.4b] o.,~ = k( v.~. -yo ) o.~. = k(y..~ -yo) o --- ~o, if o...~<o... 
/ z=X OSIGGRAPH'84 0 ~=~+~0 Y = -yo)Co + (z --~)so + t], ,9 = ~,,,,,, or y,,,.= f~- + ((r -v0) ~ + (z 
-~)~)'/~, y.,. < ~ < ~ z = (_(y _ yo)So + (~- ~)vo + ~, fl = w,,. or y,,,.. In figure 2.4.2, a constant 
90 ° bend is produced by wrying the range and the bend rate. In other words, k(ym~,~ --Ym~n) = ~/2 in 
each of the examples. In figure 2.4.3, a twisted object is subjected to a progres- sive bend to produce 
a Moebius band. Figures 2.4.4 a and b show a hierarchy of tapering, twisting, and bending, by superimposing 
a bend on the objects in figures 2.3.2 and 2.3.3. In figure 2.4.5, a chair is made from six primitives 
using seven bends. The details of the crimp in the coordinate systems is shown in figures 2.4.6 a-b. 
However, the type of bendiug shown in the figures does not retain all of the generality that true bending 
requires. Some materials are anisotropic and have an intrinsic "grain" or directionality in them. Although 
this is beyond the scope of this paper, it is interesting to note that the tangent and normal transformation 
rules may still be utilized. =o9 I Tronsformat;on BENDS the region 1 Tronsformat;on BENDS the reg;on 
Figure 2.4.2 Progressive Change in Bending Range of a Region o Figure 2.4.3 Moebius band is produced 
with a twist and ~ bend Figure 2.4.4 &#38; Bent, Twisted, Tapered Primitive Figure 2.4.1 Progressive 
Bending of a Region Figure 2.4.4 b Bent, Twisted Primitive Figure 2.4.5 Chair Model, with six primitives 
and seven bends. 3.0 Converting Local Representatlons to Global Representations. In this section, a 
method for generating more general shapes is addressed. The Jacobian matrix J(x) is assumed to be known 
as a function of xz, z2, and z3, but a closed form expression for the corresponc~- ing coordinate deformation 
function X = F(_z) is not known (i.e., in terms of standard mathematical func- tions). The basic method 
involves (1) the conversion of the undeformed input shape into its tangent vectors by differentiation, 
 (2) transforming the tangent vectors via the tan- gent transformation rule into the tangent vectors 
of the deformed object, and then (3) integrating the new tangent vectors to obtain the new position 
vectors of the deformed space curve, surface, or solid.  This "local-to-global" operation converts the 
local tangent vectors and Jacobian matrix into the global position vectors. The absolute position in 
space of the deformed object is defined within an arbitrary integra- tion constant vector. The above 
method provides a completely general description of deformation, and may be directly coupled to the output 
from the elasticity equations, finite element analysis, or other advanced mathe-matical models of deformable 
entities describing a profoundly general collection of shapes. The in-tegrations outlined above need 
not be calculated ex-plicitly in a ray-tracing environment: a multidimen-sional Newton's method can use 
the Jacobian matrix directly. 3.1 Transformatio~ of Space Curves. Given a space curve, parameterized 
by a single variable s,  z = z_(a), ao_<s<s a new curve X(s) is desired which is the deformed ver- sion 
of z(s). The Jacobian matrix J(s) or J(_z(s)) is assumed to be known, but the coordinate transforma- 
tion function X = E_(z_) is assumed to be unavailable. As stated above, the equation for X(s) may be 
derived from the fact that, (1) by definition, the position X(s) is a constant vector plus the integral 
of the derivative of the position, i.e.,   [Equation 3.]a] Figure 2.4.6 Details of the Bend near the 
Crimp x__(.) = + i" ~SIGGRAPH'84  (2) the derivative of the position is obtained via the tangent transformation 
rule, Equation 1.2 a, so [Equation 3.1hi KJ( xcs) = + where J(_x(s)) is the Jacobian matrix which depends 
upon the value of s, and x_l(s) is the arclength deriva- tive ( a tangent vector) of the input curve 
z_(s). At each point in the untransformed curve, x_(s), the tangent vectors xt(s) are rotated and skewed 
to a new orienta- tion in the transformed curve: the curve can be bent and twisted with or without being 
being stretched. For this case, any matrix function which allows the integral to be evaluated may serve 
as a Jacobian, since there is only one path along which to integrate. For inextensible bending and twisting 
transforma- tions of the space curve, with no stretching at any point of the curve, the Jacobian matrix 
J(s) must be a vary- ing rotation matrix function. (Even though this is not a cofistant afllne rotation, 
the matrix function for the tangent vector transformation rule is identical to that used for the normal 
vector transformation rule.) 3.£ TransIormations o] 3-D surfaces and solids. The representation of a 
transformed surface or solid can be obtained much in the same manner as a space curve. First, an origin 
O0 -is chosen in the object to be deformed. For each point z in the surface of the object, a piecewise 
smooth space curve is chosen, which connects the origin O to the input point x_. The space curve is then 
subjected to the deformation as in section 3.1. if J(_z) is in fact the Jacobian of some (unspecified) 
deformation function X___ = _F(x_), the transformation from x_ to X__ is unique: all smooth paths connecting 
O and z will be equivalent. Since the equation of the surface is given by _x ---- _x(u, v) , the space 
curve in the surface may be obtained by selecting two functions of a single variable, say s , for u and 
for v. i.e., u = u(s) = so that the space curve in the surface ~_(s) is obtained by substituting the 
values of u and v into the equation for x. This space curve is then transformed as shown above, in Equation 
3.1 b. The space curve should be piecewise differentiable, so that the derivatives can be evaluated and 
integrated. The equation for the deformed curve is [Equation 3.2.1] = + Expanding the above equation, 
using the fact that the symbol ' means d/ds, and using the multidimen- sional chain rule, we obtain = 
~ ~ ~ Oz , Ox_ ,^ ^ As stated before, for consistency, _J must be the Jacobian matrix of some global 
function F_(z), so that the results are independent of the path connecting O_ and x_, and so that the 
tangent and normal vec-tor transformation rules apply. The test for the "Jacobian-ness" of the matrix, 
(in the absence of a pre- specified deformation function F(_x)) depends on the partial derivatives of 
the columns of J(x) The columns must satisfy J. . ----J. . [Equation 3.2.2] --s~3 --3~t In other words, 
the partial derivative of the i th column of _J with respect to zy must be equal to the partial derivative 
of the 3 "th column of J with respect to zl. (The underlying principle to prove this result is a multiple-integration 
path consistency requirement. The integrand must be an exact differential.) The values of the Jacobian 
may be directly related to the material properties of the substance to be modeled, and may utilize the 
plasticity and elasticity equations. 4.0 Applications to Rendering To obtain a set of control points 
and normal vec- tors with which to create surface patches like polygons or spline patches, we sample 
the deformed surface parametrically, With the appropriate sampling, the patches can faithfully tesselate 
the desired object, with more detail where the surface is highly curved, and less detail where the surface 
is flat. First, the object is sampled with a raw grid of parametric u-v values. This raw parametric sampling 
of the surface is then refined using normal vector criteria, as calculated by the transformation rule: 
the surface is recursively subdivided when the adjacent normal vectors diverge too greatly. Dot products 
which are far enough from unity indicate that more recursive detail is necessary in that region. In 
this way, patch-oriented methods like depth- buffer and scan-line encoding schemes are effective. These 
algori.thms are linear in terms of the total sur-face area and total number of patches. The direct sub- 
divison approach is not as well-suited to ray tracing, since the total number of operations is quadratic 
in the number of ray comparisons and objects. The incident ray can be intersected with the deformed primitive 
analytically, to reduce the num-ber of objects. In addition, it is possible to use the inverse deformation 
to undeform the primitives and trace along the deformed rays. (See figures 4.1 and 4.2). This reduces 
the dimensi0nality of the parameter search from three to one, indicating a tremendous sav- ing in numerical 
complexity. The Jacobian techniques in this paper aid the traditional solution methods, to find roots 
of non-linear ray equations (in the context, of ray-tracing deformed objects), including the multidimensional 
Newton-Raphson method, the method of regula falsi, and the one-dimensional Newton's methods in N-space. 
(See [ACTON].) The analysis of rendering deformed primitives using these techniques is left to a future 
study. Figure 4.2 Undeformed primitive, in its undeformed coor- dinate system, showing path of ray Appendix 
A" Proof of the normal vector transformation rule. A short derivation in cross product and dot product 
style demonstrates the normal vector trans- formation rule. The surface of an undeformed object is given 
by a parametric function of two variables u and v,z_ -p- x(u, v). The goal is to discover an expression 
for the normal vector to the surface after it has been subjected to the deformation X__ -~- F(_z). We 
note that the inverse of an arbitrary three by three matrix _M_M may be obtained from the cross- products 
of pairs of its columns via:   [M_2 MI^M ] T = We start the derivation using the fact that the normal 
vector is the cross product of independent sur- face tangent vectors: OX OX [Equation B.I~ n-(x) ~-Ou 
A Ov The tangent vectors for X_(u, v) are expanded in terms of z(s, t). = Matrix multiplication is expanded, 
yielding n (X) ~---~zi,~, A zd,,, ) Figure 4.1 Deformed primitive, in undeformed space. 
			