
 Proceedings of the 1995 Winter Simulation Conference ed. C. Alexopoulos, h . Kang, W. R Lilegdon, and 
D. Goldsman SIMULATING POPULATION DEPENDENT PCS NETWORK MODELS USING TIME WARP Christopher D. Carothers 
Richard M. Fujimoto College of Computing Georgia Institute of Technology Atlanta, Georgia 30332, U.S.A. 
ABSTRACT The demand for mobile communications over the past few years has grown at a rapid pace. This 
demand has led to intensive research and development efforts for complex PCS (personal communication 
service) networks. Capacity planning and performance mod­eling is necessary to maintain a high quality 
of ser­vice to the mobile subscriber while minimizing cost to the PCS provider. A question of pragmatic 
inter­est concerns the modeling of subscriber or portable movement in a PCS network. Typically, portable 
movement models are based on a probabilistic distri­bution function with fixed mean. These models may 
be an over-simplification of real portable movement patterns. For example, portable movements during 
rush-hour traffic may be slowed due to traffic j ares. However, when the volume of vehicular traffic 
is less, portables are allowed to move more freely and with greater speed. To capture this type of portable 
move­ment behavior, we develop a population dependent PCS model where port able movement is based on 
the number of portables currently residing in that service area or celi. Because of the large amount 
of computation required to simulate PCS networks, we implement this model on a distributed Time Warp 
simulator, which has been shown to reduce the exe­cution time of a single run from 20 hours down to 3.5 
hours. Using this simulation model, we study the ef­fect of different call workloads and population depen­dent 
portable movement patterns on PCS blocking statistics and present our preliminary results. INTRODUCTION 
A personal communication service (PCS) network as described by Cox ( 1995) provides wireless communi­cation 
services for nomadic users. The service area of a PCS network is populated with a set of geograph­ ically 
distributed transmitters/receivers called radio Yi-Bing Lin Department of Computer Science and Information 
Engineering National Chiao Tung University Hsinchu, Taiwan, R.O .C. ports. A set of radio channels are 
assigned to each radio port, and the users in the coverage area (or cell for the radio port) can send 
and receive phone calls by using these radio channels. When a user moves from one cell to another during 
a phone call a hand­ ofj is said to occur. In this case the PCS network attempts to allocate a radio 
channel in the new cell to allow the phone call connection to COnthIUe. If all channels in the new cell 
are busy, then the phone call is forced to terminate. It is important to engineer the system so that 
the likelihood of forced termination is very low (e.g., less than l?ZO). Most PCS models fall into two 
types of models: portable-indiate (Lin and Mak 1993 and Wong 1993) or call-initiated (Chuang 1993 and 
Tekinary and Jab­bari 1992). The portable-initiated model is organized around two object types: cell 
and portable. The cell represents a cellular receiver/transmitter that has some fixed number of channels 
allocated to it. The portable represents a mobile phone unit that resides within the cell for a period 
of time and then moves to one of the four neighboring cells. As shown in Fig­ure 1, when a new call arrives 
at a cell, the cell first determines the status of the destination portable. If the destination portable 
is busy with another call, this call is counted as a busy line. A busy line occurs when a portable is 
currently connected in a phone call and another phone call arrives for that port able. If the portable 
is not busy, the cell determines chan­nel availability. If all channels are busy, the call is counted 
as a call block. If a channel is available, it is allocated for the destination portable s use and the 
call is allowed to connect. While a call is in progress, the portable tracks its location. When the portable 
determines it is moving out of the current cell s signal range, it drops the currently used chan­ nel, 
and requests a channel from the neighbor cell into which it is moving. If all channels from the neigh­boring 
destination cell are busy, this call counts as a hand-o~ block. If a channel is available, the call 555 
Carothers, Fujimoto, and Lin *- F&#38; m GOIII*Cdl S . Me 1 > l - N. F.5%L7 + Y- Figure 1: Portable-initiated 
model flowchart for call processing within a single cell. A Portable Arrival denotes a portable entering 
a cell s area. reconnects and continues without interruption. Now, where the portable-initiated model 
tracks the move­ment of portables even if they are not in conver­sations, the call-initiated model only 
simulates the behavior of a portable during phone conversations. Other functionalities in the call-initiated 
model are identical to the portable-initiated model. Typically, portable movement is modeled using a 
probabilistic distribution with some fixed mean ss done by Wong ( 1993). However, this model may over­simplify 
real portable movement patterns. Consider the following example: you are traveling to work in your car. 
Suddenly, the flow of traffic ahead of you comes to a halt and you find yourself in another morn­ing 
rush-hour traffic jam. Realizing you could be late for work, you pick up your PCS hand-set to call your 
boss only to hear a recorded voice say All channels are busy, please try again later . In this situation, 
a large number of portables have become struck in the same cell due to the traflic jam. Consequently, 
portable movement patterns have become dependent on the number of portables currently residing in the 
cell. To model this type of portable movement be­havior, we use the portable-initiated PCS model since 
it keeps track of all portable movements. To guarantee the simulation model has reached steady state 
and the network performance statistics are not hissed it has been shown that the number of cells in the 
network should be large (greater than 256) and amount of simulated time should be greater than 5 x 104 
simulated seconds (Carothers et al. 1994). To reduce the execution of these simulation models, we use 
a distributed simulator based on the Time Warp mechanism by Jefferson (1985). The remainder of the study 
focuses on the effect of varying call workloads and mobility patterns on PCS network performance. In 
Section 2 we briefly describe our distributed Time Warp implementation. Section 3 describes the PCS 
network performance re­sults and Section 4 presents conclusions of this study, and future work. 2 DISTRIBUTED 
TIME WARP The distributed simulator consists of a collection of logical processes or LPs, each modeling 
a dis­tinct component of the system being modeled. LPs communicate by exchanging timestamped event mes­sages. 
Like most existing distributed simulation pro­tocols, we assume different LPs may not share state variables 
that are modified during the simulation. The synchronization mechanism must ensure that each LP processes 
events in timestamp order in order to prevent events in the simulated future from af­fecting those in 
the past. The synchronization issue has been widely studied (e.g., see Fujimoto 1990 and 1992, Misra 
1986, Richter and Walrand 1989). The Time Warp mechanism uses a detection-and-recovery protocol to synchronize 
the computation. For a more detailed discussion of the Time Warp mechanism we refer the reader to I?ujimoto 
(1990) and Jefferson (1985). A version of Time Warp has been developed that executes on a collection 
of DEC 5000 workstations, Sun Spare workstations, SGI Indy workstations or a mixture of these machines. 
All performance results presented here were performed on DEC machines in­terconnected by an Ethernet. 
The Time Warp system is written in C++. A principal objective of this im­plementation is to enable efficient 
simulation of thou­sands of light weight LPs (i.e., processes that con­tain a small amount of state and 
perform little com­ putation in each event) in an object-oriented envi­ronment on networked, heterogeneous 
workstations. Here we will describe some of the user and kernel level features of the Time Warp system. 
LPs are implemented as C++ objects, and are re­ferred to as entities. Each LP (entity) consists of a 
state vector that stores the LP s private data, and a set of methods that define the allowable operations 
that can be performed on that data. Each method Simulating PCS corresponds to a type of event. It is 
anticipated that most simulations will contain far more entities than processors, so each processor will 
typically contain hundreds or thousands of en­tities (LPs). A priority queue data structure called the 
calendar queue by Brown (1988) is used in each processor to select the next entity to execute. The processor 
s scheduler always selects the entity con­taining the smallest timestamped event as the next one for 
execution. Each entity includes a linear list to hold the unprocessed events (method invocations) scheduled 
for that entity. To avoid unnecessary system overheads from malloc system calls and memory fragmentation, 
the Time Warp kernel allocates a single contiguous block of memory from which events and other internal 
data structures are allocated. Communications between processors is imple­mented using PVM 3.2 (Parallel 
Virtual Machine), a message passing system for heterogeneous collec­tions of networked computers (Geist 
1993). In ad­dition to PVM s default message routing, PVM will route messages directly between application 
processes by setting up a TCP/IP connection between each enrolled application, thus bypassing the PVM 
dae­ mons at both the sending and receiving host. In this mode, the sending process is not blocking, 
making PVM s direct routing mode an asynchronous commu­nications protocol. When routing messages in direct 
mode, the total time to deliver a message is in the range of 1.4 to 2.0 milliseconds on a Sun Spare-2. 
When executing our distributed Time Warp kernel, PVM is configured to directly route messages. PERFORMANCE 
RESULTS In this section we present performance data for the population dependent PCS simulation model. 
The definitions and notation that will be used throughout the remainder of this paper are as follows: 
 The portable residual times in a coverage area are based on a probabilistic distribution with the mean 
l/q multiplied by the number of portables that currently reside within that cell. The pop­ulation dependent 
portable residual time distin­guishes this PCS model from the PCS models discusses in our previous work. 
 The call holding time is exponentially distributed with mean l/,u = 180 seconds.  The call interarrival 
times to an individual portable are exponentially distributed with mean I/A.  Net work Models 557 The 
aggregate call load to a cell is meiwured in Erlangs. An Erlang is N x ~/p, where N is the average number 
of portables residing in that cell.  pf is the forced termination probability (the probability that 
a hand-off call is blocked).  POis the probability that a new call is blocked.  I%c is the total call 
blocking probability. This probability includes both new call blocks and hand-off calls that are forced 
to terminate. An incomplete call is either blocked as a new call or  it may make several successful 
hand-ofis before it is forced terminated. The speedup for this simulation model ranges be­tween 2.8 and 
7.8 using 8 DEC 5000 workstations (Carothers et al. 1994). Here, it was shown that speedup increases 
when (i) number of portables per cell increases, (ii) call interarrival time c[ecreases, and (iii) mobility 
(q) decreases. For a detailed per­formance analysis of the portable-initiated and call­initiated PCS 
models executing on a Time Warp sim­ulator, we refer the reader to Carothers et al. (1995). To determine 
the effect of varying call workloads and population dependent mobility patterns on PCS blocking statistics, 
we conducted a series of experi­ments where the call interarrival times and mobility distribution and 
mobility interarrival times were var­ ied. The number of channels per cell was fixed at 8. The initial 
number of portables assigned to each cell was also fixed at 25. Each experiment contained 1024 cells 
and ran for 2.5 x 105 simulated seconds to en­ sure that the output statistics where not biased. The 
results presented here represent over 330 runs of the distributed simulator. The mobility distribution 
is varied over a range of 5 different probabilistic distributions: (i) exponential, (ii) Pareto with 
a = 1.6, (iii) Pareto with a = 5.0, (iv) Pareto with a = 100.0 and (v) uniform. These distributions 
were chosen because they represent a wide range of statistical characteristics, such as the length of 
the tail and rate of decay. The exponential distribution is traditionally used to model portable movements 
and was originally suggested by Wong (1993).  To give the reader a feel for these distributions, Figures 
2 and 3 plot the inverse cumulative distribu­tion function against z values in the range of O to 1 for 
each distribution. The shape of the Pareto distri­bution, as shown in Figure 2, is controlled by the 
a parameter. When a is equal to 1.6 (Figure 2(a)), the variance of the Pareto distribution is infinite 
and has a very long tail. However, when a is equal to 5.0, the Figure 2: Inverse cumulative distribution 
function for Pareto with mean = 180.0 seconds for different values of a:-(a) a = 1.6, (b) a = 5.0, (c) 
a = 100.0. 00 0.2 0,4 0.6 0.8 1,0 00 02 0,4 0,6 06 10 (a) x, range [0,1] (c) x rsnge [0, 1] Figure 3: 
Inverse cumulative distribution functions as a function of z : range [O, 1], mean= 180.0. (a) exponential, 
(b) uniform. ++ Exp Exp . Par-1.6 . Par-1,6 &#38; Par-5.O &#38; Par-5.O $ Par-100.O $ Par-100.O # Uni 
# Uni ElU 0 0 t1I11 11 1 11 23456 23456 23456 (a) Load in Erlangs, Mobility Rate= 0.25 (b)Load in Erlangs, 
Mobility = 0.25 (c) Load in Erlangs, Mobilii = 0.25 Figure 4: Effect of exponential, Pareto, and uniform 
mobility distributions on blocking probabilities as a function of ~ in Erlangs. q = O.25P. (a) pf, forced 
termination probability y, (b) pO, new call blocking probability y, (c) pnc, total call blocking probability. 
Simulating PCS variance has become finite and the tail has shrunk. Finally, for a equal to 100.0, there 
is almost no vari­ance and the distribution has become, for the most part, deterministic about the mean. 
Another impor­tant aspect about the Pareto distribution is that it never decays to O. However, as shown 
in Figure 3, both the exponential and uniform distributions de­cay to O and have short tails. Figure 
4 shows effect of load on PCS blocking statistics for each of the different mobility distribu­tions. 
q is fixed at 0.25p. It is observed that the Pareto distribution family consistently yields slightly 
higher pf, p. and pnc statistics, than the uniform or exponential and the uniform distribution yields 
slightly higher blocking statistics than the exponen­tial. Figure 5 is the same as the previous figure, 
ex­cept that q is equal to 2.50p. Here, we observe a completely different behavior than that in Figure 
4. The Pareto distribution with a equal to 5.00 or 100.0 yields pf statistics that are twice those produced 
by the exponential and pO and p.= statistics that are al­most three times the exponential statistics. 
Also, it is observed that the uniform blocking statistics are significant ly higher than the exponential, 
which was not observed in the previous figure. We believe the higher blocking statistics produced by 
the Pareto and uniform distributions in the above figures is due to the distributions causing more K-ary 
hand-offs that not only result in more force termina­tions, but become correlated with the newly arriving 
calls, resulting in a significant increase the new call blocking probability, pO. However, more investigation 
is needed to fully understand this phenomenon. Figure 6 is the same as the previous two figures, except 
that q is equal to 10.00p. Unlike the first two figures, we see that the blocking statistics do not vary 
with respect to the mobility distribution. Also, all blocking statistics have decreased by an order of 
magnitude over the previous two figures. To shed light on how the mobility rate effects the PCS blocking 
statistics across different mobility dis­tributions, the PCS blocking statistics for each mobil­ity distribution 
is shown as a function of q for differ­ent call workloads in Figures 7-9. It is observed from these figures 
that initially as q increases, the block­ing statistics for all the distributions increase (some more 
than others). However, when q is 2.00p, the blocking statistics are starting to decrease. We also observe 
that the variance in blocking statistics for the different mobility distributions ceases for q > 5.00p. 
This trend appears across different call workloads (A equal to 1.25, 3.75 and 6.25 Erlangs). We believe 
the initial increase in blocking statistics as q increases is Net work Models due to (i) an increase 
in K-ary hand-offs and (ii) these hand-off being correlated with the arrival of new calls so that many 
of these new calls are blocked and the hand-offs are forced to terminate. However, as q con­tinues in 
increase this correlation ceases and the high mobility rate actually helps to stabilize tlhe system by 
allowing portables to move to less busy cells with the result being that new arriving calls are able 
to connect. 4 CONCLUSIONS In this paper we present a model for simulating large­ scale PCS networks that 
takes into account popula­ tion dependent mobility patterns. We reduce the wall clock execution time 
of this computationally intensive simulation model without compromising the statis­ tical integrity of 
the model by using a Time Warp distributed simulator. The distributed simulator has been shown to reduce 
the execution time of PCS sim­ ulations from 20 hours down to 3.5 hours. Using this distributed simulator, 
we study the effect of differ­ ent population dependent mobility patterns and call workloads on PCS network 
performance. To generate different mobility patterns, the mobility distribution function was varied across 
5 different-probability dis­ tributions: (i) exponential, (ii) Pareto with a equal to 1.6, (iii) Pareto 
with a equal to 5.0, (iv) Pareto with a equal to 100.0 and (v) uniform. From this preliminary study, 
the primary results are: The Pareto distribution for medium mobility rates (0.75p < q < 2 .50~) appears 
to yield sig­nificantly higher PCS blocking statistics than the exponential, especially when the Pareto 
distribu­tion is deterministic (CI = 100.0). For high mobility rates (q > 5. O,U), PCS blocking statistics 
appears to decrease. However, because only a few higher mobility rates are covered in this study (q = 
5.Op, 10.Op, and 15.Op), it is pos­sible that PCS blocking statistics cycle up and down as the mobility 
is increased. Further study is needed. Finally, areas such as hand-off strategies, dynamic channel assignment, 
and wireless packet switching can be investigated by extending the simulation model presented here. These 
are topics of future work. REFERENCES Brown., R. 1988. Calendar Queues: A Fast O(1) Priority Queue Implementation 
for the Simulation Carothers, Fujimoto, and Lin +++ =P EXP EXP :. . Par-1,6 . Par.1 6 . Pm-1 ,6 o &#38; 
Par-5,0 &#38; Par-50 A Par.50 $ Par-1 CO.o $ Par-lCQ.0 S Par.lCO.0 # Unl * Uni * Unl m 0 -ElEl3 0 8­. 
 a. . ~. 0 0. \ . ,,rr, ,, I 234s6 23456 23456 (a) Load In Eflangs, MobMy Rate = 2,50 (b)lcmd m Edang.s, 
Mobiii. 2.5o (c) Load in Erlrmga, Moblll&#38;. 2.50 Figure 5: Effect of exponential, Pareto, and uniform 
mobility distributions on blocking probabilities as a function -. of A in Erlangs. q = 2.50p. (a) pf, 
forced termination probability, (b) PO, new call blocking probability, (c) p~~, total call blocking probability. 
+&#38; +E%P . Par-1 ,6 . Par-1 .6 &#38; Pw5.O h Par.5,0 $ Par-1010 $ Par-lcxl.o # Uni # Uni ElEl g, 
1) r#i,1 ,,aI, 23 456 23456 23456 (a) Load in Eflangs, McbWy Flab = 10.WJ (b)Load tn Erlanw, Mc41bty. 
10.w (c) Load 1 Ertmgs, Mcbiltj = 10.CQ Figure 6: Effect of exponential, Pareto, and uniform mobility 
distributions on blocking probabilities as a function of ~ in Erlangs. ~ = 10.00p. (a) pf, forced termination 
probability y, (b) PO, new call blocking probability y, (c) p~~, total call blocking probability. ~P 
fiP ++..-P . Par-1 ,6 Par-l .6 Par-l.6 &#38; Pa,-5.o &#38; Par-50 h Par-5,0 $ Par-100.0 $ Par-102.o $ 
Par-160,0 # Uni # Uni # u , E + c1 0 (a) wbi~i 5 10 Rate. Load= 1.25 Ethngs 15 [ 5 10 (b) h40b,lttj 
Rate, Lead= 1,25 Erla g, 15 0 5 10 (C) MobMy Rate, Lead= 1,25 Erta gs 15 Figure 7: Effect of exponential, 
of q. A = 1.25 Erlangs. (a) pf, call blocking probability. Pareto, forced and uniform termination mobility 
probability, distributions (b) pO, new on call blocking blocking probabilities probability, as (c) a 
function pnc, total Simulating PCS Net work Models ++ EXP EXP .. Par-1.6 Par-1.6 &#38; Par-5.O &#38; 
Par-5.O $ Par-100.O $ Par-100.O # Uni # Uni ---1L 1, . 0 5 10 15o 510150 5 10 15 (a) Mobility Rate, 
Load = 3.75 Erlangs (b) Mobility Rate, Load = 3.75 Erlanga (c) Mobility Rate, Load = 3.75 Erlanga Figure 
8: Effect of exponential, Pareto, and uniform mobility distributions on blocking probabilities aa a function 
of q. A = 3.75 Erlangs. (a) pj, forced termination probability y, (b) PO,new call blocking probability, 
(C)IP~C,total call blocking probability. EXP . Par-1.6 &#38; Par-5,0 +m$Par-100.O R EXP A\+ # Uni I-J 
0 ~ I 111 0510150 510150 51015 (a) Mobility Rate, Load = 6.25 Erlanga (b) Mobility Rata, Load =6.25 Erlanga 
(c) Mobility Rate, Load = 6.25 Erlangs Figure 9: Effect of exponential, Pareto, and uniform mobility 
distributions on blocking probabilities as a function of q. A = 6.25 Erlangs. (a) Pf, forced termination 
probabiW, (b) PO,new call blocking probability, (c) ?kc 1 total call blocking probability. . .562 Carothers, 
Event Set Problem. Communications of the ACM, 31(10), pp. 1220 1227, October. Carothers, C., Fujimoto, 
R. M., and Lin, Y.-B. 1995. A Case Study in Simulating PCS Networks Using Time Warp. In Proceedings of 
the 9th Workshop on Parallel and Distributed Simulation, pp. 87 94, June. Carothers, C., Fujimoto, R. 
M., Lin, Y.-B., and Eng­land, P. 1994. Distributed Simulation of PCS Net­works Using Time Warp. Proceedings 
of the Inter­national Workshop on Modeling, Analysis and Sim­ulation of Computer and Telecommunication 
Sys­tems, pp. 2 7, Feburary. Chuang, J. C-I. 1993. Performance Issues and Algo­rithms for Dynamic Channel 
Assignment. IEEE Journal on Selected Areas in Communications, 11(6), pp. 955 963, August. Cox, D. C. 
1995. Wireless Personal Communications: What 1s It? IEEE Personal Communications, pp. 20-35, April. Fujimoto, 
R. M. 1990. Parallel Discrete Event Sim­ulation. Communications of the ACM, 33(10), pp. 30-53, October. 
Fujimoto, R. M. and Nicol, D. M. 1992. State of the Art in Parallel Simulation. Proceedings of the 199,2 
Winter Simulation Conference, pp. 122-127, December. Geist, A., et al. 1993. PVM 3 User s Guide and Reference 
Manual. Technical Report TM-12187, Oak Ridge National Laboratory, May. Jefferson, D. R. 1985. Virtual 
Time. ACM TOPLAS, 7(3), pp. 404-425, July. Lin, Y.-B., and Mak, V.K. 1993. On Simulating a Large-Scale 
Personal Communications Services Network. To appear in ACM Transactions on Mod­eling and Computer Simulation. 
Misra, J. 1986. Distributed-Discrete Event Simula­tion. ACM Computing Surveys, 18(1), pp. 39-65, March. 
Richter, R. and Walrand, J. C. 1989. Distributed Simulation of Discrete Event Systems. Proceedings of 
the IEEE, 77(l), pp. 99 113, January. Tekinary, S., and Jabbari, B. 1992. A Measurement Based Prioritization 
Scheme for Handovers in Cel­lular and Microcellular Networks. IEEE Journal on Selected Areas in Communications, 
10(1), pp. 1343 1350, October. Wong, W. C. 1993. Packet Reservation Multiple Ac­cess in a Metropolitan 
Microcellular Radio Envi­ronment. IEEE Journal on Selected Areas in Com­munications, 11(6), pp. 918 925, 
August. Fujirnoto, and Lin AUTHOR BIOGRAPHIES CHRISTOPHER CAROTHERS is a Ph.D. stu­ dent in the College 
of Computing at the Georgia In­ stitute of Technology. He received a BS degree in Computer Science (1991) 
from the Georgia Institute of Technology in Atlanta, Georgia. His research inter­ ests include parallel 
and distributed simulation and the performance modeling of personal communica­ tions services networks. 
RICHARD FUJIMOTO is a professor in the Col­lege of Computing at the Georgia Institute of Tech­nology. 
He received BS degrees in Computer Science (1977) and Computer Engineering (1978) from the University 
of Illinois in Urbana-Champaign, and MS (1980) and Ph.D. (1983) degrees from the Univer­sity of California 
in Berkeley. He has been actively engaged in research in parallel and distributed sim­ulation since 1986. 
He is currently an area-editor for ACM TRANSACTIONS ON MODELING AND COMPUTER SIMULATION, and chairs the 
steering committee for the annual WORKSHOP ON PARAL-LEL AND DISTRIBUTED SIMULATION (PADS) . YI-BING LIN 
received his BSEE degree from Na­tional Cheng Kung University in 1983, and his Ph.D. degree in Computer 
Science from the University of Washington in 1990. Between 1990 and 1995, he was with the Applied Research 
Area at Bell Com­munications Research (Bellcore), Morristown, NJ. In 1995, he was appointed full professor 
of Depart­ment and Institute of Computer Science and Infor­mation Engineering, National Chiao Tung Univer­sity. 
His current research interests include design and analysis of personal communications services net­works, 
distributed simulation, and performance mod­eling. He is a subject area editor of the JOURNAL OF PARALLEL 
AND DISTRIBUTED COMPUT-ING, an associate editor of the INTERNATIONAL JOURNAL IN COMPUTER SIMULATION, 
an as­sociate editor of SIMULATION magazine, a member of the editorial board of INTERNATIONAL JOUR-NAL 
OF COMMUNICATIONS, a member of the ed­itorial board of COMPUTER SIMULATIC)N MOD-ELING AND ANALYSIS, Program 
Chair for the 8th WORKSHOP ON DISTRIBUTED AND PAR-ALLEL SIMULATION, and General Chair for the 9th WORKSHOP 
ON DISTRIBUTED AND PAR-ALLEL SIMULATION. 
			