
 AUTOMATIC PARTITIONING OF UNSTRUCTURED GRIDS INTO CONNECTED COMPONENTS Leonardo Dagum Computer Sciences 
Corporation NASA Ames Research Center Moffett Field, CA 94035-1000 Abstract This paper presents two 
partitioning schemes that guarantee connected components given a connected initial grid. Connected components 
are import ant for convergence of methods such as domain decomposi­tion or mrdtigrid. For many of the 
grids tested, the schemes produce partitions as good (in terms of n um­ber of cut edges) or better than 
spectral partition­ing and require only modest computational resources. This paper describes the two 
schemes in detail and presents comparison results from a number of t wo and three dimensional unstructured 
grids. Introduction Automatic partitioning of unstructured grids is im­portant to many problems in computer 
science and numerical analysis. The partitioning problem arises naturally from trying to solve, on multiprocessor 
ar­chitectures, large scale computational problems based on unstructured computational domains. Mapping 
such problems onto a multiprocessor generally re­quires partitioning the computational domain into a 
number of subdomains and assigning these subdo­mains to the different processors. The increased at­tention 
recently given to multiprocessor architectures has sparked greater interest in the partitioning prob­lem, 
and a number of different algorithms have been investigated. Algorithms motivated by the physics un­ 
derlying the computational problem include simulated annealing as used by Williams [13] and Nour-Omid, 
Raesfky and Lyzenga [7]; and a greedy algorithm used by Farhat [2]. Algorithms based on geometric con­siderations 
include straight coordinate bisection, dis­cussed by Simon [9]; a coordinate bisection type al­gorithm 
but employing the principal axes of inertia 1Employee of Computer Sciences Corp, Work sponsored un­der 
NASA contract NAS-2-1 2961 01993 ACM 0-8186-4340-4/93/0011 $1.50 for bisection directions used by Farhat 
and Lesoinne [3]; and stereoscopic projection investigated by Teng [10]. Graph based algorithms include 
a graph bi­section scheme employing rooted level structures and a Kerninghan-Lin algorithm problems by 
Vaughan [11]; proposed by Pothen, Simon developed by Simon [9] and A primary consideration [6] applied 
to structures and spectral partitioning and Lieu [8] and further Barnard and Simon[l]. in evaluating 
the various partitioning schemes is the number of cut edges result­ing from the partitioning. These are 
the edges of the original graph which are connecting the different sub­graphs induced by the partitioning. 
One would like to choose a partitioning that minimizes the amount of communication between processors, 
and a first or­der approximation of the communication cost is given by the cursive amongst partitions 
damental is that number of cut edges in a partition [12]. Re­spectral partitioning is perhaps most notable 
the many schemes for consistently yielding with low numbers of cut edges [9]. A fun­drawback of spectral 
partitioning, however, it does not guarantee connected components. Disconnected components are undesirable 
in various numerical techniques which make use of partitioning. In particular, multigrid methods require 
connectivity between points in a coarse grid and the associated chil­dren in the finer grid. Also, domain 
decomposition methods will converge faster with connected subdo­mains than with disconnected sub domains 
[3]. Fur­ thermore, on a parallel nected components usually of neighbors and therefore sages bet ween 
processors. cost is also a function of or distributed system, con­lead to a smaller number of a smaller 
number of mes-Since the communication the number of neighboring subdomains, this also can be an important 
metric in evaluating the effectiveness of a partitioning. These advantages of connected subdomains has 
been the mo­ tivating factor in the development of the two bisection schemes based on spanning trees 
described in this pa- Permission to copy wiIhOut fee all m pm of this materiaf )s granted, pmvi&#38;f 
that the copies are not made or dismbuted for direct commercial advantage, tie ACM copyright rmdce and 
the t,tle of the ~blication and is dale appear, and notice IS given hat copying IS by pwmission of the 
 94 Assomation for Com@ng MachineT. To copy ciherwise, M to republisb. requires a fee andlor s@Ic permission. 
 per. The remainder of this paper is organized as follows. Section 2 gives a formal description of the 
partition­ing problem using graph theoretical notation. Section 3 describes a single spanning tree graph 
bisection algo­rithm, Section 4 describes a dual spanning tree graph bisection algorithm similar to the 
rooted level struc­tures algorithm described by Vaughan [11]. Section 5 provides a quantitative comparison 
of the two algo­ rithms with recursive spectral partitioning as imple­ mented by Barnard and Simon in 
[1]. Finally, section 6 will present conclusions from this work. The Partitioning Problelm The partitioning 
algorithms presented in this pa­per, as with spectral partitioning, are recursive. That is, the computational 
domain is first divided into two subdomains by some method, and the same method is then applied to each 
subdomain such that in k ap­plications one gets p = 2k subdomains, or partitions. Therefore, for the 
purposes of this paper, the parti­tioning problem is defined in terms of the graph bi­section problem. 
The graph bisection problem can be stated as follows: Given an undirected graph, G, with the set of vertices 
V and the set of edges E, such that G = (V, E), partition V into two subsets VI and VZ where V = VIUV2 
and VInV2= V, such that the size of the cut set, IEC1, defined as lE~l ={ele EE; e= (vi, v2); v1 6 vl; 
v2 c vz} (1) is minimized subject to some constraint on the par­tition. In general, the constraint applied 
is for the two partitions be approximately equal in size, that is, IIVII -IVZII < c[V[ where c <1. However, 
the re­quirement for connected components adds a further constraint, namely that 1<. (Gl) ~ 1 and Ku 
(Gz) > 1, where 1{. (G) is the minimum number of vertices whose removal will disconnect G and G1 = (Vl, 
El) and G2 = (V2, E2). It is worth noting that recursive partitioning schemes based on graph bisection 
are by definition greedy, in the sense that all such schemes strive for an optimal partition on every 
bisection. It is not nec­essary, however, to go through a series of optimal bi­sections in order to ultimately 
produce an optimal par­ titioning. Furthermore, recursive bisection is not the only approach to partitioning; 
many of the algorithms mentioned in section 1 are based on bottom-up ap­proaches for which the problem 
definition above does not apply. Finally, it should be noted that for prov­ably optimal solutions, the 
graph bisection problem requires exponential work. Recursive Single Tree Bisection (STB) The idea behind 
recursive single tree bisection (STB) is to build a spanning tree of the graph, then bisect the graph 
by removing a single branch from the tree. By definition, a graph is connected if it can be spanned by 
a single tree. It is clear that the removal of a single branch will disconnect the tree into exactly 
two subtrees, and since nodes in the tree correspond uniquely to vertices in the graph this approach 
guar­antees two connected subgraphs (assuming an initially connected graph). This approach does not, 
however, guarantee that each component is equal in size nor does it guarantee an optimal bisection. These 
re­quirements can be met to some degree through an ap­propriate choice of root node and/or type of spanning 
tree. There are many different, types of spanning trees but of particular importance are breadth first 
and depth first spanning trees (algorithms for their con­struction may be found in any elementary graph 
the­ory textbook, cf. Gibbons [4] ). A breadth first span­ning tree is built by visiting all the vertices 
in the graph with a breadth first search. This proceeds by visiting first all the vertices directly connected 
to the root, and then in turn visiting all the vertices directly connected to the vertices directly connected 
to the root (that have not already been visited), and so on. As a result the nodes in the tree get organized 
in levels of increasing distance from the root. In other words, level i of the tree will include all 
the vertices in the graph that are a minimum distance i from the root node. Breadth first trees tend 
to maximize branching and span the graph in a minimum number of levels. A depth first spanning tree, 
on the other hand, is built by visiting all the vertices in the graph with a depth first search. This 
proceeds by visiting the first vertex directly connected to the root, and then visit­ing the first vertex 
directly connected to that vertex (that has not already been visited), and soon until no directly connected 
unvisited vertex can be found. At this point the search goes back up the tree trying to restart at each 
node. The search ends when it reaches the root and cannot find a directly connected unvis­ited vertex. 
The resulting trees tend to have a very large number of levels and very little branching. Both breadth 
first and depth first trees can be built in linear time (i.e. they have complexity O(max(lV[, [El)). 
Intuitively one expects that a breadth first tree will be most effective in terms of minimizing the number 
of edge cuts since it arranges the vertices of the graph by proximity to the root. This arrangement persists, 
to some extent, when the tree is bisected. Not all such trees, however, will bisect well (i.e. split 
into two sub­ trees of approximately equal size) through removal of a single branch because of the high 
degree of branching and small number of levels. This becomes especially true for smaller trees wit h 
very few levels. Therefore for smaller graphs it often becomes necessary to use a depth first spanning 
tree in order to obtain an even bisection. The basic bisection algorithm proceeds as follows: Single 
Tree Bisection (STB) 1. Pick root vertex. 2. Build breadth first spanning tree. 3. Compute weight for 
each node in the tree. 4. Find branch which comes closest to splitting the tree. 5. Split the tree 
(bisect the graph). 6. Determine size of partitions and number of cut edges in the graph.  In the simplest 
case, the weight of a node refers simply to the number of nodes (inclusive) below it. This corresponds 
to vertices in the graph all having uniform weight. Sometimes, however, vertices in the graph may have 
some variable weight associated with them (e.g. computational cost). In such instances the (weight of 
a node is the total weight of the vertices associated with the nodes (inclusive) below it. The best bisection 
which can be produced by this algorithm may always be found by trying all the ver­tices in the graph 
as a root. In practice this is slow and unnecessary. Consider that for a bisection to be useful, the 
tree must be evenly divisible to some acceptable tolerance (the test cases presented in section 5 used 
~ = 0.005). Most of the vertices in a typical graph will not produce even bisections. Furthermore, those 
vertices that do give even bisections tend to appear in clusters. These observations lead to the following 
heuristic algorithm for picking root vertices: Picking Root Vertices for STB 1. Find two vertices on 
a pseudo-diameter of the graph. 2. Build a breadth first tree from one of the vertices in step 1.  
3. Select every (IV I/ logz IVl)~h node from this tree in order to create a list of logs ]V I starting 
roots. 4. For each starting root in the list do: (a) Execute STB with current root. (b) If the bisection 
is even (to some tolerance), mark root as good . (c) Pick next root with breadth first search around 
last good root. (d) Repeat until log2 IVI good roots are found without improvement in the current mini­mum 
number of cut edges.   The first step in this algorithm is carried out with a simple but effective 
heuristic algorithm due Gibbs et al [5] and outlined below. Finding Vertices on Pseudo-diameter 1. Pick 
any vertex in the graph as current root. 2. Build breadth first spanning tree with current root. 3. 
Determine distance to furthest vertex from root and select this vertex as current root. 4. Repeat steps 
2 and 3 until there is no increase in distance.  The algorithm for picking roots strives to accom­plish 
several things. It divicles the graph into logz lV\ regions and uses locality to improve the hit ratio 
for finding even bisections in each region. Furthermore, it limits the search for the best (i.e. minimum 
number of cut edges) even bisection by stopping the search within a region if no better bisection is 
found after some number of hits. Note that there is nothing spe­cial about logz IV I other than that 
it makes a reason­able bound on the number of regions to search. Also, rather than use a spanning tree 
to create regions, a maximal independent set of vertices could have been used. Recursive Dual Tree Bisection 
(DTB) Breadth first search visits the vertices in a graph in a manner analogous to a wave front propagating 
from the root. The idea behind the recursive dual tree bi­section (DTB) algorithm is to concurrently 
construct two breadth first spanning trees of the graph and bi­sect the graph where the two wave fronts 
meet. In practice it is necessary only to carry out concurrent 96 breadth first searches without actually 
constructing trees. Theprocess then istopick twovertices as roots for the searches, andconcurrently breadth 
first search around each root until all the vertices have been vis­ited by one or the other of the two 
searches. As ver­tices are visited, they get tagged to one or the other partition. The resulting components 
are always con­nected since the breadth first search guarantees that each vertex tagged is directly connected 
to a vertex that was previously tagged. Any two vertices may be picked as roots and the algorithm is 
applied it­eratively with different pairs of roots to obtain good partitions. The method gives best results 
when the two root vertices are some distance (but not necessar­ily the pseudo-diameter) apart in the 
graph. For root vertices on a pseudo-diameter the method is similar to the graph based algorithm described 
by Vaughan [11] and also the recursive graph bisection algorithm described by Simon [9]. Those schemes, 
however, do not guarantee connected components, and in particu­lar may produce disconnected components 
on graphs with two pseudo-diameters which share an endpoint. The method here is referred to as dual tree 
bisection to emphasize that it is a tree based bisection which makes use of two roots. The bisection 
algorithm goes as follows: Dual Tree Bisection (DTB) 1. Create a list of 3 logz IV] pairs of vertices 
some distance apart in the graph. 2. For each pair in step 1 do: (a) Carry out two concurrent breadth 
first searches. (b) Tag each vertex to the partition correspond­ing to the search which first found 
it. (c) Determine size of partitions and number of cut edges in the graph.  3. Use best pair from 
step 2 as graph bisection.  The list of pairs is constructed as follows: Finding Suitable Root Pairs 
1. Arbitrarily pick logz ]VI vertices. 2. For each vertex do: (a) Build a breadth first tree from current 
root vertex. (b) Pair the current root with a vertex randomly selected from either the last or the second 
to last level of the tree.   (c) Repeat three times using the selected vertex in (b) as the current, 
root. The two searches are carried out concurrently by alternately adding an unvisited vertex to each 
search. Although this usually results in an even bisection, sometimes one search can surround the other 
before all the vertices have been visited resulting in a dispro­portionate or uneven bisection. One can 
purposely construct bisections of dispro­portionate size by letting one search proceed faster than the 
other (e.g. one search is allowed to tag three vertices for every two tagged by the other). This is useful 
if the algorithm is to be applied to partition­ing some initially disconnected graph. The procedure then 
is to order all the disconnected components by size, assign each component alternately to one or the 
other partition, and bisect the last (largest) compo­nent in a disproportionate manner to give an even 
bi­section overall. Disproportionate bisections also are useful for partitioning graphs into other than 
power of two partitions. This is important for mapping un­structured grid problems to mesh based parallel 
archi­tectures like the Intel Paragon which has a non-power of two number of processors. Note also that 
in many problems the computational cost is only very roughly associated with the number of vertices in 
a partition. If one can associate a computational cost with each vertex, then the partitioned should 
bisect the graph in order to split the total cost rather than the total num­ber of vertices. With DTB 
this can be implemented by keeping track of the current total cost of each tree and always adding a node 
to the tree with the smaller value. Comparison In this section the two partitioning algorithms are compared 
with recursive spectral bisection (RSB) for a number of two and three dimensional unstructured grids. 
The metric fpr comparison is the number of cut edges induced by tile partitioning, and will be called 
EC. Also preselited for each grid is the CPU time required to generate the partitioning. The two parti­tioning 
algorithms of this paper were implemented in C and compiled with full optimization. The RSB algo­rithm 
was implemented in Fortran by Barnard and Si­mon [1] and uses a multi-level approach to computing the 
Fiedler vector used for partitioning. This imple­mentation is much faster than the original unfactored 
Lanczos implementation, however it does require the user to specify the coarsest level to be used by 
the code. In all the cases studied this was set to 10% of the original grid. The partitioners were run 
on a Sili­con Graphics Indigo workstation with a 50 MHz MIPS R4000 CPU and corresponding FPU. Table 1 
describes the grids used for comparison of the three partitioning schemes. The first two grids are the 
same four element airfoil grid examples discussed in [9]. Each grid is a dual of a two dimensional un­structured 
grid used for computational fluid dynam­ics; the second grid being a more refined version of the first. 
Both the original grids were Delauney triangula­tions therefore the duals have an average connectivity 
very close to 3. The dual grid is used for partitioning here because it is well established (see [12]) 
that the communication cost for the solver is directly related to the edges cut in the dual grid. For 
a multigrid appli­cation, one expects that the best partitioning (at least in terms of speeding convergence 
and satisfying stabil­ity bounds) will be the one that induces the shortest perimeter. To some extent 
this should correlate with minimizing the number of cut edges in the dual, how­ever the extent (if any) 
of such a correlation is not yet established. The next two grids are three dimensional finite ele­ment 
grids and therefore have a much greater average connectivity than the first two. Wing/body is a grid 
used for structural analysis of a wing/body configura­tion and moving point source is the last in a series 
of adapted grids used for studying the fluid dynamics of a moving point source. It is not clear how mini­mizing 
the number of edges cut in partitioning these grids correlates either to minimizing communication in 
a parallel solver or improving convergence in a multi­grid or a domain decomposition method. For domain 
decomposition one prefers subdomains with good as­pect ratio (see [3]), and the same probably applies 
to multigrid. This should correlate with minimizing the cut edges, but again it is not clear to what 
extent. Table 2 presents the number of cut edges and the CPU time for partitioning the unrefined airfoil 
grid up to 2048 subdomains using recursive STB, recursive DTB and recursive spectral bisection (RSB). 
Also in­cluded for RSB is the number of components in the partitioning. For this grid, STB produces less 
cut edges than either DTB or RSB. DTB produces about the same number of cut edges as RSB for up to 512 
partitions, and is slightly better for over 256 parti­tions. This is attributed to RSB performing poorly 
when disconnected components are induced. At 512 partitions RSB has about 5 %0 more components than partitions, 
and this fraction grows with each partition­ing. A partition with disconnected components will generally 
have many more cut edges than one with a single connected component. Thus algorithms that produce connected 
components should perform better at this stage, Table 3 presents the cut edges and CPU time for partitioning 
the refined airfoil grid. Again STB pro­duces less cut edges than either DTB or RSB. In this case, DTB 
produces some bad partitions (in particu­lar, the first and third) and in general performs worse than 
RSB up to 256 partitions. After this, DTB shows improvement over RSB. Again this is attributable to the 
disconnected components induced by RSB. Table 4 presents the results from partitioning the wing/body 
grid. STB performs poorly for all but the first partition. STB was found to perform poorly in general 
for three dimensional grids. The higher con­nectivity of these gricls induces a large amount of branching 
in the breadth first spanning tree, conse­quently, it is difficult to find a branch that will evenly 
bisect the tree. A better approach probably would be to generate quadsections or some higher order sections 
than bisections, but this has not been investigated. DTB performs respectably well on this grid produc­ing 
about the same number of cut edges as RSB for most of the partitions. This is a very encouraging re­sult 
since RSB did not, generate as many disconnected components on this grid as on the first two grids. The 
airfoil grids have holes for each element of the air­foil, therefore they are more likely to disconnect 
and as such will be more difficult for RSB. Finally, table 5 presents the results from partition­ing 
the moving point source grid. Again, DTB does better than STB because the higher connectivity gives STB 
greater difficulty. RSB however is clearly supe­rior than DTB for this gricl. This grid leads to very 
few disconnected components with RSB so it does well for all partitions. The above discussion has concentrated 
on number of cut edges as a metric for good partitioning. One should not lose sight, of the purpose of 
the algorithms developed in this paper, which is to guarantee con­nected components in a partitioning 
That the algo­rithms also produce low numbers of cut edges (that is, within 10-20% of RSB) is important 
because it indi­cates that the quality of partitioning is good. There­fore not only do the algorithms 
generate partitions with connected components, the components them­selves will have a good shape for 
mult,igrid and domain decomposition methods. The CPU times are presented in tables 2-5 in order to provide 
some idea of the computational require­ments of the various schemes. In general one can say 98 Grid 
description Application Dim IV[ IE1 avg corm airfoil fluids 2 11451 16880 2.95 airfoil, refined fluids 
2 30269 44929 2.97 wing/body structures 3 2851 15093 10.59 moving point source fluids 3 10556 76109 14.42 
Table 1: Description ofgrids tested with three partitioners. Partns STB Time DTB Time RSB Time Compns 
(IECI) (see) (IECI) (see) (IECI) (see) 2 69 139.2 71 11.3 83 2.2 2 4 170 238.9 183 20.6 175 5.5 4 8 252 
316.3 307 29.0 325 8.3 8 16 400 372.1 471 36.8 460 13.4 16 32 616 431.8 770 45.0 723 23.0 32 64 939 486.4 
1178 54.5 1157 30.1 65 128 1468 543.9 1768 67.1 1745 35.7 131 256 2238 612.6 2552 85.6 2550 40.2 265 
512 3339 702.4 3687 128.0 3727 43.1 537 1024 4801 822.0 5138 190.5 5353 49.2 1105 2048 6878 977.4 7079 
275.2 7580 57.5 2362 Table 2: Edges cut [Eel and CPU time for airfoil grid (IVI = 11-!51, IEI = 16880). 
Partns STB Time DTB Time RSB Time ComI>ns (IECI) (see) (IECI) (see) (Illcl) (see) 2 83 798 144 40.4 88 
6.4 2 4 244 1261 294 68.2 280 16.8 4 8 393 1558 623 92.9 491 31.9 8 16 618 1785 910 127.0 838 49.9 16 
32 960 2004 1329 151.4 1220 87.7 32 64 1497 2232 2012 183.1 1815 114,8 64 128 2314 2484 2940 222.5 2810 
134.0 128 256 3493 2785 4267 281.1 4206 150.4 258 512 5164 3179 6171 370.6 6178 166.0 528 1024 7551 3721 
8724 530.0 8897 185.2 1067 2048 10939 4485 12168 796.3 12647 208.9 2198 Table3: Edges cut jEClalld CPUtilne 
forrefilled airfoil grid (lVl=30269. lEl= 44929). Partns STB Time DTB Time RSB Time Compns (l.ECI) (see) 
(IECI) (see) (IJ!3CI) (see) 2 255 31.0 278 4.2 259 0.4 2 4 525 53.8 586 8.0 471 1.1 4 8 959 70.1 866 
11.5 832 1.7 8 16 1669 83.2 1498 19.2 1474 2.4 17 32 2568 93.0 2320 22.3 2399 3.7 33 64 3834 101.5 3544 
25.5 3519 4.8 66 128 5639 110.1 5543 40.6 5108 5.4 130 256 7764 119.6 7500 47.1 7267 6.1 260 512 10200 
130,7 10017 56.4 9923 7.0 517 Table 4: Edges cut IECI and CPU time for wing/body structure (IV I = 2851, 
IEI = 15093). Partns STB Time DTB Time RSB Time Compns (IECI) (see) (Illcl) (see) (lEC1) (see) 2 2787 
389 2566 33 1995 8.5 2 4 6966 846 6464 61 5158 14.4 4 8 10752 1228 10581 85 8530 16.0 8 16 15572 1465 
14472 108 12016 21.8 16 32 21095 1607 19309 129 16178 32.3 32 64 28110 1703 24801 150 21198 40.2 64 128 
35431 1782 31001 174 27624 46.7 128 256 42629 1865 38154 204 35010 52.5 258 512 49144 1968 45417 242 
43061 57.2 523 1024 55203 2100 53000 305 51771 63.0 1045 2048 61318 2265 60783 404 60488 70.8 2089 Table 
5: Edges cut Il?c] and CPU time for moving point source grid (Ilzl = 10556, IEI = 76109). 100 that STB 
is more demanding than DTB which is itself more demanding than the multilevel implementation of RSB. 
For both STB and DTB, however, most of the cost is in searching for the best root or root pair and this 
can easily be parallelized. The multilevel RSB, on the other hand, is difficult to parallelize and may 
not gain much from a parallel implementation. Conclusions This paper presents two partitioning that 
guarantee connected components nected initial grid. The mented and tested on mensional unstructured 
tested, the algorithms algorithms have a number of two grids. For many produce partitions terms of number 
of cut edges) or tral partitioning and require only tional resources. It has been found ing to many disconnected 
components partitioning are most suitable for better algorithms given a con­been imple­ and three di­of 
the grids as good (in than spec­ modest computa­that grids lead­under spectral partitioning these new 
algorithms. The new algorithms perform as well on grids leading to only a few nected components under 
spectral partitioning, ever, number of cut edges is only one metric for with do not discon­ how­quality 
 of a partition, and methods like domain decomposi­tion and multigrid may benefit more from connected 
components. Acknowledgments I wish to thank Horst Simon and V. Venkatakr­ishnan (NASA Ames) for many 
useful discussions on graph theory and partitioning, and thanks again to Horst and to Steve Barnard (Cray 
Research) for pro­viding me with their multilevel spectral partitioning code. References [1] S.T. Barnard 
and H.D. Simon, A Fast Multilevel Implementation of Recursive Spectral Bisection for Partitioning Unstructured 
Problems , Conczsrv-erac~: Practice and Experience, (to appear) I$XM, also Tech Report RNR-92-033, NAS 
Division, NASA Ames Re­ search Center, Moffett Field, [2] C. Farhat, On the Mapping Processors onto 
Finite Element and Structures, vol. 32, no. 2, CA, November 1992. of Massively Parallel Graphs , Computers 
pp. 347-353, 1989. [3] C. Farhat and M. Lesoinne, Automatic Partitioning of Unstructured Meshes for 
Parallel Solution of Prob­lems in Computational Mechanics , Int J Numerical Methods in Engzneerzrzg, 
vol. 36, pp. 745-764, 1993. [4] A. Gibbons, Algordhmic Graph Theory, Cambridge Univ Press, Cambridge, 
Great Britain, 1985. [5] N.E. Gibbs, W.G. Poole Jr., and P.K. Stockmeyer, An Algorithm for Reducing the 
Bandwidth and Pro­file of a Sparse Matrix , SIAM J Numer Anal, vol. 13, no. 2, pp. 26-250, 1976. [6] 
B.W. Kerninghan and S. Lin, An Efficient Heuristic Procedure for Partitioning Graphs , The Bell System 
Technical J., vol. 49, pp. 291-307, 1970. [7] B. Nour-Omid, A. Raefsky, G. Lyzenga, Solving Fi­nite Element 
Equations on Concurrent Computers , in A.K. Noor editor, Parallel Computations and Their Impact on Meehantcs, 
1986. [8] A. Pothen, H. Simon Sparse Matrices with J Mat Anal Appl, vol. 11, [9] H.D. Simon, Partitioning 
for Parallel Processing , gineering, vol. 2, no. 2/3, [10] S. H. Unified Ph.D. Mellon pp. 209-227, ASME, 
New York, and K.-P. Lieu, Partitioning Eigeuvectors of Graphs , SIAM pp. 430-452, 1990. of Unstructured 
Problems Computing Systems in En­pp. 135-148, 1991. Teng, Points, Spheres, und Separators, A Geometric 
Approach to Graph Partitioning, thesis, School of Gomputer Science, Carnegie Univ., Pittsburgh, PA, August 
1991. [11] C. Vaughan Structural Analysis on Massively Paral­lel Computers Cornptding Systems in Engineering, 
vol. 2, no. 2/3, pp. 261-267, 1991. [12] V, Venkatakrishnau, H. Simon, and T. Barth, A MIMD Implementation 
of a Parallel Euler Solver for Unstructured Grids , J of Supercornputing, vol. 6, no. 2, pp 117-127, 
1992. [13] R.D. Williams, Performance of Dynamic Load Bal­ancing Algorithms for U-nstructured Mesh Calcula­tions 
, Concurrency: Prc/ctice and Experience, vol. 3, pp. 457-481, 1991. 
			