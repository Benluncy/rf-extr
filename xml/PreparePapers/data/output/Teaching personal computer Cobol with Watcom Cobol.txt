
 TEACHING PERSONAL CO~UTER COBOL WITH WATC~I COBOL by Joseph W. Trigg, Jr. Computer Science Department 
The University of Hichigan -Flint Flint, Michigan 48502-2186 ABSTP~CT The teaching transition from 
a mainframe lan- guage to a subset of the same language for personal computer use could be an unpleasant 
experience with- out adequate preparation. This paper is intended to be of benefit for the teachers of 
COBOL who are contemplating a change from mainframe COBOL to the WATCOH COBOL interpreter. INTRODUCTION 
 The Waterloo Computing Systems Limited of Waterloo, Ontario, Canada, is the developer of a student COBOL 
compiler (actually an interpreter) for the personal computer, The interpreter is us- ually referred to 
as WATCOM COBOL (HCOB). WCOB, Version 2.1 "is intended to be a substantial im- plementation of the standard 
COBOL language. The language supported is suitable for botP teaching purposes and for programming many 
business problems" [i]. This interpreter has been on the market for at least the past three years, the 
author having used it in the classroom for the past two years. The purpose of this paper is to acquaint 
the read- er with my experiences as a COBOL instructor using WCOB as a teaching aid and to point out 
some of the differences in WCOB and standard COBOL (~ISI COBOL). All of my formal academic training and 
commercial applications have been achieved in an IBH main- frame environment. Hence, the following discus- 
sion is presented under this background. DISCUSSION In the classroom I have taught COBOL using WCOB 
to mostly non-Computer Science students in the Business School, some Computer Science majors and a few 
other interested students. The students have available to them two PC labs consisting of approx- imately 
50 IBH-PC's under MS-DOS via a CORVUS Net at The University of Michigan -Flint. A complete portable PC 
unit with a projector can be used in the classroom as a teaching aid. Most of the stu- dents prefer this 
approach to instruction, but there exists a small substantial number of begin- Permission to copy without 
fee all or part of this material is granted provided that the copies are not made or distributed for 
direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, 
and notice is given that copying is by permission of the Association for Computing Machinery. To copy 
otherwise, or to republish, requires a fee and/ or specific permission. &#38;#169;1987 ACM 0-89791-217-9/87/0002/0040 
75Â¢ ning students who find the projected instruction moving too swiftly for their comprehension and note 
taking. The Epson printer provided with the port- able unit is too slow for in-class production of the 
projected examples (no reflection on WCOB). The student must wait for distribution of the examples at 
a later date if the instructor can find the time to reproduce the examples and get the master copy to 
and from the printing department. However, this teaching aid offers the teacher and students an ex- cellent 
interactive device for the teaching and ex- changing of ideas and correcting student coding errors in 
an active mass environment, bioreover, there are some students enrolled in the COBOL classes who have 
had some exposure to standard ~SI COBOL and who do benefit further by the demonstra- tions highlighting 
the differences in standard COBOL and WCOB. The beginning COBOL student will find WCOB quite satisfactory 
in that WCOB contains its own screen editor. The student need not edit code and call-up another program 
for compilation and, per- haps, still another for link editing during a frus- trating debugging session. 
One only gets into WCOB, inputs the source code, returns to the command line, types RUN and waits for 
the results (usually imme- diate for short proglams). Detectable programming errors are pointed to by 
an interactive debugger con~ainin~ full English-text error messages which are displayed on the screen. 
The student enters the debugger automatically at places where errors occur or anywhere in the program 
by inserting the command ENTER DEBUGGING. In a debugging session the student has the option of single 
stepping through each command at which the debugger has suspended ex- ecution, ask the debugger for the 
point of entry into the debug session, continue program execution or quit the debugging session. The 
most popular de- bugging command used by the students is the QUIT (q) command; the student usually wants 
only to know where the debugger intercepted the error and con- siders any other helping aids of the debugger 
to be of no value. The creators of WCOB have designed the inter- preter to conform with'general features 
of their other WATCOH student compilers (WATCOM FOP~RAN and WATFOR, WATFIV series). For example, margins 
(col- umns) A and B in standard COBOL are located in col- umns eight to eleven and columns twelve to 
seventy- two, respectively. WCOB places these margins in columns two to five and six to eighty. Comments 
are not treated the same: the standard COBOL com- ment symbol, an asterisk, is written in column se- 
 40 ven; WCOB places the asterisk in column one for com- ments. In general, standard COBOL uses columns 
one to six for sequential numbering of source state- ments, columns seven to seventy-two for the actual 
COBOL code, and columns seventy-three to eighty for identification purposes. The WCOB programmer has 
 seventy-nine columns available for the source code, the same line-length feature as all other WATCOM 
 student compilers. With these restrictions, WCOB generally is not portable; WCOB paragraph names must 
begin in col- umn two with standard COBOL paragraph names star- ting in column eight. Hence, it is not 
possible for the student to create WCOB code at the PC and execute it over the area network on IBM mainframe 
equipment. Incidentally, the Waterloo FORTRA!T WATFIV stu- dent interpreter has retained most of FORTRAN's 
standard features. A student can quickly debug a WATFIV program using the extensive error diagnostic 
capabilities of the WATFIV interpreter, then exe- cute the same code using a higher level FORTRAN compiler. 
WATFIV requires an extensive amount of memory. WCOB, on the other hand, written for the personal computer 
with limited memory, cannot pro- vide the programmer with an elaborate error detec- tion system. WCOB 
cannot point to the errors of some unconventional coding practices of beginning students. To be sure, 
WCOB cannot find errors em- bedded in nested IF THEN ELSE structures; the in- terpreter does not point 
to the proper place, some- times not even the proper area, where the error is located. Thus, it must 
be emphasized that the new WCOB COBOL teacher cannot rely upon previously ac- quired standard COBOL experience 
alone; some famil- arity with WCOB is essential before teaching COBOL using the WCOB interpreter. The 
designers of WCOB state that their inter- preter may be used for business purposes. This re- quirement 
may fall short if speed is a particular production requirement in this aspect. I have applied a tag bubble 
sort on a key of two charac- ters of eighty character records in a file of two hundred records. WCOB 
required an excess of fif- teen minutes for the sort. The same code translat- ed to TURBO Pascal required 
about five seconds for the entire sort. Outlined below are more differences between WCOB and standard 
COBOL which I have experienced. This does not mean that I have found all the inter- esting differentiations. 
 i) WCOB does not support carriage control symbols (EJECT, etc.) in the source code. 2) THE IDENTIFICATION 
DIVISION. No major differences. 3) THE ENVIRONMENT DIVISION a) SPECIAL-NAMES in standard COBOL is used 
to communicate with the carriage con- trol tape on the main line printer. The PC printer has no such 
requirement. In WCOB, as in standard COBOL, this paragraph is used to specify the cur- rency-sign and 
decimal point characters, which can truly be a nuisance when not completely understood. This paragraph 
can safely be omitted as the default is the standard dollar ($) sign and the base ten decimal point. 
 b) The SELECT clause in WCOB is unbeliev- ably 'nice', for example: SELECT READ-FILE ASSIGN TO "C:THE-READER". 
 One cannot appreciate this simplicity without having been exposed to an IBM COBOL shop. The SELECT clause 
further supports WCOB's RELATIVE and SEQUENTIAL ORGANIZATION, SEQUENTIAL, RANDOM, and DYNAMIC ACCESS 
MODE. WCOB SEQUENTIAL file treatment is con- sistent with standard COBOL SEQUENTIAL files, but I find 
an extreme differ- ence in the implementation of the RANDOM files: the student must build a separate 
file of keys in addition to the random file. WCOB does not index keys. It may be appropriate to be reminded 
here that we are operating under MS-DOS and that RANDOM file implementation is subordinate to the limitations 
of the operating system. Consider this short WCOB program: *** THIS CODE DEMONSTRATES THE CREATION 
OF A *** *** SEQUENTIAL FILE CONTAINING RECORDS OF *** *** LENGTHS LONGER THAN 80 CHARACTERS *** IDENTIFICATION 
DIVISION. PROGRAM-ID. SEQUENTIAL-FILE-CREATION. ENVIRO~IENT DIVISION. CONFIGUNATION SECTION. SOURCE-COMPUTER. 
IBM-AT-512K. OBJECT-COMPUTER. IBM-AT-512K. INPUT-OUTPUT SECTION. FILE-CONTROL. SELECT THE-FILE ASSIGN 
TO "IN-OUT". DATA DIVISION. FILE SECTION. FD THE-FILE LABEL RECORDS ARE STANDARD RECORD CONTAINS 94 
CHARACTERS DATA RECORD IS LYNE. 01 LYNE. 05 FILLER PIC X(75). 05 X PIC X(6). 05 FILLER PIC X(9). 05 
Y PIC X(4). WORKING-STORAGE SECTION. 77 I PIC 9. PROCEDURE DIVISION. OPEN OUTPUT THE-FILE. PERFO~I 
A VARYING I FROM i BY i UNTIL I = 5. PERFORM CLOSE-AND-OPEN. PERFORM B VARYING I FROM 1 BY 1 UNTIL I 
= 5. STOP RUN. A. MOVE SPACES TO LYNE. MOVE '123456' TO X MOVE '1234' TO Y. WXITE LYNE. B. READ THE-FILE. 
DISPLAY X. DISPLAY Y. 41 CLOSE-A~D-OPEN. CLOSE THE-FILE OPEN INPUT THE-FILE. This program demonstrates 
a problem with WCOB 2.1 sequential files cor~taining records of lengths greater than 80 char- acters. 
The file is created and echo checked for verification. When the file itself is viewed on the screen using 
the WCOB editor, only the first eighty characters can be seen, seventy- five spaces and the digits 12345. 
Since WCOB does not support horizontal scrol- ling, the remaining fourteen characters of each record 
are not visible and can- not be updated directly from the ter- minal. Casual inspection of the file from 
the terminal would reveal records of only eighty characters, where in reality the records are ninety-four 
characters long. The WATCOH COBOL interpreter is supplied with another screen editor called EDI. EDI 
does not support hor- izontal scrolling. The entire ninety- four character records can, however, be 
visible through left and right scrolling using the TURBO Pascal Editor. Consider a second WCOB program: 
 *** THIS CODE IS A VARIATION OF THE PRECEDING *** *** PROGRA~I. HERE, THE RECORDS ARE BEING *** *** 
UPDATED. *** IDENTIFICATION DIVISION. PROGRAM-ID. RECORD-UPDATES. ENVIRONMENT DIVISION. CONFIGUPATION 
SECTION. SOURCE-COMPUTER. IBM-AT-250K. OBJECT-C~iPUTER. IBM-AT-250K. INPUT-OUTPUT SECTION. FILE-CONTROL. 
SELECT THE-FILE ASSIGN TO "IN-OUT". DATA DIVISION. FILE SECTION. FD THE-FILE LABEL RECORDS ARE STANDAYiD 
RECORD CONTAINS 94 CP~RACTERS DATA RECORD IS LYNE. 01 LYNE. 05 FILLER PIC X(75). 05 X PIG X(6). 05 FILLER 
PIG X(9). 05 Y PIC X(4). WORKING-STORAGE SECTION. 77 UPDATE-LINE. 02 FILLER PIC X(75) VALUE SPACES. 
02 Xi PIC X(6) VALUE '654321'. 02 FILLER PIC X(9) VALUE SPACES. 02 Yi PIC X(4) VALUE '4321'. PROCEDURE 
DIVISION. OPEN OUTPUT THE-FILE. PEEFORM A VARYING I FROII i BY i UNTIL I = 5. PERFORM CLOSE-AND-OPEN1. 
 PERFOP~ B VAP~ING I FROM 1 BY 1 UNTIL I = 5. PERFO~I CLOSE-AND-OPEN2. PERFO~ UPDATER. STOP P~UN. 
 A. ~VE SPACES TO LYNE. MOVE '123456' TO X. MOVE '1234' TO Y. WRITE LYNE. B. READ THE-FILE. DISPLAY 
X. DISPLA~f Y. CLOSE-A~D-OPENi. CLOSE T~IE-FILE OPEN THE-FILE. CLOSE-AND-OPEN2. CLOSE THE-FILE OPEN 
I-O THE-FILE. UPDATER. READ THE-FILE. REWRITE LYNE FRO~I UPDATE-LINE. This second program is a version 
of the first program in which the file created in the first program is updated. In- structions in the 
WATCOM manual were followed but an error indicating that 'FIXED-FOrmATTING must prevail' appeared during 
the updating procedure. Fixed- formatting is not listed in the index of the reference manual. Since WCOB 
will allow the creation of a record longer than eighty characters, there must be a mechanism for updating 
the fields of these records. 4) THE DATA DIVISIO~. a) The FD contains a feature which allows the user 
to enter the I/O file names interactively from the terminal by writing in the SELECT clause SELECT file-name 
ASSIGN TO "" Then in the FD insert VALUE OF "" IS identifier In WORKING-STORAGE 77 identifier PIC 
X(10). In the PP~CEDURE DIVISION OPEN file-name. ACCEPT identifier. There may exist a problem if 
the length of the file-name entered at the termi- nal is not the same length as indicated in the PICTURE 
clause. b) WOP~ING-STOP~GE may contain a 66 re- served level number for regrouping data. Although standard 
COBOL supports the 66 reserved level number, it is rarely used because of its limitations. It cannot 
be subdivided into component fields. It cannot be redefined, and it cannot be described with a level-88 
item [2]. In this respect and in the interest of limited memory for the PC it seems that the level-66 
number could have been excluded from WCOB. c) USAGE. "This clause is intended to provide different representations 
of data for items, depending upon whether 42 they are used in computations or not. WCOB uses the same 
representation for both COMPUTATIOI]AL and DISPLAY." [i]. 5. THE PROCEDURE DIVISION. a) The AT END 
phrase is not required, as contrasted with standard COBOL, with all READ statements. This is a sensi- 
ble innovation in that some program- ming logic does not require that a decision be made after each READ 
state- ment, expecially the READ statement which initializes a PERFO~ paragraph that reads a sequential 
file containing more than one record. b) When the code becomes long and complex, nexted IF THEI~ ELSE 
statements can cause serious trouble. I have found that writing the ELSE clause on a separate line oftentimes 
corrects the ailing program. I can offer no reason for the success of this action. c) WCOB does not 
support THEN as in IF THEN ELSE. In standard COBOL the use of the THEN is optional. The publication, 
WATCOM COBOL TUTORIAL AND REFERENCE MANUAL [i], covers the details of WCOB. It is by no means meant to 
be a textbook. The details of subject matter are not easily found; for example, the index makes no ~eference 
to 'margin', yet on page 22 of the manual the topic is explicitly refered to. The students have discovered 
that some of the examples in the tutorial do not execute, The section covering SEQUENTIAL FILE processing 
could greatly be expanded as indicated above. A new version, 3.0, of WCOB has been released. Fortunately, 
I have been able to execute every pro- gram written in version 2.1 using the 3.0 release. I have found 
one difference, though (there are surely more): to return to DOS, 3.0 requires "QUIT", 2.1 simply wants 
"BYE". SUMMARY WATCOM COBOL (2.1) is an interpreter written for the teaching of the COBOL language 
on the personal computer. It is a delight from the stu- dent viewpoint, containing its own editor but 
not limited to it. Other editors may be used but the beginner usually does not possess this knowledge. 
The interpreter makes seventy-nine columns avail- able for COBOL source code, includes the level-66, 
and contains a feature for the selection of I/O files from the keyboard. The student notices a substantial 
increase in program execution time at the end of the semester when the programs become longer and more 
complex. Otherwise, execution times are tolerable. The error diagnostics, upon which the average student 
is so dependent, are limited. From the viewpoint of the instructor versed in standard COBOL and not 
familiar with WATCOM COBOL, the initial experience is less than delightful. The instructor cannot help 
but become more proficient in WATCOM COBOL just after one semester before a class of eager students. 
For reasons mentioned in this article, however, it is recommended that the instructor know as much as 
possible about WATCOM COBOL before facing the students, as the few differ- ences in this language and 
standard COBOL are enough to render a program worthless. Moreover, since the error messages of the interpreter 
are limited, the instructor must be able to help the student find errors independent of the error mes- 
sage listing. The instructor will find the WATCOM COBOL publication a'useful reference, not as a text, 
but as a manual of reference. There will be pro- blems in this respect because all the details of WATCOM 
COBOL peculiar to standard COBOL are not easily found, some topics being covered in the manual but not 
explicitly listed in the index. The transition from WCOB COBOL to standard COBOL apparently has not 
been a serious problem with the students, Those students leaving my classroom and acquiring COBOL programming 
jobs in the market place have expressed gratitude for the WATCOiI experience. In the classroom I have 
taken every opportunity to explain the differences be- tween the the standard ANSI COBOL and the WATCOM 
COBOL versions. REFERENCES I. WATCOM COBOL TUTORIAL AND REFERENCE MANUAL, P. H. Dirksen, J. W. Welch, 
WATCOM Publications, 1983 2. WRITING STRUCTURED COBOL, D. L. Johnson, Addison-Wesley'Publishing Company, 
1986 43 
			