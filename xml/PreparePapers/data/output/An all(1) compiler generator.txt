
 AN ALL(1) COMPILER GENERATOR D. R. Milton, L. W. Kirchhoff, and B. R. Rowland Bell Laboratories Naperville, 
IL 60540 I. INTRODUCTION Aparse is a flexible and modular system for generating efficient one-pass 
com- pilers from attributed grammar specifica- tions. The system is of particular in- terest in that 
it combines recent research in attributed parsing and error-correction into a powerful and practical 
tool. It has been amply demonstrated that attri- buted grammars are a convenient mechanism for organizing 
translations ([Fan 72], [LRS 74], [Bra 76]). This is partially due to the fact that an attributed grammar 
is not a completely formal specification tool --it merely provides a framework for structuring a semantic 
and syntactic specification. A number of compiler- compilers have been written to process at- tributed 
grammars ([LB 74], [BW 78], [GRW 77]), but Aparse is unique in incor- porating attribute values in the 
parsing function. We have found that this facili- ty permits smaller grammars to be used, and smaller 
parsers to be generated. In addition, a significant degree of context-sensitivity can be reflected in 
what is essentially a context-free frame- work. Section 2 will contain a brief in- troduction to attributed 
grammars, and section 3 will sketch the theory of attri- buted parsing. The error-corrector used by 
Aparse is based on the insertion-only FMQ algorithm [FMQ 77]. Although there are more complex algorithms 
available which offer correc- tions of slightly higher quality (e.g., [GR 75], [PD 78]), in practice 
the time and space efficiency of the FMQ algorithm more than compensates for its occasionally inferior 
corrections. The presence of at- tributes, however, considerably compli- cates the error-correction process. 
Sec- tion 4 will discuss the use of Aparse as a test bed for attributed error-correction. The implementation 
of Aparse will be dis- cussed in section 5. Section 6 will con- clude with an analysis of the utility 
of the concepts embodied by Aparse in the context of some applications. 2. ATTRIBUTED GRAMMARS Informally, 
an attributed grammar is a context-free grammar where attributes may be attached to each nonterminal 
and termi- nal symbol. An attribute is a (name,value) pair, and is used to associ- ate auxiliary information 
with the con- struct represented by a grammatical sym- bol. For example, a programming language grammar 
may provide the nonterminal "EX- PRESSION" with attributes to indicate its mode and its run-time address. 
The evaluation of attribute values is speci- fied with attribute evaluation rules, which are supplied 
with each production. Each rule defines an attribute value as a function of other attribute values of 
sym- bols appearing in the same production. A synthesized attribute of a symbol is computed as a function 
of the attributes of its immediate descendants. Much of the current interest in attributed grammars is 
due to Knuth's invention of inherited at- tributes ([Knu 68]). An inherited attri- bute of a symbol is 
a function of the at- tributes of parent or sibling symbols, and can thus be used to convey context into 
a subtree in a derivation, while synthesized attributes could only convey information out of a subtree. 
 The notation used by Aparse for attributed grammars will be illustrated with an exam- ple in section 
5. In order for an Aparse specification to be easily readable and writable, the attribute evaluation 
rules and the declarations of the attribute values are all written in the host pro- gramming language 
(in this case, C, [KR 78]).  3. ATTRIBUTED PARSING Aparse uses the strong ALL(1) parsing al- gorithm 
developed in [Mil 77]. Essential- ly this is an LL(1) parser modified to al- low the parsing decision 
to consider pre- viously evaluated attributes. Top-down processing has particular advan- tages from 
the point of view of attribute handling. These advantages result from the fact that a top-down parser 
constructs a derivation tree from left to right in a depth-first manner. At every point in the parse, 
there exists a partial derivation tree, and the attribute evaluation rules will serve to communicate 
context across this tree for use in further expansion. Alternatively, bottom-up parsers construct a derivation 
tree by piecing together forests of smaller trees. In such a scheme, the availability of inherited at- 
tributes to convey context to the parser becomes problematical. In fact, one-pass bottom-up compilers 
must restrict them- selves to S-attributed grammars ([LRS 74]), ruling out inherited attri- butes entirely. 
 Intuitively, a strong LL(1) parser works in the following way: given a left- sentential form wAy which 
occurs during a parse of the terminal string wx, the parser can always decide which production to use 
to expand A knowing only the first symbol of x. The central idea behind at- tributed parsing is to permit 
the parsing function to be a function not only of A and FIRST(x) but also of the evaluated at- tributes 
of A and FIRST(x). Since LL parsing proceeds left-to-right with no backup, the attribute evaluation 
rules must be constrained so that the at- tribute values needed by the parser are available at the right 
time. There is no problem with the attributes of the looka- head, since the lookahead is a terminal symbol 
whose attributes are constrained (by definition) to be synthesized (i.e., supplied by the lexical analyzer). 
The attributes of a nonterminal symbol on top of the parsing stack present a greater difficulty. Its 
synthesized attributes cannot be available, since these are com- puted as a function of right-hand side 
at- tributes, and the right-hand side has yet to be predicted. The inherited attributes maY be available, 
but only if they are a function strictly of previously evaluated attributes. Restricting all inherited 
at- tributes to depend only on their left con- text results in an L-attributed grammar as defined by 
Lewis, Rosenkrantz, and Stearns [LRS 74]. The L-attributed restrictions guarantee that the inherited 
attributes of a nonterminal stack symbol will have been evaluated by the time they are needed to guide 
the parser in making a prediction. In practice, attributes are examined by the parser only when the 
usual strong LL(1) algorithm fails to provide a unique prediction. Thus, associated with each production 
there may be supplied a disam- b iguating predicate , which, for a produc- tion A --~ x, is a predicate 
on the inher- ited attributes of A and the attributed symbols in FIRST(x).FOLLOW(A). When the parser 
generator determines that the usual strong LL(1) decision criterion is insuf- ficient, it directs that 
the disambiguat- ing predicates associated with the con- flicting productions be evaluated to determine 
the prediction. Of course, the predicates are only evaluated at parse- time when the attributes determining 
the context of the decision become available. More formally, for a nonterminal X, let X" denote an instance 
of X with values as- signed to each inherited attribute. For a terminal b, b" denotes an instance of 
b with values assigned to each synthesized attribute. A strong ALL(1) grammar is an attributed grammar 
such that for every pair of productions with the same lefthand-side, PI: X ---> x I and P2: X ) x 2 
 if a E FIRST(xIÂ°FOLLOW(X))f~FIRST(x2.FOLLOW(X)) then for all a" and X": d1(X",a") and d2(X",a") : 
false (where d i is the predicate associated with production pi ). In other words, disambi- guating 
predicates must be supplied to resolve all strong LL(1) conflicts. The decidability of the strong ALL(1) 
pro- perty is dependent upon the attribute domains and the form of the predicates. In practice, we have 
found the attribute domains used for disambiguation to be quite small, and the disambiguating predi- 
cates to be extremely simple. Currently, Aparse tests only for the strong LL(1) condition, and checks 
that disambiguating predicates are supplied for all lookaheads which cause conflicts. The use of attributes 
in the ALL(1) parser means that the system is not restricted to LL(1) grammars. This is significant since 
the major reason that bottom-up parsers have been preferred over top-down parsers is the smaller class 
of grammars handled by the latter. In addition, ALL(1) pro- cessing enables some of the syntactic specification 
to be handled via attri- butes, so that ALL(1) grammars can often provide a more succinct specification 
than equivalent context-free grammars. More- over, ALL(1) grammars can implement (as a special case) 
the disambiguating tech- niques that Aho, Johnson, and Ullman have  153 applied to ambiguous grammars 
([AJU 75]). This heavy reliance upon and integration with the host language has resulted in a system 
which C programmers have found re- 4. ERROR-CORRECTION markably easy to learn and use. Conceptually, 
attributed parsing opens up new possibilities in the field of error detection and correction. Not only 
are the traditional context-free methods still available, but context-sensitive errors can now be discovered 
by the parser through the use of predicates implemented as action routines. When an error has been detected, 
there is a wealth of infor- mation available in the values of the at- tributes. For example, in the case 
of a type-compatibility error, the attributes will reflect the types of the offending constructs. The 
error-corrector used by Aparse is based on the purely context-free FMQ algo- rithm. Unfortunately, we 
have as yet been unable to incorporate attribute values into the correction tables --the quantity of 
information has eluded efficient imple- mentation. Moreover, the correctness and termination results 
of the FMQ algorithm do not apply to attributed FMQ-type correction. The problems are intrinsic to attributed 
correction in general: the correction must itself be compatible in a context-sensitive sense with the 
program being corrected. We are investigating restrictions and heuristics that will pro- vide reasonable 
corrections at modest cost while sacrificing the guarantee that a correction will always be found. We 
main- tain the goal of being able to generate the error-corrector automatically. Currently, the error-corrector 
computes a context-free insertion, but the grammar specification supplies for each terminal the values 
for its attributes whenever it is inserted. This allows the grammar designer to "tune" the correction 
some- what, and in many cases a semantically correct program results. However, the percentage of cases 
for which semantic er- rors cascade is large; as indicated above, we hope to improve this situation. 
 Aparse itself consists of four independent modules whose execution is controlled by a system command 
language procedure: the grammar preprocessor, the ALL(1) parser generator, the error-corrector generator, 
and the table compactor. The preprocessor generates a parser prototype including all attribute declarations, 
attribute evalua- tion rules, and disambiguating predicates. Simultaneously, the remainder of the gram- 
mar is encoded for easy handling by the parser generator and error-corrector gen- erator. The latter 
two modules, along with the table compactor, produce tables which are compiled with the parser proto- 
type to create the parser module. The ma- jor advantage of this factorization is that changing a grammar 
specification need not require the reexecution of all four modules. If only the attribute evaluation 
rules have been modified, only the prepro- cessor need be rerun. If the error- corrector is being tuned 
by altering the terminal symbol insertion costs, the parser generator can be bypassed. In a dynamic development 
and debugging environ- ment these savings are substantial. They require no extra effort by the user since 
the controlling procedure automatically examines the previous versions of the in- termediate files to 
determine which parts of Aparse must be rerun. The following is a short example of an Aparse specification 
of a parser for ar- ithmetic expressions involving constants, "+", and "*". The underlying grammar is 
not LL(1), and uses the technique of en- coding the "priority" of the operator as an attribute of the 
corresponding symbol. While the example illustrates two levels of operator precedence, it can be expanded 
to any number of levels without increasing the number of productions. 5. THE IMPLEMENTATION Aparse 
processes an attributed grammar specification and generates a program module, not merely a set of tables, 
and relies on the host language for the specification of the attribute evaluation rules and disambiguation 
predicates. C was used as the host language, giving the user the full power of a general purpose language 
for attribute manipulation, and simplifying considerably the processing required of Aparse. Moreover, 
the struc- tured data types provided by C were em- inently suitable for declaring and access- ing the 
attributes of a grammar symbol. 154 %tokens 6. DISCUSSION AND CONCLUSIONS OP {int p;} ; %nonterminals 
 expr {int p;} ; elist %% {int p;} ; goal : {$expr-->p = I;} expr  expr : [C: Sexpr-->p :: 3] C I [C: 
$expr->p !: 3] {$2expr-->p = $1expr->p + I;} expr {$elist-->p = $2expr->p;} elist elist : [OP: $1elist-->p 
== LKAHEAD] OP {$expr-->p = $1elist->p; $2elist-->p = $1elist->p;} expr elist I [OP: $1elist-->p != LKAHEAD] 
 The symbols and their attributes are de- clared first, and the productions them- selves follow the first 
"%%". The right- hand sides of the productions consist of grammar symbols (unadorned), disambiguat- ing 
predicates (enclosed in brackets), and attribute evaluation rules (enclosed in braces). The only departure 
from normal C syntax in the predicates and evaluation rules occurs with attribute references -- a "$" 
is prepended to the usual structure field reference so that the preprocessor can replace these references 
with the ap- propriate pointer offsets into the run- time attribute stack ("$n" is used to dis- tinguish 
between multiple occurrences of a symbol in a production). In addition, the disambiguating predicates 
specify which lookahead symbols are applicable, the at- tribute of the lookahead being convention- ally 
supplied by the lexical analyzer as "LKAHEAD". The parser maintains an attribute stack in parallel 
with the conventional LL-type parse stack. For productions containing attribute references, a "production 
node" is pushed onto the attribute stack whenev- er a "predict" step occurs in the parse [Row 77]. Each 
production node contains enough space for all attributes of the righthand-side symbols, and a pointer 
to the attributes of the lefthand-side symbol (for which storage has been reserved in a previous production 
node). The attribute references in the attribute evaluation rules and disambiguating predicates will 
have been translated by the preprocessor into offsets from pointers into the attri- bute stack. The pointers 
are then as- signed addresses by the parser at run- time. A variety of applications have successful- 
ly used the Aparse system to construct language analyzers. Among the applica- tions are an experimental 
external symbol definition preprocessor for C and an infix notation desk calculator language. One application 
in particular has used all the existing features and is large enough to allow significant comparisons 
with alter- nate translator writing system approaches. The CHILL language, proposed by C.C.I.T.T. as 
a high-level language for stored pro- gram control telephone exchanges [CCI 77], was studied using Aparse. 
This study in- volved the construction of a syntax analyzer and type checker for the language. An ALL(1) 
grammar was con- structed for CHILL, and attributes were defined for identifier resolution and type checking. 
This experimental project was used to discover ambiguities in the description of CHILL and to assess 
the vi- ability of the identifier visibility rules. Using ALL(1) parsing and an automatic parser generator 
in our language analysis effort provided a number of advantages re- volving around the ease of development, 
clarity of implementation, and minimal memory requirements. Automatic parser generation from a unified 
syntactic and semantic description language vastly simplified translator im- plementation and evolution 
and improved accuracy. Since the parser is generated in the same language as the attribute evaluation 
rules and both can be freely combined by the system, a great deal of flexibility is permitted in computing 
the values of attributes. Generating programs instead of data provided execution speed efficiencies and 
simplified the integra- tion of the various translator modules us- ing existing software development 
tools. The use of attributed disambiguation predicates in the grammar, especially in expressions (which 
involved six precedence levels), enabled the elimination of twelve nonterminals and fifteen terminals 
from the grammar. These reductions resulted in a simpler grammar and smaller parsing tables. The condensation 
of productions and associated actions eliminated repeti- tive code which would have differed only in 
the operator involved (an attribute value). The top-down predictive parsing algorithm, strong ALL(1), 
allowed the arbitrary insertion of action routines for the evaluation of attributes. This freedom eliminated 
the need to create "hooks" in the grammar. Hooks in bottom-up grammars are productions created for the 
primary 155  purpose of signaling the early recognition of a particular construct. These produc- tions 
tend to increase the size and com- plexity of a grammar. Hooks are not re- quired in top-down grammars 
due to their predictive nature. L-attributed grammars permit the use of inherited attributes and thereby 
simplify information transmission in syntactic and semantic analysis. While Knuth [Knu 68] showed that 
any attributed grammar could be converted to an equivalent one with only synthetic attributes (an S-attributed 
grammar), the transformation results in unwieldy, large, and unclear grammars. The stacking of inherited 
attributes with nonterminal symbols eliminates most of the need for global data objects in translator 
applications. Large tables, such as a symbol table, still tend to be implemented as global objects for 
reasons of size and dynamic characteristics. Simpler data ob- jects are easily managed as attributes, 
and their automatic stack allocation is useful in avoiding problems with recur- sion. For example, a 
variant-tag's type and value are inherited attributes to a variant-field-list in PASCAL. Since variant-field-lists 
are recursive, a sin- gle global object cannot to maintain this information. Using the Aparse system 
to manage the association of symbols and their attribute values vastly simplifies the task of translator 
or recognizer im- plementation. The error-corrector proved especially helpful both in learning CHILL 
and in de- bugging the CHILL grammar. Since every modification to the syntax resulted in a new error-corrector 
being automatically generated, it was a simple matter to test sample CHILL programs. The error- corrector 
not only indicated errors, but provided a plausible alternative. The grammar designer was thus supplied 
with accurate information as to the language the grammar was actually generating. Moreover, the error-corrector 
and parser generator algorithms were fast enough to be run interactively -- they provided a remarkably 
pleasant environment for designing grammars. Testing and debugging can occur on several levels. The 
highest level is that of parsing and action routine scheduling. Input to the parser generator is the 
source for this level. Tracing facilities of the parser driver can create displays of the productions 
predicted, tokens recognized, and action routines executed. Since both the parser and the attribute evaluation 
routines are written in the host programming language, source-level debugging techniques are applicable. 
These techniques include setting break points, symbolic dumping of variables, and dispIaying the run-time 
stack history in terms of functions called, their parameter values, and local variables. The inser- 
tion of programmed trace facilities in the source is feasible as well. A problem that typically plagues 
users of generated programs is that of compiler error mes- sages referring to program source lines instead 
of lines in the higher level source input used to generate the program. This problem has been solved 
in the C com- piler, permitting Aparse to assign line numbers to input source lines in the gen- erated 
source that are to be used as line numbers in C-level error messages. A more complete discussion of the 
advantages in using the host language in program genera- tors can be found in [JL 78].  7. SUMMARY 
Aparse offers a high-level language specifically designed for writing com- pilers. It combines attribute 
evaluation and attributed parsing, and is fully in- tegrated with the host programming language. The 
variety of applications which have used Aparse have demonstrated the utility of attributed grammars as 
a practical vehicle for translator implemen- tation. ACKNOWLEDGEMENTS We wish to give credit and thanks 
to C. N. Fischer for a variety of helpful ideas on attributed parsing and error-correction, to T. P. 
Blumer for coding many of the Aparse routines, and to S. C. Johnson for the development of the Yacc system 
([Joh 75], [JL 78]) from which many philo- sophical and user interface ideas were borrowed. REFERENCES 
 [AJU 75] A. V. Aho, S. C. Johnson, and J. D. Ullman. "Deterministic Pars- ing of Ambiguous Grammars," 
Com- munications of the ACM, Vol. I~, No. 2, pp. 44~-4~(3-9~5). [Bra 76] P. Branquart, J.-P. Cardinael, 
J. Lewi, J.-P. Delescaille, and M. Vanbegin. An Optimized Transla- tion Process and its Application to 
ALGOL 6~-, Springer Verlag, Berlin (-T97~3-. [BW 78] G. V. Bochmann and P. Ward. "Compiler Writing 
System for At- tribute Grammars," The Computer Journal, Vol 21 No. 2 pp. (1978".) '  156 [CCI 77] 
C.C.I.T.T. Study Group XI. High Level Language Team of Special- ists. "Proposal for a Recommen- dation 
for a C.C.I.T.T. High Lev- el Programming Language," Blue document (May 1977). [Fan 72] I. Fang. ,'FOLDS, 
a Declarative Formal Language Definition Sys- tem," Technical Report STAN-72- 329, Stanford University 
(1972). [FMQ 77] C. N. Fischer, D. R. Milton, and S. B. Quiring. "An Efficient Insertion-Only Error-Corrector 
for LL(1) Parsers," Conference Record of the Fourth Annual Sym- posium on Principles of Program- ming 
Languages, pp. 97-103 (Jan. 1977). [GRW 77] H. Ganzinger, K. Ripken, and R. Wilhelm. "Automatic Generation 
of Optimizing Multipass Com- pilers," IFIP 77, pp. 535-540 (1977). [GR 75] S. L. Graham and S. P. Rhodes. 
"Practical Syntactic Error Recovery," Comm. of the ACM, Vol. 18, No. 13-, pp. ~'3-9-b'5-O (Nov. 1975). 
 [Joh 75] S. C. Johnson. "Yacc --Yet Another Compiler-Compiler," Comp. Sci. Tech. Rep. No. 32, Bell La- 
boratories (July 1975). [JL 78] S. C. Johnson and M. E. Lesk. "UNIXTM Time-Sharing System: Language 
Development Tools," Bell System Technical Journal, ~. 57, ~-6. 6, Part 2, pp. 2155-2176 (1978). [Knu 
68] D. E. Knuth. "Semantics of Context-Free Languages," Mathematical Systems Theory, Vol. 2, pp. 127-~6~-. 
Correc- tion appears in Mathematical Sys- tems Theory, Vol. 5, p. 95 IY7~71). [KR 78] B. W. Kernighan 
and D. M. Ritchie. The C Programming Language, Prentice-Hall, Engle-wood Cliffs, NJ (1978). [LB 74] O. 
LeCarme and G. V. Bochmann. "A (Truly) Usable and Portable Compiler Writing System," Infor- mation Processing 
74, Nor~- ~d Publishing Company (1974). [LRS 74] P. M. Lewis, D. J. Rosenkrantz, and R. E. Stearns. 
"Attributed Translations," Journal of Comput- er and Systems-~c~ VoW. 9, pp. 2-~-3~Zf--CT-974).  [Mil 
77] D. R. Milton. "Syntactic Specif- ication and Analysis using Attri- buted Grammars," Ph.D. disserta- 
tion, Computer Sciences Dept. Tech. Rept. #304, University of Wisconsin -Madison (1977). [PD 78] T. 
J. Pennello and F. DeRemer. "A Forward Move Algorithm for LR Error Recovery," Conference Record of the 
Fifth Annual ACM Symposium on Principles of Pro- gramming Languages, pp. 241-254, (Jan. 1978). [Row 
77] Rowland, B. R. "Combining Pars- ing and Evaluation for Attributed Grammars," Ph.D. Thesis, Univer- 
sity of Wisconsin-Madison, 1977. 157  
			