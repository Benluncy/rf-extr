
 A Comparison of PASCAL Intermediate Languages Philip A. Nelson Lawrence Livermore Laboratory University 
of California, Davis ABSTRACT PASCAL P-code is an aid when transporting PASCAL to new machines and environments. 
Implementations using P-code may modify the P-code. This modification process may require some creative 
effort. Some of this effort may be eliminated by looking at previous work with P-code. This paper describes 
three versions of P-code and compares ther modifi- cations. INTRODUCTION P-code is an intermediate language 
used to help transport PASCAL to new environments. Originally designed to simplify code generation in 
an experimental compiler, new goals for P-code have given birth to several versions. A comparison of 
these versions :can show the effect of their goals on the original P-code. Several years ago, Urs Ammann 
wished to test the method of structured programming on a large project. The project chosen was a PASCAL 
compiler and as a by-product the first portable PASCAL compiler was born[i,8]. P-code was the object 
language of this portable compiler or P-compiler. A new implementation of PASCAL is accomplished by either 
interpreting the P-code or by translating the P-code to some language available in the new environment. 
After some work with the original P-code, now designated as P-2 P-code, anew version was released. This 
new P-code, designated as P-4 P-code, has become known as the standard P-code. Both of these versions 
have been used to transport PASCAL[2,3,4,6]. At the University of California at San Diego and Los Alamos 
Scientific Laboratory, P-code was adopted as the starting point for new projects. At UCSD P-2 P-code 
was modified to provide PASCAL on small computers. At LASL, P-code was chosen as the basis for the object 
language of the MODEL compiler. MODEL, developed at LASL, is a systems programming language for which 
portability was a stated design objective[7]. P-4 P-code, UCSD P-code and LASL P-code cover a wide range 
of environments. The comparison of these versions will start with a description of P-4 P-code. The other 
two versions are then presented showing how the goals of the project affected the P-code. The comparison 
will conclude with some analysis of the resulting products. STANDARD P-CODE P-code is an assembly language 
for a hypothetical computer. This computer gives an operational definition of the P-code in terms of 
data structures and operations on these data structures. Implementation details such as the representation 
of basic data types and the bit width of the basic storage unit are not specified. Because of the operational 
definition, the term P-code will be used to imply either the assembly language or the stack computer, 
called the P-machine. The basic area for data storage is a stack. No registers are directly accessible 
from the P-code. All data storage except dynamic data storage is in the stack, Dynamic data is stored 
in a heap located in the same address space as the stack, thus making addresses for the stack and the 
heap operationally the same. Data belongs to one of several basic data types, known and manipulated differently 
by the P-code. Instructions are in a seperate addressing space and can not be modified. The instructions 
can be put into four general classes, stack manipulation, data control, execution control, and special 
instructions. Some instructions specify the type of data to be manipulated. The other instructions either 
have no need to specify a data type, like an unconditional jump, or the data type is an implicit part 
of the instruction. To provide simplicity, the instructions are the same size and ignore fields that 
hold no pertinent information. Stack manipulation instructions work with data on the top of the stack. 
Most of these instructions have implicit data types, like the add integer instruction. Included in this 
class are all the type change instructions. Data control instructions are responsible for moving the 
data to and from the top of the stack. Most of these instructions, like the load global data instruction, 
work for all data types, using an explicit specification of the data type for each instance. Block moves 
of data and the loading of constants are also a part of the data control class. The execution control 
and special instruction classes provide the P-code with the necessary operations to make P-code complete 
and usable. The P-code was influenced by PASCAL in several ways. Procedures in PASCAL are mapped to P-code 
procedures. Two instructions implement a procedure call, providing a new activation record (or stack 
frame) for local data storage and linkage to non-local data. Addressing uses these stack frames and the 
linkage to get active data by static declaration level. There are two modes of data addressing, absolute 
and <level, offset> addressing. Absolute addressing is used for global data and any indirect references 
to any part of the stack or heap, The <level, offset> addressing is used to access data in stack frames 
created by program execution. The level specifies the number of static declaration levels between the 
current frame and the addressed frame. The offset is an offset from the base of the addressed frame. 
Arrays and records are handled by special instructions using absolute addressing. A single instruction 
computes the address of an indexed array element given the base address, the index expression, and the 
array element size. This could have been done by a sequence of instructions but was added for ease of 
code generation. When an address is on top of the stack, the data is loaded by an indirect load instruction. 
Included in the indirect load is an offset from the address on the stack. This offset is used for accessing 
fields of a record. An offset of zero would provide indirect addressing, which is used for arrays and 
dynamic memory access. Complete arrays and records are moved from one part of the stack to another by 
a single instruction. Besides the procedure, only one other control structure in PASCAL has a special 
instruction. The case selection process is done by an indexed jump. This indexed jump transfers control 
to an element of a jump vector specified by the expression on the stack. Each element of the jump vector 
is a jump to the actual code to be executed for the corresponding expression value. All other control 
structures are implemented by the unconditional jump or the false jump instructions. Utility routines 
and the interface to the host operating system are the standard procedures. These standard procedures 
consist of the standard mathematical functions, the input and output routines and heap management routines. 
When an implementation is done, the P-code is tied more directly toan implementation machine. The implementor 
decides on the space needed for each basic data type and other things needed for the allocation of memory. 
A set of constants in the compiler are used by 209 the allocation routines to define the implementor's 
choice. By the addition of these constants P-code was made more flexible. Instead of one object machine, 
P-code can be used for a family of implementation machines. VARIATIONS Variations of P-code have been 
produced by two general methods. The most common method is the evolution process when P-code and the 
P-compiler are used to implement PASCAL. The changes are introduced for a variety of reasons including 
closer P-code conformity to the implementation machine, additions and format changes needed to allow 
a macro-assembler to work directly on the P-code[2], and extensions to portable PASCAL. The other method 
uses P-code as a basis for a new system. The changes are designed to make P-code a more useful tool for 
the new system. Each variation keeps the same basic machine model. The syntax of the P-code can change, 
instructions can be added, or some instructions may have a different functionality, but all variations 
remain recognizable as P-code. Two versions of P-code have been chosen for comparison with P-4 P-code. 
These two versions represent the two methods of change. UCSD P-CODE The institue for Information Systems 
at the University of California, San Diego, directed by Kenneth Bowles, has implemented a complete PASCAL 
system for mini- and micro- computers. The heart of the system is an interpreter of a descendant of P-2 
P-code. All system software is written in PASCAL except the interpreter and some run-time support routines. 
The development of this system was done with the help of students at UCSD. During the evolution process, 
several versions have been released. Each version has new features and capabilities. Some versions have 
had modifications to the P-code. The version used for this paper is VERSION 1.5. UCSD P-code was designed 
specifically for the execution of PASCAL programs on a small computer. A small computer is defined as 
a computer with limited memory space. As a result, UCSD P-code has been optimized to save this precious 
space. Because of the interpreter, the P-code must be expressed in a form easy to manipulate. This brought 
about a specific definition of many things that are left alone for P-4 P-code. The basic storage unit 
or word was defined to be 16 bits, containing two 8-bit bytes. Data is word oriented while instructions 
are byte oriented. The compiler, unlike the portable PASCAL compiler does not generate a textual represen- 
tation of the P-code. The output is a code file which can be executed by the interpreter. This code file 
takes a lot less space than an equivalent text file. It also eliminates the need for a P-code assembler. 
The size of the code has been reduced by a couple of methods. First, the instructions were made variable 
sized. The first byte would identify the instruction and would be followed by zero to several bytes of 
perand information. Unlike P-4 P-code, Unused fields are not stored in the code. Some operands even vary 
is size depending on the value of the operand. This provides a high density code but increases the complexity 
of the interpreter. The other method of code compaction is the use of implicit operands. Since an instruction 
takes one byte, 256 instructions can be represented. The original P-code has about 60 instructions, leaving 
almost 200 unused possibililties. Some of the most common instructions were then assigned several of 
the codes and each different code had a different implicit operand. This implicit operand does not appear 
in the code and thus saves space. The best example of implicit operands is the loading of word constants. 
The values zero through 127 are loaded by 128 different instructions. Each instruction takes only one 
byte where two bytes would have been needed 210 if the operands were not implicit. Word constants greater 
than 127 are loaded by a single instruction that has an explicit operand contained in two bytes. The 
space problem is one reason why an interpreter was chosen. A large program, like the PASCAL compiler, 
could be too large for memory. Using an interpreter, a simple virtual memory system could be implemented. 
To accommodate virtual memory, the procedure structure of UCSD P-code was changed. A segment, consisting 
of one or more PASCAL procedures, is the basic unit to be loaded into memory for execution. A program 
may contain several segments which are loaded in memory only if an enclosed procedure has an activation 
record on the stack. The procedure calls and returns were changed to reflect the new structure. The call 
external procedure instruction was added for calling a procedure in a segment other than the executing 
segment. The use of PASCAL for the systems programming language also affected the procedure call structure. 
A pointer called the BASE pointer is used for global data access. When control is passed to a program, 
the call base procedure is used to create an activation record and set the BASE pointer to the new activation 
record. A special return instruction is used to stop a program and return to the program that started 
it, reseting the BASE pointer properly. Other additions to the instruction set help with space at runtime. 
Packed data is supported by packed field loads and stores. Packed arrays are indexed by a special instruction. 
A complete set of instructions work with byte arrays and a new data type for UCSD PASCAL, psuedo dynamic 
strings. The execution speed of the compile was also considered. The symbol table search routines were 
put into the interpreter as standard procedures. Since a lot of time is used in the search routines, 
not interpreting these routines has resulted in a relatively fast compiler. Interpreting these routines 
could have produced an unacceptably slow compiler. LASL P-CODE In 1973 development of a new programming 
language began at Los Alamos Scientific Laboratory. The language, MODEL[7], was to be based on PASCAL 
but including extensions which would make it more suited to large applications which need to interact 
with existing software. It was intended to be a portable language but also efficient enough for production 
and systems applications. To make MODEL portable, the final compiler was to be written in MODEL and produce 
a machine independant intermediate code. P-4 P-code was chosen as the basis for the inter- mediate code. 
The format of the P-code was changed from a fixed field format to a free format. Other changes were done 
because of the need to interact with existing software and the need of efficient code. Because of efficiency 
considerations, interpretation was out of the question. A P-code translator must be written. During the 
development of LASL P-code it was known that the P-code was to be translated and that the target machine 
was a CRAY-1 computer. The most noticeable change in LASL P-code is the addressing. The basic addressing 
scheme is the same as P-4 P-code. Two new types of memory have been added, registers and common block 
memory. The addressing unit has been changed from words to bits, and a data length in bits has been added. 
The registers were added to allow for efficient use of machine registers. The registers are divided up 
into two types of registers, B and T registers. Local variables and parameters use the registers. For 
the CRAY-1, these registers are directly mapped to the CRAY registers. Some CRAY registers are left for 
the translator to manage as the execution stack. Common block memory was added to communi- cate with 
existing software, usually written in FORTRAN. Each common block is identified 211 by unique block number. 
An instruction was added to give a name and a size to each common block. One advantage of using bit addressing 
and field widths comes when data packing is done. No new instructions are needed because the addresses 
can start anywhere in a word and specify any sized field. The problem of deciding whether a full word 
or partial word is requested is left for the translator. Some changes were a direct result of MODEL. 
The functionality of the indexed jump was changed to include the ELSE case of the CASE statement. The 
value return mechanism was extended to return multiple valued results. A true jump was added to simplify 
code generation for the REPEAT statement. ANALYSIS It is evident that all three P-codes came from the 
same source. The stack computers have very strong similarities including the instruction sets. But this 
did not keep the final languages the same. The changes to the P-codes are not without positive and negative 
effects. Both UCSD P-code and LASL P-code are a more powerful language than P-4 P-code. This is because 
of more standard procedures, the capability for data packing, and other added instructions. But the power 
was bought at the expense of implementation ease. P-4 P-code is by far the easiest to implement. Portablility 
has also suffered in areas other than the ease of implementation. UCSD P-code is locked into a small 
machine with a 16 bit word. The PASCAL system must be brought along with any implementation because of 
the heavy reliance on system software to prepare the stack and necessary pointers for program execution. 
LASL P-code is not as highly limited as UCSD P-code but it is still not as generally portable as P-4 
P-code. The architecture of the CRAY-1 has had too much effect on the P-code. The P-code registers appear 
to have been taken directly from the CRAY-1, even the names are the same. This is also seen in the CRAY 
I/0 instructions that are a part of LASL P-code. Portability also suffers by the complexity of the translator 
for LASL P-code. Addressing considerations, possible optimizations and vectorization (necesszry on the 
CRAY-1 for efficient execution) produce a very complex translator. UCSD P-code still has some problem 
with space. The space saving techniques did help get the system down to a usable size but the amount 
of code is still large and space is still limited. CONCLUSION Portable PASCAL and P-code have helped 
make PASCAL more avaliable. Building on this base, several versions of P-code have been produced. The 
two general methods of modification, evolution and redesign, have been represented by UCSD P-code and 
LASL P-code respectively. UCSD P-code was designed to implement PASCAL on small computers. This was accomplished 
by giving a more rigid definition of the P-machine and by applying various space saving techniques. LASL 
P-code was designed to support MODEL in a production environment. Changes in addressing were made to 
provide an interface to existing software and to help efficiency at execution time. In both cases a reasonable 
solution to the given problem was reached through a version of P-code. In both cases a lot of creative 
effort went into these modifications. Although these versions are not the only versions in existence, 
duplicate effort will result if new users of P-code do not refer to this or other earlier work. These 
two versions do show the major areas of modification and future work with P-code would do well to look 
at this older work before reinventing "new" P-code constructs. REFERENCES i. U. Ammann, "The method of 
structured programming applied to the development of a compiler", Proc. ACM Int. Comp. Sym. Davos, 1973 
(Ed. A. GUnther, B. Levrat and H. Lipps), North Holland Publishing Co., 1974, p. 93. 2. R. E. Berry, 
"Experience with the Pascal P-Compiler", Software -Practice and Experience, 8, No. 5, 617-627 (1978). 
 3. C. Bron and W. De Vries, "A PASCAL Compiler for PDP 11 Minicomputers", Software -Practice and Experience, 
6, No. 1, 109-116 (1976). 4. C. O. Grosse-Lindemann and H. H. Nagel, "Postlude to a Pascal-compiler 
bootstrap on a DECSystem-lO", Software -Practice and Experience, 6, No. i, 29-42 (1976). 5. K. Jensen 
and N. Wirth, PASCAL -User Manual and Report, Springer-Verlag, Berlin, 1974.  6, O. Lecarme and M. Peyrolle-Thomas, 
"Self-compiling Compilers: An Appraisal of their Implementation and Portability", Software -Practice 
and Experience, 8, No. 2, 149-170 (1978). 7. J. B. Morris, A Manual for the MODEL Programming Language, 
Los Alamos Scientific Laboratory, Los Alamos, New Mexico, 1976. 8. K. V. Nori, U. Ammann, K. Jensen 
and  H. Nageli, The Pascal (P) Compiler Implementation Notes, Institut fur Informatik, Eidgenossische 
Technische Hochschule, Zurich, 1975. 9. K. A. Shillington and G. M. Ackland (editors), UCSD PASCAL Version 
1.5, Institute for Information Systems, University of California, San Diego, 1978. i0. Linda Zucconi, 
private communications, Los Alamos Scientific Laboratory, Los Alamos, New Mexico (1978 and 1979).
			