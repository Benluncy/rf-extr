
 Parity-Based Loss Recovery for Reliable Multicast Transmission J&#38;g Nonnenmacher, Ernst Biersack, 
Don Towsley* Institut Eurecom Dept. of Computer Science 06904 Sophia-Antipolis Cedex France Univ. of 
Massachusetts, {nonnen,erbi}@eurecom.fr Amherst, MA 01003-4610, USA towsley@cs.umass.edu Abstract We 
investigate how FEC (Forward Error Correction) can be combined with ARQ (Automatic Repeat Request) to 
achieve scalable reliable multicast transmission. We con- sider the two scenarios where FEC is introduced 
as a trans- parent layer underneath a reliable muIticast layer that uses ARQ, and where FEC and ARQ are 
both integrated into a single layer that uses the retransmission of parity data to recover from the loss 
of original data packets. To evaluate the performance improvements due to FEC, we consider different 
types of loss behaviors (spatialIy or temporally correlated loss, homogeneous or heterogeneous loss) 
and loss rates for up to 10 receivers. Our results show that introducing FEC as a layer below ARQ can 
im- prove multicast transmission efficiency and scalability and that there are substantial additional 
improvements when the two are integrated. 1 Introduction The deployment of the MBONE made multi-point 
com-munication across the Internet feasible and fostered the development of applications for video and 
audio distribu-tion or collaborative work such as vie, vat, ivs, or wb. Most of these applications require 
real-time delivery and were built to tolerate loss or to perform partial (e.g. ivs) or complete loss 
recovery (e.g. wb) at the application level. There is, however, a growing number of applications that 
could benefit from a reliable multicast transport ser-vice, To deal with loss, two well known techniques 
ex-ist: ARQ (Automatic Repeat Request), which retransmits the lost data and FEC (Forward Error Correction) 
which transmits redundant data, called parity data along with the orjghml data. If the amount of original 
data lost is not more than the amount of parity data sent, the parity data can be used to reconstruct 
the Iost original data. The work of D. Towsley was supported in part by INRIA and the National Science 
Foundation under grants NCR-95-08274 and CDA-96.02639. Any opinions, findings, and conclusions or recom-mendations 
expressed in this paper are those of the authors and do not necessarily reflect the views of the National 
Science Foundation. permission to make digital/hard copy of part or all this work tor personal or classroom 
use is granted without fee provided that coplee are not made or distributed for profit or commercial 
advan-tage, the copyright notice, the title of the publication and its date appear, and notice is given 
that copying is by permission of ACM, Inc. To copy otherwise, to republish, to post on servers, or to 
redistribute to lists, requires prior specific permission and/or a fee. SIGCOMM 97 Cannes; France 0 1997 
ACM 0.89791.905-X197/0009...$3.50 FEC by itself cannot provide fulI reliability. However, when coupled 
with ARQ, FEC can produce inherently scalable reliable multicast transport protocoIs. If intro- duced 
as a separate layer beneath the AR&#38; layer, it has the effect of reducing the packet loss probability 
and, thus, reducing the number of packet retransmissions and net-work bandwidth requirements. If integrated 
with ARQ, then FEC has a very high repair efficiency and therefore substantially reduces the network 
bandwidth requirements of an application requiring reliable multicast data trans-port. Integrated FEC/ARQ 
schemes are also referred to in the literature as hybrid ARQ [l]. In this paper, we study the effectiveness 
of both ap-proaches of combining FEC wjth ARQ. We find that a layered approach makes more efficient use 
of network re-sources than an approach based solely on ARQ except in conditions where losses are temporally 
very bursty. When integrated with ARQ, FEC provides a substantial reduc-tion in the usage of network 
resources, even when losses are temporally correlated. Moreover, increased process-ing efficiency is 
achieved by the sender and receivers, even when FEC is implemented in software. There is a large body 
literature on the subject of reli- able multicast -several of which focus on the use of FEC. An early 
paper by Metzner [2] studied the use of hybrid ARQ for reliable multi-point transmission in the context 
of a block data transfer with independent and homoge-neous loss. Metzner suggested the use of Reed Solomon 
codes for parity computation and quantified the benefits of the scheme in terms of the mean number of 
parity packets transmitted in the first retransmission round for a small number (up to 50) of receivers. 
Recently, Huitema [3] studied the performance of FEC when used as a layer underneath the reliable multicast 
layer for the case of independent and homogeneous loss. Most other reliable multicast protocols use only 
ARQ to assure reliability. In order to achieve scalability and avoid feedback implosion these protocols 
use slotting and damping [4, 51 or introduce a hierarchy [6, 7, 81. Both solutions are not without disadvantages: 
. Slotting and damping requires a careful choice/ es-timation of parameters. . Introducing a hierarchy 
poses the problem of se-Iecting designated intermediate nodes that are re-quired to have special functionalities. 
Also special care must be taken to cope with the failure of a des- ignated node. Coupled with these 
approaches, however, FEC can in- the maximum number of packets lost by any receiver crease scalability. 
but not their sequence numbers. Feedback is reduced The rest. of the. paper is organized as follows. 
Section from per-packet feedback to per-TG feedback. 2 provides a brief overview of FEC. Section 3 compares 
the two approaches on how to combine FEC and ARQ in a reliable multicast protocol stack and evaluates 
their performance in the context of homogeneous and hetero-geneous populations of receivers. Section 
4 considers the performance of the two approaches in the presence of spa- tially and temporally correlated 
losses. As the focus of Sections 3 and 4 wiJJ be on network bandwidth require-ments, Section 5 will focus 
on the end-host processing re-quirements by comparing the performance of two generic reliable multicast 
protocols: one with and one without FEC. Conclusions are drawn in Section 6. 2 How FEC works  2.1 Theory 
The use of Forward Error Correction (FEC), as an al- ternative or complement to ARQ for reliable multicast 
transmission, has been investigated by different authors [2, 9, 10, 3, 111. FEC involves the transmission 
of original data along with additional redundant data which can be used to reconstruct the original data 
if some of it is lost,. A Reed Solomon Erasure correcting code (RSE code), such as the one described 
by McAuley [12], is used to gen- erate the redundant data. Suppose we have Cz data packets dl,dz,..., 
dr; each of which is P bits long. The RSE en-cbder takes dl, , . . , dr: and produces parities ~1,. . 
. ,p,,-k each P bits long. We also use the parameter h to denote the number n -k of parities. For the 
purpose of coding, we consider the data packets dl, . . . , dk as elements of the Galois field GF(2P) 
[13] and define the polynomial F(X) as F(X) = dl + d2X f . . . + d#- . 0) If LY Js the primitive element 
of GF(2P), the RSE encoder computes pj = F(&#38; ) for j E (1,. . . , n -L}. The RSE decoder at the receiver 
side can reconstruct the data packets dl , . , . , dk, whenever it has received any k out of the n packets 
dr , . . . , dk,pi, . . . ,p+k. The k data packets will also be referred to as a transmission group 
or TG. The n packets dl,. . . , dk,pl, . . . ,p,,-r: will be re-ferred to as an FEC block. Sending the 
original data as the first k packets of the FEC block simplifies decoding: . If all the 12 data packets 
are received, no decoding at all is required at the receiver. . If I < n -li out of the Iz data packets 
are lost, the decoding overhead is proportional to 1. There are multiple benefits using the parity packets 
for loss recovery instead of retransmitting the lost packets: . Improved transmission efficiency: A single 
parity packet can be used to repair the loss of any one of the n data packets. This means that a single 
parity packet can repair the loss of different data packets at different receivers. . Improved scalability 
in terms of group size: In an ARQ scheme retransmitting the original pack-ets that are lost the sender 
needs to know the se-quence numbers of the lost packets. Using parity packets for loss repair, the sender 
needs only to know . Reduction of unnecessary receptions: Multicasting retransmissions for loss recovery 
results in unnecessary receptions at all receivers that do not need the retransmission. Such duplicate 
pack-ets waste transmission bandwidth and processing ca-pacity. As we wiIl show Iater, the number of 
dupli- cate packets received due to retransmissions by any receiver can be reduced nearly to zero with 
parity transmission.  2.2 Practical Aspects The size P of a packet will typically be in the order of 
several hundred bits (ATM cell) to several thousand bits (IP datagram). RSE coders that operate on symbols 
of that size are difficult to implement. The hardware archi- tecture for the RSE coder proposed by McAuley 
[12] uses a symbol size m with m = 8 or m = 32. The software (SW) implementation of the RSE coder by 
Rizzo [14] uses m= 8. In the case of P > m, we need to choose P = Se m where S is an integer. We then 
perform multiple parallel RSE encodings for each m-bit symbol in each packet (see Figure 2 of [12]). 
For example, we perform RSE on the fu-st m-bit symbol of each of the k packets and obtain n-k m-bit parity 
packets. We repeat the same on the 2nd m bit symbol of the k packets and so on. The number of elements 
in a Galois field GF(2 7 is limited to 2 elements. Therefore, the symbol size m must be picked sufficiently 
large such that n < 2m. For our purposes, m = 8 will be sufficiently large. Figure 1 shows the coding 
and decoding throughput of the RSE coder by Rizzo. We measured the throughput on a Pen&#38;m PC 133 running 
Linux wivith packet. size P = 1 KByte. The encoding throughput denotes the number of data packets that 
can be processed per second, given that h = n -k parity packets are produced for every k original data 
packets. The decoding throughput denotes the rate at which data packets can be reconstructed per second, 
given that h out of every k data packets are lost and must be reconstructed. We see that the throughput 
is inversely proportional to he 1;. The throughput of the coder is largely sufficient for many current 
applications. It can be seen that h = 1 par- ity packet for k = 7 original packets (14.3% redundancy) 
is coded with a speed of 8000 original packets per second, which means that the first redundant. packet, 
for a trans-mission group of size k = i is available after 0.125ms. Such high performance and the fact 
that the bandwidth requirements of many current multicast applications are typically less than 100 KByte/s, 
suggests that coding will not affect the packet sending rate and, hence, loss recov- ery using parity 
data is feasible. This point will be further investigated in section 5.1. 3 Placement of FEC in a Reliable 
Multicast Protocol Stack There are a number of different ways that FEC can be introduced to a reliable 
multicast protocol stack. The simplest approach is to add a layer responsibIe for FEC between the network 
layer and the reliable multicast layer 20 so 100 re4d0undancy~] Figure 1: Coding and decoding rates 
in packet/s with respect to the redundancy h/k and the transmission group size k. (RM), The second approach 
is to integrate FEC with re-liable multicast and place it into one layer. These ap proaches, henceforth 
referred to as layered FEC and in-tegrated FEC are illustrated in Figure 2. The advantage of layered 
FEC is the separation of FEC and reliable multicast. Thus a designer can focus on the problem of reliable 
multicast without worrying about the intricacies of FEC. In addition, an FEC layer can be used by other 
applications that can benefit from a more reli-able network. Huitema [3] has established the benefits 
of layered FEC in terms of reducing the network traffic. We will review this work in Section 3.1. (4 
(b) Figure 2: (a) Layered FEC. (b) Integrated FEC. Given the simplicity of layered FEC and its potential 
performance benefits, it is reasonable to ask whether inte-grating FEC and reliable multicast can provide 
additional performance benefits that would outweigh the additional complexity required of such an approach. 
We shah exam-ine this question in Section 3.2. The emphasis of this section and Section 4 will be to 
compare the average number of transmissions required to transmit a packet reliably to ah receivers under 
layered FEC, integrated FEC, and no FEC. This metric is impor- tant because it reflects directly the 
network bandwidth re-quired to support reliable multicast. In addition, it is also correlated to the 
processing requirements at the end/hosts (which will be examined in Section 5). Last, although we do 
not examine the latency reduction benefits of FEC, we expect a reduction in the required number of transmissions 
wiJJ often lead to a reduction in latency. Throughout this section we wilJ consider a single sender with 
an infinite supply of packets sending to R receivers. We assume that packet losses occur as independent 
events, both spatially and temporally with probability p. We ex- amine the effect that different loss 
probabilities have on the performance of reliable multicast in Section 3.3. 3.1 Layered FEC Consider 
layered FEC based on the RSE codes described in the previous section. At the sender, the RM layer passes 
the packets to be sent to the FEC layer. The FEC layer takes k original packets, produces h parities 
and sends ah of the packets to the receiving FEC layer. Whenever the FEC layer receives an orJgJnaJ packet, 
it passes it to the RM layer and keeps a copy for decoding purposes in case of loss. Whenever the FEC 
layer receives at least k out of k + h packets, aJ.l of the lost o$inal packets are reconstructed and 
delivered to the RM layer. If fewer than k+h packets are received, the lost original packets cam-rot 
be reconstructed and the FEC layer discards the received parity packets. The sending RM layer then retransmits 
the lost originals as part of a new group. Let q(k, n,p) denote the probability that the RM re-ceiver 
does not receive a random data paclcet from the TG sent by the RM sender. In particular, packet i from 
a TG is lost at the RM receiver if it is lost by the FEC receiver and more than h-l = n-k-l out of the 
other n-l pack-ets from the FEC block are lost. This was first proposed and studied in [3]. Therefore 
the packet loss probability at the RM receiver is for 15 k < n given by / n-k-l , \ \ q(k,n,p)=p/l-c 
( ni1 )$(I-p) - - ) \ JZO - / (2) Let M denote the number of times an arbitrary data packet is transmitted 
before all RM receivers have re-ceived it. The probability that fewer than i + 1 data packet transmissions 
are required by a single RM receiver is 1 -q(k, n,p)*. The cumulative distribution of Al is therefore: 
P(M 2 i) = (1 -q(k, n,p)i)R Let M be the equivalent to M with the additionally ac-counting of parity 
packets added at the FEC layer. This quantity is difficult to define precisely; however, its aver-age 
is given by n/k - E[M ] aM1 = = n/k.gl-P(M <i) (3) Figures 3 and 4 illustrate the typical behavior of 
lay- ered FEC for different size transmission groups, k = 7,20, 100 when the numbers of parity packets 
is 2 and 7. First, we observe a decrease in the expected number of trans- missions when FEC is introduced 
and the receiver popu-lation is large, an observation first made in [3]. Second, we observe that the 
number of parity packets needs to be matched to the TG size. For example, a TG of size Influence of 
k on layered FEC, p = 0.01, h = 2 -no FEC - - layered FEC, k = 7 --layered FEC, k = 20 layered FEC, k 
= 100 PI i2 IO IO4 number of receivers R Figure 3: Non FEC versus layered FEC with h = 2par-ity packets 
for different TG sizes h-= 7,20,100and loss probability p = 10w2. Influence of k on layered FEC, p = 
0.01, h = 7 I 1. I -no FEC --layered FEC, k = 7 --layered FEC, k = 20 lo* lo4 lo6 number of receivers 
R Figure 4: Non FEC versus layered FEC with h = 7 par-ity packets for different TG sizes Ic = 7,20,100 
and loss probability p = 10e2. k = 100 with h = 2 parity packets performs worse than TGs of sizes 7 or 
20 with the same number of parity pack-ets. On the other hand a TG of size 100 coupled with 7 parity 
packets performs better than TGs of sizes 7 and 20 for receiver populations in the 1 -200,000range. We 
have observed similar behavior for a wide range of packet loss probabilities. 3.2 Integrated FEC We 
turn our attention to integrated FEC where the RM layer uses FEC to enhance its performance. There are 
many ways that FEC can be included within the RM layer. We will propose and evaluate one such protocol 
in section 5.1.In order to assess the potential benefits without becoming involved in a detailed analysis, 
we will study the following generic protocol. . The sender sends a TG along with a 5 h parity packets 
from the associated FEC block. Each time that a receiver detects a missing packet, it requests a new 
parity packet from the sender until it has a sufficient number of packets (b) out of the n packets in 
the FEC block to complete the decoding of all K packets. The sender multicasts parity packets in response 
to requests until all parity packets associated with the TG have been used up. At that time, packets 
re-quiring retransmission are placed into a new TG. We first derive an unachievable lower bound to the 
ex-petted number of packet transmissions required to trans-mit an arbitrary packet to all receivers. 
This corresponds to the performance of the above protocol when n = co. Let L, denote the number of additional 
packet transmis-sions required by a random receiver. The distribution of L, is P(L, = 0) = 2 ( : )p (l-p)-J, 
j=o k+a+m-1=m) = P(Lr pm+v -PI", k-l > m= 1,... Let L denote the maximum number of additional pack-ets 
that are transmitted. Its cumulative distribution is given by P(L~m)=[P(L,~7n)]R, m=O,l,... (4) where 
F(L, s 778)= 2 P(Lr = i), m=O,l,... i=o The mean number of additional transmissions is E[L]=&#38;-P(Lgn)). 
(5) m=O Finally, defining M as before, the mean number of transmissions per arbitrary packet is E[M] 
= (E[L] + k + a)/k. (6) Next we derive an expression for E[M] in the case that n < 03. Let B denote the 
number of times that an arbi-trary packet was transmitted, i.e., the number of blocks transmitted that 
included it. Note that the transmission of the first B -1 groups require the transmission of n packets 
each. On the other hand, the number of packets transmitted as part of the last group is a random vari-able 
whose distribution is identical to that of L given that L 5 n. Given this, the expected number of transmissions 
is -Wfl = ((WI -1) + WI L I 4/n = f ~(l-(~-g(k,n,p) )R-l kl +ig(l-P(LSmjLSn)) m=o Influence of k on 
idealized integrated FEC, p = 0.01 -no FEC --integr. FEC, k = 7 --integr. FEC, k = 20 Figure 5: E[M] 
versus R for TG size of 7 and loss proba-bility of p = 10 . Layered FEC versus integrated FEC. 1 1 10 
100 1000 10000 100000 1000000 R Figure 6: E[M] versus R for TG size of 7 and loss proba-bility of p 
= 10- . Integrated FEC with k = 7 for different values of h. where q(k, n,p) is computed using expression 
(2) and the properly conditioned version of P(L 5 m) given in (4) is P(LjmJL_<n). Figure 5 compares the 
expected number of transmis-sions per correctly received packet under layered FEC to a lower bound under 
integrated FEC for a TG size of 7 and loss probability p = 10F2. We observe that integrated FEC has the 
potential for a large performance improve-ment over layered FEC. In Figure 6 we examine integrated FEC 
more closely to determine how many parity packets are needed to achieve a performance close to that of 
the lower bound. We observe that in the case of a TG size of 7, 3 parity packets suffice to attain the 
lower bound for receiver populations of up to 100,000 to 200,000. Hence-forth, we will use the lower 
bound when comparing inte-grated FEC to other approaches. Last, Figures 7 and 8 illustrate the influence 
of the TG size, b, on the performance of integrated FEC. They show that increasing the transmission group 
size reduces the number of transmissions for integrated FEC nearly down to one, even for a large number 
of receivers. On the other hand a relatively small performance gain is achieved by increasing the number 
of data packets, k, in a block. We observe from Figure S that this behavior is insensi-tive to the loss 
probability -a large increase in the trans- .,,. . .._, 22    ~~-~~~~~~~~~:::I~ 10 lo* IO4 IO number 
of receivers R  Figure 7: Influence of number of receivers on integrated FEC for different TG sizes 
for packet loss probability p = 10-2. Influence of k on idealized integrated FEC, R = 1000 -r : . 1 
-no FEC --integr. FEC, k = 7 -I-integr. FEC, k = 20 : ::.. _---(--- : -id------ -+-e-.--. _____---e----T-----I-/ 
_,___,_ -._,T.-i-T:T:f,-:-.,, -2 10-l packet lo&#38; probability p Figure 8: Influence of loss probability 
on integrated FEC for different TG sizes for R = 1000 receivers. mission group size has little effect 
on the performance of integrated FEC. 3.3 Heterogeneous Receivers We end this section with a discussion 
of how our observa-tions change in the presence of heterogeneous receivers, i.e. receivers with different 
loss probabilities. Let p(r) denote the probability that receiver r = 1,. . . , R loses a packet. If 
we continue to assume that losses are spatially and tem-porally independent, then we have for layered 
FEC Wl=~&#38; 1-q(kn,p(r)) ))n/k (7) i=o 2-=1 In the case of integrated FEC, E[Mj is given by equation 
(6) with P(L<+fiP(L,jm) @I T-=1 Here P(Lr 5 m) is calculated using p(r) in place of p. We consider a 
population consisting of two classes of het- erogeneous receivers, R. (1 - V) receivers with packet loss 
probability p(r) = 10B2 and R. v high loss receivers with packet loss probability p(r) = 0.25. This allows 
us to vary the percentage v of high loss receivers among all receivers. We investigate the degradation 
in performance (in-crease in E[MJ) as the number of high loss receivers in-creases. In particular, we 
take the percentage, v x lOO%, of high loss receivers to be l%, 5% 25% of the whole group. The results 
for reliable multicast without FEC (Figure 9) and with integrated FEC (Figure 10) are similar. It can 
be seen that the influence of the high loss receivers increases with the number of receivers. For a group 
of 1 million receivers, the presence of 10,000 high loss receivers (1% of the population) is sufficient 
to double the expected number of transmissions (Figures 9 and 10). On the other hand, the presence of 
one high loss receiver in a population of 100 has much less effect on the expected number of transmissions. 
Last, the presence of high loss receivers has a greater effect in the case of integrated FEC than no 
FEC. non-FEC. hetero 2 lo/ IO2 10 number of receivers R Figure 9: Reliable multicast for different heterogenities 
without FEC. For real multicast groups the percentage of high loss receivers is in most cases determined 
by the position of a high loss router in the multicast tree and the number of receivers that experience 
the high loss of this router. In this case loss is spatially correlated as the receivers downstream will 
be equally affected by a loss. In the next section we will examine the influence of spatial correlation 
on reliable multicast with FEC. 4 Effect of correlated loss on the FEC/ARQ perfor-mance Until now, our 
focus has been on a scenario where losses are spatially and temporally uncorrelated. In this section 
we relax each of these assumptions in an attempt to un-derstand whether and how correlated losses may 
affect our conclusions, Section 4.1 focusses on spatial loss correlation and Section 4.2 focusses on 
temporal loss correlation. integrated FEC (k=7), hater0 2 3.5. -high loss: 0% . _... 3 --high loss: 
1% . . ,_,.i /_ ,.I c .* .-.-high loss: 5% . . * Ma _.. ..* .* E ,.. I . *. n .. high loss: 25% . . 
. . . . I ?.: . . ...>/ . . . . , 02.5 . *_*. - ... . I . _.. . I *. .** +.. ,. ,*.. E ,. .. . . ,* 
2 2 _ . . . . . . . . . . . . . . . . . . . ..,:,. :... ..,4 ..;.+,r.. .,. . ,... ._.. ,.., , , .._ 2 
number of receivers R Figure 10: Reliable multicast for different heterogenities with integrated FEC. 
 4.1 Shared Loss Consider a sender and R receivers connected by an arbi-trary multicast tree. Until 
now we have assumed that all losses occur as independent events at the receivers. In a real situation, 
however, there will be loss within the tree which will be shared by one or more receiver. In this section 
we explore whether and how the presence of such losses affects the conclusions which we have drawn from 
the independent loss model. In order to investigate the impact of shared Ioss we will consider the following 
two loss models: independent loss: Only the receivers lose pack-ets, each receiver independently with 
probability p. Other nodes of the multicast tree do not lose packets at all. FBT shared loss: We consider 
a full binary tree (FBT) of height d, where losses occur as independent events at each node (including 
source and leaves) with the probability pride. The source is the root of the tree and the receivers are 
the leaves. Here pnde is chosen such that the loss probability at each receiver is p: p = 1-(1 -ppnc!de)(d+l). 
 Note that each receiver experiences the same loss prob- ability in both models and that there is no 
temporal loss correlation. The expected number of transmissions required to cor- rectly transmit a packet 
reliably over a FBT was first de- rived in [15]. Because the calculation of this quantity is computationally 
intensive even for R = 64 receivers, \ve use simulation to investigate the im act of shared loss for 
large numbers of receivers: R = 2B, d = 0,. . . ,17. The packet loss probability is p = 10m2, FEC was 
coded for transmission groups of size k = 7 and one parity packet is transmitted (h = 1) in the case 
of layered FEC. Layered FEC transmits parities whether or not a loss occurs. A transmitted parity is 
able to repair different losses at different receivers. When shared loss occurs, this parity does not 
exhibit the same repair efficiency as it does in the presence of independent losses and may be transmitted 
needlessly. Figure 11 shows that the overhead of transmitted parities with layered FEC will be amortized 
by the repair efficiency for a number of receivers R > 60 in the case of shared loss, while in the case 
of independent loss layered FEC is already efficient for R > 20. Hence, for real trees (here modeled 
by a full binary tree) layered FEC is worthwhile only for multicast group sizes that are larger than 
those that the results for independent loss suggest. The impact of shared loss on FEC is shown in Figure 
11 for layered FEC and in figure 12 for integrated FEC. First, we observe that that the number of transmissions 
is lower (often substantially) when losses are shared than when they are independent. Second, we observe 
that our observations drawn from the independent loss model in the previous section continue to hold. 
However, as mentioned previously, receiver group sizes need to be larger before the benefits of layered 
FEC appear. Furthermore, the benefits of integrated FEC, while remaining substantial, are not as great 
when losses are shared. Layered FEC, p = 0.01, k = 7, h = 1 number of receivers R Figure 11: Layered 
FEC compared with non-FEC for In- dependent and for FBT Shared Loss. Integrated FEC, p = 0.01, k = 7 
-,- -non-FEC 3 --integrated FEC number of receivers R Figure 12: Integrated FEC compared with non-FEC 
for Independent and for FBT Shared Loss. Another useful observation is that the curves for shared loss 
appear as translated versions of the independent loss curves and that the performance of a group of size 
R in either the presence or absence of FEC can be determined by studying the behavior of a group of size 
Rindep 5 R under the independent loss model. In fact, the extreme case is when all losses are shared 
by all receivers in which caSe the system can be modeled by a single receiver under the independent loss 
model. This carries the following important implication: . Adaptive transport mechanisms that are based 
on measurements of receiver loss rates will overestimate the number of transmissions of reliable multicast 
if they model losses as independent events. Coupled with FEC this could lead to an overestimate of the 
amount of redundancy needed. Our results show that shared loss will result in a lower number of transmissions 
compared to independent loss for all recovery schemes and that the improvement of reliable multicast 
transmission due to FEC (compare non-FEC and FEC) is lower when losses are shared than when they are 
totally uncorrelated. 4.2 Burst losses In this section we reexamine the benefits of FEC when losses 
are bm-sty. In particular, we assume that packet losses are described by a two state continuous time 
Markov chain {X,} where Xt E (O,l}. A packet transferred at time t is lost if Xt = 1 and not lost if 
Xt = 0. The infinitesimal generator of this Markov chain is The stationary distribution associated with 
this chain is r = (TO, nl) where no = PI/(PO + ~1) and ~1 = PO/(PO + ~1). Let pi,,(t) denote the probability 
that the process is in state j at time t + r given that it was in state i at time 7, Pi,J(t) = P(X,+, 
= j 1 X, = i). Expressions for these probabilities can be found in [16, ch. 61. We now consider what 
effect this kind of loss process has on the expected number of packet transmissions re-quired for each 
correctly received packet in the absence of FEC, with layered FEC, and with integrated FEC. In all cases, 
we assume that the loss processes are independent from receiver to receiver. When burst losses occur, 
the timing of the retrans-missions has an influence on the performance of the loss recovery. To further 
investigate this point, w-e consider different cases as shown in figure 13. no FEC: In the absence of 
FEC, we assume the time between successive transmissions of the same packet to be spaced by time A f 
T. Layered FEC: For layered FEC, we assume the time between the sending of the last packet of a FEC block 
and the time of the sending of the first packet in the successive FEC block, containing the retrans- 
mission, to be spaced by time A + T. We further assume that a packet keeps its place in the FEC block 
for retransmission. For integrated FEC, the timing considerations depend on the protocol that implements 
loss recovery by parity transmissions. We distinguish between two cases: transmitted needlessly. Figure 
11 shows that the overhead of transmitted parities with layered FEC will be amortized by the repair efficiency 
for a number of receivers R > 60 in the case of shared loss, while in the case of independent loss layered 
FEC is already efficient for R > 20. Hence, for real trees (here modeled by a full binary tree) layered 
FEC is worthwhile only for multicast group sizes that are larger than those that the results for independent 
loss suggest. The impact of shared loss on FEC is shown in Figure 11 for layered FEC and in figure 12 
for integrated FEC. First, we observe that that the number of transmissions is lower (often substantially) 
when losses are shared than when they are independent. Second, we observe that our observations drawn 
from the independent loss model in the previous section continue to hold. However, as mentioned previously, 
receiver group sizes need to be larger before the benefits of layered FEC appear. tithermore, the benefits 
of integrated FEC, while remaining substantial, are not as great when losses are shared. Layered FEC, 
p = 0.01, k = 7, h = 1 ,U -non-FEC 3 --layered FEC ,.. I ,.-  number of receivers F? Figure 11: Layered 
FEC compared with non-FEC for In- dependent and for FBT Shared Loss. Integrated FEC, p = 0.01, k = 7 
u,.J -non-FEC 3 --integrated FEC number of receivers R Figure 12: Integrated FEC compared with non-FEC 
for Independent and for FBT Shared Loss. Another useful observation is that the curves for shared loss 
appear as translated versions of the independent loss curves and that the performance of a group of size 
R in either the presence or absence of FEC can be determined by studying the behavior of a group of size 
R;,,dep 5 R under the independent loss model. In fact, the extreme case is when all losses are shared 
by all receivers in which case the system can be modeled by a single receiver under the independent loss 
model. This carries the following important implication: . Adaptive transport mechanisms that are based 
on measurements of receiver loss rates will overestimate the number of transmissions of reliable multicast 
if they model losses as independent events. Coupled with FEC this could lead to an overestimate of the 
amount of redundancy needed. Our results show that shared loss will result in a lower number of transmissions 
compared to independent loss for all recovery schemes and that the improvement of reliable multicast 
transmission due to FEC (compare non-FEC and FEC) is lower when losses are shared than when they are 
totally uncorrelated. 4.2 Burst losses In this section we reexamine the benefits of FEC when losses are 
bursty. In particular, we assume that packet losses are described by a two state continuous time Markov 
chain {X,} where Xt E {O,l}. A packet transferred at time t is lost if Xt = 1 and not lost if Xt = 0. 
The infinitesimal generator of this Markov chain is The stationary distribution associated with this 
chain is H = (TO, m) where TO = ,W/(PO + ~1) and ?rl = PO/(PO + ~1). Let pi,,(t) denote the probability 
that the process is in state j at time t+~ given that it was in state i at time T, p~,~(t) = P(X,+t = 
jlXr = i). E?rpressions for these probabilities can be found in [16, ch. 61. We now consider what effect 
this kind of loss process has on the expected number of packet transmissions re-quired for each correctly 
received packet in the absence of FEC, with layered FEC, and with integrated FEC. In all cases, we assume 
that the loss processes are independent from receiver to receiver. When burst losses occur, the timing 
of the retrans-missions has an influence on the performance of the loss recovery. To further investigate 
this point, we consider different cases as shown in figure 13. . no FEC: In the absence of FEC, we assume 
the time between successive transmissions of the same packet to be spaced by time A + T. . Layered FEC: 
For layered FEC, we assume the time between the sending of the last packet of a FEC block and the time 
of the sending of the first packet in the successive FEC block, containing the retrans- mission, to be 
spaced by time A + T. We further assume that a packet keeps its place in the FEC block for retransmission. 
For integrated FEC, the timing considerations depend on the protocol that implements loss recovery by 
parity transmissions. We distinguish between two cases: . Integrated FEC 1: Parity packets are transmit-ted 
with the same rate l/A immediately following the original packets. When a receiver has received enough 
parity packets, it leaves the multicast group. In this scheme no feedback is needed for loss recovery 
and there is no unnecessary delivery and reception of parity packets, provided that the time needed to 
depart from the group is smaller than the packet inter-arrival time. . Integrated FEC 2: This protocol 
corresponds to a hybrid ARQ protocol, where receivers send NAKs indicating the number of missing packets. 
Feedback is sent after the transmission of the original packets, after the first retransmission of parities, 
etc.. Subse-quently the sender transmits the maximum number of parity packets needed by any receiver. 
 A well-known technique that allows FEC to deal with burst loss is interleaving. Under interleaving the 
sender spreads the transmission of a FEC block over an interval that is longer than the loss burst length. 
Integrated FEC 2 spaces parity transmissions out by intervals of length A + T, whereas Integrated FEC 
1 sends all parities just spaced by A. The term interleaving comes from the fact that packets from different 
transmission groups can be sent simultaneously in an interleaved manner. no FEC: T T LayeredFEC: lmJ00~ 
po~ooo P-P A T IntegratedFEC I: P-P A IntegratedFEC 2: ppoo, pucl~ pu  A T T Figure 13: Timing considerations 
of the different ap-proaches. Let X = l/A be the packet transmission rate and 6 be the expected number 
of consecutively lost packets. Given Lhe packet loss probability p, the average burst loss length b in 
packets and the sending rate X, the parameters for the loss model are: po= -nJlog(l-6 Pl = PO-1-P 3 P 
 We use simulation to show the impact of burst loss on the FEC schemes. We choose an average burst length 
of 8 = 2, and A = 40ms corresponding to a sending rate of X = 25 packets/s as reported by Bolot [17] 
for a loaded IP path between Sophia Antipolis (INRIA) and London (UCL). The packet loss probability is 
chosen to be p = 0.01. T is chosen to be 300 ms. Figure 14 illustrates the burst length distribution 
at one receiver for independent and for burst loss among burst length distribution, p = 0.01 burst length 
 Figure 14: Distribution of number of c_onecutive losses at one receiver, for no burst and burst (b = 
2) for a packet loss probability of p = 0.01. packets for these parameters. It can be seen that the tails 
of both distributions decrease linearly on a logarithmic scale. We observe from Figure 15 that layered 
FEC performs worse than reliable multicast without FEC in the presence of burst losses when the TG consists 
of Ic = 7 packets. It is possible that a larger TG coupled with more parity packets will permit layered 
FEC to outperform no FEC. However increasing the transmission group size is not de-sirable, since this 
will lead to encoding/decoding latencies that may no longer be transparent to the RM layer. Burst loss 
and FEC layer, p = 0.01, b = 2 IO 10 10 number of receivers R Figure 15: Comparison of reliable multicast 
without FEC and with layered FEC for low (h =-1) and high (h = 3) redundancy for I; = 7, p = 0.01 and 
b = 2. Although large TGs are not desirable under layered FEC, it is reasonable to consider large TGs 
under in&#38; grated FEC. Figure 16 shows the performance of inte- grated FEC 1 and integrated FEC 2 
for different transmis-sion group sizes (Ic = 7,20,100). For a small transmission group size of k = 7 
integrated FEC 1 and integrated FEC 2 outperform reliable multicast without FEC only slightly in the 
presence of burst loss. Integrated FEC 2 performs Burst loss and integrated FEC, p = 0.01, b = 2 Figure 
16: Comparison of integrated FEC 1 and inte-grated FEC 2-for transmission group sizes k = 7,20,100, p=O,Olandb=2. 
better than integrated FEC 1 for L = 7, since parity pack-ets belonging to the same transmission group 
are spread out over time (see Figure 13) and are more likely to bridge a loss period. Figure 16 also 
shows that increasing the transmission group size from k = 7, to k = 20 and k = 100 significantly improves 
the performance of integrated FEC. Furthermore, there is little difference between integrated FEC 1 and 
integrated FEC 2 primarily due to the fact that the transmission of a TG is spread over a sufficiently 
long period of time to span a loss period such that sub-sequent parity packets are unlikely to be affected 
by it. This shows that a large transmission group size is suffi- cient to be resistant against burst 
loss and that additional interleaving (integrated FEC 2) is not necessary. 6 End-host throughput of a 
hybrid ARQ protocol In the previous sections we showed that integrating re-liable multicast with FEC 
greatly reduces the expected number of transmissions over reliable multicast without FEC. This reduction 
does not come for free however, since there are processing requirements at the sender and the receivers 
for coding and decoding in the case of loss. We will now evaluate the processing load at sender and re-ceivers 
and show how the use of integrated FEC affects the achievable end-host throughput of the reliable mul-ticast 
connection. We will first present a reliable multi-cast protocol using integrated FEC, called NP, and 
then compare it with a generic version of a reliable multicast protocol without FEC. 6.1 Protocol NP 
There are numerous ways to design a reliable multicast protocol with hybrid ARQ. The design choices are 
largely influenced by considerations for the specific type of appli- cation, e.g. file transfer or audio/video 
transport and its constraints such as high efficiency or low latency. The protocol NP emphases efficiency 
at the expense of latency by only transmitting as many parities as there are parities needed to reconstruct 
a TG. NP could be used, for instance, by a reliable file transfer application. Protocol NP is similar 
to the integrated FEC 2 scheme from Sec-tion 4.2, i.e. parity packets are retransmitted in response to 
received NAKs. A single multicast group is used for the transmission of the data and the parity packets. 
The entire data block is broken up into multipIe transmission groups consisting of k data packets and 
n -k parities. Feedback from the receivers consists of the multicast transmission of NAKs coupled with 
NAK suppression as in SRM [4]. The transmission of TGi proceeds in rounds, which are interleaved with 
the transmission of packets from other transmission groups. . Round 1: The k data packets of TGi are 
sent o Round j > 1: Z(j-l) parities for TGi are sent, where Z(j-l) is the maximum number of packets lost 
in t,he previous round j -1 for TGi . The Sender: Transmits the k data packets in transmission group 
TGi. When done, the sender polls (POLL(i,k)) the re-ceivers for feedback about the number of packets 
missing to reconstruct TG; and continues by sending the data packets of TGi+r . When the sender receives 
NAK(i,l) (see below), it interrupts sending data packets of TG,, m > i. The sender then transmits 2 parities 
for the data pack-ets in TGi and polls the receivers (POLL(i,l)) for feedback about the number of packets 
required to reconstruct TG;. It then resumes transmission of the interrupted transmission group TGm. 
The Receiver: Stores data packets and parities for TGi until k pack- ets are received, which allows the 
receiver to recon- StNCt TGi- When a pOLL(i,s) is received, the receiver com-putes the number 2 of packets 
needed to reconstruct transmission group TGi and schedules a timeout for returning this information @AK&#38;~)) 
to occur in the interval [(s -Z)T,, (s -I+ l)Z]. The slot size T, needs to be chosen appropriately taking 
the re-quirements of the application (low latency, high effi- ciency) into account. When the timeout 
for NAK(i,l) occurs, NAK(i,l) is re-sent. The timer for NAK(i,l) is canceled on the reception of NAK(i,m) 
with m 2 1. With our slotting and damping mechanism the sender will ideally receive a single HAK(i,l) 
after every round as a reply that indicates the matimum number of packets needed by any receiver to reconstruct 
TGi. Protocol NP is in several aspects similar to the protocol N2 of [lS]: feedback is receiver-initiated, 
NAKs are sent via multicast. A receiver receiving a NAK will not gen-erate a NAK for the same round. 
The major differences between NP and N2 are that NP does not require feed-back for individual packets 
but for an entire transmission group. Also NP transmits parity packets for loss recovery, whiIe N2 retransmits 
the original packets that are lost. Or reset, to prevent the loss of the NAK or the retransmission. In 
order to quantify the performance impact of the dif- ferences between N2 and NP, we compare their processing 
rates at the sender and receiver and their throughputs for the case of a one-to-many transmission. Let 
A:, A: be the per packet send and receive processing rates of protocol w E (N2,NP). Th e achievable end-system 
throughput AZ is defined as the minimum of the sender and receiver processing rates: A: = mh{A~, A:) 
(9) In the following, we compare the processing rates for protocols N2 and NP as a function of the number 
of re- ceivers, The processing rates for N2 were computed in [lS]. For protocol NP, the computation of 
the processing rates is given in the appendix. To obtain the results, we used the same values for the 
various processing times as [lS] and made our own measurements for encoding and decoding with the coder 
of Rizzo [14] on the same hardware, a DEC- station 5000/200 running ULTRIX 4.2a. In the through-put calculation 
we use E[X,] = E[Y,] = 1OOOpsecs needed to send or receive a 2Kbyte data packet and E[X,] = E[Yn] = E[YL] 
= 500psecs as the processing time to send or receive a NAK packet. We use E[Xt] = E[Yt] = 24psecs for 
the timer overhead. We measured as coding constants ce = 7OOpsecs and the decoding constant as cd = 720psecs 
for 2Kbyte packets and a symbol size of m = 8. The reader is referred to the appendix for definitions 
of the above quantities. Proc-Rate for k = 20, p = 0.01 TO0 lo* lo4 lo6 number of receivers F? Figure 
17: Processing rates at sender and receiver for pro- tocols N2 and NP with li = 20 and p = 0.01. In Figure 
17, we see that the sender and receiver pro-cessing rates are nearly identical for protocol N2. The processing 
rates are largely determined by the mean num-ber of transmissions and NAKs to be processed per packet 
(see Eq. (10) and (11)). The processing rates decrease as the number of receivers increases due to the 
fact that the mean number of transmissions per packet increases. For NP, the processing rate at the sender 
is largely de-termined by the packet processing times and the encoding times, both of which depend linearly 
on the mean number of transmissions (see Eq. (13) and (15)). At the receiver, the processing rate is 
largely determined by the decod-ing time, which is independent of the number of receivers (Eq. (16)) 
and the packet processing time, which increases linearly with the mean number of transmissions. Throughput 
Comparison (p=O.Ol)(K=20) 10 lo4 number of receivers R Figure 18: Throughput [pkts/msec] for N2 and 
for NP with and without pre-encoding for k = 20 and p = 0.01. The processing overhead due to FEC is much 
higher at the sender than at the receivers: the sender must encode a number E[MNP] -1 of parities sufficient 
to allow the reconstruction of the data packets of a TG by al/receivers. An individual receiver needs 
to decode (reconstruct) only an average of k -p packets per transmission group. There-fore, the processing 
rate for the receiver is much smaller than for the sender. Protocol NP contains two improvements over 
N2: loss recovery via parity retransmission and feedback reduction due to a single NAK per transmission 
roundinstead of per missing pa&#38;et. By slightly modifying Eq. (13) and (i4) we obtained the nrocessine: 
rates for the case one N.4R is returned per mking paiket. The results indicate that reducing the NAKs 
to one per transmission round, as does protocol NP, has only a minor effect on the processing rates: 
the sender processing rate did not change and the receiver processing rate decreases only slightly for 
a very large number of receivers. From the processing rates obtained, we conclude that NP scales much 
better than N2 as the number of receivers increases: the sender becomes the bottleneck and not the receivers. 
If required, there are some easy solutions to match the speed of the sender and the receivers: (i) the 
sender can pre-encode the packets off-line and store the parity data together with the original data 
prior to trans- mission on disk, (ii) a more powerful machine is used at. the sender, or (iii) dedicated 
hardware is used for encod- ing. Figure 18 compares the throughput as given by Equa- tion (9) for N2 
and NP with and without pre-encoding, for k = 20, p = 0.01. It demonstrates the extent to which en-coding 
impacts the performance of the NP protocol. It can be seen that the throughput of NP with pre-encoding 
is higher than those of N2 and NP without pre-encoding even for a small number of receivers.  6 Summary 
Using FEC in an integrated fashion provides five major benefits: . Integrated FEC shifts resource usage 
from the net-work to the end-systems: The number of transmis- sions is reduced and therefore the network 
band- PI width used as well -at the cost of coding at the end-systems. . The achievable end-system throughput 
for protocols based on integrated FEC is higher than for non-FEC protocols, when data is pre-encoded. 
 [41 . The error-control feedback is reduced. . A moderate transmission group size of k = 20 will tolerate 
burst losses, even without interleaving.  . Scalability is achieved for Iarge numbers of receivers [51 
up to 1 million. We can draw the following conclusions: PI . Integrated FEC dramatically reduces the 
mean num- ber of transmissions as compared to non-FEC.  . Integrated FEC is better than layered FEC 
for all PI parameters, low redundancy is sufficient to achieve idealized integrated FEC. . Layered FEC 
can reduce the number of transmis- sions needed for large receiver populations to receive PI a packet, 
However, unlike integrated FEC, its per-formance is sensitive to the coding parameters and the presence/absence 
of burst losses. It may be rea-sonable for applications with delay constraints; this is a topic for future 
work. PI . High loss receivers determine the performance, even if they are a small subset of all receivers. 
 . With shared loss the whole repair efficiency of FEC PO1 is not used in the same extent than in the 
case of independent loss. Shared loss can be modeled by a reduced number of receivers that lose independently. 
. For burst loss lavered FEC is worse than no FEC. The performance-of integrated FEC decreases, when 
WI losses are bursty, especially for small values of k. For small values of k interleaving helps a bit. 
Integrated FEC with a large transmission group size k does not need interleaving: For protocols based 
on integrated FEC (such as NP) P21 the sender is the bottIeneck. Pre-encoding or a strong sender machine 
will lead to a up to 3 times higher end-system throughput compared to multicast with-out FEC, even when 
receivers decode online. [I31 Acknowledgment The authors are grateful to Stephan RZsli for measuring 
[I41the performance of the FEC coder and decoder and to Jean Bolot for his suggestions on the burst loss 
model. [I51 References S. Lin, D, J. Costello, and M. J. Miller, Automatic- PI repeat-request error-control 
schemes. , IEEE Com- mun. Magazine, 22( 12):5-17, 1984.  J, Metzner, An Improved Broadcast Retransmission 
P61 Protocol , IEEE Transactions on Communications, COM-32(6):679-683, June 1984. PI C. Huitema, The 
case for packet level FEC , Pro-ceedings of IFIP 5th International Workshop on Pro- tocols for High Speed 
Networks (PfHSN 96), INRIA, Sophia Antipolis, FRANCE, October 1996, IFIP, Chapman &#38; Hall. S. Floyd, 
V. Jacobson, C. Liu, S. McCanne, L, and Zhang, A Reliable Multicast Framework for Light-weight Sessions 
and Application Level &#38;am-ing , Submitted to IEEE/ACM Transactions on Net-working, 1996. T. W. Strayer, 
B. J. Dempsey, and A. C. Weaver, XTP -THE XPRESS TRANSFER PROTOCOL, Addison-Wesley, 1992. J. C. Lin and 
S. Paul, RMTP: A Reliable Multicast Transport Protocol , INFOCOMM 96, pp. 1414-1424, San Francisco, CA, 
March 1996. M. Hofmann, A Generic Concept for Large-Scale Multicast , B. Plattner, Ed., Proc. International 
Zuerich Seminar, volume 1044 of LNCS, pp. 95-106, Springer Verlag, February 1996. R. Yavatkar, J. Griffoen, 
and M. Sudan, A reliable Dissemination Protocol for Interactive Collaborative Applications , Proceedings 
of A GM Multimedia, pp. 333-344, San Fkancisco, CA USA, 1995, ACM. K. Sakaldbara and M. Kasahara, A Multicast 
Hy-brid ARQ Scheme using MDS Codes and GMD De-codingn, IEEE Transactions on Communications, 43(12):2933-2939, 
December 1995. R. H. Deng, Hybrid ARQ Schemes for Point -to -Multipoint Communication over Nonstation-ary 
Broadcast Channels , IEEE Transactions on Communications, COM-41(9):1379-1387, September 1993. J. Nonnenmacher 
and E. W. Bier-sack, Reliable Mul-ticast: Where to use FEC , Proceedings of IFIP 5th International Workshop 
on Protocols for High Speed Networks (PfHSN 96), INRIA, Sophia Antipo- lis, FRANCE, October 1996, IFIP, 
Chapman &#38; Hall. A. J. McAuley, Reliable Broadband Communi-cations Using a Burst Erasure Correcting 
Code , Proc. ACM SIGCOMM 90, pp. 287-306, Philadel-phia, PA, September 1990. S. Lm and D. J. Costello, 
Error Correcting Coding: Fundamentals and Applications, Prentice Hall, En-glewood Cliffs, NJ, 1983. L. 
Rizzo, Effective erasure codes for reliable com-puter communication protocols , Computer Commu-nication 
Review, April 1997. P. Bhagwat, P. P. Mishra, and S. K. D-ipathi, Ef-fect of Topology on Performance 
of Reliable Multicast Communication , Proceedings of INFOCOM 9J vol-ume 2, pp. 602-609, Toronto, Ontario, 
Canada, June 1994, IEEE. P. Morse, Queues, Inventories, and Maintenance, John Wiley, 1958. J. C, Bolot, 
Analysis and control of audio packet loss in the Internet , T. D. C. Little and R. Gusella, Eds., 6th 
Workshop on Network and Operating System Sup- port for Digital Audio and Video, volume 1018 of LNCS, 
Springer Verlag, Heidelberg, Germany, april 1995. P71 PI D. Tovrsley, J. Kurose, and S. Pin&#38;, A 
Compar- ison of Sender-Initiated and Receiver-Initiated Reli-able Multicast Protocols , IEEE Journal 
on Selected Areas in Communications, 15(3):398-406, 1997. PI E. Ayanoglu, R. D. Gitlin, and N. C. Oguz, 
Perfor-mance Improvement in Broadband Networks using Forv~ard Error Correction for Lost Packet Recovery 
, Journal of High Speed Networks, 2:287-303, 1993. Appendix Let us fist recall from [18] the equations 
for the processing rates for protocol N2.  1 /A?2 = E[XN2] (10) = E[MN2]E[Xp] + (E[MN2] -l)E[X,] 1/AF2 
= E[YN2] (11) = E[MN2](1 -p)E[Y,] +(E[MN2] -1) ($E[Yn] + yE[Y;]) I-P[Mt > 23(E[M4Mr > 23-2)E[Yt] We 
can derive the processing rates for NP in a similar way to N2, taking into account the time for encoding 
and decoding and the fact that feedback and retransmissions are performed for entire transmission groups. 
We defme the follovring variables: time to encode a packet at the sender, which is a function of k and 
h constant encoding time factor time to process the transmission of a packet time to process a NAK at 
the sender time to process a packet or timeout at a receiver time to decode a packet at a receiver, lvhich 
is a function of 12 and 1 constant decoding time factor time to process and transmit a NAK at a receiver 
time to receive and process a NAK at a receiver number of lost packets in a transmission group number 
of transmissions necessary for receiver r to successfully receive a packet number of transmissions for 
all receivers to successfully receive a packet, w E (N2, NP} number of transmission rounds necessary 
for receiver r to successfully receive a TG number of transmission rounds for ah receivers to successfully 
receive a TG send and receive per packet processing times of protocol w E (N2, NP} send and receive per 
packet processing rates of protocol w E (N2, NP) throughput of protocol w E (N2, NP} for a one-to-many 
transmission The parameters p, k and h remain as before. To sim- pli fy the analysis IV; make the following 
assumptions: . The loss among receivers is independent. . h is sufficiently large that the sender never 
runs out of parities. Other-v&#38;e, receivers requiring more than h parities can be ejected. . Per transmission 
round, there is always only one NAK is sent. NAKs are never lost. . The buffer at the receivers is sufficient 
to store the packets from all the transmission groups that can not yet be reconstructed. ANP = II; } 
 0 min(AfP, (12) With l/AfP = B[XNP] (13) = E[Xe] + E[MNp]E[Xp] + v E[X,,] l/QP = E[YNp] 04) = EPfNPI(l 
-P~JWGI +((E[TJ - 1)/k) (+J f yE[Yi]) +P[Tr > 21(E[T,(Tr > 21-Z)E[Yt] + E[YdJ E[MNP] is computed as 
E[M] of Eq. (6). For the RSE coder of Rizzo We compute per packet coding and decoding as E[X,] = k . 
(E[MNP] -1) -ce (15) E[fi] = k-p-cd (16) where k .p denotes the mean number of data packets that are 
lost and need to be reconstructed and cc and cd are constants for encoding and decoding that depend on 
the particular hardware, the symbol size and the the size of the packets. The mean number of transmission 
rounds is E[Tr] = &#38;-P[Trsm]) E[T,.] -P[Tr = l] -2P[T, = 21 E[Tr )T, > 23 = P[Z > 2) E[TJ = 2(1--P[Tsm]) 
(17) m=O v&#38;h P[T < m] = P[T7 5 mlR, m = 1,2,3, . . . For P[T, < m] we use P[TT < m] = (1 -pm) , 
m = 1,2,3,.. from the expressions derived in 1191, which contains the assumption that the number of 
parity packets sent during a transmission round is the same as the number of parities needed by receiver 
r. Since the sender will however send the maximum number of parities required by any receiver, this assumption 
\viIl give an upper bound on the expected number of transmission rounds.  
			