
 Availability Simulation of Peer-to-Peer Architectural Styles Simon Giesecke Software Engineering Group 
Carl von Ossietzky University 26111 Oldenburg, Germany  giesecke@informatik. uni-oldenburg.de Timo Warns 
 Software Engineering Group Carl von Ossietzky University 26111 Oldenburg, Germany timo.warns@informatik.uni-oldenburg.de 
ABSTRACT This paper addresses the issue of quantitatively investigating availability within peer-to-peer 
systems. We devise a con­ceptual framework integrating architectural styles, architec­tures, and concrete 
systems. We identify basic characteris­tics of architectural styles for peer-to-peer systems and give 
a formal model to describe derived architectures. Architec­tural descriptions are used as input for simulations 
to predict the availability of services within real-world systems.  Categories and Subject Descriptors 
 C.4 [Computer Systems Organization]: Performance of Systems Modeling techniques, Reliability, availability, 
and serviceability; C.2.4 [Computer-Communication Networks]: Distributed Systems Distributed applications; 
D.2.8 [Software Engineering]: Metrics Product metrics; D.2.11 [Software Engineering]: Software Architectures 
 General Terms Design, Measurement, Reliability  Keywords Simulation, Architectural style, Peer-to-peer 
techniques 1. INTRODUCTION Dependability is a conceptual framework for various aspects of trust in computing 
systems [1]. Usually, it is described by its threats, its characteristics, and the means to attain it. 
In accordance with the terminology used in the ISO standards 14598-1 [8] and 9126-1 [9], we distinguish 
attributes, which can be measured by metrics, and categories of attributes, called characteristics. Dependability 
integrates the basic characteristics availability, reliability, safety, con.dentiality, integrity, and 
maintainability. Dependability is threatened by faults, errors, and failures. It can be attained by means 
of fault prevention, tolerance, removal, and forecasting. We Permission to make digital or hard copies 
of all or part of this work for personal or classroom use is granted without fee provided that copies 
are not made or distributed for pro.t or commercial advantage and that copies bear this notice and the 
full citation on the .rst page. To copy otherwise, to republish, to post on servers or to redistribute 
to lists, requires prior speci.c permission and/or a fee. WADS 05 May 17, 2005, St. Louis, MO, USA Copyright 
2005 ACM 1-59593-124-4/05/0005 ...$5.00. Wilhelm Hasselbring Software Engineering Group Carl von Ossietzky 
University 26111 Oldenburg, Germany hasselbring@informatik. uni-oldenburg.de focus on the aspects related 
to the characteristics of avail­ability and reliability within peer-to-peer systems. An increasing number 
of distributed systems is realized using peer-to-peer architectures to avoid bottlenecks when utilizing 
resources. Peer-to-peer is a general concept for in­terconnected nodes which share their resources to 
allow a decentralized distribution of functionality. Each peer may provide services for other peers or 
request services from other peers. This viewpoint is in line with other de.nitions of P2P networking 
[15]. Usually, peers enter and leave the system frequently. The parting of a peer is considered a failure 
of this peer, because it ceases to be accessible. Failures of single peers a.ect the availability of 
services provided by the peer-to-peer system as a whole, because a service jointly fails with the peers 
hosting it. Furthermore, if a system employs indirect com­munication, a failing peer or connection may 
partition the network. In this case, the failure impacts the availability of services, because the services 
are only accessible within the partition of their particular hosts. On system level, the failure of a 
peer or connection is considered a fault. A system needs to employ means of handling such faults to enable 
continuous working of the services. Recent research proposed various fault handling techniques, e.g. 
special network topologies, self-organization, periodic description updates, and cross-partition pointers, 
and analyzed these techniques for speci.c systems [17]. The availability of services within peer-to-peer 
systems depends on the faults a.ecting the participating peers and connections and their particular architectures. 
A (speci.c) peer-to-peer architecture is developed in adherence to the constraints established by a (generic) 
architectural style. In this paper, we devise a conceptual framework for peer-to­peer architectural styles, 
architectures, and systems to in­vestigate availability more comprehensively. Figure 1 illustrates our 
approach to investigate the in­.uence of peer-to-peer architectural styles (section 3) on the availability 
of services within concrete architectures and sys­tems. Speci.c architectures are created in dependence 
on the style and on the fault characteristics of the participat­ing peers and connections. A real-world 
system corresponds to a speci.c architecture, whereby the services of the sys­tem show actual availabilities. 
We predict availability by describing the architecture in a formal model (section 4) and performing measurements 
with the help of a simulation (section 5). The precision of the measurement and, there­fore, the appropriateness 
of the simulation are determined by the degree of accordance of the predicted and the actual  Figure 
1: Evaluation Approach availability.  2. RELATED WORK Walkerdine et al. provided an initial analysis 
of dependabil­ity within peer-to-peer contexts [18]. They discussed the basic relationships between system 
dependability and logical network architectures, which is one aspect of architectural styles. Vanthournot 
et al. proposed several techniques of peer­to-peer systems to handle failures [17]. They simulated a 
speci.c peer-to-peer system that employs these means to investigate their in.uence. Their work can be 
seen as a spe­cial case of our approach. They focused on one architectural style including special peer-to-peer 
techniques and evaluated the resulting dependability characteristics by simulation. Bhagwan et al. addressed 
the question of the semantics of availability within peer-to-peer contexts [3]. They inves­tigated a 
real-world peer-to-peer system to measure failure characteristics of peers and proposed that the failure 
distri­bution should be an overlay of two time-varying distribu­tions. They did not relate their results 
to the architectural style of the peer-to-peer system under investigation.  3. ARCHITECTURAL STYLES 
FOR PEER-TO-PEER SYSTEMS 3.1 Architectural Styles We introduce our general approach to software architecture, 
explicate the idea of architectural decompositions, and de­.ne architectural styles. Approach to Software 
Architecture. In this paper, we fol­low the metaphor of a software architecture as an architec­ture of 
a building. However, it is still unclear to what extent this metaphor is helpful to develop the discipline. 
We as­sume that every software system has a software architecture that may or may not be explicitly documented 
[13]. The building metaphor neglects that software is not a physical entity [19], which has a predominant 
physical structure and interconnections, around which other views are constructed. Ran argued that software 
is rather an entity of thought that exists in multiple planes of existence, each having its own type 
of components a component domain [14]. Depend­ing on the speci.cs of a software project, certain planes 
may be elevated to a dominant status, but this emphasis is an consciously attribution and not a natural 
property of the software system. Furthermore, Ran explained that it is a common mistake of many projects 
to attempt imposing a single partition in multiple component domains . On the contrary, any plane may 
exhibit a di.erent number of com­ponents that can have di.erent relationships. Medvidovic and Taylor 
have argued that the explication of a software ar­chitecture inevitably leads to complexity of traceability 
[13]. However, this complexity is immanent in the software being built [4]. We see the need to distinguish 
between an architecture and the detailed design of a software system. Several ap­proaches separate both 
concepts only by their level of de­tail, which leads to a view of architecture as an incomplete design 
[14]. In contrast, we see an architecture at a di.erent level of abstraction of content [6]. Jazayeri 
et al. gave the following de.nition of software ar­chitecture: Software architecture is a set of concepts 
and design decisions that enable e.ective satisfaction of archi­tecturally signi.cant explicit functional 
and quality require­ments and implicit requirements presented by the problem and the solution domains. 
[10] In contrast to other de.nitions of software architecture, this de.nition does not explicitly mention 
structure and rela­tionships. Relationships are not neglected, but can be found as the results of design 
decisions. Concepts include a model of the problem domain in a form that allows bridging to­wards a solution 
domain. Moreover, underlying principles of the created software architecture, such as the used archi­tectural 
styles, are regarded. This de.nition distinguishes three kinds of requirements: genuine architectural 
require­ments, problem domain requirements, and solution domain requirements (i.e., the implementation 
technology). In many cases, it is di.cult to draw a line between the architectural concerns and those 
of the implementation tech­nology, because both address software in some way. In di.er­ent projects, 
the line may be drawn di.erently. It is therefore necessary to de.ne the point of view of system design. 
Architectural decompositions. The concept of imposing multiple decompositions upon a software system 
architec­ture is related to the concept of structuring a software ar­chitecture into multiple architectural 
views. Kruchten in­troduced his model of architectural views, whereby each ad­dresses a speci.c set of 
concerns [11]. However, there are sev­eral important di.erences: First, Kruchten considers both purely 
conceptual models and concrete architectural con.g­urations as architectural views. In this sense, architectural 
views are a broader concept than architectural decomposi­tions. Second, system con.gurations in di.erent 
component domains are similar to each other, because all con.gurations represent a decomposition of the 
system as a whole. Archi­tectural views are more heterogeneous. For example, they may show state transitions 
of a single object, which formally are not decompositions of a system. Often, many architec­tural views 
refer to one distinguished structural decompo­sition and add diverse kinds of information. Other system 
decompositions, like deployment views, are often regarded as subordinate to a main structural view. 
Because of the second aspect, architectural views may be regarded as a concept orthogonal to architectural 
decompo­sitions if an architectural view is understood in a restricted sense. While each architectural 
decomposition imposes a conceptually distinguished structuring of the software sys­tem, several architectural 
views upon each decomposition exist. For example, di.erent architectural views upon an architectural 
decomposition might focus on performance, re­liability, or functionality of the structural elements. 
There­fore, each view is based on one decomposition, while there is no decomposition predominant for 
all views on a software system. This model may need to be extended by quasi-views establishing links 
between multiple architectural decompo­sitions. To formalize the discussed matter, we .rst de.ne a set 
R, the universe of all conceivable software requirements. Let . be an equivalence relation on R, such 
that each (equivalence class) C .C is the set of all requirements related to some characteristic, e.g. 
the set of all safety requirements. Here, the set C := R/= is the set of all equivalence classes. Hence, 
each requirement r belongs to one equivalence class [r]= .C. Requirements may be implicitly given by 
the applica­tion or implementation domains or explicitly stated as spe­ci.c architectural requirements. 
For any software system S to be realized, a set R(S) .R of architecturally rele­vant requirements must 
be decided upon. The set of classes CR(S) := {[r]= | r . R(S)} includes all architecturally rel­evant 
classes. Ideally, the set CR(S) has the following prop­erty: 1. there exists a partitioning (Ci)k of 
CR(S) such that i=1 2. each partition Ci is satis.ed by an independent archi­tectural decomposition. 
Formally, part 1 can be stated as: k CR(S) = [Ci 1' i, j . [1,...,k]: Ci .Cj = . for i = = j i=1 Regarding 
part 2, it must be noted that in practice, abso­lute independence is presumably not reachable, but interde­pendencies 
of multiple decompositions should be minimized. De.nition of architectural style. Our de.nition of archi­tectural 
style is derived from the de.nition by Garlan et al. [7]: A fully elaborated architectural style within 
a com­ponent domain consists of 1. a de.nition of speci.c types of computational and com­municational 
elements that serve as .rst-class entities of architectures built according to the architectural style 
being de.ned (a vocabulary), and a partial in­terpretation of these, 2. global constraints on the composition 
of computational and communicational elements, 3. a description of associated patterns, 4. a guideline 
on how to apply these patterns when build­ing a con.guration, 5. a set of evaluation methods that are 
enabled by the speci.cs of the architectural style.  The .rst two elements of the de.nition impose hard 
con­straints on the architectures adhering to the style, while the following two elements have a much 
less strict in.uence on possible architectures. The last element does not directly in­.uence the possible 
architectures, but refers to their evalua­tion, which can have signi.cant impact on the overall system 
design process. Architectural styles can be grouped into classes or ar­ranged in a re.nement hierarchy, 
to simplify attribution of evaluation methods or patterns for multiple similar archi­tectural styles. 
 3.2 Architectural Decompositions for Dis­tributed Computing In our work, we address distributed computing 
systems as software-intensive systems, i.e. from a software-centric point of view. It is clear that they 
may also be viewed from a hardware-centric or network-centric point of view. The dynamics of architectural 
decompositions is not ex­plicitly considered by [10, 14]. The evolution of a software architecture needs 
to be distinguished whether it is driven by decisions during design time or in.uences during run-time. 
The former is a question of the representation, documen­tation, and enactment of design decisions performed 
by an actor of the design context, e.g. a developer. The latter is performed by an actor within the system 
itself or its oper­ational context. Architecturally relevant concerns may be a.ected by structural changes 
that cannot be anticipated at design time. This run-time evolution is more substantial with regard to 
an architectural description framework, since architectural decompositions become a function of the run­ning 
time of the software system. This kind of changeabil­ity must be explicitly captured in rules governing 
run-time structural changes. Run-time changes of the system struc­ture form an architectural concern 
for peer-to-peer systems, because this dynamics is one of their de.ning properties. It is therefore wise 
to cover the classes C1,...,Cn of re­quirements explicitly addressed by distributed systems in one or 
more dedicated architectural decompositions (see above). Besides the structural dynamics already mentioned, 
the most important of these requirements are decentraliza­tion and shared resource usage. In this paper, 
we constrain to one architectural decomposition covering these require­ments as a whole, i.e. we assume 
that : j . [1,k]: Cj = {Ci | i . [1,n]}. The decomposition establishes nodes as basic computational elements 
and communication links as basic communicational elements. These types of elements are further re.ned 
by a speci.c architectural peer-to-peer style, which are discussed in the following.  3.3 Peer-to-Peer 
Architectural Styles The characteristics distinguishing di.erent architectural styles can be grouped 
into (i) the type of decentralization, (ii) type of communication, and (iii) overall structural char­acteristics. 
The type of decentralization can essentially be decentral­ized, hybrid or super-peer. In a decentralized 
system, all services are decentralized and can be o.ered by any peer. In a hybrid system, some services, 
often directory services, are centrally o.ered by dedicated servers which do not act as regular peers. 
In contrast to client/server architectures, other services remain decentralized. In a super-peer system, 
some peers are elevated to a distinguished status, either by con.guration or self-organized election. 
These super-peers help structuring the topology, and o.er additional services. The type of centralization 
impacts the types of available nodes and rules for their run-time evolution. The type of communication 
may fundamentally be distin­ Cluster Peer Peer Peer Peer Super Cluster Peer Peer Peer Peer Super  Cluster 
Figure 2: Architecture in a Super-Peer Style guished as direct or indirect. The communication is con­sidered 
to be direct if peers have direct connections of the underlying network layer among each other. The communi­cation 
is regarded as indirect if peers communicate with the help of other intermediate peers. The intermediate 
peers pass messages between the .nal communication partners. The choice of a communication type determines 
the type of communication links on the one hand, and in.uences the rules for adding communication links 
on the other hand. Communication links may be mediation links or data trans­fer links. In the case of 
an architectural style allowing me­diated direct accesses, data transfer links exist between any two 
nodes, while mediation links only exist between those nodes forming the network topology imposed by the 
over­all structural characteristics. In the case of strict direct or indirect communication, the sets 
of nodes connected by me­diation links and data transfer links are equal. Overall structural characteristics 
impose global con­straints on the topology of the graph. A peer-to-peer ar­chitecture may put certain 
restrictions on the shape of the topology, e.g. peers need to organize themselves to a tree, mesh, or 
ring. A structure can be utilized to reduce commu­nication overhead or algorithmic complexity, e.g. for 
search­ing. The costs to maintain a structure can be high, because peers enter and leave the system frequently 
and need to .nd their position within the topology. Example. Based on these characteristics, in principle 
an unlimited number of architectural styles can be de.ned. We prepared only some important representatives 
for simula­tion. One simple example can be found in .gure 2. It shows an architecture in a style employing 
super-peers, allowing in­direct communication between regular peers along the links shown as lines. Topological 
constraints require a completely connected network of the super-peers and direct connections of peers 
to a super-peer. Dynamic Changes of Peer-to-Peer Architectures. The characteristics above are primarily 
concerned with the static structure of a peer-to-peer architecture. However, a peer-to­peer architectural 
style also captures rules that govern the run-time evolution of the logical architecture. This evolu­tion 
is concerned with changes to the underlying physical network topology, i.e. removal or addition of nodes 
and com­munication links. The detailed characteristics of such rules are not elaborated in this paper. 
  4. DESCRIPTION MODEL 4.1 Availability of Peers and Connections Peer-to-peer systems su.er from di.erent 
types of faults. Of course, they are threatened by the same faults as every other software system, e.g. 
software .aws. In this paper, we fo­cus on independent failures of single peers and connections that 
cause their breakdown. We consider only accidental and non-malicious deliberate faults, i.e. we neglect 
malicious faults, like attacks. Furthermore, we assume peers and con­nections to be fail-stop. The failures 
of peers and connections are described by their mean times to failure (MTTF) and mean times to re­pair 
(MTTR) as metrics. The distribution of failures is as­sumed to be exponential. The actual values for 
the MTTF and MTTR of peers and connections must be estimated or observed at real-world systems. For example, 
Bhagwan et al. observed a real-world system and gained some insight about the actual failure distributions 
[3]. The availability of a peer or connection describes its readiness for service and is de.ned as MTTF 
Availability = . MTTF + MTTR The reliability of a peer or connection describes the proba­bility that 
the peer resp. connection operates free of failures for a speci.ed period of time. It is de.ned as - 
tt MTTF R(tt)= e 1 under the assumption of an exponential distribution of fail­ures.  4.2 Peer-to-Peer 
Architectures A peer-to-peer architecture is formally de.ned as a tuple A =(N,C, V, A, T) consisting 
of two .nite sets N and C of nodes and connec­tions, one node function for connections V : C Ø {{n1,n2}| 
n1 = = n2,n1,n2 . N} that maps a connection to its endpoint peers, a node labeling function A : N Ø L 
that maps a node to its label where L is a .xed set of node labels, and the time mapping T : T Ø NT × 
CT for NT . N, CT .{c . C | V(c)= {n1,n2}. n1,n2 . NT } that maps an instant to the set of peers and 
connections that are available in the speci.ed instant. The time mapping T describes the evolution of 
the archi­tecture over time. For example, if a peer p joins the system at time tn and fails at tm, p 
is in the image of the time mapping for t . [tn,tm[. A new peer opens and closes sev­eral connections 
to already connected peers to .nd its place within the topology of the system. If the peer has found 
its place, it establishes permanent connections to its neigh­bor peers. All these connections are captured 
by the time mapping for the periods of time it takes to .nd the place. Failures of peers and connections 
are covered likewise: If a peer or connection fails for a period of time, it is not in the image of the 
time mapping for all instants in this pe­riod. Peer-to-peer systems adapt their network topology as a 
means of fault tolerance. The resulting changes of connec­tions are captured by the time mapping as well. 
 The actual speci.cation of T depends on several factors. An initial con.guration of peers and connections 
must be given for t = 0. A peer that enters the system is captured by the time mapping for the period 
of time of its participa­tion. The occurrences and durations of failures of peers and connections are 
derived from the MTTF, MTTR, and dis­tribution function de.ned for the peer resp. connection. We currently 
assume an exponential distribution of the failures and repairs. Peer-to-peer architectural styles de.ne 
the run­time behavior of peers for opening and closing connections, e.g. to reach a certain position 
in the topology or to adapt to failures. This behavior is captured by the time mapping, but the way how 
it is incorporated into its speci.cation has not been explicated yet. Example. The following example 
of an evolving architec­ture illustrates our approach. The architecture is de.ned as shown in table 1. 
Figure 3 shows a graphical illustration of that architecture. The architecture consists of six peers 
and nine connections. For all instants t . [t0,t1[ the peers p1 to p5 participate in the system. The 
peer p5 leaves the system at instant t1 and, therefore, its connections vanish as well. Peer p4 had a 
connection to p5 and could ask the remaining peer p3 about other peers. Peer p3 could tell p4 about p1, 
so that p4 opens a connection to p1 at instant t2. At the same time, the new peer p6 enters the system 
with an connection to p1. Peer p1 mediates a connection to p2, which is available after t3. Table 1: 
Speci.cation of Evolving Architecture N = {p1,...,p6}, A : NL V : C {n1,n2} C = {c1,...,c9}, p1 Peer 
c1 {p1,p2} L = {Peer}, p2 Peer c2 {p2,p3} p3 Peer c3 {p1,p3} p4 Peer c4 {p3,p4} p5 Peer c5 {p3,p5} p6 
Peer c6 {p4,p5} c7 {p1,p6} c8 {p1,p4} c9 {p2,p6} T : T NT CT t . [t0, t1[ p1, . . . , p5 c1, . . . , 
c6 t . [t1, t2[ p1, . . . , p4 c1, . . . , c4 t . [t2, t3[ p1, . . . , p4, p6 c1, . . . , c4, c7, c8 
t . [t3, t4[ p1, . . . , p4, p6 c1, . . . , c4, c7, c8, c9   5. AVAILABILITY SIMULATION A peer-to-peer 
system establishes a logical network topology wherein most pairs of peers are connected via more than 
one c1 c2 c3 c6 c5 c4 0 1 p1 p5 p4 p2 p3 Peer Peer Peer Peer [t ,t [ Peer 1 2[t ,t [ c1 c2 c3 c4 p1 p4 
p2 p3 Peer Peer Peer Peer c1 c2 c3 c4 c7 c8 32 p1 p4 p2 p3 p3 Peer Peer Peer [t ,t [ Peer Peer 3 4[t 
,t [ c1 c2 c3 c4 c7 c8 c9p1 p4 p2 p3 p3 Peer Peer Peer Peer Peer Figure 3: Illustration of Evolving 
Architecture path. Various methods to analyze availability and reliability are known for such networks. 
Peer-to-peer systems are com­plex systems. The assumption that most real-world systems are too complex 
to allow realistic models to be evaluated an­alytically [12] applies to peer-to-peer systems. Therefore, 
we employ simulation as an approximate method for the evaluation of availability. Currently, we develop 
a simulator for peer-to-peer sys­tems, which is based on a discrete-event simulation model. Hence, the 
state of the system as a whole changes instanta­neously at discrete points in time, i.e. faults, repairs, 
send­ing, and handling of messages are instantaneous occurrences which change the system state. The simulator 
accepts a for­mally de.ned peer-to-peer architecture and implements a model of peer behavior for handling 
messages. It simulates accesses to services and logs the outcome of these requests. The results are used 
to calculate the resulting availability of services within the simulated peer-to-peer system. Our simulation 
model is based on the behavior of real­world systems such as Freenet [5]. Essentially, it describes how 
messages are passed in a simulated system, i.e. how a peer communicates with other peers. Aspects related 
to topology are already captured by the speci.cation of the architecture. The simulation model can be 
augmented by other peer-speci.c functionality, like indexing. We used an early prototype of the simulator 
to evaluate the in.uence of the two basic voting-based replication strate­gies Read-One-Write-All (ROWA) 
and Majority Consen­sus [2,16] on availability of resources within peer-to-peer sys­tems. Figure 4 shows 
preliminary results for these strategies and di.erent architectures and presents the relative devia­tion 
of their impact compared to non-replicated resources. The early results already indicate that the strategies 
perform better than expected within speci.c peer-to-peer systems.  Figure 4: Evaluated Availability 
of Access to Replicated Resources  6. FUTURE WORK In future work, the characteristics establishing di.erent 
ar­chitectural styles introduced in section 3.3 will be further re.ned and formalized to a greater extent. 
Furthermore, we will explicate the relationships between an architectural style and a corresponding architecture. 
Especially, means of topology, e.g. techniques of fault tolerance, need to be for­malized, e.g. by graph 
grammars, to ease the speci.cation of the time mapping.  7. REFERENCES [1] Algirdas Avi.zienis, Jean-Claude 
Laprie, Brian Randell, and Carl E. Landwehr. Basic concepts and taxonomy of dependable and secure computing. 
IEEE Transactions on Dependable and Secure Computing, 1(1):11 33, 2004. [2] Philip A. Bernstein and Nathan 
Goodman. An algorithm for concurrency control and recovery in replicated distributed databases. ACM Trans. 
Database Syst., 9(4):596 615, 1984. [3] Ranjita Bhagwan, Stefan Savage, and Geo.rey M. Voelker. Understanding 
availability. In Peer-to-Peer Systems II, Second Intl. Workshop, volume 2735 of Lecture Notes in Computer 
Science, pages 256 267. Springer, 2003. [4] Frederick P. Brooks, Jr. No silver bullet: essence and accidents 
of software engineering. Computer, 20(4):10 19, 1987. [5] Ian Clarke, Oskar Sandberg, Brandon Wiley, 
and Theodore W. Hong. Freenet: A distributed anonymous information storage and retrieval system. In Hannes 
Federrath, editor, Proceedings of the Workshop on Design Issues in Anonymity and Unobservability, volume 
2009 / 2001 of Lecture Notes in Computer Science, pages 46 66. Springer, 2000. [6] Timothy Colburn. Methodology 
of computer science. In Luciano Floridi, editor, The Blackwell Guide to the Philosophy of Computing and 
Information, chapter 24. Blackwell, Oxford, 2004. [7] David Garlan, Robert Allen, and John Ockerbloom. 
Exploiting style in architectural design environments. In Proc. SIGSOFT 94, pages 175 188. ACM Press, 
1994. [8] ISO/IEC. ISO/IEC 14598-1: Information technology Software product evaluation Part 1: General 
overview, 1999. Published standard. [9] ISO/IEC. ISO/IEC 9126-1: Software Engineering Product Quality 
 Part 1: Quality Model, June 2001. Published standard. [10] Mehdi Jazayeri, Alexander Ran, and Frank 
van der Linden. Software architecture for product families: principles and practice. Addison-Wesley, 
Boston, USA, 2000. [11] Philippe Kruchten. The 4+1 view model of architecture. IEEE Softw., 12(6):42 
50, 1995. [12] Averill M. Law and W. David Kelton. Simulation Modeling and Analysis. McGraw-Hill, Boston, 
MA, USA, 3rd edition, 2000. [13] Nenad Medvidovic and Richard N. Taylor. Separating fact from .ction 
in software architecture. In Proc. 3rd Intl. Software Architecture Workshop (ISAW3), pages 105 108. ACM 
Press, 1998. [14] Alexander Ran. Software isn t built from lego blocks. In Proc. 1999 symposium on Software 
reusability, pages 164 169. ACM Press, 1999. [15] R. Schollmeier. A de.nition of peer-to-peer networking 
for the classi.cation of peer-to-peer architectures and applications. In First Intl. Conf. on Peer-to-Peer 
Computing (P2P 2001), pages 101 102. IEEE Comp. Soc. Pr., August 2001. [16] Robert H. Thomas. A majority 
consensus approach to concurrency control for multiple copy databases. ACM Trans. Database Syst., 4(2):180 
209, 1979. [17] Koen Vanthournot and Geert Deconinck. Building dependable peer-to-peer systems. In DSN 
2004 Workshop on Architecting Dependable Systems, 2004. [18] James Walkerdine, Lee Melville, and Ian 
Sommerville. Dependability properties of p2p architectures. In Second Intl. Conf. on Peer-to-Peer Computing 
(P2P 2002), pages 173 174. IEEE Comp. Soc. Pr., 2002. [19] Peter Wegner. Research paradigms in computer 
science. In Proc. ICSE 76, pages 322 330. IEEE Comp. Soc. Pr., 1976.  
			