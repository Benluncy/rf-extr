
 THE JOY OF SOFTWARE STARTING WITH OBJECTS Mark Woodman, Gordon Computing Department, Walton Hall, England 
ABSTRACT This paper briefly describes the evolution and content of the Open University s new introductory 
course in Computing which has been designed for delivery internationally to over 3500 students per year. 
It replaces a conventional procedural programming course and introduces computing through object technology 
specifically, through Smalltalk. Unlike its predecessor it is being designed to be accessible by non-computing 
majors and with an intention to address the gender imbalance in our student population. Multimedia technologies 
are used in the delivery of this distance learning course which is being developed by the course team 
for presentation in 1997. 1 A NEW APPROACH TO INTRODUCTORY COMPUTING That title The Joy of Software 
either delights or dismays. Either way, it serves the purpose we intended: it makes colleagues and prospective 
students notice that something new is on the way. The Open University is the U.K. S largest university 
and its current introductory computing course attracts over 3500 students per year from the U.K. and 
Continental Europe; the current course is a classical structured programming course. After several years 
gestation the team producing the new course coded M206 (the title may not survive) is committed to an 
exciting object-oriented introduction to computing. So what is new? Well, pretty-well everything: what 
we consider to be fundamental computing, what we think of software development, how we think students 
should envisage what is going on when they use a computer, the lot. Not only is the syllabus new, but 
the way we want students to study it is new, and the way we want tutors to help students study is also 
new. The course is being designed for electronic presentation. and study. Eventually it will be presented 
using network technology, but initially we will use a mixture of network, broadcast BBC television, CD-ROM 
technology and paper. By innovating to this extent we hope to get ahead of the conventional sector, to 
revitalise ourselves and our department, to excite students, and to invigorate (part-time) tutors! The 
course is exciting to produce. It will be fun to study and to tutor. Pemrission to copy without fee all 
or part of this meterial is graatsd provided that the copies are not made or distributed for direct commercial 
advantsge, the ACM copyright notice and the title of the publication and ifs dste appear, and notice 
is given that copying is by permission of the Association for Computing Mschinety. To copy otherwise 
or to republish, requires a fee andlor spscitlc permission. SIGCSE 96 2i36 Philadelphia, PA USA Davies 
and Simon Holland The Open University Milton Keynes MK76AA All this novelty has taken a while to emerge. 
Discussions about M206, as the replacement for the current procedural course, began in late 1990. Early 
discussions of M206 recognised the success of the structured programming course; then the radical ideas 
we had were to move to a language like Modula-2 or Ada (-83) and to really emphasise abstract data types. 
Our experience of student difficulties in various courses pointed to poor abstraction skills and declining 
skills in symbol manipulation. At the time the BCS and IEE, like the ACM, were producing curriculum suggestions 
for Software Engineering (writ large). Consequently we first suggested a syllabus that was little more 
than a revision of the current course. The most notable difference was at the end of the course where 
something called object-oriented programming was outlined. Our degree programme is modular and our students 
can, in theory, come from a variety of disciplines. Initially we could not see how to resolve the need 
to cater for students wishing to specialise in computing, and the hope that students wanting just one 
computing component in their degree would take the course. In the early 1990s we did not foresee the 
changes that we now believe will allow us to satisfy both types of student. Work on the course started 
in earnest in late 1993. Although we immediately got down to discussions about object-oriented programming 
and the language Smalltalk, the team (some ten academics at that point) really did not really share a 
clear vision of what M206 should be about. This was reflected in a reluctance of many to wholly embrace 
object-oriented programming and an enthusiasm for hybrid languages. 1994 was spent developing both competing 
and compromise syllabus proposals and slowly a clear picture emerged. The turning point came when it 
really sank in that we could generally expect students to come to us as computing users users of Windows 
or Macintosh or 0S/2 applications. They should, we concluded, be well prepared to listen to a pretty 
consistent story about objects and messages-especially since such a story is an appropriate abstraction 
of the systems they would know. At that time it also became clear that with the hybrid languages a huge 
amount of detailed programming must be taught before students can learn to write their own objects; more 
on the choice of language comes later. As a result of our discussions we would claim that M206 is a course 
on computing and software; it is not a course on programming per se, although a larger proportion is 
about developing software and about what programming is. The @l996 ACM 0-69791 -757-)(/96/0002 ....$3.50 
course reflects the major changes that are occurring in the software industry, which is moving away from 
current conventional techniques to methods which focus on building software systems from reusable components. 
Furthermore it reflects the importance of HCI and network use. The story M206 tells is essentially one 
of objectÂ­oriented software. (The current subtitle of the course is [nteraetive Object Computing.) If, 
as we believe, our concern is the building of software artefacts to accomplish a goal or serve some purpose, 
like solving a problem, M206 will be more akin to a literature course than a creative writing course: 
teaching about the structure and devices used by writers without necessarily producing novelists. Nevertheless, 
such a course may include some writing exercises and should equip students who do want to become novelists 
with an understanding of the craft, if not all the skills to accomplish it. AIMS AND OBJECTIVES M206 
will be a 440 hours, tutor-supported, distance learning course like its predecessor, with half the final 
grade coming from continuous assessment. The main aim of the course is to extend students knowledge of 
computing and their computing skills by exploring and doing software development. In particular, the 
practical nature of computing will be emphasized by using a sophisticated programming environment and 
the global and sociological context will be stressed by using modern networked computing-e-mail, conferencing 
and the World Wide Web both as an integral part of course delivery and tuition, and by distinct syllabus 
topics. The course aims to deliver the following to students: knowledge (concepts and vocabulary), skills 
(programming and analysis) and a discipline framework of theory. The important technological message 
about computing in M206 is that software has structure and is constructed from components objects. The 
software development approach taken is object-oriented; the language used is Smalltalk. However, students 
will be taught to reflect on software development processes and paradigms (including issues to do with 
language choice). To enhance their understanding of software engineering, the course will also provide 
students with an experience of working in a group project, which is only possible in the distance mode 
if electronic communications are fully exploited. The main course objectives are that, having successfully 
studied the course, students should: 1. have a general understanding of computing and software, including 
an extensive vocabulary; 2. have obtained practical, generally applicable skills in using software, 
e.g. telecommunications software; 3. have sufficient knowledge of the object-oriented paradigm to analyse 
artefacts and problems in terms of it, to sketch the design of systems, and to make design choices, and 
to complete or extend an application; 4. be capable of developing small applications using Smalltalk 
including their graphical user interface; 5. be able to understand and describe the issues involved 
in  large scale software development including those due to group work; 6. understand the need for user 
interface design (i.e. H(2I) and be able to describe and analyse user interfaces; 7. appreciate the 
benefits and risks associated with global networked computing.  We do not make lowest common denominator 
assumptions about M206 students. We assume they will be highly motivated and have high expectations of 
the course, and so should be as least as well qualified to take M206 as those on our current introductory 
course. We expect students to have fairly basic skills in use of computing technology and maths. For 
example, their computing skills must include how to use a mouse, menus, buttons, copying and pasting, 
etc., and they really must be comfortable with fractions, decimals, percentages and arithmetic and be 
able to use a simple calculator. In spite of our assumptions about the students, the course team does 
recognise that they may be lacking in confidence and certainly do not expect knowledge of such as algebra, 
subscripting, Boolean expressions, precedence in arithmetic expressions, etc. 3 PERVASIVE THEMES AND 
SKILLS The following are the pervasive knowledge themes of the course: abstraction;  the language of 
software;  software has structure;  software development as a rational engineering process;  program 
behaviour; software has a dynamic;  software uses a multiplicity y of views; objects are significant 
software structures.  The theme the language of software encapsulates the speÂ­cial vocabulary and concepts 
in computing, that students must be comfortable with and be able to think with. The theme is introduced 
early and re-visited at intervals through the course as more sophisticated understanding is develÂ­oped, 
e.g. moving from a user s view to a constructcm s view. Similarly, the theme of construction from objectÂ­components 
provides an approach to programming at all scales. (The course intends to convey a view of computing 
and software development at all scales, even though beÂ­ginning students cannot be expected to write large 
proÂ­grams.) The predictable, dynamic behaviour of programs is another theme. This contributes directly 
to an understandÂ­ing of reasoning and testing, in which the student must predict the expected behaviour 
of program -must in effect simulate its behaviour in order to produce test data. The following are the 
pervasive skills themes: analytical and design skills;  debugging;  reading programs;  reasoning 
about programs and program behaviour.  In addition we gave identified bundling concepts which encapsulate 
many of the technical ideas presented, for example: notions of modularity, software components, design 
and structure. We have organised these themes and the associated vocabulary and concepts into a syllabus 
for studying during a 32 week period. The result is a course which emphasises the practical nature of 
computing and which provides an object-oriented theory. An outline of the sylla bus is given in the appendix. 
 4 ELECTRONIC DELIVERY The electronic delivery mechanisms mentioned above (eÂ­mail, conferencing and WWW) 
deserve a separate article but I will describe them briefly here. Because of this brevity I will not 
address the very major issues that the course team is trying to deal with that will effect students and 
tutors; many of these issues demand faculty or university action as they are dependant on the university 
providing the appropriate resources. Essentially, we are trying to anticipate the emergence of very different 
learning media in the world in general and at the Open University in particular. We are designing the 
course as if it is to be studied across a high speed, high bandwidth network. Initially (and probably 
for many years) the course will not be delivered this way. However, from the outset we will deliver the 
whole course on CD-ROM and parts of it on paper. For us CD-ROM is an ephemeral technology because our 
subject matter needs such frequent updating, but it will suffice for some time. Because we estimate that 
students will have to spend at least fifty percent of their time using a computer, we want to optimise 
their use of time and give them the experience of what computing is today by having them study certain 
of the course material on-line . Until we have drafted more material, we are still somewhat unsure of 
the amount of paper material that students will receive; the current best estimate is a quarter of what 
might be expected. Having designed for networked delivery (and frequent updating), we can use network 
browsing tools (such as those for the World Wide Web) which, for the most part,, will read material from 
CD-ROM or hard disk (rather than from the Internet). One way we are distinguishing between the different 
sorts of network activity is to consider the use of e-mail to be mandatory and the use of conferencing 
to be optional (but encouraged). After all, e-mail is analogous to ordinary post you really must deal 
with it when it arrives in your letter box and electronic conferencing is analogous to going to a conference, 
seminar or coffee bar these activities may enhance the learning experience but may not be required. The 
design for electronic delivery and mandatory early exercises and assignment questions to force students 
to use networking, should establish an appropriate electronic culture for students. Therefore we expect 
no net increase in tutor contact time as a result of these innovations. A number of developments and 
experiments are currently underway to test other aspects of electronic delivery. These include the electronic 
submission of assignments. The biggest stumbling block here is the lack of proven technology for capturing 
hand-written comments. The most likely computer requirement for 1997 students (but expressed in today 
s terms) is: a 66MHz i486 with at least 8Mb RAM, 320Mb hard disk, 14.4Kbps modem, CD-ROM drive, sound 
card and printer. 5 OBJECTS FIRST AND THE CHOICE OF PROGRAMMING LANGUAGE Beginners can be told that 
everything they will manipulate inside the computer is an object, and that the only way to make an object 
do anything is to send it a message. This has the merit that the beginner can immediately test these 
claims by sending messages to objects in suitably provided microworlds and observing the resulting behaviour 
and state changes. This is essentially what we do. Therefore, a pure object language as a first language 
is appropriate; this allows a great reduction in the complexity of what must be taught initially, and 
allows most concepts to be taught very concretely, with students able to check every claim interactively 
and probe every hypothesized entity straight away, using object inspectors and similar tools. To optimise 
this relationship we are working with Adele Goldberg to produce simpler and better tools for students 
to explore Smalltalk and to organize experim ental work and assignments.. As we have already mentioned, 
for the course s programming activities (many of which are to animate concepts, rather than real programming) 
the language Smalltalk will be used. There were many reasons for choosing Smalltalk and very many reasons 
for rejecting other languages. While we were very conscious of how languages such as C++ and Ada are 
perceived, and acknowledge the vocational aspect of what we do, in the end and after a lot of work looking 
at over twenty languages we could not reconcile the teaching of the syllabus we wanted with the teaching 
of a hybrid language. (We also failed to find what we considered to be a suitable programming environment 
for any hybrid language although one of the Oberon systems came close.) Our final choice was made between 
Eiffel and Smalltalk. Although the former looks like the Pascal family of languages, it is object-oriented; 
it also has a lot of interesting facilities to support software engineering. However, Eiffel is a fairly 
large language it embodies a large number of concepts and, unfortunately, only one viable environment 
was just being developed at the time we had to decide on languages. Smalltalk is very different. It looks 
strange but does so because its syntax reinforces the notion of sending messages to objects (which is 
not the case in other languages where sending messages look like procedure calls). It is conceptually 
very small. Furthermore, many high quality environments are already available which all include facilities 
for immediately executing expressions in the language and inspecting objects valuable tools for learning. 
(Some environments are available on several different operating systems which is a fact we may be able 
to exploit later.) Given the increasing use of Smalltalk in the software industry in the UK, Europe and 
the USA, and its suitability for the syllabus, in the end there was no contest. We also hope that Smalltalk 
will provide a level playing field for both female and male students who in the O.U. context often have 
some years of procedural programming experience, and currently an advantage. One interesting distinction 
in pure object pedagogy is between objects used to simulate and model all sorts of real world processes, 
and objects used to construct the very tools and components that the language itself is built of for 
example, strings, integers characters, text windows. These objects turn out to be rather different in 
character from objects used in a bank simulation or an animal microworld . For example, the notions of 
single threads of control, compulsory message answers, assignment, string creation, and the treatment 
of integers all take on much of the character of the underlying hardware, in a way that feels distinctly 
different from pure simulation. CONCLUSION We have briefly presented an overview of an introductory computing 
and software development course which promotes an object-oriented story . Our confidence is high that 
this will allow us to provide a better introduction for both students who wish to specialize in computing 
and those who wish to include a single module better in the sense of more coherently and consistently 
covering more concepts in more depth. The use of multimedia should ensure the introduction to computing 
through objects a real joy ! APPENDIX OUTLINE OF SYLLABUS TOPICS Each topic description below consists 
of an outline of the aims of the topic, the amount of study time devoted to it (in weeks), and an indication 
of the amount of practical work. Two review and revision weeks are not shown. l From User to Author (study 
time: 2 weeks) Aims: to introduce the language of software and to develop analytical skills through practical 
use of applications (such as a word processor, drawing program, and a database system.) Students will 
learn about software structures and will learn to combine applications which they already know how to 
use. By using applications, in particular using them in combination, students will actually begin to 
program in a way that uses the rich functionality of the components. Elements of GUIS will be introduced 
here. Through game-playing and interactive visualization, students learn the main concepts and vocabulary 
of object-oriented software. Practical work: students begin with two applications a word processor and 
a graphics appl ication and learn to describe user operations in terms of software structures; e.g. copy 
and paste as polymorphic operations. Later students will use the graphics application to develop their 
understanding of objects and classes. n-Learning the Environment (study time:;3 weeks) Aims: to give 
the student practical experience in using the programming environment to work with prcjgram components 
so that they become efficient users of the system and hence truly independent learners in this respect. 
Although use of the environment is naturally linked with learning to program it is useful to identify 
this as a separate topic and to specify the skills gained. Practical work: This includes running programs, 
managing their components, using assessment tools, debugging and testing. Component management includes 
browsing libraries, navigation, creating, editing, and saving components. Debugging includes diagnosing 
and locating errors, visualization tools, and inspection. Ill Object concepts and Smalltalk (study time 
7 weeks). Aims: to teach the programming constructs (syntax and semantics) relevant to the concepts taught 
in the course. The constructs taught will include: objects, classes messages state encapsulation polymorphism 
inheritance class relationships variables attributes/instance variables reference aggregates iteration 
over aggregates class library. To ensure students ability to discuss programs verbally they will be taught 
to oralize programs. This topic is about beginning to program with Smalltalk. It is not the only topic 
in which students will learn or practice programming skills; for example, the topics HCI and Implementation: 
Programnting &#38; Integration will include ample programming. Practical work: 60 hours of programming. 
lV Networks (study time: 2 weeks) Aims: to give the student practical experience in using conferencing 
and e-mail systems as well as university, national, and international networks. Some time will initially 
be devoted to the practical aspects of using the particular communications software and hardware for 
the course. Students will also receive some practical training on the use of the conferencing system 
to collaborate with fellow students on the group project. The final portion of study will be spent on 
using the multimedia information services available on the Internet to use services and retrieve information 
that is of practical use to the student in their everyday lives. Some of the social and practical issues 
surrounding the following will be discussed: privacy, ethics of IT, data protection act; censorship; 
viruses, worms, and malicious computing; security of personal and financial data, hacking and cracking; 
commercial services, charging, legal issues, publishing,, video on demand; public services and public 
data (project Gutenburg).This topic encompasses practical use of the net for email, conferencing, etc., 
as well as discussions of technical aspects and ethical questions. Practical work: use of conferencing 
and e-mail systems, use of WWW and Mosaic (or NetScape or HyperG) for searching for data (Internet surfing). 
V Persistent data (study time: 1 week) Aims: to teach the notion that data must often be remembered between 
computations. i.e. some objects must be made persistent . The issues that iire usually thought of as 
peculiar to persistent data are really functions of data sharing: control of data, security, privacy, 
the politics of data, corporate databases. Practical work: A small 00DB will be used if available. Many 
of the Smalltalk programming environments incorporate code for interfacing to 00DBs or relational databases; 
if possible, this will be exploited. Vi Software development processes (2 weeks) Aims: To give the student 
practical experience in a variety of issues in software development via a supplied set of user requirements 
and several development processes which are applied to these requirements. The student will be able to 
describe and reason about these processes in terms of a general framework: user (or market) requirements, 
analysis (modelling user needs), design (modelling the software solution), and implementing the software 
solution. There will be a number of important messages in this topic aimed at giving the student a more 
mature and reflective attitude to software development. It will be explained that while a simple process 
model is often helpful, there is no single correct way to develop software. This topic will also explore 
the sociological factors and the use of programming languages. Practical work: Any practical work will 
involve using a visualization tool or prototype system. V1l Analysis &#38; Abstract Modelling (study 
time: 1 week) Aims: to give a student an introduction to the following vocabulary: requirements analysis, 
requirements specifications, essential model, implementation model, relation, sequence, set, map, prototyping, 
CASE tool, functional and non-functional requirements, implementation bias, implementation directive, 
design directive, relationship, requirements validation. Additional aims are: to describe the central 
role of requirements analysis and requirements specification in software development; to describe one 
specific graphical notation for object based abstract modelling; to outline the difference between abstract 
modelling and implementation modelling (real world vs. the computer); to demonstrate how an object view 
of an application developed during abstract modelling can be built up by combining relations sequences, 
sets and maps; to give practice in develo~ing small object models Prac~ical work: Mostly us;ng ~iagramm~tic 
notations. Vlll Modelling for Design and Implementation (study time: 2 weeks) Aims: To give a student 
an introduction to the following vocabulary: algorithm, computability, optimisation, serialisation, design 
validation, NP completeness, runtime complexity. There is both theory and application in this topic which 
will be presented and interwoven with the group project. Additional aims are: . provide guidelines for 
the selection of appropriate classes from a class library for a particular abstract model. providing 
practice in the use of inheritance; provide design principles for implementing classes; to outline 
the main optimisation heuristics used in design; provide practice in producing runnable systems from 
abstract models; Practical work: Drawing diagrams and browsing and modifying classes. lX implementation: 
Programming and Integration (study time: 2 weeks) Aims: To develop a deep understanding of the problems 
 and techniques-associ~ted with progr~mming-from a design and integrating components. The notions of 
project management will be used in teaching students how to organise programs; the programming environment 
will be used to support this. The following topics will be covered: . testing: component, integration, 
system; performance measurement: use of profiling tool; fault location: reasoning about program execution, 
use of environments to locate bugs and strategies to avoid errors; measuring reliability, programming 
for reliability/safety; integration to meet constraints of program size. Practical work: Programming 
of more complex examples and use of software tools. X Group Project (study time: 6 weeks) Aims: To provide 
practice within the context of a largish system. The project will be spread over 17 weeks. It relies 
on effective, automated submission of project deliverables (which will make up the double assignment). 
and involves at least the following activities: reading and understanding system specifications; development 
of system test suites;  reading and understanding a component specification;  implementation and integration 
of a set of components; system testing based on test suite; provide practice in low-level activities: 
library browsing, creating classes, class testing, debugging; develop skills necessary to produce a 
programmers diary; to provide experience in group interaction in software development Practical work: 
There will be considerable use of conferencing and some diagraming, class browsing, prototype evaluation 
and programming. XI HCI (study time: 2 weeks) Aims: to give the student an awareness of the importance 
of HCI and usability in software design. This includes an account of interaction styles such as command 
line interfaces, menus, and direct manipulation. The student will gain practical experience in interface 
design and building GUIS. The student will also study the issues behind the selection of input/output 
devices ranging from keyboards and pointing devices to virtual reality. Using case studies. the student 
will learn about the principles of user-centred design, usability testing, and important user interface 
metaphors. Cognitive science issues relating to HCI and CSCW will be addressed. Practical work: Initially 
the practical work will be comparative students will use different HCI widgets and compare them informally. 
Later a GUI builder will be used. 
			