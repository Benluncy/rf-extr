
 Agile Software Development: A Contemporary Philosophical Perspective Mandy Northover Alan Northover 
Stefan Gruner Nokia Siemens Networks University of Pretoria University of Pretoria Development Department 
Department of English Department of Comp. Science Midrand, 1685, South Africa Pretoria, 0002, South Africa 
Pretoria, 0002, South Africa mandy.northover@nsn.com alan.northover@gmail.com sgruner@cs.up.ac.za Derrick 
G. Kourie University of Pretoria Department of Comp. Science Pretoria, 0002, South Africa dkourie@cs.up.ac.za 
 Andrew Boake University of Pretoria Department of Comp. Science Pretoria, 0002, South Africa andrew.boake@absa.co.za 
 ABSTRACT This paper critically evaluates the use of revolutionary and evolutionary theories of scienti.c 
method, respectively those of two prominent 20th century philosophers, Thomas Kuhn and Karl Popper, to 
account for change in software engi­neering methodologies. The paper will predominantly as­sess the extent 
to which the Agile software community s use of Kuhn s theory of revolutionary scienti.c change, particu­larly 
in Kent Beck s Extreme Programming (XP), is justi.ed. It will be argued that whereas Kuhn s concepts 
of scien­ti.c revolutions and paradigm shift can partially explain the large-scale, radical change from 
traditional software methodologies to Agile ones, Popper s critical rationalism seems better suited to 
the small-scale, piecemeal method­ological approach of Agile methodologies. The ethical impli­cations 
to software engineering of Kuhn s and Popper s the­ories, as well as the work of the Peopleware authors 
and the architect, Christopher Alexander, will be discussed. Finally, the ideas of the Frankfurt School 
will be used to broaden the Popper versus Kuhn debate. A critical re.ection on the soundness of applying 
theories of scienti.c methodology to the practice of software engineering concludes this paper. General 
Terms Human factors  Keywords Critical rationalism, evolutionary change, extreme program­ming, paradigm 
shift, scienti.c revolutions Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are not made or distributed for 
pro.t or commercial advantage and that copies bear this notice and the full citation on the .rst page. 
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior speci.c 
permission and/or a fee. SAICSIT 2007, 2 -3 October 2007, Fish River Sun, Sunshine Coast, South Africa. 
Copyright 2007 ACM 978-1-59593-775-9/07/0010. . . $5.00 1. INTRODUCTION This paper, which is the full-paper 
version of a previous extended abstract [20], aims speci.cally to assess the de­gree to which the ideas 
of Thomas Kuhn, a prominent 20th century philosopher of science, can appropriately be applied to contemporary 
software engineering (SE) methodologies. In particular, Agile software methodologies, a family of re­lated 
lightweight methods fundamentally focused on being adaptable to change, will be discussed. Agile methodolo­gies 
originated during the mid 1990s, partly as a reaction against heavyweight methods and partly in response 
to the challenges of the Internet era. The popularity of the Ag­ile methodologies, undoubtedly established 
by Kent Beck s Extreme Programming (XP), will be the speci.c focus of this paper. There are two major 
motivations for discussing Kuhn s ideas in this paper. Firstly, they have been very in.uential in academia.1 
Although Kuhn did not discourage the use of his ideas in other disciplines, he was always puzzled by 
the fact that they were received far more enthusiastically in the social and biological sciences and 
in the humanities than in the physical sciences, since the history of the latter, in Kuhn s opinion, 
di.ered so strikingly from the former. The second motivation for discussing Kuhn s ideas in this paper 
stems from their popularity in the recent literature of the SE discipline, particularly in the abovementioned 
Agile community. Several leaders of that community have referred to Kuhn s ideas, most notably the founder 
of XP, Kent Beck, who explicitly cites Kuhn s The Structure of Scienti.c Rev­olutions in the annotated 
bibliography of his own book, Ex­treme Programming Explained: Embrace Change. 2 1Steve Fuller, the founder 
of a discipline called social epis­temology , writes in [14] that Kuhn s The Structure of Sci­enti.c 
Revolutions originally published in 1962 has sold over a million copies, has been translated into over 
twenty languages, and has remained for over 30 years one of the ten most cited academic works and . . 
. [it] was the most in.uential book on the nature of science in the second half of the 20th century 
and arguably, the entire 20th century [14]. 2In addition to this citation, Beck acknowledged, in a per­sonal 
communication with one of this paper s authors, that Kuhn s book was an in.uential book on my thinking 
. [6] This paper will assess the extent to which Kuhn s popularity in the SE discipline is justi.ed. 
As a critical alternative, the philosophy of another prominent 20th century philosopher of science, Karl 
Popper, will be proposed. However, since Popper s ideas have been applied to software methodologies in 
detail in a previous paper by this paper s authors [19], the emphasis here will be on the ideas of Kuhn. 
The contrasting revolutionary and evolutionary models of change in scienti.c methodology, respectively 
those of Kuhn and Popper, will be used to assess, on the one hand, the change from tradi­tional software 
methodologies to Agile methodologies and, on the other hand, the culture of change in Agile method­ologies, 
especially XP. For this purpose, a distinction will be made between large-scale and small-scale change. 
It will be argued that Kuhn s concepts of scienti.c revolutions and paradigm shift seem more suited to 
large-scale, radical change whereas Popper s concepts of evolutionary episte­mology and falsi.cationism 
seem more suited to small­scale, cumulative change. In section 2 we de.ne evolutionary and revolutionary 
change and use these de.nitions in section 3 to assess change in SE methodologies over the past half 
century. This leads to a brief overview in section 4 of the School of Frankfurt s views, which broaden 
the framework of the debate between Popper and Kuhn which is examined in sections 5 and 6 respectively. 
Section 7 gives an overview of some of the most signi.cant attempts to apply Kuhn s concepts to the SE 
discipline by several founding members of the agile project management and software development movements. 
The section shows how most of these applications have been uncritical. Finally, the paper re.ects critically 
on the soundness and value of applying theories of scienti.c methodology to the practice of SE and to 
the theory of software methodology.  2. TYPES OF CHANGE In their most general senses, evolution can 
be de.ned as a gradual development, especially to a more complex form and revolution as a far-reaching 
and drastic change, espe­cially in ideas, methods, etc. [1]. Evolutionary change in­volves small cumulative 
steps over a long duration, whereas revolutionary change occurs in sudden and radical leaps . Neither 
necessarily implies progress. In their more speci.c senses, evolution is a biological term, related to 
Darwinism, which refers to a gradual change in the characteristics of a population of animals or plants 
over successive generations [which] accounts for the origin of ex­isting species from ancestors unlike 
them , and revolution is a political term meaning the overthrow. . . of a regime or political system 
by the governed [1]. When applied to the methodologies of science and SE, both the general and the speci.c 
senses of these terms are rele­vant, even though the speci.c meanings are applied to both metaphorically. 
Other important terms are those of emergent evolution,a philosophical doctrine that, in the course of 
evolution, some entirely new properties, such as life and consciousness, ap­pear at certain critical 
points, usually because of an unpre­dictable rearrangement of the already existing properties [1] and 
punctuated equilibrium, namely the theory that evo­lution proceeds mainly in .ts and starts, rather than 
at a constant rate (gradualism) [9]. These latter two terms re­.ne our understanding of the opposition 
between the terms evolution and revolution.  3. CHANGE IN SOFTWARE ENGINEERING In light of the foregoing, 
it is of interest brie.y to survey historical shifts from one type of software methodology to another. 
It will be seen that, overall, change has taken place in a way that is probably best characterised as 
punctuated equilibrium. Although these changes in software methodology are related to, and are indeed 
mutually dependent on, changes in asso­ciated tools and artifacts3 , attention below is focused on major 
historical developments in the methodologies only. In the early years of computing, there was no clear 
notion of a software methodology. Software was simply developed on the basis of the available technology, 
whether this meant hand-wiring connections, coding in machine language, later in mnemonic code, and eventually 
in high-level languages. The principal stimulus for adopting some sort of method­ological standpoint 
about how code should be developed was the need to control the ever-growing complexity associated with 
software development, notwithstanding the constantly improving tools and notations for doing so. In his 
famous Go To Statement Considered Harmful essay [12], Dijkstra identi.ed a major source of complexity 
in early software development. While his ideas were initially viewed as radical, the subsequent rapid 
and universal adoption of structured programming as a development style had all the hallmarks of revolutionary 
change. As projects grew in size, it was perhaps natural for man­agers with engineering backgrounds to 
look to their tradi­tional style of management in an attempt to control com­plexity. This meant viewing 
a project as a sequence of discrete phases, each of which needed to be articulated, documented, executed 
and signed o. before proceeding to the next phase. Thus, once the requirements had been elicited, documented 
and signed o. by the client, an anal­ysis phase was entered. Here the task was to determine a priori 
various modules of software that could be written by di.erent developers.4 Further phases followed, including 
de­sign, implementation, testing, etc. This so-called waterfall model marked a change from informally 
to formally managed projects. Such a change clearly involved an important con­ceptual shift, and in this 
sense, the adoption of the waterfall model could be seen as revolutionary. However, since there were 
relatively few large projects in the emerging software industry of the time, the uptake in applying the 
waterfall model was gradual. Nevertheless, it became the orthodoxy of the day, and came to be considered 
mandatory for proper management of large software projects. By the late 1980s, the inappropriate nature 
of this rigid ceremony-laden software process had become increasingly apparent, not least because of 
the large number of failed software projects. Particularly troublesome was the dog­matic requirement 
of committing to one phase before pro­ceeding to the next. Consequently, there was a strong shift 3For 
example, the introduction of compilers (a software arti­fact) impacted radically on the software process, 
producing, in turn, more complex software artifacts. 4This task was supported by advances in programming 
languages, where modularisation was becoming an ever­stronger theme. Modula, Wirth s nomenclature for 
his pro­gramming language that followed on Pascal bears testimony to this. Although never implemented, 
its successor, Modula­2, was widely used in the early 1980 s. to iterative incremental development (IID), 
as advocated by Boehm, which later evolved into the more elaborate Ratio­nal Uni.ed Process (RUP). This 
shift away from big up­front design relied on object-oriented (OO) analysis and design (once more, supported 
by appropriate programming languages). In essence, the way in which software was mod­ularised, changed. 
A module no longer represented a set of similar tasks that changed the state of a large number of het­erogeneous 
objects in a domain. Instead, the focus shifted to identifying homogeneous objects from the same class, 
whose state is encapsulated and manipulated by functions partic­ular to that class of objects. In this 
way, the problem and solution spaces were brought closer together. This shift to­wards gradual commitment 
of smaller parts of the project, coupled with a new way of partitioning the software into ob­jects could 
arguably be classi.ed as revolutionary, although the uptake of this approach was also somewhat gradual. 
However, some found RUP to be unnecessarily heavy on formal requirements. This provided the impetus for 
various Agile proposals. While these were lightweight in their for­mal and so-called ceremony requirements, 
they retained an iterative incremental development nature. For example, instead of relying on UML to 
articulate requirements, em­phasis was placed on frequent, informal interaction with the client. Instead 
of requiring comprehensive documentation of the system s code and architecture, emphasis was placed on 
co-ownership of code, and the production of so-called self­documenting code. Agile methodologies are 
therefore, in one sense, an evolutionary o.shoot of iterative incremental processes. However, in another 
sense, they represent a radi­cal (revolutionary) departure from all previous processes, in that they 
spurn an ideological commitment to process, plac­ing the emphasis on e.cient production of the .nal product 
while taking cognisance of the human needs of the Agile team. In fact, Cockburn is one of a growing number 
of Ag­ile advocates who would eschew a priori commitment to any single process, albeit an Agile one. 
Instead, he recommends that the process be speci.cally tailored to the demands of each individual project. 
The Agile software development methodologies, and XP in particular, have certainly caught the attention 
of the SE community. Sections 5 and 6 will evaluate their evolutionary vs revolutionary characteristics 
in greater detail from Pop­perian and Kuhnian perspectives respectively. However, at this point, it seems 
apposite to consider brie.y the School of Frankfurt, since it provided the philosophical backdrop against 
which both Kuhn and Popper developed and prop­agated their thinking.  4. THE SCHOOL OF FRANKFURT From 
approximately the 1940s to 1980s, the School of Frank­furt was a dominant participant in debates on the 
nature of social systems. Its views were particularly well repre­sented in public media and radical student 
circles of the anti-Vietnam War era. Being neo-Marxist in character, it had a dialectical notion of how 
social systems change. This view included social subsystems, such as those relating to science and technology. 
What follows is a brief interpretative-descriptive summary of those ideas of the School which have relevance 
to the overall theme of this paper, namely change in software methodolo­gies. We read the Frankfurtians 
against their own intentions and regard a software system itself as a global system on which the Frankfurtian 
analysis is (at least partly) applica­ble.5 Most of the following items of this summary can be traced 
to Marcuse [18]. In the view of the School, a social system under scrutiny is likely to be globally irrational. 
The roots of this global irra­tionality lie in what might seem to be locally rational. Such points of 
local pseudo-rationality should be uncovered by critical analysis, and the entire global system has to 
change if it is to improve. A revolution is, in fact, needed. A corollary of global irrationalism is 
that, partial or small­scale rationalism within the parts of the system does not in­hibit its global 
irrationality. Thus, attempts at small-scale criticism or small-scale modi.cations from within the sys­tem 
are seen as ine.ective and reactionary, since they are easily absorbed by the system due to its self-stabilising, 
con­servative tendencies. The source of irrationalism in a system is to be traced to driving forces, 
embedded in processes which are driven by particular interests which produce a supportive ideology. Even 
the acquisition of allegedly pure (scienti.c) knowl­edge and the development of technology is driven 
by such interests. The development of technics and techniques is driven by interests as well: Together 
with the ideology pro­duced by those interests, technics and techniques form the system of technology, 
(thus: technology = technics + tech­niques + ideology).6 This system of technology is thus not ethically 
neutral : it is based on social con.icts, and fur­ther con.icts will arise from it. In addition, change 
is seen in dialectical terms, in the Hegelian (and Marxist) sense of thesis, anti-thesis and syn­thesis. 
Thus, the contradictions between thesis and anti­thesis are not merely mental concepts of the observer 
(as a matter of epistemology), but objective realities caused by objective antagonistic forces and tendencies 
(as a matter of ontology). Moreover, the synthesis is not only a mixture or compromise between thesis 
and anti-thesis, but has some­thing of a new, emergent quality, which cannot be reduced to (or deduced 
from) thesis and anti-thesis. The School of Frankfurt adherents would therefore under­stand some of the 
changes in software methodologies in the following terms. The waterfall model would be seen as glob­ally 
irrational, despite the locally rational nature of com­pleting one phase before embarking on another, 
of main­taining a paper trail of what has been done, of forbidding constant shifts of the goal posts, 
etc. It was suited to middle­managers, who needed to maintain their positions of author­ity and control, 
and to o.er their seniors evidence (in the form of signed-o. documents) of progress. Notwithstanding 
the high failure rate of projects managed in this fashion, conservative forces ideologically clung to 
the model until its internal contradictions became intolerable. Only then were people willing to change 
to the incremental iterative approach, which became the new orthodoxy. 5No attention is given to the 
critique which has been brought against positions of the School (Horkheimer, Adorno, Mar­cuse, Habermas) 
in various philosophical debates. The con­.icts are re.ected in [3], which contains contributions from 
both camps (Adorno: School of Frankfurt, Albert: Critical Rationalism), and which is mediated by a neutral 
observer (Dahrendorf). 6Similar thoughts have already been seen in the earlier works of Heidegger Technik 
als Gestell notwithstanding the fact that the School of Frankfurt positioned itself as .ercely anti-Heidegger. 
 The purpose of this brief excursion into the world of the School of Frankfurt was to illuminate the 
context in which (and against which) thinkers such as Popper and Kuhn de­veloped their ideas of change 
and progress in science and society. As far as Kuhn is concerned it is fair to say that the School of 
Frankfurt had emphasized earlier and stronger than Kuhn that the historic occurrence of paradigm shifts 
is not only driven by .aws and de.ciencies in those paradigms themselves, but also possibly foremost 
by strong social forces who wish to see their own agendas being implemented as much as possible. In the 
world of SE, such con.icting in­terests might be identi.ed as the various stakeholders of a software 
development project, such as: customers, project managers, programmers, and so on. To followers of the 
School of Frankfurt, any philosophy that condoned a piecemeal, evolutionary approach to change, seemed 
super.cial and reactionary. It is therefore not sur­prising that they repudiated the ideas of Popper, 
who, dur­ing more or less the same era, o.ered a contrary perspective of change. The next section brie.y 
recounts Popper s views. It does not discuss how his views can be applied to un­derstanding the historical 
trajectory of changes in software methodologies per se; rather, it shows how his views illu­minate the 
internal processes whereby a software system is evolved (changes) within XP the dominant representative 
of Agile methodologies.  5. POPPER AND XP In an earlier paper [19], Popper s philosophy, called critical 
rationalism , was applied in detail to Agile methodologies. What follows is a summary of those features 
of Popper s philosophy, his falsi.cationism and evolutionary epistemol­ogy, that arguably demonstrate 
its suitability to account for the culture of change in XP, that is, to small-scale change within a software 
methodology. Popper s philosophy belongs to the tradition of fallibilism, which includes philosophers 
such as Socrates, Kant and Peirce, since it rejects the quest for secure foundations (jus­ti.cation) 
for knowledge. Although mistakenly perceived to be a positivist by the School of Frankfurt, Popper was 
one of the strongest critics of positivism s attempts to justify scienti.c discoveries using the principle 
of veri.cationism. He pointed out that, while no number of con.rmations is su.cient to prove (or verify) 
a scienti.c generalisation (or theory), only one counter-instance is su.cient to disprove (falsify or 
refute) it. Thus, for Popper, falsi.cationism is the critical method of scienti.c discovery and good 
scien­ti.c practice consists in rigorous attempts to falsify, test and criticise creatively formed hypotheses. 
However, despite rig­orous testing, the truth of a hypothesis or theory remains tentative (or conjectural). 
This critical method is inherent in the rigorous testing that occurs in SE. XP takes this critical method 
even further, as is evident from several of its values, principles and practices, including courage , 
failure , test-.rst programming , shared code (and peer review) , pair programming , and on-site customer 
involvement . According to Popper, all knowledge, of which scienti.c knowl­edge is the exemplar, begins 
with problem-solving. He uses the following four-stage model to describe his evolutionary epistemology 
(the theory of how knowledge advances): P1 . TS . EE . P2 . (1) P1 is the initial problem, TS the proposed 
trial solution, EE the process of error elimination applied to TS, and P2 the resulting solution with 
new problems [16]. These four stages can be seen as a single development iteration in the iterative incremental 
methodological approach of XP: P1 corresponds to an initial subset of the customer s requirements which 
are to be realised during the iteration these are the problems that the developer has to solve; TS is 
equivalent to the so­lution proposed by the developer (the developer s theory ) and EE with the attempt, 
by the testers, to eliminate er­rors by writing critical test cases; .nally, P2 corresponds to a tested 
subset of the software. This often gives rise to unan­ticipated problems or unforeseen requirements that 
must be addressed in a subsequent iteration. XP s iterative incremental development approach provides 
the .exibility to cope with change throughout the software development lifecycle. Since each iteration 
is typically short (1 2 weeks), changes to requirements, design, technology and so forth can be incorporated 
easily and regularly at the end an iteration. Change, in turn, creates the need for feed­back, a value 
which is encouraged by several XP practices including, pair programming , face-to-face communica­tion 
, shared code , re.ection , continuous integration , and refactoring . Feedback also contributes to simplicity 
which, in turn, promotes continuous feedback because the simpler the design of the system, the more likely 
it is to get feedback about it. The foregoing brie.y summarises the case put forward in [19] for interpreting 
Agile software methodologies in the light of Popper s philosophy. However, section 7 will demonstrate, 
instead, that various contemporary authors associated with the Agile movement have attempted to apply 
Kuhn s con­cepts to this domain, and indeed, done so rather uncritically. Whatever their reasons for 
doing so, it would seem that a critical perspective on the applicability of Kuhn s philosophy to the 
software discipline, and speci.cally to XP, is sorely needed. To this end, the next section summarises 
Kuhn s notion of a paradigm shift.  6. KUHN AND PARADIGM SHIFT Section 2 pointed out that in its more 
speci.c sense, rev­olution is a political term, and that it would be applied to scienti.c and software 
methodology metaphorically. In fact, the situation is more complicated. In [9], revolution is de.ned 
as a term (meaning rotation or turn) which was applied by Copernicus to the movement of celestial bodies 
in his treatise De Revolutionibus Orbium Coelestium (1543), and which in the 17th century, after the 
astronomical revo­lution, began to be applied metaphorically to political and social upheavals . Thus 
the scienti.c sense of revolution actually preceded the political. Kuhn s .rst book was entitled The 
Copernican Revolution and in it he started developing his ideas that culminated in Structure. In the 
latter book, Kuhn explicitly compares sci­enti.c and political revolutions: Like the choice between competing 
political institutions, that between competing paradigms proves to be a choice between incompatible modes 
of community life [15]. For Kuhn, the term paradigm means two things [15]: On the one hand, it stands 
for the entire con­stellation of beliefs, values, techniques, and so on shared by the members of a given 
[scienti.c] community. On the other, it denotes one sort of element, in that constellation, the concrete 
puzzle-solutions which, employed as models or examples, can replace explicit rules as a basis for the 
solution of the remaining puzzles of normal science. The clearest examples of Kuhn s paradigm shifts 
come from cosmology, namely the Ptolemaic, Copernican-Newtonian, and the Einsteinian revolutions. Kuhn 
divides the development of science into several dis­tinct phases, each leading ineluctably, in an endless 
cycle, to the next: normal science, crisis, extra-ordinary science, paradigm shift, new normal science. 
Kuhn argues that a discipline becomes scienti.c only once all the practitioners adopt a single paradigm. 
The pre-scienti.c period is characterised by several competing schools of thought within a single discipline 
(rather than competing theories, as Popper would have it). Once a paradigm is adopted all practitioners 
within it become members of a sci­enti.c community, whose research is governed by the paradigm. Kuhn 
calls this mature science and describes the paradigm-governed activities of its scientists as normal 
sci­ence, which occurs uninterrupted for long periods of time. New members are induced, or initiated, 
into the paradigm not primarily through the explicit acquisition of the theo­ries, rules and criteria 
of the paradigm but rather through studying textbook exemplars and practising in laboratories, a process 
of learning that Kuhn calls tacit knowledge, explic­itly acknowledging Michael Polanyi. This is an e.cient 
way of training new scientists in the paradigm, but it does not encourage open-minded, re.ective, self-critical 
scientists. Furthermore, Kuhn contends, referring to George Orwell s Nineteen Eighty-Four, that the science 
textbooks are re­written by members of the triumphant paradigm to suggest that all previous scienti.c 
work had evolved rationally to culminate in the present paradigm. This contradicts the his­torical facts. 
The reason for this historical revisionism is to indoctrinate the science students and to propagate the 
myth of progress in science. This emphasises the non-rational fac­tors involved in teaching the paradigm. 
The fact is, that the old paradigm dies out with the older generation, whereas the new one survives thanks 
to the indoctrination of the new generation. During normal science, scientists do not attempt to refute 
hypotheses, theories or the paradigm, but rather engage in puzzle-solving (as opposed to Popper s problem-solving). 
They resist counter-instances (anomalies) until so many have accumulated that they can no longer be ignored 
and the sci­enti.c community is plunged into a state of crisis.7 During this period of crisis, scientists 
practice extra-ordinary sci­ence. 8 Kuhn argues that no scienti.c community will aban­don the dominant 
paradigm unless a new one becomes avail­ 7Kuhn would consider these facts to be a refutation of Pop­per 
s falsi.cationism, at least as an account of the actual history of scienti.c discovery. 8It is during 
this stage only that scientists behave in the way Popper describes, namely, creatively forming numerous 
competing theories and subjecting them to severe criticism and testing. able since to abandon the paradigm 
is to abandon science altogether (in the given discipline), because all scienti.c ac­tivity occurs within 
a paradigm. The attainment of a new paradigm is considered revolution­ary because the break with the 
old paradigm is .nal and largely irrational, since the very rules of the game (a term Kuhn takes from 
Wittgenstein) have changed. It is a com­plete change of worldview and is holistic rather than piece­meal. 
Furthermore, the new paradigm is incommensurable (cannot be compared) with the old one, so much so that 
sci­entists within di.erent paradigms are unable to understand each other. Translation between paradigms 
is very di.cult, if not impossible, since the scientists belong to di.erent lan­guage communities (a 
term also from Wittgenstein). Kuhn argues that scienti.c progress only occurs during normal sci­ence 
within a paradigm, in terms of the cumulative solving of puzzles ( puzzle-solving is another term from 
Wittgen­stein). Kuhn doubts that science progresses as a whole towards a closer approximation of the 
truth, although he points out that scientists within the triumphant paradigm would con­sider the adoption 
of their paradigm as progress. For Kuhn, persuasion by argument is not decisive, but rather certain non-rational 
factors are required to convert people to the new paradigm, particularly faith. Nonetheless, this emphasis 
on emotion towards the end of [15] betrays a shift of emphasis from the beginning where Kuhn argues that 
the main reason for abandoning the old paradigm is the accumulation of anomalies, namely, the paradigm 
s failure to solve puzzles, and that the main at­traction of the new paradigm is the promise it holds 
to solve these puzzles. Since the new paradigm should also solve many of the old puzzles in addition 
to the new ones, a case can be made for rational progress in scienti.c knowledge as a whole especially 
since, for Kuhn, the main purpose of a paradigm is to solve puzzles. Indeed, the main activity of a scientist 
and the measure of his worth is his ability to solve puzzles. It is striking that Kuhn in Section XIII 
of [15] in con­trast to his book s title describes his theory in terms of evolution rather than revolution. 
Using Kuhnian terminology, XP can be described as one of several software methodologies which belongs 
to the new paradigm known as agile , lean or lightweight . Simi­larly, the classical or traditional SE 
methodologies can be considered part of the old paradigm. The following two sections will assess whether 
Kuhn s theory adequately ac­counts for the change from classical to Agile methodologies, especially to 
XP, and whether this change can be described as a revolution or paradigm shift , in the Kuhnian sense. 
 7. KUHN: APPLIED OR MISAPPLIED? One can ask, as an initial critical question, whether soft­ware developers 
can be described as scienti.c researchers. It seems more obvious that programmers are engineers of sorts, 
since they produce something that has direct relevance to the ordinary world, whereas physical scientists 
are con­cerned with specialised research which often has no obvious bearing on everyday life. In other 
words, the engineer syn­thesizes/constructs to produce new artifacts, whereas the scientist analyzes/takes 
apart to acquire knowledge about an existing (natural) entity. Furthermore, scientists are not normally 
held accountable to the public unlike software en­gineers who do not merely solve problems but produce 
soft­ware with clear applications. Nonetheless, both make use of the rigorous standards of modern mathematical 
logic, and computer technology is essential to scienti.c research. Can software methodologies be seen 
as paradigms? Soft­ware practice can be made to .t both of Kuhn s de.nitions of a paradigm, at least 
in the broadest senses. However, what is not evident from Kuhn s de.nition is that he was writing speci.cally 
about scienti.c communities, and, even more speci.cally, communities of physical scientists. In its speci.cally 
scienti.c sense, it is doubtful that the term can be applied to software communities. The proliferation 
of software methodologies since the early 1990s has been interpreted by the Agile community in terms 
of Kuhn s scienti.c crisis or extra-ordinary science . Ag­ile methodologies are seen as the emerging 
paradigm that will completely replace the traditional methodologies of the old paradigm. The questioning 
of the fundamental princi­ples, values and practices of software methodology that ac­companies the emergence 
of new methodologies, compares with the similar activity of physical scientists in a state of crisis. 
This presupposes that software methodologies are al­ready a mature science in which a single paradigm 
does, in fact, dominate as opposed to a pre-scienti.c state, char­acterised by many competing schools 
of thought. In fact, this does seem to be the case in SE since, before the present crisis, the waterfall 
methodology was dominant. However, one should question the assumption that there need be a single dominant 
paradigm in SE as Kuhn argues there is in science. Cockburn s suggestion of a process per project does 
not seem unreasonable, althoug h it is a thoroughly non-Kuhnian approach, since it implies that rational 
choices can be made between di.erent software methodologies. Are software methodologies really incommensurable 
as Kuhn alleges scienti.c paradigms to be? Based on numerous arti­cles in the software literature which 
compare methodologies, this seems unfounded. In [8], for example, Boehm makes a detailed comparison between 
Agile and plan-driven method­ologies and argues for their synthesis into a hybrid. Simi­larly, in [2], 
the authors claim to have successfully adapted the waterfall model by integrating key elements of approaches 
like Rapid Application Development (RAD) and XP. Was the emergence of Agile methodologies in the mid 
1990s, a result of cumulative anomalies? If not, what triggered the crisis? For Kuhn, anomalies could 
take the form of dis­coveries, or novelties of fact on the one hand, or inven­tions, or novelties of 
theories , on the other. Both forms of novelty, however, are not actively sought out and, in fact, are 
initially .ercely resisted by scienti.c communi­ties. Since, software methodologies do not aim to explain 
physical phenomena, it is di.cult to see how Kuhn s theo­ries are applicable to them in this case. Nonetheless, 
a case can be made for crucial events causing a crisis in SE, for example, the advent of the Internet 
era. Object-oriented (OO) methodologies were the dominant paradigm at this time and most OO advocates 
came to recognise that devel­oping at Internet time required a reconsideration of the OO process. Moreover, 
OO projects were often late and over budget. In order to create truly new classes of software which would 
deal with the challenges of the era rapid tech­nological change, volatile business requirements, increasing 
scale and complexity and shortening market time windows the OO software process itself needed to be 
radically over­hauled. As a result, the new Agile paradigm emerged and many of the OO advocates from 
the old paradigm became advocates of the new Agile paradigm. Can Agile be called a revolution if it has 
not already be­come the dominant paradigm in ten years since its initia­tion? Kuhn faced a similar criticism: 
The period between Copernicus and Newton is often termed The Scienti.c Rev­olution , but the time-span 
involved, over 150 years, makes the process sound more like evolution than revolution [9]. However, the 
initial de.nition of revolution in this paper does not refer to time-span. Whereas political revolutions 
seem to occur swiftly, scienti.c and technological revolu­tions can take considerable time to occur, 
as was evident in, for instance, the Industrial Revolution. Nonetheless, given the quick rate of change 
in the Information Age, perhaps the Agile revolution should have occurred already, if it is to take place 
at all. 7.1 Related Work Kuhn s concepts of paradigm shift and scienti.c revolu­tion have been applied 
to diverse aspects of the SE disci­pline, most notably by several members of an international IT advisory 
.rm, the Cutter Consortium. These applica­tions are especially pertinent, since the leaders of both the 
agile project management and software development move­ments are members of Cutter. This section summarises 
the literature in this regard. It then critically evaluates the spe­ci.c position taken by one of the 
principal authors, Ed Your­dan. Finally, it o.ers a general critique of Agile s use of Kuhn s concepts. 
In [5], Bach applies the work of Popper, Kuhn and sev­eral other philosophers of science to SE in the 
context of the process vs practice debate. He argues that, in the 20th century, even science was a battleground 
for this de­bate when the idea of science as a rational enterprise came under .re. The resulting fallible 
view of science, according to Bach, is pertinent to our situation in IT today. Bach also argues, perhaps 
controversially, that Developing software is not much di.erent from developing scienti.c theory, and 
de­veloping processes for developing software is exactly like do­ing science . Furthermore, he argues 
that the trend to move from process towards practice manifests itself in methodol­ogy movements such 
as XP and object-oriented (OO) design patterns. Schwaber, another Cutter member, does not explicitly 
cite Kuhn but he frequently uses the term revolution in his writings. In [21] he describes the seminal 
meeting of the Agile advocates in 2001 as a meeting of revolutionaries . He also points out in a section 
of [22] entitled Viva la Rev­oluci´on , that the Agile Manifesto was a call to arms and is based on principles 
rather than techniques.9 In [13], Marzolf and Guttman use Kuhn s theory to explain the movement known 
as systems thinking (ST) and how ST relates to SE. They point out that, although ST insists systems be 
addressed holistically, the most universal char­ 9Schwaber, however, is using the term revolution here 
in a political sense rather than in Kuhn s scienti.c sense. Pre­sumably Schwaber is comparing the Agile 
leaders to the rebels of the American War of Independence (1776-1783). In this case, the term rebellion 
is more appropriate than revolution. acteristic of software development is, rather, a short-term, piecemeal 
approach: This stark contrast . . . is at the heart of the current controversy between so-called de.ned 
and ag­ile development approaches . The authors go on to ask Should we focus more single-mindedly on 
building software one application at a time, or should we take a more holistic view? .10They conclude 
that we should learn ST and take a more holistic approach towards building software. This, in their opinion, 
will ensure the shift from the Machine Age paradigm to the Systems Age paradigm. Mah, in [17], talks 
about revolutions and paradigm shifts in relation to celestial spheres. He mentions Copernicus, Galileo, 
Kepler and Newton, and posits that our modern­day Copernicuses and Galileos are folks like the DeMarcos, 
Listers, Putnams, Yourdons, Orrs, et al 11 . Mah criticises that we still seem to be operating in the 
Industrial Age paradigm instead of the Information Age paradigm when we talk about manufacturing as opposed 
to designing software. In [24], Windholtz paraphrases several talks from the 2002 XP Agile Universe conference. 
Most notably, for the pur­pose of this paper, are the talks by Martin Fowler and David West. Fowler argues 
that the Agile and XP movements are a large shift in how people think about software development: The 
change in attitude is twofold: (1) a change in attitude toward change and (2) a change in attitude toward 
peo­ple . West, on the other hand, attempts to answer, .rstly, why there is an undercurrent of revolution 
in the Agile com­munity and, secondly, how one should properly conduct a revolution. In [10], Davies 
explicitly cites Kuhn s Structure and claims that understanding Agile Software Development requires a 
paradigm shift. He also references Wittgenstein s Duck-Rabbit. In [25], Yourdon, one of the members of 
the Cutter Consor­tium, references Kuhn s Structure and applies his concept of paradigm shift to IT organisations 
in the context of ad hoc communication networks. In [26], he applies Kuhnian terminology speci.cally 
to XP by describing classical SE as the old paradigm and agile , lean or light software development as 
the new paradigm. In the same article, he notes Beck s presentation at the 2001 Cutter Summit confer­ence 
in which Beck explicitly describes XP as a paradigm shift . Since Yourdon makes the most explicit and 
detailed use of Kuhn s concepts in Agile software circles, we discuss his ideas in somewhat greater detail 
in the following subsection.  7.2 Critique of Yourdon In spite of his various references to Kuhn, Yourdon 
s ac­count of Kuhn s ideas is sometimes inaccurate and seems to be in.uenced by the same revolutionary 
(or, rather, rebel­lious) spirit identi.ed in Schwaber s article, a spirit which runs contrary to that 
of Kuhn s Structure, its title notwith­standing. Yourdon s de.nition of a paradigm omits Kuhn s second 
sense of the term, namely, the concrete puzzle-solutions which, employed as models or examples, can replace 
explicit rules as a basis for the solution of the remaining puzzles of 10This holistic approach could 
be considered Kuhnian, just as the piecemeal approach could be considered Popperian. 11All of these pioneers 
are a.liated with the Cutter Con­ sortium and most are involved in consulting about Agile Software Development 
and Project Management . normal science. This omission is strange, given that, im­plicit in this de.nition, 
is the concept of tacit knowledge, an important concept to the Agile community. Yourdon provides a de.nition 
of paradigm that departs signi.cantly from Kuhn s .rst de.nition of the term, when he writes of paradigms 
that they perform a reasonably good job of describing and explaining the events and phenom­ena that we 
encounter in our day-to-day life . This misses Kuhn s crucial point concerning the unparalleled insula­tion 
of mature scienti.c communities from the demands of the laity and of everyday life . Most software engineers 
are not as isolated from everyday experience as most scientists since they are producing artifacts for 
use in everyday life. Yourdon s reference to scientists, engineers, soothsayers, or priests is also very 
problematic, since Kuhn s paradigm shift speci.cally relates only to physical scientists. At no point 
in Structure does Kuhn refer to engineers, and cer­tainly not to soothsayers and priests, since he considered 
himself narrowly to be a historian of the physical sciences. Nonetheless, the reference to soothsayers 
and priests, if not true to the word of Kuhn s theory, is close to its spirit, since it suggests that 
changes of paradigm are not completely ra­tional, but require a leap of faith. Similarly one could object 
to Yourdon s descriptions that Meanwhile, there s likely to be a band of renegade scien­tists, engineers, 
or priests looking for a new paradigm and In the past, the rebels promoting a new paradigm were likely 
to be burnt at the stake .12 Fuller points out that Kuhn s enthusiastic follower s ignored that Kuhn, 
far from being a scienti.c revolutionary , argued that revolutions were only a last resort in science 
 indeed, an indication of just how .xated scientists tend to be on their paradigm [is] that they have 
no regular procedure for considering funda­mental changes in research direction [14]. Yourdon seems to 
have shifted from Kuhn s scienti.c sense of revolution to a political sense that is, in fact, alien to 
Kuhn s theory (despite the fact that Kuhn actually compared the two). Fuller s critique shows how close 
Kuhn s paradigms are to the blueprints advocated by big upfront design method­ologies. This is in complete 
contrast to XP with its many practices for accommodating change. Yourdon s claim that the new paradigm 
explains all of the known phenomena much more cleanly and simply [than the old one] also misrepresents 
Kuhn, who argues that the new paradigm does not solve all of the old puzzles, but rather abandons many 
of them, and, in fact, reviews, in the terms of the new paradigm, puzzles previously thought solved. 
In­deed, the phenomena themselves have changed in the new paradigm, so radical is the break with the 
old paradigm. On the other hand, the new paradigm does solve many of the new puzzles that the older paradigm 
failed to solve. A .nal problem with Yourdon s depiction, from a Kuhnian point of view, is that it presents 
an objective criterion that allows one to make a rational choice between paradigms, a possi­bility which 
Kuhn rejected, and which more accurately .ts the philosophy of his rival, Popper.  12This echoes Schwaber 
s use of the term revolution dis­cussed earlier.  8. SOFTWARE ENGINEERING AND ETHICS Fuller has reopened 
the Kuhn vs Popper debate by argu­ing that Kuhn s victory had broad and detrimental rami.­cations since 
[w]ith the defeat of Popper (and his follow­ers), the normative structure of science drastically changed 
, from a rationalist and fallibilist Popperian one to an irra­tionalist and foundationalist Kuhnian one. 
Furthermore, Fuller contends that While no one doubts that Kuhn has won the debate, I intend to question 
whether it has been for the better. [14]. In this section, we will study the ethical implications to 
SE of the work of these philosophers of science and others. SE, as a young .eld, faces many ethical challenges. 
Besides questions of intellectual property, software piracy, censorship, privacy, con.dentiality and 
policing of the internet, more general is­sues have been raised by in.uential writers. The authors of 
Peopleware [11] question the tendency of companies to treat programmers as resources, merely as means 
to the companies ends, rather than taking their hu­manity into account. While the Peopleware authors 
do not question increasing productivity as the overriding impera­tive, they do argue that programmers 
will be more produc­tive if their individuality is respected. Christopher Alexander, whose ideas concerning 
patterns in architecture profoundly in.uenced a generation of software engineers (most notably Kent Beck13) 
and whose ideas in­spired the design patterns movement in SE, reminds soft­ware practitioners themselves 
of their ethical responsibili­ties, exhorting them to be aware of the ends to which their software is 
being used, and thereby seeing themselves as moral agents and not merely as technicians or instruments 
providing technical expertise (in software) for any ends what­soever. Alexander s moral imperative, during 
his landmark keynote speech at OOPSLA 96 [4] was: Ensure that the software you produce will be used to 
make the world a more humane place. He challenged the audience to build whole systems that contribute 
powerfully to the quality of life and to recognize and rise to the responsibility that accompa­nies their 
position of in.uence in the world. In order to achieve this, Alexander proposes a meta-plan: It is a 
philos­ophy by which a facility can grow in an evolutionary fashion to achieve the needs of its occupants. 
The meta-plan has three parts: a philosophy of piecemeal growth  a set of patterns or shared design 
principles governing growth  local control of design by those who will occupy the space  Under the 
meta-plan, facilities evolve through a series of small steps into campuses and communities of related 
build­ings . [11] There are striking similarities between Alexander s approach to architectural development 
and Popper s piecemeal ap­proach to social engineering. Their approaches are both 13Beck explicitly 
acknowledges Alexander in [7] by entitling one of the chapters The Timeless Way of Programming after 
Alexander s book The Timeless Way of Building . evolutionary and democratic rather than utopian and au­thoritarian. 
They do not attempt to ful.l a blueprint at all costs but rather remain .exible and accountable to the 
needs of individuals. Besides the obvious complicity of scientists, engineers and technologists in the 
military-industrial complex, the arms trade and the development of new military technology, there are 
less obvious but equally disturbing examples of their complicity in other industries. For instance, their 
expertise is essential for the massive and widespread exploitation of animals on industrialized farms, 
where animals are treated as mere units of production in a ruthlessly and increasingly mechanized process, 
with dire consequences for the environ­ment. Matthew Scully, a former senior speech writer for President 
George W. Bush, provides a particularly striking example of the abuse of technology in the hunting industry 
[23]: As for the rights of animals, rights in general are best viewed in tangible terms, with a view 
to ac­tual events and consequences. Take the case of a hunter in Texas named John Lockwood, who has just 
pioneered the online safari. At his canned­hunting ranch outside San Antonio, he s got a ri­.e attached 
to a camera and the camera wired up to the Internet, so that sportsmen going to Live­shot.com will actually 
be able to .re at baited animals by remote control from their computers. If the customer were to wound 
the animal, ex­plains the San Antonio Express-News, a sta. person on site could .nish it o.. The trophy 
mounts taken in these heroics will then be pre­pared and shipped to the client s door . . . Neither Alexander 
nor the Peopleware authors, however, question the framework of a market-driven economy, whose inherently 
exploitative nature has had a detrimental impact on the environment and has stoked numerous global con.icts 
since World War II, and whose power has become virtually unchecked in the form of globalization since 
the ending of the Cold War in 1989. Their analysis, therefore, needs to be broadened. The prestige of 
science and technology in the twentieth cen­tury has blinded most people to the complicity of scientists 
and technologists in many ethically questionable enterprises, political, military, industrial and scienti.c, 
especially during the Cold War in both the East and the West14 . Scientists have become increasingly 
unaccountable to the public and, in the West, even to governments. In turn, governments, big businesses 
and the military have used science for morally dubious purposes, and have also become increasingly unac­countable 
to the public. The ideas of logical positivism, in the .rst half of the twentieth century, and Kuhn, 
in the sec­ond, have provided philosophical justi.cations for this elitist technocracy, in particular 
their claims to the political and ethical neutrality of science and technology. 14One example of this 
is the historical account of the con­cerns of computer scientists and, indeed, their virtual rebel­lion 
with regard to Reagan s call in the 1980 s for Starwars research and the subsequent government funding 
thereof. There were many debates about this matter in the ACM s at that time (circa 1985). Several individuals 
and schools of thought have, however, criticised the unethical practice of science and technology. In 
the early twentieth century, Phenomenologists, such as Husserl and Heidegger, criticised instrumentalist 
rational­ism. Critical Theorists of the Frankfurt School revealed the complicity of scientists and technologists 
in the late­capitalist, post-industrial state. In particular, Habermas was critical of the erosion during 
the twentieth century of the public sphere , the forum for the critical discussion of public policy. 
The shaping of public opinion by the mass media, controlled by media monopolies or by governments pursuing 
their own interests, is symptomatic of this erosion. Although Habermas and the Frankfurt School mistakenly 
perceived Popper to be a logical positivist, Popper s idea of the open society shares many similarities 
with Haber­mas s idea of the public sphere , in particular the belief that democratic citizens should 
be able to hold their gov­ernments accountable. But Popper s idea goes further, im­plying that the scienti.c 
community itself is (or should be) an exemplary open society within the broader open soci­ety of a democratic 
state, since, for Popper, the advance of scienti.c knowledge depends on critical debate and testing. 
This is in strong contrast to the uncritical rationalism of the Positivists and Kuhn, who, following 
Polanyi, argue that the criterion of truth lies not in objective, critical testing, but in the (inter-)subjective 
consensus of the experts in any par­ticular discipline. Thus, Positivism and Kuhnian ideas lead to a 
technocratic elitism unaccountable to the public. 9. CONCLUSION Considering how questionable Kuhn s concept 
of a paradigm shift is when applied to developments in soft­ware methodology, his popularity is surprising. 
He was not the revolutionary that the rebellious young American stu­dents of the late 1960s and 1970s 
thought he was. In fact, his critics saw him as the o.cial philosopher of the emerg­ing military-industrial 
complex [14] and rather than having killed positivism, [a]s the Popperians saw it, Kuhn simply replaced 
the positivist search for timelessly true propositions with historically entrenched practices. Both were 
inherently uncritical and conformist [14]. As Fuller points out, part of the popularity of Kuhn is the 
innocence [of his admirers] of any alternative accounts of the history of science. . . with which to 
compare Kuhn s [14], such as the fallibilism of Popper or Peirce. Popper s phi­losophy has been included 
in this paper as a corrective, al­though other philosophers, such as Peirce, may have suited the purpose 
just as well. Indeed, the fallibilism of the latter two philosophers seems far more suited to the principles 
and practices of the Agile community than the uncritical author­itarianism and elitism of Kuhn s philosophy. 
In fact, it can be argued that Beck shifts his emphasis in the 1st and 2nd editions of [7] from a Kuhnian 
revolutionary approach to a Popperian evolutionary one, since in the 1st edition, Beck advocates that, 
in order to be truly practis­ing XP, all Agile values, principles and practices should be adopted and 
strictly adhered to, whereas in the 2nd edition he suggests, instead, a piecemeal approach to adopting 
XP. Kuhn would say that XP must completely replace previous methodologies whereas Popper would allow 
a piecemeal ap­proach where Agile practices and principles can be adopted individually and be withdrawn 
if unsuccessful. The full-scale approach towards adopting XP can be compared to Kuhn s normal science 
in which scientists uncritically accept the basic assumptions of the dominant paradigm. Furthermore, 
Kuhn s insistence that paradigms are incommensurable sug­gests that the Agile paradigm cannot be compared 
to any other software paradigm. However, earlier it was shown that several authors have made such comparisons. 
On the other hand, the incommensurability of paradigms implies that the choice between them is irrational 
which, presumably, Beck would disagree with. Instead, he would surely argue that the XP practices are 
all rational. How­ever, why then does he use Kuhn s irrationalist theory of scienti.c revolutions? Perhaps 
his statement in [6] gives us a clue: Mostly in the adoption process. Kuhn helped me predict how the 
market would react to XP. . . . Since XP will require signi.cant change and since most people resist 
change, the adoption of XP will not be largely due to ra­tionality and good arguments, but will instead 
require an emotional conversion or leap of faith.15 It would seem that Beck gained this insight about 
the irrationality of paradigm shifts from Kuhn despite the fact that Kuhn never men­tioned markets. Nonetheless, 
as Fuller writes, Kuhn saw science as a knowledge enterprise . This may be the so­lution: although XP 
s values, principles and practices are highly rational according to Popper s critical rationalism, the 
adoption of XP as a whole will be a matter of emotion rather than logic, as full of hype and persuasive 
techniques as the selling of a new product on the market. This is, how­ever, a signi.cant departure from 
the strict use of Kuhn s theory of scienti.c revolutions. 10. REFLECTION, AND OUTLOOK TO FU-TURE WORK 
We conclude this paper with the following re.ection. In this paper, we have exercised applied philosophy: 
applied in the sense that, in contrast to pure philosophy, we did not discuss, as such, a general problem 
(e.g. the problem of knowledge or the problem of science). Instead, our discussion was mo­tivated occasionally 
by the speci.c problem related to SE as outlined in the introduction. Our paper would be incom­plete 
without a (however brief) re.ection on the possible limitations of such an approach. Especially in our 
context, two questions deserve to be asked: (a) Is Kuhn s view of the (history of the) scienti.c world 
largely correct, or is his opinion itself merely a paradigm a temporary fashion which is likely soon 
to be superseded by another, with its own set of believers and dedicated fol­lowers? (b) Regardless 
of whether or not Kuhn s model is intrinsi­cally plausible, did we apply it consistently and appropri­ately 
to our speci.c problem in the context of SE? In this paper, instead of attempting to answer question 
(a) ourselves, we refer to the ongoing philosophical discourse with inputs from a great diversity of 
sources such as critical  15The authors of Peopleware are amongst several in the in­dustry who would 
surely agree with this claim. In [11], they state that The fundamental response to change is not logi­cal, 
but emotional. They propose we look at change in the way an expert in family therapy, Virginia Satir, 
did. The Satir Change Model involves four stages, namely, old sta­tus quo, chaos, practice and integration 
and new status quo. Part of the reason change is so emotional, is explained by the second stage of chaos 
which can be compared with Kuhn s stage of crisis . Both stages cause considerable distress. theory (School 
of Frankfurt), critical rationalism (Popper, Albert, et al.), pragmatism or pragmaticism in their vari­ous 
forms (Peirce, James, et al.), various versions of meta­scienti.c relativism (Nietzsche, Feyerabend, 
et al.) and many others. Future work might delve somewhat deeper into the details of these issues. As 
far as (b) is concerned, it is conceded that it is method­ologically daring to apply something like Kuhn 
s model, which was conceived as a historic meta-theory about scien­ti.c theories, to the .eld of SE which 
is, more than anything else, a technical practice and not a mathematically formu­lated, predictive scienti.c 
theory in the classical sense of the term. However, underlying the practice of each SE methodology, its 
advocates would undoubtedly appeal to a theory , al­beit a social theory, asserting that if you produce 
software using this particular methodology, then the outcome is likely to be e.ective and e.cient in 
producing software of the ap­propriate quality. This renders the practice of SE akin to other practice-oriented 
disciplines such as medicine or the social sciences, which have to rely for predictive purposes on heuristics, 
rather on than the precision of mathematics. It would seem, therefore, that it is the more or less implicit 
adherence of various individuals to various versions of such a background theory, which makes the discipline 
of SE prone to the formation of opinion-based schools which Kuhn (as well as Feyerabend and others) have 
mentioned in their writ­ings. On the other hand, however, from a small-scale perspective of SE, there 
is no room for opinion and hence, no room for a Kuhnian critique. Thus, a Kuhnian perspective has nothing 
to say about a computer program that would, for example, report the square of 2 to be 5. From this small­scale 
perspective of SE, Kuhnian thought seems much less applicable. Instead, at this level, the simple Popperian 
(re­spectively Peircean) ideas of conjecture and falsi.cation are, indeed, more applicable. 11. REFERENCES 
[1] Collins English Dictionary. Harper Collins Publishers, Glasgow, 1991. [2] Agile paradigm shift. In 
Project Lifecycles: Waterfall, Rapid Application Development, and All That. The Lux Group, 2003. [3] 
T. Adorno, H. Albert, and R. Dahrendorf. Der Positivismusstreit in der deutschen Soziologie. DTV Wissenschaft, 
1993. [4] C. Alexander. The origins of pattern theory. IEEE Software, pages 71 82, October 1999. [5] 
J. Bach. Process over skill. 1(8), 2000. [6] K. Beck. Personal e-mail communication. December 2006. 
[7] K. Beck and C. Andres. Extreme Programming Explained: Embrace Change. Addison-Wesley, Boston, 2005. 
[8] B. Boehm. Get ready for agile methods, with care. IEEE Software, January 2002. [9] A. Bullock and 
S. Trombley. The New Fontana Dictionary of Modern Thought. Harper Collins Publishers, 1999. [10] R. 
Davies. Agile paradigm shift. Agile North Conference, 2006. [11] T. DeMarco and T. Lister. Peopleware: 
Productive projects and teams. Dorset House Publishing Co., New York, 1999. [12] E. W. Dijkstra. Go to 
statement considered harmful. ACM, March 1968. [13] E.Yourdon. Systems minus systems thinking equals 
big trouble. 5(11), 2002. [14] S. Fuller. Kuhn vs Popper: The struggle for the soul of science. Icon 
books, UK (2003), 2003. [15] T. Kuhn. The Structure of Scienti.c Revolutions. The University of Chicago 
Press, Chicago, 1962. [16] B. Magee. Popper. Fontana Press, Glasgow, 1973. [17] M. Mah. Defending the 
paradigm. Cutter Consortium, 2004. [18] H. Marcuse. One-Dimensional Man Studies in the ideology of advanced 
industrial society. Beacon Press, Boston, 1964. [19] M. Northover, A. Boake, and D. G. Kourie. Karl Popper 
s critical rationalism in agile software development. In LNAI, number 4068, pages 360 373, July 2006. 
[20] M. Northover, A. Northover, S. Gruner, D. Kourie, and A. Boake. Extreme programming: A Kuhnian revolution? 
In ICCS 2007: Proceedings of the 15th International Workshops on Conceptual Structures, Springer-Verlag 
London, pages 199 204, July 2007. [21] K. Schwaber. The Agile Alliance revolution. Cutter Consortium, 
2001. [22] K. Schwaber. XP and culture change. Cutter Consortium, 2002. [23] M. Scully. Fear factories. 
The American Conservative, pages 7 14, May 2005. [24] M. Windholtz. XP Universe 2002. Objectwind, 2002. 
[25] E. Yourdon. Paradigm shifts. Cutter Consortium, 2001. [26] E. Yourdon. The XP paradigm shift. Cutter 
Consortium, 2001.   
			