
 A Generalized Air-cache Design for Efficiently Broadcasting on Multiple Physical Channels Duc A. Tran 
School of Electrical Engineering and Computer Science University of Central Florida Orlando, FL 32816-2362, 
U.S.A dtran @ cs.ucf.edu  Kien A. Hua School of Electrical Engineering and Computer Science University 
of Central Florida Orlando, FL 32816-2362, U.S.A kienhua@cs.ucf.edu Keywords Data broadcast, air cache, 
mobile computing, scheduling ABSTRACT In limited and asymmetric bandwidth environments such as wireless 
networks, push technology can be used to allow a large number of mobile users to access the shared data. 
Most of the today's designs assume that the server disseminates data on only one physical channel. In 
this paper, we focus on the problem of broadcasting data over multiple physical channels that cannot 
be coalesced into fewer high-bandwidth ones. Specifically, we propose a novel scheduling scheme called 
Generalized Broadcast Technique (GBT) which can adapt the content of the broadcasts according to the 
client mobility and demand patterns. Theoretical foundations and performance evaluation are also provided 
to substantiate the near-optimality and to assess the advantages of GBT. 1. INTRODUCTION In recent years, 
mobile computing has attracted much atten- tion due to its appealing computing environment [9]. How- 
ever the narrow bandwidth of wireless networks, and the relatively short active life of power supplies 
(or battery) of mobile units whose movement patterns axe irregular make the problem of transmitting information 
a lot more challeng- ing than in wired networks. To overcome this obstacle, push technology [10] has 
been used as an effective way of making the information available simultaneously to a large number of 
users. Rather than re-quiring users to explicitly request what they need as in the traditional pull approach, 
push-based techniques broadcast data to them. They treat air as a virtual cache and mo-bile units as 
users of that. This idea is very attractive and Permission to make digital or hard copies of all or part 
of this work for personal or classroom use is granted without fee provided that copies are not made or 
distn~onted for profit or commercial advantage and that copies bear this notice and the full citation 
on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires 
prior specific permissionand/or a fee. SAC 2001, Las Vegas, NV &#38;#169; 2001 ACM 1-58113-287-5/01/02...$5.00 
Ning Jiang School of Electrical Engineering and Computer Science University of Central Florida Orlando, 
FL 32816-2362, U.S.A njiang @cs.ucf.edu  poses no bounds on the number of users reading from the air-cache. 
It also relieves the user of many burdens such as having to spend an inordinate amount of time polling 
known sites for updates and/or hunting on the network for relevant sites. Crucial to push-based approaches 
is the task of deciding which data and when to send to users in the absence of specific requests. Researchers 
have proposed al- gorithms for designing broadcast schedules. These solutions use pure push as in Broadcast 
Disks [1, 2, 3, 5, 6] and hy-brid techniques (where most frequently accessed items are broadcasts and 
the others are provided on demand) as in [4, 14, 16]. Other algorithms for scheduling broadcasts are 
dealt in [7, 8, 11, 12, 15], Those methods are based on the assumption that there ex- ists a single physical 
channel for data broadcast. However, there are many scenarios [151 where a server has access to multiple 
low-bandwidth physical channels, which cannot be combined to form a single high-bandwidth one. The first 
so- lution devoting to such problems has been reported in [15] which provided a wide range of design 
considerations for the server which broadcasts periodically over multiple physical channel air-cache, 
and for the mobile users to influence the broadcast strategy for their benefit. However, [15] assumed 
the channels to be homogeneous and data items delivered to be equally sized. In this paper, we study 
the general case where the air-cache consists of channels with differ-ent bandwidths and data items of 
different sizes. To the best of our knowledge, no previous research on this prac- tical extension has 
been done. The issues we address in- clude investigating what strategy should be used to parti- tion 
data over multiple heterogeneous physical channels and what ordering should be used to periodically disseminate 
data on each channel. We also discuss how the broadcast structures should be changed according to the 
user retrieval behavior. Especially, we propose a near-optimal scheduling scheme called Generalized Broadcast 
Technique (GBT) to answer the above particular questions. Our mathematical proofs and experimental results 
justify the correctness and potential of the proposed technique. The remainder of this paper is organized 
as follows. The details of GBT are introduced in section 2. Our performance study is reported in section 
3. In Finally in Section 4, we give concluding remarks and provide pointers to future work.  2. MULTI-CHANNEL 
BROADCASTING 2.1 Model Our broadcast system consists of a server which has access to a database and delivers 
data over known channels for mo- bile units to read the data. Those channels are physical and may have 
different bandwidths. We denote by m the num-ber of channels which are indexed as channel 1, channel 
2, .., channel m. Assume that channel i has bandwidth B~ and BI _< B2 _< .. < B,n. The objects broadcast 
by the server are organized as self-identifying "data items" which may be of various sizes. However, 
techniques to be presented can also be work for other data structure organization. Let n be the number 
of data items. "Hot" items axe defined as those accessed frequently while "cold" ones are accessed less 
often. The access frequency of an item is called the "temper- ature". In our adaptive model, temperatures 
are updated as time goes by and the broadcast content is determined ac- cordingly to the changes. The 
length and temperature of an item i are expressed by Length(i) and Temp(i), respectively. Furthermore, 
we have ~-]~=1 Temp(i) = 1. We use push-periodic as the delivery mechanism. In other words, each channel 
is subdivided into logical units called "broadcast units" or "cycles" in short. Data items in those cycles 
are sent repeatedly over a channel but none is broad- cast on more than one channel. In this work, we 
are inter- ested in optimizing the usage of non-combinable channels; hence for simplicity, we assume 
that there are enough on-demand channels for the mobile users to send requests to the server. In addition, 
the users are then informed by the server of which channel to tune in for the data item they request. 
We are interested in the following metrics: (1) Mean Wait- ing Time (MWT): The average delay from when 
the user requests data to when the user starts receiving it. (2) Mean Active Time (MAT): The average 
delay from when the user requests data to when the user finishes receiving it. (3) Mean Download Time 
(MDT): The average time the user needs to download an item. In this section, we will discuss broadcast 
techniques that axe aimed at minimizing MWT and MAT. Since MAT = MWT + MDT, in order to minimize MAT, 
we build mathemati- cal foundations for the MDT optimization and design algo- rithms based on that. Essentially, 
each technique consists of three components: (1) A procedure to allocate data items over multiple channels 
on which the items will be sent; (2) A procedure to determine the order of disseminating items on each 
channel; (3) A procedure to update the temperature values of data items based on the user retrieval behaviors. 
 2.2 Basic technique Presented in [15] is a scheduling strategy which works very well in the case of 
homogeneous channels and equally-sized data items. The basic idea is to allocate data items over the 
channels in such a way that hot items are broadcast more frequently than the cold data items. First, 
all items are sorted in the non-increasing order of temperature val-ues and stored in a queue List. Then, 
we assign them over the channels by basing on the concept of Bin-Packing [13]. It regards each broadcast 
unit as a bin and tries to fill in data items based on their current temperature values. Let Tempavg 
= (~'~=1 Temp(item~))/m where {item1, item2, .., itemn} is the set of all items. We start from the fastest 
channel and allocate items in the list List until the total temperature of those exceeds Tempa~g. We 
then examine the next fastest channel and repeat the strategy. This pro- cess stops once all items have 
been assigned (or until queue L is empty). The details are listed below: ALGORITHM 2.1. [Basic Technique] 
1. Let List be the Ordered list of items {item1, item2, .., item,,} such that Temp(iteml) >_ Temp(item2) 
> .. > Temp(item,~). 2. Let C = m, i = 1, Variable = 0 3. Allocate the i ~h element of List to channel 
C. If  n Variable + Temp(item,) < (E Temp(itemi))/m i=l then increment i, increase Variable by Temp(iteml), 
and repeat this step. Otherwise, go to the next step. 4. Decrement C, increment i, reset Variable = O. 
If C > 0 and i < n, go back to the previous step. 5. Exit.  In any cycle on each channel, items are 
delivered in the non- increasing order of Temp(.) values. As an example, we have 3 channels and 6 items 
to be broad- cast "A n , "B", "C", "D", "E" and "F'. Let us assume that their temperatures are 100, 50, 
40, 35, 30 and 20 re- spectively. Applying the above algorithm, we have Bins = {"A" }, Bin2 = {"B',"C"} 
and Bin1 = {"D","E',"F" }. That is, "A" is broadcast on channel 3 (the fastest chan-nel), {"B","C" } 
on channel 2 ("B" is before "C" in each cycle), and {"D","E',"F"} on channel 1 - the lowest ("D" is transmitted 
before "E" which is before "F'). 2.3 Generalized Broadcast Technique The basic technique (BT) was designed 
for the case with data items of the same size and channels having the same bandwidth. It may not be suitable 
when that premise does not hold. Taking into account the differences between item sizes and between bandwidths 
likely improves the effective- ness of the broadcast. In this subsection, we introduce a new technique 
to accommodate the above requirements. We call this the Generalized Broadcast Technique (GBT). Let us 
denote a schedule by $ = {St, $2, .., Sin} where each Si ---- (iternil, iterni2, .., iternik, ) represents 
the items broad- cast on channel i in that order (~'~=1 i --n). We have the average download time resulted 
by schedule S is MDT(S) = ~'~ ,(~', Temp(itemlj)×Length(itemq)/Bi). The theo- rems below give a theoretical 
basis for the proposed scheme: THEOREM 2.1. [GBT-MDT-Minimization] Given S the op- timal schedule in 
terms of MDT, for every pair of items (itemij, iternk~) where i < k, one of the following must be true: 
I. Bi = Bk, or 2. Temp(itemii) x Length(itemli) < Temp(itemkt) x Length(itemkt). PROOF. By way of contradiction, 
suppose that Temp( itemij) x Length(itemli) > Temp(itemkt)x Length(itemk~) and Bi < Bk. We consider a 
new schedule S ~ that is similar to S except that itemij and item~t axe broadcast on channel k and i, 
respectively. We have: A(MDT) = MDT(S') -MDT(S) = Temp(itemkt) x Length(item~t)/B1 -Temp( itemi~) x Length(item~i)/B 
i + Temp(itemij) x Length( itemij) / Bk -Temp(itemkt) x Length(itemkl)/Bk ~ A( M DT) = ( Temp( itemkt 
) x Length( item~t ) -Temp( itemii ) x Length(itemij)) x (1/Bi-1/B~). El < B~ implies 1~El -1/Bk > 0. 
In association with Temp(itemii) x Length(itemii) > Temp(itemkt) x Length (itemkt), we have A(MDT) < 
0. Therefore schedule S' is strictly "better" than S conflicting with the fact that S is the MDT-optimal 
solution. [] THEOREM 2.2. [GBT-MWT-Minimization] Given S the optimal schedule in terms of MWT, for every 
pair of items (item~j, iternlt) where j < l, then the following must be true: Temp(itemij)/Length(itemij) 
> Temp(item~t) / Length (itemi~) PROOF. By way of contradiction, suppose that there ex-ist a pair (itemlj, 
item,s) so that j < l and Temp(itemii) / Length(itemli) < Temp(itemil)/Length(itemil). It is al- ways 
possible to choose j and I such that l = j + 1. We con- sider a new schedule S' that is obtained from 
S by switching the order of itemlj and itemlt in the cycle. Let a user U request an item at some time 
t. Let t * _> t be the earliest point of time right before itemii is delivered. If we follow schedule 
S, the average time U has to wait until starting to receive data is W(U) = W +(t' -t) x Temp(itemii)+ 
(t'-t + Length(iternii )/Bi ) × Temp(itemit) where W is the average waiting time for items rather than 
itemij and itemit. If we follow S', the corresponding time is W'(U) = W + (t' - t) x Temp( item~t ) + 
( t' - t + Length( itemit )/Bi ) x Temp( itemi i ). Therefore, W ( U)-W' ( U) = (Length( iteml j ) xTemp( 
itemit ) - Length (itemit) x Temp(iternil))/Bi = (Length (itemij) / T emp( itemii )-(Length( item~t ) 
/Temp( itemit ) ) / ( B~ x Temp (itemij) × Ternp(item~t)) > 0. This inequality holds for any instant 
of time t, therefore we can say that S' is better than S, which is contradictory since S is the MWT-optimal 
schedule. [] The GBT-MWT-Minimization theorem suggests a way to order items in each broadcast cycle of 
a channel while the GBT-MDT-Minimization suggests a way to distribute items over all channels. The strategy 
is as follows: ALGORITHM 2.2. [GBT-Scheduler] * Step 1: Sort all data items in the non-increasing order 
of the mu!tiphcation of temperature and length (MTL). Step 2: Assign those items with higher MTL values 
to channels having larger bandwidths.  Step 3: For each channel, sort the items assigned to it in the 
non-increasing order of the ratio between tem- perature to length. The ordered hst is the final schedule 
for that channel.  * Step 4: Exit. There are many ways of designing Step 2. We note that, in the worst 
case, until receiving a request from a channel C, the user has to wait as long as the time to transmit 
the entire broadcast cycle of C. It is therefore preferred to minimize the time to deliver the longest 
cycle. That is, we need to find a schedule S that minimizes LongestCycle(S) = maxl<i<rn ki k. (~"~i=1 
Length(itemij)/Bi). Let li = ~j~l Length(ztemij) and L = ~-~im__lIi. Then LongestCycle(S) = maxt<i<mli/Bi. 
Its minimization should imply that It~B1 = 12/B2 ..... l,n/B,~ =(l,+12+..l,~)/(B,+B2+..Bm) L '~ other 
words, the broadcast length of a cycle on each channel is proportional to the channel bandwidth. We present 
the algorithm of Step 2, which approximates the above compu- tations, below: ALGORITHM 2.3. [GBT-Dispateher] 
1. Let List be the ordered list of items as the result of Step 1 of GBT-Seheduler and L the total length 
of all items in the database. ~. Let C = m, i = 1, Variable = 0 3. Allocate the i th element of List 
to channel C. If Variable+ Length(iteml) < Bc x L / ~']~=t Bi, then increment i, increase Variable by 
Length(iteml), and repeat this step. Otherwise, go to the next step. J. Decrement C, increment i, reset 
Variable = O. If C > 0 and i < n, go back to the previous step. 5. Exit. Let us see an example of a schedule 
determined by GBT. We have three channels {1, 2, 3} with 131 = 2 (data units/second), B2 = 5 (data units/second) 
and Bs = 7 (data units/second). There are 6 data items in the database {"A', "B", "C", "D', "E", "F} 
with Length("A') = 3, Length( "B" ) = 2, Length("C") = 1, Length("D") = 5, Length("E') = 4, and Length( 
"F" ) = 6. Therefore, L = 21. Suppose that be-fore the server runs its scheduler and dispatcher, we have 
the temperature values Temp("A") = 100, Temp("B") = 50, Temp("C") = 40, Temp("D") = 35, Temp("E") = 30, 
and Temp("F') = 20. By GBT-Dispatcher algorithm, items {"A", "D", "E"} will be broadcast on channel 3, 
{"B", "F} on channel 2, and "C" on channel 1. The order of delivering them within a cycle, which is the 
result of GBT-Scheduler, is as follows: "A" before "E', "E" before "D", and "B" before "F'. The final 
schedule for this particular adaptive period is illustrated in Figure 1. aooo'3 1 "A" I "E" I "O .... 
A .... E" I "O" ' Channel 2 "B .... F" "B" ,,F,, t ,,B,, r ,,F,, Channel 1 "C" "C" "C" "C" "C" ... Banwidth(ehannel 
1) = 2, Bandwidth(channel 2) = 5, Bandwidth(channel 3) = 7 Figure 1: Example of schedules determined 
by GBT  2.4 Adaptation Issues We have presented the first two components (dispatcher and scheduler) 
of GBT. Now we need to work out how the tech- niques are implemented to adapt changes in user retrieval 
behavior. The content of each channel's broadcast unit is determined by knowing a priori the data items' 
length and temperature. Temperature values change over time as the result of user dynamic behavior. In 
our system, the server runs the dispatcher and scheduler procedure periodically; specifically in every 
PERIOD units of time. Let Temp(1), Temp(2), .., Temp(n) be the current temper- atures of n data items 
in the database. Temperatures are reset to 0 at the start of the system. Whenever a request for a data 
item i arrives at the server, Temp(i) is increased by a constant HEATING_FA CTOR. Then the temperatures 
are normalized so that they add up to 1. That is, V j = 1 to n, Temp(j) is scaled to Temp(j)/)'~=1 Temp(k). 
It is also reasonable to reduce the temperature of those items which are not accessed frequently. This 
task is called the "cooler" procedure which is done periodically. For each item, if its temperature is 
less than a constant COOLING _FACTOR, the temperature will be initialized to 0; otherwise, the tem- perature 
will be decreased by COOLING _FA CTOR. 3. PERFORMANCE STUDY In this section, we present simulation results 
for aforemen- tioned techniques. We used MWT (Mean Waiting Time), MAT (Mean Active Time) and MDT (Mean 
Download Time), which are defined in Section 2, as the performance measures. Since the behavior of MAT 
in oar experiments is quite sim- ilar to that of MWT, we only report results for MWT and MDT. 3.1 Experimental 
environment In our simulation model, the database is a collection of by default 1000 data items of possibly 
different sizes. The sizes are generated randomly and can be as large as 5 Mbytes. To model the information 
retrieval pattern, data items are requested according to a Zipf-like distribution with skew factor z. 
Our workload generator creates the service re- quests according to a Poisson process where the arrival 
re- quest rate was fixed at 300 requests/s, which is enough to show the reasonable comparisons among 
the data de- livery schemes. We did not investigate the effect of this rate because of the broadcast 
feature of our delivery system where the data access frequency is already determined by the skew factor 
above. We assume that the server has mul- tiple broadcast channels having bandwidths which vary from 
32Kbytes/s to 100Kbytes/s. 32Kbytes/s models the capac- Table 1: Parameters Parameter I default I variation 
Database size (items) 1,000 500-1500 Number of channels 30 5-50 Simulation run time (seconds) 3,600 N/A 
Skew factor 0.7 0.1-1.0 Request rate (requests/second) 300 N/A ity of a typical in-house wireless network 
and 100Kbytes/s is in the same order as what is available over a cable mo- dem. Each simulation run lasted 
one hour. The simulation time unit is a second. In order for the server to accommo- date the changes 
of data item temperatures, the broadcast :content was re-calculated every 20 seconds. Furthermore, we 
set PERIOD = 20 seconds, HEATING.FACTOR = 1, and COOLING.FACTOR = 1. We assume that the time it takes 
to process this task is ignored. Table 1 summarizes the workload parameters. The detailed numerical results 
are reported in the following subsections. 3.2 Effect of data access pattern To investigate the impact 
of the skew factor, the arrival rate is set at 300 requests/second. The skew factor varies from 0.1 (i.e., 
54% of total requests will go for a particular 56% subset of the data items) to 1.0 (i.e., 90% of total 
re- quests will go for a particular 10% subset of the data items). The corresponding MWT and MDT values 
of each broad- cast technique are plotted in Figure 2. The behaviors of GBT and BT are quite similar. 
However in any simulation run (Figure 2-1eft), GBT always outperforms the other by a difference of about 
100 seconds in terms of waiting time. Figure 2-right illustrates the MDT values. Both techniques provide 
shorter average download time as the access pat- ter is more skewed. The gap between them gets broader 
as the skew factor decreases. At any point of scale, GBT is significantly better than BT.  3.3 Effect 
of number of channels In this study, each channel has bandwidth between 32Kbytes / s and 100Kbytes / 
s. Figure 3 shows the performances of BT and GBT under the changes of server capacity. It is understandable 
that the increase of the number of channels imply the decrease of MWT value. When the server has only 
5 channels (limited capacity), each BT-user often spends 6000 seconds until it starts receiving data, 
but GBT spends 4000 (1.5 times better) seconds. In the case where the server has the most capacity (number 
of channels equals 50), the MWT values of BT and GBT are about 270 and 450 seconds, 800 750 701) /- 
J . °%, 012 013 01, 01~ 010 Skewf=aao¢ 01, 0!8 01, Figure 2: Effect of access pattern 46 I 5OOO BT ~ 
44] OST ~" i. 40142I 38 I000 "-...................... ~_ ........~........ J J i i i i i J 34 [ , i i 
10 15 20 25 30 35 40 45 SO 5 10 15 20 Nurnl~r ol l:~lanf~ell Figure 3: Effect of number of channels 
BT -e-- GEIT ~. Skew Factor "".. ,,... BT -t-- , i 2S 30 Numbst" o! chanrmls i 35 i 40 ""i"........ 45 
 respectively. This exhibits significant improvements of GBT over BT. In terms of MDT values (Figure 
3-right), GBT are still superior to BT. The performance gaps among them become clearer as the server 
has fewer channels. Though, when the server has as large as 50 channels, GBT's MDT value is still small 
compared to that of BT (i.e., 85% less). 3.4 Effect of database size We studied the impact of database 
size on the three tech- niques by changing the number of items to be broadcast from 500 to 1500 items. 
The size of any item is generated randomly and can be up to 5Mbytes. In any run, BT always requires the 
longest average waiting and download time. We can see in Figure 4-1eft that the two curves are formed 
in a linear manner with positive slopes. As the number of items increases, the MWT value of GBT gets 
larger slowly. On the contrary, the MWT grows very quickly in the case of BT. The behaviors of BT, and 
GBT in terms of MDT (Figure 4- right) axe quite similar. The change of database size does not affect 
much on the download time, but a substantial en- hancement is obtained by GBT in comparison with BT. 
In the default experimental set up (i.e., the number of items is 1000), it takes BT-users about 40 seconds 
to download an item while GBT-users spend only 34 seconds (85% less). 4. CONCLUSIONS Previous data broadcast 
methods assume the model in which the server delivers information on only one physical chan- nel. However, 
there are many practical situations where the server has access to multiple physical channels but they 
can- not be combined to form a single high-bandwidth one. In this paper, we have presented a novel technique 
called Gen- eralized Broadcast Technique (GBT). GBT was designed for the model where no item is broadcast 
more than once in each broadcast cycle. It is aimed at optimizing the mobile users' waiting time and 
active time. The near-optimality of this technique is supported by mathematical proofs given in the paper. 
Its performance advantages are assessed by a de- tailed simulation model which compared GBT with another 
technique called the Basic Technique (BT). The experimen- tal results have shown that GBT is superior 
to BT by a significant margin. As an example, under most scenarios GBT-users need to wait 1.5 times shorter 
than BT-users. To download an item, on the average, the former spends 85% shorter than the latter. A 
major contribution of this work is that the proposed tech- nique is the first to address the generalproblem 
of utilizing air caches over multiple physical channels. We are looking at 1400 4O 1300 1200 BT -4---QBT 
*~*. .' 1100 1000 90O 80O 7OO 60O i 5OO 400' I I I I I 1 f I f 800 700 800 900 1000 ltl~ 1200 1300 
1400 1500 Database size (ller~s) 37 38 BT GBT ~-, 3,5 34 33 i i i i i a i i i 5OO 8OO 7OO 80O 9o0 1000 
110~ 1200 1300 14~0 1500 Dat~so size (items)  Figure 4: Effect of database size ways in which we can 
use GBT to broadcast real-time data efficiently. Additionally, it would be useful to evaluate tech- niques 
for broadcasting index information more efficiently. We are also interested in extending GBT so that 
it works efficiently in the case where items can appear multiple times in a broadcast cycle. 5. REFERENCES 
(1] S. Acharya, I~. Alonso, M. FrarLklin, and S. Zdonik. Broadcast disks: Data management for asymmetric 
communications environments. In Proe. of 1995 ACM SIGMOD, pages 199-210, May 1995. [2] S. Acharya, M. 
Franklin, and S. Zdonik. Disseminating updates on broadcast disks. In Proc. of VLDB, pages 354-365, September 
1996. [3] S. Acharya, M. Franklin, and S. Zdonik. Prefetching from a broadcast disk. In Proc. of IEEE 
DATA ENGINEERING, pages 276-285, New Orleans, USA, September 1996. [4] S. Achaxya, M. Franklin, and S. 
Zdonik. Balancing push and pull for data broadcast. In Proc. of 1997 ACM SIGMOD, pages 183-194, May 1997. 
 [5] A. Bar-Noy, B. Patt-Shamir, and I. Ziper. Broadcast disks with polynomial cost functions. In Proc. 
of IEEE INFOCOM, Jerusalem, Israel., 2000. [6] S. Baruah and A. Bestavros. Pinwheel scheduling for fault-tolerant 
broadcast disks in real-time database systems. In Proc. of the 13th IEEE DATA ENGINEERING, pages 543-551, 
Birmingham, U.K , April 1997. [7] A. Datta, A. Celik, J. Kim, D. VanderMeer, and V. Kumar. Adaptive 
broadcast protocols to support efficient and energy conserving retrieval from databases in mobile computing 
environments. In Proc. of the 13th IEEE DATA ENGINEERING, pages 124-133, Birmingham, U.K., April 1997. 
 [8] A. Datta, A Celik, and V. Kumar. Broadcast protocols to support efficient retrieval from databases 
by mobile users. A CM Transactions on Database Systems, 24(1):1-79, March 1999. [9] M. H. Dunhazn and 
A. Helal. Mobile computing and databases: Anything new? SIGMOD RECORD, 24(4):5-9, December 1995. [10] 
M. Franklin and S. Zdonik. Data in your face: Push technology in perspective. In Proc. of ACM SIGMOD, 
Seattle, USA, June 1998. [11] S. Hameed and N. H. Vaidya. Log-time algorithms for scheduling single and 
multiple channel data broadcast. In Proc. of ACM MOBICOM, pages 90-99, Budapest, Hungary, 1997. [12] 
S. Jiang and N. H. Vaidya. Scheduling data broadcast to impatient users. In Proc. of ACM MobiDE, pages 
52-59, Seattle, USA, 1999. [13] D. Johnson, A. Demers, J. UNman, M. Garey, and M. Graham. Performance 
bounds for simple one-dimensional bin packing algorithms. SIAM Journal on Computing, 3(4):299-325, 1974. 
  [14] J. H. Oh, K. A. Hua, and K. Prabhakara. A new broadcasting technique for an adaptive hybrid data 
delivery in wireless mobile network environment. In Proc. of IEEE International Conference on Performance, 
Computing and Communications, USA, 2000. [15] K. Prabhahara, K. A. Hua, and J. H. Oh. Multi-level multi-channel 
air cache designs for broadcasting in a mobile environment. In Proc. of IEEE DATA ENGINEERING, USA, 2000 
[16] K. Stathatos, N. Roussopoulos, and J. Baxas. Adaptive data broadcast in hybrid networks. In Proc. 
of the 23rd VLDB Conf., pages 326-335, Athens, Greece, 1997.   
			