
 Developing Object-Oriented User Interfaces in Ada With the X Window System Gary W. Klabundet Mark A, 
Roth Department of Electrical and Computer Engineering (AF12YENG) Air Force Institute of Technology 
Wright-Patterson AFB, OH 45433-6583 Abstract The graphical userinterface hasbeenacceptedasbeing oneof 
the most important parts of user interactive software projects. Until recatly, however, the design and 
implementation of such interfaces in Ada was a long and ditlicult process. A solution to this problem 
was found with the introduction of the X Window System in the mid 1980 s. These C libraries make it Aatively 
easyto construct sophisticatcduscx interfaces. In the last couple of years, seveml organizations have 
developed bindings to, or implementations of, the X Window System software for use in Ada programs. This 
paper discusses these efforts in general and concentrates on two sets of bindings that were used in the 
development of a graphical user interface for a computer wargame. Introduction The user interface is 
the component of the application through which the user s actions are translated into one or more requests 
for services of the applications, and that provides feedback con­cerning the outcome of therequestedactions 
[91.Becauseof the importance of this interaction, the desigu of efficient and easy to use user interfaces 
is receiving increased attention. Most people now realize that if an application has a user interface 
that is uniliendly or dif6cult to use, it is probably going to sit on the shelf unused. Also, user interfaces 
using some type of wiudowing systemarefastbecoming acommonfeatureofmost computer systems. As a result, 
users tend to expect all appli­cation programs to have a professional, polished user-friendly tG~ m~~de-,qWorkWaS 
done while with the ~srtment Of ~-i~ and Computer Engineering, Air Force Institute of Twtmology. He is 
currently with the Strstegic Conummkations and Computer Center (SCCC/SOSW), OmdAm, NE. 0-89791 -529-1 
/92/0011-0300 interfam [1(5I. Most programming languages, including the Ada language, have only rudimentary 
input and output (I/O) capabilities. As such, user interface programmers had to de­ velop some other 
methods for anything except simple line or character I/O. The introduction of the X Window System in 
the mid 1980 s changed the way user interfaces were developed. The X Win­dow System, or X, is a collection 
(library) of subroutines, writ­ten in the C language, that allows for the creation and manip­ulation 
of graphical user interfaces using multiple windows. These subroutines provide the mechanism to achieve 
the goals previously discussed. Recognizing the importance of X to the development of user interfaces, 
some members of the Ada cmnmunity began working on ways to access the X Window System from within Ada 
programs. The first efforts involved developing bindings to the X routines. Subsequent efforts have looked 
at ways to implement X in the Ada language. This paper briefly discusses the X Window System and some 
of the more significant accomplishments in accessing X from Ada programs. Particular attention is paid 
to the bindings developedby StephenHylandformerly of Science Applications International Corporation and 
E. J, Jones of Boeing Aerospace Co~oration. We discuss how these bindings were successfully used at the 
Air Force Jnstitute of Technology for the desiga and implementation of a user interface for the Saber 
computer wargame. We describe how to create new bindings along with a summary of problems encountered 
when wmbining various sets of bindings in a single application. The paper ends with a description of 
the impact of theX Window System on an object­oriented design and some of the limitations of the bindings. 
 2 The X Window System The X Window System, or X, is a device independent, network transparent windowing 
system that allows for the development of portable graphical user interfaces [10, 11, 16]. It was de­veloped 
in the mid 1980 s at the Massachusetts Institute of Technology (MIT) in response to a need to execute 
graphical software on several difkxent types of incompatible worksta­ 300 tions. Robert Scheifler of 
MIT and James Gettys of Digital Equipment Corporation (DHC) developed X with the primary goals of portabtity 
and extensibility [11]. Another major con­sideration was to restrict the applications developer as little 
as possible. As a result, X .. . provides mechanism rather than policy [5:xvii], To achieve these goals, 
the X Window System relies on the fimdamental principles of network transparency and a re­questievent 
system. Jn X, each workstation that is to display graphical infor­mation (i.e., windows or their contents) 
must have a process called the X server. According to Douglas Young, the X server . . . creates and 
manipulates windows on the screen, produces text and graphics, and handles input devices such as a keyboard 
and mouse [16:2]. A client, on the other baud, is any applica­tion program that uses the services of 
the X server. The clients and savers communicate with each other by sending xequests and event notifications 
over a network. Whena client wants to perform some action on the display, it communicates this desire 
by issuing a request to the appropriate X server. Young states: Clients typically request the server 
to create, destroy, orrecon@ure windows, or to display text or graphics in a window. Clients can also 
request information about the current state of windows or other resources. [164] TheX server, conversely, 
communicates with clients by issu­ing event notifications. Event notifications are sent in response to 
such user actions as moving a mouse into a window, by pressing a mouse button, or pressing a key on the 
keyboard. Applications programs act on these events by registering call­backs with the X Window System. 
A callback is simply a procedure or function that is to be executed when a specitic event occurs. 2.1 
Xlib The X Window System was designed to provide the mecha­nisms for the application program to control 
what is seen on the display s-. The programmer is not constrained by any particular user interface policy. 
These mechanisms are embod­ied in a library of C functions known as Xlib. The Xlib routines allow for 
client control over the display, windows, and input devices. Additionally, the functions provide the 
capability for clients to design such things as menus, scroll bars, and dialog boxes. 2.2 Toolkits While 
applications programmers can use the Xlib routines to accomplish any task in X, many fmd the low-level 
routines tedious and diflkult to use. Jay Tevis [12] noted that the simple action of creating and customizing 
a new window on the display takes at least 24 calls to Xlib. To simplify the development of applications 
programs, many toolkits have been developed. Toolkits can be viewed as libraries of graphical progmms 
layeti on top of Xlib. They were designed to hide the details of Xlib, making it easier to develop X 
applications. There am several toolkits available today. Some of the bet­ter known ones include: the 
X Toolkit (Xt) from MIT, the Xrlib Toolkit (2@ from Hewlett-Packard (HP), Open Look and XView from Sun 
Microsystems, and Andrew from Carnegie Mellon University. Of those listed, Xt is one of the most pop­ular 
[4]. Along with Xlib, it is delivered as a standard part of the X Window System. Xt is an object-oriented 
toolkit used to build the higher level components that make up the user interface [4]. It consists of 
a layer called the Xt Intrinsic along with a collection of user interface components called widgets. 
Widget sets typically consist of objects such as scroll bars, title bars, menus, dialog boxes and buttons. 
In keeping with the X philosophy, the Xt Intrinsic layer remains policy free. As such, it only provides 
mechanisms that do not affect the look and feel (outward appearance and behavior) of the user interface 
[16]. These mechanisms allow for the crention and management of reusable widgets. It is this extensibility 
along with its object-oriented design that makes the X Toolkit attractive to user interface designers 
[14]. It is the programmer s choice of a widget set that determines the high-level look and feel of the 
user interface. Just as there is no standard toolkit, there are many different widget sets supported 
by Xt Intrinsic. However, as Young writes, . . . from an application programmer s viewpoint, most widget 
sets provide similar capabilities [16 12]. Some of the more popular widget sets include the Athena widget 
set from MIT, the X Widget set from HP, and the Motif widgets from the Open Software Foundation. The 
Open Software Foundation (OSF) was formed in 1988 by a group of UNIX vcndom including, among others, 
IBM, HP, and Sun Microsystems. The Motif widget set they created is designed to nm on such platforms 
as DEC, HP, IBM, Sun, and Intel 80386 based architectu~s [6]. Eric Johnson lists&#38;me advantages to 
using Motif [64]: 1, Motif provides a standard interface with a cm­ sistent look and feel. Your users 
will have less work to do in learning other Motif applications, since much of the work learning other 
Motif applications will translate directly to your ap­ plications. 2. Motif provides a very high-level 
object­oriented library. You can generate extremely complex graphical programs with a very small amount 
of code. 3. Motif has been adopted by many of the major players in the computer industry. Many of your 
customers are probably using Motif right now. You ll do a better job selling to them if your applications 
are also based on Motif.  Application Program (c) Motif (C Routines) Xt Intrinsic (C Routines) Xlib 
(C Routines) G 1  I X Server Figure 1: Typical X Windows Configuration S@ucturally, the Xt Intrinsic 
is built on top of Xlib. The Motif widget set, in turn, relies on the fimctions provided by the Xt Intrinsic. 
A typical application program may make calls to the widget set, the Xt Intrinsic, or Xlib itself during 
its execution. This configuration is illustrated in Figure 1. Many user interface designers elect to 
design their own wid­get sets. Some do it for the challenge, while others design their own widgets out 
of necessity. A user interface designer may have a need for a special widget not provided by any available 
widget sets. However, designing custom widgets decreases the portability of the user interface code and 
of the application code in general [4]. 3 Ada and the X Window System Originally, Xlib, Xt Intrinsic 
and most widget sets were writ­ten in the programming language C. Until a few years ago, there was no 
way for an application program written in Ada to use the X Window System. Recent efforts have taken two 
approaches: Ada bindings to X and Ada implementations of thG X litiGS. Most of the Ada bindings m tied 
tO pSItkXlkW operating systems and will only work with a particular Ada compiler. The Alsys, Meridian, 
and Verdix compilers, along with their derivatives, are used most often for the bindings [1]. 3.1 Ada 
Bindings to X In 1987, the Science Applications International Corporation (SAIC) developed Ada bindings 
to the Xlib C routines. Their work was performed under a Software Technology for Adapt­able Reliable 
Systems (STARS) Foundation contract, and is therefore in the public domain. According to Kurt Wallnau, 
Application Program (Ada) z  Figure 2: Application Program Configuration Using the SAIC Bindings ... 
 < a substantial effort was made to map the C data types to Ada, and do as much Xlib processing in Ada 
as possible before sending the actual request to the C implementation [14:51. The actual Ada interfaee 
is accomplished through the use of A&#38; pragma interface statements [3]. Put simply, the pragma inter$ace 
constmct allows an A&#38; program to call subprograms written in another language [2]. Figure 2 shows 
the configura­tion of an Ada program using the SAIC bindings to interface with Xlib. In this figure, 
the application program has no access to any toolkits or widget sets. In a manner similar to that used 
by SAIC, the Boeing Cor­poration recently developed A&#38; bindings to a large subset of the Xt Intrinsic 
and the Motif widget set. Their code also provides access to a very limited subset of Xlib fimctions 
and data types. Like the SAIC eude, Boeing s effort was sponsored by a STARS contract [7]. For the most 
part, the subroutine names and parameter lists closely mirror the actual C routines. Also, Boeing added 
a few subprograms to assist in the building of some commonly used parameter lists. The bindings require 
the Verdix Ada Development System (V-ADS) version 5,5 or higher to execute. While the documentation on 
the software is relatively sparse, it does indicate which modules would require changes in order to port 
the bindings to other systems. Figme 3 shows the eonfqgnmtion of an Ada program using only the Boeing 
bindings. The dashed lines indicate that a small portion of the Xt Intrinsic and Motif fimctions are 
unavailable to the Ada program. Also, the application program cannot access the majority of the Xlib 
timctions. The Ada application program accesses the Xt Intrinsic and Motif routines by willing the appropriate 
subprogmm in the 302 Program (Ada) --r~ \ : Boeing Bindings ,, Ada ,, \ Mofif Widgets : (C Routines) 
Im m I Xlib (C Routines) ] II X Server Figure 3: Application Pmgmm Configuration Using kKillffS Bindings 
bindings. For the mostpart,thebodiesof thecalledsubpm­ gnunscontaincodetoumverttheBoeingdatastnmtmes 
and types to the types needed by the cmrespondiug C code. The Subprogmm bodies then call internal pmcedulm 
or timctions that am bound to the Xt Infrinsics or Motif routines passing in the convextedparameters. 
The bindings developed by Boeing and the SAIC me avail­able at no cost to the Departnmt of Defense. Recently, 
sevexal other cmporations have also developed bindings that me avail­able for pudase [1]. These companies 
have basically taken oneoftwoappmaches. Somehavefollowedtbe approachtaken by the SAIC and Boeing. Others, 
such as Hewlett-Packud tookanalternativeapproachintendingto alleviatetheneedfor much of the type conversionusedby 
the SAIC and Boeing bindings. Hewlett-PackardbindstheAda sulmutines&#38;ectly totheconespondingCcode,resultinginverylittle 
codeinthe packagebodies. To accomplish this, they make heavy use of Ada access types. 3.2 Ada Implementations 
The USAFFJectmnic edto Systems Division xecognizedthenewrite X Windows application programs in Ada at 
a highez level than through Xlib alone. In 1989, they spmsomd a STARS Foundation contract to fimther 
mead the capabfities of in­terfacii Ada and the X WindowSystem[4]. Themsultingre­portsdocumentedeffortsatintegratingAdawith 
theX Toolkit @t). ASPmtof thisSTARSC4UltlllCtUnisysCorpomtiondWd­oped an Ada implemcmtation of (not bindings 
to) the X11R3 Application Program (Ada) Widget Set r---1 I (Add I SAIC Bindings (Ads) Nib (C Routines) 
+   X Server I I  I I 1 I It=====a F&#38;n 4 Application Progmm Con&#38;umtion Using thliays Ada/Xt 
version of the Xt Intcinsics. Ada/Xt as it is calle4 provides an intrinsic package which provides the 
fimctionality of Xt Usedtomanage xresoums, events and hiexmdicd widget cmetmction [15:1]. l%is software 
package uses a modified and corrected version of the SAIC bindings to intm%we to Xlib. Ada/Xt also iucludes 
a sample widget set umsisting of ten Athma widgets and two HP widgets [15]. Unisys elected to develop 
an Xt implemmtation rather than Ada bindings, as SAIC did The reasons for this included [14:9-10]: 1. 
The issue of widget extensibility. Ada bin­ dingswould m@e that new widgets be pm­~~c. 2. fhe issues 
of inter-language nmtime cmopaa­tion. 3. The issues of mntime environment intemction.  Figme 4 mpmsats 
a typical Ada application program using the Ada/Xt interface. The Ada applicatimt code can make use of 
the provided widgets, make calls to Ada/XQ or make calls dinxtly to the Xlib via the modified SAIC bindings. 
Thus, the full flexibility of au X application pmgmm writteQ in C is maintained 4 Saber: A Sample Application 
Someuserinterke.s canbeimplementedby simply caliingsub­routines in the Xt Intrinsic and Motif widget 
set. Others may require additional calls to selected Xlib routines. The object­oriented graphical user 
interface for the Saber wargame [81 developed at the Air Force Institute of lkcimology fits into the 
latter category. Displaying the graphical symbols for the airbases, aircmft missions, and land units 
required the use of low-level Xlib subroutines. Due to the need to accessthe Xlib, Xt Intrinsic and Motif 
Iibmries, it was clear that, as a minimum, the SAIC bindings would have to be used. The choice remained 
of whether to supplement it with the Boeing bindings or the Ada/Xt software developed by Unisys. Using 
the Ada/Xt software would have required the Ml or partial development of an Ada implemen­tation of the 
Motif widget set. The Boeing software, on the other hand, already had bindings developed for Motif. Thus, 
we decided to utilize the Boeing bindings in combination with the SAIC software to develop the Saber 
user interface. The Saber user interface was also designed to use a hexagon (hex) widget designed by 
the Air Force Wargaming Center (AFWC). This object-oriented widget contains routines to cre­ate and manipulate 
hexboards. Routines are provided to display certain features inside of a hex. These features include 
rivers, roads, cities, city names, forestation, and background color. 4.1 New Bindings for the Hex Widget 
Since the hex widget is written in the C progmmming hmguage, Ada bindings had to be developed. These 
hex bindings were modeled after Boeing s bindings to the Motif widget set. Each procedure exported by 
the hex widget had to have a correspond­ing A&#38;procedure. To aid iu understanding, the Ada procedure 
mmes were given the same names as their C counterparts ex­cept that underscores were inserted between 
words. Thus, the C procedure Hx.SetHexLabel became Hx_SetHex...Label . The complete binding for this 
procedme is shown in Figwe 5. As can be seen from the figure, the Ada procedure was im­ plemented with 
another procedure nested inside of it. The outer procedwe is the one called by the application program. 
llms, the application program should declare variables of the appro­ priate type to pass into the procedure. 
The inner procedme is what is actually bound to the corresponding C procedure. In order to distinguish 
it to the compiler, it is given the same name as the outer procedure except that all underw-aes are removed. 
It should be noted that the inner procedure has no body in the Ada cude-its body is actually the C procedure. 
The actual binding was accomplished using the Adapragma interface and pragma intetiacemame constmcts. 
In Figure 5. the pragma intetiace constmct indicates that the inner proce­ chmeis to be bound to a procedure 
written in the hmguage C. The name of the Ada procedure is then paired with the name of the corresponding 
C procedure through the pragma interface.. name construct. The primary purpose of the body of the outer 
procedure is to convert the Ada input parameters to the types needed by the inner procedure for transfer 
to the C subroutine. However, the challenge in developing the bindings was determining g exactly what 
types of parameters should be passed to the C procedures. procedure HX_Set_Hex_Label ( Hex_Wldget : m 
WIDGET; Hex_X : In AF S_LARGE_NATURAL; Hex Y : In AFS_LARGE_NATURAL; Lab=l : In STRING; Reckaw : In E!OOLEAN) 
1s procedure HXSetHexLabel ( Hex_Wldget : In SYSTEM.ADDRESS; Hex_X : In AFS LARGE_NATURAL; Hex Y : 1n 
AFS_LARGE_NATURAL; Lab~l : In SYSTEM.ADDRISS; Redraw : m AFS_LARGE_NATURAL ); pragma INTERFACE (C, IiXSetHexLabel 
) ; pragma INTERFACE_NAM (HXSetHexLabel, w HX Set Hex Label ); _ _ Temp_Label : constant STRING : = 
Label &#38; ASCII, NDL; begin HXSetHexLabel ( Wldget_To_Addr ( Hex_Wldget ), Hex_X, Hex_Y, Temp_Label 
(1) ad~ess, BOOLEAN pos ( Redraw ) ); end HX Set Hex Label; Figure 5: Ada Binding to Hx.SetHexLabel 
Table 1 was developed to assist in this determination for some of the major data types. Given the type 
and mode of the parameter in the outer procedure, the table lists the type for the variable in the inner 
procedure. It also shows how the type conversion should be accomplished in the body of the outer procedure. 
In general, if a variable in the outer procedure has a mode of out , then the corresponding variable 
in the inner procedure must be of type System.Address . This is because the C procedure must have the 
address of the variable ifit is going to set or change the value. One other important point is illustrated 
in Figure 5. In C, all strings must be terminated by an ASCII null character. Ada strings, however, typically 
do not end with this character. Thus, before sending the striug address to the C subroutine, the Ada 
bindings append an ASCII null.  4.2 Combining the Ada Bindings The rehmkuwhip between the Saber wxw 
interface and the vai­ous Ada bindings is shown in Figure 6, This figure accurately reflects that the 
Boeing software contains bindings to a small subset of the Xlib functions in addition to the bindings 
to the Xt Intrinsic and Motif widget set. The user interface may make calls to the Boeing bindings, the 
SAIC bindings, and the hex widget bindings, In fact, interactions between the. application program and 
the X Window System are made solely through these bindings. The Boeing bindings were the primary means 
of interfacing with the X Window System, while the SAIC bindings were 304 Table 1: Parameter Conversion 
Rules outerProcedure Imler Procedure Parameter me Mode Parameter Type Method of Type Conversion Wkiget 
in System.Addm.ss XT.Widget-ToAldr(variablenameY out XT.Addr.To.Widget(variablename) AFS-Large-Naturalb 
 AFS_LargeMatural none (integer > o) :t System.Address variablename address string in System.Address 
variablename(l) addreas out Boolean in AFS_Large-NatumI Boolean pos(variablename) out System.Address 
Iocal-variablename address aXT k an abbrevhtkm of the Boeing package CX. lt3OLKITJNIRINSICS-OSF %is type 
k deEnedin the Boeing pscksge AFS-BASIC-TYF ES the X server is established and windows are displayed 
on the screen. Seveml of the SAIC procedures used to create the unit sym-Saber UserInterface bol pixmaps 
required these values as pammetem. Two methods wexe used to convert the values to the types needed by 
the SAIC code. The tit was a simple type conversionasin the following example that c4mverts a float number 
to an integgx  I BoeingBindings HexBindings  SAIC int eger_numher : = integer ( float_number ) ; 
 HexWdget Binting$ Thesecondmethoduseduncheckedconvemion,aprcdefined -----1 genetic iimction provided 
as part of the Ada language. This generic function had to be instantiated with a source type and a Xt 
Intrinsic target type for each conversion to be performed. An example instantiation to convert a variable 
of type DisplayJ ointer returned by Boeing s XtDisplay iimction to a variable of type Xlib I Display 
for use in the SAIC routines followix function Display_Id_From_Xt_Di splay is new Unchecked Conversion 
Figure 6 User Interface Relationship to the Ada Bindings ( Source =; XLIB. Display_Pointer, Target => 
X_Windows, Display ) ; used primarily for the creation of the gmphical unit symbols. I he unchecked 
conversion utility allows a sequenceof bits, Making the few calls to the SAIC bindings was not straight­ 
au addressin the above example, to be treated as a variable of forward because of inconsistent types 
used by the SAIC and two different types. However. this capability should be used Boeing bindings. Some 
inconsistencies were resolved by sim­ with caution. As Cohen writes, Abuse of this capability can ple 
type convemion while others required the addition of new subvert the elaborate consistency-checking mechanisms 
built subroutines to the software. into the Ada language and lead to improper internal represen­tations 
for data [2:8O4]. For the Saberuser interface, however, this was the only way to passcertain variables 
created through 4.2.1 ~pe Conversions. the Boeing bindings as input parameters to the SAIC subrou­tines. 
By necessity, the Boeing software contains Ada declarations of a few low-level Xlib routines. These de&#38;rations 
for such 4.2.2 Problems With SAIC Data Structures. things as the X Window System display, windows, and 
draw­ ables were needed because the Xt Intrinsic provides functions Since the initial connection with 
theX serverwas made through to return these values that are created when the connection with the Xt Intriusics 
via the Boeing bindings, and not through the SAIC code, seveml internal SAIC data structures were not 
initialized. Because these &#38;ta structures were not initialized, some fimctions provided by the SAIC 
bindings could not be used, Ilvo of the functions that fell into this category were Default. Depth and 
Root.Window. The Mults returned by these fanc­tions were needed for the creation of the unit symbol pixmaps. 
Toobtainthesevalues,abinding wascreatedforeachfimction and added to the Boeing bindings. Before the values 
could be used by the SAIC subroutines, however, they had to be con­verted to the corresponding SAIC types. 
The value returned by Root-Window was converted using the unchecked conversion described in the previous 
section, while the value returned by DefaultDepth was converted through simple type conversion.  Issues 
Affecting the Object-Oriented Design We conducted a high-level design of the Saber user interface in 
the normal object-oriented fashion identifying the primary objects and object classes, the object attributes, 
and the meth­ods. However, during the detailed design, the issues of when and where to instantiate the 
objects presented some interesting challenges. In a normal object-oriented Ada program, objects cart 
be instantiated by other objects or within some controlling module such as the main pmcedme. Unfortumtely, 
instanti­ating objects in the main driver procedure does not work very well for programs which use the 
Xt Intrinsic. The nason for this is that the main procedure of au Xt application program, after performing 
various initializations, typically enters a main loop though a call to the Xt_Main_Loop function. This 
routine is an infinite loop that retrieves and dispatches events from the X event queue. When au event 
is dispatched for which a call­back has been registered, processing in the main procedure is suspended 
and some other subroutine is executed. As we will show, these callback procedures are the ideal place 
for object instantiation to take place. For user interfaces using a widget set, objects to be instanti­atedinclude 
widgets such as dialog boxes, menu bars, and push buttons, as well as application specific entities. 
Since the cne­ation and manipulation of objects is often driven by user input, it makes sense to instantiate 
and control them in the callback procedures. For example, selecting a particukir menu item may cause 
a dialog box to appear which lists the current values of the attributes for a particular object. In this 
case, a dialog box widget (object) is created and filled with data associated with another object. Further 
justification for this design approach can be found by examinin g the hiemrchy of Motif widgets in the 
context of widget creation. The widgets used in an application program w be arranged in a hieramhy with 
all widgets, except for the top level widget, having exactly one parent widget. The widget id of the 
parent must be speciiied whenever a new widget is to be created. By default, callback procedures always 
receive a parameter specifying the widget for which the callback was registered. If this widget is not 
the desired parent of the new widget, then the possibility exists that the desired parent widget id can 
be passed to the callback procedure as a client data parameter. Unfortunately, the patent s widget id 
may not be known at the time when the callback was registcnxi. An alter­native solution is to make the 
parent widget globally available to the callback procedure. This then suggests that the callback procedures 
be grouped such that all needed parent widgets are visible. In the interests of good software engineering 
princi­ples, it makes sense to keep the group of global variables and associated callbacks as small as 
possible. Our conclusion is that instead of instantiating objects in a main controller procedure, object 
instantiation is better per­formed from within traditional and callback procedures which should be grouped 
into cohesive Ada packages. Some instan­tiation can be performed via the main procedure calling the traditional 
procedures during initialization before entering the Xt-iilaitd,oop. Other objects are mated, manipulated, 
and destroyedwithin thecontrolling packagewhen callback proce­dures are entered as a result of specific 
event occurrences. The callback procedures will perform their functions by using the methods associated 
with the specific objects being controlled. It is important to realize that the design is still object­oriented. 
The issues to considerate when and where the objects are to be instantiated and controlled. 6 Limitations 
of the Bindings Thebmdings written forXlib, Xt Intrinsic audMotifwidget set proved to be an indispensable 
part of the Saber user interface. While there were some weaknesses noted in the software, as a whole 
the bindings were able to directly or indirectly satisfi the requirements for the user interface. One 
problem common to the bindings is that they were designed for specific versions of the X software. Specifically, 
the SAIC bindings are for Xl 1R3 and the Boeing bindings arc for Motif VI .0. 6.1 Boeing Bindings The 
fit thing one notices when looking at the Boeing software is the lack of documentation. For the most 
part, the only documentation is in the form of section titles which separate the subroutines into topical 
categories. Thus, it would help if the application programmer is already familiar with the Xt Intrinsic 
and Motif widget set before trying to use the Bwing bindings. Furthermore, a few of the subroutines do 
not have nice, clean bindings to their corresponding C routines. These Ada subroutines use sparsely documented 
data structures that are defined within the bindings and that have no counterpart in the C cude. It takes 
some time to learn what these data structures are for and how to use them properly. A second weakness 
is that the bindings do not cover every Motif and Xt Iutrinsics function. This fact is made clear in 
a README file that comes with the softwrue. Some of the 306 missing procedurescanbeaddedwithout toomuchdifficulty. 
Other functions require a little mom thought, The third dmwback to using the Boeing bindings is that 
they are currently tied to the Verdix Ada Development Sys­tem (VADS) version 5.5 or higher. The bindings 
make use of the C.Strings , ASrings , and Command_Line pack­ages provided with the VADS library. The 
use of these pack­ages restricts the portability of the application software. The README file included 
with the Boeing bindings indicates which modules would have to be changed to port the software to machines 
with dii%nmt Ada compilers. However, the required changes should not be attempted by a novice Ada programmer. 
6.1.1 Hardware Dependencies. Even ifa systemdocs have VADS vexsion 5.5 or higher, there is no guarantee 
that the Boeing bindings will work eorredy. We found this out the hard way when attempting to use the 
bindings on a Sun 386i machine running VADS version 5.7 with Unix. Several test programs were written 
to gain familimity with the bindings. However. they aborted with Segmentation Faults when executed. Analysis 
of the code showed that they were syntactically and semantically coned. It was later determined that 
there were two problems, nei­ther of which were caused by the Boeing bindings or the test progmms. The 
causes of the problems were found in the Au­gust, 1991 edition of the VHDS Connection. According to the 
Verdix Corporation, there are three potential problems areas to be aware of when writing programs that 
interface with C. These are parameter passing conventions, register usage, and pamllelism. In this case, 
it was the tit two areas that were causing the test program to abort. The Verdix Corporation described 
the parameter passing conventions as follows[13:8]: In many cases, C does not use the same parame­ter 
passing conventions as Ada. When calling C from Ada this is not a problem, because VADS auto­matically 
genemtes a C calling sequence whenevex pragma INTERFACE is used. When calling Ada from C, however, there 
can be a problem. Verdix has implemented pragma EXTERNAL, which will cause an Ada subprogram to accept 
a C calling se­quence, but this is only available inversion 6.0.5 and above. Jle problem encountered 
with register usage had to do with dit%erences in the ways Ada and C use registers. According to the 
Verdix Corpomtion[13:8]: For the 386. . . C expects the call to save and restore sny registers it modifies, 
other thsn eax. Ada expects the caller to do the saving. This works fine when A&#38;calls C, but screws 
things up when C calls Ada. These register saves must bedonemanually, through the use of machine-code 
insertions. At first glance, it did not appear that these issues would be causing the problems. It was 
obvious that A&#38; was making calls to C through the Boeing bindings, but it was not readily apparent 
that C was making any calls back to A&#38;. However. C was making calls to Ada inside of theXt-Main..Loop 
procedure. Specifically, after the pushbutton is pressed, the C procedure XLD@xztchEvenr eventually causescontrol 
to be passed back to the Ada c.allbackprocedure that was registered with the push­button. It was at this 
point that the abovementioned problems caused the Segmentation Fault . However, we stmm that this was 
not a problem with the Boeing bindings. Rather, it is inherent iu the way callback procedures are dispatched. 
The test programs and the Boeing bindings worked correctly when the software was executed on a Sun Spare 
Station 2.  6.2 SAIC Bindings We also encountereda problem with the SAIC bindings, when we used them 
for the creation of the graphical symbols used to represent the air and land units in the Saber user 
interface. The problem was found when trying to read in the bitmap data created with the Bitmap editor 
provided with the X Window System software. This simple drawing program allows an application programmer 
to interactively createbitmap patterns. The pattern is saved in a special format that can be read in 
by an application program through calls to appropriate Xlib subroutines. The Bitmap program outputs the 
bitmap &#38;ta in pups of two hexadecimal digits. Thus, each of these two digit numbmx isintherange O.. 
FF (or, in decimsl, O. . 255). However, the SAIC bindings read each two digit number into an eight bit 
data structure called BitData that can only handle numbers in therange-27. , 27 1 (or, 128. . 127). 
This means that any hexadecimal number greater than 7F is ccmsidemi out of range. Analysis of the errors 
revealed that the SAIC programmers made a previous attempt to correct this problem. We coded and tested 
a solution to the problem that solved the problem without creating any new errors.  7 Conclusion In 
this paper we have presented a brief overview of the X Window System along with recent efforts for incorpomting 
its use into Ada programs. One method involving the use of Ada bindings to X was presented in some detail. 
These bindings served as a example for developing new bindings for a user defined widget. While there 
were a few exceptions, most of the Ada subprograms bear a close resemblance to their C counterparts. 
Thus, anyone f* with the calling sequences for the Xlib, the Xt Intrinsies and the Motif widget set should 
be able to understand the fimctionality of Ada programs that use the Boeing and SAIC bindings. The impact 
of the X Window System on object-oriented de-[12] signlprogramming was also discussed. While object definition 
is unaffected by X, new approaches are needed for object in­stantiation and control. This is becauseof 
the main loop that is entered to obtain and dispatch events ftom the X server. The continued use of the 
SAIC and Boeing bindings is en­ [131 couraged for the development of graphical user interfaces in A&#38;. 
[14]  Acknowledgements The research for this paper was supported by a grant from the Air Force Wargaming 
Center, AU CADR.WWG, Maxwell AFB, AL, 36112. [15]  References [1] AdaInformation Clearinghouse. Available 
Ada Bindings. Draft. Lanham, MD, October 1991, [16] [2] Cohen, Norman H. Ada as a Second Language. New 
Yorlc McGraw-Hill, 1986. [31 Hyland, Stephen J. and Mark A. Nelson. Ada Bindings to the X Window System. 
Ada computer software source code, 1987. [4] Inter$ace Standards Informal Technical Data, Ada Inter­faces 
to X Window System. Software Twlmology for Adaptable Reliable Systems (STARS) Contract F19628­88-D-0031, 
Publication No. GR-767O-1O69(NP), Reston VA Unisys Corporation, March 1989 (AD-A228820). [51 Johnson, 
Eric F. and Kevin Reichard. X Window Appli­cations Programming. Portland: MIS Press, 1989. [61 Johnson, 
Eric F. and Kevin Reichard. Power Program­ming. . , Motif. Portland km Press, 1991. [71Jones,E.J. Ada 
Bindings totheXt Intrinsic andMotif Widget Set. A&#38;computer software source code, 1991. [81 Klabunde, 
Capt Gary W. An Animated Graphical Postprocessor for the Saber Wargame. MS thesis, AFIT/GCS/ENG/91 D-10, 
School of Engineering, Air Force Institute of Technology (AU), Wright-Patterson AFB OH, December 1991. 
 [9] Myers, Brad A. and Mary Beth Rosson. User Interface Progmmming Survey: SIGCHIBulletin, 23:27-30 
(April 1991). [10] Pountain, Dick. The X Window System, Byte, 14353­360 (January 1989). [11] SCheiiler, 
Robert W. andJmGcttys. TheX Window Sys­tem, ACM Transactions on Graphics, 5:79-109 (April 1986). Tevis, 
Jay-Evan J. It. An Ada-Based Framework for an IDEFo CASE Tool Using theX Window System. MS thesis, School 
of Engineering, Air Force Institute of Technology (AU). Wright-Patterson AFB OH, December 1990 (AD-A189681). 
Verdix Corporation. V21DSConnection. Technical Report. Chantilly, VA, August 1991. Wallnau, Kurt C. AdalXt 
Architecture: Design Re­port. Soi%vare Technology for Adaptable Reliable Sys­tems (STMS) Contract F19628-88-D-O031, 
Publication No. GR-7670-1107(NP).Reston VA Unisys Corporation, January 1990 (AD-A228827). Wallnau, Kurt 
C. and others. AdalXt Toolkit, Version De­scription Document. Software Technology for Adaptable Reliable 
Systems (ST~S) Contract F19628-88-D-O031, Publication No. GR-7670-1133(NP), Restrm VA Unisys Corporation, 
July 1990 (AD-A229637). Young, Douglas. The X Window System: Programming and Applications with Xt (OSFIMot&#38; 
Edition). Engle­wood Cliffs NJ Prentice Hall, 1990. 308 
			