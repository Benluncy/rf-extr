
 Chapter 25 Generosity Helps, or An 1 l-Competitive Algorithm for Three Servers Marek Chrobak Lawrence 
L. Larmore* Abstract Manasse, McGeoch, and Sleator [13] proved that if c < k then there does not exist 
a c-competitive We propose a new algorithm called Equipoise for the algorithm for k servers. They also 
gave a 2-competitive k-server problem, and we prove that it is 2-competitive algorithm for 2 servers. 
Another 2-competitive solution for two servers and Ii-competitive for three servers. For was presented 
in [5]. The problem of whether there is a k = 3, this is a tremendous improvement over previously k-competitive 
algorithm for k servers if k ~ 3 remains known constants. The algorithm uses several techniques open, 
and is known as the k-server problem. for designing on-line algorithms convex hulls, work A great deal 
of effort has been made to improve the functions and forgiveness. time and space efficiency of 2-server 
algorithms [6,12], The results presented in this paper were earlier an­including randomized algorithms 
[4, 14]. nounced at the DIMACS Workshop on On-Line Alg&#38; For some special cases, k-competitive algorithms 
ritms [8]. have been found. Chrobak et al. [3] gave a k-competitive algorithm for the line and the weighted 
cache problem. Introduction This was generalized later to trees in [7]. Coppersmith The k-server problem 
was introduced by Manasse, Mc­et al. [9] discovered a randomized algorithm with com-Geoch, and Sleator 
[13]. A given problem instance con­petitiveness constant k that works for a class of metric sists of 
a positive integer k, and a metric space M. spaces called resistive. The data consist of an initial configuration 
S0 c Ak M, Although, for arbitrary k, no k-competitive algo­(where AkX = the set of all multisets of 
order k within rithm is known, there are already some results in this a set X) and a sequence of requests 
rl, r2, . . . rm G M. direction. Fiat et aL [10] have presented a competitiveWe think of S0 as the initial 
configuration of k movable algorithm for k servers whose constant is an exponential servers. After each 
request r-t we must move one server function of k. Grove [11] has proven that the harmonic to rt in order 
to serve the request. We are also free algorithm is competitive for any k (also with an expo­to move 
the other servers. Cost is defined as the total nential constant). His result gives another competitive 
distance moved by all servers. deterministic algorithm via the technique developed in The task is to 
design an on-line algorithm for this [1]. problem, that is an algorithm that outputs the move in In this 
paper we give an 1 l-competitive algorithm response to rt before receiving the next request rt+l. for 
three servers. Although the algorithm is probablyIt is not hard to see that for k ~ 2 there is no on-line 
not optimal (the conjectured constant is 3), our con­algorithm that computes the optimal schedule. This 
st ant, 11, is much smaller than previously known values motivates the search of algorithms that are 
almost [2,10,11] of competitiveness for arbitrary metric spaces. optimal, that is, algorithms that compute 
a schedule The best of these constants, given by Grove [11], is 576,within a constant factor of the minimum. 
 and the proof is not constructive, i.e., no explicit algo-More precisely, an on-line k-server algorithm 
A is rithm is given. The time complexity of our algorithmcalled c-competitive if for each configuration 
X E Ak M is 0(n2) for each step, where n is the number of rele­sup {costA(X, Q) c. COSfOpt(X, e)} < 
CO, vant points, i.e., points in Al which are either positions PGM of our servers initially, or have 
been requested. Besides the algorithm itself, we present some tech­where cOsfA (X, Q) is the cost of 
the schedule computed niques that we believe should find applications in theby d starting from X on request 
sequence p, and design of on-line algorithms (in fact, some of them al-COStOpt(X, p) is the corresponding 
optimal schedule. ready have). These include: Work Functions. A work function describes the ~@-tment 
of Computer Science, University of California, Riverside, GA 92521. Research partially supported by the 
optimal cost of serving a given sequence of requests, National Science Foundation grant CCR-9112067. 
 19 AN 1 l-COMPETITIVE ALGORITHM FOR THREE SERVERS from a given initial state to any final state Z. A 
work function describes all relevant information about the behavior of the adversary up to now. (A similar 
concept waa used by Manasse, McGeoch and Sleator [13].) The optimal cost of serving the sequence of past 
requests is the infimum of the current work function. Forgiveness. A work function may have a very complicated 
form. Every local minimum of a work function is a possible configuration of the adversary servers. This 
makes the design of an algorithm and proof of its competitiveness difficult. The idea of forgiveness 
is to lower the values of the work function on some configurations, causing the work function to have 
a simpler form. That may, in turn, make us decrease the total we charge the adversary in fact, it may 
even cause some of the moves to have negative cost allocated to the adversary. Another, useful, way to 
view this method is to imag­ine that we play against a turbo-adversary that, due to forgiveness, never 
pays more than the optimal cost, and sometimes pays less. If we apply an appropriate forgive­ness strategy, 
we gain extra knowledge about possible turb~adversary configurations. If our algorithm is C-Competitive 
against such a turb~adversary, then it is certainly c-competitive. An example of a forgiveness operation 
is shown in the figure below, where the space of server configura­tions is viewed, symbolically, as the 
real line. Before forgiveness, the optimal algorithm may be in configu­rations X, Y, Z or T. After forgiveness 
it can be in configurations U or V. Because of the forgiveness op­eration, the infimum of the current 
work function will decrease by d, and thus the adversary cd will also de­crease by d. xUY ZvT In this 
paper we carry the forgiveness operation to the extreme. Our algorithm Equipoise, given a current work 
function w, forgives w to a characteristic function adversary servers at every step. Convex Hulls. It 
turns out that sometimes it is not possible to find a configuration X such that the forgiveness to xx 
gives the desired effect. We solve this difficulty by embedding M into a bigger metric space called the 
convex hull of M, and finding X in this convex hull. Convex hulls were introduced in [5], where they 
were used to design an optimal algorithm for two servers. Amazingly, this process gives an optimal algorithm 
for two servers. As it turns out, Equipoise is equivalent to our 2-server algorithm from [5]. For k = 
3 we obtain an 1 l-competitive algorithm. We also show that our analysis is tight, in the sense that 
with our forgiveness strategy Equipoise is no better than 1 l-competitive. The algorithm and correctness 
proofs can be pre­sented without explicit use of work functions and for­giveness. This is due to the 
extreme nature of our for­giveness strategy, since each work function after forgive­ness can be identified 
with a configuration of our servers. Nevertheless, both tools were instrumental in discov­ering the algorithm, 
and are necessary for a complete understanding of the algorithm. 2 The Adversary Pseudo-Cost Let A be 
an arbitrary k-server algorithm. Instead of comparing A s cost to the optimal cost, we will define a 
new quantity which we call adversay pseudo-cost for each of A s moves. Let S be the current configuration 
of our servers, let r be the new request point and suppose that our al­gorithm moves one server so that 
the new configuration is S , with r 6 S . A s cost is SS = the total distance moved by our servers, while 
the adversary pseud~cost is defined to be V(S, r, S ) = minx~r {SX S X}. Note that, without loss ,of 
generality, the minimum may be taken only over configurations r E X ~ {r} US, of which there are just 
k choices. Note also that, unlike the op­timal cost, the adversary pseudo-cost depends not only on the 
request sequence but also on our strategy d. LEMMA 2.1. For any sequence of requests, the total adversary 
pseudo-cost for any k-server algorithm d is less than or equal to the optimum cost for that request sequence. 
Proof Let S0 be the initial configuration of our servers. The adversary starts from the same configu­ration, 
i.e., S0 = AO. Lete = rl ...rm be the request sequence. After request rt our servers are in configura­tion 
St and the adversary servers are in configuration At. By the triangle inequality Xx of some carefully 
chosen configuration X. This ) = ~ min {S - X StX}  ~v(st- >> r S m ~=1 X3ri means that we know the 
exact position of the turbo­ t=1 t=] m t=l In the introduction, we mentioned work functions and the 
forgiveness technique. The adversary pseudo­cost has been, in fact, derived using those methods. The 
details will be explained in the journal version of the paper; here we only give the idea. Suppose that 
our current configuration is S, and that we know that the adversary is also in S. Let r be the new request 
point. If the algorithm moves to S , with r E S , then charge charge the adversary cost a, where a is 
largest pcesible so that the work function on each configuration X is at least XS + a. What we essentially 
do is forgiveness: we lower the values of the new work function to a function XS + a. This value a, 
as itturns out, is exactly the pseudo-cost of this move. 3 Convex Hulls Let M be a metric space. By 
xy we denote the distance between two points x, y E M. We shall use the word isometry to mean a one-to-one 
and onto function from one metric space to another which preserves distances. An embedding shall be an 
isometry from one metric space to a subset of another, i.e., a function which preserves distances, but 
is not necessarily onto. Let A(a, b, c) be the predicate, defined for all real a, b, c, which is true 
if and only if there could exist a triangle whose sides have lengths a, b, c. Thus, A(a, b, c) ifandonly 
ifa~b+c, b<c +a, andc~a+b. We define Cl(M), the closure of M, to be the set of all real-valued functions 
u on M for which Vx, y c M : A (u(z), U(y), *y). LEMMA 3.1. Cl(kf) is a metric space under the sup-metric: 
uv = supz~~ Iu(z) v(z)l for u, v E Cl(M). The relation ~ on Cl(M), defined by u s v iff u(z) < v(z) 
for each z E M, is a partial order. We also write u<vifusvandifu(z) <v(z) forsomex~M. We define CH(M), 
the convex hull of M, to be the set of all members of Cl(M) which are minimal under this partial order. 
M embeds isometrically into CH(M) by mapping each x E M onto its characteristic function XX, defined 
by xx(y) = zy. To simplify notation we will often identify each x with xc. For each u E Cl(M), define 
the slack function u* M : ~ R+ by u*(x) = j infYe~{u(z) + u(y) zy}. LEMMA 3.2. Let u E Cl(M). Then u 
c CH(M) ifl u* = O. In particular, if M is finite then u c CH(M) iff VZCM 3yGM : u(z) +u(y)= zy. CHROBAK 
AND LARMORE LEMMA 3.3. Let X be a jinite metric space, and X = X {x } for some z E X . Then the function 
I on CH(X) defined by the formula I(u)(x) = u(z) for z E X, and I(u)(z ) = max~ex{zz u(z)}, is an embedding 
of CH(X) into CH(X ). Furthermom, iffor each z c X there exists y ~ X such that xx +yz = XY, then I is 
an isometry. LEMMA 3.4. If X = {xl, . . .xn} is any finite met­ric space, and if U ~ CH(X) is finite, 
say (UI = m, then there exists an isometry J : CH(U) ~ CH(X) such that (a) J(u) = ufor any uEU (b) For 
any given ~ E CH(U), J(f) can be computed in O(n(n + m)) time as fol­lows: first, for i := 1 to n do 
v(~~) :=   max{ max.~u{u(ci) ((u)}, maxj<i{~j~! v(zj)} } Then we set J(c) := v. THEOREM 3.1. (a) 
If IMl =2, CH(M) is a Zinc segment, with the two points of M at the ends.  (b) If [Ml= 3, CH(?vf) consists 
of three line segments, which we call whiskers, joined at a central point, to form a Y shape. The points 
of M are at the outer ends of the whiskers.  (c) If \Ml = 4, CH(M) consists of a rectangle with the 
Manhattan metric, together with a line segment (Uwhisker ) attached by one end to each corner. The points 
of M are at the outer ends of the whiskers (See the figure below).  (d) If IMI = n, CH(M) can be embedded 
in R (with the sup-norm metric) and consists of the finite union of a number of convex pieces of various 
dimensions. None of the pieces has dimension greater than in/2j.  Y b x f d r Any of the shapes described 
by Theorem 3.1 can be degenerate. AN 11-COMPETITIVE ALGORITHM FOR THREE SERVERS 4 The Equipoise Algorithm 
In this section, we introduce the Equipoise Algorithm for the k-server problem in an arbitrary metric 
space, M. For the sake of exposition, it is best to first define Equipoise abstractly in CH(lhf), and 
later present its implementation in finite and infinite metric spaces. Equipoise in CH(lf). We assume 
first that Equipoise has k movable servers in CH(A4), where Al is a finite metric space. We can also 
allow the adversary to makes requests in CH(i14). At each request r, all of our k servers may move within 
CH(lkf). The algorithm is memoryless, in the sense that the only inputs used for each move are the previous 
positions of our servers in CH(i14) and the current request point. Suppose that S = {sl,. . .Sk} ~ AfiCH(lvf) 
is the current configuration of the servers and r the new request point. Define 1{ = S U {r} and Eij 
= CH({si, sj}), for 1 s i < ~ ~ k. By Lemma 3.4 we can assume that Eij ~ CH(S) ~ CH(K) q CH(A4) forl~i<jgk. 
Equipoise will move its servers to a configuration S that is determined aa follows: Define a weighted 
complete graph G whose vertices are our current server positions and the weight of the edge e~j = (Si, 
Sj) is weight(si, sj) = (Sisj +sir+sjr)/2-Let T be a minimal spanning tree of the graph G, which consists 
of k 1 edges. If e~j E T, define Sij c Eij to be that point whose distance to si is (Sisj + Sj r s~r)/2 
and whose distance to sj is (Sisj + sir Sj r)/2. Such a point must exist because -Eij is simply an interval 
between si and sj. Let S consist of r together with all Sij for which eij E T. Equipoise then chooses 
the minimum cost move of all servers from S to S . Implementation in a jinite space. We now define the 
Virtual Equipoise algorithm on an arbitrary finite metric space Al. The algorithm keeps track of fictitious 
servers in CH(iV), which are moved according to the rules of Equipoise in that space. Each real server 
in Al itself is only moved when the corresponding fictitious server actually serves a request. Name the 
fictitious servers ~1, ..., fk and the real servers sl, . . ., sk. Then, if server fi moves to r = Xr, 
then si moves (in reality) to r to serve the real request. If ~i does not serve the request in this move, 
then Equipoise only updates its position in CH(kf), but does not move Si. Initially, the fictitious servers 
match the real ones. Each time we move fi, we charge ourselves the cost of the fictitious move, but since 
we do not actually have to pay that charge, we place it as a credit on Si. BY the triangle inequality, 
and the fact that Al embeds in CH(Jf), the cost of each real move of si cannot exceed the value of the 
credits that have accumulated on si. The real cost thus never exceeds the fictitious cost, so Virtual 
Equipoise is c-competitive in M if Equipoise is c-competitive in CH(M). The idea for finite spaces can 
be extended to infinite spaces using Lemma 3.3. We omit the details. 5 The Proof for Two Servers In this 
section we sketch the proof that Equipoise is 2­competitive for two servers. If carefully inspected, 
the algorithm turns out to be equivalent to the one in [5]. This new proof of Equipoise for k = 2 is 
outlined here since it is both simpler than the proof in [5, 13], and for the sake of exposition (the 
argument for k = 3 is much harder). As it has been explained in Section 4, it is sufficient to present 
Equipoise in CH(M). LEMMA 5.1. For k = 2 the adversary pseudo-cost for each move of Equipoise is equal 
to the distance moved by the one of our servers that moves to the request point, minus the distance moved 
by our other server. THEOREM 5.1. Equipoise is 2-competitive for two servers. Proo$ We define the potential 
function to be @ = xy, where x, y are our server positions. Consider one move. By Theorem 3.1, CH(K) 
consists of three whiskers joined at a central point. Let a and b be the lengths of the whiskers which 
contain x and y, respectively, and c the length of r s whisker. Without loss of generality, a < b. The 
adversary pseud~cost of the move is c by Lemma 5.1, our cmt is 2a+ c, and the change in potential is 
c 2a. Thus cost-EQ (S, r)+@(S ) @(s) = 2. V(S, r, S ). By summing this inequality over the whole sequence 
of requests (this is the well-known potential argument), we obtain the theorem. 6 The Proof for Three 
Servers In this section we will sketch the proof that Equipoise is 3-competitive for three servers. As 
before, it is sufficient to present Equipoise in CH(M). LEMMA 6.1. For k = 3 the adversary pseudo-cost 
for each move of Equipoise is equal to the distance moved by the one of our servers that moves to the 
request point, minus the distance moved by our other servers. THEOREM 6.1. Equipoise is 11-competitive 
for three servers. Proof. We will reduce the problem of proving that our cwt is n-competitive against 
the adversary pseudo­cost by reduction to a Blue--Red gamej a problem on a hi-weighted directed graph. 
We then show that this graph hss certain prime edges, such that every edge factors as a path involving 
only prime edges. We then define a potential function on the vertices of the graph, and show that, for 
each prime edge, the Blue cost plus the increase of the potential does not exceed eleven times the Red 
cost. The Blue-Red game. We define a Blue Red game to be a directed graph, ~, with two costs, the Blue 
cost and the Red cost, associated with every edge. We say that G is c-competitive if there exists a function 
Q, defined on the vertices of G, such that, for every vertex v and every path Q which starts at v we 
have costB/ue(a) < c . costed + Q(v). We let the vertices of Q be all multisets consisting of three non-negative 
real numbers, not necessarily distinct. The triple {11, lz, la} represents the slack parameters of the 
convex hull of our server positions, that is, S1S2 = ?l, S1S3 = /2 and S2S3 = ~3 (See Theorem ??, part 
(b)). There are five classes of edges of ~. (corresponding to the five cases of moves of Equipo~e). Let 
a, b, c, d, e, f be any non-negative real numbers. Then there are edges of ~ from v = {a + e,b, c+ f} 
ss follows: OClass I: Ifas band a+f ~c,there isanedge {a+e, b,c+f}-+{d+ e, b-a+ f,c-a-f}with Red cost 
d a and Blue cost 3a+ d+ 2f. OClasS II: Ifa ~ banda s c< a+f, there isanedge {a+e, b,c+f}-{O, b+c-2a, 
a-c+d+e+f} with Red cost d a and Blue cost min{3a + d + 2f, a+2c+d+2e}. OClass III: If b~a~b+e and b<c<b+f, 
there isanedge {a+e, b,c+f}--+{a b, c b, d a c+ 2b+ e+ f} with Red cost d band Blue cost min{2a+ b+d+2f, 
b+2c+d+ 2e}. OClass IV: If b~a~b+e and b+ f~c, there isan edge {a+e, b,c+f} -{f, d a+b+e, a+c 2b f} with 
Red cost d b and Blue cost 2a+ b+ d + 2~. OClass V: If b+e~aand b+ f~c, there is an edge {a+e, b,c+f}~{d, 
a b e+f, c b+e f} with Red cost d band Blue cost 3b+ 2d+ 2e+ f. Prime edges. We will identify a set of 
edges in ~, which we call prime edges, such that every edge can be factored into prime edges. Precisely, 
a prime factotizaiion of an edge VI -V2 is a path from VI to V2, consisting of entirely prime edges, 
whose total Red (Blue) cost is equal to the Red (Blue) cost of VI ~ V2. We now list the prime edges, 
of which there are four types. Each prime edge is a special case of one of the five classes of edges 
listed above. Let ~ ~ O. (A) If c < /i for each i then {L l, 12,13} ~ {11 s,t2 e, /3 e}. The Red cost 
is C and the Blue cost is 3&#38;. CHROBAK AND LARMORE (B) {~l,tz,t?a} ~ {t, + e,~z,~a}. The Red cost 
is e and the Blue cost is c. (C) If 2.s ~ /?3 then {~,,~z,~a} ~ {11+ &#38;,t2,t3 2S}. The Red cost 
is O and the Blue cost is 2s. (D) {n, Y2,13} S {O,l?l + 12, 13}. The Red cost is O and the Blue cost 
is 2. rnin{ll, t2}.  The five classes of edges factor into primes as shown below. Denote S = {a+ e,b, 
c + f}. (I) Class I factors into primes as S ~ {e, a+b, a+c+f} ~ {e, -a+ b+ f,-a+c-f} ~ {d+e, -a+ b+ 
f,-a+c-j}. Thus the total Blue cost is 3a+ d+ 2f and the Red cost isd a. (II) Class II factors into 
primes as S ~ {e, a+b, a+c+f} ~ {e, -2a+ b+c, a-c+f} 2 {a-c+ e+ f,-2a+b+c,0} 3 {a-c+ d+e+f, -2a+ b+c,0}. 
Thus the total Blue cost is min{3a+d+2~, a+2c+d+2e} and the Red cost is d a. (III) Provided a+ f < c+ 
e (i. e., the server at z moves to r), move III factors into primes as S ~ {a b+e, O, b+c+f} s {a-b+e, 
-b+c, b-c+f} 3 {a-c+ e+ f,-b+c, O} S {-a+2b-c+e+f, -b+c, a-b} ~ { a+2b c+d+e+f, b+c, a b}. The cost of 
the D-move in step three, by definition, is 2. min{a b + e, b c + f}. But from the assumptions of Case 
III, and inequality a + ~ < c + e we obtain b c+f=(b a) c+(a+f)~e ~a b+e, proving that this cost is indeed 
2(b c + f). Thus the total Blue cost is 2a+ b+d+2f = min{2a+b+d+2f, b+2c+d+2e} (because a+ f < c+ e), 
and the Red cost is d a. The case where a + f > c + e (i.e., the server at z moves to r) is symmetric. 
(IV) Class IV factors into primes as S ~ {a b+e, O, b+c+f} S {a b+e, f,-b+c-f} S {-a+ b+e, f,a-2b+c-f} 
3 {-a+ b+d+e, f,a-2b+c-f}. AN 11-COMPETITIVE ALGORITHM FOR THREE SERVERS The total Blue cost is 2a+ b 
+ d + 2f and the Red cost isd b. (V) Class V factors into primes as S ~ {a b+e, O, b+c+f} ~ {a-b-e, O,-b+c+e+f} 
~ {a-b-e+ f, O,-b+c+e-f} 3 {a-b+d-e+f, O,-b+c+e-f}. The total Blue cost is 3b + d+ 2e + 2 f and the Red 
cost is b d. Thus we have shown that each edge can be factored into a sequence of prime moves with the 
same Blue and Red COStS. LEMMA 6.2. The Blue Red game ~ is 11­ competitive, that isj if ~ is any path 
in ~ starting from a Vertez v, then c@B~Ve(@) ~ 11. cosiRe~(~) + @(v). Proof Consider a vertex v = {Ll, 
tz, /3} of ~, where the .ti are ordered so that tl ~ es s .tS. Then the potential of v is defined as 
@(v) = 10. II + 8. -?2+ 6. t3. We claim that, for any edge VI ~ V2 of L7, (6.1) COStMUe(VI + vs) + @(vz) 
-~(v~) ~ 11. cOst&#38;~(~l ~ ~~). Since every edge can be factored into primes, it suffices to prove 
(6.1) only for prime edges. Furthermore, for moves of type (A), (B) or (C), we can restrict our attention 
to those moves for which c is so small that the ordering of the ti does not change. Any prime move of 
type (A), (B) or (C) can be decomposed into a sequence of such small moves of the same type with the 
same total Blue and Red costs. We consider each of the four prime types, assuming that in cases (A), 
(B) and (C) the value of e is sufficiently small, as explained above. Move A: the Red cost is s, the 
Blue cost is 3e, and the potential decreases by 24s. Move B: the Red cost is c, the Blue cost is c, and 
the potential increases by at most 10c. (The worst case is that the shortest arm grows.) Move C: the 
Red cost is O, the Blue cost is 2s, and the potential decreases by at least 2.5. Move D: the Red cost 
is O. Since 41 s f2, the Blue cost is 211. The potential decreases by at least 241. (There are four cases 
to consider, namely (I) 41+42 ~ t?3, (II) I?l ~ 12 ~ .f3 ~ /l + 12, (III) t?l s 43 s .tZ, and (IV) .ts 
g 41<12. Simply verify each case separately.) Thus, (6.1) is true for all edges, completing the proof. 
201 We now continue the proof of Theorem 6.1. If S c A3CH(Af) hs.s slack parameters /l, /2, 42, we associate 
S with v = {?l, 42,42}, a vertex of the Blue Red game ~. Similarly, we associate S with v = {l!, l!, 
/j}. By the way the costs of the edges of ~ are defined, and by Lemma 6.1, cost~ltie(v ~ v ) is equal 
to COStEQ(S, r) = SS , and cosfRe~(~ + v ) is equal to V(S, r, S ). By Lemmas 2.1 and 6.2, we are done. 
A Lower Bound. By actual example, we can show that Lemma 6.2 is tight. Our method is to define a cycle 
in ~ whose Blue cost is at least (11 e) times its Red cost, for any real c >0. This does not prove that 
Equipoise is no better than 1 l-competitive for 3 servers, but since that algorithm was designed so as 
to minimize our cost relative to adversary pseudo-cost, it seems to indicate that a better competitiveness 
for Equipoise will not be easily found. The details will be given in the final version. THEOREM 6.2. 
The Blue-Red graph G is no better than n-competitive. 7 Final Comments We conjecture that the forgiveness 
method, if appro­priately refined, can yield a 3-competitive algorithm for three servers, and quite possibly 
even solve the problem for arbitrary k. The method we suggest is to define some special class C of work 
functions, and to forgive a current work function to one in that class after each step. In this paper, 
the work functions in C were of the simplest possible form: the characteristic functions. Character­istic 
functions determine uniquely the adversary posi~ tion. However, although such forgiveness yields an 11­competitive 
algorithm, it cannot give a 3-competitive algorithm. It is possible to show that sometimes it is necessary 
to remember work functions that have two lo­cal minima. We conjecture that such functions are in fact 
sufficient for k = 3. References [1] S. Ben-Davida, A. Borodin, R. Karp, G. Tardos, and A. Widgerson. 
On the power of randomization in on­line algorithms. In Proc. 22nd Symposium on Theory of Algorithms, 
pages 379 386, 1990. [2] P. Berman, H. Karloff, and G. Tardos. A competi­tive algorithm for three servers. 
In Proceedings of the 1st Annual ACM-SIAM Symposium on Discrete Algo­rithms, pages 280 290, 1990. [3] 
M. Chrobak, H. Karloff, T. Payne, and S. VLsh­wanathan. New results on server problems. SIAM Journal 
on Discrete Mathematics, 4:172 181, 1991. Also in Proceedings of the 1st Annual ACM-SIAM Symposium on 
Discrete Algorithms, San Francisco, 1990, pp. 291-300. 202 CHROBAK AND LARMORE [4] M. Chrobak and L. 
Larmore. Harmonic is three­ competitive for two servers. Submitted for publication. [5] M. Chrobak and 
L. Larmore. A new approach to the server problem. SIAM Journal on Discrete Mathemat­ ics, 1991. To appear. 
[6] M. Chrobak and L. Larmore, On fast algorithms for two servers. Journal of Algorithms, 1991. To appear. 
[7] M. Chrobak and L. Larmore. An optimal online algorithm for k servers on trees. SIAM Journal on Computing, 
20:144-148, 1991. [8] M. Chrobak and L. Larmore. The server problem and on-line games. In Proceedings 
of DIAMCS Workshop on On-Line Algorithms, 1991. To appear. [9] D. Coppersmith, P. G. Doyle, P. Raghavan, 
and M. Snir. Random walks on weighted graphs and applica­ tions to online algorithms. In F roc. .Z2nd 
A nnual A CM Symposium on Theory of Computing, pages 369-378, 1990. [10] A. Fiat, Y. Rabani, and Y. Ravid. 
Competitive k­ server algorithms. In Proc. 22nd Symposium on Theor~ of Algorithms, 1990. [11] E. Grove. 
The harmonic on-line k-server algorithm is competitive. Manuscript. [12] S. Irani and R. Rubinfeld. A 
competitive 2-server algorithm. Manuscript. [13] M. Manasse, L. A. McGeoch, and D. Sleator. Com­ petitive 
algorithms for server problems. In Proc. 20=th Annual ACM Symposium on Theory of Computing, pages 322 
333, 1988. Also in Journal of Algorithms, 11:208 230, 1990. [14] P. Raghavan and M. Snir. Memory versus 
random­ ization in online algorithms. In 16th International Colloquium on Automata, Languages, and Program­ 
ming, Lecture Notes in Computer Science vol. 372, pages 687 703, Springer-Verlag, 1989. 
			