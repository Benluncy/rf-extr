
 THE ANALYSIS OF TWO-DIMENSIONAL PATTERNS USING PICTURE PROCESSING GRAMMARS SHI-KUO CHANG IBM Thomas 
J. Watson Research Center Yorktown Heights, New York 10598 Abstract A method for the description of 
the hierarchical structure of two-dimensional pictures is proposed. The model is called picture-processing 
grammar. It can be regarded as an extension of phrase- structure grammars to the two-dimensional case. 
A picture analysis program is described. It accepts picture-processing grammar in tabular form and processes 
pictures using that grammar. Experiments have been performed to analyze hand- written numerals, mathematical 
expressions and line drawings. Some practical appli- cations are discussed. I. Introduction The application 
of linguistic tech- niques to the analysis of two-dimensional pictures has become more and more common 
in recent years.17 It has been generally recognized that in order to analyze richly structured two-dimensional 
pictures, a classifier with a fixed number of catego- ries is not an adequate solution to the problem.18,20, 
24 What is needed is a system to analyze the picture and form a description of the picture in terms of 
some basic or primitive symbols. In order to obtain such a description, the struc- ture of the picture 
is specified by a formal grammar and the picture is 'parsed' by performing some kind of syntactic analysis 
of the picture. Sucah a picture analysis system usually consists of a model for picture description and 
a method to parse pictures with respect to that description scheme. Several models and picture analysis 
systems have been pro- posed and some have been implemented. 1,2, 6,7,8,9,16,20,24 In the literature 
it has been repeat- edly pointed out that the structure of pictures is usually hierarchical. That is 
to say, in a picture grammar higher level syntactic category can usually be defined in terms of lower 
level syntactic cate- gories. For example, a line drawing is defined in terms of lines, and lines are 
in turn defined in terms of, say, points. Because of this hierarchical property, thegrammar rules can 
usually be divided into several groups and rules of a certain group can always be applied before rules 
of another group are applied. For line drawings, rules transforming points into lines can always be 
applied before rules transforming lines into more complicated patterns are applied. This also points 
out that grammar rules can be used to process a picture and transform it into another picture. In some 
cases it is still possible to talk about syntacti- cally correct pictures, as in the parsing of two-dimensional 
mathematical expressions. However, in many other cases the grammar rules are used to transform one picture 
into another, as in line drawing analysis. Therefore, the grammar model must be able to handle both 
problems. With these considerations in mind, another model is proposed in this paper. This model, called 
picture-processing grammar, takes into account %:he hier- archical structure of syntactic catego- ries. 
The motivation for choosing this model is explained by an exan~le in Section 2. In Section 3, the formal 
definition of picture-processing grammar is presented. One can then talk about the set of pictures described 
by a grammar and whether it is possible to decide a grammar describes a picture or not. The main result 
of Section 3 is that one can decide whether a grammar is hierarchical or not. If it is, a constructive 
procedure can be used to partition the grammar rules into hierar- chical blocks. Since hierarchical 
gra~nars can in fact be constructed, it is therefore permissable and advantageous to design a picture 
analyzer especially tailored to hierarchical grammars. In Section 4.1, such a picture analyzer is describ- 
ed. It accepts picture-processing grammar in tabular form and processes pictures using that grammar. 
In the following sub-sections several experi- ments are discussed. Hand-written numerals, mathematical 
expressions, and line drawings have been analyzed using the picture analyzer together with the appropriate 
picture-processing grammar. The results indicate that the picture analyzer is indeed versatile and can 
be used as an experimental tool in picture analysis. We conclude this paper by comparing our results 
with results described in other related researches. We hope to -206- show that the grammar model proposed 
is both intuitively meaningful and practi- cally useful. Some practical applica- tions of picture-processing 
grammar and a more restricted kind of picture- processing grammar are discussed. 2. An, Example In Section 
3 the formal definition of picture-processing grammar will be presented. In order to illustrate why we 
choose this model, an example will first be given. Suppose we want to describe the set of horizontal 
straight lines on a two- dimensional grid. Any square on the grid is called a point. A dash is formed 
by concatenating two horizontally consecu- tive points, and a horizontal line is formed by concatenating 
more than two horizontally consecutive points. If we use context-free grammar as a model, we may write 
down the following set of rules to describe horizontal lines. (1) h-dash z= point point  (2) h-line 
:= h-dash point  (3) h-line := point h-dash  (4) h-line := h-dash h-dash  (5) h-line := h-line point 
h-line ~= h-line h-dash h-line ~= h-line h-line  (6) h-line z= point h-line h-line := h-dash h-line 
  If concatenation is understood to be in the horizontal direction, then the above description is adequate. 
But this model is inadequate if we also want to describe vertical lines, diagonal lines, etc. This is 
so because we can only concatenate symbols in one direction. Thus such a model can only be used to describe 
one-dimensional pictures or strings. In order to describe two- dimensional pictures r we must generalize 
the notion of concatenation. 13 A natural generalization is to associate a pair of coordinates with the 
symbols. This additional information can be used to specify the position of a symbol on a two-dimensional 
grid. If vectors are associated with the symbols, more infor- mation can be included. Thus an element 
of a picture is a symbol together with its associate vector, and a picture is a collection of (symbol,associate 
vector) pairs. In the above example, we can asso- ciate (x,y,1) to the symbol point. (x,y) specifies 
the position of the point on the grid. The third parameter is the number of squares occupied by the picture 
element 'point'. In this case it is always 1. (x,y,2) is associated with the symbol h-dash, where (x,y) 
specifies the position of the left end of h-dash, and 2 is the number of squares occupied by h-dash. 
Similarly, (x,y,£) is associated with the symbol h-line, where £ can be regarded as the length of the 
h-line. In this case £ is variable. Referring to Fig. 1, the point at (a) is denoted by point(2,1,1), 
the line at (b) is denoted by h-line(2,3,4), and the dash at (c) is denoted by h-dash(3,5, c  2). 
The picture shown in Fig. 1 is therefore the set V = {point(2, " " " ~ i,i), h-dash(3,5,2), h-line(2,3,4)} 
. For the sake of convenien- ce, we will write it as V = point(2,1,1) &#38; h-dash(3,5,2) &#38; Fig. 
1 h-line(2,3,4). Thus is a notation for the A 1 &#38; A 2 &#38; ... &#38; A n set {A1,A2,...,An}. 
 The picture shown in Fig. 1 can also be regarded as a picture consisting of points alone. In other words, 
the original picture is U = point(2,1,|)&#38; point(2,3.1~&#38; point(3,3,|)&#38; point(4,3~&#38; point(5,~1)&#38; 
point(3,5,1)&#38; point(4,5.~ We would like to reduce picture U to picture V. In order to do so, the 
next set of grammar rules can be used. (i') h-dash(x,y,2) z= point(x,y,l) &#38; point(x+l,y,l) (2') 
h-line(x,y,3) s= h-dash(x,y,2) &#38; point(x+2,y,1) (3') h-line(x,y,3) ~= point(x,y,l) &#38; h-dash(x+l,y,2) 
(4') h-line(x,y,4) ~= h-dash(x,y,2) &#38; h-dash(x+2,y,2) (5') h-line(x,y,~+l):= h-line(x,y,~) &#38; 
point(x+~,y,1) h-line(x,y,~+6+2) := h-line(x,y,£) &#38; h-dash(x+~+6,y,2) h-line(x,y,~+~+6) := h-line(x,y,~ 
&#38; h-line(x+6+~,y, (6') h-line(x,y,~+l)~= point(x,y,1) &#38;" h-line(x+l,y,~) h-line(x,y,~+6+2) z= 
h-dash(x,y,2) &#38; h-line(x+6+2,y,~) This set of rules is quite similar to the previous set of context-free 
grammar rules. The implicit concatena- tion operator is replaced by the operator &#38;, and associate 
vectors are included in the rules. In these rules t x,y,6,~, 1,.andS. 2. are variables, x and y are 
posltlve integers. ~, £1 and ~2 are integers greater than 2~ The variable 6 will be explained later. 
 Rule (1') says that point(x,y,1) and point(x+l,y,1) can be combined to form h-dash(x,y,2). That is, 
if there is a point at (x,y) and there is another -207- point at (x+l,y), then they can be com- bined 
to form h-dash with the associate vector (x,y,2). Since x and y can be any positive integer, rule (1') 
is in fact a short-hand notation for an infi- nite number of rules. Thus each rule in this grammar is 
a rule scheme represent- ing an infinite number of rules. Suppose we are given a picture W = point(2,3,1) 
&#38; point(3,3,1) &#38; point (4,3,1) &#38; point(5,3,1). By the success- ive application of rules of 
this grammar, the picture W can be reduced to h-line(2,3,4) as follows: (i) point(2,3,1) &#38; point(3,3,1) 
&#38; point(4,3,1) &#38; point(5,3,1) is reduced to point(2,3,1) &#38; point(3,3,1) &#38; h-dash(4,3,2) 
 by rule (i') (2) point(2,3,1) &#38; point(3,3,1) &#38; h-dash(4,3,2) is reduced to  h-dash(2,3,2) 
&#38; h-dash(4,3,2) by rule (i')  (3) h-dash(2,3,2) &#38; h-dash(4,3,2) is reduced to  h-line(2,3,4) 
by rule (5') Disregarding the associate vector (2,3,4), we can say that the picture W is reduced to 
the picture h-line, or W is in the category of 'h-line'. Thus this grammar can be used to recognize horizontal 
lines. Conversely, suppose h-line(2,3,4) is given. Then by applying the rules in the reverse order we 
can produce the picture W. Thus the grammar can be used to generate lines. Similarly, the picture U 
can be reduced to the picture V. Thus this grammar can be used to process or transform pictures. Again, 
it is also possible to produce U from V, or to perform inverse picture transformations. Finally, the 
grammar can also be used to process noisy pictures. As an example, suppose we want to transform pictures 
consisting of points to pictures consisting of h-lines and h-dashes, then we can try to reduce the t. 
original picture as much as possible and treat the remaining points in the reduced picture as noise. 
If Fig. 2 the noise figure is below a certain limit, then we may consider the reduction as satisfactory. 
Thus the picture U can be transformed to the picture V' = h-line(2,3,4)&#38;h-dash(3,5,2) and point(2,1,1) 
is treated as noise. The variable 6 in rules (5') and (6') requires some explanation. Suppose is set 
to zero. The granmmr then describes only perfect horizontal lines. But if 6 is set to one, then imperfect 
line as shown in Fig. 2 can be recognized as h-line. The variable 6 is readily seen to be a parameter 
which controls the gap width between lines. With a nonzero ~ , gaps between lines can be filled. This 
is another instance of handling noisy pictures using a picture- processing grammar. To summarize, in 
this example we have shown that properly designed picture-processing grammars can be used to (a) recognize 
pictures, (b) generate or synthesize pictures, (c) process or transform pictures, and (d) perform inverse 
picture transformations. In some cases the grammar is able to handle noisy pictures. It should be noted 
that: the grammar rules discussed above can be partitioned into three blocks: Ri= {rule(l')} , R2= {rule(2'),rule(3'h~ule(4')} 
, and R3= {rule(5'),rule(6')}. In the reduction of pictures, rules: in block Rj can always be applied 
before rules in block R i are applied, provided that j< i. This hierarchical structure of grammar rules 
will be exploited by the picture analysis program, as will be seen in Section 4.1. 3. Picture Processing 
Grammar In this section picture-processing grammar is defined and its properties are discussed in detail. 
The theorems will be stated without proofs. A more complete treatment can be found in 4. Let us consider 
the example dis- cussed in Section 2 again. We have pointed out that each rule in this grammar actually 
represents an infinite number of rule instances. It is possible to rewrite the rules into another form. 
For example, rule (i') can be rewritten as h-dash(f(ul,u2,u3,vl,v2,v3) := point(ul,u2,u3)&#38;point(vl,v2,v 
3) where f is a function from Z 6 to Z 3 defined as follows !Ul,U2,2) if ul+l=vl&#38; f(ul'U2' U3' 
Vl'V2 ,v 3) ndefined otherwise u =v 2 2 &#38; U3=v3=l The convention is that the rule is applicable 
if the function is defined. -208- For example, suppose (Ul,U2,U3)=(1,1,1) and (vl,v,,v~)=(2,1,1) , then 
f is def±ned ~ and we have h-dash(l,l,2) == point(l,l,l) &#38; point(2,1,1) Clearly all the grammar 
rules can be rewritten into the form presented above. To test whether a rule is applicable to reduce 
the picture B(Ul) , 8(u2),...,8 (.~k), it suffices to test wh~ther the Function associated with the rule 
is defined at (Ul,U2,...,~k). If it is, then the rule-- --is applicable and the picture can be reduced. 
 The formal definition of picture- processing grammar can now be given: DEFINITION 3.1: A ~icture-~rocessin~ 
ra~ G is a quintuple (S,V,C,g,P), w ~ is the set of basic symbols, V is the set of vocabulary symbols, 
C~.V is the set of categorical symbols, g Is a function from VvS into Z, and P is the set of grammar 
rules. Each rule in P is of the form ~(f(x_l,X2,...,X_k) ) == B (x) &#38; S (x) &#38; ... &#38; B (x) 
 1 --i 2 --2 k -k  where %,~,...,8~ ~ VvS, ~ ¢ V, the number of parameters of the associate vector x 
i is equal to g(8~), i< i <k, and f is partially computable--funCtion from k Z g(B i) zi=l znto zg(S) 
whose completion is  also computable. It is required that k> I. DEFINITION 3.2: A G-~icture (or picture 
when G is undgrstood)is a finite set of symbol-associate vector pairs -(x) such that ~l(Xl ) &#38; 
"'" &#38;~n --n (a) ~.¢ S, i< i< n, and  (b) ~i ¢ zg(~i! i i i~ n.   DEFINITION 3.3= Given a G-picture 
 U =~i(~i ) &#38; ...&#38; ~ (~s) &#38;8 (a) &#38; ... s 1 --i  &#38; 8k(a_k) &#38; ~s+l(~s+l ) &#38; 
... &#38;~t(~t ), suppose there is a rule in P of the form s(f(~l,X2,...,~k) ) := Bl(£1) &#38; 82(~2) 
&#38; ... &#38;Sk(Xk)  and the partial function f is defined at (~l,...,~k) , then this rule is applicable 
and U is reduced to V =~l(~l ) &#38; ... &#38; {s(~s ) &#38; s(f(~l,..,~k )) &#38; {s+l(~s+l ) &#38; 
...{ t(~t ) We write V => U and say that V directly produces U or, equivalently, U is direct- ly reduced 
to V. DEFINITION 3.4: The transitive closure Of direct production is defined as follows: V *~> U or 
V produces U if either (a) U = V, or  (b) there are G-pictures U0, Ul,..., U  r such that Ui=>Ui+ifor 
0~ i< r, and U=Ur, V=U 0 . DEFINITION 3.5= The grammar G=(S,V,C,g,P) describes the G-picture U, or 
U is described by G, if and only if there are a categorical symbol ~ in C and an associate vector .~o 
in ~g(0) such that o(~o) ~ U. We say that the G-picture U zs in category o . The set of all G-pictures 
in category o is denoted by Pic(G,o). The set of all G-pictures described by the grammar G is denoted 
by Pic(G). Clearly, Pic(G) = U cPiC(G,o). THEOREM 3.1: For any picture-processing grammar G, the set 
of G-pictures described by G, Pic(G), is partially computable. REMARK: The proof consists of coding 
the G-p~ures into linear strings and cons- tructing a particular Turing machine to do the reduction. 
If U is a G-picture described by G, then T will halt in a final state. If U is not described by G, then 
T will either halt in a non-final state, or never halt. DEFINITION 3.6: For any picture-process- ing 
grammar G=(S,V,C,g,P), the companion context-free grammar Gcf is given by (S,V,C,P .), where Pcf consists 
of all the rules r in P,but with the associate vectors dropped. REMARK: The companion context-free gram- 
mar Gcf may have more than one start symbols, because C may contain more than one categorical symbols. 
However, it is easy to construct a CFG G' such that L(G r)=L(G'). Therefore, we will still ref~ to Gcf 
as t context-free grammar. THEOREM 3.2: If the companion context- free grammar Gcf of a picture-processing 
grammar is r duced and free from cyclic definitions, then it is decidable whether a G-pictur~ U is in 
Pic(G) or not.  -209- In all practical applications, we will only use picture-processing grammars whose 
companion context-free grammars are reduced and free from cyclic definitions. Therefore, it is always 
possible to 'parse' a picture and to decide whether it is described by the grammar. For context-free 
grammars, two grammars are equivalent if they generate the same set of strings. For picture- processing 
grammars, equivalence of grammars is defined as follows: DEFINITION 3.7~ Two picture-processing grammars 
G 1 and G are equivalent if and only if 2 C = and PiC(Gl,a) = Pic(G2,~) for all ~ in c2 Ci=C 2. THEOREM 
3.3: For any picture-processing grammar G, one can construct an equivalent grammar G' such that (a) 
G and G' are equivalent, and  (b) any rule in P' has at most two right-hand parts.  In Section 2 we 
mentioned that a picture-processing grammar may have a hierarchical structure. This property is formalized 
by the following definition. DEFINITION 3.8: A picture-processing grammar G=(S,V,C,g,P) is called hierarchical 
if and only if there is a non-trivial partition of the rules P into blocks Ri,R2w...,R n , n> i, such 
 that if ~ appears as the left-hand symbol of a rule in Ri, then it will never appear as a right-hand 
symbol of any rule in Rj, provided that j < i. THEOREM 3.4: If G is a hierarchical picture-processing 
grammar, then in the reduction of a G-picture, rules in block R. can always be applied before rules 
in b~ock R i are applied, provided that j <i. DEFINITION 3.9: Given two grammars Gl= (Si,Vi,Cl,gi,Pi) 
and G2=(S2,V2,C2,g2,~2), suppose (a) S2~Vl ~ S 1 , (b) V2~(VlV Sl)=~ , and (c)gl(~)=g2(s) if ~zS 2 
, then the composition of G 1 and G^, denoted by G 1 o G2'" i's' the gramma~ (Si,ViuV2,C2,g , PiuP2 
) , where g is defined by {gl(~) if ~s V lu S 1 g(~) = g2(~) if ~¢ V 2 REMARK: The composition of 
G 1 and G 2 is meaningful only when they are compatible, that is, when conditions (a), (b) and (c) are 
all satisfied. THEOREM 3.5: The composition operation is associative. That is, if both G 1 o (G 2 o 
G 3) and (G 1 o G2) O G 3 are meaningful, then G 1 o (G 2 o G 3) = (G 1 o G 2) o G 3. THEOREM 3.6: 
If G=(...((G I o G 2) o ..o G_), h > i, and SI,VI,...T V n G are p~irwise disjoints ~ then is hierarchical. 
Conversely, if G is hierarchical and V n S = @, then we can construct a grammar G' which is equivalent 
to G and there are Gi,... , G. such that G'=(...((G~ o G.)) o ..oG n) and n > i. ~ " " Theorem 3.6 
shows that the compo- sition of several grammars results in a hierarchical grammar. Conversely, given 
a hierarchical grammar, one can 'decompose' it into several grammars such that their composition :is 
equiva- lent to the original grammar. In practice, we can design several pieces of grammars and then 
form their compo- sition. The resulting grammar is of course hierarchical. With such a hierarchical grammar, 
the picture analyzer can then process pictures with efficiency. THEOREM 3.7: There is a constructive 
 procedure to decide whether a picture- processing grammar is hierarchical. We will describe the procedure 
and leave out the proof. Essentially, the procedure partitions the set of grammar rules P into blocks 
R], R~~..., R_ such that the conditi6n oz'Defini~ion 3.8 is satisfied and each R i contains the least 
number of rules possible. If n=l, then G is not hierarchical, other- wise it is hierarchical. First, 
a symbol ~ is said to depend on another symbol 8 if there is a rule of the form  ~( m ) :: {1 ( m ) 
&#38; .. &#38; B( _ ) &#38;.,&#38; ~k ()_ For each symbol ~ in V, there is a dependency tree T which 
is cons- tructed as follows:aThe root of the tree is s. For any node y, define the predecessor set of 
y as the set of all nodes that are in the path from the root to y. Define the successor set of a node 
y to be either the empty set if y i~ itself in its predecessor set or the set containing all the symbols 
 y depends upon if y is not in its own predecessor set. If the successor set of node y is empty, the 
tree is termin- ated at that node. Otherwise node y is  -210- extended and the extended nodes are exactly 
those in the successor set of y. Since The number of vocabulary symbols is finite, for any symbol y in 
V its depend- ency tree T is also finite. Next, ~efine E as follows: (a)X is in EX, (b) if y appears 
as a node in TX and × is in its predecessor set and its successor set, then y is in EX. Intui- tively, 
EX is the set that contains all symbols that are involved in the recur- sive rules of X- Now construct 
V~ as follows= ~X --E× Vi = aUv Ea x i-i x It is~easy to see that V~ c Vx1&#38;... V~ = V~*~ for some 
j less t~an the number of elements in V. So we let vx : v× Ivt Intuitively, VX contains all symbols 
that are involved in mutually recursive definitions. The hierarchical blocks can now be constructed: 
 Blkxl= {all rules in P of the form ¢( ) :=El ( )&#38; .&#38;8( )&#38; ..&#38;¢k ( ) wh~re s, 8--are 
in VT } Blk~2= {all rules in P of the form A x( ) := ~( )&#38;. &#38;~ ( ) where~l, oEKare in (V-Vx)~S} 
 The Blkl's can be partially ordered: BlklX Blk~ if and only if either there is a ~ule in Blk I of 
the form X  ~( ) ==~l(_)&#38;...&#38;lB(_)&#38;. &#38;~_) and 8 is in Vu, or there are Blk.1 , , 
Blk I , r >i, such that &#38;I ~r BlkI BlkI >.. Blk I >Blk 1 X --z;1 ~r --u The partially ordered Blkl's 
can be put into a linear sequence: BlkI ,Blk1 Xl X2 ..,Blk I and BlkI precedes Blk1 Xm . Xi X. (i j) 
if either Blkxl --Blklx 3  < < or they are incomparable i j The Blk2's are then inserted into the 
above sequence, each Blk~ w$11 be put immediately before each Blk~. Next, any Blk~ containing more 
than one rule will be decomposed into blocks containing exactly one rule The ordering of these  sub-blocks 
is~ unimportant, provided that they are located immediately before Blk~. Thus we have constructed a 
sequence of blocks of rules which can be renamed as Ri, R2,. ., Rn. EXAMPLE: Suppose G=( {a}, {A,B,C,E} 
. {A,B,C,E} ,P), where P contains the rules := c(_) iA( ) E( ) A( )  E(--) := A(--) ~ B(--) E(-~ := 
C(--)  B(--) := S(--) &#38; C( ) C(-~ := c(-) &#38; a(-) C(D := a(:) First, we construct the dependency 
trees TA, TB, TC, and TE. A B E   / % /\ E C A C  A B C C C E C B C /I I l I B C C T B C C I c 
C\c TA TC TE  From the dependency trees, we can easily find out E ={A,E}, EB= {B} , A Ec={C} , and 
EE={A,E} , whence VA=EA, VB=EB,Vc=Ec, and VE=EE. The blocks can now be found: BlkI = {A( ):=E( ),E( 
):=A( )&#38;B( )} Blk2 = {A( ):=C( )} A ---- BikB1 = {B( ):=B(_)&#38;C( )} Blk~ = {C( ):=C(_)&#38;a( 
)} Blkc2 = {C(_) :=a() } BikE1 = {A( ):=E( ),E( ):=A( )&#38;B( )}  Blk = {E(_),=cO)  The Blkl's 
are then partially order- ed, yielding Biki,,A> BIkBi > Bikci BlkE1 --  Finally, the Blk2's are inserted 
and we obtain A( ):=A( )&#38;E( ) P={ {E(:) :=A(--)&#38;B(--)}, {A(_) :=C(_) } ,  R 6 R 5  -211- 
{E( ) :=C(_)} , {B(_) :=B(_)&#38;C(_)} , --R R {C(_):=C~ )&#38;a( )} , {C( ~:=a( )} } R  2 ~l and 
the grammar is hierarchical. DEFINITION 3.10: A linear picture-process- ing grammar is a pict~-processing 
grammar in which all partial functions are of the form (T x t) t if R x t > c f(5) = { ----_ undefined 
otherwise where x = (xl,...,Xm), and T,R are nTxm , nRx m ~atric~s over Z, c an nRXl constant matrix 
over Z. -- DEFINITION 3.11: Let the set of basic symbols be S. Suppose a-a-a ....a is a string in S*, 
then thela~ente~ string of ala2a3.., a n is denoted by ,(ala2... a n ) and is the picture al(0)&#38;a2(1)&#38;...&#38;a 
(n-~ If RcS* then n -' ~|R) denotes all the augmented strings of R. THEOREM 3.8: Let G=(S,V,c,P) 
be a context-free grammar. There is a linear picture-processing grammar G'=(S',V',C', g,P') such that 
Pic(G')=~(L(G)) and L (G~f) =L (S). Theorem 3.8 says that context-free grammars can be embedded in linear 
picture-processing grammars. We can use Theorem 3.8 to show that it is undecida- ble whether a picture-processing 
grammar is ambiguous. DEFINITION 3.12: G is said to be ambi- guous if and only if there is a pzc~e 
 U such that for ~. and uj in C and for g(~) ~g(~ ) some xEZ l Z~ z J , we have ~i (£)--~ U an~ a 9 
(1) ~ U. THEOREM 3.9: It is undecidable whether a (linear) picture-processing grammar is ambiguous. 
 DEFINITION 3.13: A picture-processing grammar G is non-retracin~ if for any picture U, if o(~) -f~ U 
and V~U, then ~(~) _~v. For many applications in picture processing, the grammar rules can be regarded 
as transformation rules. Hence the exact order of the application of rules is immaterial, and the rules 
are applied in parallel all over the grid. Such grammars can be regarded as non- retracing. If the grammar 
(3 is unambiguous and non-retracing, then the following parsing algorithm can be used to parse any G-picture: 
 PARSING ALGORITHM: (i) Use the procedure discussed above to partition the set of rules P into hierarchical 
blocks Ri,R2,... , R n-  (2) i ÷ i.  (3) Apply rules in R~ in any sequence to reduce the picture. When 
no more reduction is possible, go to the next step.  (4) If i = n or the picture has been reduced to 
a categorical symbol, stop. Otherwise let i + i+l and go to step (3).  THEOREM 3.10: Let G be a picture-process 
- ing grammar whose Gcf is reduced and free from cyclic definitions. If G is unambiguous and non-retracing, 
then the parsing algorithm is effective to parse any G-picture. 4. Experimental Results  4.1 The Picture 
Analyzer The parsing algorithm described in Section 3 works if the grammar is non- retracing and unambiguous. 
Although these conditions are hardly expected to be all satisfied, the parsing algorithm is quite useful 
in practice and forms the core of the picture analyzer. How- ever, the picture analyzer can do limited 
retracing when a parse is unsuccessful. Hence it is more powerful than the parsing algorithm described 
above. When the grammar is hierarchical, it can be regarded as the composition of several grammars G~,...,G 
. Some of the Gi's may be no'retracing, and others are not. In the e~eriments we will specify G i to 
be retracing or non- retracing as we see fit. The picture analyzer will take the specification for granted. 
 The picture analyzer functions as follows: Suppose it is in the ith level and is working with G i. A 
window size ~ is first determined which is a function of the level number i. The picture analyzer moves 
the window to all possible positions of the picture frame -a rectangular finite grid. Symbols falling 
inside the window will be tested to see whether they are the right-hand side symbols of a grammar rule 
and, if they are, whether their associate vectors satisfy the conditions of this rule. If the conditions 
are all satisfied, then these symbols and their associate vectors  -212- are erased , and the left-hand 
side symbol together with its newly computed associate vector will be written on the grid instead. The 
picture analyzer continues in this fashion, until no i th level rule is applicable. Now there are two 
alter- natives. If G i is specified to be non- retracing, then the analyzer will increase the level number 
to i+l, adjust window size 6, and proceed to apply i+l level rules. On the other hand, if the grammar 
G i is specified as retracing, then the analyzer must decide whether it is necessary to back up and try 
other possibilities. Suppose the grammar G i is (Si,Vi,Ci,gi,Pi). The function of the picture analyzer 
is to reduce a picture consisting of symbols in S i to a picture consisting of symbols in C i by the 
application of transformation rules in P~.If the reduced picture does not contaln any symbol in Si, then 
the reduction is considered successful and the analyzer will proceed to level i+l. If the reduced 
picture still contains a large number of symbols in Si, then the reduction is not successful and the 
analyzer will back up and try other alternatives. A noise figure is defined as follows. Let T(~) denote 
the weight of symbol ~. Suppose ~i' a2''''' am are the symbols of S i that are present in the reduced 
picture. The noise figure is then ZT(s ). If the noise figure exceeds i i a certain threshold 8, then 
the analyzer will back up. Theoretically, the picture analyzer is able to parse any G-picture correctly. 
We set the window size 6 to infinity or a very large number, specify all rules to be level one rules, 
and specify G 1 to be retracing. The analyzer will search exhaustively for the correct parse and will 
report failure if and only if the picture is not described by the grammar. (The error threshold 8 can 
be set to 0) However, this requires extensive process- ing to be performed. In the experiments, the grammar 
is usually assumed to be hierarchical, and we will only specify the grammars in certain levels to be 
retracing. Processing time is thus drastically reduced.  4.2 Hand Written Numerals A grammar for the 
description of hand-written numerals has been designed. The grammar rules are divided into four groups. 
The first level rules are used to reduce a picture consisting of ooints to one consisting of horizontal 
strips. Imperfect strips can be recognized by gap filling, as explained in Section 2. The second level 
rules are used to re- duce the picture to one consisting of vertical lines (V-L) and horizontal lines 
(H-L). In the third level, L- shaped, U-shaped, and O-shaped figures are described. Finally, in the fourth 
or last level, the ten numerals are described in terms of their component parts. Thus the grammar is 
actually the composition of four smaller ones. Alternatively, we may regard it as consisting of four 
processing units, as shown in Fig. 3. point strip V-L H-L V-L H-L L,U,O @, 1,2,3, 4,5,6, 7,8,9, Fig. 
3 The grammar is designed relying on the intuitive notion of describing a geometric figure in terms 
of its component parts. In order to test the descriptive capability of this grammar, a recognition experiment 
was performed using two hundred samples of quantized hand-written numerals. The test data were collected 
and prepared by Professor J. H. Munson of the Stanford Research Institute. Each numeral was quantized 
into a 24 by 24 binary pattern. Some of them are shown in Fig. 4. °., . . .......... ......... °. 
 . ....::[~ ............. Fig. 4  -213- Two experiments were performed. In  the first experiment, 
G1, G2, G 3 and G 4 are all specified to be nonretracing. 112 patterns are reduced to the correct 
categorical symbols plus some extra symbols which can be regarded as noise. The recognition rate is 
56%. In the second experiment, G 4 is specified to be retracing. 137 patterns are recognized correctly, 
and the recognition rate is 68.5%. The result shows that picture-processing grammar can be used to describe 
noisy patterns, but the distortion must not be too great. Philosophically, a grammar is useful in describing 
the regularity of a set of strings or pictures. We cannot expect it to be able to describe also all the 
irregularities. Hence picture-processing grammar has its limitations. If the number of grammar rules 
is to be kept reasonably small, (our grammar has less than thirty rules) then it cannot very well describe 
pictures with large varia- tions in shape. However, with a finer quantization of the original patterns, 
our grammar will undoubtedly be able to describe more patterns correctly.  4.3 Mathematical Expressions 
 Another experiment concerns itself with the problem of parsing two-dimen- sional mathematical expressions. 
The syntactic analysis of two-dimensional mathematical expressions is more closely related to the problem 
of parsing strings or sentences using a context-free grammar. In both cases, the objective is to decide 
whether an expression is syntactically correct and to generate the parsing tree if the expression is 
correctly parsed. It is assumed that the picture has already been transformed to one consist- ing of 
alphanumerical characters, lines, integration symbols, summation and multiplication symbols, arithmatic 
operators, etc. Presumably these symbols can be recognized using a separate recognition routine, or using 
a picture- processing grammar similar to the one discussed in Section 4.2. The task is to design a grammar 
and a syntax-directed analyzer so that the analyzer can parse expressions using that grammar. Now we 
must search exhaustively for the correct parse and declare failure only when all alternatives have been 
tried without success. The picture analyzer discussed in Section 4.1 will do the job if we specify that 
all the grammar rules are in level one and let the analyzer function in retracing mode. However, the 
processing time becomes prohibitive even for relatively simple mathematical expressions. To remedy this, 
we have two alter- natives to try. Either we can modify the grammar and still use basically the same 
picture analyzer, or we can try to design a special-purpose picture analyzer and still use the same grammar. 
Both alternatives have been explored. The modification of the grammar is done through the introduction 
of context- dependent conditions into the rules, and the special picture analyzer uses a partition strategy 
which works only for the parsing of two-dimensional mathema- tical expressions. A grammar describing 
arithmatic assignment statements formed by =, +, -, *, /, horizontal bar, and alphabeti- cal symbols 
has been designed. The context-dependent conditions are used to eliminate most of the incorrect parsing 
alternatives. As an example, consider the expression shown in Fig. 5. E E denotes an expression. There 
is a rule saying "E divided by E is E E provided that the hori- zontal bar is longer than the extension 
of E both E". If this rule is applied to the lower part of this expression, Fig. 5 then an incorrect 
parse  occurs. Thus the rule should be modified to read "E divided by E is E provided that the horizontal 
bar is longer than both E and that there is no shorter line immediately above the upper E or immediately 
below the lower E". With such modified context-dependent rules, the picture analyzer can be used with 
efficiency. The special-purpose picture analyzer utilizes a particular partition strategy to govern 
the action of the picture analyzer. Since the horizontal bars are two-dimensional delimiters, their func- 
tion is like that of the parentheses. Thus we may use this information to partition the original picture 
into smaller ones. The smaller pictures are parsed first, then the larger ones con- taining the smaller 
picutures and so on. The results of parsing some expre- ssions using both methods are summarized in 
the table shown in Fig. 6. We may conclude that the method using a modi- fied grammar is somewhat more 
efficient than the method using the partition strategy. However, they are both much more efficient than 
the original method using the unmodified picture analyzer. Thus although in theory the 'universal' picture 
analyzer suffices to parse any picture, in practice we will use spe- cialized grammar and/or special-purpose 
picture analyzer to improve efficiency. -214- expression modified granunar spceial partition method 
~tr ategy method E + E÷ E/E 0.138 fec O. lZO scc E4 EKE 0,180 sec 0.230 sec E+E-E 0.262 see 0.386 sec 
E+ ~-E E E 0.608 sec E" E. ~ ErE ÷ E E÷ --~*E O. 850 sec 0.926 sec E*E/E E+ E-E Fig. 6  4.4 Line 
Drawings A grammar describing a few simple  (less than ten strokes) Chinese ideograms has been designed. 
By extending this grammar, it should be possible to design a grammar to describe all the important radicals. 
Using the radicals as entries to a dictionary, the ideograms can be recognized. This technique may be 
use- ful for on-line Chinese ideogram recog- nition. Thin line geometric figures can also be described 
by a grammar quite similar to the one describing Chinese ideograms. Using context-dependent rules, partially 
hidden blocks can also be recognized. Line drawing analysis is a very important and practical problem, 
and more research and experi- mental work is needed in that direction. 5. Conclusion  In this paper 
picture-processing grammar is defined to serve as a model for the analysis of two-dimensional pictures. 
We are able to say something about the decidability problem, the ambiguity problem, and the hierarchical 
structure of this grammar. A general theoretical foundation is provided for the model. Under this general 
frame- work, we can restrict our attention to special sub-classes of picture-processing grammars and 
discuss picture analysis algorithms for each of them. Concerning the adequacy of this model for the 
description of two-dimen- sional pictures, we have shown that it is possible to describe hand-written 
numerals, thin line geometric figures, Chinese ideograms, and mathematical expressions using picture-processing 
grammars. This compares favorably to the other models, l" 7 24 Our model is adequate both for picture 
processlng (e.g. transforming a digitized picture to a picture consisting of lines) and for picture 
parsing (e.g. parsing two- dimensional mathematical expressions). A table-driven picture analyzer has 
been constructed. It accepts picture- processing grammar in tabular form and processes pictures using 
that grammar. In a certain hierarchical level it can operate either retracingly or nonretrac- ingly. 
When it is in nonretracing mode, the analyzer is quite efficient. In this case it is used as a picture 
processor. To process a hand-written numeral quantized into a 24 by 24 binary pattern, the processing 
time on a CDC 6400 computer is approximately five seconds. Since Clowes did not mention processing time 
or recognition rate in 6, comparison is impossible. The analyzer is inefficient when it is in retracing 
mode. Even for simple mathematical expressions the processing time is 5 to i0 times longer than that 
cited in Anderson's workl (his experiment was performed on a PDP-i computer). For the specific task 
of parsing expressions, it is in no way to compete with Martin's fast parsing algorithm. 15 To remedy 
this, we have demonstrated that the grammar can be modified or the picture analyzer can be specialized 
to improve efficiency. The results are then com- parable to that of Anderson's and Martin's. The comparisons 
point out that although a universal picture analyzer is adequate to process different kind of pictures, 
for efficiency considera- tions it might be advisable to construct a special purpose picture analyzer 
for each particular task. The universal picture analyzer is useful for experi- mental purposes. Using 
it the grammars can be designed by cut-and-try proce- dures. Picture-processing grammars can also be 
used for the synthesis or generation of pictures. This problem is treated in detail in 4. A more restricted 
kind of picture-processing grammar has also been formalized, which is especially useful for the structural 
analysis of mathematical expressions and printed formats. 5 Using that method&#38; an expression can 
be parsed in time n z, where n is the number of its primitive components. It is hoped that the hierarchy 
of picture-processing grammars can be further refined, and that automata can be found which recognizes 
the same set of pictures as described by a picture-processing grammar. It is also hoped that further 
work will shed more light on the grammar construction problem (see Chapter Five of 4), which is the link 
between the linguistic -215- approach to pattern analysis and the main References i. Anderson,R. "Syntax-Directed 
Recogni- tion of Hand-Printed Two-Dimensional Mathematics," Aiken Computation Lab- oratory, Harvard University; 
August 1967.  2. Bernstein,M.I. and Williams,T.G. "A Two-Dimensional Programming System," I.F.I.P. Congress, 
Edinburgh. Scotland; August 1968.  3. Bomba,J.S. "Alphanumeric Character Recognition using Local Operations," 
Proc. EJCC; 1959.  4. Chang,S.K. "Analysis and Synthesis of Two-Dimensional Patterns using Picture 
-Processing Grammars," Doctoral Dissertation, U.C.Berkeley; March 1969.  5. Chang,S.K. "A Method for 
the Structu- ral Analysis of Two-Dimensional Mathematical Expressions," IBM Research Report RC2655, October 
1969.  6. Clowes,M° "Perception, Picture Pro- cessing and Computers," in Machine Intelli@ence i, Collins,N. 
and Michie,   D. (Eds.), Oliver and Boyd Ltd., London; 1967. 7. Clowes,M. "Pictorial Relationships 
- a Syntactic Approach," in Machine Intelligence 4, 361-383; i~-~--"  8. Eden,M. "On the Formalization 
of Handwriting," AMS Applied Mathematics Symposia, Vol.12; 1961.  9. Evans,T. "A Formalism for the Descrip- 
tion of Complex Objects and its Implementation," Proc. Fifth Int. Conf. on Cybernetics, Namur, Belgium; 
September 1967.  10.Evans,T. "Descriptive Pattern Analysis Techniques: Potentialities and Problems," 
presented at the Int. Conf. on Methodologies of Pattern Recogni- tion, University of Hawaii, Honolulu; 
January 1968. ll.Feder,J. "Linguistic Specification and Analysis of Classes of Patterns," Technical 
Report No. 499-147, Dept. of Elec. Eng., New York University; October 1966. 12.Feder,J. "Languages of 
Encoded Line Patterns," Information and Control 13, No.3; September 1968. body of pattern recognition 
theory. 13.Kirsch,R.A. "Computer Interpretation of English Text and Picture Patterns," IEEE Trans. on 
Electronic Computers, Vol. EC-13,No.4; August 19154. 14.Lang,C.A., Polansky,R.B. aJ~d Ross,C.T. "Some 
Experiments with an Algorithmic Graphical Language," Technical Memo. ESL-TM-200, Electronics Systems 
Labo- ratory,MIT; August 1965. 15.Martin,W. "A Fast Parsing Scheme for Hand-Printed Mathematical i~xpressions" 
MIT Artificial Intelligence Memo. No. 145; October 1967. 16.Miller,W.F. and Shaw,A.C. "A Picture Calculus," 
GSG Memo 40, SLAC Computa- tion Group; January 1967. 17.Miller,W.F. and Shaw,A.C. "Linguis- tic Methods 
in Picture Processing," AFIPS, FJCC Part 1,279-290; 1968. 18.Minsky,M. "Steps Towards Artificial Intelligence," 
in Computers and Thought, Feigenbauh1,E.A. and Feldman, J.A., (Eds.), McGraw-Hill Co.; 1963. 19.Munson,J.H. 
"Some Views on Pattern Recognition Methodology," presented at the Int. Conf. on Methodologies of Pattern 
Recognition, University of Hawaii, Honolulu; January 1968. 20.Narasihman,R. "A Linguistic Approach to 
Pattern Recognition," Report No. 121, Digital Computer Laboratory, University of Illinois; July 1962. 
 21.Narasihman,R. "Labeling Schemata and Syntactic Description of Pictures," Information and Control 
7; September 1964. 22.Narasihman,R. "Syntax-Directed Inter- pretation of Classes of Pictures," Comm. 
ACM,Vol.9,No.3; March 1966. 23.Rankin,K. et al. "On the Pictorial Structure of the Chinese Character," 
NBS Technical Note 254, Washington D.C.; 1965. 24.Shaw,A.C. "The Formal Description and Parsing of Pictures," 
SLAC-84,UC-32, Mathematics and Computers, Stanford University; April 1968.  -216-  
			