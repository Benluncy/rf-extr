
 Navigating in Unfamiliar Geometric Terrain (Preliminary Version) Avrim Blum * Prabhakar Raghavan t Baruch 
Schieber t Abstract Consider a robot that has to travel from a start location s to a target tin an environment 
with opaque obstacles that lie in its way. The robot always knows its current absolute position and that 
of the target. It does not, however, know the positions and extents of the obsta­cles in advance; rather, 
it finds out about obstacles as it encounters them. We compare the distance walked by the robot in going 
from .s to t to the length of the shortest path between s and tin the scene. We describe and analyze 
robot strategies that minimize this ratio for different kinds of scenes. In particular, we consider the 
cases of rectangular obstacles aligned with the axes, rectangular obstacles in more general orientations, 
and wider classes of convex bodies both in two and three dimensions. We study scenes with non-convex 
obsta­ cles, which are related to the study of maze-traversal. We also show scenes where randomized algorithms 
are provably better than deterministic algorithms. 1. Motivation and Results Practical work on robot 
motion planning falls into two categories: motion planning through a known scene, in which the robot 
has a complete map of the environment, and motion planning through an un­ known scene in which an autonomous 
robot must find its way through a new environment (see, for example, [6, 8, 9, 13, 15] and references 
therein). Virtually all previous theoretical work ([23] and ref­ Laboratory for Computer Science, MIT, 
Cambridge, MA 02139. Supported in part by an NSF graduate fellowship. Part of the work was done while 
this author was visiting IBM T. J. Watson Research Center. avrim dtheory. lcs. mit. edu tIBM Research 
Division, T. J. Watson Research Center, Yorktown Heights, NY 10598. {pragh, sbar]@ibm. com Permission 
to copy without fee all or part of ths material is granted provided that the copies are not made or distributed 
for direct commercial advantage, the ACM copyright notice and the title of the publication and ifs date 
appear, and notice is given that copying is by perrmsslon of the Asoclation for Computing Machinery. 
To copy other­wise, or to republish, requires a fee and/or specific permission. @ 1991 ACM 089791-397-3/91/0004/0494 
$1.50 erences therein) has focused on the former problem. Papadimitriou and Yannakakis [17] studied 
the lat­ter problem, which is also the subject of this paper: the design and evaluation of strategies 
for naviga­tion in an unknown environment. The unfamiliar environment may be either a warehouse or a 
fac­tory floor whose contents are frequently moved, or a remote terrain such as Mars [21]. The design 
and evaluation of algorithms for such navigation is a natural algorithmic problem that deserves more 
theoretical study. 1.1. Model A scene S consists of a start point s and a tar­get t, together with a 
set of opaque, impenetra­ble, non-overlapping obstacles none of which con­tains s or t. The target t 
may be a point, or a polygon/polyhedron, or an infinite wall. To avoid certain degeneracies, we assume 
that a unit circle (unit sphere in three dimensions) can be inscribed in each obstacle; this guarantees 
that the obstacles have a certain minimum thickness . A point robot has to travel from s to t, and it 
 knows both its current absolute position and the position of t. In walking towards -t it must cir­ cumvent 
the obstacles in S. The robot does not know the positions and extents of these obstacles in advance; 
rather, it finds out about obstacles as it encounters them. Where two obstacles touch, we assume that 
the robot can squeeze between them. Thus a scene that consists only of convex obstacles cannot have a 
non-convex obstacle com­ posed of abutting or overlapping convex obstacles. The most natural mechanism 
for the robot to learn about a scene is vision: the robot discovers obstacles as they come into its view, 
and uses this information to decide how to proceed towards t. For simplicity of exposition in this version, 
we as­ sume that when the robot first sees an obstacle it is given the shape, size and position of the 
ob­stacle (even though much of that obstacle may be invisible from where it stands). However, we show 
how many of our algorithms can be made to work with essentially the same upper bounds (up to a constant 
fact or) under a considerably weaker as­sumption a tactile robot that learns about ob­stacles only by 
bumping into them and moving along them. For this we use variants on the dou­ bling strategies of Baeza-Yates 
et al. [1], Details are omitted in this version. Let I?(S) be the total distance walked by a robot -R 
in going from s to t in scene S, and let d(~) denote the length of the shortest path in. the scene between 
s and t (because of the obstacles, this may be substantially larger than the Euclidean distance between 
s and t).Let S(n) denote the set of scenes in which the Euclidean distance between s and t is n. Following 
the lead of [17], we use as the figure of merit for the robot the ratio R($) P(R, n)= max sEs(n) d(s) 
and study its growth as a function of n. For convenience, we put the scene in Carte­sian coordinates, 
using north / soutlh to de­note the direction of increasing/decreasing y value, east / west for the direction 
of increas­ing/decreasing z value, and up / down for the direction of increasing/decreasing z value, 
respec­tively. The start point s is always assumed to be at the origin.  1.2. Summary of Results We 
first consider scenes where tis a point and the obstacles are rectangles with sides parallel to the axes 
(rat her than squares as in [17]). Surprisingly, even this problem turns out to be quite compli­cated, 
Any robot purporting to achieve a ratio p on such scenes must achieve a ratio of at most p on both the 
following special cases. 1. Scenes in which t is an infinite line and the obstacles are oriented rectangles. 
We call this case the wall problem. 2. Scenes in which the obstacles are oriented rect­angles that are 
confined to lie within a square  room . Here .s is a point on a wall of the room and t is a point in 
the room. We call this the room problem. This intriguing speciaJ case is of interest in its own right 
as a model for navigation in a bounded region such as a warehouse. Section 2 describes an optimal algorithm 
for the wall problem. The algorithm achieves an upper bound of O(W) on the ratio p(l?, n), matching the 
lower bound of [17]. To devise this algorithm we de­velop a general sweep ) paradigm that is fairly nat­ural: 
a human lost in a strange city would probably do a similar search. We extend this approach to three dimensions, 
proving a tight bound of @(n2/3) for the ratio in this case. Section 3 considers the room problem. The 
al­ gorithm for this problem achieves a ratio p(R, n) = 2 -, for some constant c. We conjecture that 
this is not optimal, and suspect that a constant ratio is achievable. The approach taken by this al­gorithm 
is different from the one taken for the wall problem. Here, we develop a calliper method that pins the 
target down to lie within a sequence of advancing paths. Intriguingly, in the room prob­lem d(~) < 2n 
for all S. To see this, suppose that s is the south-west corner of the room. Observe that the length 
of the greedy path from the target t to the start point s (a path that travels due south if possible 
and otherwise due west) is the L1 distance between s and t (Fig 2). In contrast, going from s to t seems 
considerably harder, with greedy paths froms not guaranteed to go anywhere near t.Thus getting out of 
a room is easy, but getting in to­wards a small target seems to be hard. We extend the rQom problem to 
scenes containing arbitrary polygonal obstacles. We show that d(~) can now be as large as n312. Unlike 
the case of oriented rect­angles the greedy path is no longer guaranteed to find an inexpensive way out 
of the room. For these scenes we give a lower bound of Q(W) on P(R, n), for any deterministic algorithm 
and a randomized algorithm that achieves P(R, n) = O(@). Section 4 shows how to combine our solutions 
for the wall and room problems to obtain a tight bound of O(W) for point-to-point navigation in scenes 
consisting of oriented rectangular obstacles. The solution extends to three dimensions, yielding a tight 
bound of @(n2i3) for navigating through oriented cuboids. In Section 5 we give a randomized algorithm 
for certain cases of the wall problem in two and three dimensions. We show that the (expected) ratio 
of our algorithm is < 2 ~l ~m] glogm (for some con­stant c), which is much smaller than the corre­sponding 
deterministic lower bound. This demon­strates the power of randomization in navigation. Section 6 deals 
with non-convex obstacles (and therefore mazes). We give a lower bound for ran­domized algorithms, and 
show that a determinis­tic algorithm of Rao et al. [19] meets this bound. The algorithm is memory-intensive, 
and so we offer an alternative algorithm that is very simple, mem­ oryless, randomized and achieves the 
same upper bound in the plane. We conclude with open problems in Section 7.  1.3. Related Previous 
Theoretical Work The first paper to consider the ratio p(R, n) is that Papadimitriou and Yannakakis [17]. 
They proved that when s and t are points in the plane, and all obstacles are squares, p(R, n) is at least 
1.5, and complement this with an algorithm attaining P(R, n) < 1.5 + o(l) for all n. They also show that 
when t is an infinite wall at distance n. from s and the obstacles are oriented rectangles, then p(R, 
n) is Q(@). Coffman and Gilbert [7] study the performance of simple heuristics in the presence of randomly 
placed obstacles. Kalyanasundaram and Pruhs [10] consider scenes in which all obsta­cles have bounded 
aspect ratios. Lumelsky and Stepanov [13] earlier gave a simple navigation algo­rithm that guarantees 
R(S) to be bounded by d(,~) plus the sum of the perimeters of all obstacles, with no restrictions on 
the aspect ratios or the convex­ity of the obstacles. Their algorithm does not min­imize the ratio p. 
Several papers (see [16, 19, 20] and references therein) give algorithms for building up a map of a scene 
by exploring it entirely. Maze­traversal has received considerable attention in the past in various papers 
[4, 12, 18], none of which considers the ratio metric. The ratio measure P(R, n) has close connections 
to the competitiveness measure used in the study of on-line algorithms [5, 14, 22]; indeed, our problem 
resembles an on-line setting in which the obstacles encountered by the robot form a sequence of re­quests 
, and we compare its total cost R(S) to the off-line cost d($). It is therefore worth point­ing out some 
key differences between the models: (a) In the navigation problem the robot has a def­inite target towards 
which it moves, while there is no such notion in on-line paging [22], for ex­ ample. (b) The robot can 
move back and forth through the scene, re-visiting previously seen ob­ stacles, thus having some control 
on the requests it encounters in the future. (c) Competitive analysis deals with request sequences of 
arbitrary (possi­bly infinite) length, whereas here we have a fixed number of obstacles in the scene. 
Thus we cannot cast our navigation problem in a standard on-line framework such as the server problem 
[14] or met­rical task systems [5]. Nevertheless, the analogy with on-line algorithms proves useful in 
the study of randomized navigation (Section 5).  2. The Wall Problem In this section we consider scenes 
in which t is an infinite wall at distance n from s, and the obsta­cles are rectangles whose sides are 
parallel to the axes. Without loss of generality assume that t is a vertical wall to the east of s. We 
call the width of an obstacle its dimension parallel to the z axis, and the height of an obstacle its 
dimension paral­lel to the y axis. To avoid degeneracies we assume that the width and the height of every 
obstacle is at least one. We present an algorithm that achieves ratio P(R, n) = @(rein{@, 1 + k/d(S)}), 
where h is the total height of the obst acles seen by the robot. This matches the lower bound proven 
in [17], so our al­gorithm is optimal up to constant factors. The algorithm maintains four variables: 
the win­dow size, W, a threshold, T, a sweep direction, and a sweep counter. Initially, W is set to n, 
the sweep direction is south, and the sweep counter is set to zero. The threshold ~ is always set to 
W/@. We begin with a high-level view of the algorithm and its analysis. The algorithm maintains a win­dow 
of varying size around the x-axis. The robot makes &#38; sweeps in directions alternating between north 
and south for each window size. Upon com­pletion of these @ sweeps the window size is dou­bled. Given 
a window of size W (which ranges from y=+w/2 tog= W/2), the distance walked by the robot in sweeping 
is O(W@). ~Ne show that the shortest path that cuts through all the @ sweeps has length Q(@r) = Q(W). 
Let Wf be the window size at the time the robot reaches t. We prove that the total distance walked by 
the robot is O(min{n + h, JVjfi}), while d(~) = Q(lVj). We now describe the algorithm. Starting from 
point s, the robot travels due east until it either reaches t or hits an obstacle, say at (x, y). Let 
yn and y~ be the absolute values of the y-cocmdinates of the north and south corners of the obstacle. 
Be­low, we assume that the current sweep direction is south, the other case is symmetric. The next steps 
are determined by the following rules: Rule 1: If the distance to the nearest corner is less than ~, 
then the robot goes around the obstacle. Specifically, it travels either south or north to the nearest 
corner, then east along the width of the ob­stacle until it reaches the opposite corner (or until it 
reaches t and stops). Then, it travels along the height of the obstacle arriving at point (z + w, y), 
where w is the width of the obstacle. (See Fig. l(a).) From this point it continues to travel due east 
until it hits the next obstacle. (a) I Figure 1: Going around an obstacle Rule 2: If y. > lV/2 and y. 
> lV/2 (i.e., the obsta­cle extends past both sides of the window), then the robot travels to the corner 
that extends less past the window side; that is, it goes north if yn < y, and south otherwise. From this 
corner it continues to travel east, after setting the sweep counter to one, the window size W to 2(min{yn, 
y$}), and the threshold ~ to W/fi. The sweep direction is set to north if the robot is at the south-east 
corner and to south otherwise. (See Fig. l(b).) Rule 3: Otherwise (i.e., the distance to the nearest 
corner is more than ~, and the obstacle does not ex­tend past both sides of the window), then the robot 
travels to the nearest corner, and then east along the width of the obstacle until it reaches the oppo­site 
corner (or until it reaches t and stops). If the robot is at the south east corner then it continues 
to travel east. (Recall that the sweep direction is south. ) Otherwise, i.e., i t is at the north-east 
cor­ner, it travels south along the height of the obstacle until it reaches either the south east corner 
of the obstacle or the point (Z + w, W /2), and then pro­ceeds due east. (See Fig. l(c). ) In the latter 
case it increments the sweep counter by one, and flips the sweep direction. If the counter is greater 
than W, it resets the counter to zero and doubles the window size and the threshold. Theorem 1: The total 
distance walked by the robot is O(min{n + i, lVj@}). Proofi Since the robot walks only along the borders 
of the obstacles and never backtracks, it is clear that the total distance is no more than O(n + E). 
To prove that the distance is also bounded by O(lVjfi), we divide the path taken by the robot into three 
components: (1) horizontal segments, (2) segments walked south and north along obstacles using Rule 1, 
and (3) segments walked south and north using the other rules. Notice that (i) the total distance walked 
east is n = O(J$ j@), and (ii) since the width of each obstacle is at least one unit, the total dist 
ante walked south and north using Rule 1 is bounded by nrj = 0( Wj@), where rj is the final thresh­old. 
It suffices to bound the third component as well. Fix a window size W. The distance walked by the robot 
using Rules 2,3 to complete one sweep is O(W). Since the robot does at most @ sweeps for each window 
size we get that the total distance for a fixed window size is O(Wfi). The window size is at least doubled 
each time it is changed, and thus the total distance travelled over all window sizes is also O(Wffi). 
l Theorem 2: The shortest patA from s tot, d(~), is Q(Wf). Proof: Since we are interested in the value 
of the shortest path up to a constant factor, we may as­sume that the path consists only of horizontal 
and vertical segments. The length of the horizontal seg­ments is clearly Q(n). If TVf = n then we are 
done. Assume not; in this case we prove that the length of the vertical segments is Q(Wf). Suppose that 
the robot has completed at least &#38; sweeps for some window size. Let W be the largest such window 
size. We claim that the verti­cal component of d(~) is $2(W). To see this, note that to cut through all 
the @ sweeps the shortest path may either go around all the sweeps walking distance W, or walk a vertical 
distance of at least ~ in each sweep, totaling fi~ = W. If Wj < 2W then we are done. Otherwise (i.e., 
Wf > 2W, or there is no window for which the robot has com­pleted @ sweeps), then it must be the case 
that Wj is determined by rule 2, in which case the short­est path is clearly fl(Wj). 0 Extension to Three 
Dimensions. We now very briefly sketch extensions of the sweep paradigm to three dimensions. By an argument 
similar to that in [17], it can be shown that the ratio for point-to-wall navigation in three dimen­sions 
is Q(n213). (Details omitted here. ) Our al­gorithm for point-to-wall navigation matches the lower bound 
to within a constant factor provided every obstacle is a general cylinden its intersection with every 
plane perpendicular to the x-axis is ei­ther a fixed closed curve (possibly non-convex), or empty. As 
in the two dimensional case, we main­tain a threshold and a window that grow together. The three-dimensional 
analog of the sweep is a spi­ral. The spacing of successive orbits of the spiral is chosen to to keep 
the cost of the robot to within n2t3 of the shortest path.  3. The Room Problem In this section we 
consider scenes in which the ob­stacles are oriented rectangles confined to lie within a square room 
such that no obstacle touches the room walls. The point s is on the border of the room and -t is in the 
center. (See Fig. 2.) Results pertaining to t elsewhere in the room are similar and omitted here. Later, 
we extend our results to rectangular rooms. Since travel along the room walls is (cheap , we may assume 
s is in the south­west corner of the room, and for convenience we let t have coordinates (n, n), so the 
distance from s to t is in fact nfi. Also, for simplicity, we assume all obstacles have corners at integral 
(z, y) points, Define a greedy (+z, +y) path to be a path that travels due east if possible and otherwise 
due north. Similarly, define greedy (+y, +z) paths, (+z, Y) paths, and so forth, to be ones that travel 
in the first direction if possible and otherwise the second direction. A brute-force (+z) path is one 
that trav­els due east, going around obstacles in its way along the shorter direction, but otherwise 
maintaining a constant y coordinate. A monotone path from (z1, !h) to (z2, Y2) is me where the z and 
y coor­dinates never decrease along the direction of the straight-line path. For example, if X2 > ZI 
and Y2 < w; then the z coordinate will never decrease and the g coordinate will never increase. Notice 
that a greedy path is always monotone. We now describe an algorithm achieving R(S) = 0(n312), and thus 
P(R, n) = O(m). An improve­ment that uses this algorithm recursively achieves P(R, n) = 0(2CG). The algorithm 
maintains the following invariant at the start of each iteration: the robot knows of a monotone path 
from a point (xo, n) to a point (n, Ye), where O < ZO, yO < n, that is crossed by no obstacle. Furthermore, 
it is positioned on a point of this monotone path. We begin with $0 = y. = O, where the known path is 
just along the room bor­ders. Each loop through the algorithm will increase either Z. or go by at least 
an amount W, walking a distance of only O(n). Since each of Z. and go can be increased by this amount 
only @ times, the total distance walked by the robot to reach tis 0(n312). The algorithm consists of 
four steps. For this 44 The south-west greedy path from t A <+y, +x> monotone path Figure2: The Room 
Problem first version of the algorithm, let m = @. a new monotone path from (zo, n) to (n, yo) with Z. 
increased by at least m. (Similarly, the robotAlgorithm Oriented-Room-Find would travel a greedy ( z, 
+y) path if it had hit Step 1: Travel to location t = (z. + m, y. + m). to the south of target tin step 
2.) If this point happens to be inside an obstacle, or Step 4: Ifxo<n rnoryo <n-m then go back below 
our current monotone path, then any other to Step 1. Otherwise, perform a modified versionpoint to its 
north-east that is to the soutlh-west of of Step 1 with t = t,and stop. t will do. In particular, if 
t is inside an obstacle, then either the north-west or the south-east corner The distance walked performing 
Step 1 is of the obstacle is to the south-west oft and may be O(m2) = O(n) since the robot may travel 
along the used. If t is below the monotone path, any point on monotone boundary to a point with y-coordinate 
the monotone path (that is not inside an obstacle) equal to that of t ,and then travel in a brute-force 
to the south-west oft may be used. (+z) path to t .The brute-force (+z) path trav­els at most 2m distance 
for every unit of progressStep 2: Make a greedy (+z, +y) path from t until in the +x direction made, 
since the lower end ofeither the z or y coordinate equals n. Without loss any obstacle encountered cannot 
extend below theof generality, assume that the robot has traveled to monotone pat h. Steps 2 and 3 together 
requirethe west oft, so the current coordinates are (2, n) travel at most a distance 3n since each consists 
offor ~ < n. Notice that ~ z Z. + m since the path a single greedy path, and in the two paths togetherwas 
greedy. at least one coordinate is non-decreasing. Since Step 3: Let zo +-i. Travel a greedy ,(+z, y) 
these steps are iterated at most 2m times, the to­path from (f, n) until either a point (n, j) is tal 
distance traveled is at most 0(n3/2). reached (in which case yO + j), or the previous monotone path is 
hit. In either case we now have We can improve the result to O(n.2c@) by us­ ing algorithm Oriented-Room-Find 
recursively to reach temporary destination t in Step 1, and then optimizing the value of m the z (and 
y) coor­dinate distance from the start point to t . Define T(n) to be the total distance traveled to 
reach t at z (and y) coordinate distance n from the start point. For a fixed value of m, the distance 
traveled at each iteration of Step 1 is at most l (m), while the distance traveled at each iteration 
of Steps 2 and 3 is at most 3n. The number of iterations is at most 2n/m, so the recursion is: T(n) < 
~ [T(m)+ 3n] , which solves to T(n) = nl+ci=. 3.1. Arbitrary Rectangular Obstacles What if rectangular 
obstacles with sides not paral­ lel to the axes are allowed? We begin by proving two theorems that demonstrate 
the difference be­ tween scenes cent aining only oriented rectangular obstacles, and scenes containing 
arbitrary rectan­ gular obstacles. Theorem 3: There exist scenes S containing rect­ angular obstacles 
whose sides are at arbitrary an­ gles for which d(S) 2 xn312/27. Thus, the length of the shortest path 
betweens and t is not always bounded above by the L1 distance as in the oriented case. Theorem 4: For 
any deterministic robot R, there exist scenes S containing rectangular obstacles whose sides are at arbitrary 
angles for which p(R, n) = Q(@). Thus, the upper bound for oriented rectangles can­ not be achieved in 
this case. Proof of Theorem 3: Consider n/9 + 1 circles centered at t,with radii n/3 + 3i, i = 0,. . 
n/9. Inscribe in each a regnlar @-gon. Rotate all the polygons inscribed in circles of radii n/3 + 3i 
for even i by an angle x /fi. Each edge of each poly­ gon can now be replaced by a rectangular obstacle 
of unit width (in the radial direction) and length very nearly the length of that edge. Now, any obstacle-avoiding 
path between s and thas to walk a distance of at least 2r@/3 going from a point on the circle with radius 
n/3 + 6i to a point on the circle with radius n/3 + 6i + 6, for O < i < n/18. 1 Proof of Theorem 4: 
Consider the scene de­scribed in the proof of Theorem 3. We allow a (deterministic) robot to walk from 
s to t.We now remove from the scene any obstacle not touched by the robot. Let T be the number of obstacles 
it touches. It can be shown that the robot pays a cost at least T@/4. A pigeonholing argument shows that 
d(S) < 4T. Following a technique from [17], the argument can be made to work even when the robot uses 
vision. 0 We now turn to upper bounds. Define the an­gle of a rectangle to be the angle of its longest 
edge. We first describe a modification of algorithm Oriented-Room-Find to handle not just obstacles of 
angles of O and m/2, but obstacles angled in the range [0, m/2] as well, retaining the same perfor­mance. 
Note that we do not allow obstacles an­gled in the remaining range of (m/2, m). Then, we describe how 
this new algorithm can be modi­fied for scenes S where there is a known excluded range (dl, d2) of angles 
(for example, dl = 7r/5 and d2 = m/4). Let ii = n/a, where a = d2 d1. Our al­gorithm achieves R(S) = 
O(h), if ii = Q(nl+ ), for some constant e, and R(S) = O(ii. 2 -) other­wise. The length of the shortest 
path in such scenes is O(n). We remark that for practical cases it may be enough to consider scenes where 
there is a known excluded range, since usually the number of different angles of the obstacles in real-life 
scenes is small. Finally, we give a randomized algorithm that achieves p(R, n) = A regardless of the 
angles of the obstacles. The idea for the situation where angles are in the range [0, 7r/2] is as follows. 
First, let us treat the obstacles as infinitesimally thin lines, say along a longest edge (the thickness 
of obstacles can be handled separately). Since every obstacle has an­ gle in the range [0, m/2], we can 
still perform greedy (+x, +Y) and (+Y, +z) paths. The problem is that we can no longer make the greedy 
(+z, y) path re­ quired in Step 3 of Oriented-Room-Find. Instead, we will use binary search to find a 
point (z , y ) either directly north or east of # with the follow­ing property: a greedy (+x, +y) path 
frc)m (z , y ) hits a point (n, ~) to the south of t and a greedy (+Y, +2) path from (z , y ) hits a 
point (~, n) to the west of t. So, consider just the condition that we begin with a (not necessarily 
monotone) known path of length O(n) from the line y = n to the line x = n with least y value go and least 
z value Zo. Then, we will have produced a new such path with either the least z value or least y value 
increased by m . This strategy can be used for a smaller range (dl, dz) of excluded angles by just performing 
a rotation and a coordinate transformation on the space. Essentially, instead of writing t as n; + nJ 
for orthogonal unit vectors Z and ~, we may write t as (n d! + n d~ ), where d; and d; are unit vec­tors 
in the dl and d2 directions. It is not diffi­cult to see that both n and n are O(n/a), where a=d2 dl. 
Let ii= n/a.. The performance of the previous algorithm after the transformation is R(S) = O(h), if ii 
= Q(nl+c), for some constant c, and R($) = O(fi . 2c@) otherwise. Theorem 5: There is a deterministic 
algorithm for the room problem with an excluded range of angles a that achieves a ratio R(S) = O (ii), 
if ii = Q(nl+C), for some constant c, and R(S) = O(ii . 2 =) otherwise. Here ii = n/a. Consider now the 
general case where the angles of the obstacles may be in any range. A sim­ple pigeonholing argument implies 
that a, constant fraction of the ranges [i~/fi, (i + 1)~/~, for 1 < i < V have the property that the 
total area of the obstacles angled in this range is no more than 2/@ of the total area. Thus the total 
area of obstacles in such a range is always 0(n3i2). Consider a randomized algorithm that first guesses 
such a range. It then applies the above al­gorithm assuming that there are no obstacles with angles in 
this range, on actually encountering any obstacle in this range, it just goes around the ob­stacle at 
cost at most the area of the obstacle. Thus the total cost paid by the algorithm on such obsta­cles is 
O (n3j2). The expected totaJ dist ante walked by this algorithm is given by the recursicm: T(n) s ~ [T(m)+ 
3n3i2] , m whose solution is T(n) = n3i2. Theorem 6: There is a randomized algorithm achieving a ratio 
that is O(W) for the room prob­lem provided every obstacle is a rectangle within which a unit circle 
can be inscribed.  4. Point-to-point Navigation We combine the algorithms for the wall and room problems 
to obtain an algorithm for navigation in scenes where t is a point at (n, n) and the obsta­cles are oriented 
rectangles with no bound on their extents. The robot starts by taking a greedy (+z, +g) path from s until 
it reaches a point s with either z or y coordinate equal to t. Suppose that s and t have the same y-coordinate. 
The robot now uses the sweep algorithm for the wall problem to travel to a point on the vertical wall 
containing t.Notice that the path taken by the robot in the sweep al­gorithm is a path from s to a point 
(n, yo) where [!Jo -nl ~ d(~) that never decreases in the ~ direc­tion. This path can be used to obtain 
a monotone path from (n, yo) to a point (zo, n) with Z. z 0. Fi­nally the robot invokes the algorithm 
for the room problem to arrive at t using the monotone path as the room walls. We analyze the distance 
walked by the robot. The distance traveled using the algorithm for the wall problem is at most O(min{n 
+ h, Wffi}), where IVf is the size of the last window considered. The size of the (rectangular) room 
then created is at most n x IVf. So, using the algorithm from sec­tion 3, the distance walked to reach 
t is O(WfJ@. If Wf = O(n) then we are done since the length of the shortest path from s to t is at least 
2n. Sup­pose that this is not the case. By Theorem 2, the length of the shortest path from s to t is 
fl(Wf). Since the length of the shortest path from s to s is at most 2n, d(~) = Q(Wj 2n) = Q(Wf). We 
therefore have the following theorem. Theorem 7: For two dimensional scenes S in which s and t are points 
and every obstacle is a rectangle whose sides are parallel to the axes our algorithm achieves a ratio 
ofp(l?, n) = O(@. Extension to Three Dimensions. As in two tion whether one can achieve similar bounds 
for the dimensions, we give an upper bound for point-to­point navigation that matches the lower bound 
to within a constant factor provided every obstacle is a cuboid whose sides are parallel to the axes. 
Also as in two dimensions, our upper bound for point-to-point navigation comes from combining an algorithm 
for point-to-wall navigation and another for the room problem. It suffices to combine the three dimensional 
sweep algorithm with the two-dimensional room al­gorithm to obtain a three-dimensional navigation algorithm 
for which we prove: Theorem 8: For three dimensional scenes S in which s and t are points and every obstacle 
is a cu boid whose sides are parallel to the axes our al­gorithm achieves a ratio of p(l?, n) = 0(n2/3). 
 5. The Power of Randomization We now consider randomized robots that toss coins as they walk from s 
to t. The scene S is fixed in advance by an oblivious adversary [2] who knows the randomized algorithm, 
but not the coin tosses made by the robot during a walk. The cost of robot R on scene S is now a random 
variable; we thus define the ratio p(li?, n) to be maxsc~f~) ~[R(S)] /d(S). The main result of this section 
is a randomized algorithm for the wall prob­ lem that achieves a ratio that is 2°(@0gn10g10g ) provided 
the obstacles are all vertical line segments of integral x-coordinates and the robot is allowed vision. 
Notice that for this situation, the robot can see the entire column of obstacles directly in front of 
it; that is, if the robot is at a point with Z­coordinate in the range (i 1, i) for integer i, it can 
see all obstacles of z-coordinate i. To keep with our previous conventions on the thickness of obstacles, 
we could equivalently consider obstacles of width between one and two having their left walls only at 
even z-coordinates; this would still allow the robot to see an entire column at once. The Papadimitriou-Yannakakis 
lower bound of Q(A) still holds for deterministic algorithms for this restricted class of scenes [17]. 
So, for such scenes, a randomized algorithm is provably better than a deterministic one. We leave as 
an open ques­more general wall problem. The idea for the randomized algorithm is to view the problem 
as a k-server problem on (k + 1) equally-spaced points on a line, and then use as a subroutine known 
randomized strategies [3] for that server problem. In fact, our problem can be better described as a 
metrical task system of [5], but we will use the language of servers here. In the lower bound direction, 
a recent result of Karloff et al. for the server problem shows that even for the special case of scenes 
we consider, no randomized algorithm can achieve a constant ratio [11]. Theorem 9: The randomized algorithm 
below achieves a ratio that is 2°(d10g n 10glOg ) for the wa]~ problem in the plane where the robot uses 
vision and the obstacles are vertical line segments at in­ tegral x-coordinates. Proof: We map the navigation 
problem to a k­server problem on (k + 1) equally-spaced points on the line as follows. Let n = k + 1 
and de­fine the spacing between adjacent points on the line to be W/n, where W is the size of a win­dow 
of y-coordinates considered by the robot. Each point in the server problem corresponds to a range of 
lV/n y-coordinates for the navigation problem. The hole (the point without a server) represents the range 
of y-coordinates currently inhabited by the robot. We begin with W = n and start the hole at the center 
of the line. Each time the robot sees a column of obstacles, the robot notes all points in the server 
problem corresponding to ranges that are completely blocked by obstacles. It then makes enough requests 
to the server problem on those points so that for any reasonable (lazy) algo­rithm [14] the hole no longer 
resides on such points. The robot now moves in they direction to the range corresponding to the new location 
of the hole. It then moves an additional at most W/n + 1 dis­tance to find a point in that range not 
blocked by any obstacle, and from there goes forward in the +Z direction to the next column. So, the 
distance moved by the robot is at most the on-line server cost, plus W/n + 1 for each unit moved in the 
+Z direction. There is a randomized strategy for k servers on k+ 1 equally-spaced points on the line 
that achieves a competitiveness at most 2c~T against the oblivious adversary [3]. The off-line server 
cost in the above transformation is a lower bound on the shortest path for the robot problem as lcmg 
as the off-line cost is less than W. If the off-line server cost reaches W, we then just double the window 
width and restart the server algorithm, each point now corresponding to a larger range of y values. Note 
that the off-line server cost could be a bit lower than the length of the shortest path since we do not 
make requests to points corresponding to y-value ranges only partially blocked by obstacles. As mentioned 
previously, the on-line cost for the robot is a most the on-line cost for the server prob­lem, plus W/n 
+ 1 for each unit advance in the z direction. So, the total distance traveled by the robot is at most 
(Wf + n) + wf2 @g @10g < log nlog log n 2d(S)2c~ 1  6. Non-convex Obstacles When the obstacles are non-convex, 
the scene can be a maze. In this case it is easy to see that P(S, n) cannot be bounded by any function 
of n (the Eu­clidean dist ante between s and t). Instead, we prove a ratio between E(S) and d(S) as a 
function of the total number of vertices in all the obstacles, pq. Theorem 10: No randomized algorithm 
achieves a ratio better than [Vi/8. Proof Outline: Consider the maze in Fig. 3. It has lV[/8 passages 
that could lead from s to t. An algorithm attempts various passages in turn, until it finds the sole 
passage open to t.For any random­ized algorithm, there is one passage whose expected time to attempt 
is ~ (] V\/8)/2; this passage is left open to t. The robot walks 2d(S) on every failure before that attempt. 
U The bound applies a fortiori to deterministic algo­rithms. Rao et al. [19] give a deterministic algo­rithm 
that explores a maze by building a map of the scene, proceeding at each step to that unex­plored vertex 
of the maze that is nearest to those vertices that have already been visited. It is easy to I 1 SiYm 
II 1I Figure 3: A maze achieving the lower bound show that this algorithm achieves a ratio of at most 
2\Vl, matching the above lower bound to within a constant. This algorithm is memory intensive, and this 
may be a handicap when space is limited or the scene changes quickly enough that a map is not worth building. 
In the full paper we offer a simple, memoryless randomized alternative. 7. Open Problems What is the 
tight bound for the room problem with oriented rectangular obstacles? We use the minimum thickness requirement 
that each obstacle be large enough that a unit circle can be inscribed in it in bound­ing the cost of 
Step 1 of our algorithm for the room problem. Can we dispense with this re­quirement for the case of 
oriented rect angu­lar obstacles? (By Theorem 3, we know that this cannot be done for non-oriented rectangu­lar 
obstacles.) This may be possible if we can give an algorithm achieving a ratio that is a constant, independent 
of n. Can a randomized algorithm for the room problem beat deterministic algorithms? Extend the sweep 
algorithm for the wall prob­lem to handle arbitrary polygonal obstacles, and hence obtain an algorithm 
for point-to-[10] point navigation with these obstacles. Extend all of the above to three dimensions. 
  [11] Give an algorithm that achieves a prov­ably good ratio for three-dimensional scenes  [12] with 
non-convex obstacles (three-dimensional mazes). [13]  Acknowledgements We thank Alok Aggarwal, Allan 
Borodin, Don [14] Coppersmith, Leo Guibas, Sandy Irani, Ming Kao, Howard Karloff, Samir Khuller and Yishay 
Man­sour for comments and suggestions. [15] B. Kslyanasundaram and K. Pruhs. Visual searching and mapping. 
Technical Report 90-15, Dept. of Com­puter Science, Univ. of Pittsburgh. References [16] [1] R.A. Baeza-Yates, 
J.C. Culberson, and G.J.E. Rawlins. Searching in the plane. To appear in Information and Computation, 
1990. [2] S. Ben-David, A. Wigderson. A. Borodin, R.M. Karp, G. T4rdos, and On the power of randomization 
in on­ [17] line algorithms. In Proc. 22nd Annual A CM Symposium on Theory of Computing, pages 379 388, 
1990. [3] A. Blumj A. Borodin, D. Foster, H.J. Karloff, Y. Man­ [18] sour, P. Raghavan, M. Saks, and 
B. Schieber. Ran­ domized on-line algorithms for graph closures. Personal communication, 1990. [19] [4] 
M. Blum and D. Kozen. On the power of the compass (or, why mazes are easier to search than graphs). In 
19th Annual Symposium on Foundatiorw of Computer Science, pages 132-142, October 1978. [20] [5] A. Borodin, 
N. Linial, and M. Saks. An optimal online algorithm for metrical task systems. In Proc. 19th An­ nual 
ACM Symposium on Theory of Computing, pages 373-382, 1987. [21] [6] L. Cheng and J.D. McKendrick. Autonomous 
knowl­ edge based navigation in an unknown two dimensional environment with convex polygonal obstacles. 
In Proc. of the Int. Sot. Opt. Eng., volume 1095, pages 752 759, [22] 1989, [7] E.G. Coffman and E.N. 
Gilbert. Paths through a maze of rectangles. In preparation, AT&#38;T Bell Labs, 1991. [23] [8] M. Daily, 
J. Harris, D. Keirsey, D. Olin, D. Payton, K. Reiser, J, Rosenblatt, D. Tseng, and V. Wong. Au­ tonomous 
cross-country navigation with the ALV. In Proc. of the IEEE International Conference on Robotics and 
Automation, volume 2, pages 718 726, 1988. [9] J. Hallam, P. Forster, and J. Howe. Map free locali­ sation 
in a partially moving 3-D world: the Edinburgh feature based navigator. In Proc, Intl. Conf. Intelligent 
Autonomous Syste-ms, volume 2, pages 726-736, 1989. H. J. Karloff, Y. Rabani, and Y. Ravid. Lower bounds 
for randomized server algorithms. In Proc. 25 rd Annual ACM Symposium on Theory of Computing, 1991. V. 
Lumelsky. Algorithmic issues of sensor-based robot motion planning. In 26th IEEE Conference on Decision 
and Control, pages 1796 1801, 1987. V.J. Lumelsky and A.A. Stepanov. Dynamic path plan­ning for a mobile 
automaton with limited information on the environment. IEEE Transactions on Automatic Contro/, AC-31 
:1058-1O63, 1986. M.S. Manasse, L.A. McGeoch, and D.D. Sleator. Com­petitive algorithms for on-line problems. 
Journal of Al­gorithms, 11:208 230, 1990. H. Moravec. The Stanford cart and the CMU rover. Proceedings 
of the IEEE, 71:872-874, 1983.  B.J. Oomen, S.S. Iyengar, N. S. V., Rae, and R.L. Kashyap. Robot navigation 
in unknown terrains using learned visibility graphs. Part I: The disjoint convex ob­stacle case. IEEE 
Journal of Robotics and Automation, 3:672-681, 1987. C.H. Papadimitriou and M. Yanakakis. Shortest paths 
without a map. Proc. 16th ICALP, pages 610 620, July 1989. N.S.V. Rae. Algorithmic framework for learned 
robot navigation in unknown terrains. IEEE COMPUTER, 22:37 43, 1989. N.S.V. Rae, S.S. Iyengar, and G. 
deSaussure. The visit problem: visibility graph based solution. In IEEE In­ternational Conference on 
Robotics and Automation, pages 1650-1655, 1988. N.S.V. Rae, S.S. Iyengar, B.J. Oomen, and R.L. Kashyap. 
On terrain model acquisition by a point robot amid polyhedral obstacles. IEEE Journal of Robotics and 
Automation, 4:450 455, 1988.  C.N. Shen and G. Nagy. Autonomous navigation to provide long distance 
surface traverses for Mars rover sample return mission. In IEEE International Sympo­sium on Intelligent 
Control, pages 362 367, 1989. D.D. Sleator and R.E. Tarjan. Amortized efficiency of list update and paging 
rules. Communications of the ACM, 28:202-208, February 1985. C-K. Yap. Algorithmic motion planning. In 
J.T. Schwartz and C.K. Yap, editors, Advances in Robotics, pages 95 144. Lawrence Erlbaum Associated, 
Hillsdale, NJ, 1987. 
			