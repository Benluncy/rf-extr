
 Developing An Undergraduate Software Engineering Program in a Liberal Arts College Paul T, Tymann, 
Douglas Lea, Rajendra K. Raj State University of New York, Oswego,New York 13126 1 Introduction also 
need to balance other degree require­ments with those of the major. Of these This paper describes the 
approach taken at concerns, only the first seems to have some the State University of New York at Os- 
Vdldit y. wego to develop a new undergraduate pro- There is no universal consensus about the gram in 
software engineering. The exist­ particular courses and curricula necessary to ing undergraduate degree 
in computer sci­ guarantee that students become successful ence offered at SUNY Oswego already em­ software 
engineers. To remain conservative phasizes systems issues related to soft­ and flexible, we decided to 
design an un­ ware engineering. Mod situdenttt take a va­ dergraduate concentration in software engi­ 
riety of systems courses such as compiler neering within the computer science major construction, operating 
systems, net working, program, rather than a full-fledged degree and parallel/distributed systems. However, 
program in software engineering. For the there were compelling reasons for widening next few years, this 
strategy will ensure that and strengthening this historical, informal our students enter the industrial 
workplace focus into an undergraduate program in soft­ with a strong background in software de­ ware 
engineering, sign and development, while also guarantee- In recent years, there has been a great ing 
that our curriculum will not be cast in deal of discussion about the wisdom of pre stone and may be improved 
aa we and the vidlng undergraduate programs in software rest of the software community gain experi­ engineering. 
First, there is a lack of agree­ ence with teaching this evolving discipline. ment about what constitutes 
a reasonable We have used a very practical approach program in software engineering. Second, to developing 
our software engineering con­ many software practitioners believe that pro­ centration, Fk3t, our concentration 
supple­ fessional maturity is gained only after some ments tra&#38;tional computer science curricu­ experience 
both in life and in a career. This lum with courses in software analysis, pro­ maturity cannot be amumed 
of or expected cess, and practices. Second, formal laboratcr­ from the typical traditional undergraduate 
ries will be used to provide an environment in student. Moreover, undergraduate students which students 
will be able to obtain hand­on experience with the theory and techniques Permission to copy without fee 
all or part of this material is discussed in clam. Such software laborato­granted provided that the copies 
ero not made or distributed for ries, with their emphases on cooperative soft­ direct commercial advantage, 
the ACM copyright notice arrd the ware development and programming in the title of the publketion and 
its date appeer, and notioe is Given large, strengthen and formaUze a program of that copying is by 
permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a 
fee study in software engineering. and/or specifio permission. The development of our proposed software 
 SIGSCE 94-S/94, PhOanlX, Arfz~USA @ 1994 ACM O-89791~..$3.W engineering concentration has been guided 
by the nuggentiom made in the Software Engineering Institute (SEI) report on un­dergraduate software 
engineering education Ford 1990], our individual experiences in teaching undergraduate and graduate soft­ware 
engineering related courses, our collec­tive experiences in software development in both academia and 
industry, and our partic­ular constraints and requirements revolving around the existing computer science 
pro­gram within a liberal arts setting. In order for the software engineering con­centration to be effective 
it must have fac­ulty support and adequate resources. Fac­ulty opposition to such a program is a major 
concern. Some faculty may be opposed sim­ply to the application of science rather than pure science. 
Others will be opposed to such a concentration since it would force them to change the way in which they 
taught in the past. They argue that they do not have the time or training to implement the required changes. 
To address the concerns of the lat­ter group of individuals we have offered to teach the courses that 
need to be changed for the first time, and then provide notes and assistance to other faculty members 
who will eventually teach these courses. Thb has al­lowed us to make the desired changea and ac­ tually 
strengthened the program. In house training and summer workshops can pro­ vide the additional training 
that some fac­ ulty members may require.  2 The Development Plan Our plan consists of a small number 
of spe­cific enhancements and additions to the cur­riculum that will enable us to support the software 
engineering concentration. 2.1 Changes to Core Courses Changes need to be made to the way in which the 
computer science core courses are currently being taught, A shift needs to be made away from the tractional 
ap­proached used by most computer science fac­ulty. There is a need to supplement clMs­room presentations 
with material that ap­propriately balances the science and engi­neering side of computing. Consider the 
way in whkh Queues are dis­cussed in a typical data structures course, The data structure is defined 
abstractly imd then implemented using different progrsun­ming techniques, Simply supplementing this presentation 
with a discussion of how a Queue may be used in a large software nye­tem, and demonstrating how different 
im­plementations tiect the performance of that system, will introduce some of the basic clon­cepts of 
large software systems development. Providing the opportunity to examine and critique existing code as 
a group, providea a means for students to cooperate in the de­velopment of software systems. Formal 
laboratories can provide a rich en­vironment for students to obtain hands.on experience with the theory 
and techniques discussed in clam. Currently hands-on ex­perience is obtained in closed laboratories in 
the form of programming assignments. As a result, students spend a large portion of their time learning 
how to use programming tools, rather than concentrating on the the software that they are designing. 
Moreover, they do not learn how to use available tools effectively. There is a great deal of act,iv­ity 
in the computer science education calm­munity regadng formal laboratories. The latest set of curricula 
guidelines published by the joint ACM/IEEE-CS curriculum taak force emphasizes the importance of formal 
laboratories [Tucker et al. 1991]. Simple and effective open laboratories have already been developed 
for the in­troductory programming course at Oswego, The initial labs teach the basic skills re­quired 
to enter, compile, and debug a pro­gram. Later exercises demonstrate concepts such as scoping, parameter 
passing, condi­tionals, and loop structures, Formal labora­tories for other core courses will provide 
the student with the opportunist y to experiment with various software systems. These exer­cises will 
be used to help students to relate abstract concepts to concrete programs and will lead the student into 
new areas of com­puting. Perhaps the biggest challenge was obtain­ing the necessary equipment to support 
the laboratory component of this program, After designing the concentration we determined what equipment 
would be required. We de­cided that a new software laboratory based on a standard client/server cluster 
with a file server serving 15 high-performance Unix­based client workstations would be adequate, This 
cluster will constitute a local network (subnet) which in turn will be linked into the other computers 
used by the department. The distributed setting and subnet struc­ture residing in a self-contained software 
engineering laboratory was needed to sup port the Computer Networks course. A dh­tributed setting is 
also needed to support the programming of distributed application in the Parallel and Distributed Systems 
course. Given the current fiscal shortfalls that most schools were facing we knew that funding for the 
equipment had to come from off campus. We began the initial steps of getting state, federal, and industrial 
funds for both hard­ware and software. We applied for and re­ceived an NSF ILI grant to obtain the equip 
ment to support the concentration. 2.2 Changes to existing courses Our current systems oriented courses 
already focus on the engineering and construction of software systems. In particular, our courses in 
compiler construction, operating systems, networking, database, and graphics incorpo­rate semester projects, 
often performed by teams or small groups of students, while at the same time emphasizing important theo­retical 
and analytic concepts. Traditionally, Computer Science students who take courses specializing in a specific 
area of application (graphics, data communication, etc) do not get to understand the commonality of large 
software system design. When appropriately taught, systems courses such as compiler and operating systems 
provide students with an ability to observe such commonality. Stu­dents should understand how large software 
systems interact with each other to meet user needs. Emphasis needs to be placed on the fact that each 
system is composed of sub­systems, all implemented in software, and that each system will be maintained 
or r­vised by someone else. For example, the current compiler course has emphasized the practical aspects 
of com­piler construction. Students have been taught theoretical concepts (regular expres­sions, finite 
state automata, grammars, syn­tax directed translators), along with the practical aspects of constructing 
scanners, parsersl type-checkers, code optimisers, and code generators. The centerpiece of the course 
has been the course project, where students have worked in teams of two or three. The project typically 
has been the design and construction of a complete com­piler for a significant subset of a modern programming 
language with features such as subrange types, arrays, records, sets, repe­tition and selection control 
structures, func­ tions and procedures with various parameter passing modes, In recent years, the target 
language has also had an object-oriented fla­ vor. While the current course has a heavy sys­tems emphasis, 
the major change we have planned is to start the project off with a reasonable large software base compiler 
for a primitive language; an example of such a starting point has been Henry s base com­piler [Henry 
1990] for Wlrth s PL/O lan­guage, TKIs change will not only allow stu­dents to build compilers for major 
program­ming languages, but will also provide stu­dents with the opportunity to read substan­tial fragments 
of existing code, to appreciate the need for documentation, and maintain modularity and extensibility, 
Our present course in Computer Net­works cannot incorporate a project that pro­vides realistic or appropriate 
hands-on ex­perience given the content and level of the material, While our current approach of designing 
and using simulated networking environments has been well-received both by students and the academic 
community [%Ym=n 1991], there are obvious limits to the degree to which we can provide stu­dents with 
the insights that only result from dealbg with actual distributed networked systems possessing asynchronous 
behavior, hardware failures, and other real-life prob­lems. Since most network applications are built 
using the client server model, it is important that students be given realistic experience using this 
paradigm. It is possible to imple­ment a simple client server application such as the talk facility provided 
in most UNIX environments. In a typical project such as thh, the class could be divided into groups of 
two students each, where each group would be assigned a workstation on which to im­plement a client and 
server for some network application. In the talk project, each team would implement a server process 
that pro­ vides facilities to client processes on that ma. chine. The Parallel and Distributed System]l 
course covers the concepts of concurrency, parallelism, and dhtributed systems that form an increasing 
central role in the study of software systems. Students are providedl with practical experience in constructing 
and using such systems. While thb course is presently taught using software packagesl that simulate the 
behavior of parallel sys­terns, we hope to eventually use a real dia.. tributed computing environment 
to enhance: the variety of students projects we could of­fer. As in many typical computer science pro­grams, 
we have offered a single (sophomore or junior level) course in software engineer­ing in the past. Being 
the only course, the: syllabus in this course was designed to be m~ broad introduction to all aspects 
of software: engineering. This course will be revised m that it paves the way for new offerings. Soft-. 
ware process issues are currently discussed, in this course as well as in a systems analysi[l course. 
The department also offers coursesl within the Information science program deal­ing with ethics, legal 
issues, and human fax­tors. These courses are recommended to stu­dents as important and useful adjuncts 
to the: concentration. 2.3 Additional courses Both departmental resource restrictions ancl our own modest 
goals prevented us from de. veloping a large set of new courses. We tried, whenever possible, to utilize 
existing courses in the new concentration. However there are: some areaa that are not covered by existing 
courses, Softwere Design Buildlng on our current introductory software engineering course, the software 
design course provides advanced discussion of software design and construc­tion techniquet3. The course 
dlscussee best known practices, includlng the use of object­oriented design and formal methods, whkh 
the studentn will use in both small and medium sized projects. The course is focused primarily on de­sign 
issues in the construction of software systems. It also integrates design concepts, methods, and techniques 
with other aspects of software development. Beyond obtaining knowledge and experience in topics falling 
strictly under the category of design , stu­ dents will learn how to perform project plan­ ning and scheduling, 
system requirements, user documents, design specifications, imple­mentation, and testing. Particular 
emphasis is placed on object-oriented techniques. Thh course includes a significant laboratory com­ponent 
where students need to develop expe­rience and maturity by dealing with actual problems, design issues, 
and consequences. Given both the time constraints of a one­eemester course, and the increasing impor­tance 
of using good software tools and envi­ronments in enhancing development produc­know both how to uee such 
tools and to un­derstand their internal design well enough to build new onea. This course will describe 
the theory and practice of software environ­ments, including graphical user interfaces, program databases, 
distributed project man­agement, revision control, compilation envi­ronments, graphical design tools, 
tools for code inspection and reuse, debuggers, and related topics. However~ it will at the same time 
enable students to learn how to exploit existing software environments in analysis, design, and programming 
efforts. tivity, teams of students will typically com­ plete a non-trivial project in a realhtic, pre 
ductive workstation baaed environment or in a networked PC environment.   3 Acknowledgments Development 
of thh material was supported by the National Science Foundation under grant number USE-9251996,  References 
[Ford 1990] G. A. Ford. 1990 SEI Report on Undergraduate Software Engineer­ing Education. Technical Report 
CMU/SEI-90-TR-3, Software Engi­neering Institute, Carnegie Mellon University, 1990. [Henry 1990] R. R. 
Henry. The PL/O Com­piler, 1990. The compiler and the source code is copyrighted by the author. Softwere 
Environments. The software environments course represents the most ex­perimental and exploratory of our 
offerings. Few attempts have been made to teach such a course at the undergraduate level. How­ever, as 
the process of software engineer­ing becomes more complex, requiring special environments and tools, 
it has become in­creasingly important that software engineers [Tucker [Tymann et al. 1991] A. Tucker 
et al, Com­puting Curricula 1991, Technical report, ACM, 1991. 1991] P. Tymann. VNET: A Tool for Tcachiig 
Computer Network­ing to Undergraduates. In Proc. gAui SIGCSE Technical Sympo­ aiun+ pagea 21-24, March 
1991.  
			