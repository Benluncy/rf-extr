
 A Visual Development Environment for Multi-Lingual Curricula , T. Dean Hendrix, James H. Cross II, Larry 
A. Barowski, and Joseph C. Teate Auburn University hendrix@eng.auburn.edu Abstract Although a computer 
science curriculum may use a single language as its core language, many curricula require students to 
learn and use multiple languages for course or practicum work. Students benefit from the exposure to 
other languages and other language models. However, a problem arising from the multi-lingual nature of 
a curriculum is the necessity to learn and use different development environments and language iiont-ends. 
GRASP (Graphical Representations of Algorithms, Structures, and Processes) is a software engineering 
tool currently being successfully utilized as a common development environment for the multi-lingual 
computer science curriculum at Auburn University. Besides providing a common front-end for different 
languages, GRASP also provides automated visualization of source code in the form of the control structure 
diagram and the complexity profile graph. This paper describes GRASP and its current use in the computer 
science curriculum. GRASP is freely available via the Internet at the following URLz http://www.eng.auburn.edu/grasp 
 Introduction The selection of a programming language or languages to be used in a computer science curriculum 
is a reflection of the goals of the department. These include pedagogical goals such as using a language 
which directly supports a given paradigm, e.g., choosing Ada 95 for courses which stress object-oriented 
programming, or using a language which is small, powerful, and elegant, e.g., choosing Scheme for introductory 
courses. Also included are pragmatic goals such as using a language which is heavily favored in industry, 
e.g., choosing C for a systems programming course. Permission to make digitakhard copy of part or all 
of this work for personal or classroom use is granted without fee provided that copies are not made or 
distributed for profit or commercial advantage, the copyright notice, the title of the publication and 
its date appear, and notice is given that copying is by permission of ACM, Inc. To copy otherwise, to 
republish, to post on servers, or to redistribute to lists, requires prior specific permission and/or 
a fee. SIGCSE 97 CA, USA 0 1997 ACM 0-89791~889~4/97/0002...$3.50 20 Attempting to satisfy these competing 
goals usually lends to a curriculum in which students are required to learn two or more languages as 
part of their course work, that is, a multi-lingual curriculum. Although there are benefits to requiring 
that multiple languages be used, there are also disadvantages. Students not only have to learn different 
languages, but also different development environments or language front-ends to a compiler or interpreter. 
Anecdotal evidence observed over several years of teaching in a multi-lingual computer science curriculum 
suggests that it is the learning curve associated with the environments, not the languages that is the 
most frustrating to students. Different language environments or front-ends vary widely not only with 
respect to their user interface but also their functionality. Some may provide a graphical user interface 
with advanced features such as syntax-directed editing and pretty-printing while others may be invoked 
only through a terse command-line interface. Some may provide the ability to edit, compile, link, and 
run within the same environment while others may not. Very few language environments provide the user 
with program development and comprehension aids such as automatic software visualization. The GRASP 
Environment GRASP is a software engineering tool originally designed to facilitate the forward and reverse 
engineering of Adn software with control structure diagrams [1,2]. Recently GRASP has been extended to 
provide this same functionality for multiple languages, not just Ada. GRASP is successfully being used 
in the computer science curriculum at Auburn University and is proving to provide some solutions to the 
problems faced by multi-lingual curricula. At the heart of GRASP is the automatic generation of the control 
structure diagram (CSD), a visualization of control structure [l], and the complexity profile graph (CPG), 
a visualization of statement level complexity [4]. It has long been promoted that graphical representations 
of source code can be extremely beneficial aids to program construction and comprehension [5,6], and 
GRASP seeks to provide this benefit to its users. Part of the GRASP project s research is the investigation 
of the usability and usefulness of visualizations such as the CSD and the CPG to professional and student 
programmers alike. In addition to the visualizations, GRASP provides the user with a complete program 
development environment, including a till-featured program editor, compiler, linker, and runtime window. 
Users organize and control a session with GRASP through the Control Panel, shown in Figure 1. Menu options 
on the Control Panel provide functions such as selecting of a printer, accessing the user manual, and 
setting user preferences. Figure 1. GRASP Control Panel The File option allows the user to open one or 
more CSD windows. Each CSD window, as shown in Figure 2, is a full-function text editor with the additional 
capabilities to generate, display, edit, and print CSDs of source code and also perform syntax checks, 
compilations, makes, and executions of the source code. The File and Edit options are similar to traditional 
text editors, complete with cut- copy-paste and undo options. Multiple CSD windows may be opened to access 
several files at once. File names and their associated directory paths are selected under the File option 
and displayed at the top of each window. Each time a source code file is loaded, the CSD is automatically 
generated if Auto (next to Generate CSD on the toolbar) is turned on. If Auto is not turned on, the user 
may elect to use GRASP only as a text editor and not take advantage of the visualization options, or 
generate the CSD and CPG visualizations independently and on demand. Pressing Generate CSD on the toolbar 
(or control-g, or Fl) will immediately render the CSD of the source code in the CSD window. All white 
space and comments are preserved with the exception of leading indentation with is replaced by the CSD. 
If a parse error occurs during CSD generation, the cursor is moved to the highlighted line containing 
the error and a message window appears informing the user of the error, as shown in Figure 4. The CSD 
generation and display cycle is extremely fast, rendering approximately 20,000 line of code per second 
on a Sun UltraSpam. Thus, generating the CSD is also a quick way to check for syntax errors without performing 
a much slower compilation. The net result is that the CSD window can be used in place of a traditional 
program editor to generate, display, edit, and print CSDs and check for syntax errors with virtually 
no overhead; i.e., the CSD is essentially free. Figure 2. GRASP CSD Window View allows the user to select 
any combination (or none) of the following: the standard CSD box notation, alternate CSD program unit 
symbols, and line numbers. The Template option opens a tear-off menu of templates to aid in writing code. 
A selection of one of the template choices will cause a block of text, typically a pre-defined program 
structure, to be pasted into the source code at the point of the cursor. Users can also add any number 
of personal template items to the list. The CSD in Figure 3 is the result of choosing the Ada program 
templates package body , procedure body , and infinite loop. 21 . : -_ Ada block b,DCk Ytth *aClPrattO"l 
case exceptlo" handler functton sgec functton body guarded select If I than If I else for loop inftntte 
mop uhlle loop package spat package body ,,rocsd"re spot procedurs body fW"*l3ZYD"S s*,ect task spec 
task body Figure 3. GRASP s template feature Figure 4. GRASP displaying syntax error Although not yet 
as heavily used as the CSD, the CPG can be generated on demand by selecting the C!PG option on the menu 
bar. The CPG aids the user in relating the complexity of a program to its control flow, when used in 
conjunction with the CSD. Figure 5 shows the CPG view of source code. When both the CSD and CPG are being 
viewed, their displays are kept synchronized. Thus, as the user scrolls through one view the other automatically 
scrolls as well. __----~---~- r7----- ---_I-_____II-I_I_.___ -________.___.___ ---- Figure 5. GRASP 
displaying CPG Many Languages, One Development Environment GRASP is designed around the language independent 
model described in [3]. Thus, the rendering algorithm is independent of a particular source language. 
The CSD window is capable of providing the same functionality for many different languages. The current 
GRASP prototype in full release (Version 4.4) automatically processes both Ada 95 and C source code. 
Figure 6 shows an example of using GRASP with C. Plans include the integration of Java and C++ into the 
tool in a future release. int low, high. middle. CJ I Wharc,Found = 0; low = AMINJ -middle = lov + {high-low) 
/ 2J if ( Ic = .5trCmDfK4y, Atmiddlol) i == 0) low = middle + 1J +tlr&#38;"rn (WhareFound = -1)s r_lr-,..-. 
. --...v. el, j-2 * Fig&#38;e 6. GRASP displaying C code 22 GRASP users are presented with a single 
tool and interface for multiple languages, making GRASP perfectly suited to the needs of computer science 
departments requiring multiple languages, GRASP not only provides a common editing and visualization 
environment for its supported languages, but also provides compilation, make, and execution capabilities, 
GRASP is coupled with the GNAT Ada 95 and GNU C compilers. The CSD window allows the user to invoke gee 
directly for the current program unit to perform a Make or a Compile. When an error is reported by the 
compiler, the offending line of code is highlighted in the CSD window and a message window is raised 
to inform the user of the nature of the error. The user may set compiler flags via the Flag Setup dialog 
box. After making an executable, the user may run the file directly from the CSD window by selecting 
Run, Run Previous, or Run File. Run assumes the user wants to run the executable associated with the 
source file in the current CSD window. Run Previous runs the file that was executed by the most recent 
Run option. Run File opens a file select dialog box and allows the user to run any existing executable. 
The Run Shell Window is opened for input/output to the executing program. This shell runs as a separate 
process to the execution of the user s program cannot affect GRASP. A separate dialog box that is raised 
during a Run option allows the user to send various signals to the executing program (e.g., interrupt 
or kill). The GRASP Model The major system components of the latest full release of GRASP are shown 
in the block diagram in Figure 7. Currently, the entire prototype is written in the programming language 
C and runs under Solar-is. I Motif GUI I GRASPllb UNIX file system source code CSD CPG OD Figure 7. GRASP 
block diagram The user interface was built using Motif and the X Window System. The CSD,gen component 
controls the generation of control structure diagrams, the CPGgen component controls the generation of 
complexity profile graphs, and the ODgen component controls the generation of object diagrams. The GRASP 
library component, GRASPlib, supports coordination of all generated items with their associated source 
code. The current file organization uses standard UNIX directory conventions as well as default naming 
conventions to facilitate navigation among the diagrams and the production of sets of diagrams. The control 
structure diagram generator, CSDgen, inputs source code and produces a CSD. CSDgen has its own parser/scanner 
built using FLEX and BISON, and also includes its own printer utilities. When changes are made to the 
source code, the entire file must be reparsed to produce an updated CSD. A CSD editor, which will provide 
for dynamic incremental modification of the CSD, is currently in the planning stages. The object diagram 
generation component, ODgen, is in the analysis phase and has been implemented as a separate preliminary 
prototype. The feasibility of automatic layout of object diagrams so that they are both useful and aesthetically 
pleasing remains under investigation.  Conclusion GRASP is a software engineering tool providing automatic 
visualization as well as program development environments for both Ada 95 and C, and other languages 
such as Java and C++ are currently being integrated into the tool. GRASP is currently being used in three 
to five computer science classes at Auburn University. Some of the classes require Ada 95 while others 
require C. The use of GRASP in these courses is being studied to assess its overall utility. The local 
version has been instrumented to automatically collect usage data, which will be analyzed to determine 
in what manner and to what degree GRASP and its different features are being used. A survey is planned 
in which students will be asked to indicate how they used GRASP and their preferences for its different 
features and modes. The survey data will be compared to the actual usage data. The results of this study 
will be presented in a future paper. Acknowledgments The GRASP project has been supported, in part, 
by grants from NASA, ARPA, and DISA. References 1. Cross, J. H. Improving comprehensibility of Ada with 
control structure diagrams. Proceedings of Software 23 Technology Conference, April 11-14, 1994, Salt 
Lake City, UT. 2. Cross, J. H., Chang, K. H. and Hendrix, T. D. GRASP/Ada95: visualization with control 
structure diagrams. CrossTalk: Defense Software Engineering Journal, 9, 1, (1996), 20-24. 3. Cross, 
J. H and Her&#38;ix, T. D. Language independent software visualization. P. Eades and K. Zhang (eds.), 
Sojbvare Visualization, World Scientific Publishing Company, (1996), in press. 4. McQuaid, P. A., Chang, 
K. H. and Cross, J. H. Complexity metric to aid Software testing and maintenance. Proceedings of Decision 
Sciences Institute, 2, (1995), 862-864. 5. Scanlan, D. A. Structured flowcharts outperform psuedocode: 
an experimental comparison. IEEE Soj&#38;we, (Sep. 1989), 28-36. 6. Tripp, L. L. A survey of graphical 
notations for program design -an update. ACM Software Engineering Notes, 13,4, (1989), 39-44.  
			