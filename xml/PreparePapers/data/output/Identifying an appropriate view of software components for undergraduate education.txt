
 Identifying an Appropriate View of Software Components for Undergraduate Education Allen Parrish, 
Moderator Joe Hollingsworth Peter Maurer The University of Alabama Indiana Univ. - SE Univ. of Central 
Florida parrish@cs.ua.edu jholly@ ius.indiana.edu maurer@csee.usf.edu Benjamin Shults Western Carolina 
Univ. shults@cs.wcu.edu  Summary Software components have existed in one form or another for a number 
of years. Work in this area can be classified into two broad categories. On the one hand, a number of 
researchers have approached the concept of software components from a first principles perspective, advancing 
ideas regarding what constitutes the ideal component paradigm from perspectives of efficiency, verifiability 
and reusability. On the other hand, recent commercial advances in a number of popular technologies have 
elevated the software component concept into widespread use within the software practitioner community. 
Such technologies include a number of technologies made popular by Microsoft (such as Active-X, COM, 
DCOM and Visual Basic), as well as CORBA and Java Beans. Neither of these perspectives on software components 
has become a standard cornerstone of software development pedagogy. Yet both perspectives may have an 
important role in preparing software developers to build high-quality software in the context of modern 
software development technologies. In particular, teaching students how to design and construct software 
components from first principles provides students with important guidance as to the "right way" to structure 
correct and efficient software systems (i.e., with emphasis on "what" component-based systems should 
contain). On the other hand, teaching students about current commercial component technologies exposes 
students to the important dimension of best commercial practice (i.e., with emphasis on "how" component-based 
systems could be built). The participants of this panel are all actively involved in the development 
of courses and curricula that provide various perspectives on component-based systems. They represent 
both the first principles and commercial perspectives discussed above. Position statements for each of 
the panelists appear below.  Bruce Weide The Ohio State University weide@ cis.ohio-state.edu Allen Parrish 
Teaching popular component technologies to students is only worthwhile if it is accompanied by sound 
conceptual underpinnings. It is inappropriate to simply present the mechanics of the popular technologies 
of the day. We have developed a conceptual framework for teaching students about components in a fashion 
that transcends any particular technology. Our emphasis is on providing students with a broad picture 
of the concept of a "binary" component, while providing exposure to a limited number of technologies 
representative of the current state of commercial practice.  Joe Hollingsworth During the recent past, 
there have been DLLs, DDEs, COMs, DCOMs, VBXs, ActiveX, CORBA, Beans and others. Furthermore, these "standards" 
have themselves been moving targets. My goal as an educator is to provide an environment where my students 
can learn good software design and development principles. It takes an enormous amount of time to create 
a complete and consistent set of class notes, to create a good set of software development labs for the 
students to perform, and to have the software tools in place for doing these labs. If I were to latch 
onto one of these "standards," I would quickly find that I am either using an old version of the standard, 
or it is not the most popular standard of the day. In my opinion many (but not all) of the principles 
that make up good software design are orthogonal to the component architecture. Therefore, to help ensure 
that I achieve my goal (as stated above) I have chosen to stick with a fairly well known commercial programming 
language and use its built-in component-building constructs. When there becomes a clear-cut "winner" 
out of all these other "standards," and when the rate of change settles down, I will then consider modifying 
my approach. 394 Peter Maurer Component-Level programming is a revolutionary method of software development 
that has allowed us to make gigantic strides in reducing development time and costs, improving software 
reliability, and enhancing software reusability. The principles of component-level design transcend any 
single technology. Despite this, ActiveX, because of its overwhelming success, is the only technology 
that needs to be taken seriously. We need to create good, solid courses in Component-Level design, primarily 
based on ActiveX. I believe that Component- Level programming is a fertile field for future research. 
 Beniamin Shults At Western Carolina University, we are increasing our emphasis on design in our curriculum. 
We have a new sophomore-level, required course called Software Development. This course covers some UML, 
and stresses object-oriented design patterns. The course includes a sequence of projects, each building 
on the previous, culminating in projects that involve the construction and integration of JavaBeans software 
components. The students write an entire event system from scratch and must implement many other design 
patterns when appropriate. In the process, we hope students learn, not only when and how to apply design 
patterns, but also to think deeply about object-oriented design. Bruce Weide We explicitly tell our 
students (on day one) that we are trying to prepare them for their 30-year careers, not for their first 
co-op jobs. To deliver on this promise, we must identify and teach the key principles of our discipline: 
established ones that have withstood the test of time and new ones that are likely to do so. It is, therefore, 
premature to consider standardizing on one approach to teaching component-based software engineering 
until we have (1) a set of explicit principles to govern component-based software design, (2) a primafacie 
case that these principles make sense and are truly fundamental, (3) evidence that these principles can 
help guide designers to good designs, and (4) evidence that students can successfully learn these principles. 
After several years of teaching component- based software engineering in our first-year sequence for 
CS majors, we have made good progress on all four of these issues. Ready for prime time? We hope so. 
  
			