
 Virtual Synchronization: Uncoupling Synchronization Annotations from Synchronization Code An Event Model 
for Synchronizing Concurrent Classes Stephan Rcitzner University of Erlangen- Ntirnberg Martensstr. 
1,91058 Erlangen, Germany email: reitzner @in formatik.uni-erlangen.de Keywords: Synchronization, inheritance 
anomaly, concurrent synchronization code and algorithmic code. As this allows a object oriented programming 
complete reconfiguration of the synchronization semantics of the base class without reimplementation 
of its methods, it avoids all known inheritance anomalies. ABSTRACT In the following section, ! analyse 
configurations of some Synchronization of concurrent activities is a major issue of common approaches 
to concurrency control, taking a closer concurrent object-oriented programming languages, as they look 
at the binding between synchronization points and syn- deal with fine grained synchronization involving 
objects and chronization constraints. The results of this analysis lead to the methods, in this paper 
I propose the separation of the synchro- event model introduced in Section 3. Section 4 introduces a 
nization code from the algorithmic code of a concurrent ob- new concurrency control mechanism, which 
is based on the ject, arriving at two objects: one that implements the algorith- event model. Section 
5 shows how inheritance is integrated mic behavior, and one that is responsible for controlling con- 
into the new mechanism using virtual synchronization events. currency. ! introduce an event model to 
carry out the link This paper focuses on the basic mechanisms and on how they between the two objects. 
1 also present a new way of deriving can be used--it does not contain the analysis of how this from classes 
with concurrency control. The inheritance step is mechanism avoids the known inheritance anomalies. A 
paper split into two steps: one for the sequential behaviour and one covering this analysis in detail 
is in preparation. for the concurrency control. This new mechanism together with my event model solves 
many problems of the well- 2 ANALYSIS known inheritance anomalies. A common way to add concurrency control 
to a language is to separate the synchronization description from the sequential 1 INTRODUCTION algorithm 
[4]. The synchronization is not mixed into the code of the methods, so that the reusability of a class, 
for example In concurrent object-oriented environments objects can be ac- by inheritance, is improved. 
The problem with most of these cessed concurrently by multiple threads of control. A concur- implementations 
is that the synchronization constraints arerent programming language has to provide means for prevent- 
still too closely tied to the methods, This arises from the fact ing inconsistent object states in case 
of concurrent invoca-that the binding between methods and synchronization con- tions. This protection 
is called concurrency control, its straints is fixed. It is not possible for subclasses to break these 
implementation is called synchronization code. It is common- bindings to extend or modify the synchronization 
constraints ly accepted that the synchronization code should be separated of a base class, it turned 
out that such a concurrency control from the algorithmic code of an object. The critical point is re- 
tends to increase the number of anomalies that occur when de- connecting the two separated parts. Some 
approaches make a riving from a synchronized class, static connection, which creates inheritance anomalies 
[7] 1 . Other approaches introduce special language constructs to al-  Existing Approaches low certain 
dynamic modifications of this connection in order to avoid certain inheritance anomalies. My approach 
is to in- In the past, many object-oriented synchronization mecha-sert a third layer, which is responsible 
for the reconnection of nisms have been proposed. Two of the major classes of mech- anisms are Accept 
Sets and Method Guards. Many variations Matsuoka and Yonezawa evaluated the discrepancy between of these 
two mechanisms have been published, so it is worth reuse of a class by subclassing and the annotation 
of classes for presenting a short analysis of them, concurrency control. They showed that deriving from 
a syn- chronized class can lead to a reimplementation of algorithmic  The basic idea of Accept Sets 
is to define several abstract behaviour only because of incompatibilities of the concurrency states which 
an object can be in. The object can accept a cer- control. They call this discrepancy the inheritance 
anomaly. tain set of messages (methods) in each of these states. A state transition is initiated whenever 
the execution of a method ission to make digital/hard copy of all or part of this work [br personal or 
changes the state of the object so that the abstract state has to room use is granted without t~e provided 
that copies are not made or be updated. The transitions are part of the methods' bodies. buted for profit 
or commercial advantage, the copyright notice, the title of the This is the reason for the infigxibility 
of Accept Sets. A com- :alien and its date appear, and notice is given that copying is by permission 
of plete separation of synchronization code from algorithmic , Inc. To copy otherwise, to republish, 
to post on servers or to redistribute to requires prior specific permission and/or a t~e. code is not 
realized. Inheriting from a class synchronized by 1998 ACM 0-89791-969-6/98/0002 3.50 Accept Sets is 
often a pain as lots of inheritance anomalies can 655 ...... . ..... ....... . ............ -.: occur. 
Implementations falling into the category of Accept Sets are the Behavioural Abstractim~s in ACT++ [6] 
and Tom- linson's Enabled Sets [9]. The basic idea of Method Guards is that every method of an object 
has a guard controlling the invocations of this method. These guards are synchronization constraints, 
which must be fulfilled to allow invocations of the associated method. Meth- od Guards make a clear distinction 
between algorithmic code and synchronization code. This strict separation makes it much easier to construct 
a synchronization scheme that is much more resistant to inheritance anomalies. Examples of Method Guard 
implementations are the Counter Variables by Gerber [3], Synchronization Counters by Decouchant et.ai. 
[1], ESP by MacHale [4] and Abstractions for Synchroniza- tion by Geib/Courtrai [21. The Synchronizing 
Actions by Neu- sius [8] are a mixture of Method Guards and Accept Sets. Event Driven Synchronization 
Despite the difference between the two mechanisms they have one in common: the synchronization code can 
be split into two different parts: an object global part,  code connected to synchronization points. 
 The global part is defined for the whole object and often rep- resents the state of the synchronization 
code. With Accepl~ Sets the global part is the specification of the abstract states and the specification 
of which methods are executable in a specific state. For Method Guards, the global part of the syn- chronization 
code is defined by the state variables used to model the abstract state on which the constraints are 
defined. Redefining the global part in a subclass is not difficult to im- plement because the global 
part is just one property of the ob- ject. As there is only one global part per object, it is no prob- 
lem to replace it by a redefined version in the subclass. The synchronization points of an object can 
be regarded as events being raised in the object. These events represent the points in the object where 
synchronization interactions occur. The object "generates" an event (request for synchronization) and 
the synchronization code can be seen as an event handler for this specific event. The locations where 
events can occur are spread over the methods of the object. They are either vis- ible at the interface 
or they are part of the code of the method itself. As synchronization code acts like an event handler, 
re- defining such synchronization code in a subclass means in-stalling a new event handler. The difficulties 
are that often the events are not known in the subclass, the events are not acces- sible in the subclass, 
or the binding between the event and the handler code is static in the base class. Each of these situations 
leads to the occurrence of inheritance anomalies when inher- iting from synchronized classes. The events 
of synchronization based on Accept Sets are invis- ible method-dispatch operations and the state transitions 
de- fined in the body of a method. For the subclass the transitions in the base class normally have an 
invisible, untouchable static binding, which breaks inheritance breaks. Several proposals have been made 
to make these transitions visible in a subclass in order to modify them. An example are the Enabled Sets 
by Tomlinson, where each set can be divided into subsets by spe- cial conditions evaluated at runtime. 
656 The events occurring in a system based on Method Guards are the method-entry events of the annotated 
methods. The guards specify the event handler for these events. Early implementa- tions made a static 
binding between the methods and the guards so that subclasses could not modify the bindings. 3 THE EVENT 
MODEL The basic idea of the event model is to develop a synchroniza- tion mechanism based on the event 
view described in the pre- vious section aiming in a more general event model. The underlying runtime 
system is able to raise several events which can serve as access points for synchronization code. A list 
of all events is shown in Table 1. The most important ones Event Event Description Where to annotate 
Entry / entry/exit of a method method declaration Exit Call / outgoing call / return of an method invocation 
Return outgoing call IEntry / internal method enter / exit method declaration IExit ICali / internal 
call / return of an method invocation IReturn internal call Custom .aise a custom event while anywhere 
inside a executing inside a method code block Table I: Available event types are entering and leaving 
a method. The second pair of events (call/return) handles the invocation of a method of another ob- ject. 
Before such an invocation is performed, the system raises a call event to signal the leaving of the object. 
When the invo- cation returns to the object, a return event is raised. The call/ return events can be 
used to implement monitors, which are freed when the thread of control is leaving the current object. 
The four events described so far have an equivalent for inter- nal method invocations, which means that 
a synchronized method calls another synchronized method of the same object. The synchronization code 
might be interested in such invoca- tions to avoid deadlock s or to guarantee consistency of the in- 
ternal state of the object. The last event type is a custom event, which can be inserted anywhere in 
the method body. Custom events can be used to model update operations on the synchro- nization state 
while a method is executing. The last column of Table 1 shows the place where these events are specified 
in the algorithmic code of the object. The meth- od-entry and method-exit events are part of the interface 
dec- laration of the method. The call/return events are declared wi.th the invocations. To preserve the 
normal expression syn- tax of such calls, the annotation is followed by a code block. All invocations 
within this block raise the specific event. The custom event can be inserted anywhere as a separate state-ment. 
With the declaration, a user has to give a unique name to the event. This name can be used to attach 
a handler to this event. An example of a class annotated with event specifications is shown in Program 
I written in an extended Java language. public class Seq_Class ( public void Ml(int a) raiso8 ~ntZ~ 
MIEntry ( ) Exit MIEx£t ( ) ... Meth-Code ... } public void M2(int m) raises Entz~ ~ntz~ () ~£t M2Exlt 
() ( .. Meth-Code ... raises Custom M2Speci&#38;l ( m ); ... Meth-Code ... ) }; Program 1: Annotating 
events of a class The example program contains the following event annota- tions: Method M1 raises 
an event named M1Ent:ry with param- eter a when the method is invoked and an event named M1Exlt when 
the invocation terminates,  Method i'42 raises an event named M2Ent:ry when the method is invoked and 
an event named M2Exit: when the invocation terminates,  Method M2 raises a custom event named M2Special 
with parameter ra when the ra'tses statement in the method body is executed.  The point is that annotations 
specify that an event of a specific type should be raised and that this event has a specific name-- but 
the annotations say neither anything about the action which has to be performed when the event is raised, 
nor any- thing about the binding to an event handler. This information is placed in the event mapping 
of a class. The event mapping specifies the global part of the synchronization as well as the mapping 
of the events to specific event handlers. I had to de- cide whether to put the code for the event handlers 
(synchro- nization constraints) into the event mapping or to introduce another separation step. The advantage 
of puuing the synchro- nization events into the event mapping is that the constraints are located in 
the synchronized class. Reading such a class de- scription would be much easier if the constraints were 
not sep- arated from the mapping. The advantage of separating the ac- tual synchronization constraints 
is reuse of synchronization policies in more than one class so that synchronization class libraries can 
be built, that contain common synchronization policies. 1 considered the latter to be more important 
than readability. This decision lead to the introduction of synchro- nization objects.  4 SYNCHRONIZATION 
OBJECTS The separation of the synchronization constraints from the event mapping and the idea of reusing 
synchronization poli- cies resulted in the modelling of synchronization constraints in a separate object, 
the synchronization object. It is respon- sible for synchronizing the object it is attached to (hereafter 
called the algorithmic object). The synchronization object an- . .... 65"i public class Seq..Class  
( public void Ml(in~ a) ratsel Exit MZExit ( ) t .. Meth-Code ... ) public void M2(int m) :ailel ntz~ 
M~nt~y ( ) ~rAt N2~xtt () { .. Meth-Code ... raises C~sto=tl2Spe¢iaZ ( m ), ... Meth-Code ... S~nc~pptng 
RW ( s~mcelals Rw~n¢ ~ HlZntry (a) -> Rea4ertn~ry ()r M1EX£t () -.~. Rea4e::Bx~Lt ()~ N21m~zy () -> W=£tezln~z7 
()1 N2EXt~ () -> Nr~ezEx.l~ ()~ M28pac;LaZ (t) t Program 2: Annotation of an algorithmic class, Reader~Writer 
synchronization capsulates the abstract state the synchronization constraints operate on and offers 
the event handlers which are called by the event system of the algorithmic object. The event handlers 
are normal methods of the synchronization object and have to meet certain requirements: the event handler 
implements the necessary synchroniza- tion constraints by suspending its own execution until the requirements 
are fulfilled.  the event is accepted if the invocation of the event handler returns.  Given this 
definition of an event handler method, the event mapping of the algorithmic object is trivial: each event 
is as- sociated with its event handler method of the synchronization object. Figure ! describes the relationship 
between events, event mapping and the synchronization object. The code for the algorithmic class in this 
figure is shown in Program 2. It is the same class as in Program 1 except for the additional event algorithmic 
object sync. object event mapping .F-'~~ f " , ! ..... , M|Exit->Re~lerExit ~ 1 ~ II ,,,zs,,oi.-, " 
I I Figure h Synchronization objects and the event mapping ii [u i ~ ,-i1~ ~1 i i mapping. The first 
statement in the event mapping specifies the class which is responsible for synchronizing the algorith- 
mic object. In our example the class RffSyn¢ is used. it is a class with reader-writer semantics which 
could be taken from a synchronization class library, Each time an object of class Seq...Class is instantiated, 
a synchronization object of the specified RffSync class is instantiated and associated with the Seq...Class 
object. The second block specifies the mapping of the events to the event handlers of the synchronization 
ob- ject. In our example method H1 has two events, method entry and method exit, which are mapped to 
the methods Reader- Entry and ReaderExit of the synchronization object. With respect to the implementation 
of the class P, WSync this mapping specifies M1 as a "reader" method. Method M2 has the two entry/exit 
events and one custom event. The custom event is not mapped to any handler method so this event is ig- 
nored. The entry/exit events are mapped to writer methods of the synchronization object saying that M2 
should be a "writ- ing" method.  Implementing Synchronization Classes The next step towards a fully 
functional synchronization mechanism is the specification of synchronization constraints in the synchronization 
class. As synchronization constraints are expressed by normal methods, the role of these methods and 
the environment in which they are executed had to be de- fined. There were several problems which had 
to be dealt with: Concurrency within the synchronization object.  How to specify synchronization constraints. 
 How to block invocations when the corresponding con- straints are not fulfilled.  As synchronization 
is modelled by normal method invoca- tions on the synchronization object, these invocations could happen 
concurrently. The question arising from this is: who is responsible for controlling concurrency in the 
synchronization object? My solution is that these objects are modelled as mon- itors, so no intra-object 
concurrency is possible. The implementation of the synchronization constraints is a procedural implementation 
using low-level synchronization features like locks or mutexes. This is the most powerful mechanism for 
writing synchronization constraints even though it is more complicated than declarative mechanisms. Program 
3 shows the implementation of the RWSync class re- quired in Program 2. This class offers four methods: 
ReaderEntry, ReaderExit, WriterEntry and WriterExit. As it is a Java class, the low-level locking mechanisms 
are encapsulated in the Java class Obj ec t: and so the two objects r lck and w_lck work as locks. This 
class could be integrated into a synchronization class li- brary so that program developers just have 
to annotate their methods with events and write an event mapping for their al- gorithmic class. Inheritance 
can be used to refine the algorith- mic class as well as the synchronization class. My event model simplifies 
the task of deriving a subclass from a concurrent base class. The next section introduces this feature 
and gives an example of how the derived class can refine the synchroni- zation description of the base 
class. 658 public class RWSync extends Sync { protected Object r_ick = new Object (); protected Object 
w_ick = new Object (); protected int hum_reader = 0; protected boolean writer_active = false; public 
void synchronized ReaderEntry () { while ( writer_active ) try {synchronized (rlek) {r_ick.Wait()};} 
 catch (InterruptedException e) {) num_reader++; } public void synchronized ReaderExit () { num_reader-- 
; if (num_reader==0) synchronized (rlck) {w_Ick.Notify()}; } public void synchronized WriterEntry 
() { while ( num_reader>0 ~I writer_active ) try (synchronized (w_lck) {w_ick.Wait());} catch (InterruptedException 
e) (} writer active = TRUE; } public void synchronized WriterExit () { writer_active = FALSE; if 
( num_readers>0 ) synchronized (r_Ick) {r_Ick.NotifyAll()}; else synchronized (w_ick) {w_Ick.Netify()}; 
 } ); Program 3." Implementation for a Reader~Writer synchronization class 5 SEPARATION AND INHERITANCE 
One of the most important issues when defining a concurrent object-oriented language is inheritance. 
A programmer refines or specializes a class by subclassing. When inheriting from a synchronized base 
class, two classes are involved: the algo- rithmic class and the synchronization class. The normal inher- 
itance mechanism must be split into two separate inheritance steps, one for the sequential class and 
one for the synchroni- zation class. This sort of inheritance can be seen as concurrent inheritance. 
Inheritance from the sequential class is used to refine the algo- rithmic behaviour of the algorithmic 
base class (BC). Embed- ding the extensions of the algorithmic subclass (SC) in the concurrent context 
implies that the refinements in the subclass must have their own synchronization code associated with 
the subclass methods. As shown in Figure 2, this is done by deriv- ing another subclass from the associated 
synchronization base class (syncBC), resulting in the synchronization subclass (syncSC). In many synchronization 
schemes the relationships between algorithmic code in the base class and the synchroni- zation constraints 
are fixed, Which is the reason why inherit- ance anomalies occur [7]. Even if the code of the base class 
can be modified, this contradicts the basic object-oriented ide- as of inheritance. The number of inheritance 
anomalies is re- duced by untying the fixed relations between the base classes. base classes ( BC ~~.~yncB¢ 
t I , i i ,   so,as os syoc ¢ ..... t1~ inheritance relation event mapping Figure 2: Inheriting from 
a synchronized class Modifications of the synchronization constraints in the base class can be achieved 
by changing the mapping of base-class events to event handlers. The subclass inherits the event map- 
ping of the base class and can reimplement the mappings which do not fit into the subclass configuration. 
All the map- pings which are not reimplemented remain unchanged. This mechanism is similar to virtual 
method calls and thus the events are called virtual events. The subclass determines which event handler 
must be called; if the subclass does not specify a mapping its base class is searched. Taking the class 
Seq_Class in Program 2 as the base class and deriving a class Sub_Class, we end up with Program 4. We 
add one more method M3 which should be a writing meth- od. In addition, we change the synchronization 
class to the class RWPrioSync which supports priority writers. The method M2 from the base class should 
become a priority-writ- er method. This is expressed by the modified event mapping of the subclass. if 
the synchronization of the subclass can be achieved by the syncBC (Figure 2), the specification for the 
synchronization class can be inherited from the base class. Only the events of the additional methods 
of the subclass must be mapped to any methods of syncBC 6 CURRENT WORK We are currently implementing 
a prototype of the event model and the synchronization mechanism based on this model for the language 
Java. The virtual machine is extended to be able to raise events when the corresponding action is executed, 
in public class Sub_Class extends Seq_Class ( public void M3() raiies'~t~ M3~mtz~ ( ) Exit: M3zxit ( 
) [ ..° Meth-Code ... } SFncMapping RW ( 8yncclaJm RWPrioSync; M2m-try () -> PrioWriteZntry (} ; M2Exlt 
() -> wri~eExlt (); M3Entry () -> WriteEntry (); M3Ex~t () -> WriteZxit (); ); Program 4: htheriting 
from a synchronized class our department we have built a Java virtual machine called MetaXA 2 [5|;it 
offers support for meta programming, such as capturing method invocations or intercepting object creation. 
We are extending the MetaXA virtual machine so that all event classes of my event model can be handled. 
The Java compiler is modified to recognize the language extensions for the event annotations and the 
event mapping. 7 CONCLUSION We introduced an event-based view on synchronization. Each location, where 
synchronization takes place, raises an event which is catched by an event handier. These handlers, which 
represent the synchronization constraints, are implemented in another class called the synchronization 
class. In order to make synchronization more flexible with respect to inherit- ance, and to avoid inheritance 
anomalies, we defined the map- ping of events to event handlers as a separate, "virtual" unit, which 
means that a subclass can rebind another event handler to a synchronization event of a base class. This 
reduces the number of inheritance anomalies, which normally result from a static binding between an event 
and its associated handler. 8 REFERENCES [1 ] D. Decouchant et al.: "A Synchronization Mechanism for 
an Object Oriented Distributed System", 1 lth Int. Conference on Distributed Computing Systems, IEEE, 
1991 [21 J.M. Geib; L Courtrai: "Abstractions for Synchronization to Inherit Synchronization Constraints", 
ECOOP '92, Workshop on Object Based Concurrency and Reuse, 1992 [3] A.J. Gerber: "Process Synchronization 
by Counter Variables", ACM Operath~g System Review, Vol. ! 1 No. 4, pp 6-17, 1977 [4] C. McHale: Synchronisation 
in Concurrent, Object- oriented Languages: Expressive Power, Genericity trod h~heritance. Ph.D., University 
of Dublin, Trinity College, October 1994 [5] J. Klein6der; M. Golm: "MetaJava: An Efficient Run- Time 
Meta Architecture for Java", IWO00S '96 Workshop, Seattle, 1996 [61 D. Kafura; K. Lee: "Inheritance in 
Actor Based Concurrent Object-Oriented Languages". ECOOP '89, Conference on Object.Oriented Programming, 
Cambridge University Press, Cambridge MA, 1989, pp. 131-145 [71 S. Matsuoka; A. Yonezawa: "Analysis of 
Inheritance Anomaly in Object-Oriented Concurrent Programming Languages". In: G.Agha, A.Yonezawa, and 
P.Wegner lEd.I,Research Directions in Concurrent Object-Oriented Programming, The MIT Press, 1993 [8] 
C. Neusius: "Synchronizing Actions", ECOOP '91, European Conference on Object-Oriented Programming, Lecture 
Notes in Computer Science, No.512, Springer- Verlag, Berlin, Heidelberg, 1991, pp. 118-132 {9] C. Tomlinson; 
V.Singh: "Inheritance and Synchronization with Enabled-Sets", Proceedings of the OOPSLA '89, 1989, pp. 
103-112 659 2. MetaXA was fom~.y. ~owu as MetaJava  
			