
 TYPER AN EDITOR FOR THE ONLINE COMPOSITION OF TEXT Permission to make digital or hard copies of part 
or all of this work or personal or classroom use is granted without fee provided that copies are not 
made or distributed for profit or commercial advantage and that copies bear this notice and the full 
citation on the first page. To copy otherwise, to republish, to post on servers, or to redistribute to 
lists, requires prior specific permission and/or a fee.Siggraph 76, July 14-16 Philadelphia, Pennsylvania 
Richard P. Sonderegger, Jr. Engineering Publications Department Data General Corporation Southboro, Massachusetts 
 After experiments with more traditional editors, TYPER, an editor designed specifically for the online 
composition and editing of text, was developed. TYPER uses the 20 lines of a CRT terminal screen to implement 
a window onto the writer's text that can be moved at will. All normal typewriter functions are available 
plus special functions for the easy insertion, deletion, and modification of text. A non-destructive 
cursor can be moved about the screen and acts as a pointer to the text. Any printable character typed 
is immediately placed in the text at the position indicated by the cursor and the change is reflected 
on the screen. Insertion and deletion of text is accomplished with simple keystrokes. After an insertion 
or deletion, any extra space between words and space at the end of short lines is filled by "closing" 
the text. Successive words are placed so that they are separated by one space and extra space at the 
end of a line is filled with words from the succeeding line. Response to TYPER has been excellent. Non-programmers 
and even those with no computer experience learn its use quickly and are loath to go back to typewriters 
after using it. In addition, programmers are using it to edit their program code. 1. INTRODUCTION felt 
that this system should consist of a text entry/editing program, a text formatting The Engineering Publications 
department of Data program, and an output device. The output device General Corporation is charged with 
producing should be capable of producing copy that could go and updating all the hardware oriented manuals 
directly to the print shop. needed to support the products of the Engineering department. This system 
now exists and consists of an editor, called TYPER; a text formatter, called SCRIPT; In the early days 
of the department, the and an online, computer driven phototypesetter. traditional method of producing 
and updating TYPER, SCRIPT, and the phototypesetter manuals was used. Writers wrote their drafts in software 
were written by members of this longhand or on typewriters. These drafts were department. The typesetter 
is a C/A/T (Computer then typed by a technical typist. After two or Activated Typesetter) from Graphic 
Systems three rounds of drafts, the manual was retyped in Incorporated of Hudson, New Hampshire. two-column 
format using a proportional spacing typewriter. Illustrations were then drawn and the This paper will 
discuss the background, evolution, manual was laid out and pasted up by our and planned future of the 
text editor, TYPER. production staff. The completed masters were printed by our in-house print shop. 
Later updates were performed in the same manner. 2. OTHER EDITORS As the company grew and the Engineering 
Rather than reinvent the wheel, we went looking department became more prolific, more manuals for a text 
entry program that would meet our were required. Updates of past manuals to reflect needs. Data General 
offers two editors as part of changes and upgrades to current equipment their standard software: EDIT 
and SUPEREDIT. became more important. It became obvious to all These are character oriented editors and 
operate members of our department that an integrated, in much the same manner as TECO, a product of online 
text processing system was required. We Digital Equipment Corporation. 1 We felt that these editors 
were unacceptable for several reasons. People who are not programmers take a long time understanding 
their operation and are not particularly interested in the intricacies of macros, registers, and holding 
buffers. Relatively simple operations require the writer to type long strings of seemingly unrelated 
characters. Rough text comes out scattered with some long lines and many short lines. Because these editors 
are basically teletypewriter oriented, the writer is forced to pick his way through his text one line 
at a time. It is difficult to point to a character or word and change it without thinking about the primative 
operations required. in short, the operation of these editors is not intuitive. While they are quite 
powerful, the power offered is not of the kind required to compose and edit text. The major design goal 
of TYPER was to make the production and updating of text simple for a non-programmer. This meant that 
as many operations as possible should be accomplished intuitively without requiring the writer to worry 
about the primitive operations involved. Certain text oriented operations such as closing up short lines 
should be performed automatically. The creation of backup files should be accomplished as a matter of 
course by the program. It should be extremely difficult for a writer to inadvertantly destroy his text. 
The next design goal was to use DGC standard hardware. Since all the computers produced by DGC are instruction 
set compatible, we did not have to pick a specific processor. Likewise, all the different online storage 
devices are compatible, so we were at liberty to use whatever tape and disc drives were available. The 
only specific equipment choice that we had to make was what terminal to use. The choice was between Teletypes 
and Pnfoton Vista Standard CRT terminals. We picked the latter on the basis of silence, speed, and the 
fact that a CRT could show the writer exactly what was happening to his text. In addition, an editor 
that used a CRT could use the graphic capabilities inherent in such a terminal to make the editing of 
text an intuitive process. The third design goal was to allow the use of standard software if desired. 
This meant that the format of the file created by the editor had to be the same as those files created 
by EDIT and SUPEREDIT. This would allow the use of operating system utilities to print the files and 
TYPER is written in Data General Extended move them around the system. In addition, the writer would 
be able to use the power of EDIT and SUPEREDIT if he wanted to. ALGOL which is a superset of ALGOL 60. 
TYPER will run on any NOVA or ECLIPSE based computer system that contains at least one disc drive and 
at least 32K words of main memory. The program runs under both operating systems offered by Data General: 
the Real-time Disc Operating System (RDOS) and the Mapped Real-time Disc Operating System (MRDOS). There 
are two concepts which are central to the operation of TYPER. One is the fact that the text displayed 
on the screen is an accurate representation of the text in the computer s memory. Any change made to 
the text in memory is immediately made to the text on the screen. The text stored on disc is not updated 
until termination of the editing session. The second concept is that of closing text. The close function 
reformats text by placing as many complete words as possible on each line. Extra space between two words 
is deleted by sliding the right-hand word left until only one space separates the words. If the left-hand 
word has a full-stop character (period, question mark, exclamation point, or colon) as its last character, 
two spaces are left between those two words. Space created at the end of a line is filled with as many 
complete words from the next line as possible. Text remaining on the next line is slid over to the left-hand 
margin and the process is repeated. This process continues to the end of the current paragraph. A new 
paragraph is assumed to start when a line is found that begins with at least one space. This is an example 
of uric losed text. Note that there are many holes in the text and the Lines are of greatly differing 
length. This line starts a eY paragraph and will not be closed. EXAMPLE OF UNCLOSED TEXT This is an 
example of unclosed text. Note that there are many holes in the text and the lines are of greatly differing 
length. This line starts a new paragraph and vi11 not be closed. EXAMPLE OF SAME TEXT CLOSED TYPER uses 
the 20 lines of the CRT to implement a window onto the text contained in the writer's file. This window 
may be moved up and down over the text as if the writer were sitting at a typewriter equipped with an 
endless roll of paper. The writer has many of the standard typewriter features available such as setting 
and clearing tabs, and control over upper and lower case letters. The position of the cursor on the screen 
reflects the position of the cursor in the text. It is helpful to think of the cursor as analogous to 
the moving type element on a fixed carraige typewriter such as the IBM Selectric. The cursor may be moved 
at will through the use of the standard cursor movement commands (UP, DOWN, LEFT, RIGHT, HOME). Typing 
a TAB character moves the cursor to the next tab stop to the right or to the right margin if there are 
no more tab stops. Typing a RETURN character moves the cursor down one line and over to the left margin 
on that line. Typing a LINE FEED character is equivalent to typing a CURSOR DOWN. If the cursor is on 
the bottom line of the screen when a CURSOR DOWN, RETURN, or LINE FEED character is typed, the 20-line 
window is rolled down one line on the text and the next line of text becomes visible on the bottom line 
of the screen. If the cursor is on the top line of the screen and a CURSOR UP character is typed, the 
20-line window is rolled up one line on the text and the previous line of text becomes visible on the 
top line of the screen. The entire window may be rolled forward or backward 20 lines at a time by typing 
one key combination for forward and a different key combination for backward. As any of the 95 printable 
characters is typed, that character is placed in the text and on the screen at the position of the cursor, 
and the cursor is moved one position to the right. This means that correction of a simple typographical 
error is accomplished by moving the cursor to the mistyped letter and typing the correct letter. Another 
way of correcting a typing mistake is through the use of the RUBOUT key. Each time the RUBOUT key is 
typed, the cursor moves one position to the left and puts a space in the text and on the screen at that 
spot. If the cursor is at the left-hand margin, RUBOUT has no effect. To facilitate touch typing, the 
carraige return function is performed automatically if the user tries to place a character beyond the 
right margin. In addition, if the user tries to type a word that will not fit on the current line, the 
portion of the word already typed will be transferred to the beginning of the next line when the user 
types the character in the margin. Insertion of text is accomplished by moving the cursor to the position 
that is to follow the inserted text and striking the ESCAPE key. The text on that line from the cursor 
position to the right margin and on all succeeding lines is pushed down one line, opening a blank spot 
on the screen. Text can then be typed in the blank spot. Any attempt to move the cursor down results 
in the text being pushed further down making multiple line inserts possible. The insertion is terminated 
by striking the ESCAPE key a second time. At this point, any blank space created by the pushing of the 
text, but not used by the insertion is reclaimed by closing the text from the end of the inserted text 
to the end of that paragraph. Deletion of text is accomplished by positioning the cursor at one end of 
the block of text to be deleted and striking a key combination. The writer then moves the cursor to the 
other end of the block and strikes the same key combination. The text in the block, including the end 
points, is deleted and space created is reclaimed by closing the text from the beginning of the space 
to the end of the paragraph. 4.1 Other Functions In addition to the insert and delete functions, various 
other functions which operate with a single keystroke are available to aid the writer in the editing 
of text. The single character insert function slides all characters on the line, from the present position 
of the cursor to the right-hand margin, one character to the right and places a space character at the 
present cursor position. The cursor does not move. The text is not closed. If the character at the right-hand 
margin is not a space, this function will have no effect. This function will not slide a word to the 
next line. This function is obviously useful for inserting a single character in a line, but its main 
use is in editing tables. Because the normal insert function closes the text when it is done, a carefully 
constructed piece of tabular text can be altered drastically by doing an insert in the middle of the 
table. The character insert function can be used in a table without worrying about the side effect of 
closing the text. The single character delete function slides all characters on the line, from the character 
one position to the right of the cursor to the right-hand margin, one character to the left. A space 
is placed in the vacated position at the right-hand margin. The cursor does not move. The text is not 
closed. Besides deleting a single character from a line of text, this function is useful when editing 
tables for the same reason as insert character. The duplicate field function copies the contents of the 
previous line, from the current horizontal position of the cursor to the next tab stop, onto the current 
line. The cursor moves to the next tab stop. The text is not closed. Many times when constructing tables, 
the same entry occurs on successive lines. This function makes typing these entries time after time unneccessary. 
 4.2 Input/Output TYPER is a paged editor. That is, when editing a file, the writer reads a page of text 
from the input file into main memory, modifies it, and then writes it out to the output file before reading 
in the next page. Single keystroke commands are available to read a page, write a page, get the next 
page (actually a write followed by a read), write a partial page, and transfer the remainder of the input 
file to the output file. The main memory buffer in TYPER is big enough to hold 120 lines of text. During 
reading, a page is considered to end when a line is read into line 60 or line 120 or a form feed character 
is encountered in the text; whichever comes first. During writing, a form feed is automatically placed 
at the end of each page unless the writer directs otherwise. The fact that the buffer is big enough to 
hold two pages allows the editing of text that crosses page boundries. The ability to write partial pages 
and to hold more than one page in main memory allows page boundries to be changed easily. 5. PLANNED 
ENHANCEMENTS The current version of TYPER is not the final one. We are still learning about what capabilities 
should be embodied in an editor that is oriented toward the composing and editing of text. A new version 
is currently under development and will be, we feel, significantly better than the current one.  5.1 
Endless Scrolling Because the current version of TYPER is a paged editor, once a page has been edited 
and written out of memory, it cannot be recalled without copying the remainder of the input file to the 
output file, ending the current editing session, and beginning another editing session from the beginning 
of the file. We plan to implement a mechanism whereby the writer can scroll forward and backward throughout 
his file without regard as to whether or not the section of text that he wants is currently in main memory. 
This will be done by building two "stack files" on disc and keeping only a small amount of the text in 
main memory at any one time. The amount of text kept in main memory will be equal to 3 screen's worth 
of text. For a 20-line display, this will be 60 lines of text and will be, in effect, a 60-line window 
onto the text file. The two stack files will be a "top stack" and a "bottom stack" and will be used to 
ensure that the 20 lines currently displayed on the screen are the middle 20 lines of the larger 60 line 
window. At the beginning of an editing session the top 20 lines of the memory window will be blank and 
the bottom 40 lines will be filled with the first 40 lines of text from the input file. If the writer 
moves the screen window up on the memory window, text is rolled off the bottom of the memory window into 
the bottom stack and the remaining text is moved down. If the writer moves the screen window down on 
the memory window, text is rolled off the top of the memory window into the top stack and the remaining 
text is moved up. The space created at the bottom of the memory window is filled with text from the bottom 
stack if there is any or with text from the input file.  All disc accessing and text moving will be 
performed after the screen is updated in order to "hide" this processing time. By keeping 3 screen's 
worth of text in main memory, the writer can slide the screen up or down a full 20 lines without having 
to wait for text to be rolled in and out of memory. If, after other enhancements have been added, we 
find that there is some main memory space still available, the size of the memory window will be expanded 
and disc accessing will only occur when the screen window moves on the memory window such that there 
is not a full screen's worth of text both above and below the screen window. Enough text will be rolled 
so that the screen window is in the middle of the memory window.  5.2 Search Facility Another major 
enhancement will be the addition of a search facility. We have found that writers do not keep track of 
how many pages there are in their files or of where the pages start and end. The task of searching visiually, 
page by page, for a desired word or phrase is a tedious one. Therefore, the ability to search for a string 
is a must. This facility will be implemented by adding a command mode to TYPER. A single keystroke will 
put the program in command mode. The cursor will move to the first position of the last line on the screen 
and that line will become blank. This will be the only time that the appearance of the screen does not 
reflect the state of the text. The writer will then type the command for search followed by the string 
that he wants to search for, followed by a carraige return. The cursor will return to the first position 
on the line and the search will begin. The search will begin at the point where the cursor was before 
the writer entered command mode and will continue until the string is found or until the end of the file 
is reached. If the string is found, the program will leave command mode, the screen window will be placed 
on the text so that the line containing the string is in the middle of the screen, and the cursor will 
be placed on the first character of the string. If the string is not found, the program will leave command 
mode, the screen window will be placed on the text so that the last line of text in the file is in the 
middle of the screen, and the cursor will be placed on the last character of that line. A message will 
be displayed in the blank space beneath the last line to the effect that the search was unsuccessful. 
 5.3 Move Facility The third major enhancement will be the addition of a facilty for moving blocks of 
text. Many times, the text that has been written is good, but the paragraphs are in the wrong order. 
Instead of having to retype the paragraphs in the right order, we want to have a facility for moving 
text around that makes changing the order of paragraphs as easy as changing a word. A single keystroke 
will be used to define the endpoints of a block. The block will include the endpoints. At any time, only 
one block may be defined. Once the block is defined, the writer may either move or copy the text to another 
point in the file, or he may move or copy it to a disc file. A move will transfer the text, delete it 
from the source position and close the created space. A copy will transfer the text, but leave it unchanged 
in the source position. To transfer the text to another point in the file, the writer will move the cursor 
to the position that is to follow the transferred text and strike one key combination for a move and 
a different key combination for a copy. The result at the destination point will be the same as if the 
text was inserted using the regular insert function. To transfer the text to a disc file, the writer 
will enter command mode, type the command followed by the name that the file is to receive, followed 
by a carraige return. After the transfer, the program will leave command mode and the cursor will return 
to its former position. To transfer text from a disc file to a certain point in the text, the writer 
will move the cursor to the position that is to follow the transferred text and then enter command mode. 
He will then type the command followed by the name of the desired file, followed by a carraige return. 
The result at the destination point will be the same as if the text was inserted using the regular insert 
function. After the transfer, the program will leave command mode and the cursor will return the point 
following the insert. 5.4 Other Additions The creation of a command mode brings up several interesting 
possibilities. Because a whole line is available and the procedure for entering and leaving command mode 
is well defined, we can probably do some things that could not be done before when all commands had to 
be single keystrokes A change command or iterative replace string for Second, programmers are using TYPER 
to string seems to be a logical outgrowth of the produce and update program code. They like the search 
facility. ability to see their changes in the context of the RDOS and MRDOS allow a program to suspend 
itself and return to monitor level with the ability to later re-enter the suspended program at the point 
at which it suspended itself. Implementing this in TYPER would allow the writer to leave an editing session, 
and do something else without having to begin another session from the beginning of the file. 5.5 New 
Language In the time since TYPER was originally written, Data General has implemented an in-house development 
language, called PL/N, that is a subset of PL/I. This language has many improvements over Data General 
Extended ALGOL in the area of increased run-time speed and decreased main memory requirements. We hope 
that gains in these areas can be translated into further extensions to TYPER and, therefore, to further 
benefits to our writers. 6. SIDE EFFECTS AND COMPLAINTS Two unexpected side effects of TYPER have been 
observed over the past two years. First, we have found that writers, after using TYPER for only a couple 
of days, have difficulty using regular typewriters. They get so used to the automatic carraige return 
that they constantly type right into the margin when confronted with a typewriter. The writers also find 
that the ease with which typographical errors can be changed is sorely missed. surrounding code. They 
also like the ease with which typographical errors are corrected. The major complaints which have been 
registered by TYPER users are: the inability to go backward in a file, the lack of a search command, 
the inability to move blocks of text, and the damage done to tables by the close function. The first 
three problems will be fixed in the next version of the program, but the problem of closing text within 
tables will remain. We feel that this is a trade-off and is something that the writers can live with. 
 7. CONCLUSIONS We believe that the development of TYPER has been worthwhile. Not only can programmers 
quickly learn the commands and functions, but non-programmers are able to use the program effectively 
with a minimum of training. Even though we have not advertised the program, word has carried through 
the company and we get requests daily for copies of it. The use of TYPER has lowered the time required 
to produce our documents. Writers are able to compose text more quickly and the drafts are more error-free 
due to the ease with which text may be produced. The use of TYPER has also increased the quality of our 
documents. Writers are more prone to massage their text because it is easy to do so. Since the mechanics 
of changing text are no longer difficult, the writers are much more prone to work over their text until 
is is "just right". 
			