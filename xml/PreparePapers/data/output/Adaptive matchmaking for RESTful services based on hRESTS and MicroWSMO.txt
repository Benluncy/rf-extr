
 Adaptive Matchmaking for RESTful Services based on hRESTS and MicroWSMO Ulrich Lampe Stefan Schulte 
Melanie Siebenhaar ulrich.lampe@kom.tu-stefan.schulte@kom.tu-melanie.siebenhaar@kom.tu­darmstadt.de darmstadt.de 
darmstadt.de Dieter Schuller Ralf Steinmetz dieter.schuller@kom.tu-ralf.steinmetz@kom.tu­darmstadt.de 
darmstadt.de Multimedia Communications Lab (KOM) Technische Universität Darmstadt Rundeturmstr. 10, 64283 
Darmstadt, Germany ABSTRACT Matchmaking i.e., the task of .nding functionally suit­able service o.ers 
based on a service request has only been addressed in the context of WS-* Web services. How­ever, RESTful 
services are gaining increasing attraction and have been adopted by major companies, thus increasing 
the need for suitable matchmaking solutions. This paper in­troduces XAM4SWS, an adaptive matchmaker for 
seman­tic Web services that supports multiple service description formats, including hRESTS and MicroWSMO 
for RESTful services. XAM4SWS adapts existing methodologies from WS-* matchmaking and extends them through 
the inclu­sion of REST-speci.c service features. A prototypical im­plementation of the matchmaker is 
evaluated with respect to multiple information retrieval metrics using an adapted semantic Web service 
test collection. Categories and Subject Descriptors H.3.3 [Information Search and Retrieval]: Retrieval 
models  General Terms Algorithms  Keywords service, semantic, matchmaking, REST, MicroWSMO 1. INTRODUCTION 
In the past few years, the paradigm of Service-oriented Architecture (SOA) has received signi.cant attention 
from both practitioners and researchers. At the core of SOA are Permission to make digital or hard copies 
of all or part of this work for personal or classroom use is granted without fee provided that copies 
are not made or distributed for pro.t or commercial advantage and that copies bear this notice and the 
full citation on the .rst page. To copy otherwise, to republish, to post on servers or to redistribute 
to lists, requires prior speci.c permission and/or a fee. WEWST 10, December 1, 2010, Ayia Napa, Cyprus 
Copyright 2010 ACM 978-1-4503-0238-8/10/12 ...$10.00. services that represent certain (business) functionalities 
and are exhibited through a well-de.ned interface. Key char­acteristics of services include interoperability, 
composabil­ity, and loose coupling. That is, .ne-granular services can be combined into more powerful, 
coarse-granular composite services, and individual services in such composition can be substituted through 
functionally equivalent counterparts [1]. In the envisioned Internet of Services (IoS), service con­sumers 
will be able to purchase services from providers by the means of public marketplaces in order to realize 
cer­tain IT functionality. Such a scenario requires e.ective and e.cient matchmaking, i.e., the ability 
to identify suitable service o.ers based on functional requirements, as de.ned in a service request. 
Today, Web services have become the de facto implemen­tation of the SOA paradigm. Web services are based 
on a stack of so-called WS-* standards, most importantly the SOAP communication protocol and the Web 
Services De­scription Language (WSDL). Matchmaking for WS-* Web services has been a prominent .eld of 
research recently [2 6]. It is mostly based on the notion of semantic Web services (SWS), i.e., syntactic 
service descriptions that have been augmented with machine-processable semantic information [7, 8]. Meanwhile, 
in many application scenarios, Web ser­vices are perceived as too complex and heavyweight. As a result, 
so-called RESTful Web services have gained increas­ing interest. RESTful Web services constitute a lightweight 
alternative to SOAP-based Web services. They are based on standard Web technologies, such as Hypertext 
Transfer Protocol (HTTP), Uniform Resource Identi.er (URI), and Extensible Markup Language (XML) [9]. 
RESTful services have been adopted by major companies, such as Google, Facebook, or Flickr. However, 
the problem of matchmaking has not been addressed for RESTful services so far, notably due to a lack 
of common description standards. In the work at hand, we present XAM4SWS ( Cross-Architectural Matchmaker 
for Semantic Web Services ), an adaptive matchmaker that supports semantic matchmaking for both SOAP-based 
and RESTful Web services. It extends LOG4SWS.KOM, a matchmaking approach we presented in [6], to support 
the HTML for RESTful Services (hRESTS) description format in conjunction with MicroWSMO seman­tic annotations 
[10, 11]. XAM4SWS uses a generic founda­tion which is complemented by speci.c components for each supported 
service description format. The remainder of this paper is structured as follows: In Section 2, we brie.y 
introduce description formats for Web services. A focus lies on the hRESTS and MicroWSMO formats for 
RESTful services. This provides the background for Section 3 which discusses related work. In Section 
4, the matchmaking algorithm in XAM4SWS is introduced in detail. In Section 5, we present the evaluation 
results for XAM4SWS. Section 6 concludes the paper and provides a brief outlook on future research. 
2. (SEMANTIC) SERVICE DESCRIPTION The issue of (machine-readable) description of SOAP-based services 
has been a .eld of research for almost a decade now. The most popular result is WSDL, a World Wide Web 
Consortium (W3C) speci.cation; its latest version is WSDL 2.0 [12]. WSDL allows to syntactically describe 
a Web service. Both standards have been augmented by the Semantic Annotations for WSDL and XML Schema 
(SA-WSDL) recommendation [13]. SAWSDL constitutes a light­weight framework to add semantic annotations 
to syntactical WSDL .les. Matchmaking for SOAP-based Web services is often based on SAWSDL documents 
[2]. With respect to RESTful services, there exists no com­monly accepted description standard yet [9]. 
RESTful Web services are often described using non-normative, human­readable documents, e.g., in the 
form of Web pages [11]1 . Fairly recently, however, two machine-readable service de­scription formats 
have been proposed. Web Applications Description Language (WADL) constitutes a full-.edged ap­proach 
that adapts some of the ideas of WSDL, most notably the utilization of XML Schema (XSD) for the description 
of input and output messages [14]. However, WADL only pro­vides syntactic service descriptions and does 
not de.ne any semantic annotation mechanism to date (an exception is the ability to leverage SAWSDL for 
the annotation of XSD def­initions within a WADL document). In contrast to WADL, hRESTS provides a lightweight 
mechanism to augment existing service descriptions. Service descriptions in hRESTS are based on textual 
descriptions of RESTful Web services in the form of Hypertext Markup Language (HTML) Web pages. hRESTS 
assumes a minimal service model, which essentially de.nes a service as a set of operations that in turn 
relate to a distinct set of input and output parameters [10]. For each of these service compo­nents and 
their related attributes, hRESTS de.nes classes. These classes can be used within an (existing) HTML 
page, thus marking certain elements in that page as speci.c ser­vice component types. Thus, hRESTS provides 
a machine­readable service description within a human-readable docu­ment. Due to the fact that a multitude 
of plain HTML ser­vice descriptions already exists on the Web, we believe that hRESTS currently constitutes 
a more practical approach than WADL. Thus, the matchmaking approach presented in this paper focuses on 
hRESTS. As such, hRESTS documents only carry syntactic infor­mation. In order to include semantic information, 
the use of the MicroWSMO microformat has been proposed [10,11]. In accordance with the SAWSDL speci.cation, 
MicroWSMO 1E.g., Flickr s App Garden http://www.flickr.com/ services/api/ introduces three types of semantic 
annotations. Most im­portantly, the model construct adds a link to one or more arbitrary semantic concepts, 
which semantically describe a service component. The lifting and lowering constructs de­.ne how to transform 
data. For an overview of the hRESTS component model, we refer to Kopeck`y et al. [10]. In order to facilitate 
the automated processing of seman­tic information, we assume that all referenced concepts are represented 
in the Web Ontology Language (OWL); more speci.cally, OWL s description logic (DL) variant. This is a 
common assumption in the context of matchmaking. 3. RELATED WORK Matchmaking for semantic Web services 
(SWS) has been a dynamic .eld of research in recent years, resulting in the creation of numerous approaches 
for di.erent Web service description standards. The wide range of participants in the annual International 
Semantic Service Selection (S3) Con­test resemble this variety [2]. However, to the best of our knowledge, 
no speci.c matchmaking approach for hRESTS has been proposed so far. XAM4SWS builds on a match­making 
approach we presented previously, LOG4SWS.KOM, which operates on service descriptions in the SAWSDL for­mat. 
LOG4SWS.KOM [6] is based on traditional subsump­tion matching, as introduced by Paolucci et al. [8]. 
How­ever, it maps the discrete Degrees of Match (DoM) into nu­merical equivalents using an Ordinary Least 
Squares (OLS) estimator to allow for a combination with additional numer­ical similarity measures. As 
proof-of-concept, the inverse path length between two classes in an ontology is utilized. The approach 
is complemented by a WordNet-based fallback strategy. The general applicability of adaptation mechanisms 
to SWS discovery has been demonstrated by Kiefer and Bern­stein [15]. Their approach, iSPARQL, implements 
a query mechanism for OWL-S based service descriptions based on the SPARQL Query Language for RDF (SPARQL). 
Kiefer and Bernstein apply both string-based and vector-based stra­tegies for the determination of similarities. 
The optimal ag­gregation of these similarity measures over a whole service is consecutively determined 
using various machine learning techniques. Di.erent SWS description formats have been addressed by the 
MX family of matchmakers by Klusch et al. [3, 4]. OWLS-MX is a hybrid matchmaker for OWL-S based ser­vice 
descriptions. It combines logic-based matching with ad­ditional similarity metrics from the .eld of text 
information retrieval (IR). SAWSDL-MX, which operates on SAWSDL descriptions, follows a comparable approach 
to OWLS-MX. In its latest version, SAWSDL-MX additionally features a component for structural analysis 
of WSDL documents and applies machine learning techniques for an optimal aggrega­tion of the applied 
similarity measures. Battle and Benson [16] introduce the Semantic Bridge for Web Services (SWBS). It 
provides means to access services and their underlying data in a uni.ed manner using an ex­tended version 
of SPARQL. For that matter, SWBS wraps existing Web services based on their WSDL or WADL de­scription 
.les. SWBS automatically distributes single queries across multiple endpoints and thus o.ers rudimentary 
ser­vice discovery and composition features. However, its match­making capabilities are limited to semantic 
information. In summary, XAM4SWS adapts many ideas from our pre­viously presented matchmaker LOG4SWS.KOM. 
Most no­tably, this concerns the mapping of discrete DoMs into nu­merical equivalents using OLS. In contrast 
to other match­making approaches, XAM4SWS uses syntactical informa­tion only as a substitute, not as 
a complement to semantic information. Our matchmaker further leverages the spe­cial features of hRESTS 
service descriptions, e.g., the ex­plicit de.nition of operation types. By supporting multi­ple service 
description formats, including (SA)WSDL and hRESTS, XAM4SWS permits the discovery of services across 
architectural boundaries.  4. MATCHMAKING ALGORITHM 4.1 Operations-focused Matching The matchmaker 
we previously presented for SAWSDL, LOG4SWS.KOM, applies the notion of operations-focused matching [6]. 
This approach is based on the observation that operations provide the essential functionality a service 
requester is looking for. Thus, similarity values from all levels of abstractions in a service are aggregated 
at the op­eration level. Subsequently, pairs of operations are matched, regardless of how these operations 
are organized into inter­faces. In XAM4SWS, the same notion is applied. In fact, the approach is even 
more intuitive, because hRESTS does not provide an equivalent to SAWSDL s interface component. As a substitute, 
we utilize the information available from the topmost level of abstraction in hRESTS documents, namely 
the service level. An overview of the matchmaking process is provided in Figure 1. For each pair of operations 
in service request and o.er, XAM4SWS determines the similarity for the respective input (simin), output 
(simout), native operation (simop), and service (simser) levels. These individual similarities are combined 
using the weights win, wout, wop, and wser, result­ing in an aggregated similarity value simagg for each 
pair of operations. Formally expressed, with both a and b denoting an operation, the following holds: 
wser + wop + win + wout = 1 (1) simagg(a, b)= simser(a, b) * wser + simop(a, b) * wop  (2) + simin(a, 
b) * win + simout(a, b) * wout Based on these aggregated similarities, the overall service similarity 
simov is given by computing an optimal match­ing of operations. Formally, let A and B be the sets of 
operations in the service request R and service o.er O re­spectively. Let xab be a binary variable, indicating 
whether a . A has been matched with b . B. The overall service similarity is computed as follows: 1 
simov(R, O)= *xab * simagg(a, b) (3) |A| a.A,b.B The matching process for sets of components (i.e., op­erations, 
inputs, and outputs) is conducted using bipartite graphs, as initially suggested by Guo et al. [17] and 
further elaborated by Bellur et al. [18]. The sets of components from service request and o.er each constitute 
a partition of nodes in the graph. Each node in the .rst partition is connected to each node in the second 
partition through a weighted edge. The edge weight corresponds to the simi­larity between the two components. 
Using the well-known Kuhn-Munkres algorithm [19], optimal 1-to-1 assignments of nodes are determined. 
Because cardinalities may di.er between the two partitions, we apply an adapted version of the algorithm 
by Nedas that may potentially leave some operations unmatched [20]. Following the matching process, the 
edge weights of all matched edges are summed up and divided by the cardi­nality of the original component 
sets. If these cardinalities di.er, the following strategy is employed: In general, the  Figure 1: Matchmaking 
Process  cardinality of the service request s component set is deci-the two concepts A and B in an ontology. 
Furthermore, let sive. In the case of inputs, however, the cardinality of the L be the level on which 
the matching of components that service o.er s component set is decisive. Thus, if an o.er point to these 
concepts is conducted. Then, the similarity lacks requested operations or outputs, its overall similarity 
cs(A, B) between A and B (and thus, the two underlying diminishes. The same is true if an o.er requires 
more inputs components) is given by: than the request provides. This procedure does not exclude . .. 
. . .. any service o.ers because of a mismatch in the number of op­eration or parameters a priori. Instead, 
these o.ers are im­plicitly punished by a reduction in similarity. As tie-breaker dL.exact ifA = B dL.super/P 
L(A, B) ifA . B dL.sub/P L(A, B) ifA .B cs(A, B)= (6) for sorting service o.ers with identical overall 
similarity, we use the alphabetical order of their associated hRESTS de­scription URIs.  4.2 Assignment 
of Similarities The shortcomings of traditional subsumption reasoning in the context of matchmaking have 
been extensively dis­cussed in our previous work on LOG4SWS.KOM [6]. In the same work, we presented and 
successfully evaluated a novel approach which maps discrete DoMs onto numerical equiv­alents. The same 
procedure is applied in the work at hand. We will thus limit our discussion to the most fundamental aspects 
and refer the interested reader to our previous work for additional details. Essentially, subsumption 
matching based on discrete DoMs, as suggested by Paolucci et al. [8], and applied in similar form in 
related work [3, 4], has three signi.cant disadvan­tages. First, traditional DoMs are discrete in nature 
and thus only permit a coarse-grained ranking of services. Sec­ond, discrete DoMs are non-numerical, 
which complicates the combination with complimentary continuous numerical measures. Third, the ranking 
of DoMs is based on certain assumptions that do not necessarily hold true in every ap­plication domain. 
Our approach speci.es four generic types of matches bet­ween semantic concepts. These DoMs can be applied 
to any service abstraction level and type of parameter. Given two arbitrary semantic concepts, A (from 
the service request) and B (from the service o.er), the DoM is de.ned as dL.fail else The task of de.ning 
numerical equivalents for DoMs is am­bigious and would require signi.cant manual tuning e.ort. To address 
this problem, we apply an OLS estimator for the determination of optimal numerical DoM equivalents. The 
process is based on the notion that a dependent vari­able y a.b corresponding to the similarity of two 
operations, L a and b, on a certain matching level, L, can be derived through the linear combination 
of a set of independent vari­ a.b ables xL.D, corresponding to the frequency of a certain DoM D when 
matching a and b on that level. That is, we assume that the weighted linear combination of the di.erent 
DoM s frequencies predicts the similarity of two operations. The OLS estimation is independently conducted 
for each matching level. That is, the numerical weights di.er for inputs, outputs, operations, and services. 
As training data, a set of services is required along with a prede.ned similarity (or relevance) rating. 
A subset of a test collection, such as employed in the evaluation of XAM4SWS (cp. Section 5.1), ful.lls 
this requirement. In the training phase, XAM4SWS computes similarities between all pairs of operations 
in all service requests and o.ers. For each pair and each abstraction level, it stores the types of subsumption 
matches in the assigned components along with the path length. XAM4SWS then determines the prede.ned 
similarity between the two operations (or, if the similarity is unavailable at the operations level, 
of the parent services). The prede.ned similarity rating constitutes the DoM(A, B)= . .. . . .. exact 
ifA = B vectors of predictors (yser, yop, yin, and yout) for the OLS process. Each entry corresponds 
to a pair of operations. super ifA . B (4) The design matrices (Xser, Xop, Xin, and Xout) are de­ ifA 
.B sub rived in the following manner: Each pair of operations yields fail else We map these four discrete 
DoMs onto a continuous nu­merical scale, ranging from 0 (no similarity at all) to 1 (perfect similarity). 
This approach allows the combination with other numerical measures and a much more .ne-grained ranking 
of services. On each individual matching level L . {iface, op, in, out}, each DoM D .{exact, super, sub, 
fail}is assigned a numerical equivalent, dL.D, in the range [0; 1]. Formally, dL.D . [0; 1] . L .{iface, 
op, in, out}, D .{exact, super, sub, fail} (5) To allow for a more .ne-grained similarity assessment, 
in the case of a super or sub match, the DoM s numerical equiv­alent is merged with the path length between 
two concepts. One intuitive approach to conduct such merging is simply dividing the numerical equivalent 
by the path length, based on the assumption that the similarity between two concepts (linearly) shrinks 
with their distance in an ontology. Formally, let PL(A, B) denote the shortest path between one row with 
four entries, where each entry corresponds to the frequency of a certain type of DoM with respect to 
all matched components on a certain level. In detail, the fre­quency count is incremented by 1 for an 
exact and fail match between two components. For super and sub matches, it is incremented by 1 divided 
by the path length. The row is .nally divided by the total number of matched components on the current 
level. Given a design matrix and vector of predictors, the stan­dard OLS estimator can be applied in 
the following manner on each matching level L: -1 ßL =(XLXL)XLyL (7) ßL corresponds to the optimal 
estimate of numerical weights. To derive the actually utilized vectors of weights, dL, all en­tries are 
mapped to the range [0; 1]. For that matter, the minimum value in the vector is added to all entries. 
Then, all entries are divided by the new maximum value. This en­sures that all similarity values will 
also be in the speci.ed range, i.e., [0; 1].  4.3 Consideration of REST-speci.c Features In contrast 
to WSDL, OWL-S, or WADL, the hRESTS format provides a rather rudimentary service description. This makes 
it di.cult to identify speci.c features which can be exploited in the context of matchmaking. However, 
in hRESTS, each invocation of an operation is associated with a command in the underlying HTTP trans­fer, 
the so-called HTTP verb. These HTTP verbs are POST, GET, PUT, and DELETE. With respect to RESTful ser­vices, 
the verbs can be mapped to the four elementary op­erations of data storage or retrieval systems, namely 
Cre­ate, Read, Update, and Delete (the so-called CRUD opera­tions) [16]. Thus, in theory, operations 
that exhibit a di.er­ent HTTP verb for invocation can be deemed incompatible, resulting in a similarity 
value of 0. Unfortunately, the map­ping between HTTP verbs and CRUD operations is non­normative, and 
its strict application can or will not always be enforced by providers of RESTful services. A common 
exception in practice is, e.g., the exchangeable use of POST and GET. Additionally, the coherent use 
of HTTP verbs is complicated by technical restrictions, e.g., the limited size of GET requests or the 
.ltering of DELETE requests through .rewalls. To account for these de.cits, we allow for the ex­plicit 
speci.cation of verb similarities between each pair of the four aforementioned verbs. Verb similarities 
are numer­ical values ranging from 0 to 1. This allows for the speci.­cation of (relative) compatability 
between operations types. The verb similarities are regarded in the determination of operation similarities. 
That is, the initially determined sim­ilarity value is multiplied with the verb similarity. An ex­ample 
con.guration of verb similarity values is depcited in Table 1. Another potential source of information 
in an hRESTS document are the resources (also referred to as HTTP nouns). These resources are speci.ed 
using Uniform Resource Identi­.ers (URI), e.g., http://quotes.provider.ex/stock/XYZ. Such resource URI 
may potentially prove useful in the match­making process. We refrain from the utilization of resources 
in XAM4SWS, however, because we assume that the un­derlying semantics of any resource should be speci.ed 
using the model attribute of the corresponding parameters. This is based on the notion that semantic 
information (as speci.ed in a model attribute) provides more certainty than purely syntactical information 
(such as a resource URI). Finally, we would like to discuss two possible lightweight extensions to the 
hRESTS format that may be valuable in the matchmaking process. As Pautasso et al. state, REST­ful services 
encode their payload in various formats, e.g., Plain XML, Java Script Object Notation (JSON), or Mul­tipurpose 
Internet Mail Extensions (MIME). The explicit speci.cation of the payload format would introduce the 
po­tential to .lter service o.ers for a speci.cally desired format. Table 1: Examplary Verb Similarity 
Values POST Request Verb GET PUT DELETE POST GET PUT DELETE 1 0.8 0.5 0 0.8 1 0.2 0 0.5 0.2 1 0 0 0 0 
1 O. er Verb MIME is of additional elevated interest, because it speci.es an Internet Media Type (also 
referred to as content type). This content-related information would also allow to .lter service o.ers, 
given that a speci.c type of content such as an image or a Portable Document Format (PDF) docu­ment 
 is requested. Accordingly, we suggest to augment hRESTS descriptions with a payload format and content 
type attribute for each operation. 4.4 Fallback Strategy and Caching One potential problem in matchmaking 
is the lack of se­mantic annotations or the inability to process them. To address this issue, XAM4SWS 
implements a basic fallback strategy. It determines the similarity between two com­ponents based on their 
associated concept (or component) names using the WordNet ontology of the English language [21]. For 
that purpose, names are split into tokens using common separators, such as dash, underscore, and camel-Case. 
Tokens that do not correspond to words in WordNet are recursively scanned for meaningful strings, again 
with the substrings being validated against WordNet. The re­sulting sets of words from the service request 
and o.er com­ponent constitute partitions of a bipartite graph. The edge weights are assigned using the 
inverse distance of a pair of words in WordNet. The overall similarity of two names, and thus components, 
is then given by the average edge weight obtained in bipartite graph matching and lies in the range 0 
to 1. In the implementation, XAM4SWS employs di.erent mech­anisms for caching in order to improve the 
run-time perfor­mance. In detail, we use caches for the path length between semantic concepts, aforementioned 
splitting of names, and WordNet distances between pairs of words. This is moti­vated by the fact that 
all three processes consume a con­siderable amount of performance. The caches can be per­manently stored 
for future reference and may not only be populated at query time, but also at registration time. For 
that matter, every new service o.er is optionally matched against all registered services, thus increasing 
the number of entries and potential matches in the caches.  5. EVALUATION 5.1 Setup To date, to the 
best of our knowledge, there exists no standard test collection for hRESTS. For the evaluation of XAM4SWS, 
we have selected SAWSDL-TC 2 as a basis. It constitutes the de facto standard that is employed both in 
related work [4, 5], as well as in the annual S3 contest of se­mantic matchmakers [2]. SAWSDL-TC consists 
of 894 ser­vice o.ers that cover various domains. It provides 26 service queries and corresponding (binary) 
relevance sets, encoded as WSDL 1.1 documents. As an important restriction, all services provide only 
one interface with one operation. Fur­thermore, semantic annotations are solely included at the parameter 
level, i.e., in the XSD section of the WSDL .les. In line with our assumption in Section 2, all referenced 
se­mantic concepts are contained in OWL DL ontologies. We have mapped all services from SAWSDL-TC to 
their respective hRESTS counterparts using a self-developed XSLT 2http://projects.semwebcentral.org/projects/ 
sawsdl-tc/ stylesheet. The stylesheet and the resulting test collection, hRESTS-TC, are available via 
SemWebCentral3 . All afore­mentioned restrictions of SAWSDL-TC also apply to hRESTS-TC. In the mapping 
process, SAWSDL interface components have been converted into hRESTS service components; both constitute 
the level of abstraction right above operations. For the parameters, we only include the topmost XSD 
type that is referenced by a WSDL part construct, ignoring the underlying potentially complex structure 
of individual ele­ments. Finally, all operations in hRESTS are assigned a default HTTP method of POST. 
Aforementioned restric­tions should be kept in mind when comparing the results of XAM4SWS for hRESTS 
to those of competing matchmak­ing approaches that natively operate on SAWSDL-TC. We have conducted evaluation 
runs for di.erent con.gu­rations of XAM4SWS. The variation concerns the weighting of abstraction levels 
and the assignment of numerical DoM equivalents. Version 1 conducts matching based on the ser­vice signature, 
i.e., input and output parameters. Input and output levels are given identical weights of 0.5 each. This 
version exclusively operates on semantic information, i.e., does not employ the fallback strategy. In 
Version 2, we assign a weight of 0.1 to the service and operation levels and of 0.4 to the input and 
output parameter levels respec­tively. This accounts for the fact that semantic information is only available 
on the parameter levels and should thus be regarded to a larger extent for similarity assessment. In 
Version 3, a naive approach is pursued, with all abstraction levels being assigned an identical weight 
of 0.25. For every version, we evaluate two di.erent Variants, a and b. In Vari­ant a, we follow a suggestion 
by Syeda-Mahmood et al. [22] and manually set the numerical DoM equivalents to 1 (for an exact DoM), 
0.5 (for a sub and super DoM), and 0 (for a fail DoM) respectively. In Variant b, the numerical equiv­alents 
are determined by means of the OLS estimator. The weights are determined using k-fold cross-validation 
[23]. In our evaluation, k = 26 is given by the number of queries and corresponding relevance from hRESTS-TC 
that serve as partition from the service set. An overview of con.gura­tions is provided in Table 2. Due 
to the fact that all oper­ations exhibit the POST method for invocation, a default verb compatibility 
of 1 was assumed for all operations. XAM4SWS has been implemented in Java, using Pellet 2.0 for logic 
reasoning and JWNL 1.4 as the interface to WordNet. hRESTS documents are .rst converted into an equivalent 
Resource Description Framework (RDF) repre­sentation using a stylesheet by Kopeck´y 4 . For more details 
on the conversion process, we refer to Kopeck´y et al. [10]. The RDF document is consecutively read using 
JENA 2.6. To conduct the actual evaluation process, we utilize the Se­mantic Matchmaker Evaluation Environment 
(SME2)5 . 5.2 Utilized Metrics To assess the matchmaking quality of XAM4SWS, we em­ploy several metrics 
from the domain of IR. SME2 automat­ |AnB||AnB| ically computes P recision = and Recall =, |B||A| with 
A denoting the set of all relevant o.ers for a request 3http://projects.semwebcentral.org/projects/ hrests-tc 
4http://cms-wg.sti2.org/TR/d12/v0.1/20081202/xslt/ hrests.xslt 5http://projects.semwebcentral.org/projects/sme2/ 
and B denoting the set of all retrieved o.ers for a request. In order to determine a mean precision for 
answer sets at standard recall levels, we also make use of macro-averaged 1 o precision P recisioni = 
|Q| × q.Q max{PO|RO = Recalli . (RO,PO) . Oq}, with Oq representing the set of recall pre­cision value 
pairs of the relevant documents for query q. Oq is determined by a stepwise comparison of the sorted 
result set in descending order with the corresponding rel­evance set from hRESTS-TC [4]. SME2 uses equidistant 
steps n ,n =1 .... for the individual recall and precision . levels. For our evaluation, the default 
value . = 20 is ap­plied. To assess the precision at low recall levels, i.e., for the .rst k o.ers in 
a result set, we employ Precision at k (P(k)). For k, we use the common values 5 and 10 (P(5) and P(10), 
in short). Additionally, we provide R-Precision (RP), which corresponds to Precision at k, with k being 
the number of relevant services for a speci.c request. For RP, recall and precision is identical, i.e., 
RP identi.es the break­even point of recall and precision. Finally, the Average Pre­cision (AP) corresponds 
to the mean precision rate over all recall levels [24]. All these metrics are macro-averaged over all 
queries. 5.3 Results Table 2 provides an overview of evaluation results for all previously described 
variants of XAM4SWS. Figures 2a and 2b further depict the recall-precision curves for the manually tuned 
and OLS-based variants respectively. Results for other matchmaking approaches have not been included 
for two reasons. First, XAM4SWS is currently the only matchmaker to operate on hRESTS services. Second, 
as was explained in Section 5.1, the transformation from SAWSDL-TC to hRESTS-TC necessarily leads to 
a loss of information. This renders the results of XAM4SWS largely incomparable with those of SAWSDL-based 
matchmakers. As it is evident from the result overview, the signature­based Version 1 delivers the worst 
performance with respect to the considered IR metrics. The inclusion of information from the service 
and operations level, which is employed in Versions 2 and 3, leads to a signi.cant improvement. Fig­ures 
2a and 2b indicate that the gain in precision is most signi.cant for low recall levels. This fact is 
also re.ected in the changes in the P(5) and P(10) metrics. It is important to note that Version 2, which 
emphasizes the semantically annotated parameter level, achieves the best overall results. That means, 
the increasing consideration of non-semantic information in Version 3 triggers a decline of overall match­making 
precision. The utilization of OLS leads to signi.cant improvements with respect to all IR metrics. A 
single ex­ception can be observed for Version 1, where the use of OLS results in a reduction in P(5). 
The highest absolute per­formance gain is achieved for Version 2, with Variant 2b delivering the best 
overall results.  5.4 Discussion As this work demonstrates, the principal mechanisms of matchmaking 
for WS-* services can be transferred to the RESTful world with limited e.ort. This is speci.cally true 
for the description formats that have been at the focus of this work, namely hRESTS and MicroWSMO. The 
combination of these two formats exhibits a signi.cant number of com­mon charateristics with the popular 
WSDL and SAWSDL standards. Most commonly, this concerns the structural or­  Table 2: Con.gurations and 
Evaluation Results for XAM4SWS # Level Weights Num. DOM Equivalents AP P(5) P(10) RP 1a (0, 0, 0.5, 0.5) 
(1, 0.5, 0.5, 0) 0.718 0.869 0.792 0.647 1b (0, 0, 0.5, 0.5) From OLS 0.742 0.846 0.827 0.678 2a (0.1, 
0.1, 0.4, 0.4) (1, 0.5, 0.5, 0) 0.747 0.931 0.842 0.685 2b (0.1, 0.1, 0.4, 0.4) From OLS 0.810 0.962 
0.885 0.736 3a (0.25, 0.25, 0.25, 0.25) (1, 0.5, 0.5, 0) 0.725 0.931 0.842 0.661 3b (0.25, 0.25, 0.25, 
0.25) From OLS 0.758 0.954 0.835 0.700  (a) Manually Tuned Variants (b) OLS-Based Variants Figure 2: 
Recall-Precision Curves ganization of services and a comparable model for semantic annotation. As has 
been shown in our previous work [6], the extension of traditional subsumption reasoning with a numerical 
mapping may provide very good matchmaking re­sults. The evaluation of XAM4SWS supports these .ndings 
in terms of the observed IR metrics. Unfortunately, the spe­ci.c features of hRESTS could not be utilized 
due to the lack of a suitable test collection. This problem will hope­fully be elevated by the research 
community in the future through the creation of such test set. Hence, our evaluation should be seen as 
preliminary. Because XAM4SWS is based on LOG4SWS.KOM, it also exhibits a potential drawback: In traditional 
subsumption matching, as applied by Paolucci et al. and Klusch et al. [3,4,8], the overall DoM of two 
services is determined by the worst individual DoM between two matched components. This global DoM can 
be interpreted as a guaranteed lower bound of similarity between a service o.er and the initial request. 
In contrast, XAM4SWS computes the overall sim­ilarity between two services based on the average DoM bet­ween 
all matched components. This average value re.ects the degree of adaptation which is required to .t a 
service o.er to the service request. As discussed in our previous work, this approach also has its advantages. 
First, if only a small number of services is publicly available, the similarity value provides a good 
estimate of required manual adap­tions e.ort for the discovered services candidates. Second, it is more 
tolerant toward single outliers in the DoMs of the matched components.  6. CONCLUSIONS The SOA paradigm 
is gaining increasing momentum for the realization of large, distributed IT systems and cross­organizational 
work.ows. Today, WS-* (SOAP-based) Web services constitute the de facto standard for the implemen­tation 
of SOA within business entities. However, RESTful services are receiving attraction as a lightweight 
alternative, e.g., in the realization of mashups. This development trig­gers the need for suitable matchmaking 
solutions, i.e., al­gorithms that discover functionally adequate service o.ers based on a given service 
request. In the work at hand, we have introduced XAM4SWS, an adaptive matchmaker for RESTful services, 
based on the hRESTS description format in conjunction with Mi­croWSMO annotations. XAM4SWS extends our 
previously presented matchmaker LOG4SWS.KOM. XAM4SWS maps traditional Degrees of Match from subsumption 
reasoning into numerical equivalents. It thus allows for the integra­tion of additional numerical similarity 
measures. As proof of concept, our matchmaker implements a path length-based measure as well as a WordNet-based 
fallback strategy. XAM4SWS has been evaluated using the adapted version of a commonly accepted test collection 
for semantic Web services, SAWSDL-TC. In the evaluation, our matchmaker exhibits promising evaluation 
results with respect to com­mon IR metrics such as precision and recall. In our future work, we will 
address the inclusion of the WADL service description format in XAM4SWS. We will further evaluate additional 
adaption mechanisms besides the currently utilized OLS estimator. Lastly, we are encourag­ing the SWS 
community to participate in the creation of a commonly accepted test collection for RESTful services. 
Acknowledgments This work is partially supported by E-Finance Lab e. V., Frankfurt am Main, Germany (www.efinancelab.de). 
We would like to thank Martin Pinto and Martin Prodanov for their assistance in the implementation of 
XAM4SWS. 7. REFERENCES [1] N. M. Josuttis, SOA in Practice: The Art of Distributed System Design. O 
Reilly Media, Sebastopol, CA, USA, 2007. [2] M. Klusch, A. Leger, D. Martin, M. Paolucci, A. Bernstein, 
and U. K¨ uster, 3rd International Semantic Service Selection Contest Retrieval Performance Evaluation 
of Matchmakers for Semantic Web Services (S3 Contest), 2009, http://www-ags. dfki.uni-sb.de/ klusch/s3/s3-2009-summary.pdf, 
access at 2010-09-20. [3] M. Klusch and P. Kapahnke, OWLS-MX3: An Adaptive Hybrid Semantic Service Matchmaker 
for OWL-S, in Third International Workshop on Service Matchmaking and Resource Retrieval in the Semantic 
Web (SMR2), 2009. [4] M. Klusch, P. Kapahnke, and I. Zinnikus, Hybrid Adaptive Web Service Selection 
with SAWSDL-MX and WSDL-Analyzer, in 6th European Semantic Web Conference (ESWC 2009), 2009, pp. 550 
564. [5] P. Plebani and B. Pernici, URBE: Web Service Retrieval Based on Similarity Evaluation, IEEE 
Transactions on Knowledge and Data Engineering, vol. 21, no. 11, pp. 1629 1642, 2009. [6] S. Schulte, 
U. Lampe, J. Eckert, and R. Steinmetz, LOG4SWS.KOM: Self-Adapting Semantic Web Service Discovery for 
SAWSDL, in IEEE 2010 Fourth International Workshop of Software Engineering for Adaptive Service-Oriented 
Systems (SEASS 10), 2010, pp. 511 518. [7] S. A. McIlraith, T. C. Son, and H. Zeng, Semantic Web Services, 
IEEE Intelligent Systems, vol. 16, no. 2, pp. 46 53, 2001. [8] M. Paolucci, T. Kawamura, T. R. Payne, 
and K. P. Sycara, Semantic Matching of Web Services Capabilities, in First International Semantic Web 
Conference (ISWC 2002), 2002, pp. 333 347. [9] C. Pautasso, O. Zimmermann, and F. Leymann, RESTful Web 
Services vs. Big Web services: Making the Right Architectural Decision, in 17th International Conference 
on World Wide Web, 2008, pp. 805 814. [10] J. Kopeck`y, K. Gomadam, and T. Vitvar, hRESTS: an HTML Microformat 
for Describing RESTful Web Services, in 2008 IEEE/WIC/ACM International Conference on Web Intelligence 
and Intelligent Agent Technology, 2008, pp. 619 625. [11] M. Maleshkova, C. Pedrinaci, and J. Domingue, 
Supporting the Creation of Semantic RESTful Service Descriptions, in Third International Workshop on 
Service Matchmaking and Resource Retrieval in the Semantic Web (SMR2), 2009. [12] R. Chinnici, J.-J. 
Moreau, A. Ryman, and S. Weerawarana, Eds., Web Services Description Language (WSDL) Version 2.0 Part 
1: Core Language. W3C Recommendation, June 2007, http://www.w3.org/TR/wsdl20/, access at 2010-09-07. 
[13] J. Kopeck´y, T. Vitvar, C. Bournez, and J. Farrell, SAWSDL: Semantic Annotations for WSDL and XML 
Schema, IEEE Internet Computing, vol. 11, no. 6, pp. 60 67, 2007. [14] M. Hadley, Web Application Description 
Language (WADL), Sun Microsystems, Inc. Technical Reports; Vol. SERIES13103; SMLI TR-2006-153, 2006. 
[15] C. Kiefer and A. Bernstein, The Creation and Evaluation of iSPAQRL strategies for Matchmaking, in 
5th European Semantic Web Conference (ESWC 2008), 2008, pp. 463 477. [16] R. Battle and E. Benson, Bridging 
the Semantic Web and Web 2.0 with Representational State Transfer (REST), Web Semantics: Science, Services 
and Agents on the World Wide Web, vol. 6, no. 1, pp. 61 69, 2008. [17] R. Guo, D. Chen, and J. Le, Matching 
Semantic Web Services across Heterogeneous Ontologies, in Fifth International Conference on Computer 
and Information Technology (CIT 2005), 2005, pp. 264 268. [18] U. Bellur and R. Kulkarni, Improved Matchmaking 
Algorithm for Semantic Web Services Based on Bipartite Graph Matching, in 2007 IEEE International Conference 
on Web Services (ICWS 2007), 2007, pp. 86 93. [19] J. Munkres, Algorithms for the assignment and transportation 
problems, Journal of the Society for Industrial and Applied Mathematics, vol. 5, no. 1, pp. 32 38, 1957. 
[20] K. A. Nedas, Munkres (Hungarian) Algorithm, 2005, http://konstantinosnedas.com/dev/soft/munkres.htm, 
access at 2010-09-20. [21] G. A. Miller, WordNet: a Lexical Database for English, Communications of the 
ACM, vol. 38, no. 11, pp. 39 41, 1995. [22] T. Syeda-Mahmood, G. Shah, R. Akkiraju, A.-A. Ivan, and R. 
Goodwin, Searching Service Repositories by Combining Semantic and Ontological Matching, in 2005 IEEE 
International Conference on Web Services (ICWS 2005), 2005, pp. 13 20. [23] T. M. Mitchell, Machine Learning. 
McGraw-Hill, New York, NY, USA, 1997. [24] C. D. Manning, P. Raghavan, and H. Sch¨utze, Introduction 
to Information Retrieval. Cambridge University Press, New York, NY, USA, 2008.   
			