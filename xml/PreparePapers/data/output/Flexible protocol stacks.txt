
 Flexible Protocol Stacks Christian Tschudin, University of Geneva Centre Universitaire d Informatique 
12, rue du Lac ctschudin@cui.unige,ch> Current standard protocol stack architectures are static. The 
fixed number -for instance -of layers an application can access, or the order in which they must be arranged, 
exclude a large class of potential cotnmuni­cation protocols. We propose to investigate more flexible 
protocol stacks consisting of a protocol environment populated by standard communication functionalities. 
The main ingredient is the ability for an application to compose protocol stacks out of standard protocol 
enti­ties as well as the downline loading of new protocol enti­ties. This leads to application-tailored, 
extensible stacks, possibly established at run-time by a bootstrap proce­dure. Different ways to implement 
such an environment are discussed, and the current work on a toy environ­ment is presented. Key words: 
computer communication, reference model, flexible protocol stacks, CornScript, communication bootstrap, 
PascalCorn. Introduction The tremendous progress in the development of telecommu­nication applications 
is to a large degree due to the system­atic use of layering. However, recent research also made appear 
some problems related to the present state of stand­ardisation of laye~d protocol stacks. The implementation 
of the Remote Procedure Call concept (RPC) provides an example for this. In the 0S1 protocol suite [1] 
as well as with TCP/IP [2,3], RPC is treated as a high-level service because of its multiple needs for 
support by other services Permission to copy without fee all or part of thie material is granted provided 
that the copies are not made or distributed for direct commercial advantage, the ACM copyright notica 
and the title of tha publication and its data appear, and notice is given that copying is by permission 
of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fea and/or 
spacific permission, ~ 1991 ACM ().89791.444-9/91 IOO0810J 97... $1 ,SO (e.g. data integrity, addressing 
and presentation). Therefore 0S1 and TCP/IP position RPC on the very top of their pro­tocol stack. Amoeba 
(a distributed operating system [4]), on the other hand, considers RPC as the basic communication mechanism: 
a single optimized and monolithic protocol incorporates all required services (like data integrity etc.), 
thus violating among others the separation of these func­tions as it is defined in open systems concepts. 
While there is no problem to run 0S1 or TCP/IP protocols and applications in such operating systems, 
it is clear that appli­cations relying on these protocol suites will not be able to directly take advantage 
of the communication mechanisms offered by the underlying system because these services can not be made 
visible within the standard protocol suites. In a first Section we will examine certain properties of 
lay­ers within static protocol stack architectures -some famil­iarity with 0S1 and TCP/IP concepts is 
required. The second Section introduces a more flexible model trying to overcome the limitations discussed 
in Section one. Finally we present PascalCorn, a language which is based on Pascal and which allows to 
explore techniques needed for the han­dling of flexible protocol stacks. 1. Description of the problem 
The concept of luyering functionalities is a well-established paradigm: In the field of protocol standardisation 
it is proba­bly the most elaborated and dominant structuring force. Each layer can be characterised by 
the set of services that become available at the layer s upper border. Layers are stacked, so that a 
layer can provide its new or enhanced services by building on services furnished by the layer underneath. 
Internally to a layer, the work is done by proto­col entities which communicate via (peer-to-peer) proto­cols. 
 Reference models for (layered) protocol stacks define what we call the pragmatic aspect of a layered 
amhitecture: e.g. layer borders may be used to define visibility rules, the number and order of layers 
will be fixed and composition rules for protmol data units can be set up. Problems as the one mentioned 
in the introduction can in many cases be traced back to these pragmatic aspects of a model -which have 
nothing to do with the concept of layering itself. Our approach closely examines 4 properties common 
to 0S1 as well as TCP/IP: a) services are bound to absolute positions, b) the interworking between layers 
can not be influ­ enced, c) the creation and destruction of instances of proto­ col entities is done 
implicitly, d) if a peer-to-peer protocol is in fact a class of pro­ tocols, then negotiation may be 
required to deter­ mine the actually used protocol. The set of options constituting the class isfied 
in advance. a) This point has a limiting as well as a positive aspecc with absolute positioning assumptions 
can be made on how a given entity can be addressed. On the other side, this excludes arrangements based 
on a different ordering of the layers. In 0S1, for instance, transport services can lx found two layer 
borders downwards from the point of view of an application. This means that the 0S1 association control 
service element must translate the (distinguished) name of a remote application to a presentation address 
which is composed of exactly three items: an address for the trans­port layer and two selectors one for 
each of the two interme­diate layers. b) Layer interfaces have a conceptual signification only, and it 
is left to the engineers how (if ever) these interfaces are realized. There exist however some differences 
between 0S1 and TCP/IR TCP/IP allows an application to use any upper layer-interface directly, while 
0S1 restricts an appli­cation to the interface offered by the presentation layer. But in both suites 
it is not possible to access or manipulate the connections of protocol entities to the layer beneath. 
Because the ordering and number of layers is fixed there is no need to do so. The mechanism of layer 
interworking is considered as a lcxml matter. c) The strategy applied when new instances of protocol 
enti­ ties are to be created and the assignment of the responsibil­ ity for this activity is implementation-specific. 
With Berkeley-Unix there is a special program (the inet d dae­mon [3]) that starts the TCP/IP-applications 
to which a con­nection is requested, but other implementations could be considered where only additional 
buffers etc. are allocated. As a consequence, it is not possible to manipulate instances of protocol 
entities directly -the creation and destruction of protocol entities is viewed as a side effect of the 
usage of services. d) The set of options that can be (down-)negotiated is fixed first by the definition 
of the protocol and second by the spe­cific implementations involved. No possibility exist to enhance 
a limited implementation, even if one of the imple­mentations would know how to do the job on the remote 
system (e.g. because they share the same machine type, the same operating system etc.). Relaxing one 
or more of the listed restrictions imposed on a protocol stack will lead to more flexibility, but additional 
effort is required from the users of a layer. In the next sec­tion we will develop and discuss a model 
that is in contra­diction with e.g. the 0S1 reference model in the four points mentioned above.  2. 
A protocol stack environment Relaxing layering constraints What we propose is a protocol stack environment. 
Just as TCP/IP and 0S1 model an architecture, it does not imply the structure of an implementation. Fig. 
1 presents an illus­tration of this model. $ server !-; , ,..1 , access , ;;; ROS ::; 03 : : ------: 
-- I 1--.. -..:.. t .........-i 1P be r cl ARP L Fig 1. View of the proposed protocol stack environment 
The environment can been seen from outside as a communi­cation server: all use of communication services 
must be made via this server. Inside the server we have a repository of static entities (dashed), representing 
protocol entity types. Jnstances of these types (solid boxes) may be created on demand. The instances 
are by nature either anchored or free . Anchored instances (e.g. the box for the ISO 8802 local area 
network) give immediate access to communica­tion services in the classical sense, e.g. a network service 
their availability depends on the hard-and software-config­uration of the real system. A free instance, 
on the other side, must first be connected to an anchored instance before its services can be used. But 
comections can also be made between free entities (e.g. IP and ARP entity). The advan­tage here is that 
these attachments can be unlinked and rede­fined at any moment, allowing to insert or remove instances 
at will. Of course the service primitives expected ( lower interface ) and the primitives offered ( upper 
interface ) by the two interconnected entities must match. Up to now we have discussed replies to three 
of the four points outlined in the preceding section: Services are not bound any more to a predetermined 
position in a protocol stack (point a) but now must be requested from freely float­ing protocol instances. 
Concerning point b), we allow two distinct protocol instances to be connected to each other (provided 
the primitives match) and this connection to be broken by the environment. And finally (point c), the 
proto­col environment allows for (and requires) the explicit crea­tion and destruction of protocol instances. 
Requirement d) -the extensibility -will be made feasible by the mechanism of downline loading, although 
some exten­sions can already be made by letting a local protocol instance manipulate the remote side, 
e.g. remotely trigger­ing the insertion of an already existing protocol entity. But in some cases this 
may not be enough. Downline loading will allow to augment the set of entity types available at the remote 
side. As an example, consider the augmentation of a presentation entity with a new encoding rule (transfer 
syn­ tax) for abstract data types. The following scenarios will show other possible usages (a nd limitations) 
of the proposed protocol environment. Protocol entities In this model classical protocol stacks can 
be represented as particular protocol entity types. Instantiating e.g. an 0S1 ROS-entity would create 
and handle the 0S1 specific proto­col stack underneath. Another anchored protocol entity may offer just 
the IP services. Instantiating a free TCP entity and connecting it with the IP instance creates a relia­ble 
data stream service. Going further, it is possible to instantiate an IWAM application with just the upper 
0S1 layers, then using an transport service convergence entity (RFC 1006) and put this on the TCP entity 
defined before, which yields an RFC 1006 application [5]. Such an application will only interwork with 
a remote site that knows about RFC1OO6 applications. Building applica­tions with stacks coming from static 
protocol suites will always limit their scope to the domain of the sites that understand that architecture. 
To really make extensive use of the proposed protocol environment we need remote envi­ronments fulfilling 
the same proposed concepts. We do not care how such environments are interconnected but assume that such 
connections can be made accessible by the means of anchored protocol entities. Important is that all 
environ­ments understand a generic protocol which is the same as the one used for the access to the environment 
server. Per default all incoming access to a remote environment will be intercepted by a newly created 
anchored entity to which a remote -- --- msunws ----- -z z). servtx -- ---- -m UJnnGGLCU (rig. ­ .9- 
...... ; \ 1 \, ; \ / \ Fig 2. View of an incoming access to a protocol environment This server entity 
(dashed lmx) is virtuak commands issued to it affect the environment it is sitting in, that is the server 
entity is the environment. An application, together with the required protocol stack, could be remotely 
constructed out of free protocol entities. Then the built application will take over the connection formerly 
used between the anchored entity and the server entity. Using the downline loading capability we can 
build up nearly arbitrary protocol stacks. Because this can be done in consecutive steps enhancing each 
other (download, install on both sides, download using new service, install, etc.) this could be called 
a communication bootstrap. The price to be paid for this flexibility is an increased com­plexity when 
using communication services -an effort that must be made by the application. But by defining entities 
that represent a whole standard protocol stack this can be limited to one additional indirection: the 
effort needed to locate and to instantiate that protocol enti~. Implementation No effort is made to see 
how this proposed model could be integrated with or made fruitful for 0S1 or other fixed proto­col stacks, 
although we can try to integrate parts of 0S1 and TCP/lP technology. The explicit goal of this model 
is to define essential types of protocol entities which are made visible, whereas other protocol stacks 
make a principle of hiding a maximum amount of details. Many aspects like addressing, the primitives 
to be made visible in such a com­munication server, (inefficiency considerations etc. have not been discussed 
yet, and the question remains if such a protocol environment can be realized. Different forms of implementations 
or attempts in this direction can be envis­aged: a) The generic protocol used to access the server could 
be of a form similar to PostScript. PostScript [6] allows to control visualization equipment as well 
as to use it for printing. The language can be redefined by the means of PostScript itself. A hypothetical 
ComScript would also be a device-and protocol­independent language used to control a protocol environment 
but also to use it for communication in generaI and to redefine and extend the given lan­guage. b) Starting 
with the question what format should be used for the downline loading we could try to enhance Estelle 
or LOTOS [7] with the server com­mands needed. Such a formal description technique would provide a nice 
generic format for the down­line loading of protocol entities. Both approaches seem to be too ambitious. 
At the present state of our research not enough is known about the tech­niques required to handle arbitrary 
protocol stacks and the techniques needed to implement such an environment. It has been pronounced that 
Estelle and LOTOS are of too high a level for direct interpretation or use in the automatic genera­tion 
of executable code. We therefore decided to start with a small toy environment not designed to implement 
the complete set of suggestions made in this paper. Instead, such an environment allows to experiment 
with some funda­mental problems which arise when protocol stacks are reconfigured dymmically: . insert 
into a ruining protocol stack a new layer (e.g. a multiplexer), -replace a running layer (e.g. Alternating-Bit 
by Go-Back-N) -distribute a running protocol stack on several environments at run time, - use downline 
loading for the bootstrap of a proto­ col stack. The main difficulty is expected in the synchronisation 
between two or more participating remote protocol stacks. Not every existing protocol and protocol stack 
may allow such U.W. 3. Related Work Topics related to the one discussed here can be found in the border 
zone of computer communication and distributed operating systems research. Another area where the current 
structure of protocol stack architectures is re-evaluated is the domain of high-speed networking (e.g. 
[8]). The main concern, however, are performance figure and related engi­neering problems, not interworking 
issues. The x-Kernel [9] proposes an interesting approach to layer interworking. The kernel is seen as 
an architecture for implementing network protocols. Protocol entities are rep­resented as a protocol 
object to which session objects are associated. The x-Kernel does not make any assumptions on the sequence 
in which protocols will be stacked a late bind­ing mechanism allows each protocol object to effectively 
attach itself to another underlying object at run-time. How­ever, the selection of the object to be linked 
to is predeter­mined at compile time. The main advantage is that layer interworking becomes expliciti 
a small set of primitives ­uniform for all protocol objects -allows to manipulate the links between these 
objects. In another paper about the x-Kemel [10] a special chapter presents the dynamic removing of layerx 
in fact a layer is never removed, instead a decision (e.g. based on the packets size) is taken on a per-message 
basis if a given message can skip the layer or not. The layer itself remains present all the time -particular 
in the remote host which cannot know if a messages comes through the so called removed layer or not. 
Anyhow, the principle inter­est of the x-Kernel is the demonstration of the advantages of a uniform handling 
of protocol entities covering the layer interworking. As another example of architectural support for 
customized protocol stacks we mention the UNIX System V Transport Layer Inte@ace (TLI)[3]. User processes 
access the trans­port services via full duplex streams : a stream links a user process with a transport 
provider, TLI being the uniform interface. The transport provider can be represented as a fixed stream 
head that connects to a device driver. It is now possible to insert (push) between the stream head and 
the device driver a sequence of modules working on the stream passing them. By the means of multiplexors 
that han­ dle more than one stream passing through, more complex configurations can be achieved. In 
this way the kernels serv­ ices can be augmented e.g. at boot time without the need to recompile the 
kernel. The control, however, over the place­ ment of intermediate modules is limited in the sense that 
they form a true stack, allowing manipulations only at the top of the stack. Both approaches (x-Kernel 
and TLI) can be used to build and run a variety of different protocol stacks but they remain environments 
for preconfigured stacks which are difficult to customize at run time by a client application. 4. The 
PascalCorn Language We mentioned above our concern about the feasibility of the proposed protocol stack 
environment more research is needed to find stack composition teehnics. With this goal in mind we designed 
a toy environment based on a language we called PascalCorn and an easily portable run time sys­tem. At 
the time of writing we are in the last phase of testing and debugging the compiler in parallel with the 
run time system for several platforms (Sun, Transputer and PC). PascalCorn is an extension of the Pascal 
programming lan­guage. Pascal was used as the base language because it s semantic is well understood 
and surprises must be expected for extensions only. Moreover small Pascal compilers/inter­preters susceptible 
to incorporate the necessary extensions at a reasonable effort are freely available (actually a revised 
Pascal-S is used [1 l]). PascalCorn explicitly targets the study of protocol stack implementations in 
the context described so far and maybe viewed as one possible way to implement some rudimentary form 
of flexible protocol stacks. The following Section provides a quick overview of PascalCorn. When specifying 
the language we applied the principle to keep the number of additional primitives as small as possi­ble. 
Enhancements were made in three areas: -some minor extensions concerning data types, -the creation and 
control of parallel processes, communication between parallel processes.  a) Pascal~om data types Care 
has been taken not to arbitrarily introduce fancy new data types. Beside a small completion of the standard 
list of types (e.g. byte and time) there is only one really new type the variable array varray. This 
extension is needed to provide a formal means to support dynamic allocation without losing strong typing, 
which is of particular interest for the implementation of protocol entities. Strings are inter­nally 
handled as variable arrays of characters: type string: varray[O. .79] of char; var s: string; (* ... 
*) s := hello world ; A variable of type varray can be regarded as a parametric record having three fields 
being defined as follows: ( this is pseudo code, not real PascalCorn code:*) type varray[givenLow. .givenHigh] 
of givenType = record maxlength: integer; (* givenHigh-givenLow+l *) length: integer; (* undefined until 
assigned*) data: array [givenLow. .givenHigh] of givenType end; Mainly when protocol-data-units must 
be represented, such a type is often involved implicitly: type pdu = record ackf lag: boolean; userData: 
varray [ O. . 127] of byte end; The varray type also has a special pointer form, allowing to allocate 
dynamically an amount of memory not specified at program time type buffer = varray of byte; var bufptr: 
buffer; amount Of Byte sRequested: integer; (* .-. *) new(bufptr, amount Of BytesRequested) ; bufptrA.length 
:= O; b) PascalCorn processes/agents Generally the code of a program does not only define a flow of 
control, but contains also some state information (global variables etc.). We call this extended view 
of a program (that is the compiled code together with the state of exeeu­ tion) an agent. Formally, this 
correspond to replace the keyword program by the keyword agent. agent my program; begin (* ... *) end. 
The notion of an agent will serve to formally represent dif­ferent process types an instance of an agent 
is called a process. PascalCorn has built-in primitives to start and stop a process and others that 
allow to turn an agent (which is an ordinary data structure) into a process and vice-versa. The definition 
of a local agent must precede the variable dcdarations, because child processes may not access the parent 
s data (the exchange of information therefore is pos­sible only via messages). When a new process is 
to be cre­ated, it is the task of the parent to furnish the needed workspace (similar to Modula-2 for 
coroutines [12]). agent parent; agent child; (* communication points omitted*) begin (* ... *) end; 
var p: process; a: agent; workSpace: array[O . .4000] of byte;  begin P := process (child, workSpace 
) ; atart (p) ; (* ... *) stop(p) ; a := agent (P) ; end. The repeated creation of child processes will 
eventually lead to a tree of processes. When such a tree of processes is transformed into an agent this 
will be carried out recursively on all subprocesses but will yield only one agent. On instan­tiation 
of this agent the whole process tree is recreated. All processes run in parallel: no special priority 
is given to a parent process. c) PascalCorn communication primitives Communication in PascrdCom follows 
to a large degree the idea proposed in MEX (Modula-2 EXtented [13]): commu­nication between processes 
is synchronous and maybe used to exchange data between gates. The primitives for synchro­nisation are 
the accept and the off er construct which will block if the other side is not ready. Both primitives 
maybe used in a select statement, thus attempting a synchronisa­tion on one of the entries ( symmetric 
select ). Some important changes with respect to MEX have been made -gates are typed (in direction as 
well as for the data type) the off er performs a data copy (in MEX only pointers are exchanged) -gates 
have a very narrow scope (gates are global in MEX). The gates used in PascalCorn are inspired more by 
the con­cept of interaction points found in Estelle than the gate con­cept found in MEX: the PascalCorn 
gates in fact should be regarded as half-gates because they must be connected together before a synchronisation 
becomes possible. A con­nection between gates can be broken at any moment by a disconnect. An advantage 
of the strong typing of gates is the differentiation between input gates (source) and output gates (sink). 
This allows an additional syntactic check when gates are used in the accept, offer and connect primi­tive. 
agent a (out Gate: ogate of pdu) ; var the_pdu: pdu; (* .-. *) offer ( out Gate, the_pdu) ; agent b (inGate: 
igate of pdu) ; var my pdu: pdu; (* . .. *) acaept ( inGate, my_pdu) ; a b   6 FI Fig 3. Possible 
configuration of the two processes If two processes have corresponding synchronisation requests and 
the two (half-)gates used are connected and this synchronisation is chosen by the environment, then the 
data in the offer statement is copied to the accepting side and both processes may continue their execution. 
Of course the data parameter for accept must be a variable that is compatible with the gate s data type. 
The type associated to a gate may not contain pointer types, gates, processes and agents. Gates can nevertheless 
be used to transfer the content of an agent variable under the condi­tion that the program provides an 
adequate external repre­sentation. The symmetric select allows the mix of of ferS, acceptS and timed 
entries. Each entry may be guarded by a boolean expression. The parameter of the offer primitive is evalu­ated 
each time a synchronisation is attempted, not just when the off ered entry is selected (MEX has a different 
seman­tic here). select when acceptOk -> accept ( inGate, the_pdu) ; (* ... *) [1 offer (out Gate, pduPtr 
) ; (* ... *) [1 when timeOutEnabled -> waituntil ( gettime + timeOutValue ) ; (* ... *) end; (* select 
*) One of the select-entries ready for synchronisation will be chosen by the environment and the code 
following this entry is executed. Gates are only valid in the direct relationship of parent/child processes: 
the parent is the owner of a gate -the gate may only be used by direct off-springs. The only moment to 
pass gates to a child is at the time a process is started (gates are the only parameters allowed in the 
parameter list of an agent definition): the actual (gate-)parameter must be a variable owned by the parent 
(and not a gate inherited in turn): agent parent; type pdu= (* ... *); agent child (i: ~gate of pdu) 
; begin (* ... *) end; var a: agent: p: process; the_pdu: pdu; inGate: igate of pdu; outGate: ogate of 
pdu; workSpace: array [O. .4000] of byte; begin P := process(child, workspace); start (p, inGate) ; 
connect(inGate, outGate) ; offer(outGate, the_pdu); (* ... *) stop(p) ; a := agent(p) end. If several 
children share the same gate then one child will be selected randomly in the case of multiple possible 
synchro­nisations. d) Discussion ofPascalCom PascalCorn processes can be used to implement a simple form 
of the protocol entities proposed in this paper. The important aspect is the wayprocesses can rehandled 
Pas­ calCom allows to tightly control their execution. Processes can be frozen into agents such that 
they may be either locally duplicated or moved to some other environment which enables downline loading. 
Also important is the aspect of controlling the interconnections between child processes. Gates can be 
linked together or be separated: so it will be possible for the parent to insert other processes in an 
existing connection. Our PascalCorn compiler generates code for a very simple virtual machine. fhe communication 
and the process han­dlingprimitives are accessible through system calls of a primitive operating system 
(caIIed ComOs) and are thus separated from the interpreter. Onearchitectural goal of this work item is 
the possibility to implement the ComOs using the primitives offered by PascalCorn itself. This is an 
ele­gant approach having recursive environments as it allows to download enhanced protocol environments, 
making the communication bootstrap more general. We feel that the primitives and concepts introduced 
in PascalCorn are suffi­cient powerful for allowing this. As an example we include in the appendix the 
code for an alternating bit protocol entity: it implements a full duplex reliable data stream. Additionally 
if offers a control access that allows for either a reset of the protocol entity or a flush with end-to-end 
significance. 5. Conclusion In this paper we investigated the pragmatic attached to the (static) layer 
concept in 0S1 and TCP/IP. Based on this observation we outline a model for a flexible protocol archi­tecture: 
Communication services are offered by a protocol environment accessible through a generic protocol. Inside 
this environment we have protocol entities that can (and must) be explicitly created and destroyed, the 
interconnec­tion of these entities can be dissolved and redefined at will. This allows a generic communication 
bootstrap procedure, potentially solving many interworking problems between static protocol suites. A 
consequence of this approach is the blurring of the strict layer model. In fact, the layer model is now 
viewed as just one way to organise communication tasks. This relaxed view already found its way into 
0S1 where in layer 7 we have different floating service elements , showing an impressive number of interconnection 
patterns. The effort in Open Distributed Processing (ODP) goes in the same direc­tion when the process 
migration is envisaged. Before one can hope to have such a general protocol envi­ronment (e.g. controllable 
by something like CornScript), more understanding about the management of running pro­tocol stacks is 
needed. As a first step, we will use Pascal-Corn as a testbed for the 4 basic experiments listed in this 
paper.  6. Acknowledgement 1gratefully acknowledge Dave Robson for providing us the sources of their 
modified Pascal-S compiler. Thanks go also to Eduardo Solana and Muhugusa Murhimanya who imple­ment the 
compiler extensions and the execution environ­ment, and especially to Jurgen Harms, supporting me in 
the writing of this paper. I am also grateful for the remarks of the reviewers -not only because of the 
structural improve­ments proposed, but also for the objective comments very welcome in a research project 
at an early stage.  Bibliography [1] CCIT R Data Communication Networks -Open System Interconnection 
(OSI) Model and Notation, Service def­inition; Blue Book recommendations X.200-X.219; International Telecommunication 
Union 1989. [2] W. Stallings: Handbook of Computer-Communications Standards -Volume 3: The TCPIIP Protocol 
Suite; Stalling/Macmillan 1989. [3] W. Richard Stevens: Unix Netivork Programming; Prentice-Hall 1990. 
[4] R. van Renesse, A.S. Tanenbaum: The Evolution ofa Distributed Operating System (Amoeba); in Progress 
in Distributed Operating Systems and Distributed Sys­tems Management ; Lecture Notes in Computer Sci­ence 
433, pp. 1-12; Springer 1990. [5] Marshall T. Rose: The Open Book -A practical per­spective on OSL Prentice-Hall 
1989. [6] Adobe: PostScript Language -Reference Manuat Add­ison-Wesley 1990. [7] Dieter Hogrefe: Estelle, 
LOTOS und SDL; Springer 1989. [8] David D. Clark, David L. Tennenhouse Architectural Considerations for 
a New Generation of Protocolq in Communications Architectures 8z Protocols ; SIG-COMM 90 Symposium, pp. 
200-208; ACM 1990. [9] Norman C. Hutchinson, Larry L. Peterson: The x-Ker­nel: An Architecture for Implementing 
Network Proto-COIU in IEEE Transactions on Software Engineering, Vol. 17, No. 1, pp. 64-76; IEEE 1991. 
[lO]Norman C. Hutchinson, Larry L. Peterson, Mark B. Abott, Sean O MaIley: RPC in the x-Kernel: Evaluat­ing 
New Design Techniques in Proc. fivelfth ACM Symposium on Operating System Principles , pp. 91­101; ACM 
1989. [11] Michael Rees, Dave Robson Practical Compiling with Pascal-2 Addison-Wesley 1988. [12] Niklaus 
Wirth: Programming in Modula-2; Springer 1983. [13] Giovanni Conti: MtWodologie dimplantation des pro­tocols 
de communication -Ph.D. thesis No 842; Ecole Polytechnique F4d6rale de Lausanne, 1990. ml N u .. .. 
0 II ., u 3 0 .2 r-l .. 0 .! c i-l @J 3 d Wwwwww000000  
			