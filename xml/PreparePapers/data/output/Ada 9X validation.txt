
 Panel: Ada 9X Validation Chair Nelson H. Weiderman SoftwareEngineeringInstitute  Panelists John B. 
Goodenough, Software Engineering Institute Kenneth Fussichen, Computer Sciences Corporation Erhard Ploedereder, 
Tartan, Inc. Robert B. K. Dewar, New York University Michael Middlemas, SAIC 113  Ada 9X Validation 
Panel Nelson H. Weiderman, Moderator Software Engineering Institute, Carnegie Mellon University John 
B. Goodenough Software Engineering Institute, Carnegie Mellon University Kenneth Fussichen Computer Sciences 
Corporation Erhard Ploedereder Tartan Inc. Robert B. K. Dewar Computer Science Department, New York 
University Michael Middlemas SAIC Panel overview: The ideal Ada validation suite would contain a limited 
number of short programs that would be applicable for all Ada implementations and would ensure that the 
implementations wnform fully to the standard. Most people recognize this as an unrealizable aspiration. 
The wrrent test suite contains over 4000 tests, is incomplete in its coverage, is considered burdensome 
to use, and does not guarantee the absence of bugs. The challenge of constructing a new test suite for 
Ada 9X is to make the right engineering compromises based on a number of competing viewpoints. Among 
those viewpoints is the theorist s w ew,the user s view, the vendor s view and the test administrator 
s view. This panel will explore the various views and the choices that have been made for Ada 9X. 114 
Theorist Position John B. Goodenough  There are different views of what is desirable and possible when 
developing a compiler test suite. The 9X approach is based on experience with the existing test suite 
plus a recon­sideration of the goals of validation and how the requirement for validation has affected 
the usability of compilers. So let us first consider the historical factors affecting the develop­ment 
of the test suite. The government s goal in developing Ada was to create a standard language that would 
be suitable for DoD s use (and that, ideally, would be supported commercially). DoD s experience with 
previous supposedly standard languages (such as JOVIAL J3) showed clearly that implementations would 
be subsetted and supersetted unless they were checked for conformance to a standard (and the DoD required 
the use of conforming compilers). In essence, the validation effort was needed to make sure that those 
respon­sible for compiler developments would take the Ada stan­dard seriously. Of course, it was understood 
that tests would help minimize inadvertent deviations from the standard as well. In addition to these 
reasons motivating DoD s interest in validation, the test developers hoped that if compilers worked in 
limiting cases (when language rules were fully exploited), they would probably work in normal cases as 
well. Given all this background, it is perhaps understandable why the original tests sometimes focused 
on the implemen­tation of difficult features or difficult interactions between features [1]. Little or 
no consideration was given to a user s need for such features or interactions. This emphasis on checking 
difficult casesnaturally led to the development of some tests that were pathological, i.e., tests that 
checked situations unlikely to occur in practice. Given a strict view of conformance testing (that is, 
given the assumption that there is no difference in value in detecting one error over another, since 
any error demonstrates non­conformance), it was quite reasonable to be unconcerned about whether ACVC 
tests detected errors of interest to Ada programmers. Either a compiler conforms to the standard or it 
does not! But attempting to ensure that a compiler gets pathological casesright did not prove to be beneficial 
to programmers, in part because it diverted vendor effort to fixing problems that would not be encountered 
in practice. The impact of patho­logical tests was also increased by the all-or-nothing approach to validation 
(no test failures were allowed). The net effect was, in part, to help delay the maturity and quality 
of Ada compilers by diverting vendor effort inappropriately. So let s re-examine the premisses of compiler 
validation testing: Ideal goal: to ensure that compilers conform to a lan­ guage standard. But no fixed 
set of tests can ensure that compilers have no errors, so this goal can t be achieved. So we need to 
rwtate the goal to be one that is achievable, Realistic goak to encourage the development and use of 
compilers whose non-conformances (i.e., errors) do not have a signticant effect on Ada programmers. (Note 
that this goal admits that all seemingly conforming compilers will, in fact, have errors, but we don 
t care as long as the errors are not observed by actual programmers or as long as the errors do not significantly 
impair the ability of a programmer to get the job done. This philosophy is pre­sented more fully in [2].) 
 Premiss: Not everything can be tested, i.e., since the amount of time and money available to write tests 
is lim­ited, one must decide which tests are most useful to write. This leads to the following question 
whose answer is the basis for the Ada 9X test development strategy Question: What kind of tests are 
likely to be most effec­tive in attaining the real goal? Given the above line of reasoning and the experience 
with the Ada 83 test suite, the answer is to develop what might be called usage-oriented conformance 
tests, i.e., tests that check whether compilers work correctly when they are used in expected ways. The 
benefits here are that when any ven­dor fails such a test, fixing the compiler error will be more likely 
to benefit actual users. Of course, it still won t be easy to decide which tests to write, but this new 
orientation in test development should help to ensure that the Ada 9X valida­tion suite is a positive 
force in encouraging the development of useful Ada 9X implementations that conform adequately to the 
standard. References [1] Goodenough, J. B. Ada compiler validation: an example of software testing theory 
and practice. In Haberman, A.N. and Montinari, U. (Eds.), System Development and Ada, Proceedings of 
the CRAI Workshop on Software Factories and Ada, Lecture Notes in Computer Science, No. 275. Springer-Verlag 
1986, pp. 195-232. [2] Currit, P.A., Dyer, M., and Mills, H.D. Certifying the reliability of software, 
IEEE Transactions of Soflware Engi­neering, SE-12, 1 (Jan. 1986), pp. 3-11. 115  User Position Kenneth 
Fussichen  There has been a concentrated effort to involve the compiler user in the Ada 9X Validation 
process. This is a worthwhile effort because the compiler user is often blissfully unaware of exactly 
what compiler validation means. Validation is not a boolean term like pregnant or dead. One cannot be 
a little pregnant or mostly dead. It is more like taking the written test for a driver s license. There 
are almost always one or two trick questions to prevent a perfect score, but once you have your license, 
it matters not. Validation is similar. Not all questions are asked. Even a perfect score would not guarantee 
a good driver. As an example, how valuable is passing all the tests for TEXT_IO when the architecture 
is intended only for navigation? Even the portability argument crumbles. Other examples may not be that 
apparent. Ada 9X Validation is an improvement, particularly from the user perspective. The intent is 
to provide the compiler user with a viable Ada compiler. By relaxing the interpretation of the standard 
in those areas that compliance serves only to support the standard, perhaps the vendor (and ultimately 
the user) can get abetter product out the door. This is a bold strategy on the part of the Ada 9X Project 
Office. It departs from the STANDARD, the whole STAN-DARD, and nothing but the STANDARD to the customer 
is always right. I am confident that this strategy, although correct from the user perspective, will 
perpetuate Ada debates into the next millennia. 3 Vendor Position Erhard Ploedereder Vendors have always 
had a love-hate relationship with vali­dation. As a test suite, and as a means to cross-check their interpretation 
of the standard, the ACVC test suite has unde­niably helped the vendor community. It has kept the Ada 
implementations reasonably uniform, supporting the ven­dors claims that Ada is a language with a very 
strong and enforced standard. And, the marketplace has demanded vali­dation of the Ada compilers; the 
vendors had little choice but to satisfy this demand. Today, almost all vendors routinely validate their 
product compilers. But, validation has not been without its cost. First, there is the monetary cost of 
the validation process. This cost is ulti­mately born by the customer base in terms of the product pricing. 
In a competitive market against other languages that are not saddled with such stringent, if any, validation 
requirements, this is a handicap for Ada. Second, the Ada validation rule of having to pass all tests 
has had a profound negative impact on products. In the early days, the validation mandate made passing 
the entire ACVC the all-important goal of product development, never mind the quality of the implementation. 
As a result, compilers were marketed that were barely fit for project use. Many misperceptions of Ada 
date back to the customers exposure to such early compilers, To a lesser extent, this problem per­sists: 
driven towards contractual or product deadlines, the trade-off between fixing a discrepancy in the compiler, 
caus­ing the failing of some pathological ACVC test, and fixing a discrepancy likely to affect many users 
is still skewed towards the former. The option of making an intelligent choice is still denied to the 
vendor. The plans for Ada 9X validation show considerable promise to not repeat these mistakes of the 
past. The Ada 9X ACVC plans endorse a usage-based philoso­phy in test generation. Given the all-or-nothing 
validation criterion, this change may make it more likely that an ACVC failure deserves priority not 
only because of validation, but also because normal users would probably be affected by the problem as 
well. Most importantly, the mad rush towards tirst Ada 9X vali­dation will be avoided by the Ada 9X transitional 
strategy that is not a priori focused on completeness. It will allow vendors to introduce first those 
Ada 9X improvements most relevant to their respective customer base in a validated com­piler, while maintaining 
a high product quality (i.e., robust­ness, efficiency). Gradually, they then can work towards completing 
the Ada 9X implementation, while obtaining a 116 revenue stream from the Ada 9X compilers already in 
the field. This is particularly important, as the funding mecha­nisms that sustained the early years 
of Ada 83 product devel­opment without sufficient market revenue are simply not available for the Ada 
9X upgrade. For this strategy to succeed, the user community needs to play its part in the Ada 9X transition, 
too. In particular, if customers ask for immediate availability of complete Ada 9X implementations, vendors 
will undoubtedly succumb to this market pressure and implement more Ada 9X capabili­ties rapidly, but 
often with less quality. Customers should work with their suppliers in defining the priorities of their 
Ada 9X needs, and insist on quality. Test Administrator Position Robert B. K. Dewar  No position statement 
was submitted by Prof. Dewar. The following position, to be defended by Prof. Dewar, is sub­mitted by 
the moderator.] The responsibility for administering the Ada certification system rests with the Ada 
Joint Program Office (AJPO) for overall direction, the Ada Validation Organization (AVO) and the ACVC 
Maintenance Organization (AMO) for techni­cal support, and the Ada Validation Facilities (AVFS) for per­forming 
validations. These groups are collectively called the certification body. Even within this test administration 
com­munity, the groups have different views of the validation suite. The interest of the AJPO is to promote 
and effective transi­tion to Ada over the long term. This can most effectively be achieved by successful 
users and successful vendors. The interest of the AJPO is therefore to promote stability of the test 
suite and low costs to vendors for test administration. Stability, as opposed to evolution, requires 
a greater effort be made to get the test suite right the first time. The interests of the AVO and AMO 
are to have clearly defined procedures for administration of the process and to make the suite easy to 
use and interpret. Running 4000 tests is a complex undertaking requiring clear guidance on the steps 
necessary to adapt the suite for particular operating environments, to run the suite, and to report the 
results. Mundane issues such as how the tests are named, the distri­bution media, the organization of 
the tests, and the format of the results are very important to these organizations. One of the most important 
jobs of the AVO/AMO is to resolve disputed tests. Test disputes may arise for a number of reasons. The 
vendor may dispute a test s applicability to the computing environment being tested. The vendor may not 
fully understand a subtle point of the language. Or, the test may be wrong and have to be withdrawn. 
Particularly vexing are disputes which involve combinations of features that am highly unlikely to be 
used in practical programming. So the interests of the AMO/AVO are primarily that tests be correct, relevant, 
and well-documented as to their objec­tives. The AVFS basically operate as fee for service businesses 
and to a certain extent compete with one another for validation business. They are motivated to increase 
the volume of ser­vices provided and to lower their cost of providing the ser­vice. As is the case for 
all service businesses, the service should be provided in a timely manner for a reasonable cost. Volume 
is controlled to a large extent by AJPO policy and vendor viability rather than by the test suite itself. 
Many of the cost and schedule constraints are directly under the con­trol of the AVFS, but a clean and 
efficient test suite facilitates their efforts. 117  5 ACVC 9X Status Michael Middlemas The ACVC test 
suite is being upgraded and revised to accommodate the new requirements of Ada 9X. This will be a three 
step process. First, the ACVC 1.12 test suite for Ada 83 will be streamlined to form a baseline for the 
9X test suite. Second, new tests will be added to form the first 9X test suite, ACVC 2.0, which will 
provide broad 9X feature coverage. Finally, additional tests will be added to provide increased depth 
of coverage for ACVC 2.1. The goals of streamlining ACVC 1.12 are to maintain cur­rent effectiveness 
while improving efficiency and eliminat­ing incompatibilities with 9X features. By removing redun­dant 
tests and tests of little value from the current suite, we can establish the same level of practical 
conformance check­ing with a more compact test suite, The result of this effort will be called 9X Basic. 
In the second stage, we will add tests for the core language (object-oriented features, data-oriented 
synchronization fea­tures, etc.) as well as the specialized needs annexes (real­time systems, information 
systems, etc.). The 9X specific tests included in ACVC 2.0 will provide broad coverage of the new language 
features. This will bean interim test suite. Finally, for ACVC 2.1, we will add tests to improve cover­age 
in specific areas and deepen coverage of specialized annexes. Feedback and response to the ACVC 2.0 test 
suite will guide the additional tests included in 2.1. The result will be a test suite that is sensitive 
to the engineering compro­mises discussed in this panel session. The key to success will be an open test 
suite development approach. Test developers will make all their work available to the ACVC Review Group, 
who will be carefully review all test objectives and tests. The comments and concerns of the reviewers 
will result in specific improvements through­out the test development activities. The Review Group will 
provide guidance to the test developers, inspect their work on an ongoing basis, and verify that the 
goals of ACVC 2.0 and 2.1 are met. Moreover, all test objectives and tests (including work in progress) 
will be made publicly visible early in the process. Test developers and reviewers will con­sider and 
act on comments and concerns from users, ven­dors, and the test community. The presentation will conclude 
with a brief summary of cur­rent progress, status, and projected schedule for ACVC 2.0 and2.1. 118  
			