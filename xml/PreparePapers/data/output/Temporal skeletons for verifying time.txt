
  t_ t_ .  entry using theprotectedprocedure PO.Open. If theglobal variable Global is 10 the task 
will call the entry PO.Call and otherwise it will go back and open the object. . task Task2; . task body 
Task2 is . T2: Task ID:=2; . begin . . loop . PO.Open(T 2); if (Global = 10) then . Global := 0; . Work(0.2,0.3, 
T 2); .. PO.Call(T 2); .. end if; .. end loop; .. end Task2; .. Figure 3: The source code of the task 
Task2. The .. task competes with other tasks in calling PO.Open .. .. and it it is possible, but uncertain, 
that it will call PO.Call. .. .. .. The instructions are identi.ed as active or passive. Pas­ .. .. sive 
instructions are turned into passive blocks which are .. merged to form larger blocks. The result is 
shown in Fig­ .. ure 4. .. .. . task Task2; . task body Task2 is .. end if; .. end loop; .. end Task2; 
.. Figure 4: An automaton for the task Task2 super­ .. imposed overthetask ssource code. Thereisatotal 
.. .. of .velocations,tworepresenting activeinstructions .. (dashed line) and three representing passive 
blocks .. (solid line). The dot-and-arrow indicates the .rst .. instruction (block) of the task. .. .. 
.. Sequential passive instructions do not in themselves add .. .. locations to the skeleton. This favours 
large sequences of .. passive instructions as they will contribute little in making the complexity of 
the skeleton grow. Active instructions, however, will increase the skeletons size which is easily mo­tivated 
by the fact that it is the timing behaviour that the skeletons are supposed to describe. There are a 
few things that can be noted in the time skeleton. First, the conditional execution has not been au­tomatically 
transfered to the skeleton, i.e., the value of the variable Global is not present in the model. This 
can be added to the skeletonifitis neededfor the veri.cationbutit isnot added tothetiming skeletonbydefault. 
Theloop line in the source, line 5, and the lines closing other constructs, lines 11 13, are not part 
of any instruction block since they donot add anybehaviourtotheskeletonthatis not already presentintheskeletonstransitions. 
Thesourcelinewith the if conditional, line 7, is in a block since it contains a com­parison which uses 
execution time. If the two calls to the protected object, lines 6 and 10 had been to a non active subroutine 
instead, the whole body of the task, i.e., lines 2 13 could have formed a single passive block. Though 
the closing lines would, following the reasoning above, not need to be included in the block. The skeletons 
can be decorated with .ow information, e.g., the value of the Global variable can be traced and incorporated 
in the skeleton using .ow analysis. Each pas­sive block consists of sequential code for which a BCET 
and WCET can be derived at the desired granularity. The de­rived times can then be used to decorate the 
skeleton to create a skeleton which can be used for veri.cation of the temporal behaviour of the system. 
The skeletons also hide the actual kernel interaction from the user, interaction that is not shown by 
the application source to start with. Hiding this kind of informational noise fromtheuserallowstheuser 
sfocustoremain with thetask of validating that the skeleton describes the source code. Any added noise 
is likely to distract the user s attention and should therefore be avoided in the skeleton. The detail 
will be added to the automaton used in the veri.cation. 5. A BACKEND MODEL The chosenbackendfor modelling 
the run-timekernel and the systems is Uppaal [18]. The main reason behind the choice was that this would 
make it easier to compare the RTK withthekernelpresentedin[20], whichdescribesthe kernel usedin[27]. 
Uppaal uses timed automata to model, simulate execution and verify systems. The transformation tool was 
extended with a backend which re.nes temporal skeletons into Uppaal s timed automat. The transforma­tionusesaset 
of .xed automatapatternstoconstructtimed automata which are compacted to reduce any unnecessary artifacts 
introduced by the application of the patterns. The patternstransformthe skeletonfrom stage2to stage3(ac­cording 
to Figure 1) and a backend model for Task2 is shown in Figure 5. The timed automata representing the 
RTK are added to the backend skeleton to form the veri.cation model whose properties are investigated 
using the veri.cation tool. The RTK automaton for handling protected objects con­tains a location, P 
O.n6, which indicates that a task has tried to queue for an entry for which there is another task queued. 
Veri.cationof thedynamicRavenscarrestriction of the entry queue length in a system can in Uppaal be made 
using the query .O(P O.n6), i.e., it is investigated if the er­ror location eventually can be reached 
in any execution of the system. Other temporal properties that can be veri.ed are, e.g., if a speci.c 
passive block can be, or always will be, reached before or after a given system time n100 Figure 5: 
The automaton used in the veri.cation of Task2. The complexity of the automaton has increased substantially 
compared to the automaton found in Figure 4. how many times a speci.c task will be preempted  how many 
times a loop can be taken, etc.  Ingeneral,thetool allows veri.cation of a)reachability and deadlocks, 
and b) global properties, like that certain con­ditions never occur during execution. Transitions can 
be attributed with counters to gain detailed information about possible executions, e.g., the number 
oftimes a speci.c tran­sition can or will be be used. 6. EXPERIMENT -ARGUS ROBOTS The real casefor the 
tool chainhasbeen software thathas been developed at both Uppsala University and M¨alardalen University. 
The applicationis the control softwarefor soccer playing robots. The robots have been built in several 
con­secutive student projects, and have involved student from severaldi.erent curricula[10] rangingfrom 
mechanical engi­neering over electrical engineering and computer engineering to computer science. 6.1 
Experiment Description The robots are used in the robocup competition2 in the middle sized league. The 
requirements on these robots are that no global sensors are allowed, and the size is 50 cm in diameter 
and at least 40 cm high but less than 80 cm. The weight of our robots is limited to 18 kg. The robots 
have omnidirectional drive, i.e., a robot can travel in any direction and rotate around any point inside 
or outside the robot s diameter. The sensor system include two or more video cameras, ultra sonic range 
sensors, infrared range sen­sors, up to24 re.ective sensors undertherobot, and sensors that indicate 
that the ball is in the kick postion. Com­munication between robots and a server that is o.-.eld is by 
VLAN (802.11b). All sensors are handled by a micro­controller(AtmelMega16) and the communicationbetween 
these controllers and themainCPUisby aCAN-bus. Later robot versions use an optical CAN bus which allows 
a more modular robot design. 2 www.robocup.org All communication is interrupt driven and one task han­dlesallinterruptsfromtheCAN-bus(through 
aprotected object) and messages are directed towards various bu.ers (implementedasprotected objects). 
Eachsensorhasitsown handler whichreads sensordatafrom thebu.erholdingdata for it. The entry of the protected 
object is used for this ac­cess. A similar setup is used for the VLAN-communication. The is a sensor-fusion 
layer which builds a world-view, that both containsthe own robot sposition anddirection as well as other 
robots positions(including opponent robots ) and the ball s. Tasks in this layer use data from the sensors 
on the robot as well as world-view data from the other robots. The result of the sensor-fusion layer 
is sent to the strategy layer, where an AI-system makes decisions about what ac­tions the root should 
carry out, i.e., where to move, how to rotate and if the kicker mechanism should be .red. The control 
software is written in Ada using the Raven­scar pro.le. The .rst version of the robots used a standard 
PC-104 with LINUX as operating system. Subsequent ver­sions use the Xilinx Virtex II Pro chip which has 
an in-built PowerPC. VxWorks is used to control the PowerPC. The software has evolved over several years, 
and the stu­dents have a chance to work with real code, and have to face all the issues that are related 
to maintain other stu­dents code. The size of the problem makes it impossible to rewrite the whole of 
it every course instance. It is not only a stimulating project, since there are so many challenges, but 
it is also a project which resembles a real world system. Still, the system is in-house and there are 
no hassles added by, e.g., the NDA s which would be required when working with industrial software. 6.2 
Experiment Results Model extraction distilled the 16 tasks and 30 protected objects that the program 
consisted of. Most tasks and pro­tected objects were simple, but a handful were complex and interacted 
with the simpler ones using theprotected objects. The .rst transformation phase created initial skeletons 
that together used approximately 3000 locations and 1400 transitions. By the end of the passive block 
phase, where sequentialpassiveinstructionshadbeen mergedintopassive blocks,themodelhadbeenreducedto700locations 
andless than 800 transitions. It can be noted that the construction of passive blocks identi.ed one passive 
block consisting of 140 lines of source code and that this block called many routines in other packages. 
The model extraction identi.ed and inserted instructions for the updating of the 20 barrier variables 
used by the protected objects. Most of theprotected objects are simple and used toblock or unblock the 
protected object s entry but they all have unique identities and values like priorities that need to 
be set. The subsequent transformation into the timed automata used by Uppaal resulted in a model containing 
1300 loca­tions and 1700 transitions. The layout of the target au­tomata is also automated and tries 
to minimise the number of crossing edges whilekeeping thelocations asclose aspos­sible together. The 
algorithm works .ne for small graphs but will result in a coarse layout for larger automata. The automaton 
for the Start Player task is shown in Figure 6. Veri.cation was attempted but, as expected, dead-locked 
fairlypromptly duetothelack of areal-world model needed to generate the startup data the controller task 
requested n3544 n3545 n3546 n126 n3551 n3552 n124 time <= w n171n172 n188 n3627 n3553 n3554 n3555 n3556 
n3559 n3560n3562 n3565 n3626 n3566 n131 time <= w time <= wn3561 time <= w time <= w n3619 n3620n3623 
n3621 n3622 n3625 n3624 time <= w n3651 n3652 n3653 n3654 n3656 time <= w n132n3617 n227n3628 n3618 n3655 
Rt == t n3549 n3550 run? n3616 time <= w create! n3630 Rt == t n3650 n3563 Rt:=t, Rp:=p runnable! nopreempt? 
Rt == t Rt == t run? preempt? b:=time+BCET2, w:=time+WCET2 preempt? time <= w n3629 Rt == t Rt == t run? 
 Rt == t Rt == t Rt == t changep! preempt? nopreempt? n228 n3564 time >= b, time <= w run? Rt == t Rt 
== t Rt:=t, Rp:=p n3567 b+=time-stoptime, w+=time-stoptime, stoptime:=0 Rt == t run? time >= b, time 
<= w Rt == t run? run? Rt == t Rt == t Rt == t Rt == t b+=time-stoptime, w+=time-stoptime, stoptime:=0 
Rt == t Rt == t nopreempt?run? preempt?changep! run? preempt? preempt? Rt == t preempt? Rt:=t, Rp:=p 
b+=time-stoptime, w+=time-stoptime, stoptime:=0 time <= wstoptime:=time stoptime:=time preempt? endcall? 
 stoptime:=time Rt == t Rt == t Rt == t call! Rt == t preempt? run? Rt == t Rt == t n3631 Rt:=t, Rpo:=RPO24, 
Rpy:=RPY24, Rpc:=RPC24endcall? n3648 stoptime:=time b+=time-stoptime, w+=time-stoptime, stoptime:=0 run? 
true Rt == t true preempt? n3568 n3547 Rt == t b+=time-stoptime, w+=time-stoptime, stoptime:=0 run? stoptime:=time 
time >= b, time <= w Rt == t run? Rt == t b:=time+BCET3, w:=time+WCET3 b+=time-stoptime, w+=time-stoptime, 
stoptime:=0 n3548 Rt == t run? b+=time-stoptime, w+=time-stoptime, stoptime:=0 preempt? b:=time+BCET4, 
w:=time+WCET4Rt == t Rt == t preempt? time <= w b:=time+BCET33, w:=time+WCET33 stoptime:=time Rt == t 
n3649 run? time >= b, time <= w stoptime:=time preempt? changep! Rt == t preempt? b+=time-stoptime, w+=time-stoptime, 
stoptime:=0 stoptime:=time n173 Rt == t b:=time+BCET23, w:=time+WCET23endcall? Rt:=t, Rp:=RPOP24 time 
>= b, time <= w n3632 n3644 call! time >= b, time <= w preempt? Rt:=t, Rpo:=RPO22, Rpy:=RPY22, Rpc:=RPC22 
n187 time >= b, time <= w true n3647 true n3646 Rt == t n222 true call! b:=time+BCET9, w:=time+WCET9 
run? n3645 b:=time+BCET6, w:=time+WCET6 Rt:=t, Rpo:=RPO32, Rpy:=RPY32, Rpc:=RPC32 n3642 b:=time+BCET7, 
w:=time+WCET7 n3643 n190 n181time <= w changep! time <= w time >= b, time <= w Rt:=t, Rp:=p Rt == t run? 
time >= b, time <= w true    n182 Rt == t run? Rt == t n3641 Rt == t preempt? b:=time+BCET8, w:=time+WCET8 
true b+=time-stoptime, w+=time-stoptime, stoptime:=0Rt == t preempt? n159 n3586 nopreempt? Rt == t Rt 
== t time <= w b:=time+BCET10, w:=time+WCET10 preempt? preempt? delay_until! Rt == t stoptime:=time Rt 
== t Rt == t nopreempt?run? Rt == t Rt:=t, Rp:=p, Rd:=DELAY1 preempt? Rt == t n3633 Rt == t run? nopreempt? 
b+=time-stoptime, w+=time-stoptime, stoptime:=0 time >= b, time <= w preempt? stoptime:=time Rt == t 
Rt == t stoptime:=time Rt == t run? time <= w run? time >= b, time <= w time >= b, time <= w b+=time-stoptime, 
w+=time-stoptime, stoptime:=0Rt == t b+=time-stoptime, w+=time-stoptime, stoptime:=0preempt? stoptime:=time 
run? b:=time+BCET31, w:=time+WCET31 n3587 n3585 n3634 n3589 Rt == t Rt == t n3657 time >= b, time <= 
w Rt == t run? preempt? b+=time-stoptime, w+=time-stoptime, stoptime:=0 preempt? n176 stoptime:=timetime 
>= b, time <= w stoptime:=time time >= b, time <= wRt == t Rt == tnopreempt? run? n3588 b+=time-stoptime, 
w+=time-stoptime, stoptime:=0 n3584 n175 n3635 changep! Rt:=t, Rp:=RPOP32 n3583 n3615time <= w n3658 
Rt == t Rt == t b:=time+BCET0, w:=time+WCET0preempt?run? n3636 trueb+=time-stoptime, w+=time-stoptime, 
stoptime:=0 stoptime:=time b:=time+BCET30, w:=time+WCET30 Rt == t n3659 b:=time+BCET25, w:=time+WCET25 
time >= b, time <= w b:=time+BCET29, w:=time+WCET29 run? Rt == t time >= b, time <= w n3716 Rt == t true 
preempt? nopreempt? n3715 n3637 n3590 Rt == t Rt == t changep! nopreempt? preempt? Rt:=t, Rp:=RPOP34 
time <= w time <= w stoptime:=time b:=time+BCET5, w:=time+WCET5Rt == t n3557 Rt == trun? Rt == t n3582 
n3638 Rt == t preempt? Rt == t b+=time-stoptime, w+=time-stoptime, stoptime:=0 nopreempt? run? Rt == 
t preempt? n3660 time <= w Rt == t Rt == t run? b+=time-stoptime, w+=time-stoptime, stoptime:=0 run? 
changep! Rt:=t, Rp:=RPOP17 preempt? changep! stoptime:=time Rt:=t, Rp:=p Rt == t    n170 n3558 run? 
call! Rt:=t, Rpo:=RPO34, Rpy:=RPY34, Rpc:=RPC34 n3639 Rt == t preempt? time <= w call! n3591 Rt:=t, Rpo:=RPO17, 
Rpy:=RPY17, Rpc:=RPC17Rt == tRt == t true preempt?run? n3592 time >= b, time <= w b:=time+BCET26, w:=time+WCET26 
b+=time-stoptime, w+=time-stoptime, stoptime:=0 stoptime:=time n3640 true Rt == t n3580 n3662 time >= 
b, time <= w endcall? b:=time+BCET27, w:=time+WCET27 n3581 b:=time+BCET28, w:=time+WCET28 n3661 n220 
Rt == t endcall? n3726 n216 Rt == t Rt == t Rt == t changep! endcall? preempt?run? Rt:=t, Rp:=RPOP22 
Rt == t b+=time-stoptime, w+=time-stoptime, stoptime:=0 run? stoptime:=time Rt == t Rt == t run? preempt? 
 n3614 Rt == t Rt == t preempt? run? n3579 Rt == t n3613 stoptime:=time n3725 b+=time-stoptime, w+=time-stoptime, 
stoptime:=0 preempt? call! time <= w Rt == t Rt == t Rt:=t, Rpo:=RPO16, Rpy:=RPY16, Rpc:=RPC16 n3593n3724 
nopreempt? run? b:=time+BCET48, w:=time+WCET48 Rt == t Rt == t preempt? preempt? changep! n158 Rt == 
t n169 n3723 Rt:=t, Rp:=p run? time >= b, time <= w Rt == t run? n3594 Rt == t preempt? n150 changep! 
n3663 Rt:=t, Rp:=p n160 changep! Rt:=t, Rp:=p Rt == tRt == t Rt == t nopreempt? preempt? endcall? stoptime:=time 
time >= b, time <= w Rt == t  n3611 run? n3722 b+=time-stoptime, w+=time-stoptime, stoptime:=0 n3612 
n3686n3688n3574 n3664n191n3685n3573 n3577 time <= w n3684 Rt == t n3687 preempt? call! time <= w n3721 
Rt:=t, Rpo:=RPO50, Rpy:=RPY50, Rpc:=RPC50 Rt == t n3720 preempt? Rt == t Rt == t n156 preempt? Rt == 
t preempt? Rt == t Rt == t Rt == t n3578 run? nopreempt? nopreempt? Rt == t endcall? call! Rt == t run? 
Rt:=t, Rpo:=RPO41, Rpy:=RPY41, Rpc:=RPC41 Rt == t b:=time+BCET21, w:=time+WCET21 changep! nopreempt? 
run? Rt == t Rt == t Rt == t Rt:=t, Rp:=RPOP16 run? run? n155 preempt? Rt == t n201 n3683 Rt == t nopreempt? 
 run? Rt == t preempt? Rt == t n3609 time >= b, time <= w nopreempt? n219n3719 Rt == t run? b+=time-stoptime, 
w+=time-stoptime, stoptime:=0  n3610 n217 true Rt == t preempt? b:=time+BCET13, w:=time+WCET13 Rt == 
t Rt:=t, Rp:=p run? true changep! stoptime:=time changep! Rt:=t, Rp:=p time >= b, time <= w Rt == t b+=time-stoptime, 
w+=time-stoptime, stoptime:=0 preempt? stoptime:=time n3689n3608 n3571 true time >= b, time <= w time 
<= w b:=time+BCET15, w:=time+WCET15 n3682 n202 n3717 n3572 n3681 Rt == t Rt == t preempt?run? time <= 
w time >= b, time <= w Rt == t changep!true Rt:=t, Rp:=RPOP41 endcall? changep! time <= w true n3690 
n3665 Rt:=t, Rp:=RPOP50 Rt == t b:=time+BCET12, w:=time+WCET12 preempt? n3718 Rt == t Rt == t Rt == t 
stoptime:=time time <= w n3666 n3607 run? preempt? preempt? b+=time-stoptime, w+=time-stoptime, stoptime:=0 
stoptime:=time Rt == t nopreempt? Rt == t run? b:=time+BCET35, w:=time+WCET35 b+=time-stoptime, w+=time-stoptime, 
stoptime:=0 Rt == t run? n3606 Rt == t n199 run? b+=time-stoptime, w+=time-stoptime, stoptime:=0 b:=time+BCET49, 
w:=time+WCET49 Rt == t preempt? true n198 time >= b, time <= w stoptime:=time Rt == t run? call! b+=time-stoptime, 
w+=time-stoptime, stoptime:=0 Rt:=t, Rpo:=RPO20, Rpy:=RPY20, Rpc:=RPC20 Rt == t preempt? stoptime:=time 
 n3605 Rt == t Rt == t preempt? run? n168 n3704 n3703 true time <= wRt == t b:=time+BCET40, w:=time+WCET40 
time >= b, time <= w run? b+=time-stoptime, w+=time-stoptime, stoptime:=0 n193 Rt == t nopreempt? Rt 
== t preempt? stoptime:=time n3667 b:=time+BCET14, w:=time+WCET14 time >= b, time <= w n207 n3576 time 
<= wn3569 n148  true time >= b, time <= w n3679 n3575 n3668 n192time <= w time <= w n3570 time <= w 
n3680 Rt == t preempt? stoptime:=time n205 n3693 Rt == t run? changep! Rt == t Rt == t run? Rt:=t, Rp:=RPOP20 
time <= w b+=time-stoptime, w+=time-stoptime, stoptime:=0 b:=time+BCET39, w:=time+WCET39 preempt?b+=time-stoptime, 
w+=time-stoptime, stoptime:=0 n3695 time >= b, time <= w stoptime:=time n3669 n3694 time >= b, time <= 
w time >= b, time <= w time <= w n3670 Rt == t preempt?Rt == t Rt == t run? preempt? b+=time-stoptime, 
w+=time-stoptime, stoptime:=0 stoptime:=time stoptime:=time Rt == t preempt? n195 Rt == t stoptime:=time 
run? n3697 true Rt == t b+=time-stoptime, w+=time-stoptime, stoptime:=0 b:=time+BCET36, w:=time+WCET36 
Rt == t run? run? b+=time-stoptime, w+=time-stoptime, stoptime:=0 Rt == t b+=time-stoptime, w+=time-stoptime, 
stoptime:=0 n3696 nopreempt? true n213 Rt == t changep! preempt? b:=time+BCET37, w:=time+WCET37 b:=time+BCET11, 
w:=time+WCET11 Rt == t Rt:=t, Rp:=RPOP44 stoptime:=time preempt? true time >= b, time <= w Rt == t b:=time+BCET43, 
w:=time+WCET43 run? n204 n211 n3705 n3709 n196 n3707 n3706 b:=time+BCET45, w:=time+WCET45 time <= w time 
>= b, time <= wRt == t preempt? n3692 n3671 stoptime:=time call! Rt:=t, Rpo:=RPO44, Rpy:=RPY44, Rpc:=RPC44 
 Rt == t n3708 run? n210Rt == t Rt == t Rt == t b+=time-stoptime, w+=time-stoptime, stoptime:=0 n3691run? 
preempt? nopreempt? true time >= b, time <= w time <= w n3698 Rt == t  n162 preempt? stoptime:=time 
n163 time >= b, time <= w Rt == t n208 run? b+=time-stoptime, w+=time-stoptime, stoptime:=0changep! Rt:=t, 
Rp:=RPOP47 changep! n3678 Rt:=t, Rp:=RPOP38 call! Rt:=t, Rpo:=RPO47, Rpy:=RPY47, Rpc:=RPC47 true n3672 
n3673 Rt == t Rt == t n3710 nopreempt? run? b:=time+BCET46, w:=time+WCET46 n3677 Rt == t nopreempt? Rt 
== t b:=time+BCET42, w:=time+WCET42 endcall? preempt? Rt == t true Rt == t preempt? n3699 Rt == t run? 
n3701 n3674 nopreempt? n3702 Rt == t Rt == t run? n166 n3712 Rt == t call! endcall? Rt:=t, Rpo:=RPO38, 
Rpy:=RPY38, Rpc:=RPC38 n3700 changep! Rt == t n3675 Rt == t Rt:=t, Rp:=p preempt? preempt? changep! 
Rt == t Rt:=t, Rp:=p n3711 true run? Rt == t Rt == t run? preempt? Rt == t endcall? n3604 n3676 Rt == 
t Rt == t n3595 preempt? run? n3596 n3603 time <= w  true Rt == t b:=time+BCET18, w:=time+WCET18 run? 
n165 Rt == t nopreempt? Rt == t preempt? Rt == t preempt? n3601 stoptime:=time changep! Rt:=t, Rp:=p 
Rt == t run? n3602 b+=time-stoptime, w+=time-stoptime, stoptime:=0 time >= b, time <= w changep! Rt:=t, 
Rp:=p  n3597 n214 Rt == t run? n3600 n3713 Rt == t preempt? Rt == t n3598 nopreempt? Rt == t endcall? 
 changep! Rt == t Rt == t Rt:=t, Rp:=RPOP19 preempt? run? n3714   n3599 Rt == t nopreempt? call! Rt:=t, 
Rpo:=RPO19, Rpy:=RPY19, Rpc:=RPC19 Rt == t preempt? Rt == t run? Figure 6: The target automaton for 
the main task, Start Player, of the Argus robots. from external sensors and units. The creation of a 
model of the environment was not attempted in this experiment. 7. CONCLUSIONS AND FUTURE WORK This paper 
presents a notation of timing skeletons that can be used to describe a tasking application. Superimpos­ing 
the skeletons over the source code is straight forward which makes it easy to validate that they model 
the source. The low detail of the skeletons, i.e., the intentional hiding of detail not needed prior 
to the veri.cation, makes them easier to understand, perhaps even understandable to non­specialists in 
veri.cation. The skeletons can be extended and annotated with additionalinformation to add, e.g., con­trol 
.ow information and guidance to the veri.cation. The skeletons are extracted from source code using a 
tool to allow the use of them to enter the development process late, and  reduce the risk that theydo 
notdescribe the system as the system is updated, they can be re-extracted when the application changes. 
 The notion of passive blocks, sequences of instructions not interfering with the system s time .ow, 
creates a situ­ation where skeletons are less likely to grow in complexity when sequential computation 
is added to an application. The complexity of a skeleton grows when timing behaviour is added. There 
are some areas that can be further improved to create a more automated framework for veri.cation of real­time 
systems. Annotation of execution times, today added manually, can be automated. This would greatly improve 
the usability of the framework. As the veri.cation impact of the RTK backend model is so large it needs 
to use all power available to the backend veri.cation tool in order to make veri.cation e.ective. This 
has lead us not to transform the RTK into the backend no­tation using a tool. Investigation of the possibilities 
of au­tomatic backend model generation could be investigated to allow easier use of additional veri.cation 
tools. 8. REFERENCES [1] Association ofComputingMachinery(ACM)Special InterestGroup onAda(SIGAda) ASISHomePage. 
http://www.acm.org/sigada/WG/asiswg/ [2] G. Behrmann, A. David, and K. G. Larsen, A Tutorial on Uppaal 
, Formal Methods for the Design of Real-Time Systems: 4th International School on Formal Methods for 
the Design of Computer, Communication, and Software Systems, 2004. [3] J. Bengtsson, and Wang Yi, Timed 
Automata: Semantics, Algorithms and Tools , Lecture Notes on Concurrency and Petri Nets, W. Reisig and 
G. Rozenberg(eds.), LNCS 3098, Springer-Verlag, 2004. [4] A. Burns, B. Dobbing, and G. Romanski, The 
Ravenscar Tasking Pro.le for High Integrity Real-Time Programs , Reliable Software Technologies Ada-Europe 
1998, LNCS 1411, L. Asplund, ed., Springer-Verlag, 1998. [5] A. Burns, B. Dobbing, and T. Vardanega, 
Guide for the use of the Ada Ravenscar Pro.le in hight integrity systems , University of York Technical 
Report YCS-2003-348, 2003. [6] A. Burns, and T-M. Lin, AddingTemporal Annotations and Associated Veri.cation 
to the Ravenscar Pro.le , Reliable Software Technologies Ada-Europe 2003, LNCS 2655, J-P. Rosen and 
A. Strohmeier, eds., Springer-Verlag, 2003. [7] D. Bustard, and A. Winstanley, Making Changes to Formal 
Speci.cations: Requirements and an Example , Transactions on Software Engineering, 20(8), IEEE, 1994. 
[8] W. Colket, Code analysis ofsaftey-critical and real-time software using ASIS , Proceedings of the 
1999 annual ACM SIGAda international conference on Ada(SIGAda 99), ACM, 1999. [9] J. Corbett, Timing 
Analysis of Ada Tasking Programs , IEEE Transactions on Software Engineering, vol. 22, No. 7, 1996. 
[10] M. Daniels and L. Asplund, Multi-Level Project Work; a Study in Collaboration , in Proceedings to 
IEEE Frontiers in Education conference, IEEE, 2000 [11] N. Dulac, T. Viguier, N. Leveson, and M-A. Storey, 
On the Use of Visualization in Formal Requirements Speci.cation , International Conference on Requirements 
Engineering, 2002. [12] S. Evangelista, C. Kaiser, J-F. Pradat-Peyre, and P. Rousseau, Quasar: A New 
Tool for Concurrent Ada Programs Analysis , Reliable Software Technologies Ada-Europe 2003, LNCS 2655, 
J-P. Rosen and A. Strohmeier, eds., Springer-Verlag, 2003. [13] S. Evangelista, C. Kaiser, J-F. Pradat-Peyre, 
and P. Rousseau, Verifying Linear Time Temporal Logic Properties of Concurrent Ada Programs with Quasar 
, Ada Letters, vol. XXIV, No. 1, ACM    
			