
 A FIXED GRID CURVE REPRESENTATION FOR EFFICIENT PROCESSING Warren Burton, Michigan Technological University 
Houghton, Michigan ABSTRACT A compact form of representation for curves and regional boundaries is 
described. A curve is approximated by a polygonal line where each side Joins a grid point to one of 
its eight nearest neighbors (as is done in the commonly used chain-encoded representation). Vertex number 
(2k + I)2 m is defined relative to vertex number k2 m+l. The resulting representa- tion requires about 
5 bits of storage per vertex, irrespective of the total length of the curve. Sections of a curve may 
be collectively examined. Typically, that part of the curve between vertices number k2 TM and (k + i)2 
TM, for some k and m, is considered. Given the locations of the endpoints of a section and the number 
of sides in the section, it is easy to compute a bounding rectangle which must completely contain the 
section. Often, this is all the information we need know about a section. For example, to two sections 
cannot intersect if their bounding rectangles do not overlap. When necessary, a section can be easily 
divided into smaller two sections, each of which can be examined in turn. This process may be continued 
down to single sided sections if necessary. Under favorable circumstances, for an n sided approximation 
to a closed curve, the time required to determine if a point is inside the curve is independent of 
n. The intersection of n sided approximations to two curves can usually be found in 0(In n) time. 
KEY WORDS AND PHRASES: cartography, chain- encoding, computational geometry, contour representation, 
geographical information pro- cessing, graphics, grid based representation, line-drawing processing, 
points in polygons, polygons, regional boundary representation, searching, spatial information. CR 
CATEGORIES: 3.14, 3.23, 3.30, 3.79, 8.2  I. INTRODUCTION There are a number of ways to represent an 
 approximation to a planar curve in a computer. With the chain-encoded method (4), the curve is overlaid 
with a grid, as shown in Fig. i. Each time the curve crosses a grid line the nearest grid point is noted. 
When these grid points are linked together in order, we get a polygonal approximation such as the one 
shown in Fig. 2. Each side of the resulting polygonal llne joins a grid point to one of its eight nearest 
neighbors. The polygonal line can be very compactly represented by a starting point and a string of octal 
digits, where each octal digit indicates the direction to the next vertex. Unfortunately, vertices may 
only be accessed in sequential order when this method of represen- tation is used. This is fine for short 
curves but can be very expensive when long curves are used in search type operations. h I L i I i -~: 
-@ -/z+ -+ --+ -+ -, -+ --, -'~ --~ -4 i p ~ i I l i f I I I I ! -"+ + -, + ~ + -+ - -+ --~ -+ -4 
i ill l J , ~1 I I I~ i ' s::" :/ :_'_:\: _" :/'" : ............. 4 I l i ; t/ I t i I \l I / 1 I I 
I i / I I I I I I I I I , ; ! /" ; ! i I I I I I I I i. -+ -¥"-@ -i -+ - -~ -÷ -t -+ -~ -4 I i ; ~ I 
I I i I I I Figure 1 An alternative approach is to approximate a curve with a polygonal line and represent 
the curve by a list of vertices. If we do not require that the vertices be located at grid points, fewer 
vertices are required. The binary searchable polygonal representation, or bspr (2), uses this approach 
but requires that certain additional information be stored. The additional information facilitates the 
rapid searching of polygonal lines. The key idea behind the bspr is that a section, or set of consecutive 
sides, of a polygonal llne  64 can be examined collectively. For each section examined, a bounding 
rectangle which completely contains the section is known (either stored or easily computable, depending 
on the section). When necessary, it is always possible to split a multlple-slded section into two subsections 
and examine each separately. To compute the inter- section of two curves, for example, we proceed as 
follows. f , I I nnl In t Inn 14t% 14o '~,~ I I ! 9, / % t I .~'-~/--~ / I I I I I I~llr. t ! . + -I 
 I I .% ill/I I I I I I I I \ I~ C I -r'l- --+ -~ --~-.--~ -+ -+ -e - -+ -~-. \Ad] I , ~ ), , , ~ ,^ 
, , , | 8,-÷-.~.ff,--~-b -/ ~~--.%----~~ ..... *-.4~'% , , ._, /~-:) , , , /, ,\ , , , /' , ...... } 
-" -3 z: I I I I I I I I ~! I ~ i" ...... ,, I I I I I I I I ! I ; o 'o- ~t-~--s-~,~.-%- %- ~z-~e-"-~ 
" i:.:-?,_/~ Figure 2 If the bounding rectangles of two polygonal lines do not overlap then the polygonal 
lines cannot intersect. If the two polygonal lines each consist of a single line segment then any point 
of intersection can be quickly computed. In all other cases, the polygonal line with the larger bounding 
rectangle should be split into two sub- sections and the points of intersection between the other original 
polygonal line and each of these new subsections must be found in turn, in a recursive manner. This results 
in what is essentially a binary search for the points of intersection. Similar search strategies exist 
for other problems. A paper by Boyell (I) suggests an approach by which it is possible to combine the 
advantages of the bspr and the chain-encoded representation. The resulting structure, called the binary 
searchable grid chain representation or bsgcr, is described in section 2. Algorithms for pro- cessing 
a bsgcr are described in section 3. These algorithms are briefly analyzed in section 4 and several extensions 
to this work are considered in section 5. Section 6 is the conclusion. 2. THE DATA STRUCTURE The chain-encoded 
representation is compact because each vertex is defined relative to the previous vertex. The bspr can 
be searched quickly since sections can be considered collectively. The bsgcr will be based on a chain. 
Let v(i) denote the ith vertex with vertices numbered as in Fig. 2. When searching we will only consider 
 sections running from v(i2 m) to v(max(n,(i + l)2m)) for some integers i and m, where n is the number 
of sides in the chain. When using a search such as the one described in the introduction, for i odd 
v(i2 TM) will be first required when the section running from v((i -i)2 m) to v(max(n,(i + l)2m)) i~ 
split. (Note that (i -i)2 m = ((i -i)/2)2 m~± Hence we can define vertex i2TM relative to vertex (i 
- i)2TM. For example, in Figure 2, vertices 19, 20, 21, 22, 23 and 24 are defined relative to vertices 
18, 16, 20, 20, 22 and 16 respective- ly. Vertex number i2 m can be defined by a string of 2m + 3 bits. 
If m=0 then the vertex is defined relative to the previous vertex. We recall that this requires i octal 
digit or 3 bits. If m 0 then the x coordinate difference from v((i -i)2TM) to v(i2 TM) is in the range 
-2m ! dx(i2m) ! +2m, noting that the x coordinate value can differ by at most one from one vertex to 
the next. Since the y coordinate difference has the same range, the difference pair can have any one 
of (2 m+l + 1) 2 values. Since (2 m+l + 1) .2 < 22m+~ for m 0, the difference pair can be represented 
by 2m + 3 bits. This means that 3 bits are required for every other (odd numbered) vertex, 5 bits for 
every fourth vertex, 7 bits for every eighth vertex, and so forth. On average, just under 5 bits per 
vertex are required for these relati%e differ- ences. We will use dv(i) to denote the string of bits 
which defines v(i) relative to some previous vertex. The complete bsgcr consists of some fixed length 
header information and the strings of bits, dv(1) for i < i < n, listed in vertex order. The header information 
includes the endpolnts of the curve, a tight fitting bounding rectangle for the curve, and the number 
of sides in the chain.  3. THE ALGORITHMS The algorithm for finding the points of inter- section of 
two bspr's, as described in the introduction and in (2), can be used for bsgcr's also. The section length, 
rather than bounding rectangle slze, will determine which section is to be split. A bounding rectangle 
can be computed for each section which is examined by the algorithm. Theorem i: Given the number of 
sides, n, of a section and the coordinates of the endpoints, (xa,ya), (xb,yb), of the section, then the 
entire section must be contained in a rectangle with corners at (xmin,ymin), (xmax, ymln), (xmax,ymax) 
and (xmln,ymax) where xmln = ~xa + xb -n)/27 xmax = ~(xa + ab + n)/2J ymin = ~ya + yb -n)/2] ymax 
= ~(ya + yb + n)/2]. Proof: Since llne segments are convex, some  vertex, (xleft,yleft), must be as 
far to the left as any point in the section (taking left to be in the negative x direction, as usual). 
Since the chain contain only n segments and the x coordinate value can change by at most one along any 
segment, it follows that (xa -xleft) + (xb -xleft) in" This implies that xleft > (xa + xb -n)/2. 
Since vertices must have integer coordinates, xleft ~xmin = ~xa + xb -n)/~ . The other three parts 
to the proof are similar.  Note: This means that a section must be com- pletely contained in a n × n 
square centered on the midpoint of the chord Joining the endpoints of the section. When the bounds of 
this square do not all have integer values, the square can be reduced to an (n -i) x n or n × (n -i) 
or (n -i) × (n -i) rectangle.  This reduces the problem down to determining the locations of the endpoints 
of each section. We will need another theorem in order to know where to look for the strings of bits 
defining the endpoints of particular sections. Theorem 2: The total number of bits required to store 
the values dv(1), for 1 < i < n, is Z(n) = 5n -2k(n) where k(n) is the number of 1 bits in the binary 
representation of n. Proof: We first consider the case where n = 2 m -1 for some integer m. For m = 
i, ~(i) = 3 since dv(1) always requires 3 bits. For m i, £(2 m -i) = Z(2 m-I -i) + 2m + 1 + £(2 m-I 
-i), since Z(2 m-I -i) bits are required for dv(1) through dv(2 m-I ~ i), 2m + 1 bits are required for 
dv(2m-±), add £(2 m-I -i) bits are required for dv(2 m-I + i) through dv(2 TM -i). We can easily confirm, 
by induction, that £(2 m -i) = 5(2TM -i) -2m. Since £(2 m) = £(2TM -i) + 2m + 3, with dv(2 m) requiring 
2m + 3 bits, we have Z(2 m) = 2m5 -2. Finally, if n has k(n) 1 bits in its binary k(n) 2J i representation, 
then n = ~ for some i=l k(n) {Ji}i=l with J l TM J 2 "'" > J~$n) >-- 0. k(n) " Clearly, ~(n) = I 
~(2 Ji) since i=l dv(l + Pl I- 2 jl) through dv( ~ 2 ji) will i=l i=l require £(2 jp) bits. Hence Z(n) 
= k(~)(2Jib--2) = 5n -2k(n). i=l Corollary: The total number of bits required to store the values of 
dv(i), for J2 TM < i < (J + i)2 m iS Z(2 m -i) = 5(2 m -I) -2m. These results confirm that we need an 
average of  just under 5 bits of storage per vertex for the variable length portion of the bsgcr. They 
also tell us where to look for the bit strings de- fining particular vertices. For example, suppose 
a section running from v(24) to v(32) of some bsgcr must be split. We need to determine the location 
of v(28) which is defined relative to ~24)~ By the corollary we know that there are 5(~ -i) -2 2 = ii 
bits (represent- ing dv(25), dv(26) and dv(27) of lengths 3, 5 and 3 respectively) which must be skipped 
in going from the end of bit string dv(24) to the start of dv(28). Similarly, if the section from v(64) 
to v(128) is to be split, then the string of bits between dv(64) and dv(96) is 5(25 -i) -2 . 5 = 145 
bits long. (Clearly it is desirable to have a table giving 5(2 m -i) -2m for various values of m, rather 
than to repeatedly compute these values.) There are other interesting search algorithms. To determine 
whether a point is inside a closed curve, a line crossing algorithm is used. A point is inside a closed 
curve if and only if a ray originating at the point crosses the curve an odd number of times (going from 
inside to outside or visa versa with each crossing.) We will select a ray going to the right. If the 
point is not inside the rectangle bounding a section, then it is easy to determine whether the ray crosses 
the section an odd or even number of times from the location of the bounding rectangle and the loca- 
tions of the endpoints of the section. If the point is inside the rectangle and the section contains 
more than one side, then the section must be split. If the section contains a single side, then it is 
easy to determine if the ray crosses the section. This algorithm is consider- ed in more detail, in the 
context of the bspr, in (2). A number of other search type problems, such as finding the minimum distance 
between two curves, can be efficiently solved by using bsgcr's. 4. ANALYSIS In this section we will 
consider two simple problems in order to gain an understanding of the asymptotic behavior of the intersection-of-curves 
and the polnt-lnside-of-a-closed-curve algorithms. We will also briefly consider how tightly a computed 
bounding box is likely to fit a section of a curve. The problem of determlning whether a point is in- 
side a circle will be the first problem consider- ed. We willlassume that the circle is approxi- mated 
by a 2 j sided chain where j is some large integer. The initial and final vertices, which are identical, 
should be located at the extreme right point of the circle. If a point is outside the bounding rectangle 
of the circle, then it is possible to determine immediately that the point is outside the circle. We 
will consider points located randomly, with a uniform distribution, inside the bounding rectangle, which 
is in fact a square. The cost of the containment determination will be  measured in the number of sections 
which must be split, noting that 2k + i sections are examined when k sections are split. This problem 
has been considered in the analysis of bspr's [2]. We will take a similar but less detailed approach 
here. All sections running from i2m+ v((i + l)2m), for some integers i and m, are candidates for consideration. 
Exactly those sections which con- tain the point being tested in their bounding rectangles must be split. 
Without loss of gener- ality we can take the area of the original bound- ing rectangle to be one, so 
the probability that the point lies in some region of this rectangle is equal to the area of the region. 
This means that the radius of the circle must by 1/2. Clearly the point is in the rectangle of the complete 
circle and the two top level subsections (half circles), giving 3 sections which must be split for every 
point. It is easy to confirm that the expected number of computed quarter circle bounding rectangles 
which contain the randomly placed point is a little less than i. 5 (excluding the area outside the original 
tight fitting box.) This brings the total to 4.5 sections. It is also easy to confirm that for a grid 
width of d a circle is approximated by about 2/2(i/d) sides. (In the first eighth circle each side has 
a positive y component. The total y gain is /2/4 by simple geometric computation.) If we divide the circle 
into 2 TM sections, each contains about /2/2m-l(i/d) sides and has a cqmpwted ~ounding rectangle containing 
about i/2zm-o(i/dZ) grid squares. The total area of each rectangle is i/22m-3. There are 2 m such rectangles 
with total area i/2 m-3. Some of this area will lie outside the original tight-fitting bound so the argument 
will give us an upper bound. It follows that the total number of sections which must be split is less 
than 4.5 + [ i/2 m-3 = 6.5, giving a upper i=3 bound on the expected amount of required pro- cessing 
which is independent of the precision to which the circle is approximated. We expect to split less 
than 6.5 sections, or equivalently, less than 14 sections are examined. Of course, the closer the point 
is to the circle, the greater the number of sections which must be split. Figure 3 shows a typical 
point, a very precisely defined circle and the computed boxes for those sections which are examined 
but not spllt. The number of sections examined and split is always one less than the number of sections 
examined but not split. The boxes indicate the precision to which different parts of the circle must 
be examined. Figure 4 shows similar information for a point which is very near the curve. If we were 
to solve the same problem by computing the distance from the center of the circle to the point, then 
the number of significant digits to which the computation would need to be carried would depend on how 
close the point was to the circle. The number of digits required would tend to vary directly with the 
number of section splits required for the binary search method. In the first case we are computing a 
distance, in the second we are searching for a crossing point. In both cases we continue our computation 
until our answer is sufficiently accurate to determine point containment. Figure 3 Figure 4 We will 
now tur~ our attention to the problem of finding the points of intersection of two curves. Again we turn 
to a simple and admittedly well- behaved example. Consider two straight lines, both approximated by 
chains, intersecting at a point. Since we always split the longer section (and make a systematic selection 
with equal length sections) when the computed rectangles of sections of two curves overlap, it follows 
that the sections of  67 a curve of a particular size which must be split are those whose rectangles 
overlap rectangles of sections of the other curve having a particular size.  If we go down two levels 
in our search, to the point where, for each curve, we are dealing with sections which are half as long 
as the former sections, then we are back to essentially the same position as before, except at 1/2 scale. 
(There are some differences. The point of intersection may be relatively nearer to or farther from the 
edge of a box. However, the expected situation is the same.) The depth of the search is equal to the 
sum of the logarithms base 2 of the lengths of the two curves (or, equivalently the log of the product 
of the lengths). Since at each level we have the same expected situation, it follows that the search 
time for the point of intersection varies loga- rithmically with the number of sides. If the two lines 
under consideration are close to parallel, the constant of proportionality is likely to be fairly large, 
since lots of rectangle pairs will overlap in situations where the corre- sponding sections do not intersect. 
If two curves intersect in several places, then at each point of intersection there will be a logarithmic 
search. If curves wiggle near each other, without inter- secting, then the search must proceed to the 
point where the computed section rectangles no longer overlap. Since the character of curves and the 
expected degree of intertwining between curves varies from application to application, it is difficult 
to make any precise performance estimate that is likely to be meaningful to real world users. All we 
can say is that in nice cases, we tend to have a logarithmic search. One final question will be considered 
in this section, in anticipation of the next section. It is often the case that a section can be enclosed 
in a rectangle which is much smaller than the computed rectangle for the section. The probability that 
a section must be split tends to vary with the size (either area or length) of the rectangle. We would 
llke to know how tightly the computed rectangles of a "typical" section tends to fit the section. If 
a curve wiggles a lot, then a minimal rectangle may be very much smaller tha~ a computed rectangle since 
the size of the computed rectangle depends  numbers of sides, there may be considerable advantage to 
using tight fitting rectangles, at least at upper levels.  5. EXTENSION AND VARIATIONS In this section 
we will consider three topics; explicit representation of minimal rectangles, algorithms for curves defined 
at different scales, and the extenslonof this approach to three dimensions.  We start by considering 
the amount of storage necessary to explicitly represent minimal rectangles. We let (xleft,yleft) be the 
left most vertex of a section with n = 2 m side and endpoints (xa,ya) and (xh,yb). Recalling the proof 
of Theorem 1 from section 3, we see that xmin = ~xa + xb - n)/2 l ~ xleft ! mln(xa,xb) ~ ~xa + xb)/2J. 
 At most, xleft can assume any one n/2 + 1 = 2 m-I + i values: ~xa + xb)12J, ~xa + xb)12 iJ, .... kxa 
+ xb)/2 -n/2~. Similarily, xright, ytop, and ybottom each may take on any one of at most 2 m-I + I values. 
(Note: When m=0, the four values are determined by (xa,ya) and (xb,yb).) Clearly, we can define each 
of these values with m bits. Without packing, the bounding rectangles can be defined by 4m bits. With 
packing 4m -3 bits are required for m ~ 4, and 0, 4, 7 and I0 bits are required for m = 0, i, 2 and 3 
respect- ively. For 1 ~ i < n, with n being the number of sides of a Gh@in, v(i) divides a section with 
at most 2 m(i)+l sides into two sections, each with at most 2m(i) sides, where m(i) is the number of 
2's in the factorization if i. For indexing and bit counting purposes, we can associate the minimal rectangles 
for these two sections with v(i). Note that we do not need to associate any rectangle with v(O) or v(n) 
given that the n~inimal rectangle for the entire curve is stored. Using argument similar to those in 
the proof of Theorem 2 it is easy to show that, without packing, a total of 8(n -k(n) - m(n))bits are 
required for the bounding rectangles, with k(n) being the number of 1 bits in the binary expansion of 
n and m(n) being defined as above. This means that the storage required for the bsgcr and minimal rectangles 
is about 260% of that required by the hsgcr alone. Packing reduces this figure some. only on the number 
of sides in the section. Studies by Mandelbrot (5,6) indicate that for many curves there may be values 
C and z which are characteristic of the curve, such that the expected area of the rectangle for an n 
sided section is Cn z, with 1 < z ! 2. For very wiggly "space filling" type curves, z is likely to be 
near i, whereas for straight lines z = 2. (In the notation of Mandelbrot z = 2/D. For natural curves 
z is likely to range from about 1.96 for smooth curves such as the coast of South Africa down to about 
1.6 for irregular curves such as the east coast of Britain, based on figures quoted in (5).) In an environment 
where curves tend to have relatively small z values and very large With packed rectangles we must treat 
the bottom 4 levels somewhat differently since more than 4m -3 bits are required for rectangles of section 
with 2 m sides for m < 4. It appears that the real need for minimal bounding rectangles occurs at the 
higher levels, partlcularily in light of Mandelbrot's work. The obvious solution is to store rectangles 
of minimal size only for those sections with a certain minimum number of sides. For example we might 
compute the bounding rectangles when m(i) ~ 4. This reduces the storage requirements for rectangles to 
34[n/16] -8(k([n/16]) + m([n/16])) -26, or Just under 2.125 bits per vertex. Asymptotic storage requirements 
for a bsgcr and minimal rectangles  for appropriate sections with 16 or more sides come to 7.125 bits 
per vertex, or 7.5 bits per vertex if xleft, xrlght, ytop and yb~ttom are not packed. The use of bsgcr's 
is partlcularily appropriate to environments where different curves must be represented to different 
precision. To get a less precise approximation of a curve, one simply avoids going full depth. For example, 
given a precisely defined road and a roughly defined region receiving more than 20 inches of rain in 
an average year, one may wish to know the point at which the road enters the region. Clearly there is 
no merit in finding the point to a greater precision than that used to define the regional boundary. 
The precise road definition is of no real use to us. Once we have a road section with a bounding rectangle 
which is both as small or smaller than the size of the grid used to define the region and is known to 
contain the desired point of intersection, then we need not proceed further. If we require that the point 
of intersection lie on the road, then any vertex of the selected road section will give us a result which 
is accurate to the precision of the regional boundary. The ability to access a curve at any of various 
accuracies also makes smoothing a curve for display trivial. In general, if different grid sizes are 
used, it is desirable to have the ratio between any two be a power of two. We now turn our attention 
to surfaces in three space. The paper by Boyell discussed in section 2 is quite general. Given a integer 
valued function z(i,J) defined in terms of two integer parameters, i and J, with 0 < i < imax, 0 < j 
< jmax, Boyell's method may be applied provided Iz(i,j) -z(k,Z) I < max(li - k|, |J -£1) for all valid 
i, j? k and £. The value of z(i,j) is defined relative to z(i -2m,j) or z(i,j -2 m) or z(i -2m,J -2 m) 
where m = min(m(1),m(j)), depending on whether m = m(1) or m = m(J) or both. Contour maps and other functional 
(or 2 ~ - D) surfaces can, of course, be represented in this way after suitable scaling. More general 
surfaces may be represented by parametrically representing x, y and z coordi- nates. Conditions similar 
to the restriction on the rate of change for z given above apply to all three coordinate functions. By 
using more bits to represent each difference, we can reduce these restrictions to Iz(i,j) -z(k,l) I e 
C max(li - kl,lJ - ~I), with similar in- equalities for x and y. The practicality of using this method 
to represent surfaces has not been fully investi- gated. It may be useful where several instances of 
an object must be displayed, each with a different scaling. If the master copy is defined as described 
above, then it is possible to access different instances at differing preclsions by not going full depth 
in retrieving control points. The method also may make it possible to quickly solve problems such as 
finding the point of intersection between a curve and an irregular surface.  6. CONCLUSION By storing 
the differences between the coordinates of various vertices of a chain approximating a curve (so vertex 
number (2k + I)2 m is defined relative to vertex 2k2m), we have been able to develop a compact representation, 
the binary searchable grid chain representation or bsgcr, which can be quickly processed. We need less 
than 5 bits of storage per vertex, plus several words of header information, for each curve. For nice 
cases, the time required to determine if a point is inside a closed curve is independent of the number 
of side in the chain approximating the curve. Points of intersection can be found by a logarithmic 
search. More information on the bsgcr may be found in [3]. ACKNOWLEDGEMENT I would like to thank Robert 
Fowler of Simon Fraser University for bringing to my attention the direct relationship between the depth 
of the search in the inside test and the number of significant digits needed to compare the radius of 
a circle to the distance from the center of the circle to the point being tested. The algorithms described 
in section 3 have been programmed in FORTRAN and tested by Richard Verburg. REFERENCES i. Boyell, 
Roger L. The method of successive grids for reduction of function storage requirements. Comp. J. 5 (Jan. 
1963), 320- 321. 2. Burton, Warren. Representation of many- sided polygons and polygonal lines for 
rapid processing. Comm. ACM 20, 3 (March 1977), 166-171.  3. Burton, Warren. A fixed grid curve or region 
representation for rapid processing. Report CS78-I. Dept. Math. and Comp. Sci., Michigan Technological 
Univ., January 1978.  4. Freeman, Herbert. Computer processing of line-drawing images. C omp. Surveys 
6, i (March 1974), 57-97.,  5. Mandelbrot, Benoit. How long is the coast of Britain? Statistical self-similarity 
and fractional dimension. Science 156 (May 5, 1967), 636-638.  6. Mandelbrot, Benoit. Fractals: Form~ 
Chance and Dimension. W. H. Freeman, San Francisco, 1977.    
			