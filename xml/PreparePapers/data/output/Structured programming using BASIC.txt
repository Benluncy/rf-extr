
 STRUCTURED PROGRAMMING USING BASIC RObert N. Cook Central Michigan University Mt. Pleasant, MI 48859 
 I. Abstract With the advent of inexpensive microcompu- ters, which are mainly programmed in BASIC, 
and the widespread availability of BASIC on both minicomputers and large scale com- puters, the advantages 
of structured programming mandate that the techniques be extended to BASIC° Alternation (IF-THEN- ELSE) 
as well as repetition (DO WHILE and DO UNTIL) are easily implemented in BASIC. The CASE structure and 
necessary style conventions to insure readable, easy to write, easy to debug programs are readily implemented 
in BASIC° Structured pseudo- code is used to express algorithms which are then written in structured 
BASIC° II. Introduction The advantages of structured programming over the old fashioned B.S. (Bowl 
of Spaghetti) style of programming have been well documented for several years° With- out doubt, structured 
programming is easier using a language with the necessary control structures (PL/I, ALGOL, PASCAL, etc.)° 
Although most BASICs do not have all the necessary structures, most notably the DO WHILE, this structure 
and other convenient structures are easily imple- mented in BASIC° Most FORTRAN compilers also lack the 
necessary structured state- ments which may be implemented with somewhat greater difficulty using the 
techniques described here. (See Hughes and Michton 3 Chapter 7 for example). The approach described 
here for writing structured BASIC programs begins by writing structured pseudocode. This Permission 
to copy without fee all or part of this material is granted provided that the copies are not made or 
distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. pseudocode 
is then translated into struc- tured BASIC and submitted to a "standard" BASIC interpreter° Control structures 
described include IF-THEN-ELSE-ENDIF, DO WHILE-ENDDO, DO UNTIL-ENDDO, DO-ENDDO, and CASE structures. 
In addition, various programming conventions are presented which enhance the readability and under- standability 
of the structured BASIC pro- grams. These conventions apply equally well to any structured language. 
Two programs showing the structure and style conventions are presented. The Game of Life is written in 
Univac (University of Maryland) UBASIC 1 and a program for debt payments is written in Radio Shack TRS-80 
Level II (DOS) BASIC 2 (Microsoft). Both programs were written by students taking introductory Computer 
Science classes. IIIo Control Structures Although most BASICs currently used have IF-THEN-ELSE statements, 
they usually restrict the THEN and ELSE clauses to one statement. This is too severe a restric- tion 
to tolerate° The pseudocode for the IF-THEN-ELSE statement is: IF A=B THEN THEN clause statements 
 ELSE ELSE clause statements ENDIF If proper indenting conventions are fol- lowed in the pseudocode, 
the ENDIF is often not needed° However, as it is used in the BASIC implementation, it is included here° 
The structured BASIC implementation is: &#38;#169; 1980 ACM 0-89791-013-3/80/0200/0040 $00.75 40 i00 
IF A=BTHEN 200 ELSE 300 200 hEM THEN TIIEN clause statements 290 GOTO 400 300 REM ELSE ELSE clause 
statements 400 hEM ENDIF Should a BASIC implementation not have IF-THEN-ELSE, line i00 becomes: I00 
IF A=B THEN 200 ii0 GOTO 300 For the remainder of the paper the exis- tence of the IF-THEN-ELSE structure 
is assumed. Virtually no microcomputer BASICs have a DO WHILE structure. UBASIC has a FOR WHILE structure, 
which is not discussed here. 1 Pseudocode for a DO WHILE is given simply by: DO WHILE A=Z SCOPE OF 
LOOP ENDDO The structured BASIC implementation is given by: i00 hEM DO WHILE A=Z Ii0 IF A=Z THEN 120 
ELSE 200 120 SCOPE OF LOOP 190 GO TO I00 200 hEM ENDDO I00 Although programs can be written using only 
the previous two structures along with sequentially executed statements, the DO UNTIL structure is often 
useful. In pseudocode this structure is shown as: DO UNTIL p=Q ENDDO This distinction between DO UNTIL 
and DO WIIILE, of course, is that the DO UNTIL performs the test before the body of the loop is executed 
and the DO UNTIL performs the test for completion after the body of the loop is executed Thus, the DO 
UNTIL loop statements must execute at least once. This testing sequence is illustra- ted by the BASIC 
implementation: I00 REM DO UNTIL C=Q Scope of Loop 190 IF C=Q THEN 200 ELSE i00 200 REM ENDDO The iterated 
DO may be directly implemented in BASIC. Pseudocode for the iterated DO is: DO X = i0 TO 25 BY 0.5 Scope 
of Loop ENDDO Implementing the pseudoeode we have: i00 FOR X = i0 TO 25 STEP 0.5 Scope of Loop 200 NEXT 
X Another useful structure is the CASE structure. This too may be easily imple- mented in any BASIC with 
the ON-GOTO statement. Using pseudocode we have: CASE A CASE 1 : A = i Scope CASE 2 A = 2 Scope CASE 
3 A = 3 Scope ENDCASE In structured BASIC we implement the CASE structure as follows: I00 REM CASE A 
ii0 ON A GOTO 200,300,400 200 REM CASE 1 A = 1 Scope 290 GO TO 500 300 REM CASE 2 A = 2 Scope 390 GO 
TO 500 400 hEM CASE 3 A = 3 Scope 500 REM ENDCASE All of the structured BASIC implementations described 
above owe their readability to certain style conventions described in the next section. 41 IV. Style 
Conventions In addition to the usual alignment conven- tions described below, I have found it useful 
to require students to write a header and a dictionary for each program. The header simply states the 
purpose of the program in general terms. This forces the students, if they have not already done so, 
to stop and consider what the program is supposed to do. A variable dictionary, in which the function 
of every variable in the program is explained, is extremely useful in any BASIC program. Due to the 
severe limitations on variable names (usually limited to one alphabetic character followed by a blank 
or a numeric character) the variable names must neces- sarily be uninformative. G might stand for gross 
pay or the number of garbage trucks in the fleet° By adding a diction- ary and limiting modules to one 
page, a person examining a module may quickly determine what each variable does in the program. For examples 
of headers and dictionaries, see the example programs on the following pages. Style conventions that 
greatly improve the readability of any program are achieved by indenting and aligning the appropriate 
statements of the control structure and the scope of the control structure. For example, the scope of 
the THEN and ELSE clauses, DO WHILE and DO UNTIL loops, and so on, are indented 3-5 spaces. For examples 
see the programs following. Alignment of IF, THEN, ELSE, and ENDIF as well as DO and ENDDO, FOR and 
NEXT, etc. also greatly improves readibility. In Radio Shack BASIC, for example, the extra blanks do 
not use extra bytes of RAM as a String of blanks is stored in a single byte. In "large" machines such 
as the Univac 1106, storage limitations are usually not a problem, so the extra blanks used pose no serious 
problem. A very useful convention to improve readability is to limit modules (both main programs and 
subroutines) to one page. This convention, which is followed in the interest payment example but not 
in the Game of Life example, makes the modules much easier to understand. Remarks need be used only 
to a limited extent inside the modules because the other style conventions make the struc- ture of the 
module evident. Remarks are used only to explain the nonstandard items in the programs such as CHR$, 
for example. Indenting of nested loops such as lines 481 to 600 of the Life program also im- prove the 
readability of the program. Having discussed the style conventions, we may now look at two example programs. 
 V. Example Programs The first example is the often used but seldom understood interest payment example. 
Assuming that previous refinements have been used to develop the pseudocode, the last refinement is: 
READ BALANCE (B), INTEREST RATE (R), PAYMENT (P), MONTH (M), YEAR (Y) PRINT HEADINGS DO WHILE B+$*B>P 
 I = R*B TOTAL YEARLY INTEREST (YI) = YI + I B=B+I-p M = M + I PRINT M, Y, B, I IF M = 12 THEN M = 
0 Y = Y + 1 Y1 = Y1 + 1 (Year counter) PRINT Y1 Y1 = 0 (YearIy interest) IF Y1 = 3 THEN Y1 = 0,NEW PAGE 
(every 3 years) ELSE SKIP 2 LINES PRINT HEADINGS SKIP i LINE ENDIF ENDIF ENDDO I = R*B (last month calculations) 
YI = YI + I P=B+I B = 0 M = M + 1 PRINT P,TI END The actual BASIC program is: 10 REM 20 REM 30 REM 
40 REN  50 REN 60 REM 80 90 100 110 120 REM 130 148 REM 158 160 REM 178 180 198 200 218 228 230 240 
REM 258 260 270 280 298 388 310 REM 328 REM 330 348 REM 345 358 360 370 REM 388 398 408 418 420 REM 438 
REM 448 450 REM 460 REM 470 480 490 500 510 520 530 548 550 560 578 PROGRAM TO COMPUTE INTEREST PAYMENTS 
ON A LOAN WRITTEN BY TUDOR APMADOC VARIABLE DICTIONARY : B = BALANCE OF DEBT R = INTEREST RATE P = AMOUNT 
OF PAYMENT M = CURRENT MONTH COUNTER Y = CURRENT YEAR COUNTER Yl = YEAR COUNTER FOR PAGEING YI = YEARLY 
TOTAL INTEREST AS = FORMATTED PRINT INFO B$ = FORMATTED PRINT INFO AS=" ### ###### ######. ## ######. 
##" B$="#####. ##" DATA 100800,. 01,1588, 0, 1979 READ B, R, P, M, Y **** PRINT HEADING LPRINT "MONTH", 
"YEAR", "BALANCE", "INTEREST" **CHR$(138) GENERATES A LINE FEED LPRINT CHR$(13B) DO HHILE B + (R * B) 
=> PAYMENT IF B + (R * B> => P THEN 188 ELSE 450 I=R*B YI = YI + I B=B+I-P M=M+t LPRINTUSING A$~ M, Y, 
B, I IF M : 12 THEN 248 ELSE 430 THEN M=O Y=Y+I Y1 = YI + 1 LPRINT" TOTAL INTEREST FOR YEAR = $% LPRINTUSING 
B$~ Yl YI =8 ****** ***** IF Y1 : 3 THEN 348 ELSE 370 THEN LPRINT CHR$(12) Yl=8 LPRINT CHR$(138> ELSE 
LPRINT CHR$<138) LPRINT CHR$(138) CHR$(12) GENERATES FORM FEED CHR$(138) GENERATES LINE FEED LPRINT"MONTH", 
"YEAR", "BALANCE", "INTEREST" LPRINT CHR$(138) END IF END IF GOTO 168 END DO ': **** LAST PAYMENT COMPUTATIONS 
 I=R*B YI = YI + I P=B+I 8=8 M=M+I LPRINTUSING A$~ M, Y, B, I LPRINT CHR$(138) LPRINT "LAST PAYMENT 
= $"} LPRINTUSING B$~ P LPRINT " TOTAL INTEREST FOR YEAR = $"~ LPRINTUSING B$~ YI 580 END 43 MONTH 
YEAR BALANCE INTEREST t 1979 99580.00 1800.08 2 1979 98995.88 995.80 3 1979 98485. 88 989. 95 4 1979 
97969.88 984.85 5 1979 97449.58 979.78 6 1979 96924.88 974.58 7 1979 96393.28 969.24 8 1979 95857.28 
962.93 9 1979 95315.78 958.57 10 1979 94768.98 953.16 tt 1979 94216.68 947. 69 12 1979 92658.78 942.17 
TOTAL INTEREST FOR YEAR = $11658.78 MONTH YEAR BALANCE INTEREST t t988 93895. 38 926. 59 2 1988 92526.38 
938.95 3 1988 91951.68 925.26 4 1988 91371.18 919.52 5 1988 98784.88 913.71 6 1988 98192.68 987.85 7 
1988 89594.68 981.93 8 1988 88998. 58 895. 95 9 1988 88388,48 889.91 18 1988 87764. 28 883. 88 tl 1988 
87141.98 877.64 12 1988 86513.38 871.42 TOTAL INTEREST FOR YEAR = $18854.58 MONTH YEAR BALANCE INTEREST 
1 t98t 85878. 48 865. 13 2 1981 85237.28 858.78 3 1981 84589.68 852.37 4 1981 83935.58 845.98 5 198t 
83274.88 839.35 6 1981 82687.68 832.75 ? 1981 81933.68 826.88 8 1981 81253.88 819.34 9 1981 88565.58 
812.53 18 1981 79871.28 885.66 tl 1981 79169. 98 798. 7t 12 1981 78461.68 791.78 TOTAL INTEREST FOR YEAR 
= $ 9948. 28 The second example is the "Game" of Life, which is often shown in BASIC texts. Rules for 
the "Game" are given in the header. Sample output is shown using ) to represent an occupied cell. The 
array of cells is 22 by 22. 44 0001 0002 REM* THIS IS A HARD-COPY OF THE GAME OF LIFE. 2T IS ADAPTED 
~ERE FOR THE 0003 REM* UNIVAC 1106. HOWEVER THE GAME WAS DEVELOPED ON AND FOR USE ON THE O00W REM~ RADIO 
SHACK TRS-B0. THERE ARE 3 LAWS FOR THE GAME OF LIFE: 0005 REM~ BIRTH -A SQUARE BECOMES OCCUPIED IF 3 
OF 8 NEIGHBORING REM* SQUARES ARE OCCUPIED 888 REM* SURVIVAL -AN OCCUPIED SQUARE REMAINS OCCUPIED IF 
2 OR 3 REM* WERE OCCUPIED IN THE PREVIOUS GENERATION 8881REM* DEATH -AN OCCUPIED SQUARE BECOMES UNOCCUPIED 
IF IT HAS FEWER REM* THAN 2 OR MORE THAN 3 OCCUPIED NEIGHBORS REM~ 2 ARRAYS ARE U~ED, A IS REFERENCED 
WHILE DEVELOPING B AND VICE-VERSE REM* WHEN AN ARRAY SQUARE IS OCCUPIED IT IS GIVEN A VALUE OF 10 AND 
I IS * REM~ ADDED TO IT FOR EACH NEIGHBOR THAT IS OCCUPIED, A SQUARE, THEN, * REM= ~ECOMES OCCUPIED IN 
THE FOLLOWING @ENERATION IF THE SQUARE IN THE 0015 REM* PRESENT 6ENERATION IS EQUAL TO 3, 13, OR 1~. 
001~ REM* DICTIONARY -A, B: ARRAYS USED O01Z REM~ X, Y~ XI, YI~: COUNTERS AND INDEXES FOR ARRAYS O01B 
REM= I: MAJOR LOOP COUNTER FOR ITERATIONS 0019 REM* L: ITERATIQNS DESIRED BY THE USER A1,BI: TEMPORARY 
STORAGE ***************************************************************************** 0022 REM. STATEMENTS 
5-170 PRINT EXPLANATION AND HEADER O02Z PAGE PRINT TAB(20)I'***t*tI*=$*~*t**t**t' 88 I PRINT TAB(20);'* 
*~ PRINT TAB(20)t~* LIFE *~ ;881BPRINT TAB(20);'* *' 0050 PRINT TAB(20)I~********************' 0 6 PRINT 
~THIS IS THE GAME OF LIFE, THERE ARE 3 LAWS FOR THE ~ PRINT ~EVOLUTION OF THE NEXT GENERATION, THEY ARE:' 
 o8,B PRINT TAB(IO)I'BIRTH -AN OCCUPIED SQUARE BECOMES OCCUPIED ~ 88 8 PRINT TAB(1B);eIF IN THE PRECEDING 
GENERATION 3 OF THE 8' 0100 PRINT TAB(IB)I,NEIGHBORING SQUARES WERE OCCUPIED., 0105 PRINT 0110 PRINT 
TAB(IO);~URVIVAL -AN OCCUPIED SQUARE REMAINS OCCUPIED' PRINT TAB(21)I'IF IN THE PRECEDING GENERATION 
2' 181 8 PRINT TAB(21);~OR 3 NEIGHBORING SQUARES ~ERE OCCUPIED.~ 0135 PRINT AB -N O C E ~i~ ~ABItBI|I~AI~ 
TH~ PR~C~IN~ ~T~O~E~E~N~P~ ~D' B~T Tl~}i~ll 'OR MORE THAN 3 NEIGHBORING SQUARES' ~WERE OCCUPIED,' 0171 
REM ~ STATEMENTS176-360 ESTABLISH NUMBER OF GENERATIONS AND ~NITIALIZE IO"~W REM ~IM A(22~22),B(22,22) 
R~NT'ENTER INITIAL NUMBER OF ITERATIONS' INPUT L PRINT 'ENTER INITIAL COORDINATES; TYPE 0~0 TO END' 020D 
PRINT '(COORDINATES MUST BE OF THE FORM I,I AND CANNOT BE <1 OR >20}' 0202 REM 02tO INPUT X,Y 0 5 REM 
DO WHILE X+YA=O IF X+Y=O THEN BOTO 370 REM REM IF X<Z OR X>20 OR Y<I OR Y>20 THEN 2WO ELSE 265 REM 
THE~RINT ~ERROR:RE-ENTER' 0260 GOTO 350 REM ELSE X=X+l Y:Y+I A(XeY):A(X~Y)+IO 0300 FOR XI=X-I TO X+l 
0310 FOR YI=Y-1 TO Y÷I 0320 A(XI,Y1)=A(XI~Y1)+I 0330 NEXT YI 03W, O NEXT XI 035g R~TO 210 IF END 0351 
0352 REM ~0360 REM END DO 0361 REM 45 i 0362 REM 0370 FOR I=l TO L STEP 2 0371 REM (PAGE FUNCTION GIVES 
NEW PAGE ON OUTPUT) 0372 PAGE 037W REM R M R~M STATEMENTS 380-W80 PRINT A ARRAY AND ZERO B ARRAY REM 
0372 REM 0380 FOR Y=I TO 22 0390 FOR X=I TO 22 owog IF A(X,Y)<IO THEN 410 ELSE 440 REM ;° THENpRIN T, 
,; ~3B GOTO ~60  O0~qO REM ELSEPRiNTtl), ; |0~50 |0~60 REM END IF B(X,Y)=O NEXT X PRINT NEXT Y REM 
 REM STATEMENTS 490-600 GENERATE B ARRAY FROM A ARRAY REM FOR X=2 TO 21 0500 FOR Y=2 TO 21 0510 AI=A(XpY) 
IF Ai<>3 AND AI<>13 AND A1<>1~ THEN 590 0520 0530 B(X,Y)=B(X,Y)+IO 05~0 FOR XI=X-1 TO X÷I 0550 FOR YI=Y-1 
TO Y+I 0580 B(X1,Y1)= B(X1,Yi)+I 0570 NEXT Y1 10580 NEXT X1 ~0590 REM END IF ~0591 NEXT Y ,0600 NEXT 
X P0601 REM REM STATEMENTS 610-710 PRINT B ARRAY AND ZERO A ARRAY 0603 REM 0602 0610 FOR Y=i TO 22 0620 
FOR X=I TO 22 IF B(X,Y)<iO THEN 640 ELSE 670 0630 06WO REM THEN PRINT' '; 0650 GOTO 690 REM ELSEpRiNT,(),; 
REM END IF P 0 A(X,Y)=O NEXT X PRINT NEXT Y REM 0 ~ REM STATEMENTS 720-830 GENERATE A ARRAY FROM B 
ARRAY AND LOOP BACK 0711 REM |0720 FOR X=2 TO 21 00730 FOR Y=2 TO 21 BI=B(XpY) IF B1<>3 ANO 81<>13 AND 
BI<>iW THEN 820  18T 8 00760 A(X,Y)=A(X,Y)+IO FOR XI:X-I TO X+I FOR YI=Y-1 TO Y÷I 1 81 8 0790 A(XltYI)=A(XlwY1)+i0800 
NEXT Y1 NEXT Xl REM END IF NEXT Y 0830 NEXT X 08~0 NEXT I 0850 PRINT tENTER ADDITIONAL NUMBER OF ITERATIONS' 
0851 INPUT L 0860 IF L>O THEN 370 0870 REM ELSEPRINT '*** GAME OVER ***: THANKS FOR PLAYING>' PRINT'NOW 
YOU KNOW THE ESSENCE OF LIFE>>>' END 1 46 * LIFE * IHIS 15 THE GAME OF LIFE, THERE ARE 3 LA~S FOR THE 
VOLUTION OF THE NEXT GENERATION. THEY ARE" BIRTH -AN OCCUPIED SQUARE BECOMES OCCUPIED IF IN THE PRECEDING 
GENERATION 3 OF THE 8 NEIGHBORING SQUARES WERE OCCUPIED, SURVIVAL -AN OCCUPIED SQUARE REMAINS OCCUPIED 
IF IN THE PRECEDING GENERATION 2 OR 3 NEIGHBORING SQUARES WERE OCCUPIED, NTg~ INITIAL COORDINATES; TYPE 
0,0 TO END COORDINATES MUST BE OF THE FORM 1,1 AND CANNOT BE <1 OR >20) 0,5 0,6 0,7 0,8 0 0,~.0 0,11 
0,12 0,13 0,1~ 0,15 ,0 () () () () () () () () () () () ()()() ()()() ()()() ()()() ()()() ()()() ()()() 
()()() ()()() () () () () () () () () () () () () () () () () () () () () () ()()() ()() ()() ()()() 
()()() ()()() ()()() ()()() ()()() ()()() ()()() ()()() ()()() ()() ()() ()()() () () () () () () () 
() ()()() ()()() () () () () () () () Generation i Generation 2 Generation 3 Generation 4 Generation 
5 ( )() () )( ) ()()() ())( )() () () )() () () ()()() ()()() () () ()()() () () () ()()() ()()() () 
() ())( )() )() () )( ) ()()() ( () () )() () () ()()() Generation 6 Generation 7 () Generation 8 47 
 ()()() () () ( ( () () )()( () () () ()()() ()()() () () ( ( ()()() )()( () () () () )()( ()()() ()()() 
Generation 9 )()() () () ENTER Generation ADDITIONAL NUMBER I0 OF ITERATIONS ()()() () () ()()() () () 
() ()()() ) ())() ( )() ) ) ( )() ()()() ()()() () () ()()() (()() () Generation 12 Generation ii ) ) 
) ()() ( )() ) ) )() )() )() )() ) ) )() )() ()( () () ENTER () ) ( ) ( () ()()() () ) ( ) ( () Generation 
ADDITIONAL ()()() 14 NUMBER OF ITERATIONS Generation 13 *** NOW GAME YOU OVER KNOW ***: TIIANKS FOR PLAYING> 
THE ESSENCE OF LIFE>>> TIME : 6.041 OFIN 48 Vl. Conclusions The second example is a moderately compli- 
cated program for a BASIC course. However, due to the structure and style convention it is not particularly 
difficult to read or teach. Even without the benefit of 3 or 4 refinements of the pseudocode which would 
be shown to students, the program is readable and understandable on its own. In summary, then, all of 
the necessary control structures for structured program- ming are easily implemented in BASIC. Both readability 
and understandability of the problem are enhanced by simple alignment and indenting conventions as well 
as the use of the header and the dictionary. Two texts taking somewhat this approach are given in the 
references.4, 5 VII. Acknowledgements Thanks are due to Mr. Tudor Apmadoc and Mr. David Sundberg, students 
at Central Michigan University, who wrote the example programs. References I. Sperry Univac ii00 Series 
BASIC Pro- grammer Reference Manual, Sperry Rand Corp~ 2. TRS-DOS &#38; Disk BASIC Reference Manual, 
Radio Shack, Fort Worth, Texas.  3. Hughes, Joan K. and Michton, Jay I., A Structured Approach to Programming, 
Prentice-Hall, 1977.  4. Worland, Peter B., Introduction to BASIC A Structured Approach, Houghton Mifflin, 
1979.  5. Koffman, Elliot B. and Friedman, Frank L., Problem Solving and Struc- tured Programming in 
BASIC, Addison- Wesley, 1979.  
			